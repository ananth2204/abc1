{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011550000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2527798, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 30, "INMDSNAM": "CBT.V500.FILE244.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE244.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00*\\x06'", "DS1TRBAL": "b'\\x86F'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xb0\\x00\\x0c\\x01\\xb3\\x00\\t\\x00+'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x13o\\x01\\x02\\x13o\\x12Q\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-16T00:00:00", "modifydate": "2002-05-16T12:51:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 447    FILE:  244\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT447.FILE244\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 145 MEMBERS COUNTED; CUMULATIVE SIZE IS 23,047 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/16/02    12:51:42    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x02\\x13o\\x01\\x02\\x13o\\x12B\\x00;\\x00;\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-16T00:00:00", "modifydate": "2002-05-16T12:42:37", "lines": 59, "newlines": 59, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Fwd: CBT445.FILE244\nDate: Thu, 16 May 2002 09:13:45 -0400\nFrom: Sam Knutson <sknutson@cbttape.org>\nTo: sbgolob@aol.com, sbgolob@attglobal.net\n\nHi Sam,\n\nDale McCart asked about this old mod and once he found it has\nkindly updated it to a couple more current releases of the OS.\n\nCan you fold the new ones into File 244.\n\n                 Thanks, Sam\n\n>Subject: CBT445.FILE244\n>To: sknutson@cbttape.org\n>X-Mailer: Lotus Notes Release 5.0.8  June 18, 2001\n>From: \"Dale McCart\" <Dale.McCart@kmc-usa.com>\n>Date: Wed, 15 May 2002 10:06:15 -0700\n>X-MIMETrack: Serialize by Router on kmcsmtp/Kmc-Usa(Release\n>5.0.8 |June 18, 2001) at 05/15/2002\n>  10:13:59 AM\n>\n>*\n>*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n>*\n>*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN THE FOLLOWING MVS SYSTEMS\n>*\n>*      OS/390 2.6 MODIFIED FROM CBT445.FILE244 A07ZAP3 BY DALE MC CART\n>*\n>*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n>*\n>NAME IEBPTPCH IEBPPCH1\n>  VER 12F0 D502,7008,7014\n>  REP 12F0 D507,7000,700C\n>/*\n>*\n>*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n>*\n>*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN THE FOLLOWING MVS SYSTEMS\n>*\n>*      Z/OS 1.2 MODIFIED FROM CBT445.FILE244 A07ZAP3 BY DALE MC CART\n>*\n>*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n>*\n>NAME IEBPTPCH IEBPPCH1\n>  VER 12FC D502,7008,7014\n>  REP 12FC D507,7000,700C\n>/*\n\n                 Best Regards,\n\n                         Sam Knutson\n                         mailto:sknutson@cbttape.org\n                         CBT Tape Home Page http://www.cbttape.org\n                         My Home Page       http://www.knutson.org\n\nReminder: Be sure to sign up for the CBT Tape email newsletter at\nhttp://www.cbttape.org/maillist.htm\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "###INDEX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x18\\x00\\x93&\\x9f\\x01\\x02\\x13o\\x12P\\x00\\xfd\\x00\\xfa\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-09-26T00:00:00", "modifydate": "2002-05-16T12:50:18", "lines": 253, "newlines": 250, "modlines": 0, "user": "SBGOLOB"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n         GUIDE GOODIES      1993 'A'\n         =============      ========\n\nThis dataset has been built up from several contributions collected\nover the last few months to form the first cut of a new goodies file.\n\nWhere member names have not conformed to the requested format the\nfirst three characters in most cases have been changed to 'Ann' so\nbeware if compiling programs as member names will need adjusting to\nwhat the program expects.  -  sorry but its the only way to keep the\ntape in a sensible format.\n\nEach company contribution has an individual 3 character prefix and\nan index member.  To help evaluate the dataset all of the index members\nare copied into this member as well.\n\nGood luck  --    Philip Pecksen         Sept 1993\n\n=====================================================================\n  A01XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    DAVE THORBY\n                     LONDON ELECTRICIT                                  Y\n                     071-232 3045\n ____________________________________________________________________\n\n  A01CHECK         CHECKS IF A SPECIFIED JOB IS STILL RUNNING\n  A01ENQ           TSO C.P. TO DISPLAY ENQUEUES\n  A01INMRZ         I.D.T.F. RECEIVE PRE-PROCESSOR TO CHECK FOR MIGRATED LOG D/S\n  A01IPLVO         TSO C.P. TO DISPLAY CURRENT IPL VOLUME\n  A01IPLNV         DELETE DATA SETS CATALOGUED TO VOLUMES WHICH NO LONGER EXIST\n  A01DSNWT         WAITS FOR A DATA SET TO BECOME AVAILABLE WITHOUT RESERVING IT\n  A01CALL          TSO C.P. TO CALL A PROGRAM FROM THE LINKLIST\n  A01MOVIE         ISPF MOVING PICTURES  E.G. XMAS LOGON MESSAGE\n  A01TAPE          TAPE SCAN PROGRAM\n  A01EXTNT         ADD SECONDARY EXTENTS, CHANGE BLOCKSIZE, REALLOCATE IN TRACKS\n  A01FREE          GET FREE SPACE FOR ALL ONLINE DASD\n  A01GETAC         GET TSO USER'S CURRENT ACCOUNT CODE INTO CLIST VARIABLE\n  A01HSMNC         CHECK DFHSM MCDS FOR UNCATALOGUED MIGRATED DATA SETS\n  A01LIST          AVOID TSO ABEND S806 FOR LIST/ASM/CALC/COBOL/FORT/COPY/MERGE\n  A01P0100         ISPF BASED IBM MANUAL MANAGEMENT PROGRAM\n  A01PC100                \"    INVOCATION CLIST\n  A01PM00                 \"    MESSAGE MEMBER\n  A01PM01                 \"    MESSAGE MEMBER\n  A01PM02                 \"    MESSAGE MEMBER\n  A01PM03                 \"    MESSAGE MEMBER\n  A01PM04                 \"    MESSAGE MEMBER\n  A01PM09                 \"    MESSAGE MEMBER\n  A01PP010                \"    PANEL\n  A01PP020                \"    PANEL\n  A01PP030                \"    PANEL\n  A01PP040                \"    PANEL\n  A01PP050                \"    PANEL\n  A01PP060                \"    PANEL\n  A01PP070                \"    PANEL\n  A01PP080                \"    PANEL\n  A01PP090                \"    PANEL\n  A01PP100                \"    PANEL\n  A01PP110                \"    PANEL\n  A01PP120                \"    PANEL\n  A01PP130                \"    PANEL\n  A01PP140                \"    PANEL\n  A01PH010                \"    TUTORIAL\n  A01PH020                \"    TUTORIAL\n  A01PH030                \"    TUTORIAL\n  A01PH040                \"    TUTORIAL\n  A01PH050                \"    TUTORIAL\n  A01PH060                \"    TUTORIAL\n  A01PH070                \"    TUTORIAL\n  A01PH080                \"    TUTORIAL\n  A01PH090                \"    TUTORIAL\n  A01PH100                \"    TUTORIAL\n  A01PH101                \"    TUTORIAL\n  A01PH110                \"    TUTORIAL\n  A01PH120                \"    TUTORIAL\n  A01PH130                \"    TUTORIAL\n  A01P0200                \"    FILE LISTING PROGRAM\n  A01LOGOF         LOGOFF TSO FROM ISPF MAIN MENU\n  A01SKEOF         RECOVER DATA FROM BEYOND END OF FILE MARKS ON DASD\n  A01SMF           SCAN SMF FOR SELECTED RECORD TYPES\n  A01SCAN          SCAN RECFM=VS/VBS DATA SETS FOR MISSING SEGMENTS\n  A01VERFY         ENSURE ALL VSAM DATA SETS ON A DISK ARE PROPERLY CLOSED\n  A01PAGEL         DISPLAY LIST OF PAGE + SWAP DATA SETS\n  A01RACXT         DISPLAY SPECIFIED USER'S DEFAULT RACF GROUP + USER NAME\n  A01RCORE         REALTIME REPORT ON REAL STORAGE FRAMES USED (C/F RMF)\n  A01VRGRP         SET CLIST VARIABLE TO CURRENT RACF CONNECT GROUP\n  A01UT01          CREATE CONTROL CARD(S) FROM PARM\n  A01WAIT          TSO C.P. TO WAIT A SPECIFIED LENGTH OF TIME\n  A01ZDOW          ISPF CLIST TO GET DAY OF WEEK\n\n ____________________________________________________________________\n\n  A02XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    --\n                          Mike Teale\n                          L.O.L.A.\n                          081-366 6611 x285\n ____________________________________________________________________\n\n\n  This library contains the following goodies:-\n\n   1. An edit macro called ZOOM which will display a JCL procedure\n      while editing JCL. The cursor is placed on an EXEC statement\n      in your job and the ZOOM command entered. The JCL proc will\n      be displayed via a browse panel.\n\n      Member Names:   A02ZOOM\n\n\n\n   2. An edit macro called JOBC which will generate a job card.\n      This macro displays an entry panel and is documented via\n      tutorial panels. The job standard is for L.O.L.A.'s  set\n      up but can be changed.\n\n      Member Names:   JOBC,A02N021,A02N0211    -  edit macros\n                      A02N021                  -  entry panel\n                      A02MGN02                 -  messages\n                      A02N....                 -  Help panels\n\n\n   3. A program called Z7504 that will convert awkward characters\n      such as ampersands and brackets in CLIST variables to other\n      characters so that the CLIST can complete normally. This was\n      written to cater for the situation where someone enters an\n      ampersand in an ISPF panel variable and when the CLIST tries\n      to do anything with the variable it blows up.\n\n      Member Names:   A02Z7504             -  program\n                      A02SETUP,A02CLEAR    -  macros\n                      A0JVARS              -  JCL to assemble/link\n\n\n   4. A program called Z3426 - a CPU soak program to manage CPU\n      resource. This program as it stands requires ACF2 but could be\n      changed if ACF2 is not your security product.\n\n      Member Names:   A02Z3426                 -  program\n                      A02SETUP,A02CLEAR        -  macros\n                                     Also uses ACF2 macros\n                      A02SOAK                  -  JCL to assemble/link\n\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A03XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    DERBYSHIRE COUNTY COUNCIL\n                     C HAMPSHIRE\n                     0629 580000 X7764\n ____________________________________________________________________\n\n\n   NAME    |                     DESCRIPTION\n========================================================================\n A03APSX1  |  LASER PRINTER HEADER-SEPARATOR PAGE.\n A03LPA01  |  SYS1.PARMLIB FOR IEFUJV/IKJEFLD\n A03UJV    |  SMF EXIT IEFUJV (JOB CARD VALIDATION)\n A03UJVRR  |  REFRESH ROUTINE FOR SMF EXIT IEFUJV\n A03EFLD   |  IKJEFLD TSO LOGON EXIT\n A03ITERM  |  FIND TERMINAL ID IN ISPF\n A03X023   |  JES USER EXIT 023. - PREPARE OUTPUT FOR LASER PRINTER\n A03LLOW   |  ENSURES JOBS RUN IN CORRECT COMBINATION.\n A03LLOWP  |  UTALLOW DOCUMENTATION\n A03LLOWR  |  JCL TO RUN UTALLOW.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A04XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    NICK VARLEY\n                     GE CAPITAL                                         Y\n                     0272 353555\n ____________________________________________________________________\n\n A04VTOC          VTOC FIX FOR DFP V3 TO PREVENT PDS/E FORMAT ASSUMED\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A05XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    PAUL VOYNER\n                     WHITBREAD                                          Y\n                     0734 581166\n ____________________________________________________________________\n\n    REXX UTILITY TO CALL DISPLAY OF SYSTEM INFO ( LAST IPL,MVS VERSION\n    FMID CPU ID'S, AFP LIBS  AND LINKLST\n\n  A05DATEC    DATE CONVERSION ROUTINE\n  A05IPL      INVOCATION ROUTINE\n  A0505SYS    REXX\n  A0505P001   PANEL DEF\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A06XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    BERNIE ROYLE\n                     WOOLWORTHS                                         Y\n                     ROCHDALE 47301\n ____________________________________________________________________\n\n\n  A06DOCMS MEMBER EXPLAINING HOW TO RUN WHO DELETED DATASET REPORT\n           PROGRAM.\n\n  A06CLOCK GENERAL PURPOSE DATE AND TIME PROGRAM USED IN\n           DELETE REPROT PROGRAM.\n\n  A06DELRP DELETED DATASET REPORT PROGRAM.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A07XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    Kevin Fergeson\n                     Cleveland County Council                           Y\n                     0642 26310\n ____________________________________________________________________\n\nA07BROWS    BROWSE\nA07CLSCR    CLEARSCR     CLEAR THE VDU SCREEN\nA07DATE     DATE TRANSLATE ROUTINE\nA07DAY      TELL USER WHAT DAY A DATE WAS\nA07EOJ      EOJ\nA07701DX    IEC701DX  CHANGE CONSOLE IDENTIFIER OF THE TAPE MESSAGE\nA07176IX    IEF176IX  ISSUE STOP TO EXTERNAL WRITER\nA07000IX    IOS000IX  MAKE IOS000I A NON DELETE MESSAGE FOR DASD\nA07REGEQ    REGISTER EQUATES\nA07SV255    SVC255\nA07UTCPY    Front end for IEBCOPY\nA07ZAP1     Allows IPOUPDTE to run against any PDS\nA07ZAP1A    Allows CPPUPDTE to run against any PDS\nA07ZAP2     Makes  IEBPTPCH print alpabetically\nA07ZAP3     Makes  IEBPTPCH print alpabetically  other releases\nA07ZAP3A    Makes  IEBPTPCH print alpabetically  OS/390 R2.6\nA07ZAP3B    Makes  IEBPTPCH print alpabetically  z/OS R1.2\nA07ZAP4     Stops an external writer at 'waiting for work'\nA07ZAP4     Stops an external writer at 'waiting for work' more rels\n\nSMFSCAN consists of the following programs :-\nA07PARSE   smfparse - parses sysin input. This program is the main\n                       entry point. It calls SMFSCANT to print titles\n                       then it validates the SYSIN data stream and then\n                       (if all is OK) links to SMFSCANR.\n\n A07SCANT   smfscant - prints the title pages for SMFSCAN. This program\n ---------             will print the title depending at what stage the\n                       program has got. ie SYSIN REPORT or REPORT.\n                       This program links to DATE.\n\n A07SCANR   smfscanr - process the input file and produces the report.\n --------              This program also links to SMFSCANT and DATE.\n\n SMFSCAN will produce a report, from SMF TYPE 30 records, of whatever\n is specified in the SYSIN data stream. User instructions are held in\n this PDS as member A07SMDOC\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01#INDX": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x92\\x19\\x7f\\x00\\x93&\\x9f\"\\x07\\x00G\\x00K\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1992-07-15T00:00:00", "modifydate": "1993-09-26T22:07:00", "lines": 71, "newlines": 75, "modlines": 0, "user": "DPSPPP"}, "text": "  A01XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    DAVE THORBY\n                     LONDON ELECTRICIT                                  Y\n                     071-232 3045\n ____________________________________________________________________\n\n  A01CHECK         CHECKS IF A SPECIFIED JOB IS STILL RUNNING\n  A01ENQ           TSO C.P. TO DISPLAY ENQUEUES\n  A01INMRZ         I.D.T.F. RECEIVE PRE-PROCESSOR TO CHECK FOR MIGRATED LOG D/S\n  A01IPLVO         TSO C.P. TO DISPLAY CURRENT IPL VOLUME\n  A01IPLNV         DELETE DATA SETS CATALOGUED TO VOLUMES WHICH NO LONGER EXIST\n  A01DSNWT         WAITS FOR A DATA SET TO BECOME AVAILABLE WITHOUT RESERVING IT\n  A01CALL          TSO C.P. TO CALL A PROGRAM FROM THE LINKLIST\n  A01MOVIE         ISPF MOVING PICTURES  E.G. XMAS LOGON MESSAGE\n  A01TAPE          TAPE SCAN PROGRAM\n  A01EXTNT         ADD SECONDARY EXTENTS, CHANGE BLOCKSIZE, REALLOCATE IN TRACKS\n  A01FREE          GET FREE SPACE FOR ALL ONLINE DASD\n  A01GETAC         GET TSO USER'S CURRENT ACCOUNT CODE INTO CLIST VARIABLE\n  A01HSMNC         CHECK DFHSM MCDS FOR UNCATALOGUED MIGRATED DATA SETS\n  A01LIST          AVOID TSO ABEND S806 FOR LIST/ASM/CALC/COBOL/FORT/COPY/MERGE\n  A01P0100         ISPF BASED IBM MANUAL MANAGEMENT PROGRAM\n  A01PC100                \"    INVOCATION CLIST\n  A01PM00                 \"    MESSAGE MEMBER\n  A01PM01                 \"    MESSAGE MEMBER\n  A01PM02                 \"    MESSAGE MEMBER\n  A01PM03                 \"    MESSAGE MEMBER\n  A01PM04                 \"    MESSAGE MEMBER\n  A01PM09                 \"    MESSAGE MEMBER\n  A01PP010                \"    PANEL\n  A01PP020                \"    PANEL\n  A01PP030                \"    PANEL\n  A01PP040                \"    PANEL\n  A01PP050                \"    PANEL\n  A01PP060                \"    PANEL\n  A01PP070                \"    PANEL\n  A01PP080                \"    PANEL\n  A01PP090                \"    PANEL\n  A01PP100                \"    PANEL\n  A01PP110                \"    PANEL\n  A01PP120                \"    PANEL\n  A01PP130                \"    PANEL\n  A01PP140                \"    PANEL\n  A01PH010                \"    TUTORIAL\n  A01PH020                \"    TUTORIAL\n  A01PH030                \"    TUTORIAL\n  A01PH040                \"    TUTORIAL\n  A01PH050                \"    TUTORIAL\n  A01PH060                \"    TUTORIAL\n  A01PH070                \"    TUTORIAL\n  A01PH080                \"    TUTORIAL\n  A01PH090                \"    TUTORIAL\n  A01PH100                \"    TUTORIAL\n  A01PH101                \"    TUTORIAL\n  A01PH110                \"    TUTORIAL\n  A01PH120                \"    TUTORIAL\n  A01PH130                \"    TUTORIAL\n  A01P0200                \"    FILE LISTING PROGRAM\n  A01LOGOF         LOGOFF TSO FROM ISPF MAIN MENU\n  A01SKEOF         RECOVER DATA FROM BEYOND END OF FILE MARKS ON DASD\n  A01SMF           SCAN SMF FOR SELECTED RECORD TYPES\n  A01SCAN          SCAN RECFM=VS/VBS DATA SETS FOR MISSING SEGMENTS\n  A01VERFY         ENSURE ALL VSAM DATA SETS ON A DISK ARE PROPERLY CLOSED\n  A01PAGEL         DISPLAY LIST OF PAGE + SWAP DATA SETS\n  A01RACXT         DISPLAY SPECIFIED USER'S DEFAULT RACF GROUP + USER NAME\n  A01RCORE         REALTIME REPORT ON REAL STORAGE FRAMES USED (C/F RMF)\n  A01VRGRP         SET CLIST VARIABLE TO CURRENT RACF CONNECT GROUP\n  A01UT01          CREATE CONTROL CARD(S) FROM PARM\n  A01WAIT          TSO C.P. TO WAIT A SPECIFIED LENGTH OF TIME\n  A01ZDOW          ISPF CLIST TO GET DAY OF WEEK\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01CALL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x01\\x0e\\x01\\x0e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 270, "newlines": 270, "modlines": 0, "user": "UKGUIDE"}, "text": "LEBCALL  TITLE 'FRONT -END  COMMAND PROCESSOR'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   LEBCALL  -    MSV/XA 2.1.2                                        *\n*                                                                     *\n*   PURPOSE: -    THIS COMMAND IS USED AS A REPLACEMENT FOR THE TSO   *\n*                 CALL COMMAND. IT CAN BE USED TO CALL ANY PROGRAM    *\n*                 WHICH CAN BE FOUND IN THE LINKLST.                  *\n*                                                                     *\n*   DESCRIPTION: -                                                    *\n*                   THIS MODULE READS AND VALIDATES THE PARAMETERS    *\n*   PASSED TO IT BY THE TSO USER, AND ATTACHES THE REQUIRED PROGRAM   *\n*   PASSING IT A PARMETER STRING (IF SUPPLIED).                       *\n*                                                                     *\n*   LEBCALL SYNTAX: -                                                 *\n*             LEBCALL PGM(NNNNNNNN)                                   *\n*     OR      LEBCALL PGM(NNNNNNNN) PARM('XXX,XXXX,ETC')              *\n*     WHERE     NNNNNNNN - PROGRAM NAME                               *\n*               XXX,XXXX - PARAMETER STRING (UPTO 100 CHARACTERS).    *\n*                                                                     *\n*   INPUT PARAMETERS: -                                               *\n*      R1   -  POINTER TO THE CPPL                                    *\n*                                                                     *\n*   REGISTER USAGE: -                                                 *\n*                                                                     *\n*      R0   -  WORK                                                   *\n*      R1   -  WORK                                                   *\n*      R2   -  POINTER TO THE CPPL                                    *\n*      R3   -  POINTER TO PARAMETER DESCRIPTOR LIST (PDL)             *\n*      R4   -  POINTER TO THE I/O PARAMETER LIST (IOPL)               *\n*      R5   -  POINTER TO PARSE PARAMETER LIST (PPL)                  *\n*      R6   -  POINTER TO WORK AREA                                   *\n*      R7   -  SPARE                                                  *\n*      R8   -  SPARE                                                  *\n*      R9   -  SPARE                                                  *\n*      R10  -  ADDRESS OF PROGRAM PARAMETERS                          *\n*      R11  -  ADDRESS OF PROGRAM NAME                                *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -  WORK                                                   *\n*      R15  -  WORK                                                   *\n*                                                                     *\n*   ERROR MESSAGES: -                                                 *\n*                                                                     *\n*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        REGISTER SAVE AND EQUATES ETC.....\n***********************************************************************\n         SPACE\nLEBCALL  CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nLEBCALL  RMODE ANY           * SET ADDRESS MODE TO ANY WILL DEFAULT\n*                            * TO THE APPROPRIATE ADDRESSING MODE.\n*\n         SAVE  (14,12),,LEBCALL.CTD.&SYSTIME..&SYSDATE\n         BALR  R12,0                   * ESTABLISH BASE\n         USING *,R12                   * TELL ASSEMBLER\n         LR    R2,R1                   * SAVE POINTER TO CPPL\n         LA    R0,WORKLEN              * SAY HOW MUCH STORAGE WE WANT\n         GETMAIN R,LV=(0)              * GET THE STORAGE\n         ST    R1,8(R13)               * CHAIN BACK\n         ST    R13,4(R1)               * CHAIN FORWARD\n         LR    R13,R1                  * PROVIDE SAVE AREA\n         LR    R6,R1                   * ESTABLISH BASE FOR WORK AREA\n         USING WORKAREA,R6             * TELL ASSEMBLER\n         XC    WAITECB(4),WAITECB      * INITIALISE ECB\n         EJECT\n***********************************************************************\n*        CHECK THAT THE PARAMETERS ARE VALID AND SET UP AN IOPL FOR   *\n*        USE BY PULINE.                                               *\n***********************************************************************\n         USING CPPL,R2                 * MAKE FIELDS IN CPPL ADDR'ABLE\n         LA    R4,ZIOPL                * SET UP AN I/O\n         USING IOPL,R4                 *  PARAMETER LIST (IOPL)\n         MVC   IOPLUPT,CPPLUPT         * MOVE IN PTR TO UPT\n         MVC   IOPLECT,CPPLECT         * MOVE IN PTR TO ECT\n         LA    R1,ZECB                 * SET UP A PTR TO\n         ST    R1,IOPLECB              *  THE USER'S ECB\n         LA    R5,ZPPL                 * SET UP A PARSE\n         USING PPL,R5                  *  PARAMETER LIST (PPL)\n         MVC   PPLUPT,CPPLUPT          * MOVE IN PTR TO UPT\n         MVC   PPLECT,CPPLECT          * MOVE IN PTR TO ECT\n         ST    R1,PPLECB               * PTR TO USER'S ECB\n         L     R1,=A(ZPCL)             * SET UP A PTR TO THE\n         ST    R1,PPLPCL               *  PARAMETER CONTROL LIST (PCL)\n         LA    R3,ANS                  * PTR TO THE PARM DESCRIPTOR\n         ST    R3,PPLANS               *  LIST (PDL) VIA THE PPL\n         MVC   PPLCBUF,CPPLCBUF        * MOVE IN PTR OF COMMAND BUFFER\n         XC    PPLUWA,PPLUWA           * ZEROEYES USER'S WORK AREA\n         XC    ZECB,ZECB               * ZEROEYES ZECB FIELD AND SET\n         LR    R1,R5                   *  ADDRESS OF PPL IN REG 1\n         CALLTSSR EP=IKJPARS,MF=(E,(1)) * CALL IKJPARS\n         DROP  R2                      * NO LONGER NEED\n         LTR   R15,R15                 * ANY ERRORS?\n         BNZ   PERR                    * YES - ISSUE MESSAGE.       .\n         EJECT\n***********************************************************************\n*        MOVE PROGRAM NAME AND PARAMETERS INTO THE PARAMETER AREA     *\n*        FOR THE ATTACH.                                              *\n***********************************************************************\n         SPACE\n         L     R3,0(R3)                * MAKE FIELDS IN THE PCL\n         USING IKJPARMD,R3             *  AND THE PDL ADDR'ABLE\n         LA    R1,PGMNAMES             * R1-> IKJIDENT PDE FOR PGMS\n         LH    R2,4(R1)                * R2= LENGTH OF PROGRAM NAME\n         LTR   R2,R2                   * HAS A PGM PARM BEEN ENTERED?\n         BZ    PGMERR                  * NO - ERROR\n         MVI   PGM,C' '                * CLEAR PGM NAME FIELD\n         MVC   PGM+1(7),PGM            *\n         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST\n         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER\n         EX    R2,MOVEA                * PGM NAME IN PARM TO 'PGM'\n         LA    R11,PGM                 * ADDRESS OF PROGRAM NAME\n         LA    R9,WAITECB               * ADDRESS OF ECB\n         LA    R1,PRMNAMES             * R1-> IKJIDENT PDE FOR PARMS\n         LH    R2,4(R1)                * R2=LENGTH OF PARAMETERS\n         LTR   R2,R2                   * HAS A PGM PARM BEEN ENTERED?\n         BZ    NOPARMS                 *\n         MVI   PARMS,C' '              * CLEAR PARM LINE TO SPACES\n         MVC   PARMS+1(99),PARMS       * CLEAR PARM LINE TO SPACES\n         STH   R2,PARMLEN              * LENGTH OF PARMFIELD\n         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST\n         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER\n         EX    R2,MOVEB                * PARM NAME IN PARMAREA\n         LA    R10,PARMLEN             * LOAD ADDR OF PARM FIELD\n         B     ATTACH                  * GO AND ATTACH PROGRAM\n         EJECT\n***********************************************************************\n*        ATTACH THE PROGRAM SPECIFIED IN THE OPERAND 'PGM' AND PASS   *\n*        ANY PARMS THAT MAY HAVE BEEN ENTERED.                        *\n***********************************************************************\n         SPACE 2\nNOPARMS  EQU   *\n         LA    R10,=H'0'                * SET UP DUMMY PARAMETER\nATTACH   EQU   *                        * ATTACH PROGRAM\n         ATTACH EPLOC=(R11),ECB=(R9),PARAM=((R10)),VL=1\n         ST    R1,TCBADDR               * TCB ADDRESS\n         WAIT  ECB=(R9)\n         LA    R1,TCBADDR\n         DETACH (R1)\n         EJECT\n***********************************************************************\n*        TIDY UP AND RETURN                                           *\n***********************************************************************\n         SPACE\nFINISH   EQU   *\n         L     R2,PPLANS               * POINTER TO THE PDL\n         IKJRLSA (R2)                  * RELEASE STORAGE USED BY PARSE\n*                                      *  ROUTINE.\n         L     R2,4(R13)               * CHAIN BACK TO FIND SAVE AREA\n         LR    R1,R6                   * OUR SAVE AREA ADDR IN REG 1\n         LA    R0,WORKLEN              * LENGTH OF OUR SAVE AREA, REG 0\n         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA\n         LR    R13,R2                  * REG 13-> TO PREVIOUS SAVE AREA\n         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN\n         EJECT\nMOVEA    MVC   PGM(0),0(R1)             * PGM NAME IN PARM TO 'PGM'\nMOVEB    MVC   PARMS(0),0(R1)           * PARAMETERS IN PARM TO 'PARMS'\n         EJECT\n***********************************************************************\n*        PUT OUT AN ERROR MESSAGE IF THE PARAMETER CONTROL            *\n*        LIST (PCL) IS IN ERROR                                       *\n***********************************************************************\n         SPACE\nPERR     EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ERR1,SINGLE,DATA),                              C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\nPGMERR   EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ERR2,SINGLE,DATA),                              C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*        LIST FORM OF MACROS                                          *\n***********************************************************************\n         SPACE\nPUTBLOK  PUTLINE MF=L                  * EXPANDS INTO PUTLINE PARM BLOK\n         EJECT\n***********************************************************************\n*        ERROR MESSAGES PUT TO THE SCREEN                             *\n***********************************************************************\n         SPACE\nERR1     DC    H'35'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL31'ERROR IN PARAMETER CONTROL LIST'\nERR2     DC    H'25'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL21'PROGRAM NAME REQUIRED'\n         EJECT\n         LTORG\n***********************************************************************\n*        PARAMETER CONTROL LIST                                       *\n***********************************************************************\n         SPACE\nZPCL     IKJPARM\n         SPACE 2\nPGMORK   IKJKEYWD\n         SPACE\n         IKJNAME 'PGM',SUBFLD=PGMORKS\n         SPACE\n         IKJNAME 'PGMNAME',SUBFLD=PGMORKS\n         SPACE 2\nPRMKEY   IKJKEYWD\n         SPACE\n         IKJNAME 'PARM',SUBFLD=PRMRKS\n         SPACE\n         IKJNAME 'PM',SUBFLD=PRMRKS\n         SPACE 2\nPGMORKS  IKJSUBF\n         SPACE 2\nPGMNAMES IKJIDENT 'PGM NAME PARAMETER',LIST,PROMPT='PGM NAME REQUIRED',-\n               HELP=('PGM NAME REQUIRED                         '),    -\n               MAXLNTH=8,FIRST=ALPHA,OTHER=ANY\n         SPACE 2\nPRMRKS   IKJSUBF\n         SPACE 2\nPRMNAMES IKJPOSIT QSTRING,UPPERCASE,DEFAULT='NOPARM',                  -\n               HELP=('PARM LIST CAN BE UP TO 100 CHARS IN LENGTH'),\n         SPACE 2\n         IKJENDP\n         EJECT\n***********************************************************************\n*        DSECTS                                                       *\n***********************************************************************\n         SPACE\n         IKJCPPL                       * DSECT USED TO MAP CPPL\n         SPACE\n         IKJIOPL                       * DSECT USED TO MAP IOPL\n         SPACE\n         IKJPPL                        * DSECT USED TO MAP PPL\n         EJECT\n         CVT   DSECT=YES               * DSECT USED TO MAP CVT\n         EJECT\nWORKAREA DSECT                         * DSECT USED TO MAP WORK AREA\nSAVAREA  DS    18F                     * SAVE AREA OF CALLED MODULE\nWAITECB  DS    F                       * ECB ADDRESS\nTCBADDR  DS    F                       * TCB ADDRESS\nZIOPL    DS    4F                      * I/O PARAMETER LIST (IOPL)\nZPPL     DS    7F                      * PARSE PARAMETER LIST (PPL)\nZECB     DS    F                       * USER'S ECB ADDRESS\nANS      DS    F                       * ANSWER FIELD ADDR IN PPL\nPGM      DS    8C                      * PGM NAME\nPARMLEN  DS    H                       * PARAMETER LIST SAVE AREA\nPARMS    DS    100C                    * PARAMETER LIST SAVE AREA\nWORKLEN  EQU   *-WORKAREA              * CALCULATE WORK-AREA LENGTH\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01CHECK": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00m\\x00m\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "UKGUIDE"}, "text": "CHECKJOB CSECT\n         SAVE  (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH -\n         USING CHECKJOB,R12        BASE REGISTER\n         LR    R10,R1              SAVE PARAMETER LIST\n         GETMAIN R,LV=WORKLEN      GET SAVE/WORK AREA\n         ST    R1,8(R13)           CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R1)           CHAIN SAVE AREAS BACKWARD\n         LR    R13,R1              ADDRESS -\n         USING WORKAREA,R13        SAVE AREA\n         LR    R1,R10              RESTORE PARAMETER LIST\n*\n         L     R1,0(R1)            POINT TO PROGRAM PARM\n         LH    R10,0(R1)           GET LENGTH OF PROGRAM PARM\n         LTR   R10,R10             PROGRAM PARM IS REQUIRED\n         BZ    NOPARM              NO PROGRAM PARM SUPPLIED\n         CH    R10,=H'8'           MAXIMUM OF 8 CHARACTERS\n         BH    NOPARM              PROGRAM PARM TOO LONG\n         MVI   JOBNAME,C' '        BLANK OUT THE JOBNAME\n         MVC   JOBNAME+1(7),JOBNAME (LENGTH 8)\n         BCTR  R10,0               DECREMENT FOR EXECUTE\n         EX    R10,MOVEPARM        STORE PROGRAM PARM AS JOBNAME\n*\nRETRY    L     R10,X'10'           POINT TO CVT (FIXED)\n         USING CVT,R10             ESTABLISH ADDRESSABILITY TO CVT\n         L     R10,CVTASVT         POINT TO ASVT\n         DROP  R10                 FINISHED WITH CVT\n         USING ASVT,R10            ESTABLISH ADDRESSABILITY TO ASVT\n         LA    R10,ASVTENTY        START OF ADDRESSES OF ASCBS\n         DROP  R10                 FINISHED WITH ASVT\n*\nTESTASID CLC   0(4,R10),=X'80000000' TEST FOR LAST ENTRY\n         BE    NOTFOUND            YES - RETURN\n         TM    0(R10),X'80'        IS THIS ADDRESS SPACE ALLOCATED ?\n         BO    NEXTASID            NO - GO AND TRY THE NEXT ONE\n         L     R9,0(R10)           GET ASCB ADDRESS\n         USING ASCB,R9             ESTABLISH ADDRESSABILITY TO ASCB\n         L     R8,ASCBJBNI         PICK UP JOB/TSO JOBNAME\n         CLC   JOBNAME,0(R8)       IS THIS THE ONE WE'RE LOOKING FOR ?\n         BE    FOUNDJOB            YES - GO AND PUT OUT WTO\n         L     R8,ASCBJBNS         PICK UP STC JOBNAME\n         CLC   JOBNAME,0(R8)       IS THIS THE ONE WE'RE LOOKING FOR ?\n         BE    FOUNDSTC            YES - GO AND PUT OUT WTO\n         DROP  R9                  FINISHED WITH ASCB\nNEXTASID LA    R10,4(R10)          POINT TO NEXT ASCB\n         B     TESTASID            GO AND TRY THE NEXT ONE\n*\nNOTFOUND SR    R15,R15             SET RETURN CODE\n         B     RETURN              GO BACK\n*\nFOUNDJOB MVC   WTOR(WTORL),WTORM   MOVE WTOR TO GETMAINED AREA\n         B     PUTWTOR\n*\nFOUNDSTC MVC   WTOR(WTORL),WTORM   MOVE WTOR TO GETMAINED AREA\n         MVC   WTOR+12(3),=C'STC'  REPLACE 'JOB' WITH 'STC'\nPUTWTOR  MVC   WTOR+16(8),JOBNAME  REPLACE JOBNAME IN WTOR\n         MVI   WTORECB,X'00'       ZEROISE ECB\n         WTOR  ,REPLY,,WTORECB,MF=(E,WTOR)\n         WAIT  ECB=WTORECB         WAIT FOR A REPLY\n         CLI   REPLY,C'R'          (R)ETRY REQUESTED ?\n         BE    RETRY               YES - DO ANOTHER SEARCH\n         CLI   REPLY,C'C'          (C)ANCEL REQUESTED ?\n         BE    CANCEL              YES - ABEND\n         MVC   WTO(WTOL),WTOM      MOVE WTO TO GETMAINED AREA\n         WTO   ,MF=(E,WTO)         \"WHO'S A SILLY BOY, THEN?\"\n         B     PUTWTOR             TRY AGAIN\n*\nCANCEL   ABEND 16                  STOP THE JOB\n*\nNOPARM   WTL   'JOBNAME REQUIRED'\n         LA    R15,16              SET ERROR RETURN CODE\n         B     RETURN              RETURN TO CALLER\n*\nRETURN   LR    R10,R15             SAVE RETURN CODE\n         LR    R1,R13              POINT TO GETMAINED AREA\n         L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1) FREE GETMAINED AREA\n         LR    R15,R10             RESTORE SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n*\nMOVEPARM MVC   JOBNAME(0),2(R1)    EXECUTED INSTRUCTION\n*TORM    WTOR  'JOB XXXXXXXX    *** PLEASE IGNORE THIS MESSAGE ***',,1,\nWTORM    WTOR  'JOB XXXXXXXX IS STILL ACTIVE - (R)ETRY OR (C)ANCEL',,1,*\n               ,ROUTCDE=(1),MF=L   LIST FORM OF MACRO\nWTORL    EQU   *-WTORM             LENGTH OF MACRO EXPANSION\nWTOM     WTO   'INVALID REPLY - MUST BE \"R\" OR \"C\"',DESC=(5),MF=L,     X\n               ROUTCDE=(2)         LIST FORM OF MACRO\nWTOL     EQU   *-WTOM              LENGTH OF MACRO EXPANSION\n*\n         YREGS\n         LTORG\n*\nWORKAREA DSECT\n         DS    18F                 REGISTER SAVE AREA\nJOBNAME  DS    CL8                 JOBNAME TO SEARCH FOR\nWTOR     DS    0F                  LIST FORM OF MACRO\n         ORG   WTOR+WTORL          LENGTH OF MACRO EXPANSION\nWTORECB  DS    F                   ECB FOR WTOR\nREPLY    DS    CL1                 REPLY AREA FOR WTOR\nWTO      DS    0F                  LIST FORM OF MACRO\n         ORG   WTO+WTOL            LENGTH OF MACRO EXPANSION\nWORKLEN  EQU   *-WORKAREA          LENGTH OF WORK AREA\n*\n         PRINT ON,NOGEN\n         CVT   DSECT=YES\n         IHAASVT\n         IHAASCB\n*\n         END   CHECKJOB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01DELNV": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x15\\x0f\\x00\\x90\\x15\\x0f\\x17\\x16\\x00\\xc3\\x00\\xc3\\x00\\x00\\xd6\\xc4\\xf1\\xf4\\xf2\\xf7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-05-30T00:00:00", "modifydate": "1990-05-30T17:16:00", "lines": 195, "newlines": 195, "modlines": 0, "user": "OD1427"}, "text": "LDELNVOL TITLE '       UNCATALOG ALL DASD DATA SETS ON OFFLINE VOLUMES'\n***********************************************************************\n*                                                                     *\n*        LDELNVOL - UNCATALOG ALL DASD DATA SETS ON OFFLINE VOLUMES   *\n*                                                                     *\n*        AUTHOR: DAVE THORBY, MAY 1990                                *\n*                                                                     *\n*        THIS PROGRAM INVOKES UCBSCAN TO FIND ALL ONLINE DASD         *\n*        VOLUMES.  IT THEN INVOKES IDCAMS, READS THE OUTPUT AND       *\n*        CREATES  \"DELETE  ...  NOSCRATCH\"  CARDS FOR ALL DASD DATA   *\n*        SETS ON OFFLINE VOLUMES.                                     *\n*        THE INPUT IS ONE OR MORE  \"LISTCAT  ...  VOLUME\"  CARDS.     *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        R2    UCB / WORK                                             *\n*        R3    CVT / WORK                                             *\n*        R4    *SPARE*                                                *\n*        R5    *SPARE*                                                *\n*        R6    *SPARE*                                                *\n*        R7    *SPARE*                                                *\n*        R8    *SPARE*                                                *\n*        R9    NUMBER OF VOLUMES FOUND                                *\n*        R10   BASE REGISTER - SYSPRINT EXIT                          *\n*        R11   BASE REGISTER - VOLUME TABLE                           *\n*        R12   BASE REGISTER - MAIN PROGRAM                           *\n*        R13   SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLDELNVOL CSECT\n         SAVE  (14,12),,'LDELNVOL &SYSDATE &SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING LDELNVOL,R12        ESTABLISH BASE REGISTER\n         BAL   R11,BEGIN           POINT TO PROGRAM SAVE AREA\n         DC    18F'0'              REGISTER SAVE AREA\nBEGIN    ST    R11,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R11)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R11             POINT TO PROGRAM SAVE AREA\n         LA    R10,PRNTEXIT        PICK UP ADDRESS OF EXIT ROUTINE\n         USING PRNTEXIT,R10        ADDRESS REMAINDER OF PROGRAM\n         SPACE 3\n         LA    R11,VOL_NAME        POINT TO VOLUME NAME TABLE\n         SR    R9,R9               ZEROISE COUNT OF VOLUMES\n         L     R3,CVTPTR           POINT TO CVT\n         USING CVTMAP,R3           ADDRESS CVT\n         LA    R1,UCB_PARM         POINT TO UCBSCAN PARM\n         USING UCBOB,R2            MAP UCB\nUCB_SRCH L     R15,CVTUCBSC        PICK UP UCBSCAN ADDRESS\n         BALR  R14,R15             INVOKE UCBSCAN\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   UCB_END             END OF UCB CHAIN\n         L     R2,UCB_ADDR         PICK UP ADDRESS OF UCB\n         TM    UCBSTAT,UCBONLI     IS THE DEVICE ONLINE ?\n         BZ    UCB_SRCH            NO - GET NEXT UCB\n         MVC   0(6,R11),UCBVOLI    SAVE VOLUME SERIAL\n         LA    R9,1(,R9)           INCREMENT NUMBER OF VOLUMES\n         LA    R11,6(,R11)         POINT TO NEXT ADDRESS\n         B     UCB_SRCH            GET NEXT UCB\n         DROP  R2,R3               FINISHED WITH MAPS\n         SPACE 3\nUCB_END  MVC   0(4,R11),=F'-1'     FLAG END OF VOLUME TABLE\n         OPEN  (SYSPRINT,OUTPUT)   OPEN PRINT FILE\n         CVD   R9,PARMLIST         NUMBER OF VOLUMES\n         MVC   P_HEADER+27(4),=X'40202120'\n         ED    P_HEADER+27(4),PARMLIST+6\n         PUT   SYSPRINT,P_HEADER   PRINT HEADING LINE\n         LA    R11,VOL_NAME        POINT TO VOLUME NAME TABLE\nP_LINE   LA    R2,P_DETAIL+1       POINT TO OUTPUT LOCATION\n         LA    R3,10               NUMBER OF VOLUMES PER LINE\nP_MOVE   MVC   0(6,R2),0(R11)      MOVE VOLUME SERIAL TO PRINT LINE\n         CLI   6(R11),X'FF'        END OF TABLE ?\n         BE    P_CLOSE             YES - END OF PRINT\n         LA    R11,6(,R11)         POINT TO NEXT VOLSER\n         LA    R2,8(,R2)           POINT TO NEXT PRINT LOCATION\n         BCT   R3,P_MOVE           MOVE NEXT VOLSER\n         PUT   SYSPRINT,P_DETAIL   PRINT DETAIL LINE\n         MVC   P_DETAIL+1(80),P_DETAIL BLANK OUT PRINT LINE\n         B     P_LINE              SET UP NEXT LINE\n         SPACE 2\nP_CLOSE  PUT   SYSPRINT,P_DETAIL   PRINT LAST DETAIL LINE\n         CLOSE (SYSPRINT)          CLOSE PRINT FILE\n*??????????????????????????????????????????????????????????????????????\n         OPEN  (CARDOUT,OUTPUT)    OPEN OUTPUT FILE\n         LA    R8,1                HANDLE ONE DDNAME\n         LA    R9,=CL10'DDSYSPRINT' ADDRESS OVERRIDE DDNAME\n         LA    R11,SAVEAREA        ADDRESS OF 'USER DATA'\n         STM   R8,R11,PARMLIST     STORE I/O LIST FOR IDCAMS\n         LA    R6,=H'0'            NO PARM\n         LA    R7,=H'0'            NO DDNAMES OVERRIDE LIST\n         LA    R8,=H'0'            NO PAGE NUMBER LIST\n         LA    R9,PARMLIST         POINT TO I/O LIST\n         LINK  EP=IDCAMS,PARAM=((6),(7),(8),(9)),VL=1\n         SPACE 3\n         CLOSE (CARDOUT)           END OF OUTPUT FILE\n         L     R13,4(R13)          PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         SPACE 3\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\n         EJECT\nPRNTEXIT DS    0D\n         DROP  R12,R10\n         SAVE  (14,12),,'LDELNVOL - SYSPRINT EXIT'\n         LR    R10,R15             LOAD BASE REGISTER\n         USING PRNTEXIT,R10        ADDRESS REMAINDER OF PROGRAM\n         LM    R7,R9,0(R1)         PICK UP PARAMETERS\n         ST    R7,8(R13)           CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R7)           CHAIN SAVE AREAS BACKWARD\n         LR    R13,R7              ADDRESS SAVE AREA\n         SPACE 2\n         CLI   0(R8),X'0C'         IS THIS A PUT OPERATION\n         BNE   RETURN              NO - RETURN TO CALLER\n         MVC   PRINTIN,PRINTIN-1   BLANK OUT PRINT LINE\n         L     R7,0(R9)            PICK UP RECORD ADDRESS\n         L     R8,4(R9)            PICK UP RECORD LENGTH\n         BCTR  R8,0                REMOVE RDW AND 1 FOR EXECUTE\n         EX    R8,MOVELINE         MOVE PRINT LINE TO STORAGE\n         CLC   =C'CLUSTER',PRINTIN+1 CLUSTER NAME ?\n         BE    CLUSTER             YES - WRITE OUTPUT FILE\n         CLC   =C'NONVSAM',PRINTIN+1 NON-VSAM DATA SET ?\n         BE    NONVSAM             YES - WRITE OUTPUT FILE\n         CLC   =C'VOLSER',PRINTIN+8 VOLUME SERIAL NUMBER ?\n         BE    VOLSER              YES - WRITE OUTPUT FILE\nRETURN   L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         SPACE 3\nMOVELINE MVC   PRINTIN(0),0(R7)    EXECUTED INSTRUCTION\n         EJECT\nCLUSTER  CLC   =C'SYS1.VVDS.',PRINTIN+17\n         BE    RETURN              DO NOT DELETE VVDS ENTRIES\n         MVC   AMS_CARD+9(44),PRINTIN+17\n         MVC   AMS_CARD+64(7),=C'CLUSTER'\n         B     RETURN              GET NEXT LINE\n         SPACE 3\nNONVSAM  MVC   AMS_CARD+9(44),PRINTIN+17\n         MVC   AMS_CARD+64(7),=C'NONVSAM'\n         B     RETURN              GET NEXT LINE\n         SPACE 3\nVOLSER   CLI   AMS_CARD+64,C'?'    READY FOR VOLSER ?\n         BE    RETURN              NO - FORGET IT\n         CLC   =C'X''32008003',PRINTIN+50  TAPE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''00068000',PRINTIN+50  ESOTERIC TAPE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''34008003',PRINTIN+50  TAPE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''00058000',PRINTIN+50  ESOTERIC TAPE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''78008080',PRINTIN+50  CARTRIDGE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''33008003',PRINTIN+50  COMPATIBLE MODE DATA SET ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'X''00000000',PRINTIN+50  INDIRECT ADDRESSING ?\n         BE    NO_SRTCH            YES - FORGET IT\n         CLC   =C'MIGRAT',PRINTIN+26 IS IT MIGRATED ?\n         BE    NO_SRTCH            YES - FORGET IT\n         LA    R11,VOL_NAME        POINT TO TABLE OF VOLUME SERIALS\nVOL_CHK  CLC   0(6,R11),PRINTIN+26 IS THIS AN ONLINE VOLUME ?\n         BE    NO_SRTCH            YES - DO NOT DELETE\n         LA    R11,6(,R11)         POINT TO NEXT VOLSER\n         CLI   0(R11),X'FF'        END OF TABLE ?\n         BNE   VOL_CHK             NO - TRY NEXT ENTRY\n         SPACE 1\nPUT_CARD MVC   AMS_CARD+74(6),PRINTIN+26 MOVE IN VOLUME SERIAL\n         PUT   CARDOUT,AMS_CARD    WRITE DELETE CARD\nNO_SRTCH MVI   AMS_CARD+64,C'?'    NOT READY FOR VOLSER\n         B     RETURN              GET NEXT LINE\n         EJECT\nPARMLIST DS    4F                  WORK AREA\nAMS_CARD DC    CL80' DELETE  ----+----1----+----2----+----3----+----4--*\n               -- NOSCRATCH ??????? /*VOLSER'\nP_HEADER DC    CL81'1LDELNVOL     THE FOLLOWING 000 DASD VOLUMES ARE CU*\n               RRENTLY ONLINE:'\nP_DETAIL DC    CL81' '\nPRINTIN  DS    CL133\n         SPACE 1\nCARDOUT  DCB   DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=3120,DDNAME=CARDOUT, *\n               MACRF=PM\nSYSPRINT DCB   DSORG=PS,RECFM=FBA,LRECL=81,BLKSIZE=3159,DDNAME=SYSPRINT*\n               ,MACRF=PM\n         EJECT\nUCB_PARM DC    A(UCB_WORK)\n         DC    A(UCB_TYPE)\n         DC    A(UCB_ADDR+X'80000000')\nUCB_WORK DC    XL100'00'\nUCB_ADDR DS    A\nUCB_TYPE DC    AL1(UCB3DACC)\n         SPACE 3\n         LTORG\nVOL_NAME DC    682CL6' '           LIST OF ONLINE VOLUMES (= 4K BYTES)\n         DC    F'-1'               END OF VOLUME TABLE\n         YREGS\n         DSECT\n         IEFUCBOB\n         CVT   DSECT=YES\n         END   LDELNVOL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01DSNWT": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00z\\x00z\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 122, "newlines": 122, "modlines": 0, "user": "UKGUIDE"}, "text": "LDSNWAIT TITLE '               WAIT FOR A DATA SET TO BECOME AVAILABLE'\n***********************************************************************\n*                                                                     *\n*        THIS PROGRAM ISSUES A LOCATE FOR A DATA SET (THE NAME IS     *\n*        PASSED AS A PARM).  IF THE DATA SET DOES NOT EXIST IT        *\n*        WAITS FOR 1 MINUTE BEFORE RETRYING.  WHEN THE DATA SET IS    *\n*        LOCATED, IT ISSUES AN ENQ FOR IT, TO ENSURE THAT IT IS       *\n*        NOT IN USE BY ANY OTHER JOB.  THE USER CAN ALSO SPECIFY A    *\n*        MAXIMUM NUMBER OF MINUTES THAT THE PROGRAM IS TO WAIT FOR    *\n*        THE DATA SET TO BECOME AVAIALABLE.                           *\n*                                                                     *\n*        AUTHOR: DAVE THORBY   SEPTEMBER 1988                         *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        R1    SYS PARM                                               *\n*        R9    LENGTH OF DATA SET NAME                                *\n*        R10   DATA SET NAME                                          *\n*        R11   INTERNAL LINKAGE                                       *\n*        R12   BASE REGISTER                                          *\n*        R13   SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         EJECT\nLDSNWAIT CSECT\n         SAVE  (14,12),,LDSNWAIT_&SYSDATE_&SYSTIME\n         LR    R12,R15             ESTABLISH -\n         USING LDSNWAIT,R12          BASE REGISTER\n         LA    R10,SAVEAREA        POINT TO SAVE AREA\n         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R10             ADDRESS SAVE AREA\n         SPACE 3\n         L     R1,0(R1)            POINT TO PARM\n         CLI   1(R1),X'00'         CHECK FOR NULL PARM\n         BE    ABORT1              NO PARM SPECIFIED\n         LA    R10,2(R1)           POINT TO START OF PARM\n         CLI   0(R10),C'0'         CHECK FOR NUMERIC PARM\n         BL    NONUM               NO NUMBER SPECIFIED\nNUMLOOP  LA    R10,1(R10)          POINT TO NEXT CHARACTER\n         CLI   0(R10),C'0'         IS THIS A DIGIT ?\n         BNL   NUMLOOP             YES - KEEP CHECKING\n         LR    R9,R10              POINT TO START OF DSNAME\n         SR    R9,R1               GET OFFSET TO DSNAME\n         SH    R9,=H'3'            GET LENGTH FOR PACK\n         EX    R9,PACKTIME         PACK NUMBER OF MINUTES\n         AP    WAITTIME,MINUTES    ADD 1 FOR FIRST TRY\n         CLI   0(R10),C'/'         IS THERE A SLASH NEXT ?\n         BNE   NONUM               NO - CONTINUE\n         LA    R10,1(R10)          POINT PAST THE SLASH\n         SPACE 3\nNONUM    LR    R9,R10              POINT TO START OF DSNAME\n         SR    R9,R1               GET OFFSET OF DSNAME\n         SH    R9,=H'2'            NUMBER OF NUMERIC CHARACTERS\n         LH    R1,0(R1)            PICK UP PARM LENGTH\n         SR    R1,R9               GET LENGTH OF DSNAME\n         LR    R9,R1               SAVE LENGTH\n         BCTR  R1,0                DECREMENT FOR MOVE\n         EX    R1,MOVEDSN          SAVE DATA SET NAME\n         SPACE 3\nLOCATE   LOCATE DATASET            LOCATE DATA SET\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    ENQ                 DATA SET EXISTS\n         BAL   R11,WAIT            WAIT FOR A MINUTE\n         B     LOCATE              TRY AGAIN\n         EJECT\nENQ      ENQ   (MAJ,(10),S,(9),SYSTEM),RET=TEST\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    RETURN              DATA SET IS AVAILABLE\n         BAL   R11,WAIT            WAIT FOR A MINUTE\n         B     ENQ                 TRY AGAIN\n         EJECT\nWAIT     SP    WAITTIME,=P'1'      CHECK HOW LONG WE'VE BEEN IN HERE\n         BZ    ABORT2              TOO LONG - GIVE UP\n         STIMER WAIT,DINTVL=ONEMIN WAIT FOR 1 MINUTE\n         BR    R11\n         EJECT\nRETURN   SR    R15,R15             ZEROISE RETURN CODE\nGOBACK   L     13,4(13)            RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         SPACE 3\nABORT1   WTO   'LEBDSNW01E  NO PARM SUPPLIED - PROGRAM ABORTED',       X\n               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\n         LA    R15,12              SET RETURN CODE\n         B     GOBACK              RETURN TO CALLER\n         SPACE 3\nABORT2   BCTR  R9,0                SET UP LENGTH FOR MOVE\n         EX    R9,WTO2MOVE         MOVE DSN INTO WTO MESSAGE\n         MVC   WTO2+94(3),=X'202120' SET UP EDIT MASK\n         ED    WTO2+93(4),MINUTES+6 PUT TIME INTO WTO MESSAGE\nWTO2     WTO   'LEBDSNW02I  DATA SET                                   X\n                          NOT AVAILABLE AFTER     MINUTES',            X\n               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),DESC=11\n         LA    R15,8               SET RETURN CODE\n         B     GOBACK              RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXECUTED INSTRUCTIONS, DCBS AND LITERALS                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPACKTIME PACK  MINUTES,2(0,R1)     PACK NUMBER OF MINUTES\nMOVEDSN  MVC   DSNAME(0),0(R10)    SAVE DATA SET NAME\nWTO2MOVE MVC   WTO2+29(0),0(R10)   MOVE DSN INTO WTO MESSAGE\n         SPACE 3\nMINUTES  DC    PL8'-1'             NUMBER OF MINUTES LEFT\nWAITTIME DC    PL8'1'              NUMBER OF MINUTES TO WAIT\nONEMIN   DS    0D\n         DC    C'00010000'         WAIT FOR ONE MINUTE\n         SPACE 1\nMAJ      DC    CL8'SYSDSN'         MAJOR NAME FOR ENQ\n         SPACE 1\nDATASET  CAMLST NAME,DSNAME,,CL265\nDSNAME   DC    CL44' '             DATA SET NAME\nCL265    DS    0D\n         DS    CL265               RETURN AREA FROM LOCATE\n         SPACE 3\nSAVEAREA DC    18F'0'              SAVE AREA\n         SPACE 1\n         LTORG\n         YREGS\n         END   LDSNWAIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01ENQ": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x049\\x049\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 1081, "newlines": 1081, "modlines": 0, "user": "UKGUIDE"}, "text": "ENQ      TITLE 'ENQ TSO COMMAND PROCESSOR'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   ENQ   -   MVS/SP3 VERSION                                         *\n*                                                                     *\n*   DESCRIPTION :-  THE ENQ COMMAND PROCESSOR IS USED TO FIND OUT     *\n*                   DETAILS ON EITHER SPECIFIC OR NON-SPECIFIC        *\n*   QUEUE CONTROL BLOCKS (QCB'S).                                     *\n*                                                                     *\n*                   THE DETAILS FOUND (IF REQUESTED) ARE THE MAJOR    *\n*   AND MIN QCB'S NAMES AND THE JOBS ACCESSING THEM. IT WILL ALSO     *\n*   TELL YOU WHAT STATUS EACH JOB HAS ON THE MINOR QCB (I.E. STATUS   *\n*   OF SHR OR EXCLUSIVE), AND THE ADDRESS SPACE EACH JOB OCCUPIES.    *\n*   A SELECTION OF ENQS FOR A SPECIFIC JOB CAN ALSO BE REQUESTED.     *\n*                                                                     *\n*   MODIFIED BY KEITH WILKINSON 7 DECEMBER 83 TO GIVE TRUE LENGTH OF  *\n*   THE RNAME AND TO SHOW SCOPE IF NOT 'SYSTEM' 'LOCAL'               *\n*      RNAME LENGTH APPEARS AFTER RNAME (IN PARENS)                   *\n*      SCOPE APPEARS AFTER QNAME (IN PARENS)                          *\n*                                                                     *\n*                   THIS MODULE READS AND VALIDATES THE PARAMETERS    *\n*   PASSED TO IT BY THE TSO USER, AND FINDS THE RELEVENT INFORMATION  *\n*   FROM THE RIBS AND RIBES PASSED TO IT BY THE GQSCAN MACRO (SP3).   *\n*                                                                     *\n*   REGISTER USAGE                                                    *\n*   ==============                                                    *\n*                                                                     *\n*      R0   -  WORK                                                   *\n*      R1   -  WORK                                                   *\n*      R2   -  WORK                                                   *\n*      R3   -  POINTER TO PARAMETER DESCRIPTOR LIST (PDL)             *\n*      R4   -  POINTER TO THE I/O PARAMETER LIST (IOPL)               *\n*      R5   -  POINTER TO PARSE PARAMETER LIST (PPL)                  *\n*      R6   -  NUMBER OF RIBS OBTAINED BY GQSCAN                      *\n*      R7   -  NUMBER PF RIBES ASSOCIATED WITH A RIB                  *\n*      R8   -  BASE REGISTER WHILST PROCESSING ATTN INTERRUPTS        *\n*      R9   -  POINTER TO USER AREA FOR GQSCAN                        *\n*      R10  -  RETURN ADDRESS USED BY BAL                             *\n*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -  WORK                                                   *\n*      R15  -  WORK                                                   *\n*                                                                     *\n*   PARAMETERS                                                        *\n*   ==========                                                        *\n*                                                                     *\n*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER SAVE AND EQUATES ETC.....\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENQ      CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         SAVE  (14,12),,ENQ.CTD.&SYSTIME..&SYSDATE\n         BALR  R12,0                   * ESTABLISH BASE\n         USING *,R12,R11               * TELL ASSEMBLER\n         LA    R11,*+4095              * ESTABLISH SECOND BASE\n         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION\n         LR    R2,R1                   * SAVE POINTER TO CPPL\n         L     R0,=A(WORKLEN)          * SAY HOW MUCH STORAGE WE WANT\n         GETMAIN R,LV=(0)              * GET THE STORAGE\n         ST    R1,8(R13)               * CHAIN BACK\n         ST    R13,4(R1)               * CHAIN FORWARD\n         LR    R13,R1                  * ESTABLISH SAVE AREA\n         ST    R13,SAVER13             * SAVE REG 13 FOR ATTN EXIT\n         USING WORKAREA,R13            * TELL ASSEMBLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MAKE SURE THAT WE HAVE GOT ALL OF THE PARAMETERS CORRECTLY   *\n*        AND SET UP AN IOPL FOR USE BY PUTLINE                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING CPPL,R2                 * MAKE FIELDS IN CPPL ADDR'ABLE\n         LA    R4,ZIOPL                * )SET UP AN I/O\n         USING IOPL,R4                 * ) PARAMETER LIST (IOPL)\n         MVC   IOPLUPT,CPPLUPT         * MOVE IN PTR TO UPT\n         MVC   IOPLECT,CPPLECT         * MOVE IN PTR TO ECT\n         LA    R1,ZECB                 * )SET UP A PTR TO\n         ST    R1,IOPLECB              * ) THE USER'S ECB\n         LA    R5,ZPPL                 * )SET UP A PARSE\n         USING PPL,R5                  * ) PARAMETER LIST (PPL)\n         MVC   PPLUPT,CPPLUPT          * MOVE IN PTR TO UPT\n         MVC   PPLECT,CPPLECT          * MOVE IN PTR TO ECT\n         ST    R1,PPLECB               * PTR TO USER'S ECB\n         L     R1,=A(ZPCL)             * )SET UP A PTR TO THE\n         ST    R1,PPLPCL               * ) PARAMETER CONTROL LIST (PCL)\n         LA    R3,ANS                  * )PTR TO THE PARM DESCRIPTOR\n         ST    R3,PPLANS               * ) LIST (PDL) VIA THE PPL\n         MVC   PPLCBUF,CPPLCBUF        * MOVE IN PTR OF COMMAND BUFFER\n         XC    PPLUWA,PPLUWA           * ZEROEYES USER'S WORK AREA\n         XC    ZECB,ZECB               * )ZEROEYES ZECB FIELD AND SET\n         LR    R1,R5                   * ADDRESS OF PPL IN REG 1\n         CALLTSSR EP=IKJPARS,MF=(E,(1)) * CALL IKJPARS\n         LTR   R15,R15                 * DID IT WORK ???????\n         DROP  R2                      * NO LONGER NEED\n         BNZ   PERR                    * NO - ERROR; OTHERWISE CONT..\n         L     R3,0(R3)                * )MAKE FIELDS IN THE PCL\n         USING IKJPARMD,R3             * ) AND THE PDL ADDR'ABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ENSURE WE HAVE A MAJOR NAME AND A MINOR, IF NECESSARY        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,JOBNAMES             * R1-> IKJIDENT PDE FOR JOBS\n         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM\n         LTR   R2,R2                   * HAS A JOB PARM BEEN ENTERED?\n         BZ    CHKMAJP                 * NO - NO NECESSARY, ELSE GET IT\n         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST\n         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER\n         MVC   JOB,=CL8' '             * CLEAR JOB LINE TO SPACES\n         EX    R2,MOVEA                * JOB NAME IN PARM TO 'JOB'\n         B     WHERETO                 * BRANCH ROUND EXECUTE INST\nMOVEA    MVC   JOB(0),0(R1)            * JOB NAME IN PARM TO 'JOB'\nCHKMAJP  EQU   *\n         LA    R1,MAJORS               * R1-> IKJIDENT PDE FOR MAJORS\n         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM\n         LTR   R2,R2                   * HAS A MAJ PARM BEEN ENTERED?\n         BNZ   GETMAJP                 * YES - GET IT !!;OTHERWISE -\n         MVC   MAJOR,=CL8'SYSDSN'      * MAJ PARM DEFAULT TO 'SYSDSN'\n         B     GETMINP                 * GO GET MINOR PARM\nGETMAJP  EQU   *\n         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST\n         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER\n         MVC   MAJOR,=CL8' '           * CLEAR MAJOR LINE TO SPACES\n         EX    R2,MOVEB                * MAJOR NAME IN PARM TO 'MAJOR'\n         B     GETMINP                 * BRANCH ROUND EXECUTE INST\nMOVEB    MVC   MAJOR(0),0(R1)          * MAJOR NAME IN PARM TO 'MAJOR'\nGETMINP  EQU   *\n         MVC   MINOR,=CL54' '          * CLEAR MINOR NAME LINE\n         LA    R1,MINORS               * R1-> IKJIDENT PDE FOR MINORS\n         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM\n         LTR   R2,R2                   * HAS A MIN PARM BEEN ENTERED?\n         BZ    WHERETO                 * YES - NO PARMS ARE REQUIRED.\n         ST    R2,MINORLEN             * SAVE THE MINOR LENGTH\n         BCTR  R2,0                    * SUBTRACT 1 FOR EXECUTE INST\n         L     R1,0(R1)                * R1-> POSITIONAL PARAMETER\n         EX    R2,MOVEC                * MINOR NAME IN PARM TO 'MINOR'\n         B     WHERETO                 * BRANCH ROUND EXECUTE INST\nMOVEC    MVC   MINOR(0),0(R1)          * MINOR NAME IN PARM TO 'MINOR'\n         EJECT\n***********************************************************************\n*                                                                     *\n*           DECIDE WHAT THE REQUEST WAS ACTUALLY FOR !!               *\n*           ===========================================               *\n*                                                                     *\n*                           MAJOR NAME    MINOR NAME    JOB NAME      *\n*                           ----------    ----------    --------      *\n*           REQUEST :-  1)     ALL           ALL          N/A         *\n*                       2)     ALL         SPECIFIC       N/A         *\n*                       3)     ALL           NONE         N/A         *\n*                       4)   SPECIFIC        ALL          N/A         *\n*                       5)   SPECIFIC      SPECIFIC       N/A         *\n*                       6)   SPECIFIC        NONE         N/A         *\n*                       7)     N/A           N/A        SPECIFIC      *\n*                                                                     *\n*           NOTE: IF JOBNAME IS SPECIFIED THEN MAJOR AND MINOR NAMES  *\n*                 ARE IGNORED AS IT DOES NOT SEEM NECESSARY.          *\n*                                                                     *\n***********************************************************************\n         SPACE\nWHERETO  EQU   *\n         SR    R0,R0\n         LA    R0,2048                 * GETMAIN 1K BYTES\n         GETMAIN R,LV=(R0)             * GET 1K OF STORAGE FOR RIBS\n         LR    R9,R1                   * REG 9 POINTS TO AREA FOR RIBS\n         ST    R9,SAVEREG9             * SAVE REGISTER 8\n         LA    R8,CONTSCAN             * SET UP TOKEN TO ZEROS\n         NI    SRIBFLAG,X'FF'          * CLEAR END OF RIBS INDICATOR\n         STAX  ATTNEXIT,OBUF=(ATTNMSG,80) * SET UP A SPECIAL ATTN ENV\n         LTR   R15,R15                 * STAX SUCESSFUL?\n         BZ    STAXOK                  * YES - THEN CONTINUE\n         ABEND 999,DUMP                * ELSE ABEND\nSTAXOK   EQU   *\n         CLC   MAJOR(3),=C'ALL'        * DO WE WANT ALL MAJORS?\n         BNE   SPECMAJ                 * NO - THEN BRANCH\n         CLC   MINOR(3),=C'ALL'        * DO WE WANT ALL MINORS?\n         BE    REQUEST1                * YES - THEN BRANCH\n         CLI   MINOR,C' '              * DO WE WANT MINORS?\n         BNE   REQUEST2                * YES - THEN BRANCH\n         B     REQUEST3                * ELSE BRANCH ELSEWHERE\nSPECMAJ  EQU   *\n         CLC   MINOR(3),=C'ALL'        * DO WE WANT ALL MINORS?\n         BE    REQUEST4                * YES - THEN BRANCH\n         CLI   MINOR,C' '              * DO WE WANT MINORS?\n         BNE   REQUEST5                * YES  - THEN BRANCH\n         CLI   JOB,C' '                * DO WE WANT JOB INFO?\n         BE    REQUEST6                * NO - THEN MAJ AND NO MINS\n         L     R1,16                   * GET ADDRESS OF CVT\n         USING CVT,R1                  * TELL ASSEMBLER ABOUT CVT\n         L     R1,CVTASVT              * GET ADDRESS OF ASVT\n         DROP  R1                      * FINISHED WITH CVT DSECT\n         USING ASVT,R1                 * TELL ASSEMBLER ABOUT ASVT\n         LA    R1,ASVTENTY             * START OF ADDRESSES OF ASCBS\n         DROP  R1                      * FINISHED WITH ASVT DSECT\nGETASID  EQU   *\n         CLC   0(4,R1),=X'80000000'    * IS THIS THE LAST ENTRY?\n         BE    NOASID                  * YES - THEN BRANCH AND FINISH\n         TM    0(R1),X'80'             * IS THIS ADDR SPACE ALLOCATED?\n         BO    NOTALLOC                * NO - THEN BRANCH\n         L     R2,0(R1)                * ELSE GET ASCB ADDRESS\n         USING ASCB,R2                 * TELL ASSEMBLER ABOUT ASCB\n         MVC   ASIDVAL+2(2),ASCBASID   * SAVE THIS ASID\n         L     R3,ASCBJBNI             * POINT TO ASCB INIT JOBNAME\n         CLC   JOB,0(R3)               * IS THIS THE REQUESTED JOB?\n         BE    REQUEST7                * YES - THEN GO DO THE BUSINESS\n         L     R3,ASCBJBNS             * POINT TO ASCB STARTED JOBNAME\n         CLC   JOB,0(R3)               * IS THIS THE REQUESTED JOB?\n         BE    REQUEST7                * YES - THEN GO DO THE BUSINESS\n         DROP  R2                      * FINISHED WITH ASCB DSECT\nNOTALLOC EQU   *\n         LA    R1,4(R1)                * POINT TO NEXT ASCB\n         B     GETASID                 * GO AND TRY THE NEXT ONE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #1 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST1 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS1(R15)           * DECIDE WHAT TO DO\nTESTGQS1 EQU   *\n         B     LASTRIB1                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS1                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB1 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS1 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ1                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ1   EQU   *\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         CVD   R1,PRNAMLN              * DECIMAL\n         MVC   RNAMLN,=X'40202021'     * EDIT MASK\n         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH\n         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS1             * END OF RIBS?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST1                * ELSE CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #1 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #2 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST2 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS2(R15)           * DECIDE WHAT TO DO\nTESTGQS2 EQU   *\n         B     LASTRIB2                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS2                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB2 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS2 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         DROP  R9                      * DROP REG 9\n         USING RIBVAR,R9               * USE THE DSECT\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         EX    R1,COMPARE2             * RNAME TO OUTPUT LINE\n         B     *+10                    * BRANCH ROUND EXECUTE INST\nCOMPARE2 CLC   RIBRNAME(0),MINOR       * IS IT THE REQUIRED RNAME\n         BE    DORIBES2                * YES - THEN BRANCH\n         AH    R9,SRIBVLEN             * POINT TO FIRST RIBE\n         MH    R7,SRIBELEN             * GET TOTAL LENGTH OF RIBES\n         AR    R9,R7                   * POINT TO NEXT RIB\n         BCT   R6,GOTRIBS2             * ANY MORE RIBS IN AREA?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST2                * CONTINUE WITH SCAN\nDORIBES2 EQU   *\n         SH    R9,SRIBLEN              * GO BACK TO START OF RIB\n         DROP  R9                      * DROP R9\n         USING RIB,R9                  * USE DSECT\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ2                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ2   EQU   *\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         CVD   R1,PRNAMLN              * DECIMAL\n         MVC   RNAMLN,=X'40202021'     * EDIT MASK\n         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH\n         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         DROP  R9                      * DROP REG 9\n         USING RIBVAR,R9               * USE THE DSECT\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS2             * ANY MORE RIBS IN AREA?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST2                * CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #2 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #3 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST3 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN          * TELL IT WHERE TO RESTART SCAN\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS3(R15)           * DECIDE WHAT TO DO\nTESTGQS3 EQU   *\n         B     LASTRIB3                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS3                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB3 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS3 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ3                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ3   EQU   *\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS3             * ANY MORE RIBS IN AREA?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST3                * CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #3 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #4 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST4 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C\n               RESNAME=(MAJOR)         * SPECIFIC QNAME\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS4(R15)           * DECIDE WHAT TO DO\nTESTGQS4 EQU   *\n         B     LASTRIB4                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS4                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB4 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS4 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ4                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ4   EQU   *\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         CVD   R1,PRNAMLN              * DECIMAL\n         MVC   RNAMLN,=X'40202021'     * EDIT MASK\n         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH\n         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS4             * END OF RIBS?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST4                * ELSE CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #4 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #5 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST5 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         L     R2,MINORLEN             * LOAD UP MINOR LENGTH\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C\n               RESNAME=(MAJOR,MINOR,(R2)) * SPECIFIC RESOURCE\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS5(R15)           * DECIDE WHAT TO DO\nTESTGQS5 EQU   *\n         B     LASTRIB5                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS5                * GOT THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB5 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS5 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ5                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ5   EQU   *\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         CVD   R1,PRNAMLN              * DECIMAL\n         MVC   RNAMLN,=X'40202021'     * EDIT MASK\n         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH\n         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS5             * END OF RIBS?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST5                * ELSE CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #5 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #6 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST6 EQU   *\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C\n               RESNAME=(MAJOR)         * SPECIFIC QNAME\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS6(R15)           * DECIDE WHAT TO DO\nTESTGQS6 EQU   *\n         B     LASTRIB6                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS6                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB6 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS6 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ6                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ6   EQU   *\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS6             * ANY MORE RIBS IN AREA?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST6                * CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #6 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS CODE IS FOR REQUEST #7 ONLY                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREQUEST7 EQU   *\n         L     R2,ASIDVAL              * THIS IS THE ASID WE WANT\n         USING RIB,R9                  * MUST BE A NEW RIB\n         GQSCAN AREA=(RIB,2048),MF=(E,GQSCAN), * EXECUTE FORM GQSCAN   C\n               SCOPE=ALL,              * WE WANT ALL ENQS AND RESERVES C\n               TOKEN=CONTSCAN,         * TELL IT WHERE TO RESTART SCAN C\n               SYSNAME=(0,(R2))        * SPECIFIC ADDRESS SPACE\n         STH   R0,SRIBELEN             * SAVE LENGTH OF RIBES RETURNED\n         SRL   R0,16                   * KEEP LENGTH OF RIB\n         STH   R0,SRIBLEN              * SAVE LENGTH OF RIB RETURNED\n         LR    R6,R1                   * NUMBER OF RIBS RETURNED, REG 6\n         B     TESTGQS7(R15)           * DECIDE WHAT TO DO\nTESTGQS7 EQU   *\n         B     LASTRIB7                * GQSCAN HAS COMPLETED\n         B     NORIB                   * NO RESOURCE MATCHED REQUEST\n         B     GOTRIBS7                * GOT SOME OF THE RIBS\n         B     RIBERR                  * ABNORMAL SITUATION, CRAP RIBS\n         B     RIBERR                  * BAR-B-QUE SPARE RIBS!\nLASTRIB7 EQU   *\n         OI    SRIBFLAG,X'FF'          * SET END OF RIBS INDICATOR\nGOTRIBS7 EQU   *\n         CLC   RIBNRIBE,RIBTRIBE       * DID WE GET ALL THE RIBES?\n         BNE   RIBEERR                 * NO - THEN BRANCH\n         L     R7,RIBNRIBE             * SAVE NO OF RIBES ASSOCIATED\n*        CLC   QNAME,RIBQNAME          * HAVE WE HAD THIS QNAME BEFORE\n         MVC   RSQNAME(8),RIBQNAME     * QNAME FROM RIB\n         MVC   RSQNAME+8(1),RIBSCOPE   * SCOPE FROM RIB\n         CLC   SQNAME,RSQNAME          * QNAME/SCOPE  BEFORE ?\n         BE    SKIPQ7                  * YES - THEN BRANCH\n         BAL   R10,PUTQNAME            * PUT OUT THE QNAME TITLE\nSKIPQ7   EQU   *\n         SR    R1,R1                   * CLEAR REG 1\n         IC    R1,RIBRNMLN             * INSERT RNAME LENGTH\n         CVD   R1,PRNAMLN              * DECIMAL\n         MVC   RNAMLN,=X'40202021'     * EDIT MASK\n         ED    RNAMLN,PRNAMLN+6        * PRINTABLE LENGTH\n         MVC   RNAMLN(1),=CL1'('       * OPENING PARENS OVER FILLER\n         BCTR  R1,0                    * SUBRACT 1 FOR EXECUTE INST\n         MVC   SRIBVLEN(2),RIBVLEN     * SAVE THE RIB VARIABLE LENGTH\n         AH    R9,SRIBLEN              * POINT TO VARIABLE PART OF RIB\n         BAL   R10,PUTRNAME            * PUT OUT RNAME TITLE\n         BAL   R10,WHOSGOT             * GO FIND OUT WHOS GOT RESOURCE\n         BCT   R6,GOTRIBS7             * ANY MORE RIBS IN AREA?\n         CLI   SRIBFLAG,X'FF'          * GQSCAN COMPLETED?\n         BE    FINISH                  * YES - THEN RETURN\n         L     R9,SAVEREG9             * POSITION TO START OF RIB AREA\n         B     REQUEST7                * CONTINUE WITH SCAN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        END OF REQUEST #7 ONLY CODE                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR MESSAGE IF THE PARAMETER CONTROL            *\n*        LIST (PCL) IS IN ERROR                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPERR     EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ENQERR1,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR MESSAGE IF REQUEST CANNOT BE SATISFIED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNORIB    EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ENQERR2,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR MESSAGE IF GQSCAN HAS AN ERROR              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRIBERR   EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ENQERR3,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR IF ALL RIBES WONT FIT IN THE AREA           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRIBEERR  EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ENQERR4,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR IF A JOB REQUESTED COULD NOT BE FOUND       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOASID   EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(ENQERR5,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO PUT OUT THE QNAME TITLE LINES                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTQNAME EQU   *\n         DROP  R9                      * DROP REG 9 IN CASE\n         USING RIB,R9                  * ADDRESSABILITY FOR THE RIB\n         MVC   SQNAME(8),RIBQNAME      * SAVE RIBQNAME FOR CLC\n         MVC   SQNAME+8(1),RIBSCOPE    * SAVE SCOPE FOR CLC\n         MVC   QNAME,RIBQNAME          * QNAME TO OUTPUT LINE\n         MVC   SCOPE1,=CL8' '          * BLANK OUT SCOPE - SYSTEM\n         MVC   SCOPE2,=CL8' '          * BLANK OUT SCOPE - LOCAL\n         TM    RIBSCOPE,RIBSYSS        * SYSTEMS ENQ ?\n         BNO   NOSYSS                  * NO\n         MVC   SCOPE1(9),=CL9'(SYSTEMS)'  * MOVE IN SCOPE\nNOSYSS   TM    RIBSCOPE,RIBSTEP        * STEP ENQ ?\n         BNO   NOSTEP                  * NO\n         MVC   SCOPE1(9),=CL9'(STEP   )'  * MOVE IN SCOPE\nNOSTEP   TM    RIBSCOPE,RIBGLBL        * GLOBAL ENQ ?\n         BNO   NOGLOB                  * NO\n         MVC   SCOPE2,=CL8',GLOBAL)'   * MOVE IN SCOPE\nNOGLOB   EQU   *\n         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C\n               OUTPUT=(MAJTITLE,MULTLIN,DATA),                         C\n               MF=(E,ZIOPL)\n         BR    R10                     * RETURN TO MAIN LINE CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO PUT OUT THE RNAME TITLE LINES                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTRNAME EQU   *\n         DROP  R9                      * DROP REG 9\n         USING RIBVAR,R9               * ADDRESSABILITY FOR THE RIBVAR\n         MVC   RNAME,=CL62' '          * CLEAR RNAME TO SPACES\n         EX    R1,MOVED                * RNAME TO OUTPUT LINE\n         B     *+10                    * BRANCH ROUND EXECUTE INST\nMOVED    MVC   RNAME+10(0),RIBRNAME    * EXECUTED INSTRUCTION\n         TRT   RNAME,TRLIST            * HAVE WE GOT ANY NAUGHTY BITS\n         BZ    PUTR                    * NO - THEN BRANCH\n         MVC   TRNAME(2),=C'X'''       * WE WILL DISPLAY THIS AS HEX\n         UNPK  TRNAME+2(15),RNAME+10(8) * DO FIRST 7 CHARS\n         UNPK  TRNAME+16(15),RNAME+17(8) * DO NEXT 7 CHARS\n         UNPK  TRNAME+30(15),RNAME+24(8) * DO NEXT 7 CHARS\n         UNPK  TRNAME+44(7),RNAME+31(4) * DO NEXT 3 CHARS, TOTAL= 24\n         MVC   TRNAME+50(2),=C''' '    * FINISH OFF THE LINE\n         MVC   RNAME+10(52),TRNAME     * MOVE IT BACK TO PRINT LINE\n         TR    RNAME+12(48),TRANSTAB   * TRANSLATE TO GET THE ALPHAS\nPUTR     EQU   *\n         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C\n               OUTPUT=(MINTITLE,SINGLE,DATA),                          C\n               MF=(E,ZIOPL)\n         BR    R10                     * RETURN TO MAIN LINE CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO EXTRACT INFORMATION FROM THE RIBES AND PRINT IT   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nWHOSGOT  EQU   *\n         AH    R9,SRIBVLEN             * POINT TO FIRST RIBE\n         DROP  R9                      * DROP REG 9\n         USING RIBE,R9                 * USE THE DSECT\nNEXTRIBE EQU   *\n         MVC   WORK(3),RIBEASID        * MOVE ASID INTO WORK AREA\n         NI    WORK,X'80'              * TURN OFF THE SIGN BIT\n         UNPK  ASIDWORK(5),WORK(3)     * UNPACK TO GET SEMI-PRINTABLE\n         MVC   ASID(4),ASIDWORK        * DROP OFF THE SIGN BYTE\n         TR    ASID(4),TRANSTAB        * MAKE COMPLETELY PRINTABLE\n         MVC   JOBNAME,RIBEJBNM        * MOVE JOBNAME INTO PUT LINE\n         TM    RIBERFLG,X'80'          * EXCLUSIVE OR SHARED?\n         BZ    EXCL                    * EXCLUSIVE - THEN BRANCH\n         MVC   REQTYPE,=CL9'SHARED'    * ELSE SHARED, INTO PUT LINE\n         B     CHKRSTAT                * GO CHECK REQUEST STATUS\nEXCL     EQU   *\n         MVC   REQTYPE,=CL9'EXCLUSIVE' * MOVE EXCLUSIVE INTO PUT LINE\nCHKRSTAT EQU   *\n         TM    RIBESFLG,X'80'          * WAITING OR OWNER?\n         BZ    WAIT                    * WAITING - THEN BRANCH\n         MVC   REQSTAT,=CL7'OWNER'     * ELSE OWNER, INTO PUT LINE\n         B     PUTINFO                 * GO PUT OUT INFO LINE\nWAIT     EQU   *\n         MVC   REQSTAT,=CL7'WAITING'   * MOVE WAITING INTO PUT LINE\nPUTINFO  EQU   *\n         PUTLINE PARM=PUTBLOK,         * PUT OUT A LINE                C\n               OUTPUT=(INFOLINE,SINGLE,DATA),                          C\n               MF=(E,ZIOPL)\n         AH    R9,SRIBELEN             * POINT TO NEXT RIBE\n         BCT   R7,NEXTRIBE             * END OF RIBES?\n         BR    R10                     * RETURN TO MAIN LINE CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO TIDY UP IF THE ATTENTION KEY IS STRUCK            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nATTNEXIT EQU   *\n         BALR  R8,0                    * SET UP A GOOD BASE REG\n         USING *,R8                    * TELL ASSEMBLER\n         L     R13,SAVER13             * PICK UP MY SAVE AREA ADDR\n         GQSCAN QUIT=YES,TOKEN=CONTSCAN * TELL THE SCAN TO STOP\n         LTR   R15,R15                 * WAS IT OK?\n         BZ    FINISH                  * YES - THEN BRANCH\n         ABEND 99,DUMP                 * ELSE ABEND\n         DROP  R8                      * DROP REG 8\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIDY UP AND RETURN                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFINISH   EQU   *\n         BALR  R8,0                    * SET UP A GOOD BASE REG\n         USING *,R8                    * TELL ASSEMBLER\n         L     R1,SAVEREG9             * AREA USED FOR RIBS\n         LA    R0,2048                 * LENGTH OF RIB AREA\n         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA\n         L     R2,4(R13)               * CHAIN BACK TO FIND SAVE AREA\n         LR    R1,R13                  * OUR SAVE AREA ADDR IN REG 1\n         L     R0,=A(WORKLEN)          * LENGTH OF OUR SAVE AREA, REG 0\n         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA\n         LR    R13,R2                  * REG 13-> TO PREVIOUS SAVE AREA\n         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN\n         DROP  R8                      * DONT NEED EXTRA BASE NOW\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LIST FORM OF GQSCAN MACRO                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGQSCAN   GQSCAN MF=L                   * PARM LIST FOR EXECUTE FORM\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LIST FORM OF PUTLINE MACRO                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTBLOK  PUTLINE MF=L                  * EXPANDS INTO PUTLINE PARM BLOK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OUTPUT LINES PUT TO THE SCREEN                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nMAJTITLE DC    A(UNDERLN)              * FORWARD POINTER TO NEXT LINE\n         DC    H'30'                   * LENGTH OF FIRST LINE\n         DC    H'0'                    * RESERVED\nQNAME    DC    CL8' '                  * MAJOR NAME FIELD IN PRINT LINE\n         DC    CL2' '                  *\nSCOPE1   DC    CL8' '                  * SYSTEMS/STEP - BLANK IF SYSTEM\nSCOPE2   DC    CL8' '                  * GLOBAL - BLANK IF LOCAL\n*\nUNDERLN  DC    A(0)                    * END OF CHAIN INDICATOR\n         DC    H'12'                   * LENGTH OF SECOND LINE\n         DC    H'0'                    * RESERVED\n         DC    CL8'********'           * UNDERLINE HEADING\n*\nMINTITLE DC    H'78'                   * LENGTH OF THE OUTPUT LINE\n         DC    H'0'                    * RESERVED\nRNAME    DC    CL62' '                 * MINOR NAME FIELD IN PRINT LINE\n         DC    CL7' LENGTH'            *\nRNAMLN   DS    CL4                     * LENGTH OF RNAME\n         DC    CL1')'                  *\n*\nINFOLINE DC    H'66'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL14' '                 * BLANKS\n         DC    CL5'ASID='              * ASID LABEL\nASID     DC    CL4' '                  * ASID\n         DC    CL9',JOBNAME='          * JOBNAME LABEL\nJOBNAME  DC    CL8' '                  * JOBNAME\n         DC    CL1','                  * COMMA\nREQTYPE  DC    CL9' '                  * EXCLUSIVE OR SHARED\n         DC    CL1','                  * COMMA\nREQSTAT  DC    CL7' '                  * WAITING OR OWNER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR MESSAGES PUT TO THE SCREEN                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nENQERR1  DC    H'49'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL45'ERROR IN PARAMETER CONTROL LIST IN ENQ MODULE'\n*\nENQERR2  DC    H'34'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL30'REQUEST COULD NOT BE SATISFIED'\n*\nENQERR3  DC    H'49'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL45'GQSCAN ENCOUNTERED AN ERROR - THIS IS SERIOUS'\n*\nENQERR4  DC    H'49'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL45'NOT ALL RIBES COULD FIT INTO AREA - DATA LOST'\n*\nENQERR5  DC    H'54'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL50'THE JOBNAME SPECIFIED DOES NOT EXIST IN THE SYSTEM'\n*\nATTNMSG  DC    CL80'ENQ COMMAND TERMINATED DUE TO ATTENTION'\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATA AREAS (DO NOT LET SAVER13 GO BEYOND +FFF IN THIS PROG   *\n*        OTHERWISE THE ASSEMBLER WILL USE THE WRONG BASE REGISTER     *\n*        FOR PROCESSING ATTENTION INTERRUPTS - IT SHOULD USE REG8).   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nJOB      DC    CL8' '                  * JOB NAME\nASIDVAL  DC    F'0'                    * ASID     (MUTUALLY EXCLUSIVE\nMAJOR    DC    CL8' '                  * MAJOR NAME     WITH THIS\nMINOR    DC    CL52' '                 * MINOR NAME     AND THIS).\nMINORLEN DC    F'0'                    * MINOR NAME LENGTH (NO SIGN)\nSAVEREG9 DC    F'0'                    * SAVE REG FOR USER AREA START\nSAVER13  DC    F'0'                    * SAVE REG FOR USE ATTN EXIT\nCONTSCAN DC    F'0'                    * TOKEN FOR GQSCAN\nSRIBFLAG DC    X'00'                   * FLAG INDICATING GQSCAN END\nSRIBLEN  DC    H'0'                    * SAVED RIB LENGTH\nSRIBVLEN DC    H'0'                    * SAVED VARIABLE RIB LENGTH\nSRIBELEN DC    H'0'                    * SAVED RIBE LENGTH\nWORK     DC    XL3'00'                 * WORK AREA FOR ASID\nASIDWORK DC    XL5'00'                 * UNPACK WORK INTO THIS AREA\nTRNAME   DC    CL52' '                 * USED TO TRANSLATE RNAME IF HEX\nPRNAMLN  DS    D                       * DECIMAL RNAME LENGTH HERE\nSQNAME   DC    CL9' '                  * LAST QNAME/SCOPE FOR CLC\nRSQNAME  DC    CL9' '                  * QNAME/SCOPE FOR CLC\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TRANSLATE TABLES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nTRLIST   DS    0CL256                  * TEST FOR UNPRINTABLES\n         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'00FFFFFFFFFFFFFFFFFFFF0000000000'\n         DC    XL16'00FFFFFFFFFFFFFFFFFF000000000000'\n         DC    XL16'0000FFFFFFFFFFFFFFFF000000000000'\n         DC    XL16'FFFFFFFFFFFFFFFFFFFF000000000000'\n         DC    XL16'FF000000000000000000FFFFFFFFFFFF'\n         DC    XL16'FF000000000000000000FFFFFFFFFFFF'\n         DC    XL16'FFFF0000000000000000FFFFFFFFFFFF'\n         DC    XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'00000000000000000000FFFFFFFFFFFF'\n         DC    XL16'00000000000000000000FFFFFFFFFFFF'\n         DC    XL16'00FF0000000000000000FFFFFFFFFFFF'\n         DC    XL16'00000000000000000000FFFFFFFFFFFF'\n*\nTRANSTAB DC    CL256' '                * MAKE CHARS PRINTABLE\n         ORG   TRANSTAB+X'F0'\n         DC    C'0123456789'\n         ORG   TRANSTAB+X'FA'\n         DC    C'ABCDEF'\n         ORG   ,\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETER CONTROL LIST                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nZPCL     IKJPARM\n*\nJOBORK   IKJKEYWD\n*\n         IKJNAME 'JOB',SUBFLD=JOBORKS\n*\n         IKJNAME 'JOBNAME',SUBFLD=JOBORKS\n*\nMAJORK   IKJKEYWD\n*\n         IKJNAME 'MAJ',SUBFLD=MAJORKS\n*\n         IKJNAME 'MAJOR',SUBFLD=MAJORKS\n*\nMINORK   IKJKEYWD\n*\n         IKJNAME 'MIN',SUBFLD=MINORKS\n         SPACE 2\n         IKJNAME 'MINOR',SUBFLD=MINORKS\n*\nJOBORKS  IKJSUBF\n*\nJOBNAMES IKJIDENT 'JOB NAME PARAMETER',LIST,PROMPT='JOB NAME REQUIRED',-\n               HELP=('JOB NAME REQUIRED FOR A LIST OF IT''S ENQS'),    -\n               MAXLNTH=8,FIRST=ALPHA,OTHER=ANY\n*\nMAJORKS  IKJSUBF\n*\nMAJORS IKJIDENT 'MAJOR QCB PARAMETER',LIST,PROMPT='MAJOR QCB REQUIRED',-\n               HELP=('MAJOR NAME OF QCB REQUIRED','ALL, FOR ALL THE MAJ-\n               OR QCB''S - DEFAULT IS SYSDSN'),                        -\n               MAXLNTH=8,FIRST=ALPHA,OTHER=ANY\n*\nMINORKS  IKJSUBF\n*\nMINORS IKJIDENT 'MINOR QCB PARAMETER',LIST,PROMPT='MINOR QCB REQUIRED',-\n               HELP=('MINOR NAME OF QCB REQUIRED','ALL, FOR ALL THE MIN-\n               OR QCB''S'),                                            -\n               MAXLNTH=52,FIRST=ALPHA,OTHER=ANY\n*\n         IKJENDP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DSECTS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\n         IKJCPPL                       * DSECT USED TO MAP CPPL\n*\n         IKJIOPL                       * DSECT USED TO MAP IOPL\n*\n         IKJPPL                        * DSECT USED TO MAP PPL\n*\n         CVT   DSECT=YES               * DSECT USED TO MAP CVT\n*\n         IHAASVT                       * DSECT USED TO MAP ASVT\n*\n         IHAASCB                       * DSECT USED TO MAP ASCB\n*\n         ISGRIB                        * 3 DSECTS USED TO MAP RIB\n*\nWORKAREA DSECT                         * DSECT USED TO MAP WORK AREA\n         DS    18F                     * SAVE AREA OF CALLED MODULE\nZIOPL    DS    4F                      * I/O PARAMETER LIST (IOPL)\nZPPL     DS    7F                      * PARSE PARAMETER LIST (PPL)\nZECB     DS    F                       * USER'S ECB ADDRESS\nANS      DS    F                       * ANSWER FIELD ADDR IN PPL\nWORKLEN  EQU   *-WORKAREA              * CALCULATE WORK-AREA LENGTH\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01EXTNT": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x02{\\x02{\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 635, "newlines": 635, "modlines": 0, "user": "UKGUIDE"}, "text": "LEXTENTS TITLE '                                  ALLOCATE 2ND EXTENTS'\n***********************************************************************\n*                                                                     *\n*        LEXTENTS - ALLOCATE 2ND EXTENTS                              *\n*                                                                     *\n*        THIS PROGRAM WILL UPDATE THE VTOC ENTRY FOR A PDS TO GIVE    *\n*        IT A SECONDARY EXTENT OF 1 CYLINDER OR 15 TRACKS OR          *\n*        THE EQUIVALENT IN BLOCKS IF IT DOESN'T ALREADY HAVE ONE.     *\n*                                                                     *\n*        //STEP1   EXEC PGM=LEXTENTS                                  *\n*        //SYSPRINT DD  SYSOUT=*                                      *\n*        //DISKXXXX DD  DSN=OD00.MVS.CNTL,DISP=SHR                    *\n*                                                                     *\n*        AUTHOR: DAVE THORBY, NOVEMBER 1988                           *\n*                                                                     *\n*        MODIFIED: DAVE THORBY, MAY 1989 - ADD ADDITIONAL FUNCTIONS:- *\n*              UPDAT OR CHECK - MAKE CHANGES OR SIMULATE RUN          *\n*              ADD2X OR SUB2X - ADD OR REMOVE SECONDARY EXTENTS       *\n*              BLOCK=NNNNN    - CHANGE BLOCKSIZE                      *\n*              TRACK          - CHANGE CYLINDERS TO TRACKS            *\n*              POORG OR PSORG OR PO&PS OR PS&PO OR PO+PS OR PS+PO     *\n*                             - SELECT TYPE OF DATA SET TO PROCESS    *\n*              ALLDD OR DISKX - DD STATEMENT(S) TO USE                *\n*                                                                     *\n*        RETURN CODES:                                                *\n*        8   = ERROR IN PARM LIST                                     *\n*        4   = AT LEAST 1 DATA SET NOT UPDATED                        *\n*        0   = ALL DATA SETS UPDATED SUCCESSFULLY                     *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        R1    SVC 99 REQUEST BLOCK POINTER                           *\n*        R2    DECB FOR VTOC                                          *\n*        R3    2ND BASE REGISTER                                      *\n*        R4    INTERNAL LINKAGE/WORK REG                              *\n*        R5    USED WITH R4                                           *\n*        R6    SPARE                                                  *\n*        R7    SPARE                                                  *\n*        R8    USED WITH R9                                           *\n*        R9    TRACK LENGTH                                           *\n*        R10   BLOCKSIZE/WORK REG                                     *\n*        R11   RECORD AREA                                            *\n*        R12   BASE REGISTER                                          *\n*        R13   SAVE AREA                                              *\n*        R14   WORK REGISTER                                          *\n*        R15   WORK REGISTER                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLEXTENTS CSECT\n         SAVE  (14,12),,LEXTENTS.&SYSDATE..&SYSTIME\n         LR    R12,R15             ESTABLISH -\n         USING LEXTENTS,R12,R3      BASE REGISTERS\n         LA    R3,4095(,R12)       INITIALISE -\n         LA    R3,1(,R3)            2ND BASE REGISTER\n         BAL   R11,START           POINT TO PROGRAM SAVE AREA\n         DC    18F'0'              SAVE AREA\nSTART    ST    R11,8(,R13)         CHAIN SAVE AREAS FORWARD\n         ST    R13,4(,R11)         CHAIN SAVE AREAS BACKWARD\n         LR    R13,R11             POINT TO PROGRAM SAVE AREA\n         SPACE 1\n         L     R11,0(,R1)          SAVE PARM ADDRESS\n         OPEN  (SYSPRINT,OUTPUT)   OPEN PRINT FILE\n         LH    R15,0(,R11)         PICK UP PARM LENGTH\n         LA    R14,2(,R11)         POINT TO FIRST PARAMETER\n         LTR   R15,R15             CHECK FOR NULL PARM\n         BZ    P_END               END OF PARAMETERS\nP_SCAN   CLC   =C'UPDAT',0(R14)    TYPERUN=UPDATE ?\n         BE    P_UPDAT             YES - SET FLAG\n         CLC   =C'CHECK',0(R14)    TYPERUN=CHECK ?\n         BE    P_CHECK             YES - SET FLAG\n         CLC   =C'ADD2X',0(R14)    ADD SECONDARY EXTENTS ?\n         BE    P_ADD2X             YES - SET FLAG\n         CLC   =C'SUB2X',0(R14)    REMOVE SECONDARY EXTENTS ?\n         BE    P_SUB2X             YES - SET FLAG\n         CLC   =C'RACON',0(R14)    TURN ON RACF BIT ?\n         BE    P_RACON             YES - SET FLAG\n         CLC   =C'RACOF',0(R14)    TURN OFF RACF BIT ?\n         BE    P_RACOF             YES - SET FLAG\n         CLC   =C'BLOCK',0(R14)    CHANGE BLOCKSIZE ?\n         BE    P_BLOCK             YES - GET BLOCKSIZE\n         CLC   =C'TRACK',0(R14)    CONVERT CYLINDERS TO TRACKS ?\n         BE    P_TRACK             YES - SET FLAG\n         CLC   =C'POORG',0(R14)    ONLY PROCESS PO DATA SETS ?\n         BE    P_POORG             YES - SET FLAG\n         CLC   =C'PSORG',0(R14)    ONLY PROCESS PS DATA SETS ?\n         BE    P_PSORG             YES - SET FLAG\n         CLC   =C'PO&&PS',0(R14)   PROCESS PO AND PS DATA SETS ?\n         BE    P_BOTH              YES - SET FLAGS\n         CLC   =C'PS&&PO',0(R14)   PROCESS PO AND PS DATA SETS ?\n         BE    P_BOTH              YES - SET FLAGS\n         CLC   =C'PO+PS',0(R14)    PROCESS PO AND PS DATA SETS ?\n         BE    P_BOTH              YES - SET FLAGS\n         CLC   =C'PS+PO',0(R14)    PROCESS PO AND PS DATA SETS ?\n         BE    P_BOTH              YES - SET FLAGS\n         CLC   =C'ALLDD',0(R14)    PROCESS ALL DISKXXXX FILES ?\n         BE    P_ALLDD             YES - CHECK NEXT PARAMETER\n         CLC   =C'DISK',0(R14)     PROCESS ONLY ONE DD STATEMENT ?\n         BE    P_DISK              YES - SET FLAG\n         SPACE 1\n         MVC   DETAIL+1(18),=C'UNKNOWN PARAMETER:'\n         MVC   DETAIL+20(5),0(R14)\n         MVC   DETAIL+26(13),=C'- RUN ABORTED'\n         PUT   SYSPRINT,DETAIL     WRITE ERROR MESSAGE\n         OI    RETCODE+3,8         SET RETURN CODE\n         B     EOJ                 RETURN TO CALLER\n         SPACE 2\nP_NEXT   LA    R14,6(,R14)         POINT TO NEXT PARAMETER\n         SH    R15,=H'6'           DECREASE LENGTH OF PARM\n         BP    P_SCAN              CHECK NEXT PARM\n         B     P_END               END OF PARAMETERS\n         EJECT\nP_UPDAT  OI    PF_FLAGS,PF_UPDAT   SET UPDATE FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_CHECK  NI    PF_FLAGS,255-PF_UPDAT TURN OFF UPDATE FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_ADD2X  TM    PF_FLAGS,PF_SUB2X   CHECK FOR REMOVE SECONDARIES\n         BO    P_ERROR             CONFLICTING PARAMETERS\n         OI    PF_FLAGS,PF_ADD2X   SET ADD SECONDARIES FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_SUB2X  TM    PF_FLAGS,PF_ADD2X   CHECK FOR ADD SECONDARIES\n         BO    P_ERROR             CONFLICTING PARAMETERS\n         OI    PF_FLAGS,PF_SUB2X   SET REMOVE SECONDARIES FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_RACON  TM    PF_FLAGS,PF_RACOF   CHECK FOR TURN OFF RACF BIT\n         BO    P_ERROR             CONFLICTING PARAMETERS\n         OI    PF_FLAGS,PF_RACON   SET TURN ON RACF BIT FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_RACOF  TM    PF_FLAGS,PF_RACON   CHECK FOR TURN ON RACF BIT\n         BO    P_ERROR             CONFLICTING PARAMETERS\n         OI    PF_FLAGS,PF_RACOF   SET TURN OFF RACF BIT FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_BLOCK  LA    R14,6(,R14)         POINT TO BLOCK SIZE\n         SH    R15,=H'6'           DECREASE LENGTH OF PARM\n         PACK  PACKED,0(5,R14)     CONVERT TO PACKED\n         CVB   R1,PACKED           CONVERT TO BINARY\n         LTR   R1,R1               CHECK FOR ZERO\n         BZ    P_BLK_I             INVALID BLOCKSIZE\n         STH   R1,PF_BLOCK         STORE BLOCK SIZE\n         TM    PF_BLOCK,X'80'      CHECK FOR EXCESSIVE/NEGATIVE VALUE\n         BZ    P_NEXT              OK - CONTINUE\nP_BLK_I  MVC   DETAIL+1(18),=C'INVALID BLOCKSIZE:'\n         MVC   DETAIL+20(5),0(R14)\n         MVC   DETAIL+26(13),=C'- RUN ABORTED'\n         PUT   SYSPRINT,DETAIL     WRITE ERROR MESSAGE\n         OI    RETCODE+3,8         SET RETURN CODE\n         B     EOJ                 RETURN TO CALLER\n         SPACE 1\nP_TRACK  OI    PF_FLAGS,PF_TRACK   SET TRACKS FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_POORG  OI    PF_FLAGS,PF_POORG   SET PO FLAG\n         NI    PF_FLAGS,255-PF_PSORG TURN OFF PS FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_PSORG  OI    PF_FLAGS,PF_PSORG   SET PS FLAG\n         NI    PF_FLAGS,255-PF_POORG TURN OFF PO FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_BOTH   OI    PF_FLAGS,PF_POORG+PF_PSORG SET PO AND PS FLAGS\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_ALLDD  MVI   PF_DDNAM,C' '       CLEAR DD-NAME\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 1\nP_DISK   MVC   PF_DDNAM,4(R14)     SET DD-NAME\n         OI    LASTDDN,X'80'       SET LAST DDNAME FLAG\n         B     P_NEXT              GET NEXT PARAMETER\n         SPACE 3\nP_ERROR  MVC   DETAIL+1(22),=C'CONFLICTING PARAMETERS'\n         MVC   DETAIL+26(13),=C'- RUN ABORTED'\n         PUT   SYSPRINT,DETAIL     WRITE ERROR MESSAGE\n         OI    RETCODE+3,8         SET RETURN CODE\n         B     EOJ                 RETURN TO CALLER\n         EJECT\nP_END    MVC   DETAIL+1(64),=C'LEXTENTS                         *****  X\n               OPTIONS IN EFFECT  *****'\n         PUT   SYSPRINT,DETAIL     WRITE OPTIONS HEADER\n         MVC   DETAIL(10),=C'0OPTIONS: ' RE-INITIALISE LINE\n         MVC   DETAIL+30(35),DETAIL+29\n         TM    PF_FLAGS,PF_UPDAT   ARE WE IN UPDATE MODE ?\n         BO    PP_UPDAT            YES - SAY SO\n         MVC   DETAIL+12(6),=C'CHECK,'\n         MVC   HEADING+119(14),=C'* SIMULATION *'\n         OI    OPENU+1,X'F0'       OPEN AS INPUT ONLY\n         OI    REWRITE+1,X'F0'     DO NOT UPDATE VTOC\n         B     PP_CHECK            GET NEXT OPTION\n         SPACE 1\nPP_UPDAT MVC   DETAIL+12(7),=C'UPDATE,'\nPP_CHECK TM    PF_FLAGS,PF_ADD2X   ARE WE ADDING SECONDARIES ?\n         BO    PP_ADD2X            YES - SAY SO\n         TM    PF_FLAGS,PF_SUB2X   ARE WE REMOVING SECONDARIES ?\n         BO    PP_SUB2X            YES - SAY SO\n         MVC   DETAIL+20(25),=C' LEAVE SECONDARY EXTENTS,'\n         B     PP_NO2X\n         SPACE 1\nPP_ADD2X MVC   DETAIL+20(25),=C'   ADD SECONDARY EXTENTS,'\n         B     PP_NO2X\n         SPACE 1\nPP_SUB2X MVC   DETAIL+20(25),=C'REMOVE SECONDARY EXTENTS,'\nPP_NO2X  TM    PF_FLAGS,PF_TRACK   CONVERT CYLINDERS TO TRACKS ?\n         BO    PP_TRACK            YES - SAY SO\n         MVC   DETAIL+46(18),=C' LEAVE CYL AS CYL,'\n         B     PP_CYLS             GET NEXT OPTION\n         SPACE 1\nPP_TRACK MVC   DETAIL+46(18),=C'CHANGE CYL TO TRK,'\nPP_CYLS  TM    PF_FLAGS,PF_POORG   PROCESS PO DATA SETS ?\n         BO    PP_POORG            YES - CHECK FOR PS\n         MVC   DETAIL+65(20),=C'UPDATE PS DATA SETS,'\n         B     PP_DSORG            GET NEXT OPTION\n         SPACE 1\nPP_POORG TM    PF_FLAGS,PF_PSORG   PROCESS PS DATA SETS ?\n         BO    PP_PO_PS            YES - PRINT BOTH\n         MVC   DETAIL+65(20),=C'UPDATE PO DATA SETS,'\n         B     PP_DSORG            GET NEXT OPTION\n         SPACE 1\nPP_PO_PS MVC   DETAIL+65(20),=C'PO AND PS DATA SETS,'\nPP_DSORG CLC   =H'-1',PF_BLOCK     NEW BLOCK SIZE ?\n         BE    PP_NOBLK            NO - PRINT MESSAGE\n         MVC   DETAIL+86(17),=C'REBLOCK TO      ,'\n         MVC   DETAIL+96(6),=X'402020202120'\n         LH    R14,PF_BLOCK        PICK UP BLOCKSIZE\n         CVD   R14,PACKED          CONVERT TO PACKED\n         ED    DETAIL+96(6),PACKED+5 CONVERT TO DISPLAY\n         B     PP_BLOCK            GET NEXT OPTION\n         SPACE 1\nPP_NOBLK MVC   DETAIL+86(14),=C'NO REBLOCKING,'\nPP_BLOCK CLI   PF_DDNAM,C' '       ONE DD NAME SPECIFIED ?\n         BNE   PP_DDNAM            YES - PRINT IT\n         MVC   DETAIL+104(12),=C'ALL DDNAMES.'\n         B     PP_ALLDD            GO TO END OF OPTIONS\n         SPACE 1\nPP_DDNAM MVC   DETAIL+104(13),=C'DDNAME=DISK .'\n         MVC   DETAIL+115(1),PF_DDNAM MOVE IN DDNAME\nPP_ALLDD PUT   SYSPRINT,DETAIL     WRITE OPTIONS LINE\n         MVI   DETAIL+1,C' '       CLEAR -\n         MVC   DETAIL+2(131),DETAIL+1  DETAIL LINE\n         MVI   DETAIL,C'0'         RESET CARRIAGE CONTROL\n         PUT   SYSPRINT,DETAIL     PRINT BLANK LINE\n         PUT   SYSPRINT,HEADING    PRINT REPORT HEADING\n         PUT   SYSPRINT,HEADINGU   PRINT HEADING UNDERLINES\n         CLI   PF_DDNAM,C' '       DO WE HAVE A FIXED DDNAME ?\n         BE    LOOP                NO - SCAN FOR DDNAMES\n         MVC   DDNAME(4),=C'DISK'  SET UP THE -\n         MVC   DDNAME+4(4),PF_DDNAM  REQUESTED DDNAME -\n         B     CHECKDDN              AS IF WE FOUND IT !\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIND ALL //DISKXXXX DD STATEMENTS                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOOP     TM    LASTDDN,X'80'       WAS THAT THE LAST DDNAME ?\n         BO    EOJ                 YES - GO TO END OF JOB\n         LH    R1,DDNUMBER         PICK UP LAST RELATIVE NUMBER\n         LA    R1,1(,R1)           ADD 1\n         STH   R1,DDNUMBER         STORE NEW RELATIVE NUMBER\n         MVC   DDNAME-2(2),=H'8'   RESET LENGTH OF DDNAME\n         MVC   DDNAME,=CL8' '      BLANK OUT DDNAME\n         LA    R1,SVC99RBP         POINT TO REQUEST BLOCK POINTER\n         DYNALLOC ,                GET NEXT DDNAME\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CHECKDDN            DYNALLOC ERROR DETECTED\n         ABEND 10,DUMP             STOP THE PROGRAM RIGHT HERE\n         EJECT\nCHECKDDN CLC   =C'DISK',DDNAME     CHECK FOR //DISKXXXX DD\n         BNE   LOOP                NOT FOUND - TRY ANOTHER\n         MVC   DETAIL(2),=C'0 '    RESET CARRIAGE CONTROL\n         MVC   DETAIL+2(131),DETAIL+1 BLANK OUT DETAIL LINE\n         LA    R14,VTOC            POINT TO DCB\n         USING IHADCB,R14          MAP THE DCB\n         MVC   DCBDDNAM,DDNAME     OVERWRITE THE DDNAME\n         MVC   DETAIL+1(8),DDNAME  MOVE THE DDNAME TO PRINT LINE\n         DROP  R14                 REUSE REGISTER\n         RDJFCB VTOC               PREPARE TO OPEN VTOC\n         LA    R10,VTOCJFCB        POINT TO JFCB\n         USING INFMJFCB,R10        MAP THE JFCB\n         MVC   DSNAME,JFCBDSNM     SAVE THE DATA SET NAME\n         MVC   DETAIL+19(44),JFCBDSNM MOVE THE DSNAME TO PRINT LINE\n         MVC   DETAIL+11(6),JFCBVOLS MOVE THE VOLSER TO PRINT LINE\n         CLC   =C'SYS1',JFCBDSNM   IS THIS A SYSTEM DATA SET ?\n         BE    SYSDSN              YES - DO NOT UPDATE IT\n         CLC   =C'SYS9',JFCBDSNM   IS THIS A SYSTEM DATA SET ?\n         BE    SYSDSN              YES - DO NOT UPDATE IT\n         CLC   =C'NULLFILE ',JFCBDSNM IS THIS A DD DUMMY ?\n         BE    NULLFILE            HANDLE IT PROPERLY\n         TM    PF_FLAGS,PF_UPDAT   ARE WE UPDATING ?\n         BZ    SETDSCB4            NO - BYPASS RACF CHECKING\n         RACHECK ENTITY=DETAIL+19,VOLSER=DETAIL+11,                    X\n               CLASS='DATASET',ATTR=UPDATE,LOG=NOFAIL\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    SETDSCB4            NORMAL COMPLETION\n         RACHECK ENTITY=DETAIL+11,                                     X\n               CLASS='DASDVOL',ATTR=UPDATE,LOG=NOFAIL\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    SETDSCB4            NORMAL COMPLETION\n         MVC   DETAIL+65(29),=C'INSUFFICIENT ACCESS AUTHORITY'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     ERRORMSG            GET ANOTHER DD STATEMENT\n         SPACE 3\nSETDSCB4 MVI   JFCBDSNM,X'04'      SET UP FORMAT 4 DSCB KEY\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         DROP  R10                 REUSE REGISTER\nOPENU    NOP   OPENI               IF PARM=CHECK SPECIFIED\n         OPEN  (VTOC,UPDAT),TYPE=J ACCESS THE VTOC\n         B     OPENED\n         SPACE 1\nOPENI    OPEN  (VTOC,INPUT),TYPE=J ACCESS THE VTOC\nOPENED   LA    R11,VTOCWORK        POINT TO RECORD WORK AREA\n         USING IECSDSL1,R11        MAP THE DSCB\nGETDSCB  LA    R2,VTOCDECB         POINT TO DECB\n         READ  (2),SF,VTOC,VTOCWORK,'S',MF=E GET DSCB\n         CHECK VTOCDECB            WAIT FOR I/O TO COMPLETE\n         CLI   DS1FMTID,C'4'       IS THIS A FORMAT 4 ?\n         BE    FORMAT4             YES - PICK UP TRACK LENGTH\n         CLI   DS1FMTID,C'1'       IS THIS A FORMAT 1 ?\n         BNE   GETDSCB             NO - TRY ANOTHER\n         CLC   DS1DSNAM,DSNAME     IS THIS THE REQUESTED DATA SET ?\n         BNE   GETDSCB             NO - TRY ANOTHER\n         SPACE 3\n         CLI   DS1SCAL1,DS1DSABS   ABSOLUTE TRACK SPACE ?\n         BE    DS_ABS              YES - BYPASS UPDATE\n         TM    DS1SCAL1,DS1CONTG   CONTIGUOUS SPACE ?\n         BO    DS_CONTG            YES - BYPASS UPDATE\n         TM    DS1DSORG,DS1DSGU    IS THE DATA SET UNMOVABLE ?\n         BO    DS_UNMOV            YES - BYPASS UPDATE\n         TM    DS1DSORG,DS1DSGPO   IS THIS A PO DATA SET ?\n         BO    DS_POORG            YES - CHECK IF REQUIRED\n         TM    DS1DSORG,DS1DSGPS   IS THIS A PS DATA SET ?\n         BO    DS_PSORG            YES - CHECK IF REQUIRED\n         MVC   DETAIL+65(18),=C'DSORG NOT PO OR PS'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 2\nDS_POORG TM    PF_FLAGS,PF_POORG   DO WE WANT PO ?\n         BO    DSORG_OK            YES - CONTINUE\n         MVC   DETAIL+65(23),=C'DATA SET NOT SEQUENTIAL'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 2\nDS_PSORG TM    PF_FLAGS,PF_PSORG   DO WE WANT PS ?\n         BO    DSORG_OK            YES - CONTINUE\n         MVC   DETAIL+65(24),=C'DATA SET NOT PARTITIONED'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 3\nDSORG_OK DS    0H\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE FORMAT 1 DSCB                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nUPDATE   MVC   DETAIL+65(15),=C' - NO UPDATES -'  INDICATE NO CHANGES\n         SPACE 1\n         TM    PF_FLAGS,PF_TRACK   CYLINDER TO TRACK CONVERSION ?\n         BZ    UP_TRACK            NO - BYPASS CHANGE\n         BAL   R4,PUT_LINE         WRITE DETAIL LINE IF REQUIRED\n         TM    DS1SCAL1,DS1CYL     IS SPACE ALLOCATION IN CYLINDERS ?\n         BNO   UP_NOCYL            NO - BYPASS UPDATE\n         MVC   DETAIL+65(29),=C'CYLINDERS CONVERTED TO TRACKS'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVC   DETAIL+95(16),=C' ..... TO .....)'\n         MVC   DETAIL+96(5),=X'2020202120'\n         MVC   DETAIL+105(5),=X'2020202120'\n         MVI   DS1SCAL1,DS1TRK     CHANGE SPACE TO TRACKS\n         SR    R10,R10             ZEROISE REGISTER\n         ICM   R10,B'0111',DS1SCAL3 PICK UP SECONDARY SPACE\n         CVD   R10,PACKED          CONVERT TO DECIMAL\n         ED    DETAIL+95(6),PACKED+5 CONVERT TO DISPLAY\n         MVI   DETAIL+95,C'('      OVERWRITE FILLER\n         MH    R10,=H'15'          CONVERT TO TRACKS (3380)\n         STCM  R10,B'0111',DS1SCAL3 PUT BACK SECONDARY SPACE\n         CVD   R10,PACKED          CONVERT TO DECIMAL\n         ED    DETAIL+104(6),PACKED+5 CONVERT TO DISPLAY\n         B     UP_TRACK            CONTINUE PROCESSING\n         SPACE 2\nUP_NOCYL MVC   DETAIL+65(26),=C'NOT ALLOCATED IN CYLINDERS'\n         SPACE 3\nUP_TRACK CLC   =H'-1',PF_BLOCK     CHANGE BLOCK SIZE ?\n         BE    UP_BLOCK            NO - BYPASS CHANGE\n         BAL   R4,PUT_LINE         WRITE DETAIL LINE IF REQUIRED\n         TM    DS1RECFM,DS1RECFB   IS THE DATA SET BLOCKED ?\n         BZ    UP_NOBLK            NO - BYPASS UPDATE\n         CLC   =H'0',DS1BLKL       IS CURRENT BLOCK SIZE ZERO ?\n         BE    UP_BLK0             YES - BYPASS UPDATE\n         TM    DS1RECFM,DS1RECFF+DS1RECFS IS RECFM FIXED AND STANDARD ?\n         BO    UP_FBS              YES - BYPASS UPDATE\n         CH    R9,PF_BLOCK         IS NEW BLOCK SIZE > TRACK LENGTH ?\n         BL    UP_BLKTR            YES - BYPASS UPDATE\n         MVC   DETAIL+65(36),=C'CHANGE BLOCKSIZE FROM ..... TO .....'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVC   DETAIL+87(5),=X'2020202120'\n         MVC   DETAIL+96(5),=X'2020202120'\n         LH    R10,DS1BLKL         PICK UP CURRENT BLOCK SIZE\n         CVD   R10,PACKED          CONVERT TO DECIMAL\n         ED    DETAIL+86(6),PACKED+5 CONVERT TO DISPLAY\n         LH    R5,PF_BLOCK         PICK UP NEW BLOCK SIZE\n         TM    DS1RECFM,DS1RECFF   IS THIS RECFM=F ?\n         BZ    UP_BLK_U            NO - USE THE NEW BLOCK SIZE\n         TM    DS1RECFM,DS1RECFU   IS THIS RECFM=U ?\n         BO    UP_BLK_U            YES - USE THE NEW BLOCK SIZE\n         LH    R10,DS1LRECL        PICK UP RECORD LENGTH\n         SR    R4,R4               ZEROISE EVEN REGISTER\n         DR    R4,R10              CALCULATE RECORDS PER BLOCK\n         MR    R4,R10              CALCULATE ADJUSTED BLOCK SIZE\nUP_BLK_U STH   R5,DS1BLKL          UPDATE BLOCK SIZE\n         CVD   R5,PACKED           CONVERT TO DECIMAL\n         ED    DETAIL+95(6),PACKED+5 CONVERT TO DISPLAY\n         NI    DS1DSIND,255-DS1IND20 SET BLOCK LENGTH NOT MULTIPLE OF 8\n         B     UP_BLOCK            CONTINUE PROCESSING\n         SPACE 2\nUP_NOBLK MVC   DETAIL+65(23),=C'DATA SET IS NOT BLOCKED'\n         B     UP_BLOCK            CHECK NEXT OPTION\n         SPACE 2\nUP_BLK0  MVC   DETAIL+65(18),=C'BLOCK SIZE IS ZERO'\n         B     UP_BLOCK            CHECK NEXT OPTION\n         SPACE 2\nUP_BLKTR MVC   DETAIL+65(36),=C'BLOCK SIZE GREATER THAN TRACK LENGTH'\n         B     UP_BLOCK            CHECK NEXT OPTION\n         SPACE 2\nUP_FBS   MVC   DETAIL+65(28),=C'RECORD FORMAT FIXED STANDARD'\n         SPACE 3\nUP_BLOCK TM    PF_FLAGS,PF_ADD2X+PF_SUB2X ANY CHANGE TO SECONDARIES ?\n         BZ    UP_NO_2X            NO - CHECK NEXT OPTION\n         BAL   R4,PUT_LINE         WRITE DETAIL LINE IF REQUIRED\n         TM    PF_FLAGS,PF_SUB2X   ARE WE REMOVING SECONDARIES ?\n         BO    UP_SUB2X            YES - CONTINUE\n         CLC   DS1SCAL3,=XL3'00'   ANY SECONDARY SPACE ?\n         BNE   UP_SCNDY            YES - BYPASS UPDATE\n         TM    DS1SCAL1,DS1CYL     SPACE IN CYLINDERS ?\n         BO    UP_CYLS             YES - ADD ONE\n         TM    DS1SCAL1,DS1TRK     SPACE IN TRACKS ?\n         BO    UP_TRKS             YES - ADD FIFTEEN\n         LH    R10,DS1BLKL         PICK UP BLOCKSIZE\n         AH    R10,=H'185'         ADD NON-KEYED RECORD OVERHEAD (3350)\n         DR    R8,R10              GET BLOCKS PER TRACK\n         MH    R9,=H'15'           SCALE UP TO 15 TRACKS\n         MVC   DETAIL+65(29),=C'A ..... BLOCK SECONDARY ADDED'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVC   DETAIL+67(5),=X'2020202120' SET UP EDIT MASK\n         CVD   R9,PACKED           CONVERT BLOCKS TO PACKED DECIMAL\n         ED    DETAIL+66(6),PACKED+5 PUT BLOCKS INTO PRINT LINE\n         STCM  R9,B'0111',DS1SCAL3 ZAP SECONDARY EXTENT (IN BLOCKS)\n         B     UP_NO_2X            CHECK NEXT OPTION\n         SPACE 1\nUP_TRKS  MVC   DETAIL+65(26),=C'A 15 TRACK SECONDARY ADDED'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVI   DS1SCAL3+2,15       ZAP SECONDARY EXTENT TO 15 TRACKS\n         B     UP_NO_2X            CHECK NEXT OPTION\n         SPACE 1\nUP_CYLS  MVC   DETAIL+65(28),=C'A 1 CYLINDER SECONDARY ADDED'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVI   DS1SCAL3+2,1        ZAP SECONDARY EXTENT TO 1 CYLINDER\n         B     UP_NO_2X            CHECK NEXT OPTION\n         SPACE 2\nUP_SCNDY MVC   DETAIL+65(29),=C'NON-ZERO SECONDARY ALLOCATION'\n         B     UP_NO_2X            CHECK NEXT OPTION\n         SPACE 3\nUP_SUB2X CLC   DS1SCAL3,=XL3'00'   ANY SECONDARY SPACE TO REMOVE ?\n         BE    UP_NO2ND            NO - BYPASS UPDATE\n         MVC   DETAIL+65(23),=C'SECONDARY SPACE REMOVED'\n         MVC   DETAIL+115(5),=C'RC=00'\n         MVC   DS1SCAL3,=XL3'00'   REMOVE SECONDARY SPACE\n         B     UP_NO_2X            CHECK NEXT OPTION\n         SPACE 2\nUP_NO2ND MVC   DETAIL+65(23),=C'NO SECONDARY ALLOCATION'\n         SPACE 3\nUP_NO_2X TM    PF_FLAGS,PF_RACOF   TURN OFF RACF BIT ?\n         BO    UP_RACOF            YES - CONTINUE\n         TM    PF_FLAGS,PF_RACON   TURN ON RACF BIT ?\n         BZ    UP_NORAC            NO - CHECK NEXT OPTION\n         BAL   R4,PUT_LINE         WRITE DETAIL LINE IF REQUIRED\n         OI    DS1DSIND,DS1IND40   TURN ON RACF BIT\n         MVC   DETAIL+65(22),=C'TURN ON RACF INDICATOR'\n         MVC   DETAIL+115(5),=C'RC=00'\n         B     UP_NORAC            CHECK NEXT OPTION\n         SPACE 1\nUP_RACOF BAL   R4,PUT_LINE         WRITE DETAIL LINE IF REQUIRED\n         NI    DS1DSIND,255-DS1IND40 TURN OFF RACF BIT\n         MVC   DETAIL+65(23),=C'TURN OFF RACF INDICATOR'\n         MVC   DETAIL+115(5),=C'RC=00'\n         SPACE 3\nUP_NORAC DS    0H                  INSERT NEXT CHECK HERE\n         SPACE 3\nREWRITE  NOP   CLOSEV              IF PARM=CHECK SPECIFIED\n         CLI   DETAIL+65,C' '      ANY MESSAGE ?\n         BE    RE_WRITE            NO - NO CHANGES MADE\n         OI    DS1DSIND,DS1DSCHA   DATA SET HAS BEEN CHANGED\nRE_WRITE LA    R2,VTOCDECB         POINT TO DECB\n         WRITE (2),SF,VTOC,VTOCWORK,'S',MF=E GET DSCB\n         CHECK VTOCDECB            WAIT FOR I/O TO COMPLETE\n         SPACE 1\nCLOSEV   CLOSE VTOC                END OF VOLUME\nERRORMSG PUT   SYSPRINT,DETAIL     WRITE A DETAIL LINE\n         B     LOOP                CHECK FOR ANOTHER DD STATEMENT\n         SPACE 3\nPUT_LINE CLI   DETAIL+65,C' '      IS THERE ANY MESSAGE TO WRITE OUT ?\n         BER   R4                  NO - RETURN TO CALLING ROUTINE\n         PUT   SYSPRINT,DETAIL     WRITE A DETAIL LINE\n         MVI   DETAIL,C' '         BLANK OUT THE -\n         MVC   DETAIL+1(132),DETAIL  DETAIL LINE\n         BR    R4                  RETURN TO CALLING ROUTINE\n         EJECT\nSYSDSN   MVC   DETAIL+65(15),=C'SYSTEM DATA SET'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     ERRORMSG            GET ANOTHER DD STATEMENT\n         SPACE 3\nNULLFILE MVC   DETAIL+65(10),=C'DUMMY FILE'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     ERRORMSG            GET ANOTHER DD STATEMENT\n         SPACE 3\nDS_ABS   MVC   DETAIL+65(23),=C'ABSOLUTE TRACK DATA SET'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 3\nDS_CONTG MVC   DETAIL+65(27),=C'CONTIGUOUS SPACE ALLOCATION'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 3\nDS_UNMOV MVC   DETAIL+65(21),=C'DATA SET IS UNMOVABLE'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 3\nEOV      MVC   DETAIL+65(26),=C'DATA SET NOT FOUND IN VTOC'\n         MVC   DETAIL+115(5),=C'RC=04'\n         OI    RETCODE+3,4         SET RETURN CODE\n         B     CLOSEV              GO AND CLOSE THE VTOC\n         SPACE 3\n         USING IECSDSL4-44,R11     MAP THE FORMAT 4\nFORMAT4  SRDL  R8,63               ZEROISE A PAIR OF REGISTERS\n         ICM   R9,B'0011',DS4DEVTK PICK UP TRACK LENGTH\n         B     GETDSCB             GET NEXT DSCB\n         EJECT\nEOJ      CLOSE SYSPRINT            END OF ALL VOLUMES\n         SPACE 3\nRETURN   L     R15,RETCODE         PICK UP RETURN CODE\n         L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         EJECT\nHEADING  DC    CL133'-DDNAME    VOLSER  DSNAME                         X\n                              MESSAGES'\nHEADINGU DC    CL133'+________  ______  _______________________________X\n               _____________  _________________________________________X\n               ___________________________'            MESSAGE=68C\nDETAIL   DC    CL133'1                                                 X\n                                                                       X\n                                  LEXTENTS'\n         SPACE 1\nPF_FLAGS DC    AL1(PF_POORG)       A BYTE OF FLAGS\nPF_UPDAT EQU   X'80'               TYPERUN=UPDATE\nPF_ADD2X EQU   X'40'               ADD SECOND EXTENTS\nPF_SUB2X EQU   X'20'               REMOVE SECOND EXTENTS\nPF_TRACK EQU   X'10'               CHANGE CYL TO TRK\nPF_POORG EQU   X'08'               UPDATE PO DATA SETS        *DEFAULT*\nPF_PSORG EQU   X'04'               UPDATE PS DATA SETS\nPF_RACON EQU   X'02'               TURN ON RACF BIT\nPF_RACOF EQU   X'01'               TURN OFF RACF BIT\nPF_BLOCK DC    H'-1'               NEW BLOCK SIZE\nPF_DDNAM DC    C' '                DD-NAME TO UPDATE\n         DC    CL3' '              FILLER\n         SPACE 1\nRETCODE  DC    F'0'                RETURN CODE\nPACKED   DS    D                   WORK AREA\n         SPACE 1\nSVC99RBP DC    A(SVC99RB+X'80000000') REQUEST BLOCK POINTER\nSVC99RB  DS    0F                  REQUEST BLOCK\n         DC    AL1(S99RBEND-S99RB) LENGTH OF REQUEST BLOCK\n         DC    AL1(S99VRBIN)       VERB - INFORMATION RETRIEVAL\n         DC    AL2(0)              FLAGS1\n         DC    AL2(0)              ERROR CODE\n         DC    AL2(0)              INFO CODE\n         DC    A(SVC99TXP)         TEXT POINTERS ADDRESS\n         DC    A(0)                RESERVED\n         DC    A(0)                FLAGS2\nSVC99TXP DC    A(SVC99REL)         TEXT UNIT FOR RELATIVE REQUEST\n         DC    A(SVC99RTD)         TEXT UNIT TO RETURN DDNAME\n         DC    A(SVC99LST+X'80000000') TEXT UNIT FOR LAST ENTRY IND.\nSVC99REL DC    AL2(DINRELNO)       RELATIVE REQUEST NUMBER\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(2)              LENGTH OF PARAMETER\nDDNUMBER DC    H'0'                RELATIVE DDNAME NUMBER\nSVC99RTD DC    AL2(DINRTDDN)       RETURN DDNAME\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(8)              LENGTH OF DDNAME\nDDNAME   DC    CL8' '              RETURNED DDNAME\nSVC99LST DC    AL2(DINRTLST)       CHECK FOR LAST ENTRY\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(1)              LENGTH OF PARAMETER\nLASTDDN  DC    X'00'               LAST DDNAME INDICATOR\n         SPACE 2\nDSNAME   DC    CL44' '             DATA SET NAME\n         SPACE 1\nVTOCWORK DC    CL140' '            WORK AREA FOR DSCB'S\n         SPACE 1\nVTOC     DCB   DSORG=PS,RECFM=U,BLKSIZE=96,DDNAME=DISKXXXX,KEYLEN=44,  *\n               MACRF=(R,W),EODAD=EOV,EXLST=VTOCEXIT\n         SPACE 1\nVTOCEXIT DS    0F                  VTOC DCB EXIT LIST\n         DC    X'87'               JFCB EXIT + LAST\n         DC    AL3(VTOCJFCB)       ADDRESS OF JFCB\nVTOCJFCB DC    XL176'00'           JFCB\n         SPACE 1\n         READ  VTOCDECB,SF,MF=L    CREATE DECB\n         SPACE 1\nSYSPRINT DCB   DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=3990,              *\n               DDNAME=SYSPRINT,MACRF=PM\n         SPACE 3\n         LTORG\n         YREGS\n         SPACE 1\n         DSECT\n         IECSDSL1 (1,4)            MAP FORMATS 1 & 4 DSCB\n         DSECT\n         IEFJFCBN ,                MAP JFCB\n         IEFZB4D0 ,                MAP SVC 99 CONTROL BLOCKS\n         IEFZB4D2 ,                COPY SVC 99 TEXT UNIT MNEMONICS\n         DCBD  DSORG=PS,DEVD=DA    MAP DCB\n         END   LEXTENTS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01FREE": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x06_\\x00\\x90\\x06_\\x10Y\\x001\\x001\\x00\\x00\\xd6\\xc4\\xf1\\xf4\\xf2\\xf7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-06T00:00:00", "modifydate": "1990-03-06T10:59:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "OD1427"}, "text": "LFREESPC CSECT\n         SAVE  (14,12),,'LFREESPC &SYSDATE &SYSTIME'\n         LR    R2,R15\n         USING LFREESPC,R2\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         OPEN  (SYSPRINT,OUTPUT)\n         SPACE 3\nGETUCB   L     R15,16              R15 -> COMMS VECTOR TABLE\n         L     R15,1076(R15)       R15 -> UCB SCAN ROUTINE\n         LA    R1,UCBPARM          R1 -> PARM LIST FOR UCBSCAN\n         BASR  R14,R15             EXECUTE UCBSCAN ROUTINE\n         LTR   R15,R15             IS THERE A UCB THERE ?\n         BNZ   ENDUP               NO - TERMINATE\n         L     R3,UCBADDR          YES - R3 -> CURRENT UCB\n         TM    3(R3),X'80'         IS THE DEVICE ONLINE ?\n         BZ    GETUCB              NO - GET NEXT UCB\n         MVC   PCUU,13(R3)         YES - ESTABLISH DASD CUU\n         MVC   PVOLSER,28(R3)      ESTABLISH DASD VOLSER\n         LR    R0,R3               R0 -> CURRENT UCB\n         LA    R1,RESULT           R1 -> SVC 78 RESULT FIELD\n         SVC   78                  CALL SVC 78\n         PUT   SYSPRINT,PCUU\n         B     GETUCB              GET NEXT UCB\n         SPACE 3\nENDUP    CLOSE (SYSPRINT)\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         EJECT\n         PRINT NOGEN\nSAVE     DC    18F'0'\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FB,LRECL=41,BLKSIZE=2870\nPCUU     DS    CL3\n         DC    C' '\nPVOLSER  DS    CL6\n         DC    C' '\nRESULT   DS    CL30\nUCBPARM  DC    A(UCBWORK)\n         DC    A(UCBTYPE)\n         DC    X'80'\n         DC    AL3(UCBADDR)\nUCBWORK  DC    XL100'00'\nUCBTYPE  DC    X'20'\nUCBADDR  DS    F\nUCBSCAN  DS    F\n         LTORG\n         YREGS\n         END   LFREESPC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01GETAC": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90!O\\x00\\x90!O\\x16\\x14\\x00>\\x00>\\x00\\x00\\xd6\\xc4\\xf1\\xf4\\xf2\\xf7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-08-02T00:00:00", "modifydate": "1990-08-02T16:14:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "OD1427"}, "text": "LGETACCT TITLE '              SET CLIST VARIABLE EQUAL TO ACCOUNT CODE'\n***********************************************************************\n*                                                                     *\n*        THIS TSO COMMAND PROCESSOR SETS TSO CLIST VARIABLE           *\n*        \"LACCTVAR\" EQUAL TO THE USER'S FIRST (OR ONLY) ACCOUNTING    *\n*        FIELD.                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLGETACCT CSECT\n         SAVE  (14,12),,'LGETACCT &SYSTIME &SYSDATE'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING LGETACCT,R12        ESTABLISH ADDRESSABILITY\n         LA    R11,SAVEAREA        POINT TO REGISTER SAVE AREA\n         ST    R13,4(,R11)         SAVE PREVIOUS SAVE AREA\n         ST    R11,8(,R13)         SAVE CURRENT SAVE AREA\n         LR    R13,R11             POINT TO SAVE AREA\n         SPACE 3\n         LR    R10,R1              SAVE PARAMETER REGISTER\n         EXTRACT FRS,FIELDS=(FRS)  GET POINTER TO FRS/TCB\n         L     R1,FRS              POINT TO FRS\n         LA    R1,32(,R1)          POINT TO TCB\n         USING TCB,R1\n         L     R1,TCBJSCB          POINT TO JSCB\n         USING IEZJSCB,R1\n         L     R1,JSCBJCT          POINT TO JCT\n         LA    R1,16(,R1)          WHY ???????????????????\n         USING INJMJCT,R1\n         ICM   R1,B'0111',JCTACTAD POINT TO ACT\n         LA    R1,16(,R1)          WHY ???????????????????\n         USING IEFAACTB,R1\n         MVC   V_VALL+3(1),ACTACCNT LENGTH OF DATA\n         MVC   V_VAL,ACTACCNT+1    ACCOUNTING DATA\n         L     R1,CVTPTR           POINT TO CVT\n         USING CVT,R1\n         L     R1,CVTTVT           POINT TO TSVT\n         USING TSVT,R1\n         L     R15,TSVTVACC        ADDRESS VARIABLE ACCESS SERVICE\n         LR    R1,R10              RESTORE PARAMETER REGISTER\n         CALL  (15),(V_CODE,V_NAMEP,V_NAMEL,V_VALP,V_VALL,V_TOKEN),VL\n         SPACE 3\n         L     R13,4(,R13)         POINT TO HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nFRS      DS    A\nV_CODE   DC    A(TSVEUPDT)         ENTRY CODE FOR SETTING VALUES\nV_NAMEP  DC    A(V_NAME)           POINTER TO VARIABLE NAME\nV_NAME   DC    CL8'LACCTVAR'       VARIABLE NAME\nV_NAMEL  DC    A(8)                VARIABLE NAME LENGTH\nV_VALP   DC    A(V_VAL)            POINTER TO VALUE\nV_VAL    DC    CL15' '             VALUE\nV_VALL   DC    F'0'                VALUE LENGTH\nV_TOKEN  DC    F'0'                TOKEN\n         PRINT NOGEN\n         YREGS\n         IKJTCB\n         IEZJSCB\n         IEFAJCTB\n         CVT   DSECT=YES\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01HSMNC": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00K\\x00K\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "UKGUIDE"}, "text": "LHSMNCAT TITLE '                  FIND UNCATALOGUED MIGRATED DATA SETS'\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE :-                                                 *\n*                                                                     *\n*      R2   -  VSAM RECORD POINTER                                    *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLHSMNCAT CSECT\n         SAVE  (14,12),,'LHSMNCAT &SYSDATE &SYSTIME'\n         LR    R12,R15             ESTABLISH -\n         USING LHSMNCAT,R12        BASE REGISTER\n         LA    R10,SAVEAREA        ADDRESS REGISTER SAVE AREA\n         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R10             ADDRESS SAVE AREA\n         SPACE 3\n         OPEN  (MCDS,,PRINT,OUTPUT,NOMIGRAT,OUTPUT) OPEN FILES\n         TM    NOMIGRAT+DCBOFLGS-IHADCB,DCBOFOPN  OPEN SUCCESSFUL ?\n         BO    GETMCDS             YES - CONTINUE\n         OI    ZAP+1,X'F0'         BYPASS VOLUME CHECKING\n         OI    EOF+1,X'F0'         BYPASS CLOSE STATEMENT\n         SPACE 3\nGETMCDS  GET   RPL=RPL             GET A RECORD\n         L     R2,POINTER          ADDRESS RETRIEVED RECORD\n         CLI   46(R2),0            CHECK FOR TYPE D RECORD\n         BNE   GETMCDS             IGNORE ALL OTHER RECORD TYPES\n         TM    70(R2),B'10000000'  CHECK FOR MIGRATION COPY\n         BZ    GETMCDS             NO - IGNORE\n         TM    70(R2),B'00010010'  CHECK FOR DELETED/RECALLED\n         BNZ   GETMCDS             YES - IGNORE\n         MVC   DSNAME,0(R2)        COPY DSNAME TO WORK AREA\n         LOCATE CAMLST             IS THE DATA SET CATALOGUED ?\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   PUTPRINT            DATA SET NOT CATALOGUED\nZAP      NOP   GETMCDS             IF NOMIGRAT STATEMENT MISSING\n         CLC   =C'MIGRAT',LOCAREA+6 IS THE VOLUME=MIGRAT\n         BE    GETMCDS             YES - GET ANOTHER\n         MVC   44(6,R2),LOCAREA+6  MOVE VOLSER AFTER DSNAME\n         PUT   NOMIGRAT,(2)        PRINT DATA SET NAME AND VOLUME\n         B     GETMCDS             GET ANOTHER RECORD\n         SPACE 3\nPUTPRINT PUT   PRINT,(2)           PRINT DATA SET NAME\n         B     GETMCDS             GET ANOTHER RECORD\n         EJECT\nEOF      NOP   EOF2                IF NOMIGRAT STATEMENT MISSING\n         CLOSE (NOMIGRAT)          END OF FILE\nEOF2     CLOSE (MCDS,,PRINT)       END OF FILE\n         SPACE 3\nRETURN   L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nECB      DC    F'0'                VSAM ECB\nPOINTER  DC    F'0'                ADDRESS OF RETRIEVED RECORD\nCAMLST   CAMLST NAME,DSNAME,,LOCAREA\nDSNAME   DC    CL44' '\nLOCAREA  DS    0D\n         DS    265C\n         PRINT NOGEN\nPRINT    DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    X\n               RECFM=FB,LRECL=44,BLKSIZE=3124\nNOMIGRAT DCB   DDNAME=NOMIGRAT,MACRF=(PM),DSORG=PS,                    X\n               RECFM=FB,LRECL=50,BLKSIZE=3150\nMCDS     ACB   AM=VSAM,DDNAME=MCDS,MACRF=(KEY,SEQ,IN),EXLST=EXLST\nEXLST    EXLST AM=VSAM,EODAD=EOF\nRPL      RPL   ACB=MCDS,AM=VSAM,AREA=POINTER,AREALEN=4,ECB=ECB,        X\n               OPTCD=(KEY,SEQ,FWD,SYN,LOC)\n         LTORG\n         YREGS\n         DCBD  DSORG=PS\n         END   LHSMNCAT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01INMRZ": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x83\\x00\\x83\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "UKGUIDE"}, "text": "INMRZ21R TITLE 'TSO/E RELEASE 4 - RECEIVE C.P. LOG ALLOCATION EXIT'\nINMRZ21R CSECT\nINMRZ21R AMODE 31                  SET ADDRESSING MODE\nINMRZ21R RMODE ANY                 SET RESIDENCY MODE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n* MODULE NAME - INMRZ21R                                              *\n*                                                                     *\n* CSECT  NAME - INMRZ21R                                              *\n*                                                                     *\n* DESCRIPTIVE NAME - TSO/E - RECEIVE C.P. LOG ALLOCATION EXIT         *\n*                                                                     *\n* FUNCTION -                                                          *\n*                                                                     *\n*  THIS ROUTINE IS INVOKED BEFORE THE RECEIVE COMMAND PROCESSOR       *\n*  ALLOCATES ITS LOG DATA SET.                                        *\n*  IT CHECKS TO SEE WHETHER THE LOG DATA SET HAS BEEN MIGRATED, AND   *\n*  IF IT HAS IT SUPRESSES LOGGING.                                    *\n*                                                                     *\n* ERROR MESSAGES - LINMXZ21E                                          *\n*                                                                     *\n* ABEND CODES - NONE                                                  *\n*                                                                     *\n* ERROR CONDITIONS - DATA SET MIGRATED                                *\n*                                                                     *\n* LINKAGES: BRANCHED TO VIA BALR OR LINKED TO                         *\n*                                                                     *\n* MODULE(S) CALLED: NONE                                              *\n*                                                                     *\n* ENTRY POINT - INMRZ21R                                              *\n*                                                                     *\n* EXIT CONDITIONS                                                     *\n*                                                                     *\n*        EXIT IS ACCOMPLISHED VIA BSM                                 *\n*                                                                     *\n* REFERENCES                                                          *\n*                                                                     *\n*        ROUTINES   - NONE                                            *\n*                                                                     *\n*        DATA AREAS - NONE                                            *\n*                                                                     *\n*        TABLES     - NONE                                            *\n*                                                                     *\n* GLOBALS:                                                            *\n*                                                                     *\n*       NONE                                                          *\n*                                                                     *\n* MACRO USAGE: SAVE,                                                  *\n*              GETMAIN,                                               *\n*              FREEMAIN,                                              *\n*              LOCATE,                                                *\n*              CAMLST,                                                *\n*              YREGS                                                  *\n*                                                                     *\n* MODULE ATTRIBUTES - REENTRANT,                                      *\n*                     REFRESHABLE,                                    *\n*                     REUSEABLE,                                      *\n*                     AMODE(ANY),                                     *\n*                     RMODE(31),                                      *\n*                     MAY BE LINKED AC=1                              *\n*                                                                     *\n* INPUT - ON ENTRY TO IKJEXIT R1 MUST POINT TO A VARIABLE LENGTH      *\n*         PARAMETER LIST THAT DESCRIBES A PARAMETER_ENTRY LIST.       *\n*                                                                     *\n*         THE HIGH ORDER BIT IN THE LAST PARAMETER                    *\n*         OF THE PARAMETER LIST MUST BE ON                            *\n*         X'80000000' TO INDICATE THE END OF THE LIST.                *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n*      INTRODUCED IN TSO/E RELEASE 4 HTE1402                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         SAVE  (14,12),,'INMRZ21R &SYSDATE &SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING INMRZ21R,R12        ESTABLISH BASE REGISTER\n         LR    R2,R1               SAVE POINTER TO PARAMETER LIST\n         GETMAIN RU,LV=WORKLEN,LOC=(BELOW,ANY)\n         ST    R13,4(,R1)          SAVE PREVIOUS SAVE AREA\n         ST    R1,8(,R13)          SAVE CURRENT SAVE AREA\n         LR    R13,R1              LOAD ADDRESS OF SAVE AREA\n         USING SAVEAREA,R13        ADDRESS SAVE AREA\n         EJECT\n         LR    R1,R2               ADDRESS OF PARAMETER LIST\n         L     R2,40(R1)           ADDRESS OF ACTION FLAGS\n         L     R3,44(R1)           ADDRESS OF MESSAGE TEXT\n         L     R4,52(R1)           ADDRESS OF DATA SET NAME\n         SR    R5,R5               SET DEFAULT RETURN CODE\n         MVC   LOGDSET(CAMLSTL),CAMLST COPY CAMLST TO WORK AREA\n         MVC   DSNAME,8(R4)        COPY DSNAME TO WORK AREA\n         WTO   'INMRZ21R ENTERED',ROUTCDE=11\n         LA    R15,DSNAME          ADDRESS OF DATA SET NAME\n         ST    R15,LOGDSET+4       STORE IN CAMLST\n         LA    R15,LOCAREA         ADDRESS OF RETURNED AREA\n         ST    R15,LOGDSET+12      STORE IN CAMLST\n         LOCATE LOGDSET            FIND OUT WHETHER THE LOG IS MIGRATED\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   RETURN              NEW DATA SET - CONTINUE\n         CLC   LOCAREA+2+4(6),=C'MIGRAT' IS IT MIGRATED ?\n         BNE   RETURN              NO - CONTINUE\n         LA    R5,4                SET RETURN CODE\n         OI    8(R2),B'11000000'   ISSUE MESSAGE INMX151I\n         OI    3(R3),X'01'         INDICATE THERE IS A MESSAGE\n         MVC   4(4,R3),=A(L'MESSAGE+44) MOVE IN MESSAGE TEXT LENGTH\n         MVC   8(L'MESSAGE,R3),MESSAGE\n         MVC   L'MESSAGE+8(44,R3),DSNAME\n         EJECT\nRETURN   LR    R1,R13              ADDRESS SAVE AREA\n         L     R13,4(,R13)         ADDRESS PREVIOUS SAVE AREA\n         FREEMAIN RU,LV=WORKLEN,A=(1)\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         LR    R15,R5              PICK UP RETURN CODE\n         LM    R0,R12,20(R13)      RESTORE REGISTERS\n         BSM   0,14                RETURN TO CALLER\n         EJECT\nCAMLST   CAMLST NAME,0,,0\nCAMLSTL  EQU   *-CAMLST\nMESSAGE  DC    C'IDTF LOG DATA SET IS MIGRATED; LOGGING SUSPENDED.  DSNX\n               AME='\n         LTORG\nSAVEAREA DSECT\n         DS    18F                 REGISTER SAVE AREA\nLOGDSET  CAMLST NAME,DSNAME,,LOCAREA\nLOCAREA  DS    0D\n         DS    265C\nDSNAME   DS    CL44\nWORKLEN  EQU   *-SAVEAREA\n         YREGS\n         END   INMRZ21R\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01IPLVO": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x9a\\x00\\x9a\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 154, "newlines": 154, "modlines": 0, "user": "UKGUIDE"}, "text": "IPLVOL   TITLE 'IPLVOL TSO COMMAND PROCESSOR'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   IPLVOL -- MVS/SP3 VERSION                                         *\n*                                                                     *\n*   REGISTER USAGE                                                    *\n*   ==============                                                    *\n*                                                                     *\n*      R0   -  WORK                                                   *\n*      R1   -  WORK                                                   *\n*      R2   -  WORK                                                   *\n*      R4   -  POINTER TO THE I/O PARAMETER LIST (IOPL)               *\n*      R8   -  BASE REGISTER WHILST PROCESSING ATTN INTERRUPTS        *\n*      R10  -  RETURN ADDRESS USED BY BAL                             *\n*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -  WORK                                                   *\n*      R15  -  WORK                                                   *\n*                                                                     *\n*   PARAMETERS                                                        *\n*   ==========                                                        *\n*                                                                     *\n*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER SAVE AND EQUATES ETC.....\n*                                                                     *\n***********************************************************************\n         SPACE 2\nIPLVOL   CSECT\n*\nCVTADDR  EQU   16\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         SAVE  (14,12),,IPLVOL.&SYSTIME..&SYSDATE\n         BALR  R12,0                   * ESTABLISH BASE\n         USING *,R12,R11               * TELL ASSEMBLER\n         LA    R11,*+4095              * ESTABLISH SECOND BASE\n         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION\n         LR    R2,R1                   * SAVE POINTER TO CPPL\n         USING CPPL,R2                 * TELL ASSEMBLER ABOUT CPPL\n         L     R4,CPPLUPT              * POINT TO THE UPT\n         L     R5,CPPLECT              * POINT TO THE ECT\n         LA    R1,SAVEAREA             * R1 -> MY SAVE AREA\n         ST    R1,8(R13)               * CHAIN BACK\n         ST    R13,4(R1)               * CHAIN FORWARD\n         LR    R13,R1                  * ESTABLISH SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         L     R6,CVTADDR\n         USING CVT,R6\n         L     R7,CVTSYSAD\n         USING UCB,R7\n         MVC   PUTLIPLV,UCBVOLI\n*\n*\n         EJECT\nENDGOOD  EQU   *\n         PUTLINE PARM=PUTLLIST,        * PARM IS THE LIST FORMAT       C\n               UPT=(R4),               * POINTER TO UPT                C\n               ECT=(R5),               * POINTER TO ECT                C\n               ECB=PUTLECB,            * POINTER TO ECB                C\n               OUTPUT=(PUTLM1,TERM,SINGLE,INFOR), * PUTLINE OPTIONS    C\n               MF=(E,PUTLIOPL)         * LET PUTLINE INIT THE IOPL\n         L     R13,4(R13)              * RESTORE HSA\n         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATA AREAS FOR VARIABLE ACCESS SERVICE (IKJCT441)            *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*        PUTLINE MESSAGE #1 TO GO TO THE TERMINAL                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLM1   DC    F'1'                    * ONLY ONE TEXT SEGMENT\n         DC    A(PUTLM1T)              * ADDRESS OF ONLY TEXT SEGMENT\n*\nPUTLM1T  DC    AL2(PUTLM1L-*)          * LENGTH OF TEXT SEGMENT\n         DC    H'0'                    * OFFSET OF SEGMENT - ALWAYS 0\n         DC    C' THE CURRENT IPL VOLUME FOR THIS SYSTEM IS: '\nPUTLIPLV DC    C'      '            * TEXT , PART #2 (RACF GROUP)\nPUTLM1L  EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        I/O PARAMETER LIST AREA                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLIOPL DC    4F'0'                   * AREA FOR THE PUTLINE IOPL\nPUTLECB  DC    F'0'                    * AREA FOR THE PUTLINE ECB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAVE AREA                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSAVEAREA DC    18F'0'                  * SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUTLINE LIST FORMAT                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLLIST PUTLINE MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DSECTS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\n         CVT   DSECT=YES               * DSECT USED TO MAP CVT\n*\n         IKJCPPL                       * DSECT USED TO MAP CPPL\n*\n*\n*\n*\nUCB      DSECT\n         IEFUCBOB                      * DSECT USED TO MAP THE UCB\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01LIST": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": "***********************************************************************\n*                                                                     *\n*        LEB REPLACEMENT FOR IBM TSO COMMAND PRESESSORS               *\n*                                                                     *\n*        LIST, ASM, CALC, COBOL, FORT, COPY AND MERGE                 *\n*                                                                     *\n***********************************************************************\nLIST     AMODE 31\nLIST     RMODE ANY\nLIST     CSECT\n         B     START-*(,15)\n         DC    AL1(START-*-1)\n         DC    C'LIST/ASM/CALC/COBOL/FORT/COPY/MERGE'\nSTART    LA    15,20               SET RETURN CODE\n         BR    14                  RETURN TO CALLER\n         END   LIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01LOGOF": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "UKGUIDE"}, "text": "CONTROL  NOFLUSH\n     ISPEXEC  CONTROL ERRORS   RETURN\n     ISPEXEC  CONTROL SPLIT  DISABLE\n     IF &LASTCC \u00ac= 0 THEN EXIT        /* SPLIT SCREEN MODE IN EFFECT */\n     Z\n     ISPEXEC  CONTROL NONDISPL END\n     ISPEXEC  CONTROL DISPLAY  LOCK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01MOVIE": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x004\\x004\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "UKGUIDE"}, "text": "LEBMOVIE CSECT\n         SAVE  (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REG\n         USING LEBMOVIE,R12        ESTABLISH ADDRESSABILITY\n         BAL   R1,START            GET WORKING STORAGE\n         DC    18F'0'\n         SPACE 1\nSTART    ST    R1,8(R13)           CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R1)           CHAIN SAVE AREAS BACKWARD\n         LR    R13,R1              ADDRESS SAVE AREA\n         LOAD  EP=ISPLINK          LOAD ADDRESS OF INTERFACE ROUTINE\n         ST    R0,ISPLINK          STORE ADDRESS OF INTERFACE ROUTINE\n         L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(CONTROL,ERRORS,RETURN),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(DISPLAY,PANELID),VL,MF=(E,CALLLIST)\n         MVC   PANELID,=C'MOVIE000' INITIALISE PANEL NAME\n         SPACE 1\nLOOP     L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(CONTROL,DISPLAY,LOCK),VL,MF=(E,CALLLIST)\n         PACK  P3,PANELID+5(3)     DISPLAY TO PACKED DECIMAL\n         AP    P3,=P'1'            ADD 1 TO PANEL NUMBER\n         UNPK  PANELID+5(3),P3     PACKED TO DISPLAY DECIMAL\n         OI    PANELID+7,X'F0'     REMOVE SIGN\n         L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(DISPLAY,PANELID),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    LOOP                GO AND DISPLAY NEXT PANEL\n         PACK  P3,PANELID+5(3)     DISPLAY TO PACKED DECIMAL\n         SP    P3,=P'1'            ADD 1 TO PANEL NUMBER\n         UNPK  PANELID+5(3),P3     PACKED TO DISPLAY DECIMAL\n         OI    PANELID+7,X'F0'     REMOVE SIGN\n         L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(DISPLAY,PANELID),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         ISPF SERVICE ROUTINE\n         CALL  (15),(DISPLAY,PANELID),VL,MF=(E,CALLLIST)\n         SPACE 3\nGOBACK   L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO WHENCE WE CAME\n         SPACE 3\nCALLLIST CALL  ,(,,,),VL,MF=L\nISPLINK  DS    F\nCONTROL  DC    CL8'CONTROL'\nDISPLAY  DC    CL8'DISPLAY'\nERRORS   DC    CL8'ERRORS'\nLOCK     DC    CL8'LOCK'\nRETURN   DC    CL8'RETURN'\nPANELID  DC    CL8'ISR@PRIM'\nP3       DC    PL3'0'\n         YREGS\n         LTORG\n         END   LEBMOVIE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PAGEL": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00e\\x00e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "UKGUIDE"}, "text": "**********************************************************************\n* OD00.LEB.SOURCE(PAGELST)                                           *\n*                                                                    *\n* THIS IS IS THE SOURCE CODE FOR A PROGRAM WHICH LISTS ON A WTO      *\n* TO SYSLOG THE ACTIVE SWAP AND PAGE DATASETS.                       *\n*                                                                    *\n* THE ASSEMBLED AND LINK-EDITED MODULE IS IN                         *\n* SYS4.LEB.LINKLIB(PAGELST)                                          *\n*                                                                    *\n* T J STAMMERS  17/07/85                                             *\n* S MOSS        17/03/89                                             *\n*               AMNEDED TO CONFIRM WITH MVS 2.2.0 CHANGES            *\n**********************************************************************\n*\n*HOUSEKEEPING OPERATIONS\n*================================================\nPAGELST  CSECT\n*\n         SAVE  (14,12)       * SAVE SYSTEM REGISTER CONTENTS\n*\n         BALR  12,0          * ADDRESSABILITY ESTABLISHED,USING\n         USING *,12          * REGISTER 12 TO HOLD BASE ADDRESS\n*\n         ST    13,SAVE+4     * ESTABLISH CHAIN FROM REGISTER 13 TO\n         LA    R13,SAVE      * OS STORAGE OF SYSTEM REGISTER CONTENTS\n*\nPAGELST  RMODE ANY           * SET RESIDENCY MODE TO 'ANY'\n*                            * ADRESS MODE WILL NOW DEFAULT AS\n*                            * APPROPIATE\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n*\n*PROCEDURE\n*=========================================\n*\n*CREATE ACTIVE SWAP DATASET LIST\n*--------------------------------------\nLIST1    WTO   ' ****   ACTIVE SWAP DATASET LIST   **** ',ROUTCDE=1\n*\n         L     R2,16             * POINTER TO CVT\n         L     R3,X'2C0'(R2)     * POINTER TO CVT ASMVT\n         L     R4,X'4'(R3)       * POINTER TO ASMSART\n         BAL   R9,PRINTRT        * PERFORM PRINT ROUTINE\n*\n         LTR   R15,R15           * TEST - WERE ANY DATASETS LISTED ?    NTRT ?\n         BZ    LIST2             * IF YES, SKIP NEXT WTO, GO TO LIST 2\n*\n         WTO   ' **** NO ACTIVE SWAP DATASET FOUND ***** ',ROUTCDE=1\n*\n* CREATE ACTIVE PAGE DATASET LIST\n*-------------------------------------\nLIST2    WTO   ' ****   ACTIVE PAGE DATASET LIST   ***** ',ROUTCDE=1\n*\n         L     R4,X'8'(R3)       * POINTER TO ASMPART\n         BAL   R9,PRINTRT        * PERFORM PRINT ROUTINE\n         BR    R14               * EXIT FROM PROGRAM\n*\n* PRINT ROUTINE\n*-------------------------------------\nPRINTRT  LA    R15,4             * SET ACTIVE DATASET FLAG TO 'NONE'\n         L     R5,X'18'(R4)      * POINTER TO DSNAME LIST\n*                                * (PARTDSNL/SARTDSNL)\n         LH    R6,X'8'(R4)       * POINTER TO COUNT OF ACTIVE DATASETS\n*                                * (PARTEUSE/SARTEUSE)\n*\n         LTR   R6,R6             * TEST - ARE THERE ANY ACTIVE DSETS ?\n         BZR   R9                * IF NONE, RETURN FROM THIS ROUTINE\n*\n         LA    R7,44             * ADD 44 FOR NEXT DSET NAME\nLOOP     CLC   BLANKS,0(R5)      * TEST - DOES R5 POINT TO 44 BLANKS ?\n         BE    BRANCH            * IF YES, GO TO BRANCH\n*\n         MVC   DSNAME+2(44),0(R5)  * MOVE DSNAME TO PRINT AREA (1)\nPRNAME   MVC   DSLIST+4(30),DSNAME * MOVE DSNAME TO PRINT AREA (2)\n         WTO   MF=(E,DSLIST)       * WRITE THE DSNAME\n*\nBRANCH   LA    R5,0(R7,R5)        * ADD 44 FOR THE NEXT DSNAME\n         BCT   R6,LOOP            * GO TO LOOP, UNTIL ALL DS PRINTED\n         BR    R9                 * RETURN\n*\n*STORAGE\n*--------------------------------\nDSLIST   WTO   '                                ',ROUTCDE=1,MF=L\nDSNAME   DC    CL80' '\nBLANKS   DC    CL44' '\nSAVE     DS    18F\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PC100": {"ttr": 1812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "UKGUIDE"}, "text": "ALLOC DD(MMPFILE) DS('PSYS.LMMP.MASTFILE') SHR REUSE\nISPEXEC SELECT PGM(LMMP0100)\nFREE DD(MMPFILE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PH010": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00$\\x00$\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                    --------------------------------------\n                     |     MANUAL MANAGEMENT FACILITY     |\n                     --------------------------------------\n+\n   The Manual Management Facility allows authorised users to Add, Update\n   and Delete manuals on the LEB's Manual data base, and to update the\n   list of copies held.\n\n   It also allows users to Browse the list of manuals or to find a\n   particular manual by subject or location.\n\n   The following topics are presented in sequence, or may be selected by\n   number:\n\n  %1+ ADD                Add details of a manual\n  %2+ UPDATE             Change details of a manual\n  %3+ DELETE             Remove details of a manual\n  %4+ BROWSE             Display a list of all manuals\n  %5+ SEARCH             Display a list of selected manuals\n  %6+ LOCATE             Display a list of copies of manuals\n)PROC\n     &ZSEL = TRANS( &ZCMD\n                1,LMMPH020\n                2,LMMPH120\n                3,LMMPH060\n                4,LMMPH040\n                5,LMMPH080\n                6,LMMPH090\n                *,'?'\n                )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH020": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                           ------------------------\n                            |     ADD A MANUAL     |\n                            ------------------------\n+\n   The%ADD+panel allows authorised users to add details of a new manual\n   to the LEB's Manual data base.  The following information is accepted:\n\n   PRODUCT/CATEGORY        8 characters, required\n   CURRENCY                1 character\n   MANUAL NUMBER           9-12 characters in the format XXXX-XXXX-XX, required\n   PRODUCT NUMBER          8 characters in the format XXXX-XXX, required\n   NUMBER OF COPIES        1-50, required\n   TNL LEVEL               9 characters in the format XXXX-XXXX\n   VERSION                 6 characters\n   DESCRIPTION             70 characters, required\n\n                            (continued on next page)\n)PROC\n   &ZCONT = LMMPH030\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH030": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                   ----------------------------------------\n                    |     ADD DISTRIBUTION INFORMATION     |\n                    ----------------------------------------\n+\n   After a new manual ha been added to the LEB's Manual data base, details\n   of the copies of it can be entered into the system.  The following\n   information is accepted:\n\n   ROW NUMBER              Used internally by the program\n   GROUP                   12 characters, required\n   LOCATION                12 characters, required\n   CONTACT                 12 characters, required\n   STATUS                  1 character\n)PROC\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH040": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                        ------------------------------\n                         |     BROWSE MANUAL LIST     |\n                         ------------------------------\n+\n   The%BROWSE+option displays a list of all manuals on the LEB's Manual\n   data base.\n\n   The following line commands are presented in sequence, or may be\n   selected by letter:\n\n   %S+ SELECT    Display full details of a manual\n   %U+ UPDATE    Update details of a manual\n   %D+ DELETE    Delete a manual\n   %C+ COPY      Create a new manual entry based on a current entry\n)PROC\n   &ZUP = LMMPH010\n   &ZSEL = TRANS( &ZCMD\n              S,LMMPH050\n              U,LMMPH120\n              D,LMMPH060\n              C,LMMPH020\n              *,'?'\n              )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH050": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                          --------------------------\n                           |     DISPLAY MANUAL     |\n                           --------------------------\n+\n   The%SELECT+line command displays details of a manual and its\n   distribution information.\n)PROC\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH060": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                          --------------------------\n                           |     DELETE A MANUAL    |\n                           --------------------------\n+\n   The%DELETE+command allows authorised users to delete details of a manual\n   from the LEB's Manual data base.\n\n   Confirmation is requested before the manual is deleted.\n)PROC\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH070": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                        ------------------------------\n                         |     ENTER MANUAL NUMBER    |\n                         ------------------------------\n+\n   The%UPDATE+and%DELETE+commands required the user to enter the number of\n   the manual to be Updated/Deleted.\n\n   The format of the manual number is XXXX-XXXX-XX.\n)PROC\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH080": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                              ------------------\n                               |     SEARCH     |\n                               ------------------\n+\n   The%SEARCH+panel allows users to enter operands for a search of the\n   LEB's Manual data base.  The following fields may be entered:\n\n   PRODUCT/CATEGORY        1-8 characters\n   PRODUCT NUMBER          1-8 characters (in the format XXXX-XXX)\n   MANUAL NUMBER           1-12 characters (in the format XKKK-KKKK-KK)\n   KEY                     1-9 characters (matches the 'K's in MANUAL NUMBER)\n   TNL LEVEL               1-9 characters (in the format XXXX-XXXX)\n   VERSION                 1-6 characters\n   CURRENCY                1 character\n   NUMBER OF COPIES        1-2 characters\n   DESCRIPTION             1-70 characters\n\n   If the last character of a field is an '*', a generic search will be\n   performed.\n)PROC\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH090": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                              ------------------\n                               |     LOCATE     |\n                               ------------------\n+\n   The%LOCATE+panel allows users to enter operands for a search of the\n   LEB's Manual data base.  The following fields may be entered:\n\n   PRODUCT/CATEGORY        1-8 characters\n   MANUAL NUMBER           1-12 characters (in the format XKKK-KKKK-KK)\n   KEY                     1-9 characters (matches the 'K's in MANUAL NUMBER)\n   CURRENCY                1 character\n   GROUP                   1-12 characters\n   LOCATION                1-12 characters\n   CONTACT                 1-12 characters\n   STATUS                  1 character\n\n   If the last character of a field is an '*', a generic search will be\n   performed.\n\n                            (continued on next page)\n)PROC\n   &ZCONT = LMMPH100\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH100": {"ttr": 2067, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                     ------------------------------------\n                      |     BROWSE DISTRIBUTION LIST     |\n                      ------------------------------------\n+\n   The%LOCATE+command displays a list of selected manuals on the LEB's\n   Manual data base.\n\n   The following line commands are presented in sequence, or may be\n   selected by letter:\n\n   %S+ SELECT    Display full details of a manual\n   %U+ UPDATE    Update distribution information\n   %D+ DELETE    Delete a copy of a manual\n)PROC\n   &ZUP = LMMPH090\n   &ZSEL = TRANS( &ZCMD\n              S,LMMPH050\n              U,LMMPH110\n              D,LMMPH101\n              *,'?'\n              )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH101": {"ttr": 2069, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                           -------------------------\n                            |     DELETE A COPY     |\n                            -------------------------\n+\n   The%D+line command deletes a copy of a manual from the LEB's Manual data\n   base.  The number of copies is automatically reduced by one.\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH110": {"ttr": 2071, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                 -------------------------------------------\n                  |     UPDATE DISTRIBUTION INFORMATION     |\n                  -------------------------------------------\n+\n   The%U+line command allows authorised users to update distribution\n   information for manuals on the LEB's Manual data base.\n)PROC\n   &ZUP = LMMPH090\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH120": {"ttr": 2073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                              ------------------\n                               |     UPDATE     |\n                               ------------------\n+\n   The%UPDATE+command allows authorised users to update information for\n   manuals on the LEB's Manual data base.\n\n   The first panel allows the user to update the following fields:\n\n   CURRENCY                1 character\n   PRODUCT NUMBER          8 characters in the format XXXX-XXX, required\n   NUMBER OF COPIES        1-50, required, may not be decreased\n   TNL LEVEL               9 characters in the format XXXX-XXXX\n   VERSION                 6 characters\n   DESCRIPTION             70 characters, required\n\n\n                            (continued on next page)\n)PROC\n   &ZCONT = LMMPH130\n   &ZUP = LMMPH010\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PH130": {"ttr": 2075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%TUTORIAL ---------------  MANUAL MANAGEMENT FACILITY  ---------------- TUTORIAL\n%SELECTION ===>_ZCMD                                                           +\n%\n%                 -------------------------------------------\n                  |     UPDATE DISTRIBUTION INFORMATION     |\n                  -------------------------------------------\n+\n   The second Update panel allows the user to update the following fields:\n\n   GROUP                   12 characters, required\n   LOCATION                12 characters, required\n   CONTACT                 12 characters, required\n   STATUS                  1 character\n\n\n   The following line commands are presented in sequence, or may be\n   selected by letter:\n\n   %D+ DELETE    Delete a copy of a manual\n)PROC\n   &ZUP = LMMPH120\n   &ZSEL = TRANS( &ZCMD\n              D,LMMPH101\n              *,'?'\n              )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PM00": {"ttr": 2077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM000 'FILE UPDATED'                .HELP=*         .ALARM=NO\n'THE MANUAL MANAGEMENT SYSTEM DATA BASE HAS BEEN WRITTEN BACK TO DISK'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PM01": {"ttr": 2079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM010 'MANUAL ADDED'                .HELP=*         .ALARM=NO\n'MANUAL &MANUALNO HAS BEEN ADDED TO THE DATA BASE'\n\nLMMPM011 'DUPLICATE MANUAL NUMBER'     .HELP=*         .ALARM=YES\n'MANUAL &MANUALNO ALREADY EXISTS ON THE DATA BASE'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PM02": {"ttr": 2081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM020 'MANUAL DELETED'              .HELP=*         .ALARM=NO\n'MANUAL &MANUALNO HAS BEEN DELETED FROM THE DATA BASE'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PM03": {"ttr": 2083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM030 'NO SEARCH KEYS'              .HELP=*         .ALARM=YES\n'AT LEAST ONE SEARCH KEY MUST BE SPECIFIED'\n\nLMMPM031 'NO MANUALS FOUND'            .HELP=*         .ALARM=YES\n'NO MANUALS CORRESPOND TO THE SEARCH KEYS SPECIFIED'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PM04": {"ttr": 2085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM040 'COPIES REDUCED'              .HELP=*         .ALARM=YES\n'TO REMOVE COPIES, DELETE THEM ON THE NEXT SCREEN'\n\nLMMPM041 'RECORD UPDATED'              .HELP=*         .ALARM=NO\n'MANUAL &MANUALNO HAS BEEN UPDATED'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PM09": {"ttr": 2087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMPM090 'ERROR ADDING RECORD'         .HELP=*         .ALARM=YES\n'MANUAL MANAGEMENT SYSTEM ABORTED - CHECK YOUR REGION SIZE'\n\nLMMPM091 'UNKNOWN COMMAND'             .HELP=*         .ALARM=YES\n'THE ONLY VALID COMMANDS ARE ''A'' ''B'' ''D'' ''L'' ''S'' AND ''U'''\n\nLMMPM092 'MANUAL NOT FOUND'            .HELP=*         .ALARM=YES\n'MANUAL &MANUALNO DOES NOT EXIST'\n\nLMMPM097 'FILE CHANGED'                .HELP=*         .ALARM=YES\n'THE DATA BASE HAS BEEN CHANGED - AN UPDATED VERSION HAS NOW BEEN LOADED'\n\nLMMPM098 'FILE IN USE'                 .HELP=*         .ALARM=YES\n'THE DATA BASE IS BEING UPDATED BY ANOTHER USER - PLEASE TRY LATER'\n\nLMMPM099 'USER NOT AUTHORISED'         .HELP=*         .ALARM=YES\n'YOU ARE NOT AUTHORISED TO UPDATE THE DATA BASE - USE DISPLAY OPTIONS ONLY'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP010": {"ttr": 2089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  !  TYPE(OUTPUT) INTENS(LOW) JUST(RIGHT) SKIP(ON) COLOR(YELLOW) HILITE(REVERSE)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -------------------------\n%OPTION ===>_ZCMD                                                        !MODE\n%\n%   A+- Add manual                      %   B+- Browse manual list\n%   U+- Update manual                   %   S+- Search for manual\n%   D+- Delete manual                   %   L+- Locate copy of manual\n                                                                               +\n)INIT\n   &MODE = TRANS (&UPDTAUTH  A,BROWSE U,UPDATE *,' ')\n  .HELP = LMMPH010\n)PROC\n  VER(&ZCMD,NB,LIST,A,U,D,B,S,L)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A01PP020": {"ttr": 2306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  ADD  -----------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%PRODUCT/CATEGORY ===>_CATEGORY+        %      CURRENCY ===>_Z+\n%   MANUAL NUMBER ===>_MANUALNO    +    %PRODUCT NUMBER ===>_PRODUCT +\n%          COPIES ===>_Z +              %     TNL LEVEL ===>_TNLLEVEL +\n%DESCRIPTION:                           %       VERSION ===>_Z     +\n%  ===>_DESCRIPT                                                              %<\n)INIT\n  .HELP = LMMPH020\n  .ZVARS = '(CURRENCY NOCOPIES VERSION)'\n)PROC\n  VER (&CATEGORY,NB)\n  &MAN1TO11 = TRUNC (&MANUALNO,11)\n  &MAN12 = .TRAIL\n  &MAN1TO9 = TRUNC (&MAN1TO11,9)\n  &MAN9TO11 = .TRAIL\n  VER (&MAN1TO9,NB,PICT,'AC99-9999')\n  VER (&MAN9TO11,PICT,'-9')\n  IF (&CURRENCY\u00ac=R,Y,B)\n    &MAN1TO11 = TRUNC (&MANUALNO,11)\n    VER (&MAN1TO11,NB,PICT,'AC99-9999-9')\n  VER (&MAN12,PICT,9)\n  VER (&PRODUCT,NB,PICT,'CCCC-CCC')\n  VER (&NOCOPIES,NB,RANGE,0,50)\n  VER (&TNLLEVEL,PICT,'AC99-9999')\n  VER (&DESCRIPT,NB)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP030": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  ADD  -----------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+PRODUCT/CATEGORY ===>\u00a2CATEGORY+        +      CURRENCY ===>\u00a2Z+\n+   MANUAL NUMBER ===>\u00a2MANUALNO    +    +PRODUCT NUMBER ===>\u00a2PRODUCT +\n+          COPIES ===>!Z +              +     TNL LEVEL ===>\u00a2TNLLEVEL +\n+DESCRIPTION:                           +       VERSION ===>\u00a2Z     +\n+  ===>\u00a2DESCRIPT                                                              +<\n%\n%                           DISTRIBUTION INFORMATION\n%\n%ROW GROUP         LOCATION      CONTACT    STATUS             %SCROLL ==>_Z   +\n)MODEL ROWS(SCAN)\n!Z +_GROUP       +_LOCATION    +_CONTACT     +_Z+\n)INIT\n  .HELP = LMMPH030\n  .ZVARS = '(CURRENCY NOCOPIES VERSION ZSCBR COPYNO STATUS)'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP040": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -------------------------\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +\n%\n%S%MANUAL NO.  %DESCRIPTION                                       %CATEGORY%C% #\n)MODEL CLEAR(SEL) ROWS(&ROWS)\n_Z\u00a2MANUALNO    \u00a2DESCRIPT                                          \u00a2CATEGORY\u00a2Z!Z\n)INIT\n  .HELP = LMMPH040\n  .ZVARS = '(ZSCBR SEL CURRENCY NOCOPIES)'\n)PROC\n  VER (&ZCMD,LIST,' ')  /* NO VALID COMMANDS */\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP050": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+PRODUCT/CATEGORY ===>\u00a2CATEGORY+        +      CURRENCY ===>\u00a2Z+\n+   MANUAL NUMBER ===>\u00a2MANUALNO    +    +PRODUCT NUMBER ===>\u00a2PRODUCT +\n+          COPIES ===>!Z +              +     TNL LEVEL ===>\u00a2TNLLEVEL +\n+DESCRIPTION:                           +       VERSION ===>\u00a2Z     +\n+  ===>\u00a2DESCRIPT                                                              +<\n%\n%                           DISTRIBUTION INFORMATION\n%\n%ROW GROUP         LOCATION      CONTACT    STATUS             %SCROLL ==>_Z   +\n)MODEL ROWS(SCAN)\n!Z +\u00a2GROUP       +\u00a2LOCATION    +\u00a2CONTACT     +\u00a2Z+\n)INIT\n  .HELP = LMMPH050\n  .ZVARS = '(CURRENCY NOCOPIES VERSION ZSCBR COPYNO STATUS)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP060": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  DELETE  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+PRODUCT/CATEGORY ===>\u00a2CATEGORY+        +      CURRENCY ===>\u00a2Z+\n+   MANUAL NUMBER ===>\u00a2MANUALNO    +    +PRODUCT NUMBER ===>\u00a2PRODUCT +\n+          COPIES ===>!Z +              +     TNL LEVEL ===>\u00a2TNLLEVEL +\n+DESCRIPTION:                           +       VERSION ===>\u00a2Z     +\n+  ===>\u00a2DESCRIPT                                                              +<\n+\n+\n+PRESS%ENTER+TO DELETE THIS MANUAL\n+ENTER%END+COMMAND TO RETURN\n)INIT\n  .HELP = LMMPH060\n  .ZVARS = '(CURRENCY NOCOPIES VERSION)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP070": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%ENTER MANUAL NUMBER ===>_MANUALNO    +\n)INIT\n  .HELP = LMMPH070\n)PROC\n  &MAN1TO11 = TRUNC (&MANUALNO,11)\n  &MAN12 = .TRAIL\n  &MAN1TO9 = TRUNC (&MAN1TO11,9)\n  &MAN9TO11 = .TRAIL\n  VER (&MAN1TO9,NB,PICT,'AC99-9999')\n  VER (&MAN9TO11,PICT,'-9')\n  VER (&MAN12,PICT,9)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP080": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  SEARCH  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%PRODUCT/CATEGORY ===>_CATEGORY+\n%  PRODUCT NUMBER ===>_PRODUCT +\n%   MANUAL NUMBER ===>_MANUALNO    +\n%             KEY ===>_KEYNO    +\n%       TNL LEVEL ===>_TNLLEVEL +\n%         VERSION ===>_Z     +\n%        CURRENCY ===>_Z+\n%      NO. COPIES ===>_Z +\n%DESCRIPTION:\n%  ===>_DESCRIPT                                                              %<\n)INIT\n  .HELP = LMMPH080\n  .ZVARS = '(VERSION CURRENCY NOCOPIES)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP090": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  LOCATE  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%PRODUCT/CATEGORY ===>_CATEGORY+\n%      MANUAL NO. ===>_MANUALNO    +\n%             KEY ===>_KEYNO    +\n%        CURRENCY ===>_Z+\n%           GROUP ===>_GROUP       +\n%        LOCATION ===>_LOCATION    +\n%         CONTACT ===>_CONTACT     +\n%          STATUS ===>_Z+\n)INIT\n  .HELP = LMMPH090\n  .ZVARS = '(CURRENCY STATUS)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP100": {"ttr": 2322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -------------------------\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +\n%\n%S CATEGORY MANUAL NO.    #  GROUP        LOCATION     CONTACT   STATUS\n)MODEL CLEAR(SEL) ROWS(SCAN)\n_Z\u00a2CATEGORY\u00a2MANUALNO    !Z +\u00a2GROUP       \u00a2LOCATION    \u00a2CONTACT     \u00a2Z+\n)INIT\n  .HELP = LMMPH100\n  .ZVARS = '(ZSCBR SEL COPYNO STATUS)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP110": {"ttr": 2324, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  UPDATE  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+PRODUCT/CATEGORY ===>\u00a2CATEGORY+        +      CURRENCY ===>\u00a2Z+\n+   MANUAL NUMBER ===>\u00a2MANUALNO    +    +PRODUCT NUMBER ===>\u00a2PRODUCT +\n+          COPIES ===>!Z +              +     TNL LEVEL ===>\u00a2TNLLEVEL +\n+DESCRIPTION:                           +       VERSION ===>\u00a2Z     +\n+  ===>\u00a2DESCRIPT                                                              +<\n%\n%                           DISTRIBUTION INFORMATION\n%\n!Z %GROUP ===>_GROUP       %LOCATION ===>_LOCATION    +\n% CONTACT ===>_CONTACT     %  STATUS ===>_Z+\n)INIT\n  .HELP = LMMPH110\n  .ZVARS = '(CURRENCY NOCOPIES VERSION COPYNO STATUS)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP120": {"ttr": 2326, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  UPDATE  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%PRODUCT/CATEGORY ===>\u00a2CATEGORY+        %      CURRENCY ===>_Z+\n%   MANUAL NUMBER ===>\u00a2MANUALNO    +    %PRODUCT NUMBER ===>_PRODUCT +\n%          COPIES ===>_Z +              %     TNL LEVEL ===>_TNLLEVEL +\n%DESCRIPTION:                           %       VERSION ===>_Z     +\n%  ===>_DESCRIPT                                                              %<\n)INIT\n  .HELP = LMMPH120\n  .ZVARS = '(CURRENCY NOCOPIES VERSION)'\n  .CURSOR = ZCMD\n)PROC\n  IF (&CURRENCY\u00ac=R,Y,B)\n    &MAN1TO11 = TRUNC (&MANUALNO,11)\n    VER (&MAN1TO11,NB,PICT,'AC99-9999-9')\n  VER (&PRODUCT,NB,PICT,'CCCC-CCC')\n  VER (&NOCOPIES,NB,RANGE,0,50)\n  VER (&TNLLEVEL,PICT,'AC99-9999')\n  VER (&DESCRIPT,NB)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP130": {"ttr": 2328, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n  \u00a2   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(LEFT)\n  !   TYPE(OUTPUT)  INTENS(LOW)  CAPS(OFF)  JUST(RIGHT)\n)BODY\n%------------------------  MANUAL MANAGEMENT FACILITY  -  UPDATE  --------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+PRODUCT/CATEGORY ===>\u00a2CATEGORY+        +      CURRENCY ===>\u00a2Z+\n+   MANUAL NUMBER ===>\u00a2MANUALNO    +    +PRODUCT NUMBER ===>\u00a2PRODUCT +\n+          COPIES ===>!Z +              +     TNL LEVEL ===>\u00a2TNLLEVEL +\n+DESCRIPTION:                           +       VERSION ===>\u00a2Z     +\n+  ===>\u00a2DESCRIPT                                                              +<\n%\n%                           DISTRIBUTION INFORMATION\n%\n%S ROW GROUP         LOCATION      CONTACT    STATUS           %SCROLL ==>_Z   +\n)MODEL CLEAR(SEL) ROWS(SCAN)\n_Z!Z +_GROUP       +_LOCATION    +_CONTACT     +_Z+\n)INIT\n  .HELP = LMMPH130\n  .ZVARS = '(CURRENCY NOCOPIES VERSION ZSCBR SEL COPYNO STATUS)'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01PP140": {"ttr": 2330, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "UKGUIDE"}, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%------------------  MANUAL MANAGEMENT FACILITY  -  FILE OPEN FAILURE  ---------\n%COMMAND ===>_ZCMD                                                             +\n%\n\n\n W        W   H        H    OOOOOOOO     OOOOOOOO    PPPPPPPPP     SSSSSSSS    !\n W        W   H        H   O        O   O        O   P        P   S            !\n W   WW   W   H        H   O        O   O        O   P        P   S            !\n W  W  W  W   HHHHHHHHHH   O        O   O        O   PPPPPPPPP     SSSSSSSS    !\n W W    W W   H        H   O        O   O        O   P                     S   !\n WW      WW   H        H   O        O   O        O   P                     S\n W        W   H        H    OOOOOOOO     OOOOOOOO    P             SSSSSSSS    !\n+\n\n\n      OPEN FAILED FOR FILE%MMPFILE +\n\n\n ALLOCATE THE OUTPUT DATA SET AND PRESS%ENTER+TO CONTINUE\n ENTER%END+COMMAND TO CANCEL UPDATE\n)INIT\n)PROC\n   VER(&ZCMD,LIST,' ')\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01P0100": {"ttr": 2332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x04K\\x04K\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 1099, "newlines": 1099, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMP0100 TITLE '                     L.E.B. MANUAL MANAGEMENT FACILITY'\n***********************************************************************\n*                                                                     *\n*        PROGRAM: LMMP0100                                            *\n*        AUTHOR:  D. THORBY, AUG 1989                                 *\n*        DESCRIPTION:                                                 *\n*              THIS PROGRAM IS THE LEB'S MANUAL MANAGEMENT FACILITY.  *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*        R2    BASE REGISTER                                          *\n*        R3    *SPARE*                                                *\n*        R4    *SPARE*                                                *\n*        R5    *SPARE*                                                *\n*        R6    *SPARE*                                                *\n*        R7    *SPARE*                                                *\n*        R8    WORK REGISTER                                          *\n*        R9    WORK REGISTER                                          *\n*        R10   INTERNAL LINKAGE / FILE POINTER                        *\n*        R11   BASE REGISTER                                          *\n*        R12   BASE REGISTER                                          *\n*        R13   SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLMMP0100 CSECT\n         SAVE  (14,12),,'LMMP0100 &SYSDATE &SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         LA    R11,4095(,R12)      LOAD SECOND -\n         LA    R11,1(,R11)           BASE REGISTER\n         LA    R2,4095(,R11)       LOAD THIRD -\n         LA    R2,1(,R2)             BASE REGISTER\n         USING LMMP0100,R12,R11,R2 ESTABLISH BASE REGISTERS\n         LA    R10,SAVEAREA        POINT TO REGISTER SAVE AREA\n         ST    R13,4(,R10)         CHAIN SAVE AREAS BACKWARD\n         ST    R10,8(,R13)         CHAIN SAVE AREAS FORWARD\n         LR    R13,R10             POINT TO REGISTER SAVE AREA\n         LOAD  EP=ISPLINK          PICK UP ADDRESS OF INTERFACE ROUTINE\n         ST    R0,ISPLINK          SAVE ADDRESS OF INTERFACE ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DEFINE ISPF VARIABLES                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         PRINT NOGEN               SUPPRESS MACRO EXPANSIONS\n         MVC   VARNAME,=CL8'MANUALNO' MANUAL NUMBER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,MANUALNO,CHAR,F12),VL,            X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'CATEGORY' MANUAL CATEGORY\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,CATEGORY,CHAR,F8),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'KEYNO' ABBREVIATED MANUAL NUMBER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,KEYNO,CHAR,F9),VL,MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'PRODUCT' PRODUCT NUMBER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,PRODUCT,CHAR,F8),VL,              X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'TNLLEVEL' LATEST TECHNICAL NEWSLETTER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,TNLLEVEL,CHAR,F9),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'DESCRIPT' DESCRIPTION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,DESCRIPT,CHAR,F70),VL,            X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'VERSION' MANUAL VERSION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,VERSION,CHAR,F6),VL,              X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'CURRENCY' CURRENT VERSION INDICATOR\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,CURRENCY,CHAR,F1),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'NOCOPIES' NUMBER OF COPIES\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,NOCOPIES,CHAR,F2),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'COPYNO' COPY NUMBER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,COPYNO,CHAR,F2),VL,               X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'GROUP' DISTRIBUTION INFORMATION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,GROUP,CHAR,F12),VL,MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'LOCATION' DISTRIBUTION INFORMATION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,LOCATION,CHAR,F12),VL,            X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'CONTACT' DISTRIBUTION INFORMATION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,CONTACT,CHAR,F12),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'STATUS' DISTRIBUTION INFORMATION\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,STATUS,CHAR,F1),VL,MF=(E,CALLLIST)\n         SPACE 1\n         MVC   VARNAME,=CL8'ZCMD'  ISPF COMMAND LINE\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,ZCMD,CHAR,F79),VL,MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'ROWS'  \"ALL\" OR \"SCAN\" ROWS FOR TBDISPL\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,ROWS,CHAR,F4),VL,MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'SEL'   TABLE SELECTION VARIABLE\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,SEL,CHAR,F1),VL,MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'UPDTAUTH' UPDATE AUTHORISATION INDICATOR\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,UPDTAUTH,CHAR,F1),VL,             X\n               MF=(E,CALLLIST)\n         MVC   VARNAME,=CL8'ZTDSELS' TABLE SELECTION COUNTER\n         L     R15,ISPLINK         DEFINE ISPF VARIABLE\n         CALL  (15),(VDEFINE,VARNAME,ZTDSELS,FIXED,F4),VL,             X\n               MF=(E,CALLLIST)\n         PRINT GEN                 PRINT MACRO EXPANSIONS\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CREATE TEMPORARY ISPF TABLES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         L     R15,ISPLINK         CREATE TEMPORARY ISPF TABLE\n         CALL  (15),(TBCREATE,TABNAME1,KEYLIST1,NAMLIST1,NOWRITE,      X\n               REPLACE),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SORT TEMPORARY ISPF TABLE\n         CALL  (15),(TBSORT,TABNAME1,SORTLST1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CREATE TEMPORARY ISPF TABLE\n         CALL  (15),(TBCREATE,TABNAME2,KEYLIST2,NAMLIST2,NOWRITE,      X\n               REPLACE),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SORT TEMPORARY ISPF TABLE\n         CALL  (15),(TBSORT,TABNAME2,SORTLST2),VL,MF=(E,CALLLIST)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DATA FILE INTO TABLES                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         RDJFCB FILE               GET DATA SET NAME AND VOLUME SERIAL\n         LA    R9,FILEJFCB         POINT TO JFCB\n         USING INFMJFCB,R9         MAP THE JFCB\n         MVC   DSNAME,JFCBDSNM     PICK UP DATA SET NAME\n         MVC   VOLUME,JFCBVOLS     PICK UP VOLUME SERIAL\n         DROP  R9                  DROP ADDRESSIBILITY TO JFCB\n         RACHECK ENTITY=DSNAME,VOLSER=VOLUME,CLASS='DATASET',          X\n               ATTR=UPDATE,APPL='LMMP0100'\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   OPENFILE            NOT AUTHORISED FOR UPDATE\n         MVI   UPDTAUTH,C'A'       AUTHORISED FOR UPDATE\nOPENFILE OPEN  (FILE,INPUT)        ACCESS THE DATA FILE\nRE_OPEN  SR    R9,R9               SET UP DISTRIBUTION REGISTER\n         SPACE 1\nGETFILE  GET   FILE                READ A RECORD\n         CLI   4(R1),0             IS THIS A FILE HEADER ?\n         BE    SAVEHEAD            YES - SAVE DATE/TIME STAMP\n         MVC   FILEFIX(FILEFIXL),4(R1) MOVE OVER FIXED PORTION\n         BAL   R10,GETKEY          BUILD INTERNAL KEY\n         IC    R9,#COPIES          PICK UP NUMBER OF COPIES\n         CVD   R9,DBLWORD          CONVERT TO PACKED\n         MVC   NCPYEDIT,CPY#MASK   MOVE IN EDIT MASK\n         ED    NCPYEDIT,DBLWORD+6  NUMBER OF COPIES (DISPLAY)\n         LA    R10,FILEFIXL+4(,R1) POINT TO START OF VARIABLE PORTION\n         L     R15,ISPLINK         ADD BASE RECORD TO TABLE\n         CALL  (15),(TBADD,TABNAME1,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   ADDERROR            NON-ZERO - PUT OUT ERROR MESSAGE\n         LTR   R9,R9               CHECK NUMBER OF COPIES\n         BZ    GETFILE             NO COPIES EXIST !!!!!\n         SR    R8,R8               INITIALISE COPY NUMBER\nADDVAR   MVC   FILEVAR(FILEVARL),0(R10) MOVE OVER VARIABLE PORTION\n         LA    R8,1(R8)            NEXT COPY NUMBER\n         CVD   R8,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         ADD DISTRIBUTION RECORD TO TABLE\n         CALL  (15),(TBADD,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   ADDERROR            NON-ZERO - PUT OUT ERROR MESSAGE\n         LA    R10,FILEVARL(,R10)  POINT TO NEXT VARIABLE PORTION\n         BCT   R9,ADDVAR           ADD ANOTHER ENTRY IF REQUIRED\n         B     GETFILE             GET NEXT RECORD\n         SPACE 2\nSAVEHEAD MVC   DATETIME,24(R1)     SAVE DATE/TIME STAMP\n         B     GETFILE             GET NEXT RECORD\n         SPACE 3\nEOF      CLOSE FILE                ALL DATA READ INTO TABLES\n         L     R15,ISPLINK         POSITION TO TOP OF TABLE\n         CALL  (15),(TBTOP,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         POSITION TO TOP OF TABLE\n         CALL  (15),(TBTOP,TABNAME2),VL,MF=(E,CALLLIST)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DISPLAY MENU                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nMENU     MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY MENU PANEL\n         CALL  (15),(DISPLAY,PNLMENU),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   REWRITE             END - UPDATE FILE\n         MVC   FUNCTION,ZCMD       SAVE FUNCTION CODE\n         CLI   ZCMD,C'A'           ADD COMMAND ?\n         BE    A_ADD               YES - DO IT\n         CLI   ZCMD,C'B'           BROWSE COMMAND ?\n         BE    B_BROWSE            YES - DO IT\n         CLI   ZCMD,C'D'           DELETE COMMAND ?\n         BE    GET_KEY             YES - GET RECORD TO BE DELETED\n         CLI   ZCMD,C'L'           LOCATE COMMAND ?\n         BE    L_LOCATE            YES - DO IT\n         CLI   ZCMD,C'S'           SEARCH COMMAND ?\n         BE    S_SEARCH            YES - DO IT\n         CLI   ZCMD,C'U'           UPDATE COMMAND ?\n         BE    GET_KEY             YES - GET RECORD TO BE UPDATED\n         L     R15,ISPLINK         UNKNOWN COMMAND\n         CALL  (15),(SETMSG,MSGERR02),VL,MF=(E,CALLLIST)\n         B     MENU                GET ANOTHER OPTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ADD A MANUAL                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nA_ADD    BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME1),VL,MF=(E,CALLLIST)\nA_NCLEAR MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY ADD PANEL # 1\n         CALL  (15),(DISPLAY,PNLADD1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   A_RETURN            END COMMAND - GET ANOTHER OPTION\n         BAL   R10,GETKEY          BUILD INTERNAL KEY\n         L     R15,ISPLINK         ADD BASE RECORD\n         CALL  (15),(TBADD,TABNAME1,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   A_ERROR             NON-ZERO - PROBABLY A DUPLICATE\n         CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   A_PACK              NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nA_PACK   PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R9,DBLWORD          PICK UP NUMBER OF COPIES\n         LTR   R9,R9               CHECK FOR ZERO\n         BZ    A_EXIT              NO COPIES EXIST !!!!!\n         MVC   FILEVAR(FILEVARL),FILEVARD SET UP DEFAULT DIST. INFO.\nA_DETAIL CVD   R9,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         ADD DISTRIBUTION RECORD\n         CALL  (15),(TBADD,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         BCT   R9,A_DETAIL         WRITE OUT &NOCOPIES LINES\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSKIP,TABNAME1,F0),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\nA_DISPL  L     R15,ISPLINK         DISPLAY DISTRIBUTION INFORMATION\n         CALL  (15),(TBDISPL,TABNAME2,PNLADD2),VL,MF=(E,CALLLIST)\n         CH    R15,=H'4'           CHECK RETURN CODE\n         BH    A_DELETE            END COMMAND - DELETE THE MANUAL\n         BE    A_UPDATE            AT LEAST ONE MODIFIED LINE\n         CLC   ZTDSELS,F0          ANY MODIFIED LINES ?\n         BE    A_EXIT              NO - ADD IT AS IS\nA_UPDATE OC    FILEVAR(FILEVARL),FILEVARB CONVERT TO UPPER CASE\n         L     R15,ISPLINK         UPDATE THIS LINE\n         CALL  (15),(TBPUT,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         CLC   ZTDSELS,F1          ANY LINES LEFT TO PROCESS ?\n         BNH   A_DISPL             NO - REDISPLAY PANEL\n         L     R15,ISPLINK         DISPLAY WITHOUT A PANEL\n         CALL  (15),(TBDISPL,TABNAME2),VL,MF=(E,CALLLIST)\n         B     A_UPDATE            GO AND CHECK WHAT THEY'VE DONE\n         SPACE 3\nA_DELETE L     R15,ISPLINK         DELETE BASE RECORD\n         CALL  (15),(TBDELETE,TABNAME1),VL,MF=(E,CALLLIST)\n         ICM   R9,B'0001',#COPIES  PICK UP NUMBER OF COPIES\n         BZ    A_RETURN            NO COPIES EXIST !!!!!\nA_DEL1   CVD   R9,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         DELETE DISTRIBUTION RECORD\n         CALL  (15),(TBDELETE,TABNAME2),VL,MF=(E,CALLLIST)\n         BCT   R9,A_DEL1           DELETE &NOCOPIES LINES\n         B     A_RETURN            GET NEXT COMMAND\n         SPACE 3\nA_ERROR  CH    R15,=H'8'           DUPLICATE ?\n         BNE   A_ABORT             NO - ABORT\n         L     R15,ISPLINK         DUPLICATE MANUAL NUMBER\n         CALL  (15),(SETMSG,MSGADD02),VL,MF=(E,CALLLIST)\n         MVC   ZTDSELS,F0          CANCEL TABLE DISPLAY IF ACTIVE\n         B     A_RETURN            GET ANOTHER OPTION\n         SPACE 3\nA_ABORT  L     R15,ISPLINK         ERROR ADDING RECORD TO TABLE\n         CALL  (15),(SETMSG,MSGERR01),VL,MF=(E,CALLLIST)\n         B     ENDTABLE            CLOSE THE TABLES\n         SPACE 3\nA_EXIT   L     R15,ISPLINK         MANUAL ADDED\n         CALL  (15),(SETMSG,MSGADD01),VL,MF=(E,CALLLIST)\n         B     A_RETURN            RETURN TO CALLING ROUTINE\n         SPACE 3\nA_RETURN CLI   FUNCTION,C'A'       IS THIS ADD ?\n         BE    MENU                GET ANOTHER OPTION\n         CLI   FUNCTION,C'B'       IS THIS BROWSE ?\n         BE    B_RETURN            RETURN TO BROWSE\n         B     MENU                UNKNOWN FUNCTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BROWSE - DISPLAY LIST OF MANUALS AND ACCEPT COMMANDS         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nB_BROWSE MVC   ROWS,=CL4'ALL'      DISPLAY ALL ROWS\n         B     B_DISPL\n         SPACE 3\nB_RETRY  CLC   ZTDSELS,F1          DO WE HAVE AN OUTSTANDING SELECTION\n         BH    B_REPEAT            YES - PROCESS IT\nB_DISPL  MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY LIST OF MANUALS\n         CALL  (15),(TBDISPL,TABNAME1,PNLBROW),VL,MF=(E,CALLLIST)\n         CH    R15,=H'4'           CHECK RETURN CODE\n         BH    MENU                END COMMAND - RETURN\n         CLC   ZTDSELS,F0          ANY MODIFIED LINES ?\n         BE    B_DISPL             NO - TRY AGAIN\n         B     B_PROCSS            PROCESS A LINE\n         SPACE 1\nB_REPEAT L     R15,ISPLINK         DISPLAY WITHOUT A PANEL\n         CALL  (15),(TBDISPL,TABNAME1),VL,MF=(E,CALLLIST)\nB_PROCSS OI    SEL,C' '            ENSURE COMMAND IS IN UPPER CASE\n         CLI   SEL,C'C'            COPY TO A NEW RECORD\n         BE    B_ADD               SAVE DISPLAY THEN ADD RECORD\n         CLI   SEL,C'D'            DELETE THIS RECORD\n         BE    B_DELETE            SAVE DISPLAY THEN DELETE RECORD\n         CLI   SEL,C'S'            SELECT - VIEW THIS RECORD\n         BE    B_SELECT            SAVE DISPLAY THEN DISPLAY RECORD\n         CLI   SEL,C'U'            UPDATE - UPDATE THIS RECORD\n         BE    B_UPDATE            SAVE DISPLAY THEN UPDATE RECORD\n         B     B_RETRY             CHECK FOR ANOTHER SELECTED LINE\n         SPACE 3\nB_ADD    BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSAVE,ZTDSELS     SAVE # SELECTED LINES\n         B     A_NCLEAR            ADD A SIMILAR RECORD\n         SPACE 3\nB_DELETE BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSAVE,ZTDSELS     SAVE # SELECTED LINES\n         B     D_DELETE            DELETE THIS RECORD\n         SPACE 3\nB_SELECT L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSAVE,ZTDSELS     SAVE # SELECTED LINES\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSKIP,TABNAME1,F0),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\nB_SELRPT L     R15,ISPLINK         DISPLAY DISTRIBUTION INFORMATION\n         CALL  (15),(TBDISPL,TABNAME2,PNLVIEW),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    B_SELRPT            ZERO - REDISPLAY\n         B     B_RETURN            RESTORE DISPLAY\n         SPACE 3\nB_UPDATE BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSAVE,ZTDSELS     SAVE # SELECTED LINES\n         B     U_UPDATE            UPDATE THIS RECORD\n         SPACE 3\nB_RETURN L     R15,ISPLINK         RESTORE TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,RESTORE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSELS,ZTDSAVE     RESTORE # SELECTED LINES\n         B     B_RETRY             CHECK FOR ANOTHER SELECTED LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DELETE THE CURRENT RECORD                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nD_DELETE L     R15,ISPLINK         DISPLAY ARE-YOU-SURE PANEL\n         CALL  (15),(DISPLAY,PNLDELT),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   D_RETURN            END COMMAND ENTERED\n         L     R15,ISPLINK         DELETE BASE RECORD\n         CALL  (15),(TBDELETE,TABNAME1),VL,MF=(E,CALLLIST)\n         CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   D_PACK              NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nD_PACK   PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R9,DBLWORD          PICK UP NUMBER OF COPIES\n         LTR   R9,R9               CHECK FOR ZERO\n         BZ    D_MESSGE            NO COPIES EXIST !!!!!\nD_DETAIL CVD   R9,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         DELETE DISTRIBUTION RECORD\n         CALL  (15),(TBDELETE,TABNAME2),VL,MF=(E,CALLLIST)\n         BCT   R9,D_DETAIL         DELETE &NOCOPIES LINES\nD_MESSGE L     R15,ISPLINK         MANUAL DELETED\n         CALL  (15),(SETMSG,MSGDEL01),VL,MF=(E,CALLLIST)\nD_RETURN CLI   FUNCTION,C'B'       ARE WE IN BROWSE ?\n         BE    B_RETURN            RETURN TO BROWSE\n         B     MENU                GET ANOTHER OPTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOCATE - FIND DISTRIBUTED COPIES OF MANUALS                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nL_LOCATE L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBTOP,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\nL_RETRY  MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         GET SEARCH KEYS\n         CALL  (15),(DISPLAY,PNLLOCAT),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   MENU                END COMMAND - GET ANOTHER OPTION\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   L_NOARGS            NO ARGUMENTS ESTABLISHED\n         MVC   SAVEFIX,FILEFIX     SAVE SEARCH ARGUMENTS\n         MVC   SAVEVAR,FILEVAR     SAVE SEARCH ARGUMENTS\n         MVC   SAVEKEY,KEYNO       SAVE SEARCH ARGUMENT\n         MVC   SAVECOPY,COPYNO     SAVE SEARCH ARGUMENT\n         L     R15,ISPLINK         CHECK FOR MANUALS\n         CALL  (15),(TBSCAN,TABNAME2),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   L_NOHITS            NO MANUALS FOUND\nL_DISPL  MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY LIST OF MANUALS\n         CALL  (15),(TBDISPL,TABNAME2,PNLLCTD),VL,MF=(E,CALLLIST)\n         CH    R15,=H'4'           CHECK RETURN CODE\n         BH    MENU                END COMMAND - RETURN\n         CLC   ZTDSELS,F0          ANY MODIFIED LINES ?\n         BE    L_DISPL             NO - TRY AGIAN\n         B     L_PROCSS            PROCESS A LINE\n         SPACE 1\nL_REPEAT CLC   ZTDSELS,F1          ANY MORE MODIFIED LINES ?\n         BNH   L_DISPL             NO - TRY AGIAN\n         L     R15,ISPLINK         DISPLAY WITHOUT A PANEL\n         CALL  (15),(TBDISPL,TABNAME2),VL,MF=(E,CALLLIST)\nL_PROCSS OI    SEL,C' '            ENSURE COMMAND IS IN UPPER CASE\n         CLI   SEL,C'D'            DELETE THIS RECORD\n         BE    L_DELETE            SAVE DISPLAY THEN DELETE RECORD\n         CLI   SEL,C'S'            SELECT - VIEW THIS RECORD\n         BE    L_SELECT            SAVE DISPLAY THEN DISPLAY RECORD\n         CLI   SEL,C'U'            UPDATE RECORD\n         BE    L_UPDATE            SAVE DISPLAY THEN DISPLAY FOR UPDATE\n         B     L_REPEAT            LOOK FOR ANOTHER LINE\n         SPACE 3\nL_DELETE BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         GET MANUAL RECORD\n         CALL  (15),(TBGET,TABNAME1),VL,MF=(E,CALLLIST)\n         CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   L_PACK              NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nL_PACK   PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R10,DBLWORD         PICK UP NUMBER OF COPIES\nL_DELRPT L     R15,ISPLINK         DELETE DISTRIBUTION RECORD\n         CALL  (15),(TBDELETE,TABNAME2),VL,MF=(E,CALLLIST)\n         PACK  DBLWORD,COPYNO      PACK COPY NUMBER\n         CVB   R9,DBLWORD          PICK UP COPY NUMBER\n         CR    R9,R10              WAS THAT THE LAST COPY ?\n         BE    L_DELEND            YES - REDUCE NUMBER OF COPIES\n         LA    R9,1(,R9)           POINT TO NEXT COPY\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         GET NEXT DISTRIBUTION RECORD\n         CALL  (15),(TBGET,TABNAME2),VL,MF=(E,CALLLIST)\n         BCTR  R9,0                DECREMENT COPY NUMBER\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         RE-WRITE DISTRIBUTION RECORD\n         CALL  (15),(TBADD,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         LA    R9,1(,R9)           POINT BACK TO NEXT COPY\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         B     L_DELRPT            DELETE THIS COPY\n         SPACE 2\nL_DELEND BCTR  R10,0               DECREASE NUMBER OF COPIES\n         CVD   R10,DBLWORD         CONVERT NUMBER OF COPIES TO DECIMAL\n         MVC   NCPYEDIT,CPY#MASK   SET UP EDIT MASK\n         ED    NCPYEDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         RE-WRITE MANUAL RECORD\n         CALL  (15),(TBPUT,TABNAME1,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         B     L_DISPL             DISPLAY UPDATED TABLE\n         SPACE 3\nL_SELECT L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSAVE,ZTDSELS     SAVE # SELECTED LINES\n         L     R15,ISPLINK         GET MANUAL RECORD\n         CALL  (15),(TBGET,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSKIP,TABNAME1,F0),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\nL_SELRPT L     R15,ISPLINK         DISPLAY DISTRIBUTION INFORMATION\n         CALL  (15),(TBDISPL,TABNAME2,PNLVIEW),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    L_SELRPT            ZERO - REDISPLAY\n         B     L_RETURN            RESTORE DISPLAY\n         SPACE 3\nL_UPDATE BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         SAVE CURRENT TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,SAVE),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         GET MANUAL RECORD\n         CALL  (15),(TBGET,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         DISPLAY RECORD TO BE UPDATED\n         CALL  (15),(DISPLAY,PNLLCTUP),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   L_UPEXIT            END COMMAND ENTERED - DO NOT UPDATE\n         L     R15,ISPLINK         UPDATE DISTRIBUTION RECORD\n         CALL  (15),(TBPUT,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\nL_UPEXIT L     R15,ISPLINK         RESTORE TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,RESTORE),VL,MF=(E,CALLLIST)\n         B     L_REPEAT            CHECK FOR ANY OTHER SELECTED ROWS\n         SPACE 3\nL_RETURN L     R15,ISPLINK         RESTORE TABLE DISPLAY\n         CALL  (15),(CONTROL,DISPLAY,RESTORE),VL,MF=(E,CALLLIST)\n         MVC   ZTDSELS,ZTDSAVE     RESTORE # SELECTED LINES\n         CLC   ZTDSELS,F1          ANY MORE MODIFIED LINES ?\n         BH    L_REPEAT            YES - GO AND PROCESS THEM\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\n         MVC   FILEFIX(FILEFIXL),SAVEFIX RESTORE SEARCH ARGUMENTS\n         MVC   FILEVAR(FILEVARL),SAVEVAR RESTORE SEARCH ARGUMENTS\n         MVC   KEYNO,SAVEKEY       RESTORE SEARCH ARGUMENT\n         MVC   COPYNO,SAVECOPY     RESTORE SEARCH ARGUMENT\n         L     R15,ISPLINK         RESTORE SCAN\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\n         B     L_DISPL             RE-DISPLAY TABLE\n         SPACE 3\nL_NOARGS L     R15,ISPLINK         NO ARGUMENTS ESTABLISHED\n         CALL  (15),(SETMSG,MSGLCT01),VL,MF=(E,CALLLIST)\n         B     L_RETRY             TRY AGAIN\n         SPACE 3\nL_NOHITS L     R15,ISPLINK         NO MANUALS FOUND\n         CALL  (15),(SETMSG,MSGLCT02),VL,MF=(E,CALLLIST)\n         B     L_RETRY             TRY AGAIN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEARCH ON USER SUPPLIED KEYS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nS_SEARCH L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBTOP,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME1),VL,MF=(E,CALLLIST)\nS_RETRY  MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         GET SEARCH KEYS\n         CALL  (15),(DISPLAY,PNLSRCH),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   MENU                END COMMAND - GET ANOTHER OPTION\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   S_NOARGS            NO ARGUMENTS ESTABLISHED\n         L     R15,ISPLINK         CHECK FOR MANUALS\n         CALL  (15),(TBSCAN,TABNAME1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   S_NOHITS            NO MANUALS FOUND\n         MVC   ROWS,=CL4'SCAN'     DISPLAY ONLY SELECTED ROWS\n         MVI   FUNCTION,C'B'       CHANGE FUNCTION TO BROWSE\n         B     B_DISPL             DISPLAY SELECTED RECORDS\n         SPACE 3\nS_NOARGS L     R15,ISPLINK         NO ARGUMENTS ESTABLISHED\n         CALL  (15),(SETMSG,MSGSRH01),VL,MF=(E,CALLLIST)\n         B     S_RETRY             TRY AGAIN\n         SPACE 3\nS_NOHITS L     R15,ISPLINK         NO MANUALS FOUND\n         CALL  (15),(SETMSG,MSGSRH02),VL,MF=(E,CALLLIST)\n         B     S_RETRY             TRY AGAIN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE CURRENT RECORD                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nU_UPDATE CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   U_PACK              NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nU_PACK   PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R8,DBLWORD          PICK UP CURRENT NUMBER OF COPIES\n         STC   R8,#COPIES          STORE NUMBER OF COPIES (BINARY)\n         MVC   SAVEFIX,FILEFIX     SAVE MANUAL INFORMATION FOR COMPARE\n         SPACE 1\nU_DISPL1 L     R15,ISPLINK         DISPLAY BASE RECORD FOR UPDATE\n         CALL  (15),(DISPLAY,PNLUPDT1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   U_ABORT             END COMMAND - ABORT UPDATE\n         CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   U_DISPAK            NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nU_DISPAK PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R9,DBLWORD          PICK UP NEW NUMBER OF COPIES\n         STC   R9,#COPIES          STORE NUMBER OF COPIES (BINARY)\n         CLC   SAVEFIX,FILEFIX     ANY UPDATED FIELDS ?\n         BE    U_PART2             NO - UPDATE DISTRIBUTION INFORMATION\n         CR    R9,R8               HAS THE NUMBER OF COPIES CHANGED ?\n         BE    U_UPDAT1            UNCHANGED - OTHER FIELDS UPDATED\n         BH    U_ADDCPY            INCREASED - ADD EXTRA COPIES\n         L     R15,ISPLINK         # COPIES REDUCED\n         CALL  (15),(SETMSG,MSGUPD01),VL,MF=(E,CALLLIST)\n         B     U_DISPL1            TRY AGAIN\n         SPACE 3\nU_ADDCPY MVC   FILEVAR(FILEVARL),FILEVARD SET UP DEFAULT DIST. INFO.\nU_ADDONE CVD   R9,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         ADD DISTRIBUTION RECORD\n         CALL  (15),(TBADD,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         BCTR  R9,0                DECREASE COPY NUMBER\n         CR    R9,R8               DOWN TO OLD COPY NUMBER ?\n         BH    U_ADDONE            NO - WRITE ANOTHER RECORD\n         SPACE 1\nU_UPDAT1 CLC   CURRENCY,SAVEFIX+CURRENCY-FILEFIX IS CURRENCY CHANGED ?\n         BE    U_RWRITE            NO - REWRITE MANUAL RECORD\n         LTR   R9,R9               ARE THERE ANY COPIES TO BE UPDATED ?\n         BZ    U_RWRITE            NO - REWRITE MANUAL RECORD\n         IC    R8,CURRENCY         SAVE NEW CURRENCY\nU_UPDATC CVD   R9,DBLWORD          STORE COPY NUMBER\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         RETRIEVE DISTRIBUTION RECORD\n         CALL  (15),(TBGET,TABNAME2),VL,MF=(E,CALLLIST)\n         STC   R8,CURRENCY         STORE NEW CURRENCY\n         L     R15,ISPLINK         UPDATE DISTRIBUTION RECORD\n         CALL  (15),(TBPUT,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         BCT   R9,U_UPDATC         UPDATE ALL COPIES\n         SPACE 1\nU_RWRITE L     R15,ISPLINK         UPDATE MANUAL RECORD\n         CALL  (15),(TBPUT,TABNAME1,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         SPACE 1\nU_PART2  CLI   #COPIES,0           ANY DISTRIBUTION INFORMATION ?\n         BZ    U_RETURN            NO - RETURN TO CALLER\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         RE-READ CURRENT RECORD\n         CALL  (15),(TBSKIP,TABNAME1,F0),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SET UP SCAN MASK\n         CALL  (15),(TBSARG,TABNAME2),VL,MF=(E,CALLLIST)\nU_DISPL2 MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY DISTRIBUTION INFORMATION\n         CALL  (15),(TBDISPL,TABNAME2,PNLUPDT2),VL,MF=(E,CALLLIST)\n         CH    R15,=H'4'           CHECK RETURN CODE\n         BH    U_RETURN            END COMMAND - RETURN\n         CLC   ZTDSELS,F0          ANY MODIFIED LINES ?\n         BE    U_RETURN            NO - RETURN TO CALLER\n         B     U_PROCSS            PROCESS A LINE\n         SPACE 1\nU_REPEAT CLC   ZTDSELS,F1          ANY MORE MODIFIED LINES ?\n         BNH   U_DISPL2            NO - TRY AGIAN\n         L     R15,ISPLINK         DISPLAY WITHOUT A PANEL\n         CALL  (15),(TBDISPL,TABNAME2),VL,MF=(E,CALLLIST)\nU_PROCSS OI    SEL,C' '            ENSURE COMMAND IS IN UPPER CASE\n         CLI   SEL,C'D'            DELETE THIS RECORD\n         BE    U_DELETE            DELETE DISTRIBUTION RECORD\n         OC    FILEVAR(FILEVARL),FILEVARB CONVERT TO UPPER CASE\n         L     R15,ISPLINK         UPDATE THIS LINE\n         CALL  (15),(TBPUT,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         B     U_REPEAT            GET NEXT COMMAND\n         SPACE 3\nU_DELETE CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   U_PACK2             NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nU_PACK2  PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R10,DBLWORD         PICK UP NUMBER OF COPIES\nU_DELRPT L     R15,ISPLINK         DELETE DISTRIBUTION RECORD\n         CALL  (15),(TBDELETE,TABNAME2),VL,MF=(E,CALLLIST)\n         PACK  DBLWORD,COPYNO      PACK COPY NUMBER\n         CVB   R9,DBLWORD          PICK UP COPY NUMBER\n         CR    R9,R10              WAS THAT THE LAST COPY ?\n         BE    U_DELEND            YES - REDUCE NUMBER OF COPIES\n         LA    R9,1(,R9)           POINT TO NEXT COPY\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         GET NEXT DISTRIBUTION RECORD\n         CALL  (15),(TBGET,TABNAME2),VL,MF=(E,CALLLIST)\n         BCTR  R9,0                DECREMENT COPY NUMBER\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         RE-WRITE DISTRIBUTION RECORD\n         CALL  (15),(TBADD,TABNAME2,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         LA    R9,1(,R9)           POINT BACK TO NEXT COPY\n         CVD   R9,DBLWORD          CONVERT COPY NUMBER TO DECIMAL\n         MVC   CPY#EDIT,CPY#MASK   SET UP EDIT MASK\n         ED    CPY#EDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         B     U_DELRPT            DELETE THIS COPY\n         SPACE 2\nU_DELEND BCTR  R10,0               DECREASE NUMBER OF COPIES\n         CVD   R10,DBLWORD         CONVERT NUMBER OF COPIES TO DECIMAL\n         MVC   NCPYEDIT,CPY#MASK   SET UP EDIT MASK\n         ED    NCPYEDIT,DBLWORD+6  CONVERT COPY NUMBER TO DISPLAY\n         L     R15,ISPLINK         RE-WRITE MANUAL RECORD\n         CALL  (15),(TBPUT,TABNAME1,SPFDUMMY,ORDER),VL,MF=(E,CALLLIST)\n         B     U_DISPL2            RE-DISPLAY TABLE\n         SPACE 3\nU_RETURN L     R15,ISPLINK         RECORD UPDATED\n         CALL  (15),(SETMSG,MSGUPD02),VL,MF=(E,CALLLIST)\nU_ABORT  CLI   FUNCTION,C'B'       IS THIS BROWSE ?\n         BE    B_RETURN            RETURN TO BROWSE\n         B     MENU                GET ANOTHER OPTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OUT OF LINE ROUTINES                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ERROR ADDING A RECORD TO THE TABLE                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nADDERROR L     R15,ISPLINK         ERROR ADDING RECORD TO TABLE\n         CALL  (15),(SETMSG,MSGERR01),VL,MF=(E,CALLLIST)\n         CLOSE FILE                ABORT PROGRAM\n         B     ENDTABLE            CLOSE THE TABLES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        GET A RECORD TO BE UPDATED/DELETED                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nGET_KEY  BAL   R10,AUTH_CHK        CHECK AUTHORISATION\n         L     R15,ISPLINK         CLEAR TABLE VARIABLES\n         CALL  (15),(TBVCLEAR,TABNAME1),VL,MF=(E,CALLLIST)\nGET_RPT  MVC   ZCMD,ZCMD-1         BLANK OUT COMMAND LINE\n         L     R15,ISPLINK         DISPLAY PANEL\n         CALL  (15),(DISPLAY,PNLGETK),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   MENU                END COMMAND - GET ANOTHER OPTION\n         L     R15,ISPLINK         GET RECORD\n         CALL  (15),(TBGET,TABNAME1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   GETERROR            NON-ZERO - RECORD NOT FOUND\nGETRETRN CLI   FUNCTION,C'D'       IS THE FUNCTION DELETE ?\n         BE    D_DELETE            YES - DELETE THE RECORD\n         CLI   FUNCTION,C'U'       IS THE FUNCTION UPDATE ?\n         BE    U_UPDATE            YES - UPDATE THE RECORD\n         B     MENU                INTERNAL ERROR - ABORT THE FUNCTION\n         SPACE 3\nGETERROR L     R15,ISPLINK         MANUAL NOT FOUND\n         CALL  (15),(SETMSG,MSGERR03),VL,MF=(E,CALLLIST)\n         B     GET_RPT             TRY AGAIN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK USER'S AUTHORITY TO UPDATE FILE                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nAUTH_CHK CLI   UPDTAUTH,C'U'       ALREADY UPDATING ?\n         BER   R10                 YES - RETURN\n         CLI   UPDTAUTH,C'N'       NOT AUTHORISED ?\n         BE    NOT_AUTH            YES - PUT OUT MESSAGE\n         ENQ   (ENQNAME,DSNAME,E,,SYSTEMS),RET=USE\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   IN_USE              NOT AVAILABLE\n         MVI   UPDTAUTH,C'U'       INDICATE UPDATING\n         OPEN  (FILE,INPUT)        RE-ACCESS THE FILE\n         GET   FILE                READ FILE HAEDER\n         CLC   DATETIME,24(R1)     HAS THE FILE BEEN UPDATED ?\n         BE    AUTH_OK             NO - CONTINUE\n         MVC   DATETIME,24(R1)     SAVE NEW DATE/TIME STAMP\n         L     R15,ISPLINK         FILE CHANGED\n         CALL  (15),(SETMSG,MSGERR07),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         DELETE TEMPORARY ISPF TABLE\n         CALL  (15),(TBEND,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         DELETE TEMPORARY ISPF TABLE\n         CALL  (15),(TBEND,TABNAME2),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CREATE TEMPORARY ISPF TABLE\n         CALL  (15),(TBCREATE,TABNAME1,KEYLIST1,NAMLIST1,NOWRITE,      X\n               REPLACE),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SORT TEMPORARY ISPF TABLE\n         CALL  (15),(TBSORT,TABNAME1,SORTLST1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         CREATE TEMPORARY ISPF TABLE\n         CALL  (15),(TBCREATE,TABNAME2,KEYLIST2,NAMLIST2,NOWRITE,      X\n               REPLACE),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         SORT TEMPORARY ISPF TABLE\n         CALL  (15),(TBSORT,TABNAME2,SORTLST2),VL,MF=(E,CALLLIST)\n         B     RE_OPEN             RE-LOAD FILE\n         SPACE 3\nAUTH_OK  CLOSE FILE                FINISHED WITH FILE\n         BR    R10                 RETURN TO CALLER\n         SPACE 3\nIN_USE   L     R15,ISPLINK         FILE IN USE\n         CALL  (15),(SETMSG,MSGERR08),VL,MF=(E,CALLLIST)\n         B     AUTH_RET            RETURN TO CALLING ROUTINE\n         SPACE 3\nNOT_AUTH L     R15,ISPLINK         USER NOT AUTHORISED\n         CALL  (15),(SETMSG,MSGERR09),VL,MF=(E,CALLLIST)\nAUTH_RET CLI   FUNCTION,C'B'       ARE WE IN BROWSE/SEARCH ?\n         BE    B_DISPL             YES - RETURN\n         CLI   FUNCTION,C'L'       ARE WE IN LOCATE ?\n         BE    L_DISPL             YES - RETURN\n         B     MENU                GET ANOTHER COMMAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF PROGRAM - UPDATE THE FILE IF AUTHORISED               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nREWRITE  CLI   UPDTAUTH,C'U'       HAS THE USER UPDATED THE FILE ?\n         BNE   ENDTABLE            FILE NOT UPDATED - DO NOT SAVE\n         L     R15,ISPLINK         POSITION TO TOP OF TABLE\n         CALL  (15),(TBTOP,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         POSITION TO TOP OF TABLE\n         CALL  (15),(TBTOP,TABNAME2),VL,MF=(E,CALLLIST)\nOPENOUT  OPEN  (FILE,OUTPUT)       ACCESS THE DATA FILE\n         TM    FILE+DCBOFLGS-IHADCB,DCBOFOPN  FILE OPEN SUCCESSFUL ?\n         BZ    OPENFAIL            NO - TELL THE USER\n         TIME  DEC                 GET CURRENT DATE AND TIME\n         STM   R0,R1,DATETIME      STORE DATE AND TIME\n         PUT   FILE                GET BUFFER AREA FOR HEADER RECORD\n         MVC   0(4,R1),=H'32,0'    MOVE IN RDW\n         MVC   4(20,R1),3(R1)      SET KEY FIELDS TO ZERO\n         MVC   24(8,R1),DATETIME   MOVE IN DATE/TIME STAMP\n         SPACE 1\nGETENTRY L     R15,ISPLINK         GET NEXT ENTRY FROM TABLE\n         CALL  (15),(TBSKIP,TABNAME1),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   CLOSFILE            END OF TABLE - CLOSE FILE\n         PUT   FILE                GET BUFFER AREA FOR RECORD\n         CLI   NOCOPIES+1,C' '     SINGLE DIGIT NUMBER OF COPIES ?\n         BNE   Z_PACK              NO - PACK NUMBER OF COPIES\n         MVC   NOCOPIES+1(1),NOCOPIES MOVE CHARACTER\n         MVI   NOCOPIES,C'0'       ADD LEADING ZERO\nZ_PACK   PACK  DBLWORD,NOCOPIES    PACK NUMBER OF COPIES\n         CVB   R9,DBLWORD          PICK UP NUMBER OF COPIES\n         STC   R9,#COPIES          STORE NUMBER OF COPIES\n         LR    R10,R9              NUMBER OF COPIES\n         MH    R10,=AL2(FILEVARL)  * LENGTH OF VARIABLE PORTION\n         AH    R10,=AL2(FILEFIXL+4) + LENGTH OF FIXED PORTION\n         STH   R10,0(,R1)          STORE RECORD LENGTH\n         MVC   2(2,R1),=H'0'       COMPLETE RDW\n         MVC   4(FILEFIXL,R1),FILEFIX MOVE OVER FIXED PORTION\n         LA    R10,FILEFIXL+4(,R1)   POINT TO START OF VARIABLE PORTION\n         LTR   R9,R9               CHECK NUMBER OF COPIES\n         BZ    GETENTRY            NO COPIES EXIST !!!!!\nGETVAR   L     R15,ISPLINK         ADD DISTRIBUTION RECORD TO TABLE\n         CALL  (15),(TBSKIP,TABNAME2),VL,MF=(E,CALLLIST)\n         MVC   0(FILEVARL,R10),FILEVAR MOVE OVER VARIABLE PORTION\n         LA    R10,FILEVARL(,R10)  POINT TO NEXT VARIABLE PORTION\n         BCT   R9,GETVAR           ADD ANOTHER ENTRY IF REQUIRED\n         B     GETENTRY            GET NEXT ENTRY\n         SPACE 3\nCLOSFILE CLOSE FILE                ALL DATA WRITTEN TO FILE\n         DEQ   (ENQNAME,DSNAME,,SYSTEMS)\n         L     R15,ISPLINK         FILE UPDATED\n         CALL  (15),(SETMSG,MSGEND01),VL,MF=(E,CALLLIST)\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        END OF PROGRAM - CLOSE THE TABLES                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nENDTABLE L     R15,ISPLINK         DELETE TEMPORARY ISPF TABLE\n         CALL  (15),(TBEND,TABNAME1),VL,MF=(E,CALLLIST)\n         L     R15,ISPLINK         DELETE TEMPORARY ISPF TABLE\n         CALL  (15),(TBEND,TABNAME2),VL,MF=(E,CALLLIST)\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        END OF PROGRAM - RETURN TO CALLER                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRETURN   L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SUBROUTINES                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nGETKEY   MVC   KEYNO(3),MANUALNO+1 DROP USAGE CODE\n         MVC   KEYNO+3(4),MANUALNO+5 DROP HYPHEN\n         MVC   KEYNO+7(2),MANUALNO+10 MOVE IN VERSION\n         CLI   KEYNO+8,C' '        TWO DIGIT VERSION ?\n         BNER  R10                 YES - RETURN\n         MVC   KEYNO+8(1),KEYNO+7  MOVE VERSION\n         MVI   KEYNO+7,C'0'        FILL IN HIGH ORDER DIGIT\n         BR    R10                 RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FILE CANNOT BE OPENED FOR OUTPUT !                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nOPENFAIL L     R15,ISPLINK         DISPLAY FAILURE PANEL\n         CALL  (15),(DISPLAY,PNLOPENF),VL,MF=(E,CALLLIST)\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    OPENOUT             ENTER PRESSED - RETRY THE OPEN\n         B     ENDTABLE            ABORT UPDATE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAVE AREA, VARIABLE POOL AND FILE LAYOUTS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nISPLINK  DS    A                   ADDRESS OF ISPF INTERFACE ROUTINE\nCALLLIST CALL  ,(,,,,,),VL,MF=L    LIST FORM OF CALL MACRO\nVARNAME  DS    CL8                 ISPF VARIABLE NAME\n         SPACE 3\nFILE     DCB   DDNAME=MMPFILE,EODAD=EOF,MACRF=(GL,PL),DSORG=PS,        X\n               EXLST=FILEEXIT\nFILEEXIT DS    0F                  FILE DCB EXIT LIST\n         DC    X'87'               JFCB EXIT + LAST\n         DC    AL3(FILEJFCB)       ADDRESS OF JFCB\nFILEJFCB DC    XL176'00'           FILE JFCB\nDSNAME   DS    CL44                DATA SET NAME\nVOLUME   DS    CL6                 VOLUME SERIAL\nENQNAME  DC    CL8'LMMPENQ'        ENQ QNAME\nDATETIME DC    2F'0'               DATE/TIME STAMP\n         SPACE 1\nFILEFIX  EQU   *                   FIXED PORTION OF RECORD\nCATEGORY DC    CL8' '              CATEGORY\nMANUALNO DC    CL12' '             MANUAL NUMBER\nPRODUCT  DC    CL8' '              PRODUCT\nTNLLEVEL DC    CL9' '              LATEST TECHNICAL NEWSLETTER\nDESCRIPT DC    CL70' '             DESCRIPTION\nVERSION  DC    CL6' '              MANUAL VERSION\nCURRENCY DC    CL1' '              CURRENT VERSION INDICATOR\n#COPIES  DC    AL1(0)              NUMBER OF COPIES (BINARY)\nFILEFIXL EQU   *-FILEFIX           LENGTH OF FIXED PORTION OF RECORD\n         SPACE 1\nFILEVAR  EQU   *                   VARIABLE PORTION OF RECORD\nGROUP    DC    CL12' '             DISTRIBUTION INFORMATION\nCONTACT  DC    CL12' '             DISTRIBUTION INFORMATION\nLOCATION DC    CL12' '             DISTRIBUTION INFORMATION\nSTATUS   DC    CL1' '              DISTRIBUTION INFORMATION\nFILEVARL EQU   *-FILEVAR           LENGTH OF VARIABLE PORTION OF RECORD\nFILEVARD DS    0CL(FILEVARL)       DEFAULTS FOR VARIABLE FIELDS\n         DC    CL12'UNASSIGNED'    DEFAULT GROUP\n         DC    CL12'LIBRARIAN'     DEFAULT CONTACT\n         DC    CL12'LIBRARY'       DEFAULT LOCATION\n         DC    CL1' '              DEFAULT STATUS\nFILEVARB DC    CL(FILEVARL)' '     CONVERT DIST. INFO. TO UPPER CASE\n         SPACE 1\nSAVEFIX  DS    CL(FILEFIXL)        SAVED COPY OF FIXED INFORMATION\nSAVEVAR  DS    CL(FILEVARL)        SAVED COPY OF VARIABLE INFORMATION\nSAVEKEY  DS    CL(L'KEYNO)         SAVED COPY OF KEY\nSAVECOPY DS    CL(L'COPYNO)        SAVED COPY OF COPY NUMBER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ISPF VARIABLES                                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DC    C' '                FILL CHARACTER FOR COMMAND LINE\nZCMD     DC    CL79' '             COMMAND LINE\nFUNCTION DC    CL1' '              FUNCTION CODE\nKEYNO    DC    CL9' '              ABBREVIATED MANUAL NUMBER\nNCPYEDIT DS    0CL4\n         DC    CL2'  '             FILLER\nNOCOPIES DC    CL2' 0'             NUMBER OF COPIES (DISPLAY)\nCPY#EDIT DS    0CL4\n         DC    CL2'  '             FILLER\nCOPYNO   DC    CL2'00'             COPY NUMBER\nCPY#MASK DC    X'F0212020'         EDIT MASK FOR NO COPIES AND COPY NO\nROWS     DC    CL4'ALL '           ROWS PARAMETER FOR TBDISPL\nSEL      DC    CL1' '              SELECTION FIELD FOR TABLE DISPLAYS\nUPDTAUTH DC    C'N'                IS USER AUTHORISED TO UPDATE ?\n*                                  N = NOT AUTHORISED TO UPDATE\n*                                  A = AUTHORISED TO UPDATE\n*                                  U = UPDATED AND ENQ OBTAINED\nDBLWORD  DS    D                   WORK AREA FOR NUMERIC CONVERSION\nZTDSELS  DC    F'0'                COUNT OF SELECTED ROWS IN TABLE\nZTDSAVE  DS    F                   SAVED COUNT OF SELECTED ROWS\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSPFDUMMY DC    CL8' '              DUMMY PARAMETER FOR ISPF CALLS\nCHAR     DC    CL8'CHAR'\nCONTROL  DC    CL8'CONTROL'\nDISPLAY  DC    CL8'DISPLAY'\nFIXED    DC    CL8'FIXED'\nNOWRITE  DC    CL8'NOWRITE'\nORDER    DC    CL8'ORDER'\nREPLACE  DC    CL8'REPLACE'\nRESTORE  DC    CL8'RESTORE'\nSAVE     DC    CL8'SAVE'\nSETMSG   DC    CL8'SETMSG'\nTBADD    DC    CL8'TBADD'\nTBCREATE DC    CL8'TBCREATE'\nTBDELETE DC    CL8'TBDELETE'\nTBDISPL  DC    CL8'TBDISPL'\nTBEND    DC    CL8'TBEND'\nTBGET    DC    CL8'TBGET'\nTBPUT    DC    CL8'TBPUT'\nTBSARG   DC    CL8'TBSARG'\nTBSCAN   DC    CL8'TBSCAN'\nTBSKIP   DC    CL8'TBSKIP'\nTBSORT   DC    CL8'TBSORT'\nTBTOP    DC    CL8'TBTOP'\nTBVCLEAR DC    CL8'TBVCLEAR'\nVDEFINE  DC    CL8'VDEFINE'\nF0       DC    F'0'\nF1       DC    F'1'\nF2       DC    F'2'\nF4       DC    F'4'\nF6       DC    F'6'\nF8       DC    F'8'\nF9       DC    F'9'\nF12      DC    F'12'\nF70      DC    F'70'\nF79      DC    F'79'\n         SPACE 1\nTABNAME1 DC    C'LMMPT100'\nKEYLIST1 DC    C'(MANUALNO)'\nNAMLIST1 DC    C'(CATEGORY KEYNO PRODUCT TNLLEVEL DESCRIPT VERSION CURRX\n               ENCY NOCOPIES)'\nSORTLST1 DC    C'(CATEGORY,C,A,KEYNO,C,A)'\nTABNAME2 DC    C'LMMPT200'\nKEYLIST2 DC    C'(MANUALNO COPYNO)'\nNAMLIST2 DC    C'(CATEGORY KEYNO CURRENCY GROUP LOCATION CONTACT STATUSX\n               )'\nSORTLST2 DC    C'(CATEGORY,C,A,KEYNO,C,A,COPYNO,N,A)'\n         SPACE 1\nPNLMENU  DC    CL8'LMMPP010'       MENU PANEL\nPNLADD1  DC    CL8'LMMPP020'       ADD MANUAL PANEL\nPNLADD2  DC    CL8'LMMPP030'       ADD DISTRIBUTION PANEL\nPNLBROW  DC    CL8'LMMPP040'       BROWSE MANUAL LIST PANEL\nPNLVIEW  DC    CL8'LMMPP050'       BROWSE - VIEW PANEL\nPNLDELT  DC    CL8'LMMPP060'       DELETE - ARE-YOU-SURE PANEL\nPNLGETK  DC    CL8'LMMPP070'       GET KEY PANEL\nPNLSRCH  DC    CL8'LMMPP080'       GET SEARCH ARGUMENTS PANEL\nPNLLOCAT DC    CL8'LMMPP090'       GET LOCATE ARGUMENTS PANEL\nPNLLCTD  DC    CL8'LMMPP100'       LOCATE DISPLAY PANEL\nPNLLCTUP DC    CL8'LMMPP110'       LOCATE UPDATE PANEL\nPNLUPDT1 DC    CL8'LMMPP120'       UPDATE MANUAL PANEL\nPNLUPDT2 DC    CL8'LMMPP130'       UPDATE DISTRIBUTION PANEL\nPNLOPENF DC    CL8'LMMPP140'       OPEN FAILURE PANEL\nMSGEND01 DC    CL8'LMMPM000'       FILE UPDATED\nMSGADD01 DC    CL8'LMMPM010'       MANUAL ADDED\nMSGADD02 DC    CL8'LMMPM011'       DUPLICATE MANUAL NUMBER\nMSGDEL01 DC    CL8'LMMPM020'       MANUAL DELETED\nMSGSRH01 DC    CL8'LMMPM030'       NO SEARCH KEYS\nMSGSRH02 DC    CL8'LMMPM031'       NO MANUALS FOUND\nMSGLCT01 EQU   MSGSRH01            NO SEARCH KEYS\nMSGLCT02 EQU   MSGSRH02            NO MANUALS FOUND\nMSGUPD01 DC    CL8'LMMPM040'       # COPIES REDUCED\nMSGUPD02 DC    CL8'LMMPM041'       RECORD UPDATED\nMSGERR01 DC    CL8'LMMPM090'       ERROR ADDING RECORD\nMSGERR02 DC    CL8'LMMPM091'       UNKNOWN COMMAND - MENU\nMSGERR03 DC    CL8'LMMPM092'       MANUAL NOT FOUND - GET\nMSGERR07 DC    CL8'LMMPM097'       FILE CHANGED - RELOAD\nMSGERR08 DC    CL8'LMMPM098'       FILE IN USE - TRY LATER\nMSGERR09 DC    CL8'LMMPM099'       USER NOT AUTHORISED\n         SPACE 3\n         LTORG\n         YREGS\n         DSECT\n         IEFJFCBN                  MAP JFCB\n         DCBD  DSORG=PS\n         END   LMMP0100\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01P0200": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x03\\xa4\\x03\\xa4\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 932, "newlines": 932, "modlines": 0, "user": "UKGUIDE"}, "text": "LMMP0200 TITLE '                     L.E.B. MANUAL MANAGEMENT FACILITY X\n               - REPORT PROGRAM'\n***********************************************************************\n*                                                                     *\n*        PROGRAM: LMMP0200                                            *\n*        AUTHOR:  D. THORBY, SEP 1989                                 *\n*        DESCRIPTION:                                                 *\n*              THIS PROGRAM IS THE LEB'S MANUAL MANAGEMENT FACILITY   *\n*              REPORT PROGRAM.                                        *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*        R2    WORK REGISTER                                          *\n*        R3    END OF CARD / NUMBER OF COPIES                         *\n*        R4    FILE VARIABLE FIELDS POINTER                           *\n*        R5    FILE FIXED FIELDS POINTER                              *\n*        R6    *SPARE*                                                *\n*        R7    *SPARE*                                                *\n*        R8    *SPARE*                                                *\n*        R9    INTERNAL LINKAGE / SORT RECORD                         *\n*        R10   BASE REGISTER - SORT E35 ROUTINE                       *\n*        R11   BASE REGISTER - SORT E15 ROUTINE                       *\n*        R12   BASE REGISTER - MAIN PROGRAM                           *\n*        R13   SAVE AREA AND WORK AREA                                *\n*                                                                     *\n*        ASSEMBLER LABEL NAMING CONVENTION:                           *\n*                                                                     *\n*        A_    INITIALISATION ROUTINES                                *\n*        C_    CARD FILE DATA                                         *\n*        E_    SORT EXIT ROUTINES                                     *\n*        F_    FILE FIELDS                                            *\n*        L_    LIST FIELDS                                            *\n*        P_    PRINT LINES                                            *\n*        R_    REPORT FIELDS                                          *\n*        S_    SORT FIELDS, ETC.                                      *\n*        Z_    TERMINATION AND ERROR ROUTINES                         *\n*                                                                     *\n*        MESSAGES ISSUED:                                             *\n*                                                                     *\n*        LMMP201I  FILE LAST UPDATED AT ... ON ...                    *\n*        LMMP290E  DUE TO THE ABOVE ERRORS ...                        *\n*        LMMP291E  NO LIST OR PRINT COMMANDS                          *\n*        LMMP298E  ERROR OPENING <DDNAME>                             *\n*        LMMP299E  ERROR OPENING SYSPRINT  (WTO)                      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLMMP0200 CSECT\n         SAVE  (14,12),,'LMMP0200 &SYSDATE &SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING LMMP0200,R12        ESTABLISH BASE REGISTER\n         LA    R11,MMP02E15        LOAD BASE REGISTER\n         USING MMP02E15,R11        ESTABLISH E15 BASE REGISTER\n         LA    R10,MMP02E35        LOAD BASE REGISTER\n         USING MMP02E35,R10        ESTABLISH E35 BASE REGISTER\n         LA    R2,SAVEAREA         POINT TO REGISTER SAVE AREA\n         ST    R13,4(,R2)          CHAIN SAVE AREAS BACKWARD\n         ST    R2,8(,R13)          CHAIN SAVE AREAS FORWARD\n         LR    R13,R2              POINT TO REGISTER SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OPEN PRINT FILE AND READ IN CONTROL CARDS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         OPEN  (P_PRINT,OUTPUT)    OPEN PRINT FILE\n         TM    P_PRINT+DCBOFLGS-IHADCB,DCBOFOPN PRINT OPEN SUCCESSFUL ?\n         BZ    Z_NPRINT            NO - ABORT\n         PUT   P_PRINT,P_HEADER    WRITE PRINT HEADING LINE\n         OPEN  (C_CARD,INPUT)      OPEN CARD FILE\n         TM    C_CARD+DCBOFLGS-IHADCB,DCBOFOPN CARD OPEN SUCCESSFUL ?\n         BZ    Z_NOCARD            NO - PUT OUT ERROR MESSAGE\n         SPACE 3\nA_GETC   GET   C_CARD              READ A PARAMETER CARD\n         MVC   P_CARD,0(R1)        COPY CARD TO PRINT LINE\n         MVC   P_MSG,P_MSG-1       BLANK OUT MESSAGE\n         LA    R3,71(,R1)          POINT TO END OF 72 COLUMN CARD\n         TRT   0(72,R1),TRTNBLNK   LOOK FOR NON-BLANK\n         BZ    A_GETEND            NOT FOUND - READ ANOTHER CARD\n         CLI   0(R1),C'*'          IS THIS A COMMENT CARD\n         BE    A_GETEND            YES - IGNORE IT\n         CLC   =C'LIST ',0(R1)     IS THIS A \"LIST\" CARD\n         BE    A_LIST              YES - PROCESS IT\n         CLC   =C'PRINT ',0(R1)    IS THIS A \"PRINT\" CARD\n         BE    A_REPORT            YES - PROCESS IT\n         CLC   =C'SORT ',0(R1)     IS THIS A \"SORT\" CARD\n         BE    A_SORT              YES - PROCESS IT\n         CLC   =C'SELECT ',0(R1)   IS THIS A \"SELECT\" CARD\n         BE    A_SELECT            YES - PROCESS IT\n         MVC   P_MSG,=CL40'UNIDENTIFIED CONTROL CARD'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         SPACE 1\nA_GETEND PUT   P_PRINT,P_DETAIL    PRINT CONTROL CARD\n         B     A_GETC              GET ANOTHER CARD\n         SPACE 3\nA_LIST   CLI   C_FLAGS,0           ANY CARDS READ YET ?\n         BNE   A_OUTSEQ            YES - ABORT THE RUN\n         OI    C_FLAGS,C_LIST      INDICATE LIST REQUEST\n         LA    R1,5(,R1)           POINT PAST LIST COMMAND\n         LR    R2,R3               POINT TO END OF CARD\n         SR    R2,R1               GET LENGTH OF REMAINDER\n         EX    R2,A_TRTNB          LOOK FOR NON-BLANK\n         BZ    A_GETEND            NO TITLE FOUND\n         CLC   =C'TITLE=',0(R1)    IS THIS A TITLE ?\n         BNE   A_LIST_N            NO - REJECT IT\n         MVC   L_TITLE,L_TITLE-1   BLANK OUT OLD TITLE\n         LA    R1,6(R1)            POINT TO NEW TITLE\n         SR    R3,R1               GET LENGTH OF TITLE FOR MOVE\n         STC   R3,*+5              ZAP NEXT INSTRUCTION\n         MVC   L_TITLE(0),0(R1)    MOVE TITLE TO HEADING\n         B     A_GETEND            GET ANOTHER CONTROL CARD\n         SPACE 2\nA_LIST_N MVC   P_MSG,=CL40'TITLE NOT FOUND OR INVALID - IGNORED'\n         B     A_GETEND            GET ANOTHER CONTROL CARD\n         SPACE 3\nA_REPORT CLI   C_FLAGS,0           ANY CARDS READ YET ?\n         BNE   A_OUTSEQ            YES - ABORT THE RUN\n         OI    C_FLAGS,C_REPORT    INDICATE REPORT REQUEST\n         LA    R1,6(R1)            POINT PAST \"PRINT\" COMMAND\n         LR    R2,R3               POINT TO END OF CARD\n         SR    R2,R1               GET LENGTH OF REMAINDER\n         EX    R2,A_TRTNB          LOOK FOR NON-BLANK\n         BZ    A_GETEND            NO TITLE FOUND\n         CLC   =C'TITLE=',0(R1)    IS THIS A TITLE ?\n         BNE   A_REPT_N            NO - REJECT IT\n         MVC   R_TITLE,R_TITLE-1   BLANK OUT OLD TITLE\n         LA    R1,6(R1)            POINT TO NEW TITLE\n         SR    R3,R1               GET LENGTH OF TITLE FOR MOVE\n         STC   R3,*+5              ZAP NEXT INSTRUCTION\n         MVC   R_TITLE(0),0(R1)    MOVE TITLE TO HEADING\n         B     A_GETEND            GET ANOTHER CONTROL CARD\n         SPACE 2\nA_REPT_N MVC   P_MSG,=CL40'TITLE NOT FOUND OR INVALID - IGNORED'\n         B     A_GETEND            GET ANOTHER CONTROL CARD\n         SPACE 3\nA_SORT   TM    C_FLAGS,C_LIST+C_REPORT LIST OR REPORT ALREADY FOUND ?\n         BZ    A_OUTSEQ            NO - ABORT THE RUN\n         TM    C_FLAGS,C_SORT+C_SELECT SORT OR SELECT ALREADY FOUND ?\n         BNZ   A_OUTSEQ            YES - ABORT THE RUN\n         OI    C_FLAGS,C_SORT      INDICATE SORT FOUND\n         LA    R1,5(,R1)           POINT PAST SORT COMMAND\n         LR    R2,R3               POINT TO END OF CARD\n         SR    R2,R1               GET LENGTH OF REMAINDER\n         EX    R2,A_TRTNB          LOOK FOR NON-BLANK\n         BZ    A_GETEND            NO SORT FIELDS FOUND\n         CLC   =C'SEQ=',0(R1)      IS THIS THE SEQUENCE OF FIELDS ?\n         BNE   A_SORT_N            NO - REJECT IT\n         LA    R2,S_FIELDS         POINT TO SORT FIELDS\n         LA    R1,4(,R1)           POINT TO FIRST FIELD NAME\nA_SORT_C CLI   0(R1),C' '          END OF SORT FIELDS ?\n         BE    A_SORT_E            YES - CLOSE OFF SORT COMMAND\n         CLC   =C'CATEGORY',0(R1)  IS THIS CATEGORY ?\n         BE    A_SRTCAT            YES - INSERT SORT INFO\n         CLC   =C'MANUAL',0(R1)    IS THIS MANUAL ?\n         BE    A_SRTMAN            YES - INSERT SORT INFO\n         CLC   =C'VERSION',0(R1)   IS THIS VERSION ?\n         BE    A_SRTVRS            YES - INSERT SORT INFO\n         CLC   =C'CURRENCY',0(R1)  IS THIS CURRENCY ?\n         BE    A_SRTCUR            YES - INSERT SORT INFO\nA_SORT_I MVC   P_MSG,=CL40'INVALID SORT SEQUENCE'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         B     A_GETEND            GET NEXT CONTROL CARD\n         SPACE 2\nA_SRTCAT MVC   1(11,R2),=C'01,08,CH,A,' MOVE IN SORT FIELD\n         LA    R2,11(,R2)          POINT TO NEXT SORT FIELD\n         LA    R1,9(,R1)           POINT TO NEXT SORT FIELD\n         B     A_SORT_C            GET NEXT SORT FIELD\n         SPACE 2\nA_SRTMAN MVC   1(11,R2),=C'09,09,CH,A,' MOVE IN SORT FIELD\n         LA    R2,11(,R2)          POINT TO NEXT SORT FIELD\n         LA    R1,7(,R1)           POINT TO NEXT SORT FIELD\n         B     A_SORT_C            GET NEXT SORT FIELD\n         SPACE 2\nA_SRTVRS MVC   1(11,R2),=C'18,06,CH,A,' MOVE IN SORT FIELD\n         LA    R2,11(,R2)          POINT TO NEXT SORT FIELD\n         LA    R1,8(,R1)           POINT TO NEXT SORT FIELD\n         B     A_SORT_C            GET NEXT SORT FIELD\n         SPACE 2\nA_SRTCUR MVC   1(11,R2),=C'24,01,CH,A,' MOVE IN SORT FIELD\n         LA    R2,11(,R2)          POINT TO NEXT SORT FIELD\n         LA    R1,9(,R1)           POINT TO NEXT SORT FIELD\n         B     A_SORT_C            GET NEXT SORT FIELD\n         SPACE 2\nA_SORT_E CLI   0(R2),C'('          ANY SORT FIELDS SPECIFIED ?\n         BE    A_SORT_I            NO - ABORT THE REPORT\n         MVI   0(R2),C')'          END OF SORT FIELDS\n         B     A_GETEND            GET NEXT CONTROL CARD\n         SPACE 2\nA_SORT_N MVC   P_MSG,=CL40'SORT SEQUENCE MISSING OR INVALID'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         B     A_GETEND            GET NEXT CONTROL CARD\n         SPACE 3\nA_SELECT TM    C_FLAGS,C_LIST+C_REPORT LIST OR REPORT ALREADY FOUND ?\n         BZ    A_OUTSEQ            NO - ABORT THE RUN\n         OI    C_FLAGS,C_SELECT    INDICATE SELECT FOUND\n         LA    R1,7(,R1)           POINT PAST SELECT COMMAND\n         LR    R2,R3               POINT TO END OF CARD\n         SR    R2,R1               GET LENGTH OF REMAINDER\n         EX    R2,A_TRTNB          LOOK FOR NON-BLANK\n         BZ    A_GETEND            NO KEY FIELD FOUND\n         CLC   =C'CATEGORY',0(R1)  IS THIS CATEGORY ?\n         BE    A_SELCAT            YES - SAVE CATEGORY\n         CLC   =C'MANUAL',0(R1)    IS THIS MANUAL ?\n         BE    A_SELMAN            YES - SAVE MANUAL NUMBER\n         CLC   =C'VERSION',0(R1)   IS THIS VERSION ?\n         BE    A_SELVER            YES - SAVE VERSION\n         CLC   =C'CURRENCY',0(R1)  IS THIS CURRENCY ?\n         BE    A_SELCUR            YES - SAVE CURRENCY\n         CLC   =C'PRODUCT',0(R1)   IS THIS PRODUCT ?\n         BE    A_SELPRD            YES - SAVE PRODUCT\n         CLC   =C'TNLLEVEL',0(R1)  IS THIS TNLLEVEL ?\n         BE    A_SELTNL            YES - SAVE TNL LEVEL\n         CLC   =C'COPIES',0(R1)    IS THIS COPIES ?\n         BE    A_SELCPY            YES - SAVE NUMBER OF COPIES\n         CLC   =C'GROUP',0(R1)     IS THIS GROUP ?\n         BE    A_SELGRP            YES - SAVE GROUP NAME\n         CLC   =C'LOCATION',0(R1)  IS THIS LOCATION ?\n         BE    A_SELLOC            YES - SAVE LOCATION\n         CLC   =C'CONTACT',0(R1)   IS THIS CONTACT ?\n         BE    A_SELCON            YES - SAVE CONTACT\n         CLC   =C'STATUS',0(R1)    IS THIS STATUS ?\n         BE    A_SELSTA            YES - SAVE STATUS\n         MVC   P_MSG,=CL40'INVALID SELECT FIELD'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         B     A_GETEND            GET NEXT CONTROL CARD\n         SPACE 3\nA_SELCAT LA    R1,8(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_CATGRY+8       STORE LENGTH\n         MVC   C_CATGRY,1(R1)      STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELMAN LA    R1,6(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_MANUAL+12      STORE LENGTH\n         MVC   C_MANUAL,1(R1)      STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELVER LA    R1,7(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_VERSN+6        STORE LENGTH\n         MVC   C_VERSN,1(R1)       STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELCUR LA    R1,8(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_CURNCY+1       STORE LENGTH\n         MVC   C_CURNCY,1(R1)      STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELPRD LA    R1,7(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_PRDUCT+8       STORE LENGTH\n         MVC   C_PRDUCT,1(R1)      STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELTNL LA    R1,8(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_TNL+9          STORE LENGTH\n         MVC   C_TNL,1(R1)         STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELCPY LA    R1,6(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BNZ   A_SELERR            LENGTH NOT ALLOWED WITH COPIES\n         CLI   1(R1),C'0'          IS THIS NUMERIC ?\n         BL    A_SELERR            NO - INVALID NUMBER OF COPIES\n         CLI   2(R1),C' '          SINGLE DIGIT ?\n         BE    A_SELCP1            YES - STORE VALUE\n         CLI   2(R1),C'0'          SECOND CHARACTER NUMERIC ?\n         BL    A_SELERR            NO - INVALID NUMBER OF COPIES\n         PACK  DBLWORD,1(2,R1)     CONVERT TO PACKED\nA_SELCP2 CVB   R2,DBLWORD          CONVERT TO BINARY\n         STC   R2,C_COPIES         STORE VALUE\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 1\nA_SELCP1 PACK  DBLWORD,1(1,R1)     CONVERT TO PACKED\n         B     A_SELCP2            BACK TO MAIN ROUTINE\n         SPACE 2\nA_SELGRP LA    R1,5(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_GROUP+12       STORE LENGTH\n         MVC   C_GROUP,1(R1)       STORE VALUE\n         OI    C_FLAGS,C_DIST_S    INDICATE DISTRIBUTION FIELD SELECTED\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELLOC LA    R1,8(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_LOCATN+12      STORE LENGTH\n         MVC   C_LOCATN,1(R1)      STORE VALUE\n         OI    C_FLAGS,C_DIST_S    INDICATE DISTRIBUTION FIELD SELECTED\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELCON LA    R1,7(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_CONTCT+12      STORE LENGTH\n         MVC   C_CONTCT,1(R1)      STORE VALUE\n         OI    C_FLAGS,C_DIST_S    INDICATE DISTRIBUTION FIELD SELECTED\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 2\nA_SELSTA LA    R1,6(,R1)           POINT TO LENGTH/VALUE\n         BAL   R9,A_GETLEN         GET LENGTH (IF SPECIFIED)\n         LTR   R2,R2               LENGTH SPECIFIED ?\n         BZ    *+8                 NO - DO NOT STORE\n         STC   R2,C_STATUS+1       STORE LENGTH\n         MVC   C_STATUS,1(R1)      STORE VALUE\n         OI    C_FLAGS,C_DIST_S    INDICATE DISTRIBUTION FIELD SELECTED\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 3\nA_SELERR MVC   P_MSG,=CL40'INVALID VALUE ON SELECT CARD'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         B     A_GETEND            GET ANOTHER CARD\n         SPACE 3\nA_GETLEN SR    R2,R2               NO LENGTH SPECIFIED\n         CLI   0(R1),C'('          IS THERE A LENGTH ?\n         BNER  R9                  NO - RETURN TO CALLER\n         CLI   1(R1),C'0'          IS THIS NUMERIC ?\n         BL    A_SELERR            NO - INVALID LENGTH\n         CLI   2(R1),C')'          SINGLE DIGIT ?\n         BE    A_GETLN1            YES - STORE LENGTH\n         CLI   2(R1),C'0'          SECOND CHARACTER NUMERIC ?\n         BL    A_SELERR            NO - INVALID LENGTH\n         PACK  DBLWORD,1(2,R1)     CONVERT TO PACKED\n         LA    R1,1(,R1)           MOVE 1 COLUMN OVER\nA_GETLN2 CVB   R2,DBLWORD          CONVERT TO BINARY\n         LA    R1,3(,R1)           MOVE 2 COLUMNS OVER\n         BR    R9                  RETURN TO CALLER\n         SPACE 1\nA_GETLN1 PACK  DBLWORD,1(1,R1)     CONVERT TO PACKED\n         B     A_GETLN2            BACK TO MAIN ROUTINE\n         SPACE 3\nA_OUTSEQ MVC   P_MSG,=CL40'CONTROL CARDS OUT OF SEQUENCE'\n         OI    C_FLAGS,C_NO_GO     SET NO-GO FLAG\n         B     A_GETEND            GET NEXT CONTROL CARD\n         SPACE 3\nA_TRTNB  TRT   0(0,R1),TRTNBLNK    LOOK FOR NON-BLANK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF CONTROL CARDS - INVOKE SORT                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nC_EOF    CLOSE (C_CARD)            FINISHED WITH CARD FILE\n         TM    C_FLAGS,C_NO_GO     NO-GO FLAG SET ?\n         BO    Z_NO_GO             REPORT ABORTED\n         TM    C_FLAGS,C_LIST+C_REPORT LIST OR REPORT REQUESTED ?\n         BNM   Z_NO_RUN            NO REQUEST FOUND - ABORT\n         OPEN  (F_FILE,INPUT)      ACCESS DATA BASE\n         TM    F_FILE+DCBOFLGS-IHADCB,DCBOFOPN FILE OPEN SUCCESSFUL ?\n         BZ    Z_NOFILE            NO - ABORT\n         TM    C_FLAGS,C_REPORT    REPORT REQUESTED ?\n         BZ    A_GETDAT            NO - GET CURRENT DATE\n         MVC   S_LENGTH,=C'162'    LENGTH OF REPORT FILE\n         MVC   S_FILSZ,=C'E3000'   FILE SIZE OF REPORT FILE\nA_GETDAT TIME  ,                   GET DATE AND TIME\n         ST    R1,DATE             STORE CURRENT DATE\n         SRL   R1,12               DROP THREE CHARACTERS\n         ST    R1,YEAR             STORE YEAR\n         OI    YEAR+3,X'0F'        PUT IN SIGN\n         DP    YEAR,=P'4'          CHECK FOR LEAP YEAR\n         TM    YEAR+3,X'F0'        ANY REMAINDER ?\n         BNZ   A_NOLEAP            NOT A LEAP YEAR\n         MVC   MONTHS+2,=P'29'     29 DAYS HATH FEBRUARY\nA_NOLEAP LA    R1,MONTHS           POINT TO DAYS PER MONTH\n         LA    R2,1                MONTH NUMBER\nA_MONTH  CP    DATE+2(2),0(2,R1)   IN THIS MONTH ?\n         BNH   A_GOTDAT            YES - UNPACK DATE\n         SP    DATE+2(2),0(2,R1)   SUBTRACT DAYS IN THIS MONTH\n         LA    R1,2(,R1)           POINT TO NEXT MONTH\n         LA    R2,1(,R2)           NEXT MONTH NUMBER\n         B     A_MONTH             TRY NEXT MONTH\n         SPACE 3\nA_GOTDAT ED    L_DATE+6(3),DATE+1  EDIT YEAR\n         CVD   R2,DBLWORD          STORE MONTH NUMBER\n         MP    DBLWORD,=P'10'      SHIFT MONTH LEFT ONE DIGIT\n         ED    L_DATE+3(3),DBLWORD+6 EDIT MONTH\n         MVI   DATE+1,X'00'        REMOVE YEAR\n         MP    DATE,=P'10'         SHIFT DAYS LEFT ONE DIGIT\n         ED    L_DATE(3),DATE+2    EDIT DAYS\n         MVI   L_DATE,C'1'         CARRIAGE CONTROL\n         MVI   L_DATE+3,C'/'       DEMIMITER\n         MVI   L_DATE+6,C'/'       DEMIMITER\n         MVC   R_DATE,L_DATE       COPY TO REPORT HEADER\n         LA    R1,S_PARM           POINT TO SORT PARM LIST\n         LINK  EP=SORT             INVOKE SORT\n         CLOSE P_PRINT             FINISHED WITH PRINT FILE\n         B     RETURN              RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OUT OF LINE ROUTINES                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nZ_NPRINT WTO   'LMMP299E  ERROR OPENING SYSPRINT - REPORT CANCELLED',  X\n               ROUTCDE=11\n         MVC   LASTCC,=H'12'       SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\nZ_NOCARD MVC   P_NO_DDN,=CL8'SYSIN' MOVE DDNAME INTO MESSAGE\n         PUT   P_PRINT,P_NO_DD     WRITE OUT ERROR MESSAGE\n         CLOSE P_PRINT             CLOSE PRINT FILE\n         MVC   LASTCC,=H'12'       SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\nZ_NOFILE MVC   P_NO_DDN,=CL8'MMPFILE' MOVE DDNAME INTO MESSAGE\n         PUT   P_PRINT,P_NO_DD     WRITE OUT ERROR MESSAGE\n         CLOSE P_PRINT             CLOSE PRINT FILE\n         MVC   LASTCC,=H'12'       SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\nZ_NO_GO  PUT   P_PRINT,P_NO_GO     WRITE OUT ERROR MESSAGE\n         CLOSE P_PRINT             CLOSE PRINT FILE\n         MVC   LASTCC,=H'8'        SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\nZ_NO_RUN PUT   P_PRINT,P_NO_RUN    WRITE OUT ERROR MESSAGE\n         CLOSE P_PRINT             CLOSE PRINT FILE\n         MVC   LASTCC,=H'8'        SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        END OF PROGRAM - RETURN TO CALLER                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRETURN   LH    R15,LASTCC          PICK UP RETURN CODE\n         L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SORT E15 EXIT - INSERT RECORDS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nMMP02E15 DS    0D\n         DROP  R10,R11,R12\n         SAVE  (14,12),,'MMP02E15 &SYSDATE &SYSTIME'\n         LR    R11,R15             LOAD BASE REGISTER\n         USING MMP02E15,R11        ESTABLISH E15 BASE REGISTER\n         LA    R10,MMP02E35        LOAD BASE REGISTER\n         USING MMP02E35,R10        ESTABLISH E35 BASE REGISTER\n         LA    R2,EXITSAVE         POINT TO REGISTER SAVE AREA\n         ST    R13,4(,R2)          CHAIN SAVE AREAS BACKWARD\n         ST    R2,8(,R13)          CHAIN SAVE AREAS FORWARD\n         LR    R13,R2              POINT TO REGISTER SAVE AREA\n         LA    R9,S_WORK           POINT TO WORK AREA\n         USING S_RECORD,R9         MAP SORT RECORD\n         SR    R2,R2               ZEROISE REGISTER\n         CLI   E_SAVE+3,0          IS THERE AN INCOMPLETE RECORD ?\n         BE    E_GETF              NO - READ ANOTHER RECORD\n         LM    R3,R5,E_SAVE        RELOAD REGISTERS\n         B     E_NXTCPY            PROCESS NEXT DISTRIBUTION RECORD\n         SPACE 3\nE_GETF   GET   F_FILE              READ A RECORD\n         CLI   4(R1),0             IS THIS THE FILE HEADER ?\n         BE    E_HEADER            YES - PRINT DETAILS\n         LA    R5,4(R1)            POINT TO FIXED PORTION OF RECORD\n         USING F_FIX,R5            MAP FIXED FIELDS\n         TM    C_FLAGS,C_SELECT    ANY SELECT CARDS ENTERED ?\n         BZ    E_OK_FIX            NO - BYPASS SELECTION ROUTINES\n         CLI   C_CATGRY,0          SELECT ON CATEGORY ?\n         BZ    E_CHKMAN            NO - CHECK MANUAL NUMBER\n         IC    R2,C_CATGRY+8       PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCCAT         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKMAN CLI   C_MANUAL,0          SELECT ON MANUAL NUMBER ?\n         BZ    E_CHKVER            NO - CHECK VERSION\n         IC    R2,C_MANUAL+12      PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCMAN         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKVER CLI   C_VERSN,0           SELECT ON VERSION ?\n         BZ    E_CHKCUR            NO - CHECK CURRENCY\n         IC    R2,C_VERSN+6        PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCVER         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKCUR CLI   C_CURNCY,0          SELECT ON CURRENCY ?\n         BZ    E_CHKPRD            NO - CHECK PRODUCT\n         IC    R2,C_CURNCY+1       PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCCUR         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKPRD CLI   C_PRDUCT,0          SELECT ON PRODUCT ?\n         BZ    E_CHKTNL            NO - CHECK TNL LEVEL\n         IC    R2,C_PRDUCT+9       PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCPRD         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKTNL CLI   C_TNL,0             SELECT ON TNL LEVEL ?\n         BZ    E_CHKCPY            NO - CHECK NUMBER OF COPIES\n         IC    R2,C_TNL+9          PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCTNL         DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         SPACE 1\nE_CHKCPY CLI   C_COPIES,X'FF'      SELECT ON NUMBER OF COPIES ?\n         BZ    E_OK_FIX            NO - CHECK DISTRIBUTION INFORMATION\n         CLC   F_COPIES,C_COPIES   DOES THIS MATCH ?\n         BNE   E_GETF              NO - BYPASS THIS RECORD\n         B     E_OK_FIX            CHECK DISTRIBUTION INFORMATION\n         SPACE 3\nE_CLCCAT CLC   C_CATGRY(0),F_CATGRY\nE_CLCMAN CLC   C_MANUAL(0),F_MANUAL\nE_CLCVER CLC   C_VERSN(0),F_VERSN\nE_CLCCUR CLC   C_CURNCY(0),F_CURNCY\nE_CLCPRD CLC   C_PRDUCT(0),F_PRDUCT\nE_CLCTNL CLC   C_TNL(0),F_TNL\n         SPACE 3\nE_OK_FIX SR    R3,R3               ZEROISE REGISTER\n         IC    R3,F_COPIES         PICK UP NUMBER OF COPIES\n         LTR   R3,R3               ARE THERE ANY COPIES ?\n         BZ    E_GETF              NO COPIES TO SELECT FROM !\n         LA    R4,F_FIXLEN(R5)     POINT TO VARIABLE PORTION OF RECORD\n         USING F_VAR,R4            MAP VARIABLE FIELDS\nE_REPEAT TM    C_FLAGS,C_DIST_S    SELECT ON DISTRIBUTION INFORMATION ?\n         BZ    E_SELECT            NO - THIS RECORD IS SELECTED\n         CLI   C_GROUP,0           SELECT ON GROUP ?\n         BZ    E_CHKLOC            NO - CHECK LOCATION\n         IC    R2,C_GROUP+12       PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCGRP         DOES THIS MATCH ?\n         BNE   E_NXTCPY            NO - CHECK NEXT COPY\n         SPACE 1\nE_CHKLOC CLI   C_LOCATN,0          SELECT ON LOCATION ?\n         BZ    E_CHKCON            NO - CHECK CONTACT\n         IC    R2,C_LOCATN+12      PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCLOC         DOES THIS MATCH ?\n         BNE   E_NXTCPY            NO - CHECK NEXT COPY\n         SPACE 1\nE_CHKCON CLI   C_CONTCT,0          SELECT ON CONTACT ?\n         BZ    E_CHKSTA            NO - CHECK STATUS\n         IC    R2,C_CONTCT+12      PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCCON         DOES THIS MATCH ?\n         BNE   E_NXTCPY            NO - CHECK NEXT COPY\n         SPACE 1\nE_CHKSTA CLI   C_STATUS,0          SELECT ON STATUS ?\n         BZ    E_SELECT            NO - THIS RECORD IS SELECTED\n         IC    R2,C_STATUS+1       PICK UP LENGTH\n         BCTR  R2,0                DECREASE FOR EXECUTE\n         EX    R2,E_CLCSTA         DOES THIS MATCH ?\n         BNE   E_NXTCPY            NO - CHECK NEXT COPY\n         B     E_SELECT            THIS RECORD IS SELECTED\n         SPACE 3\nE_CLCGRP CLC   C_GROUP(0),F_GROUP\nE_CLCLOC CLC   C_LOCATN(0),F_LOCATN\nE_CLCCON CLC   C_CONTCT(0),F_CONTCT\nE_CLCSTA CLC   C_STATUS(0),F_STATUS\n         SPACE 3\nE_NXTCPY LA    R4,F_VARLEN(R4)     POINT TO NEXT DISTRIBUTION RECORD\n         BCT   R3,E_REPEAT         CHECK NEXT COPY\n         B     E_GETF              NO MORE COPIES - GET ANOTHER RECORD\n         SPACE 3\nE_SELECT MVC   S_CATGRY,F_CATGRY   MOVE CATEGORY TO SORT RECORD\n         MVC   S_MANNO(3),F_MANUAL+1 DROP USAGE CODE\n         MVC   S_MANNO+3(4),F_MANUAL+5 DROP HYPHEN\n         MVC   S_MANNO+7(2),F_MANUAL+10 MOVE IN VERSION\n         CLI   S_MANNO+8,C' '      TWO DIGIT VERSION ?\n         BNE   *+14                YES - BYPASS 2 INSTRUCTIONS\n         MVC   S_MANNO+8(1),S_MANNO+8 MOVE VERSION\n         MVI   S_MANNO+7,C'0'      FILL IN HIGH ORDER DIGIT\n         MVC   S_VERSN,F_VERSN     MOVE VERSION TO SORT RECORD\n         MVC   S_CURNCY,F_CURNCY   MOVE CURRENCY TO SORT RECORD\n         TM    C_FLAGS,C_REPORT    IS THIS A REPORT ?\n         BO    E_REPORT            YES - OUTPUT REPORT FIELDS\n         MVC   S_L_MAN,F_MANUAL    MOVE MANUAL NUMBER TO SORT RECORD\n         MVC   S_L_DESC,F_DESC     MOVE DESCRIPTION TO SORT RECORD\n         B     E_INSERT            INSERT RECORD INTO SORT\n         SPACE 2\nE_REPORT MVC   S_R_PROD,F_PRDUCT   MOVE PRODUCT TO SORT RECORD\n         MVC   S_R_TNL,F_TNL       MOVE TNL LEVEL TO SORT RECORD\n         MVC   S_R_CPYS,F_COPIES   MOVE NUMBER OF COPIES TO SORT RECORD\n         MVC   S_R_GRP,F_GROUP     MOVE GROUP TO SORT RECORD\n         MVC   S_R_LOCN,F_LOCATN   MOVE LOCATION TO SORT RECORD\n         MVC   S_R_CONT,F_CONTCT   MOVE CONTACT TO SORT RECORD\n         MVC   S_R_STAT,F_STATUS   MOVE STATUS TO SORT RECORD\n         MVC   S_R_MAN,F_MANUAL    MOVE MANUAL NUMBER TO SORT RECORD\n         MVC   S_R_DESC,F_DESC     MOVE DESCRIPTION TO SORT RECORD\n         STM   R3,R5,E_SAVE        SAVE NUMBER OF COPIES AND ADDRESS\nE_INSERT LR    R1,R9               POINT TO RECORD TO BE INSERTED\n         L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         LM    R14,R0,12(R13)      RESTORE REGISTERS 14 THRU 0\n         RETURN (2,12),RC=12       RESTORE 2 THRU 12 AND INSERT RECORD\n         SPACE 3\nE_HEADER ED    P_UP_TME,24(R1)     MOVE LAST UPDATE TIME TO PRINT LINE\n         ED    P_UP_DTE,29(R1)     MOVE LAST UPDATE DATE TO PRINT LINE\n         PUT   P_PRINT,P_UPDATE    PUT OUT LAST UPDATED MESSAGE\n         B     E_GETF              GET NEXT RECORD\n         EJECT\nF_EOF    CLOSE (F_FILE)            ALL DATA READ IN\n         TM    C_FLAGS,C_REPORT    IS THIS A REPORT ?\n         BO    E_OPEN_R            YES - OPEN REPORT FILE\n         OPEN  (L_LIST,OUTPUT)     OPEN LIST FILE\n         TM    L_LIST+DCBOFLGS-IHADCB,DCBOFOPN LIST OPEN SUCCESSFUL ?\n         BZ    E_NOLIST            NO - ABORT\n         B     E_F_EOF             INDICATE END OF FILE\n         SPACE 3\nE_OPEN_R OPEN  (R_REPORT,OUTPUT)   OPEN REPORT FILE\n         TM    R_REPORT+DCBOFLGS-IHADCB,DCBOFOPN PRINT OPEN SUCCESSFUL?\n         BZ    E_NOREPT            NO - ABORT\nE_F_EOF  L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=8       INDICATE END OF FILE\n         SPACE 3\nE_NOLIST MVC   P_NO_DDN,=CL8'MMPLIST' MOVE DDNAME INTO MESSAGE\n         PUT   P_PRINT,P_NO_DD     WRITE OUT ERROR MESSAGE\n         B     E_ABORT             RETURN TO CALLER\n         SPACE 3\nE_NOREPT MVC   P_NO_DDN,=CL8'MMPPRINT' MOVE DDNAME INTO MESSAGE\n         PUT   P_PRINT,P_NO_DD     WRITE OUT ERROR MESSAGE\n         B     E_ABORT             RETURN TO CALLER\n         SPACE 3\nE_ABORT  MVC   LASTCC,=H'12'       SET RETURN CODE\n         L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=16      ABORT SORT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SORT E35 EXIT - PRINT REPORT                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nMMP02E35 DS    0D\n         DROP  R10,R11\n         SAVE  (14,12),,'MMP02E35 &SYSDATE &SYSTIME'\n         LR    R10,R15             LOAD BASE REGISTER\n         USING MMP02E35,R10        ESTABLISH E35 BASE REGISTER\n         LA    R2,EXITSAVE         POINT TO REGISTER SAVE AREA\n         ST    R13,4(,R2)          CHAIN SAVE AREAS BACKWARD\n         ST    R2,8(,R13)          CHAIN SAVE AREAS FORWARD\n         LR    R13,R2              POINT TO REGISTER SAVE AREA\n         L     R9,0(R1)            PICK UP OUTPUT RECORD\n         LTR   R9,R9               IS THERE A RECORD ?\n         BZ    E_EOF               NO - END OF SORT\n         TM    C_FLAGS,C_REPORT    IS THIS A REPORT ?\n         BO    E_PRT_R             YES - PRINT REPORT DETAIL\n         CP    LINECNT,=P'60'      NEW PAGE REQUIRED ?\n         BNH   E_L_LINE            NO - PRINT DETAIL LINE\n         AP    PAGECNT,=P'1'       INCREMENT PAGE NUMBER\n         MVC   L_PAGE,=X'40202120' PAGE NUMBER EDIT MASK\n         ED    L_PAGE,PAGECNT      FORMAT PAGE NUMBER\n         PUT   L_LIST,L_HEADER     PRINT PAGE HEADING\n         PUT   L_LIST,L_HEAD2      PRINT COLUMN HEADING\n         ZAP   LINECNT,=P'5'       RESET LINE COUNT\n         MVI   L_DETAIL,C'0'       SET CARRIAGE CONTROL\nE_L_LINE MVC   L_CATGRY,S_CATGRY   MOVE OVER CATEGORY\n         MVC   L_MANNO,S_L_MAN     MOVE OVER MANUAL NUMBER\n         MVC   L_VERSN,S_VERSN     MOVE OVER VERSION\n         MVC   L_CURNCY,S_CURNCY   MOVE OVER CURRENCY\n         MVC   L_DESC,S_L_DESC     MOVE OVER DESCRIPTION\n         PUT   L_LIST,L_DETAIL     PRINT DETAIL LINE\n         AP    LINECNT,=P'1'       INCREASE LINE COUNT\n         MVI   L_DETAIL,C' '       SET CARRIAGE CONTROL\n         B     E_DELETE            DISPOSE OF RECORD\n         SPACE 3\nE_PRT_R  CP    LINECNT,=P'70'      NEW PAGE REQUIRED ?\n         BNH   E_R_LINE            NO - PRINT DETAIL LINE\n         AP    PAGECNT,=P'1'       INCREMENT PAGE NUMBER\n         MVC   R_PAGE,=X'40202120' PAGE NUMBER EDIT MASK\n         ED    R_PAGE,PAGECNT      FORMAT PAGE NUMBER\n         PUT   R_REPORT,R_HEADER   PRINT PAGE HEADING\n         PUT   R_REPORT,R_HEAD2    PRINT COLUMN HEADING\n         ZAP   LINECNT,=P'5'       RESET LINE COUNT\nE_R_LINE CLC   MANUALNO,S_MANNO    IS THIS THE SAME MANUAL NUMBER ?\n         BE    E_R_DIST            YES - PRINT ONLY DISTRIBUTION INFO.\n         MVC   R_CATGRY,S_CATGRY   MOVE OVER CATEGORY\n         MVC   R_MANNO,S_R_MAN     MOVE OVER MANUAL NUMBER\n         MVC   R_VERSN,S_VERSN     MOVE OVER VERSION\n         MVC   R_CURNCY,S_CURNCY   MOVE OVER CURRENCY\n         MVC   R_PRDUCT,S_R_PROD   MOVE OVER PRODUCT\n         MVC   R_TNL,S_R_TNL       MOVE OVER TNL LEVEL\n         SR    R2,R2               ZEROISE REGISTER\n         IC    R2,S_R_CPYS         PICK UP NUMBER OF COPIES\n         CVD   R2,DBLWORD          CONVERT TO PACKED\n         MVC   R_COPIES,=X'40212020' MOVE IN EDIT MASK\n         ED    R_COPIES,DBLWORD+6  CONVERT TO DISPLAY\n         MVC   R_DESC,S_R_DESC     MOVE OVER DESCRIPTION\n         PUT   R_REPORT,R_DETAIL   PRINT DETAIL LINE\n         AP    LINECNT,=P'2'       INCREASE LINE COUNT\n         MVI   L_DETAIL,C' '       SET CARRIAGE CONTROL\n         MVC   MANUALNO,S_MANNO    SAVE MANUAL NUMBER\nE_R_DIST MVC   R_GROUP,S_R_GRP     MOVE OVER GROUP\n         MVC   R_LOCTN,S_R_LOCN    MOVE OVER LOCATION\n         MVC   R_CONTCT,S_R_CONT   MOVE OVER CONTACT\n         MVC   R_STATUS,S_R_STAT   MOVE OVER STATUS\n         PUT   R_REPORT,R_DIST     PRINT DISTRIBUTION DETAIL\n         AP    LINECNT,=P'1'       INCREASE LINE COUNT\n         B     E_DELETE            DISPOSE OF RECORD\n         SPACE 3\nE_DELETE L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=4       DISPOSE OF RECORD JUST PRINTED\n         SPACE 3\nE_EOF    TM    C_FLAGS,C_REPORT    IS THIS A REPORT ?\n         BO    E_CLOS_R            YES - CLOSE REPORT FILE\n         CLOSE (L_LIST)            CLOSE LIST FILE\n         B     E_E_EOF             END OF SORT\n         SPACE 3\nE_CLOS_R CLOSE (R_REPORT)          CLOSE REPORT FILE\nE_E_EOF  L     R13,4(,R13)         PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=8       INDICATE END OF FILE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAVE AREA, FILES, ETC.                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA - MAIN PROGRAM\nEXITSAVE DC    18F'0'              REGISTER SAVE AREA - E15 AND E35\nE_SAVE   DC    3F'0'               SAVE POINTER REGISTERS\n         SPACE 3\n         PRINT NOGEN\nP_PRINT  DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      X\n               LRECL=133,RECFM=FBA,BLKSIZE=3059\nC_CARD   DCB   DDNAME=SYSIN,EODAD=C_EOF,MACRF=GL,DSORG=PS\nF_FILE   DCB   DDNAME=MMPFILE,EODAD=F_EOF,MACRF=GL,DSORG=PS\nL_LIST   DCB   DDNAME=MMPLIST,MACRF=PM,DSORG=PS,                       X\n               LRECL=101,RECFM=FBA,BLKSIZE=3131\nR_REPORT DCB   DDNAME=MMPPRINT,MACRF=PM,DSORG=PS,                      X\n               LRECL=133,RECFM=FBA,BLKSIZE=3059\n         PRINT GEN\n         SPACE 3\nC_FLAGS  DS    X'00'               CONTROL CARD FLAG BYTE\nC_LIST   EQU   X'80'               LIST REQUESTED\nC_REPORT EQU   X'40'               REPORT REQUESTED\nC_SORT   EQU   X'20'               SORT REQUESTED\nC_SELECT EQU   X'10'               SELECT REQUESTED\nC_DIST_S EQU   X'08'               SELECTION ON DISTRIBUTION INFO.\nC_NO_GO  EQU   X'01'               ERROR ENCOUNTERED - ABORT PROGRAM\n         SPACE 1\nC_CATGRY DC    XL8'00',AL1(8)      SELECTED CATEGORY, LENGTH\nC_MANUAL DC    XL12'00',AL1(12)    SELECTED MANUAL NUMBER, LENGTH\nC_VERSN  DC    XL6'00',AL1(6)      SELECTED VERSION, LENGTH\nC_CURNCY DC    XL1'00',AL1(1)      SELECTED CURRENCY, LENGTH\nC_PRDUCT DC    XL8'00',AL1(8)      SELECTED PRODUCT, LENGTH\nC_TNL    DC    XL9'00',AL1(9)      SELECTED TNL LEVEL, LENGTH\nC_COPIES DC    AL1(-1)             SELECTED NUMBER OF COPIES\nC_GROUP  DC    XL12'00',AL1(12)    SELECTED GROUP, LENGTH\nC_LOCATN DC    XL12'00',AL1(12)    SELECTED LOCATION, LENGTH\nC_CONTCT DC    XL12'00',AL1(12)    SELECTED CONTACT, LENGTH\nC_STATUS DC    XL1'00',AL1(1)      SELECTED STATUS, LENGTH\n         SPACE 3\nL_HEADER DS    0CL101\nL_DATE   DC    X'F02020F02020F02020'\n         DC    CL13' '\nL_TITLE  DC    CL71'LISTING OF IBM MANUALS IN CATEGORY SEQUENCE'\n         DC    C'PAGE'\nL_PAGE   DC    C' 000'\n         SPACE 1\nL_HEAD2  DC    CL101'-CATEGORY MANUAL NO.   VERSION DESCRIPTION'\n         SPACE 1\nL_DETAIL DS    0CL101\n         DC    C' '\nL_CATGRY DS    CL8\n         DC    C' '\nL_MANNO  DS    CL12\n         DC    C' '\nL_VERSN  DS    CL6\nL_CURNCY DS    CL1\n         DC    C' '\nL_DESC   DS    CL70\n         SPACE 3\nP_HEADER DC    CL133'1LMMP0200                              LEB MANUAL X\n               MANAGEMENT FACILITY - REPORT PROGRAM'\n         SPACE 1\nP_DETAIL DC    C'0CARD ==>'\nP_CARD   DS    CL80\n         DC    C'<== '\nP_MSG    DS    CL40\n         SPACE 1\nP_UPDATE DC    C'-LMMP201I  FILE LAST UPDATED AT'\nP_UP_TME DC    X'4021204B20204B2020'\n         DC    C' ON'\nP_UP_DTE DC    X'4021204B202020'\n         DC    CL83' '\n         SPACE 1\nP_NO_GO  DC    CL133'-LMMP290E  DUE TO THE ABOVE ERRORS, THE REPORT HASX\n                BEEN CANCELLED'\n         SPACE 1\nP_NO_RUN DC    CL133'-LMMP291E  NO LIST OR PRINT COMMAND FOUND - REPORTX\n                CANCELLED'\n         SPACE 1\nP_NO_DD  DC    CL25'-LMMP298E  ERROR OPENING '\nP_NO_DDN DC    CL8' '\n         DC    CL100' - REPORT CANCELLED'\n         SPACE 3\nR_HEADER DS    0CL133\nR_DATE   DC    X'F02020F02020F02020'\n         DC    CL29' '\nR_TITLE  DC    CL87'LISTING OF IBM MANUALS IN CATEGORY SEQUENCE'\n         DC    C'PAGE'\nR_PAGE   DC    C' 000'\n         SPACE 1\nR_HEAD2  DC    CL133'-CATEGORY  MANUAL NO.    VERSION  PRODUCT   TNL LEX\n               VEL  COPIES  DESCRIPTION             GROUP         LOCATX\n               ION      CONTACT     STATUS'\n         SPACE 1\nR_DETAIL DS    0CL133\n         DC    C'0'\nR_CATGRY DS    CL8\n         DC    CL2' '\nR_MANNO  DS    CL12\n         DC    CL2' '\nR_VERSN  DS    CL6\nR_CURNCY DS    CL1\n         DC    CL2' '\nR_PRDUCT DS    CL8\n         DC    CL2' '\nR_TNL    DS    CL9\n         DC    CL2' '\nR_COPIES DS    CL4\n         DC    CL4' '\nR_DESC   DS    CL70\n         SPACE 1\nR_DIST   DS    0CL133\n         DC    CL87' '\nR_GROUP  DS    CL12\n         DC    CL2' '\nR_LOCTN  DS    CL12\n         DC    CL2' '\nR_CONTCT DS    CL12\n         DC    CL2' '\nR_STATUS DS    CL1\n         DC    CL3' '\n         SPACE 3\nS_PARM   DC    A(S_CONTRL)         ADDRESS OF SORT CONTROL STATEMENTS\n         DC    A(MMP02E15)         ADDRESS OF E15 ROUTINE\n         DC    A(MMP02E35)         ADDRESS OF E35 ROUTINE\n         DC    F'-1'               END OF LIST\n         SPACE 1\nS_CONTRL DC    AL2(S_END-S_SORT)   LENGTH OF SORT CONTROL STATEMENTS\nS_SORT   DC    C' SORT FIELDS='    SORT STATEMENT\nS_FIELDS DC    CL46'(01,17,CH,A)'  SORT FIELDS (ALLOW FOR 4 @ 11 CHARS)\n         DC    C' RECORD TYPE=F,LENGTH=(' RECORD STATEMENT\nS_LENGTH DC    C'106'              SORT RECORD LENGTH\n         DC    C') '               END OF RECORD STATEMENT\n         DC    C' OPTION EQUALS,RESINV=48K,FILSZ=' OPTION STATEMENT\nS_FILSZ  DC    C'E1000'            FILE SIZE\n         DC    C' '                END OF OPTION STATEMENT\nS_END    EQU   *                   END OF SORT CONTROL STATEMENTS\n         SPACE 1\nS_WORK   DS    CL(S_RECLEN)        WORK AREA FOR SORT RECORDS\n         SPACE 3\nDBLWORD  DS    D\nDATE     DS    F\nYEAR     DS    F\nMONTHS   DC    P'31,28,31,30,31,30,31,31,30,31,30,31'\nMANUALNO DC    CL9' '              SAVED MANUAL NUMBER\n         DC    CL3' '              FILLER\nLASTCC   DC    H'0'                RETURN CODE\nLINECNT  DC    P'99'               LINE COUNT\nPAGECNT  DC    PL2'0'              PAGE COUNT\nTRTNBLNK DC    256X'FF'\n         ORG   TRTNBLNK+C' '       SEARCH FOR NON-BLANK\n         DC    X'00'\n         ORG\n         SPACE 3\n         LTORG\n         SPACE 3\nF_FIX    DSECT ,                   FIXED PORTION OF RECORD\nF_CATGRY DS    CL8                 CATEGORY\nF_MANUAL DS    CL12                MANUAL NUMBER\nF_PRDUCT DS    CL8                 PRODUCT\nF_TNL    DS    CL9                 LATEST TECHNICAL NEWSLETTER\nF_DESC   DS    CL70                DESCRIPTION\nF_VERSN  DS    CL6                 MANUAL VERSION\nF_CURNCY DS    CL1                 CURRENT VERSION INDICATOR\nF_COPIES DS    BL1                 NUMBER OF COPIES (BINARY)\nF_FIXLEN EQU   *-F_FIX             LENGTH OF FIXED PORTION OF RECORD\n         SPACE 1\nF_VAR    DSECT ,                   VARIABLE PORTION OF RECORD\nF_GROUP  DS    CL12                GROUP\nF_CONTCT DS    CL12                CONTACT\nF_LOCATN DS    CL12                LOCATION\nF_STATUS DS    CL1                 STATUS\nF_VARLEN EQU   *-F_VAR             LENGTH OF VARIABLE PORTION OF RECORD\n         SPACE 3\nS_RECORD DSECT ,                   SORT RECORD - COMMON FIELDS\nS_CATGRY DS    CL8                 CATEGORY\nS_MANNO  DS    CL9                 MANUAL NUMBER - KEY FIELDS ONLY\nS_VERSN  DS    CL6                 MANUAL VERSION\nS_CURNCY DS    CL1                 CURRENT VERSION INDICATOR\n         ORG   ,                   SORT RECORD FOR LIST\nS_L_MAN  DS    CL12                MANUAL NUMBER\nS_L_DESC DS    CL70                DESCRIPTION\n         ORG   S_CURNCY+L'S_CURNCY SORT RECORD FOR REPORT\nS_R_PROD DS    CL8                 PRODUCT\nS_R_TNL  DS    CL9                 LATEST TECHNICAL NEWSLETTER\nS_R_CPYS DS    BL1                 NUMBER OF COPIES\nS_R_GRP  DS    CL12                GROUP\nS_R_LOCN DS    CL12                LOCATION\nS_R_CONT DS    CL12                CONTACT\nS_R_STAT DS    CL1                 STATUS\nS_R_MAN  DS    CL12                NANUAL NUMBER\nS_R_DESC DS    CL70                DESCRIPTION\nS_RECLEN EQU   *-S_RECORD          LENGTH OF SORT RECORD\n         SPACE 3\n         PRINT NOGEN\n         YREGS\n         DCBD  DSORG=PS,DEVD=DA\n         END   LMMP0200\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01RACXT": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00'\\x00'\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "UKGUIDE"}, "text": "RACXTRT  CSECT\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING RACXTRT,R12\n         LA    R10,SAVEAREA\n         ST    R10,8(R13)\n         ST    R13,4(R10)\n         LR    R13,R10\n         SPACE 1\n         L     R1,0(R1)\n         LA    R15,8\n         CLC   =H'0',0(R1)         ANY PARM ?\n         BE    RETURN\n         CLC   =H'8',0(R1)         1-8 CHARACTERS ?\n         BL    RETURN\n         LH    R10,0(R1)           PICK UP LENGTH\n         BCTR  R10,0               MINUS 1 FOR EXECUTE\n         EX    R10,MOVEUSER\n         MVC   MESSAGE+9(8),USERID\n         RACXTRT TYPE=EXTRACT,ENTITY=USERID,SUBPOOL=1,                 X\n               FIELDS=FLDLIST,RELEASE=1.8\n         LR    R10,R15             SAVE RETURN CODE\n         MVC   MESSAGE+18(8),32(R1) DEFAULT GROUP\n         LH    R15,4(,R1)          PICK UP OFFSET\n         AR    R1,R15              ADDRESS OF VALUES\n         MVC   MESSAGE+27(20),4(R1) USER NAME\nMESSAGE  WTO   '/......../......../..................../',ROUTCDE=11\n         FREEMAIN R,SP=1\n         LR    R15,R10\n         L     R13,4(R13)\nRETURN   RETURN (14,12),RC=(15)\n         SPACE 3\nMOVEUSER MVC   USERID(0),2(R1)\nSAVEAREA DC    18F'0'\nFLDLIST  DC    A(1)                NUMBER OF FIELDS TO RETURN\n         DC    CL8'PGMRNAME'       RETURN USER NAME\nUSERID   DC    CL8' '\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01RCORE": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xb2\\x00\\xb2\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 178, "newlines": 178, "modlines": 0, "user": "UKGUIDE"}, "text": "REALCORE TITLE 'DISPLAY ALLOCATED PAGE FRAME COUNTS FOR SPECIFIED JOBS'\n***********************************************************************\n*                                                                     *\n*   REALCORE                                                          *\n*   ========                                                          *\n*                                                                     *\n*   DESCRIPTION :-  THIS PROGRAM WILL SCAN THROUGH THE ASCB CHAIN TO  *\n*                   FIND SPECIFIED JOBNAMES, AND THEN PRINT OUT THE   *\n*                   NUMBER OF FRAMES OF REAL CORE THEY ARE USING.     *\n*                   THIS PROCESS IS REPEATED AT TEN SECOND INTERVALS, *\n*                   FOR A SPECIFIED ELAPSED TIME.                     *\n*                                                                     *\n*                                                                     *\n*   METHOD OF USE :-  //  EXEC PGM=REALCORE,PARM='NNNNXXXXXXXX...'    *\n*                     //PRINTOUT DD SYSOUT=*                          *\n*                                                                     *\n*                 WHERE  NNNN = NUMBER OF MINUTES JOB IS TO RUN.      *\n*                    XXXXXXXX = JOBNAME(S) TO REPORT ON.  MINIMUM 1,  *\n*                               MAXIMUM 12, ALL EXACTLY 8 CHARACTERS. *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE :-                                                 *\n*                                                                     *\n*      R0   -                                                         *\n*      R1   -                                                         *\n*      R2   -                                                         *\n*      R2   -                                                         *\n*      R3   -                                                         *\n*      R4   -                                                         *\n*      R5   -                                                         *\n*      R6   -                                                         *\n*      R7   -  NUMBER TIMER INTERVALS LEFT                            *\n*      R8   -  ASCBJBNI/ASCBJBNS/ASCBFMCT                             *\n*      R9   -  POINTER TO ASBC                                        *\n*      R10  -  POINTER TO CVT/ASVT                                    *\n*      R11  -                                                         *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -                                                         *\n*      R15  -  RETURN CODE                                            *\n*                                                                     *\n*   RETURN CODES  :-  0 = NORMAL COMPLETION                           *\n*                    16 = INVALID PARM SPECIFIED                      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nREALCORE CSECT\n         SAVE  (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH -\n         USING REALCORE,R12        BASE REGISTER\n         LR    R10,R1              SAVE PARAMETER LIST\n         GETMAIN R,LV=WORKLEN      GET SAVE/WORK AREA\n         ST    R1,8(R13)           CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R1)           CHAIN SAVE AREAS BACKWARD\n         LR    R13,R1              ADDRESS -\n         USING WORKAREA,R13        SAVE AREA\n         LR    R1,R10              RESTORE PARAMETER LIST\n         EJECT\n         L     R1,0(R1)            POINT TO JOB PARM\n         LH    R3,0(R1)            PICK UP PARM LENGTH\n         SH    R3,=H'4'            SUBTRACT LENGTH OF TIME\n         SR    R2,R2               ZEROISE THE EVEN REGISTER\n         D     R2,=F'8'            DIVIDE BY LENGTH OF JOBNAME\n         LTR   R2,R2               CHECK FOR ZERO REMAINDER\n         BNZ   ABORT               WRONG - ABORT\n         LTR   R3,R3               CHECK FOR NO JOBNAMES\n         BZ    ABORT               WRONG - ABORT\n         SPACE 3\n         PACK  PACKED,2(4,R1)      PICK UP ELAPSED TIME IN MINUTES\n         MP    PACKED,=P'6'        CONVERT TO 10 SECOND INTERVALS\n         CVB   R7,PACKED           STORE IN WORK REGISTER\n         LA    R1,6(R1)            POINTER TO FIRST JOBNAME\n         LA    R2,JOBNAMES         POINTER TO FIRST STORAGE ADDRESS\nSTOREJOB MVC   0(8,R2),0(R1)       STORE JOBNAME IN TABLE\n         LA    R1,8(R1)            POINTER TO NEXT JOBNAME\n         LA    R2,8(R2)            POINTER TO NEXT STORAGE ADDRESS\n         BCT   R3,STOREJOB         DECREMENT COUNTER OF JOBNAMES\n         MVI   0(R2),X'FF'         INDICATE END OF JOBNAMES\n         SPACE 3\n         OPEN  (PRINTOUT,OUTPUT)   OPEN PRINT FILE\n         MVC   PRLINE(2),=CL2'1 '  INITIALISE HEADING LINE\n         MVC   PRLINE+2(131),PRLINE+1\n         TIME  ,                   GET CURRENT DATE\n         ST    R1,PACKED           STORE DATE\n         MVC   PRLINE+1(7),=X'4021204B202020' SET UP EDIT MASK\n         ED    PRLINE+1(7),PACKED+1 EDIT DATE INTO HEADING LINE\n         LA    R1,JOBNAMES         POINTER TO FIRST JOBNAME\n         LA    R2,PRLINE+12        POINTER TO FIRST PRINT ADDRESS\nPRINTJOB MVC   0(8,R2),0(R1)       MOVE JOBNAME TO PRINT LINE\n         LA    R1,8(R1)            POINTER TO NEXT JOBNAME\n         LA    R2,10(R2)           POINTER TO NEXT PRINT ADDRESS\n         CLI   0(R1),X'FF'         TEST FOR END OF JOBNAMES\n         BNE   PRINTJOB            NOT AT END - MOVE ANOTHER\n         PUT   PRINTOUT,PRLINE     PRINT HEADING LINE\n         MVI   PRLINE,C' '         INITIALISE DETAIL LINE\n         MVC   PRLINE+1(132),PRLINE\n         EJECT\nREPEAT   TIME  DEC                 GET CURRENT TIME\n         ST    R0,PACKED           STORE TIME\n         MVC   PRLINE(9),=X'4021207A20207A2020' SET UP EDIT MASK\n         ED    PRLINE(9),PACKED    EDIT TIME OF DAY\n         OI    PRLINE+1,X'F0'      INSERT LEADING ZERO IF REQUIRED\n         L     R10,X'10'           POINT TO CVT (FIXED)\n         USING CVT,R10             ESTABLISH ADDRESSABILITY TO CVT\n         L     R10,CVTASVT         POINT TO ASVT\n         DROP  R10                 FINISHED WITH CVT\n         USING ASVT,R10            ESTABLISH ADDRESSABILITY TO ASVT\n         LA    R10,ASVTENTY        START OF ADDRESSES OF ASCBS\n         DROP  R10                 FINISHED WITH START ADDRESS OF ASVT\n         SPACE 3\nTESTASID CLC   0(4,R10),=X'80000000' TEST FOR LAST ENTRY\n         BE    PUTLINE             YES - GO AND PRINT DETAIL LINE\n         TM    0(R10),ASVTAVAL     IS THIS ADDRESS SPACE ALLOCATED ?\n         BO    NEXTASID            NO - GO AND TRY THE NEXT ONE\n         L     R9,0(R10)           GET ASCB ADDRESS\n         USING ASCB,R9             ESTABLISH ADDRESSABILITY TO ASCB\n         L     R8,ASCBJBNI         PICK UP BATCH JOB NAME\n         LTR   R8,R8               IS THIS A BATCH JOB ?\n         BNZ   TESTJOB             YES - GO AND CHECK IT\n         L     R8,ASCBJBNS         PICK UP TSO/STC NAME\nTESTJOB  LA    R1,JOBNAMES         ADDRESS OF FIRST JOBNAME\n         LA    R2,PRLINE+12        ADDRESS FIRST FRAME PRINT POSITION\nNEXTJOB  CLC   0(8,R1),0(R8)       IS THIS THE ONE WE'RE LOOKING FOR ?\n         BE    FOUNDJOB            YES - GET NUMBER OF PAGES\n         LA    R1,8(R1)            POINT TO NEXT JOBNAME\n         CLI   0(R1),X'FF'         END OF TABLE ?\n         BE    NEXTASID            YES - TRY NEXT ADDRESS SPACE\n         LA    R2,10(R2)           POINT TO NEXT FRAME PRINT POSITION\n         B     NEXTJOB\n         SPACE 3\nNEXTASID LA    R10,4(R10)          POINT TO NEXT ASCB\n         B     TESTASID            GO AND TRY THE NEXT ONE\n         SPACE 3\nFOUNDJOB LH    R8,ASCBFMCT         LOAD PAGE FRAME COUNT\n         CVD   R8,PACKED           PACK PAGE FRAME COUNT\n         MVC   0(6,R2),=X'402120202020' SET UP EDIT MASK\n         ED    0(6,R2),PACKED+5    EDIT PAGE FRAME COUNT\n         B     NEXTASID            GO AND TEST NEXT ONE\n         SPACE 3\nPUTLINE  PUT   PRINTOUT,PRLINE     PRINT DETAIL LINE\n         BCT   R7,SLEEP            DECREMENT COUNTER\n         B     CLOSE               END OF JOB\n         SPACE 3\nSLEEP    STIMER WAIT,DINTVL=WAITIME SLEEP FOR 10 SECONDS\n         B     REPEAT\n         SPACE 3\nABORT    LA    R15,16              SET ERROR RETURN CODE\n         B     RETURN              AND ABORT THE RUN\n         SPACE 3\nCLOSE    CLOSE PRINTOUT\n         LA    R15,0               SET RETURN CODE\nRETURN   LR    R10,R15             SAVE RETURN CODE\n         LR    R1,R13              POINT TO GETMAINED AREA\n         L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1) FREE GETMAINED AREA\n         LR    R15,R10             RESTORE SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         EJECT\n         PRINT ON,NOGEN\nPRINTOUT DCB   DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=3192,MACRF=PM,     X\n               DDNAME=PRINTOUT\n         DS    0D                  ALIGN TO A DOUBLEWORD BOUNDARY\nWAITIME  DC    C'00001000'         TEN SECOND INTERVAL\n*                HHMMSSTH\n         LTORG\n         YREGS\n         CVT   DSECT=YES\n         IHAASVT\n         IHAASCB\n         SPACE 3\nWORKAREA DSECT\n         DS    18F                 REGISTER SAVE AREA\nPACKED   DS    D                   WORK AREA\nJOBNAMES DS    12CL8               JOBS TO BE MONITORED\n         DS    X                   IN CASE ALL 12 JOBNAMES SPECIFIED\nPRLINE   DS    CL133               PRINT LINE\nWORKLEN  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         END   REALCORE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01SCAN": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xa9\\x00\\xa9\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 169, "newlines": 169, "modlines": 0, "user": "UKGUIDE"}, "text": "LVBSSCAN TITLE 'SCAN A VARIABLE (BLOCKED) SPANNED DATA SET, REPORTING  X\n               ON SEGMENTATION ERRORS'\n***********************************************************************\n*                                                                     *\n*        LVBSSCAN:  SCAN RECFM=VBS D/S FOR SEGMENT ERRORS             *\n*                                                                     *\n*        AUTHOR:    DAVE THORBY  APRIL 1989                           *\n*                                                                     *\n*        THIS PROGRAM WILL READ A VARIABLE SPANNED DATA SET, AND      *\n*        REPORT ON ANY MISSING SEGMENTS IT FINDS.                     *\n*        NOTE: THIS PROGRAM DOES NOT ATTEMPT ANY FORM OF CORRECTION   *\n*              - USE SOMETHING LIKE MVS/DITTO.                        *\n*                                                                     *\n*        JCL:  //STEP01  EXEC PGM=LVBSSCAN                            *\n*              //SYSPRINT DD  SYSOUT=*                                *\n*              //SYSUT1   DD  DISP=SHR,DSN= ...                       *\n*                                                                     *\n*   RETURN CODES:-                                                    *\n*                                                                     *\n*      0    -  NO SEGMENT ERRORS FOUND                                *\n*      4    -  DATA SET RECFM IS NOT VBS                              *\n*      8    -  MISSING END OF SEGMENT AT END OF FILE                  *\n*      12   -  MISSING SEGMENT OTHER THAN END OF FILE                 *\n*                                                                     *\n*   REGISTER USAGE :-                                                 *\n*                                                                     *\n*      R6   -  SEGMENT CONTROL CODE                                   *\n*      R7   -  LOGICAL RECORD LENGTH                                  *\n*      R8   -  LOGICAL RECORD ADDRESS                                 *\n*      R9   -  PHYSICAL RECORD LENGTH                                 *\n*      R10  -  GETMAINED BUFFER AREA                                  *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLVBSSCAN CSECT\n         SAVE  (14,12),,'LVBSSCAN &SYSDATE &SYSTIME'\n         LR    R12,R15             ESTABLISH -\n         USING LVBSSCAN,R12        BASE REGISTER\n         LA    R10,SAVEAREA        ADDRESS REGISTER SAVE AREA\n         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R10             ADDRESS SAVE AREA\n         SPACE 3\n         OPEN  (SYSUT1,INPUT,SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,M_HEADER   PUT OUT PAGE HEADER\n         LA    R10,SYSUT1          POINT TO DCB\n         USING IHADCB,R10          MAP DCB\n         TM    DCBRECFM,DCBRECV+DCBRECSB VARIABLE + SPANNED ?\n         BNO   NOTVBS              NO - ABORT\n         LH    R0,DCBBLKSI         PICK UP BLOCKSIZE\n         DROP  R10                 FINISHED WITH DCB MAP\n         ST    R0,GETMAINL         STORE LENGTH OF BUFFER AREA\n         GETMAIN R,LV=(0)          GET BUFFER STORAGE\n         LR    R10,R1              POINT TO RETURNED AREA\n         SR    R6,R6               ZEROISE SEGMENT CONTROL CODE\n         EJECT\nREADFILE READ  DECB,SF,SYSUT1,(10) READ A RECORD\n         CHECK DECB                WAIT FOR I/O TO COMPLETE\n         LH    R9,0(R10)           PICK UP BLOCK LENGTH\n         S     R9,=F'4'            SUBTRACT LENGTH OF RDW\n         LA    R8,4(R10)           POINT TO LOGICAL RECORD\nMATCH    LH    R7,0(R8)            PICK UP RECORD LENGTH\n         IC    R6,2(R8)            PICK UP SEGMENT CONTROL CODE\n         SLL   R6,2                MULTIPLY BY 4\n         B     SEGTYPE(R6)         BRANCH ON TYPE\n         SPACE 1\nSEGTYPE  B     SEG00               COMPLETE LOGICAL RECORD\n         B     SEG01               START OF SEGMENTED RECORD\n         B     SEG10               END OF SEGMENTED RECORD\n         B     SEG11               MIDDLE OF SEGMENTED RECORD\n         SPACE 2\nSEG00    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT\n         BZ    MATCHEND            NONE FOUND\n         B     MISSEND             MISSING END OF SEGMENT\n         SPACE 1\nSEG01    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT\n         BZ    MATCHEND            NONE FOUND\n         B     MISSEND             MISSING END OF SEGMENT\n         SPACE 1\nSEG10    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT\n         BO    MATCHEND            FOUND\n         B     MISSTART            MISSING START OF SEGMENT\n         SPACE 1\nSEG11    TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT\n         BO    MATCHEND            FOUND\n         B     MISSTART            MISSING START OF SEGMENT\n         SPACE 2\nMATCHEND MVC   LASTSEG,2(R8)       SAVE SEGMENT CONTROL CODE\n         SR    R9,R7               REMAINDER OF RECORD\n         BZ    READFILE            END OF PHYSICAL RECORD\n         AR    R8,R7               POINT TO NEXT LOGICAL RECORD\n         B     MATCH               PROCESS THIS RECORD\n         SPACE 3\nMISSEND  NOTE  SYSUT1,TYPE=REL     GET CURRENT FILE POSITION\n         ST    R1,NOTEPOS          STORE FILE POSITION\n         UNPK  M_END+39(9),NOTEPOS(5) UNPACK FILE POSITION\n         TR    M_END+39(8),TRANSTBL\n         LR    R1,R8               POINT TO CURRENT RECORD\n         SR    R1,R10              GET OFFSET WITHIN BLOCK\n         ST    R1,NOTEPOS          STORE BLOCK OFFSET\n         UNPK  M_END+48(5),NOTEPOS+2(3) UNPACK BLOCK OFFSET\n         MVI   M_END+48,C'+'       INSERT SIGN\n         PUT   SYSPRINT,M_END      WRITE MISSING END MESSAGE\n         MVC   RETCODE,=F'12'      SET RETURN CODE\n         B     MATCHEND            CONTINUE\n         SPACE 2\nMISSTART NOTE  SYSUT1,TYPE=REL     GET CURRENT FILE POSITION\n         ST    R1,NOTEPOS          STORE FILE POSITION\n         UNPK  M_START+39(9),NOTEPOS(5) UNPACK FILE POSITION\n         TR    M_START+39(8),TRANSTBL\n         LR    R1,R8               POINT TO CURRENT RECORD\n         SR    R1,R10              GET OFFSET WITHIN BLOCK\n         ST    R1,NOTEPOS          STORE BLOCK OFFSET\n         UNPK  M_START+48(5),NOTEPOS+2(3) UNPACK BLOCK OFFSET\n         MVI   M_START+48,C'+'     INSERT SIGN\n         PUT   SYSPRINT,M_START    WRITE MISSING START MESSAGE\n         MVC   RETCODE,=F'12'      SET RETURN CODE\n         B     MATCHEND            CONTINUE\n         EJECT\nNOTVBS   PUT   SYSPRINT,M_NOTVBS   PUT OUT MESSAGE\n         MVC   RETCODE,=F'4'       SET RETURN CODE\n         B     RETURN              RETURN TO CALLER\n         SPACE 3\nEOF      TM    LASTSEG,X'01'       TEST FOR OUTSTANDING SEGMENT\n         BZ    EOJ                 NONE FOUND\n         PUT   SYSPRINT,M_EOF      WRITE MISSING END OF FILE MESSAGE\n         CLC   RETCODE,=F'8'       HAVE WE ALREADY HAD AN ERROR ?\n         BH    EOJ                 YES - RETAIN THAT RETURN CODE\n         MVC   RETCODE,=F'8'       SET RETURN CODE\nEOJ      L     R0,GETMAINL         PICK UP LENGTH OF BUFFER AREA\n         LR    R1,R10              PICK UP ADDRESS OF BUFFER AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE BUFFER STORAGE\n         PUT   SYSPRINT,M_ENDEND   PUT OUT END OF FILE MESSAGE\nRETURN   CLOSE (SYSUT1,,SYSPRINT)  CLOSE FILES\n         L     R15,RETCODE         PICK UP RETURN CODE\n         L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         EJECT\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nRETCODE  DC    F'0'                PROGRAM RETURN CODE\nGETMAINL DS    F                   LENGTH OF GETMAINED AREA\nNOTEPOS  DS    F                   CURRENT FILE POSITION\n         DC    X'04'               A REVERSED SPACE\nLASTSEG  DC    X'00'               LAST SEGMENT CONTROL CODE\nTRANSTBL DC    CL240' '\n         DC    C'0123456789ABCDEF'\n         SPACE 3\nM_HEADER DC    CL81'1LVBSSCAN                    VARIABLE SPANNED RECORX\n               D SCANNER                     '\nM_END    DC    CL81'0MISSING  END  OF SEGMENT AT OR BEFORE XXXXXXXX +NNX\n               N (HEX TTRZ OF RELATIVE TRACK)'\nM_START  DC    CL81'0MISSING START OF SEGMENT AT OR BEFORE XXXXXXXX +NNX\n               N (HEX TTRZ OF RELATIVE TRACK)'\nM_EOF    DC    CL81'0MISSING  END  OF SEGMENT AT OR BEFORE END-OF-FILE X\n                                             '\nM_NOTVBS DC    CL81'-ERROR  ***** INPUT RECORD FORMAT IS NOT VARIABLE SX\n               PANNED ***** RUN ABORTED *****'\nM_ENDEND DC    CL81'-                              *****  END OF REPORTX\n                 ******                      '\n         PRINT NOGEN\nSYSUT1   DCB   DSORG=PS,MACRF=RP,DDNAME=SYSUT1,EODAD=EOF\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=81,   X\n               BLKSIZE=3159\n         LTORG\n         YREGS\n         DCBD  DSORG=BS,DEVD=(TA,DA) MAP DCB FOR BSAM ON TAPE OR DISK\n         END   LVBSSCAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01SETV": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x01\\x12\\x01\\x12\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 274, "newlines": 274, "modlines": 0, "user": "UKGUIDE"}, "text": "SETVRGRP TITLE 'SET-UP A CLIST VARIABLE EQUAL TO RACF GROUP'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   SETVRGRP - MVS/XA VERSION                                         *\n*                                                                     *\n*   DESCRIPTION :-  THE SETVRGRP COMMAND PROCESSOR IS USED TO SET     *\n*                   UP A CLIST VARIABLE 'LEBRGRP' TO BE EQUAL TO THE  *\n*                   USERS CURRENT CONNECT GROUP.                      *\n*                   THIS CAN ONLY BE USED FROM WITHIN A CLIST         *\n*                   ENVIRONMENT.                                      *\n*                                                                     *\n*   REGISTER USAGE                                                    *\n*   ==============                                                    *\n*                                                                     *\n*      R0   -  WORK                                                   *\n*      R1   -  WORK                                                   *\n*      R2   -  POINTER TO CPPL                                        *\n*      R3   -  POINTER TO ACEE                                        *\n*      R4   -  POINTER TO UPT                                         *\n*      R5   -  POINTER TO ECT                                         *\n*      R6   -  NOT USED                                               *\n*      R7   -  NOT USED                                               *\n*      R8   -  NOT USED                                               *\n*      R9   -  NOT USED                                               *\n*      R10  -  NOT USED                                               *\n*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -  WORK                                                   *\n*      R15  -  WORK                                                   *\n*                                                                     *\n*   PARAMETERS                                                        *\n*   ==========                                                        *\n*                                                                     *\n*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *\n*                                                                     *\n*   RETURN CODES                                                      *\n*   ============                                                      *\n*                                                                     *\n*      REFER TO MANUAL 'TSO/E GUIDE TO WRITING A TMP OR A CP',        *\n*      SC28-1136.                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER SAVE AND EQUATES ETC.....\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETVRGRP CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         SAVE  (14,12),,SETVRGRP.&SYSTIME..&SYSDATE\n         BALR  R12,0                   * ESTABLISH BASE\n         USING *,R12,R11               * TELL ASSEMBLER\n         LA    R11,*+4095              * ESTABLISH SECOND BASE\n         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION\n         LR    R2,R1                   * SAVE POINTER TO CPPL\n         USING CPPL,R2                 * TELL ASSEMBLER ABOUT CPPL\n         L     R4,CPPLUPT              * POINT TO THE UPT\n         L     R5,CPPLECT              * POINT TO THE ECT\n         LA    R1,SAVEAREA             * R1 -> MY SAVE AREA\n         ST    R1,8(R13)               * CHAIN BACK\n         ST    R13,4(R1)               * CHAIN FORWARD\n         LR    R13,R1                  * ESTABLISH SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET THE CURRENT RACF ACEE                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,0                    * GET ADDRESS OF PSA\n         USING PSA,R1                  * TELL ASSEMBLER ABOUT PSA\n         L     R1,PSAAOLD              * GET ADDRESS OF ASCB\n         DROP  R1                      * FINISHED WITH CVT DSECT\n         USING ASCB,R1                 * TELL ASSEMBLER ABOUT ASCB\n         L     R1,ASCBASXB             * GET ADDRESS OF ASXB\n         DROP  R1                      * FINISHED WITH ASCB DSECT\n         USING ASXB,R1                 * TELL ASSEMBLER ABOUT ASXB\n         L     R3,ASXBSENV             * GET ADDRESS OF ACEE\n         DROP  R1                      * FINISHED WITH ASXB DSECT\n         USING ACEE,R3                 * TELL ASSEMBLER ABOUT ACEE\n         XR    R1,R1                   * CLEAR WORK REG 1\n         IC    R1,ACEEGRPL             * PICK UP GROUP LENGTH\n         ST    R1,VASVVALL             * STORE IN VAS VALUE LENGTH\n         MVC   VASVVALU,ACEEGRPN       * MOVE IN THE CONNECT GROUP\n         MVC   PUTLGRPN,ACEEGRPN       * MOVE CONNECT GROUP TO MESSAGE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVOKE THE TSO SERVICE ROUTINE TO SET THE PREFIX             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R1,16                   * GET THE CVT ADDRESS\n         USING CVT,R1                  * TELL ASSEMBLER ABOUT CVT\n         L     R1,CVTTVT               * GET THE TSVT ADDRESS\n         DROP  R1                      * FINISHED WITH CVT DSECT\n         USING TSVT,R1                 * TELL ASSEMBLER ABOUT TSVT\n         L     R15,TSVTVACC            * ADDRESS VARIABLE ACCESS SERV.\n         CALL  (15),                   * CALL THE TSO SERVICE ROUTINE  C\n               (VASECODE,              * VAS ENTRY CODE                C\n               VASVNAMP,               * VAS VARIABLE NAME POINTER     C\n               VASVNAML,               * VAS VARIABLE NAME LENGTH      C\n               VASVVALP,               * VAS VARIABLE VALUE POINTER    C\n               VASVVALL,               * VAS VARIABLE VALUE LENGTH     C\n               VASTOKEN),VL            * VAS TOKEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS RETURN CODE AND RETURN OR ABEND                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         B     FINISH(R15)             * GO AND DO WHAT WE CAN\nFINISH   EQU   *\n         B     ENDGOOD                 * ENDED WITH RC=00 (GOOD)\n         B     ENDABEND                * ENDED WITH RC=04 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=08 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=0C (ABEND)\n         B     ENDABEND                * ENDED WITH RC=10 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=14 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=18 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=1C (ABEND)\n         B     ENDABEND                * ENDED WITH RC=20 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=24 (ABEND)\n         B     ENDNCLST                * ENDED WITH RC=28 (NOT CLIST)\n         B     ENDABEND                * ENDED WITH RC=2C (ABEND)\n         B     ENDABEND                * ENDED WITH RC=30 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=34 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=38 (ABEND)\n         B     ENDABEND                * ENDED WITH RC=3C (ABEND)\nENDGOOD  EQU   *\n         PUTLINE PARM=PUTLLIST,        * PARM IS THE LIST FORMAT       C\n               UPT=(R4),               * POINTER TO UPT                C\n               ECT=(R5),               * POINTER TO ECT                C\n               ECB=PUTLECB,            * POINTER TO ECB                C\n               OUTPUT=(PUTLM1,TERM,SINGLE,INFOR), * PUTLINE OPTIONS    C\n               MF=(E,PUTLIOPL)         * LET PUTLINE INIT THE IOPL\n         L     R13,4(R13)              * RESTORE HSA\n         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN\nENDNCLST EQU   *\n         PUTLINE PARM=PUTLLIST,        * PARM IS THE LIST FORMAT       C\n               UPT=(R4),               * POINTER TO UPT                C\n               ECT=(R5),               * POINTER TO ECT                C\n               ECB=PUTLECB,            * POINTER TO ECB                C\n               OUTPUT=(PUTLM2,TERM,SINGLE,INFOR), * PUTLINE OPTIONS    C\n               MF=(E,PUTLIOPL)         * LET PUTLINE INIT THE IOPL\n         L     R13,4(R13)              * RESTORE HSA\n         RETURN (14,12),RC=40          * RESTORE REGS RET CODE 40(DEC)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ABEND AS WE SHOULD NOT GET THIS RETURN CODE FROM             *\n*        THE VARIABLE ACCESS SERVICE, IKJCT441.                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDABEND EQU   *\n         ABEND 100,DUMP                * ABEND USER 100\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATA AREAS FOR VARIABLE ACCESS SERVICE (IKJCT441)            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nVASECODE DC    A(TSVEUPDT)             * ENTRY CODE FOR SETTING VALUES\nVASVNAMP DC    A(VASVNAME)             * POINTER TO VARIABLE NAME\nVASVNAME DC    C'LEBRGRP'              * VARIABLE NAME\nVASVNAML DC    AL4(*-VASVNAME)         * VARIABLE NAME LENGTH\nVASVVALP DC    A(VASVVALU)             * POINTER TO VALUE NAME\nVASVVALU DC    C'        '             * VALUE NAME\nVASVVALL DC    F'0'                    * VALUE NAME LENGTH\nVASTOKEN DC    F'0'                    * TOKEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUTLINE MESSAGE #1 TO GO TO THE TERMINAL                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLM1   DC    F'1'                    * ONLY ONE TEXT SEGMENT\n         DC    A(PUTLM1T)              * ADDRESS OF ONLY TEXT SEGMENT\n*\nPUTLM1T  DC    AL2(PUTLM1L-*)          * LENGTH OF TEXT SEGMENT\n         DC    H'0'                    * OFFSET OF SEGMENT - ALWAYS 0\n         DC    C' CLIST VARIABLE &&LEBRGRP SET TO CURRENT RACF CONNECT C\n               GROUP - '               * TEXT , PART #1\nPUTLGRPN DC    C'        '             * TEXT , PART #2 (RACF GROUP)\nPUTLM1L  EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUTLINE MESSAGE #2 TO GO TO THE TERMINAL                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLM2   DC    F'1'                    * ONLY ONE TEXT SEGMENT\n         DC    A(PUTLM2T)              * ADDRESS OF ONLY TEXT SEGMENT\n*\nPUTLM2T  DC    AL2(PUTLM2L-*)          * LENGTH OF TEXT SEGMENT\n         DC    H'0'                    * OFFSET OF SEGMENT - ALWAYS 0\n         DC    C' CLIST VARIABLE CAN NOT BE SET FROM OUTSIDE OF A CLISTC\n                ENVIRONMENT'           * MESSAGE TEXT\nPUTLM2L  EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        I/O PARAMETER LIST AREA                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLIOPL DC    4F'0'                   * AREA FOR THE PUTLINE IOPL\nPUTLECB  DC    F'0'                    * AREA FOR THE PUTLINE ECB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAVE AREA                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSAVEAREA DC    18F'0'                  * SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUTLINE LIST FORMAT                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTLLIST PUTLINE MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DSECTS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\n         IHAPSA                        * DSECT USED TO MAP PSA\n*\n         CVT   DSECT=YES               * DSECT USED TO MAP CVT\n*\n         IHAASCB                       * DSECT USED TO MAP ASCB\n*\n         IHAASXB                       * DSECT USED TO MAP ASXB\n*\n         IHAACEE                       * DSECT USED TO MAP ACEE\n*\n         IKJCPPL                       * DSECT USED TO MAP CPPL\n*\n         IKJTSVT                       * DSECT USED TO MAP TSVT\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01SKEOF": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\t_\\x00\\x90\\t_\\x17\\x03\\x00\\xb4\\x00\\xb4\\x00\\x00\\xd6\\xc4\\xf1\\xf4\\xf2\\xf7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-05T00:00:00", "modifydate": "1990-04-05T17:03:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "OD1427"}, "text": "LSKIPEOF TITLE '                  FIND AND COPY PAST END-OF-FILE MARKS'\n***********************************************************************\n*                                                                     *\n*        THIS PROGRAM READS AND/OR COPIES DATA SETS UP TO AND PAST    *\n*        END-OF-FILE MARKS.                                           *\n*                                                                     *\n*                                                                     *\n*        AUTHOR: DAVE THORBY   APRIL 1990                             *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        R2    *SPARE*                                                *\n*        R3    *SPARE*                                                *\n*        R4    *SPARE*                                                *\n*        R5    *SPARE*                                                *\n*        R6    *SPARE*                                                *\n*        R7    *SPARE*                                                *\n*        R8    BLOCK COUNT                                            *\n*        R9    TTRZ                                                   *\n*        R10   BUFFER (GETMAINED)                                     *\n*        R11   INTERNAL LINKAGE / RECORD LENGTH                       *\n*        R12   BASE REGISTER                                          *\n*        R13   SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLSKIPEOF CSECT\n         SAVE  (14,12),,'LSKIPEOF &SYSDATE &SYSTIME'\n         LR    R12,R15             ESTABLISH -\n         USING LSKIPEOF,R12        BASE REGISTER\n         LA    R10,SAVEAREA        ADDRESS REGISTER SAVE AREA\n         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R10             ADDRESS SAVE AREA\n         SPACE 3\n         OPEN  (SYSIN,INPUT,SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,P_HEADER   WRITE OUT REPORT HEADER\n         EJECT\nGET_CARD GET   SYSIN,C_CARD        READ A CARD\n         PUT   SYSPRINT,P_CARD     PRINT CARD\n         CLC   =C'READ',C_CARD     IS THIS A READ COMMAND ?\n         BE    C_READ              YES - PROCESS IT\n         CLC   =C'COPY',C_CARD     IS THIS A COPY COMMAND ?\n         BE    C_COPY              YES - PROCESS IT\n         CLC   =C'TTRZ',C_CARD     IS THIS A TTRZ COMMAND ?\n         BE    C_TTRZ              YES - PROCESS IT\n         CLI   C_CARD,C'*'         IS THIS A COMMENT ?\n         BE    GET_CARD            YES - IGNORE IT\n         PUT   SYSPRINT,P_UNKNWN   WRITE OUT ERROR MESSAGE\n         B     GET_CARD            GET NEXT COMMAND\n         SPACE 3\nC_READ   BAL   R11,OPEN_IN         OPEN INPUT FILE (IF REQUIRED)\n         OI    ZAP_W_1+1,X'F0'     BYPASS WRITE\n         B     START               GO GET A RECORD\n         SPACE 3\nC_COPY   BAL   R11,OPEN_IN         OPEN INPUT FILE (IF REQUIRED)\n         BAL   R11,OPEN_OUT        OPEN OUTPUT FILE (IF REQUIRED)\n         NI    ZAP_W_1+1,X'0F'     DO WRITE\n         B     START               GO GET A RECORD\n         SPACE 3\nC_TTRZ   BAL   R11,OPEN_IN         OPEN INPUT FILE (IF REQUIRED)\n         MVC   DBLWORD,C_CARD+5    PICK UP TTRZ\n         TR    DBLWORD,TR_TO_B     CONVERT TO BINARY\n         PACK  TTRZ(5),DBLWORD(9)  CONVERT TO BINARY\n         POINT SYSUT1,TTRZ         POINT TO TTRZ\n         OI    START+1,X'F0'       DO NOT POINT NEXT TIME\n         B     GET_CARD            GET NEXT COMMAND\n         EJECT\nSTART    NOP   NO_POINT            DO NOT POINT TWICE\n         L     R9,TTRZ             PICK UP TTRZ\n         LA    R9,1(,R9)           POINT TO NEXT BLOCK\n         ST    R9,TTRZ             STORE NEW TTRZ\n         POINT SYSUT1,TTRZ         POINT TO TTRZ\nNO_POINT NI    START+1,X'0F'       POINT NEXT TIME\n         SR    R8,R8               ZEROISE COUNT\n         SPACE 1\nREAD_REC NOP   READ_U              IF RECFM=U\n         READ  DECBR1,SF,SYSUT1,(10) READ A RECORD\n         CHECK DECBR1              WAIT FOR I/O TO COMPLETE\n         LA    R8,1(,R8)           INCREMENT COUNTER\n         B     ZAP_W_1             WRITE IF REQUIRED\n         SPACE 1\nREAD_U   READ  DECBR2,SF,SYSUT1,(10),'S' READ A RECORD\n         CHECK DECBR2              WAIT FOR I/O TO COMPLETE\n         LA    R8,1(,R8)           INCREMENT COUNTER\n         SPACE 1\nZAP_W_1  NOP   READ_REC            BYPASS WRITE IF REQUIRED\nZAP_W_2  NOP   WRITE_U             IF RECFM=U\n         WRITE DECBW1,SF,SYSUT2,(10) WRITE A RECORD\n         CHECK DECBW1              WAIT FOR I/O TO COMPLETE\n         B     READ_REC            GET ANOTHER RECORD\n         SPACE 1\nWRITE_U  LH    R11,SYSUT1+DCBLRECL-IHADCB PICK UP RECORD LENGTH\n         WRITE DECBW2,SF,SYSUT2,(10),(11) WRITE A RECORD\n         CHECK DECBW2              WAIT FOR I/O TO COMPLETE\n         B     READ_REC            GET ANOTHER RECORD\n         SPACE 3\nEOF      NOTE  SYSUT1              FIND ADDRESS OF END OF FILE\n         ST    R1,TTRZ             STORE RESULT\n         UNPK  DBLWORD(9),TTRZ(5)  CONVERT TO DECIMAL\n         TR    DBLWORD,TR_TO_C     CONVERT TO CHARACTER\n         MVC   P_EOF+42(8),DBLWORD MOVE TO PRINT LINE\n         CVD   R8,DBLWORD          SAVE BLOCK COUNT\n         MVC   P_EOF(10),=X'40202020202020202120'\n         ED    P_EOF(10),DBLWORD+3 CONVERT TO DISPLAY\n         PUT   SYSPRINT,P_EOF      WRITE PRINT LINE\n         CLOSE SYSUT1              CLOSE INPUT FILE\n         NI    OPEN_IN+1,X'0F'     OPEN IF REQUIRED AGAIN\n         B     GET_CARD            GET NEXT COMMAND\n         SPACE 3\nEOJ      PUT   SYSPRINT,P_EOJ      WRITE END OF JOB MESSAGE\n         CLOSE (SYSIN,,SYSPRINT)\n         L     R0,GETMAINL         PICK UP LENGTH OF BUFFER AREA\n         LTR   R0,R0               HAVE WE GOT A WORKAREA ?\n         BZ    CLOSE_2             NO - BYPASS FREEMAIN\n         LR    R1,R10              PICK UP ADDRESS OF BUFFER AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE BUFFER STORAGE\n         SPACE 1\nCLOSE_2  B     RETURN              DO NOT CLOSE OUTPUT FILE\n         CLOSE SYSUT2              CLOSE OUTPUT FILE\n         SPACE 1\nRETURN   L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\nOPEN_IN  NOPR  R11                 OPEN FILE FIRST TIME ONLY\n         OPEN  (SYSUT1,INPUT)      OPEN INPUT FILE\n         OI    OPEN_IN+1,X'F0'     DO NOT OPEN AGAIN\n         LH    R0,SYSUT1+DCBBLKSI-IHADCB PICK UP BLOCKSIZE\n         ST    R0,GETMAINL         STORE LENGTH OF BUFFER AREA\n         GETMAIN R,LV=(0)          GET BUFFER STORAGE\n         LR    R10,R1              POINT TO RETURNED AREA\n         CLI   SYSUT1+DCBRECFM-IHADCB,DCBRECU RECFM=U ?\n         BNOR  R11                 NO - RETURN\n         OI    READ_REC+1,X'F0'    READ AS RECFM=U\n         BR    R11                 RETURN\n         SPACE 3\nOPEN_OUT NOPR  R11                 OPEN FILE FIRST TIME ONLY\n         OPEN  (SYSUT2,OUTPUT)     OPEN OUTPUT FILE\n         OI    OPEN_OUT+1,X'F0'    DO NOT OPEN AGAIN\n         NI    CLOSE_2+1,X'0F'     CLOSE DATA SET\n         CLI   SYSUT2+DCBRECFM-IHADCB,DCBRECU RECFM=U ?\n         BNOR  R11                 NO - RETURN\n         OI    ZAP_W_2+1,X'F0'     WRITE AS RECFM=U\n         BR    R11                 RETURN\n         EJECT\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nGETMAINL DC    F'0'                LENGTH OF GETMAINED AREA\nTTRZ     DC    F'00000000'         TRACK-TRACK-RECORD-ZERO\n         DS    C\nDBLWORD  DS    D\n         DS    C\nTR_TO_B  DC    256X'00'\n         ORG   TR_TO_B+C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TR_TO_B+C'0'\n         DC    X'00010203040506070809'\n         ORG\nTR_TO_C  DC    256X'00'\n         ORG   TR_TO_C+X'F0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         SPACE 3\nP_HEADER DC    CL81'1********************************* START OF JOB ***X\n               ******************************'\nP_UNKNWN DC    CL81'0          CONTROL CARD NOT RECOGNISED - IGNORED'\nP_EOF    DC    CL81' 999999999 BLOCKS PROCESSED - EOF AT TTRZ XXXXXXXX X\n               (REL)'\nP_EOJ    DC    CL81'-********************************** END OF JOB ****X\n               ******************************'\nP_CARD   DC    C'-'\nC_CARD   DC    CL80' '\n         PRINT NOGEN\nSYSUT1   DCB   DSORG=PS,MACRF=RP,DDNAME=SYSUT1,EODAD=EOF\nSYSUT2   DCB   DSORG=PS,MACRF=W,DDNAME=SYSUT2\nSYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=EOJ\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               LRECL=81,RECFM=FA,BLKSIZE=81\n         LTORG\n         YREGS\n         DCBD  DSORG=BS,DEVD=(TA,DA) MAP DCB FOR BSAM ON TAPE OR DISK\n         END   LSKIPEOF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01SMF": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x01v\\x01v\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 374, "newlines": 374, "modlines": 0, "user": "UKGUIDE"}, "text": "LSMFSCAN TITLE '                            PRINT SELECTED SMF RECORDS'\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE :-                                                 *\n*                                                                     *\n*      R1   -  SMF RECORD POINTER                                     *\n*      R2   -  RECORD TYPE                                            *\n*      R3   -  TYPE REQUIRED FLAG                                     *\n*      R4   -  WORK REGISTER                                          *\n*      R5   -  WORK REGISTER                                          *\n*      R6   -  WORK REGISTER                                          *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  SAVE AREA                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLSMFSCAN CSECT\n         SAVE  (14,12),,'LSMFSCAN &SYSDATE &SYSTIME'\n         LR    R12,R15             ESTABLISH -\n         USING LSMFSCAN,R12        BASE REGISTER\n         LA    R10,SAVEAREA        ADDRESS REGISTER SAVE AREA\n         ST    R10,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R10)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R10             ADDRESS SAVE AREA\n         L     R1,0(R1)            POINT TO PARM\n         LH    R4,0(R1)            PICK UP PARM LENGTH\n         LTR   R4,R4               IS THE LENGTH ZERO ?\n         BZ    OPENFILE            NO PARM - USE DEFAULT RECORD TYPES\n         MVI   TYPEFLAG,0          OVERWRITE TABLE -\n         MVC   TYPEFLAG+1(255),TYPEFLAG OF RECORD TYPES\n         LA    R5,2(R1)            POINT TO FIRST RECORD TYPE\nPACKPARM PACK  PACKED,0(3,R5)      PACK RECORD TYPE\n         CVB   R6,PACKED           GET IT INTO A REGISTER\n         A     R6,=A(TYPEFLAG)     POINT TO OFFSET IN TABLE\n         MVI   0(R6),1             FLAG THE RECORD TYPE AS REQUIRED\n         LA    R5,4(R5)            POINT TO NEXT RECORD TYPE\n         SH    R4,=H'4'            DECREMENT PARM LENGTH\n         BP    PACKPARM            KEEP GOING UNTIL IT RUNS OUT\n         SPACE 3\nOPENFILE OPEN  (SMFIN,INPUT,SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,M_HEADER   PUT OUT PAGE HEADER\n         SR    R2,R2               INITIALISE RECORD TYPE\n         EJECT\nREADFILE GET   SMFIN               READ A RECORD\n         USING SMFRCD0,R1          MAP STANDARD HEADER\n         TM    SMF0SEG,X'02'       IS THIS THE START OF A RECORD ?\n         BNZ   READFILE            NO - FORGET IT\n         CLC   =H'18',SMF0LEN      IS THE HEADER ALL HERE\n         BH    READFILE            NO - FORGET IT\n         IC    R2,SMF0RTY          PICK UP RECORD TYPE\n         LA    R3,TYPEFLAG         POINT TO TYPE TABLE\n         AR    R3,R2               POINT TO RECORD TYPE\n         CLI   0(R3),0             DO WE WANT THIS TYPE ?\n         BZ    READFILE            NO - GET ANOTHER\n         SPACE 1\n         MVC   M_DETAIL+5(4),=X'F0202020'  RECORD TYPE MASK\n         MVC   M_DETAIL+15(3),=X'F0202020' TIME EDIT MASK\n         MVC   M_DETAIL+18(6),M_DETAIL+15  TIME EDIT MASK\n         MVC   M_DETAIL+30(7),=X'F020204B202020'  DATE MASK\n         CVD   R2,PACKED               STORE RECORD TYPE\n         ED    M_DETAIL+5(4),PACKED+6  EDIT RECORD TYPE\n         MVI   M_DETAIL+5,C'='     MOVE IN EQUALS SIGN\n         SR    R4,R4               ZEROISE EVEN REGISTER\n         ICM   R5,B'1111',SMF0TME  PICK UP TIME OF DAY\n         D     R4,=F'100'          CONVERT TO SECONDS\n         SR    R4,R4               ZEROISE EVEN REGISTER\n         D     R4,=F'60'           CONVERT TO MINUTES + SECONDS\n         CVD   R4,PACKED           STORE SECONDS\n         MP    PACKED,=P'10'       GET IN A BYTE\n         ED    M_DETAIL+21(3),PACKED+6  EDIT SECONDS\n         MVI   M_DETAIL+21,C':'    MOVE IN COLON\n         SR    R4,R4               ZEROISE EVEN REGISTER\n         D     R4,=F'60'           CONVERT TO HOURS + MINUTES\n         CVD   R4,PACKED           STORE MINUTES\n         MP    PACKED,=P'10'       GET IN A BYTE\n         ED    M_DETAIL+18(3),PACKED+6  EDIT MINUTES\n         MVI   M_DETAIL+18,C':'    MOVE IN COLON\n         CVD   R5,PACKED           STORE HOURS\n         MP    PACKED,=P'10'       GET IN A BYTE\n         ED    M_DETAIL+15(3),PACKED+6  EDIT HOURS\n         MVI   M_DETAIL+15,C'='    MOVE IN EQUALS SIGN\n         ED    M_DETAIL+30(7),SMF0DTE+1 EDIT DATE\n         MVI   M_DETAIL+30,C'='    MOVE IN EQUALS SIGN\n         MVC   M_DETAIL+43(4),SMF0SID MOVE IN SYSTEM IDENT\n         MVC   M_DETAIL+48(84),M_DETAIL+47 BLANK OUT REMAINDER OF LINE\n         IC    R2,SMF0RTY          PICK UP RECORD TYPE\n         LA    R3,EXTRAS           POINT TO EXTRA INFORMATION TABLE\n         AR    R3,R2               OFFSET BY RECORD TYPE\n         CLI   0(R3),0             IS THERE ANYTHING EXTRA TO PRINT ?\n         BZ    PUTPRINT            NO - PUT OUT WHAT WE HAVE\n         SPACE 1\n         CLI   SMF0RTY,0           IS THIS A TYPE 0 ?\n         BE    TYPE0               YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,5           IS THIS A TYPE 5 ?\n         BE    TYPE5               YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,6           IS THIS A TYPE 6 ?\n         BE    TYPE6               YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,17          IS THIS A TYPE 17 ?\n         BE    TYPE17              YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,18          IS THIS A TYPE 18 ?\n         BE    TYPE18              YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,21          IS THIS A TYPE 21 ?\n         BE    TYPE21              YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,35          IS THIS A TYPE 35 ?\n         BE    TYPE35              YES - PERFORM SPECIAL PROCESSING\n         CLI   SMF0RTY,80          IS THIS A TYPE 80 ?\n         BE    TYPE80              YES - PERFORM SPECIAL PROCESSING\n         B     PUTPRINT            NO EXTRA INFORMATION AFTER ALL\n         DROP  R1                  DROP STANDARD HEADER\n         EJECT\n         USING SMFRCD0,R1          MAP RECORD TYPE 0\nTYPE0    CLC   =H'34',SMF0LEN      IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(3),=C'JWT' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+53(4),=X'F0202020' TIME EDIT MASK\n         ICM   R5,B'1111',SMF0JWT  PICK UP JOB WAIT TIME\n         CVD   R5,PACKED           STORE JOB WAIT TIME\n         ED    M_DETAIL+53(4),PACKED+6  EDIT JOB WAIT TIME\n         MVI   M_DETAIL+53,C'='    MOVE IN EQUALS SIGN\n         MVC   M_DETAIL+57(9),=C', VIRTUAL' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+66(8),=X'F020202020202020' VIRTUAL EDIT MASK\n         ICM   R5,B'1111',SMF0VST  PICK UP VIRTUAL STORAGE SIZE\n         CVD   R5,PACKED           STORE VIRTUAL STORAGE SIZE\n         ED    M_DETAIL+66(8),PACKED+4  EDIT VIRTUAL STORAGE SIZE\n         MVI   M_DETAIL+66,C'='    MOVE IN EQUALS SIGN\n         MVI   M_DETAIL+74,C'K'    MOVE IN KILOBYTE SYMBOL\n         MVC   M_DETAIL+75(6),=C', REAL' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+81(6),=X'F02020202020' REAL STORAGE EDIT MASK\n         ICM   R5,B'1111',SMF0RST  PICK UP REAL STORAGE SIZE\n         CVD   R5,PACKED           STORE REAL STORAGE SIZE\n         ED    M_DETAIL+81(6),PACKED+5  EDIT REAL STORAGE SIZE\n         MVI   M_DETAIL+81,C'='    MOVE IN EQUALS SIGN\n         MVI   M_DETAIL+87,C'K'    MOVE IN KILOBYTE SYMBOL\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 0\n         SPACE 3\n         USING SMFRCD5,R1          MAP RECORD TYPE 5\nTYPE5    CLC   =H'26',SMF5LEN      IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(4),=C'JOB=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+54(8),SMF5JBN  MOVE IN JOBNAME\n         CLC   =H'66',SMF5LEN      IS THERE ENOUGH FOR JOB COMP. CODE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+62(5),=C', CC=' MOVE IN DESCRIPTION\n         UNPK  M_DETAIL+67(5),SMF5JCC(3) UNPACK JOB COMPLETION CODE\n         NC    M_DETAIL+67(5),=X'0F0F0F0F00' REMOVE ZONES\n         TR    M_DETAIL+67(4),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         TM    SMF5JBTI,B'00000010' SEE IF JOB ABENDED\n         BZ    PUTPRINT            WRITE PRINT LINE\n         MVC   M_DETAIL+72(7),=C'ABENDED' MOVE IN LITERAL\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 5\n         SPACE 3\n         USING SMFRCD6,R1          MAP RECORD TYPE 6\nTYPE6    CLC   =H'26',SMF6LEN      IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(4),=C'JOB=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+54(8),SMF6JBN  MOVE IN JOBNAME\n         CLC   =H'55',SMF6LEN      IS THERE ENOUGH FOR NUMBER OF LINES\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+62(7),=C', LINES' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+69(11),=X'2120202020202020202020'\n         ICM   R5,B'1111',SMF6NLR  PICK UP # OF LOGICAL RECORDS\n         CVD   R5,PACKED           STORE # OF LOGICAL RECORDS\n         ED    M_DETAIL+68(12),PACKED+2  EDIT # OF LOGICAL RECORDS\n         MVI   M_DETAIL+69,C'='    MOVE IN EQUALS SIGN\n         CLC   =H'61',SMF6LEN      IS THERE ENOUGH FOR FORM NUMBER ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+80(7),=C', FORM=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+87(4),SMF6FMN MOVE IN FORM NUMBER\n         CLC   =H'80',SMF6LEN      IS THERE ENOUGH FOR OUTPUT DEVICE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+91(9),=C', DEVICE=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+100(8),SMF6OUT MOVE IN OUTPUT DEVICE NAME\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 6\n         SPACE 3\n         USING SMF17HDR,R1         MAP RECORD TYPE 17\nTYPE17   CLC   =H'26',SMF17LEN     IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(4),=C'JOB=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+54(8),SMF17JBN MOVE IN JOBNAME\n         CLC   =H'88',SMF17LEN     IS THERE ENOUGH FOR DATA SET NAME ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+62(9),=C', DSNAME=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+71(44),SMF17DSN MOVE IN DATA SET NAME\n         CLC   =H'100',SMF17LEN    IS THERE ENOUGH FOR VOLUME SERIAL ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+115(9),=C', VOLSER=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+124(6),SMF17FVL MOVE IN VOLUME SERIAL\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 17\n         SPACE 3\n         USING SMF18HDR,R1         MAP RECORD TYPE 18\nTYPE18   CLC   =H'26',SMF18LEN     IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(4),=C'JOB=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+54(8),SMF18JBN MOVE IN JOBNAME\n         CLC   =H'88',SMF18LEN     IS THERE ENOUGH FOR OLD DSNAME ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+62(9),=C', DSNAME=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+71(44),SMF18ODS MOVE IN OLD DATA SET NAME\n         CLC   =H'132',SMF18LEN    IS THERE ENOUGH FOR NEW DSNAME ?\n         BH    PUTPRINT            NO - FORGET IT\n         PUT   SYSPRINT,M_DETAIL   WRITE A DETAIL LINE\n         MVC   M_DETAIL+50(13),M_DETAIL+49 BLANK OUT JOBNAME\n         MVC   M_DETAIL+63(8),=C'NEWNAME=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+71(44),SMF18NDS MOVE IN NEW DATA SET NAME\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 18\n         SPACE 3\n         USING SMF21HDR,R1         MAP RECORD TYPE 21\nTYPE21   CLC   =H'26',SMF21LEN     IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(7),=C'VOLSER=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+57(6),SMF21VOL MOVE IN VOLUME SERIAL\n         CLC   =H'28',SMF21LEN     IS THERE ENOUGH FOR CHANNEL ADDRESS\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+63(6),=C', CUU=' MOVE IN DESCRIPTION\n         UNPK  M_DETAIL+69(5),SMF21CA(3) UNPACK CHANNEL ADDRESS\n         NC    M_DETAIL+69(5),=X'0F0F0F0F00' REMOVE ZONES\n         TR    M_DETAIL+69(4),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         CLC   =H'34',SMF21LEN     IS THERE ENOUGH FOR TEMPORARY ERRORS\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+73(6),=C', TEMP' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+79(4),=X'F0202020'\n         SRDL  R4,63               ZEROISE REG 5\n         IC    R4,SMF21TR          PICK UP TEMPORARY READ ERRORS\n         IC    R5,SMF21TW          PICK UP TEMPORARY WRITE ERRORS\n         AR    R5,R4               TOTAL TEMPORARY ERRORS\n         CVD   R5,PACKED           STORE TOTAL TEMPORARY ERRORS\n         ED    M_DETAIL+79(4),PACKED+6 EDIT TOTAL TEMPORARY ERRORS\n         MVI   M_DETAIL+79,C'='    MOVE IN EQUALS SIGN\n         CLC   =H'36',SMF21LEN     IS THERE ENOUGH FOR NO OF START I/O\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+83(5),=C', SIO' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+88(6),=X'F02020202020'\n         SR    R5,R5               ZEROISE REG 5\n         ICM   R5,B'0011',SMF21SIO PICK UP NO OF START I/O\n         CVD   R5,PACKED           STORE NO OF START I/O\n         ED    M_DETAIL+88(6),PACKED+5 EDIT NO OF START I/O\n         MVI   M_DETAIL+88,C'='    MOVE IN EQUALS SIGN\n         CLC   =H'38',SMF21LEN     IS THERE ENOUGH FOR PERMANENT ERRORS\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+94(6),=C', PERM' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+100(4),=X'F0202020'\n         SRDL  R4,63               ZEROISE REG 5\n         IC    R4,SMF21PR          PICK UP PERMANENT READ ERRORS\n         IC    R5,SMF21PW          PICK UP PERMANENT WRITE ERRORS\n         AR    R5,R4               TOTAL PERMANENT ERRORS\n         CVD   R5,PACKED           STORE TOTAL PARMANENT ERRORS\n         ED    M_DETAIL+100(4),PACKED+6 EDIT TOTAL PERMANENT ERRORS\n         MVI   M_DETAIL+100,C'='    MOVE IN EQUALS SIGN\n         CLC   =H'44',SMF21LEN     IS THERE ENOUGH FOR TAPE DENSITY ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+104(6),=C', DEN=' MOVE IN DESCRIPTION\n         UNPK  M_DETAIL+110(3),SMF21DEN(2) UNPACK TAPE DENSITY\n         NC    M_DETAIL+110(3),=X'0F0F00' REMOVE ZONES\n         TR    M_DETAIL+110(2),=C'0123456789ABCDEF' CONVERT TO CHAR.\n         CLC   =H'46',SMF21LEN     IS THERE ENOUGH FOR BLOCK SIZE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+112(9),=C', BLKSIZE' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+121(6),=X'F02020202020'\n         SR    R5,R5               ZEROISE REG 5\n         ICM   R5,B'0011',SMF21BLS PICK UP BLOCK SIZE\n         CVD   R5,PACKED           STORE BLOCK SIZE\n         ED    M_DETAIL+121(6),PACKED+5 EDIT BLOCK SIZE\n         MVI   M_DETAIL+121,C'='   MOVE IN EQUALS SIGN\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 21\n         SPACE 3\n         USING TLGSMF,R1           MAP RECORD TYPE 35\nTYPE35   CLC   =H'26',TLGRLEN      IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(5),=C'USER=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+55(8),TLGUIF MOVE IN USER IDENTIFICATION\n         CLC   =H'57',TLGRLEN      IS THERE ENOUGH FOR TERM. STATUS\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+63(5),=C', CC=' MOVE IN DESCRIPTION\n         UNPK  M_DETAIL+68(5),TLGSTAT(3) UNPACK JOB COMPLETION CODE\n         NC    M_DETAIL+68(5),=X'0F0F0F0F00' REMOVE ZONES\n         TR    M_DETAIL+68(4),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         CLC   =H'92',TLGRLEN      IS THERE ENOUGH FOR # TRANSACTIONS ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+72(7),=C', TRANS' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+79(11),=X'2120202020202020202020'\n         ICM   R5,B'1111',TLGNTSN  PICK UP # TRANSACTIONS\n         CVD   R5,PACKED           STORE # TRANSACTIONS\n         ED    M_DETAIL+78(12),PACKED+2  EDIT # TRANSCATIONS\n         MVI   M_DETAIL+79,C'='    MOVE IN EQUALS SIGN\n         CLC   =H'94',TLGRLEN      IS THERE ENOUGH FOR PERF. GROUP ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+90(5),=C', PGN' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+95(4),=X'F0202020'\n         SR    R5,R5               ZEROISE REG 5\n         ICM   R5,B'0011',TLGPGNO  PICK UP PERFORMANCE GROUP #\n         CVD   R5,PACKED           STORE PERFORMANCE GROUP #\n         ED    M_DETAIL+95(4),PACKED+6  EDIT ERFORMANCE GROUP #\n         MVI   M_DETAIL+95,C'='    MOVE IN EQUALS SIGN\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 35\n         SPACE 3\n         USING SMFRCD80,R1         MAP RECORD TYPE 80\nTYPE80   CLC   =H'30',SMF80LEN     IS THERE ENOUGH OF THE RECORD HERE ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+50(7),=C'USERID=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+57(8),SMF80USR MOVE IN USER IDENTIFICATION\n         CLC   =H'38',SMF80LEN     IS THERE ENOUGH FOR GROUP ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+65(8),=C', GROUP=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+73(8),SMF80GRP MOVE IN GROUP IDENT\n         CLC   =H'54',SMF80LEN     IS THERE ENOUGH FOR TERMINAL ID. ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+81(11),=C', TERMINAL=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+92(8),SMF80TRM MOVE IN TERMINAL ID.\n         CLC   =H'62',SMF80LEN     IS THERE ENOUGH FOR JOBNAME ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+100(6),=C', JOB=' MOVE IN JOBNAME\n         MVC   M_DETAIL+106(8),SMF80JBN MOVE IN JOBNAME\n         CLC   =H'78',SMF80LEN     IS THERE ENOUGH FOR USER IDENT. ?\n         BH    PUTPRINT            NO - FORGET IT\n         MVC   M_DETAIL+114(9),=C', USERID=' MOVE IN DESCRIPTION\n         MVC   M_DETAIL+123(8),SMF80UID MOVE IN USER ID.\n         B     PUTPRINT            WRITE PRINT LINE\n         DROP  R1                  UN-MAP TYPE 80\n         SPACE 3\nPUTPRINT PUT   SYSPRINT,M_DETAIL   WRITE DETAIL LINE\n         B     READFILE            GET ANOTHER RECORD\n         EJECT\nEOF      PUT   SYSPRINT,M_ENDEND   PUT OUT END OF FILE MESSAGE\n         CLOSE (SMFIN,,SYSPRINT)   CLOSE FILES\n         L     R13,4(R13)          RESTORE HIGHER SAVE AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\nSAVEAREA DC    18F'0'              REGISTER SAVE AREA\nPACKED   DS    D                   WORK AREA\nTYPEFLAG DC    256X'00'            TABLE OF RECORD TYPES\n         ORG   TYPEFLAG            DEFAULT RECORD TYPES TO SELECT:-\n         DC    X'01000101'         IPL, DUMP HEADER, DUMP TRAILER\n         ORG\nEXTRAS   DC    256X'00'            EXTRA INFORMATION AVAILABLE TABLE\n         ORG   EXTRAS+0            IPL\n         DC    X'FF'\n         ORG   EXTRAS+5            JOB TERMINATION\n         DC    X'FF'\n         ORG   EXTRAS+6            WRITER\n         DC    X'FF'\n         ORG   EXTRAS+17           SCRATCH\n         DC    X'FF'\n         ORG   EXTRAS+18           RENAME\n         DC    X'FF'\n         ORG   EXTRAS+21           ERROR STATISTICS BY VOLUME\n         DC    X'FF'\n         ORG   EXTRAS+35           LOGOFF\n         DC    X'FF'\n         ORG   EXTRAS+80           RACF\n         DC    X'FF'\n         ORG\nM_HEADER DC    CL133'1LSMFSCAN                     SYSTEM MANAGEMENT FAX\n               CILITIES '\nM_DETAIL DC    CL133'0TYPE=TTT, TIME=HH:MM:SS, DATE=YY.DDD, SID=SSSS '\nM_ENDEND DC    CL133'-                             *****  END OF REPORTX\n                 ****** '\n         PRINT NOGEN\nSMFIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SMFIN,EODAD=EOF,RECFM=VBS\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,  X\n               BLKSIZE=3059\n         LTORG\n         YREGS\n         EJECT\n         PRINT GEN\nSMFTYPES DSECT\n         IFASMFR (0,5,6,17,18,21,35,80)\n         END   LSMFSCAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01TAPE": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x034\\x034\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 820, "newlines": 820, "modlines": 0, "user": "UKGUIDE"}, "text": "LEBTAPE  CSECT\n         PRINT NOGEN\n*  LEBTAPE - UTILITY TO REPORT ON CONTENTS OF A MAGNETIC TAPE\n*  OR MULTIVOLUME SET OF TAPES.\n* LISTS TAPE MARKS,TAPE LABELS,HEADER,TRAILER AND EOV LABELS,\n*  AND COUNTS OF DATA BLOCKS\n*  NEIL MERCHANT DEC 77\n*\n         REGS  ,\n         STM   R14,R12,12(R13)\n         BALR  R12,0               ESTABLISH BASE.\n         USING HERE,R12,R7\nHERE     L     R7,BASE\n         B     BEGIN\nBASE     DC    A(HERE+4096)\nBEGIN    LA    R2,SAVE\n         ST    R2,8(,R13)          FORWARD CHAIN\n         ST    R13,4(,R2)          BACKWARD CHAIN\n         LR    R13,R2\n         B     START\n         DC    C'LEBTAPE '\nSAVE     DS    18F\n*\nSTART    EQU   *\n         MVC   LNCNT,FULL\n         ZAP   PCNT,ZERO\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+48,X10     CHECK FOR SUCCESSFUL OPEN\n         BO    PRINTOPN\n         WTO   'LEBTAPE - SYSPRINT DD STATEMENT MISSING',ROUTCDE=11,DES*\n               C=6\n         ABEND 12\n*                             READ JFCB FOR TAPE\nPRINTOPN EQU   *\n         RDJFCB (TAPE)\n         LTR   R15,R15\n         BZ    JFCBIN\n         WTO   'LEBTAPE - RDJFCB ERROR',ROUTCDE=11,DESC=6\n         ABEND 16,DUMP\n*                             MODIFY TAPE JFCB\nJFCBIN   EQU   *\n         OI    JFCBMASK+4,X80      FORCE WRITING BACK\n         OI    JFCBMASK+4,X01      BYPASS SECURITY PROCESSING\n         OI    JFCBLTYP,X10        SET LABEL PROCESSING\n         NI    JFCBLTYP,XF0         TO BLP\n         IC    R3,JFCBNVOL         REDUCE VOLUME COUNT\n         BCTR  R3,0                BY ONE FOR MULTIVOLUME\n         STC   R3,JFCBNVOL         CHECKING LATER\n*\n         OPEN  (TAPE,INPUT),TYPE=J OPEN TAPE DCB USING MODIFIED\n*                                  JCB\n         TM    TAPE+48,X10\n         BO    TAPEOPN\n         WTO   'LEBTAPE - SYSUT1 OPEN ERROR',ROUTCDE=11,DESC=6\n         ABEND 20,DUMP\n*\nTAPEOPN  EQU   *\n         BAL   R11,PRIME           INITIALIZE PRINT LINE\n*\nREWIND   EQU   *                   REWIND TO LOAD POINT\n         XC    TECB,TECB           IF NECESSARY\n         LA    R1,SEN1        SENSE TO CHECK FOR LOAD POINT\n         STCM  R1,7,IOBSTART\n         LA    R1,TIOB\n         EXCP  (R1)\n*\n         WAIT  ECB=TECB\n         TM    SENS1+1,X08         IF AT LOAD POINT,\n         BO    RBLK                SKIP REWIND\n*\n         LA    R1,REW\n         STCM  R1,7,IOBSTART\n         LA    R1,TIOB\n*\n         EXCP  (R1)                ISSUE REWIND COMMAND\n         WAIT  ECB=TECB\n*\n         CLI   IOBECBCC,X7F        CHECK ECB FOR SUCCESSFUL COMPLETION\n         BNE   ABND\n         SPACE 4\nRBLK     EQU   *                   READ A BLOCK (NO DATA TRANSFER)\n         XC    TECB,TECB           RESET ECB\n         LA    R1,RDB\n         STCM  R1,7,IOBSTART\n         LA    R1,TIOB\n*\n         EXCP  (R1)\n         WAIT  ECB=TECB\n*\n         CLI   IOBECBCC,X41\n         BE    ECBOK\n         CLI   IOBECBCC,X7F        CHECK ECB CC FOR COMPLETION OK\n         BNE   ABND\n*\nECBOK    EQU   *\n         TM    IOBCSW+3,X01        CHECK FOR TAPEMARK (UNIT EXCEPTION)\n         BO    TMK\n*\n         NI    TMFLG,X00           SET OFF TAPEMARK-JUST-READ FLAG,\n*                                                               IF SET\n         XR    R2,R2\n         ICM   R2,03,IOBCSW+5      PICK UP RESIDUAL COUNT IN CSW\n         C     R2,RLEN             WAS IT AN 80-BYTE RECORD?\n         BE    MAYBELAB\nUPCNT    EQU   *\n         L     R2,RCOUNT           INCREMENT COUNT OF BLOCKS READ\n         LA    R2,1(,R2)\n         ST    R2,RCOUNT\n         L     R3,MAXLEN\n         SR    R2,R2\n         ICM   R2,03,IOBCSW+5\n         SR    R3,R2\n         ST    R3,BLKLEN           SAVE LENGTH OF DATA BLOCK\n*\n         B     RBLK                GO TO READ NEXT BLOCK\nTMK      EQU   *\n         BAL   R8,BLKPRNT\n         LA    R10,TMLINE\n         LA    R9,3                LINECOUNT INCREMENT\n         BAL   R11,PRINT           PRINT TAPEMARK LINE\n*\n         TM    HDRFLG,XFF\n         BO    *+12           TWO TM'S AFTER HDR MEANS NULL FILE\n*\n         TM    TMFLG,XFF           TWO CONSECUTIVE TAPEMARKS\n         BO    FINISH               INDICATES END OF LAST FILE ON TAPE\n*\n         OI    TMFLG,XFF           SET ON TAPEMARK-JUST-READ FLAG\n*\n         TM    EOVFLG,XFF          IF EOV ENCOUNTERED, CHECK JFCB\n         BNO   RBLK                FOR NO OF VOLUMES SPECIFIED IN JCL,\n*                                  AND ISSUE EOV MACRO TO FORCE VOLUME\n         MVC   LNCNT,FULL          SWITCHING IF NON-ZERO\n         SR    R3,R3\n         IC    R3,JFCBNVOL         DECREMENT VOLUME COUNT\n         LTR   R3,R3               STORED IN JFCB TO CONTROL\n         BZ    ASKOP               MULTI-VOLUME PROCESSING\n         BCTR  R3,0\n         STC   R3,JFCBNVOL\n*\n         NI    TAPE+48,X33         FORCE DCBOFLGS SETTING\n         OI    TAPE+48,X04         (SYS PROGS' DATA MANAGEMENT MANUAL)\n*\n         EOV   TAPE                FORCE END-OF-VOLUME PROCESSING\n*\n         NI    EOVFLG,X00          SET OFF EOV-LABEL-READ FLAG\n*\n         B     REWIND              GO TO PROCESS NEXT VOLUME\n         SPACE 3\nASKOP    EQU   *                   REWIND AND UNLOAD TAPE\n         XC    WECB,WECB           IF OPERATOR DECIDES\n         WTOR  MF=(E,CONT)         TO CONTINUE WITH MORE\n         WAIT  ECB=WECB            VOLUMES\n*\n         CLI   WREP,E\n         BE    FINISH\n         CLI   WREP,U\n         BNE   ASKOP\n*\n         OI    IOBFLAG1,X40       SET ON COMMAND CHAINING BIT\n         XC    TECB,TECB\n         LA    R1,REWU\n         STCM  R1,7,IOBSTART\n         LA    R1,TIOB\n         EXCP  (R1)\n         WAIT  ECB=TECB\n         NI    IOBFLAG1,XBF        SET OFF COMMAND CHAINING BIT\n*                             OBTAIN CUU OF TAPE DRIVE FOR WTOR\n         L     R1,TAPE+44          R1 -> DEB\n         L     R1,32(,R1)          R1 -> UCB\n         LH    R2,4(,R1)           PICK UP XCUU\n         LA    R4,WTOCUU+2         ADDRESS END OF TARGET AREA\n         LA    R5,XTAB             ADDRESS XLATION TABLE\n         LA    R6,3                LOOP CONTROL ( C U U )\nCUULP    EQU   *\n         SRDL  R2,4                SHIFT ONE HEX DIGIT INTO R3\n         SRL   R3,28               SHIFT IT TO THE LOW END\n         IC    R1,0(R3,R5)         USE IT TO INDEX INTO XTAB\n         STC   R1,0(,R4)           STORE CHARACTER IN TARGET AREA\n         BCTR  R4,0                REDUCE TARGET POINTER\n         BCT   R6,CUULP            LOOP AROUND\nWTOR     EQU   *\n         XC    WECB,WECB\n         WTOR  ,,,,MF=(E,WLIST)    PROMPT OPERATOR TO MOUNT NEXT TAPE\n         WAIT  ECB=WECB\n*\n*\n         CLI   WREP,U\n         BNE   WTOR                WRONG REPLY,SO GO\n*                                  ROUND AGAIN\n         NI    EOVFLG,X00          SET OFF EOV FLAG\n         B     REWIND\n         SPACE 4\n*\nMAYBELAB EQU   *                   LAST BLOCK READ (NO DATA TRANSFER)\n*                                  WAS 80 BYTES LONG, SO MAY HAVE BEEN\n*                                  A LABEL ..... SO BACKSPACE AND\n         OI    IOBFLAG1,X40        READ IT AGAIN PROPERLY TO CHECK\n         LA    R1,BSRD             (USING COMMAND CHAINING)\n         STCM  R1,7,IOBSTART\n         XC    TECB,TECB\n         LA    R1,TIOB\n         EXCP  (R1)\n         WAIT  ECB=TECB\n         NI    IOBFLAG1,XBF        SET OFF COMMAND CHAINING BIT\n         TM    CODE,ASCII\n         BNO   EBCDIC\n         TR    LABAREA,TRTABLE    TRANSLATE FROM ASCII\nEBCDIC   EQU   *\n         CLC   TYPE,UHL\n         BE    USRLAB              USER LABEL\n         CLC   TYPE,UTL\n         BE    USRLAB              USER LABEL\n*\n         CLC   TYPE(4),VOL1\n         BE    VOLLABEL            VOLUME LABEL\n*\n         CLC   TYPE,HDR\n         BNE   *+12\n         OI    HDRFLG,XFF\n         B     LABOK\n         CLC   TYPE,EOV\n         BNE   TRYEOF              EOV LABEL\n         OI    EOVFLG,XFF          SET EOV-LABEL-READ FLAG\n         B     LABOK\nTRYEOF   EQU   *\n         CLC   TYPE,EOF            EOF LABEL\n         BNE   TRYASC             UNKNOWN SO TRY ASCII\n         NI    HDRFLG,X00\n*\nLABOK    EQU   *\n         CLI   ID,CONE             TYPE ONE\n         BE    ONETYPE\n         CLI   ID,CTWO             TYPE TWO\n         BE    TWOTYPE\n         B     TRYASC             UNKNOWN SO TRY ASCII\n         SPACE 4\nTRYASC   EQU   *\n         TR    LABAREA,TRTABLE\n         CLC   TYPE(4),VOL1\n         BNE   UPCNT\n         OI    CODE,ASCII\n         B     VOLLABEL\n         SPACE 3\n*\nUSRLAB   EQU   *              PROCESS USER LABELS\n         BAL   R8,BLKPRNT          PRINT DATA BLOCK COUNT\n         LA    R9,2\n         LA    R10,UHLTL\n         BAL   R11,PRINT           PRINT HEADING\n*\n         MVC   UTYPE,TYPE\n         MVC   ULABEL,UDETAIL\n         LA    R9,3\n         LA    R10,UHLDTL\n         BAL   R11,PRINT           PRINT LABEL\n         B     RBLK\n*\nVOLLABEL EQU   *              PROCESS VOLUME LABELS\n         BAL   R8,BLKPRNT          PRINT BLOCK COUNT\n         LA    R9,2\n         LA    R10,VOLHDR\n         BAL   R11,PRINT           PRINT HEADING\n*\n         MVC   VOLIDV,VOLID\n         MVC   OWNERV,OWNER\n         LA    R9,3\n         LA    R10,VOLLAB\n         BAL   R11,PRINT           PRINT LABEL\n         B     RBLK\nONETYPE  EQU   *              PROCESS TYPE ONE STANDARD LABELS\n         BAL   R8,BLKPRNT          PRINT BLOCK COUNT\n         LA    R9,2\n         LA    R10,T1HDR\n         BAL   R11,PRINT           PRINT HEADING\n*\n         MVC   HEE1,TYPE\n         MVC   DSN1,DSN\n         MVC   VOLSER1,VOLSER\n         MVC   VOLSEQ1,VOLSEQ\n         MVC   DSSEQ1,DSSEQ\n         MVC   GDGNO1,GDGNO\n         MVC   GDGVN1,GDGVN\n         MVC   CRTDTE1,CRTDTE\n         MVC   EXPDTE1,EXPDTE\n         MVC   SECSTAT1,SECSTAT\n         MVC   BLKS1,BLKS\n*\n         LA    R9,3\n         LA    R10,LABONE\n         BAL   R11,PRINT           PRINT LABEL DETAILS\n         CLC   TYPE,EOF\n         BE    CHKCOUNT\n         CLC   TYPE,EOV\n         BE    CHKCOUNT\n         B     RBLK\n*\nCHKCOUNT EQU   *                 CHECK THAT BLOCK COUNTS MATCH\n         CLC   STORERCT,FULLZERO   IF ACCUMULATED BLOCK COUNT ZERO\n         BNE   B1                 THEN ENSURE EOF BLOCK COUNT THE SAME.\n*\n         CLC   BLKS1,CHARZERO\n         BE    RBLK\n         B     C1\nB1       XC    STORERCT,STORERCT\n         CLC   BLKNO+2(6),BLKS1\n         BE    RBLK\n*                                  IN EVENT OF MISMATCH PRINT MESSAGE.\nC1       CLC   LNCNT,SIXTYTWO      SPACE TO PRINT MESSAGE?\n         BL    A1\n         MVC   LNCNT,FULL\nA1       LA    R9,2\n         LA    R10,MISMATCH\n         MVI   CC1,X13\n         BAL   R11,PRINT\n         LA    R9,1\n         MVI   CC1,X09\n         MVC   MESFLD,OPFLDA\n         BAL   R11,PRINT\n         LA    R9,1\n         MVI   MESFLD,X40\n         MVC   MESFLD+1(77),MESFLD\n         BAL   R11,PRINT\n         LA    R9,1\n         MVC   MESFLDA,OPFLDB\n         BAL   R11,PRINT\n         LA    R9,1\n         MVI   MESFLD,X40\n         MVC   MESFLD+1(77),MESFLD\n         BAL   R11,PRINT\n         LA    R9,3\n         MVI   CC1,X19\n         MVC   MESFLD,OPFLDA\n         BAL   R11,PRINT\n         B     RBLK\n*\nTWOTYPE  EQU   *                  PROCESS TYPE TWO STANDARD LABELS\n         BAL   R8,BLKPRNT         PRINT BLOCK COUNT\n         LA    R9,2\n         LA    R10,T2HDR\n         BAL   R11,PRINT           PRINT HEADING\n*\n         MVC   HEE2,TYPE\n         MVC   RECFM2,RECFM\n         MVC   BLKATT2,BLKATT\n         MVC   BLKSZE2,BLKSZE\n         MVC   RECSZE2,RECSZE\n         MVC   TDEN2,TDEN\n         MVC   VOLSWIT2,VOLSWIT\n         MVC   JOBID2,JOBID\n         MVC   RECTEC2,RECTEC\n         MVC   CONCHAR2,CONCHAR\n*\n         LA    R9,3\n         LA    R10,LABTWO\n         BAL   R11,PRINT           PRINT LABEL DETAILS\n         B     RBLK\n         SPACE 4\n*\nBLKPRNT  EQU   *                   PRINT COUNT OF DATA BLOCKS\n         L     R2,RCOUNT           AND ZEROIZE IT\n         LTR   R2,R2\n         BZR   R8\n         CVD   R2,RCOUNTD\n         MVC   BLKNO,BPAT\n         ED    BLKNO,RCOUNTD+4\n*\n         L     R2,BLKLEN\n         CVD   R2,LASTBLK\n         MVC   LASTLEN,LPAT\n         ED    LASTLEN,LASTBLK+5\n*\n         LA    R9,3\n         LA    R10,BLKLINE\n         BAL   R11,PRINT\n         L     R2,RCOUNT\n         ST    R2,STORERCT\n         XC    RCOUNT,RCOUNT\n         BR    R8\n         SPACE 2\nPRIME    EQU   *\n         TIME  DEC                 ESTABLISH DATE AND TIME\n         ST    R1,DTSTOR\n         ST    R0,TMSTOR\n         MVI   TMSTOR+3,SIGN\n         SRP   TMSTOR,64-1,0\n         ED    DATE,DTSTOR\n         ED    TIME,TMSTOR\n         BR    R11                 RETURN\n         SPACE 2\nPRINT    EQU   *\n         CLC   LNCNT,FULL          CHECK FOR NEW PAGE REQUIRED\n         BL    ONPAGE\n*\n         PUT   SYSPRINT,SKIP       SKIP TO NEW PAGE\n         MVC   LNCNT,THREE\n         AP    PCNT,ONE            PAGE NUMBER\n         MVC   PNO,PPAT\n         ED    PNO,PCNT\n         PUT   SYSPRINT,PROG       PRINT HEADING LINE\n         TM    CODE,ASCII\n         BNO   NOTASC\n         PUT   SYSPRINT,ASCIILN\nNOTASC   EQU   *\nONPAGE   EQU   *\n         A     R9,LNCNT\n         ST    R9,LNCNT\n         PUT   SYSPRINT,(R10)      PRINT ITEM LINE\n         BR    R11\n         SPACE 2\nABND     EQU   *\n         WTO   'LEBTAPE - I/O ERROR ON TAPE',ROUTCDE=11,DESC=6\n         ABEND 32,DUMP\n         SPACE 2\nENDT     EQU   *\n         B     ASKOP\nFINISH   EQU   *\n         BAL   R8,BLKPRNT\n         CLOSE (TAPE,,SYSPRINT)\n         LA    R13,SAVE\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         XR    R15,R15\n         BR    R14\n         EJECT\n*\n*  STORAGE,CONSTANTS,PRINT LINES,EQUATES,LITERAL POOL,CONTROL BLOCKS\n*  AND CCW'S FOLLOW\n*\n*\n*              ASSORTED STORAGE AREAS\n*\nLASTBLK  DS    D\nRCOUNTD  DS    D\nSTORERCT DC    F'0'\nDTSTOR   DS    F\nTMSTOR   DS    F\nLNCNT    DS    F\nRCOUNT   DS    F\nBLKLEN   DS    F\nPCNT     DS    PL2\nSENS1    DC    H'0'\n         SPACE 2\n*\n*              ASSORTED CONSTANTS AND FLAGS\n*\nBPAT     DC    X'4021202020202020'\nPPAT     DC    X'40212020'\nLPAT     DC    X'402120202020'\nFULLZERO DC    F'0'\nSIXTYTWO DC    F'62'\nFULL     DC    F'72'\nONE      DC    PL1'1'\nTHREE    DC    F'3'\nRLEN     DC    A(32767-80)\nMAXLEN   DC    A(32767)\nVOL1     DC    C'VOL1'\nHDR      DC    C'HDR'\nUHL      DC    C'UHL'\nEOF      DC    C'EOF'\nUTL      DC    C'UTL'\nEOV      DC    C'EOV'\n*\nEOVFLG   DC    X'00'\nTMFLG    DC    X'00'\nHDRFLG   DC    X'00'\nCODE     DC    X'00'\n*\nXTAB     DC    C'0123456789ABCDEF'\nCHARZERO DC    CL6'000000'\nZERO     DC    PL2'0'\n         SPACE 2\n*\n*              CONTROL BLOCKS FOR EXCP PROCESSING\n*\nTAPE     DCB   DDNAME=SYSUT1,                                          *\n               MACRF=(E),                                              *\n               EXLST=LSTA,                                             *\n               EODAD=ENDT,                                             *\n               DSORG=PS,                                               *\n               IOBAD=TIOB,                                             *\n               DEVD=TA\n*\nLSTA     DS    0F\n         DC    X'87'\n         DC    AL3(JFCBAREA)\nJFCBAREA DS    64F\n         ORG   JFCBAREA+52\nJFCBTSDM DS    X\n         ORG   JFCBAREA+66\nJFCBLTYP DS    X\n         ORG   JFCBAREA+72\nJFCBMASK DS    5X\n         ORG   JFCBAREA+117\nJFCBNVOL DS    X\n         ORG   JFCBAREA+174\nJFCBVLCT DS    X\n         ORG   ,\n         SPACE 2\nTIOB     DS    0CL32               IOB FOR TAPE DCB\nIOBFLAG1 DC    X'02'\nIOBFLAG2 DC    X'00'\nIOBSENS0 DC    X'00'\nIOBSENS1 DC    X'00'\nIOBECBCC DC    X'00'\nIOBECBPT DC    AL3(TECB)\nIOBFLAG3 DC    X'00'\nIOBCSW   DC    XL7'00000000000000'\nIOBSIOCC DC    X'00'\nIOBSTART DC    AL3(0)\n         DC    X'00'\nIOBDCBPT DC    AL3(TAPE)\nIOBRESTR DC    AL4(0)\nIOBINCAM DC    AL2(0)\nIOBERRCT DC    AL2(0)\n         SPACE 2\nTECB     DC    F'0'                ECB FOR TAPE IOB\n         SPACE 2\n*\n*              OTHER CONTROL BLOCKS\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        *\n               MACRF=(PM),                                             *\n               DSORG=PS,                                               *\n               RECFM=FM,                                               *\n               BLKSIZE=121\n         SPACE 2\nWLIST    DS    0F\n         DC    AL1(1)\n         DC    AL3(WREP)\n         DC    A(WECB)\n         DC    AL2(55)             LENGTH\n         DC    X'8000'             MCS FLAGS\n         DC    C'LEBTAPE - MOUNT NEXT VOLUME ON '\nWTOCUU   DC    C'   '\n         DC    C' '\n         DC    C'AND THEN REPLY U'\n         DC    X'0400'             DESC CODES\n         DC    X'0020'             ROUTE CODES\n         SPACE 2\nCONT     DS    0F\n         DC    AL1(1)\n         DC    AL3(WREP)\n         DC    A(WECB)\n         DC    AL2(86)\n         DC    X'8000'\n         DC    C'LEBTAPE - EOV ON THIS VOLUME.REPLY E TO END,OR U TO CO*\n               NTINUE WITH A FURTHER VOLUME'\n         DC    X'0400'\n         DC    X'0020'\n         SPACE 3\nWECB     DC    F'0'\nWREP     DC    C' '\n*\n*\n*\n         SPACE 2\n*\n*              CCW'S\n*\n         DS    0D\nREW      CCW   X07,0,X30,X01       REWIND TO LOAD POINT\n*\nRDB      CCW   X02,0,X30,32767     FORWARD SPACE A BLOCK (NDT,SILI)\n*\nBSRD     CCW   X27,0,X70,X01       BACKSPACE A BLOCK AND\n         CCW   X02,LABAREA,X20,32767   READ IT (SILI)\n*\nREWU     CCW   X0F,0,X70,X01       REWIND/UNLOAD AND NOP\n         CCW   X03,0,X20,X01\n*\nSEN1     CCW   X04,SENS1,X20,X02\n*\n         SPACE 2\n*\n*              ASSORTED EQUATES\n*\nX00      EQU   X'00'\nX01      EQU   X'01'\nX02      EQU   X'02'\nX03      EQU   X'03'\nX04      EQU   X'04'\nX07      EQU   X'07'\nX08      EQU   X'08'\nX09      EQU   X'09'\nX0F      EQU   X'0F'\nX10      EQU   X'10'\nX13      EQU   X'13'\nX19      EQU   X'19'\nX20      EQU   X'20'\nX27      EQU   X'27'\nX30      EQU   X'30'\nX33      EQU   X'33'\nX37      EQU   X'37'\nX40      EQU   X'40'\nX41      EQU   X'41'\nX70      EQU   X'70'\nX7F      EQU   X'7F'\nX80      EQU   X'80'\nX82      EQU   X'82'\nXBF      EQU   X'BF'\nXF0      EQU   X'F0'\nXFF      EQU   X'FF'\n*\nSIGN     EQU   X'0F'\n*\nCONE     EQU   C'1'\nCTWO     EQU   C'2'\nE        EQU   C'E'\nU        EQU   C'U'\nASCII    EQU   X'FF'\n         SPACE 2\n*                   IOAREA\n*\n*\nLABAREA  DS    0CL80\nTYPE     DS    CL3\nID       DS    C\n         DS    CL76\n         ORG   LABAREA        IBM STANDARD VOL1 LABEL\n         DS    CL4\nVOLID    DS    CL6\n         DS    CL31\nOWNER    DS    CL10\n         DS    CL29\n         ORG   LABAREA        IBM STANDARD HDR1/EOV1/EOF1 LABEL\n         DS    CL4\nDSN      DS    CL17\nVOLSER   DS    CL6\nVOLSEQ   DS    CL4\nDSSEQ    DS    CL4\nGDGNO    DS    CL4\nGDGVN    DS    CL2\nCRTDTE   DS    CL6\nEXPDTE   DS    CL6\nSECSTAT  DS    C\nBLKS     DS    CL6\nSYSCODE  DS    CL13\n         DS    CL7\n         ORG   LABAREA        IBM STANDARD HDR2/EOV2/EOF2 LABEL\n         DS    CL4\nRECFM    DS    C\nBLKSZE   DS    CL5\nRECSZE   DS    CL5\nTDEN     DS    C\nVOLSWIT  DS    C\nJOBID    DS    CL17\nRECTEC   DS    CL2\nCONCHAR  DS    C\n         DS    C\nBLKATT   DS    C\n         DS    CL8\n         DS    C\n         DS    CL32\n         ORG   LABAREA        IBM STANDARD USER LABEL\n         DS    CL4\nUDETAIL  DS    CL76\n         SPACE 2\n*\n*              ASSORTED PRINT LINES\n*\nSKIP     DS    0CL121\n         DC    X'8B'\n         SPACE 2\nPROG     DS    0CL121\n         DC    X'19'\n         DC    CL90'LEBTAPE - MAGNETIC TAPE CONTENTS ANALYSIS'\nDATE     DC    X'40202120204B202020'\n         DC    C' '\nTIME     DC    X'402120204B20204B2020'\n         DC    C'  PAGE'\nPNO      DS    CL4\n         SPACE 2\nTMLINE   DS    0CL121\n         DC    X'19'\n         DC    C'*** TM ***'\n         DC    108C' '\n         DC    2C' '\n         SPACE 2\nBLKLINE  DS    0CL121         PRINT LINE FOR NUMBER OF DATA BLOCKS\n         DC    X'19'\n         DC    20C'*'\nBLKNO    DS    CL8\n         DC    C'  DATA BLOCKS  '\n         DC    C'*'\n         DC    C'  LAST BLOCK'\nLASTLEN  DS    CL6\n         DC    C' BYTES LONG'\n         DC    47C'*'\n         SPACE 2\nUHLTL    DS    0CL121\n         DC    X'11'\n         DC    10C' '\n         DC    CL110' USER LABEL'\n         SPACE 2\nUHLDTL   DS    0CL121\n         DC    X'19'\n         DC    C'** '\nUTYPE    DS    CL4\n         DC    C' **'\nULABEL   DS    CL76\n         DC    44C' '\n         SPACE 2\nVOLHDR   DS    0CL121              VOLUME LABEL HEADER\n         DC    X'11'\n         DC    11C' '\n         DC    C'VOL ID'\n         DC    13C' '\n         DC    C'OWNER ID  '\n         DC    82C' '\n         SPACE 2\nT1HDR    DS    0CL121              TYPE ONE LABEL (HDR/EOV/EOF) HEADER\n         DC    X'11'\n         DC    11C' '\n         DC    C'DATA SET NAME     '\n         DC    C'VOLSER  '\n         DC    C'VOLSEQ  '\n         DC    C'DSSEQ  '\n         DC    C'GDGGNO  '\n         DC    C'GDGVNO  '\n         DC    C'CRTDTE  '\n         DC    C'EXPDTE  '\n         DC    C'SEC  '\n         DC    C'BLK CNT  '\n         DC    42C' '\nMISMATCH DS    0CL121\nCC1      DS    X\n         DC    20C' '\n         DC    C'/'\nMESFLD   DS    0CL78\n         DS    CL29\nMESFLDA  DS    CL20\n         DS    CL29\n         DC    C'/'\n         DC    20C' '\nOPFLDA   DC    78C'/'\nOPFLDB   DC    C'BLOCK COUNT MISMATCH'\n         SPACE 2\nT2HDR    DS    0CL121              TYPE TWO LABEL (HDR/EOV/EOF) HEADER\n         DC    X'11'\n         DC    11C' '\n         DC    C'RECFM   '\n         DC    C'BLKSIZE '\n         DC    C'LRECL  '\n         DC    C'DEN     '\n         DC    C'VOLSWIT     '\n         DC    C'JOBID            '\n         DC    C'RECTEQ   '\n         DC    C'CC'\n         DC    38C' '\n         SPACE 2\nVOLLAB   DS    0CL121              VOLUME LABEL DETAIL\n         DC    X'19'\n         DC    C'** VOL1 ** '\nVOLIDV   DS    CL6\n         DC    13C' '\nOWNERV   DS    CL10\n         DC    80C' '\n         SPACE 2\nLABONE   DS    0CL121              TYPE ONE (HDR/EOV/EOF) LABEL DETAIL\n         DC    X'19'\n         DC    C'** '\nHEE1     DS    CL4\n         DC    C' **'\n         DC    C' '\nDSN1     DS    CL17\n         DC    C' '\nVOLSER1  DS    CL6\n         DC    3C' '\nVOLSEQ1  DS    CL4\n         DC    3C' '\nDSSEQ1   DS    CL4\n         DC    3C' '\nGDGNO1   DS    CL4\n         DC    4C' '\nGDGVN1   DS    CL2\n         DC    6C' '\nCRTDTE1  DS    CL6\n         DC    2C' '\nEXPDTE1  DS    CL6\n         DC    3C' '\nSECSTAT1 DS    C\n         DC    4C' '\nBLKS1    DS    CL6\n         DC    24C' '\n         SPACE 2\nLABTWO   DS    0CL121              TYPE TWO (HDR/EOV/EOF) LABEL DETAIL\n         DC    X'19'\n         DC    C'** '\nHEE2     DS    CL4\n         DC    C' **'\n         DC    C'  '\nRECFM2   DS    C\nBLKATT2  DS    C\n         DC    6C' '\nBLKSZE2  DS    CL5\n         DC    2C' '\nRECSZE2  DS    CL5\n         DC    3C' '\nTDEN2    DS    C\n         DC    9C' '\nVOLSWIT2 DS    C\n         DC    4C' '\nJOBID2   DS    CL17\n         DC    6C' '\nRECTEC2  DS    CL2\n         DC    5C' '\nCONCHAR2 DS    C\n         DC    39C' '\nTRTABLE  DC    256X'40'           UNPRINTABLE TO BLANKS\n         ORG   TRTABLE+33\n         DC    C'!\"#\u00a2%',X'507D'\n         DC    C'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         ORG\nASCIILN  DS    0CL121\n         DC    X'11'\n         DC    CL120'    **** ASCII TAPE BEING PROCESSED ****'\n         SPACE 2\n         LTORG ,\n         END   LEBTAPE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01UT01": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00S\\x00S\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "UKGUIDE"}, "text": "UT01     SAVER EQU=N\n         LR    5,1                      SAVE POINTER TO PARM\n*\n********\n*\n         OPEN  (PUNCH,(OUTPUT))\n*\n********\n*\nL01      DS    0H\n         L     5,0(5)\n         LH    2,0(5)                   LENGTH\n         LA    5,2(5)                   ADDR. PARM\n         MVC   RETCODE,=F'0'            RC=0\n         MVI   DLIMITER,C';'            DEFAULT DELIMITER\n         CLI   0(5),C'A'                TEST IF FIRST CHAR. LESS THAN A\n         BNL   L10                      IF NOT DELEMITER DEFAULTS\n         CLI   0(5),C' '                ALSO IF = BLANK\n         BE    L10                      DELIMITER DEFAULTS\nL05      DS    0H\n         MVC   DLIMITER,0(5)            SET UP NEW DELIMITER\n         BCTR  2,0                      PARM LENGTH - 1\n         LA    5,1(5)                   POINT PAST DELIM. TO START TEXT\nL10      DS    0H\n         LR    3,5                      SAVE START\n*\n********\nL15      DS    0H\n         CLC   0(1,5),DLIMITER          IS THIS ONE = DLIM.\n         BE    L20                      YES\n         LA    5,1(5)                   NO-SEARCH NEXT\n         BCT   2,L15                    DECREASE COUNT\n         BAL   10,CREATE                PUT OUT RECORD\n         B     THEEND\nL20      DS    0H\n         BAL   10,CREATE                PUT OUT RECORD\n         BCT   2,L15                    DECREASE COUNT\n*\n********\n*\nTHEEND   DS    0H\n         CLOSE (PUNCH)\n         L     13,4(13)\n         L     15,RETCODE\n         RETURN (14,12),RC=(15)\n         PRINT NOGEN\nPUNCH    DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80\n         PRINT GEN\n*\n********\n*\nCREATE   DS    0H\n         MVC   OUT(100),OUT-1           CLEAR AREA\n         LR    4,3                      SAVE START\n         SR    3,5                      CALC. LENGTH\n         BZ    L25                      EMPTY CARD GENERATED\n         LPR   3,3                      MAKE POSITIVE\n         BCTR  3,0                      LENGTH CODE\n         EX    3,MVC1\nL25      DS    0H\n         LA    5,1(5)                   NEXT CHAR.\n         LR    3,5                      SAVE START NEXT PARM\n         CLC   OUT+80(20),=CL20' '      IS OUTPUT AREA EXTENSION BLANK\n         BE    L30                      YES\n         MVC   RETCODE,=F'8'            ERROR\nL30      DS    0H\n         BAL   11,CARDOUT               OUTPUT CARD IMAGE\n         BR    10\nMVC1     MVC   OUT(0),0(4)              MOVE DATA TO OUTPUT AREA\n*\n********\n*\nCARDOUT  PUT   PUNCH,OUT\n         BR    11\n*\n********\n*\nDLIMITER DS    CL1\n         DC    CL1' '\nOUT      DS    CL80\n         DS    CL20                     EXTENSION\nRETCODE  DS    F\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01VERFY": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xee\\x00\\xee\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 238, "newlines": 238, "modlines": 0, "user": "UKGUIDE"}, "text": "LVSAMVFY TITLE '                                    VSAM VOLUME VERIFY'\n***********************************************************************\n*                                                                     *\n*        LVSAMVFY - VSAM VOLUME VERIFY                                *\n*                                                                     *\n*        THIS PROGRAM READS THROUGH THE VTOC OF A DISK AND LOCATES    *\n*        ALL OF THE VSAM DATA SETS ON IT.  IT WRITES OUT IDCAMS       *\n*        CONTROL CARDS TO VERIFY ALL OF THEM AND THEN INVOKES IDCAMS. *\n*                                                                     *\n*        AUTHOR: DAVE THORBY, AUGUST 1988                             *\n*                                                                     *\n*        MODIFICATIONS:                                               *\n*        DRT DEC 88: ONLY ISSUE VERIFY IF UPDATE FLAG IS ON IN VTOC   *\n*        DRT DEC 88: ISSUE IDCAMS LISTCAT TO GET BASE CLUSTER NAME    *\n*        DRT JAN 89: ADD \"CATINDEX.\" TO EXCLUDED DATA SETS            *\n*        DRT FEB 89: VERIFY USERCATALOGS TO AVOID RC8                 *\n*                                                                     *\n*        RETURN CODES:                                                *\n*        0   = CHANGED VSAM FOUND AND VERIFIED                        *\n*        4   = NO CHANGED VSAM DATA SETS ON DISK                      *\n*        8   = UNABLE TO FIND CLUSTER NAMES                           *\n*              NOTE: THE CONDITION CODE FROM IDCAMS IS SUPPRESSED,    *\n*                    AS EMPTY FILES PRODUCE RC=116, CC=12             *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        R1    SVC 99 REQUEST BLOCK POINTER                           *\n*        R11   RECORD AREA                                            *\n*        R12   BASE REGISTER                                          *\n*        R13   SAVE AREA                                              *\n*        R14   WORK REGISTER                                          *\n*        R15   WORK REGISTER                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLVSAMVFY CSECT\n         SAVE  (14,12),,'LVSAMVFY &SYSDATE &SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING LVSAMVFY,R12        ESTABLISH BASE REGISTER\n         BAL   R11,BEGIN           POINT TO PROGRAM SAVE AREA\n         DC    18F'0'              SAVE AREA\nBEGIN    ST    R11,8(R13)          CHAIN SAVE AREAS FORWARD\n         ST    R13,4(R11)          CHAIN SAVE AREAS BACKWARD\n         LR    R13,R11             POINT TO PROGRAM SAVE AREA\n         L     R1,0(R1)            POINT TO PARM LIST\n         CLC   =H'5',0(R1)         IS LENGTH 5 ?\n         BNE   START               NO - NOT DEBUG\n         CLC   =C'DEBUG',2(R1)     IS PARM DEBUG\n         BNE   START               NO - DO NOT SET FLAG\n         OI    FLAGS,DEBUG         SET DEBUG FLAG ON\nSTART    OPEN  (SYSIN,OUTPUT)      OPEN CARD OUTPUT FILE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIND ALL //DISKXXXX DD STATEMENTS                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOOP     TM    LASTDDN,X'80'       WAS THAT THE LAST DDNAME ?\n         BO    EOJ                 YES - GO TO END OF JOB\n         LH    R1,DDNUMBER         PICK UP LAST RELATIVE NUMBER\n         LA    R1,1(R1)            ADD 1\n         STH   R1,DDNUMBER         STORE NEW RELATIVE NUMBER\n         MVC   DDNAME-2(2),=H'8'   RESET LENGTH OF DDNAME\n         MVC   DDNAME,=CL8' '      BLANK OUT DDNAME\n         LA    R1,SVC99RBP         POINT TO REQUEST BLOCK POINTER\n         DYNALLOC ,                GET NEXT DDNAME\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CHECKDDN            DYNALLOC ERROR DETECTED\n         ABEND 10,DUMP             STOP THE PROGRAM RIGHT HERE\n         SPACE 3\nNULLFILE MVC   WTODUMMY+26(8),DDNAME MOVE THE DDNAME TO MESSAGE\n         CNOP  0,4\nWTODUMMY WTO   'LVSAMVFY - DDNAME=XXXXXXXX, DSN=NULLFILE',ROUTCDE=11\n         B     LOOP                GET ANOTHER DD STATEMENT\n         EJECT\nCHECKDDN CLC   =C'DISK',DDNAME     CHECK FOR //DISKXXXX DD\n         BNE   LOOP                NOT FOUND - TRY ANOTHER\n         LA    R14,VTOC            POINT TO DCB\n         USING IHADCB,R14          MAP THE DCB\n         MVC   DCBDDNAM,DDNAME     OVERWRITE THE DDNAME\n         MVC   WTODDNAM+26(8),DDNAME MOVE THE DDNAME TO MESSAGE\n         DROP  R14                 REUSE REGISTER\n         RDJFCB VTOC               PREPARE TO OPEN VTOC\n         LA    R14,VTOCJFCB        POINT TO JFCB\n         USING INFMJFCB,R14        MAP THE JFCB\n         CLC   =C'NULLFILE ',JFCBDSNM IS THIS A DD DUMMY ?\n         BE    NULLFILE            HANDLE IT PROPERLY\n         MVC   WTODDNAM+43(6),JFCBVOLS MOVE THE VOLSER TO MESSAGE\n         MVI   JFCBDSNM,X'04'      SET UP FORMAT 4 DSCB KEY\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         DROP  R14                 REUSE REGISTER\n         OPEN  (VTOC,INPUT),TYPE=J ACCESS THE VTOC\n         CNOP  0,4\nWTODDNAM WTO   'LVSAMVFY - DDNAME=XXXXXXXX, VOLSER=XXXXXX',ROUTCDE=11\n         LA    R11,VTOCWORK        POINT TO RECORD WORK AREA\n         USING IECSDSL1,R11        MAP THE DSCB\nGETDSCB  READ  VTOCDECB,SF,VTOC,VTOCWORK,'S' GET NEXT DSCB\n         CHECK VTOCDECB            WAIT FOR I/O TO COMPLETE\n         CLI   DS1FMTID,C'1'       IS THIS A FORMAT 1 ?\n         BNE   GETDSCB             NO - TRY ANOTHER\n         TM    DS1DSORG+1,DS1ORGAM IS THIS A VSAM DATA SET ?\n         BZ    GETDSCB             NO - TRY ANOTHER\n         TM    DS1DSIND,DS1DSCHA   HAS THIS DATA SET BEEN CHANGED ?\n         BZ    GETDSCB             NO - TRY ANOTHER\n         CLC   =C'SYS1.VVDS.',DS1DSNAM  IS THIS A VVDS DATA SET ?\n         BE    GETDSCB             YES - DO NOT VERIFY IT\n         CLC   =C'SYS1.MAN',DS1DSNAM  IS THIS AN SMF DATA SET?\n         BE    GETDSCB             YES - DO NOT VERIFY IT\n         CLC   =C'PAGE.',DS1DSNAM  IS THIS A PAGE DATA SET ?\n         BE    GETDSCB             YES - DO NOT VERIFY IT\n         CLC   =C'CATINDEX.',DS1DSNAM IS THIS A CATALOG ?\n         BE    GETDSCB             YES - DO NOT VERIFY IT\n         MVC   CARDOUT+18(44),DS1DSNAM SET UP IDCAMS CONTROL CARD\n         PUT   SYSIN,CARDOUT       WRITE OUT IDCAMS CONTROL CARD\n         NI    BYPASS+1,X'0F'      DON'T BYPASS IDCAMS LISTCAT\n         TM    FLAGS,DEBUG         IS DEBUG ACTIVE ?\n         BZ    GETDSCB             NO - GET ANOTHER DSCB\n         MVC   DEBUG1+19(44),DS1DSNAM MOVE DSNAME TO MESSAGE\n         CNOP  0,4\nDEBUG1   WTO   'LVSAMVFY 1 ----+----1----+----2----+----3----+----4----X\n               ',ROUTCDE=11\n         B     GETDSCB             GET ANOTHER DSCB\n         EJECT\nEOV      CLOSE VTOC                END OF VOLUME\n         B     LOOP                CHECK FOR ANOTHER DD STATEMENT\n         EJECT\nEOJ      CLOSE SYSIN               END OF ALL VOLUMES\n         LA    R15,4               INDICATE NO VSAM FOUND\nBYPASS   B     RETURN              BYPASS IDCAMS IF NO ENTRIES\n         WTO   'LVSAMVFY - LISTING CHANGED VSAM',ROUTCDE=11\n         LINK  EP=IDCAMS,PARAM=(H0,DDNAMES),VL=1\n         OPEN  (SYSIN,OUTPUT,SYSPRINT,INPUT)\n         EJECT\nGETPRINT GET   SYSPRINT            GET PRINT LINE\n         CLC   =H'21',0(R1)        IS THIS RECORD LONG ENOUGH ?\n         BH    GETPRINT            NO - SKIP IT\n         CLC   =C'CLUSTER--',12(R1) ASSOCIATED CLUSTER ?\n         BE    GP_MATCH            YES - VERIFY IT\n         CLC   =C'AIX------',12(R1) ASSOCIATED AIX ?\n         BE    GP_MATCH            YES - VERIFY IT\n         CLC   =C'ALOG --- ',12(R1) USER CATALOG ?\n         BNE   GETPRINT            NO - TRY ANOTHER\nGP_MATCH LH    R14,0(R1)           PICK UP RECORD LENGTH\n         SH    R14,=H'22'          REMOVE FIXED PORTION\n         MVI   VERIFY+18,C' '      BLANK OUT -\n         MVC   VERIFY+19(43),VERIFY+18  DATA SET NAME\n         EX    R14,GP_MOVE         MOVE OVER DATA SET NAME\n         PUT   SYSIN,VERIFY        WRITE OUT VERIFY CARD\n         NI    BYPASS2+1,X'0F'     DON'T BYPASS IDCAMS VERIFY\n         TM    FLAGS,DEBUG         IS DEBUG ACTIVE ?\n         BZ    GETPRINT            NO - LOOP BACK FOR ANOTHER LINE\n         MVC   DEBUG2+19(44),VERIFY+18 MOVE DSNAME TO MESSAGE\n         CNOP  0,4\nDEBUG2   WTO   'LVSAMVFY 2 ----+----1----+----2----+----3----+----4----X\n               ',ROUTCDE=11\n         B     GETPRINT            LOOP BACK FOR ANOTHER LINE\n         SPACE 3\nGP_MOVE  MVC   VERIFY+18(0),21(R1) MOVE OVER DATA SET NAME\n         SPACE 3\nEOF      CLOSE (SYSIN,,SYSPRINT)   END OF PRINT FILE\n         LA    R15,8               INDICATE NO CLUSTERS FOUND !!!\nBYPASS2  B     RETURN              BYPASS IDCAMS IF NO ENTRIES\n         WTO   'LVSAMVFY - VERIFYING VSAM CLUSTERS',ROUTCDE=11\n         LINK  EP=IDCAMS,PARAM=(H0),VL=1\n         LA    R15,0               INDICATE VSAM DATA SETS FOUND\n         SPACE 3\nRETURN   L     R13,4(R13)          PICK UP PREVIOUS SAVE AREA\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         EJECT\nCARDOUT  DS    0CL80\n         DC    CL62'  LISTCAT ENTRIES('\n         DC    CL18') ALL'\nVERIFY   DS    0CL80\n         DC    CL62'  VERIFY  DATASET('\n         DC    CL18')'\n         SPACE 1\nSVC99RBP DC    A(SVC99RB+X'80000000') REQUEST BLOCK POINTER\nSVC99RB  DS    0F                  REQUEST BLOCK\n         DC    AL1(S99RBEND-S99RB) LENGTH OF REQUEST BLOCK\n         DC    AL1(S99VRBIN)       VERB - INFORMATION RETRIEVAL\n         DC    AL2(0)              FLAGS1\n         DC    AL2(0)              ERROR CODE\n         DC    AL2(0)              INFO CODE\n         DC    A(SVC99TXP)         TEXT POINTERS ADDRESS\n         DC    A(0)                RESERVED\n         DC    A(0)                FLAGS2\nSVC99TXP DC    A(SVC99REL)         TEXT UNIT FOR RELATIVE REQUEST\n         DC    A(SVC99RTD)         TEXT UNIT TO RETURN DDNAME\n         DC    A(SVC99LST+X'80000000') TEXT UNIT FOR LAST ENTRY IND.\nSVC99REL DC    AL2(DINRELNO)       RELATIVE REQUEST NUMBER\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(2)              LENGTH OF PARAMETER\nDDNUMBER DC    H'0'                RELATIVE DDNAME NUMBER\nSVC99RTD DC    AL2(DINRTDDN)       RETURN DDNAME\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(8)              LENGTH OF DDNAME\nDDNAME   DC    CL8' '              RETURNED DDNAME\nSVC99LST DC    AL2(DINRTLST)       CHECK FOR LAST ENTRY\n         DC    AL2(1)              # OF PARAMETERS\n         DC    AL2(1)              LENGTH OF PARAMETER\nLASTDDN  DC    X'00'               LAST DDNAME INDICATOR\n         SPACE 2\nVTOCWORK DC    CL140' '            WORK AREA FOR DSCB'S\n         SPACE 1\nVTOC     DCB   DSORG=PS,RECFM=U,BLKSIZE=96,DDNAME=DISKXXXX,KEYLEN=44,  *\n               MACRF=R,EODAD=EOV,EXLST=VTOCEXIT\n         SPACE 1\nVTOCEXIT DS    0F                  VTOC DCB EXIT LIST\n         DC    X'87'               JFCB EXIT\n         DC    AL3(VTOCJFCB)       ADDRESS OF JFCB\nVTOCJFCB DC    XL176'00'           JFCB\n         SPACE 1\nSYSIN    DCB   DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=3120,DDNAME=SYSIN,   *\n               MACRF=PM\n         SPACE 1\nSYSPRINT DCB   DSORG=PS,RECFM=VBA,DDNAME=VTOCWORK,MACRF=GL,EODAD=EOF\n         SPACE 1\nH0       DC    H'0'                PARAMETER LIST FOR IDCAMS\nDDNAMES  DC    H'48'               LENGTH OF LIST\n         DC    XL8'00'\n         DC    XL8'00'\n         DC    XL8'00'\n         DC    XL8'00'\n         DC    CL8'SYSIN'          INPUT DDNAME\n         DC    CL8'VTOCWORK'       OUTPUT DDNAME\nFLAGS    DC    B'00000000'         A BYTE OF FLAGS\nDEBUG    EQU   B'10000000'         DEBUG ACTIVE\n         LTORG\n         YREGS\n         SPACE 1\n         DSECT\n         IECSDSL1 (1)              MAP FORMAT 1 DSCB\n         DSECT\n         IEFJFCBN ,                MAP JFCB\n         IEFZB4D0 ,                MAP SVC 99 CONTROL BLOCKS\n         IEFZB4D2 ,                COPY SVC 99 TEXT UNIT MNEMONICS\n         IHADCB DSORG=PS,DEVD=DA   MAP DCB\n         END   LVSAMVFY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A01WAIT": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x010\\x010\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 304, "newlines": 304, "modlines": 0, "user": "UKGUIDE"}, "text": "WAIT     TITLE 'WAIT TSO COMMAND PROCESSOR'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   WAIT  --  MVS/SP3 VERSION                                         *\n*                                                                     *\n*   DESCRIPTION :-  THE WAIT COMMAND PROCESSOR IS USED TO WAIT IN TSO *\n*   REGISTER USAGE                                                    *\n*   ==============                                                    *\n*                                                                     *\n*      R0   -  WORK                                                   *\n*      R1   -  WORK                                                   *\n*      R2   -  WORK                                                   *\n*      R3   -  POINTER TO PARAMETER DESCRIPTOR LIST (PDL)             *\n*      R4   -  POINTER TO THE I/O PARAMETER LIST (IOPL)               *\n*      R5   -  POINTER TO PARSE PARAMETER LIST (PPL)                  *\n*      R8   -  BASE REGISTER WHILST PROCESSING ATTN INTERRUPTS        *\n*      R10  -  RETURN ADDRESS USED BY BAL                             *\n*      R11  -  SECOND BASE REGISTER IF NECESSARY                      *\n*      R12  -  BASE REGISTER                                          *\n*      R13  -  POINTER TO SAVE AREA                                   *\n*      R14  -  WORK                                                   *\n*      R15  -  WORK                                                   *\n*                                                                     *\n*   PARAMETERS                                                        *\n*   ==========                                                        *\n*                                                                     *\n*      ADDRESS OF THE CPPL HELD IN REGISTER 1.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER SAVE AND EQUATES ETC.....\n*                                                                     *\n***********************************************************************\n         SPACE 2\nWAIT     CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         SAVE  (14,12),,WAIT.CTD.&SYSTIME..&SYSDATE\n         BALR  R12,0                   * ESTABLISH BASE\n         USING *,R12,R11               * TELL ASSEMBLER\n         LA    R11,*+4095              * ESTABLISH SECOND BASE\n         LA    R11,1(R11)              * ONE MORE COS INST RESTRICTION\n         LR    R2,R1                   * SAVE POINTER TO CPPL\n         L     R0,=A(WORKLEN)          * SAY HOW MUCH STORAGE WE WANT\n         GETMAIN R,LV=(0)              * GET THE STORAGE\n         ST    R1,8(R13)               * CHAIN BACK\n         ST    R13,4(R1)               * CHAIN FORWARD\n         LR    R13,R1                  * ESTABLISH SAVE AREA\n         USING WORKAREA,R13            * TELL ASSEMBLER\n         ST    R13,SAVER13             * SAVE REG 13 FOR ATTN EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MAKE SURE THAT WE HAVE GOT ALL OF THE PARAMETERS CORRECTLY   *\n*        AND SET UP AN IOPL FOR USE BY PUTLINE                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING CPPL,R2                 * MAKE FIELDS IN CPPL ADDR'ABLE\n         LA    R4,ZIOPL                * )SET UP AN I/O\n         USING IOPL,R4                 * ) PARAMETER LIST (IOPL)\n         MVC   IOPLUPT,CPPLUPT         * MOVE IN PTR TO UPT\n         MVC   IOPLECT,CPPLECT         * MOVE IN PTR TO ECT\n         LA    R1,ZECB                 * )SET UP A PTR TO\n         ST    R1,IOPLECB              * ) THE USER'S ECB\n         LA    R5,ZPPL                 * )SET UP A PARSE\n         USING PPL,R5                  * ) PARAMETER LIST (PPL)\n         MVC   PPLUPT,CPPLUPT          * MOVE IN PTR TO UPT\n         MVC   PPLECT,CPPLECT          * MOVE IN PTR TO ECT\n         ST    R1,PPLECB               * PTR TO USER'S ECB\n         L     R1,=A(ZPCL)             * )SET UP A PTR TO THE\n         ST    R1,PPLPCL               * ) PARAMETER CONTROL LIST (PCL)\n         LA    R3,ANS                  * )PTR TO THE PARM DESCRIPTOR\n         ST    R3,PPLANS               * ) LIST (PDL) VIA THE PPL\n         MVC   PPLCBUF,CPPLCBUF        * MOVE IN PTR OF COMMAND BUFFER\n         XC    PPLUWA,PPLUWA           * ZEROEYES USER'S WORK AREA\n         XC    ZECB,ZECB               * )ZEROEYES ZECB FIELD AND SET\n         LR    R1,R5                   * ADDRESS OF PPL IN REG 1\n         CALLTSSR EP=IKJPARS,MF=(E,(1)) * CALL IKJPARS\n         LTR   R15,R15                 * DID IT WORK ???????\n         DROP  R2                      * NO LONGER NEED\n         BNZ   PERR                    * NO - ERROR; OTHERWISE CONT..\n         L     R3,0(R3)                * )MAKE FIELDS IN THE PCL\n         USING IKJPARMD,R3             * ) AND THE PDL ADDR'ABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,TIMERS               * R1-> IKJIDENT PDE FOR JOBS\n         LH    R2,4(R1)                * R2=LENGTH OF POSITIONAL PARM\n         LTR   R2,R2                   * HAS A TIME PARM BEEN ENTERED?\n         BZ    MINSX                   * NO - ERROR\n         L     R1,0(R1)                * POINT TO KEYWORD\n         CH    R2,=H'1'                * IS TIME BETWEEN 1 AND 9\n         BNE   MOVESECS                * NO, SO MOVE 2 CHARACTERS\n         MVI   SECONDS,X'F0'           * MAKE IT 01 RATHER THAN 1\n         MVC   SECONDS+1(1),0(R1)      * MOVE FULLWORD\n         MVI   PARM,C'Y'               * SET FLAG TO SAY SECS FOUND\n         B     MINSX                   * CHECK FOR MINUTES\n*\nMOVESECS MVC   SECONDS(2),0(R1)        * MOVE IN SECONDS\n         MVI   PARM,C'Y'               * SET FLAG TO SAY SECONDS FOUND\n*\nMINSX    DS    0H\n         LA    R1,MINS                 * POINT TO MINUTES PCL\n         LH    R2,4(R1)                * GET LENGTH\n         LTR   R2,R2                   * HAS LENGTH CHANGED\n         BZ    PERR                    * YES, SO REPORT ERROR\n         L     R1,0(R1)                * NO, SO POINT TO OPERAND\n         CH    R2,=H'1'                * MINUTES BETWEEN 1 AND 9\n         BNE   MOVEMINS                * NO, SO MOVE TWO CHARS\n         MVI   MINUTES,X'F0'           * YEP, SO INSERT 0 TO MAKE\n         MVC   MINUTES+1(1),0(R1)      * 01\n         B     CHECKTME                *\n*\nMOVEMINS MVC   MINUTES(2),0(R1)        * MOVE OPERAND TO MINUTES\n*\n*\n*\nCHECKTME CLC   SECONDS,=C'59'          * IS SECONDS GREATER THAN 1 MIN\n         BH    WAITER1                 * YEP, - THATS NOT ALLOWED\n         CLC   MINUTES,=C'59'          * IS SECONDS GREATER THAN 1 MIN\n         BH    WAITER1                 * YEP, NOT ALLOWED AGAIN\n*\n*\n*\nSTIMER   DS    0H\n         STIMER WAIT,DINTVL=STSECS     * WAIT FOR A LONG TIME\n         B     FINISH\n***********************************************************************\n*                                                                     *\n*        PUT OUT AN ERROR MESSAGE IF THE PARAMETER CONTROL            *\n*        LIST (PCL) IS IN ERROR                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPERR     EQU   *\n         CLI   PARM,C'Y'               * ARE THERE ANY SECONDS\n         BE    CHECKTME                * YES, SO CHECK FOR VALID SECS\n**  YOU SHOULD HAVE ENTERED SOME PARAMETERS\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(PCLERR1,SINGLE,DATA),                           C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         SPACE 2\n**  THERE ARE ONLY 59 SECONDS AND 59 MINUTES ALLOWED, PLONKER\nWAITER1  EQU   *\n         PUTLINE PARM=PUTBLOK,                                         C\n               OUTPUT=(WAITERR1,SINGLE,DATA),                          C\n               MF=(E,ZIOPL)\n         B     FINISH                  * RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIDY UP AND RETURN                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFINISH   EQU   *\n         BALR  R8,0                    * SET UP A GOOD BASE REG\n         USING *,R8                    * TELL ASSEMBLER\n         L     R2,4(R13)               * CHAIN BACK TO FIND SAVE AREA\n         LR    R1,R13                  * OUR SAVE AREA ADDR IN REG 1\n         L     R0,=A(WORKLEN)          * LENGTH OF OUR SAVE AREA, REG 0\n         FREEMAIN R,LV=(0),A=(1)       * FREE UP OUR SAVE AREA\n         LR    R13,R2                  * REG 13-> TO PREVIOUS SAVE AREA\n         RETURN (14,12),RC=0           * RESTORE REGISTERS AND RETURN\n         DROP  R8                      * DONT NEED EXTRA BASE NOW\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR MESSAGES PUT TO THE SCREEN                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\nPCLERR1  DC    H'49'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL45'ERROR IN PARAMETER CONTROL LIST: MODULE WAIT '\n*\nWAITERR1 DC    H'49'                   * LENGTH OF MESSAGE+4\n         DC    H'0'                    * RESERVED\n         DC    CL45'WAIT TIME BETWEEN 1 AND 60 SECONDS ONLY      '\n*\n         EJECT\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETER CONTROL LIST                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\n*\n         ORG   ,\n*\n*\nZPCL     IKJPARM\n*\nTIMER    IKJKEYWD\n*\n         IKJNAME 'S',SUBFLD=TIMERKS\n*\n         IKJNAME 'SEC',SUBFLD=TIMERKS\n*\n         IKJNAME 'SECS',SUBFLD=TIMERKS\n*\n         IKJNAME 'SECONDS',SUBFLD=TIMERKS\n*\n***********************************************************************\n*\nMINSKS   IKJKEYWD\n*\n         IKJNAME 'M',SUBFLD=MINSRKS\n*\n         IKJNAME 'MIN',SUBFLD=MINSRKS\n*\n         IKJNAME 'MINS',SUBFLD=MINSRKS\n*\n         IKJNAME 'MINUTES',SUBFLD=MINSRKS\n*\n***********************************************************************\n*\nTIMERKS  IKJSUBF\n*\nTIMERS   IKJIDENT 'DATA IN PARAMETER TIME()',LIST,                     -\n               PROMPT='WAIT TIME         ',                            -\n               HELP=('WAIT TIME IN MINS(XX) AND SECS(XX)        '),    -\n               MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC\n*\n*\nMINSRKS  IKJSUBF\n*\nMINS     IKJIDENT 'DATA IN PARAMETER TIME()',LIST,                     -\n               PROMPT='WAIT TIME         ',                            -\n               HELP=('WAIT TIME IN MINS(XX) AND SECS(XX)        '),    -\n               MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC\n*\n         IKJENDP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DSECTS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*\n         IKJCPPL                       * DSECT USED TO MAP CPPL\n*\n         IKJIOPL                       * DSECT USED TO MAP IOPL\n*\n         IKJPPL                        * DSECT USED TO MAP PPL\n*\n*\n         CVT   DSECT=YES\n*\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GETMAINED AREA                                               *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT                         * DSECT USED TO MAP WORK AREA\n         DS    18F                     * SAVE AREA OF CALLED MODULE\nZIOPL    DS    4F                      * I/O PARAMETER LIST (IOPL)\nZPPL     DS    7F                      * PARSE PARAMETER LIST (PPL)\nZECB     DS    F                       * USER'S ECB ADDRESS\nANS      DS    F                       * ANSWER FIELD ADDR IN PPL\n         SPACE 2\nPUTBLOK  PUTLINE MF=L                  * EXPANDS INTO PUTLINE PARM BLOK\n         SPACE 2\nSTSECS   DS    0D\nHOURS    DS    CL2'00'\nMINUTES  DS    CL2'00'\nSECONDS  DS    CL2'00'                 * PARAMETER SECONDS\nTH       DS    CL2'00'\nPARM     DC    C'N'                    * SAVE REG FOR USE ATTN EXIT\nSAVER13  DS    F'0'                    * SAVE REG FOR USE ATTN EXIT\nWORKLEN  EQU   *-WORKAREA              * CALCULATE WORK-AREA LENGTH\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01Z": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00 \\x00 \\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "UKGUIDE"}, "text": "Z        CSECT\n         SAVE  (14,12),,*          SAVE REGISTERS\n         LR    12,15               ESTABLISH -\n         USING Z,12                BASE REGISTER\n         LR    10,1                SAVE PARAMETER LIST\n         GETMAIN R,LV=WORKLEN      GET SAVE/WORK AREA\n         ST    1,8(13)             CHAIN SAVE AREAS FORWARD\n         ST    13,4(1)             CHAIN SAVE AREAS BACKWARD\n         LR    13,1                ADDRESS -\n         USING WORKAREA,13         SAVE AREA\n         LR    1,10                RESTORE PARAMETER LIST\n*\n         LM    7,10,0(1)           PICK UP PARAMETERS\n         LA    7,COMMAND           POINT TO NEW COMMAND LINE\n         LINK  EP=LOGOFF,PARAM=((7),(8),(9),(10)),MF=(E,LINKLIST)\n*\nRETURN   LR    10,15               SAVE RETURN CODE\n         LR    1,13                POINT TO GETMAINED AREA\n         L     13,4(13)            RESTORE HIGHER SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1) FREE GETMAINED AREA\n         LR    15,10               RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n*\n         DS    0D\nCOMMAND  DC    H'10,6',CL6'LOGOFF' TSO COMMAND LINE\n         LTORG\n*\nWORKAREA DSECT\n         DS    18F                 REGISTER SAVE AREA\nLINKLIST CALL  ,(,,,),MF=L         LIST FORM OF LINK MACRO ?\nWORKLEN  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         END   Z\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A01ZDOW": {"ttr": 4364, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\t\\x00\\t\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "UKGUIDE"}, "text": "ISPEXEC VGET (ZDOW ZDOWDATE ZJDATE) ASIS\nIF &LASTCC \u00ac= 0 THEN SET ZDOWDATE=\nIF &ZDOWDATE=&ZJDATE THEN EXIT\nSET ZDOW=(&EVAL(&SUBSTR(1:2,&ZJDATE))*5-1)/4+&EVAL(&SUBSTR(4:6,&ZJDATE)\nSET ZDOW=(&ZDOW-&ZDOW/7*7)*8+1\nSET ZDOW=&SUBSTR(&ZDOW:&ZDOW+7,+\n    &STR(SUNDAY  MONDAY  TUESDAY WEDNSDAYTHURSDAYFRIDAY  SATURDAY)\nSET ZDOWDATE=&ZJDATE\nISPEXEC VPUT (ZDOW ZDOWDATE) PROFILE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A02#INDX": {"ttr": 4366, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x01\\x00\\x90\\x03\\x0f\\x00\\x93&\\x9f\"\\x11\\x004\\x00\\x12\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1990-01-30T00:00:00", "modifydate": "1993-09-26T22:11:01", "lines": 52, "newlines": 18, "modlines": 0, "user": "DPSPPP"}, "text": "  A02XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    --\n                          Mike Teale\n                          L.O.L.A.\n                          081-366 6611 x285\n ____________________________________________________________________\n\n\n  This library contains the following goodies:-\n\n   1. An edit macro called ZOOM which will display a JCL procedure\n      while editing JCL. The cursor is placed on an EXEC statement\n      in your job and the ZOOM command entered. The JCL proc will\n      be displayed via a browse panel.\n\n      Member Names:   A02ZOOM\n\n\n\n   2. An edit macro called JOBC which will generate a job card.\n      This macro displays an entry panel and is documented via\n      tutorial panels. The job standard is for L.O.L.A.'s  set\n      up but can be changed.\n\n      Member Names:   JOBC,A02N021,A02N0211    -  edit macros\n                      A02N021                  -  entry panel\n                      A02MGN02                 -  messages\n                      A02N....                 -  Help panels\n\n\n   3. A program called Z7504 that will convert awkward characters\n      such as ampersands and brackets in CLIST variables to other\n      characters so that the CLIST can complete normally. This was\n      written to cater for the situation where someone enters an\n      ampersand in an ISPF panel variable and when the CLIST tries\n      to do anything with the variable it blows up.\n\n      Member Names:   A02Z7504             -  program\n                      A02SETUP,A02CLEAR    -  macros\n                      A0JVARS              -  JCL to assemble/link\n\n\n   4. A program called Z3426 - a CPU soak program to manage CPU\n      resource. This program as it stands requires ACF2 but could be\n      changed if ACF2 is not your security product.\n\n      Member Names:   A02Z3426                 -  program\n                      A02SETUP,A02CLEAR        -  macros\n                                     Also uses ACF2 macros\n                      A02SOAK                  -  JCL to assemble/link\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A02CLEAR": {"ttr": 4368, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x90\\x01_\\x00\\x90\\x01_\\x18\\x00\\x00)\\x00)\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-15T00:00:00", "modifydate": "1990-01-15T18:00:01", "lines": 41, "newlines": 41, "modlines": 0, "user": "UOTXMJT"}, "text": "         MACRO\n&NAME    CLEAR &RC=0,&RE=NO,&PRINT=NOGEN,&LDSA=YES\n         AIF   ('&PRINT' EQ 'GEN').TESTRE\n         PUSH  PRINT\n         PRINT NOGEN\n.TESTRE  AIF   ('&RE' EQ 'NO').LOAD13\n         AIF   ('&RE' EQ 'YES').RESET13\n         MNOTE 4,'INVALID SPECIFICATION FOR ''RE'' ''NO'' ASSUMED'\n         AGO   .LOAD13\n.RESET13 ANOP\n&NAME    LA    1,8\n         LA    13,0(13)\n         SR    13,1\n         L     0,0(13)\n         L     1,4(13)\n         LA    1,0(1)\n         L     13,12(13)\n         AGO   .TESTRC\n.LOAD13  AIF   ('&LDSA' EQ 'YES').SET13\n         AIF   ('&LDSA' EQ 'NO').NOLDSA\n         MNOTE 4,'INVALID LDSA SPECIFIED ''NO'' ASSUMED'\n.NOLDSA  ANOP\n&NAME    LA    13,0(13)\n         AGO   .TESTRC\n.SET13   ANOP\n&NAME    L     13,4(13)\n.TESTRC  AIF   ('&RC' EQ '(15)').STR15\n         AIF   (T'&RC NE 'N').INVLCD\n         AIF   (&RC GE 0 AND &RC LE 4095).SETRC\n.INVLCD  ANOP\n         MNOTE 8,'RETURN CODE SPECIFICATION INVALID - IGNORED'\n         AGO   .FREE\n.SETRC   LA    15,&RC\n.STR15   ST    15,16(13)\n.FREE    AIF   ('&RE' EQ 'NO').RELOAD\n         FREEMAIN R,LV=(0),A=(1)\n.RELOAD  LM    14,12,12(13)\n         BR    14\n         AIF   ('&PRINT' EQ 'GEN').MACEND\n         POP   PRINT\n.MACEND  MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A02HN021": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x19\\x01\\x00m\\x00m\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T19:01:01", "lines": 109, "newlines": 109, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021 - LPF Generate: Job Card Help Menu\n/* ------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid processing\n/* Created by NJS on 26.11.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  Used for Body expansion\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n\\                       ---------------------------------\n\\                      |%Create a LOLA-Standard JOB Card\\|\n\\                       ---------------------------------\n}\n%The following topics will be covered in sequence or may be selected:\n%    1. +General Information about LPF JOB Card Generation.\n}\n%    2. +Explanation of Fields in the JOB Card Panel\n}\n%\n}\n%The following topics will only be covered if selected explicitly:\n%    A. +Application codes at LOLA\n%    J. +Job Classes at LOLA\n%    M. +SYSOUT Classes at LOLA (for Message Class field)\n%    N. +Jobname Standards\n}\n}\n}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/*---------------------------------------------------------------------\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021    /* ???        /* Parent HELP Panel\n/*  &ZHINDEX = ???                      /* Name of first index panel\n/*  &ZCONT   = ???                      /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the first and second time indicators.\n/*---------------------------------------------------------------------\n    IF (&JOBCH2ND = YES)\n      &JOBCH1ST = NO\n      &JOBCH2ND  = NO\n    IF (&JOBCH1ST = YES)\n      &JOBCH1ST = NO\n      &JOBCH2ND  = YES\n    IF (&JOBCH1ST = &Z)\n      &JOBCH1ST = YES\n      &JOBCH2ND  = NO\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n    IF (&JOBCH1ST = YES)\n      &LINE03  = 'You may invoke this panel directly with the command'\n      &CMD     = 'JOBC ?'\n\n)PROC\n\n/*=====================================================================\n/* PROC section continued.\n/* Set ZSEL to invoke the next HELP panel.\n/*=====================================================================\n    &ZSEL = TRANS(&ZCMD\n                  1,LHGN021A            /* JOB Card Gen Info\n                  2,LHGN0211            /* JOB Card Panel\n                  A,*LHGN021Z           /* Application Codes\n                  J,*LHGN021Y           /* Job Classes\n                  M,*LHGN021X           /* Messsage Classes\n                  N,*LHGN021W           /* New Jobname Standards\n                  ' ',' '\n                  *,'?'\n                  )\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02HN211": {"ttr": 4612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)_\\x00\\x88)_\\x11F\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-21T00:00:00", "modifydate": "1988-10-21T11:46:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN0211 - LPF Generate: JOB Card Panel Fields (1)\n/* --------------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 21.10.88 to remove old/new logonid references\n/* Created by NJS on 04.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                        JOB Card Panel Fields (1)                     @DATE2\n}\n+ Last Five Letters of Job Name\n} These are optional (but recommended).  They will make this job unique for\n} the system.\n}\n+ Account Code\n} The first sub-field should be your logonid, unless your are running a job for\n} someone else, when it should be theirs.  The 1st, 3rd and 4th characters\n} create a distribution code, which is printed in block letters on the job's\n} output separator, unless a /*JOBPARM R=room card is used, when this is\n} printed.  This field is required.  If it is not on your JOB card, a JES2 exit\n} will place the submitter's logonid there.\n}\n} The second subfield is the application code.  It is only (currently)\n} required if you are running borough ad hoc work.  However, your group may\n} use this field for its own work, to create reports on machine usage.\n} A list of Application codes at LOLA is available in this tutorial (press\n} %\"UP\"}for the menu), but the LOLA Standards Manual should be consulted.\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN0212                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02JOBC": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x90\\x01_\\x00\\x90\\x01_\\x164\\x00B\\x00B\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-15T00:00:00", "modifydate": "1990-01-15T16:34:01", "lines": 66, "newlines": 66, "modlines": 0, "user": "UOTXMJT"}, "text": "/**********************************************************************\n/* EDIT MACRO JOBC\n/* WILL GENERATE A JOB CARD VIA LDGN021.\n/*\n/*---------------------------------------------------------------------\n/* AMENDED BY\n/* AMENDED BY NS ON 20.10.88 TO MAKE NOKEEP THE DEFAULT OPTION\n/*                              ALSO, IF OPTION IS ?, GO TO HELP MENU\n/* CREATED BY NS ON 25.11.87\n/*\n/*---------------------------------------------------------------------\n/* FOR LIST OF EDIT MACRO, PANEL AND MESSAGE MEMBERS, SEE LDGN021.\n/*\n/**********************************************************************\n    ISREDIT MACRO (OPT TEST DEBUG)\n    IF &TEST = TEST THEN +\n      CONTROL LIST\n    IF &DEBUG = DEBUG THEN +\n      CONTROL LIST CONLIST SYMLIST\n    SET &NULL =\n    SET &RC   = 0\n\n                                        /*----------------------------*/\n                                        /* \"OPT = ?\" MEANS GO TO      */\n                                        /* TUTORIAL                   */\n                                        /*----------------------------*/\n    IF &OPT = ? THEN +\n      ISPEXEC SELECT PGM(ISPTUTOR) PARM(LHGN021)\n    ELSE +\n      DO\n\n                                        /*----------------------------*/\n                                        /* CALL JOB CARD MACRO.       */\n                                        /* \"OPT = KEEP\" MEANS TRY AND */\n                                        /* RETRIEVE INFO FROM EXISTING*/\n                                        /* JOB CARD, IF FOUND.  THIS  */\n                                        /* IS ONLY AVAILABLE WHEN     */\n                                        /* ENTERING VIA THIS MACRO.   */\n                                        /* IF ENTERING VIA \"GEN\", ETC.*/\n                                        /* THE OPTION MUST BE SET VIA */\n                                        /* THE \"GPARMS\" MACRO.        */\n                                        /*----------------------------*/\n      IF &OPT = &NULL THEN +\n        SET &OPT = NOKEEP\n                                                    /* DEFAULT JOBOPT */\n      ELSE +\n        IF &OPT = N     THEN +\n          SET &OPT = NOKEEP\n        ELSE +\n          IF &OPT = K     THEN +\n            SET &OPT = KEEP\n          ELSE +\n            IF &OPT \u00ac= KEEP && +\n               &OPT \u00ac= NOKEEP THEN +\n              SET &OPT = NOKEEP\n                                                    /* DEFAULT JOBOPT */\n\n      ISPEXEC SELECT CMD(%LDGN021 JOBOPT(&OPT) &TEST &DEBUG) NEWPOOL\n      SET &RC = &LASTCC\n    END\n\n                                        /*----------------------------*/\n                                        /* BACK TO USER               */\n                                        /*----------------------------*/\n    ISPEXEC CONTROL DISPLAY REFRESH\n    EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02MGN02": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x16U\\x000\\x000\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T16:55:01", "lines": 48, "newlines": 48, "modlines": 0, "user": "UOTXNJS"}, "text": "LMGN021   'Processed successfully'                         .ALARM = NO\n'Job card has been successfully created'\n\nLMGN021A  'Enter application code'       .HELP = LHGN021Z  .ALARM = YES\n'This is a required field - press HELP for a list of application codes'\n\nLMGN021B  'Invalid account code'         .HELP = LHGN0211  .ALARM = YES\n'Account code format is normally bOdgiii, i.e. your Logonid format'\n\nLMGN021C  'Enter Job class'              .HELP = LHGN021   .ALARM = YES\n'This is a required field'\n\nLMGN021D  'Invalid Job class'            .HELP = LHGN021Y  .ALARM = YES\n'Press HELP for list of Job classes at LOLA'\n\nLMGN021E  'Invalid Message class'        .HELP = LHGN021X  .ALARM = YES\n'Press HELP for list of Message classes at LOLA'\n\nLMGN021F  'Invalid Region parameter'     .HELP = LHGN021   .ALARM = YES\n'Region must be one to seven numerics, followed by \"K\" or \"M\"'\n\nLMGN021G  'Invalid line number'          .HELP = LHGN021D  .ALARM = YES\n'Line number must be one to six numerics'\n\nLMGN021H  'Spare                   '     .HELP = LHGN021   .ALARM = YES\n'.............                                                         '\n\nLMGN021I  'Invalid Job name created'     .HELP = LHGN021W  .ALARM = YES\n'Logonid and/or final letter(s) have created invalid Job name \"&JOBCJN\"'\n\nLMGN021J  'Cursor not at data top'       .HELP = LHGN021D  .ALARM = YES\n'JOB Cards will be inserted after line &JOBCL2..  Change if required.'\n\nLMGN021K  'Severe error in LDGN0211'                       .ALARM = YES\n'A retun code of &LG0211CC was encountered in LDGN0211.  Inform TSG.'\n\nLMGN021L  'JOB Card gen is confused'     .HELP = LHGN021F  .ALARM = YES\n'Trying to retrieve JOB Card info: a/c field not enclosed in parentheses'\n\nLMGN021M  'JOB Card gen is confused'     .HELP = LHGN021F  .ALARM = YES\n'Trying to retrieve JOB Card info: cannot match quotes in Programmer Name field'\n\nLMGN021N  'JOB Card gen is confused'     .HELP = LHGN021F  .ALARM = YES\n'Trying to retrieve JOB Card info: unidentified positional operand found'\n\nLMGNffn   '....5....0....5....0....'     .HELP = *|name  .ALARM = YES|NO\n'Long message is 78 chars long after substitution'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x88)O\\x00\\x88)\\x8f\\x15(\\x01.\\x01.\\x00\\x02\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-24T15:28:01", "lines": 302, "newlines": 302, "modlines": 2, "user": "UOTXMJT"}, "text": "    PROC 0 JOBOPT() TEST DEBUG\n/**********************************************************************\n/* EDIT MACRO LDGN021\n/* Will generate a Job card\n/*\n/*--------------------------------------------------------------------*/\n/* Amended by\n/* Amended by NS on 20.10.88 to remove old-style logonid processing.\n/*                              Also improve documentation.\n/* Completed by NS in Dec. 87\n/*\n/*--------------------------------------------------------------------*/\n/* Members used:-                Purpose:-\n/*   Macros:-\n/*     SG1.LPF.CLIST(JOBC)         Validates/defaults KEEP option,\n/*                                   calls LDGN021\n/*\n/*     SG1.LPF.CLIST(LDGN021)      Calls LDGN0211 if KEEP option on\n/*              (this member)        and the cursor is at start of\n/*                                   member, then creates JOB card.\n/*\n/*     SG1.LPF.CLIST(LDGN0211)     Looks for existing JOB card and\n/*                                   extracts values for new card.\n/*\n/*   Data panels:-\n/*     SG1.LPF.PANELS(LPGN021)     Data entry\n/*\n/*   Help Panels:-\n/*     SG1.LPF.PANELS(LHGN021)     Tutorial menu\n/*     SG1.LPF.PANELS(LHGN0211-4)  Explain fields in panel\n/*     SG1.LPF.PANELS(LHGN021A-H)  General info\n/*\n/*     SG1.LPF.PANELS(LHGN021Z)    Application codes\n/*     SG1.LPF.PANELS(LHGN021Y)    Job classes\n/*     SG1.LPF.PANELS(LHGN021X)    Message classes\n/*     SG1.LPF.PANELS(LHGN021W)    New Jobname standards\n/*\n/*   Messages:-\n/*     SG1.LPF.MSGS(LMGN02)        All messages\n/*\n/**********************************************************************\n    CONTROL         END(ENDO)          /*   DEFAULTS ARE:  MSG NOLIST*/+\n            PROMPT  MSG\n    IF &TEST = TEST THEN +\n      CONTROL LIST\n    IF &DEBUG = DEBUG THEN +\n      CONTROL LIST CONLIST SYMLIST\n    ISPEXEC CONTROL ERRORS RETURN\n\n/*--------------------------------------------------------------------*/\n/* Set some function variables.\n/*--------------------------------------------------------------------*/\n    SET &TIME     = &SUBSTR(1:5,&SYSTIME)\n    SET &INDATE   = &SUBSTR(4:6,&SYSDATE)+\n                    &SUBSTR(1:3,&SYSDATE)+\n                    &SUBSTR(7:8,&SYSDATE)\n\n    SET &DASH20 = &STR(--------------------)\n    SET &DASH60 = &STR(&DASH20&DASH20&DASH20)\n    SET &BLANKS = &STR(                                               -\n                        .)\n    SET &NULL   =\n    SET &KEEPCC = 0\n\n/*--------------------------------------------------------------------*/\n/* Obtain DSN & Member names and CURSOR position\n/*--------------------------------------------------------------------*/\n    ISREDIT (DSN) = DATASET\n    ISREDIT (MEM) = MEMBER\n    IF &MEM  =      THEN +\n      SET &DATASET = &DSN\n    ELSE +\n      SET &DATASET = &DSN(&MEM)\n\n    ISREDIT (LINE COL) = CURSOR\n    ISREDIT (SAVELINE SAVECOL) = CURSOR\n\n/*--------------------------------------------------------------------*/\n/* Obtain user's group                                                */\n/*--------------------------------------------------------------------*/\n    SET &GROUP = &SUBSTR(1,&SYSUID)&SUBSTR(3:4,&SYSUID)\n\n/*--------------------------------------------------------------------*/\n/* Try and retrieve info from old JOB Card                            */\n/*--------------------------------------------------------------------*/\n\n                                        /*----------------------------*/\n                                        /* If cursor is at line 1 or  */\n                                        /* less, and if JOBOPT =      */\n                                        /* KEEP, call LDGN011 to try  */\n                                        /* and retrieve info from     */\n                                        /* current job card, if any.  */\n                                        /*                            */\n                                        /* Otherwise, set &JOBCLX     */\n                                        /* which will get a blinking  */\n                                        /* panel msg to warn user that*/\n                                        /* the job card will not be   */\n                                        /* inserted at the start of   */\n                                        /* the member.                */\n                                        /*----------------------------*/\n    IF &LINE = 1      THEN +\n      SET &LINE = 0\n    SET &JOBCL2 = &LINE\n    IF &LINE = 0      THEN +\n      DO\n      SET &JOBCLX = NO\n      IF &JOBOPT = KEEP THEN +\n        DO\n        ISREDIT LABEL 1 = .L\n        ISREDIT SEEK ' JOB '  .L .L FIRST 1 71\n        IF &LASTCC = 0 THEN +\n          DO\n          %LDGN0211 &TEST &DEBUG\n          SET &KEEPCC = &LASTCC\n          ENDO\n        ENDO\n\n                                        /*----------------------------*/\n                                        /* Clist LDGN0211 tries to    */\n                                        /* retrieve into variables:   */\n                                        /* JOBCJ1 - last 4/5 of jobn  */\n                                        /* JOBCA1 - account code      */\n                                        /* JOBCA2 - application code  */\n                                        /* JOBCP1 - pgmr name field   */\n                                        /* JOBCC1 - job class         */\n                                        /* JOBCM1 - message class     */\n                                        /* JOBCR1 - region size       */\n                                        /*----------------------------*/\n      ENDO\n    ELSE +\n      DO\n      SET &JOBCLX = YES\n      ISPEXEC SETMSG MSG(LMGN021J)\n      ENDO\n\n/*--------------------------------------------------------------------*/\n/* For SPG only: if REGION parm not already found, see if SMP/E is    */\n/* involved.                                                          */\n/*--------------------------------------------------------------------*/\n    ISPEXEC VGET (JOBCR1)\n    IF &GROUP = UTW +\n     | &GROUP = UTX THEN +\n      IF &JOBCR1 = &NULL THEN +\n        DO\n        ISREDIT SEEK GIMSMP WORD FIRST\n        IF &LASTCC = 0 THEN +\n          SET &JOBCR1 = &STR(SMP/E)\n        ENDO\n\n/*--------------------------------------------------------------------*/\n/* Display panel\n/*--------------------------------------------------------------------*/\n    ISPEXEC DISPLAY PANEL(LPGN021)\n    SET &RC = &LASTCC\n    IF &RC = 8 THEN +\n      DO\n      ISREDIT CURSOR = &SAVELINE &SAVECOL\n      EXIT CODE(0)\n      ENDO\n    IF &RC \u00ac= 0 THEN +\n      DO\n      SET &ZEDSMSG = &STR(BAD DISPLAY)\n      SET &ZEDLMSG = &STR(RETURN CODE FROM DISPLAY WAS &RC)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n      ENDO\n\n/*--------------------------------------------------------------------*/\n/* Set up Job card\n/*--------------------------------------------------------------------*/\n                                        /*----------------------------*/\n                                        /* Ensure \"JOB\" in right col. */\n                                        /* and cursor to go to job-   */\n                                        /* name if not full eight     */\n                                        /* characters.                */\n                                        /*----------------------------*/\n    SET &BLKNO = 8 - &LENGTH(&STR(&JOBCJN))\n    IF &BLKNO > 0 THEN +\n      DO\n      SET &JOBCJN = &STR(&JOBCJN.&SUBSTR(1:&BLKNO,&BLANKS))\n      SET &COLC1 = 11 - &BLKNO\n      ENDO\n    ELSE +\n      SET &COLC1 = 0\n\n                                        /*----------------------------*/\n                                        /* Ensure Pgmr Name field     */\n                                        /* 20 chars, and cursor here  */\n                                        /* if all blanks, and if not  */\n                                        /* to jobname                 */\n                                        /*----------------------------*/\n    SET &BLKNO = 20 - &LENGTH(&STR(&JOBCP1))\n    IF &BLKNO > 0 THEN +\n      SET &JOBCP1 = &STR(&JOBCP1.&SUBSTR(1:&BLKNO,&BLANKS))\n\n                                        /*----------------------------*/\n                                        /* Set line as requested or   */\n                                        /* original line (if not      */\n                                        /* nulled out in panel).  As  */\n                                        /* before, line1 -> line 0.   */\n                                        /*----------------------------*/\n    IF &JOBCL2 \u00ac= THEN +\n      SET &LINE = &JOBCL2\n    IF &LINE = 1 THEN +\n      SET &LINE = 0\n\n                                        /*----------------------------*/\n                                        /* Set up job card            */\n                                        /*----------------------------*/\n    SET &LINE1 = &STR(\"//&JOBCJN JOB (&JOBCA1,&JOBCA2),\")\n    SET &LINE2 = &STR(\"//             '&JOBCP1',\")\n    IF &JOBCR1 \u00ac= &NULL +\n      && &JOBCR1 \u00ac= &STR(Default) THEN +\n      DO\n      SET &JOBCRX = &STR(REGION=&STR(&JOBCR1),)\n      ENDO\n    ELSE +\n      SET &JOBCRX = &NULL\n\n    SET &LINE3 = &STR(\"//             CLASS=&JOBCC1,MSGCLASS=&JOBCM1,)\n    SET &LINE3 = &STR(&LINE3&STR(&JOBCRX)\")\n    SET &LINE4 = &STR(\"//***          TYPRUN=HOLD,PRTY=1,\")\n    SET &LINE5 = &STR(\"//             NOTIFY=&SYSUID\")\n    SET &LINE6 = &STR(\"//* \")\n    SET &LINE7 = &STR(\"//* REFER TO &DATASET\")\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE1\n    SET &LINE = &LINE + 1\n    SET &LINEC1 = &LINE\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE2\n    SET &LINE = &LINE + 1\n    SET &LINEC2 = &LINE\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE3\n    SET &LINE = &LINE + 1\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE4\n    SET &LINE = &LINE + 1\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE5\n    SET &LINE = &LINE + 1\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE6\n    SET &LINE = &LINE + 1\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE7\n    SET &LINE = &LINE + 1\n    ISREDIT LINE_AFTER    &LINE  = DATALINE  &LINE6\n    SET &LINE = &LINE + 1\n\n                                        /*----------------------------*/\n                                        /* For SPG/IMS add extra      */\n                                        /* comments                   */\n                                        /*----------------------------*/\n    IF &GROUP = UTW +\n                    THEN +\n      DO\n      SET &LINE8 = &STR(\"//*--------&DASH60\")\n      SET &LINE9 = &STR(//* JCL GENERATED FOR &SYSUID  AT  &TIME)\n      SET &LINE9 = &STR(\"&LINE9  ON  &INDATE (&SYSJDATE)\")\n      SET &LINE10 = &STR(//* JOB SUBMITTED BY  &SYSUID  AT  HH:MM)\n      SET &LINE10 = &STR(\"&LINE10  ON  &INDATE\")\n      ISREDIT LINE_AFTER  &LINE  = DATALINE  &LINE8\n      SET &LINE = &LINE + 1\n      ISREDIT LINE_AFTER  &LINE  = DATALINE  &LINE9\n      SET &LINE = &LINE + 1\n      ISREDIT LINE_AFTER  &LINE  = DATALINE  &LINE10\n      SET &LINE = &LINE + 1\n      ISREDIT LINE_AFTER  &LINE  = DATALINE  &LINE8\n      SET &LINE = &LINE + 1\n      ENDO\n\n                                        /*----------------------------*/\n                                        /* Locate new JOB Card.       */\n                                        /* Set cursor to blank field, */\n                                        /* if appropriate, else to    */\n                                        /* line following (inserted   */\n                                        /* if necessary).             */\n                                        /*----------------------------*/\n    IF &COLC1 >0 THEN +\n      ISREDIT CURSOR = &LINEC1 &COLC1\n    ELSE +\n      IF &STR(&JOBCP1) = THEN +\n        ISREDIT CURSOR = &LINEC2 17\n      ELSE +\n        DO\n        ISREDIT (LASTLINE) = LINENUM .ZLAST\n        IF &LINE < &LASTLINE THEN +\n          DO\n          SET &LINE = &LINE + 1\n          IF &JOBOPT = KEEP && +\n             &KEEPCC = 0 THEN +\n            DO\n            ISREDIT CURSOR = &LINE 0\n            ENDO\n          ELSE +\n          ISREDIT CURSOR = &LINE 1\n          ENDO\n        ELSE +\n          ISREDIT INSERT .ZLAST\n        ENDO\n                                        /*----------------------------*/\n                                        /* Return to caller           */\n                                        /*----------------------------*/\n\n    ISPEXEC SETMSG MSG(LMGN021)\n    EXIT CODE(0)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021A": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x172\\x00G\\x00G\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:32:01", "lines": 71, "newlines": 71, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021A - LPF Generate: Job Card General Information (1)\n/* ---------------------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Started by NJS on 26.11.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (1)\n}\n} The Local Productivity Facility (LPF) JOB Card Generation function may be\n} used to create a Standard LOLA JOB Card.\n}\n} To generate a JOB Card, enter edit for the member containing your JCL, and\n} in the command line at the top of the screen, enter the command\\JOBC.} This\n} will display a data-entry panel: other data is obtained from your logonid.\n}\n} The command\\JOBC ?}obtains the Help menu.\n}\n} The command\\JOBC K}creates a JOB card, attempting to Keep information\n} from any current JOB Card (see further panels).\n}\n}\n}                       +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021B                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021B": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x177\\x00L\\x00L\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:37:01", "lines": 76, "newlines": 76, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021B - LPF Generate: Job Card General Information (2)\n/* ---------------------------------------------------------\n/*   JOB Card Format (1)\n/*   -------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (2)\n}\n+ JOB Card Format (1)\n} The JOB Card is spread over five lines, followed by three comment\n} lines. The JOB Card lines are as follows:-\n}\n}   Line 1.  The Jobname, \"JOB\", and the account field.  The latter has two\n}   sub-fields.  The first is normally the user's logonid, but for borough\n}   ad hoc work submitted by LOLA, will be a borough code (see PCG).  The\n}   second sub-field is the application code.\n}\n}   For LOLA in-house work, these fields are not currently used for charging,\n}   but a distribution code is derived from the first, logonid, sub-field\n}   (1st, 3rd and 4th letters, = LOLA group) and will be printed on the output\n}   separator of the job's SYSOUT.\n}\n}   The Jobname is the LOLA standard for in-house work.\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021C                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021C": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x18W\\x00L\\x00L\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T18:57:01", "lines": 76, "newlines": 76, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021B - LPF Generate: Job Card General Information (3)\n/* ---------------------------------------------------------\n/*   JOB Card Format (2)\n/*   -------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (3)\n}\n+ JOB Card Format (2)\n}   Line 2.  The Programmer's Name field.  This will be printed in half-size\n}   block letters on the output separator of the job's SYSOUT.  It may be used\n}   for a description of the job, or any other purpose.  It is generated as a\n}   full twenty characters, padded out with blanks as necessary.\n}\n}   Line 3.  Job class and Message Class, followed, if requested by REGION=.\n}\n}   Line 4.  TYPRUN=HOLD and PRTY=1, but commented out.  To enable this line,\n}   delete the asterisks.\n}\n}   Line 5.  Notify for your logonid.\n}\n}   Lines 6-8.  Comment lines, including the name of the dataset being edited.\n}   This may be used by Operations if they need to re-run your job.\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021D                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021D": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x17@\\x00K\\x00K\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:40:01", "lines": 75, "newlines": 75, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021D - LPF Generate: Job Card General Information (4)\n/* ---------------------------------------------------------\n/*   JOB Card Placement\n/*   ------------------\n/* Amended by iii on dd.mm.yy\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (4)\n}\n+ JOB Card Placement\n} The JOB Card is placed immediately following the line where the cursor was\n} left when you pressed ENTER.  Normally, you will leave the cursor on the\n} command line where you entered \"JOBC\" (unless you have assigned this command\n} to a PF Key).  The command line, if the screen is at \"top of data\", is taken\n} as line 0, and the JOB Card will be placed at the start of the data.  If the\n} cursor was left on line 1, JOBC will assume line 0.\n}\n} If the cursor was left elsewhere, the JOB Card is normally placed after that\n} line, but a warning is given on the JOB Card panel, and you can change the\n} line number. Enter 0 or 1 to have the JOB Card placed at the start of data.\n}\n} The command line when the screen is NOT at top of data is taken to be\n} the first line of data on the screen.\n}\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021E                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021E": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x17A\\x00I\\x00I\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:41:01", "lines": 73, "newlines": 73, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021E - LPF Generate: Job Card General Information (5)\n/* ---------------------------------------------------------\n/*   Cursor Placement on Return\n/*   --------------------------\n/* Amended by iii on dd.mm.yy\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                            General Information (5)                   @DATE2\n}\n+ Line and Cursor Placement on Return\n} After the JOB Card has been created, the first line of the JOB Card will be\n} scrolled to the top of the screen.  The cursor will be placed as follows:-\n}\n}   If the generated Jobname is not a full eight characters, the cursor will\n}   follow the last character.\n}\n}   Otherwise, if the Programmer's Name (Description) field is empty, the\n}   cursor will be placed at the start of this.\n}\n}   Otherwise, if there is no data following the new JOB Card and comments, it\n}   will be placed on an inserted input line ready for the EXEC statement.\n}\n}   If there is data, and the Keep option found a JOB Card on the first line,\n}   then the cursor will be placed on the sequence number of that line, ready\n}   for you to delete the old JOB Card.  If no JOB Card was found, it will go\n}   at the start of the line following the new JOB Card lines and comments.\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021F                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021F": {"ttr": 4882, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x17C\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:43:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021F - LPF Generate: Job Card General Information (6)\n/* ---------------------------------------------------------\n/*   The Keep Option\n/*   ---------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                            General Information (6)                   @DATE2\n}\n+ The Keep Option\n} If JOB Card Generation is entered with the command\\JOBC K}then an attempt is\n} made to retrieve information from a current JOB Card, providing it starts on\n} line one of the data being edited.  No attempt is made to delete your old JOB\n} Card.  You must do this yourself.\n}\n} The information is retrieved before the JOB Card panel is displayed, and\n} so will be displayed on the panel.  It will over-ride any data kept in your\n} profile dataset (see later Help panel).  The following data is sought:-\n}   Last five letters of Jobname.\n}   Account code and application code.\n}   Programmer's Name field (job description).\n}   Job class, Message class and Region size.\n}\n} The Keep option is easily confused and will then give up (a message may be\n} displayed, and some data may have been retrieved).\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021G                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021G": {"ttr": 4885, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x17D\\x00L\\x00L\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T17:44:01", "lines": 76, "newlines": 76, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021G - LPF Generate: Job Card General Information (7)\n/* ---------------------------------------------------------\n/*   The Profile Pool\n/*   ----------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (7)\n}\n+ Information Saved in the Profile Dataset\n} The following data is saved in your profile dataset if the Job Card\n} data-entry panel is successfully processed:-\n}   Last five letters of Jobname\n}   Application code.\n}   Programmer's Name field (job description).\n}   Message class.\n}\n} This data is retrieved from your profile for fields still empty after the\n} Keep option (if taken) has attempted to retrieve them from any JOB Card\n} currently at the beginning of your data.\n}\n}\n}\n}\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN021H                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021H": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x88)O\\x00\\x88)\\x8f\\x12\"\\x00K\\x00L\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-24T12:22:01", "lines": 75, "newlines": 76, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021H - LPF Generate: Job Card General Information (8)\n/* ---------------------------------------------------------\n/*   Data Defaults\n/*   -------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 02.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n}                            General Information (8)\n}\n+ Defaults\n} Fields in the JOB Card data-entry panel whose contents have been found\n} neither by the Keep option, nor in the user's profile dataset, may have\n} default values.  The following table gives details and summarises the\n} two previous Help panels.\n}\n+   Field                      Keep option?   Profile?    Default\n}   Jobname last 5 letters        Yes           Yes\n}   Account code                  Yes                       User's logonid\n}   Application code              Yes           Yes\n}   Programmer's name             Yes           Yes\n}   Job class                     Yes\n}   Message class                 Yes           Yes         Z\n}   Region size                   Yes                       LOLA default: 768K\n}\n}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021W": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)O\\x00\\x88)\\x8f\\x12\\x07\\x00I\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-24T12:07:01", "lines": 73, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021W - LPF Generate: New Jobname Standards\n/* ----------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to remove old-style logonid stuff\n/* Created by NJS on 03.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                               Jobname Standards                      @DATE2\n}\n+ LOLA In-house Work\n} The format is: Udgxxxxx\n}                ||||\n}                |||*----- any five alpha, numeric or \"national\" characters\n}                ||*------ LOLA group letter\n}                |*------- LOLA division letter: A, F, P or T\n}                *-------- borough U for Utopia\n}\n+ Borough Ad Hoc Work\n} See PCG\n}\n}\n+ Production and Housekeeping Work\n} See Production Division or LOLA Standards Manual\n}\n}\n}                                                         Panel updated 20.10.88\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021X": {"ttr": 5129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x01\\x00\\x88)O\\x00\\x880o\\x16(\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-11-01T16:28:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021X - LPF Generate: LOLA Message Classes\n/* ---------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to bring up-to-date\n/* Created by NJS on 03.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                             LOLA SYSOUT Classes                      @DATE2\n}\n{A\\Testing 1-part (impact) {M\\Testing (Laser printer){Y\\Held output *\n{B\\Held output *           {N\\Prod'n kept on DASD    {Z\\Held output *\n{C\\Prod'n 1-part plain     {O\\Prod'n written to tape {1\\Prod'n Z0520 Creditors\n{D\\Prod(n 2-part plain     {P\\4381 SYSLOG (not prtd) {2\\Prod'n Z0520 Misc\n{E\\Prod'n 3-part plain     {Q\\For remote PC's (NOSEP){3\\Prod'n Z0520 Payroll\n{F\\Copy-ups                {R\\PCS prod'n: Haringey   {4\\Prod'n Z0520 Misc Income\n{G\\Prod'n (Laser printer)  {S\\Special  **            {5\\Prod'n Z0520 Housing Adv\n{H\\Held output *           {T\\PCS prod'n: T. Hamlets {6\\Prod'n Z0520 Packages\n{I\\IMS jobs: 1-part plain  {U\\Used by TSPRINT        {7\\Prod'n Z0520 Rates\n{J\\Prod'n (Laser printer)  {V\\Text 1-part reversed   {8\\Prod'n Z0520 Rents\n{K\\PCS prod'n: Hackney     {W\\SYSLOG (not printed)   {9\\Prod'n Z0520 GPA\n{L\\PCS prod'n: Hillingdon  {X\\1-part reversed Laser\n}\n} Notes:\\*}H is written to tape at 20.00, Y is purged at 20.00, Z purged hourly,\n}          B is written to tape at 20.00 the following day\n}      \\**}Requires special stationery, or special FCB or UCS on SYSOUT DD card\n}\n}See the LOLA Standards Manual, section 53 Appendix 1.    Panel updated 01.11.88\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021Y": {"ttr": 5132, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x89\\x01\\x7f\\x00\\x89\\x02\\x0f\\x19@\\x00P\\x00P\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-01-17T00:00:00", "modifydate": "1989-01-20T19:40:01", "lines": 80, "newlines": 80, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021Y - LPF Generate: LOLA Job Classes\n/* -----------------------------------------\n/* Amended by NJS on 17.01.89 for merged machine\n/* Amended by PMH on 17-11-88 correct class 6 & 9\n/* Amended by NJS on 20.10.88 to bring up-to-date\n/* Amended by NJS on 02.02.88 for new two-machine classes\n/* Created by NJS on 03.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH) used later  COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH) used later  COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH) used later  COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n/*   :  TYPE(TEXT)   INTENS(HIGH) used in text COLOR(BLUE)\n     ~  TYPE(TEXT)   INTENS(HIGH)             COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)   used later\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW) defined above COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              \u00a2CMD              @DATE2\n}                               LOLA Job Classes\n}\n{A\\Short jobs (all Div'ns) {M\\IMS Message Regions    {Y\\GPA DB testing\n{B\\Copy-ups                {N\\Housing DB testing     {Z\\Rates DB testing\n{C\\CIS long running jobs   {O\\Payroll DB testing     +\n{D\\PL/I compiling          {P\\MVS housekeeping       {1\\Tech. Div. long jobs\n{E\\Stores DB testing       {Q\\UHB DB testing         {2\\Hot batch\n{F\\PCS over-night          {R\\Haringey Production    +\n+                          {S\\CC DB testing          {4\\LASER batch over-night\n{H\\House-keeping           {T\\Tower Hamlets prod'n   +\n{I\\For when IMS down       +                         {6\\Tech. Div. monitor jobs\n{J\\SPSS over-night         {V\\Creditors DB testing   +\n{K\\Hackney production      {W\\FMA DB testing         +\n{L\\Hillingdon production   {X\\PIPS DB testing        {9\\SDD long jobs\n}\n}              Notes: DB testing includes MFSGEN and TPLINK jobs.\n}                     Hot batch initiator is normally stopped.\n}\n}See the LOLA Standards Manual, section 51 Appendix 1     Panel updated 17.01.89\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N021Z": {"ttr": 5135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)O\\x00\\x88)_\\x11T\\x00L\\x00L\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-21T11:54:01", "lines": 76, "newlines": 76, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN021Z - LPF Generate: LOLA Application Codes\n/* -----------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 20.10.88 to bring up-to-date\n/* Created by NJS on 03.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n@LINE03                                              \u00a2CMD              @DATE2\n}                            LOLA Application Codes\n}\n{A\\FMA (Accountancy)       {M\\Payroll (batch)        {Y\\APL batch boro ad hoc\n{B\\UHB Private Sector      {N\\Libraries              {Z\\Standard Programs\n{C\\Creditors               {O\\TSO Session Usage      {#\\Copy-ups\n{D\\Debtors (income)        {P\\Payroll (on-line)\n{E\\Community Charge        {Q\\FOCUS, DSS, Boro pgms\n{F\\PIPS                    {R\\Rates\n{G\\                        {S\\Class\n{H\\Housing                 {T\\Stores\n{I\\PC-Mainframe file xfr   {U\\UHB Public Sector\n{J\\FMA (Jobs)              {V\\Packages\n{K\\GPA                     {W\\Work Planning\n{L\\DLO                     {X\\Indexes\n}\n}See the LOLA Standards Manual, section 23.1.2            Panel updated 20.10.88\n}\n}N.B. Your group may have its own codes for the second account sub-field.\n}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N0210": {"ttr": 5138, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)_\\x00\\x88)_\\x11#\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-21T00:00:00", "modifydate": "1988-10-21T11:23:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN0212 - LPF Generate: JOB Card Panel Fields (2)\n/* --------------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 21.10.88 to remove old/new logonid references\n/* Created by NJS on 04.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                        JOB Card Panel Fields (2)                     @DATE2\n}\n+ Description\n} This is known as the Programmer's Name field, but may contain any twenty\n} characters.  Quotes within the field must be doubled, but should not be\n} placed at the start or end, since the JOB Card generation function will\n} place quotes around the whole field.\n}\n} The field will be printed on the job's output separator pages in half-sized\n} block characters (but some characters may not print).\n}\n+ Job Class\n} This is the class in which your job will run, and affects performance,\n} turn-around time, and scheduling times.  It is a required field, and may\n} contain any alpha or numeric character.  A list of Job Classes and their use\n} at LOLA is available in this tutorial (press%\"UP\"}for the menu), but the\n} LOLA Standards Manual should be consulted.\n}\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN0213                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N0211": {"ttr": 5141, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x16\\x19\\x01\\xb4\\x01\\xb4\\x00\\x01\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T16:19:01", "lines": 436, "newlines": 436, "modlines": 1, "user": "UOTXNJS"}, "text": "    PROC 0 TEST DEBUG\n/**********************************************************************\n/* EDIT MACRO LDGN0211\n/* Extracts values from a current JOB card\n/*\n/*---------------------------------------------------------------------\n/* Amended by\n/* Amended by NS on 20.10.88 to remove old-style logonid processing\n/* Created by NS on 27.11.87\n/*\n/*---------------------------------------------------------------------\n/* Will attempt to retrieve Job card values into the following\n/*  variables:-\n/*    JOBCJ1 - last 5 characters of jobname\n/*    JOBCA1 - account code\n/*    JOBCA2 - application code\n/*    JOBCP1 - pgmr name field\n/*    JOBCC1 - job class\n/*    JOBCM1 - message class\n/*    JOBCR1 - region size\n/*\n/**********************************************************************\n    CONTROL         END(ENDO)          /*   DEFAULTS ARE:  MSG NOLIST*/+\n            PROMPT  MSG\n    IF &TEST = TEST THEN +\n      CONTROL LIST\n    IF &DEBUG = DEBUG THEN +\n      CONTROL LIST CONLIST SYMLIST\n\n    ISPEXEC CONTROL ERRORS RETURN\n\n/*====================================================================*/\n/* Initialisation                                                     */\n/*====================================================================*/\n    SET &BLANK = &STR( )\n    SET &COMMA = &STR(,)\n    SET &SEV_ERR = 12\n    SET &END_OF_JOBCARD = NO\n    SET &END_OF_LINE    = NO\n    SET &AC_DONE  = NO\n    SET &AC_CONT  = NO\n    SET &PGM_DONE = NO\n    SET &LN = 1\n    ISREDIT (LASTLINE) = LINENUM .ZLAST\n\n/*====================================================================*/\n/* Main DO loop.  Each sub-routine will set &NEXT_OP to point to what */\n/* it thinks is the next operand, or set &END_OF_LINE/&END_OF_JOBCARD */\n/* if necessary.  It will also exit completely if JOB card not as     */\n/* expected.                                                          */\n/*====================================================================*/\n\n/*--------------------------------------------------------------------*/\n/* Sub-routine to get to next line's operands.  As first card, will   */\n/*   ensure verb IS \"JOB\", then get required info from Jobname.       */\n/*--------------------------------------------------------------------*/\n    IF &LN > &LASTLINE THEN +\n      GOTO EXIT08\n    ISREDIT (TEMP) = LINE &LN\n    ISREDIT CURSOR = &LN 1\n    ISREDIT LABEL &LN = .L\n\n                                        /*----------------------------*/\n                                        /* Get past \"//\" and jobname  */\n                                        /* and following blanks.      */\n                                        /*----------------------------*/\n    ISREDIT SEEK ' '  .L .L FIRST 1 71\n    IF &LASTCC \u00ac= 0 THEN +\n      GOTO EXIT08\n    ISREDIT (,COLNAME) = CURSOR\n    SET &COLNAME = &COLNAME - 1\n                                                  /* Save for jobname */\n    ISREDIT SEEK P'\u00ac' .L .L NEXT  1 71\n    IF &LASTCC \u00ac= 0 THEN +\n      GOTO EXIT08\n    ISREDIT (,COLA) = CURSOR\n\n                                        /*----------------------------*/\n                                        /* First line: go past verb,  */\n                                        /* and ensure it is \"JOB\". If */\n                                        /* so, extract jobname's end  */\n                                        /* (JOBCJ1).                  */\n                                        /*----------------------------*/\n    ISREDIT SEEK ' '  .L .L NEXT 1 71\n    IF &LASTCC \u00ac= 0 THEN +\n      GOTO EXIT08\n    ISREDIT (,COLB) = CURSOR\n    IF &SUBSTR(&COLA-1:&COLB,&STR(&TEMP)) \u00ac= &STR( JOB ) THEN +\n      GOTO EXIT08\n    IF &COLNAME > 5 THEN +\n      SET &JOBCJ1 = &SUBSTR(6:&COLNAME,&STR(&TEMP))\n    ELSE\n\n    ISREDIT SEEK P'\u00ac' .L .L NEXT &COLB 71\n    IF &LASTCC \u00ac= 0 THEN +\n      GOTO EXIT04\n    ISREDIT (,COLA) = CURSOR\n    SET &END_OF_LINE    = NO\n    SET &NEXT_OP = &COLA\n                                        /* NEXT_OP points to start of */\n                                        /* operands                   */\n\n/*--------------------------------------------------------------------*/\n    DO WHILE &END_OF_JOBCARD = NO\n      IF &AC_DONE \u00ac= YES THEN +\n        DO\n\n/*--------------------------------------------------------------------*/\n/* Sub-routine to find a/c field and extract info.  A/c field must be */\n/* enclosed in parentheses.  If split over two cards, will only get   */\n/* info from first card, but will try and position &NEXT_OP correctly.*/\n/* If split over three cards, give up!                                */\n/*                                                                    */\n/* Info is first subfield (to JOBCA1) and second (to JOBCA2).         */\n/*--------------------------------------------------------------------*/\n                                        /*----------------------------*/\n                                        /* Must be first time:        */\n                                        /* if there's a comma, there  */\n                                        /* can't be an a/c field      */\n                                        /*----------------------------*/\n        IF &AC_CONT = NO THEN +\n          IF &SUBSTR(&NEXT_OP,&STR(&TEMP)) = &STR(&COMMA) THEN +\n            DO\n            SET &END_OP = &NEXT_OP - 1\n            ENDO\n\n                                        /*----------------------------*/\n                                        /* Look for a/c field in (..) */\n                                        /*----------------------------*/\n          ELSE +\n            DO\n            SET &COLA = &NEXT_OP\n            ISREDIT SEEK '(' .L .L FIRST &COLA &COLA\n            IF &LASTCC = 0 THEN +\n              DO\n              ISREDIT SEEK ')' .L .L FIRST &COLA 71\n              IF &LASTCC \u00ac= 0 THEN +\n                DO\n                SET &AC_CONT = YES\n                SET &END_OF_LINE = YES\n                SET &COLC = 71\n                ENDO\n              ELSE +\n                ISREDIT (,COLC) = CURSOR\n              SET &END_OP = &COLC\n              ISREDIT SEEK ',' .L .L FIRST &COLA &COLC\n              IF &LASTCC = 0 THEN +\n                DO\n                ISREDIT (,COLB) = CURSOR\n                ISREDIT SEEK ',' .L .L NEXT &COLB &COLC\n                IF &LASTCC = 0 THEN +\n                  ISREDIT (,COLC) = CURSOR\n                IF &COLC > &COLB + 1 THEN +\n                  IF &SUBSTR(&COLB+1,&STR(&TEMP)) \u00ac= &STR(&BLANK) THEN +\n                    SET &JOBCA2 = &SUBSTR(&COLB+1:&COLC-1,&STR(&TEMP))\n                                                  /* Application code */\n                SET &COLC = &COLB\n                ENDO\n              IF &COLC > &COLA + 1 THEN +\n                SET &JOBCA1 = &SUBSTR(&COLA+1:&COLC-1,&STR(&TEMP))\n                                                      /* Account code */\n              ELSE\n              ENDO\n\n                                        /*----------------------------*/\n                                        /* Couldn't find opening \"(\"  */\n                                        /*----------------------------*/\n            ELSE +\n              DO\n              ISREDIT SEEK ',' .L .L FIRST &COLA 71\n              IF &LASTCC = 0 THEN +\n                DO\n                ISREDIT (,COLB) = CURSOR\n                SET &END_OP = &COLB - 1\n                                            /* An attempted recovery! */\n                ISPEXEC SETMSG MSG(LMGN021L)\n                                              /* But warn them anyway */\n                ENDO\n              ELSE +\n                DO\n                ISPEXEC SETMSG MSG(LMGN021L)\n                GOTO EXIT04\n                ENDO\n              ENDO\n            ENDO\n\n                                        /*----------------------------*/\n                                        /* If a/c field not terminated*/\n                                        /* last time, try and find    */\n                                        /* delimiter this time.  Else */\n                                        /* get out.                   */\n                                        /*----------------------------*/\n        ELSE +\n          DO\n          ISREDIT SEEK ')' .L .L FIRST &NEXT_OP 71\n          IF &LASTCC = 0 THEN +\n            DO\n            SET &AC_CONT = NO\n            ISREDIT (,COLB) = CURSOR\n            SET &END_OP = &COLB\n            ENDO\n          ELSE +\n            DO\n            ISPEXEC SETMSG MSG(LMGN021L)\n            GOTO EXIT04\n            ENDO\n          ENDO\n\n                                        /*----------------------------*/\n                                        /* Set flags and finish with  */\n                                        /* a/c field sub-routine      */\n                                        /*----------------------------*/\n        IF &AC_CONT = NO THEN +\n          SET &AC_DONE = YES\n        IF &END_OP = 71 | +\n           &SUBSTR(&END_OP+1,&STR(&TEMP)) = &BLANK THEN +\n          IF &AC_CONT \u00ac= YES THEN +\n            SET &END_OF_JOBCARD = YES\n          ELSE\n        ELSE +\n          IF &SUBSTR(&END_OP+1,&STR(&TEMP)) = &STR(&COMMA) THEN +\n            IF &END_OP + 1 = 71 | +\n               &SUBSTR(&END_OP+2,&STR(&TEMP)) = &BLANK THEN +\n              SET &END_OF_LINE = YES\n            ELSE +\n              SET &NEXT_OP = &END_OP + 2\n          ELSE\n        ENDO\n/*--------------------------------------------------------------------*/\n      ELSE +\n        IF &PGM_DONE \u00ac= YES THEN +\n          DO\n\n/*--------------------------------------------------------------------*/\n/* Sub-routine to extract info from Programmer's Name field.          */\n/*--------------------------------------------------------------------*/\n                                        /*----------------------------*/\n                                        /* If there's a comma, there  */\n                                        /* can't be a pgmr field      */\n                                        /*----------------------------*/\n          IF &SUBSTR(&NEXT_OP,&STR(&TEMP)) = &STR(&COMMA) THEN +\n            DO\n            SET &END_OP = &NEXT_OP - 1\n            ENDO\n\n                                        /*----------------------------*/\n                                        /* Field has quotes: look for */\n                                        /* quote pairs to find end of */\n                                        /* field, then extract field  */\n                                        /*----------------------------*/\n          ELSE +\n            DO\n            IF &SUBSTR(&NEXT_OP,&STR(&TEMP)) = &STR(') THEN +\n              DO\n              SET &COLA = &NEXT_OP+1\n              SET &ERROR = &STR(EXIT04 LMGN021M)\n              SET &Q_FOUND = NO\n              DO WHILE &Q_FOUND = NO\n                ISREDIT SEEK \"'\" .L .L FIRST &COLA 71\n                IF &LASTCC \u00ac= 0 THEN +\n                  DO\n                  ISPEXEC SETMSG MSG(LMGN021M)\n                  GOTO EXIT04\n                  ENDO\n                ISREDIT (,COLB) = CURSOR\n                SET &COLC = &COLB + 1\n                ISREDIT SEEK \"'\" .L .L FIRST &COLC &COLC\n                IF &LASTCC = 0 THEN +\n                  SET &COLA = &COLC + 1\n                ELSE +\n                  SET &Q_FOUND = YES\n              ENDO\n              SET &JOBCP1 = &SUBSTR(&NEXT_OP+1:&COLB-1,&STR(&TEMP))\n              SET &PGM_DONE = YES\n              SET &END_OP = &COLB\n              SET &ERROR = &STR(EXIT12 LMGN021K)\n              ENDO\n\n                                        /*----------------------------*/\n                                        /* No quotes: ensure not a    */\n                                        /* key-word field (containing */\n                                        /* \"=\"), then extract field   */\n                                        /*----------------------------*/\n            ELSE +\n              DO\n              SET &COLA = &NEXT_OP\n              ISREDIT SEEK ' ' .L .L FIRST &COLA 71\n              IF &LASTCC \u00ac= 0 THEN +\n                SET &COLB = 71\n              ELSE +\n                DO\n                ISREDIT (,COLB) = CURSOR\n                SET &COLB = &COLB - 1\n                ENDO\n              ISREDIT SEEK ',' .L .L FIRST &COLA &COLB\n              IF &LASTCC = 0 THEN +\n                DO\n                ISREDIT (,COLB) = CURSOR\n                SET &COLB = &COLB - 1\n                ENDO\n              ISREDIT SEEK '=' .L .L FIRST &COLA &COLB\n              IF &LASTCC \u00ac= 0 THEN +\n                DO\n                SET &JOBCP1 = &SUBSTR(&COLA:&COLB,&STR(&TEMP))\n                SET &END_OP = &COLB\n                ENDO\n              ELSE +\n                SET &END_OP = &NEXT_OP - 1\n              ENDO\n            ENDO\n\n                                        /*----------------------------*/\n                                        /* Check for end-of-jobcard   */\n                                        /* (NEXT_OP blank) or end-of- */\n                                        /* card (NEXT_OP position     */\n                                        /* comma + blank)             */\n                                        /*----------------------------*/\n          SET &PGM_DONE = YES\n          IF &END_OP = 71 | +\n             &SUBSTR(&END_OP+1,&STR(&TEMP)) = &BLANK THEN +\n            SET &END_OF_JOBCARD = YES\n          ELSE +\n            IF &SUBSTR(&END_OP+1,&STR(&TEMP)) = &STR(&COMMA) THEN +\n              IF &END_OP + 1 = 71 | +\n                 &SUBSTR(&END_OP+2,&STR(&TEMP)) = &BLANK THEN +\n                SET &END_OF_LINE = YES\n              ELSE +\n                SET &NEXT_OP = &END_OP + 2\n            ELSE\n\n          ENDO\n/*--------------------------------------------------------------------*/\n        ELSE +\n          DO\n\n/*--------------------------------------------------------------------*/\n/* Sub-routine to extract key-word information: CLASS, MESSAGE and    */\n/* REGION.                                                            */\n/*--------------------------------------------------------------------*/\n          SET &COLA = &NEXT_OP\n          ISREDIT SEEK ' ' .L .L FIRST &COLA 71\n          IF &LASTCC \u00ac= 0 THEN +\n            SET &COLLAST = 71\n          ELSE +\n            DO\n            ISREDIT (,COLLAST) = CURSOR\n            SET &COLLAST = &COLLAST - 1\n            ENDO\n          DO WHILE &NEXT_OP \u00ac= &COLLAST + 1\n            SET &COLA = &NEXT_OP\n            ISREDIT SEEK ',' .L .L FIRST &COLA &COLLAST\n            IF &LASTCC = 0 THEN +\n              DO\n              ISREDIT (,COLCOMMA) = CURSOR\n              SET &COLB = &COLCOMMA - 1\n              ENDO\n            ELSE +\n              DO\n              SET &END_OF_JOBCARD = YES\n              SET &COLB = &COLLAST\n              ENDO\n            ISREDIT SEEK '=' .L .L FIRST &COLA &COLB\n            IF &LASTCC \u00ac= 0 THEN +\n              DO\n              ISPEXEC SETMSG MSG(LMGN021N)\n              GOTO EXIT04\n              ENDO\n            SET &OPERAND = &SUBSTR(&COLA:&COLB,&STR(&TEMP))\n            SET &OPERAND = &STR(&OPERAND)&STR(*********)\n            IF &SUBSTR(1:6,&STR(&OPERAND)) = &STR(CLASS=) THEN +\n              SET &JOBCC1 = &SUBSTR(&COLA+6:&COLB,&STR(&TEMP))\n            IF &SUBSTR(1:9,&STR(&OPERAND)) = &STR(MSGCLASS=) THEN +\n              SET &JOBCM1 = &SUBSTR(&COLA+9:&COLB,&STR(&TEMP))\n            IF &SUBSTR(1:7,&STR(&OPERAND)) = &STR(REGION=) THEN +\n              SET &JOBCR1 = &SUBSTR(&COLA+7:&COLB,&STR(&TEMP))\n            SET &NEXT_OP = &COLB + 1\n            IF &SUBSTR(&NEXT_OP,&STR(&TEMP)) = &STR(&COMMA) THEN +\n              SET &NEXT_OP = &NEXT_OP + 1\n          ENDO\n          SET &END_OF_LINE = YES\n          ENDO\n/*--------------------------------------------------------------------*/\n\n      IF &END_OF_JOBCARD = YES THEN\n      ELSE +\n        IF &END_OF_LINE = YES THEN +\n          DO\n\n/*--------------------------------------------------------------------*/\n/* Sub-routine to get to next line's operands.                        */\n/*--------------------------------------------------------------------*/\n          SET &LN = &LN + 1\n          IF &LN > &LASTLINE THEN +\n            GOTO EXIT00\n          ISREDIT (TEMP) = LINE &LN\n          ISREDIT CURSOR = &LN 1\n          ISREDIT LABEL &LN = .L\n\n                                        /*----------------------------*/\n                                        /* Get past \"//\" and following*/\n                                        /* blanks.                    */\n                                        /*----------------------------*/\n          ISREDIT SEEK ' ' .L .L FIRST 1 71\n          IF &LASTCC \u00ac= 0 THEN +\n            GOTO EXIT00\n          ISREDIT SEEK P'\u00ac' .L .L NEXT 1 71\n          IF &LASTCC \u00ac= 0 THEN +\n            GOTO EXIT00\n          ISREDIT (,COLA) = CURSOR\n          SET &END_OF_LINE = NO\n          SET &NEXT_OP = &COLA\n                                        /* NEXT_OP points to start of */\n                                        /* operands                   */\n          ENDO\n/*--------------------------------------------------------------------*/\n\n    ENDO\n/*--------------------------------------------------------------------*/\n/* Exit                                                               */\n/*--------------------------------------------------------------------*/\nEXIT00: +\n    DO\n    ISPEXEC VPUT (JOBCJ1 JOBCA1 JOBCA2 JOBCP1 JOBCC1 JOBCM1 JOBCR1) +\n            SHARED\n    EXIT CODE(00)\n    ENDO\nEXIT04: +\n    DO\n    ISPEXEC VPUT (JOBCJ1 JOBCA1 JOBCA2 JOBCP1 JOBCC1 JOBCM1 JOBCR1) +\n            SHARED\n    EXIT CODE(04)\n    ENDO\nEXIT08: +\n    EXIT CODE(08)\nEXIT12: +\n    EXIT CODE(12)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N0213": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)_\\x00\\x88)_\\x119\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-21T00:00:00", "modifydate": "1988-10-21T11:39:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN0213 - LPF Generate: JOB Card Panel Fields (3)\n/* --------------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 21.10.88 to remove old/new logonid references\n/* Created by NJS on 07.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                        JOB Card Panel Fields (3)                     @DATE2\n}\n+ Message Class\n} This is the SYSOUT class to which your JCL and messages will be routed.  It\n} may contain any alpha or numeric character.  However, only a few classes\n} really make sense:  B, H, N, O, Y or Z (which is the default).\n}\n} A list of SYSOUT Classes and their use at LOLA is available in this tutorial\n} (press%\"UP\"}for the menu), but the LOLA Standards Manual should be\n} consulted.\n}\n+ Region Size\n} This limits the amount of virtual storage your job can use.  It can be one\n} to seven numerics, which must be followed by K (1024 bytes) or M (1024\n} K-bytes).  If the field is left blank or as \"Default\", a REGION= parameter\n} is not generated and the LOLA default (768K) is used.\n}\n}\n}\n                        +For more information press%ENTER}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n    &ZCONT   = LHGN0214                 /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02N0214": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x88)_\\x00\\x88)_\\x11A\\x00J\\x00J\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-21T00:00:00", "modifydate": "1988-10-21T11:41:01", "lines": 74, "newlines": 74, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LHGN0214 - LPF Generate: JOB Card Panel Fields (4)\n/* --------------------------------------------------\n/* Amended by iii on dd.mm.yy\n/* Amended by NJS on 21.10.88 to remove old/new logonid references\n/* Created by NJS on 07.12.87\n\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n/*   \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n/*   \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n/*   *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n/*   {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     \\  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n/*   \u00a2  TYPE(INPUT)  INTENS(LOW)   CAPS(ON)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n/*   #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     \u00a2  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n/*   |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n/*   @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(BLUE)\n/*   \u00a6  TYPE(      ) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n)BODY EXPAND(\u00a6\u00a6)\n%LPF Tutorial \u00a6-\u00a6 LPF JOB Card Generation \u00a6-\u00a6 LPF Tutorial\n+COMMAND ===>_ZCMD                                            @ZTIME+on@DATE1\n}                        JOB Card Panel Fields (4)                     @DATE2\n}\n+ \"Change line no. if required\"\n} This is only displayed if the JOB Card will not be inserted at the start of\n} data, because the cursor was not left on line 1 (or line 0).  See \"General\n} Information\" in this tutorial, \"Job Placement\" section: press%UP}for the\n} tutorial menu.  Note that a warning message is issued, and pressing %HELP}\n} twice will also take you to the Help panel mentioned above,\n}\n} Enter 1 (or 0) to have the JOB Card placed at top-of-data.\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n)INIT\n/*=====================================================================\n/* Start of INITIALISATION Section\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    &ZTOP    = ISR00003                 /* Top HELP Panel\n    &ZUP     = LHGN021                  /* Parent HELP Panel\n/*  &ZCONT   =                          /* Next HELP Panel\n                                        /* Don't use ZCONT if ZSEL is set\n\n/*=====================================================================\n/* INIT section continued.\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02PN021": {"ttr": 5390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x88)O\\x00\\x88)O\\x19\\x06\\x00\\xe1\\x00\\xdf\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd5\\xd1\\xe2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-10-20T00:00:00", "modifydate": "1988-10-20T19:06:01", "lines": 225, "newlines": 223, "modlines": 0, "user": "UOTXNJS"}, "text": ")ATTR\n/* LPGN021 - LPF EDIT Macros - JOB Card Data Entry Panel\n/* -----------------------------------------------------\n/* Last amended by NJS on 20.10.88 to remove old-style logonid processing\n/*      Started by NJS on 27.10.87\n\n     %  TYPE(TEXT)   INTENS(HIGH)             COLOR(WHITE)\n     \\  TYPE(TEXT)   INTENS(HIGH)             COLOR(YELLOW)\n     \"  TYPE(TEXT)   INTENS(HIGH)             COLOR(TURQ)\n     *  TYPE(TEXT)   INTENS(HIGH)             COLOR(PINK)\n     {  TYPE(TEXT)   INTENS(HIGH)             COLOR(GREEN)\n     }  TYPE(TEXT)   INTENS(LOW)              COLOR(GREEN)\n/*   '  TYPE(TEXT)   INTENS(LOW)              COLOR(TURQ)\n     +  TYPE(TEXT)   INTENS(LOW)              COLOR(BLUE)\n\n     _  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(LEFT)\n     $  TYPE(INPUT)  INTENS(HIGH)  CAPS(OFF)  JUST(LEFT)\n     \u00a2  TYPE(INPUT)  INTENS(HIGH)  CAPS(ON)   JUST(ASIS)\n     \u00ac  TYPE(INPUT)  INTENS(NON)\n\n     !  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(WHITE)\n     #  TYPE(OUTPUT) INTENS(HIGH)  CAPS(OFF)  COLOR(TURQ)\n     |  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n     @  TYPE(OUTPUT) INTENS(LOW)   CAPS(OFF)  COLOR(TURQ)\n/*   \u00a6  TYPE(OUTPUT) INTENS(HIGH)             COLOR(undefined)\n/*   ~  TYPE(      ) INTENS(LOW)              COLOR(undefined)\n\n/* Text:   % H W, \\ H Y, \" H TQ, * H PK, { H G, } L G, (' L TQ), + L BLU\n/* Input:  _ H CAPS LEFT, $ H ASIS LEFT, \u00a2 L CAPS, \u00ac NON\n/* Output: ! H ASIS W, # H ASIS TQ, | L ASIS W, @ L ASIS TQ\n\n)BODY EXPAND(//)\n%-/-/- +LPF Generate:\\Standard JOB Card %-/-/-\n\"OPTION or COMMAND  ===>_ZCMD                                 @ZTIME+on@DATE1\n@LINE03                                              #CMD              @DATE2\n+\n{ For Jobname:-\n+\n+   Last five letters%===>_Z    +\n+\n{ For Account code:-\n+\n+   TSO account field%===>_Z      +\n+\n+    Application code%===>_Z +\n+\n{ Description:       %===>_Z                   %<===+   (Programmer Name Field)\n+\n{ Other data:-\n+\n+   Job class %===>_Z+ (Req'd)  Message class %===>_Z+  Region %===>$Z       +\n+                                   #Z                                _Z     +\n+Enter%END+command to cancel JOB card generation.+\n)INIT\n\n    .ZVARS = '( JOBCJ1 JOBCA1 JOBCA2 JOBCP1 +\n                JOBCC1 JOBCM1 JOBCR1 JOBCL1 JOBCL2 )'\n\n    .ATTR(LINE03)  = 'COLOR(WHITE)'\n    .ATTR(ZTIME)   = 'COLOR(TURQ)'\n    .ATTR(DATE1)   = 'COLOR(TURQ)'\n    .ATTR(DATE2)   = 'COLOR(TURQ)'\n\n/*---------------------------------------------------------------------\n/* Set the HELP linkage.\n/*---------------------------------------------------------------------\n    .HELP    = LHGN021\n    &ZHTOP   = ISR00003                 /* Tutorial Table of Contents\n    &ZHINDEX = ISR91000                 /* Tutorial Index - 1st page\n    &ZPRIM   = NO                       /* NOT    a Primary Option Menu\n\n/*---------------------------------------------------------------------\n/* Set the first and second time indicators.\n/*---------------------------------------------------------------------\n    IF (&JOBC2ND = YES)\n      &JOBC1ST = NO\n      &JOBC2ND  = NO\n    IF (&JOBC1ST = YES)\n      &JOBC1ST = NO\n      &JOBC2ND  = YES\n    IF (&JOBC1ST = &Z)\n      &JOBC1ST = YES\n      &JOBC2ND  = NO\n\n/*---------------------------------------------------------------------\n/* Set the values of various screen fields.\n/*---------------------------------------------------------------------\n    &LINE03  = &Z\n    &CMD     = &Z\n    &DATE1   = '&ZDAY/&ZMONTH/&ZYEAR'\n    &DATE2   = '(&ZJDATE)'\n\n    IF (&JOBC1ST = YES)\n      &LINE03  = 'You may invoke this panel directly with the command'\n      &CMD     = JOBC\n\n    IF (&JOBCLX \u00ac= YES)\n      &JOBCL1 = &Z\n      &JOBCL2 = &Z\n      .ATTR(JOBCL2) = 'TYPE(OUTPUT)'\n    IF (&JOBCLX = YES)\n      &JOBCL1 = 'Change line no. if required  ===>'\n      .ATTR(JOBCL1) = 'HILITE(BLINK)'\n      .ATTR(JOBCL2) = 'TYPE(INPUT)'\n\n/*---------------------------------------------------------------------\n/* Set the input fields to profile values if not retrieved by LDGN0211\n/*---------------------------------------------------------------------\n    IF (&JOBCJ1 = &Z)\n      &JOBCJ1 = &LGN02J1\n/*                             A/c code not kept in profile\n    IF (&JOBCA2 = &Z)\n      &JOBCA2 = &LGN02A2\n    IF (&JOBCP1 = &Z)\n      &JOBCP1 = &LGN02P1\n/*                             Job class not kept in profile\n    IF (&JOBCM1 = &Z)\n      &JOBCM1 = &LGN02M1\n/*                             Region not kept in Profile\n\n/*---------------------------------------------------------------------\n/* Set the defaults where still null\n/*---------------------------------------------------------------------\n/*                             Job name and Programmer name vars\n/*                               have no default\n/*                             Job class has no default\n    IF (&JOBCA1 = &Z)\n      &JOBCA1 = &ZUSER\n    IF (&JOBCM1 = &Z)\n      &JOBCM1 = 'Z'\n    IF (&JOBCR1 = &Z)\n      &JOBCR1 = 'Default'\n    IF (&JOBCR1 = 'Default')\n      .ATTR(JOBCR1) = 'COLOR(GREEN)'\n    IF (&JOBCR1 \u00ac= 'Default')\n      .ATTR(JOBCR1) = 'COLOR(RED)'\n\n/*---------------------------------------------------------------------\n/* Set the cursor\n/*---------------------------------------------------------------------\n    .CURSOR = JOBCJ1\n\n)REINIT\n    &LINE03 = &Z\n    &CMD     = &Z\n    IF (&JOBCA1 = &Z)\n      &JOBCA1 = &ZUSER\n    IF (&JOBCR1 = 'Default')\n      .ATTR(JOBCR1) = 'COLOR(GREEN)'\n    IF (&JOBCR1 \u00ac= 'Default')\n      .ATTR(JOBCR1) = 'COLOR(RED)'\n    REFRESH(*)\n\n)PROC\n/*---------------------------------------------------------------------\n/* Verify the input\n/*---------------------------------------------------------------------\n/*                                      Application code (later?)\n/*  VER (&JOBCA2 NB MSG=LMGN021A)\n/*                                      Account code\n    VER (&JOBCA1 NB NAME MSG=LMGN021B)\n/*                                      Job class\n    VER (&JOBCC1 NB MSG=LMGN021C)\n    &TEMP = 'A&JOBCC1'\n    VER (&TEMP NAME MSG=LMGN021D)\n/*                                      Message class\n    IF (&JOBCM1 = &Z)\n      &JOBCM1 = 'Z'\n    &TEMP = 'A&JOBCM1'\n    VER (&JOBCM1 NAME MSG=LMGN021E)\n/*                                      Region\n    &JOBCR1 = TRANS (&JOBCR1 'SMP/E','4000K' *,*)\n    IF (&JOBCR1 = &Z)\n      &JOBCR1 = 'Default'\n    IF (&JOBCR1 \u00ac= 'Default')\n      &JOBCRX = TRUNC (&JOBCR1 7)\n      &JOBCRZ = .TRAIL\n      IF (&JOBCRZ = &Z)\n        &JOBCRX = TRUNC (&JOBCRX 6)\n        &JOBCRZ = .TRAIL\n        IF (&JOBCRZ = &Z)\n          &JOBCRX = TRUNC (&JOBCRX 5)\n          &JOBCRZ = .TRAIL\n          IF (&JOBCRZ = &Z)\n            &JOBCRX = TRUNC (&JOBCRX 4)\n            &JOBCRZ = .TRAIL\n            IF (&JOBCRZ = &Z)\n              &JOBCRX = TRUNC (&JOBCRX 3)\n              &JOBCRZ = .TRAIL\n              IF (&JOBCRZ = &Z)\n                &JOBCRX = TRUNC (&JOBCRX 2)\n                &JOBCRZ = .TRAIL\n                IF (&JOBCRZ = &Z)\n                  &JOBCRX = TRUNC (&JOBCRX 1)\n                  &JOBCRZ = .TRAIL\n                  IF (&JOBCRZ = &Z)\n                    .MSG = LMGN021F\n      &JOBCRZ = TRANS (&JOBCRZ K,K k,K M,M m,M MSG=LMGN021F)\n      VER (&JOBCRX NUM MSG=LMGN021F)\n      &JOBCR1 = '&JOBCRX.&JOBCRZ'\n/*                                      Line no. if present\n    IF (&JOBCLX = YES)\n      VER (&JOBCL2 NUM MSG=LMGN021G)\n\n/*---------------------------------------------------------------------\n/* Split up Logonid and create and test Job name\n/*---------------------------------------------------------------------\n    &JOBCJU = TRUNC (&ZUSER 4)\n    &JOBCJU = TRUNC (&JOBCJU 2)\n    &JOBCJZ = .TRAIL\n    &JOBCJU = TRUNC (&JOBCJU 1)\n    &JOBCJN = '&JOBCJU.&JOBCJZ.&JOBCJ1'\n    .CURSOR = JOBCJ1\n    VER (&JOBCJN NAME MSG=LMGN021I)\n/*---------------------------------------------------------------------\n/* Put vars back in profile pool if all OK (??)\n/*---------------------------------------------------------------------\n    IF (.MSG = &Z)\n      &LGN02A2 = &JOBCA2\n      &LGN02J1 = &JOBCJ1\n      &LGN02P1 = &JOBCP1\n      &LGN02M1 = &JOBCM1\n      VPUT ( LGN02A2 LGN02J1 LGN02P1 LGN02M1 ) PROFILE\n\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A02SETUP": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x90\\x01_\\x00\\x90\\x01_\\x18\\x02\\x01_\\x01_\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-15T00:00:00", "modifydate": "1990-01-15T18:02:01", "lines": 351, "newlines": 351, "modlines": 0, "user": "UOTXMJT"}, "text": "         MACRO\n&CSECTNM SETUP &R1,&R2,&LDSA=72,&RE=NO,&EQUATE=YES,&BITEQU=NO,&VERSN=, *\n               &SP=0,&PRINT=,                                          *\n               &DATE=,&ID=\n         LCLA  &BASE1,&BASE2,&L,&L1,&L2,&LVN,&LDT,&LID,&S\n         LCLA  &SUBPOOL\n         LCLB  &B1,&B2,&B3,&B4,&B5,&B6,&B7\n         LCLC  &LBL(9),&VLBL,&AMP\n&AMP     SETC  '&&'\n&B1      SETB  ('&SYSECT' NE '')\n&B2      SETB  ('&CSECTNM' NE '')\n&B6      SETB  ('&PRINT' EQ 'GEN' )\n         AIF   (&B6).NOPRNT\n         PUSH  PRINT\n         PRINT NOGEN\n.NOPRNT  ANOP\n         AIF   (&B2).SETNM\n         AIF   (&B1).TSTBASE\n         MNOTE 4,'NO CSECT NAME GIVEN - CSECT IS UNNAMED'\n.SETNM   ANOP\n&CSECTNM CSECT\n.TSTBASE ANOP\n         AIF   (T'&R1 EQ 'O' OR T'&R1 NE 'N').DEFLT\n&BASE1   SETA  &R1\n         AIF   (&BASE1 GT 1 AND &BASE1 LE 12).TSTBAS2\n         AIF   (&BASE1 EQ 13 AND '&RE' EQ 'NO').TSTBAS2\n.DEFLT   ANOP\n         MNOTE 4,'FIRST BASE REGISTER NOT SPECIFIED OR INVALID 12 SUBST*\n               ITUTED'\n&BASE1   SETA  12\n.TSTBAS2 ANOP\n         AIF   (T'&R2 EQ 'O').TSTVDAT\n         AIF   (T'&R2 NE 'N').MNOTE2\n&BASE2   SETA  &R2\n         AIF   (&BASE2 GT 1 AND &BASE2 LE 12 AND &BASE2 NE &BASE1).SETB*\n               2\n.MNOTE2  MNOTE 4,'SECOND BASE REGISTER INVALID / IGNORED'\n         AGO   .TSTVDAT\n.SETB2   ANOP\n&B3      SETB  (1)\n.TSTVDAT USING *,15\n         AIF   ('&VERSN' EQ '' AND '&DATE' EQ '' AND '&ID' EQ '').NONME\n         AIF   ('&VERSN' EQ '').TSTDTE\n&LVN     SETA  K'&VERSN\n         AIF   (&LVN LE 8).SETVSN\n&LVN     SETA  8\n.SETVSN  ANOP\n&S       SETA  &S+1\n&LBL(&S) SETC  '&VERSN'(1,&LVN)\n&VLBL    SETC  '&LBL(&S)'\n.TSTDTE  AIF   ('&DATE' EQ '').TSTID\n&LDT     SETA  K'&DATE\n         AIF   ('&DATE'(1,1) EQ '''' AND '&DATE'(&LDT,1) EQ '''').STL1A\n&L1      SETA  1\n&L2      SETA  0\n         AGO   .TSLOOP1\n.STL1A   AIF   (&LDT LE 2).DTER1\n&L1      SETA  2\n&L2      SETA  0\n&B5      SETB  (1)\n&LDT     SETA  &LDT-2\n.TSLOOP1 AIF   (&B5).TSCNTR1\n         AIF   (&L1 GT &LDT).EXLOOP1\n         AGO   .TB41\n.TSCNTR1 AIF   (&L1-1 GT &LDT).EXLOOP1\n.TB41    AIF   (&B4).TLSTCH1\n         AIF   ('&DATE'(&L1,1) EQ '''' OR '&DATE'(&L1,1) EQ '&AMP'(1,1)*\n               ).STB41\n.SETL2B  ANOP\n&L2      SETA  &L2+1\n.SETL1B  ANOP\n&L1      SETA  &L1+1\n         AIF   (&L2 EQ 20).EXLOOP1\n         AGO   .TSLOOP1\n.STB41   ANOP\n&B4      SETB  (1)\n         AGO   .SETL1B\n.TLSTCH1 AIF   ('&DATE'(&L1,1) NE '&DATE'(&L1-1,1)).DTER2\n&B4      SETB  (0)\n         AGO   .SETL2B\n.DTER1   MNOTE 4,'INVALID SPEC. FOR DATE KEYWORD - IGNORED'\n&LDT     SETA  0\n         AGO   .TSTID\n.DTER2   MNOTE 4,'UNPAIRED QUOTE  OR AMPERSAND IN DATE SPEC. IGNORED'\n&LDT     SETA  0\n         AGO   .TSTID\n.EXLOOP1 AIF   (&B4).DTER2\n&L1      SETA  &L1-1\n         AIF   (NOT &B5).STLDT1\n&L1      SETA  &L1-1\n.STLDT1  ANOP\n&LDT     SETA  &L2\n         AIF   (&LVN EQ 0).NOVN\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LVN     SETA  &LVN+1\n.NOVN    ANOP\n&L2      SETA  0\n         AIF   (NOT &B5).DTECNT\n&L2      SETA  1\n.DTECNT  ANOP\n         AIF   (&L1 EQ 0).TSTID\n&S       SETA  &S+1\n         AIF   (&L1 GT 8).SPLT1\n&LBL(&S) SETC  '&DATE'(&L2+1,&L1)\n         AGO   .TSTID\n.SPLT1   ANOP\n&LBL(&S) SETC  '&DATE'(&L2+1,8)\n&L1      SETA  &L1-8\n&L2      SETA  &L2+8\n         AGO   .DTECNT\n.TSTID   AIF   ('&ID' EQ '').SETBRD1\n         AIF   ('&ID' EQ '*').DEFID\n&LID     SETA  K'&ID\n&B4      SETB  (0)\n&B5      SETB  (0)\n         AIF   ('&ID'(1,1) EQ '''' AND '&ID'(&LID,1) EQ '''').STL1C\n&L1      SETA  1\n&L2      SETA  0\n         AGO   .TSLOOP2\n.STL1C   AIF   (&LID LE 2).IDER1\n&L1      SETA  2\n&L2      SETA  0\n&B5      SETB  (1)\n&LID     SETA  &LID-2\n.TSLOOP2 AIF   (&B5).TSCNTR2\n         AIF   (&L1 GT &LID).EXLOOP2\n         AGO   .TB42\n.TSCNTR2 AIF   (&L1-1 GT &LID).EXLOOP2\n.TB42    AIF   (&B4).TLSTCH2\n         AIF   ('&ID'(&L1,1) EQ '''' OR '&ID'(&L1,1) EQ '&AMP'(1,1)).ST*\n               B42\n.SETL2C  ANOP\n&L2      SETA  &L2+1\n.SETL1D  ANOP\n&L1      SETA  &L1+1\n         AIF   (&L2 EQ 20).EXLOOP2\n         AGO   .TSLOOP2\n.STB42   ANOP\n&B4      SETB  (1)\n         AGO   .SETL1D\n.TLSTCH2 AIF   ('&ID'(&L1,1) NE '&ID'(&L1-1,1)).IDER2\n&B4      SETB  0\n         AGO   .SETL2C\n.IDER1   MNOTE 4,'INVALID SPEC FOR ID KEYWORD - IGNORED'\n&LID     SETA  0\n         AGO   .SETBRD1\n.IDER2   MNOTE 4,'UNPAIRED QUOTE  OR AMPERSAND IN ID SPEC. IGNORED'\n&LID     SETA  0\n         AGO   .SETBRD1\n.EXLOOP2 AIF   (&B4).IDER2\n&L1      SETA  &L1-1\n         AIF   (NOT &B5).STLID1\n&L1      SETA  &L1-1\n.STLID1  ANOP\n&LID     SETA  &L2\n         AIF   (&LVN EQ 0 AND &LDT EQ 0).SETL1\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LDT     SETA  &LDT+1\n         AGO   .SETL1\n.DEFID   AIF   (&B1 OR &B2).TLDT\n&LID     SETA  0\n         AGO   .SETBRD1\n.TLDT    AIF   (&LVN EQ 0 AND &LDT EQ 0).NODT\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LDT     SETA  &LDT+1\n.NODT    ANOP\n&S       SETA  &S+1\n         AIF   (&B2).SETID1\n&LBL(&S) SETC  '&SYSECT'\n         AGO   .KNAME\n.SETID1  ANOP\n&LBL(&S) SETC  '&CSECTNM'\n.KNAME   ANOP\n&LID     SETA  1\n.KNAME2  AIF   ('&LBL(&S)'(1,&LID) EQ '&LBL(&S)').SETBRD1\n&LID     SETA  &LID+1\n         AGO   .KNAME2\n.SETL1   ANOP\n&L2      SETA  0\n         AIF   (NOT &B5).IDCNT\n&L2      SETA  1\n.IDCNT   ANOP\n         AIF   (&L1 EQ 0).SETBRD1\n&S       SETA  &S+1\n         AIF   (&L1 GT 8).SPLT2\n&LBL(&S) SETC  '&ID'(&L2+1,&L1)\n         AGO   .SETBRD1\n.SPLT2   ANOP\n&LBL(&S) SETC  '&ID'(&L2+1,8)\n&L1      SETA  &L1-8\n&L2      SETA  &L2+8\n         AGO   .IDCNT\n.SETBRD1 ANOP\n&L2      SETA  1                        EYE-CATCHER LEN DC   NJS FEB 80\n&L1      SETA  4+2*((&L2+&LVN+&LDT+&LID+1)/2)                NJS FEB 80\n         AIF   (&L1 EQ 6).SETSTM        I.E. IF BRANCH INSTR NJS FEB 80\n.*                                      + E-C LENGTH DC ONLY NJS FEB 80\n         B     *+&L1\n&L2      SETA  (&LVN+&LDT+&LID)         ACTUAL E-C LENGTH    NJS FEB 80\n.*                                      E-C LEN FOR DUMPS    NJS FEB 80\n         DC    AL1(&L2)\n         DC    C'&LBL(1).&LBL(2).&LBL(3).&LBL(4).&LBL(5).&LBL(6).&LBL(7*\n               ).&LBL(8).&LBL(9)'\n         AGO   .NOCONST\n.NONME   AIF   (&B2 EQ 0).NOCONST\n         B     14(0,15)                                      NJS FEB 80\n         DC    AL1(8)                   E-C LEN FOR DUMPS    NJS FEB 80\n         DC    CL8'&CSECTNM'\n.NOCONST ANOP\n         AIF   ('&VLBL' EQ '').SETSTM\n         ENTRY &VLBL\n.SETSTM  ANOP\n&VLBL    STM   14,12,12(13)\n         AIF   (T'&LDSA EQ 'N').TSTZR0\n         AIF   (T'&LDSA NE 'U').INVLDSA\n         AIF   ('&RE' EQ 'YES').ULDSA\n         MNOTE 4,'LDSA TYPE=U NOT VALID UNLESS RE=YES - 72 SUBSTITUTED'\n         AGO   .L72\n.ULDSA   ANOP\n         MNOTE 4,'LDSA TYPE=U, EQU ASSUMED, WILL ROUND UNCHECKED VALUE'\n&B7      SETB  (1)\n         AGO   .TSTRENT\n.INVLDSA ANOP\n         MNOTE 4,'LDSA NOT SPECIFIED OR INVALID 72 SUBSTITUTED'\n         AGO   .L72\n.TSTZR0  AIF   (&LDSA NE 0).TESTL\n         AIF   (&BASE1 EQ 13).TESTL\n&L       SETA  0\n         AGO   .NORENT\n.TESTL   AIF    (&LDSA LE 71).SET72\n         AIF   (&LDSA GT 4064).SET4064\n&L       SETA  &LDSA\n         AGO   .TSTRENT\n.SET72   ANOP\n         MNOTE 4,'LDSA SPECIFIED IS LESS THAN 72 - 72 PROVIDED'\n.L72     ANOP\n&L       SETA  72\n         AGO   .TSTRENT\n.SET4064 ANOP\n         MNOTE 4,'LDSA GIVEN IS GREATER THAN 4064 - 4064 PROVIDED'\n&L       SETA  4064\n.TSTRENT ANOP\n         AIF   ('&RE' EQ 'NO').NORENT\n         AIF   ('&RE' EQ 'YES').RENT\n         MNOTE 4,'RE SPECIFICATION INVALID - RE=NO ASSUMED'\n         AGO   .NORENT\n.RENT    MNOTE *,'RE-ENTRANT FORM OF MACRO SPECIFIED'\n         AIF   (&SP LE 255).SPOK\n         MNOTE 4,'SUBPOOL SPECIFIED GREATER THAN 255 - 0 ASSUMED'\n&SUBPOOL SETA  0\n         AGO   .SPSET\n.SPOK    ANOP\n&SUBPOOL SETA  &SP\n.SPSET   ANOP\n         AIF   (&B7).EQULDSA\n         LA    2,&L\n         AGO   .RNDLDSA\n.EQULDSA ANOP\n         LA    2,&LDSA\n.RNDLDSA ANOP\n         LA    2,7(2)\n         LA    0,4088\n         NR    2,0\n         LA    2,8(2)\n         LR    0,2\n         LA    2,&SUBPOOL\n         SLL   2,24\n         OR    0,2\n         LR    2,0\n         GETMAIN R,LV=(0)\n         ST    2,0(1)\n         ST    1,4(1)\n         XC    8(4,1),8(1)\n         ST    13,12(1)\n         LA    1,8(1)\n         ST    1,8(13)\n         LR    13,1\n         L     1,4(13)\n         LM    0,2,20(1)\n         AGO   .SETBASE\n.NORENT  ANOP\n         MNOTE *,'NON-RE-ENTRANT FORM OF MACRO USED'\n         AIF   (&L EQ 0).SETBASE\n&L1      SETA  4+2*((&L+1)/2)\n&L2      SETA  &L1+20\n         CNOP  4,8\n         BAL   1,*+&L1\n         DS    CL&L\n         XC    0(4,1),0(1)\n         ST    13,4(1)\n         ST    1,8(13)\n         LR    13,1\n         L     1,4(13)\n         LM    1,2,24(1)\n.SETBSES ANOP\n         AIF   (&BASE1 NE 13).SETBASE\n         AIF   (&B3).TWOBSES\n         USING *-&L2,&BASE1\n         AGO   .TSTEQU\n.TWOBSES USING *-&L2,&BASE1,&BASE2\n         LA    &BASE2,4095(&BASE1)\n         LA    &BASE2,1(&BASE2)\n         AGO   .TSTEQU\n.SETBASE BALR  &BASE1,0\n         AIF   (&B3).TWOREGS\n         USING *,&BASE1\n         AGO   .TSTEQU\n.TWOREGS USING *,&BASE1,&BASE2\n         LA    &BASE2,4095(&BASE1)\n         LA    &BASE2,1(&BASE2)\n.TSTEQU  ANOP\n         DROP  15\n         AIF   ('&EQUATE' EQ 'NO').TSTBIT\n         AIF   ('&EQUATE' EQ 'YES').EQU\n         MNOTE 4,'EQUATE SPECIFICATION INVALID - YES ASSUMED'\n.EQU     ANOP\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.TSTBIT  AIF   ('&BITEQU' EQ 'NO').END\n         AIF   ('&BITEQU' EQ 'YES').EQUBIT\n         MNOTE 4,'BIT EQUATE SPEC. INVALID - YES ASSUMED'\n.EQUBIT  ANOP\nBIT0     EQU   128\nBIT1     EQU    64\nBIT2     EQU    32\nBIT3     EQU    16\nBIT4     EQU     8\nBIT5     EQU     4\nBIT6     EQU     2\nBIT7     EQU     1\n.END     ANOP\n         AIF   (&B6).EXIT\n         POP   PRINT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A02SOAK": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x90\\x03\\x0f\\x00\\x90\\x03\\x0f\\x113\\x00\\x1e\\x00\\x1a\\x00\\x05\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-01-30T00:00:00", "modifydate": "1990-01-30T11:33:01", "lines": 30, "newlines": 26, "modlines": 5, "user": "UOTXMJT"}, "text": "//UTXMTCPU JOB (UOTXMJT,M),\n//             'CPU SOAK ASM LINK   ',\n//             CLASS=A,MSGCLASS=B,\n//             NOTIFY=UOTXMJT\n//*\n//* REFER TO UOTXMJT.GUIDE.GOODIES(JCLSOAK)\n//*\n//* THIS PROGRAM RELIES ON ACF2 BEING PRESENT IN YOUR SYSTEM.\n//*\n//A       EXEC PGM=IEV90,\n//             PARM='OBJECT,NODECK,TERM'\n//SYSPRINT DD  SYSOUT=H,DCB=(RECFM=FBM,BLKSIZE=1331)\n//SYSTERM  DD  SYSOUT=H,DCB=(RECFM=FBM,BLKSIZE=1331)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1                                      OS 9/86\n//SYSLIB   DD  DISP=SHR,DSN=UOTXMJT.GUIDE.GOODIES,DCB=BLKSIZE=7440\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS1.ACFMAC\n//SYSLIN   DD  DSN=&&LOADSET,SPACE=(CYL,(1,1)),DISP=(MOD,PASS),\n//             UNIT=SYSDA\n//SYSIN    DD  DSN=UOTXMJT.GUIDE.GOODIES(Z3426),DISP=SHR\n//*\n//L       EXEC PGM=IEWL,PARM='LIST,XREF,MAP,AC=1'\n//SYSPRINT DD  SYSOUT=H,DCB=BLKSIZE=1210,SPACE=(TRK,(5,5))\n//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=(SYSDA,SEP=SYSPRINT)\n//SYSLMOD  DD  DSN=UOTXMJT.LOAD(Z3426),DISP=SHR\n//SYSLIN   DD  DSN=&&LOADSET,DISP=SHR\n//SYSLIB   DD  DSN=SYS1.ACFMOD,DISP=SHR\n//SOURCE   DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A02VARS": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x90\\x01_\\x00\\x90\\x03\\x0f\\x15Y\\x00\\x1a\\x00\\x17\\x00\\n\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-01-15T00:00:00", "modifydate": "1990-01-30T15:59:01", "lines": 26, "newlines": 23, "modlines": 10, "user": "UOTXMJT"}, "text": "//UTXMTLNK JOB (UOTXMJT,M),\n//             'ASSEMBLE Z7504      ',\n//             CLASS=A,MSGCLASS=B,\n//             NOTIFY=UOTXMJT\n//*\n//* REFER TO UOTXMJT.GUIDE.GOODIES(JCLVARS)\n//*\n//A       EXEC PGM=IEV90,\n//             PARM='OBJECT,NODECK,TERM'\n//SYSPRINT DD  SYSOUT=H,DCB=(RECFM=FBM,BLKSIZE=1331)\n//SYSTERM  DD  SYSOUT=H,DCB=(RECFM=FBM,BLKSIZE=1331)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1                                      OS 9/86\n//SYSLIB   DD  DISP=SHR,DSN=UOTXMJT.GUIDE.GOODIES,DCB=BLKSIZE=7440\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SYSLIN   DD  DSN=&&LOADSET,SPACE=(CYL,(1,1)),DISP=(MOD,PASS),\n//             UNIT=SYSDA\n//SYSIN    DD  DSN=UOTXMJT.GUIDE.GOODIES(Z7504),DISP=SHR\n//*\n//L       EXEC PGM=IEWL,PARM='LIST,XREF,MAP,NCAL,RENT'\n//SYSPRINT DD  SYSOUT=H,DCB=BLKSIZE=1210,SPACE=(TRK,(5,5))\n//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=(SYSDA,SEP=SYSPRINT)\n//SYSLMOD  DD  DSN=UOTXMJT.LOAD(Z7504),DISP=SHR\n//SYSLIN   DD  DSN=&&LOADSET,DISP=SHR\n//SOURCE   DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A02ZOOM": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x90\\x01_\\x00\\x90\\x01_\\x163\\x00h\\x00h\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-15T00:00:00", "modifydate": "1990-01-15T16:33:01", "lines": 104, "newlines": 104, "modlines": 0, "user": "UOTXMJT"}, "text": "/**********************************************************************/\n/*                                                                    */\n/* Title:  ZOOM                                                       */\n/* Author: Rob Mellor, Systems Programming Group, LOLA                */\n/* Date:   12th October 1989                                          */\n/*                                                                    */\n/* Doc:    By placing the cursor on a JCL card containing an EXEC     */\n/*         statement, and issueing the ZOOM command, this edit macro  */\n/*         will 'zoom in' on (ie. display in browse) the JCL proc     */\n/*         featured on the statement.                                 */\n/*                                                                    */\n/*         This command is most useful when defined to a PF key,      */\n/*         thus leaving the cursor free to move to the line           */\n/*         containing the EXEC statement.                             */\n/*                                                                    */\n/* NOTE==> You must customise this macro to reflect the Proclibs      */\n/*         used at your shop. These should be obtained from your      */\n/*         installation's JES2 procedure (make sure you use the       */\n/*         right concatenation if more than one exists).              */\n/*                                                                    */\n/* Parms:  DEBUG  -  display clist statements during execution.       */\n/*                                                                    */\n/**********************************************************************/\n  ISREDIT MACRO ( DEBUG )\n/*------------------------------------------*/\n  CONTROL NOFLUSH END(ENDO)\n  IF &SYSCAPS(&DEBUG) = DEBUG THEN +\n    CONTROL LIST CONLIST SYMLIST MSG PROMPT\n  ELSE +\n    CONTROL NOPROMPT NOMSG\n  ISPEXEC CONTROL DISPLAY REFRESH\n/*------------------------------------------*/\n\n  ISREDIT (SYSDVAL) = LINE .ZCSR\n  READDVAL DUMMY FUNCTION MEMBER\n\n  IF &STR(&FUNCTION) = EXEC THEN +\n    DO\n    IF &LENGTH(&STR(&MEMBER)) >= 4 THEN +\n      IF &SUBSTR(1:4,&STR(&MEMBER)) = &STR(PGM=) THEN +\n        GOTO ERR\n      ELSE +\n        GOTO PROCLIB\n    ENDO\n  ELSE +\n    DO\nERR:+\n    SET &ZEDSMSG = &STR(Invalid card type.)\n    SET &ZEDLMSG = &STR(Clist &SYSICMD only works on EXEC +\n                   procedure cards.)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12)\n    ENDO\n\n/*--------------------------------------------------------------------*/\n/* NOTE==> You must customise this list to reflect the Proclibs       */\n/*         used at your shop. These should be obtained from your      */\n/*         installation's JES2 procedure (make sure you use the       */\n/*         right concatenation if more than one exists).              */\n/*--------------------------------------------------------------------*/\nPROCLIB:+\n  SET PROC1  = SYS1.PROCLIB\n  SET PROC2  = ESYS1.PROCLIB\n  SET PROC3  = IPO1.PROCLIB\n  SET PROC4  = IMS1.L130.PROCLIB\n  SET PROC5  = IMS1.LV1.PROCLIB\n  SET PROC6  = SG1.PROCLIB\n  SET PROC7  = OPS1.PROCLIB\n  SET PROC8  = IMS2.L130.PROCLIB\n  SET PROC9  = IMS2.LV1.PROCLIB\n  SET PROC10 = LOLA2.PROCLIB\n  SET PROC11 = SG1.MKV50.PROCLIB\n  SET PROC12 = E.PROCLIB\n  SET PROC13 = STC1.PROCLIB\n  SET PROC14 = STC2.PROCLIB\n  SET PROC15 = TSO1.PROCLIB\n  SET PROC16 = TSO2.PROCLIB\n\n/*--------------------------------------------------------------------*/\n/* NOTE==> Set MAXNUM to the total number of Proclibs listed above.   */\n/*--------------------------------------------------------------------*/\n  SET &MAXNUM = 16\n\nSEARCH:+\n  SET &FOUND = NO\n  SET &PROC = &&PROC\n  DO &I = 1 TO &MAXNUM UNTIL &FOUND = YES\n     IF &SYSDSN('&STR(&PROC&I)(&MEMBER)') = OK THEN +\n        SET &FOUND = YES\n  ENDO\n\n  IF &FOUND = YES THEN +\n     DO\n     SET &DSN = &STR(&PROC&I(&MEMBER))\n     ISPEXEC BROWSE DATASET('&DSN')\n     ENDO\n  ELSE +\n     DO\n     SET &ZEDSMSG = &STR(Proc not found)\n     SET &ZEDLMSG = &STR(Member &MEMBER could not be found in any +\n                    JCL procedure library)\n     ISPEXEC SETMSG MSG(ISRZ001)\n     ENDO\n  EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A02Z3426": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00\\x05\\x00\\x01\\x00\\x89\"o\\x00\\x91\\x02\\x1f\\x11C\\x03\\x82\\x00\\x00\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "00.05", "flags": 0, "createdate": "1989-08-14T00:00:00", "modifydate": "1991-01-21T11:43:01", "lines": 898, "newlines": 0, "modlines": 0, "user": "UOTXMJT"}, "text": "Z3426    TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - MODULE PROLOGUE'\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* ID:          Z3426  CPU SOAK PROGRAM.                               *\n*                                                                     *\n* DESCRIPTION: THIS PROGRAM IS STARTED ON BOTH CPU'S AND WILL SOAK UP *\n*              A PERCENTAGE OF THE CPU ACCORDING TO THE OS PARM VALUES*\n*              SPECIFIED.                                             *\n*                                                                     *\n*              A STOP/MODIFY COMMAND FACILITY IS PROVIDED TO ALLOW    *\n*              ACF2 AUTHORISED PERSONNEL THE ABILITY TO  STOP OR      *\n*              CHANGE THE VALUES WHILE IT IS ACTIVE.                  *\n*                                                                     *\n* TASKS:       1. SETUP - INCLUDING GETMAIN STORAGE REQUIRED.         *\n*                                                                     *\n*              2. SET UP FOR STOP/MODIFY PROCESSING.                  *\n*                                                                     *\n*              3. VALIDATE PARM FIELD OR VALUES PASSED VIA MODIFY     *\n*                 COMMAND AND SET UP CYCLE VALUES.                    *\n*                                                                     *\n*              4. SET STIMER FOR WAIT TIME AND WAIT.                  *\n*                                                                     *\n*              5. SET STIMER FOR BUSY TIME AND LOOP UNTIL STIMER      *\n*                 POPS.                                               *\n*                                                                     *\n*              6. CHECK FOR STOP/MODIFY COMMAND AT VARIOUS POINTS.    *\n*                                                                     *\n*              7.  ASK OPERATOR FOR HIS LOGONID AND PASSWROD.         *\n*                                                                     *\n*              8.  OBTAIN THE OPERATOR'S ACF2 LOGONID RECORD AND      *\n*                  CHECK FOR THE REFRESH ATTRIBUTE.                   *\n*                                                                     *\n*              9.  EITHER WTOR HIM TO SAY NOT AUTHORISED OR VALIDATE  *\n*                  VALUES SPECIFIED IN COMMAND. ISSUE WTO WITH NEW    *\n*                  VALUES.                                            *\n*                                                                     *\n*              10. IF STOP COMMAND THEN WTO AND STOP.                 *\n*                                                                     *\n*                                                                     *\n*     THE PARM VALUES SPECIFIED ARE 'TOTAL CYCLE TIME,BUSY TIME'      *\n*                                                                     *\n*     IF RUN WITH PARM='18000,190' THIS PROGRAM WILL SOAK APPROX      *\n*     1% OF THE CPU.                                                  *\n*                                                                     *\n*     THIS PROGRAM SHOULD BE NON-CANCELLABLE,NON-SWAPPABLE AND RUN    *\n*     WITH A HIGH DISPATCHING PRIORITY.                               *\n*                                                                     *\n*     TO MODIFY THE PARM VALUES USE 'F XXXXX,TTTTT,BBB' WHERE         *\n*                                                                     *\n*                     XXXXX = STARTED TASK NAME                       *\n*                     TTTTT = TOTAL CYCLE TIME                        *\n*                     BBB   = PROGRAM BUSY TIME                       *\n*                                                                     *\n*     TO STOP THIS PROGRAM USE 'P XXXXX' WHERE XXXXX IS THE STARTED   *\n*     TASK NAME.                                                      *\n*                                                                     *\n*     BOTH THE MODIFY AND STOP COMMANDS REQUIRE AN AUTHORISED ACF2    *\n*     LOGONID AND PASSWORD TO BE ENTERED BEING BEING ACTIONED. THE    *\n*     LOGONID MUST HAVE THE ATTRIBUTE REFRESH.                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ENTRY INTFCE:R1 POINTS TO OS PARM FIELD.                            *\n*                                                                     *\n* EXIT INTFCES:1. N/A                                                 *\n*                                                                     *\n* RETURN CODES:   N/A                                                 *\n*                                                                     *\n* REG USAGE:   R0  -  SYSTEM AND TEMP USE                             *\n*              R1  -> OS PARM ON ENTRY/ TEMP USE                      *\n*              R2  - WORK                                             *\n*              R3  - PARM POINTER\n*              R4  - WORK                                             *\n*              R5  -> CIB ADDRESS                                     *\n*              R6  - WORK                                             *\n*              R7  - WORK                                             *\n*              R8  -> MODIFY ECB ADDRESS                              *\n*              R9  - ADDRESS OF WTO MESSAGES                          *\n*              R10 - LINKAGE REGISTER                                 *\n*              R11 - SECOND BASE REGISTER                             *\n*              R12 - BASE REGISTER                                    *\n*              R13 - SAVE AREA                                        *\n*              R14 - RETURN ADDRESS                                   *\n*              R15 - RETURN CODE                                      *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z3426    MESSAGES                                                   *\n*                                                                     *\n*           Z3426A NO PARAMETERS SPECIFIED                            *\n*                                                                     *\n*           EXPLANATION: THE STARTED TASK JCL PROCEDURE DOES NOT      *\n*                        SPECIFY ANY PARAMETERS.                      *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426B UNBALANCED PARENTHESES IN PARM FIELD               *\n*                                                                     *\n*           EXPLANATION: UNBALANCED PARENTHESES IN THE PARAMETER      *\n*                        FIELD.                                       *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426C ONLY ONE PARAMETER FOUND - TWO REQUIRED            *\n*                                                                     *\n*           EXPLANATION: BOTH THE TOTAL CYCLE TIME AND THE BUSY       *\n*                        TIME ARE REQUIRED.                           *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426D PARM FIELD CONTAINS NON-NUMERICS                   *\n*                                                                     *\n*           EXPLANATION: THE TOTAL CYCLE TIME AND THE BUSY TIME       *\n*                        ARE NUMERIC FIELDS.                          *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426E INVALID PARAMETER LENGTH                           *\n*                                                                     *\n*           EXPLANATION: THE TOTAL CYCLE TIME AND THE BUSY TIME       *\n*                        MUST EACH BE NO LONGER THAN SIX CHARACTERS.  *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426F PARAMETER OUT OF RANGE 1 - 999999                  *\n*                                                                     *\n*           EXPLANATION: THE TOTAL CYCLE TIME AND THE BUSY TIME       *\n*                        MUST BE IN THE RANGE 1 TO 999999.            *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: EITHER CORRECT THE START COMMAND OR      *\n*                            INFORM TECHNICAL SERVICES IF THE JCL     *\n*                            PROCEDURE IS INCORRECT.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426G START CIB NOT FREED                                *\n*                                                                     *\n*           EXPLANATION: THE MODIFY SET UP ROUTINE COULD NOT FREE     *\n*                        THE START COMMAND INPUT BUFFER.              *\n*                                                                     *\n*           SYSTEM ACTION: PROGRAM ABENDS WITH USER 1.                *\n*                                                                     *\n*           OPERATOR ACTION: INFORM TECHNICAL SERVICES.               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426H UNKNOWN CIBVERB                                    *\n*                                                                     *\n*           EXPLANATION: THE MODIFY CHECK ROUTINE DETECTED AN         *\n*                        INVALID CIBVERB. THE ONLY ALLOWABLE ONES     *\n*                        ARE MODIFY OR STOP.                          *\n*                                                                     *\n*           SYSTEM ACTION: MODIFY COMMAND IS IGNORED AND THE          *\n*                          PROGRAM CONTINUES.                         *\n*                                                                     *\n*           OPERATOR ACTION: CORRECT THE MODIFY COMMAND AND INFORM    *\n*                            TECHNICAL SERVICES IF THIS STILL OCCURS. *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426I ENTER AN AUTHORISED LOGONID                        *\n*                                                                     *\n*           EXPLANATION: A REQUEST FOR AN AUTHORISED LOGONID. THIS    *\n*                        LOGONID WILL BE CHECKED AGAINST ACF2 FOR     *\n*                        THE ABILITY TO ISSUE MODIFY COMMANDS.        *\n*                                                                     *\n*           SYSTEM ACTION: WAITS FOR LOGONID TO BE ENTERED            *\n*                                                                     *\n*           OPERATOR ACTION: REPLY WITH A VALID LOGONID.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426J ENTER YOUR PASSWORD                                *\n*                                                                     *\n*           EXPLANATION: A REQUEST FOR YOUR PASSWORD. THIS WILL BE    *\n*                        CHECKED AGAINST ACF2 FOR VALIDITY.           *\n*                                                                     *\n*           SYSTEM ACTION: WAITS FOR PASSWORD TO BE ENTERED.          *\n*                                                                     *\n*           OPERATOR ACTION: REPLY WITH YOUR PASSWORD.                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426V XXXXXXXX HAS BEEN STOPPED BY LID YYYYYYYY          *\n*                                                                     *\n*           EXPLANATION: THE CPU SOAK TASK HAS BEEN STOPPED BY THE    *\n*                        AUTHORISED LOGONID.                          *\n*                                                                     *\n*           SYSTEM ACTION: THE PROGRAM STOPS.                         *\n*                                                                     *\n*           OPERATOR ACTION: NONE.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426W XXXXXXXX NOT AUTHORISED TO MODIFY YYYYYYYY         *\n*                                                                     *\n*           EXPLANATION: THE LOGONID IS NOT AUTHORISED TO MODIFY THE  *\n*                        CPU SOAK TASK. IF THIS MESSAGE IS PRECEDED   *\n*                        BY ACF01200 INVALID PASSWORD AUTHORITY FOR   *\n*                        LOGONID XXXXXXX, THE PASSWORD WAS ENTERED    *\n*                        INCORRECTLY.                                 *\n*                                                                     *\n*           SYSTEM ACTION: THE PROGRAM CONTINUES.                     *\n*                                                                     *\n*           OPERATOR ACTION: NONE.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426X BUSY TIME XXXXXX IS MORE THAN 80% OF TOTAL CYCLE   *\n*                  TIME YYYYYY.                                       *\n*                                                                     *\n*           EXPLANATION: THE BUSY TIME IS NOT ALLOWED TO BE MORE THAN *\n*                        80% OF THE TOTAL CYCLE TIME.                 *\n*                                                                     *\n*           SYSTEM ACTION: IF THE VALUES ARE INCORRECT AT THE START   *\n*                          OF THE PROGRAM, IT WILL ABEND WITH USER 1. *\n*                                                                     *\n*                          IF THE VALUES WERE SPECIFIED INCORRECTLY   *\n*                          VIA A MODIFY COMMAND, THE PROGRAM CONTINUES*\n*                          WITH THE LAST SET OF VALIDATED VALUES.     *\n*                                                                     *\n*                          MESSAGE Z IS ISSUED FOLLOWING THIS MESSAGE *\n*                          SHOWING THE VALUES IN USE.                 *\n*                                                                     *\n*           OPERATOR ACTION: CORRECT THE SPECIFIED PARM VALUES.       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426Y BUSY TIME XXXXXX IS GREATER THAN THE TOTAL CYCLE   *\n*                  TIME YYYYYY.                                       *\n*                                                                     *\n*           EXPLANATION: THE BUSY TIME IS NOT ALLOWED TO BE GREATER   *\n*                        THAN THE TOTAL CYCLE TIME.                   *\n*                                                                     *\n*           SYSTEM ACTION: IF THE VALUES ARE INCORRECT AT THE START   *\n*                          OF THE PROGRAM, IT WILL ABEND WITH USER 1. *\n*                                                                     *\n*                          IF THE VALUES WERE SPECIFIED INCORRECTLY   *\n*                          VIA A MODIFY COMMAND, THE PROGRAM CONTINUES*\n*                          WITH THE LAST SET OF VALIDATED VALUES.     *\n*                                                                     *\n*                          MESSAGE Z IS ISSUED FOLLOWING THIS MESSAGE *\n*                          SHOWING THE VALUES IN USE.                 *\n*                                                                     *\n*           OPERATOR ACTION: CORRECT THE SPECIFIED PARM VALUES.       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*           Z3426Z VALUES IN USE - WAIT TIME: XXXXXX BUSY TIME: YYYYYY*\n*                                                                     *\n*           EXPLANATION: INFORMATIONAL MESSAGE SHOWING THE VALUES     *\n*                        THAT ARE IN USE.                             *\n*                                                                     *\n*           SYSTEM ACTION: NONE                                       *\n*                                                                     *\n*           OPERATOR ACTION: NONE.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ABENDS:      USER 1 ABEND ACCOMPANIED BY ONE OF THE ABOVE MESSAGES. *\n*                                                                     *\n*              USER 2 ABEND IF ACF2 IS NOT ACTIVE.                    *\n*                                                                     *\n* NOTES:       1. THIS PROGRAM HAS BEEN WRITTEN WITH RE-ENTRANCY IN   *\n*                 MIND. HOWEVER IT IS NOT TOTALLY RE-ENTRANT.         *\n*                                                                     *\n*              2. MUST BE RMODE 24 AND AMODE 24.                      *\n*                                                                     *\n*              3. MUST BE NON-SWAPPABLE AND NON-CANCELABLE.           *\n*                 THIS IS ACHIEVED VIA PARMLIB MEMBER SCHED00.        *\n*                                                                     *\n*              4. ITS PERFORMANCE GROUP AND DISPATCHING PRIORITY      *\n*                 MUST BE FIXED TO SPG'S RECOMMENDATIONS.             *\n*                                                                     *\n* VERSION:     00 -  MJT  - 09.01.90   ORIGINAL VERSION               *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - SET UP'\nZ3426    SETUP DATE='\u00a2DATEACS',                                        *\n               12,11,RE=YES,LDSA=WALEN\nZ3426    AMODE 24\nZ3426    RMODE 24\n*                                       +--------------------------+\n*                                       |  ADDRESS WORK AREA AND   |\n*                                       |  CLEAR IT WITH THE       |\n*                                       |  EXCEPTION OF THE SAVE   |\n*                                       |  AREA.                   |\n*                                       |  MOVE IN EYECATCHER      |\n*                                       +--------------------------+\n         USING WORKAREA,R13\n         LA    R2,WACLEAR\n         LA    R3,WACLRLEN\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R2,R14\n         MVC   WAEYE,=CL8'WORKAREA'\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  CALL STOP/MODIFY ROUTINE|\n*                                       |  AND ABEND IF PROBLEMS   |\n*                                       +--------------------------+\n         L     R3,0(R1)                 R3 -> OS PARM\n         BAL   R10,MODSETUP\n         LTR   R15,R15\n         BZ    PROCPARM\n         BAL   R10,ISSUEWTO\n         ABEND 1\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  CALL PARM ANALYSIS RTNE |\n*                                       |  AND ABEND IF PROBLEMS   |\n*                                       +--------------------------+\nPROCPARM DS    0H\n         BAL   R10,PARMANAL             BRANCH TO PARM ANALYSIS\n         LTR   R15,R15                  TEST COND CODE\n         BZ    PROCMSG                  OK CONTINUE\n         BAL   R10,ISSUEWTO             ELSE ISSUE ERROR MESSAGE\n         ABEND 1\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  ISSUE VALUES USED MSG   |\n*                                       +--------------------------+\nPROCMSG  DS    0H\n         LA    R9,MSGZ\n         BAL   R10,ISSUEWTO\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  CHECK FOR MODIFY        |\n*                                       |  ISSUE WAITTIME STIMER   |\n*                                       +--------------------------+\nWAITHERE DS    0H\n         BAL   R10,MODCHECK\n         LTR   R15,R15\n         BZ    STIMER1\n         BAL   R10,ISSUEWTO              ISSUE NOT AUTH MESSAGE\n         B     WAITHERE\n         SPACE 1\nSTIMER1  DS    0H\n         STIMER WAIT,MICVL=WAITTIME\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  CHECK FOR MODIFY        |\n*                                       |  ISSUE BUSYTIME STIMER   |\n*                                       +--------------------------+\nGETBUSY  DS    0H\n         BAL   R10,MODCHECK\n         LTR   R15,R15\n         BZ    STIMER2\n         BAL   R10,ISSUEWTO              ISSUE NOT AUTH MESSAGE\n         B     GETBUSY\nSTIMER2  DS    0H\n         NI    SWITCH,X'FF'-SWTIMEUP     SWITCH OFF TIMEUP\n         STIMER REAL,EXITRTN,MICVL=BUSYTIME\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  LOOP UNTIL STIMER EXIT  |\n*                                       |  ROUTINE TURNS ON SWITCH |\n*                                       +--------------------------+\nTESTSW   DS    0H\n         TM    SWITCH,SWTIMEUP\n         BO    WAITHERE\n         B     TESTSW\n*                                       +--------------------------+\n*                                       |  RETURN TO OS            |\n*                                       +--------------------------+\nRETURN   DS    0H\n         CLEAR RE=YES\n         SPACE 2\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - SET UP MODIFY/STOP SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*  SET UP MODIFY/STOP SUBROUTINE                                      *\n*  =============================                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nMODSETUP DS    0H\n         LA    R8,EXTRCTWD\n         EXTRACT (8),FIELDS=COMM\n         L     R8,EXTRCTWD\n         USING COMLIST,R8\n         L     R5,COMCIBPT\n         USING CIBNEXT,R5\n         CLI   CIBVERB,CIBSTART         IS IT CIB START?\n         BNE   MODSETCT                 NO THEN SET COUNT\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(5)\n         LTR   R15,R15\n         BZ    MODSETCT\n         LA    R9,MSGG\n         BR    R10\n         SPACE 2\nMODSETCT DS    0H\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=1\n         BR    R10\n         SPACE 2\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - CHECK FOR MODIFY SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*  CHECK FOR MODIFY SUBROUTINE                                        *\n*  ===========================                                        *\n*                                                                     *\n*  ON EXIT:-                                                          *\n*    R15 = 4 IF USER IS NOT AUTHORISED.                               *\n*    R9  -> MESSAGE TO BE ISSUED.                                     *\n*                                                                     *\n*    R15 = 0 IF USER IS AUTHORISED.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nMODCHECK DS    0H\n         SLR   R15,R15                  SET RETURN CODE TO ZERO\n         L     R2,COMECBPT              GET ECB ADDRESS\n         TM    0(R2),ECBPOST            CHECK IF POST BIT ON\n         BNOR  R10                      NO - THEN RETURN\n         SPACE 1\n         L     R5,COMCIBPT\n         BAL   R4,CALLACF2              YES - ISSUE WTORS AND CALL ACF2\n         LTR   R15,R15                  CHECK FOR AUTH\n         BZ    CHKCIB                   YES THEN SEE IF MOD OR STOP\n         LA    R9,MSGW                  NOT AUTHORISED MESSAGE\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(5) FREE THE CIB\n         LA    R15,4\n         BR    R10                      RETURN TO MAIN ROUTINE\n         SPACE 1\nCHKCIB   DS    0H\n         CLI   CIBVERB,CIBMODFY         IS IT MODIFY?\n         BE    PROCMDFY\n         CLI   CIBVERB,CIBSTOP          IS IT STOP?\n         BE    PROCSTOP\n         LA    R9,MSGH                  OTHERS = ERROR.\n         LA    R15,4\n         BR    R10                      RETURN TO MAIN CONTROL\n         SPACE 1\nPROCSTOP DS    0H\n         LA    R9,MSGV                  ISSUE STOP ACKNOWLEDGED MSG\n         BAL   R10,ISSUEWTO\n         B     RETURN                   AND RETURN TO OS\n         SPACE 1\nPROCMDFY DS    0H\n         LH    R6,CIBDATLN              GET LENGTH OF DATA\n         LA    R6,1(R6)                 ADD 1 TO MAKE LENGTH OF DATA\n*                                       INCLUDE LENGTH FIELD BUT ALLOW\n*                                       FOR EXECUTE INSTRUCTION.\n         EX    R6,CIBMOVE               MVC CIBSAVE(0),CIBDATLN\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(5) FREE THE CIB\n         LA    R3,CIBSAVE               R3 -> CIBSAVE LL + DATA\n         ST    R10,R10SAVE              SAVE R10\n         BAL   R10,PARMANAL             CHECK VALUES IN COMMAND\n         LTR   R15,R15                  CHECK PARMANAL RC\n         BZ    PROCMSGZ                 OK THEN GOOD MSG\n         BAL   R10,ISSUEWTO             ISSUE ERROR MSG FROM PARMANAL\nPROCMSGZ DS    0H\n         LA    R9,MSGZ\n         BAL   R10,ISSUEWTO\n         L     R10,R10SAVE              RESTORE R10\n         SLR   R15,R15\n         BR    R10\n         SPACE 2\nCIBMOVE  MVC   CIBSAVE(0),CIBDATLN\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - CALL ACF2'\n***********************************************************************\n*                                                                     *\n*  ISSUE WTORS AND CALL ACF2 SUBROUTINE                               *\n*  ====================================                               *\n*                                                                     *\n*   CALLED FROM MODCHECK SUBROUTINE.                                  *\n*                                                                     *\n*   R15 ON EXIT CAN BE RETURN CODE FROM ACF2 CALL (IF NON-ZERO)       *\n*       OR 0 - GOOD ACF2 RETURN AND REFRESH BIT ON                    *\n*       OR 4 - GOOD ACF2 RETURN AND REFRESH BIT NOT ON                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCALLACF2 DS    0H\n         MVC   WTORAREA(138),MSGI       MOVE LID WTOR TO WORKAREA\n         XC    WTORLID(20),WTORLID      CLEAR AREA BEFORE FIRST USE\n         LA    R6,WTORLID\n         LA    R7,WTORECB\n         WTOR  ,(6),,(7),MF=(E,WTORAREA)      ISSUE WTOR NOW\n         WAIT  ECB=WTORECB              WAIT FOR REPLY\n         SPACE 1\n         MVC   WTORAREA(138),MSGJ       MOVE PSD WTOR TO WORKAREA\n         XC    WTORECB,WTORECB          CLEAR ECB\n         LA    R6,WTORPSD\n         LA    R7,WTORECB\n         WTOR  ,(6),,(7),MF=(E,WTORAREA)      ISSUE WTOR NOW\n         WAIT  ECB=WTORECB              WAIT FOR REPLY\n         SPACE 1\n         XC    ACVALD(ACVLEN),ACVALD    CLEAR ACF2 BLOCK\n         MVI   ACVFCN,1\n         MVI   ACVSFCN,ACVSVALD\n         OI    ACVCNTL,ACVCIPSD+ACVCNACT+ACVCAUTH+ACVCTSOP\n         MVC   ACVLID,WTORLID\n         MVC   ACVPSWD,WTORPSD\n         XC    WTORPSD,WTORPSD\n         LA    R1,WORKAMSG\n         ST    R1,ACVMSG\n         LA    R1,LIDREC\n         ST    R1,ACVRECB\n         LA    R1,1024\n         ST    R1,ACVRECL\n         ACFSVC ACVALD,TYPE=A,CVT=FIND,NONE=NOACF2\n         LTR   R15,R15\n         BNZR  R4\n         SPACE 1\n         TM    LIDFLAG5,LID5REFR\n         BNO   ACF2BAD\n         SLR   R15,R15\n         BR    R4\nACF2BAD  DS    0H\n         LA    R15,4\n         BR    R4\nNOACF2   DS    0H\n         ABEND 2\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - ISSUE WTO SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*  ISSUE WTO SUBROUTINE                                               *\n*  ====================                                               *\n*                                                                     *\n*       ON ENTRY R9 POINTS TO MESSAGE TO BE ISSUED.                   *\n*                                                                     *\n*       Z3426Z MESSAGE SHOWS THE VALUES USED.                         *\n*                                                                     *\n*       Z3426V/W MESSAGES REQUIRE JOBNAME AND LOGONID IN THEM.        *\n*                                                                     *\n*       Z3426X/Y MESSAGES REQUIRE VALUES IN THEM.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nISSUEWTO DS    0H\n         MVC   WTORAREA(138),0(R9)      MOVE MSG TO AREA\n         CLI   WTORAREA+9,C'Z'          CHECK FOR GOOD MSG\n         BE    WTOGOOD                  YES THEN BRANCH\n         SPACE 1\n         CLI   WTORAREA+9,C'V'          CHECK FOR MSG V/W/X/Y\n         BL    MSGNOW\n         SPACE 1\n         CLI   WTORAREA+9,C'X'          CHECK FOR MSG X/Y\n         BL    WTOVW\n         SPACE 1\nWTOXY    DS    0H\n         L     R1,PARM1LEN              GET PARM POINTER AND LENGTH\n         L     R2,PARM1PTR\n         EX    R1,WTOMVC1               MOVE INTO MESSAGE\n         L     R2,PARM2PTR\n         L     R1,PARM2LEN              AND AGAIN FOR 2ND PARM\n         EX    R1,WTOMVC2\n         B     MSGNOW\n         SPACE 1\nWTOMVC1  MVC   WTORAREA+66(0),0(R2)\nWTOMVC2  MVC   WTORAREA+22(0),0(R2)\n         SPACE 2\nWTOVW    DS    0H\n         LA    R1,0                     R1 -> PSA\n         USING PSA,R1\n         L     R1,PSATOLD               R1 -> TCB\n         USING TCB,R1\n         L     R1,TCBTIO                R1 -> TIOT\n         USING TIOT1,R1\n         CLI   WTORAREA+9,C'V'\n         BNE   WTOW\nWTOV     DS    0H\n         MVC   WTORAREA+12(8),TIOCNJOB\n         MVC   WTORAREA+46(8),WTORLID\n         B     MSGNOW\nWTOW     DS    0H\n         MVC   WTORAREA+46(8),TIOCNJOB\n         DROP  R1\n         MVC   WTORAREA+12(8),WTORLID\n         B     MSGNOW\n         SPACE 2\nWTOGOOD  DS    0H\n         LA    R9,WTORAREA\n         MVC   40(9,R9),PATTERN         MOVE IN EDIT PATTERN\n         MVC   62(9,R9),PATTERN\n         L     R1,WAITBIN               PICK UP CALC WAIT TIME\n         CVD   R1,PACKED\n         ED    40(9,R9),PACKED+4        EDIT INTO MESSAGE\n         L     R1,PARM2PRV\n         CVD   R1,PACKED\n         ED    62(9,R9),PACKED+4\nMSGNOW   DS    0H\n         LA    R9,WTORAREA\n         WTO   MF=(E,(9))\n         BR    R10\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - PARM ANALYSIS SUBROUTINE'\nPARMANAL DS    0H\n***********************************************************************\n*                                                                     *\n*  PARM ANALYSIS SUBROUTINE                                           *\n*  ========================                                           *\n*                                                                     *\n*       ON ENTRY R3 POINTS TO HALFWORD LENGTH FOLLOWED BY PARM VALUE  *\n*                                                                     *\n*       ON EXIT R9 POINTS TO ERROR MESSAGE IF APPLICABLE              *\n*               R15 CONTAINS RETURN CODE 0 OR 4                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  CHECK FOR NO PARM       |\n*                                       +--------------------------+\n         LA    R9,MSGA\n         LH    R4,0(R3)\n         LTR   R4,R4\n         BZ    PARMBAD\n         SPACE 2\n*                                       +--------------------------+\n*                                       |  IF OPEN BRACKET FOUND   |\n*                                       |  THEN CLOSE BRACKET MUST |\n*                                       |  BE PRESENT.             |\n*                                       +--------------------------+\n         LA    R9,MSGB\n         CLI   2(R3),C'('\n         BNE   PARMADJ2\n         LA    R1,1(R4,R3)\n         CLI   0(R1),C')'\n         BNE   PARMBAD\n         SPACE 2\n*                                       +--------------------------+\n*                                       | ADJUST R3 -> ACTUAL PARM |\n*                                       | AND R4 TO ACTUAL LENGTH  |\n*                                       +--------------------------+\nPARMADJ1 DS    0H\n         LA    R9,MSGA\n         SH    R4,=H'2'\n         BNP   PARMBAD\n         LA    R3,3(R3)\n         B     PACHKNUM\n         SPACE 1\nPARMADJ2 DS    0H\n         LA    R3,2(R3)\n         B     PACHKNUM\n         SPACE 2\n*                                       +--------------------------+\n*                                       | CHECK FOR TWO PARAMETERS |\n*                                       | ENSURE THEY ARE NUMERIC  |\n*                                       | AND THE LENGTH OF THEM   |\n*                                       | IS BETWEEN 1 AND 6. THIS |\n*                                       | IS 7 AND A HALF PENCE IN |\n*                                       | DECIMAL CURRENCY.        |\n*                                       +--------------------------+\nPACHKNUM DS    0H\n         ST    R3,PARM1PTR\n         LA    R9,MSGC\n         BCTR  R4,0\n         SLR   R1,R1\n         EX    R4,PATRT1\n         BZ    PARMBAD                  ALL NUMS = 1 PARM ONLY\n         BC    2,PARMBAD                AT END = 1 PARM ONLY\n         SPACE 1\n         LA    R9,MSGD\n         CLI   0(R1),C','               HAVE WE STOPPED AT COMMA?\n         BNE   PARMBAD                  NO THEN NON NUM FOUND\n         SPACE 1\n         LA    R9,MSGE\n         SR    R1,R3                    CALCULATE LENGTH FIRST PARM\n         BNP   PARMBAD                  BAD LENGTH\n         C     R1,=F'6'\n         BH    PARMBAD                  BAD LENGTH\n         BCTR  R1,0                     MINUS 1 FOR EXEC\n         ST    R1,PARM1LEN\n         EX    R1,PAPACK1               GO PACK IT\n         CVB   R2,PACKED                INTO BINARY\n         ST    R2,PARM1BIN              AND STORE IT\n         SPACE 1\n         LA    R9,MSGD\n         LA    R3,2(R1,R3)              POINT TO SECOND PARM\n         ST    R3,PARM2PTR\n         SR    R4,R1                    GET MACHINE LENGTH FOR PARM\n         SH    R4,=H'2'                 R4 = LENGTH OF SECOND PARM - 1\n         ST    R4,PARM2LEN\n         SLR   R1,R1\n         EX    R4,PATRT1\n         BNZ   PARMBAD                  NON NUM IN SECOND PARM\n         SPACE 1\n         LA    R9,MSGE\n         LA    R4,1(R4)                 MUST BE AT LEAST 1 CHAR LONG\n         C     R4,=F'6'                 IF IT GETS HERE. CHECK THAT IT\n         BH    PARMBAD                  IS NO LONGER THAN SIX CHARS.\n         SPACE 1\n         BCTR  R4,0                     MINUS 1 FOR EXEC\n         EX    R4,PAPACK1               GO PACK IT\n         CVB   R2,PACKED\n         ST    R2,PARM2BIN\n         SPACE 2\n*                                       +--------------------------+\n*                                       | CHECK THAT PARMS ARE IN  |\n*                                       | THE ALLOWABLE RANGE.     |\n*                                       +--------------------------+\n         LA    R9,MSGF\n         LA    R2,2\n         LA    R1,PARM1BIN\nPARANGE  DS    0H\n         L     R7,0(R1)\n         C     R7,=F'1'\n         BL    PARMBAD\n         C     R7,=F'999999'\n         BH    PARMBAD\n         LA    R1,4(R1)\n         BCT   R2,PARANGE\n         SPACE 2\n*                                       +--------------------------+\n*                                       | ENSURE SECOND PARM IS    |\n*                                       | NOT MORE THAN 80% OF THE |\n*                                       | FIRST PARM (TOTAL CYCLE  |\n*                                       | TIME).                   |\n*                                       +--------------------------+\n         LA    R9,MSGX\n         L     R7,PARM2BIN\n         SLR   R6,R6\n         M     R6,=F'100'\n         D     R6,PARM1BIN\n         C     R7,=F'80'\n         BH    PARMBAD\n*                                       +--------------------------+\n*                                       | CALCULATE WAIT TIME AND  |\n*                                       | BUSY TIME. ADJUST FOR THE|\n*                                       | STIMER MACRO AND STORE IN|\n*                                       | DOUBLEWORDS.             |\n*                                       +--------------------------+\n         LA    R9,MSGY\n         L     R7,PARM1BIN              TO GET WAIT TIME\n         S     R7,PARM2BIN\n         BNP   PARMBAD\n         ST    R7,WAITBIN               STORE WAIT TIME B4 ADJUSTMENT\n         SLR   R6,R6                    CLEAR R6\n         SLDL  R6,12                    SHIFT LEFT FOR STIMER MICVL\n         STM   R6,R7,WAITTIME           AND STORE IT\n         SPACE 1\n         SLR   R6,R6                    CLEAR R6\n         L     R7,PARM2BIN              GET BUSY TIME\n         ST    R7,PARM2PRV\n         SLDL  R6,12                    SHIFT LEFT FOR STIMER MICVL\n         STM   R6,R7,BUSYTIME           AND STORE IT\n         SPACE 2\n*                                       +--------------------------+\n*                                       | PARM IS GOOD THEREFORE   |\n*                                       | RETURN WITH R15 = 0      |\n*                                       +--------------------------+\nPARMGOOD DS    0H\n         SLR   R15,R15\n         BR    R10\n*                                       +--------------------------+\n*                                       | PARM IS BAD  THEREFORE   |\n*                                       | RETURN WITH R15 = 4      |\n*                                       +--------------------------+\nPARMBAD  DS    0H\n         LA    R15,4\n         BR    R10\n         SPACE 2\nPATRT1   TRT   0(0,R3),PATABLE\nPAPACK1  PACK  PACKED,0(0,R3)\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - STIMER SUBROUTINE'\n         USING EXITRTN,R15\nEXITRTN  DS    0H\n         STM   R14,R12,12(R13)\n         OI    SWITCH,SWTIMEUP\n         LM    R14,R12,12(R13)\n         BR    R14\n         DROP  R15\n         TITLE 'Z3426  CPU SOAK PROGRAM                                *\n               - CONSTANTS AND DSECTS'\nMSGA     WTO   'Z3426A  NO PARAMETERS SPECIFIED',                      *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGB     WTO   'Z3426B  UNBALANCED PARENTHESES IN PARM FIELD',         *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGC     WTO   'Z3426C  ONLY ONE PARAMETER FOUND - TWO REQUIRED',      *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGD     WTO   'Z3426D  PARM FIELD CONTAINS NON-NUMERICS',             *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGE     WTO   'Z3426E  INVALID PARAMETER LENGTH',                     *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGF     WTO   'Z3426F  PARAMETER OUT OF RANGE : 1 - 999999',          *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGG     WTO   'Z3426G  START CIB NOT FREED',                          *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGH     WTO   'Z3426H  UNKNOWN CIBVERB',                              *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGI     WTOR  'Z3426I  ENTER AN AUTHORISED LOGONID',                  *\n               6,8,7,ROUTCDE=(1,11),DESC=(1),                          *\n               MF=L\nMSGJ     WTOR  'Z3426J  ENTER YOUR PASSWORD',                          *\n               6,8,7,ROUTCDE=(1,9,11),DESC=(1),                        *\n               MF=L\nMSGV     WTO   'Z3426V           HAS BEEN STOPPED BY LID           ',  *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGW     WTO   'Z3426W           NOT AUTHORISED TO MODIFY         ',   *\n               ROUTCDE=(1,11),DESC=(2),MF=L\nMSGX     WTO   'Z3426X  BUSY TIME        IS MORE THAN 80% OF TOTAL CYCL*\n               E TIME       ',ROUTCDE=(1,11),DESC=(2),MF=L\nMSGY     WTO   'Z3426Y  BUSY TIME        IS GREATER THAN THE TOTAL CYCL*\n               E TIME       ',ROUTCDE=(1,11),DESC=(2),MF=L\nMSGZ     WTO   'Z3426Z  VALUES IN USE -  WAIT TIME :           BUSY TIM*\n               E :         ',ROUTCDE=(1,11),DESC=(2),MF=L\nPATTERN  DC    X'402020202020202020'\nPATABLE  DC    256X'FF'                 ****************************\n         ORG   PATABLE+C','             *  TABLE FOR ENSURING      *\n         DC    C','                     *  OS PARM/MODIFY PARM     *\n         ORG   PATABLE+C'0'             *  IS NUMERIC AND HAS TWO  *\n         DC    10X'00'                  *  PARAMETERS.             *\n*                                       ****************************\n         ORG\nSWITCH   DS    X                         HAS TO BE NON-REENTRANT COS\nSWTIMEUP EQU   X'80'                     THIS SWITCH CANT BE ADDRESSED\n*                                        IN THE STIMER EXIT ROUTINE\n*\nCOM      DSECT\n         IEZCOM\nCIB      DSECT\n         IEZCIB\nWORKAREA DSECT\n         DS    18F\nWACLEAR  EQU   *\nWAEYE    DS    CL8\nPACKED   DS    PL8                      TEMPORARY PACK AREA\nPARM1BIN DS    F                        FIRST PARM TEMP STORAGE (BIN)\nPARM2BIN DS    F                        SECOND PARM TEMP STORAGE (BIN)\nPARM2PRV DS    F                        SECOND PARM PREVIOUS FOR WTO\nWAITBIN  DS    F                        CALCULATED WAIT TIME IN BINARY\nPARM1PTR DS    F                        POINTER TO PARM 1  FOR WTO\nPARM1LEN DS    F                        MACHINE LENGTH OF PARM 1\nPARM2PTR DS    F                        POINTER TO PARM 2  FOR WTO\nPARM2LEN DS    F                        MACHINE LENGTH OF PARM 2\nWAITTIME DS    D                        CALCULATED WAIT TIME FOR STIMER\nBUSYTIME DS    D                        BUSY TIME FOR SECOND STIMER\nR10SAVE  DS    F                        AREA TO SAVE BAL REGISTER\nEXTRCTWD DS    F                        EXTRACT WORD -> CIB\nWORKAMSG DS    CL128                    ACF2 RETURN MSG AREA\nWTORLID  DS    CL8                      WTOR REPLY AREA FOR LID\nWTORPSD  DS    CL8                      WTOR REPLY AREA FOR PASSWORD\nWTORECB  DS    F                        WTOR ECB\nCIBSAVE  DS    CL30                     CIBSAVE AREA FOR MODIFY VALUES\n         ACVALD DSECT=NO\n         LIDREC DSECT=NO\n         DS    0F\nWTORAREA DS    CL138                    FOR MESSAGES TO BE ISSUED\nWALEN    EQU   *-WORKAREA\nWACLRLEN EQU   *-WACLEAR\n         ACCVT  DSECT=YES\n         ACUCB  DSECT=YES\n         IHAPSA DSECT=YES\n         IKJTCB DSECT=YES\n         IEFTIOT1\n         IHAECB\n         END\n", "mimetype": "application/x-dosexec", "datatype": "iso-8859-1", "extension": ".x-dosexec"}, "A02Z7504": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00\\x02\\x00\\x01\\x00\\x871_\\x00\\x90\\x01_\\x18\\x05\\x028\\x00\\x00\\x00\\x00\\xe4\\xd6\\xe3\\xe7\\xd4\\xd1\\xe3@@@'", "ispf": {"version": "00.02", "flags": 0, "createdate": "1987-11-11T00:00:00", "modifydate": "1990-01-15T18:05:01", "lines": 568, "newlines": 0, "modlines": 0, "user": "UOTXMJT"}, "text": "         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - PROGRAM DOCUMENTATION'\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n*        Z7504: CONVERT CHARACTERS IN TSO VARS                        *\n*                                                                     *\n* Z7504.1  PROGRAM DESCRIPTION                                        *\n*                                                                     *\n*   THIS PROGRAM WILL CONVERT THE FOLLOWING CHARACTERS:-              *\n*                                                                     *\n*        FROM                       TO                                *\n*        ====                       ==                                *\n*                                                                     *\n*         &                         +                                 *\n*         (                         {                                 *\n*         )                         }                                 *\n*                                                                     *\n*   THE VARIABLE NAMES ARE PASSED TO IT VIA THE PARM FIELD            *\n*   OF THE CALL COMMAND. THE ONLY LIMIT TO THE NUMBER OF VARIABLES    *\n*   THAT CAN BE PASSED IS LIMITED BY THE SIZE OF THE PARM FIELD (100  *\n*   BYTES).                                                           *\n*                                                                     *\n*   THIS PROGRAM WAS WRITTEN FOR THE LOLA LIBRARY INDEX DIALOGUE      *\n*   BECAUSE IF AN AMPERSAND IS ENTERED IN A FIELD OF A PANEL WHICH    *\n*   IS THEN INTERROGATED BY A CLIST, THE CLIST THROWS ITS HANDS IN    *\n*   THE AIR AND GIVES UP.  IT HAS BEEN AMENDED TO INCLUDE THE         *\n*   CHARACTERS '(' AND ')' WHICH CAUSED PROBLEMS IN THE PSIP          *\n*   DIALOGUE.                                                         *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.2  USER INSTRUCTIONS                                          *\n*                                                                     *\n*   Z7504 MUST BE CALLED FROM WITHIN A \"PROPER\" CLIST.  THAT IS,      *\n*   THE FIRST STATEMENT OF THE CLIST MUST BE A \"PROC\" STATEMENT.      *\n*                                                                     *\n*   THE STATEMENT TO CALL Z7504 IS:                                   *\n*      CALL 'SG1.LOAD(Z7504)'  'VAR1,VAR2,VAR3'                       *\n*                                                                     *\n*      WHERE VAR1,VAR2 AND VAR3 ARE THE VARIABLE NAMES WHOSE          *\n*      VALUES MAY CONTAIN AMPERSANDS OR BRACKETS.                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.3  RETURN CODES                                               *\n*                                                                     *\n*   RC = 0     NORMAL COMPLETION                                      *\n*                                                                     *\n*                                                                     *\n*      THE FOLLOWING RETURN CODES ARE THE STANDARD CODES RETURNED     *\n*      FROM IKJCT441 WITH A VALUE ADDED TO SHOW WHERE IN Z7504        *\n*      THE ERROR OCCURRED.                                            *\n*                                                                     *\n*                                                                     *\n*   RC = 1000  PARM INFORMATION MISSING.                              *\n*                                                                     *\n*   RC = 20XX  INVALID RETURN CODE FROM IKJCT441 AT LABEL GETVAR      *\n*              WHEN RETRIEVING A TSO VARIABLE.                        *\n*                                                                     *\n*   RC = 30XX  INVALID RETURN CODE FROM IKJCT441 AT LABEL UPDTVAR     *\n*              WHEN UPDATING A TSO VARIABLE.                          *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.4  MESSAGES                                                   *\n*                                                                     *\n*          NONE.                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.5  ABEND CODES                                                *\n*                                                                     *\n*          NONE.                                                      *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.6  OPERATING INSTRUCTIONS                                     *\n*                                                                     *\n*   THIS SECTION SHOULD BE LAID OUT AS FAR AS POSSIBLE ACCORDING      *\n*   TO THE STANDARDS MANUAL SECTION 6, APPENDIX 1, BUT WITHOUT        *\n*   DUPLICATING OTHER SECTIONS OF THIS PROGRAM DOCUMENTATION,         *\n*   SUCH AS DESCRIPTION, MSGS & CODES.                                *\n*                                                                     *\n*   IT IS ONLY REQUIRED IF THE PROGRAM IS TO BE RUN BY OPERATIONS     *\n*                                                                     *\n*   SEE SECTION Z7504.2 (USER INTRUCTIONS) FOR USE.                   *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.7  IMPLEMENTATION METHOD                                      *\n*                                                                     *\n*        COPY-UP TO LOLA1.SYSG.SOURCE AND SG1.LOAD.                   *\n*        THIS PROGRAM IS RE - ENTRANT.                                *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.8  AMENDMENT HISTORY                                          *\n*                                                                     *\n*   THIS SHOULD BE COMPLETED JUST BEFORE FINAL COPY-UP OF ORIGINAL    *\n*   OR NEW VERSION OF ANY MODULE OF THE PROGRAM. ENSURE REST OF       *\n*   PROGRAM DOCUMENTATION IS COMPLETED/AMENDED. THEN ISSUE/RE-ISSUE   *\n*   THIS DOCUMENTATION BY PHOTO-COPYING COPY-UP LISTING, OR BY        *\n*   EXTRACTING & PRINTING NECESSARY SECTIONS. SECTIONS REQUIRED ARE:  *\n*                                                                     *\n*     FOR STANDARD FACILITIES           SECTIONS 1-5        ONE       *\n*         SYSTEM   FACILITIES           SECTIONS 1-8          OF      *\n*         Z34/Z66 BINDERS               SECTIONS 1-8            THESE *\n*                                                                     *\n*         LOLA TP MSGS & CODES          SECTIONS 4-5        IF ANY, & *\n*                                                ONLY FOR TP PROGRAMS *\n*                                                                     *\n*         OPERATING INSTRUCTIONS        SECTIONS 1,3-6      IF NEC.   *\n*                                                                     *\n*   DOCUMENTATION GOING OUTSIDE TSG SHOULD BE TYPED, AND MAY NEED     *\n*   FORMATTING INSTRUCTIONS. OP. INS. NEED FURTHER SECTIONS - SEE     *\n*   STANDARDS MANUAL SECTION 6 APPENDIX 1.                            *\n*                                                                     *\n*                                                                     *\n*   THE AMENDMENTS SECTION OF THE RELEVANT MODULE PROLOGUE(S) MUST    *\n*   ALSO BE COMPLETED.                                                *\n*                                                                     *\n*   DO NOT DELETE THESE INSTRUCTIONS.                                 *\n*                                                                     *\n***********************************************************************\n*       *     *     *          *                                      *\n* MODULE*VERSN*INTLS* COPY-UP  * AMENDMENT                            *\n*   ID  * NO  *     *  DATE    *        DESCRIPTION                   *\n*       *     *     *          *                                      *\n***********************************************************************\n*       *     *     *          *                                      *\n* Z7504 * 00  * MJT * 11.11.87 * ORIGINAL VERSION                     *\n* Z7504 * 01  * MJT * 09.06.89 * AMENDED TO CONVERT BRACKETS          *\n* Z7504 * 02  * MJT * 23.11.89 * AMENDED RE: TSO V2.1 ISPF V3.1       *\n*****                                                             *****\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* Z7504.9 MODULARISATION DETAILS                                      *\n*                                                                     *\n*         NONE                                                        *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - MODULE PROLOGUE'\n*****                                                             *****\n*****                                                             *****\n*                                                                     *\n* ID:          Z7504  CONVERT CHARACTERS IN TSO VARS                  *\n*                                                                     *\n*                                                                     *\n* TASKS:       1. CHECK IF ANY PARAMETERS PASSED AND ISSUE RETURN     *\n*                 CODE OF 1000  IF NONE.                              *\n*                                                                     *\n*              2. FIND THE FIRST PARAMETER. CALCULATE ITS LENGTH      *\n*                 STORE THE LENGTH IN WAVARLEN AND ITS NAME IN        *\n*                 WAVARNAM.                                           *\n*                                                                     *\n*              3. SET UP IKJCT441 PARMS AND CALL IT TO RETRIEVE       *\n*                 THE FIRST VARIABLE.IF AN ERROR OCCURS THEN ADD      *\n*                 2000 TO THE RETURN CODE AND EXIT.                   *\n*                                                                     *\n*              4. CHECK THE VARIABLE VALUE FOR ANY AMPERSANDS OR      *\n*                 BRACKETS AND CHANGE THEM ACCORDINGLY.               *\n*                                                                     *\n*              5. IF ANY CHANGES HAVE BEEN MADE CALL IKJCT441 TO      *\n*                 UPDATE THE TSO VARIABLE. IF AN ERROR OCCURS AT      *\n*                 THIS POINT THEN ADD 3000 TO THE RETURN CODE AND     *\n*                 EXIT.                                               *\n*                                                                     *\n*              6. REPEAT FROM STEP 2 UNTIL THERE ARE NO MORE          *\n*                 PARAMETERS LEFT TO CHECK.                           *\n*                                                                     *\n* ENTRY INTFCE:R1 POINTS TO  PARM LIST                                *\n*                                                                     *\n* EXIT INTFCES: NONE.                                                 *\n*                                                                     *\n* RETURN CODES: SEE SECTION Z7504.3 ABOVE.                            *\n*                                                                     *\n*                                                                     *\n* REG USAGE:   R0    -  WORK AND SYSTEM USAGE                         *\n*              R1    -  WORK AND SYSTEM USAGE                         *\n*              R2    -  WORK                                          *\n*              R3    -> PARM VALUE                                    *\n*              R4    -  LENGTH OF PARM FIELD                          *\n*              R5    -  LENGTH OF VARIABLE VALUE                      *\n*              R6    -> VARIABLE VALUE                                *\n*              R7    -  WORK                                          *\n*              R8    -  NOT USED                                      *\n*              R9    BAL REG FOR COMMON SUBROUTINES                   *\n*              R10   BAL REG FROM MAIN ROUTINE                        *\n*              R11   SECOND BASE REGISTER                             *\n*              R12   FIRST BASE REGISTER                              *\n*              R13   SAVE AREA + WORK AREA                            *\n*              R14   -  WORK AND SYSTEM USAGE                         *\n*              R15   -  SYSTEM USAGE                                  *\n*                                                                     *\n* MESSAGES:    SEE SECTION Z7504.4 ABOVE                              *\n*                                                                     *\n* ABENDS:      SEE SECTION Z7504.5 ABOVE                              *\n*                                                                     *\n* NOTES:       THIS PROGRAM IS RE - ENTRANT                           *\n*                                                                     *\n* VERSION:     00 - MJT   - 11.11.87 - ORIGINAL VERSION               *\n* VERSION:     01 - MJT   - 09.06.89 - AMENDED FOR BRACKETS           *\n* VERSION:     02 - MJT   - 23.11.89 - AMENDED FOR TSO V2.1 ISPF V3.1 *\n*                                                                     *\n*****                                                             *****\n*****                                                             *****\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - ENTRY HOUSEKEEPING'\nZ7504    SETUP DATE='\u00a2DATEACS',                                        *\n               12,11,RE=YES,LDSA=WALEN\n*\n*                                       *******************************\n*                                       * CLEAR WORK AREA (NOT SAVE   *\n*                                       * AREA) AND ADDRESS IT.       *\n*                                       *******************************\n*\n         USING WORKAREA,R13\n         LA    R2,WACLEAR\n         LA    R3,WACLRLEN\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R2,R14\n         MVC   WAEYE,=CL8'WORKAREA'\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - MAIN ROUTINE'\n*+--------------------------------------------------------------------+\n*|       CHECK FOR PASSED PARAMETERS                                  |\n*+--------------------------------------------------------------------+\n         SPACE 2\n         LR    R3,R1\n         L     R3,0(R3)                 R3 -> PARM\n         LH    R4,0(R3)                 R4 = LENGTH OF PARM\n         LA    R3,2(R3)                 R3 -> START OF PARM\n         LTR   R4,R4                    CHECK IF PARM PRESENT\n         BNZ   PARMST\n         LA    R15,1000                 INDICATE ERROR\n         B     EXIT                     AND RETURN\n         SPACE 2\n*\n*        SCAN FOR PARM VALUES\n*\n         SPACE 1\nPARMST   DS    0H\n         TM    SWPARM,SWPARMON\n         BO    EXIT0\n         BCTR  R4,0                     R4 -1\n         EX    R4,COMMASRC              SEARCH FOR COMMA\n         BZ    PARMEND                  END OF PARM THEN BRANCH\n         SR    R1,R3                    R1 = LENGTH OF VAR NAME\n         ST    R1,WAVARLEN              STORE VAR NAME LENGTH\n         BCTR  R1,0                     LESS 1 FOR EXEC\n         EX    R1,MVCNAME               EX MOVE LEN=R1 -> BY R3\n         AR    R3,R1                    POINT R3 TO NEXT VAR NAME\n         LA    R3,2(R3)                   \"    \"  \"   \"   \"   \"\n         SR    R4,R1                    ADJUST LENGTH OF PARM\n         BCTR  R4,0                        \"     \"    \"    \"\n         B     RETRIEVE                 GO AND RETRIEVE VARIABLE\nPARMEND  DS    0H\n         EX    R4,MVCNAME               IF LAST OR ONLY PARM MOVE\n*                                       FOR FULL LENGTH\n         LA    R4,1(R4)\n         ST    R4,WAVARLEN\n         OI    SWPARM,SWPARMON\n         B     RETRIEVE                 GO AND RETRIEVE VARIABLE\n         SPACE 3\nRETRIEVE DS    0H\n         BAL   R10,GETVAR\n         LTR   R15,R15\n         BNZ   EXIT\n         SPACE 3\n*+--------------------------------------------------------------------+\n*|       TRANSLATE CHARACTERS IN VARIABLE VALUE.                      |\n*+--------------------------------------------------------------------+\n         SPACE 2\nTRANSLTE DS    0H\n         L     R5,WAFLDVLN              OBTAIN LENGTH OF VAR VALUE\n         LTR   R5,R5                    IF ZERO THEN TRY FOR NEXT\n         BZ    PARMST\n         SPACE 1\n         L     R6,WAFLDVAL              R6 -> VAR VALUE\n         BCTR  R5,0                     LEN -1 FOR EXEC\n         EX    R5,MVCVAL                SAVE VIRGIN VALUE FOR LATER\n         EX    R5,MVCVAL2               SAVE MODIFYABLE VALUE\n         LA    R5,1(R5)                 R5 = CORRECT LENGTH\n         LR    R2,R5                    R2 = LENGTH\n         LA    R7,WASAVVL2              R7 -> VAR VALUE\nTLOOP    DS    0H\n         CLI   0(R7),C'&&'              LOOK FOR AMPERSANDS\n         BE    CHAMPER                  AND CHANGE THEM\n         CLI   0(R7),C'('               LOOK FOR OPEN BRACKET\n         BE    CHBRKOPE                 AND CHANGE THEM\n         CLI   0(R7),C')'               LOOK FOR CLOSE BRACKET\n         BE    CHBRKCLS                 AND CHANGE THEM\n         B     UPVAR\n         SPACE 1\nCHAMPER  DS    0H\n         MVI   0(R7),C'+'               IF ANY CHANGE TO PLUSSES\n         B     UPVAR\n         SPACE 1\nCHBRKOPE DS    0H\n         MVI   0(R7),C'{'               IF ANY CHANGE TO SPEC BRKS\n         B     UPVAR\n         SPACE 1\nCHBRKCLS DS    0H\n         MVI   0(R7),C'}'               IF ANY CHANGE TO SPEC BRKS\n         B     UPVAR\n         SPACE 1\nUPVAR    DS    0H\n         LA    R7,1(R7)                 BUMP R7\n         BCT   R2,TLOOP                 AND LOOP IF LENGTH PERMITS\n         BCTR  R5,0\n         EX    R5,CLCVAL                SEE IF UPDATE VAR REQUIRED\n         BE    PARMST                   NO THEN PROCESS NEXT VAR.\n         BAL   R10,UPDTVAR              YES THEN UPDATE\n         LTR   R15,R15\n         BNZ   EXIT\n         B     PARMST\nEXIT0    DS    0H\n         LA    R15,0\nEXIT     DS    0H\n         CLEAR RC=(15),RE=YES\n         SPACE 3\nCOMMASRC TRT   0(0,R3),COMMATAB\nMVCNAME  MVC   WAVARNAM(0),0(R3)        MOVE NAME TO IKJ AREA\nMVCVAL   MVC   WASAVVAL(0),0(R6)        SAVE VALUE BEFORE MODIFICATION\nMVCVAL2  MVC   WASAVVL2(0),0(R6)        SAVE VALUE FOR MODIFYING\nCLCVAL   CLC   WASAVVAL(0),WASAVVL2     COMPARE VALUES\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - RETURN THE VARIABLE VALUE'\n*+--------------------------------------------------------------------+\n*|       GET VALUE OF VARIABLE NAME .                                 |\n*+--------------------------------------------------------------------+\n         SPACE 2\nGETVAR   DS    0H\n         SPACE 2\n         LA    R1,CODERETR\n         ST    R1,WAIKCODE\n         LA    R1,WAVARNAM\n         ST    R1,WAIKNAME\n         LA    R1,WAIKNAME\n         ST    R1,WAIKNPTR\n         LA    R1,WAVARLEN\n         ST    R1,WAIKNLEN\n         LA    R1,WAFLDVAL\n         ST    R1,WAIKVPTR\n         LA    R1,WAFLDVLN\n         ST    R1,WAIKVLEN\n         OI    WAIKTOKN,X'80'\n         BAL   R9,IKJRTN\n         SPACE 2\n         LTR   R15,R15\n         BZR   R10                      OK  THEN RETURN\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | IF BAD RETURN CODE FROM     |\n*                                       | IKJCT441, ADD 2000 TO SHOW  |\n*                                       | IT WAS INVOKED IN \"GETVAR\"  |\n*                                       +-----------------------------+\n         SPACE 1\n         LA    R15,2000(R15)\n         BR    R10\n         SPACE 2\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - UPDATE THE TSO VARIABLE '\n         SPACE 3\n*+--------------------------------------------------------------------+\n*|       UPDATE VARIABLE                                              |\n*+--------------------------------------------------------------------+\n         SPACE 2\nUPDTVAR  DS    0H\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | SET UP PARM LIST            |\n*                                       +-----------------------------+\n         SPACE 1\n         LA    R1,CODEUPDT\n         ST    R1,WAIKCODE\n         LA    R1,WAVARNAM\n         ST    R1,WAIKNAME\n         LA    R1,WAIKNAME\n         ST    R1,WAIKNPTR\n         LA    R1,WAVARLEN\n         ST    R1,WAIKNLEN\n         LA    R1,WASAVVL2\n         ST    R1,WAIKVALU\n         LA    R1,WAIKVALU\n         ST    R1,WAIKVPTR\n         LA    R1,WAFLDVLN\n         ST    R1,WAIKVLEN\n         OI    WAIKTOKN,X'80'\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | GO AND CALL TSO ROUTINE     |\n*                                       +-----------------------------+\n         SPACE 1\n         BAL   R9,IKJRTN\n         LTR   R15,R15\n         BZR   R10                      RETURN HERE - O.K.\n         LA    R15,3000(R15)            SHOW ERROR IS HERE\n         BR    R10\n         SPACE 2\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - \"IKJRTN\": ACCESS A TSO VARIABLE'\n*+--------------------------------------------------------------------+\n*|       ACCESS A TSO VARIABLE                                        |\n*+--------------------------------------------------------------------+\n         SPACE 2\nIKJRTN   DS    0H\n         TM    WASWIKJ,SWTRIED+SWFOUND  HAVE WE LOOKED FOR A(IKJCT441)?\n*                                         AND DID WE FIND IT?\n         BO    IKJCALL                  YES TO BOTH\n         BM    IKJLINK                  DIDN'T FIND IT\n         OI    WASWIKJ,SWTRIED          SHOW WE (WILL) HAVE TRIED\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | FIRST TIME: TRY AND GET     |\n*                                       | ADDRESS OF IKJCT441 VIA CVT |\n*                                       | TSO VECTOR TABLE.  SET      |\n*                                       | SWITCH ACCORDINGLY.         |\n*                                       +-----------------------------+\n         SPACE 1\n         USING PSA,R0\n         L     R15,FLCCVT               CVT POINTER\n         DROP  R0\n         USING CVT,R15\n         L     R15,CVTTVT               TSO VECTOR TABLE POINTER\n         USING TSVT,R15\n         L     R15,TSVTVACC             IKJCT441 POINTER\n         DROP  R15\n         LTR   R15,R15\n         BZ    IKJLINK                  NO ADDRESS FOUND - LINK TO IT\n         OI    WASWIKJ,SWFOUND          ELSE SHOW WE FOUND IT\n         ST    R15,WAIKSVAD               SAVE IT\n         B     IKJCALL                    AND GO AND CALL IT\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | CALL IKJCT441 AND RETURN    |\n*                                       +-----------------------------+\n         SPACE 1\nIKJCALL  DS    0H\n         LA    R1,WAIKPARM\n         L     R15,WAIKSVAD\n         BALR  R14,R15\n         BR    R9\n         SPACE 2\n*                                       +-----------------------------+\n*                                       | LINK TO IKJCT441 AND RETURN |\n*                                       +-----------------------------+\n         SPACE 1\nIKJLINK  DS    0H\n         LA    R1,WAIKPARM\n         LINK  EP=IKJCT441\n         BR    R9\n         TITLE 'Z7504: CONVERT CHARACTERS IN TSO VARS                  *\n               - CONSTANTS AND DSECTS'\n*+--------------------------------------------------------------------+\n*|       CONSTANTS                                                    |\n*+--------------------------------------------------------------------+\n         SPACE 2\nCODERETR DC    A(TSVERETR)              RETRIEVE A CLIST VAR VALUE\nCODEUPDT DC    A(TSVEUPDT)              UPDATE A CLIST VAR VALUE\n         SPACE 1\n         DS    0D\nCOMMATAB DC    XL256'00'\n         ORG   COMMATAB+C','\n         DC    C','\n         ORG   COMMATAB+C' '\n         DC    C' '\n         ORG\n         EJECT\n*+--------------------------------------------------------------------+\n*|       WORKAREA DSECT                                               |\n*+--------------------------------------------------------------------+\n         SPACE 2\nWORKAREA DSECT\n         DS    18F                      RESERVED FOR SAVEAREA\nWACLEAR  EQU   *\nWAEYE    DS    CL8\nWAFLDVAL DS    A                      A(RETURNED VALUE OF VARIABLE )\nWAFLDVLN DS    A                        RETURNED LENGTH OF VALUE\nWAVARNAM DS    CL100                  VARIABLE NAME MAX 100\nWAVARLEN DS    A                      LENGTH OF VAR NAME\nWASAVVAL DS    CL256                  ARE TO SAVE VALUE BEFORE MOD.\nWASAVVL2 DS    CL256                  ARE TO SAVE VALUE FOR MOD.\n*\nWASWPARM DS    X                        PARM SWITCH\nSWPARM   EQU   WASWPARM\nSWPARMON EQU   X'80'\nSWPARMOF EQU   X'FF'-SWPARMON\n         SPACE 3\n*+--------------------------------------------------------------------+\n*| THE FOLLOWING AREA IS FOR USE BY THE COMMON SUBROUTINE \"IKJRTN\"    |\n*|   AND ITS CALLERS                                                  |\n*+--------------------------------------------------------------------+\n         SPACE 2\nWAIKPARM DS    0A                       PARM LIST FOR IKJCT441:\nWAIKCODE DS    A                          A(ENTRY CODE)\nWAIKNPTR DS    A                          A(WAIKNAME)\nWAIKNLEN DS    A                          A(LENGTH OF NAME)\nWAIKVPTR DS    A                          A(WAIKVALU)\nWAIKVLEN DS    A                          A(LENGTH OF VALUE STRING)\nWAIKTOKN DS    A                          A(TOKEN)\n*\nWAIKNAME DS    A                          A(NAME OF VARIABLE)\nWAIKVALU DS    A                          A(VALUE OF VARIABLE)\n*\nWAIKSVAD DS    A                        SAVE ADDR OF IKJCT441\n*\nWASWIKJ  DS    X\nSWTRIED  EQU   X'80'                    WE'VE TRIED TO FIND A(IKJCT441)\nSWFOUND  EQU   X'40'                    WE'VE FOUND A(IKJCT441)\n         SPACE 3\n         DS    0D\nWALEN    EQU   *-WORKAREA               LENGTH FOR LBRSETUP MACRO\nWACLRLEN EQU   *-WACLEAR                LENGTH TO CLEAR\n         EJECT\n*+--------------------------------------------------------------------+\n*|       OTHER DSECTS                                                 |\n*+--------------------------------------------------------------------+\n         SPACE 2\n*\n         IKJTSVT ,                      REQUIRED BY IKJCT441\n*                                         (TSO VECTOR TABLE)\n         PRINT NOGEN\n*\n         IHAPSA ,                       FOR CVT POINTER \"FLCCVT\"\n*\n         CVT   DSECT=YES                FOR TSO VECTOR TABLE ADDRESS\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A03#INDX": {"ttr": 6408, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x93&_\\x00\\x93&\\x9f\"\\x16\\x00\\x15\\x00\\r\\x00\\t\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-09-22T00:00:00", "modifydate": "1993-09-26T22:16:01", "lines": 21, "newlines": 13, "modlines": 9, "user": "DPSPPP"}, "text": " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A03XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    DERBYSHIRE COUNTY COUNCIL\n                     C HAMPSHIRE\n                     0629 580000 X7764\n ____________________________________________________________________\n\n\n   NAME    |                     DESCRIPTION\n========================================================================\n A03APSX1  |  LASER PRINTER HEADER-SEPARATOR PAGE.\n A03LPA01  |  SYS1.PARMLIB FOR IEFUJV/IKJEFLD\n A03UJV    |  SMF EXIT IEFUJV (JOB CARD VALIDATION)\n A03UJVRR  |  REFRESH ROUTINE FOR SMF EXIT IEFUJV\n A03EFLD   |  IKJEFLD TSO LOGON EXIT\n A03ITERM  |  FIND TERMINAL ID IN ISPF\n A03X023   |  JES USER EXIT 023. - PREPARE OUTPUT FOR LASER PRINTER\n A03LLOW   |  ENSURES JOBS RUN IN CORRECT COMBINATION.\n A03LLOWP  |  UTALLOW DOCUMENTATION\n A03LLOWR  |  JCL TO RUN UTALLOW.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03ITERM": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00t\\x00t\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 116, "newlines": 116, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPTERM JOB  '9999,C4003,SYSMON  ',\n//     'CICS',CLASS=F,PRTY=9,MSGCLASS=P,NOTIFY=TSOSYSJ\n//         EXEC ASMFCL,\n//             MAC='ISF.V1R1M0.ISFSRC',\n//             PARM.ASM='OBJ,XREF(SHORT),LINECOUNT(60)',\n//             PARM.LKED='(LIST,XREF,RENT,REFR)'\n//ASM.SYSLIB DD\n//           DD\n//           DD\n//           DD DSN=SYS1.HASPSRC,DISP=SHR\n//ASM.SYSIN DD  *\nISFTERM  TITLE 'ISPF PROGRAM TO LOCATE TERMINAL ID'\n*\n*        THIS PROGRAM IMITATES SDSF TO OBTAIN NECESSARY\n*        AUTHORISATION TO LOCATE THE SESSIONS TERMINAL-ID\n*        IN THE TSB CONTROL BLOCK. THE TERMINAL-ID IS THEN\n*        PASSED AS AN ISPF VARIABLE.\n*\nISFTERM  START 0\n         PRINT OFF\n         COPY  ISFGEN\n         COPY  ISFEQU\n         PRINT ON\nISFTERM  CSECT\n         ISFMODE AMODE=31,RMODE=ANY\n         USING ISFTERM,R15\n         ISFMODID IDADDR=AUTHRET\n         DROP  R15\n         SAVE  (14,12)\n         BALR  R12,0\n         USING *,R12\n         LA    R0,200\n         GETMAIN R,LV=(R0)\n         LR    R11,R1\n         ST    R13,4(0,R1)\n         ST    R1,8(0,R13)\n         LR    R13,R1\n         USING DCCDSECT,R11\n         XC    BASECALL(20),BASECALL\n         CALL  ISPLINK,(VDEFINE,NDCCTERM,DCCTERM,CHAR,LDCCTRM),VL,     *\n               MF=(E,BASECALL)\n         CALL  ISPLINK,(VGET,NDCCTERM),VL,MF=(E,BASECALL)\n*\n* INITIALISE LOOP CONTROL AND MESSAGE VARIABLES\n         XR    R0,R0                   CLEAR REG 0\n         LA    R1,1                    REG 1 - REQUEST AUTHORISE\n         BAL   R10,DOSVC               CALL SDSF SVC\n         MODESET KEY=ZERO                 KEY ZERO\n         XC    BASECALL(20),BASECALL\n         EXTRACT ASIDNUM,FIELDS=ASID,MF=(E,BASECALL)     FIND OUR ASID\n         LA    R5,16                            CVT POINTER\n         L     R5,0(0,R5)                       CVT\n         L     R5,556(0,R5)                     ASVT\n         L     R15,ASIDNUM                      ASID NUMBER\n         SLL   R15,2                            *4 FOR ADDRESS\n         L     R6,524(R15,R5)                   R6 IS ASID ADDR\n         USING ASCB,R6\n         USING TSB,R7\n         L     R7,ASCBTSB                       FIND TSB\n         MVC   DCCTERM,TSBTRMID                 LOAD TERMID\n         MODESET KEY=NZERO                 KEY NON-ZERO\n         XR    R0,R0                   CLEAR REG 0\n         LA    R1,0                    REG 1 - REQUEST DE-AUTHORISE\n         BAL   R10,DOSVC               DO THE SVC\n*\n*  RETURN TO SELECTION PANEL\n*\n         XC    BASECALL(20),BASECALL\n         CALL  ISPLINK,(VPUT,NDCCTERM),VL,MF=(E,BASECALL)\n         CALL  ISPLINK,(VDELETE,NDCCTERM),VL,MF=(E,BASECALL)\n         L     R13,PRGMSAVE+4\n         FREEMAIN R,A=(R11),LV=200\n         RETURN (14,12),RC=0\n*\nDOSVC    DS    0H\n         LA    R15,11                  REG 15 - SVC ROUTE CODE\n         LA    R14,109                     CALL SDSF SVC\n         EX    R14,SVC0                     CALL SDSF SVC\nAUTHRET  DS    0H\n         LTR   R15,R15                    OK\n         BNZ   DUMP                         NO DUMP\n         BR    R10\nDUMP     DC    F'0'\nSVC0     SVC   0                           DUMMY FOR EXECUTE\n         EJECT\n         DS    0D\nCHAR     DC    CL8'CHAR'\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nVGET     DC    CL8'VGET   '\nVPUT     DC    CL8'VPUT   '\n*\nLDCCTRM  DC    F'8'\nLDISPLY  DC    F'24'\nNDCCTERM DC    CL10'(DCCTERM)'\nBUFFER   DC    CL24'DISPLAY PANEL(DCCMAIN1)'\n         DS    0D\n         LTORG\nDCCDSECT DSECT\nPRGMSAVE DS    18F\nDCCTERM  DS    CL8\nASIDNUM  DS    F\nBASECALL DS    5F\n         IHAASCB\n         IKJTSB\n         END\n//LKED.SYSLIN  DD   DSN=SYS.SSI.IPLDATE,DISP=SHR\n//             DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//             DD   DDNAME=SYSIN\n//*    SYSLMOD DD   DSN=DCC.MVSXA.UTLIB,DISP=SHR\n//LKED.SYSLMOD DD   DSN=ZZ.TESTLIB,DISP=SHR\n//* ED.SYSLMOD DD   DSN=SYS1.TSOCALL,DISP=SHR\n//LKED.SYSLIB  DD   DSN=ISP.V2R3M0.ISPLOAD,DISP=SHR\n//LKED.SYSIN   DD   *\n NAME ISFTERM(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03JEFLD": {"ttr": 6413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x02\\xbc\\x02\\xbc\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 700, "newlines": 700, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPIKJD JOB '9999,C4003,8700    ',\n//    TSO,CLASS=H,PRTY=6,MSGCLASS=P,NOTIFY=TSOSYSJ\n//*****************************************************************\n//* TSO USER EXIT - MUST BE CHANGED IF PASSWORD CHANGED\n//*                 ***********************************\n//* STEP L2 COND CODE 8 ALLOWED WITH IKTINX2 MISSING\n//*****************************************************************\n//* THIS VERSION FOR NEW CBIPO XA 2.2\n//*****************************************************************\n//C        EXEC PGM=IEV90,PARM='OBJECT'\n//SYSLIB   DD   DSN=DCC.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSLIN   DD   UNIT=VIO,SPACE=(80,(400,50)),DISP=(,PASS)\n//SYSPRINT DD   SYSOUT=Q\n//SYSPUNCH DD   DUMMY\n//SYSUT1   DD   UNIT=VIO,SPACE=(1700,(400,50))\n//SYSIN    DD   *\nIKJEFLD  TITLE  'TSO USER LOGON EXIT'\n         REGEQS\n*******************************************************************\n*                                                                 *\n*   REGISTER USAGE                                                *\n*                                                                 *\n*   R1  = PUTGET PARAMETER LIST                                   *\n*   R2  = REGION SIZE / INPUT BUFFER                              *\n*   R3  = ACCOUNT TABLE ENTRY (USERID)                            *\n*   R4  = PROCEDURE NAME                                          *\n*   R5  = USER ID                                                 *\n*   R6  = PASSWORD                                                *\n*   R7  = CONTROL SWITCHES                                        *\n*   R8  = ECT                                                     *\n*   R9  = UPT                                                     *\n*   R10 = ACCOUNTING STRING                                       *\n*   R11 = TSO PARAMETER LIST                                      *\n*   R12 = BASE REGISTER                                           *\n*   R13 = WORK/SAVE AREA                                          *\n*                                                                 *\n*******************************************************************\n         IKJPGPB\n         PRINT NOGEN\nIKJEFLD  CSECT\n         USING ACCTDS,R3\n         USING ACCAREA,R10\n         USING ADDRLIST,R11\n         USING USERAREA,R13\n         USING IKJEFLD,R12\n         STM   R14,R12,12(R13)     SAVE REGS.\n         LR    R12,R15             ADDRESS PROGRAM CODE\n**  DO A GETMAIN NOW  - REG 13 WILL BE GOTTEN SAVE AND USER AREA\n         GETMAIN R,LV=400\n         ST    R13,4(,R1)         HIGH SAVE AREA\n         ST    R1,LSA              LOW SAVE AREA\n         LR    R13,R1              REG 13. IS NEW SAVE AREA\n         L     R1,HSA              USE REG1 FOR OLD SAVE AREA - THEN\n         LM    R0,R1,20(R1)        RESET REG0 AND REG1 FROM SAFE COPY\n         LR    R11,R1              REG 11 WILL BE PARM AREA\n*\n         L     R2,IBFDESC          ADDRESS INPUT BUFFER DESC\n         LH    R2,6(0,R2)          ADDRESS INPUT BUFFER LENGTH\n         CH    R2,=H'8'            USERID IN INPUT BUFFER\n         BH    BYPASS              YES - BYPASS\n*\n         MVI   TEKSW,X'00'         NOT TEKT.\n         GTSIZE\n         LTR   R0,R0               IS IT TEKT.\n         BNZ   NOTTEK0             NO\n         MVI   TEKSW,X'FF'         YES\nNOTTEK0  DS    0H\n         LOAD  EP=IKJGETL\n         ST    R0,AGET\n         LOAD  EP=IKJPUTL\n         ST    R0,APUT\n*\n         L     R8,ECTDESC          ADDRESS ECT\n         L     R8,0(0,R8)          ADDRESS ECT\n         L     R9,UPTDESC          ADDRESS UPT\n         L     R9,0(0,R9)          ADDRESS UPT\n*\n         L     R7,SWDESC           ADDRESS SWITCHES\n         L     R7,0(0,R7)          ADDRESS SWITCHES\n         OI    2(R7),X'C0'         MAIL AND NOTICES              CK\n         TM    0(R7),X'80'         TEST USER-ID IN USE\n         BO    INUSE\n*\nREUSE    DS    0H\n         L     R5,USERDESC         ADDRESS USERID\n         LA    R14,6(0,R5)         ADDRESS USERID LENGTH FIELD\n         MVC   0(2,R14),=H'7'      USERID LENGTH FIELD ALWAYS 7\n         L     R5,0(0,R5)          ADDRESS USERID\n*\n         L     R6,PASSDESC         ADDRESS PASSWORD\n         LA    R14,6(0,R6)         ADDRESS PASSWD LENGTH FIELD\n         MVC   0(2,R14),=H'8'      PASSWD LENGTH FIELD ALWAYS 8\n         L     R6,0(0,R6)          ADDRESS PASSWORD\n*\n         L     R4,PROCDESC         ADDRESS PROCNAME\n         LA    R14,6(0,R4)         ADDRESS PROCNM LENGTH FIELD\n         MVC   0(2,R14),=H'8'      PROCNM LENGTH FIELD ALWAYS 8\n         L     R4,0(0,R4)          ADDRESS PASSWORD\n*\n         L     R2,REGDESC          ADDRESS REGION SIZE\n*\n         L     R10,ACCDESC         ADDRESS ACCOUNT FIELD\n         LA    R14,6(0,R10)        ADDRESS ACCOUNT LENGTH FIELD\n         MVC   0(2,R14),=H'19'     ACCOUNT LENGTH FIELD ALWAYS 19\n         L     R10,0(0,R10)        ADDRESS ACCOUNT FIELD\n*\n         MVI   ACCRECD,C' '        QUOTE FIELD\n         MVC   ACCRECD+1(18),ACCRECD BLANK IT OUT\n         MVI   ACCOMMA1,C'.'       COMMA FIELD\n         MVI   ACCOMMA2,C'.'       COMMA FIELD\n         MVC   ACCCODE,=C'9999'    ACCOUNT CODE ALWAYS 9999\n         OI    0(R7),X'08'         SAY ACCOUNT CODE SUPPLIED\n*\n         STAX  ATTNEXIT,OBUF=(STAXMESS,46),IBUF=(STAXBUF,80),          *\n               MF=(E,STAXLIST)\nSTAXCLR  DS    0H\n         XC    STAXBUF,STAXBUF     CLEAR ATTN EXIT INPUT FIELD\n         EJECT\n**  FIND THE USERS COST CENTRE AND USER REFERENCE\n*\nDOUSER   DS    0H\n*\n         CLI   TEKSW,X'FF'\n         BE    DOUSER1\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1H,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOUSER1  DS    0H\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS1,                                        *****\n               OUTPUT=(LINE0A,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS1,                                        *****\n               OUTPUT=(LINE0B,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS1,                                        *****\n               OUTPUT=(LINE0C,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS1,                                        *****\n               OUTPUT=(LINE1,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   TEKSW,X'FF'\n         BE    DOUSER2\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1L,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOUSER2  DS    0H\n         L     R15,AGET\n         GETLINE PARM=GETBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS2,                                        *****\n               TERMGET=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS2)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   STAXBUF,0\n         BNE   STAXUSED\n*\n         L     R1,INAREA\n*        LA    R3,ACCTAB         DELETED BY APAR\n         MVC   INUSER,BLANK\n         OC    INUSER,4(R1)\n         CLC   INUSER,BLANK\n         BE    EXITOFF\n         CLC   INUSER,LOGOFF\n         BE    EXITOFF\nREDOPASS DS    0H\n         LA    R3,ACCTAB\nUSERLOOP DS    0H\n         CLC   INUSER,USERID\n         BE    DOPASS\n         BL    DOUSER\n         LA    R3,28(0,R3)\n         B     USERLOOP\n**\n         EJECT\n         PRINT NOGEN\nDOPASS   DS    0H\n*\n         CLI   TEKSW,X'FF'\n         BE    DOPASS1\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1H,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOPASS1  DS    0H\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE2,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   TEKSW,X'FF'\n         BE    DOPASS2\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1P,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOPASS2  DS    0H\n         L     R15,AGET\n         GETLINE PARM=GETBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS4,                                        *****\n               TERMGET=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS2)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   STAXBUF,0\n         BNE   STAXUSED\n*\n         L     R1,INAREA\n         MVC   INPASS,BLANK\n         OC    INPASS,4(R1)\nPASSLOOP DS    0H\n         CLC   INUSER,USERID\n         BL    REDOPASS\n         CLC   INPASS,PASSWORD\n         BE    PASSOK\n         LA    R3,28(0,R3)\n         B     PASSLOOP\n**\nPASSOK   DS    0H\n         MVC   0(7,R5),INUSER\n         MVC   0(8,R6),INPASS\n         MVC   0(8,R4),PROCNAME\n         MVC   0(4,R2),F4096\n*\n         EJECT\nDOCHGE   DS    0H\n*\n         CLI   TEKSW,X'FF'\n         BE    DOCHGE1\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1H,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOCHGE1  DS    0H\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS1,                                        *****\n               OUTPUT=(LINE3,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   TEKSW,X'FF'\n         BE    DOCHGE2\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1L,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOCHGE2  DS    0H\n         L     R15,AGET\n         GETLINE PARM=GETBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS2,                                        *****\n               TERMGET=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS2)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   STAXBUF,0\n         BNE   STAXUSED\n*\n         L     R1,INAREA\n         OC    ACCCENTR,4(R1)\n         CLC   ACCCENTR,BLANK\n         BNE   DOUREF\n         MVC   ACCCENTR,CHGECNTR\n**\n         EJECT\nDOUREF   DS    0H\n*\n         CLI   TEKSW,X'FF'\n         BE    DOUREF1\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1H,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOUREF1  DS    0H\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE4,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   TEKSW,X'FF'\n         BE    DOUREF2\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE1L,TERM,SINGLE,DATA),                   *****\n               TERMPUT=(WAIT,CONTROL),                             *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\nDOUREF2  DS    0H\n         L     R15,AGET\n         GETLINE PARM=GETBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS4,                                        *****\n               TERMGET=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS2)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   STAXBUF,0\n         BNE   STAXUSED\n*\n         L     R1,INAREA\n         OC    ACCUSERR,4(R1)\n         TR    ACCRECD,CHARTAB\n         EJECT\nEXIT     EQU   *\n         STAX\nBYPASS   EQU   *\n**       EOJ\n         LR    R1,R13\n         L     R13,HSA\n         FREEMAIN R,LV=400,A=(R1)\n         L     R14,REG14\n         LM    R0,R12,REG0\n         LA    R15,0\n         BR    R14\n*\nATTNEXIT DS    0H\n         LA    R15,0\n         BR    R14\n*\nSTAXUSED DS    0H\n         CLI   STAXBUF,C'Y'\n         BE    STAXCLR\n         CLI   STAXBUF,X'A8'\n         BE    STAXCLR\nIOERROR  DS    0H\n         OI    0(R7),X'10'\n         B     EXIT\n*\nINUSE    DS    0H\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE5,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         L     R15,APUT\n         PUTLINE PARM=PUTBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS3,                                        *****\n               OUTPUT=(LINE6,TERM,SINGLE,DATA),                    *****\n               TERMPUT=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS1)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         L     R15,AGET\n         GETLINE PARM=GETBLOCK,                                    *****\n               UPT=(R9),                                           *****\n               ECT=(R8),                                           *****\n               ECB=ECBADS4,                                        *****\n               TERMGET=(WAIT,EDIT),                                *****\n               ENTRY=(15),                                         *****\n               MF=(E,IOPLADS2)\n*\n         LTR   R15,R15\n         BNZ   IOERROR\n*\n         CLI   STAXBUF,0\n         BNE   STAXUSED\n*\n         L     R1,INAREA\n         CLI   4(R1),C'N'\n         BE    REUSE\n         NI    0(R7),X'80'\n         CLI   4(R1),C'Y'\n         BE    EXIT\nEXITOFF  DS    0H\n         OI    0(R7),X'10'\n         B     EXIT\n*\nSTAXMESS DC    C'I/O INTERRUPT, REPLY ''Y'' TO RETRY, ''N'' TO QUIT'\n*\nLINE1H   DC    H'7'\n         DC    H'0'\n         DC    XL3'1DF815'           HIGH-INTENSITY PROT FIELD\nLINE1L   DC    H'7'\n         DC    H'0'\n         DC    XL3'1D4015'           LOW-INTENSITY UNPROT FIELD\nLINE1P   DC    H'7'\n         DC    H'0'\n         DC    XL3'1D4C15'           NON-DISPLAY CHARACTER\nLINE0A   DC    H'29'\n         DC    H'0'\n         DC    CL25'THIS IS THE NEW TSO LOGON'\nLINE0B   DC    H'37'\n         DC    H'0'\n         DC    CL33'DO NOT SWITCH OFF IN THIS DISPLAY'\nLINE0C   DC    H'33'\n         DC    H'0'\n         DC    CL29'USE <PA1> OR LOGOFF TO ESCAPE'\nLINE1    DC    H'16'\n         DC    H'0'\n         DC    CL12'ENTER USERID'\nLINE2    DC    H'18'\n         DC    H'0'\n         DC    CL14'ENTER PASSWORD'\nLINE3    DC    H'54'\n         DC    H'0'\n         DC    CL50'ENTER CHARGE CENTRE CODE, OR BLANK FOR DEFAULT'\nLINE4    DC    H'54'\n         DC    H'0'\n         DC    CL50'ENTER USER REFERENCE, BLANK IS DEFAULT'\nLINE5    DC    H'54'\n         DC    H'0'\n         DC    CL50'USER-ID IN USE, ''Y'' - ATTEMPT RECONNECT'\nLINE6    DC    H'54'\n         DC    H'0'\n         DC    CL50'''N'' - TRY ANOTHER LOGON, ''Q'' - QUIT'\nBLANK    DC    CL8' '\nLOGOFF   DC    CL8'LOGOFF'\nF4096    DC    F'4096'\n*\n         LTORG\n*\nCHARTAB  DC    256C'#'\n         ORG   CHARTAB+C'.'\n         DC    C'.'\n         ORG   CHARTAB+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   CHARTAB+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   CHARTAB+C'S'\n         DC    C'STUVWXYZ'\n         ORG   CHARTAB+C'0'\n         DC    C'0123456789'\n         ORG   CHARTAB+256\n         EJECT\nACCTAB   DS    0F\n         DC    CL7'IBMUSER',CL8'IBMUSER ',CL5'C4003',CL8'IKJACCNT'\n*\n*                  *USER**      **PASS**      *ACC*      **PROC**\n*                  *USER**      **PASS**      *ACC*      **PROC**\n*                  *USER**      **PASS**      *ACC*      **PROC**\n*                  *USER**      **PASS**      *ACC*      **PROC**\n*\nTABEND   DC    XL8'FFFFFFFFFFFFFFFF'\n*                                                                     *\nACCTDS   DSECT\nUSERID   DS    CL7\nPASSWORD DS    CL8\nCHGECNTR DS    CL5\nPROCNAME DS    CL8\n*\nACCAREA  DSECT\nACCRECD  DS    0CL19\nACCCODE  DS    CL4\nACCOMMA1 DS    CL1\nACCCENTR DS    CL5\nACCOMMA2 DS    CL1\nACCUSERR DS    CL8\nUSERAREA DSECT\n         DS    F\nHSA      DS    F\nLSA      DS    F\nREG14    DS    F\nREG15    DS    F\nREG0     DS    13F\nPUTBLOCK DS    F\n         DS    F\n         DS    F\n         DS    F\nGETBLOCK DS    F\nINAREA   DS    F\n         DS    F\n         DS    F\nIOPLADS1 DS    F\n         DS    F\n         DS    F\n         DS    F\nIOPLADS2 DS    F\n         DS    F\n         DS    F\n         DS    F\nECBADS1  DS    F\nECBADS2  DS    F\nECBADS3  DS    F\nECBADS4  DS    F\nAGET     DS    F\nAPUT     DS    F\nTEKSW    DS    CL1\nINUSER   DS    CL7\nINPASS   DS    CL8\nSTAXLIST DS    6F\nSTAXBUF  DS    CL80\n*\nADDRLIST DSECT\nSWDESC   DS    F                   SWITCHES\nIBFDESC  DS    F                   INPUT BUFFER\nUSERDESC DS    F                   USER-ID\nPASSDESC DS    F                   PASSWORD\nACCDESC  DS    F                   ACCOUNT FIELD\nPROCDESC DS    F                   PROCEDURE\nREGDESC  DS    F                   REGION SIZE\nJCLDESC  DS    F                   JCL\nNEWPDESC DS    F                   NEW PASSWORD\nSYSADESC DS    F                   SYSTEM ATTRIBUTE\nUSRADESC DS    F                   USER ATTRIBUTE\nGENRDESC DS    F                   GENERIC UNIT\nUPTDESC  DS    F                   UPT\nECTDESC  DS    F                   ECT\nCECBDESC DS    F                   CANCEL ECB\nLSCCDESC DS    F                   LAST STEP COMP CODE\nPGRDESC  DS    F                   PERFORMANCE GROUP\nSYSODESC DS    F                   DEFAULT SYSOUT DEST\nGRPDESC  DS    F                   GROUP\n         END\n/*\n//L        EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS,NCAL',COND=(8,LE,C)\n//SYSLIB   DD   DSN=DCC.SUBLIB,DISP=SHR\n//SYSLIN   DD   DSN=*.C.SYSLIN,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSIN    DD   *\n NAME IKJEFLD(R)\n//SYSLMOD  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSPRINT DD   SYSOUT=P\n//SYSUT1   DD   UNIT=VIO\n/*\n//L2       EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS,LET'\n//SYSPRINT DD   SYSOUT=P\n//SYSUT1   DD   UNIT=VIO\n//LPALIB   DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSLMOD  DD   DSN=DCC.EXITLIB,DISP=SHR\n//* SYSLMOD  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSLIB   DD   DSN=DCC.SUBLIB,DISP=SHR\n//TESTLIB  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSLIN   DD   *\n  INCLUDE TESTLIB(IKJEFLD)\n  INCLUDE LPALIB(IKJEFLA)\n ORDER   IKJEFLA(P),IKJEFLIO\n ORDER   IKTLOGFF\n ORDER   IKJEFLP1,IKJEFTBL\n ORDER   IKTIIOM,IKTXINIT\n ORDER   IKTXLOG,IKTLOGR,IKTRPLXT\n ENTRY   IKJEFLA\n  NAME IKJEFLA(R)\n//******** GENERATE END OF JOB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03LLOW": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x02\\x10\\x02\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 528, "newlines": 528, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPUTAL JOB  '9999,C4003,UTALLOW ',\n//     'JOHN/209',CLASS=H,MSGCLASS=P,PRTY=9,NOTIFY=TSOSYSJ\n//         EXEC ASMFCL,\n//       MAC='DCC.MACLIB',\n//       MAC1='SYS1.MACLIB',\n//       PARM.LKED='(LIST,AC=1,XREF)'\n//ASM.SYSIN DD  *\nUTALLOW  CSECT\n         PRINT NOGEN\nUTALLOW  BEGIN R12\n**\n**       UTALLOW LOGIC - AS FAR AS ITS GOT ANY\n**\n**       1) PROCESS PARM FIELD, IF SUPPLIED.\n**\n**       2) FIND OUR JOB-NAME (FROM EXTRACT TIOT), AND IF ALLOW,\n**          EXCLUDE AND REQUIRE MEMBERS ARE PROVIDED (FROM TIOT).\n**\n**       3) LOAD THE ALLOW AND EXCLUDE MEMBERS AND CONVERT MASKS.\n**          LOAD THE REQUIRE MEMBER.\n**          NULL FILES INDICATE FEATURE NOT NEEDED.\n**\n**       4) LOCATE AND SCAN THE ADDRESS SPACE TABLE (ASVT), FOR EACH\n**          ADDRESS SPACE :-\n**\n**          A) IS IT OURS, ALWAYS ALLOW-ED.\n**          B) IS IT REQUIRED, MARK IT, ALWAYS ALLOW-ED.\n**          C) IS IT STANDARD, GO TO SPECIFIC EXCLUDE (F).\n**          D) IS IT SPECIFIC ALLOW-ED, GO TO SPECIFIC EXCLUDE (F).\n**          E) IF NOT ON ALLOW LISTS, PRESUME EXCLUDE.\n**          F) IF ON ALLOW LISTS, TRY SPECIFIC EXCLUDE.\n**          G) IF EXCLUDED, GIVE WARNING MESSAGE.\n**\n**       5) ALL ADDRESS SPACES SCANNED, CHECK ALL REQUIRES SATISFIED.\n**\n**       6) IF ANY EXCLUSION FOUND, OR ANY REQUIRES NOT SATISFIED :-\n**          TAKE ACTION FROM PARM (IF ANY),\n**          OTHERWISE, ISSUE MESSAGE THEN TAKE ACTION:-\n**\n**          R) ONLY FROM OPERATOR- ISSUE JES2 RESET COMMAND TO REQUEUE\n**          W) FROM PARM - TIMER FOR 1 MINUTE, THEN LOOP BACK TO (4)\n**          W) FROM OPERATOR  - LOOP BACK TO (4) THEN TIMER FOR 1 MIN.\n**          I) FROM OPERATOR - ISSUE CONFIRM MESSAGE, THEN :-\n**\n**                    EXIT COND CODE 0  - CONFIRMED.\n**                    BACK TO (6)       - NOT CONFIRMED.\n**\n**          ANY OTHER REPLY - ABEND U0999 AND DUMP.\n**\n**       7) IF NO EXCLUSION FOUND, ALL REQUIRES SATISFIED -\n**           - EXIT CONDITION CODE 0.\n**\n         REGEQS\n         EJECT\n**\n**       STAGE 1 - PROCESS PARM.\n**\n         L     R14,0(0,R1)               FIND PARM FIELD\n         LH    R15,0(0,R14)               FIND PARM FIELD LENGTH\n         LTR   R15,R15                   IS IT ZERO\n         BZ    NOPARM                    NOPARM - USE WTOR\n         CLI   2(R14),C'W'               IS IT WAIT\n         BNE   NOPWAIT\n         MVI   WAITFLG,C'Y'              YES, ALWAYS WAIT\n         B     NOPARM                    FINISHED WITH PARM\nNOPWAIT  DS    0H\n         CLI   2(R14),C'C'               IS IT CANCEL\n         BNE   NOPCANC\n         MVI   ABENDFLG,C'Y'              YES, ALWAYS ABEND\n         B     NOPARM                    FINISHED WITH PARM\nNOPCANC  DS    0H\n         CLI   2(R14),C'I'               IS IT IGNORE\n         BNE   NOPARM                   NO - NO PARM - USE WTOR\n         MVI   IGNFLG,C'Y'              YES, ONLY INFORM\n**\n**       STAGE 2 - PROCESS TIOT.\n**\nNOPARM   DS    0H\n         EXTRACT TIOTAD,FIELDS=(TIOT,COMM)\n         USING TIOT1,R15\n         L     R15,TIOTAD\n         MVC   OURJOB,TIOCNJOB         STORE OUR JOB NAME\n         LA    R10,50                  PRESET MAX COUNT\nDDLOOP   DS    0H\n         CLC   TIOEDDNM,=C'ALLOW   '   FOUND THE ALLOW DD CARD ?\n         BNE   NODDALL\n         MVI   ALLDDFLG,C'Y'           YES - FLAG FOR IT.\nNODDALL  DS    0H\n         CLC   TIOEDDNM,=C'EXCLUDE '   FOUND THE EXCLUDE DD CARD\n         BNE   NODDEXC\n         MVI   EXCDDFLG,C'Y'           YES - FLAG FOR IT\nNODDEXC  DS    0H\n         CLC   TIOEDDNM,=C'REQUIRE '   FOUND THE REQUIRE DD CARD\n         BNE   NODDREQ\n         MVI   REQDDFLG,C'Y'           YES - FLAG FOR IT\nNODDREQ  DS    0H\n         XR    R14,R14\n         IC    R14,TIOELNGH            THIS ENTRY LENGTH\n         LTR   R14,R14\n         BZ    ENDDLOOP                ZERO - DONE WITH TIOT\n         LA    R15,0(R14,R15)          GO TO NEXT ENTRY\n         BCT   R10,DDLOOP\nENDDLOOP DS    0H\n         EJECT\n**\n**       STAGE 3 - PROCESS INPUT CARDS\n**\n         LA    R7,0                    PRESET COUNT\n         CLI   ALLDDFLG,C'Y'           ALLOW DD CARD\n         BNE   ENDOFALL                NO - NULL ALLOW\n         LA    R10,50                  PRESET MAX COUNT\n         L     R5,ASIDTB2A             PRESET ADDRESS\n         OPEN  (ALLOW)\nLOOPALL  DS    0H\n         GET   ALLOW,INREC             FIND ALLOWED JOBS\n         MVC   INMASK,INJOB            MASK FOR\n         TR    INMASK,TRANTAB                ALLOWED\n         OC    INJOB,INMASK                          JOBS\n         MVC   0(16,R5),INREC          STORE ALLOWED JOBS\n         LA    R5,16(0,R5)             ADDRESS NEXT JOB\n         LA    R7,1(0,R7)              COUNT ALLOWED JOBS\n         BCT   R10,LOOPALL\nENDOFALL DS    0H\n         ST    R7,ASIDTB2L             STORE TABLE SIZE\n         CLOSE (ALLOW)\n         LA    R7,0                    PRESET COUNT\n         CLI   EXCDDFLG,C'Y'           EXCLUDE DD CARD\n         BNE   ENDOFEXC                NO - NULL EXCLUDE\n         LA    R10,50                  PRESET MAX COUNT\n         L     R5,ASIDTB3A             PRESET ADDRESS\n         OPEN  (EXCLUDE)\nLOOPEXC  DS    0H\n         GET   EXCLUDE,INREC           FIND FORBIDDEN JOBS\n         MVC   INMASK,INJOB            MASK FOR\n         TR    INMASK,TRANTAB                FORBIDDEN\n         OC    INJOB,INMASK                            JOBS\n         MVC   0(16,R5),INREC          STORE FORBIDDEN JOBS\n         LA    R5,16(0,R5)             ADDRESS NEXT JOB\n         LA    R7,1(0,R7)              COUNT FORBIDDEN JOBS\n         BCT   R10,LOOPEXC\nENDOFEXC DS    0H\n         ST    R7,ASIDTB3L             STORE TABLE SIZE\n         CLOSE (EXCLUDE)\n         LA    R7,0                    PRESET COUNT\n         CLI   REQDDFLG,C'Y'           REQUIRE DD CARD\n         BNE   ENDOFREQ                NO - NULL REQUIRE\n         LA    R10,50                  PRESET MAX COUNT\n         L     R5,ASIDTB1A             PRESET ADDRESS\n         OPEN  (REQUIRE)\nLOOPREQ  DS    0H\n         GET   REQUIRE,INREC           FIND REQUIRED JOBS\n         MVI   INMASK,C'N'             PRESET NOT FOUND\n         MVC   0(9,R5),INREC           STORE REQUIRED JOBS\n         LA    R5,9(0,R5)              ADDRESS NEXT JOB\n         LA    R7,1(0,R7)              COUNT REQUIRED JOBS\n         BCT   R10,LOOPREQ\nENDOFREQ DS    0H\n         ST    R7,ASIDTB1L             STORE TABLE SIZE\n         CLOSE (REQUIRE)\n         EJECT\n**\n**       STAGE 4 - PROCESS ADDRESS SPACES (THIS IS RESTART POINT)\n**\nRETRY    DS    0H\n         LA    R7,0                    PRESET EVENTUAL RETURN CODE\n         LA    R11,0                   INIT ASCB  INDEX\n         L     R4,16                   A(CVT)\n         L     R4,556(R4)              POINT TO ASVT\n         L     R10,516(R4)              POINT TO ASVT COUNTER\nASIDLOOK DS    0H\n         LA    R9,528(R4,R11)          POINT TO ASCB POINTER\n         TM    0(R9),X'80'             IS THIS A FREE ONE ?\n         BO    NEXTASCB                GO AND GET NEXT ASCB\n         L     R9,0(R9)                POINT TO ASCB\n         ICM   R1,B'1111',172(R9)      POINT TO JOBNAME POINTER\n         BNZ   CHKNAME\n         ICM   R1,B'1111',176(R9)      IS THIS STC/MOUNT/LOGON\n         BZ    NEXTASCB                END IF NOT ONE OF THESE EITHER\nCHKNAME  DS    0H\n*\n* 1ST LOOP - REQUIRED JOBS\n*\n         LA    R5,ASIDTB1              LOCATE TABLE\n         L     R15,ASIDTB1L            LOCATE TABLE\n         LTR   R15,R15                 NOT ZERO\n         BZ    TRYOURS                 IS ZERO - NO REQUIRES TO DO\nCHKLOOP  DS    0H\n         CLC   0(8,R1),0(R5)           IS IT REQUIRED\n         BE    MARKREQ                 YES MARK IT\n         LA    R5,9(0,R5)              NO TRY ANOTHER\n         BCT   R15,CHKLOOP\n         B     TRYOURS                 NOT REQUIRED, MIGHT BE OURS\n*\nMARKREQ  DS    0H\n         MVI   8(R5),C'Y'              MARK AS FOUND\n         B     NEXTASCB                MUST ALLOW\n*\nTRYOURS  DS    0H\n         CLC   0(8,R1),OURJOB          IS IT THIS JOB\n         BE    NEXTASCB                YES - OK\n*\n* 2ND LOOP - STANDARD JOBS\n*\n         LA    R5,ASIDTAB              LOCATE TABLE\n         L     R15,ASIDTABL            LOCATE TABLE\nCHKLOOP1 DS    0H\n         CLC   0(8,R1),0(R5)            IS IT ALLOWED\n         BE    TRYEXCL                 YES TRY SPECIFIC.\n         LA    R5,8(0,R5)              NO TRY ANOTHER\n         BCT   R15,CHKLOOP1\n*\n* 3RD LOOP - SPECIFIC ALLOWS\n*\n         L     R5,ASIDTB2A             LOCATE TABLE\n         L     R15,ASIDTB2L            LOCATE TABLE\n         LTR   R15,R15                 IS IT NULL\n         BZ    ERRMESS                 NOT ALLOWED\nCHKLOOP2 DS    0H\n         MVC   TESTJOB,0(R1)           MOVE TO TESTAREA\n         OC    TESTJOB,8(R5)           PUT ON MASK\n         CLC   TESTJOB,0(R5)           TEST AGAINST MASK\n         BE    TRYEXCL                 YES TRY SPECIFIC.\n         LA    R5,16(0,R5)              NO TRY ANOTHER\n         BCT   R15,CHKLOOP2\n         MVC   JOBNAME,0(R1)           MOVE IN JOBNAME\n         B     ERRMESS\n*\n* 4TH LOOP - SPECIFIC EXCLUDES\n*\nTRYEXCL  DS    0H\n         L     R5,ASIDTB3A             LOCATE TABLE\n         L     R15,ASIDTB3L            LOCATE TABLE\n         LTR   R15,R15                 IS IT NULL\n         BZ    NEXTASCB                ALLOWED\nCHKLOOP3 DS    0H\n         MVC   TESTJOB,0(R1)           MOVE TO TESTAREA\n         OC    TESTJOB,8(R5)           PUT ON MASK\n         CLC   TESTJOB,0(R5)           TEST AGAINST MASK\n         BE    ERRMESS                 YES TROUBLE\n         LA    R5,16(0,R5)              NO TRY ANOTHER\n         BCT   R15,CHKLOOP3\n         B     NEXTASCB                WE ARE OK SO FAR\nERRMESS  DS    0H\n         MVC   JOBNAME,0(R1)           MOVE IN JOBNAME\n         WTO   MF=(E,WTOMSG)\n         ST    R1,MESSID(R7)           STORE MESSAGE ID FOR DOM\n         LA    R7,4(0,R7)              COUNT FORBIDDEN JOBS\nNEXTASCB DS    0H\n         LA    R11,4(R11)              UP TO NEXT ASCB\n         BCT   R10,ASIDLOOK                GO AND HAVE A LOOK AT IT\n         EJECT\n**\n**       STAGE 5 - PROCESS REQUIRES.\n**\n         L     R11,ASIDTB1A\n         L     R10,ASIDTB1L\n         LTR   R10,R10                 ANY REQUIRES TO CHECK\n         BZ    CHECKALL                NO - FINAL CHECK\n*\nREQMESS  DS    0H\n         CLI   8(R11),C'N'               REQUIRE OUTSTANDING\n         BNE   NXTRMESS                  NO - NEXT ONE\n         MVC   JOBNAME2,0(R11)           MOVE IN JOBNAME\n         WTO   MF=(E,WTOMSG2) ERROR MESSAGE\n         ST    R1,MESSID(R7)           STORE MESSAGE ID FOR DOM\n         LA    R7,4(0,R7)              COUNT PROBLEM JOBS\nNXTRMESS DS    0H\n         LA    R11,9(0,R11)              GO TO NEXT JOB\n         BCT   R10,REQMESS\n**\n**       STAGE 6 - PROCESS RESULTS.\n**\nCHECKALL DS    0H\n         LTR   R15,R7                  ANY PROBLEM JOBS FOUND\n         BZ    EXIT                    NO - FINISHED AT LAST\n         CLI   WAITFLG,C'Y'            ALREADY WAITING\n         BE    WAIT                    WAIT AGAIN\n         CLI   ABENDFLG,C'Y'           MUST ABEND\n         BE    ABEND                   ABEND IT\n         CLI   IGNFLG,C'Y'             ONLY INFORM\n         BE    INFORM                  INFORM ON IT, THEN EXIT\nDOWTOR   DS    0H\n         MVC   REALJOB,OURJOB          MOVE JOBNAME TO WTOR\n         XC    ECBFLD,ECBFLD           CLEAR ECB BEFORE USE\n         WTOR  ,REPLYFLD,6,ECBFLD,MF=(E,WTOR1)\n         WAIT  ECB=ECBFLD              WAIT FOR REPLY\n         OI    REPLYFLD,X'40'          UPPER-CASE\n         CLI   REPLYFLD,C'R'           IS IT REQUEUE\n         BE    REQUEUE                 YES - REQUEUE IT\n         CLI   REPLYFLD,C'W'           IS IT WAIT\n         BE    REDO                    YES - TRY AGAIN\n         CLI   REPLYFLD,C'I'           IS IT IGNORE\n         BE    IGNORE                  YES - DO IGNORE VERIFY MSG\n**\n**       STAGE 6A - ABEND\n**\nABEND    DS    0H\n         ABEND 999,DUMP                OTHER ERRORS - ABEND\n**\n**       STAGE 6R - RE-QUEUE OURSELVES\n**\nREQUEUE  DS    0H\n         BAL   R9,MESSDEL               DELETE THE MESSAGES\n*        PRINT GEN\n         MODESET MODE=SUP,KEY=ZERO      MODESET FOR SUB-SYSTEM CALL\n         USING SSOB,R10                 SUB SYSTEM OPTIONS BLOCK\n         LA    R10,OURSSOB              INITIALISE SSOB\n         MVC   SSCSLEN,=AL2(SSCSIZE)    SSOB SIZE FOR CANCEL/STATUS\n         MVC   SSCSJOBN,OURJOB          OUR JOB IN SSOB\n         MVC   SSCSJOBI,=CL8' '         DONT KNOW JOB NUMBER\n         LA    R15,SSCSLEN              ADDRESS CANCEL/STATUS BITS\n         ST    R15,SSOBINDV             STORE IN SSOB\n         MVC   SSCSDIMP,=H'512'         MAX 32 JOBS\n         OI    SSOBPTR,X'80'            SET SSOB POINTER\n         LA    R1,SSOBPTR\n         IEFSSREQ                       SUB SYSTEM CALL TO JES2\n*        PRINT NOGEN\n         LH    R15,SSCSDIMR              HOW MANY JOBS\n         SRL   R15,4                      DIVIDE 16\nLOOPSSCS DS    0H\n         TM    SSCSFLG1,SSCSJACT         IS THIS US, THE ACTIVE JOB\n         BO    DOREQ                     YES - WE HAVE OR JOB NUMBER\n         LA    R10,16(0,R10)             NO, NEXT ONE\n         BCT   R15,LOOPSSCS\n         B     ABEND                     SSOB NO GOOD - ABEND\n         LA    R15,520                  FIND IF\n         L     R15,0(0,R15)                  3090\n         MVC   MACTYPE,12(R15)                 OR\n         CLC   MACTYPE,=C'4381'                   4381\n         BNE   DOREQ\n         MVI   CMDCHAR,C'-'              JES2 COMMANDS  - ON 4381\nDOREQ    DS    0H\n         MVC   CMDJOBNO,SSCSARID+4             RE-QUEUE OURSELVES\n         XR    R0,R0\n         LA    R1,CMDAREA\n         SVC   34\n         MVI   CMDTYPE,C'H'                    HOLD OURSELVES\n         XR    R0,R0\n         LA    R1,CMDAREA\n         SVC   34\n         MVI   CMDTYPE,C'C'                    CANCEL OURSELVES\n         XR    R0,R0\n         LA    R1,CMDAREA\n         SVC   34\n         MODESET MODE=PROB,KEY=NZERO           OUT OF HIGH POWER MODE\n         XC    AUTOECB,AUTOECB                 CLEAR AN ECB\n         WAIT  ECB=AUTOECB                     WAIT UNTIL CANCELLED\n**\n**       STAGE 6W - WAIT PROCESSING\n**\nWAIT     DS    0H\n         XC    AUTOECB,AUTOECB                CLEAR THE TIMER ECB\n         MVC   WTO1+4(8),OURJOB               OUR JOB TO WTO\n         WTO   MF=(E,WTO1)                    TELL EVERYBODY\n         ST    R1,MESSID1                     STORE FOR DOM\n         STIMER REAL,TIMEX,DINTVL=INTERVAL    SET THE TIMER\n         WAIT  ECB=AUTOECB                    AND WAIT FOR IT\n         L     R1,MESSID1                     CLEAR OLD MESSAGE\n         DOM   MSG=(R1)\n**\n**  WAIT PROCESSING, ENTRY FROM WTOR\n**\nREDO     DS    0H\n         MVI   WAITFLG,C'Y'                   FLAG - WE ARE WAITING\n         BAL   R9,MESSDEL                     DELETE OLD MESSAGES\n         B     RETRY                          TRY AGAIN\n         EJECT\n**\n**       STAGE 6I - IGNORE/INFORM PROCESSING\n**\nIGNORE   DS    0H\n         MVC   WTOR2+12(8),OURJOB             OUR JOB TO WTOR\n         XC    ECBFLD,ECBFLD                       CLEAR AN ECB\n         WTOR  ,REPLYFLD,1,ECBFLD,MF=(E,WTOR2)      OK TO IGNORE ??\n         WAIT  ECB=ECBFLD                          WAIT FOR REPLY\n         OI    REPLYFLD,X'40'                      UPPER CASE\n         CLI   REPLYFLD,C'Y'                       IS IT REPLY - Y\n         BNE   DOWTOR                              NO - DO WTOR AGAIN\nINFORM   DS    0H\n         BAL   R9,MESSDEL                     DELETE OLD MESSAGES\n         MVC   WTO2+4(8),OURJOB               OUR JOB TO WTO\n         WTO   MF=(E,WTO2)                    TELL EVERYBODY WE RUN\n**\n**       STAGE 7 - FINISHED AT LAST\n**\nEXIT     DS    0H\n         XR    R15,R15                 CLEAR R15\n         L     R13,4(R13)              RELOAD R13\n         RETURN (14,12),RC=(15)        RETURN TO SENDER\n         EJECT\n**\n**       POST ECB EXIT FOR STIMER\n**\nTIMEX    DS    0H\n         POST  AUTOECB                POST TIMER ECB\n         XR    R15,R15                CLEAR R15\n         BR    R14                    GO BACK TO CALLER\n**\n**       MESSAGE DELETE ROUTINE\n**\nMESSDEL  DS    0H\n         LA    R4,MESSID              LOCATE MESSAGE ID TABLE\n         SRL   R7,2                   DIVIDE BY 4 FOR COUNT\nDELLOOP  DS    0H\n         L     R1,0(0,R4)             MESSAGE ID TO DELETE\n         DOM   MSG=(R1)               DELETE IT\n         LA    R4,4(0,R4)             NEXT MESSAGE ID\n         BCT   R7,DELLOOP             LOOP BACK\n         BR    R9                     ALL DONE, BACK TO CALLER\n*\n         EJECT\n         DS    0D\nINREC    DS    0CL80                 INPUT RECORD\nINJOB    DS    CL8                   JOB NAME\nINMASK   DS    CL8                   MASK - IF APPLICABLE\n         DS    CL64                  SPARE\nTESTJOB  DS    CL8                   WORK FIELD FOR TESTING MASKED JOB\nOURJOB   DS    CL8                   OUR JOB NAME\nINTERVAL DC    CL8'00010000'         TIMER INTERVAL - 1 MINUTE\nREPLYFLD DS    CL6                   FIELD FOR REPLY\nWAITFLG  DC    C'N'                  WAIT FLAG\nIGNFLG   DC    C'N'                  IGNORE/INFORM FLAG\nABENDFLG DC    C'N'                  ABEND FLAG\nALLDDFLG DC    C'N'                  FLAG - ALLOW DD PRESENT\nEXCDDFLG DC    C'N'                  FLAG - EXCLUDE DD PRESENT\nREQDDFLG DC    C'N'                  FLAG - REQUIRE DD PRESENT\n         DS    0D\nECBFLD   DC    F'0'                   ECB FOR WTORS\nAUTOECB  DC    F'0'                   ECB FOR TIMER\nTIOTAD   DS    F\nCOMMAD   DS    F\nWTOR1    WTOR  'XXXXXXXX WAITING FOR JOBS, REPLY - R(EQUEUE), W(AIT), I*\n               (GNORE) OR C(ANCEL)',MF=L\nREALJOB  EQU   WTOR1+12,8\nWTOR2    WTOR  'XXXXXXXX REPLY Y TO CONTINUE',MF=L\n*\nWTOMSG   WTO   'XXXXXXXX IS RUNNING',ROUTCDE=(1,11),DESC=(1),MF=L\nJOBNAME  EQU   WTOMSG+4,8\nWTOMSG2  WTO   'XXXXXXXX IS NOT RUNNING',ROUTCDE=(1,11),DESC=(1),MF=L\nJOBNAME2 EQU   WTOMSG2+4,8\nWTO1     WTO   'XXXXXXXX WILL RUN WHEN READY',DESC=(2),MF=L\nWTO2     WTO   'XXXXXXXX ALLOWED TO RUN',DESC=(2),MF=L\nALLOW    DCB   DDNAME=ALLOW,DSORG=PS,MACRF=(GM),RECFM=FB,              *\n               EODAD=ENDOFALL\nEXCLUDE  DCB   DDNAME=EXCLUDE,DSORG=PS,MACRF=(GM),RECFM=FB,            *\n               EODAD=ENDOFEXC\nREQUIRE  DCB   DDNAME=REQUIRE,DSORG=PS,MACRF=(GM),RECFM=FB,            *\n               EODAD=ENDOFREQ\nTRANTAB  DS    0D                            TRANSLATE TABLE FOR\n         DC    CL16' '                                  MASKING\n         DC    CL16' '                       ALSO FORCES UPPER CASE\n         DC    CL16' '                            JOB NAMES\n         DC    CL16' '\n         DC    CL10' ',XL6'40404040FF40'      +\n         DC    CL10' ',XL6'4040FF404040'      *\n         DC    CL10' ',XL6'4040404040FF'      ?\n         DC    CL10' ',XL6'4040FFFF4040'      @ #\n         DC    CL128' '\n* ADCONS ARE USED NOW TO ALLOW ADDRESSABILTY BEYOND OFFSET 4096.\nASIDTABL DC    A((ASIDTABE-ASIDTAB)/8)       STANDARD JOBS\nASIDTB1L DC    A(0)                          REQUIRE\nASIDTB2L DC    A(0)                          ALLOW\nASIDTB3L DC    A(0)                          EXCLUDE\nASIDTB1A DC    A(ASIDTB1)\nASIDTB2A DC    A(ASIDTB2)\nASIDTB3A DC    A(ASIDTB3)\nASIDTAB  DS    0D\n         DC    CL8'INIT    '\n         DC    CL8'*MASTER*'\n         DC    CL8'PCAUTH  '\n         DC    CL8'TRACE   '\n         DC    CL8'GRS     '\n         DC    CL8'DUMPSRV '\n         DC    CL8'CONSOLE '\n         DC    CL8'ALLOCAS '\n         DC    CL8'LLA     '\n         DC    CL8'SMF     '\n         DC    CL8'JES2    '\n         DC    CL8'CATALOG '\n         DC    CL8'APSWPROA'\n         DC    CL8'JESA    '\n         DC    CL8'TSO     '\n         DC    CL8'NET     '\n         DC    CL8'SYSMON  '\n         DC    CL8'BBVTM   '\n         DC    CL8'CMF     '\n         DC    CL8'CICS0   '\n         DC    CL8'CICSNITE'\nASIDTABE DS    0D\nMESSID1  DS    F                       MESSAGE IDS\nMESSID   DS    50F                       FOR DOM-S\nMACTYPE  DS    CL4                     MACHINE WE ARE ON\nCMDAREA  DS    0F\n         DC    AL2(CMDLEN),AL2(0)      AREA FOR JES2 COMMANDS\nCMDCHAR  DC    C'.'                      CHANGE TO - FOR 4381\nCMDTYPE  DC    C'E'\n         DC    C'J'\nCMDJOBNO DC    C'XXXX'                   JOB NUMBER FROM JES2 SS CALL\nCMDLEN   EQU   *-CMDAREA\n         LTORG\n         DS    0D\nSSOBPTR  DC    A(OURSSOB)               POINTER  TO SSOB\nOURSSOB  DC    CL4'SSOB'                SUB SYSTEM OPTIONS BLOCK\n         DC    AL2(SSOBHSIZ)\n         DC    AL2(SSOBSTAT)\n         DC    9F'0'\n         DC    XL256'00'\n         DC    XL256'00'\n* LIMIT OF REQUIRED ADDRESSABILTY\nASIDTB1  DS    0D\n         DS    50CL9\nASIDTB2  DS    0D\n         DS    50CL16\nASIDTB3  DS    0D\n         DS    50CL16\n*        PRINT GEN\n         IEFJSSOB CS\n         IEFJESCT TYPE=DSECT\n         DSECT\n*        PRINT NOGEN\n         IEFTIOT1\n         CVT   DSECT=YES\n         END\n//*  D.SYSLMOD DD   DSN=ZZ.TESTLIB,DISP=SHR\n//LKED.SYSLMOD DD   DSN=DCC.UTLIB,DISP=SHR\n//LKED.SYSIN   DD   *\n NAME UTALLOW(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03LLOWP": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00_\\x00_\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 95, "newlines": 95, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPPRNT JOB '9999,C4003,SYSTEMS',BELL,\n//      CLASS=H,PRTY=9,MSGCLASS=P,NOTIFY=TSOSYSJ\n//*\n//* THIS JOB SENDS PRINTS TO THE LASER WITH PAGE AND FORM DEFINITIONS\n//*\n//OUT1     OUTPUT FORMDEF=A4,PAGEDEF=A4LL\n//OUT2     OUTPUT FORMDEF=A4,PAGEDEF=A4LP\n//STEP1    EXEC PGM=IEBGENER\n//SYSUT2   DD   SYSOUT=A,OUTPUT=*.OUT2, COPIES=6,\n//          DCB=(RECFM=FBA,LRECL=72,BLKSIZE=7200)\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n GENERATE MAXFLDS=1\n RECORD FIELD=(72)\n//SYSUT1   DD   *\n1\n NEW UTILITY - UTALLOW\n+___ _______   _______\n\n A new utility called \"UTALLOW\" is available.  It has been written as a\n general utility to check that certain Jobs are not run alongside other\n Jobs, e.g. System Securities,  or that Jobs are only  run when certain\n other Jobs are running, e.g. when ADABASPR is available.\n\n If used, \"UTALLOW\" must be the first stop in the Job,  it requires JCL\n of the form :-\n\n      //stepname EXEC PGM=UTALLOW,PARM=parm\n      //ALLOW    DD   DSN=DCC.PROCDATA(member1),DISP=SHR\n      //EXCLUDE  DD   DSN=DCC.PROCDATA(member2),DISP=SHR\n      //REQUIRE  DD   DSN=DCC.PROCDATA(member3),DISP=SHR\n\n The \"PARM\" parameter is optional. If used, it forces \"UTALLOW\" to take\n certain actions when an invalid Job combination is found:-\n\n    W(ait)   - Wait until the Job can run (\"UTALLOW\" will retry itself\n               at one minute intervals).\n    I(gnore) - Will over-ride \"UTALLOW\"  and allow the Job to run.  An\n               informatory message is given.\n    C(ancel) - Will abend the Job immediately with a \"U0999\" dump.\n\n If no \"PARM\" parameter is used,  or an invalid parameter  is enterred,\n \"UTALLOW\" will issue a message to the Operator for action when the Job\n cannot be run.\n\n The PROCDATA members are optional.  If used,  they must be card images\n with Job Names in Cols 1-8. UTALLOW will allow the Job to run provided\n only the standard MVS tasks or Jobs in the \"ALLOW\" member are running,\n no Jobs in the \"EXCLUDE\" member are running and all of the Jobs in the\n \"REQUIRE\" member are running. Note :-\n\n   1) Omission of a PROCDATA member,  or a null member,  will result in\n      the corresponding feature being ignored.\n   2) Duplication of a name in \"ALLOW\" and \"EXCLUDE\" will exclude.\n   3) \"REQUIRE\" forces \"ALLOW\" and prohibits \"EXCLUDE\".\n   4) \"NET\", \"CICS0\" and \"CICSNITE\" are considered standard, but can be\n      \"EXCLUDEd\".\n   5) The MVS \"TSO\" address space is considered standard, but TSO users\n      are not, unless \"ALLOWed\".\n   6) Job Names in the \"ALLOW\"  and \"EXCLUDE\"  members may be masked by\n      use of \"+\" signs, eg:-\n\n      CICS++++ covers all CICS.\n      CICS+    covers CICS0-CICS5, does not cover CICSTEST/CICSNITE.\n      ADABAS++ covers all ADABAS.\n      TSO++++  covers all TSO user-ids.\n      ++++++++ covers all Jobs.\n1\n If UTALLOW finds Jobs running, which are not allowed, or jobs missing,\n which are required, it will issue messages listing the problem job(s).  .\n If it has a valid \"PARM\", it will take the appropriate action,  other-\n -wise a further  message giving four options is sent to the Operator:-\n\n    REQUEUE  - Requeue the job to the JES2 input queue and hold.\n    WAIT     - Wait until the Job can run  (\"UTALLOW\" will retry itself\n               immediately, then at one minute intervals).\n    IGNORE   - Will over-ride \"UTALLOW\" and allow the Job to run.\n    CANCEL   - Will abend the Job with a \"U0999\" dump.\n\n Note :-\n\n   1) Only the first letter of the reply is checked, eg. \"W\" = \"WAIT\".\n   2) \"REQUEUE\"  will be the favoured option  in most cases,  it is not\n      available as a \"PARM\" as Systems Programmers consider Jobs should\n      only by re-queued by direct action from the Operators.\n   3) \"WAIT\" will have only a small overhead and should be suitable for\n      most Jobs.  A Job in  \"WAIT\"  can be re-queued  with the standard\n      \"RESTART\" utility, or cancelled altogether\n   4) \"IGNORE\" must be confirmed by a further reply \"Y\".\n   5) The default action, for an unrecognised reply, is \"CANCEL\".\n\n \"UTALLOW\"  was designed for  System Programmers  own use within System\n Securities. It is available for general use in Production Jobs.\n\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A03LLOWR": {"ttr": 7170, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPWHAT JOB  '9999,C4003,WHATDAY ',\n//       WHATDAY,CLASS=H,PRTY=9,MSGCLASS=P\n//UTALLOW  EXEC PGM=UTALLOW\n//STEPLIB  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//ALLOW    DD   *\nCICS++++\nADA+++++\nTSO+++++\n//EXCLUDE  DD   *\nCICS2\n//REQUIRE  DD   *\nADABASPR\nTSOSYSK\n//SYSUDUMP DD   SYSOUT=P\n//UTCHATR  EXEC PGM=UTCHATR,PARM='MUTALLOW HAS WORKED !!!!'\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03LPA01": {"ttr": 7172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "UKGUIDE"}, "text": "SYS1.LINKLIB IKJEFLA,IEFUJV,JESX023\n/*  VARIABLE IEFUJV   -  ALLOW JOB ACCOUNTING CHANGES\n/*  VARIABLE IKJEFLA  -  ALLOW TSO ACCOUNTING CHANGES\n/*  VARIABLE JESX023 - JES2 EXIT ON TEST\n/*\n/*  MLPA=(04,06,NOPROT),        MLPA MODULES SPECIFIED IN IEASYS00\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03UJV": {"ttr": 7174, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x89\\x00\\x89\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPEXIT JOB  '9999,C4003,CBIPO   ',\n//        'KEVINS',CLASS=H,PRTY=6,MSGCLASS=P,NOTIFY=TSOSYSJ\n//ASM      EXEC PGM=IEV90,\n//            PARM='OBJECT,XREF(SHORT)'\n//SYSLIB   DD   DSN=DCC.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR UNIT=DISK,VOL=SER=IPL4A5\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR UNIT=DISK,VOL=SER=SYSCLG\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100)),\n//             SEP=(SYSLIB)\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50)),\n//             SEP=(SYSLIB,SYSUT1)\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD   SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD   SYSOUT=B\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=VIO,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS),DCB=(LRECL=80,BLKSIZE=80)\n//SYSIN    DD   *\nIEFUJV   CSECT\n         REGEQS\n         STM   R14,R12,12(R13)\n         USING IEFUJV,R15\n         L     R2,ANEXT                  LOCATE EXECUTABLE CODE\n         BR    R2                        GO TO IT\nANEXT    DC    A(NEXT)                   ADDRESS EXECUTABLE CODE\n* ******************************************************************* *\n*                                                                     *\n*                  DO NOT PLACE ANY CODE IN THIS MODULE               *\n*                  WHICH WOULD CAUSE  TAB TO BE DISPLACED             *\n*                  FROM LOC  DEC 100 HEX 64, SINCE UJV IS             *\n*                  LOADED BY JOB A/C ROUTINES                         *\n*                                                                     *\n* ******************************************************************* *\n*\n         ORG   IEFUJV+100\nTAB      DS    0H\n*\n* THIS TABLE IS NOW KEPT IN ALPHANUMERIC ORDER FOR EASE OF\n*  DOCUMENTATION. ANY ADDITIONS SHOULD MAINTAIN THIS ORDER.\n*  IT CAN BE MADE AS BIG AS YOU WANT, PROVIDED YOU \"ORG\" OVER IT.\n*\n         DC    CL5'ABCDE'\n*        .........\n*        .........\n*        .........\n*        .........\n         DC    CL5'ZZYXW'\n         DC    CL5'98765'\n*\n         DC    CL5'*****'       END OF TABLE MARKER\n         EJECT\n         ORG   IEFUJV+5100\nNEXT     DS    0H\n         USING *,R2\n         LA    R4,TAB               TABLE ADDRESS IN REG 4\n         L     R3,8(0,R1)          ADDRESS OF CARD TYPE INDICATOR\n         CLI   0(R3),X'01'\n         BNE   OUT                 NOT JOB CARD\n         L     R3,4(0,R1)          ADDRESS OF JOB CARD IMAGE\n         LR    R8,R3               SAVE CARD ADDRESS FOR LATER\n         CLI   2(R3),X'40'         CONTINUED JOB CARD\n         BE    OUT                 YES IGNORE IT\n         LA    R7,80                CARD LIMIT\nCLI03    DS    0H\n         CLI   0(R3),C' '          LOOK FOR FIRST BLANK\n         BE    CLC033\n         LA    R3,1(0,R3)           INCREMENT 1 CARD COL.\n         BCT   R7,CLI03\n         B     NOT\nCLC033   DS    0H\n         CLC   0(3,R3),=C'JOB'      LOOK FOR JOB PARAMETER\n         BE    LA333\n         LA    R3,1(0,R3)           INCREMENT 1 CARD COL.\n         BCT   R7,CLC033\n         B     NOT\nLA333    DS    0H\n         LA    3,3(0,R3)            INCREMENT TO BLANK POSN. AFTER JOB\nACCA     DS    0H\n         CLI   0(R3),C' '           LOOK FOR NEXT NON-BLANK\n         BNE   GOT\n         LA    R3,1(0,R3)           INCREMENT 1 CARD COL.\n         BCT   R7,ACCA\n         B     NOT\n*\n*       FOUND ACCOUNTING FIELD - IS IT O.K.\n*\nGOT      DS    0H\n         LA    R7,1000              TABLE LIMIT - WAS 380\n         CLC   =C'1,',0(R3)         IS IT XBATCH JOB?\n         BE    OUT                 YES OK\n         CLC   =C'8700',0(R3)         IS IT OLD SYSPROGS\n         BE    OUT                 YES OK\n         CLC   =C'8700',1(R3)         IS IT OLD SYSPROGS\n         BE    OUT                 YES OK\n         CLC   =C'ACCT',1(R3)         IS IT IBM\n         BE    OUT                 YES OK\n         CLC   =C'ACCT',2(R3)         IS IT IBM\n         BE    OUT                 YES OK\n         CLC   =C'''9999,',0(R3)    IS IT NEW STYLE JOB?\n         BE    BUMP6               YES OK\n         CLC   =C'''9999.',0(R3)       OR NEW STYLE TSO?\n         BNE   NOT                 NO QUIT\nBUMP6    DS    0H\n         LA    R3,6(0,R3)           PASS 9999\nTABCF    DS    0H\n         CLC   0(5,R4),0(R3)         SEE IF IN TABLE\n         BE    OUT                 IF THERE  O.K.\n         CLC   0(5,R4),=C'*****'     IF END OF TABLE REACHED\n         BE    NOT                 GO TO CANCEL JOB\n         LA    R4,5(0,R4)             INCREMENT TO NEXT TABLE ENTRY\n         BCT   R7,TABCF\nNOT      DS    0H\n         MVC   72(8,R8),=C'CODE=1  ' SIGNAL A/C CODE ERROR\nRC4      DS    0H\n         LM    R14,R12,12(R13)\n         LA    R15,4\n         BR    R14\nOUT      DS    0H\n         LM    R14,R12,12(R13)\n         XR    R15,R15\n         BR    R14\n         LTORG\n         END\n//LKED     EXEC PGM=IEWL,\n//             REGION=512K,\n//             PARM='XREF,LIST,RENT,REUS',\n//             COND=(4,LT,ASM)\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),\n//             SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DSN=SYS.SSI.IPLDATE,DISP=SHR\n//         DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//* SLMOD  DD   DSN=DCC.EXITLIB,DISP=SHR\n//SYSLMOD  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSIN    DD   *\n NAME  IEFUJV(R)\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A03UJVRR": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00[\\x00[\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPCHUJ JOB '9999,C4003,8700','CHRIS',CLASS=H,PRTY=9,\n//         MSGCLASS=P,NOTIFY=TSOSYSJ\n// EXEC ASMFCL,MAC='DCC.MACLIB',MAC1='SYS1.MACLIB'\n//*\n//* TO UP THE LIMIT: CHANGE LOOP COUNT HERE AND IN IEFUJV\n//*\n//ASM.SYSIN DD *\nIEFUJVRR TITLE 'PROGRAM TO MODIFY IEFUJV'\n         REGEQS\n         PRINT NOGEN\nIEFUJVRR BEGIN 3\n         LOAD  EP=IEFUJV\n         LR    R4,R0\n         LA    R4,100(0,R4)        START OF CHARGE CENTRES\n         LA    R5,1000             1000 CHARGE CENTRES ALLOWED -WAS 512\nOPEN     DS    0H\n         OPEN  (MCDMAS)\n         OPEN  (SYSPRINT,OUTPUT)\n         MODESET KEY=ZERO\n         MVC   KEYAPPL,=C'AAAAA'   START OF FILE\n         GET   RPL=GETRPL          TO THE (VSAM) APPLICATION FILE\nLOOP     DS    0H\n         MVC   0(5,R4),APPLKEY     MOVE TO UJV\n         LA    R4,5(0,R4)          NEXT POSITION\n         AP    RECCNT,=PL3'1'      INCREMENT\n         GET   RPL=GETRPL          NEXT CHARGE CENTRE\n         BCT   R5,LOOP             KEEP LOOPING\n         SPACE 2\n         PUT   SYSPRINT,OVERLOAD   GIVE OVERLOAD WARNING MESSAGE\n         SPACE 2\nEODAD    DS    0H\n         MVC   0(5,R4),ENDAPPL     MOVE TO UJV\n         ED    OUTCNT,RECCNT\n         PUT   SYSPRINT,OUTLINE    INFORM HOW MANY LOADED\n         MODESET KEY=NZERO\n         CLOSE (SYSPRINT) CLOSE THE FILES\n         CLOSE (MCDMAS)\n***      DC    F'0'                MAKE IT DUMP\n         EOJ\n         EJECT\n*\n*        CONTROL BLOCKS FOR FILES\n*\nMCDMAS   ACB   AM=VSAM,                                                *\n               DDNAME=MCDMAS,                                          *\n               EXLST=EXLST,                                            *\n               MACRF=(KEY,SEQ,IN)\n*\n*\nEXLST    EXLST AM=VSAM,                                                *\n               EODAD=EODAD\n*\nGETRPL   RPL   ACB=MCDMAS,                                             *\n               AREA=INAREA,                                            *\n               AREALEN=1002,                                           *\n               OPTCD=(KEY,SEQ,SYN,MVE),                                *\n               ARG=KEYAPPL\n*\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FBA,MACRF=(PM),          *\n               LRECL=133,BLKSIZE=1330\n*\n         EJECT\n*\n*        WORK AREAS AND CONSTANTS\n*\nKEYAPPL  DS    CL5                 APPLICATION CODE\nENDAPPL  DC    CL5'*****'          APPLICATION CODE\nRECCNT   DC    PL3'0'              RECORD COUNT\n*\nOVERLOAD DC    CL133' TOO MANY MCDMAS FOR IEFUJV - LAST ONES DROPPED'\nOUTLINE  DS    0CL133              OUTPUT LINE\n         DC    CL17'  RECORD COUNT = '\nOUTCNT   DC    XL6'402020202120'\n         DC    CL110' '\n*\n*\n         LTORG\nINAREA   DS    0CL1002             IO AREA FOR APPLICATION FILE\nAPPLKEY  DS    CL5\n         DS    CL997               APPLICATION IN TEXT FORM\n*\n         END\n//LKED.SYSLIN  DD   DSN=SYS.SSI.IPLDATE,DISP=SHR\n//             DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//             DD   DDNAME=SYSIN\n//LKED.SYSLMOD DD   DSN=DCC.UTLIB,DISP=SHR\n//* ED.SYSLMOD DD   DSN=ZZ.TESTLIB,DISP=SHR\n//LKED.SYSIN   DD   *\n NAME IEFUJVRR(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A03UX01": {"ttr": 7180, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x03\\xa7\\x03\\xa7\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 935, "newlines": 935, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPCHL  JOB  '9999,C4003,HASPPRPU',\n//       'PRPU',CLASS=H,PRTY=9,MSGCLASS=P,NOTIFY=TSOSYSH\n//*\n//* 6/1/92 - broadcast\n//* 20/1/92 - \" \" \" \"  live\n//*\n//STEP1    EXEC PGM=IEV90,PARM='OBJECT,NODECK,XREF(SHORT)'\n//SYSLIB   DD   DSN=DCC.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(1700,(1200,300))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(1700,(1200,300))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(1700,(1200,300))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DSN=&&OBJ,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSIN    DD   DDNAME=ASSMIN\n//ASSMIN   DD   *\n         TITLE 'APSUX01 - INSTALLATION EXIT JOB HEADER ROUTINE'\n**** START OF SPECIFICATIONS *****************************************\n*                                                                    *\n*01* MODULE NAME = APSUX01                                           *\n*                                                                    *\n* $MOD(APSUX01 ) COMP(APS) PROD(PSF) : RELEASE 3.0                   *\n*                                                                    *\n*01* DESCRIPTIVE NAME = D.C.C. SEPARATOR, BORROWS FROM I.B.M.        *\n*                                                                    *\n*01* COPYRIGHT=5665-275 (C) COPYRIGHT IBM CORPORATION 1984, 1989     *\n*      LICENSED MATERIAL - PROPERTY OF IBM                           *\n*      SEE COPYRIGHT INSTRUCTIONS, G120-2083                         *\n*                                                                    *\n*01* STATUS = RELEASE 0003, LEVEL 0000                               *\n*                                                                    *\n*01* FUNCTION = DEFINES A JOB HEADER SEPARATOR PAGE WITH THE         *\n*               JOBNAME IN BLOCK LETTERS AND FOLLOWED BY JOB         *\n*               RELATED INFORMATION LINES.                           *\n*               THIS EXIT WILL ALSO PUT OUT A CONTINUATION HEADER    *\n*               PAGE, IF PRINTING OF A DATA SET IS INTERRUPTED BY    *\n*               JES COMMAND, AND THEN RESUMES.  THE CONTINUATION     *\n*               HEADER PAGE IS IDENTICAL TO THE START HEADER PAGE    *\n*               EXCEPT THE CONTINUATION HEADER PAGE PRINTS THE WORD  *\n*               'CONT' INSTEAD OF THE WORD OF 'START'.               *\n*                                                                    *\n* .CHDEC91      ALSO PRINTS THE DCC BROADCAST MESSAGE                *\n*                                                                    *\n*02*    OPERATION = THE FOLLOWING ITEMS ARE DONE BY THIS EXIT:       *\n*               1. CREATE 12 BLOCK LETTER LINE RECORDS FOR           *\n*                  THE JOB NAME.                                     *\n*               2. PASS THE BLOCK LETTER LINES TO PSF.               *\n*               3. BUILD JOB INFORMATION LINES.                      *\n*               4. PASS THE INFORMATION LINE RECORD TO PSF.          *\n*                                                                    *\n*01* NOTES =                                                         *\n*02*   DEPENDENCIES = NONE                                           *\n*02*   RESTRICTIONS = NONE                                           *\n*02*   REGISTER-CONVENTIONS =  R15 = ENTRY ADDRESS, RESET ON RETURN  *\n*                              R13 = SAVE AREA ADDRESS               *\n*                              R12 = BASE REGISTER                   *\n*                           R4-R11 = SEE ASSEMBLER EQUATES BELOW     *\n*02*   PATCH LABEL = PSPACE                                          *\n*                                                                    *\n*01* MODULE TYPE = PROCEDURE                                         *\n*02*   PROCESSOR = ASSEMBLER                                         *\n*02*   ATTRIBUTES = REENTRANT                                        *\n*                                                                    *\n*01* ENTRY POINT = APSUX01                                           *\n*02*   LINKAGE = STANDARD CALL                                       *\n*                 R1  = ADDRESS OF A 4 BYTE FIELD WHICH              *\n*                       CONTAINS THE ADDRESS OF APSGEXTP             *\n*                                                                    *\n*01* INPUT =                                                         *\n*             APSUCOM   -  PSF EXITS CONSTANTS TABLE                 *\n*             APSGEXTP  -  PSF INSTALLATION EXIT PARAMETER AREA      *\n*             APSUECA   -  PSF EXIT COMMUNICATIONS AREA              *\n*             IAZJSPA   -  JES SEPARATOR PAGE AREA                   *\n*             IEFJMR    -  MVS JOB MANAGEMENT RECORD                 *\n*                                                                    *\n*             IDUSERS   -  VSAM DATASET CONTAINING BROADCAST         *\n*                                                                    *\n*01* OUTPUT =                                                        *\n*             LINE DATA RECORDS                                      *\n*                                                                    *\n*01* EXIT NORMAL = RETURN TO CALLER                                  *\n*                                                                    *\n*01* EXIT ERROR = NONE                                               *\n*                                                                    *\n*01* EXTERNAL REFERENCES =                                           *\n*02*    ROUTINES =                                                   *\n*             APSUBLK - BUILD BLOCK LETTER RECORDS                   *\n*             APSUPUT - PUT RECORD TO PSF                            *\n*02*    DATA AREAS =                                                 *\n*             APSUCOM   -  PSF EXITS CONSTANTS TABLE                 *\n*             APSGEXTP  -  PSF INSTALLATION EXIT PARAMETER AREA      *\n*             APSUECA   -  PSF EXIT COMMUNICATIONS AREA              *\n*             IAZJSPA   -  JES SEPARATOR PAGE AREA                   *\n*             IEFJMR    -  MVS JOB MANAGEMENT RECORD                 *\n*02*    INCLUDES = NONE                                              *\n*                                                                    *\n*01* MACROS = NONE                                                   *\n*                                                                    *\n*01* MESSAGES = NONE                                                 *\n*                                                                    *\n*01* CHANGE ACTIVITY =                                               *\n* $H3=LAPS0003,HAF1220,032588,53KRSB: RELEASE 2.1                    *\n* $01=OY12136C,HAF1220,032588,53KRSB: CONTINUATION SEPARATOR NOT     *\n*                                     PRINTING                       *\n* $L1=LAPS0004, HAF1228, 880601, B53KELJ: RELEASE 3.0                *\n*                                                                    *\n**** END OF SPECIFICATIONS *******************************************\nAPSUX01  START 0\n         TITLE 'DSECT - XTP'\n         APSGEXTP LIST=YES\n         TITLE 'DSECT - ECA'\n         APSUECA  LIST=YES\n         TITLE 'DSECT - JSPA'\n         IAZJSPA  LIST=YES\n         TITLE 'DSECT - JMR'\n         IEFJMR\n         TITLE 'APSUX01 - INSTALLATION EXIT JOB HEADER ROUTINE'\nAPSUX01  CSECT ,\n         USING *,@15\n         B     PROLOG\n         DC    AL1(16)\n         DC    CL8'APSUX01'                                       @L1C\n         DC    CL8'&SYSDATE'                                      @L1C\n         DC    C'5665-275 (C) COPYRIGHT IBM CORP. 1984,1989'\n         DC    C'LICENSED MATERIAL - PROGRAM PROPERTY OF IBM'\n         DROP  @15\n**********************************************************************\n*        PROLOG\n**********************************************************************\nPROLOG   DS    0H\n         STM   @14,@12,12(@13)              SAVE CALLERS REGISTERS\n         LR    @12,@15                      R12 IS BASE REG\n         USING APSUX01,@12                  BASE APSUX01 ON R12\n         USING APSGEXTP,XTPPTR              BASE APSGEXTP ON XTPPTR\n         USING APSUECA,ECAPTR               BASE APSUECA ON ECAPTR\n         USING IAZJSPA,JSPAPTR              BASE IAZJSPA ON JSPAPTR\n         USING JMR,JMRPTR                   BASE JMR ON JMRPTR\n         L     @04,0(,@01)                  LOAD ADDRESS OF APSGEXTP\n         L     @05,XTPECAP                  LOAD ADDRESS OF APSUECA\n         LA    ECAWKPTR,ECAWKBUF            LOAD ADDRESS OF ECA WORK\n*                                            BUFFER\n         USING BUFWRK,ECAWKPTR              BASE WORK AREA ON ECA WORK\n*                                            BUFFER\n         LR    @02,@13                      LOAD ADDRESS OF CALLER SAVE\n*                                            AREA\n         LA    @13,ECAUSAVE                 R13 POINTS TO APSUX01\n*                                            SAVE AREA\n         ST    @02,4(,@13)                  SAVE CALLERS SAVE AREA ADDR\n         SLR   RTNCODE,RTNCODE              RESET RETURN CODE\n         XC    ECAFLAGS(2),ECAFLAGS         RESET ECAFLAGS\n         L     JSPAPTR,XTPJSPAP             LOAD ADDRESS OF IAZJSPA\n         L     JMRPTR,JSPAJMR               LOAD ADDRESS OF IEFJMR\n         L     PUTPTR,ECAPUTP               LOAD ADDRESS OF APSUPUT\n         NI    ECAFLAGS,B'10111111'         RESET LEFT ADJUST FLAG\n         MVI   ECADRF,X'00'                 RESET RECORD TYPE FLAG\n         OI    ECADRF,B'01010000'           SET LINE MODE AND MACHINE\n*                                            CODE FLAGS\n**********************************************************************\n*        DCC CODE FOLLOWS - three blank lines\n**********************************************************************\n         LA    @02,3                        3 LINES\nDCCLOOP1 DS    0H\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),TWO              GET LENGTH OF RECORD\n         MVI   WRKCC,X'09'                  SET CC TO WRITE\n         MVC   PRINTPOS(1),BLANK            SET PRINTPOS TO BLANK\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n         BCT   @02,DCCLOOP1\n**********************************************************************\n*        DCC VARIABLE SECTION\n**********************************************************************\n         MVC   WRKDCC,DCCLINE4\n         MVC   DCCJNAME,JSPAJBNM         OBTAIN JOB NAME\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n         MVC   WRKDCC,DCCLINE5\n**       MVC   DCCJNAME,JSPAJBID         OBTAIN JOB ID\n         MVC   DCCJNAME(8),BLANK            OBTAIN JOB ID\n         MVC   DCCJNAME(1),JSPAJBID\n         MVC   DCCJNAME+1(4),JSPAJBID+4\nJUSTIF0  DS    0H\n         CLI   DCCJNAME+1,C' '    IS THE FIRST CHARACTER BLANK\n         BNE   CONTINU0           NO - DO NOT LEFT JUSTIFY\n         MVC   DCCJNAME+1(4),DCCJNAME+2     LEFT JUSTIFY\n         B     JUSTIF0\nCONTINU0 DS    0H\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n         MVC   WRKDCC,DCCLINE6\n**********************************************************************\n*          OBTAIN TIME AND DATE\n**********************************************************************\n         LA    @01,2                        SET R1\n         SLR   @00,@00                      RESET R0\n         SVC   11                           ISSUE TIME SVC\n         ST    @01,WRKDATE                  SAVE THE DATE (PACKED DEC)\n**********************************************************************\n*          OBTAIN MONTH, DAY AND YEAR\n**********************************************************************\n         LA    @01,4                        ADDRESSABILITY TO\n         AL    @01,ECAUCOMP                  JULIAN TABLE\n         MVC   WRKJTBL(48),DAYTBL(@01)      COPY TABLE FOR LEAP YEAR\n*                                            ADJUSTMENT\n         MVC   WRKWORK+4(4),WRKDATE         OBTAIN DATE FROM SAVED AREA\n         TM    WRKWORK+5,X'01'              TEST\n         BO    DOLEAPYR                      FOR\n         TM    WRKWORK+5,X'12'               LEAP\n         BM    DOLEAPYR                      YEAR\n         MVI   WRKJTBL+4,29                 ADJUST FEB FOR LEAP YEAR\nDOLEAPYR MVC   WRKYY(2),=X'2120'            PLACE PATTERN FOR EDIT\n         ED    WRKYY(2),WRKWORK+5           EDIT THE YEAR\n         MVC   WRKWORK(6),ZEROES            RESET ALL BUT JULIAN DATE\n         UNPK  DCCJDATE,WRKWORK+6(2)        UNPACK YEAR\n         OI    DCCJDATE+2,X'F0'             UNPACK YEAR\n         SLR   @00,@00                      CLEAR FOR IC\n         CVB   1,WRKWORK                    CONVERT TO BINARY DAY\n         LA    2,WRKJTBL-4                  ADDRESS OF DATE CONVERSION\n*                                            TABLE\nDSEARCH  SLR   @01,@00                      CONVERT\n         LA    @02,4(,@02)                   JULIAN DAY\n         IC    @00,0(,@02)                   TO\n         CLR   @00,@01                       STANDARD DAY\n         BL    DSEARCH\n         CVD   1,WRKWORK                    CONVERT TO DECIMAL DAY\n         UNPK  WRKDD(2),WRKWORK+6(2)        UNPACK THE DAY\n         OI    WRKDD+1,X'F0'                INSURE SIGN NIBBLE\n         MVC   WRKMMM(3),1(@02)             SET EBCIDIC ALPHA MONTH\n**********************************************************************\n         MVC   DCCDTD,WRKDD\n         MVC   DCCDTM,WRKMMM\n         MVC   DCCDTY,WRKYY\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n         MVC   WRKDCC,DCCLINE7\n**********************************************************************\n*          OBTAIN TIME AND DATE\n**********************************************************************\n         LA    @01,2                        SET R1\n         SLR   @00,@00                      RESET R0\n         SVC   11                           ISSUE TIME SVC\n         ST    @01,WRKDATE                  SAVE THE DATE (PACKED DEC)\n**********************************************************************\n*          ADJUST TIME FOR AM/PM\n**********************************************************************\n         LA    WRKPTR,WRKTIME               GET ADDRESS OF WORK AREA\n         LA    AMPMPTR,DCCAMPM              GET ADDRESS OF AM/PM WORK\n*                                            AREA\n         MVC   DCCAMPM,AM                   SET AM/PM TO AM\n         CL    @00,=X'12000000'             TEST FOR ZERO HOURS\n         BL    DMORNING                     BRANCH IF AM\n         MVI   0(@03),C'P'                  CHANGE FROM AM TO PM\n         SL    @00,=X'12000000'             SUBTRACT TWELVE HOURS\nDMORNING ST    @00,0(,@02)                  STORE ADJUSTED TIME\n         CLI   0(@02),X'00'                 TEST FOR ZERO HOURS\n         BNE   DADJERR                      BR IF NOT TO TEST ADJ ERR\n         MVI   0(@02),X'12'                 CONVERT ZERO TO TWELVE\nDADJERR  TM    0(@02),X'08'                 TEST FOR ADJUSTMENT ERRORS\n         BZ    DEDTIME                      BRANCH IF NO ERROR\n         NI    0(@02),X'09'                 CORRECT FOR BINARY\n*                                            SUBSTRACT ERROR\nDEDTIME  DS    0H\n**********************************************************************\n*          UNPACK HOURS MINUTES SECONDS\n**********************************************************************\n         MVI   WRKTH,X'0C'                  RESET LOW ORDER 2 BYTES\n*                                            WITH SIGN FOR PACKED DEC\n         UNPK  WRKUTIME(7),WRKTIME(4)       UNPACK TIME\n         CLI   WRKHR,X'F0'                  IF HOUR HAS LEADING ZERO\n         BNE   DNEXT\n         MVC   WRKHR(1),BLANK               CHANGE ZERO TO BLANK\n**********************************************************************\nDNEXT    DS    0H\n         MVC   DCCTIMH,WRKHR\n         MVC   DCCTIMM,WRKMIN\n         MVC   DCCTIMS,WRKSEC\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*        DCC CODE FOLLOWS - TEN BLANK LINES\n**********************************************************************\n         LA    @02,10                      10 LINES\nDCCLOOP2 DS    0H\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),TWO              GET LENGTH OF RECORD\n         MVI   WRKCC,X'09'                  SET CC TO WRITE\n         MVC   PRINTPOS(1),BLANK            SET PRINTPOS TO BLANK\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n         BCT   @02,DCCLOOP2\n**********************************************************************\n*        PRINT THE JOB NAME IN STRAIGHT BLOCK LETTERS\n**********************************************************************\n         MVC   ECABLKIN(8),JSPAJBNM         OBTAIN JOB NAME\n         NI    ECAFLAGS,B'01111111'         TURN OFF SLANT INDICATOR\n         L     @15,BLKPTR                   CALL\n         BALR  @14,@15                       APSUBLK\n         MVC   ECARECLN(4),LINELGTH         SET LENGTH OF THE BLOCK\n*                                            LETTER\n         LA    @14,BUFWRK                   SET ADDRESS OF\n         ST    @14,ECARECAD                  RECORD\n         MVI   PRINTCC(@14),X'09'           SET CC IN PRINT RECORD\n         LA    @14,1                        LOOP\n         STH   @14,INDEX                     INDEX\nLOOP     LTR   RTNCODE,RTNCODE              CHECK RC OF APSUPUT\n         BNZ   OUT                          NOT ZERO, EXIT\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LA    @14,132                      GET NEXT\n         AL    @14,ECARECAD                  RECORD\n         ST    @14,ECARECAD                  TO PRINT\n         MVI   PRINTCC(@14),X'09'           SET CC\n         LA    @14,1                        CHECK IF\n         AH    @14,INDEX                     PRINTED\n         STH   @14,INDEX                     TWELVE\n         C     @14,TWELVE                    LINES\n         BNH   LOOP\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*          PROVIDE 3 BLANK LINES BETWEEN BLOCK LETTER GROUPS\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),TWO              GET LENGTH OF RECORD\n         MVI   WRKCC,X'09'                  SET CC TO WRITE\n         MVC   PRINTPOS(1),BLANK            SET PRINTPOS TO BLANK\n         LA    @14,1                        LOOP\n         STH   @14,INDEX                     INDEX\nLOOP1    LTR   RTNCODE,RTNCODE              CHECK RC OF APSUPUT\n         BNZ   OUT                          NOT ZERO, EXIT\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LA    @14,1                        CHECK IF\n         AH    @14,INDEX                     PRINTED\n         STH   @14,INDEX                     THREE\n         C     @14,THREE                     LINES\n         BNH   LOOP1\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*          PROVIDE USER-ID LINE BETWEEN BLOCK LETTER GROUPS\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         MVI   BUFPRT,C' '                SET\n         MVC   BUFPRT+1(131),BUFPRT          PRINT LINE TO BLANK\n         L     @15,JSPAUSR1                 ANY USER-ID\n         CLC   ZEROES(4),0(@15)\n         BE    NOUSER\n         MVC   DCCUID,SUBED\n         MVC   DCCTID,TERMID\n         MVC   DCCUSER,0(@15)\n         L     @15,JSPAUSR2                 ANY USER-ID\n         MVC   DCCTERM,0(@15)\nNOUSER   MVI   WRKCC,X'11'                  SET CC TO WRITE AND SPACE\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*          PROVIDE DCC LINE BETWEEN BLOCK LETTER GROUPS\n**********************************************************************\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF WORK BUFFER\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         MVC   WRKDCC,DCCJNO\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*      PRINT THE JOB ID IN STRAIGHT BLOCK LETTERS\n**********************************************************************\n         MVC   ECABLKIN(8),BLANK            OBTAIN JOB ID\n         MVC   ECABLKIN(1),JSPAJBID\n         MVC   ECABLKIN+1(4),JSPAJBID+4\nJUSTIFY  DS    0H\n         CLI   ECABLKIN+1,C' '    IS THE FIRST CHARACTER BLANK\n         BNE   CONTINUE           NO - DO NOT LEFT JUSTIFY\n         MVC   ECABLKIN+1(4),ECABLKIN+2     LEFT JUSTIFY\n         B     JUSTIFY\nCONTINUE DS    0H\n         MVC   ECABLKIN+6(1),JSPJSOCL\n         NI    ECAFLAGS,B'01111111'         TURN OFF SLANT INDICATOR\n         L     @15,BLKPTR                   CALL\n         BALR  @14,@15                       APSUBLK\n         MVC   ECARECLN(4),LINELGTH         SET LENGTH OF RECORD\n         LA    @14,BUFWRK                   SET RECORD ADDRESS BACK TO\n         ST    @14,ECARECAD                  BEGINNING OF PRINT RECORDS\n         MVI   PRINTCC(@14),X'09'           SET CC IN PRINT RECORD\n         LA    @14,1                        LOOP\n         STH   @14,INDEX                     INDEX\nLOOP2    LTR   RTNCODE,RTNCODE              CHECK RC OF APSUPUT\n         BNZ   OUT                          NOT ZERO, EXIT\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LA    @14,132                      GET NEXT\n         AL    @14,ECARECAD                  RECORD\n         ST    @14,ECARECAD                  TO PRINT\n         MVI   PRINTCC(@14),X'09'           SET CC\n         LA    @14,1                        CHECK IF\n         AH    @14,INDEX                     PRINTED\n         STH   @14,INDEX                     TWELVE\n         C     @14,TWELVE                    RECORDS\n         BNH   LOOP2\n         LTR   RTNCODE,RTNCODE              IF APSUPUT FAILED\n         BNZ   OUT                           EXIT\n**********************************************************************\n*          SOME IBM CODE DROPPED\n**********************************************************************\n**********************************************************************\n*          PROVIDE 2 BLANK LINES AFTER BLOCK LETTERS\n**********************************************************************\n         LA    @14,BUFWRK                   SET ECARECAD TO WORK\n         ST    @14,ECARECAD                  BUFFER ADDRESS\n         MVC   ECARECLN(4),ONE              SET LENGTH OF RECORD\n         MVI   WRKCC,X'09'                  SET CC TO WRITE\n         MVC   PRINTPOS(1),BLANK            SET PRINT POSITION TO BLANK\n         LA    @14,1                        LOOP\n         STH   @14,INDEX                     INDEX\nLOOP5    LTR   RTNCODE,RTNCODE              CHECK RC OF APSUPUT\n         BNZ   OUT                          NOT ZERO, EXIT\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LA    @14,1                        CHECK IF\n         AH    @14,INDEX                     PRINTED\n         STH   @14,INDEX                     TWO\n         C     @14,TWO                       LINES\n         BNH   LOOP5\n         LTR   RTNCODE,RTNCODE              APSUPUT FAILED\n         BNZ   OUT                          EXIT\n**********************************************************************\n*          BEGIN BUILDING THE MAIN PRINT LINE\n**********************************************************************\n         MVI   BUFPRT,C' '                SET\n         MVC   BUFPRT+1(131),BUFPRT          PRINT LINE TO BLANK\n*\n*   TRANSLATE AND TEST FOR /\n*\n****************   GO FOR A / *****************************************\n         SR    @01,@01              CLEAR R1 FOR RETURN CODE\n         SR    @02,@02              CLEAR R2 FOR LENGTH\n         TRT   JSPJPNAM,TABLE     TEST PROGNAME FOR /\n         LTR   @02,@02\n         BZ    MOVEPROG           NO - FORGET IT THEN\n         LA    @03,JSPJPNAM\n         CLI   0(@03),C'/'         IS IT THE FIRST CHARACTER\n         BE    MOVEPROG           YES - WELL FORGET IT THEN\n         LR    @15,@01              SAVE R1\n         SR    @15,@03\n         C     @15,=F'20'          IS IT THE LAST CHARACTER\n         BNL   MOVEPROG           YES - JUST MOVE THE WHOLE LOT IN\n         BCTR  @15,0               DOWN ONE MORE FOR EXECUTE\n         EX    @15,MOVENAME        GO MOVE IN THE NAME\n         LA    @15,2(@15)           POINT AFTER THE SLASH\n         LR    @14,@15              SAVE LENGTH IN R7\n         LA    @15,20\n         SR    @15,@14              FIND LENGTH REMAINING\n         BCTR  @15,0               DECR BY 1 FOR EXECUTE\n         LA    @03,0(@14,@03)        SKIP PASSED PROG NAME AND /\n         EX    @15,MOVEROOM        MOVE IN ROOM NUMBER\n         MVC   BUFPRT+29(24),PLEASE\n         MVC   BUFPRT+73(6),=C' Room '\n         B     PROGNAME\nMOVEPROG MVC   BUFPRT+65(20),JSPJPNAM\nPROGNAME DS    0H\n**********************************************************************\n*          FILL REST OF SEPARATOR PAGE WITH MAIN PRINT LINE\n**********************************************************************\n         MVI   WRKCC,X'09'                  CC IS WRITE WITH SPACE\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD\n         LA    @14,BUFWRK                   GET RECORD\n         ST    @14,ECARECAD                  ADDRESS\n         LA    @14,1                        LOOP\n         STH   @14,INDEX                     INDEX\nLOOP6    DS    0H                           CHECK RC OF APSUPUT\n         LR    @15,PUTPTR                   CALL\n         BALR  @14,@15                       APSUPUT\n         LTR   RTNCODE,RTNCODE              CHECK RC OF APSUPUT\n         BNZ   OUT                          NOT ZERO, EXIT\n         LA    @14,1                        CHECK IF\n         AH    @14,INDEX                     PRINTED\n         STH   @14,INDEX                     TWO (was five)\n*        C     @14,FIVE                      LINES\n         C     @14,TWO                       LINES            .CHDEC91\n         BNH   LOOP6\n* one blank line                                              .CHDEC91\n         LA    @14,BUFWRK                   SET ECARECAD TO WORK  \"\n         ST    @14,ECARECAD                  BUFFER ADDRESS       \"\n         MVC   ECARECLN(4),TWO              SET LENGTH OF RECORD  \"\n         MVI   WRKCC,X'09'                  SET CC TO WRITE       \"\n         MVC   PRINTPOS(1),BLANK            SET PRINT POSITION TO BLANK\n         LR    @15,PUTPTR                   CALL                  \"\n         BALR  @14,@15                       APSUPUT              \"\n         LTR   RTNCODE,RTNCODE              APSUPUT FAILED        \"\n         BNZ   OUT                          EXIT                  \"\n*\n* 8 lines of broadcast\n*\n         CLI   BROAD1,X'00'                 BROADCAST INFO PRESENT?\n         BE    GETCAST                      NO - GO GET IT        \"\nGOTCAST  EQU   *\n         MVI   BUFPRT,C' '                                    .CHDEC91\n         MVC   BUFPRT+1(131),BUFPRT                               \"\n         MVI   WRKCC,X'09'                  SET CC TO WRITE       \"\n         LA    @14,BUFWRK                   SET ECARECAD TO WORK  \"\n         ST    @14,ECARECAD                  BUFFER ADDRESS       \"\n         MVC   ECARECLN(4),DCCLLGTH         GET LENGTH OF RECORD  \"\n         LA    @08,8                        8 LINES               \"\n         LA    @06,BROAD1                   FIRST LINE            \"\nLOOPB    EQU   *\n         MVC   BUFPRT+40(50),0(@06)         CENTRE MESSAGE TEXT   \"\n         LR    @15,PUTPTR                   PUT LINE ROUTINE      \"\n         BALR  @14,@15                      WRITE A LINE          \"\n         LTR   RTNCODE,RTNCODE              OK?                   \"\n         BNZ   OUT                          NO - STOP             \"\n         LA    @06,50(@06)                  NEXT LINE OF BROADCAST\"\n         BCT   @08,LOOPB                                          \"\n**********************************************************************\n*                         EPILOGUE\n**********************************************************************\nOUT      DS    0H\n**********************************************************************\n         SLR   RTNCODE,RTNCODE              RESET RETURN CODE\n         L     @13,4(,@13)                  RESTORE CALLERS SAVE AREA\n*                                            ADDRESS\n         L     @14,12(,@13)                 RESTORE CALLERS RETURN\n*                                            ADDRESS\n         LM    @00,@12,20(@13)              RESTORE CALLERS REGISTERS\n         BR    @14                          RETURN TO CALLER\n         EJECT\n*\n* put out an error message                                    .CHDEC91\n*\nERRMESS  EQU   *\n         LA    @14,BUFWRK                   SET ECARECAD TO WORK  \"\n         ST    @14,ECARECAD                  BUFFER ADDRESS       \"\n         MVC   ECARECLN(4),DCCLLGTH         SET LENGTH OF RECORD  \"\n         MVI   BUFPRT,C' '                                    .CHDEC91\n         MVC   BUFPRT+1(131),BUFPRT                               \"\n         MVI   WRKCC,X'09'                  SET CC TO WRITE       \"\n         MVC   BUFPRT+45(14),BROAD1+5\n         LR    @15,PUTPTR                   CALL                  \"\n         BALR  @14,@15                       APSUPUT              \"\n         B     OUT                          EXIT                  \"\n         EJECT\n*\n* READ 8 BROADCAST RECORDS FROM IDUSERS AND STORE IN EXTENDED\n* WORK BUFFER. HOPEFULLY ONLY DONE WHEN FIRST JOB OF A NEW LASER\n* PROCEDURE IS PRINTED.\n*\nGETCAST  EQU   *\n         MVC   BROAD1+5(14),=C'ERROR IN ACB  '\n         LA    @03,ACBA\nIDUSERS  GENCB BLK=ACB,                                                *\n               AM=VSAM,                                                *\n               DDNAME=IDUSERS,                                         *\n               PASSWD=PASSAD,                                          *\n               MACRF=(KEY,SEQ,IN),                                     *\n               MF=(G,(@03),LEN1)\n         LTR   @15,@15                      OK?                   \"\n         BNZ   ERRMESS                                            \"\n         ST    @01,ACBADDR\n         LR    @03,@01\n*\n         LA    @02,RPLA\n         LA    @06,RECADDR                  FIELD FOR RECORD ADDRESS\n         MVC   BROAD1+5(14),=C'ERROR IN GENCB'\nGENRPL   GENCB BLK=RPL,                                                *\n               ACB=(@03),                                              *\n               AM=VSAM,                                                *\n               AREA=(@06),                                             *\n               AREALEN=4,                                              *\n               OPTCD=(KEY,SEQ,SYN,LOC),                                *\n               ARG=KEYBROD,                                            *\n               MF=(G,(@02),LEN2)\n         LTR   @15,@15                      OK?                   \"\n         BNZ   ERRMESS                                            \"\n         ST    @01,RPLADDR                  RPL ADDRESS           \"\n*\n         MVC   BROAD1+5(14),=C'ERROR IN OPEN '\n         MVC   OPENA(OPENL),OPSTRUC\n         L     @02,ACBADDR\n         OPEN  ((@02)),MF=(E,OPENA)\n         LTR   @15,@15                      OK?                   \"\n         BNZ   ERRMESS\n*\nOPENOK   EQU   *\n*\n         L     @02,RPLADDR\n         LA    @03,8                        8 RECORDS             \"\n         LA    @06,BROAD1                   BEGINNING OF SAVE AREA\"\nLOOPC    EQU   *\n         GET   RPL=(@02)                    READ A RECORD         \"\n         LTR   @15,@15                      OK?                   \"\n         BZ    GOTOK\n         MVC   BROAD1+5(14),=C'ERROR IN GET  '\n         B     ERRMESS                                            \"\nGOTOK    EQU   *\n         L     @08,RECADDR                  ADDRESS OF RECORD     \"\n         MVC   0(50,@06),11(@08)            STORE IN WORK BUFFER  \"\n         LA    @06,50(@06)                  NEXT LINE OF BROADCAST\"\n         BCT   @03,LOOPC\n*\n         MVC   OPENA(CLOSEL),CLSTRUC\n         L     @02,ACBADDR\n         CLOSE ((@02)),MF=(E,OPENA)\n         B     GOTCAST\n         EJECT\n*\n*\n*\n         DS    0H\nPSIZE    EQU   ((*-APSUX01+99)/100)*5       PATCH AREA SIZE\n         DC    C'PATCH AREA - APSUX01  88.XXX'\nPSPACE   DC    25S(*)                       PATCH AREA\n         ORG   PSPACE\n         DC    ((PSIZE+1)/2)S(*)\n         ORG   ,\n**********************************************************************\n*              MISC CONSTANTS\n**********************************************************************\nONE      DC    F'1'\nTWO      DC    F'2'\nTHREE    DC    F'3'\nFIVE     DC    F'5'\nEIGHT    DC    F'8'\nTWELVE   DC    F'12'\nSIXTEEN  DC    F'16'\nLINELGTH DC    F'127'\nDCCLLGTH DC    F'133'\nZEROES   DC    X'000000000000'\nPRT5     DC    CL8'PRT5    '\nBLANK    DC    CL8' '\nSTART    DC    CL5'START'\nCONT     DC    CL5'CONT '\nLOCALPR  DC    CL5'LOCAL'\nROOM     DC    CL4'ROOM'\nAM       DC    CL2'AM'\nSUBED    DC    CL20'Submitted by USERID '\nTERMID   DC    CL13' on terminal '\nPLEASE   DC    CL24'Please return output to '\nMOVENAME MVC   BUFPRT+53(0),JSPJPNAM\nMOVEROOM MVC   BUFPRT+79(0),0(@03)\nTABLE    DC    XL97'00'\n         DC    XL1'61'                 ONLY / HAS A VALUE\n         DC    XL160'00'\n         LTORG\n*\nZEROLINE DC    X'01'                          WRITE WITHOUT SKIP\n         DC    C'0'\nLINELINE DC    X'09'                          SKIP 1 AFTER WRITE\n         DC    C'|'\nDCCJNO   DC    X'11'                          SKIP 2 AFTER WRITE\n         DC    CL30' '                                                *\n         DC    C'--------- J O B   N U M B E R   A N D   O U T P U T' *\n         DC    C'   C L A S S ---------'                              *\n         DC    CL29' '\nDCCLINE4 DC    X'09'                       SKIP 1 AFTER WRITE\n         DC    C' '                   THIS IS THE JOB LINE\n         DC    CL99' '\n         DC    CL22'Job                   '\n         DC    CL10' '\nDCCLINE5 DC    X'09'                       SKIP 1 AFTER WRITE\n         DC    C' '                   THIS IS THE JOB LINE\n         DC    CL99' '\n         DC    CL22'Number                '\n         DC    CL10' '\nDCCLINE6 DC    X'09'                       SKIP 1 AFTER WRITE\n         DC    C' '                   THIS IS THE JOB LINE\n         DC    CL99' '\n         DC    CL22'Printed dd mmm yy.jjj '\n         DC    CL10' '\nDCCLINE7 DC    X'09'                       SKIP 1 AFTER WRITE\n         DC    C' '                   THIS IS THE JOB LINE\n         DC    CL99' '\n         DC    CL22'Time    hh.mm.ss AM   '\n         DC    CL10' '\n**********************************************************************\n*              EQUATES FOR REGISTERS 0-15\n**********************************************************************\n@00      EQU   00\n@01      EQU   01\n@02      EQU   02\n@03      EQU   03\n@04      EQU   04\n@05      EQU   05\n@06      EQU   06\n@07      EQU   07\n@08      EQU   08\n@09      EQU   09\n@10      EQU   10\n@11      EQU   11\n@12      EQU   12\n@13      EQU   13\n@14      EQU   14\n@15      EQU   15\n**********************************************************************\n*              POINTER REGISTERS AND ROUTINES\n**********************************************************************\nPUTPTR   EQU   @10                          APSUPUT POINTER\nWRKPTR   EQU   @02                          WORK AREA POINTER\nAMPMPTR  EQU   @03                          POINTER TO AM/PM PRINT AREA\nXTPPTR   EQU   @04                          APSGEXTP POINTER\nECAPTR   EQU   @05                          APSUECA POINTER\nJMRPTR   EQU   @07                          JMR POINTER\nECAWKPTR EQU   @09                          ECA WORK BUFFER POINTER\nJSPAPTR  EQU   @11                          JSPA POINTER\nRTNCODE  EQU   @15                          RETURN CODE\nBLKPTR   EQU   ECABLKP                      APSUBLK POINTER\nAPSUPUT  EQU   0\nAPSUBLK  EQU   0\nBUFPRI   EQU   0\nPRINTCC  EQU   BUFPRI\nDAYTBL   EQU   0\n         EJECT\n         DS    0F\nOPSTRUC  EQU   *\n         OPEN  (WACBADDR),MF=L              OPEN FILE         .CHDEC91\nOPENL    EQU   *-OPSTRUC\n         DS    0F\nCLSTRUC  EQU   *\n         CLOSE (WACBADDR),MF=L              CLOSE FILE        .CHDEC91\nCLOSEL   EQU   *-CLSTRUC\nPASSAD   DC    X'08'\n         DC    C'AFRICAAA'\n*\nKEYBROD  DC    XL8'000000000000001F'\n*\nBRODADDR DS    F                            ADDRESS OF IDUSERS RECORD\nWACBADDR DS    F                            ADDRESS OF IDUSERS ACB\n*                                            - CHANGED\n**********************************************************************\n*              APSUECA WORK BUFFER\n**********************************************************************\nBUFWRK   DSECT\nWRKDCC   DS    0CL133                       DCC LINE\nWRKCC    DS    CL1                          CARRIAGE CONTROL\nWRKDATA  DS    CL132                        DATA LINE\n         DS    CL3                          RESERVED\nWRKDATE  DS    CL4                          CURRENT DATE - PACKED\nWRKTIME  DS    CL4                          CURRENT TIME - PACKED\n         ORG   WRKTIME\n         DS    CL3                          HOURS MINUTES SECONDS\nWRKTH    DS    CL1                          TENTHS AND HUNDREDTHS\nWRKUDATE DS    CL8                          CURRENT DATE - UNPACKED\n         ORG   WRKUDATE\nWRKMMM   DS    CL3                          MONTH\nWRKDD    DS    CL2                          DAY\nWRKYY    DS    CL2                          YEAR\n         DS    CL1                          RESERVED\nWRKUTIME DS    CL7                          CURRENT TIME - UNPACKED\n         ORG   WRKUTIME\nWRKHR    DS    CL2                          HOUR\nWRKMIN   DS    CL2                          MINUTE\nWRKSEC   DS    CL2                          SECOND\n         DS    CL1                          SIGN BYTE\n         DS    CL1                          RESERVED\nWRKJID1  DS    F                            WORK AREA FOR JOE ID 1\nWRKJID2  DS    F                            WORK AREA FOR JOE ID 2\nWRKJIDEC DS    CL8                          WORK AREA JOE ID TO DECIMAL\nWRKJID1Z DS    CL8                          WORK AREA JOE ID 1 TO ZONED\nWRKJID2Z DS    CL8                          WORK AREA JOE ID 2 TO ZONED\nWRKWORK  DS    CL8                          WORK AREA FOR CONVERSION\nWRKJTBL  DS    CL48                         JULIAN CONVERSION TABLE\n**********************************************************************\n*              D.C.C. USER NAME PRINT LINE\n**********************************************************************\n         ORG   WRKDATA\n         DS    CL50\nDCCUID   DS    CL20\nDCCUSER  DS    CL8\nDCCTID   DS    CL13\nDCCTERM  DS    CL4\n**********************************************************************\n*              D.C.C. MAIN PRINT LINE\n**********************************************************************\n         ORG   WRKDATA\n         DS    CL108\nDCCJNAME DS    CL8\n         ORG   WRKDATA\n         DS    CL108\nDCCDTD   DS    CL2\n         DS    CL1\nDCCDTM   DS    CL3\n         DS    CL1\nDCCDTY   DS    CL2\n         DS    CL1\nDCCJDATE DS    CL3\n         ORG   WRKDATA\n         DS    CL108\nDCCTIMH  DS    CL2\n         DS    CL1\nDCCTIMM  DS    CL2\n         DS    CL1\nDCCTIMS  DS    CL2\n         DS    CL1\nDCCAMPM  DS    CL2\n**********************************************************************\n*              INFORMATION PRINT LINE\n**********************************************************************\nBUFPRT   EQU   WRKDATA\n         ORG   WRKDATA\nPRTFRAME DS    CL1                          FRAME '*'\nPRTFORM  DS    CL5                          HEADER TYPE\n         DS    CL1                          SPACE\nPRTNUM   DS    CL8                          JOB NUMBER\n         DS    CL1                          SPACE\nPRTNAME  DS    CL8                          JOB NAME\n         DS    CL1                          SPACE\nPRTJNAME DS    CL8                          JOE NAME\n         DS    CL1                          SPACE\nPRTJID1  DS    CL3                          JOE ID1\n         DS    CL1                          SPACE\nPRTJID2  DS    CL3                          JOE ID2\n         DS    CL1                          SPACE\nPRTJROUT DS    CL8                          JOE ROUTE CODE\n         DS    CL1                          SPACE\nPRTPNAME DS    CL20                         PROGRAMMER NAME\n         DS    CL1                          SPACE\nPRTRKEY  DS    CL4                          'ROOM'\n         DS    CL1                          SPACE\nPRTROOM  DS    CL4                          ROOM NUMBER\n         DS    CL1                          SPACE\nPRTTIME  DS    CL8                          PRINT TIME\n         ORG   PRTTIME\nPRTHR    DS    CL2                          HOUR\nPRTTS1   DS    CL1                          SEPARATOR\nPRTMIN   DS    CL2                          MINUTE\nPRTTS2   DS    CL1                          SEPARATOR\nPRTSEC   DS    CL2                          SECOND\n         DS    CL1                          SPACE\nPRTAMPM  DS    CL2                          AM/PM\n         DS    CL1                          SPACE\nPRTDATE  DS    CL9                          PRINT DATE\n         ORG   PRTDATE\nPRTDD    DS    CL2                          DAY\n         DS    CL1                          SPACE\nPRTMMM   DS    CL3                          MONTH\n         DS    CL1                          SPACE\nPRTYY    DS    CL2                          YEAR\n         DS    CL1                          SPACE\nPRTDNAME DS    CL8                          DEVICE NAME\n         DS    CL1                          SPACE\nPRTSYS   DS    CL4                          SYSTEM NAME\n         DS    CL1                          SPACE\nPRTFORMX DS    CL5                          HEADER TYPE\n         DS    CL1                          SPACE\nPRTCLASX DS    CL1                          CLASS\nPRTFRAMX DS    CL1                          FRAME '*'\n         ORG   WRKDATA                                        .CHDEC91\nRECADDR  DS    F                            ADDRESS OF IDUSERS RECORD\nRPLADDR  DS    F                            ADDRESS OF IDUSERS RPL\nRPLA     DS    CL96                         IDUSERS RPL parmlist\nACBADDR  DS    F                            ADDRESS OF IDUSERS ACB\nACBA     DS    CL68                         IDUSERS ACB parmlist\nOPENADDR DS    F                            ADDRESS OF IDUSERS OPENLIST\nOPENA    DS    CL10                         IDUSERS OPEN LIST\nSHOWA    DS    CL28                         ERROR LIST\nDBLWRD   DS    D\nFULLWRD  DS    F\nFULLWRD1 DS    F\nFULLWRD2 DS    F\nFULLWRD3 DS    F\n*\n* DCC EXTENDED WORK BUFFER TO HOLD BROADCAST LINES\n* THE EXIT TABLE APSUCOM HAS TO BE AMENDED WITH NEW LENGTH\n*\n         ORG   WRKDATA+1599                                   .CHDEC91\nBROAD1   DS    CL50\nBROAD2   DS    CL50\nBROAD3   DS    CL50\nBROAD4   DS    CL50\nBROAD5   DS    CL50\nBROAD6   DS    CL50\nBROAD7   DS    CL50\nBROAD8   DS    CL50\n* DELETE 1 LINE\n**********************************************************************\n*              WORK AREA\n**********************************************************************\nBUFBLK   EQU   WRKDATA\nSHORTLIN EQU   WRKDATA\nPRINTPOS EQU   SHORTLIN\nINDEX    EQU   ECAGWRK\n         END   APSUX01\n//*\n//LINK     EXEC PGM=IEWL,COND=(0,NE),\n//          PARM='XREF,LET,REUS,RENT,REFR,AC=1'\n//SYSPRINT DD   SYSOUT=*\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//* SLMOD  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSLIN   DD   DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD   *\n NAME APSUX01(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A03X023": {"ttr": 7683, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00T\\x00T\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "UKGUIDE"}, "text": "//SYSPKEF1 JOB  '9999,C4003,HASPPRPU',\n//       'PRPU',CLASS=H,PRTY=9,MSGCLASS=P,NOTIFY=TSOSYSJ\n//* USERID= A9362364 TERMID = T68B\n//STEP1    EXEC PGM=IEV90,PARM='OBJECT,NODECK,XREF(SHORT)'\n//SYSLIB   DD   DSN=DCC.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.SMPSTS,DISP=SHR\n//         DD   DSN=SYS1.SMPMTS,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD   UNIT=VIO,SPACE=(1700,(1200,300))\n//SYSUT2   DD   UNIT=VIO,SPACE=(1700,(1200,300))\n//SYSUT3   DD   UNIT=VIO,SPACE=(1700,(1200,300))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DSN=&&OBJ,DISP=(,PASS),UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSIN    DD   DDNAME=ASSMIN\n//ASSMIN   DD   *\n         TITLE 'JES2 OUTPUT SEPARATOR EXIT'\n***********************************************************************\n*      J E S 2    O U T P U T    E X I T                              *\n***********************************************************************\n*   THIS EXIT PASSES DATA FROM THE JES2 JCT TO THE PSF JSPA           *\n*   THIS DATA IS NEEDED FOR OUR ASPUX01 EXIT                          *\n***********************************************************************\n         PRINT  GEN\n         COPY   $HASPGBL          COPY HASPGEN PARAMETERS\nJESX023  $MODULE TITLE='HASP PRINT/PUNCH SERVICES',                    C\n               ENVIRON=FSS,         FSS ENVIRONMENT                    C\n               $HASPEQU,            GENERATE HASP EQUATES              C\n               $HCT,                GENERATE HASP HCT DSECT            C\n               $HFCT,               GENERATE HASP HFCT DSECT           C\n               $JCT,                GENERATE HASP JCT DSECT            C\n               $JOE,                GENERATE HASP JOE DSECT            C\n               $JOT,                GENERATE HASP JOT DSECT            C\n               $JQE,                GENERATE HASP JQE DSECT            C\n               $JIB,                GENERATE HASP JIB DSECT            C\n               $PADDR,              GENERATE HASP PADDR DSECT          C\n               $PCE,                GENERATE HASP PCE DSECT            C\n               $BUFFER,             GENERATE HASP BUFFER DSECT         C\n               JSPA,                GENERATE HASP JSPA DSECT           C\n               RPL,                 GENERATE HASP RPL  DSECT           C\n               ETD,                 GENERATE HASP ETD  DSECT           C\n               FSIP,                GENERATE HASP FSIP DSECT           C\n               $MIT,                GENERATE HASP MIT DSECT            C\n               $XIT                 GENERATE HASP XIT DSECT\n         EJECT\n         TITLE 'JES2 OUTPUT SEPARATOR EXIT'\n***      USING HFCT,R11\nDCCX023  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT\n         $SAVE                    PRESERVE REGS\n         LR    R12,R15            LOAD BASE REGISTER\n         SLR   R15,R15            CLEAR R15\n         USING JCT,R4\n         USING JIB,R3\n         USING JSPA,R2\n         LM    R2,R3,0(R1)        ADDRESS JIB,JSPA\n         L     R4,JIBJCT          ADDRESS JCT IN CORE\n         LA    R15,JCTUSER0       USER NAME\n         ST    R15,JSPAUSR1       USER NAME\n         LA    R15,JCTUSER2       USER TERM\n         ST    R15,JSPAUSR2       USER TERM\n         XR    R15,R15            COND CODE=0\nRETURN   $RETURN RC=(R15)         RETURN TO HASPRPU\n         EJECT\n*\nUSERNAME DS    CL8\nUSERTERM DS    CL8\n         LTORG\n         $MODEND\n         END\n//LINK     EXEC PGM=IEWL,PARM='XREF,LET,REUS,RENT,AC=1'\n//SYSPRINT DD   SYSOUT=*\n//SYSUT1   DD   UNIT=VIO,SPACE=(CYL,(1,1))\n//* SLMOD  DD   DSN=DCC.EXITLPA,DISP=SHR\n//* SLMOD  DD   DSN=DCC.EXITLIB,DISP=SHR\n//SYSLMOD  DD   DSN=ZZ.TESTLIB,DISP=SHR\n//SYSLIN   DD   DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD   *\n ORDER JESX023\n  ORDER DCCX023\n  SETCODE AC(1)\n NAME JESX023(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A04#INDX": {"ttr": 7686, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x93&\\x9f\\x00\\x93&\\x9f\"$\\x00\\t\\x00\\t\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-09-26T00:00:00", "modifydate": "1993-09-26T22:24:01", "lines": 9, "newlines": 9, "modlines": 0, "user": "DPSPPP"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A04XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    NICK VARLEY\n                     GE CAPITAL                                         Y\n                     0272 353555\n ____________________________________________________________________\n\n A04VTOC          VTOC FIX FOR DFP V3 TO PREVENT PDS/E FORMAT ASSUMED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A04VTOC": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x93&\\x9f\\x00\\x93&\\x9f\"\"\\x01B\\x01B\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-09-26T00:00:00", "modifydate": "1993-09-26T22:22:01", "lines": 322, "newlines": 322, "modlines": 0, "user": "DPSPPP"}, "text": "DSCBSCAN CSECT\n         YREGS\n***********************************************************************\n*                                                                     *\n*     G.E.CAPITAL RETAILER FINANCIAL SERVICES LTD, BRISTOL, AVON      *\n*                                                                     *\n*        PROGRAM WRITTEN BY RICHARD HARMAN - MARCH 1992               *\n*                                                                     *\n*  INTELLECTUAL RIGHTS RETAINED BY G.E CAPITAL. THIS PROGRAM MAY      *\n*  BE COPIED OR TRANSMITTED WITHOUT REFERENCE TO THE OWNER OR AUTHOR. *\n*                                                                     *\n*   USE OF THIS PROGRAM IS ON THE UNDERSTANDING THAT IT IS IN NO WAY  *\n*   WARRANTED AGAINST INCORRECT OPERATION OR DEFECT.                  *\n*                                                                     *\n*   CAVEAT EMPTOR !                                                   *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*   IMPLEMENTATION OF DFP V3.3 FROM V2.4 FOUND MANY DATASETS HAD      *\n*   BITS IN THE VTOC ENTRIES THAT MADE DFP V3 THINK THEY WERE PDS/E   *\n*   DATASETS. THIS WAS DUE TO DF/HSM BEING USED FOR A SHORT WHILE     *\n*   ABOUT 5 YEARS AGO. THANKS DF/HSM !.                               *\n*                                                                     *\n*   CHECKS ARE MADE ON THE DS1SMSFG BYTE FOR THE BITS DS1SMSDS AND    *\n*   DS1PDSE.  IF EITHER ARE ON, THEY CAN BE TURNED OFF.               *\n*                                                                     *\n*   THIS PROGRAM CHECKS OUT THESE FIELDS IN THE VTOC AND OPTIONALLY   *\n*   GENERATES A REPORT, OR RESETS THEM TO BINARY ZEROES.              *\n*                                                                     *\n*                                                                     *\n*   JCL:                                                              *\n*                                                                     *\n*   //S1   EXEC PGM=DSCBSCAN,PARM='PRINT|RESET|ALL'                   *\n*   //STEPLIB  DD DSN=APF.AUTH.LIB,DISP=SHR                           *\n*   //SYSPRINT DD SYSOUT=*                                            *\n*   //SYSUT1   DD UNIT=33XX,VOL=SER=XXXXXX,DISP=SHR                   *\n*                                                                     *\n*   THIS PROGRAM REQUIRES APF AUTHORISATION TO FUNCTION CORRECTLY     *\n*                                                                     *\n*   PARM=PRINT     PRODUCES A REPORT OF DATASETS NEEDING ATTENTION    *\n*   PARM=RESET     RESETS THE SMS BITS                                *\n*   PARM=ALL       DOES BOTH OF THE ABOVE                             *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         USING *,R11               ESTABLISH ADDRESSABILITY.\n         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS.\n         LR    R11,R15             ESTABLISH BASE REGISTER.\n         B     START               SKIP ROUND HIGHLIGHTER.\n         DC    C'DSCBSCAN &SYSDATE &SYSTIME V1.0'\nSAVEAREA DS    18F\nSTART    EQU   *\n         ST    R13,SAVEAREA+4      STORE SAVE AREA ADDRESS.\n         LA    R3,SAVEAREA         GET OUR SAVE AREA ADDRESS.\n         ST    R3,8(R13)           FORWARD SAVE AREA CHAINING.\n         LR    R13,R3              OUR SAVE AREA IN R13.\n***********************************************************************\n         L     R2,0(R1)               GET PARM ADDRESS.\n         LH    R3,0(R2)               LOAD LENGTH.\n         CH    R3,=H'3'               Q. IS PARM LENGTH THREE BYTES.\n         BNE   PARM0010               A. NO... DO FURTHER CHECKS.\n         CLC   2(3,R2),=C'ALL'        Q. ALL FUNCTIONS REQUESTED.\n         BNE   PARM9999               A. NO... INVALID PARM.\n         OI    FLAGBYTE,PRINT+RESET   A. YES.. INDICATE ALL FUNCTIONS.\n         B     RDJF0010               CARRY ON WITH MAIN PROCESSING.\nPARM0010 EQU   *\n         CH    R3,=H'5'               Q. IS PARM LENGTH FIVE BYTES.\n         BNE   PARM9999               A. NO... INVALID PARM.\n         CLC   2(5,R2),=C'PRINT'      Q. PRINT FUNCTION REQUESTED.\n         BE    PARM0020               A. YES.. SET FLAG ACCORDINGLY.\n         CLC   2(5,R2),=C'RESET'      Q. RESET FUNCTION REQUESTED.\n         BNE   PARM9999               A. NO... INVALID PARM.\n         OI    FLAGBYTE,RESET         A. YES.. INDICATE RESET FUNCTION.\n         B     RDJF0010               CARRY ON WITH MAIN PROCESSING.\nPARM0020 EQU   *\n         OI    FLAGBYTE,PRINT         INDICATE PRINT FUNCTION.\n         B     RDJF0010               CARRY ON WITH MAIN PROCESSING.\nPARM9999 EQU   *\n         WTO   'SMSR001E - INVALID PARM SPECIFIED'\n         LA    R15,20                 SHOW INVALID PARM.\n         B     FINISH\n***********************************************************************\nRDJF0010 EQU   *\n         RDJFCB SYSUT1                       ISSUE READ JFCB.\n         LTR   R15,R15                       Q. DID IT WORK.\n         BNE   JFCBBAD                       A. NO.... ISSUE ERROR MSG.\n         LA    R2,JFCBAREA                   A. YES... ADDRESS JFCB.\n         USING JFCBDSCT,R2\n         MVI   JFCBDSNM,X'04'                SET UP JFCBDSNM WITH X04.\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM\n         TM    FLAGBYTE,PRINT                Q. PRINT REQUESTED.\n         BNO   RDJF0020                      A. NO... SKIP PRINT OPEN.\n         OPEN  (SYSPRINT,OUTPUT)             A. YES.. OPEN PRINT FILE.\n         LA    R15,SYSPRINT                  LOAD DCB ADDRESS.\n         USING IHADCB,R15\n         TM    DCBOFLGS,DCBOFOPN             Q. OPEN OKAY.\n         BNO   OPENERR                       A. NO... ISSUE ERROR.\n         DROP  R15\n         TIME  DEC                           A. YES.. TIME AND DATE.\n         ST    R1,FULLWORD                   STORE DATE.\n         ED    DATE,FULLWORD+1               EDIT INTO HEADING.\n         ST    R0,FULLWORD                   STORE TIME.\n         MVI   FULLWORD+3,X'0C'              SET VALID PD SIGN.\n         ED    TIME,FULLWORD                 EDIT INTO PRINT LINE.\n         ZAP   LINECNT,=P'0'                 SET LINE COUNT TO ZERO.\n         ZAP   PAGECNT,=P'0'                 SET PAGE COUNT TO ZERO.\nRDJF0020 EQU   *\n         OPEN  (SYSUT1,OUTPUT),TYPE=J        OPEN VTOC FOR OUTPUT.\n         LA    R3,IOBAREA                    ADDRESS IOB.\n         USING IOBSTDRD,R3\n         XC    IOBAREA,IOBAREA               CLEAR IOB INITIALLY.\n         OI    IOBFLAG1,IOBCMDCH+IOBUNREL    SET IOB FLAGS1.\n         LA    R4,ECB                        GET ECB ADDRESS.\n         ST    R4,IOBECBPT                   STORE IN IOB.\n         LA    R4,SYSUT1                     GET DCB ADDRESS.\n         ST    R4,IOBDCBPT                   STORE IN IOB.\n         USING IHADCB,R4\n         L     R4,DCBDEBAD                   LOAD DEB ADDRESS.\n         USING DEBBASIC,R4\n         LA    R4,DEBBASND                   END OF BASIC SECTION\n         USING DEBDASD,R4\n         MVC   IOBCC,DEBSTRCC                MOVE START XTNT CYL ADDR.\n         MVC   IOBHH,DEBSTRHH                MOVE START XTNT TRK ADDR.\n         MVI   IOBR,1                        START WITH RECORD 1.\n         LA    R5,TRKCCW01                   ADDRESS OF CHANNEL PROG.\n         ST    R5,IOBSTART                   STORE IN IOB.\n         LA    R8,DSCBAREA                   ADDRESS OF DSCB IOAREA.\n         USING FMT1DSCB,R8\n***********************************************************************\nEXCP0010 EQU   *\n         XC    ECB,ECB                          CLEAR ECB.\n         MVI   CCWOPCDE,X'0E'                   CCW OP CODE READ K/D.\n         EXCP  IOBAREA                          ISSUE EXCP.\n         WAIT  ECB=ECB                          WAIT FOR I/O INTERRUPT.\n         CLI   ECB,X'7F'                        Q. SUCCESSFUL I/O\n         BNE   EXCP0040                         A. NO... CHECK FURTHER.\n         CLI   DS1FMTID,C'1'                    Q. IS THIS A FMT1 DSCB.\n         BNE   EXCP0030                         A. NO... NOTHING TO DO.\n         TM    DS1SMSFG,DS1SMSDS+DS1PDSE        Q. SMS OR PDSE DATASET.\n         BZ    EXCP0030                         A. NO.... CARRY ON.\n         TM    FLAGBYTE,PRINT                   Q. PRINT REQUESTED.\n         BNO   EXCP0020                         A. NO... SKIP PRINT.\n         UNPK  HALFWORD(1),DS1SMSFG             UNPACK SMS FLAGS.\n         MVC   HALFWORD+1,DS1SMSFG              MOVE IN LAST BYTE\n         NC    HALFWORD,DENIBBLE                KNOCK OFF ZONE BITS.\n         TR    HALFWORD,TRANTABL                CONVERT TO CHARACTER.\n         BAL   R6,PRNT0010                      GO PRINT A LINE.\nEXCP0020 EQU   *\n         TM    FLAGBYTE,RESET                   Q. RESET REQUESTED.\n         BNO   EXCP0030                         A. NO... SKIP RESET.\n         XC    DS1SMSFG(4),DS1SMSFG             A. YES.. RESET SMS BITS\n         XC    ECB,ECB                          CLEAR ECB.\n         MVI   CCWOPCDE,X'0D'                   CCW OP CODE WRITE K/D.\n         EXCP  IOBAREA                          ISSUE EXCP.\n         WAIT  ECB=ECB                          WAIT FOR I/O INTERRUPT.\n         CLI   ECB,X'7F'                        Q. SUCCESSFUL I/O\n         BNE   EXCPDUMP                         A. NO... MUST BE ERROR.\nEXCP0030 EQU   *\n         IC    R5,IOBR                          GET RECORD NO FROM IOB.\n         LA    R5,1(R5)                         ADD ONE FOR LUCK.\n         STC   R5,IOBR                          PUT IT BACK AGAIN.\n         B     EXCP0010                         ISSUE EXCP AGAIN.\nEXCP0040 EQU   *\n         CLI   ECB,X'41'                        Q. POSSIBLE END OF TRK.\n         BNE   EXCPDUMP                         A. NO... OTHER ERROR.\n         MVI   IOBR,1                           A. YES.. ASSUME EOT.\nEXCP0050 EQU   *\n         XR    R5,R5                            CLEAR FOR ICM.\n         ICM   R5,3,IOBHH                       GET LAST TRACK.\n         CH    R5,=H'14'                        Q. LAST TRACK THIS CYL.\n         BE    EXCP0060                         A. YES.. INCR CYLS.\n         LA    R5,1(R5)                         A. NO... TRK PLUS ONE.\n         STCM  R5,3,IOBHH                       STORE BACK IN IOB.\n         B     EXCP0070                         DO NEXT EXCP.\nEXCP0060 EQU   *\n         XC    IOBHH,IOBHH                      SET TRACK ZERO.\n         XR    R5,R5                            CLEAR FOR ICM.\n         ICM   R5,3,IOBCC                       GET LAST CYLINDER.\n         LA    R5,1(R5)                         ADD ONE TO IT.\n         STCM  R5,3,IOBCC                       STORE BACK IN IOB.\nEXCP0070 EQU   *\n         CLC   IOBCC(L'IOBCC+L'IOBHH),DEBENDCC  Q. END OF EXTENT.\n         BH    EXIT0010                         A. YES... THATS IT.\n         B     EXCP0010                         A. NO.... DO NEXT EXCP.\n***********************************************************************\nEXIT0010 EQU   *\n         TM    FLAGBYTE,PRINT              Q. PRINT REQUESTED.\n         BNO   EXIT0030                    A. NO... SKIP CLOSE.\n         MVI   LINE,C' '                   A. YES.. BLANK OUT LINE.\n         MVC   LINE+1(L'LINE-1),LINE       PROPAGATE THROUGH LINE.\n         PUT   SYSPRINT,LINE               WRITE A BLANK LINE.\n         TM    FLAGBYTE,RESET              Q. RESET REQUESTED.\n         BNO   EXIT0020                    A. NO... SKIP MESSAGE.\n         PUT   SYSPRINT,RESETMSG           WRITE MESSAGE.\nEXIT0020 EQU   *\n         PUT   SYSPRINT,EOTMSG             WRITE MESSAGE.\n         CLOSE SYSPRINT                    CLOSE PRINT FILE.\nEXIT0030 EQU   *\n         CLOSE SYSUT1                  NO MORE EXTENTS, CLOSE FILE.\n         LA    R15,0                   SET RETURN CODE 0.\n***********************************************************************\nFINISH   EQU   *\n         L     R13,SAVEAREA+4          GET HIGH SAVE AREA.\n         L     R14,12(R13)             RELOAD RETURN ADDRESS.\n         LM    R0,R12,20(R13)          RELOAD CALLERS REGISTERS.\n         BR    R14                     BYE FOR NOW.\n***********************************************************************\n***********************************************************************\nJFCBBAD  EQU   *\n         WTO   'SMSR002E - SYSUT1 DD STATEMENT MISSING'\n         LA    R15,8                              SET REURN CODE 8.\n         B     FINISH                             END OF RUN.\n***********************************************************************\nEXCPDUMP EQU   *\n         WTO   'SMSR003E - EXCP FAILED'\n         ABEND 999,DUMP                           GIVE US A DUMP.\n***********************************************************************\nOPENERR  EQU   *\n         WTO   'SMSR004E - SYSPRINT DD STATEMENT MISSING'\n         LA    R15,8                              SET REURN CODE 8.\n         B     FINISH                             END OF RUN.\n*********************************************************\nPRNT0010 EQU   *\n         CP    LINECNT,=P'0'      Q. LINE COUNT ZERO.\n         BNE   PRNT0020           A. NO.... GO AND PRINT LINE.\n         BAL   R7,PRNT0030        A. YES... DO HEADINGS.\nPRNT0020 EQU   *\n         MVC   LINE+15(L'DS1DSNAM),DS1DSNAM     A. YES.. MOVE DSNAME.\n         MVC   LINE+68(2),HALFWORD              MOVE TO PRINT LINE.\n         PUT   SYSPRINT,LINE      PRINT LINE.\n         AP    LINECNT,=P'1'      COUNT LINE.\n         CP    LINECNT,=P'57'     Q. BOTTOM OF PAGE.\n         BLR   R6                 A. NO....\n         ZAP   LINECNT,=P'0'      A. YES... FORCE SKIP TO CH1.\n         BR    R6\nPRNT0030 EQU   *\n         AP    PAGECNT,=P'1'               SET UP PAGE COUNT.\n         MVC   PAGE,PAGEPTN                SET UP EDIT PATTERN.\n         ED    PAGE,PAGECNT                EDIT PAGE COUNT INTO LINE.\n         PUT   SYSPRINT,LINEH1             WRITE HEADER.\n         MVI   LINE,C' '                   BLANK FIRST BYTE.\n         MVC   LINE+1(L'LINE-1),LINE       PROPAGATE THROUGH LINE.\n         MVI   LINE,C'0'                   SKIP A LINE.\n         MVC   LINE+15(12),=C'DATASET NAME'\n         MVC   LINE+65(8),=C'DS1SMSFG'\n         PUT   SYSPRINT,LINE               WRITE COLUMN HEADING.\n         MVI   LINE,C' '                   BLANK FIRST BYTE.\n         MVC   LINE+1(L'LINE-1),LINE       PROPAGATE THROUGH LINE.\n         PUT   SYSPRINT,LINE               WRITE BLANK LINE.\n         BR    R7\n***********************************************************************\n***********************************************************************\nTRKCCW01 CCW   X'23',ZEROES,X'40',X'01'                   SET SECTOR\n         CCW   X'31',IOBAREA+(IOBCC-IOBSTDRD),X'40',X'05' SEARCH ID EQ\n         CCW   X'08',*-8,X'00',X'00'                      TIC\nCCWOPCDE CCW   X'03',DSCBAREA,X'00',X'8C'       OPCODE SET IN PROGRAM.\n***********************************************************************\n***********************************************************************\nTRANTABL DC    C'0123456789ABCDEF'\nDENIBBLE DC    X'0F0F'\n***********************************************************************\n***********************************************************************\nFULLWORD DS    F\nLINECNT  DC    PL2'0'\nPAGECNT  DC    PL3'0'\nPAGEPTN  DC    X'402020202021'\nLINEH1   DS    0CL133\n         DC    C'1DATE '\nDATE     DC    X'4021204B202020'\n         DC    CL8' '\n         DC    C'PROGRAM DSCBSCAN - LISTING OF FORMA'\n         DC    C'T 1 DSCBS WITH INVALID SMS FLAGS   '\n         DC    C'TIME '\nTIME     DC    X'4021204B20204B2020'\n         DC    CL16' '\n         DC    C'PAGE'\nPAGE     DS    CL6\n         DC    CL2' '\nLINE     DS    CL133\nRESETMSG DS    0CL133\n         DC    CL16' '\n         DC    CL117'DS1SMSDS/DS1PDSE FOR ABOVE DATASETS RESET TO ZERO'\nEOTMSG   DS    0CL133\n         DC    CL16' '\n         DC    CL117'NORMAL END OF TASK'\n***********************************************************************\n***********************************************************************\nHALFWORD DS    H\n         DS    0F\nDSCBAREA DS    CL(DSCBLENG)\nJFCBAREA DS    CL(JFCBLENG)\nIOBAREA  DS    CL(IOBLENG)\nEXITLIST DS    0F\n         DC    X'87'\n         DC    AL3(JFCBAREA)\n***********************************************************************\n***********************************************************************\nSYSUT1   DCB   DSORG=PS,MACRF=(E),DDNAME=SYSUT1,EXLST=EXITLIST,DEVD=DA\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,LRECL=133, **\n               BLKSIZE=1330\n***********************************************************************\n***********************************************************************\nECB      DS    F                 ECB USED FOR WTOR AND EXCP.\nREPLY    DS    C                 WTOR REPLY AREA.\nZEROES   DC    X'00'             ZERO BYTE FOR CHANNEL PROGRAM.\nFLAGBYTE DC    X'00'             FLAGS.\nPRINT    EQU   X'80'             PRINT FUNCTION REQUESTED FLAG.\nRESET    EQU   X'40'             RESET FUNCTION REQUESTED FLAG.\n***********************************************************************\n***********************************************************************\n         LTORG\nJFCBDSCT DSECT\n         IEFJFCBN\nJFCBLENG EQU *-JFCBDSCT\n         IEZIOB\nIOBLENG  EQU *-IOBSTDRD\nFMT1DSCB DSECT\n         IECSDSL1 (1)\nDSCBLENG EQU *-IECSDSL1\n         IEZDEB LIST=YES\n         DCBD\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A05#INDX": {"ttr": 7694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x00\\x93&\\x9f\\x00\\x93&\\x9f\"5\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-09-26T00:00:00", "modifydate": "1993-09-26T22:35:01", "lines": 15, "newlines": 15, "modlines": 0, "user": "DPSPPP"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A05XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    PAUL VOYNER\n                     WHITBREAD                                          Y\n                     0734 581166\n ____________________________________________________________________\n\n    REXX UTILITY TO CALL DISPLAY OF SYSTEM INFO ( LAST IPL,MVS VERSION\n    FMID CPU ID'S, AFP LIBS  AND LINKLST\n\n  A05DATEC    DATE CONVERSION ROUTINE\n  A05IPL      INVOCATION ROUTINE\n  A0505SYS    REXX\n  A0505P001   PANEL DEF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A05DATEC": {"ttr": 7696, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x90%o\\x00\\x90%o\\x15\\x13\\x01C\\x01C\\x00\\x00\\xd9\\xc4\\xe3\\xc6\\xe3\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-09-13T00:00:00", "modifydate": "1990-09-13T15:13:01", "lines": 323, "newlines": 323, "modlines": 0, "user": "RDTFTC"}, "text": "/**REXX****************************************************************/\n/*                                                                    */\n/* EXEC NAME: DATECONV                                 DATE 01/11/88  */\n/*    Author: William A. Mayne                                        */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */\n/*                       Functional Description                       */\n/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/*\nEXEC NAME: DATECONV                                        DATE 01/12/88\n   Author: William A. Mayne\n\nSyntax: DATECONV(datein,typein,typeout)\n        - may also be executed as a command by -\n        DATECONV datein typein typeout\n\n                      FUNCTIONAL DESCRIPTION\n\nThis converts any date  Jan. 1, 0001 or later from  one form to another,\nincluding finding the name of the month  or day of the week for any date\nin that range.\n\nTYPES SUPPORTED:\n\n   B = \"base date\", or the number of days since Jan. 1, 0001.\n       This is the only form which can be used to compute the\n       number of days between two dates, even if they are in\n       different centuries. Jan. 1, 0001 = 0.\n   C = century date, i.e. days so far in the century.\n       Centuries are defined to start with years divisible by 100.\n       Jan. 1, xx00 = 1 (Note different origin from base date.)\n       (This was intended for use in calculations before the 'B'\n       type date was available. Its use is not recommended.)\n   D = days since Jan. 1 of input year (including Jan. 1)\n   E = \"European\" format, DD/MM/YY\n   J = Julian date in \"OS\" form YYDDD.\n   L = long format, e.g. DD Mnn YYYY, e.g. '1 May 1987'\n       (Date() default. You never really need to give this.)\n   M = month (spelled out)\n   N = normal (same as L, included for consistency with Mansfield)\n   O = ordered, YY/MM/DD (use letter \"oh\") - suitable for sorting\n   S = sort format, YYYYMMDD\n   U = U.S.A. format, MM/DD/YY\n   W = day of week (spelled out)\n\nL, M, N, and W may only be specified as output formats.\n\nThe default date is  the current date. The only use  for this default is\nto get the current date in base date form, which is not supported by CMS\nRexx. If  either \"datein\" or  \"typein\" is  given both are  required. All\ndates are assumed to  be be in the current century unless  format S or B\nare used.\n\nDefault \"typeout\"  is 'L', which  is equivalent  to 'N' (long  or normal\nformat: dd  mmm yyyy).\n\nThis is based  on the DATECONV builtin function  of Mansfield Software's\nPersonal Rexx. The existing DATECONV EXEC  on the user exchange disk has\nbeen  modified to  use  this one  when  called as  a  function with  the\narguments  for  this format,  so  a  DATECONV function  compatible  with\nPersonal Rexx is available.\n\nThere are two  false assumptions, neither of which  should normally make\nany difference:\n\n(1) The  calculation is done  as if  the present Gregorian  calendar had\nbeen  in continuous  use from  the  starting date,  so historical  dates\nbefore  the adoption  of  the Gregorian  calender in  1582  will not  be\ncorrect. You  can't use this to  find the day  of the week for  Oct. 12,\n1492, for example.\n\n(2) For this function,  a century is presumed to start on  Jan. 1 of the\nlast year  divisible by  100, so all  dates in a  century have  the same\nvalue in the hundreds place of the year. Purists note that centuries are\ndefined to begin  one year later than  that. There was no  year 0000, so\nthe  first  century  was  the  years  0001  through  0100.\n\nCOMPATIBILITY NOTES:\n\n(1) Type 'L' is CMS equivalent of Mansfield's 'N'. Both are supported.\n(2) Mansfield's format always requires both datein and typein.\n(3) Mansfield's version does not support execution as a command.\n(4) The basedate function treats Jan. 1, 0001 as day 0, to be consistent\n    with IBM's date(b) and Personal  Rexx's basedate. Note that Personal\n    incorrectly converts  base dates before Jan.  1, 100, so there  is a\n    one day discrepancy before that.\n\nERROR HANDLING:\n\nIf formats  are invalid or  the input  date is not  a valid date  of the\nspecified format  the function returns  the null string and  the command\ndisplays an error message. Error  checking may not be exhaustive. Report\nany errors not handled correctly to the author.\n\nIMPLEMENTATION NOTES/EXCUSES:\n\nThis code was hacked from an earlier DATECONV EXEC, which only supported\ndates from Jan. 1,  1900 through Dec. 31, 1999 and  did not support base\ndates. Therefore  the implementation is  a little messy, using  a global\nvariable \"cc\" for century and  making some modifications to the internal\nfunctions.\n\nInternally, basedate and century functions  work as if the first century\ncontained a  year 0. Basedates are  adjusted by 366 days  to correct for\nthis on  both input (adding 366)  and output (subtracting 366).  This is\ndone for  all basedates and  (theoretically) century dates in  the first\ncentury.\n*/\n/**********************************************************************/\nparse source . cmd .\nif cmd = 'FUNCTION' then arg datein,typein,typeout\nelse arg datein typein typeout\nif datein='' then do\n  datein=date(s)\n  typein='S'\n  end\nif typeout='' then typeout='L'\nif typeout='N' then typeout='L'\n\n/* convert input date to separate variables cc mm yy dd      */\n/* convert century date to julian                            */\ncc=left(date(s),2) /* default century is the current century */\n/* Convert base date to century */\nif typein='B' then do\n  cc=0\n  if datein>36525-366 then do\n    datein=datein-36525+366   /* subtract out first century days */\n    do forever\n      cc=cc+1\n      subdays=36524 /* days in normal century */\n      if cc//4=0 then subdays=subdays+1 /* extra leap year in each 400 */\n      if datein<=subdays then leave\n      datein=datein-subdays\n      end\n    end\n  else\n    datein=datein+366 /* as if first century started with 0000 */\n  typein='C'\n  cc=right(cc+100,2)\n  end\nif typein='C' then do\n  if datatype(datein,'W') then\n    if datein<1 | datein>36524+leapyear(00) then\n      signal baddate\n    else\n      nop\n  else\n    signal baddate\n  typein='J'\n  datein=yyddd(datein)\n  end\nif typein='D' then do\n  datein=left(date('O'),2) || datein\n  typein='J'\n  end\nif typein='E' then\n  parse var datein dd '/' mm '/' yy\nif typein='J' then do\n  parse var datein yy 3 ddd\n  /* convert ddd to mm dd */\n  mm=1\n  dd=ddd\n  do forever\n    n=daysin(yy,mm)\n    if n<dd then dd=dd-n\n    else leave\n    mm=mm+1\n    end\n  end\nif typein='O' then\n  parse var datein yy '/' mm '/' dd\nif typein='S' then\n  parse var datein cc 3 yy 5 mm 7 dd\nif typein='U' then\n  parse var datein mm '/' dd '/' yy\n\n/* Catch some errors in date format */\nif datatype(mm,'W') & datatype(yy,'W') & datatype(dd,'W') then do\n  if mm<1 | mm>12 then signal baddate\n  if yy<0 then signal baddate\n  if dd<1 | dd>daysin(yy,mm) then signal baddate\n  end\nelse\n signal baddate\n\n/* result=datein converted to typeout */\nselect\nwhen typeout='B' then result=basedate(yy,mm,dd)-366\nwhen typeout='C' then do\n  result=century(julian(yy,mm,dd))\n  if cc=0 then result=result-366\n  end\nwhen typeout='D' then result=right(julian(yy,mm,dd),3)\nwhen typeout='E' then result=dd'/'mm'/'yy\nwhen typeout='J' then result=julian(yy,mm,dd)\nwhen typeout='L' then result=dd+0 left(monthname(mm),3) cc||yy\nwhen typeout='M' then result=monthname(mm)\nwhen typeout='O' then result=yy'/'mm'/'dd\nwhen typeout='S' then result=cc||yy||mm||dd\nwhen typeout='U' then result=mm'/'dd'/'yy\nwhen typeout='W' then result=weekday(yy,mm,dd)\notherwise signal badtype\nend\n\n/* if function return result, else display */\nif cmd='FUNCTION' then return result\nelse push result\nexit\n\n/* error exit for invalid input date */\nbaddate:\nif cmd='FUNCTION' then return ''\nelse say 'Invalid date'\nexit 1\n\n/* error exit for invalid output type specified */\nbadtype:\nif cmd='FUNCTION' then return ''\nelse say 'Invalid type'\nexit 2\n\n/* find number of days in year (if no month given) or month */\ndaysin: procedure expose cc\narg yy, mm\nif mm='' then\n  if leapyear(yy) then return 366\n  else return 365\nelse\n  select\n  when mm=1 then return 31\n  when mm=2 then\n    do\n      if leapyear(yy) then return 29\n      else return 28\n    end\n  when mm=3 then return 31\n  when mm=4 then return 30 /* april */\n  when mm=5 then return 31\n  when mm=6 then return 30 /* june */\n  when mm=7 then return 31\n  when mm=8 then return 31\n  when mm=9 then return 30 /* september */\n  when mm=10 then return 31\n  when mm=11 then return 30 /* november */\n  when mm=12 then return 31\n  otherwise return 0\n  end\n\n/* determine if yy is a leap year */\nleapyear: procedure expose cc; arg yy\n  if yy=0 then\n    if cc//4=0 then return 1\n    else return 0\n  else\n    if yy//4<>0 then return 0\n    else return 1\n\n/* convert yy, mm, dd to yyddd (julian) */\njulian: procedure expose cc; arg yy, mm, dd\nddd=dd\ni=1\ndo while i<mm\n  ddd=ddd+daysin(yy,i)\n  i=i+1\nend\nreturn yy||right('00'||ddd,3)\n\n/* convert century date (nnnnn) to julian (yyddd) */\nyyddd: procedure expose cc; arg ddd\nyy=0\ndo forever\n  n=daysin(yy)\n  if n<ddd then ddd=ddd-n\n  else leave\n  yy=yy+1\nend\nreturn right('0'yy,2)right('00'ddd,3)\n\n/* convert julian (yyddd) to century (nnnnn) */\ncentury: procedure expose cc; parse arg yy 3 ddd\nif yy>0 then do\n  ddd=ddd+365*yy             /* 365 days for each past year    */\n  ddd=ddd+(yy-1)%4           /* add for leap years cc04 and after */\n  end\nif yy>0 & cc//4=0 then ddd=ddd+1 /* extra leap year each 4 centuries */\nreturn ddd\n\n/* convert days in century (nnnnn) to day of week */\nweekday: procedure expose cc; arg yy,mm,dd\nn=(basedate(yy,mm,dd)-366)//7+1\nday.7='Sunday'\nday.1='Monday'\nday.2='Tuesday'\nday.3='Wednesday'\nday.4='Thursday'\nday.5='Friday'\nday.6='Saturday'\nreturn day.n\n\n/* Give the name of a month */\nmonthname: procedure; arg mm\nselect\nwhen mm=1 then return 'January'\nwhen mm=2 then return 'February'\nwhen mm=3 then return 'March'\nwhen mm=4 then return 'April'\nwhen mm=5 then return 'May'\nwhen mm=6 then return 'June'\nwhen mm=7 then return 'July'\nwhen mm=8 then return 'August'\nwhen mm=9 then return 'September'\nwhen mm=10 then return 'October'\nwhen mm=11 then return 'November'\nwhen mm=12 then return 'December'\notherwise return ''\nend\n\nbasedate: procedure expose cc\narg yy, mm, dd\nif cc=0 then return century(julian(yy,mm,dd))\nbdate=cc*36524          /* days for all previous centuries           */\nbdate=bdate+(cc-1)%4+1  /* extra leap year every 4 centuries         */\nbdate=bdate+century(julian(yy,mm,dd))\nreturn bdate-1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A05IPL": {"ttr": 7942, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x00\\x90%o\\x00\\x90%o\\x14C\\x00\\x12\\x00\\x07\\x00\\x0c\\xd9\\xc4\\xe3\\xc6\\xe3\\xc3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1990-09-13T00:00:00", "modifydate": "1990-09-13T14:43:01", "lines": 18, "newlines": 7, "modlines": 12, "user": "RDTFTC"}, "text": "00010000 PROC 0 DEBUG TRACE MSG\n00020000    CONTROL MAIN NOMSG\n00021000IF &TRACE = TRACE  THEN SET DEBUG = DEBUG\n00022000IF &DEBUG = DEBUG  THEN CONTROL LIST CONLIST MSG SYMLIST\n00023000IF &MSG   = MSG    THEN CONTROL MSG\n00024001\n00025001/* VERIFY IF CLIST EXCUTING WITHIN OR OUTSIDE ISPF ENVIRONMENT.\n00026001\n00027001  IF &SYSISPF \u00ac= ACTIVE     THEN -\n00028001  DO       /* START ISPF AND RE-INVOKE THE CLIST */\n00029003     SET &CMD = &STR(%IPL -\n00030001           &HELP &TRACE &MSG &DEBUG\n00040001     ISPSTART CMD(&CMD)\n00050001     GOTO EXIT\n00060001  END\n00141000\n00150002%TPC05SYS &DEBUG\n00160001EXIT: END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A0505SYS": {"ttr": 7944, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x01\\x00\\x90\"\\x7f\\x00\\x90(O\\x112\\x01\\x03\\x00\\x8e\\x00\\x00\\xd9\\xc4\\xe3\\xc6\\xe3\\xc3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-08-15T00:00:00", "modifydate": "1990-10-11T11:32:01", "lines": 259, "newlines": 142, "modlines": 0, "user": "RDTFTC"}, "text": " /* REXX *************************************************************\\\n|*     System Information                                             *|\n \\********************************************************************/\n\narg debug .\nif debug = 'DEBUG' then trace i\nnumeric digits 20\ntoday = date()\ncall get_sysinfo\ncall create_table\namt = 'CSR'\ndo forever\n  address ISPEXEC \"TBDISPL SYSINFO PANEL(TPC5P001)\"\n  if rc > 4 then leave\n  if zcmd = 'STOREMAP' then call display_storage_map\n  else address ISPEXEC \"SETMSG MSG(ISPZ001)\"\n  iterate\nend\ncall close_table\nexit\n\nget_sysinfo:\n\n  cvt = storage(10,4)             /* get address of CVT              */\n\n  doff = c2d(cvt) - x2d('6')      /* offset to address CVTMDL        */\n  cvtmdl = c2x(d2c(doff,4))       /* convert to hex address          */\n  tpc5v102 = c2x(storage(cvtmdl,2)) /* get mdl data                  */\n\n  cpuids = ''                     /* initialise cpuids string        */\n  doff = c2d(cvt) + x2d('2fc')    /* offset to address CVTPCCAT      */\n  cvtpccat = c2x(d2c(doff,4))     /* convert to hex address          */\n  pcca = c2x(storage(cvtpccat,4)) /* address of PCCA vector table    */\n  do i = 0 to 60 by 4             /* loop over all 16 PCCA vectors   */\n    table = d2x(x2d(pcca) + i)    /* address of next table entry     */\n    vector = c2x(storage(table,4)) /* address of next vector in table*/\n    if x2d(vector) = 0 then iterate /* check valid PCCA vector addr  */\n    data = storage(vector,16)     /* get data vector                 */\n    cpuid = substr(data,7,6)      /* get CPU id from PCCA vector     */\n    cpuids = cpuids||cpuid' '     /* concatenate CPU ids             */\n  end\n  tpc5v103 = cpuids               /* write out CPU id                */\n\n  doff = c2d(cvt) + x2d('c4')     /* offset to address CVTSMCA       */\n  cvtsmca = c2x(d2c(doff,4))      /* convert to hex address          */\n  smca = c2x(storage(cvtsmca,4))  /* address of SMCA                 */\n  data = storage(smca,20)         /* get SMCA vector                 */\n  tpc5v101 = substr(data,17,4)    /* get SMF id from SMCA vector     */\n\n  doff = c2d(cvt) - x2d('28')     /* offset to address CVTPRODN      */\n  cvtprodn = c2x(d2c(doff,4))     /* convert to hex address          */\n  tpc5v201 = storage(cvtprodn,8)  /* get prodn data                  */\n\n  doff = c2d(cvt) - x2d('20')     /* offset to address CVTPRODI      */\n  cvtprodi = c2x(d2c(doff,4))     /* convert to hex address          */\n  tpc5v202 = storage(cvtprodi,8)  /* get prodn data                  */\n\n  smcaoff = x2d(smca) + x2d('150') /* offset of SMCAITME from SMCA   */\n  smcaoff = d2x(smcaoff)          /* convert to hex                  */\n  data = storage(smcaoff,8)       /* get SMCA vector data            */\n  ipltme = substr(data,1,4)       /* get IPL time from SMCA vector   */\n  ipldte = substr(data,5,4)       /* get IPL date from SMCA vector   */\n  v1 = c2d(ipltme) / 100\n  hrs = trunc(v1 / 3600)\n  min = trunc((v1 - (hrs * 3600)) / 60)\n  sec = trunc(v1 - (hrs * 3600) - (min * 60))\n  if length(hrs) = 1 then hrs = '0'hrs\n  if length(min) = 1 then min = '0'min\n  if length(sec) = 1 then sec = '0'sec\n  tpc5v302 = hrs':'min':'sec      /* write out IPL time              */\n  iplyr = substr(c2x(ipldte),3,2)\n  ipldy = substr(c2x(ipldte),5,3)\n  tpc5v301 = iplyr'.'ipldy        /* write out IPL date              */\n  ipld   = iplyr||ipldy           /* yyddd format, character         */\n  iplday = dateconv(ipld,j,w)     /* display date in dd-mmm-yyyy form*/\n  ipldte2= dateconv(ipld,j,l)     /* display date in dd-mmm-yyyy form*/\n\n  doff = c2d(cvt) + x2d('30')     /* offset to address CVTSYSAD      */\n  cvtsysad = c2x(d2c(doff,4))     /* convert to hex address          */\n  sysad = c2x(storage(cvtsysad,4)) /* address of SYSAD               */\n  data = storage(sysad,35)        /* get SYSAD vector                */\n  tpc5v303 = substr(data,29,6)    /* get IPL vol from SYSAD vector   */\n  tpc5v304 = substr(data,14,3)    /* get IPL uaddr from SYSAD vector */\n  return\n\ncreate_table:\n\n  address ISPEXEC \"TBCREATE SYSINFO NAMES(TPC5LL,TPC5APF,TPC5VOL)\"\n\n  cvtll = c2d(d2c(c2d(cvt) + 1244,4))\n  lladdr = c2d(storage(d2x(cvtll),4))\n  llnum = c2d(storage(d2x(lladdr+4),4))\n  lladdr = lladdr + 8\n\n  cvtauth = c2d(d2c(c2d(cvt) + 484,4))\n  authaddr = c2d(storage(d2x(cvtauth),4))\n  authnum = c2d(storage(d2x(authaddr),2))\n  authaddr = authaddr + 2\n\n  maxnum = max(llnum,authnum)\n  do i = 1 to maxnum\n\n    if llnum >= i then do\n      tpc5ll = storage(d2x(lladdr + 1),44)\n      lladdr = lladdr + 45\n    end\n    else do\n      tpc5ll = ''\n    end\n\n    if authnum >= i then do\n      length = c2d(storage(d2x(authaddr),1))\n      authdata = storage(d2x(authaddr + 1),length)\n      tpc5vol = substr(authdata,1,6)\n      tpc5apf = substr(authdata,7,length-6)\n      authaddr = authaddr + length + 1\n    end\n    else do\n      tpc5vol = ''\n      tpc5apf = ''\n    end\n\n    address ISPEXEC \"TBBOTTOM SYSINFO NOREAD\"\n    address ISPEXEC \"TBADD SYSINFO\"\n  end\n  tpc5nll = llnum\n  tpc5napf = authnum\n  address ISPEXEC \"TBTOP SYSINFO\"\n  return\n\nclose_table:\n\n  address ISPEXEC \"TBEND SYSINFO\"\n  return\n\ndisplay_storage_map:\n\naddress ISPEXEC \"VGET (ZSCREEND) SHARED\"\nzcmd = ' '\nc1 = '51'x\nc2 = '52'x\nc3 = '53'x\nc4 = '54'x\nc5 = '55'x\nc6 = '56'x\nnl = zscreend - 3\nlc = 0\nsl = 0\nprc = 0\ndo while (prc = 0)\n  stordata = ''\n  if sl < 0 then sl = 0\n  addr = sl\n  do v = 1 to nl\n    hsl = right(d2x(addr),8,'0')\n    hof = right(d2x((v-1)*16),3,'0')\n    store = storage(hsl,16)\n    hstore = c2x(store)\n    hex = substr(hstore,1,8) || c1 || substr(hstore,9,8),\n          substr(hstore,17,8)         substr(hstore,25,8)\n    store = translate(store,'000000000000'x,'515253545556'x)\n    line = c5 || hsl || c3 '+' hof || c1 hex || c2 store c1\n    stordata = stordata || substr(line,1,80)\n    addr = addr + 16\n  end\nstordata = overlay(c6,stordata,1)\nstordata = overlay(c4,stordata,18)\nbits = '00000000'\nif substr(stordata,19,2) = '' then\n  ch = '00'x\nelse\n  ch = x2c(substr(stordata,19,2))\nif bitand(ch,'80'x) = '80'x then bits = overlay('1',bits,1)\nif bitand(ch,'40'x) = '40'x then bits = overlay('1',bits,2)\nif bitand(ch,'20'x) = '20'x then bits = overlay('1',bits,3)\nif bitand(ch,'10'x) = '10'x then bits = overlay('1',bits,4)\nif bitand(ch,'08'x) = '08'x then bits = overlay('1',bits,5)\nif bitand(ch,'04'x) = '04'x then bits = overlay('1',bits,6)\nif bitand(ch,'02'x) = '02'x then bits = overlay('1',bits,7)\nif bitand(ch,'01'x) = '01'x then bits = overlay('1',bits,8)\naddress ISPEXEC \"DISPLAY PANEL(TPC5P002)\"\nprc = rc\nif zcmd \u00ac= '<' then\n  push sl\nif zcmd = ' ' then\n  do\n    address ISPEXEC \"VGET (ZVERB ZSCROLLN)\"\n    select\n      when (zverb = 'UP') then\n        sl = sl - zscrolln * 16\n      when (zverb = 'DOWN') then\n        sl = sl + zscrolln * 16\n      otherwise nop\n    end\n  end\nelse\n  do\n    cmd = substr(zcmd,1,1)\n    opr = strip(substr(zcmd,2))\n    select\n      when (cmd = '/') then\n        sl = x2d(substr(stordata,19,8))\n      when (cmd = '@') then\n        sl = x2d(opr)\n      when (cmd = '&') then\n        interpret opr '= sl'\n      when (cmd = '#') then\n        sl = opr\n      when (cmd = '+') then\n        sl = sl + x2d(opr)\n      when (cmd = '-') then\n        sl = sl - x2d(opr)\n      when (cmd = ')') then\n        sl = sl + opr\n      when (cmd = '(') then\n        sl = sl - opr\n      when (cmd = '<') then\n        if queued() > 0 then\n          pull sl\n        else\n          sl = 0\n      when (cmd = '*') then\n        select\n          when (opr = 'CVT') then\n            sl = c2d(storage('0010',4))\n          when (opr = 'ASCB') then\n            sl = c2d(storage('0224',4))\n          when (opr = 'ASXB') then\n            do\n              sl = c2d(storage('0224',4))\n              sl = addc(sl,'6c')\n            end\n          when (opr = 'ACEE') then\n            do\n              sl = c2d(storage('0224',4))\n              sl = addc(sl,'6c')\n              sl = addc(sl,'c8')\n            end\n          when (opr = 'TCB') then\n            sl = c2d(storage('021c',4))\n          when (opr = 'TIOT') then\n            do\n              sl = c2d(storage('021c',4))\n              sl = addc(sl,'0c')\n            end\n          otherwise\n            interpret 'sl = ' opr\n        end\n      otherwise\n        address ISPEXEC \"SETMSG MSG(ISPZ001)\"\n    end\n    zcmd = ' '\n  end\nend\n\"delstack\"\nreturn\n\naddc:arg ad1,ad2\nreturn c2d(storage(d2x(ad1+x2d(ad2)),4))\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A0550PP1": {"ttr": 7949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x01\\x00\\x90\"\\x7f\\x00\\x90(O\\x11\\x06\\x00\\x1a\\x00\\x1d\\x00\\x00\\xd9\\xc4\\xe3\\xc6\\xe3\\xc3@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1990-08-15T00:00:00", "modifydate": "1990-10-11T11:06:01", "lines": 26, "newlines": 29, "modlines": 0, "user": "RDTFTC"}, "text": ")attr default(%+_)\n  % type(text)  intens(high)\n  + type(text)  intens(low)  skip(on)\n  _ type(input) intens(high) caps(on) just(left)\n  $ type(text)  intens(high) color(turq) hilite(uscore)\n  # type(output) intens(low) color(green)\n)body expand(@@)\n%-@-@- System Information -@-@-\n%COMMAND ===>_ZCMD                               @ @ %SCROLL ===>_AMT +\n%                                                +Today is &TODAY  &ZJDATE\n+ $Last IPL'ed+at%&TPC5V302+on &IPLDAY  %&IPLDTE2   +=+&TPC5V301\n+    IPL (or SYSRES) Volume:%&TPC5V303     +SYSRES Unit addr:%&TPC5V304\n+             SMF System id:%&TPC5V101\n+             CPU Model    :%&TPC5V102            +MVS FMID :%&TPC5V202\n+             CPU Serial no:%&TPC5V103            +MVS level:%&TPC5V201\n+\n%  Linklist Libraries+(&TPC5NLL) +   %APF Libraries+(&TPC5NAPF)     +   Volume\n+ --------------------------------   ------------------------------------------\n)model\n+#Z                               + #Z                               + #Z     +\n)init\n   .ZVARS = '(TPC5LL,TPC5APF,TPC5VOL)'\n    &ZTDMARK = ' --------------------------------   +\n                  ------------------------------------------'\n)proc\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A06#INDX": {"ttr": 7951, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x01\\x00\\x912/\\x00\\x93&\\x9f\"A\\x00\\x11\\x00$\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1991-11-18T00:00:00", "modifydate": "1993-09-26T22:41:01", "lines": 17, "newlines": 36, "modlines": 0, "user": "DPSPPP"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A06XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    BERNIE ROYLE\n                     WOOLWORTHS                                         Y\n                     ROCHDALE 47301\n ____________________________________________________________________\n\n\n  A06DOCMS MEMBER EXPLAINING HOW TO RUN WHO DELETED DATASET REPORT\n           PROGRAM.\n\n  A06CLOCK GENERAL PURPOSE DATE AND TIME PROGRAM USED IN\n           DELETE REPROT PROGRAM.\n\n  A06DELRP DELETED DATASET REPORT PROGRAM.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A06CLOCK": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00\\x01\\x00\\x862O\\x00\\x88\\x01O\\x14I\\x05\\x9f\\x05m\\x05\\x9f\\xe3\\xe2\\xc4\\xc1\\xf1@@@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "1986-11-20T00:00:00", "modifydate": "1988-01-14T14:49:01", "lines": 1439, "newlines": 1389, "modlines": 1439, "user": "TSDA1"}, "text": "         TITLE 'FWWCLOCK-GENERAL PURPOSE DATE/TIME CONVERSION ROUTINE'\n***********************************************************************\n*        PARAMETERS:                                                  *\n*          1) INPUT CONTROL BYTES                                     *\n*                BYTE 0-1: INPUT DATE FORMAT CODE IN BINARY:-         *\n*                           00- CURRENT DATE (J=0)                    *\n*                           01- DDMMYY CHARACTERS (J=6)               *\n*                           02- DD/MM/YY CHARACTERS (J=8)             *\n*                           03- DDMMYY BINARY (J=4)                   *\n*                           04- DDMMYY PACKED (J=4)                   *\n*                           05- JJJYY CHARACTERS (J=5)                *\n*                           06- JJJYY BINARY (J=4)                    *\n*                           07- JJJYY PACKED (J=4)                    *\n*                           11- YYMMDD CHARACTERS (J=6)               *\n*                           12- YY/MM/DD CHARACTERS (J=8)             *\n*                           13- YYMMDD BINARY (J=4)                   *\n*                           14- YYMMDD PACKED (J=4)                   *\n*                           15- YYJJJ CHARACTERS (J=5)                *\n*                           16- YYJJJ BINARY (J=4)                    *\n*                           17- YYJJJ PACKED (J=4)                    *\n*                           20- DDNNNYY CHARACTERS (J=7) EG 28NOV84   *\n*                           21- BINARY DAYS SINCE 01/01/00 (J=4)      *\n*                           25- NNWWYY CHARACTERS (J=6)               *\n*                           26- NNWWYY BINARY (J=4)                   *\n*                           27- NNWWYY PACKED (J=4)                   *\n*                           30- YYWWNN CHARACTERS (J=6)               *\n*                           31- YYWWNN BINARY (J=4)                   *\n*                           32- YYWWNN PACKED (J=4)                   *\n*                BYTE 2-3: INPUT TIME FORMAT CODE IN BINARY:-         *\n*                           50- CURRENT TIME                          *\n*                           51- HHMMSS   CHARACTERS (L=6)             *\n*                           52- HH:MM:SS CHARACTERS (L=8)             *\n*                           53- HHMMSS BINARY (L=4)                   *\n*                           54- HHMMSS PACKED (L=4)                   *\n*                           61- HHMMSST  CHARACTERS (L=7)             *\n*                           62- HH:MM:SS:T  CHARACTERS (L=10)         *\n*                           63- HHMMSST  BINARY (L=4)                 *\n*                           64- HHMMSST PACKED (L=4)                  *\n*                           70- SECONDS SINCE MIDNIGHT IN BINARY (L=4)*\n*                           71- 100 SECS SINCE MDNIGHT IN BINARY (L=4)*\n*          2) INPUT DATE (J BYTES)                                    *\n*          3) INPUT TIME (L BYTES)                                    *\n*          4) OUTPUT CONTROL BYTE:-                                   *\n*                BYTE 0-1: OUTPUT FORMAT IN BINARY:-                  *\n*                           01- DDMMYY CHARACTERS (K=6)               *\n*                           02- DD/MM/YY CHARACTERS (K=8)             *\n*                           03- DDMMYY BINARY (K=4)                   *\n*                           04- DDMMYY PACKED (K=4)                   *\n*                           05- JJJYY CHARACTERS (K=5)                *\n*                           06- JJYYY BINARY (K=4)                    *\n*                           07- JJYYY PACKED (K=4)                    *\n*                           11- YYMMDD CHARACTERS (K=6)               *\n*                           12- YY/MM/DD CHARACTERS (K=8)             *\n*                           13- YYMMDD BINARY (K=4)                   *\n*                           14- YYMMDD PACKED (K=4)\n*                           15- YYJJJ CHARACTERS (K=5)                *\n*                           16- YYJJJ BINARY (K=4)                    *\n*                           17- YYJJJ PACKED (K=4)                    *\n*                           20- DDNNNYY CHARACTERS (K=7) EG 28NOV84   *\n*                           21- BINARY DAYS SINCE 01/01/00 (K=4)      *\n*                           22- HALFWORD LENGTH+DAY NAME (K=11)       *\n*                           25- NNWWYY CHARACTERS (K=6)               *\n*                           26- NNWWYY BINARY (K=4)                   *\n*                           27- NNWWYY PACKED (K=4)                   *\n*                           30- YYWWNN CHARACTERS (K=6)               *\n*                           31- YYWWNN BINARY (K=4)                   *\n*                           32- YYWWNN PACKED (K=4)                   *\n*                           35- DATE NUMBER IN BINARY (K=4)           *\n*                           36- DATE NUMBER IN CHAR.  (K=2)           *\n*                           37- HALFWORD LENGTH+ORDINAL DATE NUMBER   *\n*                                 E.G. 31ST  (K=6)                    *\n*                           40- MONTH NUMBER IN BINARY (K=4)          *\n*                           41- MONTH NUMBER IN CHARS  (K=2)          *\n*                           42- HALFWORD LENGTH+MONTH NAME (K=11)     *\n*                           45- YEAR NUMBER IN BINARY (K=4)           *\n*                           46- YEAR NUMBER IN CHARS (K=2)            *\n*                           51- HHMMSS   CHARACTERS (L=6)             *\n*                           52- HH:MM:SS CHARACTERS (L=8)             *\n*                           53- HHMMSS BINARY (L=4)                   *\n*                           54- HHMMSS PACKED (L=4)                   *\n*                           61- HHMMSST  CHARACTERS (L=7)             *\n*                           62- HH:MM:SS:T  CHARACTERS (L=10)         *\n*                           63- HHMMSST  BINARY (L=4)                 *\n*                           64- HHMMSST PACKED (L=4)                  *\n*                           70- SECONDS SINCE MIDNIGHT IN BINARY (L=4)*\n*                           71- 100 SECS SINCE MDNIGHT IN BINARY (L=4)*\n*                           72- 'AM' OR 'PM' (L=2)                    *\n*                           81-84 AS 51-54, BUT 12 HOUR CLOCK         *\n*                           91-94 AS 61-64, BUT 12 HOUR CLOCK         *\n*          5) OUTPUT VALUE (K BYTES)                                  *\n*  PARAMETERS 4 AND 5 MAY BE REPEATED ANY NUMBER OF TIMES TO OBTAIN   *\n*  MULTIPLE CONVERSIONS FROM SAME INPUT DATE/TIME                     *\n*                                                                     *\n*  RETURN CODES:-                                                     *\n*     0 - SUCCESSFUL                                                  *\n*     4 - INPUT DATE VALUE INVALID                                    *\n*     8 - INPUT TIME VALUE INVALID                                    *\n*    12 - INPUT DATE FORMAT CODE INVALID                              *\n*    16 - INPUT TIME FORMAT CODE INVALID                              *\n*    20+N - OUTPUT FORMAT CODE INVALID FOR PARAMETER (N/2)+3          *\n***********************************************************************\n*\n*   REGISTER USAGE:-\n*     R0 -\n*     R1 - LINK REG/ STANDARD O/S\n*     R2-R7 - WORK REGS\n*     R8 - OUTPUT FORMAT ERROR RETURN CODE\n*     R9 - POINTER TO CURRENT PARAMETER VALUE\n*     R10- POINTER TO PARAMETER LIST\n*     R11- 2ND PROGRAM BASE REG.\n*     R12- PROGRAM BASE REG.\n*     R13- SAVE AREA AND WORKING STORAGE BASE REG.\n*     R14- STANDARD O/S\n*     R15- STANDARD O/S\n         EJECT\n***********************************************************************\n*        WORKING STORAGE                                              *\n***********************************************************************\nWKDSECT  DSECT\nWKSAVE   DS    20F                     OS REG SAVE AREA\n*\n*\nWKFLAG1  DS    CL1                     FLAG BYTE:-\nWKFCURR  EQU   X'80'                     CURRENT DATE/TIME OBTAINED\nWKFJUL   EQU   X'40'                     JULIAN DATE AVAILABLE\nWKFCDATE EQU   X'20'                     CHARACTER DATE AVAILABLE\n*\n*              FOLLOWING FIELDS VALID IF WKFJUL SET\nWKPJUL   DS    PL4                     PACKED JUL. DATE YYDDD\nWKCJUL   DS    CL5                     CHARACTER JULIAN DATE YYDDD\n*\n*              FOLLOWING FIELD VALID IF WKFCDATE SET\nWKCDAT   DS    CL6                     CHARACTER DATE DDMMYY\n*\n*\nWKWDAT   DS    CL6                     WEEK DATE NNWWYY\nWKCTIME  DS    CL8                     CHARACTER TIME HHMMSSTT\nWKPTIME  DS    PL4                     PACKED TIME HHMMSST\n*\n*              FOLLOWING FIELDS VALID IF WKFCURR SET\nWKNPTIME DS    PL4                     CURRENT PACKED TIME\nWKNPJUL  DS    PL4                     CURRENT PACKED JUL. DATE\n*\n*              WORK FIELDS\nWKPKD    DS    D                       WORK PACKED VALUE\nWKCHAR   DS    CL8                     WORK CHARACTER VALUE\nWKFLDX   DS    XL4\nWKFLDX1  DS    CL8\nWKLNTH   EQU   *-WKDSECT\n         EJECT\nFWWCLOCK CSECT\n         BEGINS RGS=(12,11)\n*        LA    R11,@START+X'FFE'\n*        USING @START+X'FFE',R11\n         LR    R10,R1                  R10 POINTS TO PARAMETER LIST\n         LA    R0,WKLNTH\n         GETMAIN R,LV=(0)\n         ST    R13,R13SAVE\n         ST    R1,R1SAVE\n         B     XXXX\nR13SAVE  DS    F\nR1SAVE   DS    F\nXXXX     LR    R13,R1\n         USING WKDSECT,R13\n         MVI   WKFLAG1,0               RESET FLAGS\n***********************************************************************\n*        INPUT DATE RETRIEVAL                                         *\n***********************************************************************\nIDGET    L     R2,0(R10)\n         LH    R2,0(R2)                R2=INPUT DATE FORMAT CODE\n         L     R9,4(R10)               R9 POINTS TO INPUT DATE PARM\n         CH    R2,=H'32'\n         BH    FINISH12                IF INVALID FORMAT, EXIT R/C 12\n         SLL   R2,2\n         B     IDFTABLE(R2)            BRN ON DATE FORMAT\nIDFTABLE B     IDCURR                     0=CURRENT DATE\n         B     IDDMYC                     1=DDMMYY CHAR\n         B     IDDMYF                     2=DD/MM/YY CHAR\n         B     IDDMYB                     3=DDMMYY BIN\n         B     IDDMYP                     4=DDMMYY PKD\n         B     IDJULCR                    5=JJJYY CHARS\n         B     IDJULBR                    6=JJJYY BIN\n         B     IDJULPR                    7=JJJYY PKD\n         B     FINISH12                   8=INVALID\n         B     FINISH12                   9=INVALID\n         B     FINISH12                  10=INVALID\n         B     IDYMDC                    11=YYMMDD CHARS\n         B     IDYMDF                    12=YY/MM/DD CHARS\n         B     IDYMDB                    13=YYMMDD BINARY\n         B     IDYMDP                    14=YYMMDD PACKED\n         B     IDJULC                    15=YYJJJ CHARS\n         B     IDJULB                    16=YYJJJ BINARY\n         B     IDJULP                    17=YYJJJ PACKED\n         B     FINISH12                  18=INVALID\n         B     FINISH12                  19=INVALID\n         B     IDSPCL1                   20=DDNNNYY CHARACTERS\n         B     IDSPCL2                   21=BINARY DAYS\n         B     FINISH12                  22=INVALID\n         B     FINISH12                  23=INVALID\n         B     FINISH12                  24=INVALID\n         B     IDNWYC                    25=NNWWYY CHARACTERS\n         B     IDNWYB                    26=NNWWYY BINARY\n         B     IDNWYP                    27=NNWWYY PACKED\n         B     FINISH12                  28=INVALID\n         B     FINISH12                  29=INVALID\n         B     IDYWNP                    30=YYWWNN CHARACTERS\n         B     IDYWNB                    31=YYWWNN BINARY\n         B     IDYWNP                    32=YYWWNN PACKED\n*              CURRENT DATE\nIDCURR   BAL   R1,GETCURR\n         MVC   WKPJUL,WKNPJUL          COPY CURRENT DATE IN PACKED FORM\n         UNPK  WKCJUL,WKPJUL           CREATE CHARACTER FORMAT OF JUL.\n         OI    WKCJUL+4,X'F0'\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              DDMMYY CHARACTER FORMAT\nIDDMYC   MVC   WKCDAT,0(R9)            STORE CHARACTER DATE\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              DD/MM/YY CHARACTER FORMAT\nIDDMYF   MVC   WKCDAT(2),0(R9)         STORE CHARACTER DATE\n         MVC   WKCDAT+2(2),3(R9)\n         MVC   WKCDAT+4(2),6(R9)\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              DDMMYY BINARY FORMAT\nIDDMYB   L     R2,0(R9)                CONVERT TO CHARACTER DATE\n         C     R2,=F'999999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKCDAT,WKPKD\n         OI    WKCDAT+5,X'F0'\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              DDMMYY PACKED FORMAT\nIDDMYP   ZAP   WKPKD,0(4,R9)           CONVERT TO CHARACTER DATE\n         CP    WKPKD,=P'999999'\n         BH    FINISH4\n         UNPK  WKCDAT,WKPKD\n         OI    WKCDAT+5,X'F0'\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              JJJYY CHARACTER FORMAT\nIDJULCR  MVC   WKCJUL(2),3(R9)         REVERSE JJJ AND YY\n         MVC   WKCJUL+2(3),0(R9)\n         BAL   R1,VALCJUL              VALIDATE JULIAN DATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              JJJYY BINARY FORMAT\nIDJULBR  L     R2,0(R9)                CONVERT JUL DATE TO CHARS\n         C     R2,=F'99999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKCHAR(5),WKPKD\n         OI    WKCHAR+4,X'F0'\n         MVC   WKCJUL(2),WKCHAR+3      REVERSE JJJ AND YY\n         MVC   WKCJUL+2(3),WKCHAR\n         BAL   R1,VALCJUL              VALIDATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              JJJYY PACKED FORMAT\nIDJULPR  ZAP   WKPKD,0(4,R9)\n         CP    WKPKD,=P'99999'\n         BH    FINISH4\n         UNPK  WKCHAR(5),WKPKD         CONVERT TO CHARACTERS\n         OI    WKCHAR+4,X'F0'\n         MVC   WKCJUL(2),WKCHAR+3      REVERSE JJJ AND YY\n         MVC   WKCJUL+2(3),WKCHAR\n         BAL   R1,VALCJUL              VALIDATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYMMDD CHARACTER FORMAT\nIDYMDC   MVC   WKCDAT(2),4(R9)         REVERSE CHAR DATE AND STORE\n         MVC   WKCDAT+2(2),2(R9)\n         MVC   WKCDAT+4(2),0(R9)\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              YY/MM/DD CHARACTER FORMAT\nIDYMDF   MVC   WKCDAT(2),6(R9)         REVERSE CHAR DATE AND STORE\n         MVC   WKCDAT+2(2),3(R9)\n         MVC   WKCDAT+4(2),0(R9)\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              YYMMDD BINARY FORMAT\nIDYMDB   L     R2,0(R9)                CONVERT TO CHARACTER DATE\n         C     R2,=F'999999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKCHAR(6),WKPKD\n         OI    WKCHAR+5,X'F0'\n         MVC   WKCDAT(2),WKCHAR+4      REVERSE DIGITS\n         MVC   WKCDAT+2(2),WKCHAR+2\n         MVC   WKCDAT+4(2),WKCHAR\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              YYMMDD PACKED FORMAT\nIDYMDP   ZAP   WKPKD,0(4,R9)           CONVERT TO CHARACTER DATE\n         CP    WKPKD,=P'999999'\n         BH    FINISH4\n         UNPK  WKCHAR(6),WKPKD\n         OI    WKCHAR+5,X'F0'\n         MVC   WKCDAT(2),WKCHAR+4      REVERSE DIGITS\n         MVC   WKCDAT+2(2),WKCHAR+2\n         MVC   WKCDAT+4(2),WKCHAR\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND                   BRN\n*              YYJJJ CHARACTER FORMAT\nIDJULC   MVC   WKCJUL,0(R9)            STORE JULIAN DATE\n         BAL   R1,VALCJUL              VALIDATE JULIAN DATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYJJJ BINARY FORMAT\nIDJULB   L     R2,0(R9)                CONVERT JUL DATE TO CHARS\n         C     R2,=F'99999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKCJUL(5),WKPKD\n         OI    WKCJUL+4,X'F0'\n         BAL   R1,VALCJUL              VALIDATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYJJJ PACKED FORMAT\nIDJULP   ZAP   WKPKD,0(4,R9)\n         CP    WKPKD,=P'99999'\n         BH    FINISH4\n         UNPK  WKCJUL(5),WKPKD         CONVERT TO CHARACTERS\n         OI    WKCJUL+4,X'F0'\n         BAL   R1,VALCJUL              VALIDATE\n         PACK  WKPJUL,WKCJUL           CREATE PACKED FORM\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              DDNNNYY FORMAT\nIDSPCL1  MVC   WKCDAT(2),0(R9)         STORE DAY NO.\n         MVC   WKCDAT+4(2),5(R9)       STORE YEAR NO.\n         LA    R2,1                    SET MONTH 1\n         LA    R3,TABLE2+13            POINT TO 1ST MONTH'S NAME\nIDSPCL1A CLC   0(3,R3),2(R9)\n         BE    IDSPCL1B                BRN IF MONTH IDENTIFIED\n         LA    R2,1(R2)                INCREMENT MONTH\n         LA    R3,11(R3)               ADVANCE TABLE POINTER\n         CH    R2,=H'12'\n         BNH   IDSPCL1A                BRN IF MORE MONTHS LEFT\n         B     FINISH4                 BRN IF INVALID MONTH CHARS\nIDSPCL1B CVD   R2,WKPKD                STORE MONTH NUMBER\n         UNPK  WKCDAT+2(2),WKPKD\n         OI    WKCDAT+3,X'F0'\n         BAL   R1,VALCDAT              VALIDATE CHARACTER DATE\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         B     IDEND\n*              BINARY DAYS (COUNTING 1/1/1900 AS DAY 1)\nIDSPCL2  L     R3,0(R9)                R3=BINARY DAYS\n         SH    R3,=H'366'              R3=BIN-365 (DISCOUNT 1900)\n*                                         -1 BECAUSE 1/1/00 IS DAY 1\n         BNM   IDSPCL2X                IF IN YEAR 1900\n         SR    R5,R5                       SET YEAR 0\n         L     R6,0(R9)                    R6=JULIAN DAY NO.\n         B     IDSPCL2C                    BRN\nIDSPCL2X LR    R5,R3                   COPY TO R5\n         SR    R2,R2\n         D     R2,=F'36524'            DIVIDE BY DAYS IN A CENTURY\n         AR    R5,R3                   ADD NO. CENTURIES TO R5\n         SR    R4,R4\n         D     R4,=F'1461'             DIVIDE BY DAYS IN 4 YEARS\n         CH    R4,=H'1460'\n         BNE   IDSPCL2A                IF LAST DAY OF 4YR GROUP\n         LA    R6,365                      SET DAY NO. 366\n         LA    R7,3                        SET YEAR IN GROUP=3\n         B     IDSPCL2B\nIDSPCL2A LR    R7,R4\n         SR    R6,R6\n         D     R6,=F'365'              R7=YEAR IN GROUP;R6=DAY IN YEAR\nIDSPCL2B SLL   R5,2                    R5=1ST YEAR OF 4 YEAR GROUP\n         AR    R5,R7                     +YEAR NO. WITHIN GROUP\n         LA    R5,1(R5)                  +1 (FOR 1900)\n         LA    R6,1(R6)                MAKE DAY NUMBER RELATIVE TO 1\nIDSPCL2C CVD   R5,WKPKD                STORE JULIAN YEAR\n         UNPK  WKCJUL(2),WKPKD\n         OI    WKCJUL+1,X'F0'\n         CVD   R6,WKPKD                STORE JULIAN DAY NO.\n         UNPK  WKCJUL+2(3),WKPKD\n         OI    WKCJUL+4,X'F0'\n         PACK  WKPJUL,WKCJUL\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND\n*              NNWWYY CHARACETRS\nIDNWYC   MVC   WKWDAT,0(R9)            STORE WEEK DATE\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              NNWWYY BINARY\nIDNWYB   L     R2,0(R9)                CONVERT WK DATE TO CHARS\n         C     R2,=F'999999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKWDAT(6),WKPKD\n         OI    WKWDAT+5,X'F0'\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              NNWWYY PACKED\nIDNWYP   UNPK  WKWDAT(6),0(4,R9)       CONVERT TO CHARS\n         OI    WKWDAT+5,X'F0'\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYWWNN CHARACETRS\nIDYWNC   MVC   WKWDAT(2),4(R9)         REVERSE WEEK DATE AND STORE\n         MVC   WKWDAT+2(2),2(R9)\n         MVC   WKWDAT+4(2),0(R9)\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYWWNN BINARY\nIDYWNB   L     R2,0(R9)                CONVERT WK DATE TO CHARS\n         C     R2,=F'999999'\n         BH    FINISH4\n         CVD   R2,WKPKD\n         UNPK  WKCHAR(6),WKPKD\n         OI    WKCHAR+5,X'F0'\n         MVC   WKWDAT(2),WKCHAR+4      REVERSE DIGITS\n         MVC   WKWDAT+2(2),WKCHAR+2\n         MVC   WKWDAT+4(2),WKCHAR\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\n*              YYWWNN PACKED\nIDYWNP   UNPK  WKCHAR(6),0(4,R9)       CONVERT TO CHARS\n         OI    WKCHAR+5,X'F0'\n         MVC   WKWDAT(2),WKCHAR+4      REVERSE DIGITS\n         MVC   WKWDAT+2(2),WKCHAR+2\n         MVC   WKWDAT+4(2),WKCHAR\n         BAL   R1,VALWDAT              VALIDATE WEEK DATE\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATE AVAILABLE\n         B     IDEND                   BRN\nIDEND    DS    0H\n***********************************************************************\n*        INPUT TIME RETRIEVAL                                         *\n***********************************************************************\nITGET    L     R2,0(R10)\n         LH    R2,2(R2)                R2=INPUT TIME FORMAT CODE\n         L     R9,8(R10)               R9 POINTS TO INPUT DATE PARM\n         CH    R2,=H'50'\n         BL    FINISH16                IF INVALID FORMAT, EXIT R/C 12\n         CH    R2,=H'71'\n         BH    FINISH16\n         SH    R2,=H'50'\n         SLL   R2,2\n         B     ITFTABLE(R2)            BRN ON TIME FORMAT\nITFTABLE B     ITCURR                      50 - CURRENT TIME\n         B     ITHMSC                      51 - HHMMSS CHARS\n         B     ITHMSF                      52 - HH:MM:SS CHARS\n         B     ITHMSB                      53 - HHMMSS BINARY\n         B     ITHMSP                      54 - HHMMSS PACKED\n         B     FINISH16                    55 - INVALID\n         B     FINISH16                    56 - INVALID\n         B     FINISH16                    57 - INVALID\n         B     FINISH16                    58 - INVALID\n         B     FINISH16                    59 - INVALID\n         B     FINISH16                    60 - INVALID\n         B     ITHMSTC                     61 - HHMMSST CHARS\n         B     ITHMSTF                     62 - HH:MM:SS:T CHARS\n         B     ITHMSTB                     63 - HHMMSST BINARY\n         B     ITHMSTP                     64 - HHMMSST PACKED\n         B     FINISH16                    65 - INVALID\n         B     FINISH16                    66 - INVALID\n         B     FINISH16                    67 - INVALID\n         B     FINISH16                    68 - INVALID\n         B     FINISH16                    69 - INVALID\n         B     ITSPCL1                     70 - SECS SINCE MIDNIGHT\n         B     ITSPCL2                     71 - 100 SECS SINCE MIDNIGHT\n*              CURRENT TIME\nITCURR   BAL   R1,GETCURR\n         MVC   WKPTIME,WKNPTIME        STORE PACKED TIME\n         UNPK  WKCTIME(7),WKPTIME      SET CHARACTER TIME\n         OI    WKCTIME+6,X'F0'\n         MVI   WKCTIME+7,C'0'\n         B     ITEND                   BRN\n*              HHMMSS CHAR\nITHMSC   MVC   WKCTIME(6),0(R9)        STORE CHAR TIME\n         MVC   WKCTIME+6(2),=C'00'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HH:MM:SS CHAR\nITHMSF   MVC   WKCTIME(2),0(R9)        STORE CHAR TIME\n         MVC   WKCTIME+2(2),3(R9)\n         MVC   WKCTIME+4(2),6(R9)\n         MVC   WKCTIME+6(2),=C'00'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HHMMSS PACKED\nITHMSP   CP    0(4,R9),=P'999999'\n         BH    FINISH8\n         UNPK  WKCTIME(6),0(4,R9)      STORE CHAR TIME\n         OI    WKCTIME+5,X'F0'\n         MVC   WKCTIME+6(2),=C'00'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HHMMSS BINARY\nITHMSB   L     R2,0(R9)\n         C     R2,=F'9999999'\n         BH    FINISH8\n         ST    R2,WKFLDX\n         SR    R2,R2\n         IC    R2,WKFLDX+1\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME(2),WKFLDX1+6\n         SR    R2,R2\n         IC    R2,WKFLDX+2\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME+2(2),WKFLDX1+6\n         SR    R2,R2\n         IC    R2,WKFLDX+3\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME+4(2),WKFLDX1+6\n         MVC   WKCTIME+6(2),=C'00'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HHMMSST CHAR\nITHMSTC  MVC   WKCTIME(7),0(R9)        STORE CHAR TIME\n         MVI   WKCTIME+7,C'0'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HH:MM:SS:T CHAR\nITHMSTF  MVC   WKCTIME(2),0(R9)        STORE CHAR TIME\n         MVC   WKCTIME+2(2),3(R9)\n         MVC   WKCTIME+4(2),5(R9)\n         MVC   WKCTIME+6(1),8(R9)\n         MVI   WKCTIME+7,C'0'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HHMMSST PACKED\nITHMSTP  UNPK  WKCTIME(7),0(4,R9)      STORE CHAR TIME\n         OI    WKCTIME+6,X'F0'\n         MVI   WKCTIME+7,C'0'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              HHMMSST BINARY\nITHMSTB  L     R2,0(R9)\n         C     R2,=F'9999999'\n         BH    FINISH8\n         ST    R2,WKFLDX\n         SR    R2,R2\n         IC    R2,WKFLDX\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME(2),WKFLDX1+6\n         SR    R2,R2\n         IC    R2,WKFLDX+1\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME+2(2),WKFLDX1+6\n         SR    R2,R2\n         IC    R2,WKFLDX+2\n         CVD   R2,WKPKD\n         UNPK  WKFLDX1,WKPKD        STORE CHAR TIME\n         OI    WKFLDX1+7,X'F0'\n         MVC   WKCTIME+4(2),WKFLDX1+6\n         MVC   WKCTIME+6(2),=C'00'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\n*              SECS SINCE MIDNIGHT\nITSPCL1  L     R3,0(R9)                R3=SECS SINCE MIDNIGHT\n         MH    R3,=H'100'              CONVERT TO 100 SECS\n         B     ITSPCL2A                BRN\n*              100 SECS SINCE MIDNIGHT\nITSPCL2  L     R3,0(R9)                R3=100 SECS SINCE MIDNIGHT\nITSPCL2A SR    R2,R2\n         D     R2,=F'100'              R2=1/100 SECS\n         CVD   R2,WKPKD\n         UNPK  WKCTIME+6(2),WKPKD      STORE\n         OI    WKCTIME+7,X'F0'\n         SR    R2,R2\n         D     R2,=F'60'               R2=SECONDS\n         CVD   R2,WKPKD\n         UNPK  WKCTIME+4(2),WKPKD      STORE\n         OI    WKCTIME+5,X'F0'\n         SR    R2,R2\n         D     R2,=F'60'               R2=MINUTES,R3=HOURS\n         CVD   R2,WKPKD\n         UNPK  WKCTIME+2(2),WKPKD      STORE MINS\n         OI    WKCTIME+3,X'F0'\n         CVD   R3,WKPKD\n         UNPK  WKCTIME(2),WKPKD        STORE HOURS\n         OI    WKCTIME+1,X'F0'\n         BAL   R1,VALCTIM              VALIDATE TIME\n         PACK  WKPTIME,WKCTIME(7)      SET PACKED TIME\n         B     ITEND                   BRN\nITEND    DS    0H\n         EJECT\n***********************************************************************\n*        CREATE OUTPUT PARAMETERS                                     *\n***********************************************************************\n         LA    R10,12(R10)             POINT R10 TO 1ST OUT PARM PTR\n         LA    R8,20                   R8=ERROR RETURN CODE\n*              START OF NEXT OUTPUT PARAMETER PAIR\nOUTPARM  L     R2,0(R10)\n         LH    R2,0(R2)                R2=OUTPUT FORMAT CODE\n         L     R9,4(R10)               R9 POINTS TO OUTPUT VALUE AREA\n         CH    R2,=H'99'\n         BH    FINISHOU                IF INVALID FORMAT, EXIT\n         SLL   R2,2\n         B     OUTABLE(R2)             BRN ON OUTPUT FORMAT\nOUTABLE  B     FINISHOU                   0=INVALID\n         B     ODDMYC                     1=DDMMYY CHAR\n         B     ODDMYF                     2=DD/MM/YY CHAR\n         B     ODDMYB                     3=DDMMYY BIN\n         B     ODDMYP                     4=DDMMYY PKD\n         B     ODJULCR                    5=JJJYY CHARS\n         B     ODJULBR                    6=JJJYY BIN\n         B     ODJULPR                    7=JJJYY PKD\n         B     FINISHOU                   8=INVALID\n         B     FINISHOU                   9=INVALID\n         B     FINISHOU                  10=INVALID\n         B     ODYMDC                    11=YYMMDD CHARS\n         B     ODYMDF                    12=YY/MM/DD CHARS\n         B     ODYMDB                    13=YYMMDD BINARY\n         B     ODYMDP                    14=YYMMDD PACKED\n         B     ODJULC                    15=YYJJJ CHARS\n         B     ODJULB                    16=YYJJJ BINARY\n         B     ODJULP                    17=YYJJJ PACKED\n         B     FINISHOU                  18=INVALID\n         B     FINISHOU                  19=INVALID\n         B     ODSPCL1                   20=DDNNNYY CHARACTERS\n         B     ODSPCL2                   21=BINARY DAYS\n         B     ODDAYN                    22=DAY NAME\n         B     FINISHOU                  23=INVALID\n         B     FINISHOU                  24=INVALID\n         B     ODNWYC                    25=NNWWYY CHARACTERS\n         B     ODNWYB                    26=NNWWYY BINARY\n         B     ODNWYP                    27=NNWWYY PACKED\n         B     FINISHOU                  28=INVALID\n         B     FINISHOU                  29=INVALID\n         B     ODYWNC                    30=YYWWNN CHARACTERS\n         B     ODYWNB                    31=YYWWNN BINARY\n         B     ODYWNP                    32=YYWWNN PACKED\n         B     FINISHOU                  33=INVALID\n         B     FINISHOU                  34=INVALID\n         B     ODDATB                    35=DATE NO. BINARY\n         B     ODDATC                    36=DATE NO. CHAR\n         B     ODDATO                    37=DATE NO. ORDINAL\n         B     FINISHOU                  38=INVALID\n         B     FINISHOU                  39=INVALID\n         B     ODMONB                    40=MONTH NUMBER BINARY\n         B     ODMONC                    41=MONTH NUMBER CHARS\n         B     ODMONN                    42=MONTH NAME\n         B     FINISHOU                  43=INVALID\n         B     FINISHOU                  44=INVALID\n         B     ODYERB                    45=YEAR NUMBER BINARY\n         B     ODYERC                    46=YEAR NUMBER CHARS\n         B     FINISHOU                  47=INVALID\n         B     FINISHOU                  48=INVALID\n         B     FINISHOU                  49=INVALID\n         B     FINISHOU                  50=INVALID\n         B     OTHMSC                    51=HHMMSS CHARS\n         B     OTHMSF                    52=HH:MM:SS CHARS\n         B     OTHMSB                    53=HHMMSS BINARY\n         B     OTHMSP                    54=HHMMSS PACKED\n         B     FINISHOU                  55=INVALID\n         B     FINISHOU                  56=INVALID\n         B     FINISHOU                  57=INVALID\n         B     FINISHOU                  58=INVALID\n         B     FINISHOU                  59=INVALID\n         B     FINISHOU                  60=INVALID\n         B     OTHMSTC                   61=HHMMSST CHARS\n         B     OTHMSTF                   62=HH:MM:SS:T CHARS\n         B     OTHMSTB                   63=HHMMSST BINARY\n         B     OTHMSTP                   64=HHMMSST PACKED\n         B     FINISHOU                  65=INVALID\n         B     FINISHOU                  66=INVALID\n         B     FINISHOU                  67=INVALID\n         B     FINISHOU                  68=INVALID\n         B     FINISHOU                  69=INVALID\n         B     OTSPCL1                   70=SECS SINCE MIDNIGHT\n         B     OTSPCL2                   71=100 SECS SINCE MIDNIGHT\n         B     OTSPCL3                   72='AM' OR 'PM'\n         B     FINISHOU                  73=INVALID\n         B     FINISHOU                  74=INVALID\n         B     FINISHOU                  75=INVALID\n         B     FINISHOU                  76=INVALID\n         B     FINISHOU                  77=INVALID\n         B     FINISHOU                  78=INVALID\n         B     FINISHOU                  79=INVALID\n         B     FINISHOU                  80=INVALID\n         B     OTHMSCX                   81=HHMMSS CHARS     12HR CLK\n         B     OTHMSFX                   82=HH:MM:SS CHARS   12 HR CLK\n         B     OTHMSBX                   83=HHMMSS BINARY    12 HR CLK\n         B     OTHMSPX                   84=HHMMSS PACKED    12 HR CLK\n         B     FINISHOU                  85=INVALID\n         B     FINISHOU                  86=INVALID\n         B     FINISHOU                  87=INVALID\n         B     FINISHOU                  88=INVALID\n         B     FINISHOU                  89=INVALID\n         B     FINISHOU                  90=INVALID\n         B     OTHMSTCX                  91=HHMMSST CHARS    12 HR CLK\n         B     OTHMSTFX                  92=HH:MM:SS:T CHARS 12 HR CLK\n         B     OTHMSTBX                  93=HHMMSST BINARY   12 HR CLK\n         B     OTHMSTPX                  94=HHMMSST PACKED   12 HR CLK\n         B     FINISHOU                  95=INVALID\n         B     FINISHOU                  96=INVALID\n         B     FINISHOU                  97=INVALID\n         B     FINISHOU                  98=INVALID\n         B     FINISHOU                  99=INVALID\n*              DDMMYY CHAR\nODDMYC   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(6,R9),WKCDAT          STORE DATE\n         B     OUTEND                  BRN\n*              DD/MM/YY CHAR\nODDMYF   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT          STORE DATE\n         MVI   2(R9),C'/'\n         MVC   3(2,R9),WKCDAT+2\n         MVI   5(R9),C'/'\n         MVC   6(2,R9),WKCDAT+4\n         B     OUTEND                  BRN\n*              DDMMYY BINARY\nODDMYB   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  WKPKD,WKCDAT\n         CVB   R2,WKPKD\n         ST    R2,0(R9)                STORE DATE\n         B     OUTEND                  BRN\n*              DDMMYY PACKED\nODDMYP   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  0(4,R9),WKCDAT          STORE DATE\n         B     OUTEND                  BRN\n*              JJJYY CHARS\nODJULCR  BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         MVC   0(3,R9),WKCJUL+2        STORE DATE REVERSED\n         MVC   3(2,R9),WKCJUL\n         B     OUTEND                  BRN\n*              JJJYY BIN\nODJULBR  BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         MVC   WKCHAR(3),WKCJUL+2      REVERSE DATE\n         MVC   WKCHAR+3(2),WKCJUL\n         PACK  WKPKD,WKCHAR(5)\n         CVB   R2,WKPKD                STORE DATE\n         ST    R2,0(R9)\n         B     OUTEND                  BRN\n*              JJJYY PACKED\nODJULPR  BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         MVC   WKCHAR(3),WKCJUL+2      REVERSE DATE\n         MVC   WKCHAR+3(2),WKCJUL\n         PACK  0(4,R9),WKCHAR(5)       STORE DATE\n         B     OUTEND                  BRN\n*              YYMMDD CHAR\nODYMDC   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT+4        STORE DATE REVERSED\n         MVC   2(2,R9),WKCDAT+2\n         MVC   4(2,R9),WKCDAT\n         B     OUTEND                  BRN\n*              YY/MM/DD CHAR\nODYMDF   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT+4        STORE DATE REVERSED\n         MVI   2(R9),C'/'\n         MVC   3(2,R9),WKCDAT+2\n         MVI   5(R9),C'/'\n         MVC   6(2,R9),WKCDAT\n         B     OUTEND                  BRN\n*              YYMMDD BINARY\nODYMDB   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   WKCHAR(2),WKCDAT+4      REVERSE DATE\n         MVC   WKCHAR+2(2),WKCDAT+2\n         MVC   WKCHAR+4(2),WKCDAT\n         PACK  WKPKD,WKCHAR(6)         STORE DATE\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND                  BRN\n*              YYMMDD PACKED\nODYMDP   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   WKCHAR(2),WKCDAT+4      REVERSE DATE\n         MVC   WKCHAR+2(2),WKCDAT+2\n         MVC   WKCHAR+4(2),WKCDAT\n         PACK  0(4,R9),WKCHAR(6)       STORE DATE\n         B     OUTEND                  BRN\n*              YYJJJ CHARS\nODJULC   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         MVC   0(5,R9),WKCJUL          STORE DATE\n         B     OUTEND                  BRN\n*              YYJJJ BIN\nODJULB   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         CVB   R2,WKPJUL\n         ST    R2,0(R9)                STORE DATE\n         B     OUTEND                  BRN\n*              YYJJJ PACKED\nODJULP   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         MVC   0(4,R9),WKPJUL          STORE DATE\n         B     OUTEND                  BRN\n*              DDNNNYY CHARS\nODSPCL1  BAL   R1,USECDATE             OBTAIN CHAR DATE\n         MVC   0(2,R9),WKCDAT          MOVE DAY NUMBER\n         MVC   5(2,R9),WKCDAT+4        MOVE YEAR NUMBER\n         PACK  WKPKD,WKCDAT+2(2)\n         CVB   R2,WKPKD                R2=MONTH NUMBER\n         MH    R2,=H'11'\n         LA    R2,TABLE2+2(R2)\n         MVC   2(3,R9),0(R2)           MOVE MONTH NAME\n         B     OUTEND\n*              BINARY DAYS (COUNTING 1/1/1900 AS DAY 1)\nODSPCL2  BAL   R1,USEJDATE             OBTAIN JULIAN DATE\n         PACK  WKPKD,WKCJUL+2(3)\n         CVB   R2,WKPKD                R2=JULIAN DAY NO.\n         BCTR  R2,0                    MAKE RELATIVE TO ZERO\n         PACK  WKPKD,WKCJUL(2)\n         CVB   R3,WKPKD                R3=YEAR NO.\n         CH    R3,=H'50'\n         BNL   ODSPCL3                 IF YEAR <50\n         LA    R3,100(R3)                  ADD 100 FOR 21ST CENTURY\nODSPCL3  BCTR  R3,0                    R3=YEAR-1 (DISCOUNT 1900)\n         LR    R5,R3\n         SR    R4,R4\n         D     R4,=F'4'                R4=YEAR IN 4YR GRP;R5=4YR GRP #\n         LR    R7,R3\n         SR    R6,R6\n         D     R6,=F'100'              R7=CENTURY NO.\n         MH    R5,=H'1461'             MULTIPLY 4YR GRP # BY 1461\n         MH    R4,=H'365'              MULTIPLY YR IN GRP BY 365\n         AR    R4,R5                   ADD TOGETHER\n         SR    R4,R7                   SUBTRACT 1 FOR EACH CENTURY\n*                                        BECAUSE YEAR ??00 NOT LEAP YR\n         LA    R4,365(R4)              ADD BACK DAYS IN 1900\n*                                      R4=BIN DATE FOR 1ST JAN MINUS 1\n         AR    R4,R2                   R4=BINARY DATE BASED ON ZERO\n         LA    R4,1(R4)                BASE ON 1 (1/1/1900 IS DAY 1)\n         ST    R4,0(R9)                STORE\n         B     OUTEND                  BRN\n*              DAY NAME\nODDAYN   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         PACK  WKPKD,WKWDAT(2)\n         CVB   R2,WKPKD                R2=DAY NUMBER\n         MH    R2,=H'11'\n         LA    R2,TABLE4(R2)\n         MVC   0(11,R9),0(R2)          STORE DAY NAME\n         B     OUTEND\n*              NNWWYY CHARACTERS\nODNWYC   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         MVC   0(6,R9),WKWDAT          STORE DATE\n         B     OUTEND                  BRN\n*              NNWWYY BINARY\nODNWYB   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         PACK  WKPKD,WKWDAT            STORE DATE\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND                  BRN\n*              NNWWYY PACKED\nODNWYP   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         PACK  0(4,R9),WKWDAT          STORE DATE\n*              YYWWNN CHARACTERS\nODYWNC   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         MVC   0(2,R9),WKWDAT+4        STORE DATE REVERSED\n         MVC   2(2,R9),WKWDAT+2\n         MVC   4(2,R9),WKWDAT\n         B     OUTEND                  BRN\n*              YYWWNN BINARY\nODYWNB   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         MVC   WKCHAR(2),WKWDAT+4      REVERSE DATE\n         MVC   WKCHAR+2(2),WKWDAT+2\n         MVC   WKCHAR+4(2),WKWDAT\n         PACK  WKPKD,WKCHAR(6)         STORE DATE\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND                  BRN\n*              YYWWNN PACKED\nODYWNP   BAL   R1,USEJDATE             REQUEST JULIAN DATE\n         BAL   R1,USEWDATE             REQUEST WEEK DATE\n         MVC   WKCHAR(2),WKWDAT+4      REVERSE DATE\n         MVC   WKCHAR+2(2),WKWDAT+2\n         MVC   WKCHAR+4(2),WKWDAT\n         PACK  0(4,R9),WKCHAR(6)       STORE DATE\n         B     OUTEND                  BRN\n*              DATE NUMBER CHAR\nODDATC   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT\n         B     OUTEND\n*              DATE NUMBER BINARY\nODDATB   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  WKPKD,WKCDAT(2)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              DATE NUMBER ORDINAL\nODDATO   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   2(2,R9),WKCDAT\n         CLI   WKCDAT,C'1'\n         BE    ODDATOTH\n         CLI   WKCDAT+1,C'1'\n         BE    ODDATOST\n         CLI   WKCDAT+1,C'2'\n         BE    ODDATOND\n         CLI   WKCDAT+1,C'3'\n         BE    ODDATORD\nODDATOTH MVC   4(2,R9),=C'TH'\n         B     ODDATO2\nODDATOST MVC   4(2,R9),=C'ST'\n         B     ODDATO2\nODDATOND MVC   4(2,R9),=C'ND'\n         B     ODDATO2\nODDATORD MVC   4(2,R9),=C'RD'\nODDATO2  MVC   0(2,R9),=H'4'\n         CLI   2(R9),C'0'\n         BNE   OUTEND\n         MVC   0(2,R9),=H'3'\n         MVC   2(3,R9),3(R9)\n         MVI   5(R9),C' '\n         B     OUTEND\n*              MONTH NUMBER CHAR\nODMONC   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT+2\n         B     OUTEND\n*              MONTH NUMBER BINARY\nODMONB   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  WKPKD,WKCDAT+2(2)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              MONTH NAME\nODMONN   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  WKPKD,WKCDAT+2(2)\n         CVB   R2,WKPKD\n         MH    R2,=H'11'\n         LA    R2,TABLE2(R2)\n         MVC   0(11,R9),0(R2)\n         B     OUTEND\n*              YEAR NUMBER CHAR\nODYERC   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         MVC   0(2,R9),WKCDAT+4\n         B     OUTEND\n*              YEAR NUMBER BINARY\nODYERB   BAL   R1,USECDATE             REQUEST CHARACTER DATE\n         PACK  WKPKD,WKCDAT+4(2)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              HHMMSS CHARS\nOTHMSC   MVC   0(2,R9),WKCTIME\n         MVC   2(2,R9),WKCTIME+2\n         MVC   4(2,R9),WKCTIME+4\n         B     OUTEND\n*              HH:MM:SS CHARS\nOTHMSF   MVC   0(2,R9),WKCTIME\n         MVI   2(R9),C':'\n         MVC   3(2,R9),WKCTIME+2\n         MVI   5(R9),C':'\n         MVC   6(2,R9),WKCTIME+4\n         B     OUTEND\n*              HHMMSS BINARY\nOTHMSB   PACK  WKPKD,WKCTIME(6)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              HHMMSS PACKED\nOTHMSP   PACK  0(4,R9),WKCTIME(6)\n         B     OUTEND\n*              HHMMSST CHARS\nOTHMSTC  MVC   0(2,R9),WKCTIME\n         MVC   2(2,R9),WKCTIME+2\n         MVC   4(2,R9),WKCTIME+4\n         MVC   6(1,R9),WKCTIME+6\n         B     OUTEND\n*              HH:MM:SS:T CHARS\nOTHMSTF  MVC   0(2,R9),WKCTIME\n         MVI   3(R9),C':'\n         MVC   3(2,R9),WKCTIME+2\n         MVI   5(R9),C':'\n         MVC   6(2,R9),WKCTIME+4\n         MVI   8(R9),C':'\n         MVC   9(1,R9),WKCTIME+6\n         B     OUTEND\n*              HHMMSST BINARY\nOTHMSTB  PACK  WKPKD,WKCTIME(7)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              HHMMSST PACKED\nOTHMSTP  PACK  0(4,R9),WKCTIME(7)\n         B     OUTEND\n*              SECS SINCE MIDNIGHT\nOTSPCL1  PACK  WKPKD,WKCTIME(2)\n         CVB   R2,WKPKD                R2=HOURS\n         MH    R2,=H'60'                  *60\n         PACK  WKPKD,WKCTIME+2(2)\n         CVB   R3,WKPKD\n         AR    R2,R3                      +MINS\n         MH    R2,=H'60'                  *60\n         PACK  WKPKD,WKCTIME+4(2)\n         CVB   R3,WKPKD\n         AR    R2,R3                      +SECS\n         ST    R2,0(R9)\n         B     OUTEND\n*              100 SECS SINCE MIDNIGHT\nOTSPCL2  PACK  WKPKD,WKCTIME(2)\n         CVB   R2,WKPKD                R2=HOURS\n         MH    R2,=H'60'                  *60\n         PACK  WKPKD,WKCTIME+2(2)\n         CVB   R3,WKPKD\n         AR    R2,R3                      +MINS\n         MH    R2,=H'6000'                *6000\n         PACK  WKPKD,WKCTIME+4(4)\n         CVB   R3,WKPKD\n         AR    R2,R3                      +100 SECS\n         ST    R2,0(R9)\n         B     OUTEND\n*              'AM' OR 'PM'\nOTSPCL3  PACK  WKPKD,WKCTIME(2)\n         CVB   R2,WKPKD                R2=HOURS\n         MVC   0(2,R9),=C'AM'\n         CH    R2,=H'12'\n         BL    OUTEND\n         MVC   0(2,R9),=C'PM'\n         B     OUTEND\n*              HHMMSS CHARS - 12 HOUR CLOCK\nOTHMSCX  BAL   R1,SET12\n         MVC   0(2,R9),WKCHAR\n         MVC   2(2,R9),WKCHAR+2\n         MVC   4(2,R9),WKCHAR+4\n         B     OUTEND\n*              HH:MM:SS CHARS - 12 HOUR CLOCK\nOTHMSFX  BAL   R1,SET12\n         MVC   0(2,R9),WKCHAR\n         MVI   3(R9),C':'\n         MVC   3(2,R9),WKCHAR+2\n         MVI   5(R9),C':'\n         MVC   6(2,R9),WKCHAR+4\n         B     OUTEND\n*              HHMMSS BINARY - 12 HOUR CLOCK\nOTHMSBX  BAL   R1,SET12\n         PACK  WKPKD,WKCHAR(6)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              HHMMSS PACKED - 12 HOUR CLOCK\nOTHMSPX  BAL   R1,SET12\n         PACK  0(4,R9),WKCHAR(6)\n         B     OUTEND\n*              HHMMSST CHARS - 12 HOUR CLOCK\nOTHMSTCX BAL   R1,SET12\n         MVC   0(2,R9),WKCHAR\n         MVC   2(2,R9),WKCHAR+2\n         MVC   4(2,R9),WKCHAR+4\n         MVC   6(1,R9),WKCHAR+6\n         B     OUTEND\n*              HH:MM:SS:T CHARS - 12 HOUR CLOCK\nOTHMSTFX BAL   R1,SET12\n         MVC   0(2,R9),WKCHAR\n         MVI   3(R9),C':'\n         MVC   3(2,R9),WKCHAR+2\n         MVI   5(R9),C':'\n         MVC   6(2,R9),WKCHAR+4\n         MVI   8(R9),C':'\n         MVC   9(1,R9),WKCHAR+6\n         B     OUTEND\n*              HHMMSST BINARY - 12 HOUR CLOCK\nOTHMSTBX BAL   R1,SET12\n         PACK  WKPKD,WKCHAR(7)\n         CVB   R2,WKPKD\n         ST    R2,0(R9)\n         B     OUTEND\n*              HHMMSST PACKED - 12 HOUR CLOCK\nOTHMSTPX BAL   R1,SET12\n         PACK  0(4,R9),WKCHAR(7)\n         B     OUTEND\n*\nOUTEND   TM    4(R10),X'80'\n         BO    FINISH0                 BRN IF NO MORE PARAMETERS\n         LA    R10,8(R10)              ADVANCE TO NEXT PARAMETER\n         LA    R8,4(R8)                INCREMENT RETURN CODE\n         B     OUTPARM                 BRN TO PROCESS\n***********************************************************************\n*        EXIT TO CALLER                                               *\n***********************************************************************\nFINISH0  SR    R15,R15\n         B     FINISH\nFINISH4  LA    R15,4\n         B     FINISH\nFINISH8  LA    R15,8\n         B     FINISH\nFINISH12 LA    R15,12\n         B     FINISH\nFINISH16 LA    R15,16\n         B     FINISH\nFINISHOU LR    R15,R8\nFINISH   EQU   *\n         LR    R4,R15\n         L     R1,R1SAVE\n         LA    R0,WKLNTH\n         FREEMAIN R,LV=(0),A=(1)\n         L     R13,R13SAVE\n         LR    R15,R4\n         ENDS  OK\n         EJECT\n***********************************************************************\n*        ROUTINE TO OBTAIN CURRENT DATE AND TIME                      *\n***********************************************************************\nGETCURR  TM    WKFLAG1,WKFCURR\n         BOR   R1                      EXIT IF ALREADY GOT\n         LR    R2,R1                   R2=LINK REG\n         TIME  DEC                     GET CURRENT DATE TIME\n         ST    R0,WKNPTIME             STORE CURRENT PACKED TIME\n         ST    R1,WKNPJUL              STORE CURRENT PACKED JUL. DATE\n         OI    WKFLAG1,WKFCURR         INDICATE CURRENT DAT/TIME STORED\n         BR    R2                      EXIT\n***********************************************************************\n*        ROUTINE TO VALIDATE CHARACTER TIME (WKCTIME)                 *\n***********************************************************************\nVALCTIM  LA    R2,WKCTIME              CHECK ALL DIGITS NUMERIC\n         LA    R3,6\nVALCTIM2 CLI   0(R2),C'0'\n         BL    FINISH8\n         CLI   0(R2),C'9'\n         BH    FINISH8\n         LA    R2,1(R2)\n         BCT   R3,VALCTIM2\n         PACK  WKPKD,WKCTIME(2)\n         CVB   R2,WKPKD                R2=HOURS\n         CH    R2,=H'23'\n         BH    FINISH8                 ERROR IF HOURS > 23\n         PACK  WKPKD,WKCTIME+2(2)\n         CVB   R2,WKPKD                R2=MINUTES\n         CH    R2,=H'59'\n         BH    FINISH8                 ERROR IF MINUTES > 59\n         PACK  WKPKD,WKCTIME+4(2)\n         CVB   R2,WKPKD                R2=SECONDS\n         CH    R2,=H'59'\n         BH    FINISH8                 ERROR IF SECONDS > 59\n         BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO VALIDATE CHARACTER DATE (WKCDAT)                  *\n***********************************************************************\nVALCDAT  LA    R2,WKCDAT               CHECK ALL DIGITS NUMERIC\n         LA    R3,6\nVALCDAT2 CLI   0(R2),C'0'\n         BL    FINISH4\n         CLI   0(R2),C'9'\n         BH    FINISH4\n         LA    R2,1(R2)\n         BCT   R3,VALCDAT2\n         PACK  WKPKD,WKCDAT+2(2)\n         CVB   R2,WKPKD                R2=MONTH NUMBER\n         LTR   R2,R2\n         BZ    FINISH4                 ERROR IF MONTH 0\n         CH    R2,=H'12'\n         BH    FINISH4                 ERROR IF MONTH > 12\n         PACK  WKPKD,WKCDAT+4(2)\n         CVB   R3,WKPKD                R3=YEAR NUMBER\n         PACK  WKPKD,WKCDAT(2)\n         CVB   R4,WKPKD                R4=DAY NUMBER\n         LTR   R4,R4\n         BZ    FINISH4                 ERROR IF DAY 0\n         CH    R2,=H'2'\n         BNE   VALCDAT3                BRN IF NOT FEB\n         LTR   R3,R3\n         BZ    VALCDAT3\n         N     R3,=F'3'\n         BNZ   VALCDAT3                BRN IF NOT LEAP YEAR\n         CH    R4,=H'29'\n         BH    FINISH4                 ERROR IF DAY > 29\n         BR    R1                      EXIT\nVALCDAT3 SR    R3,R3\n         IC    R3,TABLE1(R2)\n         CR    R4,R3\n         BH    FINISH4                 ERROR IF DAY NO. TOO HIGH\nVALCDAT4 BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO VALIDATE JULIAN CHARACTER DATE (WKCJUL)           *\n***********************************************************************\nVALCJUL  LA    R2,WKCJUL               CHECK ALL DIGITS NUMERIC\n         LA    R3,5\nVALCJUL2 CLI   0(R2),C'0'\n         BL    FINISH4\n         CLI   0(R2),C'9'\n         BH    FINISH4\n         LA    R2,1(R2)\n         BCT   R3,VALCJUL2\n         PACK  WKPKD,WKCJUL(2)\n         CVB   R2,WKPKD                R2=YEAR NUMBER\n         PACK  WKPKD,WKCJUL+2(3)\n         CVB   R3,WKPKD                R3=JULIAN NUMBER\n         LTR   R3,R3\n         BZ    FINISH4                 ERROR IF JULIAN NUMBER 0\n         CH    R3,=H'366'\n         BH    FINISH4                 ERROR IF JULIAN NUMBER>366\n         LTR   R2,R2\n         BZ    VALCJUL3\n         N     R2,=F'3'\n         BZR   R1                      EXIT IF LEAP YEAR\nVALCJUL3 CH    R3,=H'366'\n         BE    FINISH4                 ERROR IF JULIAN NUMBER=366\n         BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO VALIDATE WEEK DATE (WKWDAT) AND CONVERT TO JULIAN *\n***********************************************************************\nVALWDAT  LA    R2,WKWDAT               CHECK ALL DIGITS NUMERIC\n         LA    R3,6\nVALWDAT2 CLI   0(R2),C'0'\n         BL    FINISH4\n         CLI   0(R2),C'9'\n         BH    FINISH4\n         LA    R2,1(R2)\n         BCT   R3,VALWDAT2\n         PACK  WKPKD,WKWDAT(2)\n         CVB   R2,WKPKD                R2=DAY NUMBER\n         CH    R2,=H'6'\n         BH    FINISH4                 ERROR IF DAY > 6\n         PACK  WKPKD,WKWDAT+2(2)\n         CVB   R3,WKPKD                R3=WEEK NUMBER\n         LTR   R3,R3\n         BZ    FINISH4                 ERROR IF WEEK = 0\n         CH    R3,=H'53'\n         BH    FINISH4                 ERROR IF WEEK > 53\n         PACK  WKPKD,WKCDAT+4(2)\n         CVB   R4,WKPKD                R4=YEAR NUMBER\n         MH    R3,=H'7'\n         AR    R3,R2                   R3=(WEEK*7)+DAY\n         CH    R4,=H'50'\n         BL    VALWDAT3\n         BCTR  R4,0\n         B     VALWDAT4\nVALWDAT3 LA    R4,99(R4)               R4=YEAR-1(IF YR<50 ASSUME NEXT\n*                                                CENTURY)\nVALWDAT4 LR    R7,R4\n         MH    R4,=H'35'               R4=((YEAR-1)*35)\n         LR    R5,R4\n         SR    R4,R4\n         D     R4,=F'28'               R5=INT((YEAR-1)*35/28)\n         SR    R6,R6\n         D     R6,=F'100'              R7=INT((YEAR-1)/100)\n         LA    R5,2(R5)\n         SR    R5,R7                   R5=(R5+2-R7)\n         SR    R4,R4\n         D     R4,=F'7'\n         SR    R3,R5\n         SH    R3,=H'6'                R3=JULIAN DATE\n         CVD   R3,WKPKD\n         UNPK  WKCJUL+2(3),WKPKD       STORE JULIAN DATE\n         OI    WKCJUL+4,X'F0'\n         MVC   WKCJUL(2),WKWDAT+4      STORE JULIAN YEAR\n         PACK  WKPJUL,WKCJUL\n         B     VALCJUL                 BRN TO VALIDATE JULIAN DATE\n***********************************************************************\n*        ROUTINE TO OBTAIN CHARACTER DATE (WKCDAT)                    *\n***********************************************************************\nUSECDATE TM    WKFLAG1,WKFCDATE\n         BOR   R1                      BRN IF ALREADY AVAILABLE\n         MVC   WKCDAT+4(2),WKCJUL      MOVE YEAR NO.\n         PACK  WKPKD,WKCJUL+2(3)\n         CVB   R4,WKPKD                R4=NO. OF DAYS INTO YEAR\n         PACK  WKPKD,WKCJUL(2)\n         CVB   R5,WKPKD                R5= YEAR NO.\n         LTR   R5,R5\n         BZ    USECD1\n         N     R5,=F'3'\n         BZ    USECD2                  IF NOT LEAP YEAR\nUSECD1   LA    R6,59                       SET R6=59\n         B     USECD3                  ELSE\nUSECD2   LA    R6,60                       SET R6=60\nUSECD3   CR    R4,R6\n         BNH   USECD4                  IF IN MARCH OR LATER,\n         LA    R4,61(R4)                   ADD 61 TO DAY NO\n         SR    R4,R6                       SUB R6(59 OR 60) FROM DAY NO\nUSECD4   LA    R4,91(R4)               ADD 91 TO DAY NO. GIVING ADJUSTD\n         LR    R7,R4                      DAY NO (N). COPY TO R7\n         M     R6,=F'2145'             MULTIPLY BY 2145\n         SR    R6,R6\n         D     R6,=F'65536'            DIVIDE BY 65536 GIVING R7\n         LR    R5,R7\n         BCTR  R5,0\n         BCTR  R5,0                    R5=MONTH NO. (=R7-2)\n         CVD   R5,WKPKD\n         UNPK  WKCDAT+2(2),WKPKD       PUT MONTH NO. INTO DD/MM/YY\n         OI    WKCDAT+3,X'F0'\n         M     R6,=F'1955'             MULTIPLY R7 BY 1955\n         SRL   R7,6                    DIVIDE BY 64\n         SR    R4,R7                   DAY NO. = R7 - ADJ DAY NO.\n         CVD   R4,WKPKD\n         UNPK  WKCDAT(2),WKPKD         PUT DAYNO. INTO DD/MM/YY\n         OI    WKCDAT+1,X'F0'\n         OI    WKFLAG1,WKFCDATE        INDICATE CHARACTER DATE AVAIL.\n         BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO OBTAIN JULIAN DATE (WKCJUL)                       *\n***********************************************************************\nUSEJDATE TM    WKFLAG1,WKFJUL\n         BOR   R1                      BRN IF ALREADY AVAILABLE\n         MVC   WKCJUL(2),WKCDAT+4      MOVE YEAR NO. FROM CHAR. DATE\n         PACK  WKPKD,WKCDAT(2)\n         CVB   R2,WKPKD                R2=DAY NO.\n         PACK  WKPKD,WKCDAT+2(2)\n         CVB   R3,WKPKD                R3=MONTH NO.\n         PACK  WKPKD,WKCDAT+4(2)\n         CVB   R4,WKPKD                R4=YEAR NO.\n         LR    R5,R3\n         AR    R5,R3\n         LH    R5,TABLE3(R5)           R5=JULIAN START DAY FOR MONTH-1\n         CH    R3,=H'3'\n         BL    USEJD2                  BRN IF JAN OR FEB\n         LTR   R4,R4\n         BZ    USEJD2\n         N     R4,=F'3'\n         BNZ   USEJD2                  IF LEAP YEAR\n         LA    R5,1(R5)                     ADD 1\nUSEJD2   AR    R5,R2                   ADD DAY NO.\n         CVD   R5,WKPKD                STORE JULIAN DAY NO.\n         UNPK  WKCJUL+2(3),WKPKD\n         OI    WKCJUL+4,X'F0'\n         PACK  WKPJUL,WKCJUL\n         OI    WKFLAG1,WKFJUL          INDICATE JULIAN DATA AVAILABLE\n         BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO OBTAIN WEEK DATE (WKWDAT) FROM JULIAN DATE        *\n***********************************************************************\nUSEWDATE PACK  WKPKD,WKCJUL+2(3)\n         CVB   R2,WKPKD                R2=JULIAN DATE NO.\n         PACK  WKPKD,WKCJUL(2)\n         CVB   R3,WKPKD                R3=YEAR NO.\n         CH    R3,=H'50'\n         BL    USEWD2\n         BCTR  R3,0\n         B     USEWD3\nUSEWD2   LA    R3,99(R3)               R3=YEAR-1 (OR +99)\nUSEWD3   LR    R5,R3\n         MH    R5,=H'35'               R5=(YEAR-1)*35\n         SR    R4,R4\n         D     R4,=F'28'               R5=INT((YEAR-1)*35/28)\n         LR    R7,R3\n         SR    R6,R6\n         D     R6,=F'100'              R7=NO. OF CENTURIES\n         LA    R5,2(R5)\n         SR    R5,R7\n         SR    R4,R4\n         D     R4,=F'7'                R4=DAY OF WEEK FOR 1 JAN\n         LA    R5,6(R4)\n         AR    R5,R2\n         SR    R4,R4\n         D     R4,=F'7'                R5=WEEK NO.; R4=DAY NO.\n         CVD   R4,WKPKD\n         UNPK  WKWDAT(2),WKPKD         STORE DAY NO.\n         OI    WKWDAT+1,X'F0'\n         CVD   R5,WKPKD\n         UNPK  WKWDAT+2(2),WKPKD       STORE WEEK NO.\n         OI    WKWDAT+3,X'F0'\n         MVC   WKWDAT+4(2),WKCJUL      STORE YEAR NO.\n         BR    R1                      EXIT\n***********************************************************************\n*        ROUTINE TO SET 12 HOUR CLOCK VALUE IN WKCHAR                 *\n***********************************************************************\nSET12    MVC   WKCHAR(8),WKCTIME\n         PACK  WKPKD,WKCHAR(2)\n         CVB   R2,WKPKD\n         LTR   R2,R2\n         BNE   SET12A\n         LA    R2,12\nSET12A   CH    R2,=H'12'\n         BNH   SET12B\n         SH    R2,=H'12'\nSET12B   CVD   R2,WKPKD\n         UNPK  WKCHAR(2),WKPKD\n         OI    WKCHAR+1,X'F0'\n         BR    R1\n         EJECT\n***********************************************************************\n*        CONSTANTS                                                    *\n***********************************************************************\n*              TABLE OF DAYS IN EACH MONTH\nTABLE1   DC    AL1(0)                   MONTH 0\n         DC    AL1(31),AL1(28),AL1(31)  JAN,FEB,MAR\n         DC    AL1(30),AL1(31),AL1(30)  APR,MAY,JUN\n         DC    AL1(31),AL1(31),AL1(30)  JUL,AUG,SEP\n         DC    AL1(31),AL1(30),AL1(31)  OCT,NOV,DEC\n*              TABLE OF MONTH NAMES\nTABLE2   DC    AL2(0),CL9' '            MONTH 0\n         DC    AL2(7),CL9'JANUARY'      1- JAN\n         DC    AL2(8),CL9'FEBRUARY'     2- FEB\n         DC    AL2(5),CL9'MARCH'        3- MAR\n         DC    AL2(5),CL9'APRIL'        4- APR\n         DC    AL2(3),CL9'MAY'          5- MAY\n         DC    AL2(4),CL9'JUNE'         6- JUN\n         DC    AL2(4),CL9'JULY'         7- JUL\n         DC    AL2(6),CL9'AUGUST'       8- AUG\n         DC    AL2(9),CL9'SEPTEMBER'    9- SEP\n         DC    AL2(7),CL9'OCTOBER'      10-OCT\n         DC    AL2(8),CL9'NOVEMBER'     11-NOV\n         DC    AL2(8),CL9'DECEMBER'     12-DEC\n*              TABLE OF JULIAN DAY NO'S FOR 1ST OF MONTH, MINUS 1\nTABLE3   DC    AL2(0)                   MONTH 0\n         DC    AL2(0)                   1 - JAN\n         DC    AL2(31)                  2 - FEB\n         DC    AL2(59)                  3 - MAR\n         DC    AL2(90)                  4 - APR\n         DC    AL2(120)                 5 - MAY\n         DC    AL2(151)                 6 - JUN\n         DC    AL2(181)                 7 - JUL\n         DC    AL2(212)                 8 - AUG\n         DC    AL2(243)                 9 - SEP\n         DC    AL2(273)                 10- OCT\n         DC    AL2(304)                 11- NOV\n         DC    AL2(334)                 12- DEC\n*              TABLE OF DAY NAMES\nTABLE4   DC    AL2(6),CL9'SUNDAY'\n         DC    AL2(6),CL9'MONDAY'\n         DC    AL2(7),CL9'TUESDAY'\n         DC    AL2(9),CL9'WEDNESDAY'\n         DC    AL2(8),CL9'THURSDAY'\n         DC    AL2(6),CL9'FRIDAY'\n         DC    AL2(8),CL9'SATURDAY'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A06DELRP": {"ttr": 8709, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x01\\x00\\x89\\x19O\\x00\\x93\\x03?\\x10E\\x00\\x98\\x00\\x90\\x00\\x0c\\xe3\\xe2\\xc2\\xc4\\xd9@@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1989-07-13T00:00:00", "modifydate": "1993-02-02T10:45:01", "lines": 152, "newlines": 144, "modlines": 12, "user": "TSBDR"}, "text": "*\n* MAKE CHANGES AS REQUIRED ON =====>  LINES\n*\n*\n*\n*\n*\n//YOUR JOBCARD                                    ======>\n//*\n//ASM     EXEC PGM=IEV90,\n//             PARM=(NODECK,OBJECT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN    DD  *\nSMFPROG  CSECT\n         PRINT NOGEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,*\n         USING SMFPROG,R12\n         LR    R12,R15\n         LA    R14,SAVEAREA\n         ST    R13,4(R14)\n         ST    R14,8(R13)\n         LR    R13,R14\n*\n*\n         OPEN SMFIN\n         OPEN (REPORT,(OUTPUT))\nHEADING  PUT  REPORT,BLANK\n         PUT  REPORT,HEAD1\n         PUT REPORT,HEAD2\n         PUT REPORT,HEAD3\n         LA    R8,60\n*\nGETSMF   GET  SMFIN,FIELDA\n*\n         LA   R2,FIELDA\n*        LR   R2,R1\n         CLI  5(R2),17\n         BNE  GETSMF\n         USING SMF17HDR,R2\n         MVC  OUTJBN(8),SMF17JBN\n         MVC  OUTDSN(44),SMF17DSN\n         CLC  SMF17DSN(10),=C'DWSF.TRKL1'                  =====>\n*             LENGTH   **     **********    DATASET NAME\n         BNE  GETSMF\n         MVC  PARM2(4),SMF17DTE\n         MVC  PARM3(4),SMF17TME\n         MVC  PARM1A,=X'0011'\n         MVC  PARM1B,=X'0047'\n         MVC  PARM4,=X'0002'\n         MVC  PARM6,=X'0034'\n         CALL FWWCLOCK,(PARM1,PARM2,PARM3,PARM4,PARM5,PARM6,PARM7),VL\n         MVC  OUTDTE(8),PARM5\n         MVC  OUTTME(8),PARM7\n         PUT  REPORT,JOBLINE\n         BCTR R8,R0\n         LTR  R8,R8\n         BZ   HEADING\n         B    GETSMF\nENDSMF   CLOSE SMFIN\n         CLOSE REPORT\nEXITR    L     R13,4(R13)\n         RETURN (14,12),RC=(15)\n         EJECT\n         LTORG\nSAVEAREA DS    18F\nPARM1    DS    0XL4\nPARM1A   DS    XL2\nPARM1B   DS    XL2\nPARM2    DS    PL4\nPARM3    DS    BL4\nPARM4    DS    XL2\nPARM5    DS    CL8\nPARM6    DS    XL2\nPARM7    DS    CL8\nSMFIN    DCB   DDNAME=SMFIN,DSORG=PS,MACRF=(GM),EODAD=ENDSMF,          X\n               RECFM=VB\nREPORT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=(PM),LRECL=140\nBLANK    DC    CL140'                    '\nHEAD1    DS    0CL140\n         DC    CL40'1JOBNAME     DATE      TIME    UPDATE/  '\n         DC    CL40'SCRATCH/  DATASET NAME                  '\n         DC    CL40'              CATALOG NAME              '\n         DC    CL20'                    '                   '\nHEAD2    DS    0CL140\n         DC    CL40'                                DELETE  '\n         DC    CL40'UNCATALOG                               '\n         DC    CL40'                                        '\n         DC    CL20'                    '                   '\nHEAD3    DS    0CL140\n         DC    CL40' =======     ====      ====    =======  '\n         DC    CL40'========= ============                  '\n         DC    CL40'              ============              '\n         DC    CL20'                    '                   '\nJOBLINE  DS    0CL140\n         DC    CL1' '\nOUTJBN   DS    CL8\n         DC    CL2'  '\nOUTDTE   DS    CL8\n         DC    CL2'  '\nOUTTME   DS    CL8\n         DC    CL5'     '\n         DC    CL10'          '\n         DC    CL5'        '\nOUTDSN   DS    CL44\n         DC    CL44' '\nFIELDA   DS    CL33000\n         DSECT\n         IFASMFR1 17\n         END\n/*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//LKED    EXEC PGM=IEWL,COND=(5,LT,ASM),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLIB DD DSN=SYS1.LINKLIB,DISP=SHR\n//       DD DSN=SYS3.UTILS.LOAD,DISP=SHR\n//       DD DSN=SYS2.LINKLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  SPACE=(CYL,(1,1,1)),DSN=&LOD(X),DISP=(,PASS),\n//             UNIT=VIO,DCB=BUFNO=1\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//GO      EXEC PGM=*.LKED.SYSLMOD,COND=((5,LT,LKED),(5,LT,ASM))\n//SMFIN    DD DSN=GDG.FWW.SMFDATA(0),DISP=SHR,\n*                 ******************       SMF DATASET NAME  =====>\n//   DCB=(RECFM=VB,LRECL=32756,BLKSIZE=32760)\n//REPORT   DD SYSOUT=X,DCB=(RECFM=FBA,LRECL=140,BLKSIZE=9380)\n//SYSUDUMP DD SYSOUT=X\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A06DOCMS": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x93\\x03?\\x00\\x93\\x03?\\x11$\\x00q\\x00q\\x00\\x00\\xe3\\xe2\\xc2\\xc4\\xd9@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-02-02T00:00:00", "modifydate": "1993-02-02T11:24:01", "lines": 113, "newlines": 113, "modlines": 0, "user": "TSBDR"}, "text": "\n      UTILITY PROGRAM TO PRINT WHO HAS DELETED A DATASET\n      **************************************************\n\n 1) ASSEMBLE SOURCE IN XXXCLOCK CALLING LOAD MODULE FWWCLOCK\n    INTO A CONCATENATED LOAD LIBRARY.\n    (THIS IS A DATE CONVERSION ROUTINE FOR OUTPUT REPORT)\n\n 2) MAKE AMENDS TO XXXDELRP PROGRAM AS DOCUMENTED I.E.\n    JOBCARD,DATASETNAME AND LENGTH AND YOUR SMF DATASET NAME\n\n 3) RUN JOB\n\n 4) OUTPUT WILL TELL YOU WHO AND WHEN DATASET DELETED IF IT WAS\n    DELETED WITHIN THE SMF TIME SPAN.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ************************************************************\n   *******       P D B R E O R G  P R O C E D U R E     *******\n   *******       P D B R E O R G  P R O C E D U R E     *******\n   ************************************************************\n\n   PDBREORG - PROCEDURE DESCRIPTION\n   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n   THIS PROCEDURE RUNS WEEKLY TO REORGANISE THE PERFORMANCE AND\n   CAPACITY DATABASES.\n\n   STEP0010 - CREATE TEMP CICS AND PROC COPY CICS PDB TO IT.\n   ~~~~~~~~\n   STEP0020 - DELETE CICS PDB.\n   ~~~~~~~~\n   STEP0030 - CREATE CICS PDB AND PROC COPY TEMP CICS TO IT.\n   ~~~~~~~~\n   STEP0040 - DELETE CICS TEMP.\n   ~~~~~~~~\n   STEP0050 - CREATE TEMP NET AND PROC COPY NET PDB TO IT.\n   ~~~~~~~~\n   STEP0060 - DELETE NET PDB.\n   ~~~~~~~~\n   STEP0070 - CREATE NET PDB AND PROC COPY TEMP NET TO IT.\n   ~~~~~~~~\n   STEP0080 - DELETE NET TEMP.\n   ~~~~~~~~\n   STEP0090 - CREATE TEMP PERF AND PROC COPY PERF PDB TO IT.\n   ~~~~~~~~\n   STEP0100 - DELETE PERF PDB.\n   ~~~~~~~~\n   STEP0110 - CREATE PERF PDB AND PROC COPY TEMP PERF TO IT.\n   ~~~~~~~~\n   STEP0120 - DELETE PERF TEMP.\n   ~~~~~~~~\n   STEP0130 - CREATE TEMP SPIN AND PROC COPY SPIN PDB TO IT.\n   ~~~~~~~~\n   STEP0140 - DELETE SPIN PDB.\n   ~~~~~~~~\n   STEP0150 - CREATE SPIN PDB AND PROC COPY TEMP SPIN TO IT.\n   ~~~~~~~~\n   STEP0160 - DELETE SPIN TEMP.\n   ~~~~~~~~\n\n   PDBREORG - RESTART & RECOVERY\n   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   IF JOB FAILS LEAVE FOR SYSTEMS PROGRAMMING\n\n   ==================> END OF DOCUMENT <=======================\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07#INDX": {"ttr": 8716, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x00\\x93&\\x9f\\x00\\x99)\\x1f\\x126\\x00,\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-09-26T00:00:00", "modifydate": "1999-10-18T12:36:01", "lines": 44, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  A07XXXXX          GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY    Kevin Fergeson\n                     Cleveland County Council                           Y\n                     0642 26310\n ____________________________________________________________________\n\nA07BROWS    BROWSE\nA07CLSCR    CLEARSCR     CLEAR THE VDU SCREEN\nA07DATE     DATE TRANSLATE ROUTINE\nA07DAY      TELL USER WHAT DAY A DATE WAS\nA07EOJ      EOJ\nA07701DX    IEC701DX  CHANGE CONSOLE IDENTIFIER OF THE TAPE MESSAGE\nA07176IX    IEF176IX  ISSUE STOP TO EXTERNAL WRITER\nA07000IX    IOS000IX  MAKE IOS000I A NON DELETE MESSAGE FOR DASD\nA07REGEQ    REGISTER EQUATES\nA07SV255    SVC255\nA07UTCPY    Front end for IEBCOPY\nA07ZAP1     Allows IPOUPDTE to run against any PDS\nA07ZAP1A    Allows CPPUPDTE to run against any PDS\nA07ZAP2     Makes  IEBPTPCH print alpabetically\nA07ZAP3     Makes  IEBPTPCH print alpabetically  other releases\nA07ZAP4     Stops an external writer at 'waiting for work'\nA07ZAP4     Stops an external writer at 'waiting for work' more rels\n\nSMFSCAN consists of the following programs :-\nA07PARSE   smfparse - parses sysin input. This program is the main\n                       entry point. It calls SMFSCANT to print titles\n                       then it validates the SYSIN data stream and then\n                       (if all is OK) links to SMFSCANR.\n\n A07SCANT   smfscant - prints the title pages for SMFSCAN. This program\n ---------             will print the title depending at what stage the\n                       program has got. ie SYSIN REPORT or REPORT.\n                       This program links to DATE.\n\n A07SCANR   smfscanr - process the input file and produces the report.\n --------              This program also links to SMFSCANT and DATE.\n\n SMFSCAN will produce a report, from SMF TYPE 30 records, of whatever\n is specified in the SYSIN data stream. User instructions are held in\n this PDS as member A07SMDOC\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07BROWS": {"ttr": 8718, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00i\\x00i\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 105, "newlines": 105, "modlines": 0, "user": "UKGUIDE"}, "text": "         MACRO\n&N       BEGIN &R,&R2,&RENT=N\n* ******************************************************************* *\n*                                                                     *\n*                             B E G I N                               *\n*                                                                     *\n*        GENERATE A CSECT STATEMENT, SPECIFY AND LOAD THE BASE        *\n*        REGISTERS, GENERATE STANDARD LINKAGE WITH SAVE AREA.         *\n*                                                                     *\n         LCLC  &REG,&LAB,&REG2,&REG3,&REG4,&BASE2\n         GBLC  &RENTGBL\n         AIF   (K'&N NE 0).LABOK\n&LAB     SETC  'NONAME'\n         MNOTE 4,'***** NO CSECT NAME SPECIFIED, NONAME USED *********'\n         AGO   .LABCNT\n.LABOK   ANOP\n&LAB     SETC  '&N'\n.LABCNT  ANOP\n         AIF   (K'&R NE 0).REGOK\n&REG     SETC  '12'\n         MNOTE 4,'***** NO BASE REGISTER SPECIFIED, 12 USED **********'\n         AGO   .REGCNT\n.REGOK   ANOP\n         AIF   ('&R'(1,1) NE 'R').NUMB\n&REG     SETC  '&R'(2,2)\n         AGO   .COMP\n.NUMB    ANOP\n&REG     SETC  '&R'\n.COMP    ANOP\n         AIF   ('&REG' LT '2').E1\n         AIF   ('&REG' GT '12').E1\n&REG     SETC  '&R'\n.REGCNT  ANOP\n&REG2    SETC  '&REG            USE &REG AS BASE REGISTER'\n&BASE2   SETC  '1'\n         AIF   (K'&R2 EQ 0).BASE1\n&BASE2   SETC  '2'\n         AIF   ('&R2'(1,1) NE 'R').NUMB2\n&REG3    SETC  '&R2'(2,2)\n         AGO   .COMP2\n.NUMB2   ANOP\n&REG3    SETC  '&R2'\n.COMP2   ANOP\n         AIF   ('&REG3' LT '2').E12\n         AIF   ('&REG3' GT '12').E12\n&REG3    SETC  '&R2'\n         AIF   ('&REG3' EQ '&REG').E12\n&REG4    SETC  '&REG3       USE &REG3 AS 2ND BASE REGISTER'\n         MNOTE '***** THIS PROGRAM WILL HAVE 2 BASE REGISTERS ******'\n.BASE1   ANOP\n&RENTGBL SETC  'N'\n         AIF   ('&RENT'(1,1) NE 'Y').NOTRENT\n&RENTGBL SETC  'Y'\n.NOTRENT ANOP\n&LAB     CSECT                                                        *\n         STM   14,12,12(13)     SAVE REGISTERS IN CALLERS AREA        *\n         LR    &REG,15          *                                     *\n         USING &LAB,&REG2                                             *\n         AIF   ('&BASE2' EQ '1').AONE\n         USING &LAB+4096,&REG4                                        *\n         LA    &REG3,2048(&REG)                                       *\n         LA    &REG3,2048(&REG3)                                      *\n.AONE    ANOP\n         AIF   ('&RENTGBL' EQ 'N').ANOTR\n         GETMAIN R,LV=72        GET STORAGE FOR SAVE AREA             *\n         ST    13,4(1)          PUT ADDRESS OF HIS SAVE AREA IN YOURS *\n         ST    1,8(13)          PUT ADDRESS OF YOUR SAVE AREA IN HIS  *\n         XR    13,1             *                                     *\n         XR    1,13             *EXCHANGE REGISTERS 1 AND R13         *\n         XR    13,1             *                                     *\n         BAL   1,PRGMSAVE       BRANCH PASSED ASSEMBLY INFORMATION    *\n*                                                                     *\n         MNOTE '====> RE-ENTRANT VERSION OF EOJ WILL BE USED <==== *'\n*                                                                     *\n         AGO   .INFO\n.ANOTR   ANOP\n         LR    15,13                                                  *\n         BAL   13,PRGMSAVE+118                                        *\nPRGMSAVE DC    18F'0'                                                 *\n.INFO    ANOP\n*                                                                     *\n*        ASSEMBLY INFORMATION - DATE, TIME AND CSECT NAME FOLLOW      *\n*                                                                     *\n         DC    CL8'&LAB'         *********  CSECT NAME  ***********   *\n*                                                                     *\n         DC    CL24'WRITTEN BY K E FERGUSON '                         *\n*                                                                     *\n         DC    CL8'&SYSDATE'     **** ASSEMBLY DATE (MM/DD/YY) ****   *\n         DC    CL6' &SYSTIME'    ***** ASSEMBLY TIME (HH.MM) ******   *\n*                                                                     *\n         AIF   ('&RENTGBL' EQ 'N').ANOTR2\nPRGMSAVE L     1,4(13)           RELOAD ADDRESS OF HIS SAVE AREA      *\n         LM    0,1,20(1)         RESET REGISTERS 0 AND 1              *\n         AGO   .EXIT\n.ANOTR2  ANOP\n         ST    13,8(15)                                               *\n         ST    15,4(13)                                               *\n.EXIT    ANOP\n*                                                                K.F. *\n* ******************************************************************* *\n         SPACE 1\n         MEXIT\n.E12     MNOTE 8,' -- VALUE FOR SECOND BASE REGISTER INVALID -- '\n.E1      MNOTE 8,'IMPROPER REGISTER SPECIFIED, NO STATEMENTS GENERATED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07CLSCR": {"ttr": 8963, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "UKGUIDE"}, "text": "         MACRO\n&NAME    CLEARSCR\n         GBLA  &CLRVDU\n* ******************************************************************* *\n*                                                                     *\n*                         C L E A R S C R                             *\n*                                                                     *\n*                      CLEAR THE VDU DISPLAY                          *\n*                                                                     *\n         AIF   ('&CLRVDU' GT '1').GO2\n&CLRVDU  SETA  1\n.GO2     ANOP\n&NAME    LA    1,$CLRL&CLRVDU      GET LENGTH\n         TPUT  $CLR&CLRVDU,(1),FULLSCR\n         B     $CLREND&CLRVDU\n$CLR&CLRVDU DC    X'27'         ECC\n         DC    X'F5'         ERASE/WRITE\n         DC    X'C1'         WCC\n         DC    X'115D7F'     SBA L24C80\n         DC    X'3C5D7F00'   RA  L24C80,X'00'\n$CLRL&CLRVDU EQU   *-$CLR&CLRVDU\n$CLREND&CLRVDU EQU    *\n&CLRVDU  SETA  &CLRVDU+1\n*                                                                     *\n*                                                            K.E.F    *\n* ******************************************************************* *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07DATE": {"ttr": 8965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xf2\\x00\\xf2\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 242, "newlines": 242, "modlines": 0, "user": "UKGUIDE"}, "text": "DATE     BEGIN R12\n***********************************************************************\n** RETURNS TODAYS DATE OR REQUIRED DATE IN THE FORM :-               **\n** '**** DAYNAME00 DDTH MONTHNAME YEAR ****DD/MM/YYYY '              **\n**                                                                   **\n** NOTE :- THIS PROGRAM HAS A LINK TO THE PROGRAM 'DAY'              **\n*********************************************************************\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\n         REGEQS\n         EJECT\n         L     R2,0(R1)                PRESERVE R1 IN R2\n         CLC   0(4,R2),=F'0'           ANY PARMS ?\n         BE    TICK                    NO - GET TODAYS DATE\n         L     R3,0(R2)                LOAD R3 WITH DATE\n         L     R3,0(R3)                LOAD R3 WITH DATE\n         ST    R3,FULLWORK             MOVE DATE PASSED TO FULLWORD\n         L     R3,4(R2)                ADDRESS OF GET MAIN AREA\n         ST    R3,GETAREA              SAVE IT\n         MVI   PARMFLAG,C'Y'           SET PARM PASSED FLAG ON\n         B     LOAD                    NOW CONTINUE\nTICK     TIME  DEC\n         ST    R1,FULLWORK             STORE DATE PART IN FULLWORD\n         MVI   PARMFLAG,C'N'           SET PARM PASSED FLAG OFF\n         GETMAIN RC,LV=9,SP=1,LOC=BELOW ET 9 BYTES OF MAIN STORAGE\n         ST    R1,GETAREA              SAVE ADDRESS OF GOTTEN AREA\nLOAD     L     R3,FULLWORK             LOAD DATE INTO R3\n         SRL   R3,16                   REMOVE SIGN AND DAY PART\n         SLL   R3,4                    MAKE ROOM FOR SIGN\n         ST    R3,FULLWORD             SAVE IT\n         OI    FULLWORD+3,X'0F'        MOVE IN SIGN BIT\n         CVB   R3,DECIMAL              CONVERT TO BINARY\n         SR    R2,R2                   CLEAR R2\n         ST    R2,DECIMAL              CLEAR DECIMAL\n         LA    R5,4                    LOAD 4 INTO R5 (FOR LEAP YEAR)\n         DR    R2,R5                   DIVIDE YEAR BY 4\n         LTR   R2,R2                   IS THERE A REMAINDER ?\n         BZ    LEAP                    NO - ITS A LEAP YEAR\n         MVI   LEAPFLAG,C'N'           SET LEAPYEAR FLAG OFF\n         B     KEEPON\nLEAP     MVI   LEAPFLAG,C'Y'           SET LEAPYEAR FLAG ON\nKEEPON   UNPK  UNPKDTE,FULLWORK        UNPACK FULLWORD\n         MVC   YY,YEAR                 MOVE YEAR TO OUTDATE\n         L     R3,FULLWORK             LOAD R3 WITH DATE\n         SRL   R3,4                    REMOVE SIGN\n         LR    R4,R3                   ALSO PUT IT IN R4\n         SRL   R3,12                   REMOVE DAY PART FROM R3\n         SLL   R3,12                   MAKE OF THE FORM YY000\n         SR    R4,R3                   R4 SHOULD NOW = DDD\n         SLL   R4,4                    MAKE ROOM FOR SIGN\n         ST    R4,FULLWORD             SAVE R4 IN FULLWORD\n         OI    FULLWORD+3,X'0F'        FORCE 'F' INTO LAST BYTE\n         CVB   R4,DECIMAL              CONVERT TO BINARY\n         SR    R2,R2                   CLEAR R2 FOR MONTH COUNT\n         LA    R6,DAYS                 START OF TABLE OF DAYS IN R6\nLOOP     LA    R2,1(R2)                UP R2 BY ONE\n         C     R2,=F'12'               END OF THE YEAR ?\n         BH    CONTINUE                YES - ABEND\n         LR    R5,R4                   KEEP TAB OF R4\n         S     R4,0(R6)                TAKE NUMBER OF DAYS OFF\n         BNP   FOUND                   IF RESULT NOT + FOUND\n         C     R2,=F'2'                IS IT FEB ?\n         BNE   UPIT                    NO - KEEP GOING\n         CLI   LEAPFLAG,C'Y'           IS IT A LEAP YEAR\n         BNE   UPIT                    NO - KEEP GOING\n         S     R4,=F'1'                TAKE OFF ONE MORE DAY\n         BNP   FOUND                   IF RESULT NOT + FOUND\nUPIT     LA    R6,4(R6)                UP TABLE TO NEXT ENTRY\n         B     LOOP                    AND LOOP RETURN\nCONTINUE ABEND 33,DUMP                 ABEND - TOO MANY MONTHS IN YEAR\nFOUND    CVD   R5,DECIMAL              CONVERT R5 TO DECIMAL\n         LA    R5,DECIMAL              LOAD ADDRESS OF DECIMAL INTO R5\n         OI    7(R5),X'0F'             FORCE 'F' INTO LAST BYTE\n         UNPK  UNPKDTE,FULLWORD        UNPACK FULLWORD\n         MVC   DD,DAY+1                MOVE DAY INTO OUTDATE\n         LR    R3,R2                   SAVE R2 IN R3 FOR PARMBACK\n         CVD   R2,DECIMAL              CONVERT R5 TO DECIMAL\n         LA    R2,DECIMAL              LOAD ADDRESS OF DECIMAL INTO R5\n         OI    7(R2),X'0F'             FORCE 'F' INTO LAST BYTE\n         UNPK  UNPKDTE,FULLWORD        UNPACK FULLWORD\n         MVC   MM,DAY+1                MOVE MONTH INTO OUTDATE\n         MVC   WYEAR,MM+3              MOVE YEAR INTO WTO\n         MVC   WDAY,DD                 MOVE DAY INTO WTO\n         MVC   SUFF,=C'TH'             MOVE IN SUFFIX\n         CLI   WDAY+1,C'3'             IS IT X3 RD\n         BNE   TRY2                    NO - TRY 2ND\n         CLI   WDAY,C'1'               IS IT THE 13TH\n         BE    SUPPZERO                YES - DOESN'T MATTER\n         MVC   SUFF,=C'RD'             CHANGE SUFFIX TO RD\n         BE    SUPPZERO                YES - DOESN'T MATTER\nTRY2     CLI   WDAY+1,C'2'             IS IT X2 ND\n         BNE   TRY1                    NO - TRY 1ST\n         CLI   WDAY,C'1'               IS IT THE 12TH\n         BE    SUPPZERO                YES - DOESN'T MATTER\n         MVC   SUFF,=C'ND'             CHANGE SUFFIX TO ND\n         BE    SUPPZERO                YES - DOESN'T MATTER\nTRY1     CLI   WDAY+1,C'1'             IS IT X2 ND\n         BNE   SUPPZERO                NO - SUPPRESS ANY ZERO\n         CLI   WDAY,C'1'               IS IT THE 11TH\n         BE    SUPPZERO                YES - DOESN'T MATTER\n         MVC   SUFF,=C'ST'             CHANGE SUFFIX TO ND\nSUPPZERO CLI   WDAY,C'0'               IS FIRST CHARACTER A ZERO\n         BNE   MONPRO                  NO - PROCESS MONTH\n         MVI   WDAY,C' '               CHANGE IT TO SPACE\nMONPRO   LA    R4,DUMMY                POINT TO FIRST MON\nMONLOOP  LA    R4,9(R4)                AND UP 9 BYTES\n         BCT   R3,MONLOOP              ROUND UNTIL MONTH COUNT = 0\n         MVC   WMONTH,0(R4)            AND MOVE IN MONTH\n         LA    R1,OUTDATE              PUT ADDRESS OF OUTDATE INTO R1\n         ST    R1,DECIMAL              STORE IT IN FIRST FULLWORD\n         L     R1,GETAREA              PUT ADDRESS OF WHERE TO PUT IT\n         ST    R1,FULLWORD             SAVE IT IN SECOND FULLWORD\n         LR    R2,R1                   PUT IT R1\n         LINK  EP=DAY,PARAM=DECIMAL\n         MVC   DAYNAME,0(R2)           MOVE IN DAYNAME\n         CLI   PARMFLAG,C'Y'           WAS THIS DATE PASSED TO IT\n         BE    PARMBACK                YES SEND IT BACK THEN\n         MVC   WTO1+10(40),MESS        MOVE IN MESSAGE\nWTO1     WTO   '********************************************',         X\n               ROUTCDE=(2,11),DESC=(2)\n         L     R1,GETAREA\n         FREEMAIN RC,LV=9,A=(R1),SP=1\n         B     EXIT                    NOW GET OUT\nPARMBACK L     R3,GETAREA              LOAD ADDRESS OF PASSED GET AREA\n         MVC   0(50,R3),MESS           MOVE IN DATE DD/MM/YYYYXXXDAY\nEXIT     EOJ   C=0                     EXIT\n         LTORG\nMESS     DS    0CL40\n         DC    CL6'****  '\nDAYNAME  DS    CL9\n         DC    CL1' '\nWDAY     DS    CL2\nSUFF     DS    CL2\n         DC    CL1' '\nWMONTH   DS    CL9\n         DC    CL1' '\nWYEAR    DS    CL4\n         DC    CL5' ****'\nOUTDATE  DS    0CL10\nDD       DS    CL2\n         DC    CL1'/'\nMM       DS    CL2\n         DC    CL3'/19'\nYY       DS    CL2\nUNPKDTE  DS    0CL8\n         DS    CL3\nYEAR     DS    CL2\nDAY      DS    CL3\nPARMFLAG DS    CL1\nLEAPFLAG DS    CL1\nDECIMAL  DS    0D\n         DS    F\nFULLWORD DS    F\nFULLWORK DS    F\nGETAREA  DS    F\nDAYS     DC    F'31'\n         DC    F'28'\n         DC    F'31'\n         DC    F'30'\n         DC    F'31'\n         DC    F'30'\n         DC    F'31'\n         DC    F'31'\n         DC    F'30'\n         DC    F'31'\n         DC    F'30'\n         DC    F'31'\nDUMMY    DC    CL9'DUMMY****'\n         DC    CL9'JANUARY  '\n         DC    CL9'FEBRUARY '\n         DC    CL9'MARCH    '\n         DC    CL9'APRIL    '\n         DC    CL9'MAY      '\n         DC    CL9'JUNE     '\n         DC    CL9'JULY     '\n         DC    CL9'AUGUST   '\n         DC    CL9'SEPTEMBER'\n         DC    CL9'OCTOBER  '\n         DC    CL9'NOVEMBER '\n         DC    CL9'DECEMBER '\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07DAY": {"ttr": 8970, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x01;\\x01;\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 315, "newlines": 315, "modlines": 0, "user": "UKGUIDE"}, "text": "WHATDAY  BEGIN R12\n         REGEQS\n         PRINT NOGEN\n***********************************************************************\n**                                                                   **\n**  PURPOSE : TO INFORM THE USER WHAT DAY A PARTICULAR DATE WAS/IS/  **\n**            WILL BE.                                               **\n**  INPUT FORMAT : DD/MM/YYYY  NOPARM AND NO SYSIN DD FOR MASTER CONS**\n**                                                                   **\n**  REGISTER USAGE :-                                                **\n**  R1  PASSED PARAMETER ( PARM INPUT ONLY)                          **\n**  R2  WORK REGISTER                                                **\n**  R3  WORK REGISTER                                                **\n**  R4  ** NOT USED **                                               **\n**  R5  WORK REGISTER                                                **\n**  R6  ** NOT USED **                                               **\n**  R7  WORK REGISTER                                                **\n**  R8  WORK REGISTER                                                **\n**  R9  WORK REGISTER                                                **\n**  R10 MONTH TABLE POINTER                                          **\n**  R11 ** NOT USED **                                               **\n**  R12 BASE REGISTER                                                **\n**  R13 STANDARD IBM LINKAGE                                         **\n**  R14 STANDARD IBM LINKAGE                                         **\n**  R15 STANDARD IBM LINKAGE                                         **\n**                                                                   **\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\n***********************************************************************\n         L     R2,0(R1)                ADDRESS OF PASSED PARMLIST\n         CLC   0(2,R2),=H'00'          PARM PRESENT\n         BE    OPEN                    NO - OPEN FILES\n         L     R3,0(R2)\n         MVI   BTCHFLAG,C'P'\n         MVC   INCARD(10),0(R3)        MOVE PARM TO INCARD\n         L     R3,4(R2)                GET STORAGE TO USE\n         ST    R3,FULLWORD             SAVE IT\n         B     START\nWTOR     EQU   *\n         MVC   REPLYFLD,=X'40404040404040404040' CLEAR REPLY FIELD\n         WTOR  'PLEASE ENTER A DATE IN THE FORMAT DD/MM/YYYY OR END',  X\n               REPLYFLD,10,ECBFLD\n         WAIT  ECB=ECBFLD              WAIT FOR OPERATORS REPLY\n         NI    ECBFLD,X'00'            CLEAR ECBFLD AFTER REPLY\n         LA    R2,REPLYFLD             R2 = ADDRESS OF REPLY\n         OC    0(10,R2),=C'          '  CHANGE X'00'S TO X'40'\n         CLC   0(3,R2),=C'END'         WAS END TYPED ?\n         BNE   KEEPON                  NO - KEEP ON\n         WTO   'END WAS TYPED ------ WHATDAY COMPLETE',ROUTCDE=(2)\n         B     EXIT\nKEEPON   MVI   BTCHFLAG,C'C'           SET BATCH FLAG OFF\n         LA    R5,INCARD               MOVE REPLY TO INCARD\n         MVC   0(10,R5),REPLYFLD       *\n         B     START                   BRANCH TO START DATE PROCESSING\nOPEN     OPEN  (INFILE,,OUTFILE,(OUTPUT))\n         LTR   R15,R15                 OPEN OK?\n         BNZ   WTOR                    NO - ASSUME MASTER CONSOLE\n         MVI   BTCHFLAG,C'B'           SET BATCH FLAG\nGETLOOP  GET   INFILE,INCARD           READ A RECORD\n         LA    R2,OUTCARD              * CLEAR OUTPUT AREA\n         MVI   0(R2),C' '              *\n         MVC   1(132,R2),0(R2)         *\nSTART    LA    R2,INCARD               ADDRESS OF INCARD IN R2\n         CLC   MM,=C'12'               IS MONTH VALUE > 12 ?\n         BH    ERROR                   YES - ERROR\n         CLC   DD,=C'01'               IS DAY VALUE < 1 ?\n         BL    ERROR                   YES - ERROR\n         LA    R7,YY\n         CLI   0(R7),C' '              CHECK YEAR FORMAT\n         BL    ERROR\n         CLI   1(R7),C' '\n         BL    ERROR\n         CLI   2(R7),C' '\n         BL    ERROR\n         CLI   3(R7),C' '\n         BL    ERROR                   YES - ERROR\n         MVC   WORK,MM                 MOVE MONTH TO WORK\n         LA    R7,MONTAB               LOAD R7 WITH START OF MONTAB\n         LA    R8,4                    SET INCR VALUE AT 4 BYTES\n         LA    R9,ENDTAB               LOAD R9 WITH END OF SCAN\nLOOP1    L     R10,0(R7)               L REG 10 WITH ADDRESS OF CARD\n         CLC   0(2,R10),WORK           DOES THE MONTH MATCH ?\n         BE    FOUND                   YES - PROCESS\n         BXLE  R7,R8,LOOP1             LOOP BACK IF NOT END OF TABLE\nERROR    LA    R2,INCARD               LOAD DATE SUPPLIED INTO R2\n         MVC   MESSD,0(R2)             MOVE DATE TO MESSAGE\n         LA    R2,MESS                 LOAD MESSAGE INTO R2\n         MVC   0(5,R2),=C'**** '       MOVE IN ASTERISKS\n         MVC   16(24,R2),=C' IS AN INVALID DATE     '\n         CLI   BTCHFLAG,C'B'           IS IT A BATCH RUN ?\n         BE    MOVEMESS                YES - CARD OUTPUT\n         CLI   BTCHFLAG,C'C'           IS IT A CONSOLE INPUT\n         BE    MOVEREPL                YES - TERMINAL REPLY\n         LA    R15,16                  NO - SET DUFF COND CODE\n         B     EXIT\nFOUND    EQU   *\n         MVC   WORK,2(R10)             MOVE NUMBER OF DAYS INTO WORK\n         CLC   DD,WORK                 IS DAYS SUPPLIED > DAYS IN MONTH\n         BH    ERROR                   YES - ERROR\n         MVC   YEARWORK,YY+2           MOVE YEAR GIVEN TO WORK AREA\n         PACK  DOUBLE,YEARWORK         PACK YEARWORK INTO A DOUBLE WORD\n         CVB   R3,DOUBLE               CONVERT YEAR WORK TO BINARY\n         SR    R2,R2                   CLEAR R2 FOR REMAINDER\n         LA    R5,4                    LOAD DIVISOR INTO R5\n         DR    R2,R5                   DIVIDE BY 4\n         LTR   R2,R2                   IS THERE A REMAINDER ?\n         BZ    LEAPYEAR                NO - IT IS A LEAP YEAR\n         CLC   MM,=C'02'               IS IT FEBRUARY ?\n         BNE   FLAGOFF                 NO - SKIP NEXT TEST\n         CLC   DD,=C'28'               IS THE DAYS SUPPLIED > 28 ?\n         BH    ERROR                   YES - ERROR\nFLAGOFF  MVI   LEAPFLAG,C'N'           SET LEAP YEAR FLAG OFF\n         B     CONT                    CONTINUE\nLEAPYEAR MVI   LEAPFLAG,C'Y'           SET LEAP YEAR FLAG\nCONT     PACK  DOUBLE,YEARWORK         PACK YEARWORK INTO A DOUBLE WORD\n         CVB   R3,DOUBLE               CONVERT YEAR WORK TO BINARY\n         LA    R5,12                   LOAD DIVISOR INTO R5\n         SR    R2,R2                   CLEAR REG 2\n         DR    R2,R5                   DIVIDE BY 12\n         LR    R9,R3                   PUT QUOTIENT INTO R9\n         LR    R8,R2                   PUT REMAINDER INTO R8\n         LR    R3,R2                   PUT REMAINDER INTO R3 FOR DIVIDE\n         SR    R2,R2                   CLEAR REG 2\n         LA    R5,4                    LOAD DIVISOR (4)\n         DR    R2,R5                   DIVIDE BY 4\n         AR    R3,R8              AND LAST TIMES REMAINDER TO QUOTIENT\n         AR    R3,R9              NOW ADD LAST TIMES QUOTINET TO TOTAL\n         LA    R5,7                    LOAD DIVISOR (7)\n         SR    R2,R2                   CLEAR REG 2\n         DR    R2,R5                   DIVIDE BY 7\n         LR    R9,R2                   PUT REMAINDER INTO R9\n         MVC   YEARWORK,4(R10)         MOVE WEIGHT INTO YEARWORK\n         PACK  DOUBLE,YEARWORK         PACK IT\n         CVB   R3,DOUBLE               AND CONVERT TO BINARY FOR ADD\n         AR    R9,R3                   ADD WEIGHT\n         LR    R3,R9                   GET READY FOR DIVIDE BY 7 (R5)\n         SR    R2,R2                   CLEAR REG 2\n         DR    R2,R5                   OK DIVIDE IT BY 7\n         MVC   YEARWORK,DD             MOVE DAY INTO YEARWORK\n         PACK  DOUBLE,YEARWORK         PACK IT\n         CVB   R9,DOUBLE               AND CONVERT READY FOR EQUATE\n         AR    R9,R2                   ADD DAY TO REMAINDER\n         LR    R3,R9                   PUT ANSWER IN R3\n         SR    R2,R2                   CLEAR REG 2\n         DR    R2,R5                   DIVIDE BY 7 AGAIN\n         CLI   LEAPFLAG,C'Y'           IS IT A LEAP YEAR ?\n         BNE   GETIT                   NO - GO PUT CARD OUT\n         CLC   MM,=C'02'               IS MONTH < OR = TO FEB (02) ?\n         BH    GETIT                   NO - GO PUT CARD OUT\n         LTR   R2,R2                   IS DAY POINTER ZERO /\n         BNE   DAYOFF                  NO - SUBTRACT A DAY\n         LA    R2,6                    FORCE IN LAST DAY OF WEEK\n         B     GETIT                   NOW GO PUT CARD OUT\nDAYOFF   BCTR  R2,0                    TAKE ONE DAY OFF\nGETIT    SLL   R2,2                    MULTIPLY BY 4\n         L     R8,DAYTAB(R2)           MOVE ADDRESS INTO REG 8\n         LA    R3,INCARD               PUT ADDRESS OF INPUT INTO R3\n         MVC   MESSD,0(R3)             MOVE DATE PROVIDED INTO MESSAGE\n         MVC   MESS2,0(R8)             MOVE DAY INTO MESSAGE\n         MVC   TMESS,=C' THE '         MOVE IN ' THE '\n         MVC   CMESS,=C'          '    MOVE IN BLANKS\n         MVC   IMESS,=C' IS A '        MOVE IN IS A\n         CLI   BTCHFLAG,C'B'           IS IT A BATCH RUN ?\n         BE    MOVEMESS                YES - GO TO MOVE MESSAGE\n         CLI   BTCHFLAG,C'C'           IS IT A CONSOLE RUN ?\n         BE    MOVEREPL                YES - GO TO MOVE MESSAGE\n         L     13,PRGMSAVE+4           SAVE AERA IN R13\n         LA    R2,MESS2                PUT ADDRESS OF MESSAGE INTO R1\n         L     R3,FULLWORD             FIND WHERE TO PUT IT\n         MVC   0(9,R3),0(R2)           MOVE IT IN\n         B     EXIT                    GET OUT\nMOVEREPL MVC   WTO+8(40),MESS          MOVE MESSAGE INTO WTO\nWTO      WTO   '                                        ',             X\n               ROUTCDE=(2),DESC=(2)\n         B     WTOR                    NEXT\nMOVEMESS MVC   OUTCARD,MESS            MOVE MESSAGE TO OUTPUT\n         PUT   OUTFILE,OUTCARD         PRINT IT\n         B     GETLOOP                 ** LOOP BACK FOR NEXT LINE  **\nENDOFIN  CLOSE (INFILE,,OUTFILE)       CLOSE FILES\nSET0     LA    R15,0                   SET COND CODE 0\nEXIT     EOJ                           END PROGRAM\n***********************************************************************\n**                AREAS TO BE USED AND DCBS\n***********************************************************************\nFULLWORD DS    F\nOUTCARD  DS    CL133\nMESS     DS    0CL40\nTMESS    DS    C' THE '\nMESSD    DS    CL10\nIMESS    DS    C' IS A '\nMESS2    DS    CL9\nCMESS    DC    CL10' '\nFILLER   DC    CL93' '\nINCARD   DS    0CL80\nDD       DS    CL2\n         DS    CL1' '\nMM       DS    CL2\n         DS    CL1' '\nYY       DS    CL4\n         DS    CL70\nWORK     DS    CL2\nYEARWORK DS    CL2\nDOUBLE   DS    D\nBTCHFLAG DS    CL1\nLEAPFLAG DS    CL1\nDAYTAB   DS    0F                      SEVEN FULLWORDS\n         DC    A(DAYCARD1)\n         DC    A(DAYCARD2)\n         DC    A(DAYCARD3)\n         DC    A(DAYCARD4)\n         DC    A(DAYCARD5)\n         DC    A(DAYCARD6)\n         DC    A(DAYCARD7)\nDAYCARD1 DC    C'SATURDAY '\nDAYCARD2 DC    C'SUNDAY   '\nDAYCARD3 DC    C'MONDAY   '\nDAYCARD4 DC    C'TUESDAY  '\nDAYCARD5 DC    C'WEDNESDAY'\nDAYCARD6 DC    C'THURSDAY '\nDAYCARD7 DC    C'FRIDAY   '\n*****                 TABLE OF DAYS IN MONTHS\nMONTAB   DS    0F                      SEVEN FULLWORDS\n         DC    A(DAYSJAN)\n         DC    A(DAYSFEB)\n         DC    A(DAYSMAR)\n         DC    A(DAYSAPR)\n         DC    A(DAYSMAY)\n         DC    A(DAYSJUN)\n         DC    A(DAYSJUL)\n         DC    A(DAYSAUG)\n         DC    A(DAYSSEP)\n         DC    A(DAYSOCT)\n         DC    A(DAYSNOV)\nENDTAB   DC    A(DAYSDEC)\nDAYSJAN  DC    CL6'013101'\nDAYSFEB  DC    CL6'022904'\nDAYSMAR  DC    CL6'033104'\nDAYSAPR  DC    CL6'043000'\nDAYSMAY  DC    CL6'053102'\nDAYSJUN  DC    CL6'063005'\nDAYSJUL  DC    CL6'073100'\nDAYSAUG  DC    CL6'083103'\nDAYSSEP  DC    CL6'093006'\nDAYSOCT  DC    CL6'103101'\nDAYSNOV  DC    CL6'113004'\nDAYSDEC  DC    CL6'123106'\nINFILE   DCB   DDNAME=INPUT,EODAD=ENDOFIN,DSORG=PS,MACRF=(GM),         X\n               LRECL=80,BLKSIZE=6400,RECFM=FB\nOUTFILE  DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=(PM),LRECL=133,            X\n               BLKSIZE=133,RECFM=FBA\nREPLYFLD DS    CL10\nECBFLD   DC    F'0'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07EOJ": {"ttr": 9219, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x009\\x009\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "UKGUIDE"}, "text": "         MACRO\n&N       EOJ &C=0\n         LCLC  &A,&B\n         GBLC  &RENTGBL\n* ******************************************************************* *\n*                                                                     *\n*                          E O J                                      *\n*                                                                     *\n*        GENERATE STANDARD RETURN LINKAGE AND RETURN CODE.            *\n*                                                                     *\n         AIF   ('&N' EQ '').GO\n&N       DS    0H\n.GO      AIF   ('&C'(1,1) EQ '(').REGCODE\n         LA    15,&C                PUT CONDITION CODE INTO REG 15    *\n         AGO   .RESTORE\n.REGCODE ANOP\n         AIF   ('&C'(3,1) EQ ')').MOVE1\n         AIF   ('&C'(4,1) EQ ')').MOVE2\n         AIF   ('&C'(5,1) EQ ')').MOVE3\n.MERROR  ANOP\n         MNOTE 16,'*** INVALID REGISTER PASSED AS RETURN CODE REGISTER'\n         MEXIT\n.MOVE3   ANOP\n&A       SETC  '&C'(2,3)\n         AGO   .CONT\n.MOVE2   ANOP\n&A       SETC  '&C'(2,2)\n         AGO   .CONT\n.MOVE1   ANOP\n&A       SETC  '&C'(2,1)\n.CONT    ANOP\n         AIF   ('&A'(1,1) EQ 'R').RVALUE\n         AIF   ('&A' GT '15').MERROR\n         AGO   .LOADIT\n.RVALUE  ANOP\n&B       SETC  '&A'(2,2)\n         AIF   ('&B' GT '15').MERROR\n.LOADIT  ANOP\n         LR    15,&A               LOAD REGISTER 15 WITH CODE        *\n.RESTORE ANOP\n         AIF   ('&RENTGBL' EQ 'Y').YESRENT\n         L     13,PRGMSAVE+4       RELOAD HIS SAVE AREA ADDRESS       *\n         L     14,12(13)           RELOAD REGISTER 14                 *\n         LM    0,12,20(13)         RELOAD REGISTER 0 TO 12            *\n         BR    14                  BRANCH ON REGISTER 14              *\n         AGO   .EXIT\n.YESRENT ANOP\n         LR    1,13                PUT ADDRESS OF GOTTEN INTO REG 1   *\n         L     13,4(1)             PUT HIS SAVE AREA ADDRESS IN REG 13*\n         FREEMAIN R,LV=72,A=(1)    FREE STORAGE                       *\n         L     14,12(13)           RELOAD REGISTER 14                 *\n         LM    0,12,20(13)         RELOAD REGISTER 0 TO 12            *\n         BR    14                  RETURN TO OS                       *\n.EXIT    ANOP                                                         *\n*                                                                K.F. *\n* ******************************************************************* *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07PARSE": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x02\\xdc\\x02\\xdc\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 732, "newlines": 732, "modlines": 0, "user": "UKGUIDE"}, "text": "SMFPARSE TITLE 'VALIDATE SMFSCAN SYSIN CONTROL CARDS'\nSMFPARSE BEGIN R11\n         REGEQS\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\nPACKDIG  EQU   X'0F'\n         OPEN  (SYSPRINT,OUTPUT)    OPEN SYSPRINT\n         LTR   R15,R15              OPEN OK ?\n         BE    GO                   YES - CONTINUE\n         WTP   'SMFSCAN - SYSPRINT DD STATEMENT MISSING'\n         ABEND 1\nGO       MVC   FLAGS,=C'NNNNNNNNNNSNNNNNN'   SET UP DEFAULTS\n         LA    R1,1\n         ST    R1,PAGECNT\n         LINK  EP=SMFSCANT,PARAM=PARAM\n         LA    R1,9\n         ST    R1,LINECNT\n         XR    R2,R2\n         ST    R2,CONDCODE\n         OPEN  SYSIN\n         LTR   R15,R15      OPEN OK ?\n         BE    GO2          YES - CONTINUE\n         MVC   PRINT(64),NOSYSIN\n         BAL   R12,PRINTER\n         B     ENDSYSIN\nGO2      MVI   IGNORE,C'N'       SET IGNORE INPUT FLAG OFF\nSYSINLP  GET   SYSIN,INCARD        GET RECORD\n         CLI   IGNORE,C'Y'      IGNORE IT ?\n         BNE   SKIPIT\nKEVIN    NOP   SKIPIT\n         MVC   PRINT(98),IGNMESS\n         BAL   R12,PRINTER\n         OI    KEVIN+1,X'F0'       SET SWITCH\nSKIPIT   MVC   OUTCARD,INCARD      MOVE TO PRINT LINE\n         BAL   R12,PRINTER         PRINT IT\n         CLI   IGNORE,C'N'         IGNORE IT\n         BNE   SYSINLP             LOOP TILL END OF SYSIN\n         LA    R4,INCARD           START OF RECORD\nS#LOOP   CLI   0(R4),X'FF'         END OF SYSIN CARD ?\n         BE    SYSINLP             YES - GET NEXT\n         CLI   0(R4),C' '          BLANK ?\n         BNE   TESTSYS             NO - TEST IT\n         LA    R4,1(R4)            NEXT - CHARACTER\n         B     S#LOOP\nTESTSYS  CLC   0(7,R4),=C'SUMMARY' DOES IT SAY SUMMARY ?\n         BNE   S#TRY1              NO TEST NEXT ONE\n         MVI   SUMFLAG,C'Y'        SET SUMMARY FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,7(R4)            SKIP IT\n         CLI   0(R4),C','          TEST FOR COMMA\n         BNE   S#FINISH            THAT ALL FOLKS\n         MVI   CONTFLAG,C'Y'       SET CONTINUATION FLAG ON\n         LA    R4,1(R4)            SKIP COMMA\n         B     S#LOOP\nS#TRY1   CLC   0(6,R4),=C'CLASS='  CLASS = ?\n         BNE   S#TRY2\n         MVI   CLASFLAG,C'Y'       SET CLASS FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,6(R4)            SKIP CLASS=\n         LA    R5,9          <---- MAX CLASSES = 8\n         LA    R7,CLASSES          SET POINTER TO CLASSES FIELD\n         MVC   0(8,R7),=C'        ' CLEAR CLASSES\nS#COMP1  CLI   0(R4),C' '          BLANK ?\n         BE    ENDCLASS            YES - ASSUME END OF CLASS\n         CLI   0(R4),C','          COMMA ?\n         BE    ENDCLASS            YES - ASSUME END OF CLASS\n         CLI   0(R4),X'FF'         END OF SYSIN ?\n         BE    ENDCLASS            YES - ASSUME END OF CLASS\nKEVIN2   NOP   MOVEEM\n         OI    KEVIN2+1,X'F0'\n         CLI   0(R4),C'\u00ac'          NOT SIGN ?\n         BNE   MOVEEM              NO - MOVE THEM\n         MVI   NOTCFLAG,C'Y'       SET FLAG\n         LA    R4,1(R4)\n         B     S#COMP1\nMOVEEM   MVC   0(1,R7),0(R4)       SAVE CLASS\n         LA    R4,1(R4)            UP SYSIN\n         LA    R7,1(R7)            UP CLASS FIELD\n         BCT   R5,S#COMP1\n         MVC   PRINT+2(38),=C'** ERROR ** TOO MANY CLASSES SPECIFIED'\n         BAL   R12,PRINTER         PRINT IT\n         B     S#PRTERR\nENDCLASS EQU   *\n         C     R5,=F'7'            DID WE HAVE ANY\n         BE    S#CLFLAG            YES - OK THEN\n         CLI   0(R4),C','          COMMA ?\n         BNE   S#FINISH            NO - THATS ALL FOLKS\n         MVI   CONTFLAG,C'Y'       SET CONTINUATION FLAG ON\n         LA    R4,1(R4)            SKIP COMMA\n         B     S#LOOP\nS#CLFLAG MVC   PRINT+2(32),=C'** ERROR ** NO CLASSES SPECIFIED'\n         BAL   R12,PRINTER         PRINT IT\nS#PRTERR MVC   PRINT(80),SKIPERR   MOVE ERROR MESSAGE\n         BAL   R12,PRINTER         PRINT IT\n         LA    R2,16               SET COND CODE\n         ST    R2,CONDCODE         SAVE COND CODE\n         MVI   IGNORE,C'Y'         SET IGNORE FLAG\n         OI    KEVIN+1,X'F0'       SET SWITCH\n         B     SYSINLP\nS#TRY2   CLC   0(4,R4),=C'JOB='   JOB= ?\n         BE    S#JOB\n         CLC   0(5,R4),=C'JOBS='  JOBS= ?\n         BNE   S#TRY3\n         LA    R4,1(R4)           SKIP 1\n         MVC   PRINT+34(1),=C'S'  MOVE IN PLURAL\nS#JOB    LA    R4,4(R4)            SKIP JOB=\n         MVC   PRINT+30(4),=C' JOB'\n         MVI   JOBFLAG,C'Y'        SET JOB FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R7,JOBS             SET POINTER TO JOBS FIELD\n         MVI   0(R7),C' '          CLEAR JOBS\n         MVC   1(39,R7),0(R7)      LENGTH = (NO OF JOBS X 10) - 1\n         BAL   R9,PARSE            GO PARSE INPUT\n         B     S#LOOP\nS#TRY3   CLC   0(8,R4),=C'PROGRAM=' PROGRAM= ?\n         BE    S#PROG\n         CLC   0(9,R4),=C'PROGRAMS=' PROGRAMS= ?\n         BNE   S#TRY4\n         MVC   PRINT+37(1),=C'S'   MOVE IN S\n         LA    R4,1(R4)\nS#PROG   LA    R4,8(R4)            SKIP PROGRAM=\n         MVI   PROGFLAG,C'Y'       SET PROGRAM FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R7,PROGS            SET POINTER TO PROGS FIELD\n         MVC   PRINT+30(7),=C'PROGRAM'\n         MVI   0(R7),C' '          CLEAR JOBS\n         MVC   1(39,R7),0(R7)      LENGTH = (NO OF JOBS X 10) - 1\n         BAL   R9,PARSE            GO PARSE INPUT\n         B     S#LOOP\nS#TRY4   EQU   *\n         CLC   0(6,R4),=C'AFTER='  IS IT THE AFTER PARAMETER ?\n         BNE   S#TRY5\n         MVI   AFTRFLAG,C'Y'       SET AFTER FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,6(R4)            SKIP AFTER=\n         LA    R7,ATIME            POINT AT AFTER TIME\n         MVC   PRINT+30(8),=C' AFTER  '\n         MVI   0(R7),C' '          CLEAR AFTER FIELD\n         MVC   1(4,R7),0(R7)       LENGTH = (NO OF JOBS X 10) - 1\n         BAL   R9,TPARSE           GO PARSE INPUT\n         B     S#LOOP\nS#TRY5   EQU   *\n         CLC   0(7,R4),=C'BEFORE=' IS IT THE BEFORE PARAMETER ?\n         BNE   S#TRY6\n         MVI   BFORFLAG,C'Y'       SET BEFORE FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,7(R4)            SKIP BEFORE=\n         LA    R7,BTIME            POINT AT BEFORE TIME\n         MVC   PRINT+30(8),=C' BEFORE '\n         MVI   0(R7),C' '          CLEAR BEFORE FIELD\n         MVC   1(4,R7),0(R7)       LENGTH = (NO OF JOBS X 10) - 1\n         BAL   R9,TPARSE           GO PARSE INPUT\n         B     S#LOOP\nS#TRY6   EQU   *\n         CLC   0(4,R4),=C'PRTY'    IS IT THE PRTY PARAMETER ?\n         BNE   S#TRY7\n         MVI   PRTYFLAG,C'Y'       SET PRIORITY FLAG\n         MVI   NOPRFLAG,C'N'       SET NO PRIORITY FLAG OFF\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,4(R4)            SKIP PRTY\n         LA    R7,PSAVE            POINT AT PRTY SAVE AREA\n         MVC   PRINT+30(8),=C'PRIORITY'\n         MVI   0(R7),C' '          CLEAR BEFORE FIELD\n         MVC   1(2,R7),0(R7)       LENGTH = (NO OF JOBS X 10) - 1\n         MVI   DOTFLAG,C'Y'        SET A FLAG FOR FIRST TIME\n         MVI   STARFLAG,C'N'\nR#LOOP   CLI   0(R4),C' '          SPACE ?\n         BE    R#ENDSYS            ALL PRIORITY JOBS PLEASE\n         CLI   0(R4),X'FF'         END OF INPUT\n         BNE   R#COMMA             GO TRY COMMA\nR#ENDSYS CLI   DOTFLAG,C'Y'        FIRST TIME THRU\n         BE    P#ERR               YES - ERROR\n         B     S#FINISH            ELSE FINISH\nR#COMMA  CLI   0(R4),C','          COMMA\n         BNE   R#TRY1              TRY >\n         CLI   DOTFLAG,C'Y'        FIRST TIME ?\n         BE    P#ERR               YES - ERROR\n         B     R#EXIT              NO - WE HAVE FINISHED THEN\nR#TRY1   CLI   0(R4),C'>'          > ?\n         BE    R#SPEC              YES - GO TO SPECIAL CHAR PROCESS\n         CLI   0(R4),C'<'          < ?\n         BE    R#SPEC              YES - GO TO SPECIAL CHAR PROCESS\n         CLI   0(R4),C'='          = ?\n         BE    R#SPEC              YES - GO TO SPECIAL CHAR PROCESS\n         CLI   0(R4),C'0'          *\n         BL    P#ERR               * CHECK FOR NUMERICS\n         CLI   0(R4),C'9'          * IF NOT NUMERIC THEN GO TO ERROR\n         BH    P#ERR               *\n         CLI   DOTFLAG,C'Y'        IS THIS THE FIRST RUN THROUGH ?\n         BNE   R#LABEL             NO - SKIP FLAG SET\n         MVI   DOTFLAG,C'1'        SET FLAG FOR SECOND TIME THRU\n         B     R#UP                SKIP CHARACTER\nR#LABEL  CLI   DOTFLAG,C'1'        IS THIS THE SECOND TIME THRU ?\n         BNE   P#ERR               NO - ERROR\n         MVI   DOTFLAG,C'N'        SET FLAG OFF\n         BCTR  R4,0\n         CLI   0(R4),C'1'\n         BH    P#ERR\n         LA    R4,1(R4)\nR#UP     MVC   0(1,R7),0(R4)\n         LA    R4,1(R4)\n         LA    R7,1(R7)\n         B     R#LOOP\nR#SPEC   CLI   STARFLAG,C'Y'\n         BE    P#ERR\n         MVI   STARFLAG,C'Y'\n         B     R#UP\nR#EXIT   LA    R4,1(R4)              SKIP COMMA\n         MVI   CONTFLAG,C'Y'         SET CONTINUATION FLAG ON\n         B     S#LOOP\nS#TRY7   EQU   *\n         CLC   0(6,R4),=C'NOPRTY'\n         BNE   S#TRY8\n         MVI   PRTYFLAG,C'N'       SET PRIORITY FLAG OFF\n         MVI   NOPRFLAG,C'Y'       SET NO PRIORITY FLAG ON\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,6(R4)\n         CLI   0(R4),C' '\n         BE    S#FINISH\n         CLI   0(R4),X'FF'\n         BE    S#FINISH\n         CLI   0(R4),C','\n         BNE   P#ERR\n         LA    R4,1(R4)\n         MVI   CONTFLAG,C'Y'      SET CONTINUATION FLAG ON\n         B     S#LOOP\nS#TRY8   CLC   0(7,R4),=C'ELAPSED' IS IT THE ELAPSED PARAMETER ?\n         BNE   S#TRY9\n         MVI   ELAPFLAG,C'Y'       SET ELAPSED FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,7(R4)            SKIP ELAPSED\n         LA    R7,ETIME            POINT AT ELAPSED TIME\n         MVC   PRINT+30(8),=C' ELAPSED'\n         MVI   0(R7),C' '          CLEAR ELAPSED FIELD\n         MVC   1(5,R7),0(R7)       LENGTH = (NO OF JOBS X 10) - 1\nE#PROC   MVI   DOTFLAG,C'Y'        SET A FLAG FOR FIRST TIME\n         MVI   STARFLAG,C'N'\n         CLI   0(R4),C'<'          < SIGN\n         BE    E#PARSE             YES GO PARSE\n         CLI   0(R4),C'>'          > SIGN\n         BE    E#PARSE             YES GO PARSE\n         CLI   0(R4),C'='          = SIGN\n         BNE   P#ERR               NO - GO DO THE ERROR\nE#PARSE  MVC   0(1,R7),0(R4)       MOVE IN CHARACTER\n         LA    R4,1(R4)            UP R4 TO SKIP\n         LA    R7,1(R7)            UP R7 TO SKIP\n         BAL   R9,TPARSE           GO PARSE INPUT\n         B     S#LOOP\nS#TRY9   CLC   0(3,R4),=C'CPU'     IS IT THE CPU PARAMETER ?\n         BNE   S#TRY10\n         MVI   CPUTFLAG,C'Y'       SET CPU FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         LA    R4,3(R4)            SKIP ELAPSED\n         LA    R7,CTIME            POINT AT ELAPSED TIME\n         MVC   PRINT+30(8),=C'  CPU   '\n         MVI   0(R7),C' '          CLEAR ELAPSED FIELD\n         MVC   1(5,R7),0(R7)       LENGTH = (NO OF JOBS X 10) - 1\n         B     E#PROC\nS#TRY10  CLC   0(7,R4),=C'FLUSHED' IS IT THE FLUSHED PARAMETER ?\n         BNE   S#TRY11             NO - TRY JDATE= ?\n         MVI   FLUSFLAG,C'Y'       SET THE FLUSHED FLAG ON\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         MVI   CPUTFLAG,C'N'       SET CPU\n         MVI   ELAPFLAG,C'N'         AND ELAPSED TIME FLAGS OFF\n         LA    R4,7(R4)            SKIP FLUSHED\n         B     S#LOOP\nS#TRY11  CLC   0(6,R4),=C'JDATE='  IS IT THE JDATE = PARAMETER ?\n         BNE   S#TRY12             NO - GO TO TRY DATE\n         CLI   DATEFLAG,C'Y'       IS THE DATE FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         CLI   DAYFLAG,C'Y'        IS THE DAY FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         MVI   JDTEFLAG,C'Y'       SET DATE FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         MVC   PRINT+31(6),=C'JDATE='\n         LA    R4,6(R4)            SKIP JDATE=\nRETEST   CLI   0(R4),C'0'          *\n         BL    P#ERR               * VALIDATE CHARACTERS\n         CLI   0(R4),C'9'          * IF INVALID - ERROR\n         BH    P#ERR               *\nSWITCH   NOP   NEXT        <====   DO NOT SKIP FIRST TIME THROUGH\n         OI    SWITCH+1,X'F0'      SET SWITCH\n         LA    R4,1(R4)            SKIP FIRST ONE\n         B     RETEST\nNEXT     CLI   1(R4),C'0'          *\n         BL    P#ERR               * VALIDATE CHARACTERS\n         CLI   1(R4),C'3'          * IF INVALID - ERROR\n         BH    P#ERR               *\n         CLI   2(R4),C'0'          *\n         BL    P#ERR               * VALIDATE CHARACTERS\n         CLI   2(R4),C'9'          * IF INVALID - ERROR\n         BH    P#ERR               *\n         CLI   3(R4),C'0'          *\n         BL    P#ERR               * VALIDATE CHARACTERS\n         CLI   3(R4),C'9'          * IF INVALID - ERROR\n         BH    P#ERR               *\n         CLC   1(3,R4),=C'000'     CHECK FOR 000\n         BE    P#ERR               ERROR IF EQUAL\n         CLC   1(3,R4),=C'366'     CHECK FOR 366\n         BH    P#ERR               ERROR IF HIGHER\n         BCTR  R4,0                SUBTRACT 1 FOR PACK\n         PACK  PJDATE,0(5,R4)      PACK THE DATE FOR COMPARE\n         LA    R4,5(R4)            SKIP DATE PORTION\n         B     S#LOOP\nS#TRY12  CLC   0(5,R4),=C'DATE='   IS IT THE DATE = PARAMETER ?\n         BNE   S#TRY13             NO - GO TO TRY DAY\n         CLI   JDTEFLAG,C'Y'       IS THE JDATE FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         CLI   DAYFLAG,C'Y'        IS THE DAY FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         MVI   DATEFLAG,C'Y'       SET DATE FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         MVC   PRINT+31(5),=C'DATE='\n         LA    R4,5(R4)            SKIP DATE=\n         CLC   0(2,R4),=C'01'      *\n         BL    P#ERR               *  VALIDATE DAY\n         CLC   0(2,R4),=C'31'      *\n         BH    P#ERR               ****\n         CLC   3(2,R4),=C'01'      *\n         BL    P#ERR               * VALIDATE MONTH\n         CLC   3(2,R4),=C'12'      *\n         BH    P#ERR               ****\n         CLC   6(2,R4),=C'01'      *\n         BL    P#ERR               * VALIDATE YEAR\n         CLC   6(2,R4),=C'99'      *\n         BH    P#ERR               ****\n         CLI   2(R4),C'/'          VALIDATE SEPERATORS\n         BNE   P#ERR\n         CLI   5(R4),C'/'          VALIDATE SEPERATORS\n         BNE   P#ERR\n         MVC   DATE,0(R4)          MOVE IN DATE\n         LA    R4,8(R4)            SKIP DATE\n         B     S#LOOP\nS#TRY13  CLC   0(4,R4),=C'DAY='    IS IT THE DAY= PARAMETER ?\n         BNE   S#NK                NO - ERROR\n         CLI   JDTEFLAG,C'Y'       IS THE JDATE FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         CLI   DATEFLAG,C'Y'       IS THE DATE FLAG SET ?\n         BE    P#ERR               YES - ERROR\n         MVI   DAYFLAG,C'Y'        SET DAY FLAG\n         MVI   CONTFLAG,C'N'       SET CONTINUATION FLAG OFF\n         MVC   PRINT+32(4),=C'DAY='\n         LA    R4,4(R4)            SKIP DAY=\n         CLC   0(3,R4),=C'SUN'     SUNDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'MON'     MONDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'TUE'     TUESDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'WED'     WEDNESDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'THU'     THURSDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'FRI'     FRIDAY ?\n         BE    UPDAY\n         CLC   0(3,R4),=C'SAT'     SATURDAY ?\n         BNE   P#ERR\nUPDAY    MVC   DAY,0(R4)           SAVE DAY\n         LA    R4,3(R4)            SKIP DAY\n         B     S#LOOP\nS#NK     MVC   PRINT+2(37),=C'** ERROR ** UNKNOWN KEYWORD SPECIFIED'\n         MVC   PRINT+40(6),0(R4)   MOVE IN SOME INFO\n         BAL   R12,PRINTER\n         B     S#PRTERR\nS#FINISH MVI   IGNORE,C'Y'         SET IGNORE FLAG ON\n         B     SYSINLP\nENDSYSIN CLI   CONTFLAG,C'Y'       CONTINUATION FLAG ON ?\n         BNE   NOCONT\n         MVC   PRINT+2(37),=C'** ERROR ** EXPECTED CONTINUATION NOT'\n         MVC   PRINT+40(5),=C'FOUND'\n         BAL   R12,PRINTER\n         LA    R15,16\n         ST    R15,CONDCODE\nNOCONT   L     R15,CONDCODE\n         LTR   R15,R15             DID WE WORK OK\n         BNZ   EXIT\n         LINK  EP=SMFSCANR,PARAM=PARAM\nEXIT     CLOSE SYSIN\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15)\n         EJECT\n***********************************************************************\n*** TPARSE SUBROUTINE                                               ***\n***********************************************************************\n*** PURPOSE : TO VERIFY CORRECT INPUT FOR AFTER= AND BEFORE=        ***\n*** EXIT    : BR 9                                                  ***\n*** CALLS   : PRINTER VIA R12                                       ***\n***********************************************************************\nTPARSE   MVI   DOTFLAG,C'N'        SET DOT FLAG OFF\n         MVI   STARFLAG,C'1'       SET STAR FLAG OFF\n         LA    R5,1                LENGTH COUNTER\nT#LOOP   C     R5,=F'7'            IS LENGTH > 5\n         BH    P#ERR               YES - GO DO THE ERROR\n         CLI   0(R4),C' '          IS IT A BLANK ?\n         BNE   T#ENDSYS            NO - TEST END OF SYSIN\nT#END    C     R5,=F'6'            IS THIS THE FIRST CHAR ?\n         BE    ENDSYSIN            NO - FINISH\n         B     P#ERR\nT#ENDSYS CLI   0(R4),X'FF'         END OF SYSIN ?\n         BE    T#END\n         CLI   0(R4),C','          COMMA ?\n         BNE   T#DOT               NO - TRY DOT\n         C     R5,=F'6'            FIRST TIME ?\n         BNE   P#ERR               YES - DO THE ERROR\n         B     T#EXIT\nT#DOT    CLI   0(R4),C'.'         IS IT A DOT\n         BNE   T#NUMB             NO - GO TEST FOR NUMBER\n         CLI   DOTFLAG,C'N'       ARE WE EXPECTING A DOT ?\n         BE    P#ERR              NO - GO DO THE ERROR\n         MVI   DOTFLAG,C'N'       SET THE DOT FLAG OFF\nT#UP     MVC   0(1,R7),0(R4)      MOVE IT\n         LA    R7,1(R7)           UP R7\n         LA    R4,1(R4)           UP R4\n         LA    R5,1(R5)           INCREMENT COUNT\n         B     T#LOOP\nT#NUMB   CLI   0(R4),C'0'         IS IT < 0\n         BL    P#ERR\n         CLI   0(R4),C'9'         IS IT > 0\n         BH    P#ERR\n         CLI   DOTFLAG,C'Y'       EXPECTING DOT ?\n         BE    P#ERR\n         CLI   STARFLAG,C'1'      FIRST DIGIT\n         BNE   T#SEC\n         MVI   STARFLAG,C'2'      SET FLAG\n         CLI   0(R4),C'2'         IS NUMBER > 2\n         BH    P#ERR\n         B     T#UP\nT#SEC    CLI   STARFLAG,C'2'      SECOND TIME ?\n         BNE   T#THIRD           NO\n         BCTR  R4,0                DOWN R4\n         CLI   0(R4),C'2'         IS IT A 2\n         BNE   T#OK\n         LA    R4,1(R4)\n         CLI   0(R4),C'3'\n         BH    P#ERR\n         B     T#OK2\nT#OK     LA    R4,1(R4)\nT#OK2    MVI   DOTFLAG,C'Y'       FLAG TO EXPECT DOT\n         MVI   STARFLAG,C'3'\n         B     T#UP\nT#THIRD  CLI   STARFLAG,C'3'      SECOND TIME ?\n         BNE   T#UP              NO\n         CLI   0(R4),C'5'\n         BH    P#ERR\n         MVI   STARFLAG,C'4'\n         B     T#UP\nT#EXIT   LA    R4,1(R4)            SKIP CHARACTER\n         MVI   CONTFLAG,C'Y'       SET CONTINUATION FLAG ON\n         BR    R9\n*** END OF TPARSE SUBROUTINE ******************************************\n         EJECT\n***********************************************************************\n*** PARSE SUBROUTINE                                                ***\n***********************************************************************\n*** PURPOSE : TO VERIFY CORRECT INPUT FOR JOB= AND PROGRAM=         ***\n*** EXIT    : BR 9                                                  ***\n*** CALLS   : PRINTER VIA R12                                       ***\n***********************************************************************\nPARSE    MVI   NOTFLAG,C'N'        SET NOT FLAG OFF\n         MVI   SLASFLAG,C'N'       SET SLASH FLAG OFF\n         MVI   STARFLAG,C'N'       SET ASTERIX FLAG OFF\n         MVI   OPENFLAG,C'N'       SET OPEN BRACKET FLAG OFF\n         MVI   CLOSFLAG,C'N'       SET CLOSE BRACKET FLAG OFF\n         MVI   ENDFLAG,C'N'        SET END FLAG OFF\n         LR    R8,R4               R8 CONTAINS START ADDRESS\n         LA    R5,0                LENGTH COUNTER\n         LA    R6,0                COMMA COUNTER\nP#COMP   CLI   0(R4),C'('          OPEN BRACKET ?\n         BNE   P#CLOSE             NO - TRY CLOSE BRACKET\n         CLI   OPENFLAG,C'Y'       HAVE WE HAD ONE BEFORE ?\n         BE    P#ERR               YES - GO DO THE ERROR\n         MVI   OPENFLAG,C'Y'       SET OPEN FLAG ON\nP#UP2    LA    R8,1(R8)            UP TO NEXT CHARACTER\nP#UP     LA    R4,1(R4)            AND R4\n         B     P#COMP\nP#UP3    LA    R5,1(R5)            AND INCREMENT COUNTER\n         B     P#UP                NOW GO UP R4\nP#CLOSE  CLI   0(R4),C')'          CLOSE BRACKET ?\n         BNE   P#BLANK             NO - TRY SPACE\n         CLI   OPENFLAG,C'Y'       HAVE WE HAD AN OPEN BRACKET ?\n         BNE   P#ERR               NO - GO DO THE ERROR\n         CLI   CLOSFLAG,C'Y'       HAVE WE HAD AN CLOSE BRACKET ?\n         BE    P#ERR               YES - GO DO THE ERROR\n         MVI   CLOSFLAG,C'Y'       SET CLOSE BRACKET FLAG\n         B     P#UP\nP#BLANK  CLI   0(R4),C' '          SPACE ?\n         BNE   P#ENDSYS            NO - TRY END OF SYSIN\nP#SET    MVI   ENDFLAG,C'Y'        SET SWITCH\n         B     P#PROC              AND BRANCH TO PROCESS DATA\nP#ENDSYS CLI   0(R4),X'FF'         END OF SYSIN CARD ?\n         BE    P#SET               YES - SET FLAGS\nP#COMMA  CLI   0(R4),C','          IS IT A COMMA ?\n         BNE   P#NOT               NO - TRY NOT SIGN (\u00ac)\n         CLI   OPENFLAG,C'Y'       HAVE WE HAD AN OPEN BRACKET ?\n         BNE   P#SET               NO - GO SET SWITCH\n         CLI   CLOSFLAG,C'Y'       HAVE WE HAD A CLOSE BRACKET ?\n         BE    P#SET               YES - GO SET SWITCH\nP#PROC   C     R5,=F'9'            IS LENGTH > 9\n         BH    P#ERR               YES - GO DO THE ERROR\n         C     R6,=F'3'            HAVE WE HAD MORE THAN 4 COMMAS\n         BH    P#ERR               YES - GO DO THE ERROR\n         LTR   R5,R5               TEST R5 FOR ZERO\n         BZ    P#ERR               YES - GO DO THE ERROR\n         C     R5,=F'9'            IS THE LENGTH = 9\n         BNE   P#LEN2              NO - GO TEST LENGTH FOR 2\n         CLI   NOTFLAG,C'Y'        IS THE NOT FLAG SET\n         BNE   P#ERR               NO - GO DO THE ERROR\nP#LEN2   C     R5,=F'2'            IS LENGTH > 2\n         BNL   P#INCR              YES - INCREMENT\n         CLI   NOTFLAG,C'Y'        IS THE NOT FLAG SET ?\n         BE    P#TESTI             YES - GO TEST LENGTH FOR 1\n         CLI   SLASFLAG,C'Y'       IS THE SLASH FLAG SET ?\n         BE    P#TEST1             YES - GO TEST LENGTH FOR 1\n         CLI   STARFLAG,C'Y'       IS THE ASTERIX FLAG SET ?\n         BNE   P#INCR              NO - INCREMENT\nP#TEST1  C     R5,=F'1'            IS THE LENGTH 1 ?\n         BE    P#ERR               YES - GO DO THE ERROR\nP#TESTI  CLI   SLASFLAG,C'Y'       IS THE SLASH FLAG SET ?\n         BE    P#ERR               YES - GO DO THE ERROR\n         CLI   STARFLAG,C'Y'       IS THE ASTERIX FLAG SET ?\n         BE    P#ERR               YES - GO DO THE ERROR\nP#INCR   LA    R6,1(R6)            INCREMENT COMMA COUNT\n         MVI   NOTFLAG,C'N'        SET NOT FLAG OFF\n         MVI   SLASFLAG,C'N'       SET SLASH FLAG OFF\n         MVI   STARFLAG,C'N'       SET ASTERIX FLAG OFF\n         BCTR  R5,0                SUBTRACT LENGTH FOR EXECUTE\n         EX    R5,P#MOVE           MOVE JOB DATA IN\nP#SWITCH CLI   ENDFLAG,C'Y'        END FLAG SET ?\n         BE    P#END\n         SR    R5,R5               CLEAR COUNTER\n         LA    R7,9(R7)            UP TO NEXT TABLE ENTRY\n         LR    R8,R4               SKIP THESE\n         B     P#UP2               UP R8 AND R4\nP#MOVE   MVC   0(0,R7),0(R8)       MOVE IN JOB CRITEREA\nP#NOT    CLI   0(R4),C'\u00ac'          IS IT A NOT SIGN (\u00ac)\n         BNE   P#SLASH             NO - TRY SLASH\n         CLI   NOTFLAG,C'Y'        HAVE WE HAD A NOT SIGN ?\n         BE    P#ERR               YES - DO THE ERROR\n         CLI   SLASFLAG,C'Y'       HAVE WE HAD A SLASH ?\n         BE    P#ERR               YES - DO THE ERROR\n         CLI   STARFLAG,C'Y'       HAVE WE HAD AN ASTERIX ?\n         BE    P#ERR               YES - DO THE ERROR\n         MVI   NOTFLAG,C'Y'        SET NOT FLAG ON\n         B     P#UP3               INCREMENT\nP#SLASH  CLI   0(R4),C'/'          IS IT A SLASH\n         BNE   P#STAR              NO - TRY ASTERIX\n         CLI   STARFLAG,C'Y'       HAVE WE HAD AN ASTERIX ?\n         BE    P#ERR               YES - DO THE ERROR\n         CLI   SLASFLAG,C'Y'       HAVE WE HAD A SLASH ?\n         BE    P#ERR               YES - DO THE ERROR\n         MVI   SLASFLAG,C'Y'       SET NOT FLAG ON\n         B     P#UP3               INCREMENT\nP#STAR   CLI   0(R4),C'*'          IS IT AN ASTERIX\n         BNE   P#UP3               NO - INCREMENT\n         CLI   STARFLAG,C'Y'       HAVE WE HAD AN ASTERIX ?\n         BE    P#ERR               YES - DO THE ERROR\n         CLI   SLASFLAG,C'Y'       HAVE WE HAD A SLASH ?\n         BE    P#ERR               YES - DO THE ERROR\n         LTR   R5,R5               HAVE WE ANY CHARACTERS\n         BZ    P#ERR               NO - DO THE ERROR\n         MVI   SLASFLAG,C'Y'       SET NOT FLAG ON\n         B     P#UP3               INCREMENT\nP#ERR    MVC   PRINT+2(28),=C'** ERROR ** SYNTAX ERROR IN '\n         MVC   PRINT+38(6),=C' FIELD'\n         BAL   R12,PRINTER\n         B     S#PRTERR\nP#END    MVI   ENDFLAG,C'N'         SET SWITCH AGAIN\n         CLI   0(R4),C' '          SPACE ?\n         BE    S#FINISH            YES - END OF INPUT CARD\n         CLI   0(R4),X'FF'         END OF SYSIN CARD ?\n         BE    S#FINISH            YES - SET FLAGS\n         LA    R4,1(R4)            SKIP CHARACTER\n         MVI   CONTFLAG,C'Y'       SET CONTINUATION FLAG ON\n         BR    R9\n*** END OF PARSE SUBROUTINE *******************************************\n***********************************************************************\n*** PRINTER SUBROUTINE                                              ***\n***********************************************************************\n*** PURPOSE : TO PRINT LINE                                         ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nPRINTER  EQU   *\n         L     R1,LINECNT\n         C     R1,=F'54'\n         BNH   PUTITOUT\n         L     R1,PAGECNT\n         LA    R1,1(R1)\n         ST    R1,PAGECNT\n         LINK  EP=SMFSCANT,PARAM=PARAM\n         LA    R1,9\n         ST    R1,LINECNT\nPUTITOUT EQU   *\n         LA    R1,1(R1)\n         ST    R1,LINECNT\n         PUT   SYSPRINT,PRINT+1       PUT OUT PRINT LINE\n         MVI   PRINT,C' '             AND CLEAR\n         MVC   PRINT+1(L'PRINT-1),PRINT      PRINT LINE OUT\n         BR    R12         <========== SUBROUTINE RETURN\n*** END OF PRINTER SUBROUTINE *****************************************\nIGNORE   DS    CL1\nNOTFLAG  DS    CL1\nDOTFLAG  EQU   NOTFLAG,1\nSTARFLAG DS    CL1\nSLASFLAG DS    CL1\nOPENFLAG DS    CL1\nCLOSFLAG DS    CL1\nENDFLAG  DS    CL1\nFLAGS    DS    CL17\nCONTFLAG EQU   FLAGS+0,1\nSUMFLAG  EQU   FLAGS+1,1\nCLASFLAG EQU   FLAGS+2,1\nNOTCFLAG EQU   FLAGS+3,1\nJOBFLAG  EQU   FLAGS+4,1\nPROGFLAG EQU   FLAGS+5,1\nPRTYFLAG EQU   FLAGS+6,1\nNOPRFLAG EQU   FLAGS+7,1\nAFTRFLAG EQU   FLAGS+8,1\nBFORFLAG EQU   FLAGS+9,1\nTYPEFLAG EQU   FLAGS+10,1\nELAPFLAG EQU   FLAGS+11,1\nCPUTFLAG EQU   FLAGS+12,1\nFLUSFLAG EQU   FLAGS+13,1\nJDTEFLAG EQU   FLAGS+14,1\nDATEFLAG EQU   FLAGS+15,1\nDAYFLAG  EQU   FLAGS+16,1\nCONDCODE DS    F\nPAGECNT  DS    F\nLINECNT  DS    F\nPRINT    DC    CL133' '\nOUTCARD  EQU   PRINT+2,80\nNOSYSIN  DC    CL64'  NO SYSIN CONTROL CARDS. ALL JOBS IN ALL CLASSES WX\n               ILL BE LISTED'\nIGNMESS  DC    CL98'  ** NOTE **   THE FOLLOWING INPUT CARDS HAVE BEEN X\n               IGNORED DUE TO NO CONTINUATION ON PREVIOUS CARD'\n*                    12345678901234567890123456789012345678901234567890\n*              12345678901234567890123456789012345678901234567890\nSKIPERR  DC    CL80'  ** NOTE **   THE FOLLOWING INPUT CARDS HAVE BEEN X\n               IGNORED DUE TO PREVIOUS ERROR'\nINCARD   DS    CL80\n         DC    X'FFFFFFFFFFFFFFFFFF'\nDATE     DS    CL8\nCLASSES  DS    CL8\nJOBS     DS    4CL10\nPROGS    DS    4CL10\nATIME    DS    CL5\nBTIME    DS    CL5\nCTIME    DS    CL6\nETIME    DS    CL6\nPSAVE    DS    CL3\nDAY      DS    CL3\nPJDATE   DS    F\nSYSPRINT SYSPRINT\nSYSIN    SYSIN EODAD=ENDSYSIN\nPARAM    DS    0F\nAFLAGS   DC    AL4(FLAGS)\nAPRINT   DC    AL4(SYSPRINT)\nACLASSES DC    AL4(CLASSES)\nAPROGS   DC    AL4(PROGS)\nAJOBS    DC    AL4(JOBS)\nAATIME   DC    AL4(ATIME)\nABTIME   DC    AL4(BTIME)\nACTIME   DC    AL4(CTIME)\nAETIME   DC    AL4(ETIME)\nAPSAVE   DC    AL4(PSAVE)\nAPAGE    DC    AL4(PAGECNT)\nAPJDATE  DC    AL4(PJDATE)\nADATE    DC    AL4(DATE)\nADAY     DC    AL4(DAY)\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07REGEQ": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00!\\x00!\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "UKGUIDE"}, "text": "         MACRO\n         REGEQS\n         GBLB  &REGEQS\n         AIF   (&REGEQS).ERROR\n&REGEQS  SETB  1\n* ******************************************************************* *\n*                                                                     *\nR0       EQU   0                                                      *\nR1       EQU   1                                                      *\nR2       EQU   2                                                      *\nR3       EQU   3                                                      *\nR4       EQU   4                                                      *\nR5       EQU   5                                                      *\nR6       EQU   6                                                      *\nR7       EQU   7                                                      *\nR8       EQU   8                 K. E. F.   R E G E Q S               *\nR9       EQU   9                                                      *\nR10      EQU   10      EQUATE PREFIX TO NUMERIC SYMBOLS IN ORDER      *\nR11      EQU   11       TO MAKE THE USE OF REGISTER OPERANDS IN       *\nR12      EQU   12       INSTRUCTIONS SELF EXPLANITORY.THIS ALSO       *\nR13      EQU   13         CREATES ENTRIES IN CROSS REFERENCE.         *\nR14      EQU   14                                                     *\nR15      EQU   15                                                     *\nFPR0     EQU   0                                                      *\nFPR2     EQU   2                                                      *\nFPR4     EQU   4                                                      *\nFPR6     EQU   6                                                      *\n*                                                              K.E.F. *\n* ******************************************************************* *\n         SPACE 1\n         MEXIT\n.ERROR   MNOTE *,'REGEQS MACRO ALREADY ISSUED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07SCAN": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "UKGUIDE"}, "text": "                       SMFSCAN INFORMATION\n                       -------------------\n SMFSCAN consists of the following programs :-\n\n SMFPARSE            - parses sysin input. This program is the main\n --------              entry point. It calls SMFSCANT to print titles\n                       then it validates the SYSIN data stream and then\n                       (if all is OK) links to SMFSCANR.\n\n SMFSCANT            - prints the title pages for SMFSCAN. This program\n ---------             will print the title depending at what stage the\n                       program has got. ie SYSIN REPORT or REPORT.\n                       This program links to DATE.\n\n SMFSCANR            - process the input file and produces the report.\n --------              This program also links to SMFSCANT and DATE.\n\n SMFSCAN will produce a report, from SMF TYPE 30 records, of whatever\n is specified in the SYSIN data stream. User instructions are held in\n this PDS as member SMFDOC.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07SCANR": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x02\\xb4\\x02\\xb4\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 692, "newlines": 692, "modlines": 0, "user": "UKGUIDE"}, "text": "SMFSCANR TITLE 'REPORT ON TYPE 30 RECORDS'\nSMFSCANR BEGIN R11\n         REGEQS\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\nPSAAOLD  EQU   X'224',4    ADDRESS IN PSA OF CURRENT ASCB\nASCBJBNI EQU   X'AC',4     ADDRESS IN JOBNAME IN ASCB\nCHPROCSN EQU   X'18',8     ADDRESS IN PROC STEP NAME IN CSCB\nFLUSH    EQU   X'01'       WAS STEP FLUSHED\nPACKDIG  EQU   X'0F'\n         L     R2,0(R1)        PRESERVE R1 IN R2\n         CLC   0(4,R2),=F'0'   ANY PARMS ?\n         BNE   KEEPON          YES - KEEP ON GOING\n         WTO   'SMFSCAN - NO PARAMETERS PASSED ABEND U0001'\n         ABEND 1\nKEEPON   EQU   *\n         MVC   SAVEADDR,0(R2)   SAVE ADDRESSES\n         L     R3,APRINT       LOAD R3 WITH SYSPRINT ADDRESS\n         L     R4,AJOBS        GET JOB LIST\n         MVC   JOBS(40),0(R4)  SAVE IT\n         L     R4,APROGS       GET PROGRAM LIST\n         MVC   PROGS(40),0(R4) SAVE IT\n         L     R4,ACLASSES     GET CLASSES LIST\n         MVC   CLASSES,0(R4)   SAVE IT\n         L     R4,ABTIME       GET BEFORE TIME\n         MVC   BTIME,0(R4)     SAVE IT\n         L     R4,AATIME       GET AFTER LIST\n         MVC   ATIME,0(R4)     SAVE IT\n         L     R4,AETIME       GET ELAPSED LIST\n         MVC   ETIME,0(R4)     SAVE IT\n         L     R4,ACTIME       GET CPU LIST\n         MVC   CTIME,0(R4)     SAVE IT\n         L     R4,APSAVE       GET PRIORITY LIST\n         MVC   PSAVE,0(R4)     SAVE IT\n         L     R4,APJDATE      GET PACKED JULIAN DATE\n         MVC   PDATE,0(R4)     SAVE IT\n         L     R4,ADATE        GET DATE\n         MVC   PASSDATE,0(R4)  SAVE IT\n         L     R4,ADAY         GET DAY\n         MVC   PASSDAY,0(R4)   SAVE IT\n         L     R4,AFLAGS       GET FLAGS\n         MVC   FLAGS,0(R4)     SAVE IT\n         CLI   SUMFLAG,C'Y'           SUMMARY FLAG SET ?\n         BNE   FULL\n         MVI   10(R4),C'A'\n         B     GO\nFULL     MVI   10(R4),C'F'\nGO       LINK  EP=SMFSCANT,PARAM=ADDRESS\n         LA    R1,9\n         ST    R1,LINECNT\n         OPEN  SYSUT1\n         LTR   R15,R15\n         BZ    SYSUTOK\n         WTO   'SMFSCAN - UNABLE TO OPEN SYSUT1. ABEND U0002'\n         ABEND 2\nSYSUTOK  EQU   *\n         GETMAIN RC,LV=32760\n         LTR   R15,R15          DID IT WORK\n         BZ    GETOK\n         WTO   'SMFSCAN - GETMAIN FAILED. CONTACT TSS. ABEND U0003'\n         ABEND 3\nGETOK    ST    R1,GOTTEN        SAVE AREA\n         LR    R9,R1            LOAD R9 WITH ADDRESS\nGETLOOP  GET   SYSUT1,0(R9)     GET FIRST RECORD\n         L     R3,APRINT       LOAD R3 WITH SYSPRINT ADDRESS\n         USING SMFRCD30,R9         R9 ==> SMF RECORD 30 ADDRESSIBILTY\n         CLI   SMF30RTY,X'1E'      IS IT A TYPE 30 REALLY ?\n         BNE   GETLOOP             NO - LOOP BACK THEN\n         L     R8,SMF30SOF         OFFSET OF SUBSYS SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30PSS,R8         SMF30PSS ADDRESSABILITY\n         CLC   SMF30TYP(2),TYPE5   IS IT A JOB END ?\n         BE    JOBEND              YES - GO TO JOB END PROCESSING\n         CLC   SMF30TYP(2),TYPE4   IS IT A STEP END ?\n         BNE   GETLOOP             NO - GET NEXT RECORD\nSTEPEND  CLI   SUMFLAG,C'Y'        DO WE JUST WANT A SUMMARY\n         BE    GETLOOP             YES - FORGET THIS RECORD THEN\n         DROP  R8                 DROP SUBSYSTEM SECTION ADDRESSABILITY\n         L     R8,SMF30IOF         OFFSET OF IDENT SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30ID,R8          ADDRESSABILITY WITH ID SECTION\n         MVC   STEPNAME,SMF30STM   MOVE IN STEPNAME\n         MVC   PROGRAM,SMF30PGM    MOVE IN PROGRAM\n         CLI   PROGFLAG,C'Y'       PROGRAM FLAG SET ?\n         BNE   GETPROC            NO - SKIP\n         LA    R4,PROGS\n         LA    R7,PROGRAM\n         BAL   R12,CHECKIT\n         CLI   HITFLAG,C'Y'        HIT ?\n         BNE   GETLOOP            NO - GET NEXT\n         L     R3,APRINT       LOAD R3 WITH SYSPRINT ADDRESS\nGETPROC  L     R1,PSAAOLD          GET ADDRESS OF CURRENT ASCB\n         L     R1,ASCBJBNI(0,R1)   GET ADDRESS OF JOBNAME FIELD\n         MVC   PROCNAME,CHPROCSN(R1) MOVE IN PROC STEP NAME\n         B     NOWJOB\nJOBEND   EQU   *\n         CLI   SUMFLAG,C'N'\n         BE    GETLOOP\n         MVC   STEPNAME,=C'        '\n         MVC   PROGRAM,=C'        '\n         MVC   PROCNAME,=C'        '\nNOWJOB   LA    R5,SMF30TME         END TIME IN SEC/100\n         L     R4,0(R5)            PUT END TIME INTO R4\n         ST    R4,ENDTICK          SAVE IT\n         LA    R5,SMF30DTE         GO FOR THE DATE\n         L     R4,0(R5)            PUT DATE IN R4\n         ST    R4,DATE             SAVE IT\n         DROP  R8                 DROP SUBSYSTEM SECTION ADDRESSABILITY\n         L     R8,SMF30IOF         OFFSET OF IDENT SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30ID,R8          ADDRESSABILITY WITH ID SECTION\n         LH    R4,SMF30JPT        GET JOB PRIORITY\n         ST    R4,PRIORITY         SAVE IT\n         MVC   JOBNAME,SMF30JBN    MOVE JOBNAME\n         MVC   JOBCLASS,SMF30CLS   MOVE JOB CLASS\n         CLI   JOBFLAG,C'Y'       IS THE JOBFLAG SET\n         BNE   DOJOB              NO - PROCESS\n         LA    R4,JOBS\n         LA    R7,JOBNAME\n         BAL   R12,CHECKIT\n         CLI   HITFLAG,C'Y'        HIT ?\n         BNE   GETLOOP            NO - GET NEXT\n         L     R3,APRINT       LOAD R3 WITH SYSPRINT ADDRESS\nDOJOB    CLI   CLASFLAG,C'Y'      JOB CLASS FLAG SET ?\n         BNE   DOCLASS\n         BAL   R12,CLASSCHK       POINT AT CLASSES\nDOCLASS  EQU   *\n         LA    R5,SMF30SIT         START TIME IN SEC/100\n         L     R4,0(R5)              \"\"   \"\"  \"\"   \"\"\n         ST    R4,STTIME           SAVE START TIME\n         LA    R5,STARTIME         TARGET FIELD HH:MM:SS\n         BAL   R12,TIMCONV         CONVERT TIME\n         CLI   BFORFLAG,C'Y'       BEFORE FLAG SET ?\n         BNE   DOBFORE           NO - SKIP\n         CLC   BTIME,STARTIME      COMPARE START TIME\n         BL    GETLOOP           NO GOOD - FORGET RECORD\nDOBFORE  MVI   2(R5),C':'          FORCE IN :\n         L     R4,ENDTICK          SAVE IT\n         LA    R5,ENDTIME        TARGET FIELD HH:MM:SS\n         BAL   R12,TIMCONV         CONVERT TIME\n         CLI   AFTRFLAG,C'Y'       AFTER FLAG SET ?\n         BNE   DOAFTER           NO - SKIP\n         CLC   ATIME,STARTIME      COMPARE START TIME\n         BNL   GETLOOP           NO GOOD - FORGET RECORD\nDOAFTER  MVI   2(R5),C':'          FORCE IN :\n         DROP  R8                  DROP ID SECTION ADDRESSABILITY\n         L     R8,SMF30TOF         OFFSET OF COMPLETION SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30CMP,R8         ADDRESSABILITY WITH COMPLETE SECTION\n         TM    SMF30STI+0,FLUSH    WAS JOB FLUSHED ?\n         BO    FLUSHED             YES - SKIP TO LAST LINE\n         DROP  R8\n         L     R8,SMF30COF         OFFSET OF PROCESSOR SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30CAS,R8         ADDRESSABILITY WITH PROC SECTION\n         LA    R5,SMF30CPT         CPU TIME IN R5\n         L     R4,0(R5)             ''  ''  '' R4\n         LA    R5,CPUTIME          TARGET FIELD HH.MM.SS.SS\n         BAL   R12,TIMCONV         CONVERT TIME\n         CLI   CPUTFLAG,C'Y'       CPU FLAG SET ?\n         BNE   PUTOUTX           NO - SKIP\n         LA    R4,CTIME            FIND CPU TIME\n         CLI   0(R4),C'='          = ?\n         BE    K#EQUAL\n         CLI   0(R4),C'>'          >\n         BE    K#GREAT\n         CLC   1(5,R4),CPUTIME    COMPARE CPU TIME\n         BL    GETLOOP\n         CLC   6(5,R5),=C'00.00'\n         BE    GETLOOP\n         B     PUTOUTX\nK#EQUAL  CLC   1(5,R4),CPUTIME    COMPARE CPU TIME\n         BNE   GETLOOP\n         B     PUTOUTX\nK#GREAT  CLC   1(5,R4),CPUTIME    COMPARE CPU TIME\n         BH    GETLOOP\n         CLC   6(5,R5),=C'00.00'\n         BE    GETLOOP\nPUTOUTX  EQU   *\n         MVI   2(R5),C':'          FORCE IN :\nCPUSUPP  CLI   0(R5),C'.'          DOT\n         BE    PUTELP\n         CLI   0(R5),C'0'          ZERO\n         BNE   CPUDOTS             TEST CPU ID\nSUPPRESS MVI   0(R5),C' '          CLEAR IT\n         LA    R5,1(R5)\n         B     CPUSUPP\nCPUDOTS  CLI   0(R5),C':'\n         BE    SUPPRESS\nPUTELP   L     R5,STTIME           START TIME IN R5\n         L     R4,ENDTICK          END TIME IN R4\n         CR    R5,R4               IS END TIME < START TIME ?\n         BNH   SUBTRACT            YES - GO TO SUBTRACT\n         A     R4,HR24             ADD 24 HOURS TO TIME\nSUBTRACT SR    R4,R5               GET ELAPSED TIME IN R4\n         LA    R5,ELAPSED          TARGET FIELD HH:MM:SS\n         BAL   R12,TIMCONV         CONVERT TIME\n         CLI   ELAPFLAG,C'Y'       ELAPSED TIME FLAG SET ?\n         BNE   FORCEIT           NO - SKIP\n         LA    R4,ETIME            FIND CPU TIME\n         CLI   0(R4),C'='          = ?\n         BE    J#EQUAL\n         CLI   0(R4),C'>'          >\n         BE    J#GREAT\n         CLC   1(5,R4),ELAPSED    COMPARE ELAPSED TIME\n         BL    GETLOOP\n         CLC   6(5,R5),=C'00.00'\n         BE    GETLOOP\n         B     FORCEIT\nJ#EQUAL  CLC   1(5,R4),ELAPSED    COMPARE ELAPSED TIME\n         BNE   GETLOOP\n         B     FORCEIT\nJ#GREAT  CLC   1(5,R4),ELAPSED    COMPARE ELAPSED TIME\n         BH    GETLOOP\n         CLC   6(5,R5),=C'00.00'\n         BE    GETLOOP\nFORCEIT  EQU   *\n         MVI   2(R5),C':'          FORCE IN :\nELPSUPP  CLI   0(R5),C'.'          DOT\n         BE    GOON\n         CLI   0(R5),C'0'          ZERO\n         BNE   ELPDOTS             TEST CPU ID\nSUPPRESX MVI   0(R5),C' '          CLEAR IT\n         LA    R5,1(R5)\n         B     ELPSUPP\nELPDOTS  CLI   0(R5),C':'\n         BE    SUPPRESX\nGOON     EQU   *\n         CLI   NOPRFLAG,C'N'      WAS NOPRTY SPECIFIED ?\n         BNE   LOADP\n         CLI   PRTYFLAG,C'N'      WAS PRTY SPECIFIED\n         BE    GOON2              NO - GO PRINT THIS ONE\nLOADP    L     R4,PRIORITY\n         LTR   R4,R4\n         BZ    PRTY0               CHECK NO PRTY FLAG\n         BAL   R12,COUNTCNV\n         CLI   PRTYFLAG,C'Y'       PRTY SPECIFIED ?\n         BNE   GOON2\n         MVC   PRTY,DWORD+6\n         LA    R5,PSAVE            POINT AT PRTY SAVE AREA\n         CLI   0(R5),C'='          IS IT PRTY = ?\n         BNE   X#TRY               NO - TRY >\n         CLC   PRTY,1(R5)          ARE THE TWO FIELDS EQUAL ?\n         BNE   GETLOOP             NO - FORGET THEM THEN\nX#TRY    CLI   0(R5),C'>'          > SIGN\n         BNE   X#LESS\n         CLC   PRTY,1(R5)          TEST PRTY\n         BNH   GETLOOP\n         B     GOON2\nX#LESS   CLC   PRTY,1(R5)\n         BNL   GETLOOP\n         B     GOON2\nPRTY0    CLI   NOPRFLAG,C'Y'       NO PRIORITY JOBS ?\n         BNE   GETLOOP\nGOON2    EQU   *\n         DROP  R8                  DROP ID SECTION ADDRESSABILITY\n         L     R8,SMF30TOF         OFFSET OF COMPLETION SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30CMP,R8         ADDRESSABILITY WITH COMP SECTION\n         SLR   R4,R4               CLEAR R4\n         LH    R4,SMF30SCC         GET COND CODE\n         N     R4,=X'00007FFF'     TURN TOP BIT OFF\n         TM    SMF30STI,SMF30ABD   JOB ABENDED?\n         BNO   FINDCOND            NO - GO FIND CONDITION CODE\n         TM    SMF30SCC,SMF30SAB   USER ABEND?\n         BNO   SYSABND             NO - PROCESS SYSTEM ABEND CODE\n         MVC   CODE+0(1),=C'U'     INDICATE USER ABEND\n         LH    R4,SMF30SCC\n         N     R4,=X'00007FFF'     TURN TOP BIT OFF\n         CVD   R4,DWORD            CHANGE TO DECIMAL\n         OI    DWORD+7,X'0F'       SET SIGN\n         UNPK  CODE+1(4),DWORD+5(3) UNPACK ABEND CODE\n         B     CONTINUE            SKIP SYSTEM ABEND PROCESSING\nSYSABND  MVC   CODE+1(1),=C'S'     INDICATE SYSTEM ABEND\n         UNPK  DWORD(5),SMF30SCC(3) UNPACK ONE BYTE MORE\n         TR    DWORD+1(3),TTAB     TRANSLATE RELEVENT BYTES\n         MVC   CODE+2(3),DWORD+1   MOVE TRANSLATED CODE\n         B     CONTINUE            SKIP ABEND PROCESSING\nFINDCOND CVD   R4,DWORD            GET ADDRESS OF COND FIELD\n         MVC   CODE,=X'2120202020' MOVE IN EDIT MASK\n         ED    CODE,DWORD+5        CONVERT RET CODE TO CHAR\n         MVC   CODE(1),=X'40'      CLEAR GASH FIRST CHARACTER\nCONTINUE EQU   *\n         CLI   JDTEFLAG,C'Y'       JULIAN DATE FILTER ON ?\n         BNE   CONVDATE            NO - GO CONVERT THE DATE THEN\n         CLC   DATE,PDATE          COMPARE DATES\n         BNE   GETLOOP             IF NOT EQUAL SKIP\nCONVDATE LA    R1,DATE\n         ST    R1,PARM1\n         UNPK  WORK,DATE           UNPACK JULIAN DATE\n         MVC   JULIAN,WORK+3       MOVE IN DATE\n         LA    R1,OUTDATE          GET ADDRESS ON WHERE TO PUT IT\n         ST    R1,PARM2            SAVE ADDRESS IN PARM2\n         LINK  EP=DATE,PARAM=PARMS GET TODAYS DATE\n         MVC   OUTDAY,OUTDATE+6    MOVE DAY TO PRINT LINE\n         CLI   DAYFLAG,C'Y'        DAY FILTER ON ?\n         BNE   DAYOK               NO - FORGET TEST THEN\n         CLC   PASSDAY,OUTDAY      DO THE DAYS MATCH ?\n         BNE   GETLOOP             NO - SKIP RECORD\nDAYOK    MVC   OUTDTE,OUTDATE+40     MOVE IN DATE\n         MVC   OUTDTE+6(2),OUTDATE+48  MOVE IN DATE\n         CLI   DATEFLAG,C'Y'       IS DATE FILTER ON ?\n         BNE   DATEOK              NO - SKIP TEST\n         CLC   PASSDATE,OUTDTE     DO THE DATES MATCH ?\n         BNE   GETLOOP             NO - SKIP RECORD\nDATEOK   EQU   *\n         DROP  R8                  DROP PROCESSOR ADDRESSABILITY\n         L     R8,SMF30UOF         OFFSET OF UNIT RECORD SECTION IN R8\n         LA    R8,0(R8,R9)         OFFSET TO BASE (R9) & PUT IN R8\n         USING SMF30URA,R8         ADDRESSABILITY WITH UNIT SECTION\n         L     R4,SMF30TEP         NUMBER OF EXCPS IN R4\n         BAL   R12,COUNTCNV        CONVERT TO DECIMAL\n         MVC   EXCPS,DWORD+2       MOVE IN EXCPS\n         BAL   R12,PRINTER\n         B     GETLOOP\nFLUSHED  CLI   FLUSFLAG,C'Y'        DO WE WANT THESE\n         BNE   GETLOOP             NO - SKIP\n*        CLC   SMF30TYP(2),TYPE5   IS IT A JOB END ?\n*        BE    STEP2               YES - GO TO STEP END PROCESSING\n         MVC   CPUTIME,=C'* FLUSHED *' MOVE IN STEP NOT RUN\n         B     PUTOUTX             GO WRITE MESSAGE\nENDOFIN  CLOSE SYSUT1\n         EOJ\n***********************************************************************\n*** COUNTCNV SUBROUTINE                                             ***\n***********************************************************************\n*** PURPOSE : TO CONVERT R4 INTO PRINTABLE CHARACTERS               ***\n***      R4 ADDRESSES TIME FIELD                                    ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nCOUNTCNV CVD   R4,DWORD            CONVERT COUNT TO DECIMAL\n         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK\n         ED    EDWORK,DWORD+2     CONVERT TO CHARACTER\n         CP    DWORD,P99999        IS COUNT>99999?\n         BNH   NOFLOAT             NO, BR PAST FLOAT CODE\n         MVC   DWORD(L'DWORD-1),EDWORK+2 SHIFT IT RIGHT 3 DEC DIGTS\n         MVI   DWORD+L'DWORD-1,C'K' MOVE A 'K' FOR THOUSANDS\n         B     PCNTEX              BR TO RETURN\nNOFLOAT  MVC   DWORD,EDWORK+4      MOVE IN UNFLOATED COUNT\nPCNTEX   BR    R12                  RETURN TO CALLER\n*** END OF COUNTCNV SUBROUTINE ****************************************\n***********************************************************************\n*** TIMECONV SUBROUTINE                                             ***\n***********************************************************************\n*** PURPOSE : TO CONVERT TIME FROM BINARY HUNDRETHS OF A SECOND TO  ***\n***           HH.MM.SS.TH FORMAT                                    ***\n***      R4 ADDRESSES TIME FIELD                                    ***\n***      R5 ADDRESSES TARGET FIELD                                  ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nTIMCONV  EQU   *\n         SLR   R0,R0               CLEAR EVEN REG\n         LR    R1,R4               TIME IN REG  R1\n         D     R0,=F'6000'         CHANGE TO MINUTES\n         LR    R4,R0               SAVE REMAINDER IN R4\n         SLR   R0,R0               CLEAR R0\n         D     R0,=F'60'           CHANGE TO HOURS AND MINUTES\n         CVD   R1,DWORD            CHANGE HOURS TO DECIMAL\n         OI    DWORD+7,X'0F'       SET SIGN\n         UNPK  0(2,R5),DWORD+6(2)  CHANGE TO CHARACTER\n         CVD   R0,DWORD            CHANGE MINUTES TO DECIMAL\n         OI    DWORD+7,X'0F'       SET SIGN\n         UNPK  3(2,R5),DWORD+6(2)  CHANGE TO CHARACTER\n         LA    R0,0                CLEAR R0\n         LR    R1,R4               RESTORE NUMBER OF SECONDS\n         D     R0,=F'100'          CHANGE TO SECONDS AND HUNDREDTHS\n         CVD   R1,DWORD            CHANGE SECONDS TO DECIMAL\n         OI    DWORD+7,X'0F'       SET SIGN\n         UNPK  6(2,R5),DWORD+6(2)  CHANGE TO CHARACTER\n         MVI   2(R5),C'.'          *\n         MVI   5(R5),C':'          *  FORCE IN THE PRETTY BITS\n         MVI   8(R5),C'.'          *\n         CVD   R0,DWORD            CHANGE SECOND/100 TO DECIMAL\n         OI    DWORD+7,X'0F'       SET SIGN\n         UNPK  9(2,R5),DWORD+6(2)  CHANGE TO CHARACTER\n         BR    R12                 RETURN TO CALLER\n***********************************************************************\n*** CLASSCHK SUBROUTINE                                             ***\n***********************************************************************\n*** PURPOSE : TO CHECK JOB CLASS CRITEREA                           ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nCLASSCHK LA    R4,CLASSES\n         MVI   HITFLAG,C'N'       THIS FLAG SET WHEN HIT\n         LA    R5,10(R4)          POINT AT END OF CLASSES\nA#LOOP   CR    R4,R5\n         BE    A#EXIT2\n         CLI   0(R4),C' '         BLANK ?\n         BE    A#EXIT2\n         CLC   0(1,R4),JOBCLASS\n         BE    A#MATCH            MATCHED\n         CLI   NOTCFLAG,C'Y'      NOT CLASS FLAG ON ?\n         BE    A#EXIT\nA#UPIT   LA    R4,1(R4)\n         B     A#LOOP\nA#MATCH  CLI   NOTCFLAG,C'Y'      NOT CLASS FLAG SET\n         BE    A#UPIT\nA#EXIT   MVI   HITFLAG,C'Y'       SET HIT FLAG\n         B     A#UPIT\nA#EXIT2  CLI   HITFLAG,C'Y'       HIT ?\n         BNE   GETLOOP\n         BR    R12\n*** END OF CLASSCHK SUBROUTINE ****************************************\n***********************************************************************\n*** CHECKIT SUBROUTINE                                              ***\n***********************************************************************\n*** PURPOSE : TO CHECK TO SEE WETHER SELECTION CRITEREA IS MATCHED  ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nCHECKIT  MVI   NOTFLAG,C'N'       SET NOT FLAG OFF\n         ST    R12,SAVER12\n         MVI   HITFLAG,C'N'       SET HIT FLAG OFF\n         MVI   DONEFLAG,C'N'      SET DONE FLAG OFF\n         MVI   SLAPFLAG,C'N'      SET SLASH FLAG OFF\n         LR    R3,R4              PRESERVE R4\n         LR    R6,R4              PRESERVE R4 IN R6 FOR SKIPPING\n         LA    R5,1               LOOP COUNT\n         ST    R5,BIGLOOP         SAVE IT\nC#LOOP   C     R5,=F'5'           IS LOOP COUNT = 5\n         BE    C#EXIT             YES - FINISH\n         ST    R5,BIGLOOP         SAVE R5\n         LA    R5,1               SET LITTLE LOOP COUNT\nC#LITTLE C     R5,=F'10'          IS LOOP COUNT = 10\n         BE    COMPALL            YES - GO DO THE COMPARE\n         CLI   0(R4),C' '         SPACE ?\n         BE    C#SPACE            YES - SKIP\n         CLI   0(R4),X'00'        HEX 00 ?\n         BNE   C#TRY              NO - SKIP\nC#SPACE  CLI   DONEFLAG,C'Y'      HAVE WE PROCESSED ANYTHING THIS TIME\n         BNE   C#EXIT             NO - WE HAVE FINISHED THEN\n         CLI   SLAPFLAG,C'Y'      HAVE WE PROCESSED A SLASH\n         BE    C#TSTSTR           YES - GO AND TEST FOR THE STRING\nCOMPALL  CLC   0(8,R7),0(R3)      DOES IT MATCH\n         BE    C#MATCH            YES - GO TO MATCH PROCESSING\nC#NOMAT  CLI   NOTFLAG,C'Y'       IS THE NOT FLAG SET\n         BE    C#HIT              SELECT THIS JOB PLEASE\n         B     C#NEXT\nC#MATCH  CLI   NOTFLAG,C'Y'       IS THE NOT FLAG SET\n         BE    C#NEXT\n         B     C#HIT\nC#TRY    CLI   0(R4),C'\u00ac'         IS IT A NOT SIGN\n         BNE   C#TRY2             NO - TEST FOR *\n         MVI   NOTFLAG,C'Y'       SET THE NOT FLAG\n         LA    R3,1(R3)           POSITION FOR COMPARE\n         B     C#INCR             SKIP IT\nCOMPARE  CLC   0(0,R7),0(R3)\nC#TRY2   CLI   0(R4),C'*'         STAR  ?\n         BNE   C#TRY3             GO CHECK FOR A /\n         BCTR  R5,0               SUBTRACT 1 FOR COMPARE\n         BCTR  R5,0               SUBTRACT 1 FOR COMPARE\n         EX    R5,COMPARE\n         BE    C#MATCH\n         B     C#NOMAT\nC#TRY3   CLI   0(R4),C'/'        SLASH\n         BNE   C#INCR\n         MVI   SLAPFLAG,C'Y'     SET SLASH FLAG\n         LA    R3,1(R3)          UP R3\n         LA    R4,1(R4)          UP R3\n         B     C#LITTLE\nC#INCR   LA    R4,1(R4)           SKIP UP FIELD\n         LA    R5,1(R5)\n         MVI   DONEFLAG,C'Y'\n         B     C#LITTLE       <== LOOP RETURN\nC#NEXT   LA    R6,9(R6)           SKIP TO NEXT ENTRY IN TABLE\n         LR    R3,R6\n         LR    R4,R6\n         MVI   NOTFLAG,C'N'\n         MVI   DONEFLAG,C'N'\n         L     R5,BIGLOOP\n         LA    R5,1(R5)\n         ST    R5,BIGLOOP\n         B     C#LOOP\nC#TSTSTR EQU   *\n         ST    R7,SAVER7          SAVE R7\n         ST    R8,SAVER8           AND R8\n         LA    R8,7\n         BCTR  R5,0\n         BCTR  R5,0\nC#TESTX  EX    R5,COMPARE\n         BE    C#TESTOK\n         LA    R7,1(R7)\n         BCT   R8,C#TESTX\n         L     R7,SAVER7          RESTORE R7\n         L     R8,SAVER8          RESTORE R8\n         CLI   NOTFLAG,C'Y'       IS THE NOT FLAG SET\n         BE    C#HIT              SELECT THIS JOB PLEASE\n         B     C#NEXT\nC#TESTOK L     R7,SAVER7          RESTORE R7\n         L     R8,SAVER8          RESTORE R8\n         CLI   NOTFLAG,C'Y'       IS THE NOT FLAG SET\n         BE    C#NEXT\nC#HIT    MVI   HITFLAG,C'Y'       FLAG HIT\nC#EXIT   EQU   *\n         L     R12,SAVER12\n         BR    R12\n*** END OF CHECKIT SUBROUTINE *****************************************\n***********************************************************************\n*** PRINTER SUBROUTINE                                              ***\n***********************************************************************\n*** PURPOSE : TO PRINT LINE                                         ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nPRINTER  EQU   *\n         L     R1,LINECNT\n         C     R1,=F'54'\n         BNH   PUTITOUT\n         L     R1,PAGECNT\n         LA    R1,1(R1)\n         ST    R1,PAGECNT\n         LINK  EP=SMFSCANT,PARAM=ADDRESS\n         LA    R1,9\n         ST    R1,LINECNT\nPUTITOUT EQU   *\n         LA    R1,1(R1)\n         ST    R1,LINECNT\n         PUT   0(R3),PRINT         PUT OUT PRINT LINE\n         MVI   PRINT,C' '             AND CLEAR\n         MVC   PRINT+1(L'PRINT-1),PRINT      PRINT LINE OUT\n         BR    R12         <========== SUBROUTINE RETURN\n*** END OF PRINTER SUBROUTINE *****************************************\n         DC    C'ADDRESS AREA ='\n***********************************************************************\n***  THE FOLLOWING IS THE PARAMETER LIST AS PASSED BY SMFSCAN       ***\n***********************************************************************\nPARAM    DS    0F\nADDRESS  DS    14F\nSAVEADDR EQU   ADDRESS+0,56\nAFLAGS   EQU   ADDRESS+0,4\nAPRINT   EQU   ADDRESS+4,4\nACLASSES EQU   ADDRESS+8,4\nAPROGS   EQU   ADDRESS+12,4\nAJOBS    EQU   ADDRESS+16,4\nAATIME   EQU   ADDRESS+20,4\nABTIME   EQU   ADDRESS+24,4\nACTIME   EQU   ADDRESS+28,4\nAETIME   EQU   ADDRESS+32,4\nAPSAVE   EQU   ADDRESS+36,4\nAPAGE    EQU   ADDRESS+40,4\nAPJDATE  EQU   ADDRESS+44,4\nADATE    EQU   ADDRESS+48,4\nADAY     EQU   ADDRESS+52,4\nPARMS    DS    0D\nPARM1    DS    F\nPARM2    DS    F\nDWORD    DS    D\nTIME     DS    F\nDATE2    DS    F\nPDATE    DS    F\nCONDCODE DS    F\nPAGECNT  DS    F\nLINECNT  DS    F\nBIGLOOP  DS    F\nENDTICK  DS    F\nSTTIME   DS    F\nSAVER7   DS    F\nSAVER8   DS    F\nSAVER12  DS    F\nPRIORITY DS    F\nDATE     DS    F\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nTYPE5    DC    XL2'0005'        CODE FOR A JOB TERMINATION\nTYPE4    DC    XL2'0004'        CODE FOR A STEP TERMINATION\nEDWORK   DC    XL12'00'\nEDMASK   DC    XL12'402020202020202020202120'\nP99999   DC    P'99999'\nGOTTEN   DS    F\nUNPCKDTE DS    CL16                UNPACK AREA FOR EDITING\nTEMPTIME EQU   UNPCKDTE,6\nOUTDATE  DS    CL50\nPRINT    DC    CL133' '\nJOBNAME  EQU   PRINT+2,8\nSTARTIME EQU   PRINT+12,11\nENDTIME  EQU   PRINT+24,11\nCPUTIME  EQU   PRINT+36,11\nELAPSED  EQU   PRINT+48,11\nEXCPS    EQU   PRINT+60,6\nCODE     EQU   PRINT+67,5\nJOBCLASS EQU   PRINT+73,1\nPRTY     EQU   PRINT+75,2\nOUTDAY   EQU   PRINT+78,3\nOUTDTE   EQU   PRINT+82,8\nJULIAN   EQU   PRINT+91,5\nPROGRAM  EQU   PRINT+98,8\nSTEPNAME EQU   PRINT+107,8\nPROCNAME EQU   PRINT+116,8\nCLASSES  DS    CL8\nJOBS     DS    4CL10\nPROGS    DS    4CL10\nATIME    DS    CL5\nBTIME    DS    CL5\nCTIME    DS    CL6\nETIME    DS    CL6\nPSAVE    DS    CL3\nPASSDATE DS    CL8\nPASSDAY  DS    CL3\nWORK     DS    CL8\nFLAGS    DS    CL17\nCONTFLAG EQU   FLAGS+0,1\nSUMFLAG  EQU   FLAGS+1,1\nCLASFLAG EQU   FLAGS+2,1\nNOTCFLAG EQU   FLAGS+3,1\nJOBFLAG  EQU   FLAGS+4,1\nPROGFLAG EQU   FLAGS+5,1\nPRTYFLAG EQU   FLAGS+6,1\nNOPRFLAG EQU   FLAGS+7,1\nAFTRFLAG EQU   FLAGS+8,1\nBFORFLAG EQU   FLAGS+9,1\nTYPEFLAG EQU   FLAGS+10,1\nELAPFLAG EQU   FLAGS+11,1\nCPUTFLAG EQU   FLAGS+12,1\nFLUSFLAG EQU   FLAGS+13,1\nJDTEFLAG EQU   FLAGS+14,1\nDATEFLAG EQU   FLAGS+15,1\nDAYFLAG  EQU   FLAGS+16,1\nNOTFLAG  DS    CL1\nHITFLAG  DS    CL1\nDONEFLAG DS    CL1\nSLAPFLAG DS    CL1\n         ORG   *-X'F0'\nTTAB     EQU   *\n         ORG   *+X'F0'\n         DC    C'0123456789ABCDEF'\nSYSUT1   DCB   DDNAME=SYSUT1,EODAD=ENDOFIN,MACRF=(GM),DSORG=PS\n         LTORG\n         IFASMFR 30                SMF TYPE 30 RECORD\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A07SCANT": {"ttr": 9736, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xf3\\x00\\xf3\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 243, "newlines": 243, "modlines": 0, "user": "UKGUIDE"}, "text": "SMFSCANT TITLE 'SMFSCAN - PAGE TITLE PRINTER'\nSMFSCANT BEGIN R11\n         REGEQS\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\nPACKDIG  EQU   X'0F'\n         L     R2,0(R1)        PRESERVE R1 IN R2\n         CLC   0(4,R2),=F'0'   ANY PARMS ?\n         BNE   KEEPON          YES - KEEP ON GOING\n         WTO  'SMFSCAN - NO PARAMETERS PASSED TO SMFSCANT. ABEND U0001'\n         ABEND 1\nKEEPON   EQU   *\n         MVC   SAVEADDR,0(R2)   SAVE ADDRESSES\n         L     R3,APRINT       LOAD R3 WITH SYSPRINT ADDRESS\n         L     R4,AFLAGS       GET FLAGS\n         MVC   FLAGS,0(R4)     SAVE IT\n         L     R4,APAGE        ADDRESS OF PAGE COUNT\n         L     R4,0(R4)        PAGE COUNT\n         TIME  DEC\n         ST    R0,TIME               SAVE TIME\n         ST    R1,DATE2              SAVE DATE IN PARM1\n         LA    R1,DATE2\n         ST    R1,PARM1\n         LA    R1,OUTDATE            GET ADDRESS ON WHERE TO PUT IT\n         ST    R1,PARM2              SAVE ADDRESS IN PARM2\n         LINK  EP=DATE,PARAM=PARMS   GET TODAYS DATE\n         MVC   PRINT(1),=C'1'        NEW PAGE\n         MVC   PRINT+1(8),=C' DATE - ' MOVE IN TITLE\n         MVC   PRINT+94(6),=C'TIME -' MOVE IN TITLE\n         MVC   PRINT+9(30),OUTDATE+5 MOVE TODAYS DATE TO TITLE\n         L     R1,TIME               GET TIME IN R2\n         SRL   R1,4                  DROP OFF LAST BIT\n         ST    R1,TIME               AND RE - SAVE TIME\n         OI    TIME+3,PACKDIG        FORCE IN PACK DIGIT (F)\n         UNPK  TEMPTIME,TIME(4)      CHANGE TO CHARACTER\n         MVC   PRINT+101(2),TEMPTIME   MOVE IN HOURS\n         MVC   PRINT+104(2),TEMPTIME+2 MOVE IN MINUTES\n         MVC   PRINT+107(2),TEMPTIME+4 MOVE IN SECONDS\n         MVC   PRINT+103(1),=C':'     MOVE IN SEPERATOR\n         MVC   PRINT+106(1),=C':'     MOVE IN SEPERATOR\n         BAL   R12,PRINTER           PRINT IT\n         MVC   PRINT(1),=C' '        CLEAR CARRIAGE CONTROL BIT\n         MVC   PRINT+2(1),=C'='      GET READY TO UNDERLINE\n         MVC   PRINT+3(36),PRINT+2   UNDERLINE DATE\n         MVC   PRINT+94(15),PRINT+2  UNDERLINE TIME\n         BAL   R12,PRINTER           PRINT IT\n         MVC   PRINT+59(15),=C' S M F S C A N ' PRETTY PROGRAM FLASH\n         MVC   PRINT+2(5),=C'PAGE '  MOVE IN PAGE CONSTANT\n         CVD   R4,PARMS              CONVERT R4 TO DECIMAL\n         LA    R4,PARMS              LOAD ADDRESS OF PARMS INTO R4\n         OI    7(R4),X'0F'           FORCE 'F' IN LAST BIT\n         UNPK  UNPCKDTE,0(8,R4)      UNPACK PAGE COUNT\n         LA    R4,UNPCKDTE           ADDRESS OF UNPCKDTE IN R4\n         MVC   PRINT+7(4),12(R4)     MOVE IN PAGE COUNT\n         BAL   R12,PRINTER            PRINT IT\n         MVC   PRINT+60(1),=C'='    UNDERLINE\n         MVC   PRINT+61(12),PRINT+60    UNDERLINE\n         MVC   PRINT+2(9),PRINT+60      UNDERLINE\n         BAL   R12,PRINTER            PRINT IT\n         BAL   R12,PRINTER           PRINT BLANK LINE\n         CLI   TYPEFLAG,C'S'         SYSIN PROCESSING ?\n         BNE   TESTNEXT              NO - SKIP\n         MVC   PRINT+39(25),=C'SYSIN CONTROL CARD REPORT'\n         BAL   R12,PRINTER\n         MVC   PRINT+39(1),=C'='      UNDER LINE IT\n         MVC   PRINT+40(24),PRINT+39\n         BAL   R12,PRINTER\n         MVC   PRINT+2(27),=C'SYSIN CARD IMAGES FOLLOW :-'\n         BAL   R12,PRINTER\n         BAL   R12,PRINTER      BLANK LINE\n         B     EOJ\nTESTNEXT LA    R2,PRINT+2\n         MVC   0(18,R2),=C'SMF TYPE 30 RECORD'\n         LA    R2,19(R2)\n         CLI   TYPEFLAG,C'F'       FULL REPORT ?\n         BE    FULL                YES - PRINT IT\n         MVC   0(7,R2),=C'SUMMARY'\n         LA    R2,8(R2)\n         B     MOVEREP                NOW MOVE IN REPORT\nFULL     MVC   0(4,R2),=C'FULL'\n         LA    R2,5(R2)\nMOVEREP  MVC   0(6,R2),=C'REPORT'\n         LA    R2,7(R2)\n         BAL   R12,PRINTER            PRINT IT\n         BAL   R12,PRINTER      BLANK LINE\n         MVC   PRINT,SUMMTIT\n         CLI   TYPEFLAG,C'F'       FULL REPORT\n         BNE   A#PRINT1\n         MVC   PRINT+97(8),=C' PROGRAM'\n         MVC   PRINT+106(8),=C'  STEP  '\n         MVC   PRINT+115(8),=C'  PROC  '\nA#PRINT1 BAL   R12,PRINTER\n         MVC   PRINT,SUMMTIT2\n         CLI   TYPEFLAG,C'F'       FULL REPORT\n         BNE   A#PRINT2\n         MVC   PRINT+97(7),=C'  NAME  '\n         MVC   PRINT+106(7),=C'  NAME  '\n         MVC   PRINT+115(7),=C'  STEP  '\nA#PRINT2 BAL   R12,PRINTER\n         MVC   PRINT,SUMMTIU\n         CLI   TYPEFLAG,C'F'       FULL REPORT\n         BNE   A#PRINT3\n         MVC   PRINT+96(28),PRINT+95\nA#PRINT3 BAL   R12,PRINTER\n         B     EOJ\nFULLREP  EQU   *\nEOJ      L     R5,APAGE        ADDRESS OF PAGE COUNT\n         L     R4,0(R5)        PAGE COUNT\n         LA    R4,1(R4)\n         ST    R4,0(R5)        STORE IT\n         EOJ\n         DC    C'ADDRESS AREA ='\n***********************************************************************\n***  THE FOLLOWING IS THE PARAMETER LIST AS PASSED BY SMFSCAN       ***\n***********************************************************************\nADDRESS  DS    11F\nSAVEADDR EQU   ADDRESS+0,44\nAFLAGS   EQU   ADDRESS+0,4\nAPRINT   EQU   ADDRESS+4,4\nACLASSES EQU   ADDRESS+8,4\nAPROGS   EQU   ADDRESS+12,4\nAJOBS    EQU   ADDRESS+16,4\nAATIME   EQU   ADDRESS+20,4\nABTIME   EQU   ADDRESS+24,4\nACTIME   EQU   ADDRESS+28,4\nAETIME   EQU   ADDRESS+32,4\nAPSAVE   EQU   ADDRESS+36,4\nAPAGE    EQU   ADDRESS+40,4\n***********************************************************************\n*** PRINTER SUBROUTINE                                              ***\n***********************************************************************\n*** PURPOSE : TO PRINT LINE                                         ***\n*** EXIT    : BR 12                                                 ***\n*** CALLS   : NOTHING                                               ***\n***********************************************************************\nPRINTER  PUT   0(R3),PRINT         PUT OUT PRINT LINE\n         MVI   PRINT,C' '             AND CLEAR\n         MVC   PRINT+1(L'PRINT-1),PRINT      PRINT LINE OUT\n         BR    R12         <========== SUBROUTINE RETURN\n*** END OF PRINTER SUBROUTINE *****************************************\nPARMS    DS    0D\nPARM1    DS    F\nPARM2    DS    F\nTIME     DS    F\nDATE2    DS    F\nPAGECNT  DS    F\nGOTTEN   DS    F\nUNPCKDTE DS    CL16                UNPACK AREA FOR EDITING\nTEMPTIME EQU   UNPCKDTE,6\nOUTDATE  DS    CL50\nPRINT    DC    CL133' '\nSUMMTIT  DC    CL133'    JOB       START        END        CPU        EX\n               LAPSED     EXCP  COMP  C PR RUN   RUN    JULIAN'\nSUMMTIT2 DC    CL133'    NAME      TIME         TIME       TIME        X\n               TIME       COUNT CODE  L TY DAY   DATE   DATE  '\nSUMMTIU  DC    CL133'  ------------------------------------------------X\n               -----------------------------------------------'\nCLASSES  DS    CL8\nJOBS     DS    4CL10\nPROGS    DS    4CL10\nATIME    DS    CL5\nBTIME    DS    CL5\nCTIME    DS    CL6\nETIME    DS    CL6\nPSAVE    DS    CL3\nFLAGS    DS    CL14\nCONTFLAG EQU   FLAGS+0,1\nSUMFLAG  EQU   FLAGS+1,1\nCLASFLAG EQU   FLAGS+2,1\nNOTCFLAG EQU   FLAGS+3,1\nJOBFLAG  EQU   FLAGS+4,1\nPROGFLAG EQU   FLAGS+5,1\nPRTYFLAG EQU   FLAGS+6,1\nNOPRFLAG EQU   FLAGS+7,1\nAFTRFLAG EQU   FLAGS+8,1\nBFORFLAG EQU   FLAGS+9,1\nTYPEFLAG EQU   FLAGS+10,1\nELAPFLAG EQU   FLAGS+11,1\nCPUTFLAG EQU   FLAGS+12,1\nFLUSFLAG EQU   FLAGS+13,1\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07SMDOC": {"ttr": 9987, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x034\\x034\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 820, "newlines": 820, "modlines": 0, "user": "UKGUIDE"}, "text": "1\n\n\n\n\n\n\n\n\n            SSSSSS\n           SS    SS\n            SSSS\n              SSSS\n           SS    SS\n            SSSSSS\n                    MM    MM\n                    MMM  MMM\n                    MM MM MM\n                    MM    MM\n                    MM    MM\n                    MM    MM\n                             FFFFFFFF\n                             FF\n                             FF\n                             FFFFFF\n                             FF\n                             FF\n                                       SSSSSS\n                                      SS    SS\n                                       SSSS\n                                         SSSS\n                                      SS    SS\n                                       SSSSSS\n                                                CCCCCC\n                                               CC    CC\n                                               CC\n                                               CC\n                                               CC    CC\n                                                CCCCCC\n                                                        AAAAAA\n                                                       AA    AA\n                                                       AA    AA\n                                                       AAAAAAAA\n                                                       AA    AA\n                                                       AA    AA\n                                                                NN    NN\n                                                                NNN   NN\n                                                                NN NN NN\n                                                                NN   NNN\n                                                                NN    NN\n                                                                NN     N\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        SMFSCAN USER INSTRUCTIONS\n                        -------------------------\n1\n1\n0                                                                      i\n\n  *********************************************************************\n  *                                                                   *\n  *                       D I S C L A I M E R                         *\n  *                                                                   *\n  *     This computer programming material has been developed by      *\n  *     Kevin E. Ferguson, Technical Support Manager, at Cleveland    *\n  *     County Council. Please address any inquiries to:-             *\n  *                                                                   *\n  *         Cleveland County Council,                                 *\n  *         P.O. Box 17,                                              *\n  *         Melrose House,                                            *\n  *         1 Melrose Street,                                         *\n  *         Middlesbrough,                                            *\n  *         Cleveland. UK                                             *\n  *         TS1 1LY                                                   *\n  *         (0642) 248155                                             *\n  *                                                                   *\n  *         ATTN:  K.E.Ferguson (Ext. 2364)                           *\n  *         (or:   Technical Support (Ext. 2363))                     *\n  *                                                                   *\n  *   This material has been used successfully by Cleveland County    *\n  *   Council, and to the best of our knowledge this material and any *\n  *   system(s) of which it is a part are operational as of the       *\n  *   service level or date stated in the body of this material (if   *\n  *   so stated). However, NO warranty is given or implied as to the  *\n  *   accuracy of this material or any related material or systems,   *\n  *   and no responsibility is assumed for any effect or modification *\n  *   directly or indirectly caused by the use of this material.      *\n  *   It is the responsibility of any user of this material to        *\n  *   evaluate its usefulness to the user's environment.              *\n  *                                                                   *\n  *   Cleveland County Council does not guarantee to keep this or any *\n  *   related material current, nor does it guarantee to provide      *\n  *   any corrections or extensions described by any users of this    *\n  *   material, or any corrections or extensions made in the future   *\n  *   by Cleveland County Council itself.                             *\n  *                                                                   *\n  *********************************************************************\n1\n0ii\n\n  *********************************************************************\n  *                                                                   *\n  *                       C O P Y R I G H T                           *\n  *                                                                   *\n  *     This computer programming material remains the exclusive      *\n  *     property of Cleveland County Council. Permission for its use  *\n  *     may be obtained by contacting :-                              *\n  *                                                                   *\n  *         Cleveland County Council,                                 *\n  *         P.O. Box 17,                                              *\n  *         Melrose House,                                            *\n  *         1 Melrose Street,                                         *\n  *         Middlesbrough,                                            *\n  *         Cleveland. UK                                             *\n  *         TS1 1LY                                                   *\n  *         (0642) 248155                                             *\n  *                                                                   *\n  *         ATTN:  K.E.Ferguson (Ext. 2364)                           *\n  *         (or:   Technical Support (Ext. 2363))                     *\n  *                                                                   *\n  *   Cleveland County Council hereby grants permission for this      *\n  *   programming material to be :-                                   *\n  *                                                                   *\n  *   a). Stored on your system and displayed on your terminals.      *\n  *                                                                   *\n  *   b). Modified to meet your sites specific needs.                 *\n  *                                                                   *\n  *   c). Printed (or Photocopied), but only the specific number of   *\n  *       copies as are necessary for your sites needs.               *\n  *                                                                   *\n  *   d). Circulated amongst bona fida members of the following IBM   *\n  *       user groups or their sub-groups :-                          *\n  *                                                                   *\n  *            i) G.U.I.D.E. (UK and US)                              *\n  *           ii) SHARE                                               *\n  *                                                                   *\n  *       with the provisor that the copyright is not infringed by    *\n  *       those members.                                              *\n  *                                                                   *\n  *********************************************************************\n1\n0                                                                   iii\n\n                                  Contents\n                                  --------                        Page\n                                                                  ----\n      Disclaimer ................................................   i\n      Copyright .................................................  ii\n      CONTENTS .................................................. iii\n      Description ...............................................   1\n      Sample JCL ................................................   2\n             Sample Jobstream ...................................   3\n      AFTER control card parameter ..............................   5\n      BEFORE control card parameter .............................   6\n      CLASS control card parameter ..............................   7\n      CPU control card parameter ................................   8\n      DATE control card parameter ...............................   9\n      DAY control card parameter ................................  10\n      ELAPSED control card parameter ............................  11\n      FLUSHED control card parameter ............................  12\n      JDATE control card parameter ..............................  13\n      JOB control card parameter ................................  14\n             Examples of how to code the JOB parameter ..........  15\n      NOPRTY control card parameter .............................  16\n      PROGRAM control card parameter ............................  17\n      PRTY control card parameter ...............................  18\n      SUMMARY control card parameter ............................  19\n1\n01\n\n                              Description\n                              -----------\n\n SMFSCAN will produce reports from SMF TYPE 30 records of JOB activity.\n\n It is NOT intended as a IFASMFDP replacement, indeed IFASMFDP should\n be used for selecting SMF TYPE 30 for input to SMFSCAN to reduce the\n EXCP count of SMFSCAN.\n\n   These reports can be tailored by the user by use of SYSIN control\n cards. These control cards must be 80 byte records, they can however\n be continued on several cards by coding a comma after the parameter. If\n there is an error encountered on any control card the remainder of the\n control cards are ignored and NO report from the SMF records will be\n produced. SMFSCAN will also in this instance return a condition code of\n 16.\n\n   It should be noted that SMFSCAN will only produce one report i.e. if\n more than one report is required out of SMFSCAN then a multstep job\n must be run to execute SMFSCAN for each report required.\n\n   The SYSIN cards are free format. For a description of the control\n card parameters refer to the relevant portion of this document.\n\n1\n0                                                                     2\n\n                               Sample JCL\n                               ----------\n\n   The JCL required to run SMFSCAN is described below.\n\n\n    1   //jobname  JOB account.......................\n    2   //stepname EXEC PGM=SMFSCAN\n    3   //STEPLIB  DD   DSN=user.loadlib,DISP=SHR\n    4   //SYSPRINT DD   SYSOUT=*\n    5   //SYSUT1   DD   DSN=smf.input.file,DISP=SHR\n    6   //SYSIN    DD   ................\n\n\n\n\n  CARD   COMMENT\n  ----   ------------------------------------------------------------\n   1     Required. Any valid site JOB card.\n\n   2     Required. EXEC card. No parameters are needed\n\n   3     Optional. This card defines the load library in which SMFSCAN\n                   resides, if this library is defined in the\n                   SYS1.PARMLIB member LNKLSTxx then this card may be\n                   omitted.\n\n   4     Required. This is the report output file.\n\n   5     Required. This is the file that contains the SMF TYPE 30\n                   records. It is suggested that it contains only TYPE\n                   30 records in order to keep the IO's to a minimum.\n\n   6     Optional. This is the input control card file. If it is omitted\n                   ALL jobs in ALL classes will be reported on. If it is\n                   coded it must have a LRECL of 80 bytes.\n\n1\n03\n\n                             Sample Jobstream\n                             ----------------\n\n    The following sample jobstream is an example of how to extract TYPE\n 30 records for processing by SMFSCAN.\n\n\n //P2000KFS JOB (CZD,2000,HSKP,CZT001),SMFSCAN,CLASS=R\n //*******************************************************************\n //***                       W A R N I N G                         ***\n //***                       -------------                         ***\n //*** THIS CODE WILL NEED MODIFICATION TO RUN ANYWHERE EXCEPT     ***\n //*** CLEVELAND COUNTY COUNCIL. USE OF THIS CODE IS SUBJECT TO    ***\n //*** TO THE DISCLAIMER IN THAT NO RESPONSIBILITY TO ITS VALIDITY ***\n //*** OR CORRECTNESS IS ACCEPTED BY CLEVELAND COUNTY COUNCIL.     ***\n //***                                                             ***\n //*******************************************************************\n //*******************************************************************\n //*** STEPDEL  - EXECUTE UTDELETE TO DELETE THE FILE THAT WILL    ***\n //***            CONTAIN THE SMF TYPE 30 RECORDS. THIS ALLOWS     ***\n //***            THE JOBSTREAM TO BE RUN SEVERAL TIMES.           ***\n //*******************************************************************\n //STEPDEL  EXEC PGM=UTDELETE,PARM='CZT001.SMF.KEVIN'\n //STEPLIB  DD   DSN=CZT001.LOADLIB,DISP=SHR\n //*******************************************************************\n //*** STEP1    - EXECUTE IEFBR14 TO ALLOCATE THE FILE THAT WILL   ***\n //***            CONTAIN THE SMF TYPE 30 RECORDS.                 ***\n //*******************************************************************\n //STEP1    EXEC PGM=IEFBR14\n //DUMPOUT  DD   DSN=CZT001.SMF.KEVIN,DISP=(,CATLG),\n //         SPACE=(CYL,(50,5)),UNIT=SYSDA,\n //         DCB=(LRECL=32760,BLKSIZE=4096,RECFM=VBS)\n //*******************************************************************\n //*** STEP2    - EXECUTE IFASMFDP TO CREATE THE FILE THAT WILL    ***\n //***            CONTAIN THE SMF TYPE 30 RECORDS.                 ***\n //***   NOTE.    THIS IS THE BEST PLACE TO SELECT RECORDS BY DATE ***\n //***            REFER TO THE IBM MANUAL GC28-1030                ***\n //***            'MVS SPL SYSTEM MANAGEMENT FACILITIES' FOR MORE  ***\n //***            DETAILS.                                         ***\n //*******************************************************************\n //STEP2    EXEC PGM=IFASMFDP,TIME=40\n //SYSPRINT DD   SYSOUT=*\n //DUMPIN   DD   DSN=SYS1.MAN1,DISP=SHR\n //DUMPIN2  DD   DSN=SYS1.MAN2,DISP=SHR\n //*******************************************************************\n //*** DUMPIN3  REFERS TO OUR DAILY COLLECTION FILE                ***\n //*******************************************************************\n //DUMPIN3  DD   DSN=CCC.SMF.DUMPFILE.DAILY,DISP=SHR\n //DUMPOUT  DD   DSN=CZT001.SMF.KEVIN,DISP=MOD\n //SYSIN    DD   *\n  INDD(DUMPIN,OPTIONS(DUMP))\n  INDD(DUMPIN2,OPTIONS(DUMP))\n  INDD(DUMPIN3,OPTIONS(DUMP))\n    OUTDD(DUMPOUT,TYPE(30))\n1\n0                                                                     4\n\n                         Sample Jobstream (Continued)\n                         ----------------------------\n\n\n //*******************************************************************\n //*** STEP3    - EXECUTE SMFSCAN TO PRODUCE DESIRED REPORT        ***\n //*******************************************************************\n //STEP3    EXEC PGM=SMFSCAN\n //STEPLIB  DD   DSN=CZT001.LOADLIB,DISP=SHR\n //SYSUT1   DD   DSN=CZT001.SMF.KEVIN,DISP=SHR\n //SYSPRINT DD   SYSOUT=*\n //SYSIN    DD   *\n         SUMMARY,\n         CLASS=R,JOB=P2000*,\n         BEFORE=17.00,AFTER=08.00,CPU>00.01\n //*\n\n This will produce a summary report of class R jobs whose names start\n P2000 that used more than 1 minutes CPU time run before 17.00 hours but\n after 08.00 hours for all the days that there is data in the file.\n1\n05\n\n                         AFTER Control Card Parameter\n                         ----------------------------\n\n\n    SYNTAX  :-\n                                  AFTER=hh.mm\n\n This parameter will restrict the report to jobs that have run after\n the time specified.\n\n\n  Rules For Coding AFTER\n  ----------------------\n\n   a).  The time must be specified in the format hh.mm\n\n   b).  Leading zeros MUST be coded (sorry folks).\n\n   c).  hh is the hour in 24 hour clock format i.e 01 = 1 am etc.\n\n   d).  The value for hh must be in the range 00 - 24.\n\n   e).  mm is the minutes value. This must be coded even if it is 00.\n\n   f).  The value for mm must be in the range 00 - 59.\n1\n0                                                                     6\n\n                         BEFORE Control Card Parameter\n                         -----------------------------\n\n\n    SYNTAX  :-\n                                 BEFORE=hh.mm\n\n This parameter will restrict the report to jobs that have run before\n the time specified.\n\n\n  Rules For Coding BEFORE\n  -----------------------\n\n   a).  The time must be specified in the format hh.mm\n\n   b).  Leading zeros MUST be coded (sorry folks).\n\n   c).  hh is the hour in 24 hour clock format i.e 01 = 1 am etc.\n\n   d).  The value for hh must be in the range 00 - 24.\n\n   e).  mm is the minutes value. This must be coded even if it is 00.\n\n   f).  The value for mm must be in the range 00 - 59.\n1\n07\n\n                         CLASS Control Card Parameter\n                         ----------------------------\n\n\n    SYNTAX  :-\n                   i)            CLASS=12345678\n\n                                      or\n\n                   ii)           CLASS=\u00ac12345678\n\n This parameter will restrict the report to jobs that have, in case (i)\n run in any of the classes specified or, in case (ii) run in any classes\n but those specified.\n\n\n  Rules For Coding CLASS\n  ----------------------\n\n   a).  The maximum number of classes that can be specified is 8.\n\n   b).  The minimum number of classes that can be specified is 1.\n\n   c).  The not(\u00ac) sign is not included in the class count.\n\n   d).  The 2 forms of the CLASS parameter are mutually exclusive.\n1\n0                                                                     8\n\n                           CPU Control Card Parameter\n                           --------------------------\n\n\n    SYNTAX  :-\n                                    |<|\n                                 CPU|=|hh.mm\n                                    |>|\n\n This parameter will restrict the report to jobs that have matched the\n specific criterea with regard to CPU time.\n\n\n  Rules For Coding CPU\n  --------------------\n\n   a).  The time must be specified in the format hh.mm\n\n   b).  Leading zeros MUST be coded (sorry folks).\n\n   c).  hh is the hour in 24 hour clock format i.e 01 = 1 am etc.\n\n   d).  The value for hh must be in the range 00 - 24.\n\n   e).  mm is the minutes value. This must be coded even if it is 00.\n\n   f).  The value for mm must be in the range 00 - 59.\n\n   g).  >, <, =, are the only options permitted. One must be coded.\n\n   h).  >, <, =, are mutually exclusive.\n1\n09\n\n                          DATE Control Card Parameter\n                          ---------------------------\n\n\n    SYNTAX  :-\n                                DATE=dd/mm/yy\n\n This parameter will restrict the report to jobs that ran on the date\n specified.\n\n\n  Rules For Coding DATE\n  ---------------------\n\n   a).  The date must be specified in the format dd/mm/yy\n\n   b).  Leading zeros MUST be coded (sorry folks).\n\n   c).  The values for dd, mm and yy must be numeric.\n\n   d).  The value for dd must not exceed 31.\n\n   f).  The value for dd or mm must not be 00.\n\n   f).  The value for mm must not exceed 12.\n\n   g).  No checking is performed for the number of days in a month with\n        the exception of points d) and e).\n\n   h).  The seperators MUST be slashes (/).\n\n1\n0                                                                     10\n\n                           DAY Control Card Parameter\n                           --------------------------\n\n\n    SYNTAX  :-\n                                    |SUN|\n                                    |MON|\n                                    |TUE|\n                                DAY=|WED|\n                                    |THU|\n                                    |FRI|\n                                    |SAT|\n\n This parameter will restrict the report to jobs that ran on the day\n specified.\n\n\n  Rules For Coding DAY\n  --------------------\n\n   a).  The value for DAY must be one of the above options\n1\n011\n\n                         ELAPSED Control Card Parameter\n                         ------------------------------\n\n\n    SYNTAX  :-\n                                    |<|\n                             ELAPSED|=|hh.mm\n                                    |>|\n\n This parameter will restrict the report to jobs that have matched the\n specific criterea with regard to their elapsed time.\n\n\n  Rules For Coding ELAPSED\n  ------------------------\n\n   a).  The time must be specified in the format hh.mm\n\n   b).  Leading zeros MUST be coded (sorry folks).\n\n   c).  hh is the hour in 24 hour clock format i.e 01 = 1 am etc.\n\n   d).  The value for hh must be in the range 00 - 24.\n\n   e).  mm is the minutes value. This must be coded even if it is 00.\n\n   f).  The value for mm must be in the range 00 - 59.\n\n   g).  >, <, =, are the only options permitted. One must be coded.\n\n   h).  >, <, =, are mutually exclusive.\n1\n0                                                                    12\n\n                         FLUSHED Control Card Parameter\n                         ------------------------------\n\n\n    SYNTAX  :-\n\n                             FLUSHED\n\n This parameter will include on the report jobs that have been flushed\n i.e JCL errors. If this is not coded then these jobs will be omitted if\n the CPU or ELAPSED parameters are coded.\n1\n013\n\n                           JDATE Control Card Parameter\n                           ----------------------------\n\n\n    SYNTAX  :-\n\n                             JDATE=yyddd\n\n This parameter will include on the report jobs that run on a particular\n Julian date.\n\n\n  Rules For Coding JDATE\n  ----------------------\n\n   a).  The Julian date day portion must not exceed 366.\n\n   b).  The Julian date day portion must not be 000.\n\n   c).  Leading zeros MUST be coded (sorry folks).\n\n   d).  There is NO check for a leap year.\n1\n0                                                                     14\n\n                            JOB Control Card Parameter\n                            --------------------------\n\n\n    SYNTAX  :-\n\n                                JOB|S|=job selection\n\n\n This parameter will include on the report jobs that match the specified\n jobname selection. If this is not coded all jobs, started tasks, TSO\n logons will be reported on.\n\n\n  Rules For Coding JOBS\n  ---------------------\n\n   a).  Up to 4 job selection critera may be specified.\n\n   b).  If more than 1 selection critera is specified then they should\n        be enclosed in brackets and seperated by commas e.g.\n\n         JOB=(P2000KF1,P2000KF2) ......... Valid\n         JOBS=(P2000KF1,P2000KF2) ........ Valid\n         JOBS=P2000KF1,P2000KF2 .......... Invalid\n         JOBS=(P2000KF1:P2000KF2) ........ Invalid\n\n   c).  To EXclude particular jobs code \u00ac i.e. JOBS=(\u00acP2000KF1) this\n        select all jobs except P2000KF1\n\n   d).  To code generic jobnames use * i.e JOBS=(P2000*) this will\n        report on all jobs that begin with P2000\n\n   e).  To report on jobs whose name contain a specific string code /\n        i.e. JOBS=(/2000) will report on all jobs whose names contain\n        the string 2000 anywhere in their names.\n\n   f).  The parameter can be coded as either JOB or JOBS.\n\n   g).  / and * are mutally exclusive in the same critera i.e /P22*\n\n   h). IMPORTANT jobs are selected or rejected by matching from the\n       leftmost critera to the rightmost. This means that if a job is\n       rejected by one critera it cannot be selected by a subsequent one\n1\n015\n\n                   Examples On How To Code The JOB Parameter\n                   -----------------------------------------\n\n\n Here is a list of JOB parameter examples and a description of their\n effect, if any.\n\n JOB=(P2000KF1) or JOBS=P2000KF1\n\n Valid..... Only selects jobs called P2000KF1 for reporting.\n\n\n JOB=(\u00acP2000KF1) or JOBS=\u00acP2000KF1\n\n Valid..... Only selects jobs not called P2000KF1 for reporting.\n\n\n JOBS=(/HSKP)\n\n Valid..... Only selects jobs whose names contain the string HSKP\n            anywhere in their names. e.g. CHSKP31L, P200HSKP would be\n            selected for reporting.\n\n\n JOBS=(\u00ac/HSKP)\n\n Valid..... Only selects jobs whose names do not contain the string\n            HSKP anywhere in their names. e.g. CHSKP31L, P200HSKP would\n            be selected for reporting.\n\n\n JOBS=(\u00ac/HS*)\n\n Invalid .. / and * are mutually exclusive in the same critera.\n\n\n JOBS=(P2000*,/HSKP)\n\n Valid .... This will select jobs whose names begin P2000 or whose names\n            contain the string HSKP.\n1\n0                                                                     16\n\n                         NOPRTY Control Card Parameter\n                         -----------------------------\n\n\n    SYNTAX  :-\n\n                             NOPRTY\n\n This parameter will include on the report jobs that have been run with\n no PRTY= coded on the JOB card.\n\n\n NOPRTY is mutually exclusive with PRTY keyword.\n1\n017\n\n                            PROGRAM Control Card Parameter\n                            ------------------------------\n\n\n    SYNTAX  :-\n\n                             PROGRAM|S|=program selection\n\n\n This parameter will include on the report job steps that match the\n specified selection critera.\n\n\n  Rules For Coding PROGRAMS\n  -------------------------\n\n   a).  The same coding rules aplly to PROGRAM as apply to JOB. Please\n        refer to page 12 for a full description.\n\n   b).  PROGRAM and SUMMARY counteract each other.\n1\n0                                                                     18\n\n                              PRTY Control Card Parameter\n                              ---------------------------\n\n\n    SYNTAX  :-\n                                 |>|\n                             PRTY|=|nn\n                                 |<|\n\n\n This parameter will include on the report jobs that have been run with\n PRTY= coded on the JOB card.\n\n\n  Rules For Coding PRTY\n  ---------------------\n\n   a).  nn must contain any leading zeros.\n\n   b).  >, =, <, are mutually exclusive with each other.\n\n   c).  One of >, =, <, must be coded.\n\n   d).  PRTY is mutually exclusive with NOPRTY.\n1\n019\n\n                         SUMMARY Control Card Parameter\n                         ------------------------------\n\n\n    SYNTAX  :-\n\n                             SUMMARY\n\n This parameter will force the report to only process subtype 5 (JOB\n termination) records and report on them.\n1\n0\n                           USERS FEEDBACK FORM\n                           -------------------\n\n  Your Name  :\n              --------------------------------------------------------\n\n  Department :\n              --------------------------------------------------------\n\n  Address    :\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n  Postcode   :\n              ------------\n\n  Telephone  :                          Extension :\n              ----------------------               --------------\n\n  Comments   :\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n              --------------------------------------------------------\n\n Please return completed form to :-\n\n                     Mr K. E. Ferguson,\n                      Technical Services Manager,\n                       Cleveland County Council,\n                        Melrose House,\n                         1, Melrose Street,\n                          MIDDLESBROUGH,\n                           Cleveland.\n                            TS1 1LY\n\n               Telephone : 0642 248155  Extension 2364\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07SV255": {"ttr": 10246, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00i\\x00i\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 105, "newlines": 105, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n*      THIS IS A TYPE 3 USER SVC WHOSE FUNCTION IS TO ISSUE A USER          L000\n*      COMMAND INTERNALLY BY ISSUING SVC 34. ON ENTRY REG 1 SHOULD          0002\n*      POINT TO A COMMAND INPUT BUFFER(CIB) CONTAINING THE COMMAND.         0003\n*                                                                           0004\n*           TWO ABENDS CAN OCCUR-                                           0013\n*                    02F - REG0 NOT = 0 (SHOULD NEVER OCCUR)                0014\n*                    01F - REG15 GIVES THE PRECISE ERROR                    0015\n*                          4 - LENGTH OF COMMAND GT 255.                    0016\n*                          8 - 3RD + 4TH BYTES NE 0.                        0017\n*                         16 - COMMAND TEXT DOES NOT END WITH A BLANK.\n*\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\nSVC255   CSECT                                                              0018\n         USING *,6                  REG 6 IS BASE REG.                      0019\n         SR    15,15                                                        0020\n         CLI   0(1),X'00'           DOES THE LENGTH OF THE COMMAND          0021\n         BE    A1                   EXCEED 255 BYTES...                     0022\n         LA    15,4                                                         0023\n         B     ERROR                                                        0024\nA1       CLC   2(2,1),=X'0000'      RESERVED BYTES EQ ZERO....              0025\n         BE    B1                                                           0026\n         LA    15,8                                                         0027\n         B     ERROR                                                        0028\nB1       LA    2,0(1)               POINT TO CIB START                      0029\n         AH    2,0(1)               ADD LENGTH OF CIB                       0030\n         BCTR  2,0                  BACK A BYTE                             0031\n         CLI   0(2),C' '            IS THE LAST BYTE A BLANK...             0032\n         BE    C1                                                           0033\n         LA    15,16                                                        0034\n         B     ERROR                                                        0035\nC1       LTR   0,0                  IS REG0 EQ ZERO                         0036\n         BE    D1                                                           0037\n         L     1,=X'C02F0000'                                               0038\n         SVC   13                                                           0039\nERROR    L     1,=X'C01F0000'                                               0040\n         SVC   13                                                           0041\nD1       LA    1,0(1)               ZERO HIGH ORDER BYTE                    0042\n         SVC   34                                                           0043\n         BR    14                                                           004\n         LTORG                                                              0045\n         END                                                                0046\n*                     SYS1.LPALIB(IGC0025E)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07UTCPY": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x01j\\x01j\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 362, "newlines": 362, "modlines": 0, "user": "UKGUIDE"}, "text": "         TITLE 'UTCOPY - IEBCOPY PRE-PROCESSOR'\nUTCOPY   BEGIN R12\n         REGEQS\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n**                          U T C O P Y                              **\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n**  THIS PROGRAM 'FRONT ENDS' IEBCOPY SO THAT IT IS POSSIBLE TO DO   **\n**  A GENERIC COPY I.E. ALL MEMBERS STARTING ABC*****.               **\n**                                                                   **\n**   THE FORMAT OF THE PASSED PARAMETER IS :-                        **\n**                                                                   **\n**                    PARM='ACTION,REPLACE,GENERIC'                  **\n**                                                                   **\n**   WHERE 'ACTION' CAN BE EITHER 'SELECT' OR 'EXCLUDE' AND MUST BE  **\n**   CODED. 'REPLACE' CODED AS 'R' SPECIFIES WHETHER EXISTING MEMBERS**\n**   ARE TO BE REPLACED OR NOT. 'R' CAN BE OMITTED BUT THE COMMA MUST**\n**   CODED. 'GENERIC' IS THE GENERIC TO BE COPIED.                   **\n**                                                                   **\n**   EXAMPLES OF PARAMETERS :-                                       **\n**                                                                   **\n**    PARM='SELECT,,IEB'      <=== THIS WILL COPY (WITHOUT REPLACING)**\n**                                 ALL MEMBERS WHOSE NAMES START IEB **\n**                                                                   **\n**    PARM='SELECT,R,IEB'     <=== THIS WILL COPY (WITH REPLACE) ALL **\n**                                 MEMBERS WHOSE NAMES START IEB     **\n**                                                                   **\n**    PARM='EXCLUDE,,IEB'     <=== THIS WILL COPY (WITHOUT REPLACING)**\n**                                 ALL MEMBERS WHOSE NAMES DO NOT    **\n**                                 WITH IEB                          **\n**   SAMPLE JCL :-                                                   **\n**   //STEP1    EXEC PGM=UTCOPY,PARM='SELECT,,FRED'                  **\n**   //STEPLIB  DD   DSN=CZT001.LOADLIB,DISP=SHR                     **\n**   //SYSPRINT DD   SYSOUT=*                                        **\n**   //INPDS    DD   DSN=INPUT.PDS,DISP=SHR                          **\n**   //STEPCRD  DD   DSN=&&TEMP,DISP=(,PASS),SPACE=(TRK,5),          **\n**   //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),UNIT=SYSDA             **\n**   //STEP2    EXEC PGM=IEBCOPY                                     **\n**   //SYSPRINT DD   SYSOUT=*                                        **\n**   //INPUT    DD   DSN=INPUT.PDS,DISP=SHR                          **\n**   //OUTPUT   DD   DSN=OUTPUT.PDS,DISP=SHR                         **\n**   //SYSIN    DD   DSN=*.STEP2.STEPCRD,DISP=SHR                    **\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\nGETPARM  EQU  *\n         L     R2,0(R1)             R2 = PARM\n         CLC   0(2,R2),=H'00'       IF NO PARM PRESENT\n         BNE   TESTSEL              THEN\n         MVC   MESS(L'MESS01),MESS01     WRITE ERROR MESS - STOP\n         B     WRITE\nTESTSEL  LA    R2,2(R2)             R2 = FIRST BYTE PARM DATA\n         LR    R3,R2                R3 = PARMS\n         CLC   0(6,R2),=C'SELECT'   IF PARM(1-6) = SELECT\n         BNE   TESTEXC              THEN\n         LA    R2,7(R2)                  SET R2 AT NEXT BYTE OF PARM\n         B     REPCARD              ELSE\nTESTEXC  CLC   0(7,R2),=C'EXCLUDE'       IF PARM(1-7) = EXCLUDE\n         BNE   MESS2                     THEN\n         LA    R2,8(R2)                       SET R2 NEXT BYTE OF PARM\n         B     REPCARD\nMESS2    MVC   MESS(L'MESS02),MESS02     ELSE\n         B     WRITE                          WRITE ERROR MESSAGE - END\nREPCARD  CLI   0(R2),X'6B'          IF NEXT BYTE \u00ac= COMMA\n         BE    PROCMEM              THEN\n         CLC   0(2,R2),=C'R,'            IF NEXT BYTES = 'R,'\n         BNE   MESS3                     THEN\n         MVI   REPFLAG,C'Y'                   SET REPFLAG = 'Y'\n         LA    R2,1(R2)                       SET R2 POINT AT COMMA\n         B     PROCMEM                   ELSE\nMESS3    MVC   MESS(L'MESS03),MESS03          WRITE ERROR MESSAGE - END\n         B     WRITE\nPROCMEM  BAL   R11,BUILDCOP         BUILD SYSIN COPY CARD\n         LA    R2,1(R2)             R2 = START ADDR OF FIRST MEMBER\n         LR    R4,R2                R4 = R2 - START ADDR OF NEXT MEMBER\n         XR    R5,R5                R5 = 0 - COUNTER FOR LGTH OF MEMBER\n         LA    R9,PARMLIST          R9 - POINTS TO START OF PARM TABLE\n         XR    R10,R10              R10 = 0 - NUMBER OF MEMBERS ENTERED\nLOOPD    EQU  *                     DO WHILE\n         CLI   0(R2),X'00'              (NOT END  OF PARM)\n         BE    ENDPARM\n         CLI   0(R2),X'6B'              IF THIS BYTE IS A COMMA\n         BNE   NEXBYTE                  THEN DO\n         STH   R5,0(R9)                      SAVE LENGTH OF MEMBER\n         BCTR  R5,0                          SUBTRACT 1 FOR EXECUTE\n         LA    R9,2(R9)                      SET POINTER FOR MEMBER\n         EX    R5,TABLOAD                    LOAD TABLE WITH MEMBER\n         LA    R9,8(R9)                      POINT R9 FOR NEXT ENTRY\n         LA    R10,1(R10)                    ENTRIES = ENTRIES + 1\n         XR    R5,R5                         ZERO LENGTH COUNTER\n         LA    R2,1(R2)                      POINT TO NEXT BYTE\n         LR    R4,R2                         R4 POINTS TO NEW MEMBER\n         B     LOOPD                         END\nNEXBYTE  EQU   *                        ELSE DO\n         LA    R5,1(R5)                      INCREMENT LENGTH COUNTER\n         LA    R2,1(R2)                      POINT TO NEXT BYTE\n         B     LOOPD                         END\n*                                       END\nENDPARM  STH   R5,0(R9)\n         BCTR  R5,0                          SUBTRACT 1 FOR EXECUTE\n         LA    R9,2(R9)\n         EX    R5,TABLOAD          LOAD LAST MEMBER IN TABLE\n         LA    R10,1(R10)          ENTRIES = ENTRIES + 1\n         B     OPENFIL\nTABLOAD  MVC   0(0,R9),0(R4)       STATEMENT THAT LOADS NAME IN TABLE\n*\nOPENFIL  OPEN  (INPDS)              OPEN INPUT PDS FILE\n         CLI   OPENFLG,C'Y'         IF OPEN ERROR\n         BE    ERRDSN               THEN DATA SET NOT FOUND\nLOOP     GET   INPDS,INSTRUC        READ BLOCK\n         LA    R6,INSTRUC           ADDRESSABILITY IN R6\n         LH    R7,0(R6)             LENGTH OF BLOCK IN R7\n         LA    R7,0(R7,R6)          END ADDRESS IN R7\n         LA    R6,2(R6)             SKIP PASSED LENGTH\nDIRLOOP  CR    R6,R7                DO WHILE STILL MORE BLOCK ENTRIES\n         BNL   LOOP                      READ NEXT BLOCK\n         CLC   0(4,R6),=X'FFFFFFFF'      IF LAST ENTRY\n         BE    ENDDIR                    THEN DROP OUT OF THIS LOOP\n         MVC   NUM(1),11(R6)             NUMBER OF USER BLOCKS\n         NI    NUM,X'1F'                 CLEAR ALL FLAGS BUT LENGTH\n         L     R8,NUMB                   PUT IN R8\n         MVC   MEMBER(8),0(R6)           SAVE MEMBER NAME\n         LA    R9,PARMLIST               R9 - START OF TABLE AGAIN\n         LR    R4,R10                    R4 - NUMBER OF ELEMENTS IN TAB\nTABLOOP  EQU   *                         DO WHILE NOT END OF TABLE\n         LH    R5,0(R9)                       R5 - LNGTH OF MEMBER\n         BCTR  R5,0                           MINUS 1 FOR EXECUTE\n         LA    R9,2(R9)                       POINT TO MEMBER\n         CLI   0(R9),C'*'                     POSITIONAL ?\n         BNE   COMPIT                         NO - GO AND COMPARE IT\n         BCTR  R5,0                        YES - DOWN R5\n         ST    R10,SAVER10\n         ST    R8,SAVER8\n         LA    R11,8                     MAX LOOP COUNT SET\n         LR    R10,R9\n         LA    R9,MEMBER\n         LA    R8,1(R10)\nCOMPLOOP EX    R5,COMPARE2\n         BE    OKNOW\n         LA    R9,1(R9)\n         BCT   R11,COMPLOOP\n         LR    R9,R10\n         L     R10,SAVER10\n         L     R8,SAVER8\n         B     NEXTTAB\nSAVER10  DS    F\nSAVER8   DS    F\nCOMPARE2 CLC   0(0,R8),0(R9)             THIS IS THE COMPARE STATEMENT\nOKNOW    LR    R9,R10\n         L     R10,SAVER10\n         L     R8,SAVER8\n         B     GOBUILD\nCOMPIT   EX    R5,COMPARE                     IF MEMBER = PARM MEMBER\n         BNE   NEXTTAB                        THEN\nGOBUILD  BAL   R11,BUILDCRD                        CALL BUILDCRD\nNEXTTAB  LA    R9,8(R9)                       POINT TO NEXT ENTRY\n         BCT   R4,TABLOOP                     END\n         B     GETNEXT\nCOMPARE  CLC   0(0,R9),MEMBER            THIS IS THE COMPARE STATEMENT\n*\nGETNEXT  MH    R8,=H'2'                  MULTIPLY BY 2 TO GET BYTES\n         LA    R8,12(R8)                 ADD 12 FIXED DIRECTORY INFO\n         LA    R6,0(R8,R6)               SET ADDRESS OF NEXT ENTRY\n         B     DIRLOOP                   END\nENDDIR   EQU   *\n         CLOSE (INPDS,,STEPCRD)\n         XR    R15,R15\nENDRET   L     R13,PRGMSAVE+4       RETURN SAVE AREA\n         RETURN (14,12),RC=(15)     LINK TO CALLER\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* THIS ROUTINE WRITES AN ERROR MESSAGE SETS A RETURN\n* CODE OF 12 AND THEN TERMINATES PROGRAM\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nWRITE    OPEN  (ERRPRNT,OUTPUT)     OPEN ERROR REPORT FILE\n         PUT   ERRPRNT,MESSDTA      WRITE MESSAGE\n         CLOSE (ERRPRNT)            CLOSE FILE\n         LA    R15,12               RETURN CODE 12 - BAD PARM DATA\n         B     ENDRET\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* EXIT LIST - IF OPEN FAILS CONTROL IS PASSED TO THIS ROUTINE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nOPENX    DS    0F\n         DC    XL1'91'\n         DC    AL3(ERRONOP)\n*\nERRONOP  CLC   0(2,R1),=X'0130'     IF ERROR = 0130\n         BNE   JUSTRET              THEN RETURN\n         MVI   3(R1),X'04'          ELSE FLAG OK TO IGNORE\n         MVI   OPENFLG,C'Y'              FLAG OPEN ERROR\nJUSTRET  RETURN\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* THIS ROUTINE WRITES AN ERROR MESSAGE SETS A RETURN\n* CODE OF 12 AND THEN TERMINATES PROGRAM\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nERRDSN   EQU   *\n         WTO   'DATASET NOT FOUND'\n         LA    R15,12               RETURN CODE 12 - DATASET NOT FOUND\n         B     ENDRET\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* THIS ROUTINE BUILDS THE COPY SYSIN CARD\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nBUILDCOP EQU   *\n         OPEN  (STEPCRD,OUTPUT)     OPEN OUTPUT FILE FOR SYSIN CARDS\n         MVI   OUTSTRUC,C' '\n         MVC   OUTSTRUC+1(79),OUTSTRUC\n         MVC   OUTSTRUC(34),=C'COPYOPER   COPY OUTDD=OUTPUT,INDD='\n         CLI   REPFLAG,C'Y'\n         BNE   NORM\n         CLC   0(7,R3),=C'EXCLUDE'\n         BNE   NORM\n         MVC   OUTSTRUC+34(11),=C'((INPUT,R))'\n         B     WRITECOP\nNORM     MVC   OUTSTRUC+34(5),=C'INPUT'\nWRITECOP PUT   STEPCRD,OUTSTRUC\n         BR    R11\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* THIS ROUTINE BUILDS A SELECT/EXCLUDE (DEPENDING ON PARM)\n* FOR THE GIVEN MEMBER\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nBUILDCRD EQU   *\n         LA    R2,OUTSTRUC\n         MVI   OUTSTRUC,C' '\n         MVC   OUTSTRUC+1(79),OUTSTRUC\n         CLC   0(6,R3),=C'SELECT'\n         BE    SELECT\n         MVC   11(16,R2),=C'EXCLUDE  MEMBER='\n         LA    R2,27(R2)\n         B     NORMCRD\nSELECT   MVC   11(15,R2),=C'SELECT  MEMBER='\n         LA    R2,26(R2)\nREPTEST  CLI   REPFLAG,C'Y'\n         BNE   NORMCRD\n         MVC   0(2,R2),=C'(('\n         LA    R2,2(R2)\n         MVC   0(8,R2),MEMBER\nLOOPMEM  CLI   0(R2),C' '\n         BE    ENDBIT\n         LA    R2,1(R2)\n         B     LOOPMEM\nENDBIT   MVC   0(5,R2),=C',,R))'\n         B     WRITEIT\nNORMCRD  MVC   0(8,R2),MEMBER\nWRITEIT  PUT   STEPCRD,OUTSTRUC\n         BR    R11\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* FILE DCB INFORMATION\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nINPDS    DCB  DSORG=PS,MACRF=(GM),DDNAME=INPDS,EXLST=OPENX,            X\n               BLKSIZE=256,RECFM=F,LRECL=256\nSTEPCRD  DCB  DSORG=PS,MACRF=(PM),DDNAME=STEPCRD,                      X\n               BLKSIZE=400,RECFM=FB,LRECL=80\nERRPRNT  DCB  DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,                     X\n               BLKSIZE=133,RECFM=FBA,LRECL=133\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* WORK FIELDS FOR ERROR MESSAGES\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nMESSDTA  DS   0CL133\nMESSCTL  DS   C\nMESS     DS   CL132\n*\nMESS01   DC   C'NO GENERIC MEMBER NAME PRESENT'\nMESS02   DC   C'SELECT/EXCLUDE MUST BE SPECIFIED'\nMESS03   DC   C'ONLY R MAY BE SPECIFIED FOR REPLACE CARD'\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* WORK FIELDS\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nPARMLIST DS   CL300\nOPENFLG  DC   CL1'N'\nREPFLAG  DC   CL1'N'\n         DS   0F\nINSTRUC  DS   CL256\n         DS   0F\nOUTSTRUC DS   CL80\nNUMB     DS   0F\n         DC   XL3'000000'\nNUM      DS   CL1\nMEMBER   DC   CL8' '\n         END\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07ZAP1": {"ttr": 10501, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n* THIS ZAP ALLOWS IPOUPDTE TO RUN AGAINST ANY PDS\n*\n* THE ZAP MAKES REDUNDANT THE NEED FOR A $$$COIBM MEMBER TO BE IN A PDS\n* BEFORE IPOUPDTE WILL WORK AGAINST IT. IT FITS IPOUPDTE AS SUPPLIED ON\n* ALL THE FOLLOWING SYSTEMS :-\n*\n*                    MVS SP 1.3.8\n*                    MVS XA 2.1.3\n*                    MVS XA 2.1.5\n*                    MVS XA 2.1.7\n*                    MVS XA 2.2\n*\n* THE MODULE RESIDES IN THE IPO LINKLIB\n*\nNAME  IPOUPDTE IPOUPDTE\n VER 054C  4780\n REP 054C  47F0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP1A": {"ttr": 10503, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x00\\x99)\\x1f\\x00\\x99)\\x1f\\x12C\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-10-18T00:00:00", "modifydate": "1999-10-18T12:43:01", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "*\n* THIS ZAP ALLOWS CPPUPDTE TO RUN AGAINST ANY PDS\n*\n* THE ZAP MAKES REDUNDANT THE NEED FOR A $$$COIBM MEMBER TO BE IN A PDS\n* BEFORE CPPUPDTE WILL WORK AGAINST IT. IT FITS CPPUPDTE AS SUPPLIED ON\n* ALL THE FOLLOWING SYSTEMS :-\n*\n*                    SERVERPAC\n*\n* THE MODULE RESIDES IN THE CPAC.RIMLIB\n*\nNAME  CPPUPDTE CPPUPDTE\n VER 055E  4780\n REP 055E  47F0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP2": {"ttr": 10505, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\n\\x00\\n\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n*\n*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN MVS SP 1.3.8\n*\n*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n*\nNAME IEBPTPCH IEBPPCH1\n VER 0CF8 D502,7008,7014\n REP 0CF8 D507,7000,700C\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP3": {"ttr": 10507, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n*\n*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN THE FOLLOWING MVS SYSTEMS\n*\n*                MVS XA 2.1.3\n*                MVS XA 2.1.5\n*                MVS XA 2.1.7\n*                MVS XA 2.2\n*\n*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n*\nNAME IEBPTPCH IEBPPCH1\n VER 0CEC D502,7008,7014\n REP 0CEC D507,7000,700C\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP3A": {"ttr": 10509, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00I\\x01\\x02\\x13o\\x01\\x02\\x13o\\x12H\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-05-16T00:00:00", "modifydate": "2002-05-16T12:48:49", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "*\n*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n*\n*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN THE FOLLOWING MVS SYSTEMS\n*\n*      OS/390 2.6 MODIFIED FROM CBT445.FILE244 A07ZAP3 BY DALE MC CART\n*\n*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n*\nNAME IEBPTPCH IEBPPCH1\n  VER 12F0 D502,7008,7014\n  REP 12F0 D507,7000,700C\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP3B": {"ttr": 10511, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x11\\x01\\x02\\x13o\\x01\\x02\\x13o\\x12I\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-05-16T00:00:00", "modifydate": "2002-05-16T12:49:11", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "*\n*      ZAP TO MAKE IEBPTPCH PRINT ALPHABETICALLY\n*\n*      THIS ZAP FITS IEBPTPCH AS SUPPLIED IN THE FOLLOWING MVS SYSTEMS\n*\n*      Z/OS 1.2 MODIFIED FROM CBT445.FILE244 A07ZAP3 BY DALE MC CART\n*\n*      IEBPTPCH RESIDES IN SYS1.LINKLIB\n*\nNAME IEBPTPCH IEBPPCH1\n  VER 12FC D502,7008,7014\n  REP 12FC D507,7000,700C\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP4": {"ttr": 10513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n*   ZAP TO STOP AN EXTERNAL WRITERS AT 'WAITING FOR WORK' MESSAGE\n*\n*   THIS ZAP FITS IASXWR00 AS SUPPLIED ON MVS SP 1.3.8\n*\n*   IASXWR00 RESIDES IN SYS1.LINKLIB ON SP SYSTEMS\n*\nNAME IASXWR00 IASXSD82\n VER 087E  D203,4014,7080                  MVC 14(3,R4),80(R7)\n VER 0884  D203,4018,600C                  MVC 18(3,R4),0C(R6)\n REP 087E  47F0,98DC,E9C1,D7E9,C1D7,0000   B   SD82NORM,ZAPZAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07ZAP5": {"ttr": 10515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "UKGUIDE"}, "text": "*\n*   ZAP TO STOP AN EXTERNAL WRITER AT 'WAITING FOR WORK' MESSAGE\n*\n*   THIS ZAP FITS THE FOLLOWING MVS/XA SYSTEMS :-\n*\n*                 MVS/XA 2.1.3\n*                 MVS/XA 2.1.5\n*                 MVS/XA 2.1.7\n*                 MVS/XA 2.2\n*\n*   IASXWR00 RESIDES IN SYS1.LPALIB ON XA SYSTEMS\n*\nNAME IASXWR00 IASXSD82\n VER 087C  D203,4014,7088                  MVC 14(3,R4),80(R7)\n VER 0882  D203,4018,600C                  MVC 18(3,R4),0C(R6)\n REP 087C  47F0,98CC,E9C1,D7E9,C1D7,0000   B   SD82NORM,ZAPZAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A07000IX": {"ttr": 10517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\xb7\\x00\\xb7\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 183, "newlines": 183, "modlines": 0, "user": "UKGUIDE"}, "text": "IOS000IX CSECT\nIOS000IX AMODE 31\nIOS000IX RMODE ANY\n***********************************************************************\n** PURPOSE :-  TO MAKE IOS000I A NON-DELETE MESSAGE FOR DISKS        **\n**  ALSO IF THE DISK IS A SPOOLX VOLSER ISSUE A DRAIN FOR THE SPOOL  **\n**                                                                   **\n** THIS IS A MPF EXIT AND AS SUCH SHOULD BE LINKED AS RE-ENTERANT AND**\n** RE-USABLE (RENT,REUS). THE EXIT RESIDES IN SYS1.LINKLIB AND IS    **\n** NAMED IOS000IX . PLEASE REMEMBER TO REFRESH LLA AFTER LINKEDITING.**\n**                                                                   **\n** TO INVOKE THIS EXIT, CODE THE FOLLOWING IN SYS1.PARMLIB(MPFLST01) **\n**                                                                   **\n** IOS000I,SUP(NO),USEREXIT(IOS000IX)                                **\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\n***********************************************************************\n         REGEQS                <==== USER MACRO\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                ADDRESSABILITY\n         USING *,R12                ESTABLISH ADDRESSABILTY\n         L     R5,0(R1)             CTXT ADDRESS IN R5\n         USING CTXT,R5              CTXT ADDRESSABILTY\n***********************************************************************\n** GETMAIN BELOW THE LINE BECAUSE SVC 34 REQUIRES 24 BIT ADDRESSING  **\n***********************************************************************\n         GETMAIN RU,LV=DATAEND,LOC=BELOW\n         LR    R11,R1               SAVE PASSED ADDRESS\n         USING DATA,R11             ADDRESSABILITY TO DATA AREA\n         ST    R13,SAVEAREA+4       SET BACKWARD POINTER\n         LA    R15,SAVEAREA         ADDRESS OF SAVE AREA\n         ST    R15,8(R13)           SET FORWARD POINTER\n         LR    R13,R15              R13 = SAVE AREA\n         L     R2,CTXTTXPJ          GET ADRESSABILITY TO THE\n         USING CTXTATTR,R2          MESSAGE ATTRIBUTES\n         L     R3,CTXTDCP\n         USING CTXTDESC,R3\n         LA    R7,CTXTTMSG          ADDRESS OF THE TEXT AREA\n         USING MSGTEXT,R7           ESTABLISH ADDRESSABILITY\n**********************************************************************\n** NOW CHECK DEVICE FOR A DISK DRIVE, IF IT IS SET THE MESSAGE TO   **\n** NON-DELETE. IF IT IS NOT FOR A DISK LEAVE IT ALONE               **\n**********************************************************************\n         L     R4,CVTPTR           CVT ADDRESS\n         USING CVTMAP,R4           DSECT FOR CVT\n         XC    WORKAREA,WORKAREA   CLEAR UCB WORK AREA\n         LA    R1,WORKAREA         PUT ADDRESS OF WORKAREA INTO R1\n         ST    R1,UCBPARM1         SAVE IT\n         LA    R1,DEVCLASS         ADDRESS OF DEV CLASS BYTE IN R1\n         ST    R1,UCBPARM2         SAVE IT\n         MVI   DEVCLASS,UCB3DACC   INDICATE ONLY DASD DEVICES\n         LA    R1,ADDRESS          ADDRESS OF WHERE TO PUT IT IN R1\n         ST    R1,UCBPARM3         SAVE IT\n         OI    UCBPARM3,X'80'      FLAG END OF LIST\n         LA    R1,UCBPARML         PUT ADDRESS OF UCBPARML IN R1\n         ST    R1,SAVER1U          SAVE R1\n         USING UCBOB,R6            ADDRESSABILITY TO UCB\nNEWUCB   L     R1,SAVER1U          SCAN SERVICE ADDRESS\n         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS\n         BALR  R14,R15             GO TO SCAN SERVICE\n         LTR   R15,R15             HAS A UCB BEEN RETURNED ?\n         BNZ   EXIT                NO - GO TO EXIT\n         ST    R1,SAVER1U          SAVE R1\n         L     R6,ADDRESS\n         CLC   UCBNAME,DEVICE      IF UNIT NAMES MATCH\n         BE    MATCH               THEN DO\n         B     NEWUCB              BRANCH TO TOP OF LOOP\nMATCH    EQU   *\n         OI    CTXTRFB1,CTXTRCDC    SET TO CHANGE DESC CODE\n         XC    CTXTDESC,CTXTDESC    CLEAR DESC FIELD\n         OI    CTXTDC1,CTXTDC02     DESC=2\n         CLC   VOLSER(5),=C'SPOOL'  IS IT A SPOOL VOLUME\n         BNE   EXIT                NO - EXIT\n         XC    MGCRPL(MGCRLTH),MGCRPL CLEAR PARM LIST\n         MVC   REPLYV,VOLSER\n         MVC   MGCRTEXT(L'REPLYT),REPLYT    MOVE IN REPLY BUFFER\n         LA    R1,(MGCRTEXT-MGCRPL)+L'REPLYT    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH          SAVE LENGTH\n         SR    R0,R0                CLEAR R0\n         MGCR  MGCRPL               ISSUE THE COMMAND\nEXIT     L     R13,4(R13)           RESTORE R13\n         FREEMAIN RU,LV=DATAEND,A=(R11) FREE THE STORAGE\n         LM    R14,R12,12(R13)      RESTORE REGISTERS\n         BR    R14\n         LTORG\nREPLYT   DC    CL14'$ZSPL,V=XXXXXX'  HALT SPOOL VOLUME\nREPLYV   EQU   REPLYT+8,6\nDATA     DSECT\n         DS    0F\nSAVEAREA DS    18F\n         DS    0D\nWORKAREA DS    CL100\nUCBPARML DS 3F\nUCBPARM1 EQU   UCBPARML+0,4\nUCBPARM2 EQU   UCBPARML+4,4\nUCBPARM3 EQU   UCBPARML+8,4\nSAVER1U  DS    F\nDEVCLASS DS    CL1\nADDRESS  DS    F\nMGCR     IEZMGCR DSECT=NO\n         ORG   MGCRTEXT\n         ORG\nDATAEND  EQU   *-DATA\nMSGTEXT  DSECT\nMSGID    DS    CL8\nDEVICE   DS    CL3\n         DS    CL1\nPATH     DS    CL2\n         DS    CL1\nERRTYPE  DS    CL3\n         DS    CL1\nCCW      DS    CL2\n         DS    CL1\nSTATUS   DS    CL4\n         DS    CL3\nVOLSER   DS    CL6\n         ORG   MSGTEXT\n         CVT   DSECT=YES\n         DSECT\n         IEZVX100\n         IEFUCBOB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07176IX": {"ttr": 10753, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00\\x85\\x00\\x85\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 133, "newlines": 133, "modlines": 0, "user": "UKGUIDE"}, "text": "IEF176IX CSECT\nIEF176IX AMODE 31\nIEF176IX RMODE ANY\n         REGEQS                <==== USER MACRO\n***********************************************************************\n** PURPOSE :- TO ISSUE A STOP FOR THE EXTERNAL WRITER FOR RWTR ONLY  **\n**                                                                   **\n** THIS IS A MPF EXIT AND AS SUCH SHOULD BE LINKED AS RE-ENTERANT AND**\n** RE-USABLE (RENT,REUS). THE EXIT RESIDES IN SYS1.LINKLIB AND IS    **\n** NAMED IEF176IX . PLEASE REMEMBER TO REFRESH LLA AFTER LINKEDITING.**\n**                                                                   **\n** TO INVOKE THIS EXIT, CODE THE FOLLOWING IN SYS1.PARMLIB(MPFLST01) **\n**                                                                   **\n** IEF176I,SUP(NO),USEREXIT(IEF176IX)                                **\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\n***********************************************************************\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                ADDRESSABILITY\n         USING *,R12                ESTABLISH ADDRESSABILTY\n         L     R5,0(R1)             CTXT ADDRESS IN R5\n         USING CTXT,R5              CTXT ADDRESSABILTY\n***********************************************************************\n** GETMAIN BELOW THE LINE BECAUSE SVC 34 REQUIRES 24 BIT ADDRESSING  **\n***********************************************************************\n         GETMAIN RU,LV=DATAEND,LOC=BELOW\n         LR    R11,R1               SAVE PASSED ADDRESS\n         USING DATA,R11             ADDRESSABILITY TO DATA AREA\n         ST    R13,SAVEAREA+4       SET BACKWARD POINTER\n         LA    R15,SAVEAREA         ADDRESS OF SAVE AREA\n         ST    R15,8(R13)           SET FORWARD POINTER\n         LR    R13,R15              R13 = SAVE AREA\n         L     R2,CTXTTXPJ          GET ADRESSABILITY TO THE\n         USING CTXTATTR,R2          MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG          ADDRESS OF THE TEXT AREA\n         USING MSGTEXT,R4           ADDRESS IT\n         CLC   WRITER(7),=C'CLASS=R' IS IT RWTR ?\n         BNE   EXIT                 NO - EXIT\n         MVC   PUNIT,UNIT           MOVE IN UNIT NUMBER\n         OI    CTXTRFB2,CTXTRHCO    SUPPRESS MESSAGE\n         XC    MGCRPL(MGCRLTH),MGCRPL CLEAR PARM LIST\n         MVC   MGCRTEXT(L'REPLYT),REPLYT    MOVE IN REPLY BUFFER\n         LA    R1,(MGCRTEXT-MGCRPL)+L'REPLYT    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH          SAVE LENGTH\n         SR    R0,R0                CLEAR R0\n         MGCR  MGCRPL               ISSUE THE COMMAND\nEXIT     L     R13,4(R13)           RESTORE R13\n         FREEMAIN RU,LV=DATAEND,A=(R11) FREE THE STORAGE\n         LM    R14,R12,12(R13)      RESTORE REGISTERS\n         BR    R14\n         DS    0H\nREPLYT   DC    CL5'P XXX'           COMMAND TO ISSUE\nPUNIT    EQU   REPLYT+2,3\nDATA     DSECT\n         DS    0F\nSAVEAREA DS    18F\nMGCR     IEZMGCR DSECT=NO\n         ORG   MGCRTEXT\nCOMMAND  DS    CL6\nREPLY    DS    CL2\nREPLYMSG DS    CL3\n         ORG\nDATAEND  EQU   *-DATA\nMSGTEXT  DSECT\nMSGIDNT  DS   CL8\n         DS   CL4\nUNIT     DS   CL3\n         DS   CL19\nWRITER   DS   CL7\n         ORG  MSGTEXT\n         IEZVX100\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A07701DX": {"ttr": 10756, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x13o\\x00\\x94\\x13o\\x12\\x00\\x00s\\x00s\\x00\\x00\\xe4\\xd2\\xc7\\xe4\\xc9\\xc4\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-16T00:00:00", "modifydate": "1994-05-16T12:00:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "UKGUIDE"}, "text": "IEC701DX CSECT\nIEC701DX AMODE 31\nIEC701DX RMODE ANY\n***********************************************************************\n** PURPOSE :-  TO CHANGE THE CONSOLE IDENTIFIER OF THE MESSAGE       **\n**             IEC701D, (THE TAPE INITIALISE MESSAGE) SO THAT IT CAN **\n**             BE REPLIED TO AT THE TAPE CONSOLE (DE0)               **\n**                                                                   **\n** THIS IS A MPF EXIT AND AS SUCH SHOULD BE LINKED AS RE-ENTERANT AND**\n** RE-USABLE (RENT,REUS). THE EXIT RESIDES IN SYS1.LINKLIB AND IS    **\n** NAMED IEC701DX . PLEASE REMEMBER TO REFRESH LLA AFTER LINKEDITING.**\n**                                                                   **\n** TO INVOKE THIS EXIT, CODE THE FOLLOWING IN SYS1.PARMLIB(MPFLST01) **\n**                                                                   **\n** IEC701D,SUP(NO),USEREXIT(IEC701DX)                                **\n*********************************************************************\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*   This computer programming material has been developed by        *\n*   Kevin E. Ferguson, Technical Support Manager, at Cleveland      *\n*   County Council. Please address any inquiries to:-               *\n*                                                                   *\n*         Cleveland County Council,                                 *\n*         P.O. Box 17,                                              *\n*         Melrose House,                                            *\n*         1 Melrose Street,                                         *\n*         Middlesbrough,                                            *\n*         Cleveland. UK                                             *\n*         TS1 1LY                                                   *\n*         (0642) 248155                                             *\n*                                                                   *\n*         ATTN:  K.E.Ferguson (Ext. 2290)                           *\n*         (or:   Technical Support (Ext. 2363))                     *\n*                                                                   *\n*   This material has been used successfully by Cleveland County    *\n*   Council, and to the best of our knowledge this material and any *\n*   system(s) of which it is a part are operational as of the       *\n*   service level or date stated in the body of this material (if   *\n*   so stated). However, NO warranty is given or implied as to the  *\n*   accuracy of this material or any related material or systems,   *\n*   and no responsibility is assumed for any effect or modification *\n*   directly or indirectly caused by the use of this material.      *\n*   It is the responsibility of any user of this material to        *\n*   evaluate its usefulness to the user's environment.              *\n*                                                                   *\n*   Cleveland County Council does not guarantee to keep this or any *\n*   related material current, nor does it guarantee to provide      *\n*   any corrections or extensions described by any users of this    *\n*   material, or any corrections or extensions made in the future   *\n*   by Cleveland County Council itself.                             *\n*                                                                   *\n*                       C O P Y R I G H T                           *\n*                                                                   *\n*     This computer programming material remains the exclusive      *\n*     property of Cleveland County Council. Permission for its use  *\n*     may be obtained by contacting the address above               *\n*                                                                   *\n*   Cleveland County Council hereby grants permission for this      *\n*   programming material to be :-                                   *\n*                                                                   *\n*   a). Stored on your system and displayed on your terminals.      *\n*                                                                   *\n*   b). Modified to meet your sites specific needs.                 *\n*                                                                   *\n*   c). Printed (or Photocopied), but only the specific number of   *\n*       copies as are necessary for your sites needs.               *\n*                                                                   *\n*   d). Circulated amongst bona fida members of the following IBM   *\n*       user groups or their sub-groups :-                          *\n*                                                                   *\n*            i) G.U.I.D.E. (UK and US)                              *\n*           ii) SHARE                                               *\n*                                                                   *\n*       with the provisor that the copyright is not infringed by    *\n*       those members.                                              *\n*                                                                   *\n***********************************************************************\n***********************************************************************\n         REGEQS                <==== USER MACRO\nCNID04   EQU   X'04'        <===== CONSOLE ID\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                ADDRESSABILITY\n         USING *,R12                ESTABLISH ADDRESSABILTY\n         L     R5,0(R1)             CTXT ADDRESS IN R5\n         USING CTXT,R5              CTXT ADDRESSABILTY\n***********************************************************************\n** GETMAIN BELOW THE LINE BECAUSE SVC 34 REQUIRES 24 BIT ADDRESSING  **\n***********************************************************************\n         GETMAIN RU,LV=DATAEND,LOC=BELOW\n         LR    R11,R1               SAVE PASSED ADDRESS\n         USING DATA,R11             ADDRESSABILITY TO DATA AREA\n         ST    R13,SAVEAREA+4       SET BACKWARD POINTER\n         LA    R15,SAVEAREA         ADDRESS OF SAVE AREA\n         ST    R15,8(R13)           SET FORWARD POINTER\n         LR    R13,R15              R13 = SAVE AREA\n         L     R3,CTXTRCP\n         USING CTXTROUT,R3\n         OI    CTXTRFB1,CTXTRQPC+CTXTRCCN  CHANGE CONSOLE ID AND ROUTE\n*                                          MESSAGE THERE\n         L     R2,CTXTCIDP          ESTABLISH ADDRESSABILITY\n         USING CTXTCONS,R2\n         MVI   CTXTCNID,CNID04      SET TO CONSOLE 4\nEXIT     L     R13,4(R13)           RESTORE R13\n         FREEMAIN RU,LV=DATAEND,A=(R11) FREE THE STORAGE\n         LM    R14,R12,12(R13)      RESTORE REGISTERS\n         BR    R14\n         DS    0H\nDATA     DSECT\n         DS    0F\nSAVEAREA DS    18F\n         ORG\nDATAEND  EQU   *-DATA\n         IEZVX100\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT244/FILE244.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT244", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}