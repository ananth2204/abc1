/* Generated automatically by the program `genoutput'
   from the machine description file `md'.  */

#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "tm.h"
#include "flags.h"
#include "ggc.h"
#include "rtl.h"
#include "expr.h"
#include "insn-codes.h"
#include "tm_p.h"
#include "function.h"
#include "regs.h"
#include "hard-reg-set.h"
#include "real.h"
#include "insn-config.h"

#include "conditions.h"
#include "insn-attr.h"

#include "recog.h"

#include "toplev.h"
#include "output.h"
#include "target.h"

static const char *
output_0 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  return "SRDA	%0,0";
}
}

static const char *
output_1 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LTR	%0,%0";
}
}

static const char *
output_2 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 2);
  return "CH	%0,=H'0'";
}
}

static const char *
output_3 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LTDR	%0,%0";
}
}

static const char *
output_4 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LTER	%0,%0";
}
}

static const char *
output_5 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 2, 0);
      if (unsigned_jump_follows_p (insn))
	return "CLR	%0,%1";
      return "CR	%0,%1";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 4);
      if (unsigned_jump_follows_p (insn))
	 return "CL	%0,=F'%c1'";
      return "C	%0,=F'%c1'";
    }
  mvs_check_page (0, 4, 0);
  if (unsigned_jump_follows_p (insn))
    return "CL	%0,%1";
  return "C	%0,%1";
}
}

static const char *
output_6 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 8, 0);
      if (unsigned_jump_follows_p (insn))
	return "STH	%1," CONVLO "(,13)\n\tCLM	%0,3," CONVLO "(13)";
      return "STH	%1," CONVLO "(,13)\n\tCH	%0," CONVLO "(,13)";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      if (unsigned_jump_follows_p (insn))
        {
      mvs_check_page (0, 4, 2);
      return "CLM	%0,3,%H1";
        }
      mvs_check_page (0, 4, 2);
      return "CH	%0,%H1";
    }
  if (unsigned_jump_follows_p (insn))
    {
      mvs_check_page (0, 10, 0);
      if (REG_P (operandsÝ1¨))
	return "STH	%1," CONVLO "(,13)\n\tCLM	%0,3," CONVLO "(13)";
      return "MVC	" CONVLO "(2,13),%1\n\tCLM	%0,3," CONVLO "(13)";
    }
  mvs_check_page (0, 4, 0);
  return "CH	%0,%1";
}
}

static const char *
output_7 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
          return "STC	%1," CONVLO "(,13)\n\tCLM	%0,1," CONVLO "(13)";
        }
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  mvs_check_page (0, 4, 1);
          return "CLM	%0,1,=XL1'%X1'";
        }
      mvs_check_page (0, 4, 0);
      return "CLM	%0,1,%1";
    }
  else if (GET_CODE (operandsÝ0¨) == CONST_INT)
    {
      cc_status.flags |= CC_REVERSED;
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 4, 1);
          return "CLM	%1,1,=XL1'%X0'";
        }
      mvs_check_page (0, 4, 0);
      return "CLI	%1,%B0";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "CLI	%0,%B1";
    }
  if (GET_CODE (operandsÝ1¨) == MEM)
    {
      mvs_check_page (0, 6, 0);
      return "CLC	%O0(1,%R0),%1";
    }
  cc_status.flags |= CC_REVERSED;
  mvs_check_page (0, 4, 0);
  return "CLM	%1,1,%0";
}
}

static const char *
output_8 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (unsigned_jump_follows_p (insn))
    {
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  mvs_check_page (0, 4, 1);
          return "CLM	%0,1,=XL1'%X1'";
        }
      if (!(REG_P (operandsÝ1¨)))
	{
	  mvs_check_page (0, 4, 0);
          return "CLM	%0,1,%1";
        }
      mvs_check_page (0, 8, 0);
      return "STC	%1," CONVLO "(,13)\n\tCLM	%0,1," CONVLO "(13)";
    }
  if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 18, 0);
      return "SLL	%0,24\n\tSRA	%0,24\n\tSLL	%1,24\n\tSRA	%1,24\n\tCR	%0,%1";
    }
  mvs_check_page (0, 12, 0);
  return "SLL	%0,24\n\tSRA	%0,24\n\tC	%0,%1";
}
}

static const char *
output_9 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "CDR	%0,%1";
	}
      mvs_check_page (0, 4, 0);
      return "CD	%0,%1";
    }
  cc_status.flags |= CC_REVERSED;
  mvs_check_page (0, 4, 0);
  return "CD	%1,%0";
}
}

static const char *
output_10 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "CER	%0,%1";
	}
      mvs_check_page (0, 4, 0);
      return "CE	%0,%1";
    }
  cc_status.flags |= CC_REVERSED;
  mvs_check_page (0, 4, 0);
  return "CE	%1,%0";
}
}

static const char *
output_11 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 22, 0);
  return "CLC	%O1(%c3,%R1),%2\n\tBH	*+12\n\tBL	*+6\n\tSLR	%0,%0\n\tLNR	%0,%0";
}
}

static const char *
output_12 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 18, 0);
  return "LA	%0,1(0,0)\n\tCLCL	%1,%2\n\tBH	*+12\n\tBL	*+6\n\tSLR	%0,%0\n\tLNR	%0,%0";
}
}

static const char *
output_13 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STD	%1," CONVLO "(,13)\n\tLM	%0,%N0," CONVLO "(13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 4, 0);
	  return "LR	%0,%1\n\tLR	%N0,%N1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 4, 0);
	  return "SLR	%0,%0\n\tSLR	%N0,%N0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
  	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 6, 0);
	  return "SLR	%0,%0\n\tLA	%N0,%c1(0,0)";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 8, 0);
	  return "L	%0,%1\n\tSRDA	%0,32";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_DOUBLE)
	{
	  mvs_check_page (0, 6, 8);
	  return "LM	%0,%N0,%1";
	}
      mvs_check_page (0, 4, 0);
      /*return "LM	%0,%N0,%1";*/
      return "L	%0,%1\n\tL	%N0,4+%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STD	%1,%0";
    }
  else if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      /*return "STM	%1,%N1,%0"; */
      return "ST	%1,%0\n\tST	%N1,4+%0";
    }
  mvs_check_page (0, 6, 8);
  return "MVC	%O0(8,%R0),%1";
}
}

static const char *
output_14 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STD	%1," CONVLO "(,13)\n\tLM	%0,%N0," CONVLO "(13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 4, 0);
	  return "LR	%0,%1\n\tLR	%N0,%N1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 4, 0);
	  return "SLR	%0,%0\n\tSLR	%N0,%N0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
  	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 6, 0);
	  return "SLR	%0,%0\n\tLA	%N0,%c1(0,0)";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 8, 0);
	  return "L	%0,%1\n\tSRDA	%0,32";
	}
      mvs_check_page (0, 4, 0);
      /*return "LM	%0,%N0,%1";*/
      return "L	%0,%1\n\tL	%N0,4+%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STD	%1,%0";
    }
  mvs_check_page (0, 4, 0);
  /*return "STM	%1,%N1,%0"; */
  return "ST	%1,%0\n\tST	%N1,4+%0";
}
}

static const char *
output_15 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STE	%1," CONVLO "(,13)\n\tL	%0," CONVLO "(,13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  mvs_check_page (0, 4, 0);
	  return "LA	%0,%c1(0,0)";
	}
      mvs_check_page (0, 4, 0);
      return "L	%0,%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STE	%1,%0";
    }
  else if (!REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 6, 0);
      return "MVC	%O0(4,%R0),%1";
    }
  mvs_check_page (0, 4, 0);
  return "ST	%1,%0";
}
}

static const char *
output_16 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  mvs_check_page (0, 4, 0);
	  return "LA	%0,%c1(0,0)";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  mvs_check_page (0, 4, 2);
	  return "LH	%0,%H1";
	}
      mvs_check_page (0, 4, 0);
      return "LH	%0,%1";
    }
  else if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STH	%1,%0";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 6, 2);
      return "MVC	%O0(2,%R0),%H1";
    }
  mvs_check_page (0, 6, 0);
  return "MVC	%O0(2,%R0),%1";
}
}

static const char *
output_17 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  mvs_check_page (0, 4, 0);
	  return "LA	%0,%c1(0,0)";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  mvs_check_page (0, 4, 2);
	  return "LH	%0,%H1";
	}
      mvs_check_page (0, 4, 0);
      return "LH	%0,%1";
    }
  mvs_check_page (0, 4, 0);
  return "STH	%1,%0";
}
}

static const char *
output_18 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  if ((INTVAL (operandsÝ1¨) >= 0)
  	      && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	    {
	      mvs_check_page (0, 4, 0);
	      return "LA	%0,%c1(0,0)";
	    }
	  mvs_check_page (0, 4, 4);
	  return "L	%0,=F'%c1'";
	}
      mvs_check_page (0, 4, 0);
      return "IC	%0,%1";
    }
  else if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STC	%1,%0";
    }
  else if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "MVI	%0,%B1";
    }
  mvs_check_page (0, 6, 0);
  return "MVC	%O0(1,%R0),%1";
}
}

static const char *
output_19 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  if ((INTVAL (operandsÝ1¨) >= 0)
  	      && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	    {
	      mvs_check_page (0, 4, 0);
	      return "LA	%0,%c1(0,0)";
	    }
	  mvs_check_page (0, 4, 4);
	  return "L	%0,=F'%c1'";
	}
      mvs_check_page (0, 4, 0);
      return "IC	%0,%1";
    }
  mvs_check_page (0, 4, 0);
  return "STC	%1,%0";
}
}

static const char *
output_20 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 8, 0);
      return "STH	%1," CONVLO "(,13)\n\tICM	%0,3," CONVLO "(13)";
    }
  mvs_check_page (0, 4, 0);
  return "STH	%1,%0";
}
}

static const char *
output_21 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LDR	%0,%1";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STM	%1,%N1," CONVLO "(13)\n\tLD	%0," CONVLO "(,13)";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 2, 0);
	  return "SDR	%0,%0";
	}
      mvs_check_page (0, 4, 0);
      return "LD	%0,%1";
    }
  if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 12, 0);
	  return "STD	%1," CONVLO "(,13)\n\tLM	%0,%N0," CONVLO "(13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 4, 0);
	  return "LR	%0,%1\n\tLR	%N0,%N1";
	}
      mvs_check_page (0, 4, 0);
      return "LM	%0,%N0,%1";
      /*return "L	%0,%1\n\tL	%N0,4+%1";*/
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STD	%1,%0";
    }
  else if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      /*return "STM	%1,%N1,%0"; */
      return "ST	%1,%0\n\tST	%N1,4+%0";
    }
  mvs_check_page (0, 6, 8);
  return "MVC	%O0(8,%R0),%1";
}
}

static const char *
output_22 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LDR	%0,%1";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STM	%1,%N1," CONVLO "(13)\n\tLD	%0," CONVLO "(,13)";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 2, 0);
	  return "SDR	%0,%0";
	}
      mvs_check_page (0, 4, 0);
      return "LD	%0,%1";
    }
  else if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 12, 0);
	  return "STD	%1," CONVLO "(,13)\n\tLM	%0,%N0," CONVLO "(13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 4, 0);
	  return "LR	%0,%1\n\tLR	%N0,%N1";
	}
      mvs_check_page (0, 4, 0);
      /*return "LM	%0,%N0,%1";*/
      return "L	%0,%1\n\tL	%N0,4+%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STD	%1,%0";
    }
  mvs_check_page (0, 4, 0);
  /*return "STM	%1,%N1,%0"; */
  return "ST	%1,%0\n\tST	%N1,4+%0";
}
}

static const char *
output_23 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LER	%0,%1";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "ST	%1," CONVLO "(,13)\n\tLE	%0," CONVLO "(,13)";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 2, 0);
	  return "SER	%0,%0";
	}
      mvs_check_page (0, 4, 0);
      return "LE	%0,%1";
    }
  else if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STE	%1," CONVLO "(,13)\n\tL	%0," CONVLO "(,13)";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LR	%0,%1";
	}
      mvs_check_page (0, 4, 0);
      return "L	%0,%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STE	%1,%0";
    }
  else if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "ST	%1,%0";
    }
  mvs_check_page (0, 6, 0);
  return "MVC	%O0(4,%R0),%1";
}
}

static const char *
output_24 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 2, 0);
	  return "LER	%0,%1";
	}
      if (REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "ST	%1," CONVLO "(,13)\n\tLE	%0," CONVLO "(,13)";
	}
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
	  mvs_check_page (0, 2, 0);
	  return "SER	%0,%0";
	}
      mvs_check_page (0, 4, 0);
      return "LE	%0,%1";
    }
  else if (REG_P (operandsÝ0¨))
    {
      if (FP_REG_P (operandsÝ1¨))
	{
	  mvs_check_page (0, 8, 0);
	  return "STE	%1," CONVLO "(,13)\n\tL	%0," CONVLO "(,13)";
	}
      mvs_check_page (0, 4, 0);
      return "L	%0,%1";
    }
  else if (FP_REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 4, 0);
      return "STE	%1,%0";
    }
  mvs_check_page (0, 4, 0);
  return "ST	%1,%0";
}
}

static const char *
output_25 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 6, 0);
  return "MVC	%O0(%c2,%R0),%1";
}
}

static const char *
output_26 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "MVCL	%0,%1";
}
}

static const char *
output_27 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      if (REG_P (operandsÝ1¨))
      {
        if (REGNO (operandsÝ0¨) != REGNO (operandsÝ1¨))
	  {
	    mvs_check_page (0, 10, 0);
            return "LR	%0,%1\n\tSLL	%0,16\n\tSRA	%0,16";
	  }
        else
          return ""; /* Should be empty.  16-bits regs are always 32-bits.  */
      }
      if (operandsÝ1¨ == const0_rtx)
	{
	  CC_STATUS_INIT;
	  mvs_check_page (0, 2, 0);
	  return "SLR	%0,%0";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT
 	  && (unsigned) INTVAL (operandsÝ1¨) < 4096)
	{
	  mvs_check_page (0, 4, 0);
	  return "LA	%0,%c1(0,0)";
	}
      if (GET_CODE (operandsÝ1¨) == CONST_INT)
	{
	  mvs_check_page (0, 4, 2);
	  return "LH	%0,%H1";
	}
      mvs_check_page (0, 4, 0);
      return "LH	%0,%1";
    }
  mvs_check_page (0, 12, 0);
  return "SLL	%1,16\n\tSRA	%1,16\n\tST	%1,%0";
}
}

static const char *
output_28 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
  if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 8, 0);
      return "SLL	%0,24\n\tSRA	%0,24";
    }
  if (s_operand (operandsÝ1¨, GET_MODE (operandsÝ1¨)))
    {
      mvs_check_page (0, 8, 0);
      return "ICM	%0,8,%1\n\tSRA	%0,24";
    }
  mvs_check_page (0, 12, 0);
  return "IC	%0,%1\n\tSLL	%0,24\n\tSRA	%0,24";
}
}

static const char *
output_29 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
  if (REG_P (operandsÝ1¨))
    {
      mvs_check_page (0, 8, 0);
      return "SLL	%0,24\n\tSRA	%0,24";
    }
  if (s_operand (operandsÝ1¨, GET_MODE (operandsÝ1¨)))
    {
      mvs_check_page (0, 8, 0);
      return "ICM	%0,8,%1\n\tSRA	%0,24";
    }
  mvs_check_page (0, 12, 0);
  return "IC	%0,%1\n\tSLL	%0,24\n\tSRA	%0,24";
}
}

static const char *
output_30 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  /* AND only sets zero/not-zero bits not the arithmetic bits ...  */
  CC_STATUS_INIT;
  mvs_check_page (0, 4, 4);
  return "N	%1,=XL4'0000FFFF'";
}
}

static const char *
output_31 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ1¨))
    {
      /* AND only sets zero/not-zero bits not the arithmetic bits ...  */
      CC_STATUS_INIT;
      mvs_check_page (0, 4, 4);
      return "N	%0,=XL4'000000FF'";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "LA	%0,%c1(0,0)";
    }
  CC_STATUS_INIT;
  mvs_check_page (0, 8, 0);
  return "SLR	%0,%0\n\tIC	%0,%1";
}
}

static const char *
output_32 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ1¨))
    {
      /* AND only sets zero/not-zero bits not the arithmetic bits ...  */
      CC_STATUS_INIT;
      mvs_check_page (0, 4, 4);
      return "N	%0,=XL4'000000FF'";
    }
  if (GET_CODE (operandsÝ1¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "LA	%0,%c1(0,0)";
    }
  CC_STATUS_INIT;
  mvs_check_page (0, 8, 0);
  return "SLR	%0,%0\n\tIC	%0,%1";
}
}

static const char *
output_33 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
      mvs_check_page (0, 8, 0);
      return "SLL	%0,16\n\tSRA	%0,16";
    }
  mvs_check_page (0, 4, 0);
  return "STH	%1,%0";
}
}

static const char *
output_34 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;
  if (REGNO (operandsÝ1¨) == 16)
    {
      mvs_check_page (0, 12, 8);
      return "AD	0,=XL8'4F08000000000000'\n\tSTD	0," CONVLO "(,13)\n\tL	%0," CONVHI "(,13)";
    }
  mvs_check_page (0, 14, 8);
  return "LDR	0,%1\n\tAD	0,=XL8'4F08000000000000'\n\tSTD	0," CONVLO "(,13)\n\tL	%0," CONVHI "(,13)";
}
}

static const char *
output_35 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;
#if defined(TARGET_LINUX)
  mvs_check_page (0, 22, 12);
  return "MVC	" CONVLO "(4,13),=XL4'4E000000'\n\tST	%1," CONVLO "+4(,13)\n\tXI	" CONVLO "+4(13),128\n\tLD	%0," CONVLO "(,13)\n\tSD	%0,=XL8'4E00000080000000'";
#elif defined(TARGET_DIGNUS) || defined(TARGET_PDPMAC)
  mvs_check_page (0, 22, 12);
  return "MVC	" CONVLO "(4,13),=XL8'4E00000080000000'\n\tST	%1," CONVHI "(,13)\n\tXI	" CONVHI "(13),128\n\tLD	%0," CONVLO "(,13)\n\tSD	%0,=XL8'4E00000080000000'";
#else
  mvs_check_page (0, 16, 8);
  return "ST	%1,508(,12)\n\tXI	508(12),128\n\tLD	%0,504(,12)\n\tSD	%0,=XL8'4E00000080000000'";
#endif
}
}

static const char *
output_36 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LRER	%0,%1";
}
}

static const char *
output_37 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_SET (0, const0_rtx);
  if (FP_REG_P (operandsÝ1¨))
    {
      if (REGNO (operandsÝ0¨) == REGNO (operandsÝ1¨))
	{
	  mvs_check_page (0, 10, 0);
	  return "STE	%1," CONVLO "(,13)\n\tSDR	%0,%0\n\tLE	%0," CONVLO "(,13)";
	}
      mvs_check_page (0, 4, 0);
      return "SDR	%0,%0\n\tLER	%0,%1";
    }
  mvs_check_page (0, 6, 0);
  return "SDR	%0,%0\n\tLE	%0,%1";
}
}

static const char *
output_38 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  int onpage;

  check_label_emit ();
  onpage = mvs_check_label (CODE_LABEL_NUMBER (operandsÝ3¨));
  if (REG_P (operandsÝ2¨))
    {
      if (!onpage)
	{
	  mvs_check_page (0, 8, 4);
	  return "ALR	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
	}
      if (mvs_check_page (0, 6, 0))
	{
	  mvs_check_page (0, 2, 4);
	  return "ALR	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
	}
      return "ALR	%0,%2\n\tBC	12,%l3";
    }
  if (!onpage)
    {
      mvs_check_page (0, 10, 4);
      return "AL	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
    }
  if (mvs_check_page (0, 8 ,0))
    {
      mvs_check_page (0, 2, 4);
      return "AL	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
    }
  return "AL	%0,%2\n\tBC	12,%l3";
}
}

static const char *
output_39 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */
  mvs_check_page (0, 4, 0);
  return "LA	%0,%c2(,%1)";
}
}

static const char *
output_40 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if ((unsigned) INTVAL (operandsÝ2¨) < 4096)
    {
      CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */
      mvs_check_page (0, 4, 0);
      return "LA	%0,%c2(,%1)";
    }
  if (REGNO (operandsÝ1¨) == REGNO (operandsÝ0¨))
    {
      CC_STATUS_INIT;
      mvs_check_page (0, 4, 0);
      return "A	%0,%2";
    }
  mvs_check_page (0, 6, 0);
  return "L	%0,%2\n\tAR	%0,%1";
}
}

static const char *
output_41 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "AR	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      if (INTVAL (operandsÝ2¨) == -1)
	{
          CC_STATUS_INIT;  /* add assumes CC but BCTR doesn't set CC */
	  mvs_check_page (0, 2, 0);
	  return "BCTR	%0,0";
	}
    }
  mvs_check_page (0, 4, 0);
  return "A	%0,%2";
}
}

static const char *
output_42 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 8, 0);
      return "STH	%2," CONVLO "(,13)\n\tAH	%0," CONVLO "(,13)";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      if (INTVAL (operandsÝ2¨) == -1)
	{
          CC_STATUS_INIT;  /* add assumes CC but BCTR doesn't set CC */
	  mvs_check_page (0, 2, 0);
	  return "BCTR	%0,0";
	}
      mvs_check_page (0, 4, 2);
      return "AH	%0,%H2";
    }
  mvs_check_page (0, 4, 0);
  return "AH	%0,%2";
}
}

static const char *
output_43 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "LA	%0,0(%1,%2)";
  return "LA	%0,%B2(,%1)";
}
}

static const char *
output_44 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "ADR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "AD	%0,%2";
}
}

static const char *
output_45 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "AER	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "AE	%0,%2";
}
}

static const char *
output_46 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  int onpage;

  check_label_emit ();
  CC_STATUS_INIT;
  onpage = mvs_check_label (CODE_LABEL_NUMBER (operandsÝ3¨));
  if (REG_P (operandsÝ2¨))
    {
      if (!onpage)
	{
	  mvs_check_page (0, 8, 4);
	  return "SLR	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
	}
      if (mvs_check_page (0, 6, 0))
	{
	  mvs_check_page (0, 2, 4);
	  return "SLR	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
	}
      return "SLR	%0,%2\n\tBC	12,%l3";
    }
  if (!onpage)
    {
      mvs_check_page (0, 10, 4);
      return "SL	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
    }
  if (mvs_check_page (0, 8, 0))
    {
      mvs_check_page (0, 2, 4);
      return "SL	%0,%2\n\tL	14,=A(%l3)\n\tBCR	12,14";
    }
  return "SL	%0,%2\n\tBC	12,%l3";
}
}

static const char *
output_47 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "SR	%0,%2";
    }
  if (operandsÝ2¨ == const1_rtx)
    {
      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesn't set CC */
      mvs_check_page (0, 2, 0);
      return "BCTR	%0,0";
    }
  mvs_check_page (0, 4, 0);
  return "S	%0,%2";
}
}

static const char *
output_48 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 8, 0);
      return "STH	%2," CONVLO "(,13)\n\tSH	%0," CONVLO "(,13)";
    }
  if (operandsÝ2¨ == const1_rtx)
    {
      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesn't set CC */
      mvs_check_page (0, 2, 0);
      return "BCTR	%0,0";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 2);
      return "SH	%0,%H2";
    }
  mvs_check_page (0, 4, 0);
  return "SH	%0,%2";
}
}

static const char *
output_49 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "SR	%0,%2";
}
}

static const char *
output_50 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "SDR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "SD	%0,%2";
}
}

static const char *
output_51 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "SER	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "SE	%0,%2";
}
}

static const char *
output_52 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  return "MH	%0,%H2";
}
}

static const char *
output_53 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "MR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "M	%0,%2";
}
}

static const char *
output_54 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "MDR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "MD	%0,%2";
}
}

static const char *
output_55 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "MER	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "ME	%0,%2";
}
}

static const char *
output_56 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "DR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "D	%0,%2";
}
}

static const char *
output_57 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "DDR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "DD	%0,%2";
}
}

static const char *
output_58 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (FP_REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "DER	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "DE	%0,%2";
}
}

static const char *
output_59 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "DR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "D	%0,%2";
}
}

static const char *
output_60 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "NR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "N	%0,%2";
    }
  mvs_check_page (0, 6, 0);
  return "NC	%O0(4,%R0),%2";
}
}

static const char *
output_61 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "NR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "N	%0,%2";
}
}

static const char *
output_62 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "NR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      /* %K2 == sign extend operand to 32 bits so that CH works */
      if (GET_CODE (operandsÝ2¨) == CONST_INT)
        {
          mvs_check_page (0, 4, 4);
          return "N	%0,%K2";
        }
      mvs_check_page (0, 4, 0);
      return "N	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 6, 2);
      return "NC	%O0(2,%R0),%H2";
    }
  mvs_check_page (0, 6, 0);
  return "NC	%O0(2,%R0),%2";
}
}

static const char *
output_63 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      /* %K2 == sign extend operand to 32 bits so that CH works */
      mvs_check_page (0, 4, 4);
      return "N	%0,%K2";
    }
  mvs_check_page (0, 2, 0);
  return "NR	%0,%2";
}
}

static const char *
output_64 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "NR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "N	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "NI	%0,%B2";
    }
  mvs_check_page (0, 6, 0);
  return "NC	%O0(1,%R0),%2";
}
}

static const char *
output_65 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* and sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 4);
      return "N	%0,=XL4'%X2'";
    }
  mvs_check_page (0, 2, 0);
  return "NR	%0,%2";
}
}

static const char *
output_66 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "OR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "O	%0,%2";
    }
  mvs_check_page (0, 6, 0);
  return "OC	%O0(4,%R0),%2";
}
}

static const char *
output_67 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "OR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "O	%0,%2";
}
}

static const char *
output_68 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "OR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "O	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 6, 2);
      return "OC	%O0(2,%R0),%H2";
    }
  mvs_check_page (0, 6, 0);
  return "OC	%O0(2,%R0),%2";
}
}

static const char *
output_69 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 4);
      return "O	%0,%K2";
    }
  mvs_check_page (0, 2, 0);
  return "OR	%0,%2";
}
}

static const char *
output_70 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "OR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "O	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "OI	%0,%B2";
    }
  mvs_check_page (0, 6, 0);
  return "OC	%O0(1,%R0),%2";
}
}

static const char *
output_71 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* OR sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 4);
      return "O	%0,=XL4'%X2'";
    }
  mvs_check_page (0, 2, 0);
  return "OR	%0,%2";
}
}

static const char *
output_72 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "XR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "X	%0,%2";
    }
  mvs_check_page (0, 6, 0);
  return "XC	%O0(4,%R0),%2";
}
}

static const char *
output_73 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "XR	%0,%2";
    }
  mvs_check_page (0, 4, 0);
  return "X	%0,%2";
}
}

static const char *
output_74 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "XR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      if (GET_CODE (operandsÝ2¨) == CONST_INT)
        {
          mvs_check_page (0, 4, 4);
          return "X	%0,%K2";
        }
      mvs_check_page (0, 4, 0);
      return "X	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 6, 2);
      return "XC	%O0(2,%R0),%H2";
    }
  mvs_check_page (0, 6, 0);
  return "XC	%O0(2,%R0),%2";
}
}

static const char *
output_75 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 4);
      return "X	%0,%2";
    }
  mvs_check_page (0, 2, 0);
  return "XR	%0,%2";
}
}

static const char *
output_76 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 2, 0);
      return "XR	%0,%2";
    }
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 0);
      return "X	%0,%2";
    }
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "XI	%0,%B2";
    }
  mvs_check_page (0, 6, 0);
  return "XC	%O0(1,%R0),%2";
}
}

static const char *
output_77 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (GET_CODE (operandsÝ2¨) == CONST_INT)
    {
      mvs_check_page (0, 4, 0);
      return "X	%0,=XL4'%X2'";
    }
  mvs_check_page (0, 2, 0);
  return "XR	%0,%2";
}
}

static const char *
output_78 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LCR	%0,%1";
}
}

static const char *
output_79 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 10, 0);
  return "SLL	%1,16\n\tSRA	%1,16\n\tLCR	%0,%1";
}
}

static const char *
output_80 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LCDR	%0,%1";
}
}

static const char *
output_81 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LCER	%0,%1";
}
}

static const char *
output_82 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LPR	%0,%1";
}
}

static const char *
output_83 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 10, 0);
  return "SLL	%1,16\n\tSRA	%1,16\n\tLPR	%0,%1";
}
}

static const char *
output_84 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LPDR	%0,%1";
}
}

static const char *
output_85 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "LPER	%0,%1";
}
}

static const char *
output_86 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 4);
      return "X	%0,=F'-1'";
    }
  CC_STATUS_INIT;
  mvs_check_page (0, 6, 4);
  return "XC	%O0(4,%R0),=F'-1'";
}
}

static const char *
output_87 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  mvs_check_page (0, 4, 4);
  return "X	%0,=F'-1'";
}
}

static const char *
output_88 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 4);
      return "X	%0,=F'-1'";
    }
  mvs_check_page (0, 6, 2);
  return "XC	%O0(2,%R0),=XL2'FFFF'";
}
}

static const char *
output_89 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  mvs_check_page (0, 4, 4);
  return "X	%0,=F'-1'";
}
}

static const char *
output_90 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 4, 4);
      return "X	%0,=F'-1'";
    }
  mvs_check_page (0, 4, 0);
  return "XI	%0,255";
}
}

static const char *
output_91 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT;  /* XOR sets CC but not how we want it */
  mvs_check_page (0, 4, 4);
  return "X	%0,=F'-1'";
}
}

static const char *
output_92 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  /* this status set seems not have the desired effect,
   * proably because the 64-bit long-long test is emulated ?! */
  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SLDA	%0,0(%2)";
  return "SLDA	%0,%c2";
}
}

static const char *
output_93 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  /* this status set seems not have the desired effect,
   * proably because the 64-bit long-long test is emulated ?! */
  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SRDA	%0,0(%2)";
  return "SRDA	%0,%c2";
}
}

static const char *
output_94 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SLL	%0,0(%2)";
  return "SLL	%0,%c2";
}
}

static const char *
output_95 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_SET (operandsÝ0¨, operandsÝ1¨);
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SRA	%0,0(%2)";
  return "SRA	%0,%c2";
}
}

static const char *
output_96 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 8, 0);
  if (REG_P (operandsÝ2¨))
    return "SLL	%0,16(%2)\n\tSRA	%0,16";
  return "SLL	%0,16+%c2\n\tSRA	%0,16";
}
}

static const char *
output_97 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 8, 0);
  if (REG_P (operandsÝ2¨))
    return "SLL	%0,16\n\tSRA	%0,16(%2)";
  return "SLL	%0,16\n\tSRA	%0,16+%c2";
}
}

static const char *
output_98 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SLL	%0,0(%2)";
  return "SLL	%0,%c2";
}
}

static const char *
output_99 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 8, 0);
  if (REG_P (operandsÝ2¨))
    return "SLL	%0,24\n\tSRA	%0,24(%2)";
  return "SLL	%0,24\n\tSRA	%0,24+%c2";
}
}

static const char *
output_100 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SRDL	%0,0(%2)";
  return "SRDL	%0,%c2";
}
}

static const char *
output_101 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (REG_P (operandsÝ2¨))
    return "SRL	%0,0(%2)";
  return "SRL	%0,%c2";
}
}

static const char *
output_102 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT; /* AND sets the CC but not how we want it */
  if (REG_P (operandsÝ2¨))
    {
      mvs_check_page (0, 8, 4);
      return "N	%0,=XL4'0000FFFF'\n\tSRL	%0,0(%2)";
    }
  mvs_check_page (0, 8, 4);
  return "N	%0,=XL4'0000FFFF'\n\tSRL	%0,%c2";
}
}

static const char *
output_103 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  CC_STATUS_INIT; /* AND sets the CC but not how we want it */
  mvs_check_page (0, 8, 4);
  if (REG_P (operandsÝ2¨))
    return "N	%0,=XL4'000000FF'\n\tSRL	%0,0(%2)";
  return "N	%0,=XL4'000000FF'\n\tSRL	%0,%c2";
}
}

static const char *
output_104 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BE	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBER	14";
}
}

static const char *
output_105 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNE	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNER	14";
}
}

static const char *
output_106 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBHR	14";
}
}

static const char *
output_107 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBHR	14";
}
}

static const char *
output_108 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBLR	14";
}
}

static const char *
output_109 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBLR	14";
}
}

static const char *
output_110 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNLR	14";
}
}

static const char *
output_111 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNLR	14";
}
}

static const char *
output_112 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNHR	14";
}
}

static const char *
output_113 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNHR	14";
}
}

static const char *
output_114 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNE	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNER	14";
}
}

static const char *
output_115 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BE	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBER	14";
}
}

static const char *
output_116 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNHR	14";
}
}

static const char *
output_117 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNHR	14";
}
}

static const char *
output_118 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNLR	14";
}
}

static const char *
output_119 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BNL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBNLR	14";
}
}

static const char *
output_120 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBLR	14";
}
}

static const char *
output_121 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BL	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBLR	14";
}
}

static const char *
output_122 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBHR	14";
}
}

static const char *
output_123 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "BH	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBHR	14";
}
}

static const char *
output_124 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (mvs_check_label (CODE_LABEL_NUMBER (operandsÝ1¨)))
    {
      return "BCT	%0,%l1";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l1)\n\tBCTR	%0,14";
}
}

static const char *
output_125 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (mvs_check_label (CODE_LABEL_NUMBER (operandsÝ1¨)))
    {
      return "BCT	%0,%l1";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l1)\n\tBCTR	%0,14";
}
}

static const char *
output_126 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 4, 0);
  if (i370_short_branch(insn) || mvs_check_label (CODE_LABEL_NUMBER (operandsÝ0¨)))
    {
      return "B	%l0";
    }
  mvs_check_page (0, 2, 4);
  return "L	14,=A(%l0)\n\tBR	14";
}
}

static const char *
output_127 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 2, 0);
      return "BR	%0";
    }
  mvs_check_page (0, 4, 0);
  return "B	%0";
}
}

static const char *
output_128 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  if (REG_P (operandsÝ0¨))
    {
      mvs_check_page (0, 6, 0);
      return "BR	%0\n\tDS	0F";
    }
  mvs_check_page (0, 10, 0);
  return "L	14,%0\n\tBR	14\n\tDS	0F";
}
}

static const char *
output_129 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
#ifdef TARGET_LINUX
#ifdef STACK_GROWS_DOWNWARD
  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;

  CC_STATUS_INIT;
  check_label_emit ();
  mvs_check_page (0, 10, 4);
  sprintf ( temp, "LA	r2,%d(,sp)\n\tLA	15,%%0\n\tBASR	14,15", i );
  return temp;
#else /* STACK_GROWS_DOWNWARD */
  CC_STATUS_INIT;
  check_label_emit ();
  mvs_check_page (0, 6, 4);
  return "LA	15,%0\n\tBASR	14,15";
#endif /* STACK_GROWS_DOWNWARD */

#else

  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;

  CC_STATUS_INIT;
  check_label_emit ();
  if (mvs_function_check (XSTR (operandsÝ0¨, 0)))
    {
      mvs_check_page (0, 22, 4);
      sprintf ( temp, "LA	1,136(,13)\n\tST	1,%d(,13)\n\tLA 1,%d(,13)\n\tLA	15,%%0\n\tBALR	14,15\n\tLD	0,136(,13)",
	     i - 4, i - 4 );
    }
  else
    {
      mvs_check_page (0, 10, 4);
      sprintf ( temp, "LA	1,%d(,13)\n\tLA	15,%%0\n\tBALR	14,15", i );
    }
  return temp;
#endif
}
}

static const char *
output_130 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
#ifdef TARGET_LINUX
#ifdef STACK_GROWS_DOWNWARD
  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;
  mvs_check_page (0, 10, 4);
  sprintf ( temp, "LA	r2,%d(,sp)\n\tLA	15,%%1\n\tBASR	14,15", i );
  return temp;

#else /* STACK_GROWS_DOWNWARD */
  CC_STATUS_INIT;
  check_label_emit ();
  mvs_check_page (0, 6, 4);
  return "LA	15,%1\n\tBASR	14,15";
#endif /* STACK_GROWS_DOWNWARD */

#else

  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;

  check_label_emit ();
  if (mvs_function_check (XSTR (operandsÝ1¨, 0)))
    {
      mvs_check_page (0, 22, 4);
      sprintf ( temp, "LA	1,136(,13)\n\tST	1,%d(,13)\n\tLA 1,%d(,13)\n\tLA	15,%%1\n\tBALR	14,15\n\tLD	0,136(,13)",
	   i - 4, i - 4 );
    }
  else
    {
      mvs_check_page (0, 10, 4);
      sprintf ( temp, "LA	1,%d(,13)\n\tLA	15,%%1\n\tBALR	14,15", i );
    }
  return temp;

#endif
}
}

static const char *
output_131 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
#ifdef TARGET_LINUX
#ifdef STACK_GROWS_DOWNWARD
  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;
  mvs_check_page (0, 10, 4);
  sprintf ( temp, "LA	r2,%d(,sp)\n\tL	15,%%0\n\tBASR	14,15", i );
  return temp;

#else /* STACK_GROWS_DOWNWARD */
  CC_STATUS_INIT;
  check_label_emit ();
  mvs_check_page (0, 6, 4);
  return "L	15,%0\n\tBASR	14,15";
#endif /* STACK_GROWS_DOWNWARD */

#else

  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;

  check_label_emit ();
  if (mvs_function_check (XSTR (operandsÝ0¨, 0)))
    {
      mvs_check_page (0, 22, 4);
      sprintf ( temp, "LA	1,136(,13)\n\tST	1,%d(,13)\n\tLA	1,%d(,13)\n\tL	15,%%0\n\tBALR	14,15\n\tLD	0,136(,13)",
	   i - 4, i - 4 );
    }
  else
    {
      mvs_check_page (0, 10, 4);
      sprintf ( temp, "LA	1,%d(,13)\n\tL	15,%%0\n\tBALR	14,15", i );
    }
  return temp;
#endif
}
}

static const char *
output_132 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
#ifdef TARGET_LINUX
#ifdef STACK_GROWS_DOWNWARD
  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;

  check_label_emit ();
  mvs_check_page (0, 10, 4);
  sprintf ( temp, "LA	r2,%d(,sp)\n\tL	15,%%1\n\tBASR	14,15", i );
  return temp;

#else /* STACK_GROWS_DOWNWARD */
  CC_STATUS_INIT;
  check_label_emit ();
  mvs_check_page (0, 6, 4);
  return "L	15,%1\n\tBASR	14,15";
#endif /* STACK_GROWS_DOWNWARD */

#else

  static char tempÝ128¨;
  int i = STACK_POINTER_OFFSET;
  CC_STATUS_INIT;

  check_label_emit ();
  if (mvs_function_check (XSTR (operandsÝ1¨, 0)))
    {
      mvs_check_page (0, 22, 4);
      sprintf ( temp, "LA	1,136(,13)\n\tST	1,%d(,13)\n\tLA	1,%d(,13)\n\tL	15,%%1\n\tBALR	14,15\n\tLD	0,136(,13)",
	   i - 4, i - 4 );
    }
  else
    {
      mvs_check_page (0, 10, 4);
      sprintf ( temp, "LA	1,%d(,13)\n\tL	15,%%1\n\tBALR	14,15", i );
    }
  return temp;
#endif
}
}

static const char *
output_133 (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)
{

{
  check_label_emit ();
  mvs_check_page (0, 2, 0);
  return "NOPR	0";
}
}



static const struct insn_operand_data operand_dataÝ¨ =
{
  {
    0,
    "",
    VOIDmode,
    0,
    0
  },
  {
    register_operand,
    "d",
    DImode,
    0,
    1
  },
  {
    register_operand,
    "d",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "f",
    SFmode,
    0,
    1
  },
  {
    register_operand,
    "d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "md",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "???diS",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "dS",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "diS",
    QImode,
    0,
    1
  },
  {
    register_operand,
    "d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "di",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "f,mF",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "f,mF",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,f",
    SFmode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    s_operand,
    "m",
    BLKmode,
    0,
    1
  },
  {
    s_operand,
    "m",
    BLKmode,
    0,
    1
  },
  {
    immediate_operand,
    "I",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "+d",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "+d",
    DImode,
    0,
    1
  },
  {
    register_operand,
    "+d",
    DImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,m,S",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "g,d,SF",
    DImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,dm",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "dimF,*fd",
    DImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,dm,R",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "dimF,*fd,R",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=R,d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "R,g",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,m",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "g,d",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=R,d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "R,g",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,m",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "g,d",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "+dm",
    HImode,
    1,
    1
  },
  {
    general_operand,
    "d",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f,m,fS,*dS,???d",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,f,*dS,fSF,???d",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f,m,fS,*d,???d",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,f,*d,SfF,???d",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f*d,fm,S,???d",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,fF*d,S,???d",
    SFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f,fm,m,*d",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF,*d,f,fmF",
    SFmode,
    0,
    1
  },
  {
    s_operand,
    "=m",
    BLKmode,
    0,
    1
  },
  {
    s_operand,
    "m",
    BLKmode,
    0,
    1
  },
  {
    immediate_operand,
    "I",
    VOIDmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,m",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g,d",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "0mi",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "0m",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,&d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "0i,m",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,&d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "0i,m",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d,m",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "0,d",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "f",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "d",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "f",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF",
    SFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "%a",
    SImode,
    0,
    1
  },
  {
    immediate_operand,
    "J",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "%a",
    SImode,
    0,
    1
  },
  {
    immediate_operand,
    "i",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "dmi",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "%a",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "ai",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF",
    SFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    HImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    QImode,
    0,
    1
  },
  {
    register_operand,
    "0",
    QImode,
    0,
    1
  },
  {
    register_operand,
    "d",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "0",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "0",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "fmF",
    SFmode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "0",
    SImode,
    0,
    1
  },
  {
    const_int_operand,
    "K",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    DImode,
    0,
    1
  },
  {
    register_operand,
    "0",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "dm",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,R",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g,Si",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,S",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "di,Si",
    HImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    register_operand,
    "%0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "di",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,S",
    QImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "dim,Si",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "di",
    QImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,m",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g,Si",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,m",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "di,mi",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "%0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "di",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=d,m",
    QImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "%0,0",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "di,mi",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "d",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "d",
    HImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    DFmode,
    0,
    1
  },
  {
    general_operand,
    "f",
    DFmode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=f",
    SFmode,
    0,
    1
  },
  {
    general_operand,
    "f",
    SFmode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=dm",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "0",
    SImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=dm",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "0",
    HImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "=dm",
    QImode,
    0,
    1
  },
  {
    r_or_s_operand,
    "0",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    QImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "Ja",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "Ja",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "Ja",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    HImode,
    0,
    1
  },
  {
    general_operand,
    "Ja",
    SImode,
    0,
    1
  },
  {
    nonimmediate_operand,
    "=d",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "0",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "Ja",
    SImode,
    0,
    1
  },
  {
    register_operand,
    "+d",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    general_operand,
    "rm",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "am",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    memory_operand,
    "m",
    QImode,
    0,
    1
  },
  {
    immediate_operand,
    "i",
    SImode,
    0,
    1
  },
  {
    0,
    "=rf",
    VOIDmode,
    0,
    1
  },
  {
    memory_operand,
    "m",
    QImode,
    0,
    1
  },
  {
    general_operand,
    "i",
    SImode,
    0,
    1
  },
  {
    0,
    "i",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    SImode,
    0,
    1
  },
  {
    0,
    "=rf",
    VOIDmode,
    0,
    1
  },
  {
    0,
    "i",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "",
    BLKmode,
    0,
    1
  },
  {
    general_operand,
    "",
    BLKmode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "g",
    BLKmode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    general_operand,
    "",
    BLKmode,
    0,
    1
  },
  {
    general_operand,
    "",
    BLKmode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    register_operand,
    "=d",
    DImode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    general_operand,
    "",
    SImode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
  {
    0,
    "",
    VOIDmode,
    0,
    1
  },
};


#if GCC_VERSION >= 2007
__extension__
#endif

const struct insn_data insn_dataÝ¨ =
{
  {
    "tstdi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_0 },
#else
    { 0, 0, output_0 },
#endif
    (insn_gen_fn) gen_tstdi,
    &operand_dataÝ1¨,
    1,
    0,
    1,
    3
  },
  {
    "tstsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_1 },
#else
    { 0, 0, output_1 },
#endif
    (insn_gen_fn) gen_tstsi,
    &operand_dataÝ2¨,
    1,
    0,
    1,
    3
  },
  {
    "tsthi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_2 },
#else
    { 0, 0, output_2 },
#endif
    (insn_gen_fn) gen_tsthi,
    &operand_dataÝ3¨,
    1,
    0,
    1,
    3
  },
  {
    "tstdf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_3 },
#else
    { 0, 0, output_3 },
#endif
    (insn_gen_fn) gen_tstdf,
    &operand_dataÝ4¨,
    1,
    0,
    1,
    3
  },
  {
    "tstsf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_4 },
#else
    { 0, 0, output_4 },
#endif
    (insn_gen_fn) gen_tstsf,
    &operand_dataÝ5¨,
    1,
    0,
    1,
    3
  },
  {
    "cmpsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_5 },
#else
    { 0, 0, output_5 },
#endif
    (insn_gen_fn) gen_cmpsi,
    &operand_dataÝ6¨,
    2,
    0,
    1,
    3
  },
  {
    "cmphi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_6 },
#else
    { 0, 0, output_6 },
#endif
    (insn_gen_fn) gen_cmphi,
    &operand_dataÝ8¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:517",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_7 },
#else
    { 0, 0, output_7 },
#endif
    0,
    &operand_dataÝ10¨,
    2,
    0,
    1,
    3
  },
  {
    "cmpqi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_8 },
#else
    { 0, 0, output_8 },
#endif
    (insn_gen_fn) gen_cmpqi,
    &operand_dataÝ12¨,
    2,
    0,
    1,
    3
  },
  {
    "cmpdf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_9 },
#else
    { 0, 0, output_9 },
#endif
    (insn_gen_fn) gen_cmpdf,
    &operand_dataÝ14¨,
    2,
    0,
    2,
    3
  },
  {
    "cmpsf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_10 },
#else
    { 0, 0, output_10 },
#endif
    (insn_gen_fn) gen_cmpsf,
    &operand_dataÝ16¨,
    2,
    0,
    2,
    3
  },
  {
    "*i370.md:740",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_11 },
#else
    { 0, 0, output_11 },
#endif
    0,
    &operand_dataÝ18¨,
    4,
    0,
    1,
    3
  },
  {
    "cmpmemsi_1",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_12 },
#else
    { 0, 0, output_12 },
#endif
    (insn_gen_fn) gen_cmpmemsi_1,
    &operand_dataÝ22¨,
    3,
    4,
    1,
    3
  },
  {
    "*i370.md:786",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_13 },
#else
    { 0, 0, output_13 },
#endif
    0,
    &operand_dataÝ25¨,
    2,
    0,
    3,
    3
  },
  {
    "movdi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_14 },
#else
    { 0, 0, output_14 },
#endif
    (insn_gen_fn) gen_movdi,
    &operand_dataÝ27¨,
    2,
    0,
    2,
    3
  },
  {
    "movsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_15 },
#else
    { 0, 0, output_15 },
#endif
    (insn_gen_fn) gen_movsi,
    &operand_dataÝ29¨,
    2,
    0,
    3,
    3
  },
  {
    "*i370.md:1004",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_16 },
#else
    { 0, 0, output_16 },
#endif
    0,
    &operand_dataÝ31¨,
    2,
    0,
    2,
    3
  },
  {
    "movhi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_17 },
#else
    { 0, 0, output_17 },
#endif
    (insn_gen_fn) gen_movhi,
    &operand_dataÝ33¨,
    2,
    0,
    2,
    3
  },
  {
    "*i370.md:1098",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_18 },
#else
    { 0, 0, output_18 },
#endif
    0,
    &operand_dataÝ35¨,
    2,
    0,
    2,
    3
  },
  {
    "movqi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_19 },
#else
    { 0, 0, output_19 },
#endif
    (insn_gen_fn) gen_movqi,
    &operand_dataÝ37¨,
    2,
    0,
    2,
    3
  },
  {
    "movstricthi",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_20 },
#else
    { 0, 0, output_20 },
#endif
    (insn_gen_fn) gen_movstricthi,
    &operand_dataÝ39¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:1279",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_21 },
#else
    { 0, 0, output_21 },
#endif
    0,
    &operand_dataÝ41¨,
    2,
    0,
    5,
    3
  },
  {
    "movdf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_22 },
#else
    { 0, 0, output_22 },
#endif
    (insn_gen_fn) gen_movdf,
    &operand_dataÝ43¨,
    2,
    0,
    5,
    3
  },
  {
    "*i370.md:1404",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_23 },
#else
    { 0, 0, output_23 },
#endif
    0,
    &operand_dataÝ45¨,
    2,
    0,
    4,
    3
  },
  {
    "movsf",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_24 },
#else
    { 0, 0, output_24 },
#endif
    (insn_gen_fn) gen_movsf,
    &operand_dataÝ47¨,
    2,
    0,
    4,
    3
  },
  {
    "*i370.md:1623",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_25 },
#else
    { 0, 0, output_25 },
#endif
    0,
    &operand_dataÝ49¨,
    3,
    0,
    1,
    3
  },
  {
    "movstrsi_1",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_26 },
#else
    { 0, 0, output_26 },
#endif
    (insn_gen_fn) gen_movstrsi_1,
    &operand_dataÝ23¨,
    2,
    4,
    1,
    3
  },
  {
    "extendhisi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_27 },
#else
    { 0, 0, output_27 },
#endif
    (insn_gen_fn) gen_extendhisi2,
    &operand_dataÝ52¨,
    2,
    0,
    2,
    3
  },
  {
    "extendqisi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_28 },
#else
    { 0, 0, output_28 },
#endif
    (insn_gen_fn) gen_extendqisi2,
    &operand_dataÝ54¨,
    2,
    0,
    1,
    3
  },
  {
    "extendqihi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_29 },
#else
    { 0, 0, output_29 },
#endif
    (insn_gen_fn) gen_extendqihi2,
    &operand_dataÝ56¨,
    2,
    0,
    1,
    3
  },
  {
    "zero_extendhisi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_30 },
#else
    { 0, 0, output_30 },
#endif
    (insn_gen_fn) gen_zero_extendhisi2,
    &operand_dataÝ58¨,
    2,
    0,
    1,
    3
  },
  {
    "zero_extendqisi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_31 },
#else
    { 0, 0, output_31 },
#endif
    (insn_gen_fn) gen_zero_extendqisi2,
    &operand_dataÝ60¨,
    2,
    0,
    2,
    3
  },
  {
    "zero_extendqihi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_32 },
#else
    { 0, 0, output_32 },
#endif
    (insn_gen_fn) gen_zero_extendqihi2,
    &operand_dataÝ62¨,
    2,
    0,
    2,
    3
  },
  {
    "truncsihi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_33 },
#else
    { 0, 0, output_33 },
#endif
    (insn_gen_fn) gen_truncsihi2,
    &operand_dataÝ64¨,
    2,
    0,
    2,
    3
  },
  {
    "fix_truncdfsi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_34 },
#else
    { 0, 0, output_34 },
#endif
    (insn_gen_fn) gen_fix_truncdfsi2,
    &operand_dataÝ66¨,
    2,
    0,
    1,
    3
  },
  {
    "floatsidf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_35 },
#else
    { 0, 0, output_35 },
#endif
    (insn_gen_fn) gen_floatsidf2,
    &operand_dataÝ68¨,
    2,
    0,
    1,
    3
  },
  {
    "truncdfsf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_36 },
#else
    { 0, 0, output_36 },
#endif
    (insn_gen_fn) gen_truncdfsf2,
    &operand_dataÝ70¨,
    2,
    0,
    1,
    3
  },
  {
    "extendsfdf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_37 },
#else
    { 0, 0, output_37 },
#endif
    (insn_gen_fn) gen_extendsfdf2,
    &operand_dataÝ72¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:2057",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_38 },
#else
    { 0, 0, output_38 },
#endif
    0,
    &operand_dataÝ74¨,
    4,
    0,
    1,
    3
  },
  {
    "*i370.md:2110",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_39 },
#else
    { 0, 0, output_39 },
#endif
    0,
    &operand_dataÝ78¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2127",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_40 },
#else
    { 0, 0, output_40 },
#endif
    0,
    &operand_dataÝ81¨,
    3,
    0,
    1,
    3
  },
  {
    "addsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_41 },
#else
    { 0, 0, output_41 },
#endif
    (insn_gen_fn) gen_addsi3,
    &operand_dataÝ74¨,
    3,
    0,
    1,
    3
  },
  {
    "addhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_42 },
#else
    { 0, 0, output_42 },
#endif
    (insn_gen_fn) gen_addhi3,
    &operand_dataÝ84¨,
    3,
    0,
    1,
    3
  },
  {
    "addqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_43 },
#else
    { 0, 0, output_43 },
#endif
    (insn_gen_fn) gen_addqi3,
    &operand_dataÝ87¨,
    3,
    0,
    1,
    3
  },
  {
    "adddf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_44 },
#else
    { 0, 0, output_44 },
#endif
    (insn_gen_fn) gen_adddf3,
    &operand_dataÝ90¨,
    3,
    0,
    1,
    3
  },
  {
    "addsf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_45 },
#else
    { 0, 0, output_45 },
#endif
    (insn_gen_fn) gen_addsf3,
    &operand_dataÝ93¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2326",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_46 },
#else
    { 0, 0, output_46 },
#endif
    0,
    &operand_dataÝ96¨,
    4,
    0,
    1,
    3
  },
  {
    "subsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_47 },
#else
    { 0, 0, output_47 },
#endif
    (insn_gen_fn) gen_subsi3,
    &operand_dataÝ96¨,
    3,
    0,
    1,
    3
  },
  {
    "subhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_48 },
#else
    { 0, 0, output_48 },
#endif
    (insn_gen_fn) gen_subhi3,
    &operand_dataÝ100¨,
    3,
    0,
    1,
    3
  },
  {
    "subqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_49 },
#else
    { 0, 0, output_49 },
#endif
    (insn_gen_fn) gen_subqi3,
    &operand_dataÝ103¨,
    3,
    0,
    1,
    3
  },
  {
    "subdf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_50 },
#else
    { 0, 0, output_50 },
#endif
    (insn_gen_fn) gen_subdf3,
    &operand_dataÝ106¨,
    3,
    0,
    1,
    3
  },
  {
    "subsf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_51 },
#else
    { 0, 0, output_51 },
#endif
    (insn_gen_fn) gen_subsf3,
    &operand_dataÝ109¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2588",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_52 },
#else
    { 0, 0, output_52 },
#endif
    0,
    &operand_dataÝ112¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2604",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_53 },
#else
    { 0, 0, output_53 },
#endif
    0,
    &operand_dataÝ115¨,
    3,
    0,
    1,
    3
  },
  {
    "muldf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_54 },
#else
    { 0, 0, output_54 },
#endif
    (insn_gen_fn) gen_muldf3,
    &operand_dataÝ90¨,
    3,
    0,
    1,
    3
  },
  {
    "mulsf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_55 },
#else
    { 0, 0, output_55 },
#endif
    (insn_gen_fn) gen_mulsf3,
    &operand_dataÝ93¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2767",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_56 },
#else
    { 0, 0, output_56 },
#endif
    0,
    &operand_dataÝ118¨,
    3,
    0,
    1,
    3
  },
  {
    "divdf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_57 },
#else
    { 0, 0, output_57 },
#endif
    (insn_gen_fn) gen_divdf3,
    &operand_dataÝ106¨,
    3,
    0,
    1,
    3
  },
  {
    "divsf3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_58 },
#else
    { 0, 0, output_58 },
#endif
    (insn_gen_fn) gen_divsf3,
    &operand_dataÝ109¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2933",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_59 },
#else
    { 0, 0, output_59 },
#endif
    0,
    &operand_dataÝ118¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:2983",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_60 },
#else
    { 0, 0, output_60 },
#endif
    0,
    &operand_dataÝ121¨,
    3,
    0,
    2,
    3
  },
  {
    "andsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_61 },
#else
    { 0, 0, output_61 },
#endif
    (insn_gen_fn) gen_andsi3,
    &operand_dataÝ74¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3032",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_62 },
#else
    { 0, 0, output_62 },
#endif
    0,
    &operand_dataÝ124¨,
    3,
    0,
    2,
    3
  },
  {
    "andhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_63 },
#else
    { 0, 0, output_63 },
#endif
    (insn_gen_fn) gen_andhi3,
    &operand_dataÝ127¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3093",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_64 },
#else
    { 0, 0, output_64 },
#endif
    0,
    &operand_dataÝ130¨,
    3,
    0,
    2,
    3
  },
  {
    "andqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_65 },
#else
    { 0, 0, output_65 },
#endif
    (insn_gen_fn) gen_andqi3,
    &operand_dataÝ133¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3173",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_66 },
#else
    { 0, 0, output_66 },
#endif
    0,
    &operand_dataÝ136¨,
    3,
    0,
    2,
    3
  },
  {
    "iorsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_67 },
#else
    { 0, 0, output_67 },
#endif
    (insn_gen_fn) gen_iorsi3,
    &operand_dataÝ74¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3222",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_68 },
#else
    { 0, 0, output_68 },
#endif
    0,
    &operand_dataÝ139¨,
    3,
    0,
    2,
    3
  },
  {
    "iorhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_69 },
#else
    { 0, 0, output_69 },
#endif
    (insn_gen_fn) gen_iorhi3,
    &operand_dataÝ142¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3276",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_70 },
#else
    { 0, 0, output_70 },
#endif
    0,
    &operand_dataÝ145¨,
    3,
    0,
    2,
    3
  },
  {
    "iorqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_71 },
#else
    { 0, 0, output_71 },
#endif
    (insn_gen_fn) gen_iorqi3,
    &operand_dataÝ133¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3356",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_72 },
#else
    { 0, 0, output_72 },
#endif
    0,
    &operand_dataÝ136¨,
    3,
    0,
    2,
    3
  },
  {
    "xorsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_73 },
#else
    { 0, 0, output_73 },
#endif
    (insn_gen_fn) gen_xorsi3,
    &operand_dataÝ74¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3405",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_74 },
#else
    { 0, 0, output_74 },
#endif
    0,
    &operand_dataÝ139¨,
    3,
    0,
    2,
    3
  },
  {
    "xorhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_75 },
#else
    { 0, 0, output_75 },
#endif
    (insn_gen_fn) gen_xorhi3,
    &operand_dataÝ142¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:3464",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_76 },
#else
    { 0, 0, output_76 },
#endif
    0,
    &operand_dataÝ145¨,
    3,
    0,
    2,
    3
  },
  {
    "xorqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_77 },
#else
    { 0, 0, output_77 },
#endif
    (insn_gen_fn) gen_xorqi3,
    &operand_dataÝ133¨,
    3,
    0,
    1,
    3
  },
  {
    "negsi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_78 },
#else
    { 0, 0, output_78 },
#endif
    (insn_gen_fn) gen_negsi2,
    &operand_dataÝ148¨,
    2,
    0,
    1,
    3
  },
  {
    "neghi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_79 },
#else
    { 0, 0, output_79 },
#endif
    (insn_gen_fn) gen_neghi2,
    &operand_dataÝ150¨,
    2,
    0,
    1,
    3
  },
  {
    "negdf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_80 },
#else
    { 0, 0, output_80 },
#endif
    (insn_gen_fn) gen_negdf2,
    &operand_dataÝ152¨,
    2,
    0,
    1,
    3
  },
  {
    "negsf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_81 },
#else
    { 0, 0, output_81 },
#endif
    (insn_gen_fn) gen_negsf2,
    &operand_dataÝ154¨,
    2,
    0,
    1,
    3
  },
  {
    "abssi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_82 },
#else
    { 0, 0, output_82 },
#endif
    (insn_gen_fn) gen_abssi2,
    &operand_dataÝ148¨,
    2,
    0,
    1,
    3
  },
  {
    "abshi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_83 },
#else
    { 0, 0, output_83 },
#endif
    (insn_gen_fn) gen_abshi2,
    &operand_dataÝ150¨,
    2,
    0,
    1,
    3
  },
  {
    "absdf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_84 },
#else
    { 0, 0, output_84 },
#endif
    (insn_gen_fn) gen_absdf2,
    &operand_dataÝ152¨,
    2,
    0,
    1,
    3
  },
  {
    "abssf2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_85 },
#else
    { 0, 0, output_85 },
#endif
    (insn_gen_fn) gen_abssf2,
    &operand_dataÝ154¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:3685",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_86 },
#else
    { 0, 0, output_86 },
#endif
    0,
    &operand_dataÝ156¨,
    2,
    0,
    1,
    3
  },
  {
    "one_cmplsi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_87 },
#else
    { 0, 0, output_87 },
#endif
    (insn_gen_fn) gen_one_cmplsi2,
    &operand_dataÝ96¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:3723",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_88 },
#else
    { 0, 0, output_88 },
#endif
    0,
    &operand_dataÝ158¨,
    2,
    0,
    1,
    3
  },
  {
    "one_cmplhi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_89 },
#else
    { 0, 0, output_89 },
#endif
    (insn_gen_fn) gen_one_cmplhi2,
    &operand_dataÝ100¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:3760",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_90 },
#else
    { 0, 0, output_90 },
#endif
    0,
    &operand_dataÝ160¨,
    2,
    0,
    1,
    3
  },
  {
    "one_cmplqi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_91 },
#else
    { 0, 0, output_91 },
#endif
    (insn_gen_fn) gen_one_cmplqi2,
    &operand_dataÝ162¨,
    2,
    0,
    1,
    3
  },
  {
    "ashldi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_92 },
#else
    { 0, 0, output_92 },
#endif
    (insn_gen_fn) gen_ashldi3,
    &operand_dataÝ164¨,
    3,
    0,
    1,
    3
  },
  {
    "ashrdi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_93 },
#else
    { 0, 0, output_93 },
#endif
    (insn_gen_fn) gen_ashrdi3,
    &operand_dataÝ167¨,
    3,
    0,
    1,
    3
  },
  {
    "ashlsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_94 },
#else
    { 0, 0, output_94 },
#endif
    (insn_gen_fn) gen_ashlsi3,
    &operand_dataÝ170¨,
    3,
    0,
    1,
    3
  },
  {
    "ashrsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_95 },
#else
    { 0, 0, output_95 },
#endif
    (insn_gen_fn) gen_ashrsi3,
    &operand_dataÝ170¨,
    3,
    0,
    1,
    3
  },
  {
    "ashlhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_96 },
#else
    { 0, 0, output_96 },
#endif
    (insn_gen_fn) gen_ashlhi3,
    &operand_dataÝ173¨,
    3,
    0,
    1,
    3
  },
  {
    "ashrhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_97 },
#else
    { 0, 0, output_97 },
#endif
    (insn_gen_fn) gen_ashrhi3,
    &operand_dataÝ173¨,
    3,
    0,
    1,
    3
  },
  {
    "ashlqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_98 },
#else
    { 0, 0, output_98 },
#endif
    (insn_gen_fn) gen_ashlqi3,
    &operand_dataÝ176¨,
    3,
    0,
    1,
    3
  },
  {
    "ashrqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_99 },
#else
    { 0, 0, output_99 },
#endif
    (insn_gen_fn) gen_ashrqi3,
    &operand_dataÝ176¨,
    3,
    0,
    1,
    3
  },
  {
    "lshrdi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_100 },
#else
    { 0, 0, output_100 },
#endif
    (insn_gen_fn) gen_lshrdi3,
    &operand_dataÝ164¨,
    3,
    0,
    1,
    3
  },
  {
    "lshrsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_101 },
#else
    { 0, 0, output_101 },
#endif
    (insn_gen_fn) gen_lshrsi3,
    &operand_dataÝ170¨,
    3,
    0,
    1,
    3
  },
  {
    "lshrhi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_102 },
#else
    { 0, 0, output_102 },
#endif
    (insn_gen_fn) gen_lshrhi3,
    &operand_dataÝ173¨,
    3,
    0,
    1,
    3
  },
  {
    "lshrqi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_103 },
#else
    { 0, 0, output_103 },
#endif
    (insn_gen_fn) gen_lshrqi3,
    &operand_dataÝ176¨,
    3,
    0,
    1,
    3
  },
  {
    "beq",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_104 },
#else
    { 0, 0, output_104 },
#endif
    (insn_gen_fn) gen_beq,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bne",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_105 },
#else
    { 0, 0, output_105 },
#endif
    (insn_gen_fn) gen_bne,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bgt",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_106 },
#else
    { 0, 0, output_106 },
#endif
    (insn_gen_fn) gen_bgt,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bgtu",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_107 },
#else
    { 0, 0, output_107 },
#endif
    (insn_gen_fn) gen_bgtu,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "blt",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_108 },
#else
    { 0, 0, output_108 },
#endif
    (insn_gen_fn) gen_blt,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bltu",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_109 },
#else
    { 0, 0, output_109 },
#endif
    (insn_gen_fn) gen_bltu,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bge",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_110 },
#else
    { 0, 0, output_110 },
#endif
    (insn_gen_fn) gen_bge,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bgeu",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_111 },
#else
    { 0, 0, output_111 },
#endif
    (insn_gen_fn) gen_bgeu,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "ble",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_112 },
#else
    { 0, 0, output_112 },
#endif
    (insn_gen_fn) gen_ble,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "bleu",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_113 },
#else
    { 0, 0, output_113 },
#endif
    (insn_gen_fn) gen_bleu,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4332",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_114 },
#else
    { 0, 0, output_114 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4355",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_115 },
#else
    { 0, 0, output_115 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4378",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_116 },
#else
    { 0, 0, output_116 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4401",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_117 },
#else
    { 0, 0, output_117 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4424",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_118 },
#else
    { 0, 0, output_118 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4447",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_119 },
#else
    { 0, 0, output_119 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4470",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_120 },
#else
    { 0, 0, output_120 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4493",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_121 },
#else
    { 0, 0, output_121 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4516",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_122 },
#else
    { 0, 0, output_122 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4539",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_123 },
#else
    { 0, 0, output_123 },
#endif
    0,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "*i370.md:4567",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_124 },
#else
    { 0, 0, output_124 },
#endif
    0,
    &operand_dataÝ179¨,
    2,
    2,
    1,
    3
  },
  {
    "*i370.md:4595",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_125 },
#else
    { 0, 0, output_125 },
#endif
    0,
    &operand_dataÝ179¨,
    2,
    2,
    1,
    3
  },
  {
    "jump",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_126 },
#else
    { 0, 0, output_126 },
#endif
    (insn_gen_fn) gen_jump,
    &operand_dataÝ77¨,
    1,
    0,
    0,
    3
  },
  {
    "indirect_jump",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_127 },
#else
    { 0, 0, output_127 },
#endif
    (insn_gen_fn) gen_indirect_jump,
    &operand_dataÝ181¨,
    1,
    0,
    1,
    3
  },
  {
    "tablejump",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_128 },
#else
    { 0, 0, output_128 },
#endif
    (insn_gen_fn) gen_tablejump,
    &operand_dataÝ182¨,
    2,
    0,
    1,
    3
  },
  {
    "call",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_129 },
#else
    { 0, 0, output_129 },
#endif
    (insn_gen_fn) gen_call,
    &operand_dataÝ184¨,
    2,
    0,
    1,
    3
  },
  {
    "call_value",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_130 },
#else
    { 0, 0, output_130 },
#endif
    (insn_gen_fn) gen_call_value,
    &operand_dataÝ186¨,
    3,
    0,
    1,
    3
  },
  {
    "*i370.md:4821",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_131 },
#else
    { 0, 0, output_131 },
#endif
    0,
    &operand_dataÝ189¨,
    2,
    0,
    1,
    3
  },
  {
    "*i370.md:4869",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_132 },
#else
    { 0, 0, output_132 },
#endif
    0,
    &operand_dataÝ191¨,
    3,
    0,
    1,
    3
  },
  {
    "nop",
#if HAVE_DESIGNATED_INITIALIZERS
    { .function = output_133 },
#else
    { 0, 0, output_133 },
#endif
    (insn_gen_fn) gen_nop,
    &operand_dataÝ0¨,
    0,
    0,
    0,
    3
  },
  {
    "cmpmemsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_cmpmemsi,
    &operand_dataÝ194¨,
    5,
    0,
    0,
    0
  },
  {
    "clrstrsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_clrstrsi,
    &operand_dataÝ199¨,
    3,
    0,
    1,
    0
  },
  {
    "movstrsi",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_movstrsi,
    &operand_dataÝ202¨,
    4,
    0,
    0,
    0
  },
  {
    "extendsidi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_extendsidi2,
    &operand_dataÝ206¨,
    2,
    0,
    1,
    0
  },
  {
    "zero_extendsidi2",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_zero_extendsidi2,
    &operand_dataÝ206¨,
    2,
    0,
    1,
    0
  },
  {
    "mulsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_mulsi3,
    &operand_dataÝ207¨,
    3,
    0,
    0,
    0
  },
  {
    "divsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_divsi3,
    &operand_dataÝ207¨,
    3,
    0,
    0,
    0
  },
  {
    "udivsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_udivsi3,
    &operand_dataÝ207¨,
    3,
    0,
    0,
    0
  },
  {
    "modsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_modsi3,
    &operand_dataÝ207¨,
    3,
    0,
    0,
    0
  },
  {
    "umodsi3",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_umodsi3,
    &operand_dataÝ207¨,
    3,
    0,
    0,
    0
  },
  {
    "untyped_call",
#if HAVE_DESIGNATED_INITIALIZERS
    { 0 },
#else
    { 0, 0, 0 },
#endif
    (insn_gen_fn) gen_untyped_call,
    &operand_dataÝ210¨,
    3,
    0,
    0,
    0
  },
};


const char *
get_insn_name (int code)
{
  if (code == NOOP_MOVE_INSN_CODE)
    return "NOOP_MOVE";
  else
    return insn_dataÝcode¨.name;
}
