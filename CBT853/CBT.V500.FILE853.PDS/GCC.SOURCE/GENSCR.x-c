/*********************************************************************/
/*                                                                   */
/*  This Program Written by Paul Edwards.                            */
/*  Released to the Public Domain                                    */
/*                                                                   */
/*********************************************************************/
/*********************************************************************/
/*                                                                   */
/*  genscr.c - generate scripts                                      */
/*                                                                   */
/*********************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

/* number of files */
#define NUM 7

static void func1(FILE *f, char *dir, char *file);
static void func2(FILE *f, char *dir, char *file);
static void func3(FILE *f, char *dir, char *file);
static void func4(FILE *f, char *dir, char *file);
static void func5(FILE *f, char *dir, char *file);
static void func6(FILE *f, char *dir, char *file);
static void func7(FILE *f, char *dir, char *file);
static char *mangle(char *file);

int main(int argc, char **argv)
{
    FILE *filesÝNUM¨;
    void (*funcsÝNUM¨)(FILE *, char *dir, char *file) =
    {
        func1,
        func2,
        func3,
        func4,
        func5,
        func6,
        func7,
    };
    int x;
    char bufÝ100¨;
    char dirÝ50¨;
    char fileÝ50¨;

    if (argc <= NUM)
    {
        printf("usage: genscr <out1> ... <out9>\n");
        return (EXIT_FAILURE);
    }

    for (x = 0; x < NUM; x++)
    {
        filesÝx¨ = fopen(*(argv + x + 1), "w");
        if (filesÝx¨ == NULL)
        {
            printf("failed to open %s\n", *(argv + x + 1));
            return (EXIT_FAILURE);
        }
    }

    while (fgets(buf, sizeof buf, stdin) != NULL)
    {
        sscanf(buf, "%s %s", dir, file);
        for (x = 0; x < NUM; x++)
        {
            funcsÝx¨(filesÝx¨, dir, file);
        }
    }

    for (x = 0; x < NUM; x++)
    {
        fclose(filesÝx¨);
    }
    return (0);
}

/* compile.bat */
static void func1(FILE *f, char *dir, char *file)
{
    if (strcmp(dir, "gcc") == 0)
    {
        fprintf(f,
                "call stdcomp %s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "libiberty") == 0)
    {
        fprintf(f,
                "call stdcomp ../libiberty/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "i370") == 0)
    {
        fprintf(f,
                "call stdcomp config/i370/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    return;
}

/* compmvs.bat */
static void func2(FILE *f, char *dir, char *file)
{
    if (strcmp(dir, "gcc") == 0)
    {
        fprintf(f,
                "call stdcompm %s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "libiberty") == 0)
    {
        fprintf(f,
                "call stdcompm ../libiberty/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "i370") == 0)
    {
        fprintf(f,
                "call stdcompm config/i370/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "c") == 0)
    {
        fprintf(f,
                "call stdcompm ../../pdos/pdpclib/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    else if (strcmp(dir, "util") == 0)
    {
        fprintf(f,
                "call stdcompm ../../pdos/pdpclib/%s.c "
                "%%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9\n",
                file);
    }
    return;
}

/* stage2.jcl */
static void func3(FILE *f, char *dir, char *file)
{
    if (strcmp(dir, "gcc") == 0)
    {
        fprintf(f, "//%-8s EXEC ST2CMP,MEMBER=%s\n",
                mangle(file), mangle(file));
    }
    else if (strcmp(dir, "libiberty") == 0)
    {
        fprintf(f, "//%-8s EXEC ST2CMP,MEMBER=%s\n",
                mangle(file), mangle(file));
    }
    else if (strcmp(dir, "i370") == 0)
    {
        fprintf(f, "//%-8s EXEC ST2CMP,MEMBER=%s\n",
                mangle(file), mangle(file));
    }
    else if (strcmp(dir, "c") == 0)
    {
        fprintf(f, "//%-8s EXEC ST2PDP,MEMBER=%s\n",
                mangle(file), mangle(file));
    }
    return;
}

/* stage2 link */
static void func4(FILE *f, char *dir, char *file)
{
    if (strcmp(dir, "util") != 0)
    {
        fprintf(f, " INCLUDE SYSLIB(%s)\n", mangle(file));
    }
    return;
}

static char *mangle(char *file)
{
    /* yes mum, I realise I will go to hell for using a static
       buffer when the caller is calling it twice in the one
       function. But it will work anyway in this case. */
    static char bufÝ50¨;
    unsigned char *p;

    strcpy(buf, file);
    bufÝ8¨ = '\0';
    p = (unsigned char *)buf;
    while (*p != '\0')
    {
        *p = toupper(*p);
        if (*p == '-')
        {
            *p = '@';
        }
        else if (*p == '_')
        {
            *p = '@';
        }
        p++;
    }
    return (buf);
}

/* CMS */
static void func5(FILE *f, char *dir, char *file)
{
    static char bufÝ50¨;
    unsigned char *p;

    if ((strcmp(dir, "gcc") != 0)
        && (strcmp(dir, "libiberty") != 0)
        && (strcmp(dir, "i370") != 0))
    {
        return;
    }
    strcpy(buf, file);
    bufÝ8¨ = '\0';
    p = (unsigned char *)buf;
    while (*p != '\0')
    {
        *p = toupper(*p);
        p++;
    }
    fprintf(f, "XXXX %-8s YYYY\n", buf);
    return;
}

/* music jobs */
static void func6(FILE *f, char *dir, char *file)
{
    static char bufÝ50¨;

    if (strcmp(dir, "asm") == 0) return;
    strcpy(buf, file);
    bufÝ13¨ = '\0';
    fprintf(f,
"/ID SAVE-JOB-123456 @BLD000 9999 9999 9999 9999\n"
"/PASSWORD=BLD000\n"
"/sys region=9999,xregion=64m\n"
"/file sysprint prt osrecfm(f) oslrecl(256)\n"
"/file sysin n(%s.c) shr\n"
"/file o n(%s.s) new recfm(v) sp(1000)\n"
"/file sysincl pds(*.h)\n"
"/file include pds(*.h)\n"
"/parm -Os -S %s -DMUSIC -o dd:o -\n"
"/load xmon\n"
"gcc n(gcc.lmod) lcparm\n"
"/END\n",
    buf, buf,
      ((strcmp(dir, "c") == 0) || (strcmp(dir, "util") == 0)) ?
      "-DUSE_MEMMGR" :
      "-remap -DHAVE_CONFIG_H -DIN_GCC -DPUREISO -DIFOX"
    );
    return;
}

/* VSE assembly commands */
static void func7(FILE *f, char *dir, char *file)
{
    if (strcmp(dir, "asm") == 0) return;
    if (strcmp(dir, "util") == 0) return;
    fprintf(f, "// EXEC ASSEMBLY\n"
            "undivert(%s.s)/*\n", file);
    return;
}
