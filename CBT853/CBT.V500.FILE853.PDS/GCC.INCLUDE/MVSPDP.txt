/* Definitions of target machine for GNU compiler.  System/370 version.
   Copyright (C) 1989, 1993, 1995, 1996, 1997 Free Software Foundation, Inc.
   Contributed by Jan Stein (jan@cd.chalmers.se).
   Modified for OS/390 LanguageEnvironment C by Dave Pitts (dpitts@cozx.com)
   Modified for use with PDPCLIB by Paul Edwards.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#ifndef MVSPDP_INCLUDED
#define MVSPDP_INCLUDED 1

#ifdef TARGET_CMS
#define TARGET_VERSION fprintf (stderr, " (370/CMS-PDP)");

/* Specify that we're generating code for MVS.  */
/* (even though it's really CMS) */

#define TARGET_MVS 1

/* Target OS preprocessor built-ins.  */
#define TARGET_OS_CPP_BUILTINS()                \
    do {                                        \
        builtin_define_std ("PDPMAC");          \
        builtin_define_std ("pdpmac");          \
        builtin_define_std ("CMS");             \
	builtin_define_std ("cms");             \
	builtin_assert ("system=cms");          \
    } while (0)

#elif defined(TARGET_VSE)
#define TARGET_VERSION fprintf (stderr, " (370/VSE-PDP)");

/* Specify that we're generating code for MVS.  */
/* (even though it's really VSE) */

#define TARGET_MVS 1

/* Target OS preprocessor built-ins.  */
#define TARGET_OS_CPP_BUILTINS()                \
    do {                                        \
        builtin_define_std ("PDPMAC");          \
        builtin_define_std ("pdpmac");          \
        builtin_define_std ("VSE");             \
	builtin_define_std ("vse");             \
	builtin_assert ("system=vse");          \
    } while (0)

#else /* not CMS or VSE, must be MVS */

#define TARGET_VERSION fprintf (stderr, " (370/MVS-PDP)");

/* Specify that we're generating code for MVS.  */

#define TARGET_MVS 1
/* Target OS preprocessor built-ins.  */
#define TARGET_OS_CPP_BUILTINS()                \
    do {                                        \
        builtin_define_std ("PDPMAC");          \
        builtin_define_std ("pdpmac");          \
        builtin_define_std ("MVS");             \
	builtin_define_std ("mvs");             \
	builtin_assert ("system=mvs");          \
    } while (0)

#endif


/* common stuff */

#include <stdio.h>
#include <stdarg.h>

#define TARGET_HLASM 1
#define TARGET_EBCDIC 1

/* Specify that we're using the PDP macros */

#define TARGET_PDPMAC 1

/* Specify that we're using macro prolog/epilog.  */

#define TARGET_MACROS 1

/* Options for the preprocessor for this target machine.  */

#define CPP_SPEC "-trigraphs"
#define STARTFILE_SPEC ""


/* The generated files don't expect detabbing, and
   configure won't handle a single executable being
   created. So only enable these options if a pure
   ISO environment has been requested in the compile
   script, and we're not doing a generated file. */

#if defined(PUREISO) && !defined(GENERATOR_FILE)
#define SINGLE_EXECUTABLE 1
#define DETAB 1
#endif

/* If running on MVS, need some EBCDIC-related differences */
#if defined(__MVS__) || defined(__CMS__) || defined(__VSE__)
#define HOST_EBCDIC 1
#endif

#undef INCLUDE_DEFAULTS
#define INCLUDE_DEFAULTS \
    { \
    { 0, 0, 0, 0 } \
    }

#ifdef PUREISO
#include "pureiso.h"
#endif


/* unfortunately toplev.c doesn't compile with IFOX
   because there are more than 399 external references.
   You get an error message like this:
   IFO264      TOO MANY ESD ENTRIES
   To combat this problem, we index into an array
   instead. */
#if IFOX
#undef flag_test_coverage
#undef flag_branch_probabilities
#undef flag_reorder_blocks
#undef flag_reorder_functions
#undef flag_rename_registers
#undef flag_force_mem
#undef flag_force_addr
#undef flag_defer_pop
#undef flag_float_store
#undef flag_strength_reduce
#undef flag_old_unroll_loops
#undef flag_old_unroll_all_loops
#undef flag_move_all_movables
#undef flag_prefetch_loop_arrays
#undef flag_reduce_all_givs
#undef flag_writable_strings
#undef flag_no_function_cse
#undef flag_omit_frame_pointer
#undef flag_function_sections
#undef flag_data_sections
#undef flag_no_peephole
#undef flag_optimize_sibling_calls
#undef flag_value_profile_transformations
#undef flag_signed_char
#undef flag_short_enums
#undef flag_caller_saves
#undef flag_cse_follow_jumps
#undef flag_cse_skip_blocks
#undef flag_expensive_optimizations
#undef flag_rounding_math
#undef flag_signaling_nans
#undef flag_complex_divide_method
#undef flag_syntax_only
#undef flag_web
#undef flag_loop_optimize
#undef flag_crossjumping
#undef flag_if_conversion
#undef flag_if_conversion2
#undef flag_delete_null_pointer_checks
#undef flag_gcse
#undef flag_peel_loops
#undef flag_unroll_loops
#undef flag_unroll_all_loops
#undef flag_unswitch_loops
#undef flag_shared_data

#define flag_test_coverage gflagsÝ0¨
#define flag_branch_probabilities gflagsÝ1¨
#define flag_reorder_blocks gflagsÝ2¨
#define flag_reorder_functions gflagsÝ3¨
#define flag_rename_registers gflagsÝ4¨
#define flag_force_mem gflagsÝ5¨
#define flag_force_addr gflagsÝ6¨
#define flag_defer_pop gflagsÝ7¨
#define flag_float_store gflagsÝ8¨
#define flag_strength_reduce gflagsÝ9¨
#define flag_old_unroll_loops gflagsÝ10¨
#define flag_old_unroll_all_loops gflagsÝ11¨
#define flag_move_all_movables gflagsÝ12¨
#define flag_prefetch_loop_arrays gflagsÝ13¨
#define flag_reduce_all_givs gflagsÝ14¨
#define flag_writable_strings gflagsÝ15¨
#define flag_no_function_cse gflagsÝ16¨
#define flag_omit_frame_pointer gflagsÝ17¨
#define flag_function_sections gflagsÝ18¨
#define flag_data_sections gflagsÝ19¨
#define flag_no_peephole gflagsÝ20¨
#define flag_optimize_sibling_calls gflagsÝ21¨
#define flag_value_profile_transformations gflagsÝ22¨
#define flag_signed_char gflagsÝ23¨
#define flag_short_enums gflagsÝ24¨
#define flag_caller_saves gflagsÝ25¨
#define flag_cse_follow_jumps gflagsÝ26¨
#define flag_cse_skip_blocks gflagsÝ27¨
#define flag_expensive_optimizations gflagsÝ28¨
#define flag_rounding_math gflagsÝ29¨
#define flag_signaling_nans gflagsÝ30¨
#define flag_complex_divide_method gflagsÝ31¨
#define flag_syntax_only gflagsÝ32¨
#define flag_web gflagsÝ33¨
#define flag_loop_optimize gflagsÝ34¨
#define flag_crossjumping gflagsÝ35¨
#define flag_if_conversion gflagsÝ36¨
#define flag_if_conversion2 gflagsÝ37¨
#define flag_delete_null_pointer_checks gflagsÝ38¨
#define flag_gcse gflagsÝ39¨
#define flag_peel_loops gflagsÝ40¨
#define flag_unroll_loops gflagsÝ41¨
#define flag_unroll_all_loops gflagsÝ42¨
#define flag_unswitch_loops gflagsÝ43¨
#define flag_shared_data gflagsÝ44¨
#endif


#ifdef DETAB
#define fputs t_fputs
#define fprintf t_fprintf
#define vfprintf t_vfprintf
#define fwrite t_fwrite
#define fputc t_fputc
#undef putc
#define putc t_fputc

int t_fputs (const char *str, FILE *file);
int t_fprintf (FILE *file, const char *format, ...);
int t_vfprintf (FILE *file, const char *format, va_list arg);
size_t t_fwrite (const void *ptr, size_t size, size_t nmemb, FILE *file);
int t_fputc (int c, FILE *file);
#endif


#endif
