{"INMR01": {"INMLRECL": 80, "INMFNODE": "ORIGNODE", "INMFUID": "ORIGUID", "INMTNODE": "DESTNODE", "INMTUID": "DESTUID", "INMFTIME": "20110613192458000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 44, "INMDSNAM": "PDPCLIB.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 6176, "INMBLKSZ": 6180, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"PDPCLIB.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 6180, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0, "DS1REFD": "000000", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x00\\x00\\x00\\x00'", "DS1LSTAR": "b'\\x00\\x00\\x00'", "DS1TRBAL": "b''"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0cvD\\x04\\xa5\\x0c\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0cvD\\x04\\xa5\\x0c\\xd8'", "b'X\\x00/\\xb0\\x00\\x00\\x00m\\x00\\x07\\x00m\\x00\\t\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"MVSMACS": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*                                                                     *\n*  Macros to support MVS                                              *\n*  Written by Gerhard Postpischil                                     *\n*  Released to the public domain                                      *\n*                                                                     *\n***********************************************************************\n         MACRO ,\n&NM      AMUSE &WRK1=R14,&WRK2=R15\n         GBLC  &SYS\n.*\n.*   AMUSE sets addressing mode to back to the caller's\n.*         Expands nothing or label for S370 or S390\n.*         Required after GO24 call to return data to caller\n.*\n         AIF   ('&SYS' NE 'S380').OLDSYS\n&NM      L     &WRK1,4(,R13)      Old save area\n         L     &WRK1,12(,R14)     Caller's mode in high bit\n         N     &WRK1,=X'80000000'   Kill address\n         LA    &WRK2,*+4+2+2      Get new mode and address\n         OR    &WRK1,&WRK2\n         BSM   R0,&WRK1           CONTINUE IN USER MODE\n         MEXIT ,\n.OLDSYS  AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEFINE LABEL ONLY\n.MEND    MEND  ,\n*\n*\n*\n         MACRO ,                  FIXED 2010.293\n&NM      FUNEXIT &RC=\n         GBLC  &SYS,&ZZSETSA,&ZZSETSL,&ZZSETSP\n         GBLB  &ZZSETAM\n         LCLC  &LBL\n&LBL     SETC  '&NM'\n         AIF   ('&ZZSETSL' NE '' AND '&RC' EQ '').JUSTF\n         AIF   ('&ZZSETSA' EQ '').SAMESA\n         AIF   ('&ZZSETSL' NE '').SAMESA\n&LBL     L     R13,4(,R13)        RESTORE HIGHER SA\n&LBL     SETC  ''\n.SAMESA  AIF   ('&RC' EQ '').LMALL\n         AIF   ('&RC' EQ '(15)' OR '&RC' EQ '(R15)').NORC\n         AIF   (K'&RC LT 3).LA\n         AIF   ('&RC'(1,1) NE '(' OR '&RC'(2,1) EQ '(').LA\n         AIF   ('&RC'(K'&RC,1) NE ')' OR '&RC'(K'&RC-1,1) EQ ')').LA\n&LBL     LR    R15,&RC(1)\n&LBL     SETC  ''\n         AGO   .NORC\n.LA      ANOP  ,\n&LBL     LA    R15,&RC            SET RETURN CODE\n&LBL     SETC  ''\n.NORC    AIF   ('&ZZSETSL' EQ '').NOFRM\n         LR    R1,R13             SAVE CURRENT SA\n         L     R13,4(,R13)        REGAIN CALLER'S SA\n         ST    R15,16(,R13)       SAVE RETURN CODE\n         FREEMAIN R,A=(1),LV=&ZZSETSL,SP=&ZZSETSP\n         AGO   .LMALL             GOTTA LOVE SPAGHETTI CODE\n.NOFRM   ANOP  ,\n&LBL     L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         AGO   .EXMODE\n.JUSTF   ANOP  ,\n&LBL     LR    R1,R13             SAVE CURRENT SA\n&LBL     SETC  ''\n         L     R13,4(,R13)        REGAIN CALLER'S SA\n         FREEMAIN R,A=(1),LV=&ZZSETSL,SP=&ZZSETSP\n.LMALL   ANOP  ,\n&LBL     LM    R14,R12,12(R13)    RELOAD ALL\n.EXMODE  AIF   (&ZZSETAM).BSM\n         BR    R14\n         MEXIT ,\n.BSM     BSM   R0,R14\n         MEND  ,\n*\n*\n*\n         MACRO ,             UPDATED 2010.293\n&NM      FUNHEAD &ID=YES,&IO=NO,&AM=NO,&SAVE=,&US=YES\n.*\n.*   MACRO TO BEGIN EACH FUNCTION\n.*     HANDLES STANDARD OS ENTRY CONVENTIONS\n.*   ID=  YES | NO      YES GENERATES DC WITH FUNCTION NAME\n.*   IO=  YES | NO      YES GENERATES LOAD / USING FOR ZDCBAREA\n.*   AM=  YES | NO      YES USES BSM TO PRESERVE CALER'S AMODE\n.*   SAVE=name          USES STATIC SAVE AREA OF THAT NAME,\n.*                           SETS R13, AND DECLARES ON USING\n.*   SAVE=(name,len{,subpool})   CREATES SAVE AREA WITH GETMAIN,\n.*                           SETS R13, AND DECLARES ON USING\n.*   US=  YES | NO      YES - want a USING for R13\n.*   Options used here are remembered and handled properly by\n.*     subsequent FUNEXIT macros\n.*\n         GBLC  &SYS,&ZZSETSA,&ZZSETSL,&ZZSETSP\n         GBLB  &ZZSETAM\n         LCLC  &LBL\n         LCLA  &I\n&I       SETA  K'&NM\n&I       SETA  ((&I)/2*2+1)       NEED ODD LENGTH FOR STM ALIGN\n&LBL     SETC  '&NM'\n&ZZSETAM SETB  ('&AM' NE 'NO')\n&ZZSETAM SETB  (&ZZSETAM AND '&SYS' EQ 'S380')\n&ZZSETSA SETC  ''\n&ZZSETSL SETC  ''\n&ZZSETSP SETC  ''\n         ENTRY &NM\n         DROP  ,                  Isolate from other code\n         AIF   ('&ID' EQ 'NO').SKIPID\n&LBL     B     *+4+1+&I-&NM.(,R15)    SKIP LABEL\n         DC    AL1(&I),CL(&I)'&NM'    EXPAND LABEL\n&LBL     SETC  ''\n.SKIPID  AIF   (NOT &ZZSETAM).SKIPAM\n&LBL     BSM   R14,R0                 PRESERVE AMODE\n&LBL     SETC  ''\n.SKIPAM  ANOP  ,\n&LBL     STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         LR    R12,R15\n         USING &NM,R12\n         AIF   ('&IO' EQ 'NO').SAVE\n         L     R10,0(,R1)         LOAD FILE WORK AREA\n         USING IHADCB,R10\n.SAVE    AIF   ('&SAVE' EQ '').MEND\n         AIF   (N'&SAVE EQ 1).STATIC\n         AIF   (N'&SAVE EQ 2).DYNAM\n&ZZSETSP SETC  '&SAVE(3)'\n.DYNAM   ANOP  ,\n&ZZSETSL SETC  '&SAVE(2)'\n&ZZSETSA SETC  '&SAVE(1)'\n         GETMAIN R,LV=&ZZSETSL,SP=&ZZSETSP\n         LR    R14,R1             START OF NEW AREA\n         LA    R15,&ZZSETSL       LENGTH\n         SR    R3,R3              ZERO FILL\n         MVCL  R14,R2             CLEAR GOTTEN STORAGE\n         ST    R1,8(,R13)         POINT DOWN\n         ST    R13,4(,R1)         POINT UP\n         LR    R2,R13             SAVE OLD SAVE\n         LR    R13,R1             NEW SAVE AREA\n         USING &SAVE(1),R13       DECLARE IT\n         LM    R14,R3,12(R2)      RESTORE FROM ENTRY\n         MEXIT ,\n.STATIC  LA    R15,&SAVE(1)\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n&ZZSETSA SETC  '&SAVE(1)'\n         AIF   ('&US' EQ 'NO').MEND\n         USING &SAVE(1),R13       DECLARE IT\n.MEND    MEND  ,\n*\n*\n*\n         MACRO ,\n&NM      GO24  &WORK=R15\n         GBLC  &SYS\n.*\n.*   GO24 sets addressing mode to 24 for S380\n.*         expands nothing or label for S370 or S390\n.*\n         AIF   ('&SYS' NE 'S380').OLDSYS\n&NM      LA    &WORK,*+6     GET PAST BSM WITH BIT 0 OFF\n         BSM   R0,&WORK      CONTINUE IN 24-BIT MODE\n         MEXIT ,\n.OLDSYS  AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEFINE LABEL ONLY\n.MEND    MEND  ,\n*\n*\n*\n         MACRO ,\n&NM      GO31  &WORK=R15\n         GBLC  &SYS\n.*\n.*   GO31 sets addressing mode to 31 for S380.\n.*         expands nothing or label for S370 or S390\n.*\n         AIF   ('&SYS' NE 'S380').OLDSYS\n&NM      LA    &WORK,*+10    GET PAST BSM WITH BIT 0 ON\n         O     &WORK,=X'80000000'  SET MODE BIT\n         BSM   R0,&WORK            CONTINUE IN 31-BIT MODE\n         MEXIT ,\n.OLDSYS  AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEFINE LABEL ONLY\n.MEND    MEND  ,\n*\n*\n*\n         MACRO ,             COMPILER DEPENDENT LOAD INTEGER\n&NM      LDINT &R,&A         LOAD INTEGER VALUE FROM PARM LIST\n         GBLC  &COMP         COMPILER GCC OR C/370\n&NM      L     &R,&A         LOAD PARM VALUE\n         AIF ('&COMP' EQ 'GCC').MEND\n.* THIS LINE IS FOR ANYTHING NOT GCC: C/370\n         L     &R,0(,&R)     LOAD INTEGER VALUE\n.MEND    MEND  ,\n*\n*\n*\n         MACRO ,\n&NM      QBSM  &F1,&F2\n         GBLC  &SYS\n.*\n.*   QBSM expands as BSM on environments that require such\n.*   mode switch (S380-only)\n.*   Otherwise it expands as BALR r1,r2 (instead of BSM r1,r2)\n.*   Unless r1 = 0, in which case, a simple BR r2 is done instead\n.*\n         AIF   ('&SYS' NE 'S380').OLDSYS\n&NM      BSM   &F1,&F2\n         MEXIT ,\n.OLDSYS  AIF   ('&F1' EQ '0' OR '&F1' EQ 'R0').BR\n&NM      BALR  &F1,&F2\n         MEXIT ,\n.BR      ANOP  ,\n&NM      BR    &F2\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDPEPIL": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&N       PDPEPIL\n         GBLB  &PDFEPIL\n         AIF   (&PDFEPIL).ONCED\n&PDFEPIL SETB  1\n*\n* The standard GCC exit code macro\n* by Chris Langford and Dave Jones\n* August, 2006\n*\n* This code is in the public domain and can be used without\n* restriction in any application, either commercial or non-commerical,\n* and can be freely redistributed.\n*\n.ONCED   ANOP  ,\n&N       L     13,4(,13)\n         RETURN (14,12),RC=(15)\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDPORIG": {"ttr": 273, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n*  This macro was written by Paul Edwards                            *\n*  Released to the public domain                                     *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n*  PDPTOP - standard code for the start of every assembler file.     *\n*                                                                    *\n*  Allow user to specify system-specific things                      *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n*\n* Is the GCC or C/370 calling convention being used?\n*\n         GBLC &COMP               Declare compiler switch\n*\n* What system are the compiles being done for?\n*\n         GBLC &SYS                Declare variable for system\n*\n* Which OS are we targetting?\n*\n         GBLC &OS                 Declare compiler switch\n*\n* Are PUTs done in locate or move mode?\n*\n         GBLC &OUTM\n*\n*\n*\n&COMP    SETC 'GCC'               Indicate that this is for GCC\n* &COMP    SETC 'C370'            Indicate that this is for C/370\n&SYS     SETC 'S380'              Define either S370, S380 or S390\n&OUTM    SETC 'M'                 Indicate move mode\n* &OUTM    SETC 'L'               Indicate locate mode\n&OS      SETC 'UNKNOWN'           Indicate that the OS is not known\n* &OS      SETC 'MVS'             Indicate that this is for MVS\n* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP\n*\n* AMODE/RMODE not available on S370\n* On S/380 they are a hybrid (currently)\n* On S/390 there is no restriction\n*\n* MVS/XA and earlier versions of MVS/ESA should use the S/380\n* hybrid\n*\n         AMODE 31\n         RMODE 24\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDPPRLG": {"ttr": 269, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&N       PDPPRLG &CINDEX=,&FRAME=,&BASER=,&ENTRY=\n         GBLB  &PDFPRLG\n         AIF   (&PDFPRLG).ONCED\n&PDFPRLG SETB  1\n*\n* The standard GCC entry prolog macro\n* by Chris Langford and Dave Jones\n* August, 2006\n*\n* This code is in the public domain and can be used without\n* restriction in any application, either commercial or non-commerical,\n* and can be freely redistributed.\n*\n.ONCED   AIF   ('&ENTRY' EQ 'NO').NENT\n*\n         ENTRY &N\n.NENT    ANOP\n&N       DS    0H\n         USING *,&BASER\n         SAVE  (14,12),,&N\n         LR    &BASER,15\n         L     15,76(,13)\n         ST    13,4(,15)\n         ST    15,8(,13)\n         LR    13,15\n         AIF   ('&FRAME' EQ '' OR '&FRAME' EQ '0').COMNUM\n         AIF   (T'&FRAME NE 'N').NONNUM\n         AIF   (&FRAME GE 4096).NONNUM\n         LA    15,&FRAME.(,15)\n         AGO   .COMNUM\n.NONNUM  A     15,=A(&FRAME)\n.COMNUM  ST    15,76(13)\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDPTOP": {"ttr": 513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n*  This macro was written by Paul Edwards                            *\n*  Released to the public domain                                     *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n*  PDPTOP - standard code for the start of every assembler file.     *\n*                                                                    *\n*  (version customized for S/370 - see PDPTOP/PDPORIG for original)  *\n*                                                                    *\n**********************************************************************\n*\n* Is the GCC or C/370 calling convention being used?\n*\n         GBLC &COMP               Declare compiler switch\n*\n* What system are the compiles being done for?\n*\n         GBLC &SYS                Declare variable for system\n*\n* Which OS are we targetting?\n*\n         GBLC &OS                 Declare compiler switch\n*\n* Are PUTs done in locate or move mode?\n*\n         GBLC &OUTM\n*\n*\n*\n&COMP    SETC 'GCC'               Indicate that this is for GCC\n* &COMP    SETC 'C370'            Indicate that this is for C/370\n&SYS     SETC 'S370'              Define either S370, S380 or S390\n&OUTM    SETC 'M'                 Indicate move mode\n* &OUTM    SETC 'L'               Indicate locate mode\n&OS      SETC 'UNKNOWN'           Indicate that the OS is not known\n* &OS      SETC 'MVS'             Indicate that this is for MVS\n* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP\n*\n* AMODE/RMODE not available on S370. In the S/370 model,\n* everything is 24-bit so these considerations are not\n* important.\n*\n*        AMODE ANY\n*        RMODE ANY\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDP370": {"ttr": 261, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n*  This macro was written by Paul Edwards                            *\n*  Released to the public domain                                     *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n*  PDPTOP - standard code for the start of every assembler file.     *\n*                                                                    *\n*  (version customized for S/370 - see PDPTOP/PDPORIG for original)  *\n*                                                                    *\n**********************************************************************\n*\n* Is the GCC or C/370 calling convention being used?\n*\n         GBLC &COMP               Declare compiler switch\n*\n* What system are the compiles being done for?\n*\n         GBLC &SYS                Declare variable for system\n*\n* Which OS are we targetting?\n*\n         GBLC &OS                 Declare compiler switch\n*\n* Are PUTs done in locate or move mode?\n*\n         GBLC &OUTM\n*\n*\n*\n&COMP    SETC 'GCC'               Indicate that this is for GCC\n* &COMP    SETC 'C370'            Indicate that this is for C/370\n&SYS     SETC 'S370'              Define either S370, S380 or S390\n&OUTM    SETC 'M'                 Indicate move mode\n* &OUTM    SETC 'L'               Indicate locate mode\n&OS      SETC 'UNKNOWN'           Indicate that the OS is not known\n* &OS      SETC 'MVS'             Indicate that this is for MVS\n* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP\n*\n* AMODE/RMODE not available on S370. In the S/370 model,\n* everything is 24-bit so these considerations are not\n* important.\n*\n*        AMODE ANY\n*        RMODE ANY\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDP380": {"ttr": 263, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n*  This macro was written by Paul Edwards                            *\n*  Released to the public domain                                     *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n*  PDPTOP - standard code for the start of every assembler file.     *\n*                                                                    *\n*  (version customized for S/380 - see PDPTOP/PDPORIG for original)  *\n*                                                                    *\n**********************************************************************\n*\n* Is the GCC or C/370 calling convention being used?\n*\n         GBLC &COMP               Declare compiler switch\n*\n* What system are the compiles being done for?\n*\n         GBLC &SYS                Declare variable for system\n*\n* Which OS are we targetting?\n*\n         GBLC &OS                 Declare compiler switch\n*\n* Are PUTs done in locate or move mode?\n*\n         GBLC &OUTM\n*\n*\n*\n&COMP    SETC 'GCC'               Indicate that this is for GCC\n* &COMP    SETC 'C370'            Indicate that this is for C/370\n&SYS     SETC 'S380'              Define either S370, S380 or S390\n&OUTM    SETC 'M'                 Indicate move mode\n* &OUTM    SETC 'L'               Indicate locate mode\n&OS      SETC 'UNKNOWN'           Indicate that the OS is not known\n* &OS      SETC 'MVS'             Indicate that this is for MVS\n* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP\n*\n* The S/380 model (e.g. MVS/XA) is a hybrid model - the code\n* needs to reside below the line so that it can do I/O, but it\n* can address data above the line. So it has to constantly\n* switch between AMODEs.\n*\n         AMODE 31\n         RMODE 24\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDP390": {"ttr": 265, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n*  This macro was written by Paul Edwards                            *\n*  Released to the public domain                                     *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n*  PDPTOP - standard code for the start of every assembler file.     *\n*                                                                    *\n*  (version customized for S/390 - see PDPTOP/PDPORIG for original)  *\n*                                                                    *\n**********************************************************************\n*\n* Is the GCC or C/370 calling convention being used?\n*\n         GBLC &COMP               Declare compiler switch\n*\n* What system are the compiles being done for?\n*\n         GBLC &SYS                Declare variable for system\n*\n* Which OS are we targetting?\n*\n         GBLC &OS                 Declare compiler switch\n*\n* Are PUTs done in locate or move mode?\n*\n         GBLC &OUTM\n*\n*\n*\n&COMP    SETC 'GCC'               Indicate that this is for GCC\n* &COMP    SETC 'C370'            Indicate that this is for C/370\n&SYS     SETC 'S390'              Define either S370, S380 or S390\n&OUTM    SETC 'M'                 Indicate move mode\n* &OUTM    SETC 'L'               Indicate locate mode\n&OS      SETC 'UNKNOWN'           Indicate that the OS is not known\n* &OS      SETC 'MVS'             Indicate that this is for MVS\n* &OS      SETC 'MUSIC'           Indicate that this is for MUSIC/SP\n*\n* The S/390 model (with code able to reside above the 16 MB line)\n* has no AMODE/RMODE restrictions.\n* Note that this option isn't available under CMS, which\n* requires the executable to be RMODE 24 - even under z/VM.\n*\n         AMODE ANY\n         RMODE ANY\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT853/CBT.V500.FILE853.PDS/PDPMAC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT853/CBT.V500.FILE853.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}