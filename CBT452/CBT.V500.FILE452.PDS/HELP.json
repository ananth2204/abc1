{"INMR01": {"INMLRECL": 80, "INMFNODE": "MARKHAM", "INMFUID": "RSI01DD", "INMTNODE": "N1", "INMTUID": "RSI01DD", "INMFTIME": "20190728020513000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 23440, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "RSI01DD.DDNAME.IN", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RSI01DD.DDNAME.IN": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 23440, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 10017, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "180304", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x02'", "DS1LSTAR": "b'\\x00\\x01\\x13'", "DS1TRBAL": "b'\\x1b~'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x80\\x00\\x04z\\xd0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x80\\x00\\x04z\\xd0\\xd8'", "b'P\\xfb\\x8d\\x80\\x00\\x00\\x00\\xae\\x00\\x00\\x00\\xae\\x00\\x0e\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ADDTO": {"ttr": 274, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x02\\x01\\x17\\t/\\x01\\x17\\t/\\x11\\x13\\x00/\\x00/\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2017-04-02T00:00:00", "modifydate": "2017-04-02T11:13:02", "lines": 47, "newlines": 47, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n     The ADDTO command is used to concatenate datasets to a currently\n     allocated DD.  By default, the NEW datasets will be placed infront\n     of the existing allocations.\n\n     This command is useful if your installation has a \"STOCK\" LOGON\n     procedure and users wish to add there own or group libraries to the\n     current list of libraries.  With the ADDTO command it is not\n     necessary for the user to reallocate the DD specifying ALL the\n     libraries in the LOGON proc.  This also makes it easier for the\n     SYSPROG to ADD, REMOVE or RENAME libraries in the LOGON procedure.\n\n     In case you want to re-allocate the DD back to it's original list\n     of datasets, a variable called &ADDTO is created with the comma\n     separated list of data set names.\n\n     Note: If \"LAST\" is specified the datasets currently allocated to\n           the specified DD are NOT reallocated.  The new datasets are\n           simply added to the end.\n           If an error is encountered please add the \"VERBOSE\" keyword\n           to see if any error message is issued.\n\n)X SYNTAX  -\n     ADDTO ddname (library list)\n                 < FIRST >\n                 < LAST >\n                 < REMOVE >\n                 < VERBOSE >\n\n     REQUIRED  - ddname and library list\n\n     DEFAULTS  - FIRST\n\n     EXAMPLE   - ADDTO SYSPROC (MY.CLIST 'YOUR.CLIST')\n)O OPERANDS\n     ddname       - The DDNAME which you wish to extend.\n     library list - A single dataset name, or a list of names enclosed\n                    within brackets.\n                    If the dataset name is not within quotes, it will\n                    be assume that it is the for the current users's\n                    prefix.\n     FIRST        - Add the specified datasets before the datasets\n                    currently allocated to the DD.\n     LAST         - Add the specified datasets after the datasets\n                    currently allocated to the DD.\n     REMOVE       - Remove the \"library list\" from the concatenation.\n     VERBOSE      - Messages will be issued for each request.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATL": {"ttr": 258, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x082o\\x01\\x082o!\\x10\\x00$\\x00$\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-21T00:00:00", "modifydate": "2008-11-21T21:10:59", "lines": 36, "newlines": 36, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n     This program lists information from the system catalog and\n     the volume's table of contents.\n)X SYNTAX -\n            CATL <LEVEL(LEVEL)>\n                 <DCB        Alias: DSORG RECFM LRECL BLKSIZE EXPDT>\n                 <SPACE      Alias: TRACKS>\n                 <VOLUMES    Alias: UNIT>\n                 <HORIZONTAL Alias: SIDEWAYS>\n                 <NOPREFIX>\n\n   REQUIRED - None\n\n   DEFAULTS - The \"LEVEL\" operand defaults to your TSO profile prefix.\n)O OPERANDS -\n))LEVEL - When this keyword is used, the catalog will be searched for\n          datasets which start with that index level.\n          Example: LEVEL(USERID.CUR) will find all the datasets which\n                   start with 'USERID.CUR.' (note the trailing period).\n                   To get generic prefix information, enclose the LEVEL\n                   operand within quotes (I.E. LEVEL('USERID.CU')).\n\n))DCB   - DCB information (DSORG RECFM LRECL BLKSIZE EXPDT) will be\n          displayed for each dataset.\n\n))SPACE - Allocated and used track information will be displayed for\n          each DASD dataset.\n\n))VOLUME - Volser and device type information will be displayed for\n          each dataset.\n\n))HORIZONTAL - The display will list dataset names across the terminal,\n          rather than vertically.\n\n))NOPREFIX - The specified LEVEL will be removed from the dataset name\n          prior to displaying it on the terminal.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLSET": {"ttr": 266, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\t\\x18\\x7f\\x01\\t\\x18\\x7f\\x103\\x00Q\\x00Q\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-07-06T00:00:00", "modifydate": "2009-07-06T10:33:42", "lines": 81, "newlines": 81, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n     To provide access to various system symbols you can now use the\n     JCL SET statement.\n\n     This facility is provided via an IEFUJV exit routine that\n     substitutes the variable symbols found on JCL SET statements when\n     the job is read into the system.\n     Due to the timing of this substitution, the use of symbols that\n     are specific to a given system need to be used only with jobs that\n     are known to be read into the system where they will execute.\n\n     For example, if you use the &SYSNAME. symbol this will be changed\n     to the name of the system where the job was read.  This MAY not\n     be what you expect at execution time.\n     Also, if you have systems in different time zones, the use of\n     time related symbols may not be what you expect.\n\n     The above caveats are a few of the reasons that IBM has not\n     provided the use of system symbols for batch jobs.\n     So, please be aware of these restrictions and use at your own risk.\n\n)X SYNTAX -\n     // SET YOURSYM=&symbol.\n\n     Supported symbols will be substituted for the &SYMBOL field.\n\n     To abide by IBM symbol rules, please terminate the symbol\n     with a period.  The exit routine will allow a blank to be used\n     as a terminator but this may change in the future.\n\n     Date and time symbols can be altered by using addition and\n     subtraction.  This is done by specifying &SYMBOL+n. and\n     &SYMBOL=n.\n     Example:\n     // SET LASTWEEK=&ZJDATE-7.\n     This will give you the Julian date for 7 days prior to today.\n\n     The general rule for the \"Math\" process is that the number will\n     be in units of the symbol.\n     Date symbols will be adjusted by the number of days.\n     Year symbols will be adjusted by the number of years.\n     Month symbols will be adjusted by the number of months.\n     Hour symbols will be adjusted by the number of hours.\n     Minute symbols will be adjusted by the number of minutes.\n\n)O OPERANDS -\n     The following variables may be used on JCL SET statements.\n        &DDMMYY.\n        &DDMMYYYY.\n        &MMDDYY.\n        &MMDDYYYY.\n        &YYDDD.\n        &YYDDMM.\n        &YYMMDD.\n        &YYYY/DDD.\n        &YYYYDDD.\n        &YYYYDDMM.\n        &YYYYMMDD.\n        &ZDAY.\n        &ZDOW.\n        &ZHH.\n        &ZJDATE.\n        &ZJOBID.\n        &ZJOBNAME.\n        &ZMM.\n        &ZMONTH.\n        &ZMONTHCH.\n        &ZMOY.\n        &ZSMFID.\n        &ZSS.\n        &ZSTDYEAR.\n        &ZTIME.\n        &ZTIMEL.\n        &ZTIMET.\n        &ZWD.\n        &ZWEEKDAY.\n        &ZYEAR.\n\n     As well as the above internally defined symbols, all the symbols\n     displayed via \"D SYMBOLS\" can be used.\n     Most of these can be found in parmlib's IEASYMxx.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LDS": {"ttr": 260, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x082o\\x01\\x082o!\\x10\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-21T00:00:00", "modifydate": "2008-11-21T21:10:59", "lines": 19, "newlines": 19, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n     The LDS command is used list the attributes of a dataset.\n)X SYNTAX  -\n     LDS dsname(s) ALL DCB SPACE MEMBERS FROM(mem1) TO(mem2) VOL(volser)\n\n     REQUIRED  - dsname(s)\n\n     DEFAULTS  - none\n\n     EXAMPLE   - LDS MY.LOAD M FROM(LD) TO(M)\n)O OPERANDS\n     dsname(s) - The dataset name to be displayed.\n     ALL       - Display all information.\n     DCB       - Display DCB information.\n     SPACE     - Display allocation information.\n     FROM      - Display members beginning with this prefix.\n     TO        - Display members up to and including this prefix.\n     VOL       - Display dataset information for the dataset on a\n                 specifiec volume serial.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTAST": {"ttr": 270, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x14\"\\x1f\\x01\\x14\"\\x1f &\\x00\\x19\\x00\\x19\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-08-09T00:00:00", "modifydate": "2014-08-09T20:26:06", "lines": 25, "newlines": 25, "modlines": 0, "user": "HELP"}, "text": ")F Function -\n   The LISTAST command is used to display the information for currently\n   allocated files.\n)X Syntax -\n   LISTAST DDNAME \"NOMSGS\"\n\n   Required - None\n   Default  - None\n   Note:    - If a DDNAME is specified only the allocations for that\n              DD statement are displayed.\n            - If a DDNAME is not specified all allocations will be\n              displayed.\n)O Operands -\n   DDNAME    - The name of a currently allocated DD statement.\n             - The DDNAME may end with an asterisk to indicate a\n               generic DDNAME (ie. LISTAST SYS*).\n   NOMSGS    - If \"NOMSGS\" is specified a DDNAME must also be specified.\n               \"NOMSGS\" is useful for tesing if a DD statement is\n               allocated.  If it is not, LISTAST will terminate with a\n               return code of 8.\n               CLIST Example:\n                   PROC 0\n                   LISTAST DDNAMEX NOMSGS\n                   WRITE LISTAST TERMINATED RETURN CODE: &LASTCC\n                   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LWATMGR": {"ttr": 264, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x082o\\x01\\x082o!\\x10\\x00?\\x00?\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-21T00:00:00", "modifydate": "2008-11-21T21:10:59", "lines": 63, "newlines": 63, "modlines": 0, "user": "HELP"}, "text": ")F Purpose -\n     This program allows you to display and update the authorized\n     command tables that have been loaded into your address space.\n)X Syntax -\n         LWATMGR ADD      {table-name}   NAME(name)\n         LWATMGR BUILD    {table-name}   LIST(dsname\u00dd(member)\u00a8)\n         LWATMGR DELETE   {table-name}   NAME(name)\n         LWATMGR DISPLAY  {table-name}\n         LWATMGR RELOAD   {table-name}   LOADLIB(dsname)\n         LWATMGR REPLACE  {table-name}   NAME(old)  NEWNAME(new)\n         LWATMGR UPDATE   {table-name}   PARMLIB(dsname(member))\n\n   The table names are:    AUTHTSF\n                           AUTHCMD\n                           AUTHPGM\n                           NOTBKGND\n                Or \"ALL\" to process all of the above.\n)O Functions -\n))ADD   - This will add a new command or program name into the\n          specific table.\n\n   Example: AUTHTSF ADD AUTHPGM NAME(mypgmnm)\n\n))BUILD - This will re-create multiple tables at one time by\n          reading the 1st 8 bytes from the LIST data set.  The\n          LIST data set entries must follow specific identifier\n          records. \"---AP---\" for the AUTHTSF table, \"---E2---\"\n          for the AUTHCMD table, \"---E8---\" for the AUTHPGM table\n          and '---NS---' for the NOTBKGND table.  If a list\n          section within this input file contains no entries the\n          table will not be updated.\n          As the LIST data set only uses the 1st 8 bytes of each\n          record, the LRECL may be as little as 8.  This allows\n          for a lot of tables in a very small amount of space.\n\n   Example: AUTHTSF BUILD LIST(fb8.pds(list01))\n\n))DELETE - This will remove an existing command or program name from\n          the specific table.\n\n   Example: AUTHTSF DELETE AUTHPGM NAME(mypgmnm)\n\n))DISPLAY - This will display information about the various\n            authorization tables and their contents.\n            This function allows you to specify a table of \"ALL\" or\n            specify no table name at all which will default to \"ALL\".\n\n   Example: AUTHTSF DISPLAY AUTHCMD\n\n))RELOAD - This allows you to load loadmodule versions of the various\n           tables.  The input LOADMODULE library must have the tables\n           linked as alias names to IKJTABLS.\n\n   Example: AUTHTSF RELOAD LOAD(test.loadlib)\n\n))REPLACE - This allows you to replace an entry in a specific table.\n\n   Example: AUTHTSF REPLACE AUTHPGM NAME(iebcopy) NEWNAME(XYZcopy)\n\n))UPDATE - This allows you to update tables based on input with\n           synatax identical to the IKJTSOxx parmlib member.\n\n   Example: AUTHTSF UPDATE ALL PARMLIB('SYS1.PARMLIB(IKJTSO99)')\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STEPLIB": {"ttr": 272, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x10\\x01\\x17\\x08\\x8f\\x01\\x17\\x08\\x8f\\x15#\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2017-03-29T00:00:00", "modifydate": "2017-03-29T15:23:10", "lines": 127, "newlines": 127, "modlines": 0, "user": "HELP"}, "text": "/* *----------------------------------------------------------------* */\n/* *                                                                * */\n/* * To install this command, it must be placed into the LINKLIST   * */\n/* * followed by execution of a \"F LLA,REFRESH\" operator command.   * */\n/* *                                                                * */\n/* * Also, your SYS1.PARMLIB(IKJTSOxx) member must be updated so    * */\n/* * that \"STEPLIB\" is in the AUTHCMD NAMES list.                   * */\n/* * After this member has been updated, a \"PARMLIB UPDATE(xx)\" TSO * */\n/* * command must be issued to reflect the parmlib change.          * */\n/* *                                                                * */\n/* * Note: If a \"REAL\" STEPLIB DD JCL statement exists within your  * */\n/* *       LOGON procedure it will not be freed, but it will no     * */\n/* *       longer be used.                                          * */\n/* *                                                                * */\n/* * *************************************                          * */\n/* * *** Special note for BATCH users: ***                          * */\n/* * *************************************                          * */\n/* *       If you use STEPLIB in a BATCH job, please ensure that    * */\n/* *       you issue \"STEPLIB REMOVE\" prior to terminating the      * */\n/* *       step.  Otherwise a small amount of LSQA storage will     * */\n/* *       be orphaned under the INIT's TCB.  This could eventually * */\n/* *       cause storage fragmentation problems.  A $PI operator    * */\n/* *       command will resolve this problem but it would be best   * */\n/* *       to prevent it in the first place.                        * */\n/* *                                                                * */\n/* * If this becomes a MAJOR issue for someone please let me know   * */\n/* * and I will write an IEFACTRT exit routine that will recognize  * */\n/* * that the STEPLIB command has been used and free the TCB        * */\n/* * storage at that time.                                          * */\n/* * As STEPLIB was not written with the intent of being used by    * */\n/* * batch jobs this was not an issue.  It appears that quite a few * */\n/* * sites use the same CLISTs/REXX execs in batch as they do in    * */\n/* * TSO.  When TSO terminates the entire address space is cleaned  * */\n/* * up so this is not an issue.                                    * */\n/* *                                                                * */\n/* *----------------------------------------------------------------* */\n)F FUNCTION -\n     Dynamically manage the STEPLIB.\n\n     Your STEPLIB can be changed at any time, whether you are in ISPF\n     or not.  This command handles all situations.\n\n)X SYNTAX -\n     STEPLIB ADD      DATASETS(DSNAME LIST) FIRST|LAST\n     STEPLIB ALLOCATE DATASETS(DSNAME LIST)\n     STEPLIB DESTACK  DATASETS(DSNAME LIST)\n     STEPLIB FREE\n     STEPLIB LIST\n     STEPLIB REMOVE   DATASETS(DSNAME LIST)\n     STEPLIB SAVE\n     STEPLIB STACK    DATASETS(DSNAME LIST)\n     STEPLIB VERSION\n     STEPLIB ...      APFCHK NOMSGS|MSGS\n\nREQUIRED - <function>\nDEFAULTS - ALLOCATE FIRST MSGS\nALIAS    - ALLOCATE / OVERRIDE or REPLACE\n         - DESTACK  / UNSTACK\n         - FREE     / CLOSE\n         - REMOVE   / DELETE\n         - DATASETS / DSNAMES\n         - FIRST    / BEFORE or FRONT\n         - LAST     / AFTER or END\n         - MSGS     / LOUD or VERBOSE\n         - NOMSGS   / QUIET or TERSE\n\nNOTE: The \"SHR\" and \"REUSE\" keywords have been added so that this\n      command looks like an ALLOCATE command, although these keywords\n      are not used.\n      I.E. (STEPLIB DA(MY.LOAD) SHR REUSE)\n\nEXAMPLE:\n     STEPLIB DA(MY.LOAD 'XYZ.YOUR.LOAD')\n\nReturn Codes:\n     If the PARSE process fails this will be the IKJPARS return code.\n\n      4 - Specified data set is already in STEPLIB.\n      8 - Data set allocation failed.\n     12 - APF check failed.\n     20 - STEPLIB OPEN failed.\n     24 - STEPLIB data set OPEN failed.\n\n)O OPERANDS -\n     ADD      - Add a library(s) to the current STEPLIB concatenation.\n                If the library already exists within the STEPLIB, the\n                command will terminate with a return code of 4.\n\n     ALLOCATE - Build a new STEPLIB allocation list.\n\n     DESTACK  - Eliminate a single occurance of the library(s) from\n                the STEPLIB concatenation.\n\n     FREE     - Remove any existing STEPLIB.\n\n     LIST     - Display the current STEPLIB DDNAME & data set names.\n\n     REMOVE   - Eliminate library(s) from the current STEPLIB.\n\n     SAVE     - Create a CLIST variable (&STEPLIB) that contains a\n                list of the current STEPLIB data set names.\n\n     STACK    - Add a new instance of the library(s) to the current\n                STEPLIB concatenation even if it is already part of the\n                current STEPLIB.  This will allow DESTACK to remove a\n                single instance without affecting other applications.\n\n     VERSION  - Display the Version and Release of the code as well as\n                the assembly date.\n\n     FIRST/LAST - Indicate where the new library(s) are to be added to\n                the STEPLIB concatenation.\n                The default is to add the new data sets to the beginning\n                of the concatenation.\n\n     PAUSE(nnn) - This option is for BATCH processing.  It provides a\n                wait time (in seconds) so that the system can perform\n                cleanup processing before the step terminates.\n                The default is to wait 1 second but this allows the\n                user to extend the time if needed.\n\n     APFCHK   - After performing the specified function, all libraries\n                in the STEPLIB concatenation are checked to see if they\n                are APF authorized.\n\n     NOMSGS   - Do not issue any messages during STEPLIB allocation,\n                deallocation or APF checking.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USERINFO": {"ttr": 268, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x03\\x01\\x12!O\\x01\\x12!O\\x13D\\x00;\\x00;\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-08-01T00:00:00", "modifydate": "2012-08-01T13:44:03", "lines": 59, "newlines": 59, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n   The USERINFO command allows a user to obtain USER and SYSTEM\n   related information, to be used within a CLIST or REX EXEC.\n)X SYNTAX -\n    USERINFO ACCT  CPID  DSSL  FMID  IODF IPLD  IPLT  IPLU  IPLV\n             JOB#  JOBN  MCAT  MODE  MODL PGMR  REGN  REL#  RGRP\n             RUSR  SCPN  SMFI  SNAM  SSNM TERM  TMID  USER  VERS\n             WDAY  SETV\n\n   REQUIRED - NONE\n   DEFAULT  - SETV\n\n   All information is returned via &SYSxxxx variables, where xxxx is\n   the above options.  If a keyword, other than \"SETV\", is specified on\n   the USERINFO command, command, that value is also returned in the\n   &SYSSCMD symbolic variable.\n\n   The symbols defined in IEASYMnn are also created with matching names.\n\n   *----------------------------------------------------------------*\n   *   Note: If the returned data is longer than 8 characters in    *\n   *         length then &SYSSCMD will only contain the 1st 8       *\n   *         characters.                                            *\n   *         Also, the &SYSSCMD variable will not be updated for    *\n   *         system symbols that are defined in IEASYMnn.           *\n   *----------------------------------------------------------------*\n\n)O OPERANDS -\n))ACCT      - Returns the user's JOBCARD accounting information.\n))CPID      - Returns the current CPU serial number.\n))DSSL      - Returns the DF/DSS release/version level.\n))FMID      - Returns the SCP FMID value.\n))IODF      - Returns the I/O Configuration ID suffix.\n))IPLD      - Returns the last IPL date in the format of MM/DD/CCYY.\n))IPLT      - Returns the last IPL time in the format of HH:MM:SS.HT.\n))IPLU      - Returns the current SYSRES unit address.\n))IPLV      - Returns the current SYSRES volume serial.\n))JOB#      - Returns the current jobid (ie. TSU 01234)\n))JOBN      - Returns the current jobname.\n))MCAT      - Returns the Master Catalog Name.\n))MODE      - Returns the current SYSTEM EXECUTION MODE (OS/390 R3).\n))MODL      - Returns the current CPU model number.\n))PGMR      - Returns the current JOBCARD programmer name.\n))REGN      - Returns the current requested region size.\n))REL#      - Returns the current SCP release/level number (ie. 03.8)\n))RGRP      - Returns the current user's RACF group name\n))RUSR      - Returns the current user's RACF user id\n))SCPN      - Returns the current SCP release/level number (ie. SP6.0.6)\n))SMFI      - Returns the current system's SMF identifier.\n))SNAM      - Returns the current system's IPL SNAME= value.\n))SSNM      - Returns the current subsystem name (ie. JES2).\n))TERM      - Returns the current terminal type (ie. 3270)\n))TMID      - Returns the current terminal id.\n))USER      - Returns the userid or jobname (if running in batch).\n))VERS      - Returns the USER SCP version identifier (CVTVERID).\n))WDAY      - Returns the day of the week (ie. FRIDAY).\n\n))SETV      - Creates a symbolic variable for all the parameters\n              processed by userinfo, without altering &SYSSCMD.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHOSGOT": {"ttr": 262, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x082o\\x01\\x082o!\\x10\\x00\\x11\\x00\\x11\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-21T00:00:00", "modifydate": "2008-11-21T21:10:59", "lines": 17, "newlines": 17, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n     The WHOSGOT command is used to determine who is currently allocated\n     to a specific dataset.\n)X SYNTAX  -\n     WHOSGOT (dataset list)\n\n     REQUIRED  - dataset list\n\n     DEFAULTS  - none\n\n     EXAMPLE   - WHOSGOT (MY.CLIST 'YOUR.CLIST')\n)O OPERANDS\n     dataset list - A single dataset name, or a list of names enclosed\n                    within brackets.\n                    If the dataset name is not within quotes, it will\n                    be assume that it is the for the current users's\n                    prefix.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT452/CBT.V500.FILE452.PDS/HELP.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT452/CBT.V500.FILE452.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}