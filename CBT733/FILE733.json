{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012702000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2351440, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE733.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2351440, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2351440, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE733.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00%\\x08'", "DS1TRBAL": "b'bj'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x02\\x00\\x05\\x05\\x04\\x00\\x0c\\x00&'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x056O\\x01\\x056O\\x114\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T11:34:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-471"}, "text": "REGULAR CBT TAPE - VERSION 471    FILE:  733\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT471.FILE733\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 30 MEMBERS COUNTED; CUMULATIVE SIZE IS 21,723 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/30/05    11:34:29    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INSTALL": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x056O\\x01\\x056O\\x10F\\x03\\x8b\\x03\\x8b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:46:35", "lines": 907, "newlines": 907, "modlines": 0, "user": "SBGOLOB"}, "text": "Installing ALGOL68C on an IBM System/360 or /370 - This is tape file 04\n------------------------------------------------\n\n\n            Contents\n\n            1.  General\n\n            2.  Portability\n\n            3.  Maintenance\n\n            4.  Documentation\n\n            5.  Tape Format\n\n            6.  Character Codes\n\n            7.  Installation\n\n            8.  Catalogued Procedures\n\n            9.  Testing the System\n\n           10.  Writing ALGOL68C Programs\n\n           11.  Separate Compilation\n\n           12.  Overlays\n\n           13.  Example Program\n\n           14.  Error Messages\n\n  (These installation instructions are only valid for compiler version\n   247, translator version 119, ALGOL 68 library version 107 and 370\n   assembler library version 127.)\n\n\n1. General\n----------\n\n    ALGOL68C has been developed for the 360/370 range of computers with\nthe universal instruction set running OS/MVT Release 21.  It has also\nbeen successfully installed on systems running OS/MFT, OS/VS1, and\nOS/VS2 (SVS).  It is also believed to run under OS/MVS.\n\n    No 370-only instructions are used except for STCK (store clock)\nwhich is only executed if the CVT indicates that the time of day clock\nis supported.  The boundary alignment feature is not needed.\n\n    The currently distributed versions of ALGOL68C are known as\n\"Prerelease\" as the system does not implement the full ALGOL68C\nlanguage.  The currently unimplemented features are described in a\nseparate document. The current state of ALGOL68C precludes its use by\nother than the dedicated user.  The full implementation is expected to\nbe available in the late summer of 1976.\n\n    The distribution package consists of a magnetic tape, the printer\noutput of the job that wrote the tape, and printouts of various\ndocuments (including this document).  Note that, as the tapes are\nprepared in batches, and the source copies of the documents are\nupdated from time to time, the printed copies may differ from the\ncorresponding copies of those documents on the tape.  In case of\ndiscrepancy, the printed version is likely to be the most correct.\n\n\n2. Portability\n--------------\n\n    The ALGOL68C system is designed so that implementing it on a new\nmachine range is straightforward.  The compiler produces code in an\nintermediate language, ZCODE.  ZCODE is a simple assembly language for a\nmachine with conventional arithmetic and index registers and a\nconventional storage addressing scheme.\n\n    The compiler reads a simple description of the target machine (e.g.\nthe number and type of registers, the size of INTs, etc.) so that the\nZCODE produced is tailored for the target machine.\n\n    An implementor of ALGOL68C on a new machine range must write a\ntranslator (or an interpreter) for ZCODE, and also must write a run time\nsystem.  Three to nine man-months are usually needed.\n\n    (It should take only a few hours to install the ALGOL68C system on a\n/360 or a /370 from the distribution tape.)\n\n\n3. Maintenance\n--------------\n\n    ALGOL68C is maintained as indicated in the Conditions of\nDistribution by the University of Cambridge Computing Service.\n\n    We would be grateful to be notified of any bugs, infelicities, or\nother helpful suggestions.  Please send all material (e.g. program\nsources, compiler output - messages and ZCODE, dumps, JCL, and the\nversion numbers of the system being used) to\n\n               ALGOL68C Maintenance,\n               Computing Service,\n               Computer Laboratory,\n               University of Cambridge,\n               Corn Exchange Street,\n               CAMBRIDGE, CB2 3QG,\n               England.\n\n    Existing installations will be notified of major new releases of the\nsystem. A standard charge is made for each copy of the system sent out\n(this charge is currently not greater than 15 pounds Sterling and\ndepends on the postal rate).  Please do not send money with the order\nfor the system: an invoice will be sent when the system is dispached.\n\n    Requests for the system should be sent to\n\n                ALGOL68C Distribution,\n                Computing Service,\n                Computer Laboratory,\n                University of Cambridge,\n                Corn Exchange Street,\n                CAMBRIDGE, CB2 3QG,\n                England.\n\n\n\n4. Documentation\n----------------\n\n    The ALGOL68C language is described by \"The ALGOL68C Reference\nManual\" by S.R. Bourne, A.D. Birrell, and I. Walker.  The manual is\ncopyright; it may be obtained from\n\n                 The Computing Service Bookshop,\n                 Computer Laboratory,\n                 University of Cambridge,\n                 Corn Exchange Street,\n                 CAMBRIDGE, CB2 3QG,\n                 England.\n\nand costs 2 pounds (Sterling).  Bulk orders can be considered.  Section\n8.2 (on transput) is not yet complete but it will be forwarded to\npurchasers of the manual when it is available.\n\n    An introduction to ALGOL68C is being prepared.\n\n    A Users' Guide to running ALGOL68C programs on the Cambridge 370/165\nis in preparation.  It is suitable for modification by other\ninstallations for describing what JCL to use, etc.\n\n    This document is known as the 360/370 installation guide, and may be\ncopied from the distribution tape.\n\n    An Implementors' Guide describing how to implement ALGOL68C on a new\nmachine range is in preparation.  Two documents describing ZCODE are\navailable from the distribution address given in 3 above - one of these\ndescribes ZCODE as it is currently (\"old ZCODE\"), the other gives a very\nbrief description of the proposed new ZCODE.\n\n    The following documents are included on the distribution tape and\nare also supplied as printouts with the tape:\n\n    Character set,\n    Differences from ALGOL 68,\n    Features currently unimplemented,\n    Bugs known and bugs mended,\n    Changes from previous releases.\n\n    It is regretted that no estimates can be given for the availability\nof any of the above documentation that is in preparation.\n\n\n5. Tape Format\n--------------\n\n    The following tape recording parameters are possible:\n\n 9 track, 800 bpi NRZI or 1600 bpi PE, unlabelled or IBM standard\n labels;\n\n 7 track, 556 bpi NRZI or 800 bpi NRZI, odd parity, \"data convert\",\n unlabelled or IBM standard labels.  (Data convert causes three (8 bit)\n bytes to be written as four 6 bit characters on the tape.  If the\n number of bytes written is not a multiple of three, the record is\n padded with zeros to fill the last 6 bit character; note that it is not\n padded to a multiple of three bytes.)\n\n    Files are recorded on the tape in fixed length blocked records with\na logical record length of 80.  The blocksize (physical record length)\nmay be specified by the recipient and it must be a multiple of 80 and\nnot greater than 16320.  Carriage controls are not used.\n\n    The standard recording parameters for System/360 are:\n\n        9 track, 800 bpi NRZI,\n        3200 bytes maximum block size,\n        no labels.\n\n    The standard recording parameters for System/370 are:\n\n        9 track, 1600 bpi PE,\n        3200 bytes maximum block size,\n        no labels.\n\n    Please note that it is particularly inconvenient to write the\nALGOL68C tapes with standard labels so they should only be requested if\nabsolutely necessary.\n\n        Files on the tape are in one of three forms:\n\n    a) simple - the file consists of only one subfile.  One record of\n       the subfile occupies precisely one record of the file.  The file\n       may be copied by using a standard IBM utility (e.g. IEBGENER).\n\n    b) UPDTE format - there are a number of subfiles in the file.\n       One record of a subfile occupies precisely one record of the\n       file.  Documents are preceded by a record starting ./ this\n       being a control record for the IBM IEBUPDTE utility program.\n       IEBUPDTE may be used directly to make a partitioned dataset\n       from this file.  Sample JCL for doing this is included on the\n       tape.\n\n    c) packed format - there are normally a number of subfiles to\n       such a file.  The records of the file and the records of the\n       subfiles do not correspond.  A subfile starts with hexadecimal\n       01.  A string enclosed in double quotes follows, this string is\n       the subfile identification, and, for OS/360, is a ddname followed\n       by a parenthethised member name.  The string is followed by\n       hexadecimal 02 and this is followed by the text of the subfile.\n       The subfile is terminated by hexadecimal 03.  Records of the\n       subfile are separated by the character represented by hexadecimal\n       1E.\n\n       The object modules for the program to unpack (and pack) these\n       files are included on the tape. The subfile idf strings for\n       material on tapes distributed by Cambridge are of the form\n       \"UNPACKED(membername)\", and the membername will vary.\n\n       The record lengths in the subfiles do not exceed 136.\n\n    The precise layout of the tape is described by comments at the start\nof the job that wrote the tape.  That job is file 3 on the tape and a\nprintout accompanies the distribution tape.\n\n\n6. Character codes\n------------------\n\n    Characters on the tape are in a extension of the EBCDIC code\ndiffering from that described in the IBM manual \"System/370 Principles\nof Operation\" (GA22-7000-3) in that\n\n     \"\u00e2\" (opening square bracket) is represented by hexadecimal 42,\n     \"\u00e4\" (closing square bracket) is represented by hexadecimal 43,\n     \"\u00c4\" (logical or) is represented by hexadecimal 63,\n     \"\u00c0\" (logical and) is represented by hexadecimal 64,\n     \"\u00c1\" (uparrow) is represented by hexadecimal 65,\n     \"\u00c3\" (backarrow) is represented by hexadecimal 66.\n\n(The compiler also accepts the following EBCDIC codes:\n\n    \"\u00e2\" (opening square bracket) hexadecimal AD,\n    \"\u00e4\" (closing square bracket) hexadecimal BD.)\n\n    The characters \"\u00c4\", \"\u00c0\", \"\u00c1\", and \"\u00c3\" are available for use as\noperators.  None of these characters need to be represented at an\ninstallation.\n\n    Similarly, square brackets need not be represented at an\ninstallation as round brackets are equally acceptable in every syntactic\nposition except in row declarations.  If round brackets are to be used\ninstead of square brackets, a row declaration should be preceded by the\nrow-symbol, e.g. instead of \"\u00e2\u00e4AMODE a\" use \"ROW()AMODE a\".\n\n    However, if square brackets are not available, care must be taken\nwhen transcribing material from the tape as square brackets are used as\nthe standard sub- and bus-symbols.\n\n    The first file on the tape gives details of the character set, and a\nprintout of this file is supplied with the distribution tape.\n\n\n7. Installing the ALGOL68C system from tape\n-------------------------------------------\n\n7.1 Installation\n\n    File 5 on the tape is a job to install the ALGOL68C system from the\ntape.  The following job should be run to copy files 5 and 6 to disc:\n\n    //ALGOL68 JOB (,),'JOB CARD TO SUIT INSTALLATION'\n    //*\n    //* COPY FB80 DATA SET\n    //*\n    //F PROC N=,                  DATA SET NAME\n    //       L=,                  TAPE FILE NUMBER\n    //       SER=<TAPE>,UNIT=TAPE<TRKS>, TAPE SERIAL AND UNIT NAME\n    //       DEN=<DEN>,LAB=<LAB>, TAPE DENSITY AND LABEL TYPE\n    //       BLKSIZE=<BLK>,       TAPE BLOCKSIZE\n    //       TRAN='<TRAN>'        7TRACK RECORDING TECHNIQUE\n    // EXEC PGM=IEBGENER,REGION=80K\n    //SYSPRINT DD SYSOUT=A\n    //SYSIN DD DUMMY\n    //SYSUT1 DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n    //          LABEL=(&L,&LAB),DISP=OLD,DSN=A68C&L,\n    //          DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN&TRAN)\n    //SYSUT2 DD UNIT=SYSDA,\n    //          DISP=(,KEEP),DSN=&N,\n    //          SPACE=(TRK,(1,1)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n    // PEND\n    //*\n    // EXEC F,L=5,N='AL68.D.JOB'\n    // EXEC F,L=6,N='AL68.D.JOB1'\n\nThe disposition of SYSUT2 may need to be changed from KEEP to CATLG if\nthis is a requirement in the receiving installation.  Almost certainly,\nthe data set names 'AL68.D. ... ' will need changing to suit the\ninstallation's requirements.  The DCB characteristics may need changing\nfor discs other than 3330s.\n\n    The job from file 5 (copied to AL68.D.JOB) contains comments\ndescribing in detail how to install the system; this description is\nreproduced here:\n\n//*\n//* 1. Make the job card suitable for your installation.\n//*\n//* 2.1 This job constructs the ALGOL68C system on the following data\n//*     sets:\n//*                A68LIB.OBJ   object module data set\n//*                A68LIB.MOD   load module data set\n//*                A68LIB.SYS   initialisation and library environments\n//*                A68LIB.PROCS catalogued procedures\n//*                A68LIB.TESTS tests\n//*\n//*     The blocksizes for these data sets are optimised for 3330 discs\n//*     and should be changed if other discs are used.  Similarly,\n//*     the space allocations will need changing for other discs.\n//*     These changes should be made in the first step, \"X\", of the\n//*     job.\n//*\n//* 2.2 If you wish to change the names of these data sets, change only\n//*     the dsnames in the first step, \"X\".  The other steps obtain\n//*     the dsnames by using JCL refer-back, e.g. DSNAME=*.X.OBJ .\n//*     The data sets are allocated as (NEW,PASS) in the first step\n//*     and are kept in the last step, \"KEEP\", only if the return codes\n//*     from the previously executed steps are 4 or less.  Thus, if\n//*     the job fails for some reason, correct the reason for the\n//*     failure, and run the complete job again.\n//*\n//* 2.3 If you wish to have the data sets catalogued, change the DISP\n//*     in the last step from (OLD,KEEP) to (OLD,CATLG).\n//*\n//* 2.4 If you already have an ALGOL68C system with data sets of\n//*     the same names as those used in the job, you should either\n//*     make a new system with different data set names (2.2 above)\n//*     or change the data set names in the first step to be\n//*     the temporary data set names\n//*\n//*                 &&OBJ\n//*                 &&MOD\n//*                 &&SYS\n//*                 &&PROCS\n//*                 &&TESTS\n//*\n//*     and remove the CONDX parameter from the penultimate step,\n//*     \"COPY\".  This will cause the system to be constructed on the\n//*     temporary data sets, then to be copied (with the replace\n//*     option) to the existing data sets. Because the replace option\n//*     is used, the default names, e.g. A68C, Z370, will be replaced\n//*     by aliases describing the new system. Execution of the COPY\n//*     step will cause the last step, \"KEEP\", to be omitted, and so\n//*     the temporary data sets will be correctly deleted at the end of\n//*     the job.\n//*\n//*     N.B. Ensure that the existing data sets have sufficient space\n//*     and directory blocks to receive the new members.  See the first\n//*     step, \"X\", for estimates of requirements.  Note also that all\n//*     the data sets must exist before the job is run.\n//*\n//* 3.  The data set \"S.FORTLIB\" (see the JCL procedures) is not\n//*     distributed as it contains the proprietry FORTRAN routines used\n//*     for sin, cos, tan, arcsin, arccos, arctan, exp, sqrt.  It is up\n//*     to the installation to arrange linkage to a suitable set of\n//*     routines.\n//*\n//*     ALGOL68C versions of these routines are being developed and\n//*     will be distributed with future releases of the system.\n//*\n//* 4.  Stropping:  The standard job constructs an ALGOL68C system\n//*     that supports \"case stropping\" (that is, tags are written\n//*     with lower case letters and digits, and indicants are written\n//*     with upper case letters).  The alternative, \"prefix-quote\n//*     stropping\", has tags written with upper or lower case letters\n//*     or digits and indicants must be immediately preceded by a\n//*     single quote (apostrophe) and are written in upper case\n//*     letters.  TO construct a system for prefix-quote stropping,\n//*     change the default value for the \"Q\" symbolic parameter in\n//*     the \"P\" procedure (unpack to pds) from null to Q (i.e. instead\n//*     of \"Q=,\", use \"Q=Q,\") and in the step LKA68C to link-edit the\n//*     compiler, change \"INCLUDE(EBCDIC)\" to \"INCLUDE(QEBCDIC)\".\n\n7.2 Other files\n\n    The job from file 6 (copied to AL68.D.JOB1) may be edited to extract\nother material from the tape as required.\n\n\n8. Catalogued Procedures\n------------------------\n\n    The job to construct the ALGOL68C system will have built the data\nset A68LIB.PROCS.  This contains JCL procedures suitable for\nSYS1.PROCLIB (or whatever happens to be the installation's catalogued\nprocedure data set).  Of course, the procedures may also be used 'in\nstream' if a // PEND card is added to the end of each procedure.\n\n     The JCL procedures supplied with the library are those used on the\n370/165 at Cambridge, and may need to be changed for other\ninstallations. Each procedure contains one or more steps, of which there\nare four types, i.e. compile, translate, link edit and go. There is\nnever any need for users to separate the compile and translate steps.\n\n    Because of the difficulties involved in overriding JCL cards, a\nlarge number of symbolic parameters are used in the procedures so that\noverriding JCL cards should not normally be necessary.\n\n\n\n8.1 Compile step:\n\n    The symbolic parameter &SYSLIB, defaulting to A68LIB.MOD, specifies\nthe load module library to be used for loading modules for execution.\n\n    The dataset refered to by DDname INIT is defined as a PDS member\nwith name given by &IDSN(INIT&SYSI), which defaults to A68LIB.SYS(INIT).\nThis dataset contains definitions of the target machine, the default\nenvironment, and the strops of reserved words in ALGOL68C source\nprograms. The name of this dataset will normally not be changed by\nusers, but its default value can be changed if a new version of the\ndataset is to be used.\n\n    The dataset referred to by DDname SYSENV contains details of the\nlibrary environments. It is a PDS with default name A68LIB.SYS. Again,\nthis will not usually need to be changed by users.\n\n    Additional environments can be supplied by the user including DD\ncards in the JCL, e.g.\n\n          //A68.MYENV DD DSN=MYFILE.ENVIRON,DISP=SHR\n\nwould be picked up by an ALGOL68C using-directive such as\n\n          USING FRED FROM \"MYENV\"\n\nAn environment dataset defined in this way can be a PDS containing one\nenvironment in each member. The using-directive would then take the form\n\n          USING FRED FROM \"MYENV(membername)\"\n\n    The dataset referred to by DDNAME XREF receives cross reference\ninformation if the CROSSREF keyword has been included in the PARM field\nof the EXEC statement. This information can be processed by a seperate\nprogram (see 8.5 below) to produce an identifier cross reference\nlisting.\n\n    The dataset referred to by DDname CODE receives the ZCODE output\nfrom the compiler. The block size of 2498 is a suitable value for 3330s\nbut should be changed for other devices.\n\n    The dataset referred to by DDname ENVOUT receives the environment\ndata from 'handles' defined in the source program. It must be defined in\nthe JCL as a physical sequential dataset, and, for programs without any\nhandle in their source text, will most usefully be DSN=NULLFILE (i.e. DD\nDUMMY) or otherwise a member of a PDS. Note that its disposition is OLD.\n\n    The source program is read from the dataset defined by the SYSIN DD\ncard and compiling information and diagnostics is written to the dataset\ndefined by the SYSPRINT DD card.\n\n\n8.2 Translate step:\n\n    The STEPLIB DD card is as for the compile step.\n\n    The dataset referred to by the SYSIN DD card contains the ZCODE\noutput from the compile step. In the procedures, this is always the\ntemporary file &ZCODE.\n\n    The object module is written to the dataset defined by the SYSGO DD\ncard which must have DCB parameters acceptable to the linkage editor.\n\n    Translation information and diagnostics are written to the dataset\ndefined by the SYSPRINT DD card.\n\n\n8.3 Link edit step:\n\n    The dataset referred to by DDname SYSLIB defines a set of libraries\ncontaining modules which may be called by the ALGOL68C program,\nincluding the ALGOL68C runtime system.  The first library is defined by\nthe symbolic parameter &SYSLIB which also defines the STEPLIB of the\ncompile and translate steps, and is described above. The second library\nis S.FORTLIB, which contains modules for computing sine, cosine,\nexponential, etc. It is suggested that IBM FORTRAN double precision\nroutines are used with an interface module, a suitable example of which\nis to be found on the ALGOL68C distribution tape. Eventually suitable\nroutines will be provided as part of the ALGOL68C system.\n\n    If the module being linked had a named parent module, then that\nmodule will be included from the user's own library, which must be\nconcatenated to the system libraries.\n\n    SYSLMOD, SYSPRINT and SYSUT1 are the same as for any run of the\nlinkage editor, so should require no explanation.\n\n    The output from the translation step is contained in the dataset\nreferred to by the SYSLIN DD card. If a SYSIN DD card is supplied by the\nuser then the dataset it refers to will be concatenated to that referred\nto by the SYSLIN DD card. This can be used to provide linkage editor\ncontrol cards and thus pick up routines from specified libraries rather\nthan the defaults.\n\n\n8.4 Go step:\n\n    This is very simple. The only DD card supplied in the procedure is\nSYSPRINT, to which run-time error messages are written; other datasets\nmay be supplied from the calling job stream.\n\n\n8.5 Cross reference program:\n\n    The information written by the compiler to the dataset referred to\nby the DDNAME XREF can be processed to produce an identifier cross\nreference listing. The JCL procedure A68XREF is provided to run this\nprogram. Its parameters are similar to those of the compiler procedures.\nThe cross reference information from the compiler must be supplied on\nDDNAME FROM. The formatted listing is written to the dataset referred to\nby the DDNAME TO, and any diagnostics are sent to the dataset referred\nto by DDNAME SYSPRINT. For a normal run, no parameters or overriding DD\ncards need be specified.\n\n\n9. Testing the system\n---------------------\n\n    The data set A68LIB.TESTS contains a number of tests.  The members\nJOB1, JOB2, JOB3, JOB4 are jobs to run the tests.  The job cards of\nthese jobs will need modifying to suit the installation.  On a 370/165,\na cpu time of 75 seconds is sufficient to run each of the jobs.  The\nresults of the jobs may be compared with members RESULTS1, RESULTS2,\nRESULTS3, RESULTS4.\n\n\n10. Writing ALGOL68C programs\n-----------------------------\n\n    This will be covered more fully by the Users' Guide (in\npreparation).\n\n    Programs may be written using either 'case stropping' or\n'prefix-quote stropping' depending on how the system has been\nconstructed (7 above).\n\n    With case stropping, indicants and reserved words are written in\nupper case, and tags are written in lower case, e.g. BEGIN MODE FRED =\nSTRUCT(INT a); REAL b.\n\n    With prefix quote stropping, indicants and reserved words are\nwritten in upper case and are preceded by a single quote, tags are\nwritten in either case. For example 'BEGIN 'MODE 'FRED =\n'STRUCT('INT A); 'REAL B.\n\n    Note that if prefix quote stropping is used, the case of a letter is\nsignificant (but this is likely to change to provide compatibility with\ndot stropping).\n\n    In both cases, only letters are allowed in indicants.\n\n    It is intended that prefix-quote stropping should be superceded by\n(prefix) point stropping (which is identical to prefix-quote stropping\nexcept that a point is used instead of a single quote). For example,\n.BEGIN .MODE .FRED = .STRUCT(.INT A); .REAL B .  This stropping is the\nstandard accepted by IFIP WG 2.1.  With point stropping, the case of a\nletter is not significant.\n\n    The compiler reads a program heading from the parameter channel. The\nprogram heading on the parameter channel must be preceded by a single\n\"/\" which is used to separate run time options from parameter channel\ninput.  For example\n\n    // EXEC A68CLG,PARMC='/XREF USING USER FROM \"SYSENV(REAL)\"'\n\n(No run-time options are implemented yet.)\n\n    The program heading may also precede the program which is read from\nSYSIN.\n\n    The program heading may consist of any combination of\n\n    USING directive: this specifies to the compiler how the program\n                     segmentation is to be used (see 11 below).\n\n        example:  USING FRED FROM \"MYENV(FRED1)\"\n\n    TRACE directive: this is used for debugging the compiler. An integer\n                     must follow specifying the level of compiler trace.\n\n        example:  TRACE 63\n\n    KEY directive:   This is not useful at present. It must be followed\n                     by an integer.\n\n        example:  KEY 4\n\n    XREF directive:  This specifies that the compiler is to produce\n                     output on the data set specified by the XREF DD\n                     card for later processing by the crossreference\n                     program.\n\n        examples: XREF\n                  CROSSREF\n\n    NAME directive:  This allows a name to be given to the control\n                     section (CSECT) produced by the translator.  It\n                     also causes an external reference to be constructed\n                     when any daughter module is translated.  The name\n                     is specified as a string of up to eight characters\n                     that must form a legal OS CSECT name.\n\n        example:  NAME \"MODULE1\"\n\n    TITLE directive: This causes the title to be included as part of the\n                     compiler output to SYSPRINT to enable multiple\n                     compilations in the same job to be distinguished.\n\n        example:  TITLE this is a title it is syntactically a tag\n\n    STRICT directive: The intention of this is to give a warning message\n                     if any extensions from ALGOL 68 are used.\n\n        example:  STRICT\n\n    The words USING, FROM, TRACE, KEY, XREF, CROSSREF, NAME, TITLE and\nSTRICT must be stropped.\n\n\n    The program consists of a serial clause.\n\n\n11. Separate compilation\n------------------------\n\n    The language mechanism for supporting separate compilation is\ndescribed in the ALGOL68C Reference Manual section 5.5.5 ('handles'). It\nallows a program to be segmented in a tree-structured manner.  a\nsegmented program must be compiled from the root first (in order that\nthe environments are available in a tree-structured manner).  The\nenvironment produced by compiling a module which includes a 'handle' is\nwritten to the data set described by the DD card with the DDNAME ENVOUT.\nThis data set is most usefully a member of a partitioned data set so\nthat the perhaps many environments for a large program can be\nconveniently stored together.\n\n    When an inner (in the sense of block structuring) module is\ncompiled, all the environments for the more outer modules must be\navailable.  The most immediately outer environment is specified in a\nusing directive when the current module is compiled.  The more outer\nmodules are accessed by the previous using directives that were \"copied\"\nto the environment files when those modules were compiled. Thus the same\ninput DDnames must be available for all compilations of the various\nsegments of the program.\n\n    A USING directive has the following form:\n\n        USING handle FROM string\n\nwhere handle is the 'handle identification' (an indicant) and string is\na string denotation.  The string is the idf used for opening the file\ncontaining the previous environment.\n\n    This sounds very complicated, but is in fact very simple, especially\nwhen a pds is used for saving environments - see the example in 13\nbelow.\n\n\n12. Overlays\n------------\n\n        Separately compiled segments may be overlaid using the\nfacilities of OS/360 and its linkage editor.  However, overlaying must\nbe done with some care as it is possible for objects in the store that\nis being overlaid to be pointed at from somewhere else in the store.  It\nis difficult to describe formally when this condition could arise as it\nis highly dependent on the implementation of copying of items (which\ncould change from one version of the compiler to another).  In general,\nit will not be safe if\n\n        a) the object is yielded by the overlayable segment or the\n           object is assigned within the overlayable segment to a name\n           having a scope greater than that segment,\n\n   and  b) the object occurs within an overlayable segment and the\n           object is a STRING denotation or a routine text, or if it is\n           a row- or a structure-display, or it derives from one of\n           these (e.g. by ascription),\n\n   or   c) control is transferred between overlayable segments other\n           than by elaborating ENVIRON (e.g. a segment is entered by\n           elaborating ENVIRON, but return from a segment does not).\n\nExamples:\n\n        1) containing assignments:\n\n        PROC INT p;\n        ENVIRON ONE;\n\n        when the segment associated with the handle contains\n\n        p := INT:( ... );\n\n        such a segment cannot be safely overlaid within the scope of p.\n\n        2) yielding values:\n\n        PROC INT p = ENVIRON TWO;\n\n        The segment associated with the handle cannot be safely overlaid\n        within the scope of p.\n\n        Note that in\n\n        PROC p = INT: ENVIRON THREE;\n\n        the segment associated with the handle yields an INT value and,\n        other things being equal, may be overlaid safely within the\n        scope of p.\n\n        It is intended that, in future, overlays will be implemented\ncorrectly or that a message will be issued when any unsafe condition\narises.\n\n\n13. Example job using separate compilation and overlays\n-------------------------------------------------------\n\n\n//*\n//* PREALLOCATE DATA SETS\n//*\n// EXEC PGM=IEFBR14,REGION=8K,TIME=(,1)\n//A DD DSN=ABCD.ENV,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(1,1,1)),\n//      DCB=RECFM=VB\n//B DD DSN=ABCD.LIB,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(1,1,1))\n//*\n//* ROOT MODULE\n//*\n// EXEC A68CL,\n// ENVOUT='ABCD.ENV(A)',           ENVIRONMENT GENERATED\n// DISPL=OLD,NAMEL='ABCD.LIB(A)'   LOAD MODULE\n//A68.SYSIN DD *\nTITLE root segment  #title for compiler diagnostics#\nNAME \"A\"            #CSECT name for segment#\nprint(\"root\");\nENVIRON ONE;\nENVIRON TWO\n//*\n//* FIRST BRANCH\n//*\n// EXEC A68CL,\n// ENVOUT='ABCD.ENV(B)',           ENVIRONMENT GENERATED\n// DISPL=OLD,NAMEL='ABCD.LIB(B)'   LOAD MODULE\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR  TO ACCESS PREVIOUS ENVIRONMENT\n//A68.SYSIN DD *\nTITLE branch 1 NAME \"B\" USING ONE FROM \"ENVIN(A)\"\nprint(\"b\");\nSTRING s = ENVIRON THREE;\nprint(s)\n//*\n//* TWIG\n//*\n// EXEC A68CL,\n// DISPL=OLD,NAMEL='ABCD.LIB(C)'\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR\n//A68.SYSIN DD *\nUSING THREE FROM \"ENVIN(B)\"\n\" c \"\n//*\n//* SECOND BRANCH\n//*\n// EXEC A68CL,\n// DISPL=OLD,NAMEL='ABCD.LIB(D)',\n// PARMC='/USING TWO FROM \"ENVIN(A)\"'\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR\n//A68.SYSIN DD *\nprint(\"d\")\n//*\n//* LKED (OVERLAYING) AND EXECUTE\n//*\n// EXEC A68LG,ATTL=OVLY\n//LKED.SYSLIB DD\n//            DD\n//            DD DSN=ABCD.LIB,DISP=SHR\n//LKED.SYSIN DD *\n OVERLAY ONE\n INCLUDE SYSLIB(B,C)\n OVERLAY ONE\n INCLUDE SYSLIB(D)  NOTE ROOT IS AUTOMATICALLY LOADED\n\n\n14. Error messages\n------------------\n\n    The error messages from the compiler should be self explanatory, at\nleast with the help of the ALGOL68C Reference Manual to explain\ntechnical terms.  Occurrences of \"System error\" and \"Consult expert\"\nmessages should be reported to the ALGOL68C maintenance group (see 3\nabove).\n\n    Error messages from the translator should not occur frequently; the\nmost likely messages are \"program too large\", or \"segment exceeds 12k\"\nin which case the program should be further segmented (The translator\nwill not produce an object module occupying more than 12k because only 3\nbase registers are used.)  \"System error\" messages from the translator\nmay also occur, please report as above.\n\n    The messages from the linkage editor are described by IBM.\n\n    The run-time diagnostics need considerable improvement - this will\nhappen in due course.  Messages produced at run time include:\n\n    \"no storage for generator\"  a heap or local generator was elaborated\n                and insufficient storage was available.  Increase the\n                region size.  Note that the 'static' stack size is not\n                checked so that the static and dynamic stacks (or the\n                heap) may clash causing miscellaneous errors (but\n                usually abends 0C4, 0C5 or 0C1).\n\n                Note that, on the 360/370, the dynamic stack and the\n                heap are allocated from the same area of storage (the\n                high address end of the region).  Mixed use of the\n                heap and the dynamic stack can prevent storage on\n                the dynamic stack from being recovered.  The heap is\n                used for all HEAP generators and for dynamically\n                constructed strings (strictly, for the characters\n                contained within the string) and for OS data control\n                blocks.  The dynamic stack is used for array elements,\n                and for explicit LOC generators (but this does not\n                include sample-generators).  Thus '\u00e21:4\u00e4INT a' will\n                cause the elements of 'a' to be placed on the dynamic\n                stack, 'REF INT b = LOC INT' will cause 'b' to be\n                on the dynamic stack, but 'LOC INT c' will cause 'c' to\n                be on the static stack.\n\n                The following program will cause the dynamic stack\n                allocated for the elements of 'a' not to be recovered:\n\n                    BEGIN\n                       PROC p = VOID: BEGIN \u00e21:5\u00e4INT a; q END;\n                       PROC q = VOID: BEGIN HEAP INT b; SKIP END;\n                       p\n                    END\n\n    \"file ended\" this message is output by the default file mended\n                routine before it terminates the program.  The user has\n                attempted to read past the last character of the file.\n                Either do not read too far, or substitute a new file\n                mended routine.  N.B. a call of 'file ended' before\n                reading will not normally be useful as the file is not\n                ended until the user reads past the last line in the\n                file.  A useful technique is to assign a routine\n                delivering false and to check for file ended immediately\n                after reading, e.g.\n\n                   on file end(file, (REF FILE f)BOOL: FALSE);\n\n                           . . .\n\n                   read(c); IF NOT file ended(file)\n                            THEN  . . .\n\n                Alternatively, although perhaps less elegantly, a jump\n                from the file mended routine may be made, e.g.\n\n                   on file end(file,\n                               (REF FILE f)BOOL: (GOTO endfile; SKIP));\n\n                           . . .\n\n                   read(c)\n\n                           . . .\n\n                   endfile: . . .\n\n    \"integer out of range for ELEM ... \"  ELEM for string, bits, or\n                bytes has been called and the 'index' integer is out of\n                range, i.e. zero or negative, or too large.\n\n    \"obeying faulty program\" occurs if the part of a program that caused\n                a compiler error message is elaborated.\n\n    Other runtime error messages produced by the library should be\nself-explanatory.  The usual ABENDs may of course occur.  In some future\nrelease, these will be trapped with STAE and SPIE macros to produce a\nmore meaningful diagnostic.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE733": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x056O\\x01\\x056O\\x114\\x00]\\x00]\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T11:34:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "CBT-471"}, "text": "//***FILE 733 is the full ALGOL68C tape distribution of the ALGOL   *   FILE 733\n//*           68C language, from Cambridge University, dated the    *   FILE 733\n//*           Spring of 1976.  It may not be what you expect, but   *   FILE 733\n//*           it is the full distribution tape, consisting of 25    *   FILE 733\n//*           tape files.  The members in this pds are numbered     *   FILE 733\n//*           in order, according to the tape file numbers:         *   FILE 733\n//*                                                                 *   FILE 733\n//*           I believe this is called a \"prerelease version\".      *   FILE 733\n//*                                                                 *   FILE 733\n//*           Member A68C01 corresponds to tape file 1, and so      *   FILE 733\n//*           forth, so you can navigate through this pds, just     *   FILE 733\n//*           like you would navigate through the tape documenta-   *   FILE 733\n//*           tion on file 4, which is reproduced here as member    *   FILE 733\n//*           $INSTALL.                                             *   FILE 733\n//*                                                                 *   FILE 733\n//*           There are many interesting things to look at here,    *   FILE 733\n//*           even if you don't want to implement the language,     *   FILE 733\n//*           such as the character set description in member       *   FILE 733\n//*           A68C01 (file 1), and the pack/unpack program that     *   FILE 733\n//*           is included in the package.                           *   FILE 733\n//*                                                                 *   FILE 733\n//*           Object deck disassemblies of the PACK and PACKCEBC    *   FILE 733\n//*           programs on file 8 have been provided.                *   FILE 733\n//*                                                                 *   FILE 733\n//*           Do with it as you like, and as you can.  At least it  *   FILE 733\n//*           is all here.  What you see is what you get, and what  *   FILE 733\n//*           you get is what you can make of it.                   *   FILE 733\n//*                                                                 *   FILE 733\n//*   Questions:  sbgolob@cbttape.org  or sbgolob@attglobal.net     *   FILE 733\n//*                                                                 *   FILE 733\n//*       Differences between ALGOL68C and ALGOL 68                 *   FILE 733\n//*       ----------- ------- -------- --- ----- --                 *   FILE 733\n//*                                                                 *   FILE 733\n//*     Restrictions                                                *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   No parallel clauses.                                    *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   No flexible names.                                      *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   No formatted transput.                                  *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   No vacuums.                                             *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   An indicant may not be used as both an operator and     *   FILE 733\n//*         a mode-indication.                                      *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Round brackets are not available in row-declarers.      *   FILE 733\n//*         (But see 'row-symbol' below.)                           *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Colon-symbol must not be present in virtual rowers.     *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Both bounds must be specified in an actual rower.       *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   := and =: are not available in operators.               *   FILE 733\n//*         (But see 'assign-formulas' below.)                      *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Widening of BITS and BYTES is not provided.             *   FILE 733\n//*                                                                 *   FILE 733\n//*     Extensions                                                  *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Labels in enquiry-clauses.                              *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   UPTO and DOWNTO in loop-clauses.                        *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Until-part in loop-clauses.                             *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Operator priorities.                                    *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Row-symbol in row-declarers.                            *   FILE 733\n//*         (e.g. ROW()AMODE as an alternative to \u00e2\u00e4AMODE.)         *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Monadic-formula is a secondary.                         *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Displacements (yielding the previous value).            *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Assign-formulas (op:= and op:=:= are automatically      *   FILE 733\n//*         available for all op).                                  *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Predicates (ANDF and ORF have defined sequence of       *   FILE 733\n//*         elaboration).                                           *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Handles.                                                *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Escaped-characters in string-denotations (e.g. *\"       *   FILE 733\n//*         yields \").                                              *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Use of square brackets in calls.                        *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   Thef-symbol in conditional-clauses.                     *   FILE 733\n//*         (e.g. IF a THEF b THEN c ELSE d FI)                     *   FILE 733\n//*                                                                 *   FILE 733\n//*     .   :\u00ac=: as a representation of the is-not-symbol.          *   FILE 733\n//*                                                                 *   FILE 733\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C01": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00T\\x00T\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "ALGOL68"}, "text": "UPPER CASE       ABCDEFGHIJKLMNOPQRSTUVWXYZ\nDIGITS           0123456789\nASTERISK         *\nHASH             #\nDOLLAR           $\nQUOTE            \"\nAPOSTROPHE       '\nPOINT            .\nBRACKETS         ()\nCOMMA            ,\nCOLON            :\nSEMICOLON        ;\nPLUS             +\nMINUS            -\nEQUALS           =\nVERTICAL BAR     |\nSQUARE BRACKETS  \u00e2\u00e4\nLOWER CASE       abcdefghijklmnopqrstuvwxyz\nLESS THAN        <\nGREATER THAN     >\nSOLIDUS          /\nAT               @\nQUERY            ?\nPERCENT          %\nEXCLAMATION      !\nAMPERSAND        &\nNOT              \u00ac\n\nNote that square brackets are not defined for EBCDIC in System/370\nPrinciples of Operation (GA22-7000).  The EBCDIC translation table\nin the compiler accepts both hex 42 and AD for open square bracket,\nand hex 43 and BD for close square bracket.\n\nThe following characters may also appear, but it is legitimate to\ntranslate them to some dummy character, even blank.\n\nPOUND            \u00a2\nBACK SLASH       \u00c2\nLOGOR            \u00c4\nLOGAND           \u00c0\nUPARROW          \u00c1\nBACKARROW        \u00c3\nUNDERLINE        _\n\n\n\nEBCDIC   GRAPHIC\n  01       SOH            02       STX            03       ETX\n  1E       IRS            40       SP             42       \u00e2\n  43       \u00e4              4A       \u00a2              4B       .\n  4C       <              4D       (              4E       +\n  4F       |              50       &              5A       !\n  5B       $              5C       *              5D       )\n  5E       ;              5F       \u00ac              60       -\n  61       /              62       \u00c2              63       \u00c4\n  64       \u00c0              65       \u00c1              66       \u00c3\n  6B       ,              6C       %              6D       _\n  6E       >              6F       ?              79      +\n  7A       :              7B       #              7C       @\n  7D       '              7E       =              7F       \"\n  81       a              82       b              83       c\n  84       d              85       e              86       f\n  87       g              88       h              89       i\n  91       j              92       k              93       l\n  94       m              95       n              96       o\n  97       p              98       q              99       r\n  A2       s              A3       t              A4       u\n  A5       v              A6       w              A7       x\n  A8       y              A9       z              C1       A\n  C2       B              C3       C              C4       D\n  C5       E              C6       F              C7       G\n  C8       H              C9       I              D1       J\n  D2       K              D3       L              D4       M\n  D5       N              D6       O              D7       P\n  D8       Q              D9       R              E2       S\n  E3       T              E4       U              E5       V\n  E6       W              E7       X              E8       Y\n  E9       Z              F0       0              F1       1\n  F2       2              F3       3              F4       4\n  F5       5              F6       6              F7       7\n  F8       8              F9       9\n\n\nSOH, STX, ETX, IRS are used in \"packed\" files only.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C02": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\t\\x00\\t\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "ALGOL68"}, "text": "\n ALGOL68C distribution tape - 20.11 25 APRIL 1976\n\n compiler version    247\n translator version  119  (360/370 only)\n initialisation      370\n library version     107\n OS run time system  127  (360/370 only)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A68C03": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\xe3\\x00\\xe3\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 227, "newlines": 227, "modlines": 0, "user": "ALGOL68"}, "text": "//*\n//*      ALGOL68C Distribution tape         20.11 25 APRIL 1976\n//*\n//*      The ALGOL68C distribution tape contains all the files relating\n//*  to the ALGOL68C system.   The recording parameters are as follows:\n//*\n//*     TAPE NAME           A68C00\n//*     DENSITY \u00e21/2/3\u00e4     3\n//*     TRACKS  \u00e27/9\u00e4       9\n//*     BLKSIZE \u00e2*80\u00e4       3200\n//*     LABELS  \u00e2NL/SL\u00e4     SL\n//*     TRTCH   \u00e2/,TRTCH=C\u00e4\n//*\n//*      .  compiler version = 247\n//*\n//*      .  translator version = 119  (360/370 only)\n//*\n//*      .  compiler initialisation version = 370\n//*\n//*      .  library version = 107\n//*\n//*      .  OS run time system version = 127  (360/370 only)\n//*\n//*\n//*      The following files have been written to the tape\n//*\n//*\n//*    file     description\n//*\n//*      1   The character set used on the tape (a printout of this file\n//*          is enclosed).\n//*\n//*      2   The version numbers of the system being distributed.\n//*\n//*      3   The job used to write this tape.\n//*\n//*      4   Instructions for installing the ALGOL68C system.\n//*\n//*      5   The job to construct an ALGOL68C system on a 360/370\n//*\n//*      6   A job to undump the data sets from the tape.\n//*\n//*     +7  The 360/370 object modules for the library, FORTRAN\n//*          interface and crossreference program.\n//*\n//*     +8  The 360/370 object modules for the pack/unpack program.\n//*\n//*     +9  The 360/370 object modules for the compiler.\n//*\n//*     +10  The 360/370 object modules for the translator.\n//*\n//*     +11  Sample JCL procedures for running ALGOL68C.\n//*\n//*     *12   Test programs.\n//*\n//*     *13   Jobs to run tests and resulting output.\n//*\n//*     *14   The compiler initialisation files.\n//*\n//*     *15   The environment files for the library.\n//*\n//*     +16   The source code for the 360/370 machine library.\n//*\n//*     *17  The source code for the A68C library.\n//*\n//*     *18  The source code for the crossreference program.\n//*\n//*     *19  Source of the pack/unpack program.\n//*\n//*      20  Changes incorporated in this version.\n//*\n//*      21  List of known bugs.\n//*\n//*      22  ALGOL68C features not yet implemented.\n//*\n//*      23   Differences from ALGOL 68.\n//*\n//*      24  Documentation for the program used to pack and unpack\n//*          some of the files on this tape.\n//*\n//*     +25  The JCL for the jobs used (at Cambridge) to compile\n//*          the compiler, translator, and library.\n//*\n//*\n//*     + indicates a file in IEBUPDTE format.\n//*\n//*     * indicates a 'packed' file having the following format:\n//*        #01 \"idf of subfile\" #02 text of subfile #03\n//*        and records are separated by the character #1E\n//*\n//*        N.B. An earlier version of this format had a different\n//*        record separator character and a different subfile idf\n//*        format.\n//*\n//*      #nn  =>  hexadecimal character nn\n//*\n//*\n//*\n//*\n//*   COPY SIMPLE FILES\n//*\n//F PROC L=,N=,\n//       SER=A68C00,BLKSIZE=3200,DEN=3,TAPE=TAPE9,LABELS=SL\n//  EXEC PGM=PHSEQCPY,REGION=32K\n//FROM   DD   DSN=&N,DISP=SHR\n//TO     DD   UNIT=&TAPE,VOL=(,RETAIN,SER=&SER),\n//            LABEL=(&L,&LABELS),DISP=(NEW,KEEP),DSN=A68C&L,\n//     DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN)\n//SYSPRINT DD SYSOUT=C\n//       PEND\n//*\n//*   PACK VB PDS FILES\n//*\n//P PROC L=,N=,\n//       SER=A68C00,BLKSIZE=3200,DEN=3,TAPE=TAPE9,LABELS=SL\n// EXEC PGM=PACK,REGION=80K,PARM='/PACK'\n//STEPLIB DD  DSN=AL68.MOD,DISP=SHR\n//UNPACKED DD DSN=&N($),DISP=SHR\n//TO     DD   UNIT=&TAPE,VOL=(,RETAIN,SER=&SER),\n//            LABEL=(&L,&LABELS),DISP=(NEW,KEEP),DSN=A68C&L,\n//     DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN)\n//SYSPRINT DD SYSOUT=C\n//CTRL DD DDNAME=SYSIN\n//       PEND\n//*\n//*   PACK OBJ MODULES (IEBUPDTE FORMAT)\n//*\n//C PROC L=,N=,I=,\n//       SER=A68C00,BLKSIZE=3200,DEN=3,TAPE=TAPE9,LABELS=SL\n// EXEC PGM=POPS,REGION=32K,PARM=UN&I\n//FROM DD DSN=&N,DISP=SHR\n//TO DD UNIT=&TAPE,VOL=(,RETAIN,SER=&SER),\n//      LABEL=(&L,&LABELS),DISP=(NEW,KEEP),DSN=A68C&L,\n//      DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN)\n//PRINT DD SYSOUT=C\n//  PEND\n//*\n//*\n//CHARSET EXEC F,L=1,N='AL68.DISTRIB(CHARSET)'\n//VERS370 EXEC F,L=2\n//FROM DD *\n\n ALGOL68C distribution tape - 20.11 25 APRIL 1976\n\n compiler version    247\n translator version  119  (360/370 only)\n initialisation      370\n library version     107\n OS run time system  127  (360/370 only)\n\n//DISTRJOB EXEC F,L=3,N='AL68.DISTRJOB.TA68C00,DISP=(OLD,DELETE) '\n//INST360 EXEC F,L=4,N='AL68.A68DOCS(INST360)'\n//UNDUMP EXEC F,L=5,N='AL68.DISTRJOB.UA68C00,DISP=(OLD,DELETE) '\n//UNDUMP1 EXEC F,L=6,N='AL68.DISTRJOB.VA68C00,DISP=(OLD,DELETE) '\n//MISCOBJ EXEC PGM=IEBCOPY,REGION=80K\n//SYSPRINT DD SYSOUT=C\n//SYSUT3 DD UNIT=DISC,SPACE=(TRK,(1,1))\n//SYSUT4 DD UNIT=DISC,SPACE=(TRK,(1,1))\n//I1 DD DSN=AL68.ZLIB.OBJ127,DISP=SHR\n//I2 DD DSN=AL68.USERLIB.OBJ107,DISP=SHR\n//I3 DD DSN=AL68.XREF.OBJ,DISP=SHR\n//O DD DSN=&USEROBJ,DISP=(,PASS),UNIT=DISC,SPACE=(TRK,(1,1,4)),DCB=FB\n//SYSIN DD *\n C I=I1,O=O\n S M=((ZLIB,$LIB127),RAND,FORT)\n C I=I2,O=O\n C I=I3,O=O\n S M=((XREF107,XREF))\n//MISCOBJ EXEC C,L=7,N='&USEROBJ'\n//PACKOBJ EXEC C,L=8,N='AL68.PACK.OBJ'\n//A68COBJ EXEC C,L=9,N='AL68.A68C.OBJ247'\n//Z370OBJ EXEC C,L=10,N='AL68.Z370.OBJ119'\n//PROCLIB EXEC C,L=11,N='AL68.PROCLIB',I=I\nA68C A68CL A68CLG A68LG A68XREF\n//TESTS EXEC P,L=12,N='AL68.A68TEST'\n\"UNPACKED(T1)\" \"UNPACKED(T100)\" \"UNPACKED(T2)\" \"UNPACKED(T3)\"\n\"UNPACKED(T4)\" \"UNPACKED(T5)\" \"UNPACKED(T6)\" \"UNPACKED(T7)\"\n\"UNPACKED(T8)\" \"UNPACKED(T9)\" \"UNPACKED(CHAR)\" \"UNPACKED(CODE)\"\n\"UNPACKED(EASTER)\" \"UNPACKED(FIXED)\" \"UNPACKED(FIXED370)\"\n\"UNPACKED(GRAPH)\" \"UNPACKED(INTFN)\" \"UNPACKED(KNIGHT)\"\n\"UNPACKED(OPDTEST)\" \"UNPACKED(ORRERY)\" \"UNPACKED(POLYO)\"\n\"UNPACKED(PRIMES)\" \"UNPACKED(PRINTCON)\" \"UNPACKED(RANDOM)\"\n\"UNPACKED(REALIGN)\" \"UNPACKED(RTNSCOPE)\" \"UNPACKED(SORTCHN)\"\n\"UNPACKED(E10)\" \"UNPACKED(E11)\" \"UNPACKED(E12)\" \"UNPACKED(E14)\"\n\"UNPACKED(E15)\" \"UNPACKED(E16)\" \"UNPACKED(E17)\" \"UNPACKED(E18)\"\n\"UNPACKED(E19)\" \"UNPACKED(E21)\" \"UNPACKED(E22)\" \"UNPACKED(E23)\"\n\"UNPACKED(E24)\" \"UNPACKED(E25)\" \"UNPACKED(E26)\" \"UNPACKED(E27)\"\n\"UNPACKED(HB17B)\" \"UNPACKED(HB17C)\" \"UNPACKED(HB17D)\" \"UNPACKED(B10)\"\n\"UNPACKED(B11)\" \"UNPACKED(B12)\" \"UNPACKED(B13)\" \"UNPACKED(B14)\"\n\"UNPACKED(B15)\" \"UNPACKED(B16)\" \"UNPACKED(B17)\" \"UNPACKED(B18)\"\n\"UNPACKED(B19)\" \"UNPACKED(B20)\" \"UNPACKED(BALANCES)\"\n\"UNPACKED(DYNSTACK)\" \"UNPACKED(MIX)\"\n//TESTJOB EXEC P,L=13,N='AL68.A68TEST'\n\"UNPACKED(JOB1)\" \"UNPACKED(JOB2)\" \"UNPACKED(JOB3)\" \"UNPACKED(JOB4)\"\n\"UNPACKED(RESULTS1)\" \"UNPACKED(RESULTS2)\" \"UNPACKED(RESULTS3)\"\n\"UNPACKED(RESULTS4)\"\n//INIT EXEC P,L=14,N='AL68.DISTRIB'\n\"UNPACKED(INIT370)\" \"UNPACKED(INIT10)\" \"UNPACKED(INITSTD)\"\n//ULIBENV EXEC P,L=15,N='AL68.USERLIB.ENV107'\n\"UNPACKED(BASE107)\"\n\"UNPACKED(CMPX107)\"\n\"UNPACKED(USERSAFE)\"\n\"UNPACKED(USER107)\"\n\"UNPACKED(MACH107)\"\n\"UNPACKED(REAL107)\"\n\"UNPACKED(ZLIB127)\"\n//ZLIBTXT EXEC C,L=16,N='AL68.ZLIB.TXT127'\n//ULIBTXT EXEC P,L=17,N='AL68.USERLIB.TXT107'\n\"UNPACKED(BASE)\"\n\"UNPACKED(CMPX)\"\n\"UNPACKED(MACH10)\"\n\"UNPACKED(MACH1900)\"\n\"UNPACKED(MACH370)\"\n\"UNPACKED(MACH4100)\"\n\"UNPACKED(REAL)\"\n//XREFTXT EXEC P,L=18,N='AL68.XREF.SOURCE'\n\"UNPACKED(XREF107)\"\n//PACKTXT EXEC P,L=19,N='AL68.DISTRIB'\n\"UNPACKED(PACK)\" \"UNPACKED(PACKCEBC)\"\n//CHANGES EXEC F,L=20,N='AL68.A68DOCS(CHANGES)'\n//BUGS EXEC F,L=21,N='AL68.A68DOCS(BUGS)'\n//UNIMPLEM EXEC F,L=22,N='AL68.A68DOCS(UNIMPLEM)'\n//DIFFS EXEC F,L=23,N='AL68.A68DOCS(DIFFS)'\n//PACKDOC EXEC F,L=24,N='AL68.A68DOCS(PACKDOC)'\n//CKJOBS EXEC C,L=25,N='AL68.A',I=I\nCKA68CJ LKA68C CKZ370 CKUSER CKZLIB CKPACK CKXREF\n// EXEC XTAPE,TAPE=A68C00,LABEL=SL,UNIT=TAPE9,DEN=3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C04": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x03\\x8b\\x03\\x8b\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 907, "newlines": 907, "modlines": 0, "user": "ALGOL68"}, "text": "Installing ALGOL68C on an IBM System/360 or /370\n------------------------------------------------\n\n\n            Contents\n\n            1.  General\n\n            2.  Portability\n\n            3.  Maintenance\n\n            4.  Documentation\n\n            5.  Tape Format\n\n            6.  Character Codes\n\n            7.  Installation\n\n            8.  Catalogued Procedures\n\n            9.  Testing the System\n\n           10.  Writing ALGOL68C Programs\n\n           11.  Separate Compilation\n\n           12.  Overlays\n\n           13.  Example Program\n\n           14.  Error Messages\n\n  (These installation instructions are only valid for compiler version\n   247, translator version 119, ALGOL 68 library version 107 and 370\n   assembler library version 127.)\n\n\n1. General\n----------\n\n    ALGOL68C has been developed for the 360/370 range of computers with\nthe universal instruction set running OS/MVT Release 21.  It has also\nbeen successfully installed on systems running OS/MFT, OS/VS1, and\nOS/VS2 (SVS).  It is also believed to run under OS/MVS.\n\n    No 370-only instructions are used except for STCK (store clock)\nwhich is only executed if the CVT indicates that the time of day clock\nis supported.  The boundary alignment feature is not needed.\n\n    The currently distributed versions of ALGOL68C are known as\n\"Prerelease\" as the system does not implement the full ALGOL68C\nlanguage.  The currently unimplemented features are described in a\nseparate document. The current state of ALGOL68C precludes its use by\nother than the dedicated user.  The full implementation is expected to\nbe available in the late summer of 1976.\n\n    The distribution package consists of a magnetic tape, the printer\noutput of the job that wrote the tape, and printouts of various\ndocuments (including this document).  Note that, as the tapes are\nprepared in batches, and the source copies of the documents are\nupdated from time to time, the printed copies may differ from the\ncorresponding copies of those documents on the tape.  In case of\ndiscrepancy, the printed version is likely to be the most correct.\n\n\n2. Portability\n--------------\n\n    The ALGOL68C system is designed so that implementing it on a new\nmachine range is straightforward.  The compiler produces code in an\nintermediate language, ZCODE.  ZCODE is a simple assembly language for a\nmachine with conventional arithmetic and index registers and a\nconventional storage addressing scheme.\n\n    The compiler reads a simple description of the target machine (e.g.\nthe number and type of registers, the size of INTs, etc.) so that the\nZCODE produced is tailored for the target machine.\n\n    An implementor of ALGOL68C on a new machine range must write a\ntranslator (or an interpreter) for ZCODE, and also must write a run time\nsystem.  Three to nine man-months are usually needed.\n\n    (It should take only a few hours to install the ALGOL68C system on a\n/360 or a /370 from the distribution tape.)\n\n\n3. Maintenance\n--------------\n\n    ALGOL68C is maintained as indicated in the Conditions of\nDistribution by the University of Cambridge Computing Service.\n\n    We would be grateful to be notified of any bugs, infelicities, or\nother helpful suggestions.  Please send all material (e.g. program\nsources, compiler output - messages and ZCODE, dumps, JCL, and the\nversion numbers of the system being used) to\n\n               ALGOL68C Maintenance,\n               Computing Service,\n               Computer Laboratory,\n               University of Cambridge,\n               Corn Exchange Street,\n               CAMBRIDGE, CB2 3QG,\n               England.\n\n    Existing installations will be notified of major new releases of the\nsystem. A standard charge is made for each copy of the system sent out\n(this charge is currently not greater than 15 pounds Sterling and\ndepends on the postal rate).  Please do not send money with the order\nfor the system: an invoice will be sent when the system is dispached.\n\n    Requests for the system should be sent to\n\n                ALGOL68C Distribution,\n                Computing Service,\n                Computer Laboratory,\n                University of Cambridge,\n                Corn Exchange Street,\n                CAMBRIDGE, CB2 3QG,\n                England.\n\n\n\n4. Documentation\n----------------\n\n    The ALGOL68C language is described by \"The ALGOL68C Reference\nManual\" by S.R. Bourne, A.D. Birrell, and I. Walker.  The manual is\ncopyright; it may be obtained from\n\n                 The Computing Service Bookshop,\n                 Computer Laboratory,\n                 University of Cambridge,\n                 Corn Exchange Street,\n                 CAMBRIDGE, CB2 3QG,\n                 England.\n\nand costs 2 pounds (Sterling).  Bulk orders can be considered.  Section\n8.2 (on transput) is not yet complete but it will be forwarded to\npurchasers of the manual when it is available.\n\n    An introduction to ALGOL68C is being prepared.\n\n    A Users' Guide to running ALGOL68C programs on the Cambridge 370/165\nis in preparation.  It is suitable for modification by other\ninstallations for describing what JCL to use, etc.\n\n    This document is known as the 360/370 installation guide, and may be\ncopied from the distribution tape.\n\n    An Implementors' Guide describing how to implement ALGOL68C on a new\nmachine range is in preparation.  Two documents describing ZCODE are\navailable from the distribution address given in 3 above - one of these\ndescribes ZCODE as it is currently (\"old ZCODE\"), the other gives a very\nbrief description of the proposed new ZCODE.\n\n    The following documents are included on the distribution tape and\nare also supplied as printouts with the tape:\n\n    Character set,\n    Differences from ALGOL 68,\n    Features currently unimplemented,\n    Bugs known and bugs mended,\n    Changes from previous releases.\n\n    It is regretted that no estimates can be given for the availability\nof any of the above documentation that is in preparation.\n\n\n5. Tape Format\n--------------\n\n    The following tape recording parameters are possible:\n\n 9 track, 800 bpi NRZI or 1600 bpi PE, unlabelled or IBM standard\n labels;\n\n 7 track, 556 bpi NRZI or 800 bpi NRZI, odd parity, \"data convert\",\n unlabelled or IBM standard labels.  (Data convert causes three (8 bit)\n bytes to be written as four 6 bit characters on the tape.  If the\n number of bytes written is not a multiple of three, the record is\n padded with zeros to fill the last 6 bit character; note that it is not\n padded to a multiple of three bytes.)\n\n    Files are recorded on the tape in fixed length blocked records with\na logical record length of 80.  The blocksize (physical record length)\nmay be specified by the recipient and it must be a multiple of 80 and\nnot greater than 16320.  Carriage controls are not used.\n\n    The standard recording parameters for System/360 are:\n\n        9 track, 800 bpi NRZI,\n        3200 bytes maximum block size,\n        no labels.\n\n    The standard recording parameters for System/370 are:\n\n        9 track, 1600 bpi PE,\n        3200 bytes maximum block size,\n        no labels.\n\n    Please note that it is particularly inconvenient to write the\nALGOL68C tapes with standard labels so they should only be requested if\nabsolutely necessary.\n\n        Files on the tape are in one of three forms:\n\n    a) simple - the file consists of only one subfile.  One record of\n       the subfile occupies precisely one record of the file.  The file\n       may be copied by using a standard IBM utility (e.g. IEBGENER).\n\n    b) UPDTE format - there are a number of subfiles in the file.\n       One record of a subfile occupies precisely one record of the\n       file.  Documents are preceded by a record starting ./ this\n       being a control record for the IBM IEBUPDTE utility program.\n       IEBUPDTE may be used directly to make a partitioned dataset\n       from this file.  Sample JCL for doing this is included on the\n       tape.\n\n    c) packed format - there are normally a number of subfiles to\n       such a file.  The records of the file and the records of the\n       subfiles do not correspond.  A subfile starts with hexadecimal\n       01.  A string enclosed in double quotes follows, this string is\n       the subfile identification, and, for OS/360, is a ddname followed\n       by a parenthethised member name.  The string is followed by\n       hexadecimal 02 and this is followed by the text of the subfile.\n       The subfile is terminated by hexadecimal 03.  Records of the\n       subfile are separated by the character represented by hexadecimal\n       1E.\n\n       The object modules for the program to unpack (and pack) these\n       files are included on the tape. The subfile idf strings for\n       material on tapes distributed by Cambridge are of the form\n       \"UNPACKED(membername)\", and the membername will vary.\n\n       The record lengths in the subfiles do not exceed 136.\n\n    The precise layout of the tape is described by comments at the start\nof the job that wrote the tape.  That job is file 3 on the tape and a\nprintout accompanies the distribution tape.\n\n\n6. Character codes\n------------------\n\n    Characters on the tape are in a extension of the EBCDIC code\ndiffering from that described in the IBM manual \"System/370 Principles\nof Operation\" (GA22-7000-3) in that\n\n     \"\u00e2\" (opening square bracket) is represented by hexadecimal 42,\n     \"\u00e4\" (closing square bracket) is represented by hexadecimal 43,\n     \"\u00c4\" (logical or) is represented by hexadecimal 63,\n     \"\u00c0\" (logical and) is represented by hexadecimal 64,\n     \"\u00c1\" (uparrow) is represented by hexadecimal 65,\n     \"\u00c3\" (backarrow) is represented by hexadecimal 66.\n\n(The compiler also accepts the following EBCDIC codes:\n\n    \"\u00e2\" (opening square bracket) hexadecimal AD,\n    \"\u00e4\" (closing square bracket) hexadecimal BD.)\n\n    The characters \"\u00c4\", \"\u00c0\", \"\u00c1\", and \"\u00c3\" are available for use as\noperators.  None of these characters need to be represented at an\ninstallation.\n\n    Similarly, square brackets need not be represented at an\ninstallation as round brackets are equally acceptable in every syntactic\nposition except in row declarations.  If round brackets are to be used\ninstead of square brackets, a row declaration should be preceded by the\nrow-symbol, e.g. instead of \"\u00e2\u00e4AMODE a\" use \"ROW()AMODE a\".\n\n    However, if square brackets are not available, care must be taken\nwhen transcribing material from the tape as square brackets are used as\nthe standard sub- and bus-symbols.\n\n    The first file on the tape gives details of the character set, and a\nprintout of this file is supplied with the distribution tape.\n\n\n7. Installing the ALGOL68C system from tape\n-------------------------------------------\n\n7.1 Installation\n\n    File 5 on the tape is a job to install the ALGOL68C system from the\ntape.  The following job should be run to copy files 5 and 6 to disc:\n\n    //ALGOL68 JOB (,),'JOB CARD TO SUIT INSTALLATION'\n    //*\n    //* COPY FB80 DATA SET\n    //*\n    //F PROC N=,                  DATA SET NAME\n    //       L=,                  TAPE FILE NUMBER\n    //       SER=<TAPE>,UNIT=TAPE<TRKS>, TAPE SERIAL AND UNIT NAME\n    //       DEN=<DEN>,LAB=<LAB>, TAPE DENSITY AND LABEL TYPE\n    //       BLKSIZE=<BLK>,       TAPE BLOCKSIZE\n    //       TRAN='<TRAN>'        7TRACK RECORDING TECHNIQUE\n    // EXEC PGM=IEBGENER,REGION=80K\n    //SYSPRINT DD SYSOUT=A\n    //SYSIN DD DUMMY\n    //SYSUT1 DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n    //          LABEL=(&L,&LAB),DISP=OLD,DSN=A68C&L,\n    //          DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN&TRAN)\n    //SYSUT2 DD UNIT=SYSDA,\n    //          DISP=(,KEEP),DSN=&N,\n    //          SPACE=(TRK,(1,1)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n    // PEND\n    //*\n    // EXEC F,L=5,N='AL68.D.JOB'\n    // EXEC F,L=6,N='AL68.D.JOB1'\n\nThe disposition of SYSUT2 may need to be changed from KEEP to CATLG if\nthis is a requirement in the receiving installation.  Almost certainly,\nthe data set names 'AL68.D. ... ' will need changing to suit the\ninstallation's requirements.  The DCB characteristics may need changing\nfor discs other than 3330s.\n\n    The job from file 5 (copied to AL68.D.JOB) contains comments\ndescribing in detail how to install the system; this description is\nreproduced here:\n\n//*\n//* 1. Make the job card suitable for your installation.\n//*\n//* 2.1 This job constructs the ALGOL68C system on the following data\n//*     sets:\n//*                A68LIB.OBJ   object module data set\n//*                A68LIB.MOD   load module data set\n//*                A68LIB.SYS   initialisation and library environments\n//*                A68LIB.PROCS catalogued procedures\n//*                A68LIB.TESTS tests\n//*\n//*     The blocksizes for these data sets are optimised for 3330 discs\n//*     and should be changed if other discs are used.  Similarly,\n//*     the space allocations will need changing for other discs.\n//*     These changes should be made in the first step, \"X\", of the\n//*     job.\n//*\n//* 2.2 If you wish to change the names of these data sets, change only\n//*     the dsnames in the first step, \"X\".  The other steps obtain\n//*     the dsnames by using JCL refer-back, e.g. DSNAME=*.X.OBJ .\n//*     The data sets are allocated as (NEW,PASS) in the first step\n//*     and are kept in the last step, \"KEEP\", only if the return codes\n//*     from the previously executed steps are 4 or less.  Thus, if\n//*     the job fails for some reason, correct the reason for the\n//*     failure, and run the complete job again.\n//*\n//* 2.3 If you wish to have the data sets catalogued, change the DISP\n//*     in the last step from (OLD,KEEP) to (OLD,CATLG).\n//*\n//* 2.4 If you already have an ALGOL68C system with data sets of\n//*     the same names as those used in the job, you should either\n//*     make a new system with different data set names (2.2 above)\n//*     or change the data set names in the first step to be\n//*     the temporary data set names\n//*\n//*                 &&OBJ\n//*                 &&MOD\n//*                 &&SYS\n//*                 &&PROCS\n//*                 &&TESTS\n//*\n//*     and remove the CONDX parameter from the penultimate step,\n//*     \"COPY\".  This will cause the system to be constructed on the\n//*     temporary data sets, then to be copied (with the replace\n//*     option) to the existing data sets. Because the replace option\n//*     is used, the default names, e.g. A68C, Z370, will be replaced\n//*     by aliases describing the new system. Execution of the COPY\n//*     step will cause the last step, \"KEEP\", to be omitted, and so\n//*     the temporary data sets will be correctly deleted at the end of\n//*     the job.\n//*\n//*     N.B. Ensure that the existing data sets have sufficient space\n//*     and directory blocks to receive the new members.  See the first\n//*     step, \"X\", for estimates of requirements.  Note also that all\n//*     the data sets must exist before the job is run.\n//*\n//* 3.  The data set \"S.FORTLIB\" (see the JCL procedures) is not\n//*     distributed as it contains the proprietry FORTRAN routines used\n//*     for sin, cos, tan, arcsin, arccos, arctan, exp, sqrt.  It is up\n//*     to the installation to arrange linkage to a suitable set of\n//*     routines.\n//*\n//*     ALGOL68C versions of these routines are being developed and\n//*     will be distributed with future releases of the system.\n//*\n//* 4.  Stropping:  The standard job constructs an ALGOL68C system\n//*     that supports \"case stropping\" (that is, tags are written\n//*     with lower case letters and digits, and indicants are written\n//*     with upper case letters).  The alternative, \"prefix-quote\n//*     stropping\", has tags written with upper or lower case letters\n//*     or digits and indicants must be immediately preceded by a\n//*     single quote (apostrophe) and are written in upper case\n//*     letters.  TO construct a system for prefix-quote stropping,\n//*     change the default value for the \"Q\" symbolic parameter in\n//*     the \"P\" procedure (unpack to pds) from null to Q (i.e. instead\n//*     of \"Q=,\", use \"Q=Q,\") and in the step LKA68C to link-edit the\n//*     compiler, change \"INCLUDE(EBCDIC)\" to \"INCLUDE(QEBCDIC)\".\n\n7.2 Other files\n\n    The job from file 6 (copied to AL68.D.JOB1) may be edited to extract\nother material from the tape as required.\n\n\n8. Catalogued Procedures\n------------------------\n\n    The job to construct the ALGOL68C system will have built the data\nset A68LIB.PROCS.  This contains JCL procedures suitable for\nSYS1.PROCLIB (or whatever happens to be the installation's catalogued\nprocedure data set).  Of course, the procedures may also be used 'in\nstream' if a // PEND card is added to the end of each procedure.\n\n     The JCL procedures supplied with the library are those used on the\n370/165 at Cambridge, and may need to be changed for other\ninstallations. Each procedure contains one or more steps, of which there\nare four types, i.e. compile, translate, link edit and go. There is\nnever any need for users to separate the compile and translate steps.\n\n    Because of the difficulties involved in overriding JCL cards, a\nlarge number of symbolic parameters are used in the procedures so that\noverriding JCL cards should not normally be necessary.\n\n\n\n8.1 Compile step:\n\n    The symbolic parameter &SYSLIB, defaulting to A68LIB.MOD, specifies\nthe load module library to be used for loading modules for execution.\n\n    The dataset refered to by DDname INIT is defined as a PDS member\nwith name given by &IDSN(INIT&SYSI), which defaults to A68LIB.SYS(INIT).\nThis dataset contains definitions of the target machine, the default\nenvironment, and the strops of reserved words in ALGOL68C source\nprograms. The name of this dataset will normally not be changed by\nusers, but its default value can be changed if a new version of the\ndataset is to be used.\n\n    The dataset referred to by DDname SYSENV contains details of the\nlibrary environments. It is a PDS with default name A68LIB.SYS. Again,\nthis will not usually need to be changed by users.\n\n    Additional environments can be supplied by the user including DD\ncards in the JCL, e.g.\n\n          //A68.MYENV DD DSN=MYFILE.ENVIRON,DISP=SHR\n\nwould be picked up by an ALGOL68C using-directive such as\n\n          USING FRED FROM \"MYENV\"\n\nAn environment dataset defined in this way can be a PDS containing one\nenvironment in each member. The using-directive would then take the form\n\n          USING FRED FROM \"MYENV(membername)\"\n\n    The dataset referred to by DDNAME XREF receives cross reference\ninformation if the CROSSREF keyword has been included in the PARM field\nof the EXEC statement. This information can be processed by a seperate\nprogram (see 8.5 below) to produce an identifier cross reference\nlisting.\n\n    The dataset referred to by DDname CODE receives the ZCODE output\nfrom the compiler. The block size of 2498 is a suitable value for 3330s\nbut should be changed for other devices.\n\n    The dataset referred to by DDname ENVOUT receives the environment\ndata from 'handles' defined in the source program. It must be defined in\nthe JCL as a physical sequential dataset, and, for programs without any\nhandle in their source text, will most usefully be DSN=NULLFILE (i.e. DD\nDUMMY) or otherwise a member of a PDS. Note that its disposition is OLD.\n\n    The source program is read from the dataset defined by the SYSIN DD\ncard and compiling information and diagnostics is written to the dataset\ndefined by the SYSPRINT DD card.\n\n\n8.2 Translate step:\n\n    The STEPLIB DD card is as for the compile step.\n\n    The dataset referred to by the SYSIN DD card contains the ZCODE\noutput from the compile step. In the procedures, this is always the\ntemporary file &ZCODE.\n\n    The object module is written to the dataset defined by the SYSGO DD\ncard which must have DCB parameters acceptable to the linkage editor.\n\n    Translation information and diagnostics are written to the dataset\ndefined by the SYSPRINT DD card.\n\n\n8.3 Link edit step:\n\n    The dataset referred to by DDname SYSLIB defines a set of libraries\ncontaining modules which may be called by the ALGOL68C program,\nincluding the ALGOL68C runtime system.  The first library is defined by\nthe symbolic parameter &SYSLIB which also defines the STEPLIB of the\ncompile and translate steps, and is described above. The second library\nis S.FORTLIB, which contains modules for computing sine, cosine,\nexponential, etc. It is suggested that IBM FORTRAN double precision\nroutines are used with an interface module, a suitable example of which\nis to be found on the ALGOL68C distribution tape. Eventually suitable\nroutines will be provided as part of the ALGOL68C system.\n\n    If the module being linked had a named parent module, then that\nmodule will be included from the user's own library, which must be\nconcatenated to the system libraries.\n\n    SYSLMOD, SYSPRINT and SYSUT1 are the same as for any run of the\nlinkage editor, so should require no explanation.\n\n    The output from the translation step is contained in the dataset\nreferred to by the SYSLIN DD card. If a SYSIN DD card is supplied by the\nuser then the dataset it refers to will be concatenated to that referred\nto by the SYSLIN DD card. This can be used to provide linkage editor\ncontrol cards and thus pick up routines from specified libraries rather\nthan the defaults.\n\n\n8.4 Go step:\n\n    This is very simple. The only DD card supplied in the procedure is\nSYSPRINT, to which run-time error messages are written; other datasets\nmay be supplied from the calling job stream.\n\n\n8.5 Cross reference program:\n\n    The information written by the compiler to the dataset referred to\nby the DDNAME XREF can be processed to produce an identifier cross\nreference listing. The JCL procedure A68XREF is provided to run this\nprogram. Its parameters are similar to those of the compiler procedures.\nThe cross reference information from the compiler must be supplied on\nDDNAME FROM. The formatted listing is written to the dataset referred to\nby the DDNAME TO, and any diagnostics are sent to the dataset referred\nto by DDNAME SYSPRINT. For a normal run, no parameters or overriding DD\ncards need be specified.\n\n\n9. Testing the system\n---------------------\n\n    The data set A68LIB.TESTS contains a number of tests.  The members\nJOB1, JOB2, JOB3, JOB4 are jobs to run the tests.  The job cards of\nthese jobs will need modifying to suit the installation.  On a 370/165,\na cpu time of 75 seconds is sufficient to run each of the jobs.  The\nresults of the jobs may be compared with members RESULTS1, RESULTS2,\nRESULTS3, RESULTS4.\n\n\n10. Writing ALGOL68C programs\n-----------------------------\n\n    This will be covered more fully by the Users' Guide (in\npreparation).\n\n    Programs may be written using either 'case stropping' or\n'prefix-quote stropping' depending on how the system has been\nconstructed (7 above).\n\n    With case stropping, indicants and reserved words are written in\nupper case, and tags are written in lower case, e.g. BEGIN MODE FRED =\nSTRUCT(INT a); REAL b.\n\n    With prefix quote stropping, indicants and reserved words are\nwritten in upper case and are preceded by a single quote, tags are\nwritten in either case. For example 'BEGIN 'MODE 'FRED =\n'STRUCT('INT A); 'REAL B.\n\n    Note that if prefix quote stropping is used, the case of a letter is\nsignificant (but this is likely to change to provide compatibility with\ndot stropping).\n\n    In both cases, only letters are allowed in indicants.\n\n    It is intended that prefix-quote stropping should be superceded by\n(prefix) point stropping (which is identical to prefix-quote stropping\nexcept that a point is used instead of a single quote). For example,\n.BEGIN .MODE .FRED = .STRUCT(.INT A); .REAL B .  This stropping is the\nstandard accepted by IFIP WG 2.1.  With point stropping, the case of a\nletter is not significant.\n\n    The compiler reads a program heading from the parameter channel. The\nprogram heading on the parameter channel must be preceded by a single\n\"/\" which is used to separate run time options from parameter channel\ninput.  For example\n\n    // EXEC A68CLG,PARMC='/XREF USING USER FROM \"SYSENV(REAL)\"'\n\n(No run-time options are implemented yet.)\n\n    The program heading may also precede the program which is read from\nSYSIN.\n\n    The program heading may consist of any combination of\n\n    USING directive: this specifies to the compiler how the program\n                     segmentation is to be used (see 11 below).\n\n        example:  USING FRED FROM \"MYENV(FRED1)\"\n\n    TRACE directive: this is used for debugging the compiler. An integer\n                     must follow specifying the level of compiler trace.\n\n        example:  TRACE 63\n\n    KEY directive:   This is not useful at present. It must be followed\n                     by an integer.\n\n        example:  KEY 4\n\n    XREF directive:  This specifies that the compiler is to produce\n                     output on the data set specified by the XREF DD\n                     card for later processing by the crossreference\n                     program.\n\n        examples: XREF\n                  CROSSREF\n\n    NAME directive:  This allows a name to be given to the control\n                     section (CSECT) produced by the translator.  It\n                     also causes an external reference to be constructed\n                     when any daughter module is translated.  The name\n                     is specified as a string of up to eight characters\n                     that must form a legal OS CSECT name.\n\n        example:  NAME \"MODULE1\"\n\n    TITLE directive: This causes the title to be included as part of the\n                     compiler output to SYSPRINT to enable multiple\n                     compilations in the same job to be distinguished.\n\n        example:  TITLE this is a title it is syntactically a tag\n\n    STRICT directive: The intention of this is to give a warning message\n                     if any extensions from ALGOL 68 are used.\n\n        example:  STRICT\n\n    The words USING, FROM, TRACE, KEY, XREF, CROSSREF, NAME, TITLE and\nSTRICT must be stropped.\n\n\n    The program consists of a serial clause.\n\n\n11. Separate compilation\n------------------------\n\n    The language mechanism for supporting separate compilation is\ndescribed in the ALGOL68C Reference Manual section 5.5.5 ('handles'). It\nallows a program to be segmented in a tree-structured manner.  a\nsegmented program must be compiled from the root first (in order that\nthe environments are available in a tree-structured manner).  The\nenvironment produced by compiling a module which includes a 'handle' is\nwritten to the data set described by the DD card with the DDNAME ENVOUT.\nThis data set is most usefully a member of a partitioned data set so\nthat the perhaps many environments for a large program can be\nconveniently stored together.\n\n    When an inner (in the sense of block structuring) module is\ncompiled, all the environments for the more outer modules must be\navailable.  The most immediately outer environment is specified in a\nusing directive when the current module is compiled.  The more outer\nmodules are accessed by the previous using directives that were \"copied\"\nto the environment files when those modules were compiled. Thus the same\ninput DDnames must be available for all compilations of the various\nsegments of the program.\n\n    A USING directive has the following form:\n\n        USING handle FROM string\n\nwhere handle is the 'handle identification' (an indicant) and string is\na string denotation.  The string is the idf used for opening the file\ncontaining the previous environment.\n\n    This sounds very complicated, but is in fact very simple, especially\nwhen a pds is used for saving environments - see the example in 13\nbelow.\n\n\n12. Overlays\n------------\n\n        Separately compiled segments may be overlaid using the\nfacilities of OS/360 and its linkage editor.  However, overlaying must\nbe done with some care as it is possible for objects in the store that\nis being overlaid to be pointed at from somewhere else in the store.  It\nis difficult to describe formally when this condition could arise as it\nis highly dependent on the implementation of copying of items (which\ncould change from one version of the compiler to another).  In general,\nit will not be safe if\n\n        a) the object is yielded by the overlayable segment or the\n           object is assigned within the overlayable segment to a name\n           having a scope greater than that segment,\n\n   and  b) the object occurs within an overlayable segment and the\n           object is a STRING denotation or a routine text, or if it is\n           a row- or a structure-display, or it derives from one of\n           these (e.g. by ascription),\n\n   or   c) control is transferred between overlayable segments other\n           than by elaborating ENVIRON (e.g. a segment is entered by\n           elaborating ENVIRON, but return from a segment does not).\n\nExamples:\n\n        1) containing assignments:\n\n        PROC INT p;\n        ENVIRON ONE;\n\n        when the segment associated with the handle contains\n\n        p := INT:( ... );\n\n        such a segment cannot be safely overlaid within the scope of p.\n\n        2) yielding values:\n\n        PROC INT p = ENVIRON TWO;\n\n        The segment associated with the handle cannot be safely overlaid\n        within the scope of p.\n\n        Note that in\n\n        PROC p = INT: ENVIRON THREE;\n\n        the segment associated with the handle yields an INT value and,\n        other things being equal, may be overlaid safely within the\n        scope of p.\n\n        It is intended that, in future, overlays will be implemented\ncorrectly or that a message will be issued when any unsafe condition\narises.\n\n\n13. Example job using separate compilation and overlays\n-------------------------------------------------------\n\n\n//*\n//* PREALLOCATE DATA SETS\n//*\n// EXEC PGM=IEFBR14,REGION=8K,TIME=(,1)\n//A DD DSN=ABCD.ENV,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(1,1,1)),\n//      DCB=RECFM=VB\n//B DD DSN=ABCD.LIB,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(1,1,1))\n//*\n//* ROOT MODULE\n//*\n// EXEC A68CL,\n// ENVOUT='ABCD.ENV(A)',           ENVIRONMENT GENERATED\n// DISPL=OLD,NAMEL='ABCD.LIB(A)'   LOAD MODULE\n//A68.SYSIN DD *\nTITLE root segment  #title for compiler diagnostics#\nNAME \"A\"            #CSECT name for segment#\nprint(\"root\");\nENVIRON ONE;\nENVIRON TWO\n//*\n//* FIRST BRANCH\n//*\n// EXEC A68CL,\n// ENVOUT='ABCD.ENV(B)',           ENVIRONMENT GENERATED\n// DISPL=OLD,NAMEL='ABCD.LIB(B)'   LOAD MODULE\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR  TO ACCESS PREVIOUS ENVIRONMENT\n//A68.SYSIN DD *\nTITLE branch 1 NAME \"B\" USING ONE FROM \"ENVIN(A)\"\nprint(\"b\");\nSTRING s = ENVIRON THREE;\nprint(s)\n//*\n//* TWIG\n//*\n// EXEC A68CL,\n// DISPL=OLD,NAMEL='ABCD.LIB(C)'\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR\n//A68.SYSIN DD *\nUSING THREE FROM \"ENVIN(B)\"\n\" c \"\n//*\n//* SECOND BRANCH\n//*\n// EXEC A68CL,\n// DISPL=OLD,NAMEL='ABCD.LIB(D)',\n// PARMC='/USING TWO FROM \"ENVIN(A)\"'\n//A68.ENVIN DD DSN=ABCD.ENV,DISP=SHR\n//A68.SYSIN DD *\nprint(\"d\")\n//*\n//* LKED (OVERLAYING) AND EXECUTE\n//*\n// EXEC A68LG,ATTL=OVLY\n//LKED.SYSLIB DD\n//            DD\n//            DD DSN=ABCD.LIB,DISP=SHR\n//LKED.SYSIN DD *\n OVERLAY ONE\n INCLUDE SYSLIB(B,C)\n OVERLAY ONE\n INCLUDE SYSLIB(D)  NOTE ROOT IS AUTOMATICALLY LOADED\n\n\n14. Error messages\n------------------\n\n    The error messages from the compiler should be self explanatory, at\nleast with the help of the ALGOL68C Reference Manual to explain\ntechnical terms.  Occurrences of \"System error\" and \"Consult expert\"\nmessages should be reported to the ALGOL68C maintenance group (see 3\nabove).\n\n    Error messages from the translator should not occur frequently; the\nmost likely messages are \"program too large\", or \"segment exceeds 12k\"\nin which case the program should be further segmented (The translator\nwill not produce an object module occupying more than 12k because only 3\nbase registers are used.)  \"System error\" messages from the translator\nmay also occur, please report as above.\n\n    The messages from the linkage editor are described by IBM.\n\n    The run-time diagnostics need considerable improvement - this will\nhappen in due course.  Messages produced at run time include:\n\n    \"no storage for generator\"  a heap or local generator was elaborated\n                and insufficient storage was available.  Increase the\n                region size.  Note that the 'static' stack size is not\n                checked so that the static and dynamic stacks (or the\n                heap) may clash causing miscellaneous errors (but\n                usually abends 0C4, 0C5 or 0C1).\n\n                Note that, on the 360/370, the dynamic stack and the\n                heap are allocated from the same area of storage (the\n                high address end of the region).  Mixed use of the\n                heap and the dynamic stack can prevent storage on\n                the dynamic stack from being recovered.  The heap is\n                used for all HEAP generators and for dynamically\n                constructed strings (strictly, for the characters\n                contained within the string) and for OS data control\n                blocks.  The dynamic stack is used for array elements,\n                and for explicit LOC generators (but this does not\n                include sample-generators).  Thus '\u00e21:4\u00e4INT a' will\n                cause the elements of 'a' to be placed on the dynamic\n                stack, 'REF INT b = LOC INT' will cause 'b' to be\n                on the dynamic stack, but 'LOC INT c' will cause 'c' to\n                be on the static stack.\n\n                The following program will cause the dynamic stack\n                allocated for the elements of 'a' not to be recovered:\n\n                    BEGIN\n                       PROC p = VOID: BEGIN \u00e21:5\u00e4INT a; q END;\n                       PROC q = VOID: BEGIN HEAP INT b; SKIP END;\n                       p\n                    END\n\n    \"file ended\" this message is output by the default file mended\n                routine before it terminates the program.  The user has\n                attempted to read past the last character of the file.\n                Either do not read too far, or substitute a new file\n                mended routine.  N.B. a call of 'file ended' before\n                reading will not normally be useful as the file is not\n                ended until the user reads past the last line in the\n                file.  A useful technique is to assign a routine\n                delivering false and to check for file ended immediately\n                after reading, e.g.\n\n                   on file end(file, (REF FILE f)BOOL: FALSE);\n\n                           . . .\n\n                   read(c); IF NOT file ended(file)\n                            THEN  . . .\n\n                Alternatively, although perhaps less elegantly, a jump\n                from the file mended routine may be made, e.g.\n\n                   on file end(file,\n                               (REF FILE f)BOOL: (GOTO endfile; SKIP));\n\n                           . . .\n\n                   read(c)\n\n                           . . .\n\n                   endfile: . . .\n\n    \"integer out of range for ELEM ... \"  ELEM for string, bits, or\n                bytes has been called and the 'index' integer is out of\n                range, i.e. zero or negative, or too large.\n\n    \"obeying faulty program\" occurs if the part of a program that caused\n                a compiler error message is elaborated.\n\n    Other runtime error messages produced by the library should be\nself-explanatory.  The usual ABENDs may of course occur.  In some future\nrelease, these will be trapped with STAE and SPIE macros to produce a\nmore meaningful diagnostic.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C05": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x01[\\x01[\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 347, "newlines": 347, "modlines": 0, "user": "ALGOL68"}, "text": "//ALGOL68 JOB (,),'CHANGE TO SUIT INSTALLATION'\n//*\n//* 1. Make the job card suitable for your installation.\n//*\n//* 2.1 This job constructs the ALGOL68C system on the following data\n//*     sets:\n//*                A68LIB.OBJ   object module data set\n//*                A68LIB.MOD   load module data set\n//*                A68LIB.SYS   initialisation and library environments\n//*                A68LIB.PROCS catalogued procedures\n//*                A68LIB.TESTS tests\n//*\n//*     The blocksizes for these data sets are optimised for 3330 discs\n//*     and should be changed if other discs are used.  Similarly,\n//*     the space allocations will need changing for other discs.\n//*     These changes should be made in the first step, \"X\", of the\n//*     job.\n//*\n//* 2.2 If you wish to change the names of these data sets, change only\n//*     the dsnames in the first step, \"X\".  The other steps obtain\n//*     the dsnames by using JCL refer-back, e.g. DSNAME=*.X.OBJ .\n//*     The data sets are allocated as (NEW,PASS) in the first step\n//*     and are kept in the last step, \"KEEP\", only if the return codes\n//*     from the previously executed steps are 4 or less.  Thus, if\n//*     the job fails for some reason, correct the reason for the\n//*     failure, and run the complete job again.\n//*\n//* 2.3 If you wish to have the data sets catalogued, change the DISP\n//*     in the last step from (OLD,KEEP) to (OLD,CATLG).\n//*\n//* 2.4 If you already have an ALGOL68C system with data sets of\n//*     the same names as those used in the job, you should either\n//*     make a new system with different data set names (2.2 above)\n//*     or change the data set names in the first step to be\n//*     the temporary data set names\n//*\n//*                 &&OBJ\n//*                 &&MOD\n//*                 &&SYS\n//*                 &&PROCS\n//*                 &&TESTS\n//*\n//*     and remove the CONDX parameter from the penultimate step,\n//*     \"COPY\".  This will cause the system to be constructed on the\n//*     temporary data sets, then to be copied (with the replace\n//*     option) to the existing data sets. Because the replace option\n//*     is used, the default names, e.g. A68C, Z370, will be replaced\n//*     by aliases describing the new system. Execution of the COPY\n//*     step will cause the last step, \"KEEP\", to be omitted, and so\n//*     the temporary data sets will be correctly deleted at the end of\n//*     the job.\n//*\n//*     N.B. Ensure that the existing data sets have sufficient space\n//*     and directory blocks to receive the new members.  See the first\n//*     step, \"X\", for estimates of requirements.  Note also that all\n//*     the data sets must exist before the job is run.\n//*\n//* 3.  The data set \"S.FORTLIB\" (see the JCL procedures) is not\n//*     distributed as it contains the proprietry FORTRAN routines used\n//*     for sin, cos, tan, arcsin, arccos, arctan, exp, sqrt.  It is up\n//*     to the installation to arrange linkage to a suitable set of\n//*     routines.\n//*\n//*     ALGOL68C versions of these routines are being developed and\n//*     will be distributed with future releases of the system.\n//*\n//* 4.  Stropping:  The standard job constructs an ALGOL68C system\n//*     that supports \"case stropping\" (that is, tags are written\n//*     with lower case letters and digits, and indicants are written\n//*     with upper case letters).  The alternative, \"prefix-quote\n//*     stropping\", has tags written with upper or lower case letters\n//*     or digits and indicants must be immediately preceded by a\n//*     single quote (apostrophe) and are written in upper case\n//*     letters.  TO construct a system for prefix-quote stropping,\n//*     change the default value for the \"Q\" symbolic parameter in\n//*     the \"P\" procedure (unpack to pds) from null to Q (i.e. instead\n//*     of \"Q=,\", use \"Q=Q,\") and in the step LKA68C to link-edit the\n//*     compiler, change \"INCLUDE(EBCDIC)\" to \"INCLUDE(QEBCDIC)\".\n//*\n//*\n//* PREALLOCATE DATA SETS (PUTS ON PASSED DATA SET LIST, KEEP AT END)\n//*\n//X EXEC PGM=IEFBR14,  STANDARD IBM \"DO NOTHING\" PROGRAM\n//             REGION=6K,TIME=(,1)\n//* ========== OBJECT MODULE DATA SET =============\n//OBJ DD DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480),DSN=A68LIB.OBJ, ********* ********\n//     UNIT=SYSDA,SPACE=(TRK,(40,5,8)),DISP=(,PASS)\n//* ========== LOAD MODULE DATA SET =============\n//MOD DD DSN=A68LIB.MOD, ********************************************** ********\n//     DISP=(,PASS),SPACE=(CYL,(3,1,8)),UNIT=SYSDA,DCB=RECFM=U\n//* ========== INITIALISATION AND ENVIRONMENTS =======\n//SYS DD DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),DSN=A68LIB.SYS, ******** ********\n//     SPACE=(TRK,(4,1,2)),UNIT=SYSDA,DISP=(,PASS)\n//* ========== PROCEDURES =====================\n//PROCS DD DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480),DSN=A68LIB.PROCS, ***** ********\n//     SPACE=(TRK,(1,1,2)),UNIT=SYSDA,DISP=(,PASS)\n//* ========== TESTS =================================================\n//TESTS DD DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),DSN=A68LIB.TESTS, **** ********\n//       SPACE=(TRK,(35,5,4)),UNIT=SYSDA,DISP=(,PASS)\n//*\n//*\n//* COPY FB80 DATA SET\n//*\n//F PROC N=,                  DATA SET NAME\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=IEBGENER,REGION=80K\n//SYSPRINT DD SYSOUT=A\n//SYSIN DD DUMMY\n//SYSUT1 DD UNIT=&TAPE,VOL=(,RETAIN,SER=&SER),\n//          LABEL=(&L,&LABELS),DISP=OLD,DSN=A68C&L,\n//          DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN&TRAN)\n//SYSUT2 DD UNIT=SYSDA,\n//          DISP=(OLD,PASS),DSN=&N,\n//          SPACE=(TRK,(1,1)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n// PEND\n//*\n//* UNPACK TO PDS\n//*\n//P PROC N='*.X.SYS',         DISC DSNAME\n//       Q=,                  'Q' FOR PREFIX QUOTE STROPPING ********** ********\n//       LIB='*.X.MOD',       LOAD MODULE LIBRARY\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=PACK,REGION=120K,PARM='/UNPACK,&Q'\n//STEPLIB DD DISP=(SHR,PASS),DSN=&LIB\n//SYSPRINT DD SYSOUT=A\n//FROM DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,\n//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)\n//UNPACKED DD DISP=(OLD,PASS),DSN=&N\n// PEND\n//*\n//* UPDTE TO PDS\n//*\n//C PROC N='*.X.OBJ',         OBJECT MODULE LIBRARY (TEMPORARY)\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=IEBUPDTE,REGION=40K,PARM=NEW\n//SYSPRINT DD DUMMY\n//SYSIN DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,\n//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)\n//SYSUT2 DD DISP=(OLD,PASS),DSN=&N\n// PEND\n//*\n//* LKED\n//*\n//L PROC N='*.X.MOD',                LOAD MODULE DATA SET\n//       O='*.X.OBJ',                OBJECT MODULE DATA SET\n//       LIB='*.SYSLMOD,VOL=REF=*.SYSLMOD', SYSLIB DATA SET\n//       B=4096,                     SYSLMOD BLOCKSIZE **************** ********\n//       X='RENT,CALL'               OR 'RENT,NCAL' OR 'OVLY,CALL'\n// EXEC PGM=IEWLF880,REGION=120K,\n//  PARM='SIZE=(999999,8K),LIST,NOMAP,NOXREF,LET,&X,DCBS'\n//SYSLIN   DD DDNAME=SYSIN\n//SYSLMOD  DD DISP=(OLD,PASS),DCB=BLKSIZE=&B,DSN=&N\n//SYSPRINT DD SYSOUT=A\n//SYSUT1   DD UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),SPACE=(TRK,(5,5))\n//SYSLIB   DD DISP=(SHR,PASS),DSN=&LIB\n//OBJ DD DISP=(SHR,PASS),DSN=&O\n// PEND\n//*\n//* IEBCOPY\n//*\n//COPY PROC CONDX='(4,LT)'\n//COPY EXEC PGM=IEBCOPY,REGION=96K,COND=((4,LT),&CONDX)\n//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(1,1))\n//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(1,1))\n//SYSPRINT DD SYSOUT=A\n// PEND\n//MISCOBJ EXEC C,L=7  LIBRARY AND XREF OBJECT MODULES\n//*\n//* MAKE LIBRARY\n//*\n//L1 EXEC L,X='RENT,NCAL'\n CHANGE ZLIB($LIB127)\n INCLUDE OBJ($LIB127)\n ENTRY $A68INIT\n NAME $LIB127(R)\n INCLUDE OBJ($MCH107)\n NAME $MCH107(R)\n INCLUDE OBJ($BAS107)\n NAME $BAS107(R)\n INCLUDE OBJ($REA107)\n NAME $REA107(R)\n INCLUDE OBJ($CPX107)\n NAME $CPX107(R)\n INCLUDE OBJ(RAND)\n ALIAS $$$$0073 GETRANDOM\n ALIAS $$$$0074 SAVERANDOM\n ALIAS $$$$0075 CHANGERANDOM\n NAME $$$$0076(R) RANDOM\n INCLUDE OBJ(FORT)\n ALIAS $$$$0041 COS\n ALIAS $$$$0042 TAN\n ALIAS $$$$0043 ARCSIN\n ALIAS $$$$0044 ARCCOS\n ALIAS $$$$0045 ARCTAN\n ALIAS $$$$0046 LN\n ALIAS $$$$0047 EXP\n ALIAS $$$$0048 SQRT\n NAME $$$$0040(R) SIN\n//*\n//* MAKE CROSSREFERENCE PROGRAM\n//*\n//L2 EXEC L\n INCLUDE OBJ(XREF)\n ENTRY $A68INIT\n NAME XREF(R)\n//PACKOBJ EXEC C,L=8 OBJECT MODULES FOR PACK/UNPACK PROGRAM\n//*\n//* MAKE PACK/UNPACK\n//*\n//LPACK EXEC L\n INCLUDE OBJ(PACK,PACKCEBC)\n ENTRY $A68INIT\n NAME PACK(R)\n//A68COBJ EXEC C,L=9       COMPILER OBJECT MODULES\n//*\n//* MAKE COMPILER\n//*\n//LA68C EXEC L,X='OVLY,CALL'\n INCLUDE OBJ(SYS,M1,S1)\n OVERLAY ONE\n INCLUDE OBJ(Y1)\n INCLUDE OBJ(EBCDIC)     QEBCDIC FOR PREFIX QUOTE STROPPING *********** ********\n INCLUDE OBJ(N1,T1,Z1,R1,I1,L1,K1,P1,Q1)\n OVERLAY ONE\n INCLUDE OBJ(D2)\n OVERLAY TWO\n INCLUDE OBJ(R2,M2,P2,T2,E2,I2,S2,X2,B2)\n OVERLAY TWO\n INCLUDE OBJ(A3)\n OVERLAY THREE\n INCLUDE OBJ(P3,M3,Q3,G3,O3,R3,E3,B3,U3,F3,S3,C3,K3,D3)\n OVERLAY THREE\n INCLUDE OBJ(D4)\n ENTRY $A68INIT\n ALIAS A68C\n NAME A68C247(R)\n//Z370OBJ EXEC C,L=10           Z370 TRANSLATOR OBJECT MODULES\n//*\n//* MAKE TRANSLATOR\n//*\n//LZ370 EXEC L,X='OVLY,CALL'\n INCLUDE OBJ(SYS,A)\n OVERLAY ONE\n INCLUDE OBJ(B,R,G,Q)\n OVERLAY ONE\n INCLUDE OBJ(C,P)\n ENTRY $A68INIT\n ALIAS Z370\n NAME Z370119(R)\n//PROCLIB EXEC C,L=11,N='*.X.PROCS' JCL CATALOGUED PROCEDURES\n//TESTS EXEC P,L=12,N='*.X.TESTS'   TESTS\n//TESTJOB EXEC P,L=13,N='*.X.TESTS',Q=    TEST JOBS AND RESULTS\n//INIT EXEC P,L=14      COMPILER INITIALISATION FILES\n//ULIBENV EXEC P,L=15  LIBRARY ENVIRONMENT FILES\n//*\n//* ADD ALIASES\n//*\n// EXEC ASMFCLG\n//ASM.SYSIN DD *\n*\n* JIFFY PROGRAM TO MAKE ALIASES\n*\n USING *,12\n LR 12,15\n OPEN (DCB,(OUTPUT))\n LA 2,NAMELIST\n BAL 3,ALIAS\n BAL 3,ALIAS\n BAL 3,ALIAS\n CLOSE DCB\n SR 15,15 ALWAYS YIELD ZERO RETURN CODE\n SVC 3\n*\nALIAS DS 0H\n MVC NAME,0(2)\n BLDL DCB,BLDLLIST\n MVC NAME,8(2)\n OI NAME+11,X'80' SET ALIAS FLAG\n STOW DCB,NAME,A\n LA 2,16(2) TO NEXT\n BR 3\n*\nNAMELIST DC CL8'INIT370',CL8'INIT'\n DC CL8'CMPX107',CL8'USER107'\n DC CL8'CMPX107',CL8'USER'\n*\nBLDLLIST DC H'1' ONE ENTRY\n DC H'12' LENGTH 12\nNAME DC CL8' '\n DC AL3(0) TTR\n DC AL1(0) C\n*\nDCB DCB DDNAME=DD,DSORG=PO,MACRF=(W)\n END\n//GO.DD DD DISP=(OLD,PASS),DSN=*.X.SYS\n//*\n//* OPTIONAL STEP TO COPY FROM TEMPORARY DATA SETS TO EXISTING\n//* ALGOL68C SYSTEM DATA SETS.\n//* N.B. BEFORE INCLUDING THIS STEP BY ALTERING THE COND, MAKE\n//* SURE THAT THE COMMENTS AT THE START OF THIS JOB ARE UNDERSTOOD!\n//*\n//COPY EXEC COPY,\n//          CONDX='(0,NE),(0,EQ)', OR OMIT CARD *********************** ********\n//          REGION=96K\n//I1 DD DSN=*.X.OBJ,DISP=(OLD,DELETE)\n//I2 DD DSN=*.X.MOD,DISP=(OLD,DELETE)\n//I3 DD DSN=*.X.SYS,DISP=(OLD,DELETE)\n//I4 DD DSN=*.X.PROCS,DISP=(OLD,DELETE)\n//I5 DD DSN=*.X.TESTS,DISP=(OLD,DELETE)\n//O1 DD DSN=A68LIB.OBJ,DISP=(OLD,KEEP)\n//O2 DD DSN=A68LIB.MOD,DISP=(OLD,KEEP)\n//O3 DD DSN=A68LIB.SYS,DISP=(OLD,KEEP)\n//O4 DD DSN=A68LIB.PROCS,DISP=(OLD,KEEP)\n//O5 DD DSN=A68LIB.TESTS,DISP=(OLD,KEEP)\n COPY I=((I1,R)),O=O1\n COPY I=((I2,R)),O=O2\n COPY I=((I3,R)),O=O3\n COPY I=((I4,R)),O=O4\n COPY I=((I5,R)),O=O5\n//*\n//* KEEP THE DATA SETS\n//* THIS STEP IS SKIPPED IF THE ABOVE COPY STEP IS RUN\n//*\n// EXEC PGM=IEFBR14,  STANDARD IBM \"DO NOTHING\" PROGRAM\n//             REGION=6K,TIME=(,1),\n//             COND=((4,LT),(0,NE,COPY.COPY),(0,EQ,COPY.COPY))\n//OBJ DD DSN=*.X.OBJ,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)\n//MOD DD DSN=*.X.MOD,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)\n//SYS DD DSN=*.X.SYS,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)\n//PROCS DD DSN=*.X.PROCS,\n//        DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)\n//TESTS DD DSN=*.X.TESTS,\n//        DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C06": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00f\\x00f\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "ALGOL68"}, "text": "//ALGOL68C JOB (,),'UNDUMP FILES'\n//JOBLIB DD DSN=A68LIB.MOD,DISP=SHR assumed to contain pack/unpack pgm\n//*\n//* 1.  Make the job card suitable for your installation.\n//*\n//* 2.  This job copies all the material from the tape to disc data\n//*     sets with ds names having AL68 as the first qualifier.\n//*     It does not construct an ALGOL68C system - this is done by the\n//*     other undump job on the tape.\n//*\n//* 3.  This job assumes that the pack/unpack program is available\n//*     from A68LIB.MOD (JOBLIB DD card).\n//*\n//* 4.  The block sizes and space allocations are suitable for 3330\n//*     discs.\n//*\n//* 5.  The dispositions for the data sets may need changing from\n//*     NEW,KEEP to NEW,CATLG depending on the installation's\n//*     requirements.\n//*\n//*\n//*\n//* COPY FB80 DATA SET\n//*\n//F PROC N=,                  DATA SET NAME\n//       S='1,1',             SPACE ALLOCATION\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=IEBGENER,REGION=80K\n//SYSPRINT DD SYSOUT=A\n//SYSIN DD DUMMY\n//SYSUT1 DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n//          LABEL=(&L,&LAB),DISP=OLD,DSN=A68C&L,\n//          DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN&TRAN)\n//SYSUT2 DD UNIT=SYSDA,DISP=(NEW,KEEP),DSN=&N,\n//          SPACE=(TRK,(&S)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n// PEND\n//*\n//* UNPACK TO PDS\n//*\n//P PROC N=,                  DISC DSNAME\n//       S='1,1',             SPACE ALLOCATION\n//       Q=,                  'QUOTE' FOR PREFIX QUOTE STROPPING ****** ********\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=PACK,REGION=120K,PARM='/UNPACK,&Q'\n//SYSPRINT DD SYSOUT=A\n//FROM DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,\n//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)\n//UNPACKED DD UNIT=SYSDA,DISP=(NEW,KEEP),DSN=&N,\n//            SPACE=(TRK,(&S))\n// PEND\n//*\n//* UPDTE TO PDS\n//*\n//C PROC N=,                  DISC DSNAME\n//       S='1,1',             SPACE ALLOCATION\n//       L=,                  TAPE FILE NUMBER\n//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME\n//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE\n//       BLKSIZE=3200,       TAPE BLOCKSIZE\n//       TRAN=''        7TRACK RECORDING TECHNIQUE\n// EXEC PGM=IEBUPDTE,REGION=40K,PARM=NEW\n//SYSPRINT DD DUMMY\n//SYSIN DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),\n//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,\n//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)\n//SYSUT2 DD UNIT=SYSDA,DISP=(NEW,KEEP),DSN=&N,\n//          SPACE=(TRK,(&S)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n// PEND\n//*\n//CHARSET EXEC F,L=1,N='AL68.CHARSET',S='1,1' CHARACTER SET\n//DISTRJOB EXEC F,L=3,N='AL68.TAPEJOB',S='1,1' JOB THAT WROTE TAPE\n//INST360 EXEC F,L=4,N='AL68.INST360',S='1,1'\n//UNDUMP EXEC F,L=5,N='AL68.DISTRJOB.UA68C00',S='4,1' CONSTRUCT JOB\n//UNDUMP1 EXEC F,L=6,N='AL68.DISTRJOB.VA68C00',S='4,1' UNDUMP FILES\n//MISCOBJ EXEC C,L=7,N='AL68.LIBOBJ',S='4,4,4' LIB & XREF OBJECT\n//PACKOBJ EXEC C,L=8,N='AL68.PACKOBJ',S='1,1,1' PACK/UNPACK OBJECT\n//A68COBJ EXEC C,L=9,N='AL68.A68C.OBJ247',S='32,8,8' COMPILER OBJ\n//Z370OBJ EXEC C,L=10,N='AL68.Z370.OBJ119',S='8,4,2' Z370 OBJECT\n//PROCLIB EXEC C,L=11,N='AL68.PROCLIB',S='1,1,1' JCL PROCEDURES\n//TESTS EXEC P,L=12,N='AL68.TESTS',S='20,1,4'   TESTS\n//TESTJOB EXEC P,L=13,N='AL68.TESTJOB',S='20,1,4',Q=   TEST JOBS ETC\n//INIT EXEC P,L=14,N='AL68.INIT',S='1,1,1' COMPILER INIT FILES\n//ULIBENV EXEC P,L=15,N='AL68.USERLIB.ENV107',S='4,1,4' LIB ENV\n//ZLIBTXT EXEC C,L=16,N='AL68.ZLIB.TXT127',S='4,2,2'\n//ULIBTXT EXEC P,L=17,N='AL68.USERLIB.TXT107',S='4,2,2'\n//XREFTXT EXEC P,L=18,N='AL68.XREF.SOURCE',S='1,1,1'\n//PACKTXT EXEC P,L=19,N='AL68.PACKTXT',S='1,1,1' SRC OF PACK/UNPACK\n//CHANGES EXEC F,L=20,N='AL68.CHANGES',S='1,1' DESCRIPTION OF CHANGES\n//BUGS EXEC F,L=21,N='AL68.BUGS',S='1,1' BUG LIST\n//UNIMPLEM EXEC F,L=22,N='AL68.UNIMPLEM',S='1,1'\n//DIFFS EXEC F,L=23,N='AL68.DIFFS',S='1,1' DIFFERENCES FROM ALGOL 68\n//PACKDOC EXEC F,L=24,N='AL68.PACKDOC',S='1,1' INFO FOR PACK/UNPACK\n//CKJOBS EXEC C,L=25,N='AL68.MAKE.JOBS',S='2,1,4' COMPILE COMPILER\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A68C07": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x03J\\x03J\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 842, "newlines": 842, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C08": {"ttr": 2050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x01\\x10\\x01\\x10\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 272, "newlines": 272, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C09": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x10\\xed\\x10\\xed\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 4333, "newlines": 4333, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C10": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x03\\xbe\\x03\\xbe\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 958, "newlines": 958, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C11": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\xb4\\x00\\xb4\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "ALGOL68"}, "text": "./       ADD          NAME=A68C\n//A68C    PROC REGC=150K,SPACEC='4,4',PRINTC='SYSOUT=C',\n//             MINC=,SECC=20,CONDC=,PARMC=,SYSC=,\n//             SYSLIB='A68LIB.MOD',ENVOUT=NULLFILE,\n//             IDSN='A68LIB.SYS',SYSI=,SDSN='A68LIB.SYS',\n//             REGT=130K,PRINTT='SYSOUT=C',\n//             MINT=,SECT=20,CONDT='4,LT,A68',PARMT=,SYST=,\n//             DISPT='(MOD,PASS),SPACE=(TRK,(8,4))'\n//*\n//A68     EXEC PGM=A68C&SYSC,REGION=&REGC,TIME=(&MINC,&SECC),\n//             COND=(&CONDC),\n// PARM='&PARMC'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//INIT     DD  DSN=&IDSN(INIT&SYSI),DISP=SHR\n//SYSENV   DD  DSN=&SDSN,DISP=SHR\n//CODE     DD  DSN=&CODE,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2498,LRECL=136,RECFM=VB),\n//             SPACE=(TRK,(&SPACEC),RLSE),DISP=(MOD,PASS)\n//ENVOUT   DD  DSN=&ENVOUT,DISP=OLD\n//SYSPRINT DD  &PRINTC\n//*\n//TRAN    EXEC PGM=Z370&SYST,REGION=&REGT,TIME=(&MINT,&SECT),\n//             COND=(&CONDT),\n// PARM='&PARMT'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//SYSIN    DD  DSN=&CODE,DISP=(OLD,DELETE)\n//SYSPRINT DD  &PRINTT\n//SYSGO    DD  DSN=&LOADSET,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2480,LRECL=80,RECFM=FB),\n//             DISP=&DISPT\n//*\n./       ADD          NAME=A68CL\n//A68CL   PROC REGC=150K,SPACEC='4,4',PRINTC='SYSOUT=C',\n//             MINC=,SECC=20,CONDC=,PARMC=,SYSC=,\n//             SYSLIB='A68LIB.MOD',ENVOUT=NULLFILE,\n//             IDSN='A68LIB.SYS',SYSI=,SDSN='A68LIB.SYS',\n//             REGT=130K,PRINTT='SYSOUT=C',\n//             MINT=,SECT=20,CONDT='4,LT,A68',PARMT=,SYST=,\n//             DISPT='(MOD,PASS),SPACE=(TRK,(8,4))',\n//             REGL=98K,PRINTL='SYSOUT=C',BLKL=4096,\n//             CONDL='(4,LT,A68),(4,LT,TRAN)',NAMEL='&GOSET(GO)',\n//             SIZEL='(999999,8K)',LISTL=LIST,MAPL=NOMAP,\n//             XREFL=NOXREF,LETL=LET,ATTL=,CAL=NCAL,DCBL=DCBS,\n//             MINL=,SECL=20,TRKS='16,4',\n//             DISPL='(NEW,PASS),SPACE=(TRK,(4,4,4),RLSE)'\n//*\n//A68     EXEC PGM=A68C&SYSC,REGION=&REGC,TIME=(&MINC,&SECC),\n//             COND=(&CONDC),\n// PARM='&PARMC'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//INIT     DD  DSN=&IDSN(INIT&SYSI),DISP=SHR\n//SYSENV   DD  DSN=&SDSN,DISP=SHR\n//CODE     DD  DSN=&CODE,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2498,LRECL=136,RECFM=VB),\n//             SPACE=(TRK,(&SPACEC),RLSE),DISP=(MOD,PASS)\n//ENVOUT   DD  DSN=&ENVOUT,DISP=OLD\n//SYSPRINT DD  &PRINTC\n//*\n//TRAN    EXEC PGM=Z370&SYST,REGION=&REGT,TIME=(&MINT,&SECT),\n//             COND=(&CONDT),\n// PARM='&PARMT'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//SYSIN    DD  DSN=&CODE,DISP=(OLD,DELETE)\n//SYSPRINT DD  &PRINTT\n//SYSGO    DD  DSN=&LOADSET,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2480,LRECL=80,RECFM=FB),\n//             DISP=&DISPT\n//*\n//LKED    EXEC PGM=IEWL,REGION=&REGL,TIME=(&MINL,&SECL),\n//             COND=(&CONDL),\n// PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL'\n//SYSLIB   DD  DSN=&SYSLIB,DISP=SHR\n//         DD  DSN=S.FORTLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&NAMEL,UNIT=SYSDA,\n//             DISP=&DISPL,\n//             DCB=BLKSIZE=&BLKL\n//SYSPRINT DD  &PRINTL\n//SYSLIN   DD  DSN=&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(&TRKS))\n//*\n./       ADD          NAME=A68CLG\n//A68CLG  PROC REGC=150K,SPACEC='4,4',PRINTC='SYSOUT=C',\n//             MINC=,SECC=20,CONDC=,PARMC=,SYSC=,\n//             SYSLIB='A68LIB.MOD',ENVOUT=NULLFILE,\n//             IDSN='A68LIB.SYS',SYSI=,SDSN='A68LIB.SYS',\n//             REGT=130K,PRINTT='SYSOUT=C',\n//             MINT=,SECT=20,CONDT='4,LT,A68',PARMT=,SYST=,\n//             DISPT='(MOD,PASS),SPACE=(TRK,(8,4))',\n//             REGL=98K,PRINTL='SYSOUT=C',BLKL=4096,\n//             CONDL='(4,LT,A68),(4,LT,TRAN)',NAMEL='&GOSET(GO)',\n//             SIZEL='(999999,8K)',LISTL=LIST,MAPL=NOMAP,\n//             XREFL=NOXREF,LETL=LET,ATTL=,CAL=CALL,DCBL=DCBS,\n//             MINL=,SECL=20,TRKS='16,4',\n//             DISPL='(NEW,PASS),SPACE=(TRK,(4,4,4),RLSE)',\n//             REGG=120K,PRINTG='SYSOUT=A',PARMG='',MING=1439,\n//             SECG=,CONDG='(4,LT,A68),(4,LT,TRAN),(4,LT,LKED)'\n//*\n//A68     EXEC PGM=A68C&SYSC,REGION=&REGC,TIME=(&MINC,&SECC),\n//             COND=(&CONDC),\n// PARM='&PARMC'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//INIT     DD  DSN=&IDSN(INIT&SYSI),DISP=SHR\n//SYSENV   DD  DSN=&SDSN,DISP=SHR\n//CODE     DD  DSN=&CODE,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2498,LRECL=136,RECFM=VB),\n//             SPACE=(TRK,(&SPACEC),RLSE),DISP=(MOD,PASS)\n//ENVOUT   DD  DSN=&ENVOUT,DISP=OLD\n//SYSPRINT DD  &PRINTC\n//*\n//TRAN    EXEC PGM=Z370&SYST,REGION=&REGT,TIME=(&MINT,&SECT),\n//             COND=(&CONDT),\n// PARM='&PARMT'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//SYSIN    DD  DSN=&CODE,DISP=(OLD,DELETE)\n//SYSPRINT DD  &PRINTT\n//SYSGO    DD  DSN=&LOADSET,UNIT=SYSDA,\n//             DCB=(BLKSIZE=2480,LRECL=80,RECFM=FB),\n//             DISP=&DISPT\n//*\n//LKED    EXEC PGM=IEWL,REGION=&REGL,TIME=(&MINL,&SECL),\n//             COND=(&CONDL),\n// PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL'\n//SYSLIB   DD  DSN=&SYSLIB,DISP=SHR\n//         DD  DSN=S.FORTLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&NAMEL,UNIT=SYSDA,\n//             DISP=&DISPL,\n//             DCB=BLKSIZE=&BLKL\n//SYSPRINT DD  &PRINTL\n//SYSLIN   DD  DSN=&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(&TRKS))\n//*\n//GO      EXEC PGM=*.LKED.SYSLMOD,REGION=&REGG,\n//             TIME=(&MING,&SECG),\n//             COND=(&CONDG),\n// PARM='&PARMG'\n//SYSPRINT DD  &PRINTG\n//*\n./       ADD          NAME=A68LG\n//A68LG   PROC REGL=98K,PRINTL='SYSOUT=C',BLKL=4096,CONDL=,\n//             SYSLIB='A68LIB.MOD',\n//             NAMEL='&GOSET(GO)',SIZEL='(999999,8K)',LISTL=LIST,\n//             MAPL=NOMAP,XREFL=NOXREF,LETL=LET,ATTL=,CAL=CALL,\n//             DCBL=DCBS,MINL=,SECL=20,TRKS='16,4',\n//             DISPL='(NEW,PASS),SPACE=(TRK,(4,4,4),RLSE)',\n//             REGG=120K,PRINTG='SYSOUT=A',PARMG='',MING=1439,\n//             SECG=,CONDG='(4,LT,LKED)'\n//*\n//LKED    EXEC PGM=IEWL,REGION=&REGL,TIME=(&MINL,&SECL),\n//             COND=(&CONDL),\n// PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL'\n//SYSLIB   DD  DSN=&SYSLIB,DISP=SHR\n//         DD  DSN=S.FORTLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&NAMEL,UNIT=SYSDA,\n//             DISP=&DISPL,\n//             DCB=BLKSIZE=&BLKL\n//SYSPRINT DD  &PRINTL\n//SYSLIN   DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(&TRKS))\n//*\n//GO      EXEC PGM=*.LKED.SYSLMOD,REGION=&REGG,\n//             TIME=(&MING,&SECG),\n//             COND=(&CONDG),\n// PARM='&PARMG'\n//SYSPRINT DD  &PRINTG\n//*\n./       ADD          NAME=A68XREF\n//A68XREF PROC SYSX=,REGX=120K,MINX=,SECX=1439,CONDX=,\n//             PARMX=,SYSLIB='A68LIB.MOD',\n//             PRINTX='SYSOUT=C',TO='SYSOUT=A'\n//*\n//XREF    EXEC PGM=XREF&SYSX,REGION=&REGX,TIME=(&MINX,&SECX),\n//             COND=(&CONDX),\n// PARM='&PARMX'\n//STEPLIB  DD  DSN=&SYSLIB,DISP=SHR\n//SYSPRINT DD  &PRINTX\n//TO       DD  &TO\n//*\n./       ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A68C12": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x05\\x88\\x05\\x88\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 1416, "newlines": 1416, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C13": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x08\\x0e\\x08\\x0e\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 2062, "newlines": 2062, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C14": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\\\\\x00\\\\\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C15": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x01a\\x01a\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 353, "newlines": 353, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C16": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x0b\\x1c\\x0b\\x1c\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 2844, "newlines": 2844, "modlines": 0, "user": "ALGOL68"}, "text": "./       ADD          NAME=BCRMACS\n         MACRO\n&L       BHR   &R\n&L       BCR   2,&R\n         MEND\n         MACRO\n&L       BLR   &R\n&L       BCR   4,&R\n         MEND\n         MACRO\n&L       BER   &R\n&L       BCR   8,&R\n         MEND\n         MACRO\n&L       BNHR  &R\n&L       BCR   13,&R\n         MEND\n         MACRO\n&L       BNLR  &R\n&L       BCR   11,&R\n         MEND\n         MACRO\n&L       BNER  &R\n&L       BCR   7,&R\n         MEND\n         MACRO\n&L       BOR   &R\n&L       BCR   1,&R\n         MEND\n         MACRO\n&L       BPR   &R\n&L       BCR   2,&R\n         MEND\n         MACRO\n&L       BMR   &R\n&L       BCR   4,&R\n         MEND\n         MACRO\n&L       BNPR  &R\n&L       BCR   13,&R\n         MEND\n         MACRO\n&L       BNMR  &R\n&L       BCR   11,&R\n         MEND\n         MACRO\n&L       BNZR  &R\n&L       BCR   7,&R\n         MEND\n         MACRO\n&L       BZR   &R\n&L       BCR   8,&R\n         MEND\n         MACRO\n&L       BNOR  &R\n&L       BCR   14,&R\n         MEND\n./       ADD          NAME=FORT\n************************************************************\n*                                                          *\n*        FORTRAN  INTERFACE  FOR ALGOL68C                  *\n*                                                          *\n************************************************************\n*\n         MACRO\n         $FORTRAN &NAME,&N\n         $ENTRYF &N\n         LA    R0,ARG1            arg address\n         ST    R0,0(NEWP)          set up argument list\n         MVI   0(NEWP),X'80'       mark end of list (redundant?)\n         LR    WSA,R1              save link\n         LR    R1,NEWP             argument list pointer\n         L     ENTRY,=V(&NAME)\n         DROP  ENTRY\n         BALR  LINK,ENTRY          FORTRAN call\n         LDR   FRESULT,0           result to ALGOL68C register\n         BR    WSA\n         MEND\n*\n*\n*\n*\n$FORT  CSECT\n         $FORTRAN DSIN,40\n         $FORTRAN DCOS,41\n         $FORTRAN DTAN,42\n         $FORTRAN DARSIN,43\n         $FORTRAN DARCOS,44\n         $FORTRAN DATAN,45\n         $FORTRAN DLOG,46\n         $FORTRAN DEXP,47\n         $FORTRAN DSQRT,48\n*\n         LTORG\n*\n         $REGDEF\n         $FRAME\n         $GLOBAL\n*\n         END\n./       ADD          NAME=MACS\n         MACRO\n         $VERSION\n         GBLC  &VERSION\n         MNOTE *,'** assembling ZLIB version &VERSION **'\n         MEND\n*\n         MACRO\n         $REGDEF\n*\n*\n*\n***************************************************\n*                                                 *\n*                                                 *\n*        Register Usage Conventions               *\n*                                                 *\n*                                                 *\n*   After   ENTRY      ENTRYF      IENTRY         *\n*                                                 *\n*  In use   R2 PP      ENTRY regs  ENTRY regs     *\n*           R13 BASE   R1  PLINK                  *\n*           R12 DWOST  R14 NEWP    R5  ILINK      *\n*           R13        R15 ENTRY                  *\n*                                                 *\n* Available WSR        WSR                        *\n* for use   WSB...WSF  WSB...WSF   R0,R1,R4,R14,  *\n*           R0,R1,R4   R0          R15            *\n*           R14,R15,R5                            *\n*                                                 *\n*                                                 *\n***************************************************\n*\n*\n*        REGISTERS\n*\nSTATIC   EQU   0                   STATIC CHAIN     ) STACK\nPLINK    EQU   1                   EXTERNAL LINK    )  FRAME\nPP       EQU   2                   CURRENT FRAME POINTER )\nBASE     EQU   3                   BASE\nNXTBASE  EQU   4                     REGISTERS\nLASTBASE EQU   5\nILINK    EQU   LASTBASE\n*\nWSA      EQU   LASTBASE+1          6 WORKING REGISTERS\nWSB      EQU   WSA+1               7\nWSC      EQU   WSB+1               8\nWSD      EQU   WSC+1               9\nWSE      EQU   WSD+1               10\nWSF      EQU   WSE+1               11\nRESULT   EQU   WSA                 RESULT OF INTEGER PROCEDURES\n*\nDWOST    EQU   12                  DYNAMIC STACK BASE POINTER\nGLOBAL   EQU   13                  GLOBAL FRAME (AND OS SAVE AREA)\nNEWP     EQU   14                  NEW FRAME ON PROCEDURE ENTRY\nENTRY    EQU   15                  ENTRY POINT\n*\nWS0      EQU   0\nR0       EQU   0\nR1       EQU   1\nR14      EQU   14\nR15      EQU   15\nLINK     EQU   R14                 INTERNAL AND OS LINK\nRETCODE  EQU   R15                 OS RETURN CODE\n*\nWS0F     EQU   0                   floating point workspace\nWS2F     EQU   6\nFRESULT  EQU   2                 floating point result register\n*\n*\n*\n         MEND\n*\n*\n*\n*\n         MACRO\n         $FRAME\nFRAME    DSECT                     STACK FRAME\n*\nFSTATIC  DS    A                   STATIC CHAIN\nFPLINK   DS    A                   LINK\n         DS    A                   DYNAMIC CHAIN\n         DS    (LASTBASE-BASE+1)A   BASE REGISTER DUMP\nARG1     DS    A\nARG2     DS    A\nARG3     DS    A\n         MEND\n*\n*\n*\n*\n         MACRO\n         $FILE\n*        FILE DESCRIPTOR BLOCK\n*\nFDATA    DS    0F                  THIS IS BOTH THE INITIALISATION\n*                                      AND THE 'DSECT'\nFDCB     DCB   DSORG=PS,MACRF=(GL,PL),EODAD=EODAD,EXLST=EXLST,DDNAME=X\nDCBPUTX  DS    F                   PUT diversion\nFCHAIN   DC    A(0)                CHAIN OF OPEN FILES\nFBSTART  DC    A(0)                START OF CURRENT BUFFER\nFBEND    DC    A(0)                END OF CURRENT BUFFER\nFBPTR    DC    A(1)                CURRENT CHARACTER\nFBLFE    DC    A(0)                logical file end = max(FBLFE,FBPTR)\nFFLAGS   DC    AL1(FPARM)          MISC FLAGS\nFINOUT   EQU   X'02'               if output\nFEOF     EQU   X'04'               EOF\nFPARM    EQU   X'08'               special PARM input file\nFIRSTIME EQU   X'10'               marks GET attempted\nFCCC     DC    C'+'                CC for next record\nFOFFSET  DC    H'0'                start of data part of record\nFLINE    DC    F'0'                line position\nFSERIAL  DS    F'0'\n         DS    0D\nFDDNAM   DC    CL8' '              ddname\n*\n*\u00c2BUFCB  DS    0F                  buffer pool control block\n*\u00c2BUFAD  DC    A(0)\n*\u00c2BUFNO  DC    H'0'\n*\u00c2BUFL   DC    H'0'\n*\nFLEN     EQU   *-FDATA\n         MEND\n*\n*\n*\n*\n         MACRO\n         $GLOBAL &INIT\n*        GLOBAL AREA AND OS SAVE AREA\n*\nGDSECT   DSECT\n         DS    F                   OS SAVE AREA\nOLDSAVE  DS    F                   PREVIOUS SAVE AREA\nNEWSAVE  DS    F                   NEXT SAVE AREA\nR14DUMP  DS    F\nGDWS     DS    0D                  16  INT/REAL/DEVTYPE working space\nR15DUMP  DS    F\n         DS    12F\nR12DUMP  DS    F\n*\nEDUMP    DC    A(0)                (72)  link dump for error routine\nARETCODE DC    A(0)                (76)  return code address\nPARM     DS    F                   (80) parm address\n*\n         AIF   ('&INIT' EQ '').NOINIT\nINITAREA DS    0XL(GINITL)         area to be initialised\n.NOINIT  ANOP\n*\nABASE    DS    A                   (84) mainbase address for reg base\n         DS    A                   (88) mainbase+4095 for nextbase\n         DC    0F'0',AL3(0)        92 filler\nSTRINGTM DC    C'\"'                   stringterm\nBITSRADX DC    F'0'                96 bitsradix\n         DC    0F'0',AL3(0)        100 filler\nPOW10CH  DC    C'e'                    powertenchar\nGD0      DC    0D'0',X'4E00000000000000' 104\nGDM0     DC    X'CE00000000000000' 112\nPI       DS    D                   120 pi\nMAXREAL  DS    D                   128 maxreal\nSMALLREA DS    D                   136 smallreal\nFILECHN  DC    A(0)                (144) chain of open files\nERROUT   DC    A(0)                (148)  ERROR MESSAGE FILE\nTIME     DC    X'7FFFFFFF'         (152) INITIAL TIMER VALUE\nFREE     DS    F                   (156) free space chain\nGFFREE   DC    A(0)                (160) free file chain\n*\nCHEK     EQU   *\n*\nGDWBASE  DS    F                   (164) initial dynamic stack\nHEAPLIM  DS    F                   (168) heap lower bound\n         DS    F                   (172) spare\nRANDOMGN DS    2D                  (176-191) random generator state\nGFRAME   DS    0X\nGFREE    EQU   *-GDSECT            192 START OF USER AREA\nGLIMIT   EQU   200                 what environment assumes\nGCHECK1  EQU   GLIMIT-GFREE\n*\n         DC    0Y(GCHECK1)       spare below what ENV assumes\n*\n         MEND\n*\n*\n*\n*\n         MACRO\n         $DCBD\n         DCBD  DEVD=,DSORG=PS\n*\n*        RECFM bit allocation\n*\nRECFMF   EQU   X'80'               format F/FB\nRECFMV   EQU   X'40'               format V/VB\nRECFMU   EQU   X'C0'               format U\nRECFMB   EQU   X'10'               blocked\nRECFMA   EQU   X'04'               ASCII carriage controls\nRECFMM   EQU   X'02'               machine carriage controls\nRECFMCC  EQU   RECFMA+RECFMM       any carriage controls\n         MEND\n*\n*\n*\n*\n         MACRO\n&L       $ENTRY &N,&ARG,&BASE\n         GBLB  &TWOBASE\n&TWOBASE SETB  0\n&L       DS    0H\n         ENTRY $$$$00&N\n$$$$00&N DS    0H\n         USING *,ENTRY             TEMP ADDRESSIBILITY\n         USING FRAME,PP            stack frame adressing\n         STM   STATIC,LASTBASE,0(NEWP)\n         LR    PP,NEWP\n         AIF   ('&SYSECT' EQ 'ZLIB').ZLIB\n         LR    BASE,ENTRY\n         USING $$$$00&N,BASE\n         AGO   .ALL\n.ZLIB    AIF   ('&BASE' NE '').TWOBASE\n         L     BASE,ABASE          SET BASE FOR LIBRARY\n&TWOBASE SETB  0\n         $USING\n         AGO   .ALL\n.TWOBASE ANOP\n         LM    BASE,NXTBASE,ABASE\n&TWOBASE SETB  1\n         $USING\n.ALL     ANOP\n         DROP  ENTRY\n         AIF   ('&ARG' EQ '').END\n         L     &ARG,ARG1\n.END     MEND\n*\n*\n*\n*\n         MACRO\n&L       $EXIT\n&L       LM    STATIC,LASTBASE,FSTATIC\n         BR    PLINK\n         $DROP\n         MEND\n*\n*\n*\n*\n         MACRO\n         $USING\n         GBLB  &TWOBASE\n         USING FRAME,PP\n         USING MAINBASE,BASE\n         AIF   (NOT &TWOBASE).END\n         USING MAINBASE+4095,NXTBASE\n.END     MEND\n*\n*\n*\n*\n         MACRO\n         $DROP\n         GBLB  &TWOBASE\n         DROP  PP,BASE\n         AIF   (NOT &TWOBASE).END\n         DROP  NXTBASE\n.END     MEND\n*\n*\n*\n*\n         MACRO\n&L       $ENTRYF &N,&ARG\n&L       DS    0H\n         ENTRY $$$$00&N\n         USING *,ENTRY\n         USING FRAME,NEWP\n$$$$00&N DS    0H\n         AIF   ('&ARG' EQ '').END\n         L     &ARG,ARG1\n.END     MEND\n*\n*\n*\n*\n         MACRO\n&L       $EXITF\n&L       BR    PLINK\n         DROP  ENTRY,NEWP\n         MEND\n*\n*\n*\n*\n         MACRO\n&T       $ICALL &RT\n&T       BAL   ILINK,&RT\n         MEND\n*\n*\n*\n*\n         MACRO\n&T       $IENTRY\n&T       DS    0H\n         USING MAINBASE,BASE\n         USING FRAME,PP\n         MEND\n*\n*\n*\n*\n         MACRO\n&T       $IEXIT\n&T       DS    0H\n         BR    ILINK\n         DROP  PP,BASE\n         MEND\n*\n*\n*\n*\n         MACRO\n&L       $ERROR &STRING\n         LCLA  &C\n&L       BALR  LINK,0\n         USING *,LINK\n         BAL   LINK,ESTOP\n         DROP  LINK\n&C       SETA  K'&STRING-2\n         DC    H'&C'\n         DC    C&STRING\n         DS    0F\n         MEND\n*\n*\n*\n*\n         MACRO\n&L       $IDF &STRING\n         LCLA &D\n&D       SETA  K'&STRING-2\n&L       DC    H'&D'\n         DC    C&STRING\n         DS    0F\n         MEND\n*\n*\n*\n*\n         MACRO\n&NAME    LOADFILE &ARG,&R=FILE,&SOFT=NO\n&NAME    L     &R,&ARG\n         USING FDATA,&R\n         CL    &R,FSERIAL          check self pointing\n         AIF   ('&SOFT' EQ 'YES').SOFT\n         BNZ   BADFILE\n.SOFT    MEND\n./       ADD          NAME=RAND\n$RANDOM  CSECT\n*\n*\n*\n*        A uniform real (0,1) random number package for ALGOL68C.  The\n*    following declarations are necessary in the machine code level\n*    of the library prelude:\n*        MODE SYSRANDOM # = STRUCT(INT,INT) #;\n*        MODE RANDOMDATA = STRUCT(SYSRANDOM hidden, REAL normal);\n*        RANDOMDATA randomgenerator;\n*        PROC getrandom = (INT arg) RANDOMDATA: # see later #;\n*        PROC saverandom = RANDOMDATA: # see later #;\n*        PROC changerandom = (RANDOMDATA arg) VOID: # see later #;\n*        PROC random = REAL: # see later #;\n*\n*        The following declarations must be made at the ALGOL68 level\n*    of the library prelude:\n*        changerandom(getrandom(0));\n*        PROC normalrandom = (REAL mean,standev) REAL:\n*            # see the code of normalrandom #;\n*\n*        The result of all this is that one mode (SYSRANDOM) is\n*    available to the user but not intended to be used by him/her.\n*    It is, however, fairly difficult to use by accident as it has\n*    no denotations.\n*        If at all possible, all unset RANDOMDATA quantities should\n*    default to getrandom(0); note that this gives a different\n*    result each time it is called.\n*\n*\n         $REGDEF\n         USING GDSECT,GLOBAL\n*\n*\n*    getrandom:\n*        This takes one integer argument, from which a RANDOMDATA\n*        result is generated; the same sequence can be repeated if\n*        the same integer is used.  If the value of the integer is\n*        zero, the time of day is used instead of the integer value\n*        and a totally non-repeatable sequence is generated.  Note\n*        that it does not change randomgenerator  and hence the\n*        sequence currently being generated; this must be done by\n*        calling changerandom.\n*\n         $ENTRY 73\n         L     WSF,ARG1            pick up address of result space\n         L     WSA,ARG2            pick up the argument\n         LPR   WSB,WSA\n         BZ    RANDOM01            use real time clock if arg=0\n         LTR   WSA,WSA\n         BNM   RANDOM11            set the generator to:\n         ALR   WSB,WSB             (2**32+(arg>0|1|2))*ABS(arg)\n         LPR   WSA,WSA             for possible compatibility\n         B     RANDOM11\n*\nRANDOM01 DS    0H                  random value if arg=0\n         L     WSC,16              ->CVT\nCVTOPTB  EQU   183                 options byte in CVT\nCVTTOD   EQU   X'20'               TOD clock present\n*                                  N.B. CONTROL BLOCKS manual is wrong\n*                                  in saying this bit is x'40'\n         TM    CVTOPTB(WSC),CVTTOD\n         BZ    RANDOM10            if TOD clock is not present\n         STCK  0(WSF)\n         B     RANDOM12\n*\nRANDOM10 DS    0H\n         TIME  TU                  do the best we can\n         LR    WSA,R0\n         LR    WSB,R0\nRANDOM11 DS    0H\n         STM   WSA,WSB,0(WSF)\n*\nRANDOM12 DS    0H                  all join\n         OI    7(WSF),X'01'        force the ls bit to 1\n         MVC   8(8,WSF),RANDOM03   set real field of result\n         $EXIT\n*\n*\n*\n*\n*    saverandom:\n*        PROC saverandom = RANDOMDATA: randomgenerator;\n*\n         $ENTRYF 74\n         L     WSF,ARG1            pick address of result space\n         LD    WS0F,RANDOMGN       this is faster than MVC\n         LD    WS2F,RANDOMGN+8\n         STD   WS0F,0(WSF)\n         STD   WS2F,8(WSF)\n         $EXITF\n*\n*\n*\n*\n*    changerandom:\n*        PROC changerandom = (RANDOMDATA arg) VOID:\n*            (randomgenerator := arg);\n*\n         $ENTRYF 75\n         LD    WS0F,ARG1           this is faster than MVC\n         LD    WS2F,ARG1+8\n         STD   WS0F,RANDOMGN\n         STD   WS2F,RANDOMGN+8\n         $EXITF\n*\n*\n*\n*\n*    random:\n*        This takes no arguments and returns a real result,\n*        uniformly distributed between 0 and 1 exclusive.  Its\n*        statistical properties should be quite good, despite only\n*        32 bits being significant in the result.  It updates\n*        (hidden OF randomgenerator) by the following algorithm:\n*                h(n+1)=h(n)*(13**17)    mod(2**64)\n*        This requires randomhidden to have at least 64 bits.  The\n*        following code requires (RANDOM04/2**31) to be odd (sic).\n*\n         $ENTRYF 76\n         L     WSB,RANDOMGN+4\n         LTR   WSC,WSB             test the sign bit of second word\n         M     WSA,RANDOM04+4      multiply two ls words\n         BNM   RANDOM21\n         AL    WSA,RANDOM04+4      correct for the sign bit\nRANDOM21 DS    0H\n         ST    WSB,RANDOMGN+4      store ls word back again\n         LR    WSB,WSC\n         LR    WSC,WSA             save ms word temporarily\n         M     WSA,RANDOM04        multiply ls by ms word\n         ALR   WSC,WSB             update ms word\n         L     WSB,RANDOMGN\n         M     WSA,RANDOM04+4      multiply ms by ls word\n         ALR   WSB,WSC\n         ST    WSB,RANDOMGN        store ms word back again\n         L     WSA,RANDOM06\n         ST    WSA,ARG1            convert the ms word to a\n         ST    WSB,ARG1+4          floating point fraction\n         LD    FRESULT,ARG1\n         AD    FRESULT,RANDOM05    normalise and force non-zero\n         $EXITF\nRANDOM03 DC    D'-100.0'           i.e. no normal number present\nRANDOM04 DC    X'780C7372621BD74D' 13**17\nRANDOM05 DC    X'4500000000000008' 2**(-33)\nRANDOM06 DC    X'46000000'         exponent for floating\n*\n*\n*\n         $FRAME\n         $GLOBAL\n*\n         END\n./       ADD          NAME=ZLIB\n**************************************************************\n*                                                            *\n*        ALGOL68 RUNTIME SYSTEM                              *\n*                                                            *\n**************************************************************\n*                                                            *\n*                  ENTRY  POINTS                             *\n*                                                            *\n**************************************************************\n*\n*    all use standard ALGOL68 calling sequence\n*\n*     R0 = static chain  (irrelevant for library routines)\n*     R1 = return address\n*     R2 = old stack frame\n*     R3-5 old base registers\n*     R6 = result for INT, BOOL, CHAR, REF X procedures\n*     R12= dyamic stack frame base\n*     R13= global frame (also used for OS save area)\n*     R14= new frame start\n*     R15= entry point\n*\n*     FP2= result for REAL procedures\n*\n*\n*   1    GENERATE\n*   2    FAULT\n*   3\n*   4    GLOBAL GENERATE\n*   5    (MRETURN)\n*   6    (MSTART)\n*   7    PRETURN\n*   8    PSTART\n*   9    syswriteint\n*  10\n*  11    syswritechar\n*  12    syswritebits\n*  13    syswritereal\n*  14    sysoutstring\n*  15    sysprintstring\n*  16    sysendline\n*  17\n*  18    syscharpos\n*  19    syslinepos\n*  20    setreturncode\n*  21    sysreadchar\n*  22    sysreadint\n*  23\n*  24    packstring\n*  25    cvtstring\n*  26    sysreadstring\n*  27    (sysreadbits)\n*  28    sysreadcc\n*  29    syswritecc\n*  30    sysreflectline\n*  31    clock\n*  32    sysopen\n*  33    sysclose\n*  34    stack available\n*  35    heap available\n*  36    store available\n*  37    store used\n*  38    sysundefined\n*  39    sysfileopen\n*\n*\n*  40-49 used for elementary functions (separate file)\n*\n*  51    syslineended\n*  52    sysfileended\n*  53    sysmovepos\n*  54    sysmaxpos\n*  55    syssetpos\n*  56    syscharsleft\n*\n*  59    CF compare(char,char)int\n*  60    CF compare(string,string)int\n*  61    CF compare(char,string)int\n*  62    CF compare(string,char)int\n*  63    ELEM(int,string)char\n*  64    ELEM(int,bits)bool\n*  65    LWB(string)int\n*  66    UPB(string)int\n*  67    ELEM(int,bytes)char\n*  68    +(string,string)string\n*  69    +(string,char)string\n*\n*  70    +(char,string)string\n*  71    +(char,char)string\n*  72    *(string,int)string\n*  73-76 \"random\" routines  (separate file)\n*  77    sysdecomposereal(REAL,REF INT,REF REAL)\n*\n*\n*************************************************************\n*                                                           *\n*               ASSUMPTIONS AND RESTRICTIONS                *\n*                                                           *\n*************************************************************\n*\n*\n*   e  indicates efficiency consideration only\n*\n*   a) e  Single buffering is forced for unit record devices.\n*         (i.e. assumes the output is being spooled by HASP etc.)\n*   b) e  The default LRECL/BLKSIZE values (table DCBEXIT5) are\n*         optimised for a 3330, and will use disc space inefficiently\n*         on other devices.\n*\n*\n*\n*\n*       Things not yet implemented etc.\n*       -------------------------------\n*\n*   .  Spanned records (VS or VBS) on input or output.\n*\n*   .  Real input.\n*\n*   .  Setting of STAE/SPIE and diagnostics in general.\n*\n*   .  Machine carriage control characters.\n*\n*   .  Print real does not always round correctly.\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n*\n*\n*\n*\n*\n*\n********************************************************\n*                                                      *\n*               ENVIRONMENT  OPTIONS                   *\n*                                                      *\n********************************************************\n*\n         GBLC  &CPU,&OS,&VERSION\n         GBLA  &RELEASE\nZLIB     CSECT\n*\n&VERSION SETC  '127'\n*\n&CPU     SETC  '360'           = 370 if extra instructions present\n*  no 370 instructions are currently used; decimal feature and\n*  floating point feature must be present\n*\n*  all operands should be aligned; however the library has only been\n*  tested on a CPU with boundary alignment.\n*\n*\n&OS      SETC  'MVT'           operating system\n*  this library has only been tested with MVT, but ought to work under\n*  MFT etc.\n*\n&RELEASE SETA  21                  OS (etc) release\n* this is used to alter the coding for RDJFCB.\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n*\nZLIB     CSECT\n*\n         $VERSION\n         DC    C'ALGOL68C LIBRARY VERSION &VERSION'\n         DS    0F\n         $REGDEF\n         $FILE ,                   this is purposely not addressable\n*\n*\n*\n*\n*\n*\n*        STANDARD  ADDRESSABILITY\n*\n         USING GDSECT,GLOBAL       Global frame and OS save area\n*\n*************************************************************\n*                                                           *\n*                    INITIALISATION                         *\n*                                                           *\n*************************************************************\n*\n*\n         ENTRY $A68INIT\n$A68INIT DS    0H\n         STM   14,5,R14DUMP\n         XC    R15DUMP,R15DUMP      COMPLETION CODE\n         LA    LASTBASE,R15DUMP    COMPLETION CODE ADDRESS\n         LR    BASE,15\n         USING $A68INIT,BASE\n         L     NXTBASE,0(R1)         SAVE PARM ADDRESS\n         LR    PP,13               RECORD OLD SAVE AREA\n*\n*        SET UP STACK AREA AND INITIALISE GLOBAL FRAME\n*\nLENGTH   EQU   GLOBAL+1\n*\n         LA    R1,44(13)           USE OLD SAVE AREA AS GETMAIN ARGS\n         USING GETM-44,PP\n         MVC   GETMLA-4(12),GETMSIZE SIZE LIMITS\n         GETMAIN VU,LA=GETMLA,A=GETMA,MF=(E,(1))\n         LM    GLOBAL,LENGTH,GETMA LENGTH AND ADDRESS\n         STM   6,12,44(PP)         SAVE REST OF REGISTERS\n         DROP  PP\n         MVC   INITAREA,GINIT      initialised variables\n         ST    PP,GDSECT+4         chain save areas\n         ST    GLOBAL,8(PP)\n         LR    PP,GLOBAL           CURRENT FRAME IS GLOBAL\n         ST    NXTBASE,PARM          STORE PARM AND RETURN CODE POINTER\n         ST    LASTBASE,ARETCODE\n*\n*        reserve minimum(half of store, 26k) for OS\n*\n         L     R0,OSRESERV\n         CR    R0,LENGTH\n         BL    INIT1\n         LR    R0,LENGTH\nINIT1    SRA   R0,1\n         AR    LENGTH,GLOBAL\n         SR    LENGTH,R0           TOP ADDRESS TO BE KEPT\n         LA    DWOST,GDWBASE\n         ST    LENGTH,0(DWOST)     initialise dynamic stack\n         ST    LENGTH,HEAPLIM\n         FREEMAIN R,LV=(0),A=(LENGTH)  FREE UNWANTED SPACE\n*\n*\n*        INITIALISE TIMER\n*\n         TTIMER ,                  CHECK IF TIMER ALREADY SET\n         LTR   R0,R0\n         BP    TIM0                ALREADY SET\n         STIMER TASK,TUINTVL=TIME  OR SET IT\n         L     R0,TIME\nTIM0     ST    R0,TIME             RECORD INITIAL TIMER VALUE\n*\n*        STAE ....\n*        SPIE ....\n*        SET PROGRAM MASK\n*\n         XC    EDUMP,EDUMP\n*\n*        set up STANDOUT initially\n*\n         LA    WSA,ERROUT          SYSPRINT first\n         LA    ENTRY,$$$$0032\n         LA    NEWP,GFRAME         START OF FREE STACK\n         USING FRAME,NEWP\n         LA    WSB,GETMSIZE !!         null IDF\n         LA    WSC,2               channel\n         STM   WSA,WSC,ARG1\n         DROP  NEWP\n         BALR  PLINK,ENTRY\n*\n         L     ENTRY,AENTER        ENTER FIRST ENVIRON\n         BR    ENTRY\n*\nOSRESERV DC    A(2*26624)\nGETMSIZE DC    F'0,8',X'00FFFF00'  VARIABLE GETMAIN LIMITS\nAENTER   DC    V($$$$0008)         MAIN ENTRY POINT\n*\n*\n*        INITIAL VALUES FOR GLOBAL VARIABLES\n*\nGINIT    DS    0F\n         DC    A(MAINBASE,MAINBASE+4095)       base regs for library\n         DC    AL3(0),C'\"'                     stringterm\n         DC    F'0'                            bitsradix\n         DC    0F'0',AL3(0),C'e'               powertenchar\n         DC    X'4E00000000000000'             GD0\n         DC    X'CE00000000000000'             GDM0\n         DC    DL8'3.14159265358979'           PI (NB NOT ALIGNED)\n         DC    X'7FFFFFFFFFFFFFFF'             MAXREAL\n         DC    X'3410000000000000'             SMALLREAL\n         DC    A(0,0),X'7FFFFFFF',A(0,0)       filechn->GFFREE\nGINITL   EQU   *-GINIT\n*\n*\nMAINBASE DS    0H                  normal base address\n         USING MAINBASE,BASE\n*\nEDCON    DC    X'402020202020202020202120'  EDIT INTEGER\n*\n*\n****************************************************\n*                                                  *\n*                                                  *\n*                                                  *\n****************************************************\n*\n*        WORKING SPACE LAYOUT\n*\n         $FRAME\n*\n*        OUTPUT CONVERSION WORKING SPACE\n*\n         ORG   ARG3\nCVDWS    DS    D\nEDWS     DS    XL12\n*\n*        REAL CONVERSION WORKSPACE\n*\n         ORG   ARG3\nFARG1    DS    0D                  floating argument\nRSCVD    DS    D                   for decimal convert\nRSSIGN   DS    C                   sign\nRSDIG0   DS    C                   mantissa digits\nRSPOINT  DS    C\nRSDIG1   DS    CL8\nRSPOW10  DS    C                   'E'\nRSEXP    DS    CL3                 exponent\nRSSPACE  DS    C                   terminal space\nRSLEN    EQU   *-RSSIGN\n*\nRSEDWS   DS    CL(L'EDCON)         for editing\n*\n*        OPEN WORKING SPACE\n*\n         ORG   ARG3\nOPENARG  DS    F                   ARGUMENT LIST FOR OPEN/CLOSE/RDJFCB\nEXLA     DS    2F                  MODIFIED DCB EXIT LIST FOR RDJFCD\nGETMWS   DS    0F                  register dump when getting buffers\n*\nJFCB     DS    0XL176\nJFCBDSNM DS    CL44                data set name\nJFCBELNM DS    CL8                 member name\n         DS    24X\nJFCBFLAG DS    X\n         ORG   JFCB+86\nJFCBIND1 DS    X                   indicator byte 1\n         ORG   JFCB+L'JFCB\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\nZLIB     CSECT\n*\n*************************************************************\n*                                                           *\n*                                                           *\n*               OUTPUT  SUBROUTINES                         *\n*                                                           *\n*************************************************************\n*\n*        PUTSTR\n*\n*        NB  STRING LENGTH MUST BE > 0\n*\nFST      EQU   R15                 BUFFER START\nFND      EQU   R0                  BUFFER END\nFPTR     EQU   R1                  BUFFER POINTER\nSTRA     EQU   WSE\nSTRL     EQU   WSB                 STRING LENGTH\nFILE     EQU   WSC                 file for output operations\nFCC      EQU   WSA                 carriage control char\n*\nPUTSTR   $IENTRY\n         LOADFILE ARG1\nPUTSTRE  $IENTRY\n         LM    FST,FPTR,FBSTART\n         SR    FND,FPTR            amount remaining\n         SR    FND,STRL            after string done\n         BM    PUTSTR4             if not enough room for string\n         LR    FND,STRL\n         BCTR  FND,0\nPUTSTR2  DS    0H\n         SH    FND,=H'256'\n         BNL   PUTSTR3             if more than 256 to move\n         LR    FST,FND             ****** R0 problem\n         EX    FST,PUTMVC          move it\n         LA    FPTR,257(FPTR,FST)  update buff ptr\n         ST    FPTR,FBPTR\n         LA    STRA,257(STRA,FST)  update input pointer\n         LA    RESULT,1            TRUE\n         $IEXIT ,                  with cc\u00ac=0\n*\n         USING MAINBASE,BASE\n         USING FRAME,PP\nPUTSTR3  DS    0H                  deal with >256\n         MVC   0(256,FPTR),0(STRA)\n         LA    FPTR,256(FPTR)\n         LA    STRA,256(STRA)\n         B     PUTSTR2\n*\nPUTSTR4  DS    0H                  not enough room on record\n         SR    RESULT,RESULT       FALSE (and cc=0)\n         $IEXIT\n*\nPUTMVC   MVC   0(0,FPTR),0(STRA)   EXECUTED\n*\n*\n*        ENDREC - tidy up record for output\n*\n*        NB  this subroutine is called from PUT/TRUNC divert\n*       it must not assume that the global frame is addressable\n*\n         DROP GLOBAL\n*\nENDREC   $IENTRY\n         LA    FCC,C' '              default cc\nENDRECCC $IENTRY\n         LM    FST,FPTR,FBSTART\n         C     FPTR,FBLFE          ADVANCE POINTER TO END FO LINE\n         BNL   ENDREC7\n         L     FPTR,FBLFE\nENDREC7  STC   FCC,FCCC            save carriage control\n         TM    DCBRECFM-IHADCB+FDCB,RECFMV\n         BZ    ENDREC1             JUMP IF F/FB\n         SR    FPTR,FST            COMPUTE RDW\n         BNZ   ENDRECV1\n         LA    FPTR,1              ensure line contains one char\nENDRECV1 AH    FPTR,FOFFSET        compute total record length\n         SH    FST,FOFFSET         to record start (before ccc and RDW)\n         TM    DCBRECFM-IHADCB+FDCB,RECFMU\n         BO    ENDRECU             JUMP IF FORMAT U\n         STC   FPTR,1(FST)         STORE RDW\n         SRA   FPTR,8\n         STC   FPTR,0(FST)\n         $IEXIT\n*\nPUTMVC1  MVC   1(1,FPTR),0(FPTR)\n*\n         USING MAINBASE,BASE\n         USING FRAME,PP\nENDREC1  SR    FND,FPTR            F/FB  FILL OUT RECORD WITH SPACES\n         BZR   ILINK               if record full\n         MVI   0(FPTR),C' '\n         SH    FND,=H'2'\n         BMR   ILINK               if record now full\n         LR    FST,FND             ****** R0 PROBLEM\nENDRECF1 SH    FST,=H'256'\n         BNM   ENDRECF2            if >256\n         EX    FST,PUTMVC1\n         $IEXIT\n*\n         USING MAINBASE,BASE\n         USING FRAME,PP\nENDRECF2 MVC   1(256,FPTR),0(FPTR)\n         LA    FPTR,256(FPTR)\n         B     ENDRECF1\n*\nENDRECU  AR    FPTR,FST            FORMAT U - set end of record in DCB\n         ST    FPTR,DCBRECAD-IHADCB+FDCB\n         ST    FPTR,DCBEOBAD-IHADCB+FDCB\n         $IEXIT\n*\n*\n*        set up next record\n*\nNXTREC   $IENTRY\n         TM    FFLAGS,FINOUT\n         BZ    WRITERR             if input file\n         LR    R1,FILE             pseudo PUT\n         USING IHADCB,R1\n         L     ENTRY,DCBPUT\n         DROP  R1\n*\u00c2       L     ENTRY,DCBPUTX\n         BALR  LINK,ENTRY\n         LA    R1,0(R1)            clean top byte (TCAM leaves junk)\n         LA    FND,1\n         A     FND,FLINE           incr lpos\n         ST    FND,FLINE\n         LR    FND,R1\n         TM    DCBRECFM-IHADCB+FDCB,RECFMF\n         BNZ   NXTREC4             JUMP IF F/FB or U\n         XC    0(4,FPTR),0(FPTR)   prepare RDW\n         LA    FPTR,4(FPTR)        ALLOW SPACE FOR RDW IF V/VB\nNXTREC4  TM    DCBRECFM-IHADCB+FDCB,RECFMCC\n         BZ    NXTREC5             SKIP IF NO CCC\n         MVC   0(1,FPTR),FCCC      insert CC  (ASCII only)\n         LA    FPTR,1(FPTR)\nNXTREC5  DS    0H\n         LR    FST,FPTR\n         MVI   0(FPTR),C' '        IN CASE NULL LINE\n         AH    FND,DCBLRECL-IHADCB+FDCB\n         STM   FST,FPTR,FBSTART\n         ST    FPTR,FBLFE\n         $IEXIT\n*\n*\n*\n         DROP  FILE\n         USING GDSECT,GLOBAL\n*\n*\n***********************************************************\n*                                                         *\n*                     GENERATE                            *\n*                                                         *\n***********************************************************\n*\nGENSIZE  EQU   STATIC             size of request\nLIMIT    EQU   WSC                frame pointer (=FILE)\nGENAD    EQU   RESULT             result address\n*\n         ENTRY $$$$0001,$$$$0004\n         USING *,ENTRY\n$$$$0004 LA    LIMIT,HEAPLIM       GLOBAL GENERATOR\n         BAL   ENTRY,GEN0\n         USING *,ENTRY\n$$$$0001 LR    LIMIT,DWOST\nGEN0     L     GENAD,0(DWOST)      CURRENT DYNAMIC STACK POINTER\n         C     GENAD,HEAPLIM       STAY BELOW HEAP\n         BNH   GEN1\n         L     GENAD,HEAPLIM\nGEN1     DS    0H\n         SR    GENAD,GENSIZE       step off amount required\n         LA    GENSIZE,200(NEWP)   CHECK SAFETY MARGIN\n         CR    GENAD,GENSIZE\n         BL    GENERR\n         N     GENAD,=F'-8'        ENSURE ALIGNED\n         ST    GENAD,0(LIMIT)\n         BR    PLINK\n         DROP  ENTRY\n*\n         AGO   .A1\n*\n*        GET SPACE FROM FREE CHAIN\n*\n*        size GENSIZE, link PLINK; GENAD:=result\n*\nGFWS     EQU   LIMIT\nLAST     EQU   WSB\n*\nGETCHN   LA    LAST,FREE           free chain\n         LA    ENTRY,$$$$0004\nGF0      L     GENAD,0(LAST)       next block on chain\n         LTR   GENAD,GENAD\n         BZR   ENTRY             to HEAP generate if chain empty\n         L     GFWS,4(GENAD)\n         SR    GFWS,GENSIZE\n         BZ    GF1                 block of exact size\n         LR    LAST,GENAD\n         BM    GF0                 block too small\n         CH    GFWS,=H'8'\n         BM    GF0                 or not enough room for chain\n         ST    GFWS,4(GENAD)       reset size\n         AR    GENAD,GFWS\n         BR    PLINK\n*\nGF1      MVC   0(4,LAST),0(GENAD)  exact block - close up chain\n         BR    PLINK\n*\n*\n*        RETURN SPACE TO FREE CHAIN\n*\n.A1      ANOP\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n*\n* PROC(SYSFILE,INT)BOOL syswriteint\n*\n         $ENTRY 09\n         L     WS0,ARG2            ARGUMENT\n         CVD   WS0,CVDWS           TO DECIMAL\n         MVC   EDWS,EDCON\n         LA    R1,EDWS+L'EDWS-1    SET ADDRESS IN CASE 0\n         EDMK  EDWS,CVDWS+2        ZERO SUPPRESS\n         LR    STRA,R1             ADDRESS OF FIRST SIG DIGIT\n         BNM   INTPR0\n         BCTR  STRA,0              INSERT SIGN\n         MVI   0(STRA),C'-'\nINTPR0   LA    STRL,EDWS+L'EDWS    COMPUTE SIGNIFICANT LENGTH\n         SR    STRL,STRA\nSTRXIT   DS    0H\n         $ICALL PUTSTR\nXXIT     $EXIT\n*\n*\n* PROC(SYSFILE,REF CHAR)BOOL syswritechar\n*\n         $ENTRYF 11\n         LOADFILE ARG1\n         LM    WSA,WSB,FBEND       end of buffer, current posn\n         CLR   WSB,WSA\n         BNM   WREOR               at/over end\n         L     WSA,ARG2\n         STC   WSA,0(WSB)          put char in buffer\n         LA    RESULT,1            TRUE\n         AR    WSB,RESULT\n         ST    WSB,FBPTR\n         BR    PLINK\n*\nWREOR    XR    RESULT,RESULT       FALSE\n         $EXITF\n*\n*\n* PROC(SYSFILE,BITS)BOOL sysprintbits\n*\nBITSWS   EQU   ARG2+L'ARG2\nBITSWSL  EQU   32\n*\n         $ENTRY 12\n         L     WSC,BITSRADX        bitsradix\n         BCTR  WSC,0\n         CL    WSC,=F'15'\n         BH    PRBITSER            if radix>16 or <=0\n         STC   WSC,BITSWS\n         MVC   BITSWS+1(BITSWSL-1),BITSWS form mask\n         IC    WSC,BITSHIFT(WSC)   bits per char\n         LTR   WSC,WSC\n         BZ    PRBITSER            if radix not 2**n\n         LA    STRA,BITSWS+BITSWSL\n         LR    STRL,STRA\n         L     WSA,ARG2            bits value\nPRBITSL  DS    0H\n         BCTR  STRA,0              next char pos\n         EX    WSA,PRBITSNI        char to store (using NI)\n         SRL   WSA,0(WSC)\n         LTR   WSA,WSA\n         BNZ   PRBITSL             loop whilst chars are significant\n         SR    STRL,STRA           actual length\n         EX    STRL,TOHEX          one too many - who cares?\n         B     STRXIT             try to print\n*\nPRBITSNI NI    0(STRA),0          executed\nTOHEX    TR    0(0,STRA),HEXCHARS\n         DROP  BASE,PP\n*\n*\n***********************************************************************\n*                                                                     *\n* syswritestring(SYSFILE, REF INT, STRING)BOOL:                       *\n* PROC(SYSFILE, REF INT, REF\u00e2\u00e4INT)BOOL outstring\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 15\n         ENTRY $$$$0014\n$$$$0014 EQU   $$$$0015\n         LA    RESULT,1           TRUE\n         L     STRA,ARG3           -> string\n         LH    STRL,0(STRA)        length\n         LTR   STRL,STRL\n         BNP   PRTSTR4             if =0 or >32k\nPRTSTR1  DS    0H\n         L     WSD,ARG2            -> INT (WSD not destroyed by putstr\n         L     R1,0(WSD)           number of chars already done\n         SR    STRL,R1\n         BC    13,PRTSTRX          if int>=strl\n         LA    STRA,2(STRA,R1)     -> next char to do\n         $ICALL PUTSTR\n         BNZ   PRTSTR2             if done all of string\n         AR    STRL,FND            amount that can be done\n         BZ    PRTSTRX             if none\n         $ICALL PUTSTR             do as much as poss\n         SR    RESULT,RESULT       FALSE\nPRTSTR2  DS    0H\n         A     STRL,0(WSD)         amount done\n         ST    STRL,0(WSD)\nPRTSTRX  $EXIT\n         USING MAINBASE,BASE\nPRTSTR4  DS    0H                  length =0 or >32k\n         N     STRL,=A(HALFMASK)\n         BZ    PRTSTRX             length = 0\n         B     PRTSTR1\n         DROP  BASE,FILE\n*\n*\n*\n*        PRINTREAL\n*\nEXP      EQU   WSA                 exponent\nINCR     EQU   WSE                 useful constant\n*\n         $ENTRY 13\n         MVC   RSSIGN(RSLEN),RSZERO set up 0 in case\n         SDR   WS0F,WS0F\n         AD    WS0F,FARG1          force normalisation\n         BZ    RPRZZ               special format for zero\n         BP    RPR0\n         MVI   RSSIGN,C'-'         set negative\n         LPDR  WS0F,WS0F\nRPR0     LA    INCR,9              exponent increment\n         XR    EXP,EXP             initial exponent\n         CE    WS0F,MAXREAL        near 'maxreal' ? (!!!)\n         BNL   RPR2                so skip rounding\n         HDR   WS2F,WS0F           approximate rounding\n         DD    WS2F,=D'1E9'\n         ADR   WS0F,WS2F\n         CD    WS0F,=D'1'\n         BNL   RPR3\nRPR1     SR    EXP,INCR            deal with numbers <1\n         MD    WS0F,=D'1E9'\n         CD    WS0F,=D'1'\n         BL    RPR1\n         B     RPR4\n*\nRPR2     AR    EXP,INCR            deal with numbers >1E9\n         DD    WS0F,=D'1E9'\nRPR3     CD    WS0F,=D'1E9'\n         BNL   RPR2\nRPR4     DS    0H\n*\n*\n*        we now have a mantissa in \u00e21,1E9), and exponent in EXP\n*\n         LDR   WS2F,WS0F\n         AW    WS2F,GD0\n         STD   WS2F,GDWS\n         AD    WS2F,GD0            restandardise\n         L     R1,GDWS+4           convert first block of 9 digits\n         CVD   R1,RSCVD\n         MVC   RSEDWS,EDCON        and edit them\n         LA    R1,RSEDWS+L'RSEDWS-1\n         LR    WSB,R1\n         EDMK  RSEDWS,RSCVD+2\n         SR    WSB,R1              no of sig digits after .\n         LA    STRA,RSDIG1(WSB)    store address for second block\n         MVC   RSDIG0,0(R1)\n         MVC   RSDIG1,1(R1)        (move more digits than needed)\n*\n         SDR   WS0F,WS2F\n         MD    WS0F,=D'1E9'\n         AW    WS0F,GD0\n         STD   WS0F,GDWS\n         L     R1,GDWS+4            convert second block of digits\n         CVD   R1,RSCVD\n         UNPK  0(9,STRA),RSCVD+3(5) NB least sig digit never used\n*\n         MVC   RSPOW10(RSSPACE+1-RSPOW10),CSPACE  blank exponent\n         AR    EXP,WSB             adjust exponent\n         BZ    RPRZZ               finished if no exponent\n         IC    R1,POW10CH\n         STC   R1,RSPOW10\n         CVD   EXP,RSCVD\n         MVC   RSEDWS,EDCON\n         LA    R1,RSEDWS+L'EDCON-1\n         EDMK  RSEDWS,RSCVD+2\n         BNM   RPRE1               skip if positive\n         BCTR  R1,0                or insert sign\n         MVI   0(R1),C'-'\nRPRE1    MVC   RSEXP,RSEDWS+L'RSEDWS-L'RSEXP move exponent into output\nRPRZZ    LA    STRA,RSSIGN\n         LA    STRL,RSLEN          output string length\n         B     STRXIT\nRSZERO   DC    CL(RSLEN)' 0.'      (here to avoid forward reference)\nCSPACE   EQU   RSZERO+3            pointer to a space\n*\n*\n*\n*\n*\n*\n***********************************************************\n*                                                         *\n*        OPEN                                             *\n*                                                         *\n***********************************************************\n*\n*\n         $ENTRY 32,,TWOBASE\n         LM    WSA,WSC,ARG1        GET ARGUMENTS\n         LTR   WSC,WSC\n         BNP   OPENE1              COMPLAIN IF UNSUITABLE CHANNEL\n         LH    WSD,0(WSB)\n         CH    WSD,=H'18'\n         BH    OPENE1\n         LA    WSB,1(WSB)\n         BCTR  WSD,0               in MVC format\n         CH    WSC,OPEN2L\n         IC    WSC,OPEN2-1(WSC)\n         BNH   OPEN1(WSC)          BRANCH IF CHANNEL IN RANGE\n*\n*        WSA = REF FILE for result\n*        WSB = idf base - 1\n*        WSD = idf length -1\n*\nOPEN2    DC    AL1(OPENC1-OPEN1,OPENC2-OPEN1,OPENC3-OPEN1,OPENC4-OPEN1)\nOPEN2X   EQU   *-OPEN2\nOPEN2L   DC    Y(OPEN2X)\n*\n*        1     standinchannel\n*\nOPEN1    DS    0H\nOPENC1   LTR   WSC,WSD\n         BNM   OPENC1A\n         LH    WSD,OPENS1\n         LA    WSB,OPENS1+1\n         BAL   WSE,OPEN3           assume SYSIN if null IDF\n         DC    X'0080'\nOPENS1   $IDF 'SYSIN'\n*\n*        2     standoutchannel\n*\nOPENC2   DS    0H\n         LTR   WSC,WSD\n         BNM   OPENC2B\n         L     FILE,ERROUT         assume SYSPRINT if null IDF\n         LTR   FILE,FILE\n         BNZ   OPENC2A\n         LH    WSD,OPENS2\n         LA    WSB,OPENS2+1\n         BAL   WSE,OPEN3\n         DC    X'028F'\nOPENS2   $IDF 'SYSPRINT'\n*\nOPENC2B  BAL   WSE,OPEN3A\n         DC    X'C28F'\nSPACES   DC    CL8' '\n*\nOPENC1A  BAL   WSE,OPEN3A\n         DC    X'C080',CL8' '\n*\n*        3     PARM\n*\nOPENC3   XR    WSE,WSE             mark no open wanted\n         B     OPENP3\n*\n*        4    prelude\n*\nOPENC4   DS    0H\n         LH    WSD,OPENS4\n         LA    WSB,OPENS4+1\n         BAL   WSE,OPEN3\n         DC    X'0080'\nOPENS4   $IDF 'INIT'\n*\n*\n*        return here to finish parmstring open\n*\n         USING FDATA,FILE\nOPENP0   O     WSE,PARM            parm address if any\n         BZ    OPENFAIL\n         LA    R15,2(WSE)\n         LH    R0,0(WSE)\n         AR    R0,R15\n         MVI   FLINE+3,1           as didnt call $getline\nOPENP2   CR    R15,R0              skip to /\n         BNL   OPENFAIL            not found\n         CLI   0(R15),C'/'\n         LA    R15,1(R15)\n         BNE   OPENP2\n         CR    R15,R0\n         BE    OPENFAIL            if no chars after /\n         LR    R1,R15              pointer=start\n         STM   R15,R1,FBSTART\n         MVC   FDDNAM(8),PARMSTR\n         B     OPENP1\n         DROP  FILE\n*\nPARMSTR  DC    CL8'PARM'\n*\n*        CHECK IDF FORMAT\n*        format is  DDNAME  or  DDNAME(MEMBER)\n*\n*        the checking isnt very thorough, as other junk will\n*        be picked up by OS as bad DD or member names.\n*\nOPEN3A   AR    WSC,WSB             end of string-1\n         CLI   1(WSC),C')'         check for member name\n         BNE   OPEN3M1             DDNAME only\n*\n*        separate DDNAME from member name\n*\n         BCTR  WSC,0               (at least 1 char in member)\nOPEN3M   CR    WSC,WSB\n         BNH   OPENE1              format error - no '(' found\n         CLI   0(WSC),C'('\n         BCTR  WSC,0               step past char\n         BNZ   OPEN3M\n*\n         LR    WSD,WSC             WSC now points to end of DDNAME - 1\n         SR    WSD,WSB\nOPEN3    BCTR  WSD,0\nOPEN3M1  CH    WSD,=H'8'           check DDNAME not too long\n         BNL   OPENE1\n*\n*\n*        GET SPACE FOR FILE DESCRIPTOR BLOCK\n*\n*        WSB = idf base -1\n*        WSD = ddname length -1\n*        WSE = dcbdata or zero if PARM\n*\nOPENP3   L     FILE,GFFREE         HEAD OF CHAIN\n         LTR   FILE,FILE\n         BNZ   OPENP31             if got spare file block\n         LA    GENSIZE,FLEN\n         LA    ENTRY,$$$$0004\n         BALR  PLINK,ENTRY         else HEAP generate\n         LR    FILE,RESULT\n         L     WSA,ARG1            RECOVER WSA DESTROYED BY HEAP EEN\n         B     OPENP32\n*\nOPENP31  DS    0H\n         USING FDATA,FILE\n         MVC   GFFREE(1),FSERIAL   insert identity byte\n         L     FILE,GFFREE\n         MVC   GFFREE,0(FILE)      CLOSE UP CHAIN\nOPENP32  DS    0H\n         L     R1,=A(FDATA)        -> file proforma\n         MVC   FDATA(FLEN),0(R1)   initialise file\n         USING IHADCB-FDCB+FDATA,FILE\n         ST    FILE,FSERIAL-FDATA(FILE) set identity\n         LTR   WSE,WSE\n         BZ    OPENP0              jump if PARM\n         USING DCBDATA,WSE\n         MVC   DCBDDNAM,SPACES     INSERT SPACES\n         LA    WS0,FDCB-FDATA(FILE) SET UP ARGUMENT LIST FOR OPEN\n         ST    WS0,OPENARG\n         MVC   OPENARG(1),DATAFLG2 set in/out switch\n         MVN   FFLAGS-FDATA(,FILE),DATAFLG1 mark OUT\n*\n*\u00c2       LA    WS0,BUFCB-FDATA(FILE) set buffer pool control block\n*\u00c2       ST    WS0,DCBBUFCB          and BUFNO=0\n         EX    WSD,XMVC1           insert DDNAME, forcing upper case\n         EX    WSD,XMVC2\n         DEVTYPE DCBDDNAM,ARG1\n         LTR   RETCODE,RETCODE\n         BNZ   OPENFAIL            dd not present\n         DROP  WSE\n*\n*        check for member name, and insert in JFCB\n*\n         LA    WSE,3(WSB,WSD)      start of member name or end idf + 1\n         IC    WSD,0(WSB)\n         AR    WSD,WSB             end of whole IDF - 1\n         SR    WSD,WSE             length of member name\n         BNP   OPEN4               normal open if no member\n         BCTR  WSD,0\n*\n         LA    WS0,EXLA            SET UP TEMPORARY EXIT LIST\n         ST    WS0,DCBEXLST\n         LA    WS0,JFCB\n         ST    WS0,EXLA\n         MVI   EXLA,X'07'\n         L     WS0,EXLST           ADD STANDARD DCB EXIT\n         ST    WS0,EXLA+4\n         XC    JFCB(L'JFCB),JFCB\n         RDJFCB MF=(E,OPENARG)     READ JFCB\n         AIF   (&RELEASE LT 21).NORET\n         LTR   RETCODE,RETCODE     (ONLY SET IF RELEASE>=21)\n         BNZ   OPENFAIL\n.NORET   ANOP\n         NC    JFCB(L'JFCB),JFCB\n         BZ    OPENFAIL            REJECT IF JFCB NOT READ\n         OI    JFCBIND1,X'01'      MEMBERNAME PRESENT\n         MVC   JFCBELNM,SPACES     INSERT MEMBER, UPPER CASING\n         EX    WSD,XMVC\n         OI    JFCBFLAG,X'80'      FORCE WRITE BACK\n         OPEN  MF=(E,OPENARG),TYPE=J\n         MVC   DCBEXLST+1(3),EXLA+4 RESTORE NORMAL EXIT\n         B     OPEN5               JOIN NORMAL ROUTE\nXMVC     OC    JFCBELNM(1),0(WSE)\n*\n*        NORMAL OPEN\n*\nXMVC1    OC    DCBDDNAM(1),1(WSB)\nXMVC2    OC    FDDNAM-FDATA(1,FILE),1(WSB)\n*\n*\nOPEN4    DS    0H\n         OPEN  MF=(E,OPENARG)\nOPEN5    TM    DCBOFLGS,X'10'      TEST IF OPEN SUCCEEDED\n         BZ    OPENFAIL\n         DROP  FILE\n         USING FDATA,FILE\n         TM    FFLAGS,FINOUT\n         BZ    OPENREAD           if input\n*\u00c2       MVC   DCBPUTX,DCBPUT-IHADCB+FDCB save real put for self\n*\u00c2       B     *+L'*+6            temp bypass\n*\u00c2       MVC   DCBPUT+1-IHADCB+FDCB(3),=AL3(PUTDVT) divert dcb puts\n         $ICALL NXTREC\n         B     OPENP1             everything joins there\n*\nOPENREAD $ICALL GETLINE           setup input line (if any)\n*\nOPENP1   MVC   FCHAIN,FILECHN      ADD TO OPEN CHAIN\n         ST    FILE,FILECHN\nOPENC2A  DS    0H\n         ST    FILE,0(WSA)         set file\n         XR    RESULT,RESULT    0 => success\nOPENXIT  $EXIT\n         DROP  FILE\n*\n         $USING ,                  regain previous addressability\nOPENFAIL DS    0H\n         XC    0(4,WSA),0(WSA)     no suitable sysfile\n         LA    RESULT,1            nonzero -> failure\n         B     OPENFAIM            join common code in close\n         $DROP\n*\n*\n*\n*****************************************************************\n*                                                               *\n*        DCB EXIT ROUTINE                                       *\n*                                                               *\n*   R1=DCB, R14=link, R15=entry point N.B. as this can be entered *\n*   from concatenation, as well as OPEN, no other registers are   *\n*   reliable.                                                     *\n*   uses WSA, WSB, WSC (FILE), WSD\n*                                                               *\n*****************************************************************\n*\n         DROP  GLOBAL\n         USING *,ENTRY\n         USING IHADCB,R1\nDCBEXIT  DS    0H\n         L     BASE,ABASE1\n         DROP  ENTRY\n         USING MAINBASE,BASE\n         OI    DCBOFLGS,X'08'      allow for unlike concatenation\n*\n*        delete existing buffer pool\n*\n         LR    FILE,R1\n         USING IHADCB,FILE\n         TM    DCBBUFCB+2,X'01'\n         BNZ   DCBXNBF             none\n         TM    DCBCIND2,X'08'\n         BZ    DCBXNBF             if pool not got by OPEN\n         NI    DCBCIND2,X'FF'-X'08'\n         $ICALL FREEPOOL\n         DROP  R1\nDCBXNBF  DS    0H\n         SR    WSA,WSA             flag for BUFNO=1\n         LA    WSB,DCBEXIT5        default details for unit record\n         CLI   DCBDEVT,X'4F'       (set only for TSO)\n         BE    DCBEXIT1            if TSO terminal\n         L     WSD,16              ->CVT\n         L     WSD,0(WSD)          ->TCB WORDS\n         L     WSD,4(WSD)          ->TCB\nTCBTSFLG EQU   148\n         TM    TCBTSFLG(WSD),X'80'\n         BZ    DCBEXIT0            unless time sharing task\n         LA    WSA,1               default BUFNO=1 for all devices\nDCBEXIT0 DS    0H\nTCBTIO   EQU   12\n         L     WSD,TCBTIO(WSD)     ->TIOT\n         AH    WSD,DCBTIOT         ->TIOT DD ENTRY\n         L     WSD,16(WSD)         ->UCB (if any)\n         LA    WSD,0(WSD)\n         LTR   WSD,WSD\n         BZ    DCBXDUM             if DD DUMMY\nUCBTYP   EQU   16\n         CLI   2+UCBTYP(WSD),X'08'\n         BE    DCBXUR              if UR\n         BCTR  WSA,0               default bufno unset unless TSO\n*\n*        FILL IN DEFAULTS FOR BLKSIZE,RECFM IF NOT SET\n*\nDCBEXIT8 DS    0H\n         LA    WSB,DCBEXITO-6\n         BALR  WSD,0\n         LA    WSB,6(WSB)\n         CLC   DCBRECFM,0(WSB)\n         BZ    DCBEXIT4            RECFM MATCHES\n         CLC   DCBRECFM,1(WSB)\n         BZ    DCBEXIT4\n         TM    6(WSB),X'FF'\n         BNZR  WSD                 LOOP FOR MORE\n         B     DCBXDFLT            insert default\n*\nDCBEXIT5 DC    X'4444',H'254,258'  defaults for TSO/dummy out\nDCBEXITD DC    X'8080',H'8,8'      DD DUMMY input\n*\nDCBEXITO DC    X'4442',H'137,141'  VA,VM\nDCBEXITI DC    X'8080',H'80,80'    F unit record input default\n         DC    X'5050',H'136,2498' VB\n         DC    X'4040',H'136,140'  V\n         DC    X'9492',H'133,3059' FBA,FBM\n         DC    X'9C9E',H'133,3059' FBSA,FBSM\n         DC    X'8482',H'133,133'  FA,FM\n         DC    X'9098',H'80,2480'  FB,FBS\n         DC    X'C0C4',H'0,4096'   U,UA\n         DC    X'5452',H'137,2498' VBA,VBM  (default - must be last)\n         DC    X'00'\n*\n*\n*\nDCBXUR   DS    0H\n         LA    WSD,DCBEXITO-DCBEXIT5 switch for UR output\nDCBXDUM  DS    0H\n         AR    WSB,WSD             select dummy or unit record\n         TM    FFLAGS-FDCB+IHADCB,FINOUT\n         BNZ   DCBEXIT1            if output\n         LA    WSB,6(WSB)          select input\nDCBEXIT1 DS    0H\n         TM    DCBRECFM,RECFMU\n         BNZ   DCBEXIT8            look up provided recfm\nDCBXDFLT DS    0H\n         MVC   DCBRECFM,0(WSB)     set default RECFM\n*\nDCBEXIT4 DS    0H\n         CLI   DCBBUFNO,0\n         BNE   DCBEXIT9            if BUFNO set externally\n         LTR   WSA,WSA\n         BM    DCBEXIT9            if not to force BUFNO=1\n         MVI   DCBBUFNO,1\nDCBEXIT9 DS    0H\n         LH    WSA,DCBBLKSI\n         LH    WSD,DCBLRECL\n         OR    WSA,WSD\n         BNZ   DCBEXIT2            if either BLKSIZE or LRECL set\n         MVC   DCBLRECL,2(WSB)     set LRECL\n         MVC   DCBBLKSI,4(WSB)     and BLKSIZE\nDCBEXIT2 DS    0H\n         NI    FFLAGS-FDATA+IHADCB,255-FIRSTIME mark GET aborted\n         XR    WSB,WSB             offset from record start\n         TM    DCBRECFM,RECFMCC\n         BZ    DCBEXIT6            if no carriage controls\n         LA    WSB,1(WSB)\nDCBEXIT6 DS    0H\n         TM    DCBRECFM,RECFMF\n         BNZ   DCBEXIT7            if F or U\n         TM    DCBRECFM,RECFMV\n         BZ    DCBEXIT7            unless V\n         LA    WSB,4(WSB)          for RDW\nDCBEXIT7 DS    0H\n         STH   WSB,FOFFSET-FDATA+IHADCB\n         BR    R14\n         DROP  BASE\n         USING GDSECT,GLOBAL\n         AGO   .PUTDVT            AS IBM WONT FIX ABEND BUG\n*\n*\n*        PUT/TRUNC diversion\n*\n         USING *,ENTRY\nPUTDVT   MVI   R12DUMP,0          mark PUT\n         B     PUTDVT1\n*\n         ORG   PUTDVT+8\n         MVI   R12DUMP,8           mark TRUNC\nPUTDVT1  STM   LINK,WSD,R14DUMP\n         L     BASE,ABASE\n         DROP  ENTRY\n         USING MAINBASE,BASE\n         LR    FILE,R1\n         USING FDATA,FILE\n         $ICALL ENDREC            terminate current record\n         LM    LINK,WSD,R14DUMP\n         XR    ENTRY,ENTRY\n         IC    ENTRY,R12DUMP\n         A     ENTRY,DCBPUTX-FDCB(R1) now enter real PUT/TRUNC\n         BR    ENTRY\n         DROP  BASE,FILE\n.PUTDVT  ANOP\n*\n*\n*\n*************************************************************\n*                                                           *\n*                      CLOSE                                *\n*                                                           *\n*************************************************************\n*\n         $ENTRY 33\n         LOADFILE ARG1\n         TM    DCBOFLGS-IHADCB+FDCB,X'10'\n         BZ    CLOSEP              bypass close if not open\n         TM    FFLAGS,FINOUT\n         BZ    CLOSER              bypass if reading\n         $ICALL ENDREC\n         CL    FILE,ERROUT\n         BE    CLOSEX\nCLOSER   DS    0H\n         LA    WS0,FDCB            MAKE UP ARGUMENT LIST\n         ST    WS0,OPENARG\n         MVI   OPENARG,X'80'\n         CLOSE MF=(E,OPENARG)\n         LA    R1,FDCB\n         $ICALL FREEPOOL\nCLOSEP   LA    WSA,FILECHN-FCHAIN+FDATA  SCAN FILE CHAIN\nCLOSE2   CL    FILE,FCHAIN-FDATA(WSA)\n         BE    CLOSE3              JUMP IF FILE FOUND\n         L     WSA,FCHAIN-FDATA(WSA)\n         LTR   WSA,WSA\n         BNZ   CLOSE2\n         B     CLOSERR\n*\nCLOSE3   DS    0H\n         MVC   FCHAIN-FDATA(4,WSA),FCHAIN remove from open chain\nOPENFAIM DS    0H                  OPEN FAILURE JOINS\n         IC    R1,FSERIAL          change file identity\n         BCTR  R1,0\n         SLL   R1,24               ensure FSERIAL cannot appear open\n         ST    R1,FSERIAL\n         MVC   0(4,FILE),GFFREE    ADD TO FREE CHAIN\n         ST    FILE,GFFREE\n         DROP  FILE\nCLOSEX   $EXIT\n*\n*\nFREEPOOL $IENTRY\n         FREEPOOL (1)\n         $IEXIT\n*\n*\n*\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n* PROC(SYSFILE,REF CHAR)BOOL sysreadchar\n*\n*\n         $ENTRYF 21\nRDCH0    DS    0H\n         LOADFILE ARG1\n         LM    WSA,WSB,FBEND       end of record / current character\n         CLR   WSB,WSA\n         BNM   RDEOR               END OF RECORD\n         XR    WSA,WSA\n         IC    WSA,0(WSB)          PICK UP CHARACTER\n         LA    WSB,1(WSB)          STEP POINTER\n         ST    WSB,FBPTR\n         L     WSB,ARG2\n         ST    WSA,0(WSB)          set char\n         LA    RESULT,1            result TRUE\n         BR    PLINK\n*\nRDEOR    XR    RESULT,RESULT       FALSE\n         $EXITF\n*\n*\n* PROC(SYSFILE,REF INT)BOOL sysreadint\n*\n         $ENTRYF 22\n         LOADFILE ARG1\n         LM    WSA,WSB,FBEND\nRDI2     CR    WSB,WSA             check for end of record\n         BNL   RDI0\n         CLI   0(WSB),C' '         ignore initial spaces\n         BZ    RDI3\n         LA    WSD,*+5             point to '+'\n         CLI   0(WSB),C'+'\n         BZ    RDI4\n         CLI   0(WSB),C'-'\n         BNZ   RDI6\n         LA    WSD,=X'0D'\n         B     RDI4\nRDI6     BCTR  WSB,0\nRDI4     LA    WSE,1(WSB)          note first digit position\nRDI7     LA    WSB,1(WSB)\n         CR    WSB,WSA\n         BNL   RDI5                end number with end of line\n         CLI   0(WSB),C'0'\n         BL    RDI5                or with non digit\n         CLI   0(WSB),C'9'\n         BNH   RDI7\nRDI5     ST    WSB,FBPTR           reset input pointer\n         SR    WSB,WSE             length of number\n         BZ    RDIERR              no digits\nRDI8     BCT   WSB,RDI10\nRDI9     CH    WSB,=H'16'\n         BNL   RDIER               if too many digits (>16 (sic))\n         EX    WSB,XPACK           (assumes <17 digits!)\n         MVN   CVDWS+7(1),0(WSD)   insert sign\n         CVB   WSA,CVDWS           to binary\n         B     RDIEND\n*\nRDI0     DS    0H\nRDIERR   XR    RESULT,RESULT       FALSE\n         B     RDIXIT\n*\nXPACK    PACK  CVDWS(8),0(1,WSE)   (executed)\n*\nRDI3     LA    WSB,1(WSB)          skip initial spaces\n         B     RDI2\n*\nRDI10    CLI   0(WSE),C'0'         skip leading zeros\n         BNE   RDI9                if not a zero\n         LA    WSE,1(WSE)          try next\n         B     RDI8\n*\nRDIEND   DS    0H\n         L     WSB,ARG2\n         ST    WSA,0(WSB)\n         LA    RESULT,1            TRUE\nRDIXIT   $EXITF\n         DROP  FILE\n*\n*\n*\n*\n* PROC(SYSFILE,REF STRING)BOOL sysreadstring\n*     (n.b. always assigns a string and updates charpos;\n*           yields TRUE if stringterm is encountered, else FALSE.)\n*\n         $ENTRY 26\n         LOADFILE ARG1,R=WSF\n         SR    WSA,WSA             FALSE\n         ST    WSA,ARG3+L'ARG3\n         LA    WSA,NULLSTR         prepare for exit if no chars left\n         LM    FND,FPTR,FBEND\n         SR    FND,FPTR\n         BNP   RDSTR3              if no chars left\n         LR    WSD,FPTR\n         L     WSA,STRINGTM-3      term char\n         MVI   ARG3+L'ARG3+3,1     TRUE\nRDSTR2   DS    0H\n         EX    WSA,RDSTRCLI        look for term\n         BE    RDSTR1              if found\n         LA    WSD,1(WSD)          to next char\n         BCT   FND,RDSTR2\n         MVI   ARG3+L'ARG3+3,0     FALSE\nRDSTR1   DS    0H\n         ST    WSD,FBPTR           leave char ptr at term (if any)\n         DROP  WSF\n         SR    WSD,FPTR            number of chars\n         LR    WSE,FPTR            start of chars\n         LR    WSF,WSD\n         $ICALL GETSTR             get string space from heap\n         LR    WSC,WSF\n         $ICALL MOVE1              move chars into string\nRDSTR3   DS    0H\n         L     WSF,ARG2\n         ST    WSA,0(WSF)          set string 'result'\n         L     RESULT,ARG3+L'ARG3  result\n         $EXIT\n*\nRDSTRCLI CLI   0(WSD),*-*\n*\n*\n*\n* PROC(SYSFILE)BOOL sysendline\n*\n         $ENTRY 16\n         LOADFILE ARG1\n         TM    FFLAGS,FINOUT\n         BZ    NLI\n         LA    FCC,C' '            default ANSI ccc\n         B     SYSWCC1\nNLI      $ICALL GETLINE\n         BZ    EXITTRUE            if getline ok\n         XR    RESULT,RESULT       else FALSE\nNLXIT    $EXIT\n         DROP  FILE\n*\n*\n* PROC(SYSFILE,REF INT)BOOL sysreadcc\n*\n         $ENTRY 28\n         LOADFILE ARG1\n         TM    FFLAGS,FINOUT\n         BNZ   NQERR               if output file\n         $ICALL GETLINE\n         LA    WSA,0               (WSA=RESULT<-FALSE) c-code unaltered\n         BNZ   RCCX                if EOF\n         L     WSB,ARG2\n         IC    WSA,FCCC\n         ST    WSA,0(WSB)          set the int\nEXITTRUE LA    RESULT,1            TRUE\nRCCX     $EXIT\n         DROP  FILE\n*\n*\n*\n* PROC(SYSFILE,INT)BOOL syswritecc\n*\n         $ENTRY 29\n         LOADFILE ARG1\n         TM    FFLAGS,FINOUT\n         BZ    NPERR\n         L     FCC,ARG2\nSYSWCC1  DS    0H\n         $ICALL ENDRECCC\n         $ICALL NXTREC\n         LA    RESULT,1            TRUE\n         $EXIT\n         DROP  FILE\n*\n*\n*\n*\n*        getline\n*\nGETLINE  $IENTRY\n         USING FDATA,FILE\n         TM    FFLAGS,FINOUT\n         BNZ   READERR             if output file\n         TM    FFLAGS,FPARM+FEOF deal with special states\n         BNZ   NXT5\nNXT2     OI    FFLAGS,FIRSTIME     SET SWITCH FOR UNLIKE CONCATENATION\n         GET   (FILE)\n         LA    R1,0(R1)            clean top byte (left dirty by TCAM)\n         TM    FFLAGS,FIRSTIME\n         BZ    NXT2                RETRY IF FAILED\n         MVI   FCCC,C' '           default ANSI ccc\n         TM    DCBRECFM-IHADCB+FDCB,RECFMCC\n         BZ    GETLNOCC            if no carriage controls\n         MVC   FCCC,0(R1)          copy the provided cc\nGETLNOCC DS    0H\n         LR    R0,R1\n         AH    R0,DCBLRECL-IHADCB+FDCB  RECORD LENGTH\n         AH    R1,FOFFSET          start of data\n         ST    R1,FBSTART          SET UP RECORD DETAILS\n         STM   R0,R1,FBEND\n         LA    R0,1\n         A     R0,FLINE\n         ST    R0,FLINE\n         SR    R0,R0               set condition code to mark not EOF\n         B     GETXIT\n*\nNXT5     TM    FFLAGS,FEOF\n         BO    GETXIT              EXIT IF EOF\n*\n*        EOF ENCOUNTERED\n*\nEODAD    XC    FBSTART(12),FBSTART MARK NO BUFFER\n         OI    FFLAGS,FEOF         set up EOF and cc nonzero\nGETXIT   $IEXIT\n         DROP  FILE\n*\n* PROC(SYSFILE,INT)BOOL syssetpos\n*\n         $ENTRYF 55\n         LOADFILE ARG1\n         L     WSB,ARG2\n         BCTR  WSB,0\n         LM    WSD,WSF,FBSTART\n         AR    WSB,WSD            new position\n         LA    ENTRY,SYSMOVEP\n         USING SYSMOVEP,ENTRY\n         B     SYSSETP1           join sysmovepos\n         DROP  ENTRY,NEWP,FILE\n*\n*\n* PROC(SYSFILE,INT)BOOL sysmovepos\n*\nSYSMOVEP $ENTRYF 53\n         LOADFILE ARG1\n         L     WSB,ARG2\n         LM    WSD,WSF,FBSTART\n         AR    WSB,WSF            new position\nSYSSETP1 XR    RESULT,RESULT      FALSE\n         CLR   WSB,WSD\n         BMR   PLINK              if < start\n         CLR   WSB,WSE\n         BPR   PLINK              off end of record\n         LA    RESULT,1           TRUE\n         ST    WSB,FBPTR\n         TM    FFLAGS,FINOUT\n         BZR   PLINK             no LFE check if input\n*\n         L     WSE,FBLFE\n         CLR   WSF,WSE\n         BNP   SYSMOVE1           if old<=lfe\n         ST    WSF,FBLFE          lfe':=old\n         LR    WSE,WSF\nSYSMOVE1 DS    0H                 now lfe'=max(lfe,old)\n         CLR   WSB,WSE\n         BNPR  PLINK              if new<=lfe'\n*\n         MVI   0(WSE),C' '         pad with spaces\n         BCTR  WSB,0\n         SLR   WSB,WSE\n         BMR   PLINK             only one space needed\nSETCREST DS    0H\n         SH    WSB,=H'256'\n         BNM   SETC256\n         EX    WSB,EXMVC           put rest of spaces\n         BR    PLINK\n*\nSETC256  MVC   1(256,WSE),0(WSE)\n         LA    WSE,256(WSE)\n         B     SETCREST\n         DROP  ENTRY,NEWP\n*\nEXMVC    MVC   1(*-*,WSE),0(WSE)   executed\n*\n*\n*\n* PROC(SYSFILE)BOOL syslineended\n*\n         $ENTRYF 51\n         LOADFILE ARG1\n         XR    RESULT,RESULT\n         CLC   FBEND,FBPTR\n         BPR   PLINK\n         LA    RESULT,1\n         $EXITF\n         DROP  FILE\n*\n*\n* PROC(SYSFILE)BOOL sysfileended\n*\n         $ENTRYF 52\n         LOADFILE ARG1\n         XR    RESULT,RESULT\n         TM    FFLAGS,FEOF\n         BZR   PLINK\n         LA    RESULT,1\n         $EXITF\n         DROP  FILE\n*\n*\n*\n* PROC(SYSFILE,SYSFILE)BOOL sysreflectline\n*\n         $ENTRY 30\n         LOADFILE ARG2             to\n         DROP  FILE\n         LOADFILE ARG1,R=WSA       from\n         L     STRA,FBSTART        STRING ADDRESS AND LENGTH\n         L     STRL,FBEND\n         DROP  WSA\n         SR    STRL,STRA\n         BNP   RFDONE              exit if line empty or EOF (fudge!)\n         $ICALL PUTSTRE\n         BNZ   RFDONE              if done all\n         AR    STRL,FND            amount that can be done\n         BZ    RFDONE              if none (can't happen?)\n         $ICALL PUTSTRE\nRFDONE   $ICALL ENDREC\n         $ICALL NXTREC\n         LA    RESULT,1            TRUE\n         $EXIT\n*\n*\n* PROC(SYSFILE)INT syslinepos\n*\n         $ENTRYF 19\n         LOADFILE ARG1\n         L     RESULT,FLINE\n         $EXITF\n*\n* PROC(SYSFILE)INT syscharpos\n*\n         $ENTRYF 18\n         LOADFILE ARG1\n         LA    RESULT,1\n         A     RESULT,FBPTR\n         S     RESULT,FBSTART\n         $EXITF\n*\n*\n* PROC(SYSFILE)INT sysmaxpos\n*\n         $ENTRYF 54\n         LOADFILE ARG1\n         L     RESULT,FBEND\n         SL    RESULT,FBSTART\n         $EXITF\n         DROP  FILE\n*\n*\n* PROC(SYSFILE)INT syscharsleft\n*\n         $ENTRYF 56\n         LOADFILE ARG1\n         LM    WSA,WSB,FBEND      end of buffer, current posn\n         SLR   WSA,WSB\n         $EXITF\n         DROP  FILE\n*\n*\n**************************************************************\n*                                                            *\n* ELEM(INT,STRING)CHAR:                                      *\n*                                                            *\n**************************************************************\n*\n         $ENTRYF 63,WSB\n         L     WSC,ARG2           to string\n         SH    WSB,=H'1'\n         BC    5,ELEMERR1         if o'flow (cc3) or -ve (cc1)\n         XR    RESULT,RESULT\n         CH    WSB,0(WSC)\n         BNL   ELEM2              probably outside string\nELEM1    DS    0H\n         IC    RESULT,2(WSB,WSC)\n         BR    PLINK\n*\nELEM2    DS    0H\n         LH    WSD,0(WSC)         string length\n         N     WSD,=A(HALFMASK)\n         CR    WSB,WSD\n         BL    ELEM1              string length is 32k->64k-1\n         B     ELEMERR1           over end of string\n         DROP  ENTRY,NEWP\n*\n*\n**************************************************************\n*                                                            *\n* ELEM(INT,BITS)BOOL:                                        *\n*                                                            *\n**************************************************************\n*\n         $ENTRYF 64\n         LM    WSC,WSD,ARG1\n         LA    WSB,32\n         SR    WSB,WSC\n         BC    5,ELEMERR2         if o'flow (cc3) or -ve (cc1)\n         CH    WSB,=H'31'\n         BH    ELEMERR2           subscript was 0 or -ve\n         LA    RESULT,1\n         SRL   WSD,0(WSB)\n         NR    RESULT,WSD\n         $EXITF\n*\n*\n***********************************************************************\n*                                                                     *\n* ELEM(INT,BYTES)CHAR:                                                *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRYF 67,RESULT\n         LTR   RESULT,RESULT\n         BNP   ELEMERR3            if index<=0\n         CH    RESULT,=H'8'\n         BH    ELEMERR3            if index>8\n         IC    RESULT,ARG2+4-1(RESULT) n.b.  bytes aligned at 8\n         $EXITF\n*\n***********************************************************************\n*                                                                     *\n* + (STRING,STRING)STRING:                                            *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 68\n         LM    WSE,WSF,ARG1        and ARG2\nCOM1     DS    0H                  other combinations join here\n         LH    GENSIZE,0(WSE)      length of string1\n         LH    WSD,0(WSF)                and string2\n         N     GENSIZE,=A(HALFMASK)                  upto 64k\n         N     WSD,=A(HALFMASK)\n         AR    WSD,GENSIZE         total length\n         $ICALL GETSTR             get string space from HEAP and init\n         $ICALL MOVE               move in string1\n         LR    WSE,WSF             move in string2\n         $ICALL MOVE\n         $EXIT\n*\nGETSTR   $IENTRY\n         C     WSD,=A(HALFMASK)\n         BH    STRERR              if >=64k\n         LA    GENSIZE,2(WSD)      allow for length halfword\n         LA    ENTRY,$$$$0004\n         BALR  PLINK,ENTRY         HEAP generate (clobbers WSC)\n         STH   WSD,0(RESULT)       set length of result string\n         LR    WSD,RESULT\n         $IEXIT\n*\nMOVE     $IENTRY\n         LH    WSC,0(WSE)          length\n         N     WSC,=A(HALFMASK)\n         BZ    MOVEX               if nothing to move\nMOVE1    DS    0H\n         SH    WSC,=H'256'\n         BH    MOVE2\n         BCTR  WSC,0\n         EX    WSC,XMOVE\n         LA    WSD,257(WSD,WSC)\nMOVEX    BR    ILINK\n*\nXMOVE    MVC   2(*-*,WSD),2(WSE)  EXecuted\n*\nMOVE2    DS    0H\n         MVC   2(256,WSD),2(WSE)\n         LA    WSE,256(WSE)\n         LA    WSD,256(WSD)\n         B     MOVE1\n         DROP  BASE,PP\n*\n***********************************************************************\n*                                                                     *\n* + (STRING,CHAR)STRING:                                              *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 69\n         L     WSE,ARG1\n         LA    WSF,ARG2+L'ARG2    make string from ARG2\n         LA    WSD,1\n         STH   WSD,0(WSF)         length\n         MVC   2(1,WSF),ARG2+3\n         B     COM1\n*\n***********************************************************************\n*                                                                     *\n* + (CHAR,STRING)STRING:                                              *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 70\n         L     WSF,ARG2\nCOM2     DS    0H                 make string from arg1\n         LA    WSE,ARG2+L'ARG2\n         LA    WSD,1\n         STH   WSD,0(WSE)         length\n         MVC   2(1,WSE),ARG1+3\n         B     COM1\n*\n***********************************************************************\n*                                                                     *\n* + (CHAR,CHAR)STRING:                                                *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 71\n         LA    WSF,ARG2+L'ARG2+4   make string from arg2\n         LA    WSD,1\n         STH   WSD,0(WSF)          length\n         MVC   2(1,WSF),ARG2+3\n         B     COM2\n*\n***********************************************************************\n*                                                                     *\n*  * (STRING,INT)STRING:                                              *\n*                                                                     *\n***********************************************************************\n*\n         $ENTRY 72\n         LM    WSE,WSF,ARG1        string,int\n         LH    WSD,0(WSE)\n         N     WSD,=A(HALFMASK)    length\n         LA    RESULT,NULLSTR      prepare for fast exit\n         BZ    STIMESX             if null input string\n         MR    WSC,WSF             result string length\n         LTR   WSC,WSC\n         BM    STIMESX             exit with null string if int<0\n         BNZ   STRERR              result string exceeds 64k\n         $ICALL GETSTR             get string from heap and initialise\n         LA    WSF,1(WSF)          fiddle for bct\n         $ICALL STIMES             sets link\n         L     WSE,ARG1            regain string\nSTIMES   DS    0H\n         BCT   WSF,MOVE            construct result\nSTIMESX  DS    0H\n         $EXIT\n*\n*\n*\n*\n*\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n*\n*\n*\nRDIER    $ERROR 'readint: too many digits'\nPRBITSER $ERROR 'printbits: bitsradix not 2, 4, 8, or 16'\nWRITERR  $ERROR 'writing on input-only channel'\nNPERR    EQU   WRITERR\nREADERR  $ERROR 'reading on output-only channel'\nNQERR    EQU   READERR\nELEMERR1 $ERROR 'integer out of range for ELEM string'\nELEMERR2 $ERROR 'integer out of range for ELEM bits'\nELEMERR3 $ERROR 'integer out of range for ELEM bytes'\nCLOSERR  $ERROR 'closing unopened file'\nGENERR   $ERROR 'no storage for generator'\nBADFILE  $ERROR 'using unopened file'\nOPENE1   $ERROR 'bad data for open'\nSTRERR   $ERROR 'string exceeds 64k characters'\n         ENTRY $$$$0002\n$$$$0002 $ERROR 'obeying faulty program'\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\nNULLSTR  DC    H'0'                null string\nCOLLAPSE DC    H'29',CL29'++++ALGOL68C run time error: '\n         ENTRY $$$$0007\n$$$$0007 DC    0F'0'\nABASE1   DC    A(MAINBASE,MAINBASE+4095,0,STOP0) ENVIRON EXIT\nEXLST    DC    0F'0',X'85',AL3(DCBEXIT)  STANDARD EXIT LIST\n*\nF5       DC    F'5'\nF192     DC    F'192'\nDECSIGN  DC    0F'0',X'C0'         decimal sign for octal output\n*\n* for PRINTBITS\n*\nHEXCHARS DC    C'0123456789abcdef'\nBITSHIFT DC    AL1(0,1,0,2,0,0,0,3,0,0,0,0,0,0,0,4)\nHALFMASK EQU   X'00FFFF'\n*\n*\n         LTORG\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*\n*\n* PROC(STRING)VOID sysundefined\n*\n         $ENTRYF 38\n         L     LINK,ARG1\n         DROP  NEWP\n         L     ENTRY,AESTOP\n         DROP  ENTRY\n         BR    ENTRY\n*\nAESTOP   DC    A(ESTOP)\n*\n*\n*********************************************************************\n*                                                                   *\n* PROC(SYSFILE)BOOL sysfileopen                                     *\n*                                                                   *\n*********************************************************************\n*\n         $ENTRYF 39\n         SR    RESULT,RESULT       FALSE\n         L     WSB,ARG1\n         L     WSC,16              ->CVT\n         L     WSC,CVTMZ00(WSC)    last byte in store\n         LTR   WSB,WSB\n         BNPR  PLINK               if no sysfile\n         CR    WSB,WSC\n         BNLR  PLINK               if no sysfile\n         USING FDATA,WSB\n         CL    WSB,FSERIAL\n         BNER  PLINK               not open sysfile\n         DROP  WSB\n         LA    RESULT,1             TRUE\n         $EXITF\n*\n*\n*\n* PROC INT clock\n*\n         $ENTRY 31\n         TTIMER ,                  READ TIME\n         L     WSB,TIME\n         SR    WSB,R0              SUBTRACT FROM INITIAL VALUE\n         M     WSA,F5              CONVERT TO MILLISECONDS\n         D     WSA,F192\n         LR    WSA,WSB\n         $EXIT\n*\n*        CVTSTRING\n*\n         $ENTRYF 25,RESULT         argument to result\n         $EXITF\n*\n**************************************************************\n*                                                            *\n* LWB(STRING)INT:                                            *\n*                                                            *\n**************************************************************\n*\n         $ENTRYF 65\n         LA    RESULT,1\n         $EXITF\n*\n*\n**************************************************************\n*                                                            *\n* UPB(STRING)INT:                                            *\n*                                                            *\n**************************************************************\n*\n         $ENTRYF 66,WSA\n         LH    RESULT,0(WSA)\n         N     RESULT,HALFWORD\n         $EXITF\n*\n*\n**************************************************************\n*                                                            *\n* CF string comparison: RESULT := SIGN(string1 - string2)    *\n*        string length 0 -> 64k-1                            *\n*                                                            *\n**************************************************************\n*\n         $ENTRYF 59\n         L     RESULT,ARG2         char2\n         S     RESULT,ARG1         char1\n         BZR   PLINK\n         LA    RESULT,1\n         BNPR  PLINK\n         LCR   RESULT,RESULT\n         $EXITF\n*\n*\n         $ENTRYF 61                OP (CHAR,STRING)INT:\n         LA    WSB,ARG1+1          ) simulate string1\n         LA    WSE,1               )\n         L     WSC,ARG2\n         B     CF0\n         DROP  ENTRY,NEWP\n*\n         $ENTRYF 62                OP (STRING,CHAR)INT:\n         L     WSB,ARG1\n         LA    WSC,ARG2+1          )  simulate string2\n         LA    WSD,1               )\n         LH    WSE,0(WSB)\n         B     CF00\n         DROP  ENTRY,NEWP\n*\n*\n         $ENTRYF 60                OP (STRING,STRING)INT:\n         LM    WSB,WSC,ARG1        and ARG2\n         LH    WSE,0(WSB)          string1 length\nCF0      DS    0H\n         LH    WSD,0(WSC)          string2 length\nCF00     DS    0H\n         BALR  ENTRY,0             addressability for char paths\n         USING *,ENTRY\n         XR    RESULT,RESULT\n         LR    WSF,WSD\n         CR    WSD,WSE\n         BL    CF1                 if length2 < length1\n         LR    WSF,WSE             string 1 is shorter - use it\nCF1      DS    0H\n         LTR   WSF,WSF\n         BNH   CF6                 if lengths zero or >=32k\n         BCTR  WSF,0               machine length\nCF2      DS    0H\n         SH    WSF,H256\n         BNL   CF5                 if length > 256\n         EX    WSF,CFCLC           compare logical characters\n         BNE   CF3                 if chars differ\n         CR    WSE,WSD             otherwise compare lengths\n         BER   PLINK\nCF3      DS    0H\n         LA    RESULT,1            if arg1>arg2\n         BHR   PLINK\n         LCR   RESULT,RESULT       otherwise arg1<arg2\n         BR    PLINK\n*\nCF5      DS    0H                  lengths longer than 256\n         CLC   2(256,WSB),2(WSC)\n         BNE   CF3\n         LA    WSB,256(WSB)\n         LA    WSC,256(WSC)\n         B     CF2                 loop for next segment\n*\nCF6      DS    0H                  both lengths 0 or one or both >= 32k\n         BER   PLINK               if both zero\n         N     WSD,HALFWORD        to 64k-1\n         N     WSE,HALFWORD\n         BR    ENTRY\n         DROP  ENTRY,NEWP\n*\nCFCLC    CLC   2(0,WSB),2(WSC)     EXecuted\nH256     DC    H'256'\nHALFWORD DC    A(HALFMASK)\n*\n*\n* PROC(REF\u00e2\u00e4INT)INT packstring\n*\n         $ENTRYF 24,WSB            define entry 24, arg to WSB\n         L     WSC,0(WSB)          COUNT\n         LR    WSA,WSB             TO BE LENGTH\n         LR    WSE,WSA\n         LTR   WSC,WSC\n         BZ    PACK7               NULL STRING\n*\nPACK1    LA    WSB,4(WSB)          MAIN LOOP\n         LA    WSA,1(WSA)\n         MVC   1(1,WSA),3(WSB)\n         BCT   WSC,PACK1\n*\nPACK7    SR    WSA,WSE\n         STH   WSA,0(WSE)\n         LA    WSA,5(WSA)          ROUND AND\n         SRA   WSA,2                  POSITION AS INTEGER\n         $EXITF\n*\n*\n* PROC INT stackavailable\n*          heapavailable\n*          storeavailable\n*\n         $ENTRYF 34                stack\n         $ENTRYF 35                heap\n         $ENTRYF 36                store\n         L     RESULT,0(DWOST)     dwost low water mark\n         L     WSB,HEAPLIM         heap low water mark\n         CLR   WSB,RESULT\n         BNL   LDWOST\n         LR    RESULT,WSB\nLDWOST   DS    0H\n         SLR   RESULT,NEWP\n         $EXITF\n*\n*\n* PROC INT storeused\n*\n* MVT only - allows for multiple regions belonging to this TCB\n*\n         $ENTRYF 37\n         L     RESULT,0(DWOST)     dwost low water mark\n         L     WSB,HEAPLIM         heap low water mark\n         CLR   WSB,RESULT\n         BNL   LDWOST1\n         LR    RESULT,WSB\nLDWOST1  DS    0H\n         SLR   RESULT,NEWP\n         LCR   RESULT,RESULT       -storeavailable\n*\n         L     WSB,16              ->CVT\n         L     WSC,0(WSB)          ->TCBWORDS\n         L     WSC,4(WSC)          ->TCB\n         L     WSD,TCBDPQE(WSC)    ->DPQE (-8)\n*\u00c2         L     WSB,CVTMZ00(WSB)    amount of store of the m/c\n         B     PQEL1\n*\n* note that the pqe chain can change dynamically because of the\n* action of other tasks\n* in any case, the store used will fluctuate if other tasks are\n* active in this jobstep.\n*\nPQELOOP  LA    WSE,3\n         NR    WSE,WSD\n         BNZR  ENTRY               reenter if not at full word\n         A     RESULT,PQEREGSZ(WSD) +size of this region\n*\u00c2         L     WSE,PQEFPQE(WSC)\n*\u00c2         LA    WSE,0(WSE)\n*\u00c2         CLR   WSE,WSD\n*\u00c2         BNER  ENTRY               if pqe chain is altered\n*\u00c2         L     WSE,PQEBPQE(WSD)\n*\u00c2         LA    WSE,0(WSE)\n*\u00c2         CLR   WSE,WSC\n*\u00c2         BNER  ENTRY               ditto\nPQEL1    LA    WSC,0(WSD)\n         L     WSD,PQEFPQE(WSC)    ->next (or first) pqe\n         LA    WSD,0(WSD)          clear top byte\n*\u00c2         CR    WSD,WSB\n*\u00c2         BHR   ENTRY               points out of store\n         LTR   WSD,WSD\n         BNZ   PQELOOP             if not end of pqe chain\n         $EXITF\nTCBDPQE  EQU   152\nCVTMZ00  EQU   164\nPQEFPQE  EQU   8\nPQEBPQE  EQU   12\nPQEREGSZ EQU   20\n*\n*\n*\n*\n*\n*\n* PROC(INT)VOID setreturncode\n*\n         $ENTRYF 20,WSA\n         L     WSB,ARETCODE\n         ST    WSA,0(WSB)\n         $EXITF\n*\n*\n*******************************************************************\n*                                                                 *\n* sysdecomposereal(REAL, REF INT, REF REAL)VOID:                  *\n*                                                                 *\n*******************************************************************\n*\n*\n         $ENTRYF 77\n         LM    WSA,WSD,FARG1\n         L     WSE,EXPPART\n         NR    WSE,WSA             extract exponent\n         XR    WSA,WSE\n         SRL   WSE,24\n         O     WSA,EXP64\n         ST    WSE,0(WSC)          set REF INT exponent part\n         STM   WSA,WSB,0(WSD)      set REF REAL mantissa part\n         $EXITF\n*\nEXPPART  DC    0F'0',X'7F000000'   exponent bits\nEXP64    DC    0F'0',X'20000000'   exponent zero\n*\n*\n*\n*\n*        enter here with run time errors\n*\n*\n*\nESTOP    DS   0H\n         BALR  ENTRY,0\n         USING *,ENTRY\n         LM    BASE,NXTBASE,ABASE\n         DROP  ENTRY\n         USING MAINBASE+4095,NXTBASE\n         USING MAINBASE,BASE\n         OC    EDUMP,EDUMP\n         BNZ   STOPA               prevent looping\n         ST    LINK,EDUMP\n         L     FILE,ERROUT\n         USING FDATA,FILE\n         CLC   FBPTR,FBSTART\n         BNE   ESTOP1\n         CLC   FBLFE,FBSTART\n         BE    ESTOP2               if line not used yet\nESTOP1   DS    0H\n         $ICALL ENDREC\n         $ICALL NXTREC\nESTOP2   DS    0H\n         $ICALL ENDREC\n         $ICALL NXTREC\n         LH    STRL,COLLAPSE\n         LA    STRA,2+COLLAPSE\n         $ICALL PUTSTRE\n         L     LINK,EDUMP\n         LH    STRL,0(LINK)\n         LA    STRA,2(LINK)\n         $ICALL PUTSTRE\n*\nSTOPA    LA    R15,12\n         L     R14,ARETCODE\n         ST    R15,0(R14)       set returncode\n         B     STOP0\n*\n*        CLOSE ALL FILES\nSTOP0    DS    0H\n         XC   ERROUT,ERROUT          allow it to be closed\n         BALR  PLINK,0             LINK FOR REPEAT\n         OC    FILECHN,FILECHN\n         BZ    STOP1               NO FILES LEFT\n         LA    NEWP,GFRAME         SET UP CALL OF CLOSE\n         USING FRAME,NEWP\n         MVC   ARG1,FILECHN\n         LA    ENTRY,$$$$0033\n         BR    ENTRY\n         DROP  NEWP\n*\nSTOP1    DS    0H\n         DROP  BASE,NXTBASE\n         L     R0,GDWBASE          COMPUTE STACK SIZE\n         SR    R0,GLOBAL\n         LR    R1,GLOBAL\n         L     13,OLDSAVE\n         FREEMAIN R,LV=(0),A=(1)  FREE STACK\n         LM    LINK,12,R14DUMP\n         BR    LINK\n*\n*\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n         $GLOBAL GINITL            include initarea field\nCHEK1    EQU   CHEK-INITAREA-GINITL\nCHEK2    EQU   INITAREA-CHEK+GINITL\n         DC    0Y(CHEK1),0Y(CHEK2) CHECK initialisation sizes\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*        DATA FOR OPEN\n*\nDCBDATA  DSECT\nDATAFLG1 DS    X                   OPTION FLAGS\n*        FINOUT, FPARM from FFLAGS\nDATAFLG2 DS    X                   FLAGS FOR OPEN (+80)\n*\n         $DCBD\n*\n*\n**************************************************************\n*                                                            *\n*                                                            *\n*                                                            *\n**************************************************************\n*\n*        GETMAIN WORK AREA\n*\nGETM     DSECT\n         GETMAIN VU,MF=L\nGETMLA   DS    2F                  VARIABLE LENGTH PAIR\nGETMA    DS    2F                  RETURNED ADDRESS AND SIZE\nGETML    EQU   *-GETM\n*\n*\n*\n*\n         END   $A68INIT\n./       ENDUP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C17": {"ttr": 7172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x02\\x02\\x02\\x02\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 514, "newlines": 514, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C18": {"ttr": 7427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\xcb\\x00\\xcb\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 203, "newlines": 203, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C19": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x01\\x89\\x01\\x89\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 393, "newlines": 393, "modlines": 0, "user": "ALGOL68"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "A68C20": {"ttr": 7683, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00\\xd1\\x00\\xd1\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 209, "newlines": 209, "modlines": 0, "user": "ALGOL68"}, "text": "Changes in version 247/119/107/127 since 243/117/106/126\n--------------------------------------------------------\n\n1. Bugs mended (for details see AL68.BUGS):\n\n   327-337, 342-344, 347, 348, 350, 351, 356, 358, 361, 364-366, 373,\n   375, 380.\n\n\n2. Priority definitions for ! & and NEQ\n\n   ! & and NEQ no longer have priority definitions in the standard\n   environment.  This is a temporary measure associated with the\n   change in the language definition to bring ALGOL68C into line with\n   ALGOL 68 (Revised).  The compiler issues a message if an operator\n   is used for which there is no associated priority definition.  Thus,\n   if the user has not provided priority definitions, existing uses of\n   the above operators will give rise to messages to warn him that the\n   meaning of his program may have changed.\n\n   Priority definitions for these operators will be reintroduced into\n   the implementation win some later version (or if an installation\n   wishes, it may of course reintroduce the definitions itself).\n\n\n   N.B.  The priority definitions for >> and << have already been\n         changed to 8.\n\n\n3. The file idfs for the program source and the program heading (from the\n   parameter channel) are now read from the initialisation file (in the\n   same way that the zcode and environment output file idfs are read).\n   The only idfs assumed by the compiler are for the initialisation\n   file (the null idf on initialisation channel) and for the message\n   output file (the null idf on standout channel).\n\n\n4. Square brackets are replaced by round brackets in all messages\n   generated by the compiler: e.g. ()AMODE instead of \u00e2\u00e4AMODE.  Note\n   however, the reflection of an input line following a phase 1 error\n   message does not translate brackets (or anything else).\n\n\n5. Standard Environment: CMPX\n\n   'read compl' and 'print compl' are now available, but they\n   do not yet give least significant digit accuracy.\n\n\n6. Standard environment: REAL\n\n6.1 'read real', 'print fixed' and 'print float' are now available\n    but do not yet give least significant digit accuracy.  'print real'\n    now calls 'print float' in a similar manner to that described in\n    the ALGOL 68 Report (Revised) and thus the 360/370 version prints\n    more digits.\n\n    PROC print fixed = (REF FILE f, REAL r, INT width, after)BOOL:\n\n         #Attempt to print in fixed point format in a total width of\n          'ABS width' with 'after' digits after the decimal point.\n          The sign is always printed if 'width>0'.  Yields TRUE only\n          if printing was successful.#;\n\n    PROC print float = (REF FILE f, REAL r, INT width, after, exp)BOOL:\n\n         #Attempt to print in floating point format in a total width of\n          'ABS width' with 'after' digits after the decimal point and\n          an exponent field width of 'ABS exp'.  The mantissa sign is\n          always printed if 'width>0'.  The exponent sign is always\n          printed if 'exp>0'.  Yields TRUE only if printing was\n          successful.#;\n\n6.2 Random number routines are now available.\n\n\n7. Standard environment: BASE\n\n7.1 The SYS and BASE segments have been merged into the single\n    segment BASE (the compiler and 360/370 ZCODE translator now have\n    the SYS segment included in their code).\n\n7.2 OP * = (INT a, CHAR b)STRING: #now available - see the ALGOL 68\n    Report (Revised) for details.  N.B. The heap is used.#;\n\n7.3 'read string' is available (N.B. the heap is used).\n\n7.4 'move char pos' is no longer available, it has been replaced by\n    'move char number' (for compatibility with 'set char number').\n\n\n8. Standard Environment - 360/370 assembler library:\n\n8.1 The operator + is available yielding STRING for all combinations of\n    CHAR and STRING operands.\n\n8.2 OP ELEM = (INT a, BYTES b)CHAR: #is available.#;\n\n8.3 Miscellaneous reorganisation of the assembler library has taken place.\n\n8.4 The restriction to a maximum of 5 books simultaneously open has been\n    lifted, but not that the corresponding O.S. control blocks\n    (DCBs) are allocated from the heap (but they are reused whenever\n    possible).\n\n\n9. Standard Environment - 360/370 version\n\n9.1 The total size of the library is now somewhat over 30K (bytes).\n\n9.2 Subsets of the library may be obtained by including a USING directive\n    at the head of the program (or on the PARM string preceded by /) as\n    follows:\n\n      to exclude complex arithmetic:\n\n          USING USER FROM \"SYSENV(REAL)\"\n\n      to exclude complex and much of real arithmetic:\n\n          USING USER FROM \"SYSENV(BASE)\"\n\n\n10. Link Editing (360/370 only):\n\n   The A68CL procedures now work correctly, no dummy ENTRY statement\n   is needed for the LKED step.\n\n   ENTRY A68INIT should no longer be used as a LKED control statement in\n   any LKED steps.\n\n\n\n11. ZCODE: the operations F271, F273, F275, F277 (previously not used)\n   have been redefined - see \"ZCODE: A simple machine\" edition 7 or\n   later.\n\n\n\nSome of the more important changes in version 243/117/106/126\n-------------------------------------------------------------\n\n1 OS CSECT and ENTRY names.\n\n   To avoid clashes of names, all internally generated CSECT and ENTRY\nnames will begin with the character \"$\".\n\nExample: $A68INIT\n\n\n2 Name directive\n\n   A name may be given to the CSECT produced by the translator by using\na name directive in the program heading-option.  The name is passed to\nthe translator and also to the environment (if any) produced.  As well\nas giving the name to the CSECT, the translator generates an external\nreference to the name of the parent module, if that module had a name.\nIf the parent module is stored in a linkage editor call library with the\nsame member name as its CSECT name, the module will be loaded\nautomatically by the linkage editor (see the example in section 6\nbelow).\n\nExample (of the name directive): NAME \"MYCSECT\"\n\n\n3 ANDF and ORF.\n\n   The relative binding powers of ANDF (and ORF) and := (and :=:=) have\nbeen changed, since the previous implementation is incorrect.\nPreviously, := and :=:= bound more tightly than ANDF and ORF, and this\nhas been changed to make ANDF and ORF bind more tightly than := and\n:=:=.  For example,\n\n  'a := b ORF c' used to mean '(a:=b) ORF c'\n   and now means 'a := (b ORF c)'\n\n  'a ORF b := c' has not changed.\n\n   The compiler will issue a warning message after the change has been\nmade if it detects a construction of this form having a changed meaning.\n\n\n4 Titles.\n\n  In previous versions of the compiler, a freestanding tag at the head\nof a program has been treated as the title of the segment.  This leads\nto a minor ambiguity which has been resolved by needing such a title to\nbe preceded by the title-symbol (TITLE).\n\nExample: TITLE some tag\n\n\n5 Mode declarations involving actual rowers\n\n   Previous versions of the compiler allowed mode-declarations with\nactual rowers, such as\n\n        MODE ROWMODE = \u00e21:5\u00e4INT;\n\nBecause of changes to the compiler to make the handling of rows more\ngeneral, this form of mode declaration is no longer implemented. It\nwill, of course, be implemented when the treatment of rows within the\ncompiler is complete.\n\nBut, of course, declarations of the form\n\n        MODE REFROWMODE = REF\u00e2\u00e4INT;\n\nare still allowed.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C21": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x01\\xe0\\x01\\xe0\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 480, "newlines": 480, "modlines": 0, "user": "ALGOL68"}, "text": "385. A68C\n\n\"a AT b\" parses as \":a AT b\" whereas it should be \"a: AT b\", and\nsimilarly for \"a @ b\".\n\n\n\n384. A68C  (fixed in Release 1)\n\nA routine delivering PROC VOID is not always elaborated correctly.\n\n\n\n383. XREF  (fixed in XREF version 107)\n\nPrints one character more than it reads in the heading title.\n\n\n\n382. (empty entry)\n\n\n\n\n381. A68C\n\nThere is no runtime test (yet) for the sign of the by-part and no\nerror or warning message (part of \"variable by-part not yet\nimplemented\").\n\n\n\n380. A68C  (fixed in version 247)\n\nIncorrect code is sometimes generated if all registers are in use.\n\n\n\n379. A68C\n\nNo error message is generated if a call delivers void in a nonvoid\ncontext.\n\n\n\n378. A68C\n\nIf a for-loop has no FOR or TO parts, the FROM and BY parts are not\nelaborated.\n\n\n\n377. Z370\n\nShould check for the modifier register being legal.\n\n\n\n376. (This entry is empty)\n\n\n\n375. Distribution job (fixed at level 247/119/107/127)\n\nMessage IEF611I occurs intermittently.\n\n\n\n374. 370 library\n\nWhen allocating space for the stack, only multiples of 2k should be\nfreed.\n\n\n\n373. A68C  (fixed in version 246)\n\nDynamic stack management is incorrect if there is more than a single\nrange using the dynamic stack in any routine (or in the 'main program').\n\n\n\n372. (This entry is empty)\n\n\n\n371. (This entry is empty)\n\n\n\n370. (This entry is empty)\n\n\n\n369. (This entry is empty)\n\n\n\n368. (This entry is empty)\n\n\n\n367. A68C\n\n\u00e21:0\u00e4 should properly allocate a new name with dummy elements.\n\n\n\n366. Z370 (fixed in version 119)\n\nThe 370 translator ignores the first record.\n\n\n\n365. A68C (fixed in version 246)\n\nA radix denotation lacking digits after the radix symbol is not faulted\nin the lexical analysis.\n\n\n\n364. A68C (fixed in version 246)\n\n\".\" should not be legal within tags.\n\n\n\n363. A68C\n\nDisplacement combined with widening is completely broken: e.g.\n\n     REAL x := 1.0, y; y := x +:=:= 3\n\ny will not be 1.0.\n\n\n\n362. A68C\n\nNo error message (not implemented message) is generated for attempts\nto copy rows.\n\n\n\n361. ZLIB (Fixed in version 127)\n\n'sysfileopen' yielded TRUE after open failed.\n\n\n\n360. A68C\n\nBrief heap declarations will only work for row modes; i.e.\n\n    HEAP INT tag;\n\nor\n\n    HEAP INT tag :=\n\nwill not work, but\n\n    REF INT tag = HEAP INT;\n\nor\n\n    REF INT tag = HEAP INT :=\n\nwill work.\n\n\n\n359. ZCODE definition\n\nIt is not clear whether zcode registers 0 and 1 are legal when used\nas real registers.  Certainly Z370 will not allow this usage.\n\n\n\n358. A68C ((temporary) fixed in version 245)\n\nConditionals will not yield a nonslaveable result to an explicit\ndestination. e.g.\n\n     PROC p = STRUCT(INT a,b): IF b THEN (1,2) ELSE .... FI;\n\n\n\n357. A68C\n\nPostmortem routine will loop in segment A below:\n\n    ((MODE M = STRUCT(REF M); SKIP) ENVIRON A)\n\n\n\n356. A68C (fixed in version 246)\n\nA program consisting of tag STROP leaves the tree corrupted giving\nrise to \"system error\" and \"consult expert\" messages.\n\n\n\n355. A68C\n\nThere is no check that a serial does not end with a declaration; thus\n\n    AMODE a = ( SKIP; AMODE b = c)\n\nis not faulted.\n\n\n\n354. A68C\n\nThe error \"IF ... THEN ... FI cannot be coerced to ...\" should be a\nwarning message only as it is formally equivalent to\nIF ... THEN ... ELSE SKIP FI.\n\n\n\n353. A68C\n\nVOID tag = SKIP; is not faulted.  No VOID identity definitions or\ndeclarations are legal.\n\n\n\n352. (see 360)\n\n\n\n351. A68C (Fixed in version 244)\n\nIf prefix-quote stropping was used, no radix-symbol or exponent-\nsymbol was legal.\n\n\n\n350. ZLIB  (Fixed in version 127)\n\nELEM(INT,BITS)BOOL completely broken.\n\n\n\n349. A68C\n\nREAL row displays are not allowed (giving rise to \"non-constant row\ndisplay\" message).\n\n\n\n348. ZLIB   (Fixed in ZLIB/127)\n\nprint(max real) gives abend0CC.\n\n\n\n347. A68C (Fixed in version 244)\n\nCoercion error message \"CASE not allowed in ... context\" should be\n\"CODE not allowed in ... context\".\n\n\n\n346. Z370 (error message produced in version 118)\n\nR1 may be used twice as work register in the A0 instruction leading\nto incorrect results (e.g. MVC 0(X,R1),0(R1) ).\n\n\n\n345. Z370/A68C\n\nREF\u00e2\u00e4AMODE := NIL generates A0 0 N x y a b.  NIL is not yet implemented\nin this position.\n\n\n\n344. A68C (Fixed in version 244)\n\nAMODE a := b, c = d; error recovery faulty, leaves mode=0.\n\n(Also fixed is \"HEAP AMODE a, b, c;\", b and c were not on the heap.)\n\n\n\n343. A68C (Fixed in version 244)\n\n(a:b) when used to slice is analysed as label a:. But \u00e2a:b\u00e4 is ok.\n\n\n\n342. DISTRIB (ZLIB/127 is reentrant)\n\n360/370 distribution - ZLIB should be linkedited as REUS not RENT.\n\n\n\n341. A68C\n\nSlicing with empty lower-bound-option should give a \"not implemented\"\nmessage instead of using the value 1.\n\n\n\n340. (empty)\n\n\n\n339. ZLIB/360 and its environment (Fixed in version 127)\n\n'sysreflectline' should yield a BOOL indicating if the output line is ok.\n\n\n\n338. USERLIB (Fixed in version 107)\n\n'printwhole' should find a line of sufficient width.\n\n\n\n337. ZLIB/360    (Fixed in version 127)\n\nConcatenation of unlike record formats not handled correctly.\n\n\n\n336. ZLIB/360    (Fixed in version 127)\n\nTSO terminal input gives ABEND0C4.  QSAM/TGET interface leaves junk\nin top byte of R1 after GET/LOCATE.  Fix by adding LA R1,0(R1) after\nGET macro in GETLINE subroutine.  For safety, the analagous thing\nshould be done for PUT.\n\n\n\n335. Z370 (Fixed in version 118)\n\nFRPT gives the wrong result.\n\n\n\n334. A68C (Fixed in version 244)\n\nCannot use intersegment jumps.  A negative number is output in an\nenvironment file for a label and is not read back in correctly.\n\n\n\n333. A68C (Fixed in version 244)\n\nError messages should not use \"\u00e2\", \"\u00e4\" because of character set\ninconsistencies between Cambridge EBCDIC and IBM EBCDIC.\n\n\n\n332. A68C (Fixed in version 244)\n\nRuntime error message without compiler diagnostic occurs if there is\nan empty parameter in a call.\n\n\n\n331. ZLIB/360    (Fixed in version 127)\n\nRECFM=UA with explicit BLKSIZE and LRECL output adds an extra blank to\nevery line and also appends X'00' to the end of a null line.\n\n\n\n330. ZLIB/360    (Fixed in version 127)\n\n'sysreadcc' does not yield false at end of file.\n\n\n\n329. ZLIB/360    (Fixed in version 127)\n\nRECFM=UA with default BLKSIZE and LRECL is treated as VBA.\n\n\n\n328. ZLIB/360    (Fixed in version 127)\n\nRECFM=VA or V gives ABEND013-20 if default BLKSIZE and LRECL are used.\n\n\n\n327. A68C (Fixed in version 244)\n\nPhases 2 and 3 are entered after a parser collapse.  Parser collapses\nshould not go to label 'parser exit' in S1.\n\n\nErrors for A68C243, Z370117, USERLIB106, ZLIB(360)126 above.\n===========================================================\n\n\n\n325. A68C\n\nProceduring of 'GOTO x' is in the reference manual but is not implemented.\n\n\n\n324. A68C\n\nUniting, rowing, and widening CHAR to STRING is needed in phase 3.\n\n\n\n321. A68C\n\nLoop in 'operate' on programs such as 'REAL r;print(INT(r)<<4)'\n\n\n\n320. Z370\n\n'maxint>-3' yields FALSE on the 370.  This is a consequence of the\ncompiler generating a subtract to do the comparison, and the\ntranslator does not optimise.  If maxint were set to 2**30-1 instead\nof 2**31-1, the problem would not arise.   This will be fixed with\nthe proposed new ZCODE.\n\n\n\n310. A68C\n\n'AMODE tag = SKIP' causes junk to output to an environment file.\nSee also 256.\n\n\n\n298. A68C\n\nDeclarations of the form '\u00e21:2 AT 3\u00e4AMODE x' should be faulted.\n\n\n\n291. A68C\n\n'MODE X = \u00e21:1\u00e4 INT' is not faulted when written to environment and\ndoes not subsequently work.\n\n\n\n290. A68C\n\nError recovery should construct operator definitions where necessary.\n\n\n\n270. A68C\n\nBound scanning for e.g. STRUCT(\u00e2\u00e4INT a,b) does not work.\n\n\n\n256. A68C\n\nSKIP in a strong PROC VOID context produces bad code.\n\n\n\n209. A68C\n\nWHILE serial is not implemented - use WHILE unit instead.\n\n\n\nThe above errors are pending from earlier.\n==========================================\n\n\nThese error reports are in reverse chronological sequence for ease\nof reference.  Each entry will be marked with the version number when\nthe bug was corrected, except that those entries in the pending group\nwill be removed when fixed.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C22": {"ttr": 7940, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00+\\x00+\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "ALGOL68"}, "text": "   Unimplemented facilities. 1975 May 20\n\n   . Garbage collection of the heap.\n\n   . Copying of multiple values.\n\n   . Multiple values of more than one dimension.\n\n   . Generators for \u00e2\u00e4\u00e2\u00e4AMODE objects.\n\n   . Uniting and case conformity clauses.\n\n   . Rowing.\n\n   . Completers.\n\n   . Serial clause following while-symbol.\n\n   . Identity relations for REF\u00e2\u00e4AMODE names.\n\n   . Proceduring of jumps.\n\n   . Standard prelude: LWB, UPB for multiple values,\n                       operators for BYTES,\n                       input of BYTES.\n\n   . FOR loop with variable BY part.\n\n   . :=:= for non-simple values.\n\n   . op:= unless done by hardware.\n\n   . >> or SHR with variable right operand.\n\n   . Non-constant row displays.\n\n   . Actual bounds in mode definitions.\n\n   . Selecting from \u00e2\u00e4STRUCT.\n\n   . Empty bounds in a slice.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "A68C23": {"ttr": 7942, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00>\\x00>\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "ALGOL68"}, "text": "                Differences between ALGOL68C and ALGOL 68\n\n\nRestrictions\n\n.   No parallel clauses.\n\n.   No flexible names.\n\n.   No formatted transput.\n\n.   No vacuums.\n\n.   An indicant may not be used as both an operator and a\n    mode-indication.\n\n.   Round brackets are not available in row-declarers.\n    (But see 'row-symbol' below.)\n\n.   Colon-symbol must not be present in virtual rowers.\n\n.   Both bounds must be specified in an actual rower.\n\n.   := and =: are not available in operators.\n    (But see 'assign-formulas' below.)\n\n.   Widening of BITS and BYTES is not provided.\n\n\nExtensions\n\n.   Labels in enquiry-clauses.\n\n.   UPTO and DOWNTO in loop-clauses.\n\n.   Until-part in loop-clauses.\n\n.   Operator priorities.\n\n.   Row-symbol in row-declarers.\n    (e.g. ROW()AMODE as an alternative to \u00e2\u00e4AMODE.)\n\n.   Monadic-formula is a secondary.\n\n.   Displacements (yielding the previous value).\n\n.   Assign-formulas (op:= and op:=:= are automatically available for all\n    op).\n\n.   Predicates (ANDF and ORF have defined sequence of elaboration).\n\n.   Handles.\n\n.   Escaped-characters in string-denotations (e.g. *\" yields \").\n\n.   Use of square brackets in calls.\n\n.   Thef-symbol in conditional-clauses.\n    (e.g. IF a THEF b THEN c ELSE d FI)\n\n.   :\u00ac=: as a representation of the is-not-symbol.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C24": {"ttr": 7944, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x00d\\x00d\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "ALGOL68"}, "text": "===========================  Pack / Unpack Program ===========================\n\n Specification:\n --------------\n\n         This program is used to pack and unpack text files for the ALGOL68C\n    distribution tape.\n\n         In the packed state, one physical file contains many logical files.\n    Each logical file has the format:\n\n              HEX01  \"idf\"  HEX02  text of file  HEX03.\n\n         Logical records of the file are separated by HEX1E; the records of\n    the physical file are irrelevant.  The characters HEX01, HEX02, HEX03\n    and HEX1E should not appear in the unpacked file; if they do, an error\n    message will be given, and they will be replaced by 'oddch'.\n\n         The program either packs a series of text files to one packed file\n    with the above format, or takes one packed file and unpacks it to a\n    number of files, using either the idfs provided as a separate input, or\n    the idfs in the header - i.e., the original ones used by the program\n    when packing these files.\n\n         Optionally, the program can also perform various manipulations on\n    the files while packing or unpacking them.  The ones currently defined\n    are:\n         i) Translation:     A translation table is given, according to\n                            which each character is translated.\n        ii) Changing the strop convention:\n                             Either change from using a strop convention of\n                            upper and lower case words to one of preceding\n                            stropwords by a single quote, or vice versa.\n                             In changing the strop convention, strings and\n                            comments are always copied unchanged.\n\n\n Method of use:\n --------------\n\n         The program first reads a series of directives from the 'parameter\n    channel' input.  These directives are words separated by spaces, commas\n    or newlines.  Only the first character of each word is significant.\n    Upper and lower case forms are recognised.  Directives currently\n    recognised are:\n         i) P(ack)  or  U(npack) :\n                             Mutually exclusive.  One of these directives\n                            must be present; 'P' specifies packing, 'U'\n                            unpacking.\n        ii) T(ranslate) :    Optional.  If present, translate according to\n                            table in program.\n       iii) Q(uotestrop)  or  C(asestrop) :\n                             Optional and mutually exclusive.  If 'Q', then\n                            change from uppercase strops to single quote\n                            pre-strop; if 'C', then the reverse; otherwise,\n                            leave strops unchanged.\n\n\n Files used:\n -----------\n\n    i) Packing:\n         The file specified by the idf \"CTRL\" on 'standin channel' must be\n    present, and should contain a sequence of idfs.  These idfs are those of\n    the files to be packed to a file with idf \"TO\".  The idfs are also\n    written in the header of each file, for use when unpacking.\n\n    ii) Unpacking:\n         The packed input comes from a file with idf \"FROM\".  If the file\n    specified by the idf \"CTRL\" on 'standin channel' is present, then the\n    idfs for the unpacked files are taken from there, and there must be the\n    same number of idfs given as files on the packed input.  Otherwise, the\n    idfs in the headers are used.\n\n\n         Error messages and program statistics are sent to the file\n    specified by the null idf on 'standout channel'.\n\n         Except for the directives from 'parameter channel', all transput is\n    done via 'standin channel' and 'standout channel'.\n\n\n Idfs:\n -----\n\n         The idfs are read as a sequence of characters between string\n    quotes, with a maximum length of 'max idf length', which is 18 in the\n    program provided.  Escape combinations are permitted but not translated.\n         Idfs may therefore be separated by a sequence of newlines and any\n    characters other than string quotes.\n\n\n Character translation:\n ----------------------\n\n         An array of characters, 'translate', is used for character\n    translation.  When the directive 'T' is specified, each character 'ch'\n    read in is replaced by the character 'translate\u00e2ABS ch\u00e4'.  Note that\n    characters read in are compared with character values declared in the\n    program, and the translation table must be designed with this in mind.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A68C25": {"ttr": 7947, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x056O\\x01\\x056O\\x10D\\x02^\\x02^\\x00\\x00\\xc1\\xd3\\xc7\\xd6\\xd3\\xf6\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T10:44:00", "lines": 606, "newlines": 606, "modlines": 0, "user": "ALGOL68"}, "text": "./       ADD          NAME=CKA68CJ\n//XC PROC TO=<3>,SRCE=<1>,EDS=<2>,\n//        OPTC=,CODE='AL68.A68C.ZCOD'\n//* ****** EDIT step not needed for distributed system *********\n//E EXEC PGM=EDIT,REGION=32K,COND=EVEN,\n//       PARM='v-\u00c2PS TSAS PH/.A68C.TXT&SRCE+.EDS&EDS(&S)/'\n//TSAS DD SYSOUT=A\n//VER DD SYSOUT=C\n//WORK DD UNIT=DISC,SPACE=(TRK,(5,5))\n//FROM DD DSN=AL68.A68C.TXT&SRCE(&S),DISP=SHR\n//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,\n//      SPACE=(TRK,(3,3))\n//EDITS DD DSN=AL68.A68C.EDS&EDS(&S),DISP=SHR\n//*\n//A68 EXEC PGM=A68C<4$SAFE>,REGION=150K,TIME=(,15),COND=EVEN,\n// PARM='/&OPTC <PARM><X$' NO> XREF'\n//STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR\n//SYSENV DD DDNAME=ENV<8$>\n//ENV DD DSN=AL68.SYS,DISP=SHR\n//ENVSAFE DD DSN=AL68.SYS,DISP=SHR\n//ENV<8$DUMMY> DD DSN=AL68.USERLIB.ENV<8$DUMMY>,DISP=SHR\n//ENVIN DD DSN=AL68.A68C.ENV&TO($),DISP=SHR\n//CODE DD DSN=&CODE&TO(&S),DISP=(OLD,PASS)\n//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)\n//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)\n//SYSPRINT DD SYSOUT=C\n//ENVOUT DD DSN=AL68.A68C.ENV&TO(&S),DISP=OLD\n//CAMDUMP DD SYSOUT=C\n//*\n//<X$*>X EXEC PGM=XREF,REGION=120K,\n//<X$*>       PARM='/ XREF&TO(&S)'\n//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)\n//<X$*>TO DD DSN=AL68.A68C.XREF&TO(&S),DISP=OLD\n//<X$*>SYSPRINT DD SYSOUT=A\n//*\n//<Z$>I EXEC PGM=Z370<5$SAFE>,REGION=132K,COND=((8,LT,A68),EVEN),TIME=(,5)\n//<Z$>STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//<Z$>SYSIN DD DSN=&CODE&TO(&S),DISP=(OLD,PASS)\n//<Z$>SYSPRINT DD SYSOUT=C\n//<Z$>SYSGO DD DSN=AL68.A68C.OBJ&TO(&S),DISP=OLD\n//<Z$>CAMDUMP DD SYSOUT=C\n// PEND\n//*\n//ALLOC EXEC PGM=IEFBR14,  STANDARD IBM \"DO NOTHING\" PROGRAM\n//      REGION=8K,TIME=(,1)\n//CODE DD DSN=AL68.A68C.ZCOD<3>,DISP=(MOD,<ZCODE$PASS>),UNIT=DISC,\n//         SPACE=(TRK,(20,5,8)),DCB=(RECFM=VB,LRECL=84,BLKSIZE=2498)\n//<X$*>XREF DD DSN=&XREF,DISP=(NEW,PASS),UNIT=DISC,\n//<X$*>        DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),SPACE=(TRK,(4,4))\n//*1   phase 1\n//SYS EXEC XC,S=SYS,\n//        OPTC='NAME \"SYS\" USING USER FROM \"SYSENV(MACH<6$SAFE>)\"'\n//M1 EXEC XC,S=M1,\n//        OPTC='NAME \"M1\" USING USER FROM \"ENVIN(SYS)\"'\n//S1 EXEC XC,S=S1,\n//        OPTC='NAME \"S1\" USING MAIN FROM \"ENVIN(M1)\"'\n//Y1 EXEC XC,S=Y1,\n//        OPTC='NAME \"Y1\" USING PASSA FROM \"ENVIN(S1)\"'\n//EBCDIC EXEC XC,S=EBCDIC,\n//        OPTC='NAME \"EBCDIC\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//QEBCDIC EXEC XC,S=QEBCDIC,\n//        OPTC='NAME \"QEBCDIC\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//ASCII EXEC XC,S=ASCII,\n//        OPTC='NAME \"ASCII\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//QASCII EXEC XC,S=QASCII,\n//        OPTC='NAME \"QASCII\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//ICL4100 EXEC XC,S=ICL4100,\n//        OPTC='NAME \"ICL4100\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//PDP1145 EXEC XC,S=PDP1145,\n//        OPTC='NAME \"PDP1145\" USING TRANSLATE FROM \"ENVIN(Y1)\"'\n//N1 EXEC XC,S=N1,\n//        OPTC='NAME \"N1\" USING MOAN FROM \"ENVIN(Y1)\"'\n//T1 EXEC XC,S=T1,\n//        OPTC='NAME \"T1\" USING TOKEN FROM \"ENVIN(Y1)\"'\n//Z1 EXEC XC,S=Z1,\n//        OPTC='NAME \"Z1\" USING PARSER FROM \"ENVIN(Y1)\"'\n//R1 EXEC XC,S=R1,\n//        OPTC='NAME \"R1\" USING PARSECNTRL FROM \"ENVIN(Z1)\"'\n//I1 EXEC XC,S=I1,\n//        OPTC='NAME \"I1\" USING INIT FROM \"ENVIN(R1)\"'\n//L1 EXEC XC,S=L1,\n//        OPTC='NAME \"L1\" USING CLAUSE FROM \"ENVIN(Z1)\"'\n//K1 EXEC XC,S=K1,\n//        OPTC='NAME \"K1\" USING CLAUSEMAIN FROM \"ENVIN(L1)\"'\n//P1 EXEC XC,S=P1,\n//        OPTC='NAME \"P1\" USING PHRASE FROM \"ENVIN(L1)\"'\n//Q1 EXEC XC,S=Q1,\n//        OPTC='NAME \"Q1\" USING SUBPARSE FROM \"ENVIN(P1)\"'\n//*2   phase 2\n//D2 EXEC XC,S=D2,\n//        OPTC='NAME \"D2\" USING PASSBC FROM \"ENVIN(S1)\"'\n//R2 EXEC XC,S=R2,\n//        OPTC='NAME \"R2\" USING PASSB FROM \"ENVIN(D2)\"'\n//M2 EXEC XC,S=M2,\n//        OPTC='NAME \"M2\" USING MOAN FROM \"ENVIN(R2)\"'\n//P2 EXEC XC,S=P2,\n//        OPTC='NAME \"P2\" USING PMR FROM \"ENVIN(R2)\"'\n//T2 EXEC XC,S=T2,\n//        OPTC='NAME \"T2\" USING TREEPRINT FROM \"ENVIN(P2)\"'\n//E2 EXEC XC,S=E2,\n//        OPTC='NAME \"E2\" USING EQUIV FROM \"ENVIN(R2)\"'\n//I2 EXEC XC,S=I2,\n//        OPTC='NAME \"I2\" USING INITEQUIV FROM \"ENVIN(E2)\"'\n//S2 EXEC XC,S=S2,\n//        OPTC='NAME \"S2\" USING SCAN FROM \"ENVIN(R2)\"'\n//X2 EXEC XC,S=X2,\n//        OPTC='NAME \"X2\" USING SCANBODY FROM \"ENVIN(S2)\"'\n//B2 EXEC XC,S=B2,\n//        OPTC='NAME \"B2\" USING SCANCASE FROM \"ENVIN(X2)\"'\n//*3   phase 3\n//A3 EXEC XC,S=A3,\n//        OPTC='NAME \"A3\" USING PASSC FROM \"ENVIN(D2)\"'\n//P3 EXEC XC,S=P3,\n//        OPTC='NAME \"P3\" USING ROUTINES FROM \"ENVIN(A3)\"'\n//M3 EXEC XC,S=M3,\n//        OPTC='NAME \"M3\" USING MOAN FROM \"ENVIN(P3)\"'\n//Q3 EXEC XC,S=Q3,\n//        OPTC='NAME \"Q3\" USING SUBROUTINES FROM \"ENVIN(P3)\"'\n//G3 EXEC XC,S=G3,\n//        OPTC='NAME \"G3\" USING GENERATE FROM \"ENVIN(Q3)\"'\n//O3 EXEC XC,S=O3,\n//        OPTC='NAME \"O3\" USING OPERATE FROM \"ENVIN(G3)\"'\n//R3 EXEC XC,S=R3,\n//        OPTC='NAME \"R3\" USING EVALCTRL FROM \"ENVIN(G3)\"'\n//E3 EXEC XC,S=E3,\n//        OPTC='NAME \"E3\" USING EVAL FROM \"ENVIN(G3)\"'\n//B3 EXEC XC,S=B3,\n//        OPTC='NAME \"B3\" USING EVALCASE FROM \"ENVIN(E3)\"'\n//U3 EXEC XC,S=U3,\n//        OPTC='NAME \"U3\" USING UNARY FROM \"ENVIN(B3)\"'\n//F3 EXEC XC,S=F3,\n//        OPTC='NAME \"F3\" USING FORLOOP FROM \"ENVIN(B3)\"'\n//S3 EXEC XC,S=S3,\n//        OPTC='NAME \"S3\" USING SLICES FROM \"ENVIN(B3)\"'\n//C3 EXEC XC,S=C3,\n//        OPTC='NAME \"C3\" USING COND FROM \"ENVIN(B3)\"'\n//K3 EXEC XC,S=K3,\n//        OPTC='NAME \"K3\" USING ECASE FROM \"ENVIN(B3)\"'\n//D3 EXEC XC,S=D3,\n//        OPTC='NAME \"D3\" USING DISPLAY FROM \"ENVIN(B3)\"'\n//D4 EXEC XC,S=D4,\n//        OPTC='NAME \"D4\" USING PASSD FROM \"ENVIN(A3)\"'\n./       ADD          NAME=CKPACK\nSUBMIT %H!\n/*JOB <U> <J>  CKPACK<2$<1>:A68C<SYSC>+Z370<SYST>\nTURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>, NOTIFY\nLIMSTORE150K,COMP10SECS\nPASSWORD <PWD$:>\n<FAST$>\n// EXEC A68C,PARMC='/USING USER FROM \"SYSENV(BASE<SYSE>)\"',\n// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,\n// SYSLIB='AL68.MOD',IDSN='AL68.SYS',SDSN='AL68.SYS',\n// LOADSET='AL68.PACK.OBJ(PACK)',DISPT=OLD\n//A68.ENVOUT DD DSN=&&ENVOUT,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1))\n//A68.SYSIN DD DSN=AL68.DISTRIB(PACK<1>),DISP=SHR\n//*\n// EXEC A68C,\n// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,SYSLIB='AL68.MOD',\n// IDSN='AL68.SYS',SDSN='AL68.SYS',\n// LOADSET='AL68.PACK.OBJ(PACKCEBC)',DISPT=OLD\n//A68.ENVIN DD DSN=&&ENVOUT,DISP=SHR\n//A68.SYSIN DD DSN=AL68.DISTRIB(PACKCEBC),DISP=SHR\n//*\n// EXEC LKED,NAMEL='AL68.MOD(PACK<2$<1>)',DISPL=OLD,CAL=CALL\n//LKED.OBJ DD DSN=AL68.PACK.OBJ,DISP=SHR\n//LKED.SYSLIB DD DSN=AL68.MOD,DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE OBJ(PACK,PACKCEBC)\n./       ADD          NAME=CKUSER\nFILE %H& AS &TEMP\n/*JOB <U> <J> CKU<3>(<4$SAFE>+<5$SAFE>)\nPRIORITY <P>, TURNROUND <T>, ROUTE <R>, POST <POST$<%USER>\nCOMP 20,PRINTER 1K, NOTIFY, CHAIN, LIMSTORE 150K\nPASSWORD <PWD$:>\n<FAST$>\n//*\n//*\n//*  COMPILE  USER<1>\n//*     WITH  EDS<2>\n//*       TO  <3>\n//*      NAME <8$<3>\n//*\n//*    USING  COMPILER <4$SAFE>\n//*           TRANSLATOR <5$SAFE>\n//*           ENV <6$SAFE>\n//*           INIT <7$SAFE>\n//*\n//*\n//XC PROC TO=<3>,SRCE=<1>,EDS=<2>,\n//        M=,OPTC=,\n//        CODE='AL68.USERLIB.ZCOD'\n//E EXEC PGM=EDIT,REGION=32K,COND=EVEN,\n//       PARM='v-<LT$\u00c2>PS TSAS PH/.USERLIB.TXT&SRCE+.EDS&EDS(&S.&M)/'\n//TSAS DD SYSOUT=A\n//VER DD SYSOUT=C\n//WORK DD UNIT=DISC,SPACE=(TRK,(5,5))\n//FROM DD DSN=AL68.USERLIB.TXT&SRCE(&S.&M),DISP=SHR\n//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,\n//      SPACE=(TRK,(3,3))\n//EDITS DD DSN=AL68.USERLIB.EDS&EDS(&S.&M),DISP=SHR\n//*\n//A68 EXEC PGM=A68C<4$SAFE>,REGION=150K,TIME=(,10),COND=EVEN,\n// PARM='/NAME \"&NAME\" &OPTC <PARM> <X$' NO> XREF'\n//STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR\n//SYSENV DD DSN=AL68.USERLIB.ENV&TO,DISP=SHR\n//CODE DD DSN=&CODE&TO(&S&TO),DISP=(OLD,PASS)\n//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)\n//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)\n//SYSPRINT DD SYSOUT=C\n//ENVOUT DD DSN=AL68.USERLIB.ENV&TO(&S&TO),DISP=OLD\n//CAMDUMP DD SYSOUT=C\n//*\n//<X$*>X EXEC PGM=XREF,REGION=120K,\n//<X$*>       PARM='/ XREF&TO(&S.&M)'\n//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)\n//<X$*>TO DD DSN=AL68.USERLIB.XREF&TO(&S.&M),DISP=OLD\n//<X$*>SYSPRINT DD SYSOUT=A\n//*\n//<Z$>I EXEC PGM=Z370<5$SAFE>,REGION=132K,COND=(8,LT,A68),TIME=(,5)\n//<Z$>STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//<Z$>SYSIN DD DSN=&CODE&TO(&S&TO),DISP=(OLD,PASS)\n//<Z$>SYSPRINT DD SYSOUT=C\n//<Z$>SYSGO DD DSN=AL68.USERLIB.OBJ&TO(&NAME),DISP=OLD\n//<Z$>CAMDUMP DD SYSOUT=C\n//*\n//<Z$>LKED EXEC PGM=IEWL,REGION=120K,COND=((8,LT,A68),(8,LT,I)),\n//<Z$> PARM='SIZE=(999999,8K),LIST,NOMAP,NOXREF,RENT,NCAL,DCBS'\n//<Z$>SYSLIN DD DSN=AL68.USERLIB.OBJ&TO(&NAME),DISP=SHR\n//<Z$>       DD DDNAME=SYSIN\n//<Z$>SYSLMOD DD DSN=AL68.MOD(&NAME),DISP=OLD\n//<Z$>SYSPRINT DD SYSOUT=C\n//<Z$>SYSUT1 DD UNIT=(DISC,SEP=(SYSLMOD,SYSLIN)),SPACE=(TRK,(5,5))\n&\nJUMP Z<Z$Z>\n*Z*\nFILE %H& AS &TEMP/MOD\n//LKED EXEC PGM=IEFBR14,REGION=8K,TIME=(,1),COND=ONLY,PARM='&NAME'\n&\n*ZZ\nFILE %H& AS &TEMP/MOD\n// PEND\n// EXEC FILE\n//FROM DD DSN=AL68.SYS(ZLIB<6$SAFE>),DISP=SHR\n//TO DD DSN=AL68.USERLIB.ENV<3>(ZLIB<6$SAFE>),DISP=OLD\n//CODE DD DSN=AL68.USERLIB.ZCOD<3>,DISP=(MOD,<ZCODE$PASS>),\n//        UNIT=DISC,SPACE=(TRK,(10,5,4)),\n//        DCB=(RECFM=VB,LRECL=84,BLKSIZE=2498)\n//<X$*>XREF DD DSN=&XREF,DISP=(NEW,PASS),UNIT=DISC,\n//<X$*>        DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),SPACE=(TRK,(4,4))\n//MACH EXEC XC,S=MACH,NAME='$MCH<8$<3>',M=<MACH$370>,\n// OPTC='USING SYSTEM FROM \"SYSENV(ZLIB<6$SAFE>)\"'\n//BASE  EXEC  XC,S=BASE,NAME='$BAS<8$<3>',\n// OPTC='USING USER FROM \"SYSENV(MACH<3>)\"'\n//REAL  EXEC  XC,S=REAL,NAME='$REA<8$<3>',\n// OPTC='USING USER FROM \"SYSENV(BASE<3>)\"'\n//CMPX  EXEC  XC,S=CMPX,NAME='$CPX<8$<3>',\n// OPTC='USING USER FROM \"SYSENV(REAL<3>)\"'\n/*EOF\n&\nSUBMIT &TEMP\n./       ADD          NAME=CKXREF\nSUBMIT %H!\n/*JOB <U> <J>  CKXREF<2$<1>:A68C<SYSC>+Z370<SYST>\nTURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>, ROUTE <R>\nLIMSTORE150K,COMP10SECS,NOTIFY\nPASSWORD <PWD$:>\n<FAST$>\n// EXEC A68C,PARMC='/USING USER FROM \"SYSENV(BASE<SYSE>)\"',\n// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,\n// SYSLIB='AL68.MOD',IDSN='AL68.SYS',SDSN='AL68.SYS',\n// LOADSET='AL68.XREF.OBJ(XREF<3$<2>)',\n// DISPT=OLD\n//A68.SYSIN DD DSN=AL68.XREF.SOURCE(XREF<1>),DISP=SHR\n//*\n// EXEC LKED,NAMEL='AL68.MOD(XREF<2$<1>)',DISPL=OLD,CAL=CALL,CONDL='0,NE'\n//LKED.OBJ DD DSN=AL68.XREF.OBJ,DISP=SHR\n//LKED.SYSLIB DD DSN=AL68.MOD,DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE OBJ(XREF<3$<2>)\n ENTRY $A68INIT\n./       ADD          NAME=CKZLIB\nSUBMIT %H$\n/*JOB <U> <J> ASMLINK LIBRARY\nROUTE <R>,CHAIN,TURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>\nCOMP 30 SECS,PRINTER10K\nMSGLEVEL=(<MSGL$0,0>)\nPASSWORD <PWD$:>\n<FAST$>\n// EXEC PGM=IEBGENER,REGION=64K,TIME=(,1)\n//SYSPRINT DD DUMMY\n//SYSIN    DD DUMMY,DCB=BLKSIZE=80\n//SYSUT1   DD *\n\nSOURCE TXT <1>\n       EDS <2>\n\nMAKE   ZLIB <3>\n\n//SYSUT2   DD SYSOUT=C   *** PRINTER OUTPUT CLASS ***\n//*\n//* TXT<1> + EDS<2> => $LIB<3$<2>\n//*\n//* PROCEDURES\n//*\n//* Notes:\n//*\n//* 1) BLKSIZES and space allocations are set up for 3330 discs.\n//*\n//* 2) SYSOUT=C may be replaced by SYSOUT=A, however, in HASP\n//*    installations, SYSOUT=C will default to SYSOUT=A unless\n//*    SYSOUT=C has been otherwise assigned.\n//*\n//* 3) The following data sets are assumed to be available:\n//*\n//*    AL68.ZLIB.TXT<1>  source as distributed,\n//*    AL68.ZLIB.OBJ<3$<2>  PDS must be allocated to receive object\n//*                      modules DCB=(RECFM=FB,LRECL=80,BLKSIZE=??)\n//*    AL68.MOD          PDS must be already allocated to receive\n//*                      load modules.\n//*    (AL68.ZLIB.EDS<2> is not distributed as all edits have been\n//*                      done.  The data set is not necessary, see\n//*                      the EDIT procedure below.)\n//*\n//* EDIT: A distributed system is fully edited, so this procedure\n//*       should be replaced by one (eg IEBGENER) to copy from \"FROM\"\n//*       to \"TO\"\n//*\n//EDIT    PROC REG1=32K,OPT=,TRKS='5,5',MIN1=,SEC1=20,\n//             COND1=,PRINT1='SYSOUT=C',\n//             NAME=,TO='&&TEMP',DISP=OLD\n//EDIT EXEC PGM=EDIT,REGION=&REG1,TIME=(&MIN1,&SEC1),\n//             PARM='&OPT',COND=(&COND1)\n//WORK     DD  UNIT=SYSDA,SPACE=(TRK,(&TRKS))\n//VER      DD  &PRINT1\n//FROM     DD  DISP=SHR,DSN=AL68.ZLIB.TXT<1>(&NAME)\n//EDITS    DD  DISP=SHR,DSN=AL68.ZLIB.EDS<2>(&NAME)\n//TO       DD  DISP=(&DISP,PASS),DSN=&TO\n// PEND\n//*\n//* ASSEMBLE/LINKEDIT: ASSEMBLER(G)\n//*\n//ASMGCL  PROC TRKS='57,19',PRINTC='SYSOUT=C',TERMC='SYSOUT=C',\n//             REGC=100K,MINC=,SECC=20,CONDC=,PUNCHC='DUMMY',\n//             LOADC='ND,LD',LISTC='NL,TE,NUM,STMT',\n//             RENTC=NR,ALGC=ALGN,OSC=OS,TESTC=NT,\n//             XREFC='NX,NLR',BATCHC=NB,LCNTC=55,MISC=,\n//             REGL=98K,MINL=,SECL=20,CONDL='4,LT,ASM',\n//             PRINTL='SYSOUT=C',LISTL=LIST,MAPL=NOMAP,XREFL=NOXREF,\n//             LETL=LET,CAL=NCAL,SIZEL='(999999,8K)',\n//             NAMEL='AL68.MOD',DCBL=DCBS,BLKL=4096,ATTL=,\n//             DISPL='(OLD,PASS)',SPACEL='(TRK,(8,3,8))',\n//             NAME=\n//*\n//ASM     EXEC PGM=ASMGASM,\n//        PARM=(&LOADC,&LISTC,&ALGC,&OSC,&RENTC,&TESTC,\n//            'LC=&LCNTC',&XREFC,&BATCHC,&MISC),\n//             REGION=&REGC,TIME=(&MINC,&SECC),COND=(&CONDC)\n//STEPLIB  DD  DSN=S.WLIB,DISP=SHR\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  DSN=&SYSUT1,UNIT=SYSDA,SPACE=(TRK,(&TRKS)),SEP=(SYSLIB)\n//SYSUT2   DD  DSN=&SYSUT2,SPACE=(TRK,(&TRKS)),\n//             UNIT=(SYSDA,SEP=(SYSUT1))\n//SYSUT3   DD  DSN=&SYSUT3,SPACE=(TRK,(&TRKS)),\n//             UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB))\n//SYSPRINT DD  &PRINTC\n//SYSTERM  DD  &TERMC\n//SYSPUNCH DD  &PUNCHC\n//SYSGO    DD  DSN=AL68.ZLIB.OBJ<3$<2>(&NAME),\n//             SPACE=(TRK,(&TRKS)),DISP=(OLD,PASS),DCB=BLKSIZE=2480\n//SYSIN    DD  DISP=(OLD,PASS),DSN=&&MACS\n//         DD  DISP=(OLD,PASS),DSN=&&TEMP\n//LKED    EXEC PGM=IEWL,\n//      PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL',\n//             REGION=&REGL,TIME=(&MINL,&SECL),COND=(&CONDL)\n//SYSLIN   DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&NAMEL,SPACE=&SPACEL,UNIT=SYSDA,DISP=&DISPL,\n//             DCB=BLKSIZE=&BLKL\n//SYSPRINT DD  &PRINTL\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(TRK,(&TRKS)),\n//             UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD))\n//OBJ      DD  DISP=(OLD,PASS),DSN=AL68.ZLIB.OBJ<3$<2>\n// PEND\n//*\n//* ASSEMBLE/LINKEDIT: ASSEMBLER(F)\n//*\n//ASMFCL  PROC TRKS='58,8',PRINTC='SYSOUT=C',TERMC='SYSOUT=C',\n//             PRINTL='SYSOUT=C',REGC=70K,REGL=98K,\n//             MINC=,SECC=20,MINL=,SECL=20,CONDL='8,LT,ASM',CONDC=,\n//             LOADC='NODECK,LOAD',LISTC='NOLIST,TERM,NUM,STMT',\n//             RENTC=NORENT,ALGC=ALGN,OSC=OS,TESTC=NOTEST,LCNTC=55,\n//             OSC=OS,XREFC=NOXREF,\n//             LISTL=LIST,MAPL=NOMAP,XREFL=NOXREF,LETL=LET,CAL=NCAL,\n//             SIZEL='(999999,8K)',NAMEL='AL68.MOD',\n//             DISPL='(OLD,PASS)',SPACEL='(TRK,(8,3,8))',\n//             DCBL=DCBS,BLKL=4096,ATTL=,NAME=\n//*\n//ASM     EXEC PGM=IEUASM,\n//        PARM=(&LOADC,&LISTC,&ALGC,&OSC,&RENTC,&TESTC,\n//            &XREFC,'LINECNT=&LCNTC'),\n//             REGION=&REGC,TIME=(&MINC,&SECC),COND=(&CONDC)\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.LINKMISC\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  DSN=&SYSUT1,UNIT=SYSDA,SPACE=(TRK,(&TRKS)),SEP=(SYSLIB)\n//SYSUT2   DD  DSN=&SYSUT2,UNIT=SYSDA,SPACE=(TRK,(&TRKS))\n//SYSUT3   DD  DSN=&SYSUT3,SPACE=(TRK,(&TRKS)),\n//             UNIT=(DISC,SEP=(SYSUT2,SYSUT1,SYSLIB))\n//SYSPRINT DD  &PRINTC\n//SYSTERM  DD  &TERMC\n//SYSGO    DD  DSN=AL68.ZLIB.OBJ<3$<2>(&NAME),UNIT=SYSDA,\n//             SPACE=(TRK,(&TRKS)),DISP=(OLD,PASS),DCB=BLKSIZE=2480\n//SYSIN    DD  DISP=(OLD,PASS),DSN=&&BCRMACS\n//         DD  DISP=(OLD,PASS),DSN=&&MACS\n//         DD  DISP=(OLD,PASS),DSN=&&TEMP\n//LKED    EXEC PGM=IEWL,\n//      PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL',\n//             REGION=&REGL,COND=(&CONDL),TIME=(&MINL,&SECL)\n//SYSLIN   DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&NAMEL,UNIT=SYSDA,DISP=&DISPL,DCB=BLKSIZE=&BLKL,\n//             SPACE=&SPACEL\n//SYSPRINT DD  &PRINTL\n//SYSUT1   DD  DSN=&SYSUT1,UNIT=(DISC,SEP=(SYSLIN,SYSLMOD)),\n//             SPACE=(TRK,(&TRKS))\n//OBJ      DD  DISP=(OLD,PASS),DSN=AL68.ZLIB.OBJ<3$<2>\n// PEND\n//*\n//* ALLOCATE TEMPORARY DATA SETS\n//*\n//ALLOC EXEC PGM=IEFBR14,    STANDARD IBM \"DO NOTHING\" PROGRAM\n//           REGION=8K,TIME=(,1)\n//TEMP   DD  DSN=&&TEMP,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(16,1)),\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n//MACS    DD DSN=&&MACS,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n//BCRMACS DD DSN=&&BCRMACS,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)\n//*\n//* BCR MACROS FOR ASSEMBLER(F)\n//*\n//BCRMACS EXEC EDIT,NAME=BCRMACS,TO='&&BCRMACS'\n//*\n//* MACROS\n//*\n//EDMACS EXEC EDIT,NAME=MACS,TO='&&MACS'\n//*\n//* BASIC MACHINE CODE LIBRARY\n//*\n//EDZLIB EXEC EDIT,NAME=ZLIB\n//*\n//ASMZLIB EXEC ASM<ASM$G>CL,NAME=ZLIB,\n//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'\n//LKED.SYSIN DD *\n CHANGE ZLIB($LIB<3$<2>)\n INCLUDE OBJ(ZLIB)\n NAME $LIB<3$<2>(R)\n//*\n//* FORTRAN INTERFACE\n//*\n//EDFORT EXEC EDIT,NAME=FORT\n//*\n//ASMFORT EXEC ASM<ASM$G>CL,NAME=FORT,<FORT$NAMEL='&&GOSET',DISPL=MOD,>\n//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'\n//LKED.SYSIN DD *\n INCLUDE OBJ(FORT)\n ALIAS $$$$0040  SIN\n ALIAS $$$$0041  COS\n ALIAS $$$$0042  TAN\n ALIAS $$$$0043  ARCSIN\n ALIAS $$$$0044  ARCCOS\n ALIAS $$$$0045  ARCTAN\n ALIAS $$$$0046  LN\n ALIAS $$$$0047  EXP\n ALIAS $$$$0048  SQRT\n NAME $FOR<3$<2>(R)\n//*\n//* RANDOM ROUTINES\n//*\n//EDRAND EXEC EDIT,NAME=RAND\n//*\n//ASMRAND EXEC ASM<ASM$G>CL,NAME=RAND,<RAND$NAMEL='&&GOSET',DISPL=MOD,>\n//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'\n//LKED.SYSIN DD *\n INCLUDE OBJ(RAND)\n ALIAS $$$$0073 GETRANDOM\n ALIAS $$$$0074 SAVERANDOM\n ALIAS $$$$0075 CHANGERANDOM\n ALIAS $$$$0076 RANDOM\n NAME $RAN<3$<2>(R)\n./       ADD          NAME=CKZ370\nSUBMIT %H&\n/*JOB <U> <J> CKZ<3>(<4$SAFE>+<5$SAFE>)\nPRIORITY <P>,TURNROUND <T>,ROUTE <R>,POST <POST$<%USER>\nCOMP 40,PRINTER 20K,CHAIN,LIMSTORE 150K\nPASSWORD <PWD$:>\n<FAST$>\n//*\n//XC PROC CSYS=<4$SAFE>,TO=<3>,SRCE=<1>,EDS=<2>,TSYS=<5$SAFE>\n//E EXEC PGM=EDIT,REGION=32K,PARM='v-\u00c2PS TSAS PH/.Z370.NEW&EDS(&S)/'\n//TSAS DD SYSOUT=A\n//VER DD SYSOUT=C\n//WORK DD UNIT=DISC,SPACE=(TRK,(4,4))\n//FROM DD DSN=AL68.Z370.TXT&SRCE(&S),DISP=SHR\n//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,\n//      SPACE=(TRK,(4,4))\n//EDITS DD DSN=AL68.Z370.EDS&EDS(&S),DISP=SHR\n//*\n//A68 EXEC PGM=A68C&CSYS,REGION=150K,TIME=(,10),\n//         PARM='&PARMC'\n//STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR\n//SYSENV DD DDNAME=ENV<8$>\n//ENV DD DSN=AL68.SYS,DISP=SHR\n//ENV<8$A> DD DSN=AL68.USERLIB.ENV<8$DUMMY>,DISP=SHR\n//ENVIN DD DSN=AL68.Z370.ENV&TO,DISP=SHR\n//CODE DD DSN=&CODE,DISP=(OLD,PASS)\n//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)\n//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)\n//SYSPRINT DD SYSOUT=C\n//ENVOUT DD DSN=AL68.Z370.ENV&TO(&S),DISP=OLD\n//CAMDUMP DD SYSOUT=C\n//*\n//<X$*>X EXEC PGM=XREF,REGION=120K,\n//<X$*>    PARM='/ XREF&TO(&S)'\n//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)\n//<X$*>TO DD DSN=AL68.Z370.XREF&TO(&S),DISP=OLD\n//<X$*>SYSPRINT DD SYSOUT=A\n//*\n//<LT$*>MC EXEC PGM=MC,REGION=56K,COND=EVEN,\n//<LT$*>       PARM='\"&S ZCODE\",L60,W132,S2,'\n//<LT$*>FROM DD DSN=&CODE,DISP=SHR\n//<LT$*>TO DD SYSOUT=A\n//TRAN EXEC PGM=Z370&TSYS,REGION=132K,COND=(4,LT,A68)\n//STEPLIB DD DSN=AL68.MOD,DISP=SHR\n//SYSIN DD DSN=&CODE,DISP=(OLD,PASS)\n//SYSPRINT DD SYSOUT=C\n//SYSGO DD DSN=AL68.Z370.OBJ&TO(&S),DISP=OLD\n//CAMDUMP DD SYSOUT=C\n// PEND\n// EXEC NULL\n//CODE DD DSN=&CODE,UNIT=DISC,DISP=(NEW,PASS),SPACE=(TRK,(4,4)),\n//        DCB=VB\n//<X$*>XREF DD DSN=&XREF,UNIT=DISC,DISP=(NEW,PASS),SPACE=(TRK,(4,4)),\n//<X$*>        DCB=VBL\n//SYS EXEC XC,S=SYS,PARMC='/USING USER FROM \"SYSENV(MACH<6$SAFE>)\"'\n//A EXEC XC,S=A\n//R EXEC XC,S=R\n//B EXEC XC,S=B\n//G EXEC XC,S=G\n//Q EXEC XC,S=Q\n//C EXEC XC,S=C\n//P EXEC XC,S=P\n//LK EXEC LKED,DISPL=OLD,CAL=CALL,ATTL=OVLY,CONDL='(4,LT)'\n//SYSLIN DD *\n INCLUDE OBJ(SYS,A)\n OVERLAY ONE\n INCLUDE OBJ(B,G,Q,R)\n OVERLAY ONE\n INCLUDE OBJ(C,P)\n ENTRY $A68INIT\n NAME Z370<3>(R)\n//SYSLMOD DD DSN=AL68.MOD\n//SYSLIB DD DSN=AL68.MOD,DISP=SHR\n//OBJ DD DSN=AL68.Z370.OBJ<3>,DISP=SHR\n&\n./       ADD          NAME=LKA68C\nSUBMIT %H&\n/*JOB <U> <J> LKA68C<3$<1>\nPRIORITY <P>, TURNROUND <T>, ROUTE <R>, POST <POST$<%USER>\nCOMP 10\nMSGLEVEL=(0,0)\nPRINTER 20K,NOTIFY,CHAIN,LIMSTORE 120K\nPASSWORD <PWD$:>\n<FAST$>\n// EXEC FILE\n//FROM DD *\nMAKE    A68C <3$<1>\n/*\n//TO DD SYSOUT=C\n//*\n//*\n//LKED EXEC LKED,DISPL=OLD,MAPL='NOMAP,OVLY',REGL=120K,CAL=CALL\n//SYSLIN DD *\n INCLUDE OBJ(SYS,M1,S1)\n OVERLAY ONE\n INCLUDE OBJ(Y1,EBCDIC,N1,T1,Z1,R1,I1,L1,K1,P1,Q1)\n OVERLAY ONE\n INCLUDE OBJ(D2)\n OVERLAY TWO\n INCLUDE OBJ(R2,M2,P2,T2,E2,I2,S2,X2,B2)\n OVERLAY TWO\n INCLUDE OBJ(A3)\n OVERLAY THREE\n INCLUDE OBJ(P3,M3,Q3,G3,O3,R3,E3,B3,U3,F3,S3,C3,K3,D3)\n OVERLAY THREE\n INCLUDE OBJ(D4)\n ENTRY $A68INIT\n NAME A68C<3$<1>(R)\n//SYSLMOD DD DSN=AL68.MOD\n//SYSLIB DD DSN=AL68.MOD,DISP=SHR\n//OBJ    DD DSN=AL68.A68C.OBJ<3$<1>,DISP=SHR\n&\n./       ENDUP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PACK": {"ttr": 8200, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x056O\\x01\\x056O\\x11(\\x0bd\\x0bd\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T11:28:21", "lines": 2916, "newlines": 2916, "modlines": 0, "user": "SBGOLOB"}, "text": "PACK     CSECT                                                     00000\n         L     R15,8(R15)              58FF 0008        *....*     00000\n         BR    R15                     07FF             *..*       00004\n         DC    C'ZZ'                   E9E9             *ZZ*       00006\n         DC    VL4($A68INIT)           00000000         *....*     00008\n         DC    X'20',C'D'              20C4             *.D*       0000C\n$$$$0117 LR    R3,R15                  183F             *..*       0000E\n         LA    R4,4095(R3)             4143 0FFF        *....*     00010\n         LA    R5,4095(R4)             4154 0FFF        *....*     00014\n         ST    R12,280(,R2)            50C0 2118        *&{..*     00018\n         MVC   284(4,R2),0(R12)        D203 211C C000   *K...{.*   0001C\n         LA    R12,284(R2)             41C2 011C        *.B..*     00022\n         XC    420(4,R2),420(R2)       D703 21A4 21A4   *P..u.u*   00026\n         XC    424(4,R2),424(R2)       D703 21A8 21A8   *P..y.y*   0002C\n         XC    428(4,R2),428(R2)       D703 21AC 21AC   *P.....*   00032\n         XC    432(4,R2),432(R2)       D703 21B0 21B0   *P.....*   00038\n         LA    R6,1                    4160 0001        *.-..*     0003E\n         ST    R6,444(,R2)             5060 21BC        *&-..*     00042\n         LA    R6,2                    4160 0002        *.-..*     00046\n         ST    R6,448(,R2)             5060 21C0        *&-.{*     0004A\n         LA    R6,3                    4160 0003        *.-..*     0004E\n         ST    R6,452(,R2)             5060 21C4        *&-.D*     00052\n         LA    R6,30                   4160 001E        *.-..*     00056\n         ST    R6,456(,R2)             5060 21C8        *&-.H*     0005A\n         XC    460(4,R2),460(R2)       D703 21CC 21CC   *P.....*   0005E\n         XC    464(4,R2),464(R2)       D703 21D0 21D0   *P..}.}*   00064\n         XC    468(4,R2),468(R2)       D703 21D4 21D4   *P..M.M*   0006A\n         XC    472(4,R2),472(R2)       D703 21D8 21D8   *P..Q.Q*   00070\n         XC    476(4,R2),476(R2)       D703 21DC 21DC   *P.....*   00076\n         XC    492(4,R2),492(R2)       D703 21EC 21EC   *P.....*   0007C\n         L     R15,208(,R5)            58F0 50D0        *.0&}*     00082\n         BR    R15                     07FF             *..*       00086\nA000088  MVC   524(16,R2),544(R2)      D20F 220C 2220   *K.....*   00088\n         XC    540(4,R2),540(R2)       D703 221C 221C   *P.....*   0008E\n         LA    R0,76                   4100 004C        *...<*     00094\n         L     R15,228(,R5)            58F0 50E4        *.0&U*     00098\n         LA    R14,568(,R2)            41E0 2238        *.\\..*     0009C\n         BALR  R1,R15                  051F             *..*       000A0\n         ST    R6,548(,R2)             5060 2224        *&-..*     000A2\n         L     R6,548(,R2)             5860 2224        *.-..*     000A6\n         ST    R6,572(,R2)             5060 223C        *&-..*     000AA\n         LA    R6,392(R2)              4162 0188        *...h*     000AE\n         ST    R6,600(,R2)             5060 2258        *&-..*     000B2\n         LA    R6,1306(,R5)            4160 551A        *.-..*     000B6\n         ST    R6,604(,R2)             5060 225C        *&-.**     000BA\n         LA    R6,2                    4160 0002        *.-..*     000BE\n         ST    R6,608(,R2)             5060 2260        *&-.-*     000C2\n         L     R15,232(,R5)            58F0 50E8        *.0&Y*     000C6\n         LA    R14,576(,R2)            41E0 2240        *.\\. *     000CA\n         BALR  R1,R15                  051F             *..*       000CE\n         LTR   R0,R6                   1206             *..*       000D0\n         BZ    222(,R3)                4780 30DE        *....*     000D2\n         LA    R6,16                   4160 0010        *.-..*     000D6\n         ST    R6,608(,R2)             5060 2260        *&-.-*     000DA\n         L     R15,236(,R5)            58F0 50EC        *.0&.*     000DE\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     000E2\n         BALR  R1,R15                  051F             *..*       000E6\n         B     2130(,R3)               47F0 3852        *.0..*     000E8\n         MVC   240(24,R2),392(R2)      D217 20F0 2188   *K..0.h*   000EC\n         LA    R6,240(R2)              4162 00F0        *...0*     000F2\n         ST    R6,608(,R2)             5060 2260        *&-.-*     000F6\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     000FA\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     000FE\n         BALR  R1,R15                  051F             *..*       00102\n         LA    R6,1224(,R5)            4160 54C8        *.-.H*     00104\n         ST    R6,608(,R2)             5060 2260        *&-.-*     00108\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     0010C\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     00110\n         BALR  R1,R15                  051F             *..*       00114\n         LA    R6,240(R2)              4162 00F0        *...0*     00116\n         ST    R6,608(,R2)             5060 2260        *&-.-*     0011A\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0011E\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     00122\n         BALR  R1,R15                  051F             *..*       00126\n         LA    R6,368(R2)              4162 0170        *....*     00128\n         ST    R6,608(,R2)             5060 2260        *&-.-*     0012C\n         LA    R6,1218(,R5)            4160 54C2        *.-.B*     00130\n         ST    R6,612(,R2)             5060 2264        *&-..*     00134\n         MVC   616(4,R2),248(R5)       D203 2268 50F8   *K...&8*   00138\n         L     R15,232(,R5)            58F0 50E8        *.0&Y*     0013E\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     00142\n         BALR  R1,R15                  051F             *..*       00146\n         LTR   R0,R6                   1206             *..*       00148\n         BNZ   326(,R3)                4770 3146        *....*     0014A\n         MVC   432(4,R2),252(R5)       D203 21B0 50FC   *K...&.*   0014E\n         LA    R15,2520(,R3)           41F0 39D8        *.0.Q*     00154\n         LA    R14,584(,R2)            41E0 2248        *.\\..*     00158\n         BALR  R1,R15                  051F             *..*       0015C\n         LTR   R6,R6                   1266             *..*       0015E\n         LA    R6,1                    4160 0001        *.-..*     00160\n         BZ    348(,R3)                4780 315C        *...**     00164\n         XR    R6,R6                   1766             *..*       00168\n         LTR   R0,R6                   1206             *..*       0016A\n         BZ    358(,R3)                4780 3166        *....*     0016C\n         B     1790(,R3)               47F0 36FE        *.0..*     00170\n         L     R6,436(,R2)             5860 21B4        *.-..*     00174\n         LTR   R0,R6                   1206             *..*       00178\n         BZ    420(,R3)                4780 31A4        *...u*     0017A\n         L     R6,432(,R2)             5860 21B0        *.-..*     0017E\n         LTR   R6,R6                   1266             *..*       00182\n         LA    R6,1                    4160 0001        *.-..*     00184\n         BZ    384(,R3)                4780 3180        *....*     00188\n         XR    R6,R6                   1766             *..*       0018C\n         LTR   R0,R6                   1206             *..*       0018E\n         BZ    420(,R3)                4780 31A4        *...u*     00190\n         LA    R6,1182(,R5)            4160 549E        *.-..*     00194\n         ST    R6,616(,R2)             5060 2268        *&-..*     00198\n         LA    R6,1180(,R5)            4160 549C        *.-..*     0019C\n         ST    R6,620(,R2)             5060 226C        *&-.%*     001A0\n         LA    R15,2693(,R4)           41F0 4A85        *.0\u00a2e*     001A4\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     001A8\n         BALR  R1,R15                  051F             *..*       001AC\n         B     1790(,R3)               47F0 36FE        *.0..*     001AE\n         L     R6,436(,R2)             5860 21B4        *.-..*     001B2\n         LTR   R0,R6                   1206             *..*       001B6\n         BZ    514(,R3)                4780 3202        *....*     001B8\n         LA    R6,344(R2)              4162 0158        *....*     001BC\n         ST    R6,288(,R2)             5060 2120        *&-..*     001C0\n         MVC   292(4,R2),256(R5)       D203 2124 5100   *K.....*   001C4\n         LA    R6,320(R2)              4162 0140        *... *     001CA\n         ST    R6,616(,R2)             5060 2268        *&-..*     001CE\n         LA    R6,1176(,R5)            4160 5498        *.-.q*     001D2\n         ST    R6,620(,R2)             5060 226C        *&-.%*     001D6\n         LA    R6,2                    4160 0002        *.-..*     001DA\n         ST    R6,624(,R2)             5060 2270        *&-..*     001DE\n         L     R15,232(,R5)            58F0 50E8        *.0&Y*     001E2\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     001E6\n         BALR  R1,R15                  051F             *..*       001EA\n         LTR   R0,R6                   1206             *..*       001EC\n         BZ    514(,R3)                4780 3202        *....*     001EE\n         LA    R6,1142(,R5)            4160 5476        *.-..*     001F2\n         ST    R6,616(,R2)             5060 2268        *&-..*     001F6\n         LA    R6,1140(,R5)            4160 5474        *.-..*     001FA\n         ST    R6,620(,R2)             5060 226C        *&-.%*     001FE\n         LA    R15,2693(,R4)           41F0 4A85        *.0\u00a2e*     00202\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     00206\n         BALR  R1,R15                  051F             *..*       0020A\n         B     1790(,R3)               47F0 36FE        *.0..*     0020C\n         L     R6,436(,R2)             5860 21B4        *.-..*     00210\n         LTR   R6,R6                   1266             *..*       00214\n         LA    R6,1                    4160 0001        *.-..*     00216\n         BZ    530(,R3)                4780 3212        *....*     0021A\n         XR    R6,R6                   1766             *..*       0021E\n         LTR   R0,R6                   1206             *..*       00220\n         BZ    684(,R3)                4780 32AC        *....*     00222\n         LA    R6,320(R2)              4162 0140        *... *     00226\n         ST    R6,288(,R2)             5060 2120        *&-..*     0022A\n         LA    R6,2                    4160 0002        *.-..*     0022E\n         ST    R6,292(,R2)             5060 2124        *&-..*     00232\n         L     R6,432(,R2)             5860 21B0        *.-..*     00236\n         LTR   R0,R6                   1206             *..*       0023A\n         BZ    616(,R3)                4780 3268        *....*     0023C\n         LA    R6,240(R2)              4162 00F0        *...0*     00240\n         ST    R6,624(,R2)             5060 2270        *&-..*     00244\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     00248\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     0024C\n         BALR  R1,R15                  051F             *..*       00250\n         LA    R6,1116(,R5)            4160 545C        *.-.**     00252\n         ST    R6,624(,R2)             5060 2270        *&-..*     00256\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     0025A\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     0025E\n         BALR  R1,R15                  051F             *..*       00262\n         LA    R6,240(R2)              4162 00F0        *...0*     00264\n         ST    R6,624(,R2)             5060 2270        *&-..*     00268\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0026C\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00270\n         BALR  R1,R15                  051F             *..*       00274\n         LA    R6,344(R2)              4162 0158        *....*     00276\n         ST    R6,624(,R2)             5060 2270        *&-..*     0027A\n         LA    R6,1110(,R5)            4160 5456        *.-..*     0027E\n         ST    R6,628(,R2)             5060 2274        *&-..*     00282\n         MVC   632(4,R2),260(R5)       D203 2278 5104   *K.....*   00286\n         L     R15,232(,R5)            58F0 50E8        *.0&Y*     0028C\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00290\n         BALR  R1,R15                  051F             *..*       00294\n         LTR   R0,R6                   1206             *..*       00296\n         BZ    684(,R3)                4780 32AC        *....*     00298\n         LA    R6,1072(,R5)            4160 5430        *.-..*     0029C\n         ST    R6,616(,R2)             5060 2268        *&-..*     002A0\n         LA    R6,1070(,R5)            4160 542E        *.-..*     002A4\n         ST    R6,620(,R2)             5060 226C        *&-.%*     002A8\n         LA    R15,2693(,R4)           41F0 4A85        *.0\u00a2e*     002AC\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     002B0\n         BALR  R1,R15                  051F             *..*       002B4\n         B     1790(,R3)               47F0 36FE        *.0..*     002B6\n         L     R6,428(,R2)             5860 21AC        *.-..*     002BA\n         SLA   R6,1                    8B60 0001        *.-..*     002BE\n         A     R6,436(,R2)             5A60 21B4        *!-..*     002C2\n         AH    R6,264(,R5)             4A60 5108        *\u00a2-..*     002C6\n         LTR   R1,R6                   1216             *..*       002CA\n         BNP   818(,R3)                47D0 3332        *.}..*     002CC\n         CH    R1,266(,R5)             4910 510A        *....*     002D0\n         BNL   818(,R3)                47B0 3332        *....*     002D4\n         SLL   R1,2                    8910 0002        *i...*     002D8\n         B     718(R1,R3)              47F1 32CE        *.1..*     002DC\n         B     738(,R3)                47F0 32E2        *.0.S*     002E0\n         B     758(,R3)                47F0 32F6        *.0.6*     002E4\n         B     778(,R3)                47F0 330A        *.0..*     002E8\n         B     798(,R3)                47F0 331E        *.0..*     002EC\n         ST    R2,596(,R2)             5020 2254        *&...*     002F0\n         LA    R6,3717(,R4)            4160 4E85        *.-+e*     002F4\n         ST    R6,592(,R2)             5060 2250        *&-.&*     002F8\n         LA    R6,592(R2)              4162 0250        *...&*     002FC\n         B     818(,R3)                47F0 3332        *.0..*     00300\n         ST    R2,596(,R2)             5020 2254        *&...*     00304\n         LA    R6,3939(,R4)            4160 4F63        *.-|.*     00308\n         ST    R6,592(,R2)             5060 2250        *&-.&*     0030C\n         LA    R6,592(R2)              4162 0250        *...&*     00310\n         B     818(,R3)                47F0 3332        *.0..*     00314\n         ST    R2,596(,R2)             5020 2254        *&...*     00318\n         LA    R6,2452(,R3)            4160 3994        *.-.m*     0031C\n         ST    R6,592(,R2)             5060 2250        *&-.&*     00320\n         LA    R6,592(R2)              4162 0250        *...&*     00324\n         B     818(,R3)                47F0 3332        *.0..*     00328\n         ST    R2,596(,R2)             5020 2254        *&...*     0032C\n         LA    R6,2384(,R3)            4160 3950        *.-.&*     00330\n         ST    R6,592(,R2)             5060 2250        *&-.&*     00334\n         LA    R6,592(R2)              4162 0250        *...&*     00338\n         B     818(,R3)                47F0 3332        *.0..*     0033C\n         MVC   500(8,R2),0(R6)         D207 21F4 6000   *K..4-.*   00340\n         L     R6,436(,R2)             5860 21B4        *.-..*     00346\n         LTR   R0,R6                   1206             *..*       0034A\n         BZ    854(,R3)                4780 3356        *....*     0034C\n         ST    R2,596(,R2)             5020 2254        *&...*     00350\n         LA    R6,2326(,R3)            4160 3916        *.-..*     00354\n         ST    R6,592(,R2)             5060 2250        *&-.&*     00358\n         LA    R6,592(R2)              4162 0250        *...&*     0035C\n         B     870(,R3)                47F0 3366        *.0..*     00360\n         ST    R2,596(,R2)             5020 2254        *&...*     00364\n         LA    R6,2232(,R3)            4160 38B8        *.-..*     00368\n         ST    R6,592(,R2)             5060 2250        *&-.&*     0036C\n         LA    R6,592(R2)              4162 0250        *...&*     00370\n         MVC   508(8,R2),0(R6)         D207 21FC 6000   *K...-.*   00374\n         L     R6,424(,R2)             5860 21A8        *.-.y*     0037A\n         LTR   R6,R6                   1266             *..*       0037E\n         LA    R6,1                    4160 0001        *.-..*     00380\n         BZ    892(,R3)                4780 337C        *...@*     00384\n         XR    R6,R6                   1766             *..*       00388\n         LTR   R0,R6                   1206             *..*       0038A\n         BZ    918(,R3)                4780 3396        *...o*     0038C\n         ST    R2,596(,R2)             5020 2254        *&...*     00390\n         LA    R6,2152(,R3)            4160 3868        *.-..*     00394\n         ST    R6,592(,R2)             5060 2250        *&-.&*     00398\n         LA    R6,592(R2)              4162 0250        *...&*     0039C\n         B     964(,R3)                47F0 33C4        *.0.D*     003A0\n         L     R6,440(,R2)             5860 21B8        *.-..*     003A4\n         LTR   R0,R6                   1206             *..*       003A8\n         BZ    948(,R3)                4780 33B4        *....*     003AA\n         ST    R2,600(,R2)             5020 2258        *&...*     003AE\n         LA    R6,1397(,R4)            4160 4575        *.-..*     003B2\n         ST    R6,596(,R2)             5060 2254        *&-..*     003B6\n         LA    R6,596(R2)              4162 0254        *....*     003BA\n         B     964(,R3)                47F0 33C4        *.0.D*     003BE\n         ST    R2,600(,R2)             5020 2258        *&...*     003C2\n         LA    R6,761(,R4)             4160 42F9        *.-.9*     003C6\n         ST    R6,596(,R2)             5060 2254        *&-..*     003CA\n         LA    R6,596(R2)              4162 0254        *....*     003CE\n         MVC   516(8,R2),0(R6)         D207 2204 6000   *K...-.*   003D2\n         LA    R15,3610(,R3)           41F0 3E1A        *.0..*     003D8\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     003DC\n         BALR  R1,R15                  051F             *..*       003E0\n         LTR   R0,R6                   1206             *..*       003E2\n         BZ    1486(,R3)               4780 35CE        *....*     003E4\n         XC    484(4,R2),484(R2)       D703 21E4 21E4   *P..U.U*   003E8\n         XC    480(4,R2),480(R2)       D703 21E0 21E0   *P..\\.\\*   003EE\n         MVC   488(4,R2),268(R5)       D203 21E8 510C   *K..Y..*   003F4\n         MVC   540(4,R2),272(R5)       D203 221C 5110   *K.....*   003FA\n         L     R0,520(,R2)             5800 2208        *....*     00400\n         L     R15,516(,R2)            58F0 2204        *.0..*     00404\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00408\n         BALR  R1,R15                  051F             *..*       0040C\n         LTR   R0,R6                   1206             *..*       0040E\n         BZ    1034(,R3)               4780 340A        *....*     00410\n         B     1010(,R3)               47F0 33F2        *.0.2*     00414\n         XC    540(4,R2),540(R2)       D703 221C 221C   *P.....*   00418\n         L     R6,436(,R2)             5860 21B4        *.-..*     0041E\n         LTR   R0,R6                   1206             *..*       00422\n         BZ    1072(,R3)               4780 3430        *....*     00424\n         L     R6,452(,R2)             5860 21C4        *.-.D*     00428\n         ST    R6,624(,R2)             5060 2270        *&-..*     0042C\n         L     R0,512(,R2)             5800 2200        *....*     00430\n         L     R15,508(,R2)            58F0 21FC        *.0..*     00434\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00438\n         BALR  R1,R15                  051F             *..*       0043C\n         L     R6,288(,R2)             5860 2120        *.-..*     0043E\n         ST    R6,624(,R2)             5060 2270        *&-..*     00442\n         L     R15,276(,R5)            58F0 5114        *.0..*     00446\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     0044A\n         BALR  R1,R15                  051F             *..*       0044E\n         MVC   240(24,R2),392(R2)      D217 20F0 2188   *K..0.h*   00450\n         L     R6,424(,R2)             5860 21A8        *.-.y*     00456\n         LTR   R6,R6                   1266             *..*       0045A\n         LA    R6,1                    4160 0001        *.-..*     0045C\n         BZ    1112(,R3)               4780 3458        *....*     00460\n         XR    R6,R6                   1766             *..*       00464\n         LTR   R0,R6                   1206             *..*       00466\n         BZ    1184(,R3)               4780 34A0        *....*     00468\n         L     R6,436(,R2)             5860 21B4        *.-..*     0046C\n         LTR   R0,R6                   1206             *..*       00470\n         BZ    1140(,R3)               4780 3474        *....*     00472\n         L     R6,484(,R2)             5860 21E4        *.-.U*     00476\n         S     R6,480(,R2)             5B60 21E0        *$-.\\*     0047A\n         B     1148(,R3)               47F0 347C        *.0.@*     0047E\n         L     R6,480(,R2)             5860 21E0        *.-.\\*     00482\n         S     R6,484(,R2)             5B60 21E4        *$-.U*     00486\n         S     R6,488(,R2)             5B60 21E8        *$-.Y*     0048A\n         LTR   R0,R6                   1206             *..*       0048E\n         BZ    1184(,R3)               4780 34A0        *....*     00490\n         LA    R6,1038(,R5)            4160 540E        *.-..*     00494\n         ST    R6,640(,R2)             5060 2280        *&-..*     00498\n         LA    R6,1036(,R5)            4160 540C        *.-..*     0049C\n         ST    R6,644(,R2)             5060 2284        *&-.d*     004A0\n         LA    R15,2693(,R4)           41F0 4A85        *.0\u00a2e*     004A4\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     004A8\n         BALR  R1,R15                  051F             *..*       004AC\n         L     R6,436(,R2)             5860 21B4        *.-..*     004AE\n         LTR   R0,R6                   1206             *..*       004B2\n         BZ    1202(,R3)               4780 34B2        *....*     004B4\n         LA    R6,1024(,R5)            4160 5400        *.-..*     004B8\n         B     1206(,R3)               47F0 34B6        *.0..*     004BC\n         LA    R6,1014(,R5)            4160 53F6        *.-.6*     004C0\n         ST    R6,616(,R2)             5060 2268        *&-..*     004C4\n         LA    R7,240(R2)              4172 00F0        *...0*     004C8\n         ST    R7,648(,R2)             5070 2288        *&..h*     004CC\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     004D0\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     004D4\n         BALR  R1,R15                  051F             *..*       004D8\n         LA    R6,127                  4160 007F        *.-.\"*     004DA\n         ST    R6,648(,R2)             5060 2288        *&-.h*     004DE\n         L     R15,280(,R5)            58F0 5118        *.0..*     004E2\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     004E6\n         BALR  R1,R15                  051F             *..*       004EA\n         L     R6,416(,R2)             5860 21A0        *.-..*     004EC\n         ST    R6,648(,R2)             5060 2288        *&-.h*     004F0\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     004F4\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     004F8\n         BALR  R1,R15                  051F             *..*       004FC\n         LA    R6,1032(,R5)            4160 5408        *.-..*     004FE\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00502\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00506\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     0050A\n         BALR  R1,R15                  051F             *..*       0050E\n         L     R6,616(,R2)             5860 2268        *.-..*     00510\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00514\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00518\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     0051C\n         BALR  R1,R15                  051F             *..*       00520\n         LA    R6,1010(,R5)            4160 53F2        *.-.2*     00522\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00526\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     0052A\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     0052E\n         BALR  R1,R15                  051F             *..*       00532\n         L     R6,488(,R2)             5860 21E8        *.-.Y*     00534\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00538\n         L     R15,284(,R5)            58F0 511C        *.0..*     0053C\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     00540\n         BALR  R1,R15                  051F             *..*       00544\n         LA    R6,998(,R5)             4160 53E6        *.-.W*     00546\n         ST    R6,648(,R2)             5060 2288        *&-.h*     0054A\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     0054E\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     00552\n         BALR  R1,R15                  051F             *..*       00556\n         L     R6,480(,R2)             5860 21E0        *.-.\\*     00558\n         ST    R6,648(,R2)             5060 2288        *&-.h*     0055C\n         L     R15,284(,R5)            58F0 511C        *.0..*     00560\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     00564\n         BALR  R1,R15                  051F             *..*       00568\n         LA    R6,978(,R5)             4160 53D2        *.-.K*     0056A\n         ST    R6,648(,R2)             5060 2288        *&-.h*     0056E\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00572\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     00576\n         BALR  R1,R15                  051F             *..*       0057A\n         L     R6,484(,R2)             5860 21E4        *.-.U*     0057C\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00580\n         L     R15,284(,R5)            58F0 511C        *.0..*     00584\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     00588\n         BALR  R1,R15                  051F             *..*       0058C\n         LA    R6,956(,R5)             4160 53BC        *.-..*     0058E\n         ST    R6,648(,R2)             5060 2288        *&-.h*     00592\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00596\n         LA    R14,624(,R2)            41E0 2270        *.\\..*     0059A\n         BALR  R1,R15                  051F             *..*       0059E\n         L     R6,480(,R2)             5860 21E0        *.-.\\*     005A0\n         L     R0,464(,R2)             5800 21D0        *...}*     005A4\n         AR    R0,R6                   1A06             *..*       005A8\n         ST    R0,464(,R2)             5000 21D0        *&..}*     005AA\n         L     R6,484(,R2)             5860 21E4        *.-.U*     005AE\n         L     R0,468(,R2)             5800 21D4        *...M*     005B2\n         AR    R0,R6                   1A06             *..*       005B6\n         ST    R0,468(,R2)             5000 21D4        *&..M*     005B8\n         L     R6,488(,R2)             5860 21E8        *.-.Y*     005BC\n         L     R0,472(,R2)             5800 21D8        *...Q*     005C0\n         AR    R0,R6                   1A06             *..*       005C4\n         ST    R0,472(,R2)             5000 21D8        *&..Q*     005C6\n         LA    R6,1                    4160 0001        *.-..*     005CA\n         L     R0,460(,R2)             5800 21CC        *....*     005CE\n         AR    R0,R6                   1A06             *..*       005D2\n         ST    R0,460(,R2)             5000 21CC        *&...*     005D4\n         B     970(,R3)                47F0 33CA        *.0..*     005D8\n         L     R6,436(,R2)             5860 21B4        *.-..*     005DC\n         LTR   R0,R6                   1206             *..*       005E0\n         BZ    1504(,R3)               4780 35E0        *...\\*     005E2\n         LA    R6,320(R2)              4162 0140        *... *     005E6\n         B     1508(,R3)               47F0 35E4        *.0.U*     005EA\n         LA    R6,344(R2)              4162 0158        *....*     005EE\n         ST    R6,616(,R2)             5060 2268        *&-..*     005F2\n         L     R15,276(,R5)            58F0 5114        *.0..*     005F6\n         LA    R14,592(,R2)            41E0 2250        *.\\.&*     005FA\n         BALR  R1,R15                  051F             *..*       005FE\n         MVC   240(24,R2),392(R2)      D217 20F0 2188   *K..0.h*   00600\n         L     R6,460(,R2)             5860 21CC        *.-..*     00606\n         BCTR  R6,R0                   0660             *.-*       0060A\n         LTR   R0,R6                   1206             *..*       0060C\n         BNZ   1548(,R3)               4770 360C        *....*     0060E\n         LA    R6,948(,R5)             4160 53B4        *.-..*     00612\n         B     1552(,R3)               47F0 3610        *.0..*     00616\n         LA    R6,940(,R5)             4160 53AC        *.-..*     0061A\n         ST    R6,592(,R2)             5060 2250        *&-.&*     0061E\n         LA    R7,240(R2)              4172 00F0        *...0*     00622\n         ST    R7,624(,R2)             5070 2270        *&...*     00626\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0062A\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     0062E\n         BALR  R1,R15                  051F             *..*       00632\n         LA    R6,240(R2)              4162 00F0        *...0*     00634\n         ST    R6,624(,R2)             5060 2270        *&-..*     00638\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0063C\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00640\n         BALR  R1,R15                  051F             *..*       00644\n         L     R6,460(,R2)             5860 21CC        *.-..*     00646\n         ST    R6,624(,R2)             5060 2270        *&-..*     0064A\n         L     R15,284(,R5)            58F0 511C        *.0..*     0064E\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00652\n         BALR  R1,R15                  051F             *..*       00656\n         L     R6,592(,R2)             5860 2250        *.-.&*     00658\n         ST    R6,624(,R2)             5060 2270        *&-..*     0065C\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00660\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00664\n         BALR  R1,R15                  051F             *..*       00668\n         LA    R6,928(,R5)             4160 53A0        *.-..*     0066A\n         ST    R6,624(,R2)             5060 2270        *&-..*     0066E\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00672\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00676\n         BALR  R1,R15                  051F             *..*       0067A\n         L     R6,472(,R2)             5860 21D8        *.-.Q*     0067C\n         ST    R6,624(,R2)             5060 2270        *&-..*     00680\n         L     R15,284(,R5)            58F0 511C        *.0..*     00684\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00688\n         BALR  R1,R15                  051F             *..*       0068C\n         LA    R6,918(,R5)             4160 5396        *.-.o*     0068E\n         ST    R6,624(,R2)             5060 2270        *&-..*     00692\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00696\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     0069A\n         BALR  R1,R15                  051F             *..*       0069E\n         LA    R6,240(R2)              4162 00F0        *...0*     006A0\n         ST    R6,624(,R2)             5060 2270        *&-..*     006A4\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     006A8\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     006AC\n         BALR  R1,R15                  051F             *..*       006B0\n         L     R6,464(,R2)             5860 21D0        *.-.}*     006B2\n         ST    R6,624(,R2)             5060 2270        *&-..*     006B6\n         L     R15,284(,R5)            58F0 511C        *.0..*     006BA\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     006BE\n         BALR  R1,R15                  051F             *..*       006C2\n         LA    R6,900(,R5)             4160 5384        *.-.d*     006C4\n         ST    R6,624(,R2)             5060 2270        *&-..*     006C8\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     006CC\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     006D0\n         BALR  R1,R15                  051F             *..*       006D4\n         LA    R6,240(R2)              4162 00F0        *...0*     006D6\n         ST    R6,624(,R2)             5060 2270        *&-..*     006DA\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     006DE\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     006E2\n         BALR  R1,R15                  051F             *..*       006E6\n         L     R6,468(,R2)             5860 21D4        *.-.M*     006E8\n         ST    R6,624(,R2)             5060 2270        *&-..*     006EC\n         L     R15,284(,R5)            58F0 511C        *.0..*     006F0\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     006F4\n         BALR  R1,R15                  051F             *..*       006F8\n         LA    R6,878(,R5)             4160 536E        *.-.>*     006FA\n         ST    R6,624(,R2)             5060 2270        *&-..*     006FE\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00702\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00706\n         BALR  R1,R15                  051F             *..*       0070A\n         L     R6,432(,R2)             5860 21B0        *.-..*     0070C\n         LTR   R0,R6                   1206             *..*       00710\n         BZ    1818(,R3)               4780 371A        *....*     00712\n         LA    R6,368(R2)              4162 0170        *....*     00716\n         ST    R6,624(,R2)             5060 2270        *&-..*     0071A\n         L     R15,276(,R5)            58F0 5114        *.0..*     0071E\n         LA    R14,600(,R2)            41E0 2258        *.\\..*     00722\n         BALR  R1,R15                  051F             *..*       00726\n         L     R6,476(,R2)             5860 21DC        *.-..*     00728\n         LTR   R0,R6                   1206             *..*       0072C\n         BNP   1934(,R3)               47D0 378E        *.}..*     0072E\n         LA    R6,240(R2)              4162 00F0        *...0*     00732\n         ST    R6,632(,R2)             5060 2278        *&-..*     00736\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0073A\n         LA    R14,608(,R2)            41E0 2260        *.\\.-*     0073E\n         BALR  R1,R15                  051F             *..*       00742\n         LA    R6,240(R2)              4162 00F0        *...0*     00744\n         ST    R6,632(,R2)             5060 2278        *&-..*     00748\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0074C\n         LA    R14,608(,R2)            41E0 2260        *.\\.-*     00750\n         BALR  R1,R15                  051F             *..*       00754\n         L     R6,476(,R2)             5860 21DC        *.-..*     00756\n         BCTR  R6,R0                   0660             *.-*       0075A\n         LTR   R0,R6                   1206             *..*       0075C\n         BNZ   1898(,R3)               4770 376A        *...\u00a6*     0075E\n         LA    R6,862(,R5)             4160 535E        *.-.;*     00762\n         ST    R6,632(,R2)             5060 2278        *&-..*     00766\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     0076A\n         LA    R14,608(,R2)            41E0 2260        *.\\.-*     0076E\n         BALR  R1,R15                  051F             *..*       00772\n         B     1934(,R3)               47F0 378E        *.0..*     00774\n         L     R6,476(,R2)             5860 21DC        *.-..*     00778\n         ST    R6,632(,R2)             5060 2278        *&-..*     0077C\n         L     R15,284(,R5)            58F0 511C        *.0..*     00780\n         LA    R14,608(,R2)            41E0 2260        *.\\.-*     00784\n         BALR  R1,R15                  051F             *..*       00788\n         LA    R6,846(,R5)             4160 534E        *.-.+*     0078A\n         ST    R6,632(,R2)             5060 2278        *&-..*     0078E\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00792\n         LA    R14,608(,R2)            41E0 2260        *.\\.-*     00796\n         BALR  R1,R15                  051F             *..*       0079A\n         L     R6,476(,R2)             5860 21DC        *.-..*     0079C\n         LTR   R0,R6                   1206             *..*       007A0\n         BNZ   1950(,R3)               4770 379E        *....*     007A2\n         XR    R6,R6                   1766             *..*       007A6\n         B     1972(,R3)               47F0 37B4        *.0..*     007A8\n         L     R6,460(,R2)             5860 21CC        *.-..*     007AC\n         LTR   R0,R6                   1206             *..*       007B0\n         BNZ   1968(,R3)               4770 37B0        *....*     007B2\n         LA    R6,12                   4160 000C        *.-..*     007B6\n         B     1972(,R3)               47F0 37B4        *.0..*     007BA\n         LA    R6,8                    4160 0008        *.-..*     007BE\n         ST    R6,608(,R2)             5060 2260        *&-.-*     007C2\n         L     R6,608(,R2)             5860 2260        *.-.-*     007C6\n         ST    R6,640(,R2)             5060 2280        *&-..*     007CA\n         L     R15,236(,R5)            58F0 50EC        *.0&.*     007CE\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     007D2\n         BALR  R1,R15                  051F             *..*       007D6\n         L     R6,608(,R2)             5860 2260        *.-.-*     007D8\n         LTR   R0,R6                   1206             *..*       007DC\n         BZ    2040(,R3)               4780 37F8        *...8*     007DE\n         LA    R6,810(,R5)             4160 532A        *.-..*     007E2\n         ST    R6,640(,R2)             5060 2280        *&-..*     007E6\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     007EA\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     007EE\n         BALR  R1,R15                  051F             *..*       007F2\n         L     R6,608(,R2)             5860 2260        *.-.-*     007F4\n         ST    R6,640(,R2)             5060 2280        *&-..*     007F8\n         L     R15,284(,R5)            58F0 511C        *.0..*     007FC\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     00800\n         BALR  R1,R15                  051F             *..*       00804\n         LA    R6,240(R2)              4162 00F0        *...0*     00806\n         ST    R6,640(,R2)             5060 2280        *&-..*     0080A\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     0080E\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     00812\n         BALR  R1,R15                  051F             *..*       00816\n         LA    R6,240(R2)              4162 00F0        *...0*     00818\n         ST    R6,640(,R2)             5060 2280        *&-..*     0081C\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     00820\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     00824\n         BALR  R1,R15                  051F             *..*       00828\n         LA    R6,240(R2)              4162 00F0        *...0*     0082A\n         ST    R6,640(,R2)             5060 2280        *&-..*     0082E\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     00832\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     00836\n         BALR  R1,R15                  051F             *..*       0083A\n         LA    R6,728(,R5)             4160 52D8        *.-.Q*     0083C\n         ST    R6,640(,R2)             5060 2280        *&-..*     00840\n         L     R15,244(,R5)            58F0 50F4        *.0&4*     00844\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     00848\n         BALR  R1,R15                  051F             *..*       0084C\n         LA    R6,240(R2)              4162 00F0        *...0*     0084E\n         ST    R6,640(,R2)             5060 2280        *&-..*     00852\n         L     R15,240(,R5)            58F0 50F0        *.0&0*     00856\n         LA    R14,616(,R2)            41E0 2268        *.\\..*     0085A\n         BALR  R1,R15                  051F             *..*       0085E\n         L     R12,280(,R2)            58C0 2118        *.{..*     00860\n         L     R1,288(,R5)             5810 5120        *....*     00864\n         LM    R3,R5,0(R1)             9835 1000        *q...*     00868\n         L     R1,12(R1)               5811 000C        *....*     0086C\n         BR    R1                      07F1             *.1*       00870\n         LR    R11,R14                 18BE             *..*       00872\n         LR    R5,R12                  185C             *.**       00874\n$$$$0342 STM   R0,R5,0(R14)            9005 E000        *..\\.*     00876\n         LR    R2,R14                  182E             *..*       0087A\n         LR    R3,R15                  183F             *..*       0087C\n         LA    R4,4095(R3)             4143 0FFF        *....*     0087E\n         LA    R5,4095(R4)             4154 0FFF        *....*     00882\n         LA    R6,24(R2)               4162 0018        *....*     00886\n         ST    R6,56(,R2)              5060 2038        *&-..*     0088A\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0088E\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     00892\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00896\n         BALR  R1,R15                  051F             *..*       0089A\n         LTR   R0,R6                   1206             *..*       0089C\n         BZ    70(,R3)                 4780 3046        *....*     0089E\n         L     R6,24(,R2)              5860 2018        *.-..*     008A2\n         ST    R6,56(,R2)              5060 2038        *&-..*     008A6\n         L     R0,512(,R13)            5800 D200        *..K.*     008AA\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     008AE\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     008B2\n         BALR  R1,R15                  051F             *..*       008B6\n         LA    R6,1                    4160 0001        *.-..*     008B8\n         LM    R1,R5,4(R2)             9815 2004        *q...*     008BC\n         BR    R1                      07F1             *.1*       008C0\n         LR    R7,R6                   1876             *..*       008C2\n         LR    R0,R12                  180C             *..*       008C4\n$$$$0341 STM   R0,R5,0(R14)            9005 E000        *..\\.*     008C6\n         LR    R2,R14                  182E             *..*       008CA\n         LR    R3,R15                  183F             *..*       008CC\n         LA    R4,4095(R3)             4143 0FFF        *....*     008CE\n         LA    R5,4095(R4)             4154 0FFF        *....*     008D2\n         L     R6,24(,R2)              5860 2018        *.-..*     008D6\n         S     R6,456(,R13)            5B60 D1C8        *$-JH*     008DA\n         LTR   R0,R6                   1206             *..*       008DE\n         BNZ   52(,R3)                 4770 3034        *....*     008E0\n         LA    R6,240(R13)             416D 00F0        *._.0*     008E4\n         ST    R6,56(,R2)              5060 2038        *&-..*     008E8\n         L     R15,2103(,R4)           58F0 4837        *.0..*     008EC\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     008F0\n         BALR  R1,R15                  051F             *..*       008F4\n         B     84(,R3)                 47F0 3054        *.0..*     008F6\n         LA    R6,1                    4160 0001        *.-..*     008FA\n         L     R0,484(,R13)            5800 D1E4        *..JU*     008FE\n         AR    R0,R6                   1A06             *..*       00902\n         ST    R0,484(,R13)            5000 D1E4        *&.JU*     00904\n         L     R6,24(,R2)              5860 2018        *.-..*     00908\n         ST    R6,56(,R2)              5060 2038        *&-..*     0090C\n         L     R15,2143(,R4)           58F0 485F        *.0.^*     00910\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00914\n         BALR  R1,R15                  051F             *..*       00918\n         LM    R1,R5,4(R2)             9815 2004        *q...*     0091A\n         BR    R1                      07F1             *.1*       0091E\n         LR    R2,R0                   1820             *..*       00920\n         XR    R10,R14                 17AE             *..*       00922\n$$$$0340 STM   R0,R5,0(R14)            9005 E000        *..\\.*     00924\n         LR    R2,R14                  182E             *..*       00928\n         LR    R3,R15                  183F             *..*       0092A\n         LA    R4,4095(R3)             4143 0FFF        *....*     0092C\n         LA    R5,4095(R4)             4154 0FFF        *....*     00930\n         LA    R6,1                    4160 0001        *.-..*     00934\n         L     R0,484(,R13)            5800 D1E4        *..JU*     00938\n         AR    R0,R6                   1A06             *..*       0093C\n         ST    R0,484(,R13)            5000 D1E4        *&.JU*     0093E\n         L     R6,24(,R2)              5860 2018        *.-..*     00942\n         ST    R6,56(,R2)              5060 2038        *&-..*     00946\n         L     R15,2049(,R4)           58F0 4801        *.0..*     0094A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0094E\n         BALR  R1,R15                  051F             *..*       00952\n         LM    R1,R5,4(R2)             9815 2004        *q...*     00954\n         BR    R1                      07F1             *.1*       00958\n         XR    R14,R14                 17EE             *..*       0095A\n         XR    R7,R4                   1774             *..*       0095C\n$$$$0339 STM   R0,R5,0(R14)            9005 E000        *..\\.*     0095E\n         LR    R2,R14                  182E             *..*       00962\n         LR    R3,R15                  183F             *..*       00964\n         LA    R4,4095(R3)             4143 0FFF        *....*     00966\n         LA    R5,4095(R4)             4154 0FFF        *....*     0096A\n         L     R6,24(,R2)              5860 2018        *.-..*     0096E\n         ST    R6,56(,R2)              5060 2038        *&-..*     00972\n         LA    R15,1555(,R4)           41F0 4613        *.0..*     00976\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0097A\n         BALR  R1,R15                  051F             *..*       0097E\n         LTR   R0,R6                   1206             *..*       00980\n         BZ    58(,R3)                 4780 303A        *....*     00982\n         L     R6,24(,R2)              5860 2018        *.-..*     00986\n         ST    R6,56(,R2)              5060 2038        *&-..*     0098A\n         LA    R15,987(,R4)            41F0 43DB        *.0..*     0098E\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00992\n         BALR  R1,R15                  051F             *..*       00996\n         LM    R1,R5,4(R2)             9815 2004        *q...*     00998\n         BR    R1                      07F1             *.1*       0099C\n         XR    R11,R2                  17B2             *..*       0099E\n         XR    R3,R0                   1730             *..*       009A0\n$$$$0338 STM   R0,R5,0(R14)            9005 E000        *..\\.*     009A2\n         LR    R2,R14                  182E             *..*       009A6\n         LR    R3,R15                  183F             *..*       009A8\n         LA    R4,4095(R3)             4143 0FFF        *....*     009AA\n         LA    R5,4095(R4)             4154 0FFF        *....*     009AE\n         L     R6,24(,R2)              5860 2018        *.-..*     009B2\n         ST    R6,56(,R2)              5060 2038        *&-..*     009B6\n         LA    R15,1265(,R4)           41F0 44F1        *.0.1*     009BA\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     009BE\n         BALR  R1,R15                  051F             *..*       009C2\n         LTR   R0,R6                   1206             *..*       009C4\n         BZ    58(,R3)                 4780 303A        *....*     009C6\n         L     R6,24(,R2)              5860 2018        *.-..*     009CA\n         ST    R6,56(,R2)              5060 2038        *&-..*     009CE\n         LA    R15,919(,R4)            41F0 4397        *.0.p*     009D2\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     009D6\n         BALR  R1,R15                  051F             *..*       009DA\n         LM    R1,R5,4(R2)             9815 2004        *q...*     009DC\n         BR    R1                      07F1             *.1*       009E0\n         XR    R7,R6                   1776             *..*       009E2\n         OR    R14,R12                 16EC             *..*       009E4\n$$$$0295 STM   R0,R5,0(R14)            9005 E000        *..\\.*     009E6\n         LR    R2,R14                  182E             *..*       009EA\n         LR    R3,R15                  183F             *..*       009EC\n         LA    R4,4095(R3)             4143 0FFF        *....*     009EE\n         LA    R5,4095(R4)             4154 0FFF        *....*     009F2\n         LA    R6,296(R13)             416D 0128        *._..*     009F6\n         ST    R6,48(,R2)              5060 2030        *&-..*     009FA\n         LA    R6,3069(,R4)            4160 4BFD        *.-..*     009FE\n         ST    R6,52(,R2)              5060 2034        *&-..*     00A02\n         LA    R6,3                    4160 0003        *.-..*     00A06\n         ST    R6,56(,R2)              5060 2038        *&-..*     00A0A\n         L     R15,1807(,R4)           58F0 470F        *.0..*     00A0E\n         LA    R14,24(,R2)             41E0 2018        *.\\..*     00A12\n         BALR  R1,R15                  051F             *..*       00A16\n         LTR   R0,R6                   1206             *..*       00A18\n         BZ    88(,R3)                 4780 3058        *....*     00A1A\n         LA    R6,3041(,R4)            4160 4BE1        *.-..*     00A1E\n         ST    R6,56(,R2)              5060 2038        *&-..*     00A22\n         LA    R6,3039(,R4)            4160 4BDF        *.-..*     00A26\n         ST    R6,60(,R2)              5060 203C        *&-..*     00A2A\n         LA    R15,173(,R4)            41F0 40AD        *.0 .*     00A2E\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00A32\n         BALR  R1,R15                  051F             *..*       00A36\n         XR    R6,R6                   1766             *..*       00A38\n         B     918(,R3)                47F0 3396        *.0.o*     00A3A\n         MVC   28(4,R2),1923(R4)       D203 201C 4783   *K....c*   00A3E\n         MVC   216(24,R13),296(R13)    D217 D0D8 D128   *K.}QJ.*   00A44\n         LA    R6,296(R13)             416D 0128        *._..*     00A4A\n         ST    R6,56(,R2)              5060 2038        *&-..*     00A4E\n         L     R15,1927(,R4)           58F0 4787        *.0.g*     00A52\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00A56\n         BALR  R1,R15                  051F             *..*       00A5A\n         LTR   R0,R6                   1206             *..*       00A5C\n         BNZ   642(,R3)                4770 3282        *...b*     00A5E\n         L     R6,28(,R2)              5860 201C        *.-..*     00A62\n         LTR   R0,R6                   1206             *..*       00A66\n         BZ    642(,R3)                4780 3282        *...b*     00A68\n         L     R6,296(,R13)            5860 D128        *.-J.*     00A6C\n         ST    R6,64(,R2)              5060 2040        *&-. *     00A70\n         LA    R6,32(R2)               4162 0020        *....*     00A74\n         ST    R6,68(,R2)              5060 2044        *&-..*     00A78\n         L     R15,1931(,R4)           58F0 478B        *.0..*     00A7C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00A80\n         BALR  R1,R15                  051F             *..*       00A84\n         LTR   R6,R6                   1266             *..*       00A86\n         LA    R6,1                    4160 0001        *.-..*     00A88\n         BZ    172(,R3)                4780 30AC        *....*     00A8C\n         XR    R6,R6                   1766             *..*       00A90\n         LTR   R0,R6                   1206             *..*       00A92\n         BZ    200(,R3)                4780 30C8        *...H*     00A94\n         L     R6,296(,R13)            5860 D128        *.-J.*     00A98\n         ST    R6,64(,R2)              5060 2040        *&-. *     00A9C\n         L     R15,1935(,R4)           58F0 478F        *.0..*     00AA0\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00AA4\n         BALR  R1,R15                  051F             *..*       00AA8\n         B     638(,R3)                47F0 327E        *.0.=*     00AAA\n         L     R6,32(,R2)              5860 2020        *.-..*     00AAE\n         SH    R6,1939(,R4)            4B60 4793        *.-.l*     00AB2\n         LTR   R0,R6                   1206             *..*       00AB6\n         BZ    228(,R3)                4780 30E4        *...U*     00AB8\n         L     R6,32(,R2)              5860 2020        *.-..*     00ABC\n         SH    R6,1941(,R4)            4B60 4795        *.-.n*     00AC0\n         LTR   R0,R6                   1206             *..*       00AC4\n         BNZ   278(,R3)                4770 3116        *....*     00AC6\n         LA    R15,1000(,R3)           41F0 33E8        *.0.Y*     00ACA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00ACE\n         BALR  R1,R15                  051F             *..*       00AD2\n         MVC   436(4,R13),1943(R4)     D203 D1B4 4797   *K.J..p*   00AD4\n         LA    R6,1                    4160 0001        *.-..*     00ADA\n         LR    R0,R6                   1806             *..*       00ADE\n         L     R6,420(,R13)            5860 D1A4        *.-Ju*     00AE0\n         ST    R0,420(,R13)            5000 D1A4        *&.Ju*     00AE4\n         ST    R6,64(,R2)              5060 2040        *&-. *     00AE8\n         LR    R0,R2                   1802             *..*       00AEC\n         LA    R15,928(,R3)            41F0 33A0        *.0..*     00AEE\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00AF2\n         BALR  R1,R15                  051F             *..*       00AF6\n         B     638(,R3)                47F0 327E        *.0.=*     00AF8\n         L     R6,32(,R2)              5860 2020        *.-..*     00AFC\n         SH    R6,1947(,R4)            4B60 479B        *.-..*     00B00\n         LTR   R0,R6                   1206             *..*       00B04\n         BZ    306(,R3)                4780 3132        *....*     00B06\n         L     R6,32(,R2)              5860 2020        *.-..*     00B0A\n         SH    R6,1949(,R4)            4B60 479D        *.-..*     00B0E\n         LTR   R0,R6                   1206             *..*       00B12\n         BNZ   356(,R3)                4770 3164        *....*     00B14\n         LA    R15,1000(,R3)           41F0 33E8        *.0.Y*     00B18\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00B1C\n         BALR  R1,R15                  051F             *..*       00B20\n         LA    R6,1                    4160 0001        *.-..*     00B22\n         LR    R0,R6                   1806             *..*       00B26\n         L     R6,420(,R13)            5860 D1A4        *.-Ju*     00B28\n         ST    R0,420(,R13)            5000 D1A4        *&.Ju*     00B2C\n         ST    R6,64(,R2)              5060 2040        *&-. *     00B30\n         LR    R0,R2                   1802             *..*       00B34\n         LA    R15,928(,R3)            41F0 33A0        *.0..*     00B36\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00B3A\n         BALR  R1,R15                  051F             *..*       00B3E\n         XC    436(4,R13),436(R13)     D703 D1B4 D1B4   *P.J.J.*   00B40\n         B     638(,R3)                47F0 327E        *.0.=*     00B46\n         L     R6,32(,R2)              5860 2020        *.-..*     00B4A\n         SH    R6,1951(,R4)            4B60 479F        *.-..*     00B4E\n         LTR   R0,R6                   1206             *..*       00B52\n         BZ    384(,R3)                4780 3180        *....*     00B54\n         L     R6,32(,R2)              5860 2020        *.-..*     00B58\n         SH    R6,1953(,R4)            4B60 47A1        *.-.~*     00B5C\n         LTR   R0,R6                   1206             *..*       00B60\n         BNZ   404(,R3)                4770 3194        *...m*     00B62\n         LA    R15,1000(,R3)           41F0 33E8        *.0.Y*     00B66\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00B6A\n         BALR  R1,R15                  051F             *..*       00B6E\n         MVC   428(4,R13),1955(R4)     D203 D1AC 47A3   *K.J..t*   00B70\n         B     638(,R3)                47F0 327E        *.0.=*     00B76\n         L     R6,32(,R2)              5860 2020        *.-..*     00B7A\n         SH    R6,1959(,R4)            4B60 47A7        *.-.x*     00B7E\n         LTR   R0,R6                   1206             *..*       00B82\n         BZ    432(,R3)                4780 31B0        *....*     00B84\n         L     R6,32(,R2)              5860 2020        *.-..*     00B88\n         SH    R6,1961(,R4)            4B60 47A9        *.-.z*     00B8C\n         LTR   R0,R6                   1206             *..*       00B90\n         BNZ   482(,R3)                4770 31E2        *...S*     00B92\n         LA    R15,1000(,R3)           41F0 33E8        *.0.Y*     00B96\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00B9A\n         BALR  R1,R15                  051F             *..*       00B9E\n         LA    R6,1                    4160 0001        *.-..*     00BA0\n         LR    R0,R6                   1806             *..*       00BA4\n         L     R6,424(,R13)            5860 D1A8        *.-Jy*     00BA6\n         ST    R0,424(,R13)            5000 D1A8        *&.Jy*     00BAA\n         ST    R6,64(,R2)              5060 2040        *&-. *     00BAE\n         LR    R0,R2                   1802             *..*       00BB2\n         LA    R15,928(,R3)            41F0 33A0        *.0..*     00BB4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00BB8\n         BALR  R1,R15                  051F             *..*       00BBC\n         MVC   440(4,R13),1963(R4)     D203 D1B8 47AB   *K.J...*   00BBE\n         B     638(,R3)                47F0 327E        *.0.=*     00BC4\n         L     R6,32(,R2)              5860 2020        *.-..*     00BC8\n         SH    R6,1967(,R4)            4B60 47AF        *.-..*     00BCC\n         LTR   R0,R6                   1206             *..*       00BD0\n         BZ    510(,R3)                4780 31FE        *....*     00BD2\n         L     R6,32(,R2)              5860 2020        *.-..*     00BD6\n         SH    R6,1969(,R4)            4B60 47B1        *.-..*     00BDA\n         LTR   R0,R6                   1206             *..*       00BDE\n         BNZ   560(,R3)                4770 3230        *....*     00BE0\n         LA    R15,1000(,R3)           41F0 33E8        *.0.Y*     00BE4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00BE8\n         BALR  R1,R15                  051F             *..*       00BEC\n         LA    R6,1                    4160 0001        *.-..*     00BEE\n         LR    R0,R6                   1806             *..*       00BF2\n         L     R6,424(,R13)            5860 D1A8        *.-Jy*     00BF4\n         ST    R0,424(,R13)            5000 D1A8        *&.Jy*     00BF8\n         ST    R6,64(,R2)              5060 2040        *&-. *     00BFC\n         LR    R0,R2                   1802             *..*       00C00\n         LA    R15,928(,R3)            41F0 33A0        *.0..*     00C02\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00C06\n         BALR  R1,R15                  051F             *..*       00C0A\n         XC    440(4,R13),440(R13)     D703 D1B8 D1B8   *P.J.J.*   00C0C\n         B     638(,R3)                47F0 327E        *.0.=*     00C12\n         L     R6,32(,R2)              5860 2020        *.-..*     00C16\n         SH    R6,1971(,R4)            4B60 47B3        *.-..*     00C1A\n         LTR   R0,R6                   1206             *..*       00C1E\n         BZ    588(,R3)                4780 324C        *...<*     00C20\n         L     R6,32(,R2)              5860 2020        *.-..*     00C24\n         SH    R6,1973(,R4)            4B60 47B5        *.-..*     00C28\n         LTR   R0,R6                   1206             *..*       00C2C\n         BNZ   592(,R3)                4770 3250        *...&*     00C2E\n         B     638(,R3)                47F0 327E        *.0.=*     00C32\n         LA    R6,2985(,R4)            4160 4BA9        *.-.z*     00C36\n         ST    R6,64(,R2)              5060 2040        *&-. *     00C3A\n         L     R6,32(,R2)              5860 2020        *.-..*     00C3E\n         ST    R6,96(,R2)              5060 2060        *&-.-*     00C42\n         LA    R15,735(,R4)            41F0 42DF        *.0..*     00C46\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     00C4A\n         BALR  R1,R15                  051F             *..*       00C4E\n         ST    R6,68(,R2)              5060 2044        *&-..*     00C50\n         LA    R15,173(,R4)            41F0 40AD        *.0 .*     00C54\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00C58\n         BALR  R1,R15                  051F             *..*       00C5C\n         XC    28(4,R2),28(R2)         D703 201C 201C   *P.....*   00C5E\n         B     100(,R3)                47F0 3064        *.0..*     00C64\n         LA    R6,296(R13)             416D 0128        *._..*     00C68\n         ST    R6,56(,R2)              5060 2038        *&-..*     00C6C\n         L     R15,1851(,R4)           58F0 473B        *.0..*     00C70\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00C74\n         BALR  R1,R15                  051F             *..*       00C78\n         L     R6,28(,R2)              5860 201C        *.-..*     00C7A\n         LTR   R6,R6                   1266             *..*       00C7E\n         LA    R6,1                    4160 0001        *.-..*     00C80\n         BZ    676(,R3)                4780 32A4        *...u*     00C84\n         XR    R6,R6                   1766             *..*       00C88\n         LTR   R0,R6                   1206             *..*       00C8A\n         BZ    688(,R3)                4780 32B0        *....*     00C8C\n         XR    R6,R6                   1766             *..*       00C90\n         B     918(,R3)                47F0 3396        *.0.o*     00C92\n         L     R6,420(,R13)            5860 D1A4        *.-Ju*     00C96\n         LTR   R6,R6                   1266             *..*       00C9A\n         LA    R6,1                    4160 0001        *.-..*     00C9C\n         BZ    704(,R3)                4780 32C0        *...{*     00CA0\n         XR    R6,R6                   1766             *..*       00CA4\n         LTR   R0,R6                   1206             *..*       00CA6\n         BZ    742(,R3)                4780 32E6        *...W*     00CA8\n         LA    R6,2949(,R4)            4160 4B85        *.-.e*     00CAC\n         ST    R6,64(,R2)              5060 2040        *&-. *     00CB0\n         LA    R6,2947(,R4)            4160 4B83        *.-.c*     00CB4\n         ST    R6,68(,R2)              5060 2044        *&-..*     00CB8\n         LA    R15,173(,R4)            41F0 40AD        *.0 .*     00CBC\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00CC0\n         BALR  R1,R15                  051F             *..*       00CC4\n         XR    R6,R6                   1766             *..*       00CC6\n         B     918(,R3)                47F0 3396        *.0.o*     00CC8\n         LA    R6,240(R13)             416D 00F0        *._.0*     00CCC\n         ST    R6,64(,R2)              5060 2040        *&-. *     00CD0\n         L     R15,1815(,R4)           58F0 4717        *.0..*     00CD4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00CD8\n         BALR  R1,R15                  051F             *..*       00CDC\n         LA    R6,2925(,R4)            4160 4B6D        *.-._*     00CDE\n         ST    R6,64(,R2)              5060 2040        *&-. *     00CE2\n         L     R15,1819(,R4)           58F0 471B        *.0..*     00CE6\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00CEA\n         BALR  R1,R15                  051F             *..*       00CEE\n         L     R6,436(,R13)            5860 D1B4        *.-J.*     00CF0\n         LTR   R0,R6                   1206             *..*       00CF4\n         BZ    796(,R3)                4780 331C        *....*     00CF6\n         LA    R6,2919(,R4)            4160 4B67        *.-..*     00CFA\n         B     800(,R3)                47F0 3320        *.0..*     00CFE\n         LA    R6,2911(,R4)            4160 4B5F        *.-.^*     00D02\n         ST    R6,44(,R2)              5060 202C        *&-..*     00D06\n         ST    R6,72(,R2)              5060 2048        *&-..*     00D0A\n         L     R15,1819(,R4)           58F0 471B        *.0..*     00D0E\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     00D12\n         BALR  R1,R15                  051F             *..*       00D16\n         L     R6,428(,R13)            5860 D1AC        *.-J.*     00D18\n         LTR   R0,R6                   1206             *..*       00D1C\n         BZ    846(,R3)                4780 334E        *...+*     00D1E\n         LA    R6,2903(,R4)            4160 4B57        *.-..*     00D22\n         ST    R6,80(,R2)              5060 2050        *&-.&*     00D26\n         L     R15,1819(,R4)           58F0 471B        *.0..*     00D2A\n         LA    R14,56(,R2)             41E0 2038        *.\\..*     00D2E\n         BALR  R1,R15                  051F             *..*       00D32\n         L     R6,424(,R13)            5860 D1A8        *.-Jy*     00D34\n         LTR   R0,R6                   1206             *..*       00D38\n         BZ    896(,R3)                4780 3380        *....*     00D3A\n         L     R6,440(,R13)            5860 D1B8        *.-J.*     00D3E\n         LTR   R0,R6                   1206             *..*       00D42\n         BZ    874(,R3)                4780 336A        *...\u00a6*     00D44\n         LA    R6,2893(,R4)            4160 4B4D        *.-.(*     00D48\n         B     878(,R3)                47F0 336E        *.0.>*     00D4C\n         LA    R6,2883(,R4)            4160 4B43        *.-..*     00D50\n         ST    R6,60(,R2)              5060 203C        *&-..*     00D54\n         ST    R6,88(,R2)              5060 2058        *&-..*     00D58\n         L     R15,1819(,R4)           58F0 471B        *.0..*     00D5C\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     00D60\n         BALR  R1,R15                  051F             *..*       00D64\n         LA    R6,240(R13)             416D 00F0        *._.0*     00D66\n         ST    R6,88(,R2)              5060 2058        *&-..*     00D6A\n         L     R15,1815(,R4)           58F0 4717        *.0..*     00D6E\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     00D72\n         BALR  R1,R15                  051F             *..*       00D76\n         LA    R6,1                    4160 0001        *.-..*     00D78\n         LM    R1,R5,4(R2)             9815 2004        *q...*     00D7C\n         BR    R1                      07F1             *.1*       00D80\n         NR    R1,R10                  141A             *..*       00D82\n         LCR   R4,R12                  134C             *.<*       00D84\n$$$$0302 STM   R0,R5,0(R14)            9005 E000        *..\\.*     00D86\n         LR    R2,R14                  182E             *..*       00D8A\n         LR    R3,R15                  183F             *..*       00D8C\n         LA    R4,4095(R3)             4143 0FFF        *....*     00D8E\n         LA    R5,4095(R4)             4154 0FFF        *....*     00D92\n         L     R6,24(,R2)              5860 2018        *.-..*     00D96\n         LTR   R0,R6                   1206             *..*       00D9A\n         BZ    62(,R3)                 4780 303E        *....*     00D9C\n         LA    R6,2085(,R4)            4160 4825        *.-..*     00DA0\n         ST    R6,56(,R2)              5060 2038        *&-..*     00DA4\n         LA    R6,2083(,R4)            4160 4823        *.-..*     00DA8\n         ST    R6,60(,R2)              5060 203C        *&-..*     00DAC\n         LA    R15,3340(,R3)           41F0 3D0C        *.0..*     00DB0\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00DB4\n         BALR  R1,R15                  051F             *..*       00DB8\n         L     R6,0(,R2)               5860 2000        *.-..*     00DBA\n         XC    28(4,R6),28(R6)         D703 601C 601C   *P.-.-.*   00DBE\n         LM    R1,R5,4(R2)             9815 2004        *q...*     00DC4\n         BR    R1                      07F1             *.1*       00DC8\n         LCR   R13,R10                 13DA             *..*       00DCA\n         LCR   R0,R4                   1304             *..*       00DCC\n$$$$0299 STM   R0,R5,0(R14)            9005 E000        *..\\.*     00DCE\n         LR    R2,R14                  182E             *..*       00DD2\n         LR    R3,R15                  183F             *..*       00DD4\n         LA    R4,4095(R3)             4143 0FFF        *....*     00DD6\n         LA    R5,4095(R4)             4154 0FFF        *....*     00DDA\n         L     R6,296(,R13)            5860 D128        *.-J.*     00DDE\n         ST    R6,56(,R2)              5060 2038        *&-..*     00DE2\n         LA    R6,24(R2)               4162 0018        *....*     00DE6\n         ST    R6,60(,R2)              5060 203C        *&-..*     00DEA\n         L     R15,931(,R4)            58F0 43A3        *.0.t*     00DEE\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00DF2\n         BALR  R1,R15                  051F             *..*       00DF6\n         LTR   R0,R6                   1206             *..*       00DF8\n         BZ    80(,R3)                 4780 3050        *...&*     00DFA\n         L     R6,24(,R2)              5860 2018        *.-..*     00DFE\n         SH    R6,1001(,R4)            4B60 43E9        *.-.Z*     00E02\n         LTR   R0,R6                   1206             *..*       00E06\n         BZ    80(,R3)                 4780 3050        *...&*     00E08\n         L     R6,24(,R2)              5860 2018        *.-..*     00E0C\n         SH    R6,1003(,R4)            4B60 43EB        *.-..*     00E10\n         LTR   R0,R6                   1206             *..*       00E14\n         BZ    80(,R3)                 4780 3050        *...&*     00E16\n         B     16(,R3)                 47F0 3010        *.0..*     00E1A\n         LM    R1,R5,4(R2)             9815 2004        *q...*     00E1E\n         BR    R1                      07F1             *.1*       00E22\n         LCR   R9,R6                   1396             *.o*       00E24\n         LTR   R10,R10                 12AA             *..*       00E26\n$$$$0283 STM   R0,R5,0(R14)            9005 E000        *..\\.*     00E28\n         LR    R2,R14                  182E             *..*       00E2C\n         LR    R3,R15                  183F             *..*       00E2E\n         LA    R4,4095(R3)             4143 0FFF        *....*     00E30\n         LA    R5,4095(R4)             4154 0FFF        *....*     00E34\n         L     R6,432(,R13)            5860 D1B0        *.-J.*     00E38\n         LTR   R0,R6                   1206             *..*       00E3C\n         BZ    212(,R3)                4780 30D4        *...M*     00E3E\n         MVC   216(24,R13),368(R13)    D217 D0D8 D170   *K.}QJ.*   00E42\n         LA    R6,416(R13)             416D 01A0        *._..*     00E48\n         ST    R6,56(,R2)              5060 2038        *&-..*     00E4C\n         ST    R13,72(,R2)             50D0 2048        *&}..*     00E50\n         LA    R6,329(,R4)             4160 4149        *.-..*     00E54\n         ST    R6,68(,R2)              5060 2044        *&-..*     00E58\n         MVC   60(8,R2),68(R2)         D207 203C 2044   *K.....*   00E5C\n         LA    R15,798(,R3)            41F0 331E        *.0..*     00E62\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00E66\n         BALR  R1,R15                  051F             *..*       00E6A\n         LTR   R0,R6                   1206             *..*       00E6C\n         BNZ   208(,R3)                4770 30D0        *...}*     00E6E\n         L     R6,436(,R13)            5860 D1B4        *.-J.*     00E72\n         LTR   R6,R6                   1266             *..*       00E76\n         LA    R6,1                    4160 0001        *.-..*     00E78\n         BZ    90(,R3)                 4780 305A        *...!*     00E7C\n         XR    R6,R6                   1766             *..*       00E80\n         LTR   R0,R6                   1206             *..*       00E82\n         BZ    208(,R3)                4780 30D0        *...}*     00E84\n         MVC   216(24,R13),344(R13)    D217 D0D8 D158   *K.}QJ.*   00E88\n         LA    R6,24(R2)               4162 0018        *....*     00E8E\n         ST    R6,56(,R2)              5060 2038        *&-..*     00E92\n         LA    R15,107(,R4)            41F0 406B        *.0 ,*     00E96\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00E9A\n         BALR  R1,R15                  051F             *..*       00E9E\n         LTR   R0,R6                   1206             *..*       00EA0\n         BZ    144(,R3)                4780 3090        *....*     00EA2\n         L     R6,24(,R2)              5860 2018        *.-..*     00EA6\n         SH    R6,923(,R4)             4B60 439B        *.-..*     00EAA\n         LTR   R0,R6                   1206             *..*       00EAE\n         BNZ   144(,R3)                4770 3090        *....*     00EB0\n         B     102(,R3)                47F0 3066        *.0..*     00EB4\n         LA    R6,216(R13)             416D 00D8        *._.Q*     00EB8\n         ST    R6,56(,R2)              5060 2038        *&-..*     00EBC\n         L     R15,837(,R4)            58F0 4345        *.0..*     00EC0\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00EC4\n         BALR  R1,R15                  051F             *..*       00EC8\n         LTR   R6,R6                   1266             *..*       00ECA\n         LA    R6,1                    4160 0001        *.-..*     00ECC\n         BZ    174(,R3)                4780 30AE        *....*     00ED0\n         XR    R6,R6                   1766             *..*       00ED4\n         LTR   R0,R6                   1206             *..*       00ED6\n         BZ    208(,R3)                4780 30D0        *...}*     00ED8\n         LA    R6,2213(,R4)            4160 48A5        *.-.v*     00EDC\n         ST    R6,56(,R2)              5060 2038        *&-..*     00EE0\n         LA    R6,2211(,R4)            4160 48A3        *.-.t*     00EE4\n         ST    R6,60(,R2)              5060 203C        *&-..*     00EE8\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     00EEC\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00EF0\n         BALR  R1,R15                  051F             *..*       00EF4\n         XR    R6,R6                   1766             *..*       00EF6\n         B     436(,R3)                47F0 31B4        *.0..*     00EF8\n         MVC   216(24,R13),344(R13)    D217 D0D8 D158   *K.}QJ.*   00EFC\n         LA    R6,24(R2)               4162 0018        *....*     00F02\n         ST    R6,56(,R2)              5060 2038        *&-..*     00F06\n         LA    R15,107(,R4)            41F0 406B        *.0 ,*     00F0A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00F0E\n         BALR  R1,R15                  051F             *..*       00F12\n         LTR   R0,R6                   1206             *..*       00F14\n         BZ    436(,R3)                4780 31B4        *....*     00F16\n         L     R6,24(,R2)              5860 2018        *.-..*     00F1A\n         S     R6,444(,R13)            5B60 D1BC        *$-J.*     00F1E\n         LTR   R0,R6                   1206             *..*       00F22\n         BZ    366(,R3)                4780 316E        *...>*     00F24\n         L     R6,24(,R2)              5860 2018        *.-..*     00F28\n         SH    R6,925(,R4)             4B60 439D        *.-..*     00F2C\n         LTR   R0,R6                   1206             *..*       00F30\n         BNZ   298(,R3)                4770 312A        *....*     00F32\n         LA    R6,24(R2)               4162 0018        *....*     00F36\n         ST    R6,64(,R2)              5060 2040        *&-. *     00F3A\n         LA    R15,107(,R4)            41F0 406B        *.0 ,*     00F3E\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00F42\n         BALR  R1,R15                  051F             *..*       00F46\n         LTR   R0,R6                   1206             *..*       00F48\n         BZ    298(,R3)                4780 312A        *....*     00F4A\n         B     256(,R3)                47F0 3100        *.0..*     00F4E\n         LA    R6,216(R13)             416D 00D8        *._.Q*     00F52\n         ST    R6,64(,R2)              5060 2040        *&-. *     00F56\n         L     R15,837(,R4)            58F0 4345        *.0..*     00F5A\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00F5E\n         BALR  R1,R15                  051F             *..*       00F62\n         LTR   R6,R6                   1266             *..*       00F64\n         LA    R6,1                    4160 0001        *.-..*     00F66\n         BZ    328(,R3)                4780 3148        *....*     00F6A\n         XR    R6,R6                   1766             *..*       00F6E\n         LTR   R0,R6                   1206             *..*       00F70\n         BZ    362(,R3)                4780 316A        *...\u00a6*     00F72\n         LA    R6,2181(,R4)            4160 4885        *.-.e*     00F76\n         ST    R6,64(,R2)              5060 2040        *&-. *     00F7A\n         LA    R6,2165(,R4)            4160 4875        *.-..*     00F7E\n         ST    R6,68(,R2)              5060 2044        *&-..*     00F82\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     00F86\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00F8A\n         BALR  R1,R15                  051F             *..*       00F8E\n         XR    R6,R6                   1766             *..*       00F90\n         B     436(,R3)                47F0 31B4        *.0..*     00F92\n         LA    R6,416(R13)             416D 01A0        *._..*     00F96\n         ST    R6,64(,R2)              5060 2040        *&-. *     00F9A\n         ST    R13,80(,R2)             50D0 2050        *&}.&*     00F9E\n         LA    R6,107(,R4)             4160 406B        *.- ,*     00FA2\n         ST    R6,76(,R2)              5060 204C        *&-.<*     00FA6\n         MVC   68(8,R2),76(R2)         D207 2044 204C   *K....<*   00FAA\n         LA    R15,798(,R3)            41F0 331E        *.0..*     00FB0\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00FB4\n         BALR  R1,R15                  051F             *..*       00FB8\n         LTR   R0,R6                   1206             *..*       00FBA\n         BNZ   436(,R3)                4770 31B4        *....*     00FBC\n         LA    R6,2135(,R4)            4160 4857        *.-..*     00FC0\n         ST    R6,64(,R2)              5060 2040        *&-. *     00FC4\n         LA    R6,2121(,R4)            4160 4849        *.-..*     00FC8\n         ST    R6,68(,R2)              5060 2044        *&-..*     00FCC\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     00FD0\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     00FD4\n         BALR  R1,R15                  051F             *..*       00FD8\n         XR    R6,R6                   1766             *..*       00FDA\n         LTR   R0,R6                   1206             *..*       00FDC\n         BZ    788(,R3)                4780 3314        *....*     00FDE\n         L     R6,288(,R13)            5860 D120        *.-J.*     00FE2\n         ST    R6,56(,R2)              5060 2038        *&-..*     00FE6\n         L     R6,416(,R13)            5860 D1A0        *.-J.*     00FEA\n         ST    R6,60(,R2)              5060 203C        *&-..*     00FEE\n         L     R6,292(,R13)            5860 D124        *.-J.*     00FF2\n         ST    R6,64(,R2)              5060 2040        *&-. *     00FF6\n         L     R15,717(,R4)            58F0 42CD        *.0..*     00FFA\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     00FFE\n         BALR  R1,R15                  051F             *..*       01002\n         LTR   R0,R6                   1206             *..*       01004\n         BZ    514(,R3)                4780 3202        *....*     01006\n         DC    X'416048'               416048           *.-.*      0100A\nA00100D  DC    X'33'                   33               *.*        0100D\n         ST    R6,56(,R2)              5060 2038        *&-..*     0100E\n         L     R6,416(,R13)            5860 D1A0        *.-J.*     01012\n         ST    R6,60(,R2)              5060 203C        *&-..*     01016\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     0101A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0101E\n         BALR  R1,R15                  051F             *..*       01022\n         XR    R6,R6                   1766             *..*       01024\n         B     788(,R3)                47F0 3314        *.0..*     01026\n         MVC   216(24,R13),344(R13)    D217 D0D8 D158   *K.}QJ.*   0102A\n         MVC   240(24,R13),320(R13)    D217 D0F0 D140   *K.}0J *   01030\n         L     R6,436(,R13)            5860 D1B4        *.-J.*     01036\n         LTR   R0,R6                   1206             *..*       0103A\n         BZ    634(,R3)                4780 327A        *...:*     0103C\n         L     R6,444(,R13)            5860 D1BC        *.-J.*     01040\n         ST    R6,64(,R2)              5060 2040        *&-. *     01044\n         L     R15,765(,R4)            58F0 42FD        *.0..*     01048\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0104C\n         BALR  R1,R15                  051F             *..*       01050\n         LA    R6,127                  4160 007F        *.-.\"*     01052\n         ST    R6,64(,R2)              5060 2040        *&-. *     01056\n         L     R15,765(,R4)            58F0 42FD        *.0..*     0105A\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0105E\n         BALR  R1,R15                  051F             *..*       01062\n         L     R6,416(,R13)            5860 D1A0        *.-J.*     01064\n         ST    R6,64(,R2)              5060 2040        *&-. *     01068\n         L     R15,729(,R4)            58F0 42D9        *.0.R*     0106C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01070\n         BALR  R1,R15                  051F             *..*       01074\n         LA    R6,127                  4160 007F        *.-.\"*     01076\n         ST    R6,64(,R2)              5060 2040        *&-. *     0107A\n         L     R15,765(,R4)            58F0 42FD        *.0..*     0107E\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01082\n         BALR  R1,R15                  051F             *..*       01086\n         L     R6,448(,R13)            5860 D1C0        *.-J{*     01088\n         ST    R6,64(,R2)              5060 2040        *&-. *     0108C\n         L     R15,765(,R4)            58F0 42FD        *.0..*     01090\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01094\n         BALR  R1,R15                  051F             *..*       01098\n         LA    R6,1                    4160 0001        *.-..*     0109A\n         B     788(,R3)                47F0 3314        *.0..*     0109E\n         LA    R6,24(R2)               4162 0018        *....*     010A2\n         ST    R6,64(,R2)              5060 2040        *&-. *     010A6\n         LA    R15,107(,R4)            41F0 406B        *.0 ,*     010AA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     010AE\n         BALR  R1,R15                  051F             *..*       010B2\n         LTR   R0,R6                   1206             *..*       010B4\n         BZ    676(,R3)                4780 32A4        *...u*     010B6\n         L     R6,24(,R2)              5860 2018        *.-..*     010BA\n         S     R6,448(,R13)            5B60 D1C0        *$-J{*     010BE\n         LTR   R0,R6                   1206             *..*       010C2\n         BZ    676(,R3)                4780 32A4        *...u*     010C4\n         B     634(,R3)                47F0 327A        *.0.:*     010C8\n         L     R6,24(,R2)              5860 2018        *.-..*     010CC\n         S     R6,448(,R13)            5B60 D1C0        *$-J{*     010D0\n         LTR   R0,R6                   1206             *..*       010D4\n         LA    R6,1                    4160 0001        *.-..*     010D6\n         BZ    696(,R3)                4780 32B8        *....*     010DA\n         XR    R6,R6                   1766             *..*       010DE\n         LTR   R0,R6                   1206             *..*       010E0\n         BNZ   788(,R3)                4770 3314        *....*     010E2\n         L     R6,432(,R13)            5860 D1B0        *.-J.*     010E6\n         LTR   R0,R6                   1206             *..*       010EA\n         BZ    742(,R3)                4780 32E6        *...W*     010EC\n         LA    R6,2029(,R4)            4160 47ED        *.-..*     010F0\n         ST    R6,64(,R2)              5060 2040        *&-. *     010F4\n         LA    R6,2027(,R4)            4160 47EB        *.-..*     010F8\n         ST    R6,68(,R2)              5060 2044        *&-..*     010FC\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     01100\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01104\n         BALR  R1,R15                  051F             *..*       01108\n         B     768(,R3)                47F0 3300        *.0..*     0110A\n         LA    R6,1997(,R4)            4160 47CD        *.-..*     0110E\n         ST    R6,64(,R2)              5060 2040        *&-. *     01112\n         LA    R6,1981(,R4)            4160 47BD        *.-..*     01116\n         ST    R6,68(,R2)              5060 2044        *&-..*     0111A\n         LA    R15,3178(,R3)           41F0 3C6A        *.0.\u00a6*     0111E\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01122\n         BALR  R1,R15                  051F             *..*       01126\n         L     R6,288(,R13)            5860 D120        *.-J.*     01128\n         ST    R6,64(,R2)              5060 2040        *&-. *     0112C\n         L     R15,761(,R4)            58F0 42F9        *.0.9*     01130\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01134\n         BALR  R1,R15                  051F             *..*       01138\n         XR    R6,R6                   1766             *..*       0113A\n         LM    R1,R5,4(R2)             9815 2004        *q...*     0113C\n         BR    R1                      07F1             *.1*       01140\n         LPR   R8,R4                   1084             *.d*       01142\n         CLCL  R8,R12                  0F8C             *..*       01144\n$$$$0278 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01146\n         LR    R2,R14                  182E             *..*       0114A\n         LR    R3,R15                  183F             *..*       0114C\n         LA    R4,4095(R3)             4143 0FFF        *....*     0114E\n         LA    R5,4095(R4)             4154 0FFF        *....*     01152\n         LA    R6,36(R2)               4162 0024        *....*     01156\n         ST    R6,64(,R2)              5060 2040        *&-. *     0115A\n         L     R0,32(,R2)              5800 2020        *....*     0115E\n         L     R15,28(,R2)             58F0 201C        *.0..*     01162\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01166\n         BALR  R1,R15                  051F             *..*       0116A\n         LTR   R0,R6                   1206             *..*       0116C\n         BZ    62(,R3)                 4780 303E        *....*     0116E\n         L     R6,36(,R2)              5860 2024        *.-..*     01172\n         SH    R6,139(,R4)             4B60 408B        *.- .*     01176\n         LTR   R0,R6                   1206             *..*       0117A\n         BZ    62(,R3)                 4780 303E        *....*     0117C\n         B     16(,R3)                 47F0 3010        *.0..*     01180\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01184\n         ST    R6,64(,R2)              5060 2040        *&-. *     01188\n         L     R15,39(,R4)             58F0 4027        *.0 .*     0118C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01190\n         BALR  R1,R15                  051F             *..*       01194\n         LTR   R0,R6                   1206             *..*       01196\n         BNZ   100(,R3)                4770 3064        *....*     01198\n         L     R6,36(,R2)              5860 2024        *.-..*     0119C\n         SH    R6,141(,R4)             4B60 408D        *.- .*     011A0\n         LTR   R0,R6                   1206             *..*       011A4\n         BZ    106(,R3)                4780 306A        *...\u00a6*     011A6\n         XR    R6,R6                   1766             *..*       011AA\n         B     438(,R3)                47F0 31B6        *.0..*     011AC\n         L     R6,572(,R13)            5860 D23C        *.-K.*     011B0\n         XC    0(4,R6),0(R6)           D703 6000 6000   *P.-.-.*   011B4\n         L     R6,572(,R13)            5860 D23C        *.-K.*     011BA\n         L     R6,0(,R6)               5860 6000        *.--.*     011BE\n         AH    R6,143(,R4)             4A60 408F        *\u00a2- .*     011C2\n         LTR   R0,R6                   1206             *..*       011C6\n         BP    348(,R3)                4720 315C        *...**     011C8\n         LA    R6,36(R2)               4162 0024        *....*     011CC\n         ST    R6,72(,R2)              5060 2048        *&-..*     011D0\n         L     R0,32(,R2)              5800 2020        *....*     011D4\n         L     R15,28(,R2)             58F0 201C        *.0..*     011D8\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     011DC\n         BALR  R1,R15                  051F             *..*       011E0\n         LTR   R0,R6                   1206             *..*       011E2\n         BZ    348(,R3)                4780 315C        *...**     011E4\n         L     R6,36(,R2)              5860 2024        *.-..*     011E8\n         SH    R6,145(,R4)             4B60 4091        *.- j*     011EC\n         LTR   R0,R6                   1206             *..*       011F0\n         BZ    348(,R3)                4780 315C        *...**     011F2\n         L     R6,36(,R2)              5860 2024        *.-..*     011F6\n         LA    R7,1                    4170 0001        *....*     011FA\n         L     R8,572(,R13)            5880 D23C        *..K.*     011FE\n         L     R0,0(,R8)               5800 8000        *....*     01202\n         AR    R0,R7                   1A07             *..*       01206\n         ST    R0,0(,R8)               5000 8000        *&...*     01208\n         L     R8,0(,R8)               5880 8000        *....*     0120C\n         SLA   R8,2                    8B80 0002        *....*     01210\n         A     R8,548(,R13)            5A80 D224        *!.K.*     01214\n         ST    R6,0(,R8)               5060 8000        *&-..*     01218\n         L     R6,36(,R2)              5860 2024        *.-..*     0121C\n         SH    R6,147(,R4)             4B60 4093        *.- l*     01220\n         LTR   R0,R6                   1206             *..*       01224\n         BZ    236(,R3)                4780 30EC        *....*     01226\n         LA    R6,1                    4160 0001        *.-..*     0122A\n         B     338(,R3)                47F0 3152        *.0..*     0122E\n         LA    R6,36(R2)               4162 0024        *....*     01232\n         ST    R6,80(,R2)              5060 2050        *&-.&*     01236\n         L     R0,32(,R2)              5800 2020        *....*     0123A\n         L     R15,28(,R2)             58F0 201C        *.0..*     0123E\n         LA    R14,56(,R2)             41E0 2038        *.\\..*     01242\n         BALR  R1,R15                  051F             *..*       01246\n         LTR   R0,R6                   1206             *..*       01248\n         BZ    310(,R3)                4780 3136        *....*     0124A\n         L     R6,36(,R2)              5860 2024        *.-..*     0124E\n         LA    R7,1                    4170 0001        *....*     01252\n         L     R8,572(,R13)            5880 D23C        *..K.*     01256\n         L     R0,0(,R8)               5800 8000        *....*     0125A\n         AR    R0,R7                   1A07             *..*       0125E\n         ST    R0,0(,R8)               5000 8000        *&...*     01260\n         L     R8,0(,R8)               5880 8000        *....*     01264\n         SLA   R8,2                    8B80 0002        *....*     01268\n         A     R8,548(,R13)            5A80 D224        *!.K.*     0126C\n         ST    R6,0(,R8)               5060 8000        *&-..*     01270\n         LA    R6,1                    4160 0001        *.-..*     01274\n         B     338(,R3)                47F0 3152        *.0..*     01278\n         LA    R6,1559(,R4)            4160 4617        *.-..*     0127C\n         ST    R6,88(,R2)              5060 2058        *&-..*     01280\n         LA    R6,1557(,R4)            4160 4615        *.-..*     01284\n         ST    R6,92(,R2)              5060 205C        *&-.**     01288\n         LA    R15,2380(,R3)           41F0 394C        *.0.<*     0128C\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01290\n         BALR  R1,R15                  051F             *..*       01294\n         XR    R6,R6                   1766             *..*       01296\n         LTR   R0,R6                   1206             *..*       01298\n         BZ    348(,R3)                4780 315C        *...**     0129A\n         B     116(,R3)                47F0 3074        *.0..*     0129E\n         L     R6,36(,R2)              5860 2024        *.-..*     012A2\n         SH    R6,149(,R4)             4B60 4095        *.- n*     012A6\n         LTR   R0,R6                   1206             *..*       012AA\n         BZ    394(,R3)                4780 318A        *....*     012AC\n         LA    R6,1527(,R4)            4160 45F7        *.-.7*     012B0\n         ST    R6,72(,R2)              5060 2048        *&-..*     012B4\n         LA    R6,1485(,R4)            4160 45CD        *.-..*     012B8\n         ST    R6,76(,R2)              5060 204C        *&-.<*     012BC\n         LA    R15,2380(,R3)           41F0 394C        *.0.<*     012C0\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     012C4\n         BALR  R1,R15                  051F             *..*       012C8\n         XR    R6,R6                   1766             *..*       012CA\n         B     438(,R3)                47F0 31B6        *.0..*     012CC\n         MVC   72(16,R2),548(R13)      D20F 2048 D224   *K...K.*   012D0\n         L     R15,151(,R4)            58F0 4097        *.0 p*     012D6\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     012DA\n         BALR  R1,R15                  051F             *..*       012DE\n         MVC   72(16,R2),548(R13)      D20F 2048 D224   *K...K.*   012E0\n         L     R15,155(,R4)            58F0 409B        *.0 .*     012E6\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     012EA\n         BALR  R1,R15                  051F             *..*       012EE\n         L     R7,24(,R2)              5870 2018        *....*     012F0\n         ST    R6,0(,R7)               5060 7000        *&-..*     012F4\n         LA    R6,1                    4160 0001        *.-..*     012F8\n         LM    R1,R5,4(R2)             9815 2004        *q...*     012FC\n         BR    R1                      07F1             *.1*       01300\n         MVCL  R14,R2                  0EE2             *.S*       01302\n         BASR  R12,R12                 0DCC             *..*       01304\n$$$$0274 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01306\n         LR    R2,R14                  182E             *..*       0130A\n         LR    R3,R15                  183F             *..*       0130C\n         LA    R4,4095(R3)             4143 0FFF        *....*     0130E\n         LA    R5,4095(R4)             4154 0FFF        *....*     01312\n         LA    R6,24(R2)               4162 0018        *....*     01316\n         ST    R6,56(,R2)              5060 2038        *&-..*     0131A\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0131E\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     01322\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01326\n         BALR  R1,R15                  051F             *..*       0132A\n         LTR   R0,R6                   1206             *..*       0132C\n         BZ    626(,R3)                4780 3272        *....*     0132E\n         L     R6,24(,R2)              5860 2018        *.-..*     01332\n         SH    R6,3826(,R3)            4B60 3EF2        *.-.2*     01336\n         LTR   R0,R6                   1206             *..*       0133A\n         BZ    72(,R3)                 4780 3048        *....*     0133C\n         L     R6,24(,R2)              5860 2018        *.-..*     01340\n         SH    R6,3828(,R3)            4B60 3EF4        *.-.4*     01344\n         LTR   R0,R6                   1206             *..*       01348\n         BNZ   94(,R3)                 4770 305E        *...;*     0134A\n         L     R6,24(,R2)              5860 2018        *.-..*     0134E\n         ST    R6,56(,R2)              5060 2038        *&-..*     01352\n         LA    R15,1228(,R3)           41F0 34CC        *.0..*     01356\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0135A\n         BALR  R1,R15                  051F             *..*       0135E\n         B     626(,R3)                47F0 3272        *.0..*     01360\n         L     R6,24(,R2)              5860 2018        *.-..*     01364\n         SH    R6,3830(,R3)            4B60 3EF6        *.-.6*     01368\n         LTR   R0,R6                   1206             *..*       0136C\n         BNZ   532(,R3)                4770 3214        *....*     0136E\n         LA    R6,24(R2)               4162 0018        *....*     01372\n         ST    R6,56(,R2)              5060 2038        *&-..*     01376\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0137A\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     0137E\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01382\n         BALR  R1,R15                  051F             *..*       01386\n         LTR   R6,R6                   1266             *..*       01388\n         LA    R6,1                    4160 0001        *.-..*     0138A\n         BZ    142(,R3)                4780 308E        *....*     0138E\n         XR    R6,R6                   1766             *..*       01392\n         LTR   R0,R6                   1206             *..*       01394\n         BZ    180(,R3)                4780 30B4        *....*     01396\n         LA    R6,1213(,R4)            4160 44BD        *.-..*     0139A\n         ST    R6,64(,R2)              5060 2040        *&-. *     0139E\n         LA    R6,1211(,R4)            4160 44BB        *.-..*     013A2\n         ST    R6,68(,R2)              5060 2044        *&-..*     013A6\n         LA    R15,1932(,R3)           41F0 378C        *.0..*     013AA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     013AE\n         BALR  R1,R15                  051F             *..*       013B2\n         XR    R6,R6                   1766             *..*       013B4\n         B     528(,R3)                47F0 3210        *.0..*     013B6\n         L     R6,24(,R2)              5860 2018        *.-..*     013BA\n         SH    R6,3832(,R3)            4B60 3EF8        *.-.8*     013BE\n         LTR   R0,R6                   1206             *..*       013C2\n         BNZ   224(,R3)                4770 30E0        *...\\*     013C4\n         L     R6,24(,R2)              5860 2018        *.-..*     013C8\n         ST    R6,64(,R2)              5060 2040        *&-. *     013CC\n         L     R0,512(,R13)            5800 D200        *..K.*     013D0\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     013D4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     013D8\n         BALR  R1,R15                  051F             *..*       013DC\n         LA    R6,1                    4160 0001        *.-..*     013DE\n         B     528(,R3)                47F0 3210        *.0..*     013E2\n         L     R6,24(,R2)              5860 2018        *.-..*     013E6\n         ST    R6,64(,R2)              5060 2040        *&-. *     013EA\n         LA    R15,1714(,R3)           41F0 36B2        *.0..*     013EE\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     013F2\n         BALR  R1,R15                  051F             *..*       013F6\n         LTR   R6,R6                   1266             *..*       013F8\n         LA    R6,1                    4160 0001        *.-..*     013FA\n         BZ    254(,R3)                4780 30FE        *....*     013FE\n         XR    R6,R6                   1766             *..*       01402\n         LTR   R0,R6                   1206             *..*       01404\n         BZ    330(,R3)                4780 314A        *...\u00a2*     01406\n         LA    R6,1155(,R4)            4160 4483        *.-.c*     0140A\n         ST    R6,72(,R2)              5060 2048        *&-..*     0140E\n         L     R6,24(,R2)              5860 2018        *.-..*     01412\n         ST    R6,104(,R2)             5060 2068        *&-..*     01416\n         LA    R15,2494(,R3)           41F0 39BE        *.0..*     0141A\n         LA    R14,80(,R2)             41E0 2050        *.\\.&*     0141E\n         BALR  R1,R15                  051F             *..*       01422\n         ST    R6,76(,R2)              5060 204C        *&-.<*     01424\n         LA    R15,1932(,R3)           41F0 378C        *.0..*     01428\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     0142C\n         BALR  R1,R15                  051F             *..*       01430\n         L     R6,24(,R2)              5860 2018        *.-..*     01432\n         ST    R6,72(,R2)              5060 2048        *&-..*     01436\n         L     R0,512(,R13)            5800 D200        *..K.*     0143A\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0143E\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     01442\n         BALR  R1,R15                  051F             *..*       01446\n         LA    R6,1                    4160 0001        *.-..*     01448\n         B     528(,R3)                47F0 3210        *.0..*     0144C\n         L     R6,24(,R2)              5860 2018        *.-..*     01450\n         ST    R6,72(,R2)              5060 2048        *&-..*     01454\n         L     R0,512(,R13)            5800 D200        *..K.*     01458\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0145C\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     01460\n         BALR  R1,R15                  051F             *..*       01464\n         LA    R6,24(R2)               4162 0018        *....*     01466\n         ST    R6,72(,R2)              5060 2048        *&-..*     0146A\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0146E\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     01472\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     01476\n         BALR  R1,R15                  051F             *..*       0147A\n         LTR   R0,R6                   1206             *..*       0147C\n         BZ    430(,R3)                4780 31AE        *....*     0147E\n         L     R6,24(,R2)              5860 2018        *.-..*     01482\n         ST    R6,72(,R2)              5060 2048        *&-..*     01486\n         LA    R15,1714(,R3)           41F0 36B2        *.0..*     0148A\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     0148E\n         BALR  R1,R15                  051F             *..*       01492\n         LTR   R0,R6                   1206             *..*       01494\n         BZ    430(,R3)                4780 31AE        *....*     01496\n         L     R6,24(,R2)              5860 2018        *.-..*     0149A\n         ST    R6,72(,R2)              5060 2048        *&-..*     0149E\n         L     R0,512(,R13)            5800 D200        *..K.*     014A2\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     014A6\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     014AA\n         BALR  R1,R15                  051F             *..*       014AE\n         B     352(,R3)                47F0 3160        *.0.-*     014B0\n         LA    R6,216(R13)             416D 00D8        *._.Q*     014B4\n         ST    R6,72(,R2)              5060 2048        *&-..*     014B8\n         L     R15,3686(,R3)           58F0 3E66        *.0..*     014BC\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     014C0\n         BALR  R1,R15                  051F             *..*       014C4\n         LTR   R0,R6                   1206             *..*       014C6\n         BNZ   468(,R3)                4770 31D4        *...M*     014C8\n         L     R6,24(,R2)              5860 2018        *.-..*     014CC\n         S     R6,452(,R13)            5B60 D1C4        *$-JD*     014D0\n         LTR   R0,R6                   1206             *..*       014D4\n         BNZ   474(,R3)                4770 31DA        *....*     014D6\n         XR    R6,R6                   1766             *..*       014DA\n         B     528(,R3)                47F0 3210        *.0..*     014DC\n         L     R6,24(,R2)              5860 2018        *.-..*     014E0\n         SH    R6,3834(,R3)            4B60 3EFA        *.-..*     014E4\n         LTR   R0,R6                   1206             *..*       014E8\n         BNZ   510(,R3)                4770 31FE        *....*     014EA\n         LA    R6,64                   4160 0040        *.-. *     014EE\n         ST    R6,72(,R2)              5060 2048        *&-..*     014F2\n         L     R0,512(,R13)            5800 D200        *..K.*     014F6\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     014FA\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     014FE\n         BALR  R1,R15                  051F             *..*       01502\n         L     R6,24(,R2)              5860 2018        *.-..*     01504\n         ST    R6,496(,R13)            5060 D1F0        *&-J0*     01508\n         MVC   492(4,R13),3838(R3)     D203 D1EC 3EFE   *K.J...*   0150C\n         LA    R6,1                    4160 0001        *.-..*     01512\n         B     626(,R3)                47F0 3272        *.0..*     01516\n         L     R6,24(,R2)              5860 2018        *.-..*     0151A\n         ST    R6,56(,R2)              5060 2038        *&-..*     0151E\n         LA    R15,1714(,R3)           41F0 36B2        *.0..*     01522\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01526\n         BALR  R1,R15                  051F             *..*       0152A\n         LTR   R0,R6                   1206             *..*       0152C\n         BZ    600(,R3)                4780 3258        *....*     0152E\n         L     R6,24(,R2)              5860 2018        *.-..*     01532\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01536\n         LA    R15,1550(,R3)           41F0 360E        *.0..*     0153A\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     0153E\n         BALR  R1,R15                  051F             *..*       01542\n         ST    R6,64(,R2)              5060 2040        *&-. *     01544\n         L     R0,512(,R13)            5800 D200        *..K.*     01548\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0154C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01550\n         BALR  R1,R15                  051F             *..*       01554\n         LA    R6,1                    4160 0001        *.-..*     01556\n         B     626(,R3)                47F0 3272        *.0..*     0155A\n         L     R6,24(,R2)              5860 2018        *.-..*     0155E\n         ST    R6,64(,R2)              5060 2040        *&-. *     01562\n         L     R0,512(,R13)            5800 D200        *..K.*     01566\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0156A\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0156E\n         BALR  R1,R15                  051F             *..*       01572\n         LA    R6,1                    4160 0001        *.-..*     01574\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01578\n         BR    R1                      07F1             *.1*       0157C\n         BASSM R8,R10                  0C8A             *..*       0157E\n         BSM   R5,R0                   0B50             *.&*       01580\n$$$$0271 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01582\n         LR    R2,R14                  182E             *..*       01586\n         LR    R3,R15                  183F             *..*       01588\n         LA    R4,4095(R3)             4143 0FFF        *....*     0158A\n         LA    R5,4095(R4)             4154 0FFF        *....*     0158E\n         LA    R6,24(R2)               4162 0018        *....*     01592\n         ST    R6,56(,R2)              5060 2038        *&-..*     01596\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0159A\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     0159E\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     015A2\n         BALR  R1,R15                  051F             *..*       015A6\n         LTR   R0,R6                   1206             *..*       015A8\n         BZ    582(,R3)                4780 3246        *....*     015AA\n         L     R6,24(,R2)              5860 2018        *.-..*     015AE\n         SH    R6,3226(,R3)            4B60 3C9A        *.-..*     015B2\n         LTR   R0,R6                   1206             *..*       015B6\n         BZ    72(,R3)                 4780 3048        *....*     015B8\n         L     R6,24(,R2)              5860 2018        *.-..*     015BC\n         SH    R6,3228(,R3)            4B60 3C9C        *.-..*     015C0\n         LTR   R0,R6                   1206             *..*       015C4\n         BNZ   94(,R3)                 4770 305E        *...;*     015C6\n         L     R6,24(,R2)              5860 2018        *.-..*     015CA\n         ST    R6,56(,R2)              5060 2038        *&-..*     015CE\n         LA    R15,592(,R3)            41F0 3250        *.0.&*     015D2\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     015D6\n         BALR  R1,R15                  051F             *..*       015DA\n         B     582(,R3)                47F0 3246        *.0..*     015DC\n         L     R6,24(,R2)              5860 2018        *.-..*     015E0\n         ST    R6,56(,R2)              5060 2038        *&-..*     015E4\n         LA    R15,1078(,R3)           41F0 3436        *.0..*     015E8\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     015EC\n         BALR  R1,R15                  051F             *..*       015F0\n         LTR   R0,R6                   1206             *..*       015F2\n         BZ    396(,R3)                4780 318C        *....*     015F4\n         LA    R6,125                  4160 007D        *.-.'*     015F8\n         ST    R6,56(,R2)              5060 2038        *&-..*     015FC\n         L     R0,512(,R13)            5800 D200        *..K.*     01600\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01604\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01608\n         BALR  R1,R15                  051F             *..*       0160C\n         L     R6,24(,R2)              5860 2018        *.-..*     0160E\n         ST    R6,56(,R2)              5060 2038        *&-..*     01612\n         L     R0,512(,R13)            5800 D200        *..K.*     01616\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0161A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0161E\n         BALR  R1,R15                  051F             *..*       01622\n         LA    R6,24(R2)               4162 0018        *....*     01624\n         ST    R6,56(,R2)              5060 2038        *&-..*     01628\n         L     R0,504(,R13)            5800 D1F8        *..J8*     0162C\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     01630\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01634\n         BALR  R1,R15                  051F             *..*       01638\n         LTR   R0,R6                   1206             *..*       0163A\n         BZ    240(,R3)                4780 30F0        *...0*     0163C\n         L     R6,24(,R2)              5860 2018        *.-..*     01640\n         ST    R6,64(,R2)              5060 2040        *&-. *     01644\n         LA    R15,1078(,R3)           41F0 3436        *.0..*     01648\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0164C\n         BALR  R1,R15                  051F             *..*       01650\n         LTR   R0,R6                   1206             *..*       01652\n         BZ    240(,R3)                4780 30F0        *...0*     01654\n         L     R6,24(,R2)              5860 2018        *.-..*     01658\n         ST    R6,56(,R2)              5060 2038        *&-..*     0165C\n         L     R0,512(,R13)            5800 D200        *..K.*     01660\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01664\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01668\n         BALR  R1,R15                  051F             *..*       0166C\n         B     162(,R3)                47F0 30A2        *.0.s*     0166E\n         L     R6,24(,R2)              5860 2018        *.-..*     01672\n         ST    R6,56(,R2)              5060 2038        *&-..*     01676\n         LA    R15,1018(,R3)           41F0 33FA        *.0..*     0167A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0167E\n         BALR  R1,R15                  051F             *..*       01682\n         LTR   R0,R6                   1206             *..*       01684\n         BZ    330(,R3)                4780 314A        *...\u00a2*     01686\n         LA    R6,64                   4160 0040        *.-. *     0168A\n         ST    R6,64(,R2)              5060 2040        *&-. *     0168E\n         L     R0,512(,R13)            5800 D200        *..K.*     01692\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01696\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0169A\n         BALR  R1,R15                  051F             *..*       0169E\n         L     R6,24(,R2)              5860 2018        *.-..*     016A0\n         ST    R6,96(,R2)              5060 2060        *&-.-*     016A4\n         LA    R15,966(,R3)            41F0 33C6        *.0.F*     016A8\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     016AC\n         BALR  R1,R15                  051F             *..*       016B0\n         ST    R6,64(,R2)              5060 2040        *&-. *     016B2\n         L     R0,512(,R13)            5800 D200        *..K.*     016B6\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     016BA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     016BE\n         BALR  R1,R15                  051F             *..*       016C2\n         LA    R6,1                    4160 0001        *.-..*     016C4\n         B     392(,R3)                47F0 3188        *.0.h*     016C8\n         LA    R6,216(R13)             416D 00D8        *._.Q*     016CC\n         ST    R6,64(,R2)              5060 2040        *&-. *     016D0\n         L     R15,3050(,R3)           58F0 3BEA        *.0..*     016D4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     016D8\n         BALR  R1,R15                  051F             *..*       016DC\n         LTR   R0,R6                   1206             *..*       016DE\n         BNZ   368(,R3)                4770 3170        *....*     016E0\n         L     R6,24(,R2)              5860 2018        *.-..*     016E4\n         S     R6,452(,R13)            5B60 D1C4        *$-JD*     016E8\n         LTR   R0,R6                   1206             *..*       016EC\n         BNZ   374(,R3)                4770 3176        *....*     016EE\n         XR    R6,R6                   1766             *..*       016F2\n         B     392(,R3)                47F0 3188        *.0.h*     016F4\n         L     R6,24(,R2)              5860 2018        *.-..*     016F8\n         ST    R6,496(,R13)            5060 D1F0        *&-J0*     016FC\n         MVC   492(4,R13),3230(R3)     D203 D1EC 3C9E   *K.J...*   01700\n         LA    R6,1                    4160 0001        *.-..*     01706\n         B     582(,R3)                47F0 3246        *.0..*     0170A\n         L     R6,24(,R2)              5860 2018        *.-..*     0170E\n         ST    R6,56(,R2)              5060 2038        *&-..*     01712\n         LA    R15,1018(,R3)           41F0 33FA        *.0..*     01716\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0171A\n         BALR  R1,R15                  051F             *..*       0171E\n         LTR   R0,R6                   1206             *..*       01720\n         BZ    464(,R3)                4780 31D0        *...}*     01722\n         L     R6,24(,R2)              5860 2018        *.-..*     01726\n         ST    R6,96(,R2)              5060 2060        *&-.-*     0172A\n         LA    R15,966(,R3)            41F0 33C6        *.0.F*     0172E\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01732\n         BALR  R1,R15                  051F             *..*       01736\n         ST    R6,64(,R2)              5060 2040        *&-. *     01738\n         L     R0,512(,R13)            5800 D200        *..K.*     0173C\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01740\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01744\n         BALR  R1,R15                  051F             *..*       01748\n         LA    R6,1                    4160 0001        *.-..*     0174A\n         B     582(,R3)                47F0 3246        *.0..*     0174E\n         L     R6,24(,R2)              5860 2018        *.-..*     01752\n         SH    R6,3234(,R3)            4B60 3CA2        *.-.s*     01756\n         LTR   R0,R6                   1206             *..*       0175A\n         BNZ   556(,R3)                4770 322C        *....*     0175C\n         LA    R6,663(,R4)             4160 4297        *.-.p*     01760\n         ST    R6,64(,R2)              5060 2040        *&-. *     01764\n         LA    R6,635(,R4)             4160 427B        *.-.#*     01768\n         ST    R6,68(,R2)              5060 2044        *&-..*     0176C\n         LA    R15,1296(,R3)           41F0 3510        *.0..*     01770\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01774\n         BALR  R1,R15                  051F             *..*       01778\n         LA    R6,125                  4160 007D        *.-.'*     0177A\n         ST    R6,64(,R2)              5060 2040        *&-. *     0177E\n         L     R0,512(,R13)            5800 D200        *..K.*     01782\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01786\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0178A\n         BALR  R1,R15                  051F             *..*       0178E\n         LA    R6,125                  4160 007D        *.-.'*     01790\n         ST    R6,64(,R2)              5060 2040        *&-. *     01794\n         L     R0,512(,R13)            5800 D200        *..K.*     01798\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0179C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     017A0\n         BALR  R1,R15                  051F             *..*       017A4\n         LA    R6,1                    4160 0001        *.-..*     017A6\n         B     582(,R3)                47F0 3246        *.0..*     017AA\n         L     R6,24(,R2)              5860 2018        *.-..*     017AE\n         ST    R6,64(,R2)              5060 2040        *&-. *     017B2\n         L     R0,512(,R13)            5800 D200        *..K.*     017B6\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     017BA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     017BE\n         BALR  R1,R15                  051F             *..*       017C2\n         LA    R6,1                    4160 0001        *.-..*     017C4\n         LM    R1,R5,4(R2)             9815 2004        *q...*     017C8\n         BR    R1                      07F1             *.1*       017CC\n         DC    X'0A580900'             0A580900         *....*     017CE\n$$$$0266 STM   R0,R5,0(R14)            9005 E000        *..\\.*     017D2\n         LR    R2,R14                  182E             *..*       017D6\n         LR    R3,R15                  183F             *..*       017D8\n         LA    R4,4095(R3)             4143 0FFF        *....*     017DA\n         LA    R5,4095(R4)             4154 0FFF        *....*     017DE\n         L     R6,24(,R2)              5860 2018        *.-..*     017E2\n         ST    R6,56(,R2)              5060 2038        *&-..*     017E6\n         L     R0,512(,R13)            5800 D200        *..K.*     017EA\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     017EE\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     017F2\n         BALR  R1,R15                  051F             *..*       017F6\n         LA    R6,28(R2)               4162 001C        *....*     017F8\n         ST    R6,56(,R2)              5060 2038        *&-..*     017FC\n         L     R0,504(,R13)            5800 D1F8        *..J8*     01800\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     01804\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01808\n         BALR  R1,R15                  051F             *..*       0180C\n         LTR   R0,R6                   1206             *..*       0180E\n         BZ    240(,R3)                4780 30F0        *...0*     01810\n         L     R6,28(,R2)              5860 201C        *.-..*     01814\n         S     R6,24(,R2)              5B60 2018        *$-..*     01818\n         LTR   R0,R6                   1206             *..*       0181C\n         BZ    240(,R3)                4780 30F0        *...0*     0181E\n         L     R6,24(,R2)              5860 2018        *.-..*     01822\n         SH    R6,2660(,R3)            4B60 3A64        *.-..*     01826\n         LTR   R0,R6                   1206             *..*       0182A\n         BNZ   108(,R3)                4770 306C        *...%*     0182C\n         L     R6,28(,R2)              5860 201C        *.-..*     01830\n         SH    R6,2662(,R3)            4B60 3A66        *.-..*     01834\n         LTR   R0,R6                   1206             *..*       01838\n         BZ    134(,R3)                4780 3086        *...f*     0183A\n         L     R6,28(,R2)              5860 201C        *.-..*     0183E\n         ST    R6,56(,R2)              5060 2038        *&-..*     01842\n         L     R0,512(,R13)            5800 D200        *..K.*     01846\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     0184A\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0184E\n         BALR  R1,R15                  051F             *..*       01852\n         B     236(,R3)                47F0 30EC        *.0..*     01854\n         LA    R6,28(R2)               4162 001C        *....*     01858\n         ST    R6,56(,R2)              5060 2038        *&-..*     0185C\n         L     R0,504(,R13)            5800 D1F8        *..J8*     01860\n         L     R15,500(,R13)           58F0 D1F4        *.0J4*     01864\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01868\n         BALR  R1,R15                  051F             *..*       0186C\n         LTR   R0,R6                   1206             *..*       0186E\n         BZ    210(,R3)                4780 30D2        *...K*     01870\n         LA    R6,92                   4160 005C        *.-.**     01874\n         ST    R6,64(,R2)              5060 2040        *&-. *     01878\n         L     R0,512(,R13)            5800 D200        *..K.*     0187C\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01880\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01884\n         BALR  R1,R15                  051F             *..*       01888\n         L     R6,28(,R2)              5860 201C        *.-..*     0188A\n         ST    R6,64(,R2)              5060 2040        *&-. *     0188E\n         L     R0,512(,R13)            5800 D200        *..K.*     01892\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     01896\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     0189A\n         BALR  R1,R15                  051F             *..*       0189E\n         B     236(,R3)                47F0 30EC        *.0..*     018A0\n         LA    R6,157(,R4)             4160 409D        *.- .*     018A4\n         ST    R6,64(,R2)              5060 2040        *&-. *     018A8\n         LA    R6,155(,R4)             4160 409B        *.- .*     018AC\n         ST    R6,68(,R2)              5060 2044        *&-..*     018B0\n         LA    R15,704(,R3)            41F0 32C0        *.0.{*     018B4\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     018B8\n         BALR  R1,R15                  051F             *..*       018BC\n         B     38(,R3)                 47F0 3026        *.0..*     018BE\n         L     R6,28(,R2)              5860 201C        *.-..*     018C2\n         S     R6,24(,R2)              5B60 2018        *$-..*     018C6\n         LTR   R0,R6                   1206             *..*       018CA\n         BNZ   284(,R3)                4770 311C        *....*     018CC\n         L     R6,28(,R2)              5860 201C        *.-..*     018D0\n         ST    R6,64(,R2)              5060 2040        *&-. *     018D4\n         L     R0,512(,R13)            5800 D200        *..K.*     018D8\n         L     R15,508(,R13)           58F0 D1FC        *.0J.*     018DC\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     018E0\n         BALR  R1,R15                  051F             *..*       018E4\n         LA    R6,1                    4160 0001        *.-..*     018E6\n         B     312(,R3)                47F0 3138        *.0..*     018EA\n         LA    R6,109(,R4)             4160 406D        *.- _*     018EE\n         ST    R6,64(,R2)              5060 2040        *&-. *     018F2\n         LA    R6,107(,R4)             4160 406B        *.- ,*     018F6\n         ST    R6,68(,R2)              5060 2044        *&-..*     018FA\n         LA    R15,704(,R3)            41F0 32C0        *.0.{*     018FE\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01902\n         BALR  R1,R15                  051F             *..*       01906\n         XR    R6,R6                   1766             *..*       01908\n         LM    R1,R5,4(R2)             9815 2004        *q...*     0190A\n         BR    R1                      07F1             *.1*       0190E\n         DC    X'092A'                 092A             *..*       01910\n         BNMR  R14                     07BE             *..*       01912\n$$$$0265 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01914\n         LR    R2,R14                  182E             *..*       01918\n         LR    R3,R15                  183F             *..*       0191A\n         LA    R4,4095(R3)             4143 0FFF        *....*     0191C\n         LA    R5,4095(R4)             4154 0FFF        *....*     01920\n         LA    R6,3988(,R3)            4160 3F94        *.-.m*     01924\n         ST    R6,60(,R2)              5060 203C        *&-..*     01928\n         L     R6,544(,R13)            5860 D220        *.-K.*     0192C\n         ST    R6,56(,R2)              5060 2038        *&-..*     01930\n         L     R15,2360(,R3)           58F0 3938        *.0..*     01934\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01938\n         BALR  R1,R15                  051F             *..*       0193C\n         LM    R1,R5,4(R2)             9815 2004        *q...*     0193E\n         BR    R1                      07F1             *.1*       01942\n         DC    X'090C'                 090C             *..*       01944\n         BZR   R10                     078A             *..*       01946\n$$$$0264 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01948\n         LR    R2,R14                  182E             *..*       0194C\n         LR    R3,R15                  183F             *..*       0194E\n         LA    R4,4095(R3)             4143 0FFF        *....*     01950\n         LA    R5,4095(R4)             4154 0FFF        *....*     01954\n         LA    R6,3964(,R3)            4160 3F7C        *.-.@*     01958\n         ST    R6,60(,R2)              5060 203C        *&-..*     0195C\n         L     R6,544(,R13)            5860 D220        *.-K.*     01960\n         ST    R6,56(,R2)              5060 2038        *&-..*     01964\n         L     R15,2308(,R3)           58F0 3904        *.0..*     01968\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     0196C\n         BALR  R1,R15                  051F             *..*       01970\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01972\n         BR    R1                      07F1             *.1*       01976\n         DC    X'08E8'                 08E8             *.Y*       01978\n         BCR   5,R6                    0756             *..*       0197A\n$$$$0263 STM   R0,R5,0(R14)            9005 E000        *..\\.*     0197C\n         LR    R2,R14                  182E             *..*       01980\n         LR    R3,R15                  183F             *..*       01982\n         LA    R4,4095(R3)             4143 0FFF        *....*     01984\n         LA    R5,4095(R4)             4154 0FFF        *....*     01988\n         L     R6,24(,R2)              5860 2018        *.-..*     0198C\n         ST    R6,56(,R2)              5060 2038        *&-..*     01990\n         LA    R6,544(R13)             416D 0220        *._..*     01994\n         ST    R6,60(,R2)              5060 203C        *&-..*     01998\n         LA    R6,3884(,R3)            4160 3F2C        *.-..*     0199C\n         ST    R6,64(,R2)              5060 2040        *&-. *     019A0\n         LA    R15,120(,R3)            41F0 3078        *.0..*     019A4\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     019A8\n         BALR  R1,R15                  051F             *..*       019AC\n         LM    R1,R5,4(R2)             9815 2004        *q...*     019AE\n         BR    R1                      07F1             *.1*       019B2\n         DC    X'08B8'                 08B8             *..*       019B4\n         BOR   R10                     071A             *..*       019B6\n$$$$0262 STM   R0,R5,0(R14)            9005 E000        *..\\.*     019B8\n         LR    R2,R14                  182E             *..*       019BC\n         LR    R3,R15                  183F             *..*       019BE\n         LA    R4,4095(R3)             4143 0FFF        *....*     019C0\n         LA    R5,4095(R4)             4154 0FFF        *....*     019C4\n         L     R6,24(,R2)              5860 2018        *.-..*     019C8\n         ST    R6,56(,R2)              5060 2038        *&-..*     019CC\n         LA    R6,544(R13)             416D 0220        *._..*     019D0\n         ST    R6,60(,R2)              5060 203C        *&-..*     019D4\n         LA    R6,3852(,R3)            4160 3F0C        *.-..*     019D8\n         ST    R6,64(,R2)              5060 2040        *&-. *     019DC\n         LA    R15,60(,R3)             41F0 303C        *.0..*     019E0\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     019E4\n         BALR  R1,R15                  051F             *..*       019E8\n         LM    R1,R5,4(R2)             9815 2004        *q...*     019EA\n         BR    R1                      07F1             *.1*       019EE\n         DC    X'0888'                 0888             *.h*       019F0\n         BCTR  R13,R14                 06DE             *..*       019F2\n$$$$0261 STM   R0,R5,0(R14)            9005 E000        *..\\.*     019F4\n         LR    R2,R14                  182E             *..*       019F8\n         LR    R3,R15                  183F             *..*       019FA\n         LA    R4,4095(R3)             4143 0FFF        *....*     019FC\n         LA    R5,4095(R4)             4154 0FFF        *....*     01A00\n         XC    36(4,R2),36(R2)         D703 2024 2024   *P.....*   01A04\n         MVC   40(4,R2),2196(R3)       D203 2028 3894   *K....m*   01A0A\n         L     R6,32(,R2)              5860 2020        *.-..*     01A10\n         ST    R6,72(,R2)              5060 2048        *&-..*     01A14\n         L     R15,2200(,R3)           58F0 3898        *.0.q*     01A18\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     01A1C\n         BALR  R1,R15                  051F             *..*       01A20\n         ST    R6,44(,R2)              5060 202C        *&-..*     01A22\n         B     130(,R3)                47F0 3082        *.0.b*     01A26\n         L     R6,36(,R2)              5860 2024        *.-..*     01A2A\n         LTR   R0,R6                   1206             *..*       01A2E\n         BNZ   144(,R3)                4770 3090        *....*     01A30\n         L     R6,32(,R2)              5860 2020        *.-..*     01A34\n         ST    R6,84(,R2)              5060 2054        *&-..*     01A38\n         L     R6,40(,R2)              5860 2028        *.-..*     01A3C\n         ST    R6,80(,R2)              5060 2050        *&-.&*     01A40\n         L     R15,2136(,R3)           58F0 3858        *.0..*     01A44\n         LA    R14,56(,R2)             41E0 2038        *.\\..*     01A48\n         BALR  R1,R15                  051F             *..*       01A4C\n         S     R6,24(,R2)              5B60 2018        *$-..*     01A4E\n         LTR   R0,R6                   1206             *..*       01A52\n         BNZ   118(,R3)                4770 3076        *....*     01A54\n         L     R6,28(,R2)              5860 201C        *.-..*     01A58\n         L     R7,40(,R2)              5870 2028        *....*     01A5C\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01A60\n         MVC   36(4,R2),2204(R3)       D203 2024 389C   *K.....*   01A64\n         LA    R0,1                    4100 0001        *....*     01A6A\n         A     R0,40(,R2)              5A00 2028        *!...*     01A6E\n         ST    R0,40(,R2)              5000 2028        *&...*     01A72\n         L     R6,44(,R2)              5860 202C        *.-..*     01A76\n         S     R6,40(,R2)              5B60 2028        *$-..*     01A7A\n         LTR   R0,R6                   1206             *..*       01A7E\n         BNM   54(,R3)                 47B0 3036        *....*     01A80\n         L     R6,36(,R2)              5860 2024        *.-..*     01A84\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01A88\n         BR    R1                      07F1             *.1*       01A8C\n         DC    X'0806'                 0806             *..*       01A8E\n         BCTR  R4,R0                   0640             *. *       01A90\n$$$$0250 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01A92\n         LR    R2,R14                  182E             *..*       01A96\n         LR    R3,R15                  183F             *..*       01A98\n         LA    R4,4095(R3)             4143 0FFF        *....*     01A9A\n         LA    R5,4095(R4)             4154 0FFF        *....*     01A9E\n         MVC   32(24,R2),240(R13)      D217 2020 D0F0   *K...}0*   01AA2\n         MVC   240(24,R13),392(R13)    D217 D0F0 D188   *K.}0Jh*   01AA8\n         LA    R6,1                    4160 0001        *.-..*     01AAE\n         L     R0,476(,R13)            5800 D1DC        *..J.*     01AB2\n         AR    R0,R6                   1A06             *..*       01AB6\n         ST    R0,476(,R13)            5000 D1DC        *&.J.*     01AB8\n         LA    R6,240(R13)             416D 00F0        *._.0*     01ABC\n         ST    R6,88(,R2)              5060 2058        *&-..*     01AC0\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01AC4\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01AC8\n         BALR  R1,R15                  051F             *..*       01ACC\n         LA    R6,240(R13)             416D 00F0        *._.0*     01ACE\n         ST    R6,88(,R2)              5060 2058        *&-..*     01AD2\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01AD6\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01ADA\n         BALR  R1,R15                  051F             *..*       01ADE\n         LA    R6,240(R13)             416D 00F0        *._.0*     01AE0\n         ST    R6,88(,R2)              5060 2058        *&-..*     01AE4\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01AE8\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01AEC\n         BALR  R1,R15                  051F             *..*       01AF0\n         LA    R6,3770(,R3)            4160 3EBA        *.-..*     01AF2\n         ST    R6,88(,R2)              5060 2058        *&-..*     01AF6\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01AFA\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01AFE\n         BALR  R1,R15                  051F             *..*       01B02\n         L     R6,476(,R13)            5860 D1DC        *.-J.*     01B04\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B08\n         L     R15,1686(,R3)           58F0 3696        *.0.o*     01B0C\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B10\n         BALR  R1,R15                  051F             *..*       01B14\n         LA    R6,3740(,R3)            4160 3E9C        *.-..*     01B16\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B1A\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01B1E\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B22\n         BALR  R1,R15                  051F             *..*       01B26\n         LA    R6,240(R13)             416D 00F0        *._.0*     01B28\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B2C\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01B30\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B34\n         BALR  R1,R15                  051F             *..*       01B38\n         LA    R6,3732(,R3)            4160 3E94        *.-.m*     01B3A\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B3E\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01B42\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B46\n         BALR  R1,R15                  051F             *..*       01B4A\n         L     R6,24(,R2)              5860 2018        *.-..*     01B4C\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B50\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01B54\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B58\n         BALR  R1,R15                  051F             *..*       01B5C\n         L     R6,28(,R2)              5860 201C        *.-..*     01B5E\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B62\n         L     R15,2042(,R3)           58F0 37FA        *.0..*     01B66\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B6A\n         BALR  R1,R15                  051F             *..*       01B6E\n         LTR   R0,R6                   1206             *..*       01B70\n         BNP   264(,R3)                47D0 3108        *.}..*     01B72\n         LA    R6,3726(,R3)            4160 3E8E        *.-..*     01B76\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B7A\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01B7E\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B82\n         BALR  R1,R15                  051F             *..*       01B86\n         L     R6,28(,R2)              5860 201C        *.-..*     01B88\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B8C\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01B90\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01B94\n         BALR  R1,R15                  051F             *..*       01B98\n         LA    R6,240(R13)             416D 00F0        *._.0*     01B9A\n         ST    R6,88(,R2)              5060 2058        *&-..*     01B9E\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01BA2\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01BA6\n         BALR  R1,R15                  051F             *..*       01BAA\n         L     R6,540(,R13)            5860 D21C        *.-K.*     01BAC\n         LTR   R0,R6                   1206             *..*       01BB0\n         BZ    364(,R3)                4780 316C        *...%*     01BB2\n         LA    R6,3702(,R3)            4160 3E76        *.-..*     01BB6\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01BBA\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01BBE\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01BC2\n         BALR  R1,R15                  051F             *..*       01BC6\n         L     R6,488(,R13)            5860 D1E8        *.-JY*     01BC8\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01BCC\n         L     R15,1686(,R3)           58F0 3696        *.0.o*     01BD0\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01BD4\n         BALR  R1,R15                  051F             *..*       01BD8\n         LA    R6,3690(,R3)            4160 3E6A        *.-.\u00a6*     01BDA\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01BDE\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01BE2\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01BE6\n         BALR  R1,R15                  051F             *..*       01BEA\n         L     R6,416(,R13)            5860 D1A0        *.-J.*     01BEC\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01BF0\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01BF4\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01BF8\n         BALR  R1,R15                  051F             *..*       01BFC\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01BFE\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C02\n         L     R15,2058(,R3)           58F0 380A        *.0..*     01C06\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C0A\n         BALR  R1,R15                  051F             *..*       01C0E\n         LTR   R0,R6                   1206             *..*       01C10\n         BZ    528(,R3)                4780 3210        *....*     01C12\n         LA    R6,240(R13)             416D 00F0        *._.0*     01C16\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C1A\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01C1E\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C22\n         BALR  R1,R15                  051F             *..*       01C26\n         LA    R6,3662(,R3)            4160 3E4E        *.-.+*     01C28\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C2C\n         L     R15,1646(,R3)           58F0 366E        *.0.>*     01C30\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C34\n         BALR  R1,R15                  051F             *..*       01C38\n         LA    R6,240(R13)             416D 00F0        *._.0*     01C3A\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C3E\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01C42\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C46\n         BALR  R1,R15                  051F             *..*       01C4A\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01C4C\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C50\n         LA    R6,240(R13)             416D 00F0        *._.0*     01C54\n         ST    R6,100(,R2)             5060 2064        *&-..*     01C58\n         L     R15,2062(,R3)           58F0 380E        *.0..*     01C5C\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C60\n         BALR  R1,R15                  051F             *..*       01C64\n         LA    R6,240(R13)             416D 00F0        *._.0*     01C66\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C6A\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01C6E\n         ST    R6,128(,R2)             5060 2080        *&-..*     01C72\n         L     R15,2066(,R3)           58F0 3812        *.0..*     01C76\n         LA    R14,104(,R2)            41E0 2068        *.\\..*     01C7A\n         BALR  R1,R15                  051F             *..*       01C7E\n         BCTR  R6,R0                   0660             *.-*       01C80\n         ST    R6,100(,R2)             5060 2064        *&-..*     01C82\n         L     R15,2070(,R3)           58F0 3816        *.0..*     01C86\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C8A\n         BALR  R1,R15                  051F             *..*       01C8E\n         LA    R6,101                  4160 0065        *.-..*     01C90\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01C94\n         L     R15,1682(,R3)           58F0 3692        *.0.k*     01C98\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01C9C\n         BALR  R1,R15                  051F             *..*       01CA0\n         LA    R6,240(R13)             416D 00F0        *._.0*     01CA2\n         ST    R6,96(,R2)              5060 2060        *&-.-*     01CA6\n         L     R15,1642(,R3)           58F0 366A        *.0.\u00a6*     01CAA\n         LA    R14,72(,R2)             41E0 2048        *.\\..*     01CAE\n         BALR  R1,R15                  051F             *..*       01CB2\n         MVC   240(24,R13),32(R2)      D217 D0F0 2020   *K.}0..*   01CB4\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01CBA\n         BR    R1                      07F1             *.1*       01CBE\n         BALR  R14,R12                 05EC             *..*       01CC0\n         DC    X'040E'                 040E             *..*       01CC2\n$$$$0249 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01CC4\n         LR    R2,R14                  182E             *..*       01CC8\n         LR    R3,R15                  183F             *..*       01CCA\n         LA    R4,4095(R3)             4143 0FFF        *....*     01CCC\n         LA    R5,4095(R4)             4154 0FFF        *....*     01CD0\n         ST    R12,28(,R2)             50C0 201C        *&{..*     01CD4\n         MVC   32(4,R2),0(R12)         D203 2020 C000   *K...{.*   01CD8\n         LA    R12,32(R2)              41C2 0020        *.B..*     01CDE\n         LA    R0,8                    4100 0008        *....*     01CE2\n         L     R15,1068(,R3)           58F0 342C        *.0..*     01CE6\n         LA    R14,56(,R2)             41E0 2038        *.\\..*     01CEA\n         BALR  R1,R15                  051F             *..*       01CEE\n         ST    R6,36(,R2)              5060 2024        *&-..*     01CF0\n         L     R6,36(,R2)              5860 2024        *.-..*     01CF4\n         MVC   0(4,R6),1520(R3)        D203 6000 35F0   *K.-..0*   01CF8\n         L     R6,24(,R2)              5860 2018        *.-..*     01CFE\n         L     R7,36(,R2)              5870 2024        *....*     01D02\n         ST    R6,4(,R7)               5060 7004        *&-..*     01D06\n         MVC   88(16,R2),36(R2)        D20F 2058 2024   *K.....*   01D0A\n         L     R15,1304(,R3)           58F0 3518        *.0..*     01D10\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01D14\n         BALR  R1,R15                  051F             *..*       01D18\n         MVC   88(16,R2),36(R2)        D20F 2058 2024   *K.....*   01D1A\n         L     R15,1308(,R3)           58F0 351C        *.0..*     01D20\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01D24\n         BALR  R1,R15                  051F             *..*       01D28\n         L     R12,28(,R2)             58C0 201C        *.{..*     01D2A\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01D2E\n         BR    R1                      07F1             *.1*       01D32\n         BALR  R8,R4                   0584             *.d*       01D34\n         DC    X'039A'                 039A             *..*       01D36\n$$$$0246 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01D38\n         LR    R2,R14                  182E             *..*       01D3C\n         LR    R3,R15                  183F             *..*       01D3E\n         LA    R4,4095(R3)             4143 0FFF        *....*     01D40\n         LA    R5,4095(R4)             4154 0FFF        *....*     01D44\n         L     R6,24(,R2)              5860 2018        *.-..*     01D48\n         L     R6,0(,R6)               5860 6000        *.--.*     01D4C\n         ST    R6,28(,R2)              5060 201C        *&-..*     01D50\n         L     R6,28(,R2)              5860 201C        *.-..*     01D54\n         LTR   R0,R6                   1206             *..*       01D58\n         BM    52(,R3)                 4740 3034        *. ..*     01D5A\n         L     R6,28(,R2)              5860 201C        *.-..*     01D5E\n         AH    R6,1416(,R3)            4A60 3588        *\u00a2-.h*     01D62\n         LTR   R0,R6                   1206             *..*       01D66\n         BNP   116(,R3)                47D0 3074        *.}..*     01D68\n         LA    R6,3152(,R3)            4160 3C50        *.-.&*     01D6C\n         ST    R6,56(,R2)              5060 2038        *&-..*     01D70\n         L     R6,24(,R2)              5860 2018        *.-..*     01D74\n         L     R6,0(,R6)               5860 6000        *.--.*     01D78\n         ST    R6,88(,R2)              5060 2058        *&-..*     01D7C\n         L     R15,1420(,R3)           58F0 358C        *.0..*     01D80\n         LA    R14,64(,R2)             41E0 2040        *.\\. *     01D84\n         BALR  R1,R15                  051F             *..*       01D88\n         ST    R6,60(,R2)              5060 203C        *&-..*     01D8A\n         L     R15,1424(,R3)           58F0 3590        *.0..*     01D8E\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01D92\n         BALR  R1,R15                  051F             *..*       01D96\n         L     R6,24(,R2)              5860 2018        *.-..*     01D98\n         LA    R7,111                  4170 006F        *...?*     01D9C\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01DA0\n         LA    R6,1                    4160 0001        *.-..*     01DA4\n         B     336(,R3)                47F0 3150        *.0.&*     01DA8\n         L     R6,28(,R2)              5860 201C        *.-..*     01DAC\n         SLA   R6,2                    8B60 0002        *.-..*     01DB0\n         A     R6,524(,R13)            5A60 D20C        *!-K.*     01DB4\n         L     R6,0(,R6)               5860 6000        *.--.*     01DB8\n         ST    R6,32(,R2)              5060 2020        *&-..*     01DBC\n         L     R6,32(,R2)              5860 2020        *.-..*     01DC0\n         SH    R6,1428(,R3)            4B60 3594        *.-.m*     01DC4\n         LTR   R0,R6                   1206             *..*       01DC8\n         BZ    170(,R3)                4780 30AA        *....*     01DCA\n         L     R6,24(,R2)              5860 2018        *.-..*     01DCE\n         L     R7,32(,R2)              5870 2020        *....*     01DD2\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01DD6\n         LA    R6,1                    4160 0001        *.-..*     01DDA\n         B     336(,R3)                47F0 3150        *.0.&*     01DDE\n         L     R6,24(,R2)              5860 2018        *.-..*     01DE2\n         L     R6,0(,R6)               5860 6000        *.--.*     01DE6\n         SH    R6,1430(,R3)            4B60 3596        *.-.o*     01DEA\n         LTR   R0,R6                   1206             *..*       01DEE\n         BNZ   196(,R3)                4770 30C4        *...D*     01DF0\n         LA    R6,1                    4160 0001        *.-..*     01DF4\n         B     336(,R3)                47F0 3150        *.0.&*     01DF8\n         L     R6,24(,R2)              5860 2018        *.-..*     01DFC\n         L     R6,0(,R6)               5860 6000        *.--.*     01E00\n         S     R6,444(,R13)            5B60 D1BC        *$-J.*     01E04\n         LTR   R0,R6                   1206             *..*       01E08\n         BZ    268(,R3)                4780 310C        *....*     01E0A\n         L     R6,24(,R2)              5860 2018        *.-..*     01E0E\n         L     R6,0(,R6)               5860 6000        *.--.*     01E12\n         S     R6,448(,R13)            5B60 D1C0        *$-J{*     01E16\n         LTR   R0,R6                   1206             *..*       01E1A\n         BZ    268(,R3)                4780 310C        *....*     01E1C\n         L     R6,24(,R2)              5860 2018        *.-..*     01E20\n         L     R6,0(,R6)               5860 6000        *.--.*     01E24\n         S     R6,452(,R13)            5B60 D1C4        *$-JD*     01E28\n         LTR   R0,R6                   1206             *..*       01E2C\n         BZ    268(,R3)                4780 310C        *....*     01E2E\n         L     R6,24(,R2)              5860 2018        *.-..*     01E32\n         L     R6,0(,R6)               5860 6000        *.--.*     01E36\n         S     R6,456(,R13)            5B60 D1C8        *$-JH*     01E3A\n         LTR   R0,R6                   1206             *..*       01E3E\n         BNZ   276(,R3)                4770 3114        *....*     01E40\n         LA    R6,1                    4160 0001        *.-..*     01E44\n         B     336(,R3)                47F0 3150        *.0.&*     01E48\n         LA    R6,3106(,R3)            4160 3C22        *.-..*     01E4C\n         ST    R6,72(,R2)              5060 2048        *&-..*     01E50\n         L     R6,24(,R2)              5860 2018        *.-..*     01E54\n         L     R6,0(,R6)               5860 6000        *.--.*     01E58\n         ST    R6,104(,R2)             5060 2068        *&-..*     01E5C\n         L     R15,1420(,R3)           58F0 358C        *.0..*     01E60\n         LA    R14,80(,R2)             41E0 2050        *.\\.&*     01E64\n         BALR  R1,R15                  051F             *..*       01E68\n         ST    R6,76(,R2)              5060 204C        *&-.<*     01E6A\n         L     R15,1424(,R3)           58F0 3590        *.0..*     01E6E\n         LA    R14,48(,R2)             41E0 2030        *.\\..*     01E72\n         BALR  R1,R15                  051F             *..*       01E76\n         L     R6,24(,R2)              5860 2018        *.-..*     01E78\n         LA    R7,111                  4170 006F        *...?*     01E7C\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01E80\n         LA    R6,1                    4160 0001        *.-..*     01E84\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01E88\n         BR    R1                      07F1             *.1*       01E8C\n         DC    X'044202',C' '          04420240         *... *     01E8E\n$$$$0245 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01E92\n         LR    R2,R14                  182E             *..*       01E96\n         LR    R3,R15                  183F             *..*       01E98\n         LA    R4,4095(R3)             4143 0FFF        *....*     01E9A\n         LA    R5,4095(R4)             4154 0FFF        *....*     01E9E\n         XR    R6,R6                   1766             *..*       01EA2\n         LR    R0,R6                   1806             *..*       01EA4\n         L     R6,492(,R13)            5860 D1EC        *.-J.*     01EA6\n         ST    R0,492(,R13)            5000 D1EC        *&.J.*     01EAA\n         LTR   R0,R6                   1206             *..*       01EAE\n         BZ    54(,R3)                 4780 3036        *....*     01EB0\n         L     R6,24(,R2)              5860 2018        *.-..*     01EB4\n         L     R7,496(,R13)            5870 D1F0        *..J0*     01EB8\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01EBC\n         LA    R6,1                    4160 0001        *.-..*     01EC0\n         B     212(,R3)                47F0 30D4        *.0.M*     01EC4\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01EC8\n         ST    R6,56(,R2)              5060 2038        *&-..*     01ECC\n         L     R15,1094(,R3)           58F0 3446        *.0..*     01ED0\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01ED4\n         BALR  R1,R15                  051F             *..*       01ED8\n         LTR   R0,R6                   1206             *..*       01EDA\n         BZ    106(,R3)                4780 306A        *...\u00a6*     01EDC\n         L     R6,216(,R13)            5860 D0D8        *.-}Q*     01EE0\n         ST    R6,64(,R2)              5060 2040        *&-. *     01EE4\n         L     R15,738(,R3)            58F0 32E2        *.0.S*     01EE8\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01EEC\n         BALR  R1,R15                  051F             *..*       01EF0\n         LTR   R0,R6                   1206             *..*       01EF2\n         BZ    106(,R3)                4780 306A        *...\u00a6*     01EF4\n         B     54(,R3)                 47F0 3036        *.0..*     01EF8\n         L     R6,216(,R13)            5860 D0D8        *.-}Q*     01EFC\n         ST    R6,56(,R2)              5060 2038        *&-..*     01F00\n         L     R6,24(,R2)              5860 2018        *.-..*     01F04\n         ST    R6,60(,R2)              5060 203C        *&-..*     01F08\n         L     R15,734(,R3)            58F0 32DE        *.0..*     01F0C\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01F10\n         BALR  R1,R15                  051F             *..*       01F14\n         LTR   R0,R6                   1206             *..*       01F16\n         BZ    212(,R3)                4780 30D4        *...M*     01F18\n         LA    R6,1                    4160 0001        *.-..*     01F1C\n         L     R0,480(,R13)            5800 D1E0        *..J\\*     01F20\n         AR    R0,R6                   1A06             *..*       01F24\n         ST    R0,480(,R13)            5000 D1E0        *&.J\\*     01F26\n         L     R6,24(,R2)              5860 2018        *.-..*     01F2A\n         L     R6,0(,R6)               5860 6000        *.--.*     01F2E\n         S     R6,452(,R13)            5B60 D1C4        *$-JD*     01F32\n         LTR   R0,R6                   1206             *..*       01F36\n         BNZ   176(,R3)                4770 30B0        *....*     01F38\n         XR    R6,R6                   1766             *..*       01F3C\n         B     212(,R3)                47F0 30D4        *.0.M*     01F3E\n         L     R6,24(,R2)              5860 2018        *.-..*     01F42\n         L     R6,0(,R6)               5860 6000        *.--.*     01F46\n         S     R6,456(,R13)            5B60 D1C8        *$-JH*     01F4A\n         LTR   R0,R6                   1206             *..*       01F4E\n         BNZ   208(,R3)                4770 30D0        *...}*     01F50\n         LA    R6,1                    4160 0001        *.-..*     01F54\n         L     R0,488(,R13)            5800 D1E8        *..JY*     01F58\n         AR    R0,R6                   1A06             *..*       01F5C\n         ST    R0,488(,R13)            5000 D1E8        *&.JY*     01F5E\n         LA    R6,1                    4160 0001        *.-..*     01F62\n         LM    R1,R5,4(R2)             9815 2004        *q...*     01F66\n         BR    R1                      07F1             *.1*       01F6A\n         DC    X'03700162'             03700162         *....*     01F6C\n$$$$0242 STM   R0,R5,0(R14)            9005 E000        *..\\.*     01F70\n         LR    R2,R14                  182E             *..*       01F74\n         LR    R3,R15                  183F             *..*       01F76\n         LA    R4,4095(R3)             4143 0FFF        *....*     01F78\n         LA    R5,4095(R4)             4154 0FFF        *....*     01F7C\n         XR    R6,R6                   1766             *..*       01F80\n         LR    R0,R6                   1806             *..*       01F82\n         L     R6,492(,R13)            5860 D1EC        *.-J.*     01F84\n         ST    R0,492(,R13)            5000 D1EC        *&.J.*     01F88\n         LTR   R0,R6                   1206             *..*       01F8C\n         BZ    54(,R3)                 4780 3036        *....*     01F8E\n         L     R6,24(,R2)              5860 2018        *.-..*     01F92\n         L     R7,496(,R13)            5870 D1F0        *..J0*     01F96\n         ST    R7,0(,R6)               5070 6000        *&.-.*     01F9A\n         LA    R6,1                    4160 0001        *.-..*     01F9E\n         B     340(,R3)                47F0 3154        *.0..*     01FA2\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01FA6\n         ST    R6,56(,R2)              5060 2038        *&-..*     01FAA\n         L     R15,508(,R3)            58F0 31FC        *.0..*     01FAE\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01FB2\n         BALR  R1,R15                  051F             *..*       01FB6\n         LTR   R6,R6                   1266             *..*       01FB8\n         LA    R6,1                    4160 0001        *.-..*     01FBA\n         BZ    84(,R3)                 4780 3054        *....*     01FBE\n         XR    R6,R6                   1766             *..*       01FC2\n         LTR   R0,R6                   1206             *..*       01FC4\n         BZ    340(,R3)                4780 3154        *....*     01FC6\n         LA    R6,216(R13)             416D 00D8        *._.Q*     01FCA\n         ST    R6,56(,R2)              5060 2038        *&-..*     01FCE\n         L     R15,872(,R3)            58F0 3368        *.0..*     01FD2\n         LA    R14,32(,R2)             41E0 2020        *.\\..*     01FD6\n         BALR  R1,R15                  051F             *..*       01FDA\n         LTR   R0,R6                   1206             *..*       01FDC\n         BZ    172(,R3)                4780 30AC        *....*     01FDE\n         L     R6,216(,R13)            5860 D0D8        *.-}Q*     01FE2\n         ST    R6,64(,R2)              5060 2040        *&-. *     01FE6\n         L     R15,516(,R3)            58F0 3204        *.0..*     01FEA\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     01FEE\n         BALR  R1,R15                  051F             *..*       01FF2\n         LTR   R0,R6                   1206             *..*       01FF4\n         BZ    168(,R3)                4780 30A8        *...y*     01FF6\n         LA    R6,1                    4160 0001        *.-..*     01FFA\n         L     R0,488(,R13)            5800 D1E8        *..JY*     01FFE\n         AR    R0,R6                   1A06             *..*       02002\n         ST    R0,488(,R13)            5000 D1E8        *&.JY*     02004\n         L     R6,24(,R2)              5860 2018        *.-..*     02008\nA00200C  L     R7,456(,R13)            5870 D1C8        *..JH*     0200C\n         ST    R7,0(,R6)               5070 6000        *&.-.*     02010\n         LA    R6,1                    4160 0001        *.-..*     02014\n         B     340(,R3)                47F0 3154        *.0..*     02018\n         L     R6,216(,R13)            5860 D0D8        *.-}Q*     0201C\n         ST    R6,64(,R2)              5060 2040        *&-. *     02020\n         L     R6,24(,R2)              5860 2018        *.-..*     02024\n         ST    R6,68(,R2)              5060 2044        *&-..*     02028\n         L     R15,512(,R3)            58F0 3200        *.0..*     0202C\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     02030\n         BALR  R1,R15                  051F             *..*       02034\n         LTR   R0,R6                   1206             *..*       02036\n         BZ    340(,R3)                4780 3154        *....*     02038\n         LA    R6,1                    4160 0001        *.-..*     0203C\n         L     R0,480(,R13)            5800 D1E0        *..J\\*     02040\n         AR    R0,R6                   1A06             *..*       02044\n         ST    R0,480(,R13)            5000 D1E0        *&.J\\*     02046\n         L     R6,24(,R2)              5860 2018        *.-..*     0204A\n         L     R6,0(,R6)               5860 6000        *.--.*     0204E\n         S     R6,444(,R13)            5B60 D1BC        *$-J.*     02052\n         LTR   R0,R6                   1206             *..*       02056\n         BZ    290(,R3)                4780 3122        *....*     02058\n         L     R6,24(,R2)              5860 2018        *.-..*     0205C\n         L     R6,0(,R6)               5860 6000        *.--.*     02060\n         S     R6,448(,R13)            5B60 D1C0        *$-J{*     02064\n         LTR   R0,R6                   1206             *..*       02068\n         BZ    290(,R3)                4780 3122        *....*     0206A\n         L     R6,24(,R2)              5860 2018        *.-..*     0206E\n         L     R6,0(,R6)               5860 6000        *.--.*     02072\n         S     R6,452(,R13)            5B60 D1C4        *$-JD*     02076\n         LTR   R0,R6                   1206             *..*       0207A\n         BZ    290(,R3)                4780 3122        *....*     0207C\n         L     R6,24(,R2)              5860 2018        *.-..*     02080\n         L     R6,0(,R6)               5860 6000        *.--.*     02084\n         S     R6,456(,R13)            5B60 D1C8        *$-JH*     02088\n         LTR   R0,R6                   1206             *..*       0208C\n         BNZ   336(,R3)                4770 3150        *...&*     0208E\n         LA    R6,2648(,R3)            4160 3A58        *.-..*     02092\n         ST    R6,64(,R2)              5060 2040        *&-. *     02096\n         LA    R6,2626(,R3)            4160 3A42        *.-..*     0209A\n         ST    R6,68(,R2)              5060 2044        *&-..*     0209E\n         L     R15,856(,R3)            58F0 3358        *.0..*     020A2\n         LA    R14,40(,R2)             41E0 2028        *.\\..*     020A6\n         BALR  R1,R15                  051F             *..*       020AA\n         L     R6,24(,R2)              5860 2018        *.-..*     020AC\n         LA    R7,111                  4170 006F        *...?*     020B0\n         ST    R7,0(,R6)               5070 6000        *&.-.*     020B4\n         LA    R6,1                    4160 0001        *.-..*     020B8\n         B     340(,R3)                47F0 3154        *.0..*     020BC\n         LA    R6,1                    4160 0001        *.-..*     020C0\n         LM    R1,R5,4(R2)             9815 2004        *q...*     020C4\n         BR    R1                      07F1             *.1*       020C8\n         DC    X'0000000000000008'     0000000000000008 *........* 020CA\n         DC    C'PACK    '             D7C1C3D240404040 *PACK    * 020D2\n         DC    X'0000'                 0000             *..*       020DA\n         DC    VL4($$$$0231)           00000000         *....*     020DC\n$$$$0232 DC    AL4(A00000E)            0000000E         *....*     020E0\n         DC    AL4(A00100D)            0000100D         *....*     020E4\n         DC    AL4(A00200C)            0000200C         *....*     020E8\n         DC    AL4(A000088)            00000088         *...h*     020EC\n         DC    VL4($$$$0001)           00000000         *....*     020F0\n         DC    VL4($$$$0159)           00000000         *....*     020F4\n         DC    VL4($$$$0020)           00000000         *....*     020F8\n         DC    VL4($$$$0169)           00000000         *....*     020FC\n         DC    VL4($$$$0208)           00000000         *....*     02100\n         DC    X'0000000100000001'     0000000100000001 *........* 02104\n         DC    X'0000000100000001'     0000000100000001 *........* 0210C\n         DC    X'0001000500000001'     0001000500000001 *........* 02114\n         DC    X'00000001'             00000001         *....*     0211C\n         DC    VL4($$$$0163)           00000000         *....*     02120\n         DC    VL4($$$$0204)           00000000         *....*     02124\n         DC    VL4($$$$0205)           00000000         *....*     02128\n         DC    VL4($$$$0118)           00000000         *....*     0212C\n         DC    X'000699A3'             000699A3         *..rt*     02130\n         DC    X'95',C'5'              95F5             *n5*       02134\n         DC    C'26'                   F2F6             *26*       02136\n         DC    X'000699A3'             000699A3         *..rt*     02138\n         DC    X'95',C'5'              95F5             *n5*       0213C\n         DC    C'25'                   F2F5             *25*       0213E\n         DC    X'000699A3'             000699A3         *..rt*     02140\n         DC    X'95',C'5'              95F5             *n5*       02144\n         DC    C'24'                   F2F4             *24*       02146\n         DC    X'000699A3'             000699A3         *..rt*     02148\n         DC    X'95',C'5'              95F5             *n5*       0214C\n         DC    C'23'                   F2F3             *23*       0214E\n         DC    X'000699A3'             000699A3         *..rt*     02150\n         DC    X'95',C'5'              95F5             *n5*       02154\n         DC    C'22'                   F2F2             *22*       02156\n         DC    X'000B'                 000B             *..*       02158\n         DC    X'9781999481958193'     9781999481958193 *parmanal* 0215A\n         DC    X'A8A2850000000000'     A8A2850000000000 *yse.....* 02162\n         DC    X'0001'                 0001             *..*       0216A\n         DC    VL4($$$$0154)           00000000         *....*     0216C\n         DC    VL4($$$$0021)           00000000         *....*     02170\n         DC    VL4($$$$0016)           00000000         *....*     02174\n         DC    X'00D7009700000001'     00D7009700000001 *.P.p....* 02178\n         DC    X'00E400A400E300A3'     00E400A400E300A3 *.U.u.T.t* 02180\n         DC    X'0000000100D80098'     0000000100D80098 *.....Q.q* 02188\n         DC    X'0000000100C30083'     0000000100C30083 *.....C.c* 02190\n         DC    X'0040006B00058388'     0040006B00058388 *. .,..ch* 02198\n         DC    X'8583'                 8583             *ec*       021A0\n         DC    X'9200000FA2928997'     9200000FA2928997 *k...skip* 021A2\n         DC    X'A396A285'             A396A285         *tose*     021AA\n         DC    X'97819981A3969900'     97819981A3969900 *parator.* 021AE\n         DC    X'0040006B00068885'     0040006B00068885 *. .,..he* 021B6\n         DC    X'81848599004000',C' '  8184859900400040 *ader. . * 021BE\n         DC    X'0007998581848984'     0007998581848984 *..readid* 021C6\n         DC    X'8600007F007FFFEE'     8600007F007FFFEE *f..\".\"..* 021CE\n         DC    X'007F005C00',C'\"'      007F005C007F     *.\".*.\"*   021D6\n         DC    VL4($$$$0024)           00000000         *....*     021DC\n         DC    VL4($$$$0025)           00000000         *....*     021E0\n         DC    X'00128396'             00128396         *..co*     021E4\n         DC    X'95A58599A3A3'         95A58599A3A3     *nvertt*   021E8\n         DC    X'968381A285A2A399'     968381A285A2A399 *ocasestr* 021EE\n         DC    X'9697007F007B00',C'''' 9697007F007B007D *op.\".#.'* 021F6\n         DC    X'007D007D00000000'     007D007D00000000 *.'.'....* 021FE\n         DC    X'000100118396'         000100118396     *....co*   02206\n         DC    X'95A58599A3A3'         95A58599A3A3     *nvertt*   0220C\n         DC    X'96979985A2A39996'     96979985A2A39996 *oprestro* 02212\n         DC    X'9700007F007B0000'     9700007F007B0000 *p..\".#..* 0221A\n         DC    X'0001007D000E8396'     0001007D000E8396 *...'..co* 02222\n         DC    X'97A8A2A39989'         97A8A2A39989     *pystri*   0222A\n         CLI   1157(R9),X'87'          9587 9485        *ngme*     02230\n         CLI   127,X'A3'               95A3 007F        *nt.\"*     02234\n         DC    X'005C000E'             005C000E         *.*..*     02238\n         DC    X'869699838593'         869699838593     *forcel*   0223C\n         DC    X'96A685998381A285'     96A685998381A285 *owercase* 02242\n         DC    X'0000'                 0000             *..*       0224A\n         DC    VL4($$$$0063)           00000000         *....*     0224C\n         DC    X'000E'                 000E             *..*       02250\n         DC    X'8696998385A4'         8696998385A4     *forceu*   02252\n         DC    X'979785998381A285'     979785998381A285 *ppercase* 02258\n         DC    X'00099396A6859983'     00099396A6859983 *..lowerc* 02260\n         DC    X'81A285000009A497'     81A285000009A497 *ase...up* 02268\n         DC    X'9785998381A28500'     9785998381A28500 *percase.* 02270\n         DC    X'000C838881998995'     000C838881998995 *..charin* 02278\n         DC    X'A2A39989'             A2A39989         *stri*     02280\n         DC    X'9587000000000001'     9587000000000001 *ng......* 02284\n         DC    VL4($$$$0066)           00000000         *....*     0228C\n         DC    X'000000010004'         000000010004     *......*   02290\n         DC    X'949681950000'         949681950000     *moan..*   02296\n         DC    VL4($$$$0166)           00000000         *....*     0229C\n         DC    VL4($$$$0224)           00000000         *....*     022A0\n         DC    VL4($$$$0157)           00000000         *....*     022A4\n         DC    VL4($$$$0155)           00000000         *....*     022A8\n         DC    X'000699A3'             000699A3         *..rt*     022AC\n         DC    X'95',C'3'              95F3             *n3*       022B0\n         DC    C'71'                   F7F1             *71*       022B2\n         DC    X'000000010006A399'     000000010006A399 *......tr* 022B4\n         DC    X'81958388FF010000'     81958388FF010000 *anch....* 022BC\n         DC    AL4(A001CC4)            00001CC4         *...D*     022C4\n         DC    AL4(A001A92)            00001A92         *...k*     022C8\n         DC    X'006F006F00059984'     006F006F00059984 *.?.?..rd* 022CC\n         DC    X'8388'                 8388             *ch*       022D4\n         DC    C'2',X'00'              F200             *2.*       022D6\n         DC    VL4($$$$0153)           00000000         *....*     022D8\n         DC    X'000599848388'         000599848388     *..rdch*   022DC\n         DC    C'1',X'00'              F100             *1.*       022E2\n$$$$0362 DC    X'00',C'&&'             0050             *.&*       022E4\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 022E6\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 022EE\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 022F6\n         DC    C'=='                   7E7E             *==*       022FE\n         STH   R12,1412(R5,R9)         40C5 9584        * End*     02300\n         STH   R9,1600(R6,R8)          4096 8640        * of *     02304\n         XC    914(130,R8),484(R6)     D781 8392 61E4   *Pack/U*   02308\n         CLI   387(R8),X'97'           9597 8183        *npac*     0230E\n         MVI   1945(R9),C' '           9240 9799        *k pr*     02312\n         OI    2433(R9),X'87'          9687 9981        *ogra*     02316\n         NI    3710(R7),C' '           9440 7E7E        *m ==*     0231A\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 0231E\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 02326\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 0232E\n$$$$0361 DC    X'0022'                 0022             *..*       02336\n         DC    C' :'                   407A             * :*       02338\n         STH   R9,2454(R7,R9)          4097 9996        * pro*     0233A\n         BXLE  R9,R9,404(R8)           8799 8194        *gram*     0233E\n         STH   R8,1412(R5,R9)          4085 9584        * end*     02342\n         DC    X'8584'                 8584             *ed*       02346\n         STH   R10,2467(R6,R8)         40A6 89A3        * wit*     02348\n         SRL   R4,2437(R9)             8840 9985        *h re*     0234C\n         DC    X'A3A49995'             A3A49995         *turn*     02350\n         DC    C' ',X'83'              4083             * c*       02354\n         DC    X'968485',C' '          96848540         *ode *     02356\n$$$$0360 DC    X'000D'                 000D             *..*       0235A\n         STH   R8,2457(R5,R9)          4085 9999        * err*     0235C\n         OI    576(R10),X'99'          9699 A240        *ors *     02360\n         BXH   R9,R6,1173(R10)         8696 A495        *foun*     02364\n         DC    X'8400'                 8400             *d.*       02368\n$$$$0359 DC    X'000D'                 000D             *..*       0236A\n         DC    C'1 '                   F140             *1 *       0236C\n         DC    X'859999969940'         859999969940     *error *   0236E\n         DC    X'8696A4958400'         8696A4958400     *found.*   02374\n$$$$0358 DC    X'0013'                 0013             *..*       0237A\n         DC    C' ',X'83'              4083             * c*       0237C\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 0237E\n         DC    X'A240A69989A3A385'     A240A69989A3A385 *s writte* 02386\n         DC    X'9500'                 9500             *n.*       0238E\n$$$$0357 DC    X'0010'                 0010             *..*       02390\n         DC    C' ',X'83'              4083             * c*       02392\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 02394\n         DC    X'A24099858184'         A24099858184     *s read*   0239C\n$$$$0356 DC    X'0007'                 0007             *..*       023A2\n         DC    C' ',X'93'              4093             * l*       023A4\n         DC    X'899585A2'             899585A2         *ines*     023A6\n         DC    C')',X'00'              5D00             *).*       023AA\n$$$$0355 DC    X'0009'                 0009             *..*       023AC\n         STH   R8,1687(R3,R9)          4083 9697        * cop*     023AE\n         DC    X'898584',C' '          89858440         *ied *     023B2\n         DC    C'(',X'00'              4D00             *(.*       023B6\n$$$$0354 DC    X'0006'                 0006             *..*       023B8\n         DC    C' ',X'86'              4086             * f*       023BA\n         DC    X'899385A2'             899385A2         *iles*     023BC\n$$$$0353 DC    X'0005'                 0005             *..*       023C0\n         DC    C' ',X'86'              4086             * f*       023C2\n         DC    X'89938500'             89938500         *ile.*     023C4\n$$$$0352 DC    X'0013'                 0013             *..*       023C8\n         DC    C' ',X'83'              4083             * c*       023CA\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 023CC\n         DC    X'A240A69989A3A385'     A240A69989A3A385 *s writte* 023D4\n         DC    X'9500'                 9500             *n.*       023DC\n$$$$0351 DC    X'0012'                 0012             *..*       023DE\n         DC    C' ',X'83'              4083             * c*       023E0\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 023E2\n         DC    X'A24099858184'         A24099858184     *s read*   023EA\n         DC    C', '                   6B40             *, *       023F0\n$$$$0350 DC    X'0009'                 0009             *..*       023F2\n         DC    C' ',X'93'              4093             * l*       023F4\n         DC    X'899585A2'             899585A2         *ines*     023F6\n         DC    C'): ',X'00'            5D7A4000         *): .*     023FA\n$$$$0349 DC    X'0002'                 0002             *..*       023FE\n         DC    C' ('                   404D             * (*       02400\n$$$$0348 DC    X'0008A495'             0008A495         *..un*     02402\n         DC    X'978183928584'         978183928584     *packed*   02406\n$$$$0347 DC    X'0006'                 0006             *..*       0240C\n         DC    X'978183928584'         978183928584     *packed*   0240E\n$$$$0346 DC    X'0002'                 0002             *..*       02414\n         DC    C'\" '                   7F40             *\" *       02416\n$$$$0344 DC    X'0000'                 0000             *..*       02418\n$$$$0343 DC    X'001D838881998183'     001D838881998183 *..charac* 0241A\n         DC    X'A38599408396A495'     A38599408396A495 *ter coun* 02422\n         DC    X'A34089958396'         A34089958396     *t inco*   0242A\n         DC    X'95A289A2A385'         95A289A2A385     *nsiste*   02430\n         DC    X'9583A800'             9583A800         *ncy.*     02436\n$$$$0337 DC    X'0000'                 0000             *..*       0243A\n$$$$0336 DC    X'0023'                 0023             *..*       0243C\n         DC    X'9596'                 9596             *no*       0243E\n         DC    C' \"FROM\" '             407FC6D9D6D47F40 * \"FROM\" * 02440\n         DC    X'8995'                 8995             *in*       02448\n         XI    832(R10),X'A4'          97A4 A340        *put *     0244A\n         XI    1701(R9),X'99'          9799 96A5        *prov*     0244E\n         DC    X'89848584'             89848584         *ided*     02452\n         STH   R8,1689(R6,R9)          4086 9699        * for*     02456\n         STH   R14,1495(R4,R13)        40E4 D5D7        * UNP*     0245A\n         DC    C'ACK',X'00'            C1C3D200         *ACK.*     0245E\n$$$$0335 DC    X'0004'                 0004             *..*       02462\n         DC    C'FROM'                 C6D9D6D4         *FROM*     02464\n$$$$0334 DC    X'0015'                 0015             *..*       02468\n         DC    C'N',X'85'              D585             *Ne*       0246A\n         DC    X'A640A389A39385A2'     A640A389A39385A2 *w titles* 0246C\n         STH   R8,1689(R6,R9)          4086 9699        * for*     02474\n         STH   R14,1431(R4,R9)         40E4 9597        * Unp*     02478\n         DC    X'81839200'             81839200         *ack.*     0247C\n$$$$0333 DC    X'0000'                 0000             *..*       02480\n$$$$0332 DC    X'0020'                 0020             *..*       02482\n         DC    X'9596'                 9596             *no*       02484\n         DC    C' \"TO\" '               407FE3D67F40     * \"TO\" *   02486\n         DC    X'96A4A397A4A3'         96A4A397A4A3     *output*   0248C\n         DC    C' ',X'97'              4097             * p*       02492\n         DC    X'9996A589848584',C' '  9996A58984858440 *rovided * 02494\n         BXH   R9,R6,2368(R9)          8696 9940        *for *     0249C\n         DC    C'PACK'                 D7C1C3D2         *PACK*     024A0\n$$$$0331 DC    X'0002'                 0002             *..*       024A4\n         DC    C'TO'                   E3D6             *TO*       024A6\n$$$$0330 DC    X'0000'                 0000             *..*       024A8\n$$$$0329 DC    X'0022'                 0022             *..*       024AA\n         DC    X'9596'                 9596             *no*       024AC\n         STH   R8,1158(R9,R8)          4089 8486        * idf*     024AE\n         STH   R8,1431(R9,R9)          4089 9597        * inp*     024B2\n         DC    X'A4A3'                 A4A3             *ut*       024B6\n         DC    C' ',X'96'              4096             * o*       024B8\n         DC    X'95',C' '              9540             *n *       024BA\n         DC    C'\"CTRL\"'               7FC3E3D9D37F     *\"CTRL\"*   024BC\n         STH   R8,1689(R6,R9)          4086 9699        * for*     024C2\n         STH   R9,387(R7,R8)           4097 8183        * pac*     024C6\n         MVI   1415(R9),X'89'          9289 9587        *king*     024CA\n$$$$0328 DC    X'0004'                 0004             *..*       024CE\n         DC    C'CTRL'                 C3E3D9D3         *CTRL*     024D0\n$$$$0327 DC    X'00',C'&&'             0050             *.&*       024D4\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 024D6\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 024DE\n         DC    C'== P'                 7E7E40D7         *== P*     024E6\n         DC    X'8183'                 8183             *ac*       024EA\n         MVI   1173(R14),C'/'          9261 E495        *k/Un*     024EC\n         XI    914(R8),X'81'           9781 8392        *pack*     024F0\n         STH   R9,2454(R7,R9)          4097 9996        * pro*     024F4\n         BXLE  R9,R9,404(R8)           8799 8194        *gram*     024F8\n         STH   R8,1443(R5,R9)          4085 95A3        * ent*     024FC\n         DC    X'85998584'             85998584         *ered*     02500\n         DC    C' (V',X'85'            404DE585         * (Ve*     02504\n         DC    X'99A28996'             99A28996         *rsio*     02508\n         CLI   496(R15),C' '           9540 F1F0        *n 10*     0250C\n         DC    C'2) ====='             F25D407E7E7E7E7E *2) =====* 02510\n         DC    C'========'             7E7E7E7E7E7E7E7E *========* 02518\n         DC    C'======'               7E7E7E7E7E7E     *======*   02520\n$$$$0326 DC    X'0000'                 0000             *..*       02526\n$$$$0325 DC    X'0007'                 0007             *..*       02528\n         DC    C',CSTROP',X'00'        6BC3E2E3D9D6D700 *,CSTROP.* 0252A\n$$$$0324 DC    X'0007'                 0007             *..*       02532\n         DC    C',QSTROP',X'00'        6BD8E2E3D9D6D700 *,QSTROP.* 02534\n$$$$0323 DC    X'0005'                 0005             *..*       0253C\n         DC    C',TRAN',X'00'          6BE3D9C1D500     *,TRAN.*   0253E\n$$$$0322 DC    X'0006'                 0006             *..*       02544\n         DC    C'UNPACK'               E4D5D7C1C3D2     *UNPACK*   02546\n$$$$0321 DC    X'0004'                 0004             *..*       0254C\n         DC    C'PACK'                 D7C1C3D2         *PACK*     0254E\n$$$$0320 DC    X'0013'                 0013             *..*       02552\n         DC    C'O',X'97'              D697             *Op*       02554\n         DC    X'A389'                 A389             *ti*       02556\n         DC    X'9695A240A2978583'     9695A240A2978583 *ons spec* 02558\n         DC    X'8986898584',C':'      89868985847A     *ified:*   02560\n         DC    C' ',X'00'              4000             * .*       02566\n$$$$0319 DC    X'0000'                 0000             *..*       02568\n$$$$0318 DC    X'0021'                 0021             *..*       0256A\n         CLI   2467(R8),X'85'          9585 89A3        *neit*     0256C\n         DC    X'888599',C' '          88859940         *her *     02570\n         XC    978(194,R12),149(R4)    D7C1 C3D2 4095   *PACK n*   02574\n         OI    228(R4),X'99'           9699 40E4        *or U*     0257A\n         CLC   451(216,R12),576(R13)   D5D7 C1C3 D240   *NPACK *   0257E\n         DC    X'A297858389868985'     A297858389868985 *specifie* 02584\n         DC    X'8400'                 8400             *d.*       0258C\n$$$$0317 DC    X'0017828184408388'     0017828184408388 *..bad ch* 0258E\n         DC    X'8199'                 8199             *ar*       02596\n         STH   R8,1344(R9,R9)          4089 9540        * in *     02598\n         XI    2452(R9),X'81'          9781 9994        *parm*     0259C\n         STH   R10,921(R2,R10)         40A2 A399        * str*     025A0\n         DC    X'89958700'             89958700         *ing.*     025A4\n$$$$0304 DC    X'0000'                 0000             *..*       025A8\n$$$$0303 DC    X'00188396'             00188396         *..co*     025AA\n         DC    X'9586938983A38995'     9586938983A38995 *nflictin* 025AE\n         DC    X'8740'                 8740             *g *       025B6\n         XI    2452(R9),X'81'          9781 9994        *parm*     025B8\n         STH   R9,1955(R6,R9)          4096 97A3        * opt*     025BC\n         DC    X'899695A2'             899695A2         *ions*     025C0\n$$$$0298 DC    X'0000'                 0000             *..*       025C4\n$$$$0297 DC    X'0019'                 0019             *..*       025C6\n         DC    X'9596'                 9596             *no*       025C8\n         DC    C' ',X'97'              4097             * p*       025CA\n         DC    X'8199819485A38599'     8199819485A38599 *arameter* 025CC\n         STH   R10,921(R2,R10)         40A2 A399        * str*     025D4\n         DC    X'8995'                 8995             *in*       025D8\n         DC    X'8740'                 8740             *g *       025DA\n         BXLE  R8,R9,1413(R10)         8789 A585        *give*     025DC\n         DC    X'9500'                 9500             *n.*       025E0\n$$$$0296 DC    X'0000'                 0000             *..*       025E2\n$$$$0294 DC    X'000E8885A7A2A3A7'     000E8885A7A2A3A7 *..hexstx* 025E4\n         DC    C' ',X'94'              4094             * m*       025EC\n         DC    X'89A2A2899587'         89A2A2899587     *issing*   025EE\n$$$$0293 DC    X'001C'                 001C             *..*       025F4\n         DC    X'8696999481A3'         8696999481A3     *format*   025F6\n         STH   R8,2457(R5,R9)          4085 9999        * err*     025FC\n         OI    150(R4),X'99'           9699 4096        *or o*     02600\n         CLI   1921(R9),C' '           9540 9781        *n pa*     02604\n         DC    X'83928584'             83928584         *cked*     02608\n         DC    C' ',X'89'              4089             * i*       0260C\n         DC    X'9597A4A3'             9597A4A3         *nput*     0260E\n$$$$0292 DC    X'0000'                 0000             *..*       02612\n$$$$0291 DC    X'0043A388859985',C' '  0043A38885998540 *..there * 02614\n         DC    X'81998540'             81998540         *are *     0261C\n         NI    2437(R9),X'96'          9496 9985        *more*     02620\n         STH   R8,1158(R9,R8)          4089 8486        * idf*     02624\n         DC    X'A240'                 A240             *s *       02628\n         XI    1701(R9),X'99'          9799 96A5        *prov*     0262A\n         DC    X'89848584'             89848584         *ided*     0262E\n         DC    C' ',X'96'              4096             * o*       02632\n         CLI   3491(R7),C' '           9540 7DA3        *n 't*     02634\n         DC    X'89A39385A2',C''''     89A39385A27D     *itles'*   02638\n         STH   R10,2177(R3,R8)         40A3 8881        * tha*     0263E\n         CLI   1673(R8),C' '           9540 8689        *n fi*     02642\n         DC    X'9385A240'             9385A240         *les *     02646\n         DC    X'9695'                 9695             *on*       0264A\n         STH   R9,387(R7,R8)           4097 8183        * pac*     0264C\n         MVI   1088(R8),X'85'          9285 8440        *ked *     02650\n         DC    X'8995'                 8995             *in*       02654\n         DC    X'97A4A300'             97A4A300         *put.*     02656\n$$$$0290 DC    X'0014'                 0014             *..*       0265A\n         OI    1429(R8),X'97'          9697 8595        *open*     0265C\n         STH   R8,393(R6,R8)           4086 8189        * fai*     02660\n         DC    X'93A49985'             93A49985         *lure*     02664\n         STH   R8,1689(R6,R9)          4086 9699        * for*     02668\n         STH   R8,1158(R9,R8)          4089 8486        * idf*     0266C\n$$$$0289 DC    X'000B8984'             000B8984         *..id*     02670\n         DC    X'8640'                 8640             *f *       02674\n         NI    674(R10),X'89'          9489 A2A2        *miss*     02676\n         DC    X'89958700'             89958700         *ing.*     0267A\n$$$$0288 DC    X'001C'                 001C             *..*       0267E\n         DC    X'8696999481A3'         8696999481A3     *format*   02680\n         STH   R8,2457(R5,R9)          4085 9999        * err*     02686\n         OI    150(R4),X'99'           9699 4096        *or o*     0268A\n         CLI   1921(R9),C' '           9540 9781        *n pa*     0268E\n         DC    X'83928584'             83928584         *cked*     02692\n         DC    C' ',X'89'              4089             * i*       02696\n         DC    X'9597A4A3'             9597A4A3         *nput*     02698\n$$$$0287 DC    X'000E8885A7A2'         000E8885A7A2     *..hexs*   0269C\n         OI    148(R4),X'88'           9688 4094        *oh m*     026A2\n         DC    X'89A2A2899587'         89A2A2899587     *issing*   026A6\n$$$$0286 DC    X'001C'                 001C             *..*       026AC\n         DC    X'8696999481A3'         8696999481A3     *format*   026AE\n         STH   R8,2457(R5,R9)          4085 9999        * err*     026B4\n         OI    150(R4),X'99'           9699 4096        *or o*     026B8\n         CLI   1921(R9),C' '           9540 9781        *n pa*     026BC\n         DC    X'83928584'             83928584         *cked*     026C0\n         DC    C' ',X'89'              4089             * i*       026C4\n         DC    X'9597A4A3'             9597A4A3         *nput*     026C6\n$$$$0285 DC    X'0000'                 0000             *..*       026CA\n$$$$0284 DC    X'0043A388859985',C' '  0043A38885998540 *..there * 026CC\n         DC    X'81998540'             81998540         *are *     026D4\n         NI    2437(R9),X'96'          9496 9985        *more*     026D8\n         STH   R8,2451(R6,R8)          4086 8993        * fil*     026DC\n         DC    X'85A2'                 85A2             *es*       026E0\n         STH   R9,1344(R6,R9)          4096 9540        * on *     026E2\n         XI    914(R8),X'81'           9781 8392        *pack*     026E6\n         DC    X'8584'                 8584             *ed*       026EA\n         DC    C' ',X'89'              4089             * i*       026EC\n         CLI   1187(R10),X'97'         9597 A4A3        *nput*     026EE\n         STH   R10,2177(R3,R8)         40A3 8881        * tha*     026F2\n         CLI   2436(R8),C' '           9540 8984        *n id*     026F6\n         BXH   R10,R2,151(R4)          86A2 4097        *fs p*     026FA\n         DC    X'9996A589848584',C' '  9996A58984858440 *rovided * 026FE\n         DC    X'9695'                 9695             *on*       02706\n         DC    C' '''                  407D             * '*       02708\n         DC    X'A389A39385A2'         A389A39385A2     *titles*   0270A\n         DC    C'''',X'00'             7D00             *'.*       02710\n$$$$0282 DC    X'002785958460'         002785958460     *..end-*   02712\n         OI    134(R6),X'86'           9686 6086        *of-f*     02718\n         DC    X'8993854085958396'     8993854085958396 *ile enco* 0271C\n         DC    X'A495A385998584',C' '  A495A38599858440 *untered * 02724\n         DC    X'9699'                 9699             *or*       0272C\n         STH   R8,1158(R9,R8)          4089 8486        * idf*     0272E\n         STH   R10,1686(R3,R9)         40A3 9696        * too*     02732\n         STH   R9,1685(R3,R9)          4093 9695        * lon*     02736\n         DC    X'8700'                 8700             *g.*       0273A\n$$$$0281 DC    X'001B'                 001B             *..*       0273C\n         DC    X'8696999481A3'         8696999481A3     *format*   0273E\n         STH   R8,2457(R5,R9)          4085 9999        * err*     02744\n         OI    137(R4),X'99'           9699 4089        *or i*     02748\n         CLI   2437(R9),C' '           9540 9985        *n re*     0274C\n         DC    X'81848995'             81848995         *adin*     02750\n         BXLE  R4,R0,2436(R8)          8740 8984        *g id*     02754\n         DC    X'8600'                 8600             *f.*       02758\n$$$$0280 DC    X'0000'                 0000             *..*       0275A\n$$$$0279 DC    X'002985958460'         002985958460     *..end-*   0275C\n         OI    134(R6),X'86'           9686 6086        *of-f*     02762\n         DC    X'899385408186A385'     899385408186A385 *ile afte* 02766\n         DC    X'994085A28381'         994085A28381     *r esca*   0276E\n         XI    131(R4),X'85'           9785 4083        *pe c*     02774\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 02778\n         STH   R8,1344(R9,R9)          4089 9540        * in *     02780\n         DC    X'89848600'             89848600         *idf.*     02784\n$$$$0277 DC    X'0036A49585A7'         0036A49585A7     *..unex*   02788\n         DC    X'978583A38584'         978583A38584     *pected*   0278E\n         DC    C' ',X'83'              4083             * c*       02794\n         DC    X'8881998183A38599'     8881998183A38599 *haracter* 02796\n         DC    C' ',X'81'              4081             * a*       0279E\n         BXH   R10,R3,1433(R8)         86A3 8599        *fter*     027A0\n         STH   R10,921(R2,R10)         40A2 A399        * str*     027A4\n         OI    904(R8),X'97'           9697 8388        *opch*     027A8\n         DC    X'8199'                 8199             *ar*       027AC\n         STH   R8,1344(R9,R9)          4089 9540        * in *     027AE\n         XI    1442(R8),X'99'          9799 85A2        *pres*     027B2\n         DC    X'A399'                 A399             *tr*       027B6\n         OI    137(R4),X'97'           9697 4089        *op i*     027B8\n         CLI   1187(R10),X'97'         9597 A4A3        *nput*     027BC\n$$$$0276 DC    X'0000'                 0000             *..*       027C0\n$$$$0275 DC    X'0038A49585A7'         0038A49585A7     *..unex*   027C2\n         DC    X'978583A38584'         978583A38584     *pected*   027C8\n         DC    C' ',X'85'              4085             * e*       027CE\n         CLI   150(R6),X'84'           9584 6096        *nd-o*     027D0\n         BXH   R6,R0,1673(R8)          8660 8689        *f-fi*     027D4\n         DC    X'9385'                 9385             *le*       027D8\n         DC    C' ',X'81'              4081             * a*       027DA\n         BXH   R10,R3,1433(R8)         86A3 8599        *fter*     027DC\n         STH   R10,921(R2,R10)         40A2 A399        * str*     027E0\n         OI    904(R8),X'97'           9697 8388        *opch*     027E4\n         DC    X'8199'                 8199             *ar*       027E8\n         STH   R8,1344(R9,R9)          4089 9540        * in *     027EA\n         XI    1442(R8),X'99'          9799 85A2        *pres*     027EE\n         DC    X'A399'                 A399             *tr*       027F2\n         OI    137(R4),X'97'           9697 4089        *op i*     027F4\n         CLI   1187(R10),X'97'         9597 A4A3        *nput*     027F8\n$$$$0273 DC    X'001A9985'             001A9985         *..re*     027FC\n         DC    X'979381838584'         979381838584     *placed*   02800\n         DC    C' ',X'82'              4082             * b*       02806\n         DC    X'A840A3A6'             A840A3A6         *y tw*     02808\n         DC    X'9640A2A39996'         9640A2A39996     *o stro*   0280C\n         DC    X'9783888199A2'         9783888199A2     *pchars*   02812\n$$$$0272 DC    X'0022A2A39996'         0022A2A39996     *..stro*   02818\n         DC    X'978388819940'         978388819940     *pchar *   0281E\n         DC    X'8696A49584408995'     8696A49584408995 *found in* 02824\n         DC    C' ',X'83'              4083             * c*       0282C\n         DC    X'81A285A2A399'         81A285A2A399     *asestr*   0282E\n         OI    137(R4),X'97'           9697 4089        *op i*     02834\n         CLI   1187(R10),X'97'         9597 A4A3        *nput*     02838\n$$$$0270 DC    X'0000'                 0000             *..*       0283C\n$$$$0269 DC    X'002BA49585A7'         002BA49585A7     *..unex*   0283E\n         DC    X'978583A38584'         978583A38584     *pected*   02844\n         DC    C' ',X'85'              4085             * e*       0284A\n         CLI   150(R6),X'84'           9584 6096        *nd-o*     0284C\n         BXH   R6,R0,1673(R8)          8660 8689        *f-fi*     02850\n         DC    X'9385'                 9385             *le*       02854\n         DC    C' ',X'89'              4089             * i*       02856\n         DC    X'9540A2A39989'         9540A2A39989     *n stri*   02858\n         DC    X'9587'                 9587             *ng*       0285E\n         DC    C' ',X'96'              4096             * o*       02860\n         DC    X'99408396'             99408396         *r co*     02862\n         DC    X'94948595A300'         94948595A300     *mment.*   02866\n$$$$0268 DC    X'0000'                 0000             *..*       0286C\n$$$$0267 DC    X'0037A49585A7'         0037A49585A7     *..unex*   0286E\n         DC    X'978583A38584'         978583A38584     *pected*   02874\n         DC    C' ',X'85'              4085             * e*       0287A\n         CLI   150(R6),X'84'           9584 6096        *nd-o*     0287C\n         BXH   R6,R0,1673(R8)          8660 8689        *f-fi*     02880\n         DC    X'9385'                 9385             *le*       02884\n         DC    C' ',X'81'              4081             * a*       02886\n         BXH   R10,R3,1433(R8)         86A3 8599        *fter*     02888\n         STH   R8,643(R5,R10)          4085 A283        * esc*     0288C\n         DC    X'8197854083888199'     8197854083888199 *ape char* 02890\n         DC    X'8183A38599408995'     8183A38599408995 *acter in* 02898\n         STH   R10,921(R2,R10)         40A2 A399        * str*     028A0\n         DC    X'89958700'             89958700         *ing.*     028A4\n$$$$0260 DC    X'001A818283848586'     001A818283848586 *..abcdef* 028A8\n         BXLE  R8,R8,2449(R8)          8788 8991        *ghij*     028B0\n         MVI   1173(R9),X'93'          9293 9495        *klmn*     028B4\n         OI    2201(R9),X'97'          9697 9899        *opqr*     028B8\n         DC    X'A2A3A4A5A6A7A8A9'     A2A3A4A5A6A7A8A9 *stuvwxyz* 028BC\n$$$$0259 DC    X'001A'                 001A             *..*       028C4\n         DC    C'ABCDEFGH'             C1C2C3C4C5C6C7C8 *ABCDEFGH* 028C6\n         DC    C'IJKLMNOP'             C9D1D2D3D4D5D6D7 *IJKLMNOP* 028CE\n         DC    C'QRSTUVWX'             D8D9E2E3E4E5E6E7 *QRSTUVWX* 028D6\n         DC    C'YZ'                   E8E9             *YZ*       028DE\n$$$$0257 DC    X'001A'                 001A             *..*       028E0\n         STH   R4,64(,R4)              4040 4040        *    *     028E2\n         STH   R8,1177(R3,R10)         4083 A499        * cur*     028E6\n         DC    X'9985'                 9985             *re*       028EA\n         CLI   137(R4),X'A3'           95A3 4089        *nt i*     028EC\n         CLI   1187(R10),X'97'         9597 A4A3        *nput*     028F0\n         STH   R9,2453(R3,R8)          4093 8995        * lin*     028F4\n         DC    X'85',C' '              8540             *e *       028F8\n         DC    C':-'                   7A60             *:-*       028FA\n$$$$0256 DC    X'0009'                 0009             *..*       028FC\n         STH   R9,1600(R6,R8)          4096 8640        * of *     028FE\n         BXH   R8,R9,901(R9)           8689 9385        *file*     02902\n         DC    C' ',X'00'              4000             * .*       02906\n$$$$0255 DC    X'0016'                 0016             *..*       02908\n         STH   R4,64(,R4)              4040 4040        *    *     0290A\n         STH   R8,1443(R4,R8)          4084 85A3        * det*     0290E\n         DC    X'8583A385844081A3'     8583A385844081A3 *ected at* 02912\n         DC    C' ',X'93'              4093             * l*       0291A\n         DC    X'899585',C' '          89958540         *ine *     0291C\n$$$$0254 DC    X'0003'                 0003             *..*       02920\n         DC    C' - ',X'00'            40604000         * - .*     02922\n$$$$0253 DC    X'0005'                 0005             *..*       02926\n         STH   R4,64(,R4)              4040 4040        *    *     02928\n         DC    C' ',X'00'              4000             * .*       0292C\n$$$$0252 DC    X'001B'                 001B             *..*       0292E\n         D     R4,2453(,R8)            5D40 8995        *) in*     02930\n         STH   R13,387(R7,R8)          40D7 8183        * Pac*     02934\n         MVI   1173(R14),C'/'          9261 E495        *k/Un*     02938\n         XI    914(R8),X'81'           9781 8392        *pack*     0293C\n         STH   R9,2454(R7,R9)          4097 9996        * pro*     02940\n         BXLE  R9,R9,404(R8)           8799 8194        *gram*     02944\n         STH   R6,0(,R4)               4060 4000        * - .*     02948\n$$$$0251 DC    X'000C'                 000C             *..*       0294C\n         DC    C'++++ E'               4E4E4E4E40C5     *++++ E*   0294E\n         DC    X'9999'                 9999             *rr*       02954\n         DC    X'9699'                 9699             *or*       02956\n         DC    C' ('                   404D             * (*       02958\n$$$$0248 DC    X'002C838881998183'     002C838881998183 *..charac* 0295A\n         DC    X'A38599409985'         A38599409985     *ter re*   02962\n         DC    X'979381838584'         979381838584     *placed*   02968\n         DC    C' ',X'82'              4082             * b*       0296E\n         DC    X'A8',C' '              A840             *y *       02970\n         DC    C'''',X'96'             7D96             *'o*       02972\n         DC    X'84848388'             84848388         *ddch*     02974\n         DC    C''' '                  7D40             *' *       02978\n         DC    X'8995'                 8995             *in*       0297A\n         STH   R10,2433(R3,R9)         40A3 9981        * tra*     0297C\n         CLI   897(R9),X'A2'           95A2 9381        *nsla*     02980\n         DC    X'A3899695'             A3899695         *tion*     02984\n$$$$0247 DC    X'0028838881998183'     0028838881998183 *..charac* 02988\n         DC    X'A3859940'             A3859940         *ter *     02990\n         OI    832(R10),X'A4'          96A4 A340        *out *     02994\n         OI    163(R4),X'86'           9686 40A3        *of t*     02998\n         DC    X'9981'                 9981             *ra*       0299C\n         DC    X'95A29381A389'         95A29381A389     *nslati*   0299E\n         DC    X'9695'                 9695             *on*       029A4\n         STH   R10,386(R3,R8)          40A3 8182        * tab*     029A6\n         DC    X'9385'                 9385             *le*       029AA\n         STH   R9,405(R9,R8)           4099 8195        * ran*     029AC\n         DC    X'8785'                 8785             *ge*       029B0\n$$$$0244 DC    X'00139985'             00139985         *..re*     029B2\n         DC    X'979381838584'         979381838584     *placed*   029B6\n         DC    C' ',X'82'              4082             * b*       029BC\n         DC    X'A8',C' '              A840             *y *       029BE\n         DC    C'''',X'96'             7D96             *'o*       029C0\n         DC    X'84848388'             84848388         *ddch*     029C2\n         DC    C'''',X'00'             7D00             *'.*       029C6\n$$$$0243 DC    X'00248396'             00248396         *..co*     029C8\n         CLI   2454(R9),X'A3'          95A3 9996        *ntro*     029CC\n         DC    X'934083888199'         934083888199     *l char*   029D0\n         STH   R8,1700(R6,R9)          4086 96A4        * fou*     029D6\n         CLI   137(R4),X'84'           9584 4089        *nd i*     029DA\n         CLI   1173(R10),C' '          9540 A495        *n un*     029DE\n         XI    914(R8),X'81'           9781 8392        *pack*     029E2\n         DC    X'8584'                 8584             *ed*       029E6\n         DC    C' ',X'89'              4089             * i*       029E8\n         DC    X'9597A4A3'             9597A4A3         *nput*     029EA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PACKCEBC": {"ttr": 9477, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x056O\\x01\\x056O\\x11)\\x00\\x9d\\x00\\x9d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-30T00:00:00", "modifydate": "2005-12-30T11:29:50", "lines": 157, "newlines": 157, "modlines": 0, "user": "SBGOLOB"}, "text": "PACKCEBC CSECT                                                     00000\n         L     R15,8(R15)              58FF 0008        *....*     00000\n         BR    R15                     07FF             *..*       00004\n         DC    C'ZZ'                   E9E9             *ZZ*       00006\n         DC    VL4($A68INIT)           00000000         *....*     00008\n         DC    X'00',C'<'              004C             *.<*       0000C\n$$$$0231 LR    R3,R15                  183F             *..*       0000E\n         LA    R4,4095(R3)             4143 0FFF        *....*     00010\n         LA    R5,4095(R4)             4154 0FFF        *....*     00014\n         LA    R6,94(,R3)              4160 305E        *.-.;*     00018\n         SH    R6,84(,R3)              4B60 3054        *.-..*     0001C\n         ST    R6,544(,R2)             5060 2220        *&-..*     00020\n         MVC   548(4,R2),86(R3)        D203 2224 3056   *K.....*   00024\n         LA    R6,256                  4160 0100        *.-..*     0002A\n         ST    R6,552(,R2)             5060 2228        *&-..*     0002E\n         LA    R6,1                    4160 0001        *.-..*     00032\n         SLA   R6,2                    8B60 0002        *.-..*     00036\n         L     R0,544(,R2)             5800 2220        *....*     0003A\n         AR    R0,R6                   1A06             *..*       0003E\n         ST    R0,544(,R2)             5000 2220        *&...*     00040\n         L     R1,90(,R3)              5810 305A        *...!*     00044\n         LM    R3,R5,0(R1)             9835 1000        *q...*     00048\n         L     R1,12(R1)               5811 000C        *....*     0004C\n         BR    R1                      07F1             *.1*       00050\n         DC    X'0000000000000008'     0000000000000008 *........* 00052\n         DC    C'PACKCEBC'             D7C1C3D2C3C5C2C3 *PACKCEBC* 0005A\n         DC    X'000400000001'         000400000001     *......*   00062\n         DC    VL4($$$$0232)           00000000         *....*     00068\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0006C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00074\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0007C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00084\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0008C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00094\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0009C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000A4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000AC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000B4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000BC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000C4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000CC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000D4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000DC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000E4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000EC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000F4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 000FC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00104\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0010C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00114\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0011C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00124\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0012C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00134\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0013C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00144\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0014C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00154\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0015C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00164\n         DC    X'00000040000000',C'?'  000000400000006F *... ...?* 0016C\n         DC    X'0000004200000043'     0000004200000043 *........* 00174\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0017C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00184\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0018C\n         DC    X'0000004A000000',C'.'  0000004A0000004B *...\u00a2....* 00194\n         DC    X'0000004C000000',C'('  0000004C0000004D *...<...(* 0019C\n         DC    X'0000004E000000',C'|'  0000004E0000004F *...+...|* 001A4\n         DC    X'00000050000000',C'?'  000000500000006F *...&...?* 001AC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 001B4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 001BC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 001C4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 001CC\n         DC    X'0000005A000000',C'$'  0000005A0000005B *...!...$* 001D4\n         DC    X'0000005C000000',C')'  0000005C0000005D *...*...)* 001DC\n         DC    X'0000005E0000005F'     0000005E0000005F *...;...^* 001E4\n         DC    X'00000060000000',C'/'  0000006000000061 *...-.../* 001EC\n         DC    X'0000006200000063'     0000006200000063 *........* 001F4\n         DC    X'0000006400000065'     0000006400000065 *........* 001FC\n         DC    X'00000066000000',C'?'  000000660000006F *.......?* 00204\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0020C\n         DC    X'0000006F000000',C','  0000006F0000006B *...?...,* 00214\n         DC    X'0000006C000000',C'_'  0000006C0000006D *...%..._* 0021C\n         DC    X'0000006E000000',C'?'  0000006E0000006F *...>...?* 00224\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0022C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00234\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0023C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00244\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0024C\n         DC    X'0000007A000000',C'#'  0000007A0000007B *...:...#* 00254\n         DC    X'0000007C000000',C'''' 0000007C0000007D *...@...'* 0025C\n         DC    X'0000007E000000',C'\"'  0000007E0000007F *...=...\"* 00264\n         DC    X'0000006F00000081'     0000006F00000081 *...?...a* 0026C\n         DC    X'0000008200000083'     0000008200000083 *...b...c* 00274\n         DC    X'0000008400000085'     0000008400000085 *...d...e* 0027C\n         DC    X'0000008600000087'     0000008600000087 *...f...g* 00284\n         DC    X'0000008800000089'     0000008800000089 *...h...i* 0028C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00294\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0029C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 002A4\n         DC    X'0000006F00000091'     0000006F00000091 *...?...j* 002AC\n         DC    X'0000009200000093'     0000009200000093 *...k...l* 002B4\n         DC    X'0000009400000095'     0000009400000095 *...m...n* 002BC\n         DC    X'0000009600000097'     0000009600000097 *...o...p* 002C4\n         DC    X'0000009800000099'     0000009800000099 *...q...r* 002CC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 002D4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 002DC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 002E4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 002EC\n         DC    X'000000A2000000A3'     000000A2000000A3 *...s...t* 002F4\n         DC    X'000000A4000000A5'     000000A4000000A5 *...u...v* 002FC\n         DC    X'000000A6000000A7'     000000A6000000A7 *...w...x* 00304\n         DC    X'000000A8000000A9'     000000A8000000A9 *...y...z* 0030C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00314\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0031C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00324\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0032C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00334\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0033C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00344\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0034C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00354\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0035C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00364\n         DC    X'0000006F000000',C'A'  0000006F000000C1 *...?...A* 0036C\n         DC    X'000000C2000000',C'C'  000000C2000000C3 *...B...C* 00374\n         DC    X'000000C4000000',C'E'  000000C4000000C5 *...D...E* 0037C\n         DC    X'000000C6000000',C'G'  000000C6000000C7 *...F...G* 00384\n         DC    X'000000C8000000',C'I'  000000C8000000C9 *...H...I* 0038C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00394\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0039C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 003A4\n         DC    X'0000006F000000',C'J'  0000006F000000D1 *...?...J* 003AC\n         DC    X'000000D2000000',C'L'  000000D2000000D3 *...K...L* 003B4\n         DC    X'000000D4000000',C'N'  000000D4000000D5 *...M...N* 003BC\n         DC    X'000000D6000000',C'P'  000000D6000000D7 *...O...P* 003C4\n         DC    X'000000D8000000',C'R'  000000D8000000D9 *...Q...R* 003CC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 003D4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 003DC\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 003E4\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 003EC\n         DC    X'000000E2000000',C'T'  000000E2000000E3 *...S...T* 003F4\n         DC    X'000000E4000000',C'V'  000000E4000000E5 *...U...V* 003FC\n         DC    X'000000E6000000',C'X'  000000E6000000E7 *...W...X* 00404\n         DC    X'000000E8000000',C'Z'  000000E8000000E9 *...Y...Z* 0040C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00414\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0041C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00424\n         DC    X'000000F0000000',C'1'  000000F0000000F1 *...0...1* 0042C\n         DC    X'000000F2000000',C'3'  000000F2000000F3 *...2...3* 00434\n         DC    X'000000F4000000',C'5'  000000F4000000F5 *...4...5* 0043C\n         DC    X'000000F6000000',C'7'  000000F6000000F7 *...6...7* 00444\n         DC    X'000000F8000000',C'9'  000000F8000000F9 *...8...9* 0044C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00454\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 0045C\n         DC    X'0000006F000000',C'?'  0000006F0000006F *...?...?* 00464\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT733/FILE733.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT733", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}