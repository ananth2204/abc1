//ALGOL68 JOB (,),'CHANGE TO SUIT INSTALLATION'
//*
//* 1. Make the job card suitable for your installation.
//*
//* 2.1 This job constructs the ALGOL68C system on the following data
//*     sets:
//*                A68LIB.OBJ   object module data set
//*                A68LIB.MOD   load module data set
//*                A68LIB.SYS   initialisation and library environments
//*                A68LIB.PROCS catalogued procedures
//*                A68LIB.TESTS tests
//*
//*     The blocksizes for these data sets are optimised for 3330 discs
//*     and should be changed if other discs are used.  Similarly,
//*     the space allocations will need changing for other discs.
//*     These changes should be made in the first step, "X", of the
//*     job.
//*
//* 2.2 If you wish to change the names of these data sets, change only
//*     the dsnames in the first step, "X".  The other steps obtain
//*     the dsnames by using JCL refer-back, e.g. DSNAME=*.X.OBJ .
//*     The data sets are allocated as (NEW,PASS) in the first step
//*     and are kept in the last step, "KEEP", only if the return codes
//*     from the previously executed steps are 4 or less.  Thus, if
//*     the job fails for some reason, correct the reason for the
//*     failure, and run the complete job again.
//*
//* 2.3 If you wish to have the data sets catalogued, change the DISP
//*     in the last step from (OLD,KEEP) to (OLD,CATLG).
//*
//* 2.4 If you already have an ALGOL68C system with data sets of
//*     the same names as those used in the job, you should either
//*     make a new system with different data set names (2.2 above)
//*     or change the data set names in the first step to be
//*     the temporary data set names
//*
//*                 &&OBJ
//*                 &&MOD
//*                 &&SYS
//*                 &&PROCS
//*                 &&TESTS
//*
//*     and remove the CONDX parameter from the penultimate step,
//*     "COPY".  This will cause the system to be constructed on the
//*     temporary data sets, then to be copied (with the replace
//*     option) to the existing data sets. Because the replace option
//*     is used, the default names, e.g. A68C, Z370, will be replaced
//*     by aliases describing the new system. Execution of the COPY
//*     step will cause the last step, "KEEP", to be omitted, and so
//*     the temporary data sets will be correctly deleted at the end of
//*     the job.
//*
//*     N.B. Ensure that the existing data sets have sufficient space
//*     and directory blocks to receive the new members.  See the first
//*     step, "X", for estimates of requirements.  Note also that all
//*     the data sets must exist before the job is run.
//*
//* 3.  The data set "S.FORTLIB" (see the JCL procedures) is not
//*     distributed as it contains the proprietry FORTRAN routines used
//*     for sin, cos, tan, arcsin, arccos, arctan, exp, sqrt.  It is up
//*     to the installation to arrange linkage to a suitable set of
//*     routines.
//*
//*     ALGOL68C versions of these routines are being developed and
//*     will be distributed with future releases of the system.
//*
//* 4.  Stropping:  The standard job constructs an ALGOL68C system
//*     that supports "case stropping" (that is, tags are written
//*     with lower case letters and digits, and indicants are written
//*     with upper case letters).  The alternative, "prefix-quote
//*     stropping", has tags written with upper or lower case letters
//*     or digits and indicants must be immediately preceded by a
//*     single quote (apostrophe) and are written in upper case
//*     letters.  TO construct a system for prefix-quote stropping,
//*     change the default value for the "Q" symbolic parameter in
//*     the "P" procedure (unpack to pds) from null to Q (i.e. instead
//*     of "Q=,", use "Q=Q,") and in the step LKA68C to link-edit the
//*     compiler, change "INCLUDE(EBCDIC)" to "INCLUDE(QEBCDIC)".
//*
//*
//* PREALLOCATE DATA SETS (PUTS ON PASSED DATA SET LIST, KEEP AT END)
//*
//X EXEC PGM=IEFBR14,  STANDARD IBM "DO NOTHING" PROGRAM
//             REGION=6K,TIME=(,1)
//* ========== OBJECT MODULE DATA SET =============
//OBJ DD DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480),DSN=A68LIB.OBJ, ********* ********
//     UNIT=SYSDA,SPACE=(TRK,(40,5,8)),DISP=(,PASS)
//* ========== LOAD MODULE DATA SET =============
//MOD DD DSN=A68LIB.MOD, ********************************************** ********
//     DISP=(,PASS),SPACE=(CYL,(3,1,8)),UNIT=SYSDA,DCB=RECFM=U
//* ========== INITIALISATION AND ENVIRONMENTS =======
//SYS DD DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),DSN=A68LIB.SYS, ******** ********
//     SPACE=(TRK,(4,1,2)),UNIT=SYSDA,DISP=(,PASS)
//* ========== PROCEDURES =====================
//PROCS DD DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480),DSN=A68LIB.PROCS, ***** ********
//     SPACE=(TRK,(1,1,2)),UNIT=SYSDA,DISP=(,PASS)
//* ========== TESTS =================================================
//TESTS DD DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),DSN=A68LIB.TESTS, **** ********
//       SPACE=(TRK,(35,5,4)),UNIT=SYSDA,DISP=(,PASS)
//*
//*
//* COPY FB80 DATA SET
//*
//F PROC N=,                  DATA SET NAME
//       L=,                  TAPE FILE NUMBER
//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME
//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE
//       BLKSIZE=3200,       TAPE BLOCKSIZE
//       TRAN=''        7TRACK RECORDING TECHNIQUE
// EXEC PGM=IEBGENER,REGION=80K
//SYSPRINT DD SYSOUT=A
//SYSIN DD DUMMY
//SYSUT1 DD UNIT=&TAPE,VOL=(,RETAIN,SER=&SER),
//          LABEL=(&L,&LABELS),DISP=OLD,DSN=A68C&L,
//          DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB,DEN=&DEN&TRAN)
//SYSUT2 DD UNIT=SYSDA,
//          DISP=(OLD,PASS),DSN=&N,
//          SPACE=(TRK,(1,1)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)
// PEND
//*
//* UNPACK TO PDS
//*
//P PROC N='*.X.SYS',         DISC DSNAME
//       Q=,                  'Q' FOR PREFIX QUOTE STROPPING ********** ********
//       LIB='*.X.MOD',       LOAD MODULE LIBRARY
//       L=,                  TAPE FILE NUMBER
//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME
//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE
//       BLKSIZE=3200,       TAPE BLOCKSIZE
//       TRAN=''        7TRACK RECORDING TECHNIQUE
// EXEC PGM=PACK,REGION=120K,PARM='/UNPACK,&Q'
//STEPLIB DD DISP=(SHR,PASS),DSN=&LIB
//SYSPRINT DD SYSOUT=A
//FROM DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),
//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,
//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)
//UNPACKED DD DISP=(OLD,PASS),DSN=&N
// PEND
//*
//* UPDTE TO PDS
//*
//C PROC N='*.X.OBJ',         OBJECT MODULE LIBRARY (TEMPORARY)
//       L=,                  TAPE FILE NUMBER
//       SER=A68C00,UNIT=TAPE9, TAPE SERIAL AND UNIT NAME
//       DEN=3,LAB=SL, TAPE DENSITY AND LABEL TYPE
//       BLKSIZE=3200,       TAPE BLOCKSIZE
//       TRAN=''        7TRACK RECORDING TECHNIQUE
// EXEC PGM=IEBUPDTE,REGION=40K,PARM=NEW
//SYSPRINT DD DUMMY
//SYSIN DD UNIT=&UNIT,VOL=(,RETAIN,SER=&SER),
//         LABEL=(&L,&LAB),DISP=SHR,DSN=A68C&L,
//         DCB=(LRECL=80,BLKSIZE=&BLKSIZE,RECFM=FB&TRAN,DEN=&DEN)
//SYSUT2 DD DISP=(OLD,PASS),DSN=&N
// PEND
//*
//* LKED
//*
//L PROC N='*.X.MOD',                LOAD MODULE DATA SET
//       O='*.X.OBJ',                OBJECT MODULE DATA SET
//       LIB='*.SYSLMOD,VOL=REF=*.SYSLMOD', SYSLIB DATA SET
//       B=4096,                     SYSLMOD BLOCKSIZE **************** ********
//       X='RENT,CALL'               OR 'RENT,NCAL' OR 'OVLY,CALL'
// EXEC PGM=IEWLF880,REGION=120K,
//  PARM='SIZE=(999999,8K),LIST,NOMAP,NOXREF,LET,&X,DCBS'
//SYSLIN   DD DDNAME=SYSIN
//SYSLMOD  DD DISP=(OLD,PASS),DCB=BLKSIZE=&B,DSN=&N
//SYSPRINT DD SYSOUT=A
//SYSUT1   DD UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),SPACE=(TRK,(5,5))
//SYSLIB   DD DISP=(SHR,PASS),DSN=&LIB
//OBJ DD DISP=(SHR,PASS),DSN=&O
// PEND
//*
//* IEBCOPY
//*
//COPY PROC CONDX='(4,LT)'
//COPY EXEC PGM=IEBCOPY,REGION=96K,COND=((4,LT),&CONDX)
//SYSUT3 DD UNIT=SYSDA,SPACE=(TRK,(1,1))
//SYSUT4 DD UNIT=SYSDA,SPACE=(TRK,(1,1))
//SYSPRINT DD SYSOUT=A
// PEND
//MISCOBJ EXEC C,L=7  LIBRARY AND XREF OBJECT MODULES
//*
//* MAKE LIBRARY
//*
//L1 EXEC L,X='RENT,NCAL'
 CHANGE ZLIB($LIB127)
 INCLUDE OBJ($LIB127)
 ENTRY $A68INIT
 NAME $LIB127(R)
 INCLUDE OBJ($MCH107)
 NAME $MCH107(R)
 INCLUDE OBJ($BAS107)
 NAME $BAS107(R)
 INCLUDE OBJ($REA107)
 NAME $REA107(R)
 INCLUDE OBJ($CPX107)
 NAME $CPX107(R)
 INCLUDE OBJ(RAND)
 ALIAS $$$$0073 GETRANDOM
 ALIAS $$$$0074 SAVERANDOM
 ALIAS $$$$0075 CHANGERANDOM
 NAME $$$$0076(R) RANDOM
 INCLUDE OBJ(FORT)
 ALIAS $$$$0041 COS
 ALIAS $$$$0042 TAN
 ALIAS $$$$0043 ARCSIN
 ALIAS $$$$0044 ARCCOS
 ALIAS $$$$0045 ARCTAN
 ALIAS $$$$0046 LN
 ALIAS $$$$0047 EXP
 ALIAS $$$$0048 SQRT
 NAME $$$$0040(R) SIN
//*
//* MAKE CROSSREFERENCE PROGRAM
//*
//L2 EXEC L
 INCLUDE OBJ(XREF)
 ENTRY $A68INIT
 NAME XREF(R)
//PACKOBJ EXEC C,L=8 OBJECT MODULES FOR PACK/UNPACK PROGRAM
//*
//* MAKE PACK/UNPACK
//*
//LPACK EXEC L
 INCLUDE OBJ(PACK,PACKCEBC)
 ENTRY $A68INIT
 NAME PACK(R)
//A68COBJ EXEC C,L=9       COMPILER OBJECT MODULES
//*
//* MAKE COMPILER
//*
//LA68C EXEC L,X='OVLY,CALL'
 INCLUDE OBJ(SYS,M1,S1)
 OVERLAY ONE
 INCLUDE OBJ(Y1)
 INCLUDE OBJ(EBCDIC)     QEBCDIC FOR PREFIX QUOTE STROPPING *********** ********
 INCLUDE OBJ(N1,T1,Z1,R1,I1,L1,K1,P1,Q1)
 OVERLAY ONE
 INCLUDE OBJ(D2)
 OVERLAY TWO
 INCLUDE OBJ(R2,M2,P2,T2,E2,I2,S2,X2,B2)
 OVERLAY TWO
 INCLUDE OBJ(A3)
 OVERLAY THREE
 INCLUDE OBJ(P3,M3,Q3,G3,O3,R3,E3,B3,U3,F3,S3,C3,K3,D3)
 OVERLAY THREE
 INCLUDE OBJ(D4)
 ENTRY $A68INIT
 ALIAS A68C
 NAME A68C247(R)
//Z370OBJ EXEC C,L=10           Z370 TRANSLATOR OBJECT MODULES
//*
//* MAKE TRANSLATOR
//*
//LZ370 EXEC L,X='OVLY,CALL'
 INCLUDE OBJ(SYS,A)
 OVERLAY ONE
 INCLUDE OBJ(B,R,G,Q)
 OVERLAY ONE
 INCLUDE OBJ(C,P)
 ENTRY $A68INIT
 ALIAS Z370
 NAME Z370119(R)
//PROCLIB EXEC C,L=11,N='*.X.PROCS' JCL CATALOGUED PROCEDURES
//TESTS EXEC P,L=12,N='*.X.TESTS'   TESTS
//TESTJOB EXEC P,L=13,N='*.X.TESTS',Q=    TEST JOBS AND RESULTS
//INIT EXEC P,L=14      COMPILER INITIALISATION FILES
//ULIBENV EXEC P,L=15  LIBRARY ENVIRONMENT FILES
//*
//* ADD ALIASES
//*
// EXEC ASMFCLG
//ASM.SYSIN DD *
*
* JIFFY PROGRAM TO MAKE ALIASES
*
 USING *,12
 LR 12,15
 OPEN (DCB,(OUTPUT))
 LA 2,NAMELIST
 BAL 3,ALIAS
 BAL 3,ALIAS
 BAL 3,ALIAS
 CLOSE DCB
 SR 15,15 ALWAYS YIELD ZERO RETURN CODE
 SVC 3
*
ALIAS DS 0H
 MVC NAME,0(2)
 BLDL DCB,BLDLLIST
 MVC NAME,8(2)
 OI NAME+11,X'80' SET ALIAS FLAG
 STOW DCB,NAME,A
 LA 2,16(2) TO NEXT
 BR 3
*
NAMELIST DC CL8'INIT370',CL8'INIT'
 DC CL8'CMPX107',CL8'USER107'
 DC CL8'CMPX107',CL8'USER'
*
BLDLLIST DC H'1' ONE ENTRY
 DC H'12' LENGTH 12
NAME DC CL8' '
 DC AL3(0) TTR
 DC AL1(0) C
*
DCB DCB DDNAME=DD,DSORG=PO,MACRF=(W)
 END
//GO.DD DD DISP=(OLD,PASS),DSN=*.X.SYS
//*
//* OPTIONAL STEP TO COPY FROM TEMPORARY DATA SETS TO EXISTING
//* ALGOL68C SYSTEM DATA SETS.
//* N.B. BEFORE INCLUDING THIS STEP BY ALTERING THE COND, MAKE
//* SURE THAT THE COMMENTS AT THE START OF THIS JOB ARE UNDERSTOOD!
//*
//COPY EXEC COPY,
//          CONDX='(0,NE),(0,EQ)', OR OMIT CARD *********************** ********
//          REGION=96K
//I1 DD DSN=*.X.OBJ,DISP=(OLD,DELETE)
//I2 DD DSN=*.X.MOD,DISP=(OLD,DELETE)
//I3 DD DSN=*.X.SYS,DISP=(OLD,DELETE)
//I4 DD DSN=*.X.PROCS,DISP=(OLD,DELETE)
//I5 DD DSN=*.X.TESTS,DISP=(OLD,DELETE)
//O1 DD DSN=A68LIB.OBJ,DISP=(OLD,KEEP)
//O2 DD DSN=A68LIB.MOD,DISP=(OLD,KEEP)
//O3 DD DSN=A68LIB.SYS,DISP=(OLD,KEEP)
//O4 DD DSN=A68LIB.PROCS,DISP=(OLD,KEEP)
//O5 DD DSN=A68LIB.TESTS,DISP=(OLD,KEEP)
 COPY I=((I1,R)),O=O1
 COPY I=((I2,R)),O=O2
 COPY I=((I3,R)),O=O3
 COPY I=((I4,R)),O=O4
 COPY I=((I5,R)),O=O5
//*
//* KEEP THE DATA SETS
//* THIS STEP IS SKIPPED IF THE ABOVE COPY STEP IS RUN
//*
// EXEC PGM=IEFBR14,  STANDARD IBM "DO NOTHING" PROGRAM
//             REGION=6K,TIME=(,1),
//             COND=((4,LT),(0,NE,COPY.COPY),(0,EQ,COPY.COPY))
//OBJ DD DSN=*.X.OBJ,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)
//MOD DD DSN=*.X.MOD,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)
//SYS DD DSN=*.X.SYS,DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)
//PROCS DD DSN=*.X.PROCS,
//        DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)
//TESTS DD DSN=*.X.TESTS,
//        DISP=(OLD,KEEP) MAY NEED TO CHANGE TO (OLD,CATLG)
