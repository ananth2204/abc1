Changes in version 247/119/107/127 since 243/117/106/126
--------------------------------------------------------

1. Bugs mended (for details see AL68.BUGS):

   327-337, 342-344, 347, 348, 350, 351, 356, 358, 361, 364-366, 373,
   375, 380.


2. Priority definitions for ! & and NEQ

   ! & and NEQ no longer have priority definitions in the standard
   environment.  This is a temporary measure associated with the
   change in the language definition to bring ALGOL68C into line with
   ALGOL 68 (Revised).  The compiler issues a message if an operator
   is used for which there is no associated priority definition.  Thus,
   if the user has not provided priority definitions, existing uses of
   the above operators will give rise to messages to warn him that the
   meaning of his program may have changed.

   Priority definitions for these operators will be reintroduced into
   the implementation win some later version (or if an installation
   wishes, it may of course reintroduce the definitions itself).


   N.B.  The priority definitions for >> and << have already been
         changed to 8.


3. The file idfs for the program source and the program heading (from the
   parameter channel) are now read from the initialisation file (in the
   same way that the zcode and environment output file idfs are read).
   The only idfs assumed by the compiler are for the initialisation
   file (the null idf on initialisation channel) and for the message
   output file (the null idf on standout channel).


4. Square brackets are replaced by round brackets in all messages
   generated by the compiler: e.g. ()AMODE instead of âäAMODE.  Note
   however, the reflection of an input line following a phase 1 error
   message does not translate brackets (or anything else).


5. Standard Environment: CMPX

   'read compl' and 'print compl' are now available, but they
   do not yet give least significant digit accuracy.


6. Standard environment: REAL

6.1 'read real', 'print fixed' and 'print float' are now available
    but do not yet give least significant digit accuracy.  'print real'
    now calls 'print float' in a similar manner to that described in
    the ALGOL 68 Report (Revised) and thus the 360/370 version prints
    more digits.

    PROC print fixed = (REF FILE f, REAL r, INT width, after)BOOL:

         #Attempt to print in fixed point format in a total width of
          'ABS width' with 'after' digits after the decimal point.
          The sign is always printed if 'width>0'.  Yields TRUE only
          if printing was successful.#;

    PROC print float = (REF FILE f, REAL r, INT width, after, exp)BOOL:

         #Attempt to print in floating point format in a total width of
          'ABS width' with 'after' digits after the decimal point and
          an exponent field width of 'ABS exp'.  The mantissa sign is
          always printed if 'width>0'.  The exponent sign is always
          printed if 'exp>0'.  Yields TRUE only if printing was
          successful.#;

6.2 Random number routines are now available.


7. Standard environment: BASE

7.1 The SYS and BASE segments have been merged into the single
    segment BASE (the compiler and 360/370 ZCODE translator now have
    the SYS segment included in their code).

7.2 OP * = (INT a, CHAR b)STRING: #now available - see the ALGOL 68
    Report (Revised) for details.  N.B. The heap is used.#;

7.3 'read string' is available (N.B. the heap is used).

7.4 'move char pos' is no longer available, it has been replaced by
    'move char number' (for compatibility with 'set char number').


8. Standard Environment - 360/370 assembler library:

8.1 The operator + is available yielding STRING for all combinations of
    CHAR and STRING operands.

8.2 OP ELEM = (INT a, BYTES b)CHAR: #is available.#;

8.3 Miscellaneous reorganisation of the assembler library has taken place.

8.4 The restriction to a maximum of 5 books simultaneously open has been
    lifted, but not that the corresponding O.S. control blocks
    (DCBs) are allocated from the heap (but they are reused whenever
    possible).


9. Standard Environment - 360/370 version

9.1 The total size of the library is now somewhat over 30K (bytes).

9.2 Subsets of the library may be obtained by including a USING directive
    at the head of the program (or on the PARM string preceded by /) as
    follows:

      to exclude complex arithmetic:

          USING USER FROM "SYSENV(REAL)"

      to exclude complex and much of real arithmetic:

          USING USER FROM "SYSENV(BASE)"


10. Link Editing (360/370 only):

   The A68CL procedures now work correctly, no dummy ENTRY statement
   is needed for the LKED step.

   ENTRY A68INIT should no longer be used as a LKED control statement in
   any LKED steps.



11. ZCODE: the operations F271, F273, F275, F277 (previously not used)
   have been redefined - see "ZCODE: A simple machine" edition 7 or
   later.



Some of the more important changes in version 243/117/106/126
-------------------------------------------------------------

1 OS CSECT and ENTRY names.

   To avoid clashes of names, all internally generated CSECT and ENTRY
names will begin with the character "$".

Example: $A68INIT


2 Name directive

   A name may be given to the CSECT produced by the translator by using
a name directive in the program heading-option.  The name is passed to
the translator and also to the environment (if any) produced.  As well
as giving the name to the CSECT, the translator generates an external
reference to the name of the parent module, if that module had a name.
If the parent module is stored in a linkage editor call library with the
same member name as its CSECT name, the module will be loaded
automatically by the linkage editor (see the example in section 6
below).

Example (of the name directive): NAME "MYCSECT"


3 ANDF and ORF.

   The relative binding powers of ANDF (and ORF) and := (and :=:=) have
been changed, since the previous implementation is incorrect.
Previously, := and :=:= bound more tightly than ANDF and ORF, and this
has been changed to make ANDF and ORF bind more tightly than := and
:=:=.  For example,

  'a := b ORF c' used to mean '(a:=b) ORF c'
   and now means 'a := (b ORF c)'

  'a ORF b := c' has not changed.

   The compiler will issue a warning message after the change has been
made if it detects a construction of this form having a changed meaning.


4 Titles.

  In previous versions of the compiler, a freestanding tag at the head
of a program has been treated as the title of the segment.  This leads
to a minor ambiguity which has been resolved by needing such a title to
be preceded by the title-symbol (TITLE).

Example: TITLE some tag


5 Mode declarations involving actual rowers

   Previous versions of the compiler allowed mode-declarations with
actual rowers, such as

        MODE ROWMODE = â1:5äINT;

Because of changes to the compiler to make the handling of rows more
general, this form of mode declaration is no longer implemented. It
will, of course, be implemented when the treatment of rows within the
compiler is complete.

But, of course, declarations of the form

        MODE REFROWMODE = REFâäINT;

are still allowed.
