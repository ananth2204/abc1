./       ADD          NAME=CKA68CJ
//XC PROC TO=<3>,SRCE=<1>,EDS=<2>,
//        OPTC=,CODE='AL68.A68C.ZCOD'
//* ****** EDIT step not needed for distributed system *********
//E EXEC PGM=EDIT,REGION=32K,COND=EVEN,
//       PARM='v-ÂPS TSAS PH/.A68C.TXT&SRCE+.EDS&EDS(&S)/'
//TSAS DD SYSOUT=A
//VER DD SYSOUT=C
//WORK DD UNIT=DISC,SPACE=(TRK,(5,5))
//FROM DD DSN=AL68.A68C.TXT&SRCE(&S),DISP=SHR
//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,
//      SPACE=(TRK,(3,3))
//EDITS DD DSN=AL68.A68C.EDS&EDS(&S),DISP=SHR
//*
//A68 EXEC PGM=A68C<4$SAFE>,REGION=150K,TIME=(,15),COND=EVEN,
// PARM='/&OPTC <PARM><X$' NO> XREF'
//STEPLIB DD DSN=AL68.MOD,DISP=SHR
//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR
//SYSENV DD DDNAME=ENV<8$>
//ENV DD DSN=AL68.SYS,DISP=SHR
//ENVSAFE DD DSN=AL68.SYS,DISP=SHR
//ENV<8$DUMMY> DD DSN=AL68.USERLIB.ENV<8$DUMMY>,DISP=SHR
//ENVIN DD DSN=AL68.A68C.ENV&TO($),DISP=SHR
//CODE DD DSN=&CODE&TO(&S),DISP=(OLD,PASS)
//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)
//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=C
//ENVOUT DD DSN=AL68.A68C.ENV&TO(&S),DISP=OLD
//CAMDUMP DD SYSOUT=C
//*
//<X$*>X EXEC PGM=XREF,REGION=120K,
//<X$*>       PARM='/ XREF&TO(&S)'
//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR
//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)
//<X$*>TO DD DSN=AL68.A68C.XREF&TO(&S),DISP=OLD
//<X$*>SYSPRINT DD SYSOUT=A
//*
//<Z$>I EXEC PGM=Z370<5$SAFE>,REGION=132K,COND=((8,LT,A68),EVEN),TIME=(,5)
//<Z$>STEPLIB DD DSN=AL68.MOD,DISP=SHR
//<Z$>SYSIN DD DSN=&CODE&TO(&S),DISP=(OLD,PASS)
//<Z$>SYSPRINT DD SYSOUT=C
//<Z$>SYSGO DD DSN=AL68.A68C.OBJ&TO(&S),DISP=OLD
//<Z$>CAMDUMP DD SYSOUT=C
// PEND
//*
//ALLOC EXEC PGM=IEFBR14,  STANDARD IBM "DO NOTHING" PROGRAM
//      REGION=8K,TIME=(,1)
//CODE DD DSN=AL68.A68C.ZCOD<3>,DISP=(MOD,<ZCODE$PASS>),UNIT=DISC,
//         SPACE=(TRK,(20,5,8)),DCB=(RECFM=VB,LRECL=84,BLKSIZE=2498)
//<X$*>XREF DD DSN=&XREF,DISP=(NEW,PASS),UNIT=DISC,
//<X$*>        DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),SPACE=(TRK,(4,4))
//*1   phase 1
//SYS EXEC XC,S=SYS,
//        OPTC='NAME "SYS" USING USER FROM "SYSENV(MACH<6$SAFE>)"'
//M1 EXEC XC,S=M1,
//        OPTC='NAME "M1" USING USER FROM "ENVIN(SYS)"'
//S1 EXEC XC,S=S1,
//        OPTC='NAME "S1" USING MAIN FROM "ENVIN(M1)"'
//Y1 EXEC XC,S=Y1,
//        OPTC='NAME "Y1" USING PASSA FROM "ENVIN(S1)"'
//EBCDIC EXEC XC,S=EBCDIC,
//        OPTC='NAME "EBCDIC" USING TRANSLATE FROM "ENVIN(Y1)"'
//QEBCDIC EXEC XC,S=QEBCDIC,
//        OPTC='NAME "QEBCDIC" USING TRANSLATE FROM "ENVIN(Y1)"'
//ASCII EXEC XC,S=ASCII,
//        OPTC='NAME "ASCII" USING TRANSLATE FROM "ENVIN(Y1)"'
//QASCII EXEC XC,S=QASCII,
//        OPTC='NAME "QASCII" USING TRANSLATE FROM "ENVIN(Y1)"'
//ICL4100 EXEC XC,S=ICL4100,
//        OPTC='NAME "ICL4100" USING TRANSLATE FROM "ENVIN(Y1)"'
//PDP1145 EXEC XC,S=PDP1145,
//        OPTC='NAME "PDP1145" USING TRANSLATE FROM "ENVIN(Y1)"'
//N1 EXEC XC,S=N1,
//        OPTC='NAME "N1" USING MOAN FROM "ENVIN(Y1)"'
//T1 EXEC XC,S=T1,
//        OPTC='NAME "T1" USING TOKEN FROM "ENVIN(Y1)"'
//Z1 EXEC XC,S=Z1,
//        OPTC='NAME "Z1" USING PARSER FROM "ENVIN(Y1)"'
//R1 EXEC XC,S=R1,
//        OPTC='NAME "R1" USING PARSECNTRL FROM "ENVIN(Z1)"'
//I1 EXEC XC,S=I1,
//        OPTC='NAME "I1" USING INIT FROM "ENVIN(R1)"'
//L1 EXEC XC,S=L1,
//        OPTC='NAME "L1" USING CLAUSE FROM "ENVIN(Z1)"'
//K1 EXEC XC,S=K1,
//        OPTC='NAME "K1" USING CLAUSEMAIN FROM "ENVIN(L1)"'
//P1 EXEC XC,S=P1,
//        OPTC='NAME "P1" USING PHRASE FROM "ENVIN(L1)"'
//Q1 EXEC XC,S=Q1,
//        OPTC='NAME "Q1" USING SUBPARSE FROM "ENVIN(P1)"'
//*2   phase 2
//D2 EXEC XC,S=D2,
//        OPTC='NAME "D2" USING PASSBC FROM "ENVIN(S1)"'
//R2 EXEC XC,S=R2,
//        OPTC='NAME "R2" USING PASSB FROM "ENVIN(D2)"'
//M2 EXEC XC,S=M2,
//        OPTC='NAME "M2" USING MOAN FROM "ENVIN(R2)"'
//P2 EXEC XC,S=P2,
//        OPTC='NAME "P2" USING PMR FROM "ENVIN(R2)"'
//T2 EXEC XC,S=T2,
//        OPTC='NAME "T2" USING TREEPRINT FROM "ENVIN(P2)"'
//E2 EXEC XC,S=E2,
//        OPTC='NAME "E2" USING EQUIV FROM "ENVIN(R2)"'
//I2 EXEC XC,S=I2,
//        OPTC='NAME "I2" USING INITEQUIV FROM "ENVIN(E2)"'
//S2 EXEC XC,S=S2,
//        OPTC='NAME "S2" USING SCAN FROM "ENVIN(R2)"'
//X2 EXEC XC,S=X2,
//        OPTC='NAME "X2" USING SCANBODY FROM "ENVIN(S2)"'
//B2 EXEC XC,S=B2,
//        OPTC='NAME "B2" USING SCANCASE FROM "ENVIN(X2)"'
//*3   phase 3
//A3 EXEC XC,S=A3,
//        OPTC='NAME "A3" USING PASSC FROM "ENVIN(D2)"'
//P3 EXEC XC,S=P3,
//        OPTC='NAME "P3" USING ROUTINES FROM "ENVIN(A3)"'
//M3 EXEC XC,S=M3,
//        OPTC='NAME "M3" USING MOAN FROM "ENVIN(P3)"'
//Q3 EXEC XC,S=Q3,
//        OPTC='NAME "Q3" USING SUBROUTINES FROM "ENVIN(P3)"'
//G3 EXEC XC,S=G3,
//        OPTC='NAME "G3" USING GENERATE FROM "ENVIN(Q3)"'
//O3 EXEC XC,S=O3,
//        OPTC='NAME "O3" USING OPERATE FROM "ENVIN(G3)"'
//R3 EXEC XC,S=R3,
//        OPTC='NAME "R3" USING EVALCTRL FROM "ENVIN(G3)"'
//E3 EXEC XC,S=E3,
//        OPTC='NAME "E3" USING EVAL FROM "ENVIN(G3)"'
//B3 EXEC XC,S=B3,
//        OPTC='NAME "B3" USING EVALCASE FROM "ENVIN(E3)"'
//U3 EXEC XC,S=U3,
//        OPTC='NAME "U3" USING UNARY FROM "ENVIN(B3)"'
//F3 EXEC XC,S=F3,
//        OPTC='NAME "F3" USING FORLOOP FROM "ENVIN(B3)"'
//S3 EXEC XC,S=S3,
//        OPTC='NAME "S3" USING SLICES FROM "ENVIN(B3)"'
//C3 EXEC XC,S=C3,
//        OPTC='NAME "C3" USING COND FROM "ENVIN(B3)"'
//K3 EXEC XC,S=K3,
//        OPTC='NAME "K3" USING ECASE FROM "ENVIN(B3)"'
//D3 EXEC XC,S=D3,
//        OPTC='NAME "D3" USING DISPLAY FROM "ENVIN(B3)"'
//D4 EXEC XC,S=D4,
//        OPTC='NAME "D4" USING PASSD FROM "ENVIN(A3)"'
./       ADD          NAME=CKPACK
SUBMIT %H!
/*JOB <U> <J>  CKPACK<2$<1>:A68C<SYSC>+Z370<SYST>
TURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>, NOTIFY
LIMSTORE150K,COMP10SECS
PASSWORD <PWD$:>
<FAST$>
// EXEC A68C,PARMC='/USING USER FROM "SYSENV(BASE<SYSE>)"',
// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,
// SYSLIB='AL68.MOD',IDSN='AL68.SYS',SDSN='AL68.SYS',
// LOADSET='AL68.PACK.OBJ(PACK)',DISPT=OLD
//A68.ENVOUT DD DSN=&&ENVOUT,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1))
//A68.SYSIN DD DSN=AL68.DISTRIB(PACK<1>),DISP=SHR
//*
// EXEC A68C,
// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,SYSLIB='AL68.MOD',
// IDSN='AL68.SYS',SDSN='AL68.SYS',
// LOADSET='AL68.PACK.OBJ(PACKCEBC)',DISPT=OLD
//A68.ENVIN DD DSN=&&ENVOUT,DISP=SHR
//A68.SYSIN DD DSN=AL68.DISTRIB(PACKCEBC),DISP=SHR
//*
// EXEC LKED,NAMEL='AL68.MOD(PACK<2$<1>)',DISPL=OLD,CAL=CALL
//LKED.OBJ DD DSN=AL68.PACK.OBJ,DISP=SHR
//LKED.SYSLIB DD DSN=AL68.MOD,DISP=SHR
//LKED.SYSIN DD *
 INCLUDE OBJ(PACK,PACKCEBC)
./       ADD          NAME=CKUSER
FILE %H& AS &TEMP
/*JOB <U> <J> CKU<3>(<4$SAFE>+<5$SAFE>)
PRIORITY <P>, TURNROUND <T>, ROUTE <R>, POST <POST$<%USER>
COMP 20,PRINTER 1K, NOTIFY, CHAIN, LIMSTORE 150K
PASSWORD <PWD$:>
<FAST$>
//*
//*
//*  COMPILE  USER<1>
//*     WITH  EDS<2>
//*       TO  <3>
//*      NAME <8$<3>
//*
//*    USING  COMPILER <4$SAFE>
//*           TRANSLATOR <5$SAFE>
//*           ENV <6$SAFE>
//*           INIT <7$SAFE>
//*
//*
//XC PROC TO=<3>,SRCE=<1>,EDS=<2>,
//        M=,OPTC=,
//        CODE='AL68.USERLIB.ZCOD'
//E EXEC PGM=EDIT,REGION=32K,COND=EVEN,
//       PARM='v-<LT$Â>PS TSAS PH/.USERLIB.TXT&SRCE+.EDS&EDS(&S.&M)/'
//TSAS DD SYSOUT=A
//VER DD SYSOUT=C
//WORK DD UNIT=DISC,SPACE=(TRK,(5,5))
//FROM DD DSN=AL68.USERLIB.TXT&SRCE(&S.&M),DISP=SHR
//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,
//      SPACE=(TRK,(3,3))
//EDITS DD DSN=AL68.USERLIB.EDS&EDS(&S.&M),DISP=SHR
//*
//A68 EXEC PGM=A68C<4$SAFE>,REGION=150K,TIME=(,10),COND=EVEN,
// PARM='/NAME "&NAME" &OPTC <PARM> <X$' NO> XREF'
//STEPLIB DD DSN=AL68.MOD,DISP=SHR
//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR
//SYSENV DD DSN=AL68.USERLIB.ENV&TO,DISP=SHR
//CODE DD DSN=&CODE&TO(&S&TO),DISP=(OLD,PASS)
//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)
//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=C
//ENVOUT DD DSN=AL68.USERLIB.ENV&TO(&S&TO),DISP=OLD
//CAMDUMP DD SYSOUT=C
//*
//<X$*>X EXEC PGM=XREF,REGION=120K,
//<X$*>       PARM='/ XREF&TO(&S.&M)'
//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR
//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)
//<X$*>TO DD DSN=AL68.USERLIB.XREF&TO(&S.&M),DISP=OLD
//<X$*>SYSPRINT DD SYSOUT=A
//*
//<Z$>I EXEC PGM=Z370<5$SAFE>,REGION=132K,COND=(8,LT,A68),TIME=(,5)
//<Z$>STEPLIB DD DSN=AL68.MOD,DISP=SHR
//<Z$>SYSIN DD DSN=&CODE&TO(&S&TO),DISP=(OLD,PASS)
//<Z$>SYSPRINT DD SYSOUT=C
//<Z$>SYSGO DD DSN=AL68.USERLIB.OBJ&TO(&NAME),DISP=OLD
//<Z$>CAMDUMP DD SYSOUT=C
//*
//<Z$>LKED EXEC PGM=IEWL,REGION=120K,COND=((8,LT,A68),(8,LT,I)),
//<Z$> PARM='SIZE=(999999,8K),LIST,NOMAP,NOXREF,RENT,NCAL,DCBS'
//<Z$>SYSLIN DD DSN=AL68.USERLIB.OBJ&TO(&NAME),DISP=SHR
//<Z$>       DD DDNAME=SYSIN
//<Z$>SYSLMOD DD DSN=AL68.MOD(&NAME),DISP=OLD
//<Z$>SYSPRINT DD SYSOUT=C
//<Z$>SYSUT1 DD UNIT=(DISC,SEP=(SYSLMOD,SYSLIN)),SPACE=(TRK,(5,5))
&
JUMP Z<Z$Z>
*Z*
FILE %H& AS &TEMP/MOD
//LKED EXEC PGM=IEFBR14,REGION=8K,TIME=(,1),COND=ONLY,PARM='&NAME'
&
*ZZ
FILE %H& AS &TEMP/MOD
// PEND
// EXEC FILE
//FROM DD DSN=AL68.SYS(ZLIB<6$SAFE>),DISP=SHR
//TO DD DSN=AL68.USERLIB.ENV<3>(ZLIB<6$SAFE>),DISP=OLD
//CODE DD DSN=AL68.USERLIB.ZCOD<3>,DISP=(MOD,<ZCODE$PASS>),
//        UNIT=DISC,SPACE=(TRK,(10,5,4)),
//        DCB=(RECFM=VB,LRECL=84,BLKSIZE=2498)
//<X$*>XREF DD DSN=&XREF,DISP=(NEW,PASS),UNIT=DISC,
//<X$*>        DCB=(RECFM=VB,LRECL=136,BLKSIZE=2498),SPACE=(TRK,(4,4))
//MACH EXEC XC,S=MACH,NAME='$MCH<8$<3>',M=<MACH$370>,
// OPTC='USING SYSTEM FROM "SYSENV(ZLIB<6$SAFE>)"'
//BASE  EXEC  XC,S=BASE,NAME='$BAS<8$<3>',
// OPTC='USING USER FROM "SYSENV(MACH<3>)"'
//REAL  EXEC  XC,S=REAL,NAME='$REA<8$<3>',
// OPTC='USING USER FROM "SYSENV(BASE<3>)"'
//CMPX  EXEC  XC,S=CMPX,NAME='$CPX<8$<3>',
// OPTC='USING USER FROM "SYSENV(REAL<3>)"'
/*EOF
&
SUBMIT &TEMP
./       ADD          NAME=CKXREF
SUBMIT %H!
/*JOB <U> <J>  CKXREF<2$<1>:A68C<SYSC>+Z370<SYST>
TURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>, ROUTE <R>
LIMSTORE150K,COMP10SECS,NOTIFY
PASSWORD <PWD$:>
<FAST$>
// EXEC A68C,PARMC='/USING USER FROM "SYSENV(BASE<SYSE>)"',
// SYSC=<SYSC>,SYST=<SYST>,SYSI=<SYSI>,
// SYSLIB='AL68.MOD',IDSN='AL68.SYS',SDSN='AL68.SYS',
// LOADSET='AL68.XREF.OBJ(XREF<3$<2>)',
// DISPT=OLD
//A68.SYSIN DD DSN=AL68.XREF.SOURCE(XREF<1>),DISP=SHR
//*
// EXEC LKED,NAMEL='AL68.MOD(XREF<2$<1>)',DISPL=OLD,CAL=CALL,CONDL='0,NE'
//LKED.OBJ DD DSN=AL68.XREF.OBJ,DISP=SHR
//LKED.SYSLIB DD DSN=AL68.MOD,DISP=SHR
//LKED.SYSIN DD *
 INCLUDE OBJ(XREF<3$<2>)
 ENTRY $A68INIT
./       ADD          NAME=CKZLIB
SUBMIT %H$
/*JOB <U> <J> ASMLINK LIBRARY
ROUTE <R>,CHAIN,TURNROUND <T>,PRIORITY <P>, POST <POST$<%USER>
COMP 30 SECS,PRINTER10K
MSGLEVEL=(<MSGL$0,0>)
PASSWORD <PWD$:>
<FAST$>
// EXEC PGM=IEBGENER,REGION=64K,TIME=(,1)
//SYSPRINT DD DUMMY
//SYSIN    DD DUMMY,DCB=BLKSIZE=80
//SYSUT1   DD *

SOURCE TXT <1>
       EDS <2>

MAKE   ZLIB <3>

//SYSUT2   DD SYSOUT=C   *** PRINTER OUTPUT CLASS ***
//*
//* TXT<1> + EDS<2> => $LIB<3$<2>
//*
//* PROCEDURES
//*
//* Notes:
//*
//* 1) BLKSIZES and space allocations are set up for 3330 discs.
//*
//* 2) SYSOUT=C may be replaced by SYSOUT=A, however, in HASP
//*    installations, SYSOUT=C will default to SYSOUT=A unless
//*    SYSOUT=C has been otherwise assigned.
//*
//* 3) The following data sets are assumed to be available:
//*
//*    AL68.ZLIB.TXT<1>  source as distributed,
//*    AL68.ZLIB.OBJ<3$<2>  PDS must be allocated to receive object
//*                      modules DCB=(RECFM=FB,LRECL=80,BLKSIZE=??)
//*    AL68.MOD          PDS must be already allocated to receive
//*                      load modules.
//*    (AL68.ZLIB.EDS<2> is not distributed as all edits have been
//*                      done.  The data set is not necessary, see
//*                      the EDIT procedure below.)
//*
//* EDIT: A distributed system is fully edited, so this procedure
//*       should be replaced by one (eg IEBGENER) to copy from "FROM"
//*       to "TO"
//*
//EDIT    PROC REG1=32K,OPT=,TRKS='5,5',MIN1=,SEC1=20,
//             COND1=,PRINT1='SYSOUT=C',
//             NAME=,TO='&&TEMP',DISP=OLD
//EDIT EXEC PGM=EDIT,REGION=&REG1,TIME=(&MIN1,&SEC1),
//             PARM='&OPT',COND=(&COND1)
//WORK     DD  UNIT=SYSDA,SPACE=(TRK,(&TRKS))
//VER      DD  &PRINT1
//FROM     DD  DISP=SHR,DSN=AL68.ZLIB.TXT<1>(&NAME)
//EDITS    DD  DISP=SHR,DSN=AL68.ZLIB.EDS<2>(&NAME)
//TO       DD  DISP=(&DISP,PASS),DSN=&TO
// PEND
//*
//* ASSEMBLE/LINKEDIT: ASSEMBLER(G)
//*
//ASMGCL  PROC TRKS='57,19',PRINTC='SYSOUT=C',TERMC='SYSOUT=C',
//             REGC=100K,MINC=,SECC=20,CONDC=,PUNCHC='DUMMY',
//             LOADC='ND,LD',LISTC='NL,TE,NUM,STMT',
//             RENTC=NR,ALGC=ALGN,OSC=OS,TESTC=NT,
//             XREFC='NX,NLR',BATCHC=NB,LCNTC=55,MISC=,
//             REGL=98K,MINL=,SECL=20,CONDL='4,LT,ASM',
//             PRINTL='SYSOUT=C',LISTL=LIST,MAPL=NOMAP,XREFL=NOXREF,
//             LETL=LET,CAL=NCAL,SIZEL='(999999,8K)',
//             NAMEL='AL68.MOD',DCBL=DCBS,BLKL=4096,ATTL=,
//             DISPL='(OLD,PASS)',SPACEL='(TRK,(8,3,8))',
//             NAME=
//*
//ASM     EXEC PGM=ASMGASM,
//        PARM=(&LOADC,&LISTC,&ALGC,&OSC,&RENTC,&TESTC,
//            'LC=&LCNTC',&XREFC,&BATCHC,&MISC),
//             REGION=&REGC,TIME=(&MINC,&SECC),COND=(&CONDC)
//STEPLIB  DD  DSN=S.WLIB,DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  DSN=&SYSUT1,UNIT=SYSDA,SPACE=(TRK,(&TRKS)),SEP=(SYSLIB)
//SYSUT2   DD  DSN=&SYSUT2,SPACE=(TRK,(&TRKS)),
//             UNIT=(SYSDA,SEP=(SYSUT1))
//SYSUT3   DD  DSN=&SYSUT3,SPACE=(TRK,(&TRKS)),
//             UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB))
//SYSPRINT DD  &PRINTC
//SYSTERM  DD  &TERMC
//SYSPUNCH DD  &PUNCHC
//SYSGO    DD  DSN=AL68.ZLIB.OBJ<3$<2>(&NAME),
//             SPACE=(TRK,(&TRKS)),DISP=(OLD,PASS),DCB=BLKSIZE=2480
//SYSIN    DD  DISP=(OLD,PASS),DSN=&&MACS
//         DD  DISP=(OLD,PASS),DSN=&&TEMP
//LKED    EXEC PGM=IEWL,
//      PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL',
//             REGION=&REGL,TIME=(&MINL,&SECL),COND=(&CONDL)
//SYSLIN   DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=&NAMEL,SPACE=&SPACEL,UNIT=SYSDA,DISP=&DISPL,
//             DCB=BLKSIZE=&BLKL
//SYSPRINT DD  &PRINTL
//SYSUT1   DD  DSN=&SYSUT1,SPACE=(TRK,(&TRKS)),
//             UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD))
//OBJ      DD  DISP=(OLD,PASS),DSN=AL68.ZLIB.OBJ<3$<2>
// PEND
//*
//* ASSEMBLE/LINKEDIT: ASSEMBLER(F)
//*
//ASMFCL  PROC TRKS='58,8',PRINTC='SYSOUT=C',TERMC='SYSOUT=C',
//             PRINTL='SYSOUT=C',REGC=70K,REGL=98K,
//             MINC=,SECC=20,MINL=,SECL=20,CONDL='8,LT,ASM',CONDC=,
//             LOADC='NODECK,LOAD',LISTC='NOLIST,TERM,NUM,STMT',
//             RENTC=NORENT,ALGC=ALGN,OSC=OS,TESTC=NOTEST,LCNTC=55,
//             OSC=OS,XREFC=NOXREF,
//             LISTL=LIST,MAPL=NOMAP,XREFL=NOXREF,LETL=LET,CAL=NCAL,
//             SIZEL='(999999,8K)',NAMEL='AL68.MOD',
//             DISPL='(OLD,PASS)',SPACEL='(TRK,(8,3,8))',
//             DCBL=DCBS,BLKL=4096,ATTL=,NAME=
//*
//ASM     EXEC PGM=IEUASM,
//        PARM=(&LOADC,&LISTC,&ALGC,&OSC,&RENTC,&TESTC,
//            &XREFC,'LINECNT=&LCNTC'),
//             REGION=&REGC,TIME=(&MINC,&SECC),COND=(&CONDC)
//STEPLIB  DD  DISP=SHR,DSN=SYS1.LINKMISC
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  DSN=&SYSUT1,UNIT=SYSDA,SPACE=(TRK,(&TRKS)),SEP=(SYSLIB)
//SYSUT2   DD  DSN=&SYSUT2,UNIT=SYSDA,SPACE=(TRK,(&TRKS))
//SYSUT3   DD  DSN=&SYSUT3,SPACE=(TRK,(&TRKS)),
//             UNIT=(DISC,SEP=(SYSUT2,SYSUT1,SYSLIB))
//SYSPRINT DD  &PRINTC
//SYSTERM  DD  &TERMC
//SYSGO    DD  DSN=AL68.ZLIB.OBJ<3$<2>(&NAME),UNIT=SYSDA,
//             SPACE=(TRK,(&TRKS)),DISP=(OLD,PASS),DCB=BLKSIZE=2480
//SYSIN    DD  DISP=(OLD,PASS),DSN=&&BCRMACS
//         DD  DISP=(OLD,PASS),DSN=&&MACS
//         DD  DISP=(OLD,PASS),DSN=&&TEMP
//LKED    EXEC PGM=IEWL,
//      PARM='SIZE=&SIZEL,&LISTL,&MAPL,&XREFL,&LETL,&ATTL,&CAL,&DCBL',
//             REGION=&REGL,COND=(&CONDL),TIME=(&MINL,&SECL)
//SYSLIN   DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=&NAMEL,UNIT=SYSDA,DISP=&DISPL,DCB=BLKSIZE=&BLKL,
//             SPACE=&SPACEL
//SYSPRINT DD  &PRINTL
//SYSUT1   DD  DSN=&SYSUT1,UNIT=(DISC,SEP=(SYSLIN,SYSLMOD)),
//             SPACE=(TRK,(&TRKS))
//OBJ      DD  DISP=(OLD,PASS),DSN=AL68.ZLIB.OBJ<3$<2>
// PEND
//*
//* ALLOCATE TEMPORARY DATA SETS
//*
//ALLOC EXEC PGM=IEFBR14,    STANDARD IBM "DO NOTHING" PROGRAM
//           REGION=8K,TIME=(,1)
//TEMP   DD  DSN=&&TEMP,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(16,1)),
//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)
//MACS    DD DSN=&&MACS,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1)),
//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)
//BCRMACS DD DSN=&&BCRMACS,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1)),
//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=2480)
//*
//* BCR MACROS FOR ASSEMBLER(F)
//*
//BCRMACS EXEC EDIT,NAME=BCRMACS,TO='&&BCRMACS'
//*
//* MACROS
//*
//EDMACS EXEC EDIT,NAME=MACS,TO='&&MACS'
//*
//* BASIC MACHINE CODE LIBRARY
//*
//EDZLIB EXEC EDIT,NAME=ZLIB
//*
//ASMZLIB EXEC ASM<ASM$G>CL,NAME=ZLIB,
//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'
//LKED.SYSIN DD *
 CHANGE ZLIB($LIB<3$<2>)
 INCLUDE OBJ(ZLIB)
 NAME $LIB<3$<2>(R)
//*
//* FORTRAN INTERFACE
//*
//EDFORT EXEC EDIT,NAME=FORT
//*
//ASMFORT EXEC ASM<ASM$G>CL,NAME=FORT,<FORT$NAMEL='&&GOSET',DISPL=MOD,>
//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'
//LKED.SYSIN DD *
 INCLUDE OBJ(FORT)
 ALIAS $$$$0040  SIN
 ALIAS $$$$0041  COS
 ALIAS $$$$0042  TAN
 ALIAS $$$$0043  ARCSIN
 ALIAS $$$$0044  ARCCOS
 ALIAS $$$$0045  ARCTAN
 ALIAS $$$$0046  LN
 ALIAS $$$$0047  EXP
 ALIAS $$$$0048  SQRT
 NAME $FOR<3$<2>(R)
//*
//* RANDOM ROUTINES
//*
//EDRAND EXEC EDIT,NAME=RAND
//*
//ASMRAND EXEC ASM<ASM$G>CL,NAME=RAND,<RAND$NAMEL='&&GOSET',DISPL=MOD,>
//             LISTC='<LIST$NOLIST,TERM,STMT,NUM' >',PRINTC='SYSOUT=A'
//LKED.SYSIN DD *
 INCLUDE OBJ(RAND)
 ALIAS $$$$0073 GETRANDOM
 ALIAS $$$$0074 SAVERANDOM
 ALIAS $$$$0075 CHANGERANDOM
 ALIAS $$$$0076 RANDOM
 NAME $RAN<3$<2>(R)
./       ADD          NAME=CKZ370
SUBMIT %H&
/*JOB <U> <J> CKZ<3>(<4$SAFE>+<5$SAFE>)
PRIORITY <P>,TURNROUND <T>,ROUTE <R>,POST <POST$<%USER>
COMP 40,PRINTER 20K,CHAIN,LIMSTORE 150K
PASSWORD <PWD$:>
<FAST$>
//*
//XC PROC CSYS=<4$SAFE>,TO=<3>,SRCE=<1>,EDS=<2>,TSYS=<5$SAFE>
//E EXEC PGM=EDIT,REGION=32K,PARM='v-ÂPS TSAS PH/.Z370.NEW&EDS(&S)/'
//TSAS DD SYSOUT=A
//VER DD SYSOUT=C
//WORK DD UNIT=DISC,SPACE=(TRK,(4,4))
//FROM DD DSN=AL68.Z370.TXT&SRCE(&S),DISP=SHR
//TO DD DSN=&&TEMP,DISP=(NEW,PASS),UNIT=DISC,
//      SPACE=(TRK,(4,4))
//EDITS DD DSN=AL68.Z370.EDS&EDS(&S),DISP=SHR
//*
//A68 EXEC PGM=A68C&CSYS,REGION=150K,TIME=(,10),
//         PARM='&PARMC'
//STEPLIB DD DSN=AL68.MOD,DISP=SHR
//INIT DD DSN=AL68.SYS(INIT<7$SAFE>),DISP=SHR
//SYSENV DD DDNAME=ENV<8$>
//ENV DD DSN=AL68.SYS,DISP=SHR
//ENV<8$A> DD DSN=AL68.USERLIB.ENV<8$DUMMY>,DISP=SHR
//ENVIN DD DSN=AL68.Z370.ENV&TO,DISP=SHR
//CODE DD DSN=&CODE,DISP=(OLD,PASS)
//<X$*>XREF DD DSN=&XREF,DISP=(OLD,PASS)
//SYSIN DD DSN=&TEMP,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=C
//ENVOUT DD DSN=AL68.Z370.ENV&TO(&S),DISP=OLD
//CAMDUMP DD SYSOUT=C
//*
//<X$*>X EXEC PGM=XREF,REGION=120K,
//<X$*>    PARM='/ XREF&TO(&S)'
//<X$*>STEPLIB DD DSN=AL68.MOD,DISP=SHR
//<X$*>FROM DD DSN=&XREF,DISP=(OLD,PASS)
//<X$*>TO DD DSN=AL68.Z370.XREF&TO(&S),DISP=OLD
//<X$*>SYSPRINT DD SYSOUT=A
//*
//<LT$*>MC EXEC PGM=MC,REGION=56K,COND=EVEN,
//<LT$*>       PARM='"&S ZCODE",L60,W132,S2,'
//<LT$*>FROM DD DSN=&CODE,DISP=SHR
//<LT$*>TO DD SYSOUT=A
//TRAN EXEC PGM=Z370&TSYS,REGION=132K,COND=(4,LT,A68)
//STEPLIB DD DSN=AL68.MOD,DISP=SHR
//SYSIN DD DSN=&CODE,DISP=(OLD,PASS)
//SYSPRINT DD SYSOUT=C
//SYSGO DD DSN=AL68.Z370.OBJ&TO(&S),DISP=OLD
//CAMDUMP DD SYSOUT=C
// PEND
// EXEC NULL
//CODE DD DSN=&CODE,UNIT=DISC,DISP=(NEW,PASS),SPACE=(TRK,(4,4)),
//        DCB=VB
//<X$*>XREF DD DSN=&XREF,UNIT=DISC,DISP=(NEW,PASS),SPACE=(TRK,(4,4)),
//<X$*>        DCB=VBL
//SYS EXEC XC,S=SYS,PARMC='/USING USER FROM "SYSENV(MACH<6$SAFE>)"'
//A EXEC XC,S=A
//R EXEC XC,S=R
//B EXEC XC,S=B
//G EXEC XC,S=G
//Q EXEC XC,S=Q
//C EXEC XC,S=C
//P EXEC XC,S=P
//LK EXEC LKED,DISPL=OLD,CAL=CALL,ATTL=OVLY,CONDL='(4,LT)'
//SYSLIN DD *
 INCLUDE OBJ(SYS,A)
 OVERLAY ONE
 INCLUDE OBJ(B,G,Q,R)
 OVERLAY ONE
 INCLUDE OBJ(C,P)
 ENTRY $A68INIT
 NAME Z370<3>(R)
//SYSLMOD DD DSN=AL68.MOD
//SYSLIB DD DSN=AL68.MOD,DISP=SHR
//OBJ DD DSN=AL68.Z370.OBJ<3>,DISP=SHR
&
./       ADD          NAME=LKA68C
SUBMIT %H&
/*JOB <U> <J> LKA68C<3$<1>
PRIORITY <P>, TURNROUND <T>, ROUTE <R>, POST <POST$<%USER>
COMP 10
MSGLEVEL=(0,0)
PRINTER 20K,NOTIFY,CHAIN,LIMSTORE 120K
PASSWORD <PWD$:>
<FAST$>
// EXEC FILE
//FROM DD *
MAKE    A68C <3$<1>
/*
//TO DD SYSOUT=C
//*
//*
//LKED EXEC LKED,DISPL=OLD,MAPL='NOMAP,OVLY',REGL=120K,CAL=CALL
//SYSLIN DD *
 INCLUDE OBJ(SYS,M1,S1)
 OVERLAY ONE
 INCLUDE OBJ(Y1,EBCDIC,N1,T1,Z1,R1,I1,L1,K1,P1,Q1)
 OVERLAY ONE
 INCLUDE OBJ(D2)
 OVERLAY TWO
 INCLUDE OBJ(R2,M2,P2,T2,E2,I2,S2,X2,B2)
 OVERLAY TWO
 INCLUDE OBJ(A3)
 OVERLAY THREE
 INCLUDE OBJ(P3,M3,Q3,G3,O3,R3,E3,B3,U3,F3,S3,C3,K3,D3)
 OVERLAY THREE
 INCLUDE OBJ(D4)
 ENTRY $A68INIT
 NAME A68C<3$<1>(R)
//SYSLMOD DD DSN=AL68.MOD
//SYSLIB DD DSN=AL68.MOD,DISP=SHR
//OBJ    DD DSN=AL68.A68C.OBJ<3$<1>,DISP=SHR
&
./       ENDUP
