385. A68C

"a AT b" parses as ":a AT b" whereas it should be "a: AT b", and
similarly for "a @ b".



384. A68C  (fixed in Release 1)

A routine delivering PROC VOID is not always elaborated correctly.



383. XREF  (fixed in XREF version 107)

Prints one character more than it reads in the heading title.



382. (empty entry)




381. A68C

There is no runtime test (yet) for the sign of the by-part and no
error or warning message (part of "variable by-part not yet
implemented").



380. A68C  (fixed in version 247)

Incorrect code is sometimes generated if all registers are in use.



379. A68C

No error message is generated if a call delivers void in a nonvoid
context.



378. A68C

If a for-loop has no FOR or TO parts, the FROM and BY parts are not
elaborated.



377. Z370

Should check for the modifier register being legal.



376. (This entry is empty)



375. Distribution job (fixed at level 247/119/107/127)

Message IEF611I occurs intermittently.



374. 370 library

When allocating space for the stack, only multiples of 2k should be
freed.



373. A68C  (fixed in version 246)

Dynamic stack management is incorrect if there is more than a single
range using the dynamic stack in any routine (or in the 'main program').



372. (This entry is empty)



371. (This entry is empty)



370. (This entry is empty)



369. (This entry is empty)



368. (This entry is empty)



367. A68C

â1:0ä should properly allocate a new name with dummy elements.



366. Z370 (fixed in version 119)

The 370 translator ignores the first record.



365. A68C (fixed in version 246)

A radix denotation lacking digits after the radix symbol is not faulted
in the lexical analysis.



364. A68C (fixed in version 246)

"." should not be legal within tags.



363. A68C

Displacement combined with widening is completely broken: e.g.

     REAL x := 1.0, y; y := x +:=:= 3

y will not be 1.0.



362. A68C

No error message (not implemented message) is generated for attempts
to copy rows.



361. ZLIB (Fixed in version 127)

'sysfileopen' yielded TRUE after open failed.



360. A68C

Brief heap declarations will only work for row modes; i.e.

    HEAP INT tag;

or

    HEAP INT tag :=

will not work, but

    REF INT tag = HEAP INT;

or

    REF INT tag = HEAP INT :=

will work.



359. ZCODE definition

It is not clear whether zcode registers 0 and 1 are legal when used
as real registers.  Certainly Z370 will not allow this usage.



358. A68C ((temporary) fixed in version 245)

Conditionals will not yield a nonslaveable result to an explicit
destination. e.g.

     PROC p = STRUCT(INT a,b): IF b THEN (1,2) ELSE .... FI;



357. A68C

Postmortem routine will loop in segment A below:

    ((MODE M = STRUCT(REF M); SKIP) ENVIRON A)



356. A68C (fixed in version 246)

A program consisting of tag STROP leaves the tree corrupted giving
rise to "system error" and "consult expert" messages.



355. A68C

There is no check that a serial does not end with a declaration; thus

    AMODE a = ( SKIP; AMODE b = c)

is not faulted.



354. A68C

The error "IF ... THEN ... FI cannot be coerced to ..." should be a
warning message only as it is formally equivalent to
IF ... THEN ... ELSE SKIP FI.



353. A68C

VOID tag = SKIP; is not faulted.  No VOID identity definitions or
declarations are legal.



352. (see 360)



351. A68C (Fixed in version 244)

If prefix-quote stropping was used, no radix-symbol or exponent-
symbol was legal.



350. ZLIB  (Fixed in version 127)

ELEM(INT,BITS)BOOL completely broken.



349. A68C

REAL row displays are not allowed (giving rise to "non-constant row
display" message).



348. ZLIB   (Fixed in ZLIB/127)

print(max real) gives abend0CC.



347. A68C (Fixed in version 244)

Coercion error message "CASE not allowed in ... context" should be
"CODE not allowed in ... context".



346. Z370 (error message produced in version 118)

R1 may be used twice as work register in the A0 instruction leading
to incorrect results (e.g. MVC 0(X,R1),0(R1) ).



345. Z370/A68C

REFâäAMODE := NIL generates A0 0 N x y a b.  NIL is not yet implemented
in this position.



344. A68C (Fixed in version 244)

AMODE a := b, c = d; error recovery faulty, leaves mode=0.

(Also fixed is "HEAP AMODE a, b, c;", b and c were not on the heap.)



343. A68C (Fixed in version 244)

(a:b) when used to slice is analysed as label a:. But âa:bä is ok.



342. DISTRIB (ZLIB/127 is reentrant)

360/370 distribution - ZLIB should be linkedited as REUS not RENT.



341. A68C

Slicing with empty lower-bound-option should give a "not implemented"
message instead of using the value 1.



340. (empty)



339. ZLIB/360 and its environment (Fixed in version 127)

'sysreflectline' should yield a BOOL indicating if the output line is ok.



338. USERLIB (Fixed in version 107)

'printwhole' should find a line of sufficient width.



337. ZLIB/360    (Fixed in version 127)

Concatenation of unlike record formats not handled correctly.



336. ZLIB/360    (Fixed in version 127)

TSO terminal input gives ABEND0C4.  QSAM/TGET interface leaves junk
in top byte of R1 after GET/LOCATE.  Fix by adding LA R1,0(R1) after
GET macro in GETLINE subroutine.  For safety, the analagous thing
should be done for PUT.



335. Z370 (Fixed in version 118)

FRPT gives the wrong result.



334. A68C (Fixed in version 244)

Cannot use intersegment jumps.  A negative number is output in an
environment file for a label and is not read back in correctly.



333. A68C (Fixed in version 244)

Error messages should not use "â", "ä" because of character set
inconsistencies between Cambridge EBCDIC and IBM EBCDIC.



332. A68C (Fixed in version 244)

Runtime error message without compiler diagnostic occurs if there is
an empty parameter in a call.



331. ZLIB/360    (Fixed in version 127)

RECFM=UA with explicit BLKSIZE and LRECL output adds an extra blank to
every line and also appends X'00' to the end of a null line.



330. ZLIB/360    (Fixed in version 127)

'sysreadcc' does not yield false at end of file.



329. ZLIB/360    (Fixed in version 127)

RECFM=UA with default BLKSIZE and LRECL is treated as VBA.



328. ZLIB/360    (Fixed in version 127)

RECFM=VA or V gives ABEND013-20 if default BLKSIZE and LRECL are used.



327. A68C (Fixed in version 244)

Phases 2 and 3 are entered after a parser collapse.  Parser collapses
should not go to label 'parser exit' in S1.


Errors for A68C243, Z370117, USERLIB106, ZLIB(360)126 above.
===========================================================



325. A68C

Proceduring of 'GOTO x' is in the reference manual but is not implemented.



324. A68C

Uniting, rowing, and widening CHAR to STRING is needed in phase 3.



321. A68C

Loop in 'operate' on programs such as 'REAL r;print(INT(r)<<4)'



320. Z370

'maxint>-3' yields FALSE on the 370.  This is a consequence of the
compiler generating a subtract to do the comparison, and the
translator does not optimise.  If maxint were set to 2**30-1 instead
of 2**31-1, the problem would not arise.   This will be fixed with
the proposed new ZCODE.



310. A68C

'AMODE tag = SKIP' causes junk to output to an environment file.
See also 256.



298. A68C

Declarations of the form 'â1:2 AT 3äAMODE x' should be faulted.



291. A68C

'MODE X = â1:1ä INT' is not faulted when written to environment and
does not subsequently work.



290. A68C

Error recovery should construct operator definitions where necessary.



270. A68C

Bound scanning for e.g. STRUCT(âäINT a,b) does not work.



256. A68C

SKIP in a strong PROC VOID context produces bad code.



209. A68C

WHILE serial is not implemented - use WHILE unit instead.



The above errors are pending from earlier.
==========================================


These error reports are in reverse chronological sequence for ease
of reference.  Each entry will be marked with the version number when
the bug was corrected, except that those entries in the pending group
will be removed when fixed.
