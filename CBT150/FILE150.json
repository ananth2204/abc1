{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011343000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE150.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE150.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xa4\\x8e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x14\\x00\\x00\\x01\\x14\\x00\\x04\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INDEX": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*\n* REFER: D061001.DIALOG.IDTF($$INDEX)\n* REF  : MARK DIEHL - HERCULES/ALLEGANY BALLISTICS LAB 304-726-5140/5343\n* DOC  : MASTER INDEX TO THE \"AUTOMATED TSO/E IDTF\" DIALOG.\n*\n*      : PLEASE TAKE A MOMENT TO REVIEW THE FOLLOWING LIST OF MEMBERS\n*        AND THEIR RESPECTIVE DESCRIPTIONS SO AS TO GET A FEEL FOR THE\n*        MEMBERNAME NOMENCLATURE USED. FOR EXAMPLE, MEMBERS BEGINNING\n*        WITH 'P' INDICATE AN ISPF PANEL; 'C' PREFIX = CLIST; 'M' PREFIX\n*        = MESSAGES.\n*\n*      : CONTINUE BY READING MEMBER $OVRVIEW THEN MEMBER $INSTALL\n\n\nMEMBERNAME                 DESCRIPTION\n\n$$INDEX   APPLICATION MASTER INDEX (EQU *)\n$INSTALL  APPLICATION INSTALLATION OVERVIEW\n$MRMCBT   IEBCOPY TO CREATE TAPE CONTAINING ENTIRE TRANSMIT DIALOG\n$SAMPLE   SAMPLE IDTF SCREEN AS PRESENTED TO THE USER\nN/A       MAKE APPROPRIATE MODS TO A UTILITY SELECTION PANEL\nCMT       CLIST    -MAIN DRIVER CLIST\nMMTV01    MESSAGES\nNICKNAME  PROTOTYPE NICKNAME FILE\nPMT       PANEL    -PRIMARY (AND ONLY) USER PANEL\nPMTDESTT  PANEL    -DESTINATION        (TUTORIAL)\nPMTDSNT   PANEL    -DATASET NAME       (TUTORIAL)\nPMTLOGT   PANEL    -LOG PROCESSING     (TUTORIAL)\nPMTMAINT  PANEL    -TABLE OF CONTENTS  (TUTORIAL)\nPMTOPTT   PANEL    -OPTIONAL OPERANDS  (TUTORIAL)\nPMTOVERT  PANEL    -DIALOG OVERVIEW    (TUTORIAL)\nPMTRECVT  PANEL    -RECEIVE PROCESSING (TUTORIAL)\nPMTREC2T  PANEL    -RECEIVE CONTINUED  (TUTORIAL)\nPMTREC3T  PANEL    -RECEIVE CONTINUED  (TUTORIAL)\nPMTREC4T  PANEL    -RECEIVE CONTINUED  (TUTORIAL)\nTSOHELP   SYSHELP  -MODIFIED TSO \"HELP\" MEMBERS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*\n* REFER: D061001.DIALOG.IDTF($INSTALL)\n* DOC  : MASTER INDEX TO THE \"AUTOMATED IDTF\" (ISPF) DIALOG.\n*      : MARK DIEHL - HERCULES/ALLEGANY BALLISTICS LAB 304-726-5140/5343\n*\n*      : THIS MEMBER CONTAINS INSTALLATION GUIDELINES.\n*        ALL DIALOG COMPONENTS ARE CONTAINED IN THE PDS WHICH YOU ARE\n*        CURRENTLY ACCESSING.  TO STORE EACH COMPONENT IN IT'S PROPER\n*        PRODUCTION LIBRARY, SIMPLY REPLACE THE FIRST CHARACTER OF EACH\n*        MEMBER NAME WITH AN 'X' DURING COPY OPERATION. THIS WILL EFFECT\n*        A MEMBER NAME THAT IS PREFIXED 'XMT' FOR EACH MEMBER THAT IS\n*        \"FARMED OUT\" INTO IT'S APPROPRIATE PRODUCTION LIBRARY TYPE.\n*        FOR EXAMPLE, MEMBER CMT INDICATES, BY VIRTUE OF THE FIRST\n*        CHARACTER BEING \"C\" (AKA \"CLIST\"), THAT IT SHOULD BE STORED\n*        INTO A SYSPROC LIBRARY TYPE AS MEMBER NAME XMT.  THIS\n*        TECHNIQUE IS USED SO AS TO ALLOW A CONSISTENT  3 CHARACTER\n*        \"APPLID\" (\"XMT\") ACROSS ALL ISPF/PDF LIBRARIES AS WELL AS\n*        ALLOWING THE STORAGE OF ALL APPLICATION COMPONENTS INTO ONE\n*        COMMON (NON-PRODUCTION) PDS.  THIS TECHNIQUE PERMITS THE\n*        \"INSTANT\" INSTALL OF THE APPLICATION WITHOUT HAVING TO MAKE ANY\n*        CHANGES TO THE ACTUAL MEMBERS.  ALL VARIABLE POOL VARIABLE\n*        NAMES HAVE ALSO BEEN PREFIXED \"XMT\".  NOTE THAT TUTORIAL PANEL\n*        MEMBER NAMES ALWAYS END WITH CHAR \"T\".\n*\n*      : ALLOCATE A MODEL NICKNAMES DATASET AND MODIFY CLIST \"XMT\"\n*        ACCORDINGLY.\n*\n*      : MEMBER $SAMPLE CONTAINS THE IDTF SCREEN AS SEEN BY THE USER\n*\n*      : REVIEW PANEL MEMBERS SUFFIXED \"T\" (TUTORIALS) FOR A FUNCTIONAL\n*        OVERVIEW OF THIS APPLICATION.\n*\n*      : REVIEW MEMBER TSOHELP. IT CONTAINS A MODIFIED VERSION OF THE\n*        IBM DEFAULT 'SYS1.HELP' FOR BOTH THE TRANSMIT AND RECEIVE\n*        COMMANDS.  YOU MUST RETROFIT THESE MODIFIED HELP TEXTS INTO\n*        PREFERABLY YOUR SITE'S OWN HELP PDS.  THIS IS NOT A REQUIRED\n*        INSTALL STEP BUT IT DOES LEND ITSELF NICELY TO THE VIEW OF\n*        IDTF THAT IS PRESENTED TO THE USER VIA THIS DIALOG.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$MRMCBT": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//D061001X JOB (00000000,06009,20,99),'CREATE CBT TAPE',MSGCLASS=Q\n/*JOBPARM N=2\n//*\n//* REF: D061001.DIALOG.IDTF($MRMCBT)\n//* DOC: LOAD ABL'S IDTF UTILITY COMPONENTS TO TAPE FOR SHIPMENT\n//*      TO CBT (TO BE INCLUDED ON THE CBT MODS TAPE).\n//*\n//*    : INCLUDE MEMBER $OVRVIEW AS CBT \"FILE OVERVIEW\" PROSE\n//*\n//IDTF EXEC  PGM=IEBCOPY,TIME=1439,REGION=1024K\n//SYSPRINT DD SYSOUT=*\n//O      DD DISP=(,KEEP),\n// UNIT=TAPES,LABEL=(1,NL),VOL=(,RETAIN,,SER=ABLCBT),\n// DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040)\n//I      DD DISP=SHR,DSN=D061001.DIALOG.IDTF\n//SYSUT3  DD UNIT=SYSDA,SPACE=(CYL,(1))\n//SYSUT4  DD UNIT=SYSDA,SPACE=(CYL,(1))\n//SYSIN   DD *\n C I=I,O=O\n/*\n//TAPEMAP  EXEC PGM=TAPEMAP,PARM=CHECK\n//STEPLIB  DD  DISP=SHR,DSN=D061001.LOAD\n//SYSUT1   DD  VOL=SER=ABLCBT,UNIT=TAPES,DISP=SHR,LABEL=(,BLP)\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$NOTES": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* REF: D061001.DIALOG.IDTF($NOTES)\n* DOC: MISC. APPLICATION DEVELOPMENTAL NEEDS/USAGE NOTES\n*    : MARK DIEHL - HERCULES/ALLEGANY BALLISTICS LAB 304-726-5140/5343\n*\n_ Dialog Improvements\n\n  _ Please critique this dialog and phone me with your comments!\n\n  _ Change next version to skip the \"DATA\" screen when MSG specified\n\n_ Note the driving clist for this dialog utilizes the clist trapping\n  capability to enable improved dynamic message notification (i.e. the\n  targeted user(s) are notified immeidately of any data transmitted to\n  them, instead of waiting until the next RECEIVE command).  While this\n  technique makes the use of TRANSMIT more user friendly, it can also\n  cause a lock-up of the TRANSMIT command during instances where a\n  user response is needed because the trap \"hides\" this from the user.\n  (%XMT DEBUG(DEBUG) ERRCHK(YES) exposes (\"debugs\") these conditions).\n  Anyone with an alternative to this problem, please share!\n\n  _ Re-consider messages generated during XMIT (i.e., quantity)\n\n  _ Implement JES exit for cross-domain event notification\n\n  _ Map RACF ID's/NAMES into a nickname model\n\n  _ Respond to TSO/E User's Guide Readers Comment Form mailed on 8/3/89\n    _ TSO/E could use some IDTF-specific variables.\n    _ Need access to NAMES.TEXT via clists\n    _ IBM needs their own ISPF interface for IDTF\n    _ IDTF needs live notification of XMIT cross-domain via JES exit\n    _ IDTF has potential for excellent TSO \"E-MAIL\"!\n    _ LOG.MISC needs refined (dsorg=ps \"wrap-around\" when full?)\n\n_ Re-write Newsletter section (Emphasize E-MAIL capabilities)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$OVRVIEW": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " *\n * REF: D061001.DIALOG.IDTF($OVRVIEW)\n * DOC: OVERVIEW: AUTOMATED (ISPF) INTERACTIVE DATA XMISSION FACILITY\n *    : MARK DIEHL - HERCULES/Allegany Ballistics Lab 304-726-5140/5343\n *\n *    The \"TRANSMIT/RECEIVE\" utility is an IDPF/PDF-based dialog that\n *    automates the use of TSO/E's IDTF commands \"TRANSMIT\" & \"RECEIVE\".\n *    It was developed under TSO/E V1.3, and ISPF/PDF v2.2.\n *\n *    From one panel, the casual user can initiate data transfer without\n *    having to know much detail about command operands but also the\n *    capability is provided  for the experienced IDTF user to really\n *    make data dance.  NICKNAME processing capability is provided. For\n *    new IDTF users, NICKNAME usage is assisted by the automatic\n *    creation of a prototype nicknames dataset, complete with\n *    customization instructions contained within.  IDTF LOG and RECEIVE\n *    processing is available from the same PANEL. As an added extra,\n *    provided that data is transmitted from same-node to same-node, a\n *    friendly TSO message (via the old TSO \"SEND\" cmd) notifies the\n *    targeted user(s) of incoming data. This dynamic notification\n *    occurs even if transmitting to individual or group nicknames (each\n *    user in a group will be sent a \"data has been transmitted to\n *    you\" message). Of course, tutorial panels are included.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$SAMPLE": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n---------  TRANSMIT/RECEIVE DATA WITHIN HERCULES' MAINFRAME NETWORK  ---------\nCOMMAND ===>\n\n                                                               TIME  - 08:06\n\n DESTINATION: (Supply either  NICKNAME(s) or a NODE & USERID )\n\n  NICKNAME ===>                             (Enter NAMES in the NICKNAME field\n                                             to view/edit your nicknames file)\n  NODE =======>\n    &\n   USERID ====>\n\n DATASET NAME  ========>\n\n OPTIONAL OPERANDS  ===>\n\n -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -\n LOG processing =======>         (Enter B to Browse LOG, E to Edit)\n\n RECEIVE processing ===>         (Enter R to RECEIVE any data sent to you)\n\nPress PF1 for assistance (or enter the HELP command)\nPress PF3 to exit this screen\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CMT": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG() CMDDSN() CMDDATA(MESSAGE) OPTMEMS() BADNICK(NO) +\n       ERRCHK(NO)\n/* REF: ABL.CMDPROC(XMT)\n/* DOC: AUTOMATE THE USE OF TSO/E'S IDTF FUNCTION VIA ISPF/PDF DIALOG\n/*    : REFER TO PRODUCTION PANEL MEMBERS PREFIXED \"XMT\" FOR ADDT'L INFO\nCONTROL MAIN MSG NOLIST PROMPT\nIF &DEBUG = DEBUG THEN +\n   CONTROL MAIN MSG LIST SYMLIST CONLIST PROMPT\nISPEXEC VGET (XMTNICK XMTNODE XMTUSER XMTDSN +\n        XMTOPT XMTLOG XMTRECV) PROFILE\nREDISPLA: +\nISPEXEC DISPLAY PANEL(XMT)\nIF &LASTCC = 8 THEN +\n DO\n   /* USER ENTERED END COMMAND  FROM PANEL */\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC VPUT (XMTNICK XMTNODE XMTUSER XMTDSN +\n           XMTOPT XMTLOG XMTRECV) PROFILE\n   SE '#ABLUTIL: IDTF UTILITY INVOKED ON &SYSDATE BY ',CN(01)\n   EXIT CODE(0)\n END\n/*\n/*      PROCESS LOG FILE IF REQUESTED ON PANEL\n/*\nPROCESS: +\nIF &XMTLOG \u00ac=  THEN +\n DO\n  /* FIRST CHECK IF LOG FILE EXISTS\n  IF &SYSDSN('&SYSUID..LOG.MISC') NE OK THEN +\n     DO\n      /* LOG FILE DOES NOT EXIST. RE-DISPLAY PANEL AND WARN USER\n      /* EVEN THOUGH THEY MAY HAVE SELECTED ADDITIONAL OPTIONS WHICH\n      /* COULD BE PROCESSED INDEPENENT OF LOG PROCESSING (\"NAMES\" E.G.)\n      ISPEXEC SETMSG MSG(XMTV019B)\n      SET &XMTLOG =\n      ISPEXEC VPUT (XMTLOG) PROFILE\n      GOTO REDISPLA\n     END\n  IF &XMTLOG = B THEN +\n    DO\n     /* RESET LOG PROCESSING OPTION TO NULL & BROWSE LOG FILE  */\n     SET &XMTLOG =\n     ISPEXEC VPUT (XMTLOG) PROFILE\n     ISPEXEC BROWSE DATASET('&SYSUID..LOG.MISC')\n     IF &LASTCC = 12 THEN +\n       DO\n         /* LOG FILE IS EMPTY. AGGRESSIVE EDITTING PERHAPS!  */\n         ISPEXEC SETMSG MSG(XMTV019B)\n         GOTO REDISPLA\n       END\n     /*\n     /* WE'RE FINISHED BROWSING THE LOG FILE.\n     /* REDISPLAY PANEL IF NICKNAME AND/OR NODENAME WERE BLANK\n     /* AND RECEIVE PROCESSING WASN'T REQUESTED EITHER.\n     /*\n     IF &STR(&XMTNICK) = THEN +\n      DO\n       IF &XMTNODE = THEN +\n        DO\n           IF &XMTRECV = THEN GOTO REDISPLA\n        END\n      END\n    END\n  IF &XMTLOG = E THEN +\n    DO\n     /* RESET LOG PROCESSING OPTION TO NULL & EDIT LOG FILE  */\n     SET &XMTLOG =\n     ISPEXEC VPUT (XMTLOG) PROFILE\n     ISPEXEC EDIT DATASET('&SYSUID..LOG.MISC')\n     /* CONSIDER HANDLING EDIT ERRORS HERE\n      /*\n      /* REDISPLAY PANEL IF NICKNAME AND/OR NODENAME WERE BLANK\n      /* AND RECEIVE PROCESSING WASN'T REQUESTED EITHER.\n      /*\n      IF &STR(&XMTNICK) = THEN +\n       DO\n        IF &XMTNODE = THEN +\n         DO\n           IF &XMTRECV = THEN GOTO REDISPLA\n         END\n       END\n    END\n END\n/*\n/*  ISSUE RECEIVE COMMAND FOR USER, IF REQUESTED\n/*\nIF &XMTRECV \u00ac=  THEN +\n  DO\n    RECEIVE\n    IF &LASTCC GT 4 THEN ISPEXEC SETMSG MSG(XMTV018B)\n    SET &XMTRECV =\n    ISPEXEC VPUT (XMTRECV) PROFILE\n    IF &STR(&XMTNICK) = THEN GOTO REDISPLA\n  END\n/*\n/* IF A NICKNAME WAS SPECIFIED, DO NOT CHECK FOR A VALID USERID PREFIX\n/*\nIF &STR(&XMTNICK) \u00ac= THEN +\n  DO\n   /* CHECK IF USER WANTS TO EDIT THEIR NICKNAMES FILE (NAMES.TEXT)\n   /*\n   IF &STR(&XMTNICK) = NAMES THEN +\n     DO\n        /*\n        /* CHECK TO SEE IF NICKNAMES FILE EXISTS. ALLOC & PRIME IF NOT.\n        /*\n        IF &SYSDSN('&SYSUID..NAMES.TEXT') NE OK THEN +\n          DO\n           ALLOC DA('&SYSUID..NAMES.TEXT') NEW CATALOG SP(1 0) TRACKS +\n                RECFM(F B) LRECL(150) BLKSIZE(30000)\n           IF &LASTCC NE 0 THEN +\n             DO\n               ISPEXEC SETMSG MSG(XMTV019A)\n               GOTO REDISPLA\n             END\n           COPY 'ABL.IDTF.NAMES.TEXT.MODEL' '&SYSUID..NAMES.TEXT'\n           IF &LASTCC NE 0 THEN +\n             DO\n               ISPEXEC SETMSG MSG(XMTV015C)\n               GOTO REDISPLA\n             END\n          END\n        ISPEXEC EDIT DATASET('&SYSUID..NAMES.TEXT')\n        /* CONSIDER HANDLING EDIT ERRORS HERE\n        GOTO REDISPLA\n      END\n   /*\n   /* NICKNAME FILE EDITING NOT SPECIFIED.  PROCESS AS REAL NICKNAME.\n   /*\n   GOTO NOPREFIX  /* DON'T DO USERID PREFIX VALIDATING  */\n  END\n/*\n/* A NICKNAME WAS NOT REQUESTED. MAKE SURE A NODE WAS SPECIFIED.\n/*\n  IF &XMTNODE =  THEN +\n    DO\n      IF &XMTLOG \u00ac= THEN GOTO EXIT /* USER ONLY ASKED FOR LOG PROCESSING\n      /* GO BACK AND GET NODE INFO\n      ISPEXEC SETMSG MSG(XMTV019D)\n      GOTO REDISPLA\n    END\n  /* A NODE WAS SPECIFIED.  MAKE SURE USERID WAS ALSO SPECIFIED.\n  IF &XMTUSER = THEN +\n     DO\n       /* GO BACK AND GET USERID INFO\n       ISPEXEC SETMSG MSG(XMTV019E)\n       GOTO REDISPLA\n     END\n  /* NOW WE KNOW NODE AND USERID.   CONTINUE.\n  IF &XMTNODE \u00ac= ABL THEN +\n     DO\n       /* USERIDS ON NON-ABL NODES MUST BEGIN WITH \"T\"\n       IF &SUBSTR(1,&XMTUSER) \u00ac= T THEN +\n          DO\n            ISPEXEC SETMSG MSG(XMTV017)\n            GOTO REDISPLA\n          END\n     END\n   ELSE +\n     DO\n       /* USERIDS ON ABL NODES MUST BEGIN WITH \"D\"\n       IF &SUBSTR(1,&XMTUSER) \u00ac= D THEN +\n          DO\n            ISPEXEC SETMSG MSG(XMTV017A)\n            GOTO REDISPLA\n          END\n     END\n/*\n/* A REAL NICKNAME WAS SPECIFIED, DON'T CHECK FOR A VALID USERID PREFIX\n/*\nNOPREFIX: +\nIF &XMTDSN \u00ac= THEN +\n DO\n  SET CMDDATA = &STR(&XMTDSN)     /*SHOW ACTUAL DSN IN MSG XMTV014  */\n  SET CMDDSN  = &STR(DA(&XMTDSN)) /*SET XMIT \"DATASET\" OPERAND      */\n  IF &SYSDSN(&XMTDSN) \u00ac= OK THEN +\n   DO\n    ISPEXEC SETMSG MSG(XMTV013)\n    GOTO REDISPLA\n   END\n  IF &XMTOPT \u00ac= THEN +\n   DO\n    IF &SYSINDEX(MEM,&XMTOPT) \u00ac= 0 THEN +\n     DO\n      /*MAKE MSG XMTV014 USER FRIENDLY*/\n      SET OPTMEMS = &STR(MEMBER(S) IN)\n     END\n   END\n END\n/*\n/* TRANSMIT TO \"NICKNAME\" IF NAMES.TEXT FILE EDITING NOT REQUESTED\n/* (USER DIDN'T ENTER \"NAMES\" IN THE NICKNAME FIELD).\n/*\nIF &STR(&XMTNICK) \u00ac= THEN +\n DO\n  IF &STR(&XMTNICK) \u00ac= NAMES THEN +\n   DO\n     ISPEXEC CONTROL DISPLAY LINE REFRESH\n     /*\n     /* THE TRAP IS SO THAT A TSO \"SEND\" COMMAND CAN BE GENERATED TO\n     /* NOTIFY THE USER (IF ABL) THAT SOMETHING WAS XMITTED TO HIM/HER.\n     /*\n     IF &ERRCHK = YES THEN +\n      DO\n       /* SET TRAP OF XMIT MESSAGE(S) UNLESS IDTF ERROR IS SUSPECTED\n       /*(IF AN ERROR OCCURS WITHIN XMIT REQUIRING A USER RESPONSE,\n       /* IT IS NOT SEEN BECAUSE IT IS \"CAUGHT IN THE TRAP\". THE USER\n       /* BECOMES \"LOCKED UP\". IF THIS CONDITION IS SUSPECTED, INVOKING\n       /* THE IDTF DIALOG VIA: TSO %XMT 'DEBUG(DEBUG) ERRCHK(YES)' WILL\n       /* BYPASS THE NORMAL TRAPPING MECHANISM USED.  THIS METHOD WAS\n       /* SELECTED TO ASSIST WITH DEBUGGING THE MYRIAD POSSIBLE IDTF\n       /* FAILURE POSSIBILITIES WITHOUT CODING ELABORATE ERROR CHECKING\n       /* ROUTINES WITHIN.\n       /*\n       XMIT (&XMTNICK) &CMDDSN &XMTOPT\n       GOTO REDISPLA\n      END\n     SET SYSOUTTRAP = 50        /*  SET MAX TRAPPABLE MESSAGES LIMIT\n     XMIT (&XMTNICK) &CMDDSN &XMTOPT\n     SET &XMITCC = &LASTCC\n     SET &UPPER = &SYSOUTLINE  /* SAVE # LINES FOR MSG PARSE LOOP\n     SET &SYSOUTTRAP = 0       /* TURN OFF TRAPPING MECHANISM\n     SET &CTR = 1\n     /*                                                                    */\n     /* DEBUG MODE ADDS AN EXTRA LINE TO TRAPPED OUTPUT */\n     IF &DEBUG = DEBUG THEN SET CTR = 2\n     /*\n/*   SET &EVALLINE = &&SYSOUTLINE&CTR\n     SET &ABLUSER = &STR(ABL.D06)      /* SET SEARCH ARGUMENT\n     /*\n     DO WHILE &CTR LE &UPPER\n       SET &IDTFMSG = &&SYSOUTLINE&CTR\n       /*\n       /* IF CURRENT MESSAGE LINE CONTAINS INMX020I THEN A NICKNAME\n       /* SPECIFIED WAS NOT FOUND IN THE NAMES.TEXT DATASET.\n       /*\n       IF &SYSINDEX(INMX020I,&STR(&IDTFMSG)) \u00ac= 0 THEN +\n          DO\n            SET &BADNICK = YES\n            GOTO NOTABLID\n          END\n       /*\n       /* IF CURRENT MESSAGE LINE DOESN'T CONTAIN \"ABL.D06\" THEN THIS\n       /* NODE/USER IS NOT AN ABL TSO USERID (\"NOTABLID\").\n       /*\n       IF &SYSINDEX(&ABLUSER,&STR(&IDTFMSG)) = 0 THEN GOTO NOTABLID\n        /*\n        /* FIND WHERE TSO USERID BEGINS (STRIP OFF \"ABL.\")\n        SET &IDBEGIN = 4 + (&SYSINDEX(&ABLUSER,&STR(&IDTFMSG)))\n        /*\n        /* ADD 10 TO DETERMINE COLUMN WHERE USERID ENDS IN MESSAGE\n        SET &IDEND   = 10 + (&SYSINDEX(&ABLUSER,&STR(&IDTFMSG)))\n        /*\n        /*SAVE TSO USERID FOR SUBSEQUENT TSO SEND CMD USE*/\n        SET &ABLID = &SUBSTR(&IDBEGIN:&IDEND,&IDTFMSG)\n        /*\n        /* NOW THAT WE'VE EXTRACTED THE USERID FROM THE TRANSMIT MSG,\n        /* ISSUE TSO SEND COMMAND TO NOTIFY THE USER OF INCOMING DATA\n        /* (DO NOT REMOVE \",LOGON\" FROM THESE SEND COMMANDS ELSE IF THE\n        /* USER ISN'T LOGGED ON, THE SENDING USER WILL GET A MESSAGE\n        /* INDICATING \"MESSAGE CANCELLED\". THIS MESSAGE MEANS THE TSO\n        /* SEND COMMAND'S MESSAGE WAS CANCELLED BUT THE SENDING USER\n        /* WILL BE MISLEAD TO THINK THAT THEIR TRANSMITTED MESSAGE WAS\n        /* CANCELLED.\n        /*\n        WRITE\n        SE 'DATA HAS BEEN TRANSMITTED TO YOU FROM',USER(&ABLID),LOGON\n         SE 'ENTER THE TSO RECEIVE COMMAND. THANKS!',USER(&ABLID),LOGON\n       NOTABLID: +\n        SET &CTR = &CTR + 1\n     END\n/*\n     IF &XMITCC = 0 THEN +\n        DO\n          /* XMIT COMMAND RETURNS CC=0 EVEN IF AT LEAST ONE NICKNAME  */\n          /* IS VALID BUT OTHERS ARE NOT FOUND. ORDINARILY, (IN A NON-*/\n          /* DIALOG XMIT ENVIRONMENT), THE XMIT COMMAND WOULD NOTIFY  */\n          /* THE USER OF THE \"NICKNAME NOT FOUND\" CONDITION BUT IN    */\n          /* THE \"SYSOUTTRAP\" MODE, THESE WARNING MESSAGES ARE NOT    */\n          /* SEEN BY THE USER SO WE WILL USE THE SPF MESSAGE TECHNIQUE/*\n          /* TO WARN THE USER THAT A NICKNAME WAS NOT FOUND (XMTV016A)*/\n          IF &BADNICK = YES THEN +\n             DO\n               ISPEXEC SETMSG MSG(XMTV016A)\n               SET &BADNICK = NO   /* RESET. GIVE USER A CHANCE TO FIX*/\n             END\n            ELSE +\n               ISPEXEC SETMSG MSG(XMTV018) /*TELL USER ALL WENT WELL */\n        END\n       ELSE +\n        DO\n          /* NOTIFY USER OF XMIT FAILURE IF DUE TO NICKNAME NOT FOUND*/\n          IF &BADNICK = YES THEN +\n             DO\n               ISPEXEC SETMSG MSG(XMTV016A)\n               SET &BADNICK = NO   /* RESET. GIVE USER A CHANCE TO FIX*/\n             END\n          ELSE +\n            ISPEXEC SETMSG MSG(XMTV016) /* NOTIFY USER OF XMIT FAILURE*/\n                                        /*  DUE TO GENERIC REASONS    */  */\n        END\n     /*                                                             */\n     /* RESET XMIT DATASETNAME VARIABLE TO NULLS                    */\n     SET CMDDSN  =\n     /* RESET MESSAGE XMTV014 (CLIST LOCAL VARIABLE) BACK TO DEFAULT*/\n     SET CMDDATA = MESSAGE\n     GOTO REDISPLA\n\n   END\n END\nISPEXEC CONTROL DISPLAY LINE REFRESH\n/*\n/* XMIT TO NODE.USERID (INSTEAD OF A NICKNAME)\n/*\nXMIT &XMTNODE..&XMTUSER &CMDDSN &XMTOPT\nIF &LASTCC = 0 THEN +\n DO\n  ISPEXEC SETMSG MSG(XMTV014)\n  IF &XMTNODE = ABL THEN +\n   DO\n    WRITE\n   SE 'DATA HAS BEEN TRANSMITTED TO YOU FROM',USER(&XMTUSER),LOGON\n    SE 'ENTER THE TSO RECEIVE COMMAND. THANKS!',USER(&XMTUSER),LOGON\n   END\n END\nELSE ISPEXEC SETMSG MSG(XMTV016)\n/* RESET XMIT DATASETNAME VARIABLE TO NULLS          */\nSET CMDDSN  =\n/* RESET MESSAGE XMTV014 VARIABLE BACK TO \"MESSAGE\"  */\nSET CMDDATA = MESSAGE\nGOTO REDISPLA\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MMTV01": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "XMTV010  .HELP=* .ALARM=YES\n'Valid Destination Nodes are:  ABL  or  WILM  or  SALTLAKE'\nXMTV011  .HELP=* .ALARM=YES\n'Userid must be in the format \"1 alpha & 6 numeric\" (T060945 e.g.)\nXMTV012  .HELP=* .ALARM=YES\n'You must supply a DATASET NAME with the optional OPERANDS selected'\nXMTV013  .HELP=* .ALARM=YES\n'Dataset &xmtDSN not found on system. Respecify.\nXMTV014  .HELP=* .ALARM=YES\n'&OPTMEMS &CMDDATA will be transmitted to &xmtuser at &xmtnode'\nXMTV015A .HELP=* .ALARM=YES\n'Nicknames must be from 1 to eight alphameric characters. Respecify'\nXMTV015B .HELP=* .ALARM=YES\n'A Nicknames dataset has been created for your customization and use'\nXMTV015C .HELP=* .ALARM=YES\n'Error occured attempting to COPY model nicknames file. Contact DP'\nXMTV015D .HELP=* .ALARM=YES\n'Error occured in EDIT MACRO XMTNAMES during nicknames file creation'\nXMTV016  .HELP=* .ALARM=YES\n'Failure in TRANSMIT command processing. Data not transmitted'\nXMTV016A .HELP=* .ALARM=YES\n'WARNING: A nickname wasn't found. Type NAMES in NICKNAME field to verify.'\nXMTV017  .HELP=* .ALARM=YES\n'Userid must begin with character T when transmitted outside ABL'\nXMTV017A .HELP=* .ALARM=YES\n'Userid must begin with character D when transmitting to an ABL user'\nXMTV018  .HELP=* .ALARM=YES\n'&OPTMEMS &CMDDATA will be transmitted to &xmtnick'\nXMTV018A .HELP=* .ALARM=YES\n'Enter R in this field if your intent is to RECEIVE data'\nXMTV018B .HELP=* .ALARM=YES\n'Error occurred in RECEIVE processing'\nXMTV019  .HELP=* .ALARM=YES\n'Valid values for LOG processing are E, B, or blank (for no processing)'\nXMTV019A .HELP=* .ALARM=YES\n'Error allocating NAMES.TEXT dataset. Contact Data Processing'\nXMTV019B .HELP=* .ALARM=YES\n'LOG not found. Transmit data or a message to create the LOG file'\nXMTV019C .HELP=* .ALARM=YES\n'A NICKNAME or NODE/USERID must be supplied for a message to be transmitted'\nXMTV019D .HELP=* .ALARM=YES\n'A NODE & USERID must be supplied if not sending to a NICKNAME'\nXMTV019E .HELP=* .ALARM=YES\n'A USERID must be supplied along with the NODE name'\nXMTV019F .HELP=* .ALARM=YES\n'A NICKNAME must be supplied if not sending to a NODE & USERID'\nXMTV019G .HELP=* .ALARM=YES\n'Select either a NICKNAME or a NODE/USERID, but not both'\nXMTV019H .HELP=* .ALARM=YES\n'A NICKNAME or NODE/USERID must be supplied for a DATASET to be transmitted'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NICKNAME": {"ttr": 771, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*                                                                     *\n* The comments inside the box which you are now reading may be        *\n* deleted from this file or remain if desired.                        *\n*                                                                     *\n* This is a model NICKNAMES file that has been created for you to     *\n* customize and use.  The use of NICKNAMES will simplify the use of   *\n* the IDTF utility by enabling data to be sent to a nickname          *\n* instead of having to remember specific NODE & USERID combinations.  *\n*                                                                     *\n* A nickname may be a single USERID located at a particular NODE (as  *\n* reflected in the example for nickname \"BARNUM\" below) or a NICKNAME *\n* may be created that references a list of individual NICKNAMES,      *\n* thereby creating a \"mailing list\"  or group transmit capability.    *\n* There is virtually no limit to the number of combinations of        *\n* individual or group NICKNAMES that you may create.                  *\n*                                                                     *\n* Please enter \"your name\" in the :PROLOG & :EPILOG titles below.     *\n* These titles will automatically be included with any data that you  *\n* transmit. You may change these titles anytime.                      *\n*                                                                     *\n* General guidelines for customizing this file:                       *\n*                                                                     *\n* 1. Do not alter the first two entries (:LOG & :NOTIFY).             *\n* 2. Modify the :PROLOG. & :EPILOG. entries as desired.               *\n* 3. Place Group nicknames (via :LIST.) before individual nicknames.  *\n*    A group nickname example is the entry \"BIGGUYS\" below.           *\n* 4. Code nicknames defining individual userids last in this file.    *\n*    An individual nickname example is the entry \"BARNUM\" below.      *\n* 5. When creating or modifying entries, follow these rules:          *\n*    - Group nicknames (:LIST.) may be from 1 to 8 alphanumeric chars.*\n*    - Individual nicknames (:NODE.) may be from 1 to 8 (alphanumeric)*\n*    - Lists (:LIST.) may include as many combinations of nicknames as*\n*      will fit on a line (you may scroll right and continue a LIST). *\n*    - Valid locations (:NODE.) are ABL, WILM, and SALTLAKE           *\n*    - Valid userids (:USERID.) are of the format D060nnn for ABL     *\n*      users and T060nnn for WILM & SALTLAKE users.                   *\n*    - Names (:NAME.) are optional (but recommended) and may contain  *\n*      as many characters as will fit on a line (you may scroll right *\n*      and continue a NAME).                                          *\n*                                                                     *\n***********************************************************************\n\n:LOG\n:NOTIFY\n:PROLOG. --------- BEGIN MESSAGE FROM your name  -------------\n:EPILOG. --------- END   MESSAGE FROM your name  -------------\n:NICK. BIGGUYS  :LIST. GORBY SCHWARTZ BUSH JONES  :NAME. IMPORTANT FOLK\n:NICK. SCHWARTZ :NODE. WILM     :USERID. T060945  :NAME. SCHWARTZ\n:NICK. BARNUM   :NODE. ABL      :USERID. D060734  :NAME. BARNUM, P.T.\n:NICK. JONES    :NODE. SALTLAKE :USERID. T854099  :NAME. JONES, INDIANA\n:NICK. BUSH     :NODE. WASHDC   :USERID. W123456  :NAME. BUSH, GEORGE\n:NICK. GORBY    :NODE. KREMLIN  :USERID. X987654  :NAME. GORBACHEV, M.\n:NICK. NORIEGA  :NODE. MIAMI    :USERID. P528854  :NAME. NORIEGA, M.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMT": {"ttr": 773, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%---------  TRANSMIT/RECEIVE DATA WITHIN HERCULES' MAINFRAME NETWORK  ---------\n%COMMAND ===>_ZCMD\n+                                                               TIME  - &ZTIME\n%\n% DESTINATION:+(Supply either %NICKNAME(s)+or a%NODE+&%USERID+)\n+\n%  NICKNAME ===>_XMTNICK                    +(Enter%NAMES+in the NICKNAME field\n+                                             to view/edit your nicknames file)\n%  NODE =======>_XMTNODE +\n+    &\n%   USERID ====>_XMTUSER+\n+\n% DATASET NAME  ========>_XMTDSN                             +\n+\n% OPTIONAL OPERANDS  ===>_XMTOPT                                              +\n+\n+ -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -\n% LOG processing =======>_XMTLOG+ (Enter B to Browse LOG, E to Edit)\n+\n% RECEIVE processing ===>_XMTRECV+(Enter R to RECEIVE any data sent to you)\n+\n+Press%PF1+for assistance (or enter the HELP command)\n+Press%PF3+to exit this screen\n)INIT\n  &ZPRIM = NO\n  .HELP = XMTMAINT\n  &ZCMD = ' '\n)PROC\n /*                                                              */\n /* Process nickname, if specified.                              */\n /*                                                              */\n  IF (&XMTNICK \u00ac= ' ')\n    IF (&XMTNICK \u00ac= 'NAMES')\n      IF (&XMTNODE \u00ac= ' ')\n       .MSG = XMTV019G\n       .CURSOR = XMTNODE\n       &XMTUSER = ' '\n    VER (&XMTNICK EBCDIC MSG=XMTV015A)\n    VPUT (XMTNICK) PROFILE\n /*                                                              */\n /* Process nodename if specified                                */\n /*                                                              */\n  IF (&XMTNODE \u00ac= ' ')\n    IF (&XMTNICK \u00ac= ' ')\n     .MSG = XMTV019G\n    VER (&XMTNODE LIST,ABL,N03,SALTLAKE,N02,WILM,N01 MSG=XMTV010)\n    VER (&XMTUSER PICT,'ACCCCCC' MSG=XMTV011)\n    VPUT (XMTNODE XMTUSER) PROFILE\n /*                                                              */\n /* Process OPTIONAL OPERANDS, if specified                      */\n /*                                                              */\n /*                                                              */\n /* Let user get away with not specifying a DATASET name only if */\n /* 1. Sending a message (via blank or MSg or MEssage)           */\n /* 2. Sending a dataset as a message (via MSgds operand).       */\n /* 3. Sending a dataset via FIlename technique                  */\n /*                                                              */\n  &XMTMSGS = TRUNC (&XMTOPT,2)\n  IF (&XMTMSGS \u00ac= 'MS')\n   IF (&XMTMSGS \u00ac= 'ME')\n    IF (&XMTMSGS \u00ac= 'FI')\n     IF (&XMTOPT \u00ac= ' ')\n      IF (&XMTNICK \u00ac= 'NAMES')\n       VER (&XMTDSN NB DSNAME MSG=XMTV012)\n  VPUT (XMTDSN XMTOPT) PROFILE\n /*                                                              */\n /* Force user to select either a NICKNAME or a NODE/USERID      */\n /* if the intent is to send DATA  (via DATASET field)           */\n /*                                                              */\n  IF (&XMTDSN \u00ac= ' ')\n   IF (&XMTNODE = ' ')\n    IF (&XMTNICK \u00ac= 'NAMES')\n     VER (&XMTNICK NB MSG=XMTV019H)\n   IF (&XMTNICK = ' ')\n    VER (&XMTNODE NB MSG=XMTV019H)\n /*                                                              */\n /* Force user to select either a NICKNAME or a NODE/USERID      */\n /* if the intent is to only send a message                      */\n /* or a MSGDATASET (or any other MSG..... value).               */\n /*                                                              */\n  IF (&XMTMSGS = 'MSG')\n   IF (&XMTMSGS = 'MES')\n    IF (&XMTNODE = ' ')\n     VER (&XMTNICK NB MSG=XMTV019C)\n  IF (&XMTMSGS = 'MSG')\n   IF (&XMTMSGS = 'MES')\n    IF (&XMTNICK = ' ')\n     VER (&XMTNODE NB MSG=XMTV019C)\n /*                                                              */\n /*  Determine LOG processing option, if specified.              */\n /*                                                              */\n  IF (&XMTLOG \u00ac= ' ')\n   VER (&XMTLOG LIST B,E MSG=XMTV019)\n   VPUT (XMTLOG) PROFILE\n /*                                                              */\n /*  Determine if RECEIVE processing option was specified.       */\n /*                                                              */\n  IF (&XMTRECV \u00ac= ' ')\n   VER (&XMTRECV LIST R MSG=XMTV018A)\n   VPUT (XMTRECV) PROFILE\n /*                                                              */\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMTDESTT": {"ttr": 776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ------------------ TRANSMIT : DESTINATION ------------------ TUTORIAL\n%COMMAND ===>_ZCMD\n%\n%\n+   To transmit data (i.e., a dataset and/or a message), a destination must be\n+   supplied. This may be either a NICKNAME or a NODE & USERID.  The use of\n+   NICKNAMES is strongly recommended as it simplifies the destination\n+   specification.  Entering the value NAMES in the \"NICKNAME ===>\" field\n+   provides a convenient method of viewing or editing your personal\n+   nicknames dataset.  A model nicknames dataset containing customization\n+   instructions will be automatically created for first-time users of the\n+   NICKNAME function.\n+\n+   Specifying multiple nicknames is permissable in this field. For example:\n+   NICKNAME ===> JONES SMITH PAYROLL  would transmit to user JONES, user\n+   SMITH and all users listed in group nickname PAYROLL.\n+\n+   Should you decide to transmit using the NODE & USERID method:\n+   - valid node names are: ABL, SALTLAKE, & WILM .\n+   - a valid userid is any TSO Userid at that node.\n+\n+Press%PF3+to exit this screen\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTDSNT": {"ttr": 778, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ------------------ TRANSMIT : DATASET NAME ----------------- TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+  Enter the mainframe-resident dataset name that is to be transmitted.\n+ Note that the dataset is copied then transmitted, leaving the original\n+ data intact.\n+\n+ To send an entire dataset:%DATASET NAME ===> sample.dataset.name+\n+ To send a library member :%DATASET NAME ===> test.library(membername)+\n+\n+ Do NOT include your TSO userid when specifying the dataset name.\n+\n+ Should multiple library members need transmitted, specify only the\n+ dataset name in the DATASET field and also specify (in the OPTIONAL\n+ OPERANDS field) the MEMBERS(membername1 membername2 etc.) operand.\n+\n+ If your intent is to send only a message, leave the DATASET NAME blank.\n+\n+\n+Press%PF3+to exit this screen\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMTLOGT": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ------------ TRANSMIT/RECEIVE : LOG PROCESSING  ------------ TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+ The LOG PROCESSING field provides the ability to view (via option B) or EDIT\n+ (via option E) your LOG dataset. This dataset contains a record of all\n+ TRANSMIT and RECEIVE activity. Log entries are chronologically arranged.  A\n+ transmission of data creates a time-stamped record in the LOG indicating\n+ \"what\" was sent to \"who\".  Receipt of the data creates an \"acknowledgement\"\n+ entry, thereby providing a convenient time-stamped cross-reference to the\n+ original transmission.\n+\n+\n+ Data in this file may be freely edited (lines deleted, changed, etc.) anytime.\n+ It is suggested that periodic \"housecleaning\" be performed so as to retain\n+ only needed information.\n+\n+\n+Press%PF3+to exit this screen\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTMAINT": {"ttr": 782, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL - TRANSMIT/RECEIVE DATA WITHIN HERCULES' MAINFRAME NETWORK - TUTORIAL\n%SELECTION ===>_ZCMD\n%\n+\n+ Select a number from the list of subjects below or continue to press %ENTER+\n+ to view sequentially the tutorial for all subjects.\n+\n%     1 +-Overview\n%\n%     2 +-Destination\n%\n%     3 +-Dataset Name\n%\n%     4 +-Optional Operands\n%\n%     5 +-LOG Processing\n%\n%     6 +-RECEIVE Processing\n+\n+\n+ Press%PF3+to exit this tutorial\n)INIT\n  .HELP = XMTMAINT\n  &ZHTOP = XMTMAINT\n  &ZPRIM = NO\n)PROC\n  &ZSEL = TRANS (&ZCMD,\n               1,XMTOVERT\n               2,XMTDESTT\n               3,XMTDSNT\n               4,XMTOPTT\n               5,XMTLOGT\n               6,XMTRECVT\n               ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMTOPTT": {"ttr": 784, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ---------------- RECEIVE : OPTIONAL OPERANDS --------------- TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+ Use the%OPTIONAL OPERANDS+field to request additional TRANSMIT services:\n+\n% *+You may, in addition to transmitting data, append a message to      your\n+  transmission by specifying MSG in the OPTIONAL OPERANDS field.  Your message\n+  may be a one-liner or several pages.  When received by the user, the message\n+  text will appear on the terminal and will also be stored in the receiving\n+  user's LOG file for future reference.\n+\n% *+You may transmit a message without transmitting any data by leaving  both\n+  the DATASET NAME field and the OPTIONAL OPERANDS field blank.  When sending a\n+  message only, a blank screen will appear labelled 'DATA FOR destination'.\n+  Type the message text anywhere on this screen then press PF3 to initiate the\n+  message transmittal.\n+\n% *+You may transmit selected members of a library-type DATASET by specifying\n+  MEMBERS(memname1 memname2 etc.).  Omitting the MEMBERS operand results in the\n   transmittal of all members of a library-type dataset.\n+\n% *+There are many additional optional operands that can be specified.  To view\n+   these, enter TSO HELP TRANSMIT in the \"COMMAND ===>\" field above.\n+\n+Press%PF3+to exit this screen\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTOVERT": {"ttr": 786, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL -----------TRANSMIT/RECEIVE UTILITY : OVERVIEW  ------------ TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+   The TRANSMIT/RECEIVE utility provides the capability to electronically\n+  transfer data (datasets and/or messages) between the ABL, SALTLAKE, and\n+  WILMINGTON mainframe computers.  Transmitted data is then received by\n+  the targeted user(s) on the destination computer. A log file of TRANSMIT/\n+  RECEIVE activity is automatically maintained, providing a convenient\n+  means of monitoring and referencing transmitted data.\n+\n+   Messages appearing on your screen prefixed \"INM\" provide information\n+  relating specifically to TRANSMIT/RECEIVE processing.\n+\n+\n+Press%PF3+to exit this screen\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTRECVT": {"ttr": 788, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL -------------------  RECEIVE PROCESSING -------------------- TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+  Entering the value R in the \"RECEIVE Processing ===>\" field invokes\n+ RECEIVE command processing.  The RECEIVE command obtains data transmitted\n+ to your TSO userid.  During TSO LOGON the RECEIVE command is invoked so\n+ that any data transmitted will be automatically received.  During a TSO\n+ session you will be notified of any data that is transmitted to you.  You\n+ can receive this data in one of two ways:\n+\n+  1. Enter R in the \"RECEIVE Processing ===>\" field\n+  2. From the \"COMMAND ===>\" field on any SPF screen, enter: TSO RECEIVE\n+\n+ RECEIVE will display descriptive information about the incoming data. You\n+ will be prompted for information to control the RECEIVE operation.  The most\n+ common responses used to control RECEIVE processing are reviewed on the\n+ following screens.  To view a list of all possible responses, enter:\n+ TSO HELP RECEIVE in the \"COMMAND ===>\" field on any screen.  Notification\n+ of data received will be transmitted back to the sender automatically.\n+\n% Tutorial continued on next screen  ... press ENTER to continue. +\n+\n+\n+Press%PF3+to exit this screen\n)INIT\n  &ZCONT = XMTREC2T\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTREC2T": {"ttr": 790, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ------------- RECEIVE PROCESSING ... continued ------------- TUTORIAL\n%COMMAND ===>_ZCMD\n%\n+ RECEIVE processing will prompt you for processing options as follows:\n+\n%   Enter restore parameters or 'DELETE' or 'END'\n+\n+\n% Restore parameters+ are presented on the next screen.+Press%ENTER+ to view.\n+\n% DELETE+   Requests RECEIVE to delete the copy of the data being transmitted to\n+           you without any further processing. If DELETE is specified as a\n+           RECEIVE processing option, no other options should be specified.\n+\n% END+      Requests RECEIVE to postpone processing, leaving any remaining files\n+           to be RECEIVEd at a later time. If END is specified as a RECEIVE\n+           processing option, no other options should be specified.\n+\n+ Transmitted data will be retained on the system for two weeks for you to\n+ RECEIVE or DELETE.\n+\n% Tutorial continued on next screen ... press ENTER to continue.\n+ Press%PF3+to exit this screen\n)INIT\n  &ZCONT = XMTREC3T\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMTREC3T": {"ttr": 792, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL -------------- RECEIVE : Restore Parameters ---------------- TUTORIAL\n%COMMAND ===>_ZCMD\n+\n% Restore parameters+are:\n+\n%  DATASET+ You may specify the name of a dataset to contain the file being\n+   received. This dataset will be created if it doesn't exist.  If you know\n+   that a dataset that was TRANSMITted to you matches a dataset name already\n+   allocated to your userid, a new dataset name may be selected during RECEIVE\n+   processing so as to prevent overlaying an existing dataset. When the RECEIVE\n+   command prompts you with  \"Enter restore parameters or 'DELETE' or 'END'\",\n+   enter:  DATASET(new.dataset.name).  By explicity specifying the DATASET\n+   keyword,  the contents of the dataset created will be identical to the\n+   transmitted dataset with the exception of it's new dataset name.\n+\n+   A valid response to RECEIVE%restore parameters+is to press ENTER.  In this\n+   case, the dataset received will be the name of the transmitted data set.  If\n+   you already have a dataset of this name and it is a sequential-type dataset,\n+   then RECEIVE will prompt you for your permission to overwrite it. If this\n+   dataset is a partitioned-type dataset, identically named members will be\n+   automatically replaced upon your permission.\n+\n% Tutorial continued on next screen ... press ENTER to continue.  +\n+ Press%PF3+to exit this screen\n)INIT\n  &ZCONT = XMTREC4T\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PMTREC4T": {"ttr": 794, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")BODY\n%TUTORIAL ---------  RECEIVE: Restore Parameters ... continued  ------ TUTORIAL\n%COMMAND ===>_ZCMD\n%\n%  BLKSIZE(blksize) You may specify the blocksize to be used when receiving the\n+    file.  Your value will be used as long as it does not conflict with the\n+    transmitted dataset's characteristics.\n+\n%  SPACE(primary secondary)+ You may specify primary and optionally secondary\n+    space for the dataset in which you are about to receive the file.   The\n+    default value for SPACE is a primary size equal to the size of the dataset\n+    you are receiving and a secondary size value 10 percent of the primary\n+    space allocation.\n+\n%  TRACKS+      Requests that the disk space allocation be in tracks.\n%  CYLINDERS+   Requests that the disk space allocation be in cylinders.\n%  BLOCKS(size)+Requests that the allocation be in units of the \"size\" value.\n+\n%  RELEASE+ Releases any unused space in the dataset being received.\n+\n%  DIRECTORY(45) + Overides the number of directory blocks for a partitioned\n+    dataset. The default value for the DIRECTORY blocks is the number of\n+    required to receive the transmitted members.\n+\n+ Press%PF3+to exit this screen\n)INIT\n  &ZCONT = XMTMAINT\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOHELP": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "****** Begin customized help for the TRANSMIT command  **********\n)F\n       You may transmit sequential or partitioned datasets that have\n       the fixed, variable and undefined (load modules) record format\n       (i.e., RECFM=F,FB,FBA,V,VB,VBA,U).\n\n       When you transmit a partitioned dataset, the IEBCOPY utility is\n       invoked to transmit the dataset.  Messages will be generated on\n       your terminal during IEBCOPY processing.  RECEIVE processing\n       will then restore the partitioned dataset to its original format\n       for the targeted user (Destination).  You may also transmit a\n       single member of a partitioned dataset and request that it be\n       transmitted as a sequential dataset, thereby allowing the\n       addressee to receive it either as a sequential dataset or as a\n       member of another partitioned dataset.\n\n\n       Additional OPTIONAL OPERANDS that may be used are:\n\n        MSGDS(datasetname)     - send a dataset as a message\n\n        FILE(ddname)           - send data allocated to a ddname\n\n        SEQ  You may request that a member of a partitioned dataset be\n             transmitted as a sequential data set.  This allows the\n             addressee to receive the file as a sequential data set or\n             as a member of a partitioned data set.  Transmitting a\n             sequential dataset does not require specification of the\n             SEQ operand.\n\n****** End of customized help for the TRANSMIT command  **********\n\n\n****** Begin customized help for the   RECEIVE command  **********\n)F\n         The TSO/E RECEIVE command allows you to obtain files\n         TRANSMITted to your TSO userid. During TSO LOGON, the RECEIVE\n         command is invoked automatically.  If there is at least one\n         file that has been TRANSMITted to you, RECEIVE will display\n         descriptive information about the file. You will then be\n         prompted for information to control the RECEIVE operation\n         (Prompts ending with a plus sign indicate that additional info\n         is available. Request this info by entering a question mark).\n         You may choose to accept the default dataset name (the origin\n         dataset name with your prefix replacing the sender's userid)\n         and space information by simply pressing the key marked\n         ENTER.  You may also specify overriding parameters as\n         described later on.  After you have successfully received a\n         file, the RECEIVE command will continue processing with any\n         remaining files that may have been transmitted to you.  A\n         notification of receipt, by you, and the success of your\n         RECEIVE command processing will be transmitted back to the\n         sender automatically.\n\n         A TRANSMITted file will be retained on the system until you\n         successfully RECEIVE or delete it.\n\n         The RECEIVE command may be requested any time during a TSO/\n         SPF session by entering \"TSO RECEIVE\" in the \"===> COMMAND\"\n         field of any SPF panel or requesting RECEIVE Processing in\n         the IDTF Utility panel (SPF Option 3.10).\n\n)X\n         The RECEIVE command will prompt you for additional parameters.\n         If you do not specify any parameters, they will be defaulted\n         or obtained from the control records transmitted with the\n         data.  The optional parameters which you may specify are:\n\n           BLKSIZE(size)\n\n           DATASET(dsn)\n\n           DIRECTORY(blocks)\n\n           NEW/OLD/MOD/SHR\n\n           RELEASE\n\n           COPY / DELETE / END\n\n           SPACE(primary secondary)\n\n           TRACKS / CYLINDERS / BLOCKS(size)\n\n         Reading the HELP file for the TRANSMIT command will solidify\n         your understanding of the RECEIVE command.\n)O\n\n\n))DATASET          You may specify the name of the data set to be\n                   used to contain the file being received. This\n                   dataset will be created if it does not exist.\n\n                   The dataset name will default to the name of\n                   the transmitted data set (the sender's userid\n                   will be replaced with your userid).  If this\n                   default data set already exists and is a\n                   sequential data set and you have not specified\n                   a disposition (SHR/MOD/OLD/NEW), then RECEIVE\n                   will prompt you for your permission to overwrite\n                   the data set. If the default data set is a\n                   partitioned data set, then identically named\n                   members will be automatically replaced.\n\n))SPACE            You may specify primary and optionally secondary\n                   space for the data set in which you are about\n                   to receive the file.\n                   The default value for SPACE is a primary size\n                   equal to the size of the data set you are\n                   about to receive and a secondary size value 10\n                   percent of the primary space allocation.\n\n))TRACKS           If you enter this keyword, you are requesting\n                   that the space allocation be in tracks.\n\n))CYLINDERS        If you enter this keyword, you are requesting\n                   that the space allocation be in cylinders.\n\n))BLKSIZE          If you enter this keyword, you are requesting\n                   that the space allocation be in units of the blksize\n                   value.\n\n))RELEASE          You may request RECEIVE to release any unused\n                   space associated with the data set just received\n                   by specifying this parameter.\n\n))DIRECTORY        You may override the number of directory blocks\n                   for a partitioned data set by specifying this\n                   parameter.  The default value for the DIRECTORY\n                   keyword is the number of directory blocks required\n                   to receive the transmitted members.\n\n                   NOTE:  If you are receiving a sequential data set\n                   as a NEW partitioned data set, DATASET(x(member01)),\n                   and you do NOT specify the DIRECTORY keyword, the\n                   RECEIVE command assumes a default directory block\n                   value of 27.\n\n))BLKSIZE          You may specify the blocksize to be used when\n                   receiving the file.  Your value will be used\n                   as long as it does not conflict with the\n                   transmitted data set characteristics or device\n                   type characteristics.\n\n))NEW/OLD/MOD/SHR  You may specify the disposition to be used for\n                   the data set you are receiving into. If you DO\n                   NOT specify one of these values AND you also\n                   DID NOT specify the SPACE keyword, RECEIVE will\n                   first assume that the data set exists.  If the\n                   RECEIVE command determines that the data set does\n                   not exist, the data set is allocated NEW with\n                   the space values of the original data set.\n                   Using MOD when receiving into an existing\n                   SEQuential dataset causes the file being RECEIVEd\n                   to be appended to the existing dataset.\n\n\n))DELETE           You may request RECEIVE to delete the current\n                   file without any further processing by specifying\n                   this keyword.  If DELETE is specified as a RECEIVE\n                   processing option, no other options should be\n                   specified.\n\n))END              You may request RECEIVE to end its processing\n                   immediately, leaving any files available to be\n                   RECEIVEd at a later time by you.  If END is\n                   specified as a RECEIVE processing option, no other\n                   options should be specified.\n\n****** End of customized help for the RECEIVE command  **********\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT150/FILE150.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT150", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}