{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012215000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE497.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE497.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x15'", "DS1TRBAL": "b'5B'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xcb\\x00\\x00\\x03\\xcb\\x00\\x05\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x01\\x002_\\x01\\x01\\x00\\x9f\\x14 \\x00\\xb3\\x00\\x10\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-09T14:20:00", "lines": 179, "newlines": 16, "modlines": 0, "user": "ISECN13"}, "text": "************************************************************************\n* This EXIT has been tested and utilized in MVS/ESA 5.2.2\n************************************************************************\n\n//* This library contains a sample CSVLLIX1 LLA EXIT,\n//* which is used to build a table in memory to reflect usage of\n//* selected LLA modules (list contained in CSVLPGMS)\n//* by selected MVS JOBs (list contained in CSVLJOBS)\n//*\n//* As seen from LLA, the EXIT always returns the same 0/0 return code,\n//* so it is \"transparent\" to it.\n//* In case of errors in the EXIT, LLA just disables it and goes on\n//* (no harm done to anybody).\n//*\n//* The table resides in ECSA\n//* (no problems with virtual storage constraint)\n//* and the address of the used table is given to the user\n//* in a message to the log when the table is created.\n//*\n//* A couple of programs (CSVLLLST and CSVLL1X1) can be used\n//* to list the table in memory, having its address as a PARM.\n//* While the activation of the EXIT depends on usual LLA processing,\n//* the creation/deletion of the table is triggered by a user program,\n//* so that monitoring can be done in different periods of time,\n//* as decided by the end-users.  CSVLLACT / CSVLLDEA  do this.\n\nModule list\n\n  $$$$$DOC  the module you are reading now, documentation\n  CSVLJOBS  example of a list of jobnames to be monitored by the EXIT\n  CSVLLACC  compilation   of CSVLLACT\n  CSVLLACJ  execution JCL of CSVLLACT\n  CSVLLACT  source of the USER module for activation of the EXIT\n  CSVLLAL1  sys1.parmlib member to refresh    the EXIT\n  CSVLLAOF  sys1.parmlib member to deactiveta the EXIT\n  CSVLLAON  sys1.parmlib member to activate   the EXIT\n  CSVLLDEA  source of the USER module for deactivation of the EXIT\n  CSVLLDEC  compilation   of CSVLLDEA\n  CSVLLDEJ  execution JCL of CSVLLDEA\n  CSVLLIXC  compilation   of CSVLLIX1\n  CSVLLIX1  source of the user EXIT\n            it does not need any macro (except the system ones),\n            and it includes (via COPY)\n            CSVLJOBS and CSVLPGMS\n  CSVLLLSC  compilation   of CSVLLLST\n  CSVLLLSJ  execution JCL of CSVLLLST\n  CSVLLLST  sample program to list usage table, in printable form\n  CSVLL1XC  compilation   of CSVLL1X1\n  CSVLL1XJ  execution JCL of CSVLL1X1\n  CSVLL1X1  sample program to list usage table, output length 80,\n            one result per line (useful for later sorting via ISPF\n            or for putting into some EXCEL file)\n  CSVLPGMS  example of a list of pgms (routines) to monitor\n  CSVOUT    example of OUTPUT from CSVLL1X1\n  J         a JOB card, used just to avoid retyping it\n  _other_   macros needed for compilation of CSVLLLST, CSVLL1X1\n\n************************************************************************\n*\n* IF THE EXIT IS PRESENT AT IPL, IT IS ACTIVATED (BY DEFAULT)\n*\n************************************************************************\n*\n************************************************************************\n*\n* TO INACTIVATE EXIT AT IPL TIME:\n*\n************************************************************************\n EDIT       SYS1.PARMLIB(IEACMD00)\n CHANGE\n COM='START LLA,SUB=MSTR'\n INTO\n COM='START LLA,SUB=MSTR,LLA=OF'\n TO AVOID STARTING THE EXIT BY DEFAULT AT IPL\n************************************************************************\n*\n* TO ACTIVATE THE EXIT:\n*\n************************************************************************\n/F LLA,UPDATE=L1    (CLOSES PREVIOUS EXIT AND LOADS THE NEW ONE)\n/F LLA,UPDATE=OF    (DEACTIVATES EXIT)\n  CSV210I LIBRARY LOOKASIDE UPDATED\n  CSV246I LLA EXIT CSVLLIX1 ALREADY DEACTIVATED\n\n -RO MVS1,F LLA,UPDATE=OF\n  CSV210I LIBRARY LOOKASIDE UPDATED\n\n -F LLA,UPDATE=OF\n  CSV210I LIBRARY LOOKASIDE UPDATED\n  CSV246I LLA EXIT CSVLLIX1 DEACTIVATED\n\n/F LLA,UPDATE=ON    (ACTIVATES EXIT)\n\n************************************************************************\n* ONCE ACTIVATED, THE EXIT DOES NOT DO ANYTHING UNTIL ASKED\n* BY THE USER, USING THE CSVLLACT PROGRAM, WHICH ACTS AS TRIGGER\n* PS CSVLLACT MUST BE IN LINKLIST, OR THE EXIT WILL NEVER NOTICE IT\n************************************************************************\n* ONCE COLLECTING STATISTICS, THE EXIT STOP DOING IT ONLY WHEN ASKED\n* BY THE USER, USING THE CSVLLDEA PROGRAM, WHICH ACTS AS TRIGGER\n* PS CSVLLDEA MUST BE IN LINKLIST, OR THE EXIT WILL NEVER NOTICE IT\n************************************************************************\n*\n*  TO CHANGE MONITORED JOBS/PGMS\n*\n************************************************************************\nTHE TABLE CONTAINING THE LIST OF MONITORED JOBS IS IN MODULE\nCSVLJOBS\n\nTHE TABLE CONTAINING THE LIST OF MONITORED PROGRAMS IS IN MODULE\nCSVLPGMS\n\nMODIFY IT AND REASSEMBLE THE EXIT\n\nCOMPILAZIONE JOBSTREAM IS IN:\nCSVLLIXC\n\n************************************************************************\n*\n*  RECOVERY (from ibm manual dealing with user exits\n*\n************************************************************************\n\nTHE LLA RECOVERY ROUTINE PROTECTS CSVLLIX1.\nTHE RECOVERY ROUTINE RECORDS DIAGNOSTIC INFORMATION\nIN THE SYSTEM DIAGNOSTIC WORK AREA (SDWA),\nRECORDS THE ERROR IN THE LOGREC DATA SET,\nAND THEN TAKES AN SVC DUMP.\n\n************************************************************************\n*\n* messages produced when the exit goes broken\n*\n************************************************************************\n*\n  CSV232I LLA HAS DEACTIVATED EXIT CSVLLIX1. ABEND=S0C4 U000,REASON=0000\n  0010\n  IEA794I SVC DUMP HAS CAPTURED: 771\n  DUMPID=002 REQUESTED BY JOB (JOBNAME )\n  DUMP TITLE=COMPON=PROGRAM MANAGER LIBRARY-LOOKASIDE,COMPID=SC1C\n             J,ISSUER=CSVLLXIT\n  IEF170I 3 JOBNAME  IEA995I SYMPTOM DUMP OUTPUT 774\n  SYSTEM COMPLETION CODE=0C4  REASON CODE=00000010\n   TIME=14.08.42  SEQ=03148  CPU=0000  ASID=00C8\n   PSW AT TIME OF ERROR  070C2000   9597E07C  ILC 6  INTC 10\n     NO ACTIVE MODULE FOUND\n     NAME=UNKNOWN\n     DATA AT PSW  1597E076 - 40204130  C447D504  2000C442\n     GPR  0-3  00000000  7F879DD4  53D3D811  1597E487\n     GPR  4-7  D3D3D7F1  7F879F1E  7F879CB8  00000001\n     GPR  8-11 812F3310  0000001F  00000001  00000000\n     GPR 12-15 9597E040  7F879E70  812F362E  9597E040\n   END OF SYMPTOM DUMP\n  IEA995I SYMPTOM DUMP OUTPUT 773\nTHE RECOVERY ROUTINE ISSUES  MESSAGE CSV232I\nTO INDICATE THAT CSVLLIX1 EITHER COULD NOT BE ACTIVATED\nOR HAD TO BE DEACTIVATED BECAUSE OF A FAILURE.\nLLA THEN RETRIES TO A POINT WITHIN LLA MODULE FETCH\nAFTER THE CALL TO CSVLLIX1.\n************************************************************************\n*\n* Example of the contents of the area passed to the EXIT\n* The pointer area starts wtih \"LLP1\"\n*\n************************************************************************\n7F879DD0   00000000   D3D3D7F1   02000098   0154BD9C   | ....LLP1...Q...\n7F879DE0   00000000   055BDE82   D7C7D4C6   000000FE   | .....$.BPGMF...\n7F879DF0   000234A9   C9C5C6C9   C2F6F0F0   06210500   | ...ZIEFIB600...\n7F879E00   012E0621   0E000000   0000C2E2   00B0F844   | ..........BS..8\n7F879E10   48000000   98000200   01116228   01000000   | ....Q..........\n7F879E20 TO 7F879E3F (X'00000020' BYTES)--ALL BYTES CONTAIN X'00'\n7F879E40   E2E8E2F1   4BD3C9D5   D2D3C9C2   40404040   | SYS1.LINKLIB\n7F879E50 TO 7F879E5F (X'00000010' BYTES)--ALL BYTES CONTAIN X'40', C' '\n7F879E60   40404040   40404040   40404040   00000000   |             ...\n7F879E70   016813D8   7F8797F8   00000000   812F362E   | ...Q\"GP8....A..\n7F879E80   9597E040   00000000   7F879DD4   00000000   | NP\\ ....\"G.M...\n7F879E90   008FDE88   1597E010   7F879F1E   7F879CB8   | ...H.P\\.\"G..\"G.\n7F879EA0   00000001   812F3310   0000001F   00000001   | ....A..........\n7F879EB0   00000000   7F879E70   00000000   00000000   | ....\"G.........\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$#DATE": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x02O\\x01\\x01\\x02O\\x17@\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-24T00:00:00", "modifydate": "2001-01-24T17:40:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 432    FILE:  497\n\n    ORIGINAL DSNAME:  WSBG.CBT432.FILE497\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n\n   38 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,835 RECORDS\n\nTIME THIS PDS WAS SHIPPED:   01/24/01    17:40:36    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x01\\x0f\\x01\\x01\\x01\\x0f\\x17P\\x00\\x14\\x00\\x14\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-10T00:00:00", "modifydate": "2001-01-10T17:50:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "WSBG"}, "text": " Hi Sam,\n\n Here it is: an example of CSVLLIX1 exit, for the CBT\n TAPE.  The exit itself was prepared and is being used\n at a customer site in Italy.\n\n I just copied it on another MVS, and polished it until\n everything compiled fine using only the source PDS.\n\n All comments are in English, but a bit of Italian may\n be found in some macro.  The exit in itself just\n maintains in memory a table of usage of selected LLA\n modules from selected MVS address spaces, as specified\n by the user. A couple of related programs can be used\n to print the table contents themselves.\n\n In real life it is being used to decide which modules\n it is better to preload in an IMS region.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE497": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x08?\\x01\\x01\\x01\\x0f\\x17S\\x00M\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-01-10T17:53:00", "lines": 77, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 497 is from Antonio Colombo who works for Amdahl in       *   FILE 497\n//*           Italy.  This file contains a working example of       *   FILE 497\n//*           the LLA Fetch exit CSVLLIX1.                          *   FILE 497\n//*                                                                 *   FILE 497\n//*                       ANTONIO COLOMBO                           *   FILE 497\n//*                       AMDAHL ITALIA S.P.A.                      *   FILE 497\n//*                       VIALE BRENTA, 16/18                       *   FILE 497\n//*                       I-20139 MILANO                            *   FILE 497\n//*                       ITALY                                     *   FILE 497\n//*                       +39(0332)786022                           *   FILE 497\n//*                 OR    +39(02)574741   AMDAHL OFFICE             *   FILE 497\n//*                 EMAIL ANTONIO.COLOMBO@JRC.ORG                   *   FILE 497\n//*                 EMAIL AZC10@AMDAHL.COM                          *   FILE 497\n//*                                                                 *   FILE 497\n//*      This library contains a sample CSVLLIX1 LLA EXIT, which    *   FILE 497\n//*      is used to build a table in memory to reflect usage of     *   FILE 497\n//*      selected LLA modules (list contained in CSVLPGMS) by       *   FILE 497\n//*      selected MVS JOBs (list contained in CSVLJOBS)             *   FILE 497\n//*                                                                 *   FILE 497\n//*      As seen from LLA, the EXIT always returns the same 0/0     *   FILE 497\n//*      return code, so it is \"transparent\" to it.                 *   FILE 497\n//*                                                                 *   FILE 497\n//*      In case of errors in the EXIT, LLA just disables it and    *   FILE 497\n//*      goes on (no harm done to anybody).                         *   FILE 497\n//*                                                                 *   FILE 497\n//*      The table resides in ECSA                                  *   FILE 497\n//*      (no problems with virtual storage constraint)              *   FILE 497\n//*      and the address of the used table is given to the user     *   FILE 497\n//*      in a message to the log when the table is created.         *   FILE 497\n//*                                                                 *   FILE 497\n//*      A couple of programs (CSVLLLST and CSVLL1X1) can be used   *   FILE 497\n//*      to list the table in memory, having its address as a       *   FILE 497\n//*      PARM.  While the activation of the EXIT depends on usual   *   FILE 497\n//*      LLA processing, the creation/deletion of the table is      *   FILE 497\n//*      triggered by a user program, so that monitoring can be     *   FILE 497\n//*      done in different periods of time, as decided by the       *   FILE 497\n//*      end-users.  CSVLLACT / CSVLLDEA  do this.                  *   FILE 497\n//*                                                                 *   FILE 497\n//*      Member list                                                *   FILE 497\n//*                                                                 *   FILE 497\n//*        $$$$$DOC  the module you are reading now,                *   FILE 497\n//*                  documentation                                  *   FILE 497\n//*        CSVLJOBS  example of a list of jobnames to be            *   FILE 497\n//*                  monitored by the EXIT                          *   FILE 497\n//*        CSVLLACC  compilation   of CSVLLACT                      *   FILE 497\n//*        CSVLLACJ  execution JCL of CSVLLACT                      *   FILE 497\n//*        CSVLLACT  source of the USER module for activation of    *   FILE 497\n//*                  the EXIT                                       *   FILE 497\n//*        CSVLLAL1  sys1.parmlib member to refresh    the EXIT     *   FILE 497\n//*        CSVLLAOF  sys1.parmlib member to deactiveta the EXIT     *   FILE 497\n//*        CSVLLAON  sys1.parmlib member to activate   the EXIT     *   FILE 497\n//*        CSVLLDEA  source of the USER module for deactivation     *   FILE 497\n//*                  of the EXIT                                    *   FILE 497\n//*        CSVLLDEC  compilation   of CSVLLDEA                      *   FILE 497\n//*        CSVLLDEJ  execution JCL of CSVLLDEA                      *   FILE 497\n//*        CSVLLIXC  compilation   of CSVLLIX1                      *   FILE 497\n//*        CSVLLIX1  source of the user EXIT                        *   FILE 497\n//*                  it does not need any macro (except the         *   FILE 497\n//*                  system ones), and it includes (via COPY)       *   FILE 497\n//*                  CSVLJOBS and CSVLPGMS                          *   FILE 497\n//*        CSVLLLSC  compilation   of CSVLLLST                      *   FILE 497\n//*        CSVLLLSJ  execution JCL of CSVLLLST                      *   FILE 497\n//*        CSVLLLST  sample program to list usage table, in         *   FILE 497\n//*                  printable form                                 *   FILE 497\n//*        CSVLL1XC  compilation   of CSVLL1X1                      *   FILE 497\n//*        CSVLL1XJ  execution JCL of CSVLL1X1                      *   FILE 497\n//*        CSVLL1X1  sample program to list usage table, output     *   FILE 497\n//*                  length 80, one result per line (useful for     *   FILE 497\n//*                  later sorting via ISPF or for putting into     *   FILE 497\n//*                  some EXCEL file)                               *   FILE 497\n//*        CSVLPGMS  example of a list of pgms (routines) to        *   FILE 497\n//*                  monitor                                        *   FILE 497\n//*        CSVOUT    example of OUTPUT from CSVLL1X1                *   FILE 497\n//*        J         a JOB card, used just to avoid retyping it     *   FILE 497\n//*        _other_   macros needed for compilation of CSVLLLST,     *   FILE 497\n//*                  CSVLL1X1                                       *   FILE 497\n//*                                                                 *   FILE 497\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BIDI": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME BIDI &A,&DA,&ZERO\n&NAME BIPA BIPAWORK(8),&DA\n PADI  &A,BIPAWORK(8),&ZERO\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BIPA": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME BIPA &A,&DA\n COPY SYSGBL\n SPLIT &DA\n AIF (&BIPA).NODC\n&BIPA SETB 1\n CNOP 0,8\n B *+16\nBIPAWORK DC D'0'\n.NODC AIF ('&OT'  NE 'REG').NOREG\n&NAME LR 1,&O\n AGO .COMMON\n.NOREG AIF (&OL NE 1).NOBYTE\n&NAME SR 1,1\n IC 1,&O\n AGO .COMMON\n.NOBYTE AIF (&OL NE 2).NOHW\n&NAME LH 1,&O\n AGO .COMMON\n.NOHW ANOP\n&NAME L 1,&O\n.COMMON CVD 1,BIPAWORK\n AIF ('&A' EQ 'BIPAWORK(8)').MEXIT\n SPLIT &A\n MVC &A,BIPAWORK+8-&OL\n.MEXIT MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLJOBS": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x00 ?\\x01\\x01\\x00O\\x11A\\x00m\\x01\\xf7\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2000-07-21T00:00:00", "modifydate": "2001-01-04T11:41:00", "lines": 109, "newlines": 503, "modlines": 0, "user": "ISECN13"}, "text": "* LIST OF JOBS TO MONITOR - USED BY CSVLLIX1\n* JOBNAMES MAY BE WHATEVER NAME, BUT MUST BE IN ALPHA ORDER\n* PLACE ISPF EDIT LABELS .FROM .TO   AND\n* SORT  .FROM .TO\n* RES LABEL\nJOBSTEP  EQU     8   JOBNAME LENGTH, INCLUDED PADDING\nJOBLIST  DS    0H\n         DC    CL8'IMSR00'\n         DC    CL8'IMSR01'\n         DC    CL8'IMSR02'\n         DC    CL8'IMSR03'\n         DC    CL8'IMSR04'\n         DC    CL8'IMSR05'\n         DC    CL8'IMSR06'\n         DC    CL8'IMSR07'\n         DC    CL8'IMSR08'\n         DC    CL8'IMSR09'\n         DC    CL8'IMSR10'\n         DC    CL8'IMSR11'\n         DC    CL8'IMSR12'\n         DC    CL8'IMSR13'\n         DC    CL8'IMSR14'\n         DC    CL8'IMSR15'\n         DC    CL8'IMSR16'\n         DC    CL8'IMSR17'\n         DC    CL8'IMSR18'\n         DC    CL8'IMSR19'\n         DC    CL8'IMSR20'\n         DC    CL8'IMSR21'\n         DC    CL8'IMSR22'\n         DC    CL8'IMSR23'\n         DC    CL8'IMSR24'\n         DC    CL8'IMSR25'\n         DC    CL8'IMSR26'\n         DC    CL8'IMSR27'\n         DC    CL8'IMSR28'\n         DC    CL8'IMSR29'\n         DC    CL8'IMSR30'\n         DC    CL8'IMSR31'\n         DC    CL8'IMSR32'\n         DC    CL8'IMSR33'\n         DC    CL8'IMSR34'\n         DC    CL8'IMSR35'\n         DC    CL8'IMSR36'\n         DC    CL8'IMSR37'\n         DC    CL8'IMSR38'\n         DC    CL8'IMSR39'\n         DC    CL8'IMSR40'\n         DC    CL8'IMSR41'\n         DC    CL8'IMSR42'\n         DC    CL8'IMSR43'\n         DC    CL8'IMSR44'\n         DC    CL8'IMSR45'\n         DC    CL8'IMSR46'\n         DC    CL8'IMSR47'\n         DC    CL8'IMSR48'\n         DC    CL8'IMSR49'\n         DC    CL8'IMSR50'\n         DC    CL8'IMSR51'\n         DC    CL8'IMSR52'\n         DC    CL8'IMSR53'\n         DC    CL8'IMSR54'\n         DC    CL8'IMSR55'\n         DC    CL8'IMSR56'\n         DC    CL8'IMSR57'\n         DC    CL8'IMSR58'\n         DC    CL8'IMSR59'\n         DC    CL8'IMSR60'\n         DC    CL8'IMSR61'\n         DC    CL8'IMSR62'\n         DC    CL8'IMSR63'\n         DC    CL8'IMSR64'\n         DC    CL8'IMSR65'\n         DC    CL8'IMSR66'\n         DC    CL8'IMSR67'\n         DC    CL8'IMSR68'\n         DC    CL8'IMSR69'\n         DC    CL8'IMSR70'\n         DC    CL8'IMSR71'\n         DC    CL8'IMSR72'\n         DC    CL8'IMSR73'\n         DC    CL8'IMSR74'\n         DC    CL8'IMSR75'\n         DC    CL8'IMSR76'\n         DC    CL8'IMSR77'\n         DC    CL8'IMSR78'\n         DC    CL8'IMSR79'\n         DC    CL8'IMSR80'\n         DC    CL8'IMSR81'\n         DC    CL8'IMSR82'\n         DC    CL8'IMSR83'\n         DC    CL8'IMSR84'\n         DC    CL8'IMSR85'\n         DC    CL8'IMSR86'\n         DC    CL8'IMSR87'\n         DC    CL8'IMSR88'\n         DC    CL8'IMSR89'\n         DC    CL8'IMSR90'\n         DC    CL8'IMSR91'\n         DC    CL8'IMSR92'\n         DC    CL8'IMSR93'\n         DC    CL8'IMSR94'\n         DC    CL8'IMSR95'\n         DC    CL8'IMSR96'\n         DC    CL8'IMSR97'\n         DC    CL8'IMSR98'\n         DC    CL8'IMSR99'\nNJOBS    EQU   (*-JOBLIST)/8\n         DC    8X'FF'   END OF LIST, JUST IN CASE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLACC": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00O\\x01\\x01\\x00O\\x10\\x11\\x00\\x10\\x00\\x10\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-04T00:00:00", "modifydate": "2001-01-04T10:11:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13C  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* COMPILATION TO REPLACE MODULE CSVLLACT IN ISECN13.MODS.LOAD\n//* NOTE: PRODUCTION MODULE GOES TO SOME LINKLIST LIBRARY\n//*\n//STEP1   EXEC ASMACL,\n//        PARM.C='RENT,OBJECT,NODECK',\n//        PARM.L='RENT,REUS,XREF,LIST'\n//C.SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE\n//C.SYSIN   DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVLLACT)\n//L.SYSLMOD DD  DISP=SHR,DSN=ISECN13.MODS.LOAD\n//L.SYSIN   DD  *\n NAME CSVLLACT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLACJ": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x002_\\x01\\x01\\x00\\x9f\\x145\\x00\\x07\\x00\\x06\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-09T14:35:00", "lines": 7, "newlines": 6, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13A  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* JOB TO ACTIVATE DATA COLLECTION BY CSVLLIX1 EXIT\n//* CSVLLACT MUST BE IN A LINKLIST LIBRARY\n//*\n//ACT     EXEC PGM=CSVLLACT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLACT": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x002_\\x01\\x01\\x00O\\x10\\x05\\x00\\x08\\x00\\x08\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-04T10:05:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "ISECN13"}, "text": "CSVLLACT CSECT\n*\n* THE ROUTINE DOES NOTHING (IT IS AN IEFBR14)\n* IT IS USED TO ACTIVATE CSVLLIX1 EXIT\n*\n         SR    15,15\n         BR    14\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLAL1": {"ttr": 540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x002_\\x01\\x01\\x00O\\tW\\x00\\x05\\x00\\x04\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-04T09:57:00", "lines": 5, "newlines": 4, "modlines": 0, "user": "ISECN13"}, "text": "EXIT1(OFF)\nLIBRARIES(SYS1.LINKLIB)  MEMBERS(CSVLLIX1)\n/*                                                                 */\n/* USED TO REFRESH EXIT CSVLLIX1                                   */\n/*                                                                 */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLAOF": {"ttr": 770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x002_\\x01\\x01\\x00\\x9f\\x12\\x18\\x00\\x04\\x00\\x04\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-09T12:18:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "ISECN13"}, "text": "EXIT1(OFF)\n/*                                                                 */\n/* USED TO DEACTIVATE EXIT CSVLLIX1                                */\n/*                                                                 */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLAON": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x002_\\x01\\x01\\x00\\x9f\\x12\\x18\\x00\\x04\\x00\\x04\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-09T12:18:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "ISECN13"}, "text": "EXIT1(ON)\n/*                                                                 */\n/* USED TO ACTIVATE EXIT CSVLLIX1                                  */\n/*                                                                 */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLDEA": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x002_\\x01\\x01\\x00O\\x10\\x06\\x00\\x08\\x00\\x08\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-04T10:06:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "ISECN13"}, "text": "CSVLLDEA CSECT\n*\n* THE ROUTINE DOES NOTHING (IT IS AN IEFBR14)\n* IT IS USED TO DEACTIVATE CSVLLIX1 EXIT\n*\n         SR    15,15\n         BR    14\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLDEC": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x00O\\x01\\x01\\x00O\\x114\\x00\\x10\\x00\\x10\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-04T00:00:00", "modifydate": "2001-01-04T11:34:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13C  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* COMPILATION TO REPLACE MODULE CSVLLDEA IN ISECN13.MODS.LOAD\n//* NOTE: PRODUCTION MODULE GOES TO SOME LINKLIST LIBRARY\n//*\n//STEP1   EXEC ASMACL,\n//        PARM.C='RENT,OBJECT,NODECK',\n//        PARM.L='RENT,REUS,XREF,LIST'\n//C.SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE\n//C.SYSIN   DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVLLDEA)\n//L.SYSLMOD DD  DISP=SHR,DSN=ISECN13.MODS.LOAD\n//L.SYSIN   DD  *\n NAME CSVLLDEA(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLDEJ": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x002_\\x01\\x01\\x00\\x9f\\x14(\\x00\\x07\\x00\\x06\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-09T14:28:00", "lines": 7, "newlines": 6, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13D  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* JOB TO DEACTIVATE DATA COLLECTION OF CSVLLIX1  EXIT\n//* CSVLLDEA MUST BE IN A LINKLIST LIBRARY\n//*\n//DEACT EXEC PGM=CSVLLDEA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLIXC": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x002_\\x01\\x01\\x00O\\x116\\x00\\x17\\x00\\x16\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-11-20T00:00:00", "modifydate": "2001-01-04T11:36:00", "lines": 23, "newlines": 22, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13C  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* COMPILATION TO REPLACE MODULE CSVLLIX1 IN ISECN13.MODS.LOAD\n//* NOTE: PRODUCTION MODULE GOES TO SYS1.LINKLIB\n//*\n//* TO ACTIVATE NEW VERSION      /F LLA,UPDATE=L1\n//*               AND THEN       /F LLA,UPDATE=ON\n//*\n//STEP1   EXEC ASMACL,\n//        PARM.C='RENT,OBJECT,NODECK',\n//        PARM.L='RENT,REUS,XREF,LIST'\n//C.SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE\n//C.SYSIN   DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVLLIX1)\n//L.SYSLMOD DD  DISP=SHR,DSN=ISECN13.MODS.LOAD\n//* MODULE IS NOT REQUIRED TO BE AUTHORIZED\n//* BUT MUST BELONG TO AN AUTHORIZED LIBRARY\n//* SO WE AUTHORIZE IT ANYWAY....\n//L.SYSIN   DD  *\n SETCODE AC(1)\n NAME CSVLLIX1(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLIX1": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x00\\x00\\x01\\x00\\x17_\\x01\\x01\\x00\\x9f\\x14%\\x01\\xe2\\x00\\xf8\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "2000-06-23T00:00:00", "modifydate": "2001-01-09T14:25:00", "lines": 482, "newlines": 248, "modlines": 0, "user": "ISECN13"}, "text": "         TITLE 'CSVLLIX1 - LLA Fetch Installation Exit'\nCSVLLIX1 CSECT\n***********************************************************************\n*\n*  BASE PROGRAM TAKEN FROM 'SYS1.SAMPLIB(CSVLLIX1)'\n*  See there for updated documentation about this exit in general\n*  Note: contrary to exit documentation, we don't serialize at all\n*        the access to the table that contains module usage\n*        this did not give any real problem in practice...\n*\n***********************************************************************\n* MAIN                                                                *\n***********************************************************************\nCSVLLIX1 AMODE 31\nCSVLLIX1 RMODE ANY\n         USING *,R15\n         PRINT GEN\n         SAVE  (14,12),,CSVLLIX1.SAMPLE.&SYSDATE..H.&SYSTIME SAVE REGS\n         STM   R14,R12,12(R13)         Save entry registers.\n         LR    R12,R15                 INITIALIZE BASE REGISTER.\n         DROP  R15                     Drop temporary addressability.\n         USING CSVLLIX1,R12            ESTABLISH R12 AS CODE REGISTER.\n*        INITIAL GETMAIN DONE AFTERWARD, ONLY IF REQUIRED\nSEEMODUL DS    0H\n         LR    R4,R1          LOAD REGISTER 4 WITH POINTER TO\n*                                      PARAMETER LIST\n         USING LLP1,R4                 ADDRESSABILITY TO LLP1.\n         LA    R2,LLP1PDS2    MODULE NAME  FROM INPUT PARMS\n         CLC   0(5,R2),CSVLL  SPECIAL NAMES THAT ACT AS TRIGGERS\n         BE    GOAHEAD        SPECIAL PROCESSING\n         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER\n         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA\n         LTR   R8,R8          ANY ADDRESS THERE ?\n         BZ    OUTQUICK       AREA NOT IN USE\n         USING TABFIRST,R8\n         LA    R3,MODLIST     MODULES LIST TABLE\nMODCHECK CLI   0(R3),C' '     END OF MODULE LIST\n         BE    OUTQUICK       THEN WE ARE NOT INTERESTED\n         CLC   0(MODSTEP,R2),0(R3) IF MODULE TO BE TAKEN CARE OF\n         BE    CHKJOBNM       SEE IF THE JOBNAME IS GOOD TOO\n         LA    R3,MODSTEP(R3) NEXT ENTRY\n         B     MODCHECK\n*        CHECK IF THE JOBNAME  IS ONE WE ARE INTERESTED IN\nCHKJOBNM DS    0H\n         USING PSA,R0\n         L     R2,PSAAOLD  ASCB OLD POINTER\n         USING ASCB,R2\n         L     R9,ASCBJBNI JOBNAME POINTER\n         LTR   R9,R9       IF ZERO, WE USE ASCBJBNS\n         BNZ   OKJOBNAM\n         L     R9,ASCBJBNS\n         LTR   R9,R9       IF ZERO, WE GIVE UP - SHOULD NOT OCCUR\n         BZ    OUTQUICK\nOKJOBNAM LR    R2,R9\n         DROP  R2\n*\n*        SCAN JOBNAMES TABLE WITH BINARY SCAN\n*\n         LA    R9,JOBLIST             JOB NAMES TABLE FIRST ELEMENT\n         LR    R10,R9\n         LA    R10,NJOBS*8(R10)  JOB NAMES TABLE LAST  ELEMENT\nSEEMORE  DS    0H\n         SR    R0,R0\n         LR    R1,R10                 FOR LATER COMPARE\n         SR    R1,R9\n         D     R0,=F'8'   DIVIDE BY JOBNAME TABLE STEP\n         LTR   R0,R0      ANY REMAINDER\n         BZ    DONTADD\n         LA    R1,1(R1)   +1, JUST IN CASE\nDONTADD  DS    0H\n         LR    R5,R1\n         SRL   R5,1   / 2\n         LTR   R5,R5\n         BNH   SEETHIS\n         SLL   R5,3   * 8\n         AR    R5,R9 SOMEWHERE IN THE MIDDLE\n         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME\n         BE    GOAHEAD\n         BL    GODOWN\n         B     GOUP\n*\nGODOWN   LR    R9,R5  AFTER THIS PART OF THE TABLE\n         B     SEEMORE\n*\nGOUP     LR    R10,R5 BEFORE THIS PART OF THE TABLE\n         B     SEEMORE\n*\nSEETHIS  LR    R5,R9\n         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME\n         BE    GOAHEAD\n         LR    R5,R10\n         CLC   0(8,R5),0(R2)     TABLE JOBNAME / CURRENT JOBNAME\n         BE    GOAHEAD\n         B     OUTQUICK\n*        EXITING BEFORE HAVING DONE THE GETMAIN IS FROM LABEL OUTQUICK\nGOAHEAD  DS    0H\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN\n*                                      FOR AREA IN SUBPOOL 0\n         LTR   R15,R15                 GETMAIN CAN GO WRONG...\n         BNZ   OUTQUICK\n         LR    R11,R1                  LOAD REGISTER 11 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         USING DATD,R11                ESTABLISH ADDRESSABILITY TO\n*                                      GETMAINED AREA\n         ST    R13,SAVEAREA+4          SAVE REGISTER 13 FOR SAVEAREA\n*                                      CHAINING\n         LM    R0,R1,20(R13)           RELOAD REGISTERS 0 AND 1 FROM\n*                                      PREVIOUS SAVEAREA\n         ST    R11,8(,R13)             SAVE ADDRESS OF CURRENT SAVEAREA\n         LR    R13,R11                 LOAD REGISTER 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         CLC   LLP1PDS2(8),=CL8'CSVLLDEA' DEACTIVATE?\n         BE    FRETABLE                DO FREEMAIN OF TABLE\n*                                      AND CLEAR USER FIELD\n         CLC   LLP1PDS2(8),=CL8'CSVLLACT' SE DOBBIAMO INIZIARE LA COSA\n         BE    GETTABLE                DO GETMAIN OF TABLE\n         CLC   LLP1PDS2(5),CSVLL       other eventual csvll* ignores\n         BE    EXIT                    so, exit...\n         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER\n         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA\n         LTR   R8,R8          ANY ADDRESS THERE ?\n         BZ    EXIT                    ...EXIT NOT ACTIVE YET\n         B     INSERTIT\n*\nFRETABLE DS    0H\n         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER\n         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA\n         LTR   R8,R8          ANY ADDRESS THERE ?\n         BZ    EXIT           AREA NOT IN USE\n         L     R0,TABDATD              LOAD REGISTER 0 WITH SIZE FOR\n*                                      FREEMAIN\n         LR    R1,R8          ADDRESS OF AREA TO BE FREEMAINED\n         SR    R14,R14\n* Subpool 241 (ECSA, not FETCH PROTECTED)\n         LA    R14,241\n*        LA    R14,0         TESTONLY USE SUBPOOL 0\n         FREEMAIN RU,LV=(0),A=(1),SP=(14)\n*        IF FREEMAIN FAILS, GIVE UP\n         LTR   R15,R15\n         BNZ   EXIT\n         MVC   MSGLEN,=H'63'\n         MVC   MSGFLAG,=X'0200'\n         MVC   MSGID,=CL8'MSGID02'\n         MVI   JOBFILL,C' '\n         MVC   MESSAGE,=CL50'12345678 AREA RELEASED BY CSVLLIX1'\n         ST    R8,LLP1ADDR\n         UNPK  EXDIWORK(15),LLP1ADDR(8)\n         MVC   MESSAGE(8),EXDIWORK\n         TR    MESSAGE(8),TRTABLE-240\n         L     R8,LLP1USER\n         XC    0(4,R8),0(R8)    clear address of area\n         WTO   MF=(E,MSGAREA)\n         B     EXIT\nGETTABLE DS    0H\n         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER\n         L     R8,0(R8)       ADDRESS OF ACQUIRED AREA\n         LTR   R8,R8          ANY ADDRESS THERE ?\n         BNE   EXIT           AREA ALREADY ACQUIRED\n* Subpool 241 (ECSA, not FETCH PROTECTED)\n         L     R0,TABDATD              LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         SR    R14,R14\n         LA    R14,241\n*        LA    R14,0         TESTONLY USE SUBPOOL 0\n         GETMAIN RU,LV=(0),BNDRY=PAGE,LOC=ANY,SP=(14)\n*        if getmain fails, give up\n         LTR   R15,R15\n         BNZ   EXIT\n*\n         L     R8,LLP1USER    POINTER TO ACQUIRED AREA POINTER\n         ST    R1,0(R8)       FUTURE MEMORY\n         LR    R8,R1          TAB ADDRESS IN R8\n*        MOVELONG skipped area supposed to be clear\n*        PREPARE FOR MOVELONG\n*        LR    R0,R1          TO CLEAR\n*        SR    R1,R1          CLEAR REG\n*        ICM   R1,7,TABDATD+1  INSERT LENGTH\n*        LA    R14,=F'0'      A PLACE ZERO FILLED\n*        SR    R15,R15        ZERO LENGTH\n*        MVCL  R0,R14         CLEAR GETMAINED AREA (EVENTUALLY)\n         MVC   MSGLEN,=H'63'\n         MVC   MSGFLAG,=X'0200'\n         MVC   MSGID,=CL8'MSGID01'\n         MVI   JOBFILL,C' '\n         MVC   MESSAGE,=CL50'12345678 ADDRESS OF CSVLLIX1 TABLE'\n         ST    R8,LLP1ADDR\n         UNPK  EXDIWORK(15),LLP1ADDR(8)\n         MVC   MESSAGE(8),EXDIWORK\n         TR    MESSAGE(8),TRTABLE-240\n         WTO   MF=(E,MSGAREA)\n         USING TABFIRST,R8\n*        TABLE INITIALIZATION\n*        THE FIRST LINE CONTAINS COUNTERS ETC.\n*        THE SECOND LINE CONTAINS THE FIRST  4 CHARS OF JOBNAMES\n*        THE THIRD  LINE CONTAINS THE SECOND 4 CHARS OF JOBNAMES\n*        FROM THE FOURTH LINE, THE TABLE ITSELF\n         LA    R1,NJOBS   NJOBS UPPER LIMIT=4095 (100 AT THE MOMENT)\n         ST    R1,TABNJOBS\n         SLL   R1,2       X 4  FOUR BYTES FOR EACH COUNTER\n         LA    R1,8+4(R1) MODNAME, FLAGS\n         ST    R1,TABSTEP    STEP OF THE TABLE\n         XC    TABINUSE,TABINUSE NUMBER OF USED ELEMENTS\n         SR    R2,R2\n         L     R3,=AL4(TABSIZE)\n         DR    R2,R1\n         ST    R3,TABMAX   MAX NUMBER OF ENTRIES\n* THE REMAINING FIELDS OF FIRST LINE ARE INITIALIZED LATER\n         LR    R1,R8\n         A     R1,TABSTEP TO SECOND LINE\n         LA    R1,8(R1) TO START OF ELEMENTS\n         LR    R2,R1\n         A     R2,TABSTEP TO THIRD  LINE\n         LA    R3,JOBLIST\nMOVEJOBN CLI   0(R3),X'FF'  EOF MARKER\n         BE    EXIT         ...NOW WE HAVE AN EMPTY TABLE\n         MVC   0(4,R1),0(R3)\n         MVC   0(4,R2),4(R3)\n         LA    R1,4(R1)\n         LA    R2,4(R2)\n         LA    R3,8(R3)\n         B     MOVEJOBN\n*\n* R5 CONTAINS A POINTER TO THE CURRENT ENTRY IN THE JOB LIST\n*\nINSERTIT DS    0H\n         LA    R2,LLP1PDS2   MODULE NAME  FROM INPUT PARMS\n         LA    R9,JOBLIST    JOB NAMES TABLE FIRST ELEMENT\n         SR    R5,R9        COLUMN\n         SRL   R5,1         DISPLACEMENT (\u00a3 OF ENTRY X 4)\n*\n         CLC   TABSTART,=F'0'  IF FIRST ENTRY\n         BE    FIRSTONE\n         CLC   TABSTART,TABEND  IF SECOND ENTRY\n         BE    ONLYONE\n         L     R9,TABSTART\n         CLC   0(8,R2),0(R9)\n         BE    INCCOUNT\n         BL    NEWFIRST\n         L     R9,TABEND\n         CLC   0(8,R2),0(R9)\n         BE    INCCOUNT\n         BH    NEWLAST\n         LR    R6,R9\n         S     R6,TABSTEP\n* THEN IT IS INSIDE, DO A BINARY SEARCH\n* AT LEAST TWO ELEMENTS IN TABLE, AND THE ENTRY IS NOT AT THE\n* BOUNDARIES OF THE TABLE\n         L     R9,TABSTART    USEFUL START OF TABLE\n         L     R10,TABEND     LAST ENTRY IN TABLE\nSEEMORET DS    0H\n         SR    R0,R0   CLEAN R0\n         LR    R1,R10  TABEND\n         SR    R1,R9   -TABSTART\n         LTR   R1,R1   IF  ZERO, IT MUST BE HERE\n         BH    SETINCR\n         L     R9,TABSTART\n         B     SEETHIST\nSETINCR  DS    0H\n         C     R1,TABSTEP  IF == TABSTEP, IT MUST BE HERE\n         BE    SEETHIST\n         D     R0,TABSTEP  DIVIDE BY TABSTEP, AND TEST FOR REMAINDER\n         LR    R0,R0       ANY REMAINDER? IF SO ADD ONE TO RESULT\n         BZ    DONTADDT\n         LA    R1,1(R1)    ADD ONE...\nDONTADDT DS    0H\n         SRL   R1,1        DIVIDE BY TWO\n         LR    R6,R1\n         MH    R6,TABSTEP+2   AN INCREMENT\n         LTR   R6,R6\n         BNH   SEETHIST\n         AR    R6,R9 SOMEWHERE IN THE MIDDLE\n         CLC   0(8,R2),0(R6)     INPUT MODNAME / TABLE MODNAME\n         BE    GOAHEADT\n         BH    GODOWNT\n         B     GOUPT\n*\nGODOWNT  LR    R9,R6  AFTER THIS PART OF THE TABLE\n         LR    R6,R1\n         B     SEEMORET\n*\nGOUPT    LR    R10,R6 BEFORE THIS PART OF THE TABLE\n         LR    R6,R1\n         B     SEEMORET\n*\nGOAHEADT LR    R9,R6  WE ARE IN THE GOOD ENTRY\n         B     INCCOUNT\n*\nSEETHIST DS    0H\n*        CR    R9,R10\n*        BNE   *+6\n*        DC    H'0'\n         LR    R6,R9\n         CLC   0(8,R6),0(R2)     TABLE MODNAME / CURRENT MODNAME\n         BE    INCCOUNT\n         BH    INSBEFOR\n*        DC    H'0'\n         B     INSAFTER\n*\nINSAFTER DS    0H\n         A     R9,TABSTEP\n         B     INSBEFOR\n*\nFIRSTONE DS    0H\n         LR    R9,R8  START OF TAB\n         A     R9,TABSTEP  TO THE SECOND LINE\n         A     R9,TABSTEP  TO THE THIRD LINE\n         A     R9,TABSTEP  TO THE FOURTH (FIRST USEFUL) LINE\n         ST    R9,TABSTART DETAIL TABLE USAGE\n         ST    R9,TABEND\n         B     INITLINE\n*\nINITLINE DS    0H\n*        CLEAR THE NEW LINE\n         L     R1,TABSTEP\n         LR    R0,R9  CURRENT LINE\n         LA    R14,=F'0'\n         SR    R15,R15\n         MVCL  R0,R14\n*        INITIALIZE WITH MODULE NAME\n         MVC   0(8,R9),0(R2)  PUT IN MODULE NAME\n         L     R10,TABINUSE THERE IS ALWAYS A FIRST TIME\n         LA    R10,1(R10)  ADD ONE\n         ST    R10,TABINUSE THERE IS ALWAYS A FIRST TIME\n         B     INCCOUNT\n*\nONLYONE  DS    0H\n         L     R9,TABSTART    USEFUL  START OF TABLE\n         CLC   0(8,R2),0(R9)  SAME MODULE\n         BE    INCCOUNT\n         BL    NEWFIRST\n         B     NEWLAST\n*\n* ADD A NEW TABLE ENTRY BEFORE OR AFTER THE OLD ONE\n* SHIFT ACCORDINGLY ALL ENTRIES TO MAKE ROOM FOR THE NEW ONE\n*\nNEWLAST  DS    0H\n         CLC   TABINUSE,TABMAX\n         BNL   EXIT         IGNORE AFTER FILLING TABLE\n         L     R9,TABEND\n         A     R9,TABSTEP\n         ST    R9,TABEND    NEW END OF TABLE\n         B     INITLINE\n*\nNEWFIRST DS    0H\n*        MOVE EVERYTHING DOWN ONE LINE\n         CLC   TABINUSE,TABMAX\n         BNL   EXIT         IGNORE AFTER FILLING TABLE\n         L     R0,TABEND\n         A     R0,TABSTEP   - TARGET LINE\n         L     R14,TABEND   - SOURCE ADDRESS\nNEWFMVCL DS    0H\n         L     R1,TABSTEP   - TARGET LENGTH, ONE ENTRY\n         LR    R15,R1       - SOURCE LENGTH  = TARGET LENGTH\n         MVCL  R0,R14\n         S     R14,TABSTEP\n         S     R14,TABSTEP\n         S     R0,TABSTEP\n         S     R0,TABSTEP\n         C     R0,TABSTART\n         BL    NEWFDONE\n         B     NEWFMVCL\nNEWFDONE DS    0H\n         L     R0,TABEND\n         A     R0,TABSTEP\n         ST    R0,TABEND    - NEW LAST LINE\n         B     INITLINE\n*\nINSBEFOR DS    0H\n         CLC   TABINUSE,TABMAX\n         BNL   EXIT         IGNORE AFTER FILLING TABLE\n*        MOVE EVERYTHING DOWN ONE LINE,\n*        ENDING WITH THE CURRENT LINE (R9)\n         L     R0,TABEND\n         A     R0,TABSTEP   - TARGET LINE\n         L     R14,TABEND   - SOURCE ADDRESS\nINSBMVCL DS    0H\n         L     R1,TABSTEP   - TARGET LENGTH, ONE ENTRY\n         LR    R15,R1       - SOURCE LENGTH  = TARGET LENGTH\n         MVCL  R0,R14\n         S     R14,TABSTEP\n         S     R14,TABSTEP\n         S     R0,TABSTEP\n         S     R0,TABSTEP\n         CR    R0,R9\n         BL    INSBDONE\n         B     INSBMVCL\n* R9 SHOULD BE OK\nINSBDONE DS    0H\n         L     R0,TABEND\n         A     R0,TABSTEP\n         ST    R0,TABEND    - NEW LAST LINE\n         B     INITLINE\n*\n* INCREMENT COUNT - R5 CONTAINS NUMBER OF JOB IN THE TABLE\n*                   ALREADY IN FORM OF A DISPLACEMENT\nINCCOUNT DS    0H\n         L     R10,TABHITS\n         LA    R10,1(R10)\n         ST    R10,TABHITS\n         LA    R9,8(R9)   TO START OF COUNTERS\n         AR    R9,R5       GET TO THE ENTRY\n         L     R10,0(R9)   WHAT WAS THERE\n         LA    R10,1(R10)  ADD ONE\n         ST    R10,0(R9)   DONE UPDATE\n         B     EXIT\n*\n         DROP  R8\n***********************************************************************\n* EXIT WHEN NO GETMAIN DONE                                           *\n***********************************************************************\nOUTQUICK LA    R15,#RCIX1_DEFAULT      Initialize return code.\n         LA    R0,#RSIX1_DEFAULT       Initialize reason code.\n         L     R14,12(,R13)            Restore the return address.\n         LM    R1,R12,24(R13)          Restore others except R15 and R0\n         BR    R14                     Return to the caller.\n***********************************************************************\n* Standard exit linkage.                                              *\n***********************************************************************\nEXIT     L     R13,4(,R13)             RESTORE REGISTER 13\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF\n*                                      GETMAINED AREA\n         LR    R1,R11                  LOAD REGISTER 1 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n*         LTR   R15,R15\n*         BZ    *+6\n*        DC    H'0'\n         LA    R15,#RCIX1_DEFAULT      INITIALIZE RETURN CODE.\n         LA    R0,#RSIX1_DEFAULT       INITIALIZE REASON CODE.\n*                                      CODE\n         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN\n*                                      ADDRESS\n         LM    R1,R12,24(R13)          Restore others except R15 and R0\n         BR    R14                     Return to the caller.\n         YREGS\n*                                      return code at exit.\n         TITLE 'VARIOUS DATA AREAS'\n*        IN  THE TABLE ALL WHAT STARTS WITH...\nCSVLL    DC  CL5'CSVLL'\nTRTABLE DC C'0123456789ABCDEF'  for hexadecimal translation\n         LTORG\n*        PGMNAMES MONITORED\n         COPY  CSVLPGMS\n*        JOBNAMES MONITORED  (Keep in Alpha order)\n         COPY  CSVLJOBS\nTABFIRST DSECT\n         DS    0D\nTABSTEP  DS    F     LENGTH OF EACH LINE IN THE TABLE\nTABINUSE DS    F     NUMBER OF USED LINES SO FAR\nTABMAX   DS    F     MAX NUMBER OF LINES\nTABNJOBS DS    F     NUMBER OF JOBS PER EACH LINE\nTABHITS  DS    F     TOTAL NUMBER OF HITS\nTABSTART DS    F     START OF TABLE (POINTER TO FIRST USED LINE)\nTABEND   DS    F     END   OF TABLE (POINTER TO LAST  USED LINE)\nDATD     DSECT\n         DS    0F\nSAVEAREA DS    18F\nEXDIWORK DS    CL16\nLLP1ADDR DS    CL16\nMSGAREA  DS    0H\nMSGLEN   DS    H'0' 2+2+8+1+50=63\nMSGFLAG  DS    H'0'    0X0200 == 512\nMSGID    DS    CL8\nJOBFILL  DS    CL1\nMESSAGE  DS    CL50\nMSGLUNG  EQU   *-MSGAREA\nENDDATD  EQU   *\n         EJECT\nCSVLLIX1 CSECT\n         DS    0F\nSIZDATD  DC    AL1(0)\n         DC    AL3(ENDDATD-DATD)\nTABDATD  DC    AL4(TABSIZE)\nTABSIZE  EQU   1024*1024\n         EJECT\n         IHALLP1\n         IHAPSA  DSECT=YES,LIST=YES\n         CVT     DSECT=YES,LIST=YES\n         IHAASCB DSECT=YES,LIST=YES\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSVLLLSC": {"ttr": 1026, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x9f\\x01\\x01\\x00\\x9f\\x10X\\x00\\x10\\x00\\x10\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-09T00:00:00", "modifydate": "2001-01-09T10:58:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13C  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* COMPILATION TO REPLACE MODULE CSVLLLST IN ISECN13.MODS.LOAD\n//* NOTE: PRODUCTION MODULE GOES TO SOME LINKLIST LIBRARY\n//*\n//STEP1   EXEC ASMACL,\n//        PARM.C='OBJECT,NODECK',\n//        PARM.L='XREF,LIST'\n//C.SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE\n//C.SYSIN   DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVLLLST)\n//L.SYSLMOD DD  DISP=SHR,DSN=ISECN13.MODS.LOAD\n//L.SYSIN   DD  *\n NAME CSVLLLST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLLSJ": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x01\\x00)\\x0f\\x01\\x01\\x00\\x9f\\x142\\x00\\x0c\\x00\\x0e\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2000-10-16T00:00:00", "modifydate": "2001-01-09T14:32:00", "lines": 12, "newlines": 14, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN131  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//*--------------------------------------------------------------------\n//* LIST TABLE GENERATED BY  CSVLLIX1\n//*--------------------------------------------------------------------\n//*\n//STEP01  EXEC PGM=CSVLLLST,PARM='15D48000'\n//*                         PARM IS AN HEXADECIMAL ADDRESS,\n//*                         PARM MUST BE 8 BYTES LONG\n//STEPLIB DD DISP=SHR,DSN=ISECN13.MODS.LOAD\n//SYSPRINT  DD  SYSOUT=X\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLLLST": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x00\\x9f\\x01\\x01\\x00\\x9f\\x14C\\x00\\x8f\\x00\\x8f\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-09T00:00:00", "modifydate": "2001-01-09T14:43:00", "lines": 143, "newlines": 143, "modlines": 0, "user": "ISECN13"}, "text": "CSVLLLST TITLE 'CSVLLLST   PROGRAM'\n         PRINT NOGEN\nCSVLLLST SETAD R12,AMODE=31,RMODE=24,SUB=R10\n* ADDRESS OF IN CORE TABLE PASSED AS A PARM\n* IN HEXADECIMAL, 8 BYTES, FIXED LENGTH\n* IN OUTPUT    THE LIST OF THE TABLE\n* THE FIRST LINE OF THE TABLE CONTAINS SOME COUNTERS\n* THE SECOND AND THIRD LINE CONTAIN THE JOBNAMES\n* LINES FROM THE FOURTH ON CONTAINS DATA (COUNTERS)\n         PARMEXEC\n         OPD PRINT,O,L=133,R=FBA\n         C   R3,=F'8'\n         BE  MOVETAB\n         MVC I+1(40),=CL40'ADDRESS OF TABLE MUST BE LONG 8'\n         BIDI I+41(10),PARML\n         PUT PRINT,I\n         CLOSE (PRINT)\n         RET 8\n         DC  CL100' ' FILLER\nMOVETAB  MVC I+1(12),=CL12'TABLE AT: '\n         MVC I+20(8),0(R2)\n         PUT PRINT,I\n         SR  R4,R4  CLEAN REGISTER\nNEXTCIFR TM  0(R2),X'F0' NUMBER\n         BO  NUMBER\n* (ALPHABE)\n         NI  0(R2),X'0F' DROP SIGN\n         SR  R5,R5\n         IC  R5,0(R2)\n         LA  R5,9(R5)\n         SLL R4,4  MAKE ROOM\n         OR  R4,R5 PUT DATA IN R4\n         B   INCREM\nNUMBER   DS  0H\n         NI  0(R2),X'0F' DROP SIGN\n         SR  R5,R5\n         IC  R5,0(R2)\n         SLL R4,4  MAKE ROOM\n         OR  R4,R5 PUT DATA IN R4\nINCREM   LA  R2,1(R2)\n         BCT R3,NEXTCIFR\n         ST  R4,TABADDR\n         LTR R4,R4     ADDRESS = 0 ?\n         BNE PROCESSA  NO, FINE\n         STSTB\n         MVC ST(30),=CL30'ADDRESS NON VALID'\n         PUT PRINT,STB\n         CLOSE (PRINT)\n         RET 8\nPROCESSA DS  0H\n         STSTB\n*        EXDI ST(8),TABADDR(4)\n*        PUT PRINT,STB\n         L   R4,TABADDR\n         USING TABFIRST,R4\n         LR  R5,R4\n         A   R5,TABSTEP\n         ST  R5,TAB14\n         A   R5,TABSTEP\n         ST  R5,TAB58\n         EXDI ST2+10(8),00(4,R4)\n         EXDI ST2+20(8),04(4,R4)\n         EXDI ST2+30(8),08(4,R4)\n         EXDI ST2+40(8),12(4,R4)\n         EXDI ST2+50(8),16(4,R4)\n         EXDI ST2+60(8),20(4,R4)\n         EXDI ST2+70(8),24(4,R4)\n         EXDI ST2+80(8),28(4,R4)\n         L   R5,TABSTART\n         EXDI ST2+100(16),0(8,R5)\n         PUT PRINT,ST2\n         LA  R9,ST+122    END OF LINE\n         LTR R5,R5    EMPTY TABLE\n         BZ  ENDOFTAB\nNEXTLINE DS  0H\n         C   R5,TABEND\n         BH  ENDOFTAB\n         MVC ST(8),0(R5)\n         LA  R8,ST+20\n         LR  R7,R5\n         A   R7,TABSTEP   NEXT RECORD\n* FIND TOTAL FIRST\n         LA  R6,8(R5)\n         SR  R1,R1\nADDNUM   DS  0H\n         A   R1,0(R6)\n         LA  R6,4(R6)\n         CR  R6,R7\n         BL  ADDNUM\n         ST  R1,TOTMOD\n         BIDI ST+9(10),TOTMOD(4)\n         LA  R6,8(R5)\nNEXTJOBN CR  R6,R7\n         BNL EOENTRY\n         CLC 0(4,R6),=F'0'\n         BE  INCRETAB\n         BIDI 0(9,R8),0(4,R6)\n         LA  R8,10(R8)\n         LR  R10,R6    CURRENT ENTRY\n         SR  R10,R5    DISPLACEMENT\n         A   R10,TAB14 FIRST HALF JOBNAME\n         MVC 0(4,R8),0(R10)\n         LA  R8,4(R8)\n         LR  R10,R6    CURRENT ENTRY\n         SR  R10,R5    DISPLACEMENT\n         A   R10,TAB58 SECOND HALF JOBNAME\n         MVC 0(4,R8),0(R10)\n         LA  R8,4(R8)\nINCRETAB LA  R6,4(R6)\n         CR  R8,R9\n         BL  NEXTJOBN\n         PUT PRINT,STB\n         STSTB\n         LA  R8,ST+20\n         B NEXTJOBN\nEOENTRY  DS  0H\n         CLC RIGABLA,ST\n         BE  AR5STEP\n         PUT PRINT,STB\n         STSTB\nAR5STEP  A   R5,TABSTEP\n         B   NEXTLINE\nENDOFTAB DS  0H\n         CLOSE (PRINT)\n         RET  0\nRIGABLA  DC   CL132' '\nTOTMOD   DC   F'0'  NUMBER LOADS FOR THIS MODULE\nTABADDR  DC   F'0'  TABLE ADDRESS (COUNTERS)\nTAB14    DC   F'0'  FIRST   4 BYTES JOBNAME\nTAB58    DC   F'0'  SECOND  4 BYTES JOBNAME\nI        DC   CL133' '\nST2      DC   CL133' '\n         STBST\nTABFIRST DSECT\n         DS    0D\nTABSTEP  DS    F     LENGTH OF EACH LINE IN THE TABLE\nTABINUSE DS    F     NUMBER OF USED LINES SO FAR\nTABMAX   DS    F     MAX NUMBER OF LINES\nTABNJOBS DS    F     NUMBER OF JOBS PER EACH LINE\nTABHITS  DS    F     TOTAL NUMBER OF HITS\nTABSTART DS    F     START OF TABLE (POINTER TO FIRST USED LINE)\nTABEND   DS    F     END   OF TABLE (POINTER TO LAST  USED LINE)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLL1XC": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x00\\x9f\\x01\\x01\\x00\\x9f\\x10U\\x00\\x10\\x00\\x10\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-09T00:00:00", "modifydate": "2001-01-09T10:55:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13C  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*\n//* COMPILATION TO REPLACE MODULE CSVLL1X1 IN ISECN13.MODS.LOAD\n//* NOTE: PRODUCTION MODULE GOES TO SOME LINKLIST LIBRARY\n//*\n//STEP1   EXEC ASMACL,\n//        PARM.C='OBJECT,NODECK',\n//        PARM.L='XREF,LIST'\n//C.SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE\n//C.SYSIN   DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVLL1X1)\n//L.SYSLMOD DD  DISP=SHR,DSN=ISECN13.MODS.LOAD\n//L.SYSIN   DD  *\n NAME CSVLL1X1(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLL1XJ": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x006?\\x01\\x01\\x00\\x9f\\x144\\x00\\r\\x00\\r\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-12-28T00:00:00", "modifydate": "2001-01-09T14:34:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13J  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n//*--------------------------------------------------------------------\n//* LIST TABLE PRODUCED BY CSVLLIX1, ONE ENTRY PER LINE\n//* OUTPUT CAN GO INTO A MODULE OF A SOURCE PARTITIONED DATA SET\n//*--------------------------------------------------------------------\n//*\n//STEP01  EXEC PGM=CSVLL1X1,PARM='15D48000'\n//*                         PARM IS AN HEXADECIMAL ADDRESS,\n//*                         PARM MUST BE 8 BYTES LONG\n//STEPLIB DD DISP=SHR,DSN=ISECN13.MODS.LOAD\n//SYSPRINT  DD  DISP=SHR,DSN=ISECN13.MODS.SOURCE(CSVOUT)\n//*         DCB=(RECFM=FB,LRECL=80,BLKSIZE=WHATEVER)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLL1X1": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x00\\x9f\\x01\\x01\\x00\\x9f\\x14I\\x00w\\x00w\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-09T00:00:00", "modifydate": "2001-01-09T14:49:00", "lines": 119, "newlines": 119, "modlines": 0, "user": "ISECN13"}, "text": "CSVLL1X1 TITLE 'CSVLL1X1   PROGRAM'\n         PRINT NOGEN\nCSVLL1X1 SETAD R12,AMODE=31,RMODE=24,SUB=R10\n* ADDRESS OF IN CORE TABLE PASSED AS A PARM\n* IN HEXADECIMAL, 8 BYTES, FIXED LENGTH\n* IN OUTPUT    THE LIST OF THE TABLE\n* THE FIRST LINE OF THE TABLE CONTAINS SOME COUNTERS\n* THE SECOND AND THIRD LINE CONTAIN THE JOBNAMES\n* LINES FROM THE FOURTH ON CONTAINS DATA (COUNTERS)\n         PARMEXEC\n         OPD PRINT,O,L=80,R=FB\n         C   R3,=F'8'\n         BE  MOVETAB\n         MVC I+1(40),=CL40'ADDRESS OF TABLE MUST BE LONG 8'\n         BIDI I+41(10),PARML\n         PUT PRINT,I\n         CLOSE (PRINT)\n         RET 8\n         STBST\nMOVETAB  SR  R4,R4  CLEAN REGISTER\nNEXTCIFR TM  0(R2),X'F0' NUMBER\n         BO  NUMBER\n* (ALPHABE)\n         NI  0(R2),X'0F' DROP SIGN\n         SR  R5,R5\n         IC  R5,0(R2)\n         LA  R5,9(R5)\n         SLL R4,4  MAKE ROOM\n         OR  R4,R5 PUT DATA IN R4\n         B   INCREM\nNUMBER   DS  0H\n         NI  0(R2),X'0F' DROP SIGN\n         SR  R5,R5\n         IC  R5,0(R2)\n         SLL R4,4  MAKE ROOM\n         OR  R4,R5 PUT DATA IN R4\nINCREM   LA  R2,1(R2)\n         BCT R3,NEXTCIFR\n         ST  R4,TABADDR\n         LTR R4,R4     ADDRESS = 0 ?\n         BNE PROCESSA  NO, OK\n         STSTB\n         MVC ST(30),=CL30'ADDRESS NON VALID'\n         PUT PRINT,ST\n         CLOSE (PRINT)\n         RET 8\nPROCESSA DS  0H\n         L   R4,TABADDR\n         USING TABFIRST,R4\n         LR  R5,R4\n         A   R5,TABSTEP\n         ST  R5,TAB14\n         A   R5,TABSTEP\n         ST  R5,TAB58\n*\n         L   R5,TABSTART\n         LTR R5,R5    EMPTY TABLE\n         BZ  ENDOFTAB\nNEXTLINE DS  0H\n         C   R5,TABEND\n         BH  ENDOFTAB\n         MVC ST(8),0(R5)\n         MVC CURRMOD,0(R5)\n         LR  R7,R5\n         A   R7,TABSTEP   NEXT RECORD\n* FIND  TOTAL  FIRST\n         LA  R6,8(R5)\n         SR  R1,R1\nADDNUM   DS  0H\n         A   R1,0(R6)\n         LA  R6,4(R6)\n         CR  R6,R7\n         BL  ADDNUM\n         ST  R1,TOTMOD\n         BIDI ST+20(10),TOTMOD(4)\n         MVC ST+10(8),=CL8'TOTAL   '\n         PUT PRINT,ST\n         LA  R6,8(R5)\nNEXTJOBN CR  R6,R7\n         BNL EOENTRY\n         CLC 0(4,R6),=F'0'\n         BE  INCRETAB\n         MVC ST(8),CURRMOD\n         BIDI ST+20(10),0(4,R6)\n         LR  R10,R6    CURRENT ENTRY\n         SR  R10,R5    DISPLACEMENT\n         A   R10,TAB14 FIRST PART  JOBNAME\n         MVC ST+10(4),0(R10)\n         LR  R10,R6    CURRENT ENTRY\n         SR  R10,R5    DISPLACEMENT\n         A   R10,TAB58 SECOND PART JOBNAME\n         MVC ST+14(4),0(R10)\n         PUT PRINT,ST\nINCRETAB LA  R6,4(R6)\n         B NEXTJOBN\nEOENTRY  DS  0H\n         A   R5,TABSTEP\n         B   NEXTLINE\nENDOFTAB DS  0H\n         CLOSE (PRINT)\n         RET  0\nRIGABLA  DC   CL132' '\nTOTMOD   DC   F'0'  NUMBER LOADS FOR THIS MODULE\nTABADDR  DC   F'0'  TABLE ADDRESS (COUNTERS)\nTAB14    DC   F'0'  FIRST   4 BYTES JOBNAME\nTAB58    DC   F'0'  SECOND  4 BYTES JOBNAME\nI        DC   CL133' '\nST2      DC   CL133' '\nCURRMOD  DC   CL8' '\nTABFIRST DSECT\n         DS    0D\nTABSTEP  DS    F     LENGTH OF EACH LINE IN THE TABLE\nTABINUSE DS    F     NUMBER OF USED LINES SO FAR\nTABMAX   DS    F     MAX NUMBER OF LINES\nTABNJOBS DS    F     NUMBER OF JOBS PER EACH LINE\nTABHITS  DS    F     TOTAL NUMBER OF HITS\nTABSTART DS    F     START OF TABLE (POINTER TO FIRST USED LINE)\nTABEND   DS    F     END   OF TABLE (POINTER TO LAST  USED LINE)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVLPGMS": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x01\\x00O\\x01\\x01\\x00\\x9f\\x10\\x01\\x00\\t\\x00\\x06\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-01-04T00:00:00", "modifydate": "2001-01-09T10:01:00", "lines": 9, "newlines": 6, "modlines": 0, "user": "ISECN13"}, "text": "* LIST OF PGMS TO MONITOR - USED BY CSVLLIX1\n* THIS LIST IS JUST A LIST OF NAMES STARTING WITH\n* IT IS SCANNED SEQUENTIALLY, SO KEEP IT SHORT...\nMODSTEP  EQU 3  CAN BE CHANGED, BUT THE TABLE BELOW MUST AGREE...\nMODLIST  DC  CL3'ABC'\n         DC  CL3'IKJ'\n         DC  CL3'IEA'\n         DC  CL3'IEF'\n         DC  CL3'   '  END OF LIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSVOUT": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x006?\\x01\\x01\\x00\\x9f\\tY\\x00\\x16\\x07a\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-12-28T00:00:00", "modifydate": "2001-01-09T09:59:00", "lines": 22, "newlines": 1889, "modlines": 0, "user": "ISECN13"}, "text": "* OUTPUT FROM PROGRAM CSVLL1X1 (SORTED BY HITS, USING ISPF)\nABCATIDA  TOTAL         206653\nABCCISTB  TOTAL         197871\nABCCISTI  TOTAL         197745\nABCCAUTH  TOTAL         114842\nABCCRACF  TOTAL         103424\nABCCAUT7  TOTAL         103284\nABCATIDA  IMSR82         91394\nABCCISTC  TOTAL          79663\nABCCAUTH  IMSR82         79463\nABCCAUT7  IMSR82         79463\nABCCRACF  IMSR82         79463\nABCCISTB  IMSR82         79463\nABCCISTI  IMSR82         79463\n*  (... ABOUT 2000 LINES OMITTED)\nABCCDIV   IMSR77             1\nABCCDIP2  IMSR77             1\nABCCDIP1  IMSR78             1\nABCCDIP2  IMSR79             1\nABCCDIP1  IMSR80             1\nABCCNZC   TOTAL              1\nABCPNZC   TOTAL              1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXDI": {"ttr": 1045, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME EXDI &A,&DA\n COPY SYSGBL\n LCLA &QU,&RE\n AIF (&EXDI).NODC\n&EXDI SETB 1\n B *+28\nEXDIFROM DC CL8' '\nEXDIWORK DC CL16' '\n.NODC AIF (&TRTABLE).NODC2\n&TRTABLE SETB 1\n B *+20\nTRTABLE DC C'0123456789ABCDEF'\n.NODC2 SPLIT &A\n&QU SETA &OL/14\n&RE SETA &OL-(&QU*14)\n AIF (&QU EQ 0).NOREG\n&NAME LA 14,&O    BYTE DA CUI INIZIARE A METTERE IL RISULTATO\n SPLIT &DA\n LA 1,&O  BYTE DA CUI INIZIARE LA VISUALIZZAZIONE\n AIF (&QU NE 1).OLTRE\n MVC EXDIFROM(7),0(1)\n AGO .OLTRE2\n.NOREG AIF (&RE EQ 0).MEXIT\n&QU SETA &RE/2\n&QU SETA &QU+&RE-(&QU*2)\n SPLIT &DA\n&NAME MVC EXDIFROM(&QU),&O\n UNPK EXDIWORK(15),EXDIFROM(8)\n MVC &A,EXDIWORK\n AGO .TRANSL\n.OLTRE LA 15,&QU\nIHB&SYSNDX.M MVC EXDIFROM(7),0(1)\n.OLTRE2 UNPK EXDIWORK(15),EXDIFROM(8)\n MVC 0(14,14),EXDIWORK\n LA 14,14(14)\n LA 1,7(1)\n AIF (&QU EQ 1).ENDLOOP\n BCT 15,IHB&SYSNDX.M\n.ENDLOOP AIF (&RE EQ 0).TRANSL\n&QU SETA &RE/2\n&QU SETA &QU+&RE-(&QU*2)\n MVC EXDIFROM(&QU),0(1)\n UNPK EXDIWORK(15),EXDIFROM(8)\n MVC 0(&RE,14),EXDIWORK\n.TRANSL TR &A,TRTABLE-240\n.MEXIT MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J": {"ttr": 1047, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00O\\x01\\x01\\x00O\\tI\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xe2\\xc5\\xc3\\xd5\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-04T00:00:00", "modifydate": "2001-01-04T09:49:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "ISECN13"}, "text": "//ISECN13J  JOB   (XM99999999999),COLOMBO,CLASS=6,MSGCLASS=9,\n//          NOTIFY=&SYSUID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OP": {"ttr": 1049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME OP &DCB,&IOU,&TO,&RC=8,&BR=,&J=NO\n  LCLC &OPT,&JM\n.* QUESTA MACRO SERVE PER APRIRE DEI DATASET E FARE IL TEST DI OPEN\n.* SE LA OPEN HA SUCCESSO, SI SALTA OLTRE, ALTRIMENTI  SI FINISCE\n.* IL PROGRAMMA CON RETURN CODE=8\n.* VOLENDO SI PUO (IN CASO DI OPEN NON FATTA) SALTARE A UNA LABEL\n.* PARAMETRI\n.* &DCB  LABEL DELLA MACRO DCB DEL FILE DA APRIRE\n.* &IOU MODO DI APERTURA I=INPUT O=OUTPUT U=UPDAT\n.* &TO SE PRESENTE, SI SALTA A QUESTA LABEL IN CASO DI INSUCCESSO\n.* &RC = RETURN CODE DA PASSARE IN CHIUSURA = DEFAULT=8\n.*     NELL'APERTURA . ALTRIMENTI SI PROSEGUE IN SEQUENZA\n.*  IL DCB SI PUO' DARE ANCHE IN REGISTER NOTATION (RX)\n AIF ('&IOU' EQ 'I').INPUT\n AIF ('&IOU' EQ 'O').OUTPUT\n AIF ('&IOU' EQ 'U').UPDAT\n MNOTE 8,'PARAMETRO NON VALIDO  &IOU '\n MEXIT\n.INPUT ANOP\n&OPT SETC 'INPUT'\n  AGO .OPE\n.OUTPUT ANOP\n&OPT SETC 'OUTPUT'\n AGO .OPE\n.UPDAT ANOP\n&OPT SETC 'UPDAT'\n.OPE ANOP\n AIF  ('&J' EQ 'NO').NOTIPEJ\n&JM SETC 'J'\n MNOTE *,'     OPEN TYPE=J'\n.NOTIPEJ ANOP\n MNOTE *,'     OPEN (&DCB.,&OPT.) '\n&NAME OPEN (&DCB.,&OPT.),TYPE=&JM\n  AIF ('&DCB'(1,1) EQ '(' ).REGISTR\n TM &DCB+48,X'10'\n.AIFF  ANOP\n AIF (T'&TO EQ 'O').NOBR\n MNOTE *,'     SE LA OPEN NON RIESCE SI SALTA A  &TO '\n BNO &TO\n MEXIT\n.REGISTR TM 48&DCB.,X'10'\n AGO .AIFF\n.NOBR  AIF ('&BR'  EQ '').NOBR1\n MNOTE *,'     SE LA OPEN NON RIESCE SI SALTA A  &BR '\n BNO &BR\n MEXIT\n.NOBR1 BO *+22\n MNOTE *,'     SE LA OPEN NON RIESCE RETURN   RC=&RC.'\n RET &RC\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OPD": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME OPD &DCB,&IOU,&DD=,&RC=8,&BR=,&L=,&B=,&R=,&M=,&D=PS,&E=NO,&BU=0, *\n               &BL=0,                                                  *\n               &J=NO,&S=NO,&O=,&EOD=YES,&K=0,&MNOTE=YES,&KO=,&LABEL=\n LCLC &DCBM,&IOUM,&DDM,&LM,&BM,&RM,&MM(3),&DM,&EM,&BUM,&JM,&SM,&EOM\n.* DCB + OPEN\n.* (DDNAME=SYSPRINT, LABEL DEL DCB=PRINT / SYSIN/IN ETC)\n.* PARAMETRI :\n.* DCB  LABEL DEL DCB E ULTIME LETTERE DEL DDNAME\n.* IOU  I=INPUT,O=OUTPUT,U=UPDAT (MODO DI APERTURA)\n.* DD   DDNAME EVENTUALE (SE DIVERSA DAL DEFAULT)\n.* L    LRECL       B   BLKSIZE     R   RECFM\n.* M    MACRF       D   DSORG       O   OPTCD\n.* E    SE NON = NO , GENERA EXIT LIST\n.* S    SE NON = NO , GENERA SYNAD\n.* J    SE NON = NO , GENERA OPEN TYPE=J\n.* BU   BUFNO\n.* DEFAULT : A ZERO (= LIBERA PER ESSERE FISSATI DA SCHEDA DD)\n.* DDNAME = SYSIN   FB  80\n.* DDNAME = SYSPRINT FBA 121\n.* DDNAME = SYSPUNCH   FB 80  PM\n.* DDNAME = SYSXXXXX  FB\n.* PER UPDAT  MACRF=(GL,PL)\n.* PER INPUT  MACRF=GM\n.* PER OUTPUT MACRF=PM\n&BUM  SETC '&BU'\n&LM SETC '0'\n&DM SETC  '&D'\n&BM SETC '0'\n&EM SETC '1'\n&JM SETC 'NO'\n&EOM SETC '0'\n&SM SETC '1'\n AIF ('&IOU' NE 'U').IO\n.*\n&IOUM SETC 'UPDAT'\n&MM(1) SETC 'GL'\n&MM(2) SETC 'PL'\n AGO .RECFM\n.IO AIF ('&IOU' NE 'O').I\n&IOUM SETC 'OUTPUT'\n&MM(1) SETC 'PM'\n AGO .RECFM\n.I AIF ('&IOU' NE 'I').QUELCHE\n&IOUM SETC 'INPUT'\n&MM(1) SETC 'GM'\n  AGO .RECFM\n.QUELCHE  ANOP\n&IOUM SETC '&IOU'\n AGO .RECFM\n.RECFM  AIF ('&DCB' NE 'PRINT').LRECL\n&RM SETC 'FBA'\n AGO .LRECL\n.LRECL ANOP\n  AIF ('&DCB' EQ 'IN' OR '&DCB' EQ 'PUNCH').L80\n AIF ('&DCB' NE 'PRINT').L0\n&LM SETC '121'\n AGO .AD\n.L0 ANOP\n&LM SETC '0'\n AGO .AD\n.L80 ANOP\n&LM SETC '80'\n.AD ANOP\n AIF ('&S' EQ 'NO').NOSYNAD\n&SM SETC '&DCB.SYN'\n.NOSYNAD AIF ('&E' EQ 'NO').NOEXLST\n&EM SETC '&DCB.EXL'\n AIF ('&LABEL' EQ '').NOEXLST\n&EM SETC '&LABEL.EXL'\n.NOEXLST AIF ('&IOU' EQ 'O').NOEODAD\n AIF ('&EOD' NE 'YES').NOEODAD\n&EOM SETC '&DCB.EOD'\n.NOEODAD AIF ('&J' EQ  'NO').NOTYPEJ\n&JM SETC 'J'\n.NOTYPEJ AIF ('&DD' EQ '').DDN\n&DDM SETC '&DD.'\n AGO .LRE\n.DDN ANOP\n&DDM SETC 'SYS&DCB.'\n.LRE AIF ('&L' EQ '').OKL\n&LM SETC '&L.'\n.OKL AIF ('&B' EQ '').OKB\n&BM SETC '&B.'\n.OKB AIF ('&R' EQ '').OKR\n&RM SETC '&R.'\n.OKR ANOP\n AIF ('&M(3)'  EQ '').MD2\n&MM(3)  SETC '&M(3)'\n.MD2 ANOP\n AIF ('&M(2)'  EQ '').MD1\n&MM(2)  SETC '&M(2)'\n.MD1 ANOP\n AIF ('&M(1)'  EQ '').OKM\n&MM(1) SETC '&M(1)'\n.OKM AIF ('&BU' EQ '').OKBU\n&BUM SETC '&BU.'\n.OKBU ANOP\n AIF ('&MNOTE' EQ 'NO').AFTM\n MNOTE *,'&DCB     DCB                   DDNAME= &DDM, '\n MNOTE *,'     DSORG=&D,LRECL=&LM,BLKSIZE=&BM,RECFM=&RM,BUFL=&BL'\n MNOTE *,'     MACRF=(&MM(1),&MM(2),&MM(3)),SYNAD=&SM,EXLST=&EM,'\n MNOTE *,'     BUFNO=&BUM,OPTCD=&O,KEYLEN=&K,EODAD=&EOM'\n.AFTM ANOP\n&NAME B IHB&SYSNDX.1\n&LABEL  DS 0F\n&DCB DCB DDNAME=&DDM,DSORG=&D,LRECL=&LM,BLKSIZE=&BM,RECFM=&RM, *********\n               BUFL=&BL,                                       *********\n               SYNAD=&SM,EXLST=&EM,EODAD=&EOM,BUFNO=&BUM,  *************\n               MACRF=(&MM(1),&MM(2),&MM(3)),OPTCD=&O,KEYLEN=&K\nIHB&SYSNDX.1 OP &DCB,&IOU,&KO,J=&JM,RC=&RC,BR=&BR\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PADI": {"ttr": 1284, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    PADI  &A,&DA,&ZERO\n         COPY  SYSGBL\n         LCLA  &LA,&LDA\n         SPLIT &A\n&LA      SETA  &OL\n         AIF   ('&ZERO'  NE '').LEAVEZE\n         AIF   (&PADI).NODC\n&PADI    SETB  1\n         B     *+20\nPADIWORK DC    CL16' '\n.NODC    SPLIT &DA\n&LDA     SETA  2*&OL\n&NAME    MVC   PADIWORK(16),=CL16' '\n MVC PADIWORK+16-&LDA.(&LDA),=X'40202020202020202020202020202020'\n AIF ('&LDA' EQ '2' ).SKIP\n MVI PADIWORK+14,X'21'\n.SKIP ANOP\n ED PADIWORK+16-&LDA.(&LDA),&O\n MVC &A,PADIWORK+16-&LA\n MEXIT\n.LEAVEZE ANOP\n&NAME UNPK &A,&DA\n LA 1,&O  PER INDIRIZZAMENTO INDIRETTO\n LA 1,&LA-1(1)\n OI 0(1),X'F0'  TOGLI IL SEGNO\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMEXEC": {"ttr": 1286, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  MACRO\n&NAME PARMEXEC  &L=R3,&P=R2\n COPY SYSGBL\n CNOP 0,4\n&NAME L &P.,0(1)\n LH &L.,0(&P.) IN QUESTO REGISTRO LUNGHEZZA PARAMETER LIST\n LA &P.,2(&P.) IN QUESTO REGISTRO PUNTATORE INIZIO STRINGA PARAMETRI\n STH &L.,PARML\n ST &P.,PARMP\n AIF (&PARMEXE EQ 1).SKIP\n&PARMEXE SETB 1\n B *+10\nPARMP DC F'0'  PUNTATORE     INIZIO PARAMETRI\nPARML DC H'0'  LUNGHEZZA     STRINGA PARAMETRI\n MNOTE  *,' (&L) = LUNGHEZZA / (&P) = PUNTATORE PARAMETRI '\n MNOTE  *,' (PARML) = LUNG.-HALFWORD- / (PARMP) = PUNT. PARAMETRI '\n.SKIP  MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RET": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME RET &N\n&NAME L 13,4(13)  RESTORE SAVE AREA CALLING PGM\n AIF ('&N' NE '').USAN\n MNOTE *,'RETURN CODE OMITTED, ASSUMED = 0'\n RETURN (14,12),T,RC=0\n MEXIT\n.USAN RETURN (14,12),T,RC=&N\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETAD": {"ttr": 1290, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME SETAD &R,&N=Y,&E=Y,&S=S,&SUB=,&RMODE=24,&AMODE=24\n.* R = REGISTRI  EVENTUALMENTE SOTTO FORMA DI LISTA\n.* N = SE ESPANDERE IL NOME NELLA SAVE\n.* E = SE ESPANDERE GLI EQUATE PER AVERE I REGISTRI NELLA XREF\n.* S = NOME DELLA SAVE AREA\n.* SUB=  REGISTRO DA USARE PER JMPS/BEGS/ENDS SALTI A SUBROUTINE\n COPY SYSGBL\n LCLA &DISPL,&IND,&IND1\n LCLC &CS,&RE(15)\n AIF ('&SUB'  EQ '').IGNORE\n&BALREG SETC '&SUB'\n MNOTE *,'     &SUB USATO PER BAL A SUBROUTINES NEL PGM'\n.IGNORE ANOP\n&CS SETC '&SYSECT'\n AIF ('&CS' NE '').SAVE\n AIF ('&NAME' NE '').USENAME\n&CS SETC 'CS&SYSNDX'\n AGO .CS\n.USENAME ANOP\n&CS SETC '&NAME'\n&IND SETA 1\n.CS ANOP\n&CS CSECT\n&CS       RMODE  &RMODE\n&CS       AMODE  &AMODE\n.SAVE AIF (&IND EQ 1).NONASAV\n AIF ('&N' EQ 'NO').NONAME\n&NAME SAVE (14,12),T,&CS..DATE.&SYSDATE..TIME.&SYSTIME\n AGO .R13\n.NONASAV AIF ('&N' EQ 'NO').NONA\n SAVE (14,12),T,&CS..DATE.&SYSDATE..TIME.&SYSTIME\n AGO .R13\n.NONA SAVE (14,12),T\n AGO .R13\n.NONAME ANOP\n&NAME SAVE (14,12),T\n.R13 USING &CS,15\n AIF (T'&R(1) EQ 'O').DEFTOT\n AIF ('&R(1)' EQ '13' OR '&R(1)' EQ 'R13' OR '&R(1)' EQ 'RD').DEF\n.NO13 ST 13,&S+4\n LR &R(1),13\n LA 13,&S\n ST 13,8(&R(1))\n&RE(1)  SETC '&R(1)'\n DROP 15\n BALR &RE(1),0\n USING *,&RE(1)\nH&SYSNDX EQU *\n CNOP 0,4\n B *+76\n&S DC 18F'0'\n AGO .OTHREG\n.DEFTOT ANOP\n&RE(1) SETC '13'\n AGO .DEFNEXT\n.DEF ANOP\n&RE(1) SETC '&R(1)'\n.DEFNEXT ST &RE(1),&S+4\n LR 14,&RE(1)\n LA &RE(1),&S\n ST &RE(1),8(14)\n  DROP 15\n CNOP 0,4\n USING *,&RE(1)\nH&SYSNDX EQU *\n&S B *+72\n DC 17F'0'\n.OTHREG ANOP\n&IND SETA 1\n.PIUREG ANOP\n&IND1 SETA &IND\n&IND SETA &IND+1\n&RE(&IND) SETC '&R(&IND)'\n AIF ('&RE(&IND)' EQ '').EQUATE\n&DISPL SETA &DISPL+4096\n LA &RE(&IND),4095(&RE(&IND1))\n USING H&SYSNDX+&DISPL,&RE(&IND)\n LA &RE(&IND),1(&RE(&IND))\n AGO .PIUREG\n.EQUATE ANOP\n AIF ('&E' EQ 'NO').MEND\n SPACE 5\n AIF (&REGS EQ 1).SKIPREG\n YREGS\n.SKIPREG ANOP\nYES EQU 232  C'Y'  X'E8'\nNO  EQU 213  C'N'  X'D5'\nBLANK EQU 64 C' '  X'40'\n EJECT\n.MEND MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPLIT": {"ttr": 1293, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME SPLIT &T\n COPY SYSGBL\n LCLA &FR,&I,&IN,&IN2,&OK\n LCLB &DEF\n LCLC &XC,&OI(16)\n.*  RESTITUITI\n.*  &OT TIPO DI OPERANDO    OP OPPURE REG\n.*  &OL LUNGHEZZA OPERANDO\n.*  &O  OPERANDO PRIVO DI INDICAZIONI DI LUNGHEZZA\n&OT SETC 'OP'  DEFAULT OPERANDO (NON REGISTRO)\n&OL SETA 4     LUNGHEZZA DI DEFAULT\n&OC SETA 1  DIMENSIONE USATA DEL VETTORE ' O '\n AIF ('&NAME'  EQ '').LOOP\n&NAME EQU *\n.LOOP  ANOP\n&FR SETA &FR+1\n AIF (K'&T LT &FR).ENDT\n AIF ('&T'(&FR,1) EQ '(').LP\n AIF ('&T'(&FR,1) EQ ')').RP\n AIF ('&T'(&FR,1) EQ '''').SEGNO\n AIF ('&T'(&FR,1) EQ '+').SEGNO\n AIF ('&T'(&FR,1) EQ '-').SEGNO\n AIF ('&T'(&FR,1) EQ '/').SEGNO\n AIF ('&T'(&FR,1) EQ ',').SEGNO\n AIF ('&T'(&FR,1) EQ '*').SEGNO\n AIF (&I NE 0).OK\n&I SETA 1\n.OK ANOP\n&OI(&I) SETC '&OI(&I)'.'&T'(&FR,1)\n AGO .LOOP\n.LP AIF (&I NE 0).SEGNO\n&OT SETC 'REG'\n AGO .LOOP\n.SEGNO ANOP\n&I SETA &I+1\n&OI(&I)  SETC '&T'(&FR,1)\n&I SETA &I+1\n AGO .LOOP\n.RP AIF ('&OT' EQ 'REG').LOOP\n AGO .SEGNO\n.ENDT ANOP\n&OC SETA &I+2  SIZE ARRAY\n AIF ('&OI(2)'  EQ ',').FIRST\n&FR SETA 0   POINTER ARRAY\n.LOOP2 ANOP\n&FR SETA &FR+1   POINTER\n&I SETA &FR+2   POINTER+2\n.LOOP21 ANOP\n AIF (&I GT &OC).ENDSC\n AIF ('&OI(&FR)' EQ '(' AND '&OI(&I)' EQ ',').LDETTA\n AIF ('&OI(&FR)' EQ '(' AND '&OI(&I)' EQ ')').LUYN\n AGO .LOOP2\n.FIRST ANOP\n&OL SETA &OI(1)\n&FR SETA 1\n&DEF SETB 1\n AGO .LDETTA2\n.LDETTA ANOP\n&FR SETA &FR+1\n&OL SETA &OI(&FR)\n.SETB ANOP\n&DEF SETB 1\n.LDETTA2  ANOP\n&I SETA &FR+2\n AIF ('&I' GT '&OC').ENDLO\n&OI(&FR) SETC '&OI(&I)'\n&FR SETA &FR+1\n AGO .LDETTA2\n.ENDLO ANOP\n&OC SETA &FR\n AGO .ENDSC\n.LUYN AIF ('&T'(1,2) EQ 'X''' ).ENDSC\n&XC SETC '&OI(1)'\n&XC SETC '&XC'(1,1)\n AIF ('&XC' EQ '0' OR '&XC'  EQ '1' OR '&XC' EQ '2').ENDSC\n AIF ('&XC' EQ '3' OR '&XC'  EQ '4' OR '&XC' EQ '5').ENDSC\n AIF ('&XC' EQ '6' OR '&XC'  EQ '7' OR '&XC' EQ '8').ENDSC\n AIF ('&XC' EQ '9').ENDSC\n.LOOP3 ANOP\n&OC SETA &FR-1\n&OL SETA &OI(&FR+1)\n&DEF SETB 1\n&OI(&FR) SETC ''\n&OI(&FR+1) SETC ''\n&OI(&FR+2) SETC ''\n AGO .ENDSC\n.ENDSC ANOP\n AIF (&DEF).COMPAKT\n AIF (T'&T EQ 'U').COMPAKT\n AIF (T'&T EQ 'M').COMPAKT\n AIF (T'&T EQ 'N').COMPAKT\n&OL SETA L'&T\n.COMPAKT ANOP\n&O SETC '&OI(1)'.'&OI(2)'.'&OI(3)'.'&OI(4)'.'&OI(5)'.'&OI(6)'.'&OI(7)'.*\n               '&OI(8)'.'&OI(9)'.'&OI(10)'.'&OI(11)'.'&OI(12)'.'&OI(13)*\n               '.'&OI(14)'.'&OI(15)'.'&OI(16)'\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STBST": {"ttr": 1296, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME STBST\n COPY SYSGBL\n AIF (&STBST).MEND\n&STBST SETB 1\n CNOP 0,4\n&NAME B *+138  4+1+132\nSTB DC C' '\nST DC CL132' '\n.MEND MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STSTB": {"ttr": 1298, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " MACRO\n&NAME STSTB\n&NAME MVI STB,C' '\n MVC ST,STB\n MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSGBL": {"ttr": 1300, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " GBLA &OC,&OL,&COND,&REGS\n GBLB &ASBC,&BIPA,&BIODI,&COMPRES,&DATEHI,&DEVN,&DEVT,&EXDI,&FINDEL\n GBLB &FINDKEY,&FINDPAR,&GETDIR,&GETRRN,&IFTOTAL\n GBLB &MASTDC,&MASTHST,&MASTLOC,&MASTMOD,&MASTOPN,&MASTREC\n GBLB &MODULO,&NOMEPGM,&NUMERIC,&NUMDI\n GBLB &ONLINEV,&ONLINEA,&PADI,&PARMEXE,&PERCENT,&REVERSE\n GBLB &STBST,&TIMEHI,&TIOT,&TOTALDC,&TRTABLE,&UCB,&UTSDATE,&WORD\n GBLC &BALREG,&GPRRN(16),&LASTMAC,&O,&OT,&ROUTIN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT497/FILE497.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT497", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}