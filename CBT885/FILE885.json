{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013225000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1822366, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE885.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1822366, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1822366, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE885.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1e\\x03'", "DS1TRBAL": "b'\\xc2\\xd6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07\\xd7\\x00\\r\\x07\\xd9\\x00\\r\\x00\\x1f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00\\x04\\x01\\x195/\\x01\\x195/\\x10P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2019-12-18T00:00:00", "modifydate": "2019-12-18T10:50:04", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  885\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE885\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 25 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,626 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/18/19    10:50:04    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00T\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10U\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:55:54", "lines": 28, "newlines": 28, "modlines": 0, "user": "DOC"}, "text": "     $ASM      JCL to assemble/link HDISASM\n\n     $DOC      Documentation of HDISASM\n\n     $JCL      JCL to execute HDISASM\n\n     HDISASM   DISASM main program phase 0\n\n     HDISASM1  DISASM phase 1\n\n     HDISASM2  DISASM phase 2\n\n     HDISTC    Common Area\n\n     HDISTD    DSECT\n\n     HDISEQU   Variable\n\n     HDISOPT1  OP code table 1\n\n     HDISOPT2  OP code table 2\n\n     LOAD      XMIT OF LOAD loadlib\n\n     READLMOD  IEWBIND SUBROUTINE (ie Read PDSE load library)\n\n     WRITEOUT  Write record\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ASM": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00T\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10U\\x00\\x18\\x00\\x18\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:55:54", "lines": 24, "newlines": 24, "modlines": 0, "user": "DOC"}, "text": "//YOURA JOB SYS,'$ASM',\n//             MSGCLASS=X,MSGLEVEL=(1,1),CLASS=T,\n//             REGION=4096K,\n//             NOTIFY=&SYSUID\n//*\n//S0  EXEC ASMHCL,\n// PARM.ASM='OBJECT,NODECK,BATCH',\n// PARM.LKED='XREF,LET,LIST,NCAL'\n//ASM.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//           DD DISP=SHR,DSN=SYS1.MODGEN\n//           DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS\n//ASM.SYSIN DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(HDISASM)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(HDISASM1)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(HDISASM2)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(READLMOD)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(SRCHDSCT)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(BITMAP)\n//          DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(WRITEOUT)\n//LKED.SYSLMOD DD DISP=SHR,DSN=YOUR.BATCH.LOADLIB\n//LKED.SYSIN DD *\n NAME HDISASM(R)\n//\nYOU CAN USE TSO RECEIVE COMMAND TO CREATE THE LOAD MODULE HDISAM AND\nHDISSFTB FROM MEMBER LOAD AT THIS PDS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASMSG": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00 \\x01\\x195\\x1f\\x01 \"\\x7f\\x11\\x04\\x00\\x16\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2020-08-14T11:04:20", "lines": 22, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//S0  EXEC ASMACL,\n// PARM.C='OBJECT,NODECK,BATCH',\n// PARM.L='XREF,LET,LIST,NCAL'\n//C.SYSLIB DD DISP=SHR,DSN=SBGOLOB.R14.MACLIB\n//           DD DISP=SHR,DSN=SBGOLOB.R14.MODGEN\n//           DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885\n//C.SYSIN DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM1)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM2)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(READLMOD)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(SRCHDSCT)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(BITMAP)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(WRITEOUT)\n//L.SYSLMOD DD DISP=SHR,DSN=SBGOLOB.DISASM.NEW.LOAD\n//L.SYSIN DD *\n NAME HDISASM(R)\n//\nYOU CAN USE TSO RECEIVE COMMAND TO CREATE THE LOAD MODULE HDISAM AND\nHDISSFTB FROM MEMBER LOAD AT THIS PDS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASMSG2": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x195\\x1f\\x01 \"\\x7f\\x11\\x07\\x00\\x16\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2020-08-14T11:07:29", "lines": 22, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//S0  EXEC ASMACL,\n// PARM.C='OBJECT,NODECK,BATCH,FLAG(5)',\n// PARM.L='XREF,LET,LIST,NCAL'\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//           DD DISP=SHR,DSN=SYS1.MODGEN\n//           DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885\n//C.SYSIN DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM1)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(HDISASM2)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(READLMOD)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(SRCHDSCT)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(BITMAP)\n//          DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE885(WRITEOUT)\n//L.SYSLMOD DD DISP=SHR,DSN=SBGOLOB.DISASM.NEW.LOAD\n//L.SYSIN DD *\n NAME HDISASM(R)\n//\nYOU CAN USE TSO RECEIVE COMMAND TO CREATE THE LOAD MODULE HDISAM AND\nHDISSFTB FROM MEMBER LOAD AT THIS PDS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASM2": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10U\\x00\\x11\\x00\\x11\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:55:54", "lines": 17, "newlines": 17, "modlines": 0, "user": "DOC"}, "text": "//YOURA JOB SYS,'$ASM2',\n//             MSGCLASS=X,MSGLEVEL=(1,1),CLASS=T,\n//             REGION=4096K,\n//             NOTIFY=&SYSUID\n//*\n//S0  EXEC ASMHCL,\n// PARM.ASM='OBJECT,NODECK,BATCH',\n// PARM.LKED='XREF,LET,LIST,NCAL'\n//ASM.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//           DD DISP=SHR,DSN=SYS1.MODGEN\n//ASM.SYSIN DD DISP=SHR,DSN=YOUR.V486.FILE885.PDS(MVSC#SFT)\n//LKED.SYSLMOD DD DISP=SHR,DSN=YOUR.BATCH.LOADLIB\n//LKED.SYSIN DD *\n NAME HDISSFTB(R)\n//\nYOU CAN USE TSO RECEIVE COMMAND TO CREATE THE LOAD MODULE HDISAM AND\nHDISSFTB FROM MEMBER LOAD AT THIS PDS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00Q\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x01\\xab\\x01\\xab\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:51", "lines": 427, "newlines": 427, "modlines": 0, "user": "DOC"}, "text": "This version of the disassembler originated from CBT and the original\nauthor is Dick Thornton in 1986.  You can refer another version of\ndisassembler in CBT file 217 if the load module does not have RI, RIL\nand RRE instruction.\n\nThe difference between this version with file 217.\n1. It supports RI and RIL instructions\n   AHI, LHI, CLI, Jx, BRAS\n   AFI, LFI, CFI\n   Thanks that IBM introduced the new assembler instructions to simplify\n   assembler coding (ie Use relative branch instruction, it is no need\n   to specify the program base registers in the assembler program).\n2. It supports most RRE, RXE and RXY instructions.\n3. Bigger SYMBOL table\n4. Use linkage stack to save area and macro SVLNK is no longer required\n   Use RI instructions (ie change BE to JE, AH to AHI and etc) to\n   eliminate each program base register only have 4K restriction. Only\n   1 program register to keep track the internal variable of HDISASM.\n   New routines can added into HDISASM without major change to the\n   logic of HDISASM.\n5. Pre-assembler is also performed even no USING statement, as relative\n   jump instruction does not required program base register.\n\nThe difference between HDISASM with ASMDASM\n1. Conditional branch instructions use the extended mnemonics.\n2. ULABL is extended from 8 to 12 characters\n\nSample Output of HDISASM\n         AHI   R1,4\n         J     A001FC6                     BRANCH\nA001FBC  MVC   2(1,R1),1(R5)               COPY DATA\n         AHI   R1,3\nA001FC6  MVI   0(R1),X'5D'\nA001FCA  LR    R10,R1\n         S     R10,A0002B8\n         L     R9,A0002E4\n         BR    R9                          BRANCH\nA001FD6  MVC   A000334(8),4(R12)           COPY DATA\n         LA    R1,A00033B\nA001FE0  CLI   0(R1),C' '                  COMPARE\n         JNE   A001FEC                     BRANCH IF NOT EQUAL\n         BRCT  R1,A001FE0                  CALL SUBRTN\nA001FEC  LTR   R10,R10                     TEST\n\n3. Provide more comments for some assembler instructions\n\n\nTechnical problems\n==================\n1. Undocmented Assmembler instructions\n   The following assembler instructions are not documented in \"Principle\n   of Operations\".\n   0105, 0106\n   B25F, B264, B265, B266, B267 and B268\n2. Does not support load module in PDSE.\n3. Does not support RRF op codes.\n\nProgram description of dissassembler\n====================================\nHDISASM is a one-pass disassembler which produces an assembler language\nsource program from a CSECT within a load module. Control cards permit\nspecification of areas containing no instructions, allow base registers\nto be provided so that symbolic labels may be created during\ndisassembly, and definition of DSECTs to be used during disassembly.\nConditional branch instructions use the extended mnemonics, where\npossible, and explicit registers are denoted by R0, R1, ... R15.\nInformational comments are given on SVC's, and various BAL instructions\nto aid in creating a documented source program.\n\n1. JCL requirements:\n      a. EXEC card:        To execute PGM=HDISASM. A parm field may\n                           be specified if floating point and/or\n                           privileged instructions are to be\n                           found in the module.\n      b. STEPLIB DD card:  Optional, specify the PDS containing\n                           the module HDISASM.\n      c. LOADLIB DD card:  optional, specify PDS containing the\n                           modules HDISASM1 and HDISASM2, if other than\n                           a linklist library or STEPLIB.\n      d. SYSLIB DD card:   specify PDS containing the module to be\n                           disassembled.\n      e. SYSPRINT DD card: optional, specify the printed\n                           output dataset. BLKSIZE must be\n                           specified as a multiple of 121.\n                           RECFM=FBA,LRECL=121 is hard coded.\n      f. SYSPUNCH DD card: optional, specify printed output\n                           dataset. BLKSIZE must be specified\n                           as a multiple of 80.\n                           RECFM=FB,LRECL=80 is hard coded.\n      g. SYSIN DD card:    contains control cards. The MODULE-CSECT\n                           card is required. BLKSIZE must be a\n                           multiple of 80. RECFM=FB,LRECL=80 is\n                           hard-coded.\n\n\n2. PARM field on the EXEC card: Omit the parm field, unless floating\n        point and/or privileged instructions are to be found in the\n        CSECT being disassembled. When the parm field is not specified,\n        entries for the privileged and floating point instructions are\n        erased from the internal instruction tables used during\n        disassembly. Valid PARM fields are:\n\n            PARM=(SUPVR)     assemble privileged instructions\n            PARM=(FLTPT)     assemble floating point instructions\n            PARM=(SUPVR,FLTPT) assemble both privileged and\n                             floating point instructions.\n\n\n3. Control cards entered in the SYSIN dataset.\n        Data is contained only in columns 1-72. Columns 73-80 may be\n        used for any desired purpose. Comment cards may be entered with\n        an asterisk (*) in column 1. In addition, columns beyond the\n        last specified may be used for any purpose. Leading zeros must\n        be included in all fields giving hex or decimal data. Name\n        fields must be left justified with trailing blanks. Hex fields\n        may contain only the hex digits 0-9 and A-F, while decimal\n        fields may contain only digits 0-9.  The MODUKE-CSECT card must\n        be the first card in the input stream. DSECT definitions may not\n        include any other control cards. Using cards for DSECTs must be\n        entered at some point after the DSECT definition. Data-only\n        cards and program USING cards may be entered in any order except\n        within DSECT definitions.\n\n\n   a. MODULE-CSECT card (required), must be the first card in the SYSIN\n        stream. Specifies the module name and CSECT name. Module name\n        is required, and must name an entry in the directory of the PDS\n        specified by the SYSLIB DD card. CSECT name is optional. If\n        specified, the named CSECT must exist in the module. If omitted,\n        the CSECT with ESDid=0001 is disassembled.\n      format: free-form, with module name preceding CSECT name.\n              At least one blank must separate module name and\n              CSECT name. The names may be surrounded by any number\n              of blanks (see the JCL example).\n\n\n   b. Data-only card (optional). Used to describe areas of the CSECT\n                being disassembled which contain no instructions. Use of\n                this card eliminates creation of instructions from\n                constant data. Up to 256 data-only cards may be entered.\n                These cards may occur anywhere in the SYSIN stream after\n                the MODULE-CSECT card, but not within a DSECT definition\n                set.\n      format:\n              col  1-4  : literal 'data'\n              col   5   : blank\n              col  6-11 : offset to beginning of area in hex\n              col   12  : blank\n              col 13-18 : offset to end of area in hex\n\n\n\n   c. DSECT definitions (optional). A DSECT is defined by a header card\n              followed by a variable number of field definition cards\n              (up to 9999 of them). No other control card may be entered\n              within a DSECT definition. Up to 256 DSECT definitions may\n              be entered.\n\n      DSECT header card format:\n           col 1-8    : DSECT name\n           col 9      : blank\n           col 10-14  : literal 'DSECT'\n           col 15     : blank\n           col 16-19  : number of field cards to follow (decimal)\n\n      DSECT field card format:\n           col 1-8    : field name\n           col 9      : blank\n           col 10-13  : offset to left end of field (decimal)\n                        maximum offset is 4095\n           col 14     : blank\n           col 15-17  : length of field in bytes (decimal)\n                        maximum length is 256\n\n\n\n   d. Ulabl cards. These cards define user labels to be placed on\n                 statements within the program. If program base\n                 registers are set up with using cards, these will also\n                 be generated as symbolic operands on instructions.\n                 Format is:\n\n           col  1-5   : literal 'ulabl'\n           col   6    : blank\n           col  7-18  : label name\n           col  19    : blank\n           col 20-25  : offset to left end of field, in hex.\n           col  26    : blank\n           col 27-29  : length of field in dec. 256 is max.\n\n   e. Using cards. These cards define base register usage. Up to 256\n                 using cards may be entered. Use of these cards permits\n                 the disassembler to convert explicit base-displacement\n                 addresses to symbolic labels. Labels created within the\n                 program will be 7 characters long. The first character\n                 is 'A', followed by the 6-hex-digit offset to the\n                 label. A using card must be entered for each DSECT to\n                 be used.\n\n     format:\n\n          col 1-5   : literal 'USING'\n          col 6     : blank\n          col 7-12  : offset to begin loc for using range in hex\n                      (this is where the using statement will occur)\n          col 13    : blank\n          col 14-19 : offset to ending loc for using range in hex\n                      (this is where the drop statement will occur)\n          col 20    : blank\n          col 21    : base resister to be used (hex, 1-F)\n          col 22    : blank\n          col 23    : type, P=program base, D=DSECT base\n          col 24    : blank\n          col 25-30 : initial base register value if type P in hex\n          col 25-32 : DSECT name if type D\n\n\n4. Suggestions for use: On the first pass, do not use a SYSPUNCH DD\n          card, but print the SYSPRINT listing. Use the listing to\n          determine which registers are used as program base registers,\n          their initial values, and their ranges. Make up USING cards\n          for these. Find any places where no instructions should be\n          generated (only constants), and make up data-only cards for\n          these ranges. If you can determine any registers that are\n          bases for areas which can be used for DSECTs (CVT reference,\n          etc.), determine the range of valid use, and make up DSECT\n          definitions and using cards for these. Make a second run,\n          including the above cards, and creating a source program\n          output with the SYSPUNCH DD card.\n\n\n\n5. Output description:\n\n   a. SYSPUNCH: this output contains the disassembled source program.\n           Statement names begin in column 1, mnemonics begin in column\n           10, operands in col 16, and an occasional comment begins in\n           column 44. A sequence number (by tens) is in columns 73-80.\n           Comments are included to show the macro name associated with\n           SVC's, and other statements are flagged to aid in\n           identification of certain operations:\n\n              BALR 14,15              LINKAGE\n              BALR X,0                ADDRESS SET\n              other BALR'S            NON-STD LINKAGE\n              BAL 0,XXX and BAL 1,XXX PARM SET BRCH\n              BAL X,XXX               PERFORM\n              BCTR Rx,0               DECREMENT REGISTER BY ONE\n              BRAS Rx,XXX             CALL SUBRTN\n              BSM  Rx,Rx              RETURN AND SET AMODE\n              CPYA instructions       COPY ACCESS REGISTER\n              MVC instructions        COPY DATA\n              SAC instructions        ASC MODE TO AR MODE/PRIMARY MODE\n              STM instructions        SAVE REGS\n              STAM instructions       SAVE ACCESS REGS\n              LM  instructions        RESTORE REGS\n              B/JO instructions       BRANCH IF ONE\n              B/JZ  instructions      BRANCH IF ZERO\n              B/JE  instructions      BRANCH IF EQUAL\n              B/JNE instructions      BRANCH IF NOT EQUAL\n              B/J instructions        BRANCH\n              BR R14                  EXIT\n              Abs. location X'10'     CVT ADDRESS\n              Abs. location X'4C'     CVT ADDRESS\n              Other abs. locations    PSA REFERENCE\n\n           When used in explicitly in instructions, registers are\n           specified as R0, R1,... R15. An YREGS macro is generated at\n           the end of the program to create the appropriate EQU\n           statements. If any DSECTs were defined in the SYSIN dataset,\n           they will be near the end of the source program. The extended\n           mnemonics are used for conditional branches wherever\n           possible.\n\n\n\n    b. SYSPRINT content:\n\n       directory information: contains data from the directory\n                              entry of the module containing\n                              the CSECT to be disassembled.\n       ESD table: a formatted list of all external symbol entries\n                              found in the module.\n       RLD table: a formatted listing of all relocation dictionary\n                              entries pertaining to this CSECT.\n       user entered cards: a list of the cards entered by the user,\n                              with diagnostics, if appropriate.\n       phase 1 label table: a list of all the labels to be used during\n                              disassembly including those developed from\n                              ESD entries, RLD entries, and generated\n                              names resulting from using card\n                              processing.\n       text: a storage-dump formatted listing of the text which\n                              comprises the CSECT being disassembled.\n       source listing: a printout of the generated source program\n                              statements, including the hex value which\n                              resulted in the instruction's creation.\n\n\n6. User Abends:\n\n        HDISASM may end with one of two user abends:\n\n        U0777 - There is an invalid parm specified.\n        U0888 - Check in the SYSPRINT listing for an error message\n                describing the error causing the abend (e.g. table\n                overflow).\n\n\nProgram processing description.\n\n HDISASM functions:\n\n . Process the parm field, if any: set indicators used by\n   HDISASM1 and HDISASM2 to set up their instruction tables.\n . Open all files.\n . Get storage for the symbol table, RLD table, and data-only\n   tables (244,768 bytes total).\n . Process the module-CSECT card to obtain the member\n   and CSECT names.\n . Issue BLDL against SYSLIB to obtain directory info for\n   the member specified. If the specified member is an\n   alias, re-issue a BLDL for the real member. Print\n   directory information.\n . Point to the member in the SYSLIB PDS, and process the\n   member. Load modules contain an external symbol dictionary\n   followed by text and relocation dictionary information.\n   all ESD info for the module precedes the first control\n   record. A control record precedes each block of text.\n   RLD info for the text follows each text block. Processing\n   of load module information is as follows:\n   a. Build an external symbol table, using the CESD blocks.\n   b. Search for the desired CSECT as the table is being built. This\n      CSECT must be found before the first control record.\n   c. Read blocks until a control record for the desired CSECT is found\n      (by ESD-id).\n   d. When found, issue GETMAIN for an area large enough to contain the\n      entire text.\n   e. Place text blocks in contiguous storage locations and maintain\n      during disassembly.\n   f. Use RLD information for the CSECT to build the RLD table.\n . Load and perform HDISASM1.\n . If any errors found by HDISASM1, terminate processing.\n . Print the final label table to be used during disassembly.\n . Load and execute HDISASM2.\n . Generate the DSECT entries.\n . Generate the YREGS macro and end statements\n . Terminate processing\n . Note: The OP code table is created base upon IBM OP code table\n         ASMADOP and you can find it HLASM Toolkit loadlib.\n\n HDISASM1 functions:\n\n HDISASM1 is the second phase of disassembly, and is performed by\n HDISASM. A common data area, defined in HDISASM, is passed to this\n program on entry.\n\n The SYSIN file is read to exhaustion. Using cards are reformatted and\n stored in a table - up to 256 using statements may be entered. DSECT\n cards may follow the using statements. When used, DSECT statements are\n reformatted, and built into tables. A maximum of 256 DSECTs may be\n entered. Data only cards may be included before, between, or after\n DSECTs to show areas in the program where no instructions occur. Up to\n 256 data only areas may be specified.\n\n At eof on SYSIN, a pseudo dis-assembly pass is made using the text\n stored by HDISASM. Any resolvable address within the text is used to\n create a new entry in the label table, which will be used by HDISASM2\n in the actual dis-assembly pass.\n\n Disassembly tables are set up similarly to those used by HDISASM2 for\n the simulated disassembly performed in this module when any program\n base register using statements are entered.\n\n Storage is obtained for the DSECT table and using table, and addresses\n of these tables are stored in the common parameter area. Using and\n DSECT cards are edited, reformatted, and placed in the appropriate\n tables. If any errors are found, they are printed, and the disassembly\n will be terminated on return to HDISASM.\n\n Storage is obtained for the label table, and a simulated dis-assembly\n is performed to create label table entries for labels which will be\n generated for base-displacement addresses by HDISASM2. On return to\n HDISASM, these labels will be sorted with external symbol and RLD\n labels to form the final label table to be used by HDISASM2.\n\n\n\n HDISASM2 functions:\n\n This sub-program is called by HDISASM after completion of processing by\n HDISASM1. The final label table and module text is in an area of\n storage. A common parameter area is defined in HDISASM, and passed to\n this program.\n\n Text bytes are used to create assembly language statements, and\n machine instruction statements. Output is written to the SYSPUNCH\n dataset for further processing by other modules.\n\n A text byte is considered to be an instruction if it occurs on a\n halfword boundary, is a valid op-code, and is followed by a valid\n op-code. Unconditional branches need not be followed by a valid\n op-code, however. The privileged and floating point instructions are\n not treated as instructions unless the user specified their inclusion\n at exec time.\n\n\n\nInstallation.\n\n a. Assemble and link the three csects, HDISASM, HDISASM1, and HDISASM2.\n    The three csects will all be linked into a single module with entry\n    point HDISASM.\n b. The SVC table and instruction op code tables in HDISOPTB should be\n    checked for operating system validity, and currency with the\n    hardware from time to time. You can refer IBM opcode table ASMADOP\n    or \"Principle of Operations\"\n c. Direct technical inquiries, comments, suggestions for improvements,\n    etc, to:\n         albertcpcheng@hotmail.com\n\nFuture enhancement.\n a. Support MVS, CICS and DB2 mapping\n b. This version only format mnemonics up to 6 characters. It will\n    support OPCODE with mnemonics longer than 6 characters. For example\n    Instruction ALGHSIK is 7 characters.\n c. Format opcode E700-E7FF and EC00-ED49\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$JCL": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\x1f\\x00\\x1f\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:51", "lines": 31, "newlines": 31, "modlines": 0, "user": "DOC"}, "text": "//YOURD JOB SYS,'TESTJCL',\n//             MSGCLASS=X,MSGLEVEL=(1,1),CLASS=T,\n//             REGION=4096K,\n//             NOTIFY=&SYSUID\n//*\n//HDISASM EXEC PGM=HDISASM\n//STEPLIB  DD DISP=SHR,DSN=YOUR.LOADLIB\n//SYSPRINT DD SYSOUT=*,DCB=BLKSIZE=121\n//SYSLIB   DD DISP=SHR,DSN=SYS1.NUCLEUS\n//SYSPUNCH DD DUMMY\n//*YSPUNCH DD DSN=YOUR.ASM,DISP=(,CATLG),\n//*           UNIT=SYSDA,DCB=23440,\n//*           SPACE=(TRK,(5,2),RLSE)\n//SYSIN DD *\nIEANUC01 IEAVRT05\nFRRP     DSECT 0005\nFRRPX00      00000 004 R12 Code register\nFRRPX04      00004 004 R13\nFRRPX08      00008 004 R1 Input parameter\nFRRPX0C      00012 004\nFRRPX10      00016 004\nUSING 000022 000858 C P 000000\nDATA 000004 00001B\nDATA 0007EC 000858\nULABL SUBCOMP      000800 023 TIMEUSED SERVICE MODULE\nULABL MODLVL       000818 016 12212   HBB7790\nULABL IEAVRT05     000828 008\nULABL IEANUC01     000830 008\nULABL RT05FRR      000838 008\nULABL S_SC1CV      000840 005\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE885": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00Y\\x01\\x195/\\x01\\x195/\\x10I\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2019-12-18T00:00:00", "modifydate": "2019-12-18T10:49:59", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 885 is from Albert Cheng and contains an updated          *   FILE 885\n//*           Disassembler program which handles the new Jump       *   FILE 885\n//*           instructions, and so forth.  The new disassembler     *   FILE 885\n//*           is called HDISASM to distinguish it from older        *   FILE 885\n//*           programs of this type.                                *   FILE 885\n//*                                                                 *   FILE 885\n//*           email:  albertcpcheng@hotmail.com                     *   FILE 885\n//*                                                                 *   FILE 885\n//*     The difference between this version and File 217.           *   FILE 885\n//*                                                                 *   FILE 885\n//*     1. It supports RI and RIL instructions                      *   FILE 885\n//*        AHI, LHI, CLI, Jx, BRAS                                  *   FILE 885\n//*        AFI, LFI, CFI                                            *   FILE 885\n//*                                                                 *   FILE 885\n//*        Thankfully IBM has introduced the new assembler          *   FILE 885\n//*        instructions to simplify assembler coding.  For          *   FILE 885\n//*        example, if you use relative branch instructions,        *   FILE 885\n//*        there is no need to specify the program base             *   FILE 885\n//*        registers in the assembler program.                      *   FILE 885\n//*                                                                 *   FILE 885\n//*     2. It supports most RRE, RXE and RXY instructions.          *   FILE 885\n//*                                                                 *   FILE 885\n//*     3. Bigger SYMBOL table.                                     *   FILE 885\n//*                                                                 *   FILE 885\n//*     4. Uses linkage stack for save area, and macro SVLNK is     *   FILE 885\n//*        no longer required.  Use RI instructions (i.e.           *   FILE 885\n//*        change BE to JE, AH to AHI etc.) to elminate each        *   FILE 885\n//*        program base register having a 4K restriction.  Only     *   FILE 885\n//*        1 program register is now necessary to keep track        *   FILE 885\n//*        the internal variable of HDISASM.  New routines can      *   FILE 885\n//*        added into HDISASM without a major change to the         *   FILE 885\n//*        logic of HDISASM.                                        *   FILE 885\n//*                                                                 *   FILE 885\n//*     5. Pre-assembler is also performed even with no USING       *   FILE 885\n//*        statement, as relative jump instructions do not          *   FILE 885\n//*        required a program base register.                        *   FILE 885\n//*                                                                 *   FILE 885\n//*     The difference between HDISASM with ASMDASM:                *   FILE 885\n//*                                                                 *   FILE 885\n//*     1. Conditional branch instructions use the extended         *   FILE 885\n//*        mnemonics.                                               *   FILE 885\n//*                                                                 *   FILE 885\n//*     2. ULABL is extended from 8 charcters to 12 characters      *   FILE 885\n//*                                                                 *   FILE 885\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMA": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01>\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\x16\\x00\\x16\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.62", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 22, "newlines": 22, "modlines": 0, "user": "ASM"}, "text": "//ZSYSCCP1 JOB SYS,(ASSEMBLE),MSGCLASS=X,                               JOB01413\n//             MSGLEVEL=(1,1),REGION=8192K,CLASS=A,\n//             NOTIFY=&SYSUID\n//*         JCLLIB ORDER=(ZSYSCCP.JCL.CNTL)\n//*\n//S1  EXEC HLASMCL,\n// PARM.C='OBJECT,NODECK,BATCH,MACHINE(ZSERIES-6)',\n// PARM.L='XREF,LET,LIST,NCAL'\n//C.SYSLIB   DD DISP=SHR,DSN=ZSYSCCP.DISASM.MACLIB\n//           DD DISP=SHR,DSN=SYS1.MACLIB\n//           DD DISP=SHR,DSN=SYS1.MODGEN\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS\n//C.SYSIN    DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(HDISASM)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(HDISASM1)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(HDISASM2)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(READLMOD)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(SRCHDSCT)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(BITMAP)\n//           DD DISP=SHR,DSN=ZSYSCCP.FILE885.PDS(WRITEOUT)\n//L.SYSLMOD  DD DISP=SHR,DSN=ZSYSCCP.XXX.LOADLIB\n//L.SYSIN    DD *\n NAME HDISASMX(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BITMAP": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\x06\\x00\\x06\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 6, "newlines": 6, "modlines": 0, "user": "ASM"}, "text": "* FUTURE ENHANCEMENT\nBITMAP   CSECT\nBITMAP   RMODE ANY\nBITMAP   AMODE 31\n         SR    15,15                SET RC TO 0\n         BR    14                   RETURN TO CALLER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISASM": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\tg\\tg\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 2407, "newlines": 2407, "modlines": 0, "user": "ASM"}, "text": "DIS      TITLE '***** HDISASM DISASSEMBLY PHASE 0 *****'\n*DISASSEMBLER PROGRAM TO CREATE AN ASSEMBLER H SOURCE PROGRAM\n*FROM A LOAD MODULE IN A PDS. DD CARDS REQUIRED INCLUDE\n*SYSPRINT FOR MESSAGES AND DIAGNOSTICS USING BLKSIZE A MULTIPLE\n*OF 121, SYSLIB SPECIFYING THE PDS CONTAINING THE MEMBER,        FIX***\n*WHICH MUST BE A PDS, SYSPUNCH FOR THE ASSEMBLER SOURCE\n*PROGRAM, HAVING BLKSIZE A MULTIPLE OF 80, AND SYSIN\n*FOR THE CONTROL CARD INPUT. CONTROL INPUT MAY OPTIONALLY\n*BE ENTERED VIA THE PARM ON THE EXECUTE CARD. CONTROL\n*INFORMATION INCLUDES THE MEMBER NAME AND CSECT NAME\n*TO BE DISASSEMBLED. IF CSECT NAME IS OMITTED, THE CSECT\n*FOR ESD-ID 0001 WILL BE USED.\n*\n*\n* FILES USED BY THIS PROGRAM INCLUDE THE FOLLOWING:\n*\n* DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.\n*\n* DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING\n*                 DISASSEMBLED TEXT. (MAXBLK=18,960)\n*\n* DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A\n*                LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.\n*                (MAXBLK=18997)\n*\n* DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.\n*\n*\n* THE CONTROL CARD PROVIDES THE MEMBER NAME AND CSECT NAME\n* OF THE PROGRAM TO BE DISASSEMBLED. MEMBER NAME IS REQUIRED.\n* IF CSECT NAME IS OMITTED, THE CSECT WITH ESDID 0001 WILL\n* BE USED. FORMAT IS FREE-FORM. MEMBER NAME MUST PRECEDE CSECT\n* NAME. ANY NUMBER OF BLANKS MAY PRECEDE AND FOLLOW MEMBER NAME.\n* A COMMA MAY IMMEDIATELY FOLLOW MEMBER NAME IF DESIRED.\n*\n*\n* PARM DATA FROM THE EXECUTE CARD MAY BE USED TO SPECIFY\n* VALIDITY OF PRIVILEGED OR FLOATING POINT INSTRUCTIONS.\n* IF NOT SPECIFIED, PRIVILEGED AND FLOATING POINT OPERATION\n* CODES WILL NOT BE TREATED AS INSTRUCTION OP-CODES. TO\n* INCLUDE THESE INSTRUCTIONS, CODE:\n*     PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS\n*     PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS\n*     PARM=(SUPVR,FLTPT) BOTH\n*\n*\n*PROCESSING FLOW:\n* 1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER\n*    AND CSECT NAMES.\n* 2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR\n*    THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN\n*    ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT\n*    DIRECTORY INFORMATION.\n* 3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE\n*    MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY\n*    FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.\n*    ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL\n*    RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.\n*    RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING\n*    OF LOAD MODULE INFORMATION IS AS FOLLOWS:\n*    A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CEMD BLOCKS.\n*    B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING\n*       BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST\n*       CONTROL RECORD.\n*    C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED\n*       CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE\n*       TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD\n*       INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED\n*       DURING DISASSEMBLY.\n* 4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION\n*    DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.\n*\n*\n* ORIGINAL AUTHOR R THORNTON\n* MODIFIED BY ALBERT CHENG\n* ABSTRACT : PROGRAM IS MODIFIED TO DISASSEMBLE TO SUPPORT NEW\n*            ASSEMBLER INSTRUCTIONS BUT IT DOES NOT SUPPORT 64\n*            BIT INSTRUCTIONS\n* 1) ENLARGE THE LABEL TABLE FROM 2000 ENTRIES TO 12000 ENTRIES\n*    @01                                             (AC 13 MAR 92)\n* 2) ENLARGE THE I/O BUFFER FROM 20000 TO 32768\n*    @02                                             (AC 23 JUN 92)\n* 3) ENHANCEMENT\n*    A) USE NEW ASSEMBLER INSTRUCTION SUCH AS BAKR, PR, AHI AND ETC\n*    B) MERGE HDISASM, HDISASM1 AND HDISASM2 INTO ONE LOAD MODULE.\n*    C) SUPPORT CODE ONLY STATEMENT\n*       THIS STATEMENT ALLOWS THE BYPASSING OF THE FOLLOWING TESTS\n*       WHICH MIGHT IDENTIFY VALID INSTRUCTIONS AS DATA\n*       . 4 CONSECUTIVE IDENTICAL BYTES\n*       . 6 CONSECUTIVE VALID EBCDIC CHARACTERS\n*       . NEXT INSTRUCTION VALID OPCODE\n*    D) BUILD LABLE CESD ER TYPE\n*    @03                                             (AC 16 MAY 12)\n* 4) A) SUPPORT CTLBK STATMENT\n*       THIS STATEMENT ASSIGN BUILT-IN DSECT TO A DATA REGISTER\n*    B) WRITE LOAD MAP TO OUTPUT FILE LOADMAP AND YOU CAN SPECIFY\n*       //LOADMAP DD SYSOUT=*    or\n*       //LOADMAP DD DUMMY\n*    C) LOAD MAP PRINT FILE SUPPORTS MIXED CASE CHARACTERS\n*    D) SUPPORTS PDSE\n*    E) SUPPORT OPCODE LENGTH FROM 5 TO 6\n*       (NOTE : OPCODE LENGTH GREATER 7 IS NOT YET SUPPORT\n*                                                    (AC 22 APR 15)\n* 5) A) LOAD SFT AND GLOBAL MAPPING TABLE\n*    B) THE LENGTH OF USER DEFINED LABEL IS EXTENDED FROM 8 TO 12\n*    C) THE LENGTH OF DSECT FIELD IS EXTENDED FROM 8 TO 12\n*                                                    (AC 26 OCT 15)\n* 6) A) SUPPORT DOUBLE WORD ADDRESS\n*    B) ADD LABEL TO UNRESOLVED BINDER ADCON\n*    C) USE R3 AS DATA REGISTER\n*    D) CHANGE GETMAIN MACRO TO STORAGE\n*    E) SUPOPRT DISPLACEMENT UP TO 20479\n*                                                    (AC 22 JUL 16)\n* 7) A) ALTERNATE DSECT\n*                                                    (AC 22 DEC 16)\n****************************************************************\n*                                                              *\n* PROCESS THE PARM FIELD, IF ANY.                              *\n*                                                              *\n****************************************************************\n*\nHDISASM  CSECT\nHDISASM  RMODE ANY\nHDISASM  AMODE 31\n         J     BEGIN                                               @03A\n         DC    C'HDISASM '             MODULE NAME                 @03A\n         DC    C'01.10'                VERSION NUMBER              @06C\n         DC    C'&SYSDATE &SYSTIME'                                @03A\nBEGIN    BAKR  R14,0                   SAVE RSA IN LINKAGE STACK   @03A\n         LARL  R3,DATASTR                                          @06A\n         USING DATASTR,R3                                          @06A\n         L     R12,0(R1)               GET PARM FIELD ADDRESS\n         SR    R1,R1                   CLEAR WORK REG\n         ICM   R1,3,0(R12)             PICK UP PARM LENGTH\n         JZ    OPEN1                   NO PARM INFO ENTERED\n         CHI   R1,5                    5-BYTES OF PARM             @03C\n         JE    SGLPARM                 YES, SINGLE PARM FIELD\n         CHI   R1,11                   11-BYTES OF PARM            @03C\n         JE    DBLPARM                 YES, BOTH PARMS\nBADPARM  WTO   'INVALID PARM, SPECIFY ONLY SUPVR AND/OR FLTPT',        X\n               ROUTCDE=11\n         ABEND 777,DUMP\nSGLPARM  CLC   2(5,R12),C_SUPVR        IS PARM=SUPVR\n         JE    SUPARM                  YES\n         CLC   2(5,R12),C_FLTPT        PARM IS FLTPT\n         JNE   BADPARM                 NO, ERROR\n         MVI   FLPTASM,1               SET FLOATING POINT O.K.\n         J     OPEN1                   CONTINUE\nDBLPARM  CLC   2(5,R12),C_SUPVR        IS 1ST PARM SUPVR\n         JE    CK2FPT                  YES\n         CLC   2(5,R12),C_FLTPT        IS 1ST PARM FLTPT\n         JNE   BADPARM                 NO, ERROR\n         CLC   8(5,R12),C_SUPVR        IS 2ND PARM SUPVR         FIX***\n         JNE   BADPARM                 NO, ERROR\n         J     FPT2PARM                BOTH O.K.\nCK2FPT   CLC   8(5,R12),C_FLTPT        IS 2ND PARM FLTPT         FIX***\n         JNE   BADPARM                 YES\nFPT2PARM MVI   FLPTASM,1               SET FLOATING POINT O.K.\nSUPARM   MVI   PRIVASM,1               SET PRIVILEGED INSTR O.K.\n*\n****************************************************************\n*                                                              *\n* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY   *\n* TABLES, AND OPEN FILES.                                      *\n*                                                              *\n****************************************************************\n*\nOPEN1    OPEN  (SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT,LOADMAP,OUTPUT,REGUSE,OX\n               UTPUT),MODE=31\n         OPEN  (SYSLIB,,SYSIN),MODE=31     OPEN FILES\n         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.\n         JZ    NOCTL                   NO\n         SAM31\n         JAS   R9,GETCTL               EXTRACT DESIRED MEMBER AND CSECT\n         JAS   R9,BLDL                 ISSUE BLDL AND PRINT\n         MVI   CCAT,0                  INSURE TTR0\n         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE\n         STORAGE OBTAIN,LENGTH=32768,ADDR=(R1),SP=0 GET BUFFER STORAGE\n         ST    R1,BUFAD                SAVE BUFFER ADDRESS\n         STORAGE OBTAIN,LENGTH=304000,ADDR=(R1),SP=0               @04C\n*                                      GET SYMBOL TABLE STORAGE    @04C\n         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS\n         ST    R1,CURRSYM              SAVE CURRENT SYMBOL ADDR\n         MVI   0(R1),X'FF'             TABLE END INDIC\n         A     R1,ENDSYM               COMPUTE END ADDR\n         ST    R1,ENDSYM               STORE TBL END ADDR\n         STORAGE OBTAIN,LENGTH=96000,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                                      GET RLD TABLE STORAGE (20*4800)\n         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS\n         ST    R1,CURRLD               SAVE CURRENT RLD ADDR\n         MVI   0(R1),X'FF'             TABLE END INDIC\n         A     R1,ENDRLD               COMPUTE END ADDR +96000\n         ST    R1,ENDRLD               STORE TBL END ADDR\n         STORAGE OBTAIN,LENGTH=1801,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                            (257*7+2) GET DATA ONLY TABLE STORAGE\n         ST    R1,DATSTRT              SAVE TBL ADDRESS\n         MVC   0(3,R1),HIVAL           SET END VALUE\n         ST    R1,DATOCUR              SET CURRENT ADDRESS\n         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03C\n         ST    R1,DATOEND              SAVE END ADDR\n         MVC   PRT+15(29),MSG01        *** EXTERNAL SYMBOL TABLE ***\n         MVI   PCC,C'-'                SET SKIP 3 LINES\n         JAS   R9,PRINT                PRINT\n*        MVC   PRTLINE,SYMHDR1         SYM TBL HEADER\n*        JAS   R9,PRINT                PRINT\n         STORAGE OBTAIN,LENGTH=1544,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                            (257*6+2) GET CODE ONLY TBL STORAGE   @03A\n         ST    R1,CODSTRT              SAVE TBL ADDRESS            @03A\n         MVC   0(3,R1),HIVAL           SET END VALUE               @03A\n         ST    R1,CODOCUR              SET CURRENT ADDRESS         @03A\n         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03A\n         ST    R1,CODOEND              SAVE END ADDR               @03A\n         STORAGE OBTAIN,LENGTH=22200,ADDR=(R1),SP=0  600 CTLBK ENTRIES\n*                            (60*37)   SIZE OF CTLBK TABLE         @03A\n         ST    R1,CTLSTRT              SAVE TBL ADDRESS            @04A\n         MVC   0(3,R1),HIVAL           SET END VALUE               @04A\n         ST    R1,CTLOCUR              SET CURRENT ADDRESS         @04A\n         AHI   R1,22200                COMPUTE TABLE END ADDR      @04A\n         ST    R1,CTLOEND              SAVE END ADDR               @04A\n         LHI   R7,12000                12000 LABEL ENTRIES\n         MHI   R7,LABELL               COMPUTE LABEL TABLE SIZE\n         L     R1,CSTLENG              GET CSECT LENGTH\n         SRL   R1,2                    DIVIDE BY 4\n         MHI   R1,LABELL               TIMES LABEL ENTRY LENGTH\n         AR    R7,R1                   TOTAL LABEL TABLE LENGTH\n         STORAGE OBTAIN,LENGTH=(7),ADDR=(R1),SP=0                  @06C\n*                                      GET LABEL TBL STORAGE\n         ST    R1,LBLTBL               SAVE LABEL TBL ADDR\n         ST    R1,CURRLBL              SAVE CURRENT LABEL ADDR\n         AR    R1,R7                   COMPUTE LABEL TBL END ADDR\n         ST    R1,ENDLBL               SAVE END OF LBL TBL ADDR\n*\n****************************************************************\n*                                                              *\n* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *\n* AND TEXT ARE PROCESSED.                                      *\n*                                                              *\n****************************************************************\n*\nMAINLINE EQU   *                       MAINLINE ROUTINE\n         L     R6,BUFAD                GET BUFFER ADDRESS\n         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER\n         CHECK DECB                    AWAIT COMPLETION\n         CLC   IEWPLMH,0(R6)           BINDER ?                    @03A\n         JE    BINDER                  YES                         @03A\n         MVC   PRTLINE,SYMHDR1         SYM TBL HEADER\n         JAS   R9,PRINT                PRINT\n         CLI   0(R6),X'20'             CESD RECORD\n         JNE   TESTOTHR                NO\n         JAS   R9,CESDREC              PROCESS CESD RECORDS\n         J     MAINLINE                GO READ AGAIN\nTESTOTHR LARL  R9,CNTLRECS             ASSUME CONTROL RECORD\n         CLI   0(R6),1                 IT IS CONTROL\n         JE    PERFORM                 YES\n         CLI   0(R6),5                 IS IT CONTROL\n         JE    PERFORM                 YES\n         CLI   0(R6),13                IS IT CONTROL\n         JE    PERFORM                 YES\n         LARL  R9,RLDRECS              ASSUME RLD RECORD\n         CLI   0(R6),2                 IS IT RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),6                 IS IT RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),14                IS IT RLD\n         JE    PERFORM                 YES\n         LARL  R9,CTRLRECS             ASSUME CONTROL AND RLD\n         CLI   0(R6),3                 IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),7                 IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),15                IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         J     MAINLINE                NONE OF THESE, SKIP\nPERFORM  TM    PROCESS,X'80'           WAS CSECT FOUND\n         JZ    MISSCS                  NO, ERROR\n         BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE\n         TM    PROCESS,X'40'           MODULE PROCESSING DONE\n         JZ    MAINLINE                NO, GO READ AGAIN\n*        MVI   EOFSW+1,0               SET END OF FILE SWITCH\n         J     ENDINIT                 GO COMPLETE PROCESSING\nBINDER   DS    0H                                                  @03A\n         MVC   PRTLINE,SYMHDR2         SYM TBL HEADER              @03A\n         JAS   R9,PRINT                PRINT                       @03A\n         MVC   PRMEMBER,MEMBER         MOVE REQUESTED MEMBER NAME  @03A\n         MVC   PRMCSECT(L'CSECT),CSECT MOVE REQUESTED CSECT NAME   @03A\n         JAS   R14,GET_ESD             PROCESS ESD'S FOR THE CSECT @03A\n         JAS   R14,GET_RLD             PROCESS RLD'S FOR THE CSECT @03A\n         JAS   R14,GET_TEXT            GET TEXT FOR THE CSECT      @03A\n         JAS   R14,UPD_UNRESOLV        UPDATE UNRESOLVED           @06A\n         MVC   CURRLBL,TMPCLBL                                     @06A\n         J     ENDINIT\n*********************************************************************\n* PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH ALL THE ESD  *\n* ENTRIES RETURNED BY THE READLMOD SUBROUTINE. THE FIRST THREE ARE  *\n* NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN LD). THESE    *\n* WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONLY THE LD TYPES *\n* ARE USED.                                                         *\n* 1ST SD  - THE AMODE AND RMODE VALUES                              *\n* 2ND ED  - THE CSECT LENGTH                                        *\n* 3RD LD  - LABEL INFORMATION FOR THE CSECT ITSELF.                 *\n* ANY REMAINING LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY   *\n*           STATMENTS                                               *\n*********************************************************************\nGET_ESD  BAKR  R14,0                   SAVE CALLER'S REGISTERS     @03A\n         XC    PRMCURSR,PRMCURSR       CLEAR CURSOR FOR FIRST CALL @03A\nGE_GETIT MVC   PRMREQST,C_ESD          SHOW REQUEST IS FOR ESD DATA@03A\n         JAS   R9,READLMOD             GO READ THE ESD DATA        @03A\n         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?          @03A\n         JE    GE_EXIT                 NO                          @03A\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND   @03A\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER      @03A\n         USING ESDHEADR,R11                                        @03A\n         LA    R12,ESDHEND             POINT TO FIRST ELEMENT      @03A\n         USING ESDENTRY,R12                                        @03A\n         L     R7,CURRSYM                                          @03A\nGE_NEXT  MVC   ESDSYMB,BLANX           CLEAR SYMBOL NAME           @03A\n         LH    R1,ESDNAMEC             GET LENGTH OF SYMBOL        @03A\n         LTR   R1,R1                   ANY LENGTH?                 @03A\n         JZ    GEMVOWBK                NO                          @03A\n         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A\n         CHI   R1,8                    EXCESSIVE LENGTH?           @03A\n         JL    GE_MVNM2                NO                          @03A\n         LA    R1,7                    YES, SET MAX LENGTH         @03A\nGE_MVNM2 L     R2,ESDNAMEP             POINT TO THE SYMBOL         @03A\n         EX    R1,GEMVSYMX             MVC   ESDSYMB(1),0(R2)      @03A\nGEMVOWBK MVC   ESDOWNER,BLANX          PRE-CLEAR OWNER NAME        @03A\n         LH    R1,ESDRESCL             GET OWNER NAME LENGTH       @03A\n         LTR   R1,R1                   ANY LENGTH?                 @03A\n         JZ    GE_CTYPE                NO                          @03A\n         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A\n         CHI   R1,8                    EXCESSIVE LENGTH?           @03A\n         JL    GE_MVOW2                NO                          @03A\n         LA    R1,7                    YES, SET MAX LENGTH         @03A\nGE_MVOW2 L     R2,ESDRESCP             POINT TO OWNING NAME        @03A\n         EX    R1,GEMVOWNX             MOVE IN OWNING NAME         @03A\nGE_CTYPE CLC   ESDTYPE,C_SD            IS THIS AN SD (CSECT)?      @03A\n         JNE   GE_CTYP2                NO                          @03A\n         CLC   CSECT,ESDSYMB           SYMBOL SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP2                NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP2                NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JO    GE_CTYP2                YES                         @03A\n         MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE              @03A\n         MVC   CURRRMOD,ESDRMODE          AND RMODE                @03A\n         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A\nGE_CTYP2 CLC   ESDTYPE,C_ED            THIS AN ED?                 @03A\n         JNE   GE_CTYP3                NO                          @03A\n         CLC   ESDSYMB,C_B_TEXT        SYMBOL NAME IS B_TEXT?      @03A\n         JNE   GE_CTYP3                NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP3                NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JO    GE_CTYP2                YES                         @03A\n         MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH        @03A\n         MVC   TEXTLENG,ESDLENG           TWICE                    @03A\n         MVC   CSTLENG,ESDLENG                                     @03A\n         MVC   SYMLENG-SYMTBL(3,R7),ESDLENG+1                      @03A\n         LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY           @03A\n         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A\nGE_CTYP3 CLC   ESDTYPE,C_RLD+1         LD ?                        @03A\n         JNE   GE_STEP                 NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_STEP                 NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JZ    GE_STEP                 NO                          @03A\n         L     R5,CURRLBL              POINT TO CURRENT LABEL ENTRY@03A\n         USING LABELD,R5                                           @03A\n         MVC   LBLADR,ESDELOFF+1       OFFSET TO LABEL             @03A\n         L     R0,ESDCLOFF                                         @06A\n         S     R0,ESDELOFF                                         @06A\n         ST    R0,CLASSOFF             OFFSET TO MODULE            @06A\n         MVI   LBLTYP,C'L'             TYPE = LABEL                @03A\n         MVI   LBLLEN,4                                            @03A\n         MVC   LBLNAME,BLANX           MOVE SYMBOL NAME TO ENTRY   @06A\n         MVC   LBLNAME(8),ESDSYMB      MOVE SYMBOL NAME TO ENTRY   @06A\n         MVI   PRT,C' '                                            @03A\n         MVC   PRT+1(L'PRT-1),PRT                                  @03A\n         MVC   PRT+5(8),LBLNAME        COPY LABEL NAME             @03A\n*        MVC   PRT+17(2),C_RLD+1       COPY 'LD'                   @03A\n         MVC   PRT+17(2),C_LR          COPY 'LR'                   @03A\n         LR    R0,R12                                              @03A\n         LA    R12,ESDELOFF            POINTER OFFSET TO LABEL     @03A\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @03A\n         LR    R12,R0                                              @03A\n         MVC   PRT+32(6),PRTABL+2                                  @03A\n         JAS   R9,PRINT                                            @03A\n         LA    R5,LABELL(R5)                                       @03A\n         ST    R5,CURRLBL                                          @03A\n         LA    R0,ESDSYMB                                          @03A\n         L     R15,PRMBUFAD                                        @03A\nGE_STEP  A     R12,ESDHENTL            POINT TO NEXT ELEMENT       @03A\n         JCT   R10,GE_NEXT             LOOP THRU ESD ENTRIES       @03A\n         CLC   PRMRETCD,XZROS          ANY MORE ESD ENTRIES?       @03A\n         JE    GE_GETIT                YES, GO READ NEXT ESD BUFFER@03A\nGE_EXIT  DS    0H                      GET RETURN ADDRESS          @03A\n         PR                            RETURN TO CALLER            @03A\n         DROP  R11\n         DROP  R12\n*********************************************************************\n*        PROCESS THE RLD RECORDS FOR THIS CSECT                     *\n*********************************************************************\nGET_RLD  BAKR  R14,0                   SAVE CALLER'S REGISTERS\n         MVC   PRMREQST,C_RLD          SHOW REQUEST IS FOR RLD DATA\nGR_GET2  JAS   R9,READLMOD             GO READ THE RLD DATA\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         LTR   R10,R10                 ANY RLD ELEMENTS READ?\n         JZ    GR_EXIT                 NO\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING RLDHEADR,R11\n         LA    R12,RLDHEND             POINT TO FIRST ELEMENT\n         USING RLDENTRY,R12\nGR_NEXT  DS    0H                      SAVE WORK REGISTERS\n         MVC   RESIDENT,BLANX          PRE-CLEAR TO BLANKS\n         LH    R1,RLD_RESIDENT_CHARS   GET LENGTH OF RES CSECT NAME\n         LTR   R1,R1                   ANY LENGTH?\n         JZ    GR_MVAC                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CHI   R1,8                    EXCESSIVE LENGTH?\n         JL    GR_MVRES                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGR_MVRES L     R2,RLD_RESIDENT_PTR     POINT TO THE SYMBOL\n         EX    R1,GRDMVREX             MOVE SYMBOL NAME\n*                                      MVC  RESIDENT(1),0(R2)\nGR_MVAC  MVC   SYMBPTS2,BLANX          PRE-CLEAR TO BLANKS\n         LH    R1,RLD_TARGET_CHARS     GET LENGTH OF SYMBOL POINTED TO\n         LTR   R1,R1                   ANY LENGTH?\n         JZ    GR_CKIT                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CHI   R1,8                    EXCESSIVE LENGTH?\n         JL    GR_MVTGT                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGR_MVTGT L     R2,RLD_TARGET_PTR       POINT TO THE SYMBOL\n         EX    R1,GRDTGTNX             MOVE SYMBOL NAME\n*                                      MVC  SYMBPTS2(1),0(R2)\nGR_CKIT  CLC   RESIDENT,CSECT          ENTRY RESIDES IN CURRENT CSECT?\n         JNE   GR_STEP                 NO\n         L     R5,CURRLBL              POINT TO LABEL TABLE\n         USING LABELD,R5\n*    ADCON and VCON\n         MVC   LBLADR,RLD_ELEM_OFFSET+1 OFFSET TO LABEL\n         MVI   LBLTYP,C'A'             ASSUME ADCON\n         CLI   RLD_STAT,X'02'          IS IT RESOLVED SYMBOL ?\n         JE    GR_CLRU                 YES\n         MVI   LBLTYP,C'V'             NO, ASSUME VCON\n         CLI   RLD_STAT,X'01'          IS IT UNRESOLVED SYMBOL ?\n         JNE   GR_STEP                 NO, DROP IT\nGR_CLRU  DS    0H\n         MVC   LBLLEN(1),RLD_ADCON_LENG+1\n         ST    R12,RLD_PTR\n         MVC   LBLNAME,BLANX           CLEAR SYMBOL NAME FIELD\n         MVC   LBLNAME(8),SYMBPTS2     MOVE SYMBOL NAME TO ENTRY\n         MVI   PRT,C' '\n         MVC   PRT+1(L'PRT-1),PRT\n         MVC   PRT+5(8),LBLNAME\n         MVC   PRT+17(2),C_ER\n         CLC   SYMBPTS2,CSECT          SYMBOL = CURRENT CSECT ?\n         JNE   GR_PRINT                YES\n         MVC   PRT+5(8),CUNRESV\n         MVC   LBLNAME(8),CUNRESV\nGR_PRINT LA    R12,RLD_ELEM_OFFSET     POINTER OFFSET TO LABEL\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL\n         MVC   PRT+32(6),PRTABL+2      COPY FORMATTED OFFSET\n         L     R12,RLD_PTR\n         LA    R12,RLD_TYPE\n         JAS   R9,HEXPRT2              CONVERT OFFSET TO LABEL\n         MVC   PRT+22(2),PRTABL\n         MVC   PRT+27(2),PRTABL+2      STATUS\n         LA    R12,LBLLEN\n         JAS   R9,HEXPRT1              CONVERT OFFSET TO LABEL\n         MVC   PRT+42(2),PRTABL\n         JAS   R9,PRINT\nGR_LBADD LA    R5,LABELL(R5)\n         ST    R5,CURRLBL\nGR_STEP  DS    0H                      GET WORK REGISTERS\n         L     R12,RLD_PTR\n         A     R12,RLDHENTL            POINT TO NEXT ELEMENT\n         JCT   R10,GR_NEXT             LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,XZROS          ANY MORE RLD ENTRIES?\n         JE    GR_GET2                 YES\nGR_EXIT  DS    0H\n         PR                            RETURN TO CALLER\n*********************************************************************\n*        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *\n*        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *\n*        CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *\n*********************************************************************\nGET_TEXT BAKR  R14,0                   SAVE RETURN ADDRESS\n         MVC   PRMCURSR,XZROS          SET CURSOR=0 TO START\n         L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD\n         LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?\n         JZ    GT_NTXAD                NO, ERROR\n         AHI   R0,32                   INSURE SUFFICIENT STORAGE\n         J     GT_STRG                 YES\nGT_NTXAD MVC   PRTLINE(39),NOSTOR      NO STORAGE SIZE WAS FOUND\n         PUT   SYSPRINT,PRTLINE        PRINT THE ERROR MESSAGE\n         WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCDE=11\n         ABEND 555,DUMP                TERMINATE WITH USER ABEND 555\n*T_STRG  GETMAIN R,LV=(0)              GET TEXT STORAGE\nGT_STRG  BRAS  1,*+4\n         SVC   10\n         ST    R1,TXTSTRT              SAVE THE GOTTEN ADDRESS\n         ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS\n         A     R1,TEXTENDA             SAVE THE ADDRESS OF THE\n         ST    R1,TXTEND                   END OF THE TEXT AREA\n         MVC   PRMREQST,C_TEXT         SHOW REQUEST IS FOR TEXT DATA\nGT_NEXT  JAS   R9,READLMOD             GO READ THE TEXT DATA\n         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?\n         JE    GT_ADJ                  NO\n         L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER\n         L     R10,PRMBUFAD            POINT TO BUFFER HEADER\n         ST    R11,SAVELNG        **** SAVE PRMCOUNT\n*        ST    R10,SAVEADR        **** SAVE PRMBUFAD\n         USING TXTHEADR,R10\n         LA    R10,TXTHEND             POINT TO FIRST TEXT BYTE\n         DROP  R10\n         L     R0,PRMCURSR             GET STARTING\n         S     R0,PRMCOUNT                 TEXT\n         STH   R0,ADJUST                     ADDRESS\n         A     R0,TXTSTRT\n         ST    R0,SAVETXT         **** DEBUG ****\nGT_FADJ  DS    0H\n         LH    R15,ADJUST\nGT_TMP   DS    0H\n         ST    R0,SAVEADR         **** SAVE ADDR OF LAST BUFFER\n         LR    R1,R11                  COPY TEXT LENGTH\n         MVCL  R0,R10                  MOVE TEXT\n         CLC   PRMRETCD,XZROS          ANY MORE TEXT?\n         JE    GT_NEXT                 YES\nGT_ADJ   DS    0H\n         LH    R15,ADJUST\n         LTR   R15,R15\n         JNP   GT_EXIT\n         CHI   R15,512\n         JH    GT_EXIT\n         L     R0,TXTSTRT\n         AR    R0,R15\n         ST    R0,TXTSTRT\nGT_EXIT  DS    0H\n*        L     R12,SAVETXT             RESTORE LAST BUFFER ADDR\n*        L     R11,SAVELNG       ***   RESTORE PRMCOUNT\n*        L     R10,SAVEADR             RESTORE PRMBUFAD\n*        LH    R8,ADJUST               RESTORE ADJUST\n*        DC    X'0000'\n         PR                            RETURN TO CALLER\n*********************************************************************\n*  1     SCAN LABEL TABLE AND PICK UP THE UNRESOLVED LABEL.         *\n*  2     ACTUAL OFFSET = LBLADR + TXTSTRT - CLASS OFFSET            *\n*********************************************************************\nUPD_UNRESOLV   DS  0H                                              @06A\n         USING LABELD,R5                                           @06A\n         BAKR  R14,0                                               @06A\n         L     R5,LBLTBL                                           @06A\n         MVC   TMPCLBL,CURRLBL                                     @06A\nUPD_LOOP CLC   LBLNAME(8),CUNRESV     UNRESOLV LABLE ?             @06A\n         JNE   UPD_NEXT               BRANCH IF NO                 @06A\n         SR    R14,R14                CLEAR R14 FOR ICM INSTR      @06A\n         ICM   R14,7,LBLADR           LOAD LABEL RELATIVE OFFSET   @06A\n         A     R14,TXTSTRT            ADD ADDRESS OF TEXT START    @06A\n         CLI   LBLLEN,4               4 BYTES ADDRESS LABEL ?      @06A\n         JE    UPD_ACON4              BRANCH IF YES                @06A\n         CLI   LBLLEN,8               8 BYTES ADDRESS LABEL ?      @06A\n         JNE   UPD_NEXT               BRANCH IF YES                @06A\n         AHI   R14,4                                               @06A\nUPD_ACON4  DS  0H                                                  @06A\n         L     R14,0(R14)                                          @06A\n         S     R14,CLASSOFF            GET ACTUAL OFFSET           @06A\n         ST    R14,DBLWD                                           @06A\n         LA    R12,DBLWD+1                                         @06A\n         JAS   R9,HEXPRT3              FORMAT ACTUAL OFFSET        @06A\n         MVI   LBLNAME,C'A'                                        @06A\n         MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A\n         MVI   LBLNAME+7,C' '                                      @06A\nUPD_NEXT LA    R5,LABELL(R5)           NEXT LABEL ENTRY            @06A\n*        LR    R0,R5                                               @06A\n*        L     R5,TMPCLBL                                          @06A\n*        A     R14,TXTSTRT                                         @06A\n*        LA    R5,LABELL(R5)                                       @06A\n*        MVI   LBLTYP,C'L'                                         @06A\n*        MVI   LBLNAME,C'A'                                        @06A\n*        MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A\n*        MVI   LBLNAME+7,C' '                                      @06A\n*        ST    R5,TMPCLBL                                          @06A\n*        LR    R5,R0                                               @06A\n         C     R5,CURRLBL                                          @06A\n         JL    UPD_LOOP                                            @06A\nUPD_EXIT PR                            RETURN TO CALLER            @06A\n*********************************************************************\n*        CALL MODULE READLMOD TO OBTAIN DATA FROM THE LOAD MODULE   *\n*********************************************************************\nREADLMOD DS    0H\nRLCALL   CALL  READLMOD,PARMAREA       CALL SUBPROGRAM READLMOD\n         CLI   PRMERROR,C' '           WAS THERE AN ERROR?\n         JE    RLXIT                   NO\n         WTO   'HDISASM FOUND ERROR RETURNED BY READLMOD CALL',        X\n               ROUTCDE=11\n         ABEND 111,DUMP                TERMINATE WITH ABEND CODE 111\nRLXIT    BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *\n* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*\n* UOUS LOCATIONS SO THAT THE TEXT FOR THE DESIRED CSECT WILL   *\n* ALL BE IN STORAGE FOR THE REMAINDER OF DISASSEMBLY.          *\n*                                                              *\n****************************************************************\n*\nCNTLRECS EQU   *                       CONTROL RECORD PROCESSING\n         ST    R9,CT9                  SAVE RETURN ADDR\n         SR    R8,R8                   CLEAR WORK\n         ICM   R8,7,9(R6)              LKED ASGND @ OF TXT\n         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M\n         JZ    CNCKTYP                 NO\n         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE\nCNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD\n         JO    CNPASRLD                YES\n         LA    R12,16(R6)              @ CESD ENTRY NBR\n         J     CNCKESD                 CONTINUE\nCNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH\n         LA    R12,16(R6,R12)          @ CESD ENTRY NBR\nCNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION\n         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES\n         SR    R10,R10                 OFFSET TO 1ST BYTE\n         SR    R9,R9                   LENGTH OF TEXT\nCNCKESD1 CLC   ESDID,0(R12)            THIS THE DESIRED ESD   FIX***\n         JE    CNFNDIT                 YES\n         AH    R10,2(R12)              MAINTAIN OFFSET TO 1ST TEXT BYTE\n         LA    R12,4(R12)              TO NEXT CNTL ENTRY\n         JCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES  FIX***\n         J     READTEXT                GO READ FOLLOWING TEXT\nCNFNDIT  LH    R9,2(R12)               GET TEXT LENGTH\nREADTEXT READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD\n         CHECK DECB                    AWAIT COMPLETION\n         LTR   R9,R9                   DOES IT CONTAIN DESIRED TEXT\n         JZ    CTXIT                   NO, SKIP IT\n         S     R8,START                (-) OFFSET IN MODULE    FIX***\n         AR    R8,R10                  ADD OFFSET OF PORTION IN RCD  **\n*           R8 SHOULD NOW CONTAIN THE OFFSET WITHIN THE CSECT\n*           THAT THIS BLOCK CONTAINS (TRICKY).\n*\n         A     R10,BUFAD               @ 1ST TEXT BYTE\n         A     R8,TXTSTRT              @ PLACE TO MOVE TEXT\n         LR    R11,R9                  COPY LENGTH TO MOVE\n         MVCL  R8,R10         MOVE TEXT TO DYNAMIC STORAGE R10 TO R8\nCTXIT    L     R9,CT9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT WHICH WILL *\n* LATER BE USED TO BUILD PROGRAM LABELS AND ADCONS.            *\n*                                                              *\n****************************************************************\n*\nRLDRECS  EQU   *                       RLD RECORD PROCESSING\n         TM    0(R6),X'08'             LAST RECORD OF MODULE\n         JZ    RLSV9                   NO\n         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE\nRLSV9    ST    R9,RL9                  SAVE RETURN ADDR\nRLDSW    JNOP  RLDST                   FIRST TIME SWITCH\n         LARL  R15,RLDSW\n         MVI   1(R15),C'0'\n*        MVI   RLDSW+1,C'0'            RESET 1ST TIME SW\n         MVC   PRT+15(20),MSG02        ***** RLD INFO *****\n         MVI   PCC,C'-'                SKIP 3 LINES\n         JAS   R9,PRINT                PRINT\n         MVC   PRTLINE,RLDHDR          RLD HEADER\n         JAS   R9,PRINT                PRINT RLD HEADER\nRLDST    LH    R8,6(R6)                NBR BYTES OF RLD DATA\n         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA\n         AR    R8,R6                   END OF RLD DATA ADDR\n         L     R7,CURRLD               @ NEXT RLD TBL ENTRY\n         USING RLDTBLD,R7\n         LH    R10,0(R6)               RELOCATION POINTER\n         LH    R11,2(R6)               POSITION POINTER\n         LA    R6,4(R6)                PASS POINTERS\nRLDNEXT  CLC   1(3,R6),START+1         RLD ADDR BELOW CSECT\n         JL    RLDSTEP                 LOW, IGNORE\n         CLC   1(3,R6),END+1           RLD ADDR ABOVE CSECT\n         JH    RLDSTEP                 HIGH, IGNORE\n         C     R7,ENDRLD               END OF RLD TBL\n         JE    RLDFULL                 YES, ERROR\n         STH   R10,RLDRP               SAVE RELOC PTR\n         STH   R11,RLDPP               POS PTR\n         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE\n         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER\n         CLI   RLDTYPE,9               UNRESOLVED\n         JNE   RLDMOVLN                NO\n         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE\nRLDMOVLN MVC   RLDLEN,0(R6)            FLAG BYTE\n         NI    RLDLEN,X'0F'            CLEAR HI-ORDER\n         SR    R12,R12                 CLEAR WORK\n         IC    R12,RLDLEN              PICK UP BYTE\n         SRL   R12,2                   SHIFT OUT DIR, IND BITS\n         LA    R12,1(R12)              ADD 1 = LENGTH\n         STC   R12,RLDLEN              LENGTH CODE\n         MVI   RLDDIR,C'+'             ASSUME POS RELOC\n         TM    0(R6),2                 IS IT POSITIVE\n         JZ    RLADMV                  YES\n         MVI   RLDDIR,C'-'             NO, SHOW NEGATIVE\nRLADMV   SR    R1,R1                   CLEAR WORK REG\n         ICM   R1,7,1(R6)              PICK UP ADDRESS\n         S     R1,START        **      RELATIVIZE WITHIN CSECT\n         STCM  R1,7,RLDADDR            SAVE RELATIVE ADDRESS\n         LA    R12,RLDRP               @ RELOC PTR\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+6(4),PRTABL         RELOC PTR\n         LA    R12,RLDPP               @ POS PTR\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+14(4),PRTABL        POS PTR\n         MVC   PRT+24(4),C_ACON        ASSUME A TYPE ADCON\n         CLI   RLDTYPE,4               IS IT VDCON 8 BYTES        @06A\n         JE    RLDLN8                  YES                        @06A\n         CLI   RLDTYPE,0               IS IT ADCON 4 BYTES\n         JE    RLDLN                   YES\n         J     RLDVCON                                            @06A\nRLDLN8   MVI   RLDLEN,8                SET LENGTH TO 8            @06A\n         MVI   RLDTYPE,1               CHANGE TO VDCON            @06A\nRLDVCON  MVC   PRT+24(4),C_VCON        ASSUME VCON\n         CLI   RLDTYPE,1               IS IT VCON\n         JE    RLDLN                   YES\n         MVC   PRT+22(6),CPRDISP       ASSUME PSEUDO REG DISPL\n         CLI   RLDTYPE,2               IS IT P.R. DISPL\n         JE    RLDLN                   YES\n         MVC   PRT+22(6),CPRCUM        ASSUME PSEUDO REG CUMUL DISPL\n         CLI   RLDTYPE,3               IS IT P.R. CUM DISPL\n         JE    RLDLN                   YES\n         MVC   PRT+21(10),CUNRESV      ASSUME UNRESOLVED\n         CLI   RLDTYPE,8               IS IT UNRESOLVED\n         JE    RLDLN                   YES\n         MVC   PRT+21(10),BLANX        CLEAR FIELD\n         MVC   PRT+24(3),CUNKNOWN+1    ASSUME '??:'\n         LA    R12,RLDTYPE             @ TYPE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(1),PRTABL+1      TYPE\nRLDLN    MVC   PRT+35(1),RLDLEN        LENGTH\n         OI    PRT+35,C'0'             CLEAR ZONE\n         MVC   PRT+42(1),RLDDIR        RELOCATION DIRECTION\n         LA    R12,RLDADDR             @ ADDRESS\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+46(6),PRTABL        ADDRESS\n         XC    RLDNAME(9),RLDNAME      CLEAR\n         LH    R15,RLDRP               GET RELOCATION POINTER\n         BCTR  R15,R0                  DEDUCT 1\n         LTR   R15,R15                 TEST DIFFERENCE\n         JM    RLPRT                   NEG, ERROR\n         MHI   R15,L'SYMENT            TIMES SYM TBL ENTRY LENG   @03C\n         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY\n         C     R15,CURRSYM             PAST END OF TABLE\n         JH    RLPRT                   YES, ERROR\n         USING SYMTBL,R15\n         MVC   RLDNAME,EXTSYM          ESD SYMBOL TO RLD TBL ENTRY\n         MVC   RLDESDTP,TYPSYM         ESD TYPE TO RLD ENTRY\n         DROP  R15\n         MVC   PRT+60(8),RLDNAME       NAME TO PRINT\n         MVC   PRT+70(2),C_LR          ASSUME LR\n         CLI   RLDESDTP,3              IS IT LR\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_SD          ASSUME SD\n         CLI   RLDESDTP,0              IS IT SD\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_ER          ASSUME ER\n         CLI   RLDESDTP,2              IS IT ER\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_PC          ASSUME PC\n         CLI   RLDESDTP,4              IS IT PC\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_PR          ASSUME PR\n         CLI   RLDESDTP,6              IS IT PR\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_CM          ASSUME CM\n         CLI   RLDESDTP,5              IS IT CM\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_WX          ASSUME WX\n         CLI   RLDESDTP,X'0A'          IS IT WX\n         JE    RLPRT                   YES\n         MVC   PRT+70(4),CNULL         ASSUME NULL\n         CLI   RLDESDTP,7              IS IT NULL\n         JE    RLPRT                   YES\n         MVC   PRT+70(6),CESTAB        ASSUME E/STAB\n         CLI   RLDESDTP,X'0F'          IS IT E/STAB\n         JE    RLPRT                   YES\n         MVC   PRT+70(6),CQUEST        UNKNOWN TYPE ??????\nRLPRT    JAS   R9,PRINT                PRINT\n         CLC   RLDNAME,CSECT           RLD NAME IS CSECT NAME\n         JNE   GOODRLD                 NO\n         CLC   RLDADDR,XZROS           RELATIVE OFFSET IS ZERO\n         JE    RLDSTEP                 YES, IGNORE ENTRY\nGOODRLD  DS    0H\n         LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY\nRLDSTEP  TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS\n         JO    RLSAME                  NO\n         LH    R10,4(R6)               PICK UP NEW REL PTR\n         LH    R11,6(R6)               PICK UP NEW POS PTR\n         LA    R6,4(R6)                STEP OVER 4 BYTES\nRLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM\n         CR    R6,R8                   END OF RLD DATA\n         JL    RLDNEXT                 NO\n         MVI   0(R7),X'FF'             SET TBL END INDICATOR\n         ST    R7,CURRLD               SET NEW CURRENT ADDRESS\n         L     R9,RL9                  GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R7\n*\n****************************************************************\n*                                                              *\n* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *\n* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *\n* THE RLDRECS AND CNTLRECS ROUTINES.                           *\n*                                                              *\n****************************************************************\n*\nCTRLRECS EQU   *                       CONTROL AND RLD RECORDS\n         ST    R9,CR9                  SAVE RETURN ADDR\n         JAS   R9,RLDRECS              PROCESS RLD DATA\n         L     R6,BUFAD                RESET BUFFER ADDRESS\n         JAS   R9,CNTLRECS             PROCESS CONTROL DATA\n         L     R9,CR9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *\n* PLACED IN THE SYMBOL TABLE, AND IS USED TO CREATE PROGRAM    *\n* ENTRY STATEMENTS, AND TO IDENTIFY THE NAMES OF EXTERNAL      *\n* SYMBOLS USED BY THE PROGRAM.                                 *\n*                                                              *\n****************************************************************\n*\nCESDREC  EQU   *                       CESD RECORD PROCESSING\n         ST    R9,CES9                 SAVE RETURN\n         L     R7,CURRSYM              GET SYMBOL TBL ADDR\n         USING SYMTBL,R7\n         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM\n         LH    R8,6(R6)                NBR BYTES OF ESD DATA\n         SRL   R8,4                    COMPUTE NBR ENTRIES\n         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM\nCESDNXT  C     R7,ENDSYM               END OF TABLE\n         JNL   SYMFULL                 YES, ERROR\n         MVC   EXTSYM,0(R6)            SYMBOL NAME\n         MVC   TYPSYM,8(R6)            TYPE\n         NI    TYPSYM,X'0F'            CLEAR BITS 0-3\n         MVC   SYMIND,8(R6)            INDICATOR BYTE\n         NI    SYMIND,X'0F'            CLEAR BITS 4-7\n         MVC   SYMARMOD,12(R6)         COPY RSECT/AMODE/RMODE BYTE\n         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB\n         JNO   CEMVAD                  NO\n         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB\n         JNZ   CEMVAD                  NO\n         MVC   TYPSYM(2),X0F00         SHOW ENTAB/SEGTAB X0F00\nCEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL\n         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED\n         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID\n         STCM  R10,3,SYMESDID          ESD ID\n         MVC   PRT+5(8),EXTSYM         SYMBOL NAME\n         MVC   PRT+20(2),C_SD          ASSUME SD\n         CLI   TYPSYM,0                IS IT SD\n         JE    CEPIND                  YES\n         CLI   TYPSYM,X'96'            IS IT SD\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_LR          ASSUME LR\n         CLI   TYPSYM,3                IS IT LR\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_ER          ASSUME ER\n         CLI   TYPSYM,2                IS IT ER\n         JE    CEPIND                  YES\n         CLI   TYPSYM,X'0D'            IS IT ER **** ??\n         JE    CEPIND                  YES      **** ??\n         MVC   PRT+20(2),C_PC          ASSUME PC\n         CLI   TYPSYM,4                IS IT PC\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_PR          ASSUME PR\n         CLI   TYPSYM,6                IS IT PR\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_CM          ASSUME CM\n         CLI   TYPSYM,5                IS IT CM\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_WX          ASSUME WX\n         CLI   TYPSYM,X'0A'            IS IT WX\n         JE    CEPIND                  YES\n         MVC   PRT+19(4),CNULL         ASSUME NULL\n         CLI   TYPSYM,7                IS IT NULL\n         JE    CEPIND                  YES\n         MVC   PRT+18(6),CESTAB        ASSUME ENTAB/SEGTAB\n         CLI   TYPSYM,X'0F'            IS IT ENTAB/SEGTAB\n         JE    CEPIND                  YES\n         LA    R0,TYPSYM\n         MVC   PRT+18(4),CUNKNOWN      UNIDENTIFIABLE TYPE ??:\n         LA    R12,TYPSYM              @ TYPE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+23(2),PRTABL        TYPE\nCEPIND   LA    R12,SYMIND              @ INDICATOR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(1),PRTABL        INDICATOR\n         LA    R12,SYMADDR             @ SYMBOL ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+30(6),PRTABL        SYMBOL ADDR\n         LA    R12,SYMSEG              @ SEGMENT NBR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+39(2),PRTABL        SEGMENT NBR\n         CLI   TYPSYM,2                IS IT ER\n         JE    CEESD                   YES\n         CLI   TYPSYM,3                IS IT AN LR\n         JNE   CENOTLR                 NO\n         LA    R12,SYMLRID             @ LR ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+43(4),PRTABL        LR ESD ID\n         J     CEESD                   CONTINUE\nCENOTLR  LA    R12,SYMLENG             @ LENGTH\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+49(6),PRTABL        SYMBOL LENGTH\nCEESD    LA    R12,SYMESDID            @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+57(4),PRTABL        ESD ID\n*\n         MVC   PRT+65(3),CYES          RSECT\n         TM    SYMARMOD,X'08'          YES\n         JO    CEAMODE\n         MVC   PRT+65(3),CNO           RSECT NO\nCEAMODE  MVC   PRT+72(3),CANY          AMODE ANY\n         TM    SYMARMOD,X'03'\n         JO    C_ERMODE\n         MVC   PRT+72(3),C31           31\n         TM    SYMARMOD,X'20'\n         JO    C_ERMODE\n         MVC   PRT+72(3),C24           24\nC_ERMODE MVC   PRT+79(3),CANY          RMODE ANY\n         TM    SYMARMOD,X'04'\n         JO    CECONT\n         MVC   PRT+79(3),C24           RMODE 24\nCECONT   TM    PROCESS,X'80'           FOUND CSECT\n         JO    CESDPT                  YES\n         CLI   TYPSYM,0                SD\n         JE    CECKCSB                 YES\n         CLI   TYPSYM,X'0D'            ER ??\n         JE    CECKCSB                 YES\n         CLI   TYPSYM,4                PC\n         JNE   CESDPT                  NO\n*\nCECKCSB  CLC   CSECT,BLANX             ANY CSECT NAME ENTERED\n         JNE   CECKNM                  YES\n         MVC   CSECT,EXTSYM            NAME TO CSECT\n         J     CSGOTCS                 CONTINUE\nCECKNM   CLI   TYPSYM,4                PC\n         JE    CESDPT                  YES\n         CLC   CSECT,EXTSYM            FOUND DESIRED NAME\n         JNE   CESDPT                  NO\n         TM    PROCESS,X'80'           ALREADY FOUND CSECT\n         JZ    CSGOTCS                 NO\n         MVC   PRT+15(2),CQUEST        SHOW DUPL\n         J     CESDPT                  CONTINUE\nCSGOTCS  OI    PROCESS,X'80'           SHOW CSECT FOUND\n         MVC   PRT+15(2),MSG01         FLAG ON PRINTOUT\n         MVC   ESDID,SYMESDID          SAVE ESD ID FOUND\n         MVC   START+1,SYMADDR         SAVE CSECT DOWRT ADDR\n         MVC   CSTLENG+1(3),SYMLENG    SAVE CSECT LENGTH\n         L     R1,CSTLENG              PICK UP LENGTH\n         A     R1,START                COMPUTE CSECT END ADDR\n         ST    R1,END                  SAVE CSECT END ADDR\n         L     R11,CSTLENG             TEXT LENGTH\n         LA    R11,256(R11)            ADD FOR SAFETY  ??\n         STORAGE OBTAIN,LENGTH=(11),ADDR=(R1),SP=0\n*                                      GET DYNAMIC STORAGE FOR TEXT\n         ST    R1,TXTSTRT              SAVE TEXT ADDR DYNAMIC AREA\n         AHI   R11,-256                DEDUCT SAFETY FACTOR       @03C\n         AR    R1,R11                  TXT END ADDR\n         ST    R1,TXTEND               SAVE TEXT END ADDR\nCESDPT   JAS   R9,PRINT                PRINT\n         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION\n         LA    R10,1(R10)              ADD 1 TO ESD COUNTER\n         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT\n         JCT   R8,CESDNXT              LOOP THRU INPUT RECORD     @03C\n         MVI   0(R7),X'FF'             SET END OF TABLE INDIC\n         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR\n         L     R9,CES9                 GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R7\n*\n****************************************************************\n*                                                              *\n* ISSUE BLDL FOR THE MAIN MODULE, AND PRINT MODULE RELATED INFO*\n*                                                              *\n****************************************************************\n*\nBLDL     EQU   *                       ISSUE BLDL AND PRINT INFO\n         ST    R9,BL9                  SAVE RETURN ADDR\nISSBLDL  BLDL  SYSLIB,BLDLIST          ISSUE BLDL\n         LTR   R15,R15                 ANY ERRORS\n         JNZ   MISSMEM                 YES\n         LA    R1,MEMBER+35            END OF BASIC PORTION\n         TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLREFA1                 NO\n         LA    R1,4(R1)                ADD FOR SSI\nBLREFA1  TM    ALIASIND,X'80'          ALIAS\n         JZ    BLREFA2                 NO\n         LA    R1,11(R1)               ADD FOR ALIAS\nBLREFA2  TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLREFA3                 NO\n         LA    R1,8(R1)                ADD FOR SCATTER\nBLREFA3  MVC   AUTHLEN(2),0(R1)        AUTH LENGTH AND CODE\n         TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLCKALI                 NO\n         LA    R1,MEMBER+35            END OF BASIC PORTION\n         TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLSSI2                  NO\n         TM    ALIASIND,X'80'          ALIAS\n         JO    BLFMTED                 YES, NO REFORMAT NEEDED\n         LA    R1,8(R1)                NO, STEP PAST SCATTER SECTION\n         J     BLMVSSI                 GO MOVE SSI\nBLSSI2   TM    ALIASIND,X'80'          ALIAS\n         JZ    BLMVSSI                 NO\n         LA    R1,11(R1)               YES, STEP PAST ALIAS SECTION\nBLMVSSI  MVC   SSI,0(R1)               MOVE SSI DATA\nBLCKALI  TM    ALIASIND,X'80'          ALIAS\n         JO    BLASC                   YES\n         J     BLFMTED                 FINISHED\nBLASC    TM    ATTR1A,X'04'            SCATTER FORMAT\n         JO    BLFMTED                 YES, NO REFORMAT NEEDED\n         MVC   ALMEM,MEMBER+38         MOVE ALIAS MEMBER\n         MVC   ALEPA(3),MEMBER+35      YES, MOVE ALIAS DATA\nBLFMTED  MVC   PRT(26),MSG03           'DIRECTORY INFO FOR MODULE '\n         MVC   PRT+27(8),MEMBER        MEMBER NAME TO PRINT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(14),MSG04        'TTR OF MODULE='\n         LA    R12,TTRMOD              @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+24(6),PRTABL        TTR TO PRINT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG05        'CONCATENATION NBR='\n         LA    R12,CCAT                @ CONCATENATION NBR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+28(2),PRTABL        CONCATENATION NBR\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(12),MSG06\n         LA    R12,ALIASIND            @ ALIAS INDICATOR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+22(2),PRTABL        ALIAS INDICATOR\n         TM    ALIASIND,X'80'          IS IT AN ALIAS\n         JZ    BLALPRT                 NO\n         MVC   PRT+50(13),MSG07        '*** ALIAS ***'\nBLALPRT  JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG08        'TTR, 1ST TXT RECD='\n         LA    R12,TTR1TXT             @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+28(6),PRTABL        TTR OF 1ST TXT BLOCK\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(25),MSG09        'TTR OF NOTE/SCATTER LIST='\n         LA    R12,TTRNS               @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+35(6),PRTABL        TTR OF NOTE/SCATTER\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(17),MSG10        'NBR NOTE ENTRIES='\n         LA    R12,NNOTE               @ NBR NOTES\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(2),PRTABL        NBR NOTE ENTRIES\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG11        'ATTRIBUTES 1='\n         LA    R12,ATTR1A              @ ATTRIBUTES\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+23(4),PRTABL        ATTRIBUTES 1\n         TM    ATTR1A,X'80'            RENT\n         JZ    BLAT1A                  NO\n         MVC   PRT+30(4),CRENT\nBLAT1A   TM    ATTR1A,X'40'            REUS\n         JZ    BLAT1B                  NO\n         MVC   PRT+35(4),CREUS\nBLAT1B   TM    ATTR1A,X'20'            OVLY\n         JZ    BLAT1C                  NO\n         MVC   PRT+40(4),COVLY\nBLAT1C   TM    ATTR1A,X'10'            TEST\n         JZ    BLAT1D                  NO\n         MVC   PRT+45(4),CTEST\nBLAT1D   TM    ATTR1B,X'08'            OL\n         JZ    BLAT1E                  NO\n         MVC   PRT+50(2),C_OL\nBLAT1E   TM    ATTR1A,X'04'            SCTR\n         JZ    BLAT1F                  NO\n         MVC   PRT+53(4),MSG18         SCTR\nBLAT1F   TM    ATTR1A,X'02'            EXEC\n         JZ    BLAT1G                  NO\n         MVC   PRT+58(4),CEXEC\nBLAT1G   TM    ATTR1B,X'01'            REFR\n         JZ    BLAT1PRT                NO\n         MVC   PRT+63(4),CREFR\nBLAT1PRT JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG12        'TOTAL LENGTH='\n         LA    R12,TOTVIRT             @ TOTAL LENGTH\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+23(6),PRTABL        TOTAL LENGTH OF MODULE\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(23),MSG13        'LENGTH OF 1ST TXT RECD='\n         LA    R12,LENG1               @ 1ST TXT LENG\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+33(4),PRTABL        LENGTH OF 1ST TXT BLOCK\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(11),MSG14        'E. P. ADDR='\n         LA    R12,LKEPA               @ E.P. ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+21(6),PRTABL        E.P. ADDR\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG15        'ATTRIBUTES 2='\n         LA    R12,ATTR2               @ ATTRIBUTES 2\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+23(2),PRTABL        ATTRIBUTES 2\n         TM    ATTR2,X'20'             PAGE ALIGNMENT\n         JZ    BLAT3A                  NO\n         MVC   PRT+30(16),MSG16        'PAGE ALIGN REQRD'\nBLAT3A   TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLAT3PRT                NO\n         MVC   PRT+50(11),MSG17        'SSI PRESENT'\nBLAT3PRT JAS   R9,PRINT                PRINT\n         TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLFAL                   NO\n         MVC   PRT+10(8),MSG18         'SCTRLEN='\n         LA    R12,SCTRLEN             @ SCATTER LIST LENGTH\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+18(4),PRTABL        SCATTER LIST LENGTH\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG19        'TRANSLATE TBL LEN='\n         LA    R12,TTLEN               @ TRANS TBL LEN\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+28(4),PRTABL        TRANSLATION TABLE LENGTH\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG20        'ESD ID OF 1ST TXT='\n         LA    R12,SCESDID             @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+28(4),PRTABL        ESD ID OF 1ST TXT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(23),MSG21        'ESD ID CONTAINING E.P.='\n         LA    R12,SCEPESD             @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+33(4),PRTABL        @ ESD ID OF CSECT CONTAINING E.P\n         JAS   R9,PRINT                PRINT\nBLFAL    TM    ALIASIND,X'80'          ALIAS\n         JZ    BLFSSI                  NO\n         MVC   PRT+10(28),MSG22        E.P. ADDRESS OF THIS MEMBER='\n         LA    R12,ALEPA               @ E.P. ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+38(6),PRTABL        E.P. ADDR\n         JAS   R9,PRINT\n         MVC   PRT+10(17),MSG23        'REAL MEMBER NAME='\n         MVC   PRT+27(8),ALMEM         REAL MEMBER NAME\n         JAS   R9,PRINT\nBLFSSI   TM    ATTR2,X'10'             ANY SSI INFO\n         JZ    BLAUTHC                 NO\n         MVC   PRT+10(9),MSG24         'SSI INFO='\n         LA    R12,SSI                 @ SSI INFO\n         JAS   R9,HEXPRT4              CONVERT\n         MVC   PRT+19(8),PRTABL        SSI INFO\n         JAS   R9,PRINT                PRINT\nBLAUTHC  MVC   PRT+10(10),MSG25        'AUTH CODE='\n         LA    R12,AUTHCOD             @ AUTH CODE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+20(2),PRTABL        AUTH CODE\n         JAS   R9,PRINT                PRINT\n         TM    ALIASIND,X'80'          ALIAS\n         JZ    BLXIT                   NO\n         MVC   PRT+5(38),MSG26         REAL MEMBER DIRECTORY INFO\n         MVI   PCC,C'0'                DOUBLE SPACE\n         JAS   R9,PRINT                PRINT\n         MVC   MEMBER,ALMEM            REAL MEMBER NAME TO LIST\n         J     ISSBLDL                 DO OVER FOR REAL MEMBER\nBLXIT    L     R9,BL9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *\n* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *\n* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *\n* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *\n*                                                              *\n****************************************************************\n*\nHEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE\nHEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX\nHEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE\n         TR    PRTABL(8),TRTBL         MAKE PRINTABLE\n         BR    R9                      EXIT\n*\n*\n*\n****************************************************************\n*                                                              *\n* PRINT TO LOADMAP                                             *\n*                                                              *\n****************************************************************\n*\nPRINT    DS    0H                      PRINT ROUTINE\n         TM    LOADMAP+48,X'10'        IS LOADMAP OPEN          @04C\n         JNO   CLRPRT                  NO\n         PUT   LOADMAP,PRTLINE         WRITE PRINT LINE         @04C\nCLRPRT   MVI   PRT,C' '                CLEAR PRINT LINE\n         MVC   PRT+1(L'PRT-1),PRT\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C' '                SINGLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'0'                DOUBLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'-'                TRIPLE SPACED\n         JE    SETSGL                  YES\n         ZAP   LINECT,P0               NO, MUST BE NEW PAGE\nSETSGL   MVI   PCC,C' '                SET SINGLE SPACING\n         CP    LINECT,P58              PAST END OF PAGE\n         JH    NEWPAGE                 YES\n         BR    R9                      EXIT\nNEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF\n         ZAP   LINECT,P0               RESET LINE COUNTER\n         BR    R9                      EXIT\n*\n*\n****************************************************************\n*                                                              *\n* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.   *\n* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.               *\n*                                                              *\n****************************************************************\n*\nGETCTL   EQU   *                       EXTRACT DESIRED MEMBER/CSECT\n         GET   SYSIN                   READ THE CONTROL CARD\n         LA    R12,72                  LENGTH OF CONTROL CARD\n         LA    R11,8                   MAX LENGTH OF MEMBER NAME\n         LA    R10,MEMBER              @ MEMBER NAME FIELD\nCKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK\n         JNE   GCMEMOV                 NO, GO MOVE MEMBER NAME\n         LA    R1,0(R1)                TO NEXT CONTROL BYTE\n         JCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH\n         J     GCEND                   ALL BLANKS, EXIT\nGCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME\n         LA    R1,1(R1)                TO NEXT CONTROL BYTE\n         BCTR  R12,R0                  SUBTRACT 1 FROM LENGTH\n         LA    R10,1(R10)              TO NEXT NAME BYTE\n         BCTR  R11,R0                  SUBTRACT 1 FROM LENGTH\n         CLI   0(R1),C' '              GOT A BLANK\n         JE    GCSETUP2                YES\n         CLI   0(R1),C','              GOT A COMMA\n         JE    GCSETUP2                YES\n         LTR   R12,R12                 END OF CONTROL DATA\n         JE    GCEND                   YES\n         LTR   R11,R11                 NAME FULL\n         JNZ   GCMEMOV                 NO, CONTINUE\n         J     NAMEOV8                 YES, NAME TOO LONG\nGCSETUP2 LA    R11,8                   CSECT NAME MAX LENGTH\n         LA    R10,CSECT               @ CSECT NAME FIELD\nGCSTEP2  LA    R1,1(R1)                STEP PAST BLANK\n         JCT   R12,GCHKBK2             CHECK NEXT FOR BLANK\n         J     GCEND                   END OF SCAN\nGCHKBK2  CLI   0(R1),C' '              CONTROL DATA IS BLANK\n         JE    GCSTEP2                 YES\nGCCSMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO CSECT NAME\n         LA    R1,1(R1)                TO NEXT CONTROL BYTE\n         LA    R10,1(R10)              TO NEXT NAME BYTE\n         BCTR  R12,R0                  DEDUCT 1 FROM CONTROL LENGTH\n         BCTR  R11,R0                  DEDUCT 1 FROM NAME LENGTH\n         LTR   R12,R12                 ANY CONTROL BYTES LEFT\n         JZ    GCEND                   NO\n         CLI   0(R1),C' '              NEXT CONTROL BYTE BLANK\n         JE    GCEND                   YES\n         LTR   R11,R11                 ANY NAME BYTES LEFT\n         JNZ   GCCSMOV                 YES, LOOP\n         J     NAMEOV8                 NAME TOO LONG, ERROR\nGCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND\n         JE    NOMBR                   NO\n         BR    R9                      EXIT\n*\n*\n*\n****************************************************************\n*                                                              *\n* MISCELLANEOUS ERROR MESSAGES.                                *\n*                                                              *\n****************************************************************\n*\nERRORS   EQU   *                       ERROR END MESSAGES\nNOCTL    MVC   PRT(L'NOCNTRL),NOCNTRL  NO CONTROL INFO MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nNAMEOV8  MVC   PRT(L'OVER8),OVER8      NAME OVER 8 MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nNOMBR    MVC   PRT(L'NOMEM),NOMEM      MISSING MEMBER NAME MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nMISSMEM  MVC   PRT(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nMISSCS   MVC   PRT(L'INVCSECT),INVCSECT CSECT NOT IN MEMBER MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nSYMFULL  MVC   PRT(L'FULLSYM),FULLSYM  FULL SYM TBL MSG\n         J     ERREND                  GO PRINT\nRLDFULL  MVC   PRT(L'FULLRLD),FULLRLD  RLD TBL FULL MSDG\nERREND   DS    0H\n         PUT   SYSPRINT,PRTLINE        GO PRINT MESSAGE\n         ABEND 778,DUMP                ABEND\nERREND2  PUT   SYSPRINT,PRTLINE                                    @04A\n         J     CLOSES                                              @04A\n*\n*\n*\n*\n****************************************************************\n*                                                              *\n* COUNT THE ENTRIES IN THE ESD TABLE WHICH WILL RESULT IN      *\n* ENTRIES IN THE LABEL TABLE.                                  *\n*                                                              *\n****************************************************************\nENDINIT  DS    0H                      *** FINAL PROCESSING ***\n         L     R6,SYMTBAD              GET @ ESD TABLE\n         USING SYMTBL,R6\n         LA    R7,4                    INITIAL LABEL COUNT VALUE\nSYMCNT   CLI   0(R6),X'FF'             END OF ESD TABLE\n         JE    RLDCNT                  YES\n         CLI   TYPSYM,3                IS ESD AN LR ENTRY\n         JNE   SCSTP                   NO, IGNORE\n         CLC   SYMADDR,START+1         ADDR BELOW DESIRED CSECT\n         JL    SCSTP                   YES, IGNORE\n         CLC   SYMADDR,END+1           ADDR ABOVE DESIRED CSECT\n         JH    SCSTP                   YES, IGNORE\n         LA    R7,1(R7)                ADD TO LABEL COUNT\n         MVC   SYMLENG,ASTERISK        FLAG AS USABLE\nSCSTP    LA    R6,L'SYMENT(R6)         TO NEXT ESD ENTRY\n         J     SYMCNT\n         DROP  R6\n*\n****************************************************************\n*                                                              *\n* COUNT THE ENTRIES IN THE RLD TABLE WHICH WILL RESULT IN      *\n* ENTRIES IN THE LABEL TABLE.                                  *\n*                                                              *\n****************************************************************\n*\nRLDCNT   L     R6,RLDTBL               GET RLD TBL ADDR\n         USING RLDTBLD,R6\nRLDCEND  CLI   0(R6),X'FF'             END OF RLD TABLE\n         JE    LBLGET                  YES\n         CLC   RLDRP,ESDID             ESDID SAME AS DESIRED CSECT\n         JNE   RLDC1                   NO, EXTRN REF\n         LA    R7,1(R7)                ADD 1 TO LABEL COUNT\nRLDC1    LA    R7,1(R7)                ADD 1 TO LABEL COUNT\n         LA    R6,L'RLDENT(R6)         TO NEXT RLD ENTRY\n         J     RLDCEND                 LOOP THRU RLD TBL\n         DROP  R6\n         DROP  R5\n****************************************************************\n*                                                              *\n* CREATE INITIAL ENTRIES IN THE LABEL TABLE USING DATA FROM    *\n* THE ESD AND RLD TABLES.                                      *\n*                                                              *\n****************************************************************\nLBLGET   DS    0H\n*        L     R6,LBLTBL               GET @ LABEL TABLE\n         L     R6,CURRLBL              GET @ LABEL TABLE\n         USING LABELD,R6\n         L     R7,SYMTBAD              GET ESD TBL ADDR\n         USING SYMTBL,R7\n         CLC   LKEPA,XZROS             E.P. ADDR ZERO\n         JE    LRENTS                  YES\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,LKEPA              PICK UP E.P. ADDR\n         S     R1,START                RELATIVIZE IN CSECT\n         JM    LRENTS                  NEG, ERROR\n         STCM  R1,7,LBLADR             SAVE OFFSET\n         XC    LBLREF,LBLREF           CLEAR LBLREF                @03A\n         MVI   LBLTYP,C'L'             SET LABEL TYPE IN ENTRY\n         LA    R12,LBLADR              POINT TO OFFSET\n         JAS   R9,HEXPRT3\n         MVC   LBLNAME,BLANX                                       @05A\n         MVI   LBLNAME,C'A'            1ST CHAR OF LABEL IS 'A'\n         MVC   LBLNAME+1(6),PRTABL     END OF LABEL IS OFFSET\n         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY\n         ST    R6,CURRLBL              SAVE IT'S ADDRESS\nLRENTS   CLI   0(R7),X'FF'             END OF ESD TABLE\n         JE    RLDLBLS                 YES\n         CLC   SYMLENG,ASTERISK        THIS DESIRED LR ENTRY\n         JE    GOTLR                   YES\nLRESTP   LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY\n         J     LRENTS                  LOOP THRU ESD TABLE\nGOTLR    SR    R12,R12                 CLEAR WORK REGISTER\n         ICM   R12,7,SYMADDR           GET SYMBOL ADDRESS\n         S     R12,START               RELATIVIZE IN CSECT\n         STCM  R12,7,LBLADR            SAVE RELATIVE ADDRESS\n         MVC   LBLNAME,BLANX                                       @05A\n         MVC   LBLNAME(8),EXTSYM       SYMBOL NAME TO OUTPUT\n         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY\n         ST    R6,CURRLBL              SAVE NEXT LABEL ENTRY ADDR\n         J     LRESTP                  CONTINUE ESD PROCESSING\n         DROP  R7\nRLDLBLS  L     R7,RLDTBL               GET RLD TBL ADDR\n         USING RLDTBLD,R7\nRLDLBND  CLI   0(R7),X'FF'             END OF RLD TABLE   **\n         JE    PHASE1                  YES\n         CLC   RLDRP,ESDID             RLD ESDID = DESIRED CSECT ESDID\n         JE    INTREFS                 YES, INTERNAL ADCON\n         CLI   RLDTYPE,1               VCON\n         JE    EXTREFS                 YES\n         CLI   RLDTYPE,0               ER                          @03A\n         JE    EXTREFS                 YES                         @03A\n         CLI   RLDTYPE,8               IS IT UNRESOLVED\n         JE    EXTREFS                 YES\nRLLSTP   LA    R7,L'RLDENT(R7)         TO NEXT RLD ENTRY\n         J     RLDLBND                 LOOP THRU RLD TABLE\nEXTREFS  MVC   LBLNAME,BLANX                                       @05A\n         CLI   RLDESDTP,X'0A'          W-CON\n         JNE   VCONLBL                 NO, BUILD V-CON\n         MVI   LBLTYP,C'W'             SHOW W-CON\n         J     FXTLBL                  CONTINUE LABEL ENTRY FORMAT\nVCONLBL  MVI   LBLTYP,C'V'             SHOW V-CON\n         CLC   RLDNAME,XZROS                                       @03A\n         JNE   FXTLBL                                              @03A\n         MVC   LBLNAME(8),CQUEST                                   @03A\n         J     FINLBL                                              @03A\nFXTLBL8  MVI   LBLTYP,C'8'                                         @10C\n         MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY         @10A\n         L     R12,TXTSTRT                                         @10A\n         SR    R14,R14                                             @10A\n         ICM   R14,7,RLDADDR                                       @10A\n         AR    R12,R14                                             @10A\n         AHI   R12,4                                               @10A\n         L     R15,0(R12)                                          @10A\n         L     R12,START                                           @10A\n         SR    R15,R12                                             @10A\n         LR    R12,R15                                             @10A\n         ST    R12,COMMENT                                         @10A\n         LA    R12,COMMENT                                         @10A\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @10A\n         MVI   LBLNAME,C'A'                                        @10A\n         MVC   LBLNAME+1(6),PRTABL+2                               @10A\n         MVI   LBLNAME+7,C' '                                      @10A\n         MVC   COMMENT+4(8),LBLNAME                                @10A\n         J     FINLBL                                              @10A\nFXTLBL   MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY\nFINLBL   MVC   LBLADR,RLDADDR          ADDRESS TO LABEL ENTRY\n         MVC   LBLLEN,RLDLEN           LENGTH TO LABEL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT LABEL TABEL ENTRY\n         ST    R6,CURRLBL              SAVE CURRENT LABEL TABLE ADDR\n         J     RLLSTP                  CONTINUE LABEL TABLE BUILD\nINTREFS  DS    0H\n         CLI   RLDLEN,8                AD LABEL                    @06A\n         JE    FXTLBL8                 BRANCH IF YES               @06A\n         CLI   RLDTYPE,0               A-CON\n         JNE   RLLSTP                  NO, IGNORE\n         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY TYPE\n         SR    R12,R12                 CLEAR WORK REGISTER\n         ICM   R12,7,RLDADDR           GET RLD ADDRESS\n         A     R12,TXTSTRT             FIND LOC IN TEXT\n         MVC   LBLADR,1(R12)           MOVE TO LABEL ENTRY\n         CLI   RLDLEN,8                DOUBLE WORD ADDRESS 8-BYTES @06A\n         JE    INTGOTL                 YES                         @06A\n         CLI   RLDLEN,4                ACON IS 4-BYTES\n         JE    INTGOTL                 YES\n         MVC   LBLADR,0(R12)           TEXT TO LABEL ENTRY\n         CLI   RLDLEN,3                ADCON IS 3-BYTES\n         JE    INTGOTL                 YES\n         MVC   LBLADR+1(2),0(R12)      TEXT TO LABEL ENTRY\n         MVI   LBLADR,0                CLEAR 1ST BYTE\n         CLI   RLDLEN,2                ADCON IS 2-BYTES\n         JE    INTGOTL                 YES\n         XC    LBLADR,LBLADR           CLEAR LABEL ENTRY ADDR\n         MVC   LBLADR+2(1),0(R12)      TEXT TO LABEL ENTRY\nINTGOTL  SR    R12,R12                 CLEAR WORK\n         ICM   R12,7,LBLADR            GET ADDRESS\n         S     R12,START               RELATIVIZE IN CSECT\n         JM    RLLSTP                  NEGATIVE, IGNORE\n         STCM  R12,7,LBLADR            STORE RELATIVE ADDRESS\n         LA    R12,LBLADR              POINT TO ADDRESS\n         JAS   R9,HEXPRT3              CONVERT TO PRINTABLE\n         MVC   LBLNAME,BLANX           INIT TO BLAKS               @05A\n         MVI   LBLNAME,C'A'            LABEL ENTRY TYPE\n         MVC   LBLNAME+1(6),PRTABL     LOW ORDER NAME POSITIONS\n         MVI   LBLNAME+7,C' '          CLEAR LAST NAME BYTE\n         MVC   LABELL(LABELL,R6),0(R6) COPY THIS ENTRY TO NEXT\n         MVI   LBLLEN,0                SET LENGTH = 0\n         LA    R6,LABELL(R6)           STEP TO NEXT\n         MVI   LBLTYP,C'A'             SHOW TYPE\n         J     FINLBL                  FINISH LABEL\n         DROP  R6\n         DROP  R7\n****************************************************************\n*                                                              *\n* LOAD AND EXECUTE PHASE 1: HDISASM1                            *\n*                                                              *\n****************************************************************\nPHASE1   DS    0H\n         LARL  R0,HDISSFTB             LOAD HDISSFTB              @08A\n         SR    R1,R1                                              @08A\n         SVC   8                       LOAD HDISD2TB              @08A\n         ST    R0,SFTAD                SAVE EPA OF HDISD2TB       @08A\n         MVC   0(3,R6),HIVAL           SET END OF LABEL TABLE\n         L     R15,ASM1AD              COPY E.P. ADDRESS\n*        LA    R1,=A(COMMPARM)         @ PARAMETER LIST\n         LARL  R1,COMMPARM             @ PARAMETER LIST\n         BALR  R14,R15                 LINK TO HDISASM1\n         CLI   USERR,0                 ANY ERRORS\n         JNE   CLOSES                  YES, STOP THE RUN\n****************************************************************\n*                                                              *\n* PRINT THE LABEL TABLE AFTER PHASE 1 COMPLETION.              *\n*                                                              *\n****************************************************************\n         MVC   DATOCUR,DATSTRT\n         MVC   CODOCUR,CODSTRT\n         MVC   PRTLINE,PH1LBL          HEADER 1\n         JAS   R9,PRINT                PRINT IT\n         MVC   PRTLINE,PH1HDR          HEADER 2\n         JAS   R9,PRINT                PRINT IT\n         L     R6,LBLTBL               GET LABEL TABLE ADDR\n         USING LABELD,R6\nLPEND    C     R6,CURRLBL              END OF TABLE\n         JNL   FREESTRG                YES\n         LA    R12,LBLADR              @ LABEL ADDRESS\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT(6),PRTABL           ADDRESS TO PRINT\n         MVC   PRT+9(1),LBLTYP         TYPE TO PRINT\n         MVC   PRT+12(L'LBLNAME),LBLNAME     SYMBOL TO PRINT      @05C\n         CLI   LBLLEN,0                ANY LENGTH\n         JE    LTPPRT                  NO\n         LA    R12,LBLLEN              GET @ LENGTH\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+26(2),PRTABL        LENGTH TO PRINT             @05C\n         LA    R12,LBLREF              GET @ LENGTH                @03A\n         JAS   R9,HEXPRT3              CONVERT                     @03A\n         MVC   PRT+30(6),PRTABL        LENGTH TO PRINT             @05C\nLTPPRT   JAS   R9,PRINT                PRINT TBL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT ENTRY\n         J     LPEND                   LOOP THRU TABLE\nFREESTRG L     R12,RLDTBL              @ RLD TABLE\n         STORAGE RELEASE,LENGTH=96000,ADDR=(12)   FREE RLD TABLE   @06A\n         L     R12,BUFAD                                           @02A\n         STORAGE RELEASE,LENGTH=32768,ADDR=(12)   FREE I/O         @06C\n*                                                 BUFFER ADDRESS\n****************************************************************\n*                                                              *\n* PRINT THE TEXT FOR THE CSECT TO BE DISASSEMBLED.             *\n*                                                              *\n****************************************************************\n         MVI   PCC,C'1'                SET SKIP TO HEAD\n         MVC   PRT+50(19),MSG27        '***** T E X T *****'\n         JAS   R9,PRINT                PRINT TEXT HEADER\n         MVI   PCC,C'0'                SET DOUBLE SPACING\n         L     R11,TXTSTRT             GET TEXT START ADDRESS\nPNEXLIN  LA    R10,2                   GROUPS PER LINE\n         LA    R12,POFSET+1            @ OFFSET\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT(6),PRTABL           OFFSET TO PRINT\n         MVC   PRT+85(32),0(R11)       TEXT TO PRINT\n         TR    PRT+85(32),PRTCHAR      TRANSLATE TO PRINTABLE\n         LA    R8,PRT+9                @ 1ST PRINT WORD\n         LA    R7,4                    4 WORDS PER GROUP\nPGRP     LA    R12,0(R11)              @ TEXT WORD\n         JAS   R9,HEXPRT4              CONVERT\n         MVC   0(8,R8),PRTABL          TEXT TO PRINT WORD\n         LA    R11,4(R11)              TO NEXT TEXT WORD\n         LA    R8,9(R8)                TO NEXT PRINT LOC\n         JCT   R7,PGRP                 DO 4 TIMES\n         LA    R8,2(R8)                SPACE BETWEEN GROUPS\n         LA    R7,4                    FOR 2ND GROUP\n         JCT   R10,PGRP                DO 4 MORE TIMES\n         JAS   R9,PRINT                PRINT THE LINE\n         L     R9,POFSET               GET OFFSET\n         LA    R9,32(R9)               ADD 32 BYTES\n         ST    R9,POFSET               UPDATE OFFSET\n         C     R11,TXTEND              END OF TEXT\n         JL    PNEXLIN                 NO, CONTINUE\n         MVI   PCC,C'1'                SET SKIP TO HEAD\n         MVI   WORKREC,C' '            CLEAR OUTPUT RECORD\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         MVC   NAME,CSECT              CSECT NAME\n****************************************************************\n*                                                              *\n* CREATE THE INITIAL CSECT INSTRUCTION, AND ANY ENTRY STATE-   *\n* MENTS WHICH MAY BE INDICATED BY ESD TABLE ENTRIES.           *\n*                                                              *\n****************************************************************\n         MVC   MNEMONIC(L'C_CSECT),C_CSECT SET MNEMONIC TO CSECT\n         JAS   R9,PUNCH                WRITE SYSPUNCH RECORD\n         MVC   PRT+25(14),PRT          COPY CSECT STATEMENT       @03A\n         MVC   PRT(16),BLANX                TO SYSPRINT           @03A\n         PUT   SYSPRINT,PRTLINE        WRITE SYSPRINT RECORD\n         L     R7,SYMTBAD              GET ESD TBL ADDR\n         USING SYMTBL,R7\nLREFSS   CLI   0(R7),X'FF'             END OF ESD TBL\n         JE    CKLDLB                  YES\n         CLC   SYMLENG,ASTERISK        '***'\n         JE    MAKEXT                  YES\nESDTSTP  LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY\n         J     LREFSS                  LOOP THRU ESD TBL\nMAKEXT   MVC   MNEMONIC(L'C_ENTRY),C_ENTRY   MNEMONIC IS ENTRY    @04C\n         MVC   OPNDS(8),EXTSYM         SYMBOL TO OPERAND\n         JAS   R9,PUNCH                WRITE OUTPUT RECORD\n         MVC   PRT+34(17),PRT+9        COPY ENTRY STATEMENT       @03A\n         MVC   PRT+9(17),BLANX              TO SYSPRINT           @03A\n         PUT   SYSPRINT,PRTLINE        AND PRINT IT\n         J     ESDTSTP                 CONTINUE ESD PROCESSING\n         DROP  R7\n         DROP  R6\nCKLDLB   L     R12,SYMTBAD             @ ESD SYMBOL TABLE\n****************************************************************\n*                                                              *\n* LOAD AND EXECUTE PHASE 2: HDISASM2                           *\n*                                                              *\n****************************************************************\n         STORAGE RELEASE,LENGTH=304000,ADDR=(12)  FREE SYMBOL TBL\n         L     R15,ASM2AD              GET E.P. ADDRESS\n         LARL  R1,COMMPARM             GET PARAMETER ADDRESS       @06C\n         BALR  R14,R15                 CALL HDISASM2\n         J     EOJ                     GO FINISH\n****************************************************************\n*                                                              *\n* WRITE OUTPUT TO SYSPUNCH.                                    *\n*                                                              *\n****************************************************************\nPUNCH    EQU   *                       WRITE OUTPUT RECORDS\n         MVC   PRT(80),WORKREC         SAVE IN PRINT\n         TM    SYSPUNCH+48,X'10'       IS FILE OPEN\n         JZ    CLRWKR                  NO\n         AP    CARDNO,P10              INCREMENT CARD NO\n         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD\n         OI    SEQNBR+7,C'0'           CLEAR SIGN\n         PUT   SYSPUNCH,WORKREC        WRITE SOURCE CARD\nCLRWKR   MVI   WORKREC,C' '            CLEAR OUTPUT RECORD\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         BR    R9                      RETURN\n****************************************************************\n*                                                              *\n* END OF JOB. DISASSEMBLY COMPLETE.                            *\n*                                                              *\n****************************************************************\nEOJ      EQU   *                       END OF JOB\n         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.        @04A\n         JZ    NOCTL                   NO                         @04A\n         MVC   MNEMONIC(L'C_YREGS),C_YREGS  SET MNEMONIC TO YREGS\n         JAS   R9,PUNCH                WRITE RECORD\n         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC             @20A\n         MVC   PRT+34(5),C_YREGS                                  @03A\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A\n         L     R12,DTBSTRT             @ DSECT HEADER TBL\nCENDSTB  CLI   0(R12),X'FF'            END OF TABLE\n         JE    ENDSTMT                 YES\n         MVC   NAME,0(R12)             DSECT NAME TO RECORD\n         MVC   MNEMONI2(L'CDSECT),CDSECT  COPY 'DSECT'            @05C\n         JAS   R9,PUNCH                PUNCH DSECT ENTRY\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A\n         ICM   R11,7,DSECTHA-DSECTHD(R12)  GET FIELD TABLE ADDR   @05C\n         USING DSECTD,R11\nCENDFTB  CLI   0(R11),X'FF'            END OF FIELD TABLE\n         JNE   DFMTFLD                 NO\n         LA    R12,DSECTHL(R12)         TO NEXT DSECT HEADER      @05C\n         J     CENDSTB                 LOOP\nDFMTFLD  MVC   NAME(L'DSLNAME),DSLNAME NAME TO RECORD             @05C\n         MVC   MNEMONI2(L'CEQU),CEQU   COPY 'EQU'                 @05C\n         MVC   OPNDS+4(8),0(R12)       BASE NAME TO OPERAND       @05C\n         LA    R10,OPNDS+7             @ NAME RHE\nCFRHE    CLI   0(R10),C' '             AT RHE\n         JNE   CFPLUS                  YES\n         JCT   R10,CFRHE               BACK UP 1 AND LOOP\nCFPLUS   LA    R10,1(R10)              TO NEXT POS\n         MVI   0(R10),C'+'             DELIMITER\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,DSOFSET            GET OFFSET\n         CVD   R1,DBLWD                CONVERT\n         UNPK  DBLWD(5),DBLWD+4(4)     UNPACK                     @06C\n         OI    DBLWD+4,X'F0'           CLEAR SIGN                 @06C\n         CHI   R1,10000                OFFSET < 10000             @06A\n         JL    CFO1000                 YES                        @06A\n         MVC   1(5,R10),DBLWD          NO, MOVE 5-DIGIT OFFSET    @06A\n         LA    R10,6(R10)              TO NEXT POS                @06A\n         J     CFCMA                   CONTINUE                   @06A\nCFO1000  CHI   R1,1000                 OFFSET < 1000              @06C\n         JL    CFO100                  YES\n         MVC   1(4,R10),DBLWD+1        NO, MOVE 4-DIGIT OFFSET    @06C\n         LA    R10,5(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO100   CHI   R1,100                  OFFSET < 100               @03C\n         JL    CFO10                   YES\n         MVC   1(3,R10),DBLWD+2        NO, MOVE 3-DIGIT OFFSET    @06C\n         LA    R10,4(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO10    CHI   R1,10                   OFFSET < 10                @03C\n         JL    CFO1                    YES\n         MVC   1(2,R10),DBLWD+3        MOVE 2-DIGIT OFFSET        @06C\n         LA    R10,3(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO1     LTR   R1,R1                   ANY OFFSET\n         JZ    CFCMA                   NO\n         MVC   1(1,R10),DBLWD+4        YES, MOVE 1-DIGIT OFFSET   @06C\n         LA    R10,2(R10)              TO NEXT POS\nCFCMA    MVI   0(R10),C','             DELIMITER\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,DSLENG               PICK UP LENGTH\n         CVD   R1,DBLWD                CONVERT\n         UNPK  DBLWD(3),DBLWD+4(4)     UNPACK\n         OI    DBLWD+2,C'0'            CLEAR SIGN\n         CHI   R1,100                  LENGTH < 100                @03C\n         JL    CFL10                   YES\n         MVC   1(3,R10),DBLWD          NO, MOVE 3-DIGIT LENGTH\n         J     CFWRT                   CONTINUE\nCFL10    CHI   R1,10                   LENGTH < 10\n         JL    CFL1                    YES\n         MVC   1(2,R10),DBLWD+1        NO, MOVE 2-DIGIT LENGTH\n         J     CFWRT                   CONTINUE\nCFL1     MVC   1(1,R10),DBLWD+2        MOVE 1-DIGIT LENGTH\nCFWRT    MVC   COMMENTE,DSCOMMT        COPY DSECT DESCRIPTION      @05A\n         JAS   R9,PUNCH                PUNCH THE RECORD\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C\n         LA    R11,DSECTL(R11)         TO NEXT FIELD ENTRY\n         J     CENDFTB                 LOOP\nENDSTMT  MVC   MNEMONIC(L'C_END),C_END   COPY END TO MNEMONIC\n         MVC   OPNDS(8),ENDLBLNM       POINT END STMT TO BEGIN LOC\n         JAS   R9,PUNCH                WRITE THE RECORD\n         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC              @20C\n         MVC   PRT+34(3),C_END        COPY LITERAL END             @03A\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C\n         L     R12,CTLSTRT                                         @04A\n         STORAGE RELEASE,LENGTH=22200,ADDR=(12)  FREE CTLBL TABLE  @06C\n         L     R12,DATSTRT                                         @04A\n         STORAGE RELEASE,LENGTH=1801,ADDR=(12) FREE DATA ONLY TBL  @06C\nCLOSES   CLOSE (SYSLIB,,SYSPUNCH,,SYSPRINT,,SYSIN,,LOADMAP,,REGUSE),   X\n               MODE=31\n         PR                            RETURN TO CALLER            @03A\n         DELETE EPLOC=DATAAD1                                      @08C\n         DELETE EPLOC=DATAAD2                                      @08A\n         DELETE EPLOC=DATAAD3                                      @10A\n         DELETE EPLOC=SFTAD                                        @05A\n         DROP  R11\n*\n*                 *** DATA AND WORK AREAS ***\n         DC    CL24'HDISASM VARIABLES ==>  '   EYE CATCHER         @06A\nDATASTR  DC    A(HDISASM)\nASM1AD   DC    V(HDISASM1)             ADDRESS OF HDISASM1         @03A\nASM2AD   DC    V(HDISASM2)             ADDRESS OF HDISASM1         @03A\nBUFAD    DS    F                       SYSLIB BUFFER ADDR\nSYMTBAD  DS    F                       SYMBOL TABLE ADDRESS\nCURRSYM  DS    F                       CURRENT SYM TBL ADDR\nENDSYM   DC    F'304000'        SYM TBL END ADDR (32000 ENTRIES)   @04C\nRLDTBL   DS    F                       ADDR OF RLD TABLE\nCURRLD   DS    F                       CURR RLD TBL ADDR\nENDRLD   DC    F'96000'                RLD TBL END ADDR\nPROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT\nCES9     DS    F                       CESDREC RETURN ADDR\nBL9      DS    F                       BLDL RTN RETURN ADDR\nCR9      DS    F                       CTRLRECS RETURN ADDR\nCT9      DS    F                       CNTLRECS RETURN ADDR\nRL9      DS    F                       RLDRECS RETURN ADDR\nTX9      DS    F                       TXTFMT RETURN ADDR\nGEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE               @03A\nGEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE               @03A\nGRDMVREX MVC   RESIDENT(1),0(R2)       EXECUTED MOVE\nGRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE               @03A\nCLASSOFF DC    F'0'                    OFFSET TO CLASS             @06A\nRLD_PTR  DC    F'0'                    CURRENT RLD ENTRY ADDRESS   @05A\nADJUST   DC    H'0'\nP0       DC    P'0'                    CONSTANT 0\nP1       DC    P'1'                    CONSTANT 1\nP10      DC    P'10'                   CONSTANT 58\nP58      DC    P'58'                   CONSTANT 58\nJFCBAD   DS    0F                      DCB EXIT LIST\n         DC    X'87'                   RDJFCB, END OF LIST\n         DC    AL3(JFCB)               ADDRESS OF JFCB READ AREA\nJFCB     DS    CL176                   JFCB\nSYMHDR1  DC    C'0     SYMBOL        TYPE   IND  ADDR'             @05C\n         DC    C'    SEG  LRID   LENG  ESDID  RSECT  AMODE  RMODE'\n         DC    CL64' '\nSYMHDR2  DC    C'0     SYMBOL     TYPE  IND  STA   ADDR    LENG  ' @05A\n         DC    CL100' '                                            @05A\n*\n*\n*\nRLDHDR   DC    C'0     RELPTR  POSPTR      TYPE     LEN'\n         DC    C'    DIR   ADDR'\n         DC    CL90' '\n*\n*\n*\nPH1LBL   DC    CL121'1***** PHASE 1 LABEL TABLE *****'\nPH1HDR   DC    CL121'0  ADDR TYPE  SYMBOL      LEN  REFERENCE'     @05C\n*\n*\n*\nX0F00    DC    X'0F00'                 CONSTANT ZEROS\nNOCNTRL  DC    C'MEMBER AND CSECT MUST BE ENTERED VIA SYSIN'\nOVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'\nNOMEM    DC    C'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM'\nINVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'\nINVCSECT DC    C'SPECIFIED CSECT NOT FOUND IN MEMBER'\nFULLSYM  DC    C'SYMBOL TABLE FULL: OVER 16000 ENTRIES'            @04C\nFULLRLD  DC    C'RLD TABLE FULL: OVER 3000 ENTRIES'\nNOSTOR   DC    CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'       @04A\nCURRAMOD DS    XL1                        REQUESTED CSECT AMODE    @04A\nCURRRMOD DS    XL1                        REQUESTED CSECT RMODE    @04A\nRESIDENT DC    CL8' '                  RLD RESIDENT CSECT NAME     @04A\nSYMBPTS2 DC    CL8' '                  RLD SYMBOL POINTED TO       @04A\nESDSYMB  DC    CL8' '                  ESD SYMBOL NAME             @04A\nESDOWNER DC    CL8' '                  ESD OWNING CSECT NAME       @04A\nTEXTADDR DC    A(0)                       ADDRESS OF CSECT TEXT    @04A\nTEXTENDA DC    A(0)                  ADDRESS OF LAST BYTE OF TEXT  @04A\nTEXTLENG DC    A(0)                       TOTAL TEXT LENGTH        @04A\nCURRTEXT DC    A(0)                  ADDRESS OF CURRENT TEXT BYTE  @04A\nTMPCLBL  DS    A(0)                                                @06A\nIEWPLMH  DC    C'IEWPLMH'                                          @04A\nC_B_TEXT DC    CL8'B_TEXT  '                                       @04A\nC_ESD    DC    CL8'ESD     '                                       @04A\nC_RLD    DC    CL8'RLD     '                                       @04A\nC_TEXT   DC    CL8'TEXT    '\nC_CSECT  DC    C'CSECT'\nC_END    DC    C'END  '\nC_ENTRY  DC    C'ENTRY'\nC_YREGS  DC    C'YREGS'\nC_SUPVR  DC    C'SUPVR'\nC_FLTPT  DC    C'FLTPT'\nC_ACON   DC    C'ACON'\nC_VCON   DC    C'VCON'\nC_LR     DC    C'LR'\nC_ED     DC    C'ED'\nC_SD     DC    C'SD'\nC_ER     DC    C'ER'\nC_PC     DC    C'PC'\nC_CM     DC    C'CM'\nC_WX     DC    C'WX'\nC_PR     DC    C'PR'\nCPRDISP  DC    C'PRDISP'\nASTERISK DC    C'***'\nCNULL    DC    C'NULL'\nCESTAB   DC    C'E/STAB'\nCQUEST   DC    C'????????'\nC_OL     DC    C'OL'\nCEXEC    DC    C'EXEC'\nCREFR    DC    C'REFR'\nCTEST    DC    C'TEST'\nCRENT    DC    C'RENT'\nCREUS    DC    C'REUS'\nCOVLY    DC    C'OVLY'\nCYES     DC    C'YES'\nCNO      DC    C'NO '\nCANY     DC    C'ANY'\nCEQU     DC    C'EQU'\nC31      DC    C'31 '\nC24      DC    C'24 '\nCDSECT   DC    C'DSECT'\nCPRCUM   DC    C'PRCUM '\nCUNRESV  DC    C'UNRESOLVED'\nCUNKNOWN DC    C' ??:'\nMSG01    DC    C'*** EXTERNAL SYMBOL TABLE ***'\nMSG02    DC    C'***** RLD INFO *****'\nMSG03    DC    C'DIRECTORY INFO FOR MODULE '\nMSG04    DC    C'TTR OF MODULE='\nMSG05    DC    C'CONCATENATION NBR='\nMSG06    DC    C'ALIAS INDIC='\nMSG07    DC    C'*** ALIAS ***'\nMSG08    DC    C'TTR, 1ST TXT RECD='\nMSG09    DC    C'TTR OF NOTE/SCATTER LIST='\nMSG10    DC    C'NBR NOTE ENTRIES='\nMSG11    DC    C'ATTRIBUTES 1='\nMSG12    DC    C'TOTAL LENGTH='\nMSG13    DC    C'LENGTH OF 1ST TXT RECD='\nMSG14    DC    C'E. P. ADDR='\nMSG15    DC    C'ATTRIBUTES 2='\nMSG16    DC    C'PAGE ALIGN REQRD'\nMSG17    DC    C'SSI PRESENT'\nMSG18    DC    C'SCTRLEN='\nMSG19    DC    C'TRANSLATE TBL LEN='\nMSG20    DC    C'ESD ID OF 1ST TXT='\nMSG21    DC    C'ESD ID CONTAINING E.P.='\nMSG22    DC    C'E.P. ADDRESS OF THIS MEMBER='\nMSG23    DC    C'REAL MEMBER NAME='\nMSG24    DC    C'SSI INFO='\nMSG25    DC    C'AUTH CODE='\nMSG26    DC    C'***** REAL MEMBER DIRECTORY INFO *****'\nMSG27    DC    C'***** T E X T *****'\nPOFSET   DC    F'0'                    OFFSET FOR TEXT PRINT\nMAPDB2   DC    CL8'MAPDB2  '                                      @05A\nMAPMVS   DC    CL8'MAPMVS  '                                      @05A\nMAPOMVS  DC    CL8'MAPOMVS '                                      @10A\nHDISSFTB DC    CL8'HDISSFTB'                                      @05A\nPRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE\n         ORG   PRTCHAR+C' '\n         DC    C' '\n         ORG   PRTCHAR+X'4A'      4/16/87  AC\n*        DC    X'4A4B4C4D4E'\n         DC    X'4A4B'\n         ORG   PRTCHAR+X'50'\n         DC    X'50'\n         ORG   PRTCHAR+X'5A'\n         DC    X'5A5B5C5D5E'\n         ORG   PRTCHAR+X'60'\n         DC    X'6061'\n         ORG   PRTCHAR+X'6A'\n         DC    X'6A6B6C6D6E6F'\n         ORG   PRTCHAR+X'7A'\n         DC    X'7A7B7C7D7E7F'    4/16/87\n         ORG   PRTCHAR+C'a'                                       @04A\n         DC    C'abcdefehi'                                       @04A\n         ORG   PRTCHAR+C'j'                                       @04A\n         DC    C'jklmnopqr'                                       @04A\n         ORG   PRTCHAR+C's'                                       @04A\n         DC    C'stuvwxyz'                                        @04A\n         ORG   PRTCHAR+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   PRTCHAR+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   PRTCHAR+C'S'\n         DC    C'STUVWXYZ'\n         ORG   PRTCHAR+C'0'\n         DC    C'0123456789'\n         ORG\n*\n*\n*\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X\n               RECFM=FB,LRECL=80\nSYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X\n               RECFM=FB,LRECL=80,EODAD=NOCTL\nSYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X\n               RECFM=U,NCP=1\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=121\nLOADMAP  DCB   DSORG=PS,MACRF=PM,DDNAME=LOADMAP,                       X\n               RECFM=FBA,LRECL=121\nREGUSE   DCB   DSORG=PS,MACRF=PM,DDNAME=REGUSE,                        X\n               RECFM=FBA,LRECL=121\nSAVELNG  DS    F        *** DEBUG ***\nSAVEADR  DS    F        *** DEBUG ***\nSAVETXT  DS    F        *** DEBUG ***\n***********************************************************************\n*  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE                   *\n***********************************************************************\nPARMAREA DS    0F          READLMOD PARAMETER AREA\nPRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DC    CL8' '         MEMBER NAME\nPRMCSECT DC    CL8' '         CSECT NAME\nPRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                                TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                                NAME, OR MAP\nPRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                             BEFORE A FIRST CALL FOR A SET OF DATA,\n*                             THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                             ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                             RETURNED. CURRENT VALUE IS RETURNED BY\n*                             THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (ZERO MEANS\n*                             MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                             WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                             4 MEANS THE DATA IN THE BUFFER IS ALL\n*                             THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DC    A(0)        ADDRESS OF THE DATA BUFFER HEADER. THE\n*                             HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                             THE DATA ELEMENTS.\nPRMERROR DS    CL1         ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '           SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'           PARAMETER ERROR\nPRMAC_ERR EQU  C'E'           IEWBIND MACRO ERROR OCCURRED\n****************************************************************\n*\n* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED\n* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED\n* WITH ALL OTHER PROGRAMS.\n*\n****************************************************************\n*\n         DC    C'COMMPARM'             EYECATCHER\n         DS    0D\nCOMMPARM EQU   *                       COMMON AREAS\nTRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TABLE\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nDATAAD1  DS    F                       @ MAPDB2                    @08C\nDATAAD2  DS    F                       @ MAPMVS                    @08A\nDATAAD3  DS    F                       @ MAPOMVS                   @10A\nSFTAD    DS    F                       @ SYSTEM FUNCTION TABLE     @05A\nS_DC     DC    C'DC'\nS_NI     DC    C'NI'\nS_STM    DC    C'STM'\nS_DSN    DC    C'DSN'\nS_BPX    DC    C'BPX'\nS_ON     DC    C'On '\nS_OFF    DC    C'Off '\nS_USING  DC    C'USING'\nTXTOFST  DS    0F\n         DS    X\nTXTOFSET DS    XL3                     OFFSET TO TEXT BYTE\nENDOFST  DS    F                       DSECT ENDING OFFSET\nPUNCHDCB DC    A(SYSPUNCH)             @ SYSPUNCH DCB\nPRINTDCB DC    A(SYSPRINT)             @ SYSPRINT DCB\nREGUSDCB DC    A(REGUSE)               @ REGUSE   DCB\nINDCB    DC    A(SYSIN)                @ SYSIN DCB\nCSECT    DC    CL8' '                  SPECIFIED CSECT NAME\nESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT\nENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE\nLINECT   DC    PL2'0'                  PRINT LINE COUNTER\nSTART    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC\nEND      DC    F'0'                    CSECT END ADDRESS\nCSTLENG  DC    F'0'                    LENGTH OF SPECIFIED CSECT\nLBLTBL   DS    F                       @ LABEL TABLE\nCURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR\nENDLBL   DS    F                       @ END OF LABEL TBL\nTXTSTRT  DS    F                       @ TEXT STORAGE AREA\nTXTEND   DS    F                       @ END OF TEXT AREA\nTXTCURR  DS    F                       @ CURRENT TEXT LOC\nDTBSTRT  DC    A(HIVAL)                DSECT TABLE START ADDR\nDTBCURR  DC    F'0'                    DSECT TABLE CURRENT ENTRY ADDR\nDTBEND   DC    F'0'                    DSECT TABLE END ADDR\nUSGSTRT  DC    A(HIVAL)                USING TABLE START ADDR\nUSGCUR   DC    F'0'                    USING TABLE CURRENT ADDR\nUSGEND   DC    F'0'                    USING TABLE END ADDR\nDATSTRT  DS    F                       DATA ONLY TABLE ADDR\nDATOCUR  DS    F                       CURRENT DATA ONLY ADDR\nDATOEND  DS    F                       END OF DATA ONLY TABLE\nFLDTBL   DS    F                       @ FIELD TABLE\nCURRFLD  DS    F                       CURRENT FIELD ENTRY ADDR\nENDFLD   DS    F                       @ END OF FIELD TBL\nBLANX    DC    CL18' '                 CONSTANT BLANKS             @03C\nFLPTASM  DC    X'00'                   FLOATING POINT INDICATOR\nPRIVASM  DC    X'00'                   PRIVILEGED INDICATOR\nUSERR    DC    X'00'                   ERROR INDIC FOR HDISASM1\nNBRLBLS  DC    H'0'                    NBR LABELS FROM HDISASM1\n*\n*\n*\nWORKREC  DS    0CL80                   DISASSEMBLY WORK AREA\nNAME     DS    CL8                     NAME\n         DS    CL1\nMNEMONIC DS    CL6                     INSTRUCTION MNEMONIC        @04C\nOPNDS    DS    CL30                    1ST OPERAND\nOPNDSSP  DS    CL1                                                 @04C\nCOMMENTS DS    CL25                    COMMENT\nCOL72    DS    CL1\nSEQNBR   DS    CL8                     CARD SEQ NBR\n         ORG   MNEMONIC+4                                          @05A\nMNEMONI2 DS    CL6                     EQU MNEMONIC                @05A\n         ORG   COMMENTS-3                                          @05A\nCOMMENTE DS    CL28                    COMMENT                     @05A\n         ORG\nWORKREC2 DS    CL80                    SECOND LINE                 @04A\n         DS    CL30                                                @04A\nCOMTREC  DS    0CL80                                               @27A\n         DC    60C'*'                                              @27A\n         DC    CL20' '                                             @27A\n*\n*\n*\nPRTLINE  DS    0CL121                  PRINT LINE\nPCC      DC    C'1'                    CARRIAGE CONTROL\nPRT      DC    CL120' '                PRINT DATA\nCARDNO   DC    PL4'0'                  OUTPUT CARD NBR\n*\n*\n*\n         DS    0F\nBLDLIST  DS    0CL62                   BLDL LIST\n         DC    H'1'                    ONE ENTRY\n         DC    H'58'                   LENGTH OF ENTRY\nMEMBER   DC    CL8' '                  MEMBER NAME\nTTRMOD   DC    XL3'000000'             TTR OF MODULE\nCCAT     DC    XL1'00'                 CONCATENATION NUMBER\n         DC    XL1'00'\nALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR\n*                           80=ALIAS\nTTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD\n         DC    XL1'00'\nTTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST\nNNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST\nATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1\n*                           80=RENT\n*                           40=REUS\n*                           20=OVERLAY\n*                           10=UNDER TEST\n*                           08=ONLY LOADABLE\n*                           04=SCATTER FORMAT\n*                           02=EXECUTABLE\n*                           01=ONE TXT, NO RLD RECORDS\nATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2\n*                           80=CANNOT BE REPROCESSED BY LKED E\n*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO\n*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO\n*                           10=CONTAINS NO RLD RECORD\n*                           08=CANNOT BE REPROCESSED BY LKED\n*                           04=CONTAINS TESTRAN SYMBOLS\n*                           02=CREATED BY LKED\n*                           01=REFR\nTOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD\nLENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD\nLKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR\nATTR2    DC    XL1'00'                 ATTRIBUTES 2\n*                           80=PROCESSED BY OS/VS LKED\n*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE\n*                           10=SSI PRESENT\n         DC    XL2'0000'\nSCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH\nTTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH\nSCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD\nSCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT\nALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME\nALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS\nSSI      DS    XL4'00000000'           SSI BYTES\nCODSTRT  DS    F                       CODE ONLY TABLE ADDR        @03A\nCODOCUR  DS    F                       CURRENT CODE ONLY ADDR      @03A\nCODOEND  DS    F                       END OF CODE ONLY TABLE      @03A\nCTLSTRT  DS    F                       CTLBK ONLY TABLE ADDR       @04A\nCTLOCUR  DS    F                       CURRENT CTLBK ONLY ADDR     @04A\nCTLOEND  DS    F                       END OF CTLBK ONLY TABLE     @04A\nENDDSCT  DC    X'FC00'                                             @09A\nAUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH\nAUTHCOD  DC    XL1'00'                 AUTH CODE\nINSTENT  DS    0CL11                   CURRENT INSTRUCTION ENTRY\nINAME    DS    CL6                     INSTR NAME (MNEMONIC)\nITYPE    DS    XL1                     INSTRUCTION TYPE\nICLASS   DS    XL1                     INSTRUCTION CLASS\nIEDT     DS    XL1                     INSTRUCTION EDITS\nICCSET   DS    XL1                     TYPE CONDITION CODE SET\nINLNG    DS    XL1                     INSTRUCTION LENGTH\nIOLNG    DS    XL1                     OPERAND LENGTH\nTEXT     DS    XL48                    CURRENT TEXT\n*\nDEBUGXX  DC    C'12345678'   DEBUG\n         DC    C'9ABCDEFG'   DEBUG\nXZROS    DC    16X'00'                 CONSTANT ZEROS\n*\nUDSCTAD  DC    A(0)                    @ USER DEFINED DSECT\nHIVAL    DC    4X'FF'                  CONSTANT X F'S\nSIMAPOFT DC    H'0'                    OFFSET\nSIMAPB   DC    X'00'                   BIT MASK\nXOFST    DC    XL3'000030'   ** DEBUG ** RELATIVE OFFSET\nCOMMENT  DC    CL88' '                 SAVE COMMENT FILED\nCCOMMENT DC    CL28' '                 CURRRENT COMMENT  LONG\n         DC    CL20' '                 RESERVED ??\nBD15     DS    A                       REGISTER SAVE AREA\nOPNDWK   DS    CL80                    OPERAND BUILD AREA\nOWSTRT   DC    A(OPNDWK)               @ OPERAND WORK AREA\nSXAPO    DC    C'X'''\nFLAG1    DC    X'00'\nFLGHEX4  EQU   X'80'                   HEX4 FLAG\nFLGPSA   EQU   X'40'                   PSA  MAPPING\nFLGIXREG EQU   X'20'                   INDEX REGISTER IS ZERO\nFLGFOUND EQU   X'10'                   VARIABLE NAME FIND\nFLGUDSCT EQU   X'08'                   USER DEFINED DSECT MAPPING\nFLGNF    EQU   X'04'\nPRTABL   DS    CL9                     PRINTABLE HEX WORK\nSIDSC    DC    CL5'  '                 CURRENT DSECT NAME          @18A\n         DC    C'BASETBL ' ** DEBUG **\nBASES    DC    XL176'00'    11*16      PROGRAM BASE REGISTER TBL   @15C\n         DC    CL6'DSECTS'                                         @23A\nDSREGTBL DC    CL13'R0 '                                           @23A\n*                   0123456789012                                  @23A\n*                   RXX TXXXXX                                     @23A\nDSREGL   EQU   5                       LENGTH OF DSECT NAME        @23A\nDSREGEL  EQU   13                      LENGTH OF DSECT TABLE ENTRY @23C\n         DC    CL13'R1 '                                           @23A\n         DC    CL13'R2 '                                           @23A\n         DC    CL13'R3 '                                           @23A\n         DC    CL13'R4 '                                           @23A\n         DC    CL13'R5 '                                           @23A\n         DC    CL13'R6 '                                           @23A\n         DC    CL13'R7 '                                           @23A\n         DC    CL13'R8 '                                           @23A\n         DC    CL13'R9 '                                           @23A\n         DC    CL13'R10'                                           @23A\n         DC    CL13'R11'                                           @23A\n         DC    CL13'R12'                                           @23A\n         DC    CL13'R13'                                           @23A\n         DC    CL13'R14'                                           @23A\n         DC    CL13'R15'                                           @23A\n         DC    CL13'     PSA'                                      @23A\n*\n*\nCOMMEND  EQU   *\n         COPY HDISTD\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* EXTERNAL SYMBOL DICTIONARY (ESD) BUFFER:                            *\n*    ESDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    ESDENTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nESDHEADR DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER\nESDHBUFI DS    CL8  BUFFER EYECATCHER.\nESDHBUFL DS    F    TOTAL BUFFER LENGTH INCLUDING THIS\nESDHVERS DS    AL1  VERSION OF BUFFER.\n         DS    AL3  RESERVED. MUST BE ZERO.\nESDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.\nESDHENTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER\nESDHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.\nESDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.\nESDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.\n*\nESDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES\nESDTYPE  DS    CL2  TYPE OF ESD ENTRY.\nESDTYPEQ DS    CL2  ESD RECORD TYPE QUALIFIER\nESDNAMES DS    CL1  NAME SPACE OF SYMBOL\nESDSCOPE DS    CL1  SCOPE OF THE SYMBOL\nESDNAME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD\nESDNAMEC DS    H      LENGTH OF THE NAME.\nESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)\nESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS\nESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION\nESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED\nESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK\nESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED\nESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS\n         DS    CL1\nESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION\nESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME\nESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF\n*                        THE SYMBOL RESIDES. FOR LD, PR.\nESDLENG  DS    F    LENGTH OF DEFINED ELEMENT\nESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR\nESDUSBLT DS    XL1  REUSABILITY OF SD\nESDAMODE DS    XL1  ADDRESSING MODE OF SD\nESDRMODE DS    XL1  RMODE OF SD\nESDRECFM DS    H    RECORD FORMAT FOR CLASS\nESDLOADF DS    BL1  LOAD ATTRIBUTES\nESDRO    EQU   X'80'   READ-ONLY\nESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE\nESDMOVE  EQU   X'20'   MOVEABLE\nESDSHR   EQU   X'10'   SHAREABLE\nESDDEFER EQU   X'08'   DEFERRED LOAD\nESDBINDF DS    BL1  BIND ATTRIBUTES\nESDGEND  EQU   X'80'   BINDER-GENERATED\nESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE\nESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS\nESDDESCD EQU   X'10'   DESCRIPTIVE DATA\nESDINIT  EQU   X'08'   HAS PART INITIALIZERS\nESDFILLX EQU   X'04'   ILL HAS BEEN SET\nESDPADST EQU   X'02'   CLASS HAS PADDING AT START\nESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY SYMBOL\nESDMETH  EQU   X'30'   BINDING METHOD\n*                        '00'B = CATENATE\n*                        '01'B = MERGE\n*                        '1-'B = RESERVED\nESDTXTTY EQU   X'0F'   TEXT TYPE\n*                        '0000'B = UNSPECIFIED\n*                        '0001'B = INSTRUCTIONS\n*                        '0010'B = DATA\n*                        '0011'B = TRANSLATOR DEFN\n         DS    XL1\nESDXATCL DS    H    LENGTH OF XATTR CLASS NAME\nESDXATCP DS    A    PTR TO EXTENDED ATTRIBUTES CLASS NAME\nESDXATOF DS    F    EXTENDED ATTRIBUTES OFFSET\nESDSEGMN DS    H    OVERLAY SEGMENT NUMBER OF SECTION\nESDREGN  DS    H    OVERLAY REGION NUMBER OF SECTION\nESDSIGN  DS    CL8  INTERFACE SIGNATURE\nESDAUTOC DS    BL1  AUTOCALL SPEC. APPLIES TO REFERENCES\nESDNVRCL EQU   X'80'      NEVERCALL WAS SPECIFIED\nESDMINOR EQU   X'40'      AUTOCALLED FROM LPA\nESDSTAT  DS    BL1  STATUS\nESDRESLV EQU   X'80'      SYMBOL IS RESOLVED\nESDACPRC EQU   X'40'      PROCESSED BY AUTOCALL\nESDINCLD EQU   X'20'      INCLUDE ATTEMPTED\nESDNOTFD EQU   X'10'      MEMBER NOT FOUND\nESDEXTRN EQU   X'08'      RESOLVED OUTSIDE MODULE\nESDNOCAL EQU   X'04'      NOCALL/NEVERCALL\nESDNOREF EQU   X'02'      NO STRONG REFERENCES\nESDLIBRY EQU   X'01'      SPECIAL CALL LIBRARY REQUESTED\nESDTGTL  DS    H    LENGTH OF THE TARGET.\nESDTGTP  DS    A    POINTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR\n*                      EXTERNAL REFERENCES.\n         DS    H\nESDCNTCL DS    H    LENGTH OF THE CLASS\nESDCNTCP DS    A    POINTS TO NAME OF CONTAINING CLASS\nESDELOFF DS    F    OFFSET WITHIN THE CLASS ELEMENT\nESDCLOFF DS    F    OFFSET WITHIN THE CLASS SEGMENT\n         DS    H\nESDADAL  DS    H    ASSOCIATED DATA LENG\nESDADAP  DS    A    POINTS TO ASSOCIATED DATA\n         DS    F\nESDPRTY  DS    F    BINDING SEQUENCE\nESDNTEND DS    0F\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* RELOCATION DICTIONARY (RLD) BUFFER:                                 *\n*    RLDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nRLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER             @04A\nRLDHBUFI DS    CL8  BUFFER EYECATCHER.                             @04A\nRLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS            @04A\nRLDHVER  DS    AL1  VERSION OF BUFFER.                             @04A\n         DS    XL3                                                 @04A\nRLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                   @04A\nRLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THIS BUFFER\nRLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA.             @04A\nRLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.             @04A\nRLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                 @04A\n*                                                                  @04A\nRLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLDHENTC TIMES\nRLD_TYPE DS     XL1  ADCON TYPE.                                   @04A\n*        EQU   X'10' BRANCH TYPE (V-CON)                           @04A\n*        EQU   X'20' NON-BRANCH TYPE (A-CON)                       @04A\n*        EQU   X'21' ADDRESS OF CLASS SEGMENT                      @04A\n*        EQU   X'30' PSEUDOREGISTER (Q-CON)                        @04A\n*        EQU   X'40' CLASS OR PRV LENGTH (CXD)                     @04A\n*        EQU   X'50' LOADER TOKEN                                  @04A\n*        EQU   X'60' RELATIVE IMMEDIATE TYPE                       @04A\n*        EQU   X'70' REFERENCE TO ENVIRONMENT                      @04A\n*        EQU   X'80' LONG_DISPLACEMENT 20-BIT DL/DH OFFSET (QY-CON)@04A\nRLD_STAT DS    XL1  ADCON RELOCATION STATUS.                       @04A\n*        EQU   X'01' REFERENCES AN UNRESOLVED SYMBOL               @04A\n*        EQU   X'02' REFERENCES A RESOLVED SYMBOL                  @04A\n*        EQU   X'03' REFERENCES A NONRELOCATABLE SYMBOL            @04A\nRLD_RESIDENT_CHARS  DS H   LENGTH OF THE RESIDENT.                 @04A\nRLD_RESIDENT_PTR    DS A   POINTER TO NAME OF SECTION (ADCON)      @04A\nRLD_ADCON_LENG      DS H   ADCON LENGTH                            @04A\nRLD_CLASS_CHARS     DS H   LENGTH OF THE RESIDENT CLASS NAME       @04A\nRLD_CLASS_PTR       DS A   POINTS TO NAME OF CLASS WHERE ADCON RESIDES\nRLD_ELEM_OFFSET     DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A\n*                          THE CONTAINING ELEMENT                  @04A\n*                          RLDRESPL=0: ELEMENT; RLDRESPL>0: PART   @04A\nRLD_CLASS_OFFSET    DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A\n*                          CLASS SEGMENT                           @04A\nRLDADCNB            DS XL1  ADCON BOUNDARY SPECIFICATION.          @04A\nRLD_BIND_ATTR       DS BL1  BIND ATTRIBUTES                        @04A\nRLDDIRS       EQU   X'80'   RELOCATION SIGN: '0' = POS; '1' = NEG  @04A\nRLDHOBST      EQU   X'40'   SET HIGH ORDER BIT FROM AMODE OF TARGET@04A\nRLDINTXT      EQU   X'20'   INTERNAL/EXTERNAL: '0' = INT; '1' = EXT@04A\nRLDHOBCH      EQU   X'10'   HIGH ORDER BIT CHANGED BY BINDER       @04A\nRLDPARTR      EQU   X'08'   ADCON LOCATED IN PART                  @04A\nRLD_XATTR_CLASS_CHARS DS H  LENGTH OF EXTENDED ATTR CLASS NAME     @04A\nRLD_XATTR_CLASS_PTR   DS A  POINTER TO EXTENDED ATTR CLASS NAME    @04A\nRLD_XATTR_OFFSET      DS F  EXTENDED ATTRIBUTES ELEMENT OFFSET     @04A\nRLD_NAME_SPACE        DS X  NAME SPACE OF REFERENCE                @04A\n*             EQU   X'00' TYPES 21, 40                             @04A\n*             EQU   X'01'    EXTERNAL REFERENCE (10, 20)           @04A\n*             EQU   X'02'    PSEUDOREGISTERS (30)                  @04A\n*             EQU   X'03'    PARTS (PR,PD) IN WRITEABLE STATIC     @04A\n                      DS X  RESERVED                               @04A\nRLD_TARGET_CHARS      DS H  LENGTH OF THE TARGET NAME              @04A\nRLD_TARGET_PTR        DS A  POINTER TO NAME STRING TO WHICH ADCON PTR\n                      DS XL2  RESERVED                             @04A\nRLD_RES_PART_CHARS    DS H  RESIDENT PART LENGTH                   @04A\nRLD_RES_PART_PTR      DS A  RESIDENT PART POINTER                  @04A\nRLDEND                DS 0F                                        @04A\n***********************************************************************\n* THE TWO FOLLOWING DSECT DESCRIBES THE CONTENT OF AN IEWBUFF         *\n* TEXT BUFFER                                                         *\n***********************************************************************\nTXTHEADR DSECT ,    DESCRIBE THE IEWBUFF TEXT BUFFER HEADER\nTXTHBUFI DS    CL8  BUFFER EYECATCHER.\nTXTHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS\nTXTHVER  DS    AL1  VERSION OF BUFFER.\n         DS    AL3\nTXTHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.\nTXTHENTC DS    F    NUMBER TEXT BYTES CONTAINED IN THIS BUFFER\nTXTHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.\nTXTHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.\nTXTHEND  DS    0F   BEGINNING OF TEXT AREA\n*\nTXTENTRY DSECT ,    DESCRIBES TEXT AREA\nTXTBYTE  DS    0C   TEXT BYTE. OCCURS TXTHENTC TIMES\n*\nHDISASM   CSECT\n*\nRLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE\nRLDENT   DS    0CL20                   11 BYTE ENTRIES\nRLDRP    DS    XL2                     RELOCATION POINTER\nRLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)\nRLDTYPE  DS    XL1                     TYPE\n*                    00=A-TYPE ADCON 4 BYTES\n*                    01=V-TYPE ADCON 4 BYTES\n*                    02=PSEUDO REGISTER DISPLACEMENT\n*                    03=PSEUDO REG CUMULATIVE DISPL\n*                    04=V-TYPE ADCON 8 BYTES\n*                    08=UNRESOLVED\nRLDLEN   DS    XL1                     LENGTH OF CONSTANT\nRLDDIR   DS    CL1                     RELOCATION DIRECTION, + OR\nRLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT\nRLDNAME  DS    CL8                     NAME FROM ASSOC ESD\nRLDESDTP DS    XL1                     TYPE FROM ASSOC ESD\n         DS    XL1\nHDISASM   CSECT\n*\n*\n*\nSYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY\nSYMENT   DS    0CL19                   19 BYTE ENTRIES\nEXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME\nTYPSYM   DS    XL1                     SYMBOL TYPE\n*                        00=SD (NAMED CSECT)\n*                        02=ER (EXTRN)\n*                        03=LR (ENTRY)\n*                        04=PC (UNNAMED CSECT)\n*                        05=CM (COM)\n*                        06=PR (PSEUDO REGISTER)\n*                        07=NULL\n*                        0A=WX (WXTRN)\n*                        0F=ENTAB OR SEGTAB\nSYMIND   DS    XL1                     INDICATOR\n*                        BIT 0 = MAP\n*                        BIT 1 = CHAIN\n*                        BIT 2 = INSERT\n*                        BIT 3 = DELETE/REPLACE\nSYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU\nSYMARMOD DS    XL1                     AMODE/RMODE\n*                       X'08' - RSECT; READ ONLY IF ON\n*                       X'04' - RMODE; ANY IF ONE, 24 IF 0\n*                       X'03' - AMODE 00,01 = 24, 10 = 31, 11 = ANY\nSYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)\nSYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR\nSYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR\n*                        0 FOR ER, WX, NULL\nSYMESDID DS    XL2                     ESD ID OF THIS ITEM\n         YREGS\n         END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HDISASMO": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\tg\\tg\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 2407, "newlines": 2407, "modlines": 0, "user": "ASM"}, "text": "DIS      TITLE '***** HDISASM DISASSEMBLY PHASE 0 *****'\n*DISASSEMBLER PROGRAM TO CREATE AN ASSEMBLER H SOURCE PROGRAM\n*FROM A LOAD MODULE IN A PDS. DD CARDS REQUIRED INCLUDE\n*SYSPRINT FOR MESSAGES AND DIAGNOSTICS USING BLKSIZE A MULTIPLE\n*OF 121, SYSLIB SPECIFYING THE PDS CONTAINING THE MEMBER,        FIX***\n*WHICH MUST BE A PDS, SYSPUNCH FOR THE ASSEMBLER SOURCE\n*PROGRAM, HAVING BLKSIZE A MULTIPLE OF 80, AND SYSIN\n*FOR THE CONTROL CARD INPUT. CONTROL INPUT MAY OPTIONALLY\n*BE ENTERED VIA THE PARM ON THE EXECUTE CARD. CONTROL\n*INFORMATION INCLUDES THE MEMBER NAME AND CSECT NAME\n*TO BE DISASSEMBLED. IF CSECT NAME IS OMITTED, THE CSECT\n*FOR ESD-ID 0001 WILL BE USED.\n*\n*\n* FILES USED BY THIS PROGRAM INCLUDE THE FOLLOWING:\n*\n* DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.\n*\n* DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING\n*                 DISASSEMBLED TEXT. (MAXBLK=18,960)\n*\n* DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A\n*                LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.\n*                (MAXBLK=18997)\n*\n* DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.\n*\n*\n* THE CONTROL CARD PROVIDES THE MEMBER NAME AND CSECT NAME\n* OF THE PROGRAM TO BE DISASSEMBLED. MEMBER NAME IS REQUIRED.\n* IF CSECT NAME IS OMITTED, THE CSECT WITH ESDID 0001 WILL\n* BE USED. FORMAT IS FREE-FORM. MEMBER NAME MUST PRECEDE CSECT\n* NAME. ANY NUMBER OF BLANKS MAY PRECEDE AND FOLLOW MEMBER NAME.\n* A COMMA MAY IMMEDIATELY FOLLOW MEMBER NAME IF DESIRED.\n*\n*\n* PARM DATA FROM THE EXECUTE CARD MAY BE USED TO SPECIFY\n* VALIDITY OF PRIVILEGED OR FLOATING POINT INSTRUCTIONS.\n* IF NOT SPECIFIED, PRIVILEGED AND FLOATING POINT OPERATION\n* CODES WILL NOT BE TREATED AS INSTRUCTION OP-CODES. TO\n* INCLUDE THESE INSTRUCTIONS, CODE:\n*     PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS\n*     PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS\n*     PARM=(SUPVR,FLTPT) BOTH\n*\n*\n*PROCESSING FLOW:\n* 1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER\n*    AND CSECT NAMES.\n* 2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR\n*    THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN\n*    ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT\n*    DIRECTORY INFORMATION.\n* 3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE\n*    MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY\n*    FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.\n*    ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL\n*    RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.\n*    RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING\n*    OF LOAD MODULE INFORMATION IS AS FOLLOWS:\n*    A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CEMD BLOCKS.\n*    B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING\n*       BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST\n*       CONTROL RECORD.\n*    C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED\n*       CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE\n*       TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD\n*       INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED\n*       DURING DISASSEMBLY.\n* 4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION\n*    DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.\n*\n*\n* ORIGINAL AUTHOR R THORNTON\n* MODIFIED BY ALBERT CHENG\n* ABSTRACT : PROGRAM IS MODIFIED TO DISASSEMBLE TO SUPPORT NEW\n*            ASSEMBLER INSTRUCTIONS BUT IT DOES NOT SUPPORT 64\n*            BIT INSTRUCTIONS\n* 1) ENLARGE THE LABEL TABLE FROM 2000 ENTRIES TO 12000 ENTRIES\n*    @01                                             (AC 13 MAR 92)\n* 2) ENLARGE THE I/O BUFFER FROM 20000 TO 32768\n*    @02                                             (AC 23 JUN 92)\n* 3) ENHANCEMENT\n*    A) USE NEW ASSEMBLER INSTRUCTION SUCH AS BAKR, PR, AHI AND ETC\n*    B) MERGE HDISASM, HDISASM1 AND HDISASM2 INTO ONE LOAD MODULE.\n*    C) SUPPORT CODE ONLY STATEMENT\n*       THIS STATEMENT ALLOWS THE BYPASSING OF THE FOLLOWING TESTS\n*       WHICH MIGHT IDENTIFY VALID INSTRUCTIONS AS DATA\n*       . 4 CONSECUTIVE IDENTICAL BYTES\n*       . 6 CONSECUTIVE VALID EBCDIC CHARACTERS\n*       . NEXT INSTRUCTION VALID OPCODE\n*    D) BUILD LABLE CESD ER TYPE\n*    @03                                             (AC 16 MAY 12)\n* 4) A) SUPPORT CTLBK STATMENT\n*       THIS STATEMENT ASSIGN BUILT-IN DSECT TO A DATA REGISTER\n*    B) WRITE LOAD MAP TO OUTPUT FILE LOADMAP AND YOU CAN SPECIFY\n*       //LOADMAP DD SYSOUT=*    or\n*       //LOADMAP DD DUMMY\n*    C) LOAD MAP PRINT FILE SUPPORTS MIXED CASE CHARACTERS\n*    D) SUPPORTS PDSE\n*    E) SUPPORT OPCODE LENGTH FROM 5 TO 6\n*       (NOTE : OPCODE LENGTH GREATER 7 IS NOT YET SUPPORT\n*                                                    (AC 22 APR 15)\n* 5) A) LOAD SFT AND GLOBAL MAPPING TABLE\n*    B) THE LENGTH OF USER DEFINED LABEL IS EXTENDED FROM 8 TO 12\n*    C) THE LENGTH OF DSECT FIELD IS EXTENDED FROM 8 TO 12\n*                                                    (AC 26 OCT 15)\n* 6) A) SUPPORT DOUBLE WORD ADDRESS\n*    B) ADD LABEL TO UNRESOLVED BINDER ADCON\n*    C) USE R3 AS DATA REGISTER\n*    D) CHANGE GETMAIN MACRO TO STORAGE\n*    E) SUPOPRT DISPLACEMENT UP TO 20479\n*                                                    (AC 22 JUL 16)\n* 7) A) ALTERNATE DSECT\n*                                                    (AC 22 DEC 16)\n****************************************************************\n*                                                              *\n* PROCESS THE PARM FIELD, IF ANY.                              *\n*                                                              *\n****************************************************************\n*\nHDISASM  CSECT\nHDISASM  RMODE ANY\nHDISASM  AMODE 31\n         J     BEGIN                                               @03A\n         DC    C'HDISASM '             MODULE NAME                 @03A\n         DC    C'01.10'                VERSION NUMBER              @06C\n         DC    C'&SYSDATE &SYSTIME'                                @03A\nBEGIN    BAKR  R14,0                   SAVE RSA IN LINKAGE STACK   @03A\n         LARL  R3,DATASTR                                          @06A\n         USING DATASTR,R3                                          @06A\n         L     R12,0(R1)               GET PARM FIELD ADDRESS\n         SR    R1,R1                   CLEAR WORK REG\n         ICM   R1,3,0(R12)             PICK UP PARM LENGTH\n         JZ    OPEN1                   NO PARM INFO ENTERED\n         CHI   R1,5                    5-BYTES OF PARM             @03C\n         JE    SGLPARM                 YES, SINGLE PARM FIELD\n         CHI   R1,11                   11-BYTES OF PARM            @03C\n         JE    DBLPARM                 YES, BOTH PARMS\nBADPARM  WTO   'INVALID PARM, SPECIFY ONLY SUPVR AND/OR FLTPT',        X\n               ROUTCDE=11\n         ABEND 777,DUMP\nSGLPARM  CLC   2(5,R12),C_SUPVR        IS PARM=SUPVR\n         JE    SUPARM                  YES\n         CLC   2(5,R12),C_FLTPT        PARM IS FLTPT\n         JNE   BADPARM                 NO, ERROR\n         MVI   FLPTASM,1               SET FLOATING POINT O.K.\n         J     OPEN1                   CONTINUE\nDBLPARM  CLC   2(5,R12),C_SUPVR        IS 1ST PARM SUPVR\n         JE    CK2FPT                  YES\n         CLC   2(5,R12),C_FLTPT        IS 1ST PARM FLTPT\n         JNE   BADPARM                 NO, ERROR\n         CLC   8(5,R12),C_SUPVR        IS 2ND PARM SUPVR         FIX***\n         JNE   BADPARM                 NO, ERROR\n         J     FPT2PARM                BOTH O.K.\nCK2FPT   CLC   8(5,R12),C_FLTPT        IS 2ND PARM FLTPT         FIX***\n         JNE   BADPARM                 YES\nFPT2PARM MVI   FLPTASM,1               SET FLOATING POINT O.K.\nSUPARM   MVI   PRIVASM,1               SET PRIVILEGED INSTR O.K.\n*\n****************************************************************\n*                                                              *\n* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY   *\n* TABLES, AND OPEN FILES.                                      *\n*                                                              *\n****************************************************************\n*\nOPEN1    OPEN  (SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT,LOADMAP,OUTPUT,REGUSE,OX\n               UTPUT),MODE=31\n         OPEN  (SYSLIB,,SYSIN),MODE=31     OPEN FILES\n         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.\n         JZ    NOCTL                   NO\n         SAM31\n         JAS   R9,GETCTL               EXTRACT DESIRED MEMBER AND CSECT\n         JAS   R9,BLDL                 ISSUE BLDL AND PRINT\n         MVI   CCAT,0                  INSURE TTR0\n         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE\n         STORAGE OBTAIN,LENGTH=32768,ADDR=(R1),SP=0 GET BUFFER STORAGE\n         ST    R1,BUFAD                SAVE BUFFER ADDRESS\n         STORAGE OBTAIN,LENGTH=304000,ADDR=(R1),SP=0               @04C\n*                                      GET SYMBOL TABLE STORAGE    @04C\n         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS\n         ST    R1,CURRSYM              SAVE CURRENT SYMBOL ADDR\n         MVI   0(R1),X'FF'             TABLE END INDIC\n         A     R1,ENDSYM               COMPUTE END ADDR\n         ST    R1,ENDSYM               STORE TBL END ADDR\n         STORAGE OBTAIN,LENGTH=96000,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                                      GET RLD TABLE STORAGE (20*4800)\n         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS\n         ST    R1,CURRLD               SAVE CURRENT RLD ADDR\n         MVI   0(R1),X'FF'             TABLE END INDIC\n         A     R1,ENDRLD               COMPUTE END ADDR +96000\n         ST    R1,ENDRLD               STORE TBL END ADDR\n         STORAGE OBTAIN,LENGTH=1801,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                            (257*7+2) GET DATA ONLY TABLE STORAGE\n         ST    R1,DATSTRT              SAVE TBL ADDRESS\n         MVC   0(3,R1),HIVAL           SET END VALUE\n         ST    R1,DATOCUR              SET CURRENT ADDRESS\n         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03C\n         ST    R1,DATOEND              SAVE END ADDR\n         MVC   PRT+15(29),MSG01        *** EXTERNAL SYMBOL TABLE ***\n         MVI   PCC,C'-'                SET SKIP 3 LINES\n         JAS   R9,PRINT                PRINT\n*        MVC   PRTLINE,SYMHDR1         SYM TBL HEADER\n*        JAS   R9,PRINT                PRINT\n         STORAGE OBTAIN,LENGTH=1544,ADDR=(R1),SP=0 GET BUFFER STORAGE\n*                            (257*6+2) GET CODE ONLY TBL STORAGE   @03A\n         ST    R1,CODSTRT              SAVE TBL ADDRESS            @03A\n         MVC   0(3,R1),HIVAL           SET END VALUE               @03A\n         ST    R1,CODOCUR              SET CURRENT ADDRESS         @03A\n         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03A\n         ST    R1,CODOEND              SAVE END ADDR               @03A\n         STORAGE OBTAIN,LENGTH=22200,ADDR=(R1),SP=0  600 CTLBK ENTRIES\n*                            (60*37)   SIZE OF CTLBK TABLE         @03A\n         ST    R1,CTLSTRT              SAVE TBL ADDRESS            @04A\n         MVC   0(3,R1),HIVAL           SET END VALUE               @04A\n         ST    R1,CTLOCUR              SET CURRENT ADDRESS         @04A\n         AHI   R1,22200                COMPUTE TABLE END ADDR      @04A\n         ST    R1,CTLOEND              SAVE END ADDR               @04A\n         LHI   R7,12000                12000 LABEL ENTRIES\n         MHI   R7,LABELL               COMPUTE LABEL TABLE SIZE\n         L     R1,CSTLENG              GET CSECT LENGTH\n         SRL   R1,2                    DIVIDE BY 4\n         MHI   R1,LABELL               TIMES LABEL ENTRY LENGTH\n         AR    R7,R1                   TOTAL LABEL TABLE LENGTH\n         STORAGE OBTAIN,LENGTH=(7),ADDR=(R1),SP=0                  @06C\n*                                      GET LABEL TBL STORAGE\n         ST    R1,LBLTBL               SAVE LABEL TBL ADDR\n         ST    R1,CURRLBL              SAVE CURRENT LABEL ADDR\n         AR    R1,R7                   COMPUTE LABEL TBL END ADDR\n         ST    R1,ENDLBL               SAVE END OF LBL TBL ADDR\n*\n****************************************************************\n*                                                              *\n* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *\n* AND TEXT ARE PROCESSED.                                      *\n*                                                              *\n****************************************************************\n*\nMAINLINE EQU   *                       MAINLINE ROUTINE\n         L     R6,BUFAD                GET BUFFER ADDRESS\n         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER\n         CHECK DECB                    AWAIT COMPLETION\n         CLC   IEWPLMH,0(R6)           BINDER ?                    @03A\n         JE    BINDER                  YES                         @03A\n         MVC   PRTLINE,SYMHDR1         SYM TBL HEADER\n         JAS   R9,PRINT                PRINT\n         CLI   0(R6),X'20'             CESD RECORD\n         JNE   TESTOTHR                NO\n         JAS   R9,CESDREC              PROCESS CESD RECORDS\n         J     MAINLINE                GO READ AGAIN\nTESTOTHR LARL  R9,CNTLRECS             ASSUME CONTROL RECORD\n         CLI   0(R6),1                 IT IS CONTROL\n         JE    PERFORM                 YES\n         CLI   0(R6),5                 IS IT CONTROL\n         JE    PERFORM                 YES\n         CLI   0(R6),13                IS IT CONTROL\n         JE    PERFORM                 YES\n         LARL  R9,RLDRECS              ASSUME RLD RECORD\n         CLI   0(R6),2                 IS IT RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),6                 IS IT RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),14                IS IT RLD\n         JE    PERFORM                 YES\n         LARL  R9,CTRLRECS             ASSUME CONTROL AND RLD\n         CLI   0(R6),3                 IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),7                 IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         CLI   0(R6),15                IS IT CTL AND RLD\n         JE    PERFORM                 YES\n         J     MAINLINE                NONE OF THESE, SKIP\nPERFORM  TM    PROCESS,X'80'           WAS CSECT FOUND\n         JZ    MISSCS                  NO, ERROR\n         BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE\n         TM    PROCESS,X'40'           MODULE PROCESSING DONE\n         JZ    MAINLINE                NO, GO READ AGAIN\n*        MVI   EOFSW+1,0               SET END OF FILE SWITCH\n         J     ENDINIT                 GO COMPLETE PROCESSING\nBINDER   DS    0H                                                  @03A\n         MVC   PRTLINE,SYMHDR2         SYM TBL HEADER              @03A\n         JAS   R9,PRINT                PRINT                       @03A\n         MVC   PRMEMBER,MEMBER         MOVE REQUESTED MEMBER NAME  @03A\n         MVC   PRMCSECT(L'CSECT),CSECT MOVE REQUESTED CSECT NAME   @03A\n         JAS   R14,GET_ESD             PROCESS ESD'S FOR THE CSECT @03A\n         JAS   R14,GET_RLD             PROCESS RLD'S FOR THE CSECT @03A\n         JAS   R14,GET_TEXT            GET TEXT FOR THE CSECT      @03A\n         JAS   R14,UPD_UNRESOLV        UPDATE UNRESOLVED           @06A\n         MVC   CURRLBL,TMPCLBL                                     @06A\n         J     ENDINIT\n*********************************************************************\n* PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH ALL THE ESD  *\n* ENTRIES RETURNED BY THE READLMOD SUBROUTINE. THE FIRST THREE ARE  *\n* NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN LD). THESE    *\n* WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONLY THE LD TYPES *\n* ARE USED.                                                         *\n* 1ST SD  - THE AMODE AND RMODE VALUES                              *\n* 2ND ED  - THE CSECT LENGTH                                        *\n* 3RD LD  - LABEL INFORMATION FOR THE CSECT ITSELF.                 *\n* ANY REMAINING LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY   *\n*           STATMENTS                                               *\n*********************************************************************\nGET_ESD  BAKR  R14,0                   SAVE CALLER'S REGISTERS     @03A\n         XC    PRMCURSR,PRMCURSR       CLEAR CURSOR FOR FIRST CALL @03A\nGE_GETIT MVC   PRMREQST,C_ESD          SHOW REQUEST IS FOR ESD DATA@03A\n         JAS   R9,READLMOD             GO READ THE ESD DATA        @03A\n         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?          @03A\n         JE    GE_EXIT                 NO                          @03A\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND   @03A\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER      @03A\n         USING ESDHEADR,R11                                        @03A\n         LA    R12,ESDHEND             POINT TO FIRST ELEMENT      @03A\n         USING ESDENTRY,R12                                        @03A\n         L     R7,CURRSYM                                          @03A\nGE_NEXT  MVC   ESDSYMB,BLANX           CLEAR SYMBOL NAME           @03A\n         LH    R1,ESDNAMEC             GET LENGTH OF SYMBOL        @03A\n         LTR   R1,R1                   ANY LENGTH?                 @03A\n         JZ    GEMVOWBK                NO                          @03A\n         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A\n         CHI   R1,8                    EXCESSIVE LENGTH?           @03A\n         JL    GE_MVNM2                NO                          @03A\n         LA    R1,7                    YES, SET MAX LENGTH         @03A\nGE_MVNM2 L     R2,ESDNAMEP             POINT TO THE SYMBOL         @03A\n         EX    R1,GEMVSYMX             MVC   ESDSYMB(1),0(R2)      @03A\nGEMVOWBK MVC   ESDOWNER,BLANX          PRE-CLEAR OWNER NAME        @03A\n         LH    R1,ESDRESCL             GET OWNER NAME LENGTH       @03A\n         LTR   R1,R1                   ANY LENGTH?                 @03A\n         JZ    GE_CTYPE                NO                          @03A\n         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A\n         CHI   R1,8                    EXCESSIVE LENGTH?           @03A\n         JL    GE_MVOW2                NO                          @03A\n         LA    R1,7                    YES, SET MAX LENGTH         @03A\nGE_MVOW2 L     R2,ESDRESCP             POINT TO OWNING NAME        @03A\n         EX    R1,GEMVOWNX             MOVE IN OWNING NAME         @03A\nGE_CTYPE CLC   ESDTYPE,C_SD            IS THIS AN SD (CSECT)?      @03A\n         JNE   GE_CTYP2                NO                          @03A\n         CLC   CSECT,ESDSYMB           SYMBOL SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP2                NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP2                NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JO    GE_CTYP2                YES                         @03A\n         MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE              @03A\n         MVC   CURRRMOD,ESDRMODE          AND RMODE                @03A\n         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A\nGE_CTYP2 CLC   ESDTYPE,C_ED            THIS AN ED?                 @03A\n         JNE   GE_CTYP3                NO                          @03A\n         CLC   ESDSYMB,C_B_TEXT        SYMBOL NAME IS B_TEXT?      @03A\n         JNE   GE_CTYP3                NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_CTYP3                NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JO    GE_CTYP2                YES                         @03A\n         MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH        @03A\n         MVC   TEXTLENG,ESDLENG           TWICE                    @03A\n         MVC   CSTLENG,ESDLENG                                     @03A\n         MVC   SYMLENG-SYMTBL(3,R7),ESDLENG+1                      @03A\n         LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY           @03A\n         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A\nGE_CTYP3 CLC   ESDTYPE,C_RLD+1         LD ?                        @03A\n         JNE   GE_STEP                 NO                          @03A\n         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?\n         JNE   GE_STEP                 NO                          @03A\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A\n         JZ    GE_STEP                 NO                          @03A\n         L     R5,CURRLBL              POINT TO CURRENT LABEL ENTRY@03A\n         USING LABELD,R5                                           @03A\n         MVC   LBLADR,ESDELOFF+1       OFFSET TO LABEL             @03A\n         L     R0,ESDCLOFF                                         @06A\n         S     R0,ESDELOFF                                         @06A\n         ST    R0,CLASSOFF             OFFSET TO MODULE            @06A\n         MVI   LBLTYP,C'L'             TYPE = LABEL                @03A\n         MVI   LBLLEN,4                                            @03A\n         MVC   LBLNAME,BLANX           MOVE SYMBOL NAME TO ENTRY   @06A\n         MVC   LBLNAME(8),ESDSYMB      MOVE SYMBOL NAME TO ENTRY   @06A\n         MVI   PRT,C' '                                            @03A\n         MVC   PRT+1(L'PRT-1),PRT                                  @03A\n         MVC   PRT+5(8),LBLNAME        COPY LABEL NAME             @03A\n*        MVC   PRT+17(2),C_RLD+1       COPY 'LD'                   @03A\n         MVC   PRT+17(2),C_LR          COPY 'LR'                   @03A\n         LR    R0,R12                                              @03A\n         LA    R12,ESDELOFF            POINTER OFFSET TO LABEL     @03A\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @03A\n         LR    R12,R0                                              @03A\n         MVC   PRT+32(6),PRTABL+2                                  @03A\n         JAS   R9,PRINT                                            @03A\n         LA    R5,LABELL(R5)                                       @03A\n         ST    R5,CURRLBL                                          @03A\n         LA    R0,ESDSYMB                                          @03A\n         L     R15,PRMBUFAD                                        @03A\nGE_STEP  A     R12,ESDHENTL            POINT TO NEXT ELEMENT       @03A\n         JCT   R10,GE_NEXT             LOOP THRU ESD ENTRIES       @03A\n         CLC   PRMRETCD,XZROS          ANY MORE ESD ENTRIES?       @03A\n         JE    GE_GETIT                YES, GO READ NEXT ESD BUFFER@03A\nGE_EXIT  DS    0H                      GET RETURN ADDRESS          @03A\n         PR                            RETURN TO CALLER            @03A\n         DROP  R11\n         DROP  R12\n*********************************************************************\n*        PROCESS THE RLD RECORDS FOR THIS CSECT                     *\n*********************************************************************\nGET_RLD  BAKR  R14,0                   SAVE CALLER'S REGISTERS\n         MVC   PRMREQST,C_RLD          SHOW REQUEST IS FOR RLD DATA\nGR_GET2  JAS   R9,READLMOD             GO READ THE RLD DATA\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         LTR   R10,R10                 ANY RLD ELEMENTS READ?\n         JZ    GR_EXIT                 NO\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING RLDHEADR,R11\n         LA    R12,RLDHEND             POINT TO FIRST ELEMENT\n         USING RLDENTRY,R12\nGR_NEXT  DS    0H                      SAVE WORK REGISTERS\n         MVC   RESIDENT,BLANX          PRE-CLEAR TO BLANKS\n         LH    R1,RLD_RESIDENT_CHARS   GET LENGTH OF RES CSECT NAME\n         LTR   R1,R1                   ANY LENGTH?\n         JZ    GR_MVAC                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CHI   R1,8                    EXCESSIVE LENGTH?\n         JL    GR_MVRES                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGR_MVRES L     R2,RLD_RESIDENT_PTR     POINT TO THE SYMBOL\n         EX    R1,GRDMVREX             MOVE SYMBOL NAME\n*                                      MVC  RESIDENT(1),0(R2)\nGR_MVAC  MVC   SYMBPTS2,BLANX          PRE-CLEAR TO BLANKS\n         LH    R1,RLD_TARGET_CHARS     GET LENGTH OF SYMBOL POINTED TO\n         LTR   R1,R1                   ANY LENGTH?\n         JZ    GR_CKIT                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CHI   R1,8                    EXCESSIVE LENGTH?\n         JL    GR_MVTGT                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGR_MVTGT L     R2,RLD_TARGET_PTR       POINT TO THE SYMBOL\n         EX    R1,GRDTGTNX             MOVE SYMBOL NAME\n*                                      MVC  SYMBPTS2(1),0(R2)\nGR_CKIT  CLC   RESIDENT,CSECT          ENTRY RESIDES IN CURRENT CSECT?\n         JNE   GR_STEP                 NO\n         L     R5,CURRLBL              POINT TO LABEL TABLE\n         USING LABELD,R5\n*    ADCON and VCON\n         MVC   LBLADR,RLD_ELEM_OFFSET+1 OFFSET TO LABEL\n         MVI   LBLTYP,C'A'             ASSUME ADCON\n         CLI   RLD_STAT,X'02'          IS IT RESOLVED SYMBOL ?\n         JE    GR_CLRU                 YES\n         MVI   LBLTYP,C'V'             NO, ASSUME VCON\n         CLI   RLD_STAT,X'01'          IS IT UNRESOLVED SYMBOL ?\n         JNE   GR_STEP                 NO, DROP IT\nGR_CLRU  DS    0H\n         MVC   LBLLEN(1),RLD_ADCON_LENG+1\n         ST    R12,RLD_PTR\n         MVC   LBLNAME,BLANX           CLEAR SYMBOL NAME FIELD\n         MVC   LBLNAME(8),SYMBPTS2     MOVE SYMBOL NAME TO ENTRY\n         MVI   PRT,C' '\n         MVC   PRT+1(L'PRT-1),PRT\n         MVC   PRT+5(8),LBLNAME\n         MVC   PRT+17(2),C_ER\n         CLC   SYMBPTS2,CSECT          SYMBOL = CURRENT CSECT ?\n         JNE   GR_PRINT                YES\n         MVC   PRT+5(8),CUNRESV\n         MVC   LBLNAME(8),CUNRESV\nGR_PRINT LA    R12,RLD_ELEM_OFFSET     POINTER OFFSET TO LABEL\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL\n         MVC   PRT+32(6),PRTABL+2      COPY FORMATTED OFFSET\n         L     R12,RLD_PTR\n         LA    R12,RLD_TYPE\n         JAS   R9,HEXPRT2              CONVERT OFFSET TO LABEL\n         MVC   PRT+22(2),PRTABL\n         MVC   PRT+27(2),PRTABL+2      STATUS\n         LA    R12,LBLLEN\n         JAS   R9,HEXPRT1              CONVERT OFFSET TO LABEL\n         MVC   PRT+42(2),PRTABL\n         JAS   R9,PRINT\nGR_LBADD LA    R5,LABELL(R5)\n         ST    R5,CURRLBL\nGR_STEP  DS    0H                      GET WORK REGISTERS\n         L     R12,RLD_PTR\n         A     R12,RLDHENTL            POINT TO NEXT ELEMENT\n         JCT   R10,GR_NEXT             LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,XZROS          ANY MORE RLD ENTRIES?\n         JE    GR_GET2                 YES\nGR_EXIT  DS    0H\n         PR                            RETURN TO CALLER\n*********************************************************************\n*        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *\n*        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *\n*        CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *\n*********************************************************************\nGET_TEXT BAKR  R14,0                   SAVE RETURN ADDRESS\n         MVC   PRMCURSR,XZROS          SET CURSOR=0 TO START\n         L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD\n         LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?\n         JZ    GT_NTXAD                NO, ERROR\n         AHI   R0,32                   INSURE SUFFICIENT STORAGE\n         J     GT_STRG                 YES\nGT_NTXAD MVC   PRTLINE(39),NOSTOR      NO STORAGE SIZE WAS FOUND\n         PUT   SYSPRINT,PRTLINE        PRINT THE ERROR MESSAGE\n         WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCDE=11\n         ABEND 555,DUMP                TERMINATE WITH USER ABEND 555\n*T_STRG  GETMAIN R,LV=(0)              GET TEXT STORAGE\nGT_STRG  BRAS  1,*+4\n         SVC   10\n         ST    R1,TXTSTRT              SAVE THE GOTTEN ADDRESS\n         ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS\n         A     R1,TEXTENDA             SAVE THE ADDRESS OF THE\n         ST    R1,TXTEND                   END OF THE TEXT AREA\n         MVC   PRMREQST,C_TEXT         SHOW REQUEST IS FOR TEXT DATA\nGT_NEXT  JAS   R9,READLMOD             GO READ THE TEXT DATA\n         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?\n         JE    GT_ADJ                  NO\n         L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER\n         L     R10,PRMBUFAD            POINT TO BUFFER HEADER\n         ST    R11,SAVELNG        **** SAVE PRMCOUNT\n*        ST    R10,SAVEADR        **** SAVE PRMBUFAD\n         USING TXTHEADR,R10\n         LA    R10,TXTHEND             POINT TO FIRST TEXT BYTE\n         DROP  R10\n         L     R0,PRMCURSR             GET STARTING\n         S     R0,PRMCOUNT                 TEXT\n         STH   R0,ADJUST                     ADDRESS\n         A     R0,TXTSTRT\n         ST    R0,SAVETXT         **** DEBUG ****\nGT_FADJ  DS    0H\n         LH    R15,ADJUST\nGT_TMP   DS    0H\n         ST    R0,SAVEADR         **** SAVE ADDR OF LAST BUFFER\n         LR    R1,R11                  COPY TEXT LENGTH\n         MVCL  R0,R10                  MOVE TEXT\n         CLC   PRMRETCD,XZROS          ANY MORE TEXT?\n         JE    GT_NEXT                 YES\nGT_ADJ   DS    0H\n         LH    R15,ADJUST\n         LTR   R15,R15\n         JNP   GT_EXIT\n         CHI   R15,512\n         JH    GT_EXIT\n         L     R0,TXTSTRT\n         AR    R0,R15\n         ST    R0,TXTSTRT\nGT_EXIT  DS    0H\n*        L     R12,SAVETXT             RESTORE LAST BUFFER ADDR\n*        L     R11,SAVELNG       ***   RESTORE PRMCOUNT\n*        L     R10,SAVEADR             RESTORE PRMBUFAD\n*        LH    R8,ADJUST               RESTORE ADJUST\n*        DC    X'0000'\n         PR                            RETURN TO CALLER\n*********************************************************************\n*  1     SCAN LABEL TABLE AND PICK UP THE UNRESOLVED LABEL.         *\n*  2     ACTUAL OFFSET = LBLADR + TXTSTRT - CLASS OFFSET            *\n*********************************************************************\nUPD_UNRESOLV   DS  0H                                              @06A\n         USING LABELD,R5                                           @06A\n         BAKR  R14,0                                               @06A\n         L     R5,LBLTBL                                           @06A\n         MVC   TMPCLBL,CURRLBL                                     @06A\nUPD_LOOP CLC   LBLNAME(8),CUNRESV     UNRESOLV LABLE ?             @06A\n         JNE   UPD_NEXT               BRANCH IF NO                 @06A\n         SR    R14,R14                CLEAR R14 FOR ICM INSTR      @06A\n         ICM   R14,7,LBLADR           LOAD LABEL RELATIVE OFFSET   @06A\n         A     R14,TXTSTRT            ADD ADDRESS OF TEXT START    @06A\n         CLI   LBLLEN,4               4 BYTES ADDRESS LABEL ?      @06A\n         JE    UPD_ACON4              BRANCH IF YES                @06A\n         CLI   LBLLEN,8               8 BYTES ADDRESS LABEL ?      @06A\n         JNE   UPD_NEXT               BRANCH IF YES                @06A\n         AHI   R14,4                                               @06A\nUPD_ACON4  DS  0H                                                  @06A\n         L     R14,0(R14)                                          @06A\n         S     R14,CLASSOFF            GET ACTUAL OFFSET           @06A\n         ST    R14,DBLWD                                           @06A\n         LA    R12,DBLWD+1                                         @06A\n         JAS   R9,HEXPRT3              FORMAT ACTUAL OFFSET        @06A\n         MVI   LBLNAME,C'A'                                        @06A\n         MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A\n         MVI   LBLNAME+7,C' '                                      @06A\nUPD_NEXT LA    R5,LABELL(R5)           NEXT LABEL ENTRY            @06A\n*        LR    R0,R5                                               @06A\n*        L     R5,TMPCLBL                                          @06A\n*        A     R14,TXTSTRT                                         @06A\n*        LA    R5,LABELL(R5)                                       @06A\n*        MVI   LBLTYP,C'L'                                         @06A\n*        MVI   LBLNAME,C'A'                                        @06A\n*        MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A\n*        MVI   LBLNAME+7,C' '                                      @06A\n*        ST    R5,TMPCLBL                                          @06A\n*        LR    R5,R0                                               @06A\n         C     R5,CURRLBL                                          @06A\n         JL    UPD_LOOP                                            @06A\nUPD_EXIT PR                            RETURN TO CALLER            @06A\n*********************************************************************\n*        CALL MODULE READLMOD TO OBTAIN DATA FROM THE LOAD MODULE   *\n*********************************************************************\nREADLMOD DS    0H\nRLCALL   CALL  READLMOD,PARMAREA       CALL SUBPROGRAM READLMOD\n         CLI   PRMERROR,C' '           WAS THERE AN ERROR?\n         JE    RLXIT                   NO\n         WTO   'HDISASM FOUND ERROR RETURNED BY READLMOD CALL',        X\n               ROUTCDE=11\n         ABEND 111,DUMP                TERMINATE WITH ABEND CODE 111\nRLXIT    BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *\n* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*\n* UOUS LOCATIONS SO THAT THE TEXT FOR THE DESIRED CSECT WILL   *\n* ALL BE IN STORAGE FOR THE REMAINDER OF DISASSEMBLY.          *\n*                                                              *\n****************************************************************\n*\nCNTLRECS EQU   *                       CONTROL RECORD PROCESSING\n         ST    R9,CT9                  SAVE RETURN ADDR\n         SR    R8,R8                   CLEAR WORK\n         ICM   R8,7,9(R6)              LKED ASGND @ OF TXT\n         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M\n         JZ    CNCKTYP                 NO\n         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE\nCNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD\n         JO    CNPASRLD                YES\n         LA    R12,16(R6)              @ CESD ENTRY NBR\n         J     CNCKESD                 CONTINUE\nCNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH\n         LA    R12,16(R6,R12)          @ CESD ENTRY NBR\nCNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION\n         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES\n         SR    R10,R10                 OFFSET TO 1ST BYTE\n         SR    R9,R9                   LENGTH OF TEXT\nCNCKESD1 CLC   ESDID,0(R12)            THIS THE DESIRED ESD   FIX***\n         JE    CNFNDIT                 YES\n         AH    R10,2(R12)              MAINTAIN OFFSET TO 1ST TEXT BYTE\n         LA    R12,4(R12)              TO NEXT CNTL ENTRY\n         JCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES  FIX***\n         J     READTEXT                GO READ FOLLOWING TEXT\nCNFNDIT  LH    R9,2(R12)               GET TEXT LENGTH\nREADTEXT READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD\n         CHECK DECB                    AWAIT COMPLETION\n         LTR   R9,R9                   DOES IT CONTAIN DESIRED TEXT\n         JZ    CTXIT                   NO, SKIP IT\n         S     R8,START                (-) OFFSET IN MODULE    FIX***\n         AR    R8,R10                  ADD OFFSET OF PORTION IN RCD  **\n*           R8 SHOULD NOW CONTAIN THE OFFSET WITHIN THE CSECT\n*           THAT THIS BLOCK CONTAINS (TRICKY).\n*\n         A     R10,BUFAD               @ 1ST TEXT BYTE\n         A     R8,TXTSTRT              @ PLACE TO MOVE TEXT\n         LR    R11,R9                  COPY LENGTH TO MOVE\n         MVCL  R8,R10         MOVE TEXT TO DYNAMIC STORAGE R10 TO R8\nCTXIT    L     R9,CT9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT WHICH WILL *\n* LATER BE USED TO BUILD PROGRAM LABELS AND ADCONS.            *\n*                                                              *\n****************************************************************\n*\nRLDRECS  EQU   *                       RLD RECORD PROCESSING\n         TM    0(R6),X'08'             LAST RECORD OF MODULE\n         JZ    RLSV9                   NO\n         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE\nRLSV9    ST    R9,RL9                  SAVE RETURN ADDR\nRLDSW    JNOP  RLDST                   FIRST TIME SWITCH\n         LARL  R15,RLDSW\n         MVI   1(R15),C'0'\n*        MVI   RLDSW+1,C'0'            RESET 1ST TIME SW\n         MVC   PRT+15(20),MSG02        ***** RLD INFO *****\n         MVI   PCC,C'-'                SKIP 3 LINES\n         JAS   R9,PRINT                PRINT\n         MVC   PRTLINE,RLDHDR          RLD HEADER\n         JAS   R9,PRINT                PRINT RLD HEADER\nRLDST    LH    R8,6(R6)                NBR BYTES OF RLD DATA\n         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA\n         AR    R8,R6                   END OF RLD DATA ADDR\n         L     R7,CURRLD               @ NEXT RLD TBL ENTRY\n         USING RLDTBLD,R7\n         LH    R10,0(R6)               RELOCATION POINTER\n         LH    R11,2(R6)               POSITION POINTER\n         LA    R6,4(R6)                PASS POINTERS\nRLDNEXT  CLC   1(3,R6),START+1         RLD ADDR BELOW CSECT\n         JL    RLDSTEP                 LOW, IGNORE\n         CLC   1(3,R6),END+1           RLD ADDR ABOVE CSECT\n         JH    RLDSTEP                 HIGH, IGNORE\n         C     R7,ENDRLD               END OF RLD TBL\n         JE    RLDFULL                 YES, ERROR\n         STH   R10,RLDRP               SAVE RELOC PTR\n         STH   R11,RLDPP               POS PTR\n         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE\n         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER\n         CLI   RLDTYPE,9               UNRESOLVED\n         JNE   RLDMOVLN                NO\n         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE\nRLDMOVLN MVC   RLDLEN,0(R6)            FLAG BYTE\n         NI    RLDLEN,X'0F'            CLEAR HI-ORDER\n         SR    R12,R12                 CLEAR WORK\n         IC    R12,RLDLEN              PICK UP BYTE\n         SRL   R12,2                   SHIFT OUT DIR, IND BITS\n         LA    R12,1(R12)              ADD 1 = LENGTH\n         STC   R12,RLDLEN              LENGTH CODE\n         MVI   RLDDIR,C'+'             ASSUME POS RELOC\n         TM    0(R6),2                 IS IT POSITIVE\n         JZ    RLADMV                  YES\n         MVI   RLDDIR,C'-'             NO, SHOW NEGATIVE\nRLADMV   SR    R1,R1                   CLEAR WORK REG\n         ICM   R1,7,1(R6)              PICK UP ADDRESS\n         S     R1,START        **      RELATIVIZE WITHIN CSECT\n         STCM  R1,7,RLDADDR            SAVE RELATIVE ADDRESS\n         LA    R12,RLDRP               @ RELOC PTR\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+6(4),PRTABL         RELOC PTR\n         LA    R12,RLDPP               @ POS PTR\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+14(4),PRTABL        POS PTR\n         MVC   PRT+24(4),C_ACON        ASSUME A TYPE ADCON\n         CLI   RLDTYPE,4               IS IT VDCON 8 BYTES        @06A\n         JE    RLDLN8                  YES                        @06A\n         CLI   RLDTYPE,0               IS IT ADCON 4 BYTES\n         JE    RLDLN                   YES\n         J     RLDVCON                                            @06A\nRLDLN8   MVI   RLDLEN,8                SET LENGTH TO 8            @06A\n         MVI   RLDTYPE,1               CHANGE TO VDCON            @06A\nRLDVCON  MVC   PRT+24(4),C_VCON        ASSUME VCON\n         CLI   RLDTYPE,1               IS IT VCON\n         JE    RLDLN                   YES\n         MVC   PRT+22(6),CPRDISP       ASSUME PSEUDO REG DISPL\n         CLI   RLDTYPE,2               IS IT P.R. DISPL\n         JE    RLDLN                   YES\n         MVC   PRT+22(6),CPRCUM        ASSUME PSEUDO REG CUMUL DISPL\n         CLI   RLDTYPE,3               IS IT P.R. CUM DISPL\n         JE    RLDLN                   YES\n         MVC   PRT+21(10),CUNRESV      ASSUME UNRESOLVED\n         CLI   RLDTYPE,8               IS IT UNRESOLVED\n         JE    RLDLN                   YES\n         MVC   PRT+21(10),BLANX        CLEAR FIELD\n         MVC   PRT+24(3),CUNKNOWN+1    ASSUME '??:'\n         LA    R12,RLDTYPE             @ TYPE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(1),PRTABL+1      TYPE\nRLDLN    MVC   PRT+35(1),RLDLEN        LENGTH\n         OI    PRT+35,C'0'             CLEAR ZONE\n         MVC   PRT+42(1),RLDDIR        RELOCATION DIRECTION\n         LA    R12,RLDADDR             @ ADDRESS\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+46(6),PRTABL        ADDRESS\n         XC    RLDNAME(9),RLDNAME      CLEAR\n         LH    R15,RLDRP               GET RELOCATION POINTER\n         BCTR  R15,R0                  DEDUCT 1\n         LTR   R15,R15                 TEST DIFFERENCE\n         JM    RLPRT                   NEG, ERROR\n         MHI   R15,L'SYMENT            TIMES SYM TBL ENTRY LENG   @03C\n         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY\n         C     R15,CURRSYM             PAST END OF TABLE\n         JH    RLPRT                   YES, ERROR\n         USING SYMTBL,R15\n         MVC   RLDNAME,EXTSYM          ESD SYMBOL TO RLD TBL ENTRY\n         MVC   RLDESDTP,TYPSYM         ESD TYPE TO RLD ENTRY\n         DROP  R15\n         MVC   PRT+60(8),RLDNAME       NAME TO PRINT\n         MVC   PRT+70(2),C_LR          ASSUME LR\n         CLI   RLDESDTP,3              IS IT LR\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_SD          ASSUME SD\n         CLI   RLDESDTP,0              IS IT SD\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_ER          ASSUME ER\n         CLI   RLDESDTP,2              IS IT ER\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_PC          ASSUME PC\n         CLI   RLDESDTP,4              IS IT PC\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_PR          ASSUME PR\n         CLI   RLDESDTP,6              IS IT PR\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_CM          ASSUME CM\n         CLI   RLDESDTP,5              IS IT CM\n         JE    RLPRT                   YES\n         MVC   PRT+70(2),C_WX          ASSUME WX\n         CLI   RLDESDTP,X'0A'          IS IT WX\n         JE    RLPRT                   YES\n         MVC   PRT+70(4),CNULL         ASSUME NULL\n         CLI   RLDESDTP,7              IS IT NULL\n         JE    RLPRT                   YES\n         MVC   PRT+70(6),CESTAB        ASSUME E/STAB\n         CLI   RLDESDTP,X'0F'          IS IT E/STAB\n         JE    RLPRT                   YES\n         MVC   PRT+70(6),CQUEST        UNKNOWN TYPE ??????\nRLPRT    JAS   R9,PRINT                PRINT\n         CLC   RLDNAME,CSECT           RLD NAME IS CSECT NAME\n         JNE   GOODRLD                 NO\n         CLC   RLDADDR,XZROS           RELATIVE OFFSET IS ZERO\n         JE    RLDSTEP                 YES, IGNORE ENTRY\nGOODRLD  DS    0H\n         LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY\nRLDSTEP  TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS\n         JO    RLSAME                  NO\n         LH    R10,4(R6)               PICK UP NEW REL PTR\n         LH    R11,6(R6)               PICK UP NEW POS PTR\n         LA    R6,4(R6)                STEP OVER 4 BYTES\nRLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM\n         CR    R6,R8                   END OF RLD DATA\n         JL    RLDNEXT                 NO\n         MVI   0(R7),X'FF'             SET TBL END INDICATOR\n         ST    R7,CURRLD               SET NEW CURRENT ADDRESS\n         L     R9,RL9                  GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R7\n*\n****************************************************************\n*                                                              *\n* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *\n* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *\n* THE RLDRECS AND CNTLRECS ROUTINES.                           *\n*                                                              *\n****************************************************************\n*\nCTRLRECS EQU   *                       CONTROL AND RLD RECORDS\n         ST    R9,CR9                  SAVE RETURN ADDR\n         JAS   R9,RLDRECS              PROCESS RLD DATA\n         L     R6,BUFAD                RESET BUFFER ADDRESS\n         JAS   R9,CNTLRECS             PROCESS CONTROL DATA\n         L     R9,CR9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *\n* PLACED IN THE SYMBOL TABLE, AND IS USED TO CREATE PROGRAM    *\n* ENTRY STATEMENTS, AND TO IDENTIFY THE NAMES OF EXTERNAL      *\n* SYMBOLS USED BY THE PROGRAM.                                 *\n*                                                              *\n****************************************************************\n*\nCESDREC  EQU   *                       CESD RECORD PROCESSING\n         ST    R9,CES9                 SAVE RETURN\n         L     R7,CURRSYM              GET SYMBOL TBL ADDR\n         USING SYMTBL,R7\n         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM\n         LH    R8,6(R6)                NBR BYTES OF ESD DATA\n         SRL   R8,4                    COMPUTE NBR ENTRIES\n         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM\nCESDNXT  C     R7,ENDSYM               END OF TABLE\n         JNL   SYMFULL                 YES, ERROR\n         MVC   EXTSYM,0(R6)            SYMBOL NAME\n         MVC   TYPSYM,8(R6)            TYPE\n         NI    TYPSYM,X'0F'            CLEAR BITS 0-3\n         MVC   SYMIND,8(R6)            INDICATOR BYTE\n         NI    SYMIND,X'0F'            CLEAR BITS 4-7\n         MVC   SYMARMOD,12(R6)         COPY RSECT/AMODE/RMODE BYTE\n         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB\n         JNO   CEMVAD                  NO\n         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB\n         JNZ   CEMVAD                  NO\n         MVC   TYPSYM(2),X0F00         SHOW ENTAB/SEGTAB X0F00\nCEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL\n         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED\n         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID\n         STCM  R10,3,SYMESDID          ESD ID\n         MVC   PRT+5(8),EXTSYM         SYMBOL NAME\n         MVC   PRT+20(2),C_SD          ASSUME SD\n         CLI   TYPSYM,0                IS IT SD\n         JE    CEPIND                  YES\n         CLI   TYPSYM,X'96'            IS IT SD\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_LR          ASSUME LR\n         CLI   TYPSYM,3                IS IT LR\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_ER          ASSUME ER\n         CLI   TYPSYM,2                IS IT ER\n         JE    CEPIND                  YES\n         CLI   TYPSYM,X'0D'            IS IT ER **** ??\n         JE    CEPIND                  YES      **** ??\n         MVC   PRT+20(2),C_PC          ASSUME PC\n         CLI   TYPSYM,4                IS IT PC\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_PR          ASSUME PR\n         CLI   TYPSYM,6                IS IT PR\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_CM          ASSUME CM\n         CLI   TYPSYM,5                IS IT CM\n         JE    CEPIND                  YES\n         MVC   PRT+20(2),C_WX          ASSUME WX\n         CLI   TYPSYM,X'0A'            IS IT WX\n         JE    CEPIND                  YES\n         MVC   PRT+19(4),CNULL         ASSUME NULL\n         CLI   TYPSYM,7                IS IT NULL\n         JE    CEPIND                  YES\n         MVC   PRT+18(6),CESTAB        ASSUME ENTAB/SEGTAB\n         CLI   TYPSYM,X'0F'            IS IT ENTAB/SEGTAB\n         JE    CEPIND                  YES\n         LA    R0,TYPSYM\n         MVC   PRT+18(4),CUNKNOWN      UNIDENTIFIABLE TYPE ??:\n         LA    R12,TYPSYM              @ TYPE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+23(2),PRTABL        TYPE\nCEPIND   LA    R12,SYMIND              @ INDICATOR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(1),PRTABL        INDICATOR\n         LA    R12,SYMADDR             @ SYMBOL ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+30(6),PRTABL        SYMBOL ADDR\n         LA    R12,SYMSEG              @ SEGMENT NBR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+39(2),PRTABL        SEGMENT NBR\n         CLI   TYPSYM,2                IS IT ER\n         JE    CEESD                   YES\n         CLI   TYPSYM,3                IS IT AN LR\n         JNE   CENOTLR                 NO\n         LA    R12,SYMLRID             @ LR ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+43(4),PRTABL        LR ESD ID\n         J     CEESD                   CONTINUE\nCENOTLR  LA    R12,SYMLENG             @ LENGTH\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+49(6),PRTABL        SYMBOL LENGTH\nCEESD    LA    R12,SYMESDID            @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+57(4),PRTABL        ESD ID\n*\n         MVC   PRT+65(3),CYES          RSECT\n         TM    SYMARMOD,X'08'          YES\n         JO    CEAMODE\n         MVC   PRT+65(3),CNO           RSECT NO\nCEAMODE  MVC   PRT+72(3),CANY          AMODE ANY\n         TM    SYMARMOD,X'03'\n         JO    C_ERMODE\n         MVC   PRT+72(3),C31           31\n         TM    SYMARMOD,X'20'\n         JO    C_ERMODE\n         MVC   PRT+72(3),C24           24\nC_ERMODE MVC   PRT+79(3),CANY          RMODE ANY\n         TM    SYMARMOD,X'04'\n         JO    CECONT\n         MVC   PRT+79(3),C24           RMODE 24\nCECONT   TM    PROCESS,X'80'           FOUND CSECT\n         JO    CESDPT                  YES\n         CLI   TYPSYM,0                SD\n         JE    CECKCSB                 YES\n         CLI   TYPSYM,X'0D'            ER ??\n         JE    CECKCSB                 YES\n         CLI   TYPSYM,4                PC\n         JNE   CESDPT                  NO\n*\nCECKCSB  CLC   CSECT,BLANX             ANY CSECT NAME ENTERED\n         JNE   CECKNM                  YES\n         MVC   CSECT,EXTSYM            NAME TO CSECT\n         J     CSGOTCS                 CONTINUE\nCECKNM   CLI   TYPSYM,4                PC\n         JE    CESDPT                  YES\n         CLC   CSECT,EXTSYM            FOUND DESIRED NAME\n         JNE   CESDPT                  NO\n         TM    PROCESS,X'80'           ALREADY FOUND CSECT\n         JZ    CSGOTCS                 NO\n         MVC   PRT+15(2),CQUEST        SHOW DUPL\n         J     CESDPT                  CONTINUE\nCSGOTCS  OI    PROCESS,X'80'           SHOW CSECT FOUND\n         MVC   PRT+15(2),MSG01         FLAG ON PRINTOUT\n         MVC   ESDID,SYMESDID          SAVE ESD ID FOUND\n         MVC   START+1,SYMADDR         SAVE CSECT DOWRT ADDR\n         MVC   CSTLENG+1(3),SYMLENG    SAVE CSECT LENGTH\n         L     R1,CSTLENG              PICK UP LENGTH\n         A     R1,START                COMPUTE CSECT END ADDR\n         ST    R1,END                  SAVE CSECT END ADDR\n         L     R11,CSTLENG             TEXT LENGTH\n         LA    R11,256(R11)            ADD FOR SAFETY  ??\n         STORAGE OBTAIN,LENGTH=(11),ADDR=(R1),SP=0\n*                                      GET DYNAMIC STORAGE FOR TEXT\n         ST    R1,TXTSTRT              SAVE TEXT ADDR DYNAMIC AREA\n         AHI   R11,-256                DEDUCT SAFETY FACTOR       @03C\n         AR    R1,R11                  TXT END ADDR\n         ST    R1,TXTEND               SAVE TEXT END ADDR\nCESDPT   JAS   R9,PRINT                PRINT\n         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION\n         LA    R10,1(R10)              ADD 1 TO ESD COUNTER\n         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT\n         JCT   R8,CESDNXT              LOOP THRU INPUT RECORD     @03C\n         MVI   0(R7),X'FF'             SET END OF TABLE INDIC\n         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR\n         L     R9,CES9                 GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R7\n*\n****************************************************************\n*                                                              *\n* ISSUE BLDL FOR THE MAIN MODULE, AND PRINT MODULE RELATED INFO*\n*                                                              *\n****************************************************************\n*\nBLDL     EQU   *                       ISSUE BLDL AND PRINT INFO\n         ST    R9,BL9                  SAVE RETURN ADDR\nISSBLDL  BLDL  SYSLIB,BLDLIST          ISSUE BLDL\n         LTR   R15,R15                 ANY ERRORS\n         JNZ   MISSMEM                 YES\n         LA    R1,MEMBER+35            END OF BASIC PORTION\n         TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLREFA1                 NO\n         LA    R1,4(R1)                ADD FOR SSI\nBLREFA1  TM    ALIASIND,X'80'          ALIAS\n         JZ    BLREFA2                 NO\n         LA    R1,11(R1)               ADD FOR ALIAS\nBLREFA2  TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLREFA3                 NO\n         LA    R1,8(R1)                ADD FOR SCATTER\nBLREFA3  MVC   AUTHLEN(2),0(R1)        AUTH LENGTH AND CODE\n         TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLCKALI                 NO\n         LA    R1,MEMBER+35            END OF BASIC PORTION\n         TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLSSI2                  NO\n         TM    ALIASIND,X'80'          ALIAS\n         JO    BLFMTED                 YES, NO REFORMAT NEEDED\n         LA    R1,8(R1)                NO, STEP PAST SCATTER SECTION\n         J     BLMVSSI                 GO MOVE SSI\nBLSSI2   TM    ALIASIND,X'80'          ALIAS\n         JZ    BLMVSSI                 NO\n         LA    R1,11(R1)               YES, STEP PAST ALIAS SECTION\nBLMVSSI  MVC   SSI,0(R1)               MOVE SSI DATA\nBLCKALI  TM    ALIASIND,X'80'          ALIAS\n         JO    BLASC                   YES\n         J     BLFMTED                 FINISHED\nBLASC    TM    ATTR1A,X'04'            SCATTER FORMAT\n         JO    BLFMTED                 YES, NO REFORMAT NEEDED\n         MVC   ALMEM,MEMBER+38         MOVE ALIAS MEMBER\n         MVC   ALEPA(3),MEMBER+35      YES, MOVE ALIAS DATA\nBLFMTED  MVC   PRT(26),MSG03           'DIRECTORY INFO FOR MODULE '\n         MVC   PRT+27(8),MEMBER        MEMBER NAME TO PRINT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(14),MSG04        'TTR OF MODULE='\n         LA    R12,TTRMOD              @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+24(6),PRTABL        TTR TO PRINT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG05        'CONCATENATION NBR='\n         LA    R12,CCAT                @ CONCATENATION NBR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+28(2),PRTABL        CONCATENATION NBR\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(12),MSG06\n         LA    R12,ALIASIND            @ ALIAS INDICATOR\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+22(2),PRTABL        ALIAS INDICATOR\n         TM    ALIASIND,X'80'          IS IT AN ALIAS\n         JZ    BLALPRT                 NO\n         MVC   PRT+50(13),MSG07        '*** ALIAS ***'\nBLALPRT  JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG08        'TTR, 1ST TXT RECD='\n         LA    R12,TTR1TXT             @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+28(6),PRTABL        TTR OF 1ST TXT BLOCK\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(25),MSG09        'TTR OF NOTE/SCATTER LIST='\n         LA    R12,TTRNS               @ TTR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+35(6),PRTABL        TTR OF NOTE/SCATTER\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(17),MSG10        'NBR NOTE ENTRIES='\n         LA    R12,NNOTE               @ NBR NOTES\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+27(2),PRTABL        NBR NOTE ENTRIES\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG11        'ATTRIBUTES 1='\n         LA    R12,ATTR1A              @ ATTRIBUTES\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+23(4),PRTABL        ATTRIBUTES 1\n         TM    ATTR1A,X'80'            RENT\n         JZ    BLAT1A                  NO\n         MVC   PRT+30(4),CRENT\nBLAT1A   TM    ATTR1A,X'40'            REUS\n         JZ    BLAT1B                  NO\n         MVC   PRT+35(4),CREUS\nBLAT1B   TM    ATTR1A,X'20'            OVLY\n         JZ    BLAT1C                  NO\n         MVC   PRT+40(4),COVLY\nBLAT1C   TM    ATTR1A,X'10'            TEST\n         JZ    BLAT1D                  NO\n         MVC   PRT+45(4),CTEST\nBLAT1D   TM    ATTR1B,X'08'            OL\n         JZ    BLAT1E                  NO\n         MVC   PRT+50(2),C_OL\nBLAT1E   TM    ATTR1A,X'04'            SCTR\n         JZ    BLAT1F                  NO\n         MVC   PRT+53(4),MSG18         SCTR\nBLAT1F   TM    ATTR1A,X'02'            EXEC\n         JZ    BLAT1G                  NO\n         MVC   PRT+58(4),CEXEC\nBLAT1G   TM    ATTR1B,X'01'            REFR\n         JZ    BLAT1PRT                NO\n         MVC   PRT+63(4),CREFR\nBLAT1PRT JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG12        'TOTAL LENGTH='\n         LA    R12,TOTVIRT             @ TOTAL LENGTH\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+23(6),PRTABL        TOTAL LENGTH OF MODULE\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(23),MSG13        'LENGTH OF 1ST TXT RECD='\n         LA    R12,LENG1               @ 1ST TXT LENG\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+33(4),PRTABL        LENGTH OF 1ST TXT BLOCK\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(11),MSG14        'E. P. ADDR='\n         LA    R12,LKEPA               @ E.P. ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+21(6),PRTABL        E.P. ADDR\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(13),MSG15        'ATTRIBUTES 2='\n         LA    R12,ATTR2               @ ATTRIBUTES 2\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+23(2),PRTABL        ATTRIBUTES 2\n         TM    ATTR2,X'20'             PAGE ALIGNMENT\n         JZ    BLAT3A                  NO\n         MVC   PRT+30(16),MSG16        'PAGE ALIGN REQRD'\nBLAT3A   TM    ATTR2,X'10'             SSI PRESENT\n         JZ    BLAT3PRT                NO\n         MVC   PRT+50(11),MSG17        'SSI PRESENT'\nBLAT3PRT JAS   R9,PRINT                PRINT\n         TM    ATTR1A,X'04'            SCATTER FORMAT\n         JZ    BLFAL                   NO\n         MVC   PRT+10(8),MSG18         'SCTRLEN='\n         LA    R12,SCTRLEN             @ SCATTER LIST LENGTH\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+18(4),PRTABL        SCATTER LIST LENGTH\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG19        'TRANSLATE TBL LEN='\n         LA    R12,TTLEN               @ TRANS TBL LEN\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+28(4),PRTABL        TRANSLATION TABLE LENGTH\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(18),MSG20        'ESD ID OF 1ST TXT='\n         LA    R12,SCESDID             @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+28(4),PRTABL        ESD ID OF 1ST TXT\n         JAS   R9,PRINT                PRINT\n         MVC   PRT+10(23),MSG21        'ESD ID CONTAINING E.P.='\n         LA    R12,SCEPESD             @ ESD ID\n         JAS   R9,HEXPRT2              CONVERT\n         MVC   PRT+33(4),PRTABL        @ ESD ID OF CSECT CONTAINING E.P\n         JAS   R9,PRINT                PRINT\nBLFAL    TM    ALIASIND,X'80'          ALIAS\n         JZ    BLFSSI                  NO\n         MVC   PRT+10(28),MSG22        E.P. ADDRESS OF THIS MEMBER='\n         LA    R12,ALEPA               @ E.P. ADDR\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT+38(6),PRTABL        E.P. ADDR\n         JAS   R9,PRINT\n         MVC   PRT+10(17),MSG23        'REAL MEMBER NAME='\n         MVC   PRT+27(8),ALMEM         REAL MEMBER NAME\n         JAS   R9,PRINT\nBLFSSI   TM    ATTR2,X'10'             ANY SSI INFO\n         JZ    BLAUTHC                 NO\n         MVC   PRT+10(9),MSG24         'SSI INFO='\n         LA    R12,SSI                 @ SSI INFO\n         JAS   R9,HEXPRT4              CONVERT\n         MVC   PRT+19(8),PRTABL        SSI INFO\n         JAS   R9,PRINT                PRINT\nBLAUTHC  MVC   PRT+10(10),MSG25        'AUTH CODE='\n         LA    R12,AUTHCOD             @ AUTH CODE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+20(2),PRTABL        AUTH CODE\n         JAS   R9,PRINT                PRINT\n         TM    ALIASIND,X'80'          ALIAS\n         JZ    BLXIT                   NO\n         MVC   PRT+5(38),MSG26         REAL MEMBER DIRECTORY INFO\n         MVI   PCC,C'0'                DOUBLE SPACE\n         JAS   R9,PRINT                PRINT\n         MVC   MEMBER,ALMEM            REAL MEMBER NAME TO LIST\n         J     ISSBLDL                 DO OVER FOR REAL MEMBER\nBLXIT    L     R9,BL9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*\n****************************************************************\n*                                                              *\n* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *\n* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *\n* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *\n* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *\n*                                                              *\n****************************************************************\n*\nHEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE\nHEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX\nHEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE\n         TR    PRTABL(8),TRTBL         MAKE PRINTABLE\n         BR    R9                      EXIT\n*\n*\n*\n****************************************************************\n*                                                              *\n* PRINT TO LOADMAP                                             *\n*                                                              *\n****************************************************************\n*\nPRINT    DS    0H                      PRINT ROUTINE\n         TM    LOADMAP+48,X'10'        IS LOADMAP OPEN          @04C\n         JNO   CLRPRT                  NO\n         PUT   LOADMAP,PRTLINE         WRITE PRINT LINE         @04C\nCLRPRT   MVI   PRT,C' '                CLEAR PRINT LINE\n         MVC   PRT+1(L'PRT-1),PRT\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C' '                SINGLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'0'                DOUBLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'-'                TRIPLE SPACED\n         JE    SETSGL                  YES\n         ZAP   LINECT,P0               NO, MUST BE NEW PAGE\nSETSGL   MVI   PCC,C' '                SET SINGLE SPACING\n         CP    LINECT,P58              PAST END OF PAGE\n         JH    NEWPAGE                 YES\n         BR    R9                      EXIT\nNEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF\n         ZAP   LINECT,P0               RESET LINE COUNTER\n         BR    R9                      EXIT\n*\n*\n****************************************************************\n*                                                              *\n* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.   *\n* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.               *\n*                                                              *\n****************************************************************\n*\nGETCTL   EQU   *                       EXTRACT DESIRED MEMBER/CSECT\n         GET   SYSIN                   READ THE CONTROL CARD\n         LA    R12,72                  LENGTH OF CONTROL CARD\n         LA    R11,8                   MAX LENGTH OF MEMBER NAME\n         LA    R10,MEMBER              @ MEMBER NAME FIELD\nCKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK\n         JNE   GCMEMOV                 NO, GO MOVE MEMBER NAME\n         LA    R1,0(R1)                TO NEXT CONTROL BYTE\n         JCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH\n         J     GCEND                   ALL BLANKS, EXIT\nGCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME\n         LA    R1,1(R1)                TO NEXT CONTROL BYTE\n         BCTR  R12,R0                  SUBTRACT 1 FROM LENGTH\n         LA    R10,1(R10)              TO NEXT NAME BYTE\n         BCTR  R11,R0                  SUBTRACT 1 FROM LENGTH\n         CLI   0(R1),C' '              GOT A BLANK\n         JE    GCSETUP2                YES\n         CLI   0(R1),C','              GOT A COMMA\n         JE    GCSETUP2                YES\n         LTR   R12,R12                 END OF CONTROL DATA\n         JE    GCEND                   YES\n         LTR   R11,R11                 NAME FULL\n         JNZ   GCMEMOV                 NO, CONTINUE\n         J     NAMEOV8                 YES, NAME TOO LONG\nGCSETUP2 LA    R11,8                   CSECT NAME MAX LENGTH\n         LA    R10,CSECT               @ CSECT NAME FIELD\nGCSTEP2  LA    R1,1(R1)                STEP PAST BLANK\n         JCT   R12,GCHKBK2             CHECK NEXT FOR BLANK\n         J     GCEND                   END OF SCAN\nGCHKBK2  CLI   0(R1),C' '              CONTROL DATA IS BLANK\n         JE    GCSTEP2                 YES\nGCCSMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO CSECT NAME\n         LA    R1,1(R1)                TO NEXT CONTROL BYTE\n         LA    R10,1(R10)              TO NEXT NAME BYTE\n         BCTR  R12,R0                  DEDUCT 1 FROM CONTROL LENGTH\n         BCTR  R11,R0                  DEDUCT 1 FROM NAME LENGTH\n         LTR   R12,R12                 ANY CONTROL BYTES LEFT\n         JZ    GCEND                   NO\n         CLI   0(R1),C' '              NEXT CONTROL BYTE BLANK\n         JE    GCEND                   YES\n         LTR   R11,R11                 ANY NAME BYTES LEFT\n         JNZ   GCCSMOV                 YES, LOOP\n         J     NAMEOV8                 NAME TOO LONG, ERROR\nGCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND\n         JE    NOMBR                   NO\n         BR    R9                      EXIT\n*\n*\n*\n****************************************************************\n*                                                              *\n* MISCELLANEOUS ERROR MESSAGES.                                *\n*                                                              *\n****************************************************************\n*\nERRORS   EQU   *                       ERROR END MESSAGES\nNOCTL    MVC   PRT(L'NOCNTRL),NOCNTRL  NO CONTROL INFO MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nNAMEOV8  MVC   PRT(L'OVER8),OVER8      NAME OVER 8 MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nNOMBR    MVC   PRT(L'NOMEM),NOMEM      MISSING MEMBER NAME MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nMISSMEM  MVC   PRT(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nMISSCS   MVC   PRT(L'INVCSECT),INVCSECT CSECT NOT IN MEMBER MESSAGE\n         J     ERREND2                 GO PRINT                    @04C\nSYMFULL  MVC   PRT(L'FULLSYM),FULLSYM  FULL SYM TBL MSG\n         J     ERREND                  GO PRINT\nRLDFULL  MVC   PRT(L'FULLRLD),FULLRLD  RLD TBL FULL MSDG\nERREND   DS    0H\n         PUT   SYSPRINT,PRTLINE        GO PRINT MESSAGE\n         ABEND 778,DUMP                ABEND\nERREND2  PUT   SYSPRINT,PRTLINE                                    @04A\n         J     CLOSES                                              @04A\n*\n*\n*\n*\n****************************************************************\n*                                                              *\n* COUNT THE ENTRIES IN THE ESD TABLE WHICH WILL RESULT IN      *\n* ENTRIES IN THE LABEL TABLE.                                  *\n*                                                              *\n****************************************************************\nENDINIT  DS    0H                      *** FINAL PROCESSING ***\n         L     R6,SYMTBAD              GET @ ESD TABLE\n         USING SYMTBL,R6\n         LA    R7,4                    INITIAL LABEL COUNT VALUE\nSYMCNT   CLI   0(R6),X'FF'             END OF ESD TABLE\n         JE    RLDCNT                  YES\n         CLI   TYPSYM,3                IS ESD AN LR ENTRY\n         JNE   SCSTP                   NO, IGNORE\n         CLC   SYMADDR,START+1         ADDR BELOW DESIRED CSECT\n         JL    SCSTP                   YES, IGNORE\n         CLC   SYMADDR,END+1           ADDR ABOVE DESIRED CSECT\n         JH    SCSTP                   YES, IGNORE\n         LA    R7,1(R7)                ADD TO LABEL COUNT\n         MVC   SYMLENG,ASTERISK        FLAG AS USABLE\nSCSTP    LA    R6,L'SYMENT(R6)         TO NEXT ESD ENTRY\n         J     SYMCNT\n         DROP  R6\n*\n****************************************************************\n*                                                              *\n* COUNT THE ENTRIES IN THE RLD TABLE WHICH WILL RESULT IN      *\n* ENTRIES IN THE LABEL TABLE.                                  *\n*                                                              *\n****************************************************************\n*\nRLDCNT   L     R6,RLDTBL               GET RLD TBL ADDR\n         USING RLDTBLD,R6\nRLDCEND  CLI   0(R6),X'FF'             END OF RLD TABLE\n         JE    LBLGET                  YES\n         CLC   RLDRP,ESDID             ESDID SAME AS DESIRED CSECT\n         JNE   RLDC1                   NO, EXTRN REF\n         LA    R7,1(R7)                ADD 1 TO LABEL COUNT\nRLDC1    LA    R7,1(R7)                ADD 1 TO LABEL COUNT\n         LA    R6,L'RLDENT(R6)         TO NEXT RLD ENTRY\n         J     RLDCEND                 LOOP THRU RLD TBL\n         DROP  R6\n         DROP  R5\n****************************************************************\n*                                                              *\n* CREATE INITIAL ENTRIES IN THE LABEL TABLE USING DATA FROM    *\n* THE ESD AND RLD TABLES.                                      *\n*                                                              *\n****************************************************************\nLBLGET   DS    0H\n*        L     R6,LBLTBL               GET @ LABEL TABLE\n         L     R6,CURRLBL              GET @ LABEL TABLE\n         USING LABELD,R6\n         L     R7,SYMTBAD              GET ESD TBL ADDR\n         USING SYMTBL,R7\n         CLC   LKEPA,XZROS             E.P. ADDR ZERO\n         JE    LRENTS                  YES\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,LKEPA              PICK UP E.P. ADDR\n         S     R1,START                RELATIVIZE IN CSECT\n         JM    LRENTS                  NEG, ERROR\n         STCM  R1,7,LBLADR             SAVE OFFSET\n         XC    LBLREF,LBLREF           CLEAR LBLREF                @03A\n         MVI   LBLTYP,C'L'             SET LABEL TYPE IN ENTRY\n         LA    R12,LBLADR              POINT TO OFFSET\n         JAS   R9,HEXPRT3\n         MVC   LBLNAME,BLANX                                       @05A\n         MVI   LBLNAME,C'A'            1ST CHAR OF LABEL IS 'A'\n         MVC   LBLNAME+1(6),PRTABL     END OF LABEL IS OFFSET\n         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY\n         ST    R6,CURRLBL              SAVE IT'S ADDRESS\nLRENTS   CLI   0(R7),X'FF'             END OF ESD TABLE\n         JE    RLDLBLS                 YES\n         CLC   SYMLENG,ASTERISK        THIS DESIRED LR ENTRY\n         JE    GOTLR                   YES\nLRESTP   LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY\n         J     LRENTS                  LOOP THRU ESD TABLE\nGOTLR    SR    R12,R12                 CLEAR WORK REGISTER\n         ICM   R12,7,SYMADDR           GET SYMBOL ADDRESS\n         S     R12,START               RELATIVIZE IN CSECT\n         STCM  R12,7,LBLADR            SAVE RELATIVE ADDRESS\n         MVC   LBLNAME,BLANX                                       @05A\n         MVC   LBLNAME(8),EXTSYM       SYMBOL NAME TO OUTPUT\n         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY\n         ST    R6,CURRLBL              SAVE NEXT LABEL ENTRY ADDR\n         J     LRESTP                  CONTINUE ESD PROCESSING\n         DROP  R7\nRLDLBLS  L     R7,RLDTBL               GET RLD TBL ADDR\n         USING RLDTBLD,R7\nRLDLBND  CLI   0(R7),X'FF'             END OF RLD TABLE   **\n         JE    PHASE1                  YES\n         CLC   RLDRP,ESDID             RLD ESDID = DESIRED CSECT ESDID\n         JE    INTREFS                 YES, INTERNAL ADCON\n         CLI   RLDTYPE,1               VCON\n         JE    EXTREFS                 YES\n         CLI   RLDTYPE,0               ER                          @03A\n         JE    EXTREFS                 YES                         @03A\n         CLI   RLDTYPE,8               IS IT UNRESOLVED\n         JE    EXTREFS                 YES\nRLLSTP   LA    R7,L'RLDENT(R7)         TO NEXT RLD ENTRY\n         J     RLDLBND                 LOOP THRU RLD TABLE\nEXTREFS  MVC   LBLNAME,BLANX                                       @05A\n         CLI   RLDESDTP,X'0A'          W-CON\n         JNE   VCONLBL                 NO, BUILD V-CON\n         MVI   LBLTYP,C'W'             SHOW W-CON\n         J     FXTLBL                  CONTINUE LABEL ENTRY FORMAT\nVCONLBL  MVI   LBLTYP,C'V'             SHOW V-CON\n         CLC   RLDNAME,XZROS                                       @03A\n         JNE   FXTLBL                                              @03A\n         MVC   LBLNAME(8),CQUEST                                   @03A\n         J     FINLBL                                              @03A\nFXTLBL8  MVI   LBLTYP,C'8'                                         @10C\n         MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY         @10A\n         L     R12,TXTSTRT                                         @10A\n         SR    R14,R14                                             @10A\n         ICM   R14,7,RLDADDR                                       @10A\n         AR    R12,R14                                             @10A\n         AHI   R12,4                                               @10A\n         L     R15,0(R12)                                          @10A\n         L     R12,START                                           @10A\n         SR    R15,R12                                             @10A\n         LR    R12,R15                                             @10A\n         ST    R12,COMMENT                                         @10A\n         LA    R12,COMMENT                                         @10A\n         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @10A\n         MVI   LBLNAME,C'A'                                        @10A\n         MVC   LBLNAME+1(6),PRTABL+2                               @10A\n         MVI   LBLNAME+7,C' '                                      @10A\n         MVC   COMMENT+4(8),LBLNAME                                @10A\n         J     FINLBL                                              @10A\nFXTLBL   MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY\nFINLBL   MVC   LBLADR,RLDADDR          ADDRESS TO LABEL ENTRY\n         MVC   LBLLEN,RLDLEN           LENGTH TO LABEL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT LABEL TABEL ENTRY\n         ST    R6,CURRLBL              SAVE CURRENT LABEL TABLE ADDR\n         J     RLLSTP                  CONTINUE LABEL TABLE BUILD\nINTREFS  DS    0H\n         CLI   RLDLEN,8                AD LABEL                    @06A\n         JE    FXTLBL8                 BRANCH IF YES               @06A\n         CLI   RLDTYPE,0               A-CON\n         JNE   RLLSTP                  NO, IGNORE\n         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY TYPE\n         SR    R12,R12                 CLEAR WORK REGISTER\n         ICM   R12,7,RLDADDR           GET RLD ADDRESS\n         A     R12,TXTSTRT             FIND LOC IN TEXT\n         MVC   LBLADR,1(R12)           MOVE TO LABEL ENTRY\n         CLI   RLDLEN,8                DOUBLE WORD ADDRESS 8-BYTES @06A\n         JE    INTGOTL                 YES                         @06A\n         CLI   RLDLEN,4                ACON IS 4-BYTES\n         JE    INTGOTL                 YES\n         MVC   LBLADR,0(R12)           TEXT TO LABEL ENTRY\n         CLI   RLDLEN,3                ADCON IS 3-BYTES\n         JE    INTGOTL                 YES\n         MVC   LBLADR+1(2),0(R12)      TEXT TO LABEL ENTRY\n         MVI   LBLADR,0                CLEAR 1ST BYTE\n         CLI   RLDLEN,2                ADCON IS 2-BYTES\n         JE    INTGOTL                 YES\n         XC    LBLADR,LBLADR           CLEAR LABEL ENTRY ADDR\n         MVC   LBLADR+2(1),0(R12)      TEXT TO LABEL ENTRY\nINTGOTL  SR    R12,R12                 CLEAR WORK\n         ICM   R12,7,LBLADR            GET ADDRESS\n         S     R12,START               RELATIVIZE IN CSECT\n         JM    RLLSTP                  NEGATIVE, IGNORE\n         STCM  R12,7,LBLADR            STORE RELATIVE ADDRESS\n         LA    R12,LBLADR              POINT TO ADDRESS\n         JAS   R9,HEXPRT3              CONVERT TO PRINTABLE\n         MVC   LBLNAME,BLANX           INIT TO BLAKS               @05A\n         MVI   LBLNAME,C'A'            LABEL ENTRY TYPE\n         MVC   LBLNAME+1(6),PRTABL     LOW ORDER NAME POSITIONS\n         MVI   LBLNAME+7,C' '          CLEAR LAST NAME BYTE\n         MVC   LABELL(LABELL,R6),0(R6) COPY THIS ENTRY TO NEXT\n         MVI   LBLLEN,0                SET LENGTH = 0\n         LA    R6,LABELL(R6)           STEP TO NEXT\n         MVI   LBLTYP,C'A'             SHOW TYPE\n         J     FINLBL                  FINISH LABEL\n         DROP  R6\n         DROP  R7\n****************************************************************\n*                                                              *\n* LOAD AND EXECUTE PHASE 1: HDISASM1                            *\n*                                                              *\n****************************************************************\nPHASE1   DS    0H\n         LARL  R0,HDISSFTB             LOAD HDISSFTB              @08A\n         SR    R1,R1                                              @08A\n         SVC   8                       LOAD HDISD2TB              @08A\n         ST    R0,SFTAD                SAVE EPA OF HDISD2TB       @08A\n         MVC   0(3,R6),HIVAL           SET END OF LABEL TABLE\n         L     R15,ASM1AD              COPY E.P. ADDRESS\n*        LA    R1,=A(COMMPARM)         @ PARAMETER LIST\n         LARL  R1,COMMPARM             @ PARAMETER LIST\n         BALR  R14,R15                 LINK TO HDISASM1\n         CLI   USERR,0                 ANY ERRORS\n         JNE   CLOSES                  YES, STOP THE RUN\n****************************************************************\n*                                                              *\n* PRINT THE LABEL TABLE AFTER PHASE 1 COMPLETION.              *\n*                                                              *\n****************************************************************\n         MVC   DATOCUR,DATSTRT\n         MVC   CODOCUR,CODSTRT\n         MVC   PRTLINE,PH1LBL          HEADER 1\n         JAS   R9,PRINT                PRINT IT\n         MVC   PRTLINE,PH1HDR          HEADER 2\n         JAS   R9,PRINT                PRINT IT\n         L     R6,LBLTBL               GET LABEL TABLE ADDR\n         USING LABELD,R6\nLPEND    C     R6,CURRLBL              END OF TABLE\n         JNL   FREESTRG                YES\n         LA    R12,LBLADR              @ LABEL ADDRESS\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT(6),PRTABL           ADDRESS TO PRINT\n         MVC   PRT+9(1),LBLTYP         TYPE TO PRINT\n         MVC   PRT+12(L'LBLNAME),LBLNAME     SYMBOL TO PRINT      @05C\n         CLI   LBLLEN,0                ANY LENGTH\n         JE    LTPPRT                  NO\n         LA    R12,LBLLEN              GET @ LENGTH\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   PRT+26(2),PRTABL        LENGTH TO PRINT             @05C\n         LA    R12,LBLREF              GET @ LENGTH                @03A\n         JAS   R9,HEXPRT3              CONVERT                     @03A\n         MVC   PRT+30(6),PRTABL        LENGTH TO PRINT             @05C\nLTPPRT   JAS   R9,PRINT                PRINT TBL ENTRY\n         LA    R6,LABELL(R6)           TO NEXT ENTRY\n         J     LPEND                   LOOP THRU TABLE\nFREESTRG L     R12,RLDTBL              @ RLD TABLE\n         STORAGE RELEASE,LENGTH=96000,ADDR=(12)   FREE RLD TABLE   @06A\n         L     R12,BUFAD                                           @02A\n         STORAGE RELEASE,LENGTH=32768,ADDR=(12)   FREE I/O         @06C\n*                                                 BUFFER ADDRESS\n****************************************************************\n*                                                              *\n* PRINT THE TEXT FOR THE CSECT TO BE DISASSEMBLED.             *\n*                                                              *\n****************************************************************\n         MVI   PCC,C'1'                SET SKIP TO HEAD\n         MVC   PRT+50(19),MSG27        '***** T E X T *****'\n         JAS   R9,PRINT                PRINT TEXT HEADER\n         MVI   PCC,C'0'                SET DOUBLE SPACING\n         L     R11,TXTSTRT             GET TEXT START ADDRESS\nPNEXLIN  LA    R10,2                   GROUPS PER LINE\n         LA    R12,POFSET+1            @ OFFSET\n         JAS   R9,HEXPRT3              CONVERT\n         MVC   PRT(6),PRTABL           OFFSET TO PRINT\n         MVC   PRT+85(32),0(R11)       TEXT TO PRINT\n         TR    PRT+85(32),PRTCHAR      TRANSLATE TO PRINTABLE\n         LA    R8,PRT+9                @ 1ST PRINT WORD\n         LA    R7,4                    4 WORDS PER GROUP\nPGRP     LA    R12,0(R11)              @ TEXT WORD\n         JAS   R9,HEXPRT4              CONVERT\n         MVC   0(8,R8),PRTABL          TEXT TO PRINT WORD\n         LA    R11,4(R11)              TO NEXT TEXT WORD\n         LA    R8,9(R8)                TO NEXT PRINT LOC\n         JCT   R7,PGRP                 DO 4 TIMES\n         LA    R8,2(R8)                SPACE BETWEEN GROUPS\n         LA    R7,4                    FOR 2ND GROUP\n         JCT   R10,PGRP                DO 4 MORE TIMES\n         JAS   R9,PRINT                PRINT THE LINE\n         L     R9,POFSET               GET OFFSET\n         LA    R9,32(R9)               ADD 32 BYTES\n         ST    R9,POFSET               UPDATE OFFSET\n         C     R11,TXTEND              END OF TEXT\n         JL    PNEXLIN                 NO, CONTINUE\n         MVI   PCC,C'1'                SET SKIP TO HEAD\n         MVI   WORKREC,C' '            CLEAR OUTPUT RECORD\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         MVC   NAME,CSECT              CSECT NAME\n****************************************************************\n*                                                              *\n* CREATE THE INITIAL CSECT INSTRUCTION, AND ANY ENTRY STATE-   *\n* MENTS WHICH MAY BE INDICATED BY ESD TABLE ENTRIES.           *\n*                                                              *\n****************************************************************\n         MVC   MNEMONIC(L'C_CSECT),C_CSECT SET MNEMONIC TO CSECT\n         JAS   R9,PUNCH                WRITE SYSPUNCH RECORD\n         MVC   PRT+25(14),PRT          COPY CSECT STATEMENT       @03A\n         MVC   PRT(16),BLANX                TO SYSPRINT           @03A\n         PUT   SYSPRINT,PRTLINE        WRITE SYSPRINT RECORD\n         L     R7,SYMTBAD              GET ESD TBL ADDR\n         USING SYMTBL,R7\nLREFSS   CLI   0(R7),X'FF'             END OF ESD TBL\n         JE    CKLDLB                  YES\n         CLC   SYMLENG,ASTERISK        '***'\n         JE    MAKEXT                  YES\nESDTSTP  LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY\n         J     LREFSS                  LOOP THRU ESD TBL\nMAKEXT   MVC   MNEMONIC(L'C_ENTRY),C_ENTRY   MNEMONIC IS ENTRY    @04C\n         MVC   OPNDS(8),EXTSYM         SYMBOL TO OPERAND\n         JAS   R9,PUNCH                WRITE OUTPUT RECORD\n         MVC   PRT+34(17),PRT+9        COPY ENTRY STATEMENT       @03A\n         MVC   PRT+9(17),BLANX              TO SYSPRINT           @03A\n         PUT   SYSPRINT,PRTLINE        AND PRINT IT\n         J     ESDTSTP                 CONTINUE ESD PROCESSING\n         DROP  R7\n         DROP  R6\nCKLDLB   L     R12,SYMTBAD             @ ESD SYMBOL TABLE\n****************************************************************\n*                                                              *\n* LOAD AND EXECUTE PHASE 2: HDISASM2                           *\n*                                                              *\n****************************************************************\n         STORAGE RELEASE,LENGTH=304000,ADDR=(12)  FREE SYMBOL TBL\n         L     R15,ASM2AD              GET E.P. ADDRESS\n         LARL  R1,COMMPARM             GET PARAMETER ADDRESS       @06C\n         BALR  R14,R15                 CALL HDISASM2\n         J     EOJ                     GO FINISH\n****************************************************************\n*                                                              *\n* WRITE OUTPUT TO SYSPUNCH.                                    *\n*                                                              *\n****************************************************************\nPUNCH    EQU   *                       WRITE OUTPUT RECORDS\n         MVC   PRT(80),WORKREC         SAVE IN PRINT\n         TM    SYSPUNCH+48,X'10'       IS FILE OPEN\n         JZ    CLRWKR                  NO\n         AP    CARDNO,P10              INCREMENT CARD NO\n         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD\n         OI    SEQNBR+7,C'0'           CLEAR SIGN\n         PUT   SYSPUNCH,WORKREC        WRITE SOURCE CARD\nCLRWKR   MVI   WORKREC,C' '            CLEAR OUTPUT RECORD\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         BR    R9                      RETURN\n****************************************************************\n*                                                              *\n* END OF JOB. DISASSEMBLY COMPLETE.                            *\n*                                                              *\n****************************************************************\nEOJ      EQU   *                       END OF JOB\n         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.        @04A\n         JZ    NOCTL                   NO                         @04A\n         MVC   MNEMONIC(L'C_YREGS),C_YREGS  SET MNEMONIC TO YREGS\n         JAS   R9,PUNCH                WRITE RECORD\n         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC             @20A\n         MVC   PRT+34(5),C_YREGS                                  @03A\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A\n         L     R12,DTBSTRT             @ DSECT HEADER TBL\nCENDSTB  CLI   0(R12),X'FF'            END OF TABLE\n         JE    ENDSTMT                 YES\n         MVC   NAME,0(R12)             DSECT NAME TO RECORD\n         MVC   MNEMONI2(L'CDSECT),CDSECT  COPY 'DSECT'            @05C\n         JAS   R9,PUNCH                PUNCH DSECT ENTRY\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A\n         ICM   R11,7,DSECTHA-DSECTHD(R12)  GET FIELD TABLE ADDR   @05C\n         USING DSECTD,R11\nCENDFTB  CLI   0(R11),X'FF'            END OF FIELD TABLE\n         JNE   DFMTFLD                 NO\n         LA    R12,DSECTHL(R12)         TO NEXT DSECT HEADER      @05C\n         J     CENDSTB                 LOOP\nDFMTFLD  MVC   NAME(L'DSLNAME),DSLNAME NAME TO RECORD             @05C\n         MVC   MNEMONI2(L'CEQU),CEQU   COPY 'EQU'                 @05C\n         MVC   OPNDS+4(8),0(R12)       BASE NAME TO OPERAND       @05C\n         LA    R10,OPNDS+7             @ NAME RHE\nCFRHE    CLI   0(R10),C' '             AT RHE\n         JNE   CFPLUS                  YES\n         JCT   R10,CFRHE               BACK UP 1 AND LOOP\nCFPLUS   LA    R10,1(R10)              TO NEXT POS\n         MVI   0(R10),C'+'             DELIMITER\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,DSOFSET            GET OFFSET\n         CVD   R1,DBLWD                CONVERT\n         UNPK  DBLWD(5),DBLWD+4(4)     UNPACK                     @06C\n         OI    DBLWD+4,X'F0'           CLEAR SIGN                 @06C\n         CHI   R1,10000                OFFSET < 10000             @06A\n         JL    CFO1000                 YES                        @06A\n         MVC   1(5,R10),DBLWD          NO, MOVE 5-DIGIT OFFSET    @06A\n         LA    R10,6(R10)              TO NEXT POS                @06A\n         J     CFCMA                   CONTINUE                   @06A\nCFO1000  CHI   R1,1000                 OFFSET < 1000              @06C\n         JL    CFO100                  YES\n         MVC   1(4,R10),DBLWD+1        NO, MOVE 4-DIGIT OFFSET    @06C\n         LA    R10,5(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO100   CHI   R1,100                  OFFSET < 100               @03C\n         JL    CFO10                   YES\n         MVC   1(3,R10),DBLWD+2        NO, MOVE 3-DIGIT OFFSET    @06C\n         LA    R10,4(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO10    CHI   R1,10                   OFFSET < 10                @03C\n         JL    CFO1                    YES\n         MVC   1(2,R10),DBLWD+3        MOVE 2-DIGIT OFFSET        @06C\n         LA    R10,3(R10)              TO NEXT POS\n         J     CFCMA                   CONTINUE\nCFO1     LTR   R1,R1                   ANY OFFSET\n         JZ    CFCMA                   NO\n         MVC   1(1,R10),DBLWD+4        YES, MOVE 1-DIGIT OFFSET   @06C\n         LA    R10,2(R10)              TO NEXT POS\nCFCMA    MVI   0(R10),C','             DELIMITER\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,DSLENG               PICK UP LENGTH\n         CVD   R1,DBLWD                CONVERT\n         UNPK  DBLWD(3),DBLWD+4(4)     UNPACK\n         OI    DBLWD+2,C'0'            CLEAR SIGN\n         CHI   R1,100                  LENGTH < 100                @03C\n         JL    CFL10                   YES\n         MVC   1(3,R10),DBLWD          NO, MOVE 3-DIGIT LENGTH\n         J     CFWRT                   CONTINUE\nCFL10    CHI   R1,10                   LENGTH < 10\n         JL    CFL1                    YES\n         MVC   1(2,R10),DBLWD+1        NO, MOVE 2-DIGIT LENGTH\n         J     CFWRT                   CONTINUE\nCFL1     MVC   1(1,R10),DBLWD+2        MOVE 1-DIGIT LENGTH\nCFWRT    MVC   COMMENTE,DSCOMMT        COPY DSECT DESCRIPTION      @05A\n         JAS   R9,PUNCH                PUNCH THE RECORD\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C\n         LA    R11,DSECTL(R11)         TO NEXT FIELD ENTRY\n         J     CENDFTB                 LOOP\nENDSTMT  MVC   MNEMONIC(L'C_END),C_END   COPY END TO MNEMONIC\n         MVC   OPNDS(8),ENDLBLNM       POINT END STMT TO BEGIN LOC\n         JAS   R9,PUNCH                WRITE THE RECORD\n         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC              @20C\n         MVC   PRT+34(3),C_END        COPY LITERAL END             @03A\n         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C\n         L     R12,CTLSTRT                                         @04A\n         STORAGE RELEASE,LENGTH=22200,ADDR=(12)  FREE CTLBL TABLE  @06C\n         L     R12,DATSTRT                                         @04A\n         STORAGE RELEASE,LENGTH=1801,ADDR=(12) FREE DATA ONLY TBL  @06C\nCLOSES   CLOSE (SYSLIB,,SYSPUNCH,,SYSPRINT,,SYSIN,,LOADMAP,,REGUSE),   X\n               MODE=31\n         PR                            RETURN TO CALLER            @03A\n         DELETE EPLOC=DATAAD1                                      @08C\n         DELETE EPLOC=DATAAD2                                      @08A\n         DELETE EPLOC=DATAAD3                                      @10A\n         DELETE EPLOC=SFTAD                                        @05A\n         DROP  R11\n*\n*                 *** DATA AND WORK AREAS ***\n         DC    CL24'HDISASM VARIABLES ==>  '   EYE CATCHER         @06A\nDATASTR  DC    A(HDISASM)\nASM1AD   DC    V(HDISASM1)             ADDRESS OF HDISASM1         @03A\nASM2AD   DC    V(HDISASM2)             ADDRESS OF HDISASM1         @03A\nBUFAD    DS    F                       SYSLIB BUFFER ADDR\nSYMTBAD  DS    F                       SYMBOL TABLE ADDRESS\nCURRSYM  DS    F                       CURRENT SYM TBL ADDR\nENDSYM   DC    F'304000'        SYM TBL END ADDR (32000 ENTRIES)   @04C\nRLDTBL   DS    F                       ADDR OF RLD TABLE\nCURRLD   DS    F                       CURR RLD TBL ADDR\nENDRLD   DC    F'96000'                RLD TBL END ADDR\nPROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT\nCES9     DS    F                       CESDREC RETURN ADDR\nBL9      DS    F                       BLDL RTN RETURN ADDR\nCR9      DS    F                       CTRLRECS RETURN ADDR\nCT9      DS    F                       CNTLRECS RETURN ADDR\nRL9      DS    F                       RLDRECS RETURN ADDR\nTX9      DS    F                       TXTFMT RETURN ADDR\nGEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE               @03A\nGEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE               @03A\nGRDMVREX MVC   RESIDENT(1),0(R2)       EXECUTED MOVE\nGRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE               @03A\nCLASSOFF DC    F'0'                    OFFSET TO CLASS             @06A\nRLD_PTR  DC    F'0'                    CURRENT RLD ENTRY ADDRESS   @05A\nADJUST   DC    H'0'\nP0       DC    P'0'                    CONSTANT 0\nP1       DC    P'1'                    CONSTANT 1\nP10      DC    P'10'                   CONSTANT 58\nP58      DC    P'58'                   CONSTANT 58\nJFCBAD   DS    0F                      DCB EXIT LIST\n         DC    X'87'                   RDJFCB, END OF LIST\n         DC    AL3(JFCB)               ADDRESS OF JFCB READ AREA\nJFCB     DS    CL176                   JFCB\nSYMHDR1  DC    C'0     SYMBOL        TYPE   IND  ADDR'             @05C\n         DC    C'    SEG  LRID   LENG  ESDID  RSECT  AMODE  RMODE'\n         DC    CL64' '\nSYMHDR2  DC    C'0     SYMBOL     TYPE  IND  STA   ADDR    LENG  ' @05A\n         DC    CL100' '                                            @05A\n*\n*\n*\nRLDHDR   DC    C'0     RELPTR  POSPTR      TYPE     LEN'\n         DC    C'    DIR   ADDR'\n         DC    CL90' '\n*\n*\n*\nPH1LBL   DC    CL121'1***** PHASE 1 LABEL TABLE *****'\nPH1HDR   DC    CL121'0  ADDR TYPE  SYMBOL      LEN  REFERENCE'     @05C\n*\n*\n*\nX0F00    DC    X'0F00'                 CONSTANT ZEROS\nNOCNTRL  DC    C'MEMBER AND CSECT MUST BE ENTERED VIA SYSIN'\nOVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'\nNOMEM    DC    C'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM'\nINVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'\nINVCSECT DC    C'SPECIFIED CSECT NOT FOUND IN MEMBER'\nFULLSYM  DC    C'SYMBOL TABLE FULL: OVER 16000 ENTRIES'            @04C\nFULLRLD  DC    C'RLD TABLE FULL: OVER 3000 ENTRIES'\nNOSTOR   DC    CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'       @04A\nCURRAMOD DS    XL1                        REQUESTED CSECT AMODE    @04A\nCURRRMOD DS    XL1                        REQUESTED CSECT RMODE    @04A\nRESIDENT DC    CL8' '                  RLD RESIDENT CSECT NAME     @04A\nSYMBPTS2 DC    CL8' '                  RLD SYMBOL POINTED TO       @04A\nESDSYMB  DC    CL8' '                  ESD SYMBOL NAME             @04A\nESDOWNER DC    CL8' '                  ESD OWNING CSECT NAME       @04A\nTEXTADDR DC    A(0)                       ADDRESS OF CSECT TEXT    @04A\nTEXTENDA DC    A(0)                  ADDRESS OF LAST BYTE OF TEXT  @04A\nTEXTLENG DC    A(0)                       TOTAL TEXT LENGTH        @04A\nCURRTEXT DC    A(0)                  ADDRESS OF CURRENT TEXT BYTE  @04A\nTMPCLBL  DS    A(0)                                                @06A\nIEWPLMH  DC    C'IEWPLMH'                                          @04A\nC_B_TEXT DC    CL8'B_TEXT  '                                       @04A\nC_ESD    DC    CL8'ESD     '                                       @04A\nC_RLD    DC    CL8'RLD     '                                       @04A\nC_TEXT   DC    CL8'TEXT    '\nC_CSECT  DC    C'CSECT'\nC_END    DC    C'END  '\nC_ENTRY  DC    C'ENTRY'\nC_YREGS  DC    C'YREGS'\nC_SUPVR  DC    C'SUPVR'\nC_FLTPT  DC    C'FLTPT'\nC_ACON   DC    C'ACON'\nC_VCON   DC    C'VCON'\nC_LR     DC    C'LR'\nC_ED     DC    C'ED'\nC_SD     DC    C'SD'\nC_ER     DC    C'ER'\nC_PC     DC    C'PC'\nC_CM     DC    C'CM'\nC_WX     DC    C'WX'\nC_PR     DC    C'PR'\nCPRDISP  DC    C'PRDISP'\nASTERISK DC    C'***'\nCNULL    DC    C'NULL'\nCESTAB   DC    C'E/STAB'\nCQUEST   DC    C'????????'\nC_OL     DC    C'OL'\nCEXEC    DC    C'EXEC'\nCREFR    DC    C'REFR'\nCTEST    DC    C'TEST'\nCRENT    DC    C'RENT'\nCREUS    DC    C'REUS'\nCOVLY    DC    C'OVLY'\nCYES     DC    C'YES'\nCNO      DC    C'NO '\nCANY     DC    C'ANY'\nCEQU     DC    C'EQU'\nC31      DC    C'31 '\nC24      DC    C'24 '\nCDSECT   DC    C'DSECT'\nCPRCUM   DC    C'PRCUM '\nCUNRESV  DC    C'UNRESOLVED'\nCUNKNOWN DC    C' ??:'\nMSG01    DC    C'*** EXTERNAL SYMBOL TABLE ***'\nMSG02    DC    C'***** RLD INFO *****'\nMSG03    DC    C'DIRECTORY INFO FOR MODULE '\nMSG04    DC    C'TTR OF MODULE='\nMSG05    DC    C'CONCATENATION NBR='\nMSG06    DC    C'ALIAS INDIC='\nMSG07    DC    C'*** ALIAS ***'\nMSG08    DC    C'TTR, 1ST TXT RECD='\nMSG09    DC    C'TTR OF NOTE/SCATTER LIST='\nMSG10    DC    C'NBR NOTE ENTRIES='\nMSG11    DC    C'ATTRIBUTES 1='\nMSG12    DC    C'TOTAL LENGTH='\nMSG13    DC    C'LENGTH OF 1ST TXT RECD='\nMSG14    DC    C'E. P. ADDR='\nMSG15    DC    C'ATTRIBUTES 2='\nMSG16    DC    C'PAGE ALIGN REQRD'\nMSG17    DC    C'SSI PRESENT'\nMSG18    DC    C'SCTRLEN='\nMSG19    DC    C'TRANSLATE TBL LEN='\nMSG20    DC    C'ESD ID OF 1ST TXT='\nMSG21    DC    C'ESD ID CONTAINING E.P.='\nMSG22    DC    C'E.P. ADDRESS OF THIS MEMBER='\nMSG23    DC    C'REAL MEMBER NAME='\nMSG24    DC    C'SSI INFO='\nMSG25    DC    C'AUTH CODE='\nMSG26    DC    C'***** REAL MEMBER DIRECTORY INFO *****'\nMSG27    DC    C'***** T E X T *****'\nPOFSET   DC    F'0'                    OFFSET FOR TEXT PRINT\nMAPDB2   DC    CL8'MAPDB2  '                                      @05A\nMAPMVS   DC    CL8'MAPMVS  '                                      @05A\nMAPOMVS  DC    CL8'MAPOMVS '                                      @10A\nHDISSFTB DC    CL8'HDISSFTB'                                      @05A\nPRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE\n         ORG   PRTCHAR+C' '\n         DC    C' '\n         ORG   PRTCHAR+X'4A'      4/16/87  AC\n*        DC    X'4A4B4C4D4E'\n         DC    X'4A4B'\n         ORG   PRTCHAR+X'50'\n         DC    X'50'\n         ORG   PRTCHAR+X'5A'\n         DC    X'5A5B5C5D5E'\n         ORG   PRTCHAR+X'60'\n         DC    X'6061'\n         ORG   PRTCHAR+X'6A'\n         DC    X'6A6B6C6D6E6F'\n         ORG   PRTCHAR+X'7A'\n         DC    X'7A7B7C7D7E7F'    4/16/87\n         ORG   PRTCHAR+C'a'                                       @04A\n         DC    C'abcdefehi'                                       @04A\n         ORG   PRTCHAR+C'j'                                       @04A\n         DC    C'jklmnopqr'                                       @04A\n         ORG   PRTCHAR+C's'                                       @04A\n         DC    C'stuvwxyz'                                        @04A\n         ORG   PRTCHAR+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   PRTCHAR+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   PRTCHAR+C'S'\n         DC    C'STUVWXYZ'\n         ORG   PRTCHAR+C'0'\n         DC    C'0123456789'\n         ORG\n*\n*\n*\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X\n               RECFM=FB,LRECL=80\nSYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X\n               RECFM=FB,LRECL=80,EODAD=NOCTL\nSYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X\n               RECFM=U,NCP=1\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=121\nLOADMAP  DCB   DSORG=PS,MACRF=PM,DDNAME=LOADMAP,                       X\n               RECFM=FBA,LRECL=121\nREGUSE   DCB   DSORG=PS,MACRF=PM,DDNAME=REGUSE,                        X\n               RECFM=FBA,LRECL=121\nSAVELNG  DS    F        *** DEBUG ***\nSAVEADR  DS    F        *** DEBUG ***\nSAVETXT  DS    F        *** DEBUG ***\n***********************************************************************\n*  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE                   *\n***********************************************************************\nPARMAREA DS    0F          READLMOD PARAMETER AREA\nPRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DC    CL8' '         MEMBER NAME\nPRMCSECT DC    CL8' '         CSECT NAME\nPRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                                TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                                NAME, OR MAP\nPRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                             BEFORE A FIRST CALL FOR A SET OF DATA,\n*                             THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                             ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                             RETURNED. CURRENT VALUE IS RETURNED BY\n*                             THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (ZERO MEANS\n*                             MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                             WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                             4 MEANS THE DATA IN THE BUFFER IS ALL\n*                             THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DC    A(0)        ADDRESS OF THE DATA BUFFER HEADER. THE\n*                             HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                             THE DATA ELEMENTS.\nPRMERROR DS    CL1         ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '           SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'           PARAMETER ERROR\nPRMAC_ERR EQU  C'E'           IEWBIND MACRO ERROR OCCURRED\n****************************************************************\n*\n* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED\n* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED\n* WITH ALL OTHER PROGRAMS.\n*\n****************************************************************\n*\n         DC    C'COMMPARM'             EYECATCHER\n         DS    0D\nCOMMPARM EQU   *                       COMMON AREAS\nTRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TABLE\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nDATAAD1  DS    F                       @ MAPDB2                    @08C\nDATAAD2  DS    F                       @ MAPMVS                    @08A\nDATAAD3  DS    F                       @ MAPOMVS                   @10A\nSFTAD    DS    F                       @ SYSTEM FUNCTION TABLE     @05A\nS_DC     DC    C'DC'\nS_NI     DC    C'NI'\nS_STM    DC    C'STM'\nS_DSN    DC    C'DSN'\nS_BPX    DC    C'BPX'\nS_ON     DC    C'On '\nS_OFF    DC    C'Off '\nS_USING  DC    C'USING'\nTXTOFST  DS    0F\n         DS    X\nTXTOFSET DS    XL3                     OFFSET TO TEXT BYTE\nENDOFST  DS    F                       DSECT ENDING OFFSET\nPUNCHDCB DC    A(SYSPUNCH)             @ SYSPUNCH DCB\nPRINTDCB DC    A(SYSPRINT)             @ SYSPRINT DCB\nREGUSDCB DC    A(REGUSE)               @ REGUSE   DCB\nINDCB    DC    A(SYSIN)                @ SYSIN DCB\nCSECT    DC    CL8' '                  SPECIFIED CSECT NAME\nESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT\nENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE\nLINECT   DC    PL2'0'                  PRINT LINE COUNTER\nSTART    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC\nEND      DC    F'0'                    CSECT END ADDRESS\nCSTLENG  DC    F'0'                    LENGTH OF SPECIFIED CSECT\nLBLTBL   DS    F                       @ LABEL TABLE\nCURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR\nENDLBL   DS    F                       @ END OF LABEL TBL\nTXTSTRT  DS    F                       @ TEXT STORAGE AREA\nTXTEND   DS    F                       @ END OF TEXT AREA\nTXTCURR  DS    F                       @ CURRENT TEXT LOC\nDTBSTRT  DC    A(HIVAL)                DSECT TABLE START ADDR\nDTBCURR  DC    F'0'                    DSECT TABLE CURRENT ENTRY ADDR\nDTBEND   DC    F'0'                    DSECT TABLE END ADDR\nUSGSTRT  DC    A(HIVAL)                USING TABLE START ADDR\nUSGCUR   DC    F'0'                    USING TABLE CURRENT ADDR\nUSGEND   DC    F'0'                    USING TABLE END ADDR\nDATSTRT  DS    F                       DATA ONLY TABLE ADDR\nDATOCUR  DS    F                       CURRENT DATA ONLY ADDR\nDATOEND  DS    F                       END OF DATA ONLY TABLE\nFLDTBL   DS    F                       @ FIELD TABLE\nCURRFLD  DS    F                       CURRENT FIELD ENTRY ADDR\nENDFLD   DS    F                       @ END OF FIELD TBL\nBLANX    DC    CL18' '                 CONSTANT BLANKS             @03C\nFLPTASM  DC    X'00'                   FLOATING POINT INDICATOR\nPRIVASM  DC    X'00'                   PRIVILEGED INDICATOR\nUSERR    DC    X'00'                   ERROR INDIC FOR HDISASM1\nNBRLBLS  DC    H'0'                    NBR LABELS FROM HDISASM1\n*\n*\n*\nWORKREC  DS    0CL80                   DISASSEMBLY WORK AREA\nNAME     DS    CL8                     NAME\n         DS    CL1\nMNEMONIC DS    CL6                     INSTRUCTION MNEMONIC        @04C\nOPNDS    DS    CL30                    1ST OPERAND\nOPNDSSP  DS    CL1                                                 @04C\nCOMMENTS DS    CL25                    COMMENT\nCOL72    DS    CL1\nSEQNBR   DS    CL8                     CARD SEQ NBR\n         ORG   MNEMONIC+4                                          @05A\nMNEMONI2 DS    CL6                     EQU MNEMONIC                @05A\n         ORG   COMMENTS-3                                          @05A\nCOMMENTE DS    CL28                    COMMENT                     @05A\n         ORG\nWORKREC2 DS    CL80                    SECOND LINE                 @04A\n         DS    CL30                                                @04A\nCOMTREC  DS    0CL80                                               @27A\n         DC    60C'*'                                              @27A\n         DC    CL20' '                                             @27A\n*\n*\n*\nPRTLINE  DS    0CL121                  PRINT LINE\nPCC      DC    C'1'                    CARRIAGE CONTROL\nPRT      DC    CL120' '                PRINT DATA\nCARDNO   DC    PL4'0'                  OUTPUT CARD NBR\n*\n*\n*\n         DS    0F\nBLDLIST  DS    0CL62                   BLDL LIST\n         DC    H'1'                    ONE ENTRY\n         DC    H'58'                   LENGTH OF ENTRY\nMEMBER   DC    CL8' '                  MEMBER NAME\nTTRMOD   DC    XL3'000000'             TTR OF MODULE\nCCAT     DC    XL1'00'                 CONCATENATION NUMBER\n         DC    XL1'00'\nALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR\n*                           80=ALIAS\nTTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD\n         DC    XL1'00'\nTTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST\nNNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST\nATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1\n*                           80=RENT\n*                           40=REUS\n*                           20=OVERLAY\n*                           10=UNDER TEST\n*                           08=ONLY LOADABLE\n*                           04=SCATTER FORMAT\n*                           02=EXECUTABLE\n*                           01=ONE TXT, NO RLD RECORDS\nATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2\n*                           80=CANNOT BE REPROCESSED BY LKED E\n*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO\n*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO\n*                           10=CONTAINS NO RLD RECORD\n*                           08=CANNOT BE REPROCESSED BY LKED\n*                           04=CONTAINS TESTRAN SYMBOLS\n*                           02=CREATED BY LKED\n*                           01=REFR\nTOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD\nLENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD\nLKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR\nATTR2    DC    XL1'00'                 ATTRIBUTES 2\n*                           80=PROCESSED BY OS/VS LKED\n*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE\n*                           10=SSI PRESENT\n         DC    XL2'0000'\nSCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH\nTTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH\nSCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD\nSCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT\nALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME\nALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS\nSSI      DS    XL4'00000000'           SSI BYTES\nCODSTRT  DS    F                       CODE ONLY TABLE ADDR        @03A\nCODOCUR  DS    F                       CURRENT CODE ONLY ADDR      @03A\nCODOEND  DS    F                       END OF CODE ONLY TABLE      @03A\nCTLSTRT  DS    F                       CTLBK ONLY TABLE ADDR       @04A\nCTLOCUR  DS    F                       CURRENT CTLBK ONLY ADDR     @04A\nCTLOEND  DS    F                       END OF CTLBK ONLY TABLE     @04A\nENDDSCT  DC    X'FC00'                                             @09A\nAUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH\nAUTHCOD  DC    XL1'00'                 AUTH CODE\nINSTENT  DS    0CL11                   CURRENT INSTRUCTION ENTRY\nINAME    DS    CL6                     INSTR NAME (MNEMONIC)\nITYPE    DS    XL1                     INSTRUCTION TYPE\nICLASS   DS    XL1                     INSTRUCTION CLASS\nIEDT     DS    XL1                     INSTRUCTION EDITS\nICCSET   DS    XL1                     TYPE CONDITION CODE SET\nINLNG    DS    XL1                     INSTRUCTION LENGTH\nIOLNG    DS    XL1                     OPERAND LENGTH\nTEXT     DS    XL48                    CURRENT TEXT\n*\nDEBUGXX  DC    C'12345678'   DEBUG\n         DC    C'9ABCDEFG'   DEBUG\nXZROS    DC    16X'00'                 CONSTANT ZEROS\n*\nUDSCTAD  DC    A(0)                    @ USER DEFINED DSECT\nHIVAL    DC    4X'FF'                  CONSTANT X F'S\nSIMAPOFT DC    H'0'                    OFFSET\nSIMAPB   DC    X'00'                   BIT MASK\nXOFST    DC    XL3'000030'   ** DEBUG ** RELATIVE OFFSET\nCOMMENT  DC    CL88' '                 SAVE COMMENT FILED\nCCOMMENT DC    CL28' '                 CURRRENT COMMENT  LONG\n         DC    CL20' '                 RESERVED ??\nBD15     DS    A                       REGISTER SAVE AREA\nOPNDWK   DS    CL80                    OPERAND BUILD AREA\nOWSTRT   DC    A(OPNDWK)               @ OPERAND WORK AREA\nSXAPO    DC    C'X'''\nFLAG1    DC    X'00'\nFLGHEX4  EQU   X'80'                   HEX4 FLAG\nFLGPSA   EQU   X'40'                   PSA  MAPPING\nFLGIXREG EQU   X'20'                   INDEX REGISTER IS ZERO\nFLGFOUND EQU   X'10'                   VARIABLE NAME FIND\nFLGUDSCT EQU   X'08'                   USER DEFINED DSECT MAPPING\nFLGNF    EQU   X'04'\nPRTABL   DS    CL9                     PRINTABLE HEX WORK\nSIDSC    DC    CL5'  '                 CURRENT DSECT NAME          @18A\n         DC    C'BASETBL ' ** DEBUG **\nBASES    DC    XL176'00'    11*16      PROGRAM BASE REGISTER TBL   @15C\n         DC    CL6'DSECTS'                                         @23A\nDSREGTBL DC    CL13'R0 '                                           @23A\n*                   0123456789012                                  @23A\n*                   RXX TXXXXX                                     @23A\nDSREGL   EQU   5                       LENGTH OF DSECT NAME        @23A\nDSREGEL  EQU   13                      LENGTH OF DSECT TABLE ENTRY @23C\n         DC    CL13'R1 '                                           @23A\n         DC    CL13'R2 '                                           @23A\n         DC    CL13'R3 '                                           @23A\n         DC    CL13'R4 '                                           @23A\n         DC    CL13'R5 '                                           @23A\n         DC    CL13'R6 '                                           @23A\n         DC    CL13'R7 '                                           @23A\n         DC    CL13'R8 '                                           @23A\n         DC    CL13'R9 '                                           @23A\n         DC    CL13'R10'                                           @23A\n         DC    CL13'R11'                                           @23A\n         DC    CL13'R12'                                           @23A\n         DC    CL13'R13'                                           @23A\n         DC    CL13'R14'                                           @23A\n         DC    CL13'R15'                                           @23A\n         DC    CL13'     PSA'                                      @23A\n*\n*\nCOMMEND  EQU   *\n         COPY HDISTD\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* EXTERNAL SYMBOL DICTIONARY (ESD) BUFFER:                            *\n*    ESDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    ESDENTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nESDHEADR DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER\nESDHBUFI DS    CL8  BUFFER EYECATCHER.\nESDHBUFL DS    F    TOTAL BUFFER LENGTH INCLUDING THIS\nESDHVERS DS    AL1  VERSION OF BUFFER.\n         DS    AL3  RESERVED. MUST BE ZERO.\nESDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.\nESDHENTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER\nESDHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.\nESDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.\nESDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.\n*\nESDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES\nESDTYPE  DS    CL2  TYPE OF ESD ENTRY.\nESDTYPEQ DS    CL2  ESD RECORD TYPE QUALIFIER\nESDNAMES DS    CL1  NAME SPACE OF SYMBOL\nESDSCOPE DS    CL1  SCOPE OF THE SYMBOL\nESDNAME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD\nESDNAMEC DS    H      LENGTH OF THE NAME.\nESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)\nESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS\nESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION\nESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED\nESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK\nESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED\nESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS\n         DS    CL1\nESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION\nESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME\nESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF\n*                        THE SYMBOL RESIDES. FOR LD, PR.\nESDLENG  DS    F    LENGTH OF DEFINED ELEMENT\nESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR\nESDUSBLT DS    XL1  REUSABILITY OF SD\nESDAMODE DS    XL1  ADDRESSING MODE OF SD\nESDRMODE DS    XL1  RMODE OF SD\nESDRECFM DS    H    RECORD FORMAT FOR CLASS\nESDLOADF DS    BL1  LOAD ATTRIBUTES\nESDRO    EQU   X'80'   READ-ONLY\nESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE\nESDMOVE  EQU   X'20'   MOVEABLE\nESDSHR   EQU   X'10'   SHAREABLE\nESDDEFER EQU   X'08'   DEFERRED LOAD\nESDBINDF DS    BL1  BIND ATTRIBUTES\nESDGEND  EQU   X'80'   BINDER-GENERATED\nESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE\nESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS\nESDDESCD EQU   X'10'   DESCRIPTIVE DATA\nESDINIT  EQU   X'08'   HAS PART INITIALIZERS\nESDFILLX EQU   X'04'   ILL HAS BEEN SET\nESDPADST EQU   X'02'   CLASS HAS PADDING AT START\nESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY SYMBOL\nESDMETH  EQU   X'30'   BINDING METHOD\n*                        '00'B = CATENATE\n*                        '01'B = MERGE\n*                        '1-'B = RESERVED\nESDTXTTY EQU   X'0F'   TEXT TYPE\n*                        '0000'B = UNSPECIFIED\n*                        '0001'B = INSTRUCTIONS\n*                        '0010'B = DATA\n*                        '0011'B = TRANSLATOR DEFN\n         DS    XL1\nESDXATCL DS    H    LENGTH OF XATTR CLASS NAME\nESDXATCP DS    A    PTR TO EXTENDED ATTRIBUTES CLASS NAME\nESDXATOF DS    F    EXTENDED ATTRIBUTES OFFSET\nESDSEGMN DS    H    OVERLAY SEGMENT NUMBER OF SECTION\nESDREGN  DS    H    OVERLAY REGION NUMBER OF SECTION\nESDSIGN  DS    CL8  INTERFACE SIGNATURE\nESDAUTOC DS    BL1  AUTOCALL SPEC. APPLIES TO REFERENCES\nESDNVRCL EQU   X'80'      NEVERCALL WAS SPECIFIED\nESDMINOR EQU   X'40'      AUTOCALLED FROM LPA\nESDSTAT  DS    BL1  STATUS\nESDRESLV EQU   X'80'      SYMBOL IS RESOLVED\nESDACPRC EQU   X'40'      PROCESSED BY AUTOCALL\nESDINCLD EQU   X'20'      INCLUDE ATTEMPTED\nESDNOTFD EQU   X'10'      MEMBER NOT FOUND\nESDEXTRN EQU   X'08'      RESOLVED OUTSIDE MODULE\nESDNOCAL EQU   X'04'      NOCALL/NEVERCALL\nESDNOREF EQU   X'02'      NO STRONG REFERENCES\nESDLIBRY EQU   X'01'      SPECIAL CALL LIBRARY REQUESTED\nESDTGTL  DS    H    LENGTH OF THE TARGET.\nESDTGTP  DS    A    POINTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR\n*                      EXTERNAL REFERENCES.\n         DS    H\nESDCNTCL DS    H    LENGTH OF THE CLASS\nESDCNTCP DS    A    POINTS TO NAME OF CONTAINING CLASS\nESDELOFF DS    F    OFFSET WITHIN THE CLASS ELEMENT\nESDCLOFF DS    F    OFFSET WITHIN THE CLASS SEGMENT\n         DS    H\nESDADAL  DS    H    ASSOCIATED DATA LENG\nESDADAP  DS    A    POINTS TO ASSOCIATED DATA\n         DS    F\nESDPRTY  DS    F    BINDING SEQUENCE\nESDNTEND DS    0F\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* RELOCATION DICTIONARY (RLD) BUFFER:                                 *\n*    RLDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nRLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER             @04A\nRLDHBUFI DS    CL8  BUFFER EYECATCHER.                             @04A\nRLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS            @04A\nRLDHVER  DS    AL1  VERSION OF BUFFER.                             @04A\n         DS    XL3                                                 @04A\nRLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                   @04A\nRLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THIS BUFFER\nRLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA.             @04A\nRLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.             @04A\nRLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                 @04A\n*                                                                  @04A\nRLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLDHENTC TIMES\nRLD_TYPE DS     XL1  ADCON TYPE.                                   @04A\n*        EQU   X'10' BRANCH TYPE (V-CON)                           @04A\n*        EQU   X'20' NON-BRANCH TYPE (A-CON)                       @04A\n*        EQU   X'21' ADDRESS OF CLASS SEGMENT                      @04A\n*        EQU   X'30' PSEUDOREGISTER (Q-CON)                        @04A\n*        EQU   X'40' CLASS OR PRV LENGTH (CXD)                     @04A\n*        EQU   X'50' LOADER TOKEN                                  @04A\n*        EQU   X'60' RELATIVE IMMEDIATE TYPE                       @04A\n*        EQU   X'70' REFERENCE TO ENVIRONMENT                      @04A\n*        EQU   X'80' LONG_DISPLACEMENT 20-BIT DL/DH OFFSET (QY-CON)@04A\nRLD_STAT DS    XL1  ADCON RELOCATION STATUS.                       @04A\n*        EQU   X'01' REFERENCES AN UNRESOLVED SYMBOL               @04A\n*        EQU   X'02' REFERENCES A RESOLVED SYMBOL                  @04A\n*        EQU   X'03' REFERENCES A NONRELOCATABLE SYMBOL            @04A\nRLD_RESIDENT_CHARS  DS H   LENGTH OF THE RESIDENT.                 @04A\nRLD_RESIDENT_PTR    DS A   POINTER TO NAME OF SECTION (ADCON)      @04A\nRLD_ADCON_LENG      DS H   ADCON LENGTH                            @04A\nRLD_CLASS_CHARS     DS H   LENGTH OF THE RESIDENT CLASS NAME       @04A\nRLD_CLASS_PTR       DS A   POINTS TO NAME OF CLASS WHERE ADCON RESIDES\nRLD_ELEM_OFFSET     DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A\n*                          THE CONTAINING ELEMENT                  @04A\n*                          RLDRESPL=0: ELEMENT; RLDRESPL>0: PART   @04A\nRLD_CLASS_OFFSET    DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A\n*                          CLASS SEGMENT                           @04A\nRLDADCNB            DS XL1  ADCON BOUNDARY SPECIFICATION.          @04A\nRLD_BIND_ATTR       DS BL1  BIND ATTRIBUTES                        @04A\nRLDDIRS       EQU   X'80'   RELOCATION SIGN: '0' = POS; '1' = NEG  @04A\nRLDHOBST      EQU   X'40'   SET HIGH ORDER BIT FROM AMODE OF TARGET@04A\nRLDINTXT      EQU   X'20'   INTERNAL/EXTERNAL: '0' = INT; '1' = EXT@04A\nRLDHOBCH      EQU   X'10'   HIGH ORDER BIT CHANGED BY BINDER       @04A\nRLDPARTR      EQU   X'08'   ADCON LOCATED IN PART                  @04A\nRLD_XATTR_CLASS_CHARS DS H  LENGTH OF EXTENDED ATTR CLASS NAME     @04A\nRLD_XATTR_CLASS_PTR   DS A  POINTER TO EXTENDED ATTR CLASS NAME    @04A\nRLD_XATTR_OFFSET      DS F  EXTENDED ATTRIBUTES ELEMENT OFFSET     @04A\nRLD_NAME_SPACE        DS X  NAME SPACE OF REFERENCE                @04A\n*             EQU   X'00' TYPES 21, 40                             @04A\n*             EQU   X'01'    EXTERNAL REFERENCE (10, 20)           @04A\n*             EQU   X'02'    PSEUDOREGISTERS (30)                  @04A\n*             EQU   X'03'    PARTS (PR,PD) IN WRITEABLE STATIC     @04A\n                      DS X  RESERVED                               @04A\nRLD_TARGET_CHARS      DS H  LENGTH OF THE TARGET NAME              @04A\nRLD_TARGET_PTR        DS A  POINTER TO NAME STRING TO WHICH ADCON PTR\n                      DS XL2  RESERVED                             @04A\nRLD_RES_PART_CHARS    DS H  RESIDENT PART LENGTH                   @04A\nRLD_RES_PART_PTR      DS A  RESIDENT PART POINTER                  @04A\nRLDEND                DS 0F                                        @04A\n***********************************************************************\n* THE TWO FOLLOWING DSECT DESCRIBES THE CONTENT OF AN IEWBUFF         *\n* TEXT BUFFER                                                         *\n***********************************************************************\nTXTHEADR DSECT ,    DESCRIBE THE IEWBUFF TEXT BUFFER HEADER\nTXTHBUFI DS    CL8  BUFFER EYECATCHER.\nTXTHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS\nTXTHVER  DS    AL1  VERSION OF BUFFER.\n         DS    AL3\nTXTHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.\nTXTHENTC DS    F    NUMBER TEXT BYTES CONTAINED IN THIS BUFFER\nTXTHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.\nTXTHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.\nTXTHEND  DS    0F   BEGINNING OF TEXT AREA\n*\nTXTENTRY DSECT ,    DESCRIBES TEXT AREA\nTXTBYTE  DS    0C   TEXT BYTE. OCCURS TXTHENTC TIMES\n*\nHDISASM   CSECT\n*\nRLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE\nRLDENT   DS    0CL20                   11 BYTE ENTRIES\nRLDRP    DS    XL2                     RELOCATION POINTER\nRLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)\nRLDTYPE  DS    XL1                     TYPE\n*                    00=A-TYPE ADCON 4 BYTES\n*                    01=V-TYPE ADCON 4 BYTES\n*                    02=PSEUDO REGISTER DISPLACEMENT\n*                    03=PSEUDO REG CUMULATIVE DISPL\n*                    04=V-TYPE ADCON 8 BYTES\n*                    08=UNRESOLVED\nRLDLEN   DS    XL1                     LENGTH OF CONSTANT\nRLDDIR   DS    CL1                     RELOCATION DIRECTION, + OR\nRLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT\nRLDNAME  DS    CL8                     NAME FROM ASSOC ESD\nRLDESDTP DS    XL1                     TYPE FROM ASSOC ESD\n         DS    XL1\nHDISASM   CSECT\n*\n*\n*\nSYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY\nSYMENT   DS    0CL19                   19 BYTE ENTRIES\nEXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME\nTYPSYM   DS    XL1                     SYMBOL TYPE\n*                        00=SD (NAMED CSECT)\n*                        02=ER (EXTRN)\n*                        03=LR (ENTRY)\n*                        04=PC (UNNAMED CSECT)\n*                        05=CM (COM)\n*                        06=PR (PSEUDO REGISTER)\n*                        07=NULL\n*                        0A=WX (WXTRN)\n*                        0F=ENTAB OR SEGTAB\nSYMIND   DS    XL1                     INDICATOR\n*                        BIT 0 = MAP\n*                        BIT 1 = CHAIN\n*                        BIT 2 = INSERT\n*                        BIT 3 = DELETE/REPLACE\nSYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU\nSYMARMOD DS    XL1                     AMODE/RMODE\n*                       X'08' - RSECT; READ ONLY IF ON\n*                       X'04' - RMODE; ANY IF ONE, 24 IF 0\n*                       X'03' - AMODE 00,01 = 24, 10 = 31, 11 = ANY\nSYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)\nSYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR\nSYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR\n*                        0 FOR ER, WX, NULL\nSYMESDID DS    XL2                     ESD ID OF THIS ITEM\n         YREGS\n         END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HDISASM1": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x07\\x97\\x07\\x97\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 1943, "newlines": 1943, "modlines": 0, "user": "ASM"}, "text": "DIS1     TITLE '*** ASMH DISASSEMBLY PHASE 1 ***'\n* FUNCTION\n* ========\n* THIS SUB-PROGRAM IS CALLED BY HDISASM, AND IS PHASE 2 OF\n* THE DISASSEMBLY-H PROCESS. A COMMON DATA AREA IS DEFINED\n* IN HDISASM, AND PASSED TO THIS PROGRAM.\n*\n*    THE SYSIN FILE IS READ TO EXHAUSTION. USING CARDS ARE\n* REFORMATTED AND STORED IN A TABLE - UP TO 256 USING\n* STATEMENTS MAY BE ENTERED. DSECT CARDS MAY FOLLOW THE\n* USING STATEMENTS. WHEN USED, DSECT STATEMENTS ARE\n* REFORMATTED, AND BUILT INTO TABLES. A MAXIMUM OF 256 DSECTS\n* MAY BE ENTERED  DATA ONLY CARDS MAY BE INCLUDED BEFORE, BETWEEN,\n* OR AFTER DSECTS TO SHOW AREAS IN THE PROGRAETWHERE NO INSTRUCTIONS\n* OCCUR. UP TO 256 DATA ONLY AREAS MAY BE SPECIFIED.\n*\n*     AT EOF ON SYSIN, A PSEUDO DIS-ASSEMBLY PASS IS MADE USING\n* THE TEXT STORED BY HDISASM. ANY RESOLVABLE ADDRESS WITHIN THE\n* TEXT IS USED TO CREATE A NEW ENTRY IN THE LABEL TABLE, WHICH\n* WILL BE USED BY HDISASM2 IN THE ACTUAL DIS-ASSEMBLY PASS.\n*\n* THE USING CARDS FOR BASE REGISTERS ASSOCIATED WITH DSECT DEFINITIONS\n* MUST BE ENTERED AT SOME POINT AFTER THE DSECT CARDS HAVE BEEN\n* INCLUDED. USING CARDS FOR PROGRAM BASE REGISTERS MAY BE ENTERED\n* AT ANY POINT. THE USING CARD FORMAT IS:\n*       COL 1-5   : LITERAL 'USING'\n*       COL 6     : BLANK\n*       COL 7-12  : OFFSET TO BEGIN LOCATION FOR USING RANGE (HEX)\n*       COL 13    : BLANK\n*       COL 14-19 : OFFSET TO ENDING LOCATION FOR USING RANGE (HEX)\n*       COL 20    : BLANK\n*       COL 21    : BASE RESISTER TO BE USED (HEX, 1-F)\n*       COL 22    : BLANK\n*       COL 23    : TYPE, P=PROGRAM BASE, D=DSECT BASE\n*       COL 24    : BLANK\n*       COL 25-30 : INITIAL BASE REGISTER VALUE IF TYPE P (HEX)\n*       COL 25-32 : DSECT NAME IF TYPE D\n*\n*     A DSECT IS ENTERED USING A HEADER CARD,FOLLOWED BY\n* ONE OR MORE FIELD DEFINITION CARDS. ALL FIELD DEFINITION\n* CARDS MUST FOLLOW THE DSECT HEADER CARD. USING CARDS MAY\n* NOT BE INTERSPERSED WITH DSECT DEFINITIONS, BUT MAY PRECEDE\n* OR FOLLOW ANY DSECT.\n*     DSECT HEADER CARD FORMAT:\n*        COL 1-8    : DSECT NAME\n*        COL 9      : BLANK\n*        COL 10-14  : LITERAL 'DSECT'\n*        COL 15     : BLANK\n*        COL 16-19  : NUMBER OF FIELD CARDS TO FOLLOW (DECIMAL)\n*        COL 20     : BLANK\n*        COL 21-28  : MAIN DSECT NAME\n*\n*     DSECT FIELD CARD FORMAT:\n*        COL 1-12   : FIELD NAME\n*        COL 13     : BLANK\n*        COL 14-18  : OFFSET TO LEFT END OF FIELD (DECIMAL) 12345\n*        COL 19     : BLANK\n*        COL 20-22  : LENGTH OF FIELD IN BYTES (DECIMAL)    123\n*        COL 23     : BLANK\n*        COL 24-51  : COMMENT OR FILED DESCRIPTION (28 BYTES)\n*\n*     A DATA ONLY CARD IS USED TO DESIGNATE A RANGE OF OFFSETS\n* BETWEEN WHICH NO INSTRUCTIONS EXIST. USE OF THESE CARDS ELIMINATES\n* THE CHANCE THAT DATA ELEMENTS WILL BE TREATED AS INSTRUCTIONS\n* BETWEEN THE OFFSETS SPECIFIED. FORMAT IS:\n*        COL 1-4    : LITERAL 'DATA' , 'DATX/HEX4' 'HEX2'\n*        COL 5      : BLANK\n*        COL 6-11   : OFFSET TO BEGINNING OF AREA (HEX)\n*        COL 12     : BLANK\n*        COL 13-18  : OFFSET TO END OF AREA (HEX)\n*\n*     A CODE ONLY CARD IS USED TO DESIGNATE A RANGE OF OFFSETS\n* BETWEEN WHICH REALLY INSTRUCTIONS.   USE OF THESE CARDS ELIMINATES\n* THE CHANCE THAT INSTRUCTIONS WILL BE TREATED AS DATA BETWEEN THE\n* THE OFFSETS SPECIFIED. FORMAT IS:\n*        COL 1-4    : LITERAL 'CODE'\n*        COL 5      : BLANK\n*        COL 6-11   : OFFSET TO BEGINNING OF AREA (HEX)\n*        COL 12     : BLANK\n*        COL 13-18  : OFFSET TO END OF AREA (HEX)\n*\n*     USER LABEL CARDS ARE USED TO PERMIT SPECIFICATION OF\n* LABELS OTHER THAN THE AXXXXXX NAMES CREATED BY HDISASM. THEY\n* MAY APPEAR ANYWHERE IN THE SYSIN STREAM EXCEPT AS THE FIRST\n* CARD, OR WITHIN A DSECT DEFINITION.\n*        COL  1-5  : LITERAL 'ULABL'\n*        COL   6   : BLANK\n*        COL  7-18 : FIELD NAME\n*        COL   19  : BLANK\n*        COL 20-25 : OFFSET TO LEFT END OF AREA (HEX)\n*        COL   26  : BLANK\n*        COL 27-29 : FIELD LENGTH (DECIMAL)\n*\n*     LONG USER LABEL CARDS ARE USED TO PERMIT SPECIFICATION OF\n* LABELS OTHER THAN THE AXXXXXX NAMES CREATED BY HDISASM. THEY\n* MAY APPEAR ANYWHERE IN THE SYSIN STREAM EXCEPT AS THE FIRST\n* CARD, OR WITHIN A DSECT DEFINITION.\n*        COL  1-5  : LITERAL 'LLABL'\n*        COL   6   : BLANK\n*        COL  7-24 : FIELD NAME\n*        COL   25  : BLANK\n*        COL 26-31 : OFFSET TO LEFT END OF AREA (HEX)\n*        COL   32  : BLANK\n*        COL 33-35 : FIELD LENGTH (DECIMAL)\n*\n*     LONG USER LABEL CARDS ARE USED TO PERMIT SPECIFICATION OF\n* LABELS OTHER THAN THE AXXXXXX NAMES CREATED BY HDISASM. THEY\n* MAY APPEAR ANYWHERE IN THE SYSIN STREAM EXCEPT AS THE FIRST\n* CARD, OR WITHIN A DSECT DEFINITION.\n*        COL  1-5  : LITERAL 'FIELD'\n*        COL   6   : BLANK\n*        COL  7-12 : PROGRAM OFFSET\n*        COL   13  : BLANK\n*        COL 14-50 : DESCRIPTION (27 BYTES)\n*\n*     CTLBK CARDS ARE USED TO DEFINE THE USER DEFINE DSECTS WHICH\n* ARE RELATED TO EACH OTHER. THE DSECT FIELDS ARE ASSEMBLED INTO\n* LOAD MODULE HDISDSTB. FOR EXAMPLE CVT, PSA AND ETC\n*\n*        COL  1-5  : LITERAL 'CTLBK'\n*        COL   6   : BLANK\n*        COL   7   : @ OR !\n*        COL  8-12 : DSECT NAME\n*        COL   13  : BLANK\n*        COL 14-19 : OFFSET TO BEGINNING OF THE AREA (HEX)\n*        COL   20  : BLANK\n*        COL   21  : BASE RESISTER TO BE USED (HEX, 1-F)\n*\n*      DISASSEMBLY TABLES ARE SET UP IDENTICALLY TO THOSE USED BY\n* HDISASM2 FOR THE SIMULATED DISASSEMBLY PERFORMED IN THIS\n* MODULE WHEN ANY PROGRAM BASE REGISTER USING STATEMENTS\n* ARE ENTERED.\n*\n*     STORAGE IS OBTAINED FOR THE DSECT TABLE AND USING TABLE,\n* AND ADDRESSES OF THESE TABLES ARE STORED IN THE COMMON PARAMETER\n* AREA. USING AND DSECT CARDS ARE EDITED, REFORMATTED, AND PLACED\n* IN THE APPROPRIATE TABLES. IF ANY ERRORS ARE FOUND, THEY ARE\n* PRINTED, AND THE DISASSEMBLY WILL BE TERMINATED ON RETURN\n* TO HDISASM.\n*\n*     STORAGE IS OBTAINED FOR THE LABEL TABLE, AND A SIMULATED\n* DIS-ASSEMBLY IS PERFORMED TO CREATE LABEL TABLE ENTRIES FOR\n* LABELS WHICH WILL BE GENERATED FOR BASE-DISPLACEMENT ADDRESSES\n* BY HDISASM2. ON RETURN TO DISASM, THESE LABELS WILL BE SORTED\n* WITH EXTERNAL SYMBOL AND RLD LABELS TO FORM THE FINAL LABEL\n* TABLE TO BE USED BY HDISASM2.\n*\n* AUTHOR R THORNTON - FEB 1978\n* CHANGE LOG :\n* 01.  REMOVE THE RESTRICTION OF USING R0 BASE REGISTER TO\n*      REFERENCE PSA DATA AREA DSECT          ALBERT CHENG NOV 1987\n*\n* 02.  FIX FORMATTING BRANCH INSTRUCTION\n*                                             ALBERT CHENG SEP 1991\n* 03.  SUPPORT NEW ASSEMBLER INSTRUCTION\n*                                             ALBERT CHENG JUN 1992\n* 04.  SUPPORT RRE2, SS3 AND RI INSTRUCTION\n*                                             ALBERT CHENG JAN 2007\n* 05.  A) SUPPORT RL, RSE AND RSI INSTRUCTIONS\n*      B) FORMAT BC AND JC INSTRUCTIONS WITH EXTENDED MNEMONICS\n*      C) FORMAT RI OPERAND WITH ADDRESS LABEL\n*      D) USE NEW ASSEMBLER INSTRUCTION SUCH AS AHI, J AND ETC\n*                                             ALBERT CHENG APR 2012\n* 06. USE R4 AS DATA REGISTER AND NO CODE REGISTER\n*                                             ALBERT CHENG JUL 2013\n*\n* 07. ADD CODE STATEMENT TO AVOID AN INSTRUCTION IS TREATED AS\n*     DATA\n*                                             ALBERT CHENG OCT 2013\n* 08. SUPPORT CTLBK STATEMENT\n*     DOES NOT GENERATE LABEL FOR USING STATEMENT\n*                                             ALBERT CHENG MAR 2014\n* 09. A) EACH DSECT ENTRY HAS 28 BYTES DESCRIPTION TO MAKE\n*        MORE DE-CODE SOURCE MORE MEANINGFUL\n*     B) ADD DATX STATEMENT TO FORMAT A DATA STRING AS HEXIDECIMAL\n*     C) ENHANCE CTLBK STATMENT TO SEARCH\n*         1)  @XXXXX SEARCH GLOBAL MAPPING WHERE XXXXX IS THE\n*                    PRE-COMPILE GLOBAL DSECT\n*         2)  $XXXXX SEARCH LOCAL MAPPING WHERE XXXXX IS THE\n*                    INSTREAM DSECT TABLE\n*                                             ALBERT CHENG AUG 2015\n* 10. A) CHANGE LABEL TABLE SIZE FROM 16 TO 20\n*     B) CHANGE DSECTD TABLE SIZE FROM 39 TO 45\n*     C) EXTEND ULABEL LENGTH FROM 8 TO 12\n*     D) EXTEND THE LENGTH OF DSECT FIELD NAME FROM 8 TO 12\n*                                             ALBERT CHENG SEP 2015\n* 11. A) FIX RXY DISPLACEMENT\n*     B) SUPPORT RIE INSTRUCTION\n*     C) ADD OPERAND LENGTH TO OPCODE TABLE\n*                                             ALBERT CHENG JUL 2016\n* 12. A) EXTEND THE DISPLACEMENT OF DSECT FIELD FROM 4 DIGITS\n*        5 DIGITS.\n*                                             ALBERT CHENG SEP 2016\n* 13. A) REDEFINE\n*                                             ALBERT CHENG DEC 2016\n*\n* 14. A) SUPPORT RRF/RSA INSTRUCTION SETS\n*                                             ALBERT CHENG JUL 2017\n*\n* 15. A) FORMAT ASCII & FIELD DESCRIPTION\n*                                             ALBERT CHENG DEC 2018\n********************************************************************\n*                                                                *\n* CHECK FOR PRIVILEGED AND/OR FLOATING POINT INSTRUCTION OPTION. *\n* IF THESE INSTRUCTIONS ARE NOT TO BE ASSEMBLED, CLEAR THEIR     *\n* INSTRUCTION TABLE ENTRIES.                                     *\n*                                                                *\n******************************************************************\n*\nHDISASM1 CSECT\nHDISASM1 RMODE ANY\nHDISASM1 AMODE 31\n         J     BEGIN                                              @05A\n         DC    C'HDISASM1'              PROGRAM NAME              @05A\n         DC    C'01.13'                 VERSION NUMBER            @13C\n         DC    C'&SYSDATE &SYSTIME'     ASSEMBLER DATE & TIME     @05A\nBEGIN    BAKR  R14,0                   SAVE RSA IN LINKAGE STACK  @05A\n         LARL  R4,DATAASM1             SET R4 TO DATA REGISTER    @06A\n         USING DATAASM1,R4                                        @06A\n         LR    R5,R1                   GET PARM FIELD ADDRESS\n         USING COMMPARM,R5\n*        L     R0,CODSTRT\n*        L     R2,CODOCUR\n*        DC    X'0000'\n         CLI   FLPTASM,1               FLOATING POINT INSTR O.K.\n         JE    TSTPRIV                 YES\n*        LRL   R12,SGLOPAD             POINT TO OP-CODE TBL\n         L     R12,SGLOPAD             POINT TO OP-CODE TBL\nTSTOPND  CLI   0(R12),X'FF'            END OF TBL\n         JE    TSTPRIV                 YES\n         TM    ICLASS-INSTENT(R12),FLTPT IS IT FLOATING POINT\n         JZ    FLPSTP                  NO\n         XC    0(SGOPLEN,R12),0(R12)   CLEAR ENTRY\nFLPSTP   AHI   R12,SGOPLEN             TO NEXT ENTRY\n         J     TSTOPND                 LOOP THRU TABLE\nTSTPRIV  CLI   PRIVASM,1               PRIVILEGED INSTR O.K.\n         JE    GETUSGTB                YES\n*        LRL   R12,SGLOPAD             POINT TO OP-CODE TBL\n         L     R12,SGLOPAD             POINT TO OP-CODE TBL\nTTOPND   CLI   0(R12),X'FF'            END OF TABLE\n         JE    CKDBLS                  YES\n         TM    ICLASS-INSTENT(R12),PRIV PRIVILEGED INSTR\n         JZ    PRIVSTP                 NO\n         XC    0(SGOPLEN,R12),0(R12)   YES, CLEAR ENTRY\nPRIVSTP  AHI   R12,SGOPLEN             TO NEXT ENTRY\n         J     TTOPND                  LOOP THRU TABLE\n*KDBLS   LRL   R12,DBLOPAD             @ 2-BYTE OP-CODE TBL\nCKDBLS   L     R12,DBLOPAD             @ 2-BYTE OP-CODE TBL\nCKDBND   CLI   0(R12),X'FF'            END OF TBL\n         JE    GETUSGTB                YES\n         TM    ICLASS-INSTENT+2(R12),PRIV PRIVILEGED OP-CODE\n         JZ    DBSTP                   NO\n         XC    0(DGOPLEN,R12),0(R12)   YES, CLEAR ENTRY\nDBSTP    AHI   R12,DGOPLEN             TO NEXT ENTRY\n         J     CKDBND                  LOOP THRU TABLE\n*\n******************************************************************\n*                                                                *\n* GET STORAGE FOR USING AND DSECT POINTER TABLES.                *\n* 256 ENTRIES                                                    *\n* SIZE OF USING TABLE ENTRY 12                                   *\n* SIZE OF USING TABLE IS 256*11 = 2816 + 48 = 2864               *\n* 48 BYTES RESERVED FIELD                                        *\n******************************************************************\n*\n*ETUSGTB GETMAIN R,LV=2864             GET STORAGE FOR USING TABLE\n*ETUSGTB LA    0,2864                  GETMAIN LENGTH             @06A\nGETUSGTB LA    0,3632                  GETMAIN LENGTH             @06A\n         OILH  R1,X'8000'              INDICATE GETMAIN           @06A\n         SVC   10                      GETMAIN                    @06A\n         MVI   0(R1),X'FF'             SET TABLE END INDIC\n         ST    R1,USGSTRT              SAVE TABLE START ADDR\n         ST    R1,USGCUR               SET TABLE CURRENT ADDR\n         AHI   R1,2816                 COMPUTE TABLE END ADDR\n         ST    R1,USGEND               SAVE USING TABLE END ADDR\n         L     R2,INDCB                GET SYSIN DCB ADDR\n         LARL  R1,EOFCARD              GET EOF ADDR               @06A\n         STCM  R1,7,33(R2)             SET EOF ADDR IN DCB\n*        GETMAIN LV=2864               GET STORAGE FOR DSECT TABLE\n*        STORAGE OBTAIN,LENGTH=2864,LOC=24,COND=NO\n*        LHI   R0,2864                 GETMAIN LENGTH             @09C\n         LHI   R0,4912                 GETMAIN LENGTH             @09C\n         OILH  R1,X'8000'              INDICATE GETMAIN           @06A\n         SVC   10                      GETMAIN                    @06A\n         MVI   0(R1),X'FF'             SET TABLE END ADDR\n         ST    R1,DTBSTRT              SAVE DSECT TABLE START ADDR\n         ST    R1,DTBCURR              SAVE DSECT TABLE CURRENT ADDR\n         AHI   R1,2816                 COMPUTE TABLE END ADDR\n         ST    R1,DTBEND               SAVE DSECT TABLE END ADDR\n         L     R1,INDCB                @ SYSIN DCB\n         TM    48(R1),X'10'            IS IT OPEN\n         JZ    EOFCARD                 NO\n*\n******************************************************************\n*                                                                *\n* READ SYSIN CARDS, AND DISTRIBUTE TO THE APPROPRIATE PROCESSING *\n* ROUTINE: USINGS, DSECTS, DATAS, CODES, CTLBKS OR ULABLS        *\n* DETECT ANY ERRORS AND PRINT ALL CARDS WITH MESSGAES AS         *\n* NECESSARY.                                                     *\n*                                                                *\n******************************************************************\n*\nRDCARD   DS    0H                      *** PROCESS SYSIN CARDS ***\n         L     R1,INDCB                GET SYSIN DCB ADDR\n         GET   (1)                     READ NEXT CARD\n         MVC   WORKREC,0(R1)           MOVE IT TO WORK AREA\n         CLI   F1SW,X'01'              FIRST TIME SWITCH           @06A\n         JE    MVPRT                   BRANCH IF NOT FIRST TIME    @06A\n         MVI   F1SW,X'01'              SET FIRST TIME SWITCH       @06A\n         MVI   PCC,C'1'                SET SKIP TO HEAD\n         MVC   PRT+10(26),U20\n         JAS   R9,PRINT                GO PRINT\nMVPRT    MVC   PRT(80),WORKREC         CARD TO PRINT\n         LARL  R9,RCCKERR              GET RETURN ADDRESS          @06C\n         CLI   WORKREC,C'*'            COMMENT CARD ?              @13A\n         JE    RDCARD                  SKIP IF YES                 @13A\n         CLC   S_EOD,WORKREC           IS IT END OF DATA  '/*'     @11A\n         JE    EOFCARD                 YES                         @11A\n         CLC   S_EOJ,WORKREC           IS IT END OF DATA  '//'     @11A\n         JE    EOFCARD                 YES                         @11A\n         CLC   S_USING,WORKREC         IS IT A USING CARD\n         JE    USINGS                  YES\n         CLC   WORKREC+9(5),S_DSECT    IS IT A DSECT HEADER\n         JE    DSECTS                  YES\n         CLC   S_DATA,WORKREC          IS IT DATA ONLY CARD\n         JE    DATAS                   YES\n         CLC   S_DATX,WORKREC          IS IT DATX ONLY CARD        @09A\n         JE    HEX4                    YES                         @09A\n         CLC   S_HEX4,WORKREC          IS IT HEX4 ONLY CARD        @13A\n         JE    HEX4                    YES                         @13A\n         CLC   S_HEX2,WORKREC          IS IT HEX2 ONLY CARD        @13A\n         JE    HEX2                    YES                         @13A\n         CLC   S_ASCII,WORKREC         IS IT CODE ASCII CARD       @15A\n         JE    ASCII                   YES                         @15A\n         CLC   S_CODE,WORKREC          IS IT CODE ASCII CARD       @07A\n         JE    CODES                   YES                         @07A\n         CLC   S_ULABL,WORKREC         IS IT A USER LABEL\n         JE    ULABLS                  YES\n         CLC   S_CTLBK,WORKREC         IS IT A CTLBK ?             @08A\n         JE    CTLBKS                  YES                         @08A\n         MVC   PRT+70(L'U31),U31       SET UNIDENT OR OUT OF SEQ   @10C\n         MVI   USERR,X'FF'             SET ERROR FLAG\n         J     UERRS                   WRITE ERROR MSG AND ABEND   @08A\nRCCKERR  NI    USERR,X'FE'             RESET CURRENT ERROR FLAG\n         JAS   R9,PRINT                GO PRINT\n         J     RDCARD                  CONTINUE\nEOFCARD  DS    0H             END OF FILE SYSIN ROUTINE\n         CLI   USERR,0                 ANY ERRORS FOUND\n         JNE   EOJ                     YES, EXIT\n*\n******************************************************************\n*                                                                *\n* CHECK FOR ANY USING CARDS ENTERED. IF NOT, NO PRE-ASSEMBLY IS  *\n* NECESSARY. IF ANY USING CARDS FOUND, CREATE LABEL TABLE ENTRIES*\n* SO THAT USING STATEMENTS WILL BE VALID.                        *\n*                                                                *\n* THIS ROUTINE CREATES USING LABEL WHICH ARE NOT REFERENCED BY   *\n* THE PROGRAM. COMMENT OUT MOST OF THE CODING OF THIS ROUTINE    *\n******************************************************************\n*\n         L     R1,DATOCUR              GET CURRENT DATA ONLY @\n         MVC   NOINAD,DATSTRT          SAVE DATA TBL ADDR\n         MVC   0(3,R1),HIVAL           SET END\n         MVC   3(3,R1),HIVAL           SET END\nCKPRE    L     R1,USGSTRT              GET USING TBL START ADDR\n         J     MAINLINE                FORCE PRE-DISASM AS       @05A\n*                          USING STATEMENT IS OPTIONAL PARAMETER\n*                          AS BASE REGISTER IS NO LONGER COMPULSORY\n******************************************************************\n*                                                                *\n* EDIT USING CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*\n* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*\n* USING TABLE.                                                   *\n*                                                                *\n******************************************************************\n*\nUSINGS   DS    0H                      *** USING CARD PROCESSING ***\n         L     R12,USGCUR              GET CURRENT USING TBL ADDR\n         C     R12,USGEND              END OF TBL\n         JNL   UERR6                   YES, TABLE FULL\n         USING USINGD,R12\n         LA    R14,WORKREC                                         @10A\n         USING FUSID,R14                                           @10A\n         TR    FUSIBOFT(L'FUSIBOFT),TRHEX    TRANSLATE TO MAKE HEX @10C\n         TRT   FUSIBOFT(L'FUSIBOFT),TRTHEX   VALID HEXIDECIMAL     @10C\n         JNZ   UERR1                   INVALID BEGIN ADDR\n         TR    FUSIEOFT(L'FUSIEOFT),TRHEX    TRANSLATE TO MAKE HEX @10C\n         TRT   FUSIEOFT(L'FUSIEOFT),TRTHEX   VALID HEXIDECIMAL     @10C\n         JNZ   UERR2                   INVALID END ADDR\n         TR    FUSIREG(1),TRHEX        TRANSLATE TO MAKE HEX       @10C\n         TRT   FUSIREG(1),TRTHEX       VALID HEXIDECIMAL           @10C\n         JNZ   UERR3                   INVALID REG\n         CLI   FUSITYPE,C'P'           PROGRAM BASE ?              @10C\n         JE    CKINIT                  YES, PROGRAM BASE\n         CLI   FUSITYPE,C'D'           DSECT TYPE ?                @10C\n         JNE   UERR8                   NO, ERROR\n         L     R1,DTBSTRT              GET ADDRESS OF DSECT TABLE\nCKDSEND  CLI   0(R1),X'FF'             END OF DSECT TABLE ?\n         JE    GLOBAL_MAPPING          CHECK GLOBAL MAPPING TABLE  @10A\n*        JE    UERR5             BRANCH IF END OF DATA MAPPING     @10A\n         CLC   0(L'FUSIDSCT,R1),FUSIDSCT    THIS THE DSECT ENTRY   @10C\n         JE    USDSMV                  YES\n         AHI   R1,DSECTHL              TO NEXT DSECT ENTRY         @13C\n         J     CKDSEND                 LOOP THRU DSECT TABLE\nGLOBAL_MAPPING DS  0H                  CHECK GLOBAL MAPPING TABLE  @10A\n         L     R1,DATAAD2        R4  = ADDRESS OF MVS MAPPING      @10A\n         AHI   R1,40                   POSITION TO FIRST INX ENTRY @10A\nCKGSEND  CLI   0(R1),X'FF'             END OF BUILD IN MAPPING     @10A\n         JE    UERR5             BRANCH IF END OF DATA MAPPING     @10A\n         CLC   1(5,R1),FUSIDSCT        DSECT NAME FOUND ?          @10A\n         JE    USDSMG                  BRANCH IF FOUND             @10A\n         AHI   R1,20                   NEXT DSECT ENTRY            @10A\n         J     CKGSEND                 TRY NEXT DATA ENTRY         @10A\nUSDSMG   STCM  R1,7,USVALU             MOVE DSECT TABLE ADDRESS    @10A\n         MVI   USTYPE,C'G'             SET GLOBAL MAPPING          @10A\n         J     USFINI                  CONTINUE                    @10A\nUSDSMV   MVC   USVALU,8(R1)            MOVE DSECT TABLE ADDRESS\n         J     USFINI                  CONTINUE\nCKINIT   TR    FUSIPBAS(L'FUSIPBAS),TRHEX  TRANSLATE TO MAKE HEX   @10C\n         TRT   FUSIPBAS(L'FUSIPBAS),TRTHEX    VALID HEXIDECIMAL    @10C\n         JNZ   UERR4                   INVALID BASE REG VALUE\n         PACK  DBLWD(4),FUSIPBAS(7)    PACK INITIAL PROG BASE      @10C\n         MVC   USVALU,DBLWD            BASE REG VALUE TO USING TBL\nUSFINI   PACK  DBLWD(4),FUSIBOFT(7)    PACK BEGIN OFFSET TO HEXI   @10C\n         MVC   USBGN,DBLWD             BEGIN ADDRESS TO USING TABLE\n         PACK  DBLWD(4),FUSIEOFT(7)    PACK ENDING OFFSET TO HEXI  @10C\n         MVC   USEND,DBLWD             END ADDRESS TO USING TABLE\n         TM    USEND+2,1               IS IT ODD ADDRESS ?\n         JO    UERR2                 YES, ERROR\n         CLI   FUSITYPE,C'D'         DSECT BASE                    @10C\n         JE    USFREG                YES\n         CLC   USEND,CSTLENG+1       WITHIN PROGRAM\n         JH    UERR2             ??  YES, ERROR\nUSFREG   MVC   USREG,FUSIREG         BASE REG TO USING TABLE       @10C\n         CLI   USTYPE,C'G'           GLOBAL MAPPING ?              @10A\n         JE    USGBL                 BRANCH IF YES                 @10A\n         MVC   USTYPE,FUSITYPE       TYPE TO USING TABLE           @10C\nUSGBL    CLC   USBGN,USEND           END < BEGIN\n         JH    UERR7                 YES, ERROR\n         CLI   USTYPE,C'P'           PROGRAM BASE ?                @12A\n         JNE   USNEXT                BRANCH IF IT IS FALSE         @12A\n*        CLC   USVALU,USEND          INITIAL VALUE > END OFFSET    @12A\n*        JH    UERR24                BRANCH IF IT IS FALSE         @12A\nUSNEXT   AHI   R12,USINGL            TO NEXT USING TBL ENTRY       @10C\n         MVI   0(R12),X'FF'          SET TABLE END INDIC\n         ST    R12,USGCUR            SAVE UPDATED TABLE ADDR\n         BR    R9                    EXIT\n         DROP  R14                                                 @10A\nUERR1    MVC   PRT+85(22),U01        INVALID NAME COL 7-14\n         J     UERRS                 CONTINUE\nUERR2    MVC   PRT+70(L'U02),U02     INVALID HEX OFFSET COL 14-19\n         J     UERRS                 CONTINUE\nUERR3    MVC   PRT+70(L'U03),U03     INVALID REGISTER COL 21\n         J     UERRS                 CONTINUE\nUERR4    MVC   PRT+70(L'U04),U04     LABEL TABLE OVERFLOW\n         J     UERRS                 CONTINUE\nUERR5    MVC   PRT+70(L'U05),U05     UNDEFINED DSECT COL 25-32\n         J     UERRS                 CONTINUE\nUERR6    MVC   PRT+70(L'U06),U06     OVER 256 USING CARDS\n         J     UERRS                 CONTINUE\nUERR7    MVC   PRT+70(L'U07),U07     END BEFORE BEGIN\n         J     UERRS                 CONTINUE\nUERR8    MVC   PRT+79(L'U08),U08     INVALID TYPE COL 23\n         J     UERRS                 CONTINUE                    @12A\nUERR24   MVC   PRT+79(L'U24),U24                                 @12A\nUERRS    MVI   USBGN,X'FF'           INSURE TABLE END INDIC\n         MVI   USERR,X'FF'           SHOW ERROR\n         L     R1,PRINTDCB           @SYSPRINT DCB\n         TM    48(R1),X'10'          IS SYSPRINT OPEN ?\n         JNO   USINGEX               JUMP IF NO\n         PUT   (1),PRTLINE           WRITE ERROR MESSAGE         @05A\n         ABEND 888                   USER ABEND 888\nUSINGEX  BR    R9                    EXIT\n         DROP  R12\n*\n*\n*\n******************************************************************\n*                                                                *\n* EDIT ULABL CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*\n* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*\n* LABEL TABLE. SEARCH FOR ANY TYPE A (ADCON) ENTRIES HAVING A    *\n* SYMBOL OF AXXXXXX, WHERE XXXXXX IS THE HEX OFFSET TO THE USER  *\n* LABEL. IF AN A TYPE ENTRY IS FOUND, CHANGE ITS SYMBOLIC NAME TO*\n* THAT OF THE USER LABEL.                                        *\n*                                                                *\n******************************************************************\n*\nULABLS   EQU   *                       PROCESS USER LABEL CARDS\n         STM   R6,R12,ULSAV            SAVE REGS\n         LA    R14,WORKREC                                         @10A\n         USING FULABLD,R14                                         @10A\n         CLI   FULABLNM,C' '           1ST CHAR OF LABEL NAME      @10C\n         JE    ULERR1                      CANNOT BE BLANK\n         MVC   UNAME+1(6),FULABLOF     BUILD AXXXXXX NAME          @10C\n         TR    FULABLOF(L'FULABLOF),TRHEX   TRANSLATE TO HEX       @10C\n         TRT   FULABLOF(L'FULABLOF),TRTHEX  CHECK VALID HEX OFFSET @10C\n         JNZ   ULERR2                  NOT VALID\n         MVZ   NUMCK(3),FULABLNG       ZONES FOR NUMERIC TEST      @10C\n         CLC   NUMCK(3),ZEROS          LENGTH IS NUMERIC           @12C\n         JNE   ULERR3                  NO, ERROR\n         L     R6,CURRLBL              GET CURRENT LABEL TABLE ADDRESS\n         USING LABELD,R6\n         C     R6,ENDLBL               END OF TABLE\n         JNL   ULERR4                  YES, ERROR\n         MVC   LBLNAME,FULABLNM        NAME TO LABEL ENTRY         @10C\n         MVI   LBLTYP,C'U'             TYPE TO LABEL ENTRY\n         PACK  DBLWD,FULABLNG(L'FULABLNG)   PACK LENGTH            @10C\n         CP    DBLWD,P999              FIELD LENGTH > 999          @13C\n         JH    ULERR3                  YES, ERROR                  @10C\n         CVB   R12,DBLWD               CONVERT TO BINARY\n         STC   R12,LBLLEN              LENGTH TO LABEL ENTRY\n         PACK  DBLWD(4),FULABLOF(L'FULABLOF+1)   PCK TO HEX        @10C\n         DROP  R14                                                 @10A\n         MVC   LBLADR,DBLWD            OFFSET TO LABEL\n         LA    R7,LABELL(R6)           @ NEXT LABEL ENTRY          @10C\n         MVC   0(L'LBLADR,R7),HIVAL    SET END INDIC               @10C\n         ST    R7,CURRLBL              SET NEW TABLE END ADDR\n         LR    R7,R6                   SAVE NEW ENTRY ADDRESS\n         L     R6,LBLTBL               GET 1ST LABEL ENTRY ADDR\nULBCKND  C     R6,CURRLBL              END OF TABLE\n         JNL   ULXIT                   YES, EXIT\n         CLI   LBLTYP,C'A'             IS IT ADCON ENTRY\n         JNE   ULBSTEP                 NO\n         CLC   LBLNAME,UNAME           ADCON SYMBOL AT USER LBL ADDR\n         JNE   ULBSTEP                 NO\n         MVC   LBLNAME,LBLNAME-LABELD(R7) SET USER SYMBOL IN ADCON\nULBSTEP  AHI   R6,LABELL               TO NEXT LABEL ENTRY         @10C\n         J     ULBCKND                 LOOP THRU LABEL TABLE\nULERR1   MVC   PRT+85(L'U21),U21    'INVALID NAME COL 7-18'        @10C\n         J     ULERRS               CONTINUE\nULERR2   MVC   PRT+85(L'U22),U22    'INVALID HEX OFFSET COL 20-25' @10C\n         J     ULERRS               CONTINUE\nULERR3   MVC   PRT+85(L'U23),U23    'INVALID DECIMAL LENGTH COL 27-29'\n         J     ULERRS               CONTINUE\nULERR4   MVC   PRT+85(L'U04),U04    'INVALID HEX OFFSET COL 25-29'\nULERRS   MVI   USERR,X'FF'          SET ERROR FLAG\n         J     UERRS                                              @10A\nULXIT    LM    R6,R12,ULSAV         RESTORE REGS\n         BR    R9                   EXIT\n*\n*\n*\n******************************************************************\n*                                                                *\n* EDIT DSECT CARDS FOR VALIDITY. PUT APPROPRIATE COMMENT IN PRINT*\n* LINE WHEN INVALID. WHEN NO ERRORS FOUND, CREATE AN ENTRY IN THE*\n* DSECT HEADER TABLE, GETMAIN AN AREA TO CONTAIN THE FIELD       *\n* DESCRIPTION ENTRIES, READ AND BUILD FIELD ENTRIES FOR ALL FIELD*\n* DESCRIPTION CARDS ENTERED.                                     *\n*                                                                *\n******************************************************************\n*\nDSECTS   EQU   *                       *** DSECT PROCESSING ***\n         ST    R9,DSCT9                SAVE RETURN ADDR\n         LA    R14,WORKREC                                         @10A\n         USING FDSECT,R14                                          @10A\n         CLI   FDSECTHN,C' '           NAME IS BLANK               @10C\n         JE    DSERR1                  YES, ERROR\n         MVZ   NUMCK(4),FDSECT#        ZONES FOR CHECK             @10C\n         CLC   NUMCK(4),ZEROS          IS NBR FIELDS NUMERIC\n         JNE   DSERR2                  NO, ERROR\n         L     R12,DTBCURR             GET CURRENT DSECT TBL ADDR\n         C     R12,DTBEND              AT END OF TABLE\n         JNL   DSERR3                  YES, ERROR\n         PACK  DBLWD,FDSECT#           PACK NUMBER OF ENTRIES      @13A\n         CVB   R10,DBLWD               CONVERT TO BINARY           @13A\n         MVC   0(8,R12),FDSECTHN       COPY NAME TO DSECT TABLE    @10C\n         MVC   DSECTR-DSECTHD(8,R12),FDSECTR                       @13A\n         CLI   FDSECTR,C' '                                        @13A\n         JE    DS1000                                              @13A\n* REDEFINE LABEL                                                   @13A\n         L     R0,SDSECTL              RESTORE SIZE OF DSECTS      @13A\n         OILH  R1,X'8000'              TURN ON HIGH ORDER BIT      @06A\n         SVC   10                      ACQUIRE STORAGE FOR DSECT   @06A\n         STCM  R1,7,DSECTHA-DSECTHD(R12)   SAVE DSECT FIELD TABLE ADR\n         AHI   R12,-DSECTHL                                        @13A\n         XR    R14,R14                                             @13A\n         ICM   R14,7,DSECTHA-DSECTHD(R12)                          @13A\n         LR    R0,R1                                               @13A\n         L     R1,SDSECTL                                          @13A\n         L     R15,SDSECTL                                         @13A\n         MVCL  R0,R14                                              @13A\n         OI    REDEFSW,X'80'                                       @13A\n         AHI   R12,DSECTHL             TO NEXT DSECT TABLE ENTRY   @13A\n         XR    R1,R1                                               @13A\n         ICM   R1,7,DSECTHA-DSECTHD(R12)                           @13A\n         ST    R1,SDSECTA                                          @13A\n         J     DS2000                                              @13A\nDS1000   PACK  DBLWD,FDSECT#           PACK NUMBER OF ENTRIES      @10C\n         CVB   R10,DBLWD               CONVERT TO BINARY\n         AHI   R10,4                   ADD FOR SAFETY\n         MHI   R10,DSECTL              TIMES ENTRY LENGTH          @05C\n         ST    R10,SDSECTL             SAVE SIZE OF DSECT FIELD TB @13A\n*        SIZE OF DSECT TABLE = 47*(#ENTRIES+4)\n*        GETMAIN R,LV=(10)             GET STORAGE FOR FIELD TABLE\n         LR    R0,R10                  GETMAIN LENGTH              @06A\n         OILH  R1,X'8000'              TURN ON HIGH ORDER BIT      @06A\n         SVC   10                      GETMAIN                     @06A\n         STCM  R1,7,DSECTHA-DSECTHD(R12)   SAVE DSECT FIELD TABLE ADR\n         ST    R1,SDSECTA                  SAVE DSECT ADDRESS      @13A\nDS2000   AHI   R12,DSECTHL             TO NEXT DSECT TABLE ENTRY\n         ST    R12,DTBCURR             UPDATE CURRENT DSECT TBL ADDR\n         MVI   0(R12),X'FF'            SET END INDIC\n         LR    R12,R1                  COPY FIELD TABLE ADDR\n         JAS   R9,PRINT                PRINT DSECT RECORD\n         USING DSECTD,R12\n         CVB   R11,DBLWD               NBR ENTRIES IN LOOP REG\nREAD_DSECTS_FIELD  DS  0H                                          @09C\n         L     R1,INDCB                GET SYSIN DCB ADDR          @09C\n         GET   (1)                     READ DSECT RECORD\n         MVC   WORKREC,0(R1)           MOVE RECORD TO WORK AREA\n         CLI   WORKREC,C'*'            COMMENT ?                   @14A\n         JE    READ_DSECTS_FIELD       SKIP IF YES                 @14A\n         LA    R14,WORKREC                                         @10A\n         USING FDSECTD,R14                                         @10A\n         MVC   PRT(80),WORKREC         MOVE RECORD TO PRINT AREA\n         CLI   WORKREC,C' '            NAME FIELD BLANK\n         JE    DSERR1                  YES, ERROR\n         MVZ   NUMCK,FDSOFSET          ZONES FOR TEST              @10C\n         CLC   NUMCK,ZEROS             IS OFFSET NUMERIC\n         JNE   DSERR3                  NO, ERROR\n         PACK  DBLWD,FDSOFSET(L'FDSOFSET)  PACK OFFSET             @10C\n         CP    DBLWD,P32768            OFFSET > 32768              @11C\n         JH    DSERR3                  YES, ERROR\n         CVB   R1,DBLWD                CONVERT\n         STCM  R1,7,TMPOFSET           OFFSET TO TABLE ENTRY       @13A\n         TM    REDEFSW,X'80'                                       @13A\n         JNO   DS4000                                              @13A\n         L     R12,SDSECTA                                         @13A\nDS3000   CLI   0(R12),X'FF'                                        @13A\n         JE    DSERR5                                              @13A\n         CLC   TMPOFSET,DSOFSET                                    @13A\n         JE    DS4000                                              @13A\n         AHI   R12,DSECTL                                          @13A\n         J     DS3000                                              @13A\nDS4000   MVC   DSOFSET,TMPOFSET                                    @13A\n         MVZ   NUMCK(3),FDSLENG        TEST FILED LENGTH           @12C\n         CLC   NUMCK(3),ZEROS          IS LENGTH NUMERIC           @12C\n         JNE   DSERR4                  NO, ERROR\n         PACK  DBLWD,FDSLENG           PACK LENGTH                 @10C\n         CP    DBLWD,P999              LENGTH OVER 999             @13A\n         JH    DSERR4                  YES, ERROR                  @13A\n*        CP    DBLWD,P256              LENGTH OVER 256             @13A\n*        JL    DS4500                                              @13A\n*        MP    DBLWD,P256                                          @13A\nDS4500   CVB   R1,DBLWD                CONVERT\n         LTR   R1,R1                   LENGTH IS ZERO\n         JZ    DSERR4                  YES, ERROR\n         STC   R1,DSLENG               LENGTH TO TABLE ENTRY\n         MVC   DSCOMMT,FDSCOMMT        COPY COMMENT                @10A\n         MVC   DSLNAME,WORKREC         NAME TO ENTRY\n         MVI   DSLBTYP,C'D'            SET LABEL TYPE              @10C\n         AHI   R12,DSECTL              TO NEXT ENTRY\n         TM    REDEFSW,X'80'                                       @13A\n         JO    DS5000                                              @13A\n         MVI   DSOFSET,X'FF'           SET TABLE END INDIC         @10C\nDS5000   JAS   R9,PRINT                GO PRINT CARD\n         JCT   R11,READ_DSECTS_FIELD   READ NEXT DSECT RECORD      @09C\n         TM    REDEFSW,X'80'                                       @13A\n         JO    DS6000                                              @13A\n         MVC   DSOFSET,HIVAL           TABLE STOPPER\nDS6000   MVI   REDEFSW,X'00'           CLEAR SWITCH                @13A\n         L     R9,DSCT9                GET RETURN ADDR\n         BR    R9                      EXIT\nDSERR1   MVC   PRT+85(L'U09),U09       'INVALID NAME COL 1-12'\n         J     DSERRS                  CONTINUE\nDSERR2   MVC   PRT+85(L'U10),U10       'INVALID NBR FIELDS COL 16-19'\n         J     DSERRS                  CONTINUE\nDSERR3   MVC   PRT+85(L'U11),U11       'INVALID OFFSET COL 14-18'  @12C\n         J     DSERRS                  CONTINUE\nDSERR4   MVC   PRT+85(L'U12),U12       'INVALID LENGTH COL 20-22'  @12C\n         J     DSERRS                  CONTINUE\nDSERR5   MVC   PRT+85(L'U25),U25       'REDEFINE OFFSET NOT FIND'  @13A\nDSERRS   MVI   USERR,X'FF'             SHOW ERROR FOUND            @13A\n         J     UERRS\n*        L     R9,DSCT9                GET RETURN ADDR\n*        BR    R9                      EXIT\n         DROP  R12\n*\n******************************************************************\n*                                                                *\n* EDIT DATA ONLY CARDS FOR VALIDITY. PLACE ERROR DESCRIPTION IN  *\n* PRINT LINE IF ERRORS FOUND. CREATE DATA ONLY TABLE ENTRY IF NO *\n* ERRORS ARE FOUND.                                              *\n*                                                                *\n******************************************************************\n*                                      *** HEX2 CARD PROCESSING ***\nHEX2     L     R1,DATOCUR              GET TBL ADDR                @13A\n         USING DATAD,R1                                            @13A\n         MVI   DATATYPE,C'H'           SET IT AS HALF WORD         @13C\n         J     DATASS                                              @13A\n*                                      *** HEX4 CARD PROCESSING ***\nHEX4     L     R1,DATOCUR              GET TBL ADDR                @09A\n*        USING DATAD,R1                                            @10A\n         MVI   DATATYPE,C'X'           SET IT AS HEXIDECIMAL       @10C\n         J     DATASS                                              @09A\n*                                      *** HEX4 CARD PROCESSING ***\nASCII    L     R1,DATOCUR              GET TBL ADDR                @15A\n*        USING DATAD,R1                                            @15A\n         MVI   DATATYPE,C'A'           SET IT AS ASCII             @15A\n         J     DATASS                                              @15A\nDATAS    DS    0H                      *** DATA CARD PROCESSING ***\n         L     R1,DATOCUR              GET TBL ADDR                @09A\n         MVI   DATATYPE,C'C'           ASSUME DATA STATEMENT       @10C\nDATASS   LA    R14,WORKREC                                         @10A\n         USING FDATAD,R14                                          @10A\n         TR    FDATASTR,TRHEX          TRANSLATE TO MAKE HEX       @10C\n         TRT   FDATASTR,TRTHEX         CHECK VALID                 @10C\n         JNZ   DERR1                   INVALID HEX\n         TR    FDATAEND,TRHEX          TRANSLATE TO MAKE HEX       @10C\n         TRT   FDATAEND,TRTHEX         CHECK VALID                 @10C\n         JNZ   DERR2                   INVALID HEX\n         PACK  DBLWD(4),FDATASTR(L'FDATASTR+1)   PACK TO MAKE HEX  @10C\n         PACK  DBLWD+4(4),FDATAEND(L'FDATASTR+1) PACK TO MAKE HEX  @10C\n         CLC   DBLWD(3),DBLWD+4        CHECK 1ST LOW\n         JNL   DERR3                   1ST NOT LOW, ERROR\n         L     R1,DATOCUR              GET TBL ADDR\n         USING DATAD,R1\n         MVC   DATASTRT,DBLWD          MOVE 1ST OFFSET TO TABLE    @10C\n         MVC   DATAEND,DBLWD+4         MOVE 2ND OFFSET TO TABLE    @10C\n         AHI   R1,7                    TO NEXT ENTRY               @09A\n         ST    R1,DATOCUR              SAVE CURRENT ENTRY ADDR\n         BR    R9                      EXIT\nDERR1    MVC   PRT+85(L'U13),U13       '1ST OFFSET INVALID HEX'\n         J     DERRS                   CONTINUE\nDERR2    MVC   PRT+85(L'U14),U14       '2ND OFFSET INVALID HEX'\n         J     DERRS                   CONTINUE\nDERR3    MVC   PRT+85(L'U15),U15       'END OFFSET BEFORE BEGIN'\nDERRS    MVI   USERR,X'FF'             FLAG ERROR\n         J     UERRS                   WRITE ERROR MSG AND ABEND   @08A\n*\n******************************************************************\n*                                                                *\n* EDIT CODE ONLY CARDS FOR VALIDITY. PLACE ERROR DESCRIPTION IN  *\n* PRINT LINE IF ERRORS FOUND. CREATE CODE ONLY TABLE ENTRY IF NO *\n* ERRORS ARE FOUND.                                              *\n*                                                                *\n******************************************************************\n*\nCODES    EQU   *                    *** CODE CARD PROCESSING ***   @07A\n         LA    R14,WORKREC                                         @10A\n         USING FDATAD,R14                                          @10A\n         TR    FDATASTR,TRHEX          TRANSLATE TO MAKE HEX       @10C\n         TRT   FDATASTR,TRTHEX         CHECK VALID                 @10C\n         JNZ   CERR1                   INVALID HEX                 @07A\n         TR    FDATAEND,TRHEX          TRANSLATE TO MAKE HEX       @10C\n         TRT   FDATAEND,TRTHEX         CHECK VALID                 @10C\n         JNZ   CERR2                   INVALID HEX                 @07A\n         PACK  DBLWD(4),FDATASTR(L'FDATASTR+1)   PACK TO MAKE HEX  @10C\n         PACK  DBLWD+4(4),FDATAEND(L'FDATASTR+1) PACK TO MAKE HEX  @10C\n         CLC   DBLWD(3),DBLWD+4        CHECK 1ST LOW               @07A\n         JNL   CERR3                   1ST NOT LOW, ERROR          @07A\n         L     R1,CODOCUR              GET TBL ADDR                @07A\n         MVC   DATASTRT,DBLWD          MOVE 1ST OFFSET TO TABLE    @10C\n         MVC   DATAEND,DBLWD+4         MOVE 2ND OFFSET TO TABLE    @10C\n         AHI   R1,6                    TO NEXT ENTRY               @07A\n         ST    R1,CODOCUR              SAVE CURRENT ENTRY ADDR     @07A\n         MVC   0(3,R1),HIVAL           SET END                     @11A\n         MVC   3(3,R1),HIVAL           SET END                     @11A\n         BR    R9                      EXIT                        @07A\nCERR1    MVC   PRT+85(L'U13),U13       '1ST OFFSET INVALID HEX'    @07A\n         J     CERRS                   CONTINUE                    @07A\nCERR2    MVC   PRT+85(L'U14),U14       '2ND OFFSET INVALID HEX'    @07A\n         J     CERRS                   CONTINUE                    @07A\nCERR3    MVC   PRT+85(L'U15),U15       'END OFFSET BEFORE BEGIN'   @07A\nCERRS    MVI   USERR,X'FF'             FLAG ERROR                  @07A\n         BR    R9                      EXIT                        @07A\n****************************************************************** @08A\n*                                                                * @08A\n* EDIT CLTBK ONLY CARDS FOR VALIDITY. PLACE ERROR DESCRIPTION IN * @08A\n* PRINT LINE IF ERRORS FOUND. CREATE CTLBK TABLE ENTRY IF NO     * @08A\n* ERRORS ARE FOUND.                                              * @08A\n* CTLBK @TCBXX 000082 2                                          * @08A\n*  12345678901234567890                                          * @08A\n****************************************************************** @08A\n*                                                                  @08A\nCTLBKS   EQU   *                   *** CTLBK CARD PROCESSING ***   @08A\n         LA    R14,WORKREC                                         @09A\n         USING FCTLBKD,R14                                         @09A\n         TR    FCTLBOFS(L'FCTLBOFS),TRHEX  TRANSLATE OFFSET TO HEX @09C\n         TRT   FCTLBOFS(L'FCTLBOFS),TRTHEX   CHECK VALID           @09C\n         JNZ   CTLERR1                 INVALID HEX                 @08A\n         CLI   FCTLREG,C'*'            COMMENT ??                  @15A\n         JE    CTL1000                 BRANCH IF COMMENT           @15A\n         TR    FCTLREG(1),TRHEX        TRANSLATE REG TO HEX        @09C\n         TRT   FCTLREG(1),TRTHEX       CHECK VALID                 @09C\n         JNZ   CTLERR2                 JUMP IF INVALID REG         @08A\nCTL1000  PACK  DBLWD(4),FCTLBOFS(L'FCTLBOFS+1)   PACK TO MAKE HEX  @09C\n         L     R1,CTLOCUR                                          @09A\n         MVC   CTLOFST-CTLD(3,R1),DBLWD      COPY PROG OFFSET      @08A\n         MVC   CTLREG-CTLD(1,R1),FCTLREG     COPY BASE REGISTER    @09C\n         MVC   CTLTYPE-CTLD(L'FCTLBKN,R1),FCTLBKN  COPY DSECT NAME @09C\n         MVC   CTLCOMM-CTLD(L'CTLCOMM,R1),FCTLCOMM                 @09C\n         AHI   R1,CTLBK                TO NEXT ENTRY               @09C\n         ST    R1,CTLOCUR              SAVE CURRENT ENTRY ADDR     @08A\n         BR    R9                      EXIT                        @08A\n         DROP  R14                                                 @09C\nCTLERR1  MVC   PRT+85(L'U16),U16       INVALID OFFSET COL 14-19    @08A\n         J     CTLERRS                 CONTINUE                    @08A\nCTLERR2  MVC   PRT+85(L'U17),U17     INVALID DSECT REGISTER COL 21 @08A\nCTLERRS  MVI   USERR,X'FF'             FLAG ERROR                  @08A\n         J     UERRS                   WRITE ERROR MSG AND ABEND   @08A\n*\n*\n******************************************************************\n*                                                                *\n* MAINLINE ROUTINE FOR THE PRE-DISASSEMBLY. PURPOSE OF THIS PART *\n* OF THE PROGRAM IS TO ATTEMPT TO CREATE A LABEL ENTRY FOR INSTR-*\n* UCTIONS HAVING STORAGE OPERANDS. THE RESULTING LABEL TABLE WILL*\n* BE SORTED, AND DUPLICATE ENTRIES ELIMINATED BEFORE EXIT FROM   *\n* THIS PHASE OF DISASSEMBLY.                                     *\n*                                                                *\n* R7 = @ CURRENT TXT                                             *\n* R12= OFFSET OF CURRENT TXT                                     *\n*                                                                *\n******************************************************************\n*\nMAINLINE EQU   *                       MAINLINE ROUTINE\n         L     R6,LBLTBL               @ LABEL TABLE\n         USING LABELD,R6\n         MVC   TXTCURR,TXTSTRT         COPY TEXT START ADDR\nGETCURR  L     R7,TXTCURR              @ CURRENT TXT BYTE\n         C     R7,TXTEND               END OF TEXT\n         JNL   EOJ                     YES\n         MVI   CONPROG,X'00'           TURN OFF CONSTANT IN PROG   @08A\n         LR    R12,R7                  COPY TEXT ADDR\n         S     R12,TXTSTRT             COMPUTE OFFSET\n         ST    R12,TXTOFST             SAVE OFFSET TO THIS BYTE\n         CLC   NEXCHG,TXTOFSET         TIME TO CHANGE USING TBLS\n         JH    CKCCODE                 NO                          @07C\n         JAS   R9,NEXUSG               YES, GO DO IT\nCKCCODE  L     R12,CODSTRT             GET CODE ONLY TBL ADDR      @07A\nCKCARNG  CLC   TXTOFSET,0(R12)         RANGE                       @07A\n         JL    NEXTCODE                BRANCH IF NO                @07A\n         CLC   TXTOFSET,3(R12)         THIS BYTE IN THE RANGE      @07A\n         JL    SETCODSW                BRANCH IF YES               @07A\nNEXTCODE AHI   R12,6                   NEXT CODE TABLE ENTRY       @07A\n         CLC   0(3,R12),XZROS          END OF CODE TABLE ??        @07A\n         JE    CKDARNG                 BRANCH IF END OF TABLE      @07A\n         J     CKCARNG                 GO CHECK AGAIN              @07A\nSETCODSW OI    CODPROG,X'80'           TURN ON CODE IN PROGRESS    @07A\n         J     CKINSTR                 BRANCH IF YES               @07A\n***   CHECK DATA ONLY TABLE\nCKDARNG  L     R12,NOINAD              GET DATA ONLY ENTRY ADDRESS\n         MVI   CODPROG,X'00'           TRUN OFF CODE IN PROGRESS   @07A\n         CLC   TXTOFSET,0(R12)         NOT YET TO THIS RANGE\n         JL    CKLOSEQ                 TRUE\n         CLC   TXTOFSET,3(R12)         NOW IN THE RANGE\n*        JNH   CONST                   TRUE, TREAT AS CONSTANT     @08D\n         JNH   SKIPDATA                TURE, THE RANGE IS DATA     @08A\n         AHI   R12,7                   PAST THIS ONE, STEP TO NEXT\n         ST    R12,NOINAD              SAVE NEW DATA ONLY ADDRESS\n         J     CKDARNG                 AND CHECK AGAIN\nSKIPDATA DS    0H             THE ENTIRE RANGE IS DATA             @08A\n         L     R7,TXTSTRT              GET PROGRAM STARTING OFFSET @08A\n         SR    R0,R0                   CLEAR R0                    @08A\n         ICM   R0,7,3(R12)             GET DATA ENDING OFFSET      @08A\n         AR    R7,R0                   CALCULATE THE END           @08A\n         AHI   R7,1                              DATA ADDRESS      @08A\n         ST    R7,TXTCURR              SET TXTCURR TO END ADDRESS  @08A\n         J     GETCURR                 NEXT INSTRUCTION            @08A\nCKLOSEQ  C     R6,CURRLBL              END OF USED LABEL TABLE?\n         JNL   GCKODD                  IF SO, IGNORE LABEL STUFF\n         CLC   TXTOFSET,LBLADR         LABEL ENTRY OUT OF SEQ\n         JNH   GCKODD                  NO, CONTINUE\n         JAS   R9,FORCONST             YES, FORCE ANY CONSTANT OUT\n         AHI   R6,LABELL               TO NEXT LABEL               @10C\n*        CLC   LBLADR(3),TRTHEX   *** DEBUG\n*        JNE   CKLOSEQ                 CONTINUE SEQ CHK\n         J     CKLOSEQ\n*CKODD   TM    TXTCURR+3,1             ODD ADDRESS\nGCKODD   TM    TXTOFST+3,1             ODD ADDRESS\n         JO    CONST                   YES, NOT INSTR\n         CLC   1(3,R7),0(R7)           4 CONSEC IDENTICAL BYTES\n         JE    CONST                   YES, NOT INSTR\n         TRT   0(1,R7),CHARTRAN        TEST TEXT BYTE\n         JNZ   CKINSTR                 NOT CHARACTER\n         CLI   CONPROG,1               IS CONSTANT IN PROGRESS\n         JNE   CK6                     NO\n         CLI   CONTYPE,C'C'            IS IT CHARACTER TYPE\n         JE    CONST                   YES, ADD THIS TO CONSTANT\nCK6      CLI   4(R7),X'A7'\n         JE    CKINSTR\n         TRT   0(6,R7),CHARTRAN        6 CONSECUTIVE CHARACTERS\n         JZ    CONST                   YES, NOT INSTRUCTION\nCKINSTR  SR    R8,R8                   CLEAR WORK\n         IC    R8,0(R7)                PICK UP TXT BYTE\n         MHI   R8,SGOPLEN              TIMES TABLE LENGTH         @04C\n*        LRL   R1,SGLOPAD                                         @04C\n         L     R1,SGLOPAD                                         @04C\n         AR    R8,R1\n         MVC   INSTENT,0(R8)           SAVE INSTRUCTION TBL ENTRY @04A\n         SR    R0,R0                   CLEAR FOR IC INSTR         @06A\n         IC    R0,INLNG                                           @06A\n         SRL   R0,4                    CLEAR INSTR LENGTH         @06A\n         STC   R0,IOLNG                SAVE OEPRAND LENGTH        @06A\n         NI    INLNG,X'0F'             CLEAR OPERAND LENGTH       006A\n         CLI   INAME,0                 IS IT AN INSTR OP-CODE     @04A\n         JE    CONST                   NO, IT MUST BE CONST       @04A\n         CLI   ITYPE,TWO               TWO-BYTE OP-CODE ??        @04A\n         JE    DBLNDS                                             @04A\n         CLI   ITYPE,L3                TWO-BYTE OP-CODE L3        @04A\n         JE    L3LNDS                                             @04A\n         CLI   ITYPE,L4                TWO-BYTE OP-CODE L4        @04A\n         JE    L4LNDS                                             @04A\n         J     GOTINST                 NO, IT MUST BE ONE TYPE INSTR\n*BLNDS   LRL   R8,DBLOPAD              YES, GET L3 TBL ADDR       @04A\nDBLNDS   L     R8,DBLOPAD              YES, GET L3 TBL ADDR       @04A\nDBLND    CLI   0(R8),X'FF'             END OF OPCODE TABLE        @04A\n         JE    CONST                   NO IT MUST BE CONST        @04A\n         CLC   0(2,R8),0(R7)           THIS ENTRY MATCHES TXT ?   @04A\n         JE    GOTDBLI                 YES\n         AHI   R8,DGOPLEN              TO NEXT ENTRY\n         J     DBLND                   LOOP THRU TBL\n*3LNDS   LRL   R8,L3LOPAD              LOAD L3 TBL                @04A\nL3LNDS   L     R8,L3LOPAD              LOAD L3 TBL                @04A\nL3LND    CLI   0(R8),X'FF'             END OF TABLE               @04A\n         JE    CONST                   YES, GET L4 TBL ADDR       @04A\n         CLC   0(1,R8),0(R7)                                      @04A\n         JNE   L3LNDXT                                            @04A\n         MVC   TEMP1,1(R7)             MASK OFF THE FIRST 4 BITS  @04A\n         NI    TEMP1,X'0F'             OF THE 2ND BYTES           @04A\n*                                      EX.  X4   ..> 04           @04A\n         CLC   1(1,R8),TEMP1                                      @04A\n         JE    GOTDBLI                 YES THEN BRANCH            @04A\nL3LNDXT  AHI   R8,L3OPLEN              TO NEXT ENTRY              @04A\n         J     L3LND                   LOOP THRU TBL              @04A\n*4LNDS   LRL   R8,L4LOPAD                                         @04A\nL4LNDS   L     R8,L4LOPAD                                         @04A\nL4LND    CLI   0(R8),X'FF'             END OF TABLE               @04A\n         JE    CONST                   YES, GET 2-BYTE TBL ADDR   @04A\n         CLC   0(1,R8),0(R7)           1ST OP CODE MATCH ?        @04A\n         JNE   L4LNDXT                 BRANCH IF NOT MATCH        @04A\n         CLC   1(1,R8),5(R7)           2ND OP CODE MATCH ?        @04A\n         JE    GOTDBLI                 YES THEN BRANCH            @04A\nL4LNDXT  AHI   R8,L4OPLEN              TO NEXT ENTRY              @04A\n         J     L4LND                   LOOP THRU TBL              @04A\nGOTDBLI  AHI   R8,2                    BYPAS DOUBLE BYTE OPCODE   @04A\nGOTINST  MVC   INSTENT,0(R8)           SAVE INSTRUCTION TBL ENTRY @04A\n         SR    R0,R0                   CLEAR FOR IC INSTR         @06A\n         IC    R0,INLNG                                           @06A\n         SRL   R0,4                    CLEAR INSTR LENGTH         @06A\n         STC   R0,IOLNG                SAVE OEPRAND LENGTH        @06A\n         NI    INLNG,X'0F'             CLEAR OPERAND LENGTH       006A\n         MVC   ILENG+1(1),INLNG        SET INSTR LENGTH           @04A\n*\n******************************************************************\n*                                                                *\n* CHECK TO SEE IF THIS BYTE OF THE PROGRAM IS AN INSTRUCTION OP  *\n* CODE. IF SO, PERFORM THE APPROPRIATE PROCESSING ROUTINE.       *\n*                                                                *\n* R7 = ADDRESS OF CURRENT INSTRUCTION                            *\n*                                                                *\n******************************************************************\nMVMNE    MVC   MNEMONIC,0(R8)          SET INSTR MNEMONIC\n         MVC   OFFSET,TXTOFSET         SET OFFSET\n         MVC   INSTYP,ITYPE            SET INSTR TYPE\n*        MVC   INSTYP,5(R8)            SET INSTR TYPE\n         MVI   TYPE,X'0D'              SHOW IT IS AN INSTRUCTION\n         MVC   LEN,ILENG+1             SHOW LENGTH\n         MVC   TEXT(6),0(R7)           MOVE ACTUAL TEXT\n*        TM    ICLASS,FLTPT            FLOATING POINT OP-CODE\n*        JO    FPVERFY                 YES, GO VERIFY\n         CLI   IEDT,0                  ANY EDIT REQUIRED ??\n         JE    PFMFMT                  BRANCH NO EDIT REQUIRED   @05A\n******************************************************************\n*                                                                *\n* GENERAL OP-CODE TESTS TO VERIFY THAT NON-FLOATING-POINT OP     *\n* CODES ARE INDEED OP-CODES.                                     *\n*                                                                *\n******************************************************************\n*\nIVERFY   EQU   *                       *** VERIFY POSSIBLE INSTRUCTION\n         TM    IEDT,EPR                EVEN-ODD REG PAIR\n         JZ    IVE2                    NO\n         TM    1(R7),X'10'             R1 IS ODD\n         JO    CONST                   YES, NOT INSTR\n         CLI   0(R7),X'0E'             IS IT MVCL\n         JE    IVTRG2                  YES\n         CLI   0(R7),X'0F'             IS IT CLCL\n         JNE   IVE2                    NO\nIVTRG2   TM    1(R7),X'01'             R2 IS ODD\n         JO    CONST                   YES, NOT INSTR\n         SR    R1,R1                   CLEAR WORK\n         SR    R2,R2                   CLEAR WORK\n         IC    R1,1(R7)                GET R1R2\n         SRL   R1,4                    SHIFT OUT R2\n         PACK  DBLWD(1),1(1,R7)        FLIP R1R2 BYTE\n         IC    R2,DBLWD                PICK UP R2R1\n         SRL   R2,4                    SHIFT OUT R1\n         CR    R1,R2                   R1=R2\n         JE    CONST                   YES, NOT INSTR\n         J     PFMFMT                  NO, GOOD INSTR\nIVE2     TM    IEDT,E2                 HALFWORD STORAGE ALIGNMENT\n         JZ    IVE4                    NO\n         TM    3(R7),X'01'             DISPL IS ODD\n         JZ    IVES2                   NO, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO, CONTINUE\n         CLI   ITYPE,RS                RS INSTRUCTION\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG IS 0\n         JZ    CONST                   YES, NOT INSTR\n         J     IVES2                   CONTINUE\nIVE4     TM    IEDT,E4                 2ND OPND ON FULLWORD BOUND\n         JZ    IVE8                    NO\n         TM    3(R7),X'03'             DISPL DIV BY 4\n         JZ    IVES2                   YES, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO, CONTINUE\n         CLI   ITYPE,RS                RS INSTRUCTION OP CODE\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\n         J     IVES2                   NO, CONTINUE\nIVE8     TM    IEDT,E8                 2ND OPND ON DBLWD BOUND\n         JZ    IVES2                   NO\n         TM    3(R7),X'07'             DISPL DIV BY 8\n         JZ    IVES2                   YES, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\nIVES2    CLI   PRIVASM,1               PRIVILEGED INSTR O.K.\n         JE    PFMFMT                  YES\n         TM    IEDT,S2                 OPND2 MUST HAVE BASE\n         JZ    IVES1                   NO\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   PFMFMT                  NO, O.K.\n         CLI   ITYPE,RS                RS INSTRUCTION\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\n         J     PFMFMT                  NO, GOOD INSTR\nIVES1    TM    IEDT,S1                 1ST OPND MUST HAVE BASE\n         JZ    PFMFMT                  NO, CONTINUE\n         TM    2(R7),X'F0'             1ST OPND HAS BASE\n         JZ    CONST                   NO, NOT INSTR\nPFMFMT   DS    0H\n*                                      OP-CODE\n*  HANDLE SPECIAL CASE                                            @07A\n*                                                                 @07A\n         CLI   0(R7),X'4B'                                        @07A\n         JE    CHECKDOT                YES, IS IT STRING ?        @07A\n         CLI   0(R7),X'F0'                                        @07A\n         JE    CHECKDOT                YES, IS IT STRING ?        @07A\n         CLI   0(R7),C'S'                                         @07A\n         JE    CHECKDOT                YES, IS IT STRING ?        @07A\n         J     ICKSEC                                             @07A\nCHECKDOT TM    CODPROG,X'80'           CODE IN PROGRESS           @07A\n         JO    ICKSEC                                             @07A\n         TRT   0(4,R7),CHARTRAN                                   @07A\n         JZ    CONST                   BRANCH IF IT IS STRING     @07A\nICKSEC   DS    0H                                                 @07A\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,INSTYP               GET INSTRUCTION TYPE\n         CHI   R1,X'9C'                                           @15C\n         JH    INSTOUT                                            @07A\n         SR    R11,R11                 CLEAR WORK REG\n         L     R9,OPND9           GET FORMAT ROUTINE RETURN ADDR\n         LARL  R15,OPNDCTL             GET THE ADDRESS OF         @05A\n         AR    R15,R1                    APPROPRIATE FORMATTING   @05A\n         BR    R15                         ROUTINE                @05A\n*        B     *+4(R1)          TO APPROPRIATE FORMATTING ROUTIN  @05D\nOPNDCTL  J     INSTOUT                 TYPE=0, RR\n         J     RXOPND                  TYPE=4, RX\n         J     SOPND                   TYPE=8, S                  @02A\n         J     SIOPND                  TYPE=C, SI\n         J     RSOPND                  TYPE=10, RS\n         J     SS1OPND                 TYPE=14, SS1\n         J     SS2OPND                 TYPE=18, 2-LENGTH SS\n         J     SOPND                   TYPE=1C, 2-BYTE OP-CODES\n         J     RXOPND                  TYPE=20, CONDITIONAL BRANCH\n         J     SVCOPND                 TYPE=24, SVC\n         J     INSTOUT                 TYPE=28, RRE0            @01A\n         J     INSTOUT                 TYPE=2C, RRE1            @09C\n         J     INSTOUT                 TYPE=30, RRE2            @09C\n         J     SS2OPND                 TYPE=34, SSE             @09C\n         J     INSTOUT                 TYPE=38, SS3             @04A\n         J     RI1OPND                 TYPE=3C, RI1             @04A\n         J     INSTOUT                 TYPE=40, RI2             @04A\n         J     RIL1OPND                TYPE=44, RIL1            @05A\n         J     INSTOUT                 TYPE=48, RIL2            @05A\n         J     RI1OPND                 TYPE=4C, RSI             @05A\n         J     RSEOPND                 TYPE=50, RSE             @05A\n         J     RXYOPND                 TYPE=54, RXY             @10C\n         J     RSOPND                  TYPE=58, RSY             @05A\n         J     SS4OPND                 TYPE=5C, SS4             @05A\n         J     RXOPND                  TYPE=60, RXE             @05A\n         J     INSTOUT                 TYPE=64, E               @09C\n         J     INSTOUT                 TYPE=68, SSF             @09A\n         J     INSTOUT                 TYPE=6C, SIL             @09A\n         J     SIYOPND                 TYPE=70, SIY             @11A\n         J     INSTOUT                 TYPE=74, RRFA            @14A\n         J     INSTOUT                 TYPE=78, RRFB            @14A\n         J     INSTOUT                 TYPE=7C, RRFC            @14A\n         J     INSTOUT                 TYPE=80, RRFD            @14A\n         J     INSTOUT                 TYPE=84, RRFE            @14A\n         J     INSTOUT                 TYPE=88, RSY2            @09A\n         J     RI1OPND                 TYPE=8C, RIE             @11A\n         J     INSTOUT                 TYPE=90, RSL 1           @11A\n         J     INSTOUT                 TYPE=94, RSL 2           @11A\n         J     INSTOUT                 TYPE=98, RSA             @11A\n         J     INSTOUT                 TYPE=9C, SSE2            @11A\nOPNDRTN  J     INSTOUT                 NORMAL OPERAND FORMAT RETURN\nNOTINST  J     CONST                   ERROR INSTRUCTION, TREAT AS CONS\nINSTOUT  AH    R7,ILENG                STEP TO NEXT TEXT BYTE\n         ST    R7,TXTCURR              SAVE NEXT ADDR\n         MVC   CCTYPE,ICCSET           SHOW COND CODE SET TYPE\n         J     GETCURR\n*\n******************************************************************\n*                                                                *\n* GENERAL OP-CODE TESTS TO VERIFY THAT FLOATING-POINT OP-CODES   *\n* ARE INDEED OP-CODES.                                           *\n*                                                                *\n******************************************************************\n*\nFPVERFY  EQU   *                       *** VALIDATE FLOATING POINT OP-C\n         TM    1(R7),X'90'             R1 IS 0, 2, 4, OR 6\n         JNZ   CONST                   NO, NOT INSTR\n         CLI   0(R7),X'27'             MXDR OP-CODE\n         JE    FPR1EXT                 YES\n         CLI   0(R7),X'67'             MXD OP-CODE\n         JNE   FPCKTYP                 NO\nFPR1EXT  TM    1(R7),X'B0'             R1 IS 0 OR 4\n         JNZ   CONST                   NO, NOT INSTR\nFPCKTYP  CLI   ITYPE,RR                RR TYPE INSTRUCTION\n         JNE   FPRXVER                 NO\n         TM    1(R7),X'09'             R2 IS 0, 2, 4, 6\n         JNZ   CONST                   NO, NOT INSTR\n         CLI   0(R7),X'25'             LRDR OP CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'37'             SXR OP-CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'26'             MXR OP-CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'36'             AXR OP-CODE\n         JNE   PFMFMT                  NO, GOOD INSTR\nFPR2EXT  TM    1(R7),X'0B'             R2 IS 0 OR 4\n         JZ    PFMFMT                  YES, GOOD INSTR\n         J     CONST                   NO, NOT INSTR\nFPRXVER  CLI   PRIVASM,1               PRIVILEGED INSTRUCTIONS O.K.\n         JE    FPALIGN                 YES\n         TM    2(R7),X'F0'             ANT BASE REG\n         JNZ   FPALIGN                 YES\n         TM    1(R7),X'0F'             ANY INDEX REG\n         JZ    CONST                   NO, NOT INSTR\nFPALIGN  TM    2(R7),X'F0'             ANY BASE REG\n         JNZ   PFMFMT                  YES, ACCEPT INSTR\n         TM    1(R7),X'0F'             ANY INDEX REG\n         JNZ   PFMFMT                  YES, ACCEPT INSTR\n         TM    3(R7),X'03'             DISPL DIV BY 4\n         JNZ   CONST                   NO, NOT INSTR\n         TM    ICLASS,FLSHT            SHORT PRECISION\n         JO    PFMFMT                  YES, ACCEPT INSTRUCTION\n         TM    3(R7),X'07'             DISPL DIV BY 8\n         JZ    PFMFMT                  YES, ACCEPT INSTR\n         J     CONST                   NO, NOT INSTR\n*\n******************************************************************\n*                                                                *\n* PROCESS TEXT BYTES DETERMINED TO BE CONSTANT DATA.             *\n*                                                                *\n******************************************************************\n*\nCONST    DS    0H                      *** PROCESS CONSTANTS ***\n         MVI   WORKREC,C' '            CLEAR WORK RECORD AREA\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\nCCNEW    MVI   CONPROG,1               SHOW CONSTANT IN PROGRESS\n         MVC   CONOFST,TXTOFST         SET OFFSET TO 1ST BYTE\n         MVC   CONLEN,XZROS            CLEAR LENGTH\n         CLC   TXTOFSET,LBLADR         LABEL AT THIS OFFSET\n         JE    CLBLD                   YES\nTRTYPE   TRT   0(1,R7),CHARTRAN        CHECK DATA TYPE OF BYTE\n         JNZ   CCSHX                   IT'S HEX\n         MVI   CONTYPE,C'C'            IT'S CHAR, SO INDICATE\n         J     CUPDCON                 GO COMPLETE\nCCSHX    MVI   CONTYPE,C'X'            IT'S HEX, SO INDICATE\n         J     CUPDCON                 GO COMPLETE\nCLBLD    CLI   LBLTYP,C'L'             IS IT A LABEL ONLY\n         JNE   CDATACON                NO\n         AHI   R6,LABELL               TO NEXT LABEL ENTRY        @10C\n         CLC   TXTOFSET,LBLADR         THIS LABEL AT SAME ADDR\n         JNE   TRTYPE                  NO\n         CLI   LBLTYP,C'L'             THIS ANOTHER LABEL ONLY\n         JNE   CDATACON                NO\n         AHI   R6,LABELL               TO NEXT LABEL ENTRY        @10C\n         J     CCNEW                   GO TO NEXT LABEL\n*DATACON MVC   CONTYPE,LBLTYP    ??    TYPE TO CONSTANT AREA\nCDATACON DS    0H                      TYPE TO CONSTANT AREA       @08A\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,LBLLEN               PICK UP CONSTANT LENGTH\n         STH   R1,CONLEN               SAVE CONSTANT LENGTH\n         SR    R11,R11                 CLEAR WORK REG\n         IC    R11,LBLLEN              PICK UP LENGTH\n         AR    R7,R11                  STEP PAST TEXT\n         ST    R7,TXTCURR              UPDATE TEXT ADDRESS\n         JAS   R9,FORCONST             FORCE CONSTANT OUT\n         AHI   R6,LABELL               STEP TO NEXT LABEL ENTRY    @10C\n         J     GETCURR                 CONTINUE TEXT PROCESS\nCUPDCON  LH    R11,CONLEN              GET CURRENT LENGTH\n         AHI   R11,1                   ADD 1\n         STH   R11,CONLEN              UPDATE LENGTH\n         CLI   CONTYPE,C'C'            CHARACTER CONSTANT\n         JE    CCK8                    YES\n         TM    CONOFST+3,1             OFFSET IS ODD\n         JO    CCFIN1                  YES\n         TM    CONOFST+3,2             HALFWORD OFFSET\n         JZ    CCFWD                   NO\n         CLI   CONLEN+1,1              HALFWORD, IS LENGTH = 1\n         JE    CCXIT1                  YES\n         J     CCFIN1                  NO\nCCFWD    CLI   CONLEN+1,4              NO, IS HEX CONST 4 BYTES\n         JL    CCXIT1                  NOT YET\nCCFIN1   JAS   R9,FORCONST             MAX LENG, FORCE IT OUT\n         J     CCXIT1                  FINISH\nCCK8     CLI   CONLEN+1,18             CHAR CONSTANT 18 BYTES     @06C\n         JNL   CCFIN1                  YES\nCCXIT1   AHI   R7,1                    STEP OVER 1 BYTE IN TEXT\n         ST    R7,TXTCURR              UPDATE TEXT ADDR\n         J     GETCURR                 CONTINUE TEXT PROCESSING\n         DROP  R6\n*\n*\n*\n******************************************************************\n*                                                                *\n* CLEAR OUT AREAS SET UP FOR CONSTANT DATA.                      *\n*                                                                *\n******************************************************************\n*\nFORCONST EQU   *                   *** FORCE OUT CONSTANT IN PROGRESS\n         MVI   CONPROG,0               RESET CONSTANT IN PROGRESS\n         MVI   CONTYPE,0               RESET TYPE\n         XC    CONLEN,CONLEN           CLEAR LENGTH\n         MVC   CONOFST,XZROS           CLEAR OFFSET TO CONSTANT\n         BR    R9                      EXIT\n*\n******************************************************************\n*                                                                *\n* PROCESS RX-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *\n*                                                                *\n******************************************************************\nRXOPND   DS    0H                      *** RX FORMAT INSTRUCTIONS ***\n         CLI   0(R7),X'07'             CONDBR REGISTER INSTR ??   @06A\n         JE    INSTOUT                 YES                        @06A\n         ICM   R11,3,TEXT+2            GET BDDD\n         LHI   R10,4                   SET LENGTH = 4\n         TM    INLNG,E4                FULLWORD OPERAND\n         JO    RXBDDD                  YES\n         LHI   R10,2                   SET LENGTH = 2\n         TM    INLNG,E2                HALFWORD OPERAND\n         JO    RXBDDD                  YES\n         LHI   R10,1                   SET LENGTH = 1\n         TM    INLNG,E8                DOUBLEWORD OPERAND\n         JZ    RXBDDD                  NO\n         LHI   R10,8                   YES, SET LENGTH = 8\nRXBDDD   J     BDLADR                  CHECK LABEL\n******************************************************************\n* PROCESS RI-FORMAT INSTRUCTIONS. THE OPERAND IS RESOLVED BY     *\n* ADR = CURRENT ADR + 2*OFFSET                                   *\n* R11 = R11 + OFFSET + OFFSET                                    *\n******************************************************************\nRI1OPND  DS    0H                *** RI FORMAT INSTRUCTIONS ***\n         LR    R11,R7                  LOAD CURRENT OFFSET      @04A\n         S     R11,TXTSTRT             MINUS PROGRAM START      @04A\n         AH    R11,2(R7)            R11 = RELATIVE BR ADDRESS   @04A\n         AH    R11,2(R7)            R11 = CURRENT + 2*OFFSET    @04A\n         C     R11,CSTLENG             IGNORE IF IT IS BEYOND   @04A\n         JH    CONST                   THE PROGRAM BOUNDARY     @04A\n         CHI   R11,0                   IGNORE IF IT IS BEYOND   @04A\n         JL    CONST                   THE PROGRAM BOUNDARY     @04A\n         J     BDLADDR                 ADD A NEW LABEL          @04A\n******************************************************************\n*                                                                *\n* PROCESS RIL-FORMAT INSTRUCTIONS. THE OPERAND IS RESOLVED BY    *\n* ADR = CURRENT ADR + 2*OFFSET                                   *\n*                                                                *\n******************************************************************\nRIL1OPND DS    0H                     *** RIL FORMAT INSTRUCTIONS ***\n         LR    R11,R7                  GET CURRENT OFFSET     @04A\n         S     R11,TXTSTRT             MINUS PROGRAM START    @04A\n         A     R11,2(R7)                                      @04A\n         A     R11,2(R7)                                      @04A\n         C     R11,CSTLENG             IGNORE IF IT IS BEYOND @04A\n         JH    CONST                   THE PROGRAM BOUNDARY   @04A\n         C     R11,XZROS               IGNORE IF IT IS BEYOND @04A\n         JL    CONST                   THE PROGRAM BOUNDARY   @04A\n         J     BDLADDR                 CHECK LABEL            @04A\n******************************************************************\n*                                                                *\n* PROCESS S-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS   *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *\n*                                                                *\n******************************************************************\n*\nSOPND    DS    0H                      *** S FORMAT INSTRUCTIONS ***\n         CLI   1(R7),0                 BYTE 2 OF INSTR IS ZERO\n         JE    SCK2                    YES\n         CLI   0(R7),X'80'             NO, IS IT SSM D\n         JE    NOTINST                 YES, NOT INSTR\n         CLI   0(R7),X'82'             NO, IS IT LPSW\n         JE    NOTINST                 YES, NOT INSTR\n         CLI   0(R7),X'93'             NO, IS IT TS\n         JE    NOTINST                 YES, NOT INSTR\nSCK2     CLI   0(R7),X'A7'             OP-CODE IS A7             @04A\n         JE    SSTRT                     BRANCH IF YES           @04A\n         CLI   0(R7),X'C5'             OP-CODE IS C5             @04A\n         JE    SSTRT                     BRANCH IF YES           @04A\n         CLI   0(R7),X'C0'             OP-CODE IS C0             @04A\n         JE    SSTRT                     BRANCH IF YES           @04A\n         CLI   0(R7),X'B2'             OP-CODE IS B2             @02A\n         JNE   SSTRT                     BRANCH IF NO            @02A\n         CLC   2(2,R7),XZROS           3RD AND 4TH BYTES ZERO\n         JE    SSTRT                   YES\n         CLI   1(R7),X'0B'             IPK INSTRUCTION\n         JE    NOTINST                 YES, NOT INSTR\n         CLI   1(R7),X'0D'             PTLB INSTR\n         JE    NOTINST                 YES, NOT INSTR\nSSTRT    SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD\n         LHI   R10,4                   SET LENGTH = 4\n         TM    INLNG,E4                FULLWORD OPERAND\n         JO    SBDDD                   YES\n         LHI   R10,2                   SET LENGTH = 2\n         TM    INLNG,E2                HALFWORD OPERAND\n         JO    SBDDD                   YES\n         LHI   R10,1                   SET LENGTH = 1\n         TM    INLNG,E8                DOUBLEWORD OPERAND\n         JZ    SBDDD                   NO\n         LHI   R10,8                   YES, SET LENGTH = 8\nSBDDD    J     BDLADR                  CHECK FOR LABEL\n*\n*\n*\n******************************************************************\n*                                                                *\n* PROCESS SI-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *\n*                                                                *\n******************************************************************\n*\nSIOPND   DS    0H                      *** BUILD SI OPERAND LABEL ***\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         SR    R10,R10                 LENGTH=DON'T CARE\n         J     BDLADR                  CHECK FOR LABEL\n******************************************************************\n*                                                                *\n* PROCESS SI-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *\n*                                                                *\n******************************************************************\n*\nSIYOPND  DS    0H                      *** BUILD SIY OPERAND LABEL\n         CLI   TEXT+4,X'00'\n         JNE   INSTOUT\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         SR    R10,R10                 LENGTH=DON'T CARE\n         J     BDLADR                  CHECK FOR LABEL\n******************************************************************\n*                                                                *\n* PROCESS RXY-FORMAT OPERAND                                     *\n*                                                                *\n******************************************************************\nRXYOPND  DS    0H                      *** RXY INSTRUCTIONS  ***\n         CLI   4(R7),X'00'                                         @11A\n         JE    RSOPND                  BRANCH IF HI DISP IS ZERO   @11A\n         SR    R11,R11\n         ICM   R11,3,2(R7)             LOAD BDDD INTO R11\n         LR    R2,R11                  COPY BDDD TO R2\n         SRL   R2,12                   RIGHT JUSTIFY BASE REG\n         MHI   R2,USINGL               TIMES ENTRY LENGTH\n         LA    R2,BASESR(R2)           @ BASE REG TABLE ENTRY\n         USING USINGD,R2\n         CLI   USTYPE,C'P'             IS IT A PROGRAM BASE\n         JNE   BDLXIT                  NO\n         SLL   R11,20                  ISOLATE THE\n         SRL   R11,20                  DDD IN R11\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,USVALU             GET BASE REG VALUE\n         AR    R11,R1         R11 = DISPLACEMENT (R11) + BASE (R1)\n         SR    R0,R0                   CLEAR R1 FOR IC INSTRUCTION @11A\n         IC    R0,4(R7)                LOAD DISPLACEMENT HIGH      @11A\n         SLL   R0,12                                               @11A\n         AR    R11,R0                  R11 = DISP LOW + DISP HIGH  @11A\n         J     BDRXY                                               @11A\n*\n******************************************************************\n*                                                                *\n* PROCESS RS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESS  *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION.         *\n*                                                                *\n******************************************************************\n*\nRSEOPND  EQU   *                       *** RSE FORMAT INSTR        ***\nRSOPND   DS    0H                      *** RS FORMAT INSTRUCTIONS  ***\n         CLI   ITYPE,L4                TWO-BYTE OP-CODE L4         @04A\n         JE    RSCMA1                  BRANCH IF YES               @04A\n         CLI   0(R7),X'88'             IS IT SHIFT INSTR\n         JL    RSCMA1                  NO\n         CLI   0(R7),X'8F'             IS IT SHIFT INSTR\n         JH    RSCMA1                  NO\n         TM    1(R7),X'0F'             SHIFT, IS R3 POS = 0\n         BZR   R9                      YES, GOOD SHIFT\n         J     NOTINST                 NO, NOT INSTR\nRSCMA1   SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         LHI   R10,4                   SET LENGTH = 4\n         TM    INLNG,E4                FULLWORD OPERAND\n         JO    RSBDDD                  YES\n         LHI   R10,2                   SET LENGTH = 2\n         TM    INLNG,E2                HALFWORD OPERAND\n         JO    RSBDDD                  YES\n         LHI   R10,1                   SET LENGTH = 1\n         TM    INLNG,E8                DOUBLEWORD OPERAND\n         JZ    RSBDDD                  NO\n         LHI   R10,8                   YES, SET LENGTH = 8\nRSBDDD   J     BDLADR                  CHECK FOR LABEL\n*\n*\n*\n******************************************************************\n*                                                                *\n* PROCESS SS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESSES*\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION. THE     *\n* SINGLE-LENGTH SS FORMAT INSTRUCTIONS ARE HANDLED HERE.         *\n*                                                                *\n******************************************************************\n*\nSS1OPND  DS    0H                      *** SS1 FORMAT INSTRUCTIONS ***\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET LENGTH CODE\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         LARL  R1,SS1RTN               GET RTEURN ADDR            @06A\n         MVC   SAVOP9,OPND9            SAVE NORMAL RETURN ADDR\n         ST    R1,OPND9                CHANGE RETURN ADDR TO SS1RTN\n         J     BDLADR                  CHECK LABEL\nSS1RTN   DS    0H\n         MVC   OPND9,SAVOP9            RESTORE NORMAL RETURN ADDR\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET SECOND BDDD ADDRESS\n         SR    R10,R10                 CLEAR LENGTH REG\n         IC    R10,TEXT+1              GET INSTR LENGTH\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         J     BDLADR                  CHECK FOR LABEL\n*\n*\n*\n******************************************************************\n*                                                                *\n* PROCESS SS-FORMAT INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESSES*\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION. THE     *\n* DOUBLE-LENGTH SS FORMAT INSTRUCTIONS ARE HANDLED HERE.         *\n*                                                                *\n******************************************************************\n*\nSS2OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - 2 L\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET L1L2\n         SRL   R10,4                   SHIFT OUT L2\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         LARL  R1,SS2RTN               GET RTEURN ADDR            @06A\n         MVC   SAVOP9,OPND9            SAVE NORMAL RETURN ADDR\n         ST    R1,OPND9                CHANGE RETURN ADDRESS\n         J     BDLADR                  CHECK LABEL\nSS2RTN   MVC   OPND9,SAVOP9            RESTORE NORMAL RETURN ADDR\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDR\n         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,DBLWD               PICK UP L2L1\n         SRL   R10,4                   SHIFT OUT L1\n         CLI   TEXT,X'F0'              SRP OP-CODE\n         JNE   SS2BDDD                 NO\n         IC    R10,TEXT+1              GET INSTR LENGTH\n         SRL   R10,4                   SHIFT OUT I3\nSS2BDDD  AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         J     BDLADR                  CHECK LABEL\n******************************************************************\n*                                                                *\n* PROCESS SS4 INSTRUCTIONS. THE BASE-DISPLACEMENT ADDRESSES      *\n* WILL BE SENT TO THE BDLADR ROUTINE FOR LABEL CREATION. THE     *\n* SINGLE-LENGTH SS FORMAT INSTRUCTIONS ARE HANDLED HERE.         *\n*                                                                *\n******************************************************************\nSS4OPND  DS    0H\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET FIRST BDDD ADDRESS\n         SR    R10,R10                 CLEAR LENGTH REG\n         IC    R10,TEXT+1              GET LENGTH\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         LARL  R1,SS4RTN               GET RTEURN ADDR            @06A\n         MVC   SAVOP9,OPND9            SAVE NORMAL RETURN ADDR\n         ST    R1,OPND9                CHANGE RETURN ADDR TO SS1RTN\n         J     BDLADR                  CHECK FOR LABEL\nSS4RTN   DS    0H                      *** SS1 FORMAT INSTRUCTIONS ***\n         MVC   OPND9,SAVOP9            RESTORE NORMAL RETURN ADDR\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET LENGTH CODE\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET SECOND BDDD ADDRESS\n         J     BDLADR                  CHECK LABEL\n*\n*\n*\n******************************************************************\n*                                                                *\n* PROCESS SVC INSTRUCTIONS. THE SOLE PROCESSING IS TO VERIFY THAT*\n* THIS IS A VALID SVC.                                           *\n*                                                                *\n******************************************************************\n*\nSVCOPND  EQU   *                       *** SVC INSTRUCTIONS ***\n         CLI   TEXT+1,139              SVC NO > 139\n         JH    NOTSVC                  YES, NOT SVC\n*        LRL   R1,SVCTBLAD             GET SVC TABLE ADDRESS\n         L     R1,SVCTBLAD             GET SVC TABLE ADDRESS\nSVCKND   CLI   0(R1),X'FF'             END OF SVC TABLE\n         JE    NOTSVC                  YES, MUST NOT BE SVC\n         CLC   0(1,R1),TEXT+1          THIS THE ENTRY\n         JE    GOTSVC                  YES\n         AHI   R1,SVCOPLEN             STEP TO NEXT ENTRY\n         J     SVCKND                  LOOP THRU TABLE\nNOTSVC   B     4(R9)                   ERROR RETURN\nGOTSVC   BR    R9                      EXIT, NO STORAGE OPND\n*\n*\n*\n******************************************************************\n*                                                                *\n* SET UP CURRENT BASE REGISTERS IN THE BASE TABLE. THE USING     *\n* TABLE IS SCANNED FOR ENTRIES VALID AT THE CURRENT TEXT OFFSET. *\n* WHEN A BASE REGISTER ENTRY IS FOUND TO BE VALID AT THE CURRENT *\n* TEXT OFFSET, THE USING ENTRY IS MOVED TO THE APPROPRIATE LOC-  *\n* ATION IN THE BASE TABLE FOR USE BY THE BDLADR ROUTINE. THE TEXT*\n* OFFSET TO THE NEXT BASE REGISTER CHANGE IS SET SO THAT THIS    *\n* ROUTINE WILL AGAIN BE ENTERED WHEN THE CURRENT BASE REGISTERS  *\n* ARE EXHAUSTED.                                                 *\n*                                                                *\n******************************************************************\n*\nNEXUSG   EQU   *                       *** GET NEXT BASE REGS ***\n         MVI   MORUSG,0                RESET INDICATOR\n         XC    BASESR,BASESR           CLEAR OLD BASE REG VALUES\n         MVC   NEXCHG,HIVAL            SET NEXT CHANGE LOC HIGH\n         L     R2,USGSTRT              GET USING TBL START\n         USING USINGD,R2\nENDUS    CLI   0(R2),X'FF'             END OF TABLE\n         BER   R9                      YES, EXIT\n         CLC   TXTOFSET,USEND          PAST THIS ONE\n         JNL   ECSTEP                  YES\n         OI    MORUSG,1                SHOW MORE BASES AVAILABLE\nUSBGCK   CLC   TXTOFSET,USBGN          THIS STARTS LATER\n         JNL   CKNEWLO                 NO\n         CLC   USBGN,NEXCHG            BEGINS BEFORE NEXT CHG\n         DS    0H\n         JNL   ECSTEP                  NO\n         MVC   NEXCHG,USBGN            YES, SET NEW CHANGE OFFSET\n         J     ECSTEP                  CONTINUE\nCKNEWLO  CLC   USEND,NEXCHG            NEW LOW CHANGE ADDR\n         JNL   ECMVC                   NO\n         MVC   NEXCHG,USEND            YES, SET LOWER OFFSET\nECMVC    SR    R1,R1                   CLEAR WORK\n         IC    R1,USREG                PICK UP REGISTER\n         MHI   R1,USINGL               TIMES ENTRY LENGTH          @10C\n         LA    R1,BASESR(R1)           @ TABLE ENTRY\n         MVC   0(USINGL,R1),USBGN      ENTRY TO TABLE              @10C\n         OI    MORUSG,X'80'            SHOW BASE REG CURRENT\nECSTEP   AHI   R2,USINGL               TO NEXT USING TBL ENTRY     @10C\n         J     ENDUS                   LOOP THRU USING TBL\n         DROP  R2\n*\n******************************************************************\n*                                                                *\n* A BASE-DISPLACEMENT IS PROVIDED IN REG 11 ON ENTRY. IF ANY     *\n* BASE REGISTERS ARE CURRENT, AND THE BASE REGISTER FOR THE GIVEN*\n* ADDRESS IS A CURRENT PROGRAM BASE REGISTER, A LABEL ENTRY IS   *\n* BUILT. OFFSET TO THE LABEL WILL BE FOUND BY ADDING THE ASSUMED *\n* BASE REGISTER VALUE TO THE GIVEN DISPLACEMENT. THE LABEL NAME  *\n* WILL BE THE LETTER 'A' FOLLOWED BY THE OFFSET.                 *\n* INPUT  : R11 CONTAINS BDDD                                     *\n*                                                                *\n*                                                                *\n******************************************************************\n*\nBDLADR   EQU   *                       *** BUILD LABEL ENTRIES ***\n         TM    MORUSG,1                ANY BASES CURRENT\n         JZ    BDLXIT                  NO\n         LR    R2,R11                  COPY BDDD ADDRESS\n         SRL   R2,12                   RIGHT JUSTIFY BASE REG\n         MHI   R2,USINGL               TIMES ENTRY LENGTH\n         LA    R2,BASESR(R2)           @ BASE REG TABLE ENTRY\n         USING USINGD,R2\n         CLI   USTYPE,C'P'             IS IT A PROGRAM BASE\n         JNE   BDLXIT                  NO\n         SLL   R11,20                  ISOLATE THE\n         SRL   R11,20                  DDD IN R11\n         SR    R1,R1                   CLEAR WORK\n         ICM   R1,7,USVALU             GET BASE REG VALUE\n         AR    R11,R1            R11 = DISPLACEMENT (R11) + BASE (R1)\n         DROP  R2\nBDRXY    L     R1,CURRLBL              GET LBL TBL ADDR\n         C     R1,ENDLBL               END OF TABLE\n         JL    GOTHOLE                 NO\n         JAS   R9,COMPLBL              YES, COMPRESS DUPLICATES\nBDLADDR  DS    0H                      *** BUILD LABEL ENTRIES ***\n         L     R1,CURRLBL              GET NEW CURRENT LBL ADDR\n         C     R1,ENDLBL               STILL AT END\n         JNL   CRASH        ** S0C1 ** YES, TERMINATE THIS STAGE\n         USING LABELD,R1\nGOTHOLE  STCM  R11,7,LBLADR            SET LABEL ENTRY OFFSET\n         MVI   LBLNAME,C'A'            BEGIN LABEL NAME\n         CLI   TEXT,X'44'              EXECUTE OP CODE ??         @07A\n         JNE   NOTEXEC                 BRANCH IF NO               @07A\n         MVI   LBLNAME,C'X'            BEGIN LABEL NAME X         @07A\nNOTEXEC  LA    R12,LBLADR              @ OFFSET\n         JAS   R9,HEXPRT3              GO CONVERT\n         MVC   LBLNAME+1(L'LBLNAME-1),BLANX  INITIALISE TO BLANKS\n         MVC   LBLNAME+1(6),PRTABL     REST OF NAME\n         MVI   LBLTYP,C'L'             SET LABEL TYPE\n         LR    R0,R7                   CALCULATE THE              @06A\n         S     R0,TXTSTRT                   REFERENCE ADDRESS     @06A\n         STCM  R0,7,LBLREF             SAVE REFERENCE ADDRESS     @06A\n         CLI   IOLNG,X'00'             OPERAND LENGTH = 0 ?       @11A\n         JNE   BDLLEN                  BRANCH IF NOT ZERO         @11A\n         CLI   ITYPE,RB                BRANCH INSTRUCTION ??      @04A\n         JNE   BDLSTP                  BRANCH IF NOT              @04A\nINSTREF  SR    R12,R12                 CLEAR WORK REG\n         A     R11,TXTSTRT             R11 = BASE + START\n         LHI   R10,4                   ASSUME LENGTH IS 4\n         TM    TEXT,X'C0'              OP CODE C0  ??             @04A\n         JM    BDLSTP                  01 OR 10 IS 4-BYTE INSTR   @04A\n         JO    BDLSIX                  YES, SIX-BYTE INSTR        @04A\n         LHI   R10,2                   BOTH OFF, 2-BYTE INSTR     @04A\n         J     BDLSTP                  CONTINUE                   @04A\nBDLLEN   SR    R10,R10                 CLEAR FOR IC INSTR         @11A\n         IC    R10,IOLNG               GET OPERAND LENGTH         @11A\n         J     BDLSTP                  CONTINUE                   @11A\nBDLSIX   LHI   R10,6                   SET LABEL LENGTH TO 6\nBDLSTP   STC   R10,LBLLEN              LENGTH TO LABEL ENTRY\n         CLI   ICLASS,X'00'                                       @06A\n         JE    BDLNXT                                             @06A\n         CLI   ICLASS,8                                           @06A\n         JH    BDLNXT                                             @06A\n         MVC   LBLLEN,ICLASS                                      @07A\nBDLNXT   DS    0H                                                 @07A\n         AHI   R1,LABELL               TO NEXT LABEL ENTRY        @10C\n         ST    R1,CURRLBL              SAVE UPDATED TBL ADDR\nBDLXIT   L     R9,OPND9                GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R1\n*        CLC   XOFST,TXTOFSET   *** DEBUG\n*        JNE   QQQQ2            *** DEBUG\n*        DC    X'0000'          *** DEBUG\n*QQQ2    DS    0H               *** DEBUG\n******************************************************************\n*                                                                *\n* SORT THE LABEL TABLE AND ELIMINATE ANY DUPLICATE ENTRIES.      *\n*                                                                *\n* R7 = @ OF LBLTBL                                               *\n*                                                                *\n******************************************************************\n*\nCOMPLBL  DS    0H                 *** COMPRESS AND SORT LABEL TABLE\n         USING LABELD,R6\n         L     R6,LBLTBL               GET LABEL TABLE ADDR D\nLBSTPASS LA    R7,LABELL(R6)           @ NEXT LABEL TABLE ENTRY    @10C\nLBLND    C     R7,CURRLBL              AT TABLE END\n         JL    LBSAMPS                 NO\nNEXPAS0  AHI   R6,LABELL               TO TEXT LABEL ENTRY         @10C\n         C     R6,CURRLBL              END OF TABLE\n         JL    LBSTPASS                NO\n         J     LBFEND                  YES, FIND END\nLBSAMPS  CLC   LBLADR,LBLADR-LABELD(R7) IDENTICAL OFFSETS\n         JH    LBSWCH                  NO, FIRST HIGH, SWITCH\n         JL    LBSTP                   NO, LOW, CONTINUE SCAN\n         CLC   0(LABELL-3,R6),R7       ENTRIES ARE IDENTICAL       @07C\n         JNE   LBCKLBL                 NO\nLBNULL2  MVC   LBLADR-LABELD(L'LBLADR,R7),HIVAL    YES, NULL 2ND\n         J     LBSTP                   AND CONTINUE SCAN\nLBCKLBL  CLC   LBLNAME,LBLNAME-LABELD(R7) IDENTICAL LABELS\n         JNE   LBCKTYP                 NO, CHECK TYPES\n         CLC   LBLLEN,LBLLEN-LABELD(R7)                            @07C\n         JH    LBNULL2\n         MVC   LBLLEN,LBLLEN-LABELD(R7)                            @07C\n*        DC    X'0000'\nLBCKLN   CLI   LBLLEN,0                THIS ENTRY LENGTH = 0\n         JNE   LBCKLN2                 NO\nLBCKLN2  CLC   LBLLEN,LBLLEN-LABELD(R7) COMPARE LENGTHS\n         JH    LBSWCH                  1ST LENGTH HIGH, SWITCH ENTRIES\n         J     LBNULL2                 1ST LOW/=, NULL 2ND\nLBCKTYP  CLC   LBLTYP,LBLTYP-LABELD(R7) SAME ENTRY TYPE\n         JNE   LBCK1L                  NO, CHK TYPE ORDER\n         CLI   LBLTYP,C'L'             TYPE LABLE ??\n         JE    LBSTP                   YES, CONTINUE SCAN\n         CLI   LBLTYP,C'U'             USER LABEL ??\n         JNE   LBNULL2                 NO\n         J     LBSTP                   YES\nLBCK1L   CLI   LBLTYP,C'U'             1ST IS USER LABEL\n         JNE   LBCK2L                  NO\n         CLI   LBLTYP-LABELD(R7),C'L'   2ND IS TYPE L\n         JE    LBNULL2                 YES, NULL THE 2ND\n         J     LBSTP                   CONTINUE SCAN\nLBCK2L   CLI   LBLTYP-LABELD(R7),C'U'   2ND IS USER LABEL\n         JE    LBSWCH                  YES\n         CLI   LBLTYP,C'L'             1ST IS LABEL TYPE\n         JE    LBSTP                   YES, CONTINUE SCAN\nLBSWCH   MVC   WORKREC(LABELL),0(R6)   HOLD 1ST ENTRY              @10C\n         MVC   0(LABELL,R6),0(R7)      MOVE 2ND ENTRY TO 1ST       @10C\n         MVC   0(LABELL,R7),WORKREC    1ST ENTRY TO 2ND LOCATION   @10C\n         J     LBSAMPS                 GO RECHECK\nLBSTP    AHI   R7,LABELL               TO NEXT LABEL ENTRY         @10C\n         J     LBLND                   CONTINUE SCAN\nLBFEND   L     R6,LBLTBL               @ LABEL TABLE\nLBFCKFF  CLI   LBLADR,X'FF'            NULL ENTRY\n         JE    LBSTCURR                YES\n         C     R6,CURRLBL              AT FORMER END\n         JE    LBSTCURR                YES\n         AHI   R6,LABELL               TO NEXT ENTRY               @10C\n         J     LBFCKFF                 LOOP TO FIND END\nLBSTCURR ST    R6,CURRLBL              SAVE NEW TBL END ADDR\n         L     R0,LBLTBL               GET LABEL TABLE ADDR D\n         BR    R9                      EXIT\n         DROP  R6\n******************************************************************\n*                                                                *\n* END OF PHASE 1. SORT/COMPRESS THE LABEL TABLE AND RETURN.      *\n*                                                                *\n******************************************************************\nEOJ      EQU   *                       END OF INPUT\n         JAS   R9,COMPLBL              SORT/COMPRESS LABEL TBL\n         L     R6,LBLTBL               GET LABEL TABLE ADDR\n         USING LABELD,R6\nEOJCKND  C     R6,CURRLBL              END OF TABLE ??\n         JNL   EOJ2                    IF YES TERMINATE PROCESSING\n         CLI   LBLTYP,C'U'             USER LABEL\n         JNE   EOJSTEP                 NO\n         MVI   LBLTYP,C'L'             YES, CHANGE TO TYPE L\nEOJSTEP  AHI   R6,LABELL               TO NEXT ENTRY               @10C\n         J     EOJCKND                 CONTINUE LOOP\n         DROP  R6\nEOJ2     DS    0H                      CLEAR PRINT\n         MVI   PRT,C' '                CLEAR PRINT\n         MVC   PRT+1(L'PRT-1),PRT\n         MVC   0(3,R6),HIVAL    **DEBUG SET END INDIC             @05A\n         MVC   CTLOCUR,CTLSTRT         SET CTLOCUR = CTLSTRT      @08A\n         PR                            RETURN TO HDISASM          @05A\n*\n*\n*\n******************************************************************\n*                                                                *\n* CONVERT HEX BYTES TO THEIR PRINTABLE EQUIVALENTS. ON ENTRY, REG*\n* 12 CONTAINS THE ADDRESS OF THE FIRST BYTE TO BE CONVERTED. THE *\n* NUMBER OF BYTES IS DETERMINED BY THE ENTRY SELECTED. PRINTABLE *\n* HEX IS PLACED IN THE FIELD PRTABL, TWO CHARACTERS PER BYTE.    *\n*                                                                *\n******************************************************************\n*\nHEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE\nHEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX\nHEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE\n         TR    PRTABL(8),TRTBL         MAKE PRINTABLE\n         BR    R9                      EXIT\n*\n*\n*\n******************************************************************\n*                                                                *\n* PRINT A LINE USING THE SYSPRINT DCB DEFINED IN DISASM PHASE 0. *\n*                                                                *\n******************************************************************\n*\nPRINT    EQU   *                       PRINT ROUTINE\n         L     R1,PRINTDCB             @ SYSPRINT DCB\n         TM    48(R1),X'10'            IS SYSPRINT OPEN\n         JNO   CLRPRT                  NO\n         PUT   (1),PRTLINE             WRITE PRINT LINE\nCLRPRT   DS    0H\n         MVI   PRT,C' '\n         MVC   PRT+1(L'PRT-1),PRT\n         AP    LINECT,P01              INCR LINE COUNTER\n         CLI   PCC,C' '                SINGLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P01              INCR LINE COUNTER\n         CLI   PCC,C'0'                DOUBLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P01              INCR LINE COUNTER\n         CLI   PCC,C'-'                TRIPLE SPACED\n         JE    SETSGL                  YES\n         ZAP   LINECT,P00              NO, MUST BE NEW PAGE\nSETSGL   MVI   PCC,C' '                SET SINGLE SPACING\n         CP    LINECT,P58              PAST END OF PAGE\n         JH    NEWPAGE                 YES\n         BR    R9                      EXIT\nNEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF\n         ZAP   LINECT,P00              RESET LINE COUNTER\n         BR    R9                      EXIT\n         DC    CL22'HDISASM1 VARIABLES ==>'\nDATAASM1 DS    0F                                                 @13A\nSVCTBLAD DC    V(SVCOPV)               @ SVC TABLE                @05A\nSGLOPAD  DC    V(SGLOPV)               @ ONE-BYTE OP-CODE TBL     @05A\nDBLOPAD  DC    V(DBLOPV)               @ TWO-BYTE OP-CODE TBL     @05A\nL3LOPAD  DC    V(L3LOPV)               @ RX AND RL OP-CODE TBL    @05A\nL4LOPAD  DC    V(L4LOPV)               @ RXY OP-CODE TBL          @05A\nCRASH    DC    X'0000'\nOPND9    DC    A(OPNDRTN)              RETURN ADDR FOR OPERAND RTN\nU01      DC    C'INVALID NAME COL 7-14'\nU02      DC    C'INVALID HEX OFFSET COL 14-19'\nU03      DC    C'INVALID REGISTER COL 21'                         @10C\n*04      DC    C'LABEL TABLE OVERFLOW'\nU04      DC    C'INVALID HEX OFFSET COL 25-29'\nU05      DC    C'UNDEFINED DSECT COL 25-32'\nU06      DC    C'OVER 256 USING CARDS'\nU07      DC    C'END BEFORE BEGIN'\nU08      DC    C'INVALID TYPE COL 23. MUST BE D OR P'             @10C\nU09      DC    C'INVALID NAME COL 1-12'                           @10C\nU10      DC    C'INVALID NBR FIELDS COL 16-19'\nU11      DC    C'INVALID OFFSET COL 14-18'                        @12C\nU12      DC    C'INVALID LENGTH COL 20-22'                        @12C\nU13      DC    C'1ST OFFSET INVALID HEX'\nU14      DC    C'2ND OFFSET INVALID HEX'\nU15      DC    C'END OFFSET BEFORE BEGIN'\nU16      DC    C'INVALID OFFSET COL 14-19 (CTLBK)'                @08A\nU17      DC    C'INVALID DSECT REGISTER COL 21'                   @08A\nU20      DC    C'*** USER ENTERED CARDS ***'\nU21      DC    C'INVALID NAME COL 7-18'                           @10A\nU22      DC    C'INVALID HEX OFFSET COL 20-25'                    @10A\nU23      DC    C'INVALID DECIMAL LENGTH COL 27-29'                @10A\nU24      DC    C'INITIAL VALUE > ENDING OFFET'                    @12A\nU25      DC    C'REDEFINE OFFSET NOT FIND'                        @13A\nU31      DC    C'UNIDENT OR OUT OF SEQ'                           @10C\n*XOFST   DC    XL3'01BEB0'            ** DEBUG\nS_EOD    DC    CL2'/*'                END OF DATA                 @06A\nS_EOJ    DC    CL2'//'                END OF JOB                  @06A\n*_USING  DC    CL5'USING'\nS_DSECT  DC    CL5'DSECT'\nS_DATA   DC    CL4'DATA'\nS_DATX   DC    CL4'DATX'                                           @09A\nS_HEX4   DC    CL4'HEX4'                                           @09A\nS_HEX2   DC    CL4'HEX2'                                           @09A\nS_CODE   DC    CL4'CODE'                                           @08A\nS_ASCII  DC    CL5'ASCII'                                          @15A\nS_CTLBK  DC    CL4'CTLBK'                                          @07A\nS_ULABL  DC    CL5'ULABL'\nTMPOFSET DC    XL3'00'                                             @13A\nSDSECTL  DS    F                       LENGTH OF MAIN DSECT TBL    @13A\nSDSECTA  DS    A                       ADDRESS OF MAIN DSECT TBL   @13A\nDSCT9    DS    F                       RETURN FOR DSECTS\nSAVOP9   DS    F                       SAVE AREA FOR OPND9\nULSAV    DS    7F                      SAVE AREA FOR CKADCON\nNOINAD   DS    F                       DATA ONLY TABLE ADDRESS\nNUMCK    DC    C'00000'                NUMERIC CHECK AREA          @12C\nZEROS    DC    C'00000'                CONSTANT ZEROS              @12C\nILENG    DC    H'0'                    INSTRUCTION LENGTH  FIX***\nF1SW     DC    X'00'                   @ FIRST TIME SWITCH         @06A\nREDEFSW  DC    X'00'                   REDEFINE SWITCH             @13A\nCODPROG  DC    X'00'                   CODE     IN PROGRESS INDIC  @07A\nCONPROG  DC    X'00'                   CONSTANT IN PROGRESS INDIC\nBASESR   DC    XL256'0'                CURRENT BASE REGS\n         DS    0H\nNEXCHG   DC    XL3'00'                 NEXT BASE REG CHG OFFSET\nMORUSG   DC    X'00'                   80=CURRENT BASE, 0=NO MORE BASES\nCONTYPE  DS    CL1                     TYPE\nCONLEN   DS    H                       CONSTANT LENGTH\nCONOFST  DS    F                       RELATIVE OFFSET TO CONSTANT\nCCTYPE   DC    X'00'                   CC SET TYPE OF INSTR SETTING\n*XTOFST  DS    0F\n*        DS    X\n*XTOFSET DS    XL3                     OFFSET TO TEXT BYTE\nOFFSET   DS    XL3                     OFFSET FROM PGM START\nINSTYP   DS    CL1                     INSTRUCTION TYPE\nTYPE     DS    XL1                     TYPE CODE\n*                                       0=CSECT, 1==DCON, 2=CONST\n*                                       E=USING, D=INSTRUCTION\n*                                       C=COMMENT, 9=ENTRY\n*                                       A=EQU\nLEN      DS    XL1                     TEXT LENGTH\nP00      DC    P'0'                    CONSTANT 0\nP01      DC    P'1'                    CONSTANT 1\nP58      DC    P'58'                   PACK CONSTANT 58\n*P256    DC    P'256'                  PACK CONSTANT 256\nP999     DC    P'999'                  PACK CONSTANT 999\nP32768   DC    P'32768'                PACK DECIMAL CONSTANT 32768 @11C\nUNAME    DC    CL8'A'                  USER NAME AREA\n         DC    CL2' '\nCHARTRAN DC    256X'FF'                TRT TABLE FOR CHAR/HEX DETERMINA\n         ORG   CHARTRAN+C' '\n         DC    X'00'                   BLANK IS CHARACTER\n         ORG   CHARTRAN+C'.' 4B\n         DC    4X'00'                  .   ARE CHARACTERS\n         ORG   CHARTRAN+C'A'\n         DC    9X'00'                  A-I ARE CHARACTERS\n         ORG   CHARTRAN+C'J'\n         DC    9X'00'                  J-R ARE CHARACTERS\n         ORG   CHARTRAN+C'S'\n         DC    8X'00'                  S-Z ARE CHARACTERS\n         ORG   CHARTRAN+C'0'\n         DC    10X'00'                 0-9 ARE CHARACTERS\n         ORG\nTRHEX    DC    256X'FF'                HEX TRANSLATION TABLE\n         ORG   TRHEX+C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TRHEX+C'0'\n         DC    X'00010203040506070809'\n         ORG\nTRTHEX   DS    0X                      VERIFY HEX TABLE\n         DC    XL16'00'\n         DC    XL240'FF'\n         ORG\n         LTORG\n*\n* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID\n* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,\n* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,\n* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.\n*\n*\nTEMP1    DS    C                                                   @04A\n* ------------------------------------------------\n*\n* ------------------------------------------------\n         DS    0D\n         COPY  HDISTD\nCOMMPARM DSECT ,                       COMMON AREAS\n         COPY  HDISTC\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISASM2": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x10f\\x10f\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 4198, "newlines": 4198, "modlines": 0, "user": "ASM"}, "text": "DIS2     TITLE '*** HDISASM DISASSEMBLY PHASE 2 ***'\n* THIS SUB-PROGRAM IS CALLED BY HDISASM AFTER THE DIRECTORY\n* ENTRY AND LOAD MODULE ARE PROCESSED. THE ESD AND RLD\n* ENTRIES HAVE BEEN USED TO CREATE A PROGRAM LABEL TABLE,\n* AND MODULE TEXT IS IN AN AREA OF STORAGE. A COMMON PARAMETER\n* AREA IS DEFINED IN HDISASM, AND PASSED TO THIS PROGRAM.\n*\n* TEXT BYTES ARE USED TO CREATE ASSEMBLY LANGUAGE STATEMENTS,\n* AND MACHINE INSTRUCTION STATEMENTS. OUTPUT IS WRITTEN\n* TO THE WORK1 DATASET FOR FURTHER PROCESSING BY OTHER\n* MODULES.\n*   A TEXT BYTE IS CONSIDERED TO BE AN INSTRUCTION IF\n* IT OCCURS ON A HALFWORD BOUNDARY, IS A VALID OP-CODE,\n* AND IS FOLLOWED BY A VALID OP-CODE. UNCONDITIONAL BRANCHES\n* NEED NOT BE FOLLOWED BY A VALID OP-CODE, HOWEVER. THE\n* PRIVILEGED AND FLOATING POINT INSTRUCTIONS ARE NOT\n* TREATED AS INSTRUCTIONS UNLESS THE USER SPECIFIED\n* THEIR INCLUSION AT EXEC TIME.\n*\n* R3 - DATA AREA OF HDISAMS2\n* R4 - WORK REGISTER OF SYSTEM CONTROL BLOCK SEARCHING\n* R5 - COMMON AREA\n* R6 - LABEL TABLE\n* R7 - CURRENT TEXT\n* R8 - WORK REGISTER\n* R9 - LINKAGE REGISTER FOR SUBROUTINE\n* R10- WORK REGISTER\n* R11- WORK REGISTER\n* R12- WORK REGISTER\n*\n* ORIGINAL AUTHOR R THORNTON - NOV 1977\n*\n* AMENDMENT ABSTRACT\n* 1. UPDATE TABLE SGLOP AND DBLOP TO SUPPORT XA INSTRUCTION\n*                                             ALBERT CHENG 10/13/87\n* 2. HANDLE RRE AND SSE FORMAT                ALBERT CHENG 10/13/87\n* 3. ENLARGE THE SVCOP TABLE FROM 14 TO 16    ALBERT CHENG 10/20/87\n* 4. HANDLE SS3 FORMAT (SS3OPND)              ALBERT CHENG 10/21/87\n* 5. EXTEND SVC TABLE, THE LARGEST SVC NO. CHANGED FROM 126 TO 139\n*                                             ALBERT CHENG 11/06/87\n* 6. FIX ENTRY CS AND CDS AT SGLOP FROM E4+EPR TO E4\n*                                             ALBERT CHENG 01/21/88\n* 7. FIX SOME BUGS AT ROUTINE INSTR           ALBERT CHENG 02/16/88\n*\n* 8. REMOVE THE RESTRICTION OF USING BASE\n*    REGISTER 0 FOR PSA                       ALBERT CHENG 03/09/91\n* 9. FORMAT EXTENDED MNEMONIC RR INSTRUCTION\n*                                             ALBERT CHENG 09/09/91\n* 10. FIX FORMAT NOP OPERAND\n*                                             ALBERT CHENG 06/24/92\n* 11. FIX COMMENT FIELD FOR SPKA\n*                                             ALBERT CHENG 11/07/92\n* 12. SUPPORT NEW ASSEMBLER INSTRUCTIONS\n*                                             ALBERT CHENG 01/16/07\n* 13. FIX BRANCH MNEMONIC CODE. USE NEW ASSEMBLER INSTR\n*                                             ALBERT CHENG 04/27/12\n* 14. A) GET RID OF PROGRAM BASE REGISTER. USE LARL TO\n*        ESTABLISH THE ADDRESSIBILITY OF STATIC DATA\n*     B) ADD ROUTINE SRCHDSCT TO FORMAT BDDD THEY ARE DEFINED IN THE\n*        IN GLOBAL MAPPING TABLES.\n*        Example:\n*        E3E000100017   LLGT  R14,16                  CVT\n*        E3FE007C0017   LLGT  R15,CVTIXVAL-CVT(R14)   I/O COMM AREA\n*        E3EF00080017   LLGT  R14,IOCOMWPT-IOCOM(R15) MDY PART OF IOC\n*                                                ALBERT CHENG 04/05/13\n* 15. A) SUPPORT MULTIPLE DSECTS\n*     B) CHANGE MAXIMUM LENGHT OF CONSTANT FROM 8 TO 48\n*     C) SUPPORT CODE ONLY STATEMENT\n*     D) SUPPORT INDEX REGISTER\n*                                                ALBERT CHENG 10/07/13\n* 16. A) SUPPORT CTLBK STATEMENT\n*     B) FORMAT CHARACTER WITH MIXED CASE\n*     C) REMOVE REDUNTANT CODE TO FORMAT CVT\n*     D) WRITE 2ND LINE IF THE OPERAND EXCEEED COLUMN 72\n*                                                ALBERT CHENG 03/12/14\n* 17. A) FORMAT DIAGNOSE INSTRUCTION\n*     B) FIX BUGS OF FORMATTING FLOATING POINT INSTRUCTION\n*     C) CHANGE SYSTEM VARIABLE TABLES FROM FIX LENGTH TO\n*        VARIABLE LENGTH.\n*                                                ALBERT CHENG 06/25/14\n* 18. A) NEW ROUTINE BITMAP TO FORMAT BIT MASK VARIABLES FOR\n*        SI INSTRUCTION\n*        TM    ASCBFL2A-ASCB(R9),ASCBNOPR     DO NOT SIGP ?\n*     B) FORMAT ARs, CRs and FRs\n*     C) WRITE CONTINOUS LINE IF THE DECODED INSTRUCTION EXCEEDS\n*        COLUMN 72\n*                                                ALBERT CHENG 10/17/14\n* 19. A) ADD COMMENT FILED TO DSECT TABLE\n*                                                ALBERT CHENG 01/22/15\n* 20. A) ADD DATX STATEMENT\n*     B) IF OFFSET 4 IS X'16C9' FORMAT IT AS MODID LENGLBL=24\n*     C) FIX FORMAT PROBLEM OF NOPR\n*     D) SUPPORT z/OS V.2 ASSEMBLER INSTRUCTION\n*                                                ALBERT CHENG 03/26/15\n* 21. A) SUPPORTS 6 CHARACTER INSTRUCTION NAME\n*     B) SUPPORTS SSF AND SIL FORMAT OP CODES\n*     C) ADD CONDITION CODE TABLE\n*                                                ALBERT CHENG 05/20/15\n* 22. A) PUT LABEL NAME INTO COMMENT FIELD\n*     B) CHANGE PROGRAM FROM AMODE 24 TO AMODE 31 &\n*                            RMODE 24 TO RMODE ANY\n*     C) ENHANCE FORMAT IMMEDIATE FIELD OF TM,OI,NI,MVI and CLI\n*                                                ALBERT CHENG 06/02/15\n*\n* 23. A) ADD SYSMODTB\n*     B) PRINT REGUSE REPORT FOR DEBUGGING PURPOSE\n*                                                ALBERT CHENG 07/16/15\n*\n* 24. A) ADD ! AS GLOBAL DSECT MAPPING INDICATOR\n*        ADD % AS PROGRAM DSECT MAPPING INDICATOR\n*        INIT DSECT TO BLANKS FOR @DUMMY\n*                                                ALBERT CHENG 08/25/15\n*\n* 25. A) EXTEND THE LENGTH OF USER DEFINE LABEL FROM 8 TO 12\n*     B) EXTEND THE LENGTH OF DSECT FIELD FROM 8 TO 12\n*                                                ALBERT CHENG 10/26/15\n*\n* 26. A) FIX BUGS\n*                                                ALBERT CHENG 01/05/16\n*\n* 27. A) ADD > and <  AS PROGRAM DSECT MAPPING INDICATOR\n*     B) ADD COMMENT TO SOME INSTRUCTION\n*                                                ALBERT CHENG 05/16/16\n*\n* 28. A) FIX FORMAT RXY AND RSY DISPLACEMENT\n*     B) SUPPORT RIE AND SIY INSTRUCTION\n*                                                ALBERT CHENG 09/04/16\n*\n* 29. A) SRCHDSCT AND BITMAP ROUTINE AS SUBPROGRAM\n*     B) SUPPORT RRFE INSTRUCTION\n*                                                ALBERT CHENG 02/01/17\n*\n* 30. A) AUTOMATIC MAPPING AND BUG FIXING\n*     B) SUPPORT RRF/RSA INSTRUCTION SETS\n*     C) CLEAR ALL DSECT\n*                                                ALBERT CHENG 07/15/17\n*\n* 31. A) SUPPORT CTLBK COMMENT\n*                                                ALBERT CHENG 05/26/19\n*     SCHLBL BDXADR\n******************************************************************\nHDISASM2 CSECT\nHDISASM2 RMODE ANY\nHDISASM2 AMODE 31\n         J     BEGIN                                             @14A\n         DC    C'HDISASM2'             PROGRAM NAME              @14A\n         DC    C'01.31'                VERSION NUMBER            @28C\n         DC    C'&SYSDATE &SYSTIME'    ASSEMBLE DATE AND TIME\n*---------------------------------------------------------------\n*\n*---------------------------------------------------------------\nBEGIN    BAKR  R14,0                   SAVE REGISTERS            @14A\n         LARL  R3,DATASTR2             SET DATA REGISTER         @14A\n         USING DATASTR2,R3                 ADDRESSIBILITY        @14A\n*        L     R5,0(R1)                GET PARM FIELD ADDRESS\n         LR    R5,R1                   GET PARM FIELD ADDRESS\n         USING COMMPARM,R5\n*        LARL  R0,HDISDSTB             LOAD HDISDSTB             @15A\n*        SR    R1,R1                                             @15A\n*        SVC   8                       LOAD HDISDSTB             @15A\n*        ST    R0,DATAAD               SAVE EPA OF HDISDSTB      @15A\n*        LARL  R0,HDISSFTB             LOAD HDISSFTB             @15A\n*        SR    R1,R1                                             @15A\n*        SVC   8                       LOAD HDISD2TB             @15A\n*        ST    R0,SFTAD                SAVE EPA OF HDISD2TB      @15A\n         LA    R0,OPNDS                                          @17A\n         AHI   R0,18                                             @17A\n*        MVC   CTLOPTR,CTLSTRT                                   @28A\n         SR    R0,R0                   CLEAR FOR ICM INSTR       @28A\n         ICM   R0,7,AOFST              AOFST = TXTSTRT           @28A\n         A     R0,TXTSTRT                        +  XOFST        @28A\n         ST    R0,AOFST                                          @28A\n* ****************************************************************\n*                                                                *\n* MAINLINE ROUTINE FOR DISASSEMBLY. EACH BYTE OF TEXT IS CHECKED *\n* TO DETERMINE WHETHER IT MAY BE AN INSTRUCTION OP-CODE. IF NOT, *\n* THE CONST ROUTINE IS PERFORMED TO HANDLE CONSTANT DATA. IF IT  *\n* APPEARS TO BE AN OP-CODE, THE INSTR ROUTINE IS PERFORMED.      *\n* WHEN TEXT IS EXHAUSTED, THIS PHASE TERMINATES AND CONTROL IS   *\n* RETUERNED TO MAIN ROUTINE HDISASM.                             *\n*                                                                *\n******************************************************************\n*\nMAINLINE DS    0H                      MAINLINE ROUTINE\n         L     R6,LBLTBL               @ LABEL TABLE\n         USING LABELD,R6\n         MVC   TXTCURR,TXTSTRT         COPY TEXT START ADDR\nGETCURR  L     R7,TXTCURR              @ CURRENT TXT BYTE\n         C     R7,TXTEND               END OF TEXT\n         JNL   EOJ                     YES\n         SR    R1,R1                   CLEAR WORK                  @12A\n         LR    R12,R7                  COPY TEXT ADDR\n         S     R12,TXTSTRT             COMPUTE OFFSET\n         ST    R12,TXTOFST             SAVE OFFSET TO THIS BYTE\n         CHI   R12,4                   OFFSET LOCATION 4 ?         @20A\n         JNE   DATA050                 BRANCH IF NO                @20A\n         CLC   XMODID,0(R7)            = X'16C9' ?                 @20A\n         JNE   DATA050                 BRANCH IF NO                @20A\n         AHI   R7,1                    STEP OVER 1 BYTE IN TEXT    @20A\n         MVC   OPNDS(2),SXAPO          TYPE AND BEGIN QUOTE X'     @20A\n         MVC   OPNDS+2(3),SX16         HARDCODE THE                @20A\n         MVC   PRT(6),SC004              OPERAND TO X'16' &        @20A\n         MVC   PRT+7(2),SX16             OFFSET TO 4               @20A\n         J     DATA400                                             @28C\nDATA050  L     R12,DATOCUR             LOAD DATA TABLE             @20C\n         CLC   HIVAL(3),DATASTRT-DATAD(R12) END OF DATA NAME TABLE @20A\n         JE    DATA750                 BRANCH IF YES               @20A\n         CLC   TXTOFSET,DATASTRT-DATAD(R12)   LOWER ?              @20A\n         JL    DATA750                 BRANCH IF NOT IN RANGE      @20A\n         CLC   TXTOFSET,DATAEND-DATAD(R12)    HIGHER ?             @20A\n         JH    DATA750                 BRANCH IF NOT IN RANGE      @20A\n         CLI   DATATYPE-DATAD(R12),C'C'  NORMAL DATA TYPE ?        @20A\n         JE    DATA750                 BRANCH IF YES               @20A\n         CLI   DATATYPE-DATAD(R12),C'H'  NORMAL DATA TYPE ?        @20A\n         JE    DATA200                 BRANCH IF YES               @20A\n         J     DATA200    ????         BRANCH IF YES               @20A\n*** HEX2 DATA TYPE not yet supported\n         XR    R9,R9                                               @20A\n         ICM   R9,7,DATAEND-DATAD(R12) LOAD ENDING OFFSET          @20A\n         S     R9,TXTOFST              ENDING OFFSET - CURRENT     @20A\n         CHI   R9,1                    > 1 ?                       @20A\n         JL    DATA750                 BRANCH IF ALMOST END OF DATX@20A\n         MVI   CONPROG,1                                           @20A\n         LA    R12,CONDATA             @ CONSTANT DATA             @20A\n         MVC   0(2,R12),0(R7)          COPY CONSTANT DATA          @20A\n         JAS   R9,HEXPRT2              CONVERT TO PRINTABLE        @20A\n         LA    R9,OPNDS                                            @28A\n         CLI   LBLNAME+8,C' '                                      @28A\n         JE    DATA300                                             @28A\n         AHI   R9,1                                                @28A\n*** HEXI DATA TYPE\nDATA200  XR    R9,R9                                               @20A\n         ICM   R9,7,DATAEND-DATAD(R12) LOAD ENDING OFFSET          @20A\n         S     R9,TXTOFST              ENDING OFFSET - CURRENT     @20A\n         CHI   R9,3                    > 3 ?                       @20A\n         JL    DATA750                 BRANCH IF ALMOST END OF DATX@20A\n         MVI   CONPROG,1                                           @20A\n         LA    R12,CONDATA             @ CONSTANT DATA             @20A\n         MVC   0(4,R12),0(R7)          COPY CONSTANT DATA          @20A\n         JAS   R9,HEXPRT4              CONVERT TO PRINTABLE        @20A\n         LA    R9,OPNDS                                            @28A\n         CLI   LBLNAME+8,C' '                                      @28A\n         JE    DATA300                                             @28A\n         AHI   R9,1                                                @28A\nDATA300  MVC   0(2,R9),SXAPO           TYPE AND BEGIN QUOTE X'     @28A\n         MVC   2(8,R9),PRTABL          MVC   OPNDS+2(1),PRTABL     @28A\n         MVI   10(R9),C''''            ENDING QUOTE '              @28A\n         MVC   OFFSET,TXTOFSET         @ OFFSET TO INSTR           @20A\n         MVI   LEN,X'04'               SET LENGTH TO 4             @20A\n         MVC   TEXT(4),0(R7)           COPY TEXT                   @20A\n         JAS   R9,TXTFMT               GO FORMAT HEX DATA          @20A\n         AHI   R7,4                    STEP OVER 4 BYTE IN TEXT    @20A\nDATA400  LA    R9,MNEMONIC                                         @28A\n         CLI   LBLNAME+8,C' '                                      @28A\n         JE    DATA500                                             @28A\n         AHI   R9,4                                                @28A\nDATA500  MVC   0(2,R9),S_DC            SET MNEMONIC DC             @28A\n         CLC   LBLADR,TXTOFSET         SAME OFFSET ?               @20A\n         JNE   DATA700                 BRANCH IF NOT TRUE          @20A\n         CLI   LBLNAME+8,C' '                                      @28A\n         JE    DATA600                                             @28A\n         MVC   NAME(L'LBLNAME),LBLNAME  NAME TO OUTPUT             @28A\n         J     DATA650                                             @28A\nDATA600  MVC   NAME,LBLNAME            NAME TO OUTPUT              @20A\nDATA650  AHI   R6,LABELL               POINT TO NEXT LABEL         @20A\nDATA700  DS    0H                                                  @20A\n         JAS   R9,WRTOUT               WRITE RECORD SYSPUNCH       @20A\n         JAS   R9,PRINT                GO PRINT IT SYSPRINT        @20A\n         ST    R7,TXTCURR              UPDATE TEXT ADDR            @20A\n         J     GETCURR                 CONTINUE TEXT PROCESSING    @20A\n* UPDATE DSECT TABLE\nDATA750  DS    0H                      SET MNEMONIC DC             @20A\n         L     R4,CTLOCUR              GET CTLBK ONLY TBL ADDR     @16A\n         CLC   TXTOFSET,0(R4)          SAME OFFSET ??              @16A\n         JL    CHGBASE                 CHANGE BASE REG IF LOWER    @16A\n         CLC   TXTOFSET,0(R4)          SAME OFFSET ??              @31A\n         JNE   DATA800                 CHANGE BASE REG IF LOWER    @31A\n         CLI   CTLCOMM-CTLD(R4),C' '   NO COMMENT ??               @31A\n         JE    DATA800                 BRANCH IF YES               @31A\n         MVC   COMMENT(L'CTLCOMM),CTLCOMM-CTLD(R4)                 @31A\nDATA800  XR    R14,R14                 CLEAR WORK REGISTER         @16A\n         CLI   CTLREG-CTLD(R4),C'*'    COMMENT ENTRY               @31A\n         JE    DATA900                 BRANCH IF YES               @31A\n         CLI   CTLCOMM-CTLD(R4),C'?'   NOT SURE ENTRY ?            @31A\n         JE    DATA900                 BRANCH IF YES               @31A\n         IC    R14,CTLREG-CTLD(R4)     LOAD DSECT BASE REGISTER    @23C\n         MHI   R14,DSREGEL             TABLE ENTRY LENGTH IS 13    @23C\n         LA    R0,DSREGTBL             LOCATE REG TABLE            @23A\n         AR    R14,R0                  R14 -> REG TABLE ENTRY      @23A\n         CLI   CTLCOMM-CTLD(R4),C' '   BLANK COMMENT ??            @31A\n         JE    DATA810                                             @31A\n         MVC   4(DSREGL+1,R14),CTLCOMM-CTLD(R4)  COPY DSECT        @31A\n         J     DATA900                                             @31A\nDATA810  CLC   S_CLEAR,CTLDSECT-CTLD(R4) CLEAR REGISTER ??         @30A\n         JE    DATA830                 BRANCH IF NOT CLEAR         @30A\n         CLC   S_DUMMY,CTLDSECT-CTLD(R4) DUMMY DSECT ??            @24A\n         JNE   DATA850                 BRANCH IF NOT DUMMY DSECT   @24A\n         MVC   4(DSREGL+1,R14),BLANX   CLEAR REG TABLE ENTRY       @24A\n         J     DATA900                                             @24A\nDATA830  LA    R4,14                                               @30A\nDATA835  MVC   4(DSREGL+1,R14),BLANX   CLEAR DSECT                 @30A\n         LA    R14,DSREGEL(,R14)                                   @30A\n         JCT   R4,DATA835                                          @30A\n         J     DATA900                                             @30A\nDATA850  MVC   4(DSREGL+1,R14),CTLTYPE-CTLD(R4)      COPY DSECT    @23C\nDATA900  CLC   CTLOFST-CTLD(L'CTLOFST,R4),HIVAL      LAST ENTRY ?? @28A\n         JH    CKCCODE                 BRANCH IF YES               @28A\n         AHI   R4,CTLBK                NEXT ENTRY                  @16A\n         ST    R4,CTLOCUR              UPDATE CURRENT DSECT PTR    @28A\nCHGBASE  DS    0H\n         CLC   NEXCHG,TXTOFSET         TIME TO CHANGE BASES\n         JH    CKCCODE                 NO                          @15A\n*****************************************************************\n*                                                                *\n* ENTERED WHENEVER THE CURRENT TEXT OFFSET IS PAST THE NEXCHG    *\n* FIELD VALUE. THIS ROUTINE CREATES DROP CARDS FOR EXHAUSTED BASE*\n* REGISTERS, AND USING STATEMENTS FOR NEW BASE REGISTERS. THE    *\n* BASES TABLE IS SCANNED, AND ANY ENTRY WHICH IS NO LONGER IN USE*\n* IS ZEROED OUT, AND A DROP RECORD IS CREATED. NEXT, THE USING   *\n* TABLE IS SCANNED. WHEN AN ENTRY IS FOUND WHICH IS VALID AT THE *\n* CURRENT OFFSET, THE BASE TABLE IS CHECKED. IF THE ENTRY IS NOT *\n* IN USE, A USING STATEMENT IN CREATED, AND THE USING TABLE ENTRY*\n* IS MOVED TO THE BASES TABLE. THE NEXCHG FIELD IS CHANGED TO    *\n* CONTAIN THE OFFSET AT WHICH THE NEXT SCAN MUST BE MADE. AN IND-*\n* ICATOR CALLED MORUSG IS SET TO SHOW WHEN ANY BASE REGISTERS ARE*\n* CURRENTLY IN USE. WHEN NO MORE REGISTERS ARE AVAILABLE, THE    *\n* NEXCHG FIELD IS SET TO HEX FF'S.                               *\n*                                                                *\n******************************************************************\n*\n*EXUSG   DS    0H                      *** GET NEXT BASE REG SET ***\n         MVC   NEXCHG,HIVAL            RESET NEXT CHANGE ADDR\n         MVI   MORUSG,0                CLEAR BASE REG AVAIL INDIC\n         LA    R2,BASES                CLEAR R0 ELEMENT            @23A\n         XC    0(USINGL,R2),0(R2)      CLEAR R0 USING TABLE ENTRY  @23A\n         USING USINGD,R2\n         AHI   R2,USINGL               @ R1'S ELEMENT OF BASE TABLE\n         LA    R8,15                   Loop 15 times               @23A\n****************************************************************\nDRPCKND  DS    0H                                                  @09A\n         CLC   USEND,XZROS             ENTRY USED\n         JE    DRPSTEP                 NO\n         CLC   TXTOFSET,USEND          PAST END OF THIS ONE\n         JL    DRPSTEP                 NO\n         MVC   MNEMONIC(4),S_DROP      SET OPERATION IS DROP\n         MVI   OPNDS,C'R'              DELIMITER FOR REGS\n         SR    R12,R12                 CLEAR WORK REGISTER\n         IC    R12,USREG               GET USING REGISTER\n         CVD   R12,DBLWD               CONVERT TO PACKED\n         UNPK  DBLWD(2),DBLWD+6(2)       UNPACK\n         OI    DBLWD+1,C'0'            CLEAR SIGN\n         CHI   R12,10                  REG < 10\n         JL    DPR1                    YES\n         MVC   OPNDS+1(2),DBLWD        MOVE REG NBR\n         J     WRTDROP                 GO WRITE DROP\nDPR1     MVC   OPNDS+1(1),DBLWD+1      MOVE 1-DIGIT REG\nWRTDROP  JAS   R9,WRTPUNCH             PUNCH DROP RECORD           @22A\n         JAS   R9,PRINT                PRINT DROP RECORD\n         XC    0(USINGL,R2),USBGN      CLEAR THE USING ENTRY       @25C\nDRPSTEP  AHI   R2,USINGL               TO NEXT USING ELEMENT\n         JCT   R8,DRPCKND              LOOP FOR 15 TIMES           @23C\n******************************************************************\nUSGUSG   L     R2,USGSTRT              GET FIRST USING TBL ADDR\nENDUSE   CLI   0(R2),X'FF'             END OF TABLE ??\n         JE    CKCCODE                 YES CHECK CODE RANGE        @15A\n         CLC   TXTOFSET,USEND          PAST END OF THIS ONE\n         JNL   ECSTEP                  YES\n         OI    MORUSG,1                SHOW MORE BASES AVAIL\nUSBGCK   CLC   TXTOFSET,USBGN          CURR LOC BEFORE THIS\n         JNL   CKNEWLO                 NO\n         CLC   USBGN,NEXCHG            BEGINS BEFORE NEXT CHANGE\n         JNL   ECSTEP                  NO\n         MVC   NEXCHG,USBGN            YES, SET LOWER CHANGE OFFSET\n         J     ECSTEP                  CONTINUE\nCKNEWLO  CLC   USEND,NEXCHG            THIS ENTRY ENDS EARLIER\n         JNL   ECMVC                   NO\n         MVC   NEXCHG,USEND            YES, SET NEW END\nECMVC    CLI   USREG,15             *** REG NO > 15                @18A\n         JH    CKCCODE              *** IMPOSSIBLE                 @18A\n         SR    R0,R0                   CLEAR WORK                  @23C\n         IC    R0,USREG                PICK UP REG                 @23C\n         MHI   R0,USINGL               TIMES ENTRY LENGTH          @23C\n         LA    R1,BASES                @ BASE TABLE ENTRY          @23C\n         AR    R1,R0                   @ BASE TABLE ENTRY          @23C\n         OI    MORUSG,X'80'            SHOW BASE IN USE\n         CLC   0(USINGL,R2),0(R1)      OLD AND NEW IDENTICAL       @25C\n         JE    ECSTEP                  YES\n         MVC   0(USINGL,R1),0(R2)      NEW USING TO TABLE          @25C\n         MVC   MNEMONIC(5),S_USING     OPERATION IS USING\n         CLI   USTYPE,C'G'             IS IT A GLOABL DSECT        @25A\n         JE    MVDSNAMG                YES                         @25A\n         CLI   USTYPE,C'D'             IS IT A LOCAL DSECT\n         JNE   CKUTPS                  NO\n         ICM   R12,7,USVALU            YES, GET DSECT HEADER ADDRESS\n         L     R11,DTBSTRT             @ 1ST DSECT HEADER ENTRY\nDSCTEND  C     R11,DTBCURR             END OF DSECT HEADER TABLE\n         JH    MVDSNAME                YES\n         CLM   R12,7,DSECTHA-DSECTHD(R11) THIS THE HEADER ENTRY    @25A\n         JNE   DSCTSTEP                NO\n         LR    R12,R11                 YES, COPY IT'S ADDRESS\n         J     MVDSNAME                CONTINUE\nDSCTSTEP AHI   R11,DSECTHL             TO NEXT DSECT HEADER ENTRY\n         J     DSCTEND                 LOOP THRU DSECT HEADER TABLE\nMVDSNAMG ICM   R12,7,USVALU-USINGD(R1) LOAD GLOBAL MAPPING ENTRY   @25A\n         MVC   OPNDS(8),7(R12)         DSECT NAME TO OPERANDS      @25A\n         SR    R0,R0                   CLEAR FOR IC INSTRUCTION    @25A\n         IC    R0,USREG-USINGD(R1)     GET BASE REGISTER           @25A\n         MHI   R0,DSREGEL                                          @25A\n         LA    R11,DSREGTBL            REGISTER DSECT TABLE        @25A\n         AR    R11,R0                  LOCATE REGISTER TBL ENTRY   @25A\n         MVI   4(R11),C'*'             SET DSECT MAPPING           @25A\n         MVC   5(DSREGL,R11),1(R12)    COPY CNTL BLOCK DSECT NAME  @25A\n         MVC   ENDOFST+1(L'USEND),USEND-USINGD(R1) ENDING OFFSET   @25A\n         J     USFEBDNM                                            @25A\nMVDSNAME MVC   OPNDS(8),0(R12)         DSECT NAME TO OPERANDS\nUSFEBDNM LA    R12,OPNDS+7             TO END OF NAME\nUSFRHED  CLI   0(R12),C' '             FOUND RHE\n         JNE   USFMADD                 YES\n         JCT   R12,USFRHED             BACK UP 1 AND LOOP\nUSFMADD  AHI   R12,1                   TO NEXT BYTE\nUSFMCMA  MVC   0(2,R12),SCOMMAR        DELIMITERS ',R'\n         SR    R11,R11                 CLEAR WORK\n         IC    R11,USREG               GET REGISTER NUMBER\n         CVD   R11,DBLWD               CONVERT TO PACKED\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK REG NBR\n         OI    DBLWD+1,C'0'            CLEAR SIGN\n         CHI   R11,10                  REG < 10\n         JL    USFMR1                  YES\n         MVC   2(2,R12),DBLWD          MOVE 2-DIGIT REG NUMBER\n         J     USINGOUT                GO WRITE USING\nUSFMR1   MVC   2(1,R12),DBLWD+1        MOVE 1-DIGIT REG NUMBER\nUSINGOUT JAS   R9,WRTOUT               WRITE USING STMT TO SYSPUNCH\n         JAS   R9,PRINT                PRINT USING STMT TO SYSPRINT\n         J     ECSTEP                  CONTINUE\nCKUTPS   CLC   USVALU,TXTOFSET         USING AT CURR LOC\n         JNE   USFMLBL                 NO\n         MVI   OPNDS,C'*'          SET CURRENT LOC SYMBOL IN OPERAND\n         LA    R12,OPNDS+1             GET NEXT POS ADDRESS\n         J     USFMCMA                 GO FORMAT REG\nUSFMLBL  MVI   OPNDS,C'A'              SET 1ST CHAR OF LABEL NAME\n         LA    R12,USVALU              GET OFFSET\n         JAS   R9,HEXPRT3              CONVERT TO PRINTABLE\n         MVC   OPNDS+1(6),PRTABL       PRINTABLE HEX TO LABEL\n         LA    R12,OPNDS+7             TO NEXT LOC\n         J     USFMCMA                 FORMAT REG\nECSTEP   AHI   R2,USINGL               TO NEXT USING ENTRY\n         J     ENDUSE                  CONTINUE SCAN\n         DROP  R2\n********************************************************************\n* If the instruction is within code only table, turn on switch\n* CODPROG. Otherwise turn off switch CODPROG.\n********************************************************************\nCKCCODE  L     R12,CODOCUR                  GET CODE ONLY TBL ADDR @20C\n         CLC   TXTOFSET,CODESTRT-CODED(R12) RANGE BEGINS LATER     @28C\n         JL    CKDDATA                      BRANCH IF YES          @28C\n         CLC   TXTOFSET,CODEEND-CODED(R12)  BYTE IN THE RANGE      @28C\n         JNH   SETCODSW                YES                         @28C\n         CLC   CODESTRT-CODED(3,R12),HIVAL                         @28A\n         JE    CKDDATA                 BRANCH IF END OF TABLE      @15A\n         AHI   R12,CODEL               NEXT CODE TABLE ENTRY       @28C\n         ST    R12,CODOCUR             SAVE                        @28A\nSETCODSW OI    CODPROG,X'80'           TURN ON CODE IN PROGRESS    @15A\n         J     CKINSTR                 BRANCH                      @15A\n****\nCKDDATA  L     R12,DATOCUR             GET DATA ONLY TBL ADDR      @28C\n         MVI   CODPROG,X'00'           TURN OFF CODE IN PROGRESS   @15A\n         CLC   TXTOFSET,DATASTRT-DATAD(R12) RANGE BEGINS LATER\n         JL    CKLOSEQ                 YES\n         CLC   TXTOFSET,DATAEND-DATAD(R12)  BYTE IN THE RANGE\n         JNH   CONST                   YES\n         AHI   R12,DATAL               NEXT ENTRY                  @20C\n         ST    R12,DATOCUR             SAVE UPDATED ADDR           @28C\n         JAS   R9,FORCONST             YES, FORCE ANY CONSTANT OUT\n         J     CKDDATA                 GO CHECK AGAIN\nCKLOSEQ  CLC   TXTOFSET,LBLADR         LABEL ENTRY OUT OF SEQ\n         JNH   GCKODD                  NO, CONTINUE\n         JAS   R9,FORCONST             YES, FORCE ANY CONSTANT OUT\n         MVC   NAME(L'LBLNAME),LBLNAME NAME TO OUTPUT\n         MVC   MNEMONIC,S_EQU          MNEMONIC EQU                @13C\n         MVI   OPNDS,C'*'              OPERAND\n         MVC   COMMENT(14),S14Q        SHOW ERROR ?\n         JAS   R9,WRTOUT               WRITE ERROR RECORD\n         JAS   R9,PRINT                GO PRINT IT\n         AHI   R6,LABELL               TO NEXT LABEL               @25C\n         J     CKLOSEQ                 CONTINUE SEQ CHK\nGCKODD   TM    TXTOFST+3,1             ODD ADDRESS                 @28C\n         JO    CONST                   YES, NOT INSTR\n         CLC   1(3,R7),0(R7)           4 CONSEC IDENTICAL BYTES\n         JE    CONST                   YES, NOT INSTR\n         CLC   X_7FFF,0(R7)            X'7FFFFFFF'                 @28A\n         JE    CONST                   YES, NOT INSTR              @28A\n         CLC   X_4000,0(R7)            X'40000000'                 @30A\n         JE    CONST                   YES, NOT INSTR              @30A\n         TM    CODPROG,X'80'           IS CODE IN PROGRESS ?       @17A\n         JO    CKINSTR                 BRANCH IF YES               @17A\n         CLC   IAHIR0,0(R7)            AHI R0,16 ?                 @29A\n         JE    CKINSTR                 BRANCH IF YES               @29A\n         TRT   0(1,R7),CHARTRAN        TEST TEXT BYTE\n         JNZ   CKINSTR                 NOT CHARACTER\n         CLI   CONPROG,1               IS CONSTANT IN PROGRESS\n         JNE   CK6                     NO\n         CLI   CONTYPE,C'C'            IS IT CHARACTER TYPE\n         JE    CONST                   YES, ADD THIS TO CONSTANT\nCK6      CLI   0(R7),X'A5'             L3 OPCODE ??                @29A\n         JE    CKINSTR                 BRANCH IF YES               @29A\n         CLC   0(2,R7),X_A7F4          UNCOND JUMP INSTR ??        @29A\n         JE    CKINSTR                 BRANCH IF YES               @29A\n         CLI   4(R7),X'A7'                                         @29A\n         JE    CKINSTR                 YES, INSTRUCTION            @29A\n         TRT   0(6,R7),CHARTRAN        6 CONSECUTIVE CHARACTERS\n         JZ    CHKA7F4                 YES, NOT INSTRUCTION        @29C\nCKINSTR  SR    R8,R8                   CLEAR WORK\n         IC    R8,0(R7)                PICK UP TXT BYTE\n         MHI   R8,SGOPLEN              TIMES TABLE LENGTH          @13C\n*        LRL   R1,SGLOPAD                                          @13C\n         L     R1,SGLOPAD                                          @13C\n         AR    R8,R1\n         MVC   INSTENT,0(R8)           SAVE SINGLE INSTR TBL ENTRY\n         SR    R0,R0                   CLEAR FOR IC                @28A\n         IC    R0,INLNG                                            @28A\n         SRL   R0,4                    GET RID OF INSTR LENGTH     @28A\n         STC   R0,IOLNG                SAVE OPERAND LENGTH         @28A\n         NI    INLNG,X'0F'             CLEAR OPERAND LENGTH        @28A\n         CLI   INAME,0                 IS IT AN INSTR OP-CODE\n         JE    CONST                   NO\n         CLI   ITYPE,TWO               TWO-BYTE OP-CODE ??         @13A\n         JE    DBLNDS                                              @13A\n         CLI   ITYPE,L3                TWO-BYTE OP-CODE L3 ??      @13A\n         JE    L3LNDS                                              @13A\n         CLI   ITYPE,L4                TWO-BYTE OP-CODE L4 ??      @13A\n         JE    L4LNDS                                              @13A\n         J     INSTR                   MUST BE 1 BYTE OP-CODE      @13A\nCHKA7F4  CLC   0(2,R7),XA7F4                                       @29A\n         JNE   CONST                   YES, NOT INSTRUCTION        @29A\n         J     CKINSTR                                             @29A\n*BLNDS   LRL   R8,DBLOPAD              YES, GET 2-BYTE TBL ADDR\nDBLNDS   L     R8,DBLOPAD              YES, GET 2-BYTE TBL ADDR\nDBLND    CLI   0(R8),X'FF'             END OF TABLE\n         JE    CONST                   YES, NOT INSTR\n         CLC   0(2,R8),0(R7)           THIS ENTRY MATCHES TXT\n         JE    GOTDBLI                 YES\n         AHI   R8,DGOPLEN              TO NEXT ENTRY\n         J     DBLND                   LOOP THRU TBL\n*3LNDS   LRL   R8,L3LOPAD                                          @13A\nL3LNDS   L     R8,L3LOPAD                                          @13A\nL3LND    CLI   0(R8),X'FF'             END OF TABLE                @13A\n         JE    CONST                   YES, NOT INSTR              @13A\n         CLC   0(1,R8),0(R7)           THIS ENTRY MATCHES TXT      @13A\n         JNE   L3LNDXT                 YES                         @13A\n         MVC   TEMP1,1(R7)                                         @13A\n         NI    TEMP1,X'0F'             MASK OFF FIRST 4 BITS       @13A\n         CLC   1(1,R8),TEMP1                                       @13A\n         JE    GOTDBLI                 YES                         @13A\nL3LNDXT  AHI   R8,L3OPLEN              TO NEXT ENTRY               @13A\n         J     L3LND                   LOOP THRU TABLE             @13A\n*4LNDS   LRL   R8,L4LOPAD                                          @04A\nL4LNDS   L     R8,L4LOPAD                                          @04A\nL4LND    CLI   0(R8),X'FF'             END OF TABLE                @04A\n         JE    CONST                   YES, GET 2-BYTE TBL ADDR    @04A\n         CLC   0(1,R8),0(R7)           1ST OPCODE MATCH ?          @04A\n         JNE   L4LNDXT                 NO TRY NEXT ENTRY           @04A\n         CLC   1(1,R8),5(R7)           2nd OPCODE MATCH ?          @04A\n         JE    GOTDBLI                 YES THEN BRANCH             @04A\nL4LNDXT  AHI   R8,L4OPLEN              TO NEXT ENTRY               @04A\n         J     L4LND                   LOOP THRU TBL               @04A\nGOTDBLI  AHI   R8,2                    SKIP DOUBLE BYTES OP CODE   @13A\n         MVC   INSTENT,0(R8)           SAVE DOUBLE INSTR TBL ENTRY @13A\n         SR    R0,R0                   CLEAR FOR IC                @28A\n         IC    R0,INLNG                                            @28A\n         SRL   R0,4                    GET RID OF INSTR LENGTH     @28A\n         STC   R0,IOLNG                SAVE OPERAND LENGTH         @28A\n         NI    INLNG,X'0F'             CLEAR OPERAND LENGTH        @28A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS ENTERED WHEN CURSORY CHECKS IN THE MAINLINE    *\n* INDICATE THIS TEXT BYTE IS AN INSTRUCTION OP-CODE. FURTHER     *\n* TESTING IS DONE BY THE IVERFY (NON-FLOATING POINT), OR FPVERFY *\n* (FLOATING POINT) ROUTINES. BYTES PASSING THESE TESTS ARE       *\n* ACCEPTED AS OP-CODES, AND ARE PASSED TO THE APPROPRIATE FORMAT *\n* ROUTINES. FORMAT ROUTINES ARE ENTERED VIA A BRANCH TABLE USING *\n* A BYTE IN THE INSTRUCTION OP-CODE TABLE ENTRY.                 *\n*                                                                *\n* THE ROUTINE CHECK THE NEXT TWO INSTRUCTION AND SEE WHETHER THEY*\n* ARE VALID OP CODE.  IF THE NEXT TWO INSTRUCTION ARE OP CODE,   *\n* CONTROL WILL BRANCH TO ICKTBL, OTHERWISE CONTROL WILL PASS TO  *\n* ROUTINE CONSTANT.                                              *\n*                                                                *\n* R07 = ADDRESS OF CURRENT INSTRUCTION                           *\n* R12 = ADDRESS OF NEXT INSTRUCTION                              *\n* R14 = ADDRESS OF NEXT TWO INSTRUCTION                          *\n******************************************************************\n*\nINSTR    EQU   *                       *** INSTRUCTIONS (POSSIBLY) ***\n         MVC   ILENG+1(1),INLNG        SET INSTR LENGTH\n         LH    R12,ILENG               PICK UP LENGTH\n         AR    R12,R7                  ADDR OF NEXT OP CODE\n         SR    R15,R15                 CLEAR WORK\n         IC    R15,0(R12)              PICK UP NEXT OP-CODE\n         MHI   R15,SGOPLEN             TIMES TBL ENTRY LENG        @13C\n*        LRL   R1,SGLOPAD                                          @13C\n         L     R1,SGLOPAD                                          @13C\n         AR    R15,R1                  INSTR TBL ENTRY ADDR        @13C\n*        LA    R15,SGLOP(R15)          INSTR TBL ENTRY ADDR        @13D\n*                                      OP-CODE\n*  HANDLE SPECIAL CASE                                             @07A\n*                                                                  @07A\n         CLI   0(R7),X'4B'             IS IT STRING '?'            @07A\n         JE    CHECKDOT                BARNCH IF YES               @07A\n         CLI   0(R7),X'F0'             IS IT STRING '0'            @07A\n         JE    CHECKDOT                BARNCH IF YES               @07A\n         CLI   0(R7),C'S'              IS IT STRING 'S'            @07A\n         JE    CHECKDOT                BARNCH IF YES               @07A\n         LH    R1,0(R7)                                            @12A\n* R1 = OP OF NEXT INSTRUCTION\n* R7 = ADDRESS OF NEXT INSTRUCTION\n         J     ICKTBL    ???\nCHECKDOT TM    CODPROG,X'80'           CODE IN PROGRESS            @15A\n         JO    ICKSEC                                              @15A\n         TRT   0(4,R7),CHARTRAN                                    @07A\n         JZ    CONST                   BRANCH IF IT IS STRING      @07A\nICKSEC   SR    R1,R1                   CLEAR WORK\n         IC    R1,INLNG-INSTENT(R15)   GET INSTR LENGTH OF NEXT OP CD\n         AR    R1,R12                  ADDR OF NEXT TWO OP CODE\n         SR    R14,R14                 CLEAR WORK\n         IC    R14,0(R1)               PICK UP NEXT TWO OP-CODE\n         MHI   R14,SGOPLEN             TIMES TBL ENTRY LENG        @13C\n*        LRL   R1,SGLOPAD                                          @12C\n         L     R1,SGLOPAD                                          @12C\n         AR    R14,R1                  R14 = ADDR OF INSTR TBL ENT @12A\n         CLI   INAME-INSTENT(R14),0    IS IT AN OP-CODE FOR NEXT 2 OP\n         JNE   ICKTBL                  YES\n         CLI   0(R7),X'4B'             IS IT SH INSTR ?            @30A\n         JE    ICKTBL                  YES                         @30A\n         CLI   0(R12),X'45'            IS IT BAL\n         JE    ICKTBL                  YES, CONTINUE\n         CLI   0(R12),X'07'            NO, IS IT BRANCH INSTR?\n         JE    POSSB2                  YES\n         CLI   0(R12),X'A7'            IS IT RELATIVE BRANCH       @13A\n         JE    POSSB2                  YES                         @13A\n         CLI   0(R12),X'47'            IS IT BRANCH OP CODE ?\n         JNE   CONST                   NO, THEN THIS NOT INSTR\nPOSSB2   TM    1(R12),X'80'            IS IT COND BRANCH ??        @07A\n         JNO   CONST                   NO, THEN THIS NOT INSTR\nICKTBL   LH    R12,ILENG               GET INSTR LENGTH\n         AR    R12,R7                  @ NEXT TEXT LOC\n         AHI   R12,-1                  BACK UP 1\n         S     R12,TXTSTRT             RELATIVE SIZE IN CSECT\n         CLM   R12,7,LBLADR            LBL TBL ADDR HERE\n         JL    NOILBL                  NO\n         CLC   TXTOFSET,LBLADR         LABEL AT INSTR START\n         JNE   NOTINST                 NO, MUST BE CONSTANT\n         CLI   LBLTYP,C'L'             IS IT A LABEL ONLY\n         JNE   NOTINST                 NO\n         CLI   CONPROG,1               CONSTANT IN PROGRESS\n         JNE   CKLBLNG                 NO\n         JAS   R9,FORCONST             YES, FORCE IT OUT\nCKLBLNG  CLC   LBLLEN,INLNG            LENGTHS SAME\n         JE    SETLBL                  YES\n         CLI   LBLLEN,0                DON'T CARE LENGTH\n         JE    SETLBL                  YES\n*        JAS   R9,EQUSTMT              NO, BUILD EQU STATEMENT     @15D\n         MVC   NAME,LBLNAME            NAME TO EQU STMT            @15A\n         J     ISTPLBL                 CONTINUE\nSETLBL   MVC   NAME,LBLNAME            LABEL ENTRY NAME TO INSTR\n         MVC   CONLEN,LBLLEN           SET CONSTANT LENGTH IN CASE\nISTPLBL  DS    0H                      GET TEMP COPY OF LABEL TAB ENT\n         AHI   R6,LABELL               TO NEXT LABEL TBL ENTRY     @25C\n         CLM   R6,7,LBLADR             THIS ENTRY SAME ADDR\n         JNE   ICKTBL                  NO\n         AHI   R6,-LABELL              BACK UP TO 1ST ENTRY        @25C\n         JAS   R9,EQUSTMT              GO BUILD EQU STATEMENT\n         AHI   R6,LABELL               TO NEXT ENTRY               @25C\n         J     ICKTBL             GO CHECK NEXT LABEL FOR NEXT INSTR\nNOILBL   CLI   CONPROG,1               CONSTANT IN PROGRESS\n         JNE   MVMNE                   NO\n         JAS   R9,FORCONST             YES, FORCE IT OUT\nMVMNE    MVC   MNEMONIC,0(R8)          SET INSTR MNEMONIC\n         CLI   MNEMONIC,C'?'           UNDOC OP ??                 @13A\n         JNE   DOCOP                   BRANCH IF DOC OP            @13A\n         MVC   COMMENT(L'S17),S17      SET COMMENT UNDOC OPCODE    @13A\nDOCOP    MVC   OFFSET,TXTOFSET         SET OFFSET\n         MVC   INSTYP,6(R8)            SET INSTR TYPE              @21C\n         MVI   TYPE,X'0D'              SHOW IT IS AN INSTRUCTION\n         MVC   LEN,ILENG+1             SHOW LENGTH\n         MVC   TEXT(6),0(R7)           MOVE ACTUAL TEXT\n*        TM    ICLASS,FLTPT            FLOATING POINT OP-CODE      @17D\n*        JO    FPVERFY                 YES, GO VERIFY              @17D\n         CLI   IEDT,0                  ANY EDIT REQUIRED\n         JE    PFMFMT                  NO\n*        J     IVERFY                  YES, GO EDIT                @15D\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS ENTERED FROM THE INSTR ROUTINE FOR NON FLOATING*\n* POINT INSTRUCTIONS. VARIOUS EDITS ARE PERFORMED TO INSURE THE  *\n* INPUT TEXT BYTE IS AN OP-CODE. IF IT IS, RETURN IS TO LABEL    *\n* PFMFMT, OTHERWISE THE CONST ROUTINE IS PERFORMED.              *\n*                                                                *\n******************************************************************\n*\nIVERFY   EQU   *                       *** VERIFY POSSIBLE INSTRUCTION\n         TM    IEDT,EPR                EVEN-ODD REG PAIR\n         JZ    IVE2                    NO\n         TM    1(R7),X'10'             R1 IS ODD\n         JO    CONST                   YES, NOT INSTR\n         CLI   0(R7),X'0E'             IS IT MVCL\n         JE    IVTRG2                  YES\n         CLI   0(R7),X'0F'             IS IT CLCL\n         JNE   IVE2                    NO\nIVTRG2   TM    1(R7),X'01'             R2 IS ODD\n         JO    CONST                   YES, NOT INSTR\n         SR    R1,R1                   CLEAR WORK\n         SR    R2,R2                   CLEAR WORK\n         IC    R1,1(R7)                GET R1R2\n         SRL   R1,4                    SHIFT OUT R2\n         PACK  DBLWD(1),1(1,R7)        FLIP R1R2 BYTE\n         IC    R2,DBLWD                PICK UP R2R1\n         SRL   R2,4                    SHIFT OUT R1\n         CR    R1,R2                   R1=R2\n         JE    CONST                   YES, NOT INSTR\n         J     PFMFMT                  NO, GOOD INSTR\nIVE2     TM    IEDT,E2                 HALFWORD STORAGE ALIGNMENT\n         JZ    IVE4                    NO\n         TM    3(R7),X'01'             DISPL IS ODD\n         JZ    IVES2                   NO, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO, CONTINUE\n         CLI   0(R7),X'44'             EX OP CODE\n         JE    CONST                   YES, NOT INSTR\n         CLI   ITYPE,RS                RS INSTRUCTION\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG IS 0\n         JZ    CONST                   YES, NOT INSTR\n         J     IVES2                   CONTINUE\nIVE4     TM    IEDT,E4                 2ND OPND ON FULLWORD BOUND\n         JZ    IVE8                    NO\n         TM    3(R7),X'03'             DISPL DIV BY 4\n         JZ    IVES2                   YES, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO, CONTINUE\n         CLI   ITYPE,RS                RS INSTRUCTION OP CODE\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\n         J     IVES2                   NO, CONTINUE\nIVE8     TM    IEDT,E8                 2ND OPND ON DBLWD BOUND\n         JZ    IVES2                   NO\n         TM    3(R7),X'07'             DISPL DIV BY 8\n         JZ    IVES2                   YES, O.K.\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   IVES2                   NO\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\nIVES2    CLI   PRIVASM,1               PRIVILEGED INSTR O.K.\n         JE    PFMFMT                  YES\n         TM    IEDT,S2                 OPND2 MUST HAVE BASE\n         JZ    IVES1                   NO\n         TM    2(R7),X'F0'             BASE REG = 0\n         JNZ   PFMFMT                  NO, O.K.\n         CLI   ITYPE,RS                RS INSTRUCTION\n         JE    CONST                   YES, NOT INSTR\n         CLI   0(R7),X'92'             IS IT MVI OP CODE\n         JE    CONST                   YES, NOT INSTR\n         TM    1(R7),X'0F'             INDEX REG = 0\n         JZ    CONST                   YES, NOT INSTR\n         J     PFMFMT                  NO, GOOD INSTR\nIVES1    TM    IEDT,S1                 1ST OPND MUST HAVE BASE\n         JZ    PFMFMT                  NO, CONTINUE\n         TM    2(R7),X'F0'             1ST OPND HAS BASE\n         JZ    CONST                   NO, NOT INSTR\nPFMFMT   SR    R1,R1                   CLEAR WORK\n         TM    IEDT,T8                                             @12A\n         JNO   NOTTST                                              @12A\n         CLC   ILTR15,0(R7)            LTR R15,R15                 @12A\n         JNE   NOTTST                  BRANCH IF NO                @12A\n         MVC   COMMENT(L'S09),S09      SET COMMENT TO TEST RC      @12A\nNOTTST   SR    R1,R1                   CLEAR R1 FOR IC INSTR       @23C\n         IC    R1,INSTYP               GET INSTRUCTION TYPE        @23C\n         MVC   INSTENT,0(R8)           COPY INSTUCTION TABLE ENTRY @23A\n         LARL  R15,OPNDCTL             R15= ADDRESS OF OPNDCTL     @13A\n         AR    R15,R1                  R1 = ADDRESS OF FMT RTN     @13A\n         BR    R15                     BRANCH TO INSTR FMT RTN     @13C\nOPNDCTL  J     RROPND                  TYPE=0, RR\n         J     RXOPND                  TYPE=4, RX\n         J     SOPND                   TYPE=8, S\n         J     SIOPND                  TYPE=C, SI\n         J     RSOPND                  TYPE=10, RS\n         J     SS1OPND                 TYPE=14, 1-LENGTH SS\n         J     SS2OPND                 TYPE=18, 2-LENGTH SS\n         J     SOPND                   TYPE=1C, 2-BYTE OP-CODES\n         J     BCOPND                  TYPE=20, CONDITIONAL BRANCH\n         J     SVCOPND                 TYPE=24, SVC\n         J     INSTOUT                 TYPE=28, RRE 0              @20C\n         J     RRE1OPND                TYPE=2C, RRE 1              @02A\n         J     RRE2OPND                TYPE=30, RRE 2              @02A\n         J     SSEOPND                 TYPE=34  SSE                @02A\n         J     SS3OPND                 TYPE=38, SSE                @04A\n         J     RI1OPND                 TYPE=3C, RI BRANCH          @13A\n         J     RI2OPND                 TYPE=40, RI                 @13A\n         J     RIL1OPND                TYPE=44, RIL RELATIVE OFSET @13A\n         J     RIL2OPND                TYPE=48, RIL                @13A\n         J     RSIOPND                 TYPE=4C, RSI                @13A\n         J     RSEOPND                 TYPE=50, RSE                @13A\n         J     RXOPND                  TYPE=54, RXY                @13A\n         J     RSOPND                  TYPE=58, RSY                @13A\n         J     SS4OPND                 TYPE=5C, SS4                @13A\n         J     RXOPND                  TYPE=60, RXE                @13A\n         J     EOPND                   TYPE=64, EXTEND             @02A\n         J     SSFOPND                 TYPE=68, SSF                @21A\n         J     SILOPND                 TYPE=6C, SIL                @21A\n         J     SIYOPND                 TYPE=70, SIY                @21A\n         J     RRFAOPND                TYPE=74, RRFA               @30A\n         J     RRFBOPND                TYPE=78, RRFB               @30A\n         J     RRFCOPND                TYPE=7C, RRFC               @30A\n         J     RRFCOPND                TYPE=80, RRFD               @30A\n         J     RRFEOPND                TYPE=84, RRFE               @30A\n         J     RSOPND                  TYPE=88, RSY2               @22A\n         J     RIEOPND                 TYPE=8C, RIE                @28A\n         J     RSOPND                  TYPE=90, RSL 1              @28A\n         J     RSOPND                  TYPE=94, RSL 2              @28A\n         J     RSOPND                  TYPE=98, RSA                @30A\nOPNDRTN  J     INSTOUT                 NORMAL OPERAND FORMAT RETURN\nNOTINST  CLC   NAME,BLANX              IS NAME FILLED IN?\n         JE    CONST\n         AHI   R6,-LABELL              BACK UP                     @25C\n         J     CONST\nINSTOUT  CLI   COL72,C' '              COL72 IS BLANK ??           @18A\n         JE    INSTOUT3                BRANCH IF YES               @18A\n         MVI   COMMENT,C' '            CLEAR COMMENT FIELD         @18A\n         MVC   COMMENT+1(L'COMMENT-1),COMMENT                      @18A\n         MVC   SECOND_LINE,COL72                                   @18A\n         MVI   COL72,C'X'              MOVE NONBLANK TO COL 72     @18A\n         MVC   WORKREC+72(8),BLANX     CLEAR SEQUENCE NUMBER       @18A\n         JAS   R9,WRTOUT      WRITE INSTRUCTION RECORD (SYSPUNCH)  @18A\n         JAS   R9,TXTFMT               FORMAT HEX DATA             @18A\n         JAS   R9,PRINT                GO PRINT IT TO SYSPRINT     @18A\n         MVI   WORKREC,C' '                                        @18A\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC                      @18A\n         MVC   WORKREC+15(56),SECOND_LINE                          @18A\n         CLI   WORKREC+46,C' '                                     @22A\n         JNE   INSTOUT2                                            @22A\n         MVC   WORKREC+46(25),CCOMMENT      COPY COMMENT           @22A\nINSTOUT2 JAS   R9,WRTOUT         WRITE INSTRUCTION RECORD (SYSPUNCH)\n         JAS   R9,PRINT                GO PRINT IT TO SYSPRINT\n         J     INSTOUT5\nINSTOUT3 JAS   R9,WRTOUT         WRITE INSTRUCTION RECORD (SYSPUNCH)\n         JAS   R9,TXTFMT               FORMAT HEX DATA\n         JAS   R9,PRINT                GO PRINT IT TO SYSPRINT\nINSTOUT5 AH    R7,ILENG                STEP TO NEXT TEXT BYTE\n         MVI   WORKREC2,C' '           CLEAR WORKREC2              @18A\n         MVC   WORKREC2+1(L'WORKREC2-1),WORKREC2                   @18A\nHEX4RET  ST    R7,TXTCURR        SAVE NEXT ADDR\n         CLI   ICCSET,X'00'                                        @17A\n         JE    GETCURR           BRANCH IF YES                     @17A\n         MVC   CCTYPE,ICCSET     SHOW COND CODE SET TYPE\n         J     GETCURR           CONTINUE TXT PROCESSING\n*\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS ENTERED FROM THE INSTR ROUTINE FOR FLOATING    *\n* POINT INSTRUCTIONS. VARIOUS EDITS ARE PERFORMED TO INSURE THE  *\n* INPUT TEXT BYTE IS AN OP-CODE. IF IT IS, RETURN IS TO LABEL    *\n* PFMFMT, OTHERWISE THE CONST ROUTINE IS PERFORMED.              *\n*                                                                *\n******************************************************************\n*\nFPVERFY  EQU   *                       *** VALIDATE FLOATING POINT OP-C\n         TM    1(R7),X'90'             R1 IS 0, 2, 4, OR 6\n         JNZ   CONST                   NO, NOT INSTR\n         CLI   0(R7),X'27'             MXDR OP-CODE\n         JE    FPR1EXT                 YES\n         CLI   0(R7),X'67'             MXD OP-CODE\n         JNE   FPCKTYP                 NO\nFPR1EXT  TM    1(R7),X'B0'             R1 IS 0 OR 4\n         JNZ   CONST                   NO, NOT INSTR\nFPCKTYP  CLI   ITYPE,RR                RR TYPE INSTRUCTION\n         JNE   FPRXVER                 NO\n         CLI   0(R7),X'25'             LRDR OP CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'37'             SXR OP-CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'26'             MXR OP-CODE\n         JE    FPR2EXT                 YES\n         CLI   0(R7),X'36'             AXR OP-CODE\n         JNE   PFMFMT                  NO, GOOD INSTR\nFPR2EXT  TM    1(R7),X'0B'             R2 IS 0 OR 4\n         JZ    PFMFMT                  YES, GOOD INSTR\n         J     CONST                   NO, NOT INSTR\nFPRXVER  CLI   PRIVASM,1               PRIVILEGED INSTRUCTIONS O.K.\n         JE    FPALIGN                 YES\n         TM    2(R7),X'F0'             ANT BASE REG\n         JNZ   FPALIGN                 YES\n         TM    1(R7),X'0F'             ANY INDEX REG\n         JZ    CONST                   NO, NOT INSTR\nFPALIGN  TM    2(R7),X'F0'             ANY BASE REG\n         JNZ   PFMFMT                  YES, ACCEPT INSTR\n         TM    1(R7),X'0F'             ANY INDEX REG\n         JNZ   PFMFMT                  YES, ACCEPT INSTR\n         TM    3(R7),X'03'             DISPL DIV BY 4\n         JNZ   CONST                   NO, NOT INSTR\n         CLI   ICLASS,FLSHT            SHORT PRECISION            @20A\n         JE    PFMFMT                  YES, ACCEPT INSTRUCTION    @20A\n         TM    3(R7),X'07'             DISPL DIV BY 8\n         JZ    PFMFMT                  YES, ACCEPT INSTR\n         J     CONST                   NO, NOT INSTR\n*\n*******************************************************************\n*                                                                 *\n* THIS ROUTINE IS ENTERED FROM VARIOUS OTHER ROUTINES WHEN THE    *\n* CURRENT TEXT BYTE IS DETERMINED NOT TO BE AN INSTRUCTION OP     *\n* CODE. A CONSTANT AREA IS BUILT TO CONTAIN THE CONSTANT, IT'S    *\n* DATA TYPE, SYMBOL TO BE USED FOR ADCONS, LABEL TO BE USED, IF   *\n* ANY, ETC. THE CONSTANT IS BUILT BYTE BY BYTE, AND IS TERMINATED *\n* FOR OUTPUT BY THE FORCONST ROUTINE. THIS ROUTINE DETECTS END OF *\n* CONSTANT WHEN THE CONSTANT IN PROGRESS EXCEEDS 2 BYTES FOR A    *\n* HALFWORD, 4 BYTES FOR A FULLWORD, OR 48 BYTES AS A MAXIMUM. IT  *\n* IS ALSO TERMINATED WHEN A CHANGE IN DATA TYPE OCCURS.           *\n* IE MAXLEN   EQU 48                                              *\n*******************************************************************\n*\nCONST    DS    0H                      *** PROCESS CONSTANTS ***\n**       LA    R11,CONDATA    *DEBUG*  GET 1ST DATA BYTE ADDR      @28A\n**       ST    R11,CONLOC     *DEBUG*  SET STARTING ADDRESS OF DATA@28A\n         MVI   WORKREC,C' '            CLEAR WORK RECORD AREA\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         CLI   CONPROG,1               CONSTANT IN PROGRESS\n         JNE   CCNEW                   NO\n         CLC   TXTOFSET,LBLADR+40      LABEL+2 ENTRY               @30A\n         JE    CSTNEW2                 YES                         @30A\n         CLC   TXTOFSET,LBLADR         LABEL ENTRY HAS THIS OFFSET\n         JNE   CGETYP                  NO\n******** DATA TYPE CHANGE AND FORCE IT OUT ********************\nCSTNEW   JAS   R9,FORCONST             FORCE IT OUT\n         J     CCNEW                   GO START A NEW ONE\nCSTNEW2  AHI   R6,40                   POINT TO LABEL+2            @30A\n         J     CSTNEW                                              @30A\nCGETYP   TRT   0(1,R7),MIXCTRAN        CHECK DATA TYPE OF BYTE     @16C\n         JZ    CCONCAT                 BRANCH IF MIXCASE           @18A\n         CLI   CONTYPE,C'X'            TYPE CHANGE ??              @18C\n         JNE   CSTNEW                  NO                          @13C\n******** CONCAT STRING  ***************************************\nCCONCAT  DS    0H                      GET CURRENT LENGTH\n*        TM    TXTOFST+3,1             ODD ADDRESS                 @28C\n*        JO    CCN7FFF                 YES, SKIP\n         CLC   X_7FFF,0(R7)            X'7FFFFFFF'                 @28A\n         JE    CONST4                  YES, NOT INSTR              @28A\nCCN7FFF  LH    R11,CONLEN              GET CURRENT LENGTH\n         AHI   R11,1                   ADD 1\n         STH   R11,CONLEN              UPDATE LENGTH\n         L     R11,CONLOC              GET CURRENT LOC IN CONST DATA\n         MVC   0(1,R11),0(R7)          MOVE BYTE TO DATA\n         AHI   R11,1                   STEP OVER ONE BYTE\n         ST    R11,CONLOC              SAVE UPDATED DATA ADDR\n         CLI   CONTYPE,C'C'            CHARACTER CONSTANT\n         JE    CCLNCHK                 YES CHECK CONSTANT LENGTH\n**       TM    CONOFST+3,1             OFFSET IS ODD\n**       JO    CCFIN1                  YES\n         TM    CONOFST+3,2             HALFWORD OFFSET ??\n         JZ    CCFWD                   BRANCH IF NOT HALFWORD CONST\n         CLI   CONLEN+1,1              HALFWORD, IS LENGTH = 1\n         JE    CCXIT1                  YES\n         J     CCFIN1                  NO\nCCFWD    CLI   CONLEN+1,4              NO, IS HEX CONST 4 BYTES\n         JL    CCXIT1                  NOT YET\nCCFIN1   JAS   R9,FORCONST             MAX LENG, FORCE IT OUT\n         J     CCXIT1                  FINISH\nCCLNCHK  CLI   CONLEN+1,MAXLEN         CONSTANT LENGTH < 48        @15C\n         JNL   CCFIN1                  YES IF >= 48\nCCXIT1   AHI   R7,1                    STEP OVER 1 BYTE IN TEXT\n         ST    R7,TXTCURR              UPDATE TEXT ADDR\n         J     GETCURR                 CONTINUE TEXT PROCESSING\nCCNEW    MVI   CONPROG,1               SHOW CONSTANT IN PROGRESS\n         MVC   CONOFST,TXTOFST         SET OFFSET TO 1ST BYTE\n         MVC   CONNAME,BLANX           CLEAR NAME\n         XC    CONDATA,CONDATA         CLEAR DATA AREA\n         MVC   CONSYM,BLANX            CLEAR SYMBOL NAME\n         MVC   CONLEN,XZROS            CLEAR LENGTH\n         LA    R11,CONDATA             GET 1ST DATA BYTE ADDR\n         ST    R11,CONLOC              SET STARTING ADDRESS OF DATA\n         CLC   TXTOFSET,LBLADR         LABEL AT THIS OFFSET\n         JE    CLBLD                   YES\n*RTYPE   TRT   0(1,R7),MIXCTRAN        CHECK DATA TYPE OF BYTE     @16C\nTRTYPE   TRT   0(2,R7),MIXCTRAN        2 BYTES ARE CHAR STRING     @31C\n*        JNZ   CCSHX                   BRANCH IF HEXI STRING       @31D\n         JNZ   CCSHX1                  BRANCH IF HEXI STRING       @31C\n         MVI   CONTYPE,C'C'            IT'S CHAR, SO INDICATE\n         J     CCONCAT                 GO COMPLETE\nCCSHX1   CLIY  -4(R6),1                LBLLEN = 1 ?                @31C\n         JNE   CCSHX2                  BRANCH IF LBLLEN NE 1       @31A\n         TRT   0(1,R7),MIXCTRAN        CHECK 1 BYTE IS CHAR STRING @31A\n         JNZ   CCSHX2                  BRANCH IF HEXI STRING       @31A\n         MVI   CONTYPE,C'C'            IT'S CHAR, SO INDICATE      @31A\n         J     CCONCAT                 GO COMPLETE                 @31A\nCCSHX2   MVI   CONTYPE,C'X'            IT'S HEX, SO INDICATE       @31C\n         J     CCONCAT                 GO COMPLETE\nCLBLD    CLI   LBLTYP,C'L'             IS IT A LABEL ONLY\n         JNE   CDATACON                NO\n         MVC   CONNAME,LBLNAME         NAME TO CONSTANT WORK AREA\n         MVC   CONLLEN,LBLLEN          SAVE LENGTH\n         AHI   R6,LABELL               TO NEXT LABEL ENTRY         @25C\n         CLC   TXTOFSET,LBLADR         THIS LABEL AT SAME ADDR\n         JNE   TRTYPE                  NO\n         CLI   LBLTYP,C'L'             THIS ANOTHER LABEL ONLY\n         JNE   CDATACON                NO\n         AHI   R6,-LABELL              BACK UP TO LABEL ENTRY      @25C\n         JAS   R9,EQUSTMT              GO BUILD EQU STATEMENT\n         AHI   R6,LABELL               TO NEXT LABEL ENTRY         @25C\n         J     CCNEW                   GO TO NEXT LABEL\nCDATACON MVC   CONTYPE,LBLTYP          TYPE TO CONSTANT AREA\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,LBLLEN               PICK UP CONSTNT LENGTH\n         STH   R1,CONLEN               SAVE CONSTANT LENGTH\n         CHI   R1,44\n         JL    GOODLEN\nCRASH    DC    X'0000'        *** DEBUG **\nGOODLEN  DS    0H\n         AHI   R1,-1                   MINUS ONE FOR EXECUTE\n         EX    R1,MCD                  MVC   CONDATA(1),0(R7)\n         MVC   CONSYM,LBLNAME          SYMBOL TO CONSTANT AREA\n         SR    R11,R11                 CLEAR WORK REG\n         IC    R11,LBLLEN              PICK UP LENGTH\n         AR    R7,R11                  STEP PAST TEXT\n         ST    R7,TXTCURR              UPDATE TEXT ADDRESS\n         JAS   R9,FORCONST             FORCE CONSTANT OUT\n         AHI   R6,LABELL               STEP TO NEXT LABEL ENTRY    @25C\n         J     GETCURR                 CONTINUE TEXT PROCESS\nCONST4   MVI   CONLEN+1,4              SET CONLEN TO 4             @28A\n         MVI   CONLLEN,4               SET CONLLEN TO 4            @28A\n         MVI   CONTYPE,C'X'            SET CONTYPE TO 4            @28A\n         MVC   CONDATA(4),0(R7)                                    @28A\n         MVI   CONPROG,1               CONSTANT IN PROGRESS        @28A\n         MVC   CONOFST,TXTOFST                                     @28A\n         JAS   R9,FORCONST             FORCE CONSTANT OUT          @28A\n         AHI   R7,4                                                @28A\n         ST    R7,TXTCURR              UPDATE TEXT ADDRESS         @28A\n         J     GETCURR                                             @28A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS ENTERED BY VARIOUS ROUTINES WHEN IT IS         *\n* NECESSARY TO WRITE THE CONSTANT CURRENTLY IN PROGRESS, AND     *\n* CLEAR FIELDS FOR THE NEXT CONSTANT TO BE CREATED.              *\n* INPUT : CONLEN (LENGTH OF CONSTANT)                            *\n*         CONTYPE, CONDATA AND CONNAME                           *\n******************************************************************\n*\nFORCONST DS    0H                   *** FORCE OUT CONSTANT IN PROGRESS\n         ST    R9,FC9                  SAVE RETURN ADDR\n         CLC   CONNAME,BLANX           ANY LABEL NAME SET UP\n         JE    CKCNPRG                 NO, CONTINUE\n         CLC   CONLLEN,CONLEN+1        SAME LENGTH ?\n         JE    CKCNPRG                 YES, CONTINUE\n         ST    R6,FC6                  SAVE LABEL TABLE ADDR\n         LA    R6,CONPSLBL             @ PSEUDO LABEL ENTRY\n         CLI   CONTYPE,C'C'\n         JNE   CHKEQU\n         CLI   LBLLEN,MAXLEN           LENGTH > MAXIMUM LENGTH     @15A\n         JL    SKIPEQU                 BRANCH IF LOWER             @15A\n         CLI   CONTYPE,C'V'     DEBUG\n         JE    SKIPEQU          DEBUG\nCHKEQU   CLI   LBLLEN,5\n         JL    SKIPEQU\n         JAS   R9,EQUSTMT              GO BUILD EQU STATEMENT\n         MVC   CONNAME,BLANX           CLR STATEMENT LABEL FIELD\nSKIPEQU  MVC   CONNAME,LBLNAME         NAME TO EQU STMT            @15C\n         L     R6,FC6                  RESTORE LABEL TABLE POINTER\nCKCNPRG  CLI   CONPROG,1               CONSTANT IN PROGRESS\n         JNE   FCCLR                   NO\n         CLI   CONLEN+1,0              ANY DATA LENGTH\n         JE    FCCLR                   NO\n         XC    TEXT,TEXT               CLEAR TEXT FIELD\n         CLI   CONNAME+8,X'00'                                     @24A\n         JE    NORLABEL                JUMP IF NORMAL LABEL        @24A\n         CLI   CONNAME+8,X'40'                                     @24A\n         JE    NORLABEL                JUMP IF NORMAL LABEL        @24A\n         MVC   MNEMONIC+4(2),S_DC      SET MNEMONIC DC             @24A\n         MVC   NAME(L'CONNAME),CONNAME NAME TO RECORD              @24A\n         LA    R14,OPNDS+2                                         @25A\n         J     CKCONT                                              @24A\nNORLABEL MVC   MNEMONIC(2),S_DC        SET MNEMONIC DC\n         MVC   NAME,CONNAME            NAME TO RECORD\n         LA    R14,OPNDS                                           @25A\nCKCONT   MVC   0(1,R14),CONTYPE        SET TYPE                    @25C\n         MVI   1(R14),C''''            OPERAND DELIMITER\n         MVC   OFFSET,CONOFST+1        OFFSET TO RECORD\n         MVI   INSTYP,0                NOT AN INSTRUCTION\n         MVI   TYPE,2                  NON-ADDRESS CONSTANT\n         MVC   LEN,CONLEN+1            GET DATA LENGTH\n         LH    R11,CONLEN              DATA LENGTH\n         BCTR  R11,R0                  MINUS DATA LENGTH FOR MOVE\n         EX    R11,FMCON               MVC   TEXT(1),CONDATA\n         CLI   CONTYPE,C'C'            CHARACTER TYPE\n         JE    FCHAR                   YES\n         CLI   CONTYPE,C'X'            HEX TYPE\n         JNE   FSYMBOL                 NO\n         TM    CONLEN+1,1              LENGTH IS ODD\n         JO    FHEX                    YES FORMAT AS HEX\n         CLI   CONLEN+1,2              HALF WORD ?                 @28A\n         JE    FHWD2                   BRANCH IF YES               @28A\n         TM    CONOFST+3,2             OFFSET DIVISIBLE BY 4\n         JO    FHWD2                   NO FORMAT AS HALF WAORD     @15A\n         CLI   CONLEN+1,4              IS IT 4-BYTES\n         JNE   FHWD                    NO, JUST HALFWORD\n         CLC   CONDATA(4),XZROS        CONSTANT IS ALL ZEROS\n         JNE   FFCKNEG                 NO\n         MVC   OPNDS(4),SF00           BUILD OPERANDS  F'0'\n         J     FCWRT                   CONTINUE\nFFCKNEG  DS    0H\n         ICM   R11,15,CONDATA          GET DATA\n         JM    FHEX                    NEG, TREAT AS HEX\n         C     R11,F50000              VALUE EXCEEDS 50,000\n         JH    FHEX                    YES, TREAT AS HEX\n         TM    CONOFST+3,1             OFFSET                      @29A\n         JO    FHEX3                   NO FORMAT AS HEX            @29A\n         MVC   0(2,R14),SFAPO          OPERAND DATA TYPE IS F'     @26C\n         CVD   R11,DBLWD               CONVERT VALUE TO PACKED\n         UNPK  2(5,R14),DBLWD+5(3)     UNPACK INTO OPERAND         @26C\n         OI    6(R14),C'0'             SET SIGN = F                @26C\n         MVI   7(R14),C''''            ENDING QUOTE                @26C\n         J     FCWRT                   CONTINUE\nFHEX3    LR    R12,R7                                              @29A\n         AHI   R12,-3                                              @29A\n         MVC   0(2,R14),SXAPO          Type and begin quote X'     @29A\n         JAS   R9,HEXPRT3              Convert to printable        @29A\n         MVC   2(6,R14),PRTABL         Get rest of name            @29A\n         MVI   8(R14),C''''            Ending quote                @29A\n         BCTR  R7,0                                                @29A\n         MVI   LEN,3                                               @29A\n         J     FCWRT                   CONTINUE                    @29A\nFHWD     DS    0H                                                  @15C\n         CLI   LBLLEN,4                LABEL IS 4 BYTES ??         @15A\n         JE    FHEX4                   BRANCH IF YES               @15A\nFHWD2    LH    R11,CONDATA             PICK UP HALFWORD            @15C\n         LTR   R11,R11                 TEST CONSTANT VALUE\n         JM    FHEX                    NEGATIVE, TREAT AS HEX\n         JNZ   FHCMAX                  NOT ZERO, CHECK MAX VALUE\n         MVC   OPNDS(4),SH00           SET OPERAND FOR ZERO H'0'\n         J     FCWRT                   CONTINUE\nFHCMAX   DS    0H                      FOMAT HALF WORD             @28A\n*        CLI   CONLLEN,4                                           @28A\n*        JE    FCONST4                                             @28A\n         CHI   R11,4096                VALUE EXCEEDS 4,096         @28C\n         JH    FHEX                    YES, TREAT AS HEX\n         CVD   R11,DBLWD               CONVERT TO PACKED\n         OI    DBLWD+7,X'0F'           CLEAR SIGN TO F\n         MVC   0(2,R14),SHAPO          SET DELIMITER IN OPERAND H' @28C\n         UNPK  2(4,R14),DBLWD+5(3)     UNPACK VALUE TO OPERAND     @28C\n         MVI   6(R14),C''''            ENDING DELIMITER            @28C\n         J     FCWRT                   CONTINUE\nFCHAR    MVC   0(2,R14),SCAPO   OPERAND DELIMITER FOR CHARACTER C' @25C\n         CLI   NAME,C'A'               LABEL NAME EXIST            @15A\n         JNE   FCHARC                  BRANCH IF NO LABEL          @15A\n         LR    R12,R6                  POINT TO CURRENT LABEL      @15A\n         AHI   R12,-LABELL             POINT TO PREVIOUS LABEL     @25C\n         CLI   LBLLEN-LABELD(R12),4    PREVIOUS LBLLEN = 4 ??      @25C\n         JNE   FCHARC                  BRANCH IF NOT 4             @15A\n         LR    R12,R7                                              @15A\n         SH    R12,CONLEN              LOCATE THE TEXT             @15A\n*        TRT   0(4,R12),CHARTRAN       CONSECUTIVE 4 BYTES IS HEX  @16A\n         TRT   0(4,R12),MIXCTRAN       CONSECUTIVE 4 BYTES IS HEX  @16A\n         JNZ   FHEX4C                  BRANCH IF HEX               @16A\nFCHARC   LH    R11,CONLEN              GET DATA LENGTH\n         AHI   R11,-1                  MINUS LENGTH CODE BY 1 FOR MOVE\n         EX    R11,FMCNT               MVC   2(1,R14),CONDATA\n         LA    R11,3(R11,R14)          STEP PAST OPERAND DATA      @25C\n         MVI   0(R11),C''''            ENDING QUOTE '\n         J     FCWRT                   CONTINUE\nFSYMBOL  CLC   CONSYM,BLANX            IS IT BLANK\n         JE    FHEX                    YES, TREAT AS HEX\n         CLI   CONTYPE,C'V'            VCON ?                      @27A\n         JE    FCOPND4                 BRANCH IF YES               @27A\n         CLI   CONLEN+1,8              IS IT 8-BYTES               @28A\n         JE    FDBLADDR                YES, 8 BYTES AD             @28A\n         CLI   CONLEN+1,4              LENGTH IS 4\n         JH    FHEX                    NO, GREATER\n         JE    FCOPND4                 YES, 4 BYTES\n         CLI   CONLEN+1,3              LENGTH IS 3\n         JE    FCOPND3                 YES\n         CLI   CONLEN+1,2              LENGTH IS 2\n         JE    FCOPND2                 YES\n         MVC   OPNDS+1(2),SL1          OPND LENGTH L1\n         J     FSLHE1                  CONTINUE\nFCOPND2  MVC   OPNDS+1(2),SL2          OPND LENGHT L2\n         J     FSLHE1                  CONTINUE\nFCOPND3  MVC   OPNDS+1(2),SL3          OPND LENGTH L3\n         J     FSLHE1                  CONTINUE\nFCOPND4  LA    R11,1(R14)              STEP TO ( POS               @27C\n         J     FSLHE                   CONTINUE\nFSLHE1   LA    R11,3(R14)              STEP TO ( POS               @27C\nFSLHE    MVI   0(R11),C'('             DELIMITER\n         MVC   1(8,R11),CONSYM         SYMBOL TO RECORD\n         CLI   CONSYM,C'V'             VCON  ???                   @13A\n         JNE   CHKHIGH                 YES CHECK HIGH ORDER BIT    @13A\n         CLI   CONSYM,C'A'             ADCON ???                   @13A\n         JNE   NOT_LAST_PARM           BRANCH IF NOT ADCON ??      @13A\nCHKHIGH  LR    R15,R7                                              @13A\n         AHI   R15,-4                  POINT TO PREVIOUS 4 BYTES   @13A\n         TM    0(R15),X'80'            LAST PARAMETER ??           @13A\n         JNO   NOT_LAST_PARM        BRANCH IF HIGH ORDER BIT OFF   @13A\n         CLC   S_AL3,OPNDS             'AL3' ?                     @13A\n         JE    NOT_LAST_PARM           BRANCH IF AL3               @13A\n         CLC   S_A0,1(R11)             A(A0xxxxx)                  @22A\n         JNE   SETLOPND                BRANCH IF NOT EQUAL         @22A\nSETSOPND MVC   8(12,R11),HIGHBITO      +X'80000000'                @22A\n         J     FCEOPND                                             @13A\nSETLOPND CLI   8(R11),C' '                                         @22A\n         JE    SETSOPND                BRANCH IF EQUAL             @22A\n         MVC   9(12,R11),HIGHBITO      +X'8000000                  @13A\nFCEOPND  AHI   R11,21                  POINT TO END OF OPERAND     @13A\n         J     FRHE                                                @13A\nNOT_LAST_PARM  DS  0H                                              @13A\n         AHI   R11,9                   @ RHE SYMBOL IN OPERAND\nFRHE     CLI   0(R11),C' '             CHARACTER IS BLANK\n         JNE   SETRPAR                 NO\n         JCT   R11,FRHE                LOOP TO FIND RHE\nSETRPAR  MVI   1(R11),C')'             SET CLOSING PAREN\n         J     FCWRT                   CONTINUE\nFCONST4  LR    R12,R7                                              @28A\n         SH    R12,CONLEN                                          @28A\n         MVC   NAME,CONNAME                                        @28A\n         XC    CONLEN,CONLEN                                       @28A\n         J     FHEX4X                  CONTINUE                    @28A\nFHEX4    LR    R12,R7                  @ CONSTANT DATA             @15A\n         SH    R12,CONLEN                                          @15A\nFHEX4C   LA    R11,OPNDS                                           @26A\nFHEX4X   MVC   0(2,R14),SXAPO          TYPE AND BEGIN QUOTE X'     @26C\n         JAS   R9,HEXPRT4              CONVERT TO PRINTABLE        @15A\n         MVC   2(8,R14),PRTABL                                     @26C\n         MVI   10(R14),C''''           ENDING QUOTE '              @26C\n         MVI   LEN,4                   SET LEN TO 4                @15A\n         OI    FLAG1,FLGHEX4           TURN ON HEX4 FLAG           @15A\n         J     FCWRT                   WRITE OUTPUT                @15A\nFDBLADDR MVC   0(3,R14),S_ADBRC        OPERAND DATA TYPE IS AD(    @28A\n         MVC   3(8,R14),LBLNAME        COPY LABEL                  @28A\n         CLI   LBLNAME+7,C' '          8 CHARACTER LABEL ??        @28A\n         JNE   FLABEL8                 BRANCH IF NO                @28A\n         MVI   10(R14),C')'            ENDING BRACKET              @28A\n         J     FCWRT                   CONTINUE                    @28A\nFLABEL8  MVI   11(R14),C')'            ENDING BRACKET              @28A\n         J     FCWRT                   CONTINUE                    @28A\nFHEX     LA    R12,CONDATA             @ CONSTANT DATA\n         MVC   0(2,R14),SXAPO          TYPE AND BEGIN QUOTE X'     @26C\n         JAS   R9,HEXPRT4              CONVERT TO PRINTABLE\n         LH    R12,CONLEN              GET DATA LENGTH\n         SLL   R12,1                   DOUBLE DATA LENGTH\n         AHI   R12,-1                  MINUS 1 FOR EX\n         EX    R12,MVHX                MVC   2(1,R14),PRTABL\n         LA    R12,2(R12,R14)          OPERAND END ADDRESS         @26C\n         MVI   1(R12),C''''            ENDING QUOTE '\nFCWRT    JAS   R9,WRTOUT               WRITE RECORD SYSPUNCH\n         JAS   R9,TXTFMT               GO FORMAT HEX DATA\n         JAS   R9,PRINT                GO PRINT IT SYSPRINT\nFCCLR    MVI   CONPROG,0               RESET CONSTANT IN PROGRESS\n         MVC   CONNAME,BLANX           CLEAR NAME\n         MVI   CONTYPE,0               RESET TYPE\n         XC    CONDATA,CONDATA         CLEAR CONSTANT DATA\n         MVC   CONSYM,BLANX            CLEAR SYMBOL\n         MVC   SAVLEN,CONLEN           SAVE CONLEN                 @15A\n         XC    CONLEN,CONLEN           CLEAR LENGTH\n         MVC   CONLOC,XZROS            CLEAR LOCATION\n         MVC   CONOFST,XZROS           CLEAR OFFSET TO CONSTANT\n         TM    FLAG1,FLGHEX4           HEX4 SWITCH IS ON ?         @15A\n         JNO   FCRET                   BRANCH IF OFF               @15A\n         NI    FLAG1,255-FLGHEX4       TURN OFF HEX4 FLAG          @15A\n         LR    R12,R7                                              @15A\n         SH    R12,SAVLEN              SAVE LENGTH                 @15A\n         LA    R7,2(,R12)     ???                                  @28A\n         J     HEX4RET                                             @15A\nFCRET    L     R9,FC9                  GET RETURN ADDRESS\n         BR    R9                      RETURN TO CALLER\n*\n******************************************************************\n* THIS ROUTINE FORMATS RRE1-FORMAT INSTRUCTIONS FOR OUTPUT.      *\n* IE   ONE OPERAND                                               *\n******************************************************************\n*\nRRE1OPND DS    0H             *** RRE FORMAT INSTRUCTIONS ***      @20C\n         SR    R1,R1                   CLEAR WORK                  @02A\n         IC    R1,TEXT+3               GET FOURTH BYTE             @02A\n         SRL   R1,4                    SHIFT OUT R2                @02A\n         CVD   R1,DBLWD                CONVERT                     @02A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @02A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @02A\n         MVI   OPNDS,C'R'              BEGIN R1 OPERAND            @02A\n         CHI   R1,10                   REG NBR > 9                 @02A\n         JL    RRE11                   NO, 0-9                     @02A\n         MVC   OPNDS+1(2),DBLWD        YES, 10-15                  @02A\n         J     INSTOUT                 EXIT                        @02A\nRRE11    MVC   OPNDS+1(1),DBLWD+1      MOVE REG NUMBER             @02A\n         J     INSTOUT                 EXIT                        @02A\n*\n******************************************************************\n* THIS ROUTINE FORMATS RRE2-FORMAT INSTRUCTIONS FOR OUTPUT.      *\n* IE   TWO OPERAND2                                              *\n******************************************************************\n*\nRRE2OPND DS    0H                   *** RRE2 FORMAT INSTRUCTIONS ***\n         CLC   S_EREG,MNEMONIC         EREG OP ??                 @26A\n         JE    SOPS29B                 BRANCH IF YES              @24A\n         CLC   IBAKR,TEXT              IS IT BAKR R14,0 ??        @12A\n         JNE   RRE2STRT                YES                        @12A\n         MVC   COMMENT(L'S12),S12   SET COMMENT TO SAVE REGISTER  @12A\n         J     RRE2STRT                                           @12A\nSOPS29B  MVC   COMMENT(L'S29B),S29B    Extract stack registers    @24A\nRRE2STRT SR    R1,R1                   CLEAR WORK                 @12A\n         IC    R1,TEXT+3               GET FOURTH BYTE            @12A\n         SRL   R1,4                    SHIFT OUT R2               @12A\n         CVD   R1,DBLWD                CONVERT                    @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                 @12A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                     @12A\n         LA    R15,OPNDS               SET ACCESS REGISTERS       @13A\n         CLI   ICLASS,AR2              AR2 INSTRUCTION ??         @22C\n         JE    RRE2AR1                 BRANCH IF EQUAL            @22A\n         CLI   ICLASS,AR1              AR1 INSTRUCTION ??         @21C\n         JNE   RRE2GR1                 BRANCH IF NOT EQUAL        @13A\nRRE2AR1  MVI   0(R15),C'A'             SET ACCESS REGISTERS       @13A\n         AHI   R15,1                   TO NEXT POS                @13A\nRRE2GR1  MVI   0(R15),C'R'             BEGINNING OPERAND 1        @13A\n         AHI   R15,1                   TO NEXT POS                @13A\n         CHI   R1,10                   REG NBR > 9                @13A\n         JL    RRE211                  NO, 0-9                    @13A\n         MVC   0(2,R15),DBLWD          YES, 10-15                 @13A\n         AHI   R15,2                   TO NEXT POS                @13A\n         J     RRE2CMA                 CONTINUE                   @13A\nRRE211   MVC   0(1,R15),DBLWD+1        MOVE REG NUMBER            @13A\n         AHI   R15,1                   TO NEXT POS                @13A\nRRE2CMA  DS    0H                      TEST ANY SECOND OPERAND    @13A\n         MVI   0(R15),C','                                        @13A\n         AHI   R15,1                   TO NEXT POS                @13A\n         CLI   ICLASS,AR2              AR2 INSTRUCTION ??         @22A\n         JE    RRE2AR2                 BRANCH IF EQUAL            @22A\n         CLI   ICLASS,AR3              AR3 INSTRUCTION ??         @21A\n         JNE   RRE2GR3                 BRANCH IF NOT EQUAL        @13A\nRRE2AR2  MVI   0(R15),C'A'             SET ACCESS REGISTERS       @13A\n         AHI   R15,1                   TO NEXT POS                @13A\nRRE2GR3  MVI   0(R15),C'R'             BEGINNING OPERAND 1        @13A\n         AHI   R15,1                   TO NEXT POS                @13A\n         PACK  DBLWD(1),TEXT+3(1)      FLIP 2ND BYTE              @13A\n         SR    R1,R1                   CLEAR WORK                 @12A\n         IC    R1,DBLWD                GET R2R1                   @12A\n         SRL   R1,4                    SHIFT OUT R1               @12A\n         CVD   R1,DBLWD                CONVERT                    @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                 @12A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                     @12A\n         CHI   R1,10                   R2 > 9                     @12A\n         JL    RRE221                  NO, 0-9                    @12A\n         MVC   0(2,R15),DBLWD          YES, MOVE REG 10-15        @12A\n         J     RRE2EXIT                EXIT                       @22C\nRRE221   MVC   0(1,R15),DBLWD+1        MOVE REG 0-9               @12A\nRRE2EXIT TM    ICLASS,CDOR             IS IT CLEAR REGISTER OP    @22A\n         JO    RRCLR0                  BRANCH IF YES              @22A\n         CLC   ICPYA,TEXT              CPYA OP ??                 @26A\n         JNE   INSTOUT                 BRANCH IF YES              @26A\n         MVC   COMMENT(9),OPNDS        Copy CPYA operands         @26A\n         CLI   COMMENT+3,C','                                     @26A\n         JE    RRE2CPYA                                           @26A\n         MVI   COMMENT+4,C'='          Replace ',' by '='         @26A\n         J     INSTOUT                                            @26A\nRRE2CPYA MVI   COMMENT+3,C'='          Replace ',' by '='         @26A\n         J     INSTOUT                 EXIT                       @12A\n*\n******************************************************************\n*                                                                *\n* THIS ROUTINE FORMATS RR-FORMAT INSTRUCTIONS FOR OUTPUT.        *\n*                                                                *\n******************************************************************\n*\nRROPND   DS    0H                      *** RR FORMAT INSTRUCTIONS ***\n         CLI   0(R7),X'0B'             IS IT BSM\n         JE    RRAMODE\n         CLI   0(R7),X'0C'             IS IT BASSM                @06A\n         JE    RRBASR                                             @06A\n         CLI   0(R7),X'0D'             IS IT BASR                 @06A\n         JE    RRBASR                                             @06A\n         CLI   0(R7),X'05'             IS IT BALR\n         JNE   RRSTRT\nRRBASR   CLI   1(R7),X'EF'             IS IT BALR 14,15\n         JE    RRSTDL                  YES\n         TM    1(R7),X'0F'             NO, IS R2 = 0\n         JNZ   RRNSTD                  NO\n         CLI   COMMENT,C' '            COMMENT EXIST ??           @31A\n         JNE   RRSTRT                  BRANCH IF NOT BLANK        @31A\n         MVC   COMMENT(11),S01         SET COMMENT TO ADDRESS SET\n         J     RRSTRT                  CONTINUE\nRRAMODE  MVC   COMMENT(20),S02         BRANCH AND SET AMODE\n         CLI   1(R7),X'0E'\n         JNE   RRSTRT\n         MVC   COMMENT(L'S03),S03      RETURN AND SET AMODE\n         J     RRSTRT                  CONTINUE\nRRSTDL   CLI   COMMENT,C' '                                        @31A\n         JNE   RRSTRT                                              @31A\n         MVC   COMMENT(7),S05          SET COMMENT TO LINKAGE\n         J     RRSTRT                  CONTINUE\nRRNSTD   MVC   COMMENT(14),S04         SET COMMENT TO NONSTD LINKAGE\nRRSTRT   SR    R1,R1                   CLEAR WORK\n         IC    R1,TEXT+1               GET 2ND BYTE\n         SRL   R1,4                    SHIFT OUT R2\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         MVI   OPNDS,C'R'              BEGIN R1 OPERAND\n         CHI   R1,10                   REG NBR > 9\n         JL    RR11                    NO, 0-9\n         MVC   OPNDS+1(2),DBLWD        YES, 10-15\n         LA    R1,OPNDS+3              TO NEXT POS\n         J     RRCMA                   CONTINUE\nRR11     MVC   OPNDS+1(1),DBLWD+1      MOVE REG NBR\n         LA    R1,OPNDS+2              TO NEXT POS\nRRCMA    CLI   TEXT,X'04'              IS IT SPM\n         JNE   RRCMA1                  NO\n         TM    1(R7),X'0F'             YES, IS R2 FIELD = 0\n         JZ    INSTOUT                 YES, GOOD INSTR\n         J     NOTINST                 ERROR RETURN (NOT INSTR)\nRRCMA1   MVC   0(2,R1),SCOMMAR         DELIMITERS\n         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE\n         SR    R15,R15                 CLEAR WORK\n         IC    R15,DBLWD               GET R2R1\n         SRL   R15,4                   SHIFT OUT R1\n         CVD   R15,DBLWD               CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R15,10                  R2 > 9\n         JL    RR21                    NO, 0-9\n         MVC   2(2,R1),DBLWD           YES, MOVE REG 10-15\n         J     RR22                                              @17C\nRR21     MVC   2(1,R1),DBLWD+1         MOVE REG 0-9\nRR22     TM    ICLASS,CDOR             IS IT CLEAR REGISTER OP   @21C\n         JO    RRCLR0                  BRANCH IF YES             @21C\n         CLI   DBLWD+1,C'0'            REG 0 ??                  @13A\n         JNE   INSTOUT                 BRANCH IF NOT REG0        @13A\n         CLI   TEXT,X'06'              IS IT BCTR OP ??          @13A\n         JNE   INSTOUT                 NO THEN BRANCH            @13A\n         MVC   COMMENT(L'S27),S27      SET COMMENT TO MINUS ONE  @13A\n         MVC   COMMENT+11(2),OPNDS+1   COPY REGISTER             @20A\n         CLI   COMMENT+12,C','                                   @20A\n         JNE   INSTOUT                                           @20A\n         MVI   COMMENT+12,C' '         CLEAR COMMA               @20A\n         J     INSTOUT                 EXIT                      @13A\nRRCLR0   SR    R14,R14                 CLEAR R14 FOR ICM         @17A\n         CLI   TEXT,X'B9'              DOUBLE BYTE OPCODE ?      @22A\n         JE    RRCLR2                  BRANCH IF YES             @22A\n         ICM   R14,1,TEXT+1            LOAD R1R2                 @17A\n         J     RRCLR4                                            @22A\nRRCLR2   ICM   R14,1,TEXT+3            LOAD R1R2                 @22A\n         LR    R1,R15                                            @22A\n         AHI   R1,-2                                             @22A\nRRCLR4   LR    R15,R14                                           @17A\n         NILL  R15,X'000F'             GET RID OF R1             @17A\n         SRL   R14,4                   GET RID OF R2             @17A\n         CR    R14,R15                 R1 = R2 ??                @17A\n         JNE   INSTOUT                 EXIT                      @17A\n         MVC   COMMENT(L'SCLREG),SCLREG   SET COMMENT TO CLEAR   @17A\n         MVC   COMMENT+L'SCLREG(3),1(R1)      REGISTER XX        @17A\n         J     INSTOUT                 EXIT                      @17A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RX-TYPE  *\n* INSTRUCTIONS. THE BDXADR ROUTINE IS CALLED TO FORMAT THE       *\n* STORAGE OPERAND.                                               *\n*                                                                *\n******************************************************************\nRXOPND   DS    0H                      *** RX FORMAT INSTRUCTIONS ***\nRXSTRT   SR    R1,R1                   CLEAR WORK\n         IC    R1,TEXT+1               GET R1X2\n         SRL   R1,4                    SHIFT OUT X2\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         LA    R15,OPNDS               BEGIN 1ST OPERAND           @18A\n         CLI   ICLASS,FLTPT            FLOATING OP code ?          @18A\n         JNE   RXNFLT                  BRANCH IF NOT FP INSTR      @18A\n         MVI   0(R15),C'F'             SET FLOATING POINT REG      @18A\n         AHI   R15,1                   TO NEXT POS                 @18A\nRXNFLT   MVI   0(R15),C'R'                                         @18C\n         CHI   R1,10                   R1 < 10\n         JL    RXR11                   YES, 0-9\n         MVC   1(2,R15),DBLWD          NO, MOVE REG 10-15          @18C\n         AHI   R15,3                   TO NEXT POS                 @18C\n         J     RXCMA                   CONTINUE\nRXR11    MVC   1(1,R15),DBLWD+1        MOVE REG 0-9                @18C\n         AHI   R15,2                   TO NEXT POS                 @18C\nRXCMA    CLI   TEXT,X'46'              BCT OPCODE ??               @22A\n         JNE   RXNBCT                  BRANCH IF NOT BCT           @22A\n         MVC   COMMENT+12(2),OPNDS     COPY REGISTERS              @22A\nRXNBCT   MVI   0(R15),C','             DELIMITER\n         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,DBLWD               PICK UP X2R1\n         SRL   R10,4                   SHIFT OUT R1\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD\n         ST    R15,BDX15               SAVE R15\n         JAS   R9,BDXADR               CONVERT RX ADDRESS\n         L     R15,BDX15               RESTORE R15\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK\n         CLI   0(R7),X'46'             IS IT BCT OP CODE ?         @21A\n         JE    RXJCT                   YES                         @21A\n         CLI   0(R7),X'4D'             IS IT BAS OP CODE ?\n         JE    RRBAS                   YES\n         CLI   0(R7),X'45'             IS IT BAL OP CODE ?\n         JNE   RXCONT\nRRBAS    JAS   R14,PRTREGS             PRINT REGISTER USEAGE       @26A\n         CLI   COMMENT,C' '                                        @31A\n         JNE   INSTOUT                                             @31A\n         MVC   COMMENT(L'S06),S06      SET COMMENT TO PERFORM\n         TM    1(R7),X'E0'             R1 = 0 OR 1\n         JNZ   RXCONT                  NO\n         MVC   COMMENT(L'S07),S07      SET COMMENT TO PARM SET BRANCH\n         J     INSTOUT                                             @21A\nRXCONT   CLC   IFRRS,0(R7)                                         @23A\n         JNE   INSTOUT                                             @23A\n         MVC   COMMENT(L'SFRRS),SFRRS  '!FRRS PSASTAK Normal Stk'  @23A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14A\nRXJCT    MVC   COMMENT(L'S32),S32      'LOOP UNTIL REG =0'         @21A\n         J     INSTOUT                                             @21A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RI1-TYPE *\n* INSTRUCTIONS (IE RI BRANCH INSTRUCTIONS)                       *\n*                                                                *\n******************************************************************\nRI1OPND  DS    0H                *** RI1 FORMAT INSTRUCTIONS ***   @12A\n         SR    R1,R1                   CLEAR WORK                  @12A\n         LA    R15,OPNDS               NEXT POS                    @12A\n         SR    R10,R10                 CLEAR R10                   @22A\n         IC    R10,TEXT+1              MASK OFF RI INSTR REGISTER  @12A\n         NILL  R10,X'000F'               FIELD                     @12A\n         CHI   R10,4                   RELATIVE BRANCH OP CODE ?   @12A\n         JE    RI1JMP                  BRANCH IF A7?4 (JUMP)       @12A\n         CHI   R10,6                   JCT OP CODE                 @21A\n         JE    RI1JCT                  BRANCH IF A7?6 (JCT)        @21A\n         CLI   COMMENT,C' '                                        @31A\n         JNE   RI2OPND                                             @31A\n         MVC   COMMENT(L'S30),S30      'Call sub-routine'          @12A\n         J     RI2OPND                                             @12A\nRI1JCT   MVC   COMMENT(L'S32),S32      'Loop UNTIL REG = 0'        @21A\n         J     RI2OPND                                             @21A\nRI1JMP   MVC   MNEMONIC,BLANX          SET MNEMONIC TO BLANK       @21C\n         MVC   TEMP1,TEXT+1                                        @12A\n         NI    TEMP1,X'F0'             MASK OFF LOW ORDER BYTES    @12A\n         MVI   MNEMONIC,C'J'           SET JXX  OPERATION CODE     @12A\n         CLI   TEMP1,X'00'             NOP ?                       @21A\n         JE    RINOP                                               @21A\n         CLI   TEMP1,X'F0'             UNCONDITIONAL BRANCH?       @21A\n         JE    RISBR                                               @21A\n         L     R12,CCODEAD             GET ADDRESS OF COND CODE TBL@21A\n         LR    R0,R12                                              @21A\nRI1CCIX  CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @21A\n         JE    RI1CDFT             IF END OF TABLE THEN USE DFT CC @21A\n         CLC   CCTYPE,0(R12)           RIGHT CONDITION CODE INDEX  @21A\n         JE    RI1FCCTB                BRANCH IF YES               @21A\n         AHI   R12,CC1LEN              POINT TO NEXT INDEX ENTRY   @21A\n         J     RI1CCIX                 TRY NEXT ENTRY              @21A\nRI1CDFT  L     R12,CCODEAD             GET ADDRESS OF COND CODE TB @21A\n         LR    R0,R12                                              @21A\nRI1FCCTB AH    R0,2(R12)               LOCATE CC TABLE ENTRY       @21A\n         LR    R12,R0                                              @21A\nRI1FCCTE CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @21A\n         JE    RI1CDFT             IF END OF TABLE THEN USE DFT CC @21A\n         CLC   TEMP1,0(R12)            RIGHT CONDITION CODE ??     @21A\n         JE    RIFOUND                 BRANCH IF YES               @21A\n         AHI   R12,CC2LEN              POINT TO NEXT TABLE ENTRY   @21A\n         J     RI1FCCTE                TRY NEXT ENTRY              @21A\nRIFOUND  DS    0H                                                  @21A\n         MVC   COMMENT(L'SBRANCH),SBRANCH     COPY 'Jump if '      @21A\n         MVC   COMMENT+8(17),3(R12)    COPY DESCRIPTION            @21A\n         MVC   MNEMONIC+1(2),1(R12)                                @21A\n         CLI   MNEMONIC+1,C'C'         BRANCH ON C?                @21A\n         JNE   RI1CONT                 BRANCH IF NO                @21A\n         SR    R1,R1                   CLEAR WORK                  @21A\n         IC    R1,TEMP1                GET COND CODE               @21A\n         SRL   R1,4                    SHIFT 4 BITS                @21A\n         STC   R1,TEMP1                                            @21A\n         CHI   R1,9                    COND CODE > 9               @21A\n         JH    RIFCC2                  JUMP IF HIGHER              @21A\n         OI    TEMP1,X'F0'             MAKE IT PRINTABLE           @21A\n         MVC   0(1,R15),TEMP1          COPY COND CODE              @21A\n         MVI   1(R15),C','                                         @21A\n         AHI   R15,2                   NEXT POS                    @21A\n         LA    R2,2                                                @21A\n         J     RI1CONT                                             @21A\nRIFCC2   MVI   0(R15),C'1'                                         @21A\n         AHI   R1,-10                                              @21A\n         STC   R1,TEMP1                                            @21A\n         OI    TEMP1,X'F0'                                         @21A\n         MVC   1(1,R15),TEMP1                                      @21A\n         MVI   2(R15),C','                                         @21A\n         AHI   R15,3                   NEXT POS                    @21A\n         LA    R2,3                    ASSUME 3 BYTES              @21A\n         J     RI1CONT                 YES                         @21A\nRINOP    MVC   MNEMONIC,SJNOP          SET MNEMONIC TO NOP         @21A\n         J     RI1CONT                 YES                         @21A\nRISBR    MVC   COMMENT(5),SBRANCH      COPY 'JUMP '                @12A\nRI1CONT  LR    R11,R7                  GET CURRENT OFFSET          @12A\n         S     R11,TXTSTRT             MINUS PROGRAM START         @12A\n         AH    R11,TEXT+2              ADD DDDD                    @12A\n         AH    R11,TEXT+2              R11 = @CUR + 2*DDDD         @12A\n         STCM  R11,7,0(R15)                                        @12A\n         LR    R12,R15                 @ OFFSET                    @12A\n         JAS   R9,HEXPRT3              GO CONVERT                  @12A\n         MVI   0(R15),C'A'             ADDRESS CONSTANT            @12A\n         MVC   1(6,R15),PRTABL         Get rest of name            @12A\n         SR    R0,R0                   Clear R0                    @23A\n         CH    R0,TEXT+2               DISPL < 0                   @23A\n         JNL   RIEXIT                  Jump if backward reference  @23A\n         JAS   R14,PRTREGS             Print register usage        @23A\n         J     RIEXIT\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RI2-TYPE *\n* INSTRUCTIONS                                                   *\n*                                                                *\n******************************************************************\nRI2OPND  DS    0H                                                 @12A\n         SR    R1,R1                   CLEAR WORK                 @12A\n         LA    R15,OPNDS               ?? NEXT POS                @12A\n         IC    R1,TEXT+1               GET R1                     @12A\n         SRL   R1,4                                               @12A\n         CVD   R1,DBLWD                CONVERT                    @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                 @12A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                     @12A\n         MVI   0(R15),C'R'             BEGIN 1ST OPERAND          @12A\n         CHI   R1,10                   R1 < 10                    @12A\n         JL    RIR11                   YES, 0-9                   @12A\n         MVC   1(2,R15),DBLWD          NO, MOVE REG 10-15         @12A\n         LA    R15,OPNDS+3             TO NEXT POS                @12A\n         J     RICMA                                              @12A\nRIR11    MVC   1(1,R15),DBLWD+1        MOVE REG 0-9               @12A\n         LA    R15,OPNDS+2             TO NEXT POS                @12A\nRICMA    CLC   S32,COMMENT             JCT OP                     @22A\n         JNE   RINJCT                  BRANCH IF NOT JCT OPCODE   @22A\n         MVC   COMMENT+12(2),OPNDS+1   COPY REGISTERS             @22A\nRINJCT   MVI   0(R15),C','             DELIMITER                  @12A\n         AHI   R15,1                                              @12A\n         CLI   ITYPE,RI1                                          @12A\n         JE    RI1CONT                                            @12A\n         TM    IEDT,IM2                2 BYTES IMMEDIATE OPERAND  @12A\n         JNO   RIARITH                 BRANCH IF NOT IM2 INSTR    @12A\nRIHEX1   MVC   0(2,R15),SXAPO          DELIMITER FOR X'           @12A\n         LA    R12,TEXT+2              @ HEX BYTE                 @12A\nRIHEX2   JAS   R9,HEXPRT2              CONVERT                    @12A\n         MVC   2(4,R15),PRTABL         PRINTABLE HEX TO OPERAND   @12A\n         MVI   6(R15),C''''            FINAL QUOTE                @12A\n         J     INSTOUT                                            @12A\nRIARITH  LH    R11,TEXT+2              FORMAT 2 BYTES IMMEDIATE   @12A\n         CVD   R11,DBLWD                  OPERANDS TO ARITHMETIC  @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                 @12A\n         UNPK  DBLWD(5),DBLWD+3(5)     UNPACK                     @12A\n         CHI   R11,0                   TEST FOR + OR -            @12A\n         JNL   RIPOSI                  BRANCH IF POSITIVE NUMBER  @12A\n         MVI   0(R15),C'-'             SET NEGATIVE SIGN          @12A\n         AHI   R15,1                                              @12A\n         J     RI4DIGX                                            @29A\nRIPOSI   CLI   DBLWD,C'0'              5 DIGITS ??                @12A\n         JE    RI4DIG                  BRANCH IF 4 DIGITS         @12A\n         CLC   X_DF80,TEXT+2                                      @29C\n         JL    RIHEX1                  BRANCH IF OPERAND > X_DF80 @28A\n         CLC   X_1FF0,TEXT+2                                      @29C\n         JL    RIHEX1                  BRANCH IF OPERAND > X_1FF0 @28A\n         MVC   0(5,R15),DBLWD          COPY 5 DIGITS OPERAND      @12A\n         J     INSTOUT                                            @12A\nRI4DIG   CLC   X_0FFF,TEXT+2                                      @29A\n         JL    RIHEX1                  BRANCH IF OPERAND > X_0FFF @29A\nRI4DIGX  CLI   DBLWD+1,C'0'            4 DIGITS ??                @12A\n         JE    RI3DIG                  BRANCH IF 3 DIGITS         @12A\n         MVC   0(4,R15),DBLWD+1        COPY 4 DIGITS OPERAND      @12A\n         J     INSTOUT                                            @12A\nRI3DIG   CLI   DBLWD+2,C'0'            3 DIGITS ??                @12A\n         JE    RI2DIG                  BRANCH IF 4 DIGITS         @12A\n         MVC   0(3,R15),DBLWD+2        COPY 3 DIGITS OPERAND      @12A\n         J     INSTOUT                                            @12A\nRI2DIG   CLI   DBLWD+3,C'0'            2 DIGITS ??                @12A\n         JE    RI1DIG                  BRANCH IF 1 DIGIT          @12A\n         MVC   0(2,R15),DBLWD+3        COPY 2 DIGITS OPERAND      @12A\n         J     INSTOUT                                            @12A\nRI1DIG   MVC   0(1,R15),DBLWD+4        COPY 1 DIGIT  OPERAND      @12A\nRIEXIT   J     INSTOUT                 WRITE INSTRUCTION RECORD   @14C\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RIL-TYPE *\n* INSTRUCTIONS                                                   *\n*                                                                *\n******************************************************************\nRIL1OPND DS    0H                        *** I2L                  @13A\n         CLC   MNEMONIC,S_LARL         LARL INSTR ??              @15A\n         JNE   RIL1CNT1                BRANCH IF NO               @15A\n         MVC   COMMENT(L'SCODERG),SCODERG   SET COMMENT           @15A\nRIL1CNT1 IC    R10,TEXT+1                                         @12A\n         NILL  R10,X'000F'             REMOVE CONDITION CODE      @12A\n         CHI   R10,4                                              @13A\n         JE    RILJMP                  BRANCH IF JUMP INSTR       @13A\n         IC    R10,TEXT+1              PICK UP 2ND OP CODE        @12A\n         SRL   R10,4                   REMOVE 2ND REG             @12A\n         JAS   R9,FORRGC               FORMAT REG OPERAND         @13A\n         AHI   R15,1                                              @13A\n         MVI   0(R15),C','                                        @13A\n         AHI   R15,1                                              @13A\nRIL1ADR  LR    R11,R7                  GET CURRENT OFFSET         @13A\n         S     R11,TXTSTRT             MINUS PROGRAM START        @13A\n         A     R11,TEXT+2              ADD DDDDDDDD               @13A\n         A     R11,TEXT+2              ADD DDDDDDDD               @13A\n         STCM  R11,7,0(R15)                                       @13A\n         LR    R12,R15                                            @13A\n         JAS   R9,HEXPRT3              GO CONVERT TO HEXI         @13A\n         MVI   0(R15),C'A'                                        @13A\n         MVC   1(6,R15),PRTABL         REST OF NAME               @13A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD   @14C\n****************************************************************\nRIL2OPND DS    0H                        *** I2L                   @13A\n         SR    R1,R1                   CLEAR WORK                  @13A\n         IC    R1,TEXT+1               GET R1                      @13A\n         SRL   R1,4                                                @12A\n         CVD   R1,DBLWD                CONVERT                     @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @12A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @12A\n         MVI   OPNDS,C'R'              BEGIN 1ST OPERAND           @12A\n         CHI   R1,10                   R1 < 10                     @12A\n         JL    RILR11                  YES, 0-9                    @12A\n         MVC   OPNDS+1(2),DBLWD        NO, MOVE REG 10-15          @12A\n         LA    R15,OPNDS+3             TO NEXT POS                 @12A\n         J     RILCMA                  CONTINUE                    @12A\nRILR11   MVC   OPNDS+1(1),DBLWD+1      MOVE REG 0-9                @12A\n         LA    R15,OPNDS+2             TO NEXT POS                 @12A\nRILCMA   MVI   0(R15),C','             DELIMITER                   @12A\n         AHI   R15,1                                               @12A\n*****************************************************\nRILFOPND DS    0H\n         L     R11,TEXT+2              GET DDDDDDDD                @12A\n         CVD   R11,DBLWD               CONVERT TO PACK DECIMAL     @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @12A\n         UNPK  DBLWD2(15),DBLWD(8)     UNPACK                      @12A\n         CHI   R11,0                   NEGATIVE OR POSITIVE        @12A\n         JNL   RLPOSI                  BRANCH IF NOT NEGATIVE      @12A\n         MVI   0(R15),C'-'             SET MINUS SIGN              @12A\n         AHI   R15,1                   BUMP UP POSITION COUNTER    @12A\nRLPOSI   CHI   R11,9                   > 0                         @21A\n         JH    RILHI9                  BRANCH IF YES               @21A\n         MVC   0(1,R15),DBLWD2+14                                  @21A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @21A\nRILHI9   MVC   0(10,R15),DBLWD2+5      COPY FULL WORD IMMEDIATE    @12A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n*****************************************************\nRILJMP   IC    R10,TEXT+1                                          @12A\n         MVC   TEMP1,TEXT+1                                        @12A\n         NI    TEMP1,X'F0'             REMOVE REGISTER FROM OPCOD  @12A\n         LA    R15,OPNDS               POINT TO OPNDS              @12A\n         CLI   TEMP1,X'00'             NOP ?                       @21A\n         JE    RILNOP                                              @21A\n         CLI   TEMP1,X'F0'             UNCONDITIONAL BRANCH ?      @21A\n         JE    RILSBR                                              @21A\n*        LRL   R12,CCODEAD             GET ADDRESS OF COND CODE TBL@21A\n         L     R12,CCODEAD             GET ADDRESS OF COND CODE TBL@21A\n         LR    R0,R12                  SAVE COND CODE TBL ADDRESS  @21A\nRILCCIX  CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @21A\n         JE    RIL1CDFT            IF END OF TABLE THEN USE DFT CC @21A\n         CLC   CCTYPE,0(R12)           RIGHT CONDITION CODE INDEX  @21A\n         JE    RIL1FCTB                BRANCH IF YES               @21A\n         AHI   R12,CC1LEN              POINT TO NEXT INDEX ENTRY   @21A\n         J     RILCCIX                 TRY NEXT ENTRY              @21A\nRIL1CDFT L     R12,CCODEAD             GET ADDRESS OF COND CODE TB @21A\n         LR    R0,R12                                              @21A\nRIL1FCTB AH    R0,2(R12)                                           @21A\n         LR    R12,R0                                              @21A\nRIL1FCTE CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @20C\n         JE    RIL1CDFT            IF END OF TABLE THEN USE DFT CC @21A\n         CLC   TEMP1,0(R12)            RIGHT CONDITION CODE ??     @21A\n         JE    RILFOUND                BRANCH IF YES               @21A\n         AHI   R12,CC2LEN              POINT TO NEXT TABLE ENTRY   @21A\n         J     RIL1FCTE                TRY NEXT ENTRY              @21A\nRILFOUND DS    0H                                                  @21A\n         MVC   COMMENT(L'SBRANCH),SBRANCH     COPY 'Jump if '      @21A\n         MVC   COMMENT+8(17),3(R12)    COPY DESCRIPTION            @21A\n         MVC   MNEMONIC+4(2),1(R12)                                @21A\n         CLI   MNEMONIC+4,C'C'         BRANCH ON C?                @21A\n         JNE   RI1CONT                 BRANCH IF NO                @21A\n         SR    R1,R1                   CLEAR WORK                  @21A\n         IC    R1,TEMP1                                            @21A\n         SRL   R1,4                                                @21A\n         STC   R1,TEMP1                                            @21A\n         CHI   R1,10                                               @21A\n         JH    RILFCC2                                             @21A\n         OI    TEMP1,X'F0'                                         @21A\n         MVC   0(1,R15),TEMP1          COPY COND CODE              @21A\n         MVI   1(R15),C','                                         @21A\n         AHI   R15,2                   NEXT POS                    @21A\n         LA    R2,2                                                @21A\n         J     RILCONT                                             @21A\nRILFCC2  MVI   0(R15),C'1'                                         @21A\n         AHI   R1,-10                                              @21A\n         STC   R1,TEMP1                                            @21A\n         OI    TEMP1,X'F0'                                         @21A\n         MVC   1(1,R15),TEMP1                                      @21A\n         MVI   2(R15),C','                                         @21A\n         AHI   R15,3                   NEXT POS                    @21A\n         LA    R2,3                    ASSUME 3 BYTES              @21A\n         J     RILCONT                 YES                         @21A\nRILNOP   MVC   MNEMONIC,SJLNOP         SET MNEMONIC TO JLNOP       @21A\n         J     RILCONT                 YES                         @21A\nRILSBR   MVC   COMMENT(5),SBRANCH      COPY 'JUMP '                @12A\nRILCONT  LR    R11,R7                  GET CURRENT OFFSET          @12A\n         S     R11,TXTSTRT             MINUS PROGRAM START         @12A\n         AH    R11,TEXT+2              ADD DDDD                    @12A\n         AH    R11,TEXT+2              R11 = @CUR + 2*DDDD         @12A\n         STCM  R11,7,0(R15)                                        @12A\n         LR    R12,R15                 @ OFFSET                    @12A\n         JAS   R9,HEXPRT3              GO CONVERT                  @12A\n         MVI   0(R15),C'A'             ADDRESS CONSTANT            @12A\n         MVC   1(6,R15),PRTABL         REST OF NAME                @12A\n         J     RIEXIT\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT S-TYPE   *\n* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *\n* STORAGE OPERAND.                                               *\n*                                                                *\n******************************************************************\nSOPND    EQU   *                       *** S FORMAT INSTRUCTIONS ***\n         CLI   0(R7),X'80'             IS IT SSM                  @14A\n         JE    SOPSSM                  YES, CHECK FOR VALID SSM   @14A\n         CLI   1(R7),0                 BYTE 2 OF INSTR IS ZERO\n         JE    SOPND50                 YES\n         CLI   0(R7),X'82'             NO, IS IT LPSW\n         JE    NOTINST                 YES, NOT INSTR\n         CLI   0(R7),X'93'             NO, IS IT TS\n         JE    NOTINST                 YES, NOT INSTR\n         LARL  R15,SOPTABLE                                       @27A\nSOPND10  CLI   0(R15),X'FF'            END OF TABLE               @27A\n         JE    SOPND50                 BRANCH IF END OF TABLE     @27A\n         CLC   0(4,R15),0(R7)          INSTRUCTION FOUND ?        @27A\n         JE    SOPND30                 BRANCH IF YES              @27A\n         AHI   R15,36                  BUMP TO NEXT TABLE ENTRY   @27A\n         J     SOPND10                 LOOP                       @27A\nSOPND30  MVC   OPNDS(7),4(R15)         COPY OPERAND               @27A\n         MVC   COMMENT(25),11(R15)     COPY COMMENT               @27A\n         J     INSTOUT                 WRITE INSTRUCTION          @27A\nSOPTABLE DS    0H\n   DC    XL4'B20B0000',CL7' ',CL25'Insert PSW key from R2'   IPK  @27A\n   DC    XL4'B2190000',CL7'0',CL25'Set ASC mode to primary'       @27A\n   DC    XL4'B2190100',CL7'256',CL25'Set ASC mode to secondary'   @27A\n   DC    XL4'B2190200',CL7'512',CL25'Set ASC mode to AR mode'     @27A\n   DC    XL4'B2190300',CL7'768',CL25'Set ASC mode to home'        @27A\n   DC    XL4'B2760000',CL7'   ',CL25'Cancel Subchannel'           @27A\n   DC    XL4'B2F80000',CL7'   ',CL25'Transaction end'             @27A\n   DC    XL2'FFFF'\nSOPSSM   CLC   1(3,R7),XZROS           ALL ARE HEXI ZEROs         @16A\n         JE    CONST                   YES, IT IS 80000000        @16A\n         CLI   1(R7),X'00'                                        @14A\n         JNE   CONST                   BRANCH NOT A VALID SSM INST@14A\nSOPND50  SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD\n         JAS   R9,BDADR                CONVERT BDDD ADDRESS\n         EX    R10,SOPMVC              MVC   OPNDS(1),OPNDWK\n         CLC   IPC,TEXT                PROGRAM CALL ??            @12A\n         JNE   INSTOUT                 BRANCH IF NO               @12A\n*********\n* Program call handling routine\n*********\n         MVC   COMMENT(L'S10),S10      SET COMMENT PROGRAM CALL   @12A\n         LR    R11,R7                                             @14A\n         AHI   R11,-4                  BACK 4 BYTES               @14A\n         CLI   0(R11),X'58'            LOAD INSTRUCTION ??        @14A\n         JE    SOPLSFT                 BRANCH IF LOAD OP          @14A\n         AHI   R11,-2                  BACK 2 BYTES               @14A\n         CLI   0(R11),X'58'            LOAD INSTRUCTION ??        @14A\n         JE    SOPLSFT                 BRANCH IF NO               @14A\n         AHI   R11,-2                  BACK 2 BYTES               @14A\n         CLI   0(R11),X'58'            LOAD INSTRUCTION ??        @14A\n         JNE   INSTOUT                 BRANCH IF NO               @14A\nSOPLSFT  LH    R11,2(R11)              PICK UP                    @14A\n         NILH  R11,X'0000'             CLEAR                      @14A\n         NILL  R11,X'0FFF'             MASK OFF BASE REGISTER     @14A\n*        LRL   R12,SFTAD               GET ADDRESS OF SFT TABLE   @14A\n         L     R12,SFTAD               GET ADDRESS OF SFT TABLE   @14A\nSOPSFTL  CLI   0(R12),X'FF'            END OF TABLE ??            @14A\n         JE    INSTOUT                 YES THEN EXIT              @14A\n         CH    R11,0(R12)              CHECK SFT OFFSET ADR       @14A\n         JE    SOPSFT                  BRANCH IF FIND             @14A\n         AHI   R12,SFTLEN              POINT TO NEXT ENTRY        @14A\n         J     SOPSFTL                 GET NEXT SFT ENTRY         @14A\nSOPSFT   MVC   COMMENT+L'S10+1(16),2(R12)                         @14A\n         J     INSTOUT                                            @14A\n*\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SIY-TYPE *\n* AND SIOPND INSTRUCTIONS. THE BDYADR ROUTINE IS CALLED TO       *\n* FORMAT THE STORAGE OPERAND.                                    *\n*                                                                *\n* R10 R11 - WORK REGISTER                                        *\n* R15     - CURRENT POINTER OF OPNDS                             *\n* SEARCH BIT MASK TABLE                                          *\n*                                                                *\n******************************************************************\n*\nSIYOPND  DS    0H                                                 @21A\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         JAS   R9,BDYADR               CONVERT SIY ADDRESS        @28A\n         J     SICOPY                                             @28A\nSIOPND   DS    0H                      *** SI FORMAT INSTRUCTIONS ***\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         JAS   R9,BDADR                CONVERT BDDD ADDRESS\nSICOPY   EX    R10,SOPMVC              MVC   OPNDS(1),OPNDWK  (BDDD)\n         LA    R15,OPNDS(R10)\n         CLI   0(R15),C' '\n         JE    SI2OPND\n         LA    R15,1(R15)\nSI2OPND  MVI   0(R15),C','             DELIMITER\n         TRT   TEXT+1(1),CHARTRAN      TEST IF CHARACTER\n         JNZ   HEXIMM                  NO, HEX\n         CLI   TEXT,X'95'              IS IT CLI OP CODE\n         JE    CHIMM                   YES\n         CLI   TEXT,X'92'              IS IT MVI OP CODE\n         JNE   HEXIMM                  NO\nCHIMM    MVC   1(2,R15),SCAPO          DELIMITER '\n         MVC   3(1,R15),TEXT+1         CHARACTER TO OPERAND\n         MVI   4(R15),C''''            ENDING QUOTE\n         CLI   TEXT+1,X'7D'            IS IT QUOTE ?               @12A\n         JNE   CHIMMEX                 BRANCH IF NOT QUOTE         @12A\n         MVI   5(R15),C''''            MOVE ADDITIONAL QUOTE       @12A\nCHIMMEX  J     CHKBMP                                              @24C\nHEXIMM   MVC   1(2,R15),SXAPO          DELIMITER FOR X'\n         LA    R12,TEXT+1              @ HEX BYTE\n         JAS   R9,HEXPRT1              CONVERT\n         MVC   3(2,R15),PRTABL         PRINTABLE HEX TO OPERAND\n         MVI   5(R15),C''''            FINAL QUOTE\n         CLI   TEXT,X'AF'              IS IT MC OP CODE ??         @20A\n         JNE   NOTMC                   BRANCH IF NOT MC OP CODE    @20A\n         MVC   COMMENT(L'S34),S34      TRACE SYSTEM ROUTINE        @20A\n         J     INSTOUT                 WRITE RECORD                @20A\nNOTMC    CLC   TEXT(2),XACFC           DISABLE I/O & EXT INTR ?    @20A\n         JE    SISTNSM                 BRANCH IF YES               @20A\n         CLC   TEXT(2),XAD03           ENABLE I/O & EXT INTR ?     @20A\n         JE    SISTOSM                 BRANCH IF YES               @20A\nCHKBMP   CLI   ICLASS,BMP              BIT MASK INSTUCTION ?       @18A\n         JNE   INSTOUT                 BRANCH IF NOT               @18A\n         ST    R15,BD15                SAVE R15                    @29A\n         L     R15,BITMAP              LOAD BITMAP                 @29A\n         BALR  R14,R15                 SEARCH BIT MASK TABLE       @29A\n         J     INSTOUT                                             @20A\nSISTNSM  MVC   COMMENT(L'SDISIE),SDISIE   DISABLE I/O & EXT INTR   @20A\n         J     INSTOUT                                             @20A\nSISTOSM  MVC   COMMENT(L'SENAIE),SENAIE   ENABLE I/O * EXT INTR    @20A\n         J     INSTOUT                                             @20A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SIL      *\n* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *\n* STORAGE OPERAND.                                               *\n* R10 R11 - WORK REGISTER                                        *\n* R15     - CURRENT POINTER OF OPNDS                             *\n*                                                                *\n******************************************************************\nSILOPND  DS    0H                                                 @21A\n         SR    R11,R11                 CLEAR WORK                 @21A\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS           @21A\n         JAS   R9,BDADR                CONVERT BDDD ADDRESS       @21A\n         LA    R15,OPNDS               TO NEXT POS                @21A\n         CLC   ITBEGINC,0(R7)          OPCODE E561 ?              @21A\n         JNE   SIL2000                                            @21A\n         MVI   MNEMONIC+6,C'C'                                    @21A\n         LA    R15,OPNDS+1             TO NEXT POS                @21A\n*        MVC   COMMENT-5(L'STBEGINC),STBEGINC                     @25A\n         MVC   COMMENT(L'STBEGINC),STBEGINC                       @25A\nSIL2000  EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK      @21A\n         LA    R15,2(R15,R10)                                     @21A\n         MVI   0(R15),C','                                        @21A\n         AHI   R15,1                                              @21A\n         MVC   0(2,R15),SXAPO          DELIMITER FOR X'           @21A\n         LA    R12,TEXT+4              @ HEX BYTE                 @21A\n         J     RIHEX2                                             @21A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RIE-TYPE *\n* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *\n* STORAGE OPERAND.                                               *\n*                                                                *\n******************************************************************\nRIEOPND  DS    0H                      *** FORMAT RIE INSTRUCTION ***\n         LA    R15,OPNDS                                           @28A\n         SR    R1,R1                                               @28A\n         IC    R1,TEXT+1               LOAD R1R2                   @28A\n         SRL   R1,4                    SHIFT OUT R2                @28A\n         CVD   R1,DBLWD                CONVERT                     @28A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @28A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @28A\n         MVI   0(R15),C'R'             Beginning operand 1         @28A\n         CHI   R1,10                   R1 < 10                     @28A\n         JL    RIER11                  YES                         @28A\n         MVC   1(2,R15),DBLWD          Move REG 10-15              @28A\n         AHI   R15,3                   To next position            @28A\n         J     RIER12                  continue                    @28A\nRIER11   MVC   1(1,R15),DBLWD+1        Move REG 0-9                @28A\n         AHI   R15,2                   To next position            @28A\nRIER12   MVC   0(2,R15),SCOMMAR        DELIMITERS                  @28A\n         AHI   R15,1                   To next position            @28A\n         SR    R1,R1                                               @28A\n         IC    R1,TEXT+1               LOAD R1R2                   @28A\n         NILL  R1,X'000F'              CLEAR R1                    @28A\n         CVD   R1,DBLWD                CONVERT                     @28A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @28A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @28A\n         CHI   R1,10                   R2 < 10                     @28A\n         JL    RIER21                  YES                         @28A\n         MVC   1(2,R15),DBLWD          Move REG 10-15              @28A\n         AHI   R15,3                   To next position            @28A\n         J     RIER22                  continue                    @28A\nRIER21   MVC   1(1,R15),DBLWD+1        Move REG 0-9                @28A\n         AHI   R15,2                   To next position            @28A\nRIER22   MVI   0(R15),C','             Delimiters                  @28A\n         AHI   R15,1                   To next position            @28A\n         LR    R11,R7                  GET CURRENT OFFSET          @28A\n         S     R11,TXTSTRT             MINUS PROGRAM START         @28A\n         AH    R11,TEXT+2              ADD DDDD                    @28A\n         AH    R11,TEXT+2              R11 = @CUR + 2*DDDD         @28A\n         STCM  R11,7,0(R15)                                        @28A\n         LR    R12,R15                 @ OFFSET                    @28A\n         JAS   R9,HEXPRT3              GO CONVERT                  @28A\n         MVI   0(R15),C'A'             ADDRESS CONSTANT            @28A\n         MVC   1(6,R15),PRTABL         Get rest of name            @28A\n         SR    R0,R0                   Clear R0                    @28A\n         CH    R0,TEXT+2               DISPL < 0                   @28A\n         JNL   INSTOUT                 Jump if backward reference  @28A\n         JAS   R14,PRTREGS             Print register usage        @28A\n         J     INSTOUT                                             @28A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RS-TYPE  *\n* INSTRUCTIONS. THE BDADR ROUTINE IS CALLED TO FORMAT THE        *\n* STORAGE OPERAND.                                               *\n*                                                                *\n******************************************************************\nRSIOPND  DS    0H                      *** RSI UNDER CONSTRUCTION ***\nRSEOPND  DS    0H                      *** RSE UNDER CONSTRUCTION ***\nRSYOPND  DS    0H                                                  @12A\nRSOPND   DS    0H                      *** RS FORMAT INSTRUCTIONS ***\n         CLI   TEXT,X'AE'              IS IT SIGP OP ??            @15A\n         JE    RSSIGP                  YES                         @15A\n         CLI   TEXT,X'9B'              IS IT STAM OP ??            @13A\n         JE    RSSTAM                  YES                         @13A\n         CLC   INAME(3),S_STM          Store multiple instr ?      @23A\n         JE    RSSTM                   YES\n         CLC   INAME(2),S_LM           Load multiple instr ?       @23A\n         JNE   RSCLR1                  NO\n         MVC   COMMENT(L'S11),S11      RESTORE REGS\n         J     RSCLR1                  CONTINUE\nRSSIGP   MVC   COMMENT(L'S37),S37      SIGNAL PROCESSOR            @15A\n         J     RSCLR1                                              @15A\nRSSTAM   MVC   COMMENT(L'S12A),S12A    SAVE ACCESS REGISTERS       @13A\n         J     RSCLR1                                              @13A\nRSSTM    MVC   COMMENT(L'S12),S12      SAVE REGS\nRSCLR1   SR    R1,R1                   CLEAR WORK\n         IC    R1,TEXT+1               PICK UP R1R3\n         SRL   R1,4                    SHIFT OUT R3\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         LA    R15,OPNDS                                           @13A\n         CLI   ICLASS,AR2              AR2 INSTRUCTION ??          @21C\n         JNE   RSCR1                   BRANCH IF NOT EQUAL         @13A\n         MVI   OPNDS,C'A'              Set Access registers        @13A\n         AHI   R15,1                                               @13A\nRSCR1    TM    ICLASS,CR               Control Register OP ??      @13A\n         JNO   RSAR1                   Branch if not CR OP         @13A\n         MVI   OPNDS,C'C'              Set Control Register        @13A\n         AHI   R15,1                                               @13A\nRSAR1    MVI   0(R15),C'R'             Beginning operand 1\n         CHI   R1,10                   Reg number < 10\n         JL    RSR11                   YES\n         MVC   1(2,R15),DBLWD          Move REG 10-15\n         AHI   R15,3                   To next position\n         J     RSCMA                   continue\nRSR11    MVC   1(1,R15),DBLWD+1        Move REG 0-9\n         AHI   R15,2                   TO next position\nRSCMA    CLI   0(R7),X'88'             IS IT SHIFT INSTR\n         JL    RSCMA1                  NO\n         CLI   0(R7),X'8F'             IS IT SHIFT INSTR\n         JH    RSCMA1                  NO\n         TM    1(R7),X'0F'             SHIFT, IS R3 POS = 0\n         JZ    RSBDD                   YES, GOOD SHIFT\n         J     NOTINST                 NO, NOT INSTR               @12C\nRSCMA1   MVI   0(R15),C','\n         AHI   R15,1                   SET ACCESS REGISTERS        @13A\n         CLI   ICLASS,AR2              AR2 INSTRUCTION ??          @21A\n         JNE   RSCR2                   BRANCH IF NOT AR INSTR      @13A\n         MVI   0(R15),C'A'             SET ACCESS REGISTERS        @13A\n         AHI   R15,1                                               @13A\nRSCR2    TM    ICLASS,CR               CONTROL REGISTER OP ??      @13A\n         JNO   RSAR2                   BRANCH IF NOT EQUAL         @13A\n         MVI   0(R15),C'C'             SET CONTROL REGISTERS       @13A\n         AHI   R15,1                                               @13A\nRSAR2    MVI   0(R15),C'R'                                         @13A\n         TM    IEDT,T8                 CLM, STCM, OR ICM           @12A\n         JNO   RSPK2                   BRANCH IF NOT ONE           @12A\n         AHI   R15,-1               CLM, STCM, ICM HAVE MASK IN R3 P\nRSPK2    PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,DBLWD                GET R3R1\n         SRL   R1,4                    SHIFT OUT R1\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R1,10                   REG NBR < 10\n         JL    RSR31                   YES, 0-9\n         MVC   1(2,R15),DBLWD          MOVE REG 10-15\n         AHI   R15,3                   TO NEXT POS\n         J     RSBDD                   CONTINUE\nRSR31    MVC   1(1,R15),DBLWD+1        MOVE REG 0-9\n         AHI   R15,2                   TO NEXT POS\nRSBDD    MVI   0(R15),C','             DELIMITER\n         SR    R11,R11                 CLEAR WORK\n         CLI   ITYPE,RSA               RSA INSTRUCTION             @30A\n         JE    RS_BDD                                              @30A\n         CLI   ITYPE,RSI               RSI INSTRUCTION             @14A\n         JNE   RS_BDD                                              @14A\n         LR    R11,R7                  GET CURRENT OFFSET          @12A\n         S     R11,TXTSTRT             R11 = @CUR                  @12A\n         AH    R11,TEXT+2              R11 = @CUR + DDDD           @12A\n         AH    R11,TEXT+2              R11 = @CUR + 2*DDDD         @12A\n         AHI   R15,1                                               @12A\n         STCM  R11,7,0(R15)            SAVE R11 FOR HEX FORMAT     @12A\n         LR    R12,R15                 @ OFFSET                    @12A\n         JAS   R9,HEXPRT3              GO CONVERT                  @12A\n         MVI   0(R15),C'A'             ADDRESS CONSTANT            @12A\n         MVC   1(6,R15),PRTABL         REST OF NAME                @12A\n         J     INSTOUT                                             @12A\nRS_BDD   CLI   TEXT,X'83'              DIAG INSTR ??               @17A\n         JNE   RSCBDD1                                             @17A\n         MVC   1(2,R15),SXAPO          DELIMITER FOR X'            @17A\n         LA    R12,TEXT+2              @ HEX BYTE                  @17A\n         JAS   R9,HEXPRT2              CONVERT                     @17A\n         MVC   3(4,R15),PRTABL         PRINTABLE HEX TO OPERAND    @17A\n         MVI   7(R15),C''''            FINAL QUOTE                 @17A\n         J     INSTOUT                                             @17A\nRSCBDD1  ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         CLI   ITYPE,RSY               RSY INSTRUCTION ?           @28A\n         JNE   RSCBDD3                 BRANCH IF NOT RSY INSTR     @28A\n         JAS   R9,BDYADR               CONVERT RSY ADDRESS         @28A\n         J     RSCBDD5                                             @28A\nRSCBDD3  JAS   R9,BDADR                CONVERT BDDD ADDRESS\nRSCBDD5  EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RRFA     *\n* TYPE INSTRUCTION.     OPCODE  R1,R2,R3,M4                      *\n*                                                                *\n******************************************************************\nRRFAOPND DS    0H                      *** RRFA FORMAT INSTRUCTIONS ***\n         LA    R15,OPNDS                                           @30A\n         CLIY  -1(R15),C' '                                        @30A\n         JE    RRFAR10                                             @30A\n         AHI   R15,1                                               @30A\nRRFAR10  SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               LOAD R1R2                   @30A\n         SRL   R1,4                    SHIFT OUT R2                @30A\n         CVD   R1,DBLWD                CONVERT                     @30A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @30A\n         MVI   0(R15),C'R'             beginning operand 1         @30A\n         CHI   R1,10                   R1 < 10                     @30A\n         JL    RRFAR11                 branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move R1  10-15              @30A\n         AHI   R15,3                   to next position            @30A\n         J     RRFAR12                 continue                    @30A\nRRFAR11  MVC   1(1,R15),DBLWD+1        move R2  0-9                @30A\n         AHI   R15,2                   to next position            @30A\nRRFAR12  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         NILL  R1,X'000F'              clear R1                    @30A\n         CVD   R1,DBLWD                convert R2 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R2 < 10                     @30A\n         JL    RRFAR21                 branch if yes               @30A\n         MVC   2(2,R15),DBLWD          move R2  10-15              @30A\n         AHI   R15,4                   to next position            @30A\n         J     RRFAR22                 continue                    @30A\nRRFAR21  MVC   2(1,R15),DBLWD+1        move R2  0-9                @30A\n         AHI   R15,3                   to next position            @30A\nRRFAR22  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+2               Load R3M4                   @30A\n         SRL   R1,4                    Shift right 4 bits          @30A\n         CVD   R1,DBLWD                convert R3 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R3   < 10                   @30A\n         JL    RRFA31                  branch if yes               @30A\n         MVC   2(2,R15),DBLWD          move R3  10-15              @30A\n         AHI   R15,4                   to next position            @30A\n         J     RRFA32                                              @30A\nRRFA31   MVC   2(1,R15),DBLWD+1        move R3  0-9                @30A\n         AHI   R15,3                   to next position            @30A\nRRFA32   SR    R1,R1                                               @30A\n* Format M4\n         IC    R1,TEXT+2               load R3M4                   @30A\n         NILL  R1,X'000F'              clear R1                    @30A\n         JZ    INSTOUT                 branch if M4 is zero        @30A\n         MVI   0(R15),C','                                         @30A\n         CVD   R1,DBLWD                convert M4 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   M4 < 10                     @30A\n         JL    RRFAMASK                branch if yes               @30A\n         MVC   1(2,R15),DBLWD          Move M4  10-15              @30A\n         J     INSTOUT                 write instruction record    @30A\nRRFAMASK MVC   1(1,R15),DBLWD+1        Move M4  0-9                @30A\n         J     INSTOUT                 write instruction record    @30A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RRFA     *\n* TYPE INSTRUCTION.     OPCODE  R1,R3,R2,M4                      *\n*                                                                *\n******************************************************************\nRRFBOPND DS    0H                      *** RRFA FORMAT INSTRUCTIONS ***\n         LA    R15,OPNDS                                           @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               LOAD R1R2                   @30A\n         SRL   R1,4                    SHIFT OUT R2                @30A\n         CVD   R1,DBLWD                CONVERT                     @30A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @30A\n         MVI   0(R15),C'R'             Beginning operand 1         @30A\n         CHI   R1,10                   R1 < 10                     @30A\n         JL    RRFBR11                 YES                         @30A\n         MVC   1(2,R15),DBLWD          Move R1  10-15              @30A\n         AHI   R15,3                   To next position            @30A\n         J     RRFBR31                 continue                    @30A\nRRFBR11  MVC   1(1,R15),DBLWD+1        Move R1  0-9                @30A\n         AHI   R15,2                   To next position            @30A\nRRFBR31  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+2               load R3M4                   @30A\n         SRL   R1,4                    shift out M4                @30A\n         CVD   R1,DBLWD                convert                     @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R3 < 10                     @30A\n         JL    RRFBR32                 branch if yes               @30A\n         MVC   2(2,R15),DBLWD          move R3 10-15               @30A\n         AHI   R15,4                   to next position            @30A\n         J     RRFBR21                 continue                    @30A\nRRFBR32  MVC   2(1,R15),DBLWD+1        move REG 0-9                @30A\n         AHI   R15,3                   to next position            @30A\nRRFBR21  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         NILL  R1,X'000F'              clear R1                    @30A\n         CVD   R1,DBLWD                convert R2 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R2 < 10                     @30A\n         JL    RRFBR22                 branch if yes               @30A\n         MVC   2(2,R15),DBLWD          move R2 10-15               @30A\n         AHI   R15,4                   to next position            @30A\n         J     RRFBMSK1                branch if yes               @30A\nRRFBR22  MVC   2(1,R15),DBLWD+1        move REG 0-9                @30A\n         AHI   R15,3                   to next position            @30A\nRRFBMSK1 MVI   0(R15),C','             copy ','                    @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+2               load R3M4                   @30A\n         SRL   R1,4                    shift out R3                @30A\n         CVD   R1,DBLWD                convert M4                  @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack M4                   @30A\n         CHI   R1,10                   m4 < 10                     @30A\n         JL    RRFBMSK2                branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move m4 10-15               @30A\n         J     INSTOUT                 write instruction record    @30A\nRRFBMSK2 MVC   1(1,R15),DBLWD+1        Move m4 0-9                 @30A\n         J     INSTOUT                 write instruction record    @30A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RRFC     *\n* TYPE INSTRUCTION.          OPCODE R1,R2,M3                     *\n*                                                                *\n******************************************************************\nRRFCOPND DS    0H                      *** RRFC FORMAT INSTRUCTIONS ***\n         LA    R15,OPNDS                                           @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         SRL   R1,4                    shift out R2                @30A\n         CVD   R1,DBLWD                convert                     @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         MVI   0(R15),C'R'             beginning operand 1         @30A\n         CHI   R1,10                   R1 < 10                     @30A\n         JL    RRFCR11                 branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move R1  10-15              @30A\n         AHI   R15,3                   to next position            @30A\n         J     RRFCR12                 continue                    @30A\nRRFCR11  MVC   1(1,R15),DBLWD+1        move R1  0-9                @30A\n         AHI   R15,2                   to next position            @30A\nRRFCR12  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         NILL  R1,X'000F'              clear R1                    @30A\n         CVD   R1,DBLWD                convert                     @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R2 < 10                     @30A\n         JL    RRFCR21                 YES                         @30A\n         MVC   2(2,R15),DBLWD          Move REG 10-15              @30A\n         AHI   R15,4                   To next position            @30A\n         J     RRFCR22                 continue                    @30A\nRRFCR21  MVC   2(1,R15),DBLWD+1        Move REG 0-9                @30A\n         AHI   R15,3                   To next position            @30A\nRRFCR22  MVI   0(R15),C','             Delimiters                  @30A\n         SR    R1,R1                   clear R1                    @30A\n         IC    R1,TEXT+2               Load mask                   @30A\n         CLI   ITYPE,RRFC              RRF type C instruction ?    @30A\n         JE    RRFCMSK1                branch if yes               @30A\n         NILL  R1,X'000F'              R1 = M4                     @30A\n         J     RRFCMSK2                                            @30A\nRRFCMSK1 SRL   R1,4                    R1 = M3                     @30A\nRRFCMSK2 CVD   R1,DBLWD                convert mask to decimal     @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   mask < 10                   @30A\n         JL    RRFCMSK3                branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move MASK 11-15             @30A\n         J     INSTOUT                 write instruction record    @30A\nRRFCMSK3 MVC   1(1,R15),DBLWD+1        move MASK 0-9               @30A\n         J     INSTOUT                 write instruction record    @30A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT RRFE     *\n* TYPE INSTRUCTION.          OPCODE R1,M3,R2,M4                  *\n*                                                                *\n******************************************************************\nRRFEOPND DS    0H                      *** RRF FORMAT INSTRUCTIONS ***\n         LA    R15,OPNDS                                           @30A\n         CLIY  -1(R15),C' '                                        @30A\n         JE    RRFER10                                             @30A\n         AHI   R15,1                                               @30A\nRRFER10  MVI   0(R15),C'R'             Move                        @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         SRL   R1,4                    shift out R2                @30A\n         CVD   R1,DBLWD                convert R1 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   R1 < 10                     @30A\n         JL    RRFER11                 branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move R1 11-15               @30A\n         AHI   R15,3                   to next position            @30A\n         J     RRFER12                 continue                    @30A\nRRFER11  MVC   1(1,R15),DBLWD+1        move R1 0-9                 @30A\n         AHI   R15,2                   to next position            @30A\nRRFER12  MVI   0(R15),C','             copy comman                 @30A\n         SR    R1,R1                   clear R1                    @30A\n*  Format M3 @30A\n         IC    R1,TEXT+2               load M3M4                   @30A\n         SRL   R1,4                    shift out M4                @30A\n         CVD   R1,DBLWD                convert M3 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack M3                   @30A\n         CHI   R1,10                   M3 < 10                     @30A\n         JL    RRFEM31                 branch if yes               @30A\n         MVC   1(2,R15),DBLWD          Move mask 10-15             @30A\n         AHI   R15,3                   To next position            @30A\n         J     RRFEM32                 branch if yes               @30A\nRRFEM31  MVC   1(1,R15),DBLWD+1        move mask 0-9               @30A\n         AHI   R15,2                   To next position            @30A\nRRFEM32  MVC   0(2,R15),SCOMMAR        copy ',R'                   @30A\n         SR    R1,R1                                               @30A\n         IC    R1,TEXT+3               load R1R2                   @30A\n         NILL  R1,X'000F'              clear R1                    @30A\n         CVD   R1,DBLWD                convert R2 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack R2                   @30A\n         CHI   R1,10                   R2 < 10                     @30A\n         JL    RRFER21                 branch if yes               @30A\n         MVC   2(2,R15),DBLWD          move mask 10-15             @30A\n         AHI   R15,4                   to next position            @30A\n         J     RRFER22                 branch if yes               @30A\nRRFER21  MVC   2(1,R15),DBLWD+1        move R2  0-9                @30A\n         AHI   R15,3                   to next position            @30A\nRRFER22  SR    R1,R1                                               @30A\n*  Format M4\n         IC    R1,TEXT+2               load M3M4                   @30A\n         NILL  R1,X'000F'              clear M3                    @30A\n         JZ    INSTOUT                                             @30A\n         MVI   0(R15),C','             copy comma                  @30A\n         CVD   R1,DBLWD                convert m4 to decimal       @30A\n         OI    DBLWD+7,X'0F'           clear sign                  @30A\n         UNPK  DBLWD(2),DBLWD+6(2)     unpack                      @30A\n         CHI   R1,10                   M4 < 10                     @30A\n         JL    RRFEM4                  branch if yes               @30A\n         MVC   1(2,R15),DBLWD          move M4 10-15               @30A\n         J     INSTOUT                 Write instruction record    @30A\nRRFEM4   MVC   1(1,R15),DBLWD+1        Move M4 0-9                 @30A\n         J     INSTOUT                 Write instruction record    @30A\n******************************************************************\n*       D1(L1,B1),D2(B2)                                         *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS-TYPE  *\n* INSTRUCTIONS OF THE SINGLE LENGTH VARIETY. THE BDLADR ROUTINE  *\n* IS CALLED TO FORMAT THE 1ST STRG OPND, AND BDADR FOR THE 2ND.  *\n*                                                                *\n******************************************************************\nSS1OPND  DS    0H                      *** SS FORMAT INSTRUCTIONS ***\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET LENGTH CODE\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         JAS   R9,BDLADR               CONVERT 1ST BDDD ADDRESS\n         EX    R10,SOPMVC              MVC   OPNDS(1),OPNDWK\n         LA    R15,OPNDS+1(R10)        TO NEXT POS\n         MVI   0(R15),C','             DELIMITER\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDRESS\n         JAS   R9,BDADR                CONVERT 2ND OPERAND ADDRESS\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK\n         CLI   COMMENT,C' '            NO COMMENT ??               @14A\n         JNE   INSTOUT                 BRANCH IF IT HAS COMMENT    @14A\n         CLI   TEXT,X'D2'              MVC INSTRUCTION ??          @12A\n         JNE   INSTOUT                 BRANCH IF NOT MVC OP CODE   @12A\n         MVC   COMMENT(L'S28),S28      COPY DATA                   @12A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n******************************************************************\n*                                                                *\n*       D1(L1,B1),D2(L2,B2)                                      *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS-TYPE  *\n* INSTRUCTIONS OF THE DOUBLE LENGTH VARIETY. THE BDLADR ROUTINE  *\n* IS CALLED TO FORMAT THE STORAGE OPERANDS.                      *\n*                                                                *\n******************************************************************\nSS2OPND  EQU   *                       *** SS FORMAT INSTRUCTIONS - 2 L\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET L1L2\n         SRL   R10,4                   SHIFT OUT L2\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD ADDRESS\n         JAS   R9,BDLADR               CONVERT ADDRESS\n         EX    R10,SOPMVC              MVC   OPNDS(1),OPNDWK\n         LA    R15,OPNDS+1(R10)        TO NEXT POS\n         MVI   0(R15),C','             DELIMITER\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDR\n         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,DBLWD               PICK UP L2L1\n         SRL   R10,4                   SHIFT OUT L1\n         CLI   TEXT,X'F0'              SRP OP-CODE\n         JE    SRPOP2                  YES\n         JAS   R9,BDLADR               CONVERT ADDRESS\n         EX    R10,BDXMVC              MOVE 2ND OPERAND\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\nSRPOP2   JAS   R9,BDADR                GO BUILD OPERAND 2\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK\n         LA    R15,2(R10,R15)          TO NEXT OPERAND POS\n         PACK  DBLWD(1),TEXT+1(1)      FLIP LENGTH BYTE\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,DBLWD               PICK UP I3L1\n         SRL   R10,4                   SHIFT OUT L1\n         CVD   R10,DBLWD               CONVERT I3\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         MVI   0(R15),C','             OPERAND SEPARATOR\n         UNPK  1(1,R15),DBLWD+7(1)     UNPACK I3 TO OPERAND\n         CHI   R2,10                   I3 < 10\n         JL    INSTOUT                 YES\n         UNPK  1(2,R15),DBLWD+6(2)     NO, UNPACK MORE\n         J     INSTOUT                 CONTINUE\n*\n*\n********************************************************************\n* NEW ROUTINE TO HANDLE XMS SS3 INSTRUCTION                    @04A*\n*                D1(R1,B1),D2(B2),R3                               *\n*                                                                  *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS3-TYPE   *\n* INSTRUCTIONS OF THE REGISTER LENGTH VARIETY. THE BDADR ROUTINE   *\n* IS CALLED TO FORMAT THE SECOND STORAGE OPERAND. SUBROUTINE       *\n* BDXADR IS CALLED TO FORMAT THE FIRST STORAGE OPERAND.            *\n* D1(R1,B1),D2(B2),R3                                              *\n********************************************************************\n*\nSS3OPND  EQU   *                       *** SS3 FORMAT INSTRUCTIONS ***\n         MVC   COMMENT(9),S13          XMS INSTR\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              PICK UP R1R3\n         SRL   R10,4                   SHIFT RIGHT 4 BIT TO REMOVE R3\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET BDDD\n         JAS   R9,BDXADR               CONVERT RX ADDRESS\n         LA    R15,OPNDS-1             TO NEXT POS\n         EX    R10,BDXMVC              MOVE RX OPERAND\n         LA    R15,OPNDS+1(R10)        TO NEXT POS\n         MVI   0(R15),C','             DELIMITER\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDRESS\n         JAS   R9,BDADR                CONVERT 2ND BDDD ADDRESS\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK\n         LA    R15,2(R15,R10)          TO NEXT POSITION\n         MVC   0(2,R15),SCOMMAR        DELIMITER3   ,R\n         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,DBLWD                GET R2R3\n         SRL   R1,4                    SHIFT OUT R1\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R1,10                   R3 > 9\n         JL    RR31                    NO, 0-9\n         MVC   2(2,R15),DBLWD          YES, MOVE REG 10-15\n         J     INSTOUT                 WRITE INSTRUCTION RECORD\nRR31     MVC   2(1,R15),DBLWD+1        MOVE REG 0-9\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n********************************************************************\n* NEW ROUTINE TO HANDLE SS4 INSTRUCTION                        @04A*\n*                D1(B1),D2(L2,B2)                                  *\n*                                                                  *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS4-TYPE   *\n* INSTRUCTIONS OF THE REGISTER LENGTH VARIETY. THE BDADR ROUTINE   *\n* IS CALLED TO FORMAT THE SECOND STORAGE OPERAND. SUBROUTINE       *\n* BDXADR IS CALLED TO FORMAT THE FIRST STORAGE OPERAND.            *\n*                                                                  *\n********************************************************************\nSS4OPND  DS    0H                      *** SS4 FORMAT INSTRUCTIONS ***\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            GET 1ST BDDD ADDRESS\n         JAS   R9,BDADR                CONVERT 1ST BDD ADDRESS\n         EX    R10,SOPMVC              MVC   OPNDS(1),OPNDWK\n         LA    R15,OPNDS+1(R10)        TO NEXT POS\n         MVI   0(R15),C','             DELIMITER\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,TEXT+1              GET LENGTH CODE\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+4            GET SECOND BDDD ADDRESS\n         JAS   R9,BDLADR               CONVERT ADDRESS\n         EX    R10,BDXMVC              MOVE 2ND OPERAND\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n********************************************************************\n* NEW ROUTINE TO HANDLE SSE FORMAT INSTRUCTION                 @02A*\n*                                                                  *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS-TYPE    *\n* INSTRUCTIONS OF THE REGISTER LENGTH VARIETY. THE BDADR ROUTINE   *\n* IS CALLED TO FORMAT THE SECOND STORAGE OPERAND. SUBROUTINE       *\n* BDXADR IS CALLED TO FORMAT THE FIRST STORAGE OPERAND.            *\n*                                                                  *\n********************************************************************\nSSEOPND  EQU   *                       *** SSE FORMAT INSTRUCTIONS\n         CLC   ITPROT,TEXT             TPROT OP CODE ??            @15A\n         JNE   SSEOPND2                BRANCH IF NOT               @15A\n         MVC   COMMENT(L'S38),S38      INVALID ADDRESS ??          @15A\nSSEOPND2 SR    R11,R11                 CLEAR WORK                  @02A\n         CLC   S_PLO,MNEMONIC          PLO INSTRUCTION ??          @29A\n         JNE   SSEOPND3                BRANCH IF NOT               @29A\n*  PLO   R1,D2(B2),R3,D4(B4)                                       @29A\n         SR    R1,R1                   CLEAR WORK\n         IC    R1,TEXT+1               GET 2ND BYTE\n         SRL   R1,4                    SHIFT OUT R2\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         MVI   OPNDS,C'R'              BEGIN R1 OPERAND\n         CHI   R1,10                   REG NBR > 9\n         JL    SSEPLO1                 NO, 0-9\n         MVC   OPNDS+1(2),DBLWD        YES, 10-15\n         LA    R15,OPNDS+3              TO NEXT POS\n         J     SSEPLO2                 NO, 0-9\nSSEPLO1  MVC   OPNDS+1(1),DBLWD+1      MOVE REG NBR\n         LA    R15,OPNDS+2              TO NEXT POS\nSSEPLO2  SR    R11,R11                                             @29A\n         ICM   R11,3,TEXT+2            GET 1ST BDDD ADDRESS        @29A\n         JAS   R9,BDADR                CONVERT 1ST BDDD ADDRESS    @29A\n         MVI   0(R15),C','\n         J     SSEOPND4                NO, 0-9\nSSEOPND3 DS    0H                      CONTINUE\n         ICM   R11,3,TEXT+2            GET 1ST BDDD ADDRESS        @02A\n         JAS   R9,BDADR                CONVERT 1ST BDDD ADDRESS    @02A\n         LA    R15,OPNDS-1             TO FIRST OPERAND            @02A\nSSEOPND4 EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK       @02A\n         LA    R15,2(R10,R15)          TO NEXT POS                 @08A\n         MVI   0(R15),C','             DELIMITER                   @02A\n         SR    R11,R11                 CLEAR WORK                  @02A\n         CLC   S_PLO,MNEMONIC          PLO INSTRUCTION             @29A\n         JNE   SSEOPND5                                            @29A\n         MVI   1(R15),C'R'                                         @02A\n         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE\n         IC    R11,DBLWD               GET R2R1\n         SRL   R11,4                   SHIFT OUT R1\n         CVD   R11,DBLWD               CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R11,10                  R2 > 9\n         JL    SSEPLO3                 NO, 0-9\n         MVC   2(2,R15),DBLWD          YES, MOVE REG 10-15\n         LA    R15,4(,R15)\n         J     SSEPLO4                                             @29A\nSSEPLO3  MVC   2(1,R15),DBLWD+1        MOVE REG 0-9\n         LA    R15,3(,R15)\nSSEPLO4  MVI   0(R15),C','                                         @02A\nSSEOPND5 ICM   R11,3,TEXT+4            GET 2ND BDDD ADDRESS        @02A\n         JAS   R9,BDADR                CONVERT 2ND BDDD ADDRESS    @02A\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK       @02A\n         CLC   S_LASP,MNEMONIC         LASP INSTRUCTION ??         @22A\n         JNE   SSECOMT                 BRANCH IF NOT               @22A\n         MVC   COMMENT(L'S40),S40                                  @22A\n         J     INSTOUT                                             @22A\nSSECOMT  CLI   COMMENT,C' '            SSE INSTR                   @02A\n         JNE   INSTOUT                 WRITE INSTRUCTION RECORD    @15A\n         MVC   COMMENT(L'S14),S14      SSE INSTR                   @15A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n********************************************************************\n* NEW ROUTINE TO HANDLE SSF INSTRUCTION                        @21A*\n*                D1(B1),D2(B2),R3                                  *\n*                                                                  *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT SS3-TYPE   *\n* INSTRUCTIONS OF THE REGISTER LENGTH VARIETY. THE BDADR ROUTINE   *\n* IS CALLED TO FORMAT THE FIRST AND SECOND OPERAND.                *\n*                                                                  *\n********************************************************************\nSSFOPND  DS    0H                      *** SSF FORMAT INSTRUCTIONS @21A\n         SR    R10,R10                 CLEAR WORK                  @21A\n         IC    R10,TEXT+1              PICK UP X2R1                @21A\n         SRL   R10,4                   SHIFT OUT R1                @21A\n         SR    R11,R11                 CLEAR WORK                  @21A\n         ICM   R11,3,TEXT+2            GET 1ST BDDD                @21A\n         JAS   R9,BDADR                CONVERT 1ST BDDD ADDRESS    @21A\n         LA    R15,OPNDS-1             TO NEXT POS                 @21A\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK       @21A\n         LA    R15,OPNDS+1(R10)        TO NEXT POS                 @21A\n         MVI   0(R15),C','             DELIMITER                   @21A\n         SR    R11,R11                 CLEAR WORK                  @21A\n         ICM   R11,3,TEXT+4            GET 2ND BDDD ADDRESS        @21A\n         JAS   R9,BDADR                CONVERT 2ND BDDD ADDRESS    @21A\n         EX    R10,BDXMVC              MVC   1(1,R15),OPNDWK       @21A\n         LA    R15,2(R15,R10)          TO NEXT POSITION            @21A\n         MVC   0(2,R15),SCOMMAR        DELIMITER3   ,R             @21A\n         SR    R1,R1                   CLEAR WORK                  @21A\n         IC    R1,TEXT+1                                           @21A\n         SRL   R1,4                    SHIFT OUT R1                @21A\n         CVD   R1,DBLWD                CONVERT                     @21A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @21A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @21A\n         CHI   R1,10                   R3 > 9                      @21A\n         JL    SSF31                   NO, 0-9                     @21A\n         MVC   2(2,R15),DBLWD          YES, MOVE REG 10-15         @21A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @21A\nSSF31    MVC   2(1,R15),DBLWD+1        MOVE REG 0-9                @21A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @21A\n******************************************************************\n*                                                                *\n* THIS ROUTINE IS CALLED BY THE INSTR ROUTINE TO FORMAT COND-    *\n* ITIONAL BRANCH INSTRUCTIONS. AN ATTEMPT IS MADE TO USE THE     *\n* EXTENDED MNEMONICS WHERE POSSIBLE. FOR RR-TYPE AND RX-TYPE     *\n* INSTRUCTION USE CCTYPE TO SEARCH THE CONDITIONAL CODE TABLE    *\n* TO GET MNEMONIC NAMES.                                         *\n*                                                                *\n* CCTYPE IS SAVED BY THE LAST CONDITION-CODE-SETTING INSTRUCTION *\n******************************************************************\nBCOPND   DS    0H                * CONDITIONAL BRANCH INSTRUCTION  @21A\n         SR    R2,R2                                               @21A\n         LA    R15,OPNDS               NEXT POS                    @21A\n         MVC   TEMP1,TEXT+1            COPY COND CODE              @21A\n         NI    TEMP1,X'F0'             CLEAR REGISTER OPERAND      @21A\n         MVC   MNEMONIC,BLANX          CLEAR MNEMONIC              @21A\n         MVI   MNEMONIC,C'B'           SET BXX MNEMONIC CODE       @21A\n         CLI   TEMP1,X'00'             NOP ?                       @21A\n         JE    BCNOP                   BRANCH IF YES               @21A\n         CLI   TEMP1,X'F0'             UNCONDITIONAL BRANCH?       @21A\n         JE    BCSBR                   BRANCH IF YES               @21A\n         L     R12,CCODEAD             GET ADDRESS OF COND CODE    @21A\n         LR    R0,R12                      TABLE INDEX ENTRY       @21A\nBC1CCIX  CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @21A\n         JE    BCCDFT              IF END OF TABLE THEN USE DFT CC @21A\n         CLC   CCTYPE,0(R12)           RIGHT CONDITION CODE INDEX  @21A\n         JE    BCFCCTB                 BRANCH IF YES               @21A\n         AHI   R12,CC1LEN              POINT TO NEXT INDEX ENTRY   @21A\n         J     BC1CCIX                 TRY NEXT INDEX ENTRY        @21A\nBCCDFT   L     R12,CCODEAD             GET ADDRESS OF COND CODE TB @21A\n         LR    R0,R12                                              @21A\nBCFCCTB  AH    R0,2(R12)               LOCATE COND CODE TABLE      @21A\n         LR    R12,R0                         ENTRY                @21A\nBCFCCTBE CLI   0(R12),X'FF'            END OF COND CODE TABLE?     @20C\n         JE    BCCDFT              IF END OF TABLE THEN USE DFT CC @21A\n         CLC   TEMP1,0(R12)            RIGHT CONDITION CODE ??     @21A\n         JE    BCFOUND                 BRANCH IF YES               @21A\n         AHI   R12,CC2LEN              POINT TO NEXT TABLE ENTRY   @21A\n         J     BCFCCTBE                TRY NEXT ENTRY              @21A\nBCFOUND  DS    0H                                                  @21A\n         MVC   COMMENT(L'SBRANCH),SBRANCH     COPY 'Jump if '      @21A\n         MVC   COMMENT+8(17),3(R12)    COPY DESCRIPTION            @21A\n         MVC   MNEMONIC+1(2),1(R12)                                @21A\n         CLI   MNEMONIC+1,C'C'         BRANCH ON C?                @21A\n         JNE   BC1CONT                 BRANCH IF NO                @21A\n         SR    R1,R1                   CLEAR WORK                  @21A\n         IC    R1,TEMP1                GET COND CODE               @21A\n         SRL   R1,4                    SHIFT 4 BITS                @21A\n         STC   R1,TEMP1                SAVE COND CODE              @21A\n         CHI   R1,9                    COND CODE > 9               @21A\n         JH    BCFCC2                  JUMP IF CC > 9              @21A\n         OI    TEMP1,X'F0'             MAKE IT CC PRINTABLE        @21A\n         MVC   0(1,R15),TEMP1          COPY COND CODE              @21A\n         MVI   1(R15),C','                                         @21A\n         AHI   R15,2                   NEXT POS                    @21A\n         LA    R2,2                                                @21A\n         J     BC1CONT                                             @21A\nBCFCC2   MVI   0(R15),C'1'                                         @21A\n         AHI   R1,-10                                              @21A\n         STC   R1,TEMP1                                            @21A\n         OI    TEMP1,X'F0'                                         @21A\n         MVC   1(1,R15),TEMP1                                      @21A\n         MVI   2(R15),C','                                         @21A\n         AHI   R15,3                   NEXT POS                    @21A\n         LA    R2,3                    ASSUME 3 BYTES              @21A\n         J     BC1CONT                 YES                         @21A\nBCSBR    MVC   COMMENT(5),SBRANCH      COPY 'JUMP '                @12A\nBC1CONT  DS    0H                                                  @12A\n         CLI   TEXT,X'47'              BC INSTRUCTION ??           @12A\n         JE    BCXOPND                 BRANCH IF YES               @12A\n*                                      MUST BE BCR INSTRUCTION     @12A\n         CLI   MNEMONIC+1,C' '         BCR INSTRUCTION R?          @12A\n         JE    BCRBR1                                              @12A\n         CLI   MNEMONIC+2,C' '         BCR INSTRUCTION R??         @12A\n         JE    BCRBR2                                              @12A\n         CLI   MNEMONIC+3,C' '                                     @12A\n         JE    BCRBR3                                              @12A\n         MVI   MNEMONIC+4,C'R'                                     @12A\n         J     BC2CONT                                             @12A\nBCRBR1   MVI   MNEMONIC+1,C'R'                                     @12A\n         J     BC2CONT                                             @12A\nBCRBR2   MVI   MNEMONIC+2,C'R'                                     @12A\n         J     BC2CONT                                             @12A\nBCRBR3   MVI   MNEMONIC+3,C'R'                                     @12A\nBC2CONT  DS    0H                                                  @12A\n         CLI   TEXT+1,X'FE'            IS IT BR R14 INSTR\n         JNE   BCFOREG                 NO\n         MVC   COMMENT(L'S19),S19      SET COMMENT TO EXIT\nBCFOREG  JAS   R9,FORRG1               FORMAT OPERAND1             @12A\n         CLI   INLNG,X'02'             TWO BYTES INSTRUCTION ??    @12A\n         JE    INSTOUT                                             @12A\nBCNOP    MVC   MNEMONIC(3),SNOP        SET MNEMONIC TO NOP         @20C\n         CLI   TEXT,X'07'              NOPR OP CODE ?              @20A\n         JNE   BCXOPND                                             @20A\n         MVI   MNEMONIC+3,C'R'                                     @20A\n         J     BCFOREG                 FORMAT REGISTER             @20A\nBCXOPND  LA    R15,OPNDS-1             TO OPND POS                 @12A\n         CLI   MNEMONIC+1,C'C'         BC MNEMONIC INSTR ??        @12A\n         JNE   BCF2OPND                NO                          @12A\n         AR    R15,R2                  SHIFT 2 OR 3 BYTES          @12A\nBCF2OPND PACK  DBLWD(1),TEXT+1(1)      PACK 2ND BYTE\n         SR    R10,R10                 CLEAR WORK\n         IC    R10,DBLWD               PICK UP X2M1\n         SRL   R10,4                   SHIFT OUT M1\n         SR    R11,R11                 CLEAR WORK\n         ICM   R11,3,TEXT+2            PICK UP BDDD ADDRESS\n         JAS   R9,BDXADR               CONVERT RX ADDRESS\n         EX    R10,BDXMVC              MOVE OPERAND\n         JAS   R14,PRTREGS             PRINT REGISTER USEAGE       @23A\n         J     INSTOUT                 GO TO EXIT\n******************************************************************\n*                                                                *\n* VALIDATE AND FORMAT SVC INSTRUCTIONS. IF THE SVC OP-CODE IS    *\n* FOUND IN THE SVC TABLE, IT IS ACCEPTED AS AN SVC, AND THE TABLE*\n* LITERAL IS MOVED TO THE COMMENTS FIELD OF THE INSTRUCTION.     *\n*                                                                *\n******************************************************************\nSVCOPND  EQU   *                       *** SVC INSTRUCTIONS ***\n         CLI   TEXT+1,139              SVC NO > 139\n         JH    NOTSVC                  YES, NOT SVC\n*        LRL   R1,SVCTBLAD             GET SVC TABLE ADDRESS\n         L     R1,SVCTBLAD             GET SVC TABLE ADDRESS\nSVCKND   CLI   0(R1),X'FF'             END OF SVC TABLE\n         JE    NOTSVC                  YES, MUST NOT BE SVC\n         CLC   0(1,R1),TEXT+1          THIS THE ENTRY\n         JE    GOTSVC                  YES\n         AHI   R1,SVCOPLEN             STEP TO NEXT SVC ENTRY\n         J     SVCKND                  LOOP THRU SVC TABLE\nNOTSVC   J     NOTINST                 ERROR RETURN                @12C\nGOTSVC   CLI   COMMENT,C' '                                        @31A\n         JNE   GOTSVC2                                             @31A\n         MVC   COMMENT(16),1(R1)       COMMENT TO WORK AREA\nGOTSVC2  SR    R1,R1                   CLEAR WORK\n         IC    R1,TEXT+1               GET SVC OPERAND\n         CVD   R1,DBLWD                CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK\n         CHI   R1,100                  OPERAND > 100\n         JL    SVCK10                  YES\n         MVC   OPNDS(3),DBLWD          MOVE 3-DIGIT OPERAND\n         J     INSTOUT                 EXIT\nSVCK10   CHI   R1,10                   OPERAND < 10\n         JL    SVCL10                  YES\n         MVC   OPNDS(2),DBLWD+1        MOVE 2-DIGIT OPERAND\n         J     INSTOUT                 WRITE INSTRUCTION RECORD\nSVCL10   MVC   OPNDS(1),DBLWD+2        MOVE 1-DIGIT OPERAND\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n******************************************************************\n* EXTENDED FORMAT                                                *\n******************************************************************\nEOPND    DS    0H                                                  @14A\n         CLC   0(2,R7),ISAM64          SAM64 INSTR ??              @14A\n         JNE   INSTOUT                                             @14A\n         MVC   COMMENT(L'SSAM64),SSAM64     64 BIT ADDRESSING      @14A\n         J     INSTOUT                 WRITE INSTRUCTION RECORD    @14C\n******************************************************************\n* BUILD EQU STATEMENTS USING THE LABEL TABLE ENTRY ADDRESSED BY  *\n* REG 6 ON ENTRY.                                                *\n*                                                                *\n******************************************************************\nEQUSTMT  EQU   *                       BUILD EQU STATEMENTS\n         ST    R9,EQU9                 SAVE RETURN ADDR\n         USING LABELD,R6\n         MVC   NAME(L'LBLNAME),LBLNAME     NAME TO EQU STMT        @25C\n         CLI   NAME+8,X'00'                                        @25A\n         JE    CCXQUIT                                             @25A\n         CLI   NAME+8,C' '                                         @25A\n         JE    CCXQ03                                              @25A\n         MVC   MNEMONIC+6(L'S_EQU),S_EQU   BUILD EQU STATEMENT     @28C\n         LA    R9,OPNDS+5                                          @28A\n         J     CCXQ05                                              @25A\nCCXQ03   MVC   MNEMONIC(L'S_EQU),S_EQU     BUILD EQU STATEMENT     @20C\n         LA    R9,OPNDS                                            @28A\nCCXQ05   MVI   0(R9),C'*'              SET EQU OPERAND             @28C\n         CLI   LBLLEN,1                LENGTH 0 OR 1\n         JNH   CCXEQU                  YES\n         SR    R0,R0                   CLEAR WORK\n         IC    R0,LBLLEN               GET LENGTH\n         CVD   R0,DBLWD                CONVERT\n         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK\n         OI    DBLWD+2,C'0'            CLEAR SIGN\n         CHI   R0,100                  LENGTH < 100\n         JL    CCXQ10                  YES\n         MVC   2(3,R9),DBLWD           MOVE LENGTH                 @28C\n         J     CCXEQC                  GO SET COMMA\nCCXQ10   CHI   R0,10                   LENGTH < 10\n         JL    CCXQ1                   YES\n         MVC   2(2,R9),DBLWD+1         MOVE 2-DIGIT LENGTH         @28C\n         J     CCXEQC                  GO SET COMMA\nCCXQ1    MVC   2(1,R9),DBLWD+2         MOVE 1-DIGIT LENGTH         @28C\nCCXEQC   MVI   1(R9),C','              SET COMMA                   @28C\nCCXEQU   JAS   R9,WRTOUT               OUTPUT EQU STATEMENT\n         JAS   R9,PRINT                GO PRINT IT\nCCXQUIT  L     R9,EQU9                 GET RETURN ADDR\n         BR    R9                      RETURN\n         DROP  R6\nWRTOUT   L     R15,WRITEOUT                                        @30A\n         BALR  R14,R15                 WRITE SYSPRINT              @30A\nWRTPUNCH DS    0H                                                  @30A\n         L     R1,PUNCHDCB             @ SYSPUNCH DCB\n         MVC   PRT+25(80),WORKREC      COPY WORKREC TO PRT         @14A\n         TM    48(R1),X'10'            IS SYSPUNCH OPEN ?\n         JZ    CLRWKR                  NO\n         PUT   (1),WORKREC             WRITE SOURCE CARD TO SYSPUNCH\nCLRWKR   MVI   WORKREC,C' '            CLEAR OUTPUT RECORD\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC\n         MVC   COMMENT,WORKREC         CLEAR COMMENT              @18A\n         MVI   OPNDWK,C' '             CLEAR OPNDWK TO BLANK      @15A\n         MVC   OPNDWK+1(L'OPNDWK-1),OPNDWK                        @15A\n         CLC   IBR14,0(R7)                                        @27A\n         BNER  R9                                                 @27A\n         TM    48(R1),X'10'            IS SYSPUNCH OPEN ?         @28A\n         BZR   R9                      NO                         @28A\n         L     R1,PUNCHDCB             @ SYSPUNCH DCB             @27A\n         PUT   (1),COMTREC             WRITE COMMENT LINE         @27A\n         BR    R9                      RETURN                     @30A\n*\n******************************************************************\n*                                                                *\n* FORMAT FIRST OPERAND FIELD TO REGISTER                         *\n*                                                                *\n******************************************************************\nFORRG1   DS    0H                                                  @12A\n         SR    R10,R10                 CLEAR WORK                  @12A\n         PACK  DBLWD(1),TEXT+1(1)      FLIP 2ND BYTE               @12A\n         IC    R10,DBLWD               PICK UP R2M1                @12A\n         SRL   R10,4                   REMOVE 1ST REG              @12A\nFORRGC   CVD   R10,DBLWD               CONVERT                     @12A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @12A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @12A\n         LA    R15,OPNDS-1             TO OPND POS                 @12A\n         CLI   0(R15),C' '             MNEMOMIC CODE IS 6 ?        @20A\n         JE    FORR5                                               @20A\n         LA    R15,OPNDS               TO OPND POS                 @20A\nFORR5    CLI   MNEMONIC+1,C'C'         BC MNEMONIC INSTR ??        @12A\n         JNE   FORRC\n         AR    R15,R2\nFORRC    ST    R9,FORRG9               SAVE RETURN ADDR            @12A\n         MVI   1(R15),C'R'             REGISTER DELIMITER          @12A\n         CHI   R10,10                  REG NBR < 10                @12A\n         JL    FORR1                   YES, 0-9                    @12A\n         MVC   2(2,R15),DBLWD          MOVE 2-DIGIT REG NBR        @12A\n         AHI   R15,1                                               @12A\n         J     FORRG1EX                                            @12A\nFORR1    MVC   2(1,R15),DBLWD+1        MOVE 1-DIGIT REG NBR        @12A\nFORRG1EX DS    0H                                                  @12A\n         AHI   R15,2                                               @12A\n         L     R9,FORRG9                                           @12A\n         BR    R9                      RETURN                      @12A\n******************************************************************\n*                                                                *\n* BUILDS STORAGE OPERANDS CONTAINING BASE, DISPLACEMENT, AND     *\n* LENGTH. ON ENTRY, REG 11 CONTAINS THE BDDD ADDRESS, AND REG 10 *\n* CONTAINS THE LENGTH. THE SCHLBL ROUTINE IS CALLED TO CREATE A  *\n* LABEL REFERENCE, IF THE BASE REG IS CURRENT, AND A LABEL EXISTS*\n* IF SCHLBL IS UNSUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM     *\n* DDDD(LLL,RRR) IS CREATED. EACH BASE REGISTER HAS CORRESPONDING *\n* DSECT ENTRY. IF THE DSECT ENTRY IS NON BLANK, CALL SRCHDSCT    *\n* TO GET VARIBALE NAME FROM GLOBAL AND LOCAL MAPPING.            *\n* INPUT  : R1  = BDDD                                            *\n* OUTPUT : R10 = LENGTH OF FORMATTED FIELD (ie LLL)              *\n*          OPNDWK = FORMATTED OPERAND                            *\n* WORKING VARIABLE : BASERG                                      *\n******************************************************************\n*\nBDLADR   EQU   *                  *** FORMAT DDDD(LLL,RRR) OPERAND\n         ST    R9,BDL9                 SAVE RETURN ADDR\n         ST    R11,BD11                SAVE R11                    @15A\n         SR    R0,R0                   CLEAR WORK REG\n         LR    R1,R11                  COPY BDDD ADDRESS\n         SLDL  R0,20                   BASE REG TO R0\n         LTR   R0,R0                   IS BASE REG 0\n         JNZ   BDLD020                 NO                          @15A\n         CLI   ICLASS,NPSA             NOT REFER PSA               @21C\n         JE    BDLD020                 YES                         @21C\n         CLI   COMMENT,C' '            COMMENT FIELD IS BLANK      @15A\n         JNE   BDLD020                 SKIP IF COMMENT IS NONBLANK @15A\n         MVC   COMMENT(L'S20),S20      SET COMMENT TO REFER PSA\n*\nBDLD020  LR    R1,R11                  R1 = BDDD                   @15A\n         SRL   R1,12                   GET RID OF DDD              @15A\n         NILL  R1,X'000F'              R1 = BASE REGISTER          @15A\n         NI    FLAG1,255-FLGPSA-FLGFOUND    OFF PSA VAR NAME FIND  @17A\n         STC   R1,BASERG               SAVE BASE REGISTER          @15A\n         LTR   R1,R1                   PSA MAPPING ?               @15A\n         JNZ   BDLD040                 BRANCH IF NOT PSA MAPPING   @20C\n         CLI   ICLASS,NPSA             NOT REFERENCE STORAGE ?     @20A\n         JE    BDLD040                 BRANCH IF YES               @21C\n         OI    FLAG1,FLGPSA            TURN ON PSA PSAFLAG         @15A\nBDLD040  DS    0H                                                  @29A\n         ST    R15,BD15                SAVE R15                    @29A\n         L     R15,SRCHDSCT            GET E.P. ADDRESS            @29A\n         BALR  R14,R15                 CALL SRCHDSCT               @29A\n         LTR   R15,R15                 RC = 0 ?                    @29A\n         JNZ   BDLSCHL                 BRANCH IF RC IS NOT ZERO    @29A\n         L     R15,BD15                RESTORE R15                 @29A\n         TM    FLAG1,FLGPSA            PSA DSECT ?                 @15A\n         JO    BDLGCMPP                BRANCH IF YES               @15A\n         MVI   0(R1),C'-'                                          @14A\n         AHI   R1,1                    NEXT POSITION               @15A\n         TM    FLAG1,FLGUDSCT          USER DEFINE MAPPING ?       @25A\n         JO    BDLUMAP                 BRANCH IF YES               @25A\n         AHI   R4,6                                                @15A\n         SR    R11,R11                 CLEAR R11                   @15A\n         IC    R11,0(R4)            GET LENGTH OF DSECT PREFIX     @15A\n         EX    R11,MVDS    ***         COPY DSECT PREFIX           @15A\n         LA    R1,1(R1,R11)            R1 = END OF OPNDWK          @15A\nBDLD050  SR    R11,R11                 CLEAR R11 FOR ICM OP        @15A\n         IC    R11,BASERG              GET BASE REGISTER           @15A\n         J     BDLLPN                                              @21A\nBDLUMAP  L     R11,UDSCTAD             LOAD DSECT HEADER ADDRESS   @25A\n         MVC   0(8,R1),0(R11)          COPY DSECT PREFIX           @25A\n         AHI   R1,7                    POINT TO THE LAST BYTE      @25A\nBDLUMAP2 CLI   0(R1),C' '              FIND THE                    @25A\n         JNE   BDLUMAP3                  LENGTH OF                 @25A\n         BCTR  R1,R0                        DSECT                  @25A\n         J     BDLUMAP2                                            @25A\nBDLUMAP3 AHI   R1,1                    LOCATE END OF OPNDWK        @25A\n         J     BDLD050                 CONTINUE                    @25A\n******\nBDLSCHL  L     R11,BD11                RESTORE R11                 @14A\n         L     R15,BD15                RESTORE R15                 @29A\n         JAS   R9,SCHLBL               SEARCH FOR LABEL\n         J     BDLGLBL                 BRANCH IF LABEL FOUND\n*** LABEL NOT FOUND\n         LR    R1,R11                  COPY BDDD ADDRESS\n         SLL   R1,20                   SHIFT OUT B\n         SRL   R1,20                   RIGHT JUSTIFY DDD\n         CVD   R1,DBLWD                CONVERT DDD\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(4),DBLWD+5(3)     UNPACK\n         MVC   OPNDWK,BLANX            CLEAR WORK AREA\n         CHI   R1,1000                 DISPL < 1000\n         JL    BDLD100                 YES\n         MVC   OPNDWK(4),DBLWD         MOVE 4-DIGITS DISPLACEMENT\n         LA    R1,OPNDWK+4             TO NEXT POS\n         J     BDLLPN                  CONTINUE\nBDLD100  CHI   R1,100                  DISPL < 100\n         JL    BDLD10                  YES\n         MVC   OPNDWK(3),DBLWD+1       MOVE 3-DIGITS DISPLACEMENT\n         LA    R1,OPNDWK+3             TO NEXT POS\n         J     BDLLPN                  CONTINUE\nBDLD10   CHI   R1,10                   DISPL < 10\n         JL    BDLD1                   YES\n         MVC   OPNDWK(2),DBLWD+2       MOVE 2-DIGITS DISPLACEMENT\n         LA    R1,OPNDWK+2             TO NEXT POS\n         J     BDLLPN                  CONTINUE\nBDLD1    MVC   OPNDWK(1),DBLWD+3       MOVE 1-DIGIT DISPLACEMENT\n         LA    R1,OPNDWK+1             TO NEXT POS\nBDLLPN   MVI   0(R1),C'('              LEFT PAREN DELIMITER\n         AHI   R10,1                   COMPUTE ACTUAL LENGTH FROM LENG\n         CVD   R10,DBLWD               CONVERT BASERG TO DECIMAL\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK\n         CHI   R10,100                 LENGTH < 100\n         JL    BDLL10                  YES\n         MVC   1(3,R1),DBLWD           MOVE 3-DIGIT LENGTH\n         AHI   R1,4                    TO NEXT POS\n         J     BDLCMA                  CONTINUE\nBDLL10   CHI   R10,10                  LENGTH < 10\n         JL    BDLL1                   YES\n         MVC   1(2,R1),DBLWD+1         MOVE 2-DIGIT LENGTH\n         AHI   R1,3                    TO NEXT POS\n         J     BDLCMA                  CONTINUE\nBDLL1    MVC   1(1,R1),DBLWD+2         MOVE 1-DIGIT LENGTH\n         AHI   R1,2                    TO NEXT POS\nBDLCMA   MVC   0(2,R1),SCOMMAR         DELIMITERS ,R\n         SR    R11,11                                              @21A\n         IC    R11,BASERG                                          @21A\nBDLCMAC  CVD   R11,DBLWD               CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R11,10                  REG < 10\n         JL    BDLR1                   YES\n         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT REGISTER\n         AHI   R1,4                    TO NEXT POS\n         J     BDLRPN                  CONTINUE\nBDLR1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT REG\n         CLI   2(R1),C'0'              IS REG = 0\n         JNE   BDLB1                   NO\n         MVC   0(2,R1),BLANX           YES, BLANK IT\n         J     BDLRPN                  CONTINUE\nBDLB1    AHI   R1,3                    TO NEXT POS\nBDLRPN   MVI   0(R1),C')'              FINAL DELIMITER\n         LR    R10,R1                  COPY END ADDRESS\n         S     R10,OWSTRT              COMPUTE OPERAND LENGTH CODE\n         L     R9,BDL9                 GET RETURN ADDR\n         BR    R9                      EXIT\n         USING DSECTD,R12\nBDLGLBL  MVC   OPNDWK(L'DSLNAME),DSLNAME  LABEL ENTRY NAME TO WORK @25C\n         CLI   DSLBTYP,C'D'            USER DEFINE DSECT ENTRY?    @19A\n         JNE   BDLABEL                 BRANCH IF NO                @22A\n         CLI   COMMENT,C' '   **DEBUG\n         JNE   BDLABEL        **DEBUG\n         MVC   COMMENT(L'DSCOMMT),DSCOMMT  COPY DSECT DESCRIPTION  @19A\nBDLABEL  AHI   R10,1                   COMPUTE ACTUAL LENGTH\n         LA    R1,OPNDWK+L'LBLNAME-1   @ LAST POSS CHARACTER       @25C\nBDLGRHE  CLI   0(R1),X'00'             LAST POSS CHARACTER ?       @25A\n         JE    BDLGRHE1                BRANCH IF HEXI ZERO         @25A\n         CLI   0(R1),C' '              LAST POSS CHARACTER ?\n         JNE   BDLGCKLN                BRANCH IF NOT BLANK\nBDLGRHE1 BRCT  R1,BDLGRHE              LOOP TO GET @LAST POSS CHAR\nBDLGCKLN MVI   1(R1),C'('              NO, DELIMITER\n         CLM   R10,1,DSLENG            LBL AND INSTR LENGTHS SAME  @25C\n         JE    BDLGCMP                 YES\n         CVD   R10,DBLWD               CONVERT LENGTH\n         UNPK  DBLWD(3),DBLWD+5(3)     UNPACK\n         OI    DBLWD+2,C'0'            CLEAR SIGN\n         CHI   R10,100                 LENGTH < 100\n         JL    BDLG10                  YES\n         MVC   2(3,R1),DBLWD           MOVE 3-DIGIT LENGTH\n         AHI   R1,5                    TO NEXT POS\n         J     BDLGRPN                 CONTINUE\nBDLG10   CHI   R10,10                  LENGTH < 10\n         JL    BDLG1                   YES\n         MVC   2(2,R1),DBLWD+1         MOVE 2-DIGIT LENGTH\n         AHI   R1,4                    TO NEXT POS\n         J     BDLGRPN                 CONTINUE\nBDLGCMPP BCTR  R1,0                    MINUS LENGTH FOR COPY       @15A\n         J     BDLGCMP                                             @15A\nBDLG1    MVC   2(1,R1),DBLWD+2         MOVE 1-DIGIT LENGTH\n         AHI   R1,3                    TO NEXT POS\nBDLGRPN  MVI   0(R1),C')'              FINAL DELIMITER\nBDLGCMP  LR    R10,R1                  COPY END ADDRESS\n         S     R10,OWSTRT              COMPUTE LENGTH CODE\n         L     R12,SLSAV+12            RESTORE R12\n         L     R9,BDL9                 GET RETURN ADDR\n         BR    R9                      EXIT\n         DROP  R12\n******************************************************************\n* BUILDS STORAGE OPERANDS CONTAINING BASE, DISPLACEMENT LOW,     *\n* AND DISPLAYMENT HIGH AND INDEX. ON ENTRY, REG 11 CONTAINS      *\n* THE BDDD ADDRESS, AND REG 10 CONTAINS THE INDEX REGISTER.      *\n* THE SCHLBL ROUTINE IS CALLED TO FIND THE LABEL REFERENCE.      *\n* IT BRANCHES TO ROUTINE BDAD400 TO COMPLETE THE Y OPERAND       *\n* DATA FORMATING.                                                *\n* DISPLACEMENT OF BDADR 4095 TO -4095                            *\n*                                                                *\n* INPUT  : R10    -> INDEX REGISTER                              *\n*          R11    -> BDDD                                        *\n*          R9     -> LINKAGE REGISTER                            *\n*          TEXT   -> INSTRUCTION                                 *\n******************************************************************\nBDYADR   DS    0H              *** FORMAT BLLLHH OPERAND ***       @28A\n         CLC   TEXT+3(2),X_FFFF        NEGATIVE DISPLACEMENT       @28A\n         JE    BDADR                   BRANCH IF YES               @28A\n         CLI   TEXT+4,X'00'            POSTIVE DISPLACEMENT        @28A\n         JE    BDADR                                               @28A\n         ST    R9,BD9                  SAVE RETURN ADDR            @28A\n         JAS   R9,SCHLBL               GO SEARCH FOR LABEL         @28A\n         J     BDAD700                 BRANCH IF FOUND             @28A\n* LABEL IS NOT FOUND\n         CLI   TEXT+4,X'FF'            NEGATIVE DISPLACEMENT ?     @28A\n         JE    BDYNEG                  BRANCH IF YES               @28A\n         SR    R1,R1                   CLEAR R1 FOR IC INSTRUCTION @28A\n         IC    R1,TEXT+4               LOAD DISPLACEMENT HIGH      @28A\n         SLL   R1,12                                               @28A\n         SR    R9,R9                                               @28A\n         ICM   R9,3,TEXT+2             LOAD DISPLACEMENT LOW       @28A\n         NILL  R9,X'0FFF'                                          @28A\n         AR    R1,R9                                               @28A\n         CVD   R1,DBLWD                CONVERT                     @28A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @28A\n         UNPK  DBLWD2+2(6),DBLWD+5(3)  UNPACK                      @28A\n         OI    DBLWD2+7,X'F0'                                      @28A\n         MVC   OPNDWK(4),DBLWD2+4      MOVE 4-DIGIT DISPL          @28A\n         CHI   R1,10000                DISPL < 10000               @28A\n         JL    BDYADR4                 YES                         @28A\n         MVC   OPNDWK(5),DBLWD2+3      MOVE 5-DIGIT DISPL          @28A\n         LA    R1,OPNDWK+5             TO NEXT POS                 @28A\n         J     BDAD400                 CONTINUE                    @28A\nBDYADR4  LA    R1,OPNDWK+4             TO NEXT POS                 @28A\n         J     BDAD400                 CONTINUE                    @28A\n* Negative displacement                                            @28A\nBDYNEG   MVC   DBLWD(2),TEXT+2         COPY DH                     @28A\n         OI    DBLWD,X'F0'                                         @28A\n         SR    R9,R9                                               @28A\n         LH    R9,DBLWD                                            @28A\n         LCR   R9,R9                                               @28A\n         LA    R1,OPNDWK               TO NEXT POS                 @28A\n         MVI   0(R1),C'-'                                          @28A\n         AHI   R1,1                    NEXT POSITION               @28A\n         CVD   R9,DBLWD                CONVERT DISPL               @28A\n         OI    DBLWD+7,X'0F'           CLEAR SIGN                  @28A\n         UNPK  DBLWD(3),DBLWD+6(2)     UNPACK                      @28A\n         OI    DBLWD+2,X'F0'                                       @28A\n         CHI   R9,100                  > 100 ?                     @28A\n         JL    BDY100                  Branch if less than 100     @28A\n         MVC   0(3,R1),DBLWD                                       @28A\n         AHI   R1,3                    NEXT POSITION               @28A\n         J     BDAD400                 CONTINUE                    @28A\nBDY100   CHI   R9,10                                               @28A\n         JL    BDY200                                              @28A\n         MVC   0(2,R1),DBLWD+1                                     @28A\n         AHI   R1,2                    NEXT POSITION               @28A\n         J     BDAD400                 CONTINUE                    @28A\nBDY200   MVC   0(1,R1),DBLWD+2                                     @28A\n         AHI   R1,1                    NEXT POSITION               @28A\n         J     BDAD400                 CONTINUE                    @28A\n******************************************************************\n*                                                                *\n* BUILDS STORAGE OPERANDS CONTAINING BASE AND DISPLACEMENT.      *\n* CALL SRCHDSCT TO SEARCH GLOBAL MAPPING. IF NOT FOUND THE       *\n* SCHLBL ROUTINE IS CALLED TO SEE WHETHER A LABEL REFERENCE MAY  *\n* BE USED, RATHER THAN AN EXPLICIT ADDRESS. IF LBLSCH IS NOT     *\n* SUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM DDDD(RRR) IS FORMED*\n* ON ENTRY.                                                      *\n* INPUT  :  REG 11 CONTAINS THE BDDD ADDRESS.                    *\n* OUTPUT :  REG 10 CONTAINS THE LENGTH OF THE FORMATTED OPERAND  *\n*           OPNDWK                                               *\n******************************************************************\nBDADR    DS    0H                      *** FORMAT DDDD(RRR) OPERANDS **\n         NI    FLAG1,255-FLGFOUND      TURN OFF SYSVAR FIND FLAG @17A\n         ST    R11,BD11                SAVE R11\n         ST    R9,BD9                  SAVE RETURN ADDR\n         SR    R0,R0                   CLEAR WORK REG\n         LR    R1,R11                  COPY BDDD ADDRESS\n         SLDL  R0,20                   BASE REG TO R0\n         LTR   R0,R0                   IS BASE REG 0\n         JNZ   BDSCHL                  NO\n         SRL   R1,20                   RIGHT JUSTIFY DISPL\n         CLI   TEXT,X'91'              TM OP ??                   @14A\n         JE    BDAD050                                            @14A\n         CLC   MNEMONIC(4),S21         = SPKA ?                   @26A\n         JE    BDAD070                                            @26A\n         CLI   ICLASS,NPSA             NOT REFER PSA              @20A\n         JE    BDAD250                 YES                        @20A\n         CLI   ICLASS,PRIVP            NOT REFER PSA              @22A\n         JE    BDAD250                 YES                        @22A\nBDAD050  CLI   COMMENT,C' '                                       @14A\n         JNE   BDSCHL                                             @26C\n         MVC   COMMENT(L'S20),S20      SET COMMENT TO REFER PSA\n         J     BDSCHL                                              @26A\nBDAD070  MVC   COMMENT(L'S23),S23      SET PSW KEY                 @11A\n         CLC   TEXT+2(2),XZROS         TEST FOR KEY 0              @26A\n         JE    BDAKEY0                                             @26A\n         CLC   TEXT+2(2),X0050         TEST FOR KEY 8              @26A\n         JE    BDAD080                                             @26A\n         CLC   TEXT+2(2),X0010         TEST FOR KEY 1              @26A\n         JNE   BDSCHL                                              @26A\n         MVC   COMMENT+L'S23(L'S23B),S23B  Set PSW KEY to 1        @26A\n         J     BDSCHL                                              @26A\nBDAD080  MVC   COMMENT+L'S23(L'S23C),S23C  Set PSW KEY to 5        @26A\n         J     BDSCHL                                              @26A\nBDTABL   DC X'08',X'0C',X'10',X'14',X'34',X'38',X'50',X'58',X'70'  @27A\n*              S    SI    RS   SSI   SSE   SS3   RSE   RSY   SIY   @27A\n         DC    X'FF'                                               027A\nBDAKEY0  MVC   COMMENT+L'S23(L'S23A),S23A  Set PSW KEY to 0        @26C\nBDSCHL   DS    0H                                                  @14A\n         LARL  R14,BDTABL                                          @27A\nBDAD090  CLI   0(R14),X'FF'            END OF TABLE ?              @27C\n         JE    BDAD220                 BRANCH IF YES               @27C\n         CLC   ITYPE,0(R14)            INSTRUCTION TYPE FIND       @27C\n         JE    BDAD100                 BRANCH IF EQUAL             @27C\n         AHI   R14,1                   BUMP UP NEXT TABLE ENTRY    @27C\n         J     BDAD090                 LOOP                        @27C\n*\nBDAD100  LR    R1,R11                  R1 = BDDD                   @14A\n         SRL   R1,12                   GET RID OF DDD              @14A\n         NILL  R1,X'000F'              R1 = BASE REGISTER          @14A\n         NI    FLAG1,255-FLGPSA        TURN OFF PSA FLAG           @15A\n         STC   R1,BASERG               SAVE BASE REGISTER          @14A\n         LTR   R1,R1                   PSA MAPPING ?               @15A\n         JNZ   BDAD120                 BRANCH IF NON ZERO          @15A\n         OI    FLAG1,FLGPSA            TURN ON PSA PSAFLAG         @15A\nBDAD120  CLC   MNEMONIC(4),S21         = SPKA ?                    @26A\n         JE    BDAD250                                             @26A\n         ST    R15,BD15                SAVE                        @29A\n         L     R15,SRCHDSCT            GET E.P. ADDRESS            @29A\n         BALR  R14,R15                 CALL SRCHDSCT               @29A\n         LTR   R15,R15                 RC = 0 ?                    @29A\n         JNZ   BDAD200                 BRANCH IF RC IS NOT ZERO    @29A\n         L     R15,BD15                SAVE                        @29A\n         TM    FLAG1,FLGPSA            PSA DSECT ?                 @15A\n         JO    BDAD900                 BRANCH IF YES               @15A\n         MVI   0(R1),C'-'                                          @14A\n         AHI   R1,1                    NEXT POSITION               @14A\n         TM    FLAG1,FLGUDSCT          USER DEFINE DSECT ?         @15A\n         JO    BDAD140                 BRANCH IF YES               @15A\n         SR    R11,R11                 CLEAR R11                   @14A\n         AHI   R4,6                                                @15A\n         IC    R11,0(R4)            GET LENGTH OF DSECT PREFIX     @15A\n         EX    R11,MVDS    ***         COPY DSECT PREFIX           @14A\n         LA    R1,1(R1,R11)            R1 = END OF OPNDWK          @14A\nBDAD130  SR    R11,R11                 CLEAR R11 FOR ICM OP        @14A\n         IC    R11,BASERG              GET BASE REGISTER           @14A\n         J     BDAD500                                             @14A\nBDAD140  L     R11,UDSCTAD             LOAD DSECT ADDRESS          @25A\n         MVC   0(8,R1),0(R11)          COPY DSECT FIELD            @25A\n         AHI   R1,7                    GET THE                     @25A\nBDAD160  CLI   0(R1),C' '                THE END                   @25A\n         JNE   BDAD180                           OF                @25A\n         BCTR  R1,R0                                OPNDWK         @25A\n         J     BDAD160                                             @25A\nBDAD180  AHI   R1,1                    R1 = END OF OPNDWK          @25A\n         J     BDAD130                                             @25A\n* RC04 of SRCHDSCT\nBDAD200  L     R11,BD11                RESTORE R11                 @14A\n         L     R15,BD15                SAVE                        @29A\nBDAD220  JAS   R9,SCHLBL               GO SEARCH FOR LABEL         @14A\n         J     BDAD700                 BRANCH IF FOUND\n*                                      IF LABEL DOES NOT EXIST\nBDAD250  LR    R1,R11                     THEN COPY BDDD ADDRESS\n         SLL   R1,20                   SHIFT OUT B\n         SRL   R1,20                   RIGHT JUSTIFY DDD\n         CLI   ITYPE,SIY               SIY OPERAND ?               @28A\n         JNE   BDAD275                 BRANCH IF NO                @28A\n         SR    R0,R0                   CLEAR R1 FOR IC INSTRUCTION @28A\n         IC    R0,TEXT+4               LOAD DISPLACEMENT HIGH      @28A\n         SLL   R0,12                                               @28A\n         AR    R1,R0                   DISPLACEMENT = DH + DL      @28A\nBDAD275  CVD   R1,DBLWD                CONVERT DISPL\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(4),DBLWD+5(3)     UNPACK\n         MVC   OPNDWK(4),BLANX\n         CHI   R1,1000                 DISPL < 1000\n         JL    BDAD300                 YES\n         MVC   OPNDWK(4),DBLWD         MOVE 4-DIGIT DISPL\n         LA    R1,OPNDWK+4             TO NEXT POS\n         J     BDAD400                 CONTINUE\nBDAD300  CHI   R1,100                  DISPL < 100\n         JL    BDAD320                 YES                         @14C\n         MVC   OPNDWK(3),DBLWD+1       MOVE 3-DIGIT DISPL\n         LA    R1,OPNDWK+3             TO NEXT POS\n         J     BDAD400                 CONTINUE\nBDAD320  CHI   R1,10                   DISPL < 10                  @14C\n         JL    BDAD350                 YES                         @14C\n         MVC   OPNDWK(2),DBLWD+2       MOVE 2-DIGIT DISPL\n         LA    R1,OPNDWK+2             TO NEXT POS\n         J     BDAD400                 CONTINUE\nBDAD350  MVC   OPNDWK(1),DBLWD+3       MOVE 1-DIGIT DISPL          @14C\n         LA    R1,OPNDWK+1             TO NEXT POS\nBDAD400  SRL   R11,12                  RE-JUSTIFY BASE REG         @14C\n         CLI   ICLASS,NPSA             NOT REFER PSA ?             @20C\n         JE    BDAD900                 BRANCH IF YES               @21A\n         CLI   ICLASS,PRIVP            NOT REFER PSA ?             @22A\n         JE    BDAD900                 BRANCH IF YES               @22A\n         TM    FLAG1,FLGPSA            PSA DSECT ?                 @15A\n         JO    BDAD900                 BRANCH IF YES               @15A\n*        TM    FLAG1,FLGUDSCT          USER DSECT ?                @25A\n*        JO    BDAD900                 BRANCH IF YES               @25A\nBDAD500  MVC   0(2,R1),S25             DELIMITERS (R               @14C\n         CVD   R11,DBLWD               CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R11,10                  BASE REG < 10\n         JL    BDAD600                 YES\n         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT BASE REG\n         AHI   R1,4                    TO NEXT POS\n         J     BDAD650                 CONTINUE\nBDAD600  MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT BASE REG\n         AHI   R1,3                    TO NEXT POS\nBDAD650  MVI   0(R1),C')'              FINAL DELIMITER             @17C\n         LR    R2,R1                   COPY END ADDRESS\n         AHI   R2,-4                   BACK 4 BYTES\n         J     BDCEXIT                                             @15A\n         USING DSECTD,R12                                          @19C\nBDAD700  MVC   OPNDWK(L'DSLNAME),DSLNAME     COPY LABEL ENTRY      @25C\n         LA    R1,OPNDWK+L'DSLNAME-1   @ LAST POSSILE CHARACTER    @25C\n         CLI   DSLBTYP,C'D'            USER DEFINE DSECT ENTRY?    @19A\n         JNE   BDAD800                 BRANCH IF NO                @26C\n         CLI   COMMENT,C' '  ***DEBUG                              @19A\n         JNE   BDAD800       ***DEBUG  BRANCH IF NO                @26C\n         MVC   COMMENT(L'DSCOMMT),DSCOMMT   COPY DSECT DESCRIPTION @19A\nBDAD800  CLI   0(R1),C' '              LAST POSITION ?             @25A\n         JNE   BDAD950                 JUMP IF YES                 @25A\n         BCTR  R1,0                    PREVIOUS CHARACTER          @25A\n         J     BDAD800                 LOOP                        @25A\nBDAD900  BCTR  R1,0                    MINUS 1 FOR COPY            @16A\nBDAD950  L     R12,SLSAV+12            RESTORE R12\nBDCEXIT  LR    R10,R1                  COPY END ADDRESS\n         S     R10,OWSTRT              COMPUTE LENGTH CODE\n         L     R9,BD9                  GET RETURN ADDR\n         BR    R9                      EXIT\n*        CLC   TXTOFSET,XOFST    ** DEBUG\n*        JNE   QQQQ5             ** DEBUG\n*        JL    QQQQ5             ** DEBUG DATA STATEMENT\n*        JAS   R14,PRTREGS\n*        LA    R0,COMMENT\n*        DC    X'0000'           ** DEBUG\n*QQQ5    DS    0H                ** DEBUG\n******************************************************************\n* BUILDS STORAGE OPERANDS CONTAINING BASE, DISPLACEMENT, AND     *\n* INDEX. ON ENTRY, REG 11 CONTAINS THE BDDD ADDRESS, AND REG 10  *\n* CONTAINS THE INDEX. THE SCHLBL ROUTINE IS CALLED TO FIND THE   *\n* LABEL REFERENCE AND COPY CONTENT OF THE LABEL TO COMMENT FOR   *\n* LIOP INSTRUCTION TYPE, IF THE BASE REG IS CURRENT, AND A LABEL *\n* EXISTS.                                                        *\n* IF SCHLBL IS UNSUCCESSFUL, AN EXPLICIT ADDRESS OF THE FORM     *\n* DDDD(XXX,RRR) IS CREATED.                                      *\n*                                                                *\n* INPUT  : R10    -> INDEX REGISTER                              *\n*          R11    -> BDDD                                        *\n*          R9     -> LINKAGE REGISTER                            *\n*          TEXT   -> INSTRUCTION                                 *\n* OUTPUT : R10    -> LENGTH OF THE FORMATTED OPERAND             *\n*          OPNDWK -> THE FORMATTED OPERAND                       *\n*          COMMENT-> CONTENT OF THE LABEL                        *\n* FLAG1    X'40'  -> BASE REGISTER IS 0 (PSA Mapping)            *\n*          X'20'  -> INDEX REGISTER IS 0                         *\n******************************************************************\nBDXADR   EQU   *              *** FORMAT DDDD(XXX,BBB) OPERAND\n         ST    R9,BDX9                 SAVE RETURN ADDR\n         ST    R11,BDR11               SAVE BDDD                  @28A\n         CLI   ITYPE,RXE               RXE OP ??                  @14A\n         JE    BDXD005                 BRANCH IF RXE OP CODE      @14A\n         CLI   ITYPE,RXY               RXY OP ??                  @14A\n         JE    BDXD005                 BRANCH IF RXY OP CODE      @14A\n         CLI   TEXT,X'47'              B  INSTRUCTION ?           @21A\n         JE    BDXD005                 BRANCH IF BRANCH INSTR     @26A\n         CLI   ITYPE,SS3               SS3 OP ??                  @26A\n         JE    BDXD005                 BRANCH IF SS3 OP CODE      @14A\n         CLI   ITYPE,RX                RX OP ??                   @14A\n         JNE   BDXD450                 BRANCH IF NOT RX OP CODE   @14A\nBDXD005  LR    R1,R11                  R1  = BDDD                 @14A\n         SRL   R1,12                   GET RID OF DDD             @14A\n         NI    FLAG1,255-FLGPSA        TURN OFF BASER IS 0        @15A\n         LTR   R1,R1                   BASE REGISTER IS 0 ??      @15A\n         JNZ   BDXD020                 BRANCH IF NOT R0           @15A\n         OI    FLAG1,FLGPSA            TURN ON BASE REG IS 0       @15A\n         SR    R1,R1                   CLEAR REGISTER 1 FOR ICM    @15A\n         ICM   R1,1,TEXT+1                                         @15A\n         NILL  R1,X'000F'              R1  = INDEX REGISTER        @15A\n         NI    FLAG1,255-FLGIXREG-FLGFOUND  OFF INDEX REG BIT      @15A\n         LTR   R1,R1                   INDEX REGISTER IS 0 ??      @15A\n         JNZ   BDXD020                 BRANCH IF INDEX REG NOT 0   @15A\n         OI    FLAG1,FLGIXREG          TURN ON INDEX REG 0 SW      @15A\n         STC   R1,BASERG               SET BASERG TO 0             @14A\n         LR    R1,R10                  RESTORE INDEX REGISTER      @14A\n         J     BDXD030                                             @15A\nBDXD020  STC   R1,BASERG               BASE REG = INDEX REG        @14A\nBDXD030  CLI   TEXT,X'41'              LA INSTRUCTION ?            @15A\n         JNE   BDXD100                 BRANCH IF NOT LA INSTR      @15A\n         TM    FLAG1,FLGPSA+FLGIXREG   INDEX/BASE REG IS 0         @15A\n         JO    BDXD400                                             @15A\nBDXD100  ST    R15,BD15                SAVE R15                    @29A\n         L     R15,SRCHDSCT            GET E.P. ADDRESS OF SRCHDSCT@29A\n         BALR  R14,R15                 CALL SRCHDSCT               @29A\n         LTR   R15,R15                 RC = 0 ?                    @29A\n         JNZ   BDXD400                 BRANCH IF RC IS NON ZERO    @29A\n         L     R15,BD15                RESTORE R15                 @29A\n         TM    FLAG1,FLGPSA+FLGIXREG   BASE AND INDEX REG ARE 0    @15A\n         JO    BDXPSA                  BRANCH IF PSA MAPPING       @15A\n         MVI   0(R1),C'-'                                          @14A\n         AHI   R1,1                    NEXT POSITION               @14A\n         TM    FLAG1,FLGUDSCT          USER DEFINE MAPPING         @25A\n         JO    BDXD150                 BRANCH IF PSA MAPPING       @25A\n         SR    R11,R11                 CLEAR R11                   @14A\n         AHI   R4,6                    BUMP TO NEXT DSECT PREFIX   @15C\n         IC    R11,0(R4)               GET LENGTH OF DSECT PREFIX  @15C\n         EX    R11,MVDS                COPY DSECT PREFIX           @14A\n         AR    R1,R11                  R1 = END OF OPNDWK          @14A\n         J     BDXD300                 BRANCH IF PSA MAPPING       @25A\nBDXD150  L     R11,UDSCTAD             LOAD DSECT ADDRESS          @25A\n         MVC   0(8,R1),0(R11)          COPY DSECT NAME             @25A\n         AHI   R1,7                    NEXT DSECT TABLE ENTRY      @25A\nBDXD200  CLI   0(R1),C' '              FIND THE                    @25A\n         JNE   BDXD300                   LENGTH                    @25A\n         BCTR  R1,R0                       OF DSECT                @25A\n         J     BDXD200                                             @25A\nBDXD300  LTR   R10,R10                 INDEX REGISTER IS ZERO ?    @14A\n         JNZ   BDXINDXR          BRANCH IF INDEX REG IS NON ZERO   @14A\n         SR    R11,R11                                             @14A\n         IC    R11,BASERG              RESTORE BASE REGISTER       @14A\n         MVC   1(3,R1),S26             YES, DELIMITER  '(,R'       @14A\n         AHI   R1,2                    NEXT POSITION               @14A\n         CVD   R11,DBLWD               FORMAT BASE REGISTER        @14A\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK                      @14A\n         OI    DBLWD+1,C'0'            CLEAR SIGN                  @14A\n         CHI   R11,10                  LENGTH < 10                 @14A\n         JL    BDXG1                   BRANCH IF BASE REG > 10     @14A\n         J     BDXG2                   BRANCH IF BASE REG > 9      @14A\n*****************************************************************  @14A\n* NOT FIND IN DSECT TABLE                                          @14A\n*****************************************************************  @14A\nBDXD400  L     R11,BDR11               RESTORE BDDD                @28A\n         L     R15,BD15                RESTORE R15                 @29A\nBDXD450  LTR   R10,R10                 ANY INDEX REG\n         JNZ   BDXSCHL                 YES\n         SR    R0,R0                   CLEAR WORK REG\n         LR    R1,R11                  COPY BDDD ADDRESS\n         SLDL  R0,20                   BASE REG TO R0\n         LTR   R0,R0                   IS BASE REG 0\n         JNZ   BDXSCHL                 NO\n         CLI   TEXT,X'41'              IS IT LA\n         JE    BDXSCHL              YES THEN SKIP PUTTING COMMENT\n         CLI   TEXT,X'51'              IS IT LAE                  @14A\n         JE    BDXSCHL              YES THEN SKIP PUTTING COMMENT @14A\n         CLI   ICLASS,NPSA             NOT REFER PSA ?            @14A\n         JE    BDXSCHL                 YES                        @14A\n         CLI   COMMENT,C' '                                       @15A\n         JNE   BDXSCHL                                            @15A\n         MVC   COMMENT(9),S20          COMMENT REFER PSA\nBDXSCHL  JAS   R9,SCHLBL               GO SEARCH FOR LABEL\n         J     BDXGLBL                 BRANCH IF FOUND\n*  LABEL NOT FOUND\n         LA    R0,OPNDWK                                           @28A\n         LR    R1,R11                  COPY BDDD ADDRESS\n         SLL   R1,20                   SHIFT OUT BASE REG\n         SRL   R1,20                   RIGHT JUSTIFY DISPL\n         SRL   R11,12                  RT JUSTIFY BASE REG\n         CLI   ITYPE,SIY               SIY INSTRUCTION             @28A\n         JE    BDXD460                 BRANCH IF SIY INSTRUCTION   @28A\n         CLI   ITYPE,RXY               RXY INSTRUCTION             @28A\n         JNE   BDXD470                 BRANCH IF NOT RXY INSTR     @28A\nBDXD460  CLI   TEXT+4,X'FF'            NEGATIVE DISPLACEMENT       @28A\n         JE    BDXD465                 BRANCH IF YES               @28A\n         SR    R0,R0                   CLEAR R1 FOR IC INSTRUCTION @28A\n         IC    R0,TEXT+4               LOAD DISPLACEMENT HIGH      @28A\n         SLL   R0,12                                               @28A\n         AR    R1,R0                   DISPLACEMENT = DH + DL      @28A\n         LA    R0,OPNDWK                                           @28A\n         J     BDXD470                                             @28A\nBDXD465  AHI   R1,-4096                GET NEGATIVE DISPLACEMENT   @28A\n         LCR   R1,R1                   CHANGE TO POSITIVE VALUE    @28A\n         MVI   OPNDWK,C'-'                                         @28A\n         LA    R0,OPNDWK+1                                         @28A\nBDXD470  CVD   R1,DBLWD2               CONVERT\n         OI    DBLWD2+7,X'0F'          CLEAR SIGN\n         UNPK  DBLWD+2(6),DBLWD2+5(3)  UNPACK DISPLACEMENT         @28A\n         LR    R9,R0                   RESTORE                     @28A\n         CHI   R1,10000                DISPL < 10000               @28A\n         JL    BDXD480                 YES                         @28A\n         MVC   0(5,R9),DBLWD+3         MOVE 5-DIGIT DISPLACEMENT   @28A\n         LA    R1,5(,R9)               TO NEXT POS                 @28A\n         J     BDXLPN                  CONTINUE                    @28A\nBDXD480  CHI   R1,1000                 DISPL < 1000\n         JL    BDXD500                 YES\n         MVC   0(4,R9),DBLWD+4         MOVE 4-DIGIT DISPLACEMENT   @28C\n         LA    R1,4(,R9)               TO NEXT POS                 @28C\n         J     BDXLPN                  CONTINUE\nBDXD500  CHI   R1,100                  DISPL < 100\n         JL    BDXD600                 YES\n         MVC   0(3,R9),DBLWD+5         MOVE 3-DIGIT DISPLACEMENT   @28C\n         LA    R1,3(,R9)               TO NEXT POS                 @28C\n         J     BDXLPN                  CONTINUE\nBDXD600  CHI   R1,10                   DISPL < 10\n         JL    BDXD1                   YES\n         MVC   0(2,R9),DBLWD+6         MOVE 2-DIGIT DISPLACEMENT   @28C\n         LA    R1,2(,R9)               TO NEXT POS                 @28C\n         J     BDXLPN                  CONTINUE\nBDXD1    MVC   0(1,R9),DBLWD+7         MOVE 1-DIGIT DISPLACEMENT   @28C\n         LA    R1,1(,R9)               TO NEXT POS                 @28C\nBDXLPN   LTR   R10,R10                 ANY INDEX REG\n         JNZ   BDXLPNR                 YES\n         LTR   R11,R11                 ANY BASE REG\n         JNZ   PREPB                   YES\n         AHI   R1,-1                   NO, BACK UP TO RHE\n         J     BDXCE                   CONTINUE\nPREPB    MVC   0(3,R1),S26             MOVE DELIMETERS (,R)\n         AHI   R1,1                    STEP OVER 1 BYTE\n         J     BDXCBAS                 CONTINUE\n* FORMAT INDEX REGISTER\nBDXLPNR  MVC   0(2,R1),S25             MOVE DELIMIETERS (R\n         CVD   R10,DBLWD               CONVERT INDEX REG\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R10,10                  INDEX REG < 10\n         JL    BDXX1                   YES\n         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT INDEX REG\n         AHI   R1,4                    TO NEXT POSITION\n         J     BDXCMA                  CONTINUE\nBDXX1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT INDEX REGISTER\n         AHI   R1,3                    TO NEXT POSITION\nBDXCMA   TM    FLAG1,FLGPSA            BASE REGISTER = 0 ?         @18A\n         JO    BDXRPN                  BRANCH IF YES               @18A\n         SR    R11,R11                 CLEAR R11                   @18A\n         IC    R11,TEXT+2              PICK UP BASE REGISTER       @18A\n         SRL   R11,4                   GET RID OF LAST 4 BITS      @18A\n         MVC   0(2,R1),SCOMMAR         DELIMITERS ',R'\n* FORMAT BASE REGISTER\nBDXCBAS  CVD   R11,DBLWD               CONVERT\n         OI    DBLWD+7,X'0F'           CLEAR SIGN\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         CHI   R11,10                  BASE REGISTERS < 10\n         JL    BDXB1                   YES\n         MVC   2(2,R1),DBLWD           MOVE 2-DIGIT BASE REGISTERS\n         AHI   R1,4                    TO NEXT POSITION\n         J     BDXRPN                  CONTINUE\nBDXB1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT BASE REG\n         AHI   R1,3                    TO NEXT POS\nBDXRPN   MVI   0(R1),C')'              FINAL DELIMITER             @17C\nBDXCE    LR    R10,R1                  COPY END ADDR\n         S     R10,OWSTRT              COMPUTE LENGTH CODE\n         L     R9,BDX9                 GET RETURN ADDR\n         BR    R9             ***      EXIT\n*** LABEL IS FOUND *******\n         USING DSECTD,R12                                          @19C\nBDXGLBL  CLI   DSLBTYP,C'D'            DSECT ENTRY ?               @19A\n         JNE   BDXGLBL2                BRANCH IF NO                @19A\n         CLI   COMMENT,C' '  ***DEBUG                              @19A\n         JNE   BDXGLBL2      ***DEBUG                              @19A\n         MVC   COMMENT(L'DSCOMMT),DSCOMMT  COPY DSECT DESCRIPTION  @19A\n         USING LABELD,R12                                          @25A\nBDXGLBL2 MVC   TXTOFSTC,LBLADR         SAVE REFRENCE OFFSET        @23A\n         CLI   ICLASS,LIOP             LIOP OP CODE ?              @22A\n         JNE   BDXGLBL9                BRANCH IF NOT LOAD OP       @22A\n         CLC   LBLADR,LABELL(R12)                                  @25C\n         JNE   BDXGLBL9                BRANCH IF NOT EQUAL         @22A\n         CLI   LBLLEN,4                                            @28A\n         JE    BDXGLBL4                BRANCH IF YES               @28A\n         CLI   LBLLEN,8                                            @28A\n         JNE   BDXGLBL9                BRANCH IF LBLLEN NOT = 8    @28A\nBDXGLBL8 MVC   COMMENT(3),S_ADBRC      ASSUME AD-TYPE ADDRESS      @28A\n         MVC   COMMENT+3(L'LBLNAME),LBLNAME-LABELD+LABELL(R12)     @28A\n         CLI   COMMENT+3,C'A'                                      @28A\n         JE    BDXGLBL7                                            @28A\n         MVC   COMMENT+11(4),CLOSEBK   EXTR AD LABLE CLOSE BRACKET @31C\n         J     BDXGLBL9                                            @28A\nBDXGLBL7 MVC   COMMENT+10(4),CLOSEBK   LOCAL AD LABLE CLOSE BRACKET@31C\n         J     BDXGLBL9                                            @28A\nBDXGLBL4 MVC   COMMENT(2),S_VBRC       ASSUME V-TYPE ADDRESS       @22A\n         MVC   COMMENT+2(L'LBLNAME),LBLNAME-LABELD+LABELL(R12)     @25C\n*                                COPY LABEL NAME TO COMMENT FIELD  @22A\n         CLC   S_A0,LBLNAME-LABELD+LABELL(R12)  A-TYPE address ?   @25C\n         JE    BDXGLBL5                Branch if yes               @22A\n         MVI   COMMENT+10,C')'         V or W-TYPE address         @22A\n         J     BDXGLBL6                                            @22A\nBDXGLBL5 MVI   COMMENT,C'A'            A-TYPE address              @22A\n         MVI   COMMENT+9,C')'                                      @22A\n         J     BDXGLBL9                                            @23A\nSYSMODTB DC    CL8'IEACVT  ',CL5'@CVT '                            @23A\n         DC    CL8'IEAMASCB',CL5'@ASCB'                            @23A\n         DC    CL8'IEAVESLA',CL5'@SLA '                            @23A\n         DC    CL8'IEAVETVT',CL5'@TRVT'                            @23A\n         DC    CL8'IEAVFACL',CL5'@FACL'                            @23A\n         DC    CL8'IEAVGSDA',CL5'@GSDA'                            @23A\n         DC    CL8'IOSVADIH',CL5'@ADIH'                            @23A\n         DC    CL8'IOSVSSRB',CL5'@SSRB'                            @23A\n         DC    X'FFFF'                                             @23A\nBDXGLBL6 LARL  R14,SYSMODTB            SEARCH SYSMODTB FOR V-TYPE  @23A\n** LOOP SEARCH SYSMOD TABLE TO FIND THE DSECT NAME                 @23A\nBDXGSMOD CLI   0(R14),X'FF'            END OF SYSMODTB TABLE ?     @23A\n         JE    BDXGLBL9                BRANCH IF YES               @23A\n         CLC   COMMENT+2(8),0(R14)     COMPARE MODULE NAME         @23A\n         JNE   BDXGNMOD                BRANCH IF NOT MATCH         @23A\n         MVC   COMMENT(5),8(R14)       COPY DSECT NAME TO COMMENT  @23A\n         MVC   COMMENT+5(8),BLANX      CLEAR GARBAGE               @23A\n         J     BDXGLBL9                JUMP                        @23A\nBDXGNMOD AHI   R14,13                  NEXT SYSMOD TABLE ENTRY     @23A\n         J     BDXGSMOD                JUMP                        @23A\nBDXGLBL9 MVC   OPNDWK(L'LBLNAME),LBLNAME   GET LABEL NAME          @22C\n         LA    R1,OPNDWK+L'LBLNAME-1   @ LAST POSSILE CHARACTER    @25A\nBDXFLPST CLI   0(R1),C' '              LAST CHARACTER ?            @25A\n         JNE   BDXLPOST                JUMP IF YES                 @25A\n         BCTR  R1,0                    TRY PREVIOUS CHARACTER      @25A\n         J     BDXFLPST                LOOP                        @25A\nBDXLPOST CLI   COMMENT,C' '            EMPTY COMMENT ?             @22A\n         JNE   BDXGRHE                 JUMP FOR NON BLANK COMMENT  @22A\n         CLI   LBLTYP,C'D'             DSECT LABEL ?               @29A\n         JE    BDXGRHE                 BRANCH IF YES               @29A\n         SR    R14,R14                 CLEAR R14                   @22A\n         ICM   R14,7,LBLADR            GET OFFSET ADDRESS          @22A\n         A     R14,TXTSTRT             R14 -> ACTUAL LABEL OFFSET  @22A\n         MVC   COMMENT(1),0(R14)       COMMENT = CURRENT DATA      @22A\n         SR    R12,R12                 CLEAR FOR IC INSTR          @28A\n         IC    R12,IOLNG               LOAD OPERAND LENGTH         @28A\n         LTR   R12,R12                 TEST OPERAND LENGTH         @28A\n         JZ    BDXGRHE                 BRANCH IF ZERO OPERAND LEN  @29C\n         BCTR  R12,0                   MINUS 1 FOR MVC             @28A\n         EX    R12,MVLCOM              MVC   COMMENT(4),0(R14)     @28A\n         MVC   TMPSTR(4),4(R14)                                    @29A\n         TRT   0(4,R14),CHARTRAN       TEST CURRENT DATA           @22A\n         JZ    BDXGRHE                 BRANCH IF CHARACTER         @22A\n         LR    R12,R14                 FORMAT OPERAND              @22A\n         JAS   R9,HEXPRT4                     INTO HEXIDECIMAL     @22A\n         LA    R12,COMMENT                                         @22A\nBDXGLBLA MVC   0(2,R12),SXAPO          COPY OPENING QUOTE          @22A\n         MVC   2(2,R12),PRTABL         COPY HEXI STRING            @22A\n         MVI   4(R12),C''''            ENDING QUOTE                @22A\n         SR    R9,R9                   CLEAR FOR IC INSTRUCTION    @29A\n         IC    R9,IOLNG                LOAD OPERAND LENGTH         @29A\n         SLL   R9,1                    TIMES 2                     @29A\n         EX    R9,MVHX2                MVC   2(1,R12),PRTABL       @29A\n         CHI   R9,16                   8 BYTES OPERAND ?           @29A\n         JNE   BDXGLBLC                BRANCH IF NOT               @29A\n         LR    R0,R9                   SAVE R9                     @29A\n         LR    R14,R12                 SAVE R12                    @29A\n         LA    R12,TMPSTR              FORMAT OPERAND+4 INTO       @29A\n         JAS   R9,HEXPRT4                  8 BYTES HEXIDECIMAL     @29A\n         LR    R9,R0                   RESTORE R9                  @29A\n         LR    R12,R14                 RESTORE R12                 @29A\n         MVC   10(8,R12),PRTABL        COPY FORMATTED OPERAND      @29A\nBDXGLBLC LA    R12,2(R9,R12)           POSITIION TO END OF STRING  @29A\n         MVI   0(R12),C''''            ENDING QUOTE                @29C\n         CLI   TEXT,X'43'              IC OPCODE ?                 @22A\n         JE    BDXGRHE                 BRANCH IF YES               @22A\n         CLI   TEXT,X'44'              EX OPCODE ?                 @23A\n         JNE   BDXGRHE                 BRANCH IF YES               @23A\nBDXGRHD  LA    R12,4(R14)              FORMAT OPERAND              @23A\n         JAS   R9,HEXPRT2                     INTO HEXIDECIMAL     @23A\n         LA    R12,COMMENT+10                                      @23A\n         MVC   0(4,R12),PRTABL         COPY HEXI STRING            @23A\n         MVI   4(R12),C''''            ENDING QUOTE                @23A\n         LA    R1,OPNDWK+11            @LAST POSSIBLE CHARACTER    @23A\n         J     BDXGRHS                                             @23A\nBDXGRHE  LA    R1,OPNDWK+L'DSLNAME-1   @LAST POSSIBLE CHARACTER    @23C\nBDXGRHS  CLI   0(R1),C' '              POSITION TO LAST            @23C\n         JNE   BDXGCKLN                   NON BLANK\n         JCT   R1,BDXGRHS              LOOP TO BDXGRHE             @23C\nBDXGCKLN LTR   R10,R10                 ANY INDEX REGISTER\n         JZ    BDXGCMP                 NO\n* FORMAT INDEX REGISTER\nBDXINDXR MVC   1(2,R1),S25             MOVE DELIMIETERS (R\n         CVD   R10,DBLWD               CONVERT LENGTH\n         UNPK  DBLWD(2),DBLWD+6(2)     UNPACK\n         OI    DBLWD+1,C'0'            CLEAR SIGN\n         CHI   R10,10                  LENGTH < 10\n         JL    BDXG1I                  YES                         @14A\n         MVC   3(2,R1),DBLWD           MOVE 2-DIGIT LENGTH         @14A\n         AHI   R1,5                    TO NEXT POS                 @14A\n         J     BDXBGT                  CONTINUE                    @18A\nBDXG2    MVC   2(2,R1),DBLWD           MOVE 2-DIGIT LENGTH\n         AHI   R1,4                    TO NEXT POS                 @18A\n         J     BDXGRPN                 CONTINUE                    @18A\nBDXG1    MVC   2(1,R1),DBLWD+1         MOVE 1-DIGIT LENGTH\n         AHI   R1,3                    TO NEXT POS\n         J     BDXGRPN\nBDXPSA   BCTR  R1,R0                   MINUS 1                     @16A\n         J     BDXGCMP                                             @16A\nBDXG1I   MVC   3(1,R1),DBLWD+1         MOVE 1-DIGIT LENGTH         @14A\n         AHI   R1,4                    TO NEXT POS                 @14A\nBDXBGT   TM    FLAG1,FLGPSA            NON-ZERO BASE REGISTER?     @18A\n         JNO   BDXCMA           BRANCH IF BASE REGISTER EXIST      @18A\nBDXGRPN  MVI   0(R1),C')'              FINAL DELIMITER\nBDXGCMP  LR    R10,R1                  COPY END ADDRESS\n         S     R10,OWSTRT              COMPUTE OPERAND LENGTH\n         L     R12,SLSAV+12            RESTORE R12\n         L     R9,BDX9                 GET RETURN ADDR\n         BR    R9                      EXIT\n******************************************************************\n* SEARCHES THE BASE REGISTER TABLE TO FIND THE BASE REGISTER     *\n* ASSOCIATED WITH THE BDDD OPERAND ADDRESS PASSED IN REG11 ON    *\n* ENTRY.                                                         *\n* IF THE BASE REGISTER GIVEN IS NOT A CURRENT BASE REGISTER      *\n* THE UNSUCCESSFUL RETURN IS MADE TO 4 BYTES PAST THE ADDRESS    *\n* IN REG 9 ON ENTRY. WHEN THE CURRENT BASE REGISTER ENTRY IS FOR *\n* A PROGRAM BASE REG, THE DISPLACEMENT IS ADDED TO THE ASSUMED   *\n* BASE REGISTER VALUE IS ADDED TO THE DISPLACEMENT TO GIVE AN    *\n* OFFSET IN THE PROGRAM. THE LABEL TABLE IS SEARCHED FOR AN ENTRY*\n* WITH THIS OFFSET, AND IF FOUND, IS RETURNED TO THE CALLER. WHEN*\n* THE BASE REGISTER FOUND IS FOR A DSECT, THE DSECT HEADER ENTRY *\n* ADDRESS IS GIVEN IN THE BASE TABLE ENTRY. THE DSECT HEADER HAS *\n* THE ADDRESS OF THE FIELD DEFINITION TABLE FOR THE DSECT. THE   *\n* FIELD DEFINITION TABLE IS SEARCHED FOR AN ENTRY HAVING THE     *\n* DISPLACEMENT IN THE BDDD INSTRUCTION, AND IF FOUND IS PASSED   *\n* BACK TO THE CALLER. IF THE LABEL/FIELD TABLE SEARCHES ARE      *\n* UNSUCCESSFUL, RETURN IS TO 4 BYTES PAST REG 9.                 *\n* INPUT : R11 -> BDDD                                            *\n*         TEXT+4 DH (SIY & RXY)                                  *\n* OUTPUT: R12 -> ADDRESS OF THE LABEL                            *\n******************************************************************\n*\n         USING DSECTD,R12\nSCHLBL   DS    0H              ** SEARCH FOR LABEL AT BDDD ADDRESS\n         STM   R9,R12,SLSAV      YES, SAVE REGS USED\n         LA    R1,4(R9)          R1 = R9 + 4                       @14A\n         TM    MORUSG,X'80'      ANY BASES ACTIVE\n         BZR   R1                NO, UNSUCCESSFUL EXIT\n         LR    R12,R11           COPY BDDD ADDRESS\n         SRL   R12,12            CLEAR DISPLACEMENT (BASE REG ONLY)\n         LTR   R12,R12           BASE REG = 0 ?                    @31A\n         JNZ   BASERNZ           BRANCH IF BASE REG IS NOT ZERO    @31A\n         SR    R12,R12           CLEAR R12 FOR IC INSTRUCTION      @31A\n         IC    R12,TEXT+1        LOAD INDEX REGISTER               @31A\n         NILL  R12,X'000F'       GET INDEX REGISTER                @31A\nBASERNZ  MHI   R12,USINGL        BASE or INDEX x BASE TBL ENTRY LENGTH\n         LA    R0,BASES          R0  -> 1st BASE TABLE ENTRY       @23C\n         AR    R12,R0            R12 -> Rxx BASE TABLE ENTRY       @23C\n         USING USINGD,R12\n         CLI   USTYPE,0                ENTRY IN USE ??\n         JE    SCHNF                   EXIT IF NOT IN USE\n         LR    R9,R11                  COPY BDDD ADDRESS\n         SLL   R9,20                   SHIFT OUT BASE\n         SRL   R9,20                   RIGHT JUSTIFY DDD\n         CLI   ITYPE,SIY               SIY OP CODE ??              @28A\n         JE    GETDH                   BRANCH IF SIY OP CODE       @28A\n         CLI   ITYPE,RXY               RXY OP CODE ??              @28A\n         JNE   GETDL                   BRANCH IF NOT TRUE          @28A\nGETDH    CLI   TEXT+4,X'07'            DH > 07 ??                  @28A\n         JH    CKLLTBL                 BRANCH IF OUT OF RANGE      @28A\n         SR    R0,R0                   CLEAR FOR IC INSTRUCTION    @28A\n         IC    R0,TEXT+4               GET DH                      @28A\n         SLL   R0,12                                               @28A\n         AR    R9,R0                   R9 = DH + DL                @28A\nGETDL    ICM   R11,7,USVALU            GET BASE REG VALUE\n         LA    R11,0(R11)              CLEAR HI-ORDER\n         CLI   USTYPE,C'P'             PROGRAM BASE REG\n         JE    PGMBASE                 YES\n         CLI   USTYPE,C'G'             GLOBAL MAPPING DSECT        @25A\n         JE    SCHNF                   YES                         @25A\n         DROP  R12\n         LR    R12,R11                 R12 = DSECT FIELD TABLE ADDRESS\n         USING DSECTD,R12              @ LABEL TABLE\n* SEARCH USER DEFINED DSECT\nCKDSCTND CLM   R9,7,DSOFSET            THIS IS THE ENTRY\n         JE    SCHFD                   YES\n         CLC   DSOFSET,HIVAL           NO, AT TABLE END\n         JE    SCHNF                   YES, NO LABEL FOUND\n         AHI   R12,DSECTL              STEP TO NEXT DSECT ENTRY\n         J     CKDSCTND                LOOP THRU DSECT FIELDS\nPGMBASE  AR    R9,R11                  COMPUTE OFFSET BDDD\n         DROP  R12\nCKLLTBL  L     R12,LBLTBL              @ LABEL TABLE\n         USING LABELD,R12\nCKENTFD  CLM   R9,7,LBLADR             THIS IS THE ENTRY ?\n         JE    SCHFD                   YES\n         AHI   R12,LABELL              TO NEXT ENTRY               @25C\n         C     R12,CURRLBL             END OF TBL ?\n         JNL   SCHNF                   YES, NO LABEL\n         J     CKENTFD                 NO, CONTINUE SEARCH\nSCHNF    LM    R9,R12,SLSAV            NOT FOUND, RESTORE REGS\n         AHI   R9,4                    ADD 4 TO RETURN ADDRESS     @12A\n         BR    R9                      NOT FOUND RETURN            @12A\nSCHFD    LM    R9,R11,SLSAV            FOUND RESTORE ALL BUT 12\n         BR    R9                      FOUND RETURN\n         DROP  R12\n******************************************************************\n*                                                                *\n* PRINT REGISTER USAGE REPORT                                    *\n*                                                                *\n******************************************************************\nPRTREGS  DS    0H                                                  @23A\n         BAKR  R14,0                   SAVE REGISTERS              @23A\n         L     R1,REGUSDCB             @ REGUSE  DCB               @23A\n         TM    48(R1),X'10'            IS REGUSE OPEN              @23A\n         JNO   REGQUIT                 NO                          @23A\n         LA    R4,DSREGTBL             LOCATE DSECT TABLE          @23A\n         LA    R6,4                                                @22A\n         MVC   PRTLINE+9(7),1(R15)                                 @23A\n         LA    R12,TXTOFST                                         @23A\n         JAS   R9,HEXPRT4                                          @23A\n         MVC   PRTLINE+1(6),PRTABL+2                               @23A\n         MVC   PRTLINE+74(L'MNEMONIC),MNEMONIC                     @23A\nNEWLN1   LA    R11,4                                               @23A\n         LA    R8,PRTLINE+20                                       @23A\n         L     R1,REGUSDCB             @ REGUSE  DCB               @23A\nFILLDSC  MVC   0(11,R8),0(R4)          COPY Rxx-Ryy                @23A\n         AHI   R4,DSREGEL              Next DSECT entry            @23A\n         AHI   R8,DSREGEL              Next output entry           @23A\n         JCT   R11,FILLDSC             Loop for 4 times            @23A\n         PUT   (1),PRTLINE             Write                       @23A\n         MVI   PRTLINE,C' '            Clear output PRTLINE        @23A\n         MVC   PRTLINE+1(90),PRTLINE                               @23A\n         JCT   R6,NEWLN1               Loop for 4 times            @22A\nREGQUIT  PR                                                        @23A\n******************************************************************\n*                                                                *\n* PRINT A LINE USING THE SYSPRINT DCB DEFINED IN HDISASM PHASE 0.*\n*                                                                *\n******************************************************************\n*\nPRINT    DS    0H                      PRINT ROUTINE\n         L     R1,PRINTDCB             @ SYSPRINT DCB\n         TM    48(R1),X'10'            IS SYSPRINT OPEN\n         JNO   CLRPRT                  NO\n         PUT   (1),PRTLINE             WRITE PRINT LINE\nCLRPRT   MVI   PRT,C' '                CLEAR PRINT LINE\n         MVC   PRT+1(L'PRT-1),PRT\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C' '                SINGLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'0'                DOUBLE SPACED\n         JE    SETSGL                  YES\n         AP    LINECT,P1               INCR LINE COUNTER\n         CLI   PCC,C'-'                TRIPLE SPACED\n         JE    SETSGL                  YES\n         ZAP   LINECT,P0               NO, MUST BE NEW PAGE\nSETSGL   MVI   PCC,C' '                SET SINGLE SPACING\n         CP    LINECT,P58              PAST END OF PAGE\n         JH    NEWPAGE                 YES\n         BR    R9                      EXIT\nNEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF\n         ZAP   LINECT,P0               RESET LINE COUNTER\n         BR    R9                      EXIT\n******************************************************************\n*                                                                *\n* CONVERT HEX DATA TO PRINTABLE FORM: 2 CHARACTERS PER BYTE. ON  *\n* ENTRY, REG 12 CONTAINS THE ADDRESS OF THE LEFT END OF THE FIELD*\n* TO BE CONVERTED, AND THE ENTRY POINT USED DETERMINES THE LENGTH*\n* FORMATTED OUTPUT IS PLACED IN THE PRTABL FIELD.                *\n* INPUT : R12  (ADDRESS OF INPUT HEX STRING)                     *\n* OUTPUT: PRTABL                                                 *\n******************************************************************\n*\nHEXPRT   DS    0H                      HEX TO PRINTABLE ROUTINE\nHEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX\n         J     HEXCLTR                 CONTINUE\nHEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX\nHEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE\n         TR    PRTABL(8),TRTBL         MAKE PRINTABLE\n         BR    R9                      EXIT\n******************************************************************\n*                                                                *\n* FORMATS THE HEX DATA CORRESPONDING TO THE FORMATTED INSTRUCTION*\n* BEING OUTPUT. PRINTABLE HEX IS PLACED AT THE RIGHT OF THE LINE *\n* ON THE SYSPRINT OUTPUT.                                        *\n* INPUT  TEXT                                                    *\n*        LEN   LENGTH OF THE STRING                              *\n******************************************************************\nTXTFMT   EQU   *                       *** FORMAT TEXT FOR PRINT ***\n         ST    R9,TX9                  SAVE RETURN ADDR\n         LA    R11,PRT                 @ PRINT LINE\n         MVI   PRT,C' '\n         MVC   PRT+1(24),PRT\n         CLI   TYPE,1                  ADCON\n         JE    TFOFST                  YES\n         CLI   TYPE,2                  CONSTANT\n         JE    TFOFST                  YES\n         CLI   TYPE,X'0D'              INSTRUCTION\n         JNE   TXTCLEAN                NO\nTFOFST   LA    R12,OFFSET              @ OFFSET TO INSTR\n         JAS   R9,HEXPRT3              CONVERT TO PRINTABLE\n         MVC   PRT(6),PRTABL           OFFSET TO PRINT             @14A\n         TM    FLAG1,FLGHEX4           HEX4 IS ON                  @15A\n         JNO   TXT0                                                @15A\n         LR    R12,R7                                              @15A\n         SH    R12,CONLEN                                          @15A\n         J     TXTH                                                @15A\nTXT0     LA    R12,TEXT                @ TEXT TO PRINT             @15C\nTXTH     JAS   R9,HEXPRT4              CONVERT 1ST 4 BYTES         @15C\n         CLI   LEN,4                   IS IT 4 BYTES\n         JNL   TXT4                    YES, OR MORE\n         CLI   LEN,3                   IS IT 3 BYTES\n         JE    TXT3                    YES\n         CLI   LEN,2                   IS IT 2 BYTES\n         JE    TXT2                    YES\n         MVC   PRT+7(2),PRTABL         TEXT TO PRINT               @14A\n         J     TXTCLEAN                FINISH                      @14A\nTXT2     MVC   PRT+7(4),PRTABL         TEXT TO PRINT               @14A\n         J     TXTCLEAN                FINISH                      @14A\nTXT3     MVC   PRT+7(6),PRTABL         TEXT TO PRINT               @14A\n         J     TXTCLEAN                FINISH                      @14A\nTXT4     MVC   PRT+7(8),PRTABL         TEXT TO PRINT               @14A\n         CLI   LEN,4                   IS IT 4 BYTES\n         JE    TXTCLEAN                YES, FINISH\n         LA    R12,TEXT+4              @ TEXT\n         JAS   R9,HEXPRT4              CONVERT\n         CLI   LEN,8                   8 BYTES OF TEXT\n         JE    TXT8                    YES\n         CLI   LEN,7                   7 BYTES OF TEXT\n         JE    TXT7                    YES\n         CLI   LEN,6                   6 BYTES OF TEXT\n         JE    TXT6                    YES\n         MVC   PRT+11(2),PRTABL        TEXT TO PRINT               @14A\n         CLI   LEN,5\n         JE    TXTCLEAN                FINISH\n         J     TXT8\nTXT6     MVC   PRT+15(4),PRTABL        TEXT TO PRINT               @14A\n         J     TXTCLEAN                FINISH                      @14A\nTXT7     MVC   PRT+15(6),PRTABL        TEXT TO PRINT               @14A\n         J     TXTCLEAN                FINISH                      @14A\nTXT8     MVC   PRT+15(8),PRTABL        TEXT TO PRINT               @14A\nTXTCLEAN XC    OFFSET,OFFSET           CLEAR\n         L     R9,TX9                  GET RETURN ADDR\n         BR    R9                      EXIT\n******************************************************************\n*                                                                *\n* END OF PHASE 2 - RETURN TO PHASE 0                             *\n*                                                                *\n******************************************************************\nEOJ      JAS   R9,FORCONST             YES, FORCE IT OUT\n         PR\n         CNOP  0,4                                                 @23A\n*DATA2AD DS    V(DATADS)               @ DATA NAME TABLE           @14A\n*SFTAD   DC    V(SFTCS)                @ SYSTEM FUNCTION TABLE     @15A\n         DC    CL24'HDISASM2 VARIABLES ==>  '   EYE CATCHER        @14A\nDATASTR2 DC    A(HDISASM2)             @ EPA of HDISASM2           @14A\nWRITEOUT DC    V(WRITEOUT)             @ WRITE SYSPRINT            @29A\nSRCHDSCT DC    V(SRCHDSCT)             @ Search DSECT              @30A\nBITMAP   DC    V(BITMAP)               @ Search BIT Map            @29A\nCCODEAD  DC    V(CCODECS)              @ CONDITION CODE TANLE      @21A\nSVCTBLAD DC    V(SVCOPV)               @ SVC TABLE                 @13A\nSGLOPAD  DC    V(SGLOPV)               @ ONE-BYTE OP-CODE TBL      @13A\nDBLOPAD  DC    V(DBLOPV)               @ TWO-BYTE OP-CODE TBL      @13A\nL3LOPAD  DC    V(L3LOPV)               @ RX AND RL OP-CODE TBL     @13A\nL4LOPAD  DC    V(L4LOPV)               @ RXY OP-CODE TBL           @13A\nMCD      MVC   CONDATA(1),0(R7)\nFMCON    MVC   TEXT(1),CONDATA         DATA TO RECORD\nFMCNT    MVC   2(1,R14),CONDATA        DATA TO OPERAND             @25C\nMVHX     MVC   2(1,R14),PRTABL         HEX CHARS TO OPERAND        @26C\nMVHX2    MVC   2(1,R12),PRTABL         HEX CHARS TO OPERAND        @26C\nLINE2MVC MVC   OPNDS(1),0(R15)         MOVE RX OPERAND             @16A\nBDXMVC   MVC   1(1,R15),OPNDWK         MOVE RX OPERAND\nSOPMVC   MVC   OPNDS(1),OPNDWK         MOVE OPERAND\nMVDS     MVC   0(1,R1),1(R4)           COPY DSECT                  @14A\nMVLCOM   MVC   COMMENT(1),0(R14)                                   @28A\nIFRRS    DC    XL8'41E00B8041500020'   PSASTAK !FRRS               @23A\nX_A7F4   DC    XL2'A7F4'                                           @29C\nX_DF80   DC    XL2'DF80'                                           @29C\nX_1FF0   DC    XL2'1FF0'                                           @29A\nX_0FFF   DC    XL2'0FFF'                                           @29A\nISAM64   DC    XL2'010E'               SAM64                       @13A\nILTR15   DC    XL2'12FF'               LTR  R15,R15                @15A\nIPC      DC    XL2'B218'               PROGRAMM CALL OP CODE       @13A\nIBR14    DC    XL2'07FE'               EXIT                        @27A\nIBAKR    DC    XL4'B24000E0'           BAKR R14,0   OP CODE        @13A\nIAHIR0   DC    X'A70A0010'             AHI R0,16                   @29A\nUNIDEN   DC    X'A70A0010'             AHI R0,16                   @29A\nICPYA    DC    XL2'B24D'               CPYA                        @13A\nITPROT   DC    XL2'E501'               TEST PROTECT                @15A\nITBEGINC DC    XL2'E561'               TBEGINC OP CODE             @20A\nX1814    DC    X'1814'\nXACFC    DC    X'ACFC'                 STNSM DIS I/O EXT INT       @20A\nXAD03    DC    X'AD03'                 STOSM ENA I/O EXT INT       @20A\nXA7F4    DC    X'A7F4'                 J instruction               @29A\nXMODID   DC    X'16C9'                 MODULE ID                   @20A\nX_FFFF   DC    X'FFFF'                                             @30A\nX_4000   DC    X'40000000'                                         @30A\nX_7FFF   DC    X'7FFFFFFF'                                         @28A\n*\nAOFST    DC    F'0'          ** DEBUG ** ACTUAL DEBUGGING OFFSET   @28A\n*XOFST   DC    XL3'000C80'   ** DEBUG ** RELATIVE OFFSET\n*                                      x'80'    HEX4               @15A\n*                                      x'40'    BASE REG IS 0      @15A\n*                                      x'20'    INDEX REG IS 0     @15A\nTEMP1    DC    X'00'\nS_A0     DC    C'A0'                                               @22A\nSL1      DC    C'L1'\nSL2      DC    C'L2'\nSL3      DC    C'L3'\nP0       DC    P'0'                    CONSTANT 0\nP1       DC    P'1'                    CONSTANT 1\nP10      DC    P'10'                   CONSTANT 10\nP58      DC    P'58'                   CONSTANT 58\nS01      DC    C'Address set'\nS02      DC    C'Branch and set Amode'\nS03      DC    C'Return and set Amode'\nS04      DC    C'Nonstd '               7\nS05      DC    C'Linkage'               7\nS06      DC    C'Perform    '\nS07      DC    C'Parm set branch'\nS08      DC    C'Compare'\nS09      DC    C'Test return code'\nS10      DC    C'PC'\nS11      DC    C'Restore registers'\nS12      DC    C'Save registers'\nS12A     DC    C'Save access registers'\nS13      DC    C'XMS instr'\nS14      DC    C'SSE instr'\nS15      DC    C'Prefetch data'                                    @29A\nSJLNOP   DC    CL6'JLNOP '                                         @20A\nSJNOP    DC    C'J'\nSNOP     DC    CL5'NOP'                                            @20A\nS17      DC    C'Undocument OP code'\nS18      DC    C'Return'\nS19      DC    C'Exit  '\nS20      DC    C'         '\nS21      DC    C'SPKA'\nS23      DC    C'Set PSW key '\nS23A     DC    C'to 0'\nS23B     DC    C'to 1'\nS23C     DC    C'to 5'\nS25      DC    C'(R0)'\nS26      DC    C'(,R'\nS27      DC    C'Decrement REG by 1'                               @13A\nS28      DC    C'Copy data'                                        @13A\nS29B     DC    C'Extract Stack Register'                           @24A\nS30      DC    C'Call Sub-Routine'                                 @13A\n*S31     DC    C'RL jump instruction'                              @13A\nS32      DC    C'Loop until REG = 0'                               @21A\nS34      DC    C'Trace system routine'                             @14A\nS37      DC    C'Signal processor'                                 @15A\nS38      DC    C'Invalid address ?'                                @15A\nS39      DC    C'C '                                               @17A\nS40      DC    C'Update P/SASN'                                    @22A\nS14Q     DC    14C'?'\nSX16     DC    C'16'''                                             @20A\nSC004    DC    C'000004'                                           @20A\nS_EQU    DC    CL6'EQU'                                            @22C\nS_VBRC   DC    C'V('                                               @22A\nS_ADBRC  DC    C'AD('                                              @28A\nS_AL3    DC    C'AL3'                                              @13A\nS_LM     DC    C'LM'                                               @23A\nS_PFD    DC    C'PFD'                                              @29A\nS_EREG   DC    C'EREG'                                             @26A\nS_LARL   DC    CL5'LARL '                                          @15A\nS_CLEAR  DC    C'CLEAR'                           CLEAR DSECT      @30A\nS_DUMMY  DC    C'DUMMY'                           DUMMY DSECT      @24A\nCLOSEBK  DC    C')   '                                             @31A\nSCOMMAR  DC    C',R'\nSCOMMARF DC    C',FR'                                              @29A\nSBRANCH  DC    C'Jump if '                                         @13A\nSCLREG   DC    C'Clear '                                           @17A\nSSAM64   DC    C'64 bit Addressing Mode'                           @13A\nSDISIE   DC    C'Disable I/O and EXT interrupt'                    @20A\nSENAIE   DC    C'Enable I/O and EXT interrupt'                     @20A\nSTBEGINC DC    C'Constrained Transaction Begin'                    @24A\nSNOTCC0  DC    C'Branch if not cc 0'                               @20A\nSCC0     DC    C'Branch if cc 0'                                   @20A\nSFRRS    DC    C'!FRRS PSASTAK Normal Stk'                         @23A\nS_DROP   DC    C'DROP'\nS_LASP   DC    C'LASP'                                             @22A\nS_PLO    DC    C'PLO'                                              @29A\nSCODERG  DC    C'Data Register ??'                                 @13A\nTMPSTR   DC    CL8' '                  For 8 bytes hexi conversion @29A\nSF00     DC    C'F''0'''\nSH00     DC    C'H''0'''\nSFAPO    DC    C'F'''\nSHAPO    DC    C'H'''\nSCAPO    DC    C'C'''\nHIGHBITO DC    C'+X''80000000'''            HIGH ORDER BIT IS ON   @13A\n         DC    32X'FF'        *** DEBUG ***\nDBLWD2   DC    2D'0'\n         DC    32X'FF'        *** DEBUG ***\nF50000   DC    F'50000'                                            @26C\n*\nUSG12    DS    2F                      REG SAVE AREA\nEQU9     DS    F                       RETURN ADDR FOR EQUSTMT\nFC6      DS    F                       SAVE AREA FOR R6\nFC9      DS    F                       FORCONST RETURN ADDR\nTX9      DS    F                       RETURN ADDR FOR TXTFMT\nBD9      DS    F                       RETURN FOR BDADR\nBDX9     DS    F                       RETURN FOR BDXADR R9\nBDL9     DS    F                       RETURN FOR BDLADR\nBD11     DS    F                       SAVE FOR R11\nBDR11    DS    F                       SAVE FOR R11                @28A\nBDX15    DS    F                       SAVE FOR R15                @29A\nFORRG9   DS    F                       RETURN FOR FORRG            @12A\nSLSAV    DS    4F                      SAVE FOR SCHLBL\nILENG    DC    H'0'                    INSTRUCTION LENGTH  FIX***\nSAVLEN   DC    H'0'                    CONLEN                      @12A\nCODPROG  DC    X'00'                   CODE     IN PROGRESS INDIC  @15A\nCONPROG  DC    X'00'                   CONSTANT IN PROGRESS INDIC\nCONPSLBL DS    0CL14                   PSEUDO LABEL ENTRY FOR CONSTANTS\n         DS    XL4\nCONNAME  DS    CL12                    CONSTANT NAME               @24C\nCONLLEN  DS    XL1                     LABEL LENGTH\nCONTYPE  DS    CL1                     TYPE C, V OR X\n         DS    0H\nCONDATA  DS    XL48                    CONSTANT DATA 48 BYTES      @15C\nMAXLEN   EQU   48                      MAX LENGTH OF TEXT          @15A\nCONSYM   DS    CL8                     CONSTANT SYMBOL\nCONLEN   DS    H                       CONSTANT LENGTH\nCONOFST  DS    F                       RELATIVE OFFSET TO CONSTANT\nCONLOC   DS    F                       @CURRENT BYTE IN CONSTANT\nCCTYPE   DC    X'00'                   CC SET TYPE OF INSTR SETTING\n*XTOFST  DS    0F\n*        DS    X\n*XTOFSET DS    XL3                     OFFSET TO TEXT BYTE\nTXTOFSTR DS    0F\n         DS    X\nTXTOFSTC DS    XL3                     CURRENT REFERENCE OFFSET\nOFFSET   DS    XL3                     OFFSET FROM PGM START\n         DS    0D                      DOUBLE WORD ALIGNMENT\nINSTYP   DS    CL1                     INSTRUCTION TYPE\nTYPE     DS    XL1                     TYPE CODE\n*                                       0=CSECT, 1=ADCON, 2=CONST\n*                                       E=USING, D=INSTRUCTION\n*                                       C=COMMENT, 9=ENTRY\n*                                       A=EQU\nLEN      DS    XL1                     TEXT LENGTH\nX0010    DC    X'0010'                                             @26A\nX0050    DC    X'0050'                                             @26A\nNEXCHG   DC    XL3'00'                 OFFSET TO NEXT BASE REG CHG\nMORUSG   DC    X'00'                   0=NO MORE BASES, 80=MORE BASES\n*\n* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID\n* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,\n* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,\n* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.\n*\n*\n*IVAL    DC    4X'FF'                  CONSTANT X F'S\n         DC    C'ASCIITB'                                          @25A\nASCIITBL DC    128X'FF'                TRT TABLE FOR CHAR/HEX\n         ORG   ASCIITBL+32\n         DC    C' !\"#$%'\n         DC    X'507D'\n         DC    C'()*+,-./'\n         DC    C'0123456789'\n         DC    C':;<=>?@'\n         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         DC    X'FFE0FFA16DB9'\n         DC    C'abcdefghijklmnopqrstuvwxyz'\n         DC    C'{|}'\n         ORG\nCHARTRAN DC    256X'FF'                TRT TABLE FOR CHAR/HEX\n         ORG   CHARTRAN+C' '\n         DC    X'00'                   BLANK IS CHARACTER\n         ORG   CHARTRAN+X'4A'\n         DC    5X'00'                    ? ARE CHARACTERS\n         ORG   CHARTRAN+C'$' 5B                           4/16/87\n         DC    4X'00'                   $* ARE CHARACTERS\n         ORG   CHARTRAN+C'-' 60\n         DC    2X'00'                   -/ ARE CHARACTERS\n         ORG   CHARTRAN+C',' 6B                           4/16/87\n         DC    5X'00'                ,%_>? ARE CHARACTERS\n         ORG   CHARTRAN+C':' 7A                           4/16/87\n         DC    6X'00'               :#@'=\" ARE CHARACTERS\n         ORG   CHARTRAN+C'~' A0\n         DC    9X'00'                  S-Z ARE CHARACTERS\n         ORG   CHARTRAN+C'A'\n         DC    9X'00'                  A-I ARE CHARACTERS\n         ORG   CHARTRAN+C'J'\n         DC    9X'00'                  J-R ARE CHARACTERS\n         ORG   CHARTRAN+C'S'\n         DC    8X'00'                  S-Z ARE CHARACTERS\n         ORG   CHARTRAN+C'0'\n         DC    10X'00'                 0-9 ARE CHARACTERS\n         ORG\n         DC    C'MIXCTRAN'                                        @25A\nMIXCTRAN DC    256X'FF'                TRT TABLE FOR CHAR/HEX     @16A\n         ORG   MIXCTRAN+C' '\n         DC    X'00'                   BLANK IS CHARACTER\n         ORG   MIXCTRAN+X'4A'\n         DC    6X'00'                    ? ARE CHARACTERS\n         ORG   MIXCTRAN+C'$' 5B\n         DC    4X'00'                   $* ARE CHARACTERS\n         ORG   MIXCTRAN+C'-' 60\n         DC    2X'00'                   -/ ARE CHARACTERS\n         ORG   MIXCTRAN+C',' 6B\n         DC    5X'00'                ,%_>? ARE CHARACTERS\n         ORG   MIXCTRAN+C':' 7A\n         DC    3X'00'                  :#@ ARE CHARACTERS\n         ORG   MIXCTRAN+C'=' 7E\n         DC    X'00'                   =  ARE CHARACTERS\n         ORG   MIXCTRAN+C'a' 81\n         DC    9X'00'                  a-i ARE CHARACTERS\n         ORG   MIXCTRAN+C'j' 91\n         DC    9X'00'                  j-r ARE CHARACTERS\n         ORG   MIXCTRAN+C's' A2\n         DC    8X'00'                  s-z ARE CHARACTERS\n*        ORG   MIXCTRAN+C's' A2\n*        DC    6X'00'                  s-w ARE CHARACTERS\n*        ORG   MIXCTRAN+C'y' A8\n*        DC    2X'00'                  y-z ARE CHARACTERS\n         ORG   MIXCTRAN+C'A'\n         DC    9X'00'                  A-I ARE CHARACTERS\n         ORG   MIXCTRAN+C'J'\n         DC    9X'00'                  J-R ARE CHARACTERS\n         ORG   MIXCTRAN+C'S'\n         DC    8X'00'                  S-Z ARE CHARACTERS\n         ORG   MIXCTRAN+C'0'\n         DC    10X'00'                 0-9 ARE CHARACTERS\n         ORG\n         DS    CL64                                                @15A\nBASERG   DC    X'FF'                                               @15A\nSECOND_LINE    DC CL80' '                                          @14A\n         COPY  HDISTD\nCOMMPARM DSECT ,                       COMMON AREAS\n         COPY  HDISTC\n         END\n         COPY  HDISOPT1                OPERATION CODE TABLE 1      @24C\n         COPY  HDISOPT2                OPERATION CODE TABLE 2      @24C\n         COPY  HDISCCTB                CONDITIONAL CODE TABLE      @21A\n         COPY  HDISSVTB                SVC TABLE\n*        COPY  HDISPSTB                PSA MAPPING\n*        COPY  HDISD2TB                SYSTEM CONTROL BLOCK MAPPING\n*        COPY  HDISSFTB                SYSTEM FUNCTION TABLE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HDISCCTB": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\xf1\\x00\\xf1\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 241, "newlines": 241, "modlines": 0, "user": "ASM"}, "text": "CCODECS  CSECT\nCCODEHR  DC  0CL8\n         DC  X'0100',Y(@CDFT)\n         DC  X'0200',Y(@CTM)\n         DC  X'0300',Y(@CTMX)\n         DC  X'0400',Y(@CLT)\n         DC  X'0500',Y(@CLCM)\n         DC  X'0600',Y(@CLP)\n         DC  X'0700',Y(@CLN)\n         DC  X'0800',Y(@CICM)\n         DC  X'0900',Y(@CLRA)\n         DC  X'1100',Y(@CMP)\n         DC  X'1200',Y(@CCS)\n         DC  X'2100',Y(@CA1)\n         DC  X'2200',Y(@CA2)\n         DC  X'2300',Y(@CA3)\n         DC  X'2400',Y(@CA4)\n         DC  X'2800',Y(@CZRO)\n         DC  X'2900',Y(@CED)\n         DC  X'2A00',Y(@CTRT)\n         DC  X'3100',Y(@C31)\n         DC  X'3200',Y(@C32)\n         DC  X'3300',Y(@C33)\n         DC  X'4000',Y(@C40)                      TAM\n         DC  X'4100',Y(@C41)                      IAC\n         DC  X'4200',Y(@C42)                      LASP\n         DC  X'5100',Y(@C51)                      SET CLOCK\n         DC  X'5200',Y(@C52)                      SSCH\n         DC  X'6100',Y(@C61)                      TBEGIN/TEND\n         DC  X'6200',Y(@C62)                      TPI\n         DC  X'6300',Y(@C63)                      TPROT\n         DC  X'6400',Y(@C64)                      TSCH\nCCODETB  DC  0CL20\n@CDFT    EQU *-CCODECS\n         DC  X'10',C'C ',CL17'cc 3'            DEFUALT\n         DC  X'20',C'C ',CL17'cc 2'\n         DC  X'30',C'C ',CL17'cc 2 or 3'\n         DC  X'40',C'C ',CL17'cc 1'\n         DC  X'50',C'C ',CL17'cc 1 or 3'\n         DC  X'60',C'C ',CL17'cc 1 or 2'\n         DC  X'70',C'C ',CL17'not cc 0'\n         DC  X'80',C'C ',CL17'cc 0'\n         DC  X'90',C'C ',CL17'cc 0 or 3'\n         DC  X'A0',C'C ',CL17'cc 0 or 2'\n         DC  X'B0',C'C ',CL17'not cc 1'\n         DC  X'C0',C'C ',CL17'cc 0 or 1'\n         DC  X'D0',C'C ',CL17'not cc 2'\n         DC  X'E0',C'C ',CL17'not cc 3'\n         DC  X'FFFF'\n@CTM     EQU *-CCODECS\n         DC  X'10',C'O ',CL17'one'              TEST UNDER MASK\n         DC  X'40',C'M ',CL17'mixed'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'B0',C'NM',CL17'not mixed'\n         DC  X'E0',C'NO',CL17'not one'\n         DC  X'FFFF'\n@CTMX    EQU *-CCODECS\n         DC  X'10',C'O ',CL17'one'              TM (HIGH/LOW)\n         DC  X'20',C'C ',CL17'mixed left bit 1'\n         DC  X'40',C'C ',CL17'mixed left bit 0'\n         DC  X'60',C'C ',CL17'mixed'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'90',C'C ',CL17'not mixed'\n         DC  X'B0',C'NM',CL17'not mixed'\n         DC  X'E0',C'NO',CL17'not one'\n         DC  X'FFFF'\n@CLT     EQU *-CCODECS\n         DC  X'20',C'P ',CL17'> zero'           LOAD AND TEST\n         DC  X'40',C'M ',CL17'< zero'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'B0',C'NM',CL17'not minus'\n         DC  X'D0',C'NP',CL17'not positive'\n         DC  X'FFFF'\n@CLCM    EQU *-CCODECS\n         DC  X'20',C'C ',CL17'< 0 no overflow'\n         DC  X'40',C'C ',CL17'> 0 no overflow'\n         DC  X'80',C'Z ',CL17'0 and no overflow'\n         DC  X'FFFF'\n@CLP     EQU *-CCODECS\n         DC  X'10',C'O ',CL17'overflow'         LOAD positive\n         DC  X'20',C'C ',CL17'> 0 no overflow'\n         DC  X'80',C'Z ',CL17'0 and no overflow'\n         DC  X'FFFF'\n@CLN     EQU *-CCODECS\n         DC  X'10',C'O ',CL17'overflow'         LOAD NEGATIVE\n         DC  X'40',C'M ',CL17'minus'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'B0',C'NM',CL17'not minus'\n         DC  X'E0',C'NO',CL17'not overflow'\n         DC  X'FFFF'\n@CICM    EQU *-CCODECS\n         DC  X'20',C'C ',CL17'1st bit 1'            ICM\n         DC  X'40',C'C ',CL17'1st bit 0'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'D0',C'C ',CL17'1st bit not 1'\n         DC  X'FFFF'\n@CLRA    EQU *-CCODECS\n         DC  X'10',C'C ',CL17'Inv page table'       LRA\n         DC  X'20',C'C ',CL17'Inv page table'\n         DC  X'40',C'C ',CL17'Inv segment table'\n         DC  X'70',C'NZ',CL17'Translat unavail'\n         DC  X'80',C'Z ',CL17'Translation avail'\n         DC  X'FFFF'\n@CMP     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'no inequality'        COMPARE\n         DC  X'20',C'H ',CL17'higher'\n         DC  X'40',C'L ',CL17'lower'\n         DC  X'70',C'NE',CL17'not equal'\n         DC  X'80',C'E ',CL17'equal'\n         DC  X'A0',C'NL',CL17'equal or higher'\n         DC  X'B0',C'NL',CL17'not lower'\n         DC  X'D0',C'NH',CL17'not higher'\n         DC  X'E0',C'C ',CL17'inequality'\n         DC  X'FFFF'\n@CCS     EQU *-CCODECS\n         DC  X'40',C'C ',CL17'unequal'              CS\n         DC  X'70',C'NZ',CL17'update fails'\n         DC  X'80',C'Z ',CL17'update okay'\n         DC  X'B0',C'C ',CL17'not unequal'\n         DC  X'FFFF'\n@CA1     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'overflow'             ADD\n         DC  X'20',C'C ',CL17'> 0 no overflow'\n         DC  X'40',C'C ',CL17'< 0 no overflow'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z   ',CL17'0 and no overflow'\n         DC  X'C0',C'C ',CL17'not < zero'\n         DC  X'D0',C'C ',CL12'not > zero'\n         DC  X'E0',C'C ',CL17'no overflow'\n         DC  X'FFFF'\n@CA2     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'not 0 and carry'      ADD LOGICAL\n         DC  X'20',C'C ',CL17'0 and carry'\n         DC  X'30',C'C ',CL17'carry'\n         DC  X'40',C'C ',CL17'not 0 no carry'\n         DC  X'80',C'Z ',CL17'0 and no carry'\n         DC  X'C0',C'C ',CL17'no carry'\n         DC  X'FFFF'\n@CA3     EQU *-CCODECS\n         DC  X'20',C'P ',CL17'plus'\n         DC  X'40',C'M ',CL17'minus'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'zero'\n         DC  X'B0',C'NM',CL17'not < 0'\n         DC  X'D0',C'NP',CL17'not > 0'\n         DC  X'E0',C'NO',CL17'not overflow'\n         DC  X'FFFF'\n@CA4     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'not 0 no borrow'     SUBTRACT LOGICAL\n         DC  X'20',C'C ',CL17'0 and no borrow'\n         DC  X'30',C'C ',CL17'no borrow'\n         DC  X'40',C'C ',CL17'not 0 and borrow'\n         DC  X'50',C'C ',CL17'not 0'\n         DC  X'A0',C'C ',CL17'0 and no borrow'\n         DC  X'FFFF'\n@CZRO    EQU *-CCODECS\n         DC  X'40',C'C ',CL17'result not zero'     OR\n         DC  X'70',C'NZ',CL17'result not zero'\n         DC  X'80',C'Z ',CL17'result zero'\n         DC  X'FFFF'\n@CED     EQU *-CCODECS\n         DC  X'20',C'C ',CL17'last field > 0'        ED\n         DC  X'40',C'C ',CL17'last filed < 0'\n         DC  X'70',C'NZ',CL17'last filed not 0'\n         DC  X'80',C'Z ',CL17'last field = 0'\n         DC  X'FFFF'\n@CTRT    EQU *-CCODECS\n         DC  X'20',C'C ',CL17'1st OPD exhausted'     TRT\n         DC  X'40',C'C ',CL17'1st OPD not exhau'\n         DC  X'70',C'NZ',CL17'not zero'\n         DC  X'80',C'Z ',CL17'all func bytes 0'\n         DC  X'FFFF'\n@C31     EQU *-CCODECS\n         DC  X'80',C'C ',CL17'normal operation'      ECPGA\n         DC  X'10',C'C ',CL17'CPU not install'\n         DC  X'FFFF'\n@C32     EQU *-CCODECS\n         DC  X'80',C'C ',CL17'normal operation'      ECCTR/EPCTR\n         DC  X'10',C'C ',CL17'counter not ava'       SCCTR/SPCTR\n         DC  X'FFFF'\n@C33     EQU *-CCODECS\n         DC  X'80',C'C ',CL17'normal operation'      LCCTL/LPCTL\n         DC  X'10',C'C ',CL17'control not sets'\n         DC  X'FFFF'\n@C40     EQU *-CCODECS                               TAM\n         DC  X'10',C'C ',CL17'64 bit addressing'\n         DC  X'30',C'C ',CL17'64 bit addressing'\n         DC  X'40',C'C ',CL17'31 bit addressing'\n         DC  X'80',C'C ',CL17'24 bit addressing'\n         DC  X'E0',C'C ',CL17'not 64 bit addr  '\n         DC  X'FFFF'\n@C41     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'HOME SPACE MODE'       IAC\n         DC  X'20',C'C ',CL17'ACCESS REG MODE'\n         DC  X'40',C'C ',CL17'SECNRY SPACE MODE'\n         DC  X'80',C'C ',CL17'PRIMRY SPACE MODE'\n         DC  X'FFFF'\n@C42     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'SPC SW EVENT SPFY'     LASP\n         DC  X'20',C'C ',CL17'SASN not AVAILABL'\n         DC  X'40',C'C ',CL17'PASN not AVAILABL'\n         DC  X'80',C'C ',CL17'CR3<PASN CR4<SASN'\n         DC  X'FFFF'\n@C51     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'stopped state'         SET CLOCK\n         DC  X'20',C'C ',CL17'error'\n         DC  X'40',C'C ',CL17'clock not set'\n         DC  X'70',C'NZ',CL17'not cc 0'\n         DC  X'80',C'Z ',CL17'clock set'\n         DC  X'FFFF'\n@C52     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'not operational'       SSCH\n         DC  X'20',C'C ',CL17'busy'\n         DC  X'40',C'C ',CL17'status pending'\n         DC  X'80',C'Z ',CL17'function initiated'\n@C61     EQU *-CCODECS\n         DC  X'20',C'C ',CL17'not in tran mode'      TBEGIN/TEND\n         DC  X'80',C'Z ',CL17'in transaction md'\n         DC  X'FFFF'\n@C62     EQU *-CCODECS\n         DC  X'40',C'C ',CL17'intc not stored'       TPI\n         DC  X'70',C'NZ',CL17'intc not stored'\n         DC  X'80',C'Z ',CL17'intc stored'\n         DC  X'FFFF'\n@C63     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'translate not ok'      TPROT\n         DC  X'20',C'C ',CL17'fetch not allow'\n         DC  X'40',C'C ',CL17'fetch permited'\n         DC  X'80',C'Z ',CL17'fetch store ok'\n         DC  X'FFFF'\n@C64     EQU *-CCODECS\n         DC  X'10',C'C ',CL17'not operational'       TSCH\n         DC  X'40',C'C ',CL17'SCHN st not pending'\n         DC  X'80',C'C ',CL17'SCHN st pending'\n         DC  X'FFFF'\n         DC  X'FFFF'                TABLE END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HDISEQU": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01S\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00x\\x00x\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.83", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 120, "newlines": 120, "modlines": 0, "user": "ASM"}, "text": "         MACRO                                                          0000\n         HDISEQU                                                        0000\nPSALEN   EQU   34                      PSA TABLE ENTRY LEN\nSFTLEN   EQU   18                      SFT TABLE ENTRY LEN\n*MPLEN   EQU   36                      JMP TABLE ENTRY LEN\nCC1LEN   EQU   4                       COND CODE INDEX ENTRY LEN\nCC2LEN   EQU   20                      COND CODE TABLE ENTRY LEN\nSVCOPLEN EQU   17                      SVC TABLE ENTRY LEN\nSGOPLEN  EQU   11                      SINGLE BYTE OP COD TBL LEN\nDGOPLEN  EQU   13                      DOUBLE BYTE OP COD TBL LEN\nL3OPLEN  EQU   13                      L3     BYTE OP COD TBL LEN 8\nL4OPLEN  EQU   13                      L4     BYTE OP COD TBL LEN\n*\n*ITYPE   DS    XL1                     INSTRUCTION TYPE\nRR       EQU   0                       RR FORMAT\nRX       EQU   4                       RX FORMAT\nS        EQU   8                       S FORMAT\nSI       EQU   12                      SI FORMAT\nRS       EQU   16                      RS FORMAT\nSS1      EQU   20                      SS FORMAT, SINGLE LENGTH\nSS2      EQU   24                      SS FORMAT, 2 LENGTHS\nTWO      EQU   28                      TWO BYTE OP-CODE\nCONDBR   EQU   32                      CONDITIONAL BRANCH\nSVC      EQU   36                      SUPERVISOR CALL\nRRE0     EQU   40                      RR EXTENDED 0 OPERAND\nRRE1     EQU   44                      RR EXTENDED 1 OPERAND\nRRE2     EQU   48                      RR EXTENDED 2 OPERAND2\nSSE      EQU   52                      SSE FORMAT\nSS3      EQU   56                      SS3 FORMAT\nRI1      EQU   60                      RI FORMAT 1 BRANCH INSTR\nRI2      EQU   64                      RI FORMAT 2\nRIL1     EQU   68                      RIL FORMAT 1 LINKAGE\nRIL2     EQU   72                      RIL FORMAT 2\nRSI      EQU   76                      RSI FORMAT\nRSE      EQU   80                      RSE FORMAT\nRXY      EQU   84                      RXY FORMAT\nRSY      EQU   88                      RSY FORMAT\nSS4      EQU   92                      SS4 FORMAT\nRXE      EQU   96                      RXE FORMAT\nE        EQU   100           64        EXTEND FORMAT\nSSF      EQU   104           68        SSF FORMAT\nSIL      EQU   108           6C        SIL FORMAT\nSIY      EQU   112           70        SIY FORMAT\nRRFA     EQU   116           74        RRF-A FORMAT\nRRFB     EQU   120           78        RRF-B FORMAT\nRRFC     EQU   124           7C        RRF-C FORMAT\nRRFD     EQU   128           80        RRF-D FORMAT\nRRFE     EQU   132           84        RRF-E FORMAT\nRSY2     EQU   136           88        RSY2 FORMAT\nRIE      EQU   140           8C        RIE  FORMAT\nRSL      EQU   144           90        RSL  FORMAT\nRSL2     EQU   148           94        RSL2 FORMAT\nRSA      EQU   152           98        RSA  FORMAT\nSSE2     EQU   156           9C        SSE2 FORMAT\nL3       EQU   240                     TWO BYTE OP CODE FMT 3\nL4       EQU   244                     TWO BYTE OP CODE FMT 4\n*\n*ICLASS  DS    XL1                     INSTRUCTION CLASS\nPRIVP    EQU   X'A0'    1010 0000      PRIVILEGED INSTRUCTION & NPSA\nPRIVS    EQU   X'90'    1001 0000      SEMI PRIVILEGED INSTRUCTION\nPRIV     EQU   X'80'    1000 0000      PRIVILEGED INSTRUCTION\nCR       EQU   X'64'    0110 0100      CONTROL REGISTER           @21C\nFLSHT    EQU   X'41'    0100 0001      SHORT PREC FLT PT INSTR\nFLTPT    EQU   X'40'    0100 0000      FLOATING POINT INSTRUCTION\nLL8      EQU   X'28'    0000 1000      LABEL LENGTH 8             @15A\nLL4      EQU   X'24'    0000 0100      LABEL LENGTH 4             @15A\nLL2      EQU   X'22'    0000 0010      LABEL LENGTH 2             @15A\nLROP     EQU   X'21'    0010 0001      LR INSTRUCTION             @20A\nNPSA     EQU   X'20'    0010 0000      NOT REFER PSA              @20A\nCDOR     EQU   X'17'    0001 0111      CLEAR DSECT AND REGISTER   @21A\nCDOPA    EQU   X'13'    0001 0011      CLEAR DSECT (AL/AH)        @23A\nCDOP     EQU   X'11'    0001 0001      CLEAR DSECT                @20A\nLIOP     EQU   X'10'    0001 0000      LOAD INSTRUCTION           @20C\nRB       EQU   X'08'    0000 1000      RELATIVE BRANCH            @18A\nBMP      EQU   X'06'    0000 0110      BIT MASK INSTRUCTION       @18A\nAR3      EQU   X'03'                   GR,AR\nAR2      EQU   X'02'                   AR,AR\nAR1      EQU   X'01'                   AR,GR\n*\n*IEDT    DS    XL1                     INSTRUCTION EDITS\nT8       EQU   X'80'                   TEST INSTRUCTION\nEPR      EQU   X'40'                   EVEN-ODD REGISTER PAIR\nE2       EQU   X'20'                   2ND OPND ON HALFWORD BOUND\nE4       EQU   X'10'                   2ND OPND ON FULLWORD BOUND\nE8       EQU   X'08'                   2ND OPND ON DBL WORD BOUND\nIM2      EQU   X'04'                   2 BYTES IMMEDIATE OPERAND\nS1       EQU   X'02'                   1ST OPND MUST HAVE BASE/INDEX\nS2       EQU   X'01'                   2ND OPND MUST HAVE BASE\n*ICCSET  DS    XL1            TYPE CONDITION CODE SET\nCDFT     EQU   X'01'\nCTM      EQU   X'02'\nCTMX     EQU   X'03'\nCLT      EQU   X'04'\nCLCM     EQU   X'05'\nCLP      EQU   X'06'\nCLN      EQU   X'07'\nCICM     EQU   X'08'\nCLRA     EQU   X'09'\nCMP      EQU   X'11'\nCCS      EQU   X'12'\nCA1      EQU   X'21'\nCA2      EQU   X'22'\nCA3      EQU   X'23'\nCA4      EQU   X'24'\nCZRO     EQU   X'28'\nCED      EQU   X'29'\nCTRT     EQU   X'2A'\nC31      EQU   X'31'\nC32      EQU   X'32'\nC33      EQU   X'33'\nC40      EQU   X'40'                      TAM\nC41      EQU   X'41'                      IAC\nC42      EQU   X'42'                      LASP\nC51      EQU   X'51'                      SET CLOCK\nC52      EQU   X'52'                      SSCH\nC61      EQU   X'61'                      TBEGIN/TEND\nC62      EQU   X'62'                      TPI\nC63      EQU   X'63'                      TPROT\nC64      EQU   X'64'                      TSCH\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISOPTB": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x13\\x01o\\x01\\x13\\x01o\\x10\\x10\\x04#\\x04#\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-01-16T00:00:00", "modifydate": "2013-01-16T10:10:00", "lines": 1059, "newlines": 1059, "modlines": 0, "user": "ACHENG"}, "text": "          HDISEQU\n*\n*\n*\n*                 *** DATA AND WORK AREAS ***\n******************************************************************\n*                                                                *\n*\n* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED\n* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED\n* WITH ALL OTHER PROGRAMS.\n*\n******************************************************************\n*\n         DS    0D\nCOMMPARM DSECT ,                       COMMON AREAS\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nPUNCHDCB DS    F                       @ SYSPUNCH DCB\nPRINTDCB DS    F                       @ SYSPRINT DCB\nINDCB    DS    F                       @ SYSIN DCB\nCSECT    DS    CL8                     SPECIFIED CSECT NAME\nESDID    DS    XL2                     ESD ID OF SPECIFIED CSECT\nENDLBLNM DS    CL8                     SYMBOL FOR END STMT BEGIN POINTE\nLINECT   DS    PL2                     PRINT LINE COUNTER\nSTART    DS    A                       LKED ASSIGNED START ADDR OF CSEC\nEND      DS    A                       CSECT END ADDRESS\nLENGTH   DS    F                       LENGTH OF SPECIFIED CSECT\nLBLTBL   DS    F                       @ LABEL TABLE\nCURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR\nENDLBL   DS    F                       @ END OF LABEL TBL\nTXTSTRT  DS    F                       @ TEXT STORAGE AREA\nTXTEND   DS    F                       @ END OF TEXT AREA\nTXTCURR  DS    F                       @ CURRENT TEXT LOC\nDTBCURR  DS    F                       @ CURRENT DSECT TABLE ENTRY\nDTBEND   DS    F                       @ DSECT TABLE END\nDTBSTRT  DS    F                       @ DSECT TABLE START\nUSGSTRT  DS    F                       @ USING TABLE START\nUSGCUR   DS    F                       @ CURRENT USING TABLE ENTRY\nUSGEND   DS    F                       @ USING TABLE END\nDATONLY  DS    F                       @ DATA ONLY TABLE\nDATOCUR  DS    F                       @ CURRENT DATA ONLY ENTRY\nDATOEND  DS    F                       @ END OF DATA ONLY TABLE\nFLPTASM  DS    XL1                     FLOATING POINT INDICATOR\nPRIVASM  DS    XL1                     PRIVILEGED INDICATOR\n*64BASM  DS    XL1                     64BIT INST INDICATOR\nUSERR    DS    XL1                     ERROR INDIC FOR HDISASM1\nNBRLBLS  DS    H                       NBR LABELS FROM HDISASM1\n*\n*\n*\nWORKREC  DS    0CL80                   DISASSEMBLY WORK AREA\nNAME     DS    CL8                     NAME\n         DS    CL1\nMNEMONIC DS    CL5                     INSTRUCTION MNEMONIC\n         DS    CL1\nOPNDS    DS    CL27                    1ST OPERAND\n         DS    CL1\nCOMMENT  DS    CL28                    COMMENT\nCOL72    DS    CL1                     CONTINUATION COLUMN\nSEQNBR   DS    CL8                     CARD SEQUENCE NBR\n*\n*\n*\nCARDNO   DS    PL4                     CURRENT OUTPUT CARD NBR\nPRTLINE  DS    0CL121                  PRINT LINE\nPCC      DS    CL1                     CARRIAGE CONTROL\nPRT      DS    CL120                   PRINT DATA\n*\n*\n*\n         DS    0F\nBLDLIST  DS    0CL62                   BLDL LIST\n         DC    H'1'                    ONE ENTRY\n         DC    H'58'                   LENGTH OF ENTRY\nMEMBER   DC    CL8' '                  MEMBER NAME\nTTRMOD   DC    XL3'000000'             TTR OF MODULE\nCCAT     DC    XL1'00'                 CONCATENATION NUMBER\n         DC    XL1'00'\nALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR\n*                           80=ALIAS\nTTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD\n         DC    XL1'00'\nTTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST\nNNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST\nATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1\n*                           80=RENT\n*                           40=REUS\n*                           20=OVERLAY\n*                           10=UNDER TEST\n*                           08=ONLY LOADABLE\n*                           04=SCATTER FORMAT\n*                           02=EXECUTABLE\n*                           01=ONE TXT, NO RLD RECORDS\nATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2\n*                           80=CANNOT BE REPROCESSED BY LKED E\n*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO\n*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO\n*                           10=CONTAINS NO RLD RECORD\n*                           08=CANNOT BE REPROCESSED BY LKED\n*                           04=CONTAINS TESTRAN SYMBOLS\n*                           02=CREATED BY LKED\n*                           01=REFR\nTOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD\nLENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD\nLKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR\nATTR2    DC    XL1'00'                 ATTRIBUTES 2\n*                           80=PROCESSED BY OS/VS LKED\n*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE\n*                           10=SSI PRESENT\n         DC    XL2'0000'\nSCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH\nTTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH\nSCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD\nSCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT\nALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME\nALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS\nSSI      DS    XL4'00000000'           SSI BYTES\nAUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH\nAUTHCOD  DC    XL1'00'                 AUTH CODE\n*\n*\n*\nCOMMEND  EQU   *\n*\n*\n*\nLABELD   DSECT ,                       LABEL TABLE ENTRY\nLABEL    DS    0CL13                   13-BYTE ENTRIES\nLBLADR   DS    XL3                     RELATIVE ADDR IN TEXT\nLBLTYP   DS    CL1                     TYPE: L=LABEL, A=ADCON, V=VCON,\nLBLNAME  DS    CL8                     NAME (SYMBOL)\nLBLLEN   DS    XL1                     LENGTH IF A, V, OR W\n*\n*\n*\nUSINGD   DSECT ,                       USING TABLE ENTRY\nUSING    DS    0CL11\nUSBGN    DS    XL3                     OFFSET TO BEGINNING OF RANGE\nUSEND    DS    XL3                     OFFSET TO END OF RANGE\nUSREG    DS    XL1                     BASE REGISTER USED\nUSTYPE   DS    XL1                     TYPE:P=PGM,D=DSECT\nUSVALU   DS    XL3                     BASE REG VALUE\n*\n*\n*\nDSECTD   DSECT ,                       DSECT FIELD TABLE ENTRY\nDSECT    DS    0CL13\nDSOFSET  DS    XL3                     OFFSET TO 1ST BYTE OF FIELD\nDSLBTYP  DS    CL1                     LABEL TYPE = L\nDSNAME   DS    CL8                     FIELD NAME\nDSLENG   DS    XL1                     FIELD LENGTH\n*\n*\n*\nSGLOPV CSECT\nSGLOP  DS    0CL10                   SINGLE BYTE OP-CODE TABLE\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'       00\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'      01\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'       02\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'       03\n       DC    CL5'SPM',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02'  04\n       DC    CL5'BALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'    05\n       DC    CL5'BCTR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'    06\n*      DC    CL5'BCR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'     07\n       DC    CL5'BCR',AL1(CONDBR),AL1(0),AL1(0),AL1(0),X'02' 07\n       DC    CL5'SSK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02'  08\n       DC    CL5'ISK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02'  09\n       DC    CL5'SVC',AL1(SVC),AL1(0),AL1(0),AL1(0),X'02'    0A\n       DC    CL5'BSM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'     0B\n       DC    CL5'BASSM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'   0C\n       DC    CL5'BASR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'    0D\n       DC    CL5'MVCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'  0E\n       DC    CL5'CLCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'  0F\n       DC    CL5'LPR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 10\n       DC    CL5'LNR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 11\n       DC    CL5'LTR',AL1(RR),AL1(0),AL1(T8),AL1(ARITH),X'02' 12\n       DC    CL5'LCR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02' 13\n       DC    CL5'NR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02'   14\n       DC    CL5'CLR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02'   15\n       DC    CL5'OR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02'   16\n       DC    CL5'XR',AL1(RR),AL1(0),AL1(0),AL1(ZRO8),X'02'   17\n       DC    CL5'LR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'      18\n       DC    CL5'CR',AL1(RR),AL1(0),AL1(0),AL1(CPR),X'02'    19\n       DC    CL5'AR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02'  1A\n       DC    CL5'SR',AL1(RR),AL1(0),AL1(0),AL1(ARITH),X'02'  1B\n       DC    CL5'MR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'    1C\n       DC    CL5'DR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'    1D\n       DC    CL5'ALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'     1E\n       DC    CL5'SLR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'     1F\n       DC    CL5'LPDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 20\n       DC    CL5'LNDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 21\n       DC    CL5'LTDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 22\n       DC    CL5'LCDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 23\n       DC    CL5'HDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      24\n       DC    CL5'LRDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     25\n       DC    CL5'MXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      26\n       DC    CL5'MXDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     27\n       DC    CL5'LDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      28\n       DC    CL5'CDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02'    29\n       DC    CL5'ADR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  2A\n       DC    CL5'SDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  2B\n       DC    CL5'MDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      2C\n       DC    CL5'DDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      2D\n       DC    CL5'AWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  2E\n       DC    CL5'SWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  2F\n       DC    CL5'LPER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 30\n       DC    CL5'LNER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 31\n       DC    CL5'LTER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 32\n       DC    CL5'LCER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02' 33\n       DC    CL5'HER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      34\n       DC    CL5'LRER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     35\n       DC    CL5'AXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  36\n       DC    CL5'SXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  37\n       DC    CL5'LER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      38\n       DC    CL5'CER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CPR),X'02'    39\n       DC    CL5'AER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  3A\n       DC    CL5'SER',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  3B\n       DC    CL5'MER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      3C\n       DC    CL5'DER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      3D\n       DC    CL5'AUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  3E\n*                  ADD UNNORAMLISE\n       DC    CL5'SUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(ARITH),X'02'  3F\n*                  SUBTRACT UNNORAMLISE\n       DC    CL5'STH',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 40\n       DC    CL5'LA',AL1(RX),AL1(0),AL1(0),AL1(0),X'04'      41\n       DC    CL5'STC',AL1(RX),AL1(0),AL1(S2),AL1(0),X'04'    42\n       DC    CL5'IC',AL1(RX),AL1(0),AL1(0),AL1(0),X'04'      43\n       DC    CL5'EX',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04'  44\n       DC    CL5'BAL',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'    45\n       DC    CL5'BCT',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'04' 46\n       DC    CL5'BC',AL1(CONDBR),AL1(0),AL1(E2),AL1(0),X'04' 47\n       DC    CL5'LH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'     48\n       DC    CL5'CH',AL1(RX),AL1(0),AL1(E2),AL1(CPR),X'04'   49\n       DC    CL5'AH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4A\n       DC    CL5'SH',AL1(RX),AL1(0),AL1(E2),AL1(ARITH),X'04' 4B\n       DC    CL5'MH',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'     4C\n       DC    CL5'BAS',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'    4D\n       DC    CL5'CVD',AL1(RX),AL1(0),AL1(E8+S2),AL1(0),X'04' 4E\n       DC    CL5'CVB',AL1(RX),AL1(0),AL1(E8),AL1(0),X'04'    4F\n       DC    CL5'ST',AL1(RX),AL1(0),AL1(E4+S2),AL1(0),X'04'  50\n       DC    CL5'LAE',AL1(RX),AL1(0),AL1(0),AL1(0),X'04'     51\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    CL5'N',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04'   54\n       DC    CL5'CL',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04'   55\n       DC    CL5'O',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04'   56\n       DC    CL5'X',AL1(RX),AL1(0),AL1(E4),AL1(ZRO8),X'04'   57\n       DC    CL5'L',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04'      58\n       DC    CL5'C',AL1(RX),AL1(0),AL1(E4),AL1(CPR),X'04'    59\n       DC    CL5'A',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04'  5A\n       DC    CL5'S',AL1(RX),AL1(0),AL1(E4),AL1(ARITH),X'04'  5B\n       DC    CL5'M',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04'  5C\n       DC    CL5'D',AL1(RX),AL1(0),AL1(E4+EPR),AL1(0),X'04'  5D\n       DC    CL5'AL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04'     5E\n       DC    CL5'SL',AL1(RX),AL1(0),AL1(E4),AL1(0),X'04'     5F\n       DC    CL5'STD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04' 60\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 61\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 62\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 63\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 64\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 65\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 66\n       DC    CL5'MXD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'    67\n       DC    CL5'LD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'     68\n       DC    CL5'CD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CPR),X'04'   69\n       DC    CL5'AD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6A\n       DC    CL5'SD',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6B\n       DC    CL5'MD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'     6C\n       DC    CL5'DD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'     6D\n       DC    CL5'AW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6E\n*                  ADD UNNORAMLISE\n       DC    CL5'SW',AL1(RX),AL1(FLTPT),AL1(0),AL1(ARITH),X'04' 6F\n*                  SUBTRACT UNNORAMLISE\n       DC    CL5'STE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'    70\n       DC    CL5'MS',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'        71\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 72\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 73\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 74\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 75\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 76\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR 77\n       DC    CL5'LE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'     78\n       DC    CL5'CE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CPR),X'04'   79\n       DC    CL5'AE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7A\n       DC    CL5'SE',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7B\n       DC    CL5'ME',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'     7C\n       DC    CL5'DE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'     7D\n       DC    CL5'AU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7E\n       DC    CL5'SU',AL1(RX),AL1(FLSHT),AL1(0),AL1(ARITH),X'04' 7F\n       DC    CL5'SSM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'      80\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'   NOT INSTR\n       DC    CL5'LPSW',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04'    82\n       DC    CL5'DIAG',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04'    83\n       DC    CL5'BRXH',AL1(RSI),AL1(PRIV),AL1(0),AL1(0),X'04'   84\n       DC    CL5'BRXLE',AL1(RSI),AL1(PRIV),AL1(0),AL1(0),X'04'  85\n       DC    CL5'BXH',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04'    86\n       DC    CL5'BXLE',AL1(RS),AL1(0),AL1(E2+S2),AL1(0),X'04'   87\n       DC    CL5'SRL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04'    88\n       DC    CL5'SLL',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04'    89\n       DC    CL5'SRA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04'    8A\n       DC    CL5'SLA',AL1(RS),AL1(0),AL1(0),AL1(ARITH),X'04'    8B\n       DC    CL5'SRDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8C\n       DC    CL5'SLDL',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8D\n       DC    CL5'SRDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8E\n       DC    CL5'SLDA',AL1(RS),AL1(0),AL1(EPR),AL1(ARITH),X'04' 8F\n       DC    CL5'STM',AL1(RS),AL1(0),AL1(E4+S2),AL1(0),X'04'    90\n       DC    CL5'TM',AL1(SI),AL1(0),AL1(T8),AL1(ARITH),X'04'    91\n       DC    CL5'MVI',AL1(SI),AL1(0),AL1(S2),AL1(0),X'04'       92\n       DC    CL5'TS',AL1(S),AL1(0),AL1(0),AL1(0),X'04'          93\n       DC    CL5'NI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04'      94\n       DC    CL5'CLI',AL1(SI),AL1(0),AL1(0),AL1(CPR),X'04'      95\n       DC    CL5'OI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04'      96\n       DC    CL5'XI',AL1(SI),AL1(0),AL1(0),AL1(ZRO8),X'04'      97\n       DC    CL5'LM',AL1(RS),AL1(0),AL1(E4),AL1(0),X'04'        98\n       DC    CL5'TRACE',AL1(RS),AL1(0),AL1(0),AL1(0),X'04'      99\n       DC    CL5'LAM',AL1(RS),AL1(0),AL1(E4),AL1(AR2),X'04'     9A\n       DC    CL5'STAM',AL1(RS),AL1(0),AL1(E4),AL1(AR2),X'04'    9B\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9C\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9D\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9E\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' 9F\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A0\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A1\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A2\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A3\n       DC    CL5' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'  A4\n       DC    CL5' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'  A5\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04' A6\n       DC    CL5' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'  A7\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A8\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A9\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR AA\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR AB\n       DC    CL5'STNSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AC\n       DC    CL5'STOSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04' AD\n       DC    CL5'SIGP',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04'  AE\n       DC    CL5'MC',AL1(SI),AL1(0),AL1(0),AL1(0),X'04'       AF\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    CL5'LRA',AL1(RX),AL1(PRIV),AL1(0),AL1(0),X'04'   B1\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'       B2\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    CL5'STCTL',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04' B6\n       DC    CL5'LCTL',AL1(RS),AL1(PRIV),AL1(E4),AL1(0),X'04' B7\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'        B9\n       DC    CL5'CS',AL1(RS),AL1(0),AL1(E4),AL1(CPR),X'04'     BA\n       DC    CL5'CDS',AL1(RS),AL1(0),AL1(E4+EPR),AL1(CPR),X'04' BB\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR\n       DC    CL5'CLM',AL1(RS),AL1(0),AL1(T8),AL1(CPR),X'04'    BD\n       DC    CL5'STCM',AL1(RS),AL1(0),AL1(T8+S2),AL1(0),X'04'  BE\n       DC    CL5'ICM',AL1(RS),AL1(0),AL1(T8+S2),AL1(ZRO8),X'04' BF\n       DC    CL5' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'         C0\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR C1\n       DC    CL5' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'         C2\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C3\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C4\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C5\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C6\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C7\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C8\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C9\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CA\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CB\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CC\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CD\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CE\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CF\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         D0\n       DC    CL5'MVN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D1\n       DC    CL5'MVC',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D2\n       DC    CL5'MVZ',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D3\n       DC    CL5'NC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06'    D4\n       DC    CL5'CLC',AL1(SS1),AL1(0),AL1(0),AL1(CPR),X'06'     D5\n       DC    CL5'OC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06'    D6\n       DC    CL5'XC',AL1(SS1),AL1(0),AL1(S1),AL1(ZRO8),X'06'    D7\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'          D8\n       DC    CL5'MVCK',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      D9\n       DC    CL5'MVCP',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      DA\n       DC    CL5'MVCS',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      DB\n       DC    CL5'TR',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'       DC\n       DC    CL5'TRT',AL1(SS1),AL1(0),AL1(0),AL1(ZRO8),X'06'    DD\n       DC    CL5'ED',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06'   DE\n       DC    CL5'EDMK',AL1(SS1),AL1(0),AL1(S1),AL1(ARITH),X'06' DF\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL5'PKU',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'      E1\n       DC    CL5'UNPKU',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'    E2\n       DC    CL5' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'        E3\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL5' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'06'       E5\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INST6\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INST7\n       DC    CL5'MVCIN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'   E8\n       DC    CL5'PKA',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'      E9\n       DC    CL5'UNPKA',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'    EA\n       DC    CL5' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         EB\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         EC\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         ED\n       DC    CL5'PLO',AL1(SS1),AL1(0),AL1(0),AL1(PRIV),X'06'   EE\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         EF\n       DC    CL5'SRP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F0\n       DC    CL5'MVO',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'     F1\n       DC    CL5'PACK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'    F2\n       DC    CL5'UNPK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'    F3\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL5'ZAP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06' F8\n       DC    CL5'CP',AL1(SS2),AL1(0),AL1(0),AL1(CPR),X'06'     F9\n       DC    CL5'AP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06'  FA\n       DC    CL5'SP',AL1(SS2),AL1(0),AL1(S1),AL1(ARITH),X'06'  FB\n       DC    CL5'MP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'      FC\n       DC    CL5'DP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'      FD\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR\n       DC    XL5'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR\n       DC    X'FFFF'                 TABLE END\n*\n*\n*\nDBLOPV CSECT\nDBLOP  DS  0CL12                   12O-BYTE OP-CODE TABLE\n      DC  X'0101',CL5'PR ',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0102',CL5'UPT',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0103',CL5'?0103',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'0104',CL5'PTFF',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0105',CL5'?0105',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'0106',CL5'?0106',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'0107',CL5'SCKPF',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'0108',CL5'?0108',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0109',CL5'?0109',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'010A',CL5'PFPO',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010B',CL5'TAM',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010C',CL5'SAM24',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010D',CL5'SAM31',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010E',CL5'SAM64',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'01FF',CL5'TRAP2',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n* THE FOLLOWING INSTRUCTIONS ARE OBSOLETE\n      DC  X'9C00',CL5'SIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9C01',CL5'SIOF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9D00',CL5'TIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9D01',CL5'CLRIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9E00',CL5'HIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9E01',CL5'HDV',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9F00',CL5'TCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'A400',CL5'VAE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'A500',CL5'VAER',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'A600',CL5'VMXSE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'B202',CL5'STIDP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B203',CL5'STIDC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B204',CL5'SCK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B205',CL5'STCK',AL1(S),AL1(0),AL1(E8+S2),AL1(0),X'04'\n      DC  X'B206',CL5'SCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B207',CL5'STCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B208',CL5'SPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B209',CL5'STPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B20A',CL5'SPKA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B20B',CL5'IPK',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B20D',CL5'PTLB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B210',CL5'SPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B211',CL5'STPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B212',CL5'STAP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B213',CL5'RRB ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B214',CL5'SIE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B218',CL5'PC',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B219',CL5'SAC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B21A',CL5'CFC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B220',CL5'SERVC',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B221',CL5'IPTE',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B222',CL5'IPM',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B223',CL5'IVSK',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B224',CL5'IAC',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B225',CL5'SSAR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B226',CL5'EPAR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B227',CL5'ESAR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B228',CL5'PT',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B229',CL5'ISKE',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22A',CL5'RRBE',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22B',CL5'SSKE',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22C',CL5'TB',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22D',CL5'DXR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B22E',CL5'PGIN',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22F',CL5'PGOUT',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B230',CL5'CSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B231',CL5'HSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B232',CL5'MSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B233',CL5'SSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B234',CL5'STSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B235',CL5'TSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B236',CL5'TPI',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B237',CL5'SAL',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B238',CL5'RSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B239',CL5'STCRW',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23A',CL5'STCPS',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23B',CL5'RCHP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23C',CL5'SCHM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'B240',CL5'BAKR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B241',CL5'CKSM',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B243',CL5'MADS',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B244',CL5'SQDR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B245',CL5'SQER',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B246',CL5'STURA',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B247',CL5'MSTA',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B248',CL5'PALB',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B249',CL5'EREG',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B24A',CL5'ESTA',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B24B',CL5'LURA',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B24C',CL5'TAR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B24D',CL5'CPYA',AL1(RRE2),AL1(0),AL1(0),AL1(AR2),X'04'\n      DC  X'B24E',CL5'SAR ',AL1(RRE2),AL1(0),AL1(0),AL1(AR1),X'04'\n      DC  X'B24F',CL5'EAR ',AL1(RRE2),AL1(0),AL1(0),AL1(AR3),X'04'\n      DC  X'B250',CL5'CSP ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B252',CL5'MSR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B254',CL5'MVPG',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B255',CL5'MVST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B257',CL5'CUSE ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B258',CL5'BSG  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B259',CL5'IESBE',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25A',CL5'BSA',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25D',CL5'CLST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25E',CL5'SRST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25F',CL5'?B25F',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B263',CL5'CMPSC',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B264',CL5'?B264',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B265',CL5'?B265',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B266',CL5'?B266',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B267',CL5'?B267',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B268',CL5'?B268',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B272',CL5'?B272',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B276',CL5'XSCH ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B277',CL5'RP   ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B278',CL5'STCKE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B279',CL5'SACF ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B27C',CL5'STCKF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B27D',CL5'STSI ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B280',CL5'LPP  ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B284',CL5'LCCTL',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B285',CL5'LPCTL',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B286',CL5'QSI  ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B287',CL5'LSCTL',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B28E',CL5'QCTRI',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B299',CL5'SRNM ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B29C',CL5'STFPC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B29D',CL5'LFPC ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2A5',CL5'TRE  ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2A6',CL5'CU21 ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B0',CL5'STFLE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B1',CL5'STFL ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B2',CL5'LPSWE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B8',CL5'SRNMB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B9',CL5'SRNMT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2BD',CL5'LFAS ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2E0',CL5'SCCTR',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2E1',CL5'SPCTR',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2E4',CL5'ECCTR',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2E5',CL5'EPCTR',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2ED',CL5'ECPGA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2FF',CL5'TRAP4',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B900',CL5'LPGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B901',CL5'LNGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B902',CL5'LTGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B903',CL5'LCGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B904',CL5'LGR  ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B905',CL5'LURAG',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B906',CL5'LGBR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B907',CL5'LGHR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B908',CL5'AGR  ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B909',CL5'SGR  ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90A',CL5'ALGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90B',CL5'SLGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90C',CL5'MSGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90D',CL5'DSGR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90E',CL5'EREGG',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B90F',CL5'LRVGR',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B910',CL5'LPGFR',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B911',CL5'LNGFR',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B912',CL5'LTGFR',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B913',CL5'LCGFR',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B914',CL5'LGFR ',AL1(RRE),AL1(0),AL1(A64),AL1(0),X'04'\n      DC  X'B916',CL5'LLGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B917',CL5'LLGTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B918',CL5'AGFR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91A',CL5'ALGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91B',CL5'SLGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91C',CL5'MSGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91D',CL5'DSGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91E',CL5'KMAC ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91F',CL5'LRVR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B920',CL5'CGR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B921',CL5'CLGR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B925',CL5'STURG',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B926',CL5'LBR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B927',CL5'LHR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B928',CL5'PCKMO',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92A',CL5'KMF  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92B',CL5'KMO  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92C',CL5'PCC  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92D',CL5'KMCTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92E',CL5'KM   ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92F',CL5'KMC  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B930',CL5'CGFR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B931',CL5'CLGFR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B93E',CL5'KIMD ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B93F',CL5'KLMD ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B941',CL5'CFDTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B942',CL6'CLGDTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B943',CL6'CLFDTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B946',CL5'BCTGR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B949',CL5'CFXTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B94A',CL6'CLGXTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B94B',CL6'CLFXTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B951',CL5'CDFTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B952',CL6'CDLGTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B953',CL6'CDLFTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B959',CL5'CXFTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B95A',CL6'CXLGTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B95B',CL6'CXLFTR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B960',CL5'CGRT ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B961',CL5'CLGRT',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B972',CL5'CRT  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B973',CL5'CLRT ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B980',CL5'NGR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B981',CL5'OGR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B982',CL5'XGR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B983',CL6'HFLOGR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B984',CL5'LLGCR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B985',CL5'LLGHR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B986',CL5'MLGR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B987',CL5'DLGR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B988',CL5'ALCGR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B989',CL5'SLBGR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B98A',CL5'CSPG ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B98D',CL5'EPSW ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B98E',CL5'IDTE ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B990',CL5'TRTT ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B991',CL5'TRTO ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B992',CL5'TROT ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B993',CL5'TROO ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B994',CL5'LLCR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B995',CL5'LLHR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B996',CL5'MLR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B997',CL5'DLR  ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B998',CL5'ALCR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B999',CL5'SLBR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B99A',CL5'EPAIR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99B',CL5'ESAIR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99D',CL5'ESEA ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99E',CL5'PTI  ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99F',CL5'SSAIR',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9A2',CL5'DPTF ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9AA',CL5'LPTEA',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9AE',CL5'RRBM ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9AF',CL5'PFMF ',AL1(RRE),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9B0',CL6'CU14 ',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9B1',CL6'CU24 ',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9B2',CL6'CU41 ',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9B3',CL6'CU42 ',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9BD',CL6'TRTRE',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9BE',CL6'SRSTU',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9BF',CL6'MTRME',AL1(RRF),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B9C8',CL6'AHHRR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9C9',CL6'SHHRR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9CA',CL6'ALHHRR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9CB',CL6'SLHHRR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9CD',CL5'CHHR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9CF',CL5'CLHHR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9D8',CL6'AHHLR ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9D9',CL6'SHHLR ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9DA',CL6'ALHHLR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9DB',CL6'SLHHLR',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9DD',CL5'CHLR ',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E1',CL6'POPCNT',AL1(RRE),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E2',CL6'LOCGR ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E4',CL6'NGRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E6',CL6'OGRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E7',CL6'XGRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E8',CL6'ARGK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9E9',CL6'SRGK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9EA',CL6'ALGRK ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9EB',CL6'SLGRK ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F2',CL6'LOCR  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F4',CL6'HNRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F6',CL6'ORK   ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F7',CL6'XRK   ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F8',CL6'ARK   ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9F9',CL6'SRK   ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9FA',CL6'ALRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B9FB',CL6'SLRK  ',AL1(RRF),AL1(0),AL1(0),AL1(0),X'04'\n*  C00 LARL    LOAD ADDRESS RELATIVE LONG\n*\n      DC  X'E500',CL5'LASP',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E501',CL5'TPROT',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E50E',CL5'MVCSK',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E50F',CL5'MVCDK',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E920',CL5'CGR',AL1(RRE),AL1(A64),AL1(0),AL1(0),X'06'\n      DC  X'E930',CL5'CGFR',AL1(RRE),AL1(A64),AL1(0),AL1(0),X'06'\n      DC  X'FFFF'                 TABLE END\nL3LOPV CSECT\nL3LOP  DS  0CL12                   12O-BYTE OP-CODE TABLE\n    DC  X'A500',CL5'IIHH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A501',CL5'IIHL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A502',CL5'IILH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A503',CL5'IILL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A504',CL5'NIHH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A505',CL5'NIHL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A506',CL5'NILH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A507',CL5'NILL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A508',CL5'OIHH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A509',CL5'OIHL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50A',CL5'OIHH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50B',CL5'OILL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50C',CL5'LLIHH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50D',CL5'LLIHL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50E',CL5'LLILH',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50F',CL5'LLILL',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A700',CL5'TMLH',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(ARITH),X'04'\n    DC  X'A701',CL5'TMLL',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(ARITH),X'04'\n    DC  X'A702',CL5'TMHH',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(ARITH),X'04'\n    DC  X'A703',CL5'TMHL',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(ARITH),X'04'\n    DC  X'A704',CL5'JNOP',AL1(RI1),AL1(0),AL1(0),AL1(0),X'04'\n    DC  X'A705',CL5'BRAS',AL1(RI1),AL1(0),AL1(0),AL1(8),X'04'\n    DC  X'A706',CL5'BRCT',AL1(RI1),AL1(0),AL1(0),AL1(8),X'04'\n    DC  X'A707',CL5'BRCTG',AL1(RI1),AL1(A64),AL1(0),AL1(8),X'04'\n    DC  X'A708',CL5'LHI',AL1(RI2),AL1(0),AL1(0),AL1(0),X'04'\n    DC  X'A709',CL5'LGHI',AL1(RI2),AL1(A64),AL1(0),AL1(0),X'04'\n    DC  X'A70A',CL5'AHI',AL1(RI2),AL1(0),AL1(0),AL1(0),X'04'\n    DC  X'A70B',CL5'AGHI',AL1(RI2),AL1(A64),AL1(0),AL1(0),X'04'\n    DC  X'A70C',CL5'MHI',AL1(RI2),AL1(0),AL1(0),AL1(0),X'04'\n    DC  X'A70D',CL5'MGHI',AL1(RI2),AL1(A64),AL1(0),AL1(0),X'04'\n    DC  X'A70E',CL5'CHI',AL1(RI2),AL1(0),AL1(0),AL1(CPR),X'04'\n    DC  X'A70F',CL5'CGHI',AL1(RI2),AL1(A64),AL1(0),AL1(CPR),X'04'\n*  C00 LARL    LOAD ADDRESS RELATIVE LONG\n    DC  X'C000',CL5'LARL',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n*  C01 LOAD IMMEDIATE              LGFI R6,200000  C06100030D40\n    DC  X'C001',CL5'LGFI',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n*  C04 BRCL                                   BRCL\n    DC  X'C004',CL5'BRCL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n*  C05 BRASL   BRANCH RELATIVE AND SAVE LONG  BRAS R1,I2L\n    DC  X'C005',CL5'BRASL',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C006',CL5'XIHF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C007',CL5'XILF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C008',CL5'IIHF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C009',CL5'IILF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00A',CL5'NIHF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00B',CL5'NILF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00C',CL5'OIHF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00D',CL5'OILF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00E',CL5'LLIHF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00F',CL5'LLILF',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C201',CL5'MSFI',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C205',CL5'SLFI',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n*  C29 ADD IMMEDIATE             AFI R5,200000   C25900030D40\n    DC  X'C209',CL5'AFI',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C20B',CL5'ALFI',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C20D',CL5'CFI',AL1(RIL2),AL1(0),AL1(0),AL1(CPR),X'06'\n    DC  X'C20F',CL5'CLFI',AL1(RIL2),AL1(0),AL1(0),AL1(CPR),X'06'\n    DC  X'FFFF'                 TABLE END\n*\nL4LOPV CSECT\nL4LOP  DS  0CL12\n    DC  X'E302',CL5'LTG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E303',CL5'LRAG',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E304',CL5'LG  ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E306',CL5'LVBY',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E308',CL5'AG  ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E309',CL5'SG  ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30A',CL5'ALG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30B',CL5'SLG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30C',CL5'MSG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30D',CL5'DSG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30E',CL5'CVBG',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E30F',CL5'LRVG',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E313',CL5'LRAY',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E314',CL5'LGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E315',CL5'LGH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E316',CL5'LLGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E317',CL5'LLGT',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E318',CL5'AGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E319',CL5'SGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31A',CL5'ALGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31B',CL5'SLGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31C',CL5'MSGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31D',CL5'DSGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31E',CL5'LRV',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E31F',CL5'LRVH',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E320',CL5'CG ',AL1(RXE),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E321',CL5'CLG',AL1(RXE),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E324',CL5'STG',AL1(RXE),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E326',CL5'CVDY',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E32E',CL5'CVDG',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E32F',CL5'STRVG',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E330',CL5'CGF  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E331',CL5'CLGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E332',CL5'LTGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E334',CL5'CGH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E336',CL5'PFD  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E33E',CL5'STRV ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E33F',CL5'STRVH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E345',CL5'LDXBR',AL1(RRE),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E346',CL5'BCTG ',AL1(RXY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'E350',CL5'STY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E351',CL5'MSY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E354',CL5'NY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E355',CL5'CLY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E356',CL5'OY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E357',CL5'XY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E358',CL5'LY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E359',CL5'CY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E35A',CL5'AY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E35B',CL5'BY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E35C',CL5'MFY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E35E',CL5'ALY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E35F',CL5'SLY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E370',CL5'STHY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E371',CL5'LAY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E372',CL5'STCY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E373',CL5'ICY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E375',CL5'LAEY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E376',CL5'LB   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E377',CL5'LGB  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E378',CL5'LHY',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'E379',CL5'CHY',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'E37A',CL5'AHY',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'E37B',CL5'SHY',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'E37C',CL5'MHY',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'E380',CL5'NG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E381',CL5'OG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E382',CL5'XG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E386',CL5'MLG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E387',CL5'DLG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E388',CL5'ALCG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E389',CL5'SLBG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E38E',CL5'STPQ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E38F',CL5'LPQ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E390',CL5'LLGC',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E391',CL5'LLGH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E394',CL5'LLC ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E395',CL5'LLH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E396',CL5'ML ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E397',CL5'MDL',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E398',CL5'ALC',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E399',CL5'SLB',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C0',CL5'LBH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C2',CL5'LLCH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C3',CL5'STCH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C4',CL5'LHH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C6',CL5'LLHH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3C7',CL5'STHH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3CA',CL5'LFH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3CB',CL5'STFH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3CD',CL5'CHF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E3CF',CL5'CLHF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB04',CL5'LMG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB0A',CL5'SRAG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB0B',CL5'SLAG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB0C',CL5'SRLG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB0D',CL5'SLLG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB0F',CL5'TRACG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB14',CL5'CSY  ',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB1C',CL5'RLLG ',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB1D',CL5'RLL  ',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB20',CL5'CLMH',AL1(RSY),AL1(0),AL1(T8),AL1(CPR),X'06'\n    DC  X'EB21',CL5'CLMY',AL1(RSY),AL1(0),AL1(T8),AL1(CPR),X'06'\n    DC  X'EB24',CL5'STMG',AL1(RSY),AL1(0),AL1(0),AL1(CPR),X'06'\n    DC  X'EB25',CL5'STCTG',AL1(RSY),AL1(A64),AL1(0),AL1(0),X'06'\n    DC  X'EB26',CL5'STMH',AL1(RSY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'EB2C',CL5'STCMH',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB2D',CL5'STCMY',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB2F',CL5'LCTLG',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB30',CL5'CSG  ',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB31',CL5'CDSY ',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB3E',CL5'CDSG',AL1(RSY),AL1(PRIV),AL1(E4+EPR),AL1(0),X'06'\n    DC  X'EB44',CL5'BXHG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB45',CL5'BXLEG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB4C',CL5'ECAG ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB51',CL5'TMY  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB52',CL5'MVIY ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB54',CL5'NIY  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB56',CL5'OIY  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB57',CL5'XIY  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB6A',CL5'ASI  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB6E',CL5'ALSI ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB7A',CL5'AGSI ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB7E',CL5'ALGSI',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB80',CL5'ICMH',AL1(RSY),AL1(0),AL1(T8+S2),AL1(ZRO8),X'06'\n    DC  X'EB81',CL5'ICMY',AL1(RSY),AL1(0),AL1(T8+S2),AL1(ZRO8),X'06'\n    DC  X'EB8E',CL5'MVCLU',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB8F',CL5'CLCLU',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB90',CL5'STMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB96',CL5'LMH',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB98',CL5'LMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB9A',CL5'LAMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB9B',CL5'STAMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBC0',CL5'TP',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDC',CL5'SRAK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDD',CL5'SLAK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDE',CL5'SRLK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDF',CL5'SLLK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE2',CL5'LOCG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE3',CL5'STOCG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE4',CL5'LANG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE6',CL5'LAOG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE7',CL5'LAXG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE8',CL5'LAAG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBEA',CL5'LAALG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF2',CL5'LOC  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF3',CL5'STOC ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF4',CL5'LAN  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF6',CL5'LAO  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF7',CL5'LAX  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF8',CL5'LAA  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBFA',CL5'LAAL ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'FFFF'                 TABLE END\nJMPLOPV CSECT\nJMPLOP DS  0CL27                JMPLEN EQU 27\n       DC  X'10',CL5'O    ',CL3'O',CL9'ONE',CL9'ONE'\n       DC  X'20',CL5'H    ',CL3'P',CL9'HIGH',CL9'PLUS'\n       DC  X'30',CL5'C  3,',CL3'C',CL9'COND 3',CL9'COND 3'\n       DC  X'40',CL5'L    ',CL3'M',CL9'LESS',CL9'MINUS'\n       DC  X'50',CL5'C  5,',CL3'C',CL9'COND 5',CL9'COND 5'\n       DC  X'60',CL5'C  6,',CL3'C',CL9'COND 6',CL9'COND 6'\n       DC  X'70',CL5'NE   ',CL3'NZ',CL9'NOT EQUAL',CL9'NOT ZERO'\n       DC  X'80',CL5'E    ',CL3'Z ',CL9'EQUAL',CL9'ZERO'\n       DC  X'90',CL5'C  9,',CL3'C ',CL9'COND 9',CL9'COND 9'\n       DC  X'A0',CL5'C 10,',CL3'C ',CL9'COND 10',CL9'COND 10'\n       DC  X'B0',CL5'NL   ',CL3'NM',CL9'NOT LESS',CL9'NOT MINUS'\n       DC  X'C0',CL5'C 12,',CL3'C ',CL9'COND 12',CL9'COND 12'\n       DC  X'D0',CL5'NH   ',CL3'NP',CL9'NOT HIGH',CL9'NOT PLUS'\n       DC  X'E0',CL5'NO   ',CL3'NO',CL9'NOT ONE',CL9'NOT ONE'\n       DC  X'F0',CL5'     ',CL3'  ',CL9' ',CL9' '\n       DC  X'FF'                  TABLE END\n*\nSVCOPV   CSECT =S;\nSVCOP    DS    0CL17                   SVC NAME TABLE   AC 20/10/87\n         DC    AL1(0),CL16'EXCP/XDAP'\n         DC    AL1(1),CL16'WAIT/WAITR'\n         DC    AL1(2),CL16'POST/PRTOV'\n         DC    AL1(3),CL16'EXIT'\n         DC    AL1(4),CL16'GETMAIN'\n         DC    AL1(5),CL16'FREEMAIN'\n         DC    AL1(6),CL16'LINK'\n         DC    AL1(7),CL16'XCTL'\n         DC    AL1(8),CL16'LOAD'\n         DC    AL1(9),CL16'DELETE'\n         DC    AL1(10),CL16'GET/FREEMAIN R'\n         DC    AL1(11),CL16'TIME'\n         DC    AL1(12),CL16'SYNCH'\n         DC    AL1(13),CL16'ABEND'\n         DC    AL1(14),CL16'SPIE'\n         DC    AL1(15),CL16'ERREXCP'\n         DC    AL1(16),CL16'PURGE'\n         DC    AL1(17),CL16'RESTORE'\n         DC    AL1(18),CL16'BLDL/FIND'\n         DC    AL1(19),CL16'OPEN'\n         DC    AL1(20),CL16'CLOSE'\n         DC    AL1(21),CL16'STOW'\n         DC    AL1(22),CL16'OPEN TYPE J'\n         DC    AL1(23),CL16'CLOSE TYPE T'\n         DC    AL1(24),CL16'DEVTYPE'\n         DC    AL1(25),CL16'TRKBRAS'\n         DC    AL1(26),CL16'LOCATE, ETC'\n         DC    AL1(27),CL16'OBTAIN'\n         DC    AL1(29),CL16'SCRATCH'\n         DC    AL1(30),CL16'RENAME'\n         DC    AL1(31),CL16'FEOV'\n         DC    AL1(32),CL16'(NO MACRO)'\n         DC    AL1(33),CL16'IOHALT'\n         DC    AL1(34),CL16'MGCR/QEDIT'\n         DC    AL1(35),CL16'WTO/WTOR'\n         DC    AL1(36),CL16'WTL'\n         DC    AL1(37),CL16'SEGLD/SEGWT'\n         DC    AL1(39),CL16'LABEL'\n         DC    AL1(40),CL16'EXTRACT'\n         DC    AL1(41),CL16'IDENTIFY'\n         DC    AL1(42),CL16'ATTACH'\n         DC    AL1(43),CL16'CIRB'\n         DC    AL1(44),CL16'CHAP'\n         DC    AL1(45),CL16'OVLYBRCH'\n         DC    AL1(46),CL16'TTIMER'\n         DC    AL1(47),CL16'STIMER'\n         DC    AL1(48),CL16'DEQ'\n         DC    AL1(51),CL16'SNAP/SDUMP'\n         DC    AL1(52),CL16'RESTART'\n         DC    AL1(53),CL16'RELEX'\n         DC    AL1(54),CL16'DISABLE'\n         DC    AL1(55),CL16'EOV'\n         DC    AL1(56),CL16'ENQ/RESERVE'\n         DC    AL1(57),CL16'FREEDBUF'\n         DC    AL1(58),CL16'RELBUF/REQBUF'\n         DC    AL1(59),CL16'OLTEP'\n         DC    AL1(60),CL16'(E)STAE/STAI'\n         DC    AL1(61),CL16'IKJEGS6A TSO/E'\n         DC    AL1(62),CL16'DETACH'\n         DC    AL1(63),CL16'CHKPT'\n         DC    AL1(64),CL16'RDJFCB'\n         DC    AL1(66),CL16'BTAMTEST'\n         DC    AL1(68),CL16'SYNADRLS/SYNADAF'\n         DC    AL1(69),CL16'BSP'\n         DC    AL1(70),CL16'GSERV'\n         DC    AL1(71),CL16'ASGNBFR, ETC'\n         DC    AL1(72),CL16'CHATR'\n         DC    AL1(73),CL16'SPAR'\n         DC    AL1(74),CL16'DAR'\n         DC    AL1(75),CL16'DQUEUE'\n         DC    AL1(76),CL16'(NO MACRO)'\n         DC    AL1(78),CL16'LSPACE'\n         DC    AL1(79),CL16'STATUS'\n         DC    AL1(81),CL16'SETPRT'\n         DC    AL1(83),CL16'SMFWTM'\n         DC    AL1(84),CL16'GRAPHICS'\n         DC    AL1(85),CL16'DDRSWAP'\n         DC    AL1(86),CL16'ATLAS'\n         DC    AL1(87),CL16'DOM'\n         DC    AL1(91),CL16'VOLSTAT'\n         DC    AL1(92),CL16'TCBEXCP'\n         DC    AL1(93),CL16'TGET/TPUT'\n         DC    AL1(94),CL16'STCC'\n         DC    AL1(95),CL16'SYSEVENT'\n         DC    AL1(96),CL16'STAX'\n         DC    AL1(97),CL16'TSO TEST'\n         DC    AL1(98),CL16'PROTECT'\n         DC    AL1(99),CL16'DYNALLOC'\n         DC    AL1(100),CL16'IKJEFFIB'\n         DC    AL1(101),CL16'QTIP'\n         DC    AL1(102),CL16'AQCTL'\n         DC    AL1(103),CL16'XLATE'\n         DC    AL1(104),CL16'TOPCTL'\n         DC    AL1(105),CL16'IMAGLIB'\n         DC    AL1(107),CL16'MODESET'\n         DC    AL1(109),CL16'ESR TYPE 4'\n         DC    AL1(110),CL16'(NO MACRO)'\n         DC    AL1(111),CL16'(NO MACRO)'\n         DC    AL1(112),CL16'PGRLSE'\n         DC    AL1(113),CL16'PGFIX,CL14' ETC'\n         DC    AL1(114),CL16'EXCPVR'\n         DC    AL1(116),CL16'ESR TYPE 1'\n         DC    AL1(117),CL16'DEBCHK'\n         DC    AL1(119),CL16'TESTAUTH'\n         DC    AL1(120),CL16'GETMAIN/FREEMAIN'\n         DC    AL1(121),CL16'VSAM'\n         DC    AL1(122),CL16'EVENTS'\n         DC    AL1(123),CL16'PURGEDQ'\n         DC    AL1(124),CL16'TPIO'\n         DC    AL1(125),CL16'EVENTS'\n         DC    AL1(126),CL16'MSS INTERFACE'\n         DC    AL1(130),CL16'RACHECK'         NEW MACRO\n         DC    AL1(131),CL16'RACINIT'         NEW MACRO\n         DC    AL1(132),CL16'RACLIST/RACXTRT' NEW MACRO\n         DC    AL1(133),CL16'RACDEF'          NEW MACRO\n         DC    AL1(137),CL16'ESR TYPE 2'      NEW MACRO\n         DC    AL1(138),CL16'PGSER'           NEW MACRO\n         DC    AL1(139),CL16'CVAF'            NEW MACRO\n         DC    X'FF'                   END OF TABLE\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISOPT1": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x044\\x044\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 1076, "newlines": 1076, "modlines": 0, "user": "ASM"}, "text": "          HDISEQU\nSGLOPV CSECT\nSGLOP  DS    0CL11                   SINGLE BYTE OP-CODE TABLE\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'          00\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'         01\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'          02\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'          03\n       DC    CL6'SPM',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02'     04\n       DC    CL6'BALR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'       05\n       DC    CL6'BCTR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'       06\n*      DC    CL6'BCR',AL1(RR),AL1(RB),AL1(0),AL1(0),X'02'       07\n       DC    CL6'BCR',AL1(CONDBR),AL1(RB),AL1(0),AL1(0),X'02'   07\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'02'          08\n       DC    CL6'ISK',AL1(RR),AL1(PRIV),AL1(0),AL1(0),X'02'     09\n       DC    CL6'SVC',AL1(SVC),AL1(0),AL1(0),AL1(0),X'02'       0A\n       DC    CL6'BSM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'        0B\n       DC    CL6'BASSM',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'      0C\n       DC    CL6'BASR',AL1(RR),AL1(0),AL1(0),AL1(0),X'02'       0D\n       DC    CL6'MVCL',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'     0E\n       DC    CL6'CLCL',AL1(RR),AL1(0),AL1(EPR),AL1(CMP),X'02'   0F\n       DC    CL6'LPR',AL1(RR),AL1(0),AL1(0),AL1(CLP),X'02'      10\n       DC    CL6'LNR',AL1(RR),AL1(0),AL1(0),AL1(CLN),X'02'      11\n       DC    CL6'LTR',AL1(RR),AL1(LROP),AL1(T8),AL1(CLT),X'02'  12\n       DC    CL6'LCR',AL1(RR),AL1(0),AL1(0),AL1(CLCM),X'02'     13\n       DC    CL6'NR',AL1(RR),AL1(0),AL1(0),AL1(CZRO),X'02'      14\n       DC    CL6'CLR',AL1(RR),AL1(0),AL1(0),AL1(CMP),X'02'      15\n       DC    CL6'OR',AL1(RR),AL1(0),AL1(0),AL1(CZRO),X'02'      16\n       DC    CL6'XR',AL1(RR),AL1(CDOR),AL1(0),AL1(CZRO),X'02'   17\n       DC    CL6'LR',AL1(RR),AL1(LROP),AL1(0),AL1(0),X'02'      18\n       DC    CL6'CR',AL1(RR),AL1(0),AL1(0),AL1(CMP),X'02'       19\n       DC    CL6'AR',AL1(RR),AL1(CDOP),AL1(0),AL1(CA1),X'02'    1A\n       DC    CL6'SR',AL1(RR),AL1(CDOR),AL1(0),AL1(CA3),X'02'    1B\n       DC    CL6'MR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'       1C\n       DC    CL6'DR',AL1(RR),AL1(0),AL1(EPR),AL1(0),X'02'       1D\n       DC    CL6'ALR',AL1(RR),AL1(CDOP),AL1(0),AL1(CA2),X'02'   1E\n       DC    CL6'SLR',AL1(RR),AL1(CDOR),AL1(0),AL1(CA2),X'02'     1F\n       DC    CL6'LPDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   20\n       DC    CL6'LNDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   21\n       DC    CL6'LTDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   22\n       DC    CL6'LCDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   23\n       DC    CL6'HDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      24\n       DC    CL6'LRDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     25\n       DC    CL6'MXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      26\n       DC    CL6'MXDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     27\n       DC    CL6'LDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      28\n       DC    CL6'CDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CMP),X'02'    29\n       DC    CL6'ADR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    2A\n       DC    CL6'SDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    2B\n       DC    CL6'MDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      2C\n       DC    CL6'DDR',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      2D\n       DC    CL6'AWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    2E\n       DC    CL6'SWR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    2F\n       DC    CL6'LPER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   30\n       DC    CL6'LNER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   31\n       DC    CL6'LTER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   32\n       DC    CL6'LCER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'   33\n       DC    CL6'HER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      34\n       DC    CL6'LRER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'     35\n       DC    CL6'AXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    36\n       DC    CL6'SXR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    37\n       DC    CL6'LER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      38\n       DC    CL6'CER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CMP),X'02'    39\n       DC    CL6'AER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02 '   3A\n       DC    CL6'SER',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    3B\n       DC    CL6'MER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      3C\n       DC    CL6'DER',AL1(RR),AL1(FLTPT),AL1(0),AL1(0),X'02'      3D\n       DC    CL6'AUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    3E\n*                  ADD UNNORAMLISE\n       DC    CL6'SUR',AL1(RR),AL1(FLTPT),AL1(0),AL1(CA1),X'02'    3F\n*                  SUBTRACT UNNORAMLISE\n       DC    CL6'STH',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'24'      40\n       DC    CL6'LA',AL1(RX),AL1(LIOP+NPSA),AL1(0),AL1(0),X'14'   41\n       DC    CL6'STC',AL1(RX),AL1(0),AL1(S2),AL1(0),X'14'         42\n       DC    CL6'IC',AL1(RX),AL1(LIOP),AL1(0),AL1(0),X'14'        43\n       DC    CL6'EX',AL1(RX),AL1(0),AL1(E2+S2),AL1(0),X'44'       44\n       DC    CL6'BAL',AL1(RX),AL1(RB),AL1(E2),AL1(0),X'44'        45\n       DC    CL6'BCT',AL1(RX),AL1(RB),AL1(E2+S2),AL1(0),X'04'     46\n       DC    CL6'BC',AL1(CONDBR),AL1(RB),AL1(E2),AL1(0),X'04'     47\n       DC    CL6'LH',AL1(RX),AL1(CDOP),AL1(E2),AL1(0),X'24'       48\n       DC    CL6'CH',AL1(RX),AL1(LL2),AL1(E2),AL1(CMP),X'24'      49\n       DC    CL6'AH',AL1(RX),AL1(CDOPA),AL1(E2),AL1(CA1),X'24'    4A\n       DC    CL6'SH',AL1(RX),AL1(CDOP),AL1(E2),AL1(CA3),X'24'     4B\n       DC    CL6'MH',AL1(RX),AL1(LL2),AL1(E2),AL1(0),X'24'        4C\n       DC    CL6'BAS',AL1(RX),AL1(0),AL1(E2),AL1(0),X'44'         4D\n       DC    CL6'CVD',AL1(RX),AL1(LL8),AL1(E8+S2),AL1(0),X'04'    4E\n       DC    CL6'CVB',AL1(RX),AL1(0),AL1(E8),AL1(0),X'04'         4F\n       DC    CL6'ST',AL1(RX),AL1(LL4),AL1(E4+S2),AL1(0),X'44'     50\n       DC    CL6'LAE',AL1(RX),AL1(LIOP+NPSA),AL1(0),AL1(0),X'04'  51\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'     NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'     NOT INSTR\n       DC    CL6'N',AL1(RX),AL1(LL4),AL1(E4),AL1(CZRO),X'44'      54\n       DC    CL6'CL',AL1(RX),AL1(LL4),AL1(E4),AL1(CMP),X'44'      55\n       DC    CL6'O',AL1(RX),AL1(LL4),AL1(E4),AL1(CZRO),X'44'      56\n       DC    CL6'X',AL1(RX),AL1(LL4),AL1(E4),AL1(CZRO),X'44'      57\n       DC    CL6'L',AL1(RX),AL1(LIOP),AL1(E4),AL1(0),X'44'        58\n       DC    CL6'C',AL1(RX),AL1(LL4),AL1(E4),AL1(CMP),X'44'       59\n       DC    CL6'A',AL1(RX),AL1(CDOPA),AL1(E4),AL1(CA1),X'44'     5A\n       DC    CL6'S',AL1(RX),AL1(CDOP),AL1(E4),AL1(CA3),X'44'      5B\n       DC    CL6'M',AL1(RX),AL1(CDOP),AL1(E4+EPR),AL1(0),X'44'    5C\n       DC    CL6'D',AL1(RX),AL1(LL4),AL1(E4+EPR),AL1(0),X'44'     5D\n       DC    CL6'AL',AL1(RX),AL1(CDOPA),AL1(E4),AL1(CA2),X'44'    5E\n       DC    CL6'SL',AL1(RX),AL1(CDOP),AL1(E4),AL1(CA4),X'44'     5F\n       DC    CL6'STD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'      60\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 61\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 62\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 63\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 64\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 65\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 66\n       DC    CL6'MXD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'      67\n       DC    CL6'LD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'       68\n       DC    CL6'CD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CMP),X'04'     69\n       DC    CL6'AD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CA1),X'04'     6A\n       DC    CL6'SD',AL1(RX),AL1(FLTPT),AL1(0),AL1(CA1),X'04'     6B\n       DC    CL6'MD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'       6C\n       DC    CL6'DD',AL1(RX),AL1(FLTPT),AL1(0),AL1(0),X'04'       6D\n       DC    CL6'AW',AL1(RX),AL1(FLTPT),AL1(0),AL1(CA1),X'04'     6E\n*                  ADD UNNORAMLISE\n       DC    CL6'SW',AL1(RX),AL1(FLTPT),AL1(0),AL1(CA1),X'04'     6F\n*                  SUBTRACT UNNORAMLISE\n       DC    CL6'STE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'      70\n       DC    CL6'MS',AL1(RX),AL1(0),AL1(E2),AL1(0),X'04'          71\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 72\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 73\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 74\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 75\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 76\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR 77\n       DC    CL6'LE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'       78\n       DC    CL6'CE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CMP),X'04'     79\n       DC    CL6'AE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CA1),X'04'     7A\n       DC    CL6'SE',AL1(RX),AL1(FLSHT),AL1(0),AL1(CA1),X'04'     7B\n       DC    CL6'ME',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'       7C\n       DC    CL6'DE',AL1(RX),AL1(FLSHT),AL1(0),AL1(0),X'04'       7D\n       DC    CL6'AU',AL1(RX),AL1(FLSHT),AL1(0),AL1(CA1),X'04'     7E\n       DC    CL6'SU',AL1(RX),AL1(FLSHT),AL1(0),AL1(CA1),X'04'     7F\n       DC    CL6'SSM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'        80\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'      NOT INSTR\n       DC    CL6'LPSW',AL1(S),AL1(PRIV),AL1(E8),AL1(0),X'04'    82\n       DC    CL6'DIAG',AL1(RS),AL1(PRIVP),AL1(0),AL1(0),X'04'   83\n       DC    CL6'BRXH',AL1(RSI),AL1(PRIV),AL1(0),AL1(0),X'04'   84\n       DC    CL6'BRXLE',AL1(RSI),AL1(PRIV),AL1(0),AL1(0),X'04'  85\n       DC    CL6'BXH',AL1(RS),AL1(RB),AL1(E2+S2),AL1(0),X'04'   86\n       DC    CL6'BXLE',AL1(RS),AL1(RB),AL1(E2+S2),AL1(0),X'04'  87\n       DC    CL6'SRL',AL1(RS),AL1(NPSA),AL1(0),AL1(0),X'04'     88\n       DC    CL6'SLL',AL1(RS),AL1(NPSA),AL1(0),AL1(0),X'04'     89\n       DC    CL6'SRA',AL1(RS),AL1(NPSA),AL1(0),AL1(CLT),X'04'   8A\n       DC    CL6'SLA',AL1(RS),AL1(NPSA),AL1(0),AL1(0),X'04'     8B\n       DC    CL6'SRDL',AL1(RS),AL1(NPSA),AL1(EPR),AL1(0),X'04'  8C\n       DC    CL6'SLDL',AL1(RS),AL1(NPSA),AL1(EPR),AL1(0),X'04'  8D\n       DC    CL6'SRDA',AL1(RS),AL1(NPSA),AL1(EPR),AL1(CLT),X'04'  8E\n       DC    CL6'SLDA',AL1(RS),AL1(NPSA),AL1(EPR),AL1(CLCM),X'04' 8F\n       DC    CL6'STM',AL1(RS),AL1(0),AL1(E4+S2),AL1(0),X'04'      90\n       DC    CL6'TM',AL1(SI),AL1(BMP),AL1(T8),AL1(CTM),X'04'      91\n       DC    CL6'MVI',AL1(SI),AL1(BMP),AL1(S2),AL1(0),X'04'       92\n       DC    CL6'TS',AL1(S),AL1(LL4),AL1(0),AL1(0),X'04'          93\n       DC    CL6'NI',AL1(SI),AL1(BMP),AL1(0),AL1(CZRO),X'04'      94\n       DC    CL6'CLI',AL1(SI),AL1(BMP),AL1(0),AL1(CMP),X'04'      95\n       DC    CL6'OI',AL1(SI),AL1(BMP),AL1(0),AL1(CZRO),X'04'      96\n       DC    CL6'XI',AL1(SI),AL1(BMP),AL1(0),AL1(CZRO),X'04'      97 p\n       DC    CL6'LM',AL1(RS),AL1(0),AL1(E4),AL1(0),X'04'          98 q\n       DC    CL6'TRACE',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04'     99 r\n       DC    CL6'LAM',AL1(RS),AL1(AR2),AL1(E4),AL1(0),X'04'       9A\n       DC    CL6'STAM',AL1(RS),AL1(AR2),AL1(E4),AL1(0),X'04'      9B\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'           9C\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          9D\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          9E\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          9F\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A0\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A1\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A2\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR A3\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'           A4\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'           A5\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          A6\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'04'           A7\n       DC    CL6'MVCLE',AL1(RSA),AL1(NPSA),AL1(0),AL1(0),X'04'   A8\n       DC    CL6'CMPE',AL1(RSA),AL1(NPSA),AL1(0),AL1(CMP),X'04' A9\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          AA\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR AB\n       DC    CL6'STNSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04'    AC\n       DC    CL6'STOSM',AL1(SI),AL1(PRIV),AL1(0),AL1(0),X'04'    AD\n       DC    CL6'SIGP',AL1(RS),AL1(PRIV),AL1(0),AL1(0),X'04'     AE\n       DC    CL6'MC',AL1(SI),AL1(PRIVP),AL1(0),AL1(0),X'04'      AF\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04' NOT INSTR B0\n       DC    CL6'LRA',AL1(RX),AL1(PRIV),AL1(0),AL1(CLRA),X'44'   B1\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          B2\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          B3\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'    NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'    NOT INSTR\n       DC    CL6'STCTL',AL1(RS),AL1(PRIV+CR),AL1(0),AL1(0),X'44' B6\n       DC    CL6'LCTL',AL1(RS),AL1(PRIV+CR),AL1(E4),AL1(0),X'44' B7\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'    NOT INSTR\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'04'          B9\n       DC    CL6'CS',AL1(RS),AL1(LL4),AL1(E4),AL1(CCS),X'44'   BA\n       DC    CL6'CDS',AL1(RS),AL1(LL8),AL1(E4+EPR),AL1(CCS),X'84' BB\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'04'  NOT INSTR\n       DC    CL6'CLM',AL1(RS),AL1(0),AL1(T8),AL1(CMP),X'44'    BD\n       DC    CL6'STCM',AL1(RS),AL1(0),AL1(T8+S2),AL1(0),X'44'  BE\n       DC    CL6'ICM',AL1(RS),AL1(LIOP),AL1(T8+S2),AL1(CICM),X'44' BF\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'         C0\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR C1\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'         C2\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C3\n       DC    CL6'  ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'        C4\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C5\n*      DC    CL6'BPRP',AL1(MII),AL1(0),AL1(0),AL1(0),X'06'     C5\n       DC    CL6'  ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'        C6\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C7\n*      DC    CL6'BPP',AL1(SMI),AL1(0),AL1(0),AL1(0),X'06'      C7\n       DC    CL6'  ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'        C8\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         C9\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CA\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CB\n       DC    CL6' ',AL1(L3),AL1(0),AL1(0),AL1(0),X'06'         CC\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CD\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CE\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         CF\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'         D0\n       DC    CL6'MVN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D1\n       DC    CL6'MVC',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D2\n       DC    CL6'MVZ',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'      D3\n       DC    CL6'NC',AL1(SS1),AL1(0),AL1(S1),AL1(CZRO),X'06'    D4\n       DC    CL6'CLC',AL1(SS1),AL1(0),AL1(0),AL1(CMP),X'06'     D5\n       DC    CL6'OC',AL1(SS1),AL1(0),AL1(S1),AL1(CZRO),X'06'    D6\n       DC    CL6'XC',AL1(SS1),AL1(0),AL1(S1),AL1(CZRO),X'06'    D7\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'          D8\n       DC    CL6'MVCK',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      D9\n       DC    CL6'MVCP',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      DA\n       DC    CL6'MVCS',AL1(SS3),AL1(0),AL1(0),AL1(0),X'06'      DB\n       DC    CL6'TR',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'       DC\n       DC    CL6'TRT',AL1(SS1),AL1(0),AL1(0),AL1(CTRT),X'06'    DD\n       DC    CL6'ED',AL1(SS1),AL1(0),AL1(S1),AL1(CED),X'06'     DE\n       DC    CL6'EDMK',AL1(SS1),AL1(0),AL1(S1),AL1(CED),X'06'   DF\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL6'PKU',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'      E1\n       DC    CL6'UNPKU',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'    E2\n       DC    CL6' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         E3\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL6' ',AL1(TWO),AL1(0),AL1(0),AL1(0),X'06'        E5\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INST6\n*      DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INST7\n       DC    CL6' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         E7\n       DC    CL6'MVCIN',AL1(SS1),AL1(0),AL1(S1),AL1(0),X'06'   E8\n       DC    CL6'PKA',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'      E9\n       DC    CL6'UNPKA',AL1(SS4),AL1(0),AL1(0),AL1(0),X'06'    EA\n       DC    CL6' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         EB\n       DC    CL6' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         EC\n       DC    CL6' ',AL1(L4),AL1(0),AL1(0),AL1(0),X'06'         ED\n       DC    CL6'PLO',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'   EE\n       DC    CL6'LMD',AL1(SSE2),AL1(0),AL1(0),AL1(0),X'06'     EF\n       DC    CL6'SRP',AL1(SS2),AL1(0),AL1(S1),AL1(CA1),X'06'   F0\n       DC    CL6'MVO',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'     F1\n       DC    CL6'PACK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'    F2\n       DC    CL6'UNPK',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'    F3\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06' NOT INSTR\n       DC    CL6'ZAP',AL1(SS2),AL1(0),AL1(S1),AL1(CA1),X'06'   F8\n       DC    CL6'CP',AL1(SS2),AL1(0),AL1(0),AL1(CMP),X'06'     F9\n       DC    CL6'AP',AL1(SS2),AL1(0),AL1(S1),AL1(CA1),X'06'    FA\n       DC    CL6'SP',AL1(SS2),AL1(0),AL1(S1),AL1(CA1),X'06'    FB\n       DC    CL6'MP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'      FC\n       DC    CL6'DP',AL1(SS2),AL1(0),AL1(S1),AL1(0),X'06'      FD\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR\n       DC    XL6'00',AL1(0),AL1(0),AL1(0),AL1(0),X'06'  NOT INSTR\n       DC    X'FFFF'                 TABLE END\n*\n*\n*\nDBLOPV CSECT\nDBLOP  DS  0CL13                DOUBLE-BYTE OP-CODE TABLE\n      DC  X'0101',CL6'PR ',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0102',CL6'UPT',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0103',CL6'?0103',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n      DC  X'0104',CL6'PTFF',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'0105',CL6'CMSG ',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n*     CLEAR MESSAGE\n      DC  X'0106',CL6'TMSG ',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n*     TEST MESSAGE\n      DC  X'0107',CL6'SCKPF',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n*     Set TOD Programmable Field\n      DC  X'0108',CL6'TMPS',AL1(E),AL1(PRIV),AL1(0),AL1(CZRO),X'02'\n*                     Test Message Path State\n      DC  X'0109',CL6'CMPS',AL1(E),AL1(PRIV),AL1(0),AL1(0),X'02'\n*  Clear Message Path State (This instruction is a Coupling Facility)\n      DC  X'010A',CL6'PFPO',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010B',CL6'TAM',AL1(E),AL1(0),AL1(0),AL1(C40),X'02'\n      DC  X'010C',CL6'SAM24',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010D',CL6'SAM31',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'010E',CL6'SAM64',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n      DC  X'01FF',CL6'TRAP2',AL1(E),AL1(0),AL1(0),AL1(0),X'02'\n* THE FOLLOWING INSTRUCTIONS ARE OBSOLETE\n      DC  X'9C00',CL6'SIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9C01',CL6'SIOF',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9D00',CL6'TIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9D01',CL6'CLRIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9E00',CL6'HIO',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9E01',CL6'HDV',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'9F00',CL6'TCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'A400',CL6'VAE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'A500',CL6'VAER',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A600',CL6'VMXSE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A602',CL6'VMXAE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A608',CL6'VLELE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A609',CL6'VXELE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A610',CL6'VMXSD',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A611',CL6'VMNSD',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A612',CL6'VMXAD',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'A618',CL6'VMELD',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'AA02',CL6'?AA02',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'AA03',CL6'?AA03',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'B200',CL6'CONCS',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B201',CL6'DISCS',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B202',CL6'STIDP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B203',CL6'STIDC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B204',CL6'SCK',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B205',CL6'STCK',AL1(S),AL1(0),AL1(E8+S2),AL1(C51),X'04'\n      DC  X'B206',CL6'SCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B207',CL6'STCKC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B208',CL6'SPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B209',CL6'STPT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B20A',CL6'SPKA',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B20B',CL6'IPK',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B20D',CL6'PTLB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B210',CL6'SPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B211',CL6'STPX',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B212',CL6'STAP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B213',CL6'RRB ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B214',CL6'SIE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B216',CL6'SETR ',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n*     Set ETR Attachment Controls\n      DC  X'B217',CL6'STETR',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n*     Store ETR Attachment Controls\n      DC  X'B218',CL6'PC',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B219',CL6'SAC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B21A',CL6'CFC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B21F',CL6'???',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B220',CL6'SERVC',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Service Processor Command\n      DC  X'B221',CL6'IPTE',AL1(RRFA),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B222',CL6'IPM',AL1(RRE1),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B223',CL6'IVSK',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B224',CL6'IAC',AL1(RRE1),AL1(0),AL1(0),AL1(C41),X'04'\n      DC  X'B225',CL6'SSAR',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B226',CL6'EPAR',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B227',CL6'ESAR',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B228',CL6'PT',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B229',CL6'ISKE',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22A',CL6'RRBE',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22B',CL6'SSKE',AL1(RRFC),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22C',CL6'TB',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22D',CL6'DXR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B22E',CL6'PGIN',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B22F',CL6'PGOUT',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B230',CL6'CSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B231',CL6'HSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B232',CL6'MSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B233',CL6'SSCH',AL1(S),AL1(PRIV),AL1(0),AL1(C52),X'04'\n      DC  X'B234',CL6'STSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B235',CL6'TSCH',AL1(S),AL1(PRIV),AL1(0),AL1(C64),X'04'\n      DC  X'B236',CL6'TPI',AL1(S),AL1(PRIV),AL1(0),AL1(C62),X'04'\n      DC  X'B237',CL6'SAL',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B238',CL6'RSCH',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B239',CL6'STCRW',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23A',CL6'STCPS',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23B',CL6'RCHP',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B23C',CL6'SCHM',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B23D',CL6'STZP',AL1(?),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B23E',CL6'SZP ',AL1(?),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B23F',CL6'TPZI',AL1(?),AL1(PRIV),AL1(0),AL1(0),X'04'\n*\n      DC  X'B240',CL6'BAKR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B241',CL6'CKSM',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B243',CL6'MADS',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     Multiply and Add\n      DC  X'B244',CL6'SQDR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B245',CL6'SQER',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B246',CL6'STURA',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B247',CL6'MSTA',AL1(RRE1),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B248',CL6'PALB',AL1(RRE0),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B249',CL6'EREG',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B24A',CL6'ESTA',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B24B',CL6'LURA',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B24C',CL6'TAR ',AL1(RRE2),AL1(AR1),AL1(0),AL1(0),X'04'\n      DC  X'B24D',CL6'CPYA',AL1(RRE2),AL1(AR2),AL1(0),AL1(0),X'04'\n      DC  X'B24E',CL6'SAR ',AL1(RRE2),AL1(AR1),AL1(0),AL1(0),X'04'\n      DC  X'B24F',CL6'EAR ',AL1(RRE2),AL1(AR3),AL1(0),AL1(0),X'04'\n      DC  X'B250',CL6'CSP ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B252',CL6'MSR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B254',CL6'MVPG',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B255',CL6'MVST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B257',CL6'CUSE ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B258',CL6'BSG  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B259',CL6'IESBE',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     Invalidate Expanded Storage Block Entry\n      DC  X'B25A',CL6'BSA',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n* Asynchronous Page Facility instruction\n*     DC  X'B25B',CL6'B25B ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B25C',CL6'B25C ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25D',CL6'CLST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B25E',CL6'SRST',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n* Channel Subsystem call\n      DC  X'B25F',CL6'CHSC ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Coupling facility instruction\n*     DC  X'B260',CL6'CF60 ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B261',CL6'CF61 ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B262',CL6'LKPG ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*                     Lock PaGe\n      DC  X'B263',CL6'CMPSC',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*                     CoMPreSsion Call\n* Coupling facility instruction\n      DC  X'B264',CL6'CF64',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B265',CL6'SVS',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*                     Set Vector Summary\n      DC  X'B266',CL6'CF66',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B267',CL6'CF67',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Define Vector\n      DC  X'B268',CL6'DV   ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     A cryptographic facility instruction\n*     DC  X'B269',CL6'CR69',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26A',CL6'CR6A',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26B',CL6'CR6B',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26C',CL6'CR6C',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26D',CL6'CR6D',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26E',CL6'CR6E',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B26F',CL6'CR6F',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Set Primary Clock Selection\n*     DC  X'B270',CL6'SPCS  ',AL1(?),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Set Primary Clock Selection\n*     DC  X'B271',CL6'STPCS ',AL1(?),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     Store Primary Clock Selection\n* Coupling facility instruction\n      DC  X'B272',CL6'CF72',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     A coupling facility instruction\n*     DC  X'B274',CL6'SIGA ',AL1(?),AL1(?),AL1(0),AL1(0),X'04'\n*         Signal Adapter\n      DC  X'B276',CL6'XSCH ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B277',CL6'RP   ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B278',CL6'STCKE',AL1(S),AL1(PRIV),AL1(0),AL1(C51),X'04'\n      DC  X'B279',CL6'SACF ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B27C',CL6'STCKF',AL1(S),AL1(PRIV),AL1(0),AL1(C51),X'04'\n      DC  X'B27D',CL6'STSI ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n* LOAD PROGRAM PARAMETER  LOAD DATA INTO PROGRAM PARAMETER REGISTER\n      DC  X'B280',CL6'LPP  ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B284',CL6'LCCTL',AL1(S),AL1(PRIV),AL1(0),AL1(C33),X'04'\n      DC  X'B285',CL6'LPCTL',AL1(S),AL1(PRIV),AL1(0),AL1(C33),X'04'\n      DC  X'B286',CL6'QSI  ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B287',CL6'LSCTL',AL1(S),AL1(PRIV),AL1(0),AL1(C33),X'04'\n      DC  X'B28E',CL6'QCTRI',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B299',CL6'SRNM ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B29C',CL6'STFPC',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B29D',CL6'LFPC ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n*     DC  X'B2A4',CL6'MCBDM',AL1(????),AL1(0),AL1(0),AL1(0),X'04'\n*                 Move Channel Buffer Data Multiple\n      DC  X'B2A5',CL6'TRE  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B2A6',CL6'CU21',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n*                 Convert UTF-16 to UTF-8\n      DC  X'B2A6',CL6'CUUTF',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n*                 Convert Unicode to UTF-8\n      DC  X'B2A7',CL6'CUTFU',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B2B0',CL6'STFLE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B1',CL6'STFL ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B2',CL6'LPSWE',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B8',CL6'SRNMB',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2B9',CL6'SRNMT',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2BD',CL6'LFAS ',AL1(S),AL1(PRIV),AL1(0),AL1(0),X'04'\n* LPP INSTRUCTION CODE\n      DC  X'B2E0',CL6'SCCTR',AL1(RRE2),AL1(PRIV),AL1(0),AL1(C32),X'04'\n      DC  X'B2E1',CL6'SPCTR',AL1(RRE2),AL1(PRIV),AL1(0),AL1(C32),X'04'\n      DC  X'B2E4',CL6'ECCTR',AL1(RRE2),AL1(PRIV),AL1(0),AL1(C32),X'04'\n      DC  X'B2E5',CL6'EPCTR',AL1(RRE2),AL1(PRIV),AL1(0),AL1(C32),X'04'\n      DC  X'B2E8',CL6'PPA  ',AL1(RRFC),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2EC',CL6'ETND ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B2ED',CL6'ECPGA',AL1(RRE2),AL1(PRIV),AL1(0),AL1(C31),X'04'\n      DC  X'B2F8',CL6'TEND',AL1(S),AL1(0),AL1(0),AL1(C61),X'04'\n*     DC  X'B2FA',CL6'NIAI',AL1(IE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B2FC',CL6'TABORT',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B2FF',CL6'TRAP4',AL1(S),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B300',CL6'LPEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B301',CL6'LNEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B302',CL6'LTEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B303',CL6'LCEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B304',CL6'LDEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B305',CL6'LXDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B306',CL6'LXEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B307',CL6'MXDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B308',CL6'KEBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B309',CL6'CEBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B30A',CL6'AEBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B30B',CL6'SEBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B30C',CL6'MDEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B30D',CL6'DEBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B30E',CL6'MAEBR',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B30F',CL6'MSEBR',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B310',CL6'LPDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B311',CL6'LNDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B312',CL6'LTDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B313',CL6'LCDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B314',CL6'SQEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B315',CL6'SQDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B316',CL6'SQXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B317',CL6'MEEBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B318',CL6'KDBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B319',CL6'CDBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B31A',CL6'ADBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B31B',CL6'SDBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B31C',CL6'MDBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B31D',CL6'DDBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B31E',CL6'MADBR',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B31F',CL6'MSDBR',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B324',CL6'LDER ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B325',CL6'LXDR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B326',CL6'LXER ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B32E',CL6'MAER ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B32F',CL6'MSER ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B336',CL6'SQXR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B337',CL6'MEER ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B338',CL6'MAER ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B339',CL6'MAYR ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33A',CL6'MYLR ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33B',CL6'MYR  ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33C',CL6'MAYHR',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33D',CL6'MYHR ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33E',CL6'MADR ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B33F',CL6'MSDR ',AL1(RRD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B340',CL6'LPXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B341',CL6'LNXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B342',CL6'LTXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B343',CL6'LCXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B344',CL6'LEDBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B345',CL6'LDXBR',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B346',CL6'LEXBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B347',CL6'FIXBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B348',CL6'KXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B349',CL6'CXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B34A',CL6'AXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B34B',CL6'SXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B34C',CL6'MXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B34D',CL6'DXBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B350',CL6'TBEDR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B351',CL6'TBDR  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B353',CL6'DIEBR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B357',CL6'FIEBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B358',CL6'THDER ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B359',CL6'THDR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B35B',CL6'DIDBR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B35F',CL6'FIDBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B360',CL6'LPXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B361',CL6'LNXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B362',CL6'LTXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B363',CL6'LCXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B365',CL6'LXR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B366',CL6'LEXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B367',CL6'FIXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B369',CL6'CXR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B370',CL6'LPDFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B371',CL6'LNDFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B372',CL6'CPSDR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B373',CL6'LCDFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B374',CL6'LZER  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B375',CL6'LZDR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B376',CL6'LZXR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B377',CL6'FIER  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B37F',CL6'FIDR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B384',CL6'SFPC  ',AL1(RRE1),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B38C',CL6'EFPC  ',AL1(RRE1),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B390',CL6'CELFBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B391',CL6'CDLFBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B392',CL6'CXLFBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B394',CL6'CEFBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B395',CL6'CDFBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B396',CL6'CXFBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B398',CL6'CFEBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B399',CL6'CFDBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B39A',CL6'CFXBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B39C',CL6'CLFEBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B39D',CL6'CLFDBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B39E',CL6'CLFXBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A0',CL6'CELGBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A1',CL6'CDLGBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A2',CL6'CXLGBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A4',CL6'CEGBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A5',CL6'CDGBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A6',CL6'CXGBR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A8',CL6'CGEBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3A9',CL6'CGDBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3AA',CL6'CGXBR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3AC',CL6'CLGEBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3AD',CL6'CLGDBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3AE',CL6'CLGXBR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3B4',CL6'CEFR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3B5',CL6'CDFR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3B6',CL6'CXFR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3B8',CL6'CFER  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3B9',CL6'CFDR  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3BA',CL6'CFXR  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C1',CL6'LDGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C4',CL6'CEGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C5',CL6'CDGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C6',CL6'CXGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C8',CL6'CGER  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3C9',CL6'CGDR  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3CA',CL6'CGXR  ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3CD',CL6'LGDR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D0',CL6'MDTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D1',CL6'DDTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D2',CL6'ADTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D3',CL6'SDTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D4',CL6'LDETR ',AL1(RRFD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D5',CL6'LEDTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D6',CL6'LTDTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D7',CL6'FIDTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D8',CL6'MXTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3D9',CL6'DXTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B3D9',CL6'DXTRA ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DA',CL6'AXTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n*     DC  X'B3DA',CL6'AXTRA ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DB',CL6'SXTR  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DC',CL6'LXDTR ',AL1(RRFD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DD',CL6'LDXTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DE',CL6'LTXTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3DF',CL6'FIXTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E0',CL6'KDTR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E1',CL6'CGDTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E2',CL6'CUDTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E3',CL6'CSDTR ',AL1(RRFD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E4',CL6'CDTR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E5',CL6'EEDTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E7',CL6'ESDTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E8',CL6'KXTR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3E9',CL6'CGXTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3EA',CL6'CUXTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3EB',CL6'CSXTR ',AL1(RRFD),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3EC',CL6'CXTR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3ED',CL6'EEXTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3EF',CL6'ESXTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F1',CL6'CDGTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F2',CL6'CDUTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F3',CL6'CDSTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F4',CL6'CEDTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F5',CL6'QADTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F6',CL6'IEDTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F7',CL6'RRDTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3F9',CL6'CXGTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FA',CL6'CXUTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FB',CL6'CXSTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FC',CL6'CEXTR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FD',CL6'QAXTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FE',CL6'IEXTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B3FF',CL6'RRXTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B900',CL6'LPGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CLP),X'04'\n      DC  X'B901',CL6'LNGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CLN),X'04'\n      DC  X'B902',CL6'LTGR ',AL1(RRE2),AL1(LROP),AL1(T8),AL1(CLT),X'04'\n      DC  X'B903',CL6'LCGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CLCM),X'04'\n      DC  X'B904',CL6'LGR   ',AL1(RRE2),AL1(LROP),AL1(0),AL1(0),X'04'\n      DC  X'B905',CL6'LURAG ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B906',CL6'LGBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B907',CL6'LGHR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B908',CL6'AGR  ',AL1(RRE2),AL1(CDOP),AL1(0),AL1(CA1),X'04'\n      DC  X'B909',CL6'SGR  ',AL1(RRE2),AL1(CDOR),AL1(0),AL1(CA3),X'04'\n      DC  X'B90A',CL6'ALGR ',AL1(RRE2),AL1(CDOP),AL1(0),AL1(CA2),X'04'\n      DC  X'B90B',CL6'SLGR ',AL1(RRE2),AL1(CDOR),AL1(0),AL1(CA4),X'04'\n      DC  X'B90C',CL6'MSGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B90D',CL6'DSGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B90E',CL6'EREGG ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B90F',CL6'LRVGR ',AL1(RRE2),AL1(0),AL1(0),AL1(CLP),X'04'\n      DC  X'B910',CL6'LPGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B911',CL6'LNGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(CLN),X'04'\n      DC  X'B912',CL6'LTGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(CLT),X'04'\n      DC  X'B913',CL6'LCGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(CLCM),X'04'\n      DC  X'B914',CL6'LGFR  ',AL1(RRE2),AL1(LROP),AL1(0),AL1(0),X'04'\n      DC  X'B916',CL6'LLGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B917',CL6'LLGTR ',AL1(RRE2),AL1(LROP),AL1(0),AL1(0),X'04'\n      DC  X'B918',CL6'AGFR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91A',CL6'ALGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B91B',CL6'SLGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91C',CL6'MSGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91D',CL6'DSGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91E',CL6'KMAC  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B91F',CL6'LRVR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B920',CL6'CGR   ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B921',CL6'CLGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B925',CL6'STURG ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B926',CL6'LBR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B927',CL6'LHR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B928',CL6'PCKMO ',AL1(RRE0),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92A',CL6'KMF   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92B',CL6'KMO   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92C',CL6'PCC   ',AL1(RRE0),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92D',CL6'KMCTR ',AL1(RRFB),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92E',CL6'KM    ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B92F',CL6'KMC   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B930',CL6'CGFR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B931',CL6'CLGFR ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B93E',CL6'KIMD  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B93F',CL6'KLMD  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B941',CL6'CFDTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B942',CL6'CLGDTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B943',CL6'CLFDTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B946',CL6'BCTGR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B949',CL6'CFXTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B94A',CL6'CLGXTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B94B',CL6'CLFXTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B951',CL6'CDFTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B952',CL6'CDLGTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B953',CL6'CDLFTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B959',CL6'CXFTR ',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B95A',CL6'CXLGTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B95B',CL6'CXLFTR',AL1(RRFE),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B960',CL6'CGRT  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B961',CL6'CLGRT ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B972',CL6'CRT   ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B973',CL6'CLRT  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B980',CL6'NGR',AL1(RRE2),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B981',CL6'OGR',AL1(RRE2),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B982',CL6'XGR',AL1(RRE2),AL1(CDOR),AL1(0),AL1(CZRO),X'04'\n      DC  X'B983',CL6'FLOGR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B984',CL6'LLGCR ',AL1(RRE2),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B985',CL6'LLGHR ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B986',CL6'MLGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B987',CL6'DLGR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B988',CL6'ALCGR ',AL1(RRE2),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B989',CL6'SLBGR ',AL1(RRE2),AL1(0),AL1(0),AL1(CA4),X'04'\n      DC  X'B98A',CL6'CSPG  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B98D',CL6'EPSW  ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B98E',CL6'IDTE  ',AL1(RRFB),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B98F',CL6'CRDTE ',AL1(RRFB),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B990',CL6'TRTT  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B991',CL6'TRTO  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B992',CL6'TROT  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B993',CL6'TROO  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B994',CL6'LLCR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B995',CL6'LLHR  ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B996',CL6'MLR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B997',CL6'DLR   ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B998',CL6'ALCR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B999',CL6'SLBR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CA4),X'04'\n      DC  X'B99A',CL6'EPAIR ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99B',CL6'ESAIR ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99D',CL6'ESEA  ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99E',CL6'PTI   ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B99F',CL6'SSAIR ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9A2',CL6'PTF   ',AL1(RRE1),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9AA',CL6'LPTEA ',AL1(RRFB),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9AE',CL6'RRBM  ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9AF',CL6'PFMF  ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9B0',CL6'CU14  ',AL1(RRFC),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9B1',CL6'CU24  ',AL1(RRFC),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9B2',CL6'CU41  ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9B3',CL6'CU42  ',AL1(RRE2),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9BD',CL6'TRTRE ',AL1(RRFC),AL1(PRIV),AL1(0),AL1(0),X'04'\n      DC  X'B9BE',CL6'SRSTU ',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9BF',CL6'TRTE  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9C8',CL6'AHHHR ',AL1(RRFA),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B9C9',CL6'SHHRR ',AL1(RRFA),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B9CA',CL6'ALHHHR',AL1(RRFA),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B9CB',CL6'SLHHRR',AL1(RRFA),AL1(0),AL1(0),AL1(CA4),X'04'\n      DC  X'B9CD',CL6'CHHR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B9CF',CL6'CLHHR ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B9D8',CL6'AHHLR ',AL1(RRFA),AL1(0),AL1(0),AL1(CA1),X'04'\n      DC  X'B9D9',CL6'SHHLR ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9DA',CL6'ALHHLR',AL1(RRFA),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B9DB',CL6'SLHHLR',AL1(RRFA),AL1(0),AL1(0),AL1(CA4),X'04'\n      DC  X'B9DD',CL6'CHLR  ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B9DF',CL6'CLHLR ',AL1(RRE2),AL1(0),AL1(0),AL1(CMP),X'04'\n      DC  X'B9E1',CL6'POPCNT',AL1(RRE2),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9E2',CL6'LOCGR ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9E4',CL6'NGRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9E6',CL6'OGRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9E7',CL6'XGRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9E8',CL6'AGRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9E9',CL6'SGRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9EA',CL6'ALGRK ',AL1(RRFA),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B9EB',CL6'SLGRK ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9F2',CL6'LOCR  ',AL1(RRFC),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9F4',CL6'NRK   ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9F6',CL6'ORK   ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9F7',CL6'XRK   ',AL1(RRFA),AL1(0),AL1(0),AL1(CZRO),X'04'\n      DC  X'B9F8',CL6'ARK   ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9F9',CL6'SRK   ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n      DC  X'B9FA',CL6'ALRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(CA2),X'04'\n      DC  X'B9FB',CL6'SLRK  ',AL1(RRFA),AL1(0),AL1(0),AL1(0),X'04'\n*\n      DC  X'E500',CL6'LASP',AL1(SSE),AL1(PRIVP),AL1(0),AL1(C42),X'06'\n      DC  X'E501',CL6'TPROT ',AL1(SSE),AL1(PRIV),AL1(0),AL1(C63),X'06'\n      DC  X'E502',CL6'STRAG ',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E50E',CL6'MVCSK ',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E50F',CL6'MVCDK ',AL1(SSE),AL1(PRIV),AL1(0),AL1(0),X'06'\n      DC  X'E544',CL6'MVHHI ',AL1(SIL),AL1(0),AL1(0),AL1(0),X'06'\n      DC  X'E548',CL6'MVGHI ',AL1(SIL),AL1(0),AL1(0),AL1(0),X'06'\n      DC  X'E54C',CL6'MVHI  ',AL1(SIL),AL1(0),AL1(0),AL1(0),X'06'\n      DC  X'E554',CL6'CHHSI ',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E555',CL6'CLHHSI',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E558',CL6'CGHSI ',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E559',CL6'CLGHSI',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E55C',CL6'CHSI  ',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E55D',CL6'CLFHSI',AL1(SIL),AL1(0),AL1(0),AL1(CMP),X'06'\n      DC  X'E560',CL6'TBEGIN',AL1(SIL),AL1(NPSA),AL1(0),AL1(0),X'06'\n      DC  X'E561',CL6'TBEGIN',AL1(SIL),AL1(NPSA),AL1(0),AL1(0),X'06'\n*     DC  X'E561',CL7'TBEGINC',AL1(SIL),AL1(NPSA),AL1(0),AL1(0),X'06'\n      DC  X'FFFF'                 TABLE END\nL3LOPV CSECT\nL3LOP  DS  0CL13                   12O-BYTE OP-CODE TABLE\n    DC  X'A500',CL6'IIHH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A501',CL6'IIHL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A502',CL6'IILH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A503',CL6'IILL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A504',CL6'NIHH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(CZRO),X'04'\n    DC  X'A505',CL6'NIHL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(CZRO),X'04'\n    DC  X'A506',CL6'NILH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(CZRO),X'04'\n    DC  X'A507',CL6'NILL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(CZRO),X'04'\n    DC  X'A508',CL6'OIHH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A509',CL6'OIHL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50A',CL6'OILH  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50B',CL6'OILL  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50C',CL6'LLIHH ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50D',CL6'LLIHL ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50E',CL6'LLILH ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A50F',CL6'LLILL ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A510',CL6'VADR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A511',CL6'VSDR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A512',CL6'VMDR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A513',CL6'VDDR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A516',CL6'VMCDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A517',CL6'VACDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A518',CL6'VCDR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A519',CL6'VLDR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A51A',CL6'VLMDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A51B',CL6'VLZDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A520',CL6'VAR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A521',CL6'VSR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A522',CL6'VMR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A524',CL6'VNR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A525',CL6'VOR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A526',CL6'VXR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A528',CL6'VCR   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A540',CL6'VLPER ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A541',CL6'VLNER ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A542',CL6'VLCER ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A543',CL6'VSQER ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A550',CL6'VLPDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A551',CL6'VLNDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A552',CL6'VLCDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A553',CL6'VSQDR ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A560',CL6'VLPR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A561',CL6'VLNR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A562',CL6'VLCR  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A580',CL6'VAEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A581',CL6'VSEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A582',CL6'VMEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A583',CL6'VDEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A584',CL6'VMAEQ ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A588',CL6'VCEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A589',CL6'VLEQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A58A',CL6'VLMEQ ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A590',CL6'VADQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A591',CL6'VSDQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A592',CL6'VMDQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A593',CL6'VDDQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A594',CL6'VMADQ ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A595',CL6'VMSDQ ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A598',CL6'VCDQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A599',CL6'VLDQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A59A',CL6'VLMDQ ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A0',CL6'VAQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A1',CL6'VSQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A2',CL6'VMQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A4',CL6'VNQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A5',CL6'VOQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A6',CL6'VXQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A8',CL6'VCQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5A9',CL6'VLQ   ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A5AA',CL6'VLMQ  ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A600',CL6'VMXSE ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A601',CL6'VMNSE ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A602',CL6'VMXAE ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A608',CL6'VLELE ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A609',CL6'VXELE ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A610',CL6'VMXSD ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A611',CL6'VMNSD ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A612',CL6'VMXAD ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A618',CL6'VLELD ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n*   DC  X'A619',CL6'VXELD ',AL1(RI2),AL1(0),AL1(IM2),AL1(0),X'04'\n    DC  X'A700',CL6'TMLH  ',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(CTMX),X'04'\n    DC  X'A701',CL6'TMLL  ',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(CTMX),X'04'\n    DC  X'A702',CL6'TMHH  ',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(CTMX),X'04'\n    DC  X'A703',CL6'TMHL  ',AL1(RI2),AL1(0),AL1(IM2+T8),AL1(CTMX),X'04'\n    DC  X'A704',CL6'JNOP  ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n*   DC  X'A705',CL6'BRAS  ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n    DC  X'A705',CL6'JAS   ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n*   DC  X'A706',CL6'BRCT  ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n    DC  X'A706',CL6'JCT   ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n*   DC  X'A707',CL6'BRCTG ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n    DC  X'A707',CL6'JCTG  ',AL1(RI1),AL1(RB),AL1(0),AL1(0),X'04'\n    DC  X'A708',CL6'LHI   ',AL1(RI2),AL1(CDOP),AL1(0),AL1(0),X'04'\n    DC  X'A709',CL6'LGHI  ',AL1(RI2),AL1(CDOP),AL1(0),AL1(0),X'04'\n    DC  X'A70A',CL6'AHI   ',AL1(RI2),AL1(CDOP),AL1(0),AL1(CA1),X'04'\n    DC  X'A70B',CL6'AGHI  ',AL1(RI2),AL1(CDOP),AL1(0),AL1(CA1),X'04'\n    DC  X'A70C',CL6'MHI   ',AL1(RI2),AL1(CDOP),AL1(0),AL1(0),X'04'\n    DC  X'A70D',CL6'MGHI  ',AL1(RI2),AL1(CDOP),AL1(0),AL1(0),X'04'\n    DC  X'A70E',CL6'CHI   ',AL1(RI2),AL1(0),AL1(0),AL1(CMP),X'04'\n    DC  X'A70F',CL6'CGHI  ',AL1(RI2),AL1(0),AL1(0),AL1(CMP),X'04'\n*  C00 LARL    LOAD ADDRESS RELATIVE LONG\n    DC  X'C000',CL6'LARL  ',AL1(RIL1),AL1(LIOP),AL1(0),AL1(0),X'06'\n*  C01 LOAD IMMEDIATE              LGFI R6,200000  C06100030D40\n    DC  X'C001',CL6'LGFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'C004',CL6'BRCL  ',AL1(RIL1),AL1(RB),AL1(0),AL1(0),X'06'\n    DC  X'C004',CL6'JCL   ',AL1(RIL1),AL1(RB),AL1(0),AL1(0),X'06'\n*  C04 JCL    BRANCH RELATIVE LONG\n    DC  X'C005',CL6'BRASL ',AL1(RIL1),AL1(RB),AL1(0),AL1(0),X'06'\n*  C05 JASL    BRANCH RELATIVE AND SAVE LONG  BRASL R1,I2L\n    DC  X'C006',CL6'XIHF  ',AL1(RIL2),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'C007',CL6'XILF  ',AL1(RIL2),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'C008',CL6'IIHF  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C009',CL6'IILF  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00A',CL6'NIHF  ',AL1(RIL2),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'C00B',CL6'NILF  ',AL1(RIL2),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'C00C',CL6'OIHF  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00D',CL6'OILF  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00E',CL6'LLIHF ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C00F',CL6'LLILF ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C201',CL6'MSFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C204',CL6'SLGFI ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C205',CL6'SLFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n*  C29 ADD IMMEDIATE             AFI R5,200000   C25900030D40\n    DC  X'C209',CL6'AFI   ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C20A',CL6'ALGFI ',AL1(RIL2),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'C20B',CL6'ALFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'C20C',CL6'CGFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C20D',CL6'CFI   ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C20E',CL6'CLGFI ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C20F',CL6'CLFI  ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C402',CL6'LLHRL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'C404',CL6'LGHRL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C405',CL6'LHRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C406',CL6'LLGHRL',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C407',CL6'STHRL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C408',CL6'LGRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C40B',CL6'STGRL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C40C',CL6'LGRFL ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C40D',CL6'LRL   ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C40E',CL6'LLGFRL',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C40F',CL6'STRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C600',CL6'EXRL  ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C604',CL6'CGHRL ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C605',CL6'CHRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C606',CL6'CLGHRL',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C607',CL6'CLHRL ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C608',CL6'CGRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C60A',CL6'CLGRL ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C60C',CL6'CGFRL ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C60D',CL6'CRL   ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C60E',CL6'CLGFRL',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C60F',CL6'CLRL  ',AL1(RIL1),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'C800',CL6'MVCOS ',AL1(SSF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C801',CL6'ECTG  ',AL1(SSF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C802',CL6'CSST  ',AL1(SSF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C804',CL6'LPD   ',AL1(SSF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'C805',CL6'LPDG  ',AL1(SSF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'CC06',CL6'BRCTH ',AL1(RIL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'CC08',CL6'AIH   ',AL1(RIL2),AL1(0),AL1(0),AL1(CA1),X'06'\n    DC  X'CC0A',CL6'ALSIH ',AL1(RIL2),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'CC0B',CL6'ALSIHN',AL1(RIL2),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'CC0D',CL6'CIH   ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'CC0F',CL6'CLIH  ',AL1(RIL2),AL1(0),AL1(0),AL1(CMP),X'06'\n    DC  X'FFFF'                 TABLE END\n*   6 BYTES INSTRUCTION      IIRXBDDD00II    R1,D2(X2,B2)\nL4LOPV CSECT\nL4LOP  DS  0CL13\n    DC  X'E302',CL6'LTG  ',AL1(RXY),AL1(0),AL1(0),AL1(CLT),X'86'\n    DC  X'E303',CL6'LRAG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E304',CL6'LG   ',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'86'\n    DC  X'E306',CL6'LVBY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E308',CL6'AG  ',AL1(RXY),AL1(CDOPA),AL1(0),AL1(0),X'86'\n    DC  X'E309',CL6'SG  ',AL1(RXY),AL1(CDOPA),AL1(0),AL1(0),X'86'\n    DC  X'E30A',CL6'ALG ',AL1(RXY),AL1(CDOPA),AL1(0),AL1(CA2),X'86'\n    DC  X'E30B',CL6'SLG ',AL1(RXY),AL1(CDOPA),AL1(0),AL1(CA4),X'86'\n    DC  X'E30C',CL6'MSG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E30D',CL6'DSG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E30E',CL6'CVBG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E30F',CL6'LRVG',AL1(RXY),AL1(0),AL1(0),AL1(CLP),X'86'\n    DC  X'E312',CL6'LT  ',AL1(RXY),AL1(LIOP),AL1(0),AL1(CLT),X'46'\n    DC  X'E313',CL6'LRAY',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E314',CL6'LGF ',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'46'\n    DC  X'E315',CL6'LGH ',AL1(RXY),AL1(CDOP),AL1(0),AL1(0),X'26'\n    DC  X'E316',CL6'LLGF',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'46'\n    DC  X'E317',CL6'LLGT',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'46'\n    DC  X'E318',CL6'AGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E319',CL6'SGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E31A',CL6'ALGF',AL1(RXY),AL1(CDOPA),AL1(0),AL1(CA2),X'86'\n    DC  X'E31B',CL6'SLGF',AL1(RXY),AL1(CDOPA),AL1(0),AL1(CA4),X'86'\n    DC  X'E31C',CL6'MSGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E31D',CL6'DSGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E31E',CL6'LRV  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E31F',CL6'LRVH ',AL1(RXY),AL1(0),AL1(0),AL1(CLP),X'86'\n    DC  X'E320',CL6'CG   ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'86'\n    DC  X'E321',CL6'CLG  ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'86'\n    DC  X'E324',CL6'STG  ',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'86'\n    DC  X'E325',CL6'NTSTG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E326',CL6'CVDY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n*   DC  X'E32A',CL6'LZRG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E32E',CL6'CVDG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E32F',CL6'STRVG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E330',CL6'CGF  ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'86'\n    DC  X'E331',CL6'CLGF ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'86'\n    DC  X'E332',CL6'LTGF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E334',CL6'CGH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E336',CL6'PFD  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n*   DC  X'E33A',CL6'LLZRGF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E33B',CL6'LZRF  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E33E',CL6'STRV ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E33F',CL6'STRVH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n*   DC  X'E345',CL6'LDXBR',AL1(RRE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E346',CL6'BCTG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E350',CL6'STY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E351',CL6'MSY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E354',CL6'NY   ',AL1(RXY),AL1(0),AL1(0),AL1(CZRO),X'46'\n    DC  X'E355',CL6'CLY  ',AL1(RXY),AL1(0),AL1(0),AL1(CZRO),X'46'\n    DC  X'E356',CL6'OY   ',AL1(RXY),AL1(0),AL1(0),AL1(CZRO),X'46'\n    DC  X'E357',CL6'XY   ',AL1(RXY),AL1(0),AL1(0),AL1(CZRO),X'46'\n    DC  X'E358',CL6'LY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E359',CL6'CY   ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'46'\n    DC  X'E35A',CL6'AY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E35B',CL6'SY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E35C',CL6'MFY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E35E',CL6'ALY  ',AL1(RXY),AL1(0),AL1(0),AL1(CA2),X'46'\n    DC  X'E35F',CL6'SLY  ',AL1(RXY),AL1(0),AL1(0),AL1(CA4),X'46'\n    DC  X'E370',CL6'STHY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E371',CL6'LAY  ',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'16'\n    DC  X'E372',CL6'STCY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E373',CL6'ICY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'16'\n    DC  X'E375',CL6'LAEY ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E376',CL6'LB   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E377',CL6'LGB  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E378',CL6'LHY ',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'46'\n    DC  X'E379',CL6'CHY ',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'46'\n    DC  X'E37A',CL6'AHY ',AL1(RXY),AL1(0),AL1(E4+S2),AL1(CA1),X'46'\n    DC  X'E37B',CL6'SHY ',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'46'\n    DC  X'E37C',CL6'MHY ',AL1(RXY),AL1(0),AL1(E4+S2),AL1(0),X'46'\n    DC  X'E380',CL6'NG  ',AL1(RXY),AL1(0),AL1(E4),AL1(CZRO),X'86'\n    DC  X'E381',CL6'OG  ',AL1(RXY),AL1(0),AL1(E4),AL1(CZRO),X'86'\n    DC  X'E382',CL6'XG  ',AL1(RXY),AL1(0),AL1(E4),AL1(CZRO),X'86'\n    DC  X'E385',CL6'LGAT',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E386',CL6'MLG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E387',CL6'DLG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E388',CL6'ALCG',AL1(RXY),AL1(0),AL1(0),AL1(CA2),X'86'\n    DC  X'E389',CL6'SLBG',AL1(RXY),AL1(0),AL1(0),AL1(CA4),X'86'\n    DC  X'E38E',CL6'STPQ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E38F',CL6'LPQ ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'86'\n    DC  X'E390',CL6'LLGC',AL1(RXY),AL1(LIOP),AL1(0),AL1(CZRO),X'16'\n    DC  X'E391',CL6'LLGH',AL1(RXY),AL1(LIOP),AL1(0),AL1(0),X'26'\n    DC  X'E394',CL6'LLC ',AL1(RXY),AL1(0),AL1(0),AL1(CZRO),X'16'\n    DC  X'E395',CL6'LLH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E396',CL6'ML ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E397',CL6'MDL',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E398',CL6'ALC',AL1(RXY),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'E399',CL6'SLB',AL1(RXY),AL1(0),AL1(0),AL1(CA4),X'06'\n    DC  X'E39C',CL6'LLGTAT',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E39D',CL6'LLGFAT',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E39F',CL6'LAT   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'46'\n    DC  X'E3C0',CL6'LBH   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C2',CL6'LLCH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C3',CL6'STCH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C4',CL6'LHH   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C6',CL6'LLHH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C7',CL6'STHH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3C8',CL6'LFHAT ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3CA',CL6'LFH   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3CB',CL6'STFH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'26'\n    DC  X'E3CD',CL6'CHF   ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'26'\n    DC  X'E3CF',CL6'CLHF  ',AL1(RXY),AL1(0),AL1(0),AL1(CMP),X'26'\n    DC  X'EC45',CL6'BRXLG ',AL1(RIE),AL1(0),AL1(0),AL1(0),X'06'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HDISOPT2": {"ttr": 6404, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x01x\\x01x\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 376, "newlines": 376, "modlines": 0, "user": "ASM"}, "text": "**************************************************************\n*   OPCODE E700-EDFF\n**************************************************************\n*   DC  X'E700',CL8'VLEB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector\n*   DC  X'E701',CL8'VLEH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E702',CL8'VLEG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E703',CL8'VLEF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E704',CL8'VLLEZ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E705',CL8'VLREP',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VLREP B/H/F/G\n*   DC  X'E706',CL8'VL   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load\n*   DC  X'E707',CL8'VLBB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load Start Set\n*   DC  X'E708',CL8'VSTEB',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store Element of VR1 indexed by M3 to second operand\n*   DC  X'E709',CL8'VSTEH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E70A',CL8'VSTEG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E70B',CL8'VSTEF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E70E',CL8'VST  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store\n*   DC  X'E712',CL8'VGEG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E713',CL8'VGEF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E71A',CL8'VSCEG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store Element\n*   DC  X'E71B',CL8'VSCEF',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store Element\n*   DC  X'E722',CL8'VLVG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load VR Element from GR  VLVG B/H/F/G\n*   DC  X'E727',CL8'LCBB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E730',CL8'VESL ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Shift Left\n*   DC  X'E733',CL8'VERLL',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Rotate Left\n    DC  X'E736',CL6'VLM  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load Multiple\n*   DC  X'E737',CL8'VLL  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load String\n*   DC  X'E738',CL8'VESRL',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E73A',CL8'VESRA',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'E73E',CL6'VSTM ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store Multiple\n*   DC  X'E73F',CL8'VSTL  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Store with length\n*   DC  X'E740',CL8'VLEIB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E741',CL8'VLEIH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E742',CL8'VLEIG ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E743',CL8'VLEIF ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E744',CL8'VZERO ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E745',CL8'VREPI ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VREP   B/H/F/G\n*   DC  X'E746',CL8'VGM   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E74A',CL8'VFTCI  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                  'WFTCIDB'\n*   DC  X'E74D',CL8'VREP  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VREP   B/H/F/G\n*   DC  X'E750',CL8'VPOPCT',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Population Count\n*   DC  X'E752',CL8'VCTZ  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Count Trailing Zeros\n*   DC  X'E753',CL8'VCLZ  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Count Leading Zeros\n*   DC  X'E756',CL8'VLR  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load Register\n*   DC  X'E75C',CL8'VISTR ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E75F',CL8'VSEG  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E760',CL8'VMRL  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Merge Low\n*   DC  X'E761',CL8'VMRH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Merge High\n*   DC  X'E762',CL8'VLVGP ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load VR from GR PAIR DISJOINT\n*   DC  X'E764',CL8'VSUM ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Sum Across Word            VSUM  B/H\n*   DC  X'E765',CL8'VSUMG',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Sum Across Doubleword      VSUMG F/H\n*   DC  X'E766',CL8'VCKSM ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Checksum\n*   DC  X'E767',CL8'VSUMQ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Sum Across Quadword         VSUMQ F/H\n*   DC  X'E768',CL8'VN    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vectore And\n*   DC  X'E769',CL8'VNC   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector AND with compliment\n*   DC  X'E76A',CL8'VO    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vectore Or\n*   DC  X'E76B',CL8'VNO   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E76D',CL8'VX    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vectore Exclusive OR\n*   DC  X'E770',CL8'VESLV ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E772',CL8'VERIM ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VERIM  DW/W/HW/B\n*       Vector Rotate and Insert Under Mask\n*   DC  X'E773',CL8'VERLLV',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E774',CL8'VSL   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Shift Left by bit\n*   DC  X'E775',CL8'VSLB  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Shift Left by byte\n*   DC  X'E777',CL8'VSLDB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E778',CL8'VESRLV',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Shift Right Logical\n*   DC  X'E77A',CL8'VESRAV',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Shift Right Arithmetic\n*   DC  X'E77C',CL8'VSRL  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Shift Right Logical\n*   DC  X'E77D',CL8'VSRLB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E77E',CL8'VSRA  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Element Shift Right Arithmetic\n*   DC  X'E77F',CL8'VSRAB ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E780',CL8'VFEE  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Find Element  VFREE  B/BS/F/FS/H/HS\n*                            VFRREZ B/BS/F/FS/H/HS\n*   DC  X'E781',CL8'VFENEHS',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Compare String\n*   DC  X'E782',CL8'VFAE   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E784',CL8'VPDI   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E78A',CL8'VSTRC  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VSTRC B/BS/F/FS/H/HS/ZB/ZBS/ZF/ZFS/ZH/ZHS\n*   DC  X'E78C',CL8'VPERM  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E78D',CL8'VSEL   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E78E',CL8'VFMS   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFMSDB\n*   DC  X'E78F',CL8'VFMA    ,AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFPSODB\n*   DC  X'E794',CL8'VPK    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Pack (modulo)\n*   DC  X'E795',CL8'VPKLS  ' ,AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Pack Logical Saturate\n*   DC  X'E797',CL8'VPKS   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Pack Saturate\n*   DC  X'E7A1',CL8'VMLH   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7A2',CL8'VML    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply Low\n*   DC  X'E7A3',CL8'VMH    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply High\n*   DC  X'E7A4',CL8'VMLE   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7A5',CL8'VMLO   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7A6',CL8'VME    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply Even\n*   DC  X'E7A7',CL8'VMO    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply Odd\n*   DC  X'E7A9',CL8'VMALH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add High Logical   VMALH B/F/H/W\n*   DC  X'E7AA',CL8'VMAL   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add Low            VMAL  B/F/H\n*   DC  X'E7AB',CL8'VMAH   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add High           VMAH  B/F/H\n*   DC  X'E7AC',CL8'VMALE  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add Even Logical   VMALE B/F/H\n*   DC  X'E7AD',CL8'VMALO  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add Odd Logical    VMALO B/F/H\n*   DC  X'E7AE',CL8'VMAE   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add Even           VMAE  B/F/H\n*   DC  X'E7AF',CL8'VMAO   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Multiply and Add Odd   VMAO B/F/H\n*   DC  X'E7B4',CL8'VGFM   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7B9',CL8'VACCC  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VACCCQ\n*       Vector Add with Carry Compute Carry\n*   DC  X'E7BB',CL8'VAC    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Add With Carry\n*   DC  X'E7BC',CL8'VGFMA  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7BD',CL8'VSBCBI ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7BF',CL8'VSBI   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*         Vector Subtract with Borrow Compute Borrow Indication\n*   DC  X'E7C0',CL8'VCLGD  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7C1',CL8'VCDLG  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7C2',CL8'VCGD   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7C3',CL8'VCDG   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7C4',CL8'VLDE   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WLDEB\n*   DC  X'E7C5',CL8'VLED   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VLED   B/H/F/G  WLEDB\n*   DC  X'E7C7',CL8'VFI    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFIDB\n*   DC  X'E7CA',CL8'WFK    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFKDB\n*   DC  X'E7CB',CL8'WFC  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFCDB\n*   DC  X'E7CC',CL8'VFPSO ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFLCDB/WFLNDB/WFLPDB/WFPSODB\n*   DC  X'E7CE',CL8'VFSQ   ,AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFSQDB\n*   DC  X'E7D4',CL8'VUPLL',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VUPLL  B/F/H     Unpack Low  (unsigned)\n*   DC  X'E7D5',CL8'VUPLH',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VUPLH  B/F/H/W   Unpack High (unsigned)\n*   DC  X'E7D6',CL8'VUPL ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VUPL   B/F       Unpack Low  (signed)\n*   DC  X'E7D7',CL8'VUPH ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VUPH   B/F/H     Unpack High (signed)\n*   DC  X'E7D8',CL8'VTM     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7D9',CL8'VECL    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7DB',CL8'VEC     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7DE',CL8'VLC     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load Complement\n*   DC  X'E7DF',CL8'VLP     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Load Positive\n*   DC  X'E7E2',CL8'VFS     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFSDB\n*   DC  X'E7E3',CL8'VFA     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7E5',CL8'VFD     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFDDB\n*   DC  X'E7E7',CL8'VFM     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7E8',CL8'VFCE    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFCEDB  WFCEDBS\n*   DC  X'E7EA',CL8'VFCHE   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFCHEDB WFCHEDBS\n*   DC  X'E7EB',CL8'VFCH    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   WFCHDB  WFCHDBS\n*   DC  X'E7F0',CL8'VAVGL   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Average Logical      VAVGL B/F/G/H\n*   DC  X'E7F1',CL8'VACC    ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Add Compute Carries  VACC  B/F/G/H\n*   DC  X'E7F2',CL8'VAV     ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Average              VAV   B/H/F/G/Q\n*   DC  X'E7F3',CL8'VA   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Add                  VA    B/H/F/G/Q\n*   DC  X'E7F5',CL8'VSCBI',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Subtract with Borrow Compute Borrow Indication\n*   DC  X'E7F7',CL8'VS   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*       Vector Subtract             VS    B/H/F/G/Q\n*   DC  X'E7F8',CL8'VCEQ ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VCEQ B/BS/QF/QFS/QG/QGS/QH/QHS\n*   DC  X'E7F9',CL8'VCHL ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*                   VCHL B/BS/LF/LFS/LG/LGS/LH/LHS\n*   DC  X'E7FB',CL6'VCH  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7FC',CL6'VMNL ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7FD',CL6'VMXL ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7FE',CL6'VMN  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'E7FF',CL6'VMX  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB04',CL6'LMG  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB0A',CL6'SRAG ',AL1(RSY),AL1(NPSA),AL1(0),AL1(CLT),X'06'\n    DC  X'EB0B',CL6'SLAG ',AL1(RSY),AL1(NPSA),AL1(0),AL1(0),X'06'\n    DC  X'EB0C',CL6'SRLG ',AL1(RSY),AL1(NPSA),AL1(0),AL1(0),X'06'\n    DC  X'EB0D',CL6'SLLG ',AL1(RSY),AL1(NPSA),AL1(0),AL1(0),X'06'\n    DC  X'EB0F',CL6'TRACG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB14',CL6'CSY  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB17',CL6'STCCTM',AL1(RSY2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB1C',CL6'RLLG ',AL1(RSY),AL1(NPSA),AL1(0),AL1(0),X'06'\n    DC  X'EB1D',CL6'RLL  ',AL1(RSY),AL1(NPSA),AL1(0),AL1(0),X'06'\n    DC  X'EB20',CL6'CLMH ',AL1(RSY),AL1(0),AL1(T8),AL1(CMP),X'06'\n    DC  X'EB21',CL6'CLMY ',AL1(RSY),AL1(0),AL1(T8),AL1(CMP),X'06'\n*   DC  X'EB22',CL6'CAD  ',AL1(RSY),AL1(0),AL1(T8),AL1(CMP),X'06'\n    DC  X'EB23',CL6'CLT  ',AL1(RSY2),AL1(0),AL1(T8),AL1(CMP),X'06'\n    DC  X'EB24',CL6'STMG ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB25',CL6'STCTG',AL1(RSY),AL1(CR),AL1(S2),AL1(0),X'06'\n    DC  X'EB26',CL6'STMH ',AL1(RSY),AL1(0),AL1(E4+S2),AL1(0),X'06'\n    DC  X'EB2B',CL6'CLGT ',AL1(RSY2),AL1(0),AL1(T8),AL1(CMP),X'06'\n    DC  X'EB2C',CL6'STCMH',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB2D',CL6'STCMY',AL1(RSY),AL1(0),AL1(T8+S2),AL1(0),X'06'\n    DC  X'EB2F',CL6'LCTLG',AL1(RSY),AL1(PRIV+CR),AL1(S2),AL1(0),X'06'\n    DC  X'EB30',CL6'CSG  ',AL1(RSY),AL1(PRIV),AL1(S2),AL1(CCS),X'06'\n    DC  X'EB31',CL6'CDSY ',AL1(RSY),AL1(PRIV),AL1(S2),AL1(CCS),X'06'\n   DC  X'EB3E',CL6'CDSG',AL1(RSY),AL1(PRIV),AL1(E4+EPR),AL1(CCS),X'06'\n    DC  X'EB44',CL6'BXHG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB45',CL6'BXLEG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB4C',CL6'ECAG ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB51',CL6'TMY  ',AL1(SIY),AL1(BMP),AL1(T8),AL1(CTM),X'06'\n    DC  X'EB52',CL6'MVIY ',AL1(SIY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB54',CL6'NIY  ',AL1(SIY),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'EB55',CL6'CLIY ',AL1(SIY),AL1(BMP),AL1(0),AL1(CMP),X'06'\n    DC  X'EB56',CL6'OIY  ',AL1(SIY),AL1(BMP),AL1(0),AL1(CZRO),X'06'\n    DC  X'EB57',CL6'XIY  ',AL1(SIY),AL1(0),AL1(0),AL1(CZRO),X'06'\n    DC  X'EB60',CL6'?EB60',AL1(SIY),AL1(PRIV),AL1(0),AL1(0),X'06'\n    DC  X'EB61',CL6'?EB61',AL1(SIY),AL1(PRIV),AL1(0),AL1(0),X'06'\n    DC  X'EB6A',CL6'ASI  ',AL1(SIY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB6E',CL6'ALSI ',AL1(SIY),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'EB7A',CL6'AGSI ',AL1(SIY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB7E',CL6'ALGSI',AL1(SIY),AL1(0),AL1(0),AL1(CA2),X'06'\n    DC  X'EB80',CL6'ICMH',AL1(RSY),AL1(0),AL1(T8+S2),AL1(CICM),X'06'\n    DC  X'EB81',CL6'ICMY',AL1(RSY),AL1(0),AL1(T8+S2),AL1(CICM),X'06'\n    DC  X'EB8E',CL6'MVCLU',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB8F',CL6'CLCLU',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB90',CL6'STMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB96',CL6'LMH',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB98',CL6'LMY',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EB9A',CL6'LAMY',AL1(RSY),AL1(AR2),AL1(0),AL1(0),X'06'\n    DC  X'EB9B',CL6'STAMY',AL1(RSY),AL1(AR2),AL1(0),AL1(0),X'06'\n    DC  X'EBC0',CL6'TP',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDC',CL6'SRAK',AL1(RSY),AL1(0),AL1(0),AL1(CLT),X'06'\n    DC  X'EBDD',CL6'SLAK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDE',CL6'SRLK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBDF',CL6'SLLK',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EBE0',CL8'LOCFH  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EBE1',CL8'STOCFH ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE2',CL6'LOCG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE3',CL6'STOCG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE4',CL6'LANG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE6',CL6'LAOG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE7',CL6'LAXG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBE8',CL6'LAAG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBEA',CL6'LAALG',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF2',CL6'LOC  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF3',CL6'STOC ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF4',CL6'LAN  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF6',CL6'LAO  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF7',CL6'LAX  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBF8',CL6'LAA  ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'EBFA',CL6'LAAL ',AL1(RSY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EC98',CL6'RISBGN',AL1(RIE4),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECDA',CL6'ALHSIK',AL1(RIE4),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECDB',CL7'ALGHSIK',AL1(RIE4),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECE4',CL7'CGRB   ',AL1(RRS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECE5',CL7'CLGRB  ',AL1(RRS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECF6',CL7'CRB    ',AL1(RRS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECF7',CL7'CLRB   ',AL1(RRS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECFC',CL7'CGIB   ',AL1(RIS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECFD',CL7'CLGIB  ',AL1(RIS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECFE',CL7'CIB    ',AL1(RIS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ECFF',CL7'CLIB   ',AL1(RIS),AL1(0),AL1(0),AL1(CA2),X'06'\n*   DC  X'ED04',CL6'LDEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED05',CL6'LXDB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED06',CL6'LXEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED07',CL6'MXDB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED08',CL6'KEB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED09',CL6'CEB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0A',CL6'AEB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0B',CL6'SEB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0C',CL6'MDEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0D',CL6'DEB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0E',CL6'MAEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED0F',CL6'MSEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED10',CL6'TCEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED11',CL6'TCDB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED12',CL6'TCXB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED14',CL6'SQEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED15',CL6'SQDB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED17',CL6'MEEB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED18',CL6'KDB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED19',CL6'CDB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1A',CL6'ADB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1B',CL6'SDB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1C',CL6'MDB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1D',CL6'DDB    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1E',CL6'MADB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED1F',CL6'MSDB   ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED24',CL6'LDE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED25',CL6'LXD    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED26',CL6'LXE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED2E',CL6'MAE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED2F',CL6'MSE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED34',CL6'SQE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED35',CL6'SQD    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED37',CL6'MEE    ,AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED38',CL6'MYAL   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED39',CL6'MYL    ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3A',CL6'MAY    ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3B',CL6'MY     ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3C',CL6'MAYH   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3D',CL6'MYH    ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3E',CL6'MAD    ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED3F',CL6'MSD    ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED40',CL6'SLDT   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED41',CL6'SRDT   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED48',CL6'SLXT   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'ED49',CL6'SRXT   ,AL1(RXF),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED50',CL6'TDCET ',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED51',CL6'TDGET ',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED55',CL6'TDGDT ',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED58',CL6'TDCXT ',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED59',CL6'TDGXT ',AL1(RXE),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED64',CL6'LEY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED65',CL6'LDY   ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED66',CL6'STEY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'ED67',CL6'STDY  ',AL1(RXY),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDA8',CL6'CZDT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDA9',CL6'CZXT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAA',CL6'CDZT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAB',CL6'CXZT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAC',CL6'CPDT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAD',CL6'CPXT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAE',CL6'CDPT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n*   DC  X'EDAF',CL6'CXPT  ',AL1(RSL2),AL1(0),AL1(0),AL1(0),X'06'\n    DC  X'FFFF'                 TABLE END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HDISSVTB": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00z\\x00z\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 122, "newlines": 122, "modlines": 0, "user": "ASM"}, "text": "*\nSVCOPV   CSECT\nSVCOP    DS    0CL17                   SVC NAME TABLE   AC 20/10/87\n         DC    AL1(0),CL16'EXCP/XDAP'\n         DC    AL1(1),CL16'WAIT/WAITR'\n         DC    AL1(2),CL16'POST/PRTOV'\n         DC    AL1(3),CL16'EXIT'\n         DC    AL1(4),CL16'GETMAIN'\n         DC    AL1(5),CL16'FREEMAIN'\n         DC    AL1(6),CL16'LINK'\n         DC    AL1(7),CL16'XCTL'\n         DC    AL1(8),CL16'LOAD'\n         DC    AL1(9),CL16'DELETE'\n         DC    AL1(10),CL16'GET/FREEMAIN R'\n         DC    AL1(11),CL16'TIME'\n         DC    AL1(12),CL16'SYNCH'\n         DC    AL1(13),CL16'ABEND'\n         DC    AL1(14),CL16'SPIE'\n         DC    AL1(15),CL16'ERREXCP'\n         DC    AL1(16),CL16'PURGE I/O'\n         DC    AL1(17),CL16'RESTORE'\n         DC    AL1(18),CL16'BLDL/FIND'\n         DC    AL1(19),CL16'OPEN'\n         DC    AL1(20),CL16'CLOSE'\n         DC    AL1(21),CL16'STOW'\n         DC    AL1(22),CL16'OPEN TYPE J'\n         DC    AL1(23),CL16'CLOSE TYPE T'\n         DC    AL1(24),CL16'DEVTYPE'\n         DC    AL1(25),CL16'TRKBRAS'\n         DC    AL1(26),CL16'LOCATE, ETC'\n         DC    AL1(27),CL16'OBTAIN'\n         DC    AL1(29),CL16'SCRATCH'\n         DC    AL1(30),CL16'RENAME'\n         DC    AL1(31),CL16'FEOV'\n         DC    AL1(32),CL16'(NO MACRO)'\n         DC    AL1(33),CL16'IOHALT'\n         DC    AL1(34),CL16'MGCR/QEDIT'\n         DC    AL1(35),CL16'WTO/WTOR'\n         DC    AL1(36),CL16'WTL'\n         DC    AL1(37),CL16'SEGLD/SEGWT'\n         DC    AL1(39),CL16'LABEL'\n         DC    AL1(40),CL16'EXTRACT'\n         DC    AL1(41),CL16'IDENTIFY'\n         DC    AL1(42),CL16'ATTACH'\n         DC    AL1(43),CL16'CIRB'\n         DC    AL1(44),CL16'CHAP'\n         DC    AL1(45),CL16'OVLYBRCH'\n         DC    AL1(46),CL16'TTIMER'\n         DC    AL1(47),CL16'STIMER'\n         DC    AL1(48),CL16'DEQ'\n         DC    AL1(51),CL16'SNAP/SDUMP'\n         DC    AL1(52),CL16'RESTART'\n         DC    AL1(53),CL16'RELEX'\n         DC    AL1(54),CL16'DISABLE'\n         DC    AL1(55),CL16'EOV'\n         DC    AL1(56),CL16'ENQ/RESERVE'\n         DC    AL1(57),CL16'FREEDBUF'\n         DC    AL1(58),CL16'RELBUF/REQBUF'\n         DC    AL1(59),CL16'OLTEP'\n         DC    AL1(60),CL16'(E)STAE/STAI'\n         DC    AL1(61),CL16'IKJEGS6A TSO/E'\n         DC    AL1(62),CL16'DETACH'\n         DC    AL1(63),CL16'CHKPT'\n         DC    AL1(64),CL16'RDJFCB'\n         DC    AL1(66),CL16'BTAMTEST'\n         DC    AL1(68),CL16'SYNADRLS/SYNADAF'\n         DC    AL1(69),CL16'BSP'\n         DC    AL1(70),CL16'GSERV'\n         DC    AL1(71),CL16'ASGNBFR, ETC'\n         DC    AL1(72),CL16'CHATR'\n         DC    AL1(73),CL16'SPAR'\n         DC    AL1(74),CL16'DAR'\n         DC    AL1(75),CL16'DQUEUE'\n         DC    AL1(76),CL16'(NO MACRO)'\n         DC    AL1(78),CL16'LSPACE'\n         DC    AL1(79),CL16'STATUS'\n         DC    AL1(81),CL16'SETPRT'\n         DC    AL1(83),CL16'SMFWTM'\n         DC    AL1(84),CL16'GRAPHICS'\n         DC    AL1(85),CL16'DDRSWAP'\n         DC    AL1(86),CL16'ATLAS'\n         DC    AL1(87),CL16'DOM'\n         DC    AL1(91),CL16'VOLSTAT'\n         DC    AL1(92),CL16'TCBEXCP'\n         DC    AL1(93),CL16'TGET/TPUT'\n         DC    AL1(94),CL16'STCC'\n         DC    AL1(95),CL16'SYSEVENT'\n         DC    AL1(96),CL16'STAX'\n         DC    AL1(97),CL16'TSO TEST'\n         DC    AL1(98),CL16'PROTECT'\n         DC    AL1(99),CL16'DYNALLOC'\n         DC    AL1(100),CL16'IKJEFFIB'\n         DC    AL1(101),CL16'QTIP'\n         DC    AL1(102),CL16'AQCTL'\n         DC    AL1(103),CL16'XLATE'\n         DC    AL1(104),CL16'TOPCTL'\n         DC    AL1(105),CL16'IMAGLIB'\n         DC    AL1(107),CL16'MODESET'\n         DC    AL1(109),CL16'TSO/E, ESR TYPE4'\n         DC    AL1(110),CL16'(NO MACRO)'\n         DC    AL1(111),CL16'(NO MACRO)'\n         DC    AL1(112),CL16'PGRLSE'\n         DC    AL1(113),CL16'PGFIX,CL14' ETC'\n         DC    AL1(114),CL16'EXCPVR'\n         DC    AL1(116),CL16'ESR TYPE 1'\n         DC    AL1(117),CL16'DEBCHK'\n         DC    AL1(119),CL16'TESTAUTH'\n         DC    AL1(120),CL16'GETMAIN/FREEMAIN'\n         DC    AL1(121),CL16'VSAM'\n         DC    AL1(122),CL16'EVENTS'\n         DC    AL1(123),CL16'PURGEDQ'\n         DC    AL1(124),CL16'TPIO'\n         DC    AL1(125),CL16'EVENTS'\n         DC    AL1(126),CL16'MSS INTERFACE'\n         DC    AL1(130),CL16'RACHECK'         NEW MACRO\n         DC    AL1(131),CL16'RACINIT'         NEW MACRO\n         DC    AL1(132),CL16'RACLIST/RACXTRT' NEW MACRO\n         DC    AL1(133),CL16'RACDEF'          NEW MACRO\n         DC    AL1(137),CL16'ESR TYPE 2'      NEW MACRO\n         DC    AL1(138),CL16'PGSER'           NEW MACRO\n         DC    AL1(139),CL16'CVAF'            NEW MACRO\n         DC    X'FF'                   END OF TABLE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISTC": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\xdd\\x00\\xdd\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 221, "newlines": 221, "modlines": 0, "user": "ASM"}, "text": "*\n*\n*\n*                 *** DATA AND WORK AREAS ***\n******************************************************************\n*                                                                *\n*\n* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED\n* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED\n* WITH ALL OTHER PROGRAMS.\n*\n******************************************************************\n*\nTRTBL    DS    CL16                    TRANSLATE TBL\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nDATAAD1  DS    F                       @ MAPDB2                   @05A\nDATAAD2  DS    F                       @ MAPMVS                   @05A\nDATAAD3  DS    F                       @ MAPOMVS                  @10A\nSFTAD    DS    F                       @ SYSTEM FUNCTION TABLE    @05A\nS_DC     DS    CL2                                                @28A\nS_NI     DS    CL2                                                @28A\nS_STM    DS    CL3                                                @28A\nS_DSN    DS    CL3                                                @28A\nS_BPX    DS    CL3                                                @28A\nS_ON     DS    CL3                                                @32A\nS_OFF    DS    CL4                                                @32A\nS_USING  DS    CL5                                                @28A\nTXTOFST  DS    0F                                                 @30A\n         DS    X                                                  @30A\nTXTOFSET DS    XL3                     OFFSET TO TEXT BYTE        @30A\nENDOFST  DS    F                       DSECT ENDING OFFSET        @25A\nPUNCHDCB DS    F                       @ SYSPUNCH DCB\nPRINTDCB DS    F                       @ SYSPRINT DCB\nREGUSDCB DS    F                       @ REGUSE   DCB\nINDCB    DS    F                       @ SYSIN DCB\nCSECT    DS    CL8                     SPECIFIED CSECT NAME\nESDID    DS    XL2                     ESD ID OF SPECIFIED CSECT\nENDLBLNM DS    CL8                     SYMBOL FOR END STMT BEGIN POINTE\nLINECT   DS    PL2                     PRINT LINE COUNTER\nSTART    DS    A                       LKED ASSIGNED START ADDR OF CSEC\nEND      DS    A                       CSECT END ADDRESS\nCSTLENG  DS    F                       LENGTH OF SPECIFIED CSECT\nLBLTBL   DS    F                       @ LABEL TABLE\nCURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR\nENDLBL   DS    F                       @ END OF LABEL TBL\nTXTSTRT  DS    F                       @ TEXT STORAGE AREA\nTXTEND   DS    F                       @ END OF TEXT AREA\nTXTCURR  DS    F                       @ CURRENT TEXT LOC\nDTBSTRT  DS    F                       @ DSECT TABLE START\nDTBCURR  DS    F                       @ CURRENT DSECT TABLE ENTRY\nDTBEND   DS    F                       @ DSECT TABLE END\nUSGSTRT  DS    F                       @ USING TABLE START\nUSGCUR   DS    F                       @ CURRENT USING TABLE ENTRY\nUSGEND   DS    F                       @ USING TABLE END\nDATSTRT  DS    F                       @ DATA TABLE ADDRESS\nDATOCUR  DS    F                       @ CURRENT DATA ENTRY\nDATOEND  DS    F                       @ END OF DATA TABLE\nFLDTBL   DS    F                       @ FIELD TABLE ADDRESS\nCURRFLD  DS    F                       CURRENT FIELD ENTRY ADDR\nENDFLD   DS    F                       @ END OF FIELD TBL\nBLANX    DC    CL18' '                 CONSTANT BLANKS\nFLPTASM  DS    XL1                     FLOATING POINT INDICATOR\nPRIVASM  DS    XL1                     PRIVILEGED INDICATOR\nA64BASM  DS    XL1                     64 BIT INST INDICATOR\nUSERR    DS    XL1                     ERROR INDIC FOR HDISASM1\nNBRLBLS  DS    H                       NBR LABELS FROM HDISASM1\n*\n*\n*\nWORKREC  DS    0CL80                   DISASSEMBLY WORK AREA\nNAME     DS    CL8                     LABEL NAME\n         DS    CL1\nMNEMONIC DS    CL6                     INSTRUCTION MNEMONIC       @20C\nOPNDS    DS    CL30                    OPERAND1 AND OPERAND 2     @20C\nOPNDSSP  DS    CL1                                                @16C\nCOMMENTS DS    CL25                    COMMENT                    @14C\nCOL72    DS    CL1                     CONTINUATION COLUMN\nSEQNBR   DS    CL8                     CARD SEQUENCE NBR\n         ORG   MNEMONIC+4                                         @25A\nMNEMONI2 DS    CL6                     INSTRUCTION MNEMONIC       @25A\n         ORG   COMMENTS-3                                         @25A\nCOMMENTE DS    CL28                    COMMENT                    @25A\n         ORG\nWORKREC2 DS    CL80                    CONTINOUS LINE             @18C\n         DS    CL30                                               @22A\nCOMTREC  DS    0CL80                                              @27A\n         DC    60C'*'                                             @27A\n         DC    CL20' '                                            @27A\n*\n*\n*\nPRTLINE  DS    0CL121                  PRINT LINE\nPCC      DS    CL1                     CARRIAGE CONTROL\nPRT      DS    CL120                   PRINT DATA\nCARDNO   DS    PL4                     CURRENT OUTPUT CARD NBR\n*\n*\n*\n         DS    0F\nBLDLIST  DS    0CL62                   BLDL LIST\n         DC    H'1'                    ONE ENTRY\n         DC    H'58'                   LENGTH OF ENTRY\nMEMBER   DC    CL8' '                  MEMBER NAME\nTTRMOD   DC    XL3'000000'             TTR OF MODULE\nCCAT     DC    XL1'00'                 CONCATENATION NUMBER\n         DC    XL1'00'\nALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR\n*                           80=ALIAS\nTTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD\n         DC    XL1'00'\nTTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST\nNNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST\nATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1\n*                           80=RENT\n*                           40=REUS\n*                           20=OVERLAY\n*                           10=UNDER TEST\n*                           08=ONLY LOADABLE\n*                           04=SCATTER FORMAT\n*                           02=EXECUTABLE\n*                           01=ONE TXT, NO RLD RECORDS\nATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2\n*                           80=CANNOT BE REPROCESSED BY LKED E\n*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO\n*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO\n*                           10=CONTAINS NO RLD RECORD\n*                           08=CANNOT BE REPROCESSED BY LKED\n*                           04=CONTAINS TESTRAN SYMBOLS\n*                           02=CREATED BY LKED\n*                           01=REFR\nTOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD\nLENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD\nLKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR\nATTR2    DC    XL1'00'                 ATTRIBUTES 2\n*                           80=PROCESSED BY OS/VS LKED\n*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE\n*                           10=SSI PRESENT\n         DC    XL2'0000'\nSCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH\nTTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH\nSCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD\nSCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT\nALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME\nALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS\nSSI      DS    XL4'00000000'           SSI BYTES\nCODSTRT  DS    F                       CODE TABLE ADDR            @03A\nCODOCUR  DS    F                       CURRENT CODE ONLY ADDR     @03A\nCODOEND  DS    F                       END OF CODE ONLY TABLE     @03A\nCTLSTRT  DS    F                       CTLBK TABLE ADDR           @04A\nCTLOCUR  DS    F                       CURRENT CTLBK ADDR         @04A\nCTLOEND  DS    F                       END OF CTLBK TABLE         @04A\nENDDSCT  DC    X'FC00'                                            @09A\nAUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH\nAUTHCOD  DC    XL1'00'                 AUTH CODE\nINSTENT  DS    0CL11                   CURRENT INSTRUCTION ENTRY  @20C\nINAME    DS    CL6                     INSTR NAME (MNEMONIC)      @20C\nITYPE    DS    XL1                     INSTRUCTION TYPE\nICLASS   DS    XL1                     INSTRUCTION CLASS\nIEDT     DS    XL1                     INSTRUCTION EDITS\nICCSET   DS    XL1                     TYPE CONDITION CODE SET\nINLNG    DS    XL1                     INSTRUCTION LENGTH\nIOLNG    DS    XL1                     OPERAND LENGTH              @28A\n*TXTOFST  DS    0F                                                 @29A\n*         DS    X                                                  @29A\n*TXTOFSET DS    XL3                     OFFSET TO TEXT BYTE        @29A\nTEXT     DS    XL48                    CURRENT TEXT\n*\nDEBUGXX  DC    C'12345678'\n         DC    C'9ABCDEFG'\nXZROS    DC    16X'00'                 CONSTANT ZEROS\nUDSCTAD  DC    A(0)                    @ USER DEFINED DSECT        @25A\nHIVAL    DC    4X'FF'                  CONSTANT X F'S\nSIMAPOFT DC    H'0'                    OFFSET                      @18A\nSIMAPB   DC    X'00'                   BIT MASK\nXOFST    DC    XL3'000B14'   ** DEBUG ** RELATIVE OFFSET\nCOMMENT  DC    CL88' '                 SAVE COMMENT FIELD          @14A\nCCOMMENT DC    CL28' '                 CURRRENT COMMENT  LONG      @15A\n         DC    CL20' '                 RESERVED ??                 @16A\nBD15     DS    A                       REGISTER SAVE AREA          @29A\nOPNDWK   DS    CL80                    OPERAND BUILD AREA          @14C\nOWSTRT   DC    A(OPNDWK)               @ OPERAND WORK AREA\nSXAPO    DC    C'X'''\nFLAG1    DC    X'00'                                               @15A\nFLGHEX4  EQU   X'80'                   HEX4 FLAG                   @15A\nFLGPSA   EQU   X'40'                   PSA  MAPPING                @15A\nFLGIXREG EQU   X'20'                   INDEX REGISTER IS ZERO      @15A\nFLGFOUND EQU   X'10'                   VARIABLE NAME FIND          @17A\nFLGUDSCT EQU   X'08'                   USER DEFINED DSECT MAPPING  @25A\nFLGNF    EQU   X'04'                                               @26A\nPRTABL   DS    CL9                     PRINTABLE HEX WORK\nSIDSC    DC    CL5'  '                 CURRENT DSECT NAME          @18A\n         DC    C'BASETBL ' ** DEBUG **\nBASES    DC    XL176'00'    11*16      PROGRAM BASE REGISTER TBL   @15C\n         DC    CL6'DSECTS'                                         @23A\nDSREGTBL DC    CL13'R0 '                                           @23A\n*                   0123456789012                                  @23A\n*                   RXX TXXXXX                                     @23A\nDSREGL   EQU   5                       LENGTH OF DSECT NAME        @23A\n*        0123456789012\n*        R1  +ODBFS\nDSREGEL  EQU   13                      LENGTH OF DSECT TABLE ENTRY @23C\n         DC    CL13'R1 '                                           @23A\n         DC    CL13'R2 '                                           @23A\n         DC    CL13'R3 '                                           @23A\n         DC    CL13'R4 '                                           @23A\n         DC    CL13'R5 '                                           @23A\n         DC    CL13'R6 '                                           @23A\n         DC    CL13'R7 '                                           @23A\n         DC    CL13'R8 '                                           @23A\n         DC    CL13'R9 '                                           @23A\n         DC    CL13'R10'                                           @23A\n         DC    CL13'R11'                                           @23A\n         DC    CL13'R12'                                           @23A\n         DC    CL13'R13'                                           @23A\n         DC    CL13'R14'                                           @23A\n         DC    CL13'R15'                                           @23A\n         DC    CL13'     PSA'                                      @23A\n*\nCOMMEND  EQU   *\n         HDISEQU\n         YREGS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDISTD": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x014\\x00#\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\x84\\x00\\x84\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.52", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:23", "lines": 132, "newlines": 132, "modlines": 0, "user": "ASM"}, "text": "* DSECT MAPPING\n*\nUSINGD   DSECT ,                       USING TABLE ENTRY\nUSBGN    DS    XL3                     OFFSET TO BEGINNING OF RANGE\nUSEND    DS    XL3                     OFFSET TO END OF RANGE\nUSREG    DS    XL1                     BASE REGISTER USED\nUSTYPE   DS    XL1                     TYPE:P=PGM,D=DSECT,G=GLOBAL\nUSVALU   DS    XL3                     DSECT TABLE ADDRESS\nUSINGL   EQU   *-USBGN                 11\n*\n*\nDSECTHD  DSECT ,                       DSECT TABLE HEADER ENTRY\nDSECTHN  DS    CL8                     DSECT NAME\nDSECTHA  DS    XL3                     DSECT TABLE ADDRESS (DSECTD)\nDSECTR   DS    CL8                     MAIN DSECT NAME\nDSECTHL  EQU   *-DSECTHN               19\n*\n*\nDSECTD   DSECT ,                       DSECT TABLE ENTRY\nDSOFSET  DS    XL3                     OFFSET TO 1ST BYTE OF FIELD\nDSLBTYP  DS    C                       LABEL TYPE = D\nDSLNAME  DS    CL12                    FIELD NAME\nDSLENG   DS    X                       FIELD LENGTH\nDSCOMMT  DS    XL30                    COMMENT OR DESCRIPTION\nDSECTL   EQU   *-DSOFSET               47\n*\n*\nLABELD   DSECT ,                       LABEL TABLE ENTRY\nLBLADR   DS    XL3                     RELATIVE ADDR IN TEXT\nLBLTYP   DS    C                       TYPE: L=LABEL, A=ADCON, V=VCON,\n*                                            8=ADCON 8 BYTES\n*                                            U=USER DEFINE LABEL\nLBLNAME  DS    CL12                    NAME (SYMBOL)\nLBLLEN   DS    X                       LENGTH IF A, V, OR W\nLBLREF   DS    XL3                     REFERENCE ADDR\nLABELL   EQU   *-LBLADR                20\n*\n*\nDATAD    DSECT ,                       DATA FIELD TABLE ENTRY\nDATASTRT DS    XL3                     OFFSET TO BEGINNING OF RANGE\nDATAEND  DS    XL3                     OFFSET TO END OF RANGE\nDATATYPE DS    C                       FIELD TYPE (C,X,H,A)\nDATAL    EQU   *-DATASTRT              7\n*\n*\nCODED    DSECT ,                       DATA FIELD TABLE ENTRY\nCODESTRT DS    XL3                     OFFSET TO BEGINNING OF RANGE\nCODEEND  DS    XL3                     OFFSET TO END OF RANGE\nCODEL    EQU   *-CODESTRT              LENGTH OF DSECT CODED 6\n*\n*\nCTLD     DSECT ,                       CONTROL BLOCK TABLE ENTRY\nCTLOFST  DS    XL3                     OFFSET\nCTLREG   DS    XL1           3         REGISTER\nCTLTYPE  DS    C             4         FIELD TYPE ($ OR @)\nCTLDSECT DS    CL5           5         DSECT NAME\nCTLCOMM  DS    CL27          10        COMMENT\nCTLBK    EQU   *-CTLOFST               LENGTH OF DSECT CTLD 37\n*\n* CTLBK @TCBXX 000082 2 COMMENT\n*  1234567890123456789012345678\nFCTLBKD  DSECT\nFCTLBID  DS    CL5           0   'CTLBK'\n         DS    C\nFCTLBKN  DS    CL6           6   CONTROL BLOCK NAME\n         DS    C\nFCTLBOFS DS    CL6          13   OFFSET\n         DS    C\nFCTLREG  DS    C            20   REGISTER\n         DS    C\nFCTLCOMM DS    CL27         22   COMMENT\n* ULABL NNNNNNNNNNNN OOOOOO LLL\n*  1234567890123456789012345678\nFULABLD  DSECT\nFULABLID DS    CL5           0   'ULABL'\n         DS    C\nFULABLNM DS    CL12          6   USER LABEL NAME\n         DS    C\nFULABLOF DS    CL6          19   OFFSET\n         DS    C\nFULABLNG DS    CL3          26   USER LABEL LENGTH\n* USING 000030 004A10 B P 004850\n* USING 000030 004A10 A D LCCA\n*  1234567890123456789012345678912\nFUSID    DSECT\nFUSIID   DS    CL5           0   LITERAL 'USING'\n         DS    C\nFUSIBOFT DS    CL6           6   OFFSET TO BEGIN LOCATION\n         DS    C\nFUSIEOFT DS    CL6          13   OFFSET TO ENDING LOCATION\n         DS    C\nFUSIREG  DS    C            20   BASE RESISTER TO BE USED (HEX, 1-F)\n         DS    C\nFUSITYPE DS    C            22   TYPE, P=PROGRAM BASE, D=DSECT BASE\n         DS    C\nFUSIPBAS DS    CL6          24   INITIAL BASE REGISTER VALUE IF TYPE P\n         ORG   FUSID+24\nFUSIDSCT DS    CL8          24   DSECT NAME IF TYPE D\n* FRRP     DSECT 0005\n*  1234567890123456789012345678912\nFDSECT   DSECT\nFDSECTHN DS    CL8           0         DSECT NAME\n         DS    CL7                     ' DSECT '\nFDSECT#  DS    CL4          15         NUMBER OF ENTRIES\n         DS    C                       SPACE\nFDSECTR  DS    CL8                     MAIN DSECT NAME\n* BIWINTGP+12  1568 004 IOSVINTG PARMLIST 1568\n* 01234567890123456789012345678912\nFDSECTD  DSECT\nFDSLNAME DS    CL12          0         FIELD NAME\n         DS    C\nFDSOFSET DS    XL5          13         OFFSET TO 1ST BYTE OF FIELD\n         DS    C\nFDSLENG  DS    CL3          19         FIELD LENGTH\n         DS    C\nFDSCOMMT DS    XL28         23         COMMENT OR DESCRIPTION\nFDATAD   DSECT\n* DATA SSSSSS EEEEEE\n* DATX SSSSSS EEEEEE\n* CODE SSSSSS EEEEEE\n*  1234567890123456789012345678912\n         DS    CL5                     'DATA ' , 'DATX ' OR 'CODE '\nFDATASTR DS    CL6           5         OFFSET TO BEGINNING OF RANGE\n         DS    C\nFDATAEND DS    CL6          12         OFFSET TO END OF RANGE\n*\nDTBL     DSECT\nD1OPND   DS    CL6           0         1ST OPERAND\nD2OPND   DS    CL6           6         2ND OPERAND\nDCTLBK   DS    CL6           12        CONTROL BLOCK\nDTBLL    EQU   *-D1OPND      18\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOAD": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10V\\x04\"\\x04\"\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:56:08", "lines": 1058, "newlines": 1058, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MVSC#SFT": {"ttr": 7174, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00(\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00[\\x00[\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:28", "lines": 91, "newlines": 91, "modlines": 0, "user": "ASM"}, "text": "SFTCS    CSECT\nSFTTB    DS    0CL18                   SYSTEM FUNCTION TABLE\n         DC    AL2(0),CL16'LXRES'\n         DC    AL2(4),CL16'LXFRE'\n         DC    AL2(8),CL16'ETCRE'\n         DC    AL2(12),CL16'ETDES'\n         DC    AL2(16),CL16'ETCON'\n         DC    AL2(20),CL16'ETDIS'\n         DC    AL2(24),CL16'AXRES'\n         DC    AL2(28),CL16'ATFRE'\n         DC    AL2(32),CL16'ATEXT'\n         DC    AL2(36),CL16'AXSET'\n         DC    AL2(40),CL16'ATSET'\n         DC    AL2(56),CL16'ENQ/DEQ'\n         DC    AL2(64),CL16'GQSCAN'\n         DC    AL2(76),CL16'CPOOL BUILD'\n         DC    AL2(80),CL16'CPOOL EXPAND'\n         DC    AL2(84),CL16'CPOOL DELETE'\n         DC    AL2(88),CL16'VSMLIST'\n         DC    AL2(92),CL16'VSMLOC'\n         DC    AL2(96),CL16'CPUTIMER'\n         DC    AL2(100),CL16'CNZQUERY'\n         DC    AL2(104),CL16'ISQSCAN LOCAL'\n         DC    AL2(108),CL16'ISGENQ'\n         DC    AL2(112),CL16'ISGQUERY'\n         DC    AL2(128),CL16'CSVVFORK'\n         DC    AL2(132),CL16'CSVVFSCH'\n         DC    AL2(136),CL16'IFAQUERY'\n         DC    AL2(140),CL16'LLA LOOKASIDE'\n         DC    AL2(144),CL16'DIV'\n         DC    AL2(148),CL16'SYMREC'\n         DC    AL2(156),CL16'LOCASCB'\n         DC    AL2(160),CL16'STORAGE OBTAIN'   SSRV 030B\n         DC    AL2(164),CL16'RESMGR'\n         DC    AL2(168),CL16'WAIT'\n         DC    AL2(172),CL16'POST'\n         DC    AL2(176),CL16'PC-ESTAEX'\n         DC    AL2(180),CL16'ASCRE/DES/EXT'\n         DC    AL2(184),CL16'RESERVED'\n         DC    AL2(188),CL16'ALESERV ADDPASN'\n         DC    AL2(192),CL16'ALESERV DELETE'\n         DC    AL2(196),CL16'ALESERV EXTRACT'\n         DC    AL2(200),CL16'ALESERV SEARCH'\n         DC    AL2(204),CL16'STORAGE RELEASE'       SSRV 0311\n         DC    AL2(208),CL16'DSPSERV'               900\n         DC    AL2(212),CL16'TCBTOKEN'\n         DC    AL2(220),CL16'IXC SERVICE'\n         DC    AL2(224),CL16'TESTART'\n         DC    AL2(232),CL16'CSVQUERY'\n         DC    AL2(244),CL16'TIMEUSED'\n         DC    AL2(252),CL16'SUSPEND'\n         DC    AL2(256),CL16'RESUME'\n         DC    AL2(260),CL16'PURGE SRB'\n         DC    AL2(264),CL16'LLACOPY'\n         DC    AL2(284),CL16'SDOM SERVICE'\n         DC    AL2(288),CL16'SDOM CONNECT'\n         DC    AL2(292),CL16'SDOM DISCON'\n         DC    AL2(296),CL16'CTRACEWR'\n         DC    AL2(304),CL16'STCKCONV/TIME'\n         DC    AL2(308),CL16'UCBPIN/UCBLOOK'\n         DC    AL2(312),CL16'UCBINFO/UCBSCAN'\n         DC    AL2(320),CL16'EDTINFO'\n         DC    AL2(336),CL16'ENQ/RESERVE'\n         DC    AL2(340),CL16'DEQ'\n         DC    AL2(352),CL16'CONVTOD'\n         DC    AL2(356),CL16'CSVAPF'\n         DC    AL2(368),CL16'CSVDYNEX'\n         DC    AL2(376),CL16'SCHEDIRB'\n         DC    AL2(380),CL16'IWM4 SERVICE'\n         DC    AL2(392),CL16'IOSADMF'\n         DC    AL2(400),CL16'TESTART'\n         DC    AL2(408),CL16'IEAMSCHD'\n         DC    AL2(420),CL16'IOSCAPU'\n         DC    AL2(424),CL16'IEFDDSRV'\n         DC    AL2(428),CL16'IEAMETR'\n         DC    AL2(436),CL16'IEALSQRY'\n         DC    AL2(444),CL16'IOSCDR'\n         DC    AL2(448),CL16'CSVDYNL'\n         DC    AL2(456),CL16'IEFPRMLB'\n         DC    AL2(468),CL16'CSVDYLPA'\n         DC    AL2(472),CL16'ALESERV DUALPOOL'\n         DC    AL2(480),CL16'IEAMPDQ'\n         DC    AL2(496),CL16'IEAAPF'\n         DC    AL2(500),CL16'IEAARR'\n         DC    AL2(504),CL16'IEAARR'\n         DC    AL2(512),CL16'IOSSPOF/IOSWITCH'\n         DC    AL2(576),CL16'ITTWRITE'\n         DC    AL2(580),CL16'IEAARR'\n         DC    AL2(588),CL16'IEAARR'\n         DC    AL2(772),CL16'GQSCAN'\n         DC    X'FF'                 END OF TABLE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "READLMOD": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00(\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x01\\x87\\x01\\x87\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:28", "lines": 391, "newlines": 391, "modlines": 0, "user": "ASM"}, "text": "   TITLE  '*** READLMOD: IEWBIND SUBROUTINE ***'\nREADLMOD CSECT\nREADLMOD AMODE 31\nREADLMOD RMODE 24\n***********************************************************************\n*  SUBROUTINE USED TO RETURN LOAD MODULE INFORMATION TO THE CALLER.   *\n*  THE IEWBUFF AND IEWBIND MACROS ARE USED TO OBTAIN THE DATA. ON     *\n*  RETURN, A POINTER TO THE DATA BUFFER FROM IEWBIND IS PASSED TO THE *\n*  CALLER.                                                            *\n*                                                                     *\n*  CALLER PASSES A PARAMETER AREA THAT CONTAINS INFORMATION ABOUT THE *\n*  REQUESTED DATA, AND SEVERAL DATA FIELDS THAT WILL RECEIVE DATA     *\n*  FROM THIS SUBROUTINE ON RETURN. FOR DETAILED INFORMATION ON THE    *\n*  IEWBIND AND IEWBUFF MACROS SEE THE IBM MANUAL PROGRAM MANAGEMENT   *\n*  SECTION ON THE API INTERFACE.                                      *\n*                                                                     *\n*  CALLER PASSED PARAMETER AREA FORMAT:                               *\n*       PARMAREA DS    0F      READLMOD PARMS                         *\n*       PRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER   *\n*       PRMEMBER DS    CL8     MEMBER NAME                            *\n*       PRMCSECT DS    CL8     CSECT NAME                             *\n*       PRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,*\n*       *                         TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,  *\n*       *                         NAME, OR MAP                        *\n*       PRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO *\n*       *                      BEFORE A FIRST CALL FOR A SET OF DATA, *\n*       *                      THEN LEAVES IT AS-IS WHEN RETURNING FOR*\n*       *                      ADDITIONAL DATA UNTIL IT HAS ALL BEEN  *\n*       *                      RETURNED. CURRENT VALUE IS RETURNED BY *\n*       *                      THIS SUBROUTINE AFTER EACH CALL.       *\n*       PRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)    *\n*       PRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS   *\n*       *                      MORE DATA OF THIS TYPE IS AVAILABLE AND*\n*       *                      WILL BE RETURNED IN SUBSEQUENT CALLS.  *\n*       *                      4 MEANS THE DATA IN THE BUFFER IS ALL  *\n*       *                      THAT IS AVAILABLE OF THE REQUESTED TYPE*\n*       PRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER*\n*       PRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE *\n*       *                      HEADER IS 32 BYTES LONG, FOLLOWED BY   *\n*       *                      THE DATA ELEMENTS.                     *\n*       PRMERROR DS    CL1     ERROR INDICATOR ON RETURN:             *\n*       PRMOK    EQU   C' '        SUCCESSFUL READLMOD CALL           *\n*       PRMPRMER EQU   C'P'        PARAMETER ERROR                    *\n*       PRMACERR EQU   C'E'        IEWBIND MACRO ERROR OCCURRED       *\n*                                                                     *\n* AUTHOR R THORNTON FEB 2002                                          *\n*                                                                     *\n* MODIFIED BY ALBERT CHENG                                            *\n*                                                                     *\n* 1) THE SIZE OF THE LAST BUFFER OF GET TEXT IS INCORRECT. EXTEND     *\n*    THE SIZE OF THE BUFFER SIZE FROM 32768 TO 262144 TO FIX THE      *\n*    PROBLEM.                                        (AC 20 JUN 2017) *\n***********************************************************************\n***********************************************************************\n*        INIT1:                                                       *\n*   SET UP BASE REGISTERS, CHAIN SAVE AREAS.                          *\n***********************************************************************\n         USING READLMOD,R3\nINIT1    BAKR  R14,0              SAVE CALLER'S REGS\n         LR    R3,R15             SET UP BASE FIRST BASE REG\n         J     INIT2              BRANCH AROUND CONSTANTS\n         DC    CL8'READLMOD'      PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'      ASSEMBLY DATE\n         DC    CL8'&SYSTIME'      ASSEMBLY TIME\n*********************************************************************\n*        INIT2:ON: VALIDATE CALLER'S PARAMETERS. OBTAIN BUFFER      *\n*  VALIDATE CALLER'S PARAMETERS. IF FIRST TIME HERE, INITIALIZE THE *\n*  IEWBIND API INTERFACE ENVIRONMENT.                               *\n*********************************************************************\nINIT2    LR    R6,R1              COPY PARMLIST POINTER\n         L     R6,0(R6)           POINT TO PARMLIST\n         USING PARMAREA,R6\n         MVI   PRMERROR,C' '      RESET PARAMETER ERROR BYTE\n         LA    R1,VALREQ          POINT TO VALID REQUEST TABLE\nI2CKEND  CLI   0(R1),X'FF'        END OF TABLE?\n         JNE   I2CKFND            NO\n         MVI   PRMERROR,C'P'      YES, INDICATE PARAMETER ERROR\n         J     RETURN             AND EXIT TO CALLER\nI2CKFND  CLC   PRMREQST,4(R1)     FOUND THE ENTRY?\n         JE    I2FOUND            YES\n         AHI   R1,16              NO, ADVANCE TO NEXT TABLE ENTRY\n         J     I2CKEND            CONTINUE SEARCH\nI2FOUND  MVC   HOLDREQ,0(R1)      SAVE THE REQUEST ENTRY\n*********************************************************************\n*        INIT3:                                                     *\n*  IF FIRST TIME, INITIALIZE THE IEWBIND API INTERFACE ENVIRONMENT  *\n*********************************************************************\nINIT3    CLI   FIRSTIME,1         FIRST TIME HERE?\n         JNE   INIT4              NO\n         MVI   FIRSTIME,0         RESET FIRST TIME SWITCH\n         STORAGE OBTAIN,LENGTH=262144,ADDR=(R11),SP=0              @01C\n         ST    R11,BUFFERAD       SAVE ADDRESS OF BUFFER STORAGE\n         XC    DTOKEN,DTOKEN      CLEAR DIALOG TOKEN\n         IEWBIND FUNC=STARTD,     INITIATE THE BINDER DIALOG           C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               DIALOG=DTOKEN,         DIALOG TOKEN                     C    C\n               VERSION=3              USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         JE    I3CRWKMD           CONTINUE IF SUCCESSFUL\n         WTO   'UNABLE TO START IEWBIND DIALOG, ABENDING',ROUTCDE=11\nABEND111 ABEND 111,DUMP           TERMINATE IN ERROR\nI3CRWKMD XC    WKTOKEN,WKTOKEN    CLEAR WORKMOD TOKEN\n         IEWBIND FUNC=CREATEW,    CREATE THE WORKMOD                   C    C\n               RETCODE=RETCODE,      RETURN CODE                       C    C\n               RSNCODE=RSNCODE,      REASON CODE                       C    C\n               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C\n               DIALOG=DTOKEN,        DIALOG TOKEN                      C    C\n               INTENT=ACCESS,        WHAT WE NEED IT FOR               C    C\n               VERSION=3             USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         JE    INIT4              CONTINUE IF SUCCESSFUL\n         WTO   'UNABLE TO CREATE A WORKMOD, ABENDING',ROUTCDE=11\nABEND222 ABEND 222,DUMP           TERMINATE IN ERROR\n***********************************************************************\n*        INIT4:                                                       *\n*    DETERMINE WHETHER AN INCLUDE IS NEEDED, OR IF IT HAS ALREADY     *\n*    BEEN DONE. IF MEMBER NAME IS UNCHANGED, NO INCLUDE IS NEEDED,    *\n*    OTHERWISE, EXTRACT THE MEMBER NAME AND ISSUE AN INCLUDE.         *\n***********************************************************************\nINIT4    MVI   DDNMEMCH,0         CLEAR SWITCH\n         CLC   PRMEMBER,MEMBER    SAME MEMBER NAME BEING PROCESSED?\n         JE    INIT4A             YES, CONTINUE\n         MVI   DDNMEMCH,1         INDICATE MEMBER NAME CHANGED\n         MVC   MEMBER,PRMEMBER    SAVE MEMBER NAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,MEMBER+7        POINT TO RIGHT-HAND END\nI4CKTRL  CLI   0(R2),C' '         TRAILING BLANK?\n         JNE   I4ATRHE            NO\n         BCTR  R2,0               BACK UP 1 BYTE IN MEMBER NAME\n         JCT   R1,I4CKTRL         LOOP\n         MVI   PRMERROR,C'P'      NO MEMBER NAME, PARMAMETER ERROR\n         J     RETURN             AND EXIT TO CALLER\nI4ATRHE  STH   R1,MEMLENG         SAVE MEMBER NAME LENGTH\nINIT4A   CLC   PRMDDNAM,DDNAMEC   SAME DDNAME BEING PROCESSED?\n         JE    I4INCLUD           YES, CONTINUE\n         MVI   DDNMEMCH,1         INDICATE DDNAME CHANGED\n         MVC   DDNAMEC,PRMDDNAM   SAVE DDNAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,DDNAMEC+7       POINT TO RIGHT-HAND END\nI4ACKTRL CLI   0(R2),C' '         TRAILING BLANK?\n         JNE   I4AATRHE           NO\n         BCTR  R2,0               BACK UP 1 BYTE IN DDNAME\n         JCT   R1,I4ACKTRL        LOOP\n         MVI   PRMERROR,C'P'      NO DDNAME, PARMAMETER ERROR\n         J     RETURN             AND EXIT TO CALLER\nI4AATRHE STH   R1,DDNLENG         SAVE DDNAME LENGTH\nI4INCLUD CLI   DDNMEMCH,0         DDNAME OR MEMBER NAME CHANGED?\n         JE    INIT5              NO\n         MVI   LASTERR,C'P'       INSURE CURSOR RESET\n         IEWBIND FUNC=INCLUDE,    INCLUDE THE MEMBER TO PROCESS        C    C\n               RETCODE=RETCODE,      RETURN CODE                       C    C\n               RSNCODE=RSNCODE,      REASON CODE                       C    C\n               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C\n               INTYPE=NAME,          WE'RE SUPPLYING MEMBER NAME       C    C\n               DDNAME=DDNAME,        USE DDNAME TO FIND MEMBER         C    C\n               MEMBER=MEMNAME,       MEMBER NAME WITH LENGTH           C    C\n               VERSION=3 USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         JE    INIT5              CONTINUE IF SUCCESSFUL\n         WTO   'ERROR INCLUDING REQUESTED MEMBER, ABENDING',ROUTCDE=11\nABEND333 ABEND 333,DUMP           TERMINATE IN ERROR\n***********************************************************************\n*        INIT5:                                                       *\n*    DETERMINE WHETHER BUFFER SHOULD BE INITIALIZED. IF SO, ISSUE     *\n*    AN INITBUFF TO INITIALIZE IT.                                    *\n***********************************************************************\nINIT5    CLI   LASTERR,C' '       LAST CALL IN ERROR?\n         JNE   INITBUFF           YES\n         CLC   LASTRET,ZERO       LAST CALL LEFT MORE DATA?\n         JNE   INITBUFF           NO\n         CLC   LASTREQ,PRMREQST   LAST CALL FOR SAME DATA?\n         JE    INIT6              YES\nINITBUFF XC    CURSOR,CURSOR      RESET CURSOR FOR THIS CALL\n         L     R11,BUFFERAD       POINT TO THE BUFFER\n         L     R15,HOLDINIT       POINT TO INITBUFF FOR REQUESTED CLASS\n         BR    R15                GO TO APPROPRIATE BUFFER INIT.\nINITESD  IEWBUFF FUNC=INITBUF,TYPE=ESD INITIALIZE ESD BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITRLD  IEWBUFF FUNC=INITBUF,TYPE=RLD INITIALIZE RLD BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITTEXT IEWBUFF FUNC=INITBUF,TYPE=TEXT INITIALIZE TEXT BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITSYM  IEWBUFF FUNC=INITBUF,TYPE=SYM  INITIALIZE SYM  BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITIDRU IEWBUFF FUNC=INITBUF,TYPE=IDRU INITIALIZE IDRU BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITIDRL IEWBUFF FUNC=INITBUF,TYPE=IDRL INITIALIZE IDRL BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITIDRZ IEWBUFF FUNC=INITBUF,TYPE=IDRZ INITIALIZE IDRZ BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITIDRB IEWBUFF FUNC=INITBUF,TYPE=IDRB INITIALIZE IDRB BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITNAME IEWBUFF FUNC=INITBUF,TYPE=NAME INITIALIZE NAME BUFFER\n         J     INIT6              GO READ REQUESTED DATA\nINITMAP  IEWBUFF FUNC=INITBUF,TYPE=MAP  INITIALIZE MAP  BUFFER\n***********************************************************************\n*        INIT6:                                                       *\n*    IF CSECT NAME HAS CHANGED, EXTRACT IT FROM CALLER'S PARAMETERS.  *\n***********************************************************************\nINIT6    CLC   PRMCSECT,CSECT     SAME CSECT NAME BEING PROCESSED?\n         JE    MAINLINE           YES, CONTINUE\n         MVC   CSECT,PRMCSECT     SAVE CSECT NAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,CSECT+7         POINT TO RIGHT-HAND END\nI6CKTRL  CLI   0(R2),C' '         TRAILING BLANK?\n         JNE   I6ATRHE            NO\n         BCTR  R2,0               BACK UP 1 BYTE IN CSECT NAME\n         JCT   R1,I6CKTRL         LOOP\n         MVI   PRMERROR,C'P'      NO CSECT NAME, PARMAMETER ERROR\n         J     RETURN             AND EXIT TO CALLER\nI6ATRHE  STH   R1,CSLENG          SAVE CSECT NAME LENGTH\n*********************************************************************\n*        MAINLINE:                                                  *\n*  ISSUE THE IEWBIND FUNC=GETD MACRO TO READ REQUESTED DATA         *\n*********************************************************************\nMAINLINE MVI   PRMERROR,C' '      CLEAR ERROR INDICATOR\n         L     R11,BUFFERAD       POINT TO BUFFER HEADER\n         LA    R12,32(R11)        POINT TO FIRST OCCURRING ELEMENT\n         CLC   PRMREQST,=CL8'NAME' IS THIS A NAME REQUEST?\n         JE    DOGETN             YES, GOTO READ CSECT SECTION\nDOGETD   IEWBIND FUNC=GETD,       READ SPECIFIED DATA FOR CSECT NAME   C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C\n               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER OF BYTES READ INTO BUFFER C    C\n               VERSION=3              BUFFER VERSION USED\n         J     RETURN             GO BACK TO CALLER\nDOGETN   IEWBIND FUNC=GETN,       READ CSECT (SECTION) NAMES IN MEMBER C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER NAMES GOTTEN IN BUFFER    C    C\n               TCOUNT=TCOUNT,         TOTAL NBR NAMES IN MEMBER        C    C\n               NTYPE=SECTION,         RETURN SECTION (NOT CLASS) NAMES C    C\n               VERSION=3              USE VERSION 3 BUFFERS\n         J     RETURN             GO BACK TO CALLER\nDOGETE   IEWBIND FUNC=GETE,       READ ESD DATA FOR CSECT NAME         C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C\n               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER ESD ITEMS READ INTO BUFFERC    C\n               VERSION=3              BUFFER VERSION USED\n         J     RETURN             GO BACK TO CALLER\n***********************************************************************\n*        RETURN:                                                      *\n*  RETURN PROCESSING. RESTORE CALLER'S REGS, AND RETURN TO CALLER.    *\n***********************************************************************\nRETURN   CLI   PRMERROR,C' '      ANY ERROR FOUND?\n         JNE   RETSAVE            YES\n         MVC   PRMCURSR,CURSOR    SEND BACK IEWBIND CURSOR VALUE\n         MVC   PRMRETCD,RETCODE   SEND BACK IEWBIND RETURN CODE\n         MVC   PRMRSNCD,RSNCODE   SEND BACK IEWBIND REASON CODE\n         MVC   PRMCOUNT,COUNT     SEND BACK IEWBIND COUNT VALUE\n         MVC   PRMBUFAD,BUFFERAD  SEND BACK BUFFER ADDRESS\n         CLC   PRMRETCD,FOUR      ANY IEWBIND ERROR?\n         JNH   RETSAVE            NO\n         MVI   PRMERROR,C'E'      INDICATE IEWBIND ERROR\nRETSAVE  MVC   LASTERR,PRMERROR   SAVE ERROR INDICATOR\n         MVC   LASTRET,RETCODE    SAVE RETURN CODE\n         MVC   LASTREQ,PRMREQST   SAVE LAST REQUEST CODE\nGOBACK   L     R15,R15RC          GET PROGRAM RETURN CODE\n         PR                       RETURN TO CALLER\n***********************************************************************\n*        WORKING STORAGE AREAS                                        *\n***********************************************************************\nDTOKEN   DC    D'0'               DIALOG TOKEN\nWKTOKEN  DC    D'0'               WORKMOD TOKEN\nRETCODE  DC    F'0'               IEWBIND RETURN CODE\nRSNCODE  DC    F'0'               IEWBIND REASON CODE\nCURSOR   DC    F'0'               CURSOR VALUE FROM IEWBIND\nCOUNT    DC    F'0'               COUNT FROM IEWBIND CALLS\nTCOUNT   DC    F'0'               TOTAL COUNT FROM GETN\nR15RC    DC    F'0'               END OF JOB RETURN CODE\nZERO     DC    F'0'               CONSTANT ZERO\nFOUR     DC    F'4'               CONSTANT ZERO\nBUFFERAD DC    A(0)               ADDRESS OF BUFFER FOR IEWBUFF\nDDNMEMCH DC    X'00'              CHANGED SWITCH\nFIRSTIME DC    X'01'              FIRST TIME SWITCH\nBLANKS   DC    CL133' '           CONSTANT BLANKS\n*\nLASTERR  DC    C'P'               ERROR INDICATOR FROM LAST CALL\nLASTRET  DC    XL4'FF'            RETURN CODE FROM LAST CALL\nLASTREQ  DC    CL8'NONE'          DATA REQUEST FROM LAST CALL\n*\n         DS    0F\nHOLDREQ  DS    0CL16              SAVE AREA FOR VALREQ ENTRY\nHOLDLENG DC    H'0'                  LENGTH OF CLASS NAME\nHOLDCLAS DC    CL10' '               REQUESTED CLASS NAME\nHOLDINIT DC    A(0)                  INITBUFF ADDRESS\n*\nDDNAME   DS    0H                 INCLUDE LIBRARY DDNAME AREA\nDDNLENG  DC    H'0'                  INCLUDE LIBRARY NAME LENGTH\nDDNAMEC  DC    CL8' '                INCLUDE LIBRARY DDNAME\n*\nMEMNAME  DS    0H                 MODULE (MEMBER) NAME\nMEMLENG  DC    H'0'                 MEMBER NAME LENGTH\nMEMBER   DC    CL8' '               MEMBER NAME TEXT\n*\nCSNAME   DS    0H                 CSECT NAME\nCSLENG   DC    H'0'                 CSECT NAME LENGTH\nCSECT    DC    CL8' '               CSECT NAME TEXT\n*\nVALREQ   DS    0F                 TABLE OF VALID REQUESTS\n         DC    H'5',CL10'B_ESD     ',A(INITESD)\n         DC    H'5',CL10'B_RLD     ',A(INITRLD)\n         DC    H'6',CL10'B_TEXT    ',A(INITTEXT)\n         DC    H'5',CL10'B_SYM     ',A(INITSYM)\n         DC    H'6',CL10'B_IDRU    ',A(INITIDRU)\n         DC    H'6',CL10'B_IDRL    ',A(INITIDRL)\n         DC    H'6',CL10'B_IDRZ    ',A(INITIDRZ)\n         DC    H'6',CL10'B_IDRB    ',A(INITIDRB)\n         DC    H'6',CL10'B_NAME    ',A(INITNAME)\n         DC    H'5',CL10'B_MAP     ',A(INITMAP)\n         DC    X'FFFF'\n*\n***********************************************************************\n* NAMES AND ESD BUFFER MAPPINGS. NOTE THAT THE BUFFER VERSION MUST    *\n* MATCH THE VERSION OF THE GETN AND THE GETD BINDER API'S. THE MAPBUF *\n* FUNCTION OF THE IEWBUFF MACRO PROVIDES DSECT MAPS FOR BOTH THE ESD  *\n* AND THE NAMES BUFFERS. REGISTERS 6 AND 7 ARE DEDICATED AS BASE REG- *\n* ISTERS FOR THE ESD BUFFER HEADER AND ENTRIES, RESPECTIVELY. SIMIL-  *\n* ARLY, REGISTERS 8 AND 9 ARE DEDICATED TO THE NAMES BUFFER.          *\n* NOTE THAT YOU MUST CODE THE IEWBUFF MACRO WITHIN A CSECT. ALSO NOTE *\n* THAT THE VERSION PARAMETER IN IEWBUFF MUST MATCH THE VALUE OF THE   *\n* VERSION PARAMETER IN THE GETN AND GETD BINDER API'S.                *\n***********************************************************************\n         IEWBUFF FUNC=MAPBUF,TYPE=ESD,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=RLD,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRU,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRL,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRZ,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRB,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=SYM,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=TEXT,BYTES=262144,VERSION=3,         C    C\n               HEADREG=R11,ENTRYREG=R12                            @01C\n         IEWBUFF FUNC=MAPBUF,TYPE=NAME,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=MAP,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         LTORG\n***********************************************************************\n*  PARAMETER AREA PASSED BY CALLER                                    *\n***********************************************************************\nPARMAREA DSECT ,       READLMOD PARMAREA SENT BY CALLER\nPRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DS    CL8     MEMBER NAME\nPRMCSECT DS    CL8     CSECT NAME\nPRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                           TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                           NAME, OR MAP\nPRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                        BEFORE A FIRST CALL FOR A SET OF DATA,\n*                        THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                        ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                        RETURNED. CURRENT VALUE IS RETURNED BY\n*                        THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS\n*                        MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                        WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                        4 MEANS THE DATA IN THE BUFFER IS ALL\n*                        THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE\n*                        HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                        THE DATA ELEMENTS.\nPRMERROR DS    CL1     ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '      SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'      PARAMETER ERROR\nPRMACERR EQU   C'E'      IEWBIND MACRO ERROR OCCURRED\nREADLMOD CSECT\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCHDSCT": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00(\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x00\\x06\\x00\\x06\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:28", "lines": 6, "newlines": 6, "modlines": 0, "user": "ASM"}, "text": "* FUTURE ENHANCEMENT\nSRCHDSCT CSECT\nSRCHDSCT RMODE ANY\nSRCHDSCT AMODE 31\n         LA    15,4                 SET RC TO 4\n         BR    14                   RETURN AS NOT FIND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WRITEOUT": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00)\\x01\\x195\\x1f\\x01\\x195\\x1f\\x10 \\x02>\\x02>\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-17T00:00:00", "modifydate": "2019-12-17T10:20:29", "lines": 574, "newlines": 574, "modlines": 0, "user": "ASM"}, "text": "*-----------------------------------------------------------------\n* INPUT : TEXT\n*\n* 1) COPY DSECT NAME FROM COMMENT FIELD FOR THE FOLLOWING INSTRUCTION\n*    LLGT, LLGH, LGF, L, IC, AND LG (IE ICLASS = LIOP)\n* 2) IF CLEAR DSECT NAME OP CODES (IE ICLASS = CDOP), CLEAR DSECT NAME\n*    LA, LHI, AHI AND ETC\n* 3) REMOVE INVALID ENTRY FROM DSECT TABLE\n* 4) CLASS LROP (IE LR, LTR, LGR OR LLGTR)\n*    COPY TARGET DSECT TO SOURCE DSECT\n*                                  R1 ---> CVT\n*    EXAMPLE:\n*        L    R4,16\n*        LR   R1,R4                R4 ---> CVT\n*                                  R1 ---> CVT\n* 6) SUPPORT FIELD STATEMENT\n*-----------------------------------------------------------------\nWRITEOUT CSECT\nWRITEOUT RMODE ANY\nWRITEOUT AMODE 31\n         J     BEGIN\n         DC    C'WRITEOUT'             PROGRAM NAME\n         DC    C'01.01'                VERSION NUMBER\n         DC    C'&SYSDATE &SYSTIME'    ASSEMBLE DATE AND TIME\nBEGIN    DS    0H                      WRITE OUTPUT RECORDS\n         BAKR  R14,0\n         LARL  R3,WRITEOUT\n         USING WRITEOUT,R3\n         USING COMMPARM,R5\n         L     R0,TEXT                 LOAD TEXT INTO R15\n         NILH  R0,X'FF0F'              MASK OFF REGISTER\n         LARL  R15,OPCODE_TBL1\n         CLI   COMMENT,X'00'\n         JNE   WRTOPL1\n         MVI   COMMENT,X'40'\nWRTOPL1  CLI   0(R15),X'FF'            END OF TABLE\n         JE    WRTAHI1                 BRANCH IF YES\n         C     R0,0(R15)               OPCODE MATCH ?\n         JE    WRTLHI                  BRANCH IF YES\n         AHI   R15,4                   POINT TO NEXT TABLE ENTRY\n         J     WRTOPL1                 LOOP\nWRTAHI1  LARL  R15,OPCODE_TBL2         LOCATE OPCODE_TBL2\nWRTAHI2  CLI   0(R15),X'FF'            END OF TABLE ??\n         JE    WRT0050                 BRANCH IF YES\n         C     R0,0(R15)               OPCODE MATCH ?\n         JE    WRTAHI3                 BRANCH IF YES\n         AHI   R15,4                   POINT TO NEXT TABLE ENTRY\n         J     WRTAHI2                 LOOP\nWRTAHI3  JAS   R14,AHINNN\n         J     WRTCOMMT                BRANCH 1ST REG = 0\nWRTLHI   JAS   R14,CNVTNNN\n         J     WRTCOMMT                BRANCH 1ST REG = 0\nWRT0050  CLI   ICLASS,LROP             LR/LTR/LLGTR OP CODE ??\n         JE    WRTILR                  BRANCH IF YES\n         CLC   S_ALGR,MNEMONIC         ALGR OP CODE ??\n         JE    WRTNEWP2                BRANCH IF YES\n         CLC   S_SLGR,MNEMONIC         ALGR OP CODE ??\n         JE    WRTNEWP2                BRANCH IF YES\n         CLC   S_ALGR(3),MNEMONIC      ALG  OP CODE ??\n         JE    WRTNEWP1                BRANCH IF YES\n         CLI   TEXT,X'5E'              AL  OP CODE ??\n         JE    WRTNEWP1                BRANCH IF YES\n         CLI   TEXT,X'1E'              ALR OP CODE ??\n         JE    WRTNEWP1                BRANCH IF YES\n         CLI   TEXT,X'1F'              SLR OP CODE ??\n         JE    WRTNEWP1                BRANCH IF YES\n         CLI   TEXT,X'BF'              ICM OP CODE ??\n         JE    WRTICM                  BRANCH IF YES\n         CLI   COMMENT-1,C'!'          GLOBAL DSECT MAPPING?\n         JE    WRTCBASR                BRANCH IF YES\n         CLI   COMMENT-1,C'%'          PROGRAM DSECT MAPPING?\n         JE    WRTCBASR                BRANCH IF YES\n         TM    ICLASS,X'10'            LIOP/CDOP/CDOPA/CDOR ?\n         JO    WRTCBASR                BRANCH IF YES CLR BASEREG\n         CLI   ICLASS,NPSA             NPSA ?\n         JE    WRTCBASR                BRANCH IF YES CLR BASEREG\n         J     WRTCOMMT\nWRTNEWP2 JAS   R14,NEWPTR2             GET NEW POINTER\n         J     WRTCHK\nWRTNEWP1 JAS   R14,NEWPTR1             GET NEW POINTER\nWRTCHK   TM    FLAG1,FLGNF\n         JO    WRTCBASR\n         J     WRTCOMMT                BRANCH\nWRTILR   SR    R1,R1                   CLEAR R1 FOR IC\n         CLI   TEXT,X'B9'              DOUBLE BYTE LROP INSTR?\n         JE    WRTDBOP\n         IC    R1,TEXT+1               GET SOURCE AND TARGET REG\n         J     WRTCPY\nWRTDBOP  IC    R1,TEXT+3               GET SOURCE AND TARGET REG\nWRTCPY   JAS   R14,CPYDSCT             COPY TARGET DSECT REG\n         J     WRTCOMMT                BRANCH 1ST REG = 0\nWRTICM   TM    TEXT+1,X'07'            MASK 15/7 ??\n         JNO   WRTCOMMT                BRANCH IF NOT ONE\n* --------------------------------------------------------------\n* GET THE TARGET REGISTER AND INITIALISE THE CORRESPONDING\n* DSECT REGISTER NAME TABLE ENTRY TO BLANK\n* ---------------------------------------------------------------\nWRTCBASR SR    R1,R1                   CLEAR R1\n         CLI   ITYPE,RXY               RXY INSTRUCTION  ??\n         JE    WRT0100                 BRANCH IF YES\n         CLI   ITYPE,RRE2              RRE2 INSTRUCTION ??\n         JNE   WRT0100                 BRANCH IF NO\n         IC    R1,TEXT+3               GET RR\n         J     WRT0200\nWRT0100  IC    R1,TEXT+1               GET RR\nWRT0200  SRL   R1,4                    GET BASE REGISTER ONLY\n         MHI   R1,DSREGEL\n         LA    R4,DSREGTBL             DSECT REGISTER NAME TABLE\n         AR    R4,R1\n         CLI   COMMENT,C'+'            GLOBAL DSECT MAPPING ?\n         JE    CPYDSNAL                YES\n         CLI   ICLASS,CDOPA            CDOPA\n         JE    CLRDSCTA                BRANCH IF YES\n         CLI   ICLASS,CDOPA            CDOPA\n         JE    CLRDSCTA                BRANCH IF YES\n         CLI   ICLASS,CDOP             CDOP INSTRUCTION OP CODE ?\n         JE    CLRDSCTE                BRANCH IF YES\n         CLI   COMMENT,C'>'            GLOBAL DSECT MAPPING ?\n         JE    CPYDSNAL                YES\n         CLI   COMMENT,C'<'            LOCAL DSECT MAPPING ?\n         JE    CPYDSNAL                YES\n         CLI   COMMENT,C'('            LOCAL DSECT MAPPING ??\n         JE    CPYDSNAL                YES\n         CLI   COMMENT,C')'            GLOBAL DSECT MAPPING ??\n         JE    CPYDSNAL                YES\n         CLI   COMMENT,C'!'            LA DSECT GLOBAL MAPPING?\n         JE    CPYDSNAL                YES\n         CLI   COMMENT,C'%'            LA DSECT LOCAL MAPPING?\n         JE    CPYDSNAL                YES\n         CLC   MNEMONIC(2),S_LAY       LA or LAY  OP ??\n         JNE   CPYDSNAM                BRANCH IF NOT LA/LAY INSTR\n         CLI   COMMENT,C'@'\n         JNE   CLRDSCTA                BRANCH IF NO\n         MVI   4(R4),C'>'              CHANGE TO INDIRECT MAPPING\n         MVC   5(DSREGL,R4),COMMENT+1  SAVE CNTL BLOCK DSECT NAME\n         J     WRTCOMMT\nCLRDSCTA CLI   COMMENT,C'+'            GLOBAL OFFSET INDICATOR\n         JNE   CLRDSCTE                JUMP IF NOT EQUAL\n* COPY DSECT NAME FROM COMMENT TO DSECT REGISTER\nCPYDSNAL DS    0H\n         CLC   MNEMONIC(2),S_STM       ST/STG INSTRUCTION\n         JNE   CPYDSNAK                BRANCH IF NO\n         CLI   COMMENT+7,C'@'\n         JE    CHKDSCI                 BRANCH IF YES\n         CLC   S_ZV,5(R4)              DSECT ZVBK\n         JE    CPYDSNAK                BRANCH IF NO\n         CLC   S_ZG,5(R4)              DSECT ZGM\n         JE    CPYDSNAK                BRANCH IF NO\n         CLI   5(R4),C' '              DSECT PHB\n         JNE   CHKDSCI                 BRANCH IF YES\nCPYDSNAK MVC   4(DSREGL+1,R4),COMMENT  SAVE CNTL BLOCK DSECT NAME\nCHKDSCI  CLI   COMMENT,C'%'            LA LOCAL MAPPING?\n         JE    SETLDSC                 BRANCH IF YES\n         CLI   COMMENT,C'>'            INDIRECT GLOBAL MAPPING 1\n         JE    SETLDSC1                BRANCH IF YES\n         CLI   COMMENT,C'<'            INDIRECT LOCAL  MAPPING 1\n         JE    SETLDSC0                BRANCH IF YES\n         CLI   COMMENT,C')'            INDIRECT GLOBAL MAPPING 2\n         JE    SETLDSC2                BRANCH IF YES\n         CLI   COMMENT,C'*'            OFFSET ADDRESS INDICATOR\n         JE    SETLDSC3                BRANCH IF YES\n         CLI   COMMENT,C'('            INDIRECT LOCAL  MAPPING 2\n         JE    SETLDSC                 BRANCH IF YES\n         CLI   COMMENT,C'!'            LA GLOBAL MAPPING?\n         JNE   WRTCOMMT                JUMP IF NOT EQUAL\n         MVI   4(R4),C'@'              SET GLOBAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nSETLDSC  MVI   4(R4),C'$'              SET LOCAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nSETLDSC0 MVI   4(R4),C'('              SET LOCAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nSETLDSC1 MVI   4(R4),C')'              SET GLOBAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nSETLDSC2 MVI   4(R4),C'@'              SET GLOBAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nSETLDSC3 MVI   4(R4),C'+'              SET GLOBAL DSECT INDICATOR\n         J     WRTCOMMT                JUMP\nCPYDSNAM CLI   COMMENT,C'+'            OFFSET INDICATOR ?\n         JE    CPYDSNAL                JUMP IF EQUAL\n         CLI   COMMENT,C'@'            GLOBAL DSECT INDICATOR ?\n         JE    CPYDSNAL                JUMP IF EQUAL\n         CLI   COMMENT,C'*'            OFFSET ADDRESS INDICATOR ?\n         JE    CPYDSNAL                JUMP IF EQUAL\n         CLI   COMMENT,C'$'            LOCAL DSECT INDICATOR?\n         JE    CPYDSNAL                JUMP IF EQUAL\nCLRDSCTE CLI   4(R4),C'*'\n         JNE   CLRDSCTF                JUMP IF NOT EQUAL\n         CLC   TXTOFST,ENDOFST\n         JL    WRTCOMMT\nCLRDSCTF CLI   COMMENT,C')'            INDIRECT MAPPING\n         JE    WRTCOMMT                JUMP IF EQUAL\n         TM    ICLASS,X'10'            LIOP/CDOP/CDOPA/CDOR ?\n         JNO   WRTCOMMT                BRANCH IF NOT CLR BASEREG\n         CLC   MNEMONIC(2),S_STM       SKIP IF ST/STG INSTR\n         JE    WRTCOMMT                JUMP IF EQUAL\n         MVC   4(DSREGL+1,R4),BLANX    CLEAR DSECT\nWRTCOMMT DS    0H\n         CLI   COMMENTS-4,C' '        COMMNT FIELD IS OVERWRITTEN @06A\n         JNE   WRTCOMT4               BRANCH IF NO                @06A\n*        MVC   COMMENTS-5(L'COMMENTS),COMMENTS                    @06A\n         MVC   COMMENTS-4(L'COMMENTS),COMMENTS                    @06A\nWRTCOMT4 DS    0H                                                 @06A\n         CLC   S_DC,MNEMONIC           DC ??\n         JE    EXIT                    BRANCH IF YES\n         CLI   COMMENTS,C' '           COMMENT FIELD OVERWRITTEN?\n         JNE   EXIT                    BRANCH IF YES\n         CLC   OPNDSSP(2),BLANX        BLANK ??\n         JNE   SHF1SP                  BRANCH IF NON-BLANK\n         CLC   OPNDS+25(3),BLANX       SHORT OPERANDS ?\n         JNE   MLNORMC                 BRANCH IF NOT BLANK\n         MVC   OPNDS+26(L'COMMENTS+5),COMMENT\n         J     EXIT                    JUMP\nMLNORMC  DS    0H\n         MVC   COMMENTS,COMMENT        COPY COMMENT\n         CLI   COMMENT,C'@'            GLOBAL DSECT INDICATOR ?\n         JE    ML1SPCE                 JUMP IF TRUE\n         CLI   COMMENT,C'$'            PROGRAM DSECT INDICATOR ?\n         JNE   EXIT                    JUMP IF NOT TRUE\nML1SPCE  MVC   COMMENTS,COMMENT+1      COPY COMMENT\n         PR                            RETURN\nSHF1SP   MVC   COMMENTS+1(L'COMMENTS-1),COMMENT\nEXIT     PR                            RETURN\n* --------------------------------------------------------------\n* COPY SOURCE REGISTER DSECT TO TARGET REGISTER DSECT\n* INPUT R1 ->  TEXT+1 FOR LR  TEXT+3 FOR LGR / LLGTR\n*              Example : 1834 R1 = x'34'\n*                        Copy DSECT name from R4 to R3\n* --------------------------------------------------------------\nCPYDSCT  BAKR  R14,0                   SAVE REGISTERS\n         LR    R2,R1                   SAVE R1\n         SRL   R1,4                    GET TARGET REGISTER\n         NILL  R2,X'000F'              GET SOURCE REGISTER\n         CR    R1,R2                   SAME REGISTER ?\n         JE    CPYEXIT                 JUMP IF YES\n         MHI   R2,DSREGEL\n         LA    R4,DSREGTBL             LOCATE DSECT TABLE\n         AR    R4,R2\n         MHI   R1,DSREGEL\n         LA    R7,DSREGTBL             LOCATE DSECT TABLE\n         AR    R7,R1\n         MVC   4(DSREGL+1,R7),4(R4)    COPY TARGET TO SOURCE\n         CLI   5(R4),C' '              DUMMY DSECT ?\n         JE    CPYEXIT                 BRANCH IF YES\n         CLI   5(R4),X'00'             DUMMY DSECT ?\n         JE    CPYEXIT                 BRANCH IF YES\n         MVC   COMMENT(L'S_USING),S_USING\n         MVC   COMMENT+L'S_USING+1(DSREGL+1),4(R4)\n*                                               GET DSECT NAME\nCPYEXIT  PR                            RETURN TO CALLER\n* --------------------------------------------------------------\n* INPUT : TEXT\n* FUNCTION:\n* R1 -> 1st Register\n* R2 -> 2nd Register\n* --------------------------------------------------------------\nNEWPTR2  BAKR  R14,0                   SAVE REGISTERS\n         SR    R1,R1                   CLEAR R1 FOR IC\n         IC    R1,TEXT+3\n         LR    R2,R1                   SAVE R1\n         SRL   R1,4                    GET 1ST REGISTER\n         NILL  R2,X'000F'              GET 2nd REGISTER\n         CR    R1,R2                   SAME REGISTER ?\n         JE    NEWPT99                 JUMP IF YES\n         J     NEWDSCT\n* --------------------------------------------------------------\n* INPUT : TEXT\n* FUNCTION:\n* R1 -> 1st Register\n* R2 -> 2nd Register\n* --------------------------------------------------------------\nNEWPTR1  BAKR  R14,0                   SAVE REGISTERS\n         SR    R1,R1                   CLEAR R1 FOR IC\n         IC    R1,TEXT+1\n         LR    R2,R1                   SAVE R1\n         SRL   R1,4                    GET 1ST REGISTER\n         NILL  R2,X'000F'              GET 2ND REGISTER\n         CLC   S_ALGR(3),MNEMONIC      ALG  OP CODE ??\n         JE    NEWDSCT                 BRANCH IF YES\n         CR    R1,R2                   SAME REGISTER ?\n         JE    NEWPT99                 JUMP IF YES\nNEWDSCT  MHI   R1,DSREGEL\n         LA    R7,DSREGTBL             LOCATE DSECT TABLE\n         AR    R7,R1                   R7 -> 1st REG DSECT entry\n         MHI   R2,DSREGEL\n         LA    R8,DSREGTBL             LOCATE DSECT TABLE\n         AR    R8,R2                   R8 -> 2nd REG DSECT entry\n         CLC   S_ALGR,MNEMONIC         ALGR OPCODE ?\n         JE    NEWPT05                 JUMP IF ALGR OPCODE\n         CLC   S_ALGR(3),MNEMONIC      ALG  OPCODE ?\n         JE    NEWPT10                 JUMP IF ALGR OPCODE\n         CLC   S_SLGR,MNEMONIC         SLGR OPCODE ?\n         JE    NEWPT15                 JUMP IF SLGR OPCODE\n         CLI   TEXT,X'5E'              AL OPCODE ?\n         JE    NEWPT40                 JUMP IF YES\n         CLI   TEXT,X'1F'              SLR OPCODE ?\n         JE    NEWPTSL                 JUMP IF SLR OPCODE\nNEWPT00  LARL  R9,TBL_ALR              LOCATE FIRST ALR ENTRY\n         J     NEWPT20\nNEWPT05  LARL  R9,TBL_ALGR             LOCATE FIRST ALGR ENTRY\n         J     NEWPT20                 SCAN ACTION TABLE\nNEWPT10  LARL  R9,TBL_ALG              LOCATE FIRST ALG ENTRY\n         J     NEWPT50                 SCAN ACTION TABLE\nNEWPT15  LARL  R9,TBL_SLGR             LOCATE FIRST SLGR ENTRY\n         J     NEWPT20                 LOOP\nNEWPTSL  LARL  R9,TBL_SLR              LOCATE FIRST SLR ENTRY\nNEWPT20  CLI   0(R9),X'FF'               END OF TABLE ?\n         JE    NEWPT99                   BRANCH IF YES\n         CLC   D1OPND-DTBL(6,R9),4(R7)   1st OPERAND MATCH ??\n         JNE   NEWPT30                   JUMP IF NOT MATCH\n         CLC   D2OPND-DTBL(6,R9),4(R8)   2nd OPERAND MATCH\n         JE    NEWPT70                   JUMP IF EQUAL\nNEWPT30  AHI   R9,DTBLL                NEXT TABLE ENTRY\n         J     NEWPT20                 LOOP\n*  AL  ALG\nNEWPT40  LARL  R9,TBL_ALR              LOCATE FIRST ENTRY\nNEWPT50  CLI   0(R9),X'FF'             END OF TABLE ?\n         JE    NEWPT99                 BRANCH IF YES\n         CLC   D1OPND-DTBL(6,R9),4(R7)    1st DSECT NAME MATCH?\n         JNE   NEWPT60                    JUMP IF NOT MATCH\n         CLC   D2OPND-DTBL(6,R9),COMMENT  2nd DSECT NAME MATCH?\n         JE    NEWPT70                 JUMP IF MATCH\nNEWPT60  AHI   R9,DTBLL                NEXT TABLE ENTRY\n         J     NEWPT50                 LOOP\nNEWPT70  MVC   4(DSREGL+1,R7),DCTLBK-DTBL(R9) Copy control block\n         MVC   COMMENT(2),OPNDS\n         CLI   OPNDS+1,C','\n         JNE   NEWPT80\n         MVI   COMMENT+1,C' '\nNEWPT80  MVC   COMMENT(2),OPNDS        COPY REGISTERS\n         MVC   COMMENT-6+L'S_USING+1(DSREGL),0(R7) Copy Register\n         MVC   COMMENT+3(3),S41        '-> '\n         MVC   COMMENT+6(5),5(R7)\n         MVC   COMMENT+11(10),BLANX    INIT TO BLANKS\n         NI    FLAG1,255-FLGNF\n         PR                            RETURN TO CALLER\nNEWPT99  OI    FLAG1,FLGNF\n         PR                            RETURN TO CALLER\n* --------------------------------------------------------------\n* CONVERT OPERAND TO CHARACTER AND COPY IT TO CORRESPONDING DSECT\n* REGISTER ENTRY\n* INPUT  : TEXT\n* OUTPUT : DSECT REGISTER ENTRY OF AHI/AGHI IS UPDATED\n* --------------------------------------------------------------\nAHINNN   BAKR  R14,0                   SAVE REGISTERS\n         SR    R1,R1                   CLEAR R1 FOR IC\n         IC    R1,TEXT+1\n         NILL  R1,X'00F0'              MASK OFF OPCODE\n         SRL   R1,4                    GET TARGER REGISTER NO.\n         MHI   R1,DSREGEL\n         LA    R4,DSREGTBL             LOCATE DSECT TABLE\n         AR    R4,R1                   R4 -> DSECT ENTRY\n         LARL  R9,TBL_AHI              LOCATE TABLE ENTRY\nAHI_100  CLI   0(R9),X'FF'             END OF TABLE\n         JE    AHI_999                 BRANCH IF END OF TABLE\n         CLC   0(6,R9),4(R4)           DSECT NAME FOUND\n         JNE   AHI_400                 JUMP IF NOT EQUAL\n         CLC   6(2,R9),TEXT+2          DISPLACMENT MATCH ?\n         JE    AHI_600                 JUMP IF EQUAL\nAHI_400  AHI   R9,14                   NEXT TABLE ENTRY\n         J     AHI_100                 LOOP\nAHI_600  MVC   4(DSREGL+1,R4),8(R9)    COPY DSECT NAME\n         MVC   COMMENT-6+L'S_USING+1(DSREGL+1),8(R9)\nAHI_999  PR                            RETURN TO CALLER\nTBL_AHI  DC    C'@DBD  ',X'FFF0',C'@DBDP '  AHGI R4,-16\n         DC    C'@DBDP ',X'0010',C'@DBD  '  AHGI R4,16\n         DC    C'@RB   ',X'FFE0',C'>XSB  '  AHI  R4,-32\n         DC    C'@RB   ',X'FFC0',C'@RBPRX'  AHI  R4,-64\n         DC    C'@RBPRX',X'0040',C'@RB   '  AHI  R4,64\n         DC    C'@UCBC ',X'FFE0',C'>UCBP '  AHI  R4,-32\n         DC    C'@UCBC ',X'FFF0',C'>DCE  '  AHI  R4,-16\n         DC    X'FF'\n* --------------------------------------------------------------\n* CONVERT OPERAND TO CHARACTER AND COPY IT TO CORRESPINDING\n* DSECT REGISTER ENTRY\n* INPUT  : TEXT\n* OUTPUT : DSECT REGISTER TABLE ENTRY IS UPDATED\n* --------------------------------------------------------------\nCNVTNNN  BAKR  R14,0                   SAVE REGISTERS\n         SR    R1,R1                   CLEAR R1 FOR IC\n         IC    R1,TEXT+1\n         NILL  R1,X'00F0'              MASK OFF OPCODE\n         SRL   R1,4                    GET TARGER REGISTER NO.\n         MHI   R1,DSREGEL\n         LA    R4,DSREGTBL             LOCATE DSECT TABLE\n         AR    R4,R1                   R4 -> DSECT ENTRY\n         LH    R1,TEXT+2\n         CVD   R1,DBLWD                CONVERT TO PACKED\n         UNPK  DBLWD(5),DBLWD+5(3)       UNPACK\n         OI    DBLWD+4,C'0'            CLEAR SIGN\n         MVI   4(R4),C'#'              COPY #\n         MVC   5(5,R4),DBLWD\n         MVC   COMMENT-6+L'S_USING+1(DSREGEL),0(R4)\n         PR                            RETURN TO CALLER\nS41      DC    C'-> '\nS_ZG     DC    C'ZF'\nS_ZV     DC    C'ZV'\nS_LAY    DC    C'LAY'\nS_ALGR   DC    C'ALGR'\nS_SLGR   DC    C'SLGR'\nABEND    DC    X'0000'\n\nOPCODE_TBL1    DS 0H\n         DC    XL4'41000020'           LA   RX,32\n         DC    XL4'A70800C8'           LHI  RX,200\n         DC    XL4'A7080118'           LHI  RX,280\n         DC    XL4'A7080140'           LHI  RX,320\n         DC    XL4'A7080200'           LHI  RX,512\n         DC    XL4'A7080304'           LHI  RX,772\n         DC    XL4'A7080040'           LHI  RX,64\n         DC    XL4'A7080028'           LHI  RX,40\n         DC    XL4'A7080020'           LHI  RX,32\n         DC    XL4'A7080018'           LHI  RX,24\n         DC    XL4'A7080000'           LHI  RX,0\n         DC    XL4'A7080001'           LHI  RX,1\n         DC    XL4'A7080004'           LHI  RX,4\n         DC    XL4'A7080008'           LHI  RX,8\n         DC    XL4'A7090000'           LGHI RX,0\n         DC    XL4'A7090004'           LGHI RX,4\n         DC    XL4'A7090008'           LGHI RX,8\n         DC    XL4'A7090010'           LGHI RX,16\n         DC    XL4'A7090014'           LGHI RX,20\n         DC    XL4'A709008C'           LGHI RX,140\n         DC    XL4'A70900C0'           LGHI RX,192\n         DC    XL4'A70900C8'           LGHI RX,200\n         DC    XL4'A7090118'           LGHI RX,280\n         DC    XL4'A7090148'           LGHI RX,320\n         DC    XL4'A70901C0'           LGHI RX,448\n         DC    XL4'A7090280'           LGHI RX,640\n         DC    XL4'A7091368'           LGHI RX,4968\n         DC    XL4'A7091900'           LGHI RX,6400\n         DC    XL2'FFFF'\nOPCODE_TBL2    DS 0H\n         DC    XL4'A70A0040'           AHI  RX,64\n         DC    XL4'A70AFFC0'           AHI  RX,-64\n         DC    XL4'A70AFFE0'           AHI  RX,-32\n         DC    XL4'A70AFFF0'           AHI  RX,-16\n         DC    XL4'A70BFFE0'           AGHI RX,-32\n         DC    XL4'A70BFFF0'           AGHI RX,-16\n         DC    XL2'FFFF'\n*             01234567890123456789\nTBL_ALR  DC C'#00040@UCBP >DLW  ' ALR R1,R2  R1=#040  R2=UCBP\n         DC C'#00032@FRRE @FRRE ' AL  R1,XX  R1=#032  R2=FRRE\n         DC C'#00512@UCB  @UCBC ' ALR R1,R2  R1=#512  R2=UCB\n         DC C'#00772@CVT  >SFT  ' AL  R1,XX  R1=#772  R2=>SFT\n         DC C'+SXSB @SXSB @XSB  ' ALR R1,R2  R1=+SXSB R2=@SXSB\n         DC C'@SXSB +SXSB @XSB  ' ALR R1,R2  R1=@SXSB R2=+SXSB\n         DC C'@UCBP #00040>DLW  ' ALR R1,R2  R1=UCBP  R2=#040\n         DC C'@UCB  #00512@UCBC ' ALR R1,R2  R1=UCB   R2=#512\n         DC C'@VRA  +VRA  @VRA  ' ALR R1,R2  R1=@VRA  R2=+VRA\n         DC C'+VRA  @VRA  @VRA  ' ALR R1,R2  R1=@VRA  R2=+VRA\n         DC C'+XSB  @XSB  @SXSB ' ALR R1,R2  R1=+XSB  R2=@XSB\n         DC X'FFFF'\nTBL_SLR  DC C'@OENF #00032@FREE ' SLR R1,R2  R1=OENF R2=#032\n         DC C'@RB   #00064@RBPRX' SLR R1,R2  R1=RB   R2=#064\n         DC C'@UCBC #00512@UCB  ' SLR R1,R2  R1=UCBC R2=#512\n         DC C'@UCBC #00032>UCBP ' SLR R1,R2  R1=UCBC R2=#032\n         DC C'$IWK  #00024@CSKS ' SLR R1,R2  R1=$IWK R2=#024\n         DC X'FFFF'\n*             01234567890123456789\nTBL_ALGR DC C'+BBRM @BBRYP@BBRM '            ALGR R1,R2\n         DC C'@BBRYP#06400@BBRY '\n         DC C'@CSO  +CSO  @CSO  '\n         DC C'@CTDX #00320@CTDX3'\n         DC C'+CUTB @CUTB @CUTB '\n         DC C'@CUTB +CUTB @CUTB '\n         DC C'@CVT  #00140@ECVT '\n         DC C'+DATA @PGS  @XBUF '\n         DC C'@DBD  +OBDF @OBDF '\n         DC C'+DBD  @DBDP @DBD  '\n         DC C'@DBDP +DBD  @DBD  '\n         DC C'+FLDA @XBUF @FLDA '\n         DC C'+FLD  @XBUF @FLD  '\n         DC C'+OBDF @DBD  @OBDF '\n         DC C'+OBDF @OBDF @OBDF '\n         DC C'@OBDF +OBDF @OBDF '\n         DC C'@OBDF +OBDFS@OBDFS'\n         DC C'+OBDF @OBDFS@OBDFS'             ??\n         DC C'+OBDFE@OBDF @OBDFE'             ??\n         DC C'+OBDFI@OBDFE@OBDFI'             ??\n         DC C'+OBDKT@OBDFS@OBDKT'             ??\n         DC C'@OBDFS+OBDF @OBDFS'\n         DC C'+OBDFS@OBDF @OBDFS'\n         DC C'@OBDFS+OBDFS@OBDFS'\n         DC C'+OBDFS@OBDFS@OBDFS'\n*        DC C'@OBDFS+OBDKT@OBDKT'             ??\n         DC C'+OBDFS@SHOI @SHOI '\n         DC C'+OBDFX@OBDFS@OBDFX'\n         DC C'+OBDLM@OBDPS@OBDLM'\n         DC C'+OBDP2@OBDPX@OBDP2'\n*        DC C'+OBDPS@OBDF @OBDPS'\n*        DC C'+OBDPS@OBDPS@OBDPS'\n         DC C'@OBDPS+OBDPS@OBDPS'\n         DC C'+OBDPX@OBDPS@OBDPX'\n         DC C'+OBDR @OBDR @OBDR '\n         DC C'@OBDR +OBDRO@OBDR '   **\n         DC C'@OBDR +OBDRO@OBDR '   **\n         DC C'@OBDR +OBDR @OBDR '\n         DC C'+OBDR @OBX2 @OBDR '   OBDPRIME\n         DC C'+OBDR1@OBDR1@OBDR1'\n         DC C'+OBDRA@OBDR @OBDRA'\n         DC C'+OBDRC@OBDR @OBDRC'\n         DC C'+OBDRO@OBDR @OBDR '\n         DC C'+OBDRX@OBDR @OBDRX'\n         DC C'+OBDTC@OBDX @OBDTC'\n         DC C'+OBDU @OBDX @OBDU '\n         DC C'+OBDUC@OBDV @OBDUC'\n         DC C'+OBDV @OBDU @OBDV '\n         DC C'+OBDX @OBDR @OBDX '\n         DC C'@OBDX +OBX2 @OBX2 '\n         DC C'+OBX2 @OBDX @OBX2 '\n         DC C'+PGB  @XBUF @PGB  '\n         DC C'+PGB  @PG   @PGB  '\n         DC C'@PSFI #00280@BB   '\n         DC C'@PSFIA+PSFIA@PSFIA'\n         DC C'@PSI  #00200@BB   '\n         DC C'@RIDB1#00192@RIDB2'\n         DC C'@RIDM #00192@RIDBH'\n         DC C'@SGDA #00024@SGVS '\n         DC C'+SHOI @SHOI @SHOI '\n         DC C'+SQLDB@SQLD @SQLDB'\n         DC C'@UCO  +UCO  @UCO  '\n         DC C'@UKIT +UKIT @UKIT '\n         DC C'+UKIT @UKIT @UKIT '\n         DC C'@URF  #00336@URF  '\n         DC C'@USO  #00136@USO  '\n         DC C'@USO  +USO  @USO  '\n         DC C'@XBUF +FLD  @XBUF '\n         DC C'@XBUF +XBUF @XBUF '\n         DC C'+XBUF @PG   @XBUF '\n         DC C'+XBUF @XBUF @XBUF '\n         DC C'#00024@SGDA @SGVD '\n         DC C'#00136@USO  @USO  '\n         DC C'#00320@CTDX @CTDX3'\n         DC C'#04968@SCCP @SCCP1'\n         DC C'#06400@BBRYP@BBRY '\n         DC X'FFFF'\nTBL_ALG  DC C'@CUTB +CUTB @CUTB ' ALG  R1,xxx\n         DC C'@DBD  +OBDF @OBDF '\n         DC C'@CTDX #00320@CTDX3'\n         DC C'+DATA @PGS  @XBUF '\n         DC C'+FLD  @XBUF @FLD  '\n         DC C'@OBDF +OBDF @OBDF '\n         DC C'@OBDF +OBDFS@OBDFS'\n         DC C'@OBDF +OBDPS@DBD  '              ??\n         DC C'@OBDFS+OBDFS@OBDFS'\n         DC C'+OBDFS@OBDFS@OBDFS'\n         DC C'+OBDR @OBDK @OBDK '\n         DC C'+OBDR @OBDR @OBDR '\n         DC C'+OBDX @OBDR @OBDX '\n         DC C'+PGB  @PG   @PGB  '\n         DC C'+PGB  @XBUF @PGB  '\n         DC C'@PSFIA+PSFIA@PSFIA'\n         DC C'@XBUF +XBUF @XBUF '\n         DC C'+XBUF @PG   @PGB  '\n         DC C'+XBUF @XBUF @XBUF '\n         DC C'#00200@PSI  @BB   '\n         DC C'#00280@PSFI @BB   '\n         DC C'#00320@CTDX @CTDX3'\n         DC C'#00448@CTDY @WCPL '\n         DC C'#00640@MSIB @MSIF '\n*        DC C'+BBRM @BBRA @BBRM '   ??\n*        DC C'+BBRY @BBRA @BBRY '\n         DC X'FFFF'\n*             01234567890123456789\nTBL_SLGR DC C'@DBD  #00016@DBDP ' SLGR R1,R2\n         DC C'@OENF #00032@FREE '\n         DC C'@F4SA #00016@S38  '\n         DC C'@XBUF #00020@PGB  '\n         DC C'@XBUF +DATA @PGS  '\nHIGHVALU DC X'FFFFFF'\n         COPY  HDISTD\nCOMMPARM DSECT ,                       COMMON AREAS\n         COPY  HDISTC\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT885/FILE885.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT885", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}