DIS      TITLE '***** HDISASM DISASSEMBLY PHASE 0 *****'
*DISASSEMBLER PROGRAM TO CREATE AN ASSEMBLER H SOURCE PROGRAM
*FROM A LOAD MODULE IN A PDS. DD CARDS REQUIRED INCLUDE
*SYSPRINT FOR MESSAGES AND DIAGNOSTICS USING BLKSIZE A MULTIPLE
*OF 121, SYSLIB SPECIFYING THE PDS CONTAINING THE MEMBER,        FIX***
*WHICH MUST BE A PDS, SYSPUNCH FOR THE ASSEMBLER SOURCE
*PROGRAM, HAVING BLKSIZE A MULTIPLE OF 80, AND SYSIN
*FOR THE CONTROL CARD INPUT. CONTROL INPUT MAY OPTIONALLY
*BE ENTERED VIA THE PARM ON THE EXECUTE CARD. CONTROL
*INFORMATION INCLUDES THE MEMBER NAME AND CSECT NAME
*TO BE DISASSEMBLED. IF CSECT NAME IS OMITTED, THE CSECT
*FOR ESD-ID 0001 WILL BE USED.
*
*
* FILES USED BY THIS PROGRAM INCLUDE THE FOLLOWING:
*
* DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.
*
* DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING
*                 DISASSEMBLED TEXT. (MAXBLK=18,960)
*
* DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A
*                LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.
*                (MAXBLK=18997)
*
* DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.
*
*
* THE CONTROL CARD PROVIDES THE MEMBER NAME AND CSECT NAME
* OF THE PROGRAM TO BE DISASSEMBLED. MEMBER NAME IS REQUIRED.
* IF CSECT NAME IS OMITTED, THE CSECT WITH ESDID 0001 WILL
* BE USED. FORMAT IS FREE-FORM. MEMBER NAME MUST PRECEDE CSECT
* NAME. ANY NUMBER OF BLANKS MAY PRECEDE AND FOLLOW MEMBER NAME.
* A COMMA MAY IMMEDIATELY FOLLOW MEMBER NAME IF DESIRED.
*
*
* PARM DATA FROM THE EXECUTE CARD MAY BE USED TO SPECIFY
* VALIDITY OF PRIVILEGED OR FLOATING POINT INSTRUCTIONS.
* IF NOT SPECIFIED, PRIVILEGED AND FLOATING POINT OPERATION
* CODES WILL NOT BE TREATED AS INSTRUCTION OP-CODES. TO
* INCLUDE THESE INSTRUCTIONS, CODE:
*     PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS
*     PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS
*     PARM=(SUPVR,FLTPT) BOTH
*
*
*PROCESSING FLOW:
* 1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER
*    AND CSECT NAMES.
* 2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR
*    THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN
*    ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT
*    DIRECTORY INFORMATION.
* 3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE
*    MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY
*    FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.
*    ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL
*    RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.
*    RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING
*    OF LOAD MODULE INFORMATION IS AS FOLLOWS:
*    A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CEMD BLOCKS.
*    B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING
*       BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST
*       CONTROL RECORD.
*    C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED
*       CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE
*       TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD
*       INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED
*       DURING DISASSEMBLY.
* 4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION
*    DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.
*
*
* ORIGINAL AUTHOR R THORNTON
* MODIFIED BY ALBERT CHENG
* ABSTRACT : PROGRAM IS MODIFIED TO DISASSEMBLE TO SUPPORT NEW
*            ASSEMBLER INSTRUCTIONS BUT IT DOES NOT SUPPORT 64
*            BIT INSTRUCTIONS
* 1) ENLARGE THE LABEL TABLE FROM 2000 ENTRIES TO 12000 ENTRIES
*    @01                                             (AC 13 MAR 92)
* 2) ENLARGE THE I/O BUFFER FROM 20000 TO 32768
*    @02                                             (AC 23 JUN 92)
* 3) ENHANCEMENT
*    A) USE NEW ASSEMBLER INSTRUCTION SUCH AS BAKR, PR, AHI AND ETC
*    B) MERGE HDISASM, HDISASM1 AND HDISASM2 INTO ONE LOAD MODULE.
*    C) SUPPORT CODE ONLY STATEMENT
*       THIS STATEMENT ALLOWS THE BYPASSING OF THE FOLLOWING TESTS
*       WHICH MIGHT IDENTIFY VALID INSTRUCTIONS AS DATA
*       . 4 CONSECUTIVE IDENTICAL BYTES
*       . 6 CONSECUTIVE VALID EBCDIC CHARACTERS
*       . NEXT INSTRUCTION VALID OPCODE
*    D) BUILD LABLE CESD ER TYPE
*    @03                                             (AC 16 MAY 12)
* 4) A) SUPPORT CTLBK STATMENT
*       THIS STATEMENT ASSIGN BUILT-IN DSECT TO A DATA REGISTER
*    B) WRITE LOAD MAP TO OUTPUT FILE LOADMAP AND YOU CAN SPECIFY
*       //LOADMAP DD SYSOUT=*    or
*       //LOADMAP DD DUMMY
*    C) LOAD MAP PRINT FILE SUPPORTS MIXED CASE CHARACTERS
*    D) SUPPORTS PDSE
*    E) SUPPORT OPCODE LENGTH FROM 5 TO 6
*       (NOTE : OPCODE LENGTH GREATER 7 IS NOT YET SUPPORT
*                                                    (AC 22 APR 15)
* 5) A) LOAD SFT AND GLOBAL MAPPING TABLE
*    B) THE LENGTH OF USER DEFINED LABEL IS EXTENDED FROM 8 TO 12
*    C) THE LENGTH OF DSECT FIELD IS EXTENDED FROM 8 TO 12
*                                                    (AC 26 OCT 15)
* 6) A) SUPPORT DOUBLE WORD ADDRESS
*    B) ADD LABEL TO UNRESOLVED BINDER ADCON
*    C) USE R3 AS DATA REGISTER
*    D) CHANGE GETMAIN MACRO TO STORAGE
*    E) SUPOPRT DISPLACEMENT UP TO 20479
*                                                    (AC 22 JUL 16)
* 7) A) ALTERNATE DSECT
*                                                    (AC 22 DEC 16)
****************************************************************
*                                                              *
* PROCESS THE PARM FIELD, IF ANY.                              *
*                                                              *
****************************************************************
*
HDISASM  CSECT
HDISASM  RMODE ANY
HDISASM  AMODE 31
         J     BEGIN                                               @03A
         DC    C'HDISASM '             MODULE NAME                 @03A
         DC    C'01.10'                VERSION NUMBER              @06C
         DC    C'&SYSDATE &SYSTIME'                                @03A
BEGIN    BAKR  R14,0                   SAVE RSA IN LINKAGE STACK   @03A
         LARL  R3,DATASTR                                          @06A
         USING DATASTR,R3                                          @06A
         L     R12,0(R1)               GET PARM FIELD ADDRESS
         SR    R1,R1                   CLEAR WORK REG
         ICM   R1,3,0(R12)             PICK UP PARM LENGTH
         JZ    OPEN1                   NO PARM INFO ENTERED
         CHI   R1,5                    5-BYTES OF PARM             @03C
         JE    SGLPARM                 YES, SINGLE PARM FIELD
         CHI   R1,11                   11-BYTES OF PARM            @03C
         JE    DBLPARM                 YES, BOTH PARMS
BADPARM  WTO   'INVALID PARM, SPECIFY ONLY SUPVR AND/OR FLTPT',        X
               ROUTCDE=11
         ABEND 777,DUMP
SGLPARM  CLC   2(5,R12),C_SUPVR        IS PARM=SUPVR
         JE    SUPARM                  YES
         CLC   2(5,R12),C_FLTPT        PARM IS FLTPT
         JNE   BADPARM                 NO, ERROR
         MVI   FLPTASM,1               SET FLOATING POINT O.K.
         J     OPEN1                   CONTINUE
DBLPARM  CLC   2(5,R12),C_SUPVR        IS 1ST PARM SUPVR
         JE    CK2FPT                  YES
         CLC   2(5,R12),C_FLTPT        IS 1ST PARM FLTPT
         JNE   BADPARM                 NO, ERROR
         CLC   8(5,R12),C_SUPVR        IS 2ND PARM SUPVR         FIX***
         JNE   BADPARM                 NO, ERROR
         J     FPT2PARM                BOTH O.K.
CK2FPT   CLC   8(5,R12),C_FLTPT        IS 2ND PARM FLTPT         FIX***
         JNE   BADPARM                 YES
FPT2PARM MVI   FLPTASM,1               SET FLOATING POINT O.K.
SUPARM   MVI   PRIVASM,1               SET PRIVILEGED INSTR O.K.
*
****************************************************************
*                                                              *
* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY   *
* TABLES, AND OPEN FILES.                                      *
*                                                              *
****************************************************************
*
OPEN1    OPEN  (SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT,LOADMAP,OUTPUT,REGUSE,OX
               UTPUT),MODE=31
         OPEN  (SYSLIB,,SYSIN),MODE=31     OPEN FILES
         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.
         JZ    NOCTL                   NO
         SAM31
         JAS   R9,GETCTL               EXTRACT DESIRED MEMBER AND CSECT
         JAS   R9,BLDL                 ISSUE BLDL AND PRINT
         MVI   CCAT,0                  INSURE TTR0
         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE
         STORAGE OBTAIN,LENGTH=32768,ADDR=(R1),SP=0 GET BUFFER STORAGE
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         STORAGE OBTAIN,LENGTH=304000,ADDR=(R1),SP=0               @04C
*                                      GET SYMBOL TABLE STORAGE    @04C
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         ST    R1,CURRSYM              SAVE CURRENT SYMBOL ADDR
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,ENDSYM               COMPUTE END ADDR
         ST    R1,ENDSYM               STORE TBL END ADDR
         STORAGE OBTAIN,LENGTH=96000,ADDR=(R1),SP=0 GET BUFFER STORAGE
*                                      GET RLD TABLE STORAGE (20*4800)
         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS
         ST    R1,CURRLD               SAVE CURRENT RLD ADDR
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,ENDRLD               COMPUTE END ADDR +96000
         ST    R1,ENDRLD               STORE TBL END ADDR
         STORAGE OBTAIN,LENGTH=1801,ADDR=(R1),SP=0 GET BUFFER STORAGE
*                            (257*7+2) GET DATA ONLY TABLE STORAGE
         ST    R1,DATSTRT              SAVE TBL ADDRESS
         MVC   0(3,R1),HIVAL           SET END VALUE
         ST    R1,DATOCUR              SET CURRENT ADDRESS
         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03C
         ST    R1,DATOEND              SAVE END ADDR
         MVC   PRT+15(29),MSG01        *** EXTERNAL SYMBOL TABLE ***
         MVI   PCC,C'-'                SET SKIP 3 LINES
         JAS   R9,PRINT                PRINT
*        MVC   PRTLINE,SYMHDR1         SYM TBL HEADER
*        JAS   R9,PRINT                PRINT
         STORAGE OBTAIN,LENGTH=1544,ADDR=(R1),SP=0 GET BUFFER STORAGE
*                            (257*6+2) GET CODE ONLY TBL STORAGE   @03A
         ST    R1,CODSTRT              SAVE TBL ADDRESS            @03A
         MVC   0(3,R1),HIVAL           SET END VALUE               @03A
         ST    R1,CODOCUR              SET CURRENT ADDRESS         @03A
         AHI   R1,1536                 COMPUTE TABLE END ADDR      @03A
         ST    R1,CODOEND              SAVE END ADDR               @03A
         STORAGE OBTAIN,LENGTH=22200,ADDR=(R1),SP=0  600 CTLBK ENTRIES
*                            (60*37)   SIZE OF CTLBK TABLE         @03A
         ST    R1,CTLSTRT              SAVE TBL ADDRESS            @04A
         MVC   0(3,R1),HIVAL           SET END VALUE               @04A
         ST    R1,CTLOCUR              SET CURRENT ADDRESS         @04A
         AHI   R1,22200                COMPUTE TABLE END ADDR      @04A
         ST    R1,CTLOEND              SAVE END ADDR               @04A
         LHI   R7,12000                12000 LABEL ENTRIES
         MHI   R7,LABELL               COMPUTE LABEL TABLE SIZE
         L     R1,CSTLENG              GET CSECT LENGTH
         SRL   R1,2                    DIVIDE BY 4
         MHI   R1,LABELL               TIMES LABEL ENTRY LENGTH
         AR    R7,R1                   TOTAL LABEL TABLE LENGTH
         STORAGE OBTAIN,LENGTH=(7),ADDR=(R1),SP=0                  @06C
*                                      GET LABEL TBL STORAGE
         ST    R1,LBLTBL               SAVE LABEL TBL ADDR
         ST    R1,CURRLBL              SAVE CURRENT LABEL ADDR
         AR    R1,R7                   COMPUTE LABEL TBL END ADDR
         ST    R1,ENDLBL               SAVE END OF LBL TBL ADDR
*
****************************************************************
*                                                              *
* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *
* AND TEXT ARE PROCESSED.                                      *
*                                                              *
****************************************************************
*
MAINLINE EQU   *                       MAINLINE ROUTINE
         L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
         CLC   IEWPLMH,0(R6)           BINDER ?                    @03A
         JE    BINDER                  YES                         @03A
         MVC   PRTLINE,SYMHDR1         SYM TBL HEADER
         JAS   R9,PRINT                PRINT
         CLI   0(R6),X'20'             CESD RECORD
         JNE   TESTOTHR                NO
         JAS   R9,CESDREC              PROCESS CESD RECORDS
         J     MAINLINE                GO READ AGAIN
TESTOTHR LARL  R9,CNTLRECS             ASSUME CONTROL RECORD
         CLI   0(R6),1                 IT IS CONTROL
         JE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         JE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         JE    PERFORM                 YES
         LARL  R9,RLDRECS              ASSUME RLD RECORD
         CLI   0(R6),2                 IS IT RLD
         JE    PERFORM                 YES
         CLI   0(R6),6                 IS IT RLD
         JE    PERFORM                 YES
         CLI   0(R6),14                IS IT RLD
         JE    PERFORM                 YES
         LARL  R9,CTRLRECS             ASSUME CONTROL AND RLD
         CLI   0(R6),3                 IS IT CTL AND RLD
         JE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         JE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         JE    PERFORM                 YES
         J     MAINLINE                NONE OF THESE, SKIP
PERFORM  TM    PROCESS,X'80'           WAS CSECT FOUND
         JZ    MISSCS                  NO, ERROR
         BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         JZ    MAINLINE                NO, GO READ AGAIN
*        MVI   EOFSW+1,0               SET END OF FILE SWITCH
         J     ENDINIT                 GO COMPLETE PROCESSING
BINDER   DS    0H                                                  @03A
         MVC   PRTLINE,SYMHDR2         SYM TBL HEADER              @03A
         JAS   R9,PRINT                PRINT                       @03A
         MVC   PRMEMBER,MEMBER         MOVE REQUESTED MEMBER NAME  @03A
         MVC   PRMCSECT(L'CSECT),CSECT MOVE REQUESTED CSECT NAME   @03A
         JAS   R14,GET_ESD             PROCESS ESD'S FOR THE CSECT @03A
         JAS   R14,GET_RLD             PROCESS RLD'S FOR THE CSECT @03A
         JAS   R14,GET_TEXT            GET TEXT FOR THE CSECT      @03A
         JAS   R14,UPD_UNRESOLV        UPDATE UNRESOLVED           @06A
         MVC   CURRLBL,TMPCLBL                                     @06A
         J     ENDINIT
*********************************************************************
* PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH ALL THE ESD  *
* ENTRIES RETURNED BY THE READLMOD SUBROUTINE. THE FIRST THREE ARE  *
* NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN LD). THESE    *
* WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONLY THE LD TYPES *
* ARE USED.                                                         *
* 1ST SD  - THE AMODE AND RMODE VALUES                              *
* 2ND ED  - THE CSECT LENGTH                                        *
* 3RD LD  - LABEL INFORMATION FOR THE CSECT ITSELF.                 *
* ANY REMAINING LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY   *
*           STATMENTS                                               *
*********************************************************************
GET_ESD  BAKR  R14,0                   SAVE CALLER'S REGISTERS     @03A
         XC    PRMCURSR,PRMCURSR       CLEAR CURSOR FOR FIRST CALL @03A
GE_GETIT MVC   PRMREQST,C_ESD          SHOW REQUEST IS FOR ESD DATA@03A
         JAS   R9,READLMOD             GO READ THE ESD DATA        @03A
         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?          @03A
         JE    GE_EXIT                 NO                          @03A
         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND   @03A
         L     R11,PRMBUFAD            POINT TO BUFFER HEADER      @03A
         USING ESDHEADR,R11                                        @03A
         LA    R12,ESDHEND             POINT TO FIRST ELEMENT      @03A
         USING ESDENTRY,R12                                        @03A
         L     R7,CURRSYM                                          @03A
GE_NEXT  MVC   ESDSYMB,BLANX           CLEAR SYMBOL NAME           @03A
         LH    R1,ESDNAMEC             GET LENGTH OF SYMBOL        @03A
         LTR   R1,R1                   ANY LENGTH?                 @03A
         JZ    GEMVOWBK                NO                          @03A
         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A
         CHI   R1,8                    EXCESSIVE LENGTH?           @03A
         JL    GE_MVNM2                NO                          @03A
         LA    R1,7                    YES, SET MAX LENGTH         @03A
GE_MVNM2 L     R2,ESDNAMEP             POINT TO THE SYMBOL         @03A
         EX    R1,GEMVSYMX             MVC   ESDSYMB(1),0(R2)      @03A
GEMVOWBK MVC   ESDOWNER,BLANX          PRE-CLEAR OWNER NAME        @03A
         LH    R1,ESDRESCL             GET OWNER NAME LENGTH       @03A
         LTR   R1,R1                   ANY LENGTH?                 @03A
         JZ    GE_CTYPE                NO                          @03A
         BCTR  R1,0                    COMPUTE LENGTH CODE         @03A
         CHI   R1,8                    EXCESSIVE LENGTH?           @03A
         JL    GE_MVOW2                NO                          @03A
         LA    R1,7                    YES, SET MAX LENGTH         @03A
GE_MVOW2 L     R2,ESDRESCP             POINT TO OWNING NAME        @03A
         EX    R1,GEMVOWNX             MOVE IN OWNING NAME         @03A
GE_CTYPE CLC   ESDTYPE,C_SD            IS THIS AN SD (CSECT)?      @03A
         JNE   GE_CTYP2                NO                          @03A
         CLC   CSECT,ESDSYMB           SYMBOL SAME AS REQUESTED CSECT?
         JNE   GE_CTYP2                NO                          @03A
         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?
         JNE   GE_CTYP2                NO                          @03A
         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A
         JO    GE_CTYP2                YES                         @03A
         MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE              @03A
         MVC   CURRRMOD,ESDRMODE          AND RMODE                @03A
         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A
GE_CTYP2 CLC   ESDTYPE,C_ED            THIS AN ED?                 @03A
         JNE   GE_CTYP3                NO                          @03A
         CLC   ESDSYMB,C_B_TEXT        SYMBOL NAME IS B_TEXT?      @03A
         JNE   GE_CTYP3                NO                          @03A
         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?
         JNE   GE_CTYP3                NO                          @03A
         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A
         JO    GE_CTYP2                YES                         @03A
         MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH        @03A
         MVC   TEXTLENG,ESDLENG           TWICE                    @03A
         MVC   CSTLENG,ESDLENG                                     @03A
         MVC   SYMLENG-SYMTBL(3,R7),ESDLENG+1                      @03A
         LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY           @03A
         J     GE_STEP                 CONTINUE WITH NEXT ESD ENTRY@03A
GE_CTYP3 CLC   ESDTYPE,C_RLD+1         LD ?                        @03A
         JNE   GE_STEP                 NO                          @03A
         CLC   CSECT,ESDOWNER          OWNER SAME AS REQUESTED CSECT?
         JNE   GE_STEP                 NO                          @03A
         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?@03A
         JZ    GE_STEP                 NO                          @03A
         L     R5,CURRLBL              POINT TO CURRENT LABEL ENTRY@03A
         USING LABELD,R5                                           @03A
         MVC   LBLADR,ESDELOFF+1       OFFSET TO LABEL             @03A
         L     R0,ESDCLOFF                                         @06A
         S     R0,ESDELOFF                                         @06A
         ST    R0,CLASSOFF             OFFSET TO MODULE            @06A
         MVI   LBLTYP,C'L'             TYPE = LABEL                @03A
         MVI   LBLLEN,4                                            @03A
         MVC   LBLNAME,BLANX           MOVE SYMBOL NAME TO ENTRY   @06A
         MVC   LBLNAME(8),ESDSYMB      MOVE SYMBOL NAME TO ENTRY   @06A
         MVI   PRT,C' '                                            @03A
         MVC   PRT+1(L'PRT-1),PRT                                  @03A
         MVC   PRT+5(8),LBLNAME        COPY LABEL NAME             @03A
*        MVC   PRT+17(2),C_RLD+1       COPY 'LD'                   @03A
         MVC   PRT+17(2),C_LR          COPY 'LR'                   @03A
         LR    R0,R12                                              @03A
         LA    R12,ESDELOFF            POINTER OFFSET TO LABEL     @03A
         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @03A
         LR    R12,R0                                              @03A
         MVC   PRT+32(6),PRTABL+2                                  @03A
         JAS   R9,PRINT                                            @03A
         LA    R5,LABELL(R5)                                       @03A
         ST    R5,CURRLBL                                          @03A
         LA    R0,ESDSYMB                                          @03A
         L     R15,PRMBUFAD                                        @03A
GE_STEP  A     R12,ESDHENTL            POINT TO NEXT ELEMENT       @03A
         JCT   R10,GE_NEXT             LOOP THRU ESD ENTRIES       @03A
         CLC   PRMRETCD,XZROS          ANY MORE ESD ENTRIES?       @03A
         JE    GE_GETIT                YES, GO READ NEXT ESD BUFFER@03A
GE_EXIT  DS    0H                      GET RETURN ADDRESS          @03A
         PR                            RETURN TO CALLER            @03A
         DROP  R11
         DROP  R12
*********************************************************************
*        PROCESS THE RLD RECORDS FOR THIS CSECT                     *
*********************************************************************
GET_RLD  BAKR  R14,0                   SAVE CALLER'S REGISTERS
         MVC   PRMREQST,C_RLD          SHOW REQUEST IS FOR RLD DATA
GR_GET2  JAS   R9,READLMOD             GO READ THE RLD DATA
         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND
         LTR   R10,R10                 ANY RLD ELEMENTS READ?
         JZ    GR_EXIT                 NO
         L     R11,PRMBUFAD            POINT TO BUFFER HEADER
         USING RLDHEADR,R11
         LA    R12,RLDHEND             POINT TO FIRST ELEMENT
         USING RLDENTRY,R12
GR_NEXT  DS    0H                      SAVE WORK REGISTERS
         MVC   RESIDENT,BLANX          PRE-CLEAR TO BLANKS
         LH    R1,RLD_RESIDENT_CHARS   GET LENGTH OF RES CSECT NAME
         LTR   R1,R1                   ANY LENGTH?
         JZ    GR_MVAC                 NO
         BCTR  R1,0                    COMPUTE LENGTH CODE
         CHI   R1,8                    EXCESSIVE LENGTH?
         JL    GR_MVRES                NO
         LA    R1,7                    YES, SET MAX LENGTH
GR_MVRES L     R2,RLD_RESIDENT_PTR     POINT TO THE SYMBOL
         EX    R1,GRDMVREX             MOVE SYMBOL NAME
*                                      MVC  RESIDENT(1),0(R2)
GR_MVAC  MVC   SYMBPTS2,BLANX          PRE-CLEAR TO BLANKS
         LH    R1,RLD_TARGET_CHARS     GET LENGTH OF SYMBOL POINTED TO
         LTR   R1,R1                   ANY LENGTH?
         JZ    GR_CKIT                 NO
         BCTR  R1,0                    COMPUTE LENGTH CODE
         CHI   R1,8                    EXCESSIVE LENGTH?
         JL    GR_MVTGT                NO
         LA    R1,7                    YES, SET MAX LENGTH
GR_MVTGT L     R2,RLD_TARGET_PTR       POINT TO THE SYMBOL
         EX    R1,GRDTGTNX             MOVE SYMBOL NAME
*                                      MVC  SYMBPTS2(1),0(R2)
GR_CKIT  CLC   RESIDENT,CSECT          ENTRY RESIDES IN CURRENT CSECT?
         JNE   GR_STEP                 NO
         L     R5,CURRLBL              POINT TO LABEL TABLE
         USING LABELD,R5
*    ADCON and VCON
         MVC   LBLADR,RLD_ELEM_OFFSET+1 OFFSET TO LABEL
         MVI   LBLTYP,C'A'             ASSUME ADCON
         CLI   RLD_STAT,X'02'          IS IT RESOLVED SYMBOL ?
         JE    GR_CLRU                 YES
         MVI   LBLTYP,C'V'             NO, ASSUME VCON
         CLI   RLD_STAT,X'01'          IS IT UNRESOLVED SYMBOL ?
         JNE   GR_STEP                 NO, DROP IT
GR_CLRU  DS    0H
         MVC   LBLLEN(1),RLD_ADCON_LENG+1
         ST    R12,RLD_PTR
         MVC   LBLNAME,BLANX           CLEAR SYMBOL NAME FIELD
         MVC   LBLNAME(8),SYMBPTS2     MOVE SYMBOL NAME TO ENTRY
         MVI   PRT,C' '
         MVC   PRT+1(L'PRT-1),PRT
         MVC   PRT+5(8),LBLNAME
         MVC   PRT+17(2),C_ER
         CLC   SYMBPTS2,CSECT          SYMBOL = CURRENT CSECT ?
         JNE   GR_PRINT                YES
         MVC   PRT+5(8),CUNRESV
         MVC   LBLNAME(8),CUNRESV
GR_PRINT LA    R12,RLD_ELEM_OFFSET     POINTER OFFSET TO LABEL
         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL
         MVC   PRT+32(6),PRTABL+2      COPY FORMATTED OFFSET
         L     R12,RLD_PTR
         LA    R12,RLD_TYPE
         JAS   R9,HEXPRT2              CONVERT OFFSET TO LABEL
         MVC   PRT+22(2),PRTABL
         MVC   PRT+27(2),PRTABL+2      STATUS
         LA    R12,LBLLEN
         JAS   R9,HEXPRT1              CONVERT OFFSET TO LABEL
         MVC   PRT+42(2),PRTABL
         JAS   R9,PRINT
GR_LBADD LA    R5,LABELL(R5)
         ST    R5,CURRLBL
GR_STEP  DS    0H                      GET WORK REGISTERS
         L     R12,RLD_PTR
         A     R12,RLDHENTL            POINT TO NEXT ELEMENT
         JCT   R10,GR_NEXT             LOOP THRU ESD ENTRIES
         CLC   PRMRETCD,XZROS          ANY MORE RLD ENTRIES?
         JE    GR_GET2                 YES
GR_EXIT  DS    0H
         PR                            RETURN TO CALLER
*********************************************************************
*        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *
*        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *
*        CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *
*********************************************************************
GET_TEXT BAKR  R14,0                   SAVE RETURN ADDRESS
         MVC   PRMCURSR,XZROS          SET CURSOR=0 TO START
         L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD
         LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?
         JZ    GT_NTXAD                NO, ERROR
         AHI   R0,32                   INSURE SUFFICIENT STORAGE
         J     GT_STRG                 YES
GT_NTXAD MVC   PRTLINE(39),NOSTOR      NO STORAGE SIZE WAS FOUND
         PUT   SYSPRINT,PRTLINE        PRINT THE ERROR MESSAGE
         WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCDE=11
         ABEND 555,DUMP                TERMINATE WITH USER ABEND 555
*T_STRG  GETMAIN R,LV=(0)              GET TEXT STORAGE
GT_STRG  BRAS  1,*+4
         SVC   10
         ST    R1,TXTSTRT              SAVE THE GOTTEN ADDRESS
         ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS
         A     R1,TEXTENDA             SAVE THE ADDRESS OF THE
         ST    R1,TXTEND                   END OF THE TEXT AREA
         MVC   PRMREQST,C_TEXT         SHOW REQUEST IS FOR TEXT DATA
GT_NEXT  JAS   R9,READLMOD             GO READ THE TEXT DATA
         CLC   PRMCOUNT,XZROS          ANY DATA RETURNED?
         JE    GT_ADJ                  NO
         L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER
         L     R10,PRMBUFAD            POINT TO BUFFER HEADER
         ST    R11,SAVELNG        **** SAVE PRMCOUNT
*        ST    R10,SAVEADR        **** SAVE PRMBUFAD
         USING TXTHEADR,R10
         LA    R10,TXTHEND             POINT TO FIRST TEXT BYTE
         DROP  R10
         L     R0,PRMCURSR             GET STARTING
         S     R0,PRMCOUNT                 TEXT
         STH   R0,ADJUST                     ADDRESS
         A     R0,TXTSTRT
         ST    R0,SAVETXT         **** DEBUG ****
GT_FADJ  DS    0H
         LH    R15,ADJUST
GT_TMP   DS    0H
         ST    R0,SAVEADR         **** SAVE ADDR OF LAST BUFFER
         LR    R1,R11                  COPY TEXT LENGTH
         MVCL  R0,R10                  MOVE TEXT
         CLC   PRMRETCD,XZROS          ANY MORE TEXT?
         JE    GT_NEXT                 YES
GT_ADJ   DS    0H
         LH    R15,ADJUST
         LTR   R15,R15
         JNP   GT_EXIT
         CHI   R15,512
         JH    GT_EXIT
         L     R0,TXTSTRT
         AR    R0,R15
         ST    R0,TXTSTRT
GT_EXIT  DS    0H
*        L     R12,SAVETXT             RESTORE LAST BUFFER ADDR
*        L     R11,SAVELNG       ***   RESTORE PRMCOUNT
*        L     R10,SAVEADR             RESTORE PRMBUFAD
*        LH    R8,ADJUST               RESTORE ADJUST
*        DC    X'0000'
         PR                            RETURN TO CALLER
*********************************************************************
*  1     SCAN LABEL TABLE AND PICK UP THE UNRESOLVED LABEL.         *
*  2     ACTUAL OFFSET = LBLADR + TXTSTRT - CLASS OFFSET            *
*********************************************************************
UPD_UNRESOLV   DS  0H                                              @06A
         USING LABELD,R5                                           @06A
         BAKR  R14,0                                               @06A
         L     R5,LBLTBL                                           @06A
         MVC   TMPCLBL,CURRLBL                                     @06A
UPD_LOOP CLC   LBLNAME(8),CUNRESV     UNRESOLV LABLE ?             @06A
         JNE   UPD_NEXT               BRANCH IF NO                 @06A
         SR    R14,R14                CLEAR R14 FOR ICM INSTR      @06A
         ICM   R14,7,LBLADR           LOAD LABEL RELATIVE OFFSET   @06A
         A     R14,TXTSTRT            ADD ADDRESS OF TEXT START    @06A
         CLI   LBLLEN,4               4 BYTES ADDRESS LABEL ?      @06A
         JE    UPD_ACON4              BRANCH IF YES                @06A
         CLI   LBLLEN,8               8 BYTES ADDRESS LABEL ?      @06A
         JNE   UPD_NEXT               BRANCH IF YES                @06A
         AHI   R14,4                                               @06A
UPD_ACON4  DS  0H                                                  @06A
         L     R14,0(R14)                                          @06A
         S     R14,CLASSOFF            GET ACTUAL OFFSET           @06A
         ST    R14,DBLWD                                           @06A
         LA    R12,DBLWD+1                                         @06A
         JAS   R9,HEXPRT3              FORMAT ACTUAL OFFSET        @06A
         MVI   LBLNAME,C'A'                                        @06A
         MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A
         MVI   LBLNAME+7,C' '                                      @06A
UPD_NEXT LA    R5,LABELL(R5)           NEXT LABEL ENTRY            @06A
*        LR    R0,R5                                               @06A
*        L     R5,TMPCLBL                                          @06A
*        A     R14,TXTSTRT                                         @06A
*        LA    R5,LABELL(R5)                                       @06A
*        MVI   LBLTYP,C'L'                                         @06A
*        MVI   LBLNAME,C'A'                                        @06A
*        MVC   LBLNAME+1(6),PRTABL     UPDATE LBLNAME              @06A
*        MVI   LBLNAME+7,C' '                                      @06A
*        ST    R5,TMPCLBL                                          @06A
*        LR    R5,R0                                               @06A
         C     R5,CURRLBL                                          @06A
         JL    UPD_LOOP                                            @06A
UPD_EXIT PR                            RETURN TO CALLER            @06A
*********************************************************************
*        CALL MODULE READLMOD TO OBTAIN DATA FROM THE LOAD MODULE   *
*********************************************************************
READLMOD DS    0H
RLCALL   CALL  READLMOD,PARMAREA       CALL SUBPROGRAM READLMOD
         CLI   PRMERROR,C' '           WAS THERE AN ERROR?
         JE    RLXIT                   NO
         WTO   'HDISASM FOUND ERROR RETURNED BY READLMOD CALL',        X
               ROUTCDE=11
         ABEND 111,DUMP                TERMINATE WITH ABEND CODE 111
RLXIT    BR    R9                      EXIT
*
****************************************************************
*                                                              *
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *
* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*
* UOUS LOCATIONS SO THAT THE TEXT FOR THE DESIRED CSECT WILL   *
* ALL BE IN STORAGE FOR THE REMAINDER OF DISASSEMBLY.          *
*                                                              *
****************************************************************
*
CNTLRECS EQU   *                       CONTROL RECORD PROCESSING
         ST    R9,CT9                  SAVE RETURN ADDR
         SR    R8,R8                   CLEAR WORK
         ICM   R8,7,9(R6)              LKED ASGND @ OF TXT
         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M
         JZ    CNCKTYP                 NO
         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE
CNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD
         JO    CNPASRLD                YES
         LA    R12,16(R6)              @ CESD ENTRY NBR
         J     CNCKESD                 CONTINUE
CNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH
         LA    R12,16(R6,R12)          @ CESD ENTRY NBR
CNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION
         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES
         SR    R10,R10                 OFFSET TO 1ST BYTE
         SR    R9,R9                   LENGTH OF TEXT
CNCKESD1 CLC   ESDID,0(R12)            THIS THE DESIRED ESD   FIX***
         JE    CNFNDIT                 YES
         AH    R10,2(R12)              MAINTAIN OFFSET TO 1ST TEXT BYTE
         LA    R12,4(R12)              TO NEXT CNTL ENTRY
         JCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES  FIX***
         J     READTEXT                GO READ FOLLOWING TEXT
CNFNDIT  LH    R9,2(R12)               GET TEXT LENGTH
READTEXT READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
         LTR   R9,R9                   DOES IT CONTAIN DESIRED TEXT
         JZ    CTXIT                   NO, SKIP IT
         S     R8,START                (-) OFFSET IN MODULE    FIX***
         AR    R8,R10                  ADD OFFSET OF PORTION IN RCD  **
*           R8 SHOULD NOW CONTAIN THE OFFSET WITHIN THE CSECT
*           THAT THIS BLOCK CONTAINS (TRICKY).
*
         A     R10,BUFAD               @ 1ST TEXT BYTE
         A     R8,TXTSTRT              @ PLACE TO MOVE TEXT
         LR    R11,R9                  COPY LENGTH TO MOVE
         MVCL  R8,R10         MOVE TEXT TO DYNAMIC STORAGE R10 TO R8
CTXIT    L     R9,CT9                  GET RETURN ADDR
         BR    R9                      EXIT
*
****************************************************************
*                                                              *
* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT WHICH WILL *
* LATER BE USED TO BUILD PROGRAM LABELS AND ADCONS.            *
*                                                              *
****************************************************************
*
RLDRECS  EQU   *                       RLD RECORD PROCESSING
         TM    0(R6),X'08'             LAST RECORD OF MODULE
         JZ    RLSV9                   NO
         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE
RLSV9    ST    R9,RL9                  SAVE RETURN ADDR
RLDSW    JNOP  RLDST                   FIRST TIME SWITCH
         LARL  R15,RLDSW
         MVI   1(R15),C'0'
*        MVI   RLDSW+1,C'0'            RESET 1ST TIME SW
         MVC   PRT+15(20),MSG02        ***** RLD INFO *****
         MVI   PCC,C'-'                SKIP 3 LINES
         JAS   R9,PRINT                PRINT
         MVC   PRTLINE,RLDHDR          RLD HEADER
         JAS   R9,PRINT                PRINT RLD HEADER
RLDST    LH    R8,6(R6)                NBR BYTES OF RLD DATA
         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA
         AR    R8,R6                   END OF RLD DATA ADDR
         L     R7,CURRLD               @ NEXT RLD TBL ENTRY
         USING RLDTBLD,R7
         LH    R10,0(R6)               RELOCATION POINTER
         LH    R11,2(R6)               POSITION POINTER
         LA    R6,4(R6)                PASS POINTERS
RLDNEXT  CLC   1(3,R6),START+1         RLD ADDR BELOW CSECT
         JL    RLDSTEP                 LOW, IGNORE
         CLC   1(3,R6),END+1           RLD ADDR ABOVE CSECT
         JH    RLDSTEP                 HIGH, IGNORE
         C     R7,ENDRLD               END OF RLD TBL
         JE    RLDFULL                 YES, ERROR
         STH   R10,RLDRP               SAVE RELOC PTR
         STH   R11,RLDPP               POS PTR
         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE
         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER
         CLI   RLDTYPE,9               UNRESOLVED
         JNE   RLDMOVLN                NO
         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE
RLDMOVLN MVC   RLDLEN,0(R6)            FLAG BYTE
         NI    RLDLEN,X'0F'            CLEAR HI-ORDER
         SR    R12,R12                 CLEAR WORK
         IC    R12,RLDLEN              PICK UP BYTE
         SRL   R12,2                   SHIFT OUT DIR, IND BITS
         LA    R12,1(R12)              ADD 1 = LENGTH
         STC   R12,RLDLEN              LENGTH CODE
         MVI   RLDDIR,C'+'             ASSUME POS RELOC
         TM    0(R6),2                 IS IT POSITIVE
         JZ    RLADMV                  YES
         MVI   RLDDIR,C'-'             NO, SHOW NEGATIVE
RLADMV   SR    R1,R1                   CLEAR WORK REG
         ICM   R1,7,1(R6)              PICK UP ADDRESS
         S     R1,START        **      RELATIVIZE WITHIN CSECT
         STCM  R1,7,RLDADDR            SAVE RELATIVE ADDRESS
         LA    R12,RLDRP               @ RELOC PTR
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+6(4),PRTABL         RELOC PTR
         LA    R12,RLDPP               @ POS PTR
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+14(4),PRTABL        POS PTR
         MVC   PRT+24(4),C_ACON        ASSUME A TYPE ADCON
         CLI   RLDTYPE,4               IS IT VDCON 8 BYTES        @06A
         JE    RLDLN8                  YES                        @06A
         CLI   RLDTYPE,0               IS IT ADCON 4 BYTES
         JE    RLDLN                   YES
         J     RLDVCON                                            @06A
RLDLN8   MVI   RLDLEN,8                SET LENGTH TO 8            @06A
         MVI   RLDTYPE,1               CHANGE TO VDCON            @06A
RLDVCON  MVC   PRT+24(4),C_VCON        ASSUME VCON
         CLI   RLDTYPE,1               IS IT VCON
         JE    RLDLN                   YES
         MVC   PRT+22(6),CPRDISP       ASSUME PSEUDO REG DISPL
         CLI   RLDTYPE,2               IS IT P.R. DISPL
         JE    RLDLN                   YES
         MVC   PRT+22(6),CPRCUM        ASSUME PSEUDO REG CUMUL DISPL
         CLI   RLDTYPE,3               IS IT P.R. CUM DISPL
         JE    RLDLN                   YES
         MVC   PRT+21(10),CUNRESV      ASSUME UNRESOLVED
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         JE    RLDLN                   YES
         MVC   PRT+21(10),BLANX        CLEAR FIELD
         MVC   PRT+24(3),CUNKNOWN+1    ASSUME '??:'
         LA    R12,RLDTYPE             @ TYPE
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL+1      TYPE
RLDLN    MVC   PRT+35(1),RLDLEN        LENGTH
         OI    PRT+35,C'0'             CLEAR ZONE
         MVC   PRT+42(1),RLDDIR        RELOCATION DIRECTION
         LA    R12,RLDADDR             @ ADDRESS
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+46(6),PRTABL        ADDRESS
         XC    RLDNAME(9),RLDNAME      CLEAR
         LH    R15,RLDRP               GET RELOCATION POINTER
         BCTR  R15,R0                  DEDUCT 1
         LTR   R15,R15                 TEST DIFFERENCE
         JM    RLPRT                   NEG, ERROR
         MHI   R15,L'SYMENT            TIMES SYM TBL ENTRY LENG   @03C
         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY
         C     R15,CURRSYM             PAST END OF TABLE
         JH    RLPRT                   YES, ERROR
         USING SYMTBL,R15
         MVC   RLDNAME,EXTSYM          ESD SYMBOL TO RLD TBL ENTRY
         MVC   RLDESDTP,TYPSYM         ESD TYPE TO RLD ENTRY
         DROP  R15
         MVC   PRT+60(8),RLDNAME       NAME TO PRINT
         MVC   PRT+70(2),C_LR          ASSUME LR
         CLI   RLDESDTP,3              IS IT LR
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_SD          ASSUME SD
         CLI   RLDESDTP,0              IS IT SD
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_ER          ASSUME ER
         CLI   RLDESDTP,2              IS IT ER
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_PC          ASSUME PC
         CLI   RLDESDTP,4              IS IT PC
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_PR          ASSUME PR
         CLI   RLDESDTP,6              IS IT PR
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_CM          ASSUME CM
         CLI   RLDESDTP,5              IS IT CM
         JE    RLPRT                   YES
         MVC   PRT+70(2),C_WX          ASSUME WX
         CLI   RLDESDTP,X'0A'          IS IT WX
         JE    RLPRT                   YES
         MVC   PRT+70(4),CNULL         ASSUME NULL
         CLI   RLDESDTP,7              IS IT NULL
         JE    RLPRT                   YES
         MVC   PRT+70(6),CESTAB        ASSUME E/STAB
         CLI   RLDESDTP,X'0F'          IS IT E/STAB
         JE    RLPRT                   YES
         MVC   PRT+70(6),CQUEST        UNKNOWN TYPE ??????
RLPRT    JAS   R9,PRINT                PRINT
         CLC   RLDNAME,CSECT           RLD NAME IS CSECT NAME
         JNE   GOODRLD                 NO
         CLC   RLDADDR,XZROS           RELATIVE OFFSET IS ZERO
         JE    RLDSTEP                 YES, IGNORE ENTRY
GOODRLD  DS    0H
         LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY
RLDSTEP  TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS
         JO    RLSAME                  NO
         LH    R10,4(R6)               PICK UP NEW REL PTR
         LH    R11,6(R6)               PICK UP NEW POS PTR
         LA    R6,4(R6)                STEP OVER 4 BYTES
RLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM
         CR    R6,R8                   END OF RLD DATA
         JL    RLDNEXT                 NO
         MVI   0(R7),X'FF'             SET TBL END INDICATOR
         ST    R7,CURRLD               SET NEW CURRENT ADDRESS
         L     R9,RL9                  GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
****************************************************************
*                                                              *
* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *
* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *
* THE RLDRECS AND CNTLRECS ROUTINES.                           *
*                                                              *
****************************************************************
*
CTRLRECS EQU   *                       CONTROL AND RLD RECORDS
         ST    R9,CR9                  SAVE RETURN ADDR
         JAS   R9,RLDRECS              PROCESS RLD DATA
         L     R6,BUFAD                RESET BUFFER ADDRESS
         JAS   R9,CNTLRECS             PROCESS CONTROL DATA
         L     R9,CR9                  GET RETURN ADDR
         BR    R9                      EXIT
*
****************************************************************
*                                                              *
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *
* PLACED IN THE SYMBOL TABLE, AND IS USED TO CREATE PROGRAM    *
* ENTRY STATEMENTS, AND TO IDENTIFY THE NAMES OF EXTERNAL      *
* SYMBOLS USED BY THE PROGRAM.                                 *
*                                                              *
****************************************************************
*
CESDREC  EQU   *                       CESD RECORD PROCESSING
         ST    R9,CES9                 SAVE RETURN
         L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         JNL   SYMFULL                 YES, ERROR
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYPSYM,8(R6)            TYPE
         NI    TYPSYM,X'0F'            CLEAR BITS 0-3
         MVC   SYMIND,8(R6)            INDICATOR BYTE
         NI    SYMIND,X'0F'            CLEAR BITS 4-7
         MVC   SYMARMOD,12(R6)         COPY RSECT/AMODE/RMODE BYTE
         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB
         JNO   CEMVAD                  NO
         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB
         JNZ   CEMVAD                  NO
         MVC   TYPSYM(2),X0F00         SHOW ENTAB/SEGTAB X0F00
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,3,SYMESDID          ESD ID
         MVC   PRT+5(8),EXTSYM         SYMBOL NAME
         MVC   PRT+20(2),C_SD          ASSUME SD
         CLI   TYPSYM,0                IS IT SD
         JE    CEPIND                  YES
         CLI   TYPSYM,X'96'            IS IT SD
         JE    CEPIND                  YES
         MVC   PRT+20(2),C_LR          ASSUME LR
         CLI   TYPSYM,3                IS IT LR
         JE    CEPIND                  YES
         MVC   PRT+20(2),C_ER          ASSUME ER
         CLI   TYPSYM,2                IS IT ER
         JE    CEPIND                  YES
         CLI   TYPSYM,X'0D'            IS IT ER **** ??
         JE    CEPIND                  YES      **** ??
         MVC   PRT+20(2),C_PC          ASSUME PC
         CLI   TYPSYM,4                IS IT PC
         JE    CEPIND                  YES
         MVC   PRT+20(2),C_PR          ASSUME PR
         CLI   TYPSYM,6                IS IT PR
         JE    CEPIND                  YES
         MVC   PRT+20(2),C_CM          ASSUME CM
         CLI   TYPSYM,5                IS IT CM
         JE    CEPIND                  YES
         MVC   PRT+20(2),C_WX          ASSUME WX
         CLI   TYPSYM,X'0A'            IS IT WX
         JE    CEPIND                  YES
         MVC   PRT+19(4),CNULL         ASSUME NULL
         CLI   TYPSYM,7                IS IT NULL
         JE    CEPIND                  YES
         MVC   PRT+18(6),CESTAB        ASSUME ENTAB/SEGTAB
         CLI   TYPSYM,X'0F'            IS IT ENTAB/SEGTAB
         JE    CEPIND                  YES
         LA    R0,TYPSYM
         MVC   PRT+18(4),CUNKNOWN      UNIDENTIFIABLE TYPE ??:
         LA    R12,TYPSYM              @ TYPE
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        TYPE
CEPIND   LA    R12,SYMIND              @ INDICATOR
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL        INDICATOR
         LA    R12,SYMADDR             @ SYMBOL ADDR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+30(6),PRTABL        SYMBOL ADDR
         LA    R12,SYMSEG              @ SEGMENT NBR
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+39(2),PRTABL        SEGMENT NBR
         CLI   TYPSYM,2                IS IT ER
         JE    CEESD                   YES
         CLI   TYPSYM,3                IS IT AN LR
         JNE   CENOTLR                 NO
         LA    R12,SYMLRID             @ LR ESD ID
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+43(4),PRTABL        LR ESD ID
         J     CEESD                   CONTINUE
CENOTLR  LA    R12,SYMLENG             @ LENGTH
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+49(6),PRTABL        SYMBOL LENGTH
CEESD    LA    R12,SYMESDID            @ ESD ID
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+57(4),PRTABL        ESD ID
*
         MVC   PRT+65(3),CYES          RSECT
         TM    SYMARMOD,X'08'          YES
         JO    CEAMODE
         MVC   PRT+65(3),CNO           RSECT NO
CEAMODE  MVC   PRT+72(3),CANY          AMODE ANY
         TM    SYMARMOD,X'03'
         JO    C_ERMODE
         MVC   PRT+72(3),C31           31
         TM    SYMARMOD,X'20'
         JO    C_ERMODE
         MVC   PRT+72(3),C24           24
C_ERMODE MVC   PRT+79(3),CANY          RMODE ANY
         TM    SYMARMOD,X'04'
         JO    CECONT
         MVC   PRT+79(3),C24           RMODE 24
CECONT   TM    PROCESS,X'80'           FOUND CSECT
         JO    CESDPT                  YES
         CLI   TYPSYM,0                SD
         JE    CECKCSB                 YES
         CLI   TYPSYM,X'0D'            ER ??
         JE    CECKCSB                 YES
         CLI   TYPSYM,4                PC
         JNE   CESDPT                  NO
*
CECKCSB  CLC   CSECT,BLANX             ANY CSECT NAME ENTERED
         JNE   CECKNM                  YES
         MVC   CSECT,EXTSYM            NAME TO CSECT
         J     CSGOTCS                 CONTINUE
CECKNM   CLI   TYPSYM,4                PC
         JE    CESDPT                  YES
         CLC   CSECT,EXTSYM            FOUND DESIRED NAME
         JNE   CESDPT                  NO
         TM    PROCESS,X'80'           ALREADY FOUND CSECT
         JZ    CSGOTCS                 NO
         MVC   PRT+15(2),CQUEST        SHOW DUPL
         J     CESDPT                  CONTINUE
CSGOTCS  OI    PROCESS,X'80'           SHOW CSECT FOUND
         MVC   PRT+15(2),MSG01         FLAG ON PRINTOUT
         MVC   ESDID,SYMESDID          SAVE ESD ID FOUND
         MVC   START+1,SYMADDR         SAVE CSECT DOWRT ADDR
         MVC   CSTLENG+1(3),SYMLENG    SAVE CSECT LENGTH
         L     R1,CSTLENG              PICK UP LENGTH
         A     R1,START                COMPUTE CSECT END ADDR
         ST    R1,END                  SAVE CSECT END ADDR
         L     R11,CSTLENG             TEXT LENGTH
         LA    R11,256(R11)            ADD FOR SAFETY  ??
         STORAGE OBTAIN,LENGTH=(11),ADDR=(R1),SP=0
*                                      GET DYNAMIC STORAGE FOR TEXT
         ST    R1,TXTSTRT              SAVE TEXT ADDR DYNAMIC AREA
         AHI   R11,-256                DEDUCT SAFETY FACTOR       @03C
         AR    R1,R11                  TXT END ADDR
         ST    R1,TXTEND               SAVE TEXT END ADDR
CESDPT   JAS   R9,PRINT                PRINT
         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
         LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
         JCT   R8,CESDNXT              LOOP THRU INPUT RECORD     @03C
         MVI   0(R7),X'FF'             SET END OF TABLE INDIC
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
         L     R9,CES9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
****************************************************************
*                                                              *
* ISSUE BLDL FOR THE MAIN MODULE, AND PRINT MODULE RELATED INFO*
*                                                              *
****************************************************************
*
BLDL     EQU   *                       ISSUE BLDL AND PRINT INFO
         ST    R9,BL9                  SAVE RETURN ADDR
ISSBLDL  BLDL  SYSLIB,BLDLIST          ISSUE BLDL
         LTR   R15,R15                 ANY ERRORS
         JNZ   MISSMEM                 YES
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR2,X'10'             SSI PRESENT
         JZ    BLREFA1                 NO
         LA    R1,4(R1)                ADD FOR SSI
BLREFA1  TM    ALIASIND,X'80'          ALIAS
         JZ    BLREFA2                 NO
         LA    R1,11(R1)               ADD FOR ALIAS
BLREFA2  TM    ATTR1A,X'04'            SCATTER FORMAT
         JZ    BLREFA3                 NO
         LA    R1,8(R1)                ADD FOR SCATTER
BLREFA3  MVC   AUTHLEN(2),0(R1)        AUTH LENGTH AND CODE
         TM    ATTR2,X'10'             SSI PRESENT
         JZ    BLCKALI                 NO
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR1A,X'04'            SCATTER FORMAT
         JZ    BLSSI2                  NO
         TM    ALIASIND,X'80'          ALIAS
         JO    BLFMTED                 YES, NO REFORMAT NEEDED
         LA    R1,8(R1)                NO, STEP PAST SCATTER SECTION
         J     BLMVSSI                 GO MOVE SSI
BLSSI2   TM    ALIASIND,X'80'          ALIAS
         JZ    BLMVSSI                 NO
         LA    R1,11(R1)               YES, STEP PAST ALIAS SECTION
BLMVSSI  MVC   SSI,0(R1)               MOVE SSI DATA
BLCKALI  TM    ALIASIND,X'80'          ALIAS
         JO    BLASC                   YES
         J     BLFMTED                 FINISHED
BLASC    TM    ATTR1A,X'04'            SCATTER FORMAT
         JO    BLFMTED                 YES, NO REFORMAT NEEDED
         MVC   ALMEM,MEMBER+38         MOVE ALIAS MEMBER
         MVC   ALEPA(3),MEMBER+35      YES, MOVE ALIAS DATA
BLFMTED  MVC   PRT(26),MSG03           'DIRECTORY INFO FOR MODULE '
         MVC   PRT+27(8),MEMBER        MEMBER NAME TO PRINT
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(14),MSG04        'TTR OF MODULE='
         LA    R12,TTRMOD              @ TTR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+24(6),PRTABL        TTR TO PRINT
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(18),MSG05        'CONCATENATION NBR='
         LA    R12,CCAT                @ CONCATENATION NBR
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+28(2),PRTABL        CONCATENATION NBR
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(12),MSG06
         LA    R12,ALIASIND            @ ALIAS INDICATOR
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+22(2),PRTABL        ALIAS INDICATOR
         TM    ALIASIND,X'80'          IS IT AN ALIAS
         JZ    BLALPRT                 NO
         MVC   PRT+50(13),MSG07        '*** ALIAS ***'
BLALPRT  JAS   R9,PRINT                PRINT
         MVC   PRT+10(18),MSG08        'TTR, 1ST TXT RECD='
         LA    R12,TTR1TXT             @ TTR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+28(6),PRTABL        TTR OF 1ST TXT BLOCK
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(25),MSG09        'TTR OF NOTE/SCATTER LIST='
         LA    R12,TTRNS               @ TTR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+35(6),PRTABL        TTR OF NOTE/SCATTER
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(17),MSG10        'NBR NOTE ENTRIES='
         LA    R12,NNOTE               @ NBR NOTES
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(2),PRTABL        NBR NOTE ENTRIES
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(13),MSG11        'ATTRIBUTES 1='
         LA    R12,ATTR1A              @ ATTRIBUTES
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+23(4),PRTABL        ATTRIBUTES 1
         TM    ATTR1A,X'80'            RENT
         JZ    BLAT1A                  NO
         MVC   PRT+30(4),CRENT
BLAT1A   TM    ATTR1A,X'40'            REUS
         JZ    BLAT1B                  NO
         MVC   PRT+35(4),CREUS
BLAT1B   TM    ATTR1A,X'20'            OVLY
         JZ    BLAT1C                  NO
         MVC   PRT+40(4),COVLY
BLAT1C   TM    ATTR1A,X'10'            TEST
         JZ    BLAT1D                  NO
         MVC   PRT+45(4),CTEST
BLAT1D   TM    ATTR1B,X'08'            OL
         JZ    BLAT1E                  NO
         MVC   PRT+50(2),C_OL
BLAT1E   TM    ATTR1A,X'04'            SCTR
         JZ    BLAT1F                  NO
         MVC   PRT+53(4),MSG18         SCTR
BLAT1F   TM    ATTR1A,X'02'            EXEC
         JZ    BLAT1G                  NO
         MVC   PRT+58(4),CEXEC
BLAT1G   TM    ATTR1B,X'01'            REFR
         JZ    BLAT1PRT                NO
         MVC   PRT+63(4),CREFR
BLAT1PRT JAS   R9,PRINT                PRINT
         MVC   PRT+10(13),MSG12        'TOTAL LENGTH='
         LA    R12,TOTVIRT             @ TOTAL LENGTH
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+23(6),PRTABL        TOTAL LENGTH OF MODULE
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(23),MSG13        'LENGTH OF 1ST TXT RECD='
         LA    R12,LENG1               @ 1ST TXT LENG
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        LENGTH OF 1ST TXT BLOCK
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(11),MSG14        'E. P. ADDR='
         LA    R12,LKEPA               @ E.P. ADDR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+21(6),PRTABL        E.P. ADDR
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(13),MSG15        'ATTRIBUTES 2='
         LA    R12,ATTR2               @ ATTRIBUTES 2
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        ATTRIBUTES 2
         TM    ATTR2,X'20'             PAGE ALIGNMENT
         JZ    BLAT3A                  NO
         MVC   PRT+30(16),MSG16        'PAGE ALIGN REQRD'
BLAT3A   TM    ATTR2,X'10'             SSI PRESENT
         JZ    BLAT3PRT                NO
         MVC   PRT+50(11),MSG17        'SSI PRESENT'
BLAT3PRT JAS   R9,PRINT                PRINT
         TM    ATTR1A,X'04'            SCATTER FORMAT
         JZ    BLFAL                   NO
         MVC   PRT+10(8),MSG18         'SCTRLEN='
         LA    R12,SCTRLEN             @ SCATTER LIST LENGTH
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+18(4),PRTABL        SCATTER LIST LENGTH
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(18),MSG19        'TRANSLATE TBL LEN='
         LA    R12,TTLEN               @ TRANS TBL LEN
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        TRANSLATION TABLE LENGTH
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(18),MSG20        'ESD ID OF 1ST TXT='
         LA    R12,SCESDID             @ ESD ID
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        ESD ID OF 1ST TXT
         JAS   R9,PRINT                PRINT
         MVC   PRT+10(23),MSG21        'ESD ID CONTAINING E.P.='
         LA    R12,SCEPESD             @ ESD ID
         JAS   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        @ ESD ID OF CSECT CONTAINING E.P
         JAS   R9,PRINT                PRINT
BLFAL    TM    ALIASIND,X'80'          ALIAS
         JZ    BLFSSI                  NO
         MVC   PRT+10(28),MSG22        E.P. ADDRESS OF THIS MEMBER='
         LA    R12,ALEPA               @ E.P. ADDR
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT+38(6),PRTABL        E.P. ADDR
         JAS   R9,PRINT
         MVC   PRT+10(17),MSG23        'REAL MEMBER NAME='
         MVC   PRT+27(8),ALMEM         REAL MEMBER NAME
         JAS   R9,PRINT
BLFSSI   TM    ATTR2,X'10'             ANY SSI INFO
         JZ    BLAUTHC                 NO
         MVC   PRT+10(9),MSG24         'SSI INFO='
         LA    R12,SSI                 @ SSI INFO
         JAS   R9,HEXPRT4              CONVERT
         MVC   PRT+19(8),PRTABL        SSI INFO
         JAS   R9,PRINT                PRINT
BLAUTHC  MVC   PRT+10(10),MSG25        'AUTH CODE='
         LA    R12,AUTHCOD             @ AUTH CODE
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+20(2),PRTABL        AUTH CODE
         JAS   R9,PRINT                PRINT
         TM    ALIASIND,X'80'          ALIAS
         JZ    BLXIT                   NO
         MVC   PRT+5(38),MSG26         REAL MEMBER DIRECTORY INFO
         MVI   PCC,C'0'                DOUBLE SPACE
         JAS   R9,PRINT                PRINT
         MVC   MEMBER,ALMEM            REAL MEMBER NAME TO LIST
         J     ISSBLDL                 DO OVER FOR REAL MEMBER
BLXIT    L     R9,BL9                  GET RETURN ADDR
         BR    R9                      EXIT
*
****************************************************************
*                                                              *
* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *
* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *
* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *
* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *
*                                                              *
****************************************************************
*
HEXPRT   EQU   *                       HEX TO PRINTABLE ROUTINE
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         J     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         J     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         J     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* PRINT TO LOADMAP                                             *
*                                                              *
****************************************************************
*
PRINT    DS    0H                      PRINT ROUTINE
         TM    LOADMAP+48,X'10'        IS LOADMAP OPEN          @04C
         JNO   CLRPRT                  NO
         PUT   LOADMAP,PRTLINE         WRITE PRINT LINE         @04C
CLRPRT   MVI   PRT,C' '                CLEAR PRINT LINE
         MVC   PRT+1(L'PRT-1),PRT
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C' '                SINGLE SPACED
         JE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'0'                DOUBLE SPACED
         JE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'-'                TRIPLE SPACED
         JE    SETSGL                  YES
         ZAP   LINECT,P0               NO, MUST BE NEW PAGE
SETSGL   MVI   PCC,C' '                SET SINGLE SPACING
         CP    LINECT,P58              PAST END OF PAGE
         JH    NEWPAGE                 YES
         BR    R9                      EXIT
NEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF
         ZAP   LINECT,P0               RESET LINE COUNTER
         BR    R9                      EXIT
*
*
****************************************************************
*                                                              *
* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.   *
* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.               *
*                                                              *
****************************************************************
*
GETCTL   EQU   *                       EXTRACT DESIRED MEMBER/CSECT
         GET   SYSIN                   READ THE CONTROL CARD
         LA    R12,72                  LENGTH OF CONTROL CARD
         LA    R11,8                   MAX LENGTH OF MEMBER NAME
         LA    R10,MEMBER              @ MEMBER NAME FIELD
CKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK
         JNE   GCMEMOV                 NO, GO MOVE MEMBER NAME
         LA    R1,0(R1)                TO NEXT CONTROL BYTE
         JCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH
         J     GCEND                   ALL BLANKS, EXIT
GCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         BCTR  R12,R0                  SUBTRACT 1 FROM LENGTH
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R11,R0                  SUBTRACT 1 FROM LENGTH
         CLI   0(R1),C' '              GOT A BLANK
         JE    GCSETUP2                YES
         CLI   0(R1),C','              GOT A COMMA
         JE    GCSETUP2                YES
         LTR   R12,R12                 END OF CONTROL DATA
         JE    GCEND                   YES
         LTR   R11,R11                 NAME FULL
         JNZ   GCMEMOV                 NO, CONTINUE
         J     NAMEOV8                 YES, NAME TOO LONG
GCSETUP2 LA    R11,8                   CSECT NAME MAX LENGTH
         LA    R10,CSECT               @ CSECT NAME FIELD
GCSTEP2  LA    R1,1(R1)                STEP PAST BLANK
         JCT   R12,GCHKBK2             CHECK NEXT FOR BLANK
         J     GCEND                   END OF SCAN
GCHKBK2  CLI   0(R1),C' '              CONTROL DATA IS BLANK
         JE    GCSTEP2                 YES
GCCSMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO CSECT NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R12,R0                  DEDUCT 1 FROM CONTROL LENGTH
         BCTR  R11,R0                  DEDUCT 1 FROM NAME LENGTH
         LTR   R12,R12                 ANY CONTROL BYTES LEFT
         JZ    GCEND                   NO
         CLI   0(R1),C' '              NEXT CONTROL BYTE BLANK
         JE    GCEND                   YES
         LTR   R11,R11                 ANY NAME BYTES LEFT
         JNZ   GCCSMOV                 YES, LOOP
         J     NAMEOV8                 NAME TOO LONG, ERROR
GCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND
         JE    NOMBR                   NO
         BR    R9                      EXIT
*
*
*
****************************************************************
*                                                              *
* MISCELLANEOUS ERROR MESSAGES.                                *
*                                                              *
****************************************************************
*
ERRORS   EQU   *                       ERROR END MESSAGES
NOCTL    MVC   PRT(L'NOCNTRL),NOCNTRL  NO CONTROL INFO MESSAGE
         J     ERREND2                 GO PRINT                    @04C
NAMEOV8  MVC   PRT(L'OVER8),OVER8      NAME OVER 8 MESSAGE
         J     ERREND2                 GO PRINT                    @04C
NOMBR    MVC   PRT(L'NOMEM),NOMEM      MISSING MEMBER NAME MESSAGE
         J     ERREND2                 GO PRINT                    @04C
MISSMEM  MVC   PRT(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE
         J     ERREND2                 GO PRINT                    @04C
MISSCS   MVC   PRT(L'INVCSECT),INVCSECT CSECT NOT IN MEMBER MESSAGE
         J     ERREND2                 GO PRINT                    @04C
SYMFULL  MVC   PRT(L'FULLSYM),FULLSYM  FULL SYM TBL MSG
         J     ERREND                  GO PRINT
RLDFULL  MVC   PRT(L'FULLRLD),FULLRLD  RLD TBL FULL MSDG
ERREND   DS    0H
         PUT   SYSPRINT,PRTLINE        GO PRINT MESSAGE
         ABEND 778,DUMP                ABEND
ERREND2  PUT   SYSPRINT,PRTLINE                                    @04A
         J     CLOSES                                              @04A
*
*
*
*
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE ESD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
ENDINIT  DS    0H                      *** FINAL PROCESSING ***
         L     R6,SYMTBAD              GET @ ESD TABLE
         USING SYMTBL,R6
         LA    R7,4                    INITIAL LABEL COUNT VALUE
SYMCNT   CLI   0(R6),X'FF'             END OF ESD TABLE
         JE    RLDCNT                  YES
         CLI   TYPSYM,3                IS ESD AN LR ENTRY
         JNE   SCSTP                   NO, IGNORE
         CLC   SYMADDR,START+1         ADDR BELOW DESIRED CSECT
         JL    SCSTP                   YES, IGNORE
         CLC   SYMADDR,END+1           ADDR ABOVE DESIRED CSECT
         JH    SCSTP                   YES, IGNORE
         LA    R7,1(R7)                ADD TO LABEL COUNT
         MVC   SYMLENG,ASTERISK        FLAG AS USABLE
SCSTP    LA    R6,L'SYMENT(R6)         TO NEXT ESD ENTRY
         J     SYMCNT
         DROP  R6
*
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE RLD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
*
RLDCNT   L     R6,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R6
RLDCEND  CLI   0(R6),X'FF'             END OF RLD TABLE
         JE    LBLGET                  YES
         CLC   RLDRP,ESDID             ESDID SAME AS DESIRED CSECT
         JNE   RLDC1                   NO, EXTRN REF
         LA    R7,1(R7)                ADD 1 TO LABEL COUNT
RLDC1    LA    R7,1(R7)                ADD 1 TO LABEL COUNT
         LA    R6,L'RLDENT(R6)         TO NEXT RLD ENTRY
         J     RLDCEND                 LOOP THRU RLD TBL
         DROP  R6
         DROP  R5
****************************************************************
*                                                              *
* CREATE INITIAL ENTRIES IN THE LABEL TABLE USING DATA FROM    *
* THE ESD AND RLD TABLES.                                      *
*                                                              *
****************************************************************
LBLGET   DS    0H
*        L     R6,LBLTBL               GET @ LABEL TABLE
         L     R6,CURRLBL              GET @ LABEL TABLE
         USING LABELD,R6
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
         CLC   LKEPA,XZROS             E.P. ADDR ZERO
         JE    LRENTS                  YES
         SR    R1,R1                   CLEAR WORK
         ICM   R1,7,LKEPA              PICK UP E.P. ADDR
         S     R1,START                RELATIVIZE IN CSECT
         JM    LRENTS                  NEG, ERROR
         STCM  R1,7,LBLADR             SAVE OFFSET
         XC    LBLREF,LBLREF           CLEAR LBLREF                @03A
         MVI   LBLTYP,C'L'             SET LABEL TYPE IN ENTRY
         LA    R12,LBLADR              POINT TO OFFSET
         JAS   R9,HEXPRT3
         MVC   LBLNAME,BLANX                                       @05A
         MVI   LBLNAME,C'A'            1ST CHAR OF LABEL IS 'A'
         MVC   LBLNAME+1(6),PRTABL     END OF LABEL IS OFFSET
         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE IT'S ADDRESS
LRENTS   CLI   0(R7),X'FF'             END OF ESD TABLE
         JE    RLDLBLS                 YES
         CLC   SYMLENG,ASTERISK        THIS DESIRED LR ENTRY
         JE    GOTLR                   YES
LRESTP   LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         J     LRENTS                  LOOP THRU ESD TABLE
GOTLR    SR    R12,R12                 CLEAR WORK REGISTER
         ICM   R12,7,SYMADDR           GET SYMBOL ADDRESS
         S     R12,START               RELATIVIZE IN CSECT
         STCM  R12,7,LBLADR            SAVE RELATIVE ADDRESS
         MVC   LBLNAME,BLANX                                       @05A
         MVC   LBLNAME(8),EXTSYM       SYMBOL NAME TO OUTPUT
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY
         LA    R6,LABELL(R6)           TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE NEXT LABEL ENTRY ADDR
         J     LRESTP                  CONTINUE ESD PROCESSING
         DROP  R7
RLDLBLS  L     R7,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R7
RLDLBND  CLI   0(R7),X'FF'             END OF RLD TABLE   **
         JE    PHASE1                  YES
         CLC   RLDRP,ESDID             RLD ESDID = DESIRED CSECT ESDID
         JE    INTREFS                 YES, INTERNAL ADCON
         CLI   RLDTYPE,1               VCON
         JE    EXTREFS                 YES
         CLI   RLDTYPE,0               ER                          @03A
         JE    EXTREFS                 YES                         @03A
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         JE    EXTREFS                 YES
RLLSTP   LA    R7,L'RLDENT(R7)         TO NEXT RLD ENTRY
         J     RLDLBND                 LOOP THRU RLD TABLE
EXTREFS  MVC   LBLNAME,BLANX                                       @05A
         CLI   RLDESDTP,X'0A'          W-CON
         JNE   VCONLBL                 NO, BUILD V-CON
         MVI   LBLTYP,C'W'             SHOW W-CON
         J     FXTLBL                  CONTINUE LABEL ENTRY FORMAT
VCONLBL  MVI   LBLTYP,C'V'             SHOW V-CON
         CLC   RLDNAME,XZROS                                       @03A
         JNE   FXTLBL                                              @03A
         MVC   LBLNAME(8),CQUEST                                   @03A
         J     FINLBL                                              @03A
FXTLBL8  MVI   LBLTYP,C'8'                                         @10C
         MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY         @10A
         L     R12,TXTSTRT                                         @10A
         SR    R14,R14                                             @10A
         ICM   R14,7,RLDADDR                                       @10A
         AR    R12,R14                                             @10A
         AHI   R12,4                                               @10A
         L     R15,0(R12)                                          @10A
         L     R12,START                                           @10A
         SR    R15,R12                                             @10A
         LR    R12,R15                                             @10A
         ST    R12,COMMENT                                         @10A
         LA    R12,COMMENT                                         @10A
         JAS   R9,HEXPRT4              CONVERT OFFSET TO LABEL     @10A
         MVI   LBLNAME,C'A'                                        @10A
         MVC   LBLNAME+1(6),PRTABL+2                               @10A
         MVI   LBLNAME+7,C' '                                      @10A
         MVC   COMMENT+4(8),LBLNAME                                @10A
         J     FINLBL                                              @10A
FXTLBL   MVC   LBLNAME(8),RLDNAME      NAME TO LABEL ENTRY
FINLBL   MVC   LBLADR,RLDADDR          ADDRESS TO LABEL ENTRY
         MVC   LBLLEN,RLDLEN           LENGTH TO LABEL ENTRY
         LA    R6,LABELL(R6)           TO NEXT LABEL TABEL ENTRY
         ST    R6,CURRLBL              SAVE CURRENT LABEL TABLE ADDR
         J     RLLSTP                  CONTINUE LABEL TABLE BUILD
INTREFS  DS    0H
         CLI   RLDLEN,8                AD LABEL                    @06A
         JE    FXTLBL8                 BRANCH IF YES               @06A
         CLI   RLDTYPE,0               A-CON
         JNE   RLLSTP                  NO, IGNORE
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY TYPE
         SR    R12,R12                 CLEAR WORK REGISTER
         ICM   R12,7,RLDADDR           GET RLD ADDRESS
         A     R12,TXTSTRT             FIND LOC IN TEXT
         MVC   LBLADR,1(R12)           MOVE TO LABEL ENTRY
         CLI   RLDLEN,8                DOUBLE WORD ADDRESS 8-BYTES @06A
         JE    INTGOTL                 YES                         @06A
         CLI   RLDLEN,4                ACON IS 4-BYTES
         JE    INTGOTL                 YES
         MVC   LBLADR,0(R12)           TEXT TO LABEL ENTRY
         CLI   RLDLEN,3                ADCON IS 3-BYTES
         JE    INTGOTL                 YES
         MVC   LBLADR+1(2),0(R12)      TEXT TO LABEL ENTRY
         MVI   LBLADR,0                CLEAR 1ST BYTE
         CLI   RLDLEN,2                ADCON IS 2-BYTES
         JE    INTGOTL                 YES
         XC    LBLADR,LBLADR           CLEAR LABEL ENTRY ADDR
         MVC   LBLADR+2(1),0(R12)      TEXT TO LABEL ENTRY
INTGOTL  SR    R12,R12                 CLEAR WORK
         ICM   R12,7,LBLADR            GET ADDRESS
         S     R12,START               RELATIVIZE IN CSECT
         JM    RLLSTP                  NEGATIVE, IGNORE
         STCM  R12,7,LBLADR            STORE RELATIVE ADDRESS
         LA    R12,LBLADR              POINT TO ADDRESS
         JAS   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVC   LBLNAME,BLANX           INIT TO BLAKS               @05A
         MVI   LBLNAME,C'A'            LABEL ENTRY TYPE
         MVC   LBLNAME+1(6),PRTABL     LOW ORDER NAME POSITIONS
         MVI   LBLNAME+7,C' '          CLEAR LAST NAME BYTE
         MVC   LABELL(LABELL,R6),0(R6) COPY THIS ENTRY TO NEXT
         MVI   LBLLEN,0                SET LENGTH = 0
         LA    R6,LABELL(R6)           STEP TO NEXT
         MVI   LBLTYP,C'A'             SHOW TYPE
         J     FINLBL                  FINISH LABEL
         DROP  R6
         DROP  R7
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 1: HDISASM1                            *
*                                                              *
****************************************************************
PHASE1   DS    0H
         LARL  R0,HDISSFTB             LOAD HDISSFTB              @08A
         SR    R1,R1                                              @08A
         SVC   8                       LOAD HDISD2TB              @08A
         ST    R0,SFTAD                SAVE EPA OF HDISD2TB       @08A
         MVC   0(3,R6),HIVAL           SET END OF LABEL TABLE
         L     R15,ASM1AD              COPY E.P. ADDRESS
*        LA    R1,=A(COMMPARM)         @ PARAMETER LIST
         LARL  R1,COMMPARM             @ PARAMETER LIST
         BALR  R14,R15                 LINK TO HDISASM1
         CLI   USERR,0                 ANY ERRORS
         JNE   CLOSES                  YES, STOP THE RUN
****************************************************************
*                                                              *
* PRINT THE LABEL TABLE AFTER PHASE 1 COMPLETION.              *
*                                                              *
****************************************************************
         MVC   DATOCUR,DATSTRT
         MVC   CODOCUR,CODSTRT
         MVC   PRTLINE,PH1LBL          HEADER 1
         JAS   R9,PRINT                PRINT IT
         MVC   PRTLINE,PH1HDR          HEADER 2
         JAS   R9,PRINT                PRINT IT
         L     R6,LBLTBL               GET LABEL TABLE ADDR
         USING LABELD,R6
LPEND    C     R6,CURRLBL              END OF TABLE
         JNL   FREESTRG                YES
         LA    R12,LBLADR              @ LABEL ADDRESS
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT(6),PRTABL           ADDRESS TO PRINT
         MVC   PRT+9(1),LBLTYP         TYPE TO PRINT
         MVC   PRT+12(L'LBLNAME),LBLNAME     SYMBOL TO PRINT      @05C
         CLI   LBLLEN,0                ANY LENGTH
         JE    LTPPRT                  NO
         LA    R12,LBLLEN              GET @ LENGTH
         JAS   R9,HEXPRT1              CONVERT
         MVC   PRT+26(2),PRTABL        LENGTH TO PRINT             @05C
         LA    R12,LBLREF              GET @ LENGTH                @03A
         JAS   R9,HEXPRT3              CONVERT                     @03A
         MVC   PRT+30(6),PRTABL        LENGTH TO PRINT             @05C
LTPPRT   JAS   R9,PRINT                PRINT TBL ENTRY
         LA    R6,LABELL(R6)           TO NEXT ENTRY
         J     LPEND                   LOOP THRU TABLE
FREESTRG L     R12,RLDTBL              @ RLD TABLE
         STORAGE RELEASE,LENGTH=96000,ADDR=(12)   FREE RLD TABLE   @06A
         L     R12,BUFAD                                           @02A
         STORAGE RELEASE,LENGTH=32768,ADDR=(12)   FREE I/O         @06C
*                                                 BUFFER ADDRESS
****************************************************************
*                                                              *
* PRINT THE TEXT FOR THE CSECT TO BE DISASSEMBLED.             *
*                                                              *
****************************************************************
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   PRT+50(19),MSG27        '***** T E X T *****'
         JAS   R9,PRINT                PRINT TEXT HEADER
         MVI   PCC,C'0'                SET DOUBLE SPACING
         L     R11,TXTSTRT             GET TEXT START ADDRESS
PNEXLIN  LA    R10,2                   GROUPS PER LINE
         LA    R12,POFSET+1            @ OFFSET
         JAS   R9,HEXPRT3              CONVERT
         MVC   PRT(6),PRTABL           OFFSET TO PRINT
         MVC   PRT+85(32),0(R11)       TEXT TO PRINT
         TR    PRT+85(32),PRTCHAR      TRANSLATE TO PRINTABLE
         LA    R8,PRT+9                @ 1ST PRINT WORD
         LA    R7,4                    4 WORDS PER GROUP
PGRP     LA    R12,0(R11)              @ TEXT WORD
         JAS   R9,HEXPRT4              CONVERT
         MVC   0(8,R8),PRTABL          TEXT TO PRINT WORD
         LA    R11,4(R11)              TO NEXT TEXT WORD
         LA    R8,9(R8)                TO NEXT PRINT LOC
         JCT   R7,PGRP                 DO 4 TIMES
         LA    R8,2(R8)                SPACE BETWEEN GROUPS
         LA    R7,4                    FOR 2ND GROUP
         JCT   R10,PGRP                DO 4 MORE TIMES
         JAS   R9,PRINT                PRINT THE LINE
         L     R9,POFSET               GET OFFSET
         LA    R9,32(R9)               ADD 32 BYTES
         ST    R9,POFSET               UPDATE OFFSET
         C     R11,TXTEND              END OF TEXT
         JL    PNEXLIN                 NO, CONTINUE
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVI   WORKREC,C' '            CLEAR OUTPUT RECORD
         MVC   WORKREC+1(L'WORKREC-1),WORKREC
         MVC   NAME,CSECT              CSECT NAME
****************************************************************
*                                                              *
* CREATE THE INITIAL CSECT INSTRUCTION, AND ANY ENTRY STATE-   *
* MENTS WHICH MAY BE INDICATED BY ESD TABLE ENTRIES.           *
*                                                              *
****************************************************************
         MVC   MNEMONIC(L'C_CSECT),C_CSECT SET MNEMONIC TO CSECT
         JAS   R9,PUNCH                WRITE SYSPUNCH RECORD
         MVC   PRT+25(14),PRT          COPY CSECT STATEMENT       @03A
         MVC   PRT(16),BLANX                TO SYSPRINT           @03A
         PUT   SYSPRINT,PRTLINE        WRITE SYSPRINT RECORD
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
LREFSS   CLI   0(R7),X'FF'             END OF ESD TBL
         JE    CKLDLB                  YES
         CLC   SYMLENG,ASTERISK        '***'
         JE    MAKEXT                  YES
ESDTSTP  LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         J     LREFSS                  LOOP THRU ESD TBL
MAKEXT   MVC   MNEMONIC(L'C_ENTRY),C_ENTRY   MNEMONIC IS ENTRY    @04C
         MVC   OPNDS(8),EXTSYM         SYMBOL TO OPERAND
         JAS   R9,PUNCH                WRITE OUTPUT RECORD
         MVC   PRT+34(17),PRT+9        COPY ENTRY STATEMENT       @03A
         MVC   PRT+9(17),BLANX              TO SYSPRINT           @03A
         PUT   SYSPRINT,PRTLINE        AND PRINT IT
         J     ESDTSTP                 CONTINUE ESD PROCESSING
         DROP  R7
         DROP  R6
CKLDLB   L     R12,SYMTBAD             @ ESD SYMBOL TABLE
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 2: HDISASM2                           *
*                                                              *
****************************************************************
         STORAGE RELEASE,LENGTH=304000,ADDR=(12)  FREE SYMBOL TBL
         L     R15,ASM2AD              GET E.P. ADDRESS
         LARL  R1,COMMPARM             GET PARAMETER ADDRESS       @06C
         BALR  R14,R15                 CALL HDISASM2
         J     EOJ                     GO FINISH
****************************************************************
*                                                              *
* WRITE OUTPUT TO SYSPUNCH.                                    *
*                                                              *
****************************************************************
PUNCH    EQU   *                       WRITE OUTPUT RECORDS
         MVC   PRT(80),WORKREC         SAVE IN PRINT
         TM    SYSPUNCH+48,X'10'       IS FILE OPEN
         JZ    CLRWKR                  NO
         AP    CARDNO,P10              INCREMENT CARD NO
         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD
         OI    SEQNBR+7,C'0'           CLEAR SIGN
         PUT   SYSPUNCH,WORKREC        WRITE SOURCE CARD
CLRWKR   MVI   WORKREC,C' '            CLEAR OUTPUT RECORD
         MVC   WORKREC+1(L'WORKREC-1),WORKREC
         BR    R9                      RETURN
****************************************************************
*                                                              *
* END OF JOB. DISASSEMBLY COMPLETE.                            *
*                                                              *
****************************************************************
EOJ      EQU   *                       END OF JOB
         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.        @04A
         JZ    NOCTL                   NO                         @04A
         MVC   MNEMONIC(L'C_YREGS),C_YREGS  SET MNEMONIC TO YREGS
         JAS   R9,PUNCH                WRITE RECORD
         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC             @20A
         MVC   PRT+34(5),C_YREGS                                  @03A
         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A
         L     R12,DTBSTRT             @ DSECT HEADER TBL
CENDSTB  CLI   0(R12),X'FF'            END OF TABLE
         JE    ENDSTMT                 YES
         MVC   NAME,0(R12)             DSECT NAME TO RECORD
         MVC   MNEMONI2(L'CDSECT),CDSECT  COPY 'DSECT'            @05C
         JAS   R9,PUNCH                PUNCH DSECT ENTRY
         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE           @04A
         ICM   R11,7,DSECTHA-DSECTHD(R12)  GET FIELD TABLE ADDR   @05C
         USING DSECTD,R11
CENDFTB  CLI   0(R11),X'FF'            END OF FIELD TABLE
         JNE   DFMTFLD                 NO
         LA    R12,DSECTHL(R12)         TO NEXT DSECT HEADER      @05C
         J     CENDSTB                 LOOP
DFMTFLD  MVC   NAME(L'DSLNAME),DSLNAME NAME TO RECORD             @05C
         MVC   MNEMONI2(L'CEQU),CEQU   COPY 'EQU'                 @05C
         MVC   OPNDS+4(8),0(R12)       BASE NAME TO OPERAND       @05C
         LA    R10,OPNDS+7             @ NAME RHE
CFRHE    CLI   0(R10),C' '             AT RHE
         JNE   CFPLUS                  YES
         JCT   R10,CFRHE               BACK UP 1 AND LOOP
CFPLUS   LA    R10,1(R10)              TO NEXT POS
         MVI   0(R10),C'+'             DELIMITER
         SR    R1,R1                   CLEAR WORK
         ICM   R1,7,DSOFSET            GET OFFSET
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(5),DBLWD+4(4)     UNPACK                     @06C
         OI    DBLWD+4,X'F0'           CLEAR SIGN                 @06C
         CHI   R1,10000                OFFSET < 10000             @06A
         JL    CFO1000                 YES                        @06A
         MVC   1(5,R10),DBLWD          NO, MOVE 5-DIGIT OFFSET    @06A
         LA    R10,6(R10)              TO NEXT POS                @06A
         J     CFCMA                   CONTINUE                   @06A
CFO1000  CHI   R1,1000                 OFFSET < 1000              @06C
         JL    CFO100                  YES
         MVC   1(4,R10),DBLWD+1        NO, MOVE 4-DIGIT OFFSET    @06C
         LA    R10,5(R10)              TO NEXT POS
         J     CFCMA                   CONTINUE
CFO100   CHI   R1,100                  OFFSET < 100               @03C
         JL    CFO10                   YES
         MVC   1(3,R10),DBLWD+2        NO, MOVE 3-DIGIT OFFSET    @06C
         LA    R10,4(R10)              TO NEXT POS
         J     CFCMA                   CONTINUE
CFO10    CHI   R1,10                   OFFSET < 10                @03C
         JL    CFO1                    YES
         MVC   1(2,R10),DBLWD+3        MOVE 2-DIGIT OFFSET        @06C
         LA    R10,3(R10)              TO NEXT POS
         J     CFCMA                   CONTINUE
CFO1     LTR   R1,R1                   ANY OFFSET
         JZ    CFCMA                   NO
         MVC   1(1,R10),DBLWD+4        YES, MOVE 1-DIGIT OFFSET   @06C
         LA    R10,2(R10)              TO NEXT POS
CFCMA    MVI   0(R10),C','             DELIMITER
         SR    R1,R1                   CLEAR WORK
         IC    R1,DSLENG               PICK UP LENGTH
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(3),DBLWD+4(4)     UNPACK
         OI    DBLWD+2,C'0'            CLEAR SIGN
         CHI   R1,100                  LENGTH < 100                @03C
         JL    CFL10                   YES
         MVC   1(3,R10),DBLWD          NO, MOVE 3-DIGIT LENGTH
         J     CFWRT                   CONTINUE
CFL10    CHI   R1,10                   LENGTH < 10
         JL    CFL1                    YES
         MVC   1(2,R10),DBLWD+1        NO, MOVE 2-DIGIT LENGTH
         J     CFWRT                   CONTINUE
CFL1     MVC   1(1,R10),DBLWD+2        MOVE 1-DIGIT LENGTH
CFWRT    MVC   COMMENTE,DSCOMMT        COPY DSECT DESCRIPTION      @05A
         JAS   R9,PUNCH                PUNCH THE RECORD
         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C
         LA    R11,DSECTL(R11)         TO NEXT FIELD ENTRY
         J     CENDFTB                 LOOP
ENDSTMT  MVC   MNEMONIC(L'C_END),C_END   COPY END TO MNEMONIC
         MVC   OPNDS(8),ENDLBLNM       POINT END STMT TO BEGIN LOC
         JAS   R9,PUNCH                WRITE THE RECORD
         MVC   PRT+9(9),BLANX          CLEAR MNEMONIC              @20C
         MVC   PRT+34(3),C_END        COPY LITERAL END             @03A
         PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE            @04C
         L     R12,CTLSTRT                                         @04A
         STORAGE RELEASE,LENGTH=22200,ADDR=(12)  FREE CTLBL TABLE  @06C
         L     R12,DATSTRT                                         @04A
         STORAGE RELEASE,LENGTH=1801,ADDR=(12) FREE DATA ONLY TBL  @06C
CLOSES   CLOSE (SYSLIB,,SYSPUNCH,,SYSPRINT,,SYSIN,,LOADMAP,,REGUSE),   X
               MODE=31
         PR                            RETURN TO CALLER            @03A
         DELETE EPLOC=DATAAD1                                      @08C
         DELETE EPLOC=DATAAD2                                      @08A
         DELETE EPLOC=DATAAD3                                      @10A
         DELETE EPLOC=SFTAD                                        @05A
         DROP  R11
*
*                 *** DATA AND WORK AREAS ***
         DC    CL24'HDISASM VARIABLES ==>  '   EYE CATCHER         @06A
DATASTR  DC    A(HDISASM)
ASM1AD   DC    V(HDISASM1)             ADDRESS OF HDISASM1         @03A
ASM2AD   DC    V(HDISASM2)             ADDRESS OF HDISASM1         @03A
BUFAD    DS    F                       SYSLIB BUFFER ADDR
SYMTBAD  DS    F                       SYMBOL TABLE ADDRESS
CURRSYM  DS    F                       CURRENT SYM TBL ADDR
ENDSYM   DC    F'304000'        SYM TBL END ADDR (32000 ENTRIES)   @04C
RLDTBL   DS    F                       ADDR OF RLD TABLE
CURRLD   DS    F                       CURR RLD TBL ADDR
ENDRLD   DC    F'96000'                RLD TBL END ADDR
PROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT
CES9     DS    F                       CESDREC RETURN ADDR
BL9      DS    F                       BLDL RTN RETURN ADDR
CR9      DS    F                       CTRLRECS RETURN ADDR
CT9      DS    F                       CNTLRECS RETURN ADDR
RL9      DS    F                       RLDRECS RETURN ADDR
TX9      DS    F                       TXTFMT RETURN ADDR
GEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE               @03A
GEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE               @03A
GRDMVREX MVC   RESIDENT(1),0(R2)       EXECUTED MOVE
GRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE               @03A
CLASSOFF DC    F'0'                    OFFSET TO CLASS             @06A
RLD_PTR  DC    F'0'                    CURRENT RLD ENTRY ADDRESS   @05A
ADJUST   DC    H'0'
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P10      DC    P'10'                   CONSTANT 58
P58      DC    P'58'                   CONSTANT 58
JFCBAD   DS    0F                      DCB EXIT LIST
         DC    X'87'                   RDJFCB, END OF LIST
         DC    AL3(JFCB)               ADDRESS OF JFCB READ AREA
JFCB     DS    CL176                   JFCB
SYMHDR1  DC    C'0     SYMBOL        TYPE   IND  ADDR'             @05C
         DC    C'    SEG  LRID   LENG  ESDID  RSECT  AMODE  RMODE'
         DC    CL64' '
SYMHDR2  DC    C'0     SYMBOL     TYPE  IND  STA   ADDR    LENG  ' @05A
         DC    CL100' '                                            @05A
*
*
*
RLDHDR   DC    C'0     RELPTR  POSPTR      TYPE     LEN'
         DC    C'    DIR   ADDR'
         DC    CL90' '
*
*
*
PH1LBL   DC    CL121'1***** PHASE 1 LABEL TABLE *****'
PH1HDR   DC    CL121'0  ADDR TYPE  SYMBOL      LEN  REFERENCE'     @05C
*
*
*
X0F00    DC    X'0F00'                 CONSTANT ZEROS
NOCNTRL  DC    C'MEMBER AND CSECT MUST BE ENTERED VIA SYSIN'
OVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'
NOMEM    DC    C'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM'
INVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'
INVCSECT DC    C'SPECIFIED CSECT NOT FOUND IN MEMBER'
FULLSYM  DC    C'SYMBOL TABLE FULL: OVER 16000 ENTRIES'            @04C
FULLRLD  DC    C'RLD TABLE FULL: OVER 3000 ENTRIES'
NOSTOR   DC    CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'       @04A
CURRAMOD DS    XL1                        REQUESTED CSECT AMODE    @04A
CURRRMOD DS    XL1                        REQUESTED CSECT RMODE    @04A
RESIDENT DC    CL8' '                  RLD RESIDENT CSECT NAME     @04A
SYMBPTS2 DC    CL8' '                  RLD SYMBOL POINTED TO       @04A
ESDSYMB  DC    CL8' '                  ESD SYMBOL NAME             @04A
ESDOWNER DC    CL8' '                  ESD OWNING CSECT NAME       @04A
TEXTADDR DC    A(0)                       ADDRESS OF CSECT TEXT    @04A
TEXTENDA DC    A(0)                  ADDRESS OF LAST BYTE OF TEXT  @04A
TEXTLENG DC    A(0)                       TOTAL TEXT LENGTH        @04A
CURRTEXT DC    A(0)                  ADDRESS OF CURRENT TEXT BYTE  @04A
TMPCLBL  DS    A(0)                                                @06A
IEWPLMH  DC    C'IEWPLMH'                                          @04A
C_B_TEXT DC    CL8'B_TEXT  '                                       @04A
C_ESD    DC    CL8'ESD     '                                       @04A
C_RLD    DC    CL8'RLD     '                                       @04A
C_TEXT   DC    CL8'TEXT    '
C_CSECT  DC    C'CSECT'
C_END    DC    C'END  '
C_ENTRY  DC    C'ENTRY'
C_YREGS  DC    C'YREGS'
C_SUPVR  DC    C'SUPVR'
C_FLTPT  DC    C'FLTPT'
C_ACON   DC    C'ACON'
C_VCON   DC    C'VCON'
C_LR     DC    C'LR'
C_ED     DC    C'ED'
C_SD     DC    C'SD'
C_ER     DC    C'ER'
C_PC     DC    C'PC'
C_CM     DC    C'CM'
C_WX     DC    C'WX'
C_PR     DC    C'PR'
CPRDISP  DC    C'PRDISP'
ASTERISK DC    C'***'
CNULL    DC    C'NULL'
CESTAB   DC    C'E/STAB'
CQUEST   DC    C'????????'
C_OL     DC    C'OL'
CEXEC    DC    C'EXEC'
CREFR    DC    C'REFR'
CTEST    DC    C'TEST'
CRENT    DC    C'RENT'
CREUS    DC    C'REUS'
COVLY    DC    C'OVLY'
CYES     DC    C'YES'
CNO      DC    C'NO '
CANY     DC    C'ANY'
CEQU     DC    C'EQU'
C31      DC    C'31 '
C24      DC    C'24 '
CDSECT   DC    C'DSECT'
CPRCUM   DC    C'PRCUM '
CUNRESV  DC    C'UNRESOLVED'
CUNKNOWN DC    C' ??:'
MSG01    DC    C'*** EXTERNAL SYMBOL TABLE ***'
MSG02    DC    C'***** RLD INFO *****'
MSG03    DC    C'DIRECTORY INFO FOR MODULE '
MSG04    DC    C'TTR OF MODULE='
MSG05    DC    C'CONCATENATION NBR='
MSG06    DC    C'ALIAS INDIC='
MSG07    DC    C'*** ALIAS ***'
MSG08    DC    C'TTR, 1ST TXT RECD='
MSG09    DC    C'TTR OF NOTE/SCATTER LIST='
MSG10    DC    C'NBR NOTE ENTRIES='
MSG11    DC    C'ATTRIBUTES 1='
MSG12    DC    C'TOTAL LENGTH='
MSG13    DC    C'LENGTH OF 1ST TXT RECD='
MSG14    DC    C'E. P. ADDR='
MSG15    DC    C'ATTRIBUTES 2='
MSG16    DC    C'PAGE ALIGN REQRD'
MSG17    DC    C'SSI PRESENT'
MSG18    DC    C'SCTRLEN='
MSG19    DC    C'TRANSLATE TBL LEN='
MSG20    DC    C'ESD ID OF 1ST TXT='
MSG21    DC    C'ESD ID CONTAINING E.P.='
MSG22    DC    C'E.P. ADDRESS OF THIS MEMBER='
MSG23    DC    C'REAL MEMBER NAME='
MSG24    DC    C'SSI INFO='
MSG25    DC    C'AUTH CODE='
MSG26    DC    C'***** REAL MEMBER DIRECTORY INFO *****'
MSG27    DC    C'***** T E X T *****'
POFSET   DC    F'0'                    OFFSET FOR TEXT PRINT
MAPDB2   DC    CL8'MAPDB2  '                                      @05A
MAPMVS   DC    CL8'MAPMVS  '                                      @05A
MAPOMVS  DC    CL8'MAPOMVS '                                      @10A
HDISSFTB DC    CL8'HDISSFTB'                                      @05A
PRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   PRTCHAR+C' '
         DC    C' '
         ORG   PRTCHAR+X'4A'      4/16/87  AC
*        DC    X'4A4B4C4D4E'
         DC    X'4A4B'
         ORG   PRTCHAR+X'50'
         DC    X'50'
         ORG   PRTCHAR+X'5A'
         DC    X'5A5B5C5D5E'
         ORG   PRTCHAR+X'60'
         DC    X'6061'
         ORG   PRTCHAR+X'6A'
         DC    X'6A6B6C6D6E6F'
         ORG   PRTCHAR+X'7A'
         DC    X'7A7B7C7D7E7F'    4/16/87
         ORG   PRTCHAR+C'a'                                       @04A
         DC    C'abcdefehi'                                       @04A
         ORG   PRTCHAR+C'j'                                       @04A
         DC    C'jklmnopqr'                                       @04A
         ORG   PRTCHAR+C's'                                       @04A
         DC    C'stuvwxyz'                                        @04A
         ORG   PRTCHAR+C'A'
         DC    C'ABCDEFGHI'
         ORG   PRTCHAR+C'J'
         DC    C'JKLMNOPQR'
         ORG   PRTCHAR+C'S'
         DC    C'STUVWXYZ'
         ORG   PRTCHAR+C'0'
         DC    C'0123456789'
         ORG
*
*
*
SYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X
               RECFM=FB,LRECL=80
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X
               RECFM=FB,LRECL=80,EODAD=NOCTL
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=121
LOADMAP  DCB   DSORG=PS,MACRF=PM,DDNAME=LOADMAP,                       X
               RECFM=FBA,LRECL=121
REGUSE   DCB   DSORG=PS,MACRF=PM,DDNAME=REGUSE,                        X
               RECFM=FBA,LRECL=121
SAVELNG  DS    F        *** DEBUG ***
SAVEADR  DS    F        *** DEBUG ***
SAVETXT  DS    F        *** DEBUG ***
***********************************************************************
*  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE                   *
***********************************************************************
PARMAREA DS    0F          READLMOD PARAMETER AREA
PRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER
PRMEMBER DC    CL8' '         MEMBER NAME
PRMCSECT DC    CL8' '         CSECT NAME
PRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD, RLD,
*                                TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,
*                                NAME, OR MAP
PRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZERO
*                             BEFORE A FIRST CALL FOR A SET OF DATA,
*                             THEN LEAVES IT AS-IS WHEN RETURNING FOR
*                             ADDITIONAL DATA UNTIL IT HAS ALL BEEN
*                             RETURNED. CURRENT VALUE IS RETURNED BY
*                             THIS SUBROUTINE AFTER EACH CALL.
PRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (S/B ZERO)
PRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (ZERO MEANS
*                             MORE DATA OF THIS TYPE IS AVAILABLE AND
*                             WILL BE RETURNED IN SUBSEQUENT CALLS.
*                             4 MEANS THE DATA IN THE BUFFER IS ALL
*                             THAT IS AVAILABLE OF THE REQUESTED TYPE
PRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILABLE IN THE BUFFER
PRMBUFAD DC    A(0)        ADDRESS OF THE DATA BUFFER HEADER. THE
*                             HEADER IS 32 BYTES LONG, FOLLOWED BY
*                             THE DATA ELEMENTS.
PRMERROR DS    CL1         ERROR INDICATOR ON RETURN:
PRMOK    EQU   C' '           SUCCESSFUL READLMOD CALL
PRMPRMER EQU   C'P'           PARAMETER ERROR
PRMAC_ERR EQU  C'E'           IEWBIND MACRO ERROR OCCURRED
****************************************************************
*
* FOLLOWING FIELDS: COMMPARM THRU COMMEND ARE COMMON AREAS SHARED
* BY THIS, AND CALLED SUB-PROGRAMS. ALL CHANGES MUST BE COORDINTAED
* WITH ALL OTHER PROGRAMS.
*
****************************************************************
*
         DC    C'COMMPARM'             EYECATCHER
         DS    0D
COMMPARM EQU   *                       COMMON AREAS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TABLE
DBLWD    DS    D                       DOUBLEWORD WORK AREA
DATAAD1  DS    F                       @ MAPDB2                    @08C
DATAAD2  DS    F                       @ MAPMVS                    @08A
DATAAD3  DS    F                       @ MAPOMVS                   @10A
SFTAD    DS    F                       @ SYSTEM FUNCTION TABLE     @05A
S_DC     DC    C'DC'
S_NI     DC    C'NI'
S_STM    DC    C'STM'
S_DSN    DC    C'DSN'
S_BPX    DC    C'BPX'
S_ON     DC    C'On '
S_OFF    DC    C'Off '
S_USING  DC    C'USING'
TXTOFST  DS    0F
         DS    X
TXTOFSET DS    XL3                     OFFSET TO TEXT BYTE
ENDOFST  DS    F                       DSECT ENDING OFFSET
PUNCHDCB DC    A(SYSPUNCH)             @ SYSPUNCH DCB
PRINTDCB DC    A(SYSPRINT)             @ SYSPRINT DCB
REGUSDCB DC    A(REGUSE)               @ REGUSE   DCB
INDCB    DC    A(SYSIN)                @ SYSIN DCB
CSECT    DC    CL8' '                  SPECIFIED CSECT NAME
ESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT
ENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE
LINECT   DC    PL2'0'                  PRINT LINE COUNTER
START    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC
END      DC    F'0'                    CSECT END ADDRESS
CSTLENG  DC    F'0'                    LENGTH OF SPECIFIED CSECT
LBLTBL   DS    F                       @ LABEL TABLE
CURRLBL  DS    F                       CURRENT LABEL ENTRY ADDR
ENDLBL   DS    F                       @ END OF LABEL TBL
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
DTBSTRT  DC    A(HIVAL)                DSECT TABLE START ADDR
DTBCURR  DC    F'0'                    DSECT TABLE CURRENT ENTRY ADDR
DTBEND   DC    F'0'                    DSECT TABLE END ADDR
USGSTRT  DC    A(HIVAL)                USING TABLE START ADDR
USGCUR   DC    F'0'                    USING TABLE CURRENT ADDR
USGEND   DC    F'0'                    USING TABLE END ADDR
DATSTRT  DS    F                       DATA ONLY TABLE ADDR
DATOCUR  DS    F                       CURRENT DATA ONLY ADDR
DATOEND  DS    F                       END OF DATA ONLY TABLE
FLDTBL   DS    F                       @ FIELD TABLE
CURRFLD  DS    F                       CURRENT FIELD ENTRY ADDR
ENDFLD   DS    F                       @ END OF FIELD TBL
BLANX    DC    CL18' '                 CONSTANT BLANKS             @03C
FLPTASM  DC    X'00'                   FLOATING POINT INDICATOR
PRIVASM  DC    X'00'                   PRIVILEGED INDICATOR
USERR    DC    X'00'                   ERROR INDIC FOR HDISASM1
NBRLBLS  DC    H'0'                    NBR LABELS FROM HDISASM1
*
*
*
WORKREC  DS    0CL80                   DISASSEMBLY WORK AREA
NAME     DS    CL8                     NAME
         DS    CL1
MNEMONIC DS    CL6                     INSTRUCTION MNEMONIC        @04C
OPNDS    DS    CL30                    1ST OPERAND
OPNDSSP  DS    CL1                                                 @04C
COMMENTS DS    CL25                    COMMENT
COL72    DS    CL1
SEQNBR   DS    CL8                     CARD SEQ NBR
         ORG   MNEMONIC+4                                          @05A
MNEMONI2 DS    CL6                     EQU MNEMONIC                @05A
         ORG   COMMENTS-3                                          @05A
COMMENTE DS    CL28                    COMMENT                     @05A
         ORG
WORKREC2 DS    CL80                    SECOND LINE                 @04A
         DS    CL30                                                @04A
COMTREC  DS    0CL80                                               @27A
         DC    60C'*'                                              @27A
         DC    CL20' '                                             @27A
*
*
*
PRTLINE  DS    0CL121                  PRINT LINE
PCC      DC    C'1'                    CARRIAGE CONTROL
PRT      DC    CL120' '                PRINT DATA
CARDNO   DC    PL4'0'                  OUTPUT CARD NBR
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
CODSTRT  DS    F                       CODE ONLY TABLE ADDR        @03A
CODOCUR  DS    F                       CURRENT CODE ONLY ADDR      @03A
CODOEND  DS    F                       END OF CODE ONLY TABLE      @03A
CTLSTRT  DS    F                       CTLBK ONLY TABLE ADDR       @04A
CTLOCUR  DS    F                       CURRENT CTLBK ONLY ADDR     @04A
CTLOEND  DS    F                       END OF CTLBK ONLY TABLE     @04A
ENDDSCT  DC    X'FC00'                                             @09A
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
INSTENT  DS    0CL11                   CURRENT INSTRUCTION ENTRY
INAME    DS    CL6                     INSTR NAME (MNEMONIC)
ITYPE    DS    XL1                     INSTRUCTION TYPE
ICLASS   DS    XL1                     INSTRUCTION CLASS
IEDT     DS    XL1                     INSTRUCTION EDITS
ICCSET   DS    XL1                     TYPE CONDITION CODE SET
INLNG    DS    XL1                     INSTRUCTION LENGTH
IOLNG    DS    XL1                     OPERAND LENGTH
TEXT     DS    XL48                    CURRENT TEXT
*
DEBUGXX  DC    C'12345678'   DEBUG
         DC    C'9ABCDEFG'   DEBUG
XZROS    DC    16X'00'                 CONSTANT ZEROS
*
UDSCTAD  DC    A(0)                    @ USER DEFINED DSECT
HIVAL    DC    4X'FF'                  CONSTANT X F'S
SIMAPOFT DC    H'0'                    OFFSET
SIMAPB   DC    X'00'                   BIT MASK
XOFST    DC    XL3'000030'   ** DEBUG ** RELATIVE OFFSET
COMMENT  DC    CL88' '                 SAVE COMMENT FILED
CCOMMENT DC    CL28' '                 CURRRENT COMMENT  LONG
         DC    CL20' '                 RESERVED ??
BD15     DS    A                       REGISTER SAVE AREA
OPNDWK   DS    CL80                    OPERAND BUILD AREA
OWSTRT   DC    A(OPNDWK)               @ OPERAND WORK AREA
SXAPO    DC    C'X'''
FLAG1    DC    X'00'
FLGHEX4  EQU   X'80'                   HEX4 FLAG
FLGPSA   EQU   X'40'                   PSA  MAPPING
FLGIXREG EQU   X'20'                   INDEX REGISTER IS ZERO
FLGFOUND EQU   X'10'                   VARIABLE NAME FIND
FLGUDSCT EQU   X'08'                   USER DEFINED DSECT MAPPING
FLGNF    EQU   X'04'
PRTABL   DS    CL9                     PRINTABLE HEX WORK
SIDSC    DC    CL5'  '                 CURRENT DSECT NAME          @18A
         DC    C'BASETBL ' ** DEBUG **
BASES    DC    XL176'00'    11*16      PROGRAM BASE REGISTER TBL   @15C
         DC    CL6'DSECTS'                                         @23A
DSREGTBL DC    CL13'R0 '                                           @23A
*                   0123456789012                                  @23A
*                   RXX TXXXXX                                     @23A
DSREGL   EQU   5                       LENGTH OF DSECT NAME        @23A
DSREGEL  EQU   13                      LENGTH OF DSECT TABLE ENTRY @23C
         DC    CL13'R1 '                                           @23A
         DC    CL13'R2 '                                           @23A
         DC    CL13'R3 '                                           @23A
         DC    CL13'R4 '                                           @23A
         DC    CL13'R5 '                                           @23A
         DC    CL13'R6 '                                           @23A
         DC    CL13'R7 '                                           @23A
         DC    CL13'R8 '                                           @23A
         DC    CL13'R9 '                                           @23A
         DC    CL13'R10'                                           @23A
         DC    CL13'R11'                                           @23A
         DC    CL13'R12'                                           @23A
         DC    CL13'R13'                                           @23A
         DC    CL13'R14'                                           @23A
         DC    CL13'R15'                                           @23A
         DC    CL13'     PSA'                                      @23A
*
*
COMMEND  EQU   *
         COPY HDISTD
***********************************************************************
* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *
* EXTERNAL SYMBOL DICTIONARY (ESD) BUFFER:                            *
*    ESDHEADR DESCRIBES THE BUFFER HEADER.                            *
*    ESDENTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *
***********************************************************************
ESDHEADR DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER
ESDHBUFI DS    CL8  BUFFER EYECATCHER.
ESDHBUFL DS    F    TOTAL BUFFER LENGTH INCLUDING THIS
ESDHVERS DS    AL1  VERSION OF BUFFER.
         DS    AL3  RESERVED. MUST BE ZERO.
ESDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.
ESDHENTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER
ESDHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.
ESDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.
ESDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.
*
ESDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES
ESDTYPE  DS    CL2  TYPE OF ESD ENTRY.
ESDTYPEQ DS    CL2  ESD RECORD TYPE QUALIFIER
ESDNAMES DS    CL1  NAME SPACE OF SYMBOL
ESDSCOPE DS    CL1  SCOPE OF THE SYMBOL
ESDNAME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD
ESDNAMEC DS    H      LENGTH OF THE NAME.
ESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)
ESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS
ESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION
ESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED
ESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK
ESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED
ESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS
         DS    CL1
ESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION
ESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME
ESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF
*                        THE SYMBOL RESIDES. FOR LD, PR.
ESDLENG  DS    F    LENGTH OF DEFINED ELEMENT
ESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR
ESDUSBLT DS    XL1  REUSABILITY OF SD
ESDAMODE DS    XL1  ADDRESSING MODE OF SD
ESDRMODE DS    XL1  RMODE OF SD
ESDRECFM DS    H    RECORD FORMAT FOR CLASS
ESDLOADF DS    BL1  LOAD ATTRIBUTES
ESDRO    EQU   X'80'   READ-ONLY
ESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE
ESDMOVE  EQU   X'20'   MOVEABLE
ESDSHR   EQU   X'10'   SHAREABLE
ESDDEFER EQU   X'08'   DEFERRED LOAD
ESDBINDF DS    BL1  BIND ATTRIBUTES
ESDGEND  EQU   X'80'   BINDER-GENERATED
ESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE
ESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS
ESDDESCD EQU   X'10'   DESCRIPTIVE DATA
ESDINIT  EQU   X'08'   HAS PART INITIALIZERS
ESDFILLX EQU   X'04'   ILL HAS BEEN SET
ESDPADST EQU   X'02'   CLASS HAS PADDING AT START
ESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY SYMBOL
ESDMETH  EQU   X'30'   BINDING METHOD
*                        '00'B = CATENATE
*                        '01'B = MERGE
*                        '1-'B = RESERVED
ESDTXTTY EQU   X'0F'   TEXT TYPE
*                        '0000'B = UNSPECIFIED
*                        '0001'B = INSTRUCTIONS
*                        '0010'B = DATA
*                        '0011'B = TRANSLATOR DEFN
         DS    XL1
ESDXATCL DS    H    LENGTH OF XATTR CLASS NAME
ESDXATCP DS    A    PTR TO EXTENDED ATTRIBUTES CLASS NAME
ESDXATOF DS    F    EXTENDED ATTRIBUTES OFFSET
ESDSEGMN DS    H    OVERLAY SEGMENT NUMBER OF SECTION
ESDREGN  DS    H    OVERLAY REGION NUMBER OF SECTION
ESDSIGN  DS    CL8  INTERFACE SIGNATURE
ESDAUTOC DS    BL1  AUTOCALL SPEC. APPLIES TO REFERENCES
ESDNVRCL EQU   X'80'      NEVERCALL WAS SPECIFIED
ESDMINOR EQU   X'40'      AUTOCALLED FROM LPA
ESDSTAT  DS    BL1  STATUS
ESDRESLV EQU   X'80'      SYMBOL IS RESOLVED
ESDACPRC EQU   X'40'      PROCESSED BY AUTOCALL
ESDINCLD EQU   X'20'      INCLUDE ATTEMPTED
ESDNOTFD EQU   X'10'      MEMBER NOT FOUND
ESDEXTRN EQU   X'08'      RESOLVED OUTSIDE MODULE
ESDNOCAL EQU   X'04'      NOCALL/NEVERCALL
ESDNOREF EQU   X'02'      NO STRONG REFERENCES
ESDLIBRY EQU   X'01'      SPECIAL CALL LIBRARY REQUESTED
ESDTGTL  DS    H    LENGTH OF THE TARGET.
ESDTGTP  DS    A    POINTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR
*                      EXTERNAL REFERENCES.
         DS    H
ESDCNTCL DS    H    LENGTH OF THE CLASS
ESDCNTCP DS    A    POINTS TO NAME OF CONTAINING CLASS
ESDELOFF DS    F    OFFSET WITHIN THE CLASS ELEMENT
ESDCLOFF DS    F    OFFSET WITHIN THE CLASS SEGMENT
         DS    H
ESDADAL  DS    H    ASSOCIATED DATA LENG
ESDADAP  DS    A    POINTS TO ASSOCIATED DATA
         DS    F
ESDPRTY  DS    F    BINDING SEQUENCE
ESDNTEND DS    0F
***********************************************************************
* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *
* RELOCATION DICTIONARY (RLD) BUFFER:                                 *
*    RLDHEADR DESCRIBES THE BUFFER HEADER.                            *
*    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.       *
***********************************************************************
RLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER             @04A
RLDHBUFI DS    CL8  BUFFER EYECATCHER.                             @04A
RLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS            @04A
RLDHVER  DS    AL1  VERSION OF BUFFER.                             @04A
         DS    XL3                                                 @04A
RLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                   @04A
RLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THIS BUFFER
RLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA.             @04A
RLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.             @04A
RLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                 @04A
*                                                                  @04A
RLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLDHENTC TIMES
RLD_TYPE DS     XL1  ADCON TYPE.                                   @04A
*        EQU   X'10' BRANCH TYPE (V-CON)                           @04A
*        EQU   X'20' NON-BRANCH TYPE (A-CON)                       @04A
*        EQU   X'21' ADDRESS OF CLASS SEGMENT                      @04A
*        EQU   X'30' PSEUDOREGISTER (Q-CON)                        @04A
*        EQU   X'40' CLASS OR PRV LENGTH (CXD)                     @04A
*        EQU   X'50' LOADER TOKEN                                  @04A
*        EQU   X'60' RELATIVE IMMEDIATE TYPE                       @04A
*        EQU   X'70' REFERENCE TO ENVIRONMENT                      @04A
*        EQU   X'80' LONG_DISPLACEMENT 20-BIT DL/DH OFFSET (QY-CON)@04A
RLD_STAT DS    XL1  ADCON RELOCATION STATUS.                       @04A
*        EQU   X'01' REFERENCES AN UNRESOLVED SYMBOL               @04A
*        EQU   X'02' REFERENCES A RESOLVED SYMBOL                  @04A
*        EQU   X'03' REFERENCES A NONRELOCATABLE SYMBOL            @04A
RLD_RESIDENT_CHARS  DS H   LENGTH OF THE RESIDENT.                 @04A
RLD_RESIDENT_PTR    DS A   POINTER TO NAME OF SECTION (ADCON)      @04A
RLD_ADCON_LENG      DS H   ADCON LENGTH                            @04A
RLD_CLASS_CHARS     DS H   LENGTH OF THE RESIDENT CLASS NAME       @04A
RLD_CLASS_PTR       DS A   POINTS TO NAME OF CLASS WHERE ADCON RESIDES
RLD_ELEM_OFFSET     DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A
*                          THE CONTAINING ELEMENT                  @04A
*                          RLDRESPL=0: ELEMENT; RLDRESPL>0: PART   @04A
RLD_CLASS_OFFSET    DS A   OFFSET OF THE ADDRESS CONSTANT WITHIN   @04A
*                          CLASS SEGMENT                           @04A
RLDADCNB            DS XL1  ADCON BOUNDARY SPECIFICATION.          @04A
RLD_BIND_ATTR       DS BL1  BIND ATTRIBUTES                        @04A
RLDDIRS       EQU   X'80'   RELOCATION SIGN: '0' = POS; '1' = NEG  @04A
RLDHOBST      EQU   X'40'   SET HIGH ORDER BIT FROM AMODE OF TARGET@04A
RLDINTXT      EQU   X'20'   INTERNAL/EXTERNAL: '0' = INT; '1' = EXT@04A
RLDHOBCH      EQU   X'10'   HIGH ORDER BIT CHANGED BY BINDER       @04A
RLDPARTR      EQU   X'08'   ADCON LOCATED IN PART                  @04A
RLD_XATTR_CLASS_CHARS DS H  LENGTH OF EXTENDED ATTR CLASS NAME     @04A
RLD_XATTR_CLASS_PTR   DS A  POINTER TO EXTENDED ATTR CLASS NAME    @04A
RLD_XATTR_OFFSET      DS F  EXTENDED ATTRIBUTES ELEMENT OFFSET     @04A
RLD_NAME_SPACE        DS X  NAME SPACE OF REFERENCE                @04A
*             EQU   X'00' TYPES 21, 40                             @04A
*             EQU   X'01'    EXTERNAL REFERENCE (10, 20)           @04A
*             EQU   X'02'    PSEUDOREGISTERS (30)                  @04A
*             EQU   X'03'    PARTS (PR,PD) IN WRITEABLE STATIC     @04A
                      DS X  RESERVED                               @04A
RLD_TARGET_CHARS      DS H  LENGTH OF THE TARGET NAME              @04A
RLD_TARGET_PTR        DS A  POINTER TO NAME STRING TO WHICH ADCON PTR
                      DS XL2  RESERVED                             @04A
RLD_RES_PART_CHARS    DS H  RESIDENT PART LENGTH                   @04A
RLD_RES_PART_PTR      DS A  RESIDENT PART POINTER                  @04A
RLDEND                DS 0F                                        @04A
***********************************************************************
* THE TWO FOLLOWING DSECT DESCRIBES THE CONTENT OF AN IEWBUFF         *
* TEXT BUFFER                                                         *
***********************************************************************
TXTHEADR DSECT ,    DESCRIBE THE IEWBUFF TEXT BUFFER HEADER
TXTHBUFI DS    CL8  BUFFER EYECATCHER.
TXTHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS
TXTHVER  DS    AL1  VERSION OF BUFFER.
         DS    AL3
TXTHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.
TXTHENTC DS    F    NUMBER TEXT BYTES CONTAINED IN THIS BUFFER
TXTHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.
TXTHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.
TXTHEND  DS    0F   BEGINNING OF TEXT AREA
*
TXTENTRY DSECT ,    DESCRIBES TEXT AREA
TXTBYTE  DS    0C   TEXT BYTE. OCCURS TXTHENTC TIMES
*
HDISASM   CSECT
*
RLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE
RLDENT   DS    0CL20                   11 BYTE ENTRIES
RLDRP    DS    XL2                     RELOCATION POINTER
RLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)
RLDTYPE  DS    XL1                     TYPE
*                    00=A-TYPE ADCON 4 BYTES
*                    01=V-TYPE ADCON 4 BYTES
*                    02=PSEUDO REGISTER DISPLACEMENT
*                    03=PSEUDO REG CUMULATIVE DISPL
*                    04=V-TYPE ADCON 8 BYTES
*                    08=UNRESOLVED
RLDLEN   DS    XL1                     LENGTH OF CONSTANT
RLDDIR   DS    CL1                     RELOCATION DIRECTION, + OR
RLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT
RLDNAME  DS    CL8                     NAME FROM ASSOC ESD
RLDESDTP DS    XL1                     TYPE FROM ASSOC ESD
         DS    XL1
HDISASM   CSECT
*
*
*
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL19                   19 BYTE ENTRIES
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYPSYM   DS    XL1                     SYMBOL TYPE
*                        00=SD (NAMED CSECT)
*                        02=ER (EXTRN)
*                        03=LR (ENTRY)
*                        04=PC (UNNAMED CSECT)
*                        05=CM (COM)
*                        06=PR (PSEUDO REGISTER)
*                        07=NULL
*                        0A=WX (WXTRN)
*                        0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR
*                        BIT 0 = MAP
*                        BIT 1 = CHAIN
*                        BIT 2 = INSERT
*                        BIT 3 = DELETE/REPLACE
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMARMOD DS    XL1                     AMODE/RMODE
*                       X'08' - RSECT; READ ONLY IF ON
*                       X'04' - RMODE; ANY IF ONE, 24 IF 0
*                       X'03' - AMODE 00,01 = 24, 10 = 31, 11 = ANY
SYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)
SYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
*                        0 FOR ER, WX, NULL
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
         YREGS
         END

