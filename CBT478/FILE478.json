{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012138000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE478.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE478.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0e'", "DS1TRBAL": "b'e\\xde'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x80\\x00\\r\\x03\\x81\\x00\\x00\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x06_\\x01\\x02\\x06_\\t8\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-06T00:00:00", "modifydate": "2002-03-06T09:38:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 443    FILE:  478\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT443.FILE478\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 268 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/06/02    09:38:26    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RAWSDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x06_\\x01\\x02\\x06_\\t5\\x00G\\x00G\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-06T00:00:00", "modifydate": "2002-03-06T09:35:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "JJAEGER"}, "text": "Reverse AWSTAPE utility\n\nThis utility converts an AWS type file back to a blocked\nOS dataset, such that the original blocking is restored.\n\nAs an AWS file does not contain DCB parameters,\nthis utility will ++NOT++ restore the original DCB\nparameters, these will have to be added manually with\nan utility such as IEBGENER.\n\n\n\nUsage:\n\nUpload AWS file to OS/390 or z/OS in binary format,\ndo no use cr/lf or any other blocking feature, when\ndoing filetransfer.\n\nUpload to a RECFM=U dataset, either pre-allocated,\nor allocated using IND$FILE.  BLKSIZE=4096 is reasonable,\nbut any other blocksize will do.\n\nAn AWS tape file can consist of more then 1 file, and as such\nthe filenumber of the tape must be specifed.  This filenumber\nis equal to the value used when reading a tape with bypass\nlabel processing (BLP). Thus, on a labeled tape file 1 will\nalways be the VOL1 record.\n\nRun rawstape with SYSUT1 pointing to AWS input file, and\nSYSUT2 to the output file, for example copying a\nstandalone dump tape:\n\n//CONVERT  EXEC PGM=RAWSTAPE,PARM=3\n//STEPLIB  DD  DSN=IBMUSER.LOAD,DISP=SHR\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=IBMUSER.SADUMP.AWS\n//SYSUT2   DD  DSN=IBMUSER.SADUMP,DISP=(NEW,CATLG),\n//          UNIT=SYSALLDA,SPACE=(TRK,1200,RLSE)\n\nAfter which the IBMUSER.SADUMP contains the correct data, but\nstill has invalid DCB parameters in the DSCB, these can be\ncorrected with IEBGENER as following:\n\n//SETDCB   EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DUMMY,\n//          DCB=(DSORG=PS,RECFM=FBS,LRECL=4160,BLKSIZE=29120)  <===\n//SYSUT2   DD  DISP=MOD,DCB=(*.SYSUT1),DSN=IBMUSER.SADUMP\n\nPlease note the DCB parameter, you will need to set this\nto the right DCB parameters for the dataset you are restoring.\n\n\n\nSample job to Assemble and link-edit RAWSTAPE:\n\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSIN    DD  DISP=SHR,DSN=IBMUSER.SOURCE(RAWSTAPE)   <===\n//IEWL     EXEC PGM=IEWL\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=IBMUSER.LOAD(RAWSTAPE),DISP=SHR   <===\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE478": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x000\\x00\\x99\\x08?\\x01\\x02\\x06O\\x02(\\x00\\x14\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2002-03-05T02:28:30", "lines": 20, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 478 is from Jan Jaeger and contains the RAWSTAPE program  *   FILE 478\n//*           which converts tape files from AWSTAPE format to      *   FILE 478\n//*           something more normal.                                *   FILE 478\n//*                                                                 *   FILE 478\n//*              RAWSTAPE - Convert file from AWSTAPE format        *   FILE 478\n//*                                                                 *   FILE 478\n//*           Function:                                             *   FILE 478\n//*                                                                 *   FILE 478\n//*              This program converts an AWSTAPE format file       *   FILE 478\n//*              to RECFM=U.  SYSUT1 is converted reblocked         *   FILE 478\n//*              according to the AWS header records.  The          *   FILE 478\n//*              blocksize of SYSUT2 can be reset using             *   FILE 478\n//*              IEBGENER.  The parm field indicates the            *   FILE 478\n//*              filenumber to be extracted, this number has        *   FILE 478\n//*              the same value as when using BLP in JCL.           *   FILE 478\n//*                                                                 *   FILE 478\n//*           Note:  Also see the VTT2TAPE program on File 533,     *   FILE 478\n//*                  to cut a real tape from an AWS-format tape     *   FILE 478\n//*                  on any MVS system.  (SG)                       *   FILE 478\n//*                                                                 *   FILE 478\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RAWSTAPE": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x11\\x02\\x00\\xa5\\x00\\xa5\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T11:02:00", "lines": 165, "newlines": 165, "modlines": 0, "user": "JJAEGER"}, "text": "//IBMUSERA JOB ACCT,'JAN JAEGER',NOTIFY=IBMUSER,CLASS=A,MSGCLASS=X\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\nRAWSTAPE TITLE 'Convert file from AWSTAPE format'\n*---------------------------------------------------------------------*\n* Function:                                                           *\n*        This program converts an AWSTAPE format file to RECFM=U      *\n*        SYSUT1 is converted reblocked according to the AWS           *\n*        header records.  The blocksize of SYSUT2 can be reset        *\n*        using IEBGENER                                               *\n*        The parm field indicates the filenumber to be extracted,     *\n*        this number has the same value as when using BLP in JCL.     *\n*---------------------------------------------------------------------*\nRAWSTAPE CSECT\n         LR    R12,R15                  Load base register\n         USING RAWSTAPE,R12             Establish addressability\n         L     R2,0(,R1)                PARM=\n         LH    R3,0(,R2)                L'PARM\n         LTR   R3,R3\n         BZ    NOPARM                   No parm field\n         BCTR  R3,0                     Reduce to Machine length\n         EX    R3,EXPACK\n         CVB   R3,DWORD\n         ST    R3,FILENUM               Filenumber to be read\nNOPARM   DS    0H\n         OPEN  (SYSUT1,INPUT)           Open input DCB\n         TM    SYSUT1+48,X'10'          Is DCB open?\n         BZ    EXIT020                  No, exit with RC=20\n         OPEN  (SYSUT2,OUTPUT)          Open output DCB\n         TM    SYSUT2+48,X'10'          Is DCB open?\n         BZ    EXIT020                  No, exit with RC=20\n         LA    R2,BUFFER\n         SLR   R3,R3                    Total number of bytes in buffer\n         LA    R5,1                     We start at file 1\nREADBLK  DS    0H\n         LA    R2,BUFFER(R3)\n         GET   SYSUT1,(2)               Get input block\n         AH    R3,SYSUT1+82             R3=total bytes in buffer\nGETNEXT  DS    0H\n         CH    R3,=Y(L'HEADER)          Do we at least have the header\n         BM    READBLK\n         TM    HDRFLAG1,HDRF1TMK        Take mark?\n         BZ    NOEOF\n         LA    R5,1(,R5)                Increment file number\n         C     R5,FILENUM               Beyond requested file?\n         BH    EXIT000\nNOEOF    DS    0H\n         SLR   R4,R4                    Logical block length\n         ICM   R4,B'0001',HDRCURLN      Load low-order length byte\n         ICM   R4,B'0010',HDRCURLN+1    Load high-order length byte\n         LA    R1,L'HEADER(,R4)\n         CR    R3,R1                    Full block yet?\n         BM    READBLK                  No: Fetch another\n         C     R5,FILENUM               Is this the file we want?\n         BNE   NOPUT\n         TM    HDRFLAG1,HDRF1BOR+HDRF1EOR\n         BM    EXIT016\n         BNO   NOPUT\n         LA    R2,DATA                  Skip AWS header\n         STH   R4,SYSUT2+82             Store block size\n         PUT   SYSUT2,(2)               Write block\nNOPUT    DS    0H\n         AH    R4,=Y(L'HEADER)          Remove header\n         SLR   R3,R4                    Remove block\n         LA    R2,BUFFER                Back to start\n         LR    R6,R2                    Move remainder to beginning\n         LA    R8,0(R4,R2)              Point past block\n         LR    R7,R3                    Set length\n         LR    R9,R3\n         MVCL  R6,R8                    Move block\n         B     GETNEXT\n*\nEXIT000  DS    0H\n         CLOSE (SYSUT1,,SYSUT2)         Close DCBs\n         SR    R15,R15                  Zeroize return code\n         SVC   3                        Exit with RC=0\nEXIT012  DS    0H\n         LA    R15,12                   Premature EOF\n         SVC   3                        Exit with RC=12\nEXIT016  DS    0H\n         LA    R15,16                   Invalid record type\n         SVC   3                        Exit with RC=16\nEXIT020  DS    0H\n         LA    R15,20                   DD statement missing\n         SVC   3                        Exit with RC=20\n*\n* EXecuted\n*\nEXPACK   PACK  DWORD,2(0,2)\n         DROP  R12                      Drop base register\n*\n* Variables\n*\nFILENUM  DC    F'1'\nDWORD    DS    D\n*\n* Data Control Blocks\n*\n         PRINT NOGEN\nSYSUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=SYSUT1,EODAD=EXIT012,          X\n               RECFM=U,LRECL=0,BLKSIZE=32760\nSYSUT2   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2,                        X\n               RECFM=U,LRECL=0,BLKSIZE=32760\n         LTORG\n*\nBUFFER   DS    0C\n*\n* AWSTAPE block header\n*\nHEADER   DS    0CL6                     Block header\nHDRCURLN DS    XL2                      Current block length\nHDRPRVLN DS    XL2                      Previous block length\nHDRFLAG1 DS    X'00'                    Flags byte 1...\nHDRF1BOR EQU   X'80'                    ...beginning of record\nHDRF1TMK EQU   X'40'                    ...tape mark\nHDRF1EOR EQU   X'20'                    ...end of record\nHDRFLAG2 DS    X'00'                    Flags byte 2\n*\n* Data\n*\nDATA     DS    0C\n         DS    65536C\n*\n* Register equates\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n//IEWL     EXEC PGM=IEWL\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=IBMUSER.LOAD(TEMPNAME),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//*\n//CONVERT  EXEC PGM=*.IEWL.SYSLMOD,PARM=1\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=IBMUSER.SADUMP.AWS\n//SYSUT2   DD  DSN=IBMUSER.SADUMP,DISP=(NEW,CATLG),\n//          UNIT=SYSALLDA,SPACE=(TRK,900,RLSE)\n//*\n//SETDCB   EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DUMMY,\n//          DCB=(DSORG=PS,RECFM=FBS,LRECL=4160,BLKSIZE=29120)\n//SYSUT2   DD  DISP=MOD,DCB=(*.SYSUT1),DSN=IBMUSER.SADUMP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT478/FILE478.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT478", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}