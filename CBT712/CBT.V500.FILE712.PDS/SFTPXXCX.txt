000100 identification division.
000200 program-id.                     sftpxxcx.
000300*author.                         Paul F. Gorlinsky.
000400*                                Horizon Data Systems, Inc.
000500*                                pfg@hds.bz
000600*
000700*date-written.                   2003/03/04.
000800*
000900******************************************************************
001000* This program is used to a file from CICS using the TCP/IP
001100* SOCKET interface. See SFTPXXIX for the lay out of the calling
001200* parameters.
001300*
001400*
001500* External Documentation:
001600* IBM SC31-8807 - publibz.boulder.ibm.com/epubs/pdf/f1a1g110.pdf
001700*     IP CICS Sockets Guide
001800* RFC 959 - //rfc.net/rfc959.html
001900*     File Transfer Protocol
002000* RFC2228 - //rfc.net/rfc2228.html
002100*     FTP Security Extensions
002200* RFC2640 - //rfc.net/rfc2640.html
002300*     Internationalization of the File Transfer Protocol
002400* RFC 854 - //rfc.net/rfc854.html
002500*     Telnet Protocol Specification
002600*
002610* Calling Program Requirements:
002620* - COBOL COPY SFTPXXIX in Linkage Section of this program and
002630*   WORKING STORAGE SECTION of the callers program.
002660* - Set address of sm-text-data to sm-text-ptr
002670* - Build message in sm-text
002680* - Set sm-head-valid, sm-tail-valid and sm-text-valid to true
002690* - Build sm-rcpts, sm-hdr, sm-sender
002691* - Set sm-rcpt-num and sm-text-len appropriate
002692* - CICS LINK to sm-program
002693* - Validate response.
002694*
002695* Current Restrictions:
002696* - Maximum of 10 Recepiants
002697* - Message length 32760 bytes
002698*
002699* CICS TDQ TCPM is used for error messages.
002700*
002701* CICS INITPARM SFTPXXCX is used to turn on additional messages
002702*   for debugging purposes. These message are written using the
002703*   COBOL DISPLAY verb and usually are written to the DDNAME
002704*   CEEMSG.
002705*
002706*   SFTPXXCX='xyzzy'
002707*
002708* The default SOCKET server name of TCPIP is used.
002709*
002710*
002800* CHANGES:  THE FOLLOWING CHANGES HAVE BEEN MADE TO THIS MODULE:
002900*    LOG #  DATE:  COMMENT:
003000*    -----  -----  ----------------------------------------------
003100*
003200*           03/03  NEW CODE
003300*
003400******************************************************************
003500
003600 environment division.
003700
003800 configuration section.
003900 source-computer.                ibm-370.
004000 object-computer.                ibm-370.
004100
004200 special-names.
004300
004400 data division.
004500
004600 working-storage section.
004700 01  filler.
004800     03  filler                       pic x(04) value '****'.
004900     03  ft-local-program-name        pic x(08) value 'sftpxxcx'.
005000     03  filler                       pic x(04) value '****'.
005100
005200 77  one                              pic 9(1) comp-3 value 1.
005300 77  two                              pic 9(1) comp-3 value 2.
005400 77  three                            pic 9(1) comp-3 value 3.
005500 77  four                             pic 9(1) comp-3 value 4.
005600
005700 01  wc-filler.
005800     03  wc-eib-taskn                 pic 9(07).
005900     03  wc-eib-time                  pic 9(07).
006000     03  wc-eib-date                  pic 9(07).
006100     03  wc-eib-trnid                 pic x(04).
006200     03  wc-eib-trmid                 pic x(04).
006300     03  wc-cics-set-ptr              pointer.
006400     03  wc-cics-set-work-ptr         pointer.
006500     03  wc-cics-flength              pic 9(09) binary.
006600     03  wc-cics-length               pic 9(04) binary.
006700     03  wc-cics-item                 pic 9(04) binary.
006800     03  wc-cics-resp                 pic 9(08).
006900     03  wc-cics-resp2                pic 9(08).
007000     03  wc-cics-applid               pic x(08).
007100     03  wc-cics-job-name             pic x(08).
007200     03  wc-cics-td-message           pic x(04) value 'TCPM'.
007300     03  wc-initparm.
007400         05  wc-cics-initparm         pic x(60).
007500         05  wc-cics-initparmlen      pic 9(04) binary.
007600
007700 01  we-filler.
007800     03  we-msg.
007900         05  we-msg-pgm-id            pic  x(08).
008000         05  we-msg-text              pic  x(100).
008100     03  we-h-num                     pic  9(05).
008200     03  we-f-num                     pic  9(09).
008300     03  we-f-num-2                   pic  9(08).
008400
008500 01  wi-filler.
008600     03  wi-idx                       pic  9(01) binary.
008700
008800     03  wi-dotted-ip-addr.
008900         05  wi-dotted-ip-n1          pic  9(03).
009000         05  wi-dotted-ip-n2          pic  9(03).
009100         05  wi-dotted-ip-n3          pic  9(03).
009200         05  wi-dotted-ip-n4          pic  9(03).
009300     03  filler redefines wi-dotted-ip-addr.
009400         05  wi-dotted-ip occurs 4 times pic 9(3).
009500
009600     03  wi-bin-ip-num                pic  9(03) binary.
009700     03  filler redefines wi-bin-ip-num.
009800         05  filler                   pic  x(01).
009900         05  wi-bin-ip-bin            pic  x(01).
010000
010100     03  wi-bin-ip-addr               pic  9(08) binary.
010200     03  filler redefines wi-bin-ip-addr.
010300         05  wi-bin-ip-addr-n1        pic  x(01).
010400         05  wi-bin-ip-addr-n2        pic  x(01).
010500         05  wi-bin-ip-addr-n3        pic  x(01).
010600         05  wi-bin-ip-addr-n4        pic  x(01).
010700     03  filler redefines wi-bin-ip-addr.
010800         05  wi-bin-ip      occurs 4 times pic x.
010900
011000 01  ws-filler.
011100     03  filler                       pic x(1).
011200         88 ws-done              value 'D'.
011300         88 ws-not-done          value x'ff'.
011400
011500     03  filler                       pic x(1).
011600         88 ws-num-fnd           value 'N'.
011700         88 ws-not-num-fnd       value x'ff'.
011800
011900     03  ws-fnd-comma                 pic 9(01).
012000
012100     03  ws-date                      pic x(32).
012200
012300     03  ws-pasv-resp                 pic x(30).
012400
012500     03  ws-unstring-work             pic x(255).
012600
012700     03  ws-initparm-1                pic x(60).
012800     03  ws-initparm-2                pic x(60).
012900
013000     03  ws-debug-secret-word         pic x(5).
013100         88 ws-default-debug     value spaces.
013200         88 ws-debug-on          value 'XYZZY'.
013300
013400     03  ws-crlf-null                 pic x(3) value x'0d2500'.
013500     03  filler redefines ws-crlf-null.
013600         05 ws-crlf                   pic x(2).
013700         05 filler redefines ws-crlf.
013800            07  ws-cr                 pic x(1).
013900            07  ws-lf                 pic x(1).
014000         05 ws-null                   pic x(1).
014100     03  ws-sub                       pic x(1) value x'3f'.
014200
014300     03  ws-str-ptr                   pic s9(4) value +1.
014400         88  ws-str-ptr-initial       value +1.
014500
014600     03  ws-idx                       pic  9(9) binary.
014700
014800     03  ws-loop-cnt                  pic  9(4) binary.
014900
015000     03  ws-str-len                   pic  9(8) binary.
015100
015200     03  ws-clnt-host-dotted-ip         pic x(15).
015300     03  ws-clnt-host-ip                pic 9(08) binary.
015400     03  ws-clnt-hostname               pic x(255).
015500     03  ws-clnt-hostname-len           pic 9(03) packed-decimal.
015600
015700     03  ws-p1                            pic 9(3).
015800     03  ws-p1-x redefines ws-p1          pic X(3).
015900     03  ws-p2                            pic 9(3).
016000     03  ws-p2-x redefines ws-p2          pic X(3).
016100
016200     03  ws-recv-data-len             pic  9(8) binary.
016300 01  ws-data-area                     pic x(32763).
016400 01  ws-data-area-idx                 pic  9(8) binary.
016500 01  ws-data-area-len                 pic  9(8) binary.
016600
016700 01  ws-work-area                     pic x(32763).
016800
016900 01  ws-dblk-area                     pic x(32763).
017000
017100 01  wz-soc-function                  pic x(16).
017200     88  wz-soc-fun-is-initapi     value 'INITAPI         '.
017300     88  wz-soc-fun-is-socket      value 'SOCKET          '.
017400     88  wz-soc-fun-is-connect     value 'CONNECT         '.
017500     88  wz-soc-fun-is-shutdown    value 'SHUTDOWN        '.
017600     88  wz-soc-fun-is-read        value 'READ            '.
017700     88  wz-soc-fun-is-write       value 'WRITE           '.
017800     88  wz-soc-fun-is-close       value 'CLOSE           '.
017900     88  wz-soc-fun-is-gethostid   value 'GETHOSTID       '.
018000     88  wz-soc-fun-is-ghba        value 'GETHOSTBYADDR   '.
018100     88  wz-soc-fun-is-ghbn        value 'GETHOSTBYNAME   '.
018200
018300 01  wz-soc-initapi          pic x(16) value 'INITAPI         '.
018400 01  wz-soc-socket           pic x(16) value 'SOCKET          '.
018500 01  wz-soc-connect          pic x(16) value 'CONNECT         '.
018600 01  wz-soc-shutdown         pic x(16) value 'SHUTDOWN        '.
018700 01  wz-soc-read             pic x(16) value 'READ            '.
018800 01  wz-soc-write            pic x(16) value 'WRITE           '.
018900 01  wz-soc-close            pic x(16) value 'CLOSE           '.
019000 01  wz-soc-get-host-id      pic x(16) value 'GETHOSTID       '.
019100 01  wz-soc-get-host-by-addr pic x(16) value 'GETHOSTBYADDR   '.
019200 01  wz-soc-get-host-by-name pic x(16) value 'GETHOSTBYNAME   '.
019300
019400 01  wz-errno                         pic 9(08) binary.
019500     88  wz-all-epipe              value 32.
019600     88  wz-initapi-ok             value 10197, 0.
019700     88  wz-connect-reset          value 54.
019800     88  wz-already-connected      value 56.
019900     88  wz-connect-timedout       value 60.
020000     88  wz-connect-refused        value 61.
020100     88  wz-write-less-than-one    value 10184, 10186.
020200     88  wz-read-less-than-one     value 10159.
020300     88  wz-gethost-hostent-bad    value 10214.
020400 01  wz-errno-2                       pic 9(08) binary.
020500
020600 01  wz-cmd--rc                       pic s9(8) binary.
020700     88  wz-cmd--rc-ok             value +0.
020800     88  wz-cmd--rc-okay           value +0.
020900     88  wz-cmd--rc-not-ok         value -1.
021000     88  wz-cmd--rc-not-okay       value -1.
021100     88  wz-cmd--rc-nak            value -4.
021200
021300 01  wz-data-rc                       pic s9(8) binary.
021400     88  wz-data-rc-ok             value +0.
021500     88  wz-data-rc-okay           value +0.
021600     88  wz-data-rc-not-ok         value -1.
021700     88  wz-data-rc-not-okay       value -1.
021800     88  wz-data-rc-nak            value -4.
021900
022000 01  wz-soc-maxsoc                    pic s9(4) binary.
022100     88  wz-default-maxsoc         value 100.
022200
022300 01  wz-soc-host-ip                   pic 9(08) binary.
022400
022500 01  wz-soc-hostname                  pic X(255).
022600
022700 01  wz-soc-ident.
022800     03  wz-soc-tcpname               pic x(08).
022900         88  wz-default-tcpname    value 'TCPIP'.
023000     03  wz-soc-adsname               pic x(08).
023100
023200 01  wz-soc-name.
023300     03  wz-soc-name-family           pic 9(4) binary.
023400         88  wz-default-family     value 2.
023500     03  wz-soc-name-port             pic 9(4) binary.
023600         88  wz-default-cmd--port  value 21.
023700         88  wz-default-data-port  value 22.
023800     03  wz-soc-name-ip               pic 9(8) binary.
023900     03  wz-soc-name-ip-x redefines
024000         wz-soc-name-ip               pic x(4).
024100     03  wz-soc-name-rsvd             pic x(8).
024200
024300 01  wz-soc-subtask                   pic x(08).
024400 01  filler redefines wz-soc-subtask.
024500     03  wz-soc-subtask-eibtaskn      pic 9(07).
024600     03  wz-soc-subtask-char          pic x(01).
024700
024800 01  wz-soc-maxsno                    pic 9(08) binary.
024900     88  wz-default-maxsno         value 99.
025000
025100*           addressing family
025200 01  wz-soc-af                        pic 9(08) binary.
025300     88  wz-default-af             value 2.
025400     88  wz-soc-af-inet            value 2.
025500
025600 01  wz-soc-type                      pic 9(08) binary.
025700     88  wz-default-soctype        value 1.
025800     88  wz-soc-soctype-stream     value 1.
025900     88  wz-soc-soctype-datagram   value 2.
026000     88  wz-soc-soctype-raw        value 3.
026100
026200 01  wz-soc-proto                     pic 9(08) binary.
026300     88  wz-default-proto          value 0.
026400
026500 01  wz-soc-ghbn-hostname             pic x(255).
026600 01  wz-soc-ghbn-namelen              pic 9(08) binary.
026700 01  wz-soc-ghbn-hostent              pic 9(08) binary.
026800
026900 01  wz-soc-ghba-host-ip              pic 9(08) binary.
027000 01  wz-soc-ghba-hostent              pic 9(08) binary.
027100
027200 01  wz-c08-hostent-addr              pic 9(08) binary.
027300 01  wz-c08-hostname-len              pic 9(04) binary.
027400 01  wz-c08-hostname                  pic X(255).
027500 01  wz-c08-hostalias-cnt             pic 9(04) binary value 0.
027600 01  wz-c08-hostalias-seq             pic 9(04) binary value 0.
027700 01  wz-c08-hostalias-len             pic 9(04) binary value 0.
027800 01  wz-c08-hostalias                 pic x(255).
027900 01  wz-c08-host-ip-type              pic 9(04) binary.
028000 01  wz-c08-host-ip-len               pic 9(04) binary.
028100 01  wz-c08-host-ip-cnt               pic 9(04) binary.
028200 01  wz-c08-host-ip-seq               pic 9(04) binary value 0.
028300 01  wz-c08-host-ip                   pic 9(08) binary.
028400
028500 01  wz-soc-data-s                    pic 9(04) binary.
028600 01  wz-soc-cmd--s                    pic 9(04) binary.
028700
028800 01  wz-soc-work-buffer               pic x(4096).
028900 01  wz-soc-read-cnt                  pic 9(04) binary.
029000
029100 01  wz-soc-line-buffer               pic x(4096).
029200 01  wz-soc-line-cnt                  pic 9(04) binary.
029300
029400 01  wz-soc-read-buffer               pic x(4096).
029500 01  wz-soc-read-nbyte                pic 9(08) binary.
029600     88 wz-soc-read-max            value 4096.
029700
029800 01  wz-soc-write-buffer              pic x(4096).
029900 01  wz-soc-write-nbyte               pic 9(08) binary.
030000 01  wz-soc-write-max                 pic 9(08) binary
030100                                   value 4096.
030200
030300 01  wz-crlf00                        pic x(03) value x'0d0a00'.
030400 01  filler    redefines wz-crlf00.
030500     02 wz-crlf                       pic x(02).
030600     02 filler redefines wz-crlf.
030700        03 wz-cr                      pic x(01).
030800        03 wz-lf                      pic x(01).
030900     02 wz-null                       pic x(01).
031000 01  wz-sub                           pic x(01) value x'1a'.
031100
031200 01  wzz-soc-fun-is-shutdown          pic x(16) value 'SHUTDOWN'.
031300 01  wzz-soc-shutdown-s               pic 9(04) binary.
031400 01  wzz-soc-shutdown-how             pic 9(08) binary.
031500     88  wzz-shutdown-end-from     value 0.
031600     88  wzz-shutdown-end-to       value 1.
031700     88  wzz-shutdown-end-both     value 2.
031800 01  wzz-errno                        pic 9(08) binary.
031900 01  wzz-retcode                      pic s9(8) binary.
032000     88  wzz-retcode-ok            value +0.
032100     88  wzz-retcode-okay          value +0.
032200     88  wzz-retcode-not-ok        value -1.
032300     88  wzz-retcode-not-okay      value -1.
032400
032500 01  filler.
032600     03  filler                      pic  x(04) value '****'.
032700     03  filler                      pic  x(08) value 'end  w/s'.
032800     03  filler                      pic  x(04) value '****'.
032900     eject
033000 linkage section.
033100 01  filler                          pic x.
033200     COPY  SFTPXXIX.
033300     eject
033400 procedure division.
033500
033600     perform 1000-initialize thru
033700             1000-initialize-exit
033800
033900     perform 2000-init-tcpip-data thru
034000             2000-init-tcpip-data-exit
034100
034200     perform 2100-obtain-socket thru
034300             2100-obtain-socket-exit
034400
034500     perform 2200-connect-to-server thru
034600             2200-connect-to-server-exit
034700
034800     perform 3000-move-data thru
034900             3000-move-data-exit
035000
035100     perform 4000-close-socket thru
035200             4000-close-socket-exit
035300
035400     if ws-debug-on
035500         move '================='
035600           to we-msg-text
035700         call 'tcpmessage' using we-msg
035800         move ' '
035900           to we-msg-text
036000         call 'tcpmessage' using we-msg
036100     end-if
036200
036300     exec cics return
036400     end-exec
036500
036600     goback
036700     .
036800
036900 1000-initialize.
037000
037100     move ft-local-program-name
037200       to we-msg-pgm-id
037300
037400     if eibcalen = length of ft-parms
037500         set address of ft-parms
037600          to address of dfhcommarea
037700         if ft-head-valid and ft-tail-valid
037800             set ft-resp-okay to true
037900
038000             if ft-trans-dir-valid   and
038100                ft-trans-type-valid  and
038200                ( (ft-src-valid-ts-q and ft-valid-queue-disp) or
038300                  (ft-send-ptr       and ft-send-file)
038400                ) and
038500                ( (ft-send-file      and ft-src-valid-send)   or
038600                  (ft-recv-file      and ft-src-valid-recv)
038700                )
038800                 if ft-send-ptr
038900                     set address of ft-data-area
039000                      to ft-data-ptr
039100                     if ft-data-valid
039200                         continue
039300                     else
039400                         set ft-resp-parm-error to true
039500                     end-if
039600                 end-if
039700
039800                 if ft-recv-file and
039900                    ft-binary-transfer and
040000                    ft-ts-recv-bin-rec-size < one
040100                     set ft-dflt-bin-rec-size to true
040200                 end-if
040300
040400                 compute ft-num-bytes-trans = zero
040500
040600                 call 'GETDATE' using ws-date
040700
040800                 initialize wz-soc-cmd--s,
040900                            wz-soc-data-s,
041000                            wz-soc-subtask,
041100                            wz-soc-name,
041200                            wz-soc-ident,
041300                            wz-soc-line-cnt,
041400                            wz-cmd--rc,
041500                            wz-data-rc,
041600                            wz-errno
041700
041800                 exec cics inquire system
041900                      jobname (wc-cics-job-name)
042000                      nohandle
042100                 end-exec
042200
042300                 exec cics assign
042400                      applid (wc-cics-applid)
042500                      initparm (wc-cics-initparm)
042600                      initparmlen (wc-cics-initparmlen)
042700                      nohandle
042800                 end-exec
042900
043000                 move length of ft-user-name
043100                   to ws-str-len
043200                 call 'RMVWHTSP' using ft-user-name, ws-str-len
043300
043400                 move length of ft-password
043500                   to ws-str-len
043600                 call 'RMVWHTSP' using ft-password, ws-str-len
043700
043800                 move length of ft-account
043900                   to ws-str-len
044000                 call 'RMVWHTSP' using ft-account, ws-str-len
044100
044200                 move length of ft-srvr-hostname
044300                   to ws-str-len
044400                 call 'RMVWHTSP' using ft-srvr-hostname
044500                                       ws-str-len
044600                 compute ft-srvr-hostname-len = ws-str-len
044700
044800                 move length of ft-file-name
044900                   to ws-str-len
045000                 call 'RMVWHTSP' using ft-file-name, ws-str-len
045100
045200                 perform 7000-get-host-ip thru
045300                         7000-get-host-ip-exit
045400
045500                 move wz-soc-host-ip
045600                   to wz-soc-ghba-host-ip,
045700                      ws-clnt-host-ip
045800
045900                 perform 7100-get-host-by-addr thru
046000                         7100-get-host-by-addr-exit
046100
046200                 move wz-c08-hostname (one:wz-c08-hostname-len)
046300                   to wz-soc-hostname,
046400                      ws-clnt-hostname
046500                 move wz-c08-hostname-len
046600                   to ws-clnt-hostname-len
046700                 perform 1050-process-initparm thru
046800                         1050-process-initparm-exit
046900
047000                 if ws-debug-on
047100                     move '-----------------'
047200                       to we-msg-text
047300                     call 'tcpmessage' using we-msg
047400                     string  '* I:**> '
047500                             ws-date
047600                             ' ** '
047700                             wc-cics-applid
047800                             ' ** '
047900                             wc-cics-job-name
048000                             ' <'
048100                             delimited by size
048200                             into we-msg-text
048300                     end-string
048400                     call 'tcpmessage' using we-msg
048500                     string  '* I: Host Name: '
048600                             ws-clnt-hostname(1:80)
048700                             delimited by size
048800                             into we-msg-text
048900                     end-string
049000                     call 'tcpmessage' using we-msg
049100                 end-if
049200
049300                 perform 1060-process-dest thru
049400                         1060-process-dest-exit
049500             else
049600                 set ft-resp-parm-error to true
049700             end-if
049800         else
049900             exec cics abend
050000                       abcode('FTPC')
050100                       cancel
050200                       nodump
050300             end-exec
050400         end-if
050500     else
050600         exec cics abend
050700                   abcode('FTPL')
050800                   cancel
050900                   nodump
051000         end-exec
051100     end-if
051200     .
051300 1000-initialize-exit. exit.
051400
051500 1050-process-initparm.
051600     move low-values    to ws-debug-secret-word,
051700                           ws-initparm-2
051800
051900     if  wc-cics-initparmlen > zero
052000         unstring wc-cics-initparm
052100                  delimited by ',' or ' ' or ws-null
052200                  into ws-debug-secret-word
052300                       ws-initparm-2
052400         end-unstring
052500
052600     else
052700         set ws-default-debug to true
052800     end-if
052900     .
053000 1050-process-initparm-exit. exit.
053100
053200 1060-process-dest.
053300     if ft-srvr-host-ip = zero
053400         unstring ft-srvr-host-dotted-ip
053500                  delimited by '.' or ' ' or ws-null
053600                  into wi-dotted-ip (1)
053700                       wi-dotted-ip (2)
053800                       wi-dotted-ip (3)
053900                       wi-dotted-ip (4)
054000         end-unstring
054100         perform
054200           test after
054300           varying wi-idx from one by one
054400           until wi-idx = four
054500             if wi-dotted-ip (wi-idx) is numeric
054600                 move wi-dotted-ip (wi-idx)
054700                   to wi-bin-ip-num
054800                 move wi-bin-ip-bin
054900                   to wi-bin-ip (wi-idx)
055000             else
055100                 compute wi-bin-ip-addr = zero
055200                 compute wi-idx = four
055300             end-if
055400         end-perform
055500
055600         if wi-bin-ip-addr > zero
055700             if ft-srvr-hostname-len = zero
055800                 move wi-bin-ip-addr
055900                   to ft-srvr-host-ip
056000             else
056100                 set ft-resp-dotted-hostname-err
056200                  to true
056300             end-if
056400         else
056500             if ft-srvr-hostname-len > zero
056600                 move ft-srvr-hostname
056700                   to wz-soc-ghbn-hostname
056800                 move ft-srvr-hostname-len
056900                   to wz-soc-ghbn-namelen
057000                 perform 7200-get-host-by-name thru
057100                         7200-get-host-by-name-exit
057200                 move wz-c08-host-ip
057300                   to ft-srvr-host-ip
057400             else
057500                 set ft-resp-dotted-hostname-err
057600                  to true
057700             end-if
057800         end-if
057900     else
058000         continue
058100     end-if
058200     if not ft-resp-dotted-hostname-err
058300         if not ft-valid-cmd--port
058400             if ft-srvr-cmd--port = zero
058500                 set ft-srvr-dflt-cmd--port
058600                  to true
058700             else
058800                 set ft-resp-port-error
058900                  to true
059000             end-if
059100         else
059200             continue
059300         end-if
059400     else
059500         continue
059600     end-if
059700     .
059800 1060-process-dest-exit. exit.
059900
060000 2000-init-tcpip-data.
060100     if ft-resp-okay
060200         set wz-default-maxsoc
060300             wz-default-tcpname
060400             wz-default-maxsno
060500             wz-default-af
060600             wz-default-family
060700             wz-default-cmd--port
060800             wz-default-soctype
060900             wz-default-proto
061000          to true
061100
061200         move ft-srvr-cmd--port
061300           to wz-soc-name-port
061400
061500         move wc-cics-applid
061600           to wz-soc-adsname
061700
061800         move ft-srvr-host-ip
061900           to wz-soc-name-ip
062000
062100         move eibtaskn to wz-soc-subtask-eibtaskn
062200         move 'C'  to wz-soc-subtask-char
062300         move zero to wz-cmd--rc, wz-errno
062400     else
062500         set wz-cmd--rc-not-ok to true
062600     end-if
062700     .
062800 2000-init-tcpip-data-exit. exit.
062900
063000 2100-obtain-socket.
063100     if wz-cmd--rc-ok
063200         set wz-soc-fun-is-initapi to true
063300         call 'EZACICSO' using wz-soc-initapi
063400                               wz-soc-maxsoc
063500                               wz-soc-ident
063600                               wz-soc-subtask
063700                               wz-soc-maxsno
063800                               wz-errno
063900                               wz-cmd--rc
064000
064100         if wz-initapi-ok
064200             set wz-soc-fun-is-socket to true
064300             call 'EZACICSO' using wz-soc-socket
064400                                   wz-soc-af
064500                                   wz-soc-type
064600                                   wz-soc-proto
064700                                   wz-errno
064800                                   wz-cmd--rc
064900             if wz-cmd--rc >= zero
065000                 compute wz-soc-cmd--s = wz-cmd--rc
065100                 compute wz-cmd--rc = zero
065200                 move 'D' to wz-soc-subtask-char
065300                 call 'EZACICSO' using wz-soc-socket
065400                                       wz-soc-af
065500                                       wz-soc-type
065600                                       wz-soc-proto
065700                                       wz-errno
065800                                       wz-data-rc
065900                 if wz-data-rc >= zero
066000                     compute wz-soc-data-s = wz-data-rc
066100                     compute wz-data-rc = zero
066200                 else
066300                     set ft-resp-obtain-data-error to true
066400                 end-if
066500             else
066600                 set ft-resp-obtain-error to true
066700             end-if
066800         else
066900             set ft-resp-initapi-error to true
067000         end-if
067100     else
067200         continue
067300     end-if
067400     .
067500 2100-obtain-socket-exit. exit.
067600
067700 2200-connect-to-server.
067800     if wz-cmd--rc-ok
067900         set wz-soc-fun-is-connect to true
068000         call 'EZACICSO' using wz-soc-connect
068100                               wz-soc-cmd--s
068200                               wz-soc-name
068300                               wz-errno
068400                               wz-cmd--rc
068500         if wz-cmd--rc-ok
068600             perform 6000-read-until-empty thru
068700                     6000-read-until-empty-exit
068800             if ip-rc-220-ready
068900                 if ws-debug-on
069000                     move wz-soc-name-port
069100                       to we-h-num
069200                     string '* I: Connected on Port <'
069300                             we-h-num '>'
069400                             delimited by size
069500                             into we-msg-text
069600                     end-string
069700                     call 'tcpmessage' using we-msg
069800                 end-if
069900                 continue
070000             else
070100                 set wz-cmd--rc-not-okay to true
070200                 set ft-resp-connect-error to true
070300             end-if
070400         else
070500             set ft-resp-connect-error to true
070600         end-if
070700     end-if
070800     .
070900 2200-connect-to-server-exit. exit.
071000
071100 3000-move-data.
071200     if wz-cmd--rc-ok
071300         perform 3100-signon thru
071400                 3100-signon-exit
071500         perform 3200-transfer-data thru
071600                 3200-transfer-data-exit
071700         perform 3300-signoff thru
071800                 3300-signoff-exit
071900     end-if
072000     .
072100 3000-move-data-exit. exit.
072200
072300 3100-signon.
072400     if wz-cmd--rc-ok
072500         set ws-str-ptr-initial     to true
072600         move low-values to wz-soc-write-buffer
072700         string
072800             'USER ' delimited by size
072900             ft-user-name delimited by ws-null
073000             ws-crlf
073100                delimited by size
073200             into wz-soc-write-buffer
073300             pointer ws-str-ptr
073400         end-string
073500         compute wz-soc-write-nbyte = ws-str-ptr - one
073600         perform 3900-send-to-server thru
073700                 3900-send-to-server-exit
073800         evaluate true
073900             when ip-rc-331-need-pass
074000                 set ws-str-ptr-initial to true
074100                 move low-values to wz-soc-write-buffer
074200                 string
074300                     'PASS ' delimited by size
074400                     ft-password  delimited by ws-null
074500                     ws-crlf
074600                        delimited by size
074700                     into wz-soc-write-buffer
074800                     pointer ws-str-ptr
074900                 end-string
075000                 compute wz-soc-write-nbyte = ws-str-ptr - one
075100                 perform 3900-send-to-server thru
075200                         3900-send-to-server-exit
075300                 evaluate true
075400                     when ip-rc-230-usr-logd-on
075500                         continue
075600                     when ip-rc-332-need-acct
075700                         set ws-str-ptr-initial to true
075800                         move low-values to wz-soc-write-buffer
075900                         string
076000                             'ACCT ' delimited by size
076100                             ft-account delimited by ws-null
076200                             ws-crlf
076300                                delimited by size
076400                             into wz-soc-write-buffer
076500                             pointer ws-str-ptr
076600                         end-string
076700                         compute wz-soc-write-nbyte
076800                               = ws-str-ptr - one
076900                         perform 3900-send-to-server thru
077000                                 3900-send-to-server-exit
077100                         evaluate true
077200                             when ip-rc-230-usr-logd-on
077300                                 continue
077400                             when other
077500                                 set ft-resp-ft-error to true
077600                         end-evaluate
077700                     when other
077800                         set ft-resp-ft-error to true
077900                 end-evaluate
078000             when other
078100                 set ft-resp-ft-error to true
078200         end-evaluate
078300     else
078400         continue
078500     end-if
078600     .
078700 3100-signon-exit. exit.
078800
078900 3200-transfer-data.
079000     if wz-cmd--rc-ok and ft-resp-okay
079100         if ft-binary-transfer
079200             set ws-str-ptr-initial to true
079300             move low-values to wz-soc-write-buffer
079400             string
079500                 'TYPE I' delimited by size
079600                 ws-crlf
079700                    delimited by size
079800                 into wz-soc-write-buffer
079900                 pointer ws-str-ptr
080000             end-string
080100             compute wz-soc-write-nbyte
080200                   = ws-str-ptr - one
080300             perform 3900-send-to-server thru
080400                     3900-send-to-server-exit
080500             evaluate true
080600                 when ip-rc-200-ready
080700                     continue
080800                 when other
080900                     set ft-resp-ft-error to true
081000             end-evaluate
081100         end-if
081200         if ft-resp-okay
081300             set ws-str-ptr-initial to true
081400             move low-values to wz-soc-write-buffer
081500             string
081600                 'PASV' delimited by size
081700                 ws-crlf
081800                    delimited by size
081900                 into wz-soc-write-buffer
082000                 pointer ws-str-ptr
082100             end-string
082200             compute wz-soc-write-nbyte
082300                   = ws-str-ptr - one
082400             perform 3900-send-to-server thru
082500                     3900-send-to-server-exit
082600             evaluate true
082700                 when ip-rc-227-ent-pas-mod
082800                     perform 3202-connect-data-port thru
082900                             3202-connect-data-port-exit
083000                 when other
083100                     set ft-resp-ft-error to true
083200             end-evaluate
083300
083400             if ft-resp-okay
083500                 evaluate true
083600                     when ft-send-file
083700                         perform 3210-send-file thru
083800                                 3210-send-file-exit
083900                     when ft-receive-file
084000                         perform 3220-recv-file thru
084100                                 3220-recv-file-exit
084200                     when other
084300                         continue
084400                 end-evaluate
084500                 perform 4200-close-data-socket thru
084600                         4200-close-data-socket-exit
084700             end-if
084800         end-if
084900     else
085000         continue
085100     end-if
085200     .
085300 3200-transfer-data-exit. exit.
085400
085500 3202-connect-data-port.
085600     unstring ip-rc-text
085700              delimited by '(' or ')'
085800              into ws-unstring-work
085900                   ws-pasv-resp
086000                   ws-unstring-work
086100     end-unstring
086200     unstring ws-pasv-resp
086300              delimited by ',' or ' ' or ws-null
086400              into ws-unstring-work
086500                   ws-unstring-work
086600                   ws-unstring-work
086700                   ws-unstring-work
086800                   ws-p1
086900                   ws-p2
087000                   ws-unstring-work
087100     end-unstring
087200     compute ft-srvr-data-port = (ws-p1 * 256) + ws-p2
087300     move ft-srvr-data-port
087400       to wz-soc-name-port
087500     set wz-soc-fun-is-connect to true
087600     call 'EZACICSO' using wz-soc-connect
087700                           wz-soc-data-s
087800                           wz-soc-name
087900                           wz-errno
088000                           wz-data-rc
088100     if not wz-data-rc-okay
088200         set ft-resp-data-conn-error to true
088300     else
088400         if ws-debug-on
088500             move wz-soc-name-port
088600               to we-h-num
088700             string
088800                 '*DI: Connected on Port <'
088900                 we-h-num '>'
089000                 delimited by size
089100                 into we-msg-text
089200             end-string
089300             call 'tcpmessage' using we-msg
089400         end-if
089500     end-if
089600     .
089700 3202-connect-data-port-exit. exit.
089800
089900 3210-send-file.
090000     evaluate true
090100         when ft-send-ts-q
090200             perform 3212-send-ts-q thru
090300                     3212-send-ts-q-exit
090400         when ft-send-ptr
090500             perform 3214-send-ptr thru
090600                     3214-send-ptr-exit
090700         when other
090800             set ft-resp-data-src-wrong-error
090900              to true
091000     end-evaluate
091100     .
091200 3210-send-file-exit. exit.
091300
091400 3212-send-ts-q.
091500     compute ft-ts-num-items = zero
091600     compute wc-cics-item    = one
091700     perform 3218-send-put-cmd thru
091800             3218-send-put-cmd-exit
091900     if ft-resp-okay
092000         perform with test after
092100                 until wc-cics-resp not = dfhresp(normal)
092200                    or not ft-resp-okay
092300             if ft-text-transfer
092400                 compute wc-cics-length
092500                       = length of ws-data-area -
092600                         length of ws-crlf
092700             else
092800                 compute wc-cics-length
092900                       = length of ws-data-area
093000             end-if
093100             move low-values to ws-data-area
093200             exec cics readq ts
093300                       qname  (ft-ts-qname)
093400                       into   (ws-data-area)
093500                       length (wc-cics-length)
093600                       item   (wc-cics-item)
093700                       resp   (wc-cics-resp)
093800                       resp2  (wc-cics-resp2)
093900             end-exec
094000             evaluate wc-cics-resp
094100                 when dfhresp(normal)
094200                     compute wc-cics-item
094300                           = wc-cics-item  + one
094400                     compute ft-ts-num-items
094500                           = ft-ts-num-items + one
094600                     if ft-text-transfer
094700                         compute ws-data-area-len
094800                               = wc-cics-length +
094900                                 length of ws-crlf
095000                         move ws-crlf
095100                           to ws-data-area
095200                              ( wc-cics-length + one:
095300                                length of ws-crlf )
095400                     else
095500                         compute ws-data-area-len
095600                               = wc-cics-length
095700                     end-if
095800                     perform 5200-write-data-socket thru
095900                             5200-write-data-socket-exit
096000                 when dfhresp(itemerr)
096100                     continue
096200                 when other
096300                     set ft-resp-read-error to true
096400             end-evaluate
096500         end-perform
096600         if ft-resp-okay and ft-del--queue
096700             exec cics deleteq ts
096800                       qname  (ft-ts-qname)
096900                       resp   (wc-cics-resp)
097000                       resp2  (wc-cics-resp2)
097100             end-exec
097200             if wc-cics-resp = dfhresp(normal)
097300                 if ws-debug-on
097400                     string
097500                         '* I: Queue ' ft-ts-qname
097600                         ' has been deleted.'
097700                         delimited by size
097800                         into we-msg-text
097900                     end-string
098000                     call 'tcpmessage' using we-msg
098100                 end-if
098200             else
098300                 string
098400                     '* I: Delete Queue ' ft-ts-qname
098500                     ' failed. Resp<' wc-cics-resp '>'
098600                     ' Resp2<' wc-cics-resp2 '>'
098700                     delimited by size
098800                     into we-msg-text
098900                 end-string
099000                 call 'tcpmessage' using we-msg
099100             end-if
099200         end-if
099300     end-if
099400     .
099500 3212-send-ts-q-exit. exit.
099600
099700 3214-send-ptr.
099800     if ft-data-len > zero
099900         set address of ft-data-area
100000          to ft-data-ptr
100100         if ft-data-valid
100200             perform 3218-send-put-cmd thru
100300                     3218-send-put-cmd-exit
100400             if ft-resp-okay
100500                 move low-values to ws-data-area
100600                 move ft-data(one:ft-data-len)
100700                   to ws-data-area(one:ft-data-len)
100800                 compute ws-data-area-len = ft-data-len
100900                 perform 5200-write-data-socket thru
101000                         5200-write-data-socket-exit
101100             end-if
101200         else
101300             set ft-resp-send-data-error to true
101400         end-if
101500     else
101600         set ft-resp-send-data-error to true
101700     end-if
101800     .
101900 3214-send-ptr-exit. exit.
102000
102100 3218-send-put-cmd.
102200     set ws-str-ptr-initial to true
102300     move low-values to wz-soc-write-buffer
102400     string
102500         'STOR ' delimited by size
102600         ft-file-name delimited by ws-null
102700         ws-crlf
102800            delimited by size
102900         into wz-soc-write-buffer
103000         pointer ws-str-ptr
103100     end-string
103200     compute wz-soc-write-nbyte
103300           = ws-str-ptr - one
103400     perform 3900-send-to-server thru
103500             3900-send-to-server-exit
103600     evaluate true
103700         when ip-rc-150-fs-okay
103800             continue
103900         when other
104000             set ft-resp-ft-error to true
104100     end-evaluate
104200     .
104300 3218-send-put-cmd-exit. exit.
104400
104500 3220-recv-file.
104600     evaluate true
104700         when ft-recv-ts-q
104800             perform 3222-recv-ts-q thru
104900                     3222-recv-ts-q-exit
105000         when other
105100             set ft-resp-data-src-wrong-error
105200              to true
105300     end-evaluate
105400     .
105500 3220-recv-file-exit. exit.
105600
105700 3222-recv-ts-q.
105800     exec cics deleteq ts
105900               qname(ft-ts-qname)
106000               nohandle
106100     end-exec
106200     compute ft-ts-num-items = zero
106300     perform 3228-send-get-cmd thru
106400             3228-send-get-cmd-exit
106500     compute wz-soc-read-nbyte = zero
106600     if ft-resp-okay
106700         perform with test after
106800                 until wc-cics-resp not = dfhresp(normal)
106900                    or not ft-resp-okay
107000                    or wz-data-rc-not-okay
107100                    or wc-cics-length = zero
107200             perform 6200-read-data-record thru
107300                     6200-read-data-record-exit
107400             compute wc-cics-length = ws-recv-data-len
107500             if wc-cics-length > zero
107600                 exec cics writeq ts
107700                           qname (ft-ts-qname)
107800                           from (ws-dblk-area)
107900                           length (wc-cics-length)
108000                           resp (wc-cics-resp)
108100                           resp2 (wc-cics-resp2)
108200                 end-exec
108300                 evaluate wc-cics-resp
108400                     when dfhresp(normal)
108500                         compute ft-ts-num-items
108600                               = ft-ts-num-items + one
108700                     when other
108800                         set ft-resp-read-error to true
108900                 end-evaluate
109000             else
109100                 continue
109200             end-if
109300         end-perform
109400     end-if
109500     .
109600 3222-recv-ts-q-exit. exit.
109700
109800 3228-send-get-cmd.
109900     set ws-str-ptr-initial to true
110000     move low-values to wz-soc-write-buffer
110100     string
110200         'RETR ' delimited by size
110300         ft-file-name delimited by ws-null
110400         ws-crlf
110500            delimited by size
110600         into wz-soc-write-buffer
110700         pointer ws-str-ptr
110800     end-string
110900     compute wz-soc-write-nbyte
111000           = ws-str-ptr - one
111100     perform 3900-send-to-server thru
111200             3900-send-to-server-exit
111300     evaluate true
111400         when ip-rc-150-fs-okay
111500             continue
111600         when other
111700             set ft-resp-ft-error to true
111800     end-evaluate
111900     .
112000 3228-send-get-cmd-exit. exit.
112100
112200 3300-signoff.
112300     if wz-cmd--rc-ok
112400         compute ws-loop-cnt = ws-loop-cnt + one
112500         set ws-str-ptr-initial     to true
112600         move low-values to wz-soc-write-buffer
112700         string
112800             'QUIT'
112900             ws-crlf
113000                delimited by size
113100             into wz-soc-write-buffer
113200             pointer ws-str-ptr
113300         end-string
113400         compute wz-soc-write-nbyte = ws-str-ptr - one
113500         perform 3900-send-to-server thru
113600                 3900-send-to-server-exit
113700     else
113800         continue
113900     end-if
114000     .
114100 3300-signoff-exit. exit.
114200
114300 3900-send-to-server.
114400     perform 5000-write-socket thru
114500             5000-write-socket-exit
114600     perform 6000-read-until-empty thru
114700             6000-read-until-empty-exit
114800     .
114900 3900-send-to-server-exit. exit.
115000
115100 4000-close-socket.
115200     if wz-cmd--rc-ok
115300         set wz-soc-fun-is-close to true
115400         call 'EZACICSO' using wz-soc-close
115500                               wz-soc-cmd--s
115600                               wz-errno
115700                               wz-cmd--rc
115800         if wz-cmd--rc-ok
115900             continue
116000         else
116100             set ft-resp-close-error to true
116200         end-if
116300     else
116400         move wz-soc-cmd--s  to wzz-soc-shutdown-s
116500         perform 4500-shutdown-socket thru
116600                 4500-shutdown-socket-exit
116700     end-if
116800     .
116900 4000-close-socket-exit. exit.
117000
117100 4200-close-data-socket.
117200     if wz-cmd--rc-ok
117300         set wz-soc-fun-is-close to true
117400         call 'EZACICSO' using wz-soc-close
117500                               wz-soc-data-s
117600                               wz-errno
117700                               wz-data-rc
117800         if wz-data-rc-ok
117900             continue
118000         else
118100             set ft-resp-close-error to true
118200         end-if
118300     else
118400         move wz-soc-data-s  to wzz-soc-shutdown-s
118500         perform 4500-shutdown-socket thru
118600                 4500-shutdown-socket-exit
118700     end-if
118800     .
118900 4200-close-data-socket-exit. exit.
119000
119100 4500-shutdown-socket.
119200     if  wzz-soc-shutdown-s > zero
119300         set wzz-shutdown-end-both to true
119400         call 'EZACICSO' using wzz-soc-fun-is-shutdown
119500                               wzz-soc-shutdown-s
119600                               wzz-soc-shutdown-how
119700                               wzz-errno
119800                               wzz-retcode
119900         if wzz-retcode-ok
120000             continue
120100         else
120200             set ft-resp-shutdown-error to true
120300         end-if
120400     end-if
120500     .
120600 4500-shutdown-socket-exit. exit.
120700
120800 5000-write-socket.
120900     if wz-cmd--rc-ok
121000         if ws-debug-on
121100             move wz-soc-write-nbyte
121200               to we-f-num
121300             if wz-soc-write-buffer(one:four) = 'PASS'
121400                 string
121500                     '* C:<' we-f-num '>'
121600                     'PASS *******************'
121700                     delimited by size
121800                     into we-msg-text
121900                 end-string
122000             else
122100                 string
122200                     '* C:<' we-f-num '>'
122300                     wz-soc-write-buffer(1:80)
122400                     delimited by size
122500                     into we-msg-text
122600             end-if
122700             call 'tcpmessage' using we-msg
122800         end-if
122900         call 'EZACIC04' using wz-soc-write-buffer
123000                               wz-soc-write-nbyte
123100         if wz-soc-write-nbyte >= zero
123200            and wz-soc-write-nbyte <= wz-soc-write-max
123300             set wz-soc-fun-is-write to true
123400             call 'EZACICSO' using wz-soc-write
123500                                   wz-soc-cmd--s
123600                                   wz-soc-write-nbyte
123700                                   wz-soc-write-buffer
123800                                   wz-errno
123900                                   wz-cmd--rc
124000             if wz-cmd--rc > zero
124100                 if wz-cmd--rc = wz-soc-write-nbyte
124200                     continue
124300                 else
124400                     move wz-cmd--rc
124500                       to we-f-num
124600                     string
124700                         '* I: write count mismatch '
124800                         ' OUT=' we-f-num
124900                         delimited by size
125000                         into we-msg-text
125100                     end-string
125200                     call 'tcpmessage' using we-msg
125300                 end-if
125400                 set wz-cmd--rc-ok to true
125500             else
125600                 set ft-resp-write-error to true
125700             end-if
125800             if ws-debug-on and wz-cmd--rc < zero
125900                 move wz-errno   to we-f-num
126000                 move wz-cmd--rc to we-f-num-2
126100                 string
126200                     '* I: ERRNO<' we-f-num '>'
126300                     ' RC<-' we-f-num-2 '>'
126400                     delimited by size
126500                     into we-msg-text
126600                 end-string
126700                 call 'tcpmessage' using we-msg
126800             end-if
126900         else
127000             set ft-resp-write-error       to true
127100             set ft-resp-write-len-error   to true
127200             compute wz-cmd--rc = -1
127300         end-if
127400     end-if
127500     .
127600 5000-write-socket-exit. exit.
127700
127800 5200-write-data-socket.
127900     if wz-data-rc-ok
128000         if ws-debug-on
128100             move ws-data-area-len
128200               to we-f-num
128300             string
128400                 '*DC:<' we-f-num '>'
128500                 ws-data-area(1:80)
128600                 delimited by size
128700                 into we-msg-text
128800             end-string
128900             call 'tcpmessage' using we-msg
129000         end-if
129100         if ft-text-transfer
129200             call 'EZACIC04' using ws-data-area
129300                                   ws-data-area-len
129400         end-if
129500         set wz-soc-fun-is-write to true
129600         if ws-data-area-len > zero
129700             call 'EZACICSO' using wz-soc-write
129800                                   wz-soc-data-s
129900                                   ws-data-area-len
130000                                   ws-data-area
130100                                   wz-errno
130200                                   wz-data-rc
130300             if wz-data-rc > zero
130400                 compute ft-num-bytes-trans
130500                       = ft-num-bytes-trans + wz-data-rc
130600                 if wz-data-rc = ws-data-area-len
130700                     continue
130800                 else
130900                     move wz-data-rc
131000                       to we-f-num
131100                     string '*DI:OUT=' we-f-num
131200                         delimited by size
131300                         into we-msg-text
131400                     end-string
131500                     call 'tcpmessage' using we-msg
131600                 end-if
131700                 set wz-data-rc-ok to true
131800             else
131900                 set ft-resp-write-error to true
132000             end-if
132100             if ws-debug-on and wz-data-rc < zero
132200                 move wz-errno   to we-f-num
132300                 move wz-data-rc to we-f-num-2
132400                 string
132500                     '* I: ERRNO<' we-f-num '>'
132600                     ' RC<-' we-f-num-2 '>'
132700                     delimited by size
132800                     into we-msg-text
132900                 end-string
133000                 call 'tcpmessage' using we-msg
133100             end-if
133200         else
133300             set ft-resp-write-error
133400                 ft-resp-write-len-error
133500                 wz-data-rc-not-okay       to true
133600         end-if
133700     end-if
133800     .
133900 5200-write-data-socket-exit. exit.
134000
134100 6000-read-until-empty.
134200     compute ft-resp-msg-idx = zero
134300     move low-values
134400       to ft-resp-msgs
134500
134600     perform with test after until ip-rc-resp-end or
134700                                   wz-cmd--rc-not-ok
134800         perform 6050-read-next-line thru
134900                 6050-read-next-line-exit
135000         if wz-cmd--rc > zero
135100             set wz-cmd--rc-ok to true
135200         else
135300             move low-values
135400               to wz-soc-line-buffer
135500         end-if
135600         move wz-soc-line-buffer
135700           to ft-reply-codes
135800         if ft-resp-max-msgs
135900             continue
136000         else
136100             compute ft-resp-msg-idx
136200                   = ft-resp-msg-idx + one
136300             move ft-reply-codes
136400               to ft-resp-msg (ft-resp-msg-idx)
136500             compute ft-resp-msg-len (ft-resp-msg-idx)
136600                   = wz-cmd--rc
136700         end-if
136800     end-perform
136900     .
137000 6000-read-until-empty-exit. exit.
137100
137200 6050-read-next-line.
137300     if wz-cmd--rc-ok and wz-soc-read-nbyte > zero
137400         compute wz-cmd--rc = wz-soc-read-nbyte
137500     else
137600         perform 6100-read-socket thru
137700                 6100-read-socket-exit
137800     end-if
137900     if wz-cmd--rc > zero
138000         set ws-not-done         to true
138100         move low-values         to wz-soc-line-buffer
138200         compute wz-soc-line-cnt =  zero
138300         perform until ws-done
138400             if wz-soc-read-nbyte = zero
138500                 set ws-done to true
138600             else
138700                 compute wz-soc-line-cnt
138800                       = wz-soc-line-cnt + one
138900                 move wz-soc-read-buffer(one:one)
139000                   to wz-soc-line-buffer(wz-soc-line-cnt:one)
139100                 move wz-soc-read-buffer(two:)
139200                   to wz-soc-read-buffer(one:)
139300                 compute wz-soc-read-nbyte
139400                       = wz-soc-read-nbyte - one
139500                 if  wz-soc-line-buffer(wz-soc-line-cnt:one)
139600                   = ws-lf
139700                     set ws-done to true
139800                 else
139900                     continue
140000                 end-if
140100             end-if
140200         end-perform
140300         if ws-debug-on
140400             move wz-soc-line-cnt
140500               to we-f-num
140600             string
140700                 '* S:<' we-f-num '>'
140800                 wz-soc-line-buffer(1:80)
140900                 delimited by size
141000                 into we-msg-text
141100             end-string
141200             call 'tcpmessage' using we-msg
141300         end-if
141400     else
141500         continue
141600     end-if
141700     .
141800 6050-read-next-line-exit. exit.
141900
142000 6100-read-socket.
142100     if wz-cmd--rc-ok
142200         set wz-soc-fun-is-read to true
142300         move zeros             to wz-soc-read-cnt
142400         move low-values        to wz-soc-read-buffer
142500         set ws-not-done        to true
142600
142700         perform until ws-done
142800             move low-values    to wz-soc-work-buffer
142900
143000             set wz-soc-read-max to true
143100
143200             call 'EZACICSO' using wz-soc-read
143300                                   wz-soc-cmd--s
143400                                   wz-soc-read-nbyte
143500                                   wz-soc-work-buffer
143600                                   wz-errno
143700                                   wz-cmd--rc
143800
143900             if wz-cmd--rc > zero
144000                 if (wz-cmd--rc + wz-soc-read-cnt) >
144100                     length of wz-soc-read-buffer
144200                     set ft-resp-read-error to true
144300                     set wz-cmd--rc-not-ok to true
144400                     set ws-done           to true
144500                 else
144600                     move wz-soc-work-buffer (one:wz-cmd--rc)
144700                       to wz-soc-read-buffer
144800                          (wz-soc-read-cnt + one:)
144900                     compute wz-soc-read-cnt =
145000                             wz-soc-read-cnt + wz-cmd--rc
145100                     if wz-soc-work-buffer(wz-cmd--rc - one:
145200                                 length of wz-crlf)
145300                        = wz-crlf
145400                         set ws-done to true
145500                     else
145600                         continue
145700                     end-if
145800                     compute wz-cmd--rc = wz-soc-read-cnt
145900                 end-if
146000             else
146100                 if ws-debug-on and wz-cmd--rc < zero
146200                     move wz-errno   to we-f-num
146300                     move wz-cmd--rc to we-f-num-2
146400                     string
146500                         '* I: ERRNO<' we-f-num '>'
146600                         ' RC<-' we-f-num-2 '>'
146700                         delimited by size
146800                         into we-msg-text
146900                     end-string
147000                     call 'tcpmessage' using we-msg
147100                 end-if
147200                 if wz-read-less-than-one
147300                     compute wz-errno = zero
147400                     set wz-cmd--rc-ok to true
147500                 else
147600                     continue
147700                 end-if
147800                 set ws-done to true
147900             end-if
148000         end-perform
148100
148200         if wz-soc-read-cnt > zero and wz-cmd--rc >= zero
148300             compute wz-soc-read-nbyte = wz-soc-read-cnt
148400             compute wz-cmd--rc        = wz-soc-read-cnt
148500             call 'EZACIC05' using wz-soc-read-buffer
148600                                   wz-soc-read-nbyte
148700D            if ws-debug-on
148800D                move wz-soc-read-nbyte
148900D                  to we-f-num
149000D                string
149100D                    '* S:<' we-f-num '>'
149200D                    wz-soc-read-buffer(1:80)
149300D                    delimited by size
149400D                    into we-msg-text
149500D                end-string
149600D                call 'tcpmessage' using we-msg
149700D            end-if
149800         else
149900             continue
150000         end-if
150100
150200         if wz-cmd--rc-not-ok
150300             set ft-resp-read-error to true
150400         else
150500             continue
150600         end-if
150700
150800     end-if
150900     .
151000 6100-read-socket-exit. exit.
151100
151200 6200-read-data-record.
151300     compute ws-recv-data-len = zero
151400     move low-values     to ws-dblk-area
151500     if  ws-data-area-len > zero
151600         continue
151700     else
151800         perform 6300-read-data-socket thru
151900                 6300-read-data-socket-exit
152000     end-if
152100     if  ws-data-area-len > zero
152200         set ws-not-done     to true
152300         perform until ws-done
152400             if  ws-data-area-len = zero
152500                 perform 6300-read-data-socket thru
152600                         6300-read-data-socket-exit
152700                 if  ws-data-area-len = zero
152800                     set ws-done to true
152900                 end-if
153000             else
153100                 if ft-text-transfer
153200                     perform 6220-deblock-text thru
153300                             6220-deblock-text-exit
153400                 else
153500                     perform 6240-deblock-bin thru
153600                             6240-deblock-bin-exit
153700                 end-if
153800             end-if
153900         end-perform
154000     end-if
154100     if ws-debug-on
154200         move ws-recv-data-len
154300           to we-f-num
154400         string
154500             '*DS:<' we-f-num '>'
154600             ws-dblk-area(1:80)
154700             delimited by size
154800             into we-msg-text
154900         end-string
155000         call 'tcpmessage' using we-msg
155100     end-if
155200     .
155300 6200-read-data-record-exit. exit.
155400
155500 6220-deblock-text.
155600     if  ws-data-area(ws-data-area-idx:2) = ws-crlf or
155700         ws-data-area(ws-data-area-idx:one) = ws-lf
155800         if  ws-data-area(ws-data-area-idx:one) = ws-cr
155900             compute ws-data-area-len = ws-data-area-len - two
156000             compute ws-data-area-idx = ws-data-area-idx + two
156100         else
156200             compute ws-data-area-len = ws-data-area-len - one
156300             compute ws-data-area-idx = ws-data-area-idx + one
156400         end-if
156500         if ws-recv-data-len = zero
156600             compute ws-recv-data-len = one
156700             move space to ws-dblk-area (ws-recv-data-len:one)
156800         else
156900             continue
157000         end-if
157100         set ws-done to true
157200     else
157300         compute ws-recv-data-len = ws-recv-data-len + one
157400         move ws-data-area (ws-data-area-idx:one)
157500           to ws-dblk-area (ws-recv-data-len:one)
157600         compute ws-data-area-len = ws-data-area-len - one
157700         compute ws-data-area-idx = ws-data-area-idx + one
157800     end-if
157900     .
158000 6220-deblock-text-exit. exit.
158100
158200 6240-deblock-bin.
158300     if  ws-recv-data-len < ft-ts-recv-bin-rec-size
158400         compute ws-idx = ft-ts-recv-bin-rec-size
158500                        - ws-recv-data-len
158600         if  ws-data-area-len >= ws-idx
158700             compute ws-recv-data-len
158800                   = ws-recv-data-len + one
158900             move ws-data-area(ws-data-area-idx:ws-idx)
159000               to ws-dblk-area(ws-recv-data-len:ws-idx)
159100             compute ws-data-area-len
159200                   = ws-data-area-len - ws-idx
159300             compute ws-data-area-idx
159400                   = ws-data-area-idx + ws-idx
159500             compute ws-recv-data-len = ft-ts-recv-bin-rec-size
159600             set ws-done to true
159700         else
159800             move ws-data-area(ws-data-area-idx:ws-data-area-len)
159900               to ws-dblk-area
160000                  (ws-recv-data-len + one:ws-data-area-len)
160100             compute ws-recv-data-len
160200                   = ws-recv-data-len + ws-data-area-len
160300             compute ws-data-area-len = zero
160400             compute ws-data-area-idx = zero
160500         end-if
160600     end-if
160700     .
160800 6240-deblock-bin-exit. exit.
160900
161000 6300-read-data-socket.
161100     if wz-cmd--rc-ok
161200         move low-values to ws-data-area
161300
161400         compute ws-data-area-len
161500               = length of ws-data-area
161600
161700         set wz-soc-fun-is-read to true
161800         call 'EZACICSO' using wz-soc-read
161900                               wz-soc-data-s
162000                               ws-data-area-len
162100                               ws-data-area
162200                               wz-errno
162300                               wz-data-rc
162400
162500         if  wz-data-rc > zero
162600             compute ft-num-bytes-trans
162700                   = ft-num-bytes-trans + wz-data-rc
162800             compute ws-data-area-len = wz-data-rc
162900             compute ws-data-area-idx  = one
163000             if ft-text-transfer
163100                 call 'EZACIC05' using ws-data-area
163200                                       ws-data-area-len
163300             end-if
163400         else
163500             compute ws-data-area-len = zero
163600             compute ws-data-area-idx = zero
163700         end-if
163800
163900         if ws-debug-on
164000             move ws-data-area-len
164100               to we-f-num
164200             string
164300                 '*DS:<' we-f-num '>'
164400                 ws-data-area(1:80)
164500                 delimited by size
164600                 into we-msg-text
164700             end-string
164800             call 'tcpmessage' using we-msg
164900             if wz-data-rc < zero
165000                 move wz-errno    to we-f-num
165100                 move wz-data-rc  to we-f-num-2
165200                 string
165300                     '*DI: ERRNO<' we-f-num '>'
165400                     ' RC<-' we-f-num-2 '>'
165500                     delimited by size
165600                     into we-msg-text
165700                 end-string
165800                 call 'tcpmessage' using we-msg
165900             end-if
166000         end-if
166100
166200     else
166300         continue
166400     end-if
166500     .
166600 6300-read-data-socket-exit. exit.
166700
166800 7000-get-host-ip.
166900         set wz-soc-fun-is-gethostid to true
167000
167100         call 'EZACICSO' using wz-soc-get-host-id
167200                               wz-soc-host-ip
167300     .
167400 7000-get-host-ip-exit. exit.
167500
167600 7100-get-host-by-addr.
167700     if wz-cmd--rc-ok
167800         set wz-soc-fun-is-ghba to true
167900
168000         call 'EZACICSO' using wz-soc-get-host-by-addr
168100                               wz-soc-ghba-host-ip
168200                               wz-errno
168300                               wz-cmd--rc
168400         if wz-gethost-hostent-bad
168500             compute wz-soc-ghba-hostent = zero
168600         else
168700             move wz-errno
168800               to wz-soc-ghba-hostent,
168900                  wz-c08-hostent-addr
169000             call 'EZACIC08' using wz-c08-hostent-addr
169100                             wz-c08-hostname-len
169200                             wz-c08-hostname
169300                             wz-c08-hostalias-cnt
169400                             wz-c08-hostalias-seq
169500                             wz-c08-hostalias-len
169600                             wz-c08-hostalias
169700                             wz-c08-host-ip-type
169800                             wz-c08-host-ip-len
169900                             wz-c08-host-ip-cnt
170000                             wz-c08-host-ip-seq
170100                             wz-c08-host-ip
170200                             wz-cmd--rc
170300         end-if
170400     end-if
170500     .
170600 7100-get-host-by-addr-exit. exit.
170700
170800 7200-get-host-by-name.
170900     if wz-cmd--rc-ok
171000         set wz-soc-fun-is-ghbn to true
171100
171200         if wz-soc-ghbn-namelen > zero
171300             continue
171400         else
171500             move length of wz-soc-ghbn-hostname
171600               to wz-soc-ghbn-namelen
171700         end-if
171800         call 'RMVWHTSP' using wz-soc-ghbn-hostname,
171900                               wz-soc-ghbn-namelen
172000         call 'EZACICSO' using wz-soc-get-host-by-name
172100                               wz-soc-ghbn-namelen
172200                               wz-soc-ghbn-hostname
172300                               wz-errno
172400                               wz-cmd--rc
172500         compute wz-soc-ghbn-namelen = zero
172600
172700         if wz-gethost-hostent-bad
172800             compute wz-soc-ghbn-hostent = zero
172900         else
173000             move wz-errno
173100               to wz-soc-ghbn-hostent,
173200                  wz-c08-hostent-addr
173300             call 'EZACIC08' using wz-c08-hostent-addr
173400                             wz-c08-hostname-len
173500                             wz-c08-hostname
173600                             wz-c08-hostalias-cnt
173700                             wz-c08-hostalias-seq
173800                             wz-c08-hostalias-len
173900                             wz-c08-hostalias
174000                             wz-c08-host-ip-type
174100                             wz-c08-host-ip-len
174200                             wz-c08-host-ip-cnt
174300                             wz-c08-host-ip-seq
174400                             wz-c08-host-ip
174500                             wz-cmd--rc
174600         end-if
174700     end-if
174800     .
174900 7200-get-host-by-name-exit. exit.
175000
175100 identification division.
175200 program-id.                     rmvwhtsp.
175300 data division.
175400 working-storage section.
175500 77  ws-idx                         pic 9(08)  binary.
175600 77  one                            pic 9(01) comp-3 value 1.
175700 77  two                            pic 9(01) comp-3 value 2.
175800 77  ws-null                        pic x(01) value x'00'.
175900 linkage section.
176000 01  rmv-str                        pic x(32768).
176100 01  rmv-str-len                    pic 9(08)  binary.
176200 01  str-len redefines rmv-str-len  pic 9(08)  binary.
176300 procedure division using rmv-str, rmv-str-len.
176400     evaluate true
176500         when rmv-str-len > zero and rmv-str-len <= 32768
176600             perform
176700               varying ws-idx from one by one
176800               until rmv-str(one:one) not = space or
176900                     ws-idx = rmv-str-len
177000                 if rmv-str(one:one) = space
177100                     move rmv-str(two:rmv-str-len - one)
177200                       to rmv-str(one:rmv-str-len)
177300                 end-if
177400             end-perform
177500             perform
177600               varying ws-idx from rmv-str-len by -1
177700               until ( rmv-str(ws-idx:one) not = ws-null and
177800                       rmv-str(ws-idx:one) not = space ) or
177900                     ws-idx = zero
178000                 move ws-null
178100                   to rmv-str(ws-idx:one)
178200             end-perform
178300             move ws-idx
178400               to str-len
178500             move zero to return-code
178600         when rmv-str-len = zero
178700             move 4 to return-code
178800         when other
178900             move 8 to return-code
179000     end-evaluate
179100     .
179200 end program rmvwhtsp.
179300
179400 identification division.
179500 program-id.                     getdate.
179600 data division.
179700 working-storage section.
179800 77  ws-null                        pic x(01) value x'00'.
179900 01  ws-filler.
180000     03  ws-current-date              pic x(21).
180100     03  filler redefines ws-current-date.
180200         05 ws-cd-year                pic 9(04).
180300         05 ws-cd-mon                 pic 9(02).
180400         05 ws-cd-day                 pic 9(02).
180500         05 ws-cd-hour                pic 9(02).
180600         05 ws-cd-min                 pic 9(02).
180700         05 ws-cd-sec                 pic 9(02).
180800         05 ws-cd-hun                 pic 9(02).
180900         05 ws-cd-GMT-off             pic x(05).
181000
181100     03  ws-months.
181200         05 filler                    pic x(03) value 'Jan'.
181300         05 filler                    pic x(03) value 'Feb'.
181400         05 filler                    pic x(03) value 'Mar'.
181500         05 filler                    pic x(03) value 'Apr'.
181600         05 filler                    pic x(03) value 'May'.
181700         05 filler                    pic x(03) value 'Jun'.
181800         05 filler                    pic x(03) value 'Jul'.
181900         05 filler                    pic x(03) value 'Aug'.
182000         05 filler                    pic x(03) value 'Sep'.
182100         05 filler                    pic x(03) value 'Oct'.
182200         05 filler                    pic x(03) value 'Nov'.
182300         05 filler                    pic x(03) value 'Dec'.
182400     03  ws-month redefines ws-months
182500                  occurs 12 times     pic x(03).
182600
182700     03  ws-weekday                   pic 9(01).
182800     03  ws-week-days.
182900         05 filler                    pic x(03) value 'Mon'.
183000         05 filler                    pic x(03) value 'Tue'.
183100         05 filler                    pic x(03) value 'Wed'.
183200         05 filler                    pic x(03) value 'Thu'.
183300         05 filler                    pic x(03) value 'Fri'.
183400         05 filler                    pic x(03) value 'Sat'.
183500         05 filler                    pic x(03) value 'Sun'.
183600     03  ws-wd redefines ws-week-days
183700               occurs 7 times         pic x(03).
183800 linkage section.
183900 01  wl-date                          pic x(32).
184000 procedure division using wl-date.
184100     accept ws-weekday from day-of-week
184200     move function current-date
184300       to ws-current-date
184400     string ws-wd ( ws-weekday )   ', '
184500            ws-cd-day              ' '
184600            ws-month ( ws-cd-mon ) ' '
184700            ws-cd-year             ' '
184800            ws-cd-hour             ':'
184900            ws-cd-min              ':'
185000            ws-cd-sec              ' '
185100            ws-cd-GMT-off          ws-null
185200         delimited by size
185300         into wl-date
185400     end-string
185500     .
185600 end program getdate.
185700
185800 identification division.
185900 program-id.                     tcpmessage.
186000 data division.
186100 working-storage section.
186200 01  wc-filler.
186300     03  wc-cics-resp                 pic 9(09).
186400     03  wc-cics-resp2                pic 9(09).
186500     03  wc-cics-length               pic 9(04) binary.
186600     03  wc-cics-td-message           pic x(04) value 'TCPM'.
186700 01  ws-msg                           pic x(132).
186800 01  filler.
186900     03  ws-current-date              pic x(21).
187000     03  filler redefines ws-current-date.
187100         05 ws-cd-year                pic 9(04).
187200         05 ws-cd-mon                 pic 9(02).
187300         05 ws-cd-day                 pic 9(02).
187400         05 ws-cd-hour                pic 9(02).
187500         05 ws-cd-min                 pic 9(02).
187600         05 ws-cd-sec                 pic 9(02).
187700         05 ws-cd-hun                 pic 9(02).
187800         05 ws-cd-GMT-off             pic x(05).
187900
188000 linkage section.
188100 01  wl-msg.
188200     03 filler                        pic x(08).
188300     03 wl-msg-text                   pic x(100).
188400 procedure division using wl-msg.
188500
188600     exec cics address
188700               eib(address of dfheiblk)
188800     end-exec
188900
189000     move low-values to ws-msg
189100
189200     move function current-date
189300       to ws-current-date
189400     compute wc-cics-length = 1
189500     string
189600            eibtrmid
189700            eibtrnid
189800            ' '
189900            ws-cd-year
190000            ws-cd-mon
190100            ws-cd-day
190200            ws-cd-hour
190300            ws-cd-min
190400            ws-cd-sec
190500            ' '
190600            wl-msg
190700            delimited by size
190800       into ws-msg
190900       pointer wc-cics-length
191000     end-string
191100     compute wc-cics-length = wc-cics-length - 1
191200     perform with test after
191300             until wc-cics-resp not = dfhresp(nospace)
191400         exec cics writeq td
191500                   queue  (wc-cics-td-message)
191600                   from   (ws-msg)
191700                   length (wc-cics-length)
191800                   resp   (wc-cics-resp)
191900                   resp2  (wc-cics-resp2)
192000         end-exec
192100     end-perform
192200     move low-values to wl-msg-text
192300     .
192400 end program tcpmessage.
192500
