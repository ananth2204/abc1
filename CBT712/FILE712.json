{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012640000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE712.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE712.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x04'", "DS1TRBAL": "b'\\xa5\\xe2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xf1\\x00\\x01\\x04\\xf1\\x00\\t\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04E\\x00\\x00\\x01\\x05\\x19_\\x01\\x05\\x19_\\x085\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf9@@@'", "ispf": {"version": "04.69", "flags": 0, "createdate": "2005-07-14T00:00:00", "modifydate": "2005-07-14T08:35:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-469"}, "text": "REGULAR CBT TAPE - VERSION 469    FILE:  712\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT469.FILE712\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,722 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/14/05    08:35:46    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE712": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04E\\x00\\x00\\x01\\x05\\x19_\\x01\\x05\\x19_\\x085\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf9@@@'", "ispf": {"version": "04.69", "flags": 0, "createdate": "2005-07-14T00:00:00", "modifydate": "2005-07-14T08:35:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT-469"}, "text": "//***FILE 712 is from Paul Gorlinsky and contains two COBOL         *   FILE 712\n//*           programs which use the TCP/IP socket interface        *   FILE 712\n//*           from CICS.                                            *   FILE 712\n//*                                                                 *   FILE 712\n//*       SFTPXXCX - Program to send a file from CICS using         *   FILE 712\n//*                  the TCP/IP socket interface.                   *   FILE 712\n//*                                                                 *   FILE 712\n//*       SFTPXXIX - Copy member to lay out the format of the       *   FILE 712\n//*                  parameter list for SFTPXXCX.                   *   FILE 712\n//*                                                                 *   FILE 712\n//*       SMTPXXCX - Program to send mail from CICS using the       *   FILE 712\n//*                  TCP/IP socket interface.                       *   FILE 712\n//*                                                                 *   FILE 712\n//*       SMTPXXIX - Copy member for the send mail program.         *   FILE 712\n//*                                                                 *   FILE 712\n//*       email:  pfg@hds.bz                                        *   FILE 712\n//*                                                                 *   FILE 712\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SFTPXXCX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x04\\x01\\x05\\x06\\x7f\\x01\\x05\\x06\\x7f\\x13U\\x07\\x9f\\x07\\x9f\\x00\\x00\\xd7\\xc7\\xd6\\xd9\\xd3\\xc9\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-03-08T00:00:00", "modifydate": "2005-03-08T13:55:04", "lines": 1951, "newlines": 1951, "modlines": 0, "user": "PGORLIN"}, "text": "000100 identification division.\n000200 program-id.                     sftpxxcx.\n000300*author.                         Paul F. Gorlinsky.\n000400*                                Horizon Data Systems, Inc.\n000500*                                pfg@hds.bz\n000600*\n000700*date-written.                   2003/03/04.\n000800*\n000900******************************************************************\n001000* This program is used to a file from CICS using the TCP/IP\n001100* SOCKET interface. See SFTPXXIX for the lay out of the calling\n001200* parameters.\n001300*\n001400*\n001500* External Documentation:\n001600* IBM SC31-8807 - publibz.boulder.ibm.com/epubs/pdf/f1a1g110.pdf\n001700*     IP CICS Sockets Guide\n001800* RFC 959 - //rfc.net/rfc959.html\n001900*     File Transfer Protocol\n002000* RFC2228 - //rfc.net/rfc2228.html\n002100*     FTP Security Extensions\n002200* RFC2640 - //rfc.net/rfc2640.html\n002300*     Internationalization of the File Transfer Protocol\n002400* RFC 854 - //rfc.net/rfc854.html\n002500*     Telnet Protocol Specification\n002600*\n002610* Calling Program Requirements:\n002620* - COBOL COPY SFTPXXIX in Linkage Section of this program and\n002630*   WORKING STORAGE SECTION of the callers program.\n002660* - Set address of sm-text-data to sm-text-ptr\n002670* - Build message in sm-text\n002680* - Set sm-head-valid, sm-tail-valid and sm-text-valid to true\n002690* - Build sm-rcpts, sm-hdr, sm-sender\n002691* - Set sm-rcpt-num and sm-text-len appropriate\n002692* - CICS LINK to sm-program\n002693* - Validate response.\n002694*\n002695* Current Restrictions:\n002696* - Maximum of 10 Recepiants\n002697* - Message length 32760 bytes\n002698*\n002699* CICS TDQ TCPM is used for error messages.\n002700*\n002701* CICS INITPARM SFTPXXCX is used to turn on additional messages\n002702*   for debugging purposes. These message are written using the\n002703*   COBOL DISPLAY verb and usually are written to the DDNAME\n002704*   CEEMSG.\n002705*\n002706*   SFTPXXCX='xyzzy'\n002707*\n002708* The default SOCKET server name of TCPIP is used.\n002709*\n002710*\n002800* CHANGES:  THE FOLLOWING CHANGES HAVE BEEN MADE TO THIS MODULE:\n002900*    LOG #  DATE:  COMMENT:\n003000*    -----  -----  ----------------------------------------------\n003100*\n003200*           03/03  NEW CODE\n003300*\n003400******************************************************************\n003500\n003600 environment division.\n003700\n003800 configuration section.\n003900 source-computer.                ibm-370.\n004000 object-computer.                ibm-370.\n004100\n004200 special-names.\n004300\n004400 data division.\n004500\n004600 working-storage section.\n004700 01  filler.\n004800     03  filler                       pic x(04) value '****'.\n004900     03  ft-local-program-name        pic x(08) value 'sftpxxcx'.\n005000     03  filler                       pic x(04) value '****'.\n005100\n005200 77  one                              pic 9(1) comp-3 value 1.\n005300 77  two                              pic 9(1) comp-3 value 2.\n005400 77  three                            pic 9(1) comp-3 value 3.\n005500 77  four                             pic 9(1) comp-3 value 4.\n005600\n005700 01  wc-filler.\n005800     03  wc-eib-taskn                 pic 9(07).\n005900     03  wc-eib-time                  pic 9(07).\n006000     03  wc-eib-date                  pic 9(07).\n006100     03  wc-eib-trnid                 pic x(04).\n006200     03  wc-eib-trmid                 pic x(04).\n006300     03  wc-cics-set-ptr              pointer.\n006400     03  wc-cics-set-work-ptr         pointer.\n006500     03  wc-cics-flength              pic 9(09) binary.\n006600     03  wc-cics-length               pic 9(04) binary.\n006700     03  wc-cics-item                 pic 9(04) binary.\n006800     03  wc-cics-resp                 pic 9(08).\n006900     03  wc-cics-resp2                pic 9(08).\n007000     03  wc-cics-applid               pic x(08).\n007100     03  wc-cics-job-name             pic x(08).\n007200     03  wc-cics-td-message           pic x(04) value 'TCPM'.\n007300     03  wc-initparm.\n007400         05  wc-cics-initparm         pic x(60).\n007500         05  wc-cics-initparmlen      pic 9(04) binary.\n007600\n007700 01  we-filler.\n007800     03  we-msg.\n007900         05  we-msg-pgm-id            pic  x(08).\n008000         05  we-msg-text              pic  x(100).\n008100     03  we-h-num                     pic  9(05).\n008200     03  we-f-num                     pic  9(09).\n008300     03  we-f-num-2                   pic  9(08).\n008400\n008500 01  wi-filler.\n008600     03  wi-idx                       pic  9(01) binary.\n008700\n008800     03  wi-dotted-ip-addr.\n008900         05  wi-dotted-ip-n1          pic  9(03).\n009000         05  wi-dotted-ip-n2          pic  9(03).\n009100         05  wi-dotted-ip-n3          pic  9(03).\n009200         05  wi-dotted-ip-n4          pic  9(03).\n009300     03  filler redefines wi-dotted-ip-addr.\n009400         05  wi-dotted-ip occurs 4 times pic 9(3).\n009500\n009600     03  wi-bin-ip-num                pic  9(03) binary.\n009700     03  filler redefines wi-bin-ip-num.\n009800         05  filler                   pic  x(01).\n009900         05  wi-bin-ip-bin            pic  x(01).\n010000\n010100     03  wi-bin-ip-addr               pic  9(08) binary.\n010200     03  filler redefines wi-bin-ip-addr.\n010300         05  wi-bin-ip-addr-n1        pic  x(01).\n010400         05  wi-bin-ip-addr-n2        pic  x(01).\n010500         05  wi-bin-ip-addr-n3        pic  x(01).\n010600         05  wi-bin-ip-addr-n4        pic  x(01).\n010700     03  filler redefines wi-bin-ip-addr.\n010800         05  wi-bin-ip      occurs 4 times pic x.\n010900\n011000 01  ws-filler.\n011100     03  filler                       pic x(1).\n011200         88 ws-done              value 'D'.\n011300         88 ws-not-done          value x'ff'.\n011400\n011500     03  filler                       pic x(1).\n011600         88 ws-num-fnd           value 'N'.\n011700         88 ws-not-num-fnd       value x'ff'.\n011800\n011900     03  ws-fnd-comma                 pic 9(01).\n012000\n012100     03  ws-date                      pic x(32).\n012200\n012300     03  ws-pasv-resp                 pic x(30).\n012400\n012500     03  ws-unstring-work             pic x(255).\n012600\n012700     03  ws-initparm-1                pic x(60).\n012800     03  ws-initparm-2                pic x(60).\n012900\n013000     03  ws-debug-secret-word         pic x(5).\n013100         88 ws-default-debug     value spaces.\n013200         88 ws-debug-on          value 'XYZZY'.\n013300\n013400     03  ws-crlf-null                 pic x(3) value x'0d2500'.\n013500     03  filler redefines ws-crlf-null.\n013600         05 ws-crlf                   pic x(2).\n013700         05 filler redefines ws-crlf.\n013800            07  ws-cr                 pic x(1).\n013900            07  ws-lf                 pic x(1).\n014000         05 ws-null                   pic x(1).\n014100     03  ws-sub                       pic x(1) value x'3f'.\n014200\n014300     03  ws-str-ptr                   pic s9(4) value +1.\n014400         88  ws-str-ptr-initial       value +1.\n014500\n014600     03  ws-idx                       pic  9(9) binary.\n014700\n014800     03  ws-loop-cnt                  pic  9(4) binary.\n014900\n015000     03  ws-str-len                   pic  9(8) binary.\n015100\n015200     03  ws-clnt-host-dotted-ip         pic x(15).\n015300     03  ws-clnt-host-ip                pic 9(08) binary.\n015400     03  ws-clnt-hostname               pic x(255).\n015500     03  ws-clnt-hostname-len           pic 9(03) packed-decimal.\n015600\n015700     03  ws-p1                            pic 9(3).\n015800     03  ws-p1-x redefines ws-p1          pic X(3).\n015900     03  ws-p2                            pic 9(3).\n016000     03  ws-p2-x redefines ws-p2          pic X(3).\n016100\n016200     03  ws-recv-data-len             pic  9(8) binary.\n016300 01  ws-data-area                     pic x(32763).\n016400 01  ws-data-area-idx                 pic  9(8) binary.\n016500 01  ws-data-area-len                 pic  9(8) binary.\n016600\n016700 01  ws-work-area                     pic x(32763).\n016800\n016900 01  ws-dblk-area                     pic x(32763).\n017000\n017100 01  wz-soc-function                  pic x(16).\n017200     88  wz-soc-fun-is-initapi     value 'INITAPI         '.\n017300     88  wz-soc-fun-is-socket      value 'SOCKET          '.\n017400     88  wz-soc-fun-is-connect     value 'CONNECT         '.\n017500     88  wz-soc-fun-is-shutdown    value 'SHUTDOWN        '.\n017600     88  wz-soc-fun-is-read        value 'READ            '.\n017700     88  wz-soc-fun-is-write       value 'WRITE           '.\n017800     88  wz-soc-fun-is-close       value 'CLOSE           '.\n017900     88  wz-soc-fun-is-gethostid   value 'GETHOSTID       '.\n018000     88  wz-soc-fun-is-ghba        value 'GETHOSTBYADDR   '.\n018100     88  wz-soc-fun-is-ghbn        value 'GETHOSTBYNAME   '.\n018200\n018300 01  wz-soc-initapi          pic x(16) value 'INITAPI         '.\n018400 01  wz-soc-socket           pic x(16) value 'SOCKET          '.\n018500 01  wz-soc-connect          pic x(16) value 'CONNECT         '.\n018600 01  wz-soc-shutdown         pic x(16) value 'SHUTDOWN        '.\n018700 01  wz-soc-read             pic x(16) value 'READ            '.\n018800 01  wz-soc-write            pic x(16) value 'WRITE           '.\n018900 01  wz-soc-close            pic x(16) value 'CLOSE           '.\n019000 01  wz-soc-get-host-id      pic x(16) value 'GETHOSTID       '.\n019100 01  wz-soc-get-host-by-addr pic x(16) value 'GETHOSTBYADDR   '.\n019200 01  wz-soc-get-host-by-name pic x(16) value 'GETHOSTBYNAME   '.\n019300\n019400 01  wz-errno                         pic 9(08) binary.\n019500     88  wz-all-epipe              value 32.\n019600     88  wz-initapi-ok             value 10197, 0.\n019700     88  wz-connect-reset          value 54.\n019800     88  wz-already-connected      value 56.\n019900     88  wz-connect-timedout       value 60.\n020000     88  wz-connect-refused        value 61.\n020100     88  wz-write-less-than-one    value 10184, 10186.\n020200     88  wz-read-less-than-one     value 10159.\n020300     88  wz-gethost-hostent-bad    value 10214.\n020400 01  wz-errno-2                       pic 9(08) binary.\n020500\n020600 01  wz-cmd--rc                       pic s9(8) binary.\n020700     88  wz-cmd--rc-ok             value +0.\n020800     88  wz-cmd--rc-okay           value +0.\n020900     88  wz-cmd--rc-not-ok         value -1.\n021000     88  wz-cmd--rc-not-okay       value -1.\n021100     88  wz-cmd--rc-nak            value -4.\n021200\n021300 01  wz-data-rc                       pic s9(8) binary.\n021400     88  wz-data-rc-ok             value +0.\n021500     88  wz-data-rc-okay           value +0.\n021600     88  wz-data-rc-not-ok         value -1.\n021700     88  wz-data-rc-not-okay       value -1.\n021800     88  wz-data-rc-nak            value -4.\n021900\n022000 01  wz-soc-maxsoc                    pic s9(4) binary.\n022100     88  wz-default-maxsoc         value 100.\n022200\n022300 01  wz-soc-host-ip                   pic 9(08) binary.\n022400\n022500 01  wz-soc-hostname                  pic X(255).\n022600\n022700 01  wz-soc-ident.\n022800     03  wz-soc-tcpname               pic x(08).\n022900         88  wz-default-tcpname    value 'TCPIP'.\n023000     03  wz-soc-adsname               pic x(08).\n023100\n023200 01  wz-soc-name.\n023300     03  wz-soc-name-family           pic 9(4) binary.\n023400         88  wz-default-family     value 2.\n023500     03  wz-soc-name-port             pic 9(4) binary.\n023600         88  wz-default-cmd--port  value 21.\n023700         88  wz-default-data-port  value 22.\n023800     03  wz-soc-name-ip               pic 9(8) binary.\n023900     03  wz-soc-name-ip-x redefines\n024000         wz-soc-name-ip               pic x(4).\n024100     03  wz-soc-name-rsvd             pic x(8).\n024200\n024300 01  wz-soc-subtask                   pic x(08).\n024400 01  filler redefines wz-soc-subtask.\n024500     03  wz-soc-subtask-eibtaskn      pic 9(07).\n024600     03  wz-soc-subtask-char          pic x(01).\n024700\n024800 01  wz-soc-maxsno                    pic 9(08) binary.\n024900     88  wz-default-maxsno         value 99.\n025000\n025100*           addressing family\n025200 01  wz-soc-af                        pic 9(08) binary.\n025300     88  wz-default-af             value 2.\n025400     88  wz-soc-af-inet            value 2.\n025500\n025600 01  wz-soc-type                      pic 9(08) binary.\n025700     88  wz-default-soctype        value 1.\n025800     88  wz-soc-soctype-stream     value 1.\n025900     88  wz-soc-soctype-datagram   value 2.\n026000     88  wz-soc-soctype-raw        value 3.\n026100\n026200 01  wz-soc-proto                     pic 9(08) binary.\n026300     88  wz-default-proto          value 0.\n026400\n026500 01  wz-soc-ghbn-hostname             pic x(255).\n026600 01  wz-soc-ghbn-namelen              pic 9(08) binary.\n026700 01  wz-soc-ghbn-hostent              pic 9(08) binary.\n026800\n026900 01  wz-soc-ghba-host-ip              pic 9(08) binary.\n027000 01  wz-soc-ghba-hostent              pic 9(08) binary.\n027100\n027200 01  wz-c08-hostent-addr              pic 9(08) binary.\n027300 01  wz-c08-hostname-len              pic 9(04) binary.\n027400 01  wz-c08-hostname                  pic X(255).\n027500 01  wz-c08-hostalias-cnt             pic 9(04) binary value 0.\n027600 01  wz-c08-hostalias-seq             pic 9(04) binary value 0.\n027700 01  wz-c08-hostalias-len             pic 9(04) binary value 0.\n027800 01  wz-c08-hostalias                 pic x(255).\n027900 01  wz-c08-host-ip-type              pic 9(04) binary.\n028000 01  wz-c08-host-ip-len               pic 9(04) binary.\n028100 01  wz-c08-host-ip-cnt               pic 9(04) binary.\n028200 01  wz-c08-host-ip-seq               pic 9(04) binary value 0.\n028300 01  wz-c08-host-ip                   pic 9(08) binary.\n028400\n028500 01  wz-soc-data-s                    pic 9(04) binary.\n028600 01  wz-soc-cmd--s                    pic 9(04) binary.\n028700\n028800 01  wz-soc-work-buffer               pic x(4096).\n028900 01  wz-soc-read-cnt                  pic 9(04) binary.\n029000\n029100 01  wz-soc-line-buffer               pic x(4096).\n029200 01  wz-soc-line-cnt                  pic 9(04) binary.\n029300\n029400 01  wz-soc-read-buffer               pic x(4096).\n029500 01  wz-soc-read-nbyte                pic 9(08) binary.\n029600     88 wz-soc-read-max            value 4096.\n029700\n029800 01  wz-soc-write-buffer              pic x(4096).\n029900 01  wz-soc-write-nbyte               pic 9(08) binary.\n030000 01  wz-soc-write-max                 pic 9(08) binary\n030100                                   value 4096.\n030200\n030300 01  wz-crlf00                        pic x(03) value x'0d0a00'.\n030400 01  filler    redefines wz-crlf00.\n030500     02 wz-crlf                       pic x(02).\n030600     02 filler redefines wz-crlf.\n030700        03 wz-cr                      pic x(01).\n030800        03 wz-lf                      pic x(01).\n030900     02 wz-null                       pic x(01).\n031000 01  wz-sub                           pic x(01) value x'1a'.\n031100\n031200 01  wzz-soc-fun-is-shutdown          pic x(16) value 'SHUTDOWN'.\n031300 01  wzz-soc-shutdown-s               pic 9(04) binary.\n031400 01  wzz-soc-shutdown-how             pic 9(08) binary.\n031500     88  wzz-shutdown-end-from     value 0.\n031600     88  wzz-shutdown-end-to       value 1.\n031700     88  wzz-shutdown-end-both     value 2.\n031800 01  wzz-errno                        pic 9(08) binary.\n031900 01  wzz-retcode                      pic s9(8) binary.\n032000     88  wzz-retcode-ok            value +0.\n032100     88  wzz-retcode-okay          value +0.\n032200     88  wzz-retcode-not-ok        value -1.\n032300     88  wzz-retcode-not-okay      value -1.\n032400\n032500 01  filler.\n032600     03  filler                      pic  x(04) value '****'.\n032700     03  filler                      pic  x(08) value 'end  w/s'.\n032800     03  filler                      pic  x(04) value '****'.\n032900     eject\n033000 linkage section.\n033100 01  filler                          pic x.\n033200     COPY  SFTPXXIX.\n033300     eject\n033400 procedure division.\n033500\n033600     perform 1000-initialize thru\n033700             1000-initialize-exit\n033800\n033900     perform 2000-init-tcpip-data thru\n034000             2000-init-tcpip-data-exit\n034100\n034200     perform 2100-obtain-socket thru\n034300             2100-obtain-socket-exit\n034400\n034500     perform 2200-connect-to-server thru\n034600             2200-connect-to-server-exit\n034700\n034800     perform 3000-move-data thru\n034900             3000-move-data-exit\n035000\n035100     perform 4000-close-socket thru\n035200             4000-close-socket-exit\n035300\n035400     if ws-debug-on\n035500         move '================='\n035600           to we-msg-text\n035700         call 'tcpmessage' using we-msg\n035800         move ' '\n035900           to we-msg-text\n036000         call 'tcpmessage' using we-msg\n036100     end-if\n036200\n036300     exec cics return\n036400     end-exec\n036500\n036600     goback\n036700     .\n036800\n036900 1000-initialize.\n037000\n037100     move ft-local-program-name\n037200       to we-msg-pgm-id\n037300\n037400     if eibcalen = length of ft-parms\n037500         set address of ft-parms\n037600          to address of dfhcommarea\n037700         if ft-head-valid and ft-tail-valid\n037800             set ft-resp-okay to true\n037900\n038000             if ft-trans-dir-valid   and\n038100                ft-trans-type-valid  and\n038200                ( (ft-src-valid-ts-q and ft-valid-queue-disp) or\n038300                  (ft-send-ptr       and ft-send-file)\n038400                ) and\n038500                ( (ft-send-file      and ft-src-valid-send)   or\n038600                  (ft-recv-file      and ft-src-valid-recv)\n038700                )\n038800                 if ft-send-ptr\n038900                     set address of ft-data-area\n039000                      to ft-data-ptr\n039100                     if ft-data-valid\n039200                         continue\n039300                     else\n039400                         set ft-resp-parm-error to true\n039500                     end-if\n039600                 end-if\n039700\n039800                 if ft-recv-file and\n039900                    ft-binary-transfer and\n040000                    ft-ts-recv-bin-rec-size < one\n040100                     set ft-dflt-bin-rec-size to true\n040200                 end-if\n040300\n040400                 compute ft-num-bytes-trans = zero\n040500\n040600                 call 'GETDATE' using ws-date\n040700\n040800                 initialize wz-soc-cmd--s,\n040900                            wz-soc-data-s,\n041000                            wz-soc-subtask,\n041100                            wz-soc-name,\n041200                            wz-soc-ident,\n041300                            wz-soc-line-cnt,\n041400                            wz-cmd--rc,\n041500                            wz-data-rc,\n041600                            wz-errno\n041700\n041800                 exec cics inquire system\n041900                      jobname (wc-cics-job-name)\n042000                      nohandle\n042100                 end-exec\n042200\n042300                 exec cics assign\n042400                      applid (wc-cics-applid)\n042500                      initparm (wc-cics-initparm)\n042600                      initparmlen (wc-cics-initparmlen)\n042700                      nohandle\n042800                 end-exec\n042900\n043000                 move length of ft-user-name\n043100                   to ws-str-len\n043200                 call 'RMVWHTSP' using ft-user-name, ws-str-len\n043300\n043400                 move length of ft-password\n043500                   to ws-str-len\n043600                 call 'RMVWHTSP' using ft-password, ws-str-len\n043700\n043800                 move length of ft-account\n043900                   to ws-str-len\n044000                 call 'RMVWHTSP' using ft-account, ws-str-len\n044100\n044200                 move length of ft-srvr-hostname\n044300                   to ws-str-len\n044400                 call 'RMVWHTSP' using ft-srvr-hostname\n044500                                       ws-str-len\n044600                 compute ft-srvr-hostname-len = ws-str-len\n044700\n044800                 move length of ft-file-name\n044900                   to ws-str-len\n045000                 call 'RMVWHTSP' using ft-file-name, ws-str-len\n045100\n045200                 perform 7000-get-host-ip thru\n045300                         7000-get-host-ip-exit\n045400\n045500                 move wz-soc-host-ip\n045600                   to wz-soc-ghba-host-ip,\n045700                      ws-clnt-host-ip\n045800\n045900                 perform 7100-get-host-by-addr thru\n046000                         7100-get-host-by-addr-exit\n046100\n046200                 move wz-c08-hostname (one:wz-c08-hostname-len)\n046300                   to wz-soc-hostname,\n046400                      ws-clnt-hostname\n046500                 move wz-c08-hostname-len\n046600                   to ws-clnt-hostname-len\n046700                 perform 1050-process-initparm thru\n046800                         1050-process-initparm-exit\n046900\n047000                 if ws-debug-on\n047100                     move '-----------------'\n047200                       to we-msg-text\n047300                     call 'tcpmessage' using we-msg\n047400                     string  '* I:**> '\n047500                             ws-date\n047600                             ' ** '\n047700                             wc-cics-applid\n047800                             ' ** '\n047900                             wc-cics-job-name\n048000                             ' <'\n048100                             delimited by size\n048200                             into we-msg-text\n048300                     end-string\n048400                     call 'tcpmessage' using we-msg\n048500                     string  '* I: Host Name: '\n048600                             ws-clnt-hostname(1:80)\n048700                             delimited by size\n048800                             into we-msg-text\n048900                     end-string\n049000                     call 'tcpmessage' using we-msg\n049100                 end-if\n049200\n049300                 perform 1060-process-dest thru\n049400                         1060-process-dest-exit\n049500             else\n049600                 set ft-resp-parm-error to true\n049700             end-if\n049800         else\n049900             exec cics abend\n050000                       abcode('FTPC')\n050100                       cancel\n050200                       nodump\n050300             end-exec\n050400         end-if\n050500     else\n050600         exec cics abend\n050700                   abcode('FTPL')\n050800                   cancel\n050900                   nodump\n051000         end-exec\n051100     end-if\n051200     .\n051300 1000-initialize-exit. exit.\n051400\n051500 1050-process-initparm.\n051600     move low-values    to ws-debug-secret-word,\n051700                           ws-initparm-2\n051800\n051900     if  wc-cics-initparmlen > zero\n052000         unstring wc-cics-initparm\n052100                  delimited by ',' or ' ' or ws-null\n052200                  into ws-debug-secret-word\n052300                       ws-initparm-2\n052400         end-unstring\n052500\n052600     else\n052700         set ws-default-debug to true\n052800     end-if\n052900     .\n053000 1050-process-initparm-exit. exit.\n053100\n053200 1060-process-dest.\n053300     if ft-srvr-host-ip = zero\n053400         unstring ft-srvr-host-dotted-ip\n053500                  delimited by '.' or ' ' or ws-null\n053600                  into wi-dotted-ip (1)\n053700                       wi-dotted-ip (2)\n053800                       wi-dotted-ip (3)\n053900                       wi-dotted-ip (4)\n054000         end-unstring\n054100         perform\n054200           test after\n054300           varying wi-idx from one by one\n054400           until wi-idx = four\n054500             if wi-dotted-ip (wi-idx) is numeric\n054600                 move wi-dotted-ip (wi-idx)\n054700                   to wi-bin-ip-num\n054800                 move wi-bin-ip-bin\n054900                   to wi-bin-ip (wi-idx)\n055000             else\n055100                 compute wi-bin-ip-addr = zero\n055200                 compute wi-idx = four\n055300             end-if\n055400         end-perform\n055500\n055600         if wi-bin-ip-addr > zero\n055700             if ft-srvr-hostname-len = zero\n055800                 move wi-bin-ip-addr\n055900                   to ft-srvr-host-ip\n056000             else\n056100                 set ft-resp-dotted-hostname-err\n056200                  to true\n056300             end-if\n056400         else\n056500             if ft-srvr-hostname-len > zero\n056600                 move ft-srvr-hostname\n056700                   to wz-soc-ghbn-hostname\n056800                 move ft-srvr-hostname-len\n056900                   to wz-soc-ghbn-namelen\n057000                 perform 7200-get-host-by-name thru\n057100                         7200-get-host-by-name-exit\n057200                 move wz-c08-host-ip\n057300                   to ft-srvr-host-ip\n057400             else\n057500                 set ft-resp-dotted-hostname-err\n057600                  to true\n057700             end-if\n057800         end-if\n057900     else\n058000         continue\n058100     end-if\n058200     if not ft-resp-dotted-hostname-err\n058300         if not ft-valid-cmd--port\n058400             if ft-srvr-cmd--port = zero\n058500                 set ft-srvr-dflt-cmd--port\n058600                  to true\n058700             else\n058800                 set ft-resp-port-error\n058900                  to true\n059000             end-if\n059100         else\n059200             continue\n059300         end-if\n059400     else\n059500         continue\n059600     end-if\n059700     .\n059800 1060-process-dest-exit. exit.\n059900\n060000 2000-init-tcpip-data.\n060100     if ft-resp-okay\n060200         set wz-default-maxsoc\n060300             wz-default-tcpname\n060400             wz-default-maxsno\n060500             wz-default-af\n060600             wz-default-family\n060700             wz-default-cmd--port\n060800             wz-default-soctype\n060900             wz-default-proto\n061000          to true\n061100\n061200         move ft-srvr-cmd--port\n061300           to wz-soc-name-port\n061400\n061500         move wc-cics-applid\n061600           to wz-soc-adsname\n061700\n061800         move ft-srvr-host-ip\n061900           to wz-soc-name-ip\n062000\n062100         move eibtaskn to wz-soc-subtask-eibtaskn\n062200         move 'C'  to wz-soc-subtask-char\n062300         move zero to wz-cmd--rc, wz-errno\n062400     else\n062500         set wz-cmd--rc-not-ok to true\n062600     end-if\n062700     .\n062800 2000-init-tcpip-data-exit. exit.\n062900\n063000 2100-obtain-socket.\n063100     if wz-cmd--rc-ok\n063200         set wz-soc-fun-is-initapi to true\n063300         call 'EZACICSO' using wz-soc-initapi\n063400                               wz-soc-maxsoc\n063500                               wz-soc-ident\n063600                               wz-soc-subtask\n063700                               wz-soc-maxsno\n063800                               wz-errno\n063900                               wz-cmd--rc\n064000\n064100         if wz-initapi-ok\n064200             set wz-soc-fun-is-socket to true\n064300             call 'EZACICSO' using wz-soc-socket\n064400                                   wz-soc-af\n064500                                   wz-soc-type\n064600                                   wz-soc-proto\n064700                                   wz-errno\n064800                                   wz-cmd--rc\n064900             if wz-cmd--rc >= zero\n065000                 compute wz-soc-cmd--s = wz-cmd--rc\n065100                 compute wz-cmd--rc = zero\n065200                 move 'D' to wz-soc-subtask-char\n065300                 call 'EZACICSO' using wz-soc-socket\n065400                                       wz-soc-af\n065500                                       wz-soc-type\n065600                                       wz-soc-proto\n065700                                       wz-errno\n065800                                       wz-data-rc\n065900                 if wz-data-rc >= zero\n066000                     compute wz-soc-data-s = wz-data-rc\n066100                     compute wz-data-rc = zero\n066200                 else\n066300                     set ft-resp-obtain-data-error to true\n066400                 end-if\n066500             else\n066600                 set ft-resp-obtain-error to true\n066700             end-if\n066800         else\n066900             set ft-resp-initapi-error to true\n067000         end-if\n067100     else\n067200         continue\n067300     end-if\n067400     .\n067500 2100-obtain-socket-exit. exit.\n067600\n067700 2200-connect-to-server.\n067800     if wz-cmd--rc-ok\n067900         set wz-soc-fun-is-connect to true\n068000         call 'EZACICSO' using wz-soc-connect\n068100                               wz-soc-cmd--s\n068200                               wz-soc-name\n068300                               wz-errno\n068400                               wz-cmd--rc\n068500         if wz-cmd--rc-ok\n068600             perform 6000-read-until-empty thru\n068700                     6000-read-until-empty-exit\n068800             if ip-rc-220-ready\n068900                 if ws-debug-on\n069000                     move wz-soc-name-port\n069100                       to we-h-num\n069200                     string '* I: Connected on Port <'\n069300                             we-h-num '>'\n069400                             delimited by size\n069500                             into we-msg-text\n069600                     end-string\n069700                     call 'tcpmessage' using we-msg\n069800                 end-if\n069900                 continue\n070000             else\n070100                 set wz-cmd--rc-not-okay to true\n070200                 set ft-resp-connect-error to true\n070300             end-if\n070400         else\n070500             set ft-resp-connect-error to true\n070600         end-if\n070700     end-if\n070800     .\n070900 2200-connect-to-server-exit. exit.\n071000\n071100 3000-move-data.\n071200     if wz-cmd--rc-ok\n071300         perform 3100-signon thru\n071400                 3100-signon-exit\n071500         perform 3200-transfer-data thru\n071600                 3200-transfer-data-exit\n071700         perform 3300-signoff thru\n071800                 3300-signoff-exit\n071900     end-if\n072000     .\n072100 3000-move-data-exit. exit.\n072200\n072300 3100-signon.\n072400     if wz-cmd--rc-ok\n072500         set ws-str-ptr-initial     to true\n072600         move low-values to wz-soc-write-buffer\n072700         string\n072800             'USER ' delimited by size\n072900             ft-user-name delimited by ws-null\n073000             ws-crlf\n073100                delimited by size\n073200             into wz-soc-write-buffer\n073300             pointer ws-str-ptr\n073400         end-string\n073500         compute wz-soc-write-nbyte = ws-str-ptr - one\n073600         perform 3900-send-to-server thru\n073700                 3900-send-to-server-exit\n073800         evaluate true\n073900             when ip-rc-331-need-pass\n074000                 set ws-str-ptr-initial to true\n074100                 move low-values to wz-soc-write-buffer\n074200                 string\n074300                     'PASS ' delimited by size\n074400                     ft-password  delimited by ws-null\n074500                     ws-crlf\n074600                        delimited by size\n074700                     into wz-soc-write-buffer\n074800                     pointer ws-str-ptr\n074900                 end-string\n075000                 compute wz-soc-write-nbyte = ws-str-ptr - one\n075100                 perform 3900-send-to-server thru\n075200                         3900-send-to-server-exit\n075300                 evaluate true\n075400                     when ip-rc-230-usr-logd-on\n075500                         continue\n075600                     when ip-rc-332-need-acct\n075700                         set ws-str-ptr-initial to true\n075800                         move low-values to wz-soc-write-buffer\n075900                         string\n076000                             'ACCT ' delimited by size\n076100                             ft-account delimited by ws-null\n076200                             ws-crlf\n076300                                delimited by size\n076400                             into wz-soc-write-buffer\n076500                             pointer ws-str-ptr\n076600                         end-string\n076700                         compute wz-soc-write-nbyte\n076800                               = ws-str-ptr - one\n076900                         perform 3900-send-to-server thru\n077000                                 3900-send-to-server-exit\n077100                         evaluate true\n077200                             when ip-rc-230-usr-logd-on\n077300                                 continue\n077400                             when other\n077500                                 set ft-resp-ft-error to true\n077600                         end-evaluate\n077700                     when other\n077800                         set ft-resp-ft-error to true\n077900                 end-evaluate\n078000             when other\n078100                 set ft-resp-ft-error to true\n078200         end-evaluate\n078300     else\n078400         continue\n078500     end-if\n078600     .\n078700 3100-signon-exit. exit.\n078800\n078900 3200-transfer-data.\n079000     if wz-cmd--rc-ok and ft-resp-okay\n079100         if ft-binary-transfer\n079200             set ws-str-ptr-initial to true\n079300             move low-values to wz-soc-write-buffer\n079400             string\n079500                 'TYPE I' delimited by size\n079600                 ws-crlf\n079700                    delimited by size\n079800                 into wz-soc-write-buffer\n079900                 pointer ws-str-ptr\n080000             end-string\n080100             compute wz-soc-write-nbyte\n080200                   = ws-str-ptr - one\n080300             perform 3900-send-to-server thru\n080400                     3900-send-to-server-exit\n080500             evaluate true\n080600                 when ip-rc-200-ready\n080700                     continue\n080800                 when other\n080900                     set ft-resp-ft-error to true\n081000             end-evaluate\n081100         end-if\n081200         if ft-resp-okay\n081300             set ws-str-ptr-initial to true\n081400             move low-values to wz-soc-write-buffer\n081500             string\n081600                 'PASV' delimited by size\n081700                 ws-crlf\n081800                    delimited by size\n081900                 into wz-soc-write-buffer\n082000                 pointer ws-str-ptr\n082100             end-string\n082200             compute wz-soc-write-nbyte\n082300                   = ws-str-ptr - one\n082400             perform 3900-send-to-server thru\n082500                     3900-send-to-server-exit\n082600             evaluate true\n082700                 when ip-rc-227-ent-pas-mod\n082800                     perform 3202-connect-data-port thru\n082900                             3202-connect-data-port-exit\n083000                 when other\n083100                     set ft-resp-ft-error to true\n083200             end-evaluate\n083300\n083400             if ft-resp-okay\n083500                 evaluate true\n083600                     when ft-send-file\n083700                         perform 3210-send-file thru\n083800                                 3210-send-file-exit\n083900                     when ft-receive-file\n084000                         perform 3220-recv-file thru\n084100                                 3220-recv-file-exit\n084200                     when other\n084300                         continue\n084400                 end-evaluate\n084500                 perform 4200-close-data-socket thru\n084600                         4200-close-data-socket-exit\n084700             end-if\n084800         end-if\n084900     else\n085000         continue\n085100     end-if\n085200     .\n085300 3200-transfer-data-exit. exit.\n085400\n085500 3202-connect-data-port.\n085600     unstring ip-rc-text\n085700              delimited by '(' or ')'\n085800              into ws-unstring-work\n085900                   ws-pasv-resp\n086000                   ws-unstring-work\n086100     end-unstring\n086200     unstring ws-pasv-resp\n086300              delimited by ',' or ' ' or ws-null\n086400              into ws-unstring-work\n086500                   ws-unstring-work\n086600                   ws-unstring-work\n086700                   ws-unstring-work\n086800                   ws-p1\n086900                   ws-p2\n087000                   ws-unstring-work\n087100     end-unstring\n087200     compute ft-srvr-data-port = (ws-p1 * 256) + ws-p2\n087300     move ft-srvr-data-port\n087400       to wz-soc-name-port\n087500     set wz-soc-fun-is-connect to true\n087600     call 'EZACICSO' using wz-soc-connect\n087700                           wz-soc-data-s\n087800                           wz-soc-name\n087900                           wz-errno\n088000                           wz-data-rc\n088100     if not wz-data-rc-okay\n088200         set ft-resp-data-conn-error to true\n088300     else\n088400         if ws-debug-on\n088500             move wz-soc-name-port\n088600               to we-h-num\n088700             string\n088800                 '*DI: Connected on Port <'\n088900                 we-h-num '>'\n089000                 delimited by size\n089100                 into we-msg-text\n089200             end-string\n089300             call 'tcpmessage' using we-msg\n089400         end-if\n089500     end-if\n089600     .\n089700 3202-connect-data-port-exit. exit.\n089800\n089900 3210-send-file.\n090000     evaluate true\n090100         when ft-send-ts-q\n090200             perform 3212-send-ts-q thru\n090300                     3212-send-ts-q-exit\n090400         when ft-send-ptr\n090500             perform 3214-send-ptr thru\n090600                     3214-send-ptr-exit\n090700         when other\n090800             set ft-resp-data-src-wrong-error\n090900              to true\n091000     end-evaluate\n091100     .\n091200 3210-send-file-exit. exit.\n091300\n091400 3212-send-ts-q.\n091500     compute ft-ts-num-items = zero\n091600     compute wc-cics-item    = one\n091700     perform 3218-send-put-cmd thru\n091800             3218-send-put-cmd-exit\n091900     if ft-resp-okay\n092000         perform with test after\n092100                 until wc-cics-resp not = dfhresp(normal)\n092200                    or not ft-resp-okay\n092300             if ft-text-transfer\n092400                 compute wc-cics-length\n092500                       = length of ws-data-area -\n092600                         length of ws-crlf\n092700             else\n092800                 compute wc-cics-length\n092900                       = length of ws-data-area\n093000             end-if\n093100             move low-values to ws-data-area\n093200             exec cics readq ts\n093300                       qname  (ft-ts-qname)\n093400                       into   (ws-data-area)\n093500                       length (wc-cics-length)\n093600                       item   (wc-cics-item)\n093700                       resp   (wc-cics-resp)\n093800                       resp2  (wc-cics-resp2)\n093900             end-exec\n094000             evaluate wc-cics-resp\n094100                 when dfhresp(normal)\n094200                     compute wc-cics-item\n094300                           = wc-cics-item  + one\n094400                     compute ft-ts-num-items\n094500                           = ft-ts-num-items + one\n094600                     if ft-text-transfer\n094700                         compute ws-data-area-len\n094800                               = wc-cics-length +\n094900                                 length of ws-crlf\n095000                         move ws-crlf\n095100                           to ws-data-area\n095200                              ( wc-cics-length + one:\n095300                                length of ws-crlf )\n095400                     else\n095500                         compute ws-data-area-len\n095600                               = wc-cics-length\n095700                     end-if\n095800                     perform 5200-write-data-socket thru\n095900                             5200-write-data-socket-exit\n096000                 when dfhresp(itemerr)\n096100                     continue\n096200                 when other\n096300                     set ft-resp-read-error to true\n096400             end-evaluate\n096500         end-perform\n096600         if ft-resp-okay and ft-del--queue\n096700             exec cics deleteq ts\n096800                       qname  (ft-ts-qname)\n096900                       resp   (wc-cics-resp)\n097000                       resp2  (wc-cics-resp2)\n097100             end-exec\n097200             if wc-cics-resp = dfhresp(normal)\n097300                 if ws-debug-on\n097400                     string\n097500                         '* I: Queue ' ft-ts-qname\n097600                         ' has been deleted.'\n097700                         delimited by size\n097800                         into we-msg-text\n097900                     end-string\n098000                     call 'tcpmessage' using we-msg\n098100                 end-if\n098200             else\n098300                 string\n098400                     '* I: Delete Queue ' ft-ts-qname\n098500                     ' failed. Resp<' wc-cics-resp '>'\n098600                     ' Resp2<' wc-cics-resp2 '>'\n098700                     delimited by size\n098800                     into we-msg-text\n098900                 end-string\n099000                 call 'tcpmessage' using we-msg\n099100             end-if\n099200         end-if\n099300     end-if\n099400     .\n099500 3212-send-ts-q-exit. exit.\n099600\n099700 3214-send-ptr.\n099800     if ft-data-len > zero\n099900         set address of ft-data-area\n100000          to ft-data-ptr\n100100         if ft-data-valid\n100200             perform 3218-send-put-cmd thru\n100300                     3218-send-put-cmd-exit\n100400             if ft-resp-okay\n100500                 move low-values to ws-data-area\n100600                 move ft-data(one:ft-data-len)\n100700                   to ws-data-area(one:ft-data-len)\n100800                 compute ws-data-area-len = ft-data-len\n100900                 perform 5200-write-data-socket thru\n101000                         5200-write-data-socket-exit\n101100             end-if\n101200         else\n101300             set ft-resp-send-data-error to true\n101400         end-if\n101500     else\n101600         set ft-resp-send-data-error to true\n101700     end-if\n101800     .\n101900 3214-send-ptr-exit. exit.\n102000\n102100 3218-send-put-cmd.\n102200     set ws-str-ptr-initial to true\n102300     move low-values to wz-soc-write-buffer\n102400     string\n102500         'STOR ' delimited by size\n102600         ft-file-name delimited by ws-null\n102700         ws-crlf\n102800            delimited by size\n102900         into wz-soc-write-buffer\n103000         pointer ws-str-ptr\n103100     end-string\n103200     compute wz-soc-write-nbyte\n103300           = ws-str-ptr - one\n103400     perform 3900-send-to-server thru\n103500             3900-send-to-server-exit\n103600     evaluate true\n103700         when ip-rc-150-fs-okay\n103800             continue\n103900         when other\n104000             set ft-resp-ft-error to true\n104100     end-evaluate\n104200     .\n104300 3218-send-put-cmd-exit. exit.\n104400\n104500 3220-recv-file.\n104600     evaluate true\n104700         when ft-recv-ts-q\n104800             perform 3222-recv-ts-q thru\n104900                     3222-recv-ts-q-exit\n105000         when other\n105100             set ft-resp-data-src-wrong-error\n105200              to true\n105300     end-evaluate\n105400     .\n105500 3220-recv-file-exit. exit.\n105600\n105700 3222-recv-ts-q.\n105800     exec cics deleteq ts\n105900               qname(ft-ts-qname)\n106000               nohandle\n106100     end-exec\n106200     compute ft-ts-num-items = zero\n106300     perform 3228-send-get-cmd thru\n106400             3228-send-get-cmd-exit\n106500     compute wz-soc-read-nbyte = zero\n106600     if ft-resp-okay\n106700         perform with test after\n106800                 until wc-cics-resp not = dfhresp(normal)\n106900                    or not ft-resp-okay\n107000                    or wz-data-rc-not-okay\n107100                    or wc-cics-length = zero\n107200             perform 6200-read-data-record thru\n107300                     6200-read-data-record-exit\n107400             compute wc-cics-length = ws-recv-data-len\n107500             if wc-cics-length > zero\n107600                 exec cics writeq ts\n107700                           qname (ft-ts-qname)\n107800                           from (ws-dblk-area)\n107900                           length (wc-cics-length)\n108000                           resp (wc-cics-resp)\n108100                           resp2 (wc-cics-resp2)\n108200                 end-exec\n108300                 evaluate wc-cics-resp\n108400                     when dfhresp(normal)\n108500                         compute ft-ts-num-items\n108600                               = ft-ts-num-items + one\n108700                     when other\n108800                         set ft-resp-read-error to true\n108900                 end-evaluate\n109000             else\n109100                 continue\n109200             end-if\n109300         end-perform\n109400     end-if\n109500     .\n109600 3222-recv-ts-q-exit. exit.\n109700\n109800 3228-send-get-cmd.\n109900     set ws-str-ptr-initial to true\n110000     move low-values to wz-soc-write-buffer\n110100     string\n110200         'RETR ' delimited by size\n110300         ft-file-name delimited by ws-null\n110400         ws-crlf\n110500            delimited by size\n110600         into wz-soc-write-buffer\n110700         pointer ws-str-ptr\n110800     end-string\n110900     compute wz-soc-write-nbyte\n111000           = ws-str-ptr - one\n111100     perform 3900-send-to-server thru\n111200             3900-send-to-server-exit\n111300     evaluate true\n111400         when ip-rc-150-fs-okay\n111500             continue\n111600         when other\n111700             set ft-resp-ft-error to true\n111800     end-evaluate\n111900     .\n112000 3228-send-get-cmd-exit. exit.\n112100\n112200 3300-signoff.\n112300     if wz-cmd--rc-ok\n112400         compute ws-loop-cnt = ws-loop-cnt + one\n112500         set ws-str-ptr-initial     to true\n112600         move low-values to wz-soc-write-buffer\n112700         string\n112800             'QUIT'\n112900             ws-crlf\n113000                delimited by size\n113100             into wz-soc-write-buffer\n113200             pointer ws-str-ptr\n113300         end-string\n113400         compute wz-soc-write-nbyte = ws-str-ptr - one\n113500         perform 3900-send-to-server thru\n113600                 3900-send-to-server-exit\n113700     else\n113800         continue\n113900     end-if\n114000     .\n114100 3300-signoff-exit. exit.\n114200\n114300 3900-send-to-server.\n114400     perform 5000-write-socket thru\n114500             5000-write-socket-exit\n114600     perform 6000-read-until-empty thru\n114700             6000-read-until-empty-exit\n114800     .\n114900 3900-send-to-server-exit. exit.\n115000\n115100 4000-close-socket.\n115200     if wz-cmd--rc-ok\n115300         set wz-soc-fun-is-close to true\n115400         call 'EZACICSO' using wz-soc-close\n115500                               wz-soc-cmd--s\n115600                               wz-errno\n115700                               wz-cmd--rc\n115800         if wz-cmd--rc-ok\n115900             continue\n116000         else\n116100             set ft-resp-close-error to true\n116200         end-if\n116300     else\n116400         move wz-soc-cmd--s  to wzz-soc-shutdown-s\n116500         perform 4500-shutdown-socket thru\n116600                 4500-shutdown-socket-exit\n116700     end-if\n116800     .\n116900 4000-close-socket-exit. exit.\n117000\n117100 4200-close-data-socket.\n117200     if wz-cmd--rc-ok\n117300         set wz-soc-fun-is-close to true\n117400         call 'EZACICSO' using wz-soc-close\n117500                               wz-soc-data-s\n117600                               wz-errno\n117700                               wz-data-rc\n117800         if wz-data-rc-ok\n117900             continue\n118000         else\n118100             set ft-resp-close-error to true\n118200         end-if\n118300     else\n118400         move wz-soc-data-s  to wzz-soc-shutdown-s\n118500         perform 4500-shutdown-socket thru\n118600                 4500-shutdown-socket-exit\n118700     end-if\n118800     .\n118900 4200-close-data-socket-exit. exit.\n119000\n119100 4500-shutdown-socket.\n119200     if  wzz-soc-shutdown-s > zero\n119300         set wzz-shutdown-end-both to true\n119400         call 'EZACICSO' using wzz-soc-fun-is-shutdown\n119500                               wzz-soc-shutdown-s\n119600                               wzz-soc-shutdown-how\n119700                               wzz-errno\n119800                               wzz-retcode\n119900         if wzz-retcode-ok\n120000             continue\n120100         else\n120200             set ft-resp-shutdown-error to true\n120300         end-if\n120400     end-if\n120500     .\n120600 4500-shutdown-socket-exit. exit.\n120700\n120800 5000-write-socket.\n120900     if wz-cmd--rc-ok\n121000         if ws-debug-on\n121100             move wz-soc-write-nbyte\n121200               to we-f-num\n121300             if wz-soc-write-buffer(one:four) = 'PASS'\n121400                 string\n121500                     '* C:<' we-f-num '>'\n121600                     'PASS *******************'\n121700                     delimited by size\n121800                     into we-msg-text\n121900                 end-string\n122000             else\n122100                 string\n122200                     '* C:<' we-f-num '>'\n122300                     wz-soc-write-buffer(1:80)\n122400                     delimited by size\n122500                     into we-msg-text\n122600             end-if\n122700             call 'tcpmessage' using we-msg\n122800         end-if\n122900         call 'EZACIC04' using wz-soc-write-buffer\n123000                               wz-soc-write-nbyte\n123100         if wz-soc-write-nbyte >= zero\n123200            and wz-soc-write-nbyte <= wz-soc-write-max\n123300             set wz-soc-fun-is-write to true\n123400             call 'EZACICSO' using wz-soc-write\n123500                                   wz-soc-cmd--s\n123600                                   wz-soc-write-nbyte\n123700                                   wz-soc-write-buffer\n123800                                   wz-errno\n123900                                   wz-cmd--rc\n124000             if wz-cmd--rc > zero\n124100                 if wz-cmd--rc = wz-soc-write-nbyte\n124200                     continue\n124300                 else\n124400                     move wz-cmd--rc\n124500                       to we-f-num\n124600                     string\n124700                         '* I: write count mismatch '\n124800                         ' OUT=' we-f-num\n124900                         delimited by size\n125000                         into we-msg-text\n125100                     end-string\n125200                     call 'tcpmessage' using we-msg\n125300                 end-if\n125400                 set wz-cmd--rc-ok to true\n125500             else\n125600                 set ft-resp-write-error to true\n125700             end-if\n125800             if ws-debug-on and wz-cmd--rc < zero\n125900                 move wz-errno   to we-f-num\n126000                 move wz-cmd--rc to we-f-num-2\n126100                 string\n126200                     '* I: ERRNO<' we-f-num '>'\n126300                     ' RC<-' we-f-num-2 '>'\n126400                     delimited by size\n126500                     into we-msg-text\n126600                 end-string\n126700                 call 'tcpmessage' using we-msg\n126800             end-if\n126900         else\n127000             set ft-resp-write-error       to true\n127100             set ft-resp-write-len-error   to true\n127200             compute wz-cmd--rc = -1\n127300         end-if\n127400     end-if\n127500     .\n127600 5000-write-socket-exit. exit.\n127700\n127800 5200-write-data-socket.\n127900     if wz-data-rc-ok\n128000         if ws-debug-on\n128100             move ws-data-area-len\n128200               to we-f-num\n128300             string\n128400                 '*DC:<' we-f-num '>'\n128500                 ws-data-area(1:80)\n128600                 delimited by size\n128700                 into we-msg-text\n128800             end-string\n128900             call 'tcpmessage' using we-msg\n129000         end-if\n129100         if ft-text-transfer\n129200             call 'EZACIC04' using ws-data-area\n129300                                   ws-data-area-len\n129400         end-if\n129500         set wz-soc-fun-is-write to true\n129600         if ws-data-area-len > zero\n129700             call 'EZACICSO' using wz-soc-write\n129800                                   wz-soc-data-s\n129900                                   ws-data-area-len\n130000                                   ws-data-area\n130100                                   wz-errno\n130200                                   wz-data-rc\n130300             if wz-data-rc > zero\n130400                 compute ft-num-bytes-trans\n130500                       = ft-num-bytes-trans + wz-data-rc\n130600                 if wz-data-rc = ws-data-area-len\n130700                     continue\n130800                 else\n130900                     move wz-data-rc\n131000                       to we-f-num\n131100                     string '*DI:OUT=' we-f-num\n131200                         delimited by size\n131300                         into we-msg-text\n131400                     end-string\n131500                     call 'tcpmessage' using we-msg\n131600                 end-if\n131700                 set wz-data-rc-ok to true\n131800             else\n131900                 set ft-resp-write-error to true\n132000             end-if\n132100             if ws-debug-on and wz-data-rc < zero\n132200                 move wz-errno   to we-f-num\n132300                 move wz-data-rc to we-f-num-2\n132400                 string\n132500                     '* I: ERRNO<' we-f-num '>'\n132600                     ' RC<-' we-f-num-2 '>'\n132700                     delimited by size\n132800                     into we-msg-text\n132900                 end-string\n133000                 call 'tcpmessage' using we-msg\n133100             end-if\n133200         else\n133300             set ft-resp-write-error\n133400                 ft-resp-write-len-error\n133500                 wz-data-rc-not-okay       to true\n133600         end-if\n133700     end-if\n133800     .\n133900 5200-write-data-socket-exit. exit.\n134000\n134100 6000-read-until-empty.\n134200     compute ft-resp-msg-idx = zero\n134300     move low-values\n134400       to ft-resp-msgs\n134500\n134600     perform with test after until ip-rc-resp-end or\n134700                                   wz-cmd--rc-not-ok\n134800         perform 6050-read-next-line thru\n134900                 6050-read-next-line-exit\n135000         if wz-cmd--rc > zero\n135100             set wz-cmd--rc-ok to true\n135200         else\n135300             move low-values\n135400               to wz-soc-line-buffer\n135500         end-if\n135600         move wz-soc-line-buffer\n135700           to ft-reply-codes\n135800         if ft-resp-max-msgs\n135900             continue\n136000         else\n136100             compute ft-resp-msg-idx\n136200                   = ft-resp-msg-idx + one\n136300             move ft-reply-codes\n136400               to ft-resp-msg (ft-resp-msg-idx)\n136500             compute ft-resp-msg-len (ft-resp-msg-idx)\n136600                   = wz-cmd--rc\n136700         end-if\n136800     end-perform\n136900     .\n137000 6000-read-until-empty-exit. exit.\n137100\n137200 6050-read-next-line.\n137300     if wz-cmd--rc-ok and wz-soc-read-nbyte > zero\n137400         compute wz-cmd--rc = wz-soc-read-nbyte\n137500     else\n137600         perform 6100-read-socket thru\n137700                 6100-read-socket-exit\n137800     end-if\n137900     if wz-cmd--rc > zero\n138000         set ws-not-done         to true\n138100         move low-values         to wz-soc-line-buffer\n138200         compute wz-soc-line-cnt =  zero\n138300         perform until ws-done\n138400             if wz-soc-read-nbyte = zero\n138500                 set ws-done to true\n138600             else\n138700                 compute wz-soc-line-cnt\n138800                       = wz-soc-line-cnt + one\n138900                 move wz-soc-read-buffer(one:one)\n139000                   to wz-soc-line-buffer(wz-soc-line-cnt:one)\n139100                 move wz-soc-read-buffer(two:)\n139200                   to wz-soc-read-buffer(one:)\n139300                 compute wz-soc-read-nbyte\n139400                       = wz-soc-read-nbyte - one\n139500                 if  wz-soc-line-buffer(wz-soc-line-cnt:one)\n139600                   = ws-lf\n139700                     set ws-done to true\n139800                 else\n139900                     continue\n140000                 end-if\n140100             end-if\n140200         end-perform\n140300         if ws-debug-on\n140400             move wz-soc-line-cnt\n140500               to we-f-num\n140600             string\n140700                 '* S:<' we-f-num '>'\n140800                 wz-soc-line-buffer(1:80)\n140900                 delimited by size\n141000                 into we-msg-text\n141100             end-string\n141200             call 'tcpmessage' using we-msg\n141300         end-if\n141400     else\n141500         continue\n141600     end-if\n141700     .\n141800 6050-read-next-line-exit. exit.\n141900\n142000 6100-read-socket.\n142100     if wz-cmd--rc-ok\n142200         set wz-soc-fun-is-read to true\n142300         move zeros             to wz-soc-read-cnt\n142400         move low-values        to wz-soc-read-buffer\n142500         set ws-not-done        to true\n142600\n142700         perform until ws-done\n142800             move low-values    to wz-soc-work-buffer\n142900\n143000             set wz-soc-read-max to true\n143100\n143200             call 'EZACICSO' using wz-soc-read\n143300                                   wz-soc-cmd--s\n143400                                   wz-soc-read-nbyte\n143500                                   wz-soc-work-buffer\n143600                                   wz-errno\n143700                                   wz-cmd--rc\n143800\n143900             if wz-cmd--rc > zero\n144000                 if (wz-cmd--rc + wz-soc-read-cnt) >\n144100                     length of wz-soc-read-buffer\n144200                     set ft-resp-read-error to true\n144300                     set wz-cmd--rc-not-ok to true\n144400                     set ws-done           to true\n144500                 else\n144600                     move wz-soc-work-buffer (one:wz-cmd--rc)\n144700                       to wz-soc-read-buffer\n144800                          (wz-soc-read-cnt + one:)\n144900                     compute wz-soc-read-cnt =\n145000                             wz-soc-read-cnt + wz-cmd--rc\n145100                     if wz-soc-work-buffer(wz-cmd--rc - one:\n145200                                 length of wz-crlf)\n145300                        = wz-crlf\n145400                         set ws-done to true\n145500                     else\n145600                         continue\n145700                     end-if\n145800                     compute wz-cmd--rc = wz-soc-read-cnt\n145900                 end-if\n146000             else\n146100                 if ws-debug-on and wz-cmd--rc < zero\n146200                     move wz-errno   to we-f-num\n146300                     move wz-cmd--rc to we-f-num-2\n146400                     string\n146500                         '* I: ERRNO<' we-f-num '>'\n146600                         ' RC<-' we-f-num-2 '>'\n146700                         delimited by size\n146800                         into we-msg-text\n146900                     end-string\n147000                     call 'tcpmessage' using we-msg\n147100                 end-if\n147200                 if wz-read-less-than-one\n147300                     compute wz-errno = zero\n147400                     set wz-cmd--rc-ok to true\n147500                 else\n147600                     continue\n147700                 end-if\n147800                 set ws-done to true\n147900             end-if\n148000         end-perform\n148100\n148200         if wz-soc-read-cnt > zero and wz-cmd--rc >= zero\n148300             compute wz-soc-read-nbyte = wz-soc-read-cnt\n148400             compute wz-cmd--rc        = wz-soc-read-cnt\n148500             call 'EZACIC05' using wz-soc-read-buffer\n148600                                   wz-soc-read-nbyte\n148700D            if ws-debug-on\n148800D                move wz-soc-read-nbyte\n148900D                  to we-f-num\n149000D                string\n149100D                    '* S:<' we-f-num '>'\n149200D                    wz-soc-read-buffer(1:80)\n149300D                    delimited by size\n149400D                    into we-msg-text\n149500D                end-string\n149600D                call 'tcpmessage' using we-msg\n149700D            end-if\n149800         else\n149900             continue\n150000         end-if\n150100\n150200         if wz-cmd--rc-not-ok\n150300             set ft-resp-read-error to true\n150400         else\n150500             continue\n150600         end-if\n150700\n150800     end-if\n150900     .\n151000 6100-read-socket-exit. exit.\n151100\n151200 6200-read-data-record.\n151300     compute ws-recv-data-len = zero\n151400     move low-values     to ws-dblk-area\n151500     if  ws-data-area-len > zero\n151600         continue\n151700     else\n151800         perform 6300-read-data-socket thru\n151900                 6300-read-data-socket-exit\n152000     end-if\n152100     if  ws-data-area-len > zero\n152200         set ws-not-done     to true\n152300         perform until ws-done\n152400             if  ws-data-area-len = zero\n152500                 perform 6300-read-data-socket thru\n152600                         6300-read-data-socket-exit\n152700                 if  ws-data-area-len = zero\n152800                     set ws-done to true\n152900                 end-if\n153000             else\n153100                 if ft-text-transfer\n153200                     perform 6220-deblock-text thru\n153300                             6220-deblock-text-exit\n153400                 else\n153500                     perform 6240-deblock-bin thru\n153600                             6240-deblock-bin-exit\n153700                 end-if\n153800             end-if\n153900         end-perform\n154000     end-if\n154100     if ws-debug-on\n154200         move ws-recv-data-len\n154300           to we-f-num\n154400         string\n154500             '*DS:<' we-f-num '>'\n154600             ws-dblk-area(1:80)\n154700             delimited by size\n154800             into we-msg-text\n154900         end-string\n155000         call 'tcpmessage' using we-msg\n155100     end-if\n155200     .\n155300 6200-read-data-record-exit. exit.\n155400\n155500 6220-deblock-text.\n155600     if  ws-data-area(ws-data-area-idx:2) = ws-crlf or\n155700         ws-data-area(ws-data-area-idx:one) = ws-lf\n155800         if  ws-data-area(ws-data-area-idx:one) = ws-cr\n155900             compute ws-data-area-len = ws-data-area-len - two\n156000             compute ws-data-area-idx = ws-data-area-idx + two\n156100         else\n156200             compute ws-data-area-len = ws-data-area-len - one\n156300             compute ws-data-area-idx = ws-data-area-idx + one\n156400         end-if\n156500         if ws-recv-data-len = zero\n156600             compute ws-recv-data-len = one\n156700             move space to ws-dblk-area (ws-recv-data-len:one)\n156800         else\n156900             continue\n157000         end-if\n157100         set ws-done to true\n157200     else\n157300         compute ws-recv-data-len = ws-recv-data-len + one\n157400         move ws-data-area (ws-data-area-idx:one)\n157500           to ws-dblk-area (ws-recv-data-len:one)\n157600         compute ws-data-area-len = ws-data-area-len - one\n157700         compute ws-data-area-idx = ws-data-area-idx + one\n157800     end-if\n157900     .\n158000 6220-deblock-text-exit. exit.\n158100\n158200 6240-deblock-bin.\n158300     if  ws-recv-data-len < ft-ts-recv-bin-rec-size\n158400         compute ws-idx = ft-ts-recv-bin-rec-size\n158500                        - ws-recv-data-len\n158600         if  ws-data-area-len >= ws-idx\n158700             compute ws-recv-data-len\n158800                   = ws-recv-data-len + one\n158900             move ws-data-area(ws-data-area-idx:ws-idx)\n159000               to ws-dblk-area(ws-recv-data-len:ws-idx)\n159100             compute ws-data-area-len\n159200                   = ws-data-area-len - ws-idx\n159300             compute ws-data-area-idx\n159400                   = ws-data-area-idx + ws-idx\n159500             compute ws-recv-data-len = ft-ts-recv-bin-rec-size\n159600             set ws-done to true\n159700         else\n159800             move ws-data-area(ws-data-area-idx:ws-data-area-len)\n159900               to ws-dblk-area\n160000                  (ws-recv-data-len + one:ws-data-area-len)\n160100             compute ws-recv-data-len\n160200                   = ws-recv-data-len + ws-data-area-len\n160300             compute ws-data-area-len = zero\n160400             compute ws-data-area-idx = zero\n160500         end-if\n160600     end-if\n160700     .\n160800 6240-deblock-bin-exit. exit.\n160900\n161000 6300-read-data-socket.\n161100     if wz-cmd--rc-ok\n161200         move low-values to ws-data-area\n161300\n161400         compute ws-data-area-len\n161500               = length of ws-data-area\n161600\n161700         set wz-soc-fun-is-read to true\n161800         call 'EZACICSO' using wz-soc-read\n161900                               wz-soc-data-s\n162000                               ws-data-area-len\n162100                               ws-data-area\n162200                               wz-errno\n162300                               wz-data-rc\n162400\n162500         if  wz-data-rc > zero\n162600             compute ft-num-bytes-trans\n162700                   = ft-num-bytes-trans + wz-data-rc\n162800             compute ws-data-area-len = wz-data-rc\n162900             compute ws-data-area-idx  = one\n163000             if ft-text-transfer\n163100                 call 'EZACIC05' using ws-data-area\n163200                                       ws-data-area-len\n163300             end-if\n163400         else\n163500             compute ws-data-area-len = zero\n163600             compute ws-data-area-idx = zero\n163700         end-if\n163800\n163900         if ws-debug-on\n164000             move ws-data-area-len\n164100               to we-f-num\n164200             string\n164300                 '*DS:<' we-f-num '>'\n164400                 ws-data-area(1:80)\n164500                 delimited by size\n164600                 into we-msg-text\n164700             end-string\n164800             call 'tcpmessage' using we-msg\n164900             if wz-data-rc < zero\n165000                 move wz-errno    to we-f-num\n165100                 move wz-data-rc  to we-f-num-2\n165200                 string\n165300                     '*DI: ERRNO<' we-f-num '>'\n165400                     ' RC<-' we-f-num-2 '>'\n165500                     delimited by size\n165600                     into we-msg-text\n165700                 end-string\n165800                 call 'tcpmessage' using we-msg\n165900             end-if\n166000         end-if\n166100\n166200     else\n166300         continue\n166400     end-if\n166500     .\n166600 6300-read-data-socket-exit. exit.\n166700\n166800 7000-get-host-ip.\n166900         set wz-soc-fun-is-gethostid to true\n167000\n167100         call 'EZACICSO' using wz-soc-get-host-id\n167200                               wz-soc-host-ip\n167300     .\n167400 7000-get-host-ip-exit. exit.\n167500\n167600 7100-get-host-by-addr.\n167700     if wz-cmd--rc-ok\n167800         set wz-soc-fun-is-ghba to true\n167900\n168000         call 'EZACICSO' using wz-soc-get-host-by-addr\n168100                               wz-soc-ghba-host-ip\n168200                               wz-errno\n168300                               wz-cmd--rc\n168400         if wz-gethost-hostent-bad\n168500             compute wz-soc-ghba-hostent = zero\n168600         else\n168700             move wz-errno\n168800               to wz-soc-ghba-hostent,\n168900                  wz-c08-hostent-addr\n169000             call 'EZACIC08' using wz-c08-hostent-addr\n169100                             wz-c08-hostname-len\n169200                             wz-c08-hostname\n169300                             wz-c08-hostalias-cnt\n169400                             wz-c08-hostalias-seq\n169500                             wz-c08-hostalias-len\n169600                             wz-c08-hostalias\n169700                             wz-c08-host-ip-type\n169800                             wz-c08-host-ip-len\n169900                             wz-c08-host-ip-cnt\n170000                             wz-c08-host-ip-seq\n170100                             wz-c08-host-ip\n170200                             wz-cmd--rc\n170300         end-if\n170400     end-if\n170500     .\n170600 7100-get-host-by-addr-exit. exit.\n170700\n170800 7200-get-host-by-name.\n170900     if wz-cmd--rc-ok\n171000         set wz-soc-fun-is-ghbn to true\n171100\n171200         if wz-soc-ghbn-namelen > zero\n171300             continue\n171400         else\n171500             move length of wz-soc-ghbn-hostname\n171600               to wz-soc-ghbn-namelen\n171700         end-if\n171800         call 'RMVWHTSP' using wz-soc-ghbn-hostname,\n171900                               wz-soc-ghbn-namelen\n172000         call 'EZACICSO' using wz-soc-get-host-by-name\n172100                               wz-soc-ghbn-namelen\n172200                               wz-soc-ghbn-hostname\n172300                               wz-errno\n172400                               wz-cmd--rc\n172500         compute wz-soc-ghbn-namelen = zero\n172600\n172700         if wz-gethost-hostent-bad\n172800             compute wz-soc-ghbn-hostent = zero\n172900         else\n173000             move wz-errno\n173100               to wz-soc-ghbn-hostent,\n173200                  wz-c08-hostent-addr\n173300             call 'EZACIC08' using wz-c08-hostent-addr\n173400                             wz-c08-hostname-len\n173500                             wz-c08-hostname\n173600                             wz-c08-hostalias-cnt\n173700                             wz-c08-hostalias-seq\n173800                             wz-c08-hostalias-len\n173900                             wz-c08-hostalias\n174000                             wz-c08-host-ip-type\n174100                             wz-c08-host-ip-len\n174200                             wz-c08-host-ip-cnt\n174300                             wz-c08-host-ip-seq\n174400                             wz-c08-host-ip\n174500                             wz-cmd--rc\n174600         end-if\n174700     end-if\n174800     .\n174900 7200-get-host-by-name-exit. exit.\n175000\n175100 identification division.\n175200 program-id.                     rmvwhtsp.\n175300 data division.\n175400 working-storage section.\n175500 77  ws-idx                         pic 9(08)  binary.\n175600 77  one                            pic 9(01) comp-3 value 1.\n175700 77  two                            pic 9(01) comp-3 value 2.\n175800 77  ws-null                        pic x(01) value x'00'.\n175900 linkage section.\n176000 01  rmv-str                        pic x(32768).\n176100 01  rmv-str-len                    pic 9(08)  binary.\n176200 01  str-len redefines rmv-str-len  pic 9(08)  binary.\n176300 procedure division using rmv-str, rmv-str-len.\n176400     evaluate true\n176500         when rmv-str-len > zero and rmv-str-len <= 32768\n176600             perform\n176700               varying ws-idx from one by one\n176800               until rmv-str(one:one) not = space or\n176900                     ws-idx = rmv-str-len\n177000                 if rmv-str(one:one) = space\n177100                     move rmv-str(two:rmv-str-len - one)\n177200                       to rmv-str(one:rmv-str-len)\n177300                 end-if\n177400             end-perform\n177500             perform\n177600               varying ws-idx from rmv-str-len by -1\n177700               until ( rmv-str(ws-idx:one) not = ws-null and\n177800                       rmv-str(ws-idx:one) not = space ) or\n177900                     ws-idx = zero\n178000                 move ws-null\n178100                   to rmv-str(ws-idx:one)\n178200             end-perform\n178300             move ws-idx\n178400               to str-len\n178500             move zero to return-code\n178600         when rmv-str-len = zero\n178700             move 4 to return-code\n178800         when other\n178900             move 8 to return-code\n179000     end-evaluate\n179100     .\n179200 end program rmvwhtsp.\n179300\n179400 identification division.\n179500 program-id.                     getdate.\n179600 data division.\n179700 working-storage section.\n179800 77  ws-null                        pic x(01) value x'00'.\n179900 01  ws-filler.\n180000     03  ws-current-date              pic x(21).\n180100     03  filler redefines ws-current-date.\n180200         05 ws-cd-year                pic 9(04).\n180300         05 ws-cd-mon                 pic 9(02).\n180400         05 ws-cd-day                 pic 9(02).\n180500         05 ws-cd-hour                pic 9(02).\n180600         05 ws-cd-min                 pic 9(02).\n180700         05 ws-cd-sec                 pic 9(02).\n180800         05 ws-cd-hun                 pic 9(02).\n180900         05 ws-cd-GMT-off             pic x(05).\n181000\n181100     03  ws-months.\n181200         05 filler                    pic x(03) value 'Jan'.\n181300         05 filler                    pic x(03) value 'Feb'.\n181400         05 filler                    pic x(03) value 'Mar'.\n181500         05 filler                    pic x(03) value 'Apr'.\n181600         05 filler                    pic x(03) value 'May'.\n181700         05 filler                    pic x(03) value 'Jun'.\n181800         05 filler                    pic x(03) value 'Jul'.\n181900         05 filler                    pic x(03) value 'Aug'.\n182000         05 filler                    pic x(03) value 'Sep'.\n182100         05 filler                    pic x(03) value 'Oct'.\n182200         05 filler                    pic x(03) value 'Nov'.\n182300         05 filler                    pic x(03) value 'Dec'.\n182400     03  ws-month redefines ws-months\n182500                  occurs 12 times     pic x(03).\n182600\n182700     03  ws-weekday                   pic 9(01).\n182800     03  ws-week-days.\n182900         05 filler                    pic x(03) value 'Mon'.\n183000         05 filler                    pic x(03) value 'Tue'.\n183100         05 filler                    pic x(03) value 'Wed'.\n183200         05 filler                    pic x(03) value 'Thu'.\n183300         05 filler                    pic x(03) value 'Fri'.\n183400         05 filler                    pic x(03) value 'Sat'.\n183500         05 filler                    pic x(03) value 'Sun'.\n183600     03  ws-wd redefines ws-week-days\n183700               occurs 7 times         pic x(03).\n183800 linkage section.\n183900 01  wl-date                          pic x(32).\n184000 procedure division using wl-date.\n184100     accept ws-weekday from day-of-week\n184200     move function current-date\n184300       to ws-current-date\n184400     string ws-wd ( ws-weekday )   ', '\n184500            ws-cd-day              ' '\n184600            ws-month ( ws-cd-mon ) ' '\n184700            ws-cd-year             ' '\n184800            ws-cd-hour             ':'\n184900            ws-cd-min              ':'\n185000            ws-cd-sec              ' '\n185100            ws-cd-GMT-off          ws-null\n185200         delimited by size\n185300         into wl-date\n185400     end-string\n185500     .\n185600 end program getdate.\n185700\n185800 identification division.\n185900 program-id.                     tcpmessage.\n186000 data division.\n186100 working-storage section.\n186200 01  wc-filler.\n186300     03  wc-cics-resp                 pic 9(09).\n186400     03  wc-cics-resp2                pic 9(09).\n186500     03  wc-cics-length               pic 9(04) binary.\n186600     03  wc-cics-td-message           pic x(04) value 'TCPM'.\n186700 01  ws-msg                           pic x(132).\n186800 01  filler.\n186900     03  ws-current-date              pic x(21).\n187000     03  filler redefines ws-current-date.\n187100         05 ws-cd-year                pic 9(04).\n187200         05 ws-cd-mon                 pic 9(02).\n187300         05 ws-cd-day                 pic 9(02).\n187400         05 ws-cd-hour                pic 9(02).\n187500         05 ws-cd-min                 pic 9(02).\n187600         05 ws-cd-sec                 pic 9(02).\n187700         05 ws-cd-hun                 pic 9(02).\n187800         05 ws-cd-GMT-off             pic x(05).\n187900\n188000 linkage section.\n188100 01  wl-msg.\n188200     03 filler                        pic x(08).\n188300     03 wl-msg-text                   pic x(100).\n188400 procedure division using wl-msg.\n188500\n188600     exec cics address\n188700               eib(address of dfheiblk)\n188800     end-exec\n188900\n189000     move low-values to ws-msg\n189100\n189200     move function current-date\n189300       to ws-current-date\n189400     compute wc-cics-length = 1\n189500     string\n189600            eibtrmid\n189700            eibtrnid\n189800            ' '\n189900            ws-cd-year\n190000            ws-cd-mon\n190100            ws-cd-day\n190200            ws-cd-hour\n190300            ws-cd-min\n190400            ws-cd-sec\n190500            ' '\n190600            wl-msg\n190700            delimited by size\n190800       into ws-msg\n190900       pointer wc-cics-length\n191000     end-string\n191100     compute wc-cics-length = wc-cics-length - 1\n191200     perform with test after\n191300             until wc-cics-resp not = dfhresp(nospace)\n191400         exec cics writeq td\n191500                   queue  (wc-cics-td-message)\n191600                   from   (ws-msg)\n191700                   length (wc-cics-length)\n191800                   resp   (wc-cics-resp)\n191900                   resp2  (wc-cics-resp2)\n192000         end-exec\n192100     end-perform\n192200     move low-values to wl-msg-text\n192300     .\n192400 end program tcpmessage.\n192500\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SFTPXXIX": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x01\\x05\\x06\\x7f\\x01\\x05\\x06\\x7f\\x13U\\x00\\xed\\x00\\xed\\x00\\x00\\xd7\\xc7\\xd6\\xd9\\xd3\\xc9\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-03-08T00:00:00", "modifydate": "2005-03-08T13:55:48", "lines": 237, "newlines": 237, "modlines": 0, "user": "PGORLIN"}, "text": "000100******************************************************************\n000200*\n000300* CHANGES:  THE FOLLOWING CHANGES HAVE BEEN MADE TO THIS INCLUDE:\n000400*    LOG #  DATE:  COMMENT:\n000500*    -----  -----  ----------------------------------------------\n000600*\n000700*           03/03  NEW CODE\n000800*\n000900******************************************************************\n001000 01  ft-parms.\n001100     03  ft-program                       pic x(08).\n001200         88  ft-head-valid        value 'SFTPXXCX'.\n001300\n001400     03  ft-user-name                     pic x(32).\n001500     03  ft-password                      pic x(32).\n001600     03  ft-account                       pic x(32).\n001700\n001800     03  ft-trans-direction               pic x(04).\n001900         88  ft-trans-dir-valid   value 'Send', 'Recv'.\n002000         88  ft-send-file         value 'Send'.\n002100         88  ft-receive-file      value 'Recv'.\n002200         88  ft-recv-file         value 'Recv'.\n002300\n002400     03  ft-trans-type                    pic x(04).\n002500         88  ft-trans-type-valid  value 'Bin ', 'Text'.\n002600         88  ft-binary-transfer   value 'Bin '.\n002700         88  ft-text-transfer     value 'Text'.\n002800         88  ft-ascii-transfer    value 'Text'.\n002900\n003000     03  ft-source                        pic x(04).\n003100         88  ft-source-valid      value 'SptR',\n003200                                        'StsQ',\n003300                                        'RtsQ'.\n003400         88  ft-src-valid-ts-q    value 'StsQ',\n003500                                        'RtsQ'.\n003600         88  ft-src-valid-send    value 'SptR',\n003700                                        'StsQ'.\n003800         88  ft-src-valid-recv    value 'RtsQ'.\n003900         88  ft-send-ts-q         value 'StsQ'.\n004000         88  ft-recv-ts-q         value 'RtsQ'.\n004100         88  ft-send-ptr          value 'SptR'.\n004200\n004300     03  ft-srvr-host-dotted-ip           pic x(15).\n004400     03  filler                           pic x(01).\n004500     03  ft-srvr-host-ip                  pic 9(08) binary.\n004600     03  ft-srvr-hostname                 pic x(255).\n004700     03  filler                           pic x(01).\n004800     03  ft-srvr-hostname-len             pic 9(03).\n004900     03  filler                           pic x(01).\n005000\n005100     03  ft-srvr-cmd--port                pic 9(05) binary.\n005200         88  ft-srvr-dflt-cmd--port value 21.\n005300         88  ft-valid-cmd--port     value 1 thru 65535.\n005400\n005500     03  ft-srvr-data-port                pic 9(05) binary.\n005600         88  ft-srvr-dflt-data-port value 20.\n005700         88  ft-valid-data-port     value 1 thru 65535.\n005800\n005900     03  ft-ts-qname                      pic x(16).\n006000     03  ft-ts-queue-disp                 pic x(04).\n006100         88  ft-valid-queue-disp    value 'KeEp', 'dEl '.\n006200         88  ft-dflt-queue-disp     value 'KeEp'.\n006300         88  ft-keep-queue          value 'KeEp'.\n006400         88  ft-del--queue          value 'dEl '.\n006500     03  ft-ts-num-items                  pic 9(08) binary.\n006600     03  ft-ts-recv-bin-rec-size          pic 9(04) binary.\n006700         88  ft-dflt-bin-rec-size   value 1024.\n006800\n006900     03  ft-num-bytes-trans               pic 9(08) binary.\n007000\n007100     03  ft-file-name                     pic x(70).\n007200     03  filler                           pic x(02).\n007300\n007400     03  ft-resp-errors.\n007500         05 ft-resp-nocomm                pic x(01).\n007600            88 ft-resp-nocomm-error                 value 'Y'.\n007700         05 ft-resp-commlen               pic x(01).\n007800            88 ft-resp-commlen-error                value 'Y'.\n007900         05 ft-resp-initapi               pic x(01).\n008000            88 ft-resp-initapi-error                value 'Y'.\n008100         05 ft-resp-gethostid             pic x(01).\n008200            88 ft-resp-gethostid-error              value 'Y'.\n008300         05 ft-resp-obtain                pic x(01).\n008400            88 ft-resp-obtain-error                 value 'Y'.\n008500         05 ft-resp-connect               pic x(01).\n008600            88 ft-resp-connect-error                value 'Y'.\n008700         05 ft-resp-close                 pic x(01).\n008800            88 ft-resp-close-error                  value 'Y'.\n008900         05 ft-resp-read                  pic x(01).\n009000            88 ft-resp-read-error                   value 'Y'.\n009100         05 ft-resp-write                 pic x(01).\n009200            88 ft-resp-write-error                  value 'Y'.\n009300         05 ft-resp-write-len             pic x(01).\n009400            88 ft-resp-write-len-error              value 'Y'.\n009500         05 ft-resp-shutdown              pic x(01).\n009600            88 ft-resp-shutdown-error               value 'Y'.\n009700         05 ft-resp-ft                    pic x(01).\n009800            88 ft-resp-ft-error                     value 'Y'.\n009900         05 ft-resp-data-conn             pic x(01).\n010000            88 ft-resp-data-conn-error              value 'Y'.\n010100         05 ft-resp-dotted-hostname       pic x(01).\n010200            88 ft-resp-dotted-hostname-err          value 'Y'.\n010300         05 ft-resp-port                  pic x(01).\n010400            88 ft-resp-port-error                   value 'Y'.\n010500         05 ft-resp-data-src-wrong        pic x(01).\n010600            88 ft-resp-data-src-wrong-error         value 'Y'.\n010700         05 ft-resp-send-data             pic x(01).\n010800            88 ft-resp-send-data-error              value 'Y'.\n010900         05 ft-resp-receive-data          pic x(01).\n011000            88 ft-resp-receive-data-error           value 'Y'.\n011100         05 ft-resp-obtain-data           pic x(01).\n011200            88 ft-resp-obtain-data-error            value 'Y'.\n011300         05 ft-resp-parm                  pic x(01).\n011400            88 ft-resp-parm-error                   value 'Y'.\n011500         05 filler                        pic x(12).\n011600     03  filler redefines ft-resp-errors  pic x(32).\n011700         88 ft-resp-okay\n011800                value 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN'.\n011900\n012000     03 ft-reply-codes                    pic x(256).\n012100     03 ip-reply-codes redefines ft-reply-codes\n012200                                          pic x(256).\n012300     03 filler redefines ip-reply-codes.\n012400         05 ip-rc-code                 pic x(03).\n012500             88 ip-rc-110              value '110'.\n012600             88 ip-rc-110-restart-mkr  value '110'.\n012700             88 ip-rc-120              value '120'.\n012800             88 ip-rc-120-srvc-rdy-tm  value '120'.\n012900             88 ip-rc-125              value '125'.\n013000             88 ip-rc-125-trans-start  value '125'.\n013100             88 ip-rc-150              value '150'.\n013200             88 ip-rc-150-fs-okay      value '150'.\n013300             88 ip-rc-200              value '200'.\n013400             88 ip-rc-200-cmd-okay     value '200'.\n013500             88 ip-rc-200-ready        value '200'.\n013600             88 ip-rc-202              value '202'.\n013700             88 ip-rc-202-cmd-not-imp  value '202'.\n013800             88 ip-rc-211              value '211'.\n013900             88 ip-rc-211-status       value '211'.\n014000             88 ip-rc-212              value '212'.\n014100             88 ip-rc-212-dir-status   value '212'.\n014200             88 ip-rc-213              value '213'.\n014300             88 ip-rc-213-file-status  value '213'.\n014400             88 ip-rc-214              value '214'.\n014500             88 ip-rc-214-help-msg     value '214'.\n014600             88 ip-rc-215              value '215'.\n014700             88 ip-rc-215-NAME-sys-typ value '215'.\n014800             88 ip-rc-220              value '220'.\n014900             88 ip-rc-220-ready        value '220'.\n015000             88 ip-rc-221              value '221'.\n015100             88 ip-rc-221-closing      value '221'.\n015200             88 ip-rc-225              value '225'.\n015300             88 ip-rc-225-dc-open      value '225'.\n015400             88 ip-rc-226              value '226'.\n015500             88 ip-rc-226-dc-closing   value '226'.\n015600             88 ip-rc-227              value '227'.\n015700             88 ip-rc-227-ent-pas-mod  value '227'.\n015800             88 ip-rc-230              value '230'.\n015900             88 ip-rc-230-usr-logd-on  value '230'.\n016000             88 ip-rc-250              value '250'.\n016100             88 ip-rc-250-okay         value '250'.\n016200             88 ip-rc-251              value '251'.\n016300             88 ip-rc-251-not-local    value '251'.\n016400             88 ip-rc-252              value '252'.\n016500             88 ip-rc-252-usr-not-vrfy value '252'.\n016600             88 ip-rc-257              value '257'.\n016700             88 ip-rc-257-path-created value '257'.\n016800             88 ip-rc-331              value '331'.\n016900             88 ip-rc-331-need-pass    value '331'.\n017000             88 ip-rc-332              value '332'.\n017100             88 ip-rc-332-need-acct    value '332'.\n017200             88 ip-rc-350              value '350'.\n017300             88 ip-rc-350-pend-info    value '350'.\n017400             88 ip-rc-354              value '354'.\n017500             88 ip-rc-354-input-msg    value '354'.\n017600             88 ip-rc-421              value '421'.\n017700             88 ip-rc-421-no-service   value '421'.\n017800             88 ip-rc-425              value '425'.\n017900             88 ip-rc-425-cant-op-dc   value '425'.\n018000             88 ip-rc-426              value '426'.\n018100             88 ip-rc-426-con-clo-abrt value '426'.\n018200             88 ip-rc-450              value '450'.\n018300             88 ip-rc-450-no-actn-busy value '450'.\n018400             88 ip-rc-451              value '451'.\n018500             88 ip-rc-451-aborted      value '451'.\n018600             88 ip-rc-452              value '452'.\n018700             88 ip-rc-452-no-storage   value '452'.\n018800             88 ip-rc-455              value '455'.\n018900             88 ip-rc-455-no-toform    value '455'.\n019000             88 ip-rc-500              value '500'.\n019100             88 ip-rc-500-syntax-err   value '500'.\n019200             88 ip-rc-501              value '501'.\n019300             88 ip-rc-501-bad-parm     value '501'.\n019400             88 ip-rc-502              value '502'.\n019500             88 ip-rc-502-cmd-nothere  value '502'.\n019600             88 ip-rc-503              value '503'.\n019700             88 ip-rc-503-bad-seq      value '503'.\n019800             88 ip-rc-504              value '504'.\n019900             88 ip-rc-504-prm-nothere  value '504'.\n020000             88 ip-rc-530              value '530'.\n020100             88 ip-rc-530-not-logd-on  value '530'.\n020200             88 ip-rc-532              value '532'.\n020300             88 ip-rc-532-need-acct    value '532'.\n020400             88 ip-rc-550              value '550'.\n020500             88 ip-rc-550-unavailable  value '550'.\n020600             88 ip-rc-551              value '551'.\n020700             88 ip-rc-551-actn-abrtd   value '551'.\n020800             88 ip-rc-551-not-local    value '551'.\n020900             88 ip-rc-552              value '552'.\n021000             88 ip-rc-552-fil-act-abrt value '552'.\n021100             88 ip-rc-553              value '553'.\n021200             88 ip-rc-553-bad-fil-name value '553'.\n021300             88 ip-rc-554              value '554'.\n021400             88 ip-rc-554-tran-failed  value '554'.\n021500             88 ip-rc-555              value '555'.\n021600             88 ip-rc-555-bad-toform   value '555'.\n021700         05 ip-rc-cont                 pic x(01).\n021800             88 ip-rc-resp-cont        value '-'.\n021900             88 ip-rc-resp-end         value ' '.\n022000         05 ip-rc-text                 pic x(252).\n022100*\n022200     03 ft-resp-msg-idx                   pic 9(02) binary.\n022300        88 ft-resp-max-msgs       value 15.\n022400     03 ft-resp-msgs                      pic x(3870).\n022500     03 filler redefines ft-resp-msgs occurs  15 times.\n022600         05 ft-resp-msg-len               pic 9(04) binary.\n022700         05 ft-resp-msg                   pic x(256).\n022800\n022900     03  ft-data-len                      pic 9(08) binary.\n023000     03  ft-data-ptr                      pointer.\n023100\n023200     03  filler                           pic x(08).\n023300         88  ft-tail-valid        value 'SfTpTrLr'.\n023400\n023500 01  ft-data-area.\n023600     03  filler                           pic x(08).\n023700         88  ft-data-valid        value 'SfTpDaTa'.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMTPXXCX": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Y\\x01\\x05\\x06\\x7f\\x01\\x05\\x06\\x7f\\x13U\\x05;\\x05;\\x00\\x00\\xd7\\xc7\\xd6\\xd9\\xd3\\xc9\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-03-08T00:00:00", "modifydate": "2005-03-08T13:55:59", "lines": 1339, "newlines": 1339, "modlines": 0, "user": "PGORLIN"}, "text": "000100 identification division.\n000200 program-id.                     smtpxxcx.\n000300*author.                         Paul F. Gorlinsky.\n000400*                                Horizon Data Systems, Inc.\n000500*                                pfg@hds.bz\n000600*\n000700*date-written.                   2003/03/04.\n000800\n000900******************************************************************\n001000* This program is used to send mail from CICS using the TCP/IP\n001100* SOCKET interface. See SMTPXXIX for the lay out of the calling\n001200* parameters.\n001300*\n001400*\n001500* External Documentation:\n001600* IBM SC31-8807 - publibz.boulder.ibm.com/epubs/pdf/f1a1g110.pdf\n001700*     IP CICS Sockets Guide\n001800* RFC2821 - //www.faqs.org/rfcs/rfc2821.html\n001900*     Simple Mail Trannsfer Protocol\n002000* RFC 854 - //www.faqs.org/rfcs/rfc854.html\n002100*     Telnet Protocol Specification\n002200*\n002300* Calling Program Requirements:\n002400* - COBOL COPY SMTPXXIX in Linkage Section of this program and\n002500*   WORKING STORAGE SECTION of the callers program.\n002600* - CICS GETMAIN setting sm-text-ptr and flength to length of\n002700*   message. Initialize to low-values\n002800* - Set address of sm-text-data to sm-text-ptr\n002900* - Build message in sm-text\n003000* - Set sm-head-valid, sm-tail-valid and sm-text-valid to true\n003100* - Build sm-rcpts, sm-hdr, sm-sender\n003200* - Set sm-rcpt-num and sm-text-len appropriate\n003300* - CICS LINK to sm-program\n003400* - Validate response.\n003500*\n003600* Current Restrictions:\n003700* - Maximum of 10 Recepiants\n003800* - Message length 32760 bytes\n003900*\n004000* CICS TDQ TCPM is used for error messages.\n004100*\n004200* CICS INITPARM SMTPXXCX is used to override the default host\n004300*   of the SMTP server to be used.\n004400*   SMTPXXCX='dotted-ip,host dns name,xyzzy'\n004500*   Each of the fields is optional. 'xyzzy' is used to turn debug\n004600*   messages on. These message are written using the COBOL\n004700*   DISPLAY verb and usually are written to the DDNAME CEEMSG.\n004800*   Dotted-ip takes precidence over DNS name.\n004900* The default SOCKET server name of TCPIP is used.\n005000*\n005100*\n005200* CHANGES:  THE FOLLOWING CHANGES HAVE BEEN MADE TO THIS MODULE:\n005300*    LOG #  DATE:  COMMENT:\n005400*    -----  -----  ----------------------------------------------\n005500*\n005600*           03/03  NEW CODE\n005700*\n005800******************************************************************\n005900\n006000 environment division.\n006100\n006200 configuration section.\n006300 source-computer.                ibm-370.\n006400 object-computer.                ibm-370.\n006500\n006600 special-names.\n006700\n006800 data division.\n006900\n007000 working-storage section.\n007100 01  filler.\n007200     03  filler                       pic x(04) value '****'.\n007300     03  sm-local-program-name        pic x(08) value 'SMTPXXCX'.\n007400     03  filler                       pic x(04) value '****'.\n007500\n007600 01  wc-filler.\n007700     03  wc-eib-taskn                 pic 9(07).\n007800     03  wc-eib-time                  pic 9(07).\n007900     03  wc-eib-date                  pic 9(07).\n008000     03  wc-eib-trnid                 pic x(04).\n008100     03  wc-eib-trmid                 pic x(04).\n008200     03  wc-cics-resp                 pic 9(08).\n008300     03  wc-cics-resp2                pic 9(08).\n008400     03  wc-cics-applid               pic x(08).\n008500     03  wc-cics-job-name             pic x(08).\n008600     03  wc-initparm.\n008700         05  wc-cics-initparm         pic x(60).\n008800         05  wc-cics-initparmlen      pic 9(04) binary.\n008900\n009000 01  we-filler.\n009100     03  we-msg.\n009200         05  we-msg-pgm-id            pic  x(08).\n009300         05  we-msg-text              pic  x(91).\n009400     03  we-h-num                     pic  9(05).\n009500     03  we-f-num                     pic  9(09).\n009600     03  we-f-num-2                   pic  9(09).\n009700     03  we-sf-num                    pic  s9(8).\n009800\n009900 01  wi-filler.\n010000     03  wi-idx                       pic  9(01) binary.\n010100\n010200     03  wi-dotted-ip-addr.\n010300         05  wi-dotted-ip-n1          pic  9(03).\n010400         05  wi-dotted-ip-n2          pic  9(03).\n010500         05  wi-dotted-ip-n3          pic  9(03).\n010600         05  wi-dotted-ip-n4          pic  9(03).\n010700     03  filler redefines wi-dotted-ip-addr.\n010800         05  wi-dotted-ip occurs 4 times pic 9(3).\n010900\n011000     03  wi-bin-ip-num                pic  9(03) binary.\n011100     03  filler redefines wi-bin-ip-num.\n011200         05  filler                   pic  x(01).\n011300         05  wi-bin-ip-bin            pic  x(01).\n011400\n011500     03  wi-bin-ip-addr               pic  9(08) binary.\n011600     03  filler redefines wi-bin-ip-addr.\n011700         05  wi-bin-ip-addr-n1        pic  x(01).\n011800         05  wi-bin-ip-addr-n2        pic  x(01).\n011900         05  wi-bin-ip-addr-n3        pic  x(01).\n012000         05  wi-bin-ip-addr-n4        pic  x(01).\n012100     03  filler redefines wi-bin-ip-addr.\n012200         05  wi-bin-ip      occurs 4 times pic x.\n012300\n012400 01  ws-filler.\n012500     03  filler                       pic x(1).\n012600         88 ws-done              value 'Y'.\n012700         88 ws-not-done          value 'N'.\n012800\n012900     03  ws-date                      pic x(32).\n013000\n013100     03  ws-initparm-1                pic x(60).\n013200     03  ws-initparm-2                pic x(60).\n013300     03  ws-initparm-3                pic x(60).\n013400     03  ws-initparm-4                pic x(60).\n013500\n013600     03  ws-smtp-host-dotted-ip       pic x(15).\n013700     03  ws-smtp-hostname             pic x(60).\n013800     03  ws-smtp-hostname-len         pic 9(08) binary.\n013900     03  ws-smtp-host-ip              pic 9(08) binary.\n014000\n014100     03  ws-src-hostname              pic x(60).\n014200     03  ws-src-hostname-len          pic 9(08) binary.\n014300     03  ws-src-host-ip               pic 9(08) binary.\n014400\n014500     03  ws-debug-secret-word         pic x(5).\n014600         88 ws-default-debug     value spaces.\n014700         88 ws-debug-on          value 'XYZZY'.\n014800\n014900     03  ws-crlf-null                 pic x(3) value x'0d2500'.\n015000     03  filler redefines ws-crlf-null.\n015100         05 ws-crlf                   pic x(2).\n015200         05 filler redefines ws-crlf.\n015300            07  ws-cr                 pic x(1).\n015400            07  ws-lf                 pic x(1).\n015500         05 ws-null                   pic x(1).\n015600\n015700     03  ws-str-ptr                   pic s9(4) value +1.\n015800         88  ws-str-ptr-initial       value +1.\n015900\n016000     03  ws-loop-cnt                  pic  9(4) binary.\n016100\n016200     03  ws-str-len                   pic  9(8) binary.\n016300\n016400 01  wz-soc-function                  pic x(16).\n016500     88  wz-soc-fun-is-initapi     value 'INITAPI'.\n016600     88  wz-soc-fun-is-socket      value 'SOCKET '.\n016700     88  wz-soc-fun-is-connect     value 'CONNECT'.\n016800     88  wz-soc-fun-is-shutdown    value 'SHUTDOWN'.\n016900     88  wz-soc-fun-is-read        value 'READ   '.\n017000     88  wz-soc-fun-is-write       value 'WRITE  '.\n017100     88  wz-soc-fun-is-close       value 'CLOSE  '.\n017200     88  wz-soc-fun-is-gethostid   value 'GETHOSTID'.\n017300     88  wz-soc-fun-is-ghba        value 'GETHOSTBYADDR'.\n017400     88  wz-soc-fun-is-ghbn        value 'GETHOSTBYNAME'.\n017500     88  wz-soc-fun-is-etoa        value 'ebcdic->ascii'.\n017600     88  wz-soc-fun-is-atoe        value 'ascii->ebcdic'.\n017700 01  wz-soc-initapi\n017800     redefines wz-soc-function        pic x(16).\n017900 01  wz-soc-socket\n018000     redefines wz-soc-function        pic x(16).\n018100 01  wz-soc-connect\n018200     redefines wz-soc-function        pic x(16).\n018300 01  wz-soc-shutdown\n018400     redefines wz-soc-function        pic x(16).\n018500 01  wz-soc-read\n018600     redefines wz-soc-function        pic x(16).\n018700 01  wz-soc-write\n018800     redefines wz-soc-function        pic x(16).\n018900 01  wz-soc-close\n019000     redefines wz-soc-function        pic x(16).\n019100 01  wz-soc-get-host-id\n019200     redefines wz-soc-function        pic x(16).\n019300 01  wz-soc-get-host-by-addr\n019400     redefines wz-soc-function        pic x(16).\n019500 01  wz-soc-get-host-by-name\n019600     redefines wz-soc-function        pic x(16).\n019700\n019800 01  wz-errno                         pic 9(08) binary.\n019900     88  wz-all-epipe              value 32.\n020000     88  wz-initapi-ok             value 10197, 0.\n020100     88  wz-connect-reset          value 54.\n020200     88  wz-connect-timedout       value 60.\n020300     88  wz-connect-refused        value 61.\n020400     88  wz-write-less-than-one    value 10184, 10186.\n020500     88  wz-read-less-than-one     value 10159.\n020600     88  wz-gethost-hostent-bad    value 10214.\n020700 01  wz-errno-2                       pic 9(08) binary.\n020800\n020900 01  wz-retcode                       pic s9(8) binary.\n021000     88  wz-retcode-ok             value +0.\n021100     88  wz-retcode-not-ok         value -1.\n021200     88  wz-retcode-nak            value -4.\n021300 01  wz-retcode-2                     pic s9(8) binary.\n021400\n021500 01  wz-soc-maxsoc                    pic s9(4) binary.\n021600     88  wz-default-maxsoc         value 100.\n021700\n021800 01  wz-soc-host-ip                   pic 9(08) binary.\n021900\n022000 01  wz-soc-hostname                  pic X(255).\n022100\n022200 01  wz-soc-ident.\n022300     03  wz-soc-tcpname               pic x(08).\n022400         88  wz-default-tcpname    value 'TCPIP'.\n022500     03  wz-soc-adsname               pic x(08).\n022600\n022700 01  wz-soc-name.\n022800     03  wz-soc-name-family           pic 9(4) binary.\n022900         88  wz-default-family     value 2.\n023000     03  wz-soc-name-port             pic 9(4) binary.\n023100         88  wz-default-port       value 25.\n023200     03  wz-soc-name-ip               pic 9(8) binary.\n023300     03  wz-soc-name-ip-x redefines\n023400         wz-soc-name-ip               pic x(4).\n023500     03  wz-soc-name-rsvd             pic x(8).\n023600\n023700 01  wz-soc-subtask                   pic x(08).\n023800 01  filler redefines wz-soc-subtask.\n023900     03  wz-soc-subtask-eibtaskn      pic 9(07).\n024000     03  wz-soc-subtask-char          pic x(01).\n024100\n024200 01  wz-soc-maxsno                    pic 9(08) binary.\n024300     88  wz-default-maxsno         value 99.\n024400\n024500*           addressing family\n024600 01  wz-soc-af                        pic 9(08) binary.\n024700     88  wz-default-af             value 2.\n024800     88  wz-soc-af-inet            value 2.\n024900\n025000 01  wz-soc-type                      pic 9(08) binary.\n025100     88  wz-default-soctype        value 1.\n025200     88  wz-soc-soctype-stream     value 1.\n025300     88  wz-soc-soctype-datagram   value 2.\n025400     88  wz-soc-soctype-raw        value 3.\n025500\n025600 01  wz-soc-proto                     pic 9(08) binary.\n025700     88  wz-default-proto          value 0.\n025800\n025900 01  wz-soc-ghbn-hostname             pic x(255).\n026000 01  wz-soc-ghbn-namelen              pic 9(08) binary.\n026100 01  wz-soc-ghbn-hostent              pic 9(08) binary.\n026200\n026300 01  wz-soc-ghba-host-ip              pic 9(08) binary.\n026400 01  wz-soc-ghba-hostent              pic 9(08) binary.\n026500\n026600 01  wz-c08-hostent-addr              pic 9(08) binary.\n026700 01  wz-c08-hostname-len              pic 9(04) binary.\n026800 01  wz-c08-hostname                  pic X(255).\n026900 01  wz-c08-hostalias-cnt             pic 9(04) binary value 0.\n027000 01  wz-c08-hostalias-seq             pic 9(04) binary value 0.\n027100 01  wz-c08-hostalias-len             pic 9(04) binary value 0.\n027200 01  wz-c08-hostalias                 pic x(255).\n027300 01  wz-c08-host-ip-type              pic 9(04) binary.\n027400 01  wz-c08-host-ip-len               pic 9(04) binary.\n027500 01  wz-c08-host-ip-cnt               pic 9(04) binary.\n027600 01  wz-c08-host-ip-seq               pic 9(04) binary value 0.\n027700 01  wz-c08-host-ip                   pic 9(08) binary.\n027800\n027900 01  wz-soc-s                         pic 9(04) binary.\n028000 01  wz-soc-connect-s\n028100        redefines wz-soc-s            pic 9(04) binary.\n028200 01  wz-soc-read-s\n028300        redefines wz-soc-s            pic 9(04) binary.\n028400 01  wz-soc-write-s\n028500        redefines wz-soc-s            pic 9(04) binary.\n028600 01  wz-soc-close-s\n028700        redefines wz-soc-s            pic 9(04) binary.\n028800\n028900 01  wz-soc-work-buffer               pic x(8192).\n029000 01  wz-soc-read-cnt                  pic 9(04) binary.\n029100\n029200 01  wz-soc-read-buffer               pic x(8192).\n029300 01  wz-soc-read-nbyte                pic 9(08) binary.\n029400     88 wz-soc-read-max            value 8192.\n029500\n029600 01  wz-soc-write-buffer              pic x(8192).\n029700 01  wz-soc-write-nbyte               pic 9(08) binary.\n029800 01  wz-soc-write-max                 pic 9(08) binary\n029900                                   value 8192.\n030000\n030100 01  wz-crlf00                        pic x(03) value x'0d0a00'.\n030200 01  filler    redefines wz-crlf00.\n030300     02 wz-crlf                       pic x(02).\n030400     02 filler redefines wz-crlf.\n030500        03 wz-cr                      pic x(01).\n030600        03 wz-lf                      pic x(01).\n030700     02 wz-null                       pic x(01).\n030800\n030900 01  wzz-soc-fun-is-shutdown          pic x(16) value 'SHUTDOWN'.\n031000 01  wzz-soc-shutdown-s               pic 9(04) binary.\n031100 01  wzz-soc-shutdown-how             pic 9(08) binary.\n031200     88  wzz-shutdown-end-from     value 0.\n031300     88  wzz-shutdown-end-to       value 1.\n031400     88  wzz-shutdown-end-both     value 2.\n031500 01  wzz-errno                        pic 9(08) binary.\n031600 01  wzz-retcode                      pic s9(8) binary.\n031700     88  wzz-retcode-ok            value +0.\n031800     88  wzz-retcode-not-ok        value -1.\n031900\n032000 01  filler.\n032100     03  filler                       pic  x(04) value '****'.\n032200     03  filler                       pic  x(08) value 'end  w/s'.\n032300     03  filler                       pic  x(04) value '****'.\n032400     eject\n032500 linkage section.\n032600 01  filler                           pic x.\n032700     COPY  SMTPXXIX.\n032800     eject\n032900 procedure division.\n033000\n033100     perform 1000-initialize thru\n033200             1000-initialize-exit\n033300\n033400     perform 2000-init-tcpip-data thru\n033500             2000-init-tcpip-data-exit\n033600\n033700     perform 2100-obtain-socket thru\n033800             2100-obtain-socket-exit\n033900\n034000     perform 2200-connect-to-server thru\n034100             2200-connect-to-server-exit\n034200\n034300     perform 3000-send-mail-message thru\n034400             3000-send-mail-message-exit\n034500\n034600     perform 4000-close-socket thru\n034700             4000-close-socket-exit\n034800\n034900     exec cics return\n035000     end-exec\n035100\n035200     goback\n035300     .\n035400\n035500 1000-initialize.\n035600\n035700     move sm-local-program-name\n035800       to we-msg-pgm-id\n035900\n036000     if eibcalen = length of sm-parms\n036100         call 'GETDATE' using ws-date\n036200\n036300         set address of sm-parms\n036400          to address of dfhcommarea\n036500\n036600         if sm-head-valid and sm-tail-valid\n036700             set address of sm-text-data\n036800              to sm-text-ptr\n036900             if sm-text-valid\n037000                 set resp-okay to true\n037100\n037200                 initialize wz-soc-s,\n037300                            wz-soc-subtask,\n037400                            wz-soc-name,\n037500                            wz-soc-ident,\n037600                            wz-retcode,\n037700                            wz-errno\n037800\n037900                 exec cics inquire system\n038000                      jobname (wc-cics-job-name)\n038100                      nohandle\n038200                 end-exec\n038300\n038400                 exec cics assign\n038500                      applid (wc-cics-applid)\n038600                      initparm (wc-cics-initparm)\n038700                      initparmlen (wc-cics-initparmlen)\n038800                      nohandle\n038900                 end-exec\n039000\n039100                 perform 7000-get-host-ip thru\n039200                         7000-get-host-ip-exit\n039300\n039400                 move wz-soc-host-ip\n039500                   to wz-soc-ghba-host-ip,\n039600                      ws-src-host-ip\n039700\n039800                 perform 7100-get-host-by-addr thru\n039900                         7100-get-host-by-addr-exit\n040000\n040100                 move wz-c08-hostname (1:wz-c08-hostname-len)\n040200                   to wz-soc-hostname,\n040300                      ws-src-hostname\n040400\n040500                 perform 1050-process-initparm thru\n040600                         1050-process-initparm-exit\n040700             else\n040800                 set resp-commlen-error to true\n040900             end-if\n041000         else\n041100             set resp-commlen-error to true\n041200         end-if\n041300     else\n041400         set resp-commlen-error to true\n041500     end-if\n041600     .\n041700 1000-initialize-exit. exit.\n041800\n041900 1050-process-initparm.\n042000     move low-values    to ws-initparm-1,\n042100                           ws-initparm-2,\n042200                           ws-initparm-3,\n042300                           ws-initparm-4,\n042400                           ws-smtp-hostname,\n042500                           ws-smtp-host-dotted-ip,\n042600                           ws-debug-secret-word\n042700     set ws-default-debug  to true\n042800\n042900     if  wc-cics-initparmlen > zero\n043000         unstring wc-cics-initparm\n043100                  delimited by ',' or ' ' or x'00'\n043200                  into ws-smtp-host-dotted-ip\n043300                       ws-smtp-hostname\n043400                       ws-debug-secret-word\n043500                       ws-initparm-4\n043600         end-unstring\n043700\n043800         if ws-smtp-host-dotted-ip not = low-values\n043900             perform 1100-normalize-ip-addr thru\n044000                     1100-normalize-ip-addr-exit\n044100             if ws-smtp-hostname = low-values\n044200                 move ws-smtp-host-ip\n044300                   to wz-soc-ghba-host-ip\n044400\n044500                 perform 7100-get-host-by-addr thru\n044600                         7100-get-host-by-addr-exit\n044700\n044800                 move wz-c08-hostname (1:wz-c08-hostname-len)\n044900                   to ws-smtp-hostname\n045000             else\n045100                 perform 1200-normalize-hostname thru\n045200                         1200-normalize-hostname-exit\n045300             end-if\n045400         else\n045500             if ws-smtp-hostname = low-values\n045600                 move ws-src-hostname\n045700                   to ws-smtp-hostname\n045800                 move ws-src-host-ip\n045900                   to ws-smtp-host-ip\n046000             else\n046100                 perform 1200-normalize-hostname thru\n046200                         1200-normalize-hostname-exit\n046300                 move ws-smtp-hostname\n046400                   to wz-soc-ghbn-hostname\n046500                 perform 7200-get-host-by-name thru\n046600                         7200-get-host-by-name-exit\n046700                 move wz-c08-host-ip\n046800                   to ws-smtp-host-ip\n046900             end-if\n047000         end-if\n047100     else\n047200         move ws-src-hostname  to ws-smtp-hostname\n047300         move ws-src-host-ip   to ws-smtp-host-ip\n047400     end-if\n047500     .\n047600 1050-process-initparm-exit. exit.\n047700\n047800 1100-normalize-ip-addr.\n047900     unstring ws-smtp-host-dotted-ip\n048000              delimited by '.' or ' ' or x'00'\n048100              into wi-dotted-ip (1)\n048200                   wi-dotted-ip (2)\n048300                   wi-dotted-ip (3)\n048400                   wi-dotted-ip (4)\n048500     end-unstring\n048600     perform\n048700       test after\n048800       varying wi-idx from 1 by 1\n048900       until wi-idx = 4\n049000         if wi-dotted-ip (wi-idx) is numeric\n049100             move wi-dotted-ip (wi-idx)\n049200               to wi-bin-ip-num\n049300             move wi-bin-ip-bin\n049400               to wi-bin-ip (wi-idx)\n049500         else\n049600             move x'00' to wi-bin-ip (wi-idx)\n049700         end-if\n049800     end-perform\n049900     move wi-bin-ip-addr\n050000       to ws-smtp-host-ip\n050100     .\n050200 1100-normalize-ip-addr-exit. exit.\n050300\n050400 1200-normalize-hostname.\n050500     move length of ws-smtp-hostname\n050600       to ws-smtp-hostname-len\n050700     call 'RMVWHTSP' using ws-smtp-hostname,\n050800                           ws-smtp-hostname-len\n050900     .\n051000 1200-normalize-hostname-exit. exit.\n051100\n051200 2000-init-tcpip-data.\n051300     set wz-default-maxsoc\n051400         wz-default-tcpname\n051500         wz-default-maxsno\n051600         wz-default-af\n051700         wz-default-family\n051800         wz-default-port\n051900         wz-default-soctype\n052000         wz-default-proto\n052100      to true\n052200\n052300     move wc-cics-applid\n052400       to wz-soc-adsname\n052500\n052600     move ws-smtp-host-ip\n052700       to wz-soc-name-ip\n052800\n052900     move eibtaskn to wz-soc-subtask-eibtaskn\n053000     move 'C'      to wz-soc-subtask-char\n053100     move zero     to wz-retcode, wz-errno\n053200     .\n053300 2000-init-tcpip-data-exit. exit.\n053400\n053500 2100-obtain-socket.\n053600     if wz-retcode-ok\n053700         set wz-soc-fun-is-initapi to true\n053800         call 'EZACICSO' using wz-soc-initapi\n053900                               wz-soc-maxsoc\n054000                               wz-soc-ident\n054100                               wz-soc-subtask\n054200                               wz-soc-maxsno\n054300                               wz-errno\n054400                               wz-retcode\n054500\n054600         if wz-initapi-ok\n054700             set wz-soc-fun-is-socket to true\n054800             call 'EZACICSO' using wz-soc-socket\n054900                                   wz-soc-af\n055000                                   wz-soc-type\n055100                                   wz-soc-proto\n055200                                   wz-errno\n055300                                   wz-retcode\n055400             if wz-retcode >= zero\n055500                 compute wz-soc-s = wz-retcode\n055600                 compute wz-retcode = zero\n055700             else\n055800                 set resp-obtain-error to true\n055900             end-if\n056000         else\n056100             set resp-initapi-error to true\n056200         end-if\n056300     else\n056400         continue\n056500     end-if\n056600     .\n056700 2100-obtain-socket-exit. exit.\n056800\n056900 2200-connect-to-server.\n057000     if wz-retcode-ok\n057100         set wz-soc-fun-is-connect to true\n057200         call 'EZACICSO' using wz-soc-connect\n057300                               wz-soc-s\n057400                               wz-soc-name\n057500                               wz-errno\n057600                               wz-retcode\n057700         if wz-retcode-ok\n057800             perform 6000-read-until-empty thru\n057900                     6000-read-until-empty-exit\n058000         else\n058100             set resp-connect-error to true\n058200         end-if\n058300     end-if\n058400     .\n058500 2200-connect-to-server-exit. exit.\n058600\n058700 3000-send-mail-message.\n058800     if wz-retcode-ok\n058900         perform 3100-signon thru\n059000                 3100-signon-exit\n059100         perform 3200-send-header thru\n059200                 3200-send-header-exit\n059300         perform 3300-send-msg-text thru\n059400                 3300-send-msg-text-exit\n059500         perform 3400-signoff thru\n059600                 3400-signoff-exit\n059700     end-if\n059800     .\n059900 3000-send-mail-message-exit. exit.\n060000\n060100 3100-signon.\n060200     if wz-retcode-ok\n060300         set ws-str-ptr-initial     to true\n060400         move low-values to wz-soc-write-buffer\n060500         string\n060600             'HELO '\n060700             wc-cics-applid\n060800             ws-crlf\n060900                delimited by size\n061000             into wz-soc-write-buffer\n061100             pointer ws-str-ptr\n061200         end-string\n061300         compute wz-soc-write-nbyte = ws-str-ptr - 1\n061400         perform 3900-send-to-server thru\n061500                 3900-send-to-server-exit\n061600         evaluate true\n061700             when ip-rc-250-okay\n061800                 continue\n061900             when other\n062000                 set resp-sm-error to true\n062100         end-evaluate\n062200     else\n062300         continue\n062400     end-if\n062500     .\n062600 3100-signon-exit. exit.\n062700\n062800 3200-send-header.\n062900     if wz-retcode-ok and resp-okay\n063000         move length of sm-sender to ws-str-len\n063100         call 'RMVWHTSP' using sm-sender,\n063200                               ws-str-len\n063300         set ws-str-ptr-initial     to true\n063400         move low-values to wz-soc-write-buffer\n063500         string\n063600             'MAIL FROM: '\n063700                delimited by size\n063800             sm-sender\n063900                delimited by x'00'\n064000             ws-crlf\n064100                delimited by size\n064200             into wz-soc-write-buffer\n064300             pointer ws-str-ptr\n064400         end-string\n064500         compute wz-soc-write-nbyte = ws-str-ptr - 1\n064600         perform 3900-send-to-server thru\n064700                 3900-send-to-server-exit\n064800         evaluate true\n064900             when ip-rc-250-okay\n065000                 set ws-not-done   to true\n065100                 perform 3250-send-RCPT-list thru\n065200                         3250-send-RCPT-list-exit\n065300                     varying ws-loop-cnt from 1 by 1\n065400                     until ws-loop-cnt > sm-rcpt-num\n065500                        or ws-done\n065600             when other\n065700                 set resp-sm-error to true\n065800         end-evaluate\n065900     else\n066000         continue\n066100     end-if\n066200     .\n066300 3200-send-header-exit. exit.\n066400\n066500 3250-send-RCPT-list.\n066600     if  wz-retcode-ok\n066700         set ws-str-ptr-initial     to true\n066800         move low-values to wz-soc-write-buffer\n066900         move length of sm-rcpt-addr (ws-loop-cnt)\n067000           to ws-str-len\n067100         call 'RMVWHTSP' using sm-rcpt-addr ( ws-loop-cnt )\n067200                               ws-str-len\n067300         move length of sm-rcpt-name (ws-loop-cnt)\n067400           to ws-str-len\n067500         call 'RMVWHTSP' using sm-rcpt-name ( ws-loop-cnt )\n067600                               ws-str-len\n067700         string\n067800             'RCPT TO: '\n067900                delimited by size\n068000             sm-rcpt-addr ( ws-loop-cnt )\n068100                delimited by x'00'\n068200             ws-crlf\n068300                delimited by size\n068400             into wz-soc-write-buffer\n068500             pointer ws-str-ptr\n068600         end-string\n068700         compute wz-soc-write-nbyte = ws-str-ptr - 1\n068800         perform 3900-send-to-server thru\n068900                 3900-send-to-server-exit\n069000         evaluate true\n069100             when ip-rc-250-okay\n069200             when ip-rc-251-not-local\n069300                 set ws-not-done   to true\n069400             when ip-rc-450-no-actn-busy\n069500             when ip-rc-451-aborted\n069600             when ip-rc-452-no-storage\n069700             when ip-rc-550-unavailable\n069800                 set ws-not-done   to true\n069900             when other\n070000                 set resp-sm-error to true\n070100                 set ws-done       to true\n070200         end-evaluate\n070300     else\n070400         set ws-done to true\n070500     end-if\n070600     .\n070700 3250-send-RCPT-list-exit. exit.\n070800\n070900 3300-send-msg-text.\n071000     if wz-retcode-ok and resp-okay\n071100         set ws-str-ptr-initial     to true\n071200         move low-values to wz-soc-write-buffer\n071300         string\n071400             'DATA'\n071500             ws-crlf\n071600                delimited by size\n071700             into wz-soc-write-buffer\n071800             pointer ws-str-ptr\n071900         end-string\n072000         compute wz-soc-write-nbyte = ws-str-ptr - 1\n072100         perform 3900-send-to-server thru\n072200                 3900-send-to-server-exit\n072300         if ip-rc-354-input-msg\n072400             set ws-str-ptr-initial to true\n072500             move low-values to wz-soc-write-buffer\n072600             perform 3350-build-msg-hdr thru\n072700                     3350-build-msg-hdr-exit\n072800             move length of sm-text to ws-str-len\n072900             call 'RMVWHTSP' using sm-text,\n073000                                   ws-str-len\n073100             string\n073200                 sm-text\n073300                 delimited by x'00'\n073400                 ws-crlf '.' ws-crlf\n073500                 delimited by size\n073600                 into wz-soc-write-buffer\n073700                 pointer ws-str-ptr\n073800             end-string\n073900             compute wz-soc-write-nbyte = ws-str-ptr - 1\n074000             perform 3900-send-to-server thru\n074100                     3900-send-to-server-exit\n074200             if ip-rc-250-okay\n074300                 continue\n074400             else\n074500                 set resp-sm-error to true\n074600             end-if\n074700         else\n074800             set resp-sm-error to true\n074900         end-if\n075000     else\n075100         continue\n075200     end-if\n075300     .\n075400 3300-send-msg-text-exit. exit.\n075500\n075600 3350-build-msg-hdr.\n075700     move length of sm-hdr-from             to ws-str-len\n075800     call 'RMVWHTSP' using sm-hdr-from         ws-str-len\n075900     move length of sm-hdr-subject          to ws-str-len\n076000     call 'RMVWHTSP' using sm-hdr-subject      ws-str-len\n076100     move length of sm-hdr-reply-to         to ws-str-len\n076200     call 'RMVWHTSP' using sm-hdr-reply-to     ws-str-len\n076300     move eibtaskn                          to wc-eib-taskn\n076400     move eibtime                           to wc-eib-time\n076500     move eibdate                           to wc-eib-date\n076600     move eibtrnid                          to wc-eib-trnid\n076700     if eibtrmid = low-values\n076800         move 'bkgn'                        to wc-eib-trmid\n076900     else\n077000         move eibtrmid                      to wc-eib-trmid\n077100     end-if\n077200     string\n077300             'Date: '        delimited by size\n077400             ws-date         delimited by x'00'\n077500             ws-crlf         delimited by size\n077600             'From: '        delimited by size\n077700             sm-hdr-from     delimited by x'00'\n077800             ws-crlf         delimited by size\n077900             'To:'           delimited by size\n078000         into wz-soc-write-buffer\n078100         pointer ws-str-ptr\n078200     end-string\n078300\n078400     perform 3355-send-hdr-to-list thru\n078500             3355-send-hdr-to-list-exit\n078600         varying ws-loop-cnt from 1 by 1\n078700         until ws-loop-cnt > sm-rcpt-num\n078800\n078900     string\n079000             'Reply-To: '    delimited by size\n079100             sm-hdr-reply-to delimited by x'00'\n079200             ws-crlf         delimited by size\n079300             'Subject: '     delimited by size\n079400             sm-hdr-subject  delimited by x'00'\n079500             ws-crlf         delimited by size\n079600             'Organization: Oregon Department of Transportation'\n079700             ws-crlf\n079800             'X-CICS: '\n079900                 wc-cics-applid '-'\n080000                 wc-eib-date  '-'\n080100                 wc-eib-time  '-'\n080200                 wc-eib-taskn '-'\n080300                 wc-eib-trnid '-'\n080400                 wc-eib-trmid\n080500             ws-crlf\n080600             'Importance: High'\n080700             ws-crlf\n080800             'X-Mailer: CICS - SMTPXXCX Ver 1.0'\n080900             ws-crlf\n081000         delimited by size\n081100         into wz-soc-write-buffer\n081200         pointer ws-str-ptr\n081300     end-string\n081400     .\n081500 3350-build-msg-hdr-exit. exit.\n081600\n081700 3355-send-hdr-to-list.\n081800     string\n081900             ' ' delimited by size\n082000             sm-rcpt-name ( ws-loop-cnt )\n082100                delimited by x'00'\n082200             ' ' delimited by size\n082300             sm-rcpt-addr ( ws-loop-cnt )\n082400                delimited by x'00'\n082500         into wz-soc-write-buffer\n082600         pointer ws-str-ptr\n082700     end-string\n082800\n082900     if ws-loop-cnt = sm-rcpt-num\n083000         string\n083100             ws-crlf delimited by size\n083200             into wz-soc-write-buffer\n083300             pointer ws-str-ptr\n083400         end-string\n083500     else\n083600         string\n083700             ',' delimited by size\n083800             ws-crlf delimited by size\n083900             into wz-soc-write-buffer\n084000             pointer ws-str-ptr\n084100         end-string\n084200     end-if\n084300     .\n084400 3355-send-hdr-to-list-exit. exit.\n084500\n084600 3400-signoff.\n084700     if wz-retcode-ok\n084800         set ws-str-ptr-initial     to true\n084900         move low-values to wz-soc-write-buffer\n085000         string\n085100             'QUIT'\n085200             ws-crlf\n085300                delimited by size\n085400             into wz-soc-write-buffer\n085500             pointer ws-str-ptr\n085600         end-string\n085700         compute wz-soc-write-nbyte = ws-str-ptr - 1\n085800         perform 3900-send-to-server thru\n085900                 3900-send-to-server-exit\n086000     else\n086100         continue\n086200     end-if\n086300     .\n086400 3400-signoff-exit. exit.\n086500\n086600 3900-send-to-server.\n086700     perform 5000-write-socket thru\n086800             5000-write-socket-exit\n086900     perform 6000-read-until-empty thru\n087000             6000-read-until-empty-exit\n087100     .\n087200 3900-send-to-server-exit. exit.\n087300\n087400 4000-close-socket.\n087500     if wz-retcode-ok\n087600         set wz-soc-fun-is-close to true\n087700         call 'EZACICSO' using wz-soc-close\n087800                               wz-soc-close-s\n087900                               wz-errno\n088000                               wz-retcode\n088100         if wz-retcode-ok\n088200             continue\n088300         else\n088400             set resp-close-error to true\n088500         end-if\n088600     else\n088700         move wz-soc-close-s   to wzz-soc-shutdown-s\n088800         perform 4500-shutdown-socket thru\n088900                 4500-shutdown-socket-exit\n089000     end-if\n089100     .\n089200 4000-close-socket-exit. exit.\n089300\n089400 4500-shutdown-socket.\n089500     set wzz-shutdown-end-both to true\n089600     call 'EZACICSO' using wzz-soc-fun-is-shutdown\n089700                           wzz-soc-shutdown-s\n089800                           wzz-soc-shutdown-how\n089900                           wzz-errno\n090000                           wzz-retcode\n090100     if wzz-retcode-ok\n090200         continue\n090300     else\n090400         set resp-shutdown-error to true\n090500     end-if\n090600     .\n090700 4500-shutdown-socket-exit. exit.\n090800\n090900 5000-write-socket.\n091000     if wz-retcode-ok\n091100         if ws-debug-on\n091200             move wz-soc-write-nbyte\n091300               to we-f-num\n091400             string\n091500                 '* C:<' we-f-num '>'\n091600                 wz-soc-write-buffer(1:80)\n091700                 delimited by size\n091800                 into we-msg-text\n091900             end-string\n092000             call 'tcpmessage' using we-msg\n092100         end-if\n092200         perform 5500-ebcdic-to-ascii thru\n092300                 5500-ebcdic-to-ascii-exit\n092400         set wz-soc-fun-is-write to true\n092500         if wz-soc-write-nbyte >= 0\n092600            and wz-soc-write-nbyte <= wz-soc-write-max\n092700             call 'EZACICSO' using wz-soc-write\n092800                                   wz-soc-write-s\n092900                                   wz-soc-write-nbyte\n093000                                   wz-soc-write-buffer\n093100                                   wz-errno\n093200                                   wz-retcode\n093300             if wz-retcode > 0\n093400                 if wz-retcode = wz-soc-write-nbyte\n093500                     continue\n093600                 else\n093700                     move wz-soc-write-nbyte\n093800                       to we-f-num\n093900                     move wz-retcode\n094000                       to we-f-num-2\n094100                     string\n094200                         '* I: write count mismatch '\n094300                         'IN=' we-f-num\n094400                         ', OUT=' we-f-num-2\n094500                         delimited by size\n094600                         into we-msg-text\n094700                     end-string\n094800                     call 'tcpmessage' using we-msg\n094900                 end-if\n095000                 set wz-retcode-ok to true\n095100             else\n095200                 set resp-write-error to true\n095300             end-if\n095400         else\n095500             set resp-write-error          to true\n095600             set resp-write-len-error      to true\n095700             compute wz-retcode = -1\n095800         end-if\n095900     end-if\n096000     .\n096100 5000-write-socket-exit. exit.\n096200\n096300 5500-ebcdic-to-ascii.\n096400     if wz-retcode-ok\n096500         set wz-soc-fun-is-etoa to true\n096600         call 'EZACIC04' using wz-soc-write-buffer\n096700                               wz-soc-write-nbyte\n096800     end-if\n096900     .\n097000 5500-ebcdic-to-ascii-exit. exit.\n097100\n097200 6000-read-until-empty.\n097300     compute sm-resp-msg-idx = 0\n097400     move low-values\n097500       to sm-resp-msgs\n097600\n097700     perform with test after until ip-rc-resp-end or\n097800                                   wz-retcode-not-ok\n097900         perform 6100-read-socket thru\n098000                 6100-read-socket-exit\n098100         if wz-retcode > 0\n098200             set wz-retcode-ok to true\n098300         else\n098400             move low-values\n098500               to wz-soc-read-buffer\n098600         end-if\n098700         move wz-soc-read-buffer\n098800           to sm-reply-codes\n098900         if sm-resp-max-msgs\n099000             continue\n099100         else\n099200             compute sm-resp-msg-idx\n099300                   = sm-resp-msg-idx + 1\n099400             move sm-reply-codes\n099500               to sm-resp-msg (sm-resp-msg-idx)\n099600             compute sm-resp-msg-len (sm-resp-msg-idx)\n099700                   = wz-retcode\n099800         end-if\n099900     end-perform\n100000     .\n100100 6000-read-until-empty-exit. exit.\n100200\n100300 6100-read-socket.\n100400     if wz-retcode-ok\n100500         set wz-soc-fun-is-read to true\n100600         move zeros             to wz-soc-read-cnt\n100700         move low-values        to wz-soc-read-buffer\n100800         set ws-not-done        to true\n100900\n101000         perform until ws-done\n101100             move low-values    to wz-soc-work-buffer\n101200\n101300             set wz-soc-read-max to true\n101400\n101500             call 'EZACICSO' using wz-soc-read\n101600                                   wz-soc-read-s\n101700                                   wz-soc-read-nbyte\n101800                                   wz-soc-work-buffer\n101900                                   wz-errno\n102000                                   wz-retcode\n102100\n102200             if wz-retcode > 0\n102300                 if (wz-retcode + wz-soc-read-cnt) >\n102400                     length of wz-soc-read-buffer\n102500                     set resp-read-error   to true\n102600                     set wz-retcode-not-ok to true\n102700                     set ws-done           to true\n102800                 else\n102900                     move wz-soc-work-buffer (1:wz-retcode)\n103000                       to wz-soc-read-buffer\n103100                          (wz-soc-read-cnt + 1:)\n103200                     compute wz-soc-read-cnt =\n103300                             wz-soc-read-cnt + wz-retcode\n103400                     if wz-soc-work-buffer(wz-retcode - 1:\n103500                                 length of wz-crlf)\n103600                        = wz-crlf\n103700                         set ws-done to true\n103800                     else\n103900                         continue\n104000                     end-if\n104100                     compute wz-retcode = wz-soc-read-cnt\n104200                 end-if\n104300             else\n104400                 if wz-read-less-than-one\n104500                     set wz-retcode-ok to true\n104600                 else\n104700                     continue\n104800                 end-if\n104900                 set ws-done to true\n105000             end-if\n105100         end-perform\n105200\n105300         if wz-soc-read-cnt > 0 and wz-retcode >= 0\n105400             compute wz-soc-read-nbyte = wz-soc-read-cnt\n105500             compute wz-retcode        = wz-soc-read-cnt\n105600             perform 6500-ascii-to-ebcdic thru\n105700                     6500-ascii-to-ebcdic-exit\n105800             if ws-debug-on\n105900                 move wz-soc-read-nbyte\n106000                   to we-f-num\n106100                 string\n106200                     '* S:<' we-f-num '>'\n106300                      wz-soc-read-buffer(1:80)\n106400                     delimited by size\n106500                     into we-msg-text\n106600                 end-string\n106700                 call 'tcpmessage' using we-msg\n106800             end-if\n106900         else\n107000             continue\n107100         end-if\n107200\n107300         if wz-retcode-not-ok\n107400             set resp-read-error to true\n107500         else\n107600             continue\n107700         end-if\n107800\n107900     end-if\n108000     .\n108100 6100-read-socket-exit. exit.\n108200\n108300 6500-ascii-to-ebcdic.\n108400     if wz-retcode >= 0\n108500         set wz-soc-fun-is-atoe to true\n108600         call 'EZACIC05' using wz-soc-read-buffer\n108700                               wz-soc-read-nbyte\n108800     end-if\n108900     .\n109000 6500-ascii-to-ebcdic-exit. exit.\n109100\n109200 7000-get-host-ip.\n109300         set wz-soc-fun-is-gethostid to true\n109400\n109500         call 'EZACICSO' using wz-soc-get-host-id\n109600                               wz-soc-host-ip\n109700     .\n109800 7000-get-host-ip-exit. exit.\n109900\n110000 7100-get-host-by-addr.\n110100     if wz-retcode-ok\n110200         set wz-soc-fun-is-ghba to true\n110300\n110400         call 'EZACICSO' using wz-soc-get-host-by-addr\n110500                               wz-soc-ghba-host-ip\n110600                               wz-errno\n110700                               wz-retcode\n110800         if wz-gethost-hostent-bad\n110900             compute wz-soc-ghba-hostent = 0\n111000         else\n111100             move wz-errno\n111200               to wz-soc-ghba-hostent,\n111300                  wz-c08-hostent-addr\n111400             call 'EZACIC08' using wz-c08-hostent-addr\n111500                             wz-c08-hostname-len\n111600                             wz-c08-hostname\n111700                             wz-c08-hostalias-cnt\n111800                             wz-c08-hostalias-seq\n111900                             wz-c08-hostalias-len\n112000                             wz-c08-hostalias\n112100                             wz-c08-host-ip-type\n112200                             wz-c08-host-ip-len\n112300                             wz-c08-host-ip-cnt\n112400                             wz-c08-host-ip-seq\n112500                             wz-c08-host-ip\n112600                             wz-retcode\n112700         end-if\n112800     end-if\n112900     .\n113000 7100-get-host-by-addr-exit. exit.\n113100\n113200 7200-get-host-by-name.\n113300     if wz-retcode-ok\n113400         set wz-soc-fun-is-ghbn to true\n113500\n113600         move length of wz-soc-ghbn-hostname\n113700           to wz-soc-ghbn-namelen\n113800         call 'RMVWHTSP' using wz-soc-ghbn-hostname,\n113900                               wz-soc-ghbn-namelen\n114000         call 'EZACICSO' using wz-soc-get-host-by-name\n114100                               wz-soc-ghbn-namelen\n114200                               wz-soc-ghbn-hostname\n114300                               wz-errno\n114400                               wz-retcode\n114500         if wz-gethost-hostent-bad\n114600             compute wz-soc-ghbn-hostent = 0\n114700         else\n114800             move wz-errno\n114900               to wz-soc-ghbn-hostent,\n115000                  wz-c08-hostent-addr\n115100             call 'EZACIC08' using wz-c08-hostent-addr\n115200                             wz-c08-hostname-len\n115300                             wz-c08-hostname\n115400                             wz-c08-hostalias-cnt\n115500                             wz-c08-hostalias-seq\n115600                             wz-c08-hostalias-len\n115700                             wz-c08-hostalias\n115800                             wz-c08-host-ip-type\n115900                             wz-c08-host-ip-len\n116000                             wz-c08-host-ip-cnt\n116100                             wz-c08-host-ip-seq\n116200                             wz-c08-host-ip\n116300                             wz-retcode\n116400         end-if\n116500     end-if\n116600     .\n116700 7200-get-host-by-name-exit. exit.\n116800\n116900 identification division.\n117000 program-id.                     rmvwhtsp.\n117100 data division.\n117200 working-storage section.\n117300 77  ws-idx                         pic 9(08)  binary.\n117400 linkage section.\n117500 01  rmv-str                        pic x(32768).\n117600 01  rmv-str-len                    pic 9(08)  binary.\n117700 01  str-len redefines rmv-str-len  pic 9(08)  binary.\n117800 procedure division using rmv-str, rmv-str-len.\n117900     evaluate true\n118000         when rmv-str-len > 0 and rmv-str-len <= 32768\n118100             perform\n118200               varying ws-idx from 1 by 1\n118300               until rmv-str(1:1) not = space or\n118400                     ws-idx = rmv-str-len\n118500                 if rmv-str(1:1) = space\n118600                     move rmv-str(2:rmv-str-len - 1)\n118700                       to rmv-str(1:rmv-str-len)\n118800                 end-if\n118900             end-perform\n119000             perform\n119100               varying ws-idx from rmv-str-len by -1\n119200               until ( rmv-str(ws-idx:1) not = x'00'  and\n119300                       rmv-str(ws-idx:1) not = space ) or\n119400                     ws-idx = zero\n119500                 move x'00'\n119600                   to rmv-str(ws-idx:1)\n119700             end-perform\n119800             move ws-idx\n119900               to str-len\n120000             move 0 to return-code\n120100         when rmv-str-len = 0\n120200             move 4 to return-code\n120300         when other\n120400             move 8 to return-code\n120500     end-evaluate\n120600     .\n120700 end program rmvwhtsp.\n120800\n120900 identification division.\n121000 program-id.                     getdate.\n121100 data division.\n121200 working-storage section.\n121300 01  ws-filler.\n121400     03  ws-current-date              pic x(21).\n121500     03  filler redefines ws-current-date.\n121600         05 ws-cd-year                pic 9(04).\n121700         05 ws-cd-mon                 pic 9(02).\n121800         05 ws-cd-day                 pic 9(02).\n121900         05 ws-cd-hour                pic 9(02).\n122000         05 ws-cd-min                 pic 9(02).\n122100         05 ws-cd-sec                 pic 9(02).\n122200         05 ws-cd-hun                 pic 9(02).\n122300         05 ws-cd-GMT-off             pic x(05).\n122400\n122500     03  ws-months.\n122600         05 filler                    pic x(03) value 'Jan'.\n122700         05 filler                    pic x(03) value 'Feb'.\n122800         05 filler                    pic x(03) value 'Mar'.\n122900         05 filler                    pic x(03) value 'Apr'.\n123000         05 filler                    pic x(03) value 'May'.\n123100         05 filler                    pic x(03) value 'Jun'.\n123200         05 filler                    pic x(03) value 'Jul'.\n123300         05 filler                    pic x(03) value 'Aug'.\n123400         05 filler                    pic x(03) value 'Sep'.\n123500         05 filler                    pic x(03) value 'Oct'.\n123600         05 filler                    pic x(03) value 'Nov'.\n123700         05 filler                    pic x(03) value 'Dec'.\n123800     03  ws-month redefines ws-months\n123900                  occurs 12 times     pic x(03).\n124000\n124100     03  ws-weekday                   pic 9(01).\n124200     03  ws-week-days.\n124300         05 filler                    pic x(03) value 'Mon'.\n124400         05 filler                    pic x(03) value 'Tue'.\n124500         05 filler                    pic x(03) value 'Wed'.\n124600         05 filler                    pic x(03) value 'Thu'.\n124700         05 filler                    pic x(03) value 'Fri'.\n124800         05 filler                    pic x(03) value 'Sat'.\n124900         05 filler                    pic x(03) value 'Sun'.\n125000     03  ws-wd redefines ws-week-days\n125100               occurs 7 times         pic x(03).\n125200 linkage section.\n125300 01  wl-date                          pic x(32).\n125400 procedure division using wl-date.\n125500     accept ws-weekday from day-of-week\n125600     move function current-date\n125700       to ws-current-date\n125800     string ws-wd ( ws-weekday )   ', '\n125900            ws-cd-day              ' '\n126000            ws-month ( ws-cd-mon ) ' '\n126100            ws-cd-year             ' '\n126200            ws-cd-hour             ':'\n126300            ws-cd-min              ':'\n126400            ws-cd-sec              ' '\n126500            ws-cd-GMT-off          x'00'\n126600         delimited by size\n126700         into wl-date\n126800     end-string\n126900     .\n127000 end program getdate.\n127100\n127200 identification division.\n127300 program-id.                     tcpmessage.\n127400 data division.\n127500 working-storage section.\n127600 01  wc-filler.\n127700     03  wc-cics-resp                 pic 9(09).\n127800     03  wc-cics-resp2                pic 9(09).\n127900     03  wc-cics-length               pic 9(04) binary.\n128000     03  wc-cics-td-message           pic x(04) value 'TCPM'.\n128100 01  ws-msg                           pic x(132).\n128200 01  filler.\n128300     03  ws-current-date              pic x(21).\n128400     03  filler redefines ws-current-date.\n128500         05 ws-cd-year                pic 9(04).\n128600         05 ws-cd-mon                 pic 9(02).\n128700         05 ws-cd-day                 pic 9(02).\n128800         05 ws-cd-hour                pic 9(02).\n128900         05 ws-cd-min                 pic 9(02).\n129000         05 ws-cd-sec                 pic 9(02).\n129100         05 ws-cd-hun                 pic 9(02).\n129200         05 ws-cd-GMT-off             pic x(05).\n129300\n129400 linkage section.\n129500 01  wl-msg.\n129600     03 filler                        pic x(08).\n129700     03 wl-msg-text                   pic x(100).\n129800 procedure division using wl-msg.\n129900\n130000     exec cics address\n130100               eib(address of dfheiblk)\n130200     end-exec\n130300\n130400     move low-values to ws-msg\n130500\n130600     move function current-date\n130700       to ws-current-date\n130800     compute wc-cics-length = 1\n130900     string\n131000            eibtrmid\n131100            eibtrnid\n131200            ' '\n131300            ws-cd-year\n131400            ws-cd-mon\n131500            ws-cd-day\n131600            ws-cd-hour\n131700            ws-cd-min\n131800            ws-cd-sec\n131900            ' '\n132000            wl-msg\n132100            delimited by size\n132200       into ws-msg\n132300       pointer wc-cics-length\n132400     end-string\n132500     compute wc-cics-length = wc-cics-length - 1\n132600     perform with test after\n132700             until wc-cics-resp not = dfhresp(nospace)\n132800         exec cics writeq td\n132900                   queue  (wc-cics-td-message)\n133000                   from   (ws-msg)\n133100                   length (wc-cics-length)\n133200                   resp   (wc-cics-resp)\n133300                   resp2  (wc-cics-resp2)\n133400         end-exec\n133500     end-perform\n133600     move low-values to wl-msg-text\n133700     .\n133800 end program tcpmessage.\n133900\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMTPXXIX": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x05\\x01\\x05\\x06\\x7f\\x01\\x05\\x06\\x7f\\x13V\\x00\\xa6\\x00\\xa6\\x00\\x00\\xd7\\xc7\\xd6\\xd9\\xd3\\xc9\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-03-08T00:00:00", "modifydate": "2005-03-08T13:56:05", "lines": 166, "newlines": 166, "modlines": 0, "user": "PGORLIN"}, "text": "000100******************************************************************\n000200* INCLUDE FOR THE SEND MAIL PROGRAM\n000300******************************************************************\n000400 01  sm-parms.\n000500     03  sm-program                       pic x(08).\n000600         88  sm-head-valid           value 'SMTPXXCX'.\n000700     03  sm-sender                        pic x(78).\n000800     03  sm-recipients.\n000900         05  sm-rcpt-num                  pic 9(02).\n001000             88 sm-rcpt-max          value 10.\n001100             88 sm-rcpt-okay         value 1 thru 10.\n001200         05  sm-rcpts                     pic x(1560).\n001300         05  filler redefines sm-rcpts.\n001400             07 sm-rcpt-addr  occurs 10 times pic x(78).\n001500             07 sm-rcpt-name  occurs 10 times pic x(78).\n001600     03  sm-hdr.\n001700         05  sm-hdr-from                  pic x(78).\n001800         05  sm-hdr-subject               pic x(78).\n001900         05  sm-hdr-reply-to              pic x(78).\n002000     03  sm-resp-errors.\n002100         05 resp-nocomm                   pic x(01).\n002200            88 resp-nocomm-error                    value 'Y'.\n002300         05 resp-commlen                  pic x(01).\n002400            88 resp-commlen-error                   value 'Y'.\n002500         05 resp-initapi                  pic x(01).\n002600            88 resp-initapi-error                   value 'Y'.\n002700         05 resp-gethostid                pic x(01).\n002800            88 resp-gethostid-error                 value 'Y'.\n002900         05 resp-obtain                   pic x(01).\n003000            88 resp-obtain-error                    value 'Y'.\n003100         05 resp-connect                  pic x(01).\n003200            88 resp-connect-error                   value 'Y'.\n003300         05 resp-close                    pic x(01).\n003400            88 resp-close-error                     value 'Y'.\n003500         05 resp-read                     pic x(01).\n003600            88 resp-read-error                      value 'Y'.\n003700         05 resp-write                    pic x(01).\n003800            88 resp-write-error                     value 'Y'.\n003900         05 resp-write-len                pic x(01).\n004000            88 resp-write-len-error                 value 'Y'.\n004100         05 resp-shutdown                 pic x(01).\n004200            88 resp-shutdown-error                  value 'Y'.\n004300         05 resp-sm                       pic x(01).\n004400            88 resp-sm-error                        value 'Y'.\n004500         05 filler                     pic x(04).\n004600     03  filler redefines sm-resp-errors  pic x(16).\n004700         88 resp-okay            VALUE 'NNNNNNNNNNNNNNNN'.\n004800\n004900     03 sm-reply-codes                 pic x(256).\n005000     03 ip-reply-codes redefines sm-reply-codes\n005100                                       pic x(256).\n005200     03 filler redefines ip-reply-codes.\n005300         05 ip-rc-code                 pic x(03).\n005400             88 ip-rc-110              value '110'.\n005500             88 ip-rc-110-restart-mkr  value '110'.\n005600             88 ip-rc-120              value '120'.\n005700             88 ip-rc-120-srvc-rdy-tm  value '120'.\n005800             88 ip-rc-125              value '125'.\n005900             88 ip-rc-125-trans-start  value '125'.\n006000             88 ip-rc-150              value '150'.\n006100             88 ip-rc-150-fs-okay      value '150'.\n006200             88 ip-rc-200              value '200'.\n006300             88 ip-rc-200-cmd-okay     value '200'.\n006400             88 ip-rc-200-ready        value '200'.\n006500             88 ip-rc-202              value '202'.\n006600             88 ip-rc-202-cmd-not-imp  value '202'.\n006700             88 ip-rc-211              value '211'.\n006800             88 ip-rc-211-status       value '211'.\n006900             88 ip-rc-212              value '212'.\n007000             88 ip-rc-212-dir-status   value '212'.\n007100             88 ip-rc-213              value '213'.\n007200             88 ip-rc-213-file-status  value '213'.\n007300             88 ip-rc-214              value '214'.\n007400             88 ip-rc-214-help-msg     value '214'.\n007500             88 ip-rc-215              value '215'.\n007600             88 ip-rc-215-NAME-sys-typ value '215'.\n007700             88 ip-rc-220              value '220'.\n007800             88 ip-rc-220-ready        value '220'.\n007900             88 ip-rc-221              value '221'.\n008000             88 ip-rc-221-closing      value '221'.\n008100             88 ip-rc-225              value '225'.\n008200             88 ip-rc-225-dc-open      value '225'.\n008300             88 ip-rc-226              value '226'.\n008400             88 ip-rc-226-dc-closing   value '226'.\n008500             88 ip-rc-227              value '227'.\n008600             88 ip-rc-227-ent-pas-mod  value '227'.\n008700             88 ip-rc-230              value '230'.\n008800             88 ip-rc-230-usr-logd-on  value '230'.\n008900             88 ip-rc-250              value '250'.\n009000             88 ip-rc-250-okay         value '250'.\n009100             88 ip-rc-251              value '251'.\n009200             88 ip-rc-251-not-local    value '251'.\n009300             88 ip-rc-252              value '252'.\n009400             88 ip-rc-252-usr-not-vrfy value '252'.\n009500             88 ip-rc-257              value '257'.\n009600             88 ip-rc-257-path-created value '257'.\n009700             88 ip-rc-331              value '331'.\n009800             88 ip-rc-331-need-pass    value '331'.\n009900             88 ip-rc-332              value '332'.\n010000             88 ip-rc-332-need-acct    value '332'.\n010100             88 ip-rc-350              value '350'.\n010200             88 ip-rc-350-pend-info    value '350'.\n010300             88 ip-rc-354              value '354'.\n010400             88 ip-rc-354-input-msg    value '354'.\n010500             88 ip-rc-421              value '421'.\n010600             88 ip-rc-421-no-service   value '421'.\n010700             88 ip-rc-425              value '425'.\n010800             88 ip-rc-425-cant-op-dc   value '425'.\n010900             88 ip-rc-426              value '426'.\n011000             88 ip-rc-426-con-clo-abrt value '426'.\n011100             88 ip-rc-450              value '450'.\n011200             88 ip-rc-450-no-actn-busy value '450'.\n011300             88 ip-rc-451              value '451'.\n011400             88 ip-rc-451-aborted      value '451'.\n011500             88 ip-rc-452              value '452'.\n011600             88 ip-rc-452-no-storage   value '452'.\n011700             88 ip-rc-455              value '455'.\n011800             88 ip-rc-455-no-toform    value '455'.\n011900             88 ip-rc-500              value '500'.\n012000             88 ip-rc-500-syntax-err   value '500'.\n012100             88 ip-rc-501              value '501'.\n012200             88 ip-rc-501-bad-parm     value '501'.\n012300             88 ip-rc-502              value '502'.\n012400             88 ip-rc-502-cmd-nothere  value '502'.\n012500             88 ip-rc-503              value '503'.\n012600             88 ip-rc-503-bad-seq      value '503'.\n012700             88 ip-rc-504              value '504'.\n012800             88 ip-rc-504-prm-nothere  value '504'.\n012900             88 ip-rc-530              value '530'.\n013000             88 ip-rc-530-not-logd-on  value '530'.\n013100             88 ip-rc-532              value '532'.\n013200             88 ip-rc-532-need-acct    value '532'.\n013300             88 ip-rc-550              value '550'.\n013400             88 ip-rc-550-unavailable  value '550'.\n013500             88 ip-rc-551              value '551'.\n013600             88 ip-rc-551-actn-abrtd   value '551'.\n013700             88 ip-rc-551-not-local    value '551'.\n013800             88 ip-rc-552              value '552'.\n013900             88 ip-rc-552-fil-act-abrt value '552'.\n014000             88 ip-rc-553              value '553'.\n014100             88 ip-rc-553-bad-fil-name value '553'.\n014200             88 ip-rc-554              value '554'.\n014300             88 ip-rc-554-tran-failed  value '554'.\n014400             88 ip-rc-555              value '555'.\n014500             88 ip-rc-555-bad-toform   value '555'.\n014600         05 ip-rc-cont                 pic x(01).\n014700             88 ip-rc-resp-cont        value '-'.\n014800             88 ip-rc-resp-end         value ' '.\n014900         05 ip-rc-text                 pic x(252).\n015000\n015100     03 sm-resp-msg-idx                pic 9(02) binary.\n015200        88 sm-resp-max-msgs         value 15.\n015300     03 sm-resp-msgs                   pic x(3870).\n015400     03 filler redefines sm-resp-msgs occurs  15 times.\n015500         05 sm-resp-msg-len            pic 9(04) binary.\n015600         05 sm-resp-msg                pic x(256).\n015700\n015800     03  sm-text-len                      pic 9(08) binary.\n015900     03  sm-text-ptr                      pointer.\n016000\n016100     03  filler                           pic x(08).\n016200         88  sm-tail-valid           value 'SMTPTAIL'.\n016300\n016400 01  sm-text-data.\n016500     03  sm-text-hdr                      pic x(08).\n016600         88  sm-text-valid           value 'SMTPTEXT'.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT712/FILE712.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT712", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}