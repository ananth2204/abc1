{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011236000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 823004, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE103.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE103.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0f\\x07'", "DS1TRBAL": "b'N\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xaf\\x00\\x0e\\x00\\xb0\\x00\\x0e\\x00\\x10'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$ISPF": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00`\\x00`\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "FILE103"}, "text": " ISPF Support for the QUEUE Command\n ----------------------------------\n\n This mod adds ISPF support for the JES2 2.2.0 version of the QUEUE\n command.  It was written to be as small as possible (to ease any\n maintenance burden it might cause) and therefore is not particularly\n elegant.\n\n The code replaces the queue display with one of four ISPF panels\n (depending on terminal model number).  Data stored in QCOMMON, which\n has been built as part of the information to be displayed via TPUT, is\n simply defined to ISPF and displayed via the DISPLAY service.\n\n Listed below are the members included in this mod.  Changes are marked\n \"TEC\" in positions 69 through 71 of each member.\n\n   Member       Change\n   ------       ------\n   DISPLAY      Call ISPF to display information rather than TPUT;\n                change ISPF scroll commands to QUEUE commands.\n\n   INIT         Set flag and load ISPLINK if running under ISPF.\n\n   QCOMMON      Add work area for ISPF constants, macros, etc.\n\n   QUEUE        Skip VTAM macros if running under ISPF; set ISPF panel\n                name depending on terminal model; define ISPF variables.\n\n   REPOS        Change ISPF panel name when MODEL command is entered.\n\n The following members are not changes to the QUEUE command, but are\n needed for ISPF support:\n\n   QUECMDS      Command table used when running the QUEUE command under\n                ISPF NEWAPPL(QUE).  This permits QUEUE commands which\n                conflict with ISPF commands (e.g., PRINT, LIST) to be\n                used unchanged.\n\n   QUEPROF      Default values for PFKs when running the QUEUE command\n                under ISPF NEWAPPL(QUE).\n\n   QUEUEM2      QUEUE ISPF panel for 3278 model 2.\n\n   QUEUEM3      QUEUE ISPF panel for 3278 model 3.\n\n   QUEUEM4      QUEUE ISPF panel for 3278 model 4.\n\n   QUEUEM5      QUEUE ISPF panel for 3278 model 5.\n\n Installation Considerations\n ---------------------------\n\n 1. The four panels above must be copied to an available ISPPLIB\n    dataset.\n\n 2. Members QUEPROF and QUEUECMDS should be copied to an available\n    ISPTLIB dataset.  These members are used when running the QUEUE\n    command under a separate ISPF application named \"QUE\".  QUEUE can\n    be invoked as a separate ISPF application by:\n\n    o Coding a CLIST with:\n\n        ISPEXEC SELECT CMD(QUEUE) MODE(FSCR) NEWAPPL(QUE)\n\n    o Adding an option to an ISPF selection panel:\n\n        Q,'CMD(QUEUE &ZPARM) MODE(FSCR) NEWAPPL(QUE)'\n\n 3. ISPF support in QUEUE will work if QUEUE is invoked by just\n    entering \"TSO QUEUE\" on any ISPF command line, but this has the\n    following drawbacks:\n\n    o The PFKs will be that of the current ISPF application (most likely\n      ISR) and will not therefore be very useful in QUEUE.\n\n    o The scroll keys will not work.  (This could have been rectified by\n      additional mods to QUEUE and a change to the ISP command table,\n      but I thought the other way, running QUEUE as a separate ISPF\n      application, was sufficient.)\n\n 4. The default PFKs in member QUEPROF are the same as those in QUEUE.\n    I would suggest, however, that one key be changed to RETRIEVE (if\n    running under ISPF 2.3).  This permits the last QUEUE command to be\n    retrieved and modified.\n\n 5. I tried to design the panels to include the best of both QUEUE and\n    ISPF, so they do not look like the regular QUEUE display.\n\n 6. This code does not take ISPF split screen into consideration.  For\n    example, if QUEUE is invoked from the bottom ISPF screen, one or\n    more lines will be missing, depending on where the split is.  I\n    looked briefly at how to allow for this, and decided it would be\n    more trouble than it would be worth.  One way around this problem\n    (if you are running on other than a model 2) is to issue the MODEL 2\n    command.  This forces QUEUE to use a smaller panel.  Of course, if\n    you are not in split screen, the problem does not exist.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$SCRIPT": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\x81\\x01\\x81\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 385, "newlines": 385, "modlines": 0, "user": "FILE103"}, "text": ":h1.Tennessee Eastman mods\nThis dataset contains sample ISPF dialogs, EDIT macros, and utilities\ndeveloped at Tennessee Eastman Company.  No guarantees are made as to\nthe accuracy, suitability for your installation, originality, novelty,\nor cleverness of any of the panels, CLISTs, or programs contained\nherein.\n\n  Bill Horton\n  Tennessee Eastman Company\n  Building 284\n  Kingsport, TN 37662-1973\n:h2.Descriptions\nHere are the descriptions of the various mods contained in this\ndataset:\n:h3.Broadcast dataset dialog\nThis is a dialog which can be used to keep track of updates to the TSO\nbroadcast dataset.  It stores information about each message in an ISPF\ntable, and stores each broadcast message as a PDS member.\nMessages can be added, modified, or deleted; entry and update of\nmessages is via ISPF EDIT.  Messages are given an expiration date and\nwill be removed from the broadcast dataset the next time the dialog is\ninvoked (and a broadcast message is changed) after the expiration date.\n:h3.ISPF table edit dialog\nThis dialog can be used to edit a command table, including ISRCMDS and\nISPCMDS.  This done by copying the table to the user's profile dataset\n(assumed to be allocated to DDNAME ISPTABL) and invoking the ISPF\ncommand table edit program, ISPUCM, against it.  If the table is changed\nby ISPUCM, then it is copied back to its source.  ISPF must be recycled\nto see the effects of the change.\n:h3.Console Display Facility (CDF)\nThis is an ISPF dialog to display MVS console information (as in SPY).\nIf the invoker is authorized (has OPER authority), then MVS commands may\nalso be entered.  I didn't write this myself.  I got it from a mods tape\n(probably the CBT tape) and modified it for extended data stream\nconsoles (e.g., 3290s and 3179s) and for MVS SP 2.2.0.  There are a lot\nof ways to enter MVS commands and get responses nowdays, but we still\nlike this way best.  This code works with MVS/SP 3.1.0e (MVS/ESA).\n:h3.GRS/ENQ dialog\nThis dialog displays enqueue information.  You can request that only\ncontention information be displayed, or you can specify jobname, QNAME,\nand / or RNAME.  This is code I got somewhere else and added ISPF\naround it.\n:h3.PC3270 File Transfer dialog.\nThis dialog is mostly just a panel which facilitates the use of the\nPC3270 file transfer program while in ISPF.  The panel has tutorial\npanels which give syntax and samples for the PC SEND and RECEIVE\ncommands.\n\nThe dialog is invoked by entering \"pc\" on the command line of the bottom\npanel of ISPF.  A command table entry causes the CLIST VPCC to be\ninvoked.  This CLIST displays panel VPC which puts the command line at\nthe bottom (required by IND$FILE).  The user can now enter the SEND or\nRECEIVE command on his DOS screen.\n\nWhen the file transfer program enters \"IND$FILE ...\" on the ISPF\nthe command line, a command table entry invokes a CLIST (VPCTRAN) which\nactually invokes the IND$FILE command.  VPCTRAN is based on ADMUPCFT\nfrom IBM via GDDM.\n\n:h3.Dialog to display logo of submitter\nThis program displays the logo of the submitter of these mods on an\nISPF panel.  It may be invoked via command table entry LOGO.\nNote that entering \"logo debug\" will cause some program variables to\nbe written to SYSPRINT, and will display some of the arcs used to draw\nthe logo.\n:h3.EXIT dialog\nThis dialog will end the ISPF session (if not in split screen), and\n(optionally) log the user off TSO, and log another user on TSO.  It is\ninvoked by entering \"exit\" from any ISPF command line to terminate ISPF\n(go to TSO READY), entering \"logoff\" to terminate ISPF and log the user\noff TSO, or \"logon\" to terminate ISPF, log the user off TSO, and log\nanother user on TSO (this is considerably quicker than logging\ncompletely off then logging back on).\n:h3.PC3270 screen copy Edit Macro (COPYSCRN)\nThis macro facilitates the entry of data into ISPF EDIT via the Work\nStation Control Copy function of PC 3270s.  It presents a panel into\nwhich up to 80 byte records may be copied.  After the data is copied\nonto the panel, pressing the enter key adds the data to the end of the\ncurrent edit session data and clears the copy panel to accept more\ninput.\n:h3.ELIST Edit Macro\nELIST is a macro which can be used to list the data currently being\nedited via ISPF EDIT, including changes which have been made, without\nhaving to leave EDIT or save the data.  Syntax is:\n\n  ELIST attr\n\nwhere \"attr\" is any valid SYSOUT attribute which can be used with the\nTSO ALLOCATE command.  Examples:\n.fo off\n  ELIST DEST(NYC.RMT21)      List on an RJE printer on another NJE node\n  ELIST DEST(VM1.USER66)     Send to a VM user's virtual reader\n  ELIST CHARS(GT12)          List on 3800\n.fo\nIf no attribute is entered, the default destination of the TSO user's\nsession will be used.\n:h3.INFO Edit Macro\nThe INFO macro gets information about the dataset and member being\nedited, and displays it in the data via MSG and NOTE lines.  The\ninformation will not be saved, and may be cleared via the RESET command.\n:h3.SPELL Edit Macro\nSPELL invokes IBM's Document Composition Facility (SCRIPT/VS) to check\nspelling of the data currently being edited.  Lines containing\nmisspelled words have a NOTE line inserted after them, listing the\nmisspelled words for the line.\n\nSPELL should not be used with documents which contain SCRIPT control\nwords.\n:h3.ISPF Support for the QUEUE Command\nThis is an update to the JES2 2.2.0 level of QUEUE to provide\nrudimentary ISPF support.  The result is not very elegant but the mods\nto QUEUE are small so that the code can be reworked easily for new\nversions of QUEUE.  Details are in member $$ISPF.  The QUEUE command\nitself is not contained here, just the modules which have\nchanges for ISPF support.\n:h3.TSO/E RACF Conversion Aid\nThis program can be used, when converting TSO logon information from\nSYS1.UADS to RACF, to migrate the first TSO command to be issued from\nSYS1.UADS to RACF (which is not done by the RACONVRT command).\n\nInput is a flat file of 172 byte SYS1.UADS records.  You should\nconcatenate all SYS1.UADS members to provide this input.\n\nWhen the program finds a TSO command to be issued, it updates the\nappropriate field in the RACF data base, so that this command will not\nbe lost across the conversion from SYS1.UADS to RACF.\n\nWe used this program at the PUT 8801 level, with TSO/E 4.0 and RACF\n1.8.\n:h3.TSO Logon Update Dialog\nThis is an ISPF dialog to facilitate the updating of certain TSO logon\ninformation fields.  Some of these fields can be updated from the\nTSO/E fullscreen logon panel, but many of our TSO users never see this\npanel, as we have a windowing package which automatically supplies\ntheir password.  Also, it's more convenient to change these fields\nwhen you think of it, rather than having to wait until your next\nLOGON.\n\nInformation which may be updated in this dialog is:\n:ul.\n:li.Name\n:li.Station (first four bytes of installation data)\n:li.Account\n:li.Logon procedure\n:li.Initial command\n:eul.\nAll of the above are the standard RACF data base fields TSO/E uses\nafter the conversion from SYS1.UADS to RACF.  (Each shop will of course\nhave its own uses for installation data.)\n\nFields which require RACF authorization to use specific values will be\nchecked and error messages issued if the user is not authorized.  For\nexample, if you try to change to an invalid account code (i.e., an\naccount code not defined to RACF) you will get an error message.\n\nYou will not be able to use this code as written as it has some local\ndependencies (most of which are in the text of the ISPF messages).\nThere shouldn't be TOO much to change though.\n\nMember VLOGONP should be renamed VLOGON when stored in your panel\nlibrary.  This panel references a tutorial panel, VLOGONT, which is\nnot supplied.\n\nSince this dialog uses RACF internal macros, it must be authorized.\nSince ISPF services cannot be invoked from an authorized program, you\nmust use something (e.g., an authorization SVC) to flip the\nauthorization bit on and off.  This code uses SVC 255.  You will have\nto change this to use your authorization mechanism.\n:h2.Limitations\nThe following are known limitations and possible problems with these\nmods:\n:ul.\n:li.The broadcast message dialog invokes a program, A75905, to to put\nthe value from the programmer's name field of the current TSO session in\nthe variable XNAME, and eventually into the broadcast message itself.  I\ndid not include the code for this program.  You may have your own way of\ndoing this or you could just display a panel to prompt for name.\n:li.CDF uses SVC 255 (not included) to flip authorization on and off.\nYou will probably have to change the code to use your authorization SVC\n(see below).\n:li.The IND$FILE CLIST, which is invoked by the PC File transfer dialog,\nis taken from IBM-supplied GDDM CLIST ADMUPCFT.  I have never actually\ntried to use this to send and receive graphics data.  If I recall\ncorrectly, we were at one time just invoking the IND$FILE command\ndirectly (in the command table) instead of via a CLIST.  This should\nstill work if you don't have (or care about) GDDM, although the messages\nI added to ADMUPCFT will of course not show up.\n:li.The tutorial panels for the three edit macros are designed to be\ndisplayed from EDIT tutorial panels.  If you have your own panel listing\nyour edit macros, you can add references to these there.\n:li.The SPELL edit macro requires that IBM's Document Compsition\nFacility (SCRIPT) be installed on your system.\n:li.The LOGOFF dialog has a glitch in that after the user has been in\ncertain programs (e.g., CDF), the TSOEXEC command (issued by the VLOGOFF\nCLIST) gets a return code of 20 and fails.  Reissueing the commond works\nOK but there doesn't seem to be any way to get rid of the nasty message\nthe first command generates.\n:eul.\n:h2.Installation Instructions\nSteps to install these mods:\n:ol.\n:li.Copy the following members to your ISPF panel dataset:\n #ELIST\n #INFO\n #SPELL\n CDFDATAB\n CDFHELP\n COPYSCT1\n COPYSCT2\n COPYSC01\n QUEUEM2\n QUEUEM3\n QUEUEM4\n QUEUEM5\n TECMODS\n TVENQ1\n TVENQ11\n TVENQ12\n TVENQ2\n VBROAD0\n VBROAD1\n VBROAD2\n VCMDEDIT\n VENQ1\n VENQ2\n VEXIT\n VLOGO\n VLOGONP (rename -> VLOGON)\n VPC\n VPCT000\n VPCT001\n VPCT002\n VPCT003\n VPCT010\n VPCT011\n VPCT012\n VPCT013\n VPCT014\n VPCT015\n VPCT016\n VPCT017\n VPCT018\n:li.Copy the following members to your ISPF CLIST dataset:\n COPYSCRN\n ELIST\n INFO\n SPELL\n VBROAD\n VBROADE\n VBROADI\n VCMDEDIC\n VEXITC\n VLOGOC\n VPCC\n VPCTRAN\n:li.Copy the following member to your ISPF message dataset:\n TECZ00\n:li.Edit member VISPFG2 to reflect the name of your GDDMSAM library,\nGDDM load library, and ISPF load module library.  Then submit the member\nto compile and link edit program VISPFG2.\n:li.Add a selection for the TEC mods panel to one of your selection\npanels:\n\n    nn,'PANEL(TECMODS)'\n\nwhere \"nn\" is the selection number for the TEC mods.  I included the\nTEC mods panel as an example of how to invoke four of the mods.  You\nwould probably want to just put selections on one of you own panels to\nselect which ever mods (if any) you want to use.\n:li.Assemble VUTL16 and link edit (with ISPLINK) into a TSO STEPLIB or\nLNKLST library.\n:li.Change the authorization mechanism in CDF.  Currently, it uses an\nSVC (255) to become temporarily authorized in order to do cross memory\nmoves of console information.  (ISPF will not permit AC=1 modules to\ninvoke ISPF services.)  If you have this SVC and it is invoked as in\nCDF then you are OK.  Otherwise, you will have to change the code to\nuse your authorization SVC (at source statements 355, 429, 521, and\n530).\n\nAssemble CDF and link edit (with ISPLINK) into a TSO STEPLIB or LNKLST\nlibrary.\n:li.Change panel CDFHELP to conform to you console configuration.  If\nyou have more than one MVS system, you might want to change panel\nCDFDATAB to invoke a different tutorial panel depending on which system\nyou're running on.\n:li.Make the following entries in your command table:\n.fo off\n  .... IND$FILE  0  SELECT CMD(%VPCTRAN &ZPARM)\n  .... EXIT      0  SELECT CMD(%VEXITC &ZPARM) MODE(FSCR)\n  .... LOGO      0  SELECT CMD(%VLOGOC &ZPARM) NEWAPPL(ISR)\n  .... LOGOFF    0  SELECT CMD(%VEXITC LOGOFF &ZPARM) MODE(FSCR)\n  .... LOGON     0  SELECT CMD(%VEXITC LOGON NEWID(&ZPARM)) MODE(FSCR)\n  .... PC        0  SELECT CMD(%VPCC) NEWAPPL(ISR)\n.fo\nYou could use option 2 from the TEC mods panel to do this.\n:li.Invoke CLIST VBROADI to create and initialize the ISPF table dataset\nused by the broadcast dataset update dialog.  This CLIST creates a PDS\nMVS.BRODCAST; if you change the name here you need to change the name in\nCLIST VBROAD also.\n:li.Use the documentation in member $$ISPF as a guide for installing\nISPF support in QUEUE.\n:li.Edit member RACFTSO5 and submit to copy TSO initial command from\nSYS1.UADS to RACF.  This job should be run after the RACONVRT command.\n:li.Edit and submit member VLOGON to install the TSO logon update\ndialog.  Modify an ISPF selection panel to invoke program VLOGON. E.g.,:\n:xmp. 11,'PGM(VLOGON)':exmp.  We modified panel ISPOPTA.\n:eol.\n:h2.Contents of each member of this dataset:\n Member   Contents\n ------   --------\n $$ISPF   Documentation for ISPF support for the QUEUE\n          command\n $$SCRIPT SCRIPT source for this document\n $DOC     Short description of mods\n $INSTALL Installation instructions (this document)\n $LEVEL   Modifications and source system level\n #COPYSCR Tutorial panel for COPYSCRN edit macro\n #ELIST   Tutorial panel for ELIST edit macro\n #INFO    Tutorial panel for INFO edit macro\n #SPELL   Tutorial panel for SPELL edit macro\n CDF      Source for MVS console dialog (assembler)\n CDFDATAB Panel used by MVS console dialog\n CDFHELP  Tutorial Panel for MVS console dialog\n COPYSCRN Edit macro for screen copy\n COPYSCT1 Tutorial Panel for screen copy edit macro\n COPYSCT2 Tutorial Panel for screen copy edit macro\n COPYSC01 Panel for screen copy edit macro\n DISPLAY  Source code for QUEUE command module\n          DISPLAY modified for ISPF\n ELIST    Edit macro for listing data\n INFO     Edit macro for displaying dataset information\n INIT     Source code for QUEUE command module\n          INIT modified for ISPF\n QCOMMON  Source code for QUEUE command module\n          QCOMMON modified for ISPF\n QUECMDS  ISPF command table for running QUEUE\n QUEPROF  ISPF application profile for running QUEUE\n QUEUE    Source code for QUEUE command module\n          QUEUE modified for ISPF\n RACFTSO5 Jobstream (JCL + source) to migrate\n          \"first TSO command\" from\n          UADS to RACF after running RACONVRT\n REPOS    Source code for QUEUE command module\n          REPOS modified for ISPF\n SPELL    Edit macro to check spelling\n TECMODS  Panel used to invoke some of the mods.\n TECZ00   Messages used by several dialogs\n TVENQ1   Tutorial Panel for GRS/ENQ dialog\n TVENQ11  Tutorial Panel for GRS/ENQ dialog\n TVENQ12  Tutorial Panel for GRS/ENQ dialog\n TVENQ2   Tutorial Panel for GRS/ENQ dialog\n VBROAD   CLIST used by broadcast message dialog\n VBROADE  ISPF edit macro used by broadcast message dialog\n VBROADI  CLIST used to initialize broadcast message dialog\n VBROAD0  Panel used by broadcast message dialog\n VBROAD1  Panel used by broadcast message dialog\n VBROAD2  Panel used by broadcast message dialog\n VCMDEDIC CLIST used by command table edit dialog\n VCMDEDIT Panel used by command table edit dialog\n VENQ1    Panel used by GRS/ENQ dialog\n VENQ2    Panel used by GRS/ENQ dialog\n VEXIT    Panel used with fast exit/logoff/logon dialog\n VEXITC   CLIST used with fast exit/logoff/logon dialog\n VISPFG2  Source + JCL for logo program (PL/I)\n VLOGO    Panel used with logo program\n VLOGOC   CLIST used with logo program\n VLOGON   RACF update dialog source (BAL)\n VLOGONP  Panel used by RACF update dialog\n VPC      Panel used by PC file transfer dialog\n VPCC     CLIST used by PC file transfer dialog\n VPCTRAN  CLIST used by PC file transfer dialog\n VPCT000  Tutorial Panel for PC file transfer dialog\n VPCT001  Tutorial Panel for PC file transfer dialog\n VPCT002  Tutorial Panel for PC file transfer dialog\n VPCT003  Tutorial Panel for PC file transfer dialog\n VPCT010  Tutorial Panel for PC file transfer dialog\n VPCT011  Tutorial Panel for PC file transfer dialog\n VPCT012  Tutorial Panel for PC file transfer dialog\n VPCT013  Tutorial Panel for PC file transfer dialog\n VPCT014  Tutorial Panel for PC file transfer dialog\n VPCT015  Tutorial Panel for PC file transfer dialog\n VPCT016  Tutorial Panel for PC file transfer dialog\n VPCT017  Tutorial Panel for PC file transfer dialog\n VPCT018  Tutorial Panel for PC file transfer dialog\n VUTL16   Source for GRS/ENQ dialog (assembler)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CHANGE": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE103"}, "text": "Changes to these mods:\n\n11/27/1989\n\n  1. Added missing edit macro VBROADE.\n\n  2. Added CLIST VBROADI which can be used to initialize the ISPF\n     table used by the broadcast dataset dialog.\n\n  3. Added mods to QUEUE command for ISPF support.  There are several\n     version of QUEUE ISPF support on the CBT tape now, but I don't\n     know what they look like as I only have the fiche.  This mod is\n     quite small and easily (I hope) reworked; included are modified\n     QUEUE source modules (DISPLAY, INIT, QCOMMON, QUEUE, REPOS), ISPF\n     panels, etc.\n\n  4. Added a program which may be used to copy each user's initial TSO\n     command from SYS1.UADS to RACF.  This is useful after running the\n     RACONVRT command which copies most everything else.\n\n  5. Added an ISPF dialog which will update TSO logon information in\n     RACF.  These are fields which can be changed from the TSO/E logon\n     panel, but many of our users never see the TSO/E panel because\n     of a logon script.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$INSTALL": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02P\\x02P\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 592, "newlines": 592, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$LEVEL": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$NOTE": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x02\\x0f\\x00\\x98\\x02\\x0f\\x19\\x15\\x00\\x10\\x00\\x16\\x00\\x00\\xc2\\xc8\\xd6\\xd9\\xe3\\xd6\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-01-20T00:00:00", "modifydate": "1998-01-20T19:15:00", "lines": 16, "newlines": 22, "modlines": 0, "user": "BHORTON"}, "text": "Note:  01/20/98\n\nMost of the stuff on File 103 has not changed.  A couple of things\nhave changed a little to work with newer versions of OS/390: CDF and\nVUTL16 (GRS display).  Both could use some major overhauls but I\nhave not done that; just made them work from release to release.\n\n\nBill Horton\nEastman Chemical Company\nBuilding 284\nKingsport, Tennessee 37662\nPhone (423) 229-3388  Fax (423) 229-3254\nInternet: bhorton@eastman.com  IBMMAIL: USECHV58 (OV/VM), USECHU6L\n(TSO/MVS)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COPYSCR": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -----------------  EDIT - 'COPYSCRN' MACRO  ----------------T TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n+\n IBM's%PC 3270+and%3290+have the capability to copy data from one screen to\n another.  The%COPYSCRN+macro provides a way to receive screen copy data into\n ISPF EDIT.\n\n Press the%ENTER+key to enter the tutorial for COPYSCRN.\n)PROC\n &ZUP = #EMCH\n &ZCONT = COPYSCT1\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ELIST": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "FILE103"}, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  ELIST  /-/ Tutorial\n%OPTION  ===>_ZCMD                                                             +\n\n+The%ELIST+macro can be used to list the data currently being edited, including\n changes which have been made but not saved.  Syntax is:\n\n%  ELIST attributes+\n\n where%attributes+specifies how the data should be listed.   Any attribute which\n may be specified on the TSO ALLOCATE command may be used, including:\n\n   CHARS(char set)                         FLASH(flash)\n   COPIES(copies)                          FORMS(form code)\n   DEST(destination)                       WRITER(external writer name)\n\n Examples:\n\n   o List on VPS printer \"SYSDEV\":         ELIST DEST(SYSDEV)\n   o Send to CMS virtual reader:           ELIST DEST(ECDVM1.userid)\n   o List on RMT1 at TEX:                  ELIST DEST(TX59.RMT1)\n   o List using GE12 char set:             ELIST CHARS(GE12)\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#INFO": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -------------------- EDIT - 'INFO' MACRO -------------------T TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n\n+The%INFO+macro is used to display information about the dataset currently being\n edited.  The infomation will be displayed as%NOTE+and%MSG+lines, which can then\n be processed by EDIT line commands, or deleted using the%RESET+command.  In any\n event the NOTE and MSG lines will not be saved with the data.\n\n Information displayed by the INFO command:\n\n  %o+Dataset name\n  %o+Allocation information\n  %o+Dataset attributes\n  %o+Space statistics\n  %o+Date flags\n  %o+PDS Directory information (if available)\n  %o+ISPF statistics (if available)\n)PROC\n &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SPELL": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE103"}, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(\\\\)\n%Tutorial \\-\\  SPELL  \\-\\ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -------------------------------\n                      |     Edit Macro  \"SPELL\"     |\n                      -------------------------------\n+\n    This Edit Macro invokes SCRIPT/VS with the SPELLCHK option to identify\n    misspelled words in the current data being edited.  Each line\n    containing a misspelled word will have an error message, which lists\n    the misspelled word(s), inserted after the line.  Entering the RESET\n    command will delete all lines inserted by the SPELL macro.\n\n\n%SYNTAX:+   SPELL\n+\n+           There are no other operands for this command.\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDF": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x02\\x0f\\x00\\x98\\x02\\x0f\\x126\\x03K\\x03K\\x00\\x00\\xc2\\xc8\\xd6\\xd9\\xe3\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-20T00:00:00", "modifydate": "1998-01-20T12:36:00", "lines": 843, "newlines": 843, "modlines": 0, "user": "BHORTON"}, "text": "//*-----------------------------------------------------------------***\n//*                                                                 ***\n//* LIBRARY: MVS.SYSPROG.CNTL                                       ***\n//* MEMBER:  CDF                                                    ***\n//*                                                                 ***\n//* PURPOSE:                                                        ***\n//* ASSEMBLE AND LINK THE TEC \"CDF\" COMMAND AS \"CDFT\".              ***\n//*                                                                 ***\n//* STRINGS TO BE CHANGED BEFORE SUBMISSION ARE:                    ***\n//*                                                                 ***\n//* USERID   <=== YOUR USER ID                                      ***\n//* PNAME    <=== YOUR NAME                                         ***\n//*                                                                 ***\n//*-----------------------------------------------------------------***\n//        EXEC ASMACL,PARM.ASM='TERM,XREF(LONG)'\n//SYSIN    DD  *\n         TITLE 'CONSOLE DISPLAY FACILITY (CDF)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 CONSOLE DISPLAY FACILITY (CDF)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY MVS CONSOLE ACTIVITY AND PROCESS MVS              *\n*           AND JES COMMANDS.                                         *\n*                                                                     *\n*                                                                     *\n* FUNCTION: CDF IS DESIGNED TO OPERATE UNDER ISPF USING DISPLAY       *\n*           MANAGEMENT SERVICES. IT PROVIDES A CONSOLE DISPLAY        *\n*           SIMILAR TO JESOPER, DIDOCS,ETC.,        BUT SINCE IT      *\n*           RUNS UNDER ISPF, IT CAN BE INVOKED WITH SPLIT-SCREEN.     *\n*                                                                     *\n*           CDF LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   9/21/83  REVISED SCREEN DISPLAY TO PUT REQUESTS FOR REPLY, MOUNTS,*\n*    BCOOK   AND INTERVENTION REQUIRED AT TOP OF DISPLAY.             *\n*                                                                     *\n*   9/28/83  HIGHLIGHT MESSAGES WHERE APPROPRIATE.                    *\n*    BCOOK                                                            *\n*                                                                     *\n*  08/22/85  REVISED TO ALLOW EXTENDED DATA STREAM CONSOLES TO BE     *\n*            DISPLAYED, AND TO ALLOW CONSOLE-TO-BE-DISPLAYED TO BE    *\n*            SPECIFIED BY ENTERING C=NN (CONSOLE ID) OR U=AAA         *\n*            (CONSOLE UCB ADDRESS).  ALSO REMOVED MUCH OF THE CODE    *\n*            STILL REMAINING FROM \"SPY\".  W. R. HORTON.               *\n*                                                                     *\n*  04/04/88  REVISED TO REFLECT THE FACT THAT THE DCM HAS BEEN MOVED  *\n*            TO THE CONSOLE ADDRESS SPACE WITH MVS 2.2.0.             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\nCDF      CSECT\n         USING *,13,12,11,10\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n         LR    R10,R11        SET\n         A     R10,L4096          BASE 4\n*                                                                   TEC\n* DETERMINE AUTHORIZATION OF CALLER.  CALLER MUST HAVE 'OPERATOR'   TEC\n* AUTHORITY TO USE THIS DIALOG.  IF CALLER HAS 'ACCOUNT' AUTHORITY, TEC\n* HE CAN ISSUE ANY COMMANDS, OTHERWISE, HE CAN ONLY LOOK AT THE     TEC\n* CONSOLE CONTENTS.                                                 TEC\n*                                                                   TEC\n         L     R2,16          LOAD CVT ADDRESS.                     TEC\n         USING CVT,R2         CVT ADDRESSIBILITY.                   TEC\n         L     R3,CVTSMCA     POINT TO SMCA.\n         USING SMCABASE,R3    SMCA ADDRESSABILITY.\n         MVC   SYSID,SMCASID  GET SMF SYSTEM ID.\n         DROP  R3\n         L     R2,CVTTCBP     LOAD POINTER TO TCB.                  TEC\n         L     R2,0(R2)       LOAD CURRENT TCB ADDRESS.             TEC\n         USING TCB,R2         TCB ADDRESSIBILITY.                   TEC\n         L     R2,TCBJSCB     LOAD JSCB ADDRESS.                    TEC\n         USING IEZJSCB,R2     JSCB ADDRESSIBILITY.                  TEC\n         L     R2,JSCBPSCB    LOAD PSCB ADDRESS.                    TEC\n         USING PSCB,R2        PSCB ADDRESSIBILITY.                  TEC\n         TM    PSCBATR1,PSCBCTRL 'OPERATOR' AUTHORITY?              TEC\n         BNZ   TESTACCT       YES, CONTINUE.                        TEC\n         L     R15,ISPLINK    LOAD ADDRESS OF ISPF SERVICE ROUTINE. TEC\n         CALL  (15),(SETMSG,CDF000),VL,MF=(E,ISPARMS)               TEC\n         B     SHOWRTRN       GO HOME.                              TEC\nACCOUNT  DS    C'N'                                                 TEC\nTESTACCT TM    PSCBATR1,PSCBACCT 'ACCOUNT' AUTHORITY?               TEC\n         BZ    SHOWINIT       NO, CONTINUE.                         TEC\n         MVI   ACCOUNT,C'Y'   YES, INDICATE 'ACCOUNT' AUTHORITY.    TEC\n         DROP  R2             FINISHED WITH THIS REGISTER.          TEC\n*---------------------------------------------------------------------*\n*                                                                     *\n*                       PROGRAM INITIALIZATION                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nSHOWINIT DS    0H\n         L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R5,CVTASVT         POINT TO ADDRESS SPACE VECTOR TABLE.\n         USING ASVT,R5            ASVT ADDRESSIBILITY.\n         L     R4,ASVTMAXU        LOAD MAX. NUMBER OF ADDRESS SPACES.\n         LA    R2,0               CURRENT ADDRESS SPACE.\n         LA    R5,ASVTFRST        POINT TO FIRST ASCB POINTER.\nASCBLOOP L     R8,0(R5)           POINT TO ASCB.\n         LTR   R8,R8              GOOD ASCB ADDRESS?\n         BZ    NOTHERE            NO, CAINT BE THIS ONE.\n         USING ASCB,R8\n         CLC   ASCBJBNS,=C'    '  BLANKS?\n         BE    NOTHERE            YES, BAD ADDRESS.\n         L     R9,ASCBJBNS        POINT TO JOBNAME FIELD.\n         LTR   R9,R9              ZERO?\n         BZ    NOTHERE            YES, CAINT BE THIS ONE.\n         CLC   0(8,R9),=C'CONSOLE ' IS THIS THE CONSOLE ADDRESS SPACE?\n         BE    FOUNDC             YES, EXIT FROM LOOP.\nNOTHERE  LA    R2,1(R2)           BUMP ASID.\n         LA    R5,4(R5)           POINT TO NEXT ASCB POINTER.\n         S     R4,=F'1'           HAVE WE LOOKED AT ALL ADDRESS SPACES?\n         BP    ASCBLOOP           NO, LOOP.\n         L     R15,ISPLINK    LOAD ADDRESS OF ISPF SERVICE ROUTINE. TEC\n         CALL  (15),(SETMSG,CDF002),VL,MF=(E,ISPARMS)               TEC\n         B     SHOWRTRN       GO HOME.                              TEC\nFOUNDC   ST    R2,CONSASID        SAVE ASID OF CONSOLE ADDRESS SPACE.\n         DROP  R4,R5,R8\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VCOPY,ZUSER,U8,USERID,SPFMOVE),                        X\n               VL,MF=(E,ISPARMS)\n*\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\nSHOWAGIN DS    0H\n         BAL   R7,SHOWCONS    DISPLAY THE CONSOLE\n*\nSHOWDONE DS    0H\n         CLI   ATABFL,C'0'        NO ACTIVE TABLE\n         BE    SHOWRTRN\n*                                  DELETE THE TABLE VARIABLES\n         PRINT NOGEN\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,JCMD),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,CONLINEP),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@UCB),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@CONID),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@SYSID),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,CDFTABLE),VL,MF=(E,ISPARMS)\n         PRINT GEN\n*\nSHOWRTRN DS    0H\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n*\nL4096    DC    F'4096'\n*\n         TITLE 'CDF   START OF SHOW CONSOLE LOOP'\nSHOWCONS DS    0H\n         ST    R7,CDF7HOLD SAVE THE RETURN ADDRESS\n*\n         CLI   ATABFL,C'0'        DO I HAVE AN ACTIVE TABLE?\n         BE    ANOTAB             NOPE\n*\n         PRINT NOGEN\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,JCMD),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,CONLINEP),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@UCB),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@CONID),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,@SYSID),VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,CDFTABLE),VL,MF=(E,ISPARMS)\n         PRINT GEN\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n         TITLE 'CDF   DEFINE THE CONSOLE TABLE  '\nANOTAB   DS    0H\n         PRINT NOGEN\n         L     R15,ISPLINK\n         CALL  (15),(VDEFINE,CONLINEP,TABAREA,CHAR,L79),               X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDEFINE,JCMD,CMDLINE,CHAR,L42),                   X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDEFINE,@UCB,UNIT,CHAR,L3),                       X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDEFINE,@CONID,CONNUM,CHAR,L2),                   X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(VDEFINE,@SYSID,SYSID,CHAR,L4),                    X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(TBCREATE,CDFTABLE,NULLENT,DANAMLST,NOWRITE),      X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),(TBVCLEAR,CDFTABLE),VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n*\n         TITLE 'CDF   BUILD UCM TABLE           '\nTAB1LOOP DS    0H\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n*---------------------------------------------------------------------*\nBLDUCMS  L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4\n         USING UCM,R4\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n         DROP  R4\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE FIRST CONSOLE AS THE DEFAULT CONSOLE.   *\n*---------------------------------------------------------------------*\nSETCONS  LA    R4,1               SET DEFAULT TO FIRST CONSOLE     JL1\nCONSSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE GMM\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?              GMM\n         BNH   CONSCONT           NO, CONTINUE.\nCONSRST  CLI   WCONID,C' '        WERE WE\n         BNE   DOFIRST            LOOKING FOR\n         CLI   WUCB,C' '          A PARTICULAR\n         BNE   DOFIRST            CONSOLE ?\n         L     R15,ISPLINK    LOAD ADDRESS OF ISPF SERVICE ROUTINE. TEC\n         CALL  (15),(SETMSG,CDF003),VL,MF=(E,ISPARMS)               TEC\n         B     SHOWDONE       GO HOME.                              TEC\nDOFIRST  MVC   WUCB,BLANKS        COULDN'T FIND REQUESTED CONSOLE.\n         MVC   WCONID,BLANKS      LOOK FOR FIRST CONSOLE.\n         L     R15,ISPLINK    LOAD ADDRESS OF ISPF SERVICE ROUTINE. TEC\n         CALL  (15),(SETMSG,CDF004),VL,MF=(E,ISPARMS)               TEC\n         B     SETCONS\nCONSCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX  GMM\n         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT  GMM\n         L     R5,0(0,R5)         SET POINTER TO UCM               GMM\n         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM         GMM\n         SR    R3,R3              ZERO REGISTER 3.\n         IC    R3,UCMID           LOAD THE CONSOLE NUMBER\n         CVD   R3,WORK            CONVERT TO DECIMAL IN WORK\n         MVC   SCRATCH(4),PATTERN MOVE IN EDIT PATTERN\n         ED    SCRATCH(4),WORK+6  EDIT IN CONSOLE NUMBER\n         MVC   CONNUM(2),SCRATCH+2 MOVE CONSOLE NUMBER INTO PLACE\n         L     R3,UCMUCB          POINT TO UCB.\n         MVC   UNIT(3),13(R3)     GET UCB 'EBCDIC'.\n         CLC   WUCB,BLANKS        ARE WE LOOKING FOR A UCB ADDRESS ?\n         BE    TRYCONID           NO, CONTINUE.\n         CLC   WUCB,UNIT          IS THIS IT ?\n         BNE   NOTYET             NO, NOT YET.\n         B     CONSFND            FOUND IT.\nTRYCONID CLC   WCONID,BLANKS      ARE WE LOOKING FOR A CONSOLE ID?\n         BE    TRYCONS            NO, CONTINE.\n         CLC   WCONID,CONNUM      IS THIS IT ?\n         BNE   NOTYET             NO, NOT YET.\nTRYCONS  TM    UCMDISP1,UCMDISPC+UCMDISPE GOOD CONSOLE?\n         BNO   NOTYET             NO, KEEP LOOKING.\n*        TM    UCMATR,UCMUF       ACTIVE CONSOLE?\n         TM    UCMDIDCS,UCMAHERE  ACTIVE CONSOLE ON THIS SYSTEM?\n         BNZ   CONSFND            YES, FOUND A GOOD CONSOLE.\nNOTYET   SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE GMM\n         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE      GMM\n         B     CONSSCAN           CONTINUE CONSOLE SCAN LOOP.\nWUCB     DC    C'   '             THE PARTICULAR UCB ADDRESS WE WANT.\nWCONID   DC    C'  '              THE PARTICULAR CONS. NUMBER WE WANT.\nCONSFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE GMM\n         ST    R4,OLDCONS         SET VALID OLD CONSOLE NUMBER     GMM\n         ST    R4,CONSOLE         SET VALID CONSOLE NUMBER.\n         MVC   XUCMID,UCMID       COPY CONSOLE ID.                  TEC\n*\n* CHECK FOR 'EXTENDED DATA STREAM' DEVICES.\n*\n         CLI   UCMEDEVX,UCM3792B\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM3793B\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM2732E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM3180E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM3160E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM4380E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM6280E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM6260E\n         BE    EXTDS\n         CLI   UCMEDEVX,UCM5006E\n         BE    EXTDS\n         MVC   MULT,=F'84'        AMOUNT TO SKIP WHEN LOOKING AT       X\n                                  BUFFERS OF NON-EXTENDED DEVICES.\n         B     NEXTPAGE\nEXTDS    MVC   MULT,=F'90'        AMOUNT TO SKIP WHEN LOOKING AT       X\n                                  BUFFERS OF EXTENDED DEVICES.\n         DROP  R5                 DONT NEED UCM ADDRESSABILITY NOW GMM\n         TITLE 'CDF   PICK A CONSOLE            '\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            TOP OF LOOP                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nNEXTPAGE DS    0H\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         ICM   R4,15,CONSOLE      R4 = CONSOLE TO BE DISPLAYED\n         BZ    WRTERR4            WE HAVE NO CONSOLE ZERO.\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   GETUCM             NO, CONTINUE\nRESETCN  L     R4,OLDCONS         RESET TO OLD CONSOLE\n         ST    R4,CONSOLE         AND SAVE IT\nGETUCM   SLL   R4,2               MULTIPLY BY 4\n         LA    R5,0(R5,R4)        R5 = ADDR OF ADDR OF UCM\n         L     R5,0(0,R5)         R5 = ADDR OF UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = ADDR OF RDCM\n         USING IEERDCM,R6                                          GMM\n         LTR   R6,R6              IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS           YES\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\nWRTERR4  DS    0H\n         B     RESETCN            RESET THE CONSOLE NUMBER\n         SPACE\n         TITLE 'CDF   CROSS MEMORY SERVICES     '\nGRAPHICS EQU   *\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 FILLIN TRAILER AT BOTTOM OF SCREEN                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LA    R15,3                   REQUEST AUTHORIZATION ON.    TEC\n         LA    R1,=C'AUTH'                                          TEC\n         SVC   255                     USE MILLER BREWING SVC.      TEC\n         LTR   R15,R15                 DID WE MAKE IT?              TEC\n         BNZ   DUNWITIT                NO, VAMOOSE.                 TEC\n         MODESET MODE=SUP,KEY=ZERO                                  TEC\n*\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n         AXRES AXLIST=AXLIST           RESERVE AN AX               JPB\n         SPACE 2\n         L     R1,CONSASID             'CONSOLE' ASID.             WRH\n         AXEXT ASID=(1)                EXTRACT AX OF 'CONSOLE'IN R0JPB\n         SPACE 2\n         AXSET AX=(0)                  SET OUT AX TO THAT OF CONSOLEPB\n         SPACE 2\n         L     R1,CONSASID             'CONSOLE' ASID.             WRH\n         SSAR  R1                      SET 'CONSOLE' AS SECONDARY  JPB\n         SPACE 2\n         PRINT ON,GEN\n*\n*                                      PICK UP LAST LINE\n*\n         SLR   R0,R0                   SECONDARY KEY\n*\n*                                      PICK UP START ADDRESS\n*\n         L     R1,CONSASID\n         SSAR  R1\n         LA    R1,4               LENGTH OF FIELD.\n         LA    R5,@TDCM           TARGET OF MOVE.\n         LA    R8,DCMADTRN        SOURCE OF MOVE.\n         SR    R0,R0              KEY 0.\n         MVCP  0(R1,R5),0(R8),R0  GET ADDRESS OF CONTROL BLOCK.\n         L     R7,@TDCM           GET ADDRESS OF TDCM\n         USING STRTDCM,7\n         LA    R1,2               LENGTH OF FIELD.\n         LA    R5,CLINES          TARGET OF MOVE.\n         LA    R8,DCMMSGAL        SOURCE OF MOVE.\n         MVCP  0(R1,R5),0(R8),R0  GET NUMBER OF LINES IN BUFFER.\n         LA    R1,4               SET TRUE LENGTH                  JPB\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADRJPB\n*\n*                                      SET UP FOR XMEM MOVE LOOP\n*\n         L     R8,SIBPTR          R8 = ADDR OF SCREEN IMAGE\n         LA    R4,BUF             R4 = ADDR OF OUTPUT BUFFER\n         L     R5,MULT            GET LINE LENGTH.\n         MH    R5,CLINES          MULTIPLY BY NUMBER OF LINES.\nMOVEBUFF DS    0H\n         SH    R8,=H'6'\n         SLR   R0,R0              RESET THE KEY\n*\nMVCPLOOP DS    0H\n         MVCP  0(R5,R4),0(R8),R0  LOOP THRU THE CONSOLE BUFFER\n*\n         BZ    RESETSAR\n         AL    R8,=F'256'         MAX LEN ALLOWED\n         AL    R4,=F'256'         MAX LEN ALLOWED\n         SL    R5,=F'256'         MAX LEN ALLOWED\n         B     MVCPLOOP\n@TDCM    DS    F\n*\nRESETSAR DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IN ORDER TO ISSUE SVCS THE PRIMARY AND                       *\n*        SECONDARY ADDRSPC MUST BE THE SAME                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n         MODESET MODE=PROB,KEY=NZERO\n         LA    R15,4                   REQUEST AUTHORIZATION OFF    TEC\n         SVC   255                     SET AUTHORIZATION OFF        TEC\n*\n         DROP  R5,R6,R7                                            GMM\n*\nGOTITALL DS    0H\n         LA    R1,1                    SPF LINE OVERHEAD\n         ST    R1,OUTLINES             INITIALIZE IT\n*\n         B     SCANEM    GO SCAN THE SCREEN FOR REPLIES AND MOUNTS\n*\n         TITLE 'CDF   SCAN FOR REPLIES AND MOUNTS'\nSCANEM   DS    0H\n*\n         LA    R3,BUF             SET POINTER TO FIRST LINE\n         LH    R9,CLINES          LOAD NUMBER OF LINES IN BUFFER.\n*\nSCNEXT   DS    0H\n         CLC   8(70,R3),BLANKS    BLANK LINE ?\n         BE    SKIPIT             YES, DON'T PUT IN TABLE.\n         MVI   TABAREA,X'00'    PREVENT ISPF DROPPING LEADING BLANKS\n         MVC   TABAREA+1(76),8(R3)  MOVE IT TO SPF AREA\n         BAL   R7,OUTMSG        ADD THE ENTRY TO THE TABLE\nSKIPIT   A     R3,MULT            POINT TO NEXT LINE\n         BCT   R9,SCNEXT          LOOP.\n         TITLE 'CDF  DISPLAY SPF TABLE          '\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\nSHOWSCRN DS    0H\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBTOP,                                                 X\n               CDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBDISPL,                                               X\n               CDFTABLE,                                               X\n               CDFDATAB),                                              X\n               VL,MF=(E,ISPARMS)\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\n         C     R15,F8         END KEY\n         BE    DUNWITIT       YUP\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BNE   DUNWITIT       NOPE\nGOTSTUFF DS    0H\n         CLI   CMDLINE,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWAGIN       THEN A COMMAND WAS NOT ENTERED\n*\n         CLC   CMDLINE(3),=C'REP'      IS IT REPEAT,\n         BE    SHOWAGIN                  THEN GO REPEAT IT\n*\n         CLC   CMDLINE(3),=C'RPT'      IS IT REPEAT,\n         BE    SHOWAGIN                  THEN GO REPEAT IT\n*\n         CLC   CMDLINE(2),=C'U='       NEW UCB SPECIFIED ?\n         BNE   TRYCEQ                  NO, CONTINUE.\n         MVC   WUCB,CMDLINE+2          YES, GET IT.\n         MVC   WCONID,BLANKS           BLANK OUT DESIRED CONSOLE ID.\n         B     SHOWAGIN\nTRYCEQ   CLC   CMDLINE(2),=C'C='       NEW CONSOLE ID SPECIFIED ?\n         BNE   CMDAUTH                 NO, CONTINUE.\n         MVC   WUCB,BLANKS\n         MVC   WCONID,CMDLINE+2\n         B     SHOWAGIN\n*\nCMDAUTH  CLI   ACCOUNT,C'Y'   DOES USER HAVE 'ACCOUNT' AUTHORITY?   TEC\n         BE    GOTCMD\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (SETMSG,                                                X\n               CDF001),                                                X\n               VL,MF=(E,ISPARMS)\n*\n         B     SHOWAGIN\n*\nDUNWITIT DS    0H\n         L     R7,CDF7HOLD     RESTORE  RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n*\nGOTCMD   DS    0H\n         LA    R15,3                   REQUEST AUTHORIZATION ON.    TEC\n         LA    R1,=C'AUTH'                                          TEC\n         SVC   255                     USE MILLER BREWING SVC.      TEC\n         MODESET MODE=SUP,KEY=ZERO                                  TEC\n         LA    R0,0             ZERO REGISTER 0.                    TEC\n         IC    R0,XUCMID        BLAME THIS ON THE CURRENT CONSOLE.  TEC\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   34                      ISSUE COMMAND VIA SVC 34\n         MODESET MODE=PROB,KEY=NZERO                                TEC\n         LA    R15,4                   REQUEST AUTHORIZATION OFF.   TEC\n         SVC   255                     USE MILLER BREWING SVC.      TEC\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(80),CMDLINE\n*\n         B     SHOWAGIN\n*\n         DS    0F                                                   TEC\nCMDISMF  DC    H'80',H'0'\nCMDLINE  DC    CL80'     ' COMMAND SVC 34 INPUT\nUSERID   DC    CL11'     '\nXUCMID   DC    X'00'\n*\nINITMSG  MVI   TABAREA,C' '   BLANK OUT THE\n         MVC   TABAREA+1(79),TABAREA MESSAGE BUFFER\n         BR    R7             RETURN TO OUR CALLER\n         SPACE 5\n         EJECT\n*\n***********************************************************************\n*\n*   ADD A LINE TO THE TABLE\n*\n***********************************************************************\n*\nOUTMSG   DS    0H\n         ST    R7,OUT7HOLD    RETURN ADDRESS\n         L     R7,OUTLINES             PICK UP THE OUTPUT LINE COUNT\n         LA    R7,1(,7)                ADD 1\n         ST    R7,OUTLINES             SAVE THE OUTPUT LINE COUNT\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VPUT,                                                  X\n               DANAMLST),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBADD,                                                 X\n               CDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   TABAREA,C' '\n         MVC   TABAREA+1(79),TABAREA\n         L     R7,OUT7HOLD    RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         LTORG\n*\n         DS    0F\nOUTLINES DC    F'5'\nOUTMAX   DC    F'22'        MAX LINES ON 3278-2\nZEROFF   DC    X'000000FF'\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nCDF7HOLD DS    F\nOUT7HOLD DS    F\n*\nDIGITS3  DC    X'202020'\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202120'\nEDIT6    DC    X'402020202121'\nEDIT8    DC    X'4020202020202120'\n*\nJOBN     DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nCTAB     DS    0H\nISPLINK  DC    V(ISPLINK)\nCDFOPTP  DC    A(SELECTR)\n         DC    X'80',AL3(CDFOPT)\nSELECTR  DC    CL8'SELECT  '\nCDFOPT   DC    CL8'CDFOPT  '\n*\nL78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL2       DC    F'2'\nL3       DC    F'3'\nL4       DC    F'4'\nL79      DC    F'79'\nL20      DC    F'20'\nL60      DC    F'60'\nL42      DC    F'42'\nL15      DC    F'15'\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nTBADD    DC    C'TBADD    '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL  '\nTBEND    DC    C'TBEND    '\nTBGET    DC    C'TBGET    '\nTBQUERY  DC    C'TBQUERY  '\nTBSKIP   DC    C'TBSKIP   '\nTBTOP    DC    C'TBTOP    '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEFINE  DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE  '\nVGET     DC    C'VGET     '\nVPUT     DC    C'VPUT     '\nVREPLACE DC    C'VREPLACE '\n*\nNOWRITE  DC    C'NOWRITE  '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             CDF NAME LIST\n         DC    C'CONLINE )'     JOB INFO\nCONLINEP DC    C'(CONLINE )'    JOB INFO\nJCMD     DC    C'(JCMD    )'    SELECTION CODE\n@UCB     DC    C'(UCB     )'    SELECTION CODE\n@CONID   DC    C'(CONID   )'    SELECTION CODE\n@SYSID   DC    C'(SYSID   )'    SELECTION CODE\nSYSID    DC    C'    '          SMF SYSTEM ID\n*\nSPACES   DC    C'        '\nCZEROS   DC    CL8'00000000'\n*\nCHAR     DC    C'CHAR    '\n*\nCDFDATAB DC    C'CDFDATAB'\nCDFTABLE DC    C'CDFTABLE'\n*\nCMDDATAB DC    C'CMDDATAB'\nCMDTABLE DC    C'CMDTABLE'\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         C O N S T A N T S                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCRATCH  DS    D                   SCRATCH AREA FOR CHAR. MANIP\nOLDCONS  DC    F'1'                PREVIOUS CONSOLE NUMBER\nCONSOLE  DC    F'1'                CONSOLE TO BE LOOKED AT\nLOGON    DC    CL8' '              LOGON USER ID                   GMM\nPROFID   DC    CL8' '              USER ID SET VIA PROFILE COMMAND GMM\nPROFLEN  DC    X'00'               LENGTH OF USER SET PROFILE      GMM\nAUTH     DC    X'00'           JESOPER COMMAND AUTHORIZATION BYTE  GMM\nAUTHOPR  EQU   X'80'               TSO OPERATOR PRIVILEGE          GMM\n*        JES AND VS COMMAND BUFFER AND LENGTH                      GMM\nPCOMMAND EQU   *                   JES OR VS COMMAND BLOCK         GMM\nPCMDLEN  DC    H'0'                LENGTH OF COMMAND BLOCK         GMM\n         DC    H'0'                UNUSED NIBBLE                   GMM\nPCMD     DC    CL80' '             \"DWR\" OPERATOR COMMAND          GMM\nLPSCREEN DC    H'0'                LINES PER SCREEN\nCPLINE   DC    H'0'                CHARACTERS PER LINE\nMULT     DS    F                   LENGTH OF CONSOLE LINES\nCLINES   DS    H                   NUMBER OF CONSOLE LINES\nTIMER    DC    F'30'               SECONDS LEFT ON TIMER\nDELAY    DC    F'100'              DELAY FOR 100 HUNDREDTHS OF A SECOND\nMOD4FLG  DC    X'00'               X'FF' INDICATES 3278-4 IN USE\nATTNFLG  DC    X'00'               X'FF' INDICATES ATTN WAS TRAPPED\nCRTFLAG  DC    X'FF'               X'FF' INDICATES CRT IN USE\nWAITFLG  DC    X'00'               X'00' INDICATES NOT IN WAIT MODE\nINTEGFLG DC    X'00'               INTEGRATED CONSOLE FLAG\nFULLSCR  DC    X'03'               TPUT ASIS FLAG\nEDITFLG  DC    X'00'               TPUT EDIT FLAG\nNULLS    DC    80X'00'             JUST NULLS\nR41C1    DC    X'11F240'           3278-4  --  ROW 41, COL 1\nR42C1    DC    X'11F350'           3278-4  --  ROW 42, COL 1\nR43C1    DC    X'11F460'           3278-4  --  ROW 43, COL 1\nPATTERN  DC    X'F0202020'         EDIT PATTERN FIELD\nBLANKS   DC    CL80' '\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOLLOWING IS IN SUPPORT OF C M S                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\nAXLIST   DC    H'1',H'0'           AXRES PARMLIST\nCONSASID DS    F                   'CONSOLE' ASID FOR CMS\n         SPACE 2\n         CNOP  0,8\nCONNUM   DC    CL2' 1'            CONSOLE NUMBER\nCTYPE    DC    CL4' '\nUNIT     DC    CL4' '             UNIT ADDR OF CONSOLE\n         DC    X'13'              INSERT CURSOR\nUSERLINE DC    CL13' '            USERS COMMAND INPUT LINE\nERROR    DC    CL66' '            ERROR MSG FIELD\nENDTRAIL EQU   *\n         LTORG\n         DS    0F\nUCMTAB   DS    F\n         DS    35F                PROVIDE SPACE FOR 20 UCM ADDRESSES\nUCMTABE  EQU   *\nNUMUCMS  DS    H\n*\n         TITLE 'EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\n*\n*\nTABAREA  DS    0CL79\nJOB      DC    CL8' '\n         DC    C' '\nPSTEP    DC    C' '\nSTEP     DC    CL8' '\n         DC    C' '\nWHERE    DC    CL3' '\n         DC    C' '\nSTATUS   DC    CL4' '\n         DC    C' '\nSIZE     DC    CL5' '\n         DC    CL2' '\nLINEWSS  DC    CL5' '\n         DC    CL2' '\nTYPE     DC    C' '\n         DC    C' '\nDP       DC    CL2' '\n         DC    C' '\nLINEPGN  DC    CL3' '\n         DC    C' '\nLINESWC  DC    CL3' '\n         DC    C' '\n         DC    C' '\n         DC    C' '\nLINEWMR  DC    CL5' '\n         DC    C' '\nCPUTIME  DC    CL8' '\n         DC    C' '\n         DC    CL8' '\n         DC    C' '\n*\n*\nWORK     DS    D\n*\nCDF000   DC    CL8'CDF000 '\nCDF001   DC    CL8'CDF001 '\nCDF002   DC    CL8'CDF002 '\nCDF003   DC    CL8'CDF003 '\nCDF004   DC    CL8'CDF004 '\n*\nSETMSG   DC    CL8'SETMSG  '\n*\n*\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nSPFMOVE  DC    CL8'MOVE   '\nU8       DC    F'8'\n*---------------------------------------------------------------------*\n*                                                                     *\n*               DISPLAY SCREEN - IMAGE BUFFER SECTION                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL40'BUF  THIS IS THE START OF THE BUFFER  =>'\nBUF      DC    62CL160' '         OPERATORS SCREEN BUFFER\n         DC    CL40'<= BUF  THIS IS THE END   OF THE BUFFER '\n         LTORG\n         EJECT\n         PRINT NOGEN\n         SPACE 2\n         IKJPSCB                   COPY THE PSCB FORMAT DSECT      GMM\n         CVT   DSECT=YES                                           GMM\nIEERDCM  DSECT ,                                                   GMM\n         IEECRDCM                                                  GMM\nIEETDCM  DSECT ,                                                   GMM\n         IEECDCM                                                   GMM\n         IEECUCM FORMAT=NEW\n         IKJTCB                                                    TCB\n         IEZJSCB                                                    TEC\n         IHAASCB\n         IHAASVT\n         IEESMCA\n         END\n/*\n//LKED.SYSLMOD DD DSN=SYS1.CMDLIB2(CDF),DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE LINKLIB(ISPLINK)\n/*\n//LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDFDATAB": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%-----------------  System &SYSID Console &CONID. at UCB &UCB.  ----------------\n%Command ==>_JCMD                                               %SCROLL =>_AMT %\n)MODEL\n@Z\n)INIT\n .CURSOR=JCMD\n  &AMT=CSR\n  &VARS='(CONLINE)'\n  &JCMD = ' '\n  .HELP=CDFHELP\n  IF (&SYSID = XXXX)\n    .HELP=CDFHELP2\n)PROC\n  IF (&JCMD = ' ')\n    &JCMD = RPT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDFHELP": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL---------------  Console Display Facility (CDF)  ------------T TUTORIAL\n+\n+CDF is an ISPF dialog which displays the contents of MVS graphics consoles.\n The initial console which is displayed is the master console.  Any active\n console may then displayed by entering%C=nn+to display console number \"nn\", or\n%U=aaa+to display the console at UCB address \"aaa\".\n\n The table below lists the currently generated MVS graphics consoles.\n\n                Console     UCB\n        System   Number   Address   Location\n        ------   ------   -------   --------\n         XXX1      01       nnn     location of console 01\n         XXX2      02       mmm     location of console 02\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYSCRN": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00Z\\x00Z\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 90, "newlines": 90, "modlines": 0, "user": "FILE103"}, "text": "         ISREDIT MACRO\n\n/**********************************************************************/\n/* THIS MACRO CAN BE USED TO RECEIVE \"SCREEN COPY\" DATA INTO ISPF     */\n/* EDIT ON AN IBM PC3270 OR 3290.  IT WILL DISPLAY A PANEL ONTO       */\n/* WHICH THE DESIRED INFORMATION SHOULD BE COPIED.  IT WILL THEN ADD  */\n/* THE LINES COPIED ONTO THE PANEL TO THE END OF THE CURRENT EDIT     */\n/* DATASET.  AS MANY PANELS OF DATA MAY BE COPIED AS DESIRED; THE     */\n/* ENTER KEY MUST BE HIT TO RECEIVE EACH COPIED SCREEN OF DATA.  IF   */\n/* THE DATASET BEING EDITED HAS \"NUMBER OFF\", MEANING, PRESUMABLY     */\n/* THAT THE DATA COULD BE 80 BYTES LONG, THE PANEL DISPLAYED WILL     */\n/* ALLOW COPYING ALL 80 BYTES OF EACH LINE OF THE COPIED SCREEN.      */\n/**********************************************************************/\n\n         CONTROL ASIS\n         SET ECMSG =\n         SET COUNT1 = 0\n         SET COUNT2 = 0\n         ISREDIT (EDSN) = DATASET\n         ISREDIT (EMEM) = MEMBER\n         SET VECDSN = &EDSN\n         IF &EMEM \u00ac= &STR() THEN SET VECDSN = &EDSN(&EMEM)\n         ISPEXEC DISPLAY PANEL(COPYSC01) MSG(&ECMSG)\n         SET PCC = &LASTCC\n         DO WHILE(&PCC = 0)\n\n           /*------------------------------------*/\n           /* DIVIDE INPUT INTO 80 BYTE RECORDS. */\n           /*------------------------------------*/\n\n           SET I = 2\n           DO WHILE (&I <=20)\n             SET CLINE&I =\n             SET I = &I + 1\n             END\n           SET I = 87\n           SET J = 2\n           SET L = &LENGTH(&STR(&CLINE1))\n           DO WHILE (&I <= &L)\n             SET K = &I + 79\n             IF &K > &L THEN SET K = &L\n             SET X = &SUBSTR(&I:&K,&CLINE1)\n             SET CLINE&J = &STR(&X)\n             SET I = &I + 80\n             SET J = &J + 1\n             END\n           SET K = 86\n           IF &K > &L THEN SET K = &L\n           SET &CLINE1 = &SUBSTR(7:&K,&CLINE1)\n\n           /*------------------------------------------------------*/\n           /* ADD EACH LINE OF THE COPIED SCREEN TO THE END OF THE */\n           /* CURRENT DATASET.                                     */\n           /*------------------------------------------------------*/\n\n           SET I = 1\n           DO WHILE (&I <=20)\n             SET X = &STR(&&CLINE&I)\n             IF &STR(&X) \u00ac= &STR() THEN DO\n               IF &SYSINDEX(&STR(&X),') > 0 +\n               THEN ISREDIT LINE_AFTER .ZLAST = \"&X\"\n               ELSE ISREDIT LINE_AFTER .ZLAST = '&X'\n               SET COUNT1 = &COUNT1 + 1\n               END\n             SET I = &I + 1\n             END\n           SET ZEDSMSG = &STR(&COUNT1 LINES COPIED)\n           SET ZEDLMSG = +\n           &STR(&COUNT1 LINES COPIED FROM COPY PANEL TO END OF DATA)\n           SET ECMSG = ISRZ000\n           SET COUNT2 = &COUNT2 + &COUNT1\n           SET COUNT1 = 0\n\n           /*---------------------------------------*/\n           /* REDISPLAY PANEL TO RECEIVE MORE DATA. */\n           /*---------------------------------------*/\n\n           ISPEXEC DISPLAY PANEL(COPYSC01) MSG(&ECMSG)\n           SET PCC = &LASTCC\n           END\n\n         /*----------------------------------------------------------*/\n         /* EXIT THE MACRO; TELL THE USER HOW MANY LINES WERE ADDED. */\n         /*----------------------------------------------------------*/\n\n         SET ZEDSMSG = &STR(&COUNT2 LINES ADDED)\n         SET ZEDLMSG = +\n         &STR(&COUNT2 TOTAL LINES WERE ADDED TO THE END OF THE DATA)\n         ISPEXEC SETMSG MSG(ISRZ000)\n         EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYSCT1": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL ----------------  Receive Screen Copy Data  ----------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n Instuctions for using this dialog to receive screen copy data into ISPF EDIT.\n\n 1. Enter%COPYSCRN+on the command line while in EDIT.\n 2. A%copy panel+will be displayed.  The area between the dashed lines is the\n    input area for the copy:\n\n   %EDIT ---- Receive Copy Screen Data into &VECDSN ---------------------------+\n   %OPTION ===>\n\n    ===========================================================================+\n\n    Copy the screen into this area between the dashed lines.\n\n   %===========================================================================+\n\n 3. Perform the%screen copy+operation using the hardware facility of the PC3270\n    or 3290.\n 4. Hit the%ENTER+key to receive the data into ISPF EDIT.\n 5. Hit the%END+key when finished copying screens.\n\n Hit the%ENTER+key for more information about this dialog...\n)PROC\n &ZCONT = COPYSCT2\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPYSCT2": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL ----------------  Receive Screen Copy Data  ----------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n More infomation about the screen copy dialog:\n\n o Up to%80 byte records+may be copied.  If the EDIT dataset record length is\n   less than 80 (or if NUMBER is ON) then copied records may be truncated.\n\n o%Lower case text+may be copied but will be translated to upper case unless\n   CAPS is OFF.\n\n o Data received into EDIT via COPYSCRN will be put at the end of the current\n   dataset.\n\n Hit the%END+key to return to the screen copy panel and perform the copy.\n)PROC\n &BACK = COPYSCT1\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPYSC01": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n \u00a2 TYPE(INPUT) PAD(' ') COLOR(YELLOW) JUST(ASIS) CAPS(OFF) HILITE(REVERSE)\n)BODY\n%EDIT ---- Receive Copy Screen Data into &VECDSN  ------------------------------\n%OPTION ===>_ZCMD                                                              +\n+========================================================================\u00a2CLINE1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+===============================================================================\n)INIT\n .HELP = COPYSCT1\n &CLINE1 = '======'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DISPLAY": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xea\\x00\\xea\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 234, "newlines": 234, "modlines": 0, "user": "FILE103"}, "text": "DISPLAY  TITLE 'QUEUE COMMAND - 3270 DISPLAY ROUTINES'            ONL01\nDISPLAY  QSTART ,                  START DISPLAY CSECT ASSEMBLY   ONL01\n***********************************************************************\n* RNB CHANGES:                                                        *\n*     (1) RNB13 - MODIFICATIONS TO FIX PROBLEMS WITH TCAM FULL-SCREEN *\n*                 PROCESSING OF TEST-REQUEST, SYSTEM REQUEST, AND THE *\n*                 PA2/PA3 KEYS.                                       *\n*     (2) RNB14 - MODIFICATIONS TO FIX PROBLEMS FULL-SCREEN           *\n*                 PROCESSING. THIS ONE ALLOWS THE USER TO TYPE IN THE *\n*                 TOP COMMAND LINE WITHOUT QUEUE MISINTERPRETING WHAT *\n*                 WAS ENTERED. (TRY THE DO COMMAND FROM BOTH PLACES   *\n*                 WITHOUT THE MOD TO SEE THE EFFECT.)                 *\n***********************************************************************\n         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART     ICBC\n         GBLB  &QNERDC                                            UF040\n         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA\n         L     R10,QVDSPL     ADDR OF DISPLAY WORK AREA\n         USING QCPRINT,R9     BASE REG FOR PRINT   WORK AREA       FCI*\n         L     R9,QVPRINT     ADDR OF PRINT   WORK AREA            FCI*\n***********************************************************************\n*                                                                     *\n*   CHECK FOR ROOM ON SCREEN                                          *\n*                                                                     *\n***********************************************************************\n         MVI   QDOVER,0       ZERO OUT THE PAGE OVERFLOW INDICATOR\n         MVI   QDPLUS,C' '    BLANK THE OVERFLOW INDICATOR\n         LH    R4,QDMLNG      LOAD MSG LENGTH\n         CH    R4,QDSCRLEN    IS THE MSG LENGTH > SCRSIZE?        UF003\n         BH    RETURN         YES. GO AWAY.\n         MVC   QPRSAVE,QDTLINE        SAVE SUBTITLE LINE ON ENTRY  FCI*\n         LTR   R4,R4          IS MSG LENGTH ZERO?\n         BZ    WRTSCR         YES. WRITE SCREEN.\n         MVI   QDPLUS,C'+'    INDICATE SCREEN OVERFLOW\n         AH    R4,QDNEXT      ADD CURRENT LOCATION ON SCREEN\n         CH    R4,QDSCRLEN    IS THERE ROOM ON THE SCREEN?        UF003\n         BH    WRTSCR         NO. WRITE SCREEN.\n***********************************************************************\n*                                                                     *\n*   MOVE THE MESSAGE TO THE SCREEN                                    *\n*                                                                     *\n***********************************************************************\nDSP2     LH    R7,QDMLNG      LOAD MESSAGE LENGTH\n         LTR   R7,R7          IS MESSAGE LENGTH ZERO?\n         BZ    RETURN         YES. RETURN.\n         LH    R4,QDNEXT      LOAD CURRENT SCREEN LINE NUMBER\n         LR    R1,R4          SAVE LINE NUMBER\n         LA    R4,QDLINE1(R4) LOAD ADDRESS OF NEXT LINE\n         L     R6,QDMSGA      LOAD ADDR OF MESSAGE\n         LH    R5,QDLNELEN    LENGTH MUST BE MULTIPLE OF LINESIZE UF003\nDSP3     CR    R5,R7          IS 5 NOT LESS THAN 7?\n         BNL   DSP4           YES. GO DO IT.\n         AH    R5,QDLNELEN    INCR BY LINE LENGTH                 UF003\n         B     DSP3           TRY AGAIN\nDSP4     AR    R1,R5          UPDATE LINE NUMBER\n         STH   R1,QDNEXT      STORE LINE NUMBER\n         MVCL  R4,R6          MOVE THE MESSAGE TO THE SCREEN\n***********************************************************************\n*                                                                     *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n***********************************************************************\nRETURN   QSTOP\n***********************************************************************\n*                                                                     *\n*   WRITE A FULL SCREEN, WAIT FOR REPLY                               *\n*                                                                     *\n***********************************************************************\nWRTSCR   LA    R1,QDLINE1     ENSURE PRINTABILITY                 UF003\n         LH    R15,QDSCRLEN   LENGTH TO XLATE                     UF003\n         LA    R14,255        SET FOR EXECUTE                     UF003\nWRTSCR1  CR    R15,R14        SEE IF ONLY ONE NEEDED              UF003\n         BNH   WRTSCRN        YES, DO IT                          UF003\n         EX    R14,WRTSCRTR   TRANSLATE PART OF BUFFER            UF003\n         LA    R1,1(R1,R14)   POINT TO NEXT SLOT                  UF003\n         SR    R15,R14        DROP FOR LENGTH DONE                UF003\n         BCTR  R15,0          END FOR EXECUTE FIX                 UF003\n         B     WRTSCR1        LOOP TILL DONE                      UF003\n         SPACE 1                                                  UF003\nWRTSCRTR TR    0(*-*,R1),TABLE  FIX UNPRINTABLES                  UF003\n         SPACE 1                                                  UF003\nWRTSCRN  BCTR  R15,0          DROP FOR EXECUTE                    UF003\n         LTR   R15,R15        TEST FOR NULL                       UF003\n         BM    *+8            SKIP IF NULL                        UF003\n         EX    R15,WRTSCRTR   TRANSLATE END OF BUFFER             UF003\n         SPACE 1                                                  UF003\nTPUTSCRN DS    0H                                                 UF003\n         CLI   QSPF,C'Y'      RUNNING UNDER ISPF?                   TEC\n         BNE   TPUTSCR2       NO, CONTINUE                          TEC\n         XC    QDREPLY,QDREPLY                                      TEC\n         L     R15,@ISPLINK                                         TEC\n         CALL  (15),(#DISPLAY,QPANEL),VL,MF=(E,IDISPLAY)            TEC\n         LTR   R15,R15        \"END\" OR \"RETURN\"?                    TEC\n         BZ    NOTEND         NO, CONTINUE.                         TEC\n         MVC   QDREPLY(4),=C'END '                                  TEC\nNOTEND   LA    R4,QDREPLY     POINT TO REPLY                        TEC\n         LA    R5,QDREPLY+62  POINT TO END OF REPLY.                TEC\nSCANL1   CLI   0(R5),C' '     BLANK?                                TEC\n         BE    SCANL2         YES, CONTINUE.                        TEC\n         SR    R5,R4          LENGTH = R5 - R4 ...                  TEC\n         LA    R5,1(,R5)      + 1.                                  TEC\n         STH   R5,QDRLNG      SAVE LENGTH.                          TEC\n         CLC   =C'DOWN ',QDREPLY DOWN PFKEY?                        TEC\n         BNE   TRYUP          NO, CONTINUE.                         TEC\n         MVC   QDREPLY(5),=CL5'+' YES, REPLACE \"DOWN\" WITH \"+   \".  TEC\n         TRT   QDREPLY+5(58),BLANKTAB LOOK FOR OPERAND.             TEC\n         BNZ   NOTXT2         NO NEED TO SUPPLY OPERAND.            TEC\n         UNPK  QDREPLY+2(2),QDLNES(2) MOVE IN CURRENT SCREEN LENGTH.TEC\n         OI    QDREPLY+3,X'F0' FIX SIGN.                            TEC\n         B     NOTXT2                                               TEC\nTRYUP    CLC   =C'UP ',QDREPLY UP PFKEY?                            TEC\n         BNE   TRYRIGHT       NO, CONTINUE.                         TEC\n         MVC   QDREPLY(3),=CL5'-' YES, REPLACE \"UP\" WITH \"-  \".     TEC\n         TRT   QDREPLY+3(60),BLANKTAB LOOK FOR OPERAND.             TEC\n         BNZ   NOTXT2         NO NEED TO SUPPLY OPERAND.            TEC\n         UNPK  QDREPLY+2(2),QDLNES(2) MOVE IN CURRENT SCREEN LENGTH.TEC\n         OI    QDREPLY+3,X'F0' FIX SIGN.                            TEC\n         MVC   QDRLNG,=X'0004' SPECIFY NEW LENGTH.                  TEC\n         B     NOTXT2                                               TEC\nTRYRIGHT CLC   =C'RIGHT ',QDREPLY RIGHT PFKEY?                      TEC\n         BNE   TRYLEFT        NO, CONTINUE.                         TEC\n         MVC   QDREPLY(6),=CL6'CO 41' REPLACE \"RIGHT\" WITH \"CO 41\". TEC\n         B     NOTXT2                                               TEC\nTRYLEFT  CLC   =C'LEFT ',QDREPLY LEFT PFKEY?                        TEC\n         BNE   NOTXT2         NO, CONTINUE.                         TEC\n         MVC   QDREPLY(5),=CL6'CO 1' REPLACE \"LEFT\" WITH \"CO 1\".    TEC\n         B     NOTXT2                                               TEC\nSCANL2   CR    R5,R4          LOOK AT THE WHOLE REPLY?              TEC\n         BNH   SCANL3         NOT YET, CONTINUE.                    TEC\n         BCTR  R5,0           BACK UP ONE CHARACTER.                TEC\n         B     SCANL1         GO CHECK IT OUT.                      TEC\nSCANL3   SR    R5,R5          CLEAR REGISTER 5.                     TEC\n         STH   R5,QDRLNG      LENGTH = 0.                           TEC\n         B     NOTXT2                                               TEC\nTPUTSCR2 DS    0H                                                   TEC\n         LH    R0,QDSCRPLN    LOAD LENGTH FOR TPUT                UF003\n         TPUT  QDSCREEN,(0),FULLSCR,MF=(E,QTPUT)                  UF003\n         MVC   QDTLINE,QPRSAVE        RESTORE SUBTITLE INFO        FCI*\n         AIF  (&QPFK).PFK1    SKIP NON-PFK CODE                    ICBC\n         TGET  QDREPLY,63,EDIT,MF=(E,QTGET)\n         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?\n         BNE   NOCLEAR        NO. CONTINUE.\n         TCLEARQ INPUT        CLEAR THE QUEUE\nNOCLEAR  STH   R1,QDRLNG      STORE LENGTH OF REPLY\n         AGO   .PFK2                                               ICBC\n.PFK1    ANOP                                                      ICBC\n         LA    R6,QDREPLY                                          ICBC\n         XC    PFREPLY,PFREPLY                                     ICBC\n         XC    QDREPLY,QDREPLY                                     ICBC\n         TGET  PFREPLY,69,ASIS,MF=(E,QTGET)\n         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?         ICBC\n         BNE   NOCLEAR        NO. CONTINUE.                        ICBC\n         TCLEARQ INPUT        CLEAR THE QUEUE                      ICBC\nNOCLEAR  IC    R4,PFCODE                                           ICBC\n         XR    R5,R5                                               ICBC\n         CLI   PFCODE,X'F0'      TEST-REQ/SYS-REQ?                RNB13\n         BE    ENTKEY            /YES - TREAT AS ENTER            RNB13\n         CLI   PFCODE,X'01'      OTHER KIND OF SYS-REQ?           RNB13\n         BE    ENTKEY            /YES - TREAT AS ENTER            RNB13\n         CLI   PFCODE,X'6E'      PA2?                             RNB13\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN          RNB13\n         CLI   PFCODE,X'6B'      PA3?  (TCAM GENERATED)           RNB13\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN          RNB13\n         N     R4,=X'0000000F'   EXTRACT PF-KEY NUMBER             ICBC\n         CH    R4,=H'12'                                           ICBC\n         BH    ENTKEY           \"ENTER\" KEY                        ICBC\n         BCTR  R4,0                                                ICBC\n         SLL   R4,3              TIMES SIZE OF AN ENTRY           UF043\n         LA    R5,QDPFKTAB                                        UF043\n         LA    R5,0(R4,R5)                                         ICBC\n         MVC   QDREPLY(8),0(R5)  MOVE PF-KEY VALUE                UF043\n         LA    R5,8                                               UF043\n         LA    R6,6(,R6)                                          UF043\n         SH    R1,=H'3'          ALLOW USER TO INPUT ON EITHER    UF043\n         BZ    NOTXT             THE TOP OR BOTTOM COMMAND LINE   RNB14\n         MVC   0(57,R6),PFTXT                                     UF043\n         LA    R5,6                                               UF043\n         SH    R1,=H'3'                                           UF043\n         B     NOTXT                                              RNB14\nENTKEY   EQU   *                                                   ICBC\n         SH    R1,=H'3'                                            ICBC\n         BZ    NOTXT                                               ICBC\n         MVC   0(63,R6),PFTXT                                     RNB14\n         SH    R1,=H'3'                                            ICBC\nNOTXT    LA    R1,0(R5,R1)                                         ICBC\n         STH   R1,QDRLNG      STORE LENGTH OF REPLY                ICBC\n.PFK2    ANOP                                                      ICBC\nNOTXT2   DS    0H                                                   TEC\n         OC    QDREPLY,QBLANK     UPPERCASE THE COMMAND            FCI*\n         CLC   QDREPLY(2),=CL2'PR' POSSIBLE PRINT COMMAND      PWF FCI*\n         BNE   CLSCRN             NOPE..SPLIT NORMALLY             FCI*\n*                                                                  FCI*\n         L     R15,=V(PRINT)  FETCH PRINT ENTRY ADDRESS            FCI*\n         BALR  R14,R15        AND CALL HIM                         FCI*\n         LTR   R15,R15        HOW IS HIS RETURN CODE               FCI*\n         BNZ   CLSCRN         NOTHING TO REPORT                    FCI*\n*                                                                  FCI*\n         B     TPUTSCRN       GO REPOST SCREEN                     FCI*\nCLSCRN   LA    R4,QDLINE1     LOAD ADDRESS OF FIRST LINE           FCI*\n         LH    R5,QDSCRLEN    LOAD LENGTH OF SCREEN               UF003\n         SR    R6,R6          NO SENDING FIELD NEEDED              FCI*\n         STH   R6,QDNEXT      STORE ZERO IN LINE NUMBER            FCI*\n         SR    R7,R7          FILL SCREEN WITH NULLS               FCI*\n         MVCL  R4,R6          CLEAR THE SCREEN                     FCI*\n*\n         LH    R1,QDRLNG      STORE LENGTH OF REPLY\n         LTR   R1,R1          WAS THERE A RESPONSE FROM USER?\n         BNZ   INTER          YES. INTERRUPT PROCESSING.\n         MVI   QDOVER,1       INDICATE PAGE OVERFLOW\n         B     DSP2           CONTINUE PROCESSING\nINTER    L     R13,QFRSTSA    GO BACK TO MAIN MODULE\n         LM    R14,R12,12(R13) RESTORE REGISTERS FROM FIRST SAVEAREA\n         BR    R10            ADDRESS OF INTERRUPT HANDLER IN QUEUE\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\n* TABLE OF PRINTABLE CHARACTERS\nTABLE    DC    CL64' '\n         DC    191AL1(*-TABLE)  REST OF TABLE IS OK               UF003\n         DC    C' '              EXCEPT FOR X'FF'                 UF031\n* TABLE FOR SCANNING FOR BLANKS                                     TEC\nBLANKTAB DC    XL256'01'                                            TEC\n         ORG   BLANKTAB+X'40'                                       TEC\n         DC    X'00'                                                TEC\n         ORG   ,                                                    TEC\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01\n         QCOMMON\n         $HASPEQU\n         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ELIST": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00L\\x00L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "FILE103"}, "text": "/*-------------------------------------------------------------------*/\n/*       MACRO: ELIST                                                */\n/*       PURPOSE: LIST CURRENT DATA BEING EDITED (INCLUDING CHANGES) */\n/*-------------------------------------------------------------------*/\n\n         ISREDIT MACRO (PARM)\n         CONTROL NOFLUSH NOMSG /* LIST CONLIST SYMLIST */\n         ISREDIT (N1,N2)   = NUMBER\n         ISREDIT (CHANGED) = DATA_CHANGED\n         ISREDIT (DATASET) = DATASET\n         ISREDIT (MEMBER)  = MEMBER\n         ISREDIT (LEVEL)   = LEVEL\n         ISREDIT (LAST)    = LINENUM .ZLAST\n         ISREDIT (VERSION) = VERSION\n         ISREDIT (STATS)   = STATS\n\n         /* IF THIS IS A NUMBERED DATASET, TURN NUMBER OFF  */\n         /* TEMPORARILY, SO THAT THE LINE NUMBERS WILL SHOW */\n\n         IF &N1 = ON THEN DO\n           SET CHANGED_NUMBER = YES\n           ISREDIT NUMBER OFF\n           END\n         ELSE SET CHANGED_NUMBER = NO\n\n         /* ALLOCATE SYSOUT DATASET */\n\n         ALLOC FI(ELIST) SYSOUT(A) REUSE +\n         LRECL(255) RECFM(V B) BLKSIZE(6000) &PARM\n         SET &ACC = &LASTCC\n         IF &ACC > 0 THEN DO\n           SET ZEDSMSG = INVALID ATTRIBUTE(S)\n           SET ZEDLMSG = INVALID ATTRIBUTE(S) IN \"&PARM\".\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(8)\n           END\n\n         /* OPEN DATASET AND WRITE HEADINGS */\n\n         OPENFILE ELIST OUTPUT\n         SET ELIST = &STR(ISPF/PDF ELIST - &SYSTIME &SYSDATE USERID:)\n         SET ELIST = &STR(&ELIST &SYSUID)\n         PUTFILE ELIST\n         SET ELIST =\n         PUTFILE ELIST\n         SET ELIST = &STR(EDIT ---- &DATASET)\n         IF &MEMBER \u00ac= &STR() THEN SET ELIST = &STR(&ELIST(&MEMBER) -)\n         IF &STATS = ON THEN SET ELIST = &STR(&ELIST &VERSION..&LEVEL)\n         IF &CHANGED = NO +\n         THEN SET ELIST = &STR(&ELIST - DATA HAS NOT BEEN CHANGED)\n         ELSE SET ELIST = &STR(&ELIST - CHANGES HAVE BEEN MADE TO DATA)\n         PUTFILE ELIST\n         SET ELIST =\n         PUTFILE ELIST\n\n         /* WRITE EACH LINE OF THE DATA-BEING-EDITED */\n\n         SET I = 1\n         DO WHILE (&I <= &LAST)\n           ISREDIT (ELIST) = LINE &I\n           IF &CHANGED_NUMBER = NO +\n           THEN SET ELIST = &STR(&ELIST  &I)\n           PUTFILE ELIST\n           SET I = &I + 1\n           END\n         CLOSFILE ELIST\n         FREE FI(ELIST)\n\n         IF &CHANGED_NUMBER = YES THEN ISREDIT NUMBER &N1 &N2\n\n         SET ZEDSMSG = DATA LISTED\n         SET ZEDLMSG = &LAST LINES WILL BE LISTED\n         IF &PARM \u00ac= &STR() +\n         THEN SET ZEDLMSG = &ZEDLMSG WITH ATTRIBUTES &PARM..\n         ELSE SET ZEDLMSG = &ZEDLMSG WITH DEFAULT ATTRIBUTES.\n         ISPEXEC SETMSG MSG(ISRZ000)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INFO": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00t\\x00t\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 116, "newlines": 116, "modlines": 0, "user": "FILE103"}, "text": "         ISREDIT MACRO (STUFF)\n         IF &STR(&STUFF) = DEBUG THEN DO\n           CONTROL LIST CONLIST SYMLIST\n           END\n\n         ISREDIT (XLINE) = DISPLAY_LINES\n         IF &STR(&XLINE) = &STR() THEN DO\n           SET ZEDSMSG = EMPTY DATASET\n           SET ZEDLMSG = INFO COMMAND NOT VALID FOR EMPTY DATASET OR +\n                         MEMBER\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(4)\n           END\n\n         ISREDIT (XDSN) = DATASET\n         IF &SYSINDEX(PANVALET.ISPFOPT,&XDSN) > 0 THEN DO\n           SET ZEDSMSG = PANVALET NOT SUPPORTED\n           SET ZEDLMSG = INFO COMMAND DOES NOT SUPPORT PANVALET +\n                         DATASETS\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(4)\n           END\n\n         ISREDIT (XMEM) = MEMBER\n         LISTDSI '&XDSN' DIRECTORY\n\n         /*--------------------------------*/\n         /* DATASET ALLOCATION INFORMATION */\n         /*--------------------------------*/\n\n         SET L1 = &STR(#INFORMATION FOR DATASET: &XDSN)\n\n         SET L2 = &STR(ALLOCATION:  VOL=&SYSVOLUME  UNIT=&SYSUNIT)\n\n         SET L3 = &STR(ATTRIBUTES:  RECFM=&SYSRECFM  +\n         LRECL=&SYSLRECL  BLKSIZE=&SYSBLKSIZE  DSORG=&SYSDSORG)\n\n         SET L4 = &STR(SPACE:       UNITS=&SYSUNITS  PRIMARY=+\n         &SYSPRIMARY  SECONDARY=&SYSSECONDS  TOTAL=&SYSALLOC  USED=+\n         &SYSUSED)\n\n         SET L5 = &STR(DATES:       CREATED &SYSCREATE, LAST REFERENCE+\n         D &SYSREFDATE, EXPIRES &SYSEXDATE)\n\n         IF &STR(&SYSADIRBLK) \u00ac= &STR() THEN +\n         SET L6 = &STR(DIRECTORY:   &SYSADIRBLK/&SYSUDIRBLK ALLOCATED+\n         /USED DIRECTORY BLOCKS, &SYSMEMBERS MEMBERS)\n\n         /*------------------------------------*/\n         /* MEMBER INFORMATION (IF APPLICABLE) */\n         /*------------------------------------*/\n\n         IF &XMEM \u00ac= &STR() THEN DO\n\n           SET L7 = &STR(#INFORMATION FOR MEMBER: &XMEM)\n\n           ISPEXEC LMINIT DATAID(LMID) DATASET('&XDSN')\n           SET RC_INIT = &LASTCC\n           IF &RC_INIT > 0 THEN DO\n             SET ZEDSMSG = INFO LOGIC ERROR 1\n             SET ZEDLMSG = &STR(RETURN CODE FROM LMINIT = &RC_INIT)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(&RC_INIT)\n             END\n           ISPEXEC LMOPEN DATAID(&LMID)\n           SET RC_OPEN = &LASTCC\n           IF &RC_OPEN > 0 THEN DO\n             SET ZEDSMSG = INFO LOGIC ERROR 2\n             SET ZEDLMSG = &STR(RETURN CODE FROM LMOPEN = &RC_OPEN)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(&RC_OPEN)\n             END\n           ISPEXEC LMMFIND DATAID(&LMID) MEMBER(&XMEM) STATS(YES)\n           SET RC_MFIND = &LASTCC\n           IF &RC_MFIND > 0 AND &RC_MFIND \u00ac= 8 THEN DO\n             SET ZEDSMSG = INFO LOGIC ERROR 3\n             SET ZEDLMSG = &STR(RETURN CODE FROM LMMFIND = &RC_MFIND)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(&RC_MFIND)\n             END\n\n           IF &ZLVERS = &STR() THEN DO /* NO STATISTICS */\n             SET L8 = NO ISPF STATISTICS EXIST FOR MEMBER\n             END\n           ELSE DO /* STATISTICS */\n             SET L8 = &STR(STATS:       +\n             VERSION=&ZLVERS  MODIFICATION LEVEL=&ZLMOD)\n             SET L9 = &STR(HISTORY:     CREATED &ZLCDATE, +\n                       LAST MOD ON &ZLMDATE AT &ZLMTIME BY +\n                       &ZLUSER)\n             SET L10 = &STR(RECORDS:     INITIAL=&ZLINORC  CURRENT=+\n                       &ZLCNORC  MODIFIED=&ZLMNORC)\n             END /* STATISTICS */\n\n           ISPEXEC LMCLOSE DATAID(&LMID)\n           ISPEXEC LMFREE DATAID(&LMID)\n\n           END\n\n         /*-------------------------------------------------------*/\n         /* LINES HAVE BEEN FORMATTED.  SEND THEM OUT IN REVERSE  */\n         /* ORDER.                                                */\n         /*-------------------------------------------------------*/\n\n         SET I = 10\n         DO WHILE (&I > 0)\n           SET X = &STR(&&L&I)\n           IF &STR(&X) \u00ac= &STR() THEN DO\n             IF &SUBSTR(1:1,&X) = &STR(#) +\n             THEN ISREDIT LINE_AFTER &XLINE = +\n             MSGLINE '&SUBSTR(2:&LENGTH(&X),&X)'\n             ELSE ISREDIT LINE_AFTER &XLINE = NOTELINE '&X'\n             END\n           SET I = &I - 1\n           END\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INIT": {"ttr": 1552, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02\\xb4\\x02\\xb4\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 692, "newlines": 692, "modlines": 0, "user": "FILE103"}, "text": "INIT     TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'          ONL01\nINIT     QSTART ,                  START INIT CSECT ASSEMBLY      ONL01\n         GBLB  &QDBC          DBC    OPTION                       UF024\n         GBLB  &QONL          ONL    OPTION                       ONL08\n         GBLB  &LOCK          LOCKHEED OPTION                        CL\n***********************************************************************\n*                                                                     *\n*   LOAD QCOMMON                                                      *\n*                                                                     *\n***********************************************************************\n*\n****\n*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,\n****               THIS IS THE ONLY REFERENCE TO IT.\n*\n         AIF   (&QONL).ONL08                                      ONL08\n         L     R11,=V(QCOMMON) ADDR OF QCOMMON                    UF002\n         LTR   R11,R11        SEE IF LINKED IN                    UF002\n         BNZ   LOADED         YES, CONTINUE                       UF002\n.ONL08   ANOP  ,                                                  ONL08\n         SPACE 1                                                  UF002\n         LOAD  EP=QUEUECMN    QUEUE COMMON AREA\n         LR    R11,R0         ADDR OF QCOMMON\n         SPACE 1                                                  UF002\nLOADED   DS    0H                                                 UF002\n         L     R1,4(R13)      PREVIOUS SAVE AREA\n         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA\n         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON\n         USING QDAIR,R10      BASE REG FOR DAIR WORK\n         L     R10,QVDAIR     LOAD BASE REG\n         USING QCKPT,R9       BASE REG FOR CKPT WORK\n         L     R9,QVCKPT      LOAD BASE REG\n         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK\n         L     R8,QVDSPL      LOAD BASE REG\n         SPACE 1\n         L     R1,16          GET CVT ADDRESS\n         USING CVT,R1\n         TM    CVTDCB,X'80'   EXECUTING XA MODE\n         BNO   NOTXA          NO, BR\n         OI    QFLAG1,QFLG1XA SET XA MODE FLAG\n         DROP  R1\n         SPACE 1\n         USING WORK,R13       ADDRESSING FOR SAVE/WORK AREA       UF024\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   VERIFY A TSO ENVIRONMENT, FIND THE ADDRRESS OF THE PROTECTED  ONL02\n*   STEP CONTROL BLOCK, AND VERIFY SOME FIELDS IN THE COMMAND     ONL02\n*   PROCESSOR PARAMETER LIST.                                     ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\nNOTXA    LA    R3,QDWORK           ADDR FOR EXTRACT ANSWER AREA   ONL02\n         LA    R4,QAEXTLST         ADDR OF EXTRACT PARAMETER LIST ONL02\n         EXTRACT (R3),FIELDS=(TSO,PSB),MF=(E,(R4))  EXTRACT INFO  ONL02\n         SPACE 1                                                  ONL02\n         L     R1,QDWORK           PICKUP ADDR OF TSO INDICATOR   ONL02\n         TM    0(R1),X'80'         IS THIS A TSO ADDRESS SPACE?   ONL02\n         BZ    QAABORT             IF NOT, ABORT                  ONL02\n         SPACE 1                                                  ONL02\n         L     R1,QDWORK+4         PICKUP ADDR OF PSCB            ONL02\n         LTR   R1,R1               IS PSCB AVAILABLE?             ONL02\n         BZ    QAABORT             IF NOT, ABORT                  ONL02\n         SPACE 1                                                  ONL02\n         USING PSCB,R1             NOTE PSCB ADDRESSABILITY       ONL02\n         USING CPPL,R2             NOTE CPPL ADDRESSABILITY       ONL02\n         SPACE 1                                                  ONL02\n         CLM   R1,15,CPPLPSCB      VERIFY PSCB ADDR IN CPPL       ONL02\n         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02\n         CLC   PSCBUPT,CPPLUPT     VERIFY UPT ADDR IN CPPL        ONL02\n         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   GET THE USERID AND ITS LENGTH AND SAVE THEM IN QCOMMON        ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         MVC   QLOGON(L'PSCBUSER),PSCBUSER  SET USERID IN QCOMMON ONL02\n         SLR   R0,R0               CLEAR FOR INSERT               ONL02\n         IC    R0,PSCBUSRL         PICKUP LENGTH OF USERID        ONL02\n         ST    R0,QLOGONLN         SET LENGTH IN QCOMMON          ONL02\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   CHECK PSCB FOR OPERATOR AUTHORITY                             ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTHORITY? ONL02\n         BZ    SKIPOPER            SKIP IF NO                     ONL02\n         OI    QAFLAGS,QAFXOPER    SHOW USER HAS OPER AUTHORITY   ONL02\nSKIPOPER DS    0H                                                 ONL02\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   FILL IN DAIR PARAMETER LIST FROM THE CPPL                     ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         MVC   DAPLUPT,CPPLUPT     USER PROFILE TABLE             ONL02\n         MVC   DAPLECT,CPPLECT     ENVIRONMENT CNTL TABLE         ONL02\n         MVC   DAPLPSCB,CPPLPSCB   PROTECTED STORAGE CNTL BLK     ONL02\n         DROP  R1                                                 CL006\n         SPACE 2                                                  ONL02\n         AIF   (NOT &QDBC).NODBC1 SKIP IF DBC NOT INSTALLED       UF024\n******************************************************************UF024\n*                                                                 UF024\n*   IF USER HAS OPER AUTHORITY, ESTABLISH ESTAE ENVIRONMENT       UF024\n*                                                                 UF024\n******************************************************************UF024\n         SPACE 1                                                  ONL02\n         TM    QAFLAGS,QAFXOPER    DOES USER HAVE OPER AUTHORITY? ONL02\n         BZ    NOTOPER             SKIP IF NO                     ONL02\n         SPACE 1                                                  ONL02\n         LOAD  EP=DBC,ERRET=NOTOPER  LOAD ESTAE ROUTINE           UF024\n         LR    R3,R0          ADDR OF ROUTINE                     UF024\n         MVC   WORKAREA(DBCMFLN),DBCMFL GET ESTAE PARM LIST       UF024\n         ESTAE (R3),MF=(E,WORKAREA)  CREATE THE ESTAE             UF024\n         OI    QFLAG1,QFLG1DBC  INDICATE NEED TO DELETE AT TERM   UF024\n         B     NOTOPER        CONTINUE PROCESSING                 UF024\nDBCMFL   ESTAE ,MF=L          LIST FORM OF ESTAE                  UF024\nDBCMFLN  EQU   *-DBCMFL       LENGTH OF LIST FORM ESTAE           UF024\nNOTOPER  DS    0H                                                 ONL02\n.NODBC1  ANOP                                                     UF024\n         PUSH  PRINT                                                TEC\n         PRINT GEN                                                  TEC\n         ENQ   (SPFUSER,QLOGON,E,7,STEP),RET=TEST,MF=(E,SPFTEST)    TEC\n         POP   PRINT                                                TEC\n         LTR   R15,R15             RUNNING UNDER ISPF?              TEC\n         BZ    NOTISPF             NO, CONTINUE.                    TEC\n         MVI   QSPF,C'Y'           YES, SET FLAG.                   TEC\n         LOAD  EP=ISPLINK          LOAD ISPF ROUTINE.               TEC\n         ST    R0,@ISPLINK         SAVE ADDRESS OF ISPF ROUTINE.    TEC\n         SPACE 1                                                    TEC\nNOTISPF  DS    0H                                                   TEC\n         EJECT                                                    CL006\n***********************************************************************\n*                                                                     *\n*        SCAN COMMAND BUFFER FOR KNOWN KEYWORDS.  IF FOUND TAKE       *\n*        APPROPRIATE ACTION.  IF NONE FOUND OR RECOGNIZED,            *\n*        THEN PASS TO OUR PARSE ROUTINE.                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MVC   PPLUPT(12),DAPLUPT  COPY UPT, ECT, ECB             CL006\n         MVC   PPLPCL,=A(PCLSTART) ADDR OF POINTER CNTL LIST      CL006\n         MVC   PPLCBUF,CPPLCBUF    ADDR OF COMMAND BUFFER         CL006\n         SPACE 2                                                  ONL02\n         CALLTSSR EP=IKJPARS,MF=(E,PPLUPT) GO PARSE BUFFER        CL006\n         SPACE 2                                                  CL006\n         LTR   R15,R15             CONTINUE IF PARSE              CL006\n         BNZ   NOVOL                WENT AWRY                     CL006\n         SPACE 1                                                  CL006\n         L     R7,PARSBACK         PARSE DESCRIPTER LIST BASE     CL006\n         SPACE 1                                                  CL006\n         USING IKJPARMD,R7         PARSE ADDRESSABILITY           CL006\n         SPACE 1                                                  CL006\n         CLC   PSTRING,=F'0'       SKIP IF THERE HAS BEEN         CL006\n         BE    NOSTRING             NO QUEUE SUB-COMMAND GIVEN    CL006\n         MVC   QDREPLY,QBLANK      INITIALIZE REPLY AREA          CL006\n         L     R6,PSTRING          ADDR OF STRING                 CL006\n         LH    R1,PSTRING+4        LENGTH OF STRING               CL006\n         BCTR  R1,0                MACHINE LENGTH                 CL006\n         EX    R1,MVCSTRIN         COPY STRING TO REPLY AREA      CL006\n         SPACE 2                                                  CL006\nNOSTRING CLC   PPREFIX,=H'0'       SKIP IF PREFIX IS NOT          CL006\n         BE    NOPREF               PROVIDED                      CL006\n         MVC   QPREFIX,=CL8' '     BLANK ASSEMBLED VERSION        CL006\n         L     R6,XPREFIX          ADDRESS OF PREFIX              CL006\n         LH    R1,XPREFIX+4        LENGTH OF PREFIX               CL006\n         BCTR  R1,0                MACHINE LENGTH OF PREFIX       CL006\n         EX    R1,MVCPREF          COPY PREFIX TO QCOMMON         CL006\n         SPACE 2                                                  CL006\nNOPREF   CLC   PUNIT,=H'0'         SKIP IF NO UNIT                CL006\n         BE    NOUNIT               PROVIDED                      CL006\n         MVC   DA08UNIT,=CL8' '    BLANK ASSEMBLED VERSION        CL006\n         L     R6,XUNIT            ADDRESS OF UNIT STRING         CL006\n         LH    R1,XUNIT+4          LENGTH OF UNIT STRING          CL006\n         BCTR  R1,0                MACHINE LENGTH                 CL006\n         EX    R1,MVCUNIT          COPY UNIT TO QCOMMON           CL006\n         SPACE 2                                                  CL006\nNOUNIT   CLC   PVOL,=H'0'          SKIP IF NO VOLUME              CL006\n         BE    NOVOL                SERIAL PROVIDED               CL006\n         MVC   DA08SER,=CL8' '     BLANK ASSEMBLED VERSION        CL006\n         L     R6,XVOL             ADDR OF VOL STRING             CL006\n         LH    R1,XVOL+4           LENGTH OF VOL STRING           CL006\n         BCTR  R1,0                MACHINE LENGTH                 CL006\n         EX    R1,MVCVOL           COPY VOLSER TO QCOMMON         CL006\n         SPACE 2                                                  CL006\nNOVOL    IKJRLSA (R7)              FREE PARSE DESCRIPTOR LIST     CL006\n         B     SKIP                                               CL006\n         SPACE 1                                                  CL006\nMVCVOL   MVC   DA08SER(*-*),0(R6)  *** EXECUTE ONLY ***           CL006\nMVCUNIT  MVC   DA08UNIT(*-*),0(R6) *** EXECUTE ONLY ***           CL006\nMVCPREF  MVC   QPREFIX(*-*),0(R6)  *** EXECUTE ONLY ***           CL006\nMVCSTRIN MVC   QDREPLY(*-*),0(R6)  *** EXECUTE ONLY ***           CL006\n         DROP  R7                                                 CL006\n         SPACE 2                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                  ONL02\nSKIP     GETMAIN R,LV=65536*4                                     CL006\n         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN\n         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE\n         A     R1,=A(65536*4) END OF TABLE\n         ST    R1,QCEND\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   PERFORM AUTHORIZATION CHECK FOR QUEUE COMMAND START-UP        ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         QAUTHCK QASTART           PERFORM START-UP AUTHORIZATION ONL02\n         SPACE 2                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   ALLOCATE HASPCKPT                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                  ONL02\n         MVC   DA08DDN,=CL8'HASPCKPT' DDNAME FOR ALLOCATE\n         GETMAIN R,LV=2+44         WORK AREA                      CL006\n         ST    R1,DA08PDSN         SET POINTER TO DSNAME          CL006\n         LA    R1,DSNCKPT          ADDR OF CHECKPOINT DSN SUFFIX  CL006\n         BAL   R14,BUILDSN         GO BUILD DATA SET NAME         CL006\n         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION\n         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE\n         BALR  R14,R15        GO TO IT\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   PERFORM PRE-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK         ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         QAUTHCK QABEFOPN          PRE-OPEN CKPT/SPOOL AUTH CHECK ONL02\n         SPACE 2                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                  ONL02\n         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT\n         L     R2,QCSTART     USE TABLE AREA FOR IOAREA\n         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS\n         READ  HDECB1,SF,,(R2),MF=E READ FIRST RECORD\n         CHECK HDECB1\n         SPACE 1                                                  2.2.0\n*                                                                 2.2.0\n*        FORMAT OF CHECKPOINT MASTER RECORD                       2.2.0\n*        $SAVEBEG - START OF HCT AREA                             2.2.0\n*                   ($SAVELEN LONG)                               2.2.0\n*        QSE1     - START OF QSE AREA                             2.2.0\n*                   (QSELEN*$QSEMAX)                              2.2.0\n*        $JQEEXT  - START OF JQE EXTENSION                        2.2.0\n*                   ($MAXEXSZ)                                    2.2.0\n*        $DASEXT  - START OF DAS EXTENSIONS                       2.2.0\n*                   (DASEXLEN*$SPOLNUM)                           2.2.0\n*        $KITPTR  - POINTER TO CHECKPOINT INFO TABLES             2.2.0\n*                   ($KITNUM*KITLNGTH)                            2.2.0\n*        $CTLB    - POINTER TO CHECKPT I/O CONTROL BYTES          2.2.0\n*                                                                 2.2.0\n         SPACE 1                                                  2.2.0\n*                                                                 UF039\n*        GETMAIN DECB WORK AREA FOR CKPT ROUTINE                  UF039\n*                                                                 UF039\n         SR    R0,R0          CLEAR FOR IC                        UF039\n         IC    R0,DCBNCP-IHADCB+HASPCKPT  NUMBER OF CHANNEL PGMS  UF039\n         MH    R0,=Y(HDECB1L) TIMES LENGTH OF A DECB              UF039\n         GETMAIN R,LV=(0)     GET ENOUGH STORAGE                  UF039\n         ST    R1,QCDECBPT    SAVE ADDRESS FOR CKPT ROUTINE       UF039\n         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT\n         CLC   =C'JES2',$HASPID    MAKE SURE IS VALID HCT         UF046\n         BE    HCTOK               YES, CONTINUE                  UF046\n         TPUT  MESSAGE3,L'MESSAGE3,EDIT,MF=(E,QTPUT) TELL USER    UF046\n         ABEND 90,DUMP             ABORT                          UF046\nHCTOK    DS    0H                                                 UF046\n***********************************************************************\n*                                                                     *\n*   INITIALIZE SYSTEM ID'S FROM CHECKPOINT SHARED Q CONTROL ELEMENTS  *\n*      - JOHN GRADY SULLIVAN - LOMA LINDA UNIVERSITY MEDICAL CENTER   *\n*                                                                     *\n***********************************************************************\n         LH    R3,$QSEMAX     GET MAX # OF DEFINED SYSTEMS    /* JGS */\n         LA    R4,QSYSID+8    => QCOMMON SYSTEM ENTRY - SID(1)/* JGS */\n         LA    R5,$SAVEEND    => QSE'S IN CHECKPOINT RECORD   /* JGS */\n         USING QSE,R5         ADDRESSABILITY TO QSE'S         /* JGS */\nSIDLOOP  DS    0H                                             /* JGS */\n         MVC   0(4,R4),QSESID SYSTEM ID TO QCOMMON            /* JGS */\n         MVC   4(4,R4),QBLANK BLANK NEXT 4 BYTES              /* JGS */\n         LA    R4,8(,R4)      => NEXT ENTRY IN QCOMMON        /* JGS */\n         TM    QSESTAT,QSELAST   IS THIS THE LAST QSE ?       /* JGS */\n         BO    SIDLOOPE       BIT=1 => YES, LAST, SO BRANCH   /* JGS */\n         LA    R5,QSELEN(,R5) => NEXT QSE                     /* JGS */\n         BCT   R3,SIDLOOP     LOOP FOR THE NUMBER OF SYSTEMS  /* JGS */\nSIDLOOPE DS    0H                                             /* JGS */\n         DROP  R5                                             /* JGS */\n         EJECT ,                                                  2.2.0\n***********************************************************************\n*                                                                     *\n*   COMPUTE SIZE OF TRACK GROUP MAPS ON CKPT                      2.2.0\n*                                                                     *\n***********************************************************************\n         L     R5,$NUMTG      NUMBER OF TRACK GROUPS TOTAL        2.2.0\n         SRL   R5,3           DIVIDE BY 8                         UF020\n         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP\n         AIF   (NOT &LOCK).NOTLOCK                                   CL\n         MH    R1,=H'3'            NUMBER OF BYTES * 3               CL\n         AGO   .LOCK                                                 CL\n.NOTLOCK SLL   R1,1                NUMBER OF BYTES * 2            UF046\n.LOCK    LA    R1,BFPLEN(,R1)      ADD BUFFER PREFIX                 CL\n         LA    R1,4095(,R1)        PREPARE TO ROUND\n         SRL   R1,12               DIVIDE BY 4K                   UF046\n         STH   R1,QCTGML           NUMBER OF BLOCKS FOR TG MAPS   UF046\n***********************************************************************\n*                                                                     *\n*   COMPUTE HASPACE BUFFER SIZE                                       *\n*                                                                     *\n***********************************************************************\n         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE\n         STH   R5,HASPACE+62  STORE IN DCB\n         STH   R5,HDECB2+6    STORE IN DECB\n         LA    R5,63(R5)      PREPARE TO ROUND\n         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY\n***********************************************************************\n*                                                                     *\n*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *\n*                                                                     *\n***********************************************************************\n         LR    R14,R5         HASPACE BUFFER SIZE\n         MH    R14,=H'3'      3 BUFFERS\n         LH    R1,$CKRECN     NUMBER OF 4K RECORDS                2.2.0\n         LA    R1,1(,R1)           PLUS MASTER RECORD             2.2.0\n         AH    R1,$CLRECN          + NUMBER OF CHANGE LOG RECORDS 2.2.0\n         ST    R1,QCJOTL      STORE RECORD COUNT\n         SLL   R1,12          MULTIPLY BY 4096\n         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP\n         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA\n         GETMAIN R,LV=(0)     OBTAIN BUFFERS\n         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA\n         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC\n         SPACE 1                                                  2.2.0\n         L     R15,=V(CKPT)        READ CKPT DATA                 2.2.0\n         BALR  R14,R15                                            2.2.0\n         SPACE 1                                                  2.2.0\n         L     R1,QCJQTL           RESTORE BUFFER ADDRESS         2.2.0\n         EJECT ,                                                  2.2.0\n         LR    R14,R1              COMPUTE ADDR OF JQE EXTENSION\n         LA    R14,$SAVELEN(,R14)  ACCOUNT FOR CHECKPOINTED HCT\n         LA    R4,QSELEN      QSE LENGTH                          2.2.0\n         MH    R4,$QSEMAX     MULTIPLY LENGTH TIMES NUM OF QSES   2.2.0\n         ALR   R14,R4              ACCOUNT FOR QSE'S\n         ST    R14,QCJQEXA         SAVE ADDR OF JQE EXTENSION\n         AH    R1,=H'4096'    INCREMENT\n*                                                                 2.2.0\n         LH    R15,$CLRECN         NUMBER OF CHANGE LOG BLKS      2.2.0\n         SLL   R15,12               TIMES 4K                      2.2.0\n         AR    R1,R15              BUMP PAST CHANGE LOG           2.2.0\n*                                                                 2.2.0\n         USING HDP,R1              CONTROL BLOCK POOL HEADER      2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**TGM  POOL**',HDPID                            2.2.0\n         BE    OKTGM                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE TGM POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKTGM    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCTGMA           BUFFER FOR TGM BLOCKS          UF046\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**JIX  POOL**',HDPID                            2.2.0\n         BE    OKJIX                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE JIX POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKJIX    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCJIXA      BUFFER FOR JIX BLOCKS               UF020\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**JQE  POOL**',HDPID                            2.2.0\n         BE    OKJQE                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE JQE POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKJQE    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCJQTA      BUFFER FOR JQE BLOCKS\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**PST  POOL**',HDPID                            2.2.0\n         BE    OKPST                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE PST POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKPST    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCPSTA           BUFFER OF PST BLOCKS\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**JOE  POOL**',HDPID                            2.2.0\n         BE    OKJOE                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE JOE POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKJOE    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCJOTA      BUFFER FOR JOE BLOCKS\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**RSO  POOL**',HDPID                            2.2.0\n         BE    OKRSO                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE RSO POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKRSO    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**LCK  POOL**',HDPID                            2.2.0\n         BE    OKLCK                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE LCK POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKLCK    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         CLC   =C'**DAS  POOL**',HDPID                            2.2.0\n         BE    OKDAS                                              2.2.0\n         TPUT  =C'UNABLE TO LOCATE DAS POOL',25,EDIT,MF=(E,QTPUT) 2.2.0\n         B     ABORT98             AND ABEND                      2.2.0\nOKDAS    DS    0H                                                 2.2.0\n         LA    R0,HDPLNGTH(,R1) ADD BUFFER PREFIX                 2.2.0\n         ST    R0,QCTDASA          BUFFER FOR DAS BLOCKS          2.2.0\n         ICM   R15,B'1111',HDPSIZE SIZE OF AREA                   2.2.0\n         AR    R1,R15              BUMP                           2.2.0\n         SPACE 1                                                  2.2.0\n         DROP  R1                                                 2.2.0\n         SPACE 1                                                  2.2.0\n         ST    R1,QCJCTA      BUFFER FOR JCT\n         AR    R1,R5          INCREMENT\n         ST    R1,QCIOTA      BUFFER FOR IOT\n         AR    R1,R5          INCREMENT\n         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS\n         SPACE 1                                                  ONL16\n         L     R1,QCJCTA           ADDR OF JCT BUFFER             ONL16\n         SL    R1,=A(JCTSTART-JCT)  ADJUST FOR BUFFER PREFIX      ONL16\n         ST    R1,QCJCTA           SAVE ADJUSTED JCT POINTER      ONL16\n         SPACE 1                                                  ONL16\n         LA    R1,$JQHEADS+$JQHEADL-$SAVEBEG OFFSET 1ST JQE HEAD  UF020\n         A     R1,QCJQTL      BASE OF FIRST CKPT REC\n         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER\n***********************************************************************\n*                                                                     *\n*   ALLOCATE AND OPEN HASPACE                                         *\n*                                                                     *\n***********************************************************************\n* THIS LINE WAS BLANK EXCEPT FOR \"2.2.0\" AT END                   2.2.0\n         L     R3,QCTDASA          ADDR OF DAS AREA               2.2.0\n         USING DAS,R3              SET ADDRESSING                 UF046\n         MVC   DA08DDN,=CL8'HASPACE' DDNAME FOR ALLOCATE\n         LA    R1,DSNSPACE         ADDR OF HASPACE DSN SUFFIX     CL006\n         BAL   R14,BUILDSN         GO BUILD DATA SET NAME         CL006\n         LA    R4,9           MAX POSSIBLE SPOOLS FOR QUEUE       UF020\n         LA    R7,QCDCBL      LENGTH OF HASPACE DCB\n         MR    R6,R4          COMPUTE LENGTH OF DCB POOL\n         GETMAIN R,LV=(R7)    OBTAIN DCB POOL\n         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN\n         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN\n         LR    R7,R1          SAVE ADDR OF DCB POOL\n         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST\n         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES\n         MVC   DA08SER(5),$SPOOL PATTERN FOR VOLSER\nSPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL\n         TM    DASFLAG,DASEXSTS    DOES VOLUME EXIST?             UF046\n         BZ    SPOOL4              NO, SKIP THIS ONE              UF046\n         TM    DASFLAG2,DASINACT   IS IT INACTIVE?                UF046\n         BO    SPOOL4              YES, SKIP IT                   UF046\n         LH    R15,DASNOTGE        NUMBER OF TRACKS IN EXTENT     CL001\n         A     R15,QCTNUMTG        ACCUMULATE ACTIVE              CL001\n         ST    R15,QCTNUMTG         TRACK GROUP COUNT             CL001\nSPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?\n         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.\n         CLC   0(1,R5),DASTYPE     IS IT A MATCH?                 UF046\n         BE    SPOOL3         YES. GO WITH IT.\n         LA    R5,12(R5)      NEXT TABLE ENTRY\n         B     SPOOL2         TRY NEXT ENTRY\nSPOOL3   MVC   QCTRKCYL-QCSPOOLS+4+2(2,R8),2(R5) SET TRK/CYL         CL\n         MVC   DA08UNIT,4(R5) MOVE UNIT NAME\n         MVC   DA08SER+5(1),DASVOLID+5 LAST CHAR OF VOLSER        UF046\n         LA    R6,1(R6)       INCREASE COUNT BY ONE\n         STC   R6,DA08DDN+7   UPDATE DDNAME\n         OI    DA08DDN+7,X'F0' MAKE IT A VALID NUMBER\n         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE\n         BALR  R14,R15        GO TO IT\n         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL\n         MVC   47(1,R7),DA08DDN+7 UPDATE THE DDNAME\n         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST\n         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB\nSPOOL4   LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST\n         LA    R3,DASSIZ(,R3)      NEXT VOLUME                    UF046\n         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.\n         L     R1,DA08PDSN         ADDR OF WORK AREA              CL006\n         FREEMAIN R,LV=2+44,A=(1)  FREE WORK AREA                 CL006\n         SPACE 2                                                     CL\n***********************************************************************\n*                                                                     *\n*        OPEN ONE DCB FOR EACH ACTIVE EXTENT.                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R4,9                MAX POSSIBLE SPOOLS FOR QUEUEJKAUG84\n         LA    R8,QCSPOOLS         ADDR OF FIRST DCB POINTER         CL\n         SPACE 1                                                     CL\nSPOOL5   OC    0(4,R8),0(R8)       SKIP IF THIS EXTENT               CL\n         BZ    SPOOL6               IS NOT ACTIVE                    CL\n         OI    0(R8),X'80'         SET END OF LIST INDICATOR         CL\n         OPEN  MF=(E,(R8))         OPEN ONE EXTENT                   CL\n         NI    0(R8),X'7F'         TURN OFF BIT JUST FOR NEATNESSKAUG84\nSPOOL6   LA    R8,4(,R8)           BUMP TO NEXT EXTENT               CL\n         BCT   R4,SPOOL5           CONTINUE IF ANY MORE              CL\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   PERFORM POST-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK        ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\n         QAUTHCK QAAFTOPN          POST-OPEN CKPT/SPOOL AUTH CHECKONL02\n         SPACE 2                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   GO HOME                                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                  ONL02\n         QSTOP\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   ABORT QUEUE COMMAND PROCESSING                                ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\nQAABORT  DS    0H                  ABORT QUEUE COMMAND PROCESSING ONL02\n         WTO   'QUEUE COMMAND ABORTED - INVALID ENVIRONMENT',     ONL02X\n               ROUTCDE=(11)        TELL USER WHY                  ONL02\n         SPACE 1                                                  ONL02\n         ABEND 913                 ABEND U913                     ONL02\n         EJECT                                                    CL006\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DATA SET NAME FOR JES2 DISK DATA SETS.             *\n*                                                                     *\n*        R1 = ADDR OF DSN PREFIX                                      *\n*        R14= LINK REGISTER                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDSN  L     R15,DA08PDSN        ADDR OF WORK AREA              CL006\n         MVI   2(R15),C' '         BLANK DATA SET                 CL006\n         MVC   3(43,R15),2(R15)     NAME WORK AREA                CL006\n         MVC   2(8,R15),QPREFIX    SET PREFIX FROM COMMON         CL006\n         LA    R15,9(R15)          ADDR OF LAST POSSIBLE CHAR     CL006\n         CLI   0(R15),C' '         SKIP IF NON-BLANK              CL006\n         BNE   *+8                  CHARACTER FOUND               CL006\n         BCT   R15,*-8               ELSE KEEP LOOKING            CL006\n         MVI   1(R15),C'.'         SET PERIOD                     CL006\n         MVC   2(8,R15),0(R1)      COPY DSN SUFFIX                CL006\n         LA    R15,2+7(R15)        ADDR OF LAST POSSIBLE CHAR     CL006\n         CLI   0(R15),C' '         SKIP IF NON-BLANK              CL006\n         BNE   *+8                  CHARACTER FOUND               CL006\n         BCT   R15,*-8               ELSE KEEP LOOKING            CL006\n         L     R1,DA08PDSN         ADDR OF WORK AREA              CL006\n         LA    R1,1(R1)            ADDR OF FIRST BYTE OF NAME-1   CL006\n         SR    R15,R1              LENGTH OF ENTIRE NAME          CL006\n         L     R1,DA08PDSN         ADDR OF WORK AREA              CL006\n         STH   R15,0(R1)           SET LENGTH FOR DAIR            CL006\n         BR    R14                  AND RETURN                    CL006\n***********************************************************************\n*                                                                     *\n*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *\n*                                                                     *\n***********************************************************************\nABORT    TPUT  MESSAGE,L'MESSAGE,EDIT,MF=(E,QTPUT)   TELL THE USER\nABORT98  ABEND 98,DUMP        QUIT.                               2.2.0\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nOCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE\nMVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY\nDEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME\n         DC    X'0B00',H'30',CL8'3350'\n         DC    X'0D00',H'19',CL8'3330-1'\n         DC    X'0E00',H'15',CL8'3380'                            UF037\n         DC    X'FFFF'\n         DS    0F\nTIR3     DC    X'00000300'    POINT PAST SYNC RECORDS\nDSNCKPT  DC    CL8'HASPCKPT'                                      CL006\nDSNSPACE DC    CL8'HASPACE'                                       CL006\nMESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'\nMESSAGE3 DC    C'INVALID HCT SAVEAREA ON CKPT'                    UF046\n         EJECT                                                    CL006\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT PARSE PARAMETER LISTS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPCLSTART IKJPARM DSECT=IKJPARMD                                   CL006\n         SPACE 2                                                  CL006\nPSTRING  IKJIDENT 'SUB-COMMAND',ASTERISK,FIRST=ALPHA,OTHER=ANY,   CL006*\n               CHAR                                               CL006\n         SPACE 1                                                  CL006\nPPREFIX  IKJKEYWD ,                                               CL006\n         SPACE 1                                                  CL006\n         IKJNAME 'PREFIX',SUBFLD=SPREFIX                          CL006\n         SPACE 1                                                  CL006\nPUNIT    IKJKEYWD ,                                               CL006\n         SPACE 1                                                  CL006\n         IKJNAME 'UNIT',SUBFLD=SUNIT                              CL006\n         SPACE 1                                                  CL006\nPVOL     IKJKEYWD ,                                               CL006\n         SPACE 1                                                  CL006\n         IKJNAME 'VOL',SUBFLD=SVOL                                CL006\n         SPACE 5                                                  CL006\nSPREFIX  IKJSUBF ,                                                CL006\nXPREFIX  IKJIDENT 'PREFIX',LIST,MAXLNTH=8,FIRST=ALPHA,            CL006*\n               OTHER=ALPHANUM                                     CL006\n         SPACE 1                                                  CL006\nSUNIT    IKJSUBF ,                                                CL006\n         SPACE 1                                                  CL006\nXUNIT    IKJIDENT 'UNIT',LIST,MAXLNTH=8,OTHER=ALPHANUM,           CL006*\n               FIRST=ALPHANUM                                     CL006\n         SPACE 1                                                  CL006\nSVOL     IKJSUBF ,                                                CL006\n         SPACE 1                                                  CL006\nXVOL     IKJIDENT 'VOLUME',LIST,MAXLNTH=6,FIRST=ALPHANUM,         CL006*\n               OTHER=ALPHANUM                                     CL006\n         SPACE 2                                                  CL006\n         IKJENDP ,                                                CL006\n         EJECT                                                    CL006\nWORK     DSECT ,                                                  UF024\n         DS    18F                 SAVEAREA PORTION               UF024\nWORKAREA DS    D                   START OF SCRATCH WORK AREA     UF024\n         SPACE 1                                                  UF024\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\nINIT     CSECT ,                                                  UF023\n         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01\n         COPY  $HASPGBL\n&MACSPLV SETC  '2'\n&SYSSPLV SETC  '2'\n&VERSION SETC  'SP 2.1.5'\n&FMID    SETC  'HJE2215'\n         $DAS  ,                                                  UF046\n         $MIT  ,                                                  UF046\n         $PCE  ,              NEEDED FOR NJE $HCT                 UF001\n         $JOE\n         $JOT\nNJOTPRFX EQU   (JOTJOES-JOT)/JOESIZE\n         $LCK  ,                                                  UF020\n         $BUFFER                                                  UF020\n         IFGRPL\n         $JCT  ,                                                  UF020\n         $CAT  ,                                                  UF020\n         $TAB\n         $QSE\n         $PDDB                                                    UF021\n         $IOT\n         $JQE\n         $HCT\n         $HDP  ,                                                  2.2.0\n         $HASPEQU\n         IKJCPPL ,                                                ONL02\n         IKJPSCB ,                                                ONL02\n         DCBD DSORG=PS                                              TEC\n         CVT    DSECT=YES                                         CL006\n         QCOMMON\n         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QCOMMON": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02:\\x02:\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 570, "newlines": 570, "modlines": 0, "user": "FILE103"}, "text": "         MACRO\n         QCOMMON &CSECT=NO\n         GBLB  &QPFK      PF-KEY OPTION. SEE QSTART MACRO          ICBC\n         GBLB  &QRACF     RACF OPTION. SEE QSTART MACRO           RNB03\n         GBLC  &QRACUSR   RACF USERID. SEE QSTART MACRO           RNB03\n         GBLC  &QCKPTV    VOLSER OF CHECKPOINT DATASET            UF042\n         GBLC  &QSIDS(7)  SYSTEM IDS FOR CPUS                     UF042\n         GBLC  &QDSPRFX   DEFINES HASPCKPT/HASPACE DSN PREFIX     CL006\n         GBLC  &QPF(24)   PFK DEFINITIONS                         UF042\n         GBLC  &Q1CMD     DEFAULT FIRST COMMAND                   UF042\n         LCLA  &Q1CMDL    DEFAULT FIRST COMMAND LENGTH            UF042\n         LCLA  &RACLEN    LENGTH OF RACF USERID                   RNB03\n         LCLA  &SIZE      BLOCK SIZE FOR CKPT DCB\n         AIF   ('&CSECT' EQ 'YES').CSECT\n         TITLE 'QUEUE COMMAND - COMMON AREA DSECT'\n***********************************************************************\n*                                                                     *\n*   QUEUE COMMAND - COMMON AREA DSECT                                 *\n*                                                                     *\n***********************************************************************\nQCOMMON  DSECT\n.CSECT   ANOP\n***********************************************************************\n*                                                                     *\n*   VECTOR TABLE - ADDRESSES OF AREAS IN QCOMMON                      *\n*                                                                     *\n***********************************************************************\nQVDSPL   DC    A(QDISPLAY)    PTR TO DISPLAY WORK AREA\nQVDAIR   DC    A(QDAIR)       PTR TO DAIR WORK AREA\nQVCKPT   DC    A(QCKPT)       PTR TO CKPT WORK AREA\nQVPRINT  DC    A(QCPRINT)     PTR TO PRINT WORK AREA               FCI*\n         DC    3F'0'          SPARE POINTERS RESERVED FOR FUTURE\nQFRSTSA  DC    A(0)           ADDRESS OF FIRST SAVE AREA\n***********************************************************************\n*                                                                     *\n*   MISCELLANEOUS NUTS AND BOLTS                                      *\n*                                                                     *\n***********************************************************************\nQDWORK   DC    D'0'           SCRATCH DOUBLE WORD                 UF009\nQDWORD   DC    D'0'           SCRATCH DOUBLE WORD                 UF009\nQLOGON   DC    CL8' '         USERID  FROM PSCB                   ONL02\nQLOGONLN DC    F'0'           LENGTH OF USERID                    ONL02\nQCLASSH  DC    0H'0',X'00'    HALFWORD BOUNDARY\nQCLASS   DC    C' '           SEARCH CLASS\nQCODEH   DC    0H'0',X'00'    HALFWORD BOUNDARY\nQCODE    DC    X'00'          SEARCH FUNCTION CODE\nQSUBCMD  DC    A(0)           ADDR OF CURRENT SUBCOMMAND\nQOFF0    DC    H'0'           OFFSET TO SUBCOMMAND\nQLNG0    DC    H'0'           LENGTH OF SUBCOMMAND\nQSUBNAME DC    CL8' '         NAME OF SUBCOMMAND                  UF018\nQOFF1    DC    H'0'           OFFSET TO QPARM1\nQLNG1    DC    H'0'           LENGTH OF QPARM1\nQPARM1   DC    CL8' '         USER SUPPLIED PARAMETER #1\nQOFF2    DC    H'0'\nQLNG2    DC    H'0'\nQPARM2   DC    CL8' '                                 #2\nQOFF3    DC    H'0'\nQLNG3    DC    H'0'\nQPARM3   DC    CL8' '                                 #3\nQOFF4    DC    H'0'\nQLNG4    DC    H'0'\nQPARM4   DC    CL8' '                                 #4\n         SPACE 1                                                  ONL02\nQFLAG1   DC    AL1(*-*)       FLAG BYTE 1                         ONL02\nQFLG1IOE EQU   B'10000000'    I/O ERROR ON SPOOL READ             ONL02\nQFLG1DBC EQU   B'01000000'    ESTAE ENVIRONMENT ESTABLISHED       ONL02\nQFLG1LCL EQU   B'00100000'    Q20 - SEARCHING LOCAL JOE QUE (SP3) ONL02\nQFLG1SDS EQU   B'00010000'    SYSTEM DATA SET JOB (NO JCT)        ONL14\nQFLG1XA  EQU   B'00001000'    RUNNING ON XA SYSTEM                CL\n         SPACE 1                                                  ONL02\nQFLAG2   DC    AL1(*-*)       FLAG BYTE 2                         ONL02\nQFLG2SPN EQU   B'10000000'    NOW SEARCHING SPIN IOT'S            ONL04\nQFLG2PDB EQU   B'01000000'    PDDB FOR DSID WAS FOUND             ONL04\n         SPACE 1                                                  ONL02\nQOLDDSID DC    H'-1'          INITIALIZE TO HEX FFFF--OLD DSID      SBG\nQBLANK   DC    CL132' '       132 BLANKS                          UF003\nQFZONE   DC    C'0'           USED TO CLEAR QFZONES\nQFZONES  DC    C'00000000'    USED FOR NUMERIC CHECK\nQCOUNT   DC    PL3'0'         NUMBER OF ELEMENTS IN QUEUE\nQCOUNTA  DC    PL3'0'         NUMBER OF ELEMENTS IN AWAITING QUEUE\nQCOUNTE  DC    PL3'0'         NUMBER OF ELEMENTS IN EXECUTION QUEUE\nQCOUNTH  DC    PL3'0'         NUMBER OF ELEMENTS IN HOLD QUEUE\nQOFFS    DC    H'0'           START COLUMN FOR FIND\nQOFFE    DC    H'0'           END COLUMN FOR FIND\nQDELIMIT DC    C' '           DELIMITER\nQRSVD    DC    XL15'0'        RSVD\nQPJOBID  DC    F'0'           JOB ID FOR LISTDS     ** THESE TWO FIELDS\nQPDSID   DC    X'FFFF'        DATASET ID FOR LISTDS. MUST BE CONTIG.SBG\nQPOFFSET DC    H'0'           PRINT OFFSET FROM BEGINNING OF RECORD\nQPREC    DC    PL4'0'         CURRENT RECORD COUNT\nQPLNG    DC    H'0'           LENGTH OF COMPARE FIELD FOR FIND\nQPFIND   DC    CL58' '        COMPARE FIELD FOR FIND\nQSYSID   DC    CL8' '         SYSTEM ID TABLE\n* YOU MUST SUPPLY THE NAME OF EACH CPU IN YOUR COMPLEX\n         DC    CL8'&QSIDS(1)' SYSTEM ID FOR SYSTEM 1              UF042\n         DC    CL8'&QSIDS(2)'                      2              UF042\n         DC    CL8'&QSIDS(3)'                      3              UF042\n         DC    CL8'&QSIDS(4)'                      4              UF042\n         DC    CL8'&QSIDS(5)'                      5              UF042\n         DC    CL8'&QSIDS(6)'                      6              UF042\n         DC    CL8'&QSIDS(7)'                      7              UF042\n         SPACE 1                                                  CL006\nQPREFIX  DC    CL8'&QDSPRFX'       DATA SET NAME PREFIX           CL006\n         EJECT\n******************************************************************ONL02\n*                                                                 ONL02\n*  FUNCTION AUTHORIZATION CHECKING FIELDS                         ONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\nQACODE   DC    AL1(*-*)            AUTHORIZATION CK REQUEST CODE  ONL02\nQAFLAGS  DC    AL1(QAFXDFLT)       AUTHORIZATION FLAGS            ONL02\nQASCFLGS DC    AL1(*-*)            SUB-COMMAND TYPE FLAGS         ONL02\nQASCUSER DC    AL1(*-*)            SUB-COMMAND USER FLAGS         ONL02\nQAHELP   DC    AL1(*-*)            HELP DISPLAY CONTROL FLAGS     ONL02\n         DC    X'00'               RESERVED                       ONL02\n         DC    X'00'               RESERVED                       ONL02\nQAUSER   DC    A(*-*)              USER FLAGS                     ONL02\nQAUSER1  DC    A(*-*)              USER WORD 1                    ONL02\nQAUSER2  DC    A(*-*)              USER WORD 2                    ONL02\n         SPACE 1                                                  ONL02\n*--------EXTRACT *-*,MF=L          EXTRACT PARAMETER LIST         ONL02\nQAEXTLST EXTRACT *-*,MF=L          EXTRACT PARAMETER LIST         ONL02\n         SPACE 2                                                  ONL02\n*                                                                 ONL02\n*  FUNCTION CODES (QACODE) USED FOR AUTHORIZATION CHECK REQUESTS  ONL02\n*                                                                 ONL02\n         SPACE 1                                                  ONL02\nQANULL   EQU   0                   NULL REQUEST                   ONL02\nQASTART  EQU   1                   QUEUE COMMAND START-UP         ONL02\nQAEND    EQU   2                   QUEUE COMMAND TERMINATION      ONL02\nQAALLOC  EQU   3                   DATASET ALLOCATION/UNALLOCATIONONL02\nQABEFOPN EQU   4                   BEFORE CKPT/SPOOL OPEN         ONL02\nQAAFTOPN EQU   5                   AFTER CKPT/SPOOL OPEN          ONL02\nQASPOOL  EQU   6                   READSPC RTN (AFTER SPOOL I/O)  ONL02\nQAPARSE  EQU   7                   QUEUE SUBCOMMAND AUTHORIZATION ONL02\nQAFINDJ  EQU   8                   FINDJOB RTN FOR JOB            ONL02\nQAJCL    EQU   9                   JCL CMD FOR JOB                ONL02\nQAJLOG   EQU   10                  JLOG CMD FOR JOB               ONL02\nQAJMSG   EQU   11                  JMSG CMD FOR JOB               ONL02\nQALIST   EQU   12                  LIST CMD FOR JOB AND DSID      ONL02\nQAJHIST  EQU   13                  JHIST CMD FOR JOB              ONL02\nQADD     EQU   14                  DD CMD FOR JOB                 ONL02\nQAPDDB   EQU   15                  PDDB CMD FOR JOB               ONL02\nQASYSOUT EQU   16                  DEL/REQ/CAN CMDS FOR JOB       ONL02\nQASYSLOG EQU   17                  AUTHORIZATION TO LOOK AT SYSLOGONL02\n         EJECT ,                                                  ONL02\n*                                                                 ONL02\n*  QAFLAGS BIT DEFINITIONS  (AUTHORIZATION FLAGS)                 ONL02\n*                                                                 ONL02\n         SPACE 1                                                  ONL02\nQAFXACTV EQU   B'10000000'         MAY DISPLAY ACTIVE LISTS       ONL02\nQAFXBLOG EQU   B'01000000'         MAY DISPLAY BACKLOG LISTS      ONL02\nQAFXSSSM EQU   B'00100000'         MAY USE CAN, DEL, AND REQ      ONL02\nQAFXSLOG EQU   B'00010000'         MAY LOOK AT SYSLOG             ONL02\nQAFXEXEC EQU   B'00001000'         MAY ISSUE TSO CMDS FROM QUEUE  ONL02\nQAFXOPER EQU   B'00000100'         USER HAS OPER AUTHORITY        ONL02\nQAFXSYSP EQU   B'00000010'         USER HAS JES2 SYS-PGMR AUTH    ONL02\n         SPACE 1                                                  ONL02\nQAFXOPSP EQU   QAFXOPER+QAFXSYSP   COMBINATION OF OPER AND SYSP   ONL02\nQAFXDFLT EQU   QAFXACTV+QAFXBLOG+QAFXSSSM+QAFXSLOG  DEFAULT AUTH  ONL02\n         SPACE 2                                                  ONL02\n*                                                                 ONL02\n*  QASCFLGS BIT DEFINITIONS  (SUB-COMMAND TYPE FLAGS)             ONL02\n*                                                                 ONL02\n         SPACE 1                                                  ONL02\nQASXACTV EQU   QAFXACTV            ACTIVE DISPLAY                 ONL02\nQASXBLOG EQU   QAFXBLOG            BACKLOG DISPLAY                ONL02\nQASXSSSM EQU   QAFXSSSM            CMD USES SUB-SYSTEM INTERFACE  ONL02\nQASXSLOG EQU   QAFXSLOG            SYSLOG COMMAND                 ONL02\nQASXEXEC EQU   QAFXEXEC            GIVES CONTROL TO OTHER PROGAMS ONL02\nQASXOPER EQU   QAFXOPER            OPERATOR AUTHORITY NEEDED      ONL02\nQASXSYSP EQU   QAFXSYSP            JES2 SYS-PGMR AUTHORITY NEEDED ONL02\n         SPACE 2                                                  ONL02\n*                                                                 ONL02\n*  QAHELP BIT DEFINITIONS  (HELP DISPLAY CONTROL FLAGS)           ONL02\n*                                                                 ONL02\n         SPACE 1                                                  ONL02\nQAHXACTV EQU   QAFXACTV            SHOW HELP FOR ACTIVE DISPLAYS  ONL02\nQAHXBLOG EQU   QAFXBLOG            SHOW HELP FOR BACKLOG DISPLAYS ONL02\nQAHXSSSM EQU   QAFXSSSM            SHOW HELP FOR SSSM COMMANDS    ONL02\nQAHXSLOG EQU   QAFXSLOG            SHOW HELP FOR SYSLOG           ONL02\nQAHXEXEC EQU   QAFXEXEC            SHOW HELP FOR TSO/EXEC COMMANDSONL02\nQAHXOPER EQU   QAFXOPER            SHOW HELP FOR OPERATOR AUTH    ONL02\nQAHXSYSP EQU   QAFXSYSP            SHOW HELP FOR SYS PGMR AUTH    ONL02\n         EJECT ,                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   DATASET ALLOCATION FIELDS                                         *\n*      (ADAPTED FROM SYS1.MACLIB (IKJDAPL,IKJDAP08,0C,18))            *\n*                                                                     *\n***********************************************************************\nQDAIR    DS    0D             START OF DAIR WORK AREAS\nDAIRECB  DC    F'0'           ECB USED BY DAIR\nDAIRFLAG DC    X'00'          FLAG USED BY ALLOCATE SUBROUTINE\n         DC    XL3'0'         DEAD SPACE FOR ALLIGNMENT\n***********************************************************************\n*    THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST   *\n*    (DAPL) IS A LIST OF ADDRESSES PASSED FROM THE INVOKER TO DAIR    *\n*    VIA REGISTER 1                                                   *\n***********************************************************************\nDAPLUPT  DC    A(0)     PTR TO UPT\nDAPLECT  DC    A(0)     PTR TO ECT\nDAPLECB  DC    A(DAIRECB) PTR TO CP'S ECB\nDAPLPSCB DC    A(0)     PTR TO PSCB\nDAPLDAPB DC    A(0)     PTR TO DAIR PARAMETER BLOCK\n***********************************************************************\n*                                                                     *\n*   ALLOCATE DDNAME(W) DSNAME(X) SHR UNIT(Y) VOLUME(Z)                *\n*                                                                     *\n***********************************************************************\nDA08CD   DC    X'0008'  DAIR ENTRY CODE\nDA08FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\n         DC    X'00'\nDA08DARC DC    H'0'     DYN ALLOC RETURN CODE\nDA08CTRC DC    H'0'     CATALOG RETURN CODE\nDA08PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA08DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE\n* YOU MUST SUPPLY THE DEFAULT UNIT AND VOLUME SERIAL FOR YOUR SYSTEM\nDA08UNIT DC    CL8'SYSALLDA' UNITNAME FOR SYS1.HASPCKPT\nDA08SER  DC    CL8'&QCKPTV' VOLUME SERIAL FOR SYS1.HASPCKPT       UF042\nDA08BLK  DC    F'0'     DATA SET  AVERAGE RECORD LENGTH\nDA08PQTY DC    F'0'     PRIMARY SPACE QUANTITY\nDA08SQTY DC    F'0'     SECONDARY SPACE QUANTITY\nDA08DQTY DC    F'0'     DIRECTORY BLOCK QUANTITY\nDA08MNM  DC    CL8' '   MEMBER NAME\nDA08PSWD DC    CL8' '   PASSWORD\nDA08DSP1 DC    X'08'    DATA SET STATUS FLGS - SHR\nDA08DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP\nDA08DPS3 DC    X'08'    DATA SET CONDITIONAL DISPOSITION - KEEP\nDA08CTL  DC    X'00'    FLAGS TO CONTROL ACTIONS TAKEN BY DAIR\n         DC    XL3'0'   RESERVED\nDA08DSO  DC    X'00'    DSORG\nDA08ALN  DC    CL8' '   ATTR-LIST-NAME                           C99236\n***********************************************************************\n*                                                                     *\n*   FREE DDNAME(XXXXXXXX)                                             *\n*                                                                     *\n***********************************************************************\nDA18CD   DC    X'0018'  DAIR ENTRY CODE\nDA18FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\n         DC    X'00'\nDA18DARC DC    H'0'     DYNAMIC ALLOCATION RETURN CODE\nDA18CTRC DC    H'0'     CATALOG RETURN CODE AREA\nDA18PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA18DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE\nDA18MNM  DC    CL8' '   MEMBER NAME\nDA18SCLS DC    CL2' '   SYSOUT CLASS DESIRED WHEN UNALLOCATING  A\n*                       SYSOUT DATA SET\nDA18DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP\nDA18CTL  DC    X'10'    FLAGS FOR SPECIAL DAIR PROCESSING\nDA18JBNM DC    CL8' '   IGNORED AS OF OS VS/2 RELEASE 2       Y02670\n******************************************************************UF036\n*                                                                 UF036\n*   ALLOCATE DDNAME(W) SYSOUT(X)                                  UF036\n*                                                                 UF036\n******************************************************************UF036\nDA30CD   DC    X'0030'  DAIR ENTRY CODE                           UF036\nDA30FLG  DC    X'00'    FN TO BE PERFORMED WHEN RET CODE IS 0     UF036\n         DC    X'00'                                              UF036\nDA30DARC DC    H'0'     DYN ALLOC RETURN CODE                     UF036\n         DC    H'0'     RESERVED                                  UF036\nDA30PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE   UF036\nDA30DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE              UF036\nDA30UNIT DC    CL8' '   UNIT NAME                                 UF036\nDA30SER  DC    CL8' '   VOLUME SERIAL                             UF036\nDA30BLK  DC    F'0'     DATA SET  AVERAGE RECORD LENGTH           UF036\nDA30PQTY DC    F'0'     PRIMARY SPACE QUANTITY                    UF036\nDA30SQTY DC    F'0'     SECONDARY SPACE QUANTITY                  UF036\nDA30PGNM DC    CL8' '   WRITER NAME                               UF036\nDA30FORM DC    CL4' '   FORM NUMBER                               UF036\nDA30OCLS DC    CL2' '   SYSOUT CLASS                              UF036\n         DC    X'00'    RESERVED                                  UF036\nDA30CTL  DC    X'00'    FLAGS TO CONTROL ACTIONS TAKEN BY DAIR    UF036\nDA30ALN  DC    CL8' '   ATTR-LIST-NAME                            UF036\n         SPACE 2                                                  CL006\n***********************************************************************\n*                                                                     *\n*        PARAMETER LIST FOR CALL OF IKJPARS                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPPLUPT   DC    A(*-*)              ADDR OF UPT                    CL006\nPPLECT   DC    A(*-*)              ADDR OF ECT                    CL006\nPPLECB   DC    A(*-*)              ADDR OF CP'S ECB               CL006\nPPLPCL   DC    A(*-*)              ADDR OF PARAMETER CONTROL LIST CL006\nPPLANS   DC    A(PARSBACK)         ADDR OF PDL POINTER            CL006\nPPLCBUF  DC    A(*-*)              ADDR OF THE COMMAND BUFFER     CL006\nPPLUWA   DC    A(0)                ADDR OF WORK AREA              CL006\nPARSBACK DC    A(*-*)              ADDR OF FIRST PDL              CL006\n         EJECT\n***********************************************************************\n*                                                                     *\n*   CHECKPOINT WORK AREAS                                             *\n*                                                                     *\n***********************************************************************\n* NOTE - BLOCKSIZES ARE INSTALLATION DEPENDENT\nQCKPT    DS    0D\nQCTGML   DC    A(0)                NUMBER OF TGM BLOCKS           UF046\nQCTGMA   DC    A(0)                ADDRESS OF TGM IOAREA          UF046\nQCTNUMTG DC    A(0)                NUMBER OF TRACK GROUPS ON      CL001+\n                                    ACTIVE VOLUMES                CL001\nQCJIXL   DC    A(0)                                               UF020\nQCJIXA   DC    A(0)           ADDRESS OF JIX IOAREA               UF020\nQCJQEXA  DC    A(0)                ADDR OF JQE EXTENSIONS\nQCTDASL  DC    A(0)                NUMBER OF DAS CHKPT BLOCKS\nQCTDASA  DC    A(0)                ADDR OF FIRST DAS BLOCK\nQCPSTL   DC    A(0)                NUMBER OF PST CHKPT BLOCKS\nQCPSTA   DC    A(0)                ADDR OF FIRST PST BLOCK\nQCJQTA   DC    A(0)           ADDRESS OF JQT IOAREA\nQCJOTA   DC    A(0)           ADDRESS OF JOT IOAREA\nQCJCTA   DC    A(0)           ADDRESS OF JCT IOAREA\nQCIOTA   DC    A(0)           ADDRESS OF IOT IOAREA\nQCBLKA   DC    A(0)           ADDRESS OF DATASET BLOCK IOAREA\nQCJQTL   DC    F'0'           ADDRESS OF FIRST CKPT REOCRD\nQCJQEA   DC    A(0)           ADDR OF CURRENT JQE\nQCJOTL   DC    F'0'           COUNT OF RECORDS ON CKPT DS\nQCDECBPT DC    A(0)           ADDRESS OF DECB WORK AREA           UF039\nQCPDDB1  DC    F'0'           OFFSET IN IOT TO FIRST PDDB\nQCTRAK   DS    0F             DISK ADDR IN THE FORM MTTR\nQCTRAKM  DC    X'0'           EXTENT NUMBER\nQCTRAKTT DC    X'0000'        ABSOLUTE TRACK NUMBER\nQCTRAKR  DC    X'0'           RECORD NUMBER\n         DC    X'0'           EXTRA SPACE NEEDED FOR HEX CONVERT\nQCDAD    DS    0XL8           DISK ADDR IN THE FORM MBBCCHHR\nQCDADM   DC    X'0'           EXTENT NUMBER\nQCDADBB  DC    X'0000'        BIN NUMBER\nQCDADCC  DC    X'0000'        CYLINDER NUMBER\nQCDADHH  DC    X'0000'        HEAD NUMBER\nQCDADR   DC    X'0'           RECORD NUMBER\n         DC    XL3'0'         DEAD SPACE TO GET BACK TO FULLWORD\nQCJQHEAD DC    A(0)           OFFSET TO JQE HEADERS\n         DS    0F\nQCCREC   DC    PL4'0'         CURRENT RECORD NUMBER\nQCCPTR   DC    A(0)           CURRENT TABLE ADDRESS\nQCHREC   DC    PL4'0'         HIGHEST RECORD NUMBER\nQCHPTR   DC    A(0)           HIGHEST TABLE ADDRESS\nQCSTART  DC    A(0)           ADDRESS OF TABLE START\nQCEND    DC    A(0)           ADDRESS OF TABLE END\nQCHLINE  DS    0CL80          HEADING LINE FOR LISTDS\n         DC    C'JOB '\nQCJNAME  DC    CL8' '         JOBNAME\n         DC    C', DSID '\nQCDSNO   DC    CL8' '         DATASET ID NUMBER\n         DC    C', REC #       1'\n         DC    CL40' '\nQCLRECL  DC    H'0'           LRECL FOR SAVE\nQCRECFM  DC    X'0'           RECFM FOR SAVE\nQCSPOOLS DC    36F'0'         LIST OF DCBS FOR HASPACE\nQCTRKCYL DC    36F'0'         LIST OF TRACKS/CYLINDER FOR EACH DCB\n         EJECT\n&SIZE    SETA  4096\n*ASPCKPT DCB   DDNAME=HASPCKPT,DSORG=PS,MACRF=(RCP),                  X\n*              RECFM=U,BLKSIZE=&SIZE,NCP=4                        UF039\nHASPCKPT DCB   DDNAME=HASPCKPT,DSORG=PS,MACRF=(RCP),                   X\n               RECFM=U,BLKSIZE=&SIZE,NCP=4                        UF039\n         EJECT\n*ASPACE  DCB   DDNAME=HASPACE1,DSORG=DA,MACRF=(RIC),OPTCD=A,          X\n*              RECFM=F\nHASPACE  DCB   DDNAME=HASPACE1,DSORG=DA,MACRF=(RIC),OPTCD=A,           X\n               RECFM=F\nQCDCBL   EQU   *-HASPACE      LENGTH OF HASPACE DCB\n         EJECT\n*COUT    DCB   DDNAME=HASPSAVE,DSORG=PS,MACRF=(PM),BUFL=8192\nQCOUT    DCB   DDNAME=HASPSAVE,DSORG=PS,MACRF=(PM),BUFL=8192\n         EJECT\n*        READ  HDECB1,SF,HASPCKPT,,&SIZE,MF=L\n         READ  HDECB1,SF,HASPCKPT,,&SIZE,MF=L\nHDECB1L  EQU   *-HDECB1            LENGTH OF DECB                 UF039\n         SPACE 3\n*        READ  HDECB2,DI,HASPACE,,0,0,QCDAD,MF=L\n         READ  HDECB2,DI,HASPACE,,0,0,QCDAD,MF=L\n         SPACE 3\n*COPEN   OPEN  (QCOUT,OUTPUT),MF=L\nQCOPEN   OPEN  (QCOUT,OUTPUT),MF=L\n         SPACE 3\n*OCKPT   OPEN  (HASPCKPT),MF=L\nHOCKPT   OPEN  (HASPCKPT),MF=L\n         EJECT\n********************************************************************TEC\n*                                                                   TEC\n*   ISPF  WORKAREA                                                  TEC\n*                                                                   TEC\n********************************************************************TEC\nQSPF     DC    C'N'           \"Y\": RUNNING UNDER ISPF               TEC\nSPFUSER  DC    C'SPFUSER '                                          TEC\nSPFTEST  ENQ   (,,,,),MF=L    ISPF ENQUEUE (LIST FORM)              TEC\n@ISPLINK DS    F              ADDRESS OF ISPLINK                    TEC\nVDEFINE  CALL  ,(,,,,),MF=L                                         TEC\nIDISPLAY CALL  ,(,),MF=L                                            TEC\nVDELETE  CALL  ,(,),MF=L                                            TEC\n#VDEFINE DC    C'VDEFINE'                                           TEC\n#VDELETE DC    C'VDELETE'                                           TEC\n#DISPLAY DC    C'DISPLAY'                                           TEC\n#CHAR    DC    C'CHAR'                                              TEC\n#ALL     DC    C'* '                                                TEC\n#QDTLINE DC    C'QDTLINE '                                          TEC\n#QDHLINE DC    C'QDHLINE '                                          TEC\n#QDREPLY DC    C'QDREPLY '                                          TEC\n#QDLINE1 DC    C'QDLINE1 '                                          TEC\nQPANEL   DC    C'QUEUEM2 '    NAME OF PANEL TO BE USED BY ISPF      TEC\nL63      DC    F'63'          LENGTH OF QDTLINE AND QDREPLY         TEC\nLBIG     DC    AL4(40*80)     LENGTH OF DISPLAY AREA                TEC\nL80      DC    F'80'          LENGTH OF QDHLINE                     TEC\n         EJECT                                                      TEC\n***********************************************************************\n*                                                                  FCI*\n*   PRINT WORKAREA                                                 FCI*\n*                                                                  FCI*\n***********************************************************************\nQCPRINT  DS    0D                                                  FCI*\nQPOFF0   DC    H'0'           OFFSET TO SUBCOMMAND                 FCI*\nQPLNG0   DC    H'0'           LENGTH OF SUBCOMMAND                 FCI*\nQPSUBNME DC    CL8'PRINT'     NAME OF SUBCOMMAND                   FCI*\nQPOFF1   DC    H'0'           OFFSET TO QPPARM1                    FCI*\nQPLNG1   DC    H'0'           LENGTH OF QPPARM1                    FCI*\nQPPARM1  DC    CL8' '         USER SUPPLIED PARAMETER #1           FCI*\nQPOFF2   DC    H'0'                                                FCI*\nQPLNG2   DC    H'0'                                                FCI*\nQPPARM2  DC    CL8' '                                 #2           FCI*\nQPOFF3   DC    H'0'                                                FCI*\nQPLNG3   DC    H'0'                                                FCI*\nQPPARM3  DC    CL8' '                                 #3           FCI*\nQPOFF4   DC    H'0'                                                FCI*\nQPLNG4   DC    H'0'                                                FCI*\nQPPARM4  DC    CL8' '                                 #4           FCI*\nQPHEAD1  DC    CL1'1'                                              FCI*\n*        123456789.123456789.123456789.123456789.'                 FCI*\n DC CL40'QUEUE HARDCOPY LOG  USER=XXXXXXXX  DATE='                 FCI*\n DC CL40'YY.DDD  HH:MM:SS DAY MON DD,19XX   XXXXX'                 FCI*\n DC CL52' '                                                       UF003\n         ORG   QPHEAD1+26                                          FCI*\nQPUSER   DS    CL8           FOR USERID                            FCI*\n         ORG   QPHEAD1+41                                          FCI*\nQPDATE   DS    CL32                                                FCI*\n         ORG   QPHEAD1+75                                          FCI*\nQPPAGE#  DS    CL6                                                 FCI*\n         ORG   ,                                                   FCI*\nQPHEAD2  DS    0CL81                                               FCI*\n         DC    C' ',80C'-'                                         FCI*\n         DC    52C' '                                             UF003\nQPDETAIL DC    CL1' '         ASA CONTROL CHARACTER                FCI*\nQPLINE   DC    CL132' '       TO HOLD PRINT LINE                  UF003\nQPPAGE   DC    PL3'1'                                              FCI*\nQPFLAG   DC    XL1'00'                                             FCI*\nHARDCPY  EQU   X'80'                                               FCI*\nQPRSAVE  DS    CL63           SAVE AREA TO HOLD SUBTITLE INFO      FCI*\nQPPWORK  DC    6F'0'          SPARE WORK ZONE                      FCI*\n         DS    0F                                                  FCI*\n*HASPPRNT DCB  DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*\n*              RECFM=FA,LRECL=133,BLKSIZE=133                     UF003\nHASPPRNT DCB   DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*X\n               RECFM=FA,LRECL=133,BLKSIZE=133                     UF003\n         EJECT ,                                                  ONL02\n         AIF   (NOT &QRACF).RNB03A                                RNB03\n******************************************************************RNB03\n*                                                                *RNB03\n*   RACF FIELDS                                                  *RNB03\n*                                                                *RNB03\n******************************************************************RNB03\n         SPACE 1                                                  RNB03\n&RACLEN  SETA  K'&QRACUSR       LENGTH OF NEW RACF USERID         RNB03\nQNEWUSR  DC    AL1(&RACLEN),CL8'&QRACUSR'  NEW USERID             RNB03\nQUSRSAV  EQU   *,9                         OLD USERID             RNB03\n         DC    AL1(0),CL8' '               OLD USERID             RNB03\nQRACNMXP DC    CL8'QUEUEXP'       ENTITY FOR RACHECK FOR XP CMD   RNB03\nQRACNMXD DC    CL8'QUEUEXDS'      ENTITY FOR RACHECK FOR XDS CMD  RNB03\n         SPACE 1                                                  RNB03\n*RACHECK RACHECK ENTITY=QRACNMXP,CLASS='APPL',ATTR=READ,          RNB03\n*              APPL=QRACNMXP,MF=L                                 RNB03\nQRACHECK RACHECK ENTITY=QRACNMXP,CLASS='APPL',ATTR=READ,          RNB03X\n               APPL=QRACNMXP,MF=L                                 RNB03\n.RNB03A  ANOP                                                     RNB03\n***********************************************************************\n*                                                                     *\n*   LIST FORM OF TPUT/TGET                                            *\n*                                                                     *\n***********************************************************************\nQTPUT    TPUT  QDSCREEN,QDSLNG,FULLSCR,MF=L\nQTGET    TGET  QDREPLY,63,MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*   DISPLAY WORK FIELDS                                               *\n*                                                                     *\n***********************************************************************\nQDISPLAY DS    0D             START OS DISPLAY WORK AREA\nQDOSZR0  DC    F'0'           ORIG SCREEN DEPTH                   UF003\nQDOSZR1  DC    F'0'           ORIG SCREEN LINESZ                  UF003\nQDLNELEN DC    H'80'          LENGTH OF DISPLAY LINE              UF003\nQDLNES   DC    PL2'21'        LINES PER SCREEN                    UF003\nQDSCRLEN DC    AL2(21*80)     LEN OF DISPLAY AREA                 UF003\nQDSCRPLN DC    AL2(21*80+QDLINE1-QDSCREEN)   WHAT A PAIN          UF003\n         DS    0D                                                 UF003\n         AIF   (NOT &QPFK).PFK1\nPFREPLY  DS    0CL69                                               ICBC\nPFCODE   DC    CL6' '                                              ICBC\nPFTXT    DC    CL63' '                                             ICBC\n.PFK1    ANOP\nQDMSGA   DC    A(0)           ADDRESS OF MESSAGE TO BE DISPLAYED\nQDMLNG   DC    H'0'           MESSAGE LENGTH\nQDMSG    DC    CL80' '        WORK AREA FOR BUILDING OUTPUT LINE\n&Q1CMDL  SETA  K'&Q1CMD       LENGTH OF FIRST COMMAND             UF042\nQDRLNG   DC    AL2(&Q1CMDL)   REPLY LENGTH                        UF018\nQDREPLY  DC    CL63'&Q1CMD'   TERMINAL USER REPLY                 UF018\n         DC    C' '           RESERVED\nQDNEXT   DC    H'0'           CURRENT LINE NUMBER ON SCREEN\n         DC    C' '           RESERVED\nQDSCREEN DS    0C             DISPLAY SCREEN\n         DC    X'27'          CONTROL                             UF003\nQDSCRO1  DC    X'F5'          ERASE/WRITE ALTERNATE (132 COL)     UF003\n         DC    X'C1115D7F1140403C404000' CLEAR SCREEN\n         DC    C'QUEUE COMMAND -' TITLE LINE\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD\nQDTLINE  DC    CL63' '        SUBTITLE\n         DC    X'1DF0'        TERMINATE INPUT FIELD\n         DC    X'11'          SET BUFFER ADDRESS                  UF003\nQDSCRO2  DC    X'C150'        (2,1)                               UF003\nQDHLINE  DC    CL80' '        HEADING LINE\n         DC    X'11'          SET BUFFER ADDRESS                  UF003\nQDSCRO3  DC    X'5CF0'        (24,1)                              UF003\n         DC    C'REPLY -'     REPLY PROMPT\n*        DC    X'1DC8115DF71DF0' 3270 CONTROL CHARACTERS          UF003\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD      UF003\n         DC    X'13'          SET CURSOR ADDRESS                  UF003\n         DC    X'11'          SET BUFFER ADDRESS                  UF003\nQDSCRO4  DC    X'5DF7'        (24,72)                             UF003\n         DC    X'1DF0'        TERMINATE INPUT FIELD               UF003\nQDPLUS   DC    C' '           INDICATES MORE TO BE DISPLAYED\n         DC    X'11'          SET BUFFER ADDRESS                  UF003\nQDSCRO5  DC    X'C260'        (3,1)                               UF003\nQDLINE1  DC    40CL80' '      MESSAGE TEXT AREA (FOR 40X80 MAX)   UF003\n*DLINE1  DC    CL80' '        FIRST MESSAGE LINE ON SCREEN        UF003\n*        DC    20CL80' '      NEXT 20 LINES                       UF003\n*        DC    X'115CF813'    TCAM REQUIRES CURSOR AT END OF STR  UF003\nQDLINEND EQU   *              END OF LINE BUFFERS                 UF003\nQDSLNG   EQU   *-QDSCREEN     LENGTH OF SCREEN BUFFER\nQDOVER   DC    X'00'          PAGE OVERFLOW INDICATOR\n         SPACE 3                                                  UF043\n         AIF  (NOT &QPFK).PFK3                                     ICBC\n* PF-KEY DEFINITIONS                                               ICBC\nQDPFKTAB EQU   *                                                   ICBC\n         DC    CL8'&QPF(1)'                                       UF043\n         DC    CL8'&QPF(2)'                                       UF043\n         DC    CL8'&QPF(3)'                                       UF043\n         DC    CL8'&QPF(4)'                                       UF043\n         DC    CL8'&QPF(5)'                                       UF043\n         DC    CL8'&QPF(6)'                                       UF043\n         DC    CL8'&QPF(7)'                                       UF043\n         DC    CL8'&QPF(8)'                                       UF043\n         DC    CL8'&QPF(9)'                                       UF043\n         DC    CL8'&QPF(10)'                                      UF043\n         DC    CL8'&QPF(11)'                                      UF043\n         DC    CL8'&QPF(12)'                                      UF043\n.PFK3    ANOP                                                      ICBC\n         EJECT\n***********************************************************************\n*                                                                     *\n*   SAVE AREA FOR GETMAIN/FREEMAIN                                    *\n*                                                                     *\n***********************************************************************\nQGETAREA DC    3F'0'\nQGETA1   EQU   QGETAREA+0\nQGETA2   EQU   QGETAREA+4\nQGETA3   EQU   QGETAREA+8\nQGETLNGH DC    F'65536',2F'0'\nQGETL2   EQU   QGETLNGH+4\nQGETL3   EQU   QGETLNGH+8\nQFREE    FREEMAIN L,LA=QGETLNGH,A=QGETAREA,MF=L\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QUECMDS": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "QUEPROF": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x003\\x003\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "QUEUE": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xf9\\x00\\xf9\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 249, "newlines": 249, "modlines": 0, "user": "FILE103"}, "text": "QUEUE    TITLE 'QUEUE COMMAND - MAINLINE MODULE'                  ONL01\nQUEUE    QSTART MAIN=YES           START QUEUE CSECT ASSEMBLY     ONL01\n***********************************************************************\n* RNB CHANGES:                                                        *\n*      (1) RNB01 - FIX FINAL TPUT MESSAGE TO WORK WITH SPF TCAM       *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*   CALL - INITIALIZATION                                             *\n*                                                                     *\n***********************************************************************\n         L     R15,=V(INIT)   ADDR OF INIT\n         BALR  R14,R15        GO TO IT\n         LA    R10,LOOP       INTERRUPTED RETURN ADDRESS\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n******************************************************************UF003\n*                                                                 UF003\n*   INITIALIZE 3270 SCREEN VARIABLES                              UF003\n*                                                                 UF003\n******************************************************************UF003\n         GTSIZE ,             READ 3270 SCREEN SIZE               UF003\n         STM   R0,R1,QDOSZR0  SAVE FOR LATER RESTORE              UF003\n         LTR   R0,R0          DISPLAY DEVICE?                     UF003\n         BZ    NOTDISP        NO, ABORT                           UF003\n         SPACE 1                                                  UF003\n         CLI   QSPF,C'Y'      RUNNING UNDER ISPF?                   TEC\n         BE    NOVTAM         YES, SKIP VTAM CODE.                  TEC\n         STFSMODE ON,INITIAL=YES  TELL VTAM ABOUT FULLSCREEN MODE UF003\n         SPACE 1                                                  UF003\nNOVTAM   DS    0H                                                   TEC\n         LM    R0,R1,QDOSZR0  RESTORE DESTROYED REGS              UF003\n         CH    R1,=H'80'      POSSIBLE MODEL 2 OR 4 TERMINAL?     UF003\n         BNE   TRYM5          NO, TRY FOR MODEL 5                 UF003\n         CH    R0,=H'43'      MODEL 4 TERMINAL?                   UF003\n         BE    MODEL4         YES, SET IT                         UF003\n         CH    R0,=H'32'      MODEL 3 TERMINAL?                   UF003\n         BNE   SETM2          NO, SET MODEL 2 DEFAULT             UF003\n         SPACE 1                                                  UF003\nMODEL3   MVC   QDLNELEN,=H'80'     LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'29'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'29'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'29'                           UF043\n         MVC   QDSCRLEN,=AL2(29*80)  SCR LENGTH                   UF003\n         MVC   QDSCRPLN,=AL2(29*80+QDLINE1-QDSCREEN) TPUT LEN     UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C150'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'E6F0'    (32,1)                         UF003\n         MVC   QDSCRO4,=X'E7F7'    (32,72)                        UF003\n         MVC   QDSCRO5,=X'C260'    (3,1)                          UF003\n         MVI   QPANEL+6,C'3'       USE MODEL 3 ISPF PANEL.          TEC\n         B     SPFDEF              JOIN COMMON CODE                 TEC\n         SPACE 1                                                  UF003\nMODEL4   MVC   QDLNELEN,=H'80'     LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'40'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'40'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'40'                           UF043\n         MVC   QDSCRLEN,=AL2(40*80)  SCR LENGTH                   UF003\n         MVC   QDSCRPLN,=AL2(40*80+QDLINE1-QDSCREEN) TPUT LEN     UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C150'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'F460'    (43,1)                         UF003\n         MVC   QDSCRO4,=X'F5E7'    (43,72)                        UF003\n         MVC   QDSCRO5,=X'C260'    (3,1)                          UF003\n         MVI   QPANEL+6,C'4'       USE MODEL 4 ISPF PANEL.          TEC\n         B     SPFDEF              JOIN COMMON CODE                 TEC\n         SPACE 1                                                  UF003\nTRYM5    CH    R1,=H'132'     POSSIBLE MODEL 5 TERMINAL?          UF003\n         BNE   SETM2          NO, FORCE MODEL 2 DEFAULT           UF003\n         CH    R0,=H'27'      ACTUAL MODEL 5?                     UF003\n         BNE   SETM2          NO, FORCE MODEL 2 DEFAULT           UF003\n         SPACE 1                                                  UF003\nMODEL5   MVC   QDLNELEN,=H'132'    LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'24'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'24'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'24'                           UF043\n         MVC   QDSCRLEN,=AL2(24*132)  SCR LENGTH                  UF003\n         MVC   QDSCRPLN,=AL2(24*132+QDLINE1-QDSCREEN) TPUT LEN    UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C2C4'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'F5E8'    (27,1)                         UF003\n         MVC   QDSCRO4,=X'F66F'    (27,72)                        UF003\n         MVC   QDSCRO5,=X'C4C8'    (3,1)                          UF003\n         MVI   QPANEL+6,C'5'       USE MODEL 5 ISPF PANEL.          TEC\n         B     SPFDEF              JOIN COMMON CODE                 TEC\n         SPACE 1                                                  UF003\nSETM2    CLI   QSPF,C'Y'      RUNNING UNDER ISPF?                   TEC\n         BE    SPFDEF         YES, BYPASS VTAM CODE.                TEC\n         STSIZE SIZE=80,LINE=24  FORCE MODEL 2 DEFAULT              TEC\n         SPACE 1                                                  UF003\n         B     LOOP           GO TO PROCESS LOOP                  UF003\n         SPACE 1                                                  UF003\nNOTDISP  TPUT  NOTDSPL,L'NOTDSPL SEND MESSAGE TO USER             UF003\n         B     EXIT2          AND RETURN TO CALLER                UF003\n         SPACE 1                                                  UF003\nNOTDSPL  DC    C'QUEUE COMMAND REQUIRES DISPLAY TERMINAL'         UF003\n         EJECT ,                                                  UF003\n********************************************************************TEC\n*                                                                   TEC\n*        INITIALIZE ISPF ENVIRONMENT                                TEC\n*                                                                   TEC\n********************************************************************TEC\nSPFDEF   CLI   QSPF,C'Y'      RUNNING UNDER ISPF?                   TEC\n         BNE   LOOP           NO, CONTINUE.                         TEC\n         L     R15,@ISPLINK   LOAD ADDRESS OF ISPF ROUTINE.         TEC\n         CALL  (15),(#VDEFINE,#QDTLINE,QDTLINE,#CHAR,L63),VL,       TECX\n               MF=(E,VDEFINE)                                       TEC\n         L     R15,@ISPLINK   LOAD ADDRESS OF ISPF ROUTINE.         TEC\n         CALL  (15),(#VDEFINE,#QDHLINE,QDHLINE,#CHAR,L80),VL,       TECX\n               MF=(E,VDEFINE)                                       TEC\n         L     R15,@ISPLINK   LOAD ADDRESS OF ISPF ROUTINE.         TEC\n         CALL  (15),(#VDEFINE,#QDLINE1,QDLINE1,#CHAR,LBIG),VL,      TECX\n               MF=(E,VDEFINE)                                       TEC\n         L     R15,@ISPLINK   LOAD ADDRESS OF ISPF ROUTINE.         TEC\n         CALL  (15),(#VDEFINE,#QDREPLY,QDREPLY,#CHAR,L63),VL,       TECX\n               MF=(E,VDEFINE)                                       TEC\n***********************************************************************\n*                                                                     *\n*   CALL - COMMAND LINE PARSE                                         *\n*                                                                     *\n***********************************************************************\nLOOP     DS    0H                                                 UF006\n         L     R15,=V(PARSE)  ADDR OF PARSE\n         BALR  R14,R15        GO TO IT\n         CLC   =C'E ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'EXIT ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'END ',QSUBNAME STOP?\n         BE    EXIT           YES.\n         CLC   =C'STOP ',QSUBNAME STOP?\n         BE    EXIT           YES.\n***********************************************************************\n*                                                                     *\n*   CALL - SUB-COMMAND MODULE SELECTED BY PARSE                       *\n*                                                                     *\n***********************************************************************\n         MVC   QDHLINE,DUMMY  NO OUTPUT MESSAGE\n         L     R15,QSUBCMD    ADDR OF SUBCMD FROM QCOMMON\n         BALR  R14,R15        GO TO IT\n         MVC   QDMLNG,=H'0'   ZERO OUT MESSAGE LENGTH\n         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE\n         BALR  R14,R15        WRITE LAST SCREEN, GET NEXT INPUT\n         B     LOOP           DO IT AGAIN\n***********************************************************************\n*                                                                     *\n*   CLEAN UP AND GO HOME                                              *\n*                                                                     *\n***********************************************************************\nEXIT     CLI   QSPF,C'Y'      RUNNING UNDER ISPF?                   TEC\n         BNE   EXIT1A         NO, CONTINUE.                         TEC\n         L     R15,@ISPLINK   LOAD ADDRESS OF ISPF ROUTINE.         TEC\n         CALL  (15),(#VDELETE,#ALL),MF=(E,VDELETE)                  TEC\n         DELETE EP=ISPLINK                                          TEC\n         B     EXIT2                                                TEC\nEXIT1A   STSIZE SIZELOC=QDOSZR1,LINELOC=QDOSZR0  RESTORE SCRSIZE  UF003\n         TPUT  CLEAR,L'CLEAR,FULLSCR,MF=(E,QTPUT) CLEAR SCREEN    UF003\n         STLINENO LINE=1,MODE=OFF                 OFF FULLSCR     UF003\n         USING QCKPT,R8 BASE REG FOR CKPT WORK AREA\nEXIT2    DS    0H                                                 UF003\n         L     R8,QVCKPT      LOAD BASE REG\n         CLOSE MF=(E,HOCKPT)\n         SPACE 1                                                     CL\n         LA    R7,QCSPOOLS         ADDR OF FIRST DCB POINTER         CL\n         LA    R6,9                MAXIMUM NUMBER OF EXTENTS         CL\n         SPACE 1                                                     CL\nCLOSELOP OC    0(4,R7),0(R7)       SKIP IF THIS EXTENT               CL\n         BZ    CLOSEBMP             IS NOT ACTIVE                    CL\n         OI    0(R7),X'80'         SET END OF LIST INDICATE          CL\n         CLOSE (,FREE),MF=(E,(R7)) CLOSE ONE EXTENT                  CL\nCLOSEBMP LA    R7,4(,R7)           BUMP TO NEXT EXTENT               CL\n         BCT   R6,CLOSELOP         CONTINUE IF MORE EXTENTS          CL\n         SPACE 1                                                     CL\n         TM    QPFLAG,HARDCPY         IS HARDCOPY INVOKED?         FCI*\n         BNO   FREEUP                   NO..SPLIT THIS STUFF       FCI*\n         L     R15,=V(PRINT)               INVOKE PRINT            FCI*\n         MVC   QDREPLY,QBLANK                  TO                  FCI*\n         MVC   QDREPLY(09),=C'PRINT OFF'          FREE UP          FCI*\n         MVC   QDRLNG,=X'0009'                        HARDCOPY     FCI*\n         BALR  R14,R15                                     OUTPUT  FCI*\n         EJECT\n***********************************************************************\n*                                                                  FCI*\n*   FREE HASPCKPT AND HASPACEN DDNAMES BEFORE LEAVING TO BE NEAT.. FCI*\n*                                                                  FCI*\n***********************************************************************\nFREEUP   MVI   DAIRFLAG,X'18'    INDICATE FREE DDNAME(XXXXXXXX)    FCI*\n         MVC   DA18DDN,HASPCKPT+40  GET DDNAME USED...             FCI*\n         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*\n         BALR  R14,R15           GO FREE IT..                      FCI*\n*\n         LA    R2,QCSPOOLS       GET ADDR OF LIST OF HASPACE DCBS  FCI*\n         LA    R4,35             MAX OF 35 PASSES THROUGH HERE..   FCI*\nFREEUP1  L     R3,0(R2)          GET ADDRESS OF DCB TO WORK ON     FCI*\n         LTR   R3,R3             ANYONE THERE?                     FCI*\n         BZ    EXITQCK                                             FCI*\n         MVC   DA18DDN,40(R3)    MOVE IN DDNAME FROM DCB           FCI*\n         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*\n         BALR  R14,R15           AND GO INVOKE DAIR TO FREE IT..   FCI*\n         LA    R2,4(R2)          BUMP                              FCI*\n         BCT   R4,FREEUP1                                          FCI*\n         SPACE 2                                                  ONL02\n******************************************************************ONL02\n*                                                                 ONL02\n*   ISSUE FINAL AUTHORIZATION CHECK BEFORE RETURNING TO THE SYSTEMONL02\n*                                                                 ONL02\n******************************************************************ONL02\n         SPACE 1                                                  ONL02\nEXITQCK  DS    0H                  QUEUE COMMAND PROCESSING DONE  ONL02\n         QAUTHCK QAEND             ISSUE FINAL AUTHORIZATION CHECKONL02\n         SPACE 2                                                  ONL02\n***********************************************************************\n*                                                                     *\n*   FREE THE AREAS ACQUIRED IN INIT (Q3)                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                  ONL02\n         OI    QGETL3,X'80'        PREPARE FOR FREEMAIN           ONL02\n         FREEMAIN MF=(E,QFREE)\n         TM    QFLAG1,QFLG1DBC    NEED TO TERMINATE ESTAE?        UF024\n         BZ    NOESTAE            NO, SKIP THIS                   UF024\n         ESTAE 0                  DELETE CURRENT ESTAE            UF024\n         NI    QFLAG1,255-QFLG1DBC  CLEAR FLAG                    UF024\nNOESTAE  DS    0H                                                 UF024\n         QSTOP RC=0               RETURN TO TMP WITH RC=0         ONL11\n***********************************************************************\n*                                                                     *\n*   CONSTANTS AND OTHER ODDITIES                                      *\n*                                                                     *\n***********************************************************************\n         LTORG\nCLEAR1   EQU   *                   START OF CLEAR DATA            UF003\n*        DC    X'27F5C1'           ESC; ERASE/WRITE; RESET MDT    UF003\n         DC    X'C1'               FIX FOR SPF/TCAM               RNB01\n         DC    X'115D7E'           SBA  24,80                     UF003\n         DC    X'114040'           SBA  1,1                       UF003\n         DC    X'3C404000'         RTA  1,1 WITH NULLS            UF003\n         DC    X'1DC8'             SF, INTENSIFIED                UF003\n         DC    X'13'               INSERT CURSOR                  UF003\nCLEAR    EQU   CLEAR1,*-CLEAR1                                    UF003\nDUMMY    DC    CL80'    NO DATA IS AVAILABLE FOR YOUR REQUEST'\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01\n         QCOMMON\n         $HASPEQU\n         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QUEUEM2": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00a6 TYPE(TEXT)   INTENS(HIGH) COLOR(BLUE)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)   HILITE(REVERSE)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n \u00a2 TYPE(TEXT)   INTENS(LOW)  COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n%QUEUE Command - &QDTLINE -\\-\\-\n\u00a6Command ===>_QDREPLY                                                          \u00a2\n&QDHLINE                                                                       +\n&QDLINE1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                               +\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "QUEUEM3": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00(\\x00(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00a6 TYPE(TEXT)   INTENS(HIGH) COLOR(BLUE)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)   HILITE(REVERSE)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n \u00a2 TYPE(TEXT)   INTENS(LOW)  COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n%QUEUE Command - &QDTLINE -\\-\\-\n\u00a6Command ===>_QDREPLY                                                          \u00a2\n&QDHLINE                                                                       +\n&QDLINE1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                               +\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "QUEUEM4": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x003\\x003\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00a6 TYPE(TEXT)   INTENS(HIGH) COLOR(BLUE)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)   HILITE(REVERSE)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n \u00a2 TYPE(TEXT)   INTENS(LOW)  COLOR(YELLOW)\n)BODY EXPAND(\\\\)\n%QUEUE Command - &QDTLINE -\\-\\-\n\u00a6Command ===>_QDREPLY                                                          \u00a2\n&QDHLINE                                                                       +\n&QDLINE1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                               +\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "QUEUEM5": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n % TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00a6 TYPE(TEXT)   INTENS(HIGH) COLOR(BLUE)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)   HILITE(REVERSE)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n \u00a2 TYPE(TEXT)   INTENS(LOW)  COLOR(YELLOW)\n)BODY EXPAND(\\\\) WIDTH(&ZSCREENW)\n%QUEUE Command - &QDTLINE -\\-\\-\n\u00a6Command ===>_QDREPLY                                                          \u00a2\n&QDHLINE                                                                       +\n&QDLINE1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                               +\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFTSO5": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xaa\\x00\\xaa\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 170, "newlines": 170, "modlines": 0, "user": "FILE103"}, "text": "//RACFTSO5 JOB (NNNNN,8),'BILL HORTON',CLASS=A,NOTIFY=XXXXXX\n//        EXEC PGM=FILEAID\n//SYSPRINT DD  SYSOUT=$\n//SYSIN    DD  DSN=PROD.CNTRLIB2($$DD01),DISP=SHR\n//DD01     DD  DSN=SYS1.UADS,DISP=SHR\n//DD01O    DD  DSN=XXXXXX.UADS.LIST,SPACE=(CYL,(1,1)),DISP=(,CATLG),\n//             UNIT=SYSDA,DCB=(LRECL=172,RECFM=FB,BLKSIZE=17200)\n//        EXEC ASMHCL,PARM.LKED='LIST,MAP,AC=1'\n//SYSIN    DD  *\nRACFTSO5 CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9            POINTER TO DYNAMIC AREA\nR10      EQU   10           BASE REGISTER\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,RACFTSO5._&SYSDATE._&SYSTIME\n         LR    R10,R15\n         USING RACFTSO5,R10\n         L     R0,LDYNAREA              LOAD LENGTH OF DYNAMIC AREA.\n         GETMAIN R,LV=(R0)              GET DYNAMIC AREA.\n         LR    R9,R1                    SAVE ADDRESS.\n         LR    R2,R9                    POINT TO DYNAMIC AREA.\n         LR    R3,R0                    GET LENGTH.\n         LA    R4,0                     ZERO.\n         LA    R5,0                     PADDING BYTE AND LENGTH.\n         MVCL  R2,R4                    CLEAR DYNAMIC AREA.\n         USING DYNAREA,R9               ADDRESSIBILITY.\n         LA    R2,SAVEAREA\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         LA    R3,=A(WEND-WORKAREA)     GET LENGTH OF WORKAREA.\n         ST    R3,WLENGTH\n         ICHEACTN FIELD=TCOMMAND,FLDATA=(80,LIDATAX),MF=(E,LUPD1)\n         MVI   LUPD1+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         OPEN  (SYSUT1,(INPUT))\n*\n*\n*\nREADLOOP GET   SYSUT1\n         LR    R8,R1\n         LA    R3,4(R8)                 POINT TO USERID.\n         MVI   12(R8),C' '              PUT IN ONE MORE BLANK.\n         TRT   4(9,R8),BLANKTAB         GET L(USERID) + 1\n         SR    R1,R3                    LENGTH OF USERID + 1.\n         BCTR  R1,0                     DECREMENT TO GET TRUE LENGTH.\n         STC   R1,LUSERID               SAVE LENGTH OF USERID.\n         BCTR  R1,0                     DECREMENT FOR EX.\n         EX    R1,MOVE1                 COPY USERID.\nMOVE1    MVC   USERID(0),0(R3)          COPY USERID.\n         MVC   WTP1+16(7),=CL7' '\n         EX    R1,MOVE2                 COPY USERID.\nMOVE2    MVC   WTP1+16(0),0(R3)         COPY USERID.\nWTP1     WTP   'USERID: XXXXXXX'\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         LA    R3,WORKAREA              POINT TO WORK AREA.\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=(R2),ACTIONS=(ACT1),         X\n               WKAREA=(R3),OPTIONS=(FLDEF,ACTION),MF=(E,LOCATE)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    GETOK                    YES, CONTINUE.\n         CH    R5,=H'12'\n         BNE   BADNEWS\n         WTP   'ABOVE NOT A RACF USERID'\n         B     GETOK\nBADNEWS  ABEND 1,DUMP                   NO, THROW UP.\n         PUSH  PRINT\n         PRINT NOGEN\nGETOK    GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         LR    R8,R1\n         POP   PRINT\n         MVC   RCMD(6),166(R8)\n         GET   SYSUT1\n         LR    R8,R1\n         MVC   RCMD+6(74),0(R8)\n         CLC   RCMD,BLANKS              NOTHING HERE?\n         BE    READLOOP                 YES, GO GET NEXT USER'S DATA.\n         CH    R5,=H'0'                 DID USERID EXIST?\n         BNE   READLOOP                 NO, CONTINUE.\n         MVC   WTP2+26(80),RCMD\nWTP2     WTP   'DATA CHANGED TO: \"----5---10----5---20----5---30----5--X\n               -40----5---50----5---60----5---70----5---80\"'\n         MVC   LIDATA(3),=X'005150'     SPECIFY LENGTH.\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         ICHEINTY ALTER,TYPE='USR',ENTRY=(R2),ACTIONS=(LUPD1),         X\n               OPTIONS=(FLDEF,ACTION),MF=(E,ALTER)\n         LTR   R15,R15                  GOOD RETURN FROM RACF?\n         BZ    READLOOP                 YES, CONTINUE.\n         ABEND 2,DUMP                   NO, THROW UP.\n*\n* PROCESSING COMPLETED.\n*\nEOF      CLOSE (SYSUT1)\n         L     R13,SAVEAREA+4\n         L     R0,LDYNAREA              FREE\n         FREEMAIN R,LV=(R0),A=(R9)      DYNAMIC AREA.\n         LA     R15,0                   SET RETURN CODE.\n         RETURN (14,12),,RC=(15)        RETURN TO CALLER.\nLDYNAREA DC    A(EDYNAREA-DYNAREA)\nSYSUT1   DCB   DSORG=PS,LRECL=172,RECFM=FB,DDNAME=SYSUT1,EODAD=EOF,    X\n               MACRF=(GL)\nACT1     ICHEACTN FIELD=TCOMMAND\nTCOMMAND EQU   *-8\nBLANKS   DC    CL80' '\nBLANKTAB DC    XL256'00'\n         ORG   BLANKTAB+X'40'\n         DC    X'40'\n         ORG\n         LTORG ,\n         EJECT\nDYNAREA  DSECT\nSAVEAREA DS    18F\nLUPD1    ICHEACTN FIELD=TCOMMAND,FLDATA=(80,LUPD1),MF=L\nLOCATE   ICHEINTY LOCATE,ACTIONS=(LUPD1),MF=L\nALTER    ICHEINTY ALTER,ACTIONS=(LUPD1),MF=L\nHALF1    DS    D\nLUSERID  DS    C\nUSERID   DS    CL7\nWORKAREA DS    0F                      /* WORK AREA FOR ICHEACTN     */\nWLENGTH  DS    A                       /* LENGTH OF WORK AREA        */\nWRBA     DS    CL6                     /* RBA RETURN AREA            */\nWFLAGS   DS    C                       /* FLAGS                      */\nWRES1    DS    C                       /* RESERVED                   */\nWDDSNC   DS    CL4                     /* DUPL. DATASET NAME COUNT   */\nWRES2    DS    CL8                     /* RESERVED                   */\nWDATALEN DS    CL4                     /* LENGTH OF RETURNED DATA    */\nLIDATA   DS    CL2                     /* LENGTH OF INSTDATA FIELD   */\nLIDATAX  DS    C                       /* LENGTH OF DATA IN FIELD    */\nRCMD     DS    CL80                    /* ACCOUNTING CODE            */\n         DS    CL255                   /* RESERVED                   */\n         DS    F                       /*                            */\nWEND     EQU   *                       /* END OF WORK AREA           */\nEDYNAREA EQU   *\n         END\n/*\n//LKED.SYSLMOD DD DSN=APF.LIBRARY(RACFTSO5),DISP=SHR\n//GO      EXEC PGM=RACFTSO5,COND=(0,NE)\n//STEPLIB  DD  DSN=APF.LIBRARY,DISP=SHR\n//SYSUDUMP DD  SYSOUT=$\n//SYSUT1   DD  DSN=XXXXXX.UADS.LIST,DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REPOS": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01`\\x01`\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 352, "newlines": 352, "modlines": 0, "user": "FILE103"}, "text": "REPOS    TITLE 'QUEUE COMMAND - DATASET REPOSITIONING ROUTINES'   ONL01\nREPOS    QSTART ,                  START REPOS CSECT ASSEMBLY     ONL01\n         GBLB  &QONL          ENABLES ONL SPECIFIC CODE           ONL06\n         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA\n         L     R10,QVCKPT     LOAD BASE REG\n         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA\n         L     R9,QVDSPL      LOAD BASE REG\n         USING WORK,R13       BASE REG FOR LOCAL WORK AREA\n***********************************************************************\n*                                                                     *\n*   BRANCH TO PROPER ROUTINE                                          *\n*                                                                     *\n***********************************************************************\n         CLC   QCODEH,=H'36'  MODEL 2/5 COMMAND?                  UF003\n         BE    MODEL          OK IF NO DATASET                    UF003\n         SPACE 1                                                  UF003\nCHKID    CLC   QPDSID,=X'FFFF'    IS THERE A VALID DATASET?         SBG\n         BNE   GO             YES. GO AHEAD.\n         QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'\nGO       LH    R1,QCODEH      LOAD FUNCTION CODE\n         CH    R1,=H'32'      IS THE FUNCTION SUPPORTED?\n         BH    STOP           NO. RETURN.\n         B     *+4(R1)        BRANCH TO ROUTINE\n         B     TILT           0 OFFSET\n         B     FIND           4\n         B     FINDTIME       8\n         B     COLUMN         12\n         B     AT             16\n         B     PLUS           20\n         B     MINUS          24\n         B     TOP            28\n         B     BOTTOM         32\nTILT     QTILT '*** PARAMETER IS INVALID OR OMITTED ***'\n***********************************************************************\n*                                                                     *\n*   REPOSITION VERTICALLY                                             *\n*                                                                     *\n***********************************************************************\n* SKIP FORWARD\nPLUS     CLI   QPARM1,C' '    DEFAULT NEEDED\n         BNE   PLUS010        NO\n         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET DEFAULT TO 1\nPLUS010  BAL   R4,NUMERIC     VALIDATE PARAMETER\n         AP    QPREC,COUNT    ADD COUNT TO CURRENT RECORD\n         B     RESUME         CALL LISTDS\n* SKIP BACKWARD\nMINUS    CLI   QPARM1,C' '    DEFAULT NEEDED\n         BNE   MINUS010       NO\n         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET DEFAULT TO 1\nMINUS010 BAL   R4,NUMERIC     VALIDATE PARAMETER\n         SP    QPREC,COUNT    SUBTRACT COUNT FROM CURRENT RECORD\n         BP    RESUME         CALL LISTDS IF RESULT POSITIVE.\n* TOP OF DATASET\nTOP      ZAP   QPREC,=P'1'    SET CURRENT RECORD TO TOP OF DS\n* RESUME AT CURRENT RECORD\nRESUME   L     R15,=V(LISTDS) ADDR OF LISTDS MODULE\n         BALR  R14,R15        GO TO IT\nSTOP     QSTOP\n* BOTTOM OF DATASET\nBOTTOM   ZAP   QPREC,=P'9999999' SET CURRENT RECORD TO LARGEST\n         B     RESUME         CALL LISTDS\n* POSITION TO THIS RECORD\nAT       BAL   R4,NUMERIC     VALIDATE PARAMETER\n         ZAP   QPREC,COUNT    INDICATE REPOSITION NO\n         B     RESUME         CALL LISTDS\n* CHECK THE PARMETER FOR VALID NUMERIC AND PACK IT\nNUMERIC  LH    R2,QLNG1       LENGTH OF PARM\n         SH    R2,=H'1'       IS THE COUNT FIELD ZERO?\n         BM    RESUME         YES. RESUME FROM CURRENT POSITION.\n         MVC   QFZONES,QFZONE INITIALIZE NUMERIC CHECK\n         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK\n         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?\n         BNE   TILT           NO. TILT.\n         EX    R2,PACK        PACK THE FIELD INTO COUNT\n         CLI   QSUBNAME,C'P'  ?/PAGE FORWARD/BACKWARD SPECIFIED\n         BE    FOUNDP         YES. GO PROCESS\n         CLI   QSUBNAME,C'H'  ?/HALF PAGE FORWARD/BACKWARD SPECIFIED\n         BNE   NEXIT          NO. GO TO EXIT\n         MP    COUNT,QDLNES   YES. MULTIPLY BY PAGE SIZE          UF003\n         DP    COUNT,=P'2'    AND CONVERT TO HALF PAGES           UF003\n         ZAP   COUNT,COUNT(7) RE-ALIGN THE STUPID FIELD           UF003\n         B     NEXIT\nFOUNDP   MP    COUNT,QDLNES   YES. MULTIPLY BY PAGE SIZE          UF003\nNEXIT    BR    R4             RETURN\n* EXECUTED INSTRUCTIONS\nMVZ      MVZ   QFZONES(1),QPARM1 CHECK FOR NUMERIC\nPACK     PACK  COUNT,QPARM1(1) PACK COUNT\n***********************************************************************\n*                                                                     *\n*   REPOSITION HORIZONTALLY                                           *\n*                                                                     *\n***********************************************************************\nCOLUMN   CLI   QPARM1,C' '    ?/DEFAULT NEEDED\n         BE    COL010         YES, GO SET IT\n         CLI   QPARM1,C'0'    ?/SET COLUMN TO 1\n         BNE   COL020         NO, TEST IF NUMERIC\nCOL010   MVI   QLNG1+1,X'01'  SET LENGTH OF PARM\n         MVI   QPARM1,X'F1'   SET COLUMN TO 1\nCOL020   BAL   R4,NUMERIC     VALIDATE PARAMETER\n         CP    COUNT,=P'255'  IS THE COUNT FIELD TOO BIG?\n         BH    TILT           YES. TILT.\n         SP    COUNT,=P'1'    COLUMN RELATIVE TO ZERO\n         BM    TILT           INVALID. TILT.\n         CVB   R5,COUNT       CONVERT TO BINARY\n         STH   R5,QPOFFSET    STORE IN QPOFFSET\n         B     RESUME         CALL LISTDS\n***********************************************************************\n*                                                                     *\n*   LOCATE SPECIFIC RECORD                                            *\n*                                                                     *\n***********************************************************************\nFIND     CLI   QSUBNAME+1,C'A' IS THE REQUEST FOR FIND ALL?\n         BE    FIND2          YES. DO NOT UPDATE RECORD POINTER.\n         AP    QPREC,=P'1'    START SEARCH AT NEXT RECORD\nFIND2    CLI   QPARM1,C' '    IS THERE A PARAMETER?\n         BE    RESUME         NO. CONTINUE WITH PREVIOUS FIND.\n         LA    R2,QDREPLY+62  END OF USER REPLY\n         LA    R3,61          MAXIMUM LENGTH OF PARM\n         SH    R3,QOFF1       OFFSET TO FIRST PARM\n         AIF   (NOT &QONL).SKPONL1                                ONL12\n         CLI   QPARM1,C'/'         DO 'OLD TIME' SCAN IF FIRST    ONL12\n         BE    LOOP                 CHARACTER IS A SLASH          ONL12\n.SKPONL1 ANOP  ,                                                  ONL12\n         CLI   QPARM1,C''''        DO 'OLD TIME' SCAN IF FIRST    CL002\n         BE    LOOP                 CHARACTER IS AN APOSTROPHE    CL002\n         CLI   QPARM1,C'\"'           OR IF THE FIRST CHARACTER    ONL13\n         BE    LOOP                   IS A DOUBLE QUOTE           ONL13\n         LA    R2,QDREPLY+1         FIRST POSSIBLE ADDR OF REPLY  CL002\n         AH    R2,QOFF1            ADDR OF SECOND BYTE OF REPLY   CL002\n         SPACE 1                                                  CL002\nLOOPNA   CLI   0(R2),C' '          LOOK FOR FIRST BLANK           CL002\n         BE    FOUNDNA             BR WHEN FOUND                  CL002\n         LA    R2,1(,R2)           EXAMINE NEXT CHARACTER         CL002\n         BCT   R3,LOOPNA           KEEP LOOKING IF POSSIBLE       CL002\n         B     TILT                END IF TOO LONG                CL002\nFOUNDNA  LR    R3,R2               ADDR OF FIRST BLANK            CL002\n         LA    R2,QDREPLY          ADDR OF FIRST POSSIBLE CHAR    CL002\n         AH    R2,QOFF1            ACTUAL ADDR OF FIRST NON-BLANK CL002\n         SR    R3,R2               LENGTH OF STRING               CL002\n         BCTR  R3,0                MACHINE LENGTH OF STRING       CL002\n         B     FOUNDNA2            RE-JOIN LOGIC                  CL002\nLOOP     CLC   0(1,R2),QPARM1 IS THIS THE DELIMITER?\n         BE    FOUND          YES. CONTINUE.\n         BCTR  R2,0           TRY THE PREVIOUS BYTE\n         BCT   R3,LOOP        IS THE LENGTH FIELD EXHAUSTED?\n         B     TILT           YES. TILT.\nFOUND    BCTR  R3,0           DECREMENT LENGTH BY 1\n         LA    R2,QDREPLY+1   ADDR OF REPLY + 1\n         AH    R2,QOFF1       ADDR OF FIRST BYTE OF PARM\nFOUNDNA2 DS    0H                                                 CL002\n         EX    R3,MVC         MOVE PARM TO QPFIND\n         STH   R3,QPLNG       SAVE LENGTH-1 OF PARM\n         B     COLTEST        TEST IF COLUMN KEYWORD IS PRESENT\nMVC      MVC   QPFIND(1),0(R2) MOVE PARM TO QPFIND\n***********************************************************************\n*                                                                     *\n*    COLUMN RANGE FOR FIND                                            *\n*                                                                     *\n***********************************************************************\nCOLTEST  XC    QOFFS,QOFFS    RESET COLUMN OFFSETS\n         XC    QOFFE,QOFFE\n         LA    R2,3(R2,R3)    PREPARE FOR NEXT FIELD\n         LA    R3,QDREPLY+55  END OF USER REPLY\n         SPACE 1                                                  ONL13\n         AIF   (NOT &QONL).SKPONL2                                ONL12\n         CLI   QPARM1,C'/'         WERE DELIMETER CHARS USED?     ONL12\n         BE    DLMUSED             SKIP IF YES                    ONL12\n.SKPONL2 ANOP  ,                                                  ONL12\n         CLI   QPARM1,C''''        WERE DELIMETER CHARS USED?     ONL13\n         BE    DLMUSED             SKIP IF YES                    ONL13\n         CLI   QPARM1,C'\"'         WERE DELIMETER CHARS USED?     ONL13\n         BE    DLMUSED             SKIP IF YES                    ONL13\n         BCTR  R2,0                ACCOUNT FOR MISSING DELIMETERS ONL13\nDLMUSED  DS    0H                                                 ONL13\n         SPACE 1                                                  ONL13\nLOOP1    CLC   0(3,R2),=CL3'COL'  ?/COLUMN PARAMETER\n         BE    FOUNDA         YES. GO PROCESS\n         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD\n         CR    R2,R3          ?/END OF REPLY\n         BH    RESUME         YES. EXIT\n         B     LOOP1          NO. CHECK AGAIN\nFOUNDA   LA    R2,3(R2)       NEXT FIELD\n         CLI   0(R2),C'('     ?/LP PRESENT\n         BNE   PRESUME        NO. EXIT\n         LA    R2,1(R2)       NEXT FIELD\n         LA    R3,QDREPLY+62  END OF REPLY\n         LR    R5,R2          SAVE START OF THIS FIELD\n         MVI   QDELIMIT,C','  LOOKING FOR DELIMETER = ','\n         BAL   R7,CHKDEL      GO CHECK THE DELIMETER\n         CVB   R6,COUNT       CONVERT START COLUMN OFFSET TO BINARY\n         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO\n         BZ    PRESUME        YES. GO INDICATE AN ERROR\n         BCTR  R6,0           DECREMENT OFFSET BY 1\n         STH   R6,QOFFS       SAVE START COLUMN\n         LA    R2,1(R2)       NEXT FIELD\n         LR    R5,R2          SAVE START OF THIS FIELD\n         MVI   QDELIMIT,C')'  LOOKING FOR DELIMETER = ')'\n         BAL   R7,CHKDEL      GO CHECK THE DELIMETER\n         CVB   R6,COUNT       CONVERT END COLUMN OFFSET TO BINARY\n         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO\n         BZ    PRESUME        YES. GO INDICATE AN ERROR\n         BCTR  R6,0           DECREMENT OFFSET BY 1\n         STH   R6,QOFFE       SAVE END COLUMN\n         CLC   QOFFS,QOFFE    ?/ERROR IN COLUMN SPECIFICATION\n         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH\n         B     RESUME         NO. CONTINUE WITH NORMAL PROCESSING\nCHKDEL   CLC   0(1,R2),QDELIMIT ?/DELIMITER FOUND\n         BE    CHK010         YES. GO PROCESS\n         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD\n         CR    R2,R3          ?/END OF REPLY\n         BH    PRESUME        YES. EXIT\n         B     CHKDEL         NO. CHECK AGAIN\nCHK010   LR    R4,R2          SAVE DELIMITER ADDRESS\n         SR    R4,R5          LENGTH OF SUB-PARM\n         CH    R4,=H'3'       ?/LENGTH TO LONG\n         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH\n         BCTR  R4,0           LENGTH FOR EXEC INTRUCTION\n         MVC   QFZONES,QFZONE  NUMERIC TEST\n         EX    R4,MVZ1\n         CLC   QFZONES,QFZONE ?/FIELD NUMERIC\n         BNE   TILT           NO. EXIT WITH ERROR MESSAGE\n         EX    R4,PACK1\n         BR    R7\nPRESUME  XC    QOFFS,QOFFS    DISREGARD FIND\n         XC    QOFFE,QOFFE       BY COLUMN RANGE\n         QTILT ' *** ERROR IN COLUMN SPECIFICATION ***'\nMVZ1     MVZ   QFZONES(1),0(R5)\nPACK1    PACK  COUNT,0(1,R5)\n***********************************************************************\n*                                                                     *\n*   REPOSITION IN SYSLOG DATASET BY TIME OF DAY                       *\n*                                                                     *\n***********************************************************************\nFINDTIME CLI   QPARM1,C' '    IS THE PARM OMITTED?\n         BE    TILT           YES. TILT.\n         B     RESUME         CALL LISTDS\n         EJECT                                                    UF003\n******************************************************************UF003\n*                                                                 UF003\n*   SWITCH MODEL TYPE FOR 3270 TERMINAL                           UF003\n*                                                                 UF003\n******************************************************************UF003\nMODEL    DS    0H             ,                                   UF003\n         BAL   R4,NUMERIC     VALIDATE PARAMETER                  UF003\n         CP    COUNT,=P'2'    MODEL 2?                            UF003\n         BE    MODEL2         YES, BRANCH                         UF003\n         CP    COUNT,=P'3'    MODEL 3?                            UF003\n         BE    MODEL3         YES, BRANCH                         UF003\n         CP    COUNT,=P'4'    MODEL 4?                            UF003\n         BE    MODEL4         YES, BRANCH                         UF003\n         CP    COUNT,=P'5'    MODEL 5?                            UF003\n         BE    MODEL5         YES, BRANCH                         UF003\n         QTILT 'UNSUPPORTED MODEL TYPE'                           UF003\n         SPACE 1                                                  UF003\nMODEL2   MVC   QDLNELEN,=H'80'     LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'21'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'21'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'21'                           UF043\n         MVC   QDSCRLEN,=AL2(21*80) SCREEN LENGTH                 UF003\n         MVC   QDSCRPLN,=AL2(21*80+QDLINE1-QDSCREEN) TPUT LEN     UF003\n         MVI   QDSCRO1,X'F5'       ERASE/WRITE                    UF003\n         MVC   QDSCRO2,=X'C150'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'5CF0'    (24,1)                         UF003\n         MVC   QDSCRO4,=X'5DF7'    (24,72)                        UF003\n         MVC   QDSCRO5,=X'C260'    (3,1)                          UF003\n         CLI   QSPF,C'Y'           RUNNING UNDER SPF?               TEC\n         BNE   MODEL2X             NO, CONTINUE.                    TEC\n         MVI   QPANEL+6,C'2'       RESET PANEL NAME.                TEC\n         B     MODELN                                               TEC\nMODEL2X  DS    0H                                                   TEC\n         STSIZE SIZE=80,LINE=24    SET SCREEN SIZE FOR VTAM       UF003\n         SPACE 1                                                  UF003\nMODELN   CLC   QPDSID,=X'FFFF'     IS THERE A DATASET?              SBG\n         BNE   RESUME              YES, CALL LISTDS               UF003\n         MVC   QDHLINE,=CL80' '    BLANK HEADING LINE             UF003\n         B     STOP                AND RETURN                     UF003\n         SPACE 1                                                  UF003\nMODEL3   MVC   QDLNELEN,=H'80'     LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'29'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'29'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'29'                           UF043\n         MVC   QDSCRLEN,=AL2(29*80)  SCR LENGTH                   UF003\n         MVC   QDSCRPLN,=AL2(29*80+QDLINE1-QDSCREEN) TPUT LEN     UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C150'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'E6F0'    (32,1)                         UF003\n         MVC   QDSCRO4,=X'E7F7'    (32,72)                        UF003\n         MVC   QDSCRO5,=X'C260'    (3,1)                          UF003\n         CLI   QSPF,C'Y'           RUNNING UNDER SPF?               TEC\n         BNE   MODEL3X             NO, CONTINUE.                    TEC\n         MVI   QPANEL+6,C'3'       RESET PANEL NAME.                TEC\n         B     MODELN                                               TEC\nMODEL3X  DS    0H                                                   TEC\n         STSIZE SIZE=80,LINE=32    SET SCREEN SIZE FOR VTAM       UF003\n         B     MODELN              JOIN COMMON CODE               UF003\n         SPACE 1                                                  UF003\nMODEL4   MVC   QDLNELEN,=H'80'     LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'40'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'40'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'40'                           UF043\n         MVC   QDSCRLEN,=AL2(40*80)  SCR LENGTH                   UF003\n         MVC   QDSCRPLN,=AL2(40*80+QDLINE1-QDSCREEN) TPUT LEN     UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C150'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'F460'    (43,1)                         UF003\n         MVC   QDSCRO4,=X'F5E7'    (43,72)                        UF003\n         MVC   QDSCRO5,=X'C260'    (3,1)                          UF003\n         CLI   QSPF,C'Y'           RUNNING UNDER SPF?               TEC\n         BNE   MODEL4X             NO, CONTINUE.                    TEC\n         MVI   QPANEL+6,C'4'       RESET PANEL NAME.                TEC\n         B     MODELN                                               TEC\nMODEL4X  DS    0H                                                   TEC\n         STSIZE SIZE=80,LINE=43    SET SCREEN SIZE FOR VTAM       UF003\n         B     MODELN              JOIN COMMON CODE               UF003\n         SPACE 1                                                  UF003\nMODEL5   MVC   QDLNELEN,=H'132'    LINE LENGTH                    UF003\n         MVC   QDLNES,=PL2'24'     LINES PER SCREEN AREA          UF003\n         MVC   QDPFKTAB+6*8+6(2),=C'24'                           UF043\n         MVC   QDPFKTAB+7*8+6(2),=C'24'                           UF043\n         MVC   QDSCRLEN,=AL2(24*132)  SCR LENGTH                  UF003\n         MVC   QDSCRPLN,=AL2(24*132+QDLINE1-QDSCREEN) TPUT LEN    UF003\n         MVI   QDSCRO1,X'7E'       ERASE/WRITE ALTERNATE          UF003\n         MVC   QDSCRO2,=X'C2C4'    (2,1)                          UF003\n         MVC   QDSCRO3,=X'F5E8'    (27,1)                         UF003\n         MVC   QDSCRO4,=X'F66F'    (27,72)                        UF003\n         MVC   QDSCRO5,=X'C4C8'    (3,1)                          UF003\n         CLI   QSPF,C'Y'           RUNNING UNDER SPF?               TEC\n         BNE   MODEL5X             NO, CONTINUE.                    TEC\n         MVI   QPANEL+6,C'5'       RESET PANEL NAME.                TEC\n         B     MODELN                                               TEC\nMODEL5X  DS    0H                                                   TEC\n         STSIZE SIZE=132,LINE=27   SET SCREEN SIZE FOR VTAM       UF003\n         B     MODELN              JOIN COMMON CODE               UF003\n         EJECT                                                    UF003\n***********************************************************************\n*                                                                     *\n*   MISCELLANY                                                        *\n*                                                                     *\n***********************************************************************\n         LTORG\nSYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023\n         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01\n         QCOMMON\n         $HASPEQU\n         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01\nSYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023\nWORK     DSECT\n         DS    CL72\nCOUNT    DS    D\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPELL": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00u\\x00u\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 117, "newlines": 117, "modlines": 0, "user": "FILE103"}, "text": "/*-------------------------------------------------------------------*/\n/*       Macro: SPELL                                                */\n/*       Purpose: Run SCRIPT against current data to check spelling  */\n/*-------------------------------------------------------------------*/\n\n         ISREDIT MACRO (PARM)\n         CONTROL NOFLUSH NOMSG ASIS\n         IF &PARM = DEBUG THEN CONTROL LIST CONLIST SYMLIST MSG\n         ISREDIT (LAST)    = LINENUM .ZLAST\n         ISREDIT (WIDTH)   = DATA_WIDTH\n         SET ZEDSMSG =\n         SET ZEDLMSG = &STR(** Spell checking in progress **)\n         ISPEXEC CONTROL DISPLAY LOCK\n         ISPEXEC DISPLAY MSG(ISRZ000)\n\n         /* Allocate DCF input dataset */\n\n         ALLOC FI(ESPELL) NEW CAT SPACE(5 5) TRACKS UNIT(SYSDA) +\n         LRECL(80) RECFM(F B) BLKSIZE(23440) DSN(SPELL.MACRO.TEXT) +\n         REUSE\n\n         /* Open file and write some SCRIPT commands to be sure */\n         /* data is formatted properly for parsing (later).     */\n\n         OPENFILE ESPELL OUTPUT\n         SET EXTRA_LINES = 0\n         SET ESPELL = &STR(.PW &WIDTH)\n         PUTFILE ESPELL\n         SET EXTRA_LINES = &EXTRA_LINES + 1\n         SET ESPELL = &STR(.LL &WIDTH)\n         PUTFILE ESPELL\n         SET EXTRA_LINES = &EXTRA_LINES + 1\n         SET ESPELL = &STR(.FO OFF)\n         PUTFILE ESPELL\n         SET EXTRA_LINES = &EXTRA_LINES + 1\n\n         /* Write each line of the data-being-edited */\n\n         SET I = 1\n         DO WHILE (&I <= &LAST)\n           ISREDIT (ESPELL) = LINE &I\n           PUTFILE ESPELL\n           SET I = &I + 1\n           END\n         CLOSFILE ESPELL\n\n         /* Invoke SCRIPT/VS */\n\n         ISPEXEC SELECT MODE(FSCR) CMD(SCRIPT SPELL.MACRO SPELLCHK +\n         FILE(SPELL.MACRO.LIST) CO M(DELAY) Q B(0))\n         SET SCRIPT_RC = &LASTCC\n         FREE FI(ESPELL) DELETE\n         SET EOF = NO\n         SET MISSPELLED = 0\n      /* ISPEXEC BROWSE DATASET(SPELL.MACRO.LIST) */\n         ALLOC FI(EDCFOUT) DSN(SPELL.MACRO.LIST) OLD REUSE\n         OPENFILE EDCFOUT INPUT\n         GETFILE EDCFOUT\n\n         /*------------------------------------------------------*/\n         /* Read SCRIPT error messages and create MSG records to */\n         /* show user which card images have misspelled words.   */\n         /*------------------------------------------------------*/\n\n         DO WHILE (&EOF = NO)\n\n           SET L = &LENGTH(&EDCFOUT)\n           IF &L > 18 THEN DO\n             IF &SUBSTR(2:16,&STR(&EDCFOUT)) = &STR(WORDS NOT FOUND) +\n               THEN DO\n               SET MISSPELLED = &MISSPELLED + 1\n               SET DCFMSG = &SUBSTR(2:&L,&EDCFOUT)\n               SET OK = NO\n               GETFILE EDCFOUT\n               IF &LENGTH(&EDCFOUT) > 7 +\n               THEN IF &SUBSTR(2:8,&EDCFOUT) = 'MACRO' +\n               THEN SET OK = YES\n               DO WHILE (&OK = NO)\n                 SET DCFMSG = +\n                 &STR(&DCFMSG&SUBSTR(2:&LENGTH(&EDCFOUT),&EDCFOUT))\n                 GETFILE EDCFOUT\n                 IF &LENGTH(&EDCFOUT) > 7 +\n                 THEN IF &SUBSTR(2:8,&EDCFOUT) = 'MACRO' +\n                 THEN SET OK = YES\n                 END\n               SET IC = &SYSINDEX(:,&EDCFOUT) - 1\n               SET BAD_LINE = &SUBSTR(15:&IC,&EDCFOUT)\n               SET BAD_LINE = &BAD_LINE - &EXTRA_LINES\n               ISREDIT LINE_AFTER &BAD_LINE = +\n               NOTELINE \"&NRSTR(&DCFMSG)\"\n               END\n             END\n\n           ERROR DO\n             SET EOF = YES\n             RETURN\n             END\n           GETFILE EDCFOUT\n           ERROR OFF\n           END\n\n         CLOSFILE EDCFOUT\n         FREE FI(EDCFOUT) DELETE\n\n         IF &MISSPELLED > 0 THEN DO\n           ISREDIT LINE_AFTER 0 = MSGLINE +\n           \"Misspelled words were found (see below).\"\n           SET TECSMSG = &MISSPELLED lines had errors\n           SET TECLMSG =\n           ISPEXEC SETMSG MSG(TECZ001)\n           END\n\n         ELSE DO\n           SET TECSMSG = No misspelled words!\n           SET TECLMSG =\n           ISPEXEC SETMSG MSG(TECZ000)\n           END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TECA08": {"ttr": 2574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x13/\\x00\\x98\\x13/\\x19E\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-05-12T00:00:00", "modifydate": "1998-05-12T19:45:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "TECA080  'RESOURCE NOT FOUND'\n'MINOR NAME &MINOR NOT CURRENTLY ENQUEUED UNDER &MAJOR..'\n\nTECA081  'RESOURCE NOT FOUND'\n'MAJOR NAME &MAJOR NOT CURRENTLY ENQUEUED'\n\nTECA082  'NO CONTENTION'\n'THERE IS CURRENTLY NO CONTENTION FOR ENQUEUED RESOURCES.'\n\nTECA083  'ABEND'\n'AN ABEND OCCURRED PROCESSING YOUR REQUEST.  TRY AGAIN.'\n\nTECA084  'JOB NOT FOUND'\n'JOB &JOB NOT FOUND; NO ENQ DATA TO DISPLAY.'\n\nTECA085  'RESOURCE NOT FOUND'\n'MINOR NAME &MINOR NOT CURRENTLY ENQUEUED UNDER ANY MAJOR'\n\nTECA086  'RESOURCE NOT FOUND'\n'MINOR NAME &MINOR NOT CURRENTLY ENQUEUED FOR JOB &JOB..'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TECMODS": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x06\\x00\\x06\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TECZ00": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "FILE103"}, "text": "TECZ000  '&TECSMSG' .ALARM = NO\n'&TECLMSG'\n\nTECZ001  '&TECSMSG' .ALARM = YES\n'&TECLMSG'\n\nTECZ002  '&TECSMSG' .ALARM = NO .HELP = &TECHELP\n'&TECLMSG'\n\nTECZ003  '&TECSMSG' .ALARM = YES .HELP = &TECHELP\n'&TECLMSG'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TVENQ1": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -------------------  GRS / ENQ DISPLAY   -------------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n+\n%                     ----------------------------------\n                      |            UTILITIES           |\n                      |        GRS / ENQ DISPLAY       |\n                      ----------------------------------\n+\n The%GRS / ENQ DISPLAY+dialog may be used to display current operating system\n ENQ information.  If the%ENTER+key is pressed without any fields being\n specified, then only%ENQ contention+will be displayed.  Otherwise, the dialog\n will display ENQ information for any combination of JOBNAME, MAJOR resource\n name, or MINOR resouce name.\n\n+The following topics are presented in sequence, or may be selected by number:\n\n%1+- How to determine which job is ENQ'd on I/TEC test files.\n%2+- A listing of primary MAJOR resource names and their meanings.\n)PROC\n &UP = TVUTL00\n &SEL = TRANS(&ZCMD 1,TVENQ11 2,TVENQ12 *,'?')\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TVENQ11": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -------------------  GRS / ENQ DISPLAY   -------------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n+\n To determine what job currenly is ENQ'd on an I/TEC test file, enter the last\n eight bytes of the data set name as the minor name (use the data data set if\n indexed BDAM), e.g.,\n\n        JOBNAME%===>+\n        MAJOR  %===>+\n        MINOR  %===> comnstd1+\n\n If this does not show the holder of the file, replace position seven (7) of the\n minor name with an \"x\", e.g.,\n\n        JOBNAME%===>+\n        MAJOR  %===>+\n        MINOR  %===> comnstx1+\n)PROC\n IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TVENQ12": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -------------------  GRS / ENQ DISPLAY   -------------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n+\n MAJOR name  Resource / Meaning\n ----------  ------------------\n  SYSDSN     Data sets - used by allocation to serialize based on DISP.\n  SYSIEA01   Dump data set.\n  SYSIEFSD   System device allocation.\n  SYSIGGV1   Master catalog.\n  SYSIGGV2   Catalog.\n  SYSIKJBC   TSO broadcast data set.\n  SYSIKJUA   User attribute data set and TSO users.\n  SYSIEWLP   Linkage editor SYSLMOD data set.\n  SYSSMF01   SYS1.MANnn data set.\n  SYSVSAM    VSAM data set.\n  SYSVTOC    VTOC of a DASD volume.\n  SYSZOPEN   System data sets.\n  SYSZPSWD   Password data set.\n  SYSZVOLS   System volumes.\n  SYSZWTOR   WTOR reply.\n\n For further information, see OS/VS2 System Programming Library: Debugging\n Handbook Volume 1 (GC28-1047-0), Section 5, \"ENQ/DEQ Summary\".\n)PROC\n IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TVENQ2": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL -------------------  GRS / ENQ DISPLAY   -------------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n+\n The previous panel displayed the ENQ information you requsted.  The first line\n below the command line displayed the nature of the request:\n\n &T1                                                                           +\n\n This was followed by column headings and their corresponding data:\n\n%TYPE+- the type of ENQ: SHR means the resource is to be shared, EXCL means the\n        resouce is to be owned exclusively by the owner.\n\n%STATUS+- the status of the ENQ request: OWNER means the request has been\n          satisfied, WAITING means the requestor is waiting for the resource.\n\n%SCOPE+- the scope of the ENQ request: SYSTEM requests are only for the SYSTEM\n         on which the requestor is running, SYSTEMS are for all systems in the\n         GRS configuration.\n\n%MAJOR+- the major name of the resouce (e.g., for a dataset ENQ, \"SYSDSN\").\n\n%MINOR+- the minor name of the resouce (e.g., for a dataset ENQ, the dataset\n         name).\n)PROC\n &UP = TVUTL00\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VBROAD": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xa1\\x01\\xa1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 417, "newlines": 417, "modlines": 0, "user": "FILE103"}, "text": "         PROC 0 DEBUG TEST\n         CONTROL NOFLUSH ASIS NOMSG\n         IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST MSG\n         ISPEXEC CONTROL ERRORS RETURN\n\n         ALLOC FI(VBROAD) DSN('MVS.BRODCAST') OLD\n         SET CC_ALLOC = &LASTCC\n         IF &CC_ALLOC > 0 THEN DO\n           SET ZEDSMSG = TRY LATER\n           SET ZEDLMSG = DIALOG IN USE BY ANOTHER USER.  ALLOC RC WAS\n           SET ZEDLMSG = &ZEDLMSG &CC_ALLOC..\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(4)\n           END\n\n         ISPEXEC SELECT PGM(A75905)\n         ISPEXEC VGET (XNAME,ZDATE,ZUSER) SHARED\n\n         ISPEXEC TBOPEN VBROAD LIBRARY(VBROAD)\n         SET CC_TBOPEN = &LASTCC\n         IF &CC_TBOPEN > 0 THEN DO\n           SET MSG1 = TBOPEN FAILED.  RETCODE WAS &CC_TBOPEN..\n           SET MSG2 =\n           SET MSG3 =\n           SET MSG4 =\n           ISPEXEC DISPLAY PANEL(VBROAD2)\n           EXIT CODE(16)\n           END\n\n         ISPEXEC LMINIT DATAID(LMBROAD) DDNAME(VBROAD)\n         SET CC_LMINIT = &LASTCC\n         IF &CC_LMINIT > 0 THEN DO\n           SET MSG1 = LMINIT FAILED.  RETCODE WAS &CC_LMINIT..\n           SET MSG2 =\n           SET MSG3 =\n           SET MSG4 =\n           ISPEXEC DISPLAY PANEL(VBROAD2)\n           EXIT CODE(16)\n           END\n\n         SET TABLE_UPDATED = NO\n         SET QUIT = NO\n         ISPEXEC TBDISPL VBROAD PANEL(VBROAD0)\n         SET CC_TBDISPL = &LASTCC\n         SET COMMAND = &ZCMD\n         SET ZCMD =\n\n         DO WHILE (&CC_TBDISPL = 0)\n\n           /*---------------------------*/\n           /* ADD A NEW BROADCAST ITEM. */\n           /*---------------------------*/\n\n           IF &COMMAND = A THEN DO\n             ISPEXEC TBBOTTOM VBROAD\n             SET VBKEY = &VBKEY + 1\n             SET VBOUSER = &ZUSER\n             ISPEXEC VGET (ZTIME) SHARED\n             SET VBODATE = &STR(&ZDATE)\n             SET VBOTIME = &ZTIME\n             SET ZEDSMSG =\n             SET ZEDLMSG = EDIT BROADCAST MESSAGE.  HIT THE END KEY\n             SET ZEDLMSG = &ZEDLMSG WHEN FINISHED.\n             ISPEXEC SETMSG MSG(ISRZ000)\n             ISPEXEC EDIT DATASET('MVS.BRODCAST(M&VBKEY)') +\n             MACRO(VBROADE)\n             SET CC_EDIT = &LASTCC\n             IF &CC_EDIT > 0 THEN DO\n               IF &CC_EDIT = 4 THEN DO\n                 SET ZEDSMSG = NO MESSAGES ADDED\n                 SET ZEDLMSG = NO NEW BROADCAST MESSAGES WERE ADDED\n                 ISPEXEC SETMSG MSG(ISRZ000)\n                 END\n               ELSE DO\n                 SET ZEDSMSG = EDIT FAILED\n                 SET ZEDLMSG = RETURN CODE FROM EDIT WAS &CC_EDIT..\n                 ISPEXEC SETMSG MSG(ISRZ001)\n                 END\n               END\n             ELSE DO\n               SET VBMUSER =\n               SET VBMDATE =\n               SET VBMTIME =\n               SET VBNAME = &XNAME\n               ISPEXEC LMOPEN DATAID(&LMBROAD)\n               ISPEXEC LMMFIND DATAID(&LMBROAD) MEMBER(M&VBKEY)\n               ISPEXEC LMGET DATAID(&LMBROAD) DATALOC(VBLINE1) +\n               MODE(INVAR) DATALEN(LLINE1) MAXLEN(78)\n               ISPEXEC LMCLOSE DATAID(&LMBROAD)\n               SET MO =\n               SET DA =\n               SET YEAR =\n               DO WHILE (&YEAR = &STR())\n                 ISPEXEC DISPLAY PANEL(VBROAD1)\n                 END\n               SET VBEXPDT = &STR(&MO/&DA/&SUBSTR(3:4,&YEAR))\n               ISPEXEC TBADD VBROAD\n               SET ZEDSMSG = MESSAGE ADDED\n               SET ZEDLMSG = BROADCAST MESSAGE BEGINNING\n               SET ZEDLMSG = &STR(&ZEDLMSG \"&SUBSTR(1:20,&VBLINE1)\")\n               SET ZEDLMSG = &STR(&ZEDLMSG WAS ADDED)\n               ISPEXEC SETMSG MSG(ISRZ000)\n               SET TABLE_UPDATED = YES\n               END\n             END\n\n           /*-----------------------------------------------------*/\n           /* UPDATE BROADCAST WHETHER ANYTHING IS CHANGE OR NOT. */\n           /*-----------------------------------------------------*/\n\n           ELSE IF &COMMAND = U THEN DO\n             SET TABLE_UPDATED = YES\n             SET ZEDSMSG = SET FOR UPDATE\n             SET ZEDLMSG = SYSTEM BROADCAST MESSAGES WILL BE UPDATED\n             SET ZEDLMSG = &ZEDLMSG WHEN YOU EXIT THIS DIALOG.\n             ISPEXEC SETMSG MSG(ISRZ000)\n             END\n\n           /*--------------------------*/\n           /* MODIFY A BROADCAST ITEM. */\n           /*--------------------------*/\n\n           ELSE IF &ZSEL = S THEN DO\n             SET ZEDLMSG = EDIT BROADCAST MESSAGE.  HIT THE END KEY\n             SET ZEDLMSG = &ZEDLMSG WHEN FINISHED.\n             ISPEXEC SETMSG MSG(ISRZ000)\n             ISPEXEC EDIT DATASET('MVS.BRODCAST(M&VBKEY)') +\n             MACRO(VBROADE)\n             SET CC_EDIT = &LASTCC\n             IF &CC_EDIT > 0 THEN DO\n               IF &CC_EDIT = 4 THEN DO\n                 SET ZEDSMSG = NOTHING CHANGED\n                 SET ZEDLMSG = SELECTED BROADCAST MESSAGE WAS NOT\n                 SET ZEDLMSG = &ZEDLMSG CHANGED BY EDIT.\n                 ISPEXEC SETMSG MSG(ISRZ000)\n                 END\n               ELSE DO\n                 SET ZEDSMSG = EDIT FAILED\n                 SET ZEDLMSG = RETURN CODE FROM EDIT WAS &CC_EDIT..\n                 ISPEXEC SETMSG MSG(ISRZ001)\n                 END\n               END\n             ELSE DO\n               SET VBMUSER = &ZUSER\n               ISPEXEC VGET (ZTIME) SHARED\n               SET VBMDATE = &STR(&ZDATE)\n               SET VBMTIME = &ZTIME\n               ISPEXEC LMOPEN DATAID(&LMBROAD)\n               ISPEXEC LMMFIND DATAID(&LMBROAD) MEMBER(M&VBKEY)\n               ISPEXEC LMGET DATAID(&LMBROAD) DATALOC(VBLINE1) +\n               MODE(INVAR) DATALEN(LLINE1) MAXLEN(78)\n               ISPEXEC LMCLOSE DATAID(&LMBROAD)\n               SET MO = &SUBSTR(1:2,&VBEXPDT)\n               SET DA = &SUBSTR(4:5,&VBEXPDT)\n               SET YEAR = &STR(19&SUBSTR(7:8,&VBEXPDT))\n               ISPEXEC DISPLAY PANEL(VBROAD1)\n               SET VBEXPDT = &STR(&MO/&DA/&SUBSTR(3:4,&YEAR))\n               ISPEXEC TBMOD VBROAD\n               SET ZEDSMSG = MESSAGE UPDATED\n               SET ZEDLMSG = BROADCAST MESSAGE BEGINNING\n               SET ZEDLMSG = &STR(&ZEDLMSG \"&SUBSTR(1:20,&VBLINE1)\")\n               SET ZEDLMSG = &STR(&ZEDLMSG WAS UPDATED)\n               ISPEXEC SETMSG MSG(ISRZ000)\n               SET TABLE_UPDATED = YES\n               END\n             END\n\n           /*--------------------------*/\n           /* DELETE A BROADCAST ITEM. */\n           /*--------------------------*/\n\n           ELSE IF &ZSEL = D THEN DO\n             ISPEXEC LMOPEN DATAID(&LMBROAD) OPTION(OUTPUT)\n             SET CC_LMOPEN = &LASTCC\n             IF &CC_LMOPEN > 0 THEN DO\n               SET MSG1 = LMOPEN FAILED.  RETCODE WAS &CC_LMOPEN..\n               SET MSG2 =\n               SET MSG3 =\n               SET MSG4 =\n               ISPEXEC DISPLAY PANEL(VBROAD2)\n               END\n             ISPEXEC LMMDEL DATAID(&LMBROAD) MEMBER(M&VBKEY)\n             SET CC_LMMDEL = &LASTCC\n             IF &CC_LMMDEL > 0 THEN DO\n               SET MSG1 = LMMDEL FAILED.  RETCODE WAS &CC_LMMDEL..\n               SET MSG2 =\n               SET MSG3 =\n               SET MSG4 =\n               ISPEXEC DISPLAY PANEL(VBROAD2)\n               END\n             ISPEXEC LMCLOSE DATAID(&LMBROAD)\n             ISPEXEC TBDELETE VBROAD\n             SET CC_DELETE = &LASTCC\n             IF &CC_DELETE = 0 THEN DO\n               SET ZEDSMSG = MESSAGE DELETED\n               SET ZEDLMSG = SPECIFIED BROADCAST MESSAGE HAS BEEN\n               SET ZEDLMSG = &ZEDLMSG DELETED.\n               ISPEXEC SETMSG MSG(ISRZ000)\n               SET TABLE_UPDATED = YES\n               END\n             ELSE DO\n               SET MSG1 = DELETE OF BROADCAST MESSAGE FAILED.\n               SET MSG2 = RETURN CODE WAS &CC_DELETE..\n               SET MSG3 =\n               SET MSG4 =\n               ISPEXEC DISPLAY PANEL(VBROAD2)\n               EXIT CODE(16)\n               END\n\n             END\n\n           /*---------------------------*/\n           /* BROWSE BROADCAST MESSAGE. */\n           /*---------------------------*/\n\n           ELSE IF &ZSEL = B THEN DO\n             ISPEXEC BROWSE DATASET('MVS.BRODCAST(M&VBKEY)')\n             END\n\n           /*----------------------*/\n           /* PROCESS DEBUG OPTION */\n           /*----------------------*/\n\n           ELSE IF &COMMAND = DEBUG +\n           THEN CONTROL LIST CONLIST SYMLIST MSG\n           ELSE IF &COMMAND = NODEBUG +\n           THEN CONTROL NOLIST NOCONLIST NOSYMLIST NOMSG\n\n           /*-----------------------*/\n           /* PROCESS CANCEL OPTION */\n           /*-----------------------*/\n\n           ELSE IF &COMMAND = CANCEL THEN DO\n\n             /* NOTE - THIS CODE WILL CANCEL UPDATE TO THE BROADCAST  */\n             /*        DATASET, BUT ANY DATA ALREADY EDITED AND SAVED */\n             /*        FOR A NEW MESSAGE WILL APPEAR THE NEXT TIME    */\n             /*        A NEW MESSAGE IS ENTERED.                      */\n\n             ISPEXEC TBEND VBROAD\n             ISPEXEC TBOPEN AXSXHXUX LIBRARY(SKQTXPG) /* APAR OZ93950 */\n             ISPEXEC LMFREE DATAID(&LMBROAD)\n             FREE FI(VBROAD)\n             EXIT CODE(8)\n             END\n\n           ISPEXEC TBTOP VBROAD\n           ISPEXEC TBDISPL VBROAD PANEL(VBROAD0)\n           SET CC_TBDISPL = &LASTCC\n           SET COMMAND = &ZCMD\n           SET ZCMD =\n           END\n\n         /*********************************************************/\n         /* REINITIALIZE BROADCAST MESSAGES IF TABLE WAS CHANGED. */\n         /*********************************************************/\n\n         IF &TABLE_UPDATED = YES THEN DO\n\n           /*-------------------------------------*/\n           /* DELETE EXISTING BROADCAST MESSAGES. */\n           /*-------------------------------------*/\n\n           SET SYSOUTTRAP = 500\n           LISTBC\n           SET J = &SYSOUTLINE\n           IF &TEST = TEST +\n           THEN WRITE &J MESSAGES WOULD BE DELETED.\n           ELSE DO\n             OPER\n             SET I = 1\n             DO WHILE (&I <= &J)\n               SEND &I,DELETE\n               SET I = &I + 1\n               END\n             CONTROL END(XXX)\n             END\n             CONTROL END(END)\n             END\n\n           ISPEXEC TBTOP VBROAD\n           ISPEXEC TBSKIP VBROAD NUMBER(1)\n           SET CC_TBSKIP = &LASTCC\n           DO WHILE (&CC_TBSKIP = 0)\n             SET DN = &STR(&ZDATE)\n             SET D1 = &STR(&SUBSTR(1:2,&DN)&SUBSTR(4:5,&DN))\n             SET D1 = &STR(&D1&SUBSTR(7:8,&DN))\n             SET D2 = &STR(&SUBSTR(7:8,&VBEXPDT)&SUBSTR(1:2,&VBEXPDT))\n             SET D2 = &STR(&D2&SUBSTR(4:5,&VBEXPDT))\n             IF &D1 > &D2 THEN DO\n            /* ISPEXEC CONTROL DISPLAY LOCK                    */\n            /* SET ZEDSMSG =                                   */\n            /* SET ZEDLMSG = DELETING OBSOLETE MESSAGE ENTERED */\n            /* SET ZEDLMSG = &STR(&ZEDLMSG &VBODATE)           */\n            /* ISPEXEC DISPLAY MSG(ISRZ000)                    */\n               ISPEXEC LMOPEN DATAID(&LMBROAD) OPTION(OUTPUT)\n               ISPEXEC LMMDEL DATAID(&LMBROAD) MEMBER(M&VBKEY)\n               ISPEXEC LMCLOSE DATAID(&LMBROAD)\n               ISPEXEC TBDELETE VBROAD\n               END\n             ELSE DO\n            /* ISPEXEC CONTROL DISPLAY LOCK                          */\n            /* SET ZEDSMSG =                                         */\n            /* SET ZEDLMSG = GENERATING BROADCAST MESSAGE ENTERED ON */\n            /* SET ZEDLMSG = &STR(&ZEDLMSG &VBODATE AT &VBOTIME)     */\n            /* ISPEXEC DISPLAY MSG(ISRZ000)                          */\n               ISPEXEC LMOPEN DATAID(&LMBROAD)\n               ISPEXEC LMMFIND DATAID(&LMBROAD) MEMBER(M&VBKEY)\n               ISPEXEC LMGET DATAID(&LMBROAD) DATALOC(M) +\n               MODE(INVAR) DATALEN(LBROAD) MAXLEN(78)\n               SET &CC_LMGET = &LASTCC\n\n               CONTROL NOLIST NOCONLIST NOSYMLIST\n               SET L = &LENGTH(&STR(&M))\n               SET I = 1\n               SET J = 0\n               DO WHILE (&I < &L)\n                 IF &SUBSTR(&I:&I,&M) = &STR(') AND +\n                 &SUBSTR(&I+1:&I+1,&M) \u00ac= &STR(') THEN DO\n                   SET M = +\n                   &STR(&SUBSTR(1:&I,&M)&STR(')&SUBSTR(&I+1:&L,&M))\n                   END\n                 IF &SUBSTR(&I:&I+1,&M) = &STR('') THEN DO\n                   SET I = &I + 1\n                   SET J = &J + 1\n                   END\n                 SET I = &I + 1\n                 END\n               SET L = &L - &J\n               IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST\n\n               SET X = &STR(MESSAGE ENTERED ON &VBODATE AT &VBOTIME BY)\n               SET X = &STR(&X &VBNAME)\n               IF &TEST = TEST +\n               THEN DO\n                 WRITE OPER\n                 WRITE SEND '=========> &X',ALL,SAVE\n                 WRITE END\n                 END\n               ELSE DO\n                 OPER\n                 SEND '=========> &X',ALL,SAVE\n                 CONTROL END(XXX)\n                 END\n                 CONTROL END(END)\n                 END\n               DO WHILE (&CC_LMGET = 0)\n                 IF &TEST = TEST +\n                 THEN DO\n                   WRITE OPER\n                   WRITE SEND '&M',ALL,SAVE\n                   WRITE END\n                   END\n                 ELSE DO\n                   OPER\n                   SEND '&M',ALL,SAVE\n                   CONTROL END(XXX)\n                   END\n                   CONTROL END(END)\n                   END\n                 ISPEXEC LMGET DATAID(&LMBROAD) DATALOC(M) +\n                 MODE(INVAR) DATALEN(LBROAD) MAXLEN(78)\n                 SET &CC_LMGET = &LASTCC\n\n                 CONTROL NOLIST NOCONLIST NOSYMLIST\n                 SET L = &LENGTH(&STR(&M))\n                 SET I = 1\n                 SET J = 0\n                 DO WHILE (&I < &L)\n                   IF &SUBSTR(&I:&I,&M) = &STR(') AND +\n                   &SUBSTR(&I+1:&I+1,&M) \u00ac= &STR(') THEN DO\n                     SET M = +\n                     &STR(&SUBSTR(1:&I,&M)&STR(')&SUBSTR(&I+1:&L,&M))\n                     END\n                   IF &SUBSTR(&I:&I+1,&M) = &STR('') THEN DO\n                     SET I = &I + 1\n                     SET J = &J + 1\n                     END\n                   SET I = &I + 1\n                   END\n                 SET L = &L - &J\n                 IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST\n\n                 END\n               ISPEXEC LMCLOSE DATAID(&LMBROAD)\n               END\n             ISPEXEC TBSKIP VBROAD NUMBER(1)\n             SET CC_TBSKIP = &LASTCC\n             END\n           SET ZEDSMSG = BROADCAST UPDATED\n           SET ZEDLMSG = ONE OR MORE BROADCAST MESSAGES WERE UPDATED\n           SET ZEDLMSG = &ZEDLMSG BY THE PREVIOUS DIALOG.\n           ISPEXEC SETMSG MSG(ISRZ000)\n           END\n\n         ELSE DO /* NO UPDATES */\n           SET ZEDSMSG = NO MESSAGES UPDATED\n           SET ZEDLMSG = NO BROADCAST MESSAGES WERE UPDATED\n           SET ZEDLMSG = &ZEDLMSG BY THE PREVIOUS DIALOG.\n           ISPEXEC SETMSG MSG(ISRZ000)\n           END\n\n         ISPEXEC TBCLOSE VBROAD LIBRARY(VBROAD)\n         SET CC_TBCLOSE = &LASTCC\n         IF &CC_TBCLOSE > 0 THEN DO\n           SET MSG1 = TBCLOSE FAILED. RETCODE WAS &CC_TBCLOSE..\n           SET MSG2 =\n           SET MSG3 =\n           SET MSG4 =\n           ISPEXEC DISPLAY PANEL(VBROAD2)\n           EXIT CODE(16)\n           END\n\n         ISPEXEC TBOPEN AXSXHXUX LIBRARY(SKQTXPGQ) /* APAR OZ93950 */\n\n         ISPEXEC LMFREE DATAID(&LMBROAD)\n         FREE FI(VBROAD)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VBROADE": {"ttr": 2836, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "FILE103"}, "text": "         ISREDIT MACRO\n         ISREDIT BOUNDS 1 78\n         ISREDIT RECOVERY OFF\n         ISREDIT NUMBER OFF\n         ISREDIT PACK OFF\n         ISREDIT NULLS ON\n         ISREDIT CAPS OFF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VBROADI": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "         FREE FI(VBROAD)\n         FREE DSN('MVS.BRODCAST')\n\n         DELETE 'MVS.BRODCAST'\n         WRITE RETURN CODE FROM DELETE WAS &LASTCC\n\n         ALLOC FI(VBROAD) DSN('MVS.BRODCAST') NEW CAT SPACE(1) CYL +\n         DIR(10) LRECL(80) RECFM(F B) BLKSIZE(23440) VOL(GAD630)\n         WRITE RETURN CODE FROM ALLOCATE WAS &LASTCC\n\n         ISPEXEC TBCREATE VBROAD LIBRARY(VBROAD) KEYS(VBKEY) +\n         NAMES(VBOUSER,VBODATE,VBOTIME,VBMUSER,VBMDATE,VBMTIME, +\n         VBNAME,VBEXPDT,VBLINE1)\n         WRITE RETURN CODE FROM TBCREATE WAS &LASTCC\n\n         ISPEXEC TBCLOSE VBROAD LIBRARY(VBROAD)\n         WRITE RETURN CODE FROM TBCLOSE WAS &LASTCC\n\n         WRITE GET OUT OF SPF, ENTER \"FREE FI(VBROAD)\", THEN\n         WRITE REENTER SPF.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VBROAD0": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW)\n _ TYPE(INPUT)   CAPS(ON)\n)BODY\n%-----------------------  TSO BROADCAST MESSAGE DIALOG  -----------------------T\n%Command ===>_ZCMD                                            %SCROLL ===_AMT  +\n\n Enter%A+above to add a new broadcast message\n      %U+above to unconditionally update the broadcast messages\n\n else enter a line command below:\n\n+B: Browse this broadcast message\n+D: Delete this broadcast message\n+S: Select this broadcast message for update\n+|\n+|         DATE     TIME     EXPIR.\n+V USERID  ENTERED  ENTERED  DATE     FIRST LINE OF MESSAGE\n)MODEL\n_Z@Z      @Z       @Z       @Z       @Z\n)INIT\n &VARS = '(ZSEL,VBOUSER,VBODATE,VBOTIME,VBEXPDT,VBLINE1)'\n &AMT   = CSR\n &ZSEL = ' '\n)PROC\nVER(&ZSEL,LIST,B,D,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VBROAD1": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n + TYPE(TEXT) SKIP(ON) INTENS(LOW)\n)BODY\n%-----------------------  TSO BROADCAST MESSAGE DIALOG  -----------------------T\n%Command ===>_ZCMD                                                             +\n\n Enter/change expiration date for broadcast message beginning\n\n&VBLINE1                                                                       +\n\n   Month%===>_MO+\n   Day  %===>_DA+\n   Year %===>_YEAR+\n)PROC\n VER(&MO,NB,RANGE,1,12)\n VER(&MO,PICT,'99')\n VER(&DA,NB,RANGE,1,31)\n VER(&DA,PICT,'99')\n VER(&YEAR,NB,RANGE,1987,1999)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VBROAD2": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE103"}, "text": "%-----------------------  TSO Broadcast Message Dialog  -----------------------T\n%Command ===>_ZCMD                                                             +\n\n An enexpected error has occurred in the dialog:\n\n   &MSG1                                                                       +\n   &MSG2                                                                       +\n   &MSG3                                                                       +\n   &MSG4                                                                       +\n\n Last error message from ISPF was &ZERRMSG:                                    +\n\n   &ZERRLM                                                                     +\n\n Press the ENTER key to terminate the dialog.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VCMDEDIC": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00D\\x00D\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "FILE103"}, "text": "         PROC 0 DEBUG\n/*--------------------------------------------------------------------*/\n/* THIS CLIST COPIES A COMMAND TABLE INTO THE USER'S PROFILE DATASET, */\n/* INVOKES THE COMMAND TABLE EDIT UTILITY AGAINST THE MEMBER          */\n/* (VCMDCMDS), AND, IF THE TABLE WAS CHANGED, COPIES THE TABLE BACK   */\n/* TO THE ORIGINAL DATASET, REPLACING THE OLD TABLE.                  */\n/*--------------------------------------------------------------------*/\n         IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST\nDISP:    ISPEXEC DISPLAY PANEL(VCMDEDIT)\n         IF &LASTCC > 0 THEN EXIT\n         ISPEXEC LMINIT DATAID(LMFROM) DATASET(&DSNFROM)\n         IF &LASTCC > 0 THEN DO\n           SET TECSMSG = \"FROM\" DATASET ERROR\n           SET TECLMSG = UNABLE TO OPEN &DSNFROM..\n           ISPEXEC SETMSG MSG(TECZ001)\n           EXIT\n           END\n         ISPEXEC LMINIT DATAID(LMTO) DDNAME(ISPTABL)\n         IF &LASTCC > 0 THEN DO\n           SET TECSMSG = \"TO\" DATASET ERROR\n           SET TECLMSG = UNABLE TO OPEN ISPTABL DDNAME.\n           ISPEXEC SETMSG MSG(TECZ001)\n           EXIT\n           END\n         ISPEXEC LMCOPY FROMID(&LMFROM) FROMMEM(&MEMF.CMDS) +\n           TODATAID(&LMTO) TOMEM(VCMDCMDS) REPLACE\n         IF &LASTCC > 0 THEN DO\n           SET TECSMSG = MEMBER NOT FOUND\n           SET TECLMSG = MEMBER &MEMF.CMDS NOT FOUND IN +\n                         &DSNFROM..\n           ISPEXEC SETMSG MSG(TECZ001)\n           GOTO DISP\n           END\n         SET TECSMSG =\n         SET TECLMSG = MAKE DESIRED CHANGES TO COMMAND TABLE, HIT +\n                       END KEY TO SAVE IN TABLE &MEMF..\n         ISPEXEC SETMSG MSG(TECZ000)\n         ISPEXEC SELECT PGM(ISPUCM) PARM(VCMD)\n         SET GOCC = &LASTCC\n         IF &GOCC = 8 THEN DO\n           ISPEXEC LMMOVE FROMID(&LMTO) FROMMEM(VCMDCMDS) +\n             TODATAID(&LMFROM) TOMEM(&MEMF.CMDS) REPLACE\n           IF &LASTCC = 0 THEN DO\n             SET TECSMSG = CMD TABLE EDITED\n             SET TECLMSG = ISPF COMMAND TABLE &MEMF SUCCESSFULLY EDITED.\n             ISPEXEC SETMSG MSG(TECZ000)\n             END\n           ELSE DO\n             SET TECSMSG = CMD TABLE COPY FAILED\n             SET TECLMSG = ISPF COMMAND TABLE &MEMF WAS NOT COPIED +\n                           BACK TO &DSNFROM\n             ISPEXEC SETMSG MSG(TECZ001)\n             END\n           END\n         ELSE DO\n           IF &GOCC = 101 THEN DO\n             SET TECSMSG = NOTHING CHANGED\n             SET TECLMSG = ISPF COMMAND TABLE &MEMF WAS NOT +\n                           CHANGED.\n             ISPEXEC SETMSG MSG(TECZ000)\n             END\n           ELSE DO\n             SET TECSMSG = CMD TABLE EDIT FAILED\n             SET TECLMSG = ISPF COMMAND TABLE &MEMF WAS NOT +\n                           SUCCESSFULLY EDITED.  RETURN CODE WAS &GOCC..\n             ISPEXEC SETMSG MSG(TECZ001)\n             END\n           END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VCMDEDIT": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n + TYPE(TEXT) SKIP(ON) INTENS(LOW)\n)BODY\n%-------------------------  ISPF Command Table Edit  --------------------------T\n%COMMAND ===>_ZCMD                                                             +\n\n\n%Specify command table to be edited:\n\n+   Table Name     %===>_MEMF+\n+   Dataset Name   %===>_DSNFROM                                       +\n                         (default dataset name is TSO.ISPTLIB)\n)PROC\n VER(&MEMF,NB,NAME)\n VER(&DSNFROM,DSNAME)\n IF (&DSNFROM = ' ')\n   &DSNFROM = '''TSO.ISPTLIB'''\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VENQ1": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n + TYPE(TEXT) SKIP(ON) INTENS(LOW)\n)BODY\n%-----------------------------  GRS / ENQ DISPLAY  ----------------------------T\n%COMMAND ===>_ZCMD                                                             +\n\n%ENTER/VERIFY PARAMETERS BELOW:\n+\n+   JOBNAME%===>_JOB     +\n+   MAJOR  %===>_MAJOR   +\n+   MINOR  %===>_MINOR                                       +\n)INIT\n .HELP = TVENQ1\n)PROC\n IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n VER(&JOB,NAME)\n VER(&MINOR,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VENQ2": {"ttr": 3087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%GRS/ENQ DISPLAY---------------------------------------------------------------T\n+COMMAND%===>_VCMD                                            %SCROLL ===>_AMT +\n+\n+&T1\n%&T2\n)MODEL\n@Z\n)INIT\n  &VARS = '(X)'\n  &AMT   = PAGE\n  &VCMD  = ' '\n  .HELP  = TVENQ2\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VEXIT": {"ttr": 3089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n _ TYPE(INPUT) INTENS(NON)\n)BODY EXPAND(\\\\)\n%-\\-\\-  Fast &ACTION -\\-\\-\n%Command ===>_ZCMD                                                             +\n\n+\\ \\ %Fast &ACTION in progress... \\ \\\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VEXITC": {"ttr": 3091, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00f\\x00f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "FILE103"}, "text": "         PROC 0 LOGOFF LOGON DEBUG TEST NEWID(NONE)\n\n         /*----------------------------------------------------*/\n         /*                                                    */\n         /* This CLIST will exit ISPF and (optionally)         */\n         /*                                                    */\n         /*   o Log the user off TSO                           */\n         /*   o Log the user off TSO and log another (io the   */\n         /*     same) user on TSO                              */\n         /*                                                    */\n         /*----------------------------------------------------*/\n\n         CONTROL NOFLUSH ASIS\n         IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST MSG\n         SET ACTION = Exit\n         SET COMMAND =\n\n         IF &LOGOFF = LOGOFF THEN DO\n           SET ACTION = Logoff\n           SET COMMAND = LOGOFF\n           END\n         ELSE IF &LOGON = LOGON THEN DO\n           SET ACTION = Logon\n           SET COMMAND = LOGON\n           IF &STR(&NEWID) \u00ac= &STR(NONE) +\n           THEN SET COMMAND = LOGON &NEWID\n           END\n\n         ISPEXEC VGET (ZSPLIT,ZAPPLID,ZDEL)\n         SET VEMSG1 =\n         SET VEMSG2 =\n\n         /* Disallow anything but Exit if in split screen */\n\n         SET TECLMSG =\n         IF &ZSPLIT = YES AND &ACTION \u00ac= Exit THEN DO\n           SET TECSMSG =\n           SET TECLMSG = +\n           &ACTION is not supported in a split screen environment; +\n           changed to Exit.\n           SET COMMAND =\n           SET ACTION = Exit\n           END\n\n         IF &COMMAND \u00ac= &STR() THEN DO\n           IF &TEST = TEST +\n           THEN WRITE &COMMAND\n           ELSE DO\n             CONTROL NOMSG\n             ISPEXEC SELECT CMD(TSOEXEC &COMMAND) MODE(FSCR)\n\n             /* If command fails, retry once */\n\n             IF &LASTCC = 24 +\n             THEN ISPEXEC SELECT CMD(TSOEXEC &COMMAND) MODE(FSCR)\n             CONTROL MSG\n             END\n           END\n\n         /* Handle list / log if pending (and not if split screen */\n\n         IF &ZSPLIT = NO THEN DO\n           ISPEXEC VGET (ZLSTNAME,ZLOGNAME,ZLOGFDSP,ZLSTFDSP)\n\n           IF &ZLSTNAME \u00ac= &STR() AND &ZLSTFDSP = &STR() THEN DO\n             SET TECSMSG =\n             SET TECLMSG = &ACTION cannot proceed until LIST dataset +\n                           disposition is specified.\n             ISPEXEC SETMSG MSG(TECZ000)\n             ISPEXEC SELECT PGM(ISPLLP) PARM(LIST)\n             IF &LASTCC > 0 THEN DO\n               SET TECSMSG = &ACTION cancelled\n               SET TECLMSG = &ACTION not done because LIST dataset +\n                             was not disposed of on the previous +\n                             panel.\n               ISPEXEC SETMSG MSG(TECZ000)\n               EXIT CODE(4)\n               END\n             END\n\n           IF &ZLOGNAME \u00ac= &STR() AND &ZLOGFDSP = &STR() THEN DO\n             SET TECSMSG =\n             SET TECLMSG = &ACTION cannot proceed until LOG dataset +\n                           disposition is specified.\n             ISPEXEC SETMSG MSG(TECZ000)\n             ISPEXEC SELECT PGM(ISPLLP) PARM(LOG)\n             IF &LASTCC > 0 THEN DO\n               SET TECSMSG = &ACTION cancelled\n               SET TECLMSG = &ACTION not done because LOG dataset +\n                             was not disposed of on the previous +\n                             panel.\n               ISPEXEC SETMSG MSG(TECZ000)\n               EXIT CODE(4)\n               END\n             END\n           END\n\n         SET ZCMD = &STR(=X&ZDEL.=X&ZDEL.=X&ZDEL.=X&ZDEL.=X&ZDEL.=X)\n         ISPEXEC CONTROL DISPLAY LOCK\n         IF &STR(&TECLMSG) = &STR() +\n         THEN ISPEXEC DISPLAY PANEL(VEXIT)\n         ELSE ISPEXEC DISPLAY PANEL(VEXIT) MSG(TECZ000)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VISPFG2": {"ttr": 3094, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00J\\x00J\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "FILE103"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "VLOGO": {"ttr": 3097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n @ AREA(GRAPHIC)\n)BODY\n%------------------------  Tennessee Eastman Company  --------------------------\n%\n%               @AREA2                                          @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n%               @                                               @\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VLOGOC": {"ttr": 3099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "FILE103"}, "text": "         PROC 0 DEBUG\n         ALLOC FI(ADMSYMBL) DSN('GDDM.OSPID.GDDMSYM') SHR REUSE\n         ISPEXEC SELECT PGM(VISPFG2) PARM(/VLOGO/&DEBUG)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VLOGON": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xab\\x01\\xab\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 427, "newlines": 427, "modlines": 0, "user": "FILE103"}, "text": "//VLOGON   JOB (NNNNN,8),'BILL HORTON',CLASS=A,NOTIFY=XXXXXx\n//*-----------------------------------------------------------------***\n//*                                                                 ***\n//* LIBRARY: xxxxxxxxxxxxxxxx                                       ***\n//* MEMBER:  VLOGON                                                 ***\n//*                                                                 ***\n//* PURPOSE:                                                        ***\n//* INSTALL VLOGON PROGRAM (UPDATE TSO LOGON INFO DIALOG)           ***\n//*                                                                 ***\n//* STRINGS TO BE CHANGED BEFORE SUBMISSION ARE:                    ***\n//*                                                                 ***\n//* USERID   <=== YOUR USER ID                                      ***\n//* PNAME    <=== YOUR NAME                                         ***\n//*                                                                 ***\n//*-----------------------------------------------------------------***\n//       EXEC ASMHCL,PARM.ASM='TERM,RENT',\n//            PARM.LKED='LIST,MAP,RENT,REUS'\n         TITLE 'VLOGON - ISPF DIALOG TO UPDATE TEC LOGON INFO'\nVLOGON   CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9            POINTER TO DYNAMIC AREA\nR10      EQU   10           BASE REGISTER\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*---------------------------------------------------------------------*\n*                                                                     *\n* THIS PROGRAM IS AN ISPF/PDF DIALOG FOR DISPLAYING/UPDATING TEC      *\n* LOGON INFORMATION.  THIS INFO IS KEPT IN THE RACF DATASET; THE      *\n* PROGRAMMER NAME IN THE PGMRNAME FIELD AND THE OTHER FIELDS IN THE   *\n* USERDATA FIELD.                                                     *\n*                                                                     *\n* USER ABEND CODES:                                                   *\n*                   0001 - BAD RETURN FROM RACF LOCATE FUNCTION       *\n*                   0002 - BAD RETURN FROM RACF ALTER FUNCTION        *\n*                          (REGISTERS 5 AND 6 HOLD REGISTER 15 AND    *\n*                           0 CONTENTS AFTER USER ABENDS)             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SAVE  (14,12),,VLOGON._&SYSDATE._&SYSTIME\n         LR    R10,R15\n         USING VLOGON,R10\n         L     R0,LDYNAREA              LOAD LENGTH OF DYNAMIC AREA.\n         GETMAIN R,LV=(R0)              GET DYNAMIC AREA.\n         LR    R9,R1                    SAVE ADDRESS.\n         LR    R2,R9                    POINT TO DYNAMIC AREA.\n         LR    R3,R0                    GET LENGTH.\n         LA    R4,0                     ZERO.\n         LA    R5,0                     PADDING BYTE AND LENGTH.\n         MVCL  R2,R4                    CLEAR DYNAMIC AREA.\n         USING DYNAREA,R9               ADDRESSIBILITY.\n         LA    R2,SAVEAREA\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n*\n* INITIALIZE WORK AREA.\n*\n         MVC   ACCOUNT,BLANKS\n         MVC   CURSOR,BLANKS\n         LA    R3,=A(WEND-WORKAREA)     GET LENGTH OF WORKAREA.\n         ST    R3,WLENGTH\n         PUSH  PRINT\n         PRINT NOGEN\n         ICHEACTN FIELD=PGMRNAME,FLDATA=(20,RNAME),MF=(E,LUPD1)\n         MVI   LUPD1+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=TACCNT,FLDATA=(40,LLACCT),MF=(E,LUPD2)\n         MVI   LUPD2+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=TLPROC,FLDATA=(8,LLPROC),MF=(E,LUPD3)\n         MVI   LUPD3+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=INSTDATA,FLDATA=(4,LLSTA),MF=(E,LUPD4)\n         MVI   LUPD4+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         MVC   RRP1(ERRP0-RRP0),RRP0    COPY RACROUTE MACRO FOR TSOPROC\n         MVC   RRA1(ERRA0-RRA0),RRA0    COPY RACROUTE MACRO FOR TACCNT\n         L     R3,16                    POINT TO CVT.\n         L     R3,0(R3)                 POINT TO TCB CHAIN.\n         L     R3,4(R3)                 GET CURRENT TCB.\n         L     R3,12(R3)                POINT TO TIOT (JOBNAME).\n         TRT   0(8,R3),BLANKTAB         FIND FIRST BLANK.\n         SR    R1,R3                    GET LENGTH OF USERID.\n         STC   R1,LUSERID               SAVE LENGTH OF USERID.\n         MVC   USERID,0(R3)             COPY USERID.\n*\n* SET UP IPSF ENVIRONMENT\n*\n         LOAD  EP=ISPLINK               LOAD ISPLINK ROUTINE.\n         ST    R0,@ISPLINK              SAVE.\n         DELETE EP=ISPLINK              GET RID OF ISPF MODULE.\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XNAME,XNAME,#C,F20),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XACCT,XACCT,#C,F5),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XPROC,XPROC,#C,F8),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XCMD,XCMD,#C,F80),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XSTA,XSTA,#C,F4),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#TECSMSG,TECSMSG,#C,F24),VL,             X\n               MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#TECLMSG,TECLMSG,#C,F78),VL,             X\n               MF=(E,VDEFINE)\n         POP   PRINT\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         LA    R3,WORKAREA              POINT TO WORK AREA.\n         MVC   LACCT(3),=X'002928'      SPECIFY LENGTH.\n         MVC   LPROC(3),=X'000908'      SPECIFY LENGTH.\n         MVC   LSTA(3),=X'000504'       SPECIFY LENGTH.\n         MVI   RACCT,C' '               BLANK OUT.\n         MVC   RACCT+1(39),RACCT        ACCOUNT FIELD.\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=(R2),WKAREA=(R3),            X\n               ACTIONS=(ACT1,ACT2,ACT3,ACT4),                          X\n               OPTIONS=(FLDEF,ACTION),MF=(E,LOCATE)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    GETOK                    YES, CONTINUE.\n         MVC   TECSMSG,=CL24'Read from RACF failed'\n         MVC   TECLMSG,=CL78'Unable to read current LOGON data from RACX\n               F dataset'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     RETURN\nGETOK    MVC   XNAME,RNAME              COPY FIELDS.\n         MVC   XACCT,RACCT\n         MVC   XPROC,RPROC\n         SR    R1,R1\n         USING PSA,R1\n         L     R2,PSAANEW\n         USING ASCB,R2\n         L     R3,ASCBASXB\n         USING ASXB,R3\n         L     R4,ASXBLWA\n         DROP  R1,R2,R3\n         USING LWA,R4\n         MVC   XCMD,LWALGCMD\n         MVC   XSTA,RSTA\n*\n*        DISPLAY FIRST PANEL\n*\nDVPANEL  DS    0H\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#DISPLAY,#VPANL,BLANKS,CURSOR),VL,MF=(E,DISPLAY)\n         LTR   R15,R15                  TEST RETURN CODE.\n         BNZ   RETURN                   RC > 0, GO HOME.\n         MVC   CURSOR,BLANKS            RESET NAME OF CURSOR FIELD.\n         MVI   CHSWITCH,C'N'            SET \"NO CHANGE\".\n*\n*        SEE IF THE NAME HAS CHANGED\n*\n         CLC   XNAME,RNAME              HAS XNAME CHANGED ?\n         BE    CHKACCT                  NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n*\n*        SEE IF THE ACCOUNT CODE HAS CHANGED\n*\nCHKACCT  CLC   XACCT,RACCT              HAS XACCT CHANGED ?\n         BE    CHKPROC                  NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n         MVC   ACCOUNT(5),XACCT\n         RACROUTE REQUEST=AUTH,ENTITY=ACCOUNT,WORKA=RACWORK,MF=(E,RRA1)\n         CH    R15,=H'0'                IS ACCOUNT CODE OK ?\n         BE    CHKPROC                  YES, CONTINUE\n         MVC   CURSOR,=CL9'XACCT'\n         CH    R15,=H'4'                \"RESOURCE NOT PROTECTED\" ?\n         BNE   NOACCT                   NO, CONTINUE\n         MVC   TECSMSG,=CL24'Account code not defined'\n         MVC   TECLMSG,=CL78'Call extension 3089 or 3090 (3601 after 5 X\n               p.m.) for further information'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nNOACCT   CH    R15,=H'8'                \"USER NOT AUTHORIZED\" ?\n         BNE   BADRACF1                 NO, CONTINUE\n         MVC   TECSMSG,=CL24'User unauthorized'\n         MVC   TECLMSG,=CL78'You are not authorized to use this accountX\n                code'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nBADRACF1 MVC   TECSMSG,=CL24'Logic error'\n         MVC   TECLMSG,=CL78'RACROUTE for account validation failed'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nCHKPROC  CLC   XPROC,RPROC              HAS XPROC CHANGED ?\n         BE    CHKSTA                   NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n         RACROUTE REQUEST=AUTH,ENTITY=XPROC,WORKA=RACWORK,MF=(E,RRP1)\n         CH    R15,=H'0'                IS PROC NAME OK ?\n         BE    CHKSTA                   YES, CONTINUE\n         MVC   CURSOR,=CL9'XPROC'\n         CH    R15,=H'4'                \"RESOURCE NOT PROTECTED\" ?\n         BNE   NOPROC                   NO, CONTINUE\n         MVC   TECSMSG,=CL24'Proc name not defined'\n         MVC   TECLMSG,=CL78'Contact the TSO system programmer for a liX\n               st of valid logon procedures'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nNOPROC   CH    R15,=H'8'                \"USER NOT AUTHORIZED\" ?\n         BNE   BADRACF2                 NO, CONTINUE\n         MVC   TECSMSG,=CL24'User unauthorized'\n         MVC   TECLMSG,=CL78'You are not authorized to use this TSO logX\n               on procedure'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nBADRACF2 MVC   TECSMSG,=CL24'Logic error'\n         MVC   TECLMSG,=CL78'RACROUTE for procedure validation failed'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nCHKSTA   CLC   XSTA,RSTA                HAS XSTA CHANGED ?\n         BE    CHKMOD                   NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\nCHKMOD   CLI   CHSWITCH,C'N'            \"NO CHANGE\" ?\n         BE    CHKCMD                   YES, CONTINUE.\n*\n*        ONE OF THE RACF FIELDS HAS CHANGED.  UPDATE RACF DATASET.\n*\n         MVC   RNAME,XNAME              UPDATE FIELDS.\n         MVC   RACCT,XACCT\n         MVC   RPROC,XPROC\n         MVC   RSTA,XSTA\n         TR    RNAME,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RACCT,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RPROC,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RSTA(4),TTABLE           BAD CHARACTERS.\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         ICHEINTY ALTER,TYPE='USR',ENTRY=(R2),                         X\n               ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),                      X\n               OPTIONS=(FLDEF,ACTION),MF=(E,ALTER)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    CHKCMD                   YES, CONTINUE.\n         MVC   TECSMSG,=CL24'Write to RACF failed'\n         MVC   TECLMSG,=CL78'Unable to write new logon data to RACF datX\n               aset'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     RETURN\n*\n*        SEE IF LOGON COMMAND HAS CHANGED.\n*\nCHKCMD   CLC   XCMD,LWALGCMD            IS XCMD UNCHANGED ?\n         BE    DVPANEL                  YES, CONTINUE\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         MODESET KEY=ZERO\n         MVC   LWALGCMD,XCMD            COPY IN NEW COMMAND.\n         MODESET KEY=NZERO\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\nUPDOK    MVC   TECSMSG,=CL24'Logon data updated'\n         MVC   TECLMSG,=CL78'New values will take effect upon your nextX\n                logon to TSO'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ000),VL,MF=(E,VDELETE)\n         B     DVPANEL\nPASSWORD DC    C'AUTH'\n         EJECT\n*\n*        PROCESSING COMPLETED.\n*\nRETURN   DS    0H\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDELETE,#ALL),VL,MF=(E,VDELETE)\nRET      DS    0H\n         L     R13,SAVEAREA+4\n         L     R0,LDYNAREA              FREE\n         FREEMAIN R,LV=(R0),A=(R9)      DYNAMIC AREA.\n         LA     R15,0                   SET RETURN CODE.\n         RETURN (14,12),,RC=15          RETURN TO CALLER.\nLDYNAREA DC    A(EDYNAREA-DYNAREA)\nACT1     ICHEACTN FIELD=PGMRNAME\nPGMRNAME EQU   *-8\nACT2     ICHEACTN FIELD=TACCNT\nTACCNT   EQU   *-8\nACT3     ICHEACTN FIELD=TLPROC\nTLPROC   EQU   *-8\nACT4     ICHEACTN FIELD=INSTDATA\nINSTDATA EQU   *-8\nRRA0     RACROUTE REQUEST=AUTH,CLASS='ACCTNUM',MF=L\nERRA0    EQU   *\nRRP0     RACROUTE REQUEST=AUTH,CLASS='TSOPROC',MF=L\nERRP0    EQU   *\nF4       DC    F'4'\nF5       DC    F'5'\nF8       DC    F'8'\nF20      DC    F'20'\nF24      DC    F'24'\nF78      DC    F'78'\nF80      DC    F'80'\nBLANKS   DC    CL80' '\n*\n* DEFINE ISPF FUNCTION NAMES\n*\n#VDEFINE DC    C'VDEFINE '\n#VDELETE DC    C'VDELETE '\n#DISPLAY DC    C'DISPLAY '\n#C       DC    C'CHAR '\n#VPANL   DC    C'VLOGON '\n#SETMSG  DC    C'SETMSG'\n#ALL     DC    C'* '\n*\n* DEFINE ISPF DIALOG VARIABLES\n*\n#XNAME   DC    C'XNAME '\n#XACCT   DC    C'XACCT '\n#XPROC   DC    C'XPROC '\n#XCMD    DC    C'XCMD '\n#XSTA    DC    C'XSTA  '\n#TECSMSG DC    C'TECSMSG '\n#TECLMSG DC    C'TECLMSG '\n#TECZ000 DC    C'TECZ000 '\n#TECZ001 DC    C'TECZ001 '\n*                0123456789ABCDEF\nTTABLE   DC    C'                ' 0\n         DC    C'                ' 1\n         DC    C'                ' 2\n         DC    C'                ' 3\n         DC    C'           .<(+|' 4\n         DC    C'          !$*);\u00ac' 5\n         DC    C'-/         ,%_>?' 6\n         DC    C'          :#@''=\"' 7\n         DC    C' ABCDEFGHI      ' 8\n         DC    C' JKLMNOPQR      ' 9\n         DC    C'  STUVWXYZ      ' A\n         DC    C'                ' B\n         DC    C' ABCDEFGHI      ' C\n         DC    C' JKLMNOPQR      ' D\n         DC    C'  STUVWXYZ      ' E\n         DC    C'0123456789      ' F\nBLANKTAB DC    XL256'00'\n         ORG   BLANKTAB+X'40'\n         DC    X'40'\n         ORG\n         LTORG ,\n         EJECT\nDYNAREA  DSECT\nSAVEAREA DS    18F\nDISPLAY  CALL  ,(,,),VL,MF=L\nVDEFINE  CALL  ,(,,,,),VL,MF=L\nVDELETE  CALL  ,(,),VL,MF=L\nLUPD1    ICHEACTN FIELD=PGMRNAME,FLDATA=(20,LUPD1),MF=L\nLUPD2    ICHEACTN FIELD=TACCT,FLDATA=(20,LUPD2),MF=L\nLUPD3    ICHEACTN FIELD=TLPROC,FLDATA=(20,LUPD3),MF=L\nLUPD4    ICHEACTN FIELD=INSTDATA,FLDATA=(4,LUPD4),MF=L\nLOCATE   ICHEINTY LOCATE,ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),MF=L\nALTER    ICHEINTY ALTER,ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),MF=L\nRRA1     RACROUTE REQUEST=AUTH,CLASS='ACCTNUM',MF=L\nRRP1     RACROUTE REQUEST=AUTH,CLASS='TSOPROC',MF=L\nHALF1    DS    D\n@ISPLINK DS    F                        ADDRESS OF ISPLINK ROUTINE.\n*\n* ISPF/PDF DISPLAY VARIABLE STORAGE.\n*\nXNAME    DS    CL20                    /* PROGRAMMER NAME            */\nXACCT    DS    CL5                     /* ACCOUNTING CODE            */\nXPROC    DS    CL8                     /* LOGON PROCEDURE NAME       */\nXCMD     DS    CL80                    /* INITIAL TSO COMMAND        */\nXSTA     DS    CL4                     /* MAIL STATION               */\nTECSMSG  DS    CL24                    /* SHORT MESSAGE              */\nTECLMSG  DS    CL78                    /* LONG  MESSAGE              */\nLUSERID  DS    C\nUSERID   DS    CL7\nCURSOR   DS    CL9                     /* NAME OF FIELD FOR CURSOR   */\nCHSWITCH DS    C                       /* \"N\": NO CHANGE \"Y\": CHANGE */\nACCOUNT  DS    CL40                    /* ACCOUNT CODE               */\nWORKAREA DS    0F                      /* WORK AREA FOR ICHEACTN     */\nWLENGTH  DS    A                       /* LENGTH OF WORK AREA        */\nWRBA     DS    CL6                     /* RBA RETURN AREA            */\nWFLAGS   DS    C                       /* FLAGS                      */\nWRES1    DS    C                       /* RESERVED                   */\nWDDSNC   DS    CL4                     /* DUPL. DATASET NAME COUNT   */\nWRES2    DS    CL8                     /* RESERVED                   */\nWDATALEN DS    CL4                     /* LENGTH OF RETURNED DATA    */\n         DS    CL2                     /* LENGTH OF PGMRNAME FIELD   */\nRNAME    DS    CL20                    /* PROGRAMMER NAME            */\nLACCT    DS    CL2                     /* LENGTH OF ACCOUNT FIELD    */\nLLACCT   DS    C                       /* LENGTH OF DATA IN FIELD    */\nRACCT    DS    CL5                     /* ACCOUNT CODE               */\n         DS    CL35                    /* REST OF ACCOUNT CODE FIELD */\nLPROC    DS    CL2                     /* LENGTH OF PROC NAME FIELD  */\nLLPROC   DS    C                       /* LENGTH OF DATA IN FIELD    */\nRPROC    DS    CL8                     /* NAME OF LOGON PROCEDURE    */\nLSTA     DS    CL2                     /* LENGTH OF INSTDATA FIELD   */\nLLSTA    DS    C                       /* LENGTH OF DATA IN FIELD    */\nRSTA     DS    CL4                     /* MAIL STATION               */\n         DS    CL247                   /* RESERVED                   */\n         DS    F                       /*                            */\nWEND     EQU   *                       /* END OF WORK AREA           */\nRACWORK  DS    CL512                   /* RACROUTE WORK AREA         */\nEDYNAREA EQU   *\n         IHAPSA\n         IHAASCB\n         IHAASXB\n         IKJEFLWA\n         END\n/*\n//LKED.SYSLMOD DD DSN=SYS1.LPALIB2(VLOGON),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VLOGONP": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n + TYPE(TEXT) SKIP(ON) INTENS(LOW)\n \u00a2 TYPE(TEXT) INTENS(LOW)\n @ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n)BODY\n%------------------------------  TEC LOGON DATA -------------------------------T\n%COMMAND ===>_ZCMD                                                             +\n\n+Enter/verify data for &ZUSER below:\n\n+Name             %===>_XNAME              +     (Required for TSO job card)\n\n Mail Station     %===>@XSTA+                    (Required for TSO job card)\n\n Accounting charge%===>_XACCT\u00a2\n\n Logon procedure  %===>_XPROC   \u00a2\n\n Initial command  %===>_XCMD\n                        +\n Note: Accounting charge, logon procedure, and initial command may also be\n       specified on the TSO/E logon panel (displayed upon logon to TSO).\n)INIT\n.HELP = VLOGONT\n)PROC\nIF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\nVER(&XNAME,NB)\nVER(&XPROC,NB,NAME)\nVER(&XSTA,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPC": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FILE103"}, "text": ")ATTR\n  @ TYPE(TEXT)   INTENS(LOW)                  COLOR(GREEN)\n  # TYPE(TEXT)   INTENS(LOW)                  COLOR(TURQ)\n  ! TYPE(TEXT)   INTENS(HIGH) HILITE(REVERSE) COLOR(YELLOW)\n  $ TYPE(TEXT)   INTENS(LOW)                  COLOR(RED)\n  _ TYPE(INPUT)  INTENS(HIGH)                 COLOR(PINK)\n)BODY\n%-----------------------  IBM PC File Transfer Program  -----------------------T\n+\n            #      *------*                        @*------------*\n            #     /      /|       $          *     @|            |\n            #    /      / |       %SEND$      *    @|            |\n            #   *------*  |       $*************   @|            |\n            #   |!    #|  *---*   $           *    @|   MVS/XA   |\n            #   |! PC #| /   /|   $  *       *     @|            |\n            #  /|!    #|/   / *   $ *              @|   +TSO@    |\n            # / *------*   / /    $*************   @|            |\n            #*------------* /     $ *   %RECEIVE   @|            |\n            #|            |/      $  *             @|            |\n            #*------------*                        @*------------*\n\n+Press the%HELP+key to get tutorial information on this function, including the\n syntax of the PC file transfer program commands SEND and RECEIVE.\n\n Press the%ENTER+key when finished.\n\n%Command ===>_ZCMD\n                                                                               +\n)INIT\n .HELP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCC": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE103"}, "text": "         PROC 0 DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST\n         ISPEXEC VGET (ZSPLIT,ZSCREEN)\n         IF &ZSPLIT = YES THEN IF &ZSCREEN \u00ac= 2 THEN DO\n           SET ZEDSMSG = BOTTOM SCREEN\n           SET ZEDLMSG = +\n           &STR(WHEN IN SPLIT SCREEN, PC SEND/RECEIVE CAN ONLY BE DONE)\n           SET ZEDLMSG = +\n           &STR(&ZEDLMSG ON THE BOTTOM SCREEN)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n           END\n         ISPEXEC DISPLAY PANEL(VPC)\n         SET DCC = &LASTCC\n         DO WHILE(&DCC = 0)\n           ISPEXEC DISPLAY PANEL(VPC)\n           SET DCC = &LASTCC\n           END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VPCTRAN": {"ttr": 3343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xc3\\x00\\xc3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 195, "newlines": 195, "modlines": 0, "user": "FILE103"}, "text": "         PROC 2 TYPE IND$DSN APPEND ADMGDF ASCII CRLF CYLINDERS TRACKS +\n                DEBUG LRECL(0) BLKSIZE(0) RECFM(X) SPACE(0) AVBLOCK(0)\n\n         /*-----------------------------------------------------------*/\n         /* THIS CLIST IS INVOKED FROM THE COMMAND TABLE WHENEVER     */\n         /* \"IND$SAVE\" IS ENTERED ON THE COMMAND LINE.  THIS CLIST    */\n         /* INVOKES THE IND$SAVE COMMAND TO SEND/RECEIVE DATA FROM    */\n         /* A PC TO FROM MVS/TSO.  IF THE ADMGDF KEYWORK IS           */\n         /* SPECIFIED, THE DATA IS CONVERTED FROM/TO PIF FORMAT,      */\n         /* RESPECTIVELY.  THIS CLIST IS BASED ON CLIST ADMUPCFT,     */\n         /* WHICH IS DISTRIBUTED WITH GDDM.  THIS CLIST MUST RUN      */\n         /* UNDER ISPF.                                               */\n         /*-----------------------------------------------------------*/\n\n         CONTROL NOPROMPT\n         IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST\n         IF &TYPE = GET +\n         THEN SET ACTION = RECEIVE\n         ELSE IF &TYPE = PUT THEN SET ACTION = TRANSMIT\n         ELSE DO\n           SET ZEDSMSG = INVALID \"TYPE\"\n           SET ZEDLMSG = CONTACT SYSTEM PROGRAMMER\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(20)\n           END\n\n         /****************************************/\n         /* SET UP OPTIONS FOR IND$FILE COMMAND. */\n         /****************************************/\n\n         IF &APPEND = APPEND THEN SET OPTIONS = &STR(&OPTIONS APPEND)\n         IF &ASCII  = ASCII  THEN SET OPTIONS = &STR(&OPTIONS ASCII)\n         IF &CRLF   = CRLF   THEN SET OPTIONS = &STR(&OPTIONS CRLF)\n         IF &TRACKS = TRACKS THEN SET OPTIONS = &STR(&OPTIONS TRACKS)\n         IF &CYLINDERS = CYLINDERS +\n         THEN SET OPTIONS = &STR(&OPTIONS CYLINDERS)\n         IF &LRECL \u00ac= 0 THEN SET OPTIONS = &STR(&OPTIONS LRECL(&LRECL))\n         IF &BLKSIZE \u00ac= 0 +\n         THEN SET OPTIONS = &STR(&OPTIONS BLKSIZE(&BLKSIZE))\n         IF &RECFM \u00ac= X THEN SET OPTIONS = &STR(&OPTIONS RECFM(&RECFM))\n         IF &SPACE \u00ac= 0 THEN SET OPTIONS = &STR(&OPTIONS SPACE(&SPACE))\n         IF &AVBLOCK \u00ac= 0 +\n         THEN SET OPTIONS = &STR(&OPTIONS AVBLOCK(&AVBLOCK))\n\n         /************************************************************/\n         /* IF GDDM IS NOT INVOLVED, JUST ISSUE THE IND$FILE COMMAND */\n         /* AND EXIT.                                                */\n         /************************************************************/\n\n         IF &ADMGDF = &Z THEN DO\n           ISPEXEC SELECT CMD(IND$FILE &TYPE &IND$DSN &OPTIONS)\n           SET IND$CC = &LASTCC\n           IF &IND$CC = 0 THEN DO\n             SET ZEDSMSG = &STR(&ACTION SUCCESSFUL)\n             SET ZEDLMSG = +\n             &STR(&ACTION OF DATASET &IND$DSN WAS SUCCESSFUL)\n             ISPEXEC SETMSG MSG(ISRZ000)\n          /* SEND 'PC &TYPE SUCCESSFUL FOR ',USER(S35607),LOGON */\n             END\n           ELSE DO\n             SET ZEDSMSG = &STR(&ACTION FAILED)\n             SET ZEDLMSG = +\n             &STR(&ACTION OF DATASET &IND$DSN FAILED.  RC = &IND$CC..)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             END\n           EXIT CODE(&IND$CC)\n           END\n\n         /**********************************************************/\n         /* A FILE IS TO BE CONVERTED BETWEEN GDDM AND PIF FORMAT. */\n         /**********************************************************/\n\n         /*--------------------------------------------------*/\n         /* ALLOCATE AN INTERMEDIATE DATASET FOR CONVERSION. */\n         /*--------------------------------------------------*/\n\n         SET CHECK = &SYSDSN(GDDM.PIF)\n         IF &STR(&CHECK) \u00ac= OK THEN DO\n           ALLOC FI(ADMPIF) DSN(GDDM.PIF) NEW CAT SPACE(8 2) TRACKS +\n           LRECL(400) RECFM(F B) BLKSIZE(4000) REUSE\n           END\n         ELSE ALLOC FI(ADMPIF) DSN(GDDM.PIF) SHR REUSE\n\n         /*------------------------------------------*/\n         /* GET MEMBER NAME OF DATA TO BE CONVERTED. */\n         /*------------------------------------------*/\n\n         SET RP = &STR())\n         SET &ILP = &SYSINDEX((,&IND$DSN)\n         SET &IRP = &SYSINDEX(&RP,&IND$DSN)\n         IF &ILP = 0 OR &IRP = 0 OR &IRP - &ILP > 9 THEN DO\n           SET ZEDSMSG = INVALID MEMBER\n           SET ZEDLMSG = MEMBER NAME OF &IND$DSN IS MISSING OR INVALID.\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(16)\n           END\n         SET PIFMEM = &SUBSTR(&ILP+1:&IRP-1,&IND$DSN)\n         SET INDDSN = &SUBSTR(1:&ILP-1,&IND$DSN)\n         IF &SUBSTR(1:1,&INDDSN) = &STR(') +\n         THEN SET INDDSN = &STR(&INDDSN')\n\n         /*------------------------------------------*/\n         /* MAKE SURE SPECIFIED GDDM DATASET EXISTS. */\n         /*------------------------------------------*/\n\n         SET CHECK = &SYSDSN(&IND$DSN)\n         IF &STR(&CHECK) \u00ac= OK THEN DO\n           IF &TYPE = PUT THEN DO\n             IF &STR(&CHECK) = &STR(MEMBER NOT FOUND) +\n             THEN ALLOC FI(ADMGDF) DSN(&INDDSN) SHR REUSE\n             ELSE ALLOC FI(ADMGDF) DSN(&INDDSN) NEW CAT SPACE(8 2) +\n             TRACKS LRECL(400) RECFM(F B) BLKSIZE(4000) DIR(10) REUSE\n             END\n           ELSE DO\n             SET ZEDSMSG = ALLOCATION ERROR\n             SET ZEDLMSG = +\n             &STR(DATASET &IND$DSN WAS NOT ALLOCATED BECAUSE &CHECK..)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(16)\n             END\n           END\n         ELSE ALLOC FI(ADMGDF) DSN(&INDDSN) SHR REUSE\n\n         /*-------------------------------------------------------*/\n         /* A GDDM FILE IS BEING RECEIVED ON THE PC.  CONVERT THE */\n         /* FILE TO PIF FORMAT AND RECEIVE IT.                    */\n         /*-------------------------------------------------------*/\n\n         IF &TYPE = GET THEN DO\n           ISPEXEC SELECT PGM(ADMUPCT) +\n           PARM( (&TYPE &PIFMEM )\n           SET CONVCC = &LASTCC\n           FREE FI(ADMPIF,ADMGDF)\n           IF &CONVCC > 0 THEN DO\n             SET ZEDSMSG = CONVERSION FAILED\n             SET ZEDLMSG = +\n             &STR(DATASET &IND$DSN WAS NOT CONVERTED TO PIF FORMAT.)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n           ELSE DO\n             ISPEXEC SELECT CMD(IND$FILE &TYPE GDDM.PIF &OPTIONS)\n             SET IND$CC = &LASTCC\n             IF &IND$CC = 0 THEN DO\n               SET ZEDSMSG = &STR(&ACTION SUCCESSFUL)\n               SET ZEDLMSG = +\n               &STR(&ACTION AND CONVERSION OF &IND$DSN WAS SUCCESSFUL)\n               ISPEXEC SETMSG MSG(ISRZ000)\n               END\n             ELSE DO\n               SET ZEDSMSG = &STR(&ACTION FAILED)\n               SET ZEDLMSG = +\n               &STR(&ACTION OF DATASET &IND$DSN FAILED.  RC = &IND$CC..)\n               ISPEXEC SETMSG MSG(ISRZ001)\n               END\n             EXIT CODE(&IND$CC)\n             END\n           END\n\n         /*-----------------------------------------------------*/\n         /* A GDDM FILE IS BEING XMITTED FROM THE PC.  TRANSMIT */\n         /* THE FILE TO TSO AND CONVERT IT TO GDDM FORMAT.      */\n         /*-----------------------------------------------------*/\n\n         ELSE DO\n           ISPEXEC SELECT +\n           CMD(IND$FILE &TYPE GDDM.PIF &OPTIONS)\n           SET IND$CC = &LASTCC\n           IF &IND$CC > 0 THEN DO\n             SET ZEDSMSG = &STR(&ACTION FAILED)\n             SET ZEDLMSG = +\n             &STR(&ACTION OF DATASET &IND$DSN FAILED.  RC = &IND$CC..)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(&IND$CC)\n             END\n           ISPEXEC SELECT PGM(ADMUPCT) +\n           PARM( (&TYPE &PIFMEM)\n           SET CONVCC = &LASTCC\n           FREE FI(ADMPIF,ADMGDF)\n           IF &CONVCC > 0 THEN DO\n             SET ZEDSMSG = CONVERSION FAILED\n             SET ZEDLMSG = +\n             &STR(DATASET &IND$DSN WAS NOT CONVERTED TO PIF FORMAT.)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n           ELSE DO\n             SET ZEDSMSG = &STR(&ACTION SUCCESSFUL)\n             SET ZEDLMSG = +\n             &STR(&ACTION AND CONVERSION OF &IND$DSN WAS SUCCESSFUL)\n             ISPEXEC SETMSG MSG(ISRZ000)\n             END\n           END\n\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPCT000": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n The previous panel can be displayed to permit the IBM PC File Transfer Program\n to function while still running ISPF on your TSO screen.\n\n The transmission of data is initiated from the%PC session+using the%SEND+PC\n command (to send data from the PC to MVS/TSO) or the%RECEIVE+PC command (to\n receive data on the PC from MVS/TSO).  Issuing the command causes a command to\n be automatically issued in the TSO session; the PC and TSO sessions then pass\n the data between them on the TSO screen (although it doesn't appear there\n afterwards).\n\n Press the%END+key to return to the previous panel and begin the file transfer\n operation.\n\n The following topics may be selected by number if desired:\n%  1+- Step by step instructions for using the PC file transfer program\n%  2+- Syntax for the IBM PC SEND command\n%  3+- Syntax for the IBM PC RECEIVE command\n%  4+- Sample SEND commands\n%  5+- Sample RECEIVE commands\n)PROC\n &ZSEL = TRANS(&ZCMD 1,*VPCT001 2,*VPCT010 3,*VPCT010 4,*VPCT002\n                     5,*VPCT003)\n IF (&ZCMD = 2)\n   &VPCC = SEND\n IF (&ZCMD = 3)\n   &VPCC = RECEIVE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT001": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n Instructions for using the PC File Transfer Program:\n\n 1. Enter%PC+on the command line of any ISPF panel to display a panel which the\n    file transfer program can use (or go to TSO READY).  If in a split screen\n    environment, enter PC on the command line of the bottom screen.\n\n 2. Jump to the PC session.\n\n 3. Enter%set compat=asciix+(this will insure correct translation for PC3270s).\n\n 4. Enter the desired%send+or%receive+command.  Do not enter further commands\n    until the message%File transfer complete+appears on the PC screen.\n\n 5. The file has now been tranferred.  Jump back to the TSO session if desired.\n)PROC\n &UP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT002": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                              Sample%SEND+Commands\n\n Send PC initialization batch file, AUTOEXEC.BAT, from PC drive C to member\n AUTOEXEC of dataset &ZPREFIX..PROCS.CNTL.  This is a PC3270 with TSO running  +\n+on session A.\n\n   send c:autoexec.bat a:procs.cntl(autoexec) crlf ascii\n\n Send PC data file PRODSTUF.DAT from PC drive A to a new MVS dataset,\n PREFIX.PRODSTUF.DATA.  Primary allocation should be 2 tracks and secondary\n allocation 1 track.  This is a PC with the 3278/79 emulation feature.\n\n   send a:prodstuf.dat 'PREFIX.PRODSTUF.DATA' crlf ascii space(2 1) tracks\n)PROC\n &UP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT003": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                             Sample%RECEIVE+Commands\n\n Receive PC batch file BIGUN.BAT to PC drive C from MVS PDS member\n &ZPREFIX..PCFILES(BIGUN).  This is a PC3270 with TSO running on session A.    +\n\n   receive c:bigun.bat a:pcfiles(bigun) crlf ascii\n\n Receive PC data file PRODSTUF.DAT to PC drive A from MVS dataset\n PREFIX.PRODSTUF.DATA.  This PC has the 3278/79 emulation feature.\n\n   receive a:prodstuf.dat 'prefix.prodstuf.data' crlf ascii\n)PROC\n &UP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT010": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                             IBM PC%&VPCC  +Command\n\n a:&VPCC d:{path}filename{.ext} id:datasetname(membername) CRLF ASCII options\n+\n where:\n\n%a:+ is the fixed disk or diskette drive holding the GCP or emulation system.\n     You need to specify this only if the DOS prompt is incorrect.\n\n%d:+ specifies the fixed disk or diskette drive that either holds the personal\n     computer file to be sent, or will hold the received file.  If it is not\n     specified, the default drive (the drive holding the GCP or emulation\n     system) is assumed.\n\n%{path}+ is the optional personal computer DOS directory search order that sets\n         the command search path through directories.  For further information,\n         refer to DOS Reference.\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT011\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT011": {"ttr": 3598, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n\n%filename+ is the personal computer filename.  A filename must be included.  It\n           can be from one to eight characters long.\n\n%.ext+ is the optional personal computer filename extension.  An extension\n       starts with a period, and has one to three characters.  It immediately\n       follows the filename.\n\n%id:+ must be specified if you have more than one host session in your system\n      (e.g., PC3270).  It is the short name of the TSO session window.  If you\n      do not specify id: but have more than one host session, the file is\n      transferred to the first host session that was created on your system (not\n      necessarily the first in alphabetic order).\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT012\n IF (&VPCC = 'RECEIVE')\n   &ZCONT = VPCT018\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT012": {"ttr": 3600, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n%datasetname+ is the name of the MVS dataset.  You must specify a dataset name.\n              Quotation marks (') can surround the combined dataset name and\n              member name to show that the profile prefix (&ZPREFIX) is not to +\n              be included at the beginning of the dataset name.\n\n%(membername)+ is the name of one of the members in the directory of a\n               partitioned MVS dataset.  The dataset must exist.\n\n For the SEND command, if you specify an existing dataset, then the file will\n replace the existing dataset or PDS member (unless the APPEND option is\n specified).  Otherwise, the dataset will be allocated and cataloged\n automatically.\n\n Examples: If you specify:          &VPCC will use:                            +\n           'PDATASET.PCSTUFF.DATA'  PDATASET.PCSTUFF.DATA\n           PROCS.CNTL(MEMB)         &ZPREFIX..PROCS.CNTL(MEMB)                 +\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT013\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT013": {"ttr": 3602, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                          Options for &VPCC   +command\n\n%ADMGDF+ This is the option you should specify if you are transferring a file\n         from GDDM to use at the work station, and conversely.  It calls the\n         ADMUPC utility that converts GDDM GDF object files to PIF files, and\n         conversely.  Refer to the GDDM Base Programming Reference for more\n         details.\n\n%ASCII+ This specifies that a file should be stored in ASCII when it is\n        transferred to the personal computer session, but converted to EBCDIC\n        when it is transferred to the host session. %If you are transferring a\n        text file, use ASCII so that the file is readable.+\n\n%CRLF+ Specifies that carriage return/line feed characters are recognized as\n       record separators.  They are deleted before storing on the host session,\n       and inserted again before storing on the personal computer session. %If\n       you are transferring a text file, use CRLF so that the file is readable.+\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT014\n IF (&VPCC = 'SEND')\n   &ZCONT = VPCT015\n &ZUP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT014": {"ttr": 3604, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                          Options for RECEIVE command\n\n\n%APPEND+ Allows you to add a personal computer file to the end of a dataset, or\n         a dataset to the end of a personal computer file.  APPEND may not be\n         specified for members of a partitioned data set.\n)PROC\n &ZUP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT015": {"ttr": 3606, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                            Options for SEND command\n\n%APPEND+ Allows you to add a personal computer file to the end of a dataset, or\n         a dataset to the end of a personal computer file.  APPEND may not be\n         specified for members of a partitioned data set.\n\n%BLKSIZE(n)+ When you are%sending+a file, BLKSIZE specifies the block size of\n             the host dataset (n is the number of bytes in a data block).  If it\n             is omitted, BLKSIZE is assumed to be the same as LRECL for new\n             datasets.  If you are adding to, or replacing a dataset, BLKSIZE is\n             the same as that of the existing dataset.\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT016\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT016": {"ttr": 3608, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                            Options for SEND command\n\n%LRECL(n)+ When you are%sending+a file, LRECL specifies the logical record\n           length of the host file or dataset.  \"n\" is the number of characters\n           in each record.\n\n If LRECL is omitted and:\n\n o You are creating a new file, a length of 80 is assumed.\n\n o Your are replacing an existing file or dataset, the length of the records in\n   that file or dataset is assumed.\n\n If you are adding a file to the end of another file or to the end of a dataset\n (using the APPEND option), the value of LRECL for the existing file is assumed\n and you should not specify another value.\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT017\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPCT017": {"ttr": 3610, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n                            Options for SEND command\n\n%RECFM({F|V|U})+ When you are%sending+a file, RECFM specifies whether the host\n                 dataset contains fixed length records (F), variable length\n                 records (V), or undefined length records (U).\n\n                 For new datasets, if RECFM is omitted, F is assumed unless CRLF\n                 is specified.  In this case, V is assumed.\n\n%SPACE(qty,inc)+ When you are%sending+a file, SPACE specifies the amount of\n                 space to be allocated for a new dataset.  The quantity\n                 specified is the initial space to be allocatd; if the increment\n                 is specified, this specifies the additional space to be\n                 allocated when more is required.\n\n                 AVBLOCK(n), TRACKS, or CYLINDERS specify the units used for\n                 quantity and increment.\n\n                 If SPACE is not specified, the value of BLKSIZE (in bytes) is\n                 assumed.\n)PROC\n &ZUP = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPCT018": {"ttr": 3612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf0\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE103"}, "text": "%TUTORIAL --------------  IBM PC File Transfer Program  --------------T TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n\n%datasetname+ is the name of the MVS dataset.  You must specify a dataset name.\n              Quotation marks (') can surround the combined dataset name and\n              member name to show that the profile prefix (&ZPREFIX) is not to +\n              be included at the beginning of the dataset name.\n\n%(membername)+ is the name of one of the members in the directory of a\n               partitioned MVS dataset.  The dataset must exist.\n\n Examples: If you specify:          RECEIVE will use:                          +\n           'PDATASET.PCSTUFF.DATA'  PDATASET.PCSTUFF.DATA\n           PROCS.CNTL(MEMB)         &ZPREFIX..PROCS.CNTL(MEMB)                 +\n\n (More on next panel - press%Enter+to continue)\n)PROC\n &ZCONT = VPCT013\n &ZUP   = VPCT000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VUTL16": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x02\\x0f\\x00\\x98\\x02\\x0f\\x125\\x01\\x9d\\x01\\x9d\\x00\\x00\\xc2\\xc8\\xd6\\xd9\\xe3\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-20T00:00:00", "modifydate": "1998-01-20T12:35:00", "lines": 413, "newlines": 413, "modlines": 0, "user": "BHORTON"}, "text": "//*-----------------------------------------------------------------***\n//*                                                                 ***\n//* LIBRARY: MVS.SYSPROG.CNTL                                       ***\n//* MEMBER:  VUTL16                                                 ***\n//*                                                                 ***\n//* PURPOSE:                                                        ***\n//* ASSEMBLE VUTL16.                                                ***\n//*                                                                 ***\n//* STRINGS TO BE CHANGED BEFORE SUBMISSION ARE:                    ***\n//*                                                                 ***\n//* PNAME    <=== YOUR NAME                                         ***\n//*-----------------------------------------------------------------***\n//        EXEC ASMACL\n//SYSIN    DD  *\nVUTL16   CSECT\nVUTL16   AMODE 31\nVUTL16   RMODE ANY\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         SAVE  (14,12)\n         LR    R12,R15                 LOAD BASE REGISTER\n         USING VUTL16,R12\n         LR    R11,R1                  LOAD CPPL PTR\n         LA    R2,SAVE                 ESTABLISH\n         ST    R13,4(R2)                         SAVE AREA\n         ST    R2,8(R13)                                   CHAINING\n         LR    R13,R2                  PTR TO SAVE INTO R13\n*\n* DEFINE DISPLAY VARIABLES TO ISPF\n*\n         LOAD  EP=ISPLINK              GET ADDRESS OF ISPLINK.\n         ST    R0,@ISPLINK             SAVE.\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#JOB,JOB,#CHAR,F8),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#MAJOR,MAJOR,#CHAR,F8),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#MINOR,MINOR,#CHAR,F44),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#X,X,#CHAR,F80),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#T1,T1,#CHAR,F80),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDEFINE,#T2,T2,#CHAR,F80),VL\n*\n* DISPLAY FIRST PANEL\n*\nDVENQ1   L     R15,@ISPLINK\n         CALL  (15),(#DISPLAY,#VENQ1,MSG),VL\n         LTR   R15,R15                 TEST RETURN CODE.\n         BNZ   RETURN                  RC > 0 , WE'RE DONE.\n         L     R15,@ISPLINK\n         CALL  (15),(#TBCREAT,#ENQTAB,,,#NOWRITE,#REPLACE),VL\n         MVC   TCOUNT(4),=F'0'         BLANK OUT COUNT FIELD.\n         LA    R7,0                    WAIT COUNT ZERO BY DEFAULT.\n         MVC   MSG(8),XB               BLANK OUT MSG.\n         MVC   T1,XB                   BLANK OUT T1.\n         MVC   T2,XB                   BLANK OUT T2.\n         CLI   JOB,C' '                JOB BLANK ?\n         BE    NOTJOB1                 YES, CONTINUE.\n         MVC   T1(27),=C'ENQ STATUS FOR JOB XXXXXXXX'\n         MVC   T1+19(8),JOB\n         MVC   T2(35),=C'TYPE STATUS  SCOPE   MAJOR    MINOR'\n         B     CONT1                   CONTINUE.\n@ISPLINK  DS    F\nNOTJOB1  MVC   T2(22),=C'SCOPE   MAJOR    MINOR'\n         CLI   MAJOR,C' '              MAJOR BLANK ?\n         BNE   NOTCONT                 NO, CONTINUE.\n         CLI   MINOR,C' '              MINOR BLANK ?\n         BNE   NOTCONT                 NO, CONTINUE.\n         LA    R7,1                    YES, CONTENTION REQUESTED.\n         MVC   T1(14),=C'ENQ CONTENTION'\n         B     CONT1\nNOTCONT  MVC   T1(35),=C'ENQ STATUS FOR MAJOR XXXXXXXX MINOR'\n         MVC   T1+21(8),MAJOR          MOVE MAJOR NAME TO MESSAGE.\n         MVC   T1+36(44),MINOR         MOVE MINOR NAME.\nCONT1    EQU   *\n         MVC   TKN,=F'0'               RESET TOKEN.\n         LA    R5,MINOR                POINT TO MINOR.\n         TRT   MINOR,BLTABLE           LOOK FOR BLANK.\n         BNZ   FONE                    FOUND A BLANK.\n         LA    R6,44                   NO BLANK, 44 BYTES ARE PRESENT.\n         B     SCAN                    GO DO IT.\nFONE     SR    R1,R5                   GET MINOR LENGTH.\n         LR    R6,R1                   LOAD IT INTO R6.\n*\n* PREPARE TO SCAN GRS CONTROL BLOCKS\n*\nSCAN     EQU   *\n         L     R0,=F'10000'            GETAMIN AREA FOR RIB/RIBE\n         GETMAIN R,LV=(0)\n         ST    R1,SVGETM               SAVE GETMAIN ADDR\n         LR    R4,R1                   LOAD R4 WITH GETMAINED ADDR\n         USING RIB,R4\n         CLI   MAJOR,C' '\n         BE    SCANALL\n         CLI   MINOR,C' '\n         BE    SCANDSN\n*\n* SCAN WITH BOTH MAJOR AND MINOR NAMES SPECIFIED.\n*\n         GQSCAN AREA=((R4),10000),SCOPE=ALL,                           C\n               RESNAME=(MAJOR,(R5),(R6)),                              C\n               TOKEN=TKN\n         B     CKRTN\n*\n* SCAN WITH JUST MAJOR NAME SPECIFIED.\n*\nSCANDSN  EQU   *\n         GQSCAN AREA=((R4),10000),SCOPE=ALL,                           C\n               RESNAME=(MAJOR),                                        C\n               TOKEN=TKN\n         B     CKRTN                   GO CHECK RETURN CODE\n*\n* SCAN FOR ALL DATA.\n*\nSCANALL  EQU   *\n         GQSCAN AREA=((R4),10000),SCOPE=ALL,WAITCNT=(R7),              C\n               TOKEN=TKN\nCKRTN    EQU   *\n         B     *+4(R15)                R0=0  RESOURCE FOUND\n         B     FOUND                   RC=0  RESOURCE FOUND\n         B     NOTFOUND                RC=4  RESOURCE NOT FOUND\n         B     FULL                    RC=8  QUEUE AREA FULL\n         B     ABEND                   RC=C  ABNORMAL SITUATION\n         B     ABEND                   RC=10 INVALID SYSNAME\nFOUND    EQU   *\n         BAL   R10,LISTDTL\n         B     DTABLE                  GO DISPLAY TABLE.\nNOTFOUND EQU   *\n         CLI   MINOR,C' '              MINOR NAME BLANK ?\n         BE    *+14                    YES, CONTINUE.\n         MVC   MSG(8),=C'TECA080 '     NO, ISSUE MESSAGE.\n         B     DVENQ1                  GO DISPLAY INITIAL PANEL.\n         CLI   MAJOR,C' '              MAJOR NAME BLANK ?\n         BE    *+14                    YES, CONTINUE.\n         MVC   MSG(8),=C'TECA081 '     NO, ISSUE MESSAGE.\n         B     DVENQ1                  GO DISPLAY INITIAL PANEL.\n         MVC   MSG(8),=C'TECA082 '     NO, ISSUE MESSAGE.\n         B     DVENQ1                  GO DISPLAY INITIAL PANEL.\nFULL     EQU   *\n         BAL   R10,LISTDTL             LIST FIRST BLOCK\n         L     R1,SVGETM               LOAD ADDR OF GETMAIN\n         L     R0,=F'10000'            LOAD LENGTH OF GETMAIN\n         FREEMAIN R,LV=(0),A=(1)\n         B     SCAN                    REISSUE GQSCAN\nABEND    EQU   *\n         MVC   MSG(8),=C'TECA083 '     ISSUE MESSAGE.\n         B     DVENQ1                  GO DISPLAY INITIAL PANEL.\n*\n* DISPLAY COMPLETED TABLE\n*\nDTABLE   CLC   TCOUNT(4),=F'0'         ANY THING IN THE TABLE ?\n         BNE   GOODTAB                 YES, CONTINUE.\n         CLI   JOB,C' '                JOB BLANK ?\n         BE    NOTJOB2                 YES, CONTINUE.\n         CLI   MINOR,C' '              MINOR BLANK ?\n         BE    *+14                    YES, CONTINUE.\n         MVC   MSG(8),=C'TECA086 '\n         B     DVENQ1\n         MVC   MSG(8),=C'TECA084 '\n         B     DVENQ1\nNOTJOB2  MVC   MSG(8),=C'TECA085 '\n         B     DVENQ1\nGOODTAB  L     R15,@ISPLINK\n         CALL  (15),(#TBTOP,#ENQTAB),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#TBDISPL,#ENQTAB,#VENQ2),VL\n         B     DVENQ1\nRETURN   EQU   *\n         L     R15,@ISPLINK\n         CALL  (15),(#VDELETE,#JOB),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDELETE,#MAJOR),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDELETE,#MINOR),VL\n         L     R15,@ISPLINK\n         CALL  (15),(#VDELETE,#X),VL\n         L     R13,4(R13)              RESTORE R13\n         L     R14,12(R13)             RESTORE R14\n         LM    R1,R12,24(R13)          RESTORE R1-R12\n         BR    R14                     RETURN\nLISTDTL  EQU   *\n         L     R5,SVGETM               GETMAIN'D AREA ADDRESS.\n         A     R5,=F'10000'            POINT PAST END.\n         CR    R4,R5                   POINTING PAST END ?\n         BNLR  R10                     YES.\n         CLC   0(4,R4),=F'0'           CHECK IF LAST RESOURCE\n         BER   R10                     YES...RETURN\n         LA    R5,40(R4)               LOAD ADDR OF RIBVAR\n         USING RIBVAR,R5\n         LR    R6,R5\n         AH    R6,RIBVLEN              ADDRESS RIBE DESECT\n         USING RIBE,R6\n         L     R8,RIBNRIBE             LOAD NUMBER OF ENTRIES\n         TM    RIBSCOPE,RIBSYS         SYSTEM\n         BNO   CKRIBSS\n         MVC   X1SCOPE(8),=CL8'SYSTEM'\n         B     CKMAJ\nCKRIBSS  EQU   *\n         TM    RIBSCOPE,RIBSYSS        SYSTEMS\n         BNO   CKRIBST\n         MVC   X1SCOPE(8),=CL8'SYSTEMS'\n         B     CKMAJ\nCKRIBST  EQU   *\n         TM    RIBSCOPE,RIBSTEP        STEP\n         BNO   CKRIBGL\n         MVC   X1SCOPE(8),=CL8'STEP'\n         B     CKMAJ\nCKRIBGL  EQU   *\n         TM    RIBSCOPE,RIBGLBL        GLOBAL\n         BNO   CKRIBLO\n         MVC   X1SCOPE(8),=CL8'GLOBAL'\n         B     CKMAJ\nCKRIBLO  EQU   *\n         MVC   X1SCOPE(8),=CL8'LOCAL'\nCKMAJ    EQU   *\n         MVC   X3SCOPE(8),X1SCOPE\n         MVC   X1MAJOR(8),RIBQNAME     MOVE MAJOR NAME\n         MVC   X3MAJOR(8),X1MAJOR\nCKMIN    EQU   *\n         SR    R9,R9                   CLEAR R7\n         IC    R9,RIBRNMLN\n         C     R9,=F'44'               CHECK IF MINOR GREATER 44 CHAR\n         BNH   LOK                     NO.....OK\n         LA    R9,44                   MAKE MAX = 44 CHAR\nLOK      EQU   *\n         BCTR  R9,0                    DECREMENT BY 1 FOR MOVE\n         MVC   X1MINOR(44),XB          BLANK OUT\n         MVC   X3MINOR(44),XB          MINORS.\n         EX    R9,DSPLMIN1             MOVE MINOR\n         EX    R9,DSPLMIN2             MOVE MINOR\n         TR    X1MINOR(L'X1MINOR),TT   TRANSLATE NON PRINTABLES\n         TR    X3MINOR(L'X3MINOR),TT\n         MVI   MINSW,C'Y'              * MINOR OK *\n         CLI   MINOR,C' '              MINOR BLANK ?\n         BE    NOTMIN                  YES, CONTINUE.\n         CLC   MINOR(44),X1MINOR       IS THIS THE RIGHT MINOR ?\n         BE    NOTMIN                  YES, CONTINUE.\n         MVI   MINSW,C'N'              * MINOR NOT OK *\n         B     OWNER                   CONTINUE.\nNOTMIN   CLI   JOB,C' '                IS JOB BLANK ?\n         BNE   OWNER                   NO, CONTINUE.\n         MVC   X,X1                    NO, CREATE LINE 1.\n         L     R15,@ISPLINK\n         CALL  (15),(#TBADD,#ENQTAB,#X),VL\n         L     R9,TCOUNT\n         LA    R9,1(R9)\n         ST    R9,TCOUNT\nOWNER    EQU   *\n         CLI   MINSW,C'Y'              MINOR OK ?\n         BNE   CONT3                   NO, SKIP.\n         TM    RIBERFLG,RIBETYPE       SHR/EXC\n         BNO   CKRIBEX\n         MVC   X2TYPE(4),=C'SHR '\n         MVC   X3TYPE(4),X2TYPE\n         B     CKOWN\nCKRIBEX  EQU   *\n         MVC   X2TYPE(4),=C'EXCL'\n         MVC   X3TYPE(4),X2TYPE\nCKOWN    EQU   *\n         MVC   X2JOB(8),RIBEJBNM       MOVE JOBNAME OF REQUESTER\n         TM    RIBESFLG,RIBESTAT\n         BZ    *+14\n         MVC   X2STATUS(7),=C'OWNER  '\n         B     *+10\n         MVC   X2STATUS(7),=C'WAITING'\n         MVC   X3STATUS(7),X2STATUS\n         MVC   X2(8),=X'0000000000000000'\n         MVC   X2SYSID(4),RIBESYSN\n         CLI   JOB,C' '\n         BE    NOTJOB3\n         CLC   JOB,RIBEJBNM\n         BNE   CONT3\n         MVC   X,X3\n         L     R15,@ISPLINK\n         CALL  (15),(#TBADD,#ENQTAB,#X),VL\n         L     R9,TCOUNT\n         LA    R9,1(R9)\n         ST    R9,TCOUNT\n         B     CONT3\nNOTJOB3  MVC   X,X2\n         L     R15,@ISPLINK\n         CALL  (15),(#TBADD,#ENQTAB,#X),VL\n         L     R9,TCOUNT\n         LA    R9,1(R9)\n         ST    R9,TCOUNT\nCONT3    A     R6,=AL4(RIBEEND-RIBE)\n         MVC   X1,XB\n         MVC   X2,XB\n*        MVC   X3,XB\n         BCT   R8,OWNER\nCONT4    LR    R4,R6\n         B     LISTDTL\nDSPLMIN1 MVC   X1MINOR(0),RIBRNAME     MOVE MINOR NAME\nDSPLMIN2 MVC   X3MINOR(0),RIBRNAME\n         PRINT GEN\n         EJECT\nMINSW    DC    C'Y'\nMSG      DS    CL8\n#DISPLAY DC    C'DISPLAY '\n#NOWRITE DC    C'NOWRITE '\n#REPLACE DC    C'REPLACE '\n#ENQTAB  DC    C'ENQTAB '\n#VDEFINE DC    C'VDEFINE '\n#VDELETE DC    C'VDELETE '\n#TBDISPL DC    C'TBDISPL '\n#TBADD   DC    C'TBADD '\n#TBCREAT DC    C'TBCREATE '\n#TBTOP   DC    C'TBTOP '\n#VENQ1   DC    C'VENQ1 '\n#VENQ2   DC    C'VENQ2 '\n#JOB     DC    C'(JOB) '\n#MAJOR   DC    C'(MAJOR) '\n#MINOR   DC    C'(MINOR) '\n#X       DC    C'(X) '\n#T1      DC    C'(T1) '\n#T2      DC    C'(T2) '\n#CHAR    DC    C'CHAR '\nTCOUNT   DC    F'0'\nF8       DC    F'8'\nF44      DC    F'44'\nF80      DC    F'80'\nJOB      DC    CL8' '\nMAJOR    DC    CL8' '\nMINOR    DC    CL44' '\nX        DS    CL80\nT1       DS    CL80\nT2       DS    CL80\nXB       DC    CL80' '\nSAVE     DC    18F'0'\nSVGETM   DS    F\nTT       DS    0CL256\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  00-0F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  10-1F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  20-2F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  30-3F\n         DC    X'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F'  40-4F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  50-5F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  60-6F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  70-7F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  80-8F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  90-9F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  A0-AF\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  B0-BF\n         DC    X'C0C1C2C3C4C5C6C7C8C94B4B4B4B4B4B'  C0-CF\n         DC    X'4BD1D2D3D4D5D6D7D8D94B4B4B4B4B4B'  D0-DF\n         DC    X'4B4BE2E3E4E5E6E7E8E94B4B4B4B4B4B'  E0-EF\n         DC    X'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'  F0-FF\nBLTABLE  DS    0CL256\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'00000000000000000000000000000000'  00-0F\n         DC    X'00000000000000000000000000000000'  10-1F\n         DC    X'00000000000000000000000000000000'  20-2F\n         DC    X'00000000000000000000000000000000'  30-3F\n         DC    X'01000000000000000000000000000000'  40-4F\n         DC    X'00000000000000000000000000000000'  50-5F\n         DC    X'00000000000000000000000000000000'  60-6F\n         DC    X'00000000000000000000000000000000'  70-7F\n         DC    X'00000000000000000000000000000000'  80-8F\n         DC    X'00000000000000000000000000000000'  90-9F\n         DC    X'00000000000000000000000000000000'  A0-AF\n         DC    X'00000000000000000000000000000000'  B0-BF\n         DC    X'00000000000000000000000000000000'  C0-CF\n         DC    X'00000000000000000000000000000000'  D0-DF\n         DC    X'00000000000000000000000000000000'  E0-EF\n         DC    X'00000000000000000000000000000000'  F0-FF\nTKN      DC    F'0'\n*\n* LINE 1 FOR NON-JOB-SPECIFIC\n*\nX1       DC    CL80' '\nX1SCOPE  EQU   X1\nX1MAJOR  EQU   X1+8\nX1MINOR  EQU   X1+17\n*\n* LINE 2 FOR NON-JOB-SPECIFIC\n*\nX2       DC    CL80' '\nX2STATUS EQU   X2+8\nX2TYPE   EQU   X2+17\nX2SYSID  EQU   X2+22\nX2JOB    EQU   X2+27\n*\n* LINE 1 FOR JOB-SPECIFIC\n*\nX3       DC    CL80' '\nX3TYPE   EQU   X3\nX3STATUS EQU   X3+5\nX3SCOPE  EQU   X3+13\nX3MAJOR  EQU   X3+21\nX3MINOR  EQU   X3+30\nRIB      ISGRIB\n         CVT DSECT=YES\n         END\n/*\n//LKED.SYSLMOD DD DSN=SYS1.CMDLIB2(VUTL16),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT103/FILE103.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT103", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}