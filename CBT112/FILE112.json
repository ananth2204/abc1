{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011244000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2057510, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE112.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2057510, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2057510, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE112.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00#\\x05'", "DS1TRBAL": "b'\\x8c\\x1e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xb8\\x00\\x01\\x00\\xba\\x00\\x06\\x00$'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x16\\x01\\x190\\x7f\\x01\\x190\\x7f\\tT\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-03T00:00:00", "modifydate": "2019-11-03T09:54:16", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  112\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE112\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 120 MEMBERS COUNTED; CUMULATIVE SIZE IS 18,918 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/03/19    09:54:16    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x01$?\\x01\\x01$?\\tW\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe6\\xe2\\xc9\\xd4\\xd6\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-31T00:00:00", "modifydate": "2001-08-31T09:57:46", "lines": 30, "newlines": 30, "modlines": 0, "user": "WSIMONS"}, "text": "Subject: RE: Contribution\nDate: Thu, 30 Aug 2001 12:12:47 -0500\nFrom: \"Sirmons, Wade\" <wsirmons@firstam.com>\nTo: 'Sam Golob' <sbgolob@attglobal.net>\n\nHi Sam,\n\nI documented the change in the $MODS member, as well as in the\ncomments at the top of several programs.  I was unable to use the\nVTOC command \"ALL\" option due to the number of volumes we have.\n\nMy changes are as follows:\n\nI converted VTOC from AMODE24 to AMODE31 and moved the VTOC table\nabove-the-line.\n\nI increased the max size of the VTOC table large enough so that I\ncould use the VTOC ALL option.\n\nThanks,\nWade\n\nWade Sirmons\nExcelis Inc\n8435 Stemmons Freeway\n3rd Floor\nDallas, Tx   75247\n\nemail: wsirmons@firstam.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x10\\x14\\x1f\\x01\\x10\\x14\\x1f\\t2\\x00+\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-05-21T00:00:00", "modifydate": "2010-05-21T09:32:57", "lines": 43, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: VTOC - Page 0 Flag\nFrom:     \"John P Kalinich\" <jkalinic@csc.com>\nDate:     Tue, 18 May 2010 14:10:17 -0400\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nUpdates submitted.\n\nMembers changed:\n\n VTOC               01.26  1992/03/24  2010/05/18 13:39  1032\n VTOCENQ            01.23  2001/08/03  2010/05/18 13:56   221\n VTOCEXCP           01.03  1994/11/21  2010/05/18 13:33   576\n VTOCFORM           01.47  1992/03/25  2010/05/18 13:39   651\n VTOCOM             01.22  1992/03/24  2010/05/18 13:37   144\n\n(See attached file: FILE112.zip)\n\nJohn P Kalinich wrote:\n\nSam/Greg,\n\nI think there is a bug in VTOC on statement 037100.  It was flagged as a\npage zero reference on the assembly.\n\nRegards,\nJohn K\n\n<present>\nEDIT       AD.FILE112.PDS466(VTOCFORM) - 01.29         Columns 00001 000\nCommand ===>                                              Scroll ===> CS\n037000 USEDNVSM DS    0H TANSKY\n037100          CLC   DSORG(4),ZEROES  MAYBE IT WASN'T EVER OPENED\n037200          BE    USEDOK0        THEN NO SPACE USED IS OK\n\n\n<proposed>\nEDIT       AD.FILE112.PDS466(VTOCFORM) - 01.29         Columns 00001 000\nCommand ===>                                              Scroll ===> CS\n037000 USEDNVSM DS    0H TANSKY\n037100          CLC   DS1DSORG(2),ZEROES  MAYBE IT WASN'T EVER OPENED\n037200          BE    USEDOK0        THEN NO SPACE USED IS OK\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE3": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x190\\x7f\\x01\\x190\\x7f\\tS\\x00%\\x00%\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-11-03T00:00:00", "modifydate": "2019-11-03T09:53:29", "lines": 37, "newlines": 37, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  VTOC command\nFrom:     \"Cieri, Anthony\" <ACieri@seic.com>\nDate:     10/23/2019, 2:34 PM\nTo:       Sam Golob <sbgolob@CBTTAPE.ORG>\nCC:       \"Cieri, Anthony\" <ACieri@seic.com>\n\n Hello Sam,\n\n I was recently downloading a refresh of the VTOC (CBT File 112)\n command.  I was looking for an option to suppress the Total line\n in additional to the Heading line.\n\n While looking through the VT0CPRNT member, I noticed code\n checking for a \"No Total\" option:\n\nPRNTOT ST R8,PRNTTOT8 SAVE THE RETURN ADDRESS\n*\nCLI TOTALK+1,2 NO TOTALS? HXF-ALL\nBER R8 RETURN HXF-ALL\n*\n\n However, when I checked the VTOCPARS member, no such option was\n present. I have recoded the IKJPARS macro at label TOTALK, as\n follows:\n\nTOTALK IKJKEYWD\nIKJNAME 'TOTALS',SUBFLD=SUBTOTAL\nIKJNAME 'NOTOTALS'\n\n After a quick reassemble and link, I have a new VTOC command that\n supports both the NOHEADING and NOTOTALS options.  I just wanted\n to bring this to your attention, if you were not aware of it.\n\n Many thanks for your support of a great TSO command!!!\n\n Tony Cieri\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$UNDOC": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x88\\x04\\x9f\\x00\\x88#\\x8f\\x07\\x18\\x00\\x0b\\x00\\r\\x00\\x00\\xc8\\xc1\\xc2\\xd3@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-02-18T00:00:00", "modifydate": "1988-08-25T07:18:00", "lines": 11, "newlines": 13, "modlines": 0, "user": "HABL"}, "text": "THE FOLLOWING OPTIONS SEEM TO BE DOCUMENTED WRONG OR NOT AT ALL:\n\n  BREAK(N)     OUTPUT NEW HEADING OF THE FIRST \"N\" CHARACTERS DIFFER\n\n  TOTAL(N)     OUTPUT RUNNING TOTALS IF THE FIRST \"N\" CHARACTERS\n               DIFFER\n\n  OUTPUT       OUTPUT ENCODED DSCB? ON FILE \"OUTPUT\"\n\n  FORMAT       ?????????\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CUSTOM": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\x08_\\x00\\x92\\x08_\\x14\\x01\\x00\\x05\\x00\\x05\\x00\\x02\\xe5\\xc7\\xc3\\xc1\\xd9\\xe3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "1992-03-25T14:01:00", "lines": 5, "newlines": 5, "modlines": 2, "user": "VGCART"}, "text": "     It is important to customize the sort tables in the VTOCCMD CSECT\n(member VTOC, VT0C, OR VT2C).  When sorting many dataset names I saw a\ndecrease of over 50% in CPU usage (15 seconds instead of 38) and a\ngreater decrease in elapsed time (41 seconds instead of 176) after I\ncustomized the tables for my installation.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DHC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x01\"o\\x01\\x01\"o\\x11 \\x00\\x05\\x00\\x05\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-14T00:00:00", "modifydate": "2001-08-14T11:20:31", "lines": 5, "newlines": 5, "modlines": 0, "user": "MMSMAK"}, "text": "*\n*  MODIFICATIONS TO THE VTOC COMMAND IN AUGUST 2001               *DHC*\n*\n*       1.  MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD           *DHC*\n*       TO SHOW IF DATASET IS IN USE BY TESTING FOR SYSDSN ENQ'S  *DHC*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$HELP": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x01\\x00\\x92\\x08_\\x01\\x19)\\x7f\\x12\\x01\\x01]\\x00\\xea\\x00\\x00\\xe2\\xc3\\xd5\\xe2\\xf0\\xf3@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "2019-10-24T12:01:01", "lines": 349, "newlines": 234, "modlines": 0, "user": "SCNS03"}, "text": ")F FUNCTION -\n  THE VTOC COMMAND DISPLAYS SELECTED DATA SETS ON A DISK OR SET OF\n  DISKS.  EACH DISK HAS A VOLUME TABLE OF CONTENTS ( VTOC ).  THIS\n  TABLE IS SEARCHED FOR DATA SETS THAT MEET THE SPECIFICATIONS.\n)X SYNTAX -\n         VTOC     'VOLUME-LIST'           LEVEL('DSNAME-START')\n                                          EXLEVEL('DSNAME-START')\n                                          CONTAINING('DSNAME-STRING')\n                                          ENDING('DSNAME-END')\n                                          BREAK('BREAK-CHARS')\n                  CAT\n                  ENQ\n                  TRK/CYL/KB/MB\n                  NOSORT/SORT('SORT-FIELDS')\n                  NOPRINT/PRINT('PRINT-OP' ('PRINT-ITEM-LIST'))\n                  LIMIT('KEYWORD' 'OPER' 'VALUE')\n                  AND1/OR1('KEYWORD' 'OPER' 'VALUE')\n                  AND2/OR2('KEYWORD' 'OPER' 'VALUE')\n                  AND3/OR3('KEYWORD' 'OPER' 'VALUE')\n                  CHARS('CHARS-PER-LINE')\n                  LINES('LINES-PER-PAGE')\n                  NOHEADING/HEADING('TEXT')\n                  DSNLEN('LENGTH')\n  REQUIRED - 'VOLUME-LIST'\n  DEFAULTS - LIST ALL DATA SETS ON THE VOLUME(S) SELECTED.\n             SORT, PRINT, TRK\n)O OPERANDS -\n))'VOLUME-LIST'     - A VOLUME SERIAL NUMBER OR A LIST OF VOLUMES.\n              IF THE FIRST ONE TO FIVE CHARACTERS OF A VOLUME\n              SERIAL NUMBER ARE ENTERED, ALL VOLUMES THAT ARE\n              MOUNTED ON THE MACHINE WHICH START WITH THOSE\n              CHARACTERS WILL BE LISTED.\n              IF 'ALL' IS SPECIFIED, ALL NON-VIRTUAL VOLUMES\n              WHICH ARE ONLINE AND READY WILL BE PROCESSED.\n              IF 'ALV' IS SPECIFIED, ALL VIRTUAL VOLUMES\n              WHICH ARE ONLINE AND READY WILL BE PROCESSED,\n              IF THEY ARE MOUNTED PRIVATE/RESERVED OR\n              PRIVATE/RESIDENT.\n))LEVEL('DSNAME-START')  - SPECIFIES THE HIGH LEVEL QUALIFIERS TO BE\n         SEARCHED.  THIS WILL NOT BE PREFIXED BY YOUR USERID OR\n         PREFIX.  ONLY DATA SETS STARTING WITH THESE PREFIXES WILL\n         BE LISTED.\n))EXLEVEL('DSNAME-START')  - SPECIFIES THE HIGH LEVEL QUALIFIERS TO\n         BE OMITTED.  THIS WILL NOT BE PREFIXED BY YOUR USERID OR\n         PREFIX.  DATA SETS STARTING WITH THESE PREFIXES WILL NOT\n         BE LISTED.\n))CONTAINING('DSNAME-STRING') - SPECIFIES A CHARACTER STRING CONTAINED\n         IN THE DATA SET NAME.  AT LEAST ONE OF THE STRINGS MUST\n         BE IN THE DSNAME FOR THE DATA SET TO BE LISTED.\n         THESE STRINGS NEED NOT CONFORM TO DSNAME STANDARDS.\n         THEY CAN BEGIN WITH A PERIOD OR A NUMBER.\n))ENDING('DSNAME-END')  - SPECIFIES THE ENDING CHARACTERS OF THE\n         DSNAME.  THE FINAL NONBLANK CHARACTERS OF THE DSNAME MUST\n         BE ONE OF THESE STRINGS TO ALLOW THE DATA SET TO BE LISTED.\n         THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n))CAT      -  A LOCATE IS DONE FOR EACH DSNAME ON THE VOLUMES LISTED\n         AND STATUS IS INDICATED.  NOTE -  THIS OPTION USES A\n         CONSIDERABLE AMOUNT OF PROCESSING TIME.\n         C -  CATALOGED ON THIS VOLUME\n         N -  NOT CATALOGED\n         W -  CATALOGED ON ANOTHER VOLUME\n         E -  CATALOG PROCESSING ERROR\n))ENQ      -  A TEST IS PERFORMED FOR AN ENQ WITH A MAJOR NAME OF\n         SYSDSN AND A MINOR NAME OF THE DATASET NAME TO FIND OUT\n         IF THE DATASET IS IN USE. IF THE DATASET IS VSAM THE CLUSTER\n         NAME IS LOCATED AND USED FOR THE ENQ TEST.\n         NOTE -  THIS OPTION USES A  LOT OF PROCESSING TIME.\n         N -  NOT ENQUEUED\n         S -  ALLOCATED WITH DISP=SHR\n         E -  EXCLUSIVELY ALLOCATED\n         ? -  CATALOG PROCESSING ERROR\n         * -  ENQUEUE PROCESSING ERROR\n))TRK      -  SPACE IS TO BE REPORTED IN TRACK UNITS.\n))CYL      -  SPACE IS TO BE REPORTED IN CYLINDER UNITS.\n))KB       -  SPACE IS TO BE REPORTED IN KILOBYTE UNITS.\n))MB       -  SPACE IS TO BE REPORTED IN MEGABYTE UNITS.\n))NOSORT   -  THE DATA SETS ARE NOT SORTED.  THEY ARE OUTPUT AS THEY\n              ARE FOUND.\n))SORT('SORT-FIELDS') DATA SETS ARE SORTED INTO ALPHABETICAL ORDER,\n              BASED UPON THE SORT FIELDS SPECIFIED.\n              DSNAME,VOLUME,ALLOC,USED,UNUSED,PCT,EX,DSO,RFM,\n              LRECL,BLKSZ,CDATE,EXPDT,REFDT ARE VALID SORT FIELDS.\n              'A/D'   IS REQUIRED AFTER EACH SORT FIELD TO INDICATE\n              ASCENDING/DESCENDING SEQUENCE.\n))BREAK('BREAK-CHARS') - THE LISTING WILL CONTAIN A NEW HEADER,\n              ( ON A NEW PAGE IF THE VTOCOUT DD CARD OPTION IS USED ),\n              WHENEVER THE SPECIFIED NUMBER OF CHARACTERS DIFFERS\n              FROM THE PRECEDING DATA SET.  THIS OPTION FUNCTIONS\n              ONLY WITH THE SORT OPTION.\n))CHARS('CHARS-PER-LINE') - SPECIFIES THE NUMBER OF CHARACTERS ON EACH\n              LINE OF OUTPUT.  THE DEFAULT IS 150 FOR PRINT AND THE\n              LINESIZE OF THE TERMINAL FOR TSO SESSIONS.\n              YOU CAN GET MORE INFORMATION BY SPECIFYING A LARGER\n              NUMBER OF CHARACTERS PER LINE OR YOU CAN LIMIT THE\n              PRINTING BY SETTING A SMALLER NUMBER OF CHARACTERS\n              PER LINE OF OUTPUT.\n))LINES('LINES-PER-PAGE') - SPECIFIES THE NUMBER OF LINES BEFORE A NEW\n              TITLE LINE IS PRODUCED.  IT DEFAULTS TO 60 FOR PRINT\n              AND TO THE SCREEN SIZE FOR TSO SESSIONS.\n))NOHEADING   - DO NOT PRODUCE A HEADING.  THE HEADING WILL ONLY BE\n              OUTPUT IF THE VTOCOUT DD STATEMENT IS PRESENT.\n))HEADING('TEXT') - IF A DD STATEMENT WITH A DDNAME OF VTOCOUT IS\n              PRESENT, THIS TEXT WILL BE USED TO BEGIN EVERY PAGE.\n              CARRIAGE CONTROL SHOULD BE INCLUDED ( ASA ).  THE\n              DEFAULT HEADER CONSISTS OF VTOC COMMAND VERSION 02\n              AND THE COMMAND THAT WAS ENTERED.\n))NOTOTALS    - DO NOT PRODUCE A TOTALS LINE. THE TOTALS LINE WILL BE\n              OMITTED EVEN IF THE VTOCOUT DD STATEMENT IS PRESENT. THE\n              DEFAULT IS TO PRODUCE ONE FINAL TOTAL LINE.\n))DSNLEN('LENGTH') - SPECIFIES THE LENGTH OF THE DSNAME TO PRINT.\n              THE REST OF THE DSNAME IS TRUNCATED.  THE CHARS PARAMETER\n              WILL ALSO CAUSE THE DSNAME TO BE TRUNCATED, IF THE NAME\n              AND THE PRECEDING INFORMATION EXCEEDS THE PRINT LINE.\n))NOPRINT     - SPECIFIES THAT INDIVIDUAL ITEMS ARE NOT TO BE LISTED.\n              THE COMMAND CAN BE USED TO CALCULATE TOTALS.\n))PRINT('PRINT-OP' ('PRINT-ITEM-LIST')) -\n              SPECIFIES THE ITEMS TO PRINT.  THE 'PRINT-OP' IS THE\n              OPERATION TO BE DONE.  THEY INCLUDE THE FOLLOWING.\n                NEW - THE 'PRINT-ITEM-LIST' IS A COMPLETE LIST OF WHAT\n                      TO PRINT.\n                REP - THE FIRST 'PRINT-ITEM' WILL BE REPLACED WITH THE\n                      REST OF THE ITEMS ON THE LIST.\n                ADD - THE REST OF THE 'PRINT-ITEM-LIST' WILL BE ADDED\n                      AFTER THE FIRST ITEM ON THE LIST.\n                DEL - THE ITEMS ON THE 'PRINT-ITEM-LIST' WILL NOT BE\n                      PRINTED.\n\n              THE 'PRINT-ITEM-LIST' NAMES ARE THE SAME KEYWORDS USED\n              IN LIM, AND, AND OR FUNCTIONS AND ARE ALSO THE TITLES\n              AS PRINTED.  THESE KEYWORDS CAN BE ALLOC, UNUSED, USED,\n              PCT, EX, DSO, RFM, BLKSZ, LRECL, CDATE, EXPDT, REFDT,\n              SECT, PASS, ROUND, CCHH, VOLUME, UNIT, DSNAME, ACTION,\n              TYPE, RACF OR UPD.\n\n              THE ADD, DEL, AND REP PRINT OPERATIONS REFER TO THE\n              DEFAULT PRINT LIST.  THE DEFAULT LIST IS ALLOC, UNUSED,\n              PCT, EX, DSO, RFM, BLKSZ, LRECL, REFDT, CDATE, VOLUME,\n              DSNAME, EXPDT, SECQ, SECT, ROUND, PASS, ACTION, AND\n              TYPE.  AS NOTED UNDER CHARS ABOVE, ONLY THE ITEMS THAT\n              WILL FIT ON THE PRINT LINE WILL BE LISTED.\n\n              NOTE: IF CCHH IS CHOOSEN IT DEFAULTS TO THE CCHH RANGE\n              OF THE FIRST EXTENT; HOWEVER, IF LIM/AND/OR SELECTION\n              IS PERFORMED, THE CCHH RANGE OF THE EXTENT WHICH\n              SATISFIES THE SELECTION WILL BE USED INSTEAD.\n))LIMIT('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n              BE LISTED.  ONLY DATA SETS THAT SATISFY THE RELATION\n              ARE LISTED.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))'KEYWORD'   - IS THE NAME OF A DATA SET FIELD.  THE LIST OF CURRENTLY\n                PROVIDED FIELDS FOLLOWS.  THE KEYWORDS AND THEIR VALUES\n                ARE THE SAME AS IN THE VTOC OUTPUT.\n\n                      ALLOC      DATA SET ALLOCATION\n                                    NUMBER OF KILOBYTES, TRACKS,\n                                    CYLINDERS, OR MEGABYTES ALLOCATED.\n                                    DEFAULT IS IN TRACKS.\n                      UNUSED     AMOUNT OF UNUSED SPACE IN THE DATA\n                                    SET.  SAME UNITS AS IN ALLOC.\n                      USED       AMOUNT OF SPACE USED IN THE DATA SET.\n                                    SAME UNITS AS IN ALLOC.\n                      PCT        PERCENTAGE OF SPACE USED IN THE DATA\n                                    USED.\n                      EX         NUMBER OF EXTENTS IN THE DATA SET.\n                      DSO        DATA SET ORGANIZATION\n                                    PS = SEQUENTIAL  PO = PARTITIONED\n                                    VS = VSAM        PE = PDSE\n                                    DA = DIRECT      IS = ISAM\n                                    U = UNMOVEABLE   HF = HFS\n                                    X = EXTENDED FORMAT\n                      RFM        RECORD FORMAT\n                                    F  = FIXED        V  = VARIABLE\n                                    U  = UNDEFINED    B  = BLOCKED\n                                    T  = TRACK OVERFLOW\n                                    S  = SPANNED OR STANDARD\n                                    A  = ASA CARRIAGE CONTROL\n                                    M  = MACHINE CARRIAGE CONTROL\n                      BLKSZ      BLOCKSIZE FOR PHYSICAL BLOCKS OF\n                                    DATA.\n                      LRECL      LOGICAL RECORD LENGTH IN BYTES.\n                      CDATE      CREATION DATE IN THE FORM YYDDD,\n                                    SOMETIMES CALLED JULIAN.\n                      EXPDT      EXPIRATION DATE IN THE SAME FORM.\n                                    THIS FIELD IS RARELY USED HERE.\n                      REFDT      LAST USE DATE IN THE SAME FORM.\n                                    THIS DATE IS WHEN THE DATA SET WAS\n                                    LAST OPENED.\n                      SECT       TYPE OF ALLOCATION\n                                    A  = ABSOLUTE TRACK\n                                    B  = BLOCKS\n                                    T  = TRACKS\n                                    C  = CYLINDERS\n                      PASS       PROTECTION INDICATORS\n                                    N  = NONE\n                                    R  = READ AND WRITE PROTECTION\n                                    W  = WRITE PROTECTION\n                      ROUND      SPACE ROUNDED UP TO CYLINDERS\n                                    R  = ROUND\n                                    N  = NO ROUND\n                      CCHH       CYLINDER AND HEAD ADDRESS, IN 4 OR 8\n                                    HEXADECIMAL DIGITS.  IF 4 DIGITS\n                                    ARE USED, ONLY THE CYLINDER IS USED\n                                    FOR COMPARISON, OTHERWISE, THE CYL\n                                    AND TRACK ARE COMPARED.\n                      VOLUME     VOLUME SERIAL NUMBER OR DISK NAME\n                      UNIT       UNIT OR DEVICE TYPE\n                      DSNAME     NAME OF THE DATA SET\n                      ACTION     SOME ERROR INDICATIONS\n                      TYPE       RESERVED FOR EXIT USAGE.\n                      RACF       RACF INDICATOR\n                                    N  = NOT INDICATED\n                                    Y  = INDICATED\n                      UPD        UPDATED SINCE LAST BACKUP\n                                    N  = NOT UPDATED\n                                    Y  = UPDATED\n))'OPER'      - IS AN OPERATOR.  THE LIST OF OPERATORS FOLLOWS.\n                        EQ       IS EQUAL TO\n                        NE       IS NOT EQUAL TO\n                        LE       IS LESS THAN OR EQUAL TO\n                        LT       IS LESS THAN\n                        GE       IS GREATER THAN OR EQUAL TO\n                        GT       IS GREATER THAN\n))'VALUE'     - GIVES THE VALUE OF THE ITEM FOR COMPARISON, SUCH AS\n              FB, PS, R, OR A NUMBER.\n))AND1('KEYWORD' 'OPER' 'VALUE') -  SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE LIMIT AND THIS CONDITION MUST\n                 BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))OR1('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE LIMIT OR THIS CONDITION MUST\n                 BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))AND2('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))OR2('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))AND3('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  BOTH THE PREVIOUS RESULT AND THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))OR3('KEYWORD' 'OPER' 'VALUE') - SPECIFIES WHICH DATA SETS ARE TO\n                 BE LISTED.  EITHER THE PREVIOUS RESULT OR THIS\n                 CONDITION MUST BE TRUE TO ALLOW THE LISTING.\n\n              'KEYWORD' CAN BE ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF OR UPD.\n              'OPER' CAN BE EQ, NE, LE, LT, GE OR GT.\n              'VALUE' CAN BE A COMPARISON VALUE SUCH AS FB, PS, R OR\n              A NUMBER LIKE 51.\n))EXAMPLES -\n\n 1. LIST ALL DATA SETS ON VOL.\n       VTOC VOL\n\n 2. LIST ALL DATA SETS ON ALL VOLUMES.\n       VTOC ALL\n\n 3. LIST ALL DATA SETS THAT START WITH XXX ON ANY MVSXX VOLUME.\n       VTOC MVS LEV(XXX)\n\n 4. LIST ALL DATA SETS CONTAINING LIST NOT BEGINNING WITH SYS1.\n       VTOC VOL CONT(LIST) EXLEV(SYS1)\n\n 5. LIST ALL RECENTLY CREATED DATA SETS.\n       VTOC VOL LIM(CDATE GT 94001)\n\n 6. LIST DATA SETS WITH UNUSED SPACE.\n       VTOC VOL LIM(PCT LT 50) OR1(UNUSED GT 30)\n\n 7. LIST DATA SETS WITH MULTIPLE EXTENTS.\n       VTOC VOL LIM(EX GT 1)\n\n 8. LIST ALL OF A USER'S DATA SETS ON TSO001.\n       VTOC TSO001 LEVEL(TMTCEXX)\n\n 9. LIST ALL DATA SETS OVER 100 TRKS.\n       VTOC VOL LIM(ALLOC GT 100)\n\n 10. LIST DATA SETS IN VTOC SEQUENCE.\n       VTOC STR902 NOSORT\n\n 11. LIST DATA SETS UNDER THE FIXED HEADS.\n       VTOC VOL LIM(CC EQ 0001) OR1(CC EQ 0002)\n\n 12. LIST OLD PDS'S WITH FREE SPACE.\n       VTOC VOL LIM(CDATE LT 92001) AND1(DSO EQ PO) AND2(UNUSED GT 30)\n\n 13. LIST USED SPACE INSTEAD OF UNUSED IN TRACKS.\n       VTOC VOL PRINT(REP (UNUSED USED)) TRK\n\n 14. LIST CLIST DATA SETS.\n       VTOC VOL END(CLIST)\n\n 15. LIST ALL OF THE INFORMATION ABOUT USER'S DATA SETS AT A 3270.\n       VTOC VOL CHAR(150)\n\n 16. CHECK IF DATASETS ARE CATALOGED ON THIS VOLUME.\n       VTOC VOL CAT PRINT(NEW (ALLOC PCT CAT DSNAME))\n\n 17. LIST ANY DATA SET ON A BAD TRACK.\n       VTOC STR902 LIM(CCHH EQ 003C0003) PRINT(REP (REFDT CCHH))\n\n 18. LIST ANY DATA SETS ON A BAD CYLINDER.\n       VTOC STR902 LIM(CCHH EQ 003C) PRINT(REP (REFDT CCHH))\n\n 19. LIST ALL DATA SETS ON 335XXX VOLUMES SORTED BY ALLOC IN DESCENDING\n     SEQUENCE, VOLUME AND DSNAME IN ASCENDING SEQUENCE.\n       VTOC 335 SORT(ALLOC,D,VOLUME,A,DSNAME,A)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INST": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//*\n//* *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n//*                                                                   *\n//* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS *\n//* CONCERNING THIS PROGRAM TO:                                       *\n//*                                                                   *\n//*   A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n//*   SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n//*   500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n//*   BURLINGAME, CA  94010                                           *\n//*   (415) 696-1800                       HOME (408) 997-2366        *\n//*   INTERNET: BRUCE_LELAND@SERENA.COM                               *\n//*                                                                   *\n//* *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n//*\n//*** NOTES:\n//***   1.  THIS JCL MEMBER ASSEMBLES AND LINKS THE VTOC COMMAND\n//***       USING SOURCE LIBRARY CBT.FILE112.DATA (THIS DATA SET)\n//***       AND LINKS INTO LIBRARY SYS1.CMDLIB, MEMBER VTOC\n//***   2.  TO USE THE IFOX ASSEMBLER, CHANGE IEV90 TO IFOX00\n//***   3.  FOR MVS SP 1.2 OR EARLIER SYSTEMS, SEE BELOW:\n//***   4.  FOR A DIFFERENT FORMAT OF VTOC OUTPUT, SEE BELOW:\n//***\n//*\n//VTOCASM PROC MEMBER=\n//ASM     EXEC PGM=IEV90,\n//             PARM='DECK,NOOBJECT,TERM,RENT,ALIGN,XREF(SHORT)'\n//SYSLIB   DD  DSN=CBT.FILE112.DATA,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSPUNCH DD  DSN=&&V,DISP=(MOD,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=3200\n//SYSIN    DD  DSN=CBT.FILE112.DATA(&MEMBER),DISP=SHR\n//        PEND\n//*\n//***   NOTE: FOR MVS SP 1.2 OR EARLIER SYSTEMS, CHANGE MEMBER=VTOC\n//***   TO MEMBER=VTOC112 (MEMBER VTOC USES MVS UCB SCAN SERVICES).\n//*\n//VTOC    EXEC VTOCASM,MEMBER=VTOC\n//*\n//CHEK    EXEC VTOCASM,MEMBER=VTOCCHEK\n//EXCP    EXEC VTOCASM,MEMBER=VTOCEXCP\n//FORM    EXEC VTOCASM,MEMBER=VTOCFORM\n//MSG     EXEC VTOCASM,MEMBER=VTOCMSGX\n//SORT    EXEC VTOCASM,MEMBER=VTOCSORT\n//*\n//***   NOTE:  ALL OF THE MOST RECENT UPDATES WENT INTO THE VT0CPRNT\n//***          MEMBER.  THE VTOCPRNT MEMBER IS FOR USE BY THOSE WISHING\n//***          TO KEEP THE COLUMN WIDTHS THE SAME AS THEY USED TO BE.\n//***   IF YOU WANT THE OLD FORMAT WITHOUT THE NEW STUFF, SUBSTITUTE\n//***   VTOCPRNT FOR VT0CPRNT IN THE FOLLOWING STATEMENT.\n//*******  IT HAS NOT BEEN TESTED THAT WAY, BUT IT SHOULD WORK ********\n//PRNT    EXEC VTOCASM,MEMBER=VT0CPRNT\n//*\n//LKED    EXEC PGM=IEWL,COND=(5,LT),\n//             PARM='LIST,LET,RENT,REUS,REFR,MAP'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSLMOD  DD  DSN=SYS1.CMDLIB(VTOC),DISP=SHR\n//SYSLIN   DD  DSN=&&V,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$JOB": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00P\\x00\\x942_\\x01\\x10\\x13\\x8f\\x13B\\x00:\\x00.\\x00\\x1f\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "2010-05-18T13:42:50", "lines": 58, "newlines": 46, "modlines": 31, "user": "TRIDJK"}, "text": "//TRIDJKVT JOB (CSC-STL),'KALINICH, JOHN',\n//             CLASS=B,\n//             NOTIFY=TRIDJK,\n//             MSGCLASS=R\n/*JOBPARM R=7G04,T=9999,L=9999\n//JCL      JCLLIB  ORDER=AD.PROCLIB\n//JOB      OUTPUT  NAME='KALINICH, JOHN',\n//             TITLE='',\n//             DEPT='EXECUTIVE SOFTWARE',\n//             BUILDING='ROBERT A. YOUNG',\n//             ADDRESS=('COMPUTER SCIENCES CORP',\n//             'ROOM 7.105',\n//             '1222 SPRUCE STREET',\n//             'ST. LOUIS, MISSOURI  63103-2834'),\n//             JESDS=ALL,\n//             DEFAULT=YES\n//VTOCASM PROC MEMBER=\n//ASM     EXEC PGM=ASMA90,REGION=32M,\n//             PARM=(DECK,NOOBJECT,RENT,TERM,ALIGN,XREF(SHORT),\n//             'FLAG(PAGE0),SIZE(MAX,ABOVE)')\n//SYSLIB   DD  DSN=AD.FILE112.PDS466,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=DISK,SPACE=(TRK,(50,20))\n//SYSUT2   DD  UNIT=DISK,SPACE=(TRK,(50,20))\n//SYSUT3   DD  UNIT=DISK,SPACE=(TRK,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSPUNCH DD  DSN=&&V,DISP=(MOD,PASS),UNIT=DISK,SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=3200\n//SYSIN    DD  DSN=AD.FILE112.PDS466(&MEMBER),DISP=SHR\n//        PEND\n//*\n//***   NOTE: FOR MVS SP 1.2 OR EARLIER SYSTEMS, CHANGE MEMBER=VTOC\n//***   TO MEMBER=VTOC112 (MEMBER VTOC USES MVS UCB SCAN SERVICES).\n//*\n//VTOC    EXEC VTOCASM,MEMBER=VTOC\n//*\n//CHEK    EXEC VTOCASM,MEMBER=VTOCCHEK\n//EXCP    EXEC VTOCASM,MEMBER=VTOCEXCP\n//FORM    EXEC VTOCASM,MEMBER=VTOCFORM\n//MSG     EXEC VTOCASM,MEMBER=VTOCMSGX\n//SORT    EXEC VTOCASM,MEMBER=VTOCSORT\n//*\n//***   NOTE:  ALL OF THE MOST RECENT UPDATES WENT INTO THE VT0CPRNT\n//***   MEMBER.  THE VTOCPRNT MEMBER IS FOR USE BY THOSE WISHING\n//***   TO KEEP THE COLUMN WIDTHS THE SAME AS THEY USED TO BE.\n//***   IF YOU WANT THE OLD FORMAT WITHOUT THE NEW STUFF, SUBSTITUTE\n//***   VTOCPRNT FOR VT0CPRNT IN THE FOLLOWING STATEMENT.\n//*\n//PRNT    EXEC VTOCASM,MEMBER=VT0CPRNT\n//*\n//LKED    EXEC PGM=IEWL,COND=(5,LT),\n//             PARM='LIST,LET,RENT,REUS,REFR,MAP'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=DISK,SPACE=(TRK,(50,20))\n//SYSLMOD  DD  DSN=AD.CMDLIB(VTOC),DISP=SHR\n//SYSLIN   DD  DSN=&&V,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MODS": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x000\\x00\\x92\\x08_\\x01\\x10\\x13\\x8f\\x13Y\\x00\\xc6\\x00e\\x00o\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "2010-05-18T13:59:30", "lines": 198, "newlines": 101, "modlines": 111, "user": "TRIDJK"}, "text": "*\n*  MODIFICATIONS TO THE VTOC COMMAND IN SEPT, 1984\n*\n*       1.  SUPPORT FOR 123 VSAM EXTENTS (WITH ICF CATALOGS).   ABL-ICF\n*           NOTE: IF MORE THAN 99 EXTENTS ARE IN A DATA SET,    ABL-ICF\n*           THE LISTING WILL SHOW ** INSTEAD OF A NUMBER;       ABL-ICF\n*           THIS WAS NOT CHANGED SINCE OTHER PROGRAMS READ      ABL-ICF\n*           THE VTOC COMMAND'S OUTPUT.                          ABL-ICF\n*\n*       2.  SUPPORT FOR UCB SCAN SERVICES (MVS SP 1.1.3 AND XA) ABL-UCB\n*\n*       3.  FIXED A BUG - LIM(EX GT 2) SHOULD REFERENCE         ABL-EXT\n*           EXTENTS; BUT IT USED EXPDT INSTEAD.                 ABL-EXT\n*\n*       4.  FIXED A BUG - ERROR MESSAGE FOR LIM(XXX ...         ABL-049\n*           WAS OFF BY ONE BYTE.                                ABL-049\n*\n*       5.  $INST MEMBER FOR INSTALLATION WAS MODIFIED          ABL-JCL\n*           INSTRUCTIONS ARE IN THIS MEMBER FOR SYSTEMS BEFORE  ABL-JCL\n*           MVS/SP 1.1.3 AS WELL AS SYSTEMS AT OR AFTER 1.1.3   ABL-JCL\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN SEPT, 1985\n*\n*       1.  CORRECTION FOR A LIST OF VOLUME NAMES (OR PARTIAL   ABL-UC2\n*           NAMES).  CLEAR THE UCB SCAN AREA FOR EACH VOLUME.   ABL-UC2\n*\n*       2.  CHANGE TO CONTAINING KEYWORD TO ALLOW SYNTAX SUCH  ABL-CONT\n*           AS CONTAINING(.DATA) OR CONTAINING(123)            ABL-CONT\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN OCT, 1985\n*\n*       1.  CORRECTION FOR KB AND MB KEYWORDS FOR REPORTING    ABL-3380\n*           DASD UTILIZATION AS PROGRAMMED BY GRAY MADDRY.     ABL-3380\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN MAR, 1988\n*\n*       1.  CHANGED TO RETURN OUTPUTS TO THE PDS COMMAND        ABL-PDS\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND AT BFGOODRICH BY GUY ALBERTELLI\n*\n*12/16/86  GLA  IMPLEMENT THE \"EXLEVEL\" PARAMETER TO EXCLUDE    GLA-EXL\n*               DSNAME LEVELS.                                  GLA-EXL\n*\n*06/02/88  GLA  USE BRUCE LELAND'S INTERFACE TO PDS COMMAND     GLA-PDS\n*               WITH SLIGHT DIFFERENCES IN THE PRNT ROUTINE     GLA-PDS\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND AT STATE MUTUAL BY HENTRY FARINEAU\n*\n* 3/22/88  VTOCFORM MODIFIED TO REFLECT TRUE MBYTES AND         HXF-512\n*               KBYTES (F500 WAS CHANGED TO 512, ...)           HXF-512\n*\n* 3/22/88  VT0CPRNT MODIFIED TO ALLOW FOR 7 POSITIONS FOR THE   HXF-ALL\n*               ALLOC AND UNUSED COLUMNS (CHANGES FORMAT OF     HXF-ALL\n*               OUTPUT -- SEE $INST FOR INSTALL INSTRUCTIONS).  HXF-ALL\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN AUGUST, 1988\n*\n*       1.  CORRECTION FOR SORT OF DATA SET NAMES               ABL-SOR\n*\n*       2.  CHANGED TO ALLOW TWICE AS MANY DATA SETS TO BE      ABL-GET\n*           PROCESSED BY VTOC (UP TO 3.2 MEGABYTES).            ABL-GET\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN DECEMBER, 1988\n*\n*       1.  MODIFIED TO RETURN UP TO 132 CHARACTERS ON A LINE       ABL\n*           WHEN INVOKED BY THE PDS COMMAND.                        ABL\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN MARCH, 1990\n*\n*       1.  THE TOTALS LINE WAS MODIFIED TO FORMAT A 5 POSITION     ABL\n*           COUNT FIELD FOR THE NUMBER OF DATA SETS.                ABL\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN APRIL, 1990\n*\n*       1.  MODIFIED BY TOM ROMANO OF AETNA LIFE TO PROPERLY  TXR 05/90\n*           REPORT A CATALOG ERROR IN VTOCFORM.               TXR 05/90\n*                                                                     *\n*  MODIFICATIONS TO THE VTOC COMMAND IN MARCH, 1992\n*\n*         - MODIFIED TO MAKE ALL VSAM                           TANSKY\n*           DATASETS \"FULL\" INSTEAD OF 0% USED.                 TANSKY\n*         - MODIFIED TO PRINT THE ENTIRE DATASET NAME           TANSKY\n*           EVEN IF IT HAS EMBEDDED BLANKS                      TANSKY\n*         - MODIFIED TO USE BETTER BLOCKSIZES FOR THE VTOCOUT   TANSKY\n*           DATASET VIA A DCB OPEN EXIT.                        TANSKY\n*         - FIXED THE \"USED\" FIELD TO BE THE CORRECT            TANSKY\n*           LENGTH IN THE TABTITL TABLE.                        TANSKY\n*         - USE IEFEB4UV TO MAKE THE UNITTYPE AVAILABLE.        TANSKY\n*           KEYWORD = UNIT.                                     TANSKY\n*         - ADDED SORT FOR UNIT TYPE AND THE MACRO WHICH        TANSKY\n*           I USED FOR THE CHARACTER SORT TABLES I CHANGED.     TANSKY\n*         - MODIFIED THE DSN SORT TABLE FOR MY                  TANSKY\n*           INSTALLATIONS NAMES - IT CUT THE CPU TIME IN HALF   TANSKY\n*           FOR DSN SORTING OF LARGE NUMBERS OF DATASETS.       TANSKY\n*           (WHILE I WAS AT IT, I MODIFIED THE VOLSER SORT.)    TANSKY\n*         - ADDED A COUPLE OF OTHER MACROS TO HELP IN THE       TANSKY\n*           TABLE DEFINITIONS                                   TANSKY\n*         - ADDED MEMBERS VTOC02 AND VTOCCMD2 WHICH ARE         TANSKY\n*           (RESPECTIVELY) AN SPF PANEL AND A CLIST TO CALL IT  TANSKY\n*           WHICH INVOKE THE VTOC COMMAND.  THESE ARE BASED     TANSKY\n*           ON A FILE FROM THE CBT TAPE, BUT I HAVE LOST TRACK  TANSKY\n*           OF WHICH ONE.  I HAVE MADE MODIFICATIONS TO WHICH-  TANSKY\n*           EVER ONE IT WAS, BUT I DON'T WANT TO TAKE CREDIT    TANSKY\n*           FOR CREATING THEM FROM SCRATCH.                     TANSKY\n*         - ADDED MEMBER DELVTOCS WHICH IS A REXX EXEC TO       TANSKY\n*           DELETE THE DATASETS OPTIONALLY CREATED BY THE       TANSKY\n*           ABOVE ISPF INTERFACE                                TANSKY\n*         - ADDED UPD AND RACF FIELDS TO DISPLAY UPDATED-SINCE- TANSKY\n*           LAST-BACKUP AND RACF-INDICATED RESPECTIVELY         TANSKY\n*         - ADDED MEMBER $CUSTOM TO WARN PEOPLE TO MODIFY THE   TANSKY\n*           DSN SORT TABLE FOR THEIR INSTALLATIONS DATASET      TANSKY\n*           NAME CONVENTIONS IN ORDER TO SPEED THE SORT.        TANSKY\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN NOVEMBER, 1992\n*\n*       1.  MODIFIED BY A. BRUCE LELAND AT SERENA TO SET     ABL NOV92*\n*           DSORG TO \"PE\" FOR A PDSE DATA SET IN VTOCFORM.   ABL NOV92*\n*       2.  ALSO, MODIFIED VT0CPRNT TO ALLOW UP TO 132          ABL-PDS\n*           CHARACTERS IN AN OUTPUT LINE FROM PDS.              ABL-PDS\n*       3.  MERGED FORWARD TOM ROMANO'S MOD TO VTOCFORM.      TXR 05/90\n*                                                                     *\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN AUGUST, 1994\n*\n*       1.  MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING WITH LIM/AND/OR SELECTS AN EXTENT, ITS         ABLC\n*           CCHH IS USED INSTEAD.                                  ABLC\n*                                                                     *\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN DECEMBER, 1997\n*\n*       1.  MODIFIED BY JOHN KALINICH AT USA LSSC,            Y2K DEC97\n*       TO SUPPORT YEAR 2000 DATES FOR THE INTERFACE TO THE   Y2K DEC97\n*       YEAR 2000 VERSION OF THE PDS COMMAND (VERSION 8.5).   Y2K DEC97\n*       THE OVERFLOW INDICATOR (\"**\") THAT WOULD RESULT FROM  Y2K DEC97\n*       A YEAR 2000 YY VALUE (X'64') BEING CONVERTED IS NOW   Y2K DEC97\n*       IGNORED AND THE 2 LOW ORDER DIGITS ARE PASSED TO THE  Y2K DEC97\n*       \"LISTFILE VTOC\" DIALOG.  FOR EXAMPLE, A DATE OF       Y2K DEC97\n*       X'640064' WOULD BE CONVERTED TO C'00100' INSTEAD OF   Y2K DEC97\n*       C'**100' WHICH CAUSED AN 0C7 ABEND IN PDS WHEN THE    Y2K DEC97\n*       DATE WAS CONVERTED TO YY/MM/DD FORMAT.  ADDED MACRO   Y2K DEC97\n*       CONVY2K THAT IS CALLED BY VT0CPRNT/VTOCPRNT.          Y2K DEC97\n*\n*       2.  ADDED Y2K DATE WINDOWING CODE IN VTOCCHEK TO      Y2K DEC97\n*       PROCESS DATES CORRECTLY WITH THE LIMIT OPERAND.       Y2K DEC97\n*\n*       3.  ADDED MEMBER VTOCPARX (OLD VERSION OF VTOCPARS)   Y2K DEC97\n*       FOR USE WITH THE OLD VERSION OF VTOCPRNT.             Y2K DEC97\n*\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN JUNE, 1999\n*\n*       1.  MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW       JVH-MAX\n*           MORE DATASETS TO BE PROCESSED.  THE EARLIER         JVH-MAX\n*           MAXIMUM USED APPROXIMATELY 3.2 MB.  THIS WAS        JVH-MAX\n*           INCREASED UP TO 4.8 MB.  THIS ALLOWS UP TO          JVH-MAX\n*           50,000 DATASETS.                                    JVH-MAX\n*                                                                     *\n*       2.  MODIFIED BY JOHN HOOPER AT FOOD LION TO             JVH-FIX\n*           ELIMINATE THE ASSEMBLER WARNING MESSAGES WHEN       JVH-FIX\n*           USING THE HIGH LEVEL ASSEMBLER FROM IBM.            JVH-FIX\n*                                                                     *\n*       4.  MODIFIED BY JOHN HOOPER AT FOOD LION TO ADD         JVH-DSO\n*           SUPPORT FOR HIERARCHIAL DATASETS (HFS) AND          JVH-DSO\n*           EXTENDED MODE SMS DATASETS.                         JVH-DSO\n*                                                                     *\n*\n*  MODIFICATIONS TO THE VTOC COMMAND IN AUGUST 2001               *DHC*\n*\n*       1.  MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD           *DHC*\n*       TO SHOW IF DATASET IS IN USE BY TESTING FOR SYSDSN ENQ'S  *DHC*\n*       2.  CHANGED ALL OCCURRENCES OF THE MSG MACRO TO MSGZ.     *SBG*\n*           THIS IS BECAUSE MSG IS NOW A LEGITIMATE INSTRUCTION.  *SBG*\n*\n*       1.  MODIFIED BY WADE SIMONS AT EXCELIS TO ALLOW         WSX-MAX\n*           MORE DATASETS TO BE PROCESSED.  CHANGED AMODE       WSX-MAX\n*           FROM 24 TO 31.  MOVED VTOC TABLE ABOVE-THE-LINE.    WSX-MAX\n*                                                                     *\n*                                                                     *\n*  MODIFICATIONS TO THE VTOC COMMAND IN MAY 2010              DRK MAY10\n*\n*       1.  MODIFIED BY JOHN KALINICH AT CSC TO INCREASE      DRK MAY10\n*           THE GETMAIN SIZE TO 65536*2.  SKIP CLUSTER NAME   DRK MAY10\n*           CATALOG SEARCH FOR ICF CATALOGS AND SYS1.VVDS     DRK MAY10\n*           DATA SETS WHEN USING THE ENQ OPTION.              DRK MAY10\n*\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$SGASMLK": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00W\\x00\\x942_\\x01\\x190\\x7f\\t$\\x00-\\x00.\\x00\\x11\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "2019-11-03T09:24:57", "lines": 45, "newlines": 46, "modlines": 17, "user": "SBGOLOB"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//JCL      JCLLIB  ORDER=SBGOLOB.CBT498.FILE112\n//VTOCASM PROC MEMBER=\n//ASM     EXEC PGM=ASMA90,\n//             PARM='DECK,NOOBJECT,TERM,RENT,ALIGN,XREF(SHORT)'\n//SYSLIB   DD  DSN=SBGOLOB.CBT498.FILE112,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSPUNCH DD  DSN=&&V,DISP=(MOD,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=3200\n//SYSIN    DD  DSN=SBGOLOB.CBT498.FILE112(&MEMBER),DISP=SHR\n//        PEND\n//*\n//***   NOTE: FOR MVS SP 1.2 OR EARLIER SYSTEMS, CHANGE MEMBER=VTOC\n//***   TO MEMBER=VTOC112 (MEMBER VTOC USES MVS UCB SCAN SERVICES).\n//*\n//VTOC    EXEC VTOCASM,MEMBER=VTOC\n//*\n//CHEK    EXEC VTOCASM,MEMBER=VTOCCHEK\n//EXCP    EXEC VTOCASM,MEMBER=VTOCEXCP\n//FORM    EXEC VTOCASM,MEMBER=VTOCFORM\n//MSG     EXEC VTOCASM,MEMBER=VTOCMSGX\n//SORT    EXEC VTOCASM,MEMBER=VTOCSORT\n//*\n//***   NOTE:  ALL OF THE MOST RECENT UPDATES WENT INTO THE VT0CPRNT\n//***   MEMBER.  THE VTOCPRNT MEMBER IS FOR USE BY THOSE WISHING\n//***   TO KEEP THE COLUMN WIDTHS THE SAME AS THEY USED TO BE.\n//***   IF YOU WANT THE OLD FORMAT WITHOUT THE NEW STUFF, SUBSTITUTE\n//***   VTOCPRNT FOR VT0CPRNT IN THE FOLLOWING STATEMENT.\n//*\n//PRNT    EXEC VTOCASM,MEMBER=VT0CPRNT\n//*\n//LKED    EXEC PGM=IEWL,COND=(5,LT),\n//             PARM='LIST,LET,RENT,REUS,REFR,MAP'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(50,20))\n//SYSLMOD  DD  DSN=SBGOLOB.VTOC.LOAD(VTOCNEW),DISP=SHR\n//SYSLIN   DD  DSN=&&V,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@AGCOJ1": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00F\\x00\\x99\\x13?\\x01\\x01\"o\\x137\\x00.\\x00.\\x00\\x05\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-05-13T00:00:00", "modifydate": "2001-08-14T13:37:46", "lines": 46, "newlines": 46, "modlines": 5, "user": "MMSMAK"}, "text": "//MMSMAKV1 JOB (TR,UKM,T,250,00000),'DAVID CARTWRIGHT....',CLASS=G,\n//         TIME=30,NOTIFY=&SYSUID,REGION=0M\n//*\n//*      PDSDOC *INSTALL THE VTOC CP..................................*\n//*\n//VTOCASM PROC MEMBER=\n//ASM     EXEC PGM=ASMA90,\n//             PARM='DECK,NOOBJECT,TERM,RENT,ALIGN,XREF(SHORT)'\n//SYSLIB   DD  DSN=CSOFT.VTOC.ASM,DISP=SHR,DCB=BLKSIZE=32720\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=3390,SPACE=(TRK,(50,20))\n//SYSUT2   DD  UNIT=3390,SPACE=(TRK,(50,20))\n//SYSUT3   DD  UNIT=3390,SPACE=(TRK,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSPUNCH DD  DSN=&&V,DISP=(MOD,PASS),UNIT=3390,SPACE=(CYL,(2,1)),\n//             DCB=BLKSIZE=3200\n//SYSIN    DD  DSN=CSOFT.VTOC.ASM(&MEMBER),DISP=SHR\n//        PEND\n//*\n//***   NOTE: FOR MVS SP 1.2 OR EARLIER SYSTEMS, CHANGE MEMBER=VTOC\n//***   TO MEMBER=VTOC112 (MEMBER VTOC USES MVS UCB SCAN SERVICES).\n//*\n//VTOC    EXEC VTOCASM,MEMBER=VTOC\n//*\n//CHEK    EXEC VTOCASM,MEMBER=VTOCCHEK\n//EXCP    EXEC VTOCASM,MEMBER=VTOCEXCP\n//FORM    EXEC VTOCASM,MEMBER=VTOCFORM\n//MSG     EXEC VTOCASM,MEMBER=VTOCMSGX\n//SORT    EXEC VTOCASM,MEMBER=VTOCSORT\n//*\n//***   NOTE:  ALL OF THE MOST RECENT UPDATES WENT INTO THE VT0CPRNT\n//***   MEMBER.  THE VTOCPRNT MEMBER IS FOR USE BY THOSE WISHING\n//***   TO KEEP THE COLUMN WIDTHS THE SAME AS THEY USED TO BE.\n//***   IF YOU WANT THE OLD FORMAT WITHOUT THE NEW STUFF, SUBSTITUTE\n//***   VTOCPRNT FOR VT0CPRNT IN THE FOLLOWING STATEMENT.\n//*\n//PRNT    EXEC VTOCASM,MEMBER=VT0CPRNT\n//*\n//LKED    EXEC PGM=IEWL,COND=(5,LT),\n//             PARM='LIST,LET,RENT,REUS,REFR,MAP'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=3390,SPACE=(TRK,(50,20))\n//SYSLMOD  DD  DISP=SHR,DSN=SYSL.AGCO.LINKLIB(VTOC)\n//SYSLIN   DD  DSN=&&V,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@AGCOJ2": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x001\\x00\\x99\\x13?\\x01\\x01\"\\x1f\\x12\\x17\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-05-13T00:00:00", "modifydate": "2001-08-09T12:17:31", "lines": 11, "newlines": 11, "modlines": 0, "user": "MMSMAK"}, "text": "//*\n//*      PDSDOC *IEBCOPY JOB TO INSTALL HELP MEMBER...................*\n//*\n//STEP01  EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//PUBLIC   DD  DISP=SHR,DSN=CSOFT.VTOC.ASM\n//IBM      DD  DISP=SHR,DSN=CSOFT.SYS2.HELP\n//SYSIN    DD  *\n C I=PUBLIC,O=IBM\n S M=(($HELP,VTOC,R))\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@AGCOJ3": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00@\\x00\\x99\\x13?\\x01\\x01\"\\x1f\\x12\\x17\\x00\\x12\\x00\\x12\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-05-13T00:00:00", "modifydate": "2001-08-09T12:17:40", "lines": 18, "newlines": 18, "modlines": 0, "user": "MMSMAK"}, "text": "//*\n//*      PDSDOC *IEBCOPY JOB TO INSTALL ISPF INTERFACE................*\n//*              CHANGE A UTILITY PANEL TO INVOKE CMD(%VTOC#C)\n//STEP01  EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//PUBLIC   DD  DISP=SHR,DSN=CSOFT.VTOC.ASM\n//MFP      DD  DISP=SHR,DSN=CSOFT.ISPF230.MFPLIB\n//MFM      DD  DISP=SHR,DSN=CSOFT.ISPF230.MFMLIB\n//MFC      DD  DISP=SHR,DSN=CSOFT.ISPF230.MFCLIST\n//SYSIN    DD  *\n C I=((PUBLIC,R)),O=MFP\n S M=(VTOC#P,VTOC#P1,VTOC#P2,VTOC#P3,VTOC#P4)\n S M=(VTOC#P5,VTOC#P6,VTOC#P7,VTOC#P8)\n C I=((PUBLIC,R)),O=MFC\n S M=(VTOC#C)\n C I=((PUBLIC,R)),O=MFM\n S M=(VTOC00)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE112": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x01\\x01\\x190\\x7f\\x01\\x190\\x7f\\tT\\x00B\\x00B\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-03T00:00:00", "modifydate": "2019-11-03T09:54:01", "lines": 66, "newlines": 66, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 112 is the source for the TSO command prompter called     *   FILE 112\n//*          VTOC.  This file is in IEBUPDTE form.  This command    *   FILE 112\n//*          allows you to search the Volume Table Of Contents of   *   FILE 112\n//*          one or more disk volumes and obtain listings or totals *   FILE 112\n//*          of data sets meeting some criteria.  The specification *   FILE 112\n//*          is quite flexible.  This file also contains the HELP   *   FILE 112\n//*          data set for this command.   It also contains          *   FILE 112\n//*          installation notes, some comments on defaults that may *   FILE 112\n//*          not be typical elsewhere,  a list of the known errors  *   FILE 112\n//*          in the command,  and ideas for future expansion.       *   FILE 112\n//*          This version supports SU60, cataloged datasets and the *   FILE 112\n//*          ability to sort the output on anything.  For additional*   FILE 112\n//*          changes see the help member of the PDS.                *   FILE 112\n//*                                                                 *   FILE 112\n//*   >>>>>  Fixed to be EAV compatible with the contributions      *   FILE 112\n//*   >>>>>  of Mike Nelson and Dan Dalby.  Older version is        *   FILE 112\n//*   >>>>>  obtainable by renaming VTOCCHEO to VTOCCHEK and        *   FILE 112\n//*   >>>>>  VTOCEXCO to VTOCEXCP.                                  *   FILE 112\n//*                                                                 *   FILE 112\n//*          Tony Cieri added an option to VTOC of NOTOTALS,        *   FILE 112\n//*          which will not produce a TOTALS line.  This seems      *   FILE 112\n//*          to have been intended by the author, but an            *   FILE 112\n//*          IKJNAME 'NOTOTALS' line needed to be added to the      *   FILE 112\n//*          IKJPARS statements.                                    *   FILE 112\n//*                                                                 *   FILE 112\n//*          A load module for the VTOC command is on File 035      *   FILE 112\n//*          and is called VTOC.                                    *   FILE 112\n//*                                                                 *   FILE 112\n//*          VTOC IS CALLED BY A SUBCOMMAND OF PDS VERSION 8.6      *   FILE 112\n//*          FROM FILE 182.  IF YOU HAVE INSTALLED PDS VERSION 8.6  *   FILE 112\n//*          YOU SHOULD ALSO INSTALL VTOC.                          *   FILE 112\n//*                                                                 *   FILE 112\n//*          IF YOU INSTALL PDS VERSION 8.6, SEE THE NOTES IN       *   FILE 112\n//*          THIS FILE AS TO WHICH VERSION OF THE VTOCPRNT MODULE   *   FILE 112\n//*          YOU SHOULD ASSEMBLE AND LINKEDIT INTO THIS COMMAND.    *   FILE 112\n//*                                                                 *   FILE 112\n//*          BUGS FIXED, AND SUPPORT ADDED FOR 3390 MODEL 9.        *   FILE 112\n//*                                                                 *   FILE 112\n//*          YOU SHOULD RE-INSTALL VTOC.    (UPDATED 08-94)         *   FILE 112\n//*          FIXED FOR MVS/ESA 5.1.         (UPDATED 07-95)         *   FILE 112\n//*          FIXED FOR Y2K SUPPORT.         (UPDATED 12-97)         *   FILE 112\n//*          David Spiegel fixes - dyn UCBs (UPDATED 05-99)         *   FILE 112\n//*          John Hooper fixes              (UPDATED 07-99)         *   FILE 112\n//*          Optional test for DSN enqueues (UPDATED 08-01)         *   FILE 112\n//*          MSG macro converted to MSGZ    (UPDATED 08-01)         *   FILE 112\n//*          VTOC table now above the line  (UPDATED 08-01)         *   FILE 112\n//*                                                                 *   FILE 112\n//*           (Thanks also to Seymour Metz.)                        *   FILE 112\n//*                                                                 *   FILE 112\n//*          ****************************************************   *   FILE 112\n//*          * IT APPEARS THAT THERE ARE ADDITIONAL MACROS      *   *   FILE 112\n//*          * THAT ARE MISSING FROM THIS FILE  THIS IS IN FACT *   *   FILE 112\n//*          * NOT TRUE. WHAT APPEARS TO BE OTHER MACROS WERE   *   *   FILE 112\n//*          * JUST AN IDEA AND THOSE MACROS WERE NEVER         *   *   FILE 112\n//*          * WRITTEN.  I KNOW ! I SPENT WEEKS TRYING TO TRACK *   *   FILE 112\n//*          * THEM DOWN.                                       *   *   FILE 112\n//*          *           ARNIE                                  *   *   FILE 112\n//*          ****************************************************   *   FILE 112\n//*                                                                 *   FILE 112\n//* KEYWORDS TSO CP COMMAND PROCESSOR VTOC COMMAND                  *   FILE 112\n//*                                                                 *   FILE 112\n//*   Note:  The VTOC command processor is called by the LISTV      *   FILE 112\n//*          subcommand of PDS Version 8.x (see File 182).          *   FILE 112\n//*          If you're installing PDS, then it is very helpful      *   FILE 112\n//*          to also install VTOC.                                  *   FILE 112\n//*                                                                 *   FILE 112\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALLOC": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,      X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE DYNSPACE)                                   *\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TUNIT\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT   RCPUNIT &UNIT,&VOL\n         AGO   .TVOLRET\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLEAR": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    CLEAR &FIELD,&CHAR,&LENGTH\n         LCLC  &FILL,&L\n&L       SETC  'L'''\n&FILL    SETC  '&CHAR'\n         AIF   ('&CHAR' NE '').CHSPEC\n&FILL    SETC  '40'\n.CHSPEC  ANOP\n&NAME    MVI   &FIELD,X'&FILL'   SET THE FIRST POSITION\n         AIF   ('&LENGTH' EQ '').NOLSPEC\n         MVC   &FIELD+1(&LENGTH),&FIELD  FILL THE ENTIRE FIELD\n         MEXIT\n.NOLSPEC ANOP\n         MVC   &FIELD+1(&L&FIELD-1),&FIELD  FILL THE ENTIRE FIELD\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONV": {"ttr": 1033, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   CONV  &TO,&FROM,&LEN,&EDMASK,&SCOMP\n         LCLC  &L,&FIRSTFR,&EDM,&COMP\n         LCLA  &COUNT\n&L       SETC  'L'''\n         AIF   ('&LABEL' EQ '').NOLABEL  SKIP LABEL IF NOT PRESENT\n&LABEL   DS    0H             SET THE LABEL\n.NOLABEL ANOP\n&EDM     SETC  'EDMASK'      DEFAULT EDIT MASK\n         AIF   ('&EDMASK' EQ '').DEFMASK  IF NOT ENTERED USE DEFAULT\n&EDM     SETC  '&EDMASK'     USE THE ENTERED VALUE\n.DEFMASK ANOP\n&COMP    SETC  'BLANKS'      DEFAULT COMPARISON CHARS\n         AIF   ('&SCOMP' EQ '').DEFCOMP  NOT ENTERED, USE THE DEFAULT\n&COMP    SETC  '&SCOMP'      GET WHAT THE GUY WANTS\n.DEFCOMP ANOP\n&FIRSTFR SETC  '&FROM'(1,1)   GET FIRST CHAR OF &FROM\n         AIF   ('&FIRSTFR' EQ '(').REGISTR\n         L     R1,&FROM       GET THE DATA TO CONVERT\n         CVD   R1,DOUBLE      CONVERT TO PACKED DECIMAL\n         AGO   .INDEC\n.REGISTR ANOP\n&COUNT   SETA  K'&FROM-2\n&FIRSTFR SETC  '&FROM'(2,&COUNT)  STRIP THE PERRONS\n         CVD   &FIRSTFR,DOUBLE   CONVERT TO PACKED DECIMAL\n.INDEC   ANOP\n         MVC   CHARS,&EDM     PUT IN THE EDIT MASK\n         ED    CHARS,DOUBLE   CONVERT TO CHARACTERS\n         AIF   ('&LEN' NE '').LENSET\n         MVC   &TO,CHARS+16-&L&TO  MOVE IN THE NUMBER\n         CLC   CHARS(16-&L&TO),&COMP   WAS THERE AN OVERFLOW?\n         BE    *+10           NO, EVERYTHING WAS OK\n         MVC   &TO,STARS      BAD NEWS, NOTE IT\n         MEXIT\n.LENSET  ANOP\n         MVC   &TO.(&LEN),CHARS+16-&LEN MOVE IN THE NUMBER\n         CLC   CHARS(16-&LEN),&COMP   WAS THERE AN OVERFLOW?\n         BE    *+10           NO, EVERYTHING WAS OK\n         MVC   &TO.(&LEN),STARS   BAD NEWS, NOTE IT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONVY2K": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x973o\\x00\\x974_\\x12\\x15\\x00)\\x00*\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-12-02T00:00:00", "modifydate": "1997-12-11T12:15:00", "lines": 41, "newlines": 42, "modlines": 0, "user": "TRIDJK"}, "text": "         MACRO\n&LABEL   CONVY2K &TO,&FROM,&LEN,&EDMASK,&SCOMP\n         LCLC  &L,&FIRSTFR,&EDM,&COMP\n         LCLA  &COUNT\n&L       SETC  'L'''\n         AIF   ('&LABEL' EQ '').NOLABEL  SKIP LABEL IF NOT PRESENT\n&LABEL   DS    0H             SET THE LABEL\n.NOLABEL ANOP\n&EDM     SETC  'EDMASK'      DEFAULT EDIT MASK\n         AIF   ('&EDMASK' EQ '').DEFMASK  IF NOT ENTERED USE DEFAULT\n&EDM     SETC  '&EDMASK'     USE THE ENTERED VALUE\n.DEFMASK ANOP\n&COMP    SETC  'BLANKS'      DEFAULT COMPARISON CHARS\n         AIF   ('&SCOMP' EQ '').DEFCOMP  NOT ENTERED, USE THE DEFAULT\n&COMP    SETC  '&SCOMP'      GET WHAT THE GUY WANTS\n.DEFCOMP ANOP\n&FIRSTFR SETC  '&FROM'(1,1)   GET FIRST CHAR OF &FROM\n         AIF   ('&FIRSTFR' EQ '(').REGISTR\n         L     R1,&FROM       GET THE DATA TO CONVERT\n         CVD   R1,DOUBLE      CONVERT TO PACKED DECIMAL\n         AGO   .INDEC\n.REGISTR ANOP\n&COUNT   SETA  K'&FROM-2\n&FIRSTFR SETC  '&FROM'(2,&COUNT)  STRIP THE PERRONS\n         CVD   &FIRSTFR,DOUBLE   CONVERT TO PACKED DECIMAL\n.INDEC   ANOP\n         MVC   CHARS,&EDM     PUT IN THE EDIT MASK\n         ED    CHARS,DOUBLE   CONVERT TO CHARACTERS\n         AIF   ('&LEN' NE '').LENSET\n         MVC   &TO,CHARS+16-&L&TO  MOVE IN THE NUMBER\n         CLC   CHARS(16-&L&TO),&COMP   WAS THERE AN OVERFLOW?\n         BE    *+10           NO, EVERYTHING WAS OK\n         MVC   &TO,STARS      BAD NEWS, NOTE IT\n         MEXIT\n.LENSET  ANOP\n         MVC   &TO.(&LEN),CHARS+16-&LEN MOVE IN THE NUMBER\n         CLC   CHARS(16-&LEN),&COMP   WAS THERE AN OVERFLOW?\n*        BE    *+10           NO, EVERYTHING WAS OK\n         B     *+10           ALLOW YY > 99 FOR YEAR 2000     Y2K DEC97\n         MVC   &TO.(&LEN),STARS   BAD NEWS, NOTE IT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELVTOCS": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x08o\\x00\\x92\\x08o\\x13$\\x00O\\x00O\\x00\\x00\\xe5\\xc7\\xc3\\xc1\\xd9\\xe3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-26T00:00:00", "modifydate": "1992-03-26T13:24:00", "lines": 79, "newlines": 79, "modlines": 0, "user": "VGCART"}, "text": "  /*  REXX exec to delete temp vtoc list datasets  */\n\n  arg temp1\n  do while temp1 \u00ac= ''\n    parse var temp1 temp2 temp1\n    if right(temp2,1) = ')' then\n      temp2 = translate(temp2,'= ','()')\n    if pos('=',temp2) = 0 then temp2 = temp2 || '= \"\"'\n    interpret temp2\n  end\n  drop temp1\n  drop temp2\n  if debug = 'TRACE' then trace ?i\n  else if debug \u00ac= \"DEBUG\" then trace i\n\n  /* dsn=vtoclist for u.v    dsn=listcat for u.l  */\n  if dsn = 'DSN' then dsn = 'VTOCLIST'\n\n  say 'REXX exec to delete temporary' dsn 'datasets '\n  if pref = 'PREF' then pref = sysvar(syspref)\n  if pref = '' then pref = sysvar(sysuid)\n  do i=1 to 12\n    tempdsn = \"'\" || pref || \".TEMP\" || i || \".\" || dsn || \"'\"\n    temp = listdsi(tempdsn \"NORECALL\")\n    select\n      when temp = 0 then\n        \"DELETE\" tempdsn \"NONVSAM\"\n      when temp = 16 then\n        select\n          when sysreason = 9 then\n            \"HDELETE\" tempdsn\n          when sysreason = 5 then\n            nop\n          otherwise\n            say tempdsn '-' sysreasn(sysreason)\n        end\n      otherwise do\n        say 'Return code' temp 'for' tempdsn\n        say tempdsn '-' sysreasn(sysreason)\n      end\n    end\n  end\n  exit 0\nSYSREASN:\n  procedure\n /* rexx exec to format listdsi sysreason codes */\n  reason.0 = \"normal completion\"\n  reason.1 = \"error parsing the function\"\n  reason.2 = \"dynamic allocation error (SVC 99 error)\"\n  reason.3 = \"dataset type is not valid\"\n  reason.4 = \"error determining UNIT name (IEFEB4UV error)\"\n  reason.5 = \"dataset is not catalogued (LOCATE error)\"\n  reason.6 = \"error obtaining dsn (OBTAIN macro error)\"\n  reason.7 = \"error finding device type (DEVTYPE error)\"\n  reason.8 = \"dataset is not on DASD\"\n  reason.9 = \"dataset is migrated and NORECALL specified\"\n  reason.10= \"10 is not a valid code - contact systems support\"\n  reason.11= \"read access is required for full information\"\n  reason.12= \"VSAM datasets are not supported\"\n  reason.13= \"dataset could not be opened\"\n  reason.14= \"device type is not found in UCB tables\"\n  reason.15= \"15 is not a valid code - contact systems support\"\n  reason.16= \"16 is not a valid code - contact systems support\"\n  reason.17= \"ABEND occured\"\n  reason.18= \"partial dataset information was obtained\"\n  reason.19= \"dataset is multi-volume\"\n  reason.20= \"device type not found in EDT\"\n  reason.21= \"catalog error during LOCATE\"\n  reason.22= \"volume is not mounted (OBTAIN error)\"\n  reason.23= \"permanent I/O error on volume (OBTAIN error)\"\n  reason.24= \"dataset is not found by OBTAIN macro\"\n  reason.25= \"dataset is migrated to non-DASD\"\n  reason.26= \"dataset is on MSS\"\n  reason.27= \"no volser is allocated to the dataset\"\n  reason.28= \"invalid DDNAME - must be 1 to 8 characters\"\n  reason.29= \"dataset name or DDNAME must be specified\"\n  temp = arg(1)\n  temp = temp+0\n  return reason.temp\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYNSPACE": {"ttr": 1040, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    DYNSPACE &TYPE\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x08\\x12\\x00\\x8a\\x00\\x8a\\x00\\x00\\xd3\\xf0\\xf0\\xf3\\xe2\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T08:12:31", "lines": 138, "newlines": 138, "modlines": 0, "user": "L003SWS"}, "text": "         MACRO\n&SUBR    ENTER &BASES,&SAVE,&CSECT,&AMODE=31,&RMODE=24          WSX-MAX\n.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT,&AMODE,&RMODE      WSX-MAX\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*       &AMODE   AMODE FOR THE CSECT                           WSX-MAX\n.*       &RMODE   RMODE FOR THE CSECT                           WSX-MAX\n.*\n.*    EXAMPLES -\n.*               ENTER 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  ENTER (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&CSECT   AMODE &AMODE                                           WSX-MAX\n&CSECT   RMODE &RMODE                                           WSX-MAX\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n&SUBNAME AMODE &AMODE                                           WSX-MAX\n&SUBNAME RMODE &RMODE                                           WSX-MAX\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n         AIF   ('&SAVE' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTERX": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x08\\x13\\x00\\x90\\x00\\x90\\x00\\x00\\xd3\\xf0\\xf0\\xf3\\xe2\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T08:13:39", "lines": 144, "newlines": 144, "modlines": 0, "user": "L003SWS"}, "text": "         MACRO\n&SUBR    ENTERX &BASES,&SAVE,&CSECT,&AMODE=31,&RMODE=24         WSX-MAX\n.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT,&AMODE,&RMODE      WSX-MAX\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*       &AMODE   AMODE OF THE CSECT                            WSX-MAX\n.*       &RMODE   RMODE OF THE CSECT                            WSX-MAX\n.*\n.*    EXAMPLES -\n.*               ENTER 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  ENTER (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&CSECT   AMODE &AMODE                                           WSX-MAX\n&CSECT   RMODE &RMODE                                           WSX-MAX\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n&SUBNAME AMODE &AMODE                                           WSX-MAX\n&SUBNAME RMODE &RMODE                                           WSX-MAX\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n         AIF   ('&SAVE(1,1)' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LA    4,12(13)       YES, POINT PAST THE CHAIN\n         L     5,ENT&SYSNDX   GET THE SIZE\n         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )\n         SR    5,6            GIVES THE AMOUNT TO CLEAR\n         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE\n         MVCL  4,6            WHEE, CLEAR IT OUT\n         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREE": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X\n               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n&T       SETC  'A'\n&PAR     SETC  '&MF(2)+4'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)\n&T       SETC  'R'\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n&PAR     SETC  '4&MF(2)'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n&T       SETC  'A'\n&PAR     SETC  '&DYNP.RB'\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&SYSOUT' NE '').SYSOUT\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TUNALC  AIF   ('&UNALC' NE '').PERM\n.THOLD   AIF   ('&HOLD' NE '').HOLD\n         AGO   .SVC99\n.DSN     RCPFDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.SYSOUT  RCPFSYS &SYSOUT\n         AGO   .TDDN\n.DDN     RCPFDDN &DDN&F&FILE\n         AGO   .TDISP\n.DISP RCPFDISP &DISP\n         AGO   .TUNALC\n.PERM    RCPUNALC\n         AGO   .THOLD\n.HOLD    RCPFHOLD &HOLD\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n.DYNA    DYNALLOC\n         AIF   ('&ERROR' EQ '').RESERVE\n         AIF   ('&PAR' EQ '').LTR\n         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n.LTR     LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC DATA                             **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU11\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AGO   .DTU10\n.DTU11   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LEAVE": {"ttr": 1291, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    LEAVE &EQ,&RC=\n         GBLC  &LV,&SP\n&NAME    LR    2,13\n         L     13,4(13)\n         AIF   ('&RC' EQ '').L0\n         LA    15,&RC         LOAD THE RETURN CODE\n.L0      STM   15,1,16(13)  STORE RETURN REGS\n         AIF   ('&LV' EQ '').L1  ANYTHING TO FREE?\n         FREEMAIN R,LV=&LV,SP=&SP,A=(2)  FREE THE AREA\n.L1      RETURN (14,12),T     RETURN FROM WHENCE WE CAME\n         AIF   ('&EQ' NE 'EQ').L4  REGISTERS TOO?\n         COPY  REGS\n.L4      MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSGZ": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x01\"o\\x01\\x01\"o\\x11\\x19\\x00\\x06\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-14T00:00:00", "modifydate": "2001-08-14T11:19:58", "lines": 6, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "         MACRO\n&NAME    MSGZ  &TEXT\n         LCLA  &A\n&A       SETA  K'&TEXT-2+4  SUBTRACT QUOTES, ADD PREFIX FOUR BYTES\n&NAME    DC    H'&A',H'0',C&TEXT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDEDSNAM": {"ttr": 1295, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         PDEDSNAM\n*\n*        DEFINE A DSECT FOR THE DSNAME PARSE DESCRIPTION\n*\nPDEDSNAM DSECT\nPDEDSN   DS    A              POINTER TO DSNAME\nPDEDSNL  DS    H              LENGTH OF DSNAME\nPDEDFLG1 DS    X              DATA SET NAME FLAGS\nPDEDFLD1 EQU   X'80'          ONE IF THE DSNAME IS PRESENT\nPDEDFLQ1 EQU   X'40'          ONE IF THE DSNAME IS WITHIN QUOTES\nPDEDMEM  DS    A              POINTER TO MEMBER NAME\nPDEDMEML DS    H              LENGTH OF MEMBER NAME\nPDEDFLG2 DS    X              MEMBER   NAME FLAGS\nPDEDFLD2 EQU   X'80'          ONE IF THE MEMBER IS PRESENT\nPDEDPASS DS    A              POINTER TO PASSWORD\nPDEDPASL DS    H              LENGTH OF PASSWORD\nPDEDFLG3 DS    X              PASSWORD      FLAGS\nPDEDFLD3 EQU   X'80'          ONE IF THE PASSWORD IS PRESENT\nPDEDCHAN DS    0F             CHAIN ADDRESS\nPDEDCHNF DS    X              CHAIN FLAGS ( X'FF' FOR END )\nPDEDCHN  DS    AL3            TRUE CHAIN POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBFRGS": {"ttr": 1297, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPBFRGS &BUFPTR,&WKREGS\n         GBLC  &RCPBFRP,&RCPBFR1,&RCPBFR2\n         AIF   ('&BUFPTR' EQ '').TGP\n&RCPBFRP SETC  '&BUFPTR'\n         AGO   .TWK1\n.TGP     AIF   ('&RCPBFRP' NE '').TWK1\n&RCPBFRP SETC  'R1'\n.TWK1    AIF   ('&WKREGS(1)' EQ '').TG1\n&RCPBFR1 SETC  '&WKREGS(1)'\n         AGO   .TWK2\n.TG1     AIF   ('&RCPBFR1' NE '').TWK2\n&RCPBFR1 SETC  'R14'\n.TWK2    AIF   ('&WKREGS(2)' EQ '').TG2\n&RCPBFR2 SETC  '&WKREGS(2)'\n         MEXIT\n.TG2     AIF   ('&RCPBFR2' NE '').EXIT\n&RCPBFR2 SETC  'R15'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBTU": {"ttr": 1299, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED\n.*  IN QUOTES\n.*\n&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           MOVE IN LENGTH\n         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT\n&L       SETA  &L+6\n         AIF   (&L/2 EQ (&L+1)/2).LOK\n&L       SETA  &L+1\n.LOK     RCPDINC &L\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBTU2": {"ttr": 1301, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         GBLA  &DTUPO\n         GBLC  &DYNP\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO BRANCH AROUND TEXT UNIT AND\n.*  CREATE TEXT UNIT\n.*\n&L       SETA  K'&PAR+8                GET LENGTH TO BRANCH AROUND\n         AIF   (&L/2 EQ (&L+1)/2).LOK  MAKE SURE LENGTH IS EVEN\n&L       SETA  &L+1\n.LOK     BAL   R14,*+&L                BRANCH AROUND TEXT UNIT\n&L       SETA  K'&PAR-2\n         DC    Y(&KEY,&NUM,&L),C&PAR   TEXT UNIT\n         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE\n         ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPCKID": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPCKID              &CHECKID\n         GBLB  &RCPECT(2),&RCPPSCB(2)\n         GBLC  &RCPPRE\n         LCLC  &CHARVAR,&P\n         LCLA  &COUNTR,&L\n&P       SETC  '&RCPPRE'\n&RCPPSCB(1) SETB  1\n&RCPECT(1)  SETB  1\n         EJECT\n         SPACE 4\n***********************************************************************\n***  THE USERID OF THE USER IS CHECKED. IF IT IS NOT VALID, THE    ****\n***   COMMAND PRETENDS IT DOES NOT EXIST BY LINKING TO EXEC IN     ****\n***   THE SAME WAY THE TMP DOES IF IT CANNOT FIND THE COMMAND.     ****\n***********************************************************************\n         SPACE 3\n         L     R1,CPPLPSCB             LOAD ADDRESS OF PSCB\n         USING PSCB,R1                 PSCB ADDRESSABILITY\n.NID     ANOP\n&COUNTR  SETA  &COUNTR+1\n         AIF   ('&CHECKID(&COUNTR)' EQ '').ENDID\n&CHARVAR SETC  '&CHECKID(&COUNTR)'\n&L       SETA  K'&CHARVAR\n         AIF   ('&CHARVAR'(1,1) EQ '''').QCID\n         CLC   PSCBUSER(&L),=C'&CHARVAR'  IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.QCID    ANOP\n&L       SETA  &L-2\n         CLC   PSCBUSER(&L),=C&CHARVAR    IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.ENDID   L     R1,CPPLECT              LOAD ECT ADDRESS\n         SPACE 2\n         USING ECT,R1\n         MVC   ECTPCMD,&P.EXECN        MOVE IN COMMAND NAME\n         DROP  R1                      KILL ECT ADDRESSABILITY\n         L     R1,CPPLCBUF             LOAD CBUF ADDRESS\n         XC    2(2,R1),2(R1)           ZERO OFFSET FIELD\n         L     R1,&P.CPPL              RELOAD CPPL ADDRESS\n         XCTL  EPLOC=&P.EXECN\n&P.EXECN DC    CL8'EXEC'               NAME OF EXEC PROCESSOR\n&P.IDOK  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDDN": {"ttr": 1539, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDDN &DDN\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALDDNAM,1,&DDN\n         MEXIT\n.BTU     RCPTUBFR DALDDNAM,14,&DDN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDDNRT": {"ttr": 1541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDDNRT\n         SPACE 1\n***********************************************************************\n**    DDNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDEBUG": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDEBUG &ON\n         GBLA  &RCPBGN#,&RCPSWS(10)\n         GBLB  &RCPDBUG\n         GBLC  &RCPPRE,&RCPWKDS,&RCPWKCS\n         AIF   ('&ON' EQ '').TSW\n&RCPDBUG SETB 1\n.TSW     AIF   (&RCPDBUG).DEBUG\n         MEXIT\n.DEBUG   MNOTE *,'RCPBGN# IS &RCPBGN#'\n         MNOTE *,'RCPSWS(1) IS &RCPSWS(1)'\n         MNOTE *,'RCPSWS(2) IS &RCPSWS(2)'\n         MNOTE *,'RCPSWS(3) IS &RCPSWS(3)'\n         MNOTE *,'RCPSWS(4) IS &RCPSWS(4)'\n         MNOTE *,'RCPSWS(5) IS &RCPSWS(5)'\n         MNOTE *,'RCPWKCS IS ''&RCPWKCS'''\n         MNOTE *,'RCPWKDS IS ''&RCPWKDS'''\n         MNOTE *,'RCPPRE IS ''&RCPPRE'''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDFPL": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDFPL\n         GBLC  &RCPPRE\n         GBLB  &RCPDFPL(2)\n         GBLB  &RCPDFPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPDFPL(2)).BYPDFPL\n&RCPDFPL(2) SETB 1\n         IKJDFPL\nL#DFPL   EQU   *-DFPL                  LENGTH OF DEFAULT PARAM LIST\n         IKJDFPB\nL#DFPB   EQU   *-DFPB                  LENGTH OF DEFAULT PARAM BLOCK\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPDFPL RCPDS\n&P.DFPL  DS    CL(L#DFPL)              RESERVE SPACE FOR DFPL\n&P.DFPB  DS    CL(L#DFPB)              RESERVE SPACE FOR DFPB\n&P.DSNB  DS    CL48                    RESERVE SPACE FOR DSNAME BUFFER\n         RCPDS\n         EJECT\n***********************************************************************\n***   THIS CODE GENERATES AN DEFAULT SERVICE ROUTINE PARAMETER LIST ***\n***       AND PARAMETER BLOCK                                       ***\n***********************************************************************\n         LA    R1,&P.DFPL              LOAD DFPL ADDRESS\n         USING DFPL,R1                 DFPL ADDRESSABLE\n         MVC   DFPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   DFPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,DFPLECB             AND STORE IN DFPL\n         LA    R15,&P.DFPB             LOAD DFBP ADDRESS\n         ST    R15,DFPLDFPB             AND STORE IT IN DFPB\n         DROP  R1\n         USING DFPB,R15                ADDRESS DFPB DSECT\n         XC    DFPB(L#DFPB),DFPB       CLEAR DEFAULT PARAMETER BLOCK\n         MVC   DFPBPSCB,CPPLPSCB       MOVE IN ADDRESS OF PSCB\n         LA    R1,&P.DSNB              LOAD DSNAME BUFFER ADDRESS\n         ST    R1,DFPBDSN               AND STORE IT INTO DFPB\n         MVI   DFPBCODE,DFPB04          SET ENTRY CODE\n         DROP  R15                     DFPB NO LONGER ADDRESSABLE\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDINC": {"ttr": 1547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDINC &L1\n         GBLA  &DTUO,&DTUPO\n         GBLC  &DYNP\n         AIF   ('&L1' EQ '').T2\n         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT\n&DTUPO   SETA  &DTUPO+4\n&DTUO    SETA  &DTUO+&L1\n         MEXIT\n.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDISP": {"ttr": 1549, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDISP &DISP\n         LCLA  &I\n         LCLB  &B(4)\n         AIF   ('&DISP(1)' EQ '').TD2\n         SPACE\n***********************************************************************\n**     DATA SET INITIAL STATUS                                       **\n***********************************************************************\n&B(1)    SETB  ('&DISP(1)' EQ 'SHR')\n&B(2)    SETB  ('&DISP(1)' EQ 'NEW')\n&B(3)    SETB  ('&DISP(1)' EQ 'MOD')\n&B(4)    SETB  ('&DISP(1)' EQ 'OLD')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1\n         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'\n&B(1)    SETB  1\n.OK1     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')\n         RCPDINC 8\n.TD2     AIF   ('&DISP(2)' EQ '').TD3\n         SPACE\n***********************************************************************\n**    DATA SET NORMAL DISPOSITION                                    **\n***********************************************************************\n&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2\n         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'\n&B(1)    SETB  1\n.OK2     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.TD3     AIF   ('&DISP(3)' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   DATASET CONDITIONAL DISPOSITION                                 **\n***********************************************************************\n&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVI   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDS": {"ttr": 1551, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDS\n         GBLB  &RCPDSBR\n         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS\n         AIF   ('&RCPDS' NE '').RESUME\n&RCPDS   SETC  '&SYSECT'\n         AIF   ('&RCPWKDS' EQ '').CSECT\n&RCPWKDS DSECT                         ENTER WORKAREA DSECT\n         MEXIT\n.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH\n&RCPWKCS CSECT                         ENTER WORKAREA CSECT\n         MEXIT\n.RESUME  AIF   (&RCPDSBR).BRTO\n&RCPDS   CSECT                         RESUME PROGRAM CSECT\n&RCPDS   SETC  ''\n         MEXIT\n.BRANCH  ANOP\n&RCPDS   SETC  'RCP&SYSNDX'\n&RCPDSBR SETB  1\n         B     &RCPDS                  BRANCH AROUND CONSTANTS\n         MEXIT\n.BRTO    ANOP\n&RCPDS   DS    0H\n&RCPDSBR SETB  0\n&RCPDS   SETC  ''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSECT": {"ttr": 1553, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPDSECT &LTORG=YES\n         AIF   ('&LTORG' NE 'YES').RCPDS\n***********************************************************************\n****                  LITERALS                                     ****\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n.RCPDS   RCPDS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSN": {"ttr": 1555, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE DSNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         AIF   ('&DSN'  EQ '*').TERM\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 50\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.TERM    MVI   S99TUKEY+1,DALTERM\n         RCPDINC 4\n         MEXIT\n.BD      RCPTUBFR DALDSNAM,50,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DALDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   BUILD THE MEMBER NAME TEXT UNIT                                 **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DALMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DALMEMBR,1,&MEMBER\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSNPD": {"ttr": 1557, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDSNPD &PDE\n         AIF   ('&PDE'(1,1) EQ '(').RPDE\n         RCPDSN &PDE,8+&PDE\n         RCPPSWD 16+&PDE\n         MEXIT\n.RPDE    RCPDSN &PDE,8&PDE\n         RCPPSWD 16(&PDE)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSNRT": {"ttr": 1559, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDSNRT\n         SPACE\n***********************************************************************\n**    DSNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDSN     SET RETURN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,44           SET LENGTH FIELD\n         RCPDINC 50\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSRGR": {"ttr": 1561, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDSRGR\n         SPACE\n***********************************************************************\n**    DSORG RETURN TEXT UNIT                                         **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTORG     SET RETURN DSORG KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         XC    S99TUPAR(2),S99TUPAR    INITIALIZE FIELD TO ZERO\n         RCPDINC 8\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDUMMY": {"ttr": 1563, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPDUMMY &DUMMY\n         SPACE\n***********************************************************************\n**      DUMMY DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUPAR+1,DALDUMMY     MOVE IN DUMMY DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPENDD": {"ttr": 1565, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPENDD\n         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2)\n         GBLC  &RCPPRE,&RCPWKDS,&RCPDS\n         LCLC  &P,&CS\n&CS      SETC  '&RCPDS'                PROGRAM CSECT\n         AIF   (NOT &RCPS99(1)).TDS\n         DYNSPACE\n.TDS     AIF   ('&RCPWKDS' EQ '').RCPDS\n         DS    0D                      ALIGN TO DOUBLEWORD\n&P       SETC  '&RCPPRE'\n&P.WKLEN EQU   *-&RCPWKDS              LENGTH OF WORK AREA\n.RCPDS   RCPDS\n         EJECT\n         AIF   (NOT &RCPECT(1) OR &RCPECT(2)).TRYUPT\n         IKJECT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPECT(2)     SETB           1\n.TRYUPT  AIF   (NOT &RCPUPT(1) OR &RCPUPT(2)).TRYPSCB\n         IKJUPT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPUPT(2) SETB  1\n.TRYPSCB AIF   (NOT &RCPPSCB(1) OR &RCPPSCB(2)).TRYS99\n         IKJPSCB\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPPSCB(2) SETB  1\n.TRYS99  AIF   (NOT &RCPS99(1) OR &RCPS99(2)).TRYREST\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPS99(2) SETB  1\n.TRYREST MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDDN": {"ttr": 1567, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFDDN &DDN\n         GBLC &DYNP\n         SPACE\n***********************************************************************\n**        FREE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').B\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DUNDDNAM,1,&DDN\n         MEXIT\n.B       RCPTUBFR DUNDDNAM,14,&DDN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDISP": {"ttr": 1569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFDISP &DISP\n         LCLB  &B(4)\n         LCLA  &I\n         SPACE\n***********************************************************************\n**       OVERRIDING DISPOSITION                                      **\n***********************************************************************\n&B(1)    SETB  ('&DISP' EQ 'KEEP')\n&B(2)    SETB  ('&DISP' EQ 'DELETE')\n&B(3)    SETB  ('&DISP' EQ 'CATLG')\n&B(4)    SETB  ('&DISP' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP IS INVALID, DISP=KEEP USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DUNOVDSP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDSN": {"ttr": 1794, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**      FREE DATA SET TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DUNDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 50\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.BD      RCPTUBFR DUNDSNAM,50,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DUNDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**       FREE MEMBER NAME TEXT UNIT                                  **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DUNMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DUNMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DUNMEMBR,1,&MEMBER\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFHOLD": {"ttr": 1796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFHOLD &H\n         AIF   ('&H' EQ 'YES').YES\n         AIF   ('&H' EQ 'NO').NO\n         MNOTE 4,'HOLD PARMETER VALUE INCORRECT - IGNORED'\n         MEXIT\n.YES     ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT HOLD TEXT UNIT                             **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEXIT\n.NO      ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT NO HOLD TEXT UNIT                          **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFORUS": {"ttr": 1798, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - TO SET UP SVC 99 TEXT UNIT 'FOR USER'\n         RCPFORUS &T\n         SPACE 1\n***********************************************************************\n**       'FOR USER' TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR 0,5,&T,N=X'7701'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFREE": {"ttr": 1800, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFREE &FREE\n         SPACE\n***********************************************************************\n**      UNALLOC AT CLOSE TEXT UNIT                                   **\n***********************************************************************\n         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPIOPL": {"ttr": 1802, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPIOPL\n         GBLC  &RCPPRE\n         GBLB  &RCPIOPL(2)\n         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPPGPB(2),&RCPGTPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPIOPL(2)).BYPIOPL\n&RCPIOPL(2) SETB 1\n         IKJIOPL\nL#IOPL   EQU   *-IOPL                  LENGTH OF IO PARAM LIST\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPIOPL RCPDS\n&P.IOPL  DS    CL(L#IOPL)              RESERVE SPACE FOR IOPL\n         RCPDS\n         SPACE 5\n***********************************************************************\n***   THIS CODE GENERATES AN I/O SERVICE ROUTINE PARAMETER LIST     ***\n***********************************************************************\n         LA    R1,&P.IOPL              LOAD IOPL ADDRESS\n         USING IOPL,R1                 IOPL ADDRESSABLE\n         MVC   IOPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   IOPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,IOPLECB             AND STORE IN IOPL\n         DROP  R1\n  AIF (&RCPSTPB(1) OR &RCPGTPB(1) OR &RCPPGPB(1) OR &RCPPTPB(1)).I\n         MEXIT\n.I       EJECT\n         AIF   (NOT &RCPSTPB(1) OR &RCPSTPB(2)).TPT\n         IKJSTPB\n&RCPSTPB(2) SETB 1\nL#STPB   EQU   *-STPB         LENGTH OF STPB\n&SYSECT  CSECT\n.TPT     AIF   (NOT &RCPPTPB(1) OR &RCPPTPB(2)).TGT\n         IKJPTPB\n&RCPPTPB(2) SETB 1\nL#PTPB   EQU   *-PTPB         LENGTH OF PTPB\n&SYSECT  CSECT\n.TGT     AIF   (NOT &RCPGTPB(1) OR &RCPGTPB(2)).TPG\n         IKJGTPB\n&RCPGTPB(2) SETB 1\nL#GTPB   EQU   *-GTPB         LENGTH OF GTPB\n&SYSECT  CSECT\n.TPG     AIF   (NOT &RCPPGPB(1) OR &RCPPGPB(2)).STO\n         IKJPGPB\n&RCPPGPB(2) SETB 1\nL#PGPB   EQU   *-PGPB         LENGTH OF PGPB\n&SYSECT  CSECT\n.STO     SPACE 3\n&L       SETC  ''\n         RCPDS\n         AIF   (NOT &RCPSTPB(1)).XPT\n&P.STPB  DS    CL(L#STPB)              RESERVE SPACE FOR STPB\n&L       SETC  '&L.+L#STPB'\n.XPT     AIF   (NOT &RCPPTPB(1)).XGT\n&P.PTPB  DS    CL(L#PTPB)              RESERVE SPACE FOR PTPB\n&L       SETC  '&L.+L#PTPB'\n.XGT     AIF   (NOT &RCPGTPB(1)).XPG\n&P.GTPB  DS    CL(L#GTPB)              RESERVE SPACE FOR GTPB\n&L       SETC  '&L.+L#GTPB'\n.XPG     AIF   (NOT &RCPPGPB(1)).XC\n&P.PGPB  DS    CL(L#PGPB)              RESERVE SPACE FOR PGPB\n&L       SETC  '&L.+L#PGPB'\n.XC      RCPDS\n&L1      SETC  '&L'(2,K'&L-1)\n&L       SETC  '&P'.'&L1'(3,4)\n         XC    &L.(&L1.),&L            CLEAR IOPB AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLINK": {"ttr": 1805, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPLINK &MODULE\n         LCLC  &OFFSET,&C\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&OFFSET  SETC  '736'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&OFFSET  SETC  '444'\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&OFFSET  SETC  '348'\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&OFFSET  SETC  '464'\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&OFFSET  SETC  '472'\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LINK USED'\n*\n         AGO   .LINK\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R15,&OFFSET.(R15)       LOAD MODULE ADDRESS\n         LTR   R15,R15                 IS MODULE ADDRESS THERE?\n&C       SETC  'RCP&SYSNDX'\n         BNM   &C.L                     IF NOT, BRANCH TO LINK\n         BALR  R14,R15                  ELSE BALR TO IT\n         B     &C.B                      AND BYPASS LINK\n&C.L     LINK  EP=&MODULE\n&C.B     DS    0H                      BRANCHED TO IF LINK BYPASSED\n         MEXIT\n.LINK    ANOP\n&NAME    LINK  EP=&MODULE\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOAD": {"ttr": 1807, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPLOAD &MOD,&EP1\n         GBLC  &RCPPTEP,&RCPGTEP,&RCPPGEP\n         GBLC  &RCPDFEP,&RCPSTEP,&RCPPREP\n         GBLC  &RCPPRE\n         LCLA  &I,&J\n         LCLB  &EPXISTS\n         LCLC  &OFFSET,&C,&EP,&MODULE\n&EP      SETC  '&EP1'\n&MODULE  SETC  '&MOD'\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE'(K'&MOD,1) NE ')').NOBR\n&I       SETA  K'&MOD\n.LOOP    ANOP\n&I       SETA  &I-1\n         AIF   (&I LT 2).NOLB\n         AIF   ('&MOD'(&I,1) NE '(').LOOP\n&MODULE  SETC  '&MOD'(1,&I-1)\n&J       SETA  K'&MOD-1-&I\n&EP      SETC  '&MOD'(&I+1,&J)\n         RCPDS\n&EP      DS    F                       TO STORE MODULE ADDRESS\n         RCPDS\n.NOBR    ANOP\n&EPXISTS  SETB  ('&EP' NE '')\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n&RCPPREP SETC '&EP'\n         AIF   (&EPXISTS).START\n         RCPDS\n&RCPPREP SETC '&RCPPRE.PREP'\n&EP      SETC  '&RCPPREP'\n&RCPPREP DS    F                       TO HOLD ADDRESS OF IKJPARS\n         RCPDS\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&RCPDFEP SETC  '&EP'\n&OFFSET  SETC  '736'\n         AIF   (&EPXISTS).START\n&RCPDFEP SETC  '&RCPPRE.DFEP'\n         RCPDS\n&RCPDFEP DS    F                       ADDR OF DEFAULT SERVICE ROUTINE\n         RCPDS\n&EP      SETC  '&RCPDFEP'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&RCPPTEP SETC  '&EP'\n&OFFSET  SETC  '444'\n         AIF   (&EPXISTS).START\n&RCPPTEP SETC  '&RCPPRE.PTEP'\n&EP      SETC  '&RCPPTEP'\n         RCPDS\n&RCPPTEP DS    F                       ADDR OF PUTLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&RCPGTEP SETC  '&EP'\n&OFFSET  SETC  '348'\n         AIF   (&EPXISTS).START\n&RCPGTEP SETC  '&RCPPRE.GTEP'\n&EP      SETC  '&RCPGTEP'\n         RCPDS\n&RCPGTEP DS    F                       ADDR OF GETLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&RCPPGEP SETC  '&EP'\n&OFFSET  SETC  '464'\n         AIF   (&EPXISTS).START\n&RCPPGEP SETC  '&RCPPRE.PGEP'\n&EP      SETC  '&RCPPGEP'\n         RCPDS\n&RCPPGEP DS    F                       ADDR OF PUTGET ROUTINE\n         RCPDS\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&RCPSTEP SETC  '&EP'\n&OFFSET  SETC  '472'\n         AIF   (&EPXISTS).START\n&RCPSTEP SETC  '&RCPPRE.STEP'\n&EP      SETC  '&RCPSTEP'\n         RCPDS\n&RCPSTEP DS    F                       ADDR OF STACK ROUTINE\n         RCPDS\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LOAD USED'\n*\n         AGO   .LOAD\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R0,&OFFSET.(R15)        LOAD MODULE ADDRESS\n         LTR   R0,R0                   IS MODULE LOADED?\n&C       SETC  'RCP&SYSNDX'\n         BM    &C                      IF SO, BYPASS LOAD MACRO\n.LOAD    LOAD EP=&MODULE.\n         AIF   ('&EP' EQ '').EPERR\n&C       ST    R0,&EP                  STORE ENTRY POINT ADDRESS\n         MEXIT\n.EPERR   MNOTE 4,'EP RETURN FIELD NOT SPECIFIED'\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEXIT\n.NOLB    MNOTE 4,'INVALID MODULE NAME ''&MOD'''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCSW": {"ttr": 1810, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLB  &RCPDSW3(20)   INVERT INDICATOR\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N\n         LCLB  &NOT\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8+8            INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n&NOT     SETB  0\n         AIF   ('&SW2'(1,1) NE '\u00ac' AND '&SW2'(1,1) NE '-').TNOT2\n&SW2     SETC  '&SW2'(2,K'&SW2-1)       REMOVE NOT SIGN\n&NOT     SETB  1                       INDICATE INVERT FUNCTION\n         AGO   .LOOP1A                 CONTINUE\n.TNOT2   AIF   (K'&SW2 LT 5).LOOP1A    CHECK LENGTH\n         AIF   ('&SW2'(1,4) NE 'NOT-').LOOP1A  WAS SWITCH INVERTED?\n&SW2     SETC  '&SW2'(5,K'&SW2-4)      STRIP OFF 'NOT-'\n&NOT     SETB  1                       INDICATE INVERTED\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n         AIF   (&RCPDSW3(&K) NE &NOT).SWL1  ENSURE INVERT BIT THE SAME\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NEWSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n&RCPDSW3(&RCPDSW0) SETB (&NOT)         SET INVERT INDICATOR\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&C       SETC  '&RCPGSWB(&I)'\n         AIF   (&L LT K'&C).LOOP2\n         AIF   ('&SW2'(1,K'&C) NE '&C').LOOP2\n&SW1     SETC  '&RCPGSWN(&I)'\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCS1": {"ttr": 1813, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8              INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NENSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&SW1     SETC  '&RCPGSWN(&I)'\n         AIF   (&L LT K'&SW1).LOOP2\n         AIF   ('&SW1'(1,&L) NE '&SW2').LOOP2\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCS2": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1                SWITCH BYTE NAME\n         GBLC  &RCPDSW2                SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH BIT\n&J       SETA  &RCPDSW#*8+8            ARRAY POS OF LAST SW BIT\n&I       SETA  8                       ARRAY POS-1 OF 1ST SW BIT\n.LOOP1   AIF   (&I GE &J).TGEN         IF SW NOT FOUND IN 1ST ARRAY,\n.*                                      GO SEARCH GENERIC NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&RCPDSW2').LOOP1  LOOK FOR MATCH\n.*\n.*       OK, WE'VE FOUND A MATCH.\n.*\n&I       SETA  (&I-1)/8               GET POS OF SWITCH BYTE\n&RCPDSW1 SETC  '&RCPDSWN(&I)'         MOVE IT TO EXIT PARM VAR\n&I       SETA  &I*8+1                 POINT TO 1ST SW BIT IN IT\n&J       SETA  &I+8                   POINT TO LAST SW BIT IN IT\n&M       SETA  N'&SW                  GET NO OF SWITCHES\n&L       SETA  1\n.*\n.*       NOW WE PROCESS SUBSEQUENT SWITCHES IN THE LIST\n.*\n.LOOP2   AIF   (&L GE &M).EXIT        EXIT WHEN FINISHED\n&L       SETA  &L+1                   POINT TO NEXT SW IN LIST\n&C       SETC  '&SW(&L)'               EXTRACT IT\n&RCPDSW2 SETC  '&RCPDSW2.+&C'           THEN APPEND TO PREVIOUS\n.*\n.*       NOW WE CHECK THAT THE SWITCH IS DECLARED IN THE SAME\n.*       BYTE AS THE FIRST.\n.*\n&N       SETA  &I-1                     POINT TO 1ST BIT POS MINUS 1\n.LOOP3   AIF   (&N GE &J).NM            IF SW NOT FOUND, ISSUE MNOTE\n&N       SETA  &N+1                     POINT TO NEXT\n         AIF   ('&C' NE '&RCPDSWB(&N)').LOOP3  SEARCH FOR MATCH\n         AGO   .LOOP2                   IF FOUND, GO PROCESS NEXT\n.NM      MNOTE 4,'WARNING: SWITCH ''&C'' NOT DECLARED IN SAME BYTE AS  X\n               SWITCH ''&SW(1)'' - LOGIC ERROR MAY OCCUR'\n         AGO   .LOOP2            CONTINUE FOR NEXT SWITCH BIT\n.*\n.*       IF THE SWITCH WAS NOT LOCATED IN THE EXPLICIT NAME ARRAY,\n.*       THE GENERIC NAME ARRAY IS SEARCHED.\n.*\n.TGEN    ANOP\n&I       SETA  0\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH\n&L       SETA  K'&RCPDSW2              GET LENGTH OF 1ST SW\n.LOOP4   AIF   (&I GE &RCPGSW#).ERROR  IF NOT SW NOT DECLARED, ERROR\n&I       SETA  &I+1\n&C       SETC  '&RCPGSWB(&I)'          GET GENERIC PREFIX\n&K       SETA  K'&C                    GET LENGTH OF GENERIC PREFIX\n         AIF   (&L LT &K).LOOP4         AND SKIP IF LEN OF SWITCH NAME\n.*                                          < LEN OF GENERIC PREFIX\n         AIF   ('&RCPDSW2'(1,&K) NE '&C').LOOP4  ALSO SKIP IF NO MATCH\n&RCPDSW1 SETC  '&RCPGSWN(&I)'          SAVE SWITCH BYTE NAME\n&I       SETA   1\n&J       SETA   N'&SW\n.LOOP5   AIF   (&I GE &J).EXIT         EXIT WHEN FINISHED\n&I       SETA   &I+1\n&RCPDSW2 SETC   '&RCPDSW2.+&SW(&I)'     APPEND THIS SWITCH\n         AIF    ('&SW(&I)    '(1,&K) EQ '&C').LOOP5 CHECK PREFIX\n         MNOTE 4,'WARNING: SWITCH ''&SW(&I)'' NOT GENERICALLY EQUAL TO X\n               SWITCH ''&SW(1)'''\n         AGO   .LOOP5\n.ERROR   MNOTE 8,'SWITCH ''&SW(1)'' NOT DECLARED'\n&RCPDSW1 SETC  ''             INDICATE ERROR\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPMCA": {"ttr": 2052, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPMCA &DSECT=YES\n         GBLC  &RCPPRE\n         GBLA  &RCPSWS(10)\n         LCLC  &P\n     RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPSWS(2) NE 2).DSECT\n&P.MCA   DS    0F                      MODULE COMMUNICATIONS AREA\n         AGO   .MCA2\n.DSECT   ANOP\n&P.MCA   DSECT                         MODULE COMMUNICATIONS AREA\n.MCA2    ANOP\n&P.XDS   DS    F                       ADDR OF EXTERNAL DUMMY SECTION\n         AIF   (&RCPSWS(3) LT 1).EXIT\n&P.A#GET DS    F                       ADDRESS OF LIFO GET ROUTINE\n&P.A#FRE DS    F                       ADDRESS OF LIFO FREE ROUTINE\n&P.#S    DS    F                       ADDRESS OF CURRENT LIFO STACK\n&P.#E    DS    F                       ADDRESS OF END OF LIFO STACK\n&P.#N    DS    F                       ADDRESS OF NEXT FREE AREA\n&P.#C    DS    F                       ADDRESS OF NEXT LIFO STACK\n&P.#L    DS    F                       LENGTH OF CURRENT LIFO STACK\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPNTU": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPNTU &KEY,&LEN,&PAR\n.*\n.*     THIS IS AN ALLOC/FREE MACRO TEXT UNIT PROCESSOR SUBROUTINE\n.*     MACRO. IT BUILDS NUMERIC TYPE TEXT UNITS.\n.*\n         LCLA  &L,&R\n         LCLC  &C\n         GBLC  &RCPTYPE\n.*  ALLOC/FREE INNER MACRO TO SET UP NUMERIC TEXT UNITS\n&L       SETA  1                       DEFAULT LENGTH\n         AIF   ('&LEN' EQ '').NL\n&L       SETA  &LEN\n.NL      MVI   S99TUKEY+1,&KEY         SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           SET LENGTH FIELD\n         AIF   ('&PAR'(1,1) EQ '(').REG\n         RCPTYPE &PAR                  ANALYSE PARAMETER\n         AIF   ('&RCPTYPE' EQ 'N').NUMERIC\n&R       SETA  4-&L\n         MVC   S99TUPAR(&L),&R+&PAR    MOVE IN QUANTITY\n         RCPDINC 10\n         MEXIT\n.NUMERIC AIF   (&L EQ 1).NL1\n         MVC   S99TUPAR(&L.),=AL&L.(&PAR) MOVE IN QUANTITY\n&R       SETA  &L+6\n         AIF   (&R/2 EQ (&R+1)/2).LOK ENSURE LENGTH EVEN\n&R       SETA  &R+1\n.LOK     RCPDINC &R\n         MEXIT\n.NL1     MVI   S99TUPAR,&PAR           MOVE IN QUANTITY\n         RCPDINC 8\n         MEXIT\n.REG     ANOP\n&C       SETC  '&PAR'(2,K'&PAR-2)\n         AIF   (&L EQ 3).STCM\n         AIF   (&L EQ 2).STH\n         AIF   (&L EQ 1).STC\n         ST    &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STH     STH   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STC     STC   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STCM    STCM  &C,7,S99TUPAR           STORE TEXT UNIT QUANTITY\n.RCPDINC RCPDINC 10\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPERM": {"ttr": 2056, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPERM\n         SPACE\n***********************************************************************\n**     PERMANENTLY ALLOCATED ATTRIBUTE TEXT UNIT                     **\n***********************************************************************\n         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPPL": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPPPL &PCL=,&NOPARM=,&PARSERR=,&PDLREG=R11,                  X\n               &PDLNAME=,&PARSEP=,&PARSWKA=\n         GBLB  &RCPPPL(2),&RCPECT(2)\n         GBLC  &RCPPRE,&RCPPREP\n         LCLC  &P\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPPPL(2)).BPPL\n         EJECT\n         IKJPPL\nL#PPL    EQU   *-PPL                   LENGTH OF PPL\n&SYSECT  CSECT\n         SPACE 1\n&RCPPPL(2) SETB 1\n.BPPL    RCPDS\n&P.PPL   DS    CL(L#PPL)               RESERVE SPACE FOR PPL\n&P.PDLP  DS    F                       POINTER TO PDL\n         RCPDS\n         SPACE 6\n***********************************************************************\n***   THIS CODE GENERATES A PARSE PARAMETER LIST                    ***\n***********************************************************************\n         XC    &P.PDLP,&P.PDLP         ZERO PDL POINTER\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' NE '').PB2\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1                  ECT ADDRESSABLE\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)              NO, BRANCH OUT\n         SPACE\n.PB2     LA    R1,&P.PPL               LOAD PPL ADDRESS\n         USING PPL,R1\n         MVC   PPLUPT,CPPLUPT          MOVE IN UPT ADDRESS\n         MVC   PPLECT,CPPLECT          MOVE IN ECT ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE IN CBUF ADDRESS\n         LA    R15,&P.ECB              LOAD ATTN ECB ADDRESS\n         ST    R15,PPLECB              AND STORE IN PPL\n         LA    R15,&P.PDLP             LOAD PDL POINTER ADDRESS\n         ST    R15,PPLANS               AND STORE IN PPL\n         AIF   ('&PARSWKA' EQ '').PB3\n         AIF   ('&PARSWKA'(1,1) EQ '').PB4\n         LA    R15,&PARSWKA            LOAD ADDRESS OF WORK AREA\n         ST    R15,PPLUWA               AND STORE IN PPL\n         AGO   .PB3\n.PB4     ST    &PARSWKA(1),PPLUWA      STORE ADDRESS OF WORKAREA\n.PB3     AIF   ('&PCL' EQ '').EXIT\n         L     R15,=V(&PCL)            LOAD PCL ADDRESS\n         ST    R15,PPLPCL              AND STORE IN PPL\n         SPACE 2\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' EQ '').PB5\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)               NO, BRANCH OUT\n         SPACE\n.PB5     AIF   ('&SYSPARM' EQ 'MVT').MVTBYP\n         AIF   ('&RCPPREP' EQ '').NOPREP\n         L     R15,&RCPPREP            LOAD EP OF IKJPARS\n         BALR  R14,R15                  AND ENTER IT\n         AGO   .PRET\n.NOPREP  ANOP\n         L     R15,16                  LOAD CVT ADDRESS\n         TM    524(R15),X'80'          IS IKJPARS LOADED?\n         AIF   ('&PARSEP' EQ '').PBL1\n         BZ    &P.LOAD                  NO, BRANCH TO LOAD SVC\n         L     R15,524(15)             LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE ITS ADDRESS\n         BALR  R14,R15                 THEN BALR TO IT\n         B     &P.PLNKB                BYPASS LOAD SVC\n&P.LOAD  LOAD  EP=IKJPARS\n         LR    R15,R0                  LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE IT\n         BALR  R14,R15                 THEN BALR TO IT\n&P.PLNKB DS    0H\n         AGO   .PRET\n.PBL1    BZ    &P.PLINK                 NO, BRANCH TO LINK SVC\n         L     R15,524(R15)            ELSE LOAD ITS ADDRESS\n         BALR  R14,R15                  AND BALR TO IT\n         B     &P.PLNKB                BYPASS LINK SVC\n.MVTBYP  ANOP\n&P.PLINK LINK  EP=IKJPARS\n&P.PLNKB DS    0H\n.PRET    AIF   ('&PARSERR' EQ '').EXIT\n         SPACE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &PARSERR                 AND BRANCH ON NON-ZERO\n         SPACE\n         AIF   ('&PDLREG' EQ '' OR '&PDLNAME' EQ '').EXIT\n         L     &PDLREG,&P.PDLP         LOAD PDL ADDRESS\n         USING &PDLNAME,&PDLREG        PDL DSECT ADDRESSABLE\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPROC": {"ttr": 2061, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPROC &WKCSECT=,&WKDSECT=,                                  X\n               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X\n               &SAVESUF=,&SP=\n         GBLA  &RCPSWS(10)\n         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS\n         GBLC  &RCPSPN\n         LCLC  &P,&C\n         RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   ('&WKCSECT' EQ '').TDS\n         SPACE\n         MNOTE 4,'WKCSECT= OPTION INVALID WITH PROC OPTION, '\n         MNOTE *,'    WKDSECT=  USED INSTEAD'\n&RCPWKDS SETC  '&WKCSECT'\n         AGO   .SETCS\n.TDS     AIF   ('&WKDSECT' EQ '').SYSECT\n&RCPWKDS SETC  '&WKDSECT'\n         AGO   .SETCS\n.SYSECT  ANOP\n&RCPWKDS SETC  '&SYSECT'\n.SET1    AIF   (K'&RCPWKDS LT 8).LOK\n&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'\n         AGO   .SETCS\n.LOK     ANOP\n&RCPWKDS SETC  '&RCPWKDS.1'\n.SETCS   ANOP\n&RCPWKCS SETC  ''\n&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)\n         AIF   ('&ISA' EQ '').NISA\n&RCPSWS(3) SETA 1                      SET LIFO FLAG IF ISA SPEC\n.NISA    ANOP\n         SPACE 2\n         RCPDS\n         DS    9D                      SAVE AREA\n&P.RCODE DS    F                       RETURN CODE\n         RCPMCA\n         RCPDS\n         SPACE 2\n         AIF   ('&REG1' EQ '').TR0\n         LR    &REG1,R1                SAVE CONTENTS OF REG 1\n.TR0     AIF   ('&REG0' EQ '').TP\n         LR    &REG0,R0                SAVE CONTENTS OF REG 0\n.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION\n         AIF   (&RCPSWS(3) EQ 1).PL    LIFO OPTION\n         L     R15,0(R13)              R15 -> MODULE COMMUNIC. AREA\n         L     R15,&P.XDS-&P.MCA(R15)  LOAD EXTERNAL DUMMY SECT ADDR\n         AL    R15,&P.QCON             GET OFFSET TO WORK AREA\n         ST    R15,8(R13)              CHAIN SAVE\n         ST    R13,4(R15)               AREAS TOGETHER\n         MVC   0(4,R15),0(R13)         COPY POINTER TO COMM AREA\n         LR    R13,R15                 LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13              ESTABLISH ADDRESSABLITY TO IT\n         MEXIT\n.PL      ANOP\n***********************************************************************\n*        GET WORKAREA FROM LIFO STACK                                 *\n***********************************************************************\n         #GET  LV=&P.WKLEN\n         ST    R1,8(R13)               CHAIN SAVE\n         ST    R13,4(R1)                AREAS TOGETHER\n         MVC   0(4,R1),0(R13)          PROPAGATE MODULE COMM. AREA ADDR\n         LR    R13,R1                  LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT\n         MEXIT\n.PROCMN  L     R0,&P.CXD               LOAD WORK AREA LENGTH\n         AIF   ('&SYSPARM' EQ 'MVT').MVT\n MNOTE *,'      GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'\n         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE\n         AGO   .CONT\n.MVT     AIF   ('&SP' EQ '').NOSP\n         ICM   R0,8,=AL1(&SP)          INSERT SUBPOOL NUMBER\n.NOSP    ANOP\n*        GETMAIN R,LV=(0)              OBTAIN A WORK AREA\n.CONT    ANOP\n&RCPSPN  SETC  '&SP'\n         LR    R15,R13                 SAVE CALLER'S SAVE AREA ADDR\n         LR    R13,R1                  LOAD EXT DUMMY SECTION ADDR\n         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA\n         ST    R13,8(R15)              CHAIN SAVE\n         ST    R15,4(R13)               AREAS TOGETHER\n         USING &RCPWKDS,R13            GET WORKAREA ADDRESSABILITY\n         ST    R1,&P.XDS               STORE DUMMY SECTION ADDR IN     X\n                                         MODULE COMMUNICATIONS AREA\n         LA    R15,&P.MCA              STORE COMMUNICATIONS AREA ADDR\n         ST    R15,0(R13)               IN WORD 1 OF SAVE AREA\n         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT\n&RCPSWS(3) SETA 1                      SET LIFO IN CASE ONLY ISA SPEC\n&C       SETC  '&ISA'\n         AIF   ('&ISA' NE '').TK\n&C       SETC  '8192'\n         AGO   .NK\n.TK      AIF   ('&C'(K'&C,1) NE 'K').NK\n&C       SETC  '&C'(1,K'&C-1)'*1024'\n.NK      EJECT\n***********************************************************************\n**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **\n**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **\n***********************************************************************\n         SPACE 1\n         MVC   &P.A#GET,=V(#####GET)   MOVE LIFO GET AND FREE\n         MVC   &P.A#FRE,=V(####FREE)    ROUTINE ADDRESSES TO MCA\n         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK\n         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET\n         ST    R15,&P.#S                 AND INITIALIZE POINTERS\n         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA\n         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA\n         ST    R14,&P.#L               STORE THIS IN MCA\n         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS\n         ST    R15,&P.#E                 AND STORE THIS INTO MCA\n         EJECT\n***********************************************************************\n**       LIFO STACK GET/FREE ROUTINES                                **\n***********************************************************************\n         SPACE 1\n#####ISA DXD   CL(&C)                  DEFINE PSEUDO REGISTER FOR ISA\n         SPACE 1\n#####GET CSECT                         LIFO GET ROUTINE\n         USING *,R15\n         USING &P.MCA,R1\n         A     R0,&P.F7                ROUND LENGTH UP TO\n         N     R0,&P.F8                 A MULTIPLE OF 8\n         AL    R0,&P.#N                COMPUTE NEXT FREE LIFO SLOT ADDR\n         CL    R0,&P.#E                COMPARE TO STACK END ADDRESS\n         BH    &P.GA                    AND IF TOO BIG, BRANCH\n         LR    R15,R1                  PRESERVE MCA ADDRESS\n         USING &P.MCA,R15              NEW BASE\n         L     R1,&P.#N                LOAD ADDRESS OF SLOT\n         ST    R0,&P.#N                 AND STORE ADDRESS OF NEXT SLOT\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.GA    EQU   *                       IF CURRENT SLOT TOO SMALL\n*        ABEND 1000,DUMP                ABEND FOR NOW\n         ABEND 1000,DUMP\n         SPACE 2\n####FREE DS    0H                      LIFO FREE ROUTINE\n         ENTRY ####FREE\n         USING *,R15                   BASE ADDRESS\n         USING &P.MCA,R1               MCA ADDRESS\n         CL    R0,&P.#S                CHECK THAT\n         BL    &P.FA                    ADDRESS TO BE\n         CL    R0,&P.#E                  FREED IS WITHIN\n         BH    &P.FA                      BOUND OF CURRENT STACK\n         AL    R0,&P.F7                GET UPPER DOUBLE\n         N     R0,&P.F8                 WORD BOUNDARY\n         ST    R0,&P.#N                  AND UPDATE MCA\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.FA    EQU   *                       IF ADDRESS NOT WITHIN THIS STACK\n*        ABEND 1001,DUMP               ABEND\n         ABEND 1001,DUMP\n         SPACE 2\n&P.F7    DC    F'7'                    CONSTANTS\n&P.F8    DC    F'-8'                    TO ROUND UP TO DOUBLEWORD SIZE\n         DROP  R1,R15                  KILL ADDRESSABILITY\n&SYSECT  CSECT                         RESUME MAIN PROGRAM CSECT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPSWD": {"ttr": 2065, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPSWD &PASSW\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE PASSWORD TEXT UNIT                                    **\n***********************************************************************\n         RCPVCHAR DALPASSW,14,&PASSW\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPQNAME": {"ttr": 2067, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPQNAME &QNAME\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE QNAME TEXT UNIT                                       **\n***********************************************************************\n         RCPVCHAR DALQNAME,14,&QNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPRNGE": {"ttr": 2069, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - BREAK A RANGE PARAMETER INTO TWO\n         RCPRNGE &P\n         GBLC  &RCPRNGE(2)\n         LCLA  &I,&J,&K\n&K       SETA  K'&P\n&RCPRNGE(1) SETC ''\n&RCPRNGE(2) SETC ''\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &K).NR\n         AIF   ('&P'(&I,1) NE '-' AND '&P'(&I,1) NE ':').LOOP\n&RCPRNGE(1) SETC '&P'(1,&I-1)\n&RCPRNGE(2) SETC '&P'(&I+1,&K-&I)\n         MEXIT\n.NR      ANOP\n&RCPRNGE(1) SETC '&P'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSPACE": {"ttr": 2305, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSPACE &SPACE\n         GBLA  &RCPSUB#                NO OF SUBLIST ELEMENTS\n         GBLC  &RCPSUBL(100)           SUBLIST ELEMENTS\n.**********************************************************************\n.*    THIS IS AN ALLOC INNER MACRO TO BUILD THE ALLOCATION SPACE\n.*    QUANTITY TEXT UNIT. IT SHOULD BE SPECIFIED AS:-\n.*     SPACE=(TYPE,(PRIMARY,SECONDARY,DIRECTORY),RLSE,CONTIG,ROUND)\n.*   WHERE TYPE IS 'TRK', 'CYL', 'ABSTR' OR A BLOCK QUANTITY\n.*     'CYL' OR 'TRK' SHOULD NOT BE ENTERED IN QUOTES. THE BLOCK\n.*     QUANTITY CAN BE A NUMBER, A REGISTER (IN BRACKETS), OR THE\n.*     NAME OF A FULLWORD CONTAINING THE BLOCK SIZE.\n.**********************************************************************\n         AIF   ('&SPACE(1)' EQ '' OR '&SPACE(1)' EQ 'TRK').TRK\n         AIF   ('&SPACE(1)' EQ 'CYL').CYL\n***********************************************************************\n**        SPACE UNIT IN BLOCKS                                       **\n***********************************************************************\n         RCPNTU DALBLKLN,3,&SPACE(1)  GENERATE BLOCK UNIT TU\n         AGO   .TPRIME        GO TEST PRIME QUANTITY\n.TRK     ANOP  TRACK SPEC REQ OR DEFAULTED\n         SPACE\n***********************************************************************\n**       SPACE QUANTITY IN TRACKS                                    **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTRK       SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TPRIME\n.CYL     ANOP  CYL QUANTITY\n         SPACE 1\n***********************************************************************\n**      SPACE UNIT IN CYLINDERS                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALCYL       SET TEXT UNIT KEY\n         RCPDINC 4                     STORE TEXT UNIT ADDR\n.TPRIME  RCPSUBL &SPACE(2)             BREAK UP SUBLIST\n         AIF   (&RCPSUB# EQ 0).TCONTIG\n         AIF   ('&RCPSUBL(1)' EQ '').TSP2\n         SPACE\n***********************************************************************\n**       PRIMARY SPACE QUANTITY                                      **\n***********************************************************************\n         RCPNTU DALPRIME,3,&RCPSUBL(1)\n.TSP2    AIF   (&RCPSUB# LT 2).TCONTIG\n         AIF   ('&RCPSUBL(2)' EQ '').TSP3\n         SPACE\n***********************************************************************\n**       SECONDARY SPACE QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALSECND,3,&RCPSUBL(2)\n.TSP3    AIF   (&RCPSUB# LT 3).TCONTIG\n         AIF   ('&RCPSUBL(3)' EQ '').TCONTIG\n         SPACE\n***********************************************************************\n**       DIRECTORY BLOCK QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALDIR,3,&RCPSUBL(3)\n.TCONTIG AIF  ('&SPACE(3)' EQ 'CONTIG' OR '&SPACE(4)' EQ 'CONTIG').CON\n         AIF   ('&SPACE(3)' EQ 'MXIG' OR '&SPACE(4)' EQ 'MXIG').MXIG\n         AIF   ('&SPACE(3)' EQ 'ALX' OR '&SPACE(4)' EQ 'ALX').ALX\n.TRLSE   AIF   ('&SPACE(3)' EQ 'RLSE' OR '&SPACE(4)' EQ 'RLSE').RLSE\n.TROUND  AIF   ('&SPACE(4)'EQ'ROUND'OR'&SPACE(5)'EQ'ROUND').ROUND\n         MEXIT\n.CON     ANOP\n***********************************************************************\n**      CONTIGUOUS SPACE TEXT UNIT                                   **\n***********************************************************************\n         RCPNTU DALSPFRM,1,8\n         AGO   .TRLSE\n.MXIG    ANOP\n***********************************************************************\n**       MAXIMUM CONTIGUOUS SPACE TEXT UNIT                          **\n***********************************************************************\n         RCPNTU DALSPFRM,1,4\n         AGO   .TRLSE\n.ALX     ANOP\n***********************************************************************\n**       'ALX' SPACE TEXT UNIT                                       **\n***********************************************************************\n         RCPNTU DALSPFRM,1,2\n         AGO   .TRLSE\n.RLSE    ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRLSE      SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TROUND\n.ROUND   ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALROUND     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSPEC": {"ttr": 2308, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - SET UP USER DEFINED TEXT UNIT\n         RCPSPEC &T\n         LCLA  &I,&J\n&I       SETA  1\n&J       SETA  K'&T\n         SPACE\n***********************************************************************\n**       PROCESS SPECIAL TEXT UNITS                                  **\n***********************************************************************\n.LOOP    RCPVCHAR &T(&I),&T(&I+2),&T(&I+3),N=&T(&I+1)\n&I       SETA  &I+4\n         AIF   (&I LE &J).LOOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSR2": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSR2 &A\n         GBLB  &RCPSR2\n         GBLC  &DYNP\n         LCLC  &C\n.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY\n.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND\n.*    GENERATES MOVE INSTRUCTION FOR EXECUTE\n         AIF   ('&A' NE '').UNSAVE\n         AIF   (&RCPSR2).EXIT\n&RCPSR2  SETB  1\n         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2\n         MEXIT\n.UNSAVE  AIF   (NOT &RCPSR2).EXIT\n         B     *+10                    SKIP NEXT INSTRUCTION\n&C       SETC  '&DYNP.MVC'\n&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE\n         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2\n&RCPSR2  SETB  0\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSSREQ": {"ttr": 2312, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSSREQ\n         SPACE 1\n***********************************************************************\n**       SUBSYSTEM REQUEST TEXT UNIT                                 **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DALSSREQ MOVE IN TEXT UNIT KEY\n         RCPDINC                   4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSUBL": {"ttr": 2314, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - BREAK DOWN A SUBLIST\n         RCPSUBL &L\n         GBLA  &RCPSUB#                NO OF ELEMENTS FOUND\n         GBLC  &RCPSUBL(100)           ELEMENTS\n         LCLA  &I,&J,&K\n&RCPSUB# SETA  0                       INITIALIZE\n         AIF   ('&L' EQ '').EXIT       EXIT IF NULL STRING\n         AIF   ('&L'(1,1) NE '(').NOSUB\n&K       SETA  K'&L-1\n&I       SETA  2\n&J       SETA  1\n.LOOP    ANOP\n&J       SETA  &J+1\n         AIF   (&J  GT &K).LAST\n         AIF   ('&L'(&J,1) NE ',').LOOP\n&RCPSUB# SETA &RCPSUB#+1\n         AIF   (&J EQ &I).NULL\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n&I       SETA  &J+1\n         AGO   .LOOP\n.NULL    ANOP\n&RCPSUBL(&RCPSUB#) SETC ''\n&I       SETA  &J+1\n         AGO   .LOOP\n.LAST    AIF   (&J EQ &I).LASTNUL\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n         AGO   .EXIT\n.LASTNUL ANOP\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC ''\n         AGO   .EXIT\n.NOSUB   ANOP\n&RCPSUBL(1) SETC '&L'\n&RCPSUB# SETA 1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSYSOU": {"ttr": 2316, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSYSOU &CLASS,&COPIES=,&FREE=,&DEST=,&FORMS=\n         GBLC  &DYNP\n         LCLC  &C\n         AIF   ('&CLASS(1)' EQ '').TPGN\n&C       SETC  '&CLASS(1)'\n         SPACE\n***********************************************************************\n**       SYSOUT CLASS TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&C'(1,1) EQ '''').Q\n         AIF   ('&C'(K'&C,1) EQ '/').BS\n         AIF   ('&C'(1,1) EQ '(').REG\n         L     R14,&C                  LOAD ADDRESS OF SYSOUT CLASS\n         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT\n         AGO   .SKEY\n.REG     MVC   S99TUPAR(1),0&C         MOVE SYSOUT CLASS TO TEXT UNIT\n.SKEY    MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n         RCPDINC 8\n         AGO   .TPGN\n.BS      RCPTUBFR DALSYSOU,14,&C\n         AGO   .TPGN\n.Q       RCPBTU DALSYSOU,1,&C\n.TPGN    AIF   ('&CLASS(2)' EQ '').TCOP\n         SPACE\n***********************************************************************\n**   SYSOUT PROGRAM NAME TEXT UNIT                                   **\n***********************************************************************\n&C       SETC  '&CLASS(2)'\n         RCPVCHAR DALSPGNM,14,&C\n.TCOP    AIF   ('&COPIES' EQ '').TFREE\n         SPACE\n***********************************************************************\n**    SYSOUT COPIES TEXT UNIT                                        **\n***********************************************************************\n         RCPNTU DALCOPYS,1,&COPIES\n.TFREE   AIF   ('&FREE' EQ '').TDEST\n         SPACE\n***********************************************************************\n**     FREE = CLOSE TEXT UNIT                                        **\n***********************************************************************\n         AIF   ('&FREE' EQ 'CLOSE').CLOSEOK\n         MNOTE 4,' **** FREE=&FREE INVALID, FREE=CLOSE USED'\n.CLOSEOK MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n.TDEST   AIF   ('&DEST' EQ '').TFORMS\n         SPACE\n***********************************************************************\n**       SYSOUT DESTINATION TEXT UNIT                                **\n***********************************************************************\n         RCPVCHAR DALSUSER,14,&DEST\n.TFORMS  AIF   ('&FORMS' EQ '').EXIT\n         SPACE\n***********************************************************************\n**     SYSOUT FORMS NUMBER TEXT UNIT                                 **\n***********************************************************************\n         RCPVCHAR DALSFMNO,14,&FORMS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTU": {"ttr": 2318, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPTU &TU            TEXT UNIT LIST\n         GBLA  &DTUPO         TEXT UNIT POINTER OFFSET\n         GBLC  &DYNP          ALLOC SYMBOL PREFIX\n         LCLA  &I,&J\n         LCLC  &C\n         SPACE 1\n***********************************************************************\n**       ADD SPECIAL TEXT UNITS                                      **\n***********************************************************************\n&J       SETA  N'&SYSLIST\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &J).EXIT\n         AIF   ('&TU(&I)'(1,1) EQ '(').R\n         LA    R15,&TU(&I)             LOAD TEXT UNIT ADDRESS\n         ST    R15,&DYNP.TUP+&DTUPO     AND STORE IT IN POINTER LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.R       ANOP\n&C       SETC  '&TU(&I)'(2,K'&TU(&I)-2)\n         ST    &C,&DYNP.TUP+&DTUPO     STORE TEXT UNIT ADDR IN PTR LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTUBFR": {"ttr": 2320, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFR &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTXTL": {"ttr": 2322, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - TO COUNT CHARACTERS IN A STRING\n         RCPTXTL &S\n         GBLA  &RCPTXTL\n         LCLA  &I,&K,&L\n&RCPTXTL SETA  0\n         AIF   (K'&S LT 3).MEND\n&RCPTXTL SETA  K'&S-2\n&L       SETA  &RCPTXTL\n&I       SETA  1\n.LOOP    ANOP\n&I       SETA  &I+1\n.LOOP2   AIF   (&I GT &L).MEND\n         AIF   ('&S'(&I,2) NE '''''' AND '&S'(&I,2) NE '&&').LOOP\n&I       SETA  &I+2\n&RCPTXTL SETA  &RCPTXTL-1\n         AGO   .LOOP2\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTYPE": {"ttr": 2324, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPTYPE &T\n         GBLC  &RCPTYPE\n         LCLA  &I,&K\n&K       SETA  K'&T\n&RCPTYPE SETC  ''\n         AIF   (&K EQ 0).EXIT\n&RCPTYPE SETC  'C'\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   ('&T'(&I,1) LT '0' OR '&T'(&I,1) GT '9').EXIT\n         AIF   (&I LT &K).LOOP\n&RCPTYPE SETC  'N'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPUNALC": {"ttr": 2326, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPUNALC\n         SPACE 1\n***********************************************************************\n**     FREE EVEN IF PERMANENTLY ALLOCATED                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPUNIT": {"ttr": 2328, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPUNIT &U,&V\n         GBLC  &DYNP\n         AIF   ('&U' EQ '').TVOL\n         SPACE 1\n***********************************************************************\n**       UNIT NAME TEXT UNIT                                         **\n***********************************************************************\n         RCPVCHAR DALUNIT,14,&U\n.TVOL    AIF   ('&V' EQ '').EXIT\n         SPACE 1\n***********************************************************************\n**       VOLUME SERIAL TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALVLSER,14,&V\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPVCHAR": {"ttr": 2330, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPVCHAR &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPVOLRT": {"ttr": 2332, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPVOLRT\n         SPACE 1\n***********************************************************************\n**    VOLUME SERIAL RETURN TEXT UNIT                                 **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTVOL     SET RETURN VOLUME SERIAL KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 2334, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "R0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S99FAIL": {"ttr": 2561, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTCALL": {"ttr": 2563, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LAB     VTCALL &RTN,&TEST\n&LAB     LA    R1,VTOCOM      POINT TO THE COMMON AREA\n         L     R15,VAD&RTN    POINT TO THE ROUTINE\n         AIF ('&TEST' NE 'TEST').NOTEST\n         LTR   R15,R15       SEE IF THE ROUTINE IS PRESENT\n         BZ    *+6           DON'T CALL IT IF IT'S NOT THERE\n.NOTEST  ANOP\n         BALR  R14,R15        THEN CALL IT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTFMT": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00T\\x00\\x92\\x08O\\x01\\x01\"o\\x11\\x18\\x00.\\x00)\\x00\\x08\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1992-03-24T00:00:00", "modifydate": "2001-08-14T11:18:54", "lines": 46, "newlines": 41, "modlines": 8, "user": "MMSMAK"}, "text": "         MACRO\n         VTFMT\n*\n*        THIS DSECT DESCRIBES THE FORMATTED DSCB\n*\nVTFMT    DSECT\nVTFNEXT  DS    A              POINTER TO NEXT DSCB\nVTFALLOC DS    F              ALLOCATION IN UNITS AS DEFINED BY THE\n*                               COMMAND.  KBYTES, MBYTES, TRACKS, OR\n*                               CYLS MAY BE THE UNIT.\nVTFUSED  DS    F                AMOUNT USED, SAME UNIT\nVTFUNUSD DS    F                AMOUNT UNUSED, SAME UNIT\nVTFPCT   DS    H                PERCENT USED,  0-100\nVTFVOLUM DS    CL6            VOLUME SERIAL NUMBER\nVTFUNIT  DS    CL8            UCB UNIT TYPE                     TANSKY\nVTFCREDT DS    XL3            CREATION DATE YYDDD\nVTFEXPDT DS    XL3            EXPIRATION DATE YYDDD\nVTFLSTAC DS    XL3            LAST ACCESS DATE YYDDD\nVTFNOEPV DS    AL1            NUMBER OF EXTENTS PER VOLUME\nVTFDSORG DS    CL3            DATA SET ORGANIZATION\n*                               PS, PO, DA, VS, IS, PERHAPS U\nVTFRECFM DS    CL5            RECORD FORMAT\n*                               F,V, OR U, B, T, S, A, M\nVTFLRECL DS    H              LOGICAL RECORD LENTGH\nVTFBLKSZ DS    H              BLOCK SIZE\nVTFROUND DS    C             R IF ROUND WAS SPECIFIED\nVTFPROT  DS    C              PASSWORD PROTECTION FLAG\nVTFRACF  DS    C              RACF INDICATOR FLAG               TANSKY\nVTFUPD   DS    C              UPDATE FLAG (UPDATED SINCE BACKUP) TANSKY\nVTFCATLG DS    C              CATALOG INDICATION\nVTFSECAM DS    XL2           SECONDARY AMOUNT\nVTFSECAL DS    C              SECONDARY ALLOCATION TYPE\n*                               C FOR CYL, T FOR TRKS, B FOR BLOCKS\n*                               R FOR BLOCKS WITH ROUND\nVTFDSTYP DS    C              DATA SET TYPE, USER MAY DEFINE\n*                               S = SYSTEM TEMPORARY DATA SET\n*                               T = TEST DATA SET\n*                               P = PRODUCTION DATA SET\nVTFACTON DS    CL8            REQUESTED ACTION OR COMMENT\nVTFCCHH  DS    CL8            CCHH LIMITS OF FIRST OR OTHER EXTENT ABLC\nVTFENQ   DS    C              ENQUEUE FLAG                      DHC\n         DS    C              RESERVED (ALIGNMENT)              DHC\nVTFDSNL  DS    H              LENGTH OF DSNAME\nVTFMTL   EQU   *-VTFMT        FIXED LENGTH OF THIS DSECT\nVTFDSN   DS    CL44           VARIABLE LENGTH FIELD             TANSKY\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00H\\x00\\x92\\x08O\\x01\\x10\\x13\\x8f\\x139\\x04\\x08\\x03\\x7f\\x00\\xca\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1992-03-24T00:00:00", "modifydate": "2010-05-18T13:39:48", "lines": 1032, "newlines": 895, "modlines": 202, "user": "TRIDJK"}, "text": "VTOC     TITLE 'VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO USE       ABL-UCB\n*           UCB SCAN SERVICES FOR MVS/XA AND MVS 1.3.3.         ABL-UCB\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-UC2\n*           REINITIALIZE UCB SCAN FOR EACH VOLUME IN THE LIST.  ABL-UC2\n*                                                                     *\n* 5/03/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           RETURN OUTPUTS TO THE PDS COMMAND PROCESSOR         ABL-PDS\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO HOLD ON TO     TANSKY*\n*           THE UCB DEVICE TYPE FOR LATER PRINTING, AND         TANSKY*\n*           MAKE IT PRINTABLE VIA IEFEB4UV.                     TANSKY*\n*         - ALSO MODIFIED THE DSN SORT TABLE FOR MY             TANSKY*\n*           INSTALLATIONS NAMES - IT CUT THE CPU TIME IN HALF   TANSKY*\n*           FOR DSN SORTING OF LARGE NUMBERS OF DATASETS.       TANSKY*\n*           (WHILE I WAS AT IT, I MODIFIED THE VOLSER SORT.)    TANSKY*\n*         - ALSO ADDED SORT FOR UNIT TYPE AND THE MACRO WHICH   TANSKY*\n*           I USED FOR THE CHARACTER SORT TABLES I CHANGED.     TANSKY*\n*                                                                     *\n*11/21/94 - MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0 AND TO SUPPORT 4 CHARACTER UCB  ABL-410\n*           ADDRESSES ON SYSTEMS AFTER  MVS/ESA 5.1.0.          ABL-410\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ELIMINATE   JVH-FIX\n*           THE ASSEMBLER WARNING MESSAGES WHEN USING THE       JVH-FIX\n*           HIGH LEVEL ASSEMBLER FROM IBM.                      JVH-FIX\n*\n* 14AUG01 - MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD           *DHC*\n*       TO SHOW IF DATASET IS IN USE BY TESTING FOR SYSDSN ENQ'S  *DHC*\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n* 5/18/10 - INCREASED GETMAIN SIZE TO 65536*2.                DRK MAY10\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').CALL\nVTCOPEN  EQU   1              DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCCLOSE EQU   2\nVTCREAD  EQU   0\n         MEXIT\n.CALL    ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTC&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PRMADDR\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PRMADDR   THEN STORE IT FOR THE ROUTINES\n         MEND\n*\n*  MACRO TO CREATE THE INDIVIDUAL SORT TABLES (IF CHARACTER)    TANSKY\n*\n         MACRO                                                  TANSKY\n&LABEL   SORTDC &VALUE                                          TANSKY\nA&SYSNDX DC    0C'&VALUE'                                       TANSKY\n&LABEL   DC    A(0),AL2(L'A&SYSNDX-1),CL6'&VALUE'               TANSKY\n         MEND                                                   TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTTABX TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTTAB &VTFNAME,&HEADING                              TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(L'&VTFNAME-1),CL8'&HEADING'\n         MEND                                                   TANSKY\n         SPACE 1                                                TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTKTAB TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTKTAB &VTFNAME,&TABNAME                             TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(&TABNAME.E-&TABNAME)\n         DC    A(&TABNAME),A(&TABNAME.E)\n         MEND                                                   TANSKY\n         EJECT\nVTOCCMD  ENTERX 12,(1,LENWORK,C)     DO THE HOUSEKEEPING\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*\n*        SCAN SORT PARSE LIST AND BUILD SORT FIELD TABLE\n*\n*\nSORTPAR  LA    R4,SUBSORT     SORT PARSE LIST\n         LA    R5,SORTTAB     SORT FIELD TABLE\n         XC    0(64,R5),0(R5) CLEAR SORT FIELD TABLE\n         MVC   0(4,R5),SORTTABX DEFAULT TO DSNAME\n         SPACE 1\nSORTPAR1 LA    R1,SORTTABX-12 SORT COMPARE TABLE\n         SPACE 1\nSORTPAR2 LA    R1,12(0,R1)    POINT TO NEXT COMPARE ENTRY\n         CLC   0(4,R1),=F'0'  END OF TABLE\n         BE    SORTPAR3       ITEM NOT FOUND, IGNORE\n         L     R6,0(0,R4)     POINT TO TEXT\n         LH    R3,4(0,R4)     TEXT LENGTH\n         LTR   R3,R3          IGNORE IF ZERO\n         BZ    SORTPAR3\n         BCTR  R3,0\n         EX    R3,SORTCOMP    FIELD NAME MATCH\n         BE    SORTPAR4       YES\n         B     SORTPAR2       NO, TRY NEXT\n         SPACE 1\nSORTPAR3 ICM   R4,7,9(R4)     NEXT ITEM\n         BNZ   SORTPAR1       CONTINUE IF MORE\n         B     SORTPAR5\n         SPACE 1\nSORTPAR4 MVC   0(4,R5),0(R1)  SET UP SORT FIELD\n         ICM   R4,7,9(R4)     ASCENDING/DESCENDING INDICATOR\n         BZ    PARMERR        ERROR IF MISSING\n         L     R6,0(0,R4)     INDICATOR ADDR\n         CLC   4(2,R4),=F'0'  ERROR IF MISSING\n         BE    PARMERR\n         MVC   0(1,R5),0(R6)  A/D INDICATOR\n         LA    R5,4(0,R5)\n         CLI   0(R6),C'A'     ASCENDING SORT\n         BE    SORTPAR3       YES, OK\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BNE   PARMERR        NO, ERROR\n         B     SORTPAR3       CHECK IF ANY MORE\n         SPACE 1\nSORTCOMP CLC   4(0,R1),0(R6)\n         SPACE 1\nSORTPAR5 LA    R3,SORTKTAB-12 SORT HEADER INDEX TABLE\nSORTK1   LA    R3,12(0,R3)    NEXT ENTRY\n         CLC   0(4,R3),=F'0'  END OF TABLE\n         BE    SORTK3         YES\n         CLC   SORTTAB+1(1),1(R3)  ENTRY MATCH\n         BNE   SORTK1         NO, CHECK NEXT\n         SR    R4,R4\n         LH    R5,2(0,R3)     LOAD TABLE LENGTH\n         D     R4,=F'12'      TABLE ENTRIES\n         LA    R5,1(0,R5)\n         LA    R6,VTCSORTH\n         L     R4,4(0,R3)     LOAD TABLE BEGIN ADDR\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    SORTK2         YES\n         L     R4,8(0,R3)     LOAD TABLE END ADDR\nSORTK2   MVC   0(12,R6),0(R4)\n         LA    R4,12(0,R4)\n         LA    R6,12(0,R6)\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    *+8            YES\n         S     R4,=F'24'\n         BCT   R5,SORTK2\n         B     SORTK4\nSORTK3   MVC   VTCSORTH(12),=3F'0'\nSORTK4   MVC   0(12,R6),=3F'0'\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   VOLSET         NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALV  IS THIS THE KEYWORD 'ALLV'?\n         BE    VOLSETV        NO, NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   VOLSET         NO, NOT A GLOBAL REQUEST\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n*\n**  FIND THE A(UCB)\n*\nVOLSETV  MVI   FLAG,X'82'   GLOBAL REQUEST FOR VIRTUAL\n         B     VOLSET\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-410\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         L     R1,16(,R0)          CVT                        DRK MAY10\n         L     R1,CVTUCBSC-CVT(R1) IOSSVSUCB  UCB SCAN          ABL-410\n         ST    R1,UCBPARMS+12      SAVE ADDRESS                 ABL-410\n         LA    R6,2048(,R13)       SECOND DSECT                 JVH-FIX\n         LA    R6,2048(,R6)               REGISTER              JVH-FIX\n         USING WORKAREA+4096,R6    SECOND DSECT REGISTER        JVH-FIX\n         XC    SRVUCBIC,SRVUCBIC     ZERO THE TOKEN AREA        ABL-410\n         SPACE 1                                                ABL-UCB\n**                                                              ABL-410\nINCR1    LA    R6,2048(,R13)       SECOND DSECT                 JVH-FIX\n         LA    R6,2048(,R6)               REGISTER              JVH-FIX\n         L     R15,16(,R0)                  CVT               DRK MAY10\n         TM    CVTDCB-CVT(R15),CVTOSEXT     X'074' EXTENSION?   ABL-410\n         BNO   ISPDEVTA                     NO, BRANCH          ABL-410\n         TM    CVTOSLV0-CVT(R15),X'08'      X'4F0' HBB4410 UCB? ABL-410\n         BO    ISPDEVTB                     YES, BRANCH         ABL-410\n*                                                               ABL-410\n* SYSTEM DOES NOT HAVE UCB SCAN SERVICES (BEFORE MVS ESA 4.1.0) ABL-410\nISPDEVTA DS    0H                                               ABL-410\nISPDEVTL DS    0H                       *                       ABL-410\n         LA    R1,UCBPARMS                                      ABL-410\n         L     R15,UCBPARMS+12     ROUTINE ADDRESS              ABL-410\n         BALR  R14,R15                                          ABL-410\n         LTR   R15,R15                                          ABL-410\n         BNZ   ISPDEVTE            DONE                         ABL-410\n         L     R1,UCBANSR                                       ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTL            NO, SKIP IT                  ABL-410\nISPDEVT4 DS    0H                       *                       ABL-410\n         SR    R15,R15                  RC0                     ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTE LA    R15,4                    VOLUME NOT FOUND        ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\n         DROP  R1                                               ABL-410\n*                                                               ABL-410\n* SYSTEM IS AT LEAST MVS ESA 4.1.0 OR HIGHER -- HAS UCB SCAN    ABL-410\nISPDEVTB DS    0H                       *                       ABL-410\nISPDEVTF DS    0H                       *                       ABL-410\n         L     R15,16(,R0)                  CVT               DRK MAY10\n         TM    CVTOSLV1-CVT(R15),X'20'  X'4F1' JBB5510 4 DIGIT? ABL-410\n         BO    ISPDEVTK                                         ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,              ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTK DS    0H                       *                       ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,RANGE=ALL,    ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTG DS    0H                       *                       ABL-410\n         LA    R1,SRVUCBUC              UCB ADDRESS             ABL-410\n         ST    R1,UCBANSR               SET                     ABL-410\n         SR    R15,R15                  SET RETURN CODE         ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTF   W?       NO, SKIP IT                  ABL-410\n         DROP  R1                                               ABL-410\nISPDEVTN DS    0H                       *                       ABL-410\n*                                                               ABL-410\nSPACVO99 L     R6,UCBANSR               R6 HAS THE UCB ADDRESS  ABL-410\n         DROP  R6                                               ABL-410\n         LTR   R15,R15                  FOUND THE UCB?          ABL-410\n         BNZ   NOTMNT                   NO, BRANCH              ABL-410\n*                                                               ABL-410\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         CLC   VOLSER,28(R6)   COMPARE FULL VOLSER\n         BE    FNDUCB   FOUND IT\n         B     INCR1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n         B     INCR1                                            ABL-UCB\nISPDEVTH DC    H'128'                                           ABL-410\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\nNOTMNT   TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   INCR1         IN EITHER CASE, SKIP THE MESSAGE\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    3(R6),X'80'   ONLINE BIT\n         BZ    INCR1   NOPE\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    6(R6),X'40'   TEST READY BIT\n         BO    INCR1   NOT READY\n         TM    FLAG,X'80'   GLOBAL REQUEST FOR VIRTUAL\n         BO    CHKVIRT\n         TM    FLAG,X'02'   GLOBAL REQUEST\n         BZ    FNDUCB\n         TM    17(R6),X'08'  VIRTUAL UCB\n         BO    INCR1   YES\n         B     FNDUCB\nCHKVIRT  TM    17(R6),X'08'  VIRTUAL UCB\n         BZ    INCR1   NO\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6)   MOVE VOLID\n         MVC   ADDR,13(R6)   MOVE UNIT ADDRESS\n*                                                               ABL-410\n         MVI   ADDR+3,C' '   BLANK LAST CHARACTER               ABL-410\n         ST    R6,DOUBLE     SAVE UCB ADDRESS                   ABL-410\n         CLI   ADDR,C'U'     U OF UCB?                          ABL-410\n         BNE   FNDUCB2       NO, BRANCH                         ABL-410\n         UCBDEVN UCBPTR=DOUBLE,DEVN=ADDR                        ABL-410\nFNDUCB2  DS    0H                                               ABL-410\n*                                                               ABL-410\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n*  FIND PRINTABLE DEVICE TYPE VIA IEFEB4UV                      TANSKY\n         MVC   CNVTUTAB,BLANKS                                  TANSKY\n         MVC   CNVTUTAB+8(4),16(R6)  UCB UNIT TYPE              TANSKY\n         LA    R7,CNVTUTAB                                      TANSKY\n         LINK  EP=IEFEB4UV,PARAM=((7),CNVTUFLG),MF=(E,VLINK),   TANSKY X\n               ERRET=PRUNIT2       IGNORE ERRORS                TANSKY\nPRUNIT2  DS    0H                                               TANSKY\n         MVC   UCBDEVT,CNVTUTAB    MOVE UNIT NAME               TANSKY\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n         TM    3(R6),X'40'   PENDING BIT - SHOULD BE OFF\n         BO    PENDING\n         TM    3(R6),X'80'   ONLINE BIT - SHOULD BE ON\n         BZ    OFFLINE\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n         VTOCEXCP OPEN        OPEN THE VTOC\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   RETURN         NO, JUST EXIT\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        FORMAT THE DSCB INFORMATION\n*\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    ENDVTOC        YES, CLOSE THE VTOC               ABL-PDS\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOSE FIRST CLOSE THE VTOC\n*\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    PHASE2         YES, TERMINATE                    ABL-PDS\n*\nENDVOL   TM    FLAG,X'03'         IS THIS A GENERIC VOLUME SEARCH\n         BNZ   INCR1              YES, SEARCH FOR MORE\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         B     EXIT0\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXEUNT\n*\nPARMERR  LA    R15,16\n         B     RETURN\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         MVI   VTCEPRNT,15    TELL PRINT TO CLEAN UP HIS ACT\n*                                CLOSE DATA SETS AND FREE MAIN STORAGE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         LEAVE EQ\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         WORKADDR VTCG,VTCGETMN   WORK AREA FOR VTOCTABLE       JVH-MAX\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n************************************************************    ABL-PDS\n*                                                          *    ABL-PDS\n*        PROCESS 'PDSCALL' KEYWORD                         *    ABL-PDS\n*                                                          *    ABL-PDS\n************************************************************    ABL-PDS\n         SPACE 1                                                ABL-PDS\n         L     R15,ADDRCBUF          GET ADDRESS OF CBUF        ABL-PDS\n         LH    R14,0(,R15)           GET THE LENGTH             ABL-PDS\n         LA    R15,0(R14,R15)        POINT TO PDSCALL, MAYBE    ABL-PDS\n         CLC   2(7,R15),=C'PDSCALL'  DID PDS CALL US?           ABL-PDS\n         BNE   NOPDSCAL              NO                         ABL-PDS\n         MVC   PDSCALL,10(R15)       MOVE THE ADDRESS           ABL-PDS\nNOPDSCAL EQU   *                                                ABL-PDS\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         LTORG\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCNVTUFLG DC    X'2100'             IEFEB4UV FLAGS               TANSKY\nCHARALL  DC    CL3'ALL'\nCHARALV  DC    CL3'ALV'\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),28(R6)\n         EJECT\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTTABX SORTTAB VTFDSN,DSNAME                                  TANSKY\n         SORTTAB VTFVOLUM,VOLUME                                TANSKY\n         POP   PRINT                                            TANSKY\n         SORTTAB VTFALLOC,ALLOC                                 TANSKY\n         SORTTAB VTFUSED,USED                                   TANSKY\n         SORTTAB VTFUNUSD,UNUSED                                TANSKY\n         SORTTAB VTFPCT,PCT                                     TANSKY\n         SORTTAB VTFNOEPV,EX                                    TANSKY\n         SORTTAB VTFDSORG,DSO                                   TANSKY\n         SORTTAB VTFRECFM,RFM                                   TANSKY\n         SORTTAB VTFLRECL,LRECL                                 TANSKY\n         SORTTAB VTFBLKSZ,BLKSZ                                 TANSKY\n         SORTTAB VTFCREDT,CDATE                                 TANSKY\n         SORTTAB VTFEXPDT,EXPDT                                 TANSKY\n         SORTTAB VTFLSTAC,REFDT                                 TANSKY\n         SORTTAB VTFUNIT,UNIT                                   TANSKY\n         DC    F'0'\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE\nMSGPARSE MSGZ  ' PARSE ERROR CODE '\nMSGCMDER MSGZ  ' COMMAND SYSTEM ERROR'\nMSGNOTMT MSGZ  ' VVVVVV VOLUME IS NOT MOUNTED'\nMSGOFFLN MSGZ  ' VVVVVV VOLUME IS OFFLINE'\nMSGPEND  MSGZ  ' VVVVVV VOLUME IS PENDING OFFLINE'\n*\n*\n         EJECT\n         DS    0F\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTKTAB SORTKTAB VTFDSN,DSNSORT                                TANSKY\n         SORTKTAB VTFVOLUM,VOLSORT                              TANSKY\n         POP   PRINT                                            TANSKY\n         SORTKTAB VTFUSED,USESORT                               TANSKY\n         SORTKTAB VTFALLOC,ALCSORT                              TANSKY\n         SORTKTAB VTFUNUSD,UNUSORT                              TANSKY\n         SORTKTAB VTFPCT,PCTSORT                                TANSKY\n         SORTKTAB VTFNOEPV,EXTSORT                              TANSKY\n         SORTKTAB VTFDSORG,DSOSORT                              TANSKY\n         SORTKTAB VTFRECFM,RFMSORT                              TANSKY\n         SORTKTAB VTFLRECL,LRCSORT                              TANSKY\n         SORTKTAB VTFBLKSZ,BLKSORT                              TANSKY\n         SORTKTAB VTFCREDT,CDTSORT                              TANSKY\n         SORTKTAB VTFLSTAC,RDTSORT                              TANSKY\n         SORTKTAB VTFEXPDT,EDTSORT                              TANSKY\n         SORTKTAB VTFUNIT,UNTSORT                               TANSKY\n         DC    2F'0'\n         SPACE 3\nUNTSORT  SORTDC 3390                                            TANSKY\n         SORTDC 3380                                            TANSKY\n         SORTDC 3370                                            TANSKY\n         SORTDC 3350                                            TANSKY\n         SORTDC 3340                                            TANSKY\n         SORTDC 3330                                            TANSKY\n         SORTDC 2                                               TANSKY\nUNTSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN\nDSNSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC WW                                              TANSKY\n         PRINT NOGEN                                            TANSKY\n         SORTDC WG                                              TANSKY\n         SORTDC WCS                                             TANSKY\n         SORTDC WCA                                             TANSKY\n         SORTDC WA                                              TANSKY\n         SORTDC VT                                              TANSKY\n         SORTDC VSAMP                                           TANSKY\n         SORTDC VSAMA                                           TANSKY\n         SORTDC VGCR                                            TANSKY\n         SORTDC VGCJ                                            TANSKY\n         SORTDC VGCC                                            TANSKY\n         SORTDC VGCA                                            TANSKY\n         SORTDC VA                                              TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC SYS                                             TANSKY\n         SORTDC SYNC                                            TANSKY\n         SORTDC SRS                                             TANSKY\n         SORTDC SIS                                             TANSKY\n         SORTDC SH                                              TANSKY\n         SORTDC SD                                              TANSKY\n         SORTDC SCS                                             TANSKY\n         SORTDC SCA                                             TANSKY\n         SORTDC SA                                              TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC PMS                                             TANSKY\n         SORTDC PHL                                             TANSKY\n         SORTDC PD                                              TANSKY\n         SORTDC PA                                              TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC NX                                              TANSKY\n         SORTDC NO                                              TANSKY\n         SORTDC NI                                              TANSKY\n         SORTDC NA                                              TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC IS                                              TANSKY\n         SORTDC IPO                                             TANSKY\n         SORTDC IM                                              TANSKY\n         SORTDC IC                                              TANSKY\n         SORTDC IAS                                             TANSKY\n         SORTDC HSM                                             TANSKY\n         SORTDC GO                                              TANSKY\n         SORTDC GIM                                             TANSKY\n         SORTDC FT                                              TANSKY\n         SORTDC FOC                                             TANSKY\n         SORTDC E2                                              TANSKY\n         SORTDC ED                                              TANSKY\n         SORTDC D9                                              TANSKY\n         SORTDC D2                                              TANSKY\n         SORTDC DSN                                             TANSKY\n         SORTDC DOL                                             TANSKY\n         SORTDC DFH                                             TANSKY\n         SORTDC DA                                              TANSKY\n         SORTDC CS                                              TANSKY\n         SORTDC CR                                              TANSKY\n         SORTDC CP                                              TANSKY\n         SORTDC CCV                                             TANSKY\n         SORTDC CCF                                             TANSKY\n         SORTDC CCD                                             TANSKY\n         SORTDC CATCO                                           TANSKY\n         SORTDC CAI                                             TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC AT                                              TANSKY\n         SORTDC ALCO                                            TANSKY\n         SORTDC AGS                                             TANSKY\n         SORTDC AF                                              TANSKY\n         SORTDC AD                                              TANSKY\n         SORTDC AC                                              TANSKY\n         SORTDC AB                                              TANSKY\nDSNSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3                                                TANSKY\nVOLSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC W                                               TANSKY\n         SORTDC V                                               TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC S                                               TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC Q                                               TANSKY\n         SORTDC P                                               TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC N                                               TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC I                                               TANSKY\n         SORTDC H                                               TANSKY\n         SORTDC G                                               TANSKY\n         SORTDC F                                               TANSKY\n         SORTDC E                                               TANSKY\n         SORTDC D                                               TANSKY\n         SORTDC C                                               TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC A                                               TANSKY\nVOLSORTE DC    A(0),AL2(0),CL6' '\n         POP   PRINT\n         SPACE 3\nUSESORT  DS    0F\nUNUSORT  DS    0F\nALCSORT  DC    A(0),AL2(3),XL4'0000F000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000C000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000A000',XL2'00'\n         DC    A(0),AL2(3),XL4'00008000',XL2'00'\n         DC    A(0),AL2(3),XL4'00006000',XL2'00'\n         DC    A(0),AL2(3),XL4'00005000',XL2'00'\n         DC    A(0),AL2(3),XL4'00004000',XL2'00'\n         DC    A(0),AL2(3),XL4'00003000',XL2'00'\n         DC    A(0),AL2(3),XL4'00002000',XL2'00'\n         DC    A(0),AL2(3),XL4'00001000',XL2'00'\n         DC    A(0),AL2(3),XL4'00000C00',XL2'00'\n         DC    A(0),AL2(3),XL4'00000800',XL2'00'\n         DC    A(0),AL2(3),XL4'00000400',XL2'00'\n         DC    A(0),AL2(3),XL4'00000300',XL2'00'\n         DC    A(0),AL2(3),XL4'00000200',XL2'00'\n         DC    A(0),AL2(3),XL4'00000100',XL2'00'\n         DC    A(0),AL2(3),XL4'000000C0',XL2'00'\n         DC    A(0),AL2(3),XL4'00000080',XL2'00'\n         DC    A(0),AL2(3),XL4'00000040',XL2'00'\n         DC    A(0),AL2(3),XL4'00000010',XL2'00'\nUSESORTE DS    0F\nUNUSORTE DS    0F\nALCSORTE DC    A(0),AL2(3),XL6'00'\n         SPACE 3\nPCTSORT  DC    A(0),AL2(1),XL2'0064',XL4'00'\n         DC    A(0),AL2(1),XL2'005A',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0046',XL4'00'\n         DC    A(0),AL2(1),XL2'003C',XL4'00'\n         DC    A(0),AL2(1),XL2'0032',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\n         DC    A(0),AL2(1),XL2'001E',XL4'00'\n         DC    A(0),AL2(1),XL2'0014',XL4'00'\n         DC    A(0),AL2(1),XL2'000A',XL4'00'\nPCTSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nEXTSORT  DC    A(0),AL2(0),CL6'0'\nEXTSORTE DC    A(0),AL2(0),CL6'0'\n         SPACE 3\nDSOSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(1),CL6'PS'\n         DC    A(0),AL2(1),CL6'PO'\n         DC    A(0),AL2(1),CL6'DA'\nDSOSORTE DC    A(0),AL2(1),CL6' '\n         SPACE 3\nRFMSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(2),CL6'VBS'\n         DC    A(0),AL2(1),CL6'VB'\n         DC    A(0),AL2(0),CL6'V'\n         DC    A(0),AL2(0),CL6'U'\n         DC    A(0),AL2(1),CL6'FS'\n         DC    A(0),AL2(2),CL6'FBS'\n         DC    A(0),AL2(1),CL6'FB'\n         DC    A(0),AL2(0),CL6'F'\nRFMSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nLRCSORT  DS    0F\nBLKSORT  DC    A(0),AL2(1),XL2'4650',XL4'00'\n         DC    A(0),AL2(1),XL2'3A98',XL4'00'\n         DC    A(0),AL2(1),XL2'2EE0',XL4'00'\n         DC    A(0),AL2(1),XL2'2328',XL4'00'\n         DC    A(0),AL2(1),XL2'1770',XL4'00'\n         DC    A(0),AL2(1),XL2'0BB8',XL4'00'\n         DC    A(0),AL2(1),XL2'07D0',XL4'00'\n         DC    A(0),AL2(1),XL2'0640',XL4'00'\n         DC    A(0),AL2(1),XL2'04B0',XL4'00'\n         DC    A(0),AL2(1),XL2'0320',XL4'00'\n         DC    A(0),AL2(1),XL2'0258',XL4'00'\n         DC    A(0),AL2(1),XL2'0190',XL4'00'\n         DC    A(0),AL2(1),XL2'00C8',XL4'00'\n         DC    A(0),AL2(1),XL2'00A0',XL4'00'\n         DC    A(0),AL2(1),XL2'0078',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\nBLKSORTE DS    0F\nLRCSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nCDTSORT  DS    0F\nEDTSORT  DS    0F\nRDTSORT  DC    A(0),AL2(2),AL1(99),AL2(0),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(000),XL3'00'\nEDTSORTE DS    0F\nRDTSORTE DS    0F\nCDTSORTE DC    A(0),AL2(2),XL6'00'\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTOCPARS\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n         SPACE 3                                                TANSKY\nVLINK    LINK  EP=IEFEB4UV,SF=L,                                TANSKY X\n               ERRET=PRUNIT2       IGNORE ERRORS                TANSKY\n         DS    0F                  PUT CNVTUTAB ON A FULLWORD   TANSKY\nCNVTUTAB DS    CL20                TABLE FOR IEFEB4UV           TANSKY\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT GEN\n         VTOCOM  NODSECT\n         PRINT NOGEN\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    XL256\nWORKFORM DS    5XL256                                            *DHC*\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\nWORKVTCG DS    300A                                             WSX-MAX\n*ORKVTCG DS    150A                                             JVH-MAX\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n         PRINT NOGEN\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         END   VTOCCMD                                          ABL-UCB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC$": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00Q\\x00\\x92\\x08O\\x01\\x01$\\x1f\\x08\\t\\x04\\n\\x03\\x7f\\x00\\xcb\\xd3\\xf0\\xf0\\xf3\\xe2\\xe6\\xe2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1992-03-24T00:00:00", "modifydate": "2001-08-29T08:09:51", "lines": 1034, "newlines": 895, "modlines": 203, "user": "L003SWS"}, "text": "VTOC     TITLE 'VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO USE       ABL-UCB\n*           UCB SCAN SERVICES FOR MVS/XA AND MVS 1.3.3.         ABL-UCB\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-UC2\n*           REINITIALIZE UCB SCAN FOR EACH VOLUME IN THE LIST.  ABL-UC2\n*                                                                     *\n* 5/03/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           RETURN OUTPUTS TO THE PDS COMMAND PROCESSOR         ABL-PDS\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO HOLD ON TO     TANSKY*\n*           THE UCB DEVICE TYPE FOR LATER PRINTING, AND         TANSKY*\n*           MAKE IT PRINTABLE VIA IEFEB4UV.                     TANSKY*\n*         - ALSO MODIFIED THE DSN SORT TABLE FOR MY             TANSKY*\n*           INSTALLATIONS NAMES - IT CUT THE CPU TIME IN HALF   TANSKY*\n*           FOR DSN SORTING OF LARGE NUMBERS OF DATASETS.       TANSKY*\n*           (WHILE I WAS AT IT, I MODIFIED THE VOLSER SORT.)    TANSKY*\n*         - ALSO ADDED SORT FOR UNIT TYPE AND THE MACRO WHICH   TANSKY*\n*           I USED FOR THE CHARACTER SORT TABLES I CHANGED.     TANSKY*\n*                                                                     *\n*11/21/94 - MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0 AND TO SUPPORT 4 CHARACTER UCB  ABL-410\n*           ADDRESSES ON SYSTEMS AFTER  MVS/ESA 5.1.0.          ABL-410\n*                                                                     *\n*05/12/99 - MODIFIED BY DAVID N. SPIEGEL AT IBM CANADA LTD.     DNS\n*           TO USE THE EDTINFO MACRO INSTEAD OF THE IEFEB4UV    DNS\n*           SERVICE.  THIS MACRO SUPPORTS DYNAMIC UBCS, UCBS    DNS\n*           \"ABOVE THE LINE\" AND DYAMICALLY ACTIVATED UCBS.     DNS\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ELIMINATE   JVH-FIX\n*           THE ASSEMBLER WARNING MESSAGES WHEN USING THE       JVH-FIX\n*           HIGH LEVEL ASSEMBLER FROM IBM.                      JVH-FIX\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').CALL\nVTCOPEN  EQU   1              DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCCLOSE EQU   2\nVTCREAD  EQU   0\n         MEXIT\n.CALL    ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTC&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PRMADDR\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PRMADDR   THEN STORE IT FOR THE ROUTINES\n         MEND\n*\n*  MACRO TO CREATE THE INDIVIDUAL SORT TABLES (IF CHARACTER)    TANSKY\n*\n         MACRO                                                  TANSKY\n&LABEL   SORTDC &VALUE                                          TANSKY\nA&SYSNDX DC    0C'&VALUE'                                       TANSKY\n&LABEL   DC    A(0),AL2(L'A&SYSNDX-1),CL6'&VALUE'               TANSKY\n         MEND                                                   TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTTABX TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTTAB &VTFNAME,&HEADING                              TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(L'&VTFNAME-1),CL8'&HEADING'\n         MEND                                                   TANSKY\n         SPACE 1                                                TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTKTAB TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTKTAB &VTFNAME,&TABNAME                             TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(&TABNAME.E-&TABNAME)\n         DC    A(&TABNAME),A(&TABNAME.E)\n         MEND                                                   TANSKY\n         EJECT\nVTOCCMD  ENTERX 12,(1,LENWORK,C)     DO THE HOUSEKEEPING\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*\n*        SCAN SORT PARSE LIST AND BUILD SORT FIELD TABLE\n*\n*\nSORTPAR  LA    R4,SUBSORT     SORT PARSE LIST\n         LA    R5,SORTTAB     SORT FIELD TABLE\n         XC    0(64,R5),0(R5) CLEAR SORT FIELD TABLE\n         MVC   0(4,R5),SORTTABX DEFAULT TO DSNAME\n         SPACE 1\nSORTPAR1 LA    R1,SORTTABX-12 SORT COMPARE TABLE\n         SPACE 1\nSORTPAR2 LA    R1,12(0,R1)    POINT TO NEXT COMPARE ENTRY\n         CLC   0(4,R1),=F'0'  END OF TABLE\n         BE    SORTPAR3       ITEM NOT FOUND, IGNORE\n         L     R6,0(0,R4)     POINT TO TEXT\n         LH    R3,4(0,R4)     TEXT LENGTH\n         LTR   R3,R3          IGNORE IF ZERO\n         BZ    SORTPAR3\n         BCTR  R3,0\n         EX    R3,SORTCOMP    FIELD NAME MATCH\n         BE    SORTPAR4       YES\n         B     SORTPAR2       NO, TRY NEXT\n         SPACE 1\nSORTPAR3 ICM   R4,7,9(R4)     NEXT ITEM\n         BNZ   SORTPAR1       CONTINUE IF MORE\n         B     SORTPAR5\n         SPACE 1\nSORTPAR4 MVC   0(4,R5),0(R1)  SET UP SORT FIELD\n         ICM   R4,7,9(R4)     ASCENDING/DESCENDING INDICATOR\n         BZ    PARMERR        ERROR IF MISSING\n         L     R6,0(0,R4)     INDICATOR ADDR\n         CLC   4(2,R4),=F'0'  ERROR IF MISSING\n         BE    PARMERR\n         MVC   0(1,R5),0(R6)  A/D INDICATOR\n         LA    R5,4(0,R5)\n         CLI   0(R6),C'A'     ASCENDING SORT\n         BE    SORTPAR3       YES, OK\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BNE   PARMERR        NO, ERROR\n         B     SORTPAR3       CHECK IF ANY MORE\n         SPACE 1\nSORTCOMP CLC   4(0,R1),0(R6)\n         SPACE 1\nSORTPAR5 LA    R3,SORTKTAB-12 SORT HEADER INDEX TABLE\nSORTK1   LA    R3,12(0,R3)    NEXT ENTRY\n         CLC   0(4,R3),=F'0'  END OF TABLE\n         BE    SORTK3         YES\n         CLC   SORTTAB+1(1),1(R3)  ENTRY MATCH\n         BNE   SORTK1         NO, CHECK NEXT\n         SR    R4,R4\n         LH    R5,2(0,R3)     LOAD TABLE LENGTH\n         D     R4,=F'12'      TABLE ENTRIES\n         LA    R5,1(0,R5)\n         LA    R6,VTCSORTH\n         L     R4,4(0,R3)     LOAD TABLE BEGIN ADDR\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    SORTK2         YES\n         L     R4,8(0,R3)     LOAD TABLE END ADDR\nSORTK2   MVC   0(12,R6),0(R4)\n         LA    R4,12(0,R4)\n         LA    R6,12(0,R6)\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    *+8            YES\n         S     R4,=F'24'\n         BCT   R5,SORTK2\n         B     SORTK4\nSORTK3   MVC   VTCSORTH(12),=3F'0'\nSORTK4   MVC   0(12,R6),=3F'0'\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   VOLSET         NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALV  IS THIS THE KEYWORD 'ALLV'?\n         BE    VOLSETV        NO, NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   VOLSET         NO, NOT A GLOBAL REQUEST\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n*\n**  FIND THE A(UCB)\n*\nVOLSETV  MVI   FLAG,X'82'   GLOBAL REQUEST FOR VIRTUAL\n         B     VOLSET\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-410\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         L     R1,16               CVT                          ABL-410\n         L     R1,CVTUCBSC-CVT(R1) IOSSVSUCB  UCB SCAN          ABL-410\n         ST    R1,UCBPARMS+12      SAVE ADDRESS                 ABL-410\n         LA    R6,2048(,R13)       SECOND DSECT                 JVH-FIX\n         LA    R6,2048(,R6)               REGISTER              JVH-FIX\n         USING WORKAREA+4096,R6    SECOND DSECT REGISTER        JVH-FIX\n         XC    SRVUCBIC,SRVUCBIC     ZERO THE TOKEN AREA        ABL-410\n         SPACE 1                                                ABL-UCB\n**                                                              ABL-410\nINCR1    LA    R6,2048(,R13)       SECOND DSECT                 JVH-FIX\n         LA    R6,2048(,R6)               REGISTER              JVH-FIX\n         L     R15,16                       CVT                 ABL-410\n         TM    CVTDCB-CVT(R15),CVTOSEXT     X'074' EXTENSION?   ABL-410\n         BNO   ISPDEVTA                     NO, BRANCH          ABL-410\n         TM    CVTOSLV0-CVT(R15),X'08'      X'4F0' HBB4410 UCB? ABL-410\n         BO    ISPDEVTB                     YES, BRANCH         ABL-410\n*                                                               ABL-410\n* SYSTEM DOES NOT HAVE UCB SCAN SERVICES (BEFORE MVS ESA 4.1.0) ABL-410\nISPDEVTA DS    0H                                               ABL-410\nISPDEVTL DS    0H                       *                       ABL-410\n         LA    R1,UCBPARMS                                      ABL-410\n         L     R15,UCBPARMS+12     ROUTINE ADDRESS              ABL-410\n         BALR  R14,R15                                          ABL-410\n         LTR   R15,R15                                          ABL-410\n         BNZ   ISPDEVTE            DONE                         ABL-410\n         L     R1,UCBANSR                                       ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTL            NO, SKIP IT                  ABL-410\nISPDEVT4 DS    0H                       *                       ABL-410\n         SR    R15,R15                  RC0                     ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTE LA    R15,4                    VOLUME NOT FOUND        ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\n         DROP  R1                                               ABL-410\n*                                                               ABL-410\n* SYSTEM IS AT LEAST MVS ESA 4.1.0 OR HIGHER -- HAS UCB SCAN    ABL-410\nISPDEVTB DS    0H                       *                       ABL-410\nISPDEVTF DS    0H                       *                       ABL-410\n         L     R15,16                       CVT                 ABL-410\n         TM    CVTOSLV1-CVT(R15),X'20'  X'4F1' JBB5510 4 DIGIT? ABL-410\n         BO    ISPDEVTK                                         ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,              ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTK DS    0H                       *                       ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,RANGE=ALL,    ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTG DS    0H                       *                       ABL-410\n         LA    R1,SRVUCBUC              UCB ADDRESS             ABL-410\n         ST    R1,UCBANSR               SET                     ABL-410\n         SR    R15,R15                  SET RETURN CODE         ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTF   W?       NO, SKIP IT                  ABL-410\n         DROP  R1                                               ABL-410\nISPDEVTN DS    0H                       *                       ABL-410\n*                                                               ABL-410\nSPACVO99 L     R6,UCBANSR               R6 HAS THE UCB ADDRESS  ABL-410\n         DROP  R6                                               ABL-410\n         LTR   R15,R15                  FOUND THE UCB?          ABL-410\n         BNZ   NOTMNT                   NO, BRANCH              ABL-410\n*                                                               ABL-410\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         CLC   VOLSER,28(R6)   COMPARE FULL VOLSER\n         BE    FNDUCB   FOUND IT\n         B     INCR1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n         B     INCR1                                            ABL-UCB\nISPDEVTH DC    H'128'                                           ABL-410\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\nNOTMNT   TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   INCR1         IN EITHER CASE, SKIP THE MESSAGE\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    3(R6),X'80'   ONLINE BIT\n         BZ    INCR1   NOPE\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    6(R6),X'40'   TEST READY BIT\n         BO    INCR1   NOT READY\n         TM    FLAG,X'80'   GLOBAL REQUEST FOR VIRTUAL\n         BO    CHKVIRT\n         TM    FLAG,X'02'   GLOBAL REQUEST\n         BZ    FNDUCB\n         TM    17(R6),X'08'  VIRTUAL UCB\n         BO    INCR1   YES\n         B     FNDUCB\nCHKVIRT  TM    17(R6),X'08'  VIRTUAL UCB\n         BZ    INCR1   NO\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6)   MOVE VOLID\n         MVC   ADDR,13(R6)   MOVE UNIT ADDRESS\n*                                                               ABL-410\n         MVI   ADDR+3,C' '   BLANK LAST CHARACTER               ABL-410\n         ST    R6,DOUBLE     SAVE UCB ADDRESS                   ABL-410\n         CLI   ADDR,C'U'     U OF UCB?                          ABL-410\n         BNE   FNDUCB2       NO, BRANCH                         ABL-410\n         UCBDEVN UCBPTR=DOUBLE,DEVN=ADDR                        ABL-410\nFNDUCB2  DS    0H                                               ABL-410\n*                                                               ABL-410\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n*  FIND PRINTABLE DEVICE TYPE VIA IEFEB4UV                      TANSKY\n         MVC   CNVTUTAB,BLANKS                                  TANSKY\n         MVC   CNVTUTAB+8(4),16(R6)  UCB UNIT TYPE              TANSKY\n         LA    R7,CNVTUTAB                                      TANSKY\n*        LINK  EP=IEFEB4UV,PARAM=((7),CNVTUFLG),MF=(E,VLINK),   DNS\n*              ERRET=PRUNIT2       IGNORE ERRORS                DNS\n         EDTINFO RTNUNIT,DEVTYPE=CNVTUTAB+8,OUTUNIT=CNVTUTAB,   DNS    X\n               MF=(E,EDTWORK)\nPRUNIT2  DS    0H                                               TANSKY\n         MVC   UCBDEVT,CNVTUTAB    MOVE UNIT NAME               TANSKY\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n         TM    3(R6),X'40'   PENDING BIT - SHOULD BE OFF\n         BO    PENDING\n         TM    3(R6),X'80'   ONLINE BIT - SHOULD BE ON\n         BZ    OFFLINE\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n         VTOCEXCP OPEN        OPEN THE VTOC\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   RETURN         NO, JUST EXIT\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        FORMAT THE DSCB INFORMATION\n*\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    ENDVTOC        YES, CLOSE THE VTOC               ABL-PDS\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOSE FIRST CLOSE THE VTOC\n*\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    PHASE2         YES, TERMINATE                    ABL-PDS\n*\nENDVOL   TM    FLAG,X'03'         IS THIS A GENERIC VOLUME SEARCH\n         BNZ   INCR1              YES, SEARCH FOR MORE\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         B     EXIT0\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXEUNT\n*\nPARMERR  LA    R15,16\n         B     RETURN\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         MVI   VTCEPRNT,15    TELL PRINT TO CLEAN UP HIS ACT\n*                                CLOSE DATA SETS AND FREE MAIN STORAGE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         LEAVE EQ\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         WORKADDR VTCG,VTCGETMN   WORK AREA FOR VTOCTABLE       JVH-MAX\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n************************************************************    ABL-PDS\n*                                                          *    ABL-PDS\n*        PROCESS 'PDSCALL' KEYWORD                         *    ABL-PDS\n*                                                          *    ABL-PDS\n************************************************************    ABL-PDS\n         SPACE 1                                                ABL-PDS\n         L     R15,ADDRCBUF          GET ADDRESS OF CBUF        ABL-PDS\n         LH    R14,0(,R15)           GET THE LENGTH             ABL-PDS\n         LA    R15,0(R14,R15)        POINT TO PDSCALL, MAYBE    ABL-PDS\n         CLC   2(7,R15),=C'PDSCALL'  DID PDS CALL US?           ABL-PDS\n         BNE   NOPDSCAL              NO                         ABL-PDS\n         MVC   PDSCALL,10(R15)       MOVE THE ADDRESS           ABL-PDS\nNOPDSCAL EQU   *                                                ABL-PDS\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         LTORG\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCNVTUFLG DC    X'2100'             IEFEB4UV FLAGS               TANSKY\nCHARALL  DC    CL3'ALL'\nCHARALV  DC    CL3'ALV'\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),28(R6)\n         EJECT\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTTABX SORTTAB VTFDSN,DSNAME                                  TANSKY\n         SORTTAB VTFVOLUM,VOLUME                                TANSKY\n         POP   PRINT                                            TANSKY\n         SORTTAB VTFALLOC,ALLOC                                 TANSKY\n         SORTTAB VTFUSED,USED                                   TANSKY\n         SORTTAB VTFUNUSD,UNUSED                                TANSKY\n         SORTTAB VTFPCT,PCT                                     TANSKY\n         SORTTAB VTFNOEPV,EX                                    TANSKY\n         SORTTAB VTFDSORG,DSO                                   TANSKY\n         SORTTAB VTFRECFM,RFM                                   TANSKY\n         SORTTAB VTFLRECL,LRECL                                 TANSKY\n         SORTTAB VTFBLKSZ,BLKSZ                                 TANSKY\n         SORTTAB VTFCREDT,CDATE                                 TANSKY\n         SORTTAB VTFEXPDT,EXPDT                                 TANSKY\n         SORTTAB VTFLSTAC,REFDT                                 TANSKY\n         SORTTAB VTFUNIT,UNIT                                   TANSKY\n         DC    F'0'\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE\nMSGPARSE MSGZ  ' PARSE ERROR CODE '\nMSGCMDER MSGZ  ' COMMAND SYSTEM ERROR'\nMSGNOTMT MSGZ  ' VVVVVV VOLUME IS NOT MOUNTED'\nMSGOFFLN MSGZ  ' VVVVVV VOLUME IS OFFLINE'\nMSGPEND  MSGZ  ' VVVVVV VOLUME IS PENDING OFFLINE'\n*\n*\n         EJECT\n         DS    0F\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTKTAB SORTKTAB VTFDSN,DSNSORT                                TANSKY\n         SORTKTAB VTFVOLUM,VOLSORT                              TANSKY\n         POP   PRINT                                            TANSKY\n         SORTKTAB VTFUSED,USESORT                               TANSKY\n         SORTKTAB VTFALLOC,ALCSORT                              TANSKY\n         SORTKTAB VTFUNUSD,UNUSORT                              TANSKY\n         SORTKTAB VTFPCT,PCTSORT                                TANSKY\n         SORTKTAB VTFNOEPV,EXTSORT                              TANSKY\n         SORTKTAB VTFDSORG,DSOSORT                              TANSKY\n         SORTKTAB VTFRECFM,RFMSORT                              TANSKY\n         SORTKTAB VTFLRECL,LRCSORT                              TANSKY\n         SORTKTAB VTFBLKSZ,BLKSORT                              TANSKY\n         SORTKTAB VTFCREDT,CDTSORT                              TANSKY\n         SORTKTAB VTFLSTAC,RDTSORT                              TANSKY\n         SORTKTAB VTFEXPDT,EDTSORT                              TANSKY\n         SORTKTAB VTFUNIT,UNTSORT                               TANSKY\n         DC    2F'0'\n         SPACE 3\nUNTSORT  SORTDC 3390                                            TANSKY\n         SORTDC 3380                                            TANSKY\n         SORTDC 3370                                            TANSKY\n         SORTDC 3350                                            TANSKY\n         SORTDC 3340                                            TANSKY\n         SORTDC 3330                                            TANSKY\n         SORTDC 2                                               TANSKY\nUNTSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN\nDSNSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC WW                                              TANSKY\n         PRINT NOGEN                                            TANSKY\n         SORTDC WG                                              TANSKY\n         SORTDC WCS                                             TANSKY\n         SORTDC WCA                                             TANSKY\n         SORTDC WA                                              TANSKY\n         SORTDC VT                                              TANSKY\n         SORTDC VSAMP                                           TANSKY\n         SORTDC VSAMA                                           TANSKY\n         SORTDC VGCR                                            TANSKY\n         SORTDC VGCJ                                            TANSKY\n         SORTDC VGCC                                            TANSKY\n         SORTDC VGCA                                            TANSKY\n         SORTDC VA                                              TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC SYS                                             TANSKY\n         SORTDC SYNC                                            TANSKY\n         SORTDC SRS                                             TANSKY\n         SORTDC SIS                                             TANSKY\n         SORTDC SH                                              TANSKY\n         SORTDC SD                                              TANSKY\n         SORTDC SCS                                             TANSKY\n         SORTDC SCA                                             TANSKY\n         SORTDC SA                                              TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC PMS                                             TANSKY\n         SORTDC PHL                                             TANSKY\n         SORTDC PD                                              TANSKY\n         SORTDC PA                                              TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC NX                                              TANSKY\n         SORTDC NO                                              TANSKY\n         SORTDC NI                                              TANSKY\n         SORTDC NA                                              TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC IS                                              TANSKY\n         SORTDC IPO                                             TANSKY\n         SORTDC IM                                              TANSKY\n         SORTDC IC                                              TANSKY\n         SORTDC IAS                                             TANSKY\n         SORTDC HSM                                             TANSKY\n         SORTDC GO                                              TANSKY\n         SORTDC GIM                                             TANSKY\n         SORTDC FT                                              TANSKY\n         SORTDC FOC                                             TANSKY\n         SORTDC E2                                              TANSKY\n         SORTDC ED                                              TANSKY\n         SORTDC D9                                              TANSKY\n         SORTDC D2                                              TANSKY\n         SORTDC DSN                                             TANSKY\n         SORTDC DOL                                             TANSKY\n         SORTDC DFH                                             TANSKY\n         SORTDC DA                                              TANSKY\n         SORTDC CS                                              TANSKY\n         SORTDC CR                                              TANSKY\n         SORTDC CP                                              TANSKY\n         SORTDC CCV                                             TANSKY\n         SORTDC CCF                                             TANSKY\n         SORTDC CCD                                             TANSKY\n         SORTDC CATCO                                           TANSKY\n         SORTDC CAI                                             TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC AT                                              TANSKY\n         SORTDC ALCO                                            TANSKY\n         SORTDC AGS                                             TANSKY\n         SORTDC AF                                              TANSKY\n         SORTDC AD                                              TANSKY\n         SORTDC AC                                              TANSKY\n         SORTDC AB                                              TANSKY\nDSNSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3                                                TANSKY\nVOLSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC W                                               TANSKY\n         SORTDC V                                               TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC S                                               TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC Q                                               TANSKY\n         SORTDC P                                               TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC N                                               TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC I                                               TANSKY\n         SORTDC H                                               TANSKY\n         SORTDC G                                               TANSKY\n         SORTDC F                                               TANSKY\n         SORTDC E                                               TANSKY\n         SORTDC D                                               TANSKY\n         SORTDC C                                               TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC A                                               TANSKY\nVOLSORTE DC    A(0),AL2(0),CL6' '\n         POP   PRINT\n         SPACE 3\nUSESORT  DS    0F\nUNUSORT  DS    0F\nALCSORT  DC    A(0),AL2(3),XL4'0000F000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000C000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000A000',XL2'00'\n         DC    A(0),AL2(3),XL4'00008000',XL2'00'\n         DC    A(0),AL2(3),XL4'00006000',XL2'00'\n         DC    A(0),AL2(3),XL4'00005000',XL2'00'\n         DC    A(0),AL2(3),XL4'00004000',XL2'00'\n         DC    A(0),AL2(3),XL4'00003000',XL2'00'\n         DC    A(0),AL2(3),XL4'00002000',XL2'00'\n         DC    A(0),AL2(3),XL4'00001000',XL2'00'\n         DC    A(0),AL2(3),XL4'00000C00',XL2'00'\n         DC    A(0),AL2(3),XL4'00000800',XL2'00'\n         DC    A(0),AL2(3),XL4'00000400',XL2'00'\n         DC    A(0),AL2(3),XL4'00000300',XL2'00'\n         DC    A(0),AL2(3),XL4'00000200',XL2'00'\n         DC    A(0),AL2(3),XL4'00000100',XL2'00'\n         DC    A(0),AL2(3),XL4'000000C0',XL2'00'\n         DC    A(0),AL2(3),XL4'00000080',XL2'00'\n         DC    A(0),AL2(3),XL4'00000040',XL2'00'\n         DC    A(0),AL2(3),XL4'00000010',XL2'00'\nUSESORTE DS    0F\nUNUSORTE DS    0F\nALCSORTE DC    A(0),AL2(3),XL6'00'\n         SPACE 3\nPCTSORT  DC    A(0),AL2(1),XL2'0064',XL4'00'\n         DC    A(0),AL2(1),XL2'005A',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0046',XL4'00'\n         DC    A(0),AL2(1),XL2'003C',XL4'00'\n         DC    A(0),AL2(1),XL2'0032',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\n         DC    A(0),AL2(1),XL2'001E',XL4'00'\n         DC    A(0),AL2(1),XL2'0014',XL4'00'\n         DC    A(0),AL2(1),XL2'000A',XL4'00'\nPCTSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nEXTSORT  DC    A(0),AL2(0),CL6'0'\nEXTSORTE DC    A(0),AL2(0),CL6'0'\n         SPACE 3\nDSOSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(1),CL6'PS'\n         DC    A(0),AL2(1),CL6'PO'\n         DC    A(0),AL2(1),CL6'DA'\nDSOSORTE DC    A(0),AL2(1),CL6' '\n         SPACE 3\nRFMSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(2),CL6'VBS'\n         DC    A(0),AL2(1),CL6'VB'\n         DC    A(0),AL2(0),CL6'V'\n         DC    A(0),AL2(0),CL6'U'\n         DC    A(0),AL2(1),CL6'FS'\n         DC    A(0),AL2(2),CL6'FBS'\n         DC    A(0),AL2(1),CL6'FB'\n         DC    A(0),AL2(0),CL6'F'\nRFMSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nLRCSORT  DS    0F\nBLKSORT  DC    A(0),AL2(1),XL2'4650',XL4'00'\n         DC    A(0),AL2(1),XL2'3A98',XL4'00'\n         DC    A(0),AL2(1),XL2'2EE0',XL4'00'\n         DC    A(0),AL2(1),XL2'2328',XL4'00'\n         DC    A(0),AL2(1),XL2'1770',XL4'00'\n         DC    A(0),AL2(1),XL2'0BB8',XL4'00'\n         DC    A(0),AL2(1),XL2'07D0',XL4'00'\n         DC    A(0),AL2(1),XL2'0640',XL4'00'\n         DC    A(0),AL2(1),XL2'04B0',XL4'00'\n         DC    A(0),AL2(1),XL2'0320',XL4'00'\n         DC    A(0),AL2(1),XL2'0258',XL4'00'\n         DC    A(0),AL2(1),XL2'0190',XL4'00'\n         DC    A(0),AL2(1),XL2'00C8',XL4'00'\n         DC    A(0),AL2(1),XL2'00A0',XL4'00'\n         DC    A(0),AL2(1),XL2'0078',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\nBLKSORTE DS    0F\nLRCSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nCDTSORT  DS    0F\nEDTSORT  DS    0F\nRDTSORT  DC    A(0),AL2(2),AL1(99),AL2(0),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(000),XL3'00'\nEDTSORTE DS    0F\nRDTSORTE DS    0F\nCDTSORTE DC    A(0),AL2(2),XL6'00'\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTOCPARS\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n         SPACE 3                                                TANSKY\nVLINK    LINK  EP=IEFEB4UV,SF=L,                                TANSKY X\n               ERRET=PRUNIT2       IGNORE ERRORS                TANSKY\n         DS    0F                  PUT CNVTUTAB ON A FULLWORD   TANSKY\nCNVTUTAB DS    CL20                TABLE FOR IEFEB4UV           TANSKY\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT GEN\n         VTOCOM  NODSECT\n         PRINT NOGEN\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    XL256\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\nWORKVTCG DS    300A                                             WSX-MAX\n*ORKVTCG DS    150A                                             JVH-MAX\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n         PRINT NOGEN\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         END   VTOCCMD                                          ABL-UCB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOC#C": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00 \\x00\\x84\\x18_\\x01\\x01!_\\x11\\x02\\x00\\x93\\x00\\x8a\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "2001-08-03T11:02:20", "lines": 147, "newlines": 138, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 0 DEBUG\nCONTROL NOLIST NOFLUSH NOMSG NOPROMPT\nIF &DEBUG NE THEN CONTROL LIST NOFLUSH MSG CONLIST SYMLIST PROMPT\nIF &SYSPREF EQ &STR() THEN DO\n                             SET &DSPRFX EQ &SYSUID\n                           END\nELSE IF &SYSPREF EQ &SYSUID THEN DO\n                                   SET &DSPRFX EQ &SYSUID\n                                 END\nELSE DO\n       SET &DSPRFX EQ &SYSPREF..&SYSUID\n     END\nISPEXEC CONTROL ERRORS RETURN\nRESTART:ISPEXEC DISPLAY PANEL(VTOC#P)\nIF &LASTCC = 8 THEN EXIT\nFREE ATTRLIST(FBA)\nFREE FI(VTOCOUT)\nSET &LASTCC = 0\nSET &MAXCC = 0\nIF &C1 EQ X THEN SET &HOLD EQ &STR(HOLD)\nIF &C1 NE X THEN SET &HOLD EQ &STR(NOHOLD)\nIF &VOLLIST EQ &STR() THEN SET &VOLLIST EQ &STR(SCR001)\nIF &P EQ P THEN DO\n                   SET &LR EQ 133\n                   SET &BLK EQ 3990\n                   SET &DSNLEN EQ &STR(DSNLEN(30))\n                END\n           ELSE DO\n                   SET &LR EQ 133\n                   SET &BLK EQ 3990\n                   SET &DSNLEN EQ &STR(DSNLEN(30))\n                END\nATTR      FBA RECFM(F B A) LRECL(&LR) BLKSIZE(&BLK)\nSET &NUM = &SUBSTR(8:8,&SYSTIME)\nALLOC FI(VTOCOUT) DA('&DSPRFX..TEMP&NUM..VTOCLIST')  +\n      CATALOG SPACE(5 2)                            +\n      TRACKS USING(FBA) NEW UNIT(SYSDA)\nERROR DO\n          DELETE '&DSPRFX..TEMP&NUM..VTOCLIST'\n          EXIT\n      END\nATTN  DO\n          DELETE '&DSPRFX..TEMP&NUM..VTOCLIST'\n      END\nIF &LEVEL NE &STR( ) THEN DO\n                            SET &VLEVEL EQ &STR(LEVEL(&LEVEL))\n                         END\n                    ELSE DO\n                            SET &VLEVEL EQ &STR()\n                         END\nIF &CONTAIN NE &STR( ) THEN DO\n                            SET &VCONTAIN EQ &STR(CONTAINING(&CONTAIN))\n                         END\n                    ELSE DO\n                            SET &VCONTAIN EQ &STR()\n                         END\nIF &ENDING NE &STR( ) THEN DO\n                             SET &VENDING EQ &STR(ENDING(&ENDING))\n                          END\n                     ELSE DO\n                             SET &VENDING EQ &STR()\n                          END\nIF &CAT NE &STR( ) THEN DO\n                         SET &DSNLEN EQ &STR(DSNLEN(35))\n                         SET &VCAT EQ &STR(CAT PRINT(REP,(ACTION,CAT)))\n                       END\n                  ELSE DO\n                         SET &VCAT EQ &STR()\n                       END\nIF &ENQ NE &STR( ) THEN DO\n                         SET &DSNLEN EQ &STR(DSNLEN(35))\n                         SET &VENQ EQ &STR(ENQ PRINT(REP,(ACTION,ENQ)))\n                       END\n                  ELSE DO\n                         SET &VENQ EQ &STR()\n                       END\nIF &SRTFLDS NE &STR( ) THEN DO\n                          SET &VSRTFLDS EQ &STR(SORT(&SRTFLDS))\n                       END\n                  ELSE DO\n                          SET &VSRTFLDS EQ &STR()\n                       END\nIF &SRTFLDS EQ &STR(NOSORT) THEN DO\n                                    SET &VSRTFLDS EQ &STR(NOSORT)\n                                 END\nSET &VLIMIT EQ &STR()\nSET &VAND1 EQ &STR()\nSET &VAND2 EQ &STR()\nSET &VAND3 EQ &STR()\nIF &KEYWD1 NE &STR( ) THEN +\n    SET &VLIMIT EQ &STR(LIMIT(&STR(&KEYWD1) &STR(&OP1) &STR(&VALUE1)))\nIF &KEYWD2 NE &STR( ) THEN +\n    SET &VAND1 EQ &STR(AND1(&STR(&KEYWD2) &STR(&OP2) &STR(&VALUE2)))\nIF &KEYWD3 NE &STR( ) THEN +\n    SET &VAND2 EQ &STR(AND2(&STR(&KEYWD3) &STR(&OP3) &STR(&VALUE3)))\nIF &KEYWD4 NE &STR( ) THEN +\n    SET &VAND3 EQ &STR(AND3(&STR(&KEYWD4) &STR(&OP4) &STR(&VALUE4)))\nCONTROL MSG PROMPT\nVTOC &VOLLIST HEADING('1 VTOC LIST OF &VOLLIST VOLUME(S)') +\n &VLEVEL +\n &VCONTAIN +\n &VENDING +\n &VCAT +\n &VENQ +\n &VSRTFLDS +\n &VLIMIT +\n &VAND1 +\n &VAND2 +\n &VAND3 +\n &DSNLEN\nCONTROL NOMSG NOPROMPT\nFREE ATTRLIST(FBA)\nFREE FI(VTOCOUT)\nIF &P EQ P THEN DO\n                   FREE FI(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n                   ALLOC FI(SYSIN) DUMMY\n                   ALLOC FI(SYSPRINT) DUMMY\n                   ALLOC FI(SYSUT1) DA('&DSPRFX..TEMP&NUM..VTOCLIST') +\n                                                                 SHR\n                   ALLOC FI(SYSUT2) SYSOUT(&C1) &HOLD KEEP\n                END\nIF &P EQ P THEN DO WHILE &N1 NE 0\n                   DOPROGL IEBGENER\n                   SET &N1 EQ &N1-1\n                END\n           ELSE DO\n                 ISPEXEC BROWSE DATASET('&DSPRFX..TEMP&NUM..VTOCLIST')\n                END\nIF &P EQ P THEN DO\n                   FREE FI(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n                   ALLOC FI(SYSIN) DA(*)\n                   ALLOC FI(SYSPRINT) DA(*)\n                   ALLOC FI(SYSUT1) NEW DELETE UNIT(VIO) SPACE(4) CYL\n                   ALLOC FI(SYSUT2) NEW DELETE UNIT(VIO) SPACE(4) CYL\n                END\nIF &P NE K THEN DO\n                  DELETE '&DSPRFX..TEMP&NUM..VTOCLIST'\n                END\nIF &P EQ K THEN DO\n                  CONTROL MSG\n                  WRITE &DSPRFX..TEMP&NUM..VTOCLIST HAS BEEN SAVED\n                  CONTROL   MSG\n                END\nERROR OFF\nATTN OFF\nGOTO RESTART\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#OLD": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00R\\x00\\x88\\x12O\\x01\\x01\"o\\x11!\\x03K\\x03F\\x00\\n\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-05-03T00:00:00", "modifydate": "2001-08-14T11:21:52", "lines": 843, "newlines": 838, "modlines": 10, "user": "SBGOLOB"}, "text": "VTOC     TITLE 'VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO USE       ABL-UCB\n*           UCB SCAN SERVICES FOR MVS/XA AND MVS 1.3.3.         ABL-UCB\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-UC2\n*           REINITIALIZE UCB SCAN FOR EACH VOLUME IN THE LIST.  ABL-UC2\n*                                                                     *\n* 5/03/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           RETURN OUTPUTS TO THE PDS COMMAND PROCESSOR         ABL-PDS\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').CALL\nVTCOPEN  EQU   1              DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCCLOSE EQU   2\nVTCREAD  EQU   0\n         MEXIT\n.CALL    ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTC&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PRMADDR\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PRMADDR   THEN STORE IT FOR THE ROUTINES\n         MEND\n*\n         EJECT\nVTOCCMD  ENTERX 12,(1,LENWORK,C)     DO THE HOUSEKEEPING\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*\n*        SCAN SORT PARSE LIST AND BUILD SORT FIELD TABLE\n*\n*\nSORTPAR  LA    R4,SUBSORT     SORT PARSE LIST\n         LA    R5,SORTTAB     SORT FIELD TABLE\n         XC    0(64,R5),0(R5) CLEAR SORT FIELD TABLE\n         MVC   0(4,R5),SORTTABX DEFAULT TO DSNAME\n         SPACE 1\nSORTPAR1 LA    R1,SORTTABX-12 SORT COMPARE TABLE\n         SPACE 1\nSORTPAR2 LA    R1,12(0,R1)    POINT TO NEXT COMPARE ENTRY\n         CLC   0(4,R1),=F'0'  END OF TABLE\n         BE    SORTPAR3       ITEM NOT FOUND, IGNORE\n         L     R6,0(0,R4)     POINT TO TEXT\n         LH    R3,4(0,R4)     TEXT LENGTH\n         LTR   R3,R3          IGNORE IF ZERO\n         BZ    SORTPAR3\n         BCTR  R3,0\n         EX    R3,SORTCOMP    FIELD NAME MATCH\n         BE    SORTPAR4       YES\n         B     SORTPAR2       NO, TRY NEXT\n         SPACE 1\nSORTPAR3 ICM   R4,7,9(R4)     NEXT ITEM\n         BNZ   SORTPAR1       CONTINUE IF MORE\n         B     SORTPAR5\n         SPACE 1\nSORTPAR4 MVC   0(4,R5),0(R1)  SET UP SORT FIELD\n         ICM   R4,7,9(R4)     ASCENDING/DESCENDING INDICATOR\n         BZ    PARMERR        ERROR IF MISSING\n         L     R6,0(0,R4)     INDICATOR ADDR\n         CLC   4(2,R4),=F'0'  ERROR IF MISSING\n         BE    PARMERR\n         MVC   0(1,R5),0(R6)  A/D INDICATOR\n         LA    R5,4(0,R5)\n         CLI   0(R6),C'A'     ASCENDING SORT\n         BE    SORTPAR3       YES, OK\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BNE   PARMERR        NO, ERROR\n         B     SORTPAR3       CHECK IF ANY MORE\n         SPACE 1\nSORTCOMP CLC   4(0,R1),0(R6)\n         SPACE 1\nSORTPAR5 LA    R3,SORTKTAB-12 SORT HEADER INDEX TABLE\nSORTK1   LA    R3,12(0,R3)    NEXT ENTRY\n         CLC   0(4,R3),=F'0'  END OF TABLE\n         BE    SORTK3         YES\n         CLC   SORTTAB+1(1),1(R3)  ENTRY MATCH\n         BNE   SORTK1         NO, CHECK NEXT\n         SR    R4,R4\n         LH    R5,2(0,R3)     LOAD TABLE LENGTH\n         D     R4,=F'12'      TABLE ENTRIES\n         LA    R5,1(0,R5)\n         LA    R6,VTCSORTH\n         L     R4,4(0,R3)     LOAD TABLE BEGIN ADDR\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    SORTK2         YES\n         L     R4,8(0,R3)     LOAD TABLE END ADDR\nSORTK2   MVC   0(12,R6),0(R4)\n         LA    R4,12(0,R4)\n         LA    R6,12(0,R6)\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    *+8            YES\n         S     R4,=F'24'\n         BCT   R5,SORTK2\n         B     SORTK4\nSORTK3   MVC   VTCSORTH(12),=3F'0'\nSORTK4   MVC   0(12,R6),=3F'0'\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   VOLSET         NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALV  IS THIS THE KEYWORD 'ALLV'?\n         BE    VOLSETV        NO, NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   VOLSET         NO, NOT A GLOBAL REQUEST\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n*\n**  FIND THE A(UCB)\n*\nVOLSETV  MVI   FLAG,X'82'   GLOBAL REQUEST FOR VIRTUAL\n         B     VOLSET\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-UC2\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         SPACE 1                                                ABL-UCB\nINCR1    LA    R1,UCBPARMS           START OF PARAMETER LIST    ABL-UCB\n         L     R5,16                 A(CVT)                     ABL-UCB\n         L     R15,CVTUCBSC-CVT(R5)  START OF UCB SCAN SERVICE  ABL-UCB\n         BALR  R14,R15               GO SCAN UCB LIST           ABL-UCB\n         SPACE 1                                                ABL-UCB\n         LTR   R15,R15               END OF LIST?               ABL-UCB\n         BNZ   NOTMNT                YES, BRANCH                ABL-UCB\n         L     R6,UCBANSR            START OF THIS UCB          ABL-UCB\n         SPACE 1                                                ABL-UCB\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         CLC   VOLSER,28(R6)   COMPARE FULL VOLSER\n         BE    FNDUCB   FOUND IT\n         B     INCR1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n         B     INCR1                                            ABL-UCB\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\nNOTMNT   TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   INCR1         IN EITHER CASE, SKIP THE MESSAGE\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    3(R6),X'80'   ONLINE BIT\n         BZ    INCR1   NOPE\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    6(R6),X'40'   TEST READY BIT\n         BO    INCR1   NOT READY\n         TM    FLAG,X'80'   GLOBAL REQUEST FOR VIRTUAL\n         BO    CHKVIRT\n         TM    FLAG,X'02'   GLOBAL REQUEST\n         BZ    FNDUCB\n         TM    17(R6),X'08'  VIRTUAL UCB\n         BO    INCR1   YES\n         B     FNDUCB\nCHKVIRT  TM    17(R6),X'08'  VIRTUAL UCB\n         BZ    INCR1   NO\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6)   MOVE VOLID\n         MVC   ADDR,13(R6)   MOVE UNIT ADDRESS\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n         TM    3(R6),X'40'   PENDING BIT - SHOULD BE OFF\n         BO    PENDING\n         TM    3(R6),X'80'   ONLINE BIT - SHOULD BE ON\n         BZ    OFFLINE\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n         VTOCEXCP OPEN        OPEN THE VTOC\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   RETURN         NO, JUST EXIT\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        FORMAT THE DSCB INFORMATION\n*\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    ENDVTOC        YES, CLOSE THE VTOC               ABL-PDS\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOSE FIRST CLOSE THE VTOC\n*\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    PHASE2         YES, TERMINATE                    ABL-PDS\n*\nENDVOL   TM    FLAG,X'03'         IS THIS A GENERIC VOLUME SEARCH\n         BNZ   INCR1              YES, SEARCH FOR MORE\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         B     EXIT0\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXEUNT\n*\nPARMERR  LA    R15,16\n         B     RETURN\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         MVI   VTCEPRNT,15    TELL PRINT TO CLEAN UP HIS ACT\n*                                CLOSE DATA SETS AND FREE MAIN STORAGE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         LEAVE EQ\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n************************************************************    ABL-PDS\n*                                                          *    ABL-PDS\n*        PROCESS 'PDSCALL' KEYWORD                         *    ABL-PDS\n*                                                          *    ABL-PDS\n************************************************************    ABL-PDS\n         SPACE 1                                                ABL-PDS\n         L     R15,ADDRCBUF          GET ADDRESS OF CBUF        ABL-PDS\n         LH    R14,0(,R15)           GET THE LENGTH             ABL-PDS\n         LA    R15,0(R14,R15)        POINT TO PDSCALL, MAYBE    ABL-PDS\n         CLC   2(7,R15),=C'PDSCALL'  DID PDS CALL US?           ABL-PDS\n         BNE   NOPDSCAL              NO                         ABL-PDS\n         MVC   PDSCALL,10(R15)       MOVE THE ADDRESS           ABL-PDS\nNOPDSCAL EQU   *                                                ABL-PDS\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         LTORG\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCHARALL  DC    CL3'ALL'\nCHARALV  DC    CL3'ALV'\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),28(R6)\n         EJECT\nSORTTABX DC    AL2(VTFDSN-VTFMT),AL2(43),CL8'DSNAME'\n         DC    AL2(VTFVOLUM-VTFMT),AL2(5),CL8'VOLUME'\n         DC    AL2(VTFALLOC-VTFMT),AL2(3),CL8'ALLOC'\n         DC    AL2(VTFUSED-VTFMT),AL2(3),CL8'USED'\n         DC    AL2(VTFUNUSD-VTFMT),AL2(3),CL8'UNUSED'\n         DC    AL2(VTFPCT-VTFMT),AL2(1),CL8'PCT'\n         DC    AL2(VTFNOEPV-VTFMT),AL2(0),CL8'EX'\n         DC    AL2(VTFDSORG-VTFMT),AL2(2),CL8'DSO'\n         DC    AL2(VTFRECFM-VTFMT),AL2(4),CL8'RFM'\n         DC    AL2(VTFLRECL-VTFMT),AL2(1),CL8'LRECL'\n         DC    AL2(VTFBLKSZ-VTFMT),AL2(1),CL8'BLKSZ'\n         DC    AL2(VTFCREDT-VTFMT),AL2(2),CL8'CDATE'\n         DC    AL2(VTFEXPDT-VTFMT),AL2(2),CL8'EXPDT'\n         DC    AL2(VTFLSTAC-VTFMT),AL2(2),CL8'REFDT'\n         DC    F'0'\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE\nMSGPARSE MSGZ  ' PARSE ERROR CODE '\nMSGCMDER MSGZ  ' COMMAND SYSTEM ERROR'\nMSGNOTMT MSGZ  ' VVVVVV VOLUME IS NOT MOUNTED'\nMSGOFFLN MSGZ  ' VVVVVV VOLUME IS OFFLINE'\nMSGPEND  MSGZ  ' VVVVVV VOLUME IS PENDING OFFLINE'\n*\n*\n         EJECT\n         DS    0F\nSORTKTAB DC    AL2(VTFDSN-VTFMT),AL2(DSNSORTE-DSNSORT)\n         DC    A(DSNSORT),A(DSNSORTE)\n         DC    AL2(VTFVOLUM-VTFMT),AL2(VOLSORTE-VOLSORT)\n         DC    A(VOLSORT),A(VOLSORTE)\n         DC    AL2(VTFUSED-VTFMT),AL2(USESORTE-USESORT)\n         DC    A(USESORT),A(USESORTE)\n         DC    AL2(VTFALLOC-VTFMT),AL2(ALCSORTE-ALCSORT)\n         DC    A(ALCSORT),A(ALCSORTE)\n         DC    AL2(VTFUNUSD-VTFMT),AL2(UNUSORTE-UNUSORT)\n         DC    A(UNUSORT),A(UNUSORTE)\n         DC    AL2(VTFPCT-VTFMT),AL2(PCTSORTE-PCTSORT)\n         DC    A(PCTSORT),A(PCTSORTE)\n         DC    AL2(VTFNOEPV-VTFMT),AL2(EXTSORTE-EXTSORT)\n         DC    A(EXTSORT),A(EXTSORTE)\n         DC    AL2(VTFDSORG-VTFMT),AL2(DSOSORTE-DSOSORT)\n         DC    A(DSOSORT),A(DSOSORTE)\n         DC    AL2(VTFRECFM-VTFMT),AL2(RFMSORTE-RFMSORT)\n         DC    A(RFMSORT),A(RFMSORTE)\n         DC    AL2(VTFLRECL-VTFMT),AL2(LRCSORTE-LRCSORT)\n         DC    A(LRCSORT),A(LRCSORTE)\n         DC    AL2(VTFBLKSZ-VTFMT),AL2(BLKSORTE-BLKSORT)\n         DC    A(BLKSORT),A(BLKSORTE)\n         DC    AL2(VTFCREDT-VTFMT),AL2(CDTSORTE-CDTSORT)\n         DC    A(CDTSORT),A(CDTSORTE)\n         DC    AL2(VTFLSTAC-VTFMT),AL2(RDTSORTE-RDTSORT)\n         DC    A(RDTSORT),A(RDTSORTE)\n         DC    AL2(VTFEXPDT-VTFMT),AL2(EDTSORTE-EDTSORT)\n         DC    A(EDTSORT),A(EDTSORTE)\n         DC    2F'0'\n         SPACE 3\nDSNSORT  DC    A(0),AL2(0),CL6'Z'\n         DC    A(0),AL2(1),CL6'TV'\n         DC    A(0),AL2(1),CL6'TM'\n         DC    A(0),AL2(2),CL6'T.Z'\n         DC    A(0),AL2(2),CL6'T.Y'\n         DC    A(0),AL2(2),CL6'T.X'\n         DC    A(0),AL2(2),CL6'T.W'\n         DC    A(0),AL2(2),CL6'T.V'\n         DC    A(0),AL2(2),CL6'T.U'\n         DC    A(0),AL2(2),CL6'T.T'\n         DC    A(0),AL2(2),CL6'T.S'\n         DC    A(0),AL2(2),CL6'T.R'\n         DC    A(0),AL2(2),CL6'T.Q'\n         DC    A(0),AL2(2),CL6'T.P'\n         DC    A(0),AL2(2),CL6'T.O'\n         DC    A(0),AL2(2),CL6'T.N'\n         DC    A(0),AL2(2),CL6'T.M'\n         DC    A(0),AL2(2),CL6'T.L'\n         DC    A(0),AL2(2),CL6'T.K'\n         DC    A(0),AL2(2),CL6'T.J'\n         DC    A(0),AL2(2),CL6'T.I'\n         DC    A(0),AL2(2),CL6'T.H'\n         DC    A(0),AL2(2),CL6'T.G'\n         DC    A(0),AL2(2),CL6'T.F'\n         DC    A(0),AL2(2),CL6'T.E'\n         DC    A(0),AL2(2),CL6'T.D'\n         DC    A(0),AL2(2),CL6'T.C'\n         DC    A(0),AL2(2),CL6'T.B'\n         DC    A(0),AL2(2),CL6'T.A'\n         DC    A(0),AL2(1),CL6'SY'\n         DC    A(0),AL2(1),CL6'SV'\n         DC    A(0),AL2(1),CL6'PV'\n         DC    A(0),AL2(2),CL6'P.Z'\n         DC    A(0),AL2(2),CL6'P.Y'\n         DC    A(0),AL2(2),CL6'P.X'\n         DC    A(0),AL2(2),CL6'P.W'\n         DC    A(0),AL2(2),CL6'P.V'\n         DC    A(0),AL2(2),CL6'P.U'\n         DC    A(0),AL2(2),CL6'P.T'\n         DC    A(0),AL2(2),CL6'P.S'\n         DC    A(0),AL2(2),CL6'P.R'\n         DC    A(0),AL2(2),CL6'P.Q'\n         DC    A(0),AL2(2),CL6'P.P'\n         DC    A(0),AL2(2),CL6'P.O'\n         DC    A(0),AL2(2),CL6'P.N'\n         DC    A(0),AL2(2),CL6'P.M'\n         DC    A(0),AL2(2),CL6'P.L'\n         DC    A(0),AL2(2),CL6'P.K'\n         DC    A(0),AL2(2),CL6'P.J'\n         DC    A(0),AL2(2),CL6'P.I'\n         DC    A(0),AL2(2),CL6'P.H'\n         DC    A(0),AL2(2),CL6'P.G'\n         DC    A(0),AL2(2),CL6'P.F'\n         DC    A(0),AL2(2),CL6'P.E'\n         DC    A(0),AL2(2),CL6'P.D'\n         DC    A(0),AL2(2),CL6'P.C'\n         DC    A(0),AL2(2),CL6'P.B'\n         DC    A(0),AL2(2),CL6'P.A'\n         DC    A(0),AL2(0),CL6'N'\nDSNSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nVOLSORT  DC    A(0),AL2(4),CL6'33509'\n         DC    A(0),AL2(4),CL6'33508'\n         DC    A(0),AL2(4),CL6'33507'\n         DC    A(0),AL2(4),CL6'33506'\n         DC    A(0),AL2(4),CL6'33505'\n         DC    A(0),AL2(4),CL6'33504'\n         DC    A(0),AL2(4),CL6'33503'\n         DC    A(0),AL2(4),CL6'33502'\n         DC    A(0),AL2(4),CL6'33501'\n         DC    A(0),AL2(4),CL6'33500'\n         DC    A(0),AL2(4),CL6'33309'\n         DC    A(0),AL2(4),CL6'33308'\n         DC    A(0),AL2(4),CL6'33307'\n         DC    A(0),AL2(4),CL6'33306'\n         DC    A(0),AL2(4),CL6'33305'\n         DC    A(0),AL2(4),CL6'33304'\n         DC    A(0),AL2(4),CL6'33303'\n         DC    A(0),AL2(4),CL6'33302'\n         DC    A(0),AL2(4),CL6'33301'\n         DC    A(0),AL2(4),CL6'33300'\n         DC    A(0),AL2(0),CL6'T'\n         DC    A(0),AL2(0),CL6'R'\n         DC    A(0),AL2(0),CL6'P'\n         DC    A(0),AL2(0),CL6'M'\n         DC    A(0),AL2(0),CL6'I'\n         DC    A(0),AL2(0),CL6'H'\nVOLSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nUSESORT  DS    0F\nUNUSORT  DS    0F\nALCSORT  DC    A(0),AL2(3),XL4'0000F000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000C000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000A000',XL2'00'\n         DC    A(0),AL2(3),XL4'00008000',XL2'00'\n         DC    A(0),AL2(3),XL4'00006000',XL2'00'\n         DC    A(0),AL2(3),XL4'00005000',XL2'00'\n         DC    A(0),AL2(3),XL4'00004000',XL2'00'\n         DC    A(0),AL2(3),XL4'00003000',XL2'00'\n         DC    A(0),AL2(3),XL4'00002000',XL2'00'\n         DC    A(0),AL2(3),XL4'00001000',XL2'00'\n         DC    A(0),AL2(3),XL4'00000C00',XL2'00'\n         DC    A(0),AL2(3),XL4'00000800',XL2'00'\n         DC    A(0),AL2(3),XL4'00000400',XL2'00'\n         DC    A(0),AL2(3),XL4'00000300',XL2'00'\n         DC    A(0),AL2(3),XL4'00000200',XL2'00'\n         DC    A(0),AL2(3),XL4'00000100',XL2'00'\n         DC    A(0),AL2(3),XL4'000000C0',XL2'00'\n         DC    A(0),AL2(3),XL4'00000080',XL2'00'\n         DC    A(0),AL2(3),XL4'00000040',XL2'00'\n         DC    A(0),AL2(3),XL4'00000010',XL2'00'\nUSESORTE DS    0F\nUNUSORTE DS    0F\nALCSORTE DC    A(0),AL2(3),XL6'00'\n         SPACE 3\nPCTSORT  DC    A(0),AL2(1),XL2'0064',XL4'00'\n         DC    A(0),AL2(1),XL2'005A',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0046',XL4'00'\n         DC    A(0),AL2(1),XL2'003C',XL4'00'\n         DC    A(0),AL2(1),XL2'0032',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\n         DC    A(0),AL2(1),XL2'001E',XL4'00'\n         DC    A(0),AL2(1),XL2'0014',XL4'00'\n         DC    A(0),AL2(1),XL2'000A',XL4'00'\nPCTSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nEXTSORT  DC    A(0),AL2(0),CL6'0'\nEXTSORTE DC    A(0),AL2(0),CL6'0'\n         SPACE 3\nDSOSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(1),CL6'PS'\n         DC    A(0),AL2(1),CL6'PO'\n         DC    A(0),AL2(1),CL6'DA'\nDSOSORTE DC    A(0),AL2(1),CL6' '\n         SPACE 3\nRFMSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(2),CL6'VBS'\n         DC    A(0),AL2(1),CL6'VB'\n         DC    A(0),AL2(0),CL6'V'\n         DC    A(0),AL2(0),CL6'U'\n         DC    A(0),AL2(1),CL6'FS'\n         DC    A(0),AL2(2),CL6'FBS'\n         DC    A(0),AL2(1),CL6'FB'\n         DC    A(0),AL2(0),CL6'F'\nRFMSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nLRCSORT  DS    0F\nBLKSORT  DC    A(0),AL2(1),XL2'4650',XL4'00'\n         DC    A(0),AL2(1),XL2'3A98',XL4'00'\n         DC    A(0),AL2(1),XL2'2EE0',XL4'00'\n         DC    A(0),AL2(1),XL2'2328',XL4'00'\n         DC    A(0),AL2(1),XL2'1770',XL4'00'\n         DC    A(0),AL2(1),XL2'0BB8',XL4'00'\n         DC    A(0),AL2(1),XL2'07D0',XL4'00'\n         DC    A(0),AL2(1),XL2'0640',XL4'00'\n         DC    A(0),AL2(1),XL2'04B0',XL4'00'\n         DC    A(0),AL2(1),XL2'0320',XL4'00'\n         DC    A(0),AL2(1),XL2'0258',XL4'00'\n         DC    A(0),AL2(1),XL2'0190',XL4'00'\n         DC    A(0),AL2(1),XL2'00C8',XL4'00'\n         DC    A(0),AL2(1),XL2'00A0',XL4'00'\n         DC    A(0),AL2(1),XL2'0078',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\nBLKSORTE DS    0F\nLRCSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nCDTSORT  DS    0F\nEDTSORT  DS    0F\nRDTSORT  DC    A(0),AL2(2),AL1(99),AL2(0),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(000),XL3'00'\nEDTSORTE DS    0F\nRDTSORTE DS    0F\nCDTSORTE DC    A(0),AL2(2),XL6'00'\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTOCPARS\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT GEN\n         VTOCOM  NODSECT\n         PRINT NOGEN\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    XL256\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n         PRINT NOGEN\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         END   VTOCCMD                                          ABL-UCB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x18\\x00\\x84\\x18_\\x01\\x01!_\\x11\\x05\\x00t\\x00p\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "2001-08-03T11:05:18", "lines": 116, "newlines": 112, "modlines": 0, "user": "MMSMAK"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                %  V T O C   UTILITY   +\n+\n+          COMMAND%===>_ZCMD       +                                           +\n+\n+   VOLUME SERIAL %===>_VOLLIST    +VOLSER IF NOT CATALOGED\n+     PRINT OPTION%===>_P          +BLANK - DISPLAY VTOC ENTRIES\n+                                  +K     - DISPLAY VTOC ENTRIES AND\n+                                  +           SAVE DATASET\n+                                  +P     - PRINT VTOC ENTRIES\n+     SYSOUT CLASS%===>_C1         +\n+  NO. COPIES IF P%===>_N1         +\n+  %OPTIONS:                                               +\n+     LEVEL       %===>_LEVEL                              +\n+     CONTAINING  %===>_CONTAIN                            +\n+     ENDING      %===>_ENDING  +\n+     CATALOG CK? %===>_CAT +\n+     ENQUEUE CK? %===>_ENQ +\n+     SORT/NOSORT %===>_SRTFLDS                                     +\n+                       KEYWORD   OPERATOR     VALUE\n+     LIMIT1      %===>_KEYWD1+%===>_Z + %===>_VALUE1            +\n+     LIMIT2      %===>_KEYWD2+%===>_Z + %===>_VALUE2            +\n+     LIMIT3      %===>_KEYWD3+%===>_Z + %===>_VALUE3            +\n+     LIMIT4      %===>_KEYWD4+%===>_Z + %===>_VALUE4            +\n)INIT\n  .ZVARS = '(OP1 OP2 OP3 OP4)'\n  .HELP = VTOC#P1\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &P = ' '\n  &N1 = 1\n  &C1 = A\n  &LEVEL = ' '\n  &CONTAIN = ' '\n  &ENDING = ' '\n  &SRTFLDS = ' '\n  &VOLLIST = ' '\n  &CAT = ' '\n  &ENQ = ' '\n  &KEYWD1 = ' '\n  &OP1 = ' '\n  &VALUE1 = ' '\n  &KEYWD2 = ' '\n  &OP2 = ' '\n  &VALUE2 = ' '\n  &KEYWD3 = ' '\n  &OP3 = ' '\n  &VALUE3 = ' '\n  &KEYWD4 = ' '\n  &OP4 = ' '\n  &VALUE4 = ' '\n)PROC\n  VER(&VOLLIST,NONBLANK,MSG=VTOC002)\n  &P = TRUNC(&P,1)\n  VER(&P,LIST,' ',P,K,MSG=VTOC000)\n  IF (&P = P)\n    &N1 = TRUNC(&N1,1)\n    VER(&N1,NUM,MSG=VTOC001)\n  &CAT = TRUNC(&CAT,1)\n  VER(&CAT,LIST,' ',Y,MSG=VTOC003)\n  &ENQ = TRUNC(&ENQ,1)\n  VER(&ENQ,LIST,' ',Y,MSG=VTOC003)\n  IF (&KEYWD1 \u00ac= ' ')\n    VER(&KEYWD1,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,ENQ,MSG=VTOC004)\n    &OP1 = TRUNC(&OP1,2)\n    IF (&OP1 = '  ')\n      VER(&OP1,NONBLANK,MSG=VTOC005)\n    IF (&OP1 \u00ac= '  ')\n      VER(&OP1,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC006)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD2,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,MSG=VTOC004)\n    &OP2 = TRUNC(&OP2,2)\n    IF (&OP2 = '  ')\n      VER(&OP2,NONBLANK,MSG=VTOC005)\n    IF (&OP2 \u00ac= '  ')\n      VER(&OP2,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD3,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,ENQ,MSG=VTOC004)\n    &OP3 = TRUNC(&OP3,2)\n    IF (&OP3 = '  ')\n      VER(&OP3,NONBLANK,MSG=VTOC005)\n    IF (&OP3 \u00ac= '  ')\n      VER(&OP3,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD3,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD4 \u00ac= ' ')\n    VER(&KEYWD4,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,ENQ,MSG=VTOC004)\n    &OP4 = TRUNC(&OP4,2)\n    IF (&OP4 = '  ')\n      VER(&OP4,NONBLANK,MSG=VTOC005)\n    IF (&OP4 \u00ac= '  ')\n      VER(&OP4,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P1": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x13\\x08\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T13:08:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%\n  THE VTOC UTILITY DISPLAYS SELECTED DATA SETS ON A DISK OR SET OF\n  DISKS.  EACH DISK HAS A VOLUME TABLE OF CONTENTS ( VTOC ).  THIS\n  TABLE IS SEARCHED FOR DATA SETS THAT MEET THE SPECIFICATIONS.\n\n  VOLUME      A VOLUME SERIAL NUMBER OR A LIST OF VOLUMES.\n              IF THE FIRST ONE TO FIVE CHARACTERS OF A VOLUME\n              SERIAL NUMBER ARE ENTERED, ALL VOLUMES THAT ARE\n              MOUNTED ON THE MACHINE WHICH START WITH THOSE\n              CHARACTERS WILL BE LISTED.\n              IF 'ALL' IS SPECIFIED, ALL VOLUMES\n              WHICH ARE ONLINE AND READY WILL BE PROCESSED.\n\n  LEVEL  SPECIFIES THE HIGH LEVEL QUALIFIERS TO BE\n         SEARCHED.  THIS WILL NOT BE PREFIXED BY YOUR USERID OR\n         PREFIX.  ONLY DATA SETS STARTING WITH THESE PREFIXES WILL\n         BE LISTED.\n\n                     (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P2\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P2": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x13\\x08\\x00 \\x00 \\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T13:08:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n%                              CONTINUED\n%\n  CONTAINING   SPECIFIES A CHARACTER STRING CONTAINED\n               IN THE DATA SET NAME.  AT LEAST ONE OF THE STRINGS MUST\n               BE IN THE DSNAME FOR THE DATA SET TO BE LISTED.\n               THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n               THEY CANNOT BEGIN WITH A PERIOD OR A NUMBER.\n\n  ENDING       SPECIFIES THE ENDING CHARACTERS OF THE DSNAME.\n               THE FINAL NONBLANK CHARACTERS OF THE DSNAME MUST\n               BE ONE OF THESE STRINGS TO ALLOW THE DATA SET TO BE\n               LISTED.  THESE STRINGS MUST CONFORM TO DSNAME STANDARDS.\n\n  CAT          A LOCATE IS DONE FOR EACH DSNAME ON THE VOLUMES LISTED\n               AND STATUS IS INDICATED.  NOTE -  THIS OPTION USES A\n               CONSIDERABLE AMOUNT OF PROCESSING TIME.\n               C -  CATALOGGED ON THIS VOLUME\n               N -  NOT CATALOGGED\n               W -  CATALOGGED ON ANOTHER VOLUME\n               E -  CATALOG PROCESSING ERROR\n\n                     (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P3\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P3": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00)\\x00\\x84\\x19\\x8f\\x01\\x01!_\\x11\\x06\\x00\\x1d\\x00\\x1b\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "2001-08-03T11:06:29", "lines": 29, "newlines": 27, "modlines": 0, "user": "MMSMAK"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%OPTION ===>_ZCMD                                                              +\n+\n%                               CONTINUED\n\n  ENQ         TEST IF THE DATASET IS IN USE.\n\n  NOSORT      THE DATA SETS ARE NOT SORTED.  THEY ARE OUTPUT AS THEY\n              ARE FOUND.\n\n  SORT        DATA SETS ARE SORTED INTO ALPHABETICAL ORDER,\n              BASED UPON THE SORT FIELDS SPECIFIED.\n              DSNAME,VOLUME,ALLOC,USED,UNUSED,PCT,EX,DSO,RFM,\n              LRECL,BLKSZ,CDATE,EXPDT,REFDT ARE VALID SORT FIELDS.\n              'A/D'   ARE REQUIRED AFTER EACH SORT FIELD TO INDICATE\n              ASCENDING/DESCENDING SEQUENCE.\n\n  LIMIT1 - 4  SPECIFIES WHICH DATA SETS ARE TO\n              BE LISTED.  ONLY DATA SETS THAT SATISFY THE RELATION\n              ARE LISTED.\n                     (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P4\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P4": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x13\\x11\\x00 \\x00 \\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T13:11:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%              ------------------------------------------------\n               |  LIST OF VALID KEYWORDS FOR THE VTOC UTILITY |\n               ------------------------------------------------\n\n              ALLOC      DATA SET ALLOCATION\n                            NUMBER OF KILOBYTES, TRACKS,\n                            CYLINDERS, OR MEGABYTES ALLOCATED.\n                            DEFAULT IS KILOBYTES.\n              UNUSED     AMOUNT OF UNUSED SPACE IN THE DATA\n                            SET.  SAME UNITS AS IN ALLOC.\n              USED       AMOUNT OF SPACE USED IN THE DATA SET.\n                            SAME UNITS AS IN ALLOC.\n              PCT        PERCENTAGE OF SPACE USED IN THE DATA\n                            USED.\n              EX         NUMBER OF EXTENTS IN THE DATA SET.\n              DSO        DATA SET ORGANIZATION\n                            PS = SEQUENTIAL   PO = PARTITIONED\n                            VS = VSAM         IS = ISAM\n                            DA = DIRECT ACCESS  U = UNMOVEABLE\n\n                    (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P5\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P5": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x13\\x11\\x00 \\x00 \\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T13:11:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%              ------------------------------------------------\n               |  LIST OF VALID KEYWORDS FOR THE VTOC UTILITY |\n               |                   CONTINUED                  |\n               ------------------------------------------------\n\n              RFM        RECORD FORMAT\n                            F  = FIXED        V  = VARIABLE\n                            U  = UNDEFINED    B  = BLOCKED\n                            T  = TRACK OVERFLOW\n                            S  = SPANNED OR STANDARD\n                            A  = ASA CARRIAGE CONTROL\n                            M  = MACHINE CARRIAGE CONTROL\n              BLKSZ      BLOCKSIZE FOR PHYSICAL BLOCKS OF\n                            DATA.\n              LRECL      LOGICAL RECORD LENGTH IN BYTES.\n              CDATE      CREATION DATE IN THE FORM YYDDD,\n                            SOMETIMES CALLED JULIAN.\n              EXPDT      EXPIRATION DATE IN THE SAME FORM.\n                            THIS FIELD IS RARELY USED HERE.\n\n                    (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P6\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P6": {"ttr": 3859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x13\\x11\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T13:11:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%              ------------------------------------------------\n               |  LIST OF VALID KEYWORDS FOR THE VTOC UTILITY |\n               |                   CONTINUED                  |\n               ------------------------------------------------\n\n              REFDT      LAST USE DATE IN THE SAME FORM.\n                            THIS DATE IS WHEN THE DATA SET WAS\n                            LAST OPENED.\n              SECT       TYPE OF ALLOCATION\n                            A  = ABSOLUTE TRACK\n                            B  = BLOCKS\n                            T  = TRACKS\n                            C  = CYLINDERS\n              PASS       PROTECTION INDICATORS\n                            N  = NONE\n                            R  = READ AND WRITE PROTECTION\n                            W  = WRITE PROTECTION\n\n                    (CONTINUED ON NEXT PAGE)\n)PROC\n   &ZCONT = VTOC#P7\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P7": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00S\\x00\\x84\\x19\\x8f\\x01\\x01!_\\x11\\x17\\x00 \\x00 \\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "2001-08-03T11:17:53", "lines": 32, "newlines": 32, "modlines": 0, "user": "MMSMAK"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%              ------------------------------------------------\n               |  LIST OF VALID KEYWORDS FOR THE VTOC UTILITY |\n               |                   CONTINUED                  |\n               ------------------------------------------------\n\n              ROUND      SPACE ROUNDED UP TO CYLINDERS\n                            R  = ROUND  N  = NO ROUND\n              CCHH       CYLINDER AND HEAD ADDRESS, IN 4 OR 8\n                            HEXADECIMAL DIGITS.  IF 4 DIGITS\n                            ARE USED, ONLY THE CYLINDER IS USED\n              VOLUME     VOLUME SERIAL NUMBER OR DISK NAME\n              DSNAME     NAME OF THE DATA SET\n                CAT      A LOCATE IS DONE FOR EACH DSNAME ON THEVOLUMES\n                         LISTED AND STATUS IS INDICATED.\n                         C - CATALOGGED ON THIS VOLUME\n                         N - NOT CATALOGGED\n                         W - CATALOGGED ON ANOTHER VOLUME\n                ENQ      TEST IF DATASET IS IN USE.\n                         N - NOT ENQUEUED\n                         E - AN EXCLUSIVE ENQUEUE EXISTS\n                         S - ALLOCATED WITH DISP=SHR\n)PROC\n   &ZCONT = VTOC#P8\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#P8": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x12P\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T12:50:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n%TUTORIAL ------------------- VTOC UTILITY ---------------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%              ------------------------------------------------\n               | LIST OF VALID OPERATORS FOR THE VTOC UTILITY |\n               ------------------------------------------------\n\n                      OPERATOR.  MEANING\n                        EQ       IS EQUAL TO\n                        NE       IS NOT EQUAL TO\n                        LE       IS LESS THAN OR EQUAL TO\n                        LT       IS LESS THAN\n                        GE       IS GREATER THAN OR EQUAL TO\n                        GT       IS GREATER THAN\n)PROC\n  &ZCONT = ISR91000\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC#410": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x08\\x00\\x92\\x08O\\x01\\x01\"o\\x11\"\\x03\\xa5\\x03\\x7f\\x00Z\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1992-03-24T00:00:00", "modifydate": "2001-08-14T11:22:08", "lines": 933, "newlines": 895, "modlines": 90, "user": "SBGOLOB"}, "text": "VTOC     TITLE 'VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO USE       ABL-UCB\n*           UCB SCAN SERVICES FOR MVS/XA AND MVS 1.3.3.         ABL-UCB\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-UC2\n*           REINITIALIZE UCB SCAN FOR EACH VOLUME IN THE LIST.  ABL-UC2\n*                                                                     *\n* 5/03/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           RETURN OUTPUTS TO THE PDS COMMAND PROCESSOR         ABL-PDS\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO HOLD ON TO     TANSKY*\n*           THE UCB DEVICE TYPE FOR LATER PRINTING, AND         TANSKY*\n*           MAKE IT PRINTABLE VIA IEFEB4UV.                     TANSKY*\n*         - ALSO MODIFIED THE DSN SORT TABLE FOR MY             TANSKY*\n*           INSTALLATIONS NAMES - IT CUT THE CPU TIME IN HALF   TANSKY*\n*           FOR DSN SORTING OF LARGE NUMBERS OF DATASETS.       TANSKY*\n*           (WHILE I WAS AT IT, I MODIFIED THE VOLSER SORT.)    TANSKY*\n*         - ALSO ADDED SORT FOR UNIT TYPE AND THE MACRO WHICH   TANSKY*\n*           I USED FOR THE CHARACTER SORT TABLES I CHANGED.     TANSKY*\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').CALL\nVTCOPEN  EQU   1              DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCCLOSE EQU   2\nVTCREAD  EQU   0\n         MEXIT\n.CALL    ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTC&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PRMADDR\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PRMADDR   THEN STORE IT FOR THE ROUTINES\n         MEND\n*\n*  MACRO TO CREATE THE INDIVIDUAL SORT TABLES (IF CHARACTER)    TANSKY\n*\n         MACRO                                                  TANSKY\n&LABEL   SORTDC &VALUE                                          TANSKY\nA&SYSNDX DC    0C'&VALUE'                                       TANSKY\n&LABEL   DC    A(0),AL2(L'A&SYSNDX-1),CL6'&VALUE'               TANSKY\n         MEND                                                   TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTTABX TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTTAB &VTFNAME,&HEADING                              TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(L'&VTFNAME-1),CL8'&HEADING'\n         MEND                                                   TANSKY\n         SPACE 1                                                TANSKY\n*                                                               TANSKY\n*  MACRO TO CREATE THE SORTKTAB TABLE:                          TANSKY\n*                                                               TANSKY\n         MACRO                                                  TANSKY\n&LABEL   SORTKTAB &VTFNAME,&TABNAME                             TANSKY\n&LABEL   DC    AL2(&VTFNAME-VTFMT),AL2(&TABNAME.E-&TABNAME)\n         DC    A(&TABNAME),A(&TABNAME.E)\n         MEND                                                   TANSKY\n         EJECT\nVTOCCMD  ENTERX 12,(1,LENWORK,C)     DO THE HOUSEKEEPING\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*\n*        SCAN SORT PARSE LIST AND BUILD SORT FIELD TABLE\n*\n*\nSORTPAR  LA    R4,SUBSORT     SORT PARSE LIST\n         LA    R5,SORTTAB     SORT FIELD TABLE\n         XC    0(64,R5),0(R5) CLEAR SORT FIELD TABLE\n         MVC   0(4,R5),SORTTABX DEFAULT TO DSNAME\n         SPACE 1\nSORTPAR1 LA    R1,SORTTABX-12 SORT COMPARE TABLE\n         SPACE 1\nSORTPAR2 LA    R1,12(0,R1)    POINT TO NEXT COMPARE ENTRY\n         CLC   0(4,R1),=F'0'  END OF TABLE\n         BE    SORTPAR3       ITEM NOT FOUND, IGNORE\n         L     R6,0(0,R4)     POINT TO TEXT\n         LH    R3,4(0,R4)     TEXT LENGTH\n         LTR   R3,R3          IGNORE IF ZERO\n         BZ    SORTPAR3\n         BCTR  R3,0\n         EX    R3,SORTCOMP    FIELD NAME MATCH\n         BE    SORTPAR4       YES\n         B     SORTPAR2       NO, TRY NEXT\n         SPACE 1\nSORTPAR3 ICM   R4,7,9(R4)     NEXT ITEM\n         BNZ   SORTPAR1       CONTINUE IF MORE\n         B     SORTPAR5\n         SPACE 1\nSORTPAR4 MVC   0(4,R5),0(R1)  SET UP SORT FIELD\n         ICM   R4,7,9(R4)     ASCENDING/DESCENDING INDICATOR\n         BZ    PARMERR        ERROR IF MISSING\n         L     R6,0(0,R4)     INDICATOR ADDR\n         CLC   4(2,R4),=F'0'  ERROR IF MISSING\n         BE    PARMERR\n         MVC   0(1,R5),0(R6)  A/D INDICATOR\n         LA    R5,4(0,R5)\n         CLI   0(R6),C'A'     ASCENDING SORT\n         BE    SORTPAR3       YES, OK\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BNE   PARMERR        NO, ERROR\n         B     SORTPAR3       CHECK IF ANY MORE\n         SPACE 1\nSORTCOMP CLC   4(0,R1),0(R6)\n         SPACE 1\nSORTPAR5 LA    R3,SORTKTAB-12 SORT HEADER INDEX TABLE\nSORTK1   LA    R3,12(0,R3)    NEXT ENTRY\n         CLC   0(4,R3),=F'0'  END OF TABLE\n         BE    SORTK3         YES\n         CLC   SORTTAB+1(1),1(R3)  ENTRY MATCH\n         BNE   SORTK1         NO, CHECK NEXT\n         SR    R4,R4\n         LH    R5,2(0,R3)     LOAD TABLE LENGTH\n         D     R4,=F'12'      TABLE ENTRIES\n         LA    R5,1(0,R5)\n         LA    R6,VTCSORTH\n         L     R4,4(0,R3)     LOAD TABLE BEGIN ADDR\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    SORTK2         YES\n         L     R4,8(0,R3)     LOAD TABLE END ADDR\nSORTK2   MVC   0(12,R6),0(R4)\n         LA    R4,12(0,R4)\n         LA    R6,12(0,R6)\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    *+8            YES\n         S     R4,=F'24'\n         BCT   R5,SORTK2\n         B     SORTK4\nSORTK3   MVC   VTCSORTH(12),=3F'0'\nSORTK4   MVC   0(12,R6),=3F'0'\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   VOLSET         NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALV  IS THIS THE KEYWORD 'ALLV'?\n         BE    VOLSETV        NO, NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   VOLSET         NO, NOT A GLOBAL REQUEST\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n*\n**  FIND THE A(UCB)\n*\nVOLSETV  MVI   FLAG,X'82'   GLOBAL REQUEST FOR VIRTUAL\n         B     VOLSET\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-UC2\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         SPACE 1                                                ABL-UCB\nINCR1    LA    R1,UCBPARMS           START OF PARAMETER LIST    ABL-UCB\n         L     R5,16                 A(CVT)                     ABL-UCB\n         L     R15,CVTUCBSC-CVT(R5)  START OF UCB SCAN SERVICE  ABL-UCB\n         BALR  R14,R15               GO SCAN UCB LIST           ABL-UCB\n         SPACE 1                                                ABL-UCB\n         LTR   R15,R15               END OF LIST?               ABL-UCB\n         BNZ   NOTMNT                YES, BRANCH                ABL-UCB\n         L     R6,UCBANSR            START OF THIS UCB          ABL-UCB\n         SPACE 1                                                ABL-UCB\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         CLC   VOLSER,28(R6)   COMPARE FULL VOLSER\n         BE    FNDUCB   FOUND IT\n         B     INCR1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\n         B     INCR1                                            ABL-UCB\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\nNOTMNT   TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   INCR1         IN EITHER CASE, SKIP THE MESSAGE\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    3(R6),X'80'   ONLINE BIT\n         BZ    INCR1   NOPE\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    6(R6),X'40'   TEST READY BIT\n         BO    INCR1   NOT READY\n         TM    FLAG,X'80'   GLOBAL REQUEST FOR VIRTUAL\n         BO    CHKVIRT\n         TM    FLAG,X'02'   GLOBAL REQUEST\n         BZ    FNDUCB\n         TM    17(R6),X'08'  VIRTUAL UCB\n         BO    INCR1   YES\n         B     FNDUCB\nCHKVIRT  TM    17(R6),X'08'  VIRTUAL UCB\n         BZ    INCR1   NO\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6)   MOVE VOLID\n         MVC   ADDR,13(R6)   MOVE UNIT ADDRESS\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n*  FIND PRINTABLE DEVICE TYPE VIA IEFEB4UV                      TANSKY\n         MVC   CNVTUTAB,BLANKS                                  TANSKY\n         MVC   CNVTUTAB+8(4),16(R6)  UCB UNIT TYPE              TANSKY\n         LA    R7,CNVTUTAB                                      TANSKY\n         LINK  EP=IEFEB4UV,PARAM=((7),CNVTUFLG),MF=(E,VLINK),   TANSKY X\n               ERRET=PRUNIT2       IGNORE ERRORS                TANSKY\nPRUNIT2  DS    0H                                               TANSKY\n         MVC   UCBDEVT,CNVTUTAB    MOVE UNIT NAME               TANSKY\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n         TM    3(R6),X'40'   PENDING BIT - SHOULD BE OFF\n         BO    PENDING\n         TM    3(R6),X'80'   ONLINE BIT - SHOULD BE ON\n         BZ    OFFLINE\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n         VTOCEXCP OPEN        OPEN THE VTOC\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   RETURN         NO, JUST EXIT\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        FORMAT THE DSCB INFORMATION\n*\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    ENDVTOC        YES, CLOSE THE VTOC               ABL-PDS\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOSE FIRST CLOSE THE VTOC\n*\n         TM    PDSCALL,X'80'  TERMINATION VIA ATTENTION?        ABL-PDS\n         BO    PHASE2         YES, TERMINATE                    ABL-PDS\n*\nENDVOL   TM    FLAG,X'03'         IS THIS A GENERIC VOLUME SEARCH\n         BNZ   INCR1              YES, SEARCH FOR MORE\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         B     EXIT0\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXEUNT\n*\nPARMERR  LA    R15,16\n         B     RETURN\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         MVI   VTCEPRNT,15    TELL PRINT TO CLEAN UP HIS ACT\n*                                CLOSE DATA SETS AND FREE MAIN STORAGE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         LEAVE EQ\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n************************************************************    ABL-PDS\n*                                                          *    ABL-PDS\n*        PROCESS 'PDSCALL' KEYWORD                         *    ABL-PDS\n*                                                          *    ABL-PDS\n************************************************************    ABL-PDS\n         SPACE 1                                                ABL-PDS\n         L     R15,ADDRCBUF          GET ADDRESS OF CBUF        ABL-PDS\n         LH    R14,0(,R15)           GET THE LENGTH             ABL-PDS\n         LA    R15,0(R14,R15)        POINT TO PDSCALL, MAYBE    ABL-PDS\n         CLC   2(7,R15),=C'PDSCALL'  DID PDS CALL US?           ABL-PDS\n         BNE   NOPDSCAL              NO                         ABL-PDS\n         MVC   PDSCALL,10(R15)       MOVE THE ADDRESS           ABL-PDS\nNOPDSCAL EQU   *                                                ABL-PDS\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         LTORG\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCNVTUFLG DC    X'2100'             IEFEB4UV FLAGS               TANSKY\nCHARALL  DC    CL3'ALL'\nCHARALV  DC    CL3'ALV'\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),28(R6)\n         EJECT\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTTABX SORTTAB VTFDSN,DSNAME                                  TANSKY\n         SORTTAB VTFVOLUM,VOLUME                                TANSKY\n         POP   PRINT                                            TANSKY\n         SORTTAB VTFALLOC,ALLOC                                 TANSKY\n         SORTTAB VTFUSED,USED                                   TANSKY\n         SORTTAB VTFUNUSD,UNUSED                                TANSKY\n         SORTTAB VTFPCT,PCT                                     TANSKY\n         SORTTAB VTFNOEPV,EX                                    TANSKY\n         SORTTAB VTFDSORG,DSO                                   TANSKY\n         SORTTAB VTFRECFM,RFM                                   TANSKY\n         SORTTAB VTFLRECL,LRECL                                 TANSKY\n         SORTTAB VTFBLKSZ,BLKSZ                                 TANSKY\n         SORTTAB VTFCREDT,CDATE                                 TANSKY\n         SORTTAB VTFEXPDT,EXPDT                                 TANSKY\n         SORTTAB VTFLSTAC,REFDT                                 TANSKY\n         SORTTAB VTFUNIT,UNIT                                   TANSKY\n         DC    F'0'\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE\nMSGPARSE MSGZ  ' PARSE ERROR CODE '\nMSGCMDER MSGZ  ' COMMAND SYSTEM ERROR'\nMSGNOTMT MSGZ  ' VVVVVV VOLUME IS NOT MOUNTED'\nMSGOFFLN MSGZ  ' VVVVVV VOLUME IS OFFLINE'\nMSGPEND  MSGZ  ' VVVVVV VOLUME IS PENDING OFFLINE'\n*\n*\n         EJECT\n         DS    0F\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN                                              TANSKY\nSORTKTAB SORTKTAB VTFDSN,DSNSORT                                TANSKY\n         SORTKTAB VTFVOLUM,VOLSORT                              TANSKY\n         POP   PRINT                                            TANSKY\n         SORTKTAB VTFUSED,USESORT                               TANSKY\n         SORTKTAB VTFALLOC,ALCSORT                              TANSKY\n         SORTKTAB VTFUNUSD,UNUSORT                              TANSKY\n         SORTKTAB VTFPCT,PCTSORT                                TANSKY\n         SORTKTAB VTFNOEPV,EXTSORT                              TANSKY\n         SORTKTAB VTFDSORG,DSOSORT                              TANSKY\n         SORTKTAB VTFRECFM,RFMSORT                              TANSKY\n         SORTKTAB VTFLRECL,LRCSORT                              TANSKY\n         SORTKTAB VTFBLKSZ,BLKSORT                              TANSKY\n         SORTKTAB VTFCREDT,CDTSORT                              TANSKY\n         SORTKTAB VTFLSTAC,RDTSORT                              TANSKY\n         SORTKTAB VTFEXPDT,EDTSORT                              TANSKY\n         SORTKTAB VTFUNIT,UNTSORT                               TANSKY\n         DC    2F'0'\n         SPACE 3\nUNTSORT  SORTDC 3390                                            TANSKY\n         SORTDC 3380                                            TANSKY\n         SORTDC 3370                                            TANSKY\n         SORTDC 3350                                            TANSKY\n         SORTDC 3340                                            TANSKY\n         SORTDC 3330                                            TANSKY\n         SORTDC 2                                               TANSKY\nUNTSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\n         PUSH  PRINT                                            TANSKY\n         PRINT GEN\nDSNSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC WW                                              TANSKY\n         PRINT NOGEN                                            TANSKY\n         SORTDC WG                                              TANSKY\n         SORTDC WCS                                             TANSKY\n         SORTDC WCA                                             TANSKY\n         SORTDC WA                                              TANSKY\n         SORTDC VT                                              TANSKY\n         SORTDC VSAMP                                           TANSKY\n         SORTDC VSAMA                                           TANSKY\n         SORTDC VGCR                                            TANSKY\n         SORTDC VGCJ                                            TANSKY\n         SORTDC VGCC                                            TANSKY\n         SORTDC VGCA                                            TANSKY\n         SORTDC VA                                              TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC SYS                                             TANSKY\n         SORTDC SYNC                                            TANSKY\n         SORTDC SRS                                             TANSKY\n         SORTDC SIS                                             TANSKY\n         SORTDC SH                                              TANSKY\n         SORTDC SD                                              TANSKY\n         SORTDC SCS                                             TANSKY\n         SORTDC SCA                                             TANSKY\n         SORTDC SA                                              TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC PMS                                             TANSKY\n         SORTDC PHL                                             TANSKY\n         SORTDC PD                                              TANSKY\n         SORTDC PA                                              TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC NX                                              TANSKY\n         SORTDC NO                                              TANSKY\n         SORTDC NI                                              TANSKY\n         SORTDC NA                                              TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC IS                                              TANSKY\n         SORTDC IPO                                             TANSKY\n         SORTDC IM                                              TANSKY\n         SORTDC IC                                              TANSKY\n         SORTDC IAS                                             TANSKY\n         SORTDC HSM                                             TANSKY\n         SORTDC GO                                              TANSKY\n         SORTDC GIM                                             TANSKY\n         SORTDC FT                                              TANSKY\n         SORTDC FOC                                             TANSKY\n         SORTDC E2                                              TANSKY\n         SORTDC ED                                              TANSKY\n         SORTDC D9                                              TANSKY\n         SORTDC D2                                              TANSKY\n         SORTDC DSN                                             TANSKY\n         SORTDC DOL                                             TANSKY\n         SORTDC DFH                                             TANSKY\n         SORTDC DA                                              TANSKY\n         SORTDC CS                                              TANSKY\n         SORTDC CR                                              TANSKY\n         SORTDC CP                                              TANSKY\n         SORTDC CCV                                             TANSKY\n         SORTDC CCF                                             TANSKY\n         SORTDC CCD                                             TANSKY\n         SORTDC CATCO                                           TANSKY\n         SORTDC CAI                                             TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC AT                                              TANSKY\n         SORTDC ALCO                                            TANSKY\n         SORTDC AGS                                             TANSKY\n         SORTDC AF                                              TANSKY\n         SORTDC AD                                              TANSKY\n         SORTDC AC                                              TANSKY\n         SORTDC AB                                              TANSKY\nDSNSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3                                                TANSKY\nVOLSORT  SORTDC Z                                               TANSKY\n         SORTDC Y                                               TANSKY\n         SORTDC X                                               TANSKY\n         SORTDC W                                               TANSKY\n         SORTDC V                                               TANSKY\n         SORTDC U                                               TANSKY\n         SORTDC T                                               TANSKY\n         SORTDC S                                               TANSKY\n         SORTDC R                                               TANSKY\n         SORTDC Q                                               TANSKY\n         SORTDC P                                               TANSKY\n         SORTDC O                                               TANSKY\n         SORTDC N                                               TANSKY\n         SORTDC M                                               TANSKY\n         SORTDC L                                               TANSKY\n         SORTDC K                                               TANSKY\n         SORTDC J                                               TANSKY\n         SORTDC I                                               TANSKY\n         SORTDC H                                               TANSKY\n         SORTDC G                                               TANSKY\n         SORTDC F                                               TANSKY\n         SORTDC E                                               TANSKY\n         SORTDC D                                               TANSKY\n         SORTDC C                                               TANSKY\n         SORTDC B                                               TANSKY\n         SORTDC A                                               TANSKY\nVOLSORTE DC    A(0),AL2(0),CL6' '\n         POP   PRINT\n         SPACE 3\nUSESORT  DS    0F\nUNUSORT  DS    0F\nALCSORT  DC    A(0),AL2(3),XL4'0000F000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000C000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000A000',XL2'00'\n         DC    A(0),AL2(3),XL4'00008000',XL2'00'\n         DC    A(0),AL2(3),XL4'00006000',XL2'00'\n         DC    A(0),AL2(3),XL4'00005000',XL2'00'\n         DC    A(0),AL2(3),XL4'00004000',XL2'00'\n         DC    A(0),AL2(3),XL4'00003000',XL2'00'\n         DC    A(0),AL2(3),XL4'00002000',XL2'00'\n         DC    A(0),AL2(3),XL4'00001000',XL2'00'\n         DC    A(0),AL2(3),XL4'00000C00',XL2'00'\n         DC    A(0),AL2(3),XL4'00000800',XL2'00'\n         DC    A(0),AL2(3),XL4'00000400',XL2'00'\n         DC    A(0),AL2(3),XL4'00000300',XL2'00'\n         DC    A(0),AL2(3),XL4'00000200',XL2'00'\n         DC    A(0),AL2(3),XL4'00000100',XL2'00'\n         DC    A(0),AL2(3),XL4'000000C0',XL2'00'\n         DC    A(0),AL2(3),XL4'00000080',XL2'00'\n         DC    A(0),AL2(3),XL4'00000040',XL2'00'\n         DC    A(0),AL2(3),XL4'00000010',XL2'00'\nUSESORTE DS    0F\nUNUSORTE DS    0F\nALCSORTE DC    A(0),AL2(3),XL6'00'\n         SPACE 3\nPCTSORT  DC    A(0),AL2(1),XL2'0064',XL4'00'\n         DC    A(0),AL2(1),XL2'005A',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0046',XL4'00'\n         DC    A(0),AL2(1),XL2'003C',XL4'00'\n         DC    A(0),AL2(1),XL2'0032',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\n         DC    A(0),AL2(1),XL2'001E',XL4'00'\n         DC    A(0),AL2(1),XL2'0014',XL4'00'\n         DC    A(0),AL2(1),XL2'000A',XL4'00'\nPCTSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nEXTSORT  DC    A(0),AL2(0),CL6'0'\nEXTSORTE DC    A(0),AL2(0),CL6'0'\n         SPACE 3\nDSOSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(1),CL6'PS'\n         DC    A(0),AL2(1),CL6'PO'\n         DC    A(0),AL2(1),CL6'DA'\nDSOSORTE DC    A(0),AL2(1),CL6' '\n         SPACE 3\nRFMSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(2),CL6'VBS'\n         DC    A(0),AL2(1),CL6'VB'\n         DC    A(0),AL2(0),CL6'V'\n         DC    A(0),AL2(0),CL6'U'\n         DC    A(0),AL2(1),CL6'FS'\n         DC    A(0),AL2(2),CL6'FBS'\n         DC    A(0),AL2(1),CL6'FB'\n         DC    A(0),AL2(0),CL6'F'\nRFMSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nLRCSORT  DS    0F\nBLKSORT  DC    A(0),AL2(1),XL2'4650',XL4'00'\n         DC    A(0),AL2(1),XL2'3A98',XL4'00'\n         DC    A(0),AL2(1),XL2'2EE0',XL4'00'\n         DC    A(0),AL2(1),XL2'2328',XL4'00'\n         DC    A(0),AL2(1),XL2'1770',XL4'00'\n         DC    A(0),AL2(1),XL2'0BB8',XL4'00'\n         DC    A(0),AL2(1),XL2'07D0',XL4'00'\n         DC    A(0),AL2(1),XL2'0640',XL4'00'\n         DC    A(0),AL2(1),XL2'04B0',XL4'00'\n         DC    A(0),AL2(1),XL2'0320',XL4'00'\n         DC    A(0),AL2(1),XL2'0258',XL4'00'\n         DC    A(0),AL2(1),XL2'0190',XL4'00'\n         DC    A(0),AL2(1),XL2'00C8',XL4'00'\n         DC    A(0),AL2(1),XL2'00A0',XL4'00'\n         DC    A(0),AL2(1),XL2'0078',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\nBLKSORTE DS    0F\nLRCSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nCDTSORT  DS    0F\nEDTSORT  DS    0F\nRDTSORT  DC    A(0),AL2(2),AL1(99),AL2(0),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(98),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(97),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(96),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(95),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(94),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(93),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(92),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(91),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(90),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(89),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(88),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(87),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(86),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(85),AL2(000),XL3'00'\nEDTSORTE DS    0F\nRDTSORTE DS    0F\nCDTSORTE DC    A(0),AL2(2),XL6'00'\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTOCPARS\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n         SPACE 3                                                TANSKY\nVLINK    LINK  EP=IEFEB4UV,SF=L,                                TANSKY X\n               ERRET=PRUNIT2       IGNORE ERRORS                TANSKY\n         DS    0F                  PUT CNVTUTAB ON A FULLWORD   TANSKY\nCNVTUTAB DS    CL20                TABLE FOR IEFEB4UV           TANSKY\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT GEN\n         VTOCOM  NODSECT\n         PRINT NOGEN\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    XL256\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n         PRINT NOGEN\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         END   VTOCCMD                                          ABL-UCB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCCHEK": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x14\\x17_\\x01\\x14\\x17_\\x13 \\x03\\x8e\\x03\\x8e\\x00\\x00\\xc5\\xc1\\xe5\\xc6\\xc9\\xe7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-06-24T00:00:00", "modifydate": "2014-06-24T13:20:00", "lines": 910, "newlines": 910, "modlines": 0, "user": "EAVFIX"}, "text": "VTOCCHEK TITLE 'VTOC COMMAND CHECK  ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND CHECK  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   CHECK THE CONDITIONS SPECIFIED ON THE VTOC COMMAND.    *\n*              SEE IF THE DATA SET PASSED SHOULD BE PROCESSED.        *\n*              THE LIMIT, ENDING, CONTAINING, CCHH, LIMIT, AND,       *\n*              AND OR KEYWORDS ARE PROCESSED BY THIS ROUTINE.         *\n*                                                                     *\n* OPERATION -  FIRST GET THE LENGTH OF THE DSNAME AND SAVE IT.        *\n*              THEN GET THE FORMAT 3 DSCB, IF ONE EXISTS.  TRY        *\n*              EACH KEYWORD TO SEE IF IT WILL EXCLUDE THE DATA        *\n*              SET FROM FURTHER PROCESSING.                           *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, FORMAT 1, 3, AND 4 DSCB'S              *\n*              FOR DSORG, RECFM, ALLOC, USED, PROT, CATLG, OR SECAL   *\n*              CALL VTOCFORM TO FORMAT THE PARMS.  USE FORMATTED DSCB *\n*                                                                     *\n* OUTPUT -     A RETURN CODE OF 0 TO CONTINUE PROCESSING OR 8 TO      *\n*              EXCLUDE THIS DATA SET.                                 *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO SUPPORT   ABL-ICF\n*           123 EXTENTS FOR VSAM DATA SETS IN AN ICF CATALOG.   ABL-ICF\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-EXT\n*           LIM(EX GT 2) TO MEAN EXTENTS (NO EXPDT).            ABL-EXT\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-049\n*           LIM(XXX ... ERROR MESSAGE                           ABL-049\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO ALLOW    ABL-CONT\n*           CONT(123) OR CONT(.DATA)                           ABL-CONT\n*                                                                     *\n* 12/16/86- MODIFIED BY G. ALBERTELLI AT BFG TO IMPLEMENT       GLA-EXL\n*           EXLEVEL(DSNAME-LIST)                                GLA-EXL\n*                                                                     *\n* 03/20/92- MODIFIED BY A. TANSKY AT SUNGARD TO PRINT WHOLE     TANSKY\n*           DATASET NAME, EVEN IF IT HAS EMBEDDED BLANKS        TANSKY\n*                                                                     *\n* 08/09/94- MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n* 12/19/97- MODIFIED BY JOHN KALINICH AT USA LSSC TO ADD YEAR   Y2K\n*           2000 SUPPORT FOR DATES.                             Y2K\n*                                                                     *\n***********************************************************************\n         EJECT\n*        MACROS FOR CHECK ROUTINE\n*\n         MACRO\n&LABEL   VTCHL &KEY           CALL THE KEYWORD CHECK ROUTINE\n&LABEL   L     R1,SUB&KEY.OPER    GET THE OPERATOR VALUE\n         BAL   R8,GETOPER    TRANSLATE TO A NUMBER\n         ST    R15,REFOPER     SAVE IT TOO\n         LA    R1,SUB&KEY.VALU   GET THE VALUE PDL\n         ST    R1,REFVAL      SAVE THAT ADDRESS THREE\n         CLI   FLAGNM&KEY,0  HAS IT BEEN CONVERTED?\n         BNE   VTP&SYSNDX    YES, SKIP ALONG\n         MVI   FLAGNM&KEY,1  NOTE IT AS CONVERTED\n         BAL   R8,PDLNUM     GO CONVERT IT\n         ST    R15,NUMBER&KEY      SAVE THE VALUE\n         LA    R4,SUB&KEY.KEY  POINT TO THE IKJIDENT FOR THE KEYWORD\n         BAL   R8,GETKEY     CONVERT TEXT TO A NUMERIC KEY\n         STC   R15,NUMKEY&KEY  SAVE THAT NUMERIC KEY\n         LTR   R15,R15       WAS IT SUCCESSFUL?\n         BNZ   VTP&SYSNDX    YES, SKIP ALONG\n*        ISSUE A MESSAGE - A BAD LIM, AND, OR KEYWORD\n         MVC   MSGTEXT2,KEYERR  START THE ERROR MESSAGE\n         L     R1,0(R4)      POINT TO THE TEXT\n         MVC   MSGTEXT2+48(6),0(R1)  THEN ADD IT TO THE MESSAGE ABL-049\n         VTOCMSG MSGTEXT2    ISSUE THE ERROR MESSAGE\nVTP&SYSNDX DS  0H\n         SR    R1,R1         CLEAR A REGISTER\n         ICM   R1,1,NUMKEY&KEY GET THE KEYWORD VALUE\n         BZ    VTE&SYSNDX    IF NOT SET, SKIP THE EVALUATION\n         ST    R1,REFKEY      SAVE THE ADDRESS\n         LA    R1,NUMBER&KEY  GET THE ADDRESS OF CONVERTED NUMBER\n         ST    R1,REFNUM      SAVE IT'S ADDRESS\n         BAL   R8,LIMEVAL     GO EVALUATE THE EXPRESSION\nVTE&SYSNDX DS  0H\n         MEND\n         SPACE 3\n         MACRO\n&LABEL   VTANDOR &NUM         EVALUATE, THEN DO AND OR OR FUNCTION\n&LABEL   CLI   ANDOR&NUM.K+1,0  WAS THIS KEYWORD SET?\n         BE    LIMCOMP        NO, JUST CHECK THE FINAL RESULT\n         VTCHL &NUM           YES, EVALUATE\n         CLI   ANDOR&NUM.K+1,1  WAS IT AN AND ?\n         BE    VTA&SYSNDX     YES, DO THE AND\n         O     R15,LIMVAL     NO, OR IT\n         B     VTE&SYSNDX     FINISHED WITH THIS EXPRESSION\nVTA&SYSNDX N   R15,LIMVAL     AND THE EXPRESSION VALUE\nVTE&SYSNDX ST  R15,LIMVAL     SAVE THE VALUE\n         MEND\n*\n         EJECT\n         GBLC  &WIN19XX                                       Y2K DEC97\n         SPACE 2\n*    THE FOLLOWING VARIABLE DETERMINES THE 19XX DATE WINDOW.  Y2K DEC97\n*                                                             Y2K DEC97\n*    &WIN19XX IS THE START OF THE 19XX DATE WINDOW.  ANY      Y2K DEC97\n*    YEAR LESS THAN &WIN19XX WILL BE CONSIDERED A 20XX DATE.  Y2K DEC97\n*                                                             Y2K DEC97\n&WIN19XX SETC   '66'   START OF 19XX DATE WINDOW              Y2K DEC97\n*\n         SPACE 2\nVTOCCHEK ENTER 12,12          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING CHEKWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n*\n*        SEE WHAT THE FORMAT ID IS\n*\nCHEKFMT  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         CLI   FORMATK+1,0    DID HE SPECIFY VARIOUS DSCB'S\n         BNE   CHEKFMTI       YES, GO DO HIS CHECKS\nCHEKFMTI DS    0H             NOT YET PROGRAMMED\n*\n*        STANDARD IS ONLY TO ALLOW FORMAT ONES TO GO\n*\n         CLI   DS1FMTID,C'8'  IS THIS A FORMAT 8?              #DD14170\n         BE    CHEKFMT1                                        #DD14170\n         CLI   DS1FMTID,C'1'  IS THIS A FORMAT 1?\n         BNE   CHECKOUT       NO, EXCLUDE IT FROM FURTHER PROCESSING\nCHEKFMT1 DS    0H                                              #DD14170\n*\n*              FIRST SEE HOW BIG THE DSNAME IS\n*\n*    HERE'S THE ORIGINAL CODE WHICH STOPPED AT 1ST BLANK:       TANSKY\n*        LA    R1,DS1FMTID    POINT PAST THE DSNAME\n*        TRT   DS1DSNAM,BLKTRTAB  FIND THE FIRST BLANK\n*        SR    R1,R7          SUBTRACT TO GET THE LENGTH\n*        STH   R1,DSNLEN      SAVE THE DSNAME LENGTH\n*        LR    R3,R1          KEEP THE LENGTH FOR LATER\n*    END OF ORIGINAL CODE                                       TANSKY\n*        FIND LENGTH OF DSNAME UP TO LAST NON-BLANK             TANSKY\n         XR    R6,R6               ZERO R6                      TANSKY\n         BCTR  R6,0                R6 = -1 FOR INCREMENT        TANSKY\n         LA    R1,DS1FMTID-1       LAST CHAR IN DSNAME          TANSKY\nDSNLOOP  DS    0H                                               TANSKY\n         CLI   0(R1),C' '          BLANK?                       TANSKY\n         BNE   DSNEND                NO, WE FOUND LAST CHAR     TANSKY\n         BXH   R1,R6,DSNLOOP       TRY PREVIOUS CHARACTER       TANSKY\n*        ENTIRE DSN IS BLANK (OR 1 CHARACTER) IF WE FALL THRU   TANSKY\nDSNEND   LA    R1,1(R1)            POINT TO THE BLANK           TANSKY\n         SR    R1,R7               GET LENGTH                   TANSKY\n         BP    DSNLENOK            POSITIVE LENGTH IS OKAY      TANSKY\n         LA    R1,1                  ELSE USE LENGTH=1          TANSKY\nDSNLENOK DS    0H                                               TANSKY\n         STH   R1,DSNLEN           SAVE THE DSNAME LENGTH       TANSKY\n         LR    R3,R1               KEEP THE LENGTH FOR LATER    TANSKY\n         MVC   VTC#CCHH(8),DS1EXT1+2  INITIALIZE THE CCHH RANGE    ABLC\n*\n*        GET THE FORMAT 3 DSCB, IF IT EXISTS\n*\n         XC    FMT3,FMT3      CLEAR IT FIRST\n         LA    R2,FMT3        START OF THE FORMAT 3 AREA        ABL-ICF\n         LA    R1,DS1PTRDS    POINTER TO FIRST DSCB3            ABL-ICF\n         SPACE 1                                                ABL-ICF\nNXTFMT3  CLC   0(5,R1),=XL5'0000000000'  ANY FORMAT 3?          ABL-ICF\n         BE    FMT3NO         NO, SKIP ALONG\n*\n*        SET UP THE CAMLST\n*\n         MVC   CAMSEEK(4),CAMSCON  MOVE IN THE FIRST WORD OF CAMLST\n         ST    R1,CAMSEEK+4   SAVE IT\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,CAMSEEK+8   SAVE IT\n         ST    R2,CAMSEEK+12  SAVE THE DSCB3 START ADDRESS      ABL-ICF\n         OBTAIN CAMSEEK       GET THE DSCB\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   OBT3ERR        BAD NEWS, ISSUE THE MESSAGE\n         LA    R1,DS3PTRDS-FMT3(R2)   NEXT DSCB3 POINTER        ABL-ICF\n         LA    R2,L'FMT3(R2)          NEXT DSCB3 POSITION       ABL-ICF\n         B     NXTFMT3                                          ABL-ICF\n*\n*        PROCESS THE LEVEL KEYWORD\n*\nFMT3NO   CLI   LEVKEY+1,0     WAS LEVEL SPECIFIED?\n         BE    LEVEND         NO, SKIP ON\n         LA    R4,LEVEL       YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\nLEVNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE LEVEL\n         CR    R3,R5          COMPARE LENGTHS\n         BL    LEVINC         THIS LEVEL IS LONGER THAN DSN, NO MATCH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    LEVEND         IT MATCHES, ALLOW IT\nLEVINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER\n         BNZ   LEVNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nLEVEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*                                                               GLA-EXL\n*        PROCESS THE EXLEVEL KEYWORD                            GLA-EXL\n*                                                               GLA-EXL\n         CLI   EXLKEY+1,0     WAS EXLEVEL SPECIFIED?            GLA-EXL\n         BE    EXLEND         NO, SKIP ON                       GLA-EXL\n         LA    R4,EXLEVEL     YES, POINT TO THE PDE             GLA-EXL\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                GLA-EXL\n         LR    R2,R7          POINT TO THE START OF THE DSNAME  GLA-EXL\nEXLNEXT  SR    R5,R5          CLEAR FOR INSERT                  GLA-EXL\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH        GLA-EXL\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT       GLA-EXL\n         L     R6,PDEDSN      POINT TO THE LEVEL                GLA-EXL\n         CR    R3,R5          COMPARE LENGTHS                   GLA-EXL\n         BL    EXLINC         THIS LEVEL IS LONGER, NO MATCH    GLA-EXL\n         BCTR  R5,0           MINUS ONE FOR THE EX              GLA-EXL\n         EX    R5,COMPARE     CHECK THE LENGTHS                 GLA-EXL\n         BE    CHECKOUT       IT MATCHES, SO EXCLUDE IT         GLA-EXL\nEXLINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTERGLA-EXL\n         BNZ   EXLNEXT        IF IT'S THERE, KEEP LOOKING       GLA-EXL\nEXLEND   DS    0H                                               GLA-EXL\n         DROP  R4             FINISHED WITH THE PDE             GLA-EXL\n*\n*        PROCESS THE ENDING KEYWORD\n*\n         CLI   ENDKEY+1,0     WAS ENDING SPECIFIED?\n         BE    ENDEND         NO, SKIP ON\n         LA    R4,ENDING      YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nENDNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE ENDING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    ENDINC         THIS ENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         AR    R2,R3          POINT TO THE END\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    ENDEND         IT MATCHES, ALLOW IT\nENDINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER\n         BNZ   ENDNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nENDEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE CONTAINING KEYWORD\n*\n         CLI   CONTAINK+1,0   WAS CONTAINING SPECIFIED?\n         BE    CONEND         NO, SKIP ON\n         LA    R4,CONTAIN     YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nCONNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE CONTAINING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    CONINC         THIS CONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME\n         AR    R1,R3          POINT TO THE END\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         BCTR  R5,0           MINUS ONE FOR THE EX\nCONCOMP  EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    CONEND         IT MATCHES, ALLOW IT\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN\n         BNH   CONCOMP        NOT THERE YET\n*ONINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\nCONINC   ICM   R4,B'0111',9(R4)   GET NEXT CONTAINING PDE PRT  ABL-CONT\n         BNZ   CONNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nCONEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        NOW THE BIG MESS, CHECK FOR LIMIT, AND'S, AND OR'S\n*\n         CLI   LIMITK+1,0     WAS LIMIT SPECIFIED\n         BE    LIMEND         NO, THEN THERE CAN BE NO AND'S OR OR'S\n         NI    VTCFMTCK,255-VTCFMTCC  TURN OFF THE ROUTINE CALL FLAG\n         VTCHL L              EVALUATE THE LIMIT 1=TRUE 0=FALSE\n         ST    R15,LIMVAL     SAVE THE ANSWER\n         VTANDOR 1            CHECK AND1 OR OR1\n         VTANDOR 2            CHECK AND2 OR OR2\n         VTANDOR 3            CHECK AND3 OR OR3\nLIMCOMP  L     R15,LIMVAL     GET THE RESULT OF ALL THIS\n         LTR   R15,R15        TEST IT\n         BZ    CHECKOUT       IT GETS EXCLUDED\nLIMEND   DS    0H\n         B     CHECKIN        ALL TESTS PASSED, INCLUDE THIS ONE\n         SPACE 5\n*\n*        EVALUATION ROUTINE FOR   KEYWORD  OPER  VALUE\n*\nLIMEVAL  L     R5,REFKEY      GET THE KEYWORD VALUE\n         MH    R5,H12         MULTIPLY IT BY 12\n         A     R5,ATABTITL    THEN RELOCATE IT\n         SR    R10,R10         CLEAR THE ROUTINE POINTER\n         TM    1(R5),X'80'    IS IT A FORMATTED ITEM?\n         BO    LIMFORM        YES, GO DO IT\n         SR    R6,R6         CLEAR A REGISTER\n         IC    R6,2(R5)      GET THE OFFSET INTO VTFMT\n         IC    R10,1(R5)      GET THE ROUTINE NUMBER\n         LTR   R10,R10         SEE IF IT'S A GOOD NUMBER\n         BP    LIMEVAL1       IT'S ALL RIGHT\nLIMABEND ABEND 702,DUMP       CRASH AND BURN\nLIMEVAL1 B     *(R10)         AND GO TO IT\n         B     LIMDATE        CDATE, EXPDT, REFDT\n         B     LIMLUSE        *** DUMMY ENTRY ***\n         B     LIMFORM        FORM , USED SPACE\n         B     LIMFORM        UNUSED SPACE\n         B     LIMFORM        PCT USED\n         B     LIMEXT         EXTENTS\n         B     LIMBLREC       LRECL, BLKSZ, SEC Q\n         B     LIMCCHH        DSNAME                               ABLC\n         B     LIMCCHH       CCHH CHECKING                         ABLC\n         SPACE 5\n*\n*        PERFORM THE FORMATTED ITEM CHECKING\n*\nLIMFORM  DS    0H\n         TM    VTCFMTCK,VTCFMTCC  WAS FORMAT CALLED BEFORE FOR THIS DS\n         BO    LIMFCALD       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          NO, CALL IT TO GET THE ITEMS\n         OI    VTCFMTCK,VTCFMTCC+VTCFMTCD  THEN SET THE SWITCHES\nLIMFCALD SR    R2,R2          CLEAR A WORK REG\n         A     R6,FORMATAD   RELOCATE THE BLOCK\n         B     *+4(R10)         AND GO TO IT\n         B     LIMFORMA      FORMATTED ITEM\n         B     LIMABEND       CDATE, EXPDT\n         B     LIMABEND       LAST USE DATE\n         B     LIMALLOC       ALLOC, USED SPACE\n         B     LIMUNUSD       UNUSED SPACE\n         B     LIMPCT         PCT USED\nLIMFORMA DS    0H\n         IC    R2,2(R5)       GET THE OFFSET IN VTFMT\n         A     R2,FORMATAD    THEN RELOCATE IT\n         L     R4,REFVAL      GET THE VALUE PDE\n         LH    R3,4(R4)       GET THE LENGTH OF THE STRING\n         L     R1,0(R4)       AND ITS ADDRESS\n*\n*        DO THE ACTUAL COMPARE\n*\n         BCTR  R3,0           DOWN ONE FOR AN EX\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED\nCOMPDONE DS    0H             GET THE OPERATOR ADDRESS\n         BL    COMPLOW        CHECK THE OPERATOR, VALUE LESS THAN ITEM\n         BE    COMPEQ         CHECK THE OPERATOR, KEYWORD EQUALS VALUE\n*                             KEYWORD IS GREATER THAN THE VALUE\nCOMPHI   CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GT       ALSO FOR GT\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS EQUAL TO THE VALUE\nCOMPEQ   CLI   REFOPER+3,EQ       WAS OPERATOR EQ\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       ALSO FOR LE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS LESS THAN THE VALUE\nCOMPLOW  CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LT       ALSO FOR LT\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       AND FOR LE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*\n*        IT FITS OR IT DOESN'T\n*\nCOMPYES  LA    R15,1          SET A TRUE VALUE\n         BR    R8             THEN RETURN\nCOMPNO   SR    R15,R15        SET A FALSE VALUE\n         BR    R8             THEN RETURN\n*\n*        SPECIAL ROUTINES TO CHECK NON-FORMATTED ITEMS\n*\nLIMDATE  DS    0H\n*\n*        COMPARE DATES\n*\n         LA    R14,DS1CREDT  POINT TO CREATION DATE\n         CLI   REFKEY+3,CDATE      IS THAT IT?\n         BE    LIMDGET       YES, THIS IS IT\n         LA    R14,DS1EXPDT  POINT TO EXPIRATION DATE\n         CLI   REFKEY+3,EXPDT      IS THAT IT?\n         BE    LIMDGET       YES, THIS IS IT\n         LA    R14,DS1REFD   NO, USE REFERENCE DATE\nLIMDGET  SR    R15,R15       CLEAR A WORK REG\n         IC    R15,0(R14)    GET THE YEAR\n         MH    R15,H1000     TIMES 1000\n         SR    R1,R1         CLEAR ANOTHER WORK REG\n         ICM   R1,3,1(R14)    GET THE DAYS\n         AR    R15,R1        PUT THE DATE TOGETHER\n         L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE ITSELF\n         C     R1,=A(&WIN19XX*1000) BELOW 19XX WINDOW?        Y2K DEC97\n         BNL   *+8                  NO, THEN 19XX             Y2K DEC97\n         A     R1,=F'100000'        YES, THEN 20XX            Y2K DEC97\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMLUSE  DS    0H\n*\n*        LAST USE DATE\n*\n         SR    R14,R14       CLEAR THE DATE\n         CLC   ZERO,75(R7)   CHECK FOR NO DATA\n         BE    LIMLUCMP      RIGHT, SKIP ON\n         MVC   CHEKDBLW+5(3),75(R7)  MOVE IN THE LAST USE DATE\n         CVB   R14,CHEKDBLW  CONVERT IT TO BINARY\nLIMLUCMP L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE\n         CR    R14,R1        DO THE COMPARE\n         B     COMPDONE      THEN CHASE DOWN THE OPERANDS\nLIMEXT   DS    0H\n*\n*        EXTENTS\n*\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS\n         CLC   DS1NOEPV,3(R1)        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMBLREC DS    0H\n*\n*        LRECL, BLKSZ, SECQ\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE COMPARE VALUE\n         L     R15,0(R1)      THEN GET THE VALUE ITSELF\n         CLI   REFKEY+3,BLKSZ      BLOCK SIZE?\n         BNE   LIMB1         NO, KEEP CHECKING\n         LH    R1,DS1BLKL    COMPARE TO THE BLOCK SIZE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO SIFT THROUGH THE OPERANDS\nLIMB1    CLI   REFKEY+3,LRECL  LOGICAL RECORD LENGTH\n         BNE   LIMB2         NO, KEEP GOING\n         LH    R1,DS1LRECL   COMPARE TO THE LRECL\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO CHECK THE OPERANDS\nLIMB2    MVC   HWORK,DS1SCALO+2 GET THE SECONDARY QUANTITY\n         LH    R1,HWORK      DO THE COMPARE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\n*\n*        SPACE CHECKING ROUTINES\n*\nLIMALLOC DS    0H\n*\n*        ALLOC AND USED\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE CONVERTED NUMBER\n         L     R1,0(R1)      GET THE VALUE\n         L     R15,0(R6)     GET THE AMOUNT\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\nLIMUNUSD DS    0H\n*\n*        UNUSED\n*\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         ICM   R14,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMUNUAL      IF MINUS, WE DON'T KNOW\n         L     R14,VTFALLOC  GET ALLOC\n         S     R14,VTFUSED   MINUS THE AMOUNT USED\nLIMUNUAL L     R1,REFNUM     GET THE ENTERED VALUE\n         L     R1,0(R1)      NOW ITS VALUE FOR REAL\n         CR    R14,R1        COMPARE THE VALUES\n         B     COMPDONE      THEN GO CHECK THE OPERANDS\nLIMPCT   DS    0H\n*\n*        PER CENT\n*\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         SR    R14,R14       CLEAR A REGISTER\n         ICM   R15,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMP100       IF UNKNOWN USED, SET 100 PER CENT\n         CLC   VTFALLOC,ZERO ZERO ALLOCATED SPACE?\n         BNE   LIMPCTOK      NO, CONTINUE\n         CLC   VTFUSED,ZERO  ZERO USED SPACE?\n         BE    LIMPCOMP      YES, PCT IS ZERO\n*              ZERO ALLOCATED, NONZERO USED, INCLUDE THIS ONE\n         B     COMPYES\nLIMP100  LA    R15,100       SET UP 100 PER CENT\n         B     LIMPCOMP      GO COMPARE\nLIMPCTOK M     R14,F100      MULTIPLY BY 100 PERCENT\n         D     R14,VTFALLOC  DIVIDE BY THE ALLOCATION\nLIMPCOMP L     R1,REFNUM     GET THE VALUE ADDRESS\n         L     R1,0(R1)      THEN THE VALUE\n         CR    R15,R1        THEN COMPARE THEM\n         B     COMPDONE      THEN GO SIFT THROUGH THE OPERANDS\n*\n*        CCHH CHECKING IS NOT QUITE STANDARD BECAUSE THERE MAY\n*        MAY BE UP TO 16 EXTENTS TO COMPARE.  THE DATA MAY BE\n*        CC OR CCHH FORMATS.  THE DATA SET MAY BE EQUAL TO,\n*        LESS THAN, AND GREATER THAN ANY PARTICULAR VALUE.\n*\nLIMCCHH  DS    0H\n*\n*        FIRST SEE IF THE CCHH WAS CONVERTED\n*              CONVERT IT IF NOT, SKIP IF IT'S DONE\n*\n         L     R5,REFNUM     GET THE ADDRESS OF THE COMPARISON VALUE\n         L     R4,0(R5)      GET THE VALUE\n         ICM   R6,3,4(R5)    GET THE COMPARE LENGTH\n         BP    LIMCSET       IF IT'S SET, THE CONVERSION IS DONE\n*                      IT WASN'T SET, CONVERT FROM CHARS TO BINARY\n         L     R1,REFVAL     GET THE ADDRESS OF THE IKJIDENT\n         L     R2,0(R1)      POINT TO THE TEXT\n         LH    R3,4(R1)      GET THE LENGTH OF THE TEXT\n*        IT SHOULD BE 4 OR 8 CHARACTERS\n         XC    DOUBLE,DOUBLE CLEAR OUT A PLACE TO WORK\n         CH    R3,H4         IS IT A CYLINDER ONLY?\n         BH    LIMCCON2      NO, TRY FOR A CCHH\n         BE    LIMCCON1      YES, JUST CONVERT IT\n         VTOCMSG CCHHLEN     LESS THAN FOUR CHARS, ISSUE A MSG\nLIMCCON1 LA    R6,1          SET THE COMPARE LENGTH\n         B     LIMCMOVE      GO MOVE IT IN\nLIMCCON2 LA    R6,3          SET THE COMPARE LENGTH\n         CH    R3,H8         WAS IT A CCHH?\n         BE    LIMCMOVE      YES, JUST THE RIGHT LENGTH\n         VTOCMSG CCHHLEN     WARN THE PERSON\n         CH    R3,H8         CHECK AGAIN\n         BL    LIMCMOVE      IS IT OVER 8 CHARS?\n         LH    R3,H8         YES, SET IT FOR THE MAX - IGNORE RR\nLIMCMOVE BCTR  R3,0          MINUS ONE FOR THE EX\n         EX    R3,MOVECCHH   MOVE IN THE CHARS\n         TR    DOUBLE,DECTABLE TRANSLATE HEX EBCDIC TO HEX BINARY\n         PACK  CYLH(5),DOUBLE(9)  SQUISH OUT THE ZONES\n         L     R4,CYLH       GET THE CCHH\n         ST    R4,0(R5)      SAVE IT FOR LATER\n         STH   R6,4(R5)      SAVE THE LENGTH TOO\nLIMCSET  DS    0H            THE NUMBER IS CONVERTED\n*\n*        COMPARE THE EXTENTS TO THE CCHH VALUE.\n*        ANY EXTENT MAY BE LT, EQ, AND GT A PARTICULAR\n*        VALUE, AND ALL THE EXTENTS MUST BE CHECKED.\n*\n         MVI   CCHHCOMP,0    CLEAR THE FLAGS\n         SR    R2,R2         CLEAR A REG FOR AN EXTENT COUNTER\n         ICM   R2,1,DS1NOEPV GET THE NUMBER OF EXTENTS\n         BZ    COMPNO        NO EXTENTS, JUST GO SEE\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n         SR    R1,R1         FIRST EXTENT\nEXTNEXT  LR    R14,R1                                           ABL-ICF\n         S     R14,=F'3'                                        ABL-ICF\n         SRDA  R14,32                                           ABL-ICF\n         D     R14,=F'13'    (EXTENT-3) / 13                    ABL-ICF\n         LR    R14,R15       EXTENT TABLE IN USE                ABL-ICF\n         MH    R14,=H'13'                                       ABL-ICF\n         MH    R15,=H'148'                                      ABL-ICF\n         LR    R3,R1         EXTENT - ((EXTENT-3) / 13) * 13    ABL-ICF\n         SR    R3,R14        EXTENT INSTRUCTION ADDRESS         ABL-ICF\n         SLL   R3,2          TIMES 4\n         EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3\n*\n*        CHECK THE BOTTOM OF THE EXTENT\n*\n         NI    CCHHCOMP,255-CCHHX TURN OFF THE STRADDLE FLAG\n         EX    R6,CLCEXTLO    DO THE COMPARE\n         BH    SETH1         THE FIELD IS HIGHER THAN THE VALUE\n         BE    SETEQ1        THE FIELD IS EQUAL TO THE VALUE\n         OI    CCHHCOMP,CCHHLOW+CCHHX  LOWER -  POSSIBLE STRADDLE\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHLT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    CHECKHI            NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETH1    OI    CCHHCOMP,CCHHHIGH  SET THE FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHGT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    CHECKHI            NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETEQ1   OI    CCHHCOMP,CCHHEQ   SET THE FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHEQU(R15)   GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n*\n*        CHECK THE TOP OF THE EXTENT\n*\nCHECKHI  EX    R6,CLCEXTHI   DO THE COMPARE\n         BE    SETEQ2        EQUAL, GO SET IT\n         BL    EXTSET        LOW, GO SET IT\n*\n*        THIS IS THE ONLY SLIGHTLY TRICKY PART, A STRADDLE\n*        IF THE BOTTOM OF THE EXTENT IS LOWER THAN THE VALUE AND THE\n*        TOP OF THE EXTENT IS HIGHER THAN THE VALUE, THEN THE\n*        EQ FLAG SHOULD BE SET TOO.\n*\n         OI    CCHHCOMP,CCHHHIGH  SET THE HIGH FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHGT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         TM    CCHHCOMP,CCHHX     WAS THE BOTTOM LOWER THAN THE VALUE?\n         BZ    EXTSET        NO, SKIP ON\nSETEQ2   OI    CCHHCOMP,CCHHEQ    SET THE EQ FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHEQU(R15)   GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n*\n*        FINISHED WITH THAT EXTENT, CHECK FOR MORE\n*\nEXTSET   DS    0H\n         LA    R1,1(R1)      INCREMENT THE EXTENT COUNTER\n         CR    R1,R2         CHECK THE EXTENT COUNTER\n         BNL   LIMCOPER      THAT'S ALL FOLKS\n***ABLC  TM    CCHHCOMP,CCHHHIGH+CCHHEQ+CCHHLOW  ARE THEY ALL SET? ABLC\n***ABLC  BNO   EXTNEXT       NO, CONTINUE LOOKING                  ABLC\n***ABLC                      YES, STOP NOW - ALL THE FLAGS ARE SET ABLC\n         B     EXTNEXT       CHECK ALL 1 TO 123 EXTENTS            ABLC\n*\nLIMCOPER L     R4,REFOPER    GET THE NUMERIC VALUE OF THE KEY\n         IC    R4,CCHHTAB(R4)  GET A FLAG MASK\n         EX    R4,CCHHOPER   CHECK TO SEE IF THE CONDITION IS SET\n         BZ    COMPNO        NOT THERE\n         B     COMPYES       YES\n*\n*        EXECUTED INSTRUCTIONS TO GET THE ADDRESS OF THIS EXTENT\n*\nGETEXT   LA    R3,DS1EXT1           1ST EXTENT\n         LA    R3,DS1EXT2           2ND EXTENT\n         LA    R3,DS1EXT3           3RD EXTENT\n         LA    R3,DS3EXTNT+00(R15)  4TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+10(R15)  5TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+20(R15)  6TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+30(R15)  7TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+00(R15)  8TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+10(R15)  9TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+20(R15) 10TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+30(R15) 11TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+40(R15) 12TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+50(R15) 13TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+60(R15) 14TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+70(R15) 15TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+80(R15) 16TH EXTENT                  ABL-ICF\n*\n*        ISSUE ERROR MESSAGES AND RETURN\n*\nOBT3ERR  VTOCMSG OBT3ERRM   OBTAIN ERROR MESSAGE\nCHECKOUT LA    R15,8          EXCLUDE THIS DATA SET\n         B     CHEKRET        RETURN\n*\nCHECKIN  SR    R15,R15        CLEAR THE REGISTER, PROCESS THIS DATA SET\nCHEKRET  LEAVE EQ\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BNE   GETNFND       NOT HERE, BRANCH                   ABL-EXT\n         CLC   =C'EX ',0(R6) EX (FOR EXTENTS)?                  ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         CLC   =C'EXP',0(R2) EXP (FOR EXPDT)?                   ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         SPACE 1                                                ABL-EXT\nGETNFND  DS    0H                                               ABL-EXT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n         CH    R15,H26       CHECK FOR THE END OF THE TABLE\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\nH26      DC    H'26'\n         EJECT\n*\n*        ROUTINE TO CONVERT THE OPERATOR TEXT\n*        INTO A NUMERIC VALUE\n*\nGETOPER  LA    R15,1         NUMERIC VALUE COUNTER\nGETOLOOP LR    R14,R15       GET THE NUMBER\n         SLA   R14,1         MULTIPLY BY 2\n         LA    R14,OPERS(R14)      RELOCATE IT\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?\n         BE    GETOFND       YES, RETURN THE NUMBER\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE\n         CH    R15,H7        CHECK FOR THE END\n         BL    GETOLOOP      NOT THERE YET, KEEP TRYING\n         VTOCMSG OPERERR,OPERERR2  ISSUE THE MESSAGE\n         LA    R15,1         SET THE DEFAULT OPERATOR, EQ\nGETOFND  BR    R8            THEN RETURN\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nCOMPLIM  CLC   0(0,R2),0(R1)  COMPARE KEYWORD TO VALUE\nMOVECCHH MVC   DOUBLE(0),0(R2)\nCLCEXTLO CLC   2(0,R3),0(R5)\nCLCEXTHI CLC   6(0,R3),0(R5)\nCCHHOPER TM    CCHHCOMP,0\nCCHHTAB  DC    X'0040A0206080C0'  CCHHCOMP FLAGS\nOPERS    DC    C'  EQNELTLEGTGE'\n*    FOR  EQ, NE, LT, LE, GT, GE\nCCHHEQU  DC    X'00010000010001'  CCHH EQUAL FLAGS                 ABLC\nCCHHGT   DC    X'00000000000101'  CCHH HIGH FLAGS                  ABLC\nCCHHLT   DC    X'00000001010000'  CCHH LOW FLAGS                   ABLC\nEDMASK   DC    XL16'40202020202020202020202020202120'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\n*LKTRTAB DC    XL64'00',X'04',XL192'00'                         TANSKY\nCAMSCON  CAMLST SEEK,*,*,*\nCOMPARE  CLC   0(0,R6),0(R2)  EXECUTED COMPARE\nDECTABLE EQU   *-C'A'   CONVERT EBCDIC HEX TO BINARY\n         DC    X'0A0B0C0D0E0F'\n         DC    (C'0'-C'F'-1)X'FF'  FILLER\n         DC    X'00010203040506070809'\n*\n*\n*\nH3       DC    H'3'\nH4       DC    H'4'\nH7       DC    H'7'\nH8       DC    H'8'\nH10      DC    H'10'\nH12      DC    H'12'\nZERO     DC    F'0'\nF100     DC    F'100'\nH1000    DC    H'1000'\nF127     DC    F'127'\n*\n*\n         PRINT NOGEN\n*\n*        PROGRAM MESSAGES\n*\nOBT3ERRM MSGZ  ' VTOCCHEK - ERROR IN OBTAIN FOR FORMAT 3 DSCB '\nKEYERR   MSGZ  ' VTOCCHEK - LIM, AND, OR OR SUBPARM ERROR - XXXXXX '\nCCHHLEN  MSGZ  ' VTOCCHEK - CCHH SHOULD BE 4 OR 8 HEX CHARACTERS '\nOPERERR  MSGZ  ' VTOCCHEK - OPERATOR WAS NOT EQ, NE, LT, LE, GT, OR GE'\nOPERERR2 MSGZ  '          - WILL ASSUME EQ'\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nCHEKWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMSEEK  CAMLST SEEK,*,*,*\nCAMLEN   EQU   *-CAMSEEK\n         DS    0D\nCYLH     DS    F\n         DS    X              PAD FOR CCHH\nEQ       EQU   1              EQUATES FOR OPERATOR VALUES\nNE       EQU   2\nLT       EQU   3\nLE       EQU   4\nGT       EQU   5\nGE       EQU   6\nHWORK    DS    H\nLIMVAL   DS    F\nNUMBERL  DS    F\nNUMLENL  DS    H\nFLAGNML  DS    X\nNUMKEYL  DS    X\nNUMBER1  DS    F\nNUMLEN1  DS    H\nFLAGNM1  DS    X\nNUMKEY1  DS    X\nNUMBER2  DS    F\nNUMLEN2  DS    H\nFLAGNM2  DS    X\nNUMKEY2  DS    X\nNUMBER3  DS    F\nNUMLEN3  DS    H\nFLAGNM3  DS    X\nNUMKEY3  DS    X\nREFKEY   DS    F\nREFOPER  DS    F\nREFVAL   DS    A\nREFNUM   DS    A\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPDLMINUS DC    X'00'\nCHEKDBLW DS    D\nCCHHCOMP DS    X\nCCHHHIGH EQU   X'80'\nCCHHEQ   EQU   X'40'\nCCHHLOW  EQU   X'20'\nCCHHX    EQU   X'08'\n         DS    0D\nLENWORK  EQU   *-CHEKWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCCHEO": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\"\\x00\\x92\\x08\\x0f\\x01\\x01\"o\\x11\"\\x03\\x8b\\x03W\\x00C\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1992-03-20T00:00:00", "modifydate": "2001-08-14T11:22:22", "lines": 907, "newlines": 855, "modlines": 67, "user": "SBGOLOB"}, "text": "VTOCCHEK TITLE 'VTOC COMMAND CHECK  ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND CHECK  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   CHECK THE CONDITIONS SPECIFIED ON THE VTOC COMMAND.    *\n*              SEE IF THE DATA SET PASSED SHOULD BE PROCESSED.        *\n*              THE LIMIT, ENDING, CONTAINING, CCHH, LIMIT, AND,       *\n*              AND OR KEYWORDS ARE PROCESSED BY THIS ROUTINE.         *\n*                                                                     *\n* OPERATION -  FIRST GET THE LENGTH OF THE DSNAME AND SAVE IT.        *\n*              THEN GET THE FORMAT 3 DSCB, IF ONE EXISTS.  TRY        *\n*              EACH KEYWORD TO SEE IF IT WILL EXCLUDE THE DATA        *\n*              SET FROM FURTHER PROCESSING.                           *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, FORMAT 1, 3, AND 4 DSCB'S              *\n*              FOR DSORG, RECFM, ALLOC, USED, PROT, CATLG, OR SECAL   *\n*              CALL VTOCFORM TO FORMAT THE PARMS.  USE FORMATTED DSCB *\n*                                                                     *\n* OUTPUT -     A RETURN CODE OF 0 TO CONTINUE PROCESSING OR 8 TO      *\n*              EXCLUDE THIS DATA SET.                                 *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO SUPPORT   ABL-ICF\n*           123 EXTENTS FOR VSAM DATA SETS IN AN ICF CATALOG.   ABL-ICF\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-EXT\n*           LIM(EX GT 2) TO MEAN EXTENTS (NO EXPDT).            ABL-EXT\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-049\n*           LIM(XXX ... ERROR MESSAGE                           ABL-049\n*                                                                     *\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO ALLOW    ABL-CONT\n*           CONT(123) OR CONT(.DATA)                           ABL-CONT\n*                                                                     *\n* 12/16/86- MODIFIED BY G. ALBERTELLI AT BFG TO IMPLEMENT       GLA-EXL\n*           EXLEVEL(DSNAME-LIST)                                GLA-EXL\n*                                                                     *\n* 03/20/92- MODIFIED BY A. TANSKY AT SUNGARD TO PRINT WHOLE     TANSKY\n*           DATASET NAME, EVEN IF IT HAS EMBEDDED BLANKS        TANSKY\n*                                                                     *\n* 08/09/94- MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n* 12/19/97- MODIFIED BY JOHN KALINICH AT USA LSSC TO ADD YEAR   Y2K\n*           2000 SUPPORT FOR DATES.                             Y2K\n*                                                                     *\n***********************************************************************\n         EJECT\n*        MACROS FOR CHECK ROUTINE\n*\n         MACRO\n&LABEL   VTCHL &KEY           CALL THE KEYWORD CHECK ROUTINE\n&LABEL   L     R1,SUB&KEY.OPER    GET THE OPERATOR VALUE\n         BAL   R8,GETOPER    TRANSLATE TO A NUMBER\n         ST    R15,REFOPER     SAVE IT TOO\n         LA    R1,SUB&KEY.VALU   GET THE VALUE PDL\n         ST    R1,REFVAL      SAVE THAT ADDRESS THREE\n         CLI   FLAGNM&KEY,0  HAS IT BEEN CONVERTED?\n         BNE   VTP&SYSNDX    YES, SKIP ALONG\n         MVI   FLAGNM&KEY,1  NOTE IT AS CONVERTED\n         BAL   R8,PDLNUM     GO CONVERT IT\n         ST    R15,NUMBER&KEY      SAVE THE VALUE\n         LA    R4,SUB&KEY.KEY  POINT TO THE IKJIDENT FOR THE KEYWORD\n         BAL   R8,GETKEY     CONVERT TEXT TO A NUMERIC KEY\n         STC   R15,NUMKEY&KEY  SAVE THAT NUMERIC KEY\n         LTR   R15,R15       WAS IT SUCCESSFUL?\n         BNZ   VTP&SYSNDX    YES, SKIP ALONG\n*        ISSUE A MESSAGE - A BAD LIM, AND, OR KEYWORD\n         MVC   MSGTEXT2,KEYERR  START THE ERROR MESSAGE\n         L     R1,0(R4)      POINT TO THE TEXT\n         MVC   MSGTEXT2+48(6),0(R1)  THEN ADD IT TO THE MESSAGE ABL-049\n         VTOCMSG MSGTEXT2    ISSUE THE ERROR MESSAGE\nVTP&SYSNDX DS  0H\n         SR    R1,R1         CLEAR A REGISTER\n         ICM   R1,1,NUMKEY&KEY GET THE KEYWORD VALUE\n         BZ    VTE&SYSNDX    IF NOT SET, SKIP THE EVALUATION\n         ST    R1,REFKEY      SAVE THE ADDRESS\n         LA    R1,NUMBER&KEY  GET THE ADDRESS OF CONVERTED NUMBER\n         ST    R1,REFNUM      SAVE IT'S ADDRESS\n         BAL   R8,LIMEVAL     GO EVALUATE THE EXPRESSION\nVTE&SYSNDX DS  0H\n         MEND\n         SPACE 3\n         MACRO\n&LABEL   VTANDOR &NUM         EVALUATE, THEN DO AND OR OR FUNCTION\n&LABEL   CLI   ANDOR&NUM.K+1,0  WAS THIS KEYWORD SET?\n         BE    LIMCOMP        NO, JUST CHECK THE FINAL RESULT\n         VTCHL &NUM           YES, EVALUATE\n         CLI   ANDOR&NUM.K+1,1  WAS IT AN AND ?\n         BE    VTA&SYSNDX     YES, DO THE AND\n         O     R15,LIMVAL     NO, OR IT\n         B     VTE&SYSNDX     FINISHED WITH THIS EXPRESSION\nVTA&SYSNDX N   R15,LIMVAL     AND THE EXPRESSION VALUE\nVTE&SYSNDX ST  R15,LIMVAL     SAVE THE VALUE\n         MEND\n*\n         EJECT\n         GBLC  &WIN19XX                                       Y2K DEC97\n         SPACE 2\n*    THE FOLLOWING VARIABLE DETERMINES THE 19XX DATE WINDOW.  Y2K DEC97\n*                                                             Y2K DEC97\n*    &WIN19XX IS THE START OF THE 19XX DATE WINDOW.  ANY      Y2K DEC97\n*    YEAR LESS THAN &WIN19XX WILL BE CONSIDERED A 20XX DATE.  Y2K DEC97\n*                                                             Y2K DEC97\n&WIN19XX SETC   '66'   START OF 19XX DATE WINDOW              Y2K DEC97\n*\n         SPACE 2\nVTOCCHEK ENTER 12,12          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING CHEKWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n*\n*        SEE WHAT THE FORMAT ID IS\n*\nCHEKFMT  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         CLI   FORMATK+1,0    DID HE SPECIFY VARIOUS DSCB'S\n         BNE   CHEKFMTI       YES, GO DO HIS CHECKS\nCHEKFMTI DS    0H             NOT YET PROGRAMMED\n*\n*        STANDARD IS ONLY TO ALLOW FORMAT ONES TO GO\n*\n         CLI   DS1FMTID,C'1'  IS THIS A FORMAT 1?\n         BNE   CHECKOUT       NO, EXCLUDE IT FROM FURTHER PROCESSING\n*\n*              FIRST SEE HOW BIG THE DSNAME IS\n*\n*    HERE'S THE ORIGINAL CODE WHICH STOPPED AT 1ST BLANK:       TANSKY\n*        LA    R1,DS1FMTID    POINT PAST THE DSNAME\n*        TRT   DS1DSNAM,BLKTRTAB  FIND THE FIRST BLANK\n*        SR    R1,R7          SUBTRACT TO GET THE LENGTH\n*        STH   R1,DSNLEN      SAVE THE DSNAME LENGTH\n*        LR    R3,R1          KEEP THE LENGTH FOR LATER\n*    END OF ORIGINAL CODE                                       TANSKY\n*        FIND LENGTH OF DSNAME UP TO LAST NON-BLANK             TANSKY\n         XR    R6,R6               ZERO R6                      TANSKY\n         BCTR  R6,0                R6 = -1 FOR INCREMENT        TANSKY\n         LA    R1,DS1FMTID-1       LAST CHAR IN DSNAME          TANSKY\nDSNLOOP  DS    0H                                               TANSKY\n         CLI   0(R1),C' '          BLANK?                       TANSKY\n         BNE   DSNEND                NO, WE FOUND LAST CHAR     TANSKY\n         BXH   R1,R6,DSNLOOP       TRY PREVIOUS CHARACTER       TANSKY\n*        ENTIRE DSN IS BLANK (OR 1 CHARACTER) IF WE FALL THRU   TANSKY\nDSNEND   LA    R1,1(R1)            POINT TO THE BLANK           TANSKY\n         SR    R1,R7               GET LENGTH                   TANSKY\n         BP    DSNLENOK            POSITIVE LENGTH IS OKAY      TANSKY\n         LA    R1,1                  ELSE USE LENGTH=1          TANSKY\nDSNLENOK DS    0H                                               TANSKY\n         STH   R1,DSNLEN           SAVE THE DSNAME LENGTH       TANSKY\n         LR    R3,R1               KEEP THE LENGTH FOR LATER    TANSKY\n         MVC   VTC#CCHH(8),DS1EXT1+2  INITIALIZE THE CCHH RANGE    ABLC\n*\n*        GET THE FORMAT 3 DSCB, IF IT EXISTS\n*\n         XC    FMT3,FMT3      CLEAR IT FIRST\n         LA    R2,FMT3        START OF THE FORMAT 3 AREA        ABL-ICF\n         LA    R1,DS1PTRDS    POINTER TO FIRST DSCB3            ABL-ICF\n         SPACE 1                                                ABL-ICF\nNXTFMT3  CLC   0(5,R1),=XL5'0000000000'  ANY FORMAT 3?          ABL-ICF\n         BE    FMT3NO         NO, SKIP ALONG\n*\n*        SET UP THE CAMLST\n*\n         MVC   CAMSEEK(4),CAMSCON  MOVE IN THE FIRST WORD OF CAMLST\n         ST    R1,CAMSEEK+4   SAVE IT\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,CAMSEEK+8   SAVE IT\n         ST    R2,CAMSEEK+12  SAVE THE DSCB3 START ADDRESS      ABL-ICF\n         OBTAIN CAMSEEK       GET THE DSCB\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   OBT3ERR        BAD NEWS, ISSUE THE MESSAGE\n         LA    R1,DS3PTRDS-FMT3(R2)   NEXT DSCB3 POINTER        ABL-ICF\n         LA    R2,L'FMT3(R2)          NEXT DSCB3 POSITION       ABL-ICF\n         B     NXTFMT3                                          ABL-ICF\n*\n*        PROCESS THE LEVEL KEYWORD\n*\nFMT3NO   CLI   LEVKEY+1,0     WAS LEVEL SPECIFIED?\n         BE    LEVEND         NO, SKIP ON\n         LA    R4,LEVEL       YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\nLEVNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE LEVEL\n         CR    R3,R5          COMPARE LENGTHS\n         BL    LEVINC         THIS LEVEL IS LONGER THAN DSN, NO MATCH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    LEVEND         IT MATCHES, ALLOW IT\nLEVINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTER\n         BNZ   LEVNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nLEVEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*                                                               GLA-EXL\n*        PROCESS THE EXLEVEL KEYWORD                            GLA-EXL\n*                                                               GLA-EXL\n         CLI   EXLKEY+1,0     WAS EXLEVEL SPECIFIED?            GLA-EXL\n         BE    EXLEND         NO, SKIP ON                       GLA-EXL\n         LA    R4,EXLEVEL     YES, POINT TO THE PDE             GLA-EXL\n         USING PDEDSNAM,R4    SET ADDRESSABILITY                GLA-EXL\n         LR    R2,R7          POINT TO THE START OF THE DSNAME  GLA-EXL\nEXLNEXT  SR    R5,R5          CLEAR FOR INSERT                  GLA-EXL\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH        GLA-EXL\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT       GLA-EXL\n         L     R6,PDEDSN      POINT TO THE LEVEL                GLA-EXL\n         CR    R3,R5          COMPARE LENGTHS                   GLA-EXL\n         BL    EXLINC         THIS LEVEL IS LONGER, NO MATCH    GLA-EXL\n         BCTR  R5,0           MINUS ONE FOR THE EX              GLA-EXL\n         EX    R5,COMPARE     CHECK THE LENGTHS                 GLA-EXL\n         BE    CHECKOUT       IT MATCHES, SO EXCLUDE IT         GLA-EXL\nEXLINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT LEVEL PDE POINTERGLA-EXL\n         BNZ   EXLNEXT        IF IT'S THERE, KEEP LOOKING       GLA-EXL\nEXLEND   DS    0H                                               GLA-EXL\n         DROP  R4             FINISHED WITH THE PDE             GLA-EXL\n*\n*        PROCESS THE ENDING KEYWORD\n*\n         CLI   ENDKEY+1,0     WAS ENDING SPECIFIED?\n         BE    ENDEND         NO, SKIP ON\n         LA    R4,ENDING      YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nENDNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE ENDING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    ENDINC         THIS ENDING IS LONGER THAN DSN, NO MATCH\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         AR    R2,R3          POINT TO THE END\n         SR    R2,R5          BACKUP TO COMPARE THIS LENGTH\n         BCTR  R5,0           MINUS ONE FOR THE EX\n         EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    ENDEND         IT MATCHES, ALLOW IT\nENDINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT ENDING PDE POINTER\n         BNZ   ENDNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nENDEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        PROCESS THE CONTAINING KEYWORD\n*\n         CLI   CONTAINK+1,0   WAS CONTAINING SPECIFIED?\n         BE    CONEND         NO, SKIP ON\n         LA    R4,CONTAIN     YES, POINT TO THE PDE\n         USING PDEDSNAM,R4    SET ADDRESSABILITY\nCONNEXT  SR    R5,R5          CLEAR FOR INSERT\n         ICM   R5,B'0011',PDEDSNL  GET THE DSNAME LENGTH\n         BZ    CHECKOUT       END OF THE LINE, EXCLUDE IT\n         L     R6,PDEDSN      POINT TO THE CONTAINING\n         CR    R3,R5          COMPARE LENGTHS\n         BL    CONINC         THIS CONTAIN IS LONGER THAN DSN, NO MATCH\n         LR    R1,R7          POINT TO THE START OF THE DSNAME\n         AR    R1,R3          POINT TO THE END\n         SR    R1,R5          BACKUP TO COMPARE THIS LENGTH - LAST ONE\n         LR    R2,R7          POINT TO THE START OF THE DSNAME\n         BCTR  R5,0           MINUS ONE FOR THE EX\nCONCOMP  EX    R5,COMPARE     CHECK THE LENGTHS\n         BE    CONEND         IT MATCHES, ALLOW IT\n         LA    R2,1(R2)       CHECK THE WHOLE DSNAME\n         CR    R2,R1          CHECK FOR THE END OF THE REAL DSN\n         BNH   CONCOMP        NOT THERE YET\n*ONINC   ICM   R4,B'0111',PDEDCHN GET THE NEXT CONTAINING PDE POINTER\nCONINC   ICM   R4,B'0111',9(R4)   GET NEXT CONTAINING PDE PRT  ABL-CONT\n         BNZ   CONNEXT        IF IT'S THERE, KEEP LOOKING\n         B     CHECKOUT       NO MATCHES, EXCLUDE THIS DSNAME\nCONEND   DS    0H\n         DROP  R4             FINISHED WITH THE PDE\n*\n*        NOW THE BIG MESS, CHECK FOR LIMIT, AND'S, AND OR'S\n*\n         CLI   LIMITK+1,0     WAS LIMIT SPECIFIED\n         BE    LIMEND         NO, THEN THERE CAN BE NO AND'S OR OR'S\n         NI    VTCFMTCK,255-VTCFMTCC  TURN OFF THE ROUTINE CALL FLAG\n         VTCHL L              EVALUATE THE LIMIT 1=TRUE 0=FALSE\n         ST    R15,LIMVAL     SAVE THE ANSWER\n         VTANDOR 1            CHECK AND1 OR OR1\n         VTANDOR 2            CHECK AND2 OR OR2\n         VTANDOR 3            CHECK AND3 OR OR3\nLIMCOMP  L     R15,LIMVAL     GET THE RESULT OF ALL THIS\n         LTR   R15,R15        TEST IT\n         BZ    CHECKOUT       IT GETS EXCLUDED\nLIMEND   DS    0H\n         B     CHECKIN        ALL TESTS PASSED, INCLUDE THIS ONE\n         SPACE 5\n*\n*        EVALUATION ROUTINE FOR   KEYWORD  OPER  VALUE\n*\nLIMEVAL  L     R5,REFKEY      GET THE KEYWORD VALUE\n         MH    R5,H12         MULTIPLY IT BY 12\n         A     R5,ATABTITL    THEN RELOCATE IT\n         SR    R10,R10         CLEAR THE ROUTINE POINTER\n         TM    1(R5),X'80'    IS IT A FORMATTED ITEM?\n         BO    LIMFORM        YES, GO DO IT\n         SR    R6,R6         CLEAR A REGISTER\n         IC    R6,2(R5)      GET THE OFFSET INTO VTFMT\n         IC    R10,1(R5)      GET THE ROUTINE NUMBER\n         LTR   R10,R10         SEE IF IT'S A GOOD NUMBER\n         BP    LIMEVAL1       IT'S ALL RIGHT\nLIMABEND ABEND 702,DUMP       CRASH AND BURN\nLIMEVAL1 B     *(R10)         AND GO TO IT\n         B     LIMDATE        CDATE, EXPDT, REFDT\n         B     LIMLUSE        *** DUMMY ENTRY ***\n         B     LIMFORM        FORM , USED SPACE\n         B     LIMFORM        UNUSED SPACE\n         B     LIMFORM        PCT USED\n         B     LIMEXT         EXTENTS\n         B     LIMBLREC       LRECL, BLKSZ, SEC Q\n         B     LIMCCHH        DSNAME                               ABLC\n         B     LIMCCHH       CCHH CHECKING                         ABLC\n         SPACE 5\n*\n*        PERFORM THE FORMATTED ITEM CHECKING\n*\nLIMFORM  DS    0H\n         TM    VTCFMTCK,VTCFMTCC  WAS FORMAT CALLED BEFORE FOR THIS DS\n         BO    LIMFCALD       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          NO, CALL IT TO GET THE ITEMS\n         OI    VTCFMTCK,VTCFMTCC+VTCFMTCD  THEN SET THE SWITCHES\nLIMFCALD SR    R2,R2          CLEAR A WORK REG\n         A     R6,FORMATAD   RELOCATE THE BLOCK\n         B     *+4(R10)         AND GO TO IT\n         B     LIMFORMA      FORMATTED ITEM\n         B     LIMABEND       CDATE, EXPDT\n         B     LIMABEND       LAST USE DATE\n         B     LIMALLOC       ALLOC, USED SPACE\n         B     LIMUNUSD       UNUSED SPACE\n         B     LIMPCT         PCT USED\nLIMFORMA DS    0H\n         IC    R2,2(R5)       GET THE OFFSET IN VTFMT\n         A     R2,FORMATAD    THEN RELOCATE IT\n         L     R4,REFVAL      GET THE VALUE PDE\n         LH    R3,4(R4)       GET THE LENGTH OF THE STRING\n         L     R1,0(R4)       AND ITS ADDRESS\n*\n*        DO THE ACTUAL COMPARE\n*\n         BCTR  R3,0           DOWN ONE FOR AN EX\n         EX    R3,COMPLIM     COMPARE AS SPECIFIED\nCOMPDONE DS    0H             GET THE OPERATOR ADDRESS\n         BL    COMPLOW        CHECK THE OPERATOR, VALUE LESS THAN ITEM\n         BE    COMPEQ         CHECK THE OPERATOR, KEYWORD EQUALS VALUE\n*                             KEYWORD IS GREATER THAN THE VALUE\nCOMPHI   CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GT       ALSO FOR GT\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        HIGH SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS EQUAL TO THE VALUE\nCOMPEQ   CLI   REFOPER+3,EQ       WAS OPERATOR EQ\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       ALSO FOR LE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,GE       AND FOR GE\n         BE    COMPYES        EQ   SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*                             KEYWORD IS LESS THAN THE VALUE\nCOMPLOW  CLI   REFOPER+3,NE       WAS OPERATOR NE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LT       ALSO FOR LT\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         CLI   REFOPER+3,LE       AND FOR LE\n         BE    COMPYES        LOW  SATISFIES THE EXPRESSION\n         B     COMPNO         THIS ONE DOESN'T FIT\n*\n*        IT FITS OR IT DOESN'T\n*\nCOMPYES  LA    R15,1          SET A TRUE VALUE\n         BR    R8             THEN RETURN\nCOMPNO   SR    R15,R15        SET A FALSE VALUE\n         BR    R8             THEN RETURN\n*\n*        SPECIAL ROUTINES TO CHECK NON-FORMATTED ITEMS\n*\nLIMDATE  DS    0H\n*\n*        COMPARE DATES\n*\n         LA    R14,DS1CREDT  POINT TO CREATION DATE\n         CLI   REFKEY+3,CDATE      IS THAT IT?\n         BE    LIMDGET       YES, THIS IS IT\n         LA    R14,DS1EXPDT  POINT TO EXPIRATION DATE\n         CLI   REFKEY+3,EXPDT      IS THAT IT?\n         BE    LIMDGET       YES, THIS IS IT\n         LA    R14,DS1REFD   NO, USE REFERENCE DATE\nLIMDGET  SR    R15,R15       CLEAR A WORK REG\n         IC    R15,0(R14)    GET THE YEAR\n         MH    R15,H1000     TIMES 1000\n         SR    R1,R1         CLEAR ANOTHER WORK REG\n         ICM   R1,3,1(R14)    GET THE DAYS\n         AR    R15,R1        PUT THE DATE TOGETHER\n         L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE ITSELF\n         C     R1,=A(&WIN19XX*1000) BELOW 19XX WINDOW?        Y2K DEC97\n         BNL   *+8                  NO, THEN 19XX             Y2K DEC97\n         A     R1,=F'100000'        YES, THEN 20XX            Y2K DEC97\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMLUSE  DS    0H\n*\n*        LAST USE DATE\n*\n         SR    R14,R14       CLEAR THE DATE\n         CLC   ZERO,75(R7)   CHECK FOR NO DATA\n         BE    LIMLUCMP      RIGHT, SKIP ON\n         MVC   CHEKDBLW+5(3),75(R7)  MOVE IN THE LAST USE DATE\n         CVB   R14,CHEKDBLW  CONVERT IT TO BINARY\nLIMLUCMP L     R1,REFNUM     GET THE ADDRESS OF THE VALUE\n         L     R1,0(R1)      GET THE VALUE\n         CR    R14,R1        DO THE COMPARE\n         B     COMPDONE      THEN CHASE DOWN THE OPERANDS\nLIMEXT   DS    0H\n*\n*        EXTENTS\n*\n         L     R1,REFNUM     GET THE COMPARE VALUE ADDRESS\n         CLC   DS1NOEPV,3(R1)        COMPARE THEM\n         B     COMPDONE      GO CHECK OPERANDS\nLIMBLREC DS    0H\n*\n*        LRECL, BLKSZ, SECQ\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE COMPARE VALUE\n         L     R15,0(R1)      THEN GET THE VALUE ITSELF\n         CLI   REFKEY+3,BLKSZ      BLOCK SIZE?\n         BNE   LIMB1         NO, KEEP CHECKING\n         LH    R1,DS1BLKL    COMPARE TO THE BLOCK SIZE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO SIFT THROUGH THE OPERANDS\nLIMB1    CLI   REFKEY+3,LRECL  LOGICAL RECORD LENGTH\n         BNE   LIMB2         NO, KEEP GOING\n         LH    R1,DS1LRECL   COMPARE TO THE LRECL\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      GO CHECK THE OPERANDS\nLIMB2    MVC   HWORK,DS1SCALO+2 GET THE SECONDARY QUANTITY\n         LH    R1,HWORK      DO THE COMPARE\n         CR    R1,R15        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\n*\n*        SPACE CHECKING ROUTINES\n*\nLIMALLOC DS    0H\n*\n*        ALLOC AND USED\n*\n         L     R1,REFNUM     GET THE ADDRESS OF THE CONVERTED NUMBER\n         L     R1,0(R1)      GET THE VALUE\n         L     R15,0(R6)     GET THE AMOUNT\n         CR    R15,R1        COMPARE THEM\n         B     COMPDONE      THEN CHECK THE OPERANDS\nLIMUNUSD DS    0H\n*\n*        UNUSED\n*\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         ICM   R14,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMUNUAL      IF MINUS, WE DON'T KNOW\n         L     R14,VTFALLOC  GET ALLOC\n         S     R14,VTFUSED   MINUS THE AMOUNT USED\nLIMUNUAL L     R1,REFNUM     GET THE ENTERED VALUE\n         L     R1,0(R1)      NOW ITS VALUE FOR REAL\n         CR    R14,R1        COMPARE THE VALUES\n         B     COMPDONE      THEN GO CHECK THE OPERANDS\nLIMPCT   DS    0H\n*\n*        PER CENT\n*\n         L     R6,FORMATAD   POINT TO THE FORMATTED VTOC\n         USING VTFMT,R6      SET ADDRESSABILITY\n         SR    R14,R14       CLEAR A REGISTER\n         ICM   R15,15,VTFUSED      GET THE AMOUNT USED\n         BM    LIMP100       IF UNKNOWN USED, SET 100 PER CENT\n         CLC   VTFALLOC,ZERO ZERO ALLOCATED SPACE?\n         BNE   LIMPCTOK      NO, CONTINUE\n         CLC   VTFUSED,ZERO  ZERO USED SPACE?\n         BE    LIMPCOMP      YES, PCT IS ZERO\n*              ZERO ALLOCATED, NONZERO USED, INCLUDE THIS ONE\n         B     COMPYES\nLIMP100  LA    R15,100       SET UP 100 PER CENT\n         B     LIMPCOMP      GO COMPARE\nLIMPCTOK M     R14,F100      MULTIPLY BY 100 PERCENT\n         D     R14,VTFALLOC  DIVIDE BY THE ALLOCATION\nLIMPCOMP L     R1,REFNUM     GET THE VALUE ADDRESS\n         L     R1,0(R1)      THEN THE VALUE\n         CR    R15,R1        THEN COMPARE THEM\n         B     COMPDONE      THEN GO SIFT THROUGH THE OPERANDS\n*\n*        CCHH CHECKING IS NOT QUITE STANDARD BECAUSE THERE MAY\n*        MAY BE UP TO 16 EXTENTS TO COMPARE.  THE DATA MAY BE\n*        CC OR CCHH FORMATS.  THE DATA SET MAY BE EQUAL TO,\n*        LESS THAN, AND GREATER THAN ANY PARTICULAR VALUE.\n*\nLIMCCHH  DS    0H\n*\n*        FIRST SEE IF THE CCHH WAS CONVERTED\n*              CONVERT IT IF NOT, SKIP IF IT'S DONE\n*\n         L     R5,REFNUM     GET THE ADDRESS OF THE COMPARISON VALUE\n         L     R4,0(R5)      GET THE VALUE\n         ICM   R6,3,4(R5)    GET THE COMPARE LENGTH\n         BP    LIMCSET       IF IT'S SET, THE CONVERSION IS DONE\n*                      IT WASN'T SET, CONVERT FROM CHARS TO BINARY\n         L     R1,REFVAL     GET THE ADDRESS OF THE IKJIDENT\n         L     R2,0(R1)      POINT TO THE TEXT\n         LH    R3,4(R1)      GET THE LENGTH OF THE TEXT\n*        IT SHOULD BE 4 OR 8 CHARACTERS\n         XC    DOUBLE,DOUBLE CLEAR OUT A PLACE TO WORK\n         CH    R3,H4         IS IT A CYLINDER ONLY?\n         BH    LIMCCON2      NO, TRY FOR A CCHH\n         BE    LIMCCON1      YES, JUST CONVERT IT\n         VTOCMSG CCHHLEN     LESS THAN FOUR CHARS, ISSUE A MSG\nLIMCCON1 LA    R6,1          SET THE COMPARE LENGTH\n         B     LIMCMOVE      GO MOVE IT IN\nLIMCCON2 LA    R6,3          SET THE COMPARE LENGTH\n         CH    R3,H8         WAS IT A CCHH?\n         BE    LIMCMOVE      YES, JUST THE RIGHT LENGTH\n         VTOCMSG CCHHLEN     WARN THE PERSON\n         CH    R3,H8         CHECK AGAIN\n         BL    LIMCMOVE      IS IT OVER 8 CHARS?\n         LH    R3,H8         YES, SET IT FOR THE MAX - IGNORE RR\nLIMCMOVE BCTR  R3,0          MINUS ONE FOR THE EX\n         EX    R3,MOVECCHH   MOVE IN THE CHARS\n         TR    DOUBLE,DECTABLE TRANSLATE HEX EBCDIC TO HEX BINARY\n         PACK  CYLH(5),DOUBLE(9)  SQUISH OUT THE ZONES\n         L     R4,CYLH       GET THE CCHH\n         ST    R4,0(R5)      SAVE IT FOR LATER\n         STH   R6,4(R5)      SAVE THE LENGTH TOO\nLIMCSET  DS    0H            THE NUMBER IS CONVERTED\n*\n*        COMPARE THE EXTENTS TO THE CCHH VALUE.\n*        ANY EXTENT MAY BE LT, EQ, AND GT A PARTICULAR\n*        VALUE, AND ALL THE EXTENTS MUST BE CHECKED.\n*\n         MVI   CCHHCOMP,0    CLEAR THE FLAGS\n         SR    R2,R2         CLEAR A REG FOR AN EXTENT COUNTER\n         ICM   R2,1,DS1NOEPV GET THE NUMBER OF EXTENTS\n         BZ    COMPNO        NO EXTENTS, JUST GO SEE\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n         SR    R1,R1         FIRST EXTENT\nEXTNEXT  LR    R14,R1                                           ABL-ICF\n         S     R14,=F'3'                                        ABL-ICF\n         SRDA  R14,32                                           ABL-ICF\n         D     R14,=F'13'    (EXTENT-3) / 13                    ABL-ICF\n         LR    R14,R15       EXTENT TABLE IN USE                ABL-ICF\n         MH    R14,=H'13'                                       ABL-ICF\n         MH    R15,=H'148'                                      ABL-ICF\n         LR    R3,R1         EXTENT - ((EXTENT-3) / 13) * 13    ABL-ICF\n         SR    R3,R14        EXTENT INSTRUCTION ADDRESS         ABL-ICF\n         SLL   R3,2          TIMES 4\n         EX    R0,GETEXT(R3) GET THE EXTENT ADDRESS INTO R3\n*\n*        CHECK THE BOTTOM OF THE EXTENT\n*\n         NI    CCHHCOMP,255-CCHHX TURN OFF THE STRADDLE FLAG\n         EX    R6,CLCEXTLO    DO THE COMPARE\n         BH    SETH1         THE FIELD IS HIGHER THAN THE VALUE\n         BE    SETEQ1        THE FIELD IS EQUAL TO THE VALUE\n         OI    CCHHCOMP,CCHHLOW+CCHHX  LOWER -  POSSIBLE STRADDLE\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHLT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    CHECKHI            NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETH1    OI    CCHHCOMP,CCHHHIGH  SET THE FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHGT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    CHECKHI            NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         B     CHECKHI       GO CHECK THE TOP OF THIS EXTENT\nSETEQ1   OI    CCHHCOMP,CCHHEQ   SET THE FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHEQU(R15)   GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n*\n*        CHECK THE TOP OF THE EXTENT\n*\nCHECKHI  EX    R6,CLCEXTHI   DO THE COMPARE\n         BE    SETEQ2        EQUAL, GO SET IT\n         BL    EXTSET        LOW, GO SET IT\n*\n*        THIS IS THE ONLY SLIGHTLY TRICKY PART, A STRADDLE\n*        IF THE BOTTOM OF THE EXTENT IS LOWER THAN THE VALUE AND THE\n*        TOP OF THE EXTENT IS HIGHER THAN THE VALUE, THEN THE\n*        EQ FLAG SHOULD BE SET TOO.\n*\n         OI    CCHHCOMP,CCHHHIGH  SET THE HIGH FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHGT(R15)    GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n         TM    CCHHCOMP,CCHHX     WAS THE BOTTOM LOWER THAN THE VALUE?\n         BZ    EXTSET        NO, SKIP ON\nSETEQ2   OI    CCHHCOMP,CCHHEQ    SET THE EQ FLAG\n         L     R15,REFOPER        NUMERIC VALUE OF THE KEY         ABLC\n         IC    R15,CCHHEQU(R15)   GET A FLAG MASK                  ABLC\n         LTR   R15,R15            SAME CONDITION?                  ABLC\n         BZ    *+10               NO, BRANCH                       ABLC\n         MVC   VTC#CCHH(8),2(R3)  GET THIS CCHH RANGE              ABLC\n*\n*        FINISHED WITH THAT EXTENT, CHECK FOR MORE\n*\nEXTSET   DS    0H\n         LA    R1,1(R1)      INCREMENT THE EXTENT COUNTER\n         CR    R1,R2         CHECK THE EXTENT COUNTER\n         BNL   LIMCOPER      THAT'S ALL FOLKS\n***ABLC  TM    CCHHCOMP,CCHHHIGH+CCHHEQ+CCHHLOW  ARE THEY ALL SET? ABLC\n***ABLC  BNO   EXTNEXT       NO, CONTINUE LOOKING                  ABLC\n***ABLC                      YES, STOP NOW - ALL THE FLAGS ARE SET ABLC\n         B     EXTNEXT       CHECK ALL 1 TO 123 EXTENTS            ABLC\n*\nLIMCOPER L     R4,REFOPER    GET THE NUMERIC VALUE OF THE KEY\n         IC    R4,CCHHTAB(R4)  GET A FLAG MASK\n         EX    R4,CCHHOPER   CHECK TO SEE IF THE CONDITION IS SET\n         BZ    COMPNO        NOT THERE\n         B     COMPYES       YES\n*\n*        EXECUTED INSTRUCTIONS TO GET THE ADDRESS OF THIS EXTENT\n*\nGETEXT   LA    R3,DS1EXT1           1ST EXTENT\n         LA    R3,DS1EXT2           2ND EXTENT\n         LA    R3,DS1EXT3           3RD EXTENT\n         LA    R3,DS3EXTNT+00(R15)  4TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+10(R15)  5TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+20(R15)  6TH EXTENT                  ABL-ICF\n         LA    R3,DS3EXTNT+30(R15)  7TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+00(R15)  8TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+10(R15)  9TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+20(R15) 10TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+30(R15) 11TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+40(R15) 12TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+50(R15) 13TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+60(R15) 14TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+70(R15) 15TH EXTENT                  ABL-ICF\n         LA    R3,DS3ADEXT+80(R15) 16TH EXTENT                  ABL-ICF\n*\n*        ISSUE ERROR MESSAGES AND RETURN\n*\nOBT3ERR  VTOCMSG OBT3ERRM   OBTAIN ERROR MESSAGE\nCHECKOUT LA    R15,8          EXCLUDE THIS DATA SET\n         B     CHEKRET        RETURN\n*\nCHECKIN  SR    R15,R15        CLEAR THE REGISTER, PROCESS THIS DATA SET\nCHEKRET  LEAVE EQ\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BNE   GETNFND       NOT HERE, BRANCH                   ABL-EXT\n         CLC   =C'EX ',0(R6) EX (FOR EXTENTS)?                  ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         CLC   =C'EXP',0(R2) EXP (FOR EXPDT)?                   ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         SPACE 1                                                ABL-EXT\nGETNFND  DS    0H                                               ABL-EXT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n         CH    R15,H26       CHECK FOR THE END OF THE TABLE\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\nH26      DC    H'26'\n         EJECT\n*\n*        ROUTINE TO CONVERT THE OPERATOR TEXT\n*        INTO A NUMERIC VALUE\n*\nGETOPER  LA    R15,1         NUMERIC VALUE COUNTER\nGETOLOOP LR    R14,R15       GET THE NUMBER\n         SLA   R14,1         MULTIPLY BY 2\n         LA    R14,OPERS(R14)      RELOCATE IT\n         CLC   0(2,R14),0(R1)      IS THIS THE TEXT?\n         BE    GETOFND       YES, RETURN THE NUMBER\n         LA    R15,1(R15)    NO, TRY THE NEXT ONE\n         CH    R15,H7        CHECK FOR THE END\n         BL    GETOLOOP      NOT THERE YET, KEEP TRYING\n         VTOCMSG OPERERR,OPERERR2  ISSUE THE MESSAGE\n         LA    R15,1         SET THE DEFAULT OPERATOR, EQ\nGETOFND  BR    R8            THEN RETURN\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nCOMPLIM  CLC   0(0,R2),0(R1)  COMPARE KEYWORD TO VALUE\nMOVECCHH MVC   DOUBLE(0),0(R2)\nCLCEXTLO CLC   2(0,R3),0(R5)\nCLCEXTHI CLC   6(0,R3),0(R5)\nCCHHOPER TM    CCHHCOMP,0\nCCHHTAB  DC    X'0040A0206080C0'  CCHHCOMP FLAGS\nOPERS    DC    C'  EQNELTLEGTGE'\n*    FOR  EQ, NE, LT, LE, GT, GE\nCCHHEQU  DC    X'00010000010001'  CCHH EQUAL FLAGS                 ABLC\nCCHHGT   DC    X'00000000000101'  CCHH HIGH FLAGS                  ABLC\nCCHHLT   DC    X'00000001010000'  CCHH LOW FLAGS                   ABLC\nEDMASK   DC    XL16'40202020202020202020202020202120'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\n*LKTRTAB DC    XL64'00',X'04',XL192'00'                         TANSKY\nCAMSCON  CAMLST SEEK,*,*,*\nCOMPARE  CLC   0(0,R6),0(R2)  EXECUTED COMPARE\nDECTABLE EQU   *-C'A'   CONVERT EBCDIC HEX TO BINARY\n         DC    X'0A0B0C0D0E0F'\n         DC    (C'0'-C'F'-1)X'FF'  FILLER\n         DC    X'00010203040506070809'\n*\n*\n*\nH3       DC    H'3'\nH4       DC    H'4'\nH7       DC    H'7'\nH8       DC    H'8'\nH10      DC    H'10'\nH12      DC    H'12'\nZERO     DC    F'0'\nF100     DC    F'100'\nH1000    DC    H'1000'\nF127     DC    F'127'\n*\n*\n         PRINT NOGEN\n*\n*        PROGRAM MESSAGES\n*\nOBT3ERRM MSGZ  ' VTOCCHEK - ERROR IN OBTAIN FOR FORMAT 3 DSCB '\nKEYERR   MSGZ  ' VTOCCHEK - LIM, AND, OR OR SUBPARM ERROR - XXXXXX '\nCCHHLEN  MSGZ  ' VTOCCHEK - CCHH SHOULD BE 4 OR 8 HEX CHARACTERS '\nOPERERR  MSGZ  ' VTOCCHEK - OPERATOR WAS NOT EQ, NE, LT, LE, GT, OR GE'\nOPERERR2 MSGZ  '          - WILL ASSUME EQ'\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nCHEKWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMSEEK  CAMLST SEEK,*,*,*\nCAMLEN   EQU   *-CAMSEEK\n         DS    0D\nCYLH     DS    F\n         DS    X              PAD FOR CCHH\nEQ       EQU   1              EQUATES FOR OPERATOR VALUES\nNE       EQU   2\nLT       EQU   3\nLE       EQU   4\nGT       EQU   5\nGE       EQU   6\nHWORK    DS    H\nLIMVAL   DS    F\nNUMBERL  DS    F\nNUMLENL  DS    H\nFLAGNML  DS    X\nNUMKEYL  DS    X\nNUMBER1  DS    F\nNUMLEN1  DS    H\nFLAGNM1  DS    X\nNUMKEY1  DS    X\nNUMBER2  DS    F\nNUMLEN2  DS    H\nFLAGNM2  DS    X\nNUMKEY2  DS    X\nNUMBER3  DS    F\nNUMLEN3  DS    H\nFLAGNM3  DS    X\nNUMKEY3  DS    X\nREFKEY   DS    F\nREFOPER  DS    F\nREFVAL   DS    A\nREFNUM   DS    A\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPDLMINUS DC    X'00'\nCHEKDBLW DS    D\nCCHHCOMP DS    X\nCCHHHIGH EQU   X'80'\nCCHHEQ   EQU   X'40'\nCCHHLOW  EQU   X'20'\nCCHHX    EQU   X'08'\n         DS    0D\nLENWORK  EQU   *-CHEKWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCCMD2": {"ttr": 5127, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\x08_\\x00\\x92\\x08o\\x13\"\\x00u\\x00u\\x00u\\xe5\\xc7\\xc3\\xc1\\xd9\\xe3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "1992-03-26T13:22:00", "lines": 117, "newlines": 117, "modlines": 117, "user": "VGCART"}, "text": "PROC 0 DEBUG\n CONTROL NOLIST NOFLUSH NOMSG NOPROMPT\n IF &DEBUG NE THEN CONTROL LIST NOFLUSH MSG CONLIST SYMLIST PROMPT\n IF &SYSPREF EQ &STR() THEN +\n   SET DSPRFX = &SYSUID\n ELSE +\n   SET DSPRFX = &SYSPREF\n ISPEXEC CONTROL ERRORS RETURN\n SET AOR1 = &STR(AND)\n SET AOR2 = &STR(AND)\n SET AOR3 = &STR(AND)\nRESTART: +\n ERROR OFF\n ISPEXEC DISPLAY PANEL(VTOC02)\n IF &LASTCC = 8 THEN EXIT\n/*  SET STDOTH = &STR(PRINT(REP (EXP PASS)))   */\n SET STDOTH =\n FREE F(VTOCOUT)\n SET LASTCC = 0\n SET MAXCC = 0\n SET HOLD = &STR(NOHOLD)\n IF &C1 EQ Q THEN SET HOLD = &STR(HOLD)\n IF &DEST =  THEN SET DEST2 =\n ELSE SET DEST2 = &STR(DEST(&DEST))\n IF &VOLLIST EQ &STR() THEN SET VOLLIST = &STR(TSOS01)\n SET NUM = 1\n SET SWITCH = 0\n DO WHILE &SWITCH = 0\n   LISTDSI '&DSPRFX..TEMP&NUM..VTOCLIST' NORECALL\n   IF &LASTCC >= 4 AND &SYSREASON \u00ac= 9 THEN SET SWITCH = 1\n   ELSE DO\n     SET NUM = &NUM + 1\n     IF &NUM GT 12 THEN DO\n       SET &ZERRMSG = &STR(ALL &DSPRFX..TEMP#.VTOCLIST DATASETS FULL)\n       ISPEXEC DISPLAY MSG(&ZERRMSG)\n       EXIT CODE(12)\n       END\n     END\n   END\n ERROR EXIT CODE(20)\n IF &P EQ P THEN ALLOC F(VTOCOUT) SYSOUT(&C1) &HOLD &DEST2\n ELSE ALLOC F(VTOCOUT) DA('&DSPRFX..TEMP&NUM..VTOCLIST') +\n      CATALOG SPACE(5 5) +\n      TRACKS NEW\n ERROR OFF\n ERROR DO\n   ERROR OFF\n   FREE F(VTOCOUT) DEL\n   EXIT\n   END\n ATTN  DO\n   ERROR OFF\n   FREE F(VTOCOUT) DEL\n   END\n IF &LEVEL NE &STR( ) THEN +\n   SET VLEVEL = &STR(LEVEL(&LEVEL))\n ELSE +\n   SET VLEVEL = &STR()\n IF &EXLEVEL NE &STR( ) THEN +\n   SET VEXLEVEL = &STR(EXLEVEL(&EXLEVEL))\n ELSE +\n   SET VEXLEVEL = &STR()\n IF &CONTAIN NE &STR( ) THEN +\n   SET VCONTAIN = &STR(CONTAINING(&CONTAIN))\n ELSE +\n   SET VCONTAIN = &STR()\n IF &ENDING NE &STR( ) THEN +\n    SET VENDING = &STR(ENDING(&ENDING))\n ELSE +\n    SET VENDING = &STR()\n IF &SRTFLDS NE &STR( ) THEN +\n   SET VSRTFLDS = &STR(SORT(&SRTFLDS))\n ELSE +\n   SET VSRTFLDS = &STR()\n IF &SRTFLDS EQ &STR(NOSORT) THEN +\n   SET VSRTFLDS = &STR(NOSORT)\n SET VLIMIT = &STR()\n SET VAND1 = &STR()\n SET VAND2 = &STR()\n SET VAND3 = &STR()\n IF &KEYWD  NE &STR( ) THEN +\n     SET VLIMIT = &STR(LIMIT(&STR(&KEYWD) &STR(&OP) &STR(&VALUE)))\n IF &KEYWD1 NE &STR( ) THEN +\n     SET VAND1 = &STR(&AOR1.1(&STR(&KEYWD1) &STR(&OP1) &STR(&VALUE1)))\n IF &KEYWD2 NE &STR( ) THEN +\n     SET VAND2 = &STR(&AOR2.2(&STR(&KEYWD2) &STR(&OP2) &STR(&VALUE2)))\n IF &KEYWD3 NE &STR( ) THEN +\n     SET VAND3 = &STR(&AOR3.3(&STR(&KEYWD3) &STR(&OP3) &STR(&VALUE3)))\n CONTROL MSG PROMPT\n IF    \u00ac= &SUBSTR(1,&OTHER ) THEN SET USEOTH = &STR(&OTHER)\n ELSE  SET USEOTH = &STR(&STDOTH)\n VTOCAR2 &VOLLIST HEADING('1 VTOC LIST OF &VOLLIST VOLUME(S)') +\n  &VLEVEL +\n  &VEXLEVEL +\n  &VCONTAIN +\n  &VENDING +\n  &VSRTFLDS +\n  &VLIMIT +\n  &VAND1 +\n  &VAND2 +\n  &VAND3 +\n  &USEOTH\n CONTROL NOMSG NOPROMPT\n FREE F(VTOCOUT)\n IF &P NE P THEN  ISPEXEC BROWSE DATASET('&DSPRFX..TEMP&NUM..VTOCLIST')\n IF &P EQ   THEN +\n   DELETE  '&DSPRFX..TEMP&NUM..VTOCLIST'\n IF &P EQ K THEN DO\n   CONTROL MSG\n   RLSE  '&DSPRFX..TEMP&NUM..VTOCLIST'\n   WRITE &DSPRFX..TEMP&NUM..VTOCLIST HAS BEEN SAVED\n   CONTROL NOMSG\n END\n ERROR OFF\n ATTN OFF\n GOTO RESTART\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCENQ": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x16\\x01\\x01!_\\x01\\x10\\x13\\x8f\\x13V\\x00\\xdd\\x00\\xce\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2001-08-03T00:00:00", "modifydate": "2010-05-18T13:56:16", "lines": 221, "newlines": 206, "modlines": 0, "user": "TRIDJK"}, "text": "         EJECT ,\n***********************************************************************\n* THIS CODE WAS COBBLED UP FROM VARIOUS EXISTING PROGRAMS (SEE FILE   *\n* 172 OF THE CBT TAPE) IN ORDER TO TEST WHETHER AN ENQUEUE EXISTS     *\n* AGAINST THE DATASET UNDER THE SYSDSN MAJOR NAME. IN OTHER WORDS,    *\n* IS THE FILE IN USE?                                                 *\n*                                                                     *\n* WRITTEN BY DAVID CARTWRIGHT AT AGCO UK LTD AUGUST 2001              *\n*                                                                     *\n* 29AUG01 DHC COUNT NO CATLG ENTRIES AS ERROR, NOT 0C4                *\n*                                                                     *\n* 18MAY10 SKIP CLUSTER NAME CATALOG SEARCH FOR ICF CATALOGS   DRK MAY10\n*         AND SYS1.VVDS.VVOLUME DATA SETS                     DRK MAY10\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLI   ENQK+1,0       SHOULD WE CHECK FOR USERS?\n         BE    ENQEND         NO, SKIP PAST IT\n         SR    R4,R4               CLEAR A FULLWORD\n         ST    R4,GQTOKEN          RESET TOKEN POINTER\n         LA    R4,DS1DSNAM         POINT TO THE DSNAME\n         LH    R6,DSNLEN           GET LENGTH OF NAME\n         CLC   VTFDSORG,=CL3'VS '  IS IT VSAM?\n         BNE   ENQFIND             NO, GO PROCESS IT\n         TM    DS1OPTCD,DS1OPTBC   ICF CATALOG?               DRK MAY10\n         BO    ENQFIND             YES, GO PROCESS IT         DRK MAY10\n         CLC   DS1DSNAM(9),=CL9'SYS1.VVDS'  VVDS?             DRK MAY10\n         BE    ENQFIND             YES, GO PROCESS IT         DRK MAY10\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        FIND DATA SETS ASSOCIATED WITH THIS ENTITY IN ORDER TO       *\n*        FIND THE CLUSTER NAME FOR VSAM DATASETS.                     *\n*                                                                     *\n*        CALL SVC 26 TO RETURN CLUSTER ASSOCIATIONS                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         XC    CTGPL2,CTGPL2       ZERO PARM LIST\n         MVI   CTGPL2,B'00000110'  SET CTGOPTN1\n         MVI   CTGPL2+1,B'01000001' SET CTGOPTN2\n         MVI   CTGPL2+2,B'10000001' SET CTGOPTN3\n         LA    R1,DS1DSNAM         LOAD ADDRESS OF NAME\n         ST    R1,CTGPL2+4         SET CTGENT\n         L     R0,SS26WRK          LOAD LENGTH OF WORK AREA\n         L     R15,AS26WRK         LOAD ADDRESS OF SVC26 WORK AREA\n         STH   R0,0(R15)           SAVE LENGTH AT START OF WORK AREA\n         ST    R15,CTGPL2+12       SET CTGWKA\n         MVI   CTGPL2+16,B'00100001' SET CTGOPTNS\n         LA    R15,OPTNUM          LOAD NUMBER OF OPTIONS\n         STC   R15,CTGPL2+19       SET CTGNOFLD\n         LA    R14,OPTNLIST        LOAD ADDRESS OF OPTION LIST\n         LA    R1,CTGPL2+28        SAVE IN CTGFIELD\n         LA    R2,OPT1             LOAD ADDRESS OF OPTION NAME LIST\nOPTLOOP  XC    0(24,R14),0(R14)    ZERO THE ENTRY\n         MVI   0(R14),X'01'        SET FIRST FIELD\n         ST    R2,8(R14)           SET ADDRESS OF OPTION NAME\n         ST    R14,0(R1)           SAVE OPTNLIST ADDRESS IN CTGPL\n         LA    R1,4(R1)            POINT TO NEXT OPTNLIST ADDRESS\n         LA    R14,24(R14)         POINT TO NEXT ENTRY IN OPTION LIST\n         LA    R2,8(R2)            POINT TO NEXT OPTION NAME\n         BCT   R15,OPTLOOP         LOOP\n         SPACE 3\nDOS26    LA    R1,CTGPL2           LOAD ADDRESS OF WORK AREA\n         SVC   26                  CALL CATALOG SEARCH FOR ENTITY\n         SPACE 1\n         LTR   R15,R15             TEST RETURN\n         BZ    OPTPROC             GOOD, PROCESS OPTION LIST\n         CLI   CATK+1,0            HAVE WE ALREADY CHECKED THE CATALOG?\n         BE    OPTERR              NO, SO IT'S AN ERROR\n         CLI   VTFCATLG,C'N'       DID WE FIND IT UNCAT\n         BNE   OPTERR              NO, SO SUPERLOCATE ERROR\n         MVI   VTFENQ,C'N'         UNCATALOGED CLUSTER CANNOT BE IN USE\n         B     ENQEND              SKIP ERROR MESSAGE\nOPTERR   DS    0H                  PROBLEM IN SUPERLOCATE CODE\n*        MVI   VTFENQ,C'?'         SHOW WE CANNOT FIND ENQ STATUS\n         MVI   VTFENQ,C'N'         UNCATALOGED CLUSTER CANNOT BE IN USE\n         VTOCMSG MSGCAT            ISSUE A MESSAGE\n         B     ENQEND              THEN GIVE UP\n         SPACE 2\nOPTPROC  DS    0H                  FIND CLUSTER NAME\n         ICM   R4,B'1111',OPTNLIST+20 LOAD ADDRESS OF ENTRY TYPE\n         BZ    OPTERR              NONE, ERROR\n         CLI   0(R4),C'C'          CLUSTER NAME SAME AS ENTRY?\n         BE    GETCLASS            YES, USE THAT NAME\n         ICM   R4,B'1111',OPTNLIST+68  GET LIST POINTER\n         L     R15,OPTNLIST+64     GET LENGTH OF LIST\n         SR    R14,R14             CLEAR EVEN REGISTER\n         D     R14,=F'45'          DIVIDE BY LENGTH OF EACH ENTRY\n         LTR   R6,R15              USE COUNT OF ENTRIES\n         BZ    OPTERR              NONE, ERROR\nGETCLLUP DS    0H                  LOOP THROUGH LIST\n         CLI   0(R4),C'C'          TEST FOR CLUSTER\n         BE    GETCLASS            FOUND THE CLUSTER\n         LA    R4,45(,R4)          ELSE INCREMENT THE POINTER\n         BCT   R6,GETCLLUP         AND GO ROUND AGAIN\n         BZ    OPTERR              NONE, ERROR\n         SPACE 1\nGETCLASS DS    0H                  FOUND CLUSTER, SEE IF IT IS IN USE\n         LA    R4,1(R4)            POINT AT CLUSTERNAME\n         LR    R1,R4               COPY THAT ADDRESS\n         SR    R6,R6               CLEAR COUNTER\n         LA    R2,44               SET MAXIMUM LENGTH\n         SPACE 1\nLENGTH1  DS    0H                  EXAMINE EACH BYTE\n         CLI   0(R1),X'40'         IS IT BLANK?\n         BE    LENGTH2             YES, IS LAST CHARACTER\n         LA    R1,1(,R1)           POINT AT NEXT CHARACTER\n         LA    R6,1(,R6)           INCREMENT COUNTER\n         BCT   R2,LENGTH1          LOOP ROUND\n         SPACE 1\nLENGTH2  DS    0H                  FOUND LENGTH OF DSNAME\n         EJECT ,\n*\n*        FORMAT ENQUEUE STATUS FOR MAJOR=SYSDSN\n*\nENQFIND  DS    0H                  TEST FOR DATASET IN USE\n         LA    R2,ENQWORK          POINT TO WORK AREA\n         GQSCAN AREA=((2),L'ENQWORK),SCOPE=ALL,TOKEN=GQTOKEN,          X\n               REQLIM=MAX,RESNAME=(RESNAME,(4),(6)),MF=(E,ENQSCAN)\n         LH    R15,GQTAB(R15)       GET OFFSET VECTOR FOR RETURN CODE\n         B     QRETURN(R15)        USE VECTOR TABLE\nQRETURN  B     ENQTEST             SOMEONE OWNS IT\n         B     ENQNOT              NO-ONE OWNS IT\n         B     ENQERR              GQSCAN ERROR\n         B     ENQERR              GQSCAN ERROR\n         SPACE 1\nENQERR   DS    0H                  SOMETHING WRONG WITH GQSCAN\n         MVI   VTFENQ,C'*'         FLAG EXCEPTIONAL CONDITION\n         VTOCMSG MSGENQ            ISSUE A MESSAGE\n         B     ENQEND              THEN GIVE UP\n         SPACE 1\nENQNOT   DS    0H                  NOBODY HAS ENQUEUED THE DATASET\n         MVI   VTFENQ,C'N'         SHOW THAT\n         B     ENQEND              THEN CARRY ON\n         SPACE 1\nENQTEST  DS    0H                  SOMEBODY HAS ENQUEUED THE DATASET\n         MVI   VTFENQ,C'S'         ASSUME IT IS SHARED\n         ST    R0,LENGTHS          SAVE LENGTH OF RIB AND RIBE\n         LA    R2,ENQWORK          POINT TO WORK AREA\n         USING RIB,R2              MAP RIB AT THE START OF WORK AREA\n         SPACE 1\nRIBLOOP  DS    0H                  CHECK EACH RIB\n         LH    R4,LENRIB           GET LENGTH OF RIB\n         AR    R4,R2               POINT PAST RIB\n         AH    R4,RIBVLEN          POINT PAST VARIABLE AREA\n         USING RIBE,R4             ESTABLISH RIBE ADDRESSABILITY\n         ICM   R14,B'1111',RIBNRIBE DO WE HAVE A RIBE?\n         BZ    ENQERR              NO, WRONG\n         SPACE 1\nRIBELOOP DS    0H                  TEST FOR EXCLUSIVE ENQUEUE\n         TM    RIBERFLG,RIBETYPE   TEST FOR EXCLUSIVE ENQ\n         BNO   ENQEXCL             YES, GO SHOW IT\n         AH    R4,LENRIBE          INCREMENT OVER THIS RIBE\n         BCT   R14,RIBELOOP        GO TEST NEXT ENQUEUE\nENQSHR   DS    0H                  OWNED NON - EXCLUSIVELY\n         LR    R2,R4               NEXT RIB FOLLOWS ON RIBES\n         BCT   R1,RIBLOOP          TEST ALL RIBS\n         B     ENQEND              THEN CARRY ON\n         SPACE 1\nENQEXCL  DS    0H                  OWNED EXCLUSIVELY\n         MVI   VTFENQ,C'E'         SHOW THAT\n         B     ENQEND              THEN CARRY ON, ONE IS ENOUGH\n         EJECT ,\n***********************************************************************\n*        SUBROUTINE TO MANAGE STORAGE                                 *\n*              ON ENTRY R0 = SP AND SIZE REQUIRED                     *\n*              ON EXIT  R1 = AREA ADDRESS                             *\n***********************************************************************\n         SPACE 1\nGETSTORE DS    0H                  SUBROUTINE ENTRY\n         GETMAIN R,LV=(0),LOC=BELOW ASK FOR 24 BIT STORAGE\n         SPACE 1\n         BR    R4                  RETURN TO CALLER\n         SPACE 2\nFREESTOR DS    0H                  SUBROUTINE ENTRY\n         FREEMAIN R,LV=(0),A=(1)   RELEASE PREVIOUSLY ACQUIRED STORAGE\n         SPACE 1\n         BR    R4                  RETURN TO CALLER\n         SPACE 3\n***********************************************************************\n*        SUBROUTINE TO CLEAR STORAGE                                  *\n*        ON ENTRY:                                                    *\n*              R0   =  LENGTH OF STORAGE ELEMENT                      *\n*              R1   -> ADDRESS OF STORAGE ELEMENT                     *\n***********************************************************************\n         SPACE 2\nCLEAR    DS    0H                  SUBROUTINE ENTRY\n         SR    R3,R3               SET OPERAND1 TO ZERO\n         LA    R2,0(R1)            SET ADDRESS TO CLEAR\n         LR    R3,R0               SET LENGTH\n         SR    R4,R4               SET FROM ADDRESS ZERO\n         SR    R5,R5               PAD TO ZERO FROM ZERO LENGTH\n         MVCL  R2,R4               CLEAR THE STORAGE\n         SPACE 2\nCLEARED  DS    0H                  END OF SUBROUTINE\n         BR    R14                 RETURN TO CALLER\n         SPACE 3\n*\n*        VECTOR TABLE TO SELECT GQSCAN RETURN  CODE PROCESS\n*\nGQTAB    DC    AL2(0)              RC=X'00' -> PROCESS RIB\n         DC    AL2(12)             FILLER   -> INVALID ENTRY\n         DC    AL2(4)                   04     NO ENQUEUES\n         DC    AL2(12)             FILLER   -> INVALID ENTRY\n         DC    AL2(0)                   08     INCOMPLETE DATA\n         DC    AL2(12)                  0A     GQSCAN ERROR\n         DC    AL2(12)             FILLER   -> INVALID ENTRY\n         DC    AL2(8)                   0C     GQSCAN ERROR\n         DC    AL2(12)             FILLER   -> INVALID ENTRY\n         DC    AL2(8)                   10     GQSCAN ERROR\n         DC    AL2(12)             FILLER   -> INVALID ENTRY\n         DC    AL2(8)                   14     GQSCAN ERROR\n         SPACE 3\nMSGCAT   MSGZ  'SUPERLOCATE ERROR'\nMSGENQ   MSGZ  'ERROR IN ENQ DETECTION'\n         SPACE 1\nENQEND   DS    0H\n         DROP  R2                  END RIB  ADDRESSABILITY\n         DROP  R4                  END RIBE ADDRESSABILITY\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCEXCO": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x13\\x00\\x942_\\x01\\x10\\x13\\x8f\\x133\\x02@\\x02@\\x00\\x08\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "2010-05-18T13:33:13", "lines": 576, "newlines": 576, "modlines": 8, "user": "TRIDJK"}, "text": "VTOCEXCP TITLE 'VTOCEXCP- VTOC READING SUBROUTINE'\n***********************************************************************\n*        SPACE\n* AUTHOR;  R. F. MORSE, MIT INSTRUMENTATION LABORATORY  AUG 5,1968.\n* MODIFIED;   E.BANK, FIREMAN'S FUND  MAY 15,1975.\n* MODIFIED;   R.MILLER  FIREMAN'S FUND  MAR 20,1977.\n* FUNCTION; THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)\n*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER\n*        ONE RECORD (DSCB) AT A TIME.\n*\n* OPERATION; THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD\n*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS\n*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE\n*        TIME.  THE ROUTINE HAS THREE CALL MODES;\n*\n*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN THE 3RD\n*              PARAMETER.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES,\n*              CONTAINING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA\n*              (96 BYTES) FOR ONE DSCB.  RETURN CODES (REGISTER 15)\n*              ARE;\n*                      0 - NORMAL;\n*                      4 - END OF FILE, NO DATA PRESENTED;\n*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS\n*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL\n*                          CONTAIN THE CORRECT CCHHR.  SINCE READING\n*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S\n*                          FOR THAT TRACK WILL BE MARKED IN ERROR.\n*                          READING MAY CONTINUE ON TO THE NEXT TRACK.\n*\n*        1 - OPEN.  THE SECOND PARAMETER SHOULD POINT TO\n*              A  6-BYTE FIELD CONTAINING THE VOLSER TO BE USED FOR THE\n*              ALLOCATION.\n*              RETURN CODES ( REG 15 )  ARE DIRECT FROM DYNAMIC ALLOC.\n*                      0 - NORMAL;\n*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);\n*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS\n*                          DEVICE, OR DEVICE TYPE UNKNOWN.\n*\n*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN\n*              CODE ( REG 15 ) IS FROM DYNAMIC UNALLOCATION.\n         SPACE\n* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCEXCP'.\n*        ARGUMENTS ARE:\n*                      1 - A(FULL-WORD BINARY ENTRY TYPE);\n*                      2 - A(PTR FOR DSCB);\n*                      3 - A(VOLSER).\n* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS\n*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO\n*        READ AN ENTIRE TRACK AT A TIME.\n*\n* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT\n*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.\n         SPACE\n* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN\n*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)\n*\n* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR\n*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING\n*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR\n*        THE DSCB'S TO BE READ INTO.  THIS COULD BE AS LARGE AS\n*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.\n*\n* ATTRIBUTES;  REENTRANT, REFRESHABLE.\n*\n*11/21/94 - MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0 AND TO SUPPORT 4 CHARACTER UCB  ABL-410\n*           ADDRESSES ON SYSTEMS AFTER  MVS/ESA 5.1.0.          ABL-410\n*                                                                     *\n         EJECT\n* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.\n         SPACE\nVTOCEXCP ENTER 12,8                    USE THE PROVIDED SAVEAREA\n         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA\n         LR    R11,R1                  SAVE PARAMETER REGISTER\n         USING VTOCOM,R11              SET ADDRESSABILITY\n*\n*        POINT TO THE DCB FOR LATER REFERENCES\n*\n         LA    RDCB,VTOCDCB   POINT TO IT\n         USING IHADCB,RDCB    SET ADDRESSABILITY\n         SPACE\n* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.\n         SPACE\n         SR    RWA,RWA                 CLEAR THE REGISTER\n         IC    RWA,VTCEFUNC            GET CALL MODE\n         SLL   RWA,2                   MODE TIMES 4\n         B     *+4(RWA)                BRANCH ON MODE\n         SPACE\n         B     GETDSB                  MODE 0, GET A DSCB\n         B     OPEN                    MODE 1, OPEN A NEW VTOC\n         B     CLOSE                   MODE 2, CLOSE\n         B     RETURN0                 MODE 3 NOT DEFINED, NO OP\n         SPACE 3\n***********\n* RETURNS *\n***********\n         SPACE\nRETURN0  SR    R15,R15                 CLEAR THE RETURN CODE\nRETURN   LEAVE EQ                      EXIT WITH THE CURRENT RET CODE\n         EJECT\n*********************\n* MODE 0 - GET DSCB *\n*********************\n         SPACE\n* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.\n         SPACE\nGETDSB   LA    R15,4                   SET THE RETURN CODE, IN CASE\n         TM    MODESW,EOFSW            TEST END-OF-FILE BIT\n         BO    RETURN                  RETURN CODE 4 IF ON\n         SPACE\n* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,\n* ASSUME THERE IS AT LEAST ONE FULL BUFFER.\n         SPACE\n         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED\n         BO    XCPTEST                 BRANCH IF SO\n         SPACE\n* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,\n* EXIT WITH ITS ADDRESS IN R1.\n         SPACE\n         L     RWA,DSCBADR             LOAD BUFFER POINTER\n         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB\nNDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER\n         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER\n         BNL   LASTDSCB                BRANCH IF SO\n         LR    R1,RWA                  PASS ADDRESS TO USER\nGETOUT   ST    R1,DSCBADDR             STORE IT FOR THE CALLER\n         TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK\n         BZ    RETURN0                 RETURN CODE 0 IF NOT\n         LA    R15,8                   SET THE RETURN CODE\n         B     RETURN                  RETURN CODE 8 IF ERROR\n         SPACE\n* IF THIS IS THE LAST DSCB, MOVE IT TO THE INTERNAL BUFFER AND START\n* READING THE NEXT TRACK.\n         SPACE\nLASTDSCB MVC   BUFF(148),0(RWA)        MOVE LAST DSCB\n         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER\n         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK\n         ST    RWB,TTRN\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         LA    R1,BUFF                 LOAD DSCB ADDRESS FOR CALLER\n         B     GETOUT                  TO RETURN\n         EJECT\n* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.\n         SPACE\nXCPTEST  WAIT  ECB=VTOCECB\n         SPACE\n         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF\n         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE\n         BNE   PERMERR                 BRANCH IF ERROR\nSETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB\n         B     NDXSTORE\n         SPACE\n* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE\n* CCHHR PORTIONS OF THE COUNT AREAS.\n         SPACE\nPERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR\n         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG\n         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1\n         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB\n         LA    RWB,1                   LOAD RECORD NUMBER\n         SPACE\nDSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER\n         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD\n         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD\n         LA    RWA,148(RWA)            POINT TO NEXT BUFFER\n         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER\n         C     RWA,DSCBLIM             TEST FOR LAST BUFFER\n         BNH   DSCBELUP\n         VTOCMSG TRACKERR       ISSUE THE ERROR MESSAGE\n         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER\n         EJECT\n*****************\n* MODE 1 - OPEN *\n*****************\n         SPACE\n* ENTER WITH A DDNAME IN SECOND PARAMETER POSITION.  PERFORM CLOSE\n* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.\n         SPACE\nOPEN     DS    0H\n         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE\n         SPACE\n*\n*        INITIALIZE THE DATA AREAS\n*\n*        FIRST THE DCB\n         MVC   VTOCDCB(DCBLEN),VTOCDCBM  SET UP THE DCB\n*\n*        SET UP THE JFCB LISTS\n*\n         LA    R1,JEXLST      POINT TO THE EXIT LIST\n         STCM  R1,B'0111',DCBEXLSA  PUT IT INTO THE DCB\n         LA    R1,JFCBAREA    POINT TO THE JFCB AREA\n         ST    R1,JEXLST      AND PUT THAT INTO THE EXIT LIST\n         MVI   JEXLST,X'87'   END OF LIST, JFCB EXIT\n         MVI   OPENLIST,X'80' END OF THE OPEN LIST TOO\n*        INITIALIZE THE IOB\n         MVC   VTOCIOB(IOBCONL),IOBCONST START IT OUT\n         LA    R1,VTOCECB     GET THE ECB ADDRESS\n         ST    R1,IOBECB      AND STORE IT INTO THE IOB\n         ST    RDCB,IOBDCB    STORE THE DCB ADDRESS INTO THE IOB\n*        INITIALIZE THE CAMLST\n         MVC   DSCBFMT4(4),DSCBCON SET UP THE FIRST WORD\n         LA    R1,IOBSEEK+3   SEEK ADDRESS\n         ST    R1,DSCBFMT4+4  INTO THE CAMLST\n         LA    R1,VOLID       VOLUME SERIAL NUMBER\n         ST    R1,DSCBFMT4+8  INTO THE CAMLST\n         LA    R1,FMT4        DSCB AREA\n         ST    R1,DSCBFMT4+12 INTO THE CAMLST\n*\n*        ALLOCATE THE VTOC OF THE CHOSEN PACK\n*\n         LA    R1,ADDR        POINT TO THE UNIT ADDRESS\n         ST    R1,UNITADDR    SAVE THE ADDRESS\n         LA    R1,3           ALSO GET THE LENGTH\n*                                                               ABL-410\n         CLI   ADDR+3,C' '    THREE CHARACTER UCB?              ABL-410\n         BE    GOT3UCB        YES, BRANCH                       ABL-410\n         MVI   PARMLIST,C'/'  LEADING SLASH MARK FOR A UCB      ABL-410\n         MVC   PARMLIST+1(4),ADDR  MOVE IN THE UCB ADDRESS      ABL-410\n         LA    R0,PARMLIST    POINT TO THE UNIT ADDRESS         ABL-410\n         ST    R0,UNITADDR    SAVE THE ADDRESS                  ABL-410\n         LA    R1,5           ALSO GET THE LENGTH               ABL-410\nGOT3UCB  DS    0H                                               ABL-410\n*                                                               ABL-410\n         STH   R1,UNITLEN     AND SAVE IT FOR DYNAMIC ALLOCATION MACRO\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,VOLADDR     SAVE THE ADDRESS\n         LA    R1,6           ALSO GET THE LENGTH\n         STH   R1,VOLLEN      AND SAVE IT FOR DYNAMIC ALLOCATION MACRO\n         ALLOC DSN=VTOCNM,VOL=VOLADDR,UNIT=UNITADDR,DISP=SHR,          X\n               DDNTO=DCBDDNAM,ERROR=S99FAIL\n         OI    MODESW,ALLOCSW          SET ALLOCATE FLAG ON\n         SPACE\n* OPEN THE VTOC.\n         SPACE\n*\n*        FIRST READ THE JFCB TO SWITCH THE DSNAME TO HEX 04'S\n*\n         RDJFCB ((RDCB)),MF=(E,OPENLIST)  READ THE JFCB\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   ERRJFCB        BAD NEWS\n         LA    R1,JFCBAREA    POINT TO THE JFCB\n         USING JFCB,R1        SET UP ADDRESSABILITY\n         MVI   JFCBDSNM,X'04' PUT IN THE FIRST ONE\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM  PROPAGATE IT\n         OI    JFCBTSDM,JFCNWRIT  DON'T REWRITE IT\n         DROP  R1\n         OPEN  ((RDCB),(INPUT)),MF=(E,OPENLIST),TYPE=J  OPEN THE VTOC\n         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED\n         BZ    OPENERR                 ERROR IF OPEN FAILED\n         SPACE\n* ISSUE AN OBTAIN FOR THE FIRST DSCB ON THE VTOC ( FORMAT 4 )\nD3       STM   R2,R13,EXCPSAVE         SAVE OUR REGS\n         LA    R3,EXCPSAVE    POINT TO THE REGISTER SAVE AREA\n         ICM   R0,B'1111',=X'00000100' FIRST DSCB\n         L     R1,DCBDEBAD             DEB ADDRESS\n         LA    R2,IOBSEEK              SAVE ADDRESS OF CCHHR\n         L     R15,CVT(,R0)            GET ADDRESS OF CVT     DRK MAY10\n         L     R15,CVTPCNVT(R15)       GET ADDRESS OF CONVERT ROUTINE\n         BALR  R14,R15                 GO TO CONVERT ROUTINE\n         LM    R2,R13,0(R3)            GET MY REGS BACK\n         OBTAIN DSCBFMT4               GET FORMAT 4 DSCB\n         LTR   R15,R15                 DID WE GET IT\n         BNZ   OBTERR                  NO - THEN ERROR, KEEP R15\n         CLI   DS4IDFMT,X'F4'          MAKE SURE WE HAVE FORMAT 4\n         BNE   NOTFMT4                 NO - THEN ERROR\n         IC    R15,DS4DEVDT            GET NUMBER OF DSCBS PER TRACK\n         ST    R15,NDSCBS              SAVE THE NUMBER OF DSCBS\n         OC    NDSCBS,NDSCBS           MAKE SURE NOT ZERO\n         BZ    DSCBNUM0                YES - GO TELL CALLER\n*\n* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.\n         SPACE\n         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW\n         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK\n         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING\n         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE\n         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE\n         GETMAIN  R,LV=(0)             GET TRACK BUFFERS\n         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE\n         OI    MODESW,CBGOT            INDICATE CORE GOTTEN\n         SPACE\n* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH\n* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR\n* EACH DSCB.\n         SPACE\n         L     RWA,NDSCBS              NUMBER OF DSCB'S\n         SLL   RWA,3                   TIMES   8\n         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD\n         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER\n         SPACE\n         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM\n         MVC   0(8,R1),INITCCW         INSERT FIRST CCW\n         LA    RWB,8(R1)               PLACE FOR NEXT CCW\n         LA    RWC,1                   BUFFER COUNTER\n         SPACE\nCCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB\n         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS\n         MVI   0(RWB),READCKD          RESTORE COMMAND CODE\n         C     RWC,NDSCBS              TEST BUFFER COUNTER\n         BNL   LASTCCW                 BRANCH IF LAST BUFFER\n         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS\n         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS\n         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER\n         B     CCWLOOP                 DO NEXT BUFFER\n         SPACE\nLASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT\n         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER\n         SPACE\n* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.\n         SPACE\n         SR    R0,R0\n         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0\n         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         B     RETURN0                 INDICATE SUCCESSFUL OPEN\n         EJECT\n******************\n* MODE 2 - CLOSE *\n******************\n         SPACE\nCLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE\n         B     RETURN0\n         SPACE 2\n* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER\n* ACTION.\n         SPACE\nCLOSESUB DS    0H\n         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING\n         BZ    NOEXCP                  BRANCH IF NOT\n         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE\n         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF\nNOEXCP   DS    0H\n         SPACE\n* CLOSE THE DCB.\n         SPACE\n         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN\n         BZ    NOCLOSE                 BRANCH IF NOT\n         CLOSE ((RDCB)),MF=(E,OPENLIST)   CLOSE THE VTOC\nNOCLOSE  DS    0H\n         SPACE\n* FREE UP THE DDNAME AND VOLUME\n         SPACE\n         TM    MODESW,ALLOCSW          DID WE ALLOCATE A DEVICE\n         BNO   NOALLOC                 NO  - THEN NOTHING TO FREEUP\n         LA    R1,DCBDDNAM   POINT TO THE DDNAME\n         ST    R1,DDNPDL     SAVE IT FOR FREE\n         LA    R1,8          GET THE DDNAME LENGTH\n         STH   R1,DDNPDL+4   SAVE IT FOR FREE\n         FREE  UNALC,DDN=DDNPDL,ERROR=S99FAIL  FREE THE DDNAME\n         NI    MODESW,X'FF'-ALLOCSW    TURN OFF ALLOCATE SW\n         SPACE\nNOALLOC  DS    0H\n         SPACE\n* RELEASE CORE OBTAINED FOR DSCB BUFFERS.\n         SPACE\n         TM    MODESW,CBGOT            TEST IF CORE GOTTEN\n         BZ    NOFREE                  BRANCH IF NOT\n         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION\n         FREEMAIN  R,LV=(0),A=(1)      FREE CORE\n         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF\nNOFREE   DS    0H\n         SPACE\n         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH\n         BR    RRET\n         EJECT\n****************\n* EXCP ROUTINE *\n****************\n         SPACE\n* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN\n* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.\n         SPACE\nEXCP     DS    0H\n         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS\n         LA    R3,EXCPSAVE             SAVE REGS FOR RESTORING AFTER CL\n         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER\n         L     R1,DCBDEBAD             LOAD DEB ADDRESS\n         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR\n         L     R15,CVT(,R0)            LOAD CVT ADDRESS       DRK MAY10\n         L     R15,CVTPCNVT(R15)       LOAD ADDR OF CONVERT ROUTINE\n         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR\n*                                      THAT CLOBBERED BASE REG\n         LM    R2,R13,0(R3)            RESTORE REGISTERS\n         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)\n         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE\n         CLC   DS4HPCHR,IOBSEEK+3      CHECK FOR THE LAST FMT1\n         BL    SETEOF                  IF SO, PRETEND END-OF-FILE\n         SPACE\n* ZERO ECB AND START CHANNEL PROGRAM.\n         SPACE\n         SR    R0,R0\n         ST    R0,VTOCECB              CLEAR ECB\n         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH\n         EXCP  VTOCIOB                 START CHANNEL PROGRAM\n         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG\n         BR    RRET\n         SPACE\n* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.\n         SPACE\nSETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT\n         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE\n         EJECT\n********************************\n* DAIRFAIL ROUTINE             *\n********************************\nS99FAIL  LR    R15,RRCODE     SAVE THE RETURN CODE\n         S99FAIL MF=(E,S99FLIST,S99FLEN)  ISSUE THE APPROPRIATE MSG\n         LR    R15,RRCODE     RELOAD THE RETURN CODE\n         B     RETURN         AND THEN EXIT\n         SPACE 3\n*\n*        VARIOUS OTHER ERROR ROUTINES\n*\nOPENERR  VTOCMSG OPENERRM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nOBTERR   VTOCMSG OBTERRM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nNOTFMT4  VTOCMSG NOTFMT4M  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nDSCBNUM0 VTOCMSG DSCBNUMM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\n*\nERRJFCB  VTOCMSG ERRJFCBM   ERROR IN READING JFCB\n*\nERRET    LA    R15,8          SET AN ERROR RETURN CODE\n         B     RETURN         THEN EXIT\n*\n         EJECT\n********************************\n* CONSTANTS, VARIABLES, ETC... *\n********************************\n         SPACE\n*        ERROR MESSAGES\n*\nOPENERRM MSGZ  ' VTOCEXCP - ERROR IN OPENING VTOC '\nOBTERRM  MSGZ  ' VTOCEXCP - ERROR IN OBTAIN '\nNOTFMT4M MSGZ  ' VTOCEXCP - FORMAT 4 DSCB WAS NOT FIRST'\nDSCBNUMM MSGZ  ' VTOCEXCP - THE FORMAT 4 DSCB HAS DSCB S/TRK = 0 '\nTRACKERR MSGZ  ' VTOCEXCP - A READ ERROR OCCURRED ON THE VTOC '\nERRJFCBM MSGZ  ' VTOCEXCP - A RDJFCB ERROR OCCURRED '\n         SPACE\nINITCCW  CCW   READR0,0,CC+SLI+SKIP,8\nREADCCW  CCW   READCKD,0,CC,148\n         SPACE\nDSCBCON  CAMLST SEEK,0,0,0   FILLED IN WITH IOBSEEK+3, VOLID, FMT4\n         EJECT\n* DATA CONTROL BLOCK\n         PRINT   GEN\nVTOCDCBM DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1\nDCBLEN   EQU   *-VTOCDCBM\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nIOBCONST DS    0D\n         DC    X'42000000'     COMMAND CHAIN, NOT RELATED\n         DC    A(0)            ECB ADDRESS\n         DC    2F'0'\n         DC    A(0)            CHANNEL PROGRAM BEGINNING\n         DC    A(0)            DCB ADDRESS\n         DC    X'03000000'\n         DC    F'0'\n         DC    D'0'            INITIAL SEEK ADDRESS\nIOBCONL  EQU   *-IOBCONST\n* VTOC NAME FOR ALLOCATION\nVTOCNM   DC    A(VTOCNAME)\n         DC    Y(12)\nVTOCNAME DC    CL12'FORMAT4.DSCB'   DATA SET NAME FOR VTOC\n*\n*\n         LTORG\n         EJECT\n* SECTION DEFINITION AND REGISTER ASSIGNMENTS;\n         SPACE 2\nRWA      EQU   2\nRWB      EQU   3\nRWC      EQU   4\nRDCB     EQU   8              DCB POINTER\nRRCODE   EQU   10              RETURN CODE REGISTER\nRRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER\n         SPACE 3\n* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:\n         SPACE\nREADR0   EQU   X'16'           READ RECORD 0\nREADCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA\n         SPACE\nCC       EQU   X'40'           COMMAND CHAIN FLAG\nSLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG\nSKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG\n         SPACE 3\n* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:\n         SPACE\nCVT      EQU   16              LOCATION OF CVT BASE ADDRESS\nCVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS\n         EJECT\n*\n*        AREA USED BY VTOCREAD, PASSED VIA R13\n*\nVTOCWORK DSECT\n         DS    18F             SAVE AREA\n         SPACE\nEXCPSAVE DS    18F             INTERNAL SAVE AREA\nCBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE\nCBADDR   EQU   CBSIZE+4\nNDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK\nDSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER\nDSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER\nDSCBADR  DS    F               ADDRESS OF CURRENT DSCB\nTTRN     DS    F               RELATIVE TRACK NUMBER\nVOLADDR  DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS\nVOLLEN   DS    H                       AND LENGTH OF VOLID\nUNITADDR DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS\nUNITLEN  DS    H                       AND LENGTH OF UNIT ADDRESS\nDDNPDL   DS    2F            SPACE FOR DDNAME PDL\n         SPACE\n* MODE SWITCH AND BIT DEFINITIONS\n         SPACE\nMODESW   DC    X'00'\nCBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER\nXCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED\nRDERR    EQU   X'20'           PERMANENT I/O ERROR\nEOFSW    EQU   X'10'           END-OF-FILE SENSED\nALLOCSW  EQU   X'08'           ALLOCATE VOLUME FLAG\n         SPACE\nVTOCDCB  DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1\n         SPACE\nOPENBIT  EQU   X'10'\nOPENLIST DS    2F\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nVTOCIOB  DS    0D\nIOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED\nIOBECB   DC    A(VTOCECB)\n         DC    2F'0'\nIOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING\nIOBDCB   DC    A(VTOCDCB)\n         DC    X'03000000'\n         DC    F'0'\nIOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS\n         SPACE\n* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:\n         SPACE\nVTOCECB  DC    F'0'            EVENT CONTROL BLOCK\n         SPACE 3\n* INTERNAL BUFFER FOR LAST DSCB\nBUFF     DS    XL148\n         SPACE 2\nDSCBFMT4 CAMLST SEEK,IOBSEEK+3,VOLID,FMT4\n         SPACE\n*   WORK AREA FOR DYNAMIC ALLOCATION\n         DYNSPACE\nS99FLIST DS    XL(S99FLEN)\n         SPACE\n*\n*        JFCB EXIT LIST AND AREA\n*\nJEXLST   DS    F\nJFCBAREA DS    XL176\n         DS    0D\nVTOCWLEN EQU   *-VTOCWORK\n         SPACE 2\n         PRINT GEN\n         VTOCOM\n         PRINT NOGEN\n         SPACE 2\n         IEFZB4D0\n         SPACE 2\n         IEFZB4D2\n         SPACE 2\n         DCBD  DEVD=DA,DSORG=PS\n         SPACE 2\nJFCB     DSECT\n         IEFJFCBN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCEXCP": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x14\\x17_\\x01\\x14\\x17_\\x13 \\x02G\\x02G\\x00\\x00\\xc5\\xc1\\xe5\\xc6\\xc9\\xe7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-06-24T00:00:00", "modifydate": "2014-06-24T13:20:00", "lines": 583, "newlines": 583, "modlines": 0, "user": "EAVFIX"}, "text": "VTOCEXCP TITLE 'VTOCEXCP- VTOC READING SUBROUTINE'\n***********************************************************************\n*        SPACE\n* AUTHOR;  R. F. MORSE, MIT INSTRUMENTATION LABORATORY  AUG 5,1968.\n* MODIFIED;   E.BANK, FIREMAN'S FUND  MAY 15,1975.\n* MODIFIED;   R.MILLER  FIREMAN'S FUND  MAR 20,1977.\n* FUNCTION; THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)\n*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER\n*        ONE RECORD (DSCB) AT A TIME.\n*\n* OPERATION; THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD\n*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS\n*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE\n*        TIME.  THE ROUTINE HAS THREE CALL MODES;\n*\n*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN THE 3RD\n*              PARAMETER.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES,\n*              CONTAINING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA\n*              (96 BYTES) FOR ONE DSCB.  RETURN CODES (REGISTER 15)\n*              ARE;\n*                      0 - NORMAL;\n*                      4 - END OF FILE, NO DATA PRESENTED;\n*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS\n*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL\n*                          CONTAIN THE CORRECT CCHHR.  SINCE READING\n*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S\n*                          FOR THAT TRACK WILL BE MARKED IN ERROR.\n*                          READING MAY CONTINUE ON TO THE NEXT TRACK.\n*\n*        1 - OPEN.  THE SECOND PARAMETER SHOULD POINT TO\n*              A  6-BYTE FIELD CONTAINING THE VOLSER TO BE USED FOR THE\n*              ALLOCATION.\n*              RETURN CODES ( REG 15 )  ARE DIRECT FROM DYNAMIC ALLOC.\n*                      0 - NORMAL;\n*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);\n*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS\n*                          DEVICE, OR DEVICE TYPE UNKNOWN.\n*\n*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN\n*              CODE ( REG 15 ) IS FROM DYNAMIC UNALLOCATION.\n         SPACE\n* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCEXCP'.\n*        ARGUMENTS ARE:\n*                      1 - A(FULL-WORD BINARY ENTRY TYPE);\n*                      2 - A(PTR FOR DSCB);\n*                      3 - A(VOLSER).\n* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS\n*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO\n*        READ AN ENTIRE TRACK AT A TIME.\n*\n* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT\n*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.\n         SPACE\n* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN\n*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)\n*\n* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR\n*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING\n*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR\n*        THE DSCB'S TO BE READ INTO.  THIS COULD BE AS LARGE AS\n*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.\n*\n* ATTRIBUTES;  REENTRANT, REFRESHABLE.\n*\n*11/21/94 - MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0 AND TO SUPPORT 4 CHARACTER UCB  ABL-410\n*           ADDRESSES ON SYSTEMS AFTER  MVS/ESA 5.1.0.          ABL-410\n*                                                                     *\n         EJECT\n* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.\n         SPACE\nVTOCEXCP ENTER 12,8                    USE THE PROVIDED SAVEAREA\n         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA\n         LR    R11,R1                  SAVE PARAMETER REGISTER\n         USING VTOCOM,R11              SET ADDRESSABILITY\n*\n*        POINT TO THE DCB FOR LATER REFERENCES\n*\n         LA    RDCB,VTOCDCB   POINT TO IT\n         USING IHADCB,RDCB    SET ADDRESSABILITY\n         SPACE\n* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.\n         SPACE\n         SR    RWA,RWA                 CLEAR THE REGISTER\n         IC    RWA,VTCEFUNC            GET CALL MODE\n         SLL   RWA,2                   MODE TIMES 4\n         B     *+4(RWA)                BRANCH ON MODE\n         SPACE\n         B     GETDSB                  MODE 0, GET A DSCB\n         B     OPEN                    MODE 1, OPEN A NEW VTOC\n         B     CLOSE                   MODE 2, CLOSE\n         B     RETURN0                 MODE 3 NOT DEFINED, NO OP\n         SPACE 3\n***********\n* RETURNS *\n***********\n         SPACE\nRETURN0  SR    R15,R15                 CLEAR THE RETURN CODE\nRETURN   LEAVE EQ                      EXIT WITH THE CURRENT RET CODE\n         EJECT\n*********************\n* MODE 0 - GET DSCB *\n*********************\n         SPACE\n* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.\n         SPACE\nGETDSB   LA    R15,4                   SET THE RETURN CODE, IN CASE\n         TM    MODESW,EOFSW            TEST END-OF-FILE BIT\n         BO    RETURN                  RETURN CODE 4 IF ON\n         SPACE\n* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,\n* ASSUME THERE IS AT LEAST ONE FULL BUFFER.\n         SPACE\n         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED\n         BO    XCPTEST                 BRANCH IF SO\n         SPACE\n* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,\n* EXIT WITH ITS ADDRESS IN R1.\n         SPACE\n         L     RWA,DSCBADR             LOAD BUFFER POINTER\n         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB\nNDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER\n         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER\n         BNL   LASTDSCB                BRANCH IF SO\n         LR    R1,RWA                  PASS ADDRESS TO USER\nGETOUT   ST    R1,DSCBADDR             STORE IT FOR THE CALLER\n         TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK\n         BZ    RETURN0                 RETURN CODE 0 IF NOT\n         LA    R15,8                   SET THE RETURN CODE\n         B     RETURN                  RETURN CODE 8 IF ERROR\n         SPACE\n* IF THIS IS THE LAST DSCB, MOVE IT TO THE INTERNAL BUFFER AND START\n* READING THE NEXT TRACK.\n         SPACE\nLASTDSCB MVC   BUFF(148),0(RWA)        MOVE LAST DSCB\n         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER\n         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK\n         ST    RWB,TTRN\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         LA    R1,BUFF                 LOAD DSCB ADDRESS FOR CALLER\n         B     GETOUT                  TO RETURN\n         EJECT\n* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.\n         SPACE\nXCPTEST  WAIT  ECB=VTOCECB\n         SPACE\n         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF\n         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE\n         BNE   PERMERR                 BRANCH IF ERROR\nSETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB\n         B     NDXSTORE\n         SPACE\n* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE\n* CCHHR PORTIONS OF THE COUNT AREAS.\n         SPACE\nPERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR\n         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG\n         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1\n         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB\n         LA    RWB,1                   LOAD RECORD NUMBER\n         SPACE\nDSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER\n         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD\n         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD\n         LA    RWA,148(RWA)            POINT TO NEXT BUFFER\n         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER\n         C     RWA,DSCBLIM             TEST FOR LAST BUFFER\n         BNH   DSCBELUP\n         VTOCMSG TRACKERR       ISSUE THE ERROR MESSAGE\n         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER\n         EJECT\n*****************\n* MODE 1 - OPEN *\n*****************\n         SPACE\n* ENTER WITH A DDNAME IN SECOND PARAMETER POSITION.  PERFORM CLOSE\n* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.\n         SPACE\nOPEN     DS    0H\n         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE\n         SPACE\n*\n*        INITIALIZE THE DATA AREAS\n*\n*        FIRST THE DCB\n         MVC   VTOCDCB(DCBLEN),VTOCDCBM  SET UP THE DCB\n         MVC   VTOCDCBE(EMLEN),VTOCDCBEM            DCBE      #DD14170\n         LA    R0,VTOCDCBE                                    #DD14170\n         ST    R0,DCBDCBE-IHADCB+VTOCDCB DCB'S DCBE ADDRESS   #DD14170\n*\n*        SET UP THE JFCB LISTS\n*\n         LA    R1,JEXLST      POINT TO THE EXIT LIST\n         STCM  R1,B'0111',DCBEXLSA  PUT IT INTO THE DCB\n         LA    R1,JFCBAREA    POINT TO THE JFCB AREA\n         ST    R1,JEXLST      AND PUT THAT INTO THE EXIT LIST\n         MVI   JEXLST,X'87'   END OF LIST, JFCB EXIT\n         MVI   OPENLIST,X'80' END OF THE OPEN LIST TOO\n*        INITIALIZE THE IOB\n         MVC   VTOCIOB(IOBCONL),IOBCONST START IT OUT\n         LA    R1,VTOCECB     GET THE ECB ADDRESS\n         ST    R1,IOBECB      AND STORE IT INTO THE IOB\n         ST    RDCB,IOBDCB    STORE THE DCB ADDRESS INTO THE IOB\n*        INITIALIZE THE CAMLST\n         MVC   DSCBFMT4(4),DSCBCON SET UP THE FIRST WORD\n         LA    R1,IOBSEEK+3   SEEK ADDRESS\n         ST    R1,DSCBFMT4+4  INTO THE CAMLST\n         LA    R1,VOLID       VOLUME SERIAL NUMBER\n         ST    R1,DSCBFMT4+8  INTO THE CAMLST\n         LA    R1,FMT4        DSCB AREA\n         ST    R1,DSCBFMT4+12 INTO THE CAMLST\n*\n*        ALLOCATE THE VTOC OF THE CHOSEN PACK\n*\n         LA    R1,ADDR        POINT TO THE UNIT ADDRESS\n         ST    R1,UNITADDR    SAVE THE ADDRESS\n         LA    R1,3           ALSO GET THE LENGTH\n*                                                               ABL-410\n         CLI   ADDR+3,C' '    THREE CHARACTER UCB?              ABL-410\n         BE    GOT3UCB        YES, BRANCH                       ABL-410\n         MVI   PARMLIST,C'/'  LEADING SLASH MARK FOR A UCB      ABL-410\n         MVC   PARMLIST+1(4),ADDR  MOVE IN THE UCB ADDRESS      ABL-410\n         LA    R0,PARMLIST    POINT TO THE UNIT ADDRESS         ABL-410\n         ST    R0,UNITADDR    SAVE THE ADDRESS                  ABL-410\n         LA    R1,5           ALSO GET THE LENGTH               ABL-410\nGOT3UCB  DS    0H                                               ABL-410\n*                                                               ABL-410\n         STH   R1,UNITLEN     AND SAVE IT FOR DYNAMIC ALLOCATION MACRO\n         LA    R1,VOLID       POINT TO THE VOLUME SERIAL\n         ST    R1,VOLADDR     SAVE THE ADDRESS\n         LA    R1,6           ALSO GET THE LENGTH\n         STH   R1,VOLLEN      AND SAVE IT FOR DYNAMIC ALLOCATION MACRO\n         ALLOC DSN=VTOCNM,VOL=VOLADDR,UNIT=UNITADDR,DISP=SHR,          X\n               DDNTO=DCBDDNAM,ERROR=S99FAIL\n         OI    MODESW,ALLOCSW          SET ALLOCATE FLAG ON\n         SPACE\n* OPEN THE VTOC.\n         SPACE\n*\n*        FIRST READ THE JFCB TO SWITCH THE DSNAME TO HEX 04'S\n*\n         RDJFCB ((RDCB)),MF=(E,OPENLIST)  READ THE JFCB\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   ERRJFCB        BAD NEWS\n         LA    R1,JFCBAREA    POINT TO THE JFCB\n         USING JFCB,R1        SET UP ADDRESSABILITY\n         MVI   JFCBDSNM,X'04' PUT IN THE FIRST ONE\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM  PROPAGATE IT\n         OI    JFCBTSDM,JFCNWRIT  DON'T REWRITE IT\n         DROP  R1\n         OPEN  ((RDCB),(INPUT)),MF=(E,OPENLIST),TYPE=J  OPEN THE VTOC\n         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED\n         BZ    OPENERR                 ERROR IF OPEN FAILED\n         SPACE\n* ISSUE AN OBTAIN FOR THE FIRST DSCB ON THE VTOC ( FORMAT 4 )\nD3       STM   R2,R13,EXCPSAVE         SAVE OUR REGS\n         LA    R3,EXCPSAVE    POINT TO THE REGISTER SAVE AREA\n         ICM   R0,B'1111',=X'00000100' FIRST DSCB\n         L     R1,DCBDEBAD             DEB ADDRESS\n         LA    R2,IOBSEEK              SAVE ADDRESS OF CCHHR\n         L     R15,CVT(,R0)            GET ADDRESS OF CVT     DRK MAY10\n         L     R15,CVTPCNVT(R15)       GET ADDRESS OF CONVERT ROUTINE\n         BALR  R14,R15                 GO TO CONVERT ROUTINE\n         LM    R2,R13,0(R3)            GET MY REGS BACK\n         OBTAIN DSCBFMT4,EADSCB=OK     GET FORMAT 4 DSCB      #DD14170\n         LTR   R15,R15                 DID WE GET IT\n         BNZ   OBTERR                  NO - THEN ERROR, KEEP R15\n         CLI   DS4IDFMT,X'F4'          MAKE SURE WE HAVE FORMAT 4\n         BNE   NOTFMT4                 NO - THEN ERROR\n         IC    R15,DS4DEVDT            GET NUMBER OF DSCBS PER TRACK\n         ST    R15,NDSCBS              SAVE THE NUMBER OF DSCBS\n         OC    NDSCBS,NDSCBS           MAKE SURE NOT ZERO\n         BZ    DSCBNUM0                YES - GO TELL CALLER\n*\n* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.\n         SPACE\n         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW\n         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK\n         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING\n         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE\n         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE\n         GETMAIN  R,LV=(0)             GET TRACK BUFFERS\n         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE\n         OI    MODESW,CBGOT            INDICATE CORE GOTTEN\n         SPACE\n* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH\n* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR\n* EACH DSCB.\n         SPACE\n         L     RWA,NDSCBS              NUMBER OF DSCB'S\n         SLL   RWA,3                   TIMES   8\n         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD\n         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER\n         SPACE\n         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM\n         MVC   0(8,R1),INITCCW         INSERT FIRST CCW\n         LA    RWB,8(R1)               PLACE FOR NEXT CCW\n         LA    RWC,1                   BUFFER COUNTER\n         SPACE\nCCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB\n         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS\n         MVI   0(RWB),READCKD          RESTORE COMMAND CODE\n         C     RWC,NDSCBS              TEST BUFFER COUNTER\n         BNL   LASTCCW                 BRANCH IF LAST BUFFER\n         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS\n         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS\n         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER\n         B     CCWLOOP                 DO NEXT BUFFER\n         SPACE\nLASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT\n         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER\n         SPACE\n* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.\n         SPACE\n         SR    R0,R0\n         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0\n         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF\n         BAL   RRET,EXCP               START CHANNEL PROGRAM\n         B     RETURN0                 INDICATE SUCCESSFUL OPEN\n         EJECT\n******************\n* MODE 2 - CLOSE *\n******************\n         SPACE\nCLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE\n         B     RETURN0\n         SPACE 2\n* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER\n* ACTION.\n         SPACE\nCLOSESUB DS    0H\n         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING\n         BZ    NOEXCP                  BRANCH IF NOT\n         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE\n         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF\nNOEXCP   DS    0H\n         SPACE\n* CLOSE THE DCB.\n         SPACE\n         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN\n         BZ    NOCLOSE                 BRANCH IF NOT\n         CLOSE ((RDCB)),MF=(E,OPENLIST)   CLOSE THE VTOC\nNOCLOSE  DS    0H\n         SPACE\n* FREE UP THE DDNAME AND VOLUME\n         SPACE\n         TM    MODESW,ALLOCSW          DID WE ALLOCATE A DEVICE\n         BNO   NOALLOC                 NO  - THEN NOTHING TO FREEUP\n         LA    R1,DCBDDNAM   POINT TO THE DDNAME\n         ST    R1,DDNPDL     SAVE IT FOR FREE\n         LA    R1,8          GET THE DDNAME LENGTH\n         STH   R1,DDNPDL+4   SAVE IT FOR FREE\n         FREE  UNALC,DDN=DDNPDL,ERROR=S99FAIL  FREE THE DDNAME\n         NI    MODESW,X'FF'-ALLOCSW    TURN OFF ALLOCATE SW\n         SPACE\nNOALLOC  DS    0H\n         SPACE\n* RELEASE CORE OBTAINED FOR DSCB BUFFERS.\n         SPACE\n         TM    MODESW,CBGOT            TEST IF CORE GOTTEN\n         BZ    NOFREE                  BRANCH IF NOT\n         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION\n         FREEMAIN  R,LV=(0),A=(1)      FREE CORE\n         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF\nNOFREE   DS    0H\n         SPACE\n         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH\n         BR    RRET\n         EJECT\n****************\n* EXCP ROUTINE *\n****************\n         SPACE\n* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN\n* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.\n         SPACE\nEXCP     DS    0H\n         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS\n         LA    R3,EXCPSAVE             SAVE REGS FOR RESTORING AFTER CL\n         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER\n         L     R1,DCBDEBAD             LOAD DEB ADDRESS\n         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR\n         L     R15,CVT(,R0)            LOAD CVT ADDRESS       DRK MAY10\n         L     R15,CVTPCNVT(R15)       LOAD ADDR OF CONVERT ROUTINE\n         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR\n*                                      THAT CLOBBERED BASE REG\n         LM    R2,R13,0(R3)            RESTORE REGISTERS\n         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)\n         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE\n         CLC   DS4HPCHR,IOBSEEK+3      CHECK FOR THE LAST FMT1\n         BL    SETEOF                  IF SO, PRETEND END-OF-FILE\n         SPACE\n* ZERO ECB AND START CHANNEL PROGRAM.\n         SPACE\n         SR    R0,R0\n         ST    R0,VTOCECB              CLEAR ECB\n         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH\n         EXCP  VTOCIOB                 START CHANNEL PROGRAM\n         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG\n         BR    RRET\n         SPACE\n* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.\n         SPACE\nSETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT\n         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE\n         EJECT\n********************************\n* DAIRFAIL ROUTINE             *\n********************************\nS99FAIL  LR    R15,RRCODE     SAVE THE RETURN CODE\n         S99FAIL MF=(E,S99FLIST,S99FLEN)  ISSUE THE APPROPRIATE MSG\n         LR    R15,RRCODE     RELOAD THE RETURN CODE\n         B     RETURN         AND THEN EXIT\n         SPACE 3\n*\n*        VARIOUS OTHER ERROR ROUTINES\n*\nOPENERR  VTOCMSG OPENERRM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nOBTERR   VTOCMSG OBTERRM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nNOTFMT4  VTOCMSG NOTFMT4M  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\nDSCBNUM0 VTOCMSG DSCBNUMM  ISSUE THE MESSAGE\n         B     ERRET          THEN RETURN\n*\nERRJFCB  VTOCMSG ERRJFCBM   ERROR IN READING JFCB\n*\nERRET    LA    R15,8          SET AN ERROR RETURN CODE\n         B     RETURN         THEN EXIT\n*\n         EJECT\n********************************\n* CONSTANTS, VARIABLES, ETC... *\n********************************\n         SPACE\n*        ERROR MESSAGES\n*\nOPENERRM MSGZ  ' VTOCEXCP - ERROR IN OPENING VTOC '\nOBTERRM  MSGZ  ' VTOCEXCP - ERROR IN OBTAIN '\nNOTFMT4M MSGZ  ' VTOCEXCP - FORMAT 4 DSCB WAS NOT FIRST'\nDSCBNUMM MSGZ  ' VTOCEXCP - THE FORMAT 4 DSCB HAS DSCB S/TRK = 0 '\nTRACKERR MSGZ  ' VTOCEXCP - A READ ERROR OCCURRED ON THE VTOC '\nERRJFCBM MSGZ  ' VTOCEXCP - A RDJFCB ERROR OCCURRED '\n         SPACE\nINITCCW  CCW   READR0,0,CC+SLI+SKIP,8\nREADCCW  CCW   READCKD,0,CC,148\n         SPACE\nDSCBCON  CAMLST SEEK,0,0,0,EADSCB=OK                          #DD14170\n         EJECT\n* DATA CONTROL BLOCK\n         PRINT   GEN\nVTOCDCBM DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1,DCBE=*-*       #DD14170\nDCBLEN   EQU   *-VTOCDCBM\nVTOCDCBEM DCBE EADSCB=OK                                      #DD14170\nEMLEN    EQU   *-VTOCDCBEM                                    #DD14170\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nIOBCONST DS    0D\n         DC    X'42000000'     COMMAND CHAIN, NOT RELATED\n         DC    A(0)            ECB ADDRESS\n         DC    2F'0'\n         DC    A(0)            CHANNEL PROGRAM BEGINNING\n         DC    A(0)            DCB ADDRESS\n         DC    X'03000000'\n         DC    F'0'\n         DC    D'0'            INITIAL SEEK ADDRESS\nIOBCONL  EQU   *-IOBCONST\n* VTOC NAME FOR ALLOCATION\nVTOCNM   DC    A(VTOCNAME)\n         DC    Y(12)\nVTOCNAME DC    CL12'FORMAT4.DSCB'   DATA SET NAME FOR VTOC\n*\n*\n         LTORG\n         EJECT\n* SECTION DEFINITION AND REGISTER ASSIGNMENTS;\n         SPACE 2\nRWA      EQU   2\nRWB      EQU   3\nRWC      EQU   4\nRDCB     EQU   8              DCB POINTER\nRRCODE   EQU   10              RETURN CODE REGISTER\nRRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER\n         SPACE 3\n* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:\n         SPACE\nREADR0   EQU   X'16'           READ RECORD 0\nREADCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA\n         SPACE\nCC       EQU   X'40'           COMMAND CHAIN FLAG\nSLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG\nSKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG\n         SPACE 3\n* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:\n         SPACE\nCVT      EQU   16              LOCATION OF CVT BASE ADDRESS\nCVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS\n         EJECT\n*\n*        AREA USED BY VTOCREAD, PASSED VIA R13\n*\nVTOCWORK DSECT\n         DS    18F             SAVE AREA\n         SPACE\nEXCPSAVE DS    18F             INTERNAL SAVE AREA\nCBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE\nCBADDR   EQU   CBSIZE+4\nNDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK\nDSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER\nDSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER\nDSCBADR  DS    F               ADDRESS OF CURRENT DSCB\nTTRN     DS    F               RELATIVE TRACK NUMBER\nVOLADDR  DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS\nVOLLEN   DS    H                       AND LENGTH OF VOLID\nUNITADDR DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS\nUNITLEN  DS    H                       AND LENGTH OF UNIT ADDRESS\nDDNPDL   DS    2F            SPACE FOR DDNAME PDL\n         SPACE\n* MODE SWITCH AND BIT DEFINITIONS\n         SPACE\nMODESW   DC    X'00'\nCBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER\nXCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED\nRDERR    EQU   X'20'           PERMANENT I/O ERROR\nEOFSW    EQU   X'10'           END-OF-FILE SENSED\nALLOCSW  EQU   X'08'           ALLOCATE VOLUME FLAG\n         SPACE\nVTOCDCB  DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1,DCBE=*-*       #DD14170\nVTOCDCBE DCBE  EADSCB=OK                                      #DD14170\n         SPACE\nOPENBIT  EQU   X'10'\nOPENLIST DS    2F\n         SPACE\n* IOB FOR CHANNEL PROGRAM\n         SPACE\nVTOCIOB  DS    0D\nIOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED\nIOBECB   DC    A(VTOCECB)\n         DC    2F'0'\nIOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING\nIOBDCB   DC    A(VTOCDCB)\n         DC    X'03000000'\n         DC    F'0'\nIOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS\n         SPACE\n* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:\n         SPACE\nVTOCECB  DC    F'0'            EVENT CONTROL BLOCK\n         SPACE 3\n* INTERNAL BUFFER FOR LAST DSCB\nBUFF     DS    XL148\n         SPACE 2\nDSCBFMT4 CAMLST SEEK,IOBSEEK+3,VOLID,FMT4,EADSCB=OK           #DD14170\n         SPACE\n*   WORK AREA FOR DYNAMIC ALLOCATION\n         DYNSPACE\nS99FLIST DS    XL(S99FLEN)\n         SPACE\n*\n*        JFCB EXIT LIST AND AREA\n*\nJEXLST   DS    F\nJFCBAREA DS    XL176\n         DS    0D\nVTOCWLEN EQU   *-VTOCWORK\n         SPACE 2\n         PRINT GEN\n         VTOCOM\n         PRINT NOGEN\n         SPACE 2\n         IEFZB4D0\n         SPACE 2\n         IEFZB4D2\n         SPACE 2\n         DCBD  DEVD=DA,DSORG=PS\n         IHADCBE ,                                            #DD14170\n         SPACE 2\nJFCB     DSECT\n         IEFJFCBN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCFORM": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00@\\x00\\x92\\x08_\\x01\\x10\\x13\\x8f\\x139\\x02\\x8b\\x02+\\x00\\x85\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "2010-05-18T13:39:40", "lines": 651, "newlines": 555, "modlines": 133, "user": "TRIDJK"}, "text": "VTOCFORM TITLE 'VTOC COMMAND FORMAT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND FORMAT ROUTINE                            *\n*                                                                     *\n* FUNCTION -   FORMAT THE DATA INTO THE VTFMT  DSECT FROM THE         *\n*              FORMAT 1 ( AND 3 IF NEEDED ) DSCB.  THIS ROUTINE       *\n*              ALSO GETS THE AREA TO CONTAIN THE FORMATTED            *\n*              DSCB INFORMATION.                                      *\n*                                                                     *\n* OPERATION -  FIRST GET AN AREA FROM THE CURRENT BLOCK, OR GET       *\n*              A BLOCK ( 32K ) OF STORAGE TO USE FOR THE FORMATTED    *\n*              DSCB'S.  MOVE THE DATA OVER FROM THE FORMAT 1 DSCB.    *\n*              THE SPACE CALCULATIONS MAY NEED THE FORMAT 3 DSCB.     *\n*              CATALOG INFORMATION IS OBTIANED VIA LOCATE.  SOME      *\n*              OF THE DSCB INFORMATION IS CONVERTED HERE.             *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, LOCATE         *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB INFORMATION WITH ITS ADDRESS IN     *\n*              FORMATAD.                                              *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n* 1/04/83 - UPDATED BY LAUREEN BEAUCHAINE - CBT:          LMB 1/4/83  *\n*         - UPDATED TO USE KEYWORDS: CYLS/KBYTES/MBYTES   LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO SUPPORT   ABL-ICF\n*           123 EXTENTS FOR VSAM DATA SETS IN AN ICF CATALOG.   ABL-ICF\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO DOUBLE    ABL-GET\n*           THE NUMBER OF DATA SETS PROCESSED (TO 3.2 MEG).     ABL-GET\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO PERFORM   ABL-SOR\n*           A CORRECT SORT (ADD 1 BLANK AFTER EACH DSNAME).     ABL-SOR\n*                                                                     *\n* 5/11/90 - MODIFIED BY TOM ROMANO OF AETNA LIFE TO PROPERLY  TXR 05/90\n*           REPORT A CATALOG ERROR.                           TXR 05/90\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO MAKE ALL VSAM  TANSKY*\n*           DATASETS \"FULL\" INSTEAD OF 0% USED.                 TANSKY*\n*         - ADDED UPD AND RACF INDICATORS AND OPTIONS           TANSKY*\n*                                                                     *\n*11/25/92 - MODIFIED BY A. BRUCE LELAND AT SERENA TO SET     ABL NOV92*\n*           DSORG TO \"PE\" FOR A PDSE DATA SET.               ABL NOV92*\n*                                                                     *\n*08/09/94 - MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ADD         JVH-DSO\n*           SUPPORT FOR HIERARCHIAL DATASETS (HFS) AND          JVH-DSO\n*           EXTENDED MODE SMS DATASETS.                         JVH-DSO\n*                                                                     *\n*                                                                     *\n*14/08/01 - MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD.          *DHC*\n*           INCLUDE CODE TO TEST IF DATASETS ARE IN USE BY        *DHC*\n*           CHECKING THE MAJOR NAME SYSDSN WITH A MINOR NAME OF   *DHC*\n*           THE DATASET NAME OR CLUSTER NAME IF VSAM.             *DHC*\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n* 5/18/10 - CHANGED \"THE VTOC TABLES (&MEG MEG) ARE NOT LARGE ENOUGH\" *\n*           MESSAGE.  INCREASED GETMAIN SIZE TO 65536*2.      DRK MAY10\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         MACRO\n&LAB     DS1TST  &FIELD,&VALUE,&CODE\n&LAB     TM    DS1&FIELD,X'&VALUE'  TEST IT\n         BNO   D&SYSNDX       IF NOT THERE, SKIP ALONG\n         MVC   VTF&FIELD,=CL3'&CODE'\nD&SYSNDX DS    0H\n         MEND\n*\n*\n         EJECT\nVTOCFORM ENTER 12,16          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING FORMWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, PERFORM SOME INITIALIZATION\n*\n         CLI   FIRSTFRM,0     IS THIS THE FIRST TIME?\n         BNE   GETAREA        NO, KEEP ON TRUCKIN'\n         EJECT ,                                                  *DHC*\n***********************************************************************\n*        PERFORM INITIAL HOUSEKEEPING.                            *DHC*\n***********************************************************************\n         SPACE 1                                                  *DHC*\n         L     R0,SRESULT          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,ARESULT          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         L     R0,SS26WRK          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,AS26WRK          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         SPACE 1                                                  *DHC*\n*\n*        ROUTINE INITIALIZATION\n*\n         MVI   FIRSTFRM,255   NOTE THE INITIALIZATION AS DONE\n         MVC   CAMLOC(CAMLEN),CAMCONST  SET UP THE CAMLST\n*\n*        FIND OR GET AN AREA FOR THE FORMATTED DSCB\n*              FIRST SEE HOW BIG IT IS\n*\nGETAREA  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         LH    R1,DSNLEN     GET THE DSNAME LENGTH\n         LA    R4,VTFMTL+1(R1)  GET FORMATTED DSCB LENGTH       ABL-SOR\n*\n*        SEE IF THE CURRENT BLOCK CAN HANDLE IT\n*\nFORMFIT  L     R3,VTCCURLN    GET THE CURRENT AVAILABLE\n         SR    R3,R4          SEE IF IT WILL FIT\n         BM    GOGETMN        NO, GET ANOTHER BLOCK\n*\n*        NO SWEAT, GET THE SPACE FROM THIS BLOCK\n*\n         ST    R3,VTCCURLN    STORE THE NEW ( REDUCED ) CURRENT LENGTH\n         L     R3,VTCCURAD    POINT TO THE CURRENT ADDRESS\n         LA    R5,0(R3,R4)    POINT TO THE END OF THE BLOCK\n         ST    R5,VTCCURAD    AND PLACE THE NEW AVAILABLE ADDRESS\n*\n*        NOW FILL IN THE DATA IN THE FORMATTED DSCB\n*\n         USING VTFMT,R3       SET FORMATTED DSCB ADDRESSABILITY\n         ST    R3,FORMATAD    SAVE THIS BLOCK'S ADDRESS\n         XC    VTFNEXT,VTFNEXT  CLEAR THE SORT POINTER\n         MVC   VTFVOLUM,VOLID SAVE THE VOLUME SERIAL NUMBER\n         MVC   VTFUNIT,UCBDEVT SAVE THE DEVICE TYPE\n         LH    R1,DSNLEN     GET THE LENGTH OF THE DSNAME\n         STH   R1,VTFDSNL     SAVE THE DSNAME LENGTH\n***      BCTR  R1,0           ***MOVE THE NEXT BLANK TOO        ABL-SOR\n         EX    R1,MOVEDSN     MOVE IN THE DSNAME\n         MVC   VTFNOEPV,DS1NOEPV  NUMBER OF EXTENTS\n         MVC   VTFLRECL,DS1LRECL  LOGICAL RECORD LENGTH\n         MVC   VTFBLKSZ,DS1BLKL   BLOCK SIZE\n         MVC   VTFCCHH(8),VTC#CCHH  MOVE IN SELECTED CCHH          ABLC\n*\n*     MOVE IN THE CREATION DATE, EXPIRATION DATE, AND LAST ACCESS DATE\n*\n         MVC   VTFCREDT,DS1CREDT  MOVE OVER CREATION DATE\n         MVC   VTFEXPDT,DS1EXPDT  MOVE OVER EXPIRATION DATE\n         MVC   VTFLSTAC,DS1REFD   MOVE OVER LAST ACCESS DATE\n*\n*        FORMAT THE RECORD FORMAT INTO CHARACTERS\n*\n*\n         MVC   VTFRECFM,BLANKS  BLANK THE FIELD TO START\n         MVC   VTFACTON,BLANKS  ANOTHER BLANK FIELD\n         MVI   VTFDSTYP,C' ' AND STILL ANOTHER\n         LA    R2,VTFRECFM    POINT TO THE FIELD\n         TM    DS1RECFM,X'C0' UNKNOWN RECFM?\n         BZ    RECFM2         YES, TROUBLE\n         TM    DS1RECFM,X'40' IS IT FIXED?\n         BNZ   RECFM3         NO, KEEP TRYING\n         MVI   0(R2),C'F'     YES, SET UP THE FIRST CHAR\n         LA    R2,1(R2)       AND BUMP THE POINTER\n         B     RECFM2         CHECK OTHER ATTRIBUTES\nRECFM3   TM    DS1RECFM,X'80' SEE IF IT'S V OR U\n         BZ    RECFM4         VARIABLE RECFM\n         MVI   0(R2),C'U'     RECFM = U\n         B     RECFM4A        ADD TO THE POINTER AND KEEP LOOKING\nRECFM4   MVI   0(R2),C'V'     VARIABLE\nRECFM4A  LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM2   DS    0H\nRECFM5   TM    DS1RECFM,X'10' IS IT BLOCKED?\n         BZ    RECFM6         NO, SKIP ON\n         MVI   0(R2),C'B'     YES, SET THE SYMBOL\n         LA    R2,1(R2)       GET PAST THE CHAR\nRECFM6   TM    DS1RECFM,X'08' IS IT SPANNED OR STANDARD?\n         BZ    RECFM6A        NO\n         MVI   0(R2),C'S'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHARACTER\nRECFM6A  TM    DS1RECFM,X'20' CHECK TRACK OVERFLOW\n         BZ    RECFM7         NO DICE\n         MVI   0(R2),C'T'     YES, SET IT\n         LA    R2,1(R2)       PUSH THE POINTER ON\nRECFM7   TM    DS1RECFM,X'04' IS IT ASA CONTROL\n         BZ    RECFM8         NO, SKIP ON\n         MVI   0(R2),C'A'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM8   TM    DS1RECFM,X'02' HOW ABOUT MACHINE CARRIAGE CONTROL\n         BZ    RECFM9         NO, SKIP ON\n         MVI   0(R2),C'M'     YES, SET IT\nRECFM9   DS    0H\n*\n*        FORMAT THE DSORG\n*\n         MVC   VTFDSORG,=CL3'   '  CLEAR THE FIELD\n         DS1TST DSORG,80,IS   TRY ISAM\n         DS1TST DSORG,40,PS   TRY SEQUENTIAL\n         DS1TST DSORG,20,DA   TRY DIRECT ACCESS\n         DS1TST DSORG,02,PO   TRY PARTITIONED\n         TM    DS1DSORG,X'02'     A PDS OR A PDSE?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         TM    DS1REFD+3,X'08'    A PDSE DATA SET?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         MVC   VTFDSORG,=CL3'PE ' YES, MARK AS A PDSE         ABL NOV92\nDSORG04  TM    DS1REFD+3,X'02'    A HFS DATASET?                JVH-DSO\n         BNO   DSORG05            NO, BRANCH                    JVH-DSO\n         MVC   VTFDSORG,=CL3'HF ' YES, MARK AS AN HFS           JVH-DSO\nDSORG05  CLC   DS1DSORG(2),=X'0008'  IS IT VSAM?                JVH-DSO\n         BNE   DSORG06            NO, KEEP LOOKING              JVH-DSO\n         MVC   VTFDSORG,=CL3'VS ' YES, FLAG IT                  JVH-DSO\nDSORG06  TM    DS1DSORG,X'01'     IS IT UNMOVEABLE?             JVH-DSO\n         BNO   DSORG07            NO, KEEP ON TRUCKIN'          JVH-DSO\n         MVI   VTFDSORG+2,C'U'    YES, NOTE IT                  JVH-DSO\nDSORG07  TM    DS1REFD+3,X'04'    AN EXTENDED FORMAT DATASET?   JVH-DSO\n         BNO   DSORG08            NO, BRANCH                    JVH-DSO\n         MVI   VTFDSORG+2,C'X'    YES, NOTE IT                  JVH-DSO\nDSORG08  DS    0H                                               JVH-DSO\n*\n*        FORMAT THE SECONDARY ALLOCATION\n*\n         SR    R1,R1          CLEAR A WORK REGISTER\n         IC    R1,DS1SCALO    GET THE ALLOCATION FLAG\n         SRL   R1,6           REMOVE THE BOTTOM 6 BITS ( 75 CENTS )\n         IC    R2,SECAL(R1)   GET THE CHARACTER CODE\n         STC   R2,VTFSECAL    AND SAVE IT FOR LATER\n         MVC   VTFSECAM,DS1SCALO+2  SAVE THE SECONDARY AMOUNT TOO\n         MVI   VTFROUND,C'N'  SET CODE FOR NO ROUND\n         TM    DS1SCALO,X'01' SEE IF ROUND WAS SET\n         BNO   PROTFORM       NO, THE CODE IS SET RIGHT\n         MVI   VTFROUND,C'R'  YES, RESET THE CODE\n*\n*        FORMAT THE PASSWORD PROTECTION\n*\nPROTFORM TM    DS1DSIND,X'14' CHECK THE PASSWORD BITS\n         BO    PROTWRIT       WRITE PROTECT IS X'14'\n         BM    PROTREAD       READ PROTECT IS X'10'\n         MVI   VTFPROT,C'N'   NO PASSWORD PROTECTION\n         B     PROTEND        END OF PROTECTION FORMATTING\nPROTWRIT MVI   VTFPROT,C'W'   SET CODE FOR WRITE PROTECT\n         B     PROTEND        THEN CHECK OTHER ITEMS\nPROTREAD MVI   VTFPROT,C'R'   SET CODE FOR READ/WRITE PROTECT\nPROTEND  DS    0H             END OF PROTECTION FORMATTING\n*                                                               TANSKY\n*        FORMAT THE RACF INDICATOR                              TANSKY\n*                                                               TANSKY\n         MVI   VTFRACF,C'N'        ASSUME NOT RACF INDICATED    TANSKY\n         TM    DS1DSIND,DS1IND40   RACF IND?                    TANSKY\n         BNO   RACFEND               NO, WE'RE RIGHT            TANSKY\n         MVI   VTFRACF,C'Y'        YES, SHOW IT                 TANSKY\nRACFEND  DS    0H                                               TANSKY\n*                                                               TANSKY\n*        FORMAT THE UPDATED INDICATOR                           TANSKY\n*                                                               TANSKY\n         MVI   VTFUPD,C'N'         ASSUME NOT UPDATED           TANSKY\n         TM    DS1DSIND,DS1IND02   UPDATED?                     TANSKY\n         BNO   UPDEND                NO, WE'RE RIGHT            TANSKY\n         MVI   VTFUPD,C'Y'         YES, SHOW IT                 TANSKY\nUPDEND   DS    0H                                               TANSKY\n*\n*        FORMAT THE CATLG\n*\n         MVI   VTFCATLG,C' ' INITIALIZE IT TO BLANKS\n         CLI   CATK+1,0       SHOULD WE DO THE LOCATE?\n         BE    CATEND         NO, SKIP PAST IT\n*\n*        SET UP THE CAMLST\n*\n         LA    R1,DS1DSNAM    POINT TO THE DSNAME\n         ST    R1,CAMLOC+4    SAVE IT IN THE CAMLST\n         LA    R1,LOCWORK     LOCATE WORKAREA\n         ST    R1,CAMLOC+12   SAVE IT IN THE CAMLST\n         LOCATE CAMLOC        CHECK THE CATALOG\n         LTR   R15,R15        TEST THE CATALOG RETURN CODE\n         BZ    CATOK          ZERO, THERE IS AN ENTRY\n         MVI   VTFCATLG,C'N'  SET CODE FOR NOT CATALOGED\n         CH    R15,H8         SEE IF THAT'S THE CASE\n         BE    CATEND         YES, LET IT STAND\n         MVI   VTFCATLG,C'E'  CATALOG ERROR, PROBLEMS\n         B     CATEND         YES, LET IT STAND         TXR 05/90\n*\n*        CATALOG ENTRY IS THERE, SEE THAT THE VOLUME IS THIS ONE\n*\nCATOK    MVI   VTFCATLG,C'C'  SET UP AS A GOOD ENTRY\n         CLC   VOLID,LOCWORK+6  COMPARE THE VOLUME SERIAL NUMBERS\n         BE    CATEND         GOOD, WE'RE DONE\n         SPACE 1                                               ABL-MCAT\n         LH    R1,LOCWORK     NUMBER OF ENTRIES                ABL-MCAT\n         LA    R14,LOCWORK+6  FIRST ENTRY TO COMPARE           ABL-MCAT\nCATNXT   CLC   VOLID,0(R14)   THIS VOLUME SERICAL ?            ABL-MCAT\n         BE    CATEND         YES, IT IS CATALOGED CORRECTLY   ABL-MCAT\n         LA    R14,12(,R14)   NEXT VOLUME NAME IN THE LIST     ABL-MCAT\n         BCT   R1,CATNXT      CHECK NEXT VOLUME                ABL-MCAT\n         SPACE 1                                               ABL-MCAT\n         MVI   VTFCATLG,C'W'  WRONG VOLUME, NOT CATALOGED\nCATEND   DS    0H\n         COPY  VTOCENQ             TEST IF ALLOCATED           *DHC*\n*\n*        FORMAT THE ALLOCATION AND USED QUANTITIES\n*\n         SPACE\n*        CHECK THROUGH THE EXTENTS\n         SPACE\n         SR    R2,R2          CLEAR A WORK REGISTER\n         ICM   R2,B'0001',DS1NOEPV  GET THE NUMBER OF EXTENTS\n         BZ    SPACEND        NO EXTENTS MEANS NO SPACE\n         SR    R4,R4          ZERO THE SPACE COUNTER FOR THE DATA SET\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n         SR    R6,R6          FIRST EXTENT\nEXTNEXT  LR    R14,R6                                           ABL-ICF\n         S     R14,=F'3'                                        ABL-ICF\n         SRDA  R14,32                                           ABL-ICF\n         D     R14,=F'13'     (EXTENT-3) / 13                   ABL-ICF\n         LR    R14,R15        EXTENT TABLE IN USE               ABL-ICF\n         MH    R14,=H'13'                                       ABL-ICF\n         MH    R15,=H'148'                                      ABL-ICF\n         LR    R5,R6          EXTENT - ((EXTENT-3) / 13) * 13   ABL-ICF\n         SR    R5,R14         EXTENT INSTRUCTION ADDRESS        ABL-ICF\n         SLL   R5,2           MULTIPLY IT BY FOUR\n         EX    R0,GETEXT(R5)  GET THE CORRECT ADDRESS\n*\n*        PROCESS THIS EXTENT\n*\n         USING XTDSECT,R5     SET ADDRESSABILITY\n         CLI   XTFLAGS,XTNOEXT  IS THERE AN EXTENT\n         BE    NOEXT          NO, THE EXTENT ISN'T THERE\n         CLI   XTFLAGS,XTCYLBD  IS IT ON CYLINDER BOUNDARIES\n         BNE   FORMALOC       NO, DO IT FOR CYLS AND TRACKS\n*\n*        CYLINDER BOUNDS - BE SURE THE ALLOCATION IS CORRECT\n*\n         ICM   R1,B'0011',XTLOWHH GET THE LOWER TRACK\n         BZ    LOWOK          IT'S ZERO\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+6,C'L'  ON THE LOW CCHH\nLOWOK    LH    R1,XTHIHH      GET THE HIGH TRACK\n         LA    R1,1(R1)       ADD ONE FOR ZERO ADDRESSING\n         CH    R1,DS4DEVSZ+2  IS THIS THE NUMBER OF TRACKS/CYL\n         BE    FORMALOC       YES, GO CALCULATE\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+7,C'H'  ON THE HIGH CCHH\n*\n*        GET THE SPACE FOR NON-CYLINDER ALLOCATIONS\n*\nFORMALOC LH    R1,XTHICC      GET THE HIGH CYLINDER\n         SH    R1,XTLOWCC     MINUS THE LOW CYLINDER\n         MH    R1,DS4DEVSZ+2  TIMES THE NUMBER OF TRACKS PER CYLINDER\n         LH    R8,XTHIHH      GET THE HIGH TRACK\n         SH    R8,XTLOWHH     MINUS THE LOW TRACK\n         AR    R8,R1          TRACKS IN THIS EXTENT ( MINUS 1 )\n         LA    R4,1(R4,R8)    ADD THE TRACKS TOGETHER FOR THIS DATA SET\n*\n*        GET THE NEXT EXTENT\n*\nNOEXT    LA    R6,1(R6)       INCREMENT THE EXTENT COUNTER\n         CR    R6,R2          CHECK FOR THE END\n         BL    EXTNEXT        NOT YET, KEEP GOING\n*\n*        ALL THE EXTENTS ARE SUMMED REGISTER 4 HAS THE SUM\n*\n         BAL   R8,SPACUNIT    CHANGE IT TO THE APPROPRIATE UNITS\n         ST    R4,VTFALLOC    STORE IT FOR LATER\nSPACEND  DS    0H\n*\n*        GET THE TRACKS USED\n*\n         SR    R4,R4          CLEAR THE TRACK ( WOO WOO )\n         CLC   DS1LSTAR,ZEROES IS THE TRACK USED COUNTER SET?\n         BNE   USEDOK         YES, ACCEPT IT\n*        NO, SEE IF THE ZERO IS VALID\n         TM    DS1DSORG,X'40' IS IT SEQUENTIAL?\n         BO    USEDOK0        YES,THE ZERO IS VALID\n         TM    DS1DSORG+1,DS1ACBM  VSAM?                        TANSKY\n         BNO   USEDNVSM              NO, MORE CHECKING          TANSKY\n         MVC   VTFUSED,VTFALLOC    IF VSAM, SET USED=ALLOC      TANSKY\n         B     USEDEND             AND CONTINUE                 TANSKY\nUSEDNVSM DS    0H                                               TANSKY\n         CLC   DS1DSORG(2),ZEROES MAYBE IT WASN'T EVER OPENED DRK MAY10\n         BE    USEDOK0        THEN NO SPACE USED IS OK\n         TM    DS1DSORG,X'0C' CHECK FOR AN INVALID DSORG\n         BO    USEDOK0        NO SPACE USED IS STILL OK\n         MVC   VTFUSED,FMIN1  SET A FLAG UNUSED SPACE UNKNOWN\n         B     USEDEND        USED SPACE IS SET\n*\n*        THE TRACKS USED COUNTER SEEMS OK\n*\n*SEDOK   LH    R4,DS1LSTAR    GET THE LAST TRACK USED\nUSEDOK   ICM   R4,B'0011',DS1LSTAR  GET THE LAST TRACK USED  3/21/90\n         LA    R4,1(R4)       ADD ONE ( ZERO ADDRESSING )\n         BAL   R8,SPACUNIT    CONVERT TO APPROPRIATE UNITS\nUSEDOK0  ST    R4,VTFUSED     SAVE THE AMOUNT OF SPACE USED\nUSEDEND  DS    0H\n         L     R14,VTFALLOC   ALLOCATED TRACKS\n         S     R14,VTFUSED    MINUS USED TRACKS\n         ST    R14,VTFUNUSD   EQUALS UNUSED TRACKS\n         SR    R14,R14\n         SR    R15,R15\n         CLC   VTFALLOC(4),=F'0'\n         BE    USEDEND1\n         L     R15,VTFUSED    USED TRACKS\n         M     R14,=F'100'    MULT BY 100 TO GET PCT\n         D     R14,VTFALLOC   DIVIDE BY ALLOC TO GET PCT USED\nUSEDEND1 STH   R15,VTFPCT     SAVE PCT USED\n*\n*        RETURN\n*\nFORMRET  LEAVE EQ,RC=0\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n*\n*        CONVERT FROM TRACKS TO THE APPROPRIATE UNITS\n*              KBYTES, MBYTES, TRKS, OR CYLS\n*\nSPACUNIT LH    R1,SPACEK      GET THE UNIT TYPE\n         SLL   R1,2           MULTIPLY BY 4\n         B     *+4(R1)        THEN BRANCH TO THE CORRECT ROUTINE\n         B     SPACKB         R1=0  KILOBYTES             LMB 1/4/83\n         B     SPACKB         R1=1  KILOBYTES             LMB 1/4/83\n         B     SPACMB         R1=2  MEGABYTES             LMB 1/4/83\n         B     SPACTRK        R1=3  TRACKS                LMB 1/4/83\n         B     SPACCYL        R1=4  CYLINDERS             LMB 1/4/83\n*        TRACKS\nSPACTRK  BR    R8             WAS SET WHEN WE STARTED\n*        CYLINDERS\nSPACCYL  SR    R0,R0          CLEAR A REGISTER\n         LR    R1,R4          GET THE NUMBER OF TRACKS\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         SRL   R4,2           DIVIDE BY 2 FOR ROUNDING\n         AR    R1,R4          ADD IT IN\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         DR    R0,R4          DIVIDE TO GET ROUNDED CYLINDERS\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        KILOBYTES\nSPACKB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500        ADD UP TO ROUND\n         D     R0,F1000       DIVIDE TO GET KILOBYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        MEGABYTES\nSPACMB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500000     ADD UP TO ROUND\n         D     R0,F1000000    DIVIDE TO GET MEGABYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*\n*        GET A NEW BLOCK OF MAIN STORAGE\n*\nGOGETMN  GETMAIN RU,LV=VTCGETMS,LOC=(ANY,ANY)  GET SOME         WSX-MAX\n*OGETMN  GETMAIN R,LV=VTCGETMS  GET SOME\n         ST    R1,VTCCURAD    SET UP THE AVAILABLE ADDRESS\n         LA    R2,VTCGETMS/1024   GET THE SIZE OF THE BLOCK IN K\n         SLL   R2,10          GET IT INTO BYTES ( TIMES 1024 )\n         ST    R2,VTCCURLN    SO THE FORMATTED DSCB'S CAN USE IT\n*\n*        SAVE THE BLOCK ADDRESS IN THE VTCGETMN TABLE\n*\n         L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nGOGETTAB ICM   R3,B'1111',0(R2) GET THIS ENTRY\n         BNZ   GOGETINC       IF NOT ZERO, KEEP LOOKING\n         ST    R1,0(R2)       SAVE THE NEW ENTRY\n         B     FORMFIT        THEN GO ALLOCATE A FORMATTED DSCB\n*\n*        THIS ENTRY WAS TAKEN, GET THE NEXT ONE\n*\nGOGETINC LA    R2,4(R2)       POINT TO THE NEXT ENTRY\n         BCT   R5,GOGETTAB    COUNT AND LOOP\n*\n*        TABLE OVERFLOW  - ISSUE ERROR MSG\n*              SET A FLAG TO STOP INPUT\n*\n         VTOCMSG TABOVFLW,TABOVSEC  ISSUE A MESSAGE\n         MVI   TABFULL,255    SET A STOP FLAG\n         B     FORMRET        RETURN FROM FORMATTING\n         EJECT\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\n         SPACE\n*        INSTRUCTIONS EXECUTED TO GET THE NEXT EXTENT\nGETEXT   LA    R5,DS1EXT1           1ST EXTENT\n         LA    R5,DS1EXT2           2ND EXTENT\n         LA    R5,DS1EXT3           3RD EXTENT\n         LA    R5,DS3EXTNT+00(R15)  4TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+10(R15)  5TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+20(R15)  6TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+30(R15)  7TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+00(R15)  8TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+10(R15)  9TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+20(R15) 10TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+30(R15) 11TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+40(R15) 12TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+50(R15) 13TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+60(R15) 14TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+70(R15) 15TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+80(R15) 16TH EXTENT                  ABL-ICF\nMOVEDSN  MVC   VTFDSN(0),DS1DSNAM   EXECUTED COMPARE\nZEROES   DC    2F'0'\nFMIN1    DC    F'-1'\nF500     DC    F'512'                                           HXF-512\nF1000    DC    F'1024'                                          HXF-512\nF500000  DC    F'524288'                                        HXF-512\nF1000000 DC    F'1048576'                                       HXF-512\nBLANKS   DC    CL8'                '\nRESNAME  DC    CL8'SYSDSN'         ENQUEUE MAJOR NAME             *DHC*\nSRESULT  DC    F'5120'             SIZE OF RESULTS AREA           *DHC*\nSS26WRK  DC    F'10240'            SIZE OF SVC26 WORK AREA        *DHC*\nCAMCONST CAMLST NAME,*,,*\n         SPACE 1                                                  *DHC*\n***********************************************************************\n*        CATALOG LOCATE OPTIONS LIST                              *DHC*\n***********************************************************************\nOPT1     DC    CL8'ENTYPE  '                                      *DHC*\nOPT2     DC    CL8'ENTNAME '                                      *DHC*\nOPT3     DC    CL8'NAMEDS  '                                      *DHC*\nOPT4     DC    CL8'AMDSBCAT'                                      *DHC*\n         SPACE 1                                                  *DHC*\nOPTLEN   EQU   *-OPT1              LENGTH OF LIST                 *DHC*\nOPTNUM   EQU   OPTLEN/8            NUMBER OF ENTRIES              *DHC*\n         SPACE 1                                                  *DHC*\nH8       DC    H'8'\nSECAL    DC    C'ABTC'        SECONDARY ALLOCATION CODES\n*              ABSOLUTE TRK, BLOCKS, TRACKS, CYLINDERS\n*\n*        PROGRAM MESSAGES\n*\n*        KEEP SIZE AND NUM IN SYNC WITH VTCGETMS AND VTCGETMX DRK MAY10\n*          EQUATES IN DSECT VTOCOM                            DRK MAY10\n         LCLA  SIZE,NUM,MEG                                   DRK MAY10\n&SIZE    SETA  64*1024*2                                      DRK MAY10\n&NUM     SETA  300                                            DRK MAY10\n&MEG     SETA  (&SIZE*&NUM)/(1024*1024)                       DRK MAY10\n         SPACE 1\n*ABOVFLW MSGZ  ' THE VTOC TABLES (19.2 MEG) ARE NOT LARGE ENOUGH TO HAN\n*              DLE THIS REQUEST'                                WSX-MAX\nTABOVFLW MSGZ  ' THE VTOC TABLES (&MEG MEG) ARE NOT LARGE ENOUGH TO HANX\n               DLE THIS REQUEST'                              DRK MAY10\nTABOVSEC MSGZ  ' PARTIAL PROCESSING WILL CONTINUE '\n*\n         EJECT\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nFORMWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nFIRSTFRM DS    X              INITIALIZATION FOR THIS ROUTINE\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMLOC   CAMLST NAME,*,,*\nCAMLEN   EQU   *-CAMLOC\n         DS    0D\nENQSCAN  GQSCAN AREA=(ENQWORK,L'ENQWORK),TOKEN=GQTOKEN,SCOPE=ALL,      X\n               RESNAME=(RESNAME,DS1DSNAM,44),                          X\n               MF=L MODEL ENQ CALL                                *DHC*\nENQLEN   EQU   *-ENQSCAN           LENGTH OF GQSCAN AREA          *DHC*\nLENGTHS  DS    F                   DATA LENGTHS RETURNED BY GQSCAN*DHC*\n         ORG   LENGTHS             REMAP FULLWORD AS TWO HALVES   *DHC*\nLENRIB   DS    H                   LENGTH OF RIB                  *DHC*\nLENRIBE  DS    H                   LENGTH OF RIBE                 *DHC*\nGQTOKEN  DS    F                   STORAGE FOR GQSCAN TOKEN       *DHC*\n         SPACE 2                                                  *DHC*\nARESULT  DC    A(0)                ADDRESS OF RESULTS AREA        *DHC*\nAS26WRK  DC    A(0)                ADDRESS OF SVC26 WORK AREA     *DHC*\n         DS    0F                  ALIGNMENT                      *DHC*\nOPTNLIST DC    (OPTNUM)CL24' '     SVC26 OPTION LIST              *DHC*\nCTGPL2   DC    XL68'00'            CATALOG MANAGEMENT PARM LIST   *DHC*\n         DS    0D                                                 *DHC*\nLOCWORK  DS    265C                                               *DHC*\n         SPACE 1                                                  *DHC*\n         DS    0D                                                 *DHC*\nENQWORK  DS    CL512                                              *DHC*\n         SPACE\n         DS    0D\nLENWORK  EQU   *-FORMWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         PRINT GEN\n         VTFMT\n         PRINT NOGEN\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         SPACE 3\n*        FORMAT 1 AND 3 EXTENT DESCRIPTION\nXTDSECT  DSECT\nXTFLAGS  DS    X\nXTNOEXT  EQU   X'00'          NO EXTENT\nXTDATAB  EQU   X'01'          DAT BLOCKS\nXTOVFLW  EQU   X'02'          OVERFLOW AREA\nXTINDEX  EQU   X'04'          INDEX AREA\nXTUSRLAB EQU   X'40'          USER LABEL EXTENT\nXTSHRCYL EQU   X'80'          SHARING CYLINDERS\nXTCYLBD  EQU   X'81'          CYLINDER BOUNDARIES\nXTSEQ    DS    X              EXTENT SEQUENCE NUMBER\nXTLOWCC  DS    H              LOWER CYLINDER\nXTLOWHH  DS    H              LOWER TRACK\nXTHICC   DS    H              UPPER CYLINDER\nXTHIHH   DS    H              UPPER TRACK\n          PRINT GEN\n          ISGRIB ,             GRS MAPPING MACRO                  *DHC*\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOCMSG": {"ttr": 6149, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LAB     VTOCMSG &MSG1,&MSG2    FIRST LEVEL MESSAGE, OPTIONAL SECOND\n&LAB     LA    R1,&MSG1       POINT TO THE FIRST MESSAGE\n         AIF   ('&MSG2' EQ '').NOSEC  IF NO SECOND LEVEL MSG\n         LA    R0,&MSG2       POINT TO THE SECOND MESSAGE\n         AGO   .SETMSG        SET UP THE MESSAGES\n.NOSEC   SR    R0,R0          NO SECOND LEVEL MESSAGE\n.SETMSG  STM   R0,R1,MSGADDRS SAVE THE MESSAGE ADDRESSES\n*        THEN JUST CALL THE MESSAGE ISSUING ROUTINE\n         VTCALL MSG           AWAY WE GO\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCMSGX": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x00\\x88\\x12O\\x00\\x883o\\t'\\x00D\\x00=\\x00\\x0f\\xc8\\xc1\\xc2\\xd3@@@@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "1988-05-03T00:00:00", "modifydate": "1988-12-01T09:27:00", "lines": 68, "newlines": 61, "modlines": 15, "user": "HABL"}, "text": "VTOCMSGX TITLE 'VTOC COMMAND - ERROR MESSAGE ROUTINE'\n*\n*   VTOC ERROR MESSAGE ROUTINE, R1 POINTS TO VTOC COMMON AT ENTRY\n*\nVTOCMSG  ENTER 12,0           DO THE STANDARD HOUSEKEEPING\n         LR    R11,R1         GET THE PARM REGISTER\n         USING VTOCOM,R11     SET ADDRESSABILITY\n         SPACE\n         LM    R0,R1,MSGADDRS GET THE MESSAGE(S) TO SEND        ABL-PDS\nPUTLHPDS ICM   R15,15,PDSCALL          LOAD ADDRESS OF PDS      ABL-PDS\n         BZ    NOTPDS                  NO                       ABL-PDS\n         BM    RETURN                  ATTENTION RETURN         ABL-PDS\n         SR    R0,R0                   FOR ICM                ABL DEC88\n         ICM   R0,B'0001',1(R1)        LENGTH+4               ABL DEC88\n         SH    R0,=H'4'                LENGTH                 ABL DEC88\n         STCM  R0,B'0001',3(R1)        ADD LENGTH OF OUTPUT   ABL DEC88\n         LA    R1,3(R1)    POINT TO PROPER PLACE              GLA JUN88\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT    ABL-PDS\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?       ABL-PDS\n         BZ    RETURN                  NORMAL RETURN            ABL-PDS\n         OI    PDSCALL,X'80'           **ATTENTION** ENTERED    ABL-PDS\n         B     RETURN                  QUIT                     ABL-PDS\nNOTPDS   DS    0H                                               ABL-PDS\n         LM    R0,R1,MSGADDRS GET THE MESSAGE(S) TO SEND\n         LTR   R0,R0          SECOND LEVEL MSG?\n         BZ    ERRORM1        NO\n         SPACE\n         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA\n         LA    R1,MSGTEXT1\n         SPACE\n         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG\n         LA    R15,0(R14,R1)  ADDR OF END OF MSG\n         LA    R14,1(R14)     JUMP MSG LENGTH\n         STH   R14,0(R1)\n         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS\n         SPACE 2\n         SR    R14,R14        CLEAR CHAIN FIELD\n         LA    R15,1          ONE SEGMENT IN 2ND MSG\n         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL\n*                             OUTPUT LINE DESCRIPTOR ('OLD')\n         LA    R0,PUTOLD2\n         SPACE 3\nERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO\n         LA    R15,1          ONE SEGMENT\n         LR    R0,R1          MSG ADDR\n         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'\n         SPACE\n         LA    R1,PARMLIST\n         USING IOPL,R1\n         SPACE\n         MVC   IOPLECT,ADDRECT\n         MVC   IOPLUPT,ADDRUPT\n         SPACE\n         LA    R0,ATTNECB\n         ST    R0,IOPLECB\n         MVI   ATTNECB,0\n         SPACE 3\n         XC    PARMLIST+16(4),PARMLIST+16\n         PUTLINE PARM=PARMLIST+16,MF=(E,(1)),                          X\n               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)\nRETURN   DS    0H                                               ABL-PDS\n         SPACE 3\n         LEAVE EQ\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         VTOCOM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCMSZ": {"ttr": 6153, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LAB     VTOCMSZ &MSG1          FIRST LEVEL MESSAGE, OPTIONAL SECOND\n&LAB     TPUT   &MSG1,L'&MSG1   TPUT THIS MESSAGE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCOM": {"ttr": 6155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x16\\x00\\x92\\x08O\\x01\\x10\\x13\\x8f\\x137\\x00\\x90\\x00\\x84\\x00\\x13\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1992-03-24T00:00:00", "modifydate": "2010-05-18T13:37:16", "lines": 144, "newlines": 132, "modlines": 19, "user": "TRIDJK"}, "text": "         MACRO\n         VTOCOM  &TYPE\n*\n*        THIS IS THE VTOC COMMAND COMMON AREA\n*\n         AIF   ('&TYPE' EQ 'NODSECT').NODSECT\nVTOCOM   DSECT\n         AGO   .NODS\n.NODSECT ANOP\nVTOCOM   DS    0D\n.NODS    ANOP\n*\n*        WORKING STORAGE AREAS FOR THE VARIOUS ROUTINES\n*\nVTCWMSG  DS    A              WORKING STORAGE FOR THE MSG  ROUTINE\nVTCWEXIT DS    A              WORKING STORAGE FOR THE EXIT ROUTINE\nVTCWEXCP DS    A              WORKING STORAGE FOR THE EXCP ROUTINE\nVTCWCHEK DS    A              WORKING STORAGE FOR THE CHEK ROUTINE\nVTCWFORM DS    A              WORKING STORAGE FOR THE FORM ROUTINE\nVTCWPRNT DS    A              WORKING STORAGE FOR THE PRNT ROUTINE\nVTCWSORT DS    A              WORKING STORAGE FOR THE SORT ROUTINE\n*\n*        ADDRESSES OF THE ROUTINES\n*\nVADMSG   DC    V(VTOCMSG)     ADDRESS OF THE MESSAGE ROUTINE\nVADEXIT  DC    V(VTOCEXIT)    ADDRESS OF THE EXIT ROUTINE\nVADEXCP  DC    V(VTOCEXIT)    ADDRESS OF THE EXCP ROUTINE\nVADCHEK  DC    V(VTOCEXIT)    ADDRESS OF THE CHECK ROUTINE\nVADFORM  DC    V(VTOCEXIT)    ADDRESS OF THE FORMAT ROUTINE\nVADPRNT  DC    V(VTOCEXIT)    ADDRESS OF THE PRINT ROUTINE\nVADSORT  DC    V(VTOCEXIT)    ADDRESS OF THE SORT ROUTINE\n*\n*        TSO COMMAND PROCESSOR AND PARSE DATA\n*\nADDRUPT  DS    A              USER PROFILE TABLE\nADDRECT  DS    A              ENVIRONMENT CONTROL TABLE\nADDRPSCB DS    A              PROTECTED STEP CONTROL BLOCK\nADDRCBUF DS    A              COMMAND BUFFER\n         SPACE\nADDRANSR DS    A              PARSE ANSWER OR PDL ADDRESS\n         SPACE\nPARMLIST DS    8A             INTERNAL PARM AREA ( MSG )\nATTNECB  DS    F              ECB FOR ATTENTIONS\nDOUBLE   DS    D\n         SPACE\nMSGADDRS DS    2A             ADDRESSES OF MESSAGES FOR VTOCMSG\nMSGTEXT1 DS    XL124\nMSGTEXT2 DS    XL124\n         SPACE 3\nPUTOLD1  DS    3F\nPUTOLD2  DS    3F\n*\n*        PARAMETER LIST FOR THE EXIT ROUTINE\n*\nEXITLIST DS    0F\nEXITAREA DS    A       WORKAREA LOCATION\nDSCBADDR DS    A       ADDRESS OF THE DSCB\nFORMATAD DS    A       ADDRESS OF THE FORMATTED DSCB\nCPPLADDR DS    A       ADDRESS OF THE CPPL\nACTIONAD DS    A       ADDRESS OF THE RECOMMENDED OR REQUESTED ACTION\n*\n*        INTER ROUTINE FLAGS\n*\nVTCEFUNC DS    X              VTOCEXCP FUNCTION FLAG\nVTCFMTCK DS    X              FORMAT IS CALLED BY CHECK RTN\nVTCFMTCD EQU   X'80'          FORMAT WAS CALLED BY CHECK\nVTCFMTCC EQU   X'08'          FORMAT WAS CALLED BY CHECK THIS CALL\n*\nTABFULL  DS    X             FLAG TABLES FULL, STOP INPUT\nLOCAT    DS    X              FLAG TO PERFORM CATALOG LOCATE\nVTCEPRNT DS    X               PRINT END AND CLEANUP FLAG\nDSNLEN   DS    H              LENGTH OF THE DSNAME (NON-BLANKS)\nATABTITL DS    A              ADDRESS OF TABLE OF TITLES, LENGTHS\n*\n*\n*\n*        WORKING STORAGE FOR VOLUME UCB SEARCH\n*\nADDR     DS    CL4     UCB ADDRESS IN CHARACTERS                ABL-410\nVOLSER   DS    CL6     VOLUME SERIAL NUMBER FROM PARSE\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\nFLAG     DS    X       UCB SEARCH FLAG\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nUCBDEVT  DS    CL4     PRINTABLE FORM OF DEVICE TYPE            TANSKY\n*\n*\n*\nSORTTAB  DS    16F\n*\n* EACH ENTRY CONTAINS A KEY OFFSET (2 BYTES) AND A KEY LENGTH (2 BYTES)\n* THIS TABLE IS BUILT AT PARSE TIME ACCORDING TO THE SORT PARAMETERS\n* SPECIFIED. THE 1ST PARM IS THE HIGH KEY AND SO ON.\n*\n*\n*\n*        ADDRESSES OF GETMAIN FOR FORMATTED DATA\n*\nVTCCURAD DS    A             CURRENT AVAILABLE ADDRESS\nVTCCURLN DS    A             CURRENT AVAILABLE LENGTH\nVTCGETMN DS    F             TABLE OF POINTERS TO 32KB AREAS    JVH-MAX\nVTCGETMX EQU   300           NUMBER OF POINTERS IN PRIOR TABLE  WSX-MAX\nVTCGETMS EQU   65536*2        GETMAIN SIZE                    DRK MAY10\n*TCGETMS EQU   65536          GETMAIN SIZE                      WSX-MAX\n*TCGETMX EQU   150           NUMBER OF POINTERS IN PRIOR TABLE  JVH-MAX\n*TCGETMS EQU   32768          GETMAIN SIZE\n*\n*        PRINT ENTRIES - PAGE AND LINE COUNTERS\n*\nLINECT   DS    H              LINE COUNT\nLINEMAX  DS    H              MAXIMUM LINES PER PAGE\nPAGECT   DS    H              PAGE COUNT\nLINELEN  DS    H              LENGTH OF THE PRINT LINE\n*\n*\n*          VARIOUS ITEMS\n*\nFMT4     DS    XL44           SPACE FOR DSCB NAME\n         IECSDSL1 4          SAVE EACH FORMAT 4 DSCB\nTRKSIZE  DS    F                                               ABL-3380\n         DS    0D\nFMT3     DS    0XL148         SPACE FOR FORMAT3 DSCB\n         IECSDSL1 3\n         DS    9XL148         SUPPORT UP TO 123 DASD EXTENTS    ABL-ICF\nUCBPARMS DS    4A             PARMS FOR UCB SCAN SERVICES       ABL-410\nUCBANSR  DS    A              RESULT UCB ADDRESS                ABL-UCB\n         DS    0D                                               ABL-UCB\nUCBWORK  DS    CL216          UCB SCAN WORK AREA                ABL-410\n         DS    0D\nEDTWORK  DS    (X'58')C       EDTINFO WORK AREA                 DNS\n         DS    0D                                               DNS\nPDSCALL  DS    F              RETURN ADDRESS TO PDS FOR OUTPUT  ABL-PDS\nVTC#CCHH DS    CL8            SAVE AREA FOR EXTENT CCHH-CCHH       ABLC\n*\n*        HASH SORT TABLE, POINTERS TO FIRST ENTRIES\n*\nVTCSORTH DS    256A           POINT TO FORMATED ENTRIES\nVTCSORTE EQU   *              END OF LIST\n*                                                               ABL-410\n* NOTE: SECOND BASE IN VTOC MEMBER USED TO REACH THE REST:      ABL-410\n*                                                               ABL-410\nSRVUCBDC DS    CL128          UCB SAVE AREA FOR UCB DCE AREA    ABL-410\nSRVUCBUC DS    CL48           UCB SAVE AREA FOR UCB COPY AREA   ABL-410\nSRVUCBIC DS    CL48           UCB SAVE AREA FOR UCB TOKEN       ABL-410\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCPARS": {"ttr": 6159, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x19)o\\x01\\x19)o\\x135\\x00\\xe1\\x00\\xe1\\x00\\x00\\xe2\\xc3\\xd5\\xe2\\xf0\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-10-23T00:00:00", "modifydate": "2019-10-23T13:35:18", "lines": 225, "newlines": 225, "modlines": 0, "user": "SCNS03"}, "text": "         PUSH  PRINT\n         PRINT NOGEN\nPCLMAIN  IKJPARM DSECT=PDL\n         SPACE 2\nVOLS     IKJPOSIT DSNAME,VOLSER,LIST,                                  $\n               PROMPT='VOLUMES TO SEARCH AND OTHER PARAMETERS',        $\n               HELP=('VOLUME SERIAL NUMBERS WHICH ARE TO BE SEARCHED FO$\n               DATA SETS TO LIST')\n         SPACE 2\nLEVKEY   IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=SUBLEV\n         SPACE 2\nEXLKEY   IKJKEYWD ,                                             GLA-EXL\n         IKJNAME 'EXLEVEL',SUBFLD=SUBEXL                        GLA-EXL\n         SPACE 2                                                GLA-EXL\nENDKEY   IKJKEYWD\n         IKJNAME 'ENDING',SUBFLD=SUBEND\n         SPACE 2\nCONTAINK IKJKEYWD\n         IKJNAME 'CONTAINING',SUBFLD=SUBCONT\n         SPACE 2\n         SPACE 2\n* 12-30-82 (CBT)  UPDATED TO SUPPORT KBYTES,MBYTES,CYLS\nSPACEK   IKJKEYWD DEFAULT='TRKS'\n         IKJNAME 'KBYTES'\n         IKJNAME 'MBYTES'\n         IKJNAME 'TRKS'\n         IKJNAME 'CYLS'\n         IKJNAME 'BLOCKS'\n         SPACE 2\nCATK     IKJKEYWD\n         IKJNAME 'CAT'\n         SPACE 2\nENQK     IKJKEYWD\n         IKJNAME 'ENQ'\n         SPACE 2\nSORTK    IKJKEYWD\n         IKJNAME 'SORT',SUBFLD=SUBSORTS\n         IKJNAME 'NOSORT'\n         SPACE 2\nBREAKK   IKJKEYWD\n         IKJNAME 'BREAK',SUBFLD=SUBBREAK\n         SPACE 2\nLIMITK   IKJKEYWD\n         IKJNAME 'LIMIT',SUBFLD=SUBLIMIT\n         SPACE 2\nANDOR1K  IKJKEYWD\n         IKJNAME 'AND1',SUBFLD=SUBAO1,ALIAS='AND'\n         IKJNAME 'OR1',SUBFLD=SUBAO1,ALIAS='OR'\n         SPACE 2\nANDOR2K  IKJKEYWD\n         IKJNAME 'AND2',SUBFLD=SUBAO2\n         IKJNAME 'OR2',SUBFLD=SUBAO2\n         SPACE 2\nANDOR3K  IKJKEYWD\n         IKJNAME 'AND3',SUBFLD=SUBAO3\n         IKJNAME 'OR3',SUBFLD=SUBAO3\n         SPACE 2\nPRINTK   IKJKEYWD\n         IKJNAME 'PRINT',SUBFLD=SUBPRINT\n         IKJNAME 'NOPRINT'\n         SPACE 2\nCHARSK   IKJKEYWD\n         IKJNAME 'CHARS',SUBFLD=SUBCHARS\n         SPACE 2\nLINESK   IKJKEYWD\n         IKJNAME 'LINES',SUBFLD=SUBLINES\n         SPACE 2\nHEADK    IKJKEYWD\n         IKJNAME 'HEADING',SUBFLD=SUBHEAD\n         IKJNAME 'NOHEADING'\n         SPACE 2\nTOTALK   IKJKEYWD\n         IKJNAME 'TOTALS',SUBFLD=SUBTOTAL\n         IKJNAME 'NOTOTALS'\n         SPACE 2\nOUTPUTK  IKJKEYWD\n         IKJNAME 'OUTPUT'\n         SPACE 2\nFORMATK  IKJKEYWD\n         IKJNAME 'FORMAT',SUBFLD=SUBFORMT\n         SPACE 2\nDSNPLNK  IKJKEYWD\n         IKJNAME 'DSNLEN',SUBFLD=SUBDSNLN\n         SPACE 5\nSUBLEV   IKJSUBF\nLEVEL    IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2                                                GLA-EXL\nSUBEXL   IKJSUBF ,                                              GLA-EXL\nEXLEVEL  IKJPOSIT DSNAME,LIST,                                  GLA-EXLX\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO EXCLUDE'  EXL\n         SPACE 2\nSUBEND   IKJSUBF\nENDING   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='ENDING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBCONT  IKJSUBF\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO ALLOW    ABL-CONT\n*           CONT(123) OR CONT(.DATA)                           ABL-CONT\n*                                                                     *\n*ONTAIN  IKJPOSIT DSNAME,LIST,\n*              PROMPT='CHARACTER STRING CONTAINED IN DSNAMES TO PROCESS\nCONTAIN  IKJIDENT 'PARTIAL DSNAME',LIST,MAXLNTH=44,FIRST=ANY,          X\n               PROMPT='PARTIAL DSNAME',OTHER=ANY,                      X\n               HELP=('CHARACTER STRING TO BE SEARCHED FOR IN DSNAMES')\n         SPACE 2\nSUBSORTS IKJSUBF\nSUBSORT  IKJIDENT 'SORT FIELDS',LIST,FIRST=ALPHA,MAXLNTH=6\n         SPACE 2\nSUBBREAK IKJSUBF\nBREAK    IKJIDENT 'NUMBER OF CHARACTERS FOR A BREAK',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='3'\n         SPACE 2\nSUBCHARS IKJSUBF\nCHARSPL  IKJIDENT 'NUMBER OF CHARACTERS PER LINE   ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\nBLKSZSET IKJIDENT 'PHYSICAL BLOCK SIZE',FIRST=NUMERIC,OTHER=NUMERIC,   X\n               MAXLNTH=5\n         SPACE 2\nSUBLINES IKJSUBF\nLINESPP  IKJIDENT 'NUMBER OF LINES PER PAGE        ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\n         SPACE 2\nSUBPRINT IKJSUBF\nSUBPRTKY IKJIDENT 'ADD, REP, NEW, OR DEL',                             X\n               FIRST=ALPHA,OTHER=ALPHA,MAXLNTH=3\nSUBPRTIT IKJIDENT 'ITEMS TO PRINT',LIST,FIRST=ALPHA,MAXLNTH=6\n         SPACE 2\nSUBHEAD  IKJSUBF\nHEADING  IKJPOSIT QSTRING\n         SPACE 2\nSUBTOTAL IKJSUBF\nTOTALN   IKJIDENT 'NUMBER OF CHARACTERS FOR TOTALS',FIRST=NUMERIC,     X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='0'\n         SPACE 3\nSUBLIMIT IKJSUBF\nSUBLKEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUBLOPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUBLVALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 3\nSUBAO1   IKJSUBF\nSUB1KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB1OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB1VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO2   IKJSUBF\nSUB2KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB2OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB2VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO3   IKJSUBF\nSUB3KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB3OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB3VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBFORMT IKJSUBF\nFORMATSP IKJIDENT 'FORMAT TYPES TO OUTPUT',LIST,FIRST=NUMERIC,         X\n               MAXLNTH=1,DEFAULT='1'\n         SPACE 2\nSUBDSNLN IKJSUBF\nDSNPLN   IKJIDENT 'LENGTH OF DSNAME TO PRINT',FIRST=NUMERIC,           X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='44'\nDSNLNTYP IKJKEYWD DEFAULT='TRUNCATE'\n         IKJNAME 'TRUNCATE'\n         IKJNAME 'MULTILINE'\n         IKJENDP\n         SPACE 2\n         POP   PRINT\nACTION   EQU   1\nVOLUME   EQU   2\nCDATE    EQU   3\nLSTUS    EQU   4\nEXPDT    EQU   5\nALLOC    EQU   6\nUNUSED   EQU   7\nPCT      EQU   8\nEXT      EQU   9\nDSORG    EQU   10\nRECFM    EQU   11\nBLKSZ    EQU   12\nLRECL    EQU   13\nPASS     EQU   14\nCAT      EQU   15\nSECT     EQU   16\nSECQ     EQU   17\nUNIT     EQU   18\nROUND    EQU   19\nTYPE     EQU   20\nUSED     EQU   21\nCCHH     EQU   22\nUPD      EQU   23\nRACF     EQU   24\nENQ      EQU   25                                                 *DHC*\nDUMMY4   EQU   26\nDUMMY5   EQU   27\nDSNAME   EQU   28\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCPARX": {"ttr": 6404, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x923\\x0f\\x00\\x973\\x7f\\t\\x13\\x00\\xde\\x00\\xdd\\x00\\x1d\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-11-25T00:00:00", "modifydate": "1997-12-03T09:13:00", "lines": 222, "newlines": 221, "modlines": 29, "user": "TRIDJK"}, "text": "*\n* FOR USE WITH VTOCPRNT (OLDER VERSION)\n*\n         PUSH  PRINT\n         PRINT NOGEN\nPCLMAIN  IKJPARM DSECT=PDL\n         SPACE 2\nVOLS     IKJPOSIT DSNAME,VOLSER,LIST,                                  $\n               PROMPT='VOLUMES TO SEARCH AND OTHER PARAMETERS',        $\n               HELP=('VOLUME SERIAL NUMBERS WHICH ARE TO BE SEARCHED FO$\n               DATA SETS TO LIST')\n         SPACE 2\nLEVKEY   IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=SUBLEV\n         SPACE 2\nEXLKEY   IKJKEYWD ,                                             GLA-EXL\n         IKJNAME 'EXLEVEL',SUBFLD=SUBEXL                        GLA-EXL\n         SPACE 2                                                GLA-EXL\nENDKEY   IKJKEYWD\n         IKJNAME 'ENDING',SUBFLD=SUBEND\n         SPACE 2\nCONTAINK IKJKEYWD\n         IKJNAME 'CONTAINING',SUBFLD=SUBCONT\n         SPACE 2\n         SPACE 2\n* 12-30-82 (CBT)  UPDATED TO SUPPORT KBYTES,MBYTES,CYLS\nSPACEK   IKJKEYWD DEFAULT='TRKS'\n         IKJNAME 'KBYTES'\n         IKJNAME 'MBYTES'\n         IKJNAME 'TRKS'\n         IKJNAME 'CYLS'\n         IKJNAME 'BLOCKS'\n         SPACE 2\nCATK     IKJKEYWD\n         IKJNAME 'CAT'\n         SPACE 2\nSORTK    IKJKEYWD\n         IKJNAME 'SORT',SUBFLD=SUBSORTS\n         IKJNAME 'NOSORT'\n         SPACE 2\nBREAKK   IKJKEYWD\n         IKJNAME 'BREAK',SUBFLD=SUBBREAK\n         SPACE 2\nLIMITK   IKJKEYWD\n         IKJNAME 'LIMIT',SUBFLD=SUBLIMIT\n         SPACE 2\nANDOR1K  IKJKEYWD\n         IKJNAME 'AND1',SUBFLD=SUBAO1,ALIAS='AND'\n         IKJNAME 'OR1',SUBFLD=SUBAO1,ALIAS='OR'\n         SPACE 2\nANDOR2K  IKJKEYWD\n         IKJNAME 'AND2',SUBFLD=SUBAO2\n         IKJNAME 'OR2',SUBFLD=SUBAO2\n         SPACE 2\nANDOR3K  IKJKEYWD\n         IKJNAME 'AND3',SUBFLD=SUBAO3\n         IKJNAME 'OR3',SUBFLD=SUBAO3\n         SPACE 2\nPRINTK   IKJKEYWD\n         IKJNAME 'PRINT',SUBFLD=SUBPRINT\n         IKJNAME 'NOPRINT'\n         SPACE 2\nCHARSK   IKJKEYWD\n         IKJNAME 'CHARS',SUBFLD=SUBCHARS\n         SPACE 2\nLINESK   IKJKEYWD\n         IKJNAME 'LINES',SUBFLD=SUBLINES\n         SPACE 2\nHEADK    IKJKEYWD\n         IKJNAME 'HEADING',SUBFLD=SUBHEAD\n         IKJNAME 'NOHEADING'\n         SPACE 2\nTOTALK   IKJKEYWD\n         IKJNAME 'TOTALS',SUBFLD=SUBTOTAL\n         SPACE 2\nOUTPUTK  IKJKEYWD\n         IKJNAME 'OUTPUT'\n         SPACE 2\nFORMATK  IKJKEYWD\n         IKJNAME 'FORMAT',SUBFLD=SUBFORMT\n         SPACE 2\nDSNPLNK  IKJKEYWD\n         IKJNAME 'DSNLEN',SUBFLD=SUBDSNLN\n         SPACE 5\nSUBLEV   IKJSUBF\nLEVEL    IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2                                                GLA-EXL\nSUBEXL   IKJSUBF ,                                              GLA-EXL\nEXLEVEL  IKJPOSIT DSNAME,LIST,                                  GLA-EXLX\n               PROMPT='BEGINNING CHARACTERS OF DSNAMES TO EXCLUDE'  EXL\n         SPACE 2\nSUBEND   IKJSUBF\nENDING   IKJPOSIT DSNAME,LIST,                                         X\n               PROMPT='ENDING CHARACTERS OF DSNAMES TO PROCESS'\n         SPACE 2\nSUBCONT  IKJSUBF\n* 9/16/85 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO ALLOW    ABL-CONT\n*           CONT(123) OR CONT(.DATA)                           ABL-CONT\n*                                                                     *\n*ONTAIN  IKJPOSIT DSNAME,LIST,\n*              PROMPT='CHARACTER STRING CONTAINED IN DSNAMES TO PROCESS\nCONTAIN  IKJIDENT 'PARTIAL DSNAME',LIST,MAXLNTH=44,FIRST=ANY,          X\n               PROMPT='PARTIAL DSNAME',OTHER=ANY,                      X\n               HELP=('CHARACTER STRING TO BE SEARCHED FOR IN DSNAMES')\n         SPACE 2\nSUBSORTS IKJSUBF\nSUBSORT  IKJIDENT 'SORT FIELDS',LIST,FIRST=ALPHA,MAXLNTH=6\n         SPACE 2\nSUBBREAK IKJSUBF\nBREAK    IKJIDENT 'NUMBER OF CHARACTERS FOR A BREAK',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='3'\n         SPACE 2\nSUBCHARS IKJSUBF\nCHARSPL  IKJIDENT 'NUMBER OF CHARACTERS PER LINE   ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\nBLKSZSET IKJIDENT 'PHYSICAL BLOCK SIZE',FIRST=NUMERIC,OTHER=NUMERIC,   X\n               MAXLNTH=5\n         SPACE 2\nSUBLINES IKJSUBF\nLINESPP  IKJIDENT 'NUMBER OF LINES PER PAGE        ',FIRST=NUMERIC,    X\n               OTHER=NUMERIC,MAXLNTH=3\n         SPACE 2\nSUBPRINT IKJSUBF\nSUBPRTKY IKJIDENT 'ADD, REP, NEW, OR DEL',                             X\n               FIRST=ALPHA,OTHER=ALPHA,MAXLNTH=3\nSUBPRTIT IKJIDENT 'ITEMS TO PRINT',LIST,FIRST=ALPHA,MAXLNTH=6\n         SPACE 2\nSUBHEAD  IKJSUBF\nHEADING  IKJPOSIT QSTRING\n         SPACE 2\nSUBTOTAL IKJSUBF\nTOTALN   IKJIDENT 'NUMBER OF CHARACTERS FOR TOTALS',FIRST=NUMERIC,     X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='0'\n         SPACE 3\nSUBLIMIT IKJSUBF\nSUBLKEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUBLOPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUBLVALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 3\nSUBAO1   IKJSUBF\nSUB1KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB1OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB1VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO2   IKJSUBF\nSUB2KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB2OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB2VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBAO3   IKJSUBF\nSUB3KEY IKJIDENT 'FIELD IN DATA SET CONTROL BLOCK TO COMPARE',         X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8\n         SPACE 2\nSUB3OPER IKJIDENT 'OPERATOR FOR COMPARISON',FIRST=ALPHA,OTHER=ALPHA,   X\n               MAXLNTH=2,                                              X\n               PROMPT=' OPERATORS ARE EQ, NE, LT, LE, GT, AND GE'\n         SPACE 2\nSUB3VALU IKJIDENT 'COMPARISON VALUE',FIRST=ALPHANUM,                   X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='VALUE TO COMPARE FOR DATA SET KEYWORDS'\n         SPACE 2\nSUBFORMT IKJSUBF\nFORMATSP IKJIDENT 'FORMAT TYPES TO OUTPUT',LIST,FIRST=NUMERIC,         X\n               MAXLNTH=1,DEFAULT='1'\n         SPACE 2\nSUBDSNLN IKJSUBF\nDSNPLN   IKJIDENT 'LENGTH OF DSNAME TO PRINT',FIRST=NUMERIC,           X\n               OTHER=NUMERIC,MAXLNTH=2,DEFAULT='44'\nDSNLNTYP IKJKEYWD DEFAULT='TRUNCATE'\n         IKJNAME 'TRUNCATE'\n         IKJNAME 'MULTILINE'\n         IKJENDP\n         SPACE 2\n         POP   PRINT\nACTION   EQU   1\nVOLUME   EQU   2\nCDATE    EQU   3\nLSTUS    EQU   4\nEXPDT    EQU   5\nALLOC    EQU   6\nUNUSED   EQU   7\nPCT      EQU   8\nEXT      EQU   9\nDSORG    EQU   10\nRECFM    EQU   11\nBLKSZ    EQU   12\nLRECL    EQU   13\nPASS     EQU   14\nCAT      EQU   15\nSECT     EQU   16\nSECQ     EQU   17\nUNIT     EQU   18\nROUND    EQU   19\nTYPE     EQU   20\nUSED     EQU   21\nCCHH     EQU   22\nDUMMY3   EQU   23\nDUMMY4   EQU   24\nDUMMY5   EQU   25\nDSNAME   EQU   26\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCPRNT": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x01\\x00\\x88\\x12o\\x01\\x01\"o\\x11$\\x04A\\x04\\x1f\\x00*\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1988-05-05T00:00:00", "modifydate": "2001-08-14T11:24:01", "lines": 1089, "newlines": 1055, "modlines": 42, "user": "SBGOLOB"}, "text": "VTOCPRNT TITLE 'VTOC COMMAND PRINT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND PRINT ROUTINE                             *\n*                                                                     *\n* FUNCTION -   PRINT THE DATA PASSED TO IT.  IT WILL USE THE DDNAME   *\n*              SYSOUT IF IT IS ALLOCATED, AND WILL USE THE VTOCMSG    *\n*              ROUTINE IF NOT.  IT CAN ALSO PUT OUT THE DATA TO       *\n*              AN OUTPUT DATA SET.  TOTALS ARE COMPUTED HERE.         *\n*                                                                     *\n* OPERATION -  FOR UNSORTED DATA, GET THE CURRENT ENTRY, ADD TO THE   *\n*              TOTALS, AND OUTPUT IT.  IF THE DATA IS SORTED, THE     *\n*              ACTION IS MORE COMPLEX, BECAUSE ALL THE DATA SETS      *\n*              ARE TO BE OUTPUT.  THE TOTALS AND BREAKS MAY BE        *\n*              NEEDED AT ANY POINT.                                   *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES, WITH TOTALS AND BREAKS AS NEEDED.    *\n*              ALSO TO THE OUTPUT DATA SET, IF NEEDED.  IF SYSOUT     *\n*              IS NOT ALLOCATED, VTOCMSG IS USED FOR OUTPUT.          *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n*   1/4/83 UPDATED CODE TO PROCESS CYLS,KBYTES,MBYTES     LMB 1/4/83  *\n*          LAUREEN BEAUCHAINE  -  CBT                     LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-EXT\n*           LIM(EX GT 2) TO MEAN EXTENTS (NOT EXPDT).           ABL-EXT\n*                                                                     *\n* 5/05/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           TERMINATE PRINT OUTPUT AFTER AN ATTENTION FROM PDS  ABL-PDS\n*                                                                     *\n* 6/02/88 - MODIFIED BY GUY ALBERTELLI AT BFGOODRICH TO         GLA-PDS\n*           NOT PASS BACK THE HEADING OR TOTAL LINES            GLA-PDS\n*                                                                     *\n* 8/24/88 - MODIFIED BY BRUCE LELAND TO STILL PASS BACK         GLA-PDS\n*           THE HEADING LINES                                   GLA-PDS\n*                                                                     *\n* 3/20/90 - MODIFIED BY A. BRUCE LELAND AT SERENA TO ADD            ABL\n*           ONE ADDITIONAL DIGIT TO TOTAL DATA SETS NUMBER          ABL\n*                                                                     *\n* 12/19/97- MODIFIED BY JOHN KALINICH AT USA LSSC TO ADD YEAR   Y2K\n*           2000 SUPPORT FOR DATES.                             Y2K\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ELIMINATE   JVH-FIX\n*           THE ASSEMBLER WARNING MESSAGES WHEN USING THE       JVH-FIX\n*           HIGH LEVEL ASSEMBLER FROM IBM.                      JVH-FIX\n*                                                                     *\n***********************************************************************\n*\n*        MACRO FOR DEFINING FAKE PDE FOR A DEFAULT LIST\n*\n         EJECT\nVTOCPRNT ENTER 12,20          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING PRNTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE PRINT CLEAN - CLOSE AND FREEMAIN\n*\n         CLI   VTCEPRNT,0     IS IT TIME\n         BNE   PRNTCLEN       YES, GO DO IT\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, SET UP THE DCB'S AND OPEN THEM\n*\n         CLI   FIRSTIM,0      IS THIS THE FIRST TIME?\n         BNE   CHKSORT        NO, KEEP ON TRUCKIN'\n         B     PRTINIT    INITIALIZE FOR PRINTING\n*\n*        CHECK TO SEE IF THE DATA IS SORTED\n*\nCHKSORT  CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   SORTED         NO, THE ENTRIES ARE SORTED\n*\n*        NOSORT WAS SPECIFIED.  ONLY THE CURRENT ENTRY IS AVAILABLE\n*\n         L     R3,FORMATAD    POINT TO THE ENTRY\n         USING VTFMT,R3       FORMATTED DSCB ADDRESSABILITY\n         LTR   R3,R3          IS IT THERE?\n         BZ    CHEKTOT        NO, SEE IF A TOTAL HAS BEEN OUTPUT\n         XC    FORMATAD,FORMATAD  CLEAR THE ADDRESS FOR LATER\n*\n*        ADD TO THE TOTALS\n*\n         BAL   R8,ADDTOT      GO DO IT\n*\n*        SEE IF THE OUTPUT DATA SET IS WANTED\n*\n         TM    OUTDCB+48,X'10'  IS THE DCB OPEN?\n         BNO   NOOUTPT        NO, SKIP ALONG\n         BAL   R8,OUTPUT      YES, GO DO IT\n*\n*        SEE IF THERE'S PRINTING TO DO\n*\nNOOUTPT  CLI   PRINTK+1,2     WAS NOPRINT SPECIFIED?\n         BE    VTRET          YES, WE'RE DONE FOR NOW\n         BAL   R8,PRINT       NO, PRINT OUT THE ENTRY\n*\n*        RETURN FROM WHENCE WE CAME\n*\nVTRET    LEAVE EQ,RC=0        EXEUNT\n*\n*        NOSORT, CHECK FOR OUTPUTTING THE TOTALS\n*\nCHEKTOT  TM    ENDTOTAL,ENTOTOUT  WAS THE TOTAL OUTPUT BEFORE?\n         BO    VTRET          YES, JUST RETURN\n         BAL   R8,PRNTOT      NO, OUTPUT THE TOTAL\n         OI    ENDTOTAL,ENTOTOUT  REMEMBER THE TOTAL IS OUT\n         B     VTRET          THEN RETURN\n         EJECT\n*\n*        THE DATA IS SORTED, SO THE LISTS MUST BE EMPTIED.\n*        CHECK EACH ITEM FOR A TOTAL AND FOR A BREAK\n*        OUTPUT TO PRINT AND/OR THE OUTPUT DATA SET\n*\n*\n*        FIRST GET THE TOTAL AND BREAK COUNTS FOR COMPARES\n*\nSORTED   LA    R1,TOTALN      POINT TO THE TOTAL PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETTNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,ENDTONLY  YES, TOTALS AT THE END ONLY\nSETTNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMTOTAL   SET THE TOTAL COUNT\n         LA    R1,BREAK       POINT TO THE BREAK PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETBNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,NOBREAK   YES, BREAK  AT THE END ONLY\nSETBNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMBREAK   SET THE BREAK COUNT\n*\n*        START GOING THROUGH THE LISTS, PROCESS THE ENTRIES\n*\n         LA    R4,VTCSORTH    POINT TO THE LISTS\n         LA    R5,VTCSORTE    POINT TO THE END OF THE LISTS\n         ST    R5,ADDREND     SAVE THE ADDRESS\nNEWLIST  L     R3,0(R4)       GET THE FIRST ENTRY FROM THIS LIST\n         LTR   R3,R3          ANYTHING ON THIS LIST?\n         BZ    NEXTLIST       NO, GET ANOTHER LIST\n*\n*        THIS IS AN ENTRY, DO THE TOTALS, PRINT, AND OUTPUT\n*        CHECK FOR TOTALS AND BREAKS FIRST\n*\nGOTENTRY CLI   PRINTK+1,2     WAS NOPRINT SET?\n         BE    CHKOUTPT       YES, SKIP INTERIM TOTALS\n         MVI   TOTLAST,0      SET UP FLAG FOR TOTAL AS LAST ACTION\n*        NOTE - EXTENSION - OUTPUT INTERIM TOTALS WITH THE KEY\n         TM    ENDTOTAL,ENDTONLY  END TOTAL ONLY?\n         BO    CHKBREAK       YES, SEE ABOUT BREAKS\n         LH    R2,NUMTOTAL    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    CHKBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, PRINT THE TOTALS FIRST\n*\n         BAL   R8,PRNTOT      PRINT THE TOTALS\n*\n*        CHECK FOR A BREAK\n*\nCHKBREAK TM    ENDTOTAL,NOBREAK   NO BREAKS THIS TIME?\n         BO    SKPBREAK       YES, SKIP PAST BREAKS\n         LH    R2,NUMBREAK    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    SKPBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, GET A NEW PAGE\n*\n         MVC   LINECT,LINEMAX BE SURE THE NEXT ITEM GETS A NEW PAGE\n         MVI   TOTLAST,0      DON'T SKIP A LINE AFTER TOTAL\n         LA    R1,VTFDSN     POINT TO THE DSNAME\n         ST    R1,LASTKEY    SAVE THE ADDRESS FOR BREAK COMPARES\n*\n*        PRINT THE ITEM\n*\nSKPBREAK CLI   TOTLAST,0      WAS A TOTAL NOT FOLLOWED BY A BREAK?\n         BE    SKPBREA2       NO, CONTINUE NORMALLY\n         MVC   MSGBL,MSGBLC   YES, SET UP A BLANK MESSAGE\n         LA    R1,MSGBL       POINT TO IT\n**ABL    OC    PDSCALL,PDSCALL COMING FROM PDS??                GLA-PDS\n**ABL    BNZ   *+8            IF SO SKIP PAGE BREAK             GLA-PDS\n         BAL   R8,PRNTLINE    THEN PUTPUT IT\nSKPBREA2 BAL   R8,PRINT       FINAL FORMAT AND PRINT\n*\n*        CHECK FOR DATA SET OUTPUT\n*\nCHKOUTPT TM    OUTDCB+48,X'10'     IS IT OPEN AND READY\n         BNO   GOTOT          NO, GO DO THE TOTALS\n         BAL   R8,OUTPUT      YES, PUT OUT THE DATA SET ENTRY\n*\n*        ADD UP THE TOTALS\n*\nGOTOT    BAL   R8,ADDTOT      SUM THEM\n*\n*        GET THE NEXT ENTRY\n*\n         ICM   R3,B'1111',VTFNEXT  FOLLOW THE CHAIN\n         BNZ   GOTENTRY       SOMETHING'S THERE, USE IT\n*\n*        END OF THIS LIST, TRY THE NEXT LIST\n*\nNEXTLIST LA    R4,12(0,R4)    MOVE OVER ONE\n         C     R4,ADDREND     WAS THAT THE LAST LIST?\n         BL    NEWLIST        NO, KEEP TRYING\n*\n*        END OF THE LISTS, OUTPUT THE FINAL TOTAL AND RETURN\n*\n         BAL   R8,PRNTOT      LIST THE TOTAL\n*\n*        CLEAR OUT THE PRINT LISTS\n*\n         XC    VTCSORTH+000(256),VTCSORTH  CLEAR 64 ENTRIES\n         XC    VTCSORTH+256(256),VTCSORTH+256 CLEAR 64 ENTRIES\n         XC    VTCSORTH+512(256),VTCSORTH+512 CLEAR 64 ENTRIES\n         XC    VTCSORTH+768(256),VTCSORTH+768 CLEAR 64 ENTRIES\n         B     VTRET          THEN GET OUT OF HERE\n         EJECT\n*\n*        PRINT CLEANUP ROUTINE - CLOSE DCB'S FIRST\n*\nPRNTCLEN TM    SYSOUT+48,X'10'  IS SYSOUT OPEN?\n         BNO   PRNTCLO        NO, CHECK THE OUTDCB\n         CLOSE (SYSOUT),MF=(E,OPENLIST)  DO THE CLOSE\nPRNTCLO  TM    OUTDCB+48,X'10'  IS OUTDCB OPEN?\n         BNO   PRNTFREE       NO, SKIP DOWN TO THE FREEMAINS\n         CLOSE (OUTDCB),MF=(E,OPENLIST)  DO THE CLOSE\n*\n*        FREE UP THE STORAGE\n*\nPRNTFREE L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nPRNTFRL  ICM   R3,B'1111',0(R2)  GET THE STORAGE ADDRESS\n         BZ    VTRET          IF ZERO, WE'RE DONE\n         FREEMAIN R,LV=VTCGETMS,A=(R3)  FREE IT\n         XC    0(4,R2),0(R2)  CLEAR THE ADDRESS\n         LA    R2,4(R2)       GET THE NEXT BLOCK ADDRESS\n         BCT   R5,PRNTFRL     AND LOOP UNTIL DONE\n         B     VTRET          THEN RETURN\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*              ADDTOT - ADD TO THE CURRENT TOTALS\n*              PRNTOT - PRINT OUT THE TOTALS AND CLEAR THEM\n*              PRINT  - PRINT OUT AN ENTRY\n*              OUTPUT - OUTPUT THE DATA SET ENTRY\n*              PDLNUM - GET A NUMBER FROM A PDL ENTRY\n*              PRNTLINE - INTERNAL ROUTINE TO COUNT LINES, OUTPUT HEAD\n*\nADDTOT   L     R1,TOTDS       NUMBER OF DATA SETS\n         LA    R1,1(R1)       ADD ONE\n         ST    R1,TOTDS       STORE IT BACK\n         L     R1,TOTALLOC    TOTAL ALLOCATION\n         A     R1,VTFALLOC    ADD IN THIS DATA SET\n         ST    R1,TOTALLOC    STORE IT BACK\n         L     R1,TOTUSED     TOTAL USED SPACE\n         A     R1,VTFUSED     ADD IN THIS DATA SET\n         ST    R1,TOTUSED     STORE IT BACK\n         BR    R8             RETURN\n*\n         EJECT\n*\n*        PRINT THE TOTALS\n*              FIRST FORMAT THEM, THEN PUT THE LINE OUT TO SYSOUT\n*              OR USE VTOCMSG TO LIST IT\n*\nPRNTOT   ST    R8,PRNTTOT8   SAVE THE RETURN ADDRESS\n         MVC   MSGWORK(MSGTLEN),MSGTOTC  INIT THE MSG\n*        CONV  MSGWORK+4+11,TOTDS,5  CONVERT NO OF DATA SETS\n         CONV  MSGWORK+4+10,TOTDS,6  CONVERT NO OF DATA     ABL 3/20/90\n         CONV  MSGWORK+4+28,TOTALLOC,8  CONVERT ALLOCATION\n         CONV  MSGWORK+4+51,TOTUSED,8   CONVERT USED SPACE\n         MVC   MSGWORK+4+37(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n         MVC   MSGWORK+4+60(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n*\n*        NOW OUTPUT THE MESSAGE\n*\n         MVI   MSGWORK+4,C'0' ADD A CARRIAGE CONTROL\n         LA    R1,MSGWORK     POINT TO THE TOTAL LINE\n**ABL    OC    PDSCALL,PDSCALL COMING FROM PDS??                GLA-PDS\n**ABL    BNZ   *+8            IF SO SKIP TOTALS                 GLA-PDS\n         BAL   R8,PRNTLINE    PUT OUT THE TOTAL LINE\n         MVI   TOTLAST,1      NOTE THAT A TOTAL WAS THE LAST ITEM\n         L     R8,PRNTTOT8    GET THE RETURN ADDRESS\n         BR    R8             THEN RETURN\n         EJECT\n*\n*        PRINT OUT THE FORMATTED DSCB\n*              FIRST FORMAT IT\n*\nPRINT    ST    R8,PRINTR8     SAVE REGISTER 8 FOR RETURNING\n         MVI   WORKLINE+4,C' ' BLANK OUT THE LINE\n         MVC   WORKLINE+5(250),WORKLINE+4 SO INDIVIUAL FIELDS DON'T\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,WORKLINE+4  POINT TO THE WORK  LINE\nPRTLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         LA    R5,1(R1)       SAVE A PLACE TO MOVE FIELD INTO\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         LA    R0,WORKLINE+4  POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   PRTEND         YES, WE'RE DONE\n         AR    R1,R0          NO, KEEP GOING\n*\n*        MOVE IN OR CONVERT THIS ITEM\n*\n         SR    R14,R14       CLEAR A REG FOR LENGTH OF RTN NO\n         IC    R14,1(R6)     GET THE LENGTH OR ROUTINE\n         N     R14,F127      CLEAR THE TOP BIT\n         SR    R15,R15       CLEAR A REG FOR VTFMT\n         IC    R15,2(R6)       DISPLACEMENT\n         AR    R15,R3        RELOCATE IT\n*\n*        DECIDE WHERE TO PUT IT\n*\n         TM    1(R6),X'80'   IS IT IN CHARS\n         BNO   PRTRTN        NO, USE THE SPECIAL ROUTINE\n         SR    R7,R14        GET THE DIFFERENCE IN LENGTHS\n         SRL   R7,1          GET HALF THE DIFFERENCE\n         AR    R5,R7         PUT THE DATA HERE\n         EX    R14,PRTMOVE   MOVE IN THE CHARACTERS\nPRTINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   PRTLOOP        GO GET MORE ITEMS\nPRTEND   LA    R1,WORKLINE   POINT TO THIS LINE\n         BAL   R8,PRNTLINE   THEN GO PRINT IT\n         L     R8,PRINTR8     GET THE RETURN ADDRESS\n         BR    R8             RETURN\nPRTMOVE  MVC   0(0,R5),0(R15)  EXECUTED MOVE\n*\n*        VARIOUS ROUTINES TO FORMAT BEFORE MOVING IN THE DATA\n*\nPRTRTN   LTR   R14,R14       BE SURE THE OFFSET IS OK\n         BP    PRTRTN1        IT SEEMS ALL RIGHT\n         ABEND 701,DUMP       CRASH AND BURN\nPRTRTN1  B     *(R14)        GO DO YOUR THING\n         B     PRDATES        4  CDATE, EXPDT\n         B     PRLSTUS        8  LSTUS\n         B     PRALLOC       12  ALLOC, USED\n         B     PRUNUSED      16  ALLOC - USED\n         B     PRPCT         20  100 * USED / ALLOC\n         B     PREXT         24  EXT\n         B     PRBLREC       28  BLKSZ LRECL\n         B     PRDSN         32  DSNAME\n*\n*\n*        CDATE AND EXPDT\n*\nPRDATES  SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         USING DUMMD,R5      ALLOW CONV TO USE SYMBOL\n         CONVY2K DUMMA,(R14),2 CONVERT YEAR                   Y2K DEC97\n         ICM   R14,B'0011',1(R15)  GET THE DAY\n         CONV  DUMMA+2,(R14),3,EDMASK0,COMP0  CONVERT THE DAY\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LAST USE DATE\n*\nPRLSTUS  MVC   CHARS,EDMASK   SET UP THE EDIT MASK\n         ED    CHARS(6),0(R15)  CONVERT TO CHARACTERS\n         MVC   0(5,R5),CHARS+1  THEN MOVE THEM IN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        ALLOCATION AND USED\n*\nPRALLOC  ICM   R14,B'1111',0(R15)  GET THE AMOUNT\n         BM    PRUNKN6       IF NEGATIVE, IT'S NOT KNOWN\n         CONV  DUMMA,(R14),6 CONVERT THE NUMBER\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN6  MVC   0(6,R5),BLANKS  UNKNOWN AMOUNT, LEAVE IT BLANK\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        UNUSED SPACE\n*\nPRUNUSED ICM   R14,B'1111',VTFUSED  GET THE   USED SPACE\n         BM    PRUNKN6       IF NOT KNOWN, SKIP ALONG\n         L     R14,VTFALLOC  GET THE ALLOCATED SPACE\n         S     R14,VTFUSED   MINUS THE USED SPACE GIVES UNUSED\n         BZ    PRTINC        IF NO UNUSED SPACE, LEAVE BLANK\n         CONV  DUMMA,(R14),6 CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        PCT - PERCENTAGE USED\n*\nPRPCT    SR    R6,R6         CLEAR THE TOP PART OF THE NUMBER\n         ICM   R7,B'1111',VTFUSED   GET THE AMOUNT OF USED SPACE\n         BM    PRUNKN3       IF NOT KNOWN, LEAVE BLANK\n         CLC   VTFALLOC,ZERO IS THE ALLOCATION ZERO?\n         BNE   PRPCTM        NO, DO THE STANDARD STUFF\n         CLC   VTFUSED,ZERO  IS THE USED SPACE ZERO?\n         BE    PRUNKN3       YES, JUST USE BLANKS\nPRPCTERR MVC   0(3,R5),=C'ERR'  NO, IT'S AN ERROR\n         B     PRTINC        THEN GO TRY FOR MORE\nPRPCTM   M     R6,F100       MULTIPLY BY 100 FOR PERCENT\n         D     R6,VTFALLOC   DIVIDE BY ALLOC TO GET THE PERCENT\n         LTR   R7,R7         IS IT LESS THAN ZERO?\n         BM    PRPCTERR      YES, FLAG THE ERROR\n         C     R7,F100       ALSO CHECK FOR OVER 100 PERCENT\n         BH    PRPCTERR      THAT'S ALSO AN ERROR\n         CONV  DUMMA,(R7),3  CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN3  MVC   0(3,R5),BLANKS BLANK THE UNKNOWN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        EXTENTS\n*\nPREXT    SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         CONV  DUMMA,(R14),2 CONVERT THE EXTENTS\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LRECL AND BLKSZ\n*\nPRBLREC  LH    R14,0(R15)    GET THE DATA ( HALFWORD )\n         CONV  DUMMA,(R14),5  CONVERT THE DATA\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        DATA SET NAME\n*\nPRDSN    LH    R14,VTFDSNL   GET THE DSNAME LENGTH\n         CH    R14,DSNLENGT  CHACK FOR MAX LENGTH\n         BL    PRDMOVE       THIS DSN IS SHORT ENOUGH\n         LH    R14,DSNLENGT  CUT IT DOWN\nPRDMOVE  BCTR  R14,0         COUNT DOWN ONE FOR THE EX\n         EX    R14,PRTMOVE   MOVE IN THE DSNAME\n         AH    R1,DSNLENOF   CORRECT THE LINE POINTER\n         B     PRTINC        GO GET MORE PRINT ITEMS\n         EJECT\n*\n*        OUTPUT THE FORMATTED DSCB AS IT IS\n*\nOUTPUT   CLEAR OUTWORK       CLEAR THE OUTPUT REC\n         LH    R2,VTFDSNL     GET THE LENGTH OF THE DSNAME\n         LA    R2,VTFMTL-1(R2)  GET THE FULL LENGTH MINUS ONE\n         EX    R2,OUTMOVE    MOVE IN THE ACTUAL RECORD\n         PUT   OUTDCB,OUTWORK    OUTPUT THE RECORD\n         BR    R8             RETURN\nOUTMOVE  MVC   OUTWORK(0),0(R3)  EXECUTED MOVE\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        PRNTLINE - GET EACH LINE FOR SYSOUT, THEN COUNT THE LINES\n*              OUTPUT HEADERS AND TITLE LINES AS NECESSARY\n*\nPRNTLINE STM   R1,R8,PRTLSAVE SAVE THE REGISTERS\n         TM    SYSOUT+48,X'10' IS SYSOUT OPEN FOR BUSINESS?\n         BNO   PRNTTERM       NO, IT'S NOT OPEN, USE VTOCMSG\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTLIN       YES, JUST OUTPUT THE DATA LINE\n*\n*        DO THE LINE COUNTING\n*\n         LH    R2,LINECT      GET THE LINE COUNT\n         CLI   4(R1),C'1'     IS IT REQUESTING A NEW PAGE?\n         BE    PRNTPAGE       YES, DO IT\n         CLI   0(R1),C'-'     SKIP 3 LINES\n         BE    PRNTSKP3       YES, TRY IT\n         CLI   0(R1),C'0'     SKIP 2 LINES?\n         BE    PRNTSKP2       YES, DO IT\n         B     PRNTSKP1       JUST SKIP ONE\nPRNTSKP3 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP2 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP1 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\n         STH   R2,LINECT      SAVE THE LINE COUNT\n         CH    R2,LINEMAX     DOES THIS OVERFLOW  HE PAGE?\n         BL    PRNTLIN        NO, JUST PUT OUT THIS LINE\n*\n*        PRINT OUT THE PAGE HEADER AND ITEM TITLES\n*\nPRNTPAGE LH    R6,PAGECT      GET THE PAGE COUNT\n         LA    R6,1(R6)       ADD ONE TO IT\n         STH   R6,PAGECT      THEN STORE IT BACK\n         L     R7,PAGEADDR    GET THE PLACE TO PUT THE PAGE\n         DROP  R5             DROP PRIOR USING ON DUMMD         JVH-FIX\n         USING DUMMD,R7       DUMMY DSECT\n         CONV  DUMMA,(R6),5   GET THE CHARACTERS\n         DROP  R7\n         ST    R1,PRNTLSAV    SAVE THE INPUT REG1\n         PUT   SYSOUT,PRNTHEAD  OUTPUT THE HEADER\n         PUT   SYSOUT,PRNTTITL  OUTPUT THE ITEM TITLES\n         L     R1,PRNTLSAV    GET THE ORIGINAL LINE\n         MVI   4(R1),C'0'     ALWAYS SKIP THE FIRST LINE AFTER NEW PAGE\n         LA    R7,5           SET THE LINE COUNT\n         STH   R7,LINECT      SAVE IT FOR LATER\nPRNTLIN  CLEAR OUTWORK       CLEAR A PRINT RECORD\n         LH    R6,0(R1)      GET THE RECORD LENGTH\n         SH    R6,H5         MINUS 4 FOR PREFIX, 1 FOR EX\n         LA    R3,4(R1)      POINT TO THE TEXT\n         EX    R6,OUTMOVE    THEN MOVE IN THE LINE\n         PUT   SYSOUT,OUTWORK      AND FINALLY PRINT IT\n         B     PRNTLRET       THEN RETURN\n*\n*        SIMPLER CHECKING FOR VTOCMSG OUTPUT\n*\nPRNTTERM LH    R2,LINECT      GET THE LINE COUNT\n         LA    R2,1(R2)       IGNORE CARRIAGE CONTROL\n         STH   R2,LINECT      SAVE IT BACK\n         LR    R6,R1          SAVE THE ORIGINAL REG 1\n         MVI   4(R1),C' '    BLANK THE CARRIAGE CONTROL\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTTLIN       YES, JUST OUTPUT THE DATA LINE\n         CH    R2,LINEMAX     NEED A NEW TITLE?\n         BL    PRNTTLIN       NO, KEEP GOING\n**ABL    OC    PDSCALL,PDSCALL COMING FROM PDS??                GLA-PDS\n**ABL    BNZ   PRNTTLI2       IF SO SKIP HEADERS                GLA-PDS\n         VTOCMSG PRNTTITH     YES, PUT IT OUT\nPRNTTLI2 MVC   LINECT,H2      RESET THE LINE COUNT              GLA-PDS\nPRNTTLIN VTOCMSG 0(R6)        OUTPUT THE PASSED LINE\n         TM    PDSCALL,X'80'  TERMINATION?                      ABL-PDS\n         BO    VTRET          YES, STOP THE OUTPUT              ABL-PDS\nPRNTLRET LM    R1,R8,PRTLSAVE RESTORE THE REGISTERS\n         BR    R8             THEN RETURN\n         EJECT\nPRTINIT  MVI   FIRSTIM,10    FLAG THE INITIALIZATION AS DONE\n         LA    R1,TABTITL    POINT TO THE BUG TABLE\n         ST    R1,ATABTITL   LET CHECK KNOW WHERE IT IS\n*\n*        SET UP THE CHARACTERS FOR TYPE OF SPACE ALLOC.\n*\n         LH    R2,SPACEK      GET THE SPACE TYPE KEYWORD\n         SLA   R2,3           MULTIPLY BY 8\n         LA    R2,TABSPACE(R2)  RELOCATE IT\n         MVC   SPACTYPE,0(R2) SAVE THE CHARACTERS\n         CLI   PRINTK+1,2     IS THIS NOPRINT?\n         BE    NOOPEN         YES, SKIP THE OPEN\n         MVC   SYSOUT(SYSOUTL),SYSOUTC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         LA    R1,JFCB       POINT TO THE JFCB\n         ST    R1,DCBEXIT    AND PUT THE ADDR IN THE DCB EXIT\n         MVI   DCBEXIT,X'87' NOTE IT AS A JFCB EXIT\n         LA    R1,DCBEXIT    POINT TO THE EXIT LIST\n         LA    R2,SYSOUT     AND TO THE DCB FOR ADDRESSABILITY\n         USING IHADCB,R2     TELL THE ASSEMBLER ABOUT IT\n         STCM  R1,B'0111',DCBEXLSA  STUFF IT INTO THE DCB\n         TM    CHARSPL+6,X'80'  CHARS PER LINE ENTERED?\n         BZ    RDJFCB        NO, CONTINUE ALONG\n         LA    R1,CHARSPL    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,DCBLRECL  SAVE THE NEW LRECL\n         STH   R15,LINELEN   ALSO THE LINE LENGTH\n         TM    BLKSZSET+6,X'80'  BLOCKSIZE ENTERED?\n         BZ    BLKEQREC      NO, BLOCKSIZE EQUALS LRECL\n         LA    R1,BLKSZSET      POINT TO THE PDL\n         BAL   R8,PDLNUM     GET THE NUMBER\nBLKEQREC STH   R15,DCBPRECL  STUFF IT AWAY\n         DROP  R2            FINISHED WITH THE DCB\nRDJFCB   RDJFCB ((R2)),MF=(E,OPENLIST)  SEE IF IT'S THERE\n         LTR   R15,R15       WAS IT THERE?\n         BNZ   NOOPEN        NO, SKIP ALONG\n         OPEN  ((R2),OUTPUT),MF=(E,OPENLIST)  OPEN THE PRINT DCB\n*\n*        INITIALIZE PRINT VARIABLES\n*\n*        SET LINES/PAGE AND LINESIZE\n*\nNOOPEN   MVC   LINEMAX,DEFLMAX  SET THE DEFAULT NUMBER OF LINES/PAGE\n         TM    LINESPP+6,X'80'     LINES PER PAGE ENTERED?\n         BZ    DEFLINPP     NO, SKIP ON\n         LA    R1,LINESPP    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,LINEMAX   AND SAVE IT\nDEFLINPP MVC   LINECT,LINEMAX SET UP TO PAGE ON THE FIRST WRITE\n         TM    CHARSPL+6,X'80'     CHARS PER LINE ENTERED?\n         BO    LENSET        YES, USE IT\n         MVC   LINELEN,DEFLEN SET UP A DEFAULT LENGTH\n         TM    SYSOUT+48,X'10' DO WE USE SYSOUT?\n         BO    LENSET         YES, USE WHAT WE'VE GOT\n         OC    PDSCALL,PDSCALL COMING FROM PDS??                ABL-PDS\n         BNZ   LENSET          NO, SKIP WIDTH SETTING           ABL-PDS\n*        GET THE TERMINAL LINE SIZE TO SEE IF IT MAKES SENSE\n         GTSIZE\n         LTR   R1,R1          SEE IF IT'S GOOD\n         BZ    LENSET         NO, JUST A ZERO, KEEP THE DEFAULTS\n         BCTR  R1,0           CUT IT DOWN ONE TO AVOID A MESS\n         STH   R1,LINELEN     SAVE THIS LENGTH\n         LTR   R0,R0          FOR DISPLAYS, IT'S SCREEN SIZE\n         BZ    LENSET         KEEP WHAT WE'VE GOT\n         TM    LINESPP+6,X'80'  WAS LINES PER PAGE ENTERED?\n         BO    LENSET           YES, DON'T OVERRIDE IT\n         STH   R0,LINEMAX     AND SAVE THE NEW PAGE LOCATION\nLENSET   DS    0H\n*\n*        SET UP THE PAGE COUNTER\n*\nPAGEAD   LH    R1,LINELEN     GET THE LENGTH OF THE LINE\n         SH    R1,H10         MINUS TEN CHARACTERS\n         LA    R1,PRNTHEAD(R1) THEN RELOCATE IT\n         CLEAR PRNTHEAD       CLEAR THE LINE FIRST\n         MVC   0(4,R1),CPAGE  MOVE IN THE CHARACTERS PAGE\n         LA    R1,5(R1)       MOVE OVER 5 MORE\n         ST    R1,PAGEADDR    THIS IS THE PLACE\n*\n*        BUILD THE PRINT HEADER LINE\n*\n         TM    HEADING+6,X'80' IS A USER HEADING PRESENT\n         BO    USERHEAD       YES, USE IT\n         MVC   PRNTHEAD(L'DEFHEAD),DEFHEAD  NO, GET A DEFAULT\n*\n*        ADD THE COMMAND BUFFER TO THE HEADING\n*\n         LH    R1,LINELEN    GET THE LINE LENGTHE\n         SH    R1,H32        MINUS SPACES FOR PAGE, START OF HDR\n         BNP   OUTOPEN       IF IT'S SHORT, SKIP ON\n         L     R14,ADDRCBUF  POINT TO THE COMMAND BUFFER\n         CH    R1,0(R14)     COMPARE LENGTHS\n         BL    CBUFBIG       THE COMMAND BUFFER TOO BIG\n         LH    R1,0(R14)     GET THE COMMAND BUFFER SIZE\nCBUFBIG  SH    R1,H5         MINUS 1 FOR EX, 4 FOR CBUF PREFIX\n         EX    R1,MOVEHED    MOVE THE CBUF TO THE DEFAULT HEADER\n         B     OUTOPEN        GO SET UP THE PAGE COUNTER\nUSERHEAD LH    R1,HEADING+4   GET THE LENGTH\n         BCTR  R1,0           MINUS ONE FOR THE EX\n         L     R2,HEADING     POINT TO THE USER HEAD\n         EX    R1,MOVEHEAD    THEN MOVE IT IN\nOUTOPEN  DS    0H\n*\n*        SET UP THE WORK LINE\n*\n         LH    R1,LINELEN    GET THE LINE LENGTH\n         LA    R1,4(R1)      ADD FOUR FOR THE PREFIX\n         STH   R1,WORKLINE   OUTPUT TEXT\n         STH   R1,PRNTTITH    ITEM TITLES\n*        GET THE PRINT SPECIFICATION\n*\n         LA    R1,DEFPRNT\n         ST    R1,VTPRNTLS   SAVE THE PRINT ITEM LIST ADDRESS\n         TM    SUBPRTKY+6,X'80'  WERE ANY ITEMS SET UP\n         BE    PRTITSET      NO, THE DEFAULT LIST IS OK\n*\n*        GET THE ADD, REPLACE, DELETE, AND NEW ITEMS\n*        AND BUILD THE NEW LIST\n*\n*        FIRST CONVERT THE ENTERED TEXT INTO NUMERIC KEYS\n*\n         LA    R4,SUBPRTIT   POINT TO THE ITEMS\n         LA    R5,VTPRNTEN   POINT TO THE OUTPUT KEYS\n         LA    R0,VTPRNTEX   POINT TO THE END OF THE LIST\nENTKEY   BAL   R8,GETKEY     GET A KEY\n         STC   R15,0(R5)     SAVE IT\n         LA    R5,1(R5)      GET TO THE NEXT ONE\n         CR    R0,R5         CHECK FOR THE END\n         BNH   ENTKEND       IF THAT'S ALL\n         ICM   R4,7,9(R4)    GET THE CHAIN POINTER\n         BNZ   ENTKEY        AND KEEP GOING IF THERE'S MORE\nENTKEND  DS    0H            THE KEYS ARE ENTERED INTO THE LIST\n*\n*        MERGE THE ENTERED ITEMS AND THE DEFAULT LIST INTO A NEW LIST\n*\n         LA    R6,VTPRNTL    POINT TO THE NEW LIST\n         ST    R6,VTPRNTLS   SAVE IT'S ADDRESS\n         LA    R4,VTPRNTEN   POINT TO THE ENTERED ITEMS\n         LA    R2,DEFPRNT    POINT TO THE DEFAULT LIST\n         LR    R3,R2         POINT TO THE BEGINNING - NO DEFAULT IF NEW\n         L     R1,SUBPRTKY   POINT TO THE KEYWORD\n         CLI   0(R1),C'N'    IS THIS A NEW LIST?\n         BE    PRTINEW       YES, SKIP PAST DEFAULT COPY\n         LA    R3,DEFPRNTE   POINT TO THE END OF THE DEFAULT LIST\n*\n*        ADD, REPLACE, DELETE - COPY THE DEFAULT LIST\n*\nPRTICOPY CR    R2,R3         IS THIS THE END OF THE DEFAULT LIST?\n         BNL   PRTITSET      YES, END OF PROCESSING FOR PRINT ITEMS\n*\n*        CHECK FOR ENTERED ITEMS THAT ARE ALSO\n*              IN THE DEFAULT LIST.\n*\nPRTICDLP CLC   0(1,R2),0(R4) IS THIS THE SAME ITEM\n         BE    PRTIFND       YES, SEE WHAT TO DO\n         LA    R4,1(R4)      NO, GET TO THE NEXT ITEM\n         CLI   0(R4),0       WAS THIS THE LAST ENTERED ITEM?\n         BNE   PRTICDLP      NO, KEEP LOOKING\n         LA    R4,VTPRNTEN   POINT BACK TO THE TOP OF THE LIST\n*\n*        ADD THIS ITEM TO THE NEW LIST\n*\nPRTICSKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\nPRTICDEL LA    R2,1(R2)      GO DOWN THE DEFAULT LIST\n         B     PRTICOPY      THEN KEEP ON CHECKING\n*\n*        AN ITEM WAS ENTERED AND WAS IN THE DEFAULT LIST\n*        FOR DELETE, JUST DELETE ITEMS\n*        FOR ADD AND REPLACE, DELETE ALL BUT THE FIRST ITEM\n*              TO AVOID DUPLICATES\n*              IF IT IS THE FIRST ITEM, INSERT THE ENTERED LIST\n*\nPRTIFND  LA    R0,VTPRNTEN   POINT TO THE FIRST ITEM\n         CR    R0,R4         COMPARE WITH THE ITEM FOUND\n         BH    PRTICDEL      NOT THE FIRST ITEM, DELETE IT\n         CLI   0(R1),C'D'    IS THIS DELETE TIME?\n         BE    PRTICDEL      THEN JUST DELETE IT\n         CLI   0(R1),C'R'    IS THIS A REPLACE?\n         BE    PRTIREPA      YES, IGNORE THIS DEFAULT ITEM\n*\n*        ADD THE DEFAULT ITEM FIRST\n*\nPRTIASKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n*\n*        MOVE THE ITEMS IN FROM THE ADD OR REPLACE LIST\n*\nPRTIREPA LA    R2,1(R2)      GET PAST THE DEFAULT LIST ITEM\nPRTIREP  LA    R4,1(R4)      GET PAST THE FIRST ENTRY\nPRTINEXT CLI   0(R4),0       IS THIS THE LAST ITEM?\n         BE    PRTICOPY      YES, SEE ABOUT MORE DEFAULTS\n*\n*        ADD AN ENTERED ITEM TO THE LIST\n*\nPRTINSKP MVC   0(1,R6),0(R4) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n         B     PRTIREP       GO GET MORE ENTERED ITEMS\n*\n*        NEW LIST, JUST USE IT AS ENTERED\n*\nPRTINEW  LA    R1,VTPRNTEN   POINT TO THE ENTERED LIST\n         ST    R1,VTPRNTLS   THEN SAVE ITS ADDRESS FOR LATER\nPRTITSET DS    0H\n*\n*        BUILD THE TITLE LINE FOR THE DSNAME FIELDS\n*\n         CLEAR PRNTTITL        BLANK OUT THE TITLE LINE\n         MVC   PRNTTITL+1(139),PRNTTITL  SO THE WHOLE THING IS GOOD\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,PRNTTITL    POINT TO THE TITLE LINE\nTITLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         EX    R7,MOVETIT     MOVE IN THE TITLE\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         CLI   0(R2),DSNAME  IS THIS THE DSNAME KEY\n         BE    TITDSN        YES, SPECIAL PROCESSING\n         LA    R0,PRNTTITL    POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   TITOVER        YES, PULL BACK\n         AR    R1,R0          NO, KEEP GOING\nTITINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   TITLOOP        GO GET MORE TITLES\n         B     TITEND         ALL DONE\nTITDSN   LR    R6,R1         SAVE THE ADDRESS POINTER\n         LA    R1,DSNPLN     POINT TO THE PDL FOR DSN LENGTH\n         BAL   R8,PDLNUM     GO TRANSLATE IT\n         LTR   R15,R15       WAS IT THERE?\n         BP    TITDSN2       YES, USE IT\n         LA    R15,44        NO, SET THE DEFAULT\nTITDSN2  STH   R15,DSNLENGT  SAVE THE LENGTH\n         SH    R15,H9        SUBTRACT THE 9 CHARS MOVED ALREADY\n*              MINUS ONE FOR EX, PLUS ONE FOR SPACE\n         MVI   0(R6),C' '    GET AN INITIAL BLANK\n         EX    R15,DSNBLMOV  MOVE IN THE BLANKS\n         LA    R1,1(R15,R6)  RESET THE POINTER ( INCLUDE A SPACE )\n         LA    R15,1(R15)    ADD ON THE SPACE CHARACTER\n         STH   R15,DSNLENOF  SAVE THE OFFSET\n         B     TITINC        ALLOW DSNAME TO OVERFLOW THE LINE\n*\n*        TITLE RAN OFF THE END, CUT IT OFF\n*\nTITOVER  SR    R1,R7          SUBTRACT PAST THIS FIELD\n         AR    R1,R0          RELOCATE IT\n         BCTR  R1,0           THEN GET THE LAST CHARACTER\n         MVC   0(9,R1),BLANKS THEN BLANK IT OUT\nTITEND   TM    SYSOUT+48,X'10' IS THE DCB OPEN\n         BNO   CKOUTPT       NO, TERMINAL OUTPUT, NO CC\n         MVI   PRNTTITL,C'0'  ALWAYS SKIP A LINE FOR IT\nCKOUTPT  CLI   OUTPUTK+1,1    OUTPUT THIS RUN?\n         BNE   VTRET          YES, SKIP THE OPEN, JUST RETURN\n         MVC   OUTDCB(OUTDCBL),OUTDCBC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         OPEN  (OUTDCB,OUTPUT),MF=(E,OPENLIST)  OPEN THE DATA SET DCB\n         B     VTRET          RETURN, INITIALIZATION IS DONE\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BNE   GETNFND       NOT HERE, BRANCH                   ABL-EXT\n         CLC   =C'EX ',0(R6) EX (FOR EXTENTS)?                  ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         CLC   =C'EXP',0(R2) EXP (FOR EXPDT)?                   ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         SPACE 1                                                ABL-EXT\nGETNFND  DS    0H                                               ABL-EXT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n         CH    R15,H26       CHECK FOR THE END OF THE TABLE\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\nH26      DC    H'26'\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nZERO     DC    F'0'\nF100     DC    F'100'\nF127     DC    F'127'\nDEFLMAX  DC    H'60'          DEFAULT LINES PER PAGE\nDEFLEN   DC    H'132'         DEFAULT CHARS PER LINE\nH2       DC    H'2'\nH5       DC    H'5'\nH9       DC    H'9'\nH10      DC    H'10'\nH12      DC    H'12'\nH18      DC    H'18'\nH32      DC    H'32'\nMOVETIT  MVC   0(0,R1),3(R6)  MOVE IN THE TITLE\nCOMPKEY  CLC   0(0,R1),VTFDSN  EXECUTED COMPARE\nMOVEHEAD MVC   PRNTHEAD(0),0(R2)\nMOVEHED  MVC   PRNTHEAD+21(0),4(R14)  MOVE CMD BUF TO DEFAULT HEADER\nDSNBLMOV MVC   1(0,R6),0(R6)  BLANK OUT THE DSN SPACE IN THE TITLE\nCPAGE    DC    C'PAGE'\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDMASK0  DC    XL16'F0202020202020202020202020202120'\nSKIP     DC    C'0'\nCOMP0    DC    CL16'0000000000000000'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nTABSPACE DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'MBYTES'                                LMB 1/4/83\n         DC    CL8'TRKS  '                                LMB 1/4/83\n         DC    CL8'CYLS  '                                LMB 1/4/83\n*\n         PRINT NOGEN\nSYSOUTC  DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,BLKSIZE=1500\nOUTDCBC  DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,BLKSIZE=6000\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         SPACE\nMSGTOTC  MSGZ  '  TOTALS - NNNNN DATA SETS, MMMMMMMM UUUUUU ALLOC, LLLLX\n               LLLL UUUUUU USED '\nMSGTLEN  EQU   *-MSGTOTC\nMSGBLC   MSGZ  '                '\n*\nDEFHEAD  DC    CL20'1 VTOC COMMAND  V-77'\n*\n*        DEFAULT PRINT LIST\n*\nDEFPRNT  DC    AL1(ALLOC)\n         DC    AL1(UNUSED)\n         DC    AL1(PCT)\n         DC    AL1(EXT)\n         DC    AL1(DSORG)\n         DC    AL1(RECFM)\n         DC    AL1(LRECL)\n         DC    AL1(BLKSZ)\n         DC    AL1(CDATE)\n         DC    AL1(LSTUS)\n         DC    AL1(VOLUME)\n         DC    AL1(DSNAME)\n         DC    AL1(EXPDT)\n         DC    AL1(SECQ)\n         DC    AL1(SECT)\n         DC    AL1(ROUND)\n         DC    AL1(PASS)\n         DC    AL1(ACTION)\n         DC    AL1(TYPE)\n         DC    AL1(0)        END OF THE LIST\nDEFPRNTE EQU   *\nDEFPRNTL EQU   *-DEFPRNT\n*\n*        TABLE OF PRINT ITEM LENGTHS AND TITLES\n*\n*        ENTRIES IN THE TABLE FOR EACH FORMATTED ITEM -\n*        FIRST BYTE IS FIELD LENGTH FOR OUTPUT ( MINUS ONE FOR EX )\n*        SECOND BYTE - X'80' BIT INDICATES A CHARACTER FIELD\n*                            THEN BITS 0-7 GIVE VTFMT LENGTH\n*                      OTHERWISE IT'S A KEY TO WHICH ROUTINE TO USE\n*        THIRD BYTE - OFFSET IN FORMATTED DSCB, VTFMT\n*        4-12 TH BYTES, THE TITLE FOR THE FIELD\n*\n*\nTABTITL  DC    XL12'00'  DUMMY ENTRY FOR 0 ADDRESSING\n         DC    AL1(8),AL1(128+7),AL1(VTFACTON-VTFMT),CL9' ACTION  '  1\n         DC    AL1(6),AL1(128+5),AL1(VTFVOLUM-VTFMT),CL9' VOLUME  '  2\n         DC    AL1(5),AL1(000+4),AL1(VTFCREDT-VTFMT),CL9' CDATE   '  3\n         DC    AL1(5),AL1(000+4),AL1(VTFLSTAC-VTFMT),CL9' REFDT   '  4\n         DC    AL1(5),AL1(000+4),AL1(VTFEXPDT-VTFMT),CL9' EXPDT   '  5\n         DC    AL1(6),AL1(00+12),AL1(VTFALLOC-VTFMT),CL9'  ALLOC  '  6\n         DC    AL1(6),AL1(00+16),AL1(VTFALLOC-VTFMT),CL9' UNUSED  '  7\n         DC    AL1(3),AL1(00+20),AL1(VTFALLOC-VTFMT),CL9' PCT     '  8\n         DC    AL1(2),AL1(00+24),AL1(VTFNOEPV-VTFMT),CL9' EX      '  9\n         DC    AL1(3),AL1(128+2),AL1(VTFDSORG-VTFMT),CL9' DSO     ' 10\n         DC    AL1(3),AL1(128+3),AL1(VTFRECFM-VTFMT),CL9' RFM     ' 11\n         DC    AL1(5),AL1(00+28),AL1(VTFBLKSZ-VTFMT),CL9' BLKSZ   ' 12\n         DC    AL1(5),AL1(00+28),AL1(VTFLRECL-VTFMT),CL9' LRECL   ' 13\n         DC    AL1(4),AL1(128+0),AL01(VTFPROT-VTFMT),CL9' PASS    ' 14\n         DC    AL1(3),AL1(128+0),AL1(VTFCATLG-VTFMT),CL9' CAT     ' 15\n         DC    AL1(4),AL1(128+0),AL1(VTFSECAL-VTFMT),CL9' SECT    ' 16\n         DC    AL1(5),AL1(00+28),AL1(VTFSECAM-VTFMT),CL9'  SECQ   ' 17\n         DC    AL1(4),AL1(00+36),AL1(VTFVOLUM-VTFMT),CL9' UNIT    ' 18\n         DC    AL1(5),AL1(128+0),AL1(VTFROUND-VTFMT),CL9' ROUND   ' 19\n         DC    AL1(4),AL1(128+0),AL1(VTFDSTYP-VTFMT),CL9' TYPE    ' 20\n         DC    AL1(6),AL1(00+12),AL01(VTFUSED-VTFMT),CL9'   USED  ' 21\n         DC    AL1(8),AL1(00+32),AL1(VTFVOLUM-VTFMT),CL9'   CCHH  ' 22\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY3  ' 23\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY4  ' 24\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY5  ' 25\n         DC    AL1(8),AL1(00+32),AL001(VTFDSN-VTFMT),CL9' DSNAME  ' 26\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARX <--- OLDER VERSION OF VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nPRNTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nTOTDS    DS    F              TOTAL COUNTER\nTOTALLOC DS    F              TOTAL ALLOCATION\nTOTUSED  DS    F              TOTAL USED\nFTOTDS   DS    F              FINAL TOTAL DATA SETS\nFTOTALLC DS    F              FINAL TOTAL ALLOC\nFTOTUSED DS    F              FINAL TOTAL USED\nPRNTLSAV DS    A\nPRINTR8  DS    A\nPRNTTOT8 DS    A\nADDREND  DS    A\nPAGEADDR DS    A\nOPENLIST DS    2A             PARM LIST FOR OPEN\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPRTLSAVE DS    8A             REGISTER SAVE AREA FOR PRNTLINE RTN\nLASTKEY  DS    A              ADDRESS OF LAST KEY FOR SUBTOTALS, BREAKS\nNUMBREAK DS    H              CHARACTERS TO COMPARE FOR BREAK\nNUMTOTAL DS    H              CHARACTERS TO COMPARE FOR SUBTOTALS\n         PRINT NOGEN\nSYSOUT   DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,BLKSIZE=1500\nSYSOUTL  EQU   *-SYSOUT\nOUTDCB   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,BLKSIZE=6000\nOUTDCBL  EQU   *-OUTDCB\nENDTOTAL DS    X              PROGRAM SWITCHES\nENTOTOUT EQU   X'80'          THE FINAL TOTALS HAVE BEEN OUTPUT\nENDTONLY EQU   X'10'          NO SUBTOTALS, END TOTALS ONLY\nNOBREAK  EQU   X'08'          NO BREAKS\nFIRSTIM  DS    X              INITIALIZATION FOR THIS ROUTINE\nPDLMINUS DC    X'00'\nTOTLAST  DS    X\nSPACTYPE DS    CL6          CHARACTERS FOR SPACE UNITS\nDSNLENGT DS    H\nDSNLENOF DS    H\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nMSGWORK  DS    CL256          AREA FOR BUILDING MESSAGES\nWORKLINE DS    CL256          AREA FOR DATA SET\nPRNTHDRH DS    F\nPRNTHEAD DS    CL256          AREA FOR HEADER\nPRNTTITH DS    F\nPRNTTITL DS    CL256          AREA FOR ITEM TITLES\nMSGBL    DS    CL20           AREA FOR BLANK LINE\nOUTWORK  DS    CL256          WORKING AREA FOR OUTPUT\nDCBEXIT  DS    F\nJFCB     DS    XL176\n         SPACE\nVTPRNTLS DS    A             PRINT ITEM LIST ADDRESS\nVTPRNTL  DS    40C           PRINT ITEM LIST ( IF MODIFIED )\nVTPRNTEN DS    40C\nVTPRNTEX DS    C\n         SPACE\n         DS    0D\nLENWORK  EQU   *-PRNTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\nDUMMD    DSECT\nDUMMA    DS    C              DUMMY ENTRY TO USE FOR CONV\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCSORT": {"ttr": 6917, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00\\x04\\x00\\x00\\x00\\x88#\\x9f\\x00\\x88$/\\x13\\x05\\x00\\xa9\\x00\\xa3\\x00\\x07\\xc8\\xc1\\xc2\\xd3@@@@@@'", "ispf": {"version": "00.04", "flags": 0, "createdate": "1988-08-26T00:00:00", "modifydate": "1988-08-29T13:05:00", "lines": 169, "newlines": 163, "modlines": 7, "user": "HABL"}, "text": "VTOCSORT TITLE 'VTOC COMMAND  SORT  ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND  SORT  ROUTINE                            *\n*                                                                     *\n* FUNCTION -   PUT THIS FORMATTED DSCB INTO THE SORTED LIST.          *\n*                                                                     *\n* OPERATION -  IF THIS IS A NOSORT RUN, JUST CALL THE PRINT ROUTINE.  *\n*              TO BUILD THE SORTED LIST, FIRST DO A SIMPLE HASH       *\n*              ON THE FIRST CHARACTER.  BUILD UP TO 256 SEPARATE      *\n*              LISTS TO SAVE SORT TIME.  THEN SEARCH THROUGH THESE    *\n*              LISTS SEQUENTIALLY.                                    *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB IS PLACED INTO THE SORTED LIST.     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* MODIFIED 8/29/88 BY A. BRUCE LELAND AT HITACHI TO CORRECT     ABL-SOR\n*                  THE SORT FOR DATA SET NAMES.                 ABL-SOR\n*                                                                     *\n***********************************************************************\n         EJECT\nVTOCSORT ENTER 12,24          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING SORTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        IS THIS A NOSORT RUN ?\n*        IF SO, JUST CALL PRINT\n*\n         CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   GOSORT         NO, KEEP ON TRUCKIN'\n         VTCALL PRNT          YES, CALL PRINT AND GET OUT\n         B     SORTRET        GET OUT OF HERE\n*\n*        PUT THIS ENTRY WHERE IT BELONGS\n*\nGOSORT   L     R3,FORMATAD    POINT TO THE FORMATTED DSCB\n         USING VTFMT,R3       SET ADDRESSABILITY\n         LA    R6,SORTTAB     POINT TO THE SORT FIELDS TABLE\n         SR    R4,R4\n         IC    R4,1(0,R6)     LOAD HIGH KEY OFFSET\n         LA    R4,VTFMT(R4)   POINT TO HIGH KEY\n         LA    R2,VTCSORTH-12 SORT HEADER AREA\nGOSORT1  LA    R2,12(0,R2)    NEXT ENTRY\n         LH    R5,4(0,R2)     LOAD COMAPRE LENGTH\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BE    GOSORT3        YES\n         B     GOSORT4        NO\nGOSORT2  ICM   R5,B'1111',0(R2) GET THE HEAD OF THE LIST\n         BNZ   NOTFIRST       IF NON-ZERO, SEARCH THE LIST\n*\n*        FIRST ENTRY ON THE LIST, IT'S EASY\n*\n         ST    R3,0(R2)       START UP THE LIST\n         B     SORTRET        THEN RETURN\nGOSORT3  EX    R5,GOSORTCL    COMPARE TO GET CORRECT LIST\n         BL    GOSORT1\n         B     GOSORT2\nGOSORT4  EX    R5,GOSORTCL    COMPARE TO GET CORRECT LIST\n         BH    GOSORT1\n         B     GOSORT2\n*\n*        FIND A SLOT FOR THIS ENTRY\n*              FIRST GET THE SHORTER DSN LENGTH\n*\nNOTFIRST SR    R1,R1\n         IC    R1,1(0,R6)     OFFSET OF SORT FIELD\n         LA    R7,0(R1,R5)    LOAD PREV ENTRY FIELD ADDR\n         LA    R8,0(R1,R3)    LOAD NEW ENTRY FIELD ADDR\n         C     R1,=A(VTFDSN-VTFMT)  DSN\n         BNE   NOTFRST1\n*** LENGTH; IT SHOULD ALWAYS USE LENGTH 44 FOR DATA SET NAMES.  ABL-SOR\n         LH    R1,VTFDSNL-VTFMT(0,R3)\n         CH    R1,VTFDSNL-VTFMT(0,R5)\n         BNH   NOTFRST0\n         LH    R1,VTFDSNL-VTFMT(0,R5)\n***FRST0 BCTR  R1,0                                             ABL-SOR\nNOTFRST0 DS    0H             ***COMPARE FOLLOWING BLANK TOO    ABL-SOR\n         B     NOTFRST2\nNOTFRST1 LH    R1,2(0,R6)     LOAD SORT FIELD EXEC LENGTH\nNOTFRST2 CLI   0(R6),C'D'     DESCENDING SORT\n         BE    NOTFRST4       YES\nNOTFRST3 EX    R1,COMPVTF     COMPARE THE FIELDS\n         BL    NEXTENT        LIST ENTRY IS LOWER, UP THE CHAIN\n         BE    CHECKNXT       IDENTICAL, CHECK NEXT FIELD\n         B     INSERT\nNOTFRST4 EX    R1,COMPVTF     COMPARE THE FIELDS\n         BH    NEXTENT        LIST ENTRY IS LOWER, UP THE CHAIN\n         BE    CHECKNXT       IDENTICAL, CHECK NEXT FIELD\n*\n*        THE NEW ENTRY GOES HERE\n*\nINSERT   ST    R3,0(R2)       SAVE THE NEW POINTER\n         ST    R5,VTFNEXT     JUST BEFORE THIS LIST ENTRY\n         B     SORTRET        THEN EXIT\n*\n*\nCHECKNXT LA    R6,4(0,R6)     NEXT SORT FIELD\n         CLC   0(4,R6),=F'0'  ANY MORE FIELDS\n         BE    INSERT         NO, PUT IT HERE\n         B     NOTFIRST       YES, CHECK IT\n*\n*        GET THE NEXT ENTRY ON THIS LIST\n*\nNEXTENT  LA    R2,VTFNEXT-VTFMT(R5)  POINT BACK TO THIS ENTRY\n         LA    R6,SORTTAB     RELOAD SORT FIELD TABLE ADDR\n         ICM   R5,B'1111',VTFNEXT-VTFMT(R5)  GET THE NEXT ENTRY\n         BNZ   NOTFIRST       THERE IS ONE, CHECK IT\n         ST    R3,0(R2)       LAST ENTRY ON THE LIST, PUT IT THERE\n*\n*        RETURN\n*\nSORTRET  LEAVE EQ,RC=0\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\nCOMPVTF  CLC   0(0,R7),0(R8)     EXECUTED COMPARE\nGOSORTCL CLC   0(0,R4),6(R2)     EXECUTED COMPARE\n*\n*\n         PRINT NOGEN\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nSORTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\n         SPACE\n         DS    0D\nLENWORK  EQU   *-SORTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC00": {"ttr": 6921, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x11\\x00\\x84\\x18_\\x01\\x01!_\\x11\\x12\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "2001-08-03T11:12:11", "lines": 27, "newlines": 27, "modlines": 0, "user": "MMSMAK"}, "text": "VTOC000  'INVALID OPTION'            .HELP=VTOC#P1   .ALARM=YES\n'OPTION MUST BE P FOR PRINT OR BLANK FOR BROWSE OR K FOR KEEP.'\n\nVTOC001  'INVALID NO OF COPIES'      .HELP=VTOC#P1   .ALARM=YES\n'NUMBER OF COPIES MUST BE NUMERIC'\n\nVTOC002  'ENTER VOLSER'              .HELP=VTOC#P1   .ALARM=YES\n'ENTER VOLUME SERIAL OR ''ALL'' FOR ALL VOLUMES'\n\nVTOC003  'INVALID VALUE'             .HELP=VTOC#P1   .ALARM=YES\n'VALUE MUST BE BLANK FOR NONE OR YES'\n\nVTOC004  'INVALID KEYWORD'           .HELP=VTOC#P4   .ALARM=YES\n'FOR A LIST OF VALID KEYWORDS USE HELP'\n\nVTOC005  'INVALID OPERATOR'          .HELP=VTOC#P8   .ALARM=YES\n'VALID OPERATORS ARE: EQ, NE, LE, LT, GE, OR GT'\n\nVTOC006  'INVALID LIMIT2 SEQUENCE'   .HELP=VTOC#P1   .ALARM=YES\n'LIMIT1 MUST BE SPECIFIED BEFORE LIMIT2'\n\nVTOC007  'INVALID LIMIT3 SEQUENCE'   .HELP=VTOC#P1   .ALARM=YES\n'LIMIT2 MUST BE SPECIFIED BEFORE LIMIT3'\n\nVTOC008  'INVALID LIMIT4 SEQUENCE'   .HELP=VTOC#P1   .ALARM=YES\n'LIMIT3 MUST BE SPECIFIED BEFORE LIMIT4'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC02": {"ttr": 6923, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x08_\\x00\\x92\\x08_\\x12B\\x00O\\x00O\\x00\\x00\\xe5\\xc7\\xc3\\xc1\\xd9\\xe3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "1992-03-25T12:42:00", "lines": 79, "newlines": 79, "modlines": 0, "user": "VGCART"}, "text": "%---------------------------  VTOC UTILITY  ------------------------------------\n% SELECT OPTION ===>_P\n                             +%SYSOUT Class (If P) ===>_C1+\n%    P -+Print VTOC Entries\n%    K -+Display VTOC Entries and save dataset\n%    Blank -+ Display VTOC Entries\n%\n+   Volume Serial %===>_VOLLIST                                     +\n%\n+   OPTIONS:\n+     Level       %===>_LEVEL                                       +\n+     EXlevel     %===>_EXLEVEL                                     +\n+     Containing  %===>_CONTAIN                                     +\n+     Ending      %===>_ENDING                                      +\n+     Sort/Nosort %===>_SRTFLDS                                     +\n+              And/Or   Keyword   Operator     Value\n+     Limit             %===>_KEYWD +%===>_OP +%===>_VALUE             +\n+     Limit2  %==>_AOR1+%===>_KEYWD1+%===>_OP1+%===>_VALUE1            +\n+     Limit3  %==>_AOR2+%===>_KEYWD2+%===>_OP2+%===>_VALUE2            +\n+     Limit4  %==>_AOR3 %===>_KEYWD3+%===>_OP3+%===>_VALUE3            +\n+    _OTHER                                                            +\n%\n)INIT\n  .HELP = TVTOC1\n  .CURSOR = VOLLIST\n  &C1 = 1\n)PROC\n  &P = TRUNC(&P,1)\n  VER(&P,LIST,' ',P,K,MSG=VTOC000)\n  VER(&VOLLIST,NONBLANK,MSG=VTOC002)\n  IF (&KEYWD \u00ac= ' ')\n    VER(&KEYWD,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,SECQ,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,UNIT,MSG=VTOC004)\n    &OP = TRUNC(&OP,2)\n    IF (&OP = '  ')\n      VER(&OP,NONBLANK,MSG=VTOC005)\n    IF (&OP \u00ac= '  ')\n      VER(&OP,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD1 \u00ac= ' ')\n    VER(&KEYWD,NONBLANK,MSG=VTOC006)\n  IF (&KEYWD1 \u00ac= ' ')\n    VER(&KEYWD1,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,SECQ,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,UNIT,MSG=VTOC004)\n    &OP1 = TRUNC(&OP1,2)\n    IF (&OP1 = '  ')\n      VER(&OP1,NONBLANK,MSG=VTOC005)\n    IF (&OP1 \u00ac= '  ')\n      VER(&OP1,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC007)\n  IF (&KEYWD2 \u00ac= ' ')\n    VER(&KEYWD2,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,SECQ,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,UNIT,MSG=VTOC004)\n    &OP2 = TRUNC(&OP2,2)\n    IF (&OP2 = '  ')\n      VER(&OP2,NONBLANK,MSG=VTOC005)\n    IF (&OP2 \u00ac= '  ')\n      VER(&OP2,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD2,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD1,NONBLANK,MSG=VTOC008)\n  IF (&KEYWD3 \u00ac= ' ')\n    VER(&KEYWD3,LIST,ALLOC,UNUSED,USED,PCT,EX,DSO,RFM,BLKSZ,LRECL,SECQ,\n                CDATE,EXPDT,REFDT,SECT,PASS,ROUND,CCHH,VOLUME,DSNAME,\n                CAT,UNIT,MSG=VTOC004)\n    &OP3 = TRUNC(&OP3,2)\n    IF (&OP3 = '  ')\n      VER(&OP3,NONBLANK,MSG=VTOC005)\n    IF (&OP3 \u00ac= '  ')\n      VER(&OP3,LIST,'EQ','NE','LE','LT','GE','GT',MSG=VTOC005)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOC112": {"ttr": 6926, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x01\"o\\x01\\x01\"o\\x11$\\x03/\\x03/\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-14T00:00:00", "modifydate": "2001-08-14T11:24:19", "lines": 815, "newlines": 815, "modlines": 0, "user": "SBGOLOB"}, "text": "VTOC     TITLE 'VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND - LIST DATA SETS AND ATTRIBUTES           *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER OR A BATCH JOB      *\n*              TO LIST THE CONTENTS OF VARIOUS VOLUMES, WITH A        *\n*              FAIR AMOUNT OF SELECTION.                              *\n*                                                                     *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER OR BATCH JOB A COMMAND        *\n*              WITH THE FOLLOWING SYNTAX.  THEN CHECK THE COMMAND     *\n*              AND LOOP THROUGH, GETTING A DSCB, FORMATTING IT,       *\n*              PERFORMING THE DATA SET NAME AND LIMIT CHECKS, AND     *\n*              CALLING AN EXIT ROUTINE IF DESIRED, THEN PUT THE       *\n*              ENTRY IN THE CORRECT SORT SEQUENCE.                    *\n*              FINALLY CALL THE PRINT ROUTINE TO PRINT THE            *\n*              SPECIFIED ITEMS, HEADERS, AND BREAKS, OR JUST          *\n*              THE TOTALS.                                            *\n*                                                                     *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *\n*              POINTED TO BY REGISTER 1                               *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES.                                      *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*              FIREMAN'S FUND INSURANCE  CPSD 2N                      *\n*              ONE LUCAS GREEN                                        *\n*              SAN RAFAEL, CA  94911                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         MACRO\n&LABEL   VTOCEXCP  &FUNC\n         AIF   ('&FUNC' NE 'EQ').CALL\nVTCOPEN  EQU   1              DEFINE FUNCTION CODES FOR VTOCEXCP\nVTCCLOSE EQU   2\nVTCREAD  EQU   0\n         MEXIT\n.CALL    ANOP                 CALL VTOCEXCP\n&LABEL   MVI   VTCEFUNC,VTC&FUNC   SET THE FUNCTION CODE\n         VTCALL EXCP          GO GET A DSCB\n         MEND\n*\n*        MACRO FOR INITIALIZING SUBROUTINE WORK AREA ADDRESSES\n*\n         MACRO\n&LABEL   WORKADDR &RTN,&PRMADDR\n&LABEL   L     R1,=A(WORK&RTN-WORKAREA)  GET THE OFFSET ( OVER 4K )\n         LA    R1,0(R1,R13)   RELOCATE IT\n         ST    R1,&PRMADDR   THEN STORE IT FOR THE ROUTINES\n         MEND\n*\n         EJECT\nVTOCCMD  ENTERX 12,(1,LENWORK,C)     DO THE HOUSEKEEPING\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE\n         USING WORKAREA,WORKREG\n         EJECT\n         BAL   R14,PARSINIT   PERFORM THE PARSING\n         LTR   R15,R15        TEST THE RETURN CODE\n         BNZ   RETURN         BAD NEWS, GET OUT\n         VTCALL PRNT         INITIALIZE FOR PRINTING\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n*\n*\n*        SCAN SORT PARSE LIST AND BUILD SORT FIELD TABLE\n*\n*\nSORTPAR  LA    R4,SUBSORT     SORT PARSE LIST\n         LA    R5,SORTTAB     SORT FIELD TABLE\n         XC    0(64,R5),0(R5) CLEAR SORT FIELD TABLE\n         MVC   0(4,R5),SORTTABX DEFAULT TO DSNAME\n         SPACE 1\nSORTPAR1 LA    R1,SORTTABX-12 SORT COMPARE TABLE\n         SPACE 1\nSORTPAR2 LA    R1,12(0,R1)    POINT TO NEXT COMPARE ENTRY\n         CLC   0(4,R1),=F'0'  END OF TABLE\n         BE    SORTPAR3       ITEM NOT FOUND, IGNORE\n         L     R6,0(0,R4)     POINT TO TEXT\n         LH    R3,4(0,R4)     TEXT LENGTH\n         LTR   R3,R3          IGNORE IF ZERO\n         BZ    SORTPAR3\n         BCTR  R3,0\n         EX    R3,SORTCOMP    FIELD NAME MATCH\n         BE    SORTPAR4       YES\n         B     SORTPAR2       NO, TRY NEXT\n         SPACE 1\nSORTPAR3 ICM   R4,7,9(R4)     NEXT ITEM\n         BNZ   SORTPAR1       CONTINUE IF MORE\n         B     SORTPAR5\n         SPACE 1\nSORTPAR4 MVC   0(4,R5),0(R1)  SET UP SORT FIELD\n         ICM   R4,7,9(R4)     ASCENDING/DESCENDING INDICATOR\n         BZ    PARMERR        ERROR IF MISSING\n         L     R6,0(0,R4)     INDICATOR ADDR\n         CLC   4(2,R4),=F'0'  ERROR IF MISSING\n         BE    PARMERR\n         MVC   0(1,R5),0(R6)  A/D INDICATOR\n         LA    R5,4(0,R5)\n         CLI   0(R6),C'A'     ASCENDING SORT\n         BE    SORTPAR3       YES, OK\n         CLI   0(R6),C'D'     DESCENDING SORT\n         BNE   PARMERR        NO, ERROR\n         B     SORTPAR3       CHECK IF ANY MORE\n         SPACE 1\nSORTCOMP CLC   4(0,R1),0(R6)\n         SPACE 1\nSORTPAR5 LA    R3,SORTKTAB-12 SORT HEADER INDEX TABLE\nSORTK1   LA    R3,12(0,R3)    NEXT ENTRY\n         CLC   0(4,R3),=F'0'  END OF TABLE\n         BE    SORTK3         YES\n         CLC   SORTTAB+1(1),1(R3)  ENTRY MATCH\n         BNE   SORTK1         NO, CHECK NEXT\n         SR    R4,R4\n         LH    R5,2(0,R3)     LOAD TABLE LENGTH\n         D     R4,=F'12'      TABLE ENTRIES\n         LA    R5,1(0,R5)\n         LA    R6,VTCSORTH\n         L     R4,4(0,R3)     LOAD TABLE BEGIN ADDR\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    SORTK2         YES\n         L     R4,8(0,R3)     LOAD TABLE END ADDR\nSORTK2   MVC   0(12,R6),0(R4)\n         LA    R4,12(0,R4)\n         LA    R6,12(0,R6)\n         CLI   SORTTAB,C'D'   DESCENDING SORT\n         BE    *+8            YES\n         S     R4,=F'24'\n         BCT   R5,SORTK2\n         B     SORTK4\nSORTK3   MVC   VTCSORTH(12),=3F'0'\nSORTK4   MVC   0(12,R6),=3F'0'\n*\n*        CHECK THROUGH THE UCB'S TO SELECT THE VOLUMES TO PROCESS\n*\n*\n**  FIND A VOLUME SERIAL NUMBER\n*\n         LA    R3,VOLS        POINT TO THE PDL\nLOOP1    L     R5,0(R3)       GET THE ADDRESS OF THE TEXT\n         LH    R4,4(R3)       ALSO GET ITS LENGTH\n         LTR   R4,R4          FOR EXECUTES, GET THE LENGTH\n         BZ    PHASE2         NO MORE VOLUMES, CONTINUE TO NEXT PHASE\n         BCTR  R4,0           MAKE IT READY FOR THE EX INSTR\n         MVC   VOLSER,BLANKS   INITIALIZE FIELD\n         EX    R4,MOVVOL\n*\n**  VOLUME FOUND - VERIFY AND CHECK FOR GLOBAL OR SPECIAL REQUESTS\n*\n         CH    R4,H5          IS THE ENTIRE NAME THERE?\n         BE    VOLSET         YES, IT'S A SPECIFIC VOLUME\n         MVI   FLAG,X'01'     IT'S A GENERIC REQUEST\n         CH    R4,H2          CHECK FOR THE ALL KEYWORD, FIRST LENGTH\n         BNE   VOLSET         NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALV  IS THIS THE KEYWORD 'ALLV'?\n         BE    VOLSETV        NO, NOT A GLOBAL REQUEST\n         CLC   0(3,R5),CHARALL  IS THIS THE KEYWORD 'ALL'?\n         BNE   VOLSET         NO, NOT A GLOBAL REQUEST\n         MVI   FLAG,X'02'   GLOBAL REQUEST\n         B     VOLSET\n*\n**  FIND THE A(UCB)\n*\nVOLSETV  MVI   FLAG,X'82'   GLOBAL REQUEST FOR VIRTUAL\n         B     VOLSET\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\n         L     R5,16   A(CVT)\n         SR    R6,R6\n         L     R5,40(R5)   A(UCB ADDRESSES)\nNEXTUCB  ICM   R6,3,0(R5)   A(A UCB)\n         LTR   R6,R6   CHECK FOR VALID ENTRIES\n         BZ    INCR1   UCB HOLE\n         C     R6,FMIN1    CHECK FOR END\n         BE    NOTMNT   END OF UCB LIST - VOLUME NOT FOUND\n         CLI   18(R6),X'20'   MUST BE DIRECT ACCESS\n         BNE   INCR1\n         C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n         BNH   INCR1        OTHERWISE THEY REPEAT.\n         ST    R6,LASTADR   NEW ADDRESS\n         TM    FLAG,X'02'   CHECK FOR GLOBAL\n         BO    FNDGBL   IT IS\n         TM    FLAG,X'01'   CHECK FOR SPECIAL REQUESTS\n         BO    SPECUCB   IT IS\n         CLC   VOLSER,28(R6)   COMPARE FULL VOLSER\n         BE    FNDUCB   FOUND IT\n         B     INCR1\nSPECUCB  EX    R4,CLCVOL   COMPARE FIRST X CHARACTERS ONLY\n         BE    CHKRDY\nINCR1    LA    R5,2(R5)\n         B     NEXTUCB   TRY NEXT UCB\n*\n*        VARIOUS ERRORS, LET THE PERSON KNOW\n*\nNOTMNT   TM    FLAG,X'04'     WAS A VOLUME  FOUND?\n         BO    NEXTVOL        YES, LOOK FOR THE NEXT SPEC\n         MVC   MSGTEXT2,MSGNOTMT  NO, GET THE ERROR MESSAGE\nSETVOL   MVC   MSGTEXT2+5(6),VOLSER ADD THE VOLUME SERIAL NUMBER\n         VTOCMSG MSGTEXT2     AND ISSUE THE MESSAGE\n         B     NEXTVOL       GO GET THE NEXT VOLUME FROM PARSE\nPENDING  MVC   MSGTEXT2,MSGPEND   SET UP THE MESSAGE\n*\n*        SEE IF THIS IS A GENERIC OR GLOBAL REQUEST\n*\n         TM    FLAG,X'03'    WAS IT ALL OR A PARTIAL VOLUME SERIAL?\n         BNZ   INCR1         IN EITHER CASE, SKIP THE MESSAGE\n*                            THEN FIND MORE VOLUMES\n*\n*        OUTPUT THE OFFLINE PENDING MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\nOFFLINE  MVC   MSGTEXT2,MSGOFFLN SET UP THE MESSAGE\n         B     SETVOL         THEN ADD THE VOLUME\n*\n**  FOR GLOBAL REQUESTS JUST LIST ONLINE PACKS\n*\nFNDGBL   TM    3(R6),X'80'   ONLINE BIT\n         BZ    INCR1   NOPE\n*\n**  FOR GLOBAL AND SPECIAL REQUESTS, CHECK FOR DEVICE READY\n*\nCHKRDY   TM    6(R6),X'40'   TEST READY BIT\n         BO    INCR1   NOT READY\n         TM    FLAG,X'80'   GLOBAL REQUEST FOR VIRTUAL\n         BO    CHKVIRT\n         TM    FLAG,X'02'   GLOBAL REQUEST\n         BZ    FNDUCB\n         TM    17(R6),X'08'  VIRTUAL UCB\n         BO    INCR1   YES\n         B     FNDUCB\nCHKVIRT  TM    17(R6),X'08'  VIRTUAL UCB\n         BZ    INCR1   NO\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6)   MOVE VOLID\n         MVC   ADDR,13(R6)   MOVE UNIT ADDRESS\n         OI    FLAG,X'04'      NOTE THE VOLUME AS FOUND\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n         TM    3(R6),X'40'   PENDING BIT - SHOULD BE OFF\n         BO    PENDING\n         TM    3(R6),X'80'   ONLINE BIT - SHOULD BE ON\n         BZ    OFFLINE\n*\n*        NOW GET DSCB'S FROM THE VOLUME\n*\n*\n*        SET UP THE PARM LIST FOR VTOCEXCP\n*\n         VTOCEXCP OPEN        OPEN THE VTOC\n         LTR   R15,R15        DID IT OPEN OK?\n         BNE   RETURN         NO, JUST EXIT\nREADDSCB CLI   TABFULL,0     CHECK FOR FULL TABLES\n         BNE   ENDVTOC       IF FULL, TRY END OF VTOC TO CLEAR\n         VTOCEXCP READ        GET A DSCB\n         CH    R15,H4         CHECK THE RETURN CODE\n         BE    ENDVTOC        END OF VTOC\n         BH    RETURN         BAD ERROR, VTOCEXCP GAVE THE MESSAGE\n*\n*        CHECK THE DATA SET QUALIFICATIONS, LIMIT, AND, OR\n*\n         VTCALL CHEK          CALL THE CHECK ROUTINE\n         LTR   R15,R15        DOES THIS DATA SET GET PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER\n*                             YES, CONTINUE PROCESSING\n*\n*        FORMAT THE DSCB INFORMATION\n*\n         TM    VTCFMTCK,VTCFMTCD WAS FORMAT CALLED BY CHECK?\n         BO    CALLEXIT       YES, DON'T CALL IT AGAIN\n         VTCALL FORM          CALL THE FORMATTING ROUTINE\n         LTR   R15,R15        DID IT FUNCTION?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        CALL THE EXIT ROUTINE IF ONE WAS SPECIFIED\n*\nCALLEXIT VTCALL EXIT,TEST     CALL THE EXIT ROUTINE\n         LTR   R15,R15        SHOULD THE DATA SET BE PASSED ON?\n         BNZ   READDSCB       NO, GET ANOTHER DSCB\n*\n*        SORT THE ENTRIES INTO THE NEW LIST\n*\n         VTCALL SORT          CALL THE SORT ROUTINE\n         B     READDSCB       GET ANOTHER DSCB\n*\n*        END OF THE VOLUME, CHECK FOR MORE\n*\nENDVTOC  VTOCEXCP CLOSE FIRST CLOSE THE VTOC\n*\nENDVOL   TM    FLAG,X'03'         IS THIS A GENERIC VOLUME SEARCH\n         BNZ   INCR1              YES, SEARCH FOR MORE\nNEXTVOL  ICM   R3,B'0111',25(R3)  GET THE NEXT VOLUME FROM THE PDL\n         BP    LOOP1              THERE IS ANOTHER, GET IT\n*\n*        PRINT THE SELECTED ITEMS FOR THE SELECTED DATA SETS\n*\nPHASE2   DS    0H\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         B     EXIT0\n         EJECT\n*\n*        PROCESSING IS COMPLETE, EXEUNT\n*\nPARMERR  LA    R15,16\n         B     RETURN\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES, LEAVE EVERY THING ALONE\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1        AN ERROR WAS FOUND, FLUSH THE STACK\n         SPACE\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         MVI   VTCEPRNT,15    TELL PRINT TO CLEAN UP HIS ACT\n*                                CLOSE DATA SETS AND FREE MAIN STORAGE\n         VTCALL PRNT          CALL THE PRINT ROUTINE\n         SPACE\n         LR    R15,R2          GET THE RETURN CODE AGAIN\n         LEAVE EQ\nWORKREG  EQU   13\n*\n*        PARSE INITIALIZATION\n*\n         SPACE 3\nPARSINIT DS    0H\n         ST    R2,CPPLADDR    AND THE CPPL ADDRESS\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE\n         MVC   ADDRPSCB,CPPLPSCB\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE\n         MVC   ADDRCBUF,CPPLCBUF\n         DROP  R2\n         SPACE 3\n*\n*        PUT THE WORK AREA ADDRESSES INTO THE PARM LISTS\n*\n         WORKADDR MSG,VTCWMSG     WORK AREA FOR VTOCMSG\n         WORKADDR EXCP,VTCWEXCP   WORK AREA FOR VTOCEXCP\n         WORKADDR CHEK,VTCWCHEK   WORK AREA FOR VTOCCHEK\n         WORKADDR FORM,VTCWFORM   WORK AREA FOR VTOCFORM\n         WORKADDR EXIT,VTCWEXIT   WORK AREA FOR VTOCEXIT\n         WORKADDR SORT,VTCWSORT   WORK AREA FOR VTOCSORT\n         WORKADDR PRNT,VTCWPRNT   WORK AREA FOR VTOCPRNT\n         SPACE 3\n*        SET UP THE ADDRESSES FOR CALLING\n*\n         MVC   VADMSG(RTNADLEN),RTNADDRS  MOVE IN THE ADDRESSES\n*\n*\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\nGOPARSE  DS    0H\n         ST    R14,R14PARSE   SAVE THE RETURN ADDRESS\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     PARSEERR        4- PARSE UNABLE TO PROMPT\n         B     PARSEERR        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     PARSEERR       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         VTOCMSG MSGCMDER,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         SPACE 3\nPARSEERR LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     PARSERTN       RETURN FROM PARSE\n         SPACE\nPARSEOK  SR    R15,R15        CLEAR THE RETURN CODE\nPARSERTN L     R14,R14PARSE   GET THE RETURN LOCATION\n         BR    R14            AND GET OUT OF HERE\n         SPACE\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE\n         ST    R14,R14SAVE\n         SPACE\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         LTORG\nRTNADDRS DC    V(VTOCMSG)\n         DC    A(0)           DUMMY ENTRY FOR THE EXIT ROUTINE\n         DC    V(VTOCEXCP)\n         DC    V(VTOCCHEK)\n         DC    V(VTOCFORM)\n         DC    V(VTOCPRNT)\n         DC    V(VTOCSORT)\nRTNADLEN EQU   *-RTNADDRS\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nBLANKS   DC    CL8' '         BALNKS\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\n*\n*\n*\n*\n*\nCHARALL  DC    CL3'ALL'\nCHARALV  DC    CL3'ALV'\nMOVVOL   MVC   VOLSER(0),0(R5)\nCLCVOL   CLC   VOLSER(0),28(R6)\n         EJECT\nSORTTABX DC    AL2(VTFDSN-VTFMT),AL2(43),CL8'DSNAME'\n         DC    AL2(VTFVOLUM-VTFMT),AL2(5),CL8'VOLUME'\n         DC    AL2(VTFALLOC-VTFMT),AL2(3),CL8'ALLOC'\n         DC    AL2(VTFUSED-VTFMT),AL2(3),CL8'USED'\n         DC    AL2(VTFUNUSD-VTFMT),AL2(3),CL8'UNUSED'\n         DC    AL2(VTFPCT-VTFMT),AL2(1),CL8'PCT'\n         DC    AL2(VTFNOEPV-VTFMT),AL2(0),CL8'EX'\n         DC    AL2(VTFDSORG-VTFMT),AL2(2),CL8'DSO'\n         DC    AL2(VTFRECFM-VTFMT),AL2(4),CL8'RFM'\n         DC    AL2(VTFLRECL-VTFMT),AL2(1),CL8'LRECL'\n         DC    AL2(VTFBLKSZ-VTFMT),AL2(1),CL8'BLKSZ'\n         DC    AL2(VTFCREDT-VTFMT),AL2(2),CL8'CDATE'\n         DC    AL2(VTFEXPDT-VTFMT),AL2(2),CL8'EXPDT'\n         DC    AL2(VTFLSTAC-VTFMT),AL2(2),CL8'REFDT'\n         DC    F'0'\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE\nMSGPARSE MSGZ  ' PARSE ERROR CODE '\nMSGCMDER MSGZ  ' COMMAND SYSTEM ERROR'\nMSGNOTMT MSGZ  ' VVVVVV VOLUME IS NOT MOUNTED'\nMSGOFFLN MSGZ  ' VVVVVV VOLUME IS OFFLINE'\nMSGPEND  MSGZ  ' VVVVVV VOLUME IS PENDING OFFLINE'\n*\n*\n         EJECT\n         DS    0F\nSORTKTAB DC    AL2(VTFDSN-VTFMT),AL2(DSNSORTE-DSNSORT)\n         DC    A(DSNSORT),A(DSNSORTE)\n         DC    AL2(VTFVOLUM-VTFMT),AL2(VOLSORTE-VOLSORT)\n         DC    A(VOLSORT),A(VOLSORTE)\n         DC    AL2(VTFUSED-VTFMT),AL2(USESORTE-USESORT)\n         DC    A(USESORT),A(USESORTE)\n         DC    AL2(VTFALLOC-VTFMT),AL2(ALCSORTE-ALCSORT)\n         DC    A(ALCSORT),A(ALCSORTE)\n         DC    AL2(VTFUNUSD-VTFMT),AL2(UNUSORTE-UNUSORT)\n         DC    A(UNUSORT),A(UNUSORTE)\n         DC    AL2(VTFPCT-VTFMT),AL2(PCTSORTE-PCTSORT)\n         DC    A(PCTSORT),A(PCTSORTE)\n         DC    AL2(VTFNOEPV-VTFMT),AL2(EXTSORTE-EXTSORT)\n         DC    A(EXTSORT),A(EXTSORTE)\n         DC    AL2(VTFDSORG-VTFMT),AL2(DSOSORTE-DSOSORT)\n         DC    A(DSOSORT),A(DSOSORTE)\n         DC    AL2(VTFRECFM-VTFMT),AL2(RFMSORTE-RFMSORT)\n         DC    A(RFMSORT),A(RFMSORTE)\n         DC    AL2(VTFLRECL-VTFMT),AL2(LRCSORTE-LRCSORT)\n         DC    A(LRCSORT),A(LRCSORTE)\n         DC    AL2(VTFBLKSZ-VTFMT),AL2(BLKSORTE-BLKSORT)\n         DC    A(BLKSORT),A(BLKSORTE)\n         DC    AL2(VTFCREDT-VTFMT),AL2(CDTSORTE-CDTSORT)\n         DC    A(CDTSORT),A(CDTSORTE)\n         DC    AL2(VTFLSTAC-VTFMT),AL2(RDTSORTE-RDTSORT)\n         DC    A(RDTSORT),A(RDTSORTE)\n         DC    AL2(VTFEXPDT-VTFMT),AL2(EDTSORTE-EDTSORT)\n         DC    A(EDTSORT),A(EDTSORTE)\n         DC    2F'0'\n         SPACE 3\nDSNSORT  DC    A(0),AL2(0),CL6'Z'\n         DC    A(0),AL2(1),CL6'TV'\n         DC    A(0),AL2(1),CL6'TM'\n         DC    A(0),AL2(2),CL6'T.Z'\n         DC    A(0),AL2(2),CL6'T.Y'\n         DC    A(0),AL2(2),CL6'T.X'\n         DC    A(0),AL2(2),CL6'T.W'\n         DC    A(0),AL2(2),CL6'T.V'\n         DC    A(0),AL2(2),CL6'T.U'\n         DC    A(0),AL2(2),CL6'T.T'\n         DC    A(0),AL2(2),CL6'T.S'\n         DC    A(0),AL2(2),CL6'T.R'\n         DC    A(0),AL2(2),CL6'T.Q'\n         DC    A(0),AL2(2),CL6'T.P'\n         DC    A(0),AL2(2),CL6'T.O'\n         DC    A(0),AL2(2),CL6'T.N'\n         DC    A(0),AL2(2),CL6'T.M'\n         DC    A(0),AL2(2),CL6'T.L'\n         DC    A(0),AL2(2),CL6'T.K'\n         DC    A(0),AL2(2),CL6'T.J'\n         DC    A(0),AL2(2),CL6'T.I'\n         DC    A(0),AL2(2),CL6'T.H'\n         DC    A(0),AL2(2),CL6'T.G'\n         DC    A(0),AL2(2),CL6'T.F'\n         DC    A(0),AL2(2),CL6'T.E'\n         DC    A(0),AL2(2),CL6'T.D'\n         DC    A(0),AL2(2),CL6'T.C'\n         DC    A(0),AL2(2),CL6'T.B'\n         DC    A(0),AL2(2),CL6'T.A'\n         DC    A(0),AL2(1),CL6'SY'\n         DC    A(0),AL2(1),CL6'SV'\n         DC    A(0),AL2(1),CL6'PV'\n         DC    A(0),AL2(2),CL6'P.Z'\n         DC    A(0),AL2(2),CL6'P.Y'\n         DC    A(0),AL2(2),CL6'P.X'\n         DC    A(0),AL2(2),CL6'P.W'\n         DC    A(0),AL2(2),CL6'P.V'\n         DC    A(0),AL2(2),CL6'P.U'\n         DC    A(0),AL2(2),CL6'P.T'\n         DC    A(0),AL2(2),CL6'P.S'\n         DC    A(0),AL2(2),CL6'P.R'\n         DC    A(0),AL2(2),CL6'P.Q'\n         DC    A(0),AL2(2),CL6'P.P'\n         DC    A(0),AL2(2),CL6'P.O'\n         DC    A(0),AL2(2),CL6'P.N'\n         DC    A(0),AL2(2),CL6'P.M'\n         DC    A(0),AL2(2),CL6'P.L'\n         DC    A(0),AL2(2),CL6'P.K'\n         DC    A(0),AL2(2),CL6'P.J'\n         DC    A(0),AL2(2),CL6'P.I'\n         DC    A(0),AL2(2),CL6'P.H'\n         DC    A(0),AL2(2),CL6'P.G'\n         DC    A(0),AL2(2),CL6'P.F'\n         DC    A(0),AL2(2),CL6'P.E'\n         DC    A(0),AL2(2),CL6'P.D'\n         DC    A(0),AL2(2),CL6'P.C'\n         DC    A(0),AL2(2),CL6'P.B'\n         DC    A(0),AL2(2),CL6'P.A'\n         DC    A(0),AL2(0),CL6'N'\nDSNSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nVOLSORT  DC    A(0),AL2(4),CL6'33509'\n         DC    A(0),AL2(4),CL6'33508'\n         DC    A(0),AL2(4),CL6'33507'\n         DC    A(0),AL2(4),CL6'33506'\n         DC    A(0),AL2(4),CL6'33505'\n         DC    A(0),AL2(4),CL6'33504'\n         DC    A(0),AL2(4),CL6'33503'\n         DC    A(0),AL2(4),CL6'33502'\n         DC    A(0),AL2(4),CL6'33501'\n         DC    A(0),AL2(4),CL6'33500'\n         DC    A(0),AL2(4),CL6'33309'\n         DC    A(0),AL2(4),CL6'33308'\n         DC    A(0),AL2(4),CL6'33307'\n         DC    A(0),AL2(4),CL6'33306'\n         DC    A(0),AL2(4),CL6'33305'\n         DC    A(0),AL2(4),CL6'33304'\n         DC    A(0),AL2(4),CL6'33303'\n         DC    A(0),AL2(4),CL6'33302'\n         DC    A(0),AL2(4),CL6'33301'\n         DC    A(0),AL2(4),CL6'33300'\n         DC    A(0),AL2(0),CL6'T'\n         DC    A(0),AL2(0),CL6'R'\n         DC    A(0),AL2(0),CL6'P'\n         DC    A(0),AL2(0),CL6'M'\n         DC    A(0),AL2(0),CL6'I'\n         DC    A(0),AL2(0),CL6'H'\nVOLSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nUSESORT  DS    0F\nUNUSORT  DS    0F\nALCSORT  DC    A(0),AL2(3),XL4'0000F000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000C000',XL2'00'\n         DC    A(0),AL2(3),XL4'0000A000',XL2'00'\n         DC    A(0),AL2(3),XL4'00008000',XL2'00'\n         DC    A(0),AL2(3),XL4'00006000',XL2'00'\n         DC    A(0),AL2(3),XL4'00005000',XL2'00'\n         DC    A(0),AL2(3),XL4'00004000',XL2'00'\n         DC    A(0),AL2(3),XL4'00003000',XL2'00'\n         DC    A(0),AL2(3),XL4'00002000',XL2'00'\n         DC    A(0),AL2(3),XL4'00001000',XL2'00'\n         DC    A(0),AL2(3),XL4'00000C00',XL2'00'\n         DC    A(0),AL2(3),XL4'00000800',XL2'00'\n         DC    A(0),AL2(3),XL4'00000400',XL2'00'\n         DC    A(0),AL2(3),XL4'00000300',XL2'00'\n         DC    A(0),AL2(3),XL4'00000200',XL2'00'\n         DC    A(0),AL2(3),XL4'00000100',XL2'00'\n         DC    A(0),AL2(3),XL4'000000C0',XL2'00'\n         DC    A(0),AL2(3),XL4'00000080',XL2'00'\n         DC    A(0),AL2(3),XL4'00000040',XL2'00'\n         DC    A(0),AL2(3),XL4'00000010',XL2'00'\nUSESORTE DS    0F\nUNUSORTE DS    0F\nALCSORTE DC    A(0),AL2(3),XL6'00'\n         SPACE 3\nPCTSORT  DC    A(0),AL2(1),XL2'0064',XL4'00'\n         DC    A(0),AL2(1),XL2'005A',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0046',XL4'00'\n         DC    A(0),AL2(1),XL2'003C',XL4'00'\n         DC    A(0),AL2(1),XL2'0032',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\n         DC    A(0),AL2(1),XL2'001E',XL4'00'\n         DC    A(0),AL2(1),XL2'0014',XL4'00'\n         DC    A(0),AL2(1),XL2'000A',XL4'00'\nPCTSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nEXTSORT  DC    A(0),AL2(0),CL6'0'\nEXTSORTE DC    A(0),AL2(0),CL6'0'\n         SPACE 3\nDSOSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(1),CL6'PS'\n         DC    A(0),AL2(1),CL6'PO'\n         DC    A(0),AL2(1),CL6'DA'\nDSOSORTE DC    A(0),AL2(1),CL6' '\n         SPACE 3\nRFMSORT  DC    A(0),AL2(1),CL6'VS'\n         DC    A(0),AL2(2),CL6'VBS'\n         DC    A(0),AL2(1),CL6'VB'\n         DC    A(0),AL2(0),CL6'V'\n         DC    A(0),AL2(0),CL6'U'\n         DC    A(0),AL2(1),CL6'FS'\n         DC    A(0),AL2(2),CL6'FBS'\n         DC    A(0),AL2(1),CL6'FB'\n         DC    A(0),AL2(0),CL6'F'\nRFMSORTE DC    A(0),AL2(0),CL6' '\n         SPACE 3\nLRCSORT  DS    0F\nBLKSORT  DC    A(0),AL2(1),XL2'4650',XL4'00'\n         DC    A(0),AL2(1),XL2'3A98',XL4'00'\n         DC    A(0),AL2(1),XL2'2EE0',XL4'00'\n         DC    A(0),AL2(1),XL2'2328',XL4'00'\n         DC    A(0),AL2(1),XL2'1770',XL4'00'\n         DC    A(0),AL2(1),XL2'0BB8',XL4'00'\n         DC    A(0),AL2(1),XL2'07D0',XL4'00'\n         DC    A(0),AL2(1),XL2'0640',XL4'00'\n         DC    A(0),AL2(1),XL2'04B0',XL4'00'\n         DC    A(0),AL2(1),XL2'0320',XL4'00'\n         DC    A(0),AL2(1),XL2'0258',XL4'00'\n         DC    A(0),AL2(1),XL2'0190',XL4'00'\n         DC    A(0),AL2(1),XL2'00C8',XL4'00'\n         DC    A(0),AL2(1),XL2'00A0',XL4'00'\n         DC    A(0),AL2(1),XL2'0078',XL4'00'\n         DC    A(0),AL2(1),XL2'0050',XL4'00'\n         DC    A(0),AL2(1),XL2'0028',XL4'00'\nBLKSORTE DS    0F\nLRCSORTE DC    A(0),AL2(1),XL6'00'\n         SPACE 3\nCDTSORT  DS    0F\nEDTSORT  DS    0F\nRDTSORT  DC    A(0),AL2(2),AL1(99),AL2(0),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(83),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(82),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(81),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(80),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(79),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(78),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(77),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(76),AL2(000),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(300),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(200),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(100),XL3'00'\n         DC    A(0),AL2(2),AL1(75),AL2(000),XL3'00'\nEDTSORTE DS    0F\nRDTSORTE DS    0F\nCDTSORTE DC    A(0),AL2(2),XL6'00'\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         COPY  VTOCPARS\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\n         SPACE\n         VTOCEXCP EQ          DEFINE VTOCEXCP CODES\n         SPACE\nPARSELST DS    8A             AREA FOR PARSE PARAMETER LIST\n         SPACE\nR14SAVE  DS    A\nR14PARSE DS    A\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT GEN\n         VTOCOM  NODSECT\n         PRINT NOGEN\n         SPACE 3\n*\n*        WORK AREAS FOR SUBROUTINES\n*\nWORKMSG  DS    XL256\nWORKEXCP DS    4XL256\nWORKCHEK DS    XL256\nWORKFORM DS    2XL256\nWORKEXIT DS    8XL256\nWORKSORT DS    XL256\nWORKPRNT DS    10XL256\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         SPACE 3\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         SPACE 3\n         IKJUPT\n         SPACE 3\n         PRINT NOGEN\n         CVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTXCPRNT": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00B\\x00\\x92\\x08o\\x01\\x01$\\x1f\\x08\\x08\\x04\\xbf\\x04\\x8a\\x00A\\xd3\\xf0\\xf0\\xf3\\xe2\\xe6\\xe2@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1992-03-26T00:00:00", "modifydate": "2001-08-29T08:08:42", "lines": 1215, "newlines": 1162, "modlines": 65, "user": "L003SWS"}, "text": "VTOCPRNT TITLE 'VTOC COMMAND PRINT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND PRINT ROUTINE                             *\n*                                                                     *\n* FUNCTION -   PRINT THE DATA PASSED TO IT.  IT WILL USE THE DDNAME   *\n*              SYSOUT IF IT IS ALLOCATED, AND WILL USE THE VTOCMSG    *\n*              ROUTINE IF NOT.  IT CAN ALSO PUT OUT THE DATA TO       *\n*              AN OUTPUT DATA SET.  TOTALS ARE COMPUTED HERE.         *\n*                                                                     *\n* OPERATION -  FOR UNSORTED DATA, GET THE CURRENT ENTRY, ADD TO THE   *\n*              TOTALS, AND OUTPUT IT.  IF THE DATA IS SORTED, THE     *\n*              ACTION IS MORE COMPLEX, BECAUSE ALL THE DATA SETS      *\n*              ARE TO BE OUTPUT.  THE TOTALS AND BREAKS MAY BE        *\n*              NEEDED AT ANY POINT.                                   *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES, WITH TOTALS AND BREAKS AS NEEDED.    *\n*              ALSO TO THE OUTPUT DATA SET, IF NEEDED.  IF SYSOUT     *\n*              IS NOT ALLOCATED, VTOCMSG IS USED FOR OUTPUT.          *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n*   1/4/83 UPDATED CODE TO PROCESS CYLS,KBYTES,MBYTES     LMB 1/4/83  *\n*          LAUREEN BEAUCHAINE  -  CBT                     LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-EXT\n*           LIM(EX GT 2) TO MEAN EXTENTS (NOT EXPDT).           ABL-EXT\n*                                                                     *\n* 3/29/88 - MODIFIED BY HENTRY FARINEAU AT STATE MUTUAL TO      HXF-ALL\n*           MODIFY ALLOC AND UNUSED FIELD TO 8 BYTES.           HXF-ALL\n*                                                                     *\n* 5/05/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           TERMINATE PRINT OUTPUT AFTER AN ATTENTION FROM PDS  ABL-PDS\n*                                                                     *\n* 6/02/88 - MODIFIED BY GUY ALBERTELLI AT BFGOODRICH TO         GLA-PDS\n*           NOT PASS BACK THE HEADING OR TOTAL LINES            GLA-PDS\n*                                                                     *\n* 8/24/88 - MODIFIED BY BRUCE LELAND TO STILL PASS BACK         GLA-PDS\n*           THE HEADING LINES                                   GLA-PDS\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO USE BETTER     TANSKY\n*           BLOCKSIZES VIA A DCB OPEN EXIT.                     TANSKY\n*           ALSO FIXED THE \"USED\" FIELD TO BE THE CORRECT       TANSKY\n*           LENGTH IN THE TABTITL TABLE.                        TANSKY\n*           ADDED UNIT TYPE PRINTING                            TANSKY\n*                                                                     *\n*11/25/92 - MODIFIED BY A. BRUCE LELAND AT SERENA TO ALLOW      ABL-PDS\n*           UP TO 132 CHARACTERS IN AN OUTPUT LINE FROM PDS.    ABL-PDS\n*                                                                     *\n*08/09/94 - MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n*06/13/95 - MODIFIED BY A. BRUCE LELAND TO CORRECT THE EXPDT    ABL-EX\n*           PROCESSING.  EXPDT WAS BEING TREATED AS THE END     ABL-EX\n*           OF THE PARSE LIST INCORRECTLY IN PRINT(NEW (EXPDT.. ABL-EX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ELIMINATE   JVH-FIX\n*           THE ASSEMBLER WARNING MESSAGES WHEN USING THE       JVH-FIX\n*           HIGH LEVEL ASSEMBLER FROM IBM.                      JVH-FIX\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n***********************************************************************\n*\n*        MACRO FOR DEFINING FAKE PDE FOR A DEFAULT LIST\n*\n         EJECT\nVTOCPRNT ENTER 12,20          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING PRNTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE PRINT CLEAN - CLOSE AND FREEMAIN\n*\n         CLI   VTCEPRNT,0     IS IT TIME\n         BNE   PRNTCLEN       YES, GO DO IT\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, SET UP THE DCB'S AND OPEN THEM\n*\n         CLI   FIRSTIM,0      IS THIS THE FIRST TIME?\n         BNE   CHKSORT        NO, KEEP ON TRUCKIN'\n         B     PRTINIT    INITIALIZE FOR PRINTING\n*\n*        CHECK TO SEE IF THE DATA IS SORTED\n*\nCHKSORT  CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   SORTED         NO, THE ENTRIES ARE SORTED\n*\n*        NOSORT WAS SPECIFIED.  ONLY THE CURRENT ENTRY IS AVAILABLE\n*\n         L     R3,FORMATAD    POINT TO THE ENTRY\n         USING VTFMT,R3       FORMATTED DSCB ADDRESSABILITY\n         LTR   R3,R3          IS IT THERE?\n         BZ    CHEKTOT        NO, SEE IF A TOTAL HAS BEEN OUTPUT\n         XC    FORMATAD,FORMATAD  CLEAR THE ADDRESS FOR LATER\n*\n*        ADD TO THE TOTALS\n*\n         BAL   R8,ADDTOT      GO DO IT\n*\n*        SEE IF THE OUTPUT DATA SET IS WANTED\n*\n         TM    OUTDCB+48,X'10'  IS THE DCB OPEN?\n         BNO   NOOUTPT        NO, SKIP ALONG\n         BAL   R8,OUTPUT      YES, GO DO IT\n*\n*        SEE IF THERE'S PRINTING TO DO\n*\nNOOUTPT  CLI   PRINTK+1,2     WAS NOPRINT SPECIFIED?\n         BE    VTRET          YES, WE'RE DONE FOR NOW\n         BAL   R8,PRINT       NO, PRINT OUT THE ENTRY\n*\n*        RETURN FROM WHENCE WE CAME\n*\nVTRET    LEAVE EQ,RC=0        EXEUNT\n*\n*        NOSORT, CHECK FOR OUTPUTTING THE TOTALS\n*\nCHEKTOT  TM    ENDTOTAL,ENTOTOUT  WAS THE TOTAL OUTPUT BEFORE?\n         BO    VTRET          YES, JUST RETURN\n         BAL   R8,PRNTOT      NO, OUTPUT THE TOTAL\n         OI    ENDTOTAL,ENTOTOUT  REMEMBER THE TOTAL IS OUT\n         B     VTRET          THEN RETURN\n         EJECT\n*\n*        THE DATA IS SORTED, SO THE LISTS MUST BE EMPTIED.\n*        CHECK EACH ITEM FOR A TOTAL AND FOR A BREAK\n*        OUTPUT TO PRINT AND/OR THE OUTPUT DATA SET\n*\n*\n*        FIRST GET THE TOTAL AND BREAK COUNTS FOR COMPARES\n*\nSORTED   LA    R1,TOTALN      POINT TO THE TOTAL PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETTNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,ENDTONLY  YES, TOTALS AT THE END ONLY\nSETTNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMTOTAL   SET THE TOTAL COUNT\n         LA    R1,BREAK       POINT TO THE BREAK PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETBNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,NOBREAK   YES, BREAK  AT THE END ONLY\nSETBNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMBREAK   SET THE BREAK COUNT\n*\n*        START GOING THROUGH THE LISTS, PROCESS THE ENTRIES\n*\n         LA    R4,VTCSORTH    POINT TO THE LISTS\n         LA    R5,VTCSORTE    POINT TO THE END OF THE LISTS\n         ST    R5,ADDREND     SAVE THE ADDRESS\nNEWLIST  L     R3,0(R4)       GET THE FIRST ENTRY FROM THIS LIST\n         LTR   R3,R3          ANYTHING ON THIS LIST?\n         BZ    NEXTLIST       NO, GET ANOTHER LIST\n*\n*        THIS IS AN ENTRY, DO THE TOTALS, PRINT, AND OUTPUT\n*        CHECK FOR TOTALS AND BREAKS FIRST\n*\nGOTENTRY CLI   PRINTK+1,2     WAS NOPRINT SET?\n         BE    CHKOUTPT       YES, SKIP INTERIM TOTALS\n         MVI   TOTLAST,0      SET UP FLAG FOR TOTAL AS LAST ACTION\n*        NOTE - EXTENSION - OUTPUT INTERIM TOTALS WITH THE KEY\n         TM    ENDTOTAL,ENDTONLY  END TOTAL ONLY?\n         BO    CHKBREAK       YES, SEE ABOUT BREAKS\n         LH    R2,NUMTOTAL    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    CHKBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, PRINT THE TOTALS FIRST\n*\n         BAL   R8,PRNTOT      PRINT THE TOTALS\n*\n*        CHECK FOR A BREAK\n*\nCHKBREAK TM    ENDTOTAL,NOBREAK   NO BREAKS THIS TIME?\n         BO    SKPBREAK       YES, SKIP PAST BREAKS\n         LH    R2,NUMBREAK    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    SKPBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, GET A NEW PAGE\n*\n         MVC   LINECT,LINEMAX BE SURE THE NEXT ITEM GETS A NEW PAGE\n         MVI   TOTLAST,0      DON'T SKIP A LINE AFTER TOTAL\n         LA    R1,VTFDSN     POINT TO THE DSNAME\n         ST    R1,LASTKEY    SAVE THE ADDRESS FOR BREAK COMPARES\n*\n*        PRINT THE ITEM\n*\nSKPBREAK CLI   TOTLAST,0      WAS A TOTAL NOT FOLLOWED BY A BREAK?\n         BE    SKPBREA2       NO, CONTINUE NORMALLY\n         MVC   MSGBL,MSGBLC   YES, SET UP A BLANK MESSAGE\n         LA    R1,MSGBL       POINT TO IT\n         BAL   R8,PRNTLINE    THEN PUTPUT IT\nSKPBREA2 BAL   R8,PRINT       FINAL FORMAT AND PRINT\n*\n*        CHECK FOR DATA SET OUTPUT\n*\nCHKOUTPT TM    OUTDCB+48,X'10'     IS IT OPEN AND READY\n         BNO   GOTOT          NO, GO DO THE TOTALS\n         BAL   R8,OUTPUT      YES, PUT OUT THE DATA SET ENTRY\n*\n*        ADD UP THE TOTALS\n*\nGOTOT    BAL   R8,ADDTOT      SUM THEM\n*\n*        GET THE NEXT ENTRY\n*\n         ICM   R3,B'1111',VTFNEXT  FOLLOW THE CHAIN\n         BNZ   GOTENTRY       SOMETHING'S THERE, USE IT\n*\n*        END OF THIS LIST, TRY THE NEXT LIST\n*\nNEXTLIST LA    R4,12(0,R4)    MOVE OVER ONE\n         C     R4,ADDREND     WAS THAT THE LAST LIST?\n         BL    NEWLIST        NO, KEEP TRYING\n*\n*        END OF THE LISTS, OUTPUT THE FINAL TOTAL AND RETURN\n*\n         BAL   R8,PRNTOT      LIST THE TOTAL\n*\n*        CLEAR OUT THE PRINT LISTS\n*\n         XC    VTCSORTH+000(256),VTCSORTH  CLEAR 64 ENTRIES\n         XC    VTCSORTH+256(256),VTCSORTH+256 CLEAR 64 ENTRIES\n         XC    VTCSORTH+512(256),VTCSORTH+512 CLEAR 64 ENTRIES\n         XC    VTCSORTH+768(256),VTCSORTH+768 CLEAR 64 ENTRIES\n         B     VTRET          THEN GET OUT OF HERE\n         EJECT\n*\n*        PRINT CLEANUP ROUTINE - CLOSE DCB'S FIRST\n*\nPRNTCLEN TM    SYSOUT+48,X'10'  IS SYSOUT OPEN?\n         BNO   PRNTCLO        NO, CHECK THE OUTDCB\n         CLOSE (SYSOUT),MF=(E,OPENLIST)  DO THE CLOSE\nPRNTCLO  TM    OUTDCB+48,X'10'  IS OUTDCB OPEN?\n         BNO   PRNTFREE       NO, SKIP DOWN TO THE FREEMAINS\n         CLOSE (OUTDCB),MF=(E,OPENLIST)  DO THE CLOSE\n*\n*        FREE UP THE STORAGE\n*\nPRNTFREE L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nPRNTFRL  ICM   R3,B'1111',0(R2)  GET THE STORAGE ADDRESS\n         BZ    VTRET          IF ZERO, WE'RE DONE\n         FREEMAIN RU,LV=VTCGETMS,A=(R3)  FREE IT                WSX-MAX\n*        FREEMAIN R,LV=VTCGETMS,A=(R3)  FREE IT\n         XC    0(4,R2),0(R2)  CLEAR THE ADDRESS\n         LA    R2,4(R2)       GET THE NEXT BLOCK ADDRESS\n         BCT   R5,PRNTFRL     AND LOOP UNTIL DONE\n         B     VTRET          THEN RETURN\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*              ADDTOT - ADD TO THE CURRENT TOTALS\n*              PRNTOT - PRINT OUT THE TOTALS AND CLEAR THEM\n*              PRINT  - PRINT OUT AN ENTRY\n*              OUTPUT - OUTPUT THE DATA SET ENTRY\n*              PDLNUM - GET A NUMBER FROM A PDL ENTRY\n*              PRNTLINE - INTERNAL ROUTINE TO COUNT LINES, OUTPUT HEAD\n*\nADDTOT   L     R1,TOTDS       NUMBER OF DATA SETS\n         LA    R1,1(R1)       ADD ONE\n         ST    R1,TOTDS       STORE IT BACK\n         L     R1,TOTALLOC    TOTAL ALLOCATION\n         A     R1,VTFALLOC    ADD IN THIS DATA SET\n         ST    R1,TOTALLOC    STORE IT BACK\n         L     R1,TOTUSED     TOTAL USED SPACE\n         A     R1,VTFUSED     ADD IN THIS DATA SET\n         ST    R1,TOTUSED     STORE IT BACK\n         BR    R8             RETURN\n*\n         EJECT\n*\n*        PRINT THE TOTALS\n*              FIRST FORMAT THEM, THEN PUT THE LINE OUT TO SYSOUT\n*              OR USE VTOCMSG TO LIST IT\n*\nPRNTOT   ST    R8,PRNTTOT8   SAVE THE RETURN ADDRESS\n*\n         CLI   TOTALK+1,2    NO TOTALS?                         HXF-ALL\n         BER   R8            RETURN                             HXF-ALL\n*\n         MVC   MSGWORK(MSGTLEN),MSGTOTC  INIT THE MSG\n*        CONV  MSGWORK+4+11,TOTDS,5  CONVERT NO OF DATA SETS\n         CONV  MSGWORK+4+10,TOTDS,6  CONVERT NO OF DATA SET ABL 3/20/90\n         CONV  MSGWORK+4+28,TOTALLOC,8  CONVERT ALLOCATION\n         CONV  MSGWORK+4+51,TOTUSED,8   CONVERT USED SPACE\n         MVC   MSGWORK+4+37(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n         MVC   MSGWORK+4+60(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n*\n*        NOW OUTPUT THE MESSAGE\n*\n         MVI   MSGWORK+4,C'0' ADD A CARRIAGE CONTROL\n         LA    R1,MSGWORK     POINT TO THE TOTAL LINE\n         BAL   R8,PRNTLINE    PUT OUT THE TOTAL LINE\n         MVI   TOTLAST,1      NOTE THAT A TOTAL WAS THE LAST ITEM\n         L     R8,PRNTTOT8    GET THE RETURN ADDRESS\n         BR    R8             THEN RETURN\n         EJECT\n*\n*        PRINT OUT THE FORMATTED DSCB\n*              FIRST FORMAT IT\n*\nPRINT    ST    R8,PRINTR8     SAVE REGISTER 8 FOR RETURNING\n         MVI   WORKLINE+4,C' ' BLANK OUT THE LINE\n         MVC   WORKLINE+5(250),WORKLINE+4 SO INDIVIUAL FIELDS DON'T\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,WORKLINE+4  POINT TO THE WORK  LINE\nPRTLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         LA    R5,1(R1)       SAVE A PLACE TO MOVE FIELD INTO\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         LA    R0,WORKLINE+4  POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   PRTEND         YES, WE'RE DONE\n         AR    R1,R0          NO, KEEP GOING\n*\n*        MOVE IN OR CONVERT THIS ITEM\n*\n         SR    R14,R14       CLEAR A REG FOR LENGTH OF RTN NO\n         IC    R14,1(R6)     GET THE LENGTH OR ROUTINE\n         N     R14,F127      CLEAR THE TOP BIT\n         SR    R15,R15       CLEAR A REG FOR VTFMT\n         IC    R15,2(R6)       DISPLACEMENT\n         AR    R15,R3        RELOCATE IT\n*\n*        DECIDE WHERE TO PUT IT\n*\n         TM    1(R6),X'80'   IS IT IN CHARS\n         BNO   PRTRTN        NO, USE THE SPECIAL ROUTINE\n         SR    R7,R14        GET THE DIFFERENCE IN LENGTHS\n         SRL   R7,1          GET HALF THE DIFFERENCE\n         AR    R5,R7         PUT THE DATA HERE\n         EX    R14,PRTMOVE   MOVE IN THE CHARACTERS\nPRTINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   PRTLOOP        GO GET MORE ITEMS\nPRTEND   LA    R1,WORKLINE   POINT TO THIS LINE\n         BAL   R8,PRNTLINE   THEN GO PRINT IT\n         L     R8,PRINTR8     GET THE RETURN ADDRESS\n         BR    R8             RETURN\nPRTMOVE  MVC   0(0,R5),0(R15)  EXECUTED MOVE\n*\n*        VARIOUS ROUTINES TO FORMAT BEFORE MOVING IN THE DATA\n*\nPRTRTN   LTR   R14,R14       BE SURE THE OFFSET IS OK\n         BP    PRTRTN1        IT SEEMS ALL RIGHT\n         ABEND 701,DUMP       CRASH AND BURN\nPRTRTN1  B     *(R14)        GO DO YOUR THING\n         B     PRDATES        4  CDATE, EXPDT\n         B     PRLSTUS        8  LSTUS\n         B     PRALLOC       12  ALLOC, USED\n         B     PRUNUSED      16  ALLOC - USED\n         B     PRPCT         20  100 * USED / ALLOC\n         B     PREXT         24  EXT\n         B     PRBLREC       28  BLKSZ LRECL\n         B     PRDSN         32  DSNAME\n         B     PRCCHH        36  CCHH                              ABLC\n*\n*\n*        CDATE AND EXPDT\n*\nPRDATES  SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         USING DUMMD,R5      ALLOW CONV TO USE SYMBOL\n         CONV  DUMMA,(R14),2 CONVERT YEAR\n         ICM   R14,B'0011',1(R15)  GET THE DAY\n         CONV  DUMMA+2,(R14),3,EDMASK0,COMP0  CONVERT THE DAY\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LAST USE DATE\n*\nPRLSTUS  MVC   CHARS,EDMASK   SET UP THE EDIT MASK\n         ED    CHARS(6),0(R15)  CONVERT TO CHARACTERS\n         MVC   0(5,R5),CHARS+1  THEN MOVE THEM IN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        ALLOCATION AND USED\n*\nPRALLOC  ICM   R14,B'1111',0(R15)  GET THE AMOUNT\n         BM    PRUNKN6       IF NEGATIVE, IT'S NOT KNOWN\n         CONV  DUMMA,(R14),7 CONVERT THE NUMBER                 HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN6  MVC   0(7,R5),BLANKS  UNKNOWN AMOUNT, LEAVE IT BLANK   HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        UNUSED SPACE\n*\nPRUNUSED ICM   R14,B'1111',VTFUSED  GET THE   USED SPACE\n         BM    PRUNKN6       IF NOT KNOWN, SKIP ALONG\n         L     R14,VTFALLOC  GET THE ALLOCATED SPACE\n         S     R14,VTFUSED   MINUS THE USED SPACE GIVES UNUSED\n         BZ    PRTINC        IF NO UNUSED SPACE, LEAVE BLANK\n         CONV  DUMMA,(R14),7 CONVERT FOR PRINTING               HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        PCT - PERCENTAGE USED\n*\nPRPCT    SR    R6,R6         CLEAR THE TOP PART OF THE NUMBER\n         ICM   R7,B'1111',VTFUSED   GET THE AMOUNT OF USED SPACE\n         BM    PRUNKN3       IF NOT KNOWN, LEAVE BLANK\n         CLC   VTFALLOC,ZERO IS THE ALLOCATION ZERO?\n         BNE   PRPCTM        NO, DO THE STANDARD STUFF\n         CLC   VTFUSED,ZERO  IS THE USED SPACE ZERO?\n         BE    PRUNKN3       YES, JUST USE BLANKS\nPRPCTERR MVC   0(3,R5),=C'ERR'  NO, IT'S AN ERROR\n         B     PRTINC        THEN GO TRY FOR MORE\nPRPCTM   M     R6,F100       MULTIPLY BY 100 FOR PERCENT\n         D     R6,VTFALLOC   DIVIDE BY ALLOC TO GET THE PERCENT\n         LTR   R7,R7         IS IT LESS THAN ZERO?\n         BM    PRPCTERR      YES, FLAG THE ERROR\n         C     R7,F100       ALSO CHECK FOR OVER 100 PERCENT\n         BH    PRPCTERR      THAT'S ALSO AN ERROR\n         CONV  DUMMA,(R7),3  CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN3  MVC   0(3,R5),BLANKS BLANK THE UNKNOWN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        EXTENTS\n*\nPREXT    SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         CONV  DUMMA,(R14),2 CONVERT THE EXTENTS\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LRECL AND BLKSZ\n*\nPRBLREC  LH    R14,0(R15)    GET THE DATA ( HALFWORD )\n         CONV  DUMMA,(R14),5  CONVERT THE DATA\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        DATA SET NAME\n*\nPRDSN    LH    R14,VTFDSNL   GET THE DSNAME LENGTH\n         CH    R14,DSNLENGT  CHACK FOR MAX LENGTH\n         BL    PRDMOVE       THIS DSN IS SHORT ENOUGH\n         LH    R14,DSNLENGT  CUT IT DOWN\nPRDMOVE  BCTR  R14,0         COUNT DOWN ONE FOR THE EX\n         EX    R14,PRTMOVE   MOVE IN THE DSNAME\n         AH    R1,DSNLENOF   CORRECT THE LINE POINTER\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*                                                                  ABLC\n*        CCHH ADDRESS                                              ABLC\n*                                                                  ABLC\nPRCCHH   AH    R1,=H'9'                 CORRECT THE LENGTH         ABLC\n         UNPK  0(8+1,R5),VTFCCHH(4+1)   CCHH EXTENT START          ABLC\n         TR    0(8,R5),HEXTAB           CONVERT TO PRINTABLE HEX   ABLC\n         MVI   8(R5),C'-'               DASH BETWEEN HI/LOW CCHH   ABLC\n*                                                                  ABLC\n         UNPK  9(8+1,R5),VTFCCHH+4(4+1) CCHH EXTENT START          ABLC\n         TR    9(8,R5),HEXTAB           CONVERT TO PRINTABLE HEX   ABLC\n         MVI   17(R5),C' '              FIX GARBAGE BYTE           ABLC\n         B     PRTINC                   GET THE NEXT PRINT ITEM    ABLC\n*                                                                  ABLC\nHEXTAB   EQU   *-C'0'                                              ABLC\n         DC    C'0123456789ABCDEF'                                 ABLC\n         EJECT\n*\n*        OUTPUT THE FORMATTED DSCB AS IT IS\n*\nOUTPUT   CLEAR OUTWORK       CLEAR THE OUTPUT REC\n         LH    R2,VTFDSNL     GET THE LENGTH OF THE DSNAME\n         LA    R2,VTFMTL-1(R2)  GET THE FULL LENGTH MINUS ONE\n         EX    R2,OUTMOVE    MOVE IN THE ACTUAL RECORD\n         PUT   OUTDCB,OUTWORK    OUTPUT THE RECORD\n         BR    R8             RETURN\nOUTMOVE  MVC   OUTWORK(0),0(R3)  EXECUTED MOVE\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        PRNTLINE - GET EACH LINE FOR SYSOUT, THEN COUNT THE LINES\n*              OUTPUT HEADERS AND TITLE LINES AS NECESSARY\n*\nPRNTLINE STM   R1,R8,PRTLSAVE SAVE THE REGISTERS\n         TM    SYSOUT+48,X'10' IS SYSOUT OPEN FOR BUSINESS?\n         BNO   PRNTTERM       NO, IT'S NOT OPEN, USE VTOCMSG\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTLIN       YES, JUST OUTPUT THE DATA LINE\n*\n*        DO THE LINE COUNTING\n*\n         LH    R2,LINECT      GET THE LINE COUNT\n         CLI   4(R1),C'1'     IS IT REQUESTING A NEW PAGE?\n         BE    PRNTPAGE       YES, DO IT\n         CLI   0(R1),C'-'     SKIP 3 LINES\n         BE    PRNTSKP3       YES, TRY IT\n         CLI   0(R1),C'0'     SKIP 2 LINES?\n         BE    PRNTSKP2       YES, DO IT\n         B     PRNTSKP1       JUST SKIP ONE\nPRNTSKP3 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP2 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP1 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\n         STH   R2,LINECT      SAVE THE LINE COUNT\n         CH    R2,LINEMAX     DOES THIS OVERFLOW  HE PAGE?\n         BL    PRNTLIN        NO, JUST PUT OUT THIS LINE\n*\n*        PRINT OUT THE PAGE HEADER AND ITEM TITLES\n*\nPRNTPAGE LH    R6,PAGECT      GET THE PAGE COUNT\n         LA    R6,1(R6)       ADD ONE TO IT\n         STH   R6,PAGECT      THEN STORE IT BACK\n         L     R7,PAGEADDR    GET THE PLACE TO PUT THE PAGE\n         DROP  R5             DROP PRIOR USING ON DUMMD         JVH-FIX\n         USING DUMMD,R7       DUMMY DSECT\n         CONV  DUMMA,(R6),5   GET THE CHARACTERS\n         DROP  R7\n         ST    R1,PRNTLSAV    SAVE THE INPUT REG1\n         PUT   SYSOUT,PRNTHEAD  OUTPUT THE HEADER\n         PUT   SYSOUT,PRNTTITL  OUTPUT THE ITEM TITLES\n         L     R1,PRNTLSAV    GET THE ORIGINAL LINE\n         MVI   4(R1),C'0'     ALWAYS SKIP THE FIRST LINE AFTER NEW PAGE\n         LA    R7,5           SET THE LINE COUNT\n         STH   R7,LINECT      SAVE IT FOR LATER\nPRNTLIN  CLEAR OUTWORK       CLEAR A PRINT RECORD\n         LH    R6,0(R1)      GET THE RECORD LENGTH\n         SH    R6,H5         MINUS 4 FOR PREFIX, 1 FOR EX\n         LA    R3,4(R1)      POINT TO THE TEXT\n         EX    R6,OUTMOVE    THEN MOVE IN THE LINE\n         PUT   SYSOUT,OUTWORK      AND FINALLY PRINT IT\n         B     PRNTLRET       THEN RETURN\n*\n*        SIMPLER CHECKING FOR VTOCMSG OUTPUT\n*\nPRNTTERM LH    R2,LINECT      GET THE LINE COUNT\n         LA    R2,1(R2)       IGNORE CARRIAGE CONTROL\n         STH   R2,LINECT      SAVE IT BACK\n         LR    R6,R1          SAVE THE ORIGINAL REG 1\n         MVI   4(R1),C' '    BLANK THE CARRIAGE CONTROL\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTTLIN       YES, JUST OUTPUT THE DATA LINE\n         CH    R2,LINEMAX     NEED A NEW TITLE?\n         BL    PRNTTLIN       NO, KEEP GOING\n         VTOCMSG PRNTTITH     YES, PUT IT OUT\n         MVC   LINECT,H2      RESET THE LINE COUNT\nPRNTTLIN VTOCMSG 0(R6)        OUTPUT THE PASSED LINE\n         TM    PDSCALL,X'80'  TERMINATION?                      ABL-PDS\n         BO    VTRET          YES, STOP THE OUTPUT              ABL-PDS\nPRNTLRET LM    R1,R8,PRTLSAVE RESTORE THE REGISTERS\n         BR    R8             THEN RETURN\n         EJECT\nPRTINIT  MVI   FIRSTIM,10    FLAG THE INITIALIZATION AS DONE\n         LA    R1,TABTITL    POINT TO THE BUG TABLE\n         ST    R1,ATABTITL   LET CHECK KNOW WHERE IT IS\n*\n*        SET UP THE CHARACTERS FOR TYPE OF SPACE ALLOC.\n*\n         LH    R2,SPACEK      GET THE SPACE TYPE KEYWORD\n         SLA   R2,3           MULTIPLY BY 8\n         LA    R2,TABSPACE(R2)  RELOCATE IT\n         MVC   SPACTYPE,0(R2) SAVE THE CHARACTERS\n         CLI   PRINTK+1,2     IS THIS NOPRINT?\n         BE    NOOPEN         YES, SKIP THE OPEN\n         MVC   SYSOUT(SYSOUTL),SYSOUTC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         LA    R1,JFCB       POINT TO THE JFCB\n         ST    R1,DCBEXIT    AND PUT THE ADDR IN THE DCB EXIT\n         MVI   DCBEXIT,X'07' NOTE IT AS A JFCB EXIT             TANSKY\n         MVC   DCBEXIT+4(4),OUTLST    OPEN EXIT                 TANSKY\n         LA    R1,DCBEXIT    POINT TO THE EXIT LIST\n         LA    R2,SYSOUT     AND TO THE DCB FOR ADDRESSABILITY\n         USING IHADCB,R2     TELL THE ASSEMBLER ABOUT IT\n         STCM  R1,B'0111',DCBEXLSA  STUFF IT INTO THE DCB\n         TM    CHARSPL+6,X'80'  CHARS PER LINE ENTERED?\n         BZ    RDJFCB        NO, CONTINUE ALONG\n         LA    R1,CHARSPL    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,DCBLRECL  SAVE THE NEW LRECL\n         STH   R15,LINELEN   ALSO THE LINE LENGTH\n         TM    BLKSZSET+6,X'80'  BLOCKSIZE ENTERED?\n         BZ    BLKEQREC      NO, DCB OPEN EXIT WILL COMPUTE IT  TANSKY\n         LA    R1,BLKSZSET      POINT TO THE PDL\n         BAL   R8,PDLNUM     GET THE NUMBER\n         STH   R15,DCBPRECL  STUFF IT AWAY\nBLKEQREC DS    0H                                               TANSKY\n         DROP  R2            FINISHED WITH THE DCB\nRDJFCB   RDJFCB ((R2)),MF=(E,OPENLIST)  SEE IF IT'S THERE\n         LTR   R15,R15       WAS IT THERE?\n         BNZ   NOOPEN        NO, SKIP ALONG\n         OPEN  ((R2),OUTPUT),MF=(E,OPENLIST)  OPEN THE PRINT DCB\n*\n*        INITIALIZE PRINT VARIABLES\n*\n*        SET LINES/PAGE AND LINESIZE\n*\nNOOPEN   MVC   LINEMAX,DEFLMAX  SET THE DEFAULT NUMBER OF LINES/PAGE\n         TM    LINESPP+6,X'80'     LINES PER PAGE ENTERED?\n         BZ    DEFLINPP     NO, SKIP ON\n         LA    R1,LINESPP    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,LINEMAX   AND SAVE IT\nDEFLINPP MVC   LINECT,LINEMAX SET UP TO PAGE ON THE FIRST WRITE\n         TM    CHARSPL+6,X'80'     CHARS PER LINE ENTERED?\n         BO    LENSET        YES, USE IT\n         MVC   LINELEN,DEFLEN SET UP A DEFAULT LENGTH\n         TM    SYSOUT+48,X'10' DO WE USE SYSOUT?\n         BO    LENSET         YES, USE WHAT WE'VE GOT\n         OC    PDSCALL,PDSCALL COMING FROM PDS??                ABL-PDS\n         BNZ   LENSET          NO, SKIP WIDTH SETTING           ABL-PDS\n*        GET THE TERMINAL LINE SIZE TO SEE IF IT MAKES SENSE\n         GTSIZE\n         LTR   R1,R1          SEE IF IT'S GOOD\n         BZ    LENSET         NO, JUST A ZERO, KEEP THE DEFAULTS\n         BCTR  R1,0           CUT IT DOWN ONE TO AVOID A MESS\n         STH   R1,LINELEN     SAVE THIS LENGTH\n         LTR   R0,R0          FOR DISPLAYS, IT'S SCREEN SIZE\n         BZ    LENSET         KEEP WHAT WE'VE GOT\n         TM    LINESPP+6,X'80'  WAS LINES PER PAGE ENTERED?\n         BO    LENSET           YES, DON'T OVERRIDE IT\n         STH   R0,LINEMAX     AND SAVE THE NEW PAGE LOCATION\nLENSET   DS    0H\n*\n*        SET UP THE PAGE COUNTER\n*\nPAGEAD   LH    R1,LINELEN     GET THE LENGTH OF THE LINE\n         SH    R1,H10         MINUS TEN CHARACTERS\n         LA    R1,PRNTHEAD(R1) THEN RELOCATE IT\n         CLEAR PRNTHEAD       CLEAR THE LINE FIRST\n         MVC   0(4,R1),CPAGE  MOVE IN THE CHARACTERS PAGE\n         LA    R1,5(R1)       MOVE OVER 5 MORE\n         ST    R1,PAGEADDR    THIS IS THE PLACE\n*\n*        BUILD THE PRINT HEADER LINE\n*\n         TM    HEADING+6,X'80' IS A USER HEADING PRESENT\n         BO    USERHEAD       YES, USE IT\n         MVC   PRNTHEAD(L'DEFHEAD),DEFHEAD  NO, GET A DEFAULT\n*\n*        ADD THE COMMAND BUFFER TO THE HEADING\n*\n         LH    R1,LINELEN    GET THE LINE LENGTHE\n         SH    R1,H32        MINUS SPACES FOR PAGE, START OF HDR\n         BNP   OUTOPEN       IF IT'S SHORT, SKIP ON\n         L     R14,ADDRCBUF  POINT TO THE COMMAND BUFFER\n         CH    R1,0(R14)     COMPARE LENGTHS\n         BL    CBUFBIG       THE COMMAND BUFFER TOO BIG\n         LH    R1,0(R14)     GET THE COMMAND BUFFER SIZE\nCBUFBIG  SH    R1,H5         MINUS 1 FOR EX, 4 FOR CBUF PREFIX\n         EX    R1,MOVEHED    MOVE THE CBUF TO THE DEFAULT HEADER\n         B     OUTOPEN        GO SET UP THE PAGE COUNTER\nUSERHEAD LH    R1,HEADING+4   GET THE LENGTH\n         BCTR  R1,0           MINUS ONE FOR THE EX\n         L     R2,HEADING     POINT TO THE USER HEAD\n         EX    R1,MOVEHEAD    THEN MOVE IT IN\nOUTOPEN  DS    0H\n*\n*        SET UP THE WORK LINE\n*\n         LH    R1,LINELEN    GET THE LINE LENGTH\n         LA    R1,4(R1)      ADD FOUR FOR THE PREFIX\n         STH   R1,WORKLINE   OUTPUT TEXT\n         STH   R1,PRNTTITH    ITEM TITLES\n*        GET THE PRINT SPECIFICATION\n*\n         LA    R1,DEFPRNT\n         ST    R1,VTPRNTLS   SAVE THE PRINT ITEM LIST ADDRESS\n         TM    SUBPRTKY+6,X'80'  WERE ANY ITEMS SET UP\n         BE    PRTITSET      NO, THE DEFAULT LIST IS OK\n*\n*        GET THE ADD, REPLACE, DELETE, AND NEW ITEMS\n*        AND BUILD THE NEW LIST\n*\n*        FIRST CONVERT THE ENTERED TEXT INTO NUMERIC KEYS\n*\n         LA    R4,SUBPRTIT   POINT TO THE ITEMS\n         LA    R5,VTPRNTEN   POINT TO THE OUTPUT KEYS\n         LA    R0,VTPRNTEX   POINT TO THE END OF THE LIST\nENTKEY   BAL   R8,GETKEY     GET A KEY\n         STC   R15,0(R5)     SAVE IT\n         LA    R5,1(R5)      GET TO THE NEXT ONE\n         CR    R0,R5         CHECK FOR THE END\n         BNH   ENTKEND       IF THAT'S ALL\n         ICM   R4,7,9(R4)    GET THE CHAIN POINTER\n         BNZ   ENTKEY        AND KEEP GOING IF THERE'S MORE\nENTKEND  DS    0H            THE KEYS ARE ENTERED INTO THE LIST\n*\n*        MERGE THE ENTERED ITEMS AND THE DEFAULT LIST INTO A NEW LIST\n*\n         LA    R6,VTPRNTL    POINT TO THE NEW LIST\n         ST    R6,VTPRNTLS   SAVE IT'S ADDRESS\n         LA    R4,VTPRNTEN   POINT TO THE ENTERED ITEMS\n         LA    R2,DEFPRNT    POINT TO THE DEFAULT LIST\n         LR    R3,R2         POINT TO THE BEGINNING - NO DEFAULT IF NEW\n         L     R1,SUBPRTKY   POINT TO THE KEYWORD\n         CLI   0(R1),C'N'    IS THIS A NEW LIST?\n         BE    PRTINEW       YES, SKIP PAST DEFAULT COPY\n         LA    R3,DEFPRNTE   POINT TO THE END OF THE DEFAULT LIST\n*\n*        ADD, REPLACE, DELETE - COPY THE DEFAULT LIST\n*\nPRTICOPY CR    R2,R3         IS THIS THE END OF THE DEFAULT LIST?\n         BNL   PRTITSET      YES, END OF PROCESSING FOR PRINT ITEMS\n*\n*        CHECK FOR ENTERED ITEMS THAT ARE ALSO\n*              IN THE DEFAULT LIST.\n*\nPRTICDLP CLC   0(1,R2),0(R4) IS THIS THE SAME ITEM\n         BE    PRTIFND       YES, SEE WHAT TO DO\n         LA    R4,1(R4)      NO, GET TO THE NEXT ITEM\n         CLI   0(R4),0       WAS THIS THE LAST ENTERED ITEM?\n         BNE   PRTICDLP      NO, KEEP LOOKING\n         LA    R4,VTPRNTEN   POINT BACK TO THE TOP OF THE LIST\n*\n*        ADD THIS ITEM TO THE NEW LIST\n*\nPRTICSKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\nPRTICDEL LA    R2,1(R2)      GO DOWN THE DEFAULT LIST\n         B     PRTICOPY      THEN KEEP ON CHECKING\n*\n*        AN ITEM WAS ENTERED AND WAS IN THE DEFAULT LIST\n*        FOR DELETE, JUST DELETE ITEMS\n*        FOR ADD AND REPLACE, DELETE ALL BUT THE FIRST ITEM\n*              TO AVOID DUPLICATES\n*              IF IT IS THE FIRST ITEM, INSERT THE ENTERED LIST\n*\nPRTIFND  LA    R0,VTPRNTEN   POINT TO THE FIRST ITEM\n         CR    R0,R4         COMPARE WITH THE ITEM FOUND\n         BH    PRTICDEL      NOT THE FIRST ITEM, DELETE IT\n         CLI   0(R1),C'D'    IS THIS DELETE TIME?\n         BE    PRTICDEL      THEN JUST DELETE IT\n         CLI   0(R1),C'R'    IS THIS A REPLACE?\n         BE    PRTIREPA      YES, IGNORE THIS DEFAULT ITEM\n*\n*        ADD THE DEFAULT ITEM FIRST\n*\nPRTIASKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n*\n*        MOVE THE ITEMS IN FROM THE ADD OR REPLACE LIST\n*\nPRTIREPA LA    R2,1(R2)      GET PAST THE DEFAULT LIST ITEM\nPRTIREP  LA    R4,1(R4)      GET PAST THE FIRST ENTRY\nPRTINEXT CLI   0(R4),0       IS THIS THE LAST ITEM?\n         BE    PRTICOPY      YES, SEE ABOUT MORE DEFAULTS\n*\n*        ADD AN ENTERED ITEM TO THE LIST\n*\nPRTINSKP MVC   0(1,R6),0(R4) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n         B     PRTIREP       GO GET MORE ENTERED ITEMS\n*\n*        NEW LIST, JUST USE IT AS ENTERED\n*\nPRTINEW  LA    R1,VTPRNTEN   POINT TO THE ENTERED LIST\n         ST    R1,VTPRNTLS   THEN SAVE ITS ADDRESS FOR LATER\nPRTITSET DS    0H\n*\n*        BUILD THE TITLE LINE FOR THE DSNAME FIELDS\n*\n         CLEAR PRNTTITL        BLANK OUT THE TITLE LINE\n         MVC   PRNTTITL+1(139),PRNTTITL  SO THE WHOLE THING IS GOOD\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,PRNTTITL    POINT TO THE TITLE LINE\nTITLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         EX    R7,MOVETIT     MOVE IN THE TITLE\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         CLI   0(R2),CCHH     IS THIS THE CCHH KEY?                ABLC\n         BNE   *+8            NO, BRANCH                           ABLC\n         LA    R1,9(R1)       YES, ADD ANOTHER 8 CHARACTERS        ABLC\n         CLI   0(R2),DSNAME  IS THIS THE DSNAME KEY\n         BE    TITDSN        YES, SPECIAL PROCESSING\n         LA    R0,PRNTTITL    POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   TITOVER        YES, PULL BACK\n         AR    R1,R0          NO, KEEP GOING\nTITINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   TITLOOP        GO GET MORE TITLES\n         B     TITEND         ALL DONE\nTITDSN   LR    R6,R1         SAVE THE ADDRESS POINTER\n         LA    R1,DSNPLN     POINT TO THE PDL FOR DSN LENGTH\n         BAL   R8,PDLNUM     GO TRANSLATE IT\n         LTR   R15,R15       WAS IT THERE?\n         BP    TITDSN2       YES, USE IT\n         LA    R15,44        NO, SET THE DEFAULT\nTITDSN2  STH   R15,DSNLENGT  SAVE THE LENGTH\n         SH    R15,H9        SUBTRACT THE 9 CHARS MOVED ALREADY\n*              MINUS ONE FOR EX, PLUS ONE FOR SPACE\n         MVI   0(R6),C' '    GET AN INITIAL BLANK\n         EX    R15,DSNBLMOV  MOVE IN THE BLANKS\n         LA    R1,1(R15,R6)  RESET THE POINTER ( INCLUDE A SPACE )\n         LA    R15,1(R15)    ADD ON THE SPACE CHARACTER\n         STH   R15,DSNLENOF  SAVE THE OFFSET\n         B     TITINC        ALLOW DSNAME TO OVERFLOW THE LINE\n*\n*        TITLE RAN OFF THE END, CUT IT OFF\n*\nTITOVER  SR    R1,R7          SUBTRACT PAST THIS FIELD\n         AR    R1,R0          RELOCATE IT\n         BCTR  R1,0           THEN GET THE LAST CHARACTER\n         MVC   0(9,R1),BLANKS THEN BLANK IT OUT\nTITEND   TM    SYSOUT+48,X'10' IS THE DCB OPEN\n         BNO   CKOUTPT       NO, TERMINAL OUTPUT, NO CC\n         MVI   PRNTTITL,C'0'  ALWAYS SKIP A LINE FOR IT\nCKOUTPT  CLI   OUTPUTK+1,1    OUTPUT THIS RUN?\n         BNE   VTRET          YES, SKIP THE OPEN, JUST RETURN\n         MVC   OUTDCB(OUTDCBL),OUTDCBC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         OPEN  (OUTDCB,OUTPUT),MF=(E,OPENLIST)  OPEN THE DATA SET DCB\n         B     VTRET          RETURN, INITIALIZATION IS DONE\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         SR    R3,R3         CLEAR R6                           ABL-EX\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BNE   GETNFND       NOT HERE, BRANCH                   ABL-EXT\n*        CLC   =C'EX ',0(R6) EX (FOR EXTENTS)?                  ABL-EXT\n***TEST  CLC   =C'EX',0(R2)  EX (FOR EXTENTS)?                  HXF-ALL\n         CH    R3,=H'1'      EX (FOR EXTENTS)?                  ABL-EX\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         CLC   =C'EXP',0(R2) EXP (FOR EXPDT)?                   ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         SPACE 1                                                ABL-EXT\nGETNFND  DS    0H                                               ABL-EXT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n         CH    R15,TAB#ENTS  CHECK FOR THE END OF THE TABLE\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\n         EJECT\n*  DCB EXIT ROUTINES.\n*\n*        CHOOSE A GOOD BLOCKSIZE FOR THE INCOMING LRECL.  IF THERE IS\n*        ALREADY A BLOCKSIZE SPECIFIED, USE IT INSTEAD, IF IT IS GOOD.\n*\n*   GENERAL NOTES:\n*       R1 = ADDR(DCB) FOR THE CURRENT DCB.  THIS MEANS THAT THE SAME\n*            EXIT ROUTINE COULD BE USED FOR MULTIPLE DATASETS.\n*       R14 = RETURN ADDRESS.  ALL OTHER REGISTERS WILL BE RESTORED\n*            AS BEFORE THE EXIT WAS ENTERED.\n*\n*        SINCE I DON'T KNOW WHAT REGISTERS ARE BEING USE FOR WHAT,\n*        I LOAD A NEW BASE REGISTER AND PUSH AND POP THE USINGS.\n*\n*\n         PUSH  USING\n         DROP\n         SPACE 3\nUSEBLK   DS    0D                  USE INPUT LRECL AND/OR BLKSIZE\n*                                  FOR OUTPUT UNLESS ALREADY SPECIFIED\n         BALR  R12,0               SET ADDRESSABILITY\n         USING *,R12\n         USING IHADCB,R1\n         XR    R3,R3               ZERO OUT R3\n         ICM   R3,B'0011',DCBBLKSI BLKSIZE IN JCL OR DSCB?\n         BNZ   USEJCL                YES, SEE IF IT IS GOOD\n         LH    R3,TARGET             NO, LOAD TARGET BLOCKSIZE\nUSEJCL   DS    0H\n         TM    DCBRECFM,DCBRECV    VARIABLE?\n         BO    GOTVAR                YES, BLKSIZE NOT NEC MULT OF LRECL\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,TARGET             YES, MAYBE IT WAS FROM JCL\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,HALFTRK            YES, TRY HALF TRACK\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,DCBLRECL         YES, USE BLKSIZE=LRECL\n         B     USEIT\nUSETGT   DS    0H\n         LH    R4,DCBLRECL         FIND BLKSIZE MULT OF LRECL AND\n         XR    R2,R2               NOT GREATER THAN TARGET BLOCKSIZE\n         DR    R2,R4\n         MR    R2,R4               GREATEST MULTIPLE OF LRECL <= TARGET\nUSEIT    DS    0H\n         STH   R3,DCBBLKSI         AND PUT IT IN BLOCKSIZE FIELD\n         BR    R14                 RETURN\n         SPACE 3\nGOTVAR   DS    0H                  DETERMINE BLOCKSIZE FOR VB OUTPUT\n         CLC   DCBLRECL,TARGETV    TARGET GOOD ENOUGH?\n         BNH   USEIT                 YES\n         TM    DCBRECFM,DCBRECSB   SPANNED RECORDS?\n         BO    USEIT                 YES\n         CLC   DCBLRECL,HALFTRKV     HALF-TRACK 3380 OKAY?\n         BH    THIRTY2               NO\n         LH    R3,HALFTRK            YES\n         B     USEIT\nTHIRTY2  DS    0H\n         LH    R3,MAXBLOCK         MAX SIZE FOR BLOCKSIZE\n         B     USEIT\n         SPACE 1\nDFACONST DC    CL4'DFA '\nMAXBLOCK DC    H'32760'\nHALFTRK  DC    H'23476'            HALF TRACK ON 3380 (SMALLER DEVICE)\nHALFTRKV DC    H'23472'            MAX LRECL FOR VARIABLE HALF TRACK\nTARGET   DC    H'8906'             GOOD FOR 3380 AND 3390\nTARGETV  DC    H'8902'             MAX LRECL FOR VARIABLE AT TARGET\nTHREE    DC    F'3'                CONSTANT\n         SPACE 1\n         POP   USING\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nZERO     DC    F'0'\nF100     DC    F'100'\nF127     DC    F'127'\nDEFLMAX  DC    H'60'          DEFAULT LINES PER PAGE\nDEFLEN   DC    H'132'         DEFAULT CHARS PER LINE\nH2       DC    H'2'\nH5       DC    H'5'\nH9       DC    H'9'\nH10      DC    H'10'\nH12      DC    H'12'\nH18      DC    H'18'\nH32      DC    H'32'\nMOVETIT  MVC   0(0,R1),3(R6)  MOVE IN THE TITLE\nCOMPKEY  CLC   0(0,R1),VTFDSN  EXECUTED COMPARE\nMOVEHEAD MVC   PRNTHEAD(0),0(R2)\nMOVEHED  MVC   PRNTHEAD+21(0),4(R14)  MOVE CMD BUF TO DEFAULT HEADER\nDSNBLMOV MVC   1(0,R6),0(R6)  BLANK OUT THE DSN SPACE IN THE TITLE\nCPAGE    DC    C'PAGE'\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDMASK0  DC    XL16'F0202020202020202020202020202120'\nSKIP     DC    C'0'\nCOMP0    DC    CL16'0000000000000000'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nTABSPACE DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'MBYTES'                                LMB 1/4/83\n         DC    CL8'TRKS  '                                LMB 1/4/83\n         DC    CL8'CYLS  '                                LMB 1/4/83\n*\n         PRINT NOGEN\nOUTLST   DC    X'85',AL3(USEBLK)                                TANSKY\nSYSOUTC  DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,EXLST=OUTLST                 TANSKY\nOUTDCBC  DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,EXLST=OUTLST                  TANSKY\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         SPACE\nMSGTOTC  MSGZ  '  TOTALS - NNNNN DATA SETS, MMMMMMMM UUUUUU ALLOC, LLLLX\n               LLLL UUUUUU USED '\nMSGTLEN  EQU   *-MSGTOTC\nMSGBLC   MSGZ  '                '\n*\nDEFHEAD  DC    CL20'1 VTOC COMMAND  V-77'\n*\n*        DEFAULT PRINT LIST\n*\nDEFPRNT  DC    AL1(ALLOC)\n         DC    AL1(UNUSED)\n         DC    AL1(PCT)\n         DC    AL1(EXT)\n         DC    AL1(DSORG)\n         DC    AL1(RECFM)\n         DC    AL1(LRECL)\n         DC    AL1(BLKSZ)\n         DC    AL1(CDATE)\n         DC    AL1(LSTUS)\n         DC    AL1(VOLUME)\n         DC    AL1(DSNAME)\n         DC    AL1(EXPDT)\n         DC    AL1(SECQ)\n         DC    AL1(SECT)\n         DC    AL1(ROUND)\n         DC    AL1(PASS)\n         DC    AL1(ACTION)\n         DC    AL1(TYPE)\n         DC    AL1(0)        END OF THE LIST\nDEFPRNTE EQU   *\nDEFPRNTL EQU   *-DEFPRNT\n*\n*        TABLE OF PRINT ITEM LENGTHS AND TITLES\n*\n*        ENTRIES IN THE TABLE FOR EACH FORMATTED ITEM -\n*        FIRST BYTE IS FIELD LENGTH FOR OUTPUT ( MINUS ONE FOR EX )\n*        SECOND BYTE - X'80' BIT INDICATES A CHARACTER FIELD\n*                            THEN BITS 0-7 GIVE VTFMT LENGTH\n*                      OTHERWISE IT'S A KEY TO WHICH ROUTINE TO USE\n*        THIRD BYTE - OFFSET IN FORMATTED DSCB, VTFMT\n*        4-12 TH BYTES, THE TITLE FOR THE FIELD\n*\n*\nTABTITL  DC    XL12'00'  DUMMY ENTRY FOR 0 ADDRESSING\n         DC    AL1(8),AL1(128+7),AL1(VTFACTON-VTFMT),CL9' ACTION  '  1\n         DC    AL1(6),AL1(128+5),AL1(VTFVOLUM-VTFMT),CL9' VOLUME  '  2\n         DC    AL1(5),AL1(000+4),AL1(VTFCREDT-VTFMT),CL9' CDATE   '  3\n         DC    AL1(5),AL1(000+4),AL1(VTFLSTAC-VTFMT),CL9' REFDT   '  4\n         DC    AL1(5),AL1(000+4),AL1(VTFEXPDT-VTFMT),CL9' EXPDT   '  5\n         DC    AL1(7),AL1(00+12),AL1(VTFALLOC-VTFMT),CL9'   ALLOC '  6\n*                                                               HXF-ALL\n         DC    AL1(7),AL1(00+16),AL1(VTFALLOC-VTFMT),CL9'  UNUSED '  7\n*                                                               HXF-ALL\n         DC    AL1(3),AL1(00+20),AL1(VTFALLOC-VTFMT),CL9' PCT     '  8\n         DC    AL1(2),AL1(00+24),AL1(VTFNOEPV-VTFMT),CL9' EX      '  9\n         DC    AL1(3),AL1(128+2),AL1(VTFDSORG-VTFMT),CL9' DSO     ' 10\n         DC    AL1(3),AL1(128+3),AL1(VTFRECFM-VTFMT),CL9' RFM     ' 11\n         DC    AL1(5),AL1(00+28),AL1(VTFBLKSZ-VTFMT),CL9' BLKSZ   ' 12\n         DC    AL1(5),AL1(00+28),AL1(VTFLRECL-VTFMT),CL9' LRECL   ' 13\n         DC    AL1(4),AL1(128+0),AL01(VTFPROT-VTFMT),CL9' PASS    ' 14\n         DC    AL1(3),AL1(128+0),AL1(VTFCATLG-VTFMT),CL9' CAT     ' 15\n         DC    AL1(4),AL1(128+0),AL1(VTFSECAL-VTFMT),CL9' SECT    ' 16\n         DC    AL1(5),AL1(00+28),AL1(VTFSECAM-VTFMT),CL9'  SECQ   ' 17\n* LINE BELOW                                                    TANSKY\n         DC    AL1(4),AL1(128+3),AL1(VTFUNIT-VTFMT),CL9' UNIT    '  18\n         DC    AL1(3),AL1(128+0),AL1(VTFROUND-VTFMT),CL9' RND     ' 19\n*                                                               HXF-ALL\n         DC    AL1(4),AL1(128+0),AL1(VTFDSTYP-VTFMT),CL9' TYPE    ' 20\n* LINE BELOW                                                    TANSKY\n         DC    AL1(7),AL1(00+12),AL1(VTFUSED-VTFMT),CL9'   USED  '  21\n* LINE BELOW                                                      ABLC\n         DC    AL1(8),AL1(00+36),AL1(VTFCCHH-VTFMT),CL9' CCHH    '  22\n* 2 LINES BELOW                                                 TANSKY\n         DC    AL1(3),AL1(128+0),AL1(VTFUPD-VTFMT),CL9' UPD     '   23\n         DC    AL1(4),AL1(128+0),AL1(VTFRACF-VTFMT),CL9' RACF    '  24\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY3  ' 25\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY4  ' 26\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY5  ' 27\n         DC    AL1(8),AL1(00+32),AL001(VTFDSN-VTFMT),CL9' DSNAME  ' 28\nTAB#ENTS DC    H'28'\n*  DON'T FORGET TO UPDATE VTOCPARS IF YOU ADD OR SUBTRACT       TANSKY\n*  ENTRIES TO THE ABOVE TABLE.                                  TANSKY\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nPRNTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nTOTDS    DS    F              TOTAL COUNTER\nTOTALLOC DS    F              TOTAL ALLOCATION\nTOTUSED  DS    F              TOTAL USED\nFTOTDS   DS    F              FINAL TOTAL DATA SETS\nFTOTALLC DS    F              FINAL TOTAL ALLOC\nFTOTUSED DS    F              FINAL TOTAL USED\nPRNTLSAV DS    A\nPRINTR8  DS    A\nPRNTTOT8 DS    A\nADDREND  DS    A\nPAGEADDR DS    A\nOPENLIST DS    2A             PARM LIST FOR OPEN\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPRTLSAVE DS    8A             REGISTER SAVE AREA FOR PRNTLINE RTN\nLASTKEY  DS    A              ADDRESS OF LAST KEY FOR SUBTOTALS, BREAKS\nNUMBREAK DS    H              CHARACTERS TO COMPARE FOR BREAK\nNUMTOTAL DS    H              CHARACTERS TO COMPARE FOR SUBTOTALS\n         PRINT NOGEN\nSYSOUT   DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,EXLST=OUTLST                 TANSKY\nSYSOUTL  EQU   *-SYSOUT\nOUTDCB   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,EXLST=OUTLST                  TANSKY\nOUTDCBL  EQU   *-OUTDCB\nENDTOTAL DS    X              PROGRAM SWITCHES\nENTOTOUT EQU   X'80'          THE FINAL TOTALS HAVE BEEN OUTPUT\nENDTONLY EQU   X'10'          NO SUBTOTALS, END TOTALS ONLY\nNOBREAK  EQU   X'08'          NO BREAKS\nFIRSTIM  DS    X              INITIALIZATION FOR THIS ROUTINE\nPDLMINUS DC    X'00'\nTOTLAST  DS    X\nSPACTYPE DS    CL6          CHARACTERS FOR SPACE UNITS\nDSNLENGT DS    H\nDSNLENOF DS    H\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nMSGWORK  DS    CL256          AREA FOR BUILDING MESSAGES\nWORKLINE DS    CL256          AREA FOR DATA SET\nPRNTHDRH DS    F\nPRNTHEAD DS    CL256          AREA FOR HEADER\nPRNTTITH DS    F\nPRNTTITL DS    CL256          AREA FOR ITEM TITLES\nMSGBL    DS    CL20           AREA FOR BLANK LINE\nOUTWORK  DS    CL256          WORKING AREA FOR OUTPUT\nDCBEXIT  DS    2F                                               TANSKY\nJFCB     DS    XL176\n         SPACE\nVTPRNTLS DS    A             PRINT ITEM LIST ADDRESS\nVTPRNTL  DS    40C           PRINT ITEM LIST ( IF MODIFIED )\nVTPRNTEN DS    40C\nVTPRNTEX DS    C\n         SPACE\n         DS    0D\nLENWORK  EQU   *-PRNTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\nDUMMD    DSECT\nDUMMA    DS    C              DUMMY ENTRY TO USE FOR CONV\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VT0CPRNT": {"ttr": 7940, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x001\\x00\\x92\\x08o\\x01\\x01$\\x1f\\x08\\x07\\x04\\xc5\\x04\\x8a\\x00I\\xd3\\xf0\\xf0\\xf3\\xe2\\xe6\\xe2@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1992-03-26T00:00:00", "modifydate": "2001-08-29T08:07:31", "lines": 1221, "newlines": 1162, "modlines": 73, "user": "L003SWS"}, "text": "VTOCPRNT TITLE 'VTOC COMMAND PRINT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND PRINT ROUTINE                             *\n*                                                                     *\n* FUNCTION -   PRINT THE DATA PASSED TO IT.  IT WILL USE THE DDNAME   *\n*              SYSOUT IF IT IS ALLOCATED, AND WILL USE THE VTOCMSG    *\n*              ROUTINE IF NOT.  IT CAN ALSO PUT OUT THE DATA TO       *\n*              AN OUTPUT DATA SET.  TOTALS ARE COMPUTED HERE.         *\n*                                                                     *\n* OPERATION -  FOR UNSORTED DATA, GET THE CURRENT ENTRY, ADD TO THE   *\n*              TOTALS, AND OUTPUT IT.  IF THE DATA IS SORTED, THE     *\n*              ACTION IS MORE COMPLEX, BECAUSE ALL THE DATA SETS      *\n*              ARE TO BE OUTPUT.  THE TOTALS AND BREAKS MAY BE        *\n*              NEEDED AT ANY POINT.                                   *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, SORTED LIST    *\n*                                                                     *\n* OUTPUT -     TO SYSOUT, A LIST OF THE REQUESTED DATA SETS AND       *\n*              THEIR ATTRIBUTES, WITH TOTALS AND BREAKS AS NEEDED.    *\n*              ALSO TO THE OUTPUT DATA SET, IF NEEDED.  IF SYSOUT     *\n*              IS NOT ALLOCATED, VTOCMSG IS USED FOR OUTPUT.          *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n*   1/4/83 UPDATED CODE TO PROCESS CYLS,KBYTES,MBYTES     LMB 1/4/83  *\n*          LAUREEN BEAUCHAINE  -  CBT                     LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO CORRECT   ABL-EXT\n*           LIM(EX GT 2) TO MEAN EXTENTS (NOT EXPDT).           ABL-EXT\n*                                                                     *\n* 3/29/88 - MODIFIED BY HENTRY FARINEAU AT STATE MUTUAL TO      HXF-ALL\n*           MODIFY ALLOC AND UNUSED FIELD TO 8 BYTES.           HXF-ALL\n*                                                                     *\n* 5/05/88 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO           ABL-PDS\n*           TERMINATE PRINT OUTPUT AFTER AN ATTENTION FROM PDS  ABL-PDS\n*                                                                     *\n* 6/02/88 - MODIFIED BY GUY ALBERTELLI AT BFGOODRICH TO         GLA-PDS\n*           NOT PASS BACK THE HEADING OR TOTAL LINES            GLA-PDS\n*                                                                     *\n* 8/24/88 - MODIFIED BY BRUCE LELAND TO STILL PASS BACK         GLA-PDS\n*           THE HEADING LINES                                   GLA-PDS\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO USE BETTER     TANSKY\n*           BLOCKSIZES VIA A DCB OPEN EXIT.                     TANSKY\n*           ALSO FIXED THE \"USED\" FIELD TO BE THE CORRECT       TANSKY\n*           LENGTH IN THE TABTITL TABLE.                        TANSKY\n*           ADDED UNIT TYPE PRINTING                            TANSKY\n*                                                                     *\n*11/25/92 - MODIFIED BY A. BRUCE LELAND AT SERENA TO ALLOW      ABL-PDS\n*           UP TO 132 CHARACTERS IN AN OUTPUT LINE FROM PDS.    ABL-PDS\n*                                                                     *\n*08/09/94 - MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n*06/13/95 - MODIFIED BY A. BRUCE LELAND TO CORRECT THE EXPDT    ABL-EX\n*           PROCESSING.  EXPDT WAS BEING TREATED AS THE END     ABL-EX\n*           OF THE PARSE LIST INCORRECTLY IN PRINT(NEW (EXPDT.. ABL-EX\n*                                                                     *\n* 12/19/97- MODIFIED BY JOHN KALINICH AT USA LSSC TO ADD YEAR   Y2K\n*           2000 SUPPORT FOR DATES.                             Y2K\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ELIMINATE   JVH-FIX\n*           THE ASSEMBLER WARNING MESSAGES WHEN USING THE       JVH-FIX\n*           HIGH LEVEL ASSEMBLER FROM IBM.                      JVH-FIX\n*\n* 14AUG01 - MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD           *DHC*\n*       TO SHOW IF DATASET IS IN USE BY TESTING FOR SYSDSN ENQ'S  *DHC*\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n***********************************************************************\n*\n*        MACRO FOR DEFINING FAKE PDE FOR A DEFAULT LIST\n*\n         EJECT\nVTOCPRNT ENTER 12,20          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING PRNTWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE PRINT CLEAN - CLOSE AND FREEMAIN\n*\n         CLI   VTCEPRNT,0     IS IT TIME\n         BNE   PRNTCLEN       YES, GO DO IT\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, SET UP THE DCB'S AND OPEN THEM\n*\n         CLI   FIRSTIM,0      IS THIS THE FIRST TIME?\n         BNE   CHKSORT        NO, KEEP ON TRUCKIN'\n         B     PRTINIT    INITIALIZE FOR PRINTING\n*\n*        CHECK TO SEE IF THE DATA IS SORTED\n*\nCHKSORT  CLI   SORTK+1,2      IS THIS NOSORT?\n         BNE   SORTED         NO, THE ENTRIES ARE SORTED\n*\n*        NOSORT WAS SPECIFIED.  ONLY THE CURRENT ENTRY IS AVAILABLE\n*\n         L     R3,FORMATAD    POINT TO THE ENTRY\n         USING VTFMT,R3       FORMATTED DSCB ADDRESSABILITY\n         LTR   R3,R3          IS IT THERE?\n         BZ    CHEKTOT        NO, SEE IF A TOTAL HAS BEEN OUTPUT\n         XC    FORMATAD,FORMATAD  CLEAR THE ADDRESS FOR LATER\n*\n*        ADD TO THE TOTALS\n*\n         BAL   R8,ADDTOT      GO DO IT\n*\n*        SEE IF THE OUTPUT DATA SET IS WANTED\n*\n         TM    OUTDCB+48,X'10'  IS THE DCB OPEN?\n         BNO   NOOUTPT        NO, SKIP ALONG\n         BAL   R8,OUTPUT      YES, GO DO IT\n*\n*        SEE IF THERE'S PRINTING TO DO\n*\nNOOUTPT  CLI   PRINTK+1,2     WAS NOPRINT SPECIFIED?\n         BE    VTRET          YES, WE'RE DONE FOR NOW\n         BAL   R8,PRINT       NO, PRINT OUT THE ENTRY\n*\n*        RETURN FROM WHENCE WE CAME\n*\nVTRET    LEAVE EQ,RC=0        EXEUNT\n*\n*        NOSORT, CHECK FOR OUTPUTTING THE TOTALS\n*\nCHEKTOT  TM    ENDTOTAL,ENTOTOUT  WAS THE TOTAL OUTPUT BEFORE?\n         BO    VTRET          YES, JUST RETURN\n         BAL   R8,PRNTOT      NO, OUTPUT THE TOTAL\n         OI    ENDTOTAL,ENTOTOUT  REMEMBER THE TOTAL IS OUT\n         B     VTRET          THEN RETURN\n         EJECT\n*\n*        THE DATA IS SORTED, SO THE LISTS MUST BE EMPTIED.\n*        CHECK EACH ITEM FOR A TOTAL AND FOR A BREAK\n*        OUTPUT TO PRINT AND/OR THE OUTPUT DATA SET\n*\n*\n*        FIRST GET THE TOTAL AND BREAK COUNTS FOR COMPARES\n*\nSORTED   LA    R1,TOTALN      POINT TO THE TOTAL PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETTNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,ENDTONLY  YES, TOTALS AT THE END ONLY\nSETTNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMTOTAL   SET THE TOTAL COUNT\n         LA    R1,BREAK       POINT TO THE BREAK PDL\n         BAL   R8,PDLNUM      CONVERT IT TO A NUMBER\n         LTR   R15,R15        IS IT ZERO?\n         BNZ   SETBNUM        NO, IT'S GOOD\n         OI    ENDTOTAL,NOBREAK   YES, BREAK  AT THE END ONLY\nSETBNUM  BCTR  R15,0          CUT IT DOWN ONE\n         STH   R15,NUMBREAK   SET THE BREAK COUNT\n*\n*        START GOING THROUGH THE LISTS, PROCESS THE ENTRIES\n*\n         LA    R4,VTCSORTH    POINT TO THE LISTS\n         LA    R5,VTCSORTE    POINT TO THE END OF THE LISTS\n         ST    R5,ADDREND     SAVE THE ADDRESS\nNEWLIST  L     R3,0(R4)       GET THE FIRST ENTRY FROM THIS LIST\n         LTR   R3,R3          ANYTHING ON THIS LIST?\n         BZ    NEXTLIST       NO, GET ANOTHER LIST\n*\n*        THIS IS AN ENTRY, DO THE TOTALS, PRINT, AND OUTPUT\n*        CHECK FOR TOTALS AND BREAKS FIRST\n*\nGOTENTRY CLI   PRINTK+1,2     WAS NOPRINT SET?\n         BE    CHKOUTPT       YES, SKIP INTERIM TOTALS\n         MVI   TOTLAST,0      SET UP FLAG FOR TOTAL AS LAST ACTION\n*        NOTE - EXTENSION - OUTPUT INTERIM TOTALS WITH THE KEY\n         TM    ENDTOTAL,ENDTONLY  END TOTAL ONLY?\n         BO    CHKBREAK       YES, SEE ABOUT BREAKS\n         LH    R2,NUMTOTAL    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    CHKBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, PRINT THE TOTALS FIRST\n*\n         BAL   R8,PRNTOT      PRINT THE TOTALS\n*\n*        CHECK FOR A BREAK\n*\nCHKBREAK TM    ENDTOTAL,NOBREAK   NO BREAKS THIS TIME?\n         BO    SKPBREAK       YES, SKIP PAST BREAKS\n         LH    R2,NUMBREAK    GET THE LENGTH TO COMPARE\n         L     R1,LASTKEY     GET THE LAST ENTRY\n         EX    R2,COMPKEY     SEE IF THIS IS THE SAME\n         BE    SKPBREAK       YES, KEEP COUNTING\n*\n*        THIS ONE IS DIFFERENT, GET A NEW PAGE\n*\n         MVC   LINECT,LINEMAX BE SURE THE NEXT ITEM GETS A NEW PAGE\n         MVI   TOTLAST,0      DON'T SKIP A LINE AFTER TOTAL\n         LA    R1,VTFDSN     POINT TO THE DSNAME\n         ST    R1,LASTKEY    SAVE THE ADDRESS FOR BREAK COMPARES\n*\n*        PRINT THE ITEM\n*\nSKPBREAK CLI   TOTLAST,0      WAS A TOTAL NOT FOLLOWED BY A BREAK?\n         BE    SKPBREA2       NO, CONTINUE NORMALLY\n         MVC   MSGBL,MSGBLC   YES, SET UP A BLANK MESSAGE\n         LA    R1,MSGBL       POINT TO IT\n         BAL   R8,PRNTLINE    THEN PUTPUT IT\nSKPBREA2 BAL   R8,PRINT       FINAL FORMAT AND PRINT\n*\n*        CHECK FOR DATA SET OUTPUT\n*\nCHKOUTPT TM    OUTDCB+48,X'10'     IS IT OPEN AND READY\n         BNO   GOTOT          NO, GO DO THE TOTALS\n         BAL   R8,OUTPUT      YES, PUT OUT THE DATA SET ENTRY\n*\n*        ADD UP THE TOTALS\n*\nGOTOT    BAL   R8,ADDTOT      SUM THEM\n*\n*        GET THE NEXT ENTRY\n*\n         ICM   R3,B'1111',VTFNEXT  FOLLOW THE CHAIN\n         BNZ   GOTENTRY       SOMETHING'S THERE, USE IT\n*\n*        END OF THIS LIST, TRY THE NEXT LIST\n*\nNEXTLIST LA    R4,12(0,R4)    MOVE OVER ONE\n         C     R4,ADDREND     WAS THAT THE LAST LIST?\n         BL    NEWLIST        NO, KEEP TRYING\n*\n*        END OF THE LISTS, OUTPUT THE FINAL TOTAL AND RETURN\n*\n         BAL   R8,PRNTOT      LIST THE TOTAL\n*\n*        CLEAR OUT THE PRINT LISTS\n*\n         XC    VTCSORTH+000(256),VTCSORTH  CLEAR 64 ENTRIES\n         XC    VTCSORTH+256(256),VTCSORTH+256 CLEAR 64 ENTRIES\n         XC    VTCSORTH+512(256),VTCSORTH+512 CLEAR 64 ENTRIES\n         XC    VTCSORTH+768(256),VTCSORTH+768 CLEAR 64 ENTRIES\n         B     VTRET          THEN GET OUT OF HERE\n         EJECT\n*\n*        PRINT CLEANUP ROUTINE - CLOSE DCB'S FIRST\n*\nPRNTCLEN TM    SYSOUT+48,X'10'  IS SYSOUT OPEN?\n         BNO   PRNTCLO        NO, CHECK THE OUTDCB\n         CLOSE (SYSOUT),MF=(E,OPENLIST)  DO THE CLOSE\nPRNTCLO  TM    OUTDCB+48,X'10'  IS OUTDCB OPEN?\n         BNO   PRNTFREE       NO, SKIP DOWN TO THE FREEMAINS\n         CLOSE (OUTDCB),MF=(E,OPENLIST)  DO THE CLOSE\n*\n*        FREE UP THE STORAGE\n*\nPRNTFREE L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nPRNTFRL  ICM   R3,B'1111',0(R2)  GET THE STORAGE ADDRESS\n         BZ    VTRET          IF ZERO, WE'RE DONE\n         FREEMAIN RU,LV=VTCGETMS,A=(R3)  FREE IT                WSX-MAX\n*        FREEMAIN R,LV=VTCGETMS,A=(R3)  FREE IT\n         XC    0(4,R2),0(R2)  CLEAR THE ADDRESS\n         LA    R2,4(R2)       GET THE NEXT BLOCK ADDRESS\n         BCT   R5,PRNTFRL     AND LOOP UNTIL DONE\n         B     VTRET          THEN RETURN\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*              ADDTOT - ADD TO THE CURRENT TOTALS\n*              PRNTOT - PRINT OUT THE TOTALS AND CLEAR THEM\n*              PRINT  - PRINT OUT AN ENTRY\n*              OUTPUT - OUTPUT THE DATA SET ENTRY\n*              PDLNUM - GET A NUMBER FROM A PDL ENTRY\n*              PRNTLINE - INTERNAL ROUTINE TO COUNT LINES, OUTPUT HEAD\n*\nADDTOT   L     R1,TOTDS       NUMBER OF DATA SETS\n         LA    R1,1(R1)       ADD ONE\n         ST    R1,TOTDS       STORE IT BACK\n         L     R1,TOTALLOC    TOTAL ALLOCATION\n         A     R1,VTFALLOC    ADD IN THIS DATA SET\n         ST    R1,TOTALLOC    STORE IT BACK\n         L     R1,TOTUSED     TOTAL USED SPACE\n         A     R1,VTFUSED     ADD IN THIS DATA SET\n         ST    R1,TOTUSED     STORE IT BACK\n         BR    R8             RETURN\n*\n         EJECT\n*\n*        PRINT THE TOTALS\n*              FIRST FORMAT THEM, THEN PUT THE LINE OUT TO SYSOUT\n*              OR USE VTOCMSG TO LIST IT\n*\nPRNTOT   ST    R8,PRNTTOT8   SAVE THE RETURN ADDRESS\n*\n         CLI   TOTALK+1,2    NO TOTALS?                         HXF-ALL\n         BER   R8            RETURN                             HXF-ALL\n*\n         MVC   MSGWORK(MSGTLEN),MSGTOTC  INIT THE MSG\n*        CONV  MSGWORK+4+11,TOTDS,5  CONVERT NO OF DATA SETS\n         CONV  MSGWORK+4+10,TOTDS,6  CONVERT NO OF DATA SET ABL 3/20/90\n         CONV  MSGWORK+4+28,TOTALLOC,8  CONVERT ALLOCATION\n         CONV  MSGWORK+4+51,TOTUSED,8   CONVERT USED SPACE\n         MVC   MSGWORK+4+37(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n         MVC   MSGWORK+4+60(6),SPACTYPE MOVE IN THE UNITS LMB 1/4/83\n*\n*        NOW OUTPUT THE MESSAGE\n*\n         MVI   MSGWORK+4,C'0' ADD A CARRIAGE CONTROL\n         LA    R1,MSGWORK     POINT TO THE TOTAL LINE\n         BAL   R8,PRNTLINE    PUT OUT THE TOTAL LINE\n         MVI   TOTLAST,1      NOTE THAT A TOTAL WAS THE LAST ITEM\n         L     R8,PRNTTOT8    GET THE RETURN ADDRESS\n         BR    R8             THEN RETURN\n         EJECT\n*\n*        PRINT OUT THE FORMATTED DSCB\n*              FIRST FORMAT IT\n*\nPRINT    ST    R8,PRINTR8     SAVE REGISTER 8 FOR RETURNING\n         MVI   WORKLINE+4,C' ' BLANK OUT THE LINE\n         MVC   WORKLINE+5(250),WORKLINE+4 SO INDIVIUAL FIELDS DON'T\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,WORKLINE+4  POINT TO THE WORK  LINE\nPRTLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         LA    R5,1(R1)       SAVE A PLACE TO MOVE FIELD INTO\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         LA    R0,WORKLINE+4  POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   PRTEND         YES, WE'RE DONE\n         AR    R1,R0          NO, KEEP GOING\n*\n*        MOVE IN OR CONVERT THIS ITEM\n*\n         SR    R14,R14       CLEAR A REG FOR LENGTH OF RTN NO\n         IC    R14,1(R6)     GET THE LENGTH OR ROUTINE\n         N     R14,F127      CLEAR THE TOP BIT\n         SR    R15,R15       CLEAR A REG FOR VTFMT\n         IC    R15,2(R6)       DISPLACEMENT\n         AR    R15,R3        RELOCATE IT\n*\n*        DECIDE WHERE TO PUT IT\n*\n         TM    1(R6),X'80'   IS IT IN CHARS\n         BNO   PRTRTN        NO, USE THE SPECIAL ROUTINE\n         SR    R7,R14        GET THE DIFFERENCE IN LENGTHS\n         SRL   R7,1          GET HALF THE DIFFERENCE\n         AR    R5,R7         PUT THE DATA HERE\n         EX    R14,PRTMOVE   MOVE IN THE CHARACTERS\nPRTINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   PRTLOOP        GO GET MORE ITEMS\nPRTEND   LA    R1,WORKLINE   POINT TO THIS LINE\n         BAL   R8,PRNTLINE   THEN GO PRINT IT\n         L     R8,PRINTR8     GET THE RETURN ADDRESS\n         BR    R8             RETURN\nPRTMOVE  MVC   0(0,R5),0(R15)  EXECUTED MOVE\n*\n*        VARIOUS ROUTINES TO FORMAT BEFORE MOVING IN THE DATA\n*\nPRTRTN   LTR   R14,R14       BE SURE THE OFFSET IS OK\n         BP    PRTRTN1        IT SEEMS ALL RIGHT\n         ABEND 701,DUMP       CRASH AND BURN\nPRTRTN1  B     *(R14)        GO DO YOUR THING\n         B     PRDATES        4  CDATE, EXPDT\n         B     PRLSTUS        8  LSTUS\n         B     PRALLOC       12  ALLOC, USED\n         B     PRUNUSED      16  ALLOC - USED\n         B     PRPCT         20  100 * USED / ALLOC\n         B     PREXT         24  EXT\n         B     PRBLREC       28  BLKSZ LRECL\n         B     PRDSN         32  DSNAME\n         B     PRCCHH        36  CCHH                              ABLC\n*\n*\n*        CDATE AND EXPDT\n*\nPRDATES  SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         USING DUMMD,R5      ALLOW CONV TO USE SYMBOL\n         CONVY2K DUMMA,(R14),2 CONVERT YEAR                   Y2K DEC97\n         ICM   R14,B'0011',1(R15)  GET THE DAY\n         CONV  DUMMA+2,(R14),3,EDMASK0,COMP0  CONVERT THE DAY\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LAST USE DATE\n*\nPRLSTUS  MVC   CHARS,EDMASK   SET UP THE EDIT MASK\n         ED    CHARS(6),0(R15)  CONVERT TO CHARACTERS\n         MVC   0(5,R5),CHARS+1  THEN MOVE THEM IN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        ALLOCATION AND USED\n*\nPRALLOC  ICM   R14,B'1111',0(R15)  GET THE AMOUNT\n         BM    PRUNKN6       IF NEGATIVE, IT'S NOT KNOWN\n         CONV  DUMMA,(R14),7 CONVERT THE NUMBER                 HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN6  MVC   0(7,R5),BLANKS  UNKNOWN AMOUNT, LEAVE IT BLANK   HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        UNUSED SPACE\n*\nPRUNUSED ICM   R14,B'1111',VTFUSED  GET THE   USED SPACE\n         BM    PRUNKN6       IF NOT KNOWN, SKIP ALONG\n         L     R14,VTFALLOC  GET THE ALLOCATED SPACE\n         S     R14,VTFUSED   MINUS THE USED SPACE GIVES UNUSED\n         BZ    PRTINC        IF NO UNUSED SPACE, LEAVE BLANK\n         CONV  DUMMA,(R14),7 CONVERT FOR PRINTING               HXF-ALL\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        PCT - PERCENTAGE USED\n*\nPRPCT    SR    R6,R6         CLEAR THE TOP PART OF THE NUMBER\n         ICM   R7,B'1111',VTFUSED   GET THE AMOUNT OF USED SPACE\n         BM    PRUNKN3       IF NOT KNOWN, LEAVE BLANK\n         CLC   VTFALLOC,ZERO IS THE ALLOCATION ZERO?\n         BNE   PRPCTM        NO, DO THE STANDARD STUFF\n         CLC   VTFUSED,ZERO  IS THE USED SPACE ZERO?\n         BE    PRUNKN3       YES, JUST USE BLANKS\nPRPCTERR MVC   0(3,R5),=C'ERR'  NO, IT'S AN ERROR\n         B     PRTINC        THEN GO TRY FOR MORE\nPRPCTM   M     R6,F100       MULTIPLY BY 100 FOR PERCENT\n         D     R6,VTFALLOC   DIVIDE BY ALLOC TO GET THE PERCENT\n         LTR   R7,R7         IS IT LESS THAN ZERO?\n         BM    PRPCTERR      YES, FLAG THE ERROR\n         C     R7,F100       ALSO CHECK FOR OVER 100 PERCENT\n         BH    PRPCTERR      THAT'S ALSO AN ERROR\n         CONV  DUMMA,(R7),3  CONVERT FOR PRINTING\n         B     PRTINC        GO GET MORE PRINT ITEMS\nPRUNKN3  MVC   0(3,R5),BLANKS BLANK THE UNKNOWN\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        EXTENTS\n*\nPREXT    SR    R14,R14       CLEAR REG FOR YEAR\n         IC    R14,0(R15)    GET THE YEAR\n         CONV  DUMMA,(R14),2 CONVERT THE EXTENTS\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        LRECL AND BLKSZ\n*\nPRBLREC  LH    R14,0(R15)    GET THE DATA ( HALFWORD )\n         CONV  DUMMA,(R14),5  CONVERT THE DATA\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*\n*        DATA SET NAME\n*\nPRDSN    LH    R14,VTFDSNL   GET THE DSNAME LENGTH\n         CH    R14,DSNLENGT  CHACK FOR MAX LENGTH\n         BL    PRDMOVE       THIS DSN IS SHORT ENOUGH\n         LH    R14,DSNLENGT  CUT IT DOWN\nPRDMOVE  BCTR  R14,0         COUNT DOWN ONE FOR THE EX\n         EX    R14,PRTMOVE   MOVE IN THE DSNAME\n         AH    R1,DSNLENOF   CORRECT THE LINE POINTER\n         B     PRTINC        GO GET MORE PRINT ITEMS\n*                                                                  ABLC\n*        CCHH ADDRESS                                              ABLC\n*                                                                  ABLC\nPRCCHH   AH    R1,=H'9'                 CORRECT THE LENGTH         ABLC\n         UNPK  0(8+1,R5),VTFCCHH(4+1)   CCHH EXTENT START          ABLC\n         TR    0(8,R5),HEXTAB           CONVERT TO PRINTABLE HEX   ABLC\n         MVI   8(R5),C'-'               DASH BETWEEN HI/LOW CCHH   ABLC\n*                                                                  ABLC\n         UNPK  9(8+1,R5),VTFCCHH+4(4+1) CCHH EXTENT START          ABLC\n         TR    9(8,R5),HEXTAB           CONVERT TO PRINTABLE HEX   ABLC\n         MVI   17(R5),C' '              FIX GARBAGE BYTE           ABLC\n         B     PRTINC                   GET THE NEXT PRINT ITEM    ABLC\n*                                                                  ABLC\nHEXTAB   EQU   *-C'0'                                              ABLC\n         DC    C'0123456789ABCDEF'                                 ABLC\n         EJECT\n*\n*        OUTPUT THE FORMATTED DSCB AS IT IS\n*\nOUTPUT   CLEAR OUTWORK       CLEAR THE OUTPUT REC\n         LH    R2,VTFDSNL     GET THE LENGTH OF THE DSNAME\n         LA    R2,VTFMTL-1(R2)  GET THE FULL LENGTH MINUS ONE\n         EX    R2,OUTMOVE    MOVE IN THE ACTUAL RECORD\n         PUT   OUTDCB,OUTWORK    OUTPUT THE RECORD\n         BR    R8             RETURN\nOUTMOVE  MVC   OUTWORK(0),0(R3)  EXECUTED MOVE\n         EJECT\n*\n*        PDLNUM - CONVERT FROM CHARACTERS ( EBCDIC ) TO AN INTEGER\n*              BINARY FORM, PASSED BACK VIA REGISTER 15\n*              A PARSE PDE IS THE INPUT AS SHOWN IN THE SAMPLE BELOW\n*                       LA    R1,PDL     POINT TO THE PARSE DECRIPTION\n*                       BAL   R8,PDLNUM  GO CONVERT TO NUMERICS\n*              THE ROUTINE WILL TERMINATE IF IT FINDS NON-NUMERICS\n*                 ANY CHARACTERS OTHER THEN 0-9, +, -\n*              REGISTERS 1, 2, 5, 6, AND 7 ARE USED\n*\nPDLNUM   STM   R1,R8,PDLNSAVE SAVE THE REGISTERS\n         LH    R2,4(R1)       GET THE STRING ADDRESS\n         L     R1,0(R1)       GET THE STRING ADDRESS\n         MVI   PDLMINUS,0     CLEAR THE NEGATIVE NUMBER FLAG\n         SR    R5,R5          CLEAR THE CHARACTER COUNTER\n         SR    R15,R15        CLEAR THE ANSWER\nPDLLOOP  LA    R6,0(R5,R1)    POINT TO THIS DIGIT\n         LA    R5,1(R5)       GET TO THE NEXT DIGIT\n         CR    R5,R2          IS THIS THE END OF THE STRING?\n         BH    PDLFINI        YES, EXIT\n         SR    R7,R7          CLEAR A WORK REGISTER\n         IC    R7,0(R6)       GET THE CHARACTER\n         SH    R7,PDLH240     SUBTRACT THE CHARACTER C'0'\n         BM    PDLSP          IF NEGATIVE, CHECK SPECIAL CHARACTERS\n         MH    R15,PDLH10     IT'S A DIGIT, MULTIPLY PRIOR NUM BY TEN\n         AR    R15,R7         ADD ON THE NEW DIGIT\n         B     PDLLOOP        AND LOOP FOR MORE\n*\n*        CHECK FOR SPECIAL CHARACTERS\n*\nPDLSP    CLI   0(R6),C' '     IS IT A BLANK?\n         BE    PDLLOOP        THEN IT'S OK\n         CLI   0(R6),C'+'     IS IT A PLUS?\n         BE    PDLLOOP        THAT'S ALSO OK\n         CLI   0(R6),C'-'     IS IT A MINUS?\n         BNE   PDLFINI        NO, JUST QUIT\n         MVI   PDLMINUS,1     YES, NOTE IT\n         B     PDLLOOP        AND LOOK FOR MORE\n*\n*        QUIT, AFTER SETTING R15 TO NEGATIVE IF NEEDED\n*\nPDLFINI  CLI   PDLMINUS,1     WAS A MINUS SIGN FOUND?\n         BNE   PDLLEAVE       NO, EXIT\n         LNR   R15,R15        YES, MAKE IT NEGATIVE\nPDLLEAVE LM    R1,R8,PDLNSAVE RESTORE THE REGISTERS\n         BR    R8             RETURN\nPDLH10   DC    H'10'\nPDLH240  DC    H'240'\n         EJECT\n*\n*        PRNTLINE - GET EACH LINE FOR SYSOUT, THEN COUNT THE LINES\n*              OUTPUT HEADERS AND TITLE LINES AS NECESSARY\n*\nPRNTLINE STM   R1,R8,PRTLSAVE SAVE THE REGISTERS\n         TM    SYSOUT+48,X'10' IS SYSOUT OPEN FOR BUSINESS?\n         BNO   PRNTTERM       NO, IT'S NOT OPEN, USE VTOCMSG\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTLIN       YES, JUST OUTPUT THE DATA LINE\n*\n*        DO THE LINE COUNTING\n*\n         LH    R2,LINECT      GET THE LINE COUNT\n         CLI   4(R1),C'1'     IS IT REQUESTING A NEW PAGE?\n         BE    PRNTPAGE       YES, DO IT\n         CLI   0(R1),C'-'     SKIP 3 LINES\n         BE    PRNTSKP3       YES, TRY IT\n         CLI   0(R1),C'0'     SKIP 2 LINES?\n         BE    PRNTSKP2       YES, DO IT\n         B     PRNTSKP1       JUST SKIP ONE\nPRNTSKP3 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP2 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\nPRNTSKP1 LA    R2,1(R2)       ADD ONE TO THE LINE COUNT\n         STH   R2,LINECT      SAVE THE LINE COUNT\n         CH    R2,LINEMAX     DOES THIS OVERFLOW  HE PAGE?\n         BL    PRNTLIN        NO, JUST PUT OUT THIS LINE\n*\n*        PRINT OUT THE PAGE HEADER AND ITEM TITLES\n*\nPRNTPAGE LH    R6,PAGECT      GET THE PAGE COUNT\n         LA    R6,1(R6)       ADD ONE TO IT\n         STH   R6,PAGECT      THEN STORE IT BACK\n         L     R7,PAGEADDR    GET THE PLACE TO PUT THE PAGE\n         DROP  R5             DROP PRIOR USING ON DUMMD         JVH-FIX\n         USING DUMMD,R7       DUMMY DSECT\n         CONV  DUMMA,(R6),5   GET THE CHARACTERS\n         DROP  R7\n         ST    R1,PRNTLSAV    SAVE THE INPUT REG1\n         PUT   SYSOUT,PRNTHEAD  OUTPUT THE HEADER\n         PUT   SYSOUT,PRNTTITL  OUTPUT THE ITEM TITLES\n         L     R1,PRNTLSAV    GET THE ORIGINAL LINE\n         MVI   4(R1),C'0'     ALWAYS SKIP THE FIRST LINE AFTER NEW PAGE\n         LA    R7,5           SET THE LINE COUNT\n         STH   R7,LINECT      SAVE IT FOR LATER\nPRNTLIN  CLEAR OUTWORK       CLEAR A PRINT RECORD\n         LH    R6,0(R1)      GET THE RECORD LENGTH\n         SH    R6,H5         MINUS 4 FOR PREFIX, 1 FOR EX\n         LA    R3,4(R1)      POINT TO THE TEXT\n         EX    R6,OUTMOVE    THEN MOVE IN THE LINE\n         PUT   SYSOUT,OUTWORK      AND FINALLY PRINT IT\n         B     PRNTLRET       THEN RETURN\n*\n*        SIMPLER CHECKING FOR VTOCMSG OUTPUT\n*\nPRNTTERM LH    R2,LINECT      GET THE LINE COUNT\n         LA    R2,1(R2)       IGNORE CARRIAGE CONTROL\n         STH   R2,LINECT      SAVE IT BACK\n         LR    R6,R1          SAVE THE ORIGINAL REG 1\n         MVI   4(R1),C' '    BLANK THE CARRIAGE CONTROL\n         CLI   HEADK+1,2     NOHEADING REQUEST?\n         BE    PRNTTLIN       YES, JUST OUTPUT THE DATA LINE\n         CH    R2,LINEMAX     NEED A NEW TITLE?\n         BL    PRNTTLIN       NO, KEEP GOING\n         VTOCMSG PRNTTITH     YES, PUT IT OUT\n         MVC   LINECT,H2      RESET THE LINE COUNT\nPRNTTLIN VTOCMSG 0(R6)        OUTPUT THE PASSED LINE\n         TM    PDSCALL,X'80'  TERMINATION?                      ABL-PDS\n         BO    VTRET          YES, STOP THE OUTPUT              ABL-PDS\nPRNTLRET LM    R1,R8,PRTLSAVE RESTORE THE REGISTERS\n         BR    R8             THEN RETURN\n         EJECT\nPRTINIT  MVI   FIRSTIM,10    FLAG THE INITIALIZATION AS DONE\n         LA    R1,TABTITL    POINT TO THE BUG TABLE\n         ST    R1,ATABTITL   LET CHECK KNOW WHERE IT IS\n*\n*        SET UP THE CHARACTERS FOR TYPE OF SPACE ALLOC.\n*\n         LH    R2,SPACEK      GET THE SPACE TYPE KEYWORD\n         SLA   R2,3           MULTIPLY BY 8\n         LA    R2,TABSPACE(R2)  RELOCATE IT\n         MVC   SPACTYPE,0(R2) SAVE THE CHARACTERS\n         CLI   PRINTK+1,2     IS THIS NOPRINT?\n         BE    NOOPEN         YES, SKIP THE OPEN\n         MVC   SYSOUT(SYSOUTL),SYSOUTC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         LA    R1,JFCB       POINT TO THE JFCB\n         ST    R1,DCBEXIT    AND PUT THE ADDR IN THE DCB EXIT\n         MVI   DCBEXIT,X'07' NOTE IT AS A JFCB EXIT             TANSKY\n         MVC   DCBEXIT+4(4),OUTLST    OPEN EXIT                 TANSKY\n         LA    R1,DCBEXIT    POINT TO THE EXIT LIST\n         LA    R2,SYSOUT     AND TO THE DCB FOR ADDRESSABILITY\n         USING IHADCB,R2     TELL THE ASSEMBLER ABOUT IT\n         STCM  R1,B'0111',DCBEXLSA  STUFF IT INTO THE DCB\n         TM    CHARSPL+6,X'80'  CHARS PER LINE ENTERED?\n         BZ    RDJFCB        NO, CONTINUE ALONG\n         LA    R1,CHARSPL    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,DCBLRECL  SAVE THE NEW LRECL\n         STH   R15,LINELEN   ALSO THE LINE LENGTH\n         TM    BLKSZSET+6,X'80'  BLOCKSIZE ENTERED?\n         BZ    BLKEQREC      NO, DCB OPEN EXIT WILL COMPUTE IT  TANSKY\n         LA    R1,BLKSZSET      POINT TO THE PDL\n         BAL   R8,PDLNUM     GET THE NUMBER\n         STH   R15,DCBPRECL  STUFF IT AWAY\nBLKEQREC DS    0H                                               TANSKY\n         DROP  R2            FINISHED WITH THE DCB\nRDJFCB   RDJFCB ((R2)),MF=(E,OPENLIST)  SEE IF IT'S THERE\n         LTR   R15,R15       WAS IT THERE?\n         BNZ   NOOPEN        NO, SKIP ALONG\n         OPEN  ((R2),OUTPUT),MF=(E,OPENLIST)  OPEN THE PRINT DCB\n*\n*        INITIALIZE PRINT VARIABLES\n*\n*        SET LINES/PAGE AND LINESIZE\n*\nNOOPEN   MVC   LINEMAX,DEFLMAX  SET THE DEFAULT NUMBER OF LINES/PAGE\n         TM    LINESPP+6,X'80'     LINES PER PAGE ENTERED?\n         BZ    DEFLINPP     NO, SKIP ON\n         LA    R1,LINESPP    YES, POINT TO THE PDL\n         BAL   R8,PDLNUM     CONVERT TO A NUMBER\n         STH   R15,LINEMAX   AND SAVE IT\nDEFLINPP MVC   LINECT,LINEMAX SET UP TO PAGE ON THE FIRST WRITE\n         TM    CHARSPL+6,X'80'     CHARS PER LINE ENTERED?\n         BO    LENSET        YES, USE IT\n         MVC   LINELEN,DEFLEN SET UP A DEFAULT LENGTH\n         TM    SYSOUT+48,X'10' DO WE USE SYSOUT?\n         BO    LENSET         YES, USE WHAT WE'VE GOT\n         OC    PDSCALL,PDSCALL COMING FROM PDS??                ABL-PDS\n         BNZ   LENSET          NO, SKIP WIDTH SETTING           ABL-PDS\n*        GET THE TERMINAL LINE SIZE TO SEE IF IT MAKES SENSE\n         GTSIZE\n         LTR   R1,R1          SEE IF IT'S GOOD\n         BZ    LENSET         NO, JUST A ZERO, KEEP THE DEFAULTS\n         BCTR  R1,0           CUT IT DOWN ONE TO AVOID A MESS\n         STH   R1,LINELEN     SAVE THIS LENGTH\n         LTR   R0,R0          FOR DISPLAYS, IT'S SCREEN SIZE\n         BZ    LENSET         KEEP WHAT WE'VE GOT\n         TM    LINESPP+6,X'80'  WAS LINES PER PAGE ENTERED?\n         BO    LENSET           YES, DON'T OVERRIDE IT\n         STH   R0,LINEMAX     AND SAVE THE NEW PAGE LOCATION\nLENSET   DS    0H\n*\n*        SET UP THE PAGE COUNTER\n*\nPAGEAD   LH    R1,LINELEN     GET THE LENGTH OF THE LINE\n         SH    R1,H10         MINUS TEN CHARACTERS\n         LA    R1,PRNTHEAD(R1) THEN RELOCATE IT\n         CLEAR PRNTHEAD       CLEAR THE LINE FIRST\n         MVC   0(4,R1),CPAGE  MOVE IN THE CHARACTERS PAGE\n         LA    R1,5(R1)       MOVE OVER 5 MORE\n         ST    R1,PAGEADDR    THIS IS THE PLACE\n*\n*        BUILD THE PRINT HEADER LINE\n*\n         TM    HEADING+6,X'80' IS A USER HEADING PRESENT\n         BO    USERHEAD       YES, USE IT\n         MVC   PRNTHEAD(L'DEFHEAD),DEFHEAD  NO, GET A DEFAULT\n*\n*        ADD THE COMMAND BUFFER TO THE HEADING\n*\n         LH    R1,LINELEN    GET THE LINE LENGTHE\n         SH    R1,H32        MINUS SPACES FOR PAGE, START OF HDR\n         BNP   OUTOPEN       IF IT'S SHORT, SKIP ON\n         L     R14,ADDRCBUF  POINT TO THE COMMAND BUFFER\n         CH    R1,0(R14)     COMPARE LENGTHS\n         BL    CBUFBIG       THE COMMAND BUFFER TOO BIG\n         LH    R1,0(R14)     GET THE COMMAND BUFFER SIZE\nCBUFBIG  SH    R1,H5         MINUS 1 FOR EX, 4 FOR CBUF PREFIX\n         EX    R1,MOVEHED    MOVE THE CBUF TO THE DEFAULT HEADER\n         B     OUTOPEN        GO SET UP THE PAGE COUNTER\nUSERHEAD LH    R1,HEADING+4   GET THE LENGTH\n         BCTR  R1,0           MINUS ONE FOR THE EX\n         L     R2,HEADING     POINT TO THE USER HEAD\n         EX    R1,MOVEHEAD    THEN MOVE IT IN\nOUTOPEN  DS    0H\n*\n*        SET UP THE WORK LINE\n*\n         LH    R1,LINELEN    GET THE LINE LENGTH\n         LA    R1,4(R1)      ADD FOUR FOR THE PREFIX\n         STH   R1,WORKLINE   OUTPUT TEXT\n         STH   R1,PRNTTITH    ITEM TITLES\n*        GET THE PRINT SPECIFICATION\n*\n         LA    R1,DEFPRNT\n         ST    R1,VTPRNTLS   SAVE THE PRINT ITEM LIST ADDRESS\n         TM    SUBPRTKY+6,X'80'  WERE ANY ITEMS SET UP\n         BE    PRTITSET      NO, THE DEFAULT LIST IS OK\n*\n*        GET THE ADD, REPLACE, DELETE, AND NEW ITEMS\n*        AND BUILD THE NEW LIST\n*\n*        FIRST CONVERT THE ENTERED TEXT INTO NUMERIC KEYS\n*\n         LA    R4,SUBPRTIT   POINT TO THE ITEMS\n         LA    R5,VTPRNTEN   POINT TO THE OUTPUT KEYS\n         LA    R0,VTPRNTEX   POINT TO THE END OF THE LIST\nENTKEY   BAL   R8,GETKEY     GET A KEY\n         STC   R15,0(R5)     SAVE IT\n         LA    R5,1(R5)      GET TO THE NEXT ONE\n         CR    R0,R5         CHECK FOR THE END\n         BNH   ENTKEND       IF THAT'S ALL\n         ICM   R4,7,9(R4)    GET THE CHAIN POINTER\n         BNZ   ENTKEY        AND KEEP GOING IF THERE'S MORE\nENTKEND  DS    0H            THE KEYS ARE ENTERED INTO THE LIST\n*\n*        MERGE THE ENTERED ITEMS AND THE DEFAULT LIST INTO A NEW LIST\n*\n         LA    R6,VTPRNTL    POINT TO THE NEW LIST\n         ST    R6,VTPRNTLS   SAVE IT'S ADDRESS\n         LA    R4,VTPRNTEN   POINT TO THE ENTERED ITEMS\n         LA    R2,DEFPRNT    POINT TO THE DEFAULT LIST\n         LR    R3,R2         POINT TO THE BEGINNING - NO DEFAULT IF NEW\n         L     R1,SUBPRTKY   POINT TO THE KEYWORD\n         CLI   0(R1),C'N'    IS THIS A NEW LIST?\n         BE    PRTINEW       YES, SKIP PAST DEFAULT COPY\n         LA    R3,DEFPRNTE   POINT TO THE END OF THE DEFAULT LIST\n*\n*        ADD, REPLACE, DELETE - COPY THE DEFAULT LIST\n*\nPRTICOPY CR    R2,R3         IS THIS THE END OF THE DEFAULT LIST?\n         BNL   PRTITSET      YES, END OF PROCESSING FOR PRINT ITEMS\n*\n*        CHECK FOR ENTERED ITEMS THAT ARE ALSO\n*              IN THE DEFAULT LIST.\n*\nPRTICDLP CLC   0(1,R2),0(R4) IS THIS THE SAME ITEM\n         BE    PRTIFND       YES, SEE WHAT TO DO\n         LA    R4,1(R4)      NO, GET TO THE NEXT ITEM\n         CLI   0(R4),0       WAS THIS THE LAST ENTERED ITEM?\n         BNE   PRTICDLP      NO, KEEP LOOKING\n         LA    R4,VTPRNTEN   POINT BACK TO THE TOP OF THE LIST\n*\n*        ADD THIS ITEM TO THE NEW LIST\n*\nPRTICSKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\nPRTICDEL LA    R2,1(R2)      GO DOWN THE DEFAULT LIST\n         B     PRTICOPY      THEN KEEP ON CHECKING\n*\n*        AN ITEM WAS ENTERED AND WAS IN THE DEFAULT LIST\n*        FOR DELETE, JUST DELETE ITEMS\n*        FOR ADD AND REPLACE, DELETE ALL BUT THE FIRST ITEM\n*              TO AVOID DUPLICATES\n*              IF IT IS THE FIRST ITEM, INSERT THE ENTERED LIST\n*\nPRTIFND  LA    R0,VTPRNTEN   POINT TO THE FIRST ITEM\n         CR    R0,R4         COMPARE WITH THE ITEM FOUND\n         BH    PRTICDEL      NOT THE FIRST ITEM, DELETE IT\n         CLI   0(R1),C'D'    IS THIS DELETE TIME?\n         BE    PRTICDEL      THEN JUST DELETE IT\n         CLI   0(R1),C'R'    IS THIS A REPLACE?\n         BE    PRTIREPA      YES, IGNORE THIS DEFAULT ITEM\n*\n*        ADD THE DEFAULT ITEM FIRST\n*\nPRTIASKP MVC   0(1,R6),0(R2) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n*\n*        MOVE THE ITEMS IN FROM THE ADD OR REPLACE LIST\n*\nPRTIREPA LA    R2,1(R2)      GET PAST THE DEFAULT LIST ITEM\nPRTIREP  LA    R4,1(R4)      GET PAST THE FIRST ENTRY\nPRTINEXT CLI   0(R4),0       IS THIS THE LAST ITEM?\n         BE    PRTICOPY      YES, SEE ABOUT MORE DEFAULTS\n*\n*        ADD AN ENTERED ITEM TO THE LIST\n*\nPRTINSKP MVC   0(1,R6),0(R4) MOVE IN THE NEW KEY\n         LA    R6,1(R6)      POINT PAST IT\n         B     PRTIREP       GO GET MORE ENTERED ITEMS\n*\n*        NEW LIST, JUST USE IT AS ENTERED\n*\nPRTINEW  LA    R1,VTPRNTEN   POINT TO THE ENTERED LIST\n         ST    R1,VTPRNTLS   THEN SAVE ITS ADDRESS FOR LATER\nPRTITSET DS    0H\n*\n*        BUILD THE TITLE LINE FOR THE DSNAME FIELDS\n*\n         CLEAR PRNTTITL        BLANK OUT THE TITLE LINE\n         MVC   PRNTTITL+1(139),PRNTTITL  SO THE WHOLE THING IS GOOD\n         L     R2,VTPRNTLS   GET THE PRINT ITEM LIST\n         LA    R1,PRNTTITL    POINT TO THE TITLE LINE\nTITLOOP  SR    R6,R6          GET THE RESERVED WORD NUMBER\n         IC    R6,0(R2)       FROM THE TOP BYTE\n         MH    R6,H12         MULTIPLY BY 12 FOR THE TABLE ENTRIES\n         LA    R6,TABTITL(R6) THEN RELOCATE THE MESS\n         SR    R7,R7          CLEAR A REGISTER\n         IC    R7,0(R6)       GET THE EXECUTE LENGTH\n         EX    R7,MOVETIT     MOVE IN THE TITLE\n         LA    R1,1(R1,R7)    MOVE THE POINTER OVER\n         CLI   0(R2),CCHH     IS THIS THE CCHH KEY?                ABLC\n         BNE   *+8            NO, BRANCH                           ABLC\n         LA    R1,9(R1)       YES, ADD ANOTHER 8 CHARACTERS        ABLC\n         CLI   0(R2),DSNAME  IS THIS THE DSNAME KEY\n         BE    TITDSN        YES, SPECIAL PROCESSING\n         LA    R0,PRNTTITL    POINT TO THE BEGINNING AGAIN\n         SR    R1,R0          AND FIND THE CURRENT LENGTH\n         CH    R1,LINELEN     IS IT TOO LONG?\n         BNL   TITOVER        YES, PULL BACK\n         AR    R1,R0          NO, KEEP GOING\nTITINC   LA    R2,1(R2)            GET THE NEXT CHAIN POINTER\n         CLI   0(R2),0       ARE WE DONE?\n         BNE   TITLOOP        GO GET MORE TITLES\n         B     TITEND         ALL DONE\nTITDSN   LR    R6,R1         SAVE THE ADDRESS POINTER\n         LA    R1,DSNPLN     POINT TO THE PDL FOR DSN LENGTH\n         BAL   R8,PDLNUM     GO TRANSLATE IT\n         LTR   R15,R15       WAS IT THERE?\n         BP    TITDSN2       YES, USE IT\n         LA    R15,44        NO, SET THE DEFAULT\nTITDSN2  STH   R15,DSNLENGT  SAVE THE LENGTH\n         SH    R15,H9        SUBTRACT THE 9 CHARS MOVED ALREADY\n*              MINUS ONE FOR EX, PLUS ONE FOR SPACE\n         MVI   0(R6),C' '    GET AN INITIAL BLANK\n         EX    R15,DSNBLMOV  MOVE IN THE BLANKS\n         LA    R1,1(R15,R6)  RESET THE POINTER ( INCLUDE A SPACE )\n         LA    R15,1(R15)    ADD ON THE SPACE CHARACTER\n         STH   R15,DSNLENOF  SAVE THE OFFSET\n         B     TITINC        ALLOW DSNAME TO OVERFLOW THE LINE\n*\n*        TITLE RAN OFF THE END, CUT IT OFF\n*\nTITOVER  SR    R1,R7          SUBTRACT PAST THIS FIELD\n         AR    R1,R0          RELOCATE IT\n         BCTR  R1,0           THEN GET THE LAST CHARACTER\n         MVC   0(9,R1),BLANKS THEN BLANK IT OUT\nTITEND   TM    SYSOUT+48,X'10' IS THE DCB OPEN\n         BNO   CKOUTPT       NO, TERMINAL OUTPUT, NO CC\n         MVI   PRNTTITL,C'0'  ALWAYS SKIP A LINE FOR IT\nCKOUTPT  CLI   OUTPUTK+1,1    OUTPUT THIS RUN?\n         BNE   VTRET          YES, SKIP THE OPEN, JUST RETURN\n         MVC   OUTDCB(OUTDCBL),OUTDCBC  INITIALIZE THE DCB\n         MVI   OPENLIST,X'80' TERMINATE THE LIST\n         OPEN  (OUTDCB,OUTPUT),MF=(E,OPENLIST)  OPEN THE DATA SET DCB\n         B     VTRET          RETURN, INITIALIZATION IS DONE\n         EJECT\n*\n*        ROUTINE TO CONVERT A TEXT DSCB ITEM\n*        INTO ITS KEY NUMBER\n*        INPUT IS REG 4 - IKJIDENT PTR\n*        OUTPUT IS REG 15 - KEY NUMBER\n*        ENTRY VIA BAL   R8,GETKEY\n*\nGETKEY   L     R1,ATABTITL     POINT TO THE TABLE\n         LA    R1,12(R1)     POINT TO THE FIRST ENTRY\n         LA    R15,1           SET UP THE KEY NUMBER COUNTER\n         L     R6,0(R4)      POINT TO THE ENTERED TEXT\n         SR    R3,R3         CLEAR R6                           ABL-EX\n         ICM   R3,3,4(R4)    GET THE LENGTH OF THE ENTERED TEXT\n         BNP   GETKNOTF      NOT FOUND IF ZERO\n         BCTR  R3,0          MINUS ONE FOR THE EX\nGETKLOOP LA    R2,4(R1)      POINT TO THE COMPARISON TEXT\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\n         CLI   0(R2),C' '    IS IT HERE?\n         BNE   GETKSTD       YES, THIS IS IT\n         LA    R2,1(R2)      NO, MOVE OVER ONE MORE\nGETKSTD  EX    R3,GETKCOMP   COMPARE THE KEY TEXT\n         BNE   GETNFND       NOT HERE, BRANCH                   ABL-EXT\n*        CLC   =C'EX ',0(R6) EX (FOR EXTENTS)?                  ABL-EXT\n***TEST  CLC   =C'EX',0(R2)  EX (FOR EXTENTS)?                  HXF-ALL\n         CH    R3,=H'1'      EX (FOR EXTENTS)?                  ABL-EX\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         CLC   =C'EXP',0(R2) EXP (FOR EXPDT)?                   ABL-EXT\n         BNE   GETKFND       I FOUND IT                         ABL-EXT\n         SPACE 1                                                ABL-EXT\nGETNFND  DS    0H                                               ABL-EXT\n         LA    R1,12(R1)     GET TO THE NEXT KEY\n         LA    R15,1(R15)    INCREMENT THE KEY COUNTER\n         CH    R15,TAB#ENTS  CHECK FOR THE END OF THE TABLE\n         BNH   GETKLOOP      NOT YET, KEEP LOOKING\n*\n*        KEY WAS NOT FOUND, SEND BACK A ZERO\n*\nGETKNOTF SR    R15,R15       SET UP THE ZERO AND RETURN\nGETKFND  BR    R8            JUST RETURN\nGETKCOMP CLC   0(0,R6),0(R2) EXECUTED TEXT COMPARE\n         EJECT\n*  DCB EXIT ROUTINES.\n*\n*        CHOOSE A GOOD BLOCKSIZE FOR THE INCOMING LRECL.  IF THERE IS\n*        ALREADY A BLOCKSIZE SPECIFIED, USE IT INSTEAD, IF IT IS GOOD.\n*\n*   GENERAL NOTES:\n*       R1 = ADDR(DCB) FOR THE CURRENT DCB.  THIS MEANS THAT THE SAME\n*            EXIT ROUTINE COULD BE USED FOR MULTIPLE DATASETS.\n*       R14 = RETURN ADDRESS.  ALL OTHER REGISTERS WILL BE RESTORED\n*            AS BEFORE THE EXIT WAS ENTERED.\n*\n*        SINCE I DON'T KNOW WHAT REGISTERS ARE BEING USE FOR WHAT,\n*        I LOAD A NEW BASE REGISTER AND PUSH AND POP THE USINGS.\n*\n*\n         PUSH  USING\n         DROP\n         SPACE 3\nUSEBLK   DS    0D                  USE INPUT LRECL AND/OR BLKSIZE\n*                                  FOR OUTPUT UNLESS ALREADY SPECIFIED\n         BALR  R12,0               SET ADDRESSABILITY\n         USING *,R12\n         USING IHADCB,R1\n         XR    R3,R3               ZERO OUT R3\n         ICM   R3,B'0011',DCBBLKSI BLKSIZE IN JCL OR DSCB?\n         BNZ   USEJCL                YES, SEE IF IT IS GOOD\n         LH    R3,TARGET             NO, LOAD TARGET BLOCKSIZE\nUSEJCL   DS    0H\n         TM    DCBRECFM,DCBRECV    VARIABLE?\n         BO    GOTVAR                YES, BLKSIZE NOT NEC MULT OF LRECL\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,TARGET             YES, MAYBE IT WAS FROM JCL\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,HALFTRK            YES, TRY HALF TRACK\n         CH    R3,DCBLRECL         LRECL > TARGET?\n         BNL   USETGT                NO, ALL OKAY\n         LH    R3,DCBLRECL         YES, USE BLKSIZE=LRECL\n         B     USEIT\nUSETGT   DS    0H\n         LH    R4,DCBLRECL         FIND BLKSIZE MULT OF LRECL AND\n         XR    R2,R2               NOT GREATER THAN TARGET BLOCKSIZE\n         DR    R2,R4\n         MR    R2,R4               GREATEST MULTIPLE OF LRECL <= TARGET\nUSEIT    DS    0H\n         STH   R3,DCBBLKSI         AND PUT IT IN BLOCKSIZE FIELD\n         BR    R14                 RETURN\n         SPACE 3\nGOTVAR   DS    0H                  DETERMINE BLOCKSIZE FOR VB OUTPUT\n         CLC   DCBLRECL,TARGETV    TARGET GOOD ENOUGH?\n         BNH   USEIT                 YES\n         TM    DCBRECFM,DCBRECSB   SPANNED RECORDS?\n         BO    USEIT                 YES\n         CLC   DCBLRECL,HALFTRKV     HALF-TRACK 3380 OKAY?\n         BH    THIRTY2               NO\n         LH    R3,HALFTRK            YES\n         B     USEIT\nTHIRTY2  DS    0H\n         LH    R3,MAXBLOCK         MAX SIZE FOR BLOCKSIZE\n         B     USEIT\n         SPACE 1\nDFACONST DC    CL4'DFA '\nMAXBLOCK DC    H'32760'\nHALFTRK  DC    H'23476'            HALF TRACK ON 3380 (SMALLER DEVICE)\nHALFTRKV DC    H'23472'            MAX LRECL FOR VARIABLE HALF TRACK\nTARGET   DC    H'8906'             GOOD FOR 3380 AND 3390\nTARGETV  DC    H'8902'             MAX LRECL FOR VARIABLE AT TARGET\nTHREE    DC    F'3'                CONSTANT\n         SPACE 1\n         POP   USING\n         EJECT\n*\n*        PROGRAM CONSTANTS\n*\nZERO     DC    F'0'\nF100     DC    F'100'\nF127     DC    F'127'\nDEFLMAX  DC    H'60'          DEFAULT LINES PER PAGE\nDEFLEN   DC    H'132'         DEFAULT CHARS PER LINE\nH2       DC    H'2'\nH5       DC    H'5'\nH9       DC    H'9'\nH10      DC    H'10'\nH12      DC    H'12'\nH18      DC    H'18'\nH32      DC    H'32'\nMOVETIT  MVC   0(0,R1),3(R6)  MOVE IN THE TITLE\nCOMPKEY  CLC   0(0,R1),VTFDSN  EXECUTED COMPARE\nMOVEHEAD MVC   PRNTHEAD(0),0(R2)\nMOVEHED  MVC   PRNTHEAD+21(0),4(R14)  MOVE CMD BUF TO DEFAULT HEADER\nDSNBLMOV MVC   1(0,R6),0(R6)  BLANK OUT THE DSN SPACE IN THE TITLE\nCPAGE    DC    C'PAGE'\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDMASK0  DC    XL16'F0202020202020202020202020202120'\nSKIP     DC    C'0'\nCOMP0    DC    CL16'0000000000000000'\nBLANKS   DC    CL16'                '\nSTARS    DC    CL16'****************'\nTABSPACE DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'KBYTES'                                LMB 1/4/83\n         DC    CL8'MBYTES'                                LMB 1/4/83\n         DC    CL8'TRKS  '                                LMB 1/4/83\n         DC    CL8'CYLS  '                                LMB 1/4/83\n*\n         PRINT NOGEN\nOUTLST   DC    X'85',AL3(USEBLK)                                TANSKY\nSYSOUTC  DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,EXLST=OUTLST                 TANSKY\nOUTDCBC  DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,EXLST=OUTLST                  TANSKY\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         SPACE\nMSGTOTC  MSGZ  '  TOTALS - NNNNN DATA SETS, MMMMMMMM UUUUUU ALLOC, LLLLX\n               LLLL UUUUUU USED '\nMSGTLEN  EQU   *-MSGTOTC\nMSGBLC   MSGZ  '                '\n*\nDEFHEAD  DC    CL20'1 VTOC COMMAND  V-77'\n*\n*        DEFAULT PRINT LIST\n*\nDEFPRNT  DC    AL1(ALLOC)\n         DC    AL1(UNUSED)\n         DC    AL1(PCT)\n         DC    AL1(EXT)\n         DC    AL1(DSORG)\n         DC    AL1(RECFM)\n         DC    AL1(LRECL)\n         DC    AL1(BLKSZ)\n         DC    AL1(CDATE)\n         DC    AL1(LSTUS)\n         DC    AL1(VOLUME)\n         DC    AL1(DSNAME)\n         DC    AL1(EXPDT)\n         DC    AL1(SECQ)\n         DC    AL1(SECT)\n         DC    AL1(ROUND)\n         DC    AL1(PASS)\n         DC    AL1(ACTION)\n         DC    AL1(TYPE)\n         DC    AL1(0)        END OF THE LIST\nDEFPRNTE EQU   *\nDEFPRNTL EQU   *-DEFPRNT\n*\n*        TABLE OF PRINT ITEM LENGTHS AND TITLES\n*\n*        ENTRIES IN THE TABLE FOR EACH FORMATTED ITEM -\n*        FIRST BYTE IS FIELD LENGTH FOR OUTPUT ( MINUS ONE FOR EX )\n*        SECOND BYTE - X'80' BIT INDICATES A CHARACTER FIELD\n*                            THEN BITS 0-7 GIVE VTFMT LENGTH\n*                      OTHERWISE IT'S A KEY TO WHICH ROUTINE TO USE\n*        THIRD BYTE - OFFSET IN FORMATTED DSCB, VTFMT\n*        4-12 TH BYTES, THE TITLE FOR THE FIELD\n*\n*\nTABTITL  DC    XL12'00'  DUMMY ENTRY FOR 0 ADDRESSING\n         DC    AL1(8),AL1(128+7),AL1(VTFACTON-VTFMT),CL9' ACTION  '  1\n         DC    AL1(6),AL1(128+5),AL1(VTFVOLUM-VTFMT),CL9' VOLUME  '  2\n         DC    AL1(5),AL1(000+4),AL1(VTFCREDT-VTFMT),CL9' CDATE   '  3\n         DC    AL1(5),AL1(000+4),AL1(VTFLSTAC-VTFMT),CL9' REFDT   '  4\n         DC    AL1(5),AL1(000+4),AL1(VTFEXPDT-VTFMT),CL9' EXPDT   '  5\n         DC    AL1(7),AL1(00+12),AL1(VTFALLOC-VTFMT),CL9'   ALLOC '  6\n*                                                               HXF-ALL\n         DC    AL1(7),AL1(00+16),AL1(VTFALLOC-VTFMT),CL9'  UNUSED '  7\n*                                                               HXF-ALL\n         DC    AL1(3),AL1(00+20),AL1(VTFALLOC-VTFMT),CL9' PCT     '  8\n         DC    AL1(2),AL1(00+24),AL1(VTFNOEPV-VTFMT),CL9' EX      '  9\n         DC    AL1(3),AL1(128+2),AL1(VTFDSORG-VTFMT),CL9' DSO     ' 10\n         DC    AL1(3),AL1(128+3),AL1(VTFRECFM-VTFMT),CL9' RFM     ' 11\n         DC    AL1(5),AL1(00+28),AL1(VTFBLKSZ-VTFMT),CL9' BLKSZ   ' 12\n         DC    AL1(5),AL1(00+28),AL1(VTFLRECL-VTFMT),CL9' LRECL   ' 13\n         DC    AL1(4),AL1(128+0),AL01(VTFPROT-VTFMT),CL9' PASS    ' 14\n         DC    AL1(3),AL1(128+0),AL1(VTFCATLG-VTFMT),CL9' CAT     ' 15\n         DC    AL1(4),AL1(128+0),AL1(VTFSECAL-VTFMT),CL9' SECT    ' 16\n         DC    AL1(5),AL1(00+28),AL1(VTFSECAM-VTFMT),CL9'  SECQ   ' 17\n* LINE BELOW                                                    TANSKY\n         DC    AL1(4),AL1(128+3),AL1(VTFUNIT-VTFMT),CL9' UNIT    '  18\n         DC    AL1(3),AL1(128+0),AL1(VTFROUND-VTFMT),CL9' RND     ' 19\n*                                                               HXF-ALL\n         DC    AL1(4),AL1(128+0),AL1(VTFDSTYP-VTFMT),CL9' TYPE    ' 20\n* LINE BELOW                                                    TANSKY\n         DC    AL1(7),AL1(00+12),AL1(VTFUSED-VTFMT),CL9'   USED  '  21\n* LINE BELOW                                                      ABLC\n         DC    AL1(8),AL1(00+36),AL1(VTFCCHH-VTFMT),CL9' CCHH    '  22\n* 2 LINES BELOW                                                 TANSKY\n         DC    AL1(3),AL1(128+0),AL1(VTFUPD-VTFMT),CL9' UPD     '   23\n         DC    AL1(4),AL1(128+0),AL1(VTFRACF-VTFMT),CL9' RACF    '  24\n         DC    AL1(3),AL1(128+0),AL1(VTFENQ-VTFMT),CL9' ENQ     ' *DHC*\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY4  ' 26\n         DC    AL1(6),AL1(128+0),AL1(VTFVOLUM-VTFMT),CL9' DUMMY5  ' 27\n         DC    AL1(8),AL1(00+32),AL001(VTFDSN-VTFMT),CL9' DSNAME  ' 28\nTAB#ENTS DC    H'28'\n*  DON'T FORGET TO UPDATE VTOCPARS IF YOU ADD OR SUBTRACT       TANSKY\n*  ENTRIES TO THE ABOVE TABLE.                                  TANSKY\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nPRNTWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nTOTDS    DS    F              TOTAL COUNTER\nTOTALLOC DS    F              TOTAL ALLOCATION\nTOTUSED  DS    F              TOTAL USED\nFTOTDS   DS    F              FINAL TOTAL DATA SETS\nFTOTALLC DS    F              FINAL TOTAL ALLOC\nFTOTUSED DS    F              FINAL TOTAL USED\nPRNTLSAV DS    A\nPRINTR8  DS    A\nPRNTTOT8 DS    A\nADDREND  DS    A\nPAGEADDR DS    A\nOPENLIST DS    2A             PARM LIST FOR OPEN\nPDLNSAVE DS    8A             REGISTER SAVE AREA FOR PDLNUM RTN\nPRTLSAVE DS    8A             REGISTER SAVE AREA FOR PRNTLINE RTN\nLASTKEY  DS    A              ADDRESS OF LAST KEY FOR SUBTOTALS, BREAKS\nNUMBREAK DS    H              CHARACTERS TO COMPARE FOR BREAK\nNUMTOTAL DS    H              CHARACTERS TO COMPARE FOR SUBTOTALS\n         PRINT NOGEN\nSYSOUT   DCB   DSORG=PS,DDNAME=VTOCOUT,MACRF=PM,                       X\n               RECFM=FBA,LRECL=150,EXLST=OUTLST                 TANSKY\nSYSOUTL  EQU   *-SYSOUT\nOUTDCB   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               RECFM=FB,LRECL=100,EXLST=OUTLST                  TANSKY\nOUTDCBL  EQU   *-OUTDCB\nENDTOTAL DS    X              PROGRAM SWITCHES\nENTOTOUT EQU   X'80'          THE FINAL TOTALS HAVE BEEN OUTPUT\nENDTONLY EQU   X'10'          NO SUBTOTALS, END TOTALS ONLY\nNOBREAK  EQU   X'08'          NO BREAKS\nFIRSTIM  DS    X              INITIALIZATION FOR THIS ROUTINE\nPDLMINUS DC    X'00'\nTOTLAST  DS    X\nSPACTYPE DS    CL6          CHARACTERS FOR SPACE UNITS\nDSNLENGT DS    H\nDSNLENOF DS    H\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nMSGWORK  DS    CL256          AREA FOR BUILDING MESSAGES\nWORKLINE DS    CL256          AREA FOR DATA SET\nPRNTHDRH DS    F\nPRNTHEAD DS    CL256          AREA FOR HEADER\nPRNTTITH DS    F\nPRNTTITL DS    CL256          AREA FOR ITEM TITLES\nMSGBL    DS    CL20           AREA FOR BLANK LINE\nOUTWORK  DS    CL256          WORKING AREA FOR OUTPUT\nDCBEXIT  DS    2F                                               TANSKY\nJFCB     DS    XL176\n         SPACE\nVTPRNTLS DS    A             PRINT ITEM LIST ADDRESS\nVTPRNTL  DS    40C           PRINT ITEM LIST ( IF MODIFIED )\nVTPRNTEN DS    40C\nVTPRNTEX DS    C\n         SPACE\n         DS    0D\nLENWORK  EQU   *-PRNTWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         VTFMT\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\nDUMMD    DSECT\nDUMMA    DS    C              DUMMY ENTRY TO USE FOR CONV\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XXXX0001": {"ttr": 8452, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VTOCFORM TITLE 'VTOC COMMAND FORMAT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND FORMAT ROUTINE                            *\n*                                                                     *\n* FUNCTION -   FORMAT THE DATA INTO THE VTFMT  DSECT FROM THE         *\n*              FORMAT 1 ( AND 3 IF NEEDED ) DSCB.  THIS ROUTINE       *\n*              ALSO GETS THE AREA TO CONTAIN THE FORMATTED            *\n*              DSCB INFORMATION.                                      *\n*                                                                     *\n* OPERATION -  FIRST GET AN AREA FROM THE CURRENT BLOCK, OR GET       *\n*              A BLOCK ( 32K ) OF STORAGE TO USE FOR THE FORMATTED    *\n*              DSCB'S.  MOVE THE DATA OVER FROM THE FORMAT 1 DSCB.    *\n*              THE SPACE CALCULATIONS MAY NEED THE FORMAT 3 DSCB.     *\n*              CATALOG INFORMATION IS OBTIANED VIA LOCATE.  SOME      *\n*              OF THE DSCB INFORMATION IS CONVERTED HERE.             *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, LOCATE         *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB INFORMATION WITH ITS ADDRESS IN     *\n*              FORMATAD.                                              *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n* 1/04/83 - UPDATED BY LAUREEN BEAUCHAINE - CBT:          LMB 1/4/83  *\n*         - UPDATED TO USE KEYWORDS: CYLS/KBYTES/MBYTES   LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO SUPPORT   ABL-ICF\n*           123 EXTENTS FOR VSAM DATA SETS IN AN ICF CATALOG.   ABL-ICF\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO DOUBLE    ABL-GET\n*           THE NUMBER OF DATA SETS PROCESSED (TO 3.2 MEG).     ABL-GET\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO PERFORM   ABL-SOR\n*           A CORRECT SORT (ADD 1 BLANK AFTER EACH DSNAME).     ABL-SOR\n*                                                                     *\n* 5/11/90 - MODIFIED BY TOM ROMANO OF AETNA LIFE TO PROPERLY  TXR 05/90\n*           REPORT A CATALOG ERROR.                           TXR 05/90\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO MAKE ALL VSAM  TANSKY*\n*           DATASETS \"FULL\" INSTEAD OF 0% USED.                 TANSKY*\n*         - ADDED UPD AND RACF INDICATORS AND OPTIONS           TANSKY*\n*                                                                     *\n*11/25/92 - MODIFIED BY A. BRUCE LELAND AT SERENA TO SET     ABL NOV92*\n*           DSORG TO \"PE\" FOR A PDSE DATA SET.               ABL NOV92*\n*                                                                     *\n*08/09/94 - MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ADD         JVH-DSO\n*           SUPPORT FOR HIERARCHIAL DATASETS (HFS) AND          JVH-DSO\n*           EXTENDED MODE SMS DATASETS.                         JVH-DSO\n*                                                                     *\n*                                                                     *\n*14/08/01 - MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD.          *DHC*\n*           INCLUDE CODE TO TEST IF DATASETS ARE IN USE BY        *DHC*\n*           CHECKING THE MAJOR NAME SYSDSN WITH A MINOR NAME OF   *DHC*\n*           THE DATASET NAME OR CLUSTER NAME IF VSAM.             *DHC*\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         MACRO\n&LAB     DS1TST  &FIELD,&VALUE,&CODE\n&LAB     TM    DS1&FIELD,X'&VALUE'  TEST IT\n         BNO   D&SYSNDX       IF NOT THERE, SKIP ALONG\n         MVC   VTF&FIELD,=CL3'&CODE'\nD&SYSNDX DS    0H\n         MEND\n*\n*\n         EJECT\nVTOCFORM ENTER 12,16          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING FORMWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, PERFORM SOME INITIALIZATION\n*\n         CLI   FIRSTFRM,0     IS THIS THE FIRST TIME?\n         BNE   GETAREA        NO, KEEP ON TRUCKIN'\n         EJECT ,                                                  *DHC*\n***********************************************************************\n*        PERFORM INITIAL HOUSEKEEPING.                            *DHC*\n***********************************************************************\n         SPACE 1                                                  *DHC*\n         L     R0,SRESULT          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,ARESULT          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         L     R0,SS26WRK          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,AS26WRK          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         SPACE 1                                                  *DHC*\n*\n*        ROUTINE INITIALIZATION\n*\n         MVI   FIRSTFRM,255   NOTE THE INITIALIZATION AS DONE\n         MVC   CAMLOC(CAMLEN),CAMCONST  SET UP THE CAMLST\n*\n*        FIND OR GET AN AREA FOR THE FORMATTED DSCB\n*              FIRST SEE HOW BIG IT IS\n*\nGETAREA  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         LH    R1,DSNLEN     GET THE DSNAME LENGTH\n         LA    R4,VTFMTL+1(R1)  GET FORMATTED DSCB LENGTH       ABL-SOR\n*\n*        SEE IF THE CURRENT BLOCK CAN HANDLE IT\n*\nFORMFIT  L     R3,VTCCURLN    GET THE CURRENT AVAILABLE\n         SR    R3,R4          SEE IF IT WILL FIT\n         BM    GOGETMN        NO, GET ANOTHER BLOCK\n*\n*        NO SWEAT, GET THE SPACE FROM THIS BLOCK\n*\n         ST    R3,VTCCURLN    STORE THE NEW ( REDUCED ) CURRENT LENGTH\n         L     R3,VTCCURAD    POINT TO THE CURRENT ADDRESS\n         LA    R5,0(R3,R4)    POINT TO THE END OF THE BLOCK\n         ST    R5,VTCCURAD    AND PLACE THE NEW AVAILABLE ADDRESS\n*\n*        NOW FILL IN THE DATA IN THE FORMATTED DSCB\n*\n         USING VTFMT,R3       SET FORMATTED DSCB ADDRESSABILITY\n         ST    R3,FORMATAD    SAVE THIS BLOCK'S ADDRESS\n         XC    VTFNEXT,VTFNEXT  CLEAR THE SORT POINTER\n         MVC   VTFVOLUM,VOLID SAVE THE VOLUME SERIAL NUMBER\n         MVC   VTFUNIT,UCBDEVT SAVE THE DEVICE TYPE\n         LH    R1,DSNLEN     GET THE LENGTH OF THE DSNAME\n         STH   R1,VTFDSNL     SAVE THE DSNAME LENGTH\n***      BCTR  R1,0           ***MOVE THE NEXT BLANK TOO        ABL-SOR\n         EX    R1,MOVEDSN     MOVE IN THE DSNAME\n         MVC   VTFNOEPV,DS1NOEPV  NUMBER OF EXTENTS\n         MVC   VTFLRECL,DS1LRECL  LOGICAL RECORD LENGTH\n         MVC   VTFBLKSZ,DS1BLKL   BLOCK SIZE\n         MVC   VTFCCHH(8),VTC#CCHH  MOVE IN SELECTED CCHH          ABLC\n*\n*     MOVE IN THE CREATION DATE, EXPIRATION DATE, AND LAST ACCESS DATE\n*\n         MVC   VTFCREDT,DS1CREDT  MOVE OVER CREATION DATE\n         MVC   VTFEXPDT,DS1EXPDT  MOVE OVER EXPIRATION DATE\n         MVC   VTFLSTAC,DS1REFD   MOVE OVER LAST ACCESS DATE\n*\n*        FORMAT THE RECORD FORMAT INTO CHARACTERS\n*\n*\n         MVC   VTFRECFM,BLANKS  BLANK THE FIELD TO START\n         MVC   VTFACTON,BLANKS  ANOTHER BLANK FIELD\n         MVI   VTFDSTYP,C' ' AND STILL ANOTHER\n         LA    R2,VTFRECFM    POINT TO THE FIELD\n         TM    DS1RECFM,X'C0' UNKNOWN RECFM?\n         BZ    RECFM2         YES, TROUBLE\n         TM    DS1RECFM,X'40' IS IT FIXED?\n         BNZ   RECFM3         NO, KEEP TRYING\n         MVI   0(R2),C'F'     YES, SET UP THE FIRST CHAR\n         LA    R2,1(R2)       AND BUMP THE POINTER\n         B     RECFM2         CHECK OTHER ATTRIBUTES\nRECFM3   TM    DS1RECFM,X'80' SEE IF IT'S V OR U\n         BZ    RECFM4         VARIABLE RECFM\n         MVI   0(R2),C'U'     RECFM = U\n         B     RECFM4A        ADD TO THE POINTER AND KEEP LOOKING\nRECFM4   MVI   0(R2),C'V'     VARIABLE\nRECFM4A  LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM2   DS    0H\nRECFM5   TM    DS1RECFM,X'10' IS IT BLOCKED?\n         BZ    RECFM6         NO, SKIP ON\n         MVI   0(R2),C'B'     YES, SET THE SYMBOL\n         LA    R2,1(R2)       GET PAST THE CHAR\nRECFM6   TM    DS1RECFM,X'08' IS IT SPANNED OR STANDARD?\n         BZ    RECFM6A        NO\n         MVI   0(R2),C'S'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHARACTER\nRECFM6A  TM    DS1RECFM,X'20' CHECK TRACK OVERFLOW\n         BZ    RECFM7         NO DICE\n         MVI   0(R2),C'T'     YES, SET IT\n         LA    R2,1(R2)       PUSH THE POINTER ON\nRECFM7   TM    DS1RECFM,X'04' IS IT ASA CONTROL\n         BZ    RECFM8         NO, SKIP ON\n         MVI   0(R2),C'A'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM8   TM    DS1RECFM,X'02' HOW ABOUT MACHINE CARRIAGE CONTROL\n         BZ    RECFM9         NO, SKIP ON\n         MVI   0(R2),C'M'     YES, SET IT\nRECFM9   DS    0H\n*\n*        FORMAT THE DSORG\n*\n         MVC   VTFDSORG,=CL3'   '  CLEAR THE FIELD\n         DS1TST DSORG,80,IS   TRY ISAM\n         DS1TST DSORG,40,PS   TRY SEQUENTIAL\n         DS1TST DSORG,20,DA   TRY DIRECT ACCESS\n         DS1TST DSORG,02,PO   TRY PARTITIONED\n         TM    DS1DSORG,X'02'     A PDS OR A PDSE?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         TM    DS1REFD+3,X'08'    A PDSE DATA SET?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         MVC   VTFDSORG,=CL3'PE ' YES, MARK AS A PDSE         ABL NOV92\nDSORG04  TM    DS1REFD+3,X'02'    A HFS DATASET?                JVH-DSO\n         BNO   DSORG05            NO, BRANCH                    JVH-DSO\n         MVC   VTFDSORG,=CL3'HF ' YES, MARK AS AN HFS           JVH-DSO\nDSORG05  CLC   DS1DSORG(2),=X'0008'  IS IT VSAM?                JVH-DSO\n         BNE   DSORG06            NO, KEEP LOOKING              JVH-DSO\n         MVC   VTFDSORG,=CL3'VS ' YES, FLAG IT                  JVH-DSO\nDSORG06  TM    DS1DSORG,X'01'     IS IT UNMOVEABLE?             JVH-DSO\n         BNO   DSORG07            NO, KEEP ON TRUCKIN'          JVH-DSO\n         MVI   VTFDSORG+2,C'U'    YES, NOTE IT                  JVH-DSO\nDSORG07  TM    DS1REFD+3,X'04'    AN EXTENDED FORMAT DATASET?   JVH-DSO\n         BNO   DSORG08            NO, BRANCH                    JVH-DSO\n         MVI   VTFDSORG+2,C'X'    YES, NOTE IT                  JVH-DSO\nDSORG08  DS    0H                                               JVH-DSO\n*\n*        FORMAT THE SECONDARY ALLOCATION\n*\n         SR    R1,R1          CLEAR A WORK REGISTER\n         IC    R1,DS1SCALO    GET THE ALLOCATION FLAG\n         SRL   R1,6           REMOVE THE BOTTOM 6 BITS ( 75 CENTS )\n         IC    R2,SECAL(R1)   GET THE CHARACTER CODE\n         STC   R2,VTFSECAL    AND SAVE IT FOR LATER\n         MVC   VTFSECAM,DS1SCALO+2  SAVE THE SECONDARY AMOUNT TOO\n         MVI   VTFROUND,C'N'  SET CODE FOR NO ROUND\n         TM    DS1SCALO,X'01' SEE IF ROUND WAS SET\n         BNO   PROTFORM       NO, THE CODE IS SET RIGHT\n         MVI   VTFROUND,C'R'  YES, RESET THE CODE\n*\n*        FORMAT THE PASSWORD PROTECTION\n*\nPROTFORM TM    DS1DSIND,X'14' CHECK THE PASSWORD BITS\n         BO    PROTWRIT       WRITE PROTECT IS X'14'\n         BM    PROTREAD       READ PROTECT IS X'10'\n         MVI   VTFPROT,C'N'   NO PASSWORD PROTECTION\n         B     PROTEND        END OF PROTECTION FORMATTING\nPROTWRIT MVI   VTFPROT,C'W'   SET CODE FOR WRITE PROTECT\n         B     PROTEND        THEN CHECK OTHER ITEMS\nPROTREAD MVI   VTFPROT,C'R'   SET CODE FOR READ/WRITE PROTECT\nPROTEND  DS    0H             END OF PROTECTION FORMATTING\n*                                                               TANSKY\n*        FORMAT THE RACF INDICATOR                              TANSKY\n*                                                               TANSKY\n         MVI   VTFRACF,C'N'        ASSUME NOT RACF INDICATED    TANSKY\n         TM    DS1DSIND,DS1IND40   RACF IND?                    TANSKY\n         BNO   RACFEND               NO, WE'RE RIGHT            TANSKY\n         MVI   VTFRACF,C'Y'        YES, SHOW IT                 TANSKY\nRACFEND  DS    0H                                               TANSKY\n*                                                               TANSKY\n*        FORMAT THE UPDATED INDICATOR                           TANSKY\n*                                                               TANSKY\n         MVI   VTFUPD,C'N'         ASSUME NOT UPDATED           TANSKY\n         TM    DS1DSIND,DS1IND02   UPDATED?                     TANSKY\n         BNO   UPDEND                NO, WE'RE RIGHT            TANSKY\n         MVI   VTFUPD,C'Y'         YES, SHOW IT                 TANSKY\nUPDEND   DS    0H                                               TANSKY\n*\n*        FORMAT THE CATLG\n*\n         MVI   VTFCATLG,C' ' INITIALIZE IT TO BLANKS\n         CLI   CATK+1,0       SHOULD WE DO THE LOCATE?\n         BE    CATEND         NO, SKIP PAST IT\n*\n*        SET UP THE CAMLST\n*\n         LA    R1,DS1DSNAM    POINT TO THE DSNAME\n         ST    R1,CAMLOC+4    SAVE IT IN THE CAMLST\n         LA    R1,LOCWORK     LOCATE WORKAREA\n         ST    R1,CAMLOC+12   SAVE IT IN THE CAMLST\n         LOCATE CAMLOC        CHECK THE CATALOG\n         LTR   R15,R15        TEST THE CATALOG RETURN CODE\n         BZ    CATOK          ZERO, THERE IS AN ENTRY\n         MVI   VTFCATLG,C'N'  SET CODE FOR NOT CATALOGED\n         CH    R15,H8         SEE IF THAT'S THE CASE\n         BE    CATEND         YES, LET IT STAND\n         MVI   VTFCATLG,C'E'  CATALOG ERROR, PROBLEMS\n         B     CATEND         YES, LET IT STAND         TXR 05/90\n*\n*        CATALOG ENTRY IS THERE, SEE THAT THE VOLUME IS THIS ONE\n*\nCATOK    MVI   VTFCATLG,C'C'  SET UP AS A GOOD ENTRY\n         CLC   VOLID,LOCWORK+6  COMPARE THE VOLUME SERIAL NUMBERS\n         BE    CATEND         GOOD, WE'RE DONE\n         SPACE 1                                               ABL-MCAT\n         LH    R1,LOCWORK     NUMBER OF ENTRIES                ABL-MCAT\n         LA    R14,LOCWORK+6  FIRST ENTRY TO COMPARE           ABL-MCAT\nCATNXT   CLC   VOLID,0(R14)   THIS VOLUME SERICAL ?            ABL-MCAT\n         BE    CATEND         YES, IT IS CATALOGED CORRECTLY   ABL-MCAT\n         LA    R14,12(,R14)   NEXT VOLUME NAME IN THE LIST     ABL-MCAT\n         BCT   R1,CATNXT      CHECK NEXT VOLUME                ABL-MCAT\n         SPACE 1                                               ABL-MCAT\n         MVI   VTFCATLG,C'W'  WRONG VOLUME, NOT CATALOGED\nCATEND   DS    0H\n         COPY  VTOCENQ             TEST IF ALLOCATED           *DHC*\n*\n*        FORMAT THE ALLOCATION AND USED QUANTITIES\n*\n         SPACE\n*        CHECK THROUGH THE EXTENTS\n         SPACE\n         SR    R2,R2          CLEAR A WORK REGISTER\n         ICM   R2,B'0001',DS1NOEPV  GET THE NUMBER OF EXTENTS\n         BZ    SPACEND        NO EXTENTS MEANS NO SPACE\n         SR    R4,R4          ZERO THE SPACE COUNTER FOR THE DATA SET\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n         SR    R6,R6          FIRST EXTENT\nEXTNEXT  LR    R14,R6                                           ABL-ICF\n         S     R14,=F'3'                                        ABL-ICF\n         SRDA  R14,32                                           ABL-ICF\n         D     R14,=F'13'     (EXTENT-3) / 13                   ABL-ICF\n         LR    R14,R15        EXTENT TABLE IN USE               ABL-ICF\n         MH    R14,=H'13'                                       ABL-ICF\n         MH    R15,=H'148'                                      ABL-ICF\n         LR    R5,R6          EXTENT - ((EXTENT-3) / 13) * 13   ABL-ICF\n         SR    R5,R14         EXTENT INSTRUCTION ADDRESS        ABL-ICF\n         SLL   R5,2           MULTIPLY IT BY FOUR\n         EX    R0,GETEXT(R5)  GET THE CORRECT ADDRESS\n*\n*        PROCESS THIS EXTENT\n*\n         USING XTDSECT,R5     SET ADDRESSABILITY\n         CLI   XTFLAGS,XTNOEXT  IS THERE AN EXTENT\n         BE    NOEXT          NO, THE EXTENT ISN'T THERE\n         CLI   XTFLAGS,XTCYLBD  IS IT ON CYLINDER BOUNDARIES\n         BNE   FORMALOC       NO, DO IT FOR CYLS AND TRACKS\n*\n*        CYLINDER BOUNDS - BE SURE THE ALLOCATION IS CORRECT\n*\n         ICM   R1,B'0011',XTLOWHH GET THE LOWER TRACK\n         BZ    LOWOK          IT'S ZERO\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+6,C'L'  ON THE LOW CCHH\nLOWOK    LH    R1,XTHIHH      GET THE HIGH TRACK\n         LA    R1,1(R1)       ADD ONE FOR ZERO ADDRESSING\n         CH    R1,DS4DEVSZ+2  IS THIS THE NUMBER OF TRACKS/CYL\n         BE    FORMALOC       YES, GO CALCULATE\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+7,C'H'  ON THE HIGH CCHH\n*\n*        GET THE SPACE FOR NON-CYLINDER ALLOCATIONS\n*\nFORMALOC LH    R1,XTHICC      GET THE HIGH CYLINDER\n         SH    R1,XTLOWCC     MINUS THE LOW CYLINDER\n         MH    R1,DS4DEVSZ+2  TIMES THE NUMBER OF TRACKS PER CYLINDER\n         LH    R8,XTHIHH      GET THE HIGH TRACK\n         SH    R8,XTLOWHH     MINUS THE LOW TRACK\n         AR    R8,R1          TRACKS IN THIS EXTENT ( MINUS 1 )\n         LA    R4,1(R4,R8)    ADD THE TRACKS TOGETHER FOR THIS DATA SET\n*\n*        GET THE NEXT EXTENT\n*\nNOEXT    LA    R6,1(R6)       INCREMENT THE EXTENT COUNTER\n         CR    R6,R2          CHECK FOR THE END\n         BL    EXTNEXT        NOT YET, KEEP GOING\n*\n*        ALL THE EXTENTS ARE SUMMED REGISTER 4 HAS THE SUM\n*\n         BAL   R8,SPACUNIT    CHANGE IT TO THE APPROPRIATE UNITS\n         ST    R4,VTFALLOC    STORE IT FOR LATER\nSPACEND  DS    0H\n*\n*        GET THE TRACKS USED\n*\n         SR    R4,R4          CLEAR THE TRACK ( WOO WOO )\n         CLC   DS1LSTAR,ZEROES IS THE TRACK USED COUNTER SET?\n         BNE   USEDOK         YES, ACCEPT IT\n*        NO, SEE IF THE ZERO IS VALID\n         TM    DS1DSORG,X'40' IS IT SEQUENTIAL?\n         BO    USEDOK0        YES,THE ZERO IS VALID\n         TM    DS1DSORG+1,DS1ACBM  VSAM?                        TANSKY\n         BNO   USEDNVSM              NO, MORE CHECKING          TANSKY\n         MVC   VTFUSED,VTFALLOC    IF VSAM, SET USED=ALLOC      TANSKY\n         B     USEDEND             AND CONTINUE                 TANSKY\nUSEDNVSM DS    0H                                               TANSKY\n         CLC   DS1DSORG(2),ZEROES MAYBE IT WASN'T EVER OPENED DRK APR10\n         BE    USEDOK0        THEN NO SPACE USED IS OK\n         TM    DS1DSORG,X'0C' CHECK FOR AN INVALID DSORG\n         BO    USEDOK0        NO SPACE USED IS STILL OK\n         MVC   VTFUSED,FMIN1  SET A FLAG UNUSED SPACE UNKNOWN\n         B     USEDEND        USED SPACE IS SET\n*\n*        THE TRACKS USED COUNTER SEEMS OK\n*\n*SEDOK   LH    R4,DS1LSTAR    GET THE LAST TRACK USED\nUSEDOK   ICM   R4,B'0011',DS1LSTAR  GET THE LAST TRACK USED  3/21/90\n         LA    R4,1(R4)       ADD ONE ( ZERO ADDRESSING )\n         BAL   R8,SPACUNIT    CONVERT TO APPROPRIATE UNITS\nUSEDOK0  ST    R4,VTFUSED     SAVE THE AMOUNT OF SPACE USED\nUSEDEND  DS    0H\n         L     R14,VTFALLOC   ALLOCATED TRACKS\n         S     R14,VTFUSED    MINUS USED TRACKS\n         ST    R14,VTFUNUSD   EQUALS UNUSED TRACKS\n         SR    R14,R14\n         SR    R15,R15\n         CLC   VTFALLOC(4),=F'0'\n         BE    USEDEND1\n         L     R15,VTFUSED    USED TRACKS\n         M     R14,=F'100'    MULT BY 100 TO GET PCT\n         D     R14,VTFALLOC   DIVIDE BY ALLOC TO GET PCT USED\nUSEDEND1 STH   R15,VTFPCT     SAVE PCT USED\n*\n*        RETURN\n*\nFORMRET  LEAVE EQ,RC=0\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n*\n*        CONVERT FROM TRACKS TO THE APPROPRIATE UNITS\n*              KBYTES, MBYTES, TRKS, OR CYLS\n*\nSPACUNIT LH    R1,SPACEK      GET THE UNIT TYPE\n         SLL   R1,2           MULTIPLY BY 4\n         B     *+4(R1)        THEN BRANCH TO THE CORRECT ROUTINE\n         B     SPACKB         R1=0  KILOBYTES             LMB 1/4/83\n         B     SPACKB         R1=1  KILOBYTES             LMB 1/4/83\n         B     SPACMB         R1=2  MEGABYTES             LMB 1/4/83\n         B     SPACTRK        R1=3  TRACKS                LMB 1/4/83\n         B     SPACCYL        R1=4  CYLINDERS             LMB 1/4/83\n*        TRACKS\nSPACTRK  BR    R8             WAS SET WHEN WE STARTED\n*        CYLINDERS\nSPACCYL  SR    R0,R0          CLEAR A REGISTER\n         LR    R1,R4          GET THE NUMBER OF TRACKS\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         SRL   R4,2           DIVIDE BY 2 FOR ROUNDING\n         AR    R1,R4          ADD IT IN\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         DR    R0,R4          DIVIDE TO GET ROUNDED CYLINDERS\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        KILOBYTES\nSPACKB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500        ADD UP TO ROUND\n         D     R0,F1000       DIVIDE TO GET KILOBYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        MEGABYTES\nSPACMB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500000     ADD UP TO ROUND\n         D     R0,F1000000    DIVIDE TO GET MEGABYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*\n*        GET A NEW BLOCK OF MAIN STORAGE\n*\nGOGETMN  GETMAIN RU,LV=VTCGETMS,LOC=(ANY,ANY)  GET SOME         WSX-MAX\n*OGETMN  GETMAIN R,LV=VTCGETMS  GET SOME\n         ST    R1,VTCCURAD    SET UP THE AVAILABLE ADDRESS\n         LA    R2,VTCGETMS/1024   GET THE SIZE OF THE BLOCK IN K\n         SLL   R2,10          GET IT INTO BYTES ( TIMES 1024 )\n         ST    R2,VTCCURLN    SO THE FORMATTED DSCB'S CAN USE IT\n*\n*        SAVE THE BLOCK ADDRESS IN THE VTCGETMN TABLE\n*\n         L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nGOGETTAB ICM   R3,B'1111',0(R2) GET THIS ENTRY\n         BNZ   GOGETINC       IF NOT ZERO, KEEP LOOKING\n         ST    R1,0(R2)       SAVE THE NEW ENTRY\n         B     FORMFIT        THEN GO ALLOCATE A FORMATTED DSCB\n*\n*        THIS ENTRY WAS TAKEN, GET THE NEXT ONE\n*\nGOGETINC LA    R2,4(R2)       POINT TO THE NEXT ENTRY\n         BCT   R5,GOGETTAB    COUNT AND LOOP\n*\n*        TABLE OVERFLOW  - ISSUE ERROR MSG\n*              SET A FLAG TO STOP INPUT\n*\n         VTOCMSG TABOVFLW,TABOVSEC  ISSUE A MESSAGE\n         MVI   TABFULL,255    SET A STOP FLAG\n         B     FORMRET        RETURN FROM FORMATTING\n         EJECT\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\n         SPACE\n*        INSTRUCTIONS EXECUTED TO GET THE NEXT EXTENT\nGETEXT   LA    R5,DS1EXT1           1ST EXTENT\n         LA    R5,DS1EXT2           2ND EXTENT\n         LA    R5,DS1EXT3           3RD EXTENT\n         LA    R5,DS3EXTNT+00(R15)  4TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+10(R15)  5TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+20(R15)  6TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+30(R15)  7TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+00(R15)  8TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+10(R15)  9TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+20(R15) 10TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+30(R15) 11TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+40(R15) 12TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+50(R15) 13TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+60(R15) 14TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+70(R15) 15TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+80(R15) 16TH EXTENT                  ABL-ICF\nMOVEDSN  MVC   VTFDSN(0),DS1DSNAM   EXECUTED COMPARE\nZEROES   DC    2F'0'\nFMIN1    DC    F'-1'\nF500     DC    F'512'                                           HXF-512\nF1000    DC    F'1024'                                          HXF-512\nF500000  DC    F'524288'                                        HXF-512\nF1000000 DC    F'1048576'                                       HXF-512\nBLANKS   DC    CL8'                '\nRESNAME  DC    CL8'SYSDSN'         ENQUEUE MAJOR NAME             *DHC*\nSRESULT  DC    F'5120'             SIZE OF RESULTS AREA           *DHC*\nSS26WRK  DC    F'10240'            SIZE OF SVC26 WORK AREA        *DHC*\nCAMCONST CAMLST NAME,*,,*\n         SPACE 1                                                  *DHC*\n***********************************************************************\n*        CATALOG LOCATE OPTIONS LIST                              *DHC*\n***********************************************************************\nOPT1     DC    CL8'ENTYPE  '                                      *DHC*\nOPT2     DC    CL8'ENTNAME '                                      *DHC*\nOPT3     DC    CL8'NAMEDS  '                                      *DHC*\nOPT4     DC    CL8'AMDSBCAT'                                      *DHC*\n         SPACE 1                                                  *DHC*\nOPTLEN   EQU   *-OPT1              LENGTH OF LIST                 *DHC*\nOPTNUM   EQU   OPTLEN/8            NUMBER OF ENTRIES              *DHC*\n         SPACE 1                                                  *DHC*\nH8       DC    H'8'\nSECAL    DC    C'ABTC'        SECONDARY ALLOCATION CODES\n*              ABSOLUTE TRK, BLOCKS, TRACKS, CYLINDERS\n*\n*\n*\n         PRINT NOGEN\n*\n*        PROGRAM MESSAGES\n*\n         LCLA  SIZE,NUM,MEG                                   DRK APR10\n&SIZE    SETA  VTCGETMX                                       DRK APR10\n&NUM     SETA  VTCGETMS                                       DRK APR10\n&MEG     SETA  (&SIZE*&NUM)/(1024*1024)                       DRK APR10\n         SPACE 1\nTABOVFLW DC   C' THE VTOC TABLES (&MEG MEG) ARE NOT LARGE ENOUGH TO HANX\n               DLE THIS REQUEST'                              DRK APR10\n*ABOVFLW MSGZ  ' THE VTOC TABLES (19.2 MEG) ARE NOT LARGE ENOUGH TO HAN\n*              DLE THIS REQUEST'                                WSX-MAX\nTABOVSEC MSGZ  ' PARTIAL PROCESSING WILL CONTINUE '\n*\n*\n*\n*\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nFORMWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nFIRSTFRM DS    X              INITIALIZATION FOR THIS ROUTINE\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMLOC   CAMLST NAME,*,,*\nCAMLEN   EQU   *-CAMLOC\n         DS    0D\nENQSCAN  GQSCAN AREA=(ENQWORK,L'ENQWORK),TOKEN=GQTOKEN,SCOPE=ALL,      X\n               RESNAME=(RESNAME,DS1DSNAM,44),                          X\n               MF=L MODEL ENQ CALL                                *DHC*\nENQLEN   EQU   *-ENQSCAN           LENGTH OF GQSCAN AREA          *DHC*\nLENGTHS  DS    F                   DATA LENGTHS RETURNED BY GQSCAN*DHC*\n         ORG   LENGTHS             REMAP FULLWORD AS TWO HALVES   *DHC*\nLENRIB   DS    H                   LENGTH OF RIB                  *DHC*\nLENRIBE  DS    H                   LENGTH OF RIBE                 *DHC*\nGQTOKEN  DS    F                   STORAGE FOR GQSCAN TOKEN       *DHC*\n         SPACE 2                                                  *DHC*\nARESULT  DC    A(0)                ADDRESS OF RESULTS AREA        *DHC*\nAS26WRK  DC    A(0)                ADDRESS OF SVC26 WORK AREA     *DHC*\n         DS    0F                  ALIGNMENT                      *DHC*\nOPTNLIST DC    (OPTNUM)CL24' '     SVC26 OPTION LIST              *DHC*\nCTGPL2   DC    XL68'00'            CATALOG MANAGEMENT PARM LIST   *DHC*\n         DS    0D                                                 *DHC*\nLOCWORK  DS    265C                                               *DHC*\n         SPACE 1                                                  *DHC*\n         DS    0D                                                 *DHC*\nENQWORK  DS    CL512                                              *DHC*\n         SPACE\n         DS    0D\nLENWORK  EQU   *-FORMWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         PRINT GEN\n         VTFMT\n         PRINT NOGEN\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         SPACE 3\n*        FORMAT 1 AND 3 EXTENT DESCRIPTION\nXTDSECT  DSECT\nXTFLAGS  DS    X\nXTNOEXT  EQU   X'00'          NO EXTENT\nXTDATAB  EQU   X'01'          DAT BLOCKS\nXTOVFLW  EQU   X'02'          OVERFLOW AREA\nXTINDEX  EQU   X'04'          INDEX AREA\nXTUSRLAB EQU   X'40'          USER LABEL EXTENT\nXTSHRCYL EQU   X'80'          SHARING CYLINDERS\nXTCYLBD  EQU   X'81'          CYLINDER BOUNDARIES\nXTSEQ    DS    X              EXTENT SEQUENCE NUMBER\nXTLOWCC  DS    H              LOWER CYLINDER\nXTLOWHH  DS    H              LOWER TRACK\nXTHICC   DS    H              UPPER CYLINDER\nXTHIHH   DS    H              UPPER TRACK\n          PRINT GEN\n          ISGRIB ,             GRS MAPPING MACRO                  *DHC*\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XXXX0002": {"ttr": 8709, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VTOCFORM TITLE 'VTOC COMMAND FORMAT ROUTINE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* TITLE -      VTOC COMMAND FORMAT ROUTINE                            *\n*                                                                     *\n* FUNCTION -   FORMAT THE DATA INTO THE VTFMT  DSECT FROM THE         *\n*              FORMAT 1 ( AND 3 IF NEEDED ) DSCB.  THIS ROUTINE       *\n*              ALSO GETS THE AREA TO CONTAIN THE FORMATTED            *\n*              DSCB INFORMATION.                                      *\n*                                                                     *\n* OPERATION -  FIRST GET AN AREA FROM THE CURRENT BLOCK, OR GET       *\n*              A BLOCK ( 32K ) OF STORAGE TO USE FOR THE FORMATTED    *\n*              DSCB'S.  MOVE THE DATA OVER FROM THE FORMAT 1 DSCB.    *\n*              THE SPACE CALCULATIONS MAY NEED THE FORMAT 3 DSCB.     *\n*              CATALOG INFORMATION IS OBTIANED VIA LOCATE.  SOME      *\n*              OF THE DSCB INFORMATION IS CONVERTED HERE.             *\n*                                                                     *\n* INPUT -      VTOC COMMON AREA ( VTOCOM )                            *\n*              POINTED TO BY REGISTER 1                               *\n*              USE PARSE DATA, CURRENT FORMATTED DSCB, LOCATE         *\n*                                                                     *\n* OUTPUT -     THE FORMATTED DSCB INFORMATION WITH ITS ADDRESS IN     *\n*              FORMATAD.                                              *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n*                                                                     *\n*         PROGRAMMED BY R. L. MILLER  (415) 485-6241                  *\n*                                                                     *\n*                                                                     *\n* 1/04/83 - UPDATED BY LAUREEN BEAUCHAINE - CBT:          LMB 1/4/83  *\n*         - UPDATED TO USE KEYWORDS: CYLS/KBYTES/MBYTES   LMB 1/4/83  *\n*                                                                     *\n* 9/26/84 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO SUPPORT   ABL-ICF\n*           123 EXTENTS FOR VSAM DATA SETS IN AN ICF CATALOG.   ABL-ICF\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO DOUBLE    ABL-GET\n*           THE NUMBER OF DATA SETS PROCESSED (TO 3.2 MEG).     ABL-GET\n*                                                                     *\n* 8/29/89 - MODIFIED BY A. BRUCE LELAND AT HITACHI TO PERFORM   ABL-SOR\n*           A CORRECT SORT (ADD 1 BLANK AFTER EACH DSNAME).     ABL-SOR\n*                                                                     *\n* 5/11/90 - MODIFIED BY TOM ROMANO OF AETNA LIFE TO PROPERLY  TXR 05/90\n*           REPORT A CATALOG ERROR.                           TXR 05/90\n*                                                                     *\n* 3/24/92 - MODIFIED BY ART TANSKY AT SUNGARD TO MAKE ALL VSAM  TANSKY*\n*           DATASETS \"FULL\" INSTEAD OF 0% USED.                 TANSKY*\n*         - ADDED UPD AND RACF INDICATORS AND OPTIONS           TANSKY*\n*                                                                     *\n*11/25/92 - MODIFIED BY A. BRUCE LELAND AT SERENA TO SET     ABL NOV92*\n*           DSORG TO \"PE\" FOR A PDSE DATA SET.               ABL NOV92*\n*                                                                     *\n*08/09/94 - MODIFIED BY A. BRUCE LELAND AT SERENA TO PROCESS       ABLC\n*           PRINT(ADD(CCHH)) CORRECTLY.  BY DEFAULT, THE FIRST     ABLC\n*           EXTENT'S CCHH LIMITS ARE USED BUT IF ANY LIMIT         ABLC\n*           TESTING SELECTS AN EXTENT, ITS CCHH IS USED.           ABLC\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ALLOW MORE  JVH-MAX\n*           DATASETS TO BE PROCESSED.  THE EARLIER MAXIMUM      JVH-MAX\n*           USED APPROXIMATELY 3.2 MB.  THIS WAS INCREASED UP   JVH-MAX\n*           TO 4.8 MB.  THIS ALLOWS UP TO 50,000 DATASETS.      JVH-MAX\n*                                                                     *\n* 6/29/99 - MODIFIED BY JOHN HOOPER AT FOOD LION TO ADD         JVH-DSO\n*           SUPPORT FOR HIERARCHIAL DATASETS (HFS) AND          JVH-DSO\n*           EXTENDED MODE SMS DATASETS.                         JVH-DSO\n*                                                                     *\n*                                                                     *\n*14/08/01 - MODIFIED BY DAVID CARTWRIGHT AT AGCO UK LTD.          *DHC*\n*           INCLUDE CODE TO TEST IF DATASETS ARE IN USE BY        *DHC*\n*           CHECKING THE MAJOR NAME SYSDSN WITH A MINOR NAME OF   *DHC*\n*           THE DATASET NAME OR CLUSTER NAME IF VSAM.             *DHC*\n*                                                                     *\n* 8/16/01 - MODIFIED BY WADE SIRMONS AT EXCELIS.  CHANGED TO    WSX-MAX\n*           AMODE31 RMODE24.  INCREASED MAXIMUM NUMBER OF       WSX-MAX\n*           DATASETS THAT CAN BE LISTED.                        WSX-MAX\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         MACRO\n&LAB     DS1TST  &FIELD,&VALUE,&CODE\n&LAB     TM    DS1&FIELD,X'&VALUE'  TEST IT\n         BNO   D&SYSNDX       IF NOT THERE, SKIP ALONG\n         MVC   VTF&FIELD,=CL3'&CODE'\nD&SYSNDX DS    0H\n         MEND\n*\n*\n         EJECT\nVTOCFORM ENTER 12,16          DO THE HOUSEKEEPING\n         LR    R11,R1         SAVE ADDR OF VTOCOM\n         USING VTOCOM,R11     SET ITS ADDRESSABILITY\n         L     R9,ADDRANSR    POINT TO THE PARSE ANSWER\n         USING PDL,R9         SET ITS ADDRESSABILITY\n         USING FORMWORK,R13   SET ADDRESSABILITY FOR LOCAL WORK AREA\n         SPACE 3\n*\n*        CHECK FOR THE FIRST TIME THROUGH\n*        IF SO, PERFORM SOME INITIALIZATION\n*\n         CLI   FIRSTFRM,0     IS THIS THE FIRST TIME?\n         BNE   GETAREA        NO, KEEP ON TRUCKIN'\n         EJECT ,                                                  *DHC*\n***********************************************************************\n*        PERFORM INITIAL HOUSEKEEPING.                            *DHC*\n***********************************************************************\n         SPACE 1                                                  *DHC*\n         L     R0,SRESULT          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,ARESULT          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         L     R0,SS26WRK          GET SIZE OF AREA REQUIRED      *DHC*\n         BAL   R4,GETSTORE         GO GET THAT STORAGE            *DHC*\n         ST    R1,AS26WRK          SAVE ITS ADDRESS               *DHC*\n         BAL   R14,CLEAR           CLEAR RESULTS AREA             *DHC*\n         SPACE 1                                                  *DHC*\n*\n*        ROUTINE INITIALIZATION\n*\n         MVI   FIRSTFRM,255   NOTE THE INITIALIZATION AS DONE\n         MVC   CAMLOC(CAMLEN),CAMCONST  SET UP THE CAMLST\n*\n*        FIND OR GET AN AREA FOR THE FORMATTED DSCB\n*              FIRST SEE HOW BIG IT IS\n*\nGETAREA  L     R7,DSCBADDR    POINT TO THE DSCB\n         LA    R7,8(R7)       GET PAST THE HEADER\n         USING DSCB1,R7       SET ADDRESSABILITY\n         LH    R1,DSNLEN     GET THE DSNAME LENGTH\n         LA    R4,VTFMTL+1(R1)  GET FORMATTED DSCB LENGTH       ABL-SOR\n*\n*        SEE IF THE CURRENT BLOCK CAN HANDLE IT\n*\nFORMFIT  L     R3,VTCCURLN    GET THE CURRENT AVAILABLE\n         SR    R3,R4          SEE IF IT WILL FIT\n         BM    GOGETMN        NO, GET ANOTHER BLOCK\n*\n*        NO SWEAT, GET THE SPACE FROM THIS BLOCK\n*\n         ST    R3,VTCCURLN    STORE THE NEW ( REDUCED ) CURRENT LENGTH\n         L     R3,VTCCURAD    POINT TO THE CURRENT ADDRESS\n         LA    R5,0(R3,R4)    POINT TO THE END OF THE BLOCK\n         ST    R5,VTCCURAD    AND PLACE THE NEW AVAILABLE ADDRESS\n*\n*        NOW FILL IN THE DATA IN THE FORMATTED DSCB\n*\n         USING VTFMT,R3       SET FORMATTED DSCB ADDRESSABILITY\n         ST    R3,FORMATAD    SAVE THIS BLOCK'S ADDRESS\n         XC    VTFNEXT,VTFNEXT  CLEAR THE SORT POINTER\n         MVC   VTFVOLUM,VOLID SAVE THE VOLUME SERIAL NUMBER\n         MVC   VTFUNIT,UCBDEVT SAVE THE DEVICE TYPE\n         LH    R1,DSNLEN     GET THE LENGTH OF THE DSNAME\n         STH   R1,VTFDSNL     SAVE THE DSNAME LENGTH\n***      BCTR  R1,0           ***MOVE THE NEXT BLANK TOO        ABL-SOR\n         EX    R1,MOVEDSN     MOVE IN THE DSNAME\n         MVC   VTFNOEPV,DS1NOEPV  NUMBER OF EXTENTS\n         MVC   VTFLRECL,DS1LRECL  LOGICAL RECORD LENGTH\n         MVC   VTFBLKSZ,DS1BLKL   BLOCK SIZE\n         MVC   VTFCCHH(8),VTC#CCHH  MOVE IN SELECTED CCHH          ABLC\n*\n*     MOVE IN THE CREATION DATE, EXPIRATION DATE, AND LAST ACCESS DATE\n*\n         MVC   VTFCREDT,DS1CREDT  MOVE OVER CREATION DATE\n         MVC   VTFEXPDT,DS1EXPDT  MOVE OVER EXPIRATION DATE\n         MVC   VTFLSTAC,DS1REFD   MOVE OVER LAST ACCESS DATE\n*\n*        FORMAT THE RECORD FORMAT INTO CHARACTERS\n*\n*\n         MVC   VTFRECFM,BLANKS  BLANK THE FIELD TO START\n         MVC   VTFACTON,BLANKS  ANOTHER BLANK FIELD\n         MVI   VTFDSTYP,C' ' AND STILL ANOTHER\n         LA    R2,VTFRECFM    POINT TO THE FIELD\n         TM    DS1RECFM,X'C0' UNKNOWN RECFM?\n         BZ    RECFM2         YES, TROUBLE\n         TM    DS1RECFM,X'40' IS IT FIXED?\n         BNZ   RECFM3         NO, KEEP TRYING\n         MVI   0(R2),C'F'     YES, SET UP THE FIRST CHAR\n         LA    R2,1(R2)       AND BUMP THE POINTER\n         B     RECFM2         CHECK OTHER ATTRIBUTES\nRECFM3   TM    DS1RECFM,X'80' SEE IF IT'S V OR U\n         BZ    RECFM4         VARIABLE RECFM\n         MVI   0(R2),C'U'     RECFM = U\n         B     RECFM4A        ADD TO THE POINTER AND KEEP LOOKING\nRECFM4   MVI   0(R2),C'V'     VARIABLE\nRECFM4A  LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM2   DS    0H\nRECFM5   TM    DS1RECFM,X'10' IS IT BLOCKED?\n         BZ    RECFM6         NO, SKIP ON\n         MVI   0(R2),C'B'     YES, SET THE SYMBOL\n         LA    R2,1(R2)       GET PAST THE CHAR\nRECFM6   TM    DS1RECFM,X'08' IS IT SPANNED OR STANDARD?\n         BZ    RECFM6A        NO\n         MVI   0(R2),C'S'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHARACTER\nRECFM6A  TM    DS1RECFM,X'20' CHECK TRACK OVERFLOW\n         BZ    RECFM7         NO DICE\n         MVI   0(R2),C'T'     YES, SET IT\n         LA    R2,1(R2)       PUSH THE POINTER ON\nRECFM7   TM    DS1RECFM,X'04' IS IT ASA CONTROL\n         BZ    RECFM8         NO, SKIP ON\n         MVI   0(R2),C'A'     YES, SET IT\n         LA    R2,1(R2)       GET PAST THIS CHAR\nRECFM8   TM    DS1RECFM,X'02' HOW ABOUT MACHINE CARRIAGE CONTROL\n         BZ    RECFM9         NO, SKIP ON\n         MVI   0(R2),C'M'     YES, SET IT\nRECFM9   DS    0H\n*\n*        FORMAT THE DSORG\n*\n         MVC   VTFDSORG,=CL3'   '  CLEAR THE FIELD\n         DS1TST DSORG,80,IS   TRY ISAM\n         DS1TST DSORG,40,PS   TRY SEQUENTIAL\n         DS1TST DSORG,20,DA   TRY DIRECT ACCESS\n         DS1TST DSORG,02,PO   TRY PARTITIONED\n         TM    DS1DSORG,X'02'     A PDS OR A PDSE?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         TM    DS1REFD+3,X'08'    A PDSE DATA SET?            ABL NOV92\n         BNO   DSORG04            NO, BRANCH                  ABL NOV92\n         MVC   VTFDSORG,=CL3'PE ' YES, MARK AS A PDSE         ABL NOV92\nDSORG04  TM    DS1REFD+3,X'02'    A HFS DATASET?                JVH-DSO\n         BNO   DSORG05            NO, BRANCH                    JVH-DSO\n         MVC   VTFDSORG,=CL3'HF ' YES, MARK AS AN HFS           JVH-DSO\nDSORG05  CLC   DS1DSORG(2),=X'0008'  IS IT VSAM?                JVH-DSO\n         BNE   DSORG06            NO, KEEP LOOKING              JVH-DSO\n         MVC   VTFDSORG,=CL3'VS ' YES, FLAG IT                  JVH-DSO\nDSORG06  TM    DS1DSORG,X'01'     IS IT UNMOVEABLE?             JVH-DSO\n         BNO   DSORG07            NO, KEEP ON TRUCKIN'          JVH-DSO\n         MVI   VTFDSORG+2,C'U'    YES, NOTE IT                  JVH-DSO\nDSORG07  TM    DS1REFD+3,X'04'    AN EXTENDED FORMAT DATASET?   JVH-DSO\n         BNO   DSORG08            NO, BRANCH                    JVH-DSO\n         MVI   VTFDSORG+2,C'X'    YES, NOTE IT                  JVH-DSO\nDSORG08  DS    0H                                               JVH-DSO\n*\n*        FORMAT THE SECONDARY ALLOCATION\n*\n         SR    R1,R1          CLEAR A WORK REGISTER\n         IC    R1,DS1SCALO    GET THE ALLOCATION FLAG\n         SRL   R1,6           REMOVE THE BOTTOM 6 BITS ( 75 CENTS )\n         IC    R2,SECAL(R1)   GET THE CHARACTER CODE\n         STC   R2,VTFSECAL    AND SAVE IT FOR LATER\n         MVC   VTFSECAM,DS1SCALO+2  SAVE THE SECONDARY AMOUNT TOO\n         MVI   VTFROUND,C'N'  SET CODE FOR NO ROUND\n         TM    DS1SCALO,X'01' SEE IF ROUND WAS SET\n         BNO   PROTFORM       NO, THE CODE IS SET RIGHT\n         MVI   VTFROUND,C'R'  YES, RESET THE CODE\n*\n*        FORMAT THE PASSWORD PROTECTION\n*\nPROTFORM TM    DS1DSIND,X'14' CHECK THE PASSWORD BITS\n         BO    PROTWRIT       WRITE PROTECT IS X'14'\n         BM    PROTREAD       READ PROTECT IS X'10'\n         MVI   VTFPROT,C'N'   NO PASSWORD PROTECTION\n         B     PROTEND        END OF PROTECTION FORMATTING\nPROTWRIT MVI   VTFPROT,C'W'   SET CODE FOR WRITE PROTECT\n         B     PROTEND        THEN CHECK OTHER ITEMS\nPROTREAD MVI   VTFPROT,C'R'   SET CODE FOR READ/WRITE PROTECT\nPROTEND  DS    0H             END OF PROTECTION FORMATTING\n*                                                               TANSKY\n*        FORMAT THE RACF INDICATOR                              TANSKY\n*                                                               TANSKY\n         MVI   VTFRACF,C'N'        ASSUME NOT RACF INDICATED    TANSKY\n         TM    DS1DSIND,DS1IND40   RACF IND?                    TANSKY\n         BNO   RACFEND               NO, WE'RE RIGHT            TANSKY\n         MVI   VTFRACF,C'Y'        YES, SHOW IT                 TANSKY\nRACFEND  DS    0H                                               TANSKY\n*                                                               TANSKY\n*        FORMAT THE UPDATED INDICATOR                           TANSKY\n*                                                               TANSKY\n         MVI   VTFUPD,C'N'         ASSUME NOT UPDATED           TANSKY\n         TM    DS1DSIND,DS1IND02   UPDATED?                     TANSKY\n         BNO   UPDEND                NO, WE'RE RIGHT            TANSKY\n         MVI   VTFUPD,C'Y'         YES, SHOW IT                 TANSKY\nUPDEND   DS    0H                                               TANSKY\n*\n*        FORMAT THE CATLG\n*\n         MVI   VTFCATLG,C' ' INITIALIZE IT TO BLANKS\n         CLI   CATK+1,0       SHOULD WE DO THE LOCATE?\n         BE    CATEND         NO, SKIP PAST IT\n*\n*        SET UP THE CAMLST\n*\n         LA    R1,DS1DSNAM    POINT TO THE DSNAME\n         ST    R1,CAMLOC+4    SAVE IT IN THE CAMLST\n         LA    R1,LOCWORK     LOCATE WORKAREA\n         ST    R1,CAMLOC+12   SAVE IT IN THE CAMLST\n         LOCATE CAMLOC        CHECK THE CATALOG\n         LTR   R15,R15        TEST THE CATALOG RETURN CODE\n         BZ    CATOK          ZERO, THERE IS AN ENTRY\n         MVI   VTFCATLG,C'N'  SET CODE FOR NOT CATALOGED\n         CH    R15,H8         SEE IF THAT'S THE CASE\n         BE    CATEND         YES, LET IT STAND\n         MVI   VTFCATLG,C'E'  CATALOG ERROR, PROBLEMS\n         B     CATEND         YES, LET IT STAND         TXR 05/90\n*\n*        CATALOG ENTRY IS THERE, SEE THAT THE VOLUME IS THIS ONE\n*\nCATOK    MVI   VTFCATLG,C'C'  SET UP AS A GOOD ENTRY\n         CLC   VOLID,LOCWORK+6  COMPARE THE VOLUME SERIAL NUMBERS\n         BE    CATEND         GOOD, WE'RE DONE\n         SPACE 1                                               ABL-MCAT\n         LH    R1,LOCWORK     NUMBER OF ENTRIES                ABL-MCAT\n         LA    R14,LOCWORK+6  FIRST ENTRY TO COMPARE           ABL-MCAT\nCATNXT   CLC   VOLID,0(R14)   THIS VOLUME SERICAL ?            ABL-MCAT\n         BE    CATEND         YES, IT IS CATALOGED CORRECTLY   ABL-MCAT\n         LA    R14,12(,R14)   NEXT VOLUME NAME IN THE LIST     ABL-MCAT\n         BCT   R1,CATNXT      CHECK NEXT VOLUME                ABL-MCAT\n         SPACE 1                                               ABL-MCAT\n         MVI   VTFCATLG,C'W'  WRONG VOLUME, NOT CATALOGED\nCATEND   DS    0H\n         COPY  VTOCENQ             TEST IF ALLOCATED           *DHC*\n*\n*        FORMAT THE ALLOCATION AND USED QUANTITIES\n*\n         SPACE\n*        CHECK THROUGH THE EXTENTS\n         SPACE\n         SR    R2,R2          CLEAR A WORK REGISTER\n         ICM   R2,B'0001',DS1NOEPV  GET THE NUMBER OF EXTENTS\n         BZ    SPACEND        NO EXTENTS MEANS NO SPACE\n         SR    R4,R4          ZERO THE SPACE COUNTER FOR THE DATA SET\n*\n*        GET EACH EXTENT AND PROCESS IT\n*\n         SR    R6,R6          FIRST EXTENT\nEXTNEXT  LR    R14,R6                                           ABL-ICF\n         S     R14,=F'3'                                        ABL-ICF\n         SRDA  R14,32                                           ABL-ICF\n         D     R14,=F'13'     (EXTENT-3) / 13                   ABL-ICF\n         LR    R14,R15        EXTENT TABLE IN USE               ABL-ICF\n         MH    R14,=H'13'                                       ABL-ICF\n         MH    R15,=H'148'                                      ABL-ICF\n         LR    R5,R6          EXTENT - ((EXTENT-3) / 13) * 13   ABL-ICF\n         SR    R5,R14         EXTENT INSTRUCTION ADDRESS        ABL-ICF\n         SLL   R5,2           MULTIPLY IT BY FOUR\n         EX    R0,GETEXT(R5)  GET THE CORRECT ADDRESS\n*\n*        PROCESS THIS EXTENT\n*\n         USING XTDSECT,R5     SET ADDRESSABILITY\n         CLI   XTFLAGS,XTNOEXT  IS THERE AN EXTENT\n         BE    NOEXT          NO, THE EXTENT ISN'T THERE\n         CLI   XTFLAGS,XTCYLBD  IS IT ON CYLINDER BOUNDARIES\n         BNE   FORMALOC       NO, DO IT FOR CYLS AND TRACKS\n*\n*        CYLINDER BOUNDS - BE SURE THE ALLOCATION IS CORRECT\n*\n         ICM   R1,B'0011',XTLOWHH GET THE LOWER TRACK\n         BZ    LOWOK          IT'S ZERO\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+6,C'L'  ON THE LOW CCHH\nLOWOK    LH    R1,XTHIHH      GET THE HIGH TRACK\n         LA    R1,1(R1)       ADD ONE FOR ZERO ADDRESSING\n         CH    R1,DS4DEVSZ+2  IS THIS THE NUMBER OF TRACKS/CYL\n         BE    FORMALOC       YES, GO CALCULATE\n         MVC   VTFACTON(6),=C'CYLERR'  NOTE THE ERROR\n         MVI   VTFACTON+7,C'H'  ON THE HIGH CCHH\n*\n*        GET THE SPACE FOR NON-CYLINDER ALLOCATIONS\n*\nFORMALOC LH    R1,XTHICC      GET THE HIGH CYLINDER\n         SH    R1,XTLOWCC     MINUS THE LOW CYLINDER\n         MH    R1,DS4DEVSZ+2  TIMES THE NUMBER OF TRACKS PER CYLINDER\n         LH    R8,XTHIHH      GET THE HIGH TRACK\n         SH    R8,XTLOWHH     MINUS THE LOW TRACK\n         AR    R8,R1          TRACKS IN THIS EXTENT ( MINUS 1 )\n         LA    R4,1(R4,R8)    ADD THE TRACKS TOGETHER FOR THIS DATA SET\n*\n*        GET THE NEXT EXTENT\n*\nNOEXT    LA    R6,1(R6)       INCREMENT THE EXTENT COUNTER\n         CR    R6,R2          CHECK FOR THE END\n         BL    EXTNEXT        NOT YET, KEEP GOING\n*\n*        ALL THE EXTENTS ARE SUMMED REGISTER 4 HAS THE SUM\n*\n         BAL   R8,SPACUNIT    CHANGE IT TO THE APPROPRIATE UNITS\n         ST    R4,VTFALLOC    STORE IT FOR LATER\nSPACEND  DS    0H\n*\n*        GET THE TRACKS USED\n*\n         SR    R4,R4          CLEAR THE TRACK ( WOO WOO )\n         CLC   DS1LSTAR,ZEROES IS THE TRACK USED COUNTER SET?\n         BNE   USEDOK         YES, ACCEPT IT\n*        NO, SEE IF THE ZERO IS VALID\n         TM    DS1DSORG,X'40' IS IT SEQUENTIAL?\n         BO    USEDOK0        YES,THE ZERO IS VALID\n         TM    DS1DSORG+1,DS1ACBM  VSAM?                        TANSKY\n         BNO   USEDNVSM              NO, MORE CHECKING          TANSKY\n         MVC   VTFUSED,VTFALLOC    IF VSAM, SET USED=ALLOC      TANSKY\n         B     USEDEND             AND CONTINUE                 TANSKY\nUSEDNVSM DS    0H                                               TANSKY\n         CLC   DS1DSORG(2),ZEROES MAYBE IT WASN'T EVER OPENED DRK APR10\n         BE    USEDOK0        THEN NO SPACE USED IS OK\n         TM    DS1DSORG,X'0C' CHECK FOR AN INVALID DSORG\n         BO    USEDOK0        NO SPACE USED IS STILL OK\n         MVC   VTFUSED,FMIN1  SET A FLAG UNUSED SPACE UNKNOWN\n         B     USEDEND        USED SPACE IS SET\n*\n*        THE TRACKS USED COUNTER SEEMS OK\n*\n*SEDOK   LH    R4,DS1LSTAR    GET THE LAST TRACK USED\nUSEDOK   ICM   R4,B'0011',DS1LSTAR  GET THE LAST TRACK USED  3/21/90\n         LA    R4,1(R4)       ADD ONE ( ZERO ADDRESSING )\n         BAL   R8,SPACUNIT    CONVERT TO APPROPRIATE UNITS\nUSEDOK0  ST    R4,VTFUSED     SAVE THE AMOUNT OF SPACE USED\nUSEDEND  DS    0H\n         L     R14,VTFALLOC   ALLOCATED TRACKS\n         S     R14,VTFUSED    MINUS USED TRACKS\n         ST    R14,VTFUNUSD   EQUALS UNUSED TRACKS\n         SR    R14,R14\n         SR    R15,R15\n         CLC   VTFALLOC(4),=F'0'\n         BE    USEDEND1\n         L     R15,VTFUSED    USED TRACKS\n         M     R14,=F'100'    MULT BY 100 TO GET PCT\n         D     R14,VTFALLOC   DIVIDE BY ALLOC TO GET PCT USED\nUSEDEND1 STH   R15,VTFPCT     SAVE PCT USED\n*\n*        RETURN\n*\nFORMRET  LEAVE EQ,RC=0\n*\n*\n         EJECT\n*\n*        ROUTINES USED ABOVE\n*\n*\n*        CONVERT FROM TRACKS TO THE APPROPRIATE UNITS\n*              KBYTES, MBYTES, TRKS, OR CYLS\n*\nSPACUNIT LH    R1,SPACEK      GET THE UNIT TYPE\n         SLL   R1,2           MULTIPLY BY 4\n         B     *+4(R1)        THEN BRANCH TO THE CORRECT ROUTINE\n         B     SPACKB         R1=0  KILOBYTES             LMB 1/4/83\n         B     SPACKB         R1=1  KILOBYTES             LMB 1/4/83\n         B     SPACMB         R1=2  MEGABYTES             LMB 1/4/83\n         B     SPACTRK        R1=3  TRACKS                LMB 1/4/83\n         B     SPACCYL        R1=4  CYLINDERS             LMB 1/4/83\n*        TRACKS\nSPACTRK  BR    R8             WAS SET WHEN WE STARTED\n*        CYLINDERS\nSPACCYL  SR    R0,R0          CLEAR A REGISTER\n         LR    R1,R4          GET THE NUMBER OF TRACKS\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         SRL   R4,2           DIVIDE BY 2 FOR ROUNDING\n         AR    R1,R4          ADD IT IN\n         LH    R4,DS4DEVSZ+2  GET THE NUMBER OF TRACKS PER CYLINDER\n         DR    R0,R4          DIVIDE TO GET ROUNDED CYLINDERS\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        KILOBYTES\nSPACKB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500        ADD UP TO ROUND\n         D     R0,F1000       DIVIDE TO GET KILOBYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*        MEGABYTES\nSPACMB   MVC   TRKSIZE+2(2),DS4DEVTK   ***                     ABL-3380\n         SR    R0,R0                   ***                     ABL-3380\n         LR    R1,R4                   ***                     ABL-3380\n         M     R0,TRKSIZE     MULTIPLY BY BYTES PER TRACK      ABL-3380\n         A     R1,F500000     ADD UP TO ROUND\n         D     R0,F1000000    DIVIDE TO GET MEGABYTES\n         LR    R4,R1          GET THE ANSWER BACK INTO R4\n         BR    R8             THEN RETURN\n*\n*        GET A NEW BLOCK OF MAIN STORAGE\n*\nGOGETMN  GETMAIN RU,LV=VTCGETMS,LOC=(ANY,ANY)  GET SOME         WSX-MAX\n*OGETMN  GETMAIN R,LV=VTCGETMS  GET SOME\n         ST    R1,VTCCURAD    SET UP THE AVAILABLE ADDRESS\n         LA    R2,VTCGETMS/1024   GET THE SIZE OF THE BLOCK IN K\n         SLL   R2,10          GET IT INTO BYTES ( TIMES 1024 )\n         ST    R2,VTCCURLN    SO THE FORMATTED DSCB'S CAN USE IT\n*\n*        SAVE THE BLOCK ADDRESS IN THE VTCGETMN TABLE\n*\n         L     R2,VTCGETMN    POINT TO THE TABLE                JVH-MAX\n         LA    R5,VTCGETMX    GET THE NUMBER OF ENTRIES IN THE TABLE\nGOGETTAB ICM   R3,B'1111',0(R2) GET THIS ENTRY\n         BNZ   GOGETINC       IF NOT ZERO, KEEP LOOKING\n         ST    R1,0(R2)       SAVE THE NEW ENTRY\n         B     FORMFIT        THEN GO ALLOCATE A FORMATTED DSCB\n*\n*        THIS ENTRY WAS TAKEN, GET THE NEXT ONE\n*\nGOGETINC LA    R2,4(R2)       POINT TO THE NEXT ENTRY\n         BCT   R5,GOGETTAB    COUNT AND LOOP\n*\n*        TABLE OVERFLOW  - ISSUE ERROR MSG\n*              SET A FLAG TO STOP INPUT\n*\n         VTOCMSG TABOVFLW,TABOVSEC  ISSUE A MESSAGE\n         MVI   TABFULL,255    SET A STOP FLAG\n         B     FORMRET        RETURN FROM FORMATTING\n         EJECT\n*\n*\n*\n*        PROGRAM CONSTANTS\n*\n         SPACE\n*        INSTRUCTIONS EXECUTED TO GET THE NEXT EXTENT\nGETEXT   LA    R5,DS1EXT1           1ST EXTENT\n         LA    R5,DS1EXT2           2ND EXTENT\n         LA    R5,DS1EXT3           3RD EXTENT\n         LA    R5,DS3EXTNT+00(R15)  4TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+10(R15)  5TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+20(R15)  6TH EXTENT                  ABL-ICF\n         LA    R5,DS3EXTNT+30(R15)  7TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+00(R15)  8TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+10(R15)  9TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+20(R15) 10TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+30(R15) 11TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+40(R15) 12TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+50(R15) 13TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+60(R15) 14TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+70(R15) 15TH EXTENT                  ABL-ICF\n         LA    R5,DS3ADEXT+80(R15) 16TH EXTENT                  ABL-ICF\nMOVEDSN  MVC   VTFDSN(0),DS1DSNAM   EXECUTED COMPARE\nZEROES   DC    2F'0'\nFMIN1    DC    F'-1'\nF500     DC    F'512'                                           HXF-512\nF1000    DC    F'1024'                                          HXF-512\nF500000  DC    F'524288'                                        HXF-512\nF1000000 DC    F'1048576'                                       HXF-512\nBLANKS   DC    CL8'                '\nRESNAME  DC    CL8'SYSDSN'         ENQUEUE MAJOR NAME             *DHC*\nSRESULT  DC    F'5120'             SIZE OF RESULTS AREA           *DHC*\nSS26WRK  DC    F'10240'            SIZE OF SVC26 WORK AREA        *DHC*\nCAMCONST CAMLST NAME,*,,*\n         SPACE 1                                                  *DHC*\n***********************************************************************\n*        CATALOG LOCATE OPTIONS LIST                              *DHC*\n***********************************************************************\nOPT1     DC    CL8'ENTYPE  '                                      *DHC*\nOPT2     DC    CL8'ENTNAME '                                      *DHC*\nOPT3     DC    CL8'NAMEDS  '                                      *DHC*\nOPT4     DC    CL8'AMDSBCAT'                                      *DHC*\n         SPACE 1                                                  *DHC*\nOPTLEN   EQU   *-OPT1              LENGTH OF LIST                 *DHC*\nOPTNUM   EQU   OPTLEN/8            NUMBER OF ENTRIES              *DHC*\n         SPACE 1                                                  *DHC*\nH8       DC    H'8'\nSECAL    DC    C'ABTC'        SECONDARY ALLOCATION CODES\n*              ABSOLUTE TRK, BLOCKS, TRACKS, CYLINDERS\n*\n*\n*\n         PRINT NOGEN\n*\n*        PROGRAM MESSAGES\n*\n         LCLA  SIZE,NUM,MEG                                   DRK APR10\n&SIZE    SETA  VTCGETMS                                       DRK APR10\n&NUM     SETA  VTCGETMX                                       DRK APR10\n&MEG     SETA  (&SIZE*&NUM)/(1024*1024)                       DRK APR10\n         SPACE 1\nTABOVFLW DC   C' THE VTOC TABLES (&MEG MEG) ARE NOT LARGE ENOUGH TO HANX\n               DLE THIS REQUEST'                              DRK APR10\n*ABOVFLW MSGZ  ' THE VTOC TABLES (19.2 MEG) ARE NOT LARGE ENOUGH TO HAN\n*              DLE THIS REQUEST'                                WSX-MAX\nTABOVSEC MSGZ  ' PARTIAL PROCESSING WILL CONTINUE '\n*\n*\n*\n*\n*\n*\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         PRINT OFF\n         COPY  VTOCPARS\n         PRINT ON\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nFORMWORK DSECT\n         DS    18A            PRINT ROUTINE SAVE AREA\nFIRSTFRM DS    X              INITIALIZATION FOR THIS ROUTINE\nCHARS    DS    CL16           CONVERSION TO CHARACTERS\nCAMLOC   CAMLST NAME,*,,*\nCAMLEN   EQU   *-CAMLOC\n         DS    0D\nENQSCAN  GQSCAN AREA=(ENQWORK,L'ENQWORK),TOKEN=GQTOKEN,SCOPE=ALL,      X\n               RESNAME=(RESNAME,DS1DSNAM,44),                          X\n               MF=L MODEL ENQ CALL                                *DHC*\nENQLEN   EQU   *-ENQSCAN           LENGTH OF GQSCAN AREA          *DHC*\nLENGTHS  DS    F                   DATA LENGTHS RETURNED BY GQSCAN*DHC*\n         ORG   LENGTHS             REMAP FULLWORD AS TWO HALVES   *DHC*\nLENRIB   DS    H                   LENGTH OF RIB                  *DHC*\nLENRIBE  DS    H                   LENGTH OF RIBE                 *DHC*\nGQTOKEN  DS    F                   STORAGE FOR GQSCAN TOKEN       *DHC*\n         SPACE 2                                                  *DHC*\nARESULT  DC    A(0)                ADDRESS OF RESULTS AREA        *DHC*\nAS26WRK  DC    A(0)                ADDRESS OF SVC26 WORK AREA     *DHC*\n         DS    0F                  ALIGNMENT                      *DHC*\nOPTNLIST DC    (OPTNUM)CL24' '     SVC26 OPTION LIST              *DHC*\nCTGPL2   DC    XL68'00'            CATALOG MANAGEMENT PARM LIST   *DHC*\n         DS    0D                                                 *DHC*\nLOCWORK  DS    265C                                               *DHC*\n         SPACE 1                                                  *DHC*\n         DS    0D                                                 *DHC*\nENQWORK  DS    CL512                                              *DHC*\n         SPACE\n         DS    0D\nLENWORK  EQU   *-FORMWORK\n*\n*        VTOC COMMAND COMMON AREA\n*\n         PRINT NOGEN\n         VTOCOM\n         SPACE 3\n*\n*        FORMATTED DSCB\n*\n         PRINT GEN\n         VTFMT\n         PRINT NOGEN\n         SPACE 3\n         PDEDSNAM\n         SPACE 3\n         SPACE 3\nDSCB1    DSECT\n         IECSDSL1 1\n         SPACE 3\n*        FORMAT 1 AND 3 EXTENT DESCRIPTION\nXTDSECT  DSECT\nXTFLAGS  DS    X\nXTNOEXT  EQU   X'00'          NO EXTENT\nXTDATAB  EQU   X'01'          DAT BLOCKS\nXTOVFLW  EQU   X'02'          OVERFLOW AREA\nXTINDEX  EQU   X'04'          INDEX AREA\nXTUSRLAB EQU   X'40'          USER LABEL EXTENT\nXTSHRCYL EQU   X'80'          SHARING CYLINDERS\nXTCYLBD  EQU   X'81'          CYLINDER BOUNDARIES\nXTSEQ    DS    X              EXTENT SEQUENCE NUMBER\nXTLOWCC  DS    H              LOWER CYLINDER\nXTLOWHH  DS    H              LOWER TRACK\nXTHICC   DS    H              UPPER CYLINDER\nXTHIHH   DS    H              UPPER TRACK\n          PRINT GEN\n          ISGRIB ,             GRS MAPPING MACRO                  *DHC*\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT112/FILE112.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT112", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}