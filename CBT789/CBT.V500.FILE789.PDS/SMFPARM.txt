/***************************** REXX ***********************************

 This REXX builds the IFASMFDP (SMF DUMP Utility) control records for
      for TAPE Batch processing. It's primary purpose is the dynamic
      creation of the "DATE(start_date,end_date)" card based off of
      passed parameters.

 This REXX does NOT Require TSO, it will run in batch under IRXJCL.

                           --- EXAMPLE ---
IRXJCL SMFPARM start finish <ADJUST(TRUE|FALSE)> <BEGIN(start_time)> ,
           <END(end_time)> <TEST(trace_option)>
TSO <%>SMFPARM start finish <ADJUST(TRUE|FALSE)> <BEGIN(start_time)> ,
           <END(end_time)> <TEST(trace_option)>
TSO <%>SMFPARM -H -- To display help for this REXX

  Arguments: start       - The first day SMF records that are desired.
                           FORMAT: yyyy-mm-dd, -days_ago, "YESTERDAY",
                                   "TODAY", "LASTMONTH", & "LASTWEEK"
             finish      - The last day SMF records that are desired.
                           FORMAT: yyyy-mm-dd, -days_ago, or blank
             inparms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                  ADJUST - ADJUST the "start" to handle weekends.
                           default: FALSE
                   BEGIN - Begin time for the start Date in HHMM format
                           default: blank          <=== i.e. 0000
                     END - End time for the finish Date in HHMM format
                           default: blank          <=== i.e. 2400
                    TEST - Used to control traces

      Files: OUTPUT DD is SMFDPARM
Other EXECS: DATEX    - For date calculations in building Subject line.

EXEC History

 REXX EXEC Name: SMFPARM
         Author: Al Ferguson (HUL2353)
         Writen: 25JUL01
        History: 14JUL08 - Version 1.45 - Remove TSO Dependencies so
                           SMFPARM can run under IRXJCL.
                 17MAR06 - Version 1.42 - Fix LASTMONTH Code
                 15MAR06 - Version 1.40 - Remove support for NMDATE, as
                           it does not work with IFASMFDP.
                 14MAR06 - Version 1.38 - Add support for "LASTWEEK"
                 13MAR06 - Version 1.36 - Add support for "LASTMONTH"
                 20MAY04 - Version 1.34 - First Functional Version.
                 26FEB04 - Version 1.00 - Based off of RACFSMF

***************************** Rexx ***********************************/
PARSE ARG start finish inparms               /* Place arguments here */

IF WORDPOS(start,'-h -H') > 0 THEN CALL DISPLAY_HELP
CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
    ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"  /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
SELECT
  WHEN ABBREV(start, "LASTMONTH") THEN DO
      PARSE VALUE DATEX("TODAY")     WITH yyyy"-"mm"-"dd"." jjj base_date .
      PARSE VALUE DATEX(mm 1 yyyy)   WITH yyyy"-"mm"-"dd"." jjj base_date .
      PARSE VALUE DATEX(base_date-1) WITH yyyy"-"mm"-"dd"." jjj .
      end_date = yyyy || jjj
      PARSE VALUE DATEX(mm 1 yyyy)   WITH yyyy"-"mm"-"dd"." jjj .
      start_date = yyyy || jjj
    END
  WHEN ABBREV(start, "LASTWEEK")  THEN DO
      x = WORDPOS(dow, days_of_week)
      PARSE VALUE DATEX(base_date-(x+6)) WITH yyyy "-" . "." jjj .
      start_date = yyyy || jjj
      PARSE VALUE DATEX(base_date-x)     WITH yyyy "-" . "." jjj .
      end_date = yyyy || jjj
    END
  WHEN ABBREV(start, "YESTERDAY") THEN DO
      start_date = yesterday_jjj
      end_date = yesterday_jjj
    END
  WHEN ABBREV(start, "TODAY")     THEN DO
      start_date = today_jjj
      end_date   = today_jjj
    END
  WHEN start < 0                  THEN DO
      PARSE VALUE DATEX(base_date+start) WITH yyyy "-" . "." jjj .
      start_date = yyyy || jjj
      IF finish ¬= "" & finish ¬= "." THEN DO
          PARSE VALUE DATEX(base_date+finish) WITH yyyy "-" . "." jjj .
          end_date = yyyy || jjj
        END
      ELSE end_date = today_jjj
    END
  WHEN start = ""                 THEN DO
      SAY "=====>"
      SAY "=====> I need at least a START Date to create IFASMFDP Parameters!"
      SAY "=====>"
      EXIT 8
    END
OTHERWISE
    PARSE VALUE start             WITH yyyy "-" mm  "-" dd .
    PARSE VALUE DATEX(mm dd yyyy) WITH yyyy "-" . "." jjj .
    start_date = yyyy || jjj
    IF finish ¬= "" & finish ¬= "." THEN DO
        PARSE VALUE finish            WITH yyyy "-" mm  "-" dd .
        PARSE VALUE DATEX(mm dd yyyy) WITH yyyy "-" . "." jjj .
        end_date = yyyy || jjj
      END
    ELSE end_date = today_jjj
END

QUEUE "  DATE("start_date","end_date")"
IF BEGIN ¬= "" THEN QUEUE "  START("BEGIN")"
IF END   ¬= "" THEN QUEUE "  END("END")"
ok='0';ADDRESS "MVS" "EXECIO" QUEUED() "DISKW SMFDPARM (FINIS"

EXIT exit_error
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE = 1; FALSE = 0  /* REXX functional values for TRUE and FALSE   */
                       /* Initialize and process non-positional parms */
  valid_parms = "ADJUST(FALSE) BEGIN() END() LEVEL1() LEVEL2() TEST(O)"
  match_length = 6                /* NP-Parms match on first # chars  */
  IF valid_parms ¬= '' THEN CALL DO_NP_PARMS

  no_submited = 0
  SYSUID = USERID()
  user_prefix = LEFT(SYSUID,4)
  exit_error = 0; sql_error = 0
  SYSMSGLVL1 = ""; SYSMSGLVL2 = ""
  Lower = "abcdefghijklmnopqrstuvwxyz"
  Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  days_of_week = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday"

  IF ADJUST ¬= TRUE THEN ADJUST = FALSE

  PARSE VALUE DATEX("TODAY")       WITH yyyy"-"mm"-"dd"." jjj base_date dow
  today_jjj     = yyyy || jjj
  PARSE VALUE DATEX(base_date - 1) WITH yyyy "-" . "." jjj .
  yesterday_jjj = yyyy || jjj

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG exit_or_return .                                                    /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
      source.i = SOURCELINE(i + 1)  /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO   /* No ISPF, use SAY to display help            *//*COPY*/
      DO i = 1 TO i                                                     /*COPY*/
          SAY source.i                                                  /*COPY*/
      END                                                               /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
      PARSE SOURCE . . rname .      /* Get REXX EXEC name             *//*COPY*/
                                                                        /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE" /*COPY*/
      DO i = 1 TO i    /* Build HELP table to display                 *//*COPY*/
          source = source.i                                             /*COPY*/
          ADDRESS "ISPEXEC" "TBADD RHELP02"                             /*COPY*/
      END                                                               /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                          /*COPY*/
      ZTDMARK = CENTER("----> END of Help <----",80)                    /*COPY*/
      ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"     /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                        /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',exit_or_return,3) THEN RETURN                        /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Possitional Parms in a           /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  vp_list = valid_parms ' '; in_list = inparms ' '                      /*COPY*/
  parm_list = ''; parm_error_list = ''                                  /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(valid_parms) UNTIL vp_list = ''                  /*COPY*/
      PARSE VALUE vp_list WITH parm.linx '(' parm_val.linx ') ' vp_list /*COPY*/
      parm_list = parm_list STRIP(LEFT(parm.linx,match_length))         /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(in_list, '(') > 0                                      /*COPY*/
      PARSE VALUE in_list WITH parm '(' value ') ' in_list              /*COPY*/
      UPPER parm           /* Don't want to translate value to UPPER */ /*COPY*/
      parm = STRIP(parm)                                                /*COPY*/
      parm_number = WORDPOS(STRIP(LEFT(parm,match_length)), parm_list)  /*COPY*/
      IF parm_number > 0 THEN parm_val.parm_number = value              /*COPY*/
      ELSE IF INDEX(value,")") > 0 THEN                                 /*COPY*/
           parm_error_list = parm_error_list parm"("value               /*COPY*/
      ELSE parm_error_list = parm_error_list parm"("value")"            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN parm_error_list ¬= '' & accept_all = TRUE THEN                 /*COPY*/
        anything_else = STRIP(in_list) parm_error_list                  /*COPY*/
    WHEN parm_error_list ¬= ''                     THEN DO              /*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"parm_error_list"' is an/are invalid Parm(s)", "YES"      /*COPY*/
        EXIT 8                                                          /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      anything_else = STRIP(in_list)                                    /*COPY*/
  END                                                                   /*COPY*/
  DO parm_inx = 1 TO linx                                               /*COPY*/
      SELECT                                                            /*COPY*/
        WHEN ABBREV(parm_val.parm_inx, "&")               |,            /*COPY*/
             ABBREV(parm_val.parm_inx, "*")               THEN          /*COPY*/
            INTERPRET parm.parm_inx "= '"parm_val.parm_inx"'"           /*COPY*/
        WHEN DATATYPE(parm_val.parm_inx, "NUM")           THEN          /*COPY*/
            INTERPRET parm.parm_inx "=" parm_val.parm_inx               /*COPY*/
        WHEN WORDPOS(parm_val.parm_inx, "FALSE TRUE") > 0 THEN          /*COPY*/
            INTERPRET parm.parm_inx "=" parm_val.parm_inx               /*COPY*/
        WHEN (LEFT(parm_val.parm_inx,1) = "'"             & ,           /*COPY*/
              RIGHT(parm_val.parm_inx,1) = "'")           | ,           /*COPY*/
             INDEX(parm_val.parm_inx,':') > 0             | ,           /*COPY*/
             INDEX(parm_val.parm_inx,'*') > 0             | ,           /*COPY*/
             INDEX(parm_val.parm_inx,'%') > 0             | ,           /*COPY*/
             INDEX(parm_val.parm_inx,'=') > 0             THEN          /*COPY*/
            INTERPRET parm.parm_inx "= parm_val."parm_inx               /*COPY*/
        WHEN INDEX(STRIP(parm_val.parm_inx), " ") > 0     THEN          /*COPY*/
            INTERPRET parm.parm_inx "=" parm_val.parm_inx               /*COPY*/
      OTHERWISE                                                         /*COPY*/
          ADDRESS "MVS" "SUBCOM TSO"                                    /*COPY*/
          IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE       /*COPY*/
          PARSE VALUE parm_val.parm_inx WITH PDS_name '(' rest          /*COPY*/
          SELECT                                                        /*COPY*/
            WHEN ¬(TSO_avail)                            THEN           /*COPY*/
                INTERPRET parm.parm_inx "=" parm_val.parm_inx           /*COPY*/
            WHEN SYSVAR("SYSNEST") = 'YES'               THEN           /*COPY*/
                INTERPRET parm.parm_inx "=" parm_val.parm_inx           /*COPY*/
            WHEN (INDEX(rest, ")") > 0                   &,             /*COPY*/
                 (ABBREV(rest, "+") | ABBREV(rest,"-")   |,             /*COPY*/
                  ABBREV(rest, "0)")))                   THEN           /*COPY*/
                INTERPRET parm.parm_inx "= '"parm_val.parm_inx"'"       /*COPY*/
            WHEN (LISTDSI(parm_val.parm_inx)       <= 4  | ,            /*COPY*/
                  LISTDSI("'"parm_val.parm_inx"'") <= 4  | ,            /*COPY*/
                  LISTDSI("'"PDS_name"'")          <= 4  | ,            /*COPY*/
                  LISTDSI(PDS_name)                <= 4) THEN           /*COPY*/
                INTERPRET parm.parm_inx "= parm_val."parm_inx           /*COPY*/
          OTHERWISE                                                     /*COPY*/
                INTERPRET parm.parm_inx "=" parm_val.parm_inx           /*COPY*/
          END                                                           /*COPY*/
          INTERPRET parm.parm_inx "=" parm_val.parm_inx                 /*COPY*/
      END                                                               /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM                              /*COPY*/
  IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'                   /*COPY*/
     ELSE ZERRALRM = 'NO'                                               /*COPY*/
  IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                       /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ002)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRMVS   */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok = '*' THEN RETURN  /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  CALL MVS_ERROR_DISPLAY            /* Display collected error info   *//*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  SIGNAL OFF SYNTAX                 /* Turn off all ERROR Trapping    *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
                                                                        /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
      nextl = SOURCELINE(elineno + e_i)                                 /*COPY*/
      IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)       /*COPY*/
      sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                     /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
      ecause  = ERRORTEXT(RC)       /* Brief description of error     *//*COPY*/
      expandl = "Can't INTERPRET source with SYNTAX errors!"            /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
      ecause  = CONDITION('D')      /* Brief description of error     *//*COPY*/
      full_line = sourcel           /* Begin getting EXECuted source  *//*COPY*/
      PARSE VALUE full_line WITH srcl ';' full_line                     /*COPY*/
      IF ¬(ABBREV(STRIP(srcl),"CALL")) &,                               /*COPY*/
         ¬(ABBREV(STRIP(srcl),"SAY"))  THEN INTERPRET "evals =" srcl    /*COPY*/
          ELSE evals = ""                                               /*COPY*/
      IF DATATYPE(evals, "NUM") | evals = "" THEN evals = srcl          /*COPY*/
      expandl = evals                                                   /*COPY*/
      DO WHILE full_line ¬= ''      /* loop to handle ';' in source   *//*COPY*/
          PARSE VALUE full_line WITH srcl ';' full_line                 /*COPY*/
          IF ¬(ABBREV(STRIP(srcl),"CALL")) THEN INTERPRET "evals =" srcl/*COPY*/
              ELSE evals = ""                                           /*COPY*/
          IF DATATYPE(evals, "NUM") | evals = "" THEN evals = srcl      /*COPY*/
          expandl = expandl ';' evals                                   /*COPY*/
      END                                                               /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR'      THEN           /*COPY*/
         emsg = ZERRLM                                                  /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') = 'VAR' & SYSMSGLVL1 ¬= "" THEN           /*COPY*/
         IF SYMBOL('SYSMSGLVL2') = 'VAR'                 THEN           /*COPY*/
              emsg = SYSMSGLVL1 "--" SYSMSGLVL2                         /*COPY*/
         ELSE emsg = SYSMSGLVL1                                         /*COPY*/
  OTHERWISE                                                             /*COPY*/
      emsg = 'No available ERROR description.'                          /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0 THEN                      /*COPY*/
     QUEUE "SYSREASON: '"SYSREASON"'"                                   /*COPY*/
  IF etype = 'NOVALUE' THEN exit_error = 4   /* Set EXIT error level  *//*COPY*/
     ELSE exit_error = RC                                               /*COPY*/
  erc = exit_error      /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  TRACE("O")                                                            /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresults = 1 TO eresult.0                                          /*COPY*/
      PARSE PULL eresult.eresults                                       /*COPY*/
  END                                                                   /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls) /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY CENTER(LEFT('          Error Type:' etype,80),ls)                 /*COPY*/
  SAY CENTER(LEFT('         Error Cause:' ecause,80),ls)                /*COPY*/
  SAY CENTER(LEFT('                  RC:' erc,80),ls)                   /*COPY*/
  SAY CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)             /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
      SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)  /*COPY*/
  END                                                                   /*COPY*/
  SAY CENTER(LEFT('         Source Line:' elineno,80),ls)               /*COPY*/
  SAY LEFT('   Error Description:' emsg,ls)                             /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY LEFT('Source line reads as:' sourcel,ls)                          /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY LEFT('  Source EXECutes as:' expandl,ls)                          /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
  SAY ''                                                                /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
EXIT exit_error                     /* EXIT with error return code    *//*COPY*/
