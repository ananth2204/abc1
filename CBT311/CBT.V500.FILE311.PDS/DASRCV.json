{"INMR01": {"INMLRECL": 80, "INMFNODE": "IBMNODE", "INMFUID": "IBMUSER", "INMTNODE": "IBMMAIL", "INMTUID": "IBMUSER", "INMFTIME": "19980126124732000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 137, "INMBLKSZ": 32760, "INMRECFM": "VB", "INMDIR": 1, "INMDSNAM": "IBMUSER.DA.SOURCEV", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"IBMUSER.DA.SOURCEV": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 32760, "DS1LRECL": 137, "DS1RECFM": "VB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 14, "DVAMAXRC": 32760, "DVACYL": 2656, "DVATRK": 15, "DVATRKLN": 47968, "DVAOVHD": 256, "num_header_records": 2, "DS1REFD": "980021", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x05'", "DS1LSTAR": "b'\\x00\\x05\\x04'", "DS1TRBAL": "b'\\xa7\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\r\\xb0\\x00\\x04\\xa6@H'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\r\\xb0\\x00\\x04\\xa6@H'", "b'X\\xf2\\xfdp\\x00\\x00\\x03\\xe2\\x00\\t\\x03\\xe3\\x00\\x08\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$README": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x00\\x98\\x01o\\x00\\x98\\x01o\\x17\\x11\\x00)\\x00)\\x00\\x00\\xc4\\xc1\\xd3\\xc3\\xd6\\xc3\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-16T00:00:00", "modifydate": "1998-01-16T17:11:36", "lines": 41, "newlines": 41, "modlines": 0, "user": "DALCOCK"}, "text": " Source library - David Alcock's various programs - Library 2 of 2\n\n The contents of this file are FREEWARE. Use at your own risk. It\n is provided for your enjoyment and neither David Alcock or his\n employer provides any warranty for their use.  I'd like to hear how\n they work on your system:\n\n    David Alcock\n    dalcock@XYZ.com ...... Internet email (work)\n    davea@ticnet.com ..... Internet email (home)\n\n    This package may be obtained at:\n    http://www.ticnet.com/davea/mvs/dasrc.htm\n\n Package contents:\n\n - DA.SOURCE - fixed block lrecl 80 library\n   (in zip file as DASRC.XMI)\n - DA.SOURCEV - variable block library <------------------- This file\n   (in zip file as DASRCV.XMI)\n\n =====================================================================\n\n F i l e   C o n t e n t s . . . . . . . . . . . . . . . . . . . . . .\n\n Member   Description\n ------   -----------\n $$README Text: this file\n\n R$EREP   REXX: Invoke the EREP ISPF application\n\n                Realname: LRS\n\n R$EREP31 REXX: Used to create a EREP date card used by the sample\n                X$EREP job to pull in the last 30 days of LOGREC data.\n\n                Realname: EREP31D\n\n =====================================================================\n\n May the SOURCE be with you...Obi Wan\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R$EREP": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x00\\x98\\x01o\\x00\\x98\\x01o\\x17\\x11\\x04\\xf4\\x04\\xf4\\x00\\x00\\xc4\\xc1\\xd3\\xc3\\xd6\\xc3\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-16T00:00:00", "modifydate": "1998-01-16T17:11:34", "lines": 1268, "newlines": 1268, "modlines": 0, "user": "DALCOCK"}, "text": "        /* REXX\n         |\n         |  Name: LRS\n         |\n         |  Author: David Alcock\n         |\n         |  Application: Logrec Software Events\n         |\n         |  Written: 27-Sep-1991\n         |\n         |  Purpose: Process the Software LOGREC file into an ISPF table for\n         |           easy persual.\n         |\n         |  Oops:\n         |  - This application is not Year 2000 compilant yet.\n         |\n         |\n         */\n        lrsVer = \"v1.60\"                   /* LRS ISPF application version    */\n        address ISPEXEC \"VPUT (LRSVER)\"    /* Give it to ISPF for safekeeping */\n\n        arg options\n\n        /***********************************************************************\n        * Installation dependent code                                          *\n        ***********************************************************************/\n\n        accin_dsn = \"'SYS9.SYS.LOGREC.SOFTLOG'\"    /* default input name */\n\n        /*\n         | Create CPU table, with:\n         | - Header: \"CPUS4LRS\"\n         | - Entries:\n         |   - 6 bytes: CPU serial number in LPAR format (if PR/SM)\n         |   - 8 bytes: System name\n         | - End: X'FF,FF,FF,FF'\n         |\n         |     Note: The best thing to do here would be to process\n         |           an ISPF table.  The user would then have a way\n         |           to update this ISPF CPU table by an option.\n         */\n        DA#lrsc = \"CPUS4LRS\"            /* Get Header */\n        cpu.1  = \"010491XYZ1    \"       /* CPU entry */\n        cpu.2  = \"110491XYZ1    \"       /* CPU entry */\n        cpu.3  = \"210491XYZ1    \"       /* CPU entry */\n        cpu.4  = \"310491XYZ1    \"       /* CPU entry */\n        cpu.5  = \"410491XYZ1    \"       /* CPU entry */\n        cpu.6  = \"510491XYZ1    \"       /* CPU entry */\n        cpu.7  = \"050491XYZ5    \"       /* CPU entry */\n        cpu.8  = \"150491XYZ5    \"       /* CPU entry */\n        do i = 1 to 8\n           DA#lrsc = DA#lrsc||left(cpu.i,14)\n           end\n        /* */\n        DA#lrsc = DA#lrsc||'FFFFFFFF'x  /* Add Trailer */\n        address ISPEXEC \"VPUT (DA#LRSC)\"\n\n        /***********************************************************************\n        * Handle input options                                                 *\n        ***********************************************************************/\n\n        option_num = words(options)             /* Obtain number of words */\n        error = \"\"                              /* No errors yet */\n        if option_num <> 0 then ,\n           do i = 1 to option_num\n              select\n\n                when abbrev(word(options,i),'DSN') = 1 then do\n                     accin_dsn = word(options,i+1)\n                     i = i + 1\n                     end\n\n                /* other options to parse go here... */\n\n                otherwise\n                 error = error||\" \"||word(options,i)\n                 end\n              end   /* of \"do i = 1 to option_num\" */\n        /*\n        *** Gripe about errors (if any)\n        */\n        if error <> \"\" then do\n           zedsmsg = \"Invalid parms\"\n           zedlmsg = \"Parm(s) in error: \"error\n           address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n           exit\n           end\n\n        /***********************************************************************\n        * Verify and allocate the dump log dataset                             *\n        ***********************************************************************/\n\n        x = SYSDSN(accin_dsn)\n        if x <> \"OK\" then do\n           zedsmsg = x\n           zedlmsg = \"Error with DSN=\"accin_dsn\n           address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n           exit\n           end\n\n        status = \"Processing LOGREC entries in \"accin_dsn\n        info1 = \"\"\n        info2 = \"\"\n        info3 = \"\"\n        info4 = \"\"\n        address ISPEXEC \"CONTROL DISPLAY LOCK\"\n        address ISPEXEC \"DISPLAY PANEL(LRS$LOGO)\"\n\n        /*********************************************************************\n        *  Create unique table names and get ISPF to create tables           *\n        *********************************************************************/\n\n        lrstable = \"LRST\"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)\n        address ISPEXEC \"VPUT LRSTABLE\"\n        address ISPEXEC \"TBCREATE \"lrstable ,\n                        \"NAMES(LRSTIME,LRSDATEJ,LRSDATEG,LRSDAY,LRSDAYN,LRSTYPE,\",\n                        \"LRSJOBN,LRSCOMP,LRSCSCT,LRSREAS,LRSCPU,LRSSEQN,LRSDESC,\",\n                        \"LRSBTIME,LRSBDATE)\",\n                        \"NOWRITE REPLACE\"\n        address ISPEXEC \"TBSORT \"lrstable\" FIELDS(LRSBDATE,B,A)\"\n\n        statable = \"LRSS\"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)\n        address ISPEXEC \"VPUT STATABLE\"\n        address ISPEXEC \"TBCREATE \"statable\" NAMES(LINE) NOWRITE REPLACE\"\n\n        sumtable = \"SUMT\"SUBSTR(TIME(),4,2)SUBSTR(TIME(),7,2)\n        address ISPEXEC \"VPUT SUMTABLE\"\n        address ISPEXEC \"TBCREATE \"sumtable ,\n                        \"NAMES(SUMMOD,SUMCSCT,SUMREAS,SUMSDATE,SUMEDATE,SUMCOUNT)\",\n                        \"NOWRITE REPLACE\"\n        address ISPEXEC \"TBSORT \"sumtable\" FIELDS(SUMCOUNT,N,D)\"\n\n        /*********************************************************************\n        *  Invoke the assembler routine to format the dataset entries        *\n        *  into table entries                                                *\n        *********************************************************************/\n\n        address TSO     \"ALLOCATE FILE(ACCIN) DA(\"accin_dsn\") SHR REUSE\"\n        address ISPEXEC \"SELECT PGM(DA$EREP)\"\n        address TSO     \"FREE FILE(ACCIN)\"\n\n        call \"OUTTRAP\" \"dummy.\",\"*\"\n        address TSO     \"FREE FILE(LRSCTBL)\"\n        call \"OUTTRAP\" \"OFF\"\n\n        address ISPEXEC \"TBSTATS \"lrstable\" ROWCURR(LRSROWS)\"\n\n        /*********************************************************************\n        *  Display the table                                                 *\n        *********************************************************************/\n\n        /*\n        *** Initialize\n        */\n\n        address ISPEXEC \"TBSCAN \"lrstable\" ARGLIST(LRSBDATE)\"\n        address ISPEXEC \"TBTOP \"lrstable       /* Get to the top of things */\n        lrstsel = \"\"                           /* Set table selection to null */\n        lrstbdrc = 0                           /* Starting TBDISPL return code */\n        lrstbcrp = 1                           /* Row number one */\n        lrsEREP.0 = 0                          /* Initialize number of EREP reports */\n        lrsEREPSave = 0                        /* Don't Save EREP reports... */\n        lrsSortName = \"LRSDATEG\"               /* Sort name */\n        lrsSortKey = \"DATE\"                    /* Default sort key */\n        lrsSortDir = \"A\"                       /* Default sort direction */\n        lrsMode = \"ALL\"                        /* Showing all records */\n        lrsVerb = \"\"                           /* No verb yet */\n        lrsOption = \"SHORT\"                    /* Set display to one-liner */\n        call Setup_lrsTable                    /* Set up table display models and titles */\n\n        /*\n        *** Skip to first row of the current date\n        */\n\n        if lrsCDRow <> \"0\" then do\n           address ISPEXEC \"TBSKIP \"lrstable \"NUMBER(\"lrsCDRow\")\"\n           lrstbcrp = lrsCDRow\n           zedsmsg = \"Last Date\"\n           zedlmsg = \"You are located at the first record for last date in the database\"\n           address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n           end\n\n        /*\n        *** Process table until user hits the END key\n        */\n\n        do while lrstbdrc < 8\n           if lrstbdrc = 4 then address ISPEXEC \"TBDISPL \"lrstable\n           else address ISPEXEC \"TBDISPL \"lrstable\" PANEL(\"lrstpanl\") CSRROW(\"lrstbcrp\") POSITION(LRSTBCRP) AUTOSEL(NO)\"\n\n           lrstbdrc = rc\n           lrsVerb = \"TB\"\n           if lrstbdrc < 8 then do\n\n              /******************************************************************\n              * Process the primary line for commands                           *\n              *******************************************************************/\n\n              if zcmd <> '' then do\n                 parse value zcmd with lrsVerb \" \" lrsAction \" \" lrsDirection\n                 lrsZCMD = zcmd\n                 zcmd = ''\n                 lrsVerb = translate(lrsVerb)\n\n                 select\n\n                   /***********************************************************\n                   * Put report of table entries to the list file             *\n                   ***********************************************************/\n\n                   when lrsVerb == 'REPORT' then do\n                        if lrsRows > 3000 then do       /* Lotsa records? */\n                           status = \"Generating report to list file\"\n                           info1 = \"\"\n                           info2 = \"Number of records: \"strip(lrsRows,'L','0')\n                           info3 = \"\"\n                           info4 = \"\"\n                           address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                           address ISPEXEC \"CONTROL DISPLAY LOCK\"\n                           address ISPEXEC \"DISPLAY PANEL(LRS$LOGO)\"\n                           address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n                           end\n                        Output = \"1\"strip(lrsRange) \"- Generated:\" date() time()\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                        Output = \" \"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n\n                        Output = \" Date         Day Time        RecType  Jobname  Reason   Module   Csect    CPU     \",\n                                 \"SeqNo Description\"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                        Output = \" ------------ --- ----------- -------- -------- -------- -------- -------- --------\",\n                                 \"----- -----------\"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n\n                        address ISPEXEC \"TBTOP \"lrstable\n                        LRC = 0\n                        do while LRC = 0\n                           address ISPEXEC \"TBSKIP \"lrstable\n                           LRC = rc\n                           if lrc == 0 then do\n                              output = \" \"|| ,\n                                       left(lrsdateg,8)||\" \"||substr(lrsdatej,4,3)||\" \"left(lrsday,3) ,\n                                       left(lrstime,11)||\" \"||left(lrstype,8)||\" \"||left(lrsjobn,8) ,\n                                       left(lrsreas,8)||\" \"||left(lrscomp,8)||\" \"||left(lrscsct,8) ,\n                                       left(lrscpu,8)||\" \"||left(lrsseqn,5)||\" \"||left(lrsdesc,30)\n\n                              address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                              end\n                           end /* of \"do while LRC = 0\" */\n\n                        zedsmsg = \"Output created\"\n                        zedlmsg = \"LOGREC entry log put into list dataset\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * This is a good verb NOT!                                 *\n                   ***********************************************************/\n\n                   when lrsVerb == '?' then do\n                        zedsmsg = \"Don't question me\"\n                        zedlmsg = \"Take your riddlin' Garth\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Put the table display in short (one line mode)           *\n                   ***********************************************************/\n\n                   when lrsVerb == 'SHORT' then do\n                        lrsOption = \"SHORT\"\n                        call Setup_lrsTable\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Put the table display in long (two line mode)            *\n                   ***********************************************************/\n\n                   when lrsVerb == 'LONG' then do\n                        lrsOption = \"LONG\"\n                        call Setup_lrsTable\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Save the EREP records                                    *\n                   ***********************************************************/\n\n                   when lrsVerb == 'SAVERPT' then do\n                        lrsEREPSave = 1\n                        zedsmsg = \"Saving Reports\"\n                        zedlmsg = \"EREP reports will not be deleted when terminating SOFTLOG\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Don't save EREP records                                  *\n                   ***********************************************************/\n\n                   when lrsVerb == 'DSAVERPT' then do\n                        lrsEREPSave = 0\n                        zedsmsg = \"Deleting Reports\"\n                        zedlmsg = \"EREP reports will be deleted when terminating SOFTLOG\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Show summary table of record types                       *\n                   ***********************************************************/\n\n                   when lrsVerb == 'SUM' | lrsVerb == 'SUMM' then do\n                        address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                        call Show_Summary_Table\n                        address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Sort the table by field and direction (if given)         *\n                   ***********************************************************/\n\n                   when lrsVerb == 'SORT' then do\n                        LastSortName = lrsSortName           /* Save Sort Name */\n                        LastSortDir = lrsSortDir             /* Save Sort direction */\n                        lrsAction = translate(lrsAction)     /* Ensure uppercase for compare */\n\n                        if lrsDirection <> \"\" then do\n                           lrsDirection = translate(lrsDirection)\n                           select\n                              when lrsDirection == 'D' then lrsSortDir = 'D'\n                              when lrsDirection == 'A' then lrsSortDir = 'A'\n                              otherwise\n                                 zedsmsg = \"Invalid Sort Dir\"\n                                 zedlmsg = \"Invalid sort direction given, previous direction kept\"\n                                 address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                 end\n                           end\n\n                        lrsSortKey = lrsAction\n                        select\n                          when lrsAction == \"\"        then do\n                                                           lrsSortKey  = \"DATE\"\n                                                           lrsSortName = \"LRSDATEG\"\n                                                           end\n                          when lrsAction == \"DATE\"    then lrsSortName = \"LRSDATEG\"\n                          when lrsAction == \"DAY\"     then lrsSortName = \"LRSDAYN\"\n                          when lrsAction == \"TIME\"    then lrsSortName = \"LRSTIME\"\n                          when lrsAction == \"RECTYPE\" then lrsSortName = \"LRSTYPE\"\n                          when lrsAction == \"JOB\"     then lrsSortName = \"LRSJOBN\"\n                          when lrsAction == \"JOBNAME\" then lrsSortName = \"LRSJOBN\"\n                          when lrsAction == \"MODULE\"  then lrsSortName = \"LRSCOMP\"\n                          when lrsAction == \"CSECT\"   then lrsSortName = \"LRSCSCT\"\n                          when lrsAction == \"REASON\"  then lrsSortName = \"LRSREAS\"\n                          when lrsAction == \"CPU\"     then lrsSortName = \"LRSCPU\"\n                          when lrsAction == \"SEQNO\"   then ,\n                               if lrsseqn_o == 0 then lrsSortName = \"ERROR\"\n                               else lrsSortName = \"LRSSEQN\"\n                          when lrsAction == \"JULIAN\"  then ,\n                               if lrsdatej_o == 0 then lrsSortName = \"ERROR\"\n                               else lrsSortName = \"LRSDATEJ\"\n                          when lrsAction == \"DESC\"    then ,\n                               if lrsdesc_o == 0 then lrsSortName = \"ERROR\"\n                               else lrsSortName = \"LRSDESC\"\n                          when lrsAction == \"DESCRIPTION\"    then ,\n                               if lrsdesc_o == 0 then lrsSortName = \"ERROR\"\n                               else lrsSortName = \"LRSDESC\"\n                          otherwise\n                            lrsSortName = \"LRSDATEG\"\n                            lrsSortKey  = \"DATE\"\n                            zedsmsg = \"Invalid Sort Field\"\n                            zedlmsg = \"Invalid sort Field was given, DATE will be used\"\n                            address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                            end\n\n                        if lrsSortName == \"ERROR\" then do\n                           lrsSortName = LastSortName\n                           lrsSortKey  = \"DATE\"\n                           zedsmsg = \"Field not on screen\"\n                           zedlmsg = \"The field \"lrsAction\" is not shown on \"lrsOption\" table display\"\n                           address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                           end\n                        else if LastSortName == lrsSortName then ,\n                                if LastSortDir == lrsSortDir then do\n                                   zedsmsg = \"Entries in sort order\"\n                                   zedlmsg = \"This table is already in sort order by \"lrsSortName\n                                   address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                   end\n                                else call SetUp_lrsTable\n                             else call SetUp_lrsTable           /* Set up table for new highlighted field */\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Show statistics table                                    *\n                   ***********************************************************/\n\n                   when lrsVerb == \"STATS\" then do\n                        address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                        call Show_Stats_Table\n                        address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Show \"only\" certain rows                                 *\n                   ***********************************************************/\n\n                   when lrsVerb == \"ONLY\" then do\n                        lrsAction = translate(lrsAction)\n\n\n                        address ISPEXEC \"TBVCLEAR \"lrstable  /* Clear all row variables for TBSARG */\n\n                        onlycode = \"\"\n                        if words(lrsZCMD) == 1 then do\n                           address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                           address ISPEXEC \"DISPLAY PANEL(LRS$ONLY)\"\n                           onlyrc = rc\n                           address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n                           if onlyrc <> 0 then onlycode = \"ER\"\n                           else call Get_Only_Field\n                           end\n                        else do i = 2 to words(lrsZCMD) by 2 /* loop thru pairs */\n                                field = word(lrsZCMD,i)      /* Like RECTYPE    */\n                                value = word(lrsZCMD,i+1)    /* ..   ABEND      */\n                                call Get_Only_Field          /* Get only field  */\n                                end\n\n                        select\n                          when onlycode == \"\"   then do\n                               lrsMode = \"ONLY\"\n                               if lrsTPanl == \"LRS$ETDL\" then lrsTPanl = \"LRS$ETSL\"\n                                  else lrsTPanl = \"LRS$ETSS\"\n                               address ISPEXEC \"TBTOP  \"lrstable\n                               address ISPEXEC \"TBSARG \"lrstable\n                               sarg_rc = rc\n                               if sarg_rc <> 0 then do\n                                  zedsmsg = \"Not Found\"\n                                  zedlmsg = \"The field \"lrsAction\" is not found\"\n                                  address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                  end\n                               else do\n                                    zedsmsg = \"OK\"\n                                    zedlmsg = \"Only Table entries with \"lrsAction\" equal to \"lrsDirection\" are shown\"\n                                    address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                    end\n                               end\n                          when onlycode == \"OFF\" then do\n                               lrsMode = \"ALL\"\n                               if lrsTPanl == \"LRS$ETSL\" then lrsTPanl = \"LRS$ETDL\"\n                                  else lrsTPanl = \"LRS$ETDS\"\n                               zedsmsg = \"All entries\"\n                               zedlmsg = \"All table entries are now shown\"\n                               address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                               end\n                          when onlycode == \"ND\" then do\n                               zedsmsg = \"Field not on screen\"\n                               zedlmsg = \"The field \"lrsAction\" is not shown on \"lrsOption\" table display\"\n                               address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                               end\n                          otherwise\n                             nop /* We have already issued message for \"ER\" */\n                             end\n\n                        end\n\n                   /***********************************************************\n                   * Locate to a row in the current sort field                *\n                   ***********************************************************/\n\n                   when lrsVerb == \"L\" | lrsVerb == \"LOC\" then do\n                        lrsAction = translate(lrsAction)\n                        locate_rc = 0\n\n                        if lrsSortName == \"LRSDAYN\" then ,\n                           select\n                             when lrsAction == \"SUN\" | lrsAction == \"SUNDAY\"    then lrsAction = 0\n                             when lrsAction == \"MON\" | lrsAction == \"MONDAY\"    then lrsAction = 1\n                             when lrsAction == \"TUE\" | lrsAction == \"TUESDAY\"   then lrsAction = 2\n                             when lrsAction == \"WED\" | lrsAction == \"WEDNESDAY\" then lrsAction = 3\n                             when lrsAction == \"THU\" | lrsAction == \"THURSDAY\"  then lrsAction = 4\n                             when lrsAction == \"FRI\" | lrsAction == \"FRIDAY\"    then lrsAction = 5\n                             when lrsAction == \"SAT\" | lrsAction == \"SATURDAY\"  then lrsAction = 6\n                             otherwise\n                               locate_rc = 80\n                               zedsmsg = \"Invalid locate value\"\n                               zedlmsg = \"Locates in the Day field must of type 'FRI' or 'FRIDAY'\"\n                               address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                               end\n\n                        if locate_rc == 0 then do\n                           address ISPEXEC \"TBTOP \"lrstable\n\n                           lrsActionL = length(lrsAction)\n                           do while locate_rc == 0\n                              address ISPEXEC \"TBSKIP \"lrstable\n                              locate_rc = rc\n\n                              interpret \"locate_key = substr(\"lrsSortName\",1,lrsActionL)\"\n                              if locate_key == lrsAction then locate_rc = 99\n                              if lrsSortDir == 'A' then ,\n                                 if locate_key > lrsAction then locate_rc = 98\n                                 else nop\n                              else if locate_key < lrsAction then locate_rc = 97\n                              end /* of \"do while locate_rc = 0\" */\n\n                           if locate_rc < 96 then do\n                              zedsmsg = \"Value not found\"\n                              zedlmsg = \"Value not found in current sort field\"\n                              address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                              end\n                           end\n\n                        lrsVerb = \"\"\n                        end\n\n                   /***********************************************************\n                   * Invalid verb entered on primary (command) line           *\n                   ***********************************************************/\n\n                   otherwise\n                        zedsmsg = \"Invalid Verb\"\n                        zedlmsg = \"Verb \"verb\" not valid\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        verb = \"\"\n                        end\n                 end\n\n              /***********************************************************************\n              * Process the table selections                                         *\n              ***********************************************************************/\n\n              lrstsel = translate(lrstsel)\n\n              select\n\n                /********************************************************\n                * Dummy select for primary line simulations of line     *\n                * commands: Command ===> L 92/03/06                     *\n                ********************************************************/\n\n                when verb == '' then nop\n\n                /*********************************************************\n                * Show only the Tourist file for a invocation of EREP    *\n                *********************************************************/\n\n                when lrstsel == 'T' then do\n\n                     node =  \"D\"substr(lrsdateg,1,2)||substr(lrsdateg,4,2)||substr(lrsdateg,7,2)|| ,\n                            \".T\"substr(lrstime,1,2)||substr(lrstime,4,2)||substr(lrstime,7,2)||substr(lrstime,10,1)\n\n                     if lrsseqn <> \"\" then node = node||\".S\"lrsseqn\n\n                     dsn = \"EREP.\"node\".TOURIST\"\n                     call Browse_Dataset\n\n                     end\n\n                /*********************************************************\n                * Select event for report by LOGREC program              *\n                *********************************************************/\n\n                when lrstsel == 'S' then do\n\n                     erep_firsttime = 1\n                     node =  \"D\"substr(lrsdateg,1,2)||substr(lrsdateg,4,2)||substr(lrsdateg,7,2)|| ,\n                            \".T\"substr(lrstime,1,2)||substr(lrstime,4,2)||substr(lrstime,7,2)||substr(lrstime,10,1)\n\n                     if lrsseqn == \"\" then ,\n                        status = \"Invoking EREP to generate report on this \"lrstype\" entry\"\n                     else do\n                          node = node||\".S\"lrsseqn\n                          status = \"Invoking EREP to generate report on this \"lrstype\" entry: SEQ\"lrsseqn\n                          end\n\n                     if lrsEREP.0 <> 0 then ,              /* See if we have already created report */\n                        do i = 1 to lrsEREP.0\n                           if lrsEREP.i = lrsseqn then do\n                              erep_firsttime = 0\n                              i = lrsEREP.0  /* break the do loop */\n                              end\n                           end\n\n                     if erep_firsttime then do             /* Have a report already created ? */\n                        dsn = \"EREP.\"node\".EREPPT\"\n                        x = SYSDSN(dsn)\n                        if x == \"OK\" then erep_firsttime = 0\n                        end\n\n                     if erep_firsttime then do\n\n                        i = lrsEREP.0 + 1       /* Increment total invocation count by 1 */\n                        lrsEREP.0 = i           /* Set to new total invocation count */\n                        lrsEREP.i = node        /* Save this node for next time */\n\n                        yy = substr(lrsdatej,1,2)\n                        ddd = substr(lrsdatej,4,3)\n                        shh = substr(lrstime,1,2)\n                        smm = substr(lrstime,4,2)\n                        ehh = substr(lrstime,1,2)\n\n                        emm = smm + 1\n                        if emm > 59  then do          /* New Hour? */\n                           ehh = shh + 1\n                           if  ehh = 24 then ehh = \"00\"\n                           emm = \"00\"\n                           end\n                        if length(emm) == 1 then emm = \"0\"emm\n                        if length(ehh) == 1 then ehh = \"0\"ehh\n\n                        select\n                          when substr(lrstype,1,3) == 'IPL' then type = 'I'\n                          when substr(lrstype,1,3) == 'EOD' then type = 'E'\n                          otherwise\n                            type = 'S'   /* ABEND, Prog-Int, Symptom, etc. */\n                            end\n\n                        parm = \"ACC=N,DATE=(\"yy||ddd\"),\"\n                        if lrsseqn <> \"\" then parm = parm||\"ERRORID=(\"lrsseqn\"),\"\n                        parm = parm||\"HIST=Y,LINECT=999,PRINT=PT,\"\n                        parm = parm||\"TIME=(\"shh||smm\",\"ehh||emm\"),\"\n                        parm = parm||\"TYPE=\"type\",ZERO=N\"\n\n                        info1 = \"Entry made at \"lrstime\" on \"lrsdatej lrsday lrsdateg\n                        info2 = \"> \"lrstype lrsjobn lrscomp lrscsct lrsreas \"CPU: \"lrscpu\n                        info3 = \" \"\n                        info4 = \"> IFCEREP1 parm: \"parm\n                        address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                        address ISPEXEC \"CONTROL DISPLAY LOCK\"\n                        address ISPEXEC \"DISPLAY PANEL(LRS$LOGO)\"\n                        address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n\n                        address TSO \"ALLOCATE FILE(EREPPT)  DATASET(EREP.\"node\".EREPPT) NEW SPACE(5,5) TRACKS REUSE\"\n                        address TSO \"ALLOCATE FILE(TOURIST) DATASET(EREP.\"node\".TOURIST) NEW SPACE(2,2) TRACKS REUSE\"\n                        address TSO \"ALLOCATE FILE(SYSIN) DUMMY REUSE\"\n                        address TSO \"ALLOCATE FILE(DIRECTWK) SPACE(5) CYLINDER NEW DELETE\"\n                        address TSO \"ALLOCATE FILE(ACCIN) DA(\"accin_dsn\") SHR REUSE\"\n\n                        address TSO \"CALL 'SYS1.LINKLIB(IFCEREP1)' '\"parm\"'\"\n                        erep_rc = rc\n\n                        address TSO \"FREE FILE(ACCIN)\"\n                        address TSO \"FREE FILE(DIRECTWK)\"\n\n                        if erep_rc == 0 then dsn = \"EREP.\"node\".EREPPT\"\n                        else do\n                             zedsmsg = \"EREP failed\"\n                             zedlmsg = \"Invocation of EREP for the event failed, check this file\"\n                             address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                             dsn = \"EREP.\"node\".TOURIST\"\n                             end\n                        end\n\n                     else dsn = \"EREP.\"node\".EREPPT\"\n\n                     panel = 'ISRBROBF'       /* Standard IBM panel name */\n                     call Browse_Dataset\n\n                     end\n\n                /*********************************************************\n                * Show row variables                                     *\n                *********************************************************/\n\n                when lrstsel == '?' then do\n                     address ISPEXEC \"CONTROL DISPLAY SAVE\"\n                     address ISPEXEC \"DISPLAY PANEL(LRS$EIN)\"\n                     address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n                     end\n\n                /*******************************************************\n                * Hit enter (Null) or specified an incorrect line cmd  *\n                *******************************************************/\n\n                otherwise\n                   if lrstsel == \"\" then do\n                        zedsmsg = lrstbcrp\"=CRP\"\n                        zedlmsg = \"CRP!\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                      address ISPEXEC \"TBSKIP \"lrstable \"NUMBER(\"lrstbcrp\")\"\n                      end\n                   else do\n                        zedsmsg = \"Incorrect option\"\n                        zedlmsg = \"Row selection option was invalid\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        end\n                   end /* of \"otherwise */\n\n                lrstsel = ''\n\n              end /* of \"if lrstbdrc == 0\" */\n\n           end /* of \"do while lrstbdrc = 0\" */\n\n        address ISPEXEC \"TBCLOSE \"lrstable\n        address ISPEXEC \"TBCLOSE \"sumtable\n        address ISPEXEC \"TBCLOSE \"statable\n\n        /*********************************************************************\n        * Delete any LOGREC report files we have created during this session *\n        *********************************************************************/\n\n        if lrsEREPSave then NOP         /* user wants to save them ? */\n        else if lrsEREP.0 <> 0 then do\n                number = lrsEREP.0 * 2\n                status = \"Deleting \"number\" EREP files created in this session\"\n                info1 = \"\"\n                info2 = \"Note: Terminating SOFTLOG application\"\n                info3 = \"\"\n                info4 = \"\"\n                address ISPEXEC \"CONTROL DISPLAY LOCK\"\n                address ISPEXEC \"DISPLAY PANEL(LRS$LOGO)\"\n\n                call \"OUTTRAP\" \"dummy.\",\"*\"\n                do i = 1 to lrsEREP.0\n                   address TSO \"DELETE EREP.\"lrsEREP.i\".EREPPT\"\n                   address TSO \"DELETE EREP.\"lrsEREP.i\".TOURIST\"\n                   end\n                call \"OUTTRAP\" \"OFF\"\n\n                end\n\n        /*********************************************************************\n        * Common exit from LRS exec                                          *\n        *********************************************************************/\n\n        zedsmsg = \"Complete\"\n        zedlmsg = \"SoftLog processing complete\"\n        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        exit\n\n        /*********************************************************************\n        *  Set up table models and titles based on option                    *\n        *********************************************************************/\n\n        Setup_lrsTable:\n        /*\n        *** Fix up table titles and models\n        */\n        address ISPEXEC \"VGET ZSCREENW\"\n        if lrsOption = \"LONG\" then do\n           if zscreenw > 80 then do\n              if lrsMode = \"ALL\" then lrstpanl = \"LRS$ETDL\"\n              else lrstpanl = \"LRS$ETSL\"\n              vars = \"(LRSTSEL,LRSDATEG,LRSDAY,LRSSEQN)\"\n              lrst1   = \"  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU     Seqno\"\n              lrst2   = \"  Description\"\n              lrsmod1 = \"_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU `Z   ! !\"\n                     /* \"....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9\" */\n              lrst2   = \"  Julian       Description\"\n              lrsmod2 = \"  $LRSDATEJ    `LRSDESC ! !\"\n              lrst3   = \"  -----------------------------------------------------------------------------------\"\n              lrsseqn_o  = 81\n              lrsseqn_m  = 1\n              lrsdesc_o  = 16\n              lrsdesc_m  = 2\n              lrsdatej_o = 3\n              lrsdatej_m = 2\n              end\n           else do\n                if lrsMode = \"ALL\" then lrstpanl = \"LRS$ETDL\"\n                else lrstpanl = \"LRS$ETSL\"\n                vars = \"(LRSTSEL,LRSDATEG,LRSDAY,LRSSEQN)\"\n                lrst1   = \"  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU\"\n                lrsmod1 = \"_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU\"\n                       /* \"....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8\" */\n                lrst2   = \"  Julian       Seqno Description                                                \"\n                lrsmod2 = \"  $LRSDATEJ    `Z    `LRSDESC                                                   \"\n                lrst3   = \"  ------------------------------------------------------------------------------\"\n                lrsseqn_o   = 16\n                lrsseqn_m   = 2\n                lrsdatej_o  = 3\n                lrsdesc_o   = 22\n                lrsdesc_m   = 2\n                end\n           end  /* of \"if lrsOption = \"LONG\" then do\" */\n        else do\n             if lrsMode = \"ALL\" then lrstpanl = \"LRS$ETDS\"\n             else lrstpanl = \"LRS$ETSS\"\n             vars = \"(LRSTSEL,LRSDATEG,LRSDAY)\"\n             lrst1   = \"  Date     Day Time        Rectype  Jobname  Reason   Module   CSECT    CPU     \"\n             lrst2   = \"  -------- --- ----------- -------- -------- -------- -------- -------- ------  \"\n             lrsmod1 = \"_Z$Z       $Z  $LRSTIME    `LRSTYPE `LRSJOBN `LRSREAS `LRSCOMP `LRSCSCT `LRSCPU \"\n                    /* \"....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+\" */\n             lrsdesc_o  = 0  /* Not allowed: not displayed on screen */\n             lrsseqn_o  = 0  /* Not allowed: not displayed on screen */\n             lrsdatej_o = 0  /* Not allowed: not displayed on screen */\n             if zscreenw > 80 then do\n                lrsdesc_m  = 1\n                lrsdesc_o = 81\n                lrst1 = lrst1||\"Description\"\n                lrst2 = lrst2||\"-----------\"\n                lrsmod1 = lrsmod1||\"`LRSDESC\"\n                end\n             end\n\n        /*\n        *** Change Sort field highlighting in table model variables\n        */\n\n        select\n          when lrsSortName == \"LRSDAYN\" then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSTIME\" then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSTYPE\" then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,28)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSJOBN\"  then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,37)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSREAS\" then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,46)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSCOMP\" then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,55)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSCSCT\"  then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,64)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSCPU\"  then do\n               lrsmod1 = overlay('`',lrsmod1,3)\n               lrsmod1 = overlay('`',lrsmod1,12)\n               lrsmod1 = overlay('`',lrsmod1,16)\n               lrsmod1 = overlay('$',lrsmod1,73)\n               lrsmod2 = overlay('`',lrsmod2,3)\n               end\n          when lrsSortName == \"LRSSEQN\" then ,\n               if lrsseqn_o == 0 then lrsSortName = \"LRSDATEG\"\n               else do\n                    lrsmod1 = overlay('`',lrsmod1,3)\n                    lrsmod1 = overlay('`',lrsmod1,12)\n                    lrsmod1 = overlay('`',lrsmod1,16)\n                    if lrsseqn_m == 1 then ,\n                       lrsmod1 = overlay('$',lrsmod1,lrsseqn_o)\n                    else do\n                         lrsmod2 = overlay('`',lrsmod2,3)\n                         lrsmod2 = overlay('$',lrsmod2,lrsseqn_o)\n                         end\n                    end\n          when lrsSortName == \"LRSDESC\" then ,\n               if lrsdesc_o == 0 then lrsSortName = \"LRSDATEG\"\n               else do\n                    lrsmod1 = overlay('`',lrsmod1,3)\n                    lrsmod1 = overlay('`',lrsmod1,12)\n                    lrsmod1 = overlay('`',lrsmod1,16)\n                    if lrsdesc_m == 1 then ,\n                       lrsmod1 = overlay('$',lrsmod1,lrsdesc_o)\n                    else do\n                         lrsmod2 = overlay('`',lrsmod2,3)\n                         lrsmod2 = overlay('$',lrsmod2,lrsdesc_o)\n                         end\n                    end\n          otherwise\n               lrsSortName = \"LRSDATEG\"\n               end\n\n        if lrsVerb == \"SORT\" then do\n           if lrsRows > 3000 then do       /* Big Sort? */\n              status = \"Sorting \"strip(lrsRows,'L','0')\" table entries by \"lrsSortKey\n              info1 = \"\"\n              info2 = \"\"\n              info3 = \"\"\n              info4 = \"\"\n              address ISPEXEC \"CONTROL DISPLAY LOCK\"\n              address ISPEXEC \"DISPLAY PANEL(LRS$LOGO)\"\n              end\n\n           if lrsSortName == \"LRSDATEG\" | lrsSortName == \"LRSDATEJ\" then sortname = \"LRSBDATE\"\n           else sortname = lrsSortName\n           select\n             when sortname == \"LRSBDATE\" then address ISPEXEC \"TBSORT \"lrstable\" FIELDS(\"sortname\",C,\"lrsSortDir\",LRSBTIME,B,\"lrsSort\n             when sortname == \"LRSBTIME\" then address ISPEXEC \"TBSORT \"lrstable\" FIELDS(\"sortname\",C,\"lrsSortDir\",LRSBDATE,B,\"lrsSort\n             otherwise\n               address ISPEXEC \"TBSORT \"lrstable\" FIELDS(\"sortname\",C,\"lrsSortDir\",LRSBDATE,B,\"lrsSortDir\",LRSBTIME,B,\"lrsSortDir\")\"\n               end\n           end\n\n        return\n\n        /*********************************************************************\n        *  Browse the dataset in variable DSN and handle error conditions    *\n        *********************************************************************/\n\n        Browse_Dataset:\n        x = LISTDSI(dsn)\n\n        if x = 0 then do\n           br_dsn = SYSDSNAME\n           address ISPEXEC \"CONTROL ERRORS RETURN\"\n           address ISPEXEC \"CONTROL DISPLAY SAVE\"\n           address ISPEXEC \"BROWSE DATASET('\"br_dsn\"') PANEL(\"panel\")\"\n           br_rc = rc\n           if br_rc <> 0 then do\n              zedsmsg = SYSDSN(br_dsn)\n              zedlmsg = \"Browse to dataset failed, DSN=\"br_dsn\n              address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n              end\n           address ISPEXEC \"CONTROL DISPLAY RESTORE\"\n           address ISPEXEC \"CONTROL ERRORS CANCEL\"\n           end\n        else do\n             zedsmsg = SYSDSN(dsn)\n             zedlmsg = \"Verify of dataset failed, DSN=\"dsn\n             address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n             end\n\n        return\n\n        /*********************************************************************\n        * Show Summary table                                                 *\n        *********************************************************************/\n\n        Show_Summary_Table:\n\n        /*\n        *** Initialize\n        */\n\n        address ISPEXEC \"TBTOP \"sumtable       /* Get to the top of things */\n        sumtbdrc = 0                           /* Starting TBDISPL return code */\n        sumSortDir = \"D\"                       /* Default sort direction */\n        sumSortName = \"SUMCOUNT\"               /* Default sort key */\n        sumVerb = \"SORT\"                       /* Fake SetUp_SumTable into sorting */\n        call SetUp_SumTable                    /* Set up table for first table display */\n\n        /*\n        *** Process table until user hits the END key\n        */\n\n        do while sumtbdrc < 8\n           address ISPEXEC \"TBDISPL \"sumtable\" PANEL(LRS$STD)\"\n           sumtbdrc = rc\n\n           if sumtbdrc < 8 then do\n\n              /******************************************************************\n              * Process the primary line for commands                           *\n              *******************************************************************/\n\n              if zcmd <> '' then do\n                 parse value zcmd with sumVerb \" \" sumAction \" \" sumDirection\n                 zcmd = ''\n\n                 select\n                   when translate(sumVerb) = 'REPORT' then do\n                        Output = \"1\"strip(lrsRange) \"- Summary generated:\" date() time()\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                        Output = \" \"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n\n                        Output = \" Module   CSECT    Reason   First Date   Last Date      Count\"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                        Output = \" -------- -------- -------- ------------ ------------ -------\"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n\n                        address ISPEXEC \"TBTOP \"sumtable\n                        LRC = 0\n                        do while LRC = 0\n                           address ISPEXEC \"TBSKIP \"sumtable\n                           LRC = rc\n                           if lrc == 0 then do\n                              output = \" \"|| ,\n                                       left(summod,8)||\" \"||left(sumcsct,8)||\" \"left(sumreas,8) ,\n                                       left(sumsdate,12)||\" \"||left(sumedate,12)||\" \"||left(sumcount,6)\n                              address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                              end\n                           end /* of \"do while LRC = 0\" */\n\n                        zedsmsg = \"Output created\"\n                        zedlmsg = \"LOGREC summary put into list dataset\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n\n                        sumVerb = \"\"\n                        end\n\n\n                   when translate(sumVerb) = 'SORT' then do\n                        LastSortName = sumSortName           /* Save Sort Name */\n                        LastSortDir = sumSortDir             /* Save Sort Direction */\n                        sumAction = translate(sumAction)     /* Ensure uppercase for compare */\n\n                        if sumDirection <> \"\" then do\n                           sumDirection = translate(sumDirection)\n                           select\n                              when sumDirection == 'D' then sumSortDir = 'D'\n                              when sumDirection == 'A' then sumSortDir = 'A'\n                              otherwise\n                                 zedsmsg = \"Invalid Sort Dir\"\n                                 zedlmsg = \"Invalid sort direction given, previous direction kept\"\n                                 address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                 end\n                           end\n\n                        select\n                          when sumAction == \"\"           then sumSortName = \"SUMCOUNT\"\n                          when sumAction == \"MOD\"        then sumSortName = \"SUMMOD\"\n                          when sumAction == \"MODULE\"     then sumSortName = \"SUMMOD\"\n                          when sumAction == \"CSECT\"      then sumSortName = \"SUMCSCT\"\n                          when sumAction == \"REASON\"     then sumSortName = \"SUMREAS\"\n                          when sumAction == \"FDATE\"      then sumSortName = \"SUMSDATE\"\n                          when sumAction == \"FIRST-DATE\" then sumSortName = \"SUMSDATE\"\n                          when sumAction == \"LDATE\"      then sumSortName = \"SUMEDATE\"\n                          when sumAction == \"LAST-DATE\"  then sumSortName = \"SUMEDATE\"\n                          when sumAction == \"COUNT\"      then sumSortName = \"SUMCOUNT\"\n                          otherwise\n                            sumSortName = \"SUMCOUNT\"\n                            zedsmsg = \"Invalid Sort field\"\n                            zedlmsg = \"Invalid sort field was given, COUNT will be used\"\n                            address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                            end\n\n                        if LastSortName == sumSortName then ,\n                           if LastSortDir == sumSortDir then do\n                              zedsmsg = \"Entries in sort order\"\n                              zedlmsg = \"This table is already in sort order by \"sumSortKey\n                              address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                              end\n                           else call SetUp_SumTable\n                        else call SetUp_SumTable           /* Set up table for new highlighted field */\n                        sumVerb = \"\"\n                        end\n\n                   when translate(sumVerb) = 'STATS' then do\n                        address ISPEXEC \"DISPLAY PANEL(LRS$STAT)\"\n                        sumVerb = \"\"\n                        end\n\n                   when translate(sumVerb) = 'L' then do\n                        if sumSortName == \"SUMCOUNT\" then do\n                           zedsmsg = \"Can't locate\"\n                           zedlmsg = \"Sorry: Can't perform locate on count field\"\n                           address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                           end\n                        else do\n                             address ISPEXEC \"TBTOP \"sumtable\n\n                             locate_rc = 0\n                             sumActionL = length(sumAction)\n                             do while locate_rc = 0\n                                address ISPEXEC \"TBSKIP \"sumtable\n                                locate_rc = rc\n                                interpret \"locate_key = substr(\"sumSortName\",1,sumActionL)\"\n                                if locate_key = sumAction then locate_rc = 99\n                                if sumSortDir == 'A' then ,\n                                   if locate_key > sumAction then locate_rc = 98\n                                   else nop\n                                else if locate_key < sumAction then locate_rc = 97\n                                end /* of \"do while locate_rc = 0\" */\n                              if locate_rc < 90 then do\n                                 zedsmsg = \"Field not found\"\n                                 zedlmsg = \"Field not found in current Sort Field\"\n                                 address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                                 end\n                             end\n                        sumVerb = \"\"\n                        end\n\n                   otherwise\n                        zedsmsg = \"Invalid verb\"\n                        zedlmsg = \"Verb \"sumVerb\" not valid\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        sumVerb = \"\"\n                        end\n                 end\n\n              /***********************************************************************\n              * Process the table selections                                         *\n              ***********************************************************************/\n\n              /* no current table selections! */\n\n              end /* of \"if sumtbdrc == 0\" */\n\n           end /* of \"do while sumtbdrc = 0\" */\n\n        return\n\n        /*********************************************************************\n        *  Set up Summary table models and titles                            *\n        *********************************************************************/\n\n        Setup_SumTable:\n\n        sumt1   = \" Module    CSECT     Reason    First-Date    Last-Date     Count\"\n        sumt2   = \" --------  --------  --------  ------------  ------------  -----\"\n        summod1 = \"`SUMMOD   `SUMCSCT  `SUMREAS  `SUMSDATE     `SUMEDATE     ~SUMCOUNT\"\n               /* \"....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8\" */\n\n        if sumVerb == \"SORT\" then do\n           sumSortType = \"C\"\n           select\n             when sumSortName == \"SUMMOD\"  then do\n                  summod1 = overlay('`',summod1,59)\n                  summod1 = overlay('~',summod1,1)\n                  end\n             when sumSortName == \"SUMCSCT\" then do\n                  summod1 = overlay('`',summod1,59)\n                  summod1 = overlay('~',summod1,11)\n                  end\n             when sumSortName == \"SUMREAS\" then do\n                  summod1 = overlay('`',summod1,59)\n                  summod1 = overlay('~',summod1,21)\n                  end\n             when sumSortName == \"SUMSDATE\" then do\n                  summod1 = overlay('`',summod1,59)\n                  summod1 = overlay('~',summod1,31)\n                  end\n             when sumSortName == \"SUMEDATE\" then do\n                  summod1 = overlay('`',summod1,59)\n                  summod1 = overlay('~',summod1,45)\n                  end\n             otherwise\n                  sumSortName = \"SUMCOUNT\"\n                  sumSortType = \"N\"\n                  end\n\n           address ISPEXEC \"TBSORT \"sumtable\" FIELDS(\"sumSortName\",\"sumSortType\",\"sumSortDir\")\"\n           end\n\n        return\n\n        /*********************************************************************\n        * Show Statistics Table                                              *\n        *********************************************************************/\n\n        Show_Stats_Table:\n\n        /*\n        *** Initialize\n        */\n\n        address ISPEXEC \"TBTOP \"statable       /* Get to the top of things */\n        statbdrc = 0                           /* Starting TBDISPL return code */\n\n        /*\n        *** Process table until user hits the END key\n        */\n\n        do while statbdrc < 8\n           address ISPEXEC \"TBDISPL \"statable\" PANEL(LRS$STTD)\"\n           statbdrc = rc\n\n           if statbdrc < 8 then do\n\n              /******************************************************************\n              * Process the primary line for commands                           *\n              *******************************************************************/\n\n              if zcmd <> '' then do\n                 parse value zcmd with statVerb\n                 zcmd = ''\n\n                 select\n                   when translate(statVerb) = 'REPORT' then do\n                        Output = \"1\"strip(lrsRange) \"- Statistics generated:\" date() time()\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                        Output = \" \"\n                        address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n\n                        address ISPEXEC \"TBTOP \"statable\n                        LRC = 0\n                        do while LRC = 0\n                           address ISPEXEC \"TBSKIP \"statable\n                           LRC = rc\n                           if lrc == 0 then do\n                              output = \" \"line\n                              address ISPEXEC \"LIST BUFNAME(OUTPUT) LINELEN(\"length(Output)\") CC\"\n                              end\n                           end /* of \"do while LRC = 0\" */\n\n                        zedsmsg = \"Output created\"\n                        zedlmsg = \"LOGREC statistics put into list dataset\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n\n                        statVerb = \"\"\n                        end\n\n                   otherwise\n                        zedsmsg = \"Invalid verb\"\n                        zedlmsg = \"Verb \"statVerb\" not valid\"\n                        address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                        statVerb = \"\"\n                        end\n                 end\n\n              /***********************************************************************\n              * Process the table selections                                         *\n              ***********************************************************************/\n\n              /* no current table selections! */\n\n              end /* of \"if statbdrc == 0\" */\n\n           end /* of \"do while statbdrc = 0\" */\n\n        return\n\n        /*********************************************************************\n        * Get only field - Input: field = table name , Value is the value    *\n        *********************************************************************/\n\n        Get_Only_Field:\n\n        select\n          when field == \"DATE\"     then LRSDATEG = value\n          when field == \"DAY\"      then LRSDAY   = value\n          when field == \"TIME\"     then LRSTIME  = value\n          when field == \"RECTYPE\"  then LRSTYPE  = value\n          when field == \"JOB\"      then LRSJOBN  = value\n          when field == \"JOBNAME\"  then LRSJOBN  = value\n          when field == \"MODULE\"   then LRSCOMP  = value\n          when field == \"CSECT\"    then LRSCSCT  = value\n          when field == \"REASON\"   then LRSREAS  = value\n          when field == \"CPU\"      then LRSCPU   = value\n          when field == \"SEQNO\"    then ,\n               if lrsseqn_o == 0 then onlycode = \"ND\"\n               else LRSSEQN = value\n          when field == \"JULIAN\"   then ,\n               if lrsdatej_o == 0 then onlycode = \"ND\"\n               else LRSDATEJ = value\n          when field == \"DESC\" | field == \"DESCRIPTION\" then ,\n               if lrsdesc_o == 0 then onlycode = \"ND\"\n               else LRSDESC = value\n          when field == \"OFF\" then do\n               onlycode = \"OFF\"\n               end\n          otherwise\n            onlycode = \"ER\"\n            zedsmsg = \"Invalid Field\"\n            zedlmsg = \"Invalid ONLY field was given, use table headings\"\n            address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n            end\n\n        return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R$EREP31": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x16\\x00\\x98\\x01o\\x00\\x98\\x01o\\x17\\x11\\x00)\\x00)\\x00\\x00\\xc4\\xc1\\xd3\\xc3\\xd6\\xc3\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-16T00:00:00", "modifydate": "1998-01-16T17:11:16", "lines": 41, "newlines": 41, "modlines": 0, "user": "DALCOCK"}, "text": "        /* ---------------------  rexx procedure  ---------------------- *\n         * Name:      erep31d                                            *\n         *                                                               *\n         * Function:  generate a date statement for erep history         *\n         *            copy covering the last 31 days.                    *\n         *                                                               *\n         * Syntax:    %erep31d                                           *\n         *                                                               *\n         * Author:    Lionel B. Dyck                                     *\n         *            Kaiser Permanente                                  *\n         *            Walnut Creek, CA 94598                             *\n         *            (510) 926-5332                                     *\n         *            IBMMail:  USKJFEFH                                 *\n         *            Internet: sysld@ncal.kaiperm.org                   *\n         *            IBMLINK:  SYSLBD                                   *\n         *                                                               *\n         * History:                                                      *\n         *            06/27/95 - created                                 *\n         *                                                               *\n         * ------------------------------------------------------------- */\n\n        day = date('d')\n\n        year = right(date('u'),2)\n\n        curr_date = year\"\"right(day+1000,3)\n\n        if (day - 31) == 0 then day = day + 1\n        from_day = day - 31\n\n        if from_day < 0 then do\n           from_day = 365 + from_day\n           year = year - 1\n           end\n\n        from_date = year\"\"right(from_day+1000,3)\n\n        c. = \"\"\n        c.1  = \"DATE=(\"from_date\"-\"curr_date\")\"\n        \"Execio * diskw datedd (finis stem c.\"\n        say \"%EREP31D Created card: \"c.1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT311/CBT.V500.FILE311.PDS/DASRCV.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT311/CBT.V500.FILE311.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}