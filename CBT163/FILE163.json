{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011357000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1175720, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE163.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE163.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x06'", "DS1TRBAL": "b'g\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x1e\\x00\\x03\\x01\\x1f\\x00\\x07\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x904\\x0f\\x00\\x904_\\x15\\x10\\x00V\\x00V\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-11T15:10:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "ANDREWS"}, "text": "//***FILE 163 IS FROM DAVID ANDREWS OF A. DUDA AND SONS, INC.       *   FILE 163\n//*           IN OVIEDO, FLORIDA.  THIS PDS CONTAINS SOURCE FOR     *   FILE 163\n//*           THE FOLLOWING:                                        *   FILE 163\n//*                                                                 *   FILE 163\n//*           1.  ADJXAMI - LINKEDITS AS A FRONT-END TO MODULE      *   FILE 163\n//*               HASPAMI IN HASPSSSM.  INSPECTS AND DISCARDS       *   FILE 163\n//*               ALL CARD IMAGES WRITTEN TO AN INTERNAL READER     *   FILE 163\n//*               DATASET THAT START WITH A BANG (\"!\") IN           *   FILE 163\n//*               COLUMN 1.  YOU CAN INSERT COMMENTS IN JCL         *   FILE 163\n//*               OR EVEN INSTREAM DATA.  AUTHOR: DAVID ANDREWS.    *   FILE 163\n//*                                                                 *   FILE 163\n//*           2.  ADJX006C - A JES2 EXIT #6.  PROVIDES A DEFAULT    *   FILE 163\n//*               MODEL DSCB FOR NEW GENERATION DATASETS (REMOVING  *   FILE 163\n//*               THE REQUIREMENT THAT EITHER A MODEL DSCB EXIST    *   FILE 163\n//*               FOR EACH DEFINED GDG, OR THAT YOU SPECIFY ONE     *   FILE 163\n//*               IN YOUR JCL).  DESIGNED TO WORK WITH IFG0EX0B     *   FILE 163\n//*               (SEE BELOW).  AUTHOR: DAVID ANDREWS.              *   FILE 163\n//*                                                                 *   FILE 163\n//*           3.  ADMM02 - AN SMP USERMOD TO THE LINKAGE            *   FILE 163\n//*               EDITOR.  REMOVES THE 3200-BYTE LIMITATION         *   FILE 163\n//*               ON SYSLIN BLOCKSIZE.  THE OFFSETS ARE SET         *   FILE 163\n//*               FOR THE DFP 2.4 LINKAGE EDITOR, BUT THIS          *   FILE 163\n//*               PARTICULAR MOD HAS BEEN RUN ON OTHER              *   FILE 163\n//*               VERSIONS (JUST CHANGE THE OFFSETS).               *   FILE 163\n//*               AUTHOR: UNKNOWN.                                  *   FILE 163\n//*                                                                 *   FILE 163\n//*           4.  CATLG - CONTAINS \"CATLG\", \"UNCATLG\" AND           *   FILE 163\n//*               \"SCRATCH\" TSO COMMANDS, WHICH ARE SIMILAR         *   FILE 163\n//*               TO THEIR IEHPROGM COUNTERPARTS.  AUTHOR:          *   FILE 163\n//*               DAVE PHILLIPS.                                    *   FILE 163\n//*                                                                 *   FILE 163\n//*           5.  CHARGEN - A BANNER PROGRAM THAT WAS FLOATING      *   FILE 163\n//*               AROUND IN MY POSTGRADUATE DAYS, CIRCA 1975.       *   FILE 163\n//*               AUTHOR: JAY ULLIUS.                               *   FILE 163\n//*                                                                 *   FILE 163\n//*           6.  DA - \"DISPLAY ACTIVE\" TSO CP.  LISTS ACTIVE       *   FILE 163\n//*               ADDRESS SPACES AT YOUR TERMINAL, ALONG WITH       *   FILE 163\n//*               THEIR CPU/EXCP/STORAGE UTILIZATION AND SWAP       *   FILE 163\n//*               STATUS.  FULL-SCREEN 3270 ONLY (NO BATCH          *   FILE 163\n//*               SUPPORT).  AUTHOR: DAVE PHILLIPS.                 *   FILE 163\n//*                                                                 *   FILE 163\n//*           7.  DD - LISTS CHARACTERISTICS OF CATALOGED AND       *   FILE 163\n//*               UNCATALOGED DATASETS.  GOOD FOR GENERATION        *   FILE 163\n//*               DATA GROUPS.  AUTHOR: DAVE PHILLIPS.              *   FILE 163\n//*                                                                 *   FILE 163\n//*           8.  WTO AND DOM - A PAIR OF LITTLE TSO COMMANDS.      *   FILE 163\n//*               WTO WRITES NON-DELETABLE MESSAGES TO THE          *   FILE 163\n//*               MVS CONSOLE, AND DOM DELETES THOSE MESSAGES.      *   FILE 163\n//*               GREAT FOR WAKING UP THE OPERATOR (BEEP!)          *   FILE 163\n//*               AUTHOR: DAVE PHILLIPS.                            *   FILE 163\n//*                                                                 *   FILE 163\n//*           9.  IFG0EX0B - INSTALLATION DCB OPEN EXIT.  PROVIDES  *   FILE 163\n//*               DEFAULT BLOCKSIZES FOR PROGRAMS AND JCL THAT      *   FILE 163\n//*               DON'T SUPPLY THEIR OWN.  FOR DASD, IT SELECTS     *   FILE 163\n//*               A BLOCKSIZE CLOSE TO A HALF-TRACK.  FOR TAPE,     *   FILE 163\n//*               IT SELECTS A BLOCKSIZE CLOSE TO 16K.  FOR DD      *   FILE 163\n//*               DUMMY, VIO AND SUBSYSTEM DATASETS IT SELECTS A    *   FILE 163\n//*               MINIMAL BLOCKSIZE.  NONE OF OUR INSTALLATION      *   FILE 163\n//*               JCL SPECIFIES DCB=BLKSIZE=ANYTHING!  AUTHOR:      *   FILE 163\n//*               DAVE PHILLIPS.                                    *   FILE 163\n//*                                                                 *   FILE 163\n//*           10. RSMAP - REAL STORAGE MAP.  PRODUCES A DETAILED    *   FILE 163\n//*               SUMMARY OF REAL STORAGE USAGE FOR EACH ADDRESS    *   FILE 163\n//*               SPACE.  TELLS YOU HOW MANY REAL STORAGE FRAMES    *   FILE 163\n//*               ARE BEING USED FOR SUCH THINGS AS SQA, CSA,       *   FILE 163\n//*               LPA, LSQA, PRIVATE AREA, NUCLEUS, FIXED FRAMES,   *   FILE 163\n//*               VIO, ET CETERA.  YOU MAY HAVE TO INCREASE SOME    *   FILE 163\n//*               TABLE SIZES IF YOU HAVE A LARGE NUMBER OF         *   FILE 163\n//*               ADDRESS SPACES.  WORKS ONLY IN MVS-370.           *   FILE 163\n//*               AUTHOR: DAVE PHILLIPS.                            *   FILE 163\n//*                                                                 *   FILE 163\n//*           11. S213RC30 - ELIMINATES THOSE S213-30 ABENDS THAT   *   FILE 163\n//*               IBM SUPPLIED WITH DFP V2.  WHEN TWO PROGRAMS      *   FILE 163\n//*               SIMULTANEOUSLY OPEN A PDS FOR OUTPUT, THE SECOND  *   FILE 163\n//*               IS ABENDED S213-30.  WITH S213RC30 INSTALLED,     *   FILE 163\n//*               THE SYSTEM ISSUES A WTOR TO THE OPERATOR AND      *   FILE 163\n//*               WAITS FOR THE PDS RESOURCE TO BECOME AVAILABLE    *   FILE 163\n//*               (THE OPERATOR CAN REPLY \"CANCEL\", IN WHICH CASE   *   FILE 163\n//*               THE SECOND PROGRAM ABENDS S213-30 AS BEFORE).     *   FILE 163\n//*               AUTHOR: DAVID ANDREWS.                            *   FILE 163\n//*                                                                 *   FILE 163\n//*          12.  ZAPDSCB - BATCH PROGRAM TO CHANGE THE ATTRIBUTES  *   FILE 163\n//*               OF ANY DIRECT-ACCESS DATASET.  CAN BE USED TO     *   FILE 163\n//*               MODIFY DCB CHARACTERISTICS, PROTECTION STATUS,    *   FILE 163\n//*               EXPIRATION DATE, USE COUNT, AND SECONDARY SPACE   *   FILE 163\n//*               AMOUNT.  AUTHOR: DAVE PHILLIPS.                   *   FILE 163\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADJXAMI": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x01\\x16\\x01\\x16\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 278, "newlines": 278, "modlines": 0, "user": "ANDREWS"}, "text": "//ADJXAMI JOB\n//*\n//*  ADJXAMI -\n//*    A FRONT-END TO HASPAMI (IN HASPSSSM).  IT SCREENS ALL CARD\n//*    IMAGES WRITTEN TO INTERNAL-READER DATASETS, IGNORING ALL\n//*    THAT CONTAIN AN EXCLAMATION POINT (\"!\") IN COLUMN 1.\n//*\n//*    THIS LITTLE MOD IS REMARKABLY USEFUL.  YOU CAN COMMENT-OUT\n//*    LINES OF JCL IN THE MIDDLE OF A CONTINUATION SEQUENCE:\n//*        //A JOB 1,YOURNAME,\n//*        !/  RESTART=STEPNAME,     <=== THIS CARD IMAGE IS IGNORED\n//*        //  CLASS=S\n//*    OR IN THE MIDDLE OF INSTREAM DATA:\n//*        //SYSIN DD *\n//*        ! SORT FIELDS=(1,4,CH,A)\n//*          SORT FIELDS=(1,4,PD,A)\n//*        /*\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  THE OUTPUT OF THE LINKEDIT STEP\n//*    IS A MODIFIED HASPSSSM; YOU MUST INSERT THE FOLLOWING\n//*    CONTROL STATEMENT IN YOUR JESPARMS DATASET TO ACTIVATE\n//*    THE CODE:\n//*\n//*        HASPSSSM=HASPSSDA\n//*\n//*    YOU MAY ALSO WANT TO MODIFY THE \"NAME\" CONTROL STATEMENT\n//*    TO MAKE YOUR LOAD MODULE NAME CONFORM TO LOCAL REQUIREMENTS.\n//*\n//*    THE CODE HAS BEEN TESTED UNDER JES2 1.3.6 AND 2.2.0.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             TLIB='SYS1.LPALIB',   <=== TARGET LOAD LIBRARY\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             LPALIB='SYS1.LPALIB', <=== CURRENT LOCATION OF HASPSSSM\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             SYSLIB='SYS1.MACLIB'  <=== NAME OF MACRO LIBRARY\n//*                                       USE SYS1.MACLIB IF MVS-370\n//*                                       USE SYS1.MODGEN IF MVS-XA\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&SYSLIB,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&FRONT,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),\n//             PARM='LIST,MAP,XREF,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//LPALIB   DD  DSN=&LPALIB,DISP=SHR\n//SYSLMOD  DD  DSN=&TLIB,DISP=SHR\n//FRONT    DD  DSN=&&FRONT,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//ASM.SYSIN DD *\n         TITLE 'DUDA \"BANGS\" SUPPORT - FRONT END TO HASPAMI'\n***********************************************************************\n*                                                                     *\n*  THIS MODULE IMPLEMENTS SUPPORT FOR \"BANGS\".  IT REPLACES AN OLD    *\n*  MOD TO HASPRDR.                                                    *\n*                                                                     *\n*  ALL CARD IMAGES WRITTEN TO AN INTERNAL READER DATASET ARE SCREENED *\n*  FOR AN EXCLAMATION POINT (\"!\") IN COLUMN 1.  ALL SUCH CARDS ARE    *\n*  IGNORED, I.E. THEY ARE NOT SUBMITTED FOR EXECUTION.                *\n*                                                                     *\n*  THIS LITTLE MOD IS REMARKABLY USEFUL.  YOU CAN COMMENT-OUT LINES   *\n*  IN THE MIDDLE OF A CONTINUATION SEQUENCE:                          *\n*      //A JOB 1,YOURNAME,                                            *\n*      !/  RESTART=STEPNAME,      <=== THIS CARD IMAGE IS IGNORED     *\n*      //  CLASS=S                                                    *\n*  OR IN THE MIDDLE OF INSTREAM DATA:                                 *\n*      //SYSIN DD *                                                   *\n*      ! SORT FIELDS=(1,4,CH,A)                                       *\n*        SORT FIELDS=(1,4,PD,A)                                       *\n*      /*                                                             *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  HISTORY -                                                          *\n*                                                                     *\n*  I FIRST IMPLEMENTED \"BANG\" SUPPRESSION IN IMSRJE, A *VERY* POOR    *\n*  MAN'S SPF THAT I CO-AUTHORED (WITH JOHN MCCANN AND JERRY CALLEN)   *\n*  IN 1974 FOR A VS/1 IMS SHOP.  WE SOON BECAME DEPENDENT ON THE      *\n*  FEATURE, AND WHEN WE INSTALLED IMS-JDS (A FIELD DEVELOPED PROGRAM  *\n*  THAT PROVIDED FULL-SCREEN TEXT EDITING AND JOB SUBMISSION), WE     *\n*  REFITTED \"BANG\" SUPPORT TO IT.                                     *\n*                                                                     *\n*  WHEN WE DID THE MVS CONVERSION A COUPLE OF YEARS LATER AND GOT     *\n*  REAL TSO, WE CONSIDERED BUILDING A SUBMIT EXIT TO HANDLE BANG      *\n*  SUPPRESSION.  INSTEAD, DAVE PHILLIPS RE-WROTE IT AS A MODIFICATION *\n*  TO HASPRDR.                                                        *\n*                                                                     *\n*  SINCE THEN, IBM HAS RESEQUENCED AND OVERHAULED HASPRDR MANY TIMES. *\n*  MAINTAINING THIS MOD HAS GOTTEN TO BE A CONTINUOUS CHORE.  BAH.    *\n*                                                                     *\n*  I SHOT OFF MY MOUTH AND SAID I COULD IMPLEMENT BANGS WITHOUT       *\n*  MODIFYING IBM CODE.  WHAT A MISTAKE THAT WAS.                      *\n*                                                                     *\n*  (WHY DO I CALL THEM BANGS?  BECAUSE A FRIEND IN 1974 WORKED AT     *\n*  A GOVERNMENT INSTALLATION THAT RAN AN SDS SIGMA 7 (REMEMBER SDS?)  *\n*  AND THEIR JCL STARTED WITH AN EXCLAMATION POINT.  HE CALLED THEM   *\n*  \"BANGS\", AND SO I DID TOO.)                                        *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*  THIS CODE FRONT-ENDS HASPAMI, AND MUST BE LINK-EDITED INTO THE     *\n*  JES2 SUBSYSTEM SUPPORT MODULE (HASPSSSM).                          *\n*                                                                     *\n*  HASPAMI GETS CONTROL FOR A VARIETY OF REASONS, BUT THE ONE WE ARE  *\n*  INTERESTED IN IS WHEN A \"PUT\" RPL ADDRESSES AN INTERNAL READER     *\n*  ACB.  FOR SUCH CASES, WE INSPECT THE USER DATA AREA, FIND OUT IF   *\n*  IT STARTS WITH A BANG, AND RETURN TO THE USER WITHOUT DOING A      *\n*  THING IF IT DOES.                                                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  AUTHOR -                                                           *\n*    DAVID ANDREWS                              AUGUST, 1990          *\n*    A. DUDA AND SONS, INC.                                           *\n*    P.O. BOX 257                                                     *\n*    OVIEDO, FL  32765                                                *\n*    (407) 365-2153   FAX: (407) 365-2148                             *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  REGISTERS AT ENTRY:                                                *\n*    R0  = HASPAMI FUNCTION CODE                                      *\n*    R1 -> RPL                                                        *\n*    R14 = RETURN ADDRESS                                             *\n*    R15 = ENTRY ADDRESS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\nADJXAMI  CSECT ,\n         USING ADJXAMI,R15         TEMP'Y BASE\n         B     ADJXSAVE            BRANCH AROUND ADCON AND ID\n         DC    A(ADJSVC)           SVC 111 (HAM SVC) BRANCHES @HERE\n         DC    C'ADJXAMI-&SYSDATE-&SYSTIME'\nADJXSAVE STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             R12 IS PROGRAM BASE\n         DROP  R15                      \"\n         USING ADJXAMI,R12              \"\n         USING IFGRPL,R1           R1 IS RPL BASE\n         SPACE ,\n*\n*  IS THIS A PUT OPERATION?\n*\n         CL    R0,=A(RPLPUT)       CHECK R0 FOR PUT REQUEST\n         BNE   PASSTHRU            NO, PASS THRU TO REAL HASPAMI\n         SPACE ,\n*\n*  IS THIS PUT OPERATION FOR AN INTERNAL READER ACB?\n*\n         L     R3,RPLDACB          GET ACB POINTER\n         USING IFGACB,R3                \"\n         CLI   ACBID,ACBIDVAL      VALID ACB?\n         BNE   PASSTHRU            NO, LET REAL HASPAMI HANDLE IT\n         TM    ACBINRTN,ACBINR     IF ACB IS NOT FOR AN INTERNAL READER\n         BZ    PASSTHRU            ... THEN PASS REQUEST TO HASPAMI\n         SPACE ,\n*\n*  SEE IF USER AREA STARTS WITH A BANG.\n*\n         ICM   R2,B'1111',RPLRLEN  MORE THAN ZERO BYTES?\n         BNH   PASSTHRU            NO, LET HASPAMI HANDLE IT\n         L     R2,RPLAREA          R2 -> USER AREA\n         LA    R2,0(,R2)                \"\n         CLI   0(R2),C'!'          COLUMN 1 A BANG?\n         BNE   PASSTHRU            NO, PASS TO HASPAMI\n         SPACE ,\n*\n*  HERE IS A BANG FOR US TO SUPPRESS!  DON'T ENTER THE REAL HASPAMI\n*  CODE, JUST RETURN TO THE USER INDICATING THAT EVERYTHING WENT OKAY.\n*\n         STC   R0,RPLREQ           STORE REQUEST CODE INTO RPL\n         TM    RPLOPT1,RPLASY      ASYNCHRONOUS RPL?\n         BO    TOUSER              YES, DON'T SET RETURN CODE\n         NC    RPLFDBK,=X'F000'    ZERO FEEDBACK FIELD IN RPL\n         MVI   RPLCMPON,2          COMPID\n         MVC   16(4,R13),=F'0'     ZERO R15 IN SAVEAREA\n         LA    R2,RPLECB           POINT TO ECB\n         TM    RPLOPT1,RPLECBSW    EXTERNAL ECB?\n         BZ    ECBMERGE            NO, BRANCH\n         L     R2,RPLECB           POINT TO EXTERNAL ECB\nECBMERGE MVI   0(R2),X'40'         MARK ECB \"POSTED\"\nTOUSER   LM    R14,R12,12(R13)     RETURN TO CALLER\n         BR    R14                      \"\n         SPACE ,\n*\n*  PASS THRU TO REAL HASPAMI, WE DIDN'T FIND ANYTHING INTERESTING HERE.\n*\nPASSTHRU L     R15,=V(HASPAMI)     GET HASPAMI ENTRY\n         L     R14,12(,R13)        RESTORE REG 14\n         LM    R0,R12,20(R13)      RESTORE REGS 0-12\n         BR    R15                 BRANCH-ENTER HASPAMI CODE\n         LTORG\n         DROP ,\n         TITLE 'DUDA \"BANGS\" SUPPORT - FRONT END TO HAM SVC'\n***********************************************************************\n*                                                                     *\n*  THIS CODE GETS CONTROL EACH TIME SVC 111 (THE \"HASP ACCESS         *\n*  METHOD\") SVC IS USED.                                              *\n*                                                                     *\n*  MUCH OF HASPAM CAN RUN IN USER KEY AND STATE, BUT WHENEVER         *\n*  ANYTHING MAGIC HAS TO HAPPEN, HAMSVC IS GIVEN CONTROL IN           *\n*  MAGIC STATE BY SVC 111.  BASICALLY, SVC 111 IS A \"GET INTO         *\n*  SUPERVISOR STATE KEY ZERO\" SVC FOR USE BY JES.                     *\n*                                                                     *\n*  SVC 111 DOES AUTHORITY CHECKING BY BEING PASSED A DEB.  IT         *\n*  DEBCHECKS IT TO MAKE SURE IT IS VALID AND THEN BRANCHES OFF        *\n*  TO THE ADDRESS STORED IN DEBAPPAD.  THIS ADDRESS IS NORMALLY       *\n*  THAT OF \"HAMSVC\" IN MODULE HASPAM, AND IS SET IN THE DEB BY        *\n*  HOSOPEN.                                                           *\n*                                                                     *\n*  THE PROBLEM IS THAT HOSOPEN GETS THE ADDRESS OF HAMSVC FROM AN     *\n*  ADCON LOCATED +4 BYTES INTO HASPAMI.  BECAUSE WE FRONT-END         *\n*  HASPAMI, THE ADCON FETCHED WILL COME FROM +4 BYTES INTO *THIS*     *\n*  MODULE - ADJXAMI.  AND I DON'T KNOW WHERE HAMSVC IS - IT'S NOT     *\n*  AN EXTERNAL REFERENCE.                                             *\n*                                                                     *\n*  SO HERE'S WHAT WE DO: WE SET THE ADCON TO POINT HERE, WHEREUPON    *\n*  AT RUN TIME WE FETCH THE ADCON FROM HASPAMI, AND DO THE BRANCH     *\n*  OURSELVES.                                                         *\n*                                                                     *\n*  WE CAN ONLY FOOL WITH REGISTER 15.                                 *\n*                                                                     *\n***********************************************************************\n         USING ADJSVC,R15\nADJSVC   L     R15,=V(HASPAMI)      POINT TO HASPAMI\n         DROP  R15                 LOSE ADDRESSABILITY\n         L     R15,4(,R15)         POINT TO HAMSVC\n         BR    R15                 BRANCH ENTER HAMSVC\n         LTORG ,\n         SPACE ,\n         PRINT NOGEN\n         IFGACB ,                  ACB DSECT\nACBINR   EQU   X'04'               FROM SYS1.HASPSRC($MODULE)\n         IFGRPL ,                  RPL DSECT\n         END\n/*\n//LKED.SYSLIN   DD *\n CHANGE  HASPAMI(ADJXAMI)    CHANGE REFERENCES FROM HASPAMI TO ADJXAMI\n REPLACE HASPAM              DISCARD THE CHANGED HASPAM CONTROL SECTION\n INCLUDE LPALIB(HASPSSSM)      FROM <--THIS--< LOAD MODULE\n INCLUDE LPALIB(HASPSSSM)    INCLUDE THE ORIGINAL HASPAM CSECT\n INCLUDE FRONT               INCLUDE THE FRONT-END CODE ADJXAMI\n ENTRY HASPSSSM\n SETCODE AC(1)\n NAME HASPSSDA(R)            <=== CHANGE THIS NAME IF YOU LIKE\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADJX006C": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x02\\x0e\\x02\\x0e\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 526, "newlines": 526, "modlines": 0, "user": "ANDREWS"}, "text": "//ADJX006C JOB\n//*\n//*  ADJX006C -\n//*    A JES2 EXIT #6 (CONVERTER EXIT) WHICH PROVIDES DEFAULT MODEL\n//*    DSCBS FOR NEW GENERATION DATASETS.\n//*\n//*    WHEN THIS EXIT DETECTS A DD STATEMENT FOR A NEW GENERATION\n//*    DATASET, IT INSERTS A DEFAULT MODEL DSCB IN THE \"DCB=\"\n//*    PARAMETER IF ONE IS NOT ALREADY PRESENT.  NOTE THAT THIS\n//*    MODIFICATION TO THE JCL DOES *NOT* APPEAR ON THE JCL LISTING.\n//*\n//*    THIS EXIT IS DESIGNED TO WORK IN CONJUNCTION WITH IFG0EX0B,\n//*    ALSO INCLUDED IN THIS LIBRARY.\n//*\n//*  NOTA BENE -\n//*    AFTER INSTALLATION OF THIS EXIT, EXISTING MODEL DSCBS WILL\n//*    BE IGNORED BY THE SYSTEM UNLESS YOUR DD STATEMENTS EXPLICITLY\n//*    REFER TO THEM BY NAME!\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  BECAUSE THIS IS A JES2 EXIT,\n//*    YOU MUST ALSO INSERT THE FOLLOWING CONTROL STATEMENTS IN\n//*    YOUR JESPARMS DATASET:\n//*\n//*        EXIT006  ROUTINE=(...,EXIT6C,...),ENABLE,TRACE=NO\n//*        LOAD=ADJX006C\n//*\n//*    YOU SHOULD ALSO CHANGE THE GLOBAL VARIABLE \"&MODEL\" IN THE\n//*    FRONT OF THE PROGRAM TO MATCH THE MODEL DSCB NAME YOU\n//*    SPECIFIED BELOW.\n//*\n//*    FOR INSTALLATION ON MVS/370 SYSTEMS, DELETE THE REFERENCE\n//*    TO THE \"$PADDR\" CONTROL BLOCK ON LINE 00238000 BELOW.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY\n//             MBR=ADJX006C,         <=== LOAD MODULE NAME\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             MDUNIT=SYSDA,         <=== UNITNAME FOR MODEL DSCB\n//             MDVOL=SYSRES,         <=== VOLSER FOR MODEL DSCB\n//             MODEL='MODEL.DSCB',   <=== DEFAULT MODEL DSCB DSNAME\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME\n//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME\n//             HASPSRC='SYS1.HASPSRC', <=== HASPSRC DATASET NAME\n//             MODGEN='SYS1.MODGEN'  <=== MODGEN DATASET NAME\n//                                        (USE SYS1.SMPMTS IF MVS-370)\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK'\n//*\n//*  THE FOLLOWING MODEL DSCB SHOULD HAVE *NO* DCB ATTRIBUTES\n//*  ASSOCIATED WITH IT.\n//*\n//MODEL    DD  DSN=&MODEL,DISP=(MOD,CATLG,CATLG),UNIT=&MDUNIT,\n//             VOL=SER=&MDVOL,SPACE=(TRK,0)\n//*\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//         DD  DSN=&AMODGEN,DISP=SHR\n//         DD  DSN=&HASPSRC,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),\n//             PARM='LIST,MAP,XREF,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//ASM.SYSIN DD *\nEXIT6C   TITLE 'PROVIDE MODEL DSCB FOR NEW GENERATION DATASETS'\n         GBLC  &MODEL\n&MODEL   SETC  'MODEL.DSCB'          <=== CHANGE THIS !\n***********************************************************************\n*                                                                     *\n*  JCL CONVERTER EXIT                                                 *\n*                                                                     *\n*  THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN CONVERTED *\n*  INTO INTERNAL TEXT.  WE TAKE A LOOK AT EACH DD STATEMENT AND SEE   *\n*  IF A NEW GENERATION DATASET IS BEING ALLOCATED.  IF SO, AND NO     *\n*  MODEL DSCB IS SPECIFIED, THEN WE PROVIDE A DUMMY.                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  THIS EXIT OBSOLETES A LOCAL MODIFICATION TO DCB RESOLUTION:        *\n*  ++ USERMOD (AD0009A) /*                                            *\n*                                                                     *\n*        THE PURPOSE OF THIS MOD IS TO ALLOW ALLOCATION               *\n*        TO PROCEDE WHEN A GDG DATASET HAS NO MODEL DSCB.             *\n*                                                               */ .  *\n*  ++ VER (Z038) FMID(EBB1102) PRE(UZ84276).                          *\n*  ++ ZAP (IEFAB458) DISTLIB(AOSB3).                                  *\n*   NAME IEFAB458                                                     *\n*   VER  0302  58E0,B050     L   @14,@PC00001+8   RETURN-CODE - 4     *\n*   VER  04BC  00000000,00000000,00000000,00000000                    *\n*   VER  04CC  00000000,00000000                                      *\n*   REP  0302  45F0,C49A     BAL R15,PATCHLOC     ENTER PATCH AREA    *\n*   REP  04BC  58A0,B054     L   @10,@PC00001+12  GET PTR TO          *\n*   REP  04C0  58A0,A000     L   @10,SIOTPTR(,@10) .SIOT              *\n*   REP  04C4  9180,A03B     TM  SCTSGDGS(@10),X'80' SINGLE GDG?      *\n*   REP  04C8  4710,C40E     BO  @RF00105         YES, ACCEPT IT      *\n*   REP  04CC  58E0,B050     L   @14,@PC00001+8   **ZAPPED INSTR.**   *\n*   REP  04D0  07FF          BR  R15              RETURN INLINE       *\n*   IDRDATA  AD0009A                                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  REGISTER CONTENTS AT ENTRY ARE:                                    *\n*                                                                     *\n*        R0      =  0  INTERNAL TEXT IMAGE PRESENT                    *\n*                =  4  END OF JOB REACHED                             *\n*        R1      ->    4-WORD PARAMETER LIST                          *\n*                          -> 16 BYTE WORK AREA                       *\n*                          -> INTERNAL TEXT OR TO CONVERTER R/C       *\n*                          -> DCT                                     *\n*                          -> JCT                                     *\n*        R2-R10          N/A                                          *\n*        R11     ->    HCT                                            *\n*        R12             N/A                                          *\n*        R13     ->    OS-STYLE SAVE AREA                             *\n*        R14     =     RETURN ADDRESS                                 *\n*        R15     ->    PROGRAM ENTRY                                  *\n*                                                                     *\n*        RETURN CODE                                                  *\n*                                                                     *\n*        0       - CALL OTHER EXITS                                   *\n*        4       - DO NOT CALL OTHER EXITS                            *\n*        8       - BYPASS EXECUTION AND CANCEL THIS JOB               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  INTERNAL TEXT HAS THE FOLLOWING FORMAT:                            *\n*                                                                     *\n*    JOB STATEMENTS:                                                  *\n*                                                                     *\n*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *\n*           ITSELF                                                    *\n*      1 STRINDCS - 1 BYTE FLAG, X'01' INDICATES JOB STMT             *\n*      1 STRJINDC - 1 BYTE FLAG                                       *\n*      1 STRJIND2 - 1 BYTE FLAG                                       *\n*      1 STRJLABD - 1 BYTE FLAG                                       *\n*      1 STRJKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *\n*                                                                     *\n*    EXEC STATEMENTS:                                                 *\n*                                                                     *\n*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *\n*           ITSELF                                                    *\n*      1 STRINDCS - 1 BYTE FLAG, X'02' INDICATES EXEC STMT            *\n*      1 STREINDC - 1 BYTE FLAG                                       *\n*      1 STREKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *\n*                                                                     *\n*    DD STATEMENTS:                                                   *\n*                                                                     *\n*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *\n*           ITSELF                                                    *\n*      1 STRINDCS - 1 BYTE FLAG, X'04' INDICATES DD STMT              *\n*      1 STRDINDC - 1 BYTE FLAG                                       *\n*      1 STRDKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *\n*                                                                     *\n*  VERB KEY ENTRIES CORRESPOND TO POSITIONAL AND KEYWORD PARAMETERS   *\n*  ON THE ASSOCIATED STATEMENTS.  THE FORMAT OF A VERB KEY ENTRY IS:  *\n*                                                                     *\n*      1 VERBKEY - 1 BYTE BINARY, INDICATES PARAMETER TYPE.  SEE      *\n*           MACRO \"IEFVKEYS\" IN SYS1.AMODGEN FOR SPECIFIC VERB KEYS.  *\n*       2 NUMPARMS - 1 BYTE BINARY, NUMBER OF PARAMETERS ASSOCIATED   *\n*           WITH THIS PARAMETER TYPE.                                 *\n*       2 PARMS OCCURS \"NUMPARMS\" TIMES.                              *\n*        3 SPFLAG - 1 BIT FLAG, IF ON INDICATES SUBPARAMETERS ARE     *\n*           PRESENT.  IF OFF, SUBPARAMETERS ARE NOT PRESENT.          *\n*                                                                     *\n*  THE REMAINDER OF THE VERB KEY ENTRY IS DEPENDENT ON THE VALUE OF   *\n*  SPFLAG.  IF SPFLAG IS OFF, THEN THE REMAINDER OF THE ENTRY IS:     *\n*                                                                     *\n*        3 PARMLEN - 7 BITS BINARY, INDICATES LENGTH OF ASSOCIATED    *\n*            PARAMETER (VALUE 0 THROUGH 127).                         *\n*        3 PARMVAL - \"PARMLEM\" BYTES OF CLEAR TEXT.                   *\n*                                                                     *\n*  IF THE SPFLAG IS ON, INDICATING SUBPARAMETERS, THE REMAINDER OF    *\n*  THE VERB KEY ENTRY IS COMPOSED OF REPEATING SUBPARAMETERS:         *\n*                                                                     *\n*        3 SPCOUNT - 7 BITS BINARY, NUMBER OF SUBPARAMETERS.          *\n*        3 SUBPARMS - OCCURS \"SPCOUNT\" TIMES.                         *\n*         4 SPLENGTH - 1 BYTE BINARY, LENGTH OF SUBPARAMETER VALUE.   *\n*         4 SPVAL - \"SPLENGTH\" BYTES OF CLEAR TEXT.                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBPARAMETERS CANNOT THEMSELVES HAVE SUBPARAMETERS.  PARAMETERS    *\n*  AND SUBPARAMETERS CAN HAVE ZERO LENGTH; WHEN A STEPNAME OR DDNAME  *\n*  IS OMITTED FROM THE ORIGINAL JCL FOR EXAMPLE, THE INTERNAL TEXT    *\n*  INDICATES A STEPNAME OR DDNAME OF ZERO BYTES.  OMITTED (BUT NOT    *\n*  TRAILING) PARAMETERS ALSO ARE INDICATED WITH ZERO-LENGTH ENTRIES.  *\n*                                                                     *\n****                                                               ****\n****   THIS INFORMATION IS NOT DEFINITIVE!  IT WAS DETERMINED BY   ****\n****   INSPECTION AND STUDY OF THE CONVERTER/INTERPRETER LOGIC.    ****\n****   IN PARTICULAR, THE DSECT NAMES GIVEN ABOVE DO NOT           ****\n****   CORRESPOND TO THE NAMES IBM MAY HAVE ASSIGNED TO THE SAME   ****\n****   FIELDS.  YOUR MILEAGE MAY VARY...                           ****\n****                                                               ****\n*                                                                     *\n*        AUTHOR  -                                                    *\n*                  DAVID ANDREWS                   APRIL 1990         *\n*                  A. DUDA AND SONS, INC.                             *\n*                  1975 W. BROADWAY  /  P.O. BOX 257                  *\n*                  OVIEDO, FL  32765                                  *\n*                  (407) 365-2153     FAX: (407) 365-2148             *\n*                                                                     *\n***********************************************************************\n         SPACE ,\n         PRINT OFF\n         COPY $HASPGBL\n         PRINT ON\n         TITLE 'HASP CONTROL BLOCKS'\n         PRINT NOGEN\nADJX006C $MODULE  ENVIRON=SUBTASK,                                     X\n               $PCE,                                                   X\n               $BUFFER,                                                X\n               RPL,                                                    X\n               $JCT,                                                   X\n               $HASPEQU,                                               X\n               $MIT,                                                   X\n               $HCT,$PADDR,        <=== MVS/370 USERS DELETE \"$PADDR\"  X\n               TEXT,                                                   X\n               KEYS\n         PRINT GEN\nEXIT6C   $ENTRY BASE=R12\n         SAVE  (14,12)             SAVE CALLERS' REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n*\n*  TEST ENTRY CODE.\n*\n         LTR   R0,R0               IF NOT ENTERED FOR JCL, JUST RETURN\n         BNZ   RETURN0                  \"\n         SPACE ,\n*\n*  EXAMINE THE INTERNAL TEXT SEGMENT PASSED TO US BY THE CONVERTER.\n*  THROW AWAY ANY THAT AREN'T DD STATEMENTS.\n*\n         L     R8,4(,R1)           POINT TO INTERNAL TEXT IMAGE\n         USING TEXT,R8                  \"\n         TM    STRINDCS,DDSTR      THIS A DD STATEMENT?\n         BNO   RETURN0             NO, DON'T GET CONCERNED\n         SPACE ,\n*\n*  DISREGARD AND DO NOT SCAN DD STATEMENTS ASSOCIATED WITH\n*  SUBSYSTEM OR DUMMY DATASETS.\n*\nDD0      TM    STRDINDC,DTXDUMMY+DTXSYSIN+DTXSYOUT+DTXSUBSK\n         BNZ   RETURN0\n         SPACE ,\n*\n*  ACQUIRE A DYNAMIC WORK AREA\n*\n         GETMAIN R,LV=AREALEN      GETMAIN A LOCAL WORKAREA\n         LR    R10,R1                   \"\n         USING WORKAREA,R10             \"\n         SPACE ,\n*\n*  INITIALIZE A COUPLE OF DATA AREAS THEREIN:\n*    1.  FLAGS\n*        GDS (X'80') SET IF THE DATASET NAME INDICATES A GDG\n*        NEW (X'40') RESET IF DISPOSITION IS NOT NEW\n*    2.  INSERT\n*        A FULLWORD THAT POINTS TO THE DCBK FIELD OF THE DD STMT\n*        IF ONE IS PRESENT.\n*\n         MVI   FLAGS,NEW           INITIALIZE FLAGS BYTE\n         MVC   INSERT,=F'0'        ADDRESS WHERE INSERTION TAKES PLACE\n         TITLE 'SCAN DD STATEMENT FOR VERB KEYS'\n*\n*  SCAN FOR A VERB KEY SPECIFYING ONE OF: DSNAME, DCB OR DISP.\n*\n         LH    R3,STRLTH           L'TEXT\n         BCTR  R3,0                L'TEXT - 1\n         LA    R1,STRDKEY          POINT TO VARIABLE AREA\n         LA    R2,1                CONSTANT F'1'\n         LA    R5,STRDKEY-TEXT-1   LENGTH SCANNED TO DATE\n*\n*  R5 CONTAINS THE OFFSET TO WHATEVER BYTE WE ARE CURRENTLY\n*  EXAMINING IN THE TEXT STRING.  WE INCREMENT IT ONE AT A\n*  TIME WITH A \"BXH\" INSTRUCTION; THE \"BXH\" CAUSES US TO\n*  BRANCH TO \"FREEAREA\" IN THE EVENT THAT WE MISS THE \"ENDK\"\n*  KEY FOR SOME REASON (THIS SHOULD NOT OCCUR).\n*\nDD01     SLR   R4,R4               CLEAR WORK REGISTER\n         BXH   R5,R2,FREEAREA      POINT TO VERB KEY\n         LA    R1,0(R5,R8)              \"\n         CLI   0(R1),DCBK          DCB PARAMETER?\n         BE    DD10                YES, GO SEE IF MODEL DSCB PRESENT\n         CLI   0(R1),ENDK          END OF INTERNAL TEXT?\n         BE    DDEND               YES, GO ANALYZE\n         CLI   0(R1),DSNAMEK       DSNAME PARAMETER?\n         BE    DD20                YES, GO PROCESS DSNAME\n         CLI   0(R1),DISPK         DISP PARAMETER?\n         BE    DD30                YES, GO PROCESS DISP\n         SPACE ,\n*\n*  FIND NEXT VERB KEY\n*\nDD01A    SLR   R6,R6               INITIALIZE CURRENT # OF ARGUMENTS\n         SLR   R7,R7                    \"     STACKED # OF ARGUMENTS\n         SLR   R4,R4               INITIALIZE ARGUMENT LENGTH\n         BXH   R5,R2,FREEAREA      R5 INDEXES NEXT BYTE IF THERE\n         IC    R6,0(R5,R8)         SELECT NEXT BYTE (# OF ARGUMENTS)\nDD02     LTR   R6,R6               # ARGUMENTS ZERO?\n         BNZ   DD03                NO, GO PROCESS THE REMAINDER\n         SLDL  R6,8                UNSTACK PRIOR ARGUMENT COUNT, IF ANY\n         LTR   R6,R6               WAS IT ZERO TOO?\n         BZ    DD01                YES, GO CHECK NEXT VERB KEY\nDD03     BCTR  R6,0                DECREMENT ARGUMENT COUNT\n         BXH   R5,R2,FREEAREA      FETCH ARGUMENT LENGTH\n         LA    R1,0(R5,R8)              \"\n         ICM   R4,B'0001',0(R1)    IF GREATER THAN 127 THEN...\n         BM    DD04                ... PROCESS SUBARGUMENTS\n         AR    R5,R4               ADD ARGUMENT LENGTH TO INDEX\n         B     DD02                PROCESS MORE ARGUMENTS\nDD04     N     R4,=F'127'          SET R4 TO NUMBER OF SUBARGUMENTS\n         SRDL  R6,8                REMEMBER PRIMARY ARGUMENT COUNT\n         LR    R6,R4               GO PROCESS SUBARGUMENTS...\n         B     DD02                ... INSTEAD OF PLAIN ARGUMENTS\n         TITLE 'PROCESS DCB= VERB KEY'\n*\n*  A \"DCB=\" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING\n*  STRUCTURE:\n*    VERB KEY    (ONE BYTE)\n*    # PARMS     (ONE BYTE, S.B. = 0 OR 1)\n*    # SUBPARMS  (OPTIONAL, S.B. 1 IF #PARMS = 1)\n*    L'PARM      (ONE BYTE)\n*    MODEL       (MODEL DSCB FROM JCL, LENGTH SPECIFIED ABOVE)\n*\n*  THROW AWAY ANY DD STATEMENT THAT ALREADY HAS A MODEL DSCB SPECIFIED.\n*  OTHERWISE REMEMBER THE ADDRESS OF THE DCBK VERB KEY.\n*\nDD10     CLI   1(R1),X'00'         ANY MODEL DSCB SPECIFIED?\n         BNE   FREEAREA            YES, ABORT EXIT\n         ST    R1,INSERT           REMEMBER DCBK ADDRESS\n         B     DD01A               GO PROCESS REST OF KEYS\n         TITLE 'PROCESS DSNAME= VERB KEY'\n*\n*  A \"DSNAME=\" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING\n*  STRUCTURE:\n*    VERB KEY    (ONE BYTE)\n*    # PARMS     (ONE BYTE, S.B. = 1)\n*    SPFLAG      (OPT) (ONE BIT FOLLOWED BY SEVEN BIT # SUBPARAMETERS)\n*    L'PARM      (ONE BYTE, S.B. <= 44)\n*    DSNAME      (WHICH LENGTH IS SPECIFIED ABOVE)\n*\nDD20     CLI   1(R1),X'01'         ONE DSNAME PARAMETER?\n         BNE   DD20FU1             NO, CRASH AND BURN\n         ICM   R4,B'0001',2(R1)    GET DSNAME LENGTH\n         SPACE ,\n*\n*  R4 EITHER CONTAINS THE DSNAME LENGTH, OR THE NUMBER OF DSNAME\n*  SUBPARAMETERS.  IN THE LATTER CASE, BIT 24 WILL BE SET AND\n*  BITS 25-31 CONTAIN THE NUMBER OF SUBPARAMETERS.  YOU GET TWO\n*  SUBPARAMETERS WHEN A MEMBER NAME OR RELATIVE GDS NUMBER IS\n*  SPECIFIED IN PARENTHESES ON THE ORIGINAL JCL STATEMENT.  FOR\n*  OUR PURPOSES HERE, WE ARE NOT INTERESTED IN DD STATEMENTS THAT\n*  DO NOT HAVE A RELATIVE GDS NUMBER.\n*\n         BZ    DD20FU2             IF NO DSNAME THEN CRASH AND BURN\n         BP    FREEAREA            IF NO SUBPARAMETERS THEN RETURN\n         CH    R4,=AL2(X'82')      AT LEAST TWO SUBPARAMETERS?\n         BL    FREEAREA            NO RELATIVE GDS PRESENT, RETURN\n         ICM   R4,B'0001',3(R1)    GET DSNAME LENGTH\n         BZ    FREEAREA            IT'S ZERO, RETURN W/O ACTION\n         CLI   4(R1),C' '          BLANK OR AMPERSAND\n         BE    FREEAREA              IMPLIES TEMPORARY DATASET\n         CLI   4(R1),C'&&'           SO GET OUTTA HERE IF\n         BE    FREEAREA              WE FIND EITHER ONE\n         LA    R4,4(R4,R1)         POINT TO RELATIVE GENERATION LENGTH\n         CLI   0(R4),X'01'         AT LEAST ONE BYTE HERE?\n         BL    FREEAREA            NO, RETURN WITHOUT ACTION\n         CLI   1(R4),C'+'          START WITH PLUS SIGN?\n         BNE   FREEAREA            NO, RETURN WITHOUT ACTION\n         OI    FLAGS,GDS           INDICATE THAT WE HAVE A +(N) GDS\n         B     DD01A               PROCESS MORE VERB KEYS\n         SPACE ,\nDD20FU1  MVC   WTOAREA(D20FU1L),D20FU1  WRITE ERROR MESSAGE\n         LA    R1,WTOAREA          ISSUE WTO SVC\n         WTO   MF=(E,(1))               \"\n         B     FREEAREA\nD20FU1   WTO   'ADJX069 JES2 EXIT #6C - DSNAME PARAMETER COUNT IS ZERO'*\n               ,ROUTCDE=(2,10),DESC=3,MF=L\nD20FU1L  EQU   *-D20FU1\n         SPACE ,\nDD20FU2  MVC   WTOAREA(D20FU2L),D20FU2  WRITE ERROR MESSAGE\n         UNPK  WTOAREA+52(1),2(1,R1)    EXPLODE OFFENDING VALUE\n         MVC   WTOAREA+53(1),2(R1)           \"\n         NC    WTOAREA+52(2),=X'0F0F0F0F0F0F0F0F'\n         TR    WTOAREA+52(2),=X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LA    R1,WTOAREA          ISSUE WTO SVC\n         WTO   MF=(E,(1))               \"\n         B     FREEAREA\nD20FU2   WTO   'ADJX060 JES2 EXIT #6C - INVALID DSNAME LENGTH X''XX''',*\n               ROUTCDE=(2,10),DESC=3,MF=L\nD20FU2L  EQU   *-D20FU2\n         TITLE 'PROCESS DISP= VERB KEY'\n*\n*  A \"DISP=\" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING\n*  STRUCTURE:\n*    VERB KEY    (ONE BYTE)\n*    # PARMS     (ONE BYTE, S.B. > 0 AND < 4)\n*    L'PARM      (ONE BYTE, S.B. <= 8)\n*    DISP1       (WHICH LENGTH IS SPECIFIED ABOVE)\n*    L'PARM      (ONE BYTE, S.B. <= 8)\n*    DISP2       (WHICH LENGTH IS SPECIFIED ABOVE)\n*    L'PARM      (ONE BYTE, S.B. <= 8)\n*    DISP3       (WHICH LENGTH IS SPECIFIED ABOVE)\n*\n*  DETERMINE THE INITIAL DISPOSITION.\n*\nDD30     CLI   1(R1),X'00'         NUMBER OF PARMS > 0 ?\n         BE    FREEAREA            NO, EXIT\n         CLI   2(R1),X'00'         IS DISP1 LENGTH ZERO?\n         BE    DD01A               YES, DEFAULT IS \"NEW\", GET MORE KEYS\n         CLI   3(R1),C'N'          IS IT \"NEW\"?\n         BE    DD01A               YES, BRANCH, PROCESS MORE KEYS\n         CLI   3(R1),C'M'          IS IT \"MOD\"?\n         BE    DD01A               YES, BRANCH, PROCESS MORE KEYS\n         NI    FLAGS,255-NEW       TURN OFF \"NEW\" FLAG\n         B     DD01A               GO PROCESS REST OF KEYS\n         TITLE 'END OF DD STATEMENT'\n*\n*  WE'VE SCANNED OFF EVERYTHING WE NEED.  IF A RELATIVE GENERATION\n*  NUMBER WAS PRESENT, AND THE DISPOSITION WAS \"NEW\" (OR WOULD\n*  DEFAULT TO \"NEW\") AND NO MODEL DSCB IS PRESENT THEN INSERT ONE.\n*\n*  REGISTER 1 SHOULD POINT DIRECTLY AT THE \"ENDK\" KEY.\n*\nDDEND    TM    FLAGS,GDS+NEW       RELATIVE GDS NUMBER PRESENT?\n         BNO   FREEAREA            NO, DON'T MODIFY THIS DD STMT\n         SPACE ,\n*\n*  IF A DCB PARAMETER WAS LOCATED, THE DCBK ADDRESS IS STORED\n*  AT LOCATION \"INSERT\".  INSERT A MODEL DSCB STRING AT THAT\n*  POSITION IN THE INTERNAL TEXT.  NOTE THAT THE DCB VERB KEY\n*  DOES NOT ALREADY CONTAIN A MODEL DSCB, BECAUSE WE CHECKED\n*  FOR THAT EARLIER.\n*\n*  IF \"INSERT\" IS ZERO, THEN NO DCB VERB KEY IS IN THE TEXT.\n*  INSERT A DCBK WITH A MODEL DSCB AT THE END OF THE TEXT.\n*\n         ICM   R2,B'1111',INSERT   GET DCBK ADDRESS\n         BZ    ZINSERT             DCB WASN'T SPECIFIED - BRANCH\n         LA    R2,1(,R2)           POINT JUST PAST DCBK\n         LA    R15,MODELBLN-1(,R1) POINT TO DESTINATION\nSHIFT    MVC   0(1,R15),0(R1)      SHIFT TEXT RIGHT\n         BCTR  R15,0               DECREMENT DESTINATION POINTER\n         BCTR  R1,0                DECREMENT SOURCE POINTER\n         CR    R1,R2               ANYMORE TEXT?\n         BH    SHIFT               YES, MOVE SOME MORE\n         MVC   0(MODELBLN,R1),MODELB  INSERT MODEL.DSCB\n         LH    R2,STRLTH           UPDATE TEXT LENGTH\n         LA    R2,MODELALN-1(,R2)       \"\n         STH   R2,STRLTH                \"\n         B     FREEAREA            RETURN TO JES2\n         SPACE ,\nZINSERT  MVC   0(MODELALN,R1),MODELA  APPEND DCBK AND MODEL.DSCB\n         LH    R2,STRLTH           UPDATE TEXT LENGTH\n         LA    R2,MODELALN-1(,R2)       \"\n         STH   R2,STRLTH                \"\n         B     FREEAREA            RETURN TO JES2\n         SPACE ,\n*\n*  TEXT TO BE APPENDED TO END OF INTERNAL TEXT (REPLACES ENDK)\n*\nMODELA   DC    AL1(DCBK)           DCBK\n         DC    X'01'               1 PARAMETER\n         DC    AL1(L'MODELATX)     LENGTH OF DSNAME\nMODELATX DC    C'&MODEL'\n         DC    AL1(ENDK)           ENDK\nMODELALN EQU   *-MODELA\n         SPACE ,\n*\n*  TEXT TO BE INSERTED AFTER DCBK (REPLACES X'00')\n*\nMODELB   DC    X'01'               1 SUBPARAMETER\n         DC    AL1(L'MODELBTX)     LENGTH OF DSNAME\nMODELBTX DC    C'&MODEL'\nMODELBLN EQU   *-MODELB\n         TITLE 'RETURN TO JES2'\n*\n*  FREE THE WORKAREA, WE DON'T NEED IT ANYMORE.\n*\nFREEAREA FREEMAIN R,LV=AREALEN,A=(10)\n         DROP  R8,R10\n         SPACE ,\n*\n*  RETURN TO CALLER, RETURN CODE 0 INDICATES EXECUTE OTHER EXITS\n*\nRETURN0  RETURN (14,12),RC=0\n         LTORG\n         $MODEND\n         TITLE 'LOCAL WORKAREA - EXISTS FOR THE LIFE OF THE CONVERTER'\nWORKAREA DSECT\nWTOAREA  DS    CL128               AREA FOR WTO LIST\nINSERT   DS    F                   ADDRESS OF DCBK VERB KEY\nFLAGS    DS    CL1                 FLAGS BYTE\nGDS      EQU   X'80'                 DSNAME HAS A RELATIVE GENERATION\nNEW      EQU   X'40'                 DISP=NEW\nAREALEN  EQU   *-WORKAREA\n         END\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMM02": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x00)\\x00)\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "ANDREWS"}, "text": "++ USERMOD (ADMM02A) /*\n\n   ADMM02A/ADMM02B -\n      SMP USERMODS TO THE LINKAGE EDITOR THAT ALLOW LARGER\n      BLOCKING OF THE SYSLIN DATASET.  LINKAGE EDITOR INPUT\n      BLOCKSIZE IS NO LONGER LIMITED TO 3200 BYTES  (THE\n      NEW LIMITATION IS 11440 BYTES).\n\n      I WISH IBM WOULD DO THIS.  THIS IS SUCH A LITTLE THING.\n\n   INSTALLATION -\n      RECEIVE AND APPLY BOTH (ADMM02A, ADMM02B).\n\n                                                       */ .\n++ VER (Z038) FMID(HDP2240) PRE(UY41355).\n++ ZAP (HEWLFINT) DISTLIB(AOS04).\n  NAME HEWLFINT\n*                              ORG   HEWLFINT+X'A4C'\n*                     LINMAX   EQU   *\nVER 000A4C 0C80                  DC    H'3200'\n*                              ORG   HEWLFINT+X'EAA'\n*                     M40      EQU   *\nVER 000EAA 0028                  DC    H'40'\n*                              ORG   HEWLFINT+X'A4C'\n*                     LINMAX1  EQU   *\nREP 000A4C 2CB0                  DC    H'11440'\n*                              ORG   HEWLFINT+X'EAA'\n*                     M143     EQU   *\nREP 000EAA 008F                  DC    H'143'\n IDRDATA  ADMM02A\n++ USERMOD (ADMM02B).\n++ VER (Z038) FMID(HDP2240) .\n++ ZAP (HEWLFAPT) DISTLIB(AOS04).\n  NAME  HEWLFAPT\n*                              ORG   HEWLFAPT+X'216'\n*                     MAXBF    EQU   *\nVER 000216 0028                  DC    H'40'\n*                              ORG   HEWLFAPT+X'216'\n*                     NEWMAXBF EQU   *\nREP 000216 008F                  DC    H'143'\n IDRDATA  ADMM02B\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATLG": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x05\\x1a\\x05\\x1a\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 1306, "newlines": 1306, "modlines": 0, "user": "ANDREWS"}, "text": "//CATLG    JOB\n//*\n//*  CATLG, UNCATLG AND SCRATCH -\n//*    THESE TSO COMMANDS DO THE SAME THING THAT THE\n//*    CORRESPONDING IEHPROGM CONTROL STATEMENTS DO.\n//*    YOU CAN CATALOG AND UNCATALOG DATASETS TO\n//*    ARBITRARY VOLUMES AND UNITS, AND SCRATCH DATASETS\n//*    ON DIRECT ACCESS VOLUMES WITHOUT REGARD TO THEIR\n//*    CATALOG STATUS.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE\n//*    COMMAND NAME AND ALIASES YOU WILL HAVE TO DOCTOR THE\n//*    JOBSTREAM.\n//*\n//INSTALL PROC SOUT=$,                 <=== SYSOUT CLASS\n//             LIB='SYS1.CMDLIB',      <=== TARGET LOAD LIBRARY\n//             HELP='SYS1.HELP',       <=== HELP LIBRARY\n//             SYSTS=SYSALLDA,         <=== UNITNAME FOR WORK DATASETS\n//             ASMBLR=IEV90,           <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',    <=== LOCATION OF YOUR ASSEMBLER\n//             SMPMTS='SYS1.SMPMTS',   <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB',   <=== MACLIB DATASET NAME\n//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME\n//             MODGEN='SYS1.MODGEN'    <=== MODGEN DATASET NAME\n//*                                         USE SYS1.SMPMTS FOR MVS-370\n//*\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  DSN=&HELP,DISP=SHR\n//SYSUT2   DD  DSN=&HELP,DISP=SHR\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//         DD  DSN=&AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB,DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//        PEND\n//*\n//        EXEC INSTALL\n//IEBUPDTE.SYSIN DD *\n./         ADD    NAME=CATLG,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n)F FUNCTION -\n             THIS PROGRAM PERFORMS CATLG FUNCTIONS SIMILAR TO IEHPROGM.\n\n  AUTHOR -\n             DAVE PHILLIPS\n             A. DUDA AND SONS, INC.\n             P.O. BOX 257\n             OVIEDO, FL  32765\n\n)X SYNTAX -\n      CATLG  dsname                     {REQUIRED}\n             VOL(volser)                {REQUIRED}\n             UNIT(unitname)             {OPTIONAL}\n\n)O OPERANDS -\n))DSNAME\n           - REQUIRED.  DATASET NAME TO BE CATALOGED.  NORMAL TSO\n             DATASET NAMING CONVENTIONS APPLY.\n))VOL(volser)\n           - REQUIRED.  VOLUME SERIAL YOU WANT THE DATASET CATALOGED\n             ON.\n))UNIT(unitname)\n           - OPTIONAL.  IF THE VOLUME SERIAL IS THAT OF A CURRENTLY\n             MOUNTED DIRECT-ACCESS VOLUME, THE DEFAULT VALUE IS\n             TAKEN FROM THE VOLUME'S UCB.  OTHERWISE THE OPERAND\n             IS REQUIRED.\n./         ADD    NAME=SCRATCH,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n./         ALIAS  NAME=SCR\n)F FUNCTION -\n             THIS PROGRAM PERFORMS SCRATCH FUNCTIONS SIMILAR TO\n             IEHPROGM.  THE CATALOG IS NOT AFFECTED.\n\n  AUTHOR -\n             DAVE PHILLIPS\n             A. DUDA AND SONS, INC.\n             P.O. BOX 257\n             OVIEDO, FL  32765\n\n)X SYNTAX -\n      SCRATCH dsname                     {REQUIRED}\n              VOL(volser)                {OPTIONAL}\n\n   ALIAS - SCR\n\n)O OPERANDS -\n))DSNAME\n           - REQUIRED.  DATASET NAME TO BE SCRATCHED.  NORMAL TSO\n             DATASET NAMING CONVENTIONS APPLY.\n))VOL(volser)\n           - OPTIONAL.  VOLUME SERIAL YOU WANT THE DATASET SCRATCHED\n             FROM.  IF NOT SPECIFIED, THE dataset MUST BE CATALOGED,\n             AND THE VOLUME SERIAL IS TAKEN FROM THE CATALOG ENTRY.\n./         ADD    NAME=UNCATLG,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n./         ALIAS  NAME=UNCAT\n)F FUNCTION -\n             THIS PROGRAM PERFORMS UNCATLG FUNCTIONS SIMILAR TO\n             IEHPROGM.  THE TARGET DATASET IS NOT SCRATCHED.\n\n  AUTHOR -\n             DAVE PHILLIPS\n             A. DUDA AND SONS, INC.\n             P.O. BOX 257\n             OVIEDO, FL  32765\n\n)X SYNTAX -\n      UNCATLG dsname                     {REQUIRED}\n\n   ALIAS - UNCAT\n\n)O OPERANDS -\n))DSNAME\n           - REQUIRED.  DATASET NAME TO BE SCRATCHED.  NORMAL TSO\n             DATASET NAMING CONVENTIONS APPLY.\n./        ENDUP\n/*\n//ASM.SYSIN DD *\nCATLG    TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          HOUSEKEEPING AN*\n               D PARSE COMMAND BUFFER'\n*\n* FUNCTION -\n*            THIS PROGRAM PERFORMS CATLG,UNCATLG AND SCRATCH FUNCTIONS\n*            SIMILAR TO IEHPROGM.\n*\n* AUTHOR -\n*            DAVE PHILLIPS\n*              A. DUDA AND SONS, INC.\n*              P.O. BOX 257\n*              OVIEDO, FL  32765\n*\n* CHANGES OCTOBER 1990 (DAVID ANDREWS) -\n*            THE UCB LOOKUP TABLE WENT AWAY IN MVS/XA.  ADDED SOME\n*            CODE TO USE THE IOSVSUCB UCB SCAN ROUTINE INSTEAD.\n*\n* CHANGES NOVEMBER 1990 (DAVID ANDREWS) -\n*            OOPS.  DEVICE NAME TABLE WENT AWAY TOO.  ADDED CODE\n*            TO USE XA UNIT VERIFICATION SERVICES.  WHATTA PAIN.\n*\n         SPACE\n         ENTRY UNCATLG\n         ENTRY UNCAT\n         ENTRY SCRATCH\n         ENTRY SCR\n         SPACE\nCATLG    CSECT\n         SPACE\n         SAVE  (14,12),,CATLG-&SYSDATE-&SYSTIME\n         SPACE\n         LA    R12,START-CATLG(,R15)      LOAD BASE REGISTER\n         USING START,R12\n         LA    R2,EPCAT                   REMEMBER ENTRY POINT\n         L     R3,=V(CATPARS)             -> PARSE TABLE\n         BR    R12                        TO COMMON CODE\n         SPACE 2\nUNCATLG  SAVE  (14,12),,*\n         SPACE\n         LA    R12,START-UNCATLG(,R15)    LOAD BASE REGISTER\n         LA    R2,EPUCAT                  REMEMBER ENTRY POINT\n         L     R3,=V(UCATPARS)            -> PARSE TABLE\n         BR    R12                        TO COMMON CODE\nUNCAT    EQU   UNCATLG\n         SPACE 2\nSCRATCH  SAVE  (14,12),,*\n         SPACE\n         LA    R12,START-SCRATCH(,R15)    LOAD BASE REGISTER\n         LA    R2,EPSCR                   REMEMBER ENTRY POINT\n         L     R3,=V(SCRPARS)             -> PARSE TABLE\nSCR      EQU   SCRATCH\n         EJECT\n         SPACE\nSTART    LR    R6,R1              SAVE PARM\n         USING CPPL,R6\n         LA    R0,CORESIZE\n         GETMAIN R,LV=(0)         GET A WORK AREA\n         ST    R13,4(,R1)         )\n         ST    R1,8(,R13)         ) CHAIN SAVE AREAS\n         LR    R13,R1             )\n         USING CORE,R13\n         SPACE 2\n* BUILD ALL SERVICE ROUTINE PARAMETER BLOCKS & LISTS\n         SPACE\n         STC   R2,FLAGS           SET EP TYPE\n         LA    R5,PPLSECT         -> PPL\n         USING PPL,R5\n         ST    R3,PPLPCL          -> PARSE PCL\n         L     R1,CPPLUPT         -> UPT\n         L     R2,CPPLECT         -> ECT\n         SR    R3,R3\n         ST    R3,ECB             ZERO ECB\n         LA    R3,ECB             -> ECB\n         STM   R1,R3,PPLSECT      PUT ADDR OF UPT,ECT,ECB IN PPL\n         SPACE\n         LA    R2,PARSBACK        -> PARSE ANSWER AREA\n         ST    R2,PPLANS          IN PPL\n         L     R1,CPPLCBUF        CBUF PTR IN PPL\n         ST    R1,PPLCBUF\n         ST    R13,PPLUWA         PASS ADDR OF WORKAREA TO VALID CHK\n         SPACE\n         XC    MTPARML(MTLENMT),MTPARML  ZERO IKJEFF02 PARM LIST\n         LA    R1,MTCSECTP        -> MSG DESC SECTION OF PARMLIST\n         ST    R1,MTPLPTR         IN PARM LIST\n         ST    R6,MTCPPLP         PTR TO CPPL FOR IKJEFF02\n         ST    R3,MTECBP          PTR TO ECB  FOR IKJEFF02\n         SR    R1,R1              ZERO RESERVED\n         ST    R1,MTRESV1         WORD IN IKJEFF02 PARM LIST\n         MVI   MTHIGH,X'80'       SET VL BIT IN IKJEFF02 PARM LIST\n         SPACE\n         L     R1,=V(MSGCSECT)    PTR TO MSG CSECT\n         ST    R1,MTCSECTP        IN MSG DESC SECTION\n         MVI   MTSW1,MTPUTLSW     ISSUE MSGS WITH PUTLINE\n         MVI   MTSW2,0\n         SPACE\n         DROP  R5,R6\n         EJECT\n* CALL PARSE SERVICE ROUTINE TO GET PARAMETERS\n         SPACE\nCALLPARS CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         SPACE\n         LTR   R15,R15            PARSE OK ?\n         BZ    PARSEOK            YES\n         SPACE\n         CH    R15,=H'4'          USER PROFILE NOPROMPT ?\n         BE    RETURN             YES - GO AWAY\n         SPACE\n         LA    R1,GFPARSE         ROUTINE ID FOR GENERAL FAIL\n         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          PROCESS PARMS R*\n               ETURNED BY PARSE'\nPARSEOK  TM    FLAGS,EPUCAT       UNCATLG ?\n         BO    PARMSET            PARMS ALL SET\n         SPACE\n         L     R9,PARSBACK        -> PDL AREA\n         SPACE\n* MAKE SURE VOLSER HAS BEEN SUPPLIED\n         SPACE\n         TM    FLAGS,SVOL         VOLSER SUPPLIED ?\n         BO    GOTVOL             YEP\n         TM    FLAGS,EPSCR        SCRATCH ?\n         BNO   NEEDVOL            NO - MUST BE CATLG AND IT NEEDS VOL\n         SPACE\n* ISSUE LOCATE TO FIND VOLUME(S) FOR SCRATCH\n         SPACE\n         LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         SR    R3,R3              NO CVOL PARM\n         ST    R3,CAMLSTP3\n         LA    R3,CAMAREA         -> AREA TO PUT VOLUME LIST\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,NAMECAM     CAMLST NAME FLAGS\n         LOCATE CAMLST            LOCATE DSNAME IN CATALOG\n         SPACE\n         LTR   R15,R15            LOCATE OK ?\n         BNZ   BADLOC             NOPE\n         SPACE\n         B     SCRPRM             GO FINISH OFF SCRATCH PARAMETERS\n         SPACE\nNEEDVOL  MVC   MTMSGID,=CL4'V04'  \"VOLSER REQUIRED\"\n         OI    FLAGS,QUIT         NO GO\n         LA    LINK,PARMSET\n         B     ISSUEMSG\n         SPACE\nGOTVOL   TM    FLAGS,SUNIT        UNIT SUPPLIED ?\n         BNO   UCBLOOK            NO - LOOK IT UP IN UCB\n         SPACE\n         CLI   DEVTYPE+2,X'20'    DASD DEVICE SPECIFIED ?\n         BNE   SUCBLOOK           NOPE - SKIP LOOKUP\n         SPACE\n* LOOK UP UCB FOR GIVEN VOLSER TO GET DEVICE TYPE\n         SPACE\nUCBLOOK  L     R3,CVTPTR          -> CVT\n         USING CVTMAP,R3\n         XC    IOSVSWRK,IOSVSWRK  INITIALIZE IOSVSUCB WORKAREA 10/16/90\n         LA    R1,IOSVSWRK        BUILD IOSVSUCB PARM LIST     10/16/90\n         ST    R1,IOSVSPRM             \"                       10/16/90\n         LA    R1,IOSVSDEV             \"                       10/16/90\n         ST    R1,IOSVSPRM+4           \"                       10/16/90\n         LA    R1,IOSVSUCB             \"                       10/16/90\n         ST    R1,IOSVSPRM+8           \"                       10/16/90\n         OI    IOSVSPRM+8,X'80'        \"                       10/16/90\n         MVI   IOSVSDEV,UCB3DACC       \"                       10/16/90\nUCBLOOP  L     R15,CVTUCBSC       -> IOSVSUCB UCB SCAN RTN     10/16/90\n         LA    R1,IOSVSPRM        -> IOSVSUCB PARAMETER LIST   10/16/90\n         BALR  R14,R15            GET POINTER TO NEXT UCB      10/16/90\n         LTR   R15,R15            ANYMORE UCBS?                10/16/90\n         BNZ   VOLUNAV            NO, VOLUME NOT MOUNTED       10/16/90\n         L     R2,IOSVSUCB        POINT TO UCB                 10/16/90\n         USING UCB,R2                  \"                       10/16/90\n         AGO   .BYPASS1                                        10/16/90\n         L     R3,CVTILK2         -> UCB ADDR TABLE\n         DROP  R3\n         SR    R2,R2\n         USING UCB,R2\nUCBLOOP  ICM   R2,B'0011',0(R3)   -> UCB\n         LA    R3,2(,R3)          -> NEXT UCB PTR\n         BZ    UCBLOOP            NEXT UCB IF NULL\n         CL    R2,=X'0000FFFF'    END OF TABLE ?\n         BE    VOLUNAV            YES - VOLUME NOT MOUNTED\n         TM    UCBTYP+2,X'20'     DASD ?\n         BNO   UCBLOOP            NO\n.BYPASS1 ANOP  ,                                               10/16/90\n         CLC   VOLSER,UCBVOLI     THIS THE VOLUME ?\n         BNE   UCBLOOP            NO\n         DROP  R3                 FORGET ABOUT CVT             10/16/90\n         SPACE\nGOTUCB   TM    FLAGS,SUNIT        UNIT SUPPLIED ??\n         BNO   GOTUCB2            NO - FILL IN DEVTYPE\n         CLC   DEVTYPE,UCBTYP     YES - SAME AS MOUNTED VOL ?\n         BE    SUCBLOOK           YES - ALL OK\n         OI    FLAGS,SKIPOBTN     NOT SAME - BYPASS OBTAIN\n         B     SUCBLOOK\n         SPACE\nGOTUCB2  MVC   DEVTYPE,UCBTYP     SAVE DEVICE TYPE\n         B     SUCBLOOK           SKIP ERROR EXIT\n         DROP  R2\n         SPACE\nVOLUNAV  DS    0H                 VOLUME UNAVAILBLE\n         TM    FLAGS,SUNIT        UNIT SUPPLIED ?\n         BNO   *+12               NO - ISSUE ERROR MSG\n         OI    FLAGS,SKIPOBTN     YES - BYPASS OBTAIN\n         B     SUCBLOOK\n         MVC   MTMSGID,=CL4'V02'  VOLUME NOT MOUNTED MSG\n         TM    FLAGS,EPSCR        SCRATCH ?\n         BNO   *+10               NOPE - MSGID IS RIGHT\n         MVC   MTMSGID,=CL4'V03'  YES - FIX MSGID\n         SPACE\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT         PASS TO IKJEFF02\n         MVI   MTINSRT,L'VOLSER   LENGTH\n         OI    FLAGS,QUIT\n         LA    LINK,PARMSET       RETURN ADDR\n         B     ISSUEMSG\n         SPACE\nSUCBLOOK DS    0H                 SKIP UCB LOOKUP\n         SPACE\n         TM    FLAGS,EPSCR        SCRATCH EP ?\n         BO    SCRPRM             YES\n         SPACE\n* BUILD VOLUME LIST FOR CATALOG MACRO\n         SPACE\n         USING CATPARM,R9         DSECT\n         LA    R8,CAMAREA+2       -> AREA FOR VOLUME LIST\n         USING VOLLIST,R8         DESCRIPTION OF VOLUME LIST\n         SPACE\nVPTR     EQU   5                  VOLUME PDE LIST REGISTER\nUPTR     EQU   6                  UNIT PDE LIST REGISTER\nFPTR     EQU   7                  FILESEQ PDE LIST REGISTER\n         SPACE\n         LA    VPTR,CATVOLIN      -> VOLUME PDE LIST\n         LA    UPTR,CATUNTIN      -> UNIT TYPE PDE LIST\n         LA    FPTR,CATFSQIN      -> FILE SEQUENCE NUMBER PDE LIST\n         SR    R4,R4              COUNT NUMBER OF VOLUMES\n         SPACE 2\nVOLLOOP  MVI   CATVOL,C' '        BLANK OUT VOLSER FIELD\n         MVC   CATVOL+1(L'CATVOL-1),CATVOL\n         L     R1,0(,VPTR)        -> VOLUME\n         LH    R2,4(,VPTR)        LENGTH\n         BCTR  R2,0               -1 FOR EX\n         LA    R3,CATVOL          -> DESTINATION\n         EX    R2,MOVEPARM        MOVE IT IN\n*        MVC   0(*-*,R3),0(R1)\n         L     VPTR,8(,VPTR)      -> NEXT VOLUME PDE\n         SPACE\n*                                                              11/16/90\n*  I'M NOT SURE WHY THE FOLLOWING CODE IS HERE.  IT CAUSED     11/16/90\n*  A MESS WHEN I PUT IN THE IEFEB4UV MODS FOR XA.  DELETE      11/16/90\n*  IT AND SEE WHAT HAPPENS...   DBA                            11/16/90\n*                                                              11/16/90\n*+*      LTR   UPTR,UPTR          ANY UNIT TYPE ?              11/16/90\n*+*      BZ    V1UNIT             NO - USE UNIT & DEVTYPE FLDS 11/16/90\n*+*      TM    6(UPTR),X'80'      UNIT TYPE SUPPLIED ?         11/16/90\n*+*      BNO   V1UNIT             NO - IN UNIT & DEVTYPE FLDS  11/16/90\n*+*      SPACE ,                                               11/16/90\n*+*      L     R1,0(,UPTR)        -> DEVNAMET ENTRY            11/16/90\n*+*      MVC   DEVCODE,8(R1)      GET DEVICE TYPE              11/16/90\n*+*      L     UPTR,8(,UPTR)      YES - GET NEXT PDE           11/16/90\n*+*      LA    UPTR,0(,UPTR)      CLEAR HIGH BYTE              11/16/90\n*+*      B     VFSEQN             HAVE UNIT TYPE NOW           11/16/90\n         SPACE\nV1UNIT   MVC   DEVCODE,DEVTYPE    GET DEVICE TYPE\n         SPACE\nVFSEQN   TM    6(FPTR),X'80'      FILE SEQ SUPPLIED ?\n         BNO   VNFSEQ             NO - DETERMINE WHAT IT SHOULD BE\n         SPACE\n         L     R1,0(,FPTR)        -> FILE SEQ NUM\n         L     R1,0(,R1)          FILE SEQ NUM\n         STH   R1,DSEQNUM         PUT IN LIST\n         CLI   8(FPTR),X'FF'      ANY MORE FILE SEQ NUM ??\n         BE    NXTVOL             NO - SKIP CHAINING\n         L     FPTR,8(,FPTR)      YES - GET IT\n         B     NXTVOL             TO NEXT ENTRY\n         SPACE\nVNFSEQ   SR    R1,R1              ASSUME ZERO FILE SEQ NUMBER\n         CLI   DEVCODE+2,X'80'    MAG TAPE DEVICE ?\n         BNE   *+8                NOPE\n         LA    R1,1               YES - FSEQ NUM OF ONE\n         STH   R1,DSEQNUM         PUT IN LIST\n         SPACE 2\nNXTVOL   LA    R4,1(,R4)          COUNT THEM VOLS\n         CH    R4,=Y(#VOLS)       MORE THAN MAX VOLUMES ?\n         BH    VOLHIGH            TOO MUCH\n         LA    R8,NEXTVOL         -> NEXT VOLUME LIST ENTRY\n         LA    VPTR,0(,VPTR)      CLEAR HIGH BYTE\n         LTR   VPTR,VPTR          ANY MORE VOLS ?\n         BNZ   VOLLOOP            YES - GET THEM\n         SPACE\n         STH   R4,CAMAREA         STORE VOLUME COUNT\n         B     PARMSET            DONE WITH CATLG PARAMETERS\n         SPACE\nVOLHIGH  BCTR  R4,0               -1\n         STH   R4,CAMAREA         STORE VOLUME COUNT\n         SPACE\n         MVC   MTMSGID,=CL4'V01'        TOO MANY VOLUMES MSG\n         LA    LINK,PARMSET             RETURN ADDR\n         B     ISSUEMSG                 TELL USER ABOUT IT\n         SPACE\n         DROP  R8\n         EJECT\n* PROCESS SCRATCH PARAMETERS\n         SPACE\n         USING SCRPARM,R9         DSECT\nSCRPRM   CLI   SCRPRGKY+1,0       PURGE SPECIFIED ?\n         BE    PARMSET            NOPE - ALL DONE\n         OI    FLAGS,SCRPURGE     YES - REMEMBER THAT\n         SPACE\n         DROP  R9                 FINISHED WITH PDL\n         SPACE 4\nPARMSET  IKJRLSA PARSBACK          RELEASE PARSE STORAGE\n         SPACE 2\n         TM    FLAGS,QUIT         ANY ERRORS ?\n         BO    RETURN             YES - HANG IT UP\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          PROCESSING'\n         TM    FLAGS,EPUCAT+EPSCR+SKIPOBTN   SCR,UNCAT OR SKIP OBTN ?\n         BNZ   BLDCAML            YEP - BYPASS OBTAIN\n         SPACE\n         CLI   DEVTYPE+2,X'20'    DASD DEVICE ???\n         BNE   BLDCAML            NOPE - BYPASS OBTAIN\n         SPACE\n* VERIFY DATASET IS ON VOLUME SPECIFIED\n         SPACE\n         LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         LA    R3,VOLSER          -> VOLUME ID\n         ST    R3,CAMLSTP3\n         LA    R3,F1DSCB          -> AREA FOR F1 DSCB\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,SRCHCAM     CAMLST SEARCH FLAGS\n         OBTAIN CAMLST            GET THE DSCB FOR DATASET\n         SPACE\n         LTR   R15,R15            OBTAIN OK ???\n         BNZ   BADOBTN            NOPE\n         SPACE 2\n         EJECT\n* BUILD CAMLST FOR REQUIRED FUNCTION\n         SPACE\nBLDCAML  TM    FLAGS,EPSCR        SCRATCH EP ?\n         BO    SCRCAML            YES - BUILD SCRATCH CAMLST\n         SPACE\nCATCAML  LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         SR    R3,R3              NO CVOL PARM\n         ST    R3,CAMLSTP3\n         LA    R3,CAMAREA         -> VOLUME LIST\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,CATCAM      ASSUME CATBX CAMLST\n         TM    FLAGS,EPCAT        RIGHT ?\n         BO    *+10               YES\n         MVC   CAMLST,UCATCAM     NO - UNCATALOG\n         SPACE\n         CATALOG CAMLST           PERFORM THE FUNCTION\n         SPACE\n         LTR   R15,R15            CATALOG OK ??\n         BNZ   BADCAT             NOPE\n         SPACE\n         B     CONFIRM            GO WRITE CONFIMATION MSG\n         SPACE\nSCRCAML  TM    FLAGS,SVOL         WAS VOLUME SUPPLIED BY USER ?\n         BNO   SCRCAML2           NO - VOL LIST WAS BUILT BY LOCATE\n         LA    R1,1               ONE VOLUME\n         STH   R1,CAMAREA         IN VOLUME LIST\n         LA    R5,CAMAREA+2       -> VOLUME LIST ENTRY\n         USING VOLLIST,R5         DSECT\n         MVC   DEVCODE,DEVTYPE    DEVICE TYPE\n         MVC   CATVOL,VOLSER      VOLSER\n         SR    R1,R1              ZERO FILE SEQ NUM\n         STH   R1,DSEQNUM         STORE IT\n         DROP  R5\n         SPACE\nSCRCAML2 LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         SR    R3,R3              NO THIRD PARM\n         ST    R3,CAMLSTP3\n         LA    R3,CAMAREA         -> VOLUME LIST\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,SCRCAM      ASSUME NOPURGE CAMLST\n         TM    FLAGS,SCRPURGE     RIGHT ?\n         BNO   *+10               YES\n         MVC   CAMLST,SCRPCAM     NO - SCRATCH PURGE\n         SPACE\n         SR    R0,R0              DON'T MOUNT ANY VOLUMES\n         SCRATCH CAMLST           PERFORM THE FUNCTION\n         SPACE\n         LTR   R15,R15            SCRATCH OK ??\n         BNZ   BADSCR             NOPE\n         SPACE\n         TM    FLAGS,SVOL         DID USER SUPPLY VOLUME FOR SCRATCH ?\n         BO    CONFIRM            YES - ALL DONE WITH SCRATCH THEN\n         SPACE\n         MVC   CAMLST,UCATCAM     OTHERWISE NEED TO UNCATALOG DS ALSO\n         CATALOG CAMLST           DO IT     (PARM LIST SAME AS SCRATCH)\n         SPACE\n         LTR   R15,R15            UNCATALOG OK ?\n         BNZ   BADCAT             NOPE\n         EJECT\n* WRITE CONFIRMATION MESSAGE TO USER\n         SPACE\nCONFIRM  DS    0H                 WRITE OUT CONFIRMATION MSG\n         SPACE\n         LA    R1,DSNAME          -> DSNAME\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVC   MTINSRT(1),DSNLEN  LENGTH\n         SPACE\n         TM    FLAGS,EPUCAT       UNCATALOG ?\n         BO    CONFUCAT           YES\n         SPACE\n         TM    FLAGS,EPCAT        CATALOG ?\n         BNO   CONFSCR            NO - SCRATCH\n         SPACE\n         MVC   MTMSGID,=CL4'CAT'  CATALOG CONFIRMATION MSG\n         B     CONFMSG\n         SPACE\nCONFSCR  TM    FLAGS,SVOL         DID USER SUPPLY VOLUME ?\n         BNO   CONFSCR2           NO - SO DIFFERENT MSG\n         SPACE\n         MVC   MTMSGID,=CL4'SCR'  SCRATCH CONFIRMATION MSG\n         B     CONFMSG\n         SPACE\nCONFSCR2 MVC   MTMSGID,=CL4'DEL'  DELETE CONFIRMATION MSG\n         B     CONFMSG\n         SPACE\nCONFUCAT MVC   MTMSGID,=CL4'UCAT' UNCATALOG CONFIRMATION MSG\n         SPACE\nCONFMSG  BAL   LINK,ISSUEMSG\n         SPACE\nRETURN   LA    R1,CORE            -> WORKAREA\n         LA    R0,CORESIZE        LENGTH\n         L     R13,4(,R13)        GET OLD SAVE AREA\n         SVC   10                 FREE WORKAREA\n         SPACE\n         SR    R15,R15            RETURN CODE ZERO\n         RETURN (14,12),,RC=(15)  RETURN TO CALLER\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          SUBROUTINES'\n         SPACE\nISSUEMSG CALLTSSR EP=IKJEFF02,MF=(E,MTPARML)\n         SPACE\n         LTR   R15,R15            IKJEFF02 OK ?\n         BZR   LINK               YES - RETURN\n         SPACE\n         CH    R15,=H'76'         IKJEFF02 PARMLIST INVALID ?\n         BNE   NEFF02ER           NO\n         SPACE\n         ABEND 200,DUMP\n         SPACE\nNEFF02ER LA    R1,GFPUTL          NO - PUTLINE ERROR\n         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          PARSE PCLS'\n         PRINT NOGEN\nCATPARS  IKJPARM DSECT=CATPARM\nCATDSNIN IKJPOSIT DSNAME,USID,PROMPT='DSNAME',VALIDCK=DSNCHK\nCATVOLKY IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=CATVOLSF,ALIAS='VOLSER'\nCATFSQKY IKJKEYWD\n         IKJNAME 'FILESEQUENCE',SUBFLD=CATFSQSF,ALIAS='FSEQN'\nCATUNTKY IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=CATUNTSF,ALIAS='DEVTYPE'\n         SPACE\nCATVOLSF IKJSUBF\nCATVOLIN IKJIDENT 'VOLUME',LIST,MAXLNTH=6,PROMPT='VOLUME',             *\n               FIRST=ALPHANUM,OTHER=ALPHANUM,VALIDCK=VOLCHK\nCATFSQSF IKJSUBF\nCATFSQIN IKJIDENT 'FILE SEQUENCE NUMBER',LIST,INTEG,                   *\n               PROMPT='FILE SEQUENCE NUMBER'\nCATUNTSF IKJSUBF\nCATUNTIN IKJIDENT 'UNIT TYPE',LIST,MAXLNTH=8,VALIDCK=UNITCHK,          *\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                          *\n               PROMPT='UNIT TYPE'\n         IKJENDP\n         SPACE 4\nUCATPARS IKJPARM DSECT=UCATPARM\nUCATDSN  IKJPOSIT DSNAME,USID,PROMPT='DSNAME',VALIDCK=DSNCHK\n         IKJENDP\n         SPACE 4\nSCRPARS  IKJPARM DSECT=SCRPARM\nSCRDSNIN IKJPOSIT DSNAME,USID,PROMPT='DSNAME',VALIDCK=DSNCHK\nSCRVOLKY IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=SCRVOLSF,ALIAS='VOLSER'\nSCRPRGKY IKJKEYWD\n         IKJNAME 'PURGE'\n         SPACE\nSCRVOLSF IKJSUBF\nSCRVOLIN IKJIDENT 'VOLUME',MAXLNTH=6,PROMPT='VOLUME',                  *\n               FIRST=ALPHANUM,OTHER=ALPHANUM,VALIDCK=VOLCHK\n         IKJENDP\n         SPACE 2\n         PRINT GEN\n         SPACE 3\n         PUSH  USING              SAVE MAINLINE ADDRESSABLITY\n         DROP  ,                  DROP MAINLINE ADDRESSABLITY\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          PARSE VALIDITY *\n               CHECKING ROUTINES'\nDSNCHK   SAVE  (14,6),,*\n         SPACE\n         LR    R6,R1              SAVE PARM ADDR\n         LR    R5,R15             LOAD BASE\n         USING DSNCHK,R5\n         L     R4,4(,R6)          -> WORKAREA\n         USING CORE,R4\n         SPACE\n         MVI   DSNAME,C' '        BLANK OUT DSNAME FIELD\n         MVC   DSNAME+1(L'DSNAME-1),DSNAME\n         SPACE\n         L     R3,0(,R6)          -> PDE FOR DSNAME\n         L     R1,0(,R3)          -> DSNAME\n         LH    R2,4(,R3)          LENGTH OF DSNAME\n         SPACE\n         STC   R2,DSNLEN          SAVE DSNAME LENGTH\n         LA    R3,DSNAME          -> AREA TO MOVE TO\n         BCTR  R2,0               MINUS ONE FOR EX MVC\n         EX    R2,MOVEPARM        GET DSN\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n         SR    R15,R15\n         RETURN (14,6),,RC=(15)\n         SPACE\n         DROP  R5,R4\n         EJECT\nVOLCHK   SAVE  (14,6),,*\n         SPACE\n         LR    R6,R1              SAVE PARM ADDR\n         LR    R5,R15             LOAD BASE\n         USING VOLCHK,R5\n         L     R4,4(,R6)          -> WORKAREA\n         USING CORE,R4\n         SPACE\n         TM    FLAGS,SVOL         GOT VOLSER ALREADY ?\n         BO    VOLCRET            YES - RETURN\n         SPACE\n         MVI   VOLSER,C' '        BLANK OUT VOLSER FIELD\n         MVC   VOLSER+1(L'VOLSER-1),VOLSER\n         OI    FLAGS,SVOL         INDICATE WE HAVE A VOLSER\n         SPACE\n         L     R3,0(,R6)          -> PDE FOR VOLSER\n         L     R1,0(,R3)          -> VOLSER\n         LH    R2,4(,R3)          LENGTH OF VOLSER\n         SPACE\n         LA    R3,VOLSER          -> AREA TO MOVE TO\n         BCTR  R2,0               MINUS ONE FOR EX MVC\n         EX    R2,MOVEPARM        GET DSN\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\nVOLCRET  SR    R15,R15\n         RETURN (14,6),,RC=(15)\n         SPACE\n         DROP  R5,R4\n         EJECT\nUNITCHK  SAVE  (14,12),,*\n         SPACE\n         LR    R12,R1             SAVE PARM ADDR\n         LR    R10,R15            LOAD BASE\n         USING UNITCHK,R10\n         L     R11,4(,R12)        -> WORKAREA\n         USING CORE,R11\n         SPACE 2\n         MVI   UNIT,C' '          BLANK OUT UNIT FIELD\n         MVC   UNIT+1(L'UNIT-1),UNIT\n         SPACE\n         L     R3,0(,R12)         -> PDE FOR UNIT\n         L     R1,0(,R3)          -> UNIT\n         LH    R2,4(,R3)          LENGTH OF UNIT\n         LA    R3,UNIT            -> AREA FOR UNIT\n         BCTR  R2,0               MINUS ONE FOR EX\n         EX    R2,MOVEPARM\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n*                                                              11/16/90\n*  IF MVS/XA THEN VERIFY THE UNITNAME WITH THE UNIT            11/16/90\n*  VERIFICATION SERVICE.  IF MVS-370 THEN GO MANHANDLE         11/16/90\n*  DEVNAMET DIRECTLY.                                          11/16/90\n*                                                              11/16/90\n         L     R3,CVTPTR          -> CVT                       11/16/90\n         USING CVT,R3                  \"                       11/16/90\n         TM    CVTDCB,CVTMVSE     XA SYSTEM?                   11/16/90\n         BNO   DEVN370            NO, FIDDLE WITH DEVNAMET     11/16/90\n         DROP  R3                                              11/16/90\n         SPACE ,                                               11/16/90\n*                                                              11/16/90\n*  IEFEB4UV NEEDS AN 18-WORD SAVE AREA POINTED TO BY           11/16/90\n*  REG13.                                                      11/16/90\n*                                                              11/16/90\n         ST    R13,UVSRSAVE+4     PUSH OLD SAVE AREA ADDRESS   11/16/90\n         LA    R13,UVSRSAVE       POINT TO NEW ONE             11/16/90\n         SPACE ,                                               11/16/90\n*                                                              11/16/90\n*  SETUP TO CALL IEFEB4UV FUNCTIONS #3 AND #8 (SEE MVS/XA      11/16/90\n*  SYSTEM MODIFICATIONS SPL).  FUNCTION #3 RETURNS A LIST      11/16/90\n*  OF UCBS ASSOCIATED WITH THIS UNITNAME.  FUNCTION #8         11/16/90\n*  RETURNS THE ATTRIBUTES OF THE UNITNAME.                     11/16/90\n*                                                              11/16/90\n         LA    R5,UVSRUTAB        POINT TO UVSR UNIT TABLE     11/16/90\n         ST    R5,UVSRPARM             \"                       11/16/90\n         LA    R5,UVSRFLGS        POINT TO UVSR FLAGS          11/16/90\n         ST    R5,UVSRPARM+4           \"                       11/16/90\n         MVC   UVSRFLGS,=XL4'10800000' SET FNS #3 AND #8       11/16/90\n         XC    UVSRUTAB,UVSRUTAB  CLEAR UNIT TABLE             11/16/90\n         XC    UVSRATTR,UVSRATTR  CLEAR ATTRIBUTE AREA         11/16/90\n         MVI   UVSRATTR,X'0A'     SET LENGTH OF ATTRIBUTE AREA 11/16/90\n         MVC   UVSRUTAB(8),UNIT   MOVE IN UNIT NAME            11/16/90\n         LA    R1,UVSRATTR        POINT TO ATTRIBUTE AREA      11/16/90\n         ST    R1,UVSRUTAB+12          \"                       11/16/90\n         LA    R1,UVSRPARM        POINT TO PARAMETER LIST      11/16/90\n         LINK  EP=IEFEB4UV        VERIFY UNITNAME              11/16/90\n         LTR   R15,R15            GO OKAY?                     11/16/90\n         BZ    EB4OK              YES, BRANCH                  11/16/90\nEB4NOK   L     R13,4(,R13)        RESTORE OLD S/A POINTER      11/16/90\n         LA    R15,4              TELL PARSE NAME INVALID      11/16/90\n         B     UNITCRET           RETURN                       11/16/90\n         SPACE ,                                               11/16/90\n*                                                              11/16/90\n*  CALL TO IEFEB4UV WENT OKAY.  FUNCTION #3 RETURNED A         11/16/90\n*  LIST OF UCBS; LOOK AT THE FIRST ONE AND GET ITS DEVICE      11/16/90\n*  TYPE, THEN FREEMAIN THE UCB POINTER LIST.                   11/16/90\n*                                                              11/16/90\nEB4OK    L     R1,UVSRUTAB+8      POINT TO UCB LIST            11/16/90\n         CLC   4(4,R1),=F'0'      AT LEAST ONE ENTRY?          11/16/90\n         BNH   EB4NOK             NO, RETURN ERROR TO PARSE    11/16/90\n         L     R0,0(,R1)          GET SP/LENGTH OF UCB LIST    11/16/90\n         L     R15,8(,R1)         POINT TO FIRST UCB           11/16/90\n         USING UCB,R15                 \"                       11/16/90\n         MVC   DEVTYPE,UCBTYP     MOVE DEVICE TYPE FROM UCB    11/16/90\n         DROP  R15                                             11/16/90\n         FREEMAIN R,LV=(0),A=(1)  FREE UCB POINTER LIST        11/16/90\n         SPACE ,                                               11/16/90\n*                                                              11/16/90\n*  HAVING RETRIEVED A DEVICE TYPE, MAKE SURE IT'S THE ONLY     11/16/90\n*  ONE ASSOCIATED WITH THIS UNITNAME.                          11/16/90\n*                                                              11/16/90\n         CLI   UVSRATTR+3,X'01'   MORE THAN ONE DEVICE CLASS?  11/16/90\n         BH    EB4NOK             YES, FAIL PARSE              11/16/90\n         CLC   UVSRATTR+4(4),=F'1' MORE THAN ONE DEVICE TYPE?  11/16/90\n         BH    EB4NOK             YES, FAIL IT AGAIN           11/16/90\n         OI    FLAGS,SUNIT        INDICATE UNIT IS AVAILABLE   11/16/90\n         L     R13,4(,R13)        RESTORE OLD S/A POINTER      11/16/90\n         SR    R15,R15            ZERO RC                      11/16/90\n         B     UNITCRET           RETURN TO PARSE              11/16/90\n         SPACE ,                                               11/16/90\n*                                                              11/16/90\n*  IN MVS/370, DANCE THROUGH THE DEVICE NAME TABLE             11/16/90\n*                                                              11/16/90\nDEVN370  L     R5,@DEVNAME        LOAD ADDR OF DEVNAMET\n         LTR   R5,R5              GOT IT ?\n         BNZ   HAVNAMET           YES - SKIP LPA SEARCH\n         SPACE\n         L     R3,CVTPTR          GET ADDRESS OF CVT\n         L     R15,CVTLPDSR-CVT(,R3) GET ADDR OF LPDE SEARCH ROUTINE\n         LM    R0,R1,DEVNAMET     GET 'DEVNAMET' IN R0 & R1\n         BALR  R14,R15            CALL IEAVVMSR - DESTROYS R6, R8 & R9\n         B     GOTNAMET           +0 - DEVNAMET FOUND                  *\n                                  +4 - DEVNAMET NOT FOUND\n         LA    R15,12             TELL PARSE WE CAN'T GO ON\n         B     UNITCRET           ERROR EXIT\nGOTNAMET DS    0H                 DEVNAMET LPDE FOUND\n         LR    R1,R0              GET ADDRESS OF DEVNAMET LPDE\n         L     R5,LPDENTP-LPDE(,R1) GET EP ADDRESS OF DEVNAMET\n         ST    R5,@DEVNAME        SAVE FOR FUTURE USE\nHAVNAMET L     R15,0(,R5)         GET NUMBER OF ENTRIES\n         LA    R5,4(,R5)          GET ADDRESS OF 1ST ENTRY\n         SPACE\nDEVTLOOP CLC   UNIT,0(R5)         UNIT NAME MATCH ?\n         BE    UNITGOT            YES - UNIT FOUND\n         LA    R5,12(,R5)         NO - POINT TO NEXT ENTRY\n         BCT   R15,DEVTLOOP       LOOP UNTIL END\n         SPACE\n         LA    R15,4              TELL PARSE NAME INVALID\n         B     UNITCRET           RETURN\n         SPACE\nUNITGOT  DS    0H                 UNIT NAME FOUND IN DEVNAMET\n         CLI   11(R5),X'00'       A DEVICE GROUP NAME ?\n         BNE   UNITACT            NO - AN ACTUAL UNIT\n         LA    R2,GRPTABLE        -> GROUP TABLE\n         LA    R1,GRPCNT          NUMBER OF GROUPS IN TABLE\nGRPLOOP  CLC   10(1,R5),0(R2)     DEVICE CLASS MATCH ?\n         BE    GOTDEVCL           YES\n         LA    R2,9(,R2)          -> NEXT GROUP ENTRY\n         BCT   R1,GRPLOOP         LOOP\n         SPACE\n         LA    R15,4              TELL PARSE BAD UNIT\n         B     UNITCRET           RETURN\n         SPACE\nGOTDEVCL MVC   UNIT,1(R2)         GET ACTUAL UNIT WE WANT\n         L     R5,@DEVNAME        -> DEVNAMET\n         B     HAVNAMET           GO LOOK UP ACTUAL DEVICE\n         SPACE\nUNITACT  DS    0H                 ACTUAL UNIT NAME FOUND\n         MVC   DEVTYPE,8(R5)      GET DEVICE TYPE FIELD\n         SPACE\n         OI    FLAGS,SUNIT        HAVE A UNIT\n         L     R1,0(,R12)         -> PDE FOR UNIT\n         ST    R5,0(,R1)          SAVE DEVNAMET ENTRY @ IN PDE\n         SR    R15,R15            ZERO RC\n         SPACE\nUNITCRET RETURN (14,12),,RC=(15)\n         SPACE\n         DROP  R10,R11\n         SPACE 4\n         POP   USING              RESTORE MAINLINE ADDRESSABLITY\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          CONSTANTS'\nMOVEPARM MVC   0(*-*,R3),0(R1)    MOVE PARAMTERS FROM PDL\n         SPACE\nCATCAM   CAMLST CATBX,0,,0        CATALOG A DATASET\n         ORG   CATCAM+4\nUCATCAM  CAMLST UCATDX,0          UNCATALOG A DATASET\n         ORG   UCATCAM+4\nSCRCAM   CAMLST SCRATCH,0,,0      SCRATCH A DATASET\n         ORG   SCRCAM+4\nSCRPCAM  CAMLST SCRATCH,0,,0,,OVRD  SCRATCH A DATASET (PURGE)\n         ORG   SCRPCAM+4\nNAMECAM  CAMLST NAME,0,,0         LOCATE A DATASET\n         ORG   NAMECAM+4\nSRCHCAM  CAMLST SEARCH,0,0,0      OBTAIN A DATASET'S DSCB\n         ORG   SRCHCAM+4\n         SPACE\nCAT8LDES DS    0F                 DESCRIPTIONS OF CATALOG ERROR CODES\n         DC    AL1(L'ALRCAT),AL3(ALRCAT)        CATALOG R1 = 0\n         DC    AL1(L'CVOLCH),AL3(CVOLCH)        CATALOG R1 = 4\n         DC    AL1(L'NOQUAL),AL3(NOQUAL)        CATALOG R1 = 8\n         DC    AL1(L'NEEDQUAL),AL3(NEEDQUAL)    CATALOG R1 = 12\n         DC    AL1(L'OVERQUAL),AL3(OVERQUAL)    CATALOG R1 = 16\n         SPACE\nDEVNAMET DC    CL8'DEVNAMET'      NAME OF DEVICE TABLE\n         SPACE\nGRPTABLE DC    X'80',CL8'3400-5'  MAGNETIC TAPE DEVICE CLASS\n         DC    X'20',CL8'3350'    DIRECT ACCESS DEVICE CLASS\nGRPCNT   EQU   (*-GRPTABLE)/9\n         SPACE\nALRCAT   DC    C'QUALIFICATION ALREADY EXISTS'\nCVOLCH   DC    C'CLOSED CHAIN OF CVOL POINTERS'\nNOQUAL   DC    C'QUALIFICATION DOES NOT EXIST'\nNEEDQUAL DC    C'INSUFFICIENT QUALIFICATION'\nOVERQUAL DC    C'TOO MUCH QUALIFICATION'\n         SPACE 2\n         LTORG\n         SPACE 2\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          ERROR EXITS'\n         SPACE\nBADCAT   LA    LINK,RETURN        SET RETURN ADDR FOR ISSUEMSG\n         CH    R15,=H'4'\n         BL    CATRC\n         CH    R15,=H'24'\n         BH    CATRC\n         B     *(R15)             DETERMINE RETURN CODE\n         B     CAT4\n         B     CAT8\n         B     CATRC\n         B     CAT16\n         B     CAT20\n         B     CAT24\n         SPACE 2\nCAT4     MVC   MTMSGID,=CL4'C04'  \"CATALOG DOES NOT EXIST\"\n         B     ISSUEMSG\n         SPACE\nCAT8     LR    R4,R0              SAVE INDEX LEVEL\n         LTR   R3,R1              DO WE HAVE A \"LOCATE\" RC ???\n         BNZ   CAT8CVOL           YES - MUST BE A CVOL CATALOG\n         SPACE\n         CH    R4,=H'56'          USER UNAUTHORIZED ?\n         BNE   CAT8VS             NO - MUST BE VSAM CTLG RC\n         MVC   MTMSGID,=CL4'C08B' \"USER UNAUTHORIZED\"\n         B     ISSUEMSG\n         SPACE\nCAT8VS   MVC   MTMSGID,=CL4'C08C' \"VSAM CATALOG RETURN CODE\"\n         ST    R4,DBLWRD          VSAM CTLG RC\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT         FIRST INSERT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         SPACE\nCAT8CVOL MVC   MTMSGID,=CL4'C08'  \"OPERATION INCONSISTENT ... \"\n         LA    R3,0(,R3)          CLEAR HIGH BYTE\n         CH    R3,=H'16'\n         BH    CAT8LRC\n         LA    R1,B'11'           MASK\n         NR    R1,R3              MULTIPLE OF 4 ?\n         BNZ   CAT8LRC            NOPE\n         SPACE\n         L     R1,CAT8LDES(R3)    LOAD PTR ENGLISH DESCRIPTION OF RC\n         ST    R1,MTINSRT         SET FIRST INSERT\n         SPACE\nCAT8ILVL ST    R4,DBLWRD          INDEX LEVEL\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT+4       SECOND INSERT\n         MVI   MTINSRT+4,X'84'    CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         SPACE\nCAT8LRC  MVC   MTMSGID,=CL4'C08A' 2ND LVL MSG IS \"LOCATE RETURN CODE\"\n         ST    R3,DBLWRD+4        STORE \"LOCATE\" TYPE RETURN CODE\n         LA    R1,DBLWRD+4\n         ST    R1,MTINSRT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     CAT8ILVL           GO GET INDEX LEVEL INSERT\n         SPACE\nCAT16    MVC   MTMSGID,=CL4'C16'  \"INDEX STRUCTURE DOES NOT EXIST\"\n         B     ISSUEMSG\n         SPACE\nCAT20    MVC   MTMSGID,=CL4'C20'  \"CATALOG FULL\"\n         B     ISSUEMSG\n         SPACE\nCAT24    MVC   MTMSGID,=CL4'C24'  \"CANNOT CATALOG GDG DATASET\"\n         B     ISSUEMSG\n         SPACE\nCATRC    MVC   MTMSGID,=CL4'CRC'  \"UNRECOVERABLE ERROR\"\n         ST    R15,DBLWRD         CATALOG RC\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT         FIRST INSERT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         EJECT\n         SPACE\nBADLOC   LA    LINK,RETURN        SET RETURN ADDR FOR ISSUEMSG\n         CH    R15,=H'4'\n         BL    LOCRC\n         BE    CAT4               RC = 4 SAME AS CATALOG\n         CH    R15,=H'16'\n         BH    LOCRC\n         LA    R1,B'11'           MASK\n         NR    R1,R15             RC MULTIPLE OF 4 ?\n         BNZ   LOCRC              NOPE\n         SPACE 2\nLOCQUAL  MVC   MTMSGID,=CL4'QUAL' \"..... - INDEX LEVEL IS ... \"\n         L     R1,CAT8LDES(R15)   LOAD PTR ENGLISH DESCRIPTION OF RC\n         ST    R1,MTINSRT         SET FIRST INSERT\n         ST    R0,DBLWRD          INDEX LEVEL\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT+4       SECOND INSERT\n         MVI   MTINSRT+4,X'84'    CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         SPACE\nLOCRC    MVC   MTMSGID,=CL4'LOC'  \"LOCATE RETURN CODE\"\n         ST    R15,DBLWRD         LOCATE RC\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT         FIRST INSERT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         EJECT\nBADSCR   LA    LINK,RETURN        SET RETURN ADDR FOR ISSUEMSG\n         CH    R15,=H'4'\n         BL    SCRRC\n         CH    R15,=H'8'\n         BH    SCRRC\n         B     *(R15)             DETERMINE RETURN CODE\n         B     SCRR4\n         B     SCRR8\n         SPACE 2\nSCRR4    MVC   MTMSGID,=CL4'V03'  \"VOLUME XXXXXX NOT MOUNTED\"\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVI   MTINSRT,L'VOLSER   LENGTH\n         B     ISSUEMSG\n         SPACE\nSCRR8    DS    0H                 STATUS CODE RETURNED IN VOL LIST\n         LA    R1,DSNAME          MOST MSGS HAVE A DSN AS A VARIBLE\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVC   MTINSRT(1),DSNLEN  LENGTH\n         SR    R15,R15            CLEAR FOR INSERT\n         IC    R15,CAMAREA+13     PICK UP SCRATCH STATUS CODE\n         CH    R15,=H'1'          CHECK WITHIN BOUNDS\n         BL    SCRSC\n         CH    R15,=H'9'\n         BH    SCRSC\n         SLL   R15,2              * 4 TO GET BRANCH TABLE OFFSET\n         B     *(R15)             DETERMINE RETURN CODE\n         B     SCR1\n         B     SCR2\n         B     SCR3\n         B     SCR4\n         B     SCRR4\n         B     SCR6\n         B     SCR7\n         B     SCR8\n         B     SCR9\n         SPACE\nSCR1     MVC   MTMSGID,=CL4'SSC1' \"DATASET NOT FOUND\"\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT+4       1ST VARIBLE\n         MVI   MTINSRT+4,L'VOLSER     LENGTH\n         B     ISSUEMSG\n         SPACE\nSCR2     MVC   MTMSGID,=CL4'SSC2' \"INCORRECT PASSWORD SUPPLIED\"\n         B     ISSUEMSG\n         SPACE\nSCR3     MVC   MTMSGID,=CL4'SSC3' \"DATASET NOT EXPIRED\"\n         B     ISSUEMSG\n         SPACE\nSCR4     MVC   MTMSGID,=CL4'SSC4' \"I/O ERROR READING VTOC\"\n         B     ISSUEMSG\n         SPACE\nSCR6     MVC   MTMSGID,=CL4'SSC6' \"UNABLE TO MOUNT VOLUME\"\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVI   MTINSRT,L'VOLSER   LENGTH\n         B     ISSUEMSG\n         SPACE\nSCR7     MVC   MTMSGID,=CL4'SSC7' \"DATASET IN USE\"\n         B     ISSUEMSG\n         SPACE\nSCR8     MVC   MTMSGID,=CL4'SSC8' \"USER NOT AUTHORIZED TO SCRATCH DS\"\n         B     ISSUEMSG\n         SPACE\nSCR9     MVC   MTMSGID,=CL4'SSC9' \"UNABLE TO DELETE DATASET FROM RACF\"\n         B     ISSUEMSG\n         SPACE\nSCRSC    MVC   MTMSGID,=CL4'SSC'  \"SCRATCH STATUS CODE XX\"\n         B     SCRNUMC\n         SPACE\nSCRRC    MVC   MTMSGID,=CL4'SRC'  \"SCRATCH RETURN CODE XX\"\nSCRNUMC  ST    R15,DBLWRD         SCRATCH RC\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT         FIRST INSERT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         EJECT\nBADOBTN  LA    LINK,RETURN        RETURN ADDR FOR ISSUEMSG\n         CH    R15,=H'4'\n         BL    OBTNRC\n         CH    R15,=H'12'\n         BH    OBTNRC\n         B     *(R15)             DETERMINE RETURN CODE\n         B     OBTN4      4\n         B     OBTN8      8\n         B     SCR4      12       \"I/O ERROR READING VTOC\"\n         SPACE 2\nOBTN4    MVC   MTMSGID,=CL4'V02'  \"VOLUME XXXXXX NOT MOUNTED\"\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVI   MTINSRT,L'VOLSER   LENGTH\n         B     ISSUEMSG\n         SPACE\nOBTN8    MVC   MTMSGID,=CL4'SSC1' \"DATASET NOT FOUND\"\n         LA    R1,DSNAME          -> DSNAME\n         ST    R1,MTINSRT         1ST VARIBLE\n         MVC   MTINSRT(1),DSNLEN  LENGTH\n         LA    R1,VOLSER          -> VOLUME\n         ST    R1,MTINSRT+4       1ST VARIBLE\n         MVI   MTINSRT+4,L'VOLSER     LENGTH\n         B     ISSUEMSG\n         SPACE\nOBTNRC   MVC   MTMSGID,=CL4'ORC'  \"OBTAIN RETURN CODE XX\"\n         ST    R15,DBLWRD         OBTAIN RC\n         LA    R1,DBLWRD\n         ST    R1,MTINSRT         FIRST INSERT\n         MVI   MTINSRT,X'84'      CNVT TO DEC,LENGTH OF 4\n         B     ISSUEMSG           GO ISSUE MSG\n         EJECT\nGNRLFAIL DS    0H                 CALL GENERAL FAIL\n         SPACE\n         XC    GFPARMS(GFLENGF),GFPARMS    INIT GENERAL FAIL PARM LIST\n         SPACE\n         ST    R15,GFRCODE        RETURN CODE IN PARM LIST\n         STH   R1,GFCALLID        FAILING ROUTINE ID\n         L     R1,MTCPPLP         GET CPPL FROM IKJEFF02 PARM LIST\n         ST    R1,GFCPPLP         -> CPPL FOR GENRL FAIL\n         SPACE\n         LA    R1,ECB             -> DUMMY ECB\n         ST    R1,GFECBP          FOR GENERAL FAIL TO GIVE TO PUTLINE\n         SR    R1,R1\n         ST    R1,ECB             CLEAR ECB\n         SPACE\n         LA    R1,GFPARMS         -> GENERAL FAIL PARMS\n         ST    R1,GFPARMP         ADDR LIST FOR LINK\n         SPACE\n         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  DIAGNOSE RETURN CODE\n         SPACE\n         LTR   R15,R15            GENERAL FAIL EXECUTE OK ?\n         BZ    RETURN\n         SPACE 2\n         ABEND 100,DUMP           WHY ?\n         SPACE 3\n         LTORG\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          MESSAGES'\nMSGCSECT CSECT\n         IKJTSMSG (' ',,' CATALOGED'),CAT\n         SPACE\n         IKJTSMSG (' ',,' UNCATALOGED'),UCAT\n         SPACE\n         IKJTSMSG (' ',,' SCRATCHED'),SCR\n         SPACE\n         IKJTSMSG (' ',,' DELETED'),DEL\n         SPACE\n         IKJTSMSG (' TOO MANY VOLUMES+'),VX01\n         IKJTSMSG (' ALL VOLUMES AFTER THE FIRST 20 HAVE BEEN IGNORED')*\n               ,V01,VX01\n         SPACE\n         IKJTSMSG (' VOLUME ',,' NOT MOUNTED+'),VX02\n         IKJTSMSG (' YOU MUST SUPPLY THE UNIT TYPE TO CATALOG A DATASET*\n                ON A NON-MOUNTED VOLUME'),V02,VX02\n         SPACE\n         IKJTSMSG (' DASD VOLUME ',,' NOT MOUNTED'),V03\n         SPACE\n         IKJTSMSG (' VOLUME SERIAL IS REQUIRED'),V04\n         SPACE\n         IKJTSMSG (' REQUIRED CATALOG DOES NOT EXIST'),C04\n         SPACE\n         IKJTSMSG (' OPERATION INCONSISTENT WITH EXISTING CATALOG STRUC*\n               TURE+'),CX08\n         IKJTSMSG (' ',,' - INDEX LEVEL IS ',),C08,CX08\n         IKJTSMSG (' VSAM CATALOG RETURN CODE IS ',),C08C,CX08\n         SPACE\n         IKJTSMSG (' OPERATION CANNOT BE PERFORMED+'),CY08\n         IKJTSMSG (' CATALOG MACRO R15 = 8, R1 = ',,', R0 = ',),C08A,CY*\n               08\n         IKJTSMSG (' USER IS NOT AUTHORIZED TO PERFORM THE OPERATION'),*\n               C08B,CY08\n         SPACE\n         IKJTSMSG (' INDEX STRUCTURE REQUIRED TO CATALOG DATASET DOES N*\n               OT EXIST'),C16\n         SPACE\n         IKJTSMSG (' CATALOG DATASET IS FULL'),C20\n         SPACE\n         IKJTSMSG (' UNABLE TO CATALOG GENERATION DATASET+'),CX24\n         IKJTSMSG ('  GENERATION DATASET HAS IMPROPER NAME OR IS TOO OL*\n               D TO FIT IN CATALOG'),C24,CX24\n         SPACE\n         IKJTSMSG (' UNRECOVERABLE ERROR DURING CATALOG OPERATION+'),CX*\n               RC\n         IKJTSMSG (' CATALOG MACRO RETURN CODE IS ',),CRC,CXRC\n         SPACE\n         IKJTSMSG (' ',,' NOT ON VOLUME ',),SSC1\n         SPACE\n         IKJTSMSG (' INCORRECT PASSWORD SUPPLIED'),SSC2\n         SPACE\n         IKJTSMSG (' ',,' NOT EXPIRED'),SSC3\n         SPACE\n         IKJTSMSG (' I/O ERROR READING VTOC - NOTIFY SYSTEMS'),SSC4\n         SPACE\n         IKJTSMSG (' UNABLE TO MOUNT VOLUME ',),SSC6\n         SPACE\n         IKJTSMSG (' ',,' IN USE'),SSC7\n         SPACE\n         IKJTSMSG (' USER NOT AUTHORIZED TO SCRATCH DATASET ',),SSC8\n         SPACE\n         IKJTSMSG (' UNABLE TO DELETE DATASET FROM RACF'),SSC9\n         SPACE\n         IKJTSMSG (' SCRATCH STATUS CODE ',),SSC\n         SPACE\n         IKJTSMSG (' SCRATCH RETURN CODE ',),SRC\n         SPACE\n         IKJTSMSG (' ',,' - INDEX LEVEL IS ',),QUAL\n         SPACE\n         IKJTSMSG (' LOCATE RETURN CODE ',),LOC\n         SPACE\n         IKJTSMSG (' OBTAIN RETURN CODE ',),ORC\n         SPACE\n         IKJTSMSG\n         SPACE\nCATLG    CSECT\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          EQUATES AND DSE*\n               CTS'\n         SPACE\n#VOLS    EQU   20                 MAXIMUM NUMBER OF VOLUMES            *\n                                  IF CHANGED THEN CHANGE ERROR MSG TOO\n         SPACE 2\nR0       EQU   0                  WORK REGISTER\nR1       EQU   1                  WORK REGISTER\nR2       EQU   2                  WORK REGISTER\nR3       EQU   3                  WORK REGISTER\nR4       EQU   4                  WORK REGISTER\nR5       EQU   5                  WORK REGISTER\nR6       EQU   6                  WORK REGISTER\nR7       EQU   7                  WORK REGISTER\nR8       EQU   8                  WORK REGISTER\nR9       EQU   9   ) DUAL         WORK REGISTER\nLINK     EQU   9   ) DEFINITION   LINKAGE REGISTER FOR SUBROUTINES\nR10      EQU   10                 WORK REGISTER\nR11      EQU   11                 WORK REGISTER\nR12      EQU   12                 BASE REGISTER FOR CATLG CSECT\nR13      EQU   13                 BASE REGISTER FOR CORE DSECT\nR14      EQU   14                 WORK REGISTER\nR15      EQU   15                 WORK REGISTER\n         EJECT\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         SPACE 2\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         EJECT\n         SPACE\n         CVT   DSECT=YES,LIST=NO\n         SPACE\n         EJECT\n         SPACE\n         IHALPDE\n         SPACE\n         EJECT\n         SPACE\nUCB      DSECT\n         IEFUCBOB LIST=NO\n         TITLE 'CATLG/UNCATLG/SCRATCH FUNCTION          WORK AREA'\nCORE     DSECT\n         DS    18F\n         SPACE\nDBLWRD   DS    D\n@DEVNAME DS    A                  -> DEVNAMET MODULE IN LPA\n         SPACE\nPPLSECT  DS    0F                 PPL AREA\n         DS    CL(PPLLEN)\nECB      DS    F                  ECB FOR PARSE\nPARSBACK DS    F                  -> PARSE PDL\nGFPARMP  DS    F                  -> GENERAL FAIL PARM BLOCK\n         IKJEFFGF                 GENERAL FAIL PARM BLOCK\n         EJECT\n         IKJEFFMT MTNINST=4       IKJEFF02 MSG ISSUER PARM BLOCK\n         EJECT\nCAMLST   DS    F                  FLAG BYTES INDICATING FUNC OF CAMLST\nCAMLSTP2 DS    A                  PARAMETER TWO OF CAMLST\nCAMLSTP3 DS    A                  PARAMETER THREE OF CAMLST\nCAMLSTP4 DS    A                  PARAMETER FOUR OF CAMLST\n         SPACE\n         DS    0D\nCAMAREA  DS    (#VOLS)CL12        VOLUME LIST AREA\n         SPACE\n         DS    0D\nF1DSCB   DS    CL140              SPACE FOR F1 DSCB\n         SPACE\n         ORG   CAMAREA\n         DS    CL265              MAKE SURE ENOUGH ROOM FOR LOCATE\n         ORG   ,                  SET LOC CNTR TO HIGHEST USED ADDR\n         SPACE\nDSNLEN   DS    AL1                LENGTH OF DSNAME\nDSNAME   DS    CL44               DSNAME\nVOLSER   DS    CL6                VOLSER OF DATASET\nUNIT     DS    CL8                UNIT TYPE\nDEVTYPE  DS    XL4                DEVICE TYPE OF ABOVE UNIT\nFLAGS    DS    X\nEPCAT    EQU   X'80'              CATLG   EP\nEPUCAT   EQU   X'40'              UNCATLG EP\nEPSCR    EQU   X'20'              SCRATCH EP\nSVOL     EQU   X'10'              VOLUME SERIAL SUPPLIED  (SCR & CATLG)\nSUNIT    EQU   X'08'              UNIT TYPE SUPPLIED      (SCR & CATLG)\nSCRPURGE EQU   X'04'              PURGE SPECIFIED         (SCRATCH)\nQUIT     EQU   X'02'              ERROR DURING PARM VERIFICATION\nSKIPOBTN EQU   X'01'              DONT ISSUE OBTAIN TO VERIFY DS EXISTS\n         SPACE ,                                               10/16/90\nIOSVSWRK DC    100X'00'           IOSVSUCB WORKAREA            10/16/90\nIOSVSPRM DC    A(IOSVSWRK)         )                           10/16/90\n         DC    A(IOSVSDEV)         ) MUST BE KEPT TOGETHER     10/16/90\n         DC    X'80',AL3(IOSVSUCB) )                           10/16/90\nIOSVSUCB DS    A                  UCB ADDRESS                  10/16/90\nIOSVSDEV DC    AL1(UCB3DACC)      DASD DEVICE CLASS            10/16/90\n         SPACE ,                                               11/16/90\nUVSRSAVE DS    18F                IEFEB4UV SAVE AREA           11/16/90\nUVSRPARM DS    2F                 IEFEB4UV PARAMETER LIST      11/16/90\nUVSRUTAB DS    4F                 IEFEB4UV UNIT TABLE          11/16/90\nUVSRATTR DS    CL10               IEFEB4UV ATTRIBUTE AREA      11/16/90\nUVSRFLGS DS    CL2                IEFEB4UV FLAGS               11/16/90\n         SPACE\n         DS    0D                 ROUND UP TO DOUBLE WORD BOUNDRY\n         SPACE\nCORESIZE EQU   *-CORE\n         SPACE 3\nVOLLIST  DSECT                    FORMAT FOR A VOLUME ENTRY ON CATALOG\nDEVCODE  DS    XL4                UCB DEVICE TYPE FIELD\nCATVOL   DS    CL6                SERIAL OF A VOLUME\nDSEQNUM  DS    H                  DATASET SEQUENCE NUMBER\nNEXTVOL  EQU   *                  NEXT VOLUME ENTRY\n         SPACE 3\n         END\n/*\n//LKED.SYSIN DD *\n  ENTRY CATLG\n  ENTRY UNCATLG\n  ENTRY UNCAT\n  ENTRY SCRATCH\n  ALIAS UNCATLG\n  ALIAS UNCAT\n  ALIAS SCRATCH\n  ALIAS SCR\n  NAME  CATLG(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHARGEN": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x05T\\x05T\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 1364, "newlines": 1364, "modlines": 0, "user": "ANDREWS"}, "text": "//CHARGEN JOB\n//*\n//*  CHARGEN -\n//*    A BANNER PROGRAM THAT WAS FLOATING AROUND IN MY POSTGRADUATE\n//*    DAYS A VERY LONG TIME AGO, CIRCA 1975.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY\n//             MBR=CHARGEN,          <=== LOAD MODULE NAME\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME\n//             SYSTS=SYSDA           <=== UNITNAME FOR WORK DATASETS\n//*\n//GENER   EXEC PGM=IEBGENER\n//SYSPRINT DD  DUMMY\n//SYSUT2   DD  SYSOUT=&SOUT,DCB=(RECFM=FBA,LRECL=72,BLKSIZE=72)\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK',\n//             COND=(0,NE)\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),\n//             PARM='LIST,MAP,XREF,NORENT'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//GENER.SYSIN DD *\n   GENERATE MAXFLDS=1\n   RECORD FIELD=(72)\n/*\n//GENER.SYSUT1 DD *\n1          C H A R G E N   U S E R ' S   G U I D E\n-\n      DESCRIPTION\n      -----------\n      \"CHARGEN\" IS A POSTER PROGRAM. SPECIFICALLY, \"CHARGEN\" PRINTS\n      LARGE REPRODUCTIONS OF EBCDIC CHARACTERS ACCEPTED FROM THE INPUT\n      STREAM. THESE CHARACTERS USUALLY FORM WORDS AND/OR PHRASES.\n      \"CHARGEN\" CAN REPRODUCE UPPER CASE AND LOWER CASE ALPHABETIC\n      CHARACTERS, AS WELL AS NUMERALS AND MORE THAN 30 SPECIAL CHARAC-\n      TERS. THERE ARE SEVERAL SPECIAL FEATURES OF CHARGEN WHICH ARE EX-\n      PLAINED FULLY BELOW. IT IS RECOMMENDED THAT THIS DOCUMENT BE READ\n      CAREFULLY BEFORE ANY ATTEMPT IS MADE TO USE \"CHARGEN\". FAILURE TO\n      DO SO WILL LEAVE THE USER UNAWARE OF MANY OF THE EXTRA CONVENIEN-\n      CES IN \"CHARGEN\", AND MAY ALSO LEAD TO UNEXPECTED AND UNWANTED\n      RESULTS.\n-     INVOKING CHARGEN\n      -------- -------\n      CHARGEN REQUIRES AN 18K REGION FOR EXECUTION. THE INPUT DATASET\n      MUST BE LRECL=80, AND HAS THE DDNAME \"SYSIN\". THE OUTPUT DATASET\n      IS NORMALLY A SYSOUT DATASET (RECFM=FBA, LRECL=133, BLKSIZE=133),\n      WITH THE DDNAME \"SYSPRINT\". TYPICAL JCL WOULD BE:\n0          //         JOB\n           /*JOBPARM  PSS=NO,LINECT=0,LINES=9999,CPU=15,IO=0\n           // EXEC PGM=CHARGEN\n           //STEPLIB DD DSN=...,DISP=SHR\n           //SYSIN DD *\n                .\n                .\n                .\n           /*\n           //SYSPRINT DD SYSOUT=A\n0     THE \"JOBPARM\" PARAMETERS MAY BE ABBREVIATED:\n           /*JOBPARM  S=NO,K=0,L=9999,Z=15,Y=0\n0     THE CPU (Z) VALUE MAY NEED TO BE INCREASED IF MORE THAN 150 CHAR-\n      ACTERS ARE TO BE REPRODUCED. THE AVERAGE REPRODUCTION RATE IS\n      10-15 CHARACTERS PER CPU SECOND. AT PEAK PERFORMANCE (DETERMINED\n      BY THE CONTENTS OF THE INPUT STREAM), HOWEVER, THE REPRODUCTION\n      RATE IS 15-20 CHARACTERS PER CPU SECOND.\n1     CONTENTS OF THE INPUT STREAM\n      -------- -- --- ----- ------\n0     THE BACKGROUND CONTROL CHARACTER -\n           CHARGEN MAY HAVE ANY NUMBER OF INPUT CARDS. COLUMN 1 ON EACH\n           CARD IS RESERVED FOR THE BACKGROUND CONTROL CHARACTER. THIS\n           CHARACTER IS THE CHARACTER WHICH IS USED AS THE BACKGROUND\n           ON WHICH THE INPUT STREAM IS REPRODUCED. IF THE BACKGROUND\n           CONTROL CHARACTER IS A BLANK, THE CHARACTER PATTERNS ARE\n           CONSTRUCTED FROM THE EBCDIC CHARACTERS WHICH THE PATTERNS\n           REPRESENT, OR FROM ANOTHER CHARACTER WHICH SHOWS UP BETTER\n           ON PAPER. FOR EXAMPLE, \"A\" IS MADE FROM EBCDIC \"A\", \"B\" IS\n           MADE FROM EBCDIC \"B\", AND \".\" IS MADE FROM EBCDIC \"O\". WHEN\n           THE BACKGROUND CONTROL CHARACTER FOR ANY CARD IS NOT A\n           BLANK, HOWEVER, \"CHARGEN\" WILL OPERATE IN \"REVERSE IMAGE\n           MODE\" FOR THAT CARD. FOR EXAMPLE, IF COLUMN 1 CONTAINS A\n           DOLLAR SIGN (\"$\"), THE OUTPUT WILL CONSIST OF SOLID DOLLAR\n           SIGNS, WITH THE CHARACTER PATTERNS LEFT AS BLANK AREAS.\n0          EXAMPLE:       NORMAL              REVERSE\n0                                             $$$$$$$\n                           AAA                $$   $$\n                          A   A               $ $$$ $\n                          A   A               $ $$$ $\n                          AAAAA               $     $\n                          A   A               $ $$$ $\n                          A   A               $ $$$ $\n                          A   A               $ $$$ $\n                                              $$$$$$$\n0          (NOTE: THE FIGURE ABOVE DOES NOT SHOW THE ACTUAL PATTERN\n                SIZE OR SHAPE)\n0          A BACKGROUND CONTROL CHARACTER IS ONLY EFFECTIVE FOR THE\n           CHARACTERS ON THE SAME CARD. A NEW BACKGROUND CONTROL CHAR-\n           ACTER IS OBTAINED FROM EACH CARD.\n1     SPECIFYING THE INFORMATION TO BE REPRODUCED -\n           THE ACTUAL CHARACTERS THAT ARE TO BE REPRODUCED MAY APPEAR\n           IN COLUMNS 2-80 ON A CARD. THE REPRODUCTION OF A CARD WILL\n           TERMINATE AT THE LAST NON-BLANK CHARACTER ON THE CARD. TO\n           REPRODUCE NUMERALS OR UPPER CASE ALPHABETIC CHARACTERS, SIM-\n           PLY CODE THEM DIRECTLY ON THE CARD. LOWER CASE ALPHABETIC\n           CHARACTERS MAY BE CODED DIRECTLY ALSO (IE: FROM AN \"ASIS\"\n           TSO DATASET), OR BY PRECEDING THE UPPER CASE EQUIVALENTS OF\n           THE LOWER CASE CHARACTERS, WITH THE EBCDIC LOGICAL NOT(\"\u00ac\").\n           FOR EXAMPLE, TO REPRODUCE THE WORD \"HELLO\" WITH ALL BUT THE\n           \"H\" IN LOWER CASE, CODE:  H\u00acE\u00acL\u00acL\u00acO . THE \"\u00ac\" IS NOT VALID\n           FOR NUMERALS. IF IT IS USED WITH A NUMERAL, BOTH THE \"\u00ac\" AND\n           THE NUMERAL WILL BE IGNORED. A \"\u00ac\" PRECEDING A LOWER CASE\n           CHARACTER HAS NO EFFECT, AND THE CHARACTER WILL BE REPRO-\n           DUCED AS IF THE \"\u00ac\" WAS NOT THERE. THE FOLLOWING SPECIAL\n           CHARACTERS ARE AVAILABLE, AND MAY BE CODED DIRECTLY ON A\n           CARD:\n0                  (BLANK)                    -  (HYPHEN)\n                \u00a2  (CENT)                     /  (SLASH)\n                .  (PERIOD)                   ,  (COMMA)\n                <  (LESS THAN)                %  (PERCENT)\n                (  (LEFT PAREN)               >  (GREATER THAN)\n                +  (PLUS SIGN)                ?  (QUESTION MARK)\n                &  (AMPERSAND)                :  (COLON)\n                !  (EXCLAMATION POINT)        #  (NUMBER SIGN)\n                $  (DOLLAR SIGN)              @  (APIECE SIGN)\n                *  (ASTERISK)                 '  (APOSTROPHE)\n                )  (RIGHT PAREN)              =  (EQUAL SIGN)\n                ;  (SEMI-COLON)               \"  (OPEN QUOTE)\n0          THE FOLLOWING SPECIAL CHARACTERS ARE AVAILABLE BY PRECEDING\n           ANOTHER SPECIAL CHARACTER WITH \"\u00ac\":\n0               LEFT ARROW                    \u00ac<  (LESS THAN)\n                LEFT BRACE                    \u00ac(  (LEFT PAREN)\n                VERTICAL BAR                  \u00ac|  (VERTICAL BAR)\n                PLAYBOY RABBIT                \u00ac$  (DOLLAR SIGN)\n                LARGE ASTERISK                \u00ac*  (ASTERISK)\n                RIGHT BRACE                   \u00ac)  (RIGHT PAREN)\n                LOGICAL NOT                   \u00ac\u00ac  (LOGICAL NOT)\n                REVERSE SLASH                 \u00ac/  (SLASH)\n                RIGHT ARROW                   \u00ac>  (GREATER THAN)\n                NOT EQUAL SIGN                \u00ac=  (EQUAL)\n                CLOSE QUOTE                   \u00ac\"  (OPEN QUOTE)\n0          (NOTE: VERTICAL BAR IS GENERATED BY \"\u00ac|\" BECAUSE A \"|\" WITH-\n           OUT THE \"\u00ac\" HAS A SPECIAL MEANING WHICH IS DESCRIBED LATER)\n0          IF A \"\u00ac\" PRECEDES A SPECIAL CHARACTER WHICH DOES NOT HAVE A\n           \"\u00ac\" COUNTERPART, THE \"\u00ac\" AND THE CHARACTER THAT FOLLOWS IT\n           WILL BE IGNORED.\n1     UNDERSCORING\n           ANY CHARACTER(S) IN THE INPUT STREAM MAY BE UNDERSCORED WHEN\n           THEY ARE REPRODUCED. SIMPLY PRECEDE THE CHARACTER(S) TO BE\n           REPRODUCED WITH A \"_\" CHARACTER. FOR EXAMPLE:\n0                         _1\n                          _A\n                          _\u00acA\n                          _$\n                          _\u00ac$\n                          _H_\u00acE_\u00acL_\u00acL_\u00acO\n0          AN UNDERSCORE CHARACTER ALONE MAY BE GENERATED BY CODING\n           \"_ \" (BLANK) IN THE INPUT STREAM. WHEN \"CHARGEN\" IS IN RE-\n           VERSE IMAGE MODE, THE UNDERSCORES ARE ALSO REVERSED.\n1     CONTROL WORDS\n           CONTROL WORDS ARE 5 LETTER KEYWORDS WHICH APPEAR IN COLUMNS\n           1-5 OF A CARD. THE REMAINDER OF THE CARD MUST BE BLANK. IF\n           IT ISN'T, THE CARD WILL BE TREATED AS A NORMAL INPUT CARD.\n           THE LAST FOUR CHARACTERS OF THE CONTROL WORD WILL BE REPRO-\n           DUCED, AND THE FIRST CHARACTER OF THE CONTROL WORD WILL BE\n           THE BACKGROUND CONTROL CHARACTER. SIMILAR ERRORS WILL RESULT\n           IF YOU MISSPELL A CONTROL WORD. ANY CONTROL WORD MAY BE\n           ISSUSED AS MANY TIMES AS DESIRED IN A SINGLE RUN. A CONTROL\n           WORD REQUEST TO INVOKE A SPECIAL PROCESSING FACILITY WHICH\n           HAS ALREADY BEEN INVOKED, WILL NOT CAUSE AN ERROR.\n-          \"EJECT\" -\n                IF A MESSAGE TO BE REPRODUCED REQUIRES MORE THAN ONE\n                CARD, \"CHARGEN\" WILL ALLOW THIS AS LONG AS COLUMN 1 OF\n                EACH CARD CONTAINS A BACKGROUND CONTROL CHARACTER. FOR\n                EXAMPLE:\n0                         *THI\n                          *S IS A\n                          * MESSA\n                          *GE.\n0               OCCASIONALLY, HOWEVER, YOU MAY WANT TO GENERATE SEVERAL\n                MESSAGES IN ONE RUN. THE \"EJECT\" CONTROL WORD WILL\n                CAUSE \"CHARGEN\" TO EJECT 1 PAGE IN ITS OUTPUT STREAM.\n                FOR EXAMPLE:\n0                         *THIS IS A MESSAGE.\n                          EJECT\n                          $THIS IS ANOTHER MESSAGE.\n-          \"LCASE\" -\n                THIS CONTROL WORD ONLY AFFECTS UPPER CASE ALPHABETIC\n                CHARACTERS IN THE INPUT STREAM. AFTER YOU HAVE ISSUED\n                THE \"LCASE\" COMMAND, ALL UPPER CASE ALPHABETIC INPUT\n                WILL BE AUTOMATICALLY CONVERTED TO LOWER CASE. IF YOU\n                WANT AN UPPER CASE CHARACTER WHILE IN \"LCASE\" MODE, YOU\n                MAY PRECEDE THE CHARACTER WITH THE LOGICAL NOT (\"\u00ac\").\n                FOR EXAMPLE:\n0               H\u00acE\u00acL\u00acL\u00acO    IS THE SAME AS   LCASE\n                                               \u00acHELLO\n-          \"UCASE\" -\n                REVERSES THE EFFECT OF THE \"LCASE\" COMMAND, AND RETURNS\n                CASE CONVERSION TO NORMAL.\n1          \"ULINE\" -\n                THE \"ULINE\" CONTROL WORD DOES THE SAME THING FOR UNDER-\n                SCORING, THAT \"LCASE\" DOES FOR CASE CONVERSION. AFTER\n                YOU HAVE ISSUED THE \"ULINE\" COMMAND, ALL OUTPUT WILL BE\n                UNDERSCORED. INDIVIDUAL UNDERSCORE SUPPRESSION MAY BE\n                OBTAINED BY PRECEDING THE CHARACTER(S) WITH \"_\". FOR\n                EXAMPLE:\n0               _H_\u00acE_\u00acL_\u00acL_\u00acO T\u00acH\u00acE\u00acR\u00acE      IS THE SAME AS\n0               ULINE\n                 H\u00acE\u00acL\u00acL\u00acO_ _T_\u00acH_\u00acE_\u00acR_\u00acE\n-          \"NLINE\" -\n                REVERSES THE EFFECT OF \"ULINE\" AND RETURNS UNDERSCORE\n                PROCESSING TO NORMAL.\n0          WITH A KNOWLEDGE OF THE CONTROL WORDS, THE LAST EXAMPLE MAY\n           BE CODED AS FOLLOWS:\n0                         LCASE\n                          ULINE\n                           \u00acHELLO\n                          NLINE\n                           \u00acTHERE\n-     SPECIAL CONTROL SYMBOL \"|\" (VERTICAL BAR)\n           THE VERTICAL BAR IS USED TO MARK THE END OF ONE CARD AND THE\n           BEGINNING OF ANOTHER. LOGICALLY, THE FIRST CHARACTER AFTER A\n           VERTICAL BAR IS A BACKGROUND CONTROL CHARACTER, OR THE FIRST\n           CHARACTER OF A CONTROL WORD. THE LAST EXAMPLE COULD HAVE\n           BEEN CODED AS FOLLOWS:\n0                    LCASE|ULINE| \u00acHELLO|NLINE| \u00acTHERE\n0          OR IF YOU WANT THE WORD \"THERE\" TO BE IN REVERSE IMAGE, WITH\n           A BACKGROUND OF \"#\":\n0                    LCASE|ULINE| \u00acHELLO|NLINE|#\u00acTHERE\n0          OBVIOUSLY, A VERTICAL BAR CAN BE USED TO ADD TRAILING\n           BLANKS TO A MESSAGE, IE:   $HELLO        |\n1     RETURN CODES FROM \"CHARGEN\"\n           0 - \"CHARGEN\" EXECUTED NORMALLY\n0          4 - THERE WERE CHARACTERS IN THE INPUT STREAM WHICH COULD\n               NOT BE REPRODUCED (IE:  \u00ac5   OR   \u00ac#)\n0          8 - EITHER THE \"SYSIN\" OR THE \"SYSPRINT\" DD CARD IS MISSING.\n               NO OUTPUT IS GENERATED.\n\n-     * * *   E N D   O F   D O C U M E N T   * * *\n/*\n//ASM.SYSIN DD *\nCHARGEN  TITLE '-  FLOATING CHARACTER GENERATOR'\n*\n*     RELEASE 0, APR 75\n*         AUTHOR: UNKNOWN, OWNER: P. L. ARNETT\n*         COMPILATION ERRORS CORRECTED: 3\n*         EXECUTION AND LOGIC ERRORS  : TOO MANY TO COUNT\n*\n*     RELEASE 1, JUL 75\n*         NEW AUTHOR AND OWNER: JAY ULLIUS\n*         ORIGINAL PROGRAM DISCARDED\n*         CHARACTER PATTERNS AND DECIPHERING ALGORITHM RETAINED\n*         NEW MAIN ROUTINE WRITTEN\n*\n*         * * * THIS ONE WORKS * * *\n*\n*         1) REVERSE IMAGE FEATURE INSTALLED\n*         2) ASTERISK AS END-OF-MESSAGE MARK, UNLESS MESSAGE USES FULL\n*            80 BYTES OF INPUT RECORD\n*\n*     RELEASE 2, AUG 75\n*         1) \"EJECT\" COMMAND INSTALLED\n*         2) UNDERSCORING FEATURE INSTALLED\n*\n*     RELEASE 3, SEP 75\n*         1) \"UNDERLINE\" / \"NOUNDERLINE\" COMMANDS INSTALLED\n*         2) \"LOWER CASE\" / \"UPPER CASE\" COMMANDS INSTALLED\n*         3) END-OF-MESSAGE MARK REMOVED; LAST NON-BLANK IS LAST CHAR\n*            OF MESSAGE\n*\n*     RELEASE 4, OCT 75\n*         1) VERTICAL BAR - OPTIONAL RECORD DELIMITER INSTALLED\n*\n*     RELEASE 5, DEC 75\n*         1) CHARACTER SET EXPANDED BY 39 %, FROM 70 TO 97 CHARACTERS\n*         2) # OF PUT/GET MACROS REDUCED BY INSTALLING A REUSABLE I/O\n*            MODULE\n*         3) RETURN CODE FACILITY INSTALLED FOR FLAGGING INPUT ERRORS\n*            (CHARACTERS THAT CAN NOT BE REPRODUCED)\n*\n*     RELEASE 6, MAR 76\n*         1) \"UNDERLINE\" COMMAND RENAMED TO \"ULINE\"\n*         2) \"NOUNDERLINE\"               TO \"NLINE\"\n*         3) \"LOWER CASE\"                TO \"LCASE\"\n*         4) \"UPPER CASE\"                TO \"UCASE\"\n*         5) MAIN ROUTINE OVERHAUL: PHASE 1\n*             A) WORKAREA OBTAINED WITH \"GETMAIN\" MACRO INSTRUCTION\n*             B) PATTERN LOCATING LOOP REPLACED WITH \"TRT\" INSTRUCTION\n*\n         EJECT\n*\n*     RELEASE 7, AUG 76\n*         1) MAIN ROUTINE OVERHAUL: PHASE 2\n*             A) COMMAND DETECTION AND EXECUTION ROUTINE RE-WRITTEN AND\n*                CONDENSED, SINCE ALL COMMANDS ARE 5 BYTES LONG\n*             B) PATTERN ADDRESS TABLE CONVERTED FROM RELOCATABLE\n*                \"A\"-CONS, TO BASE/DISPLACEMENT \"S\"-CONS\n*             C) \"MISSING DD STATEMENT\" DETECTION INSTALLED (NEW RC=8)\n*             D) OPTIMIZATION OF REGISTER USAGE, TO PROVIDE ADDRESS-\n*                ABILITY FOR FUTURE CHARACTER SET EXPANSION\n*             D) REGISTER USAGE AND CHARACTER PATTERN DOCUMENTATION\n*                WRITTEN AND INSTALLED\n*\n*         2) RESULTS OF OVERHAUL:\n*             A) CORE REQUIREMENT REDUCED BY 2 KILOBYTES\n*             B) LOAD MODULE SIZE REDUCED BY 3 KILOBYTES\n*             C) EXECUTION SPEED AND EFFICIENCY IMPROVED BY 33%, FROM\n*                10-15, TO 15-20 CHARACTERS REPRODUCED PER CPU SECOND\n*\n         EJECT\n*\n*     REGISTER USAGE\n*     -------- -----\n*     R8 THRU R12 ARE BASE REGISTERS FOR THE MAIN CSECT - \"CHARGEN\".\n*        CURRENTLY, R11 AND R12 ARE NOT NEEDED, BUT THE ADDRESSABILITY\n*        OF R8-R10 IS ALMOST EXHAUSTED; AND FUTURE PROGRAM MODIFICA-\n*        TIONS, OR THE IMPLEMENTATION OF ADDITIONAL CHARACTER PATTERNS,\n*        WILL PROBABLY MAKE USE OF THE EXTRA BASE REGISTERS.\n*\n*     R13 IS THE BASE REGISTER FOR THE DSECT, WHICH CONTAINS:\n*        SAVEAREA, I/O WORKAREAS, A TRANSLATE TABLE, AND DEFAULT\n*        CASE/UNDERSCORE FLAGS.\n*\n*     WE ALL KNOW ABOUT R14, R15, R0, AND R1.\n*\n*     R2 IS CLEARED EARLY IN THE PROGRAM. IT IS USED BY \"IC\", \"TRT\",\n*        AND CONTAINS F'1' AS THE INCREMENT USED BY \"BXH\" INSTRUCTIONS.\n*\n*     R3 POINTS TO THE LAST NON-BLANK CHARACTER IN THE INPUT BUFFER.\n*\n*     R4 POINTS TO THE CHARACTER IN THE INPUT BUFFER, WHICH IS\n*        CURRENTLY BEING ANALYZED OR REPRODUCED.\n*\n*     R5 IS A GENERAL WORK REGISTER. IT IS USED FOR LOOP COUNTERS, AND\n*        AS THE RETURN REGISTER FROM \"BAL\" TO THE OUTPUT ROUTINE.\n*\n*     R6 IS ANOTHER WORK REGISTER, BUT IS USED PRIMARILY AS A POINTER\n*        TO EACH ELEMENT, IN SUCCESSION, OF A CHARACTER PATTERN.\n*\n*     R7 CONTAINS THE ADDRESS, IN THE OUTPUT BUFFER, OF THE FIRST\n*        USABLE (MODIFYABLE) BYTE. ALTERING THIS ADDRESS ALTERS THE\n*        LEFT AND RIGHT MARGINS, ABOVE AND BELOW THE CHARACTERS THAT\n*        ARE REPRODUCED. THIS INFORMATION MIGHT BE HANDY IF \"CHARGEN\"\n*        IS USED ON A PRINTER WHICH IS NOT 132 CHARACTERS WIDE.\n*        (NOTE: THE CHARACTERS PRODUCED BY \"CHARGEN\" WERE DESIGNED AT\n*        EIGHT LINES PER INCH).\n*\n         EJECT\n*\n*     GENERAL REGISTER EQUATES\n*\n         SPACE\n         MACRO\n         EQUATES\n         LCLA  &CTR\n.LOOP    AIF   (&CTR EQ 16).END\nR&CTR    EQU   &CTR\n&CTR     SETA  &CTR+1\n         AGO   .LOOP\n.END     MEND\n         SPACE 5\n         EQUATES\n         EJECT\n*\n*     INITIALIZATION\n*\n         SPACE\nCHARGEN  CSECT\n         STM   R14,R12,12(R13)    SAVE REGISTERS\n         LR    R8,R15             LOAD BASE\n         USING CHARGEN,R8,R9,R10,R11,R12    LOTS OF @ABILITY\n         SPACE\n         LA    R0,WORKLEN         SIZE OF WORKAREA\n         GETMAIN  R,LV=(0)        GET WORKAREA\n         SPACE\n         ST    R13,4(,R1)         )\n         ST    R1,8(,R13)         ) CHAIN SAVE AREAS\n         LR    R13,R1             )\n         USING WORKAREA,R13\n         SPACE\n         XR    R2,R2              CLEAR WORK REG\n         SPACE\n         OPEN  (OUT,OUTPUT,IN)    OPEN FILES\n         SPACE\n         TM    OUT+48,X'10'       IS FILE OPEN OK ???\n         BZ    NODD               NOPE...DD STMT MISSING\n         SPACE\n         TM    IN+48,X'10'        IS FILE OPEN OK ???\n         BZ    NODD               NOPE...DD STMT MISSING\n         SPACE\n         LM    R9,R12,BASES       LOAD CONTENTS OF BASE REGS\n         SPACE\n         MVI   CARD+80,C' '       FILL UNUSED PORTION OF CARD\n         MVC   CARD+81(79),CARD+80     WITH BLANKS\n         SPACE\n         MVI   BLANKS,1           FILL \"TRT\" TABLE\n         MVC   BLANKS+1(255),BLANKS    WITH X'01' S\n         MVI   BLANKS+C' ',0      FOR \"TRT\"\n         SPACE\n         MVI   FLAGS,0            SET DEFAULTS\n         SPACE\n         LA    R7,OUTLINE+5       -> USABLE OUTPUT BUFFER\n         SPACE\n         BAL   R5,NEWPAGE         SKIP A PAGE\n         EJECT\n*\n*     READ A CARD FROM \"SYSIN\"\n*\n         SPACE\nSETUP    LA    R4,CARD            -> INPUT BUFFER\n         SPACE\nGETCARD  GET   IN,(R4)            QSAM I/O REQUEST\n         SPACE 5\n*\n*     LOCATE LAST NON-BLANK CHARACTER IN INPUT BUFFER\n*\n         SPACE\n         LA    R5,79              COUNTER FOR LOOP\n         LA    R3,CARD+71         -> END OF INPUT BUFFER\n         SPACE\nTEST     CLI   0(R3),C' '         IS THIS A BLANK ???\n         BNE   NEWCARD            NOPE...ALL DONE HERE...\n         SPACE\n         BCTR  R3,R0              FOUND BLANK...DECREMENT PTR\n         BCT   R5,TEST            TRY NEXT CHARACTER\n         B     GETCARD            CARD IS BLANK...GET ANOTHER\n         SPACE 5\n*\n*     CHECK INPUT BUFFER FOR CONTROL WORD\n*\n         SPACE\nNEWCARD  LA    R5,#CMDS           LOAD NUMBER OF CONTROL WORDS AVAIL\n         LA    R6,CMDNAMES        -> CONTROL WORD LIST\nLOOP     CLC   CARD(5),0(R6)      IS THIS A CONTROL WORD ???\n         BE    FOUNDCMD           YES...GO MAKE ONE LAST TEST\n         SPACE\n         LA    R6,5(,R6)          -> NEXT CONTROL WORD NAME\n         BCT   R5,LOOP            TEST NEXT CONTROL WORD\n         B     FUNSTUF            NO CONTROL WORD...MAKE POSTER...\n         SPACE\nFOUNDCMD CLI   CARD+5,C'|'        END OF CONTROL WORD ???\n         BE    DOCMD              YEP...GO \"EX\" IT\n         SPACE\n         TRT   CARD+5(67),BLANKS  END OF CONTROL WORD ???\n         BNZ   FUNSTUF            NO...GO MAKE POSTER...\n         EJECT\n*\n*     EXECUTE COMMAND FROM INPUT STREAM\n*\n         SPACE\nDOCMD    SLL   R5,2               ADJUST OFFSET FOR \"EX\"\n         EX    R0,CMDS-4(R5)      DO THE COMMAND\n         SH    R3,HW6             ADJUST LENGTH OF CARD\n         SPACE\n         CR    R4,R3              MORE OF CARD LEFT ???\n         BH    GETCARD            NOPE...GET ANOTHER...\n         SPACE\n         MVC   CARD,CARD+6        MOVE REMAINDER OF CARD\n         B     NEWCARD            START OVER AGAIN\n         SPACE 5\n*\n*     SET UP FILLER, AND THEN MAKE POSTER\n*\n         SPACE\nFUNSTUF  MVI   FILLER,C' '        SINGLE SPACE CARRIAGE CONTROL\n         MVC   1+FILLER,CARD      COPY BACKGROUND CHARACTER FROM INPUT\n         MVC   FILLER+2(131),FILLER+1  PROPAGATE BACKGROUND\n         SPACE 5\n*\n*     A NOTE ABOUT THE \"BXH\" INSTRUCTIONS THAT OCCUR IN THE FOLLOWING\n*     CODE: AFTER R4 IS INCREMENTED BY R2, IF R4 IS GREATER THAN R3,\n*     CONTROL IS PASSED TO \"SETUP\", AND A NEW CARD IS READ FROM SYSIN\n*\n         SPACE\n*\n*     CHECK FOR PSEUDO-NEW CARD, FROM VERTICAL BAR\n*\n         SPACE\nGETCHAR  LA    R2,1               INCREMENT FOR \"BXH\"\n         SPACE\n         BXH   R4,R2,SETUP        -> PAST BACKGROUND CHARACTER\n         SPACE\n         CLI   0(R4),C'|'         CHECK FOR VERTICAL BAR\n         BNE   CONTINUE           NO...\n         SPACE\n         BXH   R4,R2,SETUP        -> PSEUDO-NEW CARD\n         SPACE\n         MVC   CARD,0(R4)         MOVE IN PSEUDO-NEW CARD\n         LA    R3,CARD(R3)        ADJUST THE LENGTH OF\n         SR    R3,R4               THE NEW CARD\n         LA    R4,CARD            -> NEW CARD\n         B     NEWCARD            GO CHECK FOR CONTROL WORD...ETC...\n         EJECT\n*\n*     DETECT AND PROCESS UNDERSCORE MODIFICATION REQUEST\n*\n         SPACE\nCONTINUE CLI   0(R4),C'_'         REQUEST TO OVERRIDE DEFAULT ???\n         BNE   DEFAULT1           NOPE...\n         SPACE\n         BXH   R4,R2,SETUP        -> PAST UNDERSCORE\n         SPACE\n         TM    FLAGS,B'01'        IS DEFAULT \"UNDERLINE\" ???\n         BO    CASETEST           YEP...\n         SPACE\n         B     UNDRLINE           ADD UNDERSCORE TO CHARACTER\n         SPACE\nDEFAULT1 TM    FLAGS,B'01'        IS DEFAULT \"NOUNDERLINE\" ???\n         BZ    CASETEST           YEP...\n         SPACE\nUNDRLINE MVC   FILLER+30(3),CARD+80    ADD REVERSE UNDERSCORE\n         SPACE\n         CLI   CARD,C' '          IN REVERSE IMAGE MODE ???\n         BNE   CASETEST           YEP...\n         SPACE\n         MVC   FILLER+30(3),HHH   ADD NORMAL UNDERSCORE\n         EJECT\n*\n*     DETECT AND PROCESS CASE MODIFICATION REQUEST\n*\n         SPACE\nCASETEST CLI   0(R4),C'\u00ac'         REQUEST TO OVERRIDE DEFAULT ???\n         BNE   DEFAULT2           NOPE...\n         SPACE\n         BXH   R4,R2,SETUP        -> PAST '\u00ac'\n         SPACE\n         TM    0(R4),X'80'        SPECIAL CHARACTER ???\n         BZ    SWITCHIT           YEP...\n         SPACE\n         TM    0(R4),X'70'        NUMERAL ???\n         BO    SWITCHIT           YEP...\n         SPACE\n         TM    FLAGS,B'10'        IS DEFAULT \"LOWER CASE\" ???\n         BO    HUNTCHAR           YEP...\n         SPACE\n         B     SWITCHIT           GO SWITCH CASE\n         SPACE\nDEFAULT2 TM    0(R4),X'80'        SPECIAL CHARACTER ???\n         BZ    HUNTCHAR           YEP...\n         SPACE\n         TM    0(R4),X'70'        NUMERAL ???\n         BO    HUNTCHAR           YEP...\n         SPACE\n         TM    FLAGS,B'10'        DEFAULT IS \"LOWER CASE\" ???\n         BZ    HUNTCHAR           NOPE...\n         SPACE\nSWITCHIT NI    0(R4),X'BF'        CHANGE CASE\n         EJECT\n*\n*     LOCATE CHARACTER PATTERN\n*\n         SPACE\nHUNTCHAR TRT   0(1,R4),@@         DO I KNOW HOW TO MAKE THIS ONE ???\n         BNZ   BUILD              YEP...\n         SPACE\n         MVI   RC,4               NOPE...RC=4\n         B     ERASE              ERASE UNDERSCORE\n         SPACE\nBUILD    LR    R6,R2              COPY RESULT BYTE FROM \"TRT\"\n         SLL   R6,1               MULTIPLY BY 2\n         LA    R6,ADDRLIST-2(R6)  -> S-CON FOR CHARACTER PATTERN\n         MVC   LA+2(2),0(R6)      MODIFY \"LA\" INSTRUCTION\nLA       LA    R6,*-*             -> CHARACTER PATTERN\n         BCTR  R6,R0              BACKUP ONE BYTE\n         SPACE\n         CLI   CARD,C' '          REVERSE IMAGE REQUESTED ???\n         BNE   REVERSE            YEP...\n         SPACE\n         MVC   PRNTCHAR(1),1(R6)  COPY \"BUILD\" CHAR\n         MVC   PRNTCHAR+1(131),PRNTCHAR     PROPAGATE \"BUILD\" CHAR\n         B     MAKELINE           GO CONSTRUCT A LINE (OR TWO)...\n         SPACE\nREVERSE  MVC   PRNTCHAR,PRNTCHAR-1     FILL FOR REVERSE IMAGE\n         EJECT\n*\n*     BUILD AND PRINT CHARACTER...ONE LINE AT A TIME\n*\n         SPACE\nMAKELINE BAL   R5,FILLRPUT        PUT A LINE OF FILLER\n         BAL   R5,FILLRPUT        AND ANOTHER ONE\n         SPACE\nNEWLINE  MVC   OUTLINE,FILLER     INITIALIZE OUTPUT BUFFER\n         SPACE\nCOPYSTUF LA    R6,2(,R6)          -> NEXT PATTERN ELEMENT\n         SPACE\n         CLI   0(R6),X'80'        REQUEST FOR BLANK LINE ???\n         BE    PRINTOUT           YEP...\n         SPACE\n         MVC   PATTERN,0(R6)      COPY PATTERN ELEMENT\n         NC    PATTERN,MASK       MASK OUT FLAG BITS\n         MVC   3+MVC,PATTERN      MODIFY DISPLACEMENT IN \"MVC\"\n         IC    R2,PATTERN+1       SNARF UP PRE-ADJUSTED LENGTH\n         EX    R2,MVC             BUILD A CHARACTER SEGMENT\n         SPACE\n         TM    0(R6),X'80'        LAST SEGMENT IN CURRENT LINE ???\n         BZ    COPYSTUF           NOPE...GET ANOTHER\n         SPACE\nPRINTOUT PUT   OUT,OUTLINE        PRINT A LINE\n         SPACE\n         TM    1(R6),X'80'        LAST LINE IN CHARACTER ???\n         BZ    NEWLINE            NOPE...GO BUILD ANOTHER LINE\n         SPACE\n         BAL   R5,FILLRPUT        PUT A LINE OF FILLER\n         BAL   R5,FILLRPUT        AND ONE MORE\n         SPACE\nERASE    MVC   FILLER+30(3),FILLER+29  ERASE POSSIBLE UNDERSCORE\n         B     GETCHAR            GET NEXT CHAR FROM INPUT STREAM\n         EJECT\n*\n*     OUTPUT ROUTINE\n*\n         SPACE\nNEWPAGE  MVI   FILLER+1,C' '      MOVE BLANKS TO FILLER\n         MVC   FILLER+2(131),FILLER+1\n         MVI   FILLER,C'1'        CARRIAGE CONTROL TO SKIP A PAGE\n         SPACE\nFILLRPUT PUT   OUT,FILLER         PRINT A FILLER, OR A PAGE\n         SPACE\n         BR    R5                 ALL DONE HERE...\n         SPACE 5\n*\n*     END-OF-JOB ROUTINE\n*\n         SPACE\nEOJ      BAL   R5,NEWPAGE         SKIP A PAGE\n         BAL   R5,NEWPAGE         AND ONE MORE\n         SPACE\n         CLOSE (OUT,,IN)          CLOSE FILES\n         SPACE\n         LA    R15,0              LOAD RETURN CODE\n         ORG   *-1\nRC       DC    X'00'              RETURN CODE\n         SPACE\nBYEBYE   LA    R1,0(,R13)         COPY AND PURIFY WORKAREA ADDRESS\n         L     R13,4(,R13)        -> OS SAVE AREA\n         LA    R0,WORKLEN         SIZE OF WORKAREA\n         SVC   10                 FREE WORKAREA\n         SPACE\n         L     R14,12(,R13)       RESTORE REGISTER 14\n         LM    R0,R12,20(R13)     AND THE REST TOO\n         BR    R14                BYE...\n         SPACE 2\nNODD     MVI   RC,8               RETURN CODE OF 8, DD STMT MISSING\n         B     BYEBYE\n         EJECT\n*\n*     EXECUTED INSTRUCTIONS\n*\n         SPACE\nMVC      MVC   *-*(*-*,R7),PRNTCHAR\n         SPACE 3\nCMDS     EQU   *\n         OI    FLAGS,B'01'        ULINE\n         NI    FLAGS,B'10'        NLINE\n         OI    FLAGS,B'10'        LCASE\n         NI    FLAGS,B'01'        UCASE\n         BAL   R5,NEWPAGE         EJECT\n#CMDS    EQU   (*-CMDS)/4\n         SPACE 5\n*\n*     CONSTANTS\n*\n         SPACE\nHW6      DC    H'6'\nMASK     DC    2X'7F'\nBASES    DC    4A((*-BASES+4)*1024+CHARGEN)\nHHH      DC    C'HHH'\n         SPACE 3\nCMDNAMES EQU   *\n         DC    C'EJECT'\n         DC    C'UCASE'\n         DC    C'LCASE'\n         DC    C'NLINE'\n         DC    C'ULINE'\n         EJECT\n*\n*     DATA CONTROL BLOCKS\n*\n         SPACE\n         PRINT NOGEN\n         SPACE 3\nIN       DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=EOJ,LRECL=80\n         SPACE 3\nOUT      DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,BLKSIZE=133,X\n               RECFM=FBA\n         SPACE 5\n*\n*     DSECT DEFINITION\n*\n         SPACE\nWORKAREA DSECT\n         DS    18F\nCARD     DS    2CL80\nPRNTCHAR DS    CL132\nOUTLINE  DS    CL133\nFILLER   DS    CL133\nPATTERN  DS    CL2\nFLAGS    DS    X\nBLANKS   DS    CL256\nWORKLEN  EQU   *-WORKAREA\n         SPACE 2\nCHARGEN  CSECT\n         EJECT\n*\n*     CHARACTER PATTERNS ARE LOCATED AS FOLLOWS:\n*        THE CHARACTER IN THE INPUT BUFFER IS MODIFIED BY IMPLICIT\n*        (DEFAULT), AND EXPLICIT (\"\u00ac\") CASE CONVERSION. THEN THE CHAR-\n*        ACTER IS USED AS A SEARCH ARGUEMENT IN THE VARIABLE \"@@\" BY A\n*        \"TRT\" INSTRUCTION. A VALID SEARCH ARGUEMENT RETURNS A NON-\n*        ZERO CONDITION CODE, AND A FUNCTION BYTE WHICH IS MULTIPLIED\n*        BY 2, AND BECOMES THE OFFSET IN \"ADDRLIST(-2)\" OF THE S-CON\n*        FOR THE DESIRED CHARACTER'S PATTERN. THE S-CON IS INSERTED\n*        INTO A \"LA\" INSTRUCTION, AND YOU CAN QUESS THE REST. IF THE\n*        SEARCH ARGUEMENT IS NOT FOUND IN \"@@\" BY THE \"TRT\" INSTRUCTION\n*        (CONDITION CODE IS 0), CHARGEN IGNORES THE CHARACTER, AND\n*        CONTINUES PROCESSING WITH THE NEXT CHARACTER IN THE INPUT BUF-\n*        FER. IF ANY SEARCH ARGUEMENTS HAVE BEEN FOUND TO BE INVALID,\n*        CHARGEN WILL FLAG THIS WITH A RETURN CODE OF 4 AT TERMINATION.\n*        IF NO INPUT ERRORS ARE DETECTED, THE RETURN CODE WILL BE ZERO.\n*\n         SPACE 5\nADDRLIST DC    S($ARROWL,$BRACEL,$VERTBAR,$RABBIT,$ASTRSK2,$BRACER)\n         DC    S($NOT,$UNSLASH,$ARROWR,$NTEQUAL,$QUOTER,$BLANK,$CENT)\n         DC    S($PERIOD,$LESS,$PARENL,$PLUS,$AMPRSND,$EXCLMPT,$DOLLAR)\n         DC    S($ASTRSK,$PARENR,$SEMICOL,$HYPHEN,$SLASH,$COMMA)\n         DC    S($PERCENT,$GREATER,$QUESTMK,$COLON,$NUMBER,$APIECE)\n         DC    S($APOST,$EQUAL,$QUOTEL,@A,@B,@C,@D,@E,@F,@G,@H,@I,@J)\n         DC    S(@K,@L,@M,@N,@O,@P,@Q,@R,@S,@T,@U,@V,@W,@X,@Y,@Z,@AA)\n         DC    S(@BB,@CC,@DD,@EE,@FF,@GG,@HH,@II,@JJ,@KK,@LL,@MM,@NN)\n         DC    S(@OO,@PP,@QQ,@RR,@SS,@TT,@UU,@VV,@WW,@XX,@YY,@ZZ,#0,#1)\n         DC    S(#2,#3,#4,#5,#6,#7,#8,#9)\n         SPACE 5\n@@       DC    X'0000000000000000000000000102000300000000000000000000'\n         DC    X'0004050600070008000000000000000000000000090000000000'\n         DC    X'000000000000000000000A0B0C0000000000000000000D0E0F10'\n         DC    X'1100120000000000000000001314151617001819000000000000'\n         DC    X'0000001A1B001C1D000000000000000000001E1F202122230024'\n         DC    X'25262728292A2B2C000000000000002D2E2F3031323334350000'\n         DC    X'000000000000363738393A3B3C3D000000000000000000000000'\n         DC    X'00000000000000000000003E3F40414243444546000000000000'\n         DC    X'004748494A4B4C4D4E4F00000000000000005051525354555657'\n         DC    X'00000000000058595A5B5C5D5E5F6061000000000000'\n         EJECT\n*\n*     PATTERN FORMAT\n*     ------- ------\n*     EACH PATTERN CONTAINS THE FOLLOWING:\n*        1) THE FIRST BYTE IS THE CHARACTER TO BE USED IN CONSTRUCTING\n*           THE OUTPUT, WHEN IN NORMAL-IMAGE MODE. (IE: \"A\" IS THE\n*           FIRST BYTE IN THE PATTERN FOR THE LETTER \"A\", SO THE LETTER\n*           \"A\" WILL BE BUILT FROM THE EBCDIC CHARACTER \"A\".)\n*        2) THE REMAINDER OF EACH PATTERN CONSISTS OF A VARIABLE NUMBER\n*           OF TWO-BYTE ELEMENTS:\n*\n*                       BIT 0                        BITS 1-7\n*     BYTE 1 \"ON\" INDICATES THAT THIS      THE OFFSET FROM THE ADDRESS\n*            ELEMENT IS THE LAST ELEMENT   IN R7 WHERE THE RESULT OF\n*            FOR THE CURRENT OUTPUT LINE.  THIS ELEMENT IS TO BE PLACED\n*                                          (NOTE: IF THE OFFSET IS 0,\n*                                          AND BIT 0 IS \"ON\", THE CUR-\n*                                          RENT LINE WILL BE PRINTED,\n*                                          WITHOUT CHECKING THE LENGTH\n*                                          IN THE SECOND BYTE OF THE\n*                                          ELEMENT).\n*\n*     BYTE 2 \"ON\" INDICATES THAT THIS      THE \"LENGTH-1\" (IN BYTES) OF\n*            ELEMENT IS THE LAST ELEMENT   THE SEGMENT OF THE OUTPUT\n*            IN THE PATTERN FOR THE CUR-   LINE GENERATED BY THIS ELE-\n*            RENT CHARACTER.               MENT. (IE: A VALUE OF 25\n*                                          GENERATES A SEGMENT 26 BYTES\n*                                          LONG, AND A VALUE OF ZERO,\n*                                          GENERATES 1 BYTE.)\n*\n         EJECT\n*\n*     PATTERNS FOR SPECIAL CHARACTERS CREATED VIA \"\u00ac\"\n*\n         SPACE\n$ARROWL  DC    X'4CCD00CC02CB04CA06C908C80AC70CC60EC510C412C314C216C1'\n         DC    X'18CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'\n         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'\n         SPACE\n$BRACEL  DC    X'C2CC01CC01CB03CA05C909C60DC0193813CE133019D019291DD3'\n         DC    X'1D241ADB1A2212E5122107F1072004F5041F03F7031F02F8021F'\n         DC    X'01F9011F01F9011F00FA001F00FA80'\n         SPACE\n$VERTBAR DC    X'C8A451A451A451A4D1'\n         SPACE\n$RABBIT  DC    X'D7E904E706E409E20AE00CDE0D4003DC0E3E08DB0F3C0CD9103B'\n         DC    X'0ED8103A10D7103913D6102B073913D5102B063815D4102C0538'\n         DC    X'0D4A04D40F2D033204380D4A04D30F2D0332134A04D30E2D0332'\n         DC    X'1DD20E2C04331CD20C2B06331CD10C2A08351BD10BB427B5242D'\n         DC    X'02B1252D02B1232D03B2202D03B21F2E03B3272E03B32B2E03B4'\n         DC    X'2D2F02B42F2F03B53030023517CE193614CF193810D1193E07D2'\n         DC    X'19D617D915DD12E28D'\n         SPACE\n$ASTRSK2 DC    X'C1CA05C809C70BC60DC50FC50FC411C313C313C313C313C3132F'\n         DC    X'094313E1092D0E4313DE0E2C124313DB122B154411D9152B1644'\n         DC    X'11D8162B17450FD7172B18460DD6182C18460DD518AC41AD3FAE'\n         DC    X'3DAF3BB039B235B431B72BBA25C019BA25B72BB431B235B039AF'\n         DC    X'3BAE3DAD3FAC412C18460DD5182B18460DD6182B17450FD7172B'\n         DC    X'164411D8162B154411D9152C124313DB122D0E4313DE0E2F0943'\n         DC    X'13E109C313C313C313C313C313C411C411C50FC50FC60DC70BC8'\n         DC    X'09CA85'\n         SPACE\n$BRACER  DC    X'C21F00FA001F00FA001F01F9011F01F9011F02F8021F03F70320'\n         DC    X'04F5042107F1072212E512241ADB1A291DD31D3019D0193813CE'\n         DC    X'13C019C60DC909CA05CB03CC01CC81'\n         SPACE\n$NOT     DC    X'C8CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'\n         DC    X'04CB04CB04CB04CB04CB04CB04CB04BD12BD12BD12BD92'\n         SPACE\n$UNSLASH DC    X'E2F802F406F00AEC0CE80CE40CE00CDC0CD80DD40DD00BCC0DC9'\n         DC    X'0CC50CC10CBE0CB90CB50DB10DAD0DAA0CA60CA30C9F0C9F089F'\n         DC    X'059F81'\n         SPACE\n$ARROWR  DC    X'6ECB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'\n         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04C118C2'\n         DC    X'16C314C412C510C60EC70CC80AC908CA06CB04CC02CD80'\n         SPACE\n$NTEQUAL DC    X'D54604D0044604D00440004604D00440024604D00440034604D0'\n         DC    X'04400AD0044109D0044307D0044505D0044606D0044608D004C6'\n         DC    X'0E4604CC084604CD074604CF054604D0064604D0084604D00A46'\n         DC    X'04D00A46045004D70346045004D9014604D0044604D0044604D0'\n         DC    X'84'\n         SPACE\n$QUOTER  DC    X'D8F006EE0AED0C6100EC0E6202EA10E416E613E90FED09800080'\n         DC    X'0080008000F006EE0AED0C6100EC0E6202EA10E416E613E90FED'\n         DC    X'89'\n         EJECT\n*\n*     PATTERNS FOR REGULAR SPECIAL CHARACTERS\n*\n         SPACE\n$BLANK   DC    X'4080008000800080008000800080008000800080008000800080'\n         DC    X'0080008000800080008000800080008000800080008000800080'\n         DC    X'0080008000800080008080'\n         SPACE\n$CENT    DC    X'C3C312BE1CBC20BA24B828B62CB52E340DD70D3309DC092A0432'\n         DC    X'07DE072A0EE0062A15E1052A1BE2052E1EE3043124E30431043E'\n         DC    X'1FE3043104C6223104CC1F3203D41B3204DB143303E10E33045F'\n         DC    X'06E9043404DD073504DB083605DB073805DC043A04DD01BC80'\n         SPACE\n$PERIOD  DC    X'D6A306A10AA00C9F0E9F0E9F0EA00CA10AA386'\n         SPACE\n$LESS    DC    X'4CCB04CB04CA06CA06C908C9084804CE044804CE044704CF0447'\n         DC    X'04CF044604D0044604D0044504D1044504D1044404D2044404D2'\n         DC    X'044304D3044304D3044204D4044204D4044104D5044104D50440'\n         DC    X'04D6044004D684'\n         SPACE\n$PARENL  DC    X'D7BC21B72BB137AD3FAA452810E110250CE80C230AEC0A2108F0'\n         DC    X'081F07F3071F02F882'\n         SPACE\n$PLUS    DC    X'D7CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04BE1EBE1EBE'\n         DC    X'1EBE1ECB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'\n         SPACE\n$AMPRSND DC    X'50B10BAD13AB18291DDD0D2820DA142624D8182526D51D240D3E'\n         DC    X'0ED321230C410C510CEC09220B430A500BEF0721084513F10620'\n         DC    X'074610F2062006480DF30520064A09F4051F064909F5051F0648'\n         DC    X'0AF5051F06470CF5051F06460EF5051F0644084F05F5051F0643'\n         DC    X'085006F5051F0642085106F5051F0641075206F40520053F0853'\n         DC    X'06F30620063E085408F10721053C085509ED0A21063B08D62022'\n         DC    X'073908D81D23083808DA1924093708DC15250B3508E10CA616A8'\n         DC    X'13AA10AE11AD14AD132C08B60A2B08B9062A08BC02AB06AD02AE'\n         DC    X'80'\n         SPACE\n$EXCLMPT DC    X'C52306DB14210ACB29200CC1361F0EB7421F0EB6441F0EB74220'\n         DC    X'0CC136210ACB292306DB94'\n         SPACE\n$DOLLAR  DC    X'5B2C01DD0A2B02D9102A03D6152905D3192806D11E2708D02027'\n         DC    X'07CF2226074E12EA0826074D11EC0725084D0FED0725074C0FEE'\n         DC    X'0625074C0EEF059F5B9F5B9F5B9F5B2407490FF0052407480FF0'\n         DC    X'052407480FF0052407470FF0059F5B9F5B9F5B9F5B25094410EE'\n         DC    X'06250A4211ED06260A4012EC06270B3E13EC05280C3B15EA0628'\n         DC    X'26EB042924EB032B22EC01AC1FAD1DAF1AB216B590'\n         SPACE\n$ASTRSK  DC    X'C1C603C505C407C309C309C20BC20BC20B3606420BD306350943'\n         DC    X'09D109340C4309CF0C340D4407CE0D340E4407CD0EB525B623B7'\n         DC    X'21B91DBB19C00FBB19B91DB721B623B525340E4407CD0E340D44'\n         DC    X'07CE0D340C4309CF0C35094309D1093606420BD306C20BC20BC2'\n         DC    X'0BC309C309C407C505C683'\n         SPACE\n$PARENR  DC    X'D71F02F8021F07F3072108F008230AEC0A250CE80C2810E110AA'\n         DC    X'45AD3FB137B72BBCA1'\n         SPACE\n$SEMICOL DC    X'E22306CB06210AC90A200CC80C14001F0EC70E15021D10C70E17'\n         DC    X'16C70E1913C80C1C0FC90A2009CB86'\n         SPACE\n$HYPHEN  DC    X'C8CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'\n         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'\n         SPACE\n$SLASH   DC    X'E29F019F059F089F0CA30CA60CAA0CAD0DB10DB50DB90CBE0CC1'\n         DC    X'0CC50CC90CCC0DD00BD40DD80DDC0CE00CE40CE80CEC0CF00AF4'\n         DC    X'06F882'\n         SPACE\n$COMMA   DC    X'C3A306A10AA00C14009F0E15029D10971699139C0FA089'\n         SPACE\n$PERCENT DC    X'D7E208DF0EDC145A06EC065806EE065804F0045703F2035703F2'\n         DC    X'035703F2035804F0041F015806EE061F055A06EC081F08DC181F'\n         DC    X'0C5F0EF103230C6208F103260CF1032A0CF0032D0DF003310DF0'\n         DC    X'03350DF003390CF0033E0CF003410CF003450CF003490CF1034C'\n         DC    X'0DF103500BF103540DF203580DF2035C0CF203600CF303640CF4'\n         DC    X'023408E811310EEC0D2E14F00A2C063E06F4062A064006F8022A'\n         DC    X'04C2042903C4032903C4032903C4032A04C2042A06C0062C06BE'\n         DC    X'06AE14B10EB488'\n         SPACE\n$GREATER DC    X'6ED6044004D6044004D5044104D5044104D4044204D4044204D3'\n         DC    X'044304D3044304D2044404D2044404D1044504D1044504D00446'\n         DC    X'04D0044604CF044704CF044704CE044804CE044804C908C908CA'\n         DC    X'06CA06CB04CB84'\n         SPACE\n$QUESTMK DC    X'6FE407E20DE110E112E113E2136406EF07F106F30523063A05F4'\n         DC    X'04210A370CF504200C3610F6031F0E3514F6041F0E3517F6041F'\n         DC    X'0E3519F604200C351BF604210A360A470BF505230638054A0AF4'\n         DC    X'064B0BF3074C0CF1094D0DEF0A4E10EB0ECF29D028D126D224D3'\n         DC    X'22D51ED71AD916DD8E'\n         SPACE\n$COLON   DC    X'C32306CB06210AC90A200CC80C1F0EC70E1F0EC70E1F0EC70E20'\n         DC    X'0CC80C210AC90A2306CB86'\n         SPACE\n$NUMBER  DC    X'7BBE04BE042803BE042807BE04280A3E04D7042A0C3E04D7042D'\n         DC    X'0D3E04D7043111D704350DD704390CD7043E0CD7043E0FD7043E'\n         DC    X'04450CD7043E04490CD7043E04CC0F3E04D00B3E04D40D3E04D7'\n         DC    X'0E3E04D7113E045704E00C3E045704E40C3E045704E80828033E'\n         DC    X'045704EC0428073E04D704280A3E04D7042A0C3E04D7042D0D3E'\n         DC    X'04D7043111D704350DD704390CD7043E0BD7043E0ED7043E0445'\n         DC    X'0CD7043E04490CD7043E04CC0F3E04D00B3E04D40D3E04D70E3E'\n         DC    X'04D7113E045704E00C3E045704E40C3E045704E8085704EC04D7'\n         DC    X'04D704D704D784'\n         SPACE\n$APIECE  DC    X'D6C30EBC1BB924B6293312CC14310FD30F300CDA0A2E0CDC0A2D'\n         DC    X'0ADE0A2C09E1092C06E2082C05E3082B06450AE5072B06430FE6'\n         DC    X'072B064313E7072B064216E8062A0642064E0CE9052A06410654'\n         DC    X'07EA052A0641055506EB042A0641055606EB052A0542045705EC'\n         DC    X'052A0542045805EC052A0542055805EC052A0543045904EC052B'\n         DC    X'0444045A04EC052B0445035A04EC052B0446035A04EC052B0548'\n         DC    X'045B03EC052C04470B5B03EC052C054618EC052C06421CEC042D'\n         DC    X'0742084D10EB052E074107500CEB042F073F08EA0530083F06EA'\n         DC    X'0432083F05E90533063F04E70634043F05E60636013F08E20941'\n         DC    X'0ADC0EC227C325C71DCA14CA89'\n         SPACE\n$APOST   DC    X'C1F006EE0AED0C6100EC0E6202EA10E416E613E90FED89'\n         SPACE\n$EQUAL   DC    X'C54604D0044604D0044604D0044604D0044604D0044604D00446'\n         DC    X'04D0044604D0044604D0044604D0044604D0044604D0044604D0'\n         DC    X'044604D0044604D0044604D0044604D0044604D0044604D00446'\n         DC    X'04D0044604D0044604D0044604D0044604D084'\n         SPACE\n$QUOTEL  DC    X'D8E509E30FE213E1166110F702610EFA00E20CE30AE506800080'\n         DC    X'0080008000E509E30FE213E1166110F702610EFA00E20CE30AE5'\n         DC    X'86'\n         EJECT\n*\n*     PATTERNS FOR LOWER CASE ALPHABETIC CHARACTERS\n*\n         SPACE\n@A       DC    X'C1AB08A710A5142318C805221AC60A211CC50D201EC50E200935'\n         DC    X'09C50F1F083708C60E1F0738074804CF061F063906D0051F0639'\n         DC    X'06D1041F063906D10420053905D10420053905D00521053805CF'\n         DC    X'0622053705CE0723063506CB09A430A231A131A0319F319F2F9F'\n         DC    X'2D9F299F069F049F039F82'\n         SPACE\n@B       DC    X'C21F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B26'\n         DC    X'05C9052405CB052205CD052105CE052005CF052004D0041F05D0'\n         DC    X'051F05D0051F05D0051F06CF061F07CE072008CC08200BC90B21'\n         DC    X'0FC40FA230A32EA42CA628A824AB1EAF96'\n         SPACE\n@C       DC    X'C3B112AC1CAA20A824A628A42CA32E220DC50D2109CA092107CC'\n         DC    X'072006CE062005CF051F05D0051F04D1041F04D1041F04D1041F'\n         DC    X'04D1041F04D1042003D0042004D0042103CF042104CD062204CB'\n         DC    X'072304C9082405C9072605CA042804CB01AA80'\n         SPACE\n@D       DC    X'C4AF16AB1EA824A628A42CA32EA230210FC40F200BC90B2008CC'\n         DC    X'081F07CE071F06CF061F05D0051F05D0051F05D0052004D00420'\n         DC    X'05CF052105CE052205CD0524054B05F60426054905F6049F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B9F5B9F5B9F049F84'\n         SPACE\n@E       DC    X'C5B112AC1CAA20A824A628A42CA32E220D3804C50D21093804CA'\n         DC    X'0921073804CC0720063804CE0620053804CF051F053804D0051F'\n         DC    X'043804D1041F043804D1041F043804D1041F043804D1041F0438'\n         DC    X'04D00520033804CF0520043804CE0621033804CC0721043804CA'\n         DC    X'0922043804C50D2304B8192405B8182605B8162804B8142A00B8'\n         DC    X'12B810B88B'\n         SPACE\n@F       DC    X'C6D1041F04D1041F04D1049F4E9F529F559F579F589F599F5A9F'\n         DC    X'5A1F045104F4061F045104F60451046A06F6045104680AF50551'\n         DC    X'04E7135104E613E613E612E710E80CEA86'\n         SPACE\n@G       DC    X'C70D0ABC0B0A10B8130814B617070718052106B41B05071A10B3'\n         DC    X'1D04061C10B21F03061D10B12102061C12B02302061C1FC80C01'\n         DC    X'061B0F2D0ACC0801061A0E2E07CE0701061A0D2E05D005010619'\n         DC    X'0E2E04D1040106190D2E04D1040106180E2E04D1040106180D2E'\n         DC    X'04D1040107170D2E05D0050107160E2E07CE070207160D2F08CC'\n         DC    X'080208150D2F0CC80C020A130FB023031EB121041DB220051BB3'\n         DC    X'1F0619341B5102D704081536175103D6060A113813D10C0D0C3C'\n         DC    X'0BD20BD30AD507D784'\n         SPACE\n@H       DC    X'C81F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F'\n         DC    X'04C9051F04CB05CC05CD05CD06CE06CE06CE07CE07CD081F04CC'\n         DC    X'091F04C90C9F369F359F359F349F339F319F2E9F2A9F049F84'\n         SPACE\n@I       DC    X'C91F04D1041F045104E5061F36E30A1F36E20C1F36E10E1F36E1'\n         DC    X'0E1F36E10E1F36E20C1F36E30A1F36E5069F049F84'\n         SPACE\n@J       DC    X'D18806850B840D830E820F820F01048709010488068104810481'\n         DC    X'050205D10402075104E5060352E30A0451E20C0550E10E064FE1'\n         DC    X'0E084DE10E0B4AE20C0F46E30A1441E586'\n         SPACE\n@K       DC    X'D21F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F'\n         DC    X'04BA091F04B80CB511B314B118AF1B2D15C6062A164706D1041F'\n         DC    X'0428154906D1041F042516CA0B1F1ACC091F17CD081F15CF061F'\n         DC    X'13D0051F10D1041F0ED1049F0C9F0A9F079F059F049F84'\n         SPACE\n@L       DC    X'D31F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B9F'\n         DC    X'049F84'\n         SPACE\n@M       DC    X'D41F04D1041F04D1049F369F369F369F369F369F369F369F361F'\n         DC    X'04C9051F04CB05CC05CD051F04CC071F04CB099F369F369F369F'\n         DC    X'369F359F349F339F301F04C9051F04CB05CC05CD051F04CC071F'\n         DC    X'04CB099F369F369F369F369F359F349F339F309F049F84'\n         SPACE\n@N       DC    X'D51F04D1041F04D1049F369F369F369F369F369F369F369F361F'\n         DC    X'04C9051F04CB05CC05CD05CD06CE06CE06CE07CE07CD081F04CC'\n         DC    X'091F04C90C9F369F359F359F349F339F319F2E9F2A9F049F84'\n         SPACE\n@O       DC    X'D6B112AC1CAA20A824A628A42CA32E220DC50D2109CA092107CC'\n         DC    X'072006CE062005CF051F05D0051F04D1041F04D1041F04D1041F'\n         DC    X'04D1041F05D0052005CF052006CE062107CC072109CA09220DC5'\n         DC    X'0DA32EA42CA628A824AA20AC1CB192'\n         SPACE\n@P       DC    X'D70104D1040104D1048154815481548154815481548154815426'\n         DC    X'05C9052405CB052205CD052105CE052005CF052004D0041F05D0'\n         DC    X'051F05D0051F05D0051F06CF061F07CE072008CC08200BC90B21'\n         DC    X'0FC40FA230A32EA42CA628A824AB1EAF96'\n         SPACE\n@Q       DC    X'D8AF16AB1EA824A628A42CA32EA230210FC40F200BC90B2008CC'\n         DC    X'081F07CE071F06CF061F05D0051F05D0051F05D0052004D00420'\n         DC    X'05CF052105CE052205CD052405CB052605C90581548154815481'\n         DC    X'5481548154815481540104D1040104D184'\n         SPACE\n@R       DC    X'D91F04D1041F04D1049F369F369F369F369F369F369F369F361F'\n         DC    X'04C5061F04C706C807C907CA07CB07CB08CC08CC08C60FC411C3'\n         DC    X'12C213C213C212C212C310C40DC688'\n         SPACE\n@S       DC    X'E21F0DC1081F0DBE0E1F0DBC121F0DBA162208B9182107B81A21'\n         DC    X'06B71C20063610CE062005360ED0041F05350ED1041F05350DD1'\n         DC    X'041F04350DD1041F04350CD1041F04340DD1041F04340DD1041F'\n         DC    X'04330DD0051F04330DCF051F05320ECE062004320DCD06200531'\n         DC    X'0ECC072105300ECA0821062E10C80D221BC80D231AC80D2418C8'\n         DC    X'0DA614A810AC89'\n         SPACE\n@T       DC    X'E3D104D104D104AA38A63CA43EA240A141A0429F439F431F0BD1'\n         DC    X'041F09D1041F08D1042007D104A006A105A205A404A783'\n         SPACE\n@U       DC    X'E4D104D104AB2AA72EA431A233A134A035A0359F369F0C9F099F'\n         DC    X'089F079F07A006A006A106A205A3052405D1042605D1049F369F'\n         DC    X'369F369F369F369F369F369F369F049F84'\n         SPACE\n@V       DC    X'E5D104D104CE07CB0AC70EC312BF16BC19B81DB421B0252D20D1'\n         DC    X'042920D104A520A1219F1FA218A511A90CAD0CB10CB40DB80D3C'\n         DC    X'0DD104400DD104C411C80DCB0ACF06D104D104D184'\n         SPACE\n@W       DC    X'E6D104D104CE07CB0AC70EC312BF16BC19B81DB421B0252D20D1'\n         DC    X'042920D104A520A1219F1FA218A511A90CAD0CB00DAD14A91CA5'\n         DC    X'1FA1209F1EA218A511A90CAD0CB10CB40DB80D3C0DD104400DD1'\n         DC    X'04C411C80DCB0ACF06D104D104D184'\n         SPACE\n@X       DC    X'E71F04D1041F04D1041F04D0051F04CE071F06CB0A1F08C90C1F'\n         DC    X'0BC60F1F0DC4111F042608C1141F042808BF162A08BC192C08BA'\n         DC    X'1B2E083816D104301BD104B217B016AD17AB161F04A81B1F04A6'\n         DC    X'1F1F1BBF081F19C1081F164308D1041F144508D1041F114708D1'\n         DC    X'041F0FCA0B1F0CCC091F0ACE071F07D0051F05D1041F04D1041F'\n         DC    X'04D184'\n         SPACE\n@Y       DC    X'E80505D1040309D104020BCE07010DCB0A010DC70E010DC31202'\n         DC    X'0BBF160309BC19050BB81D080CB4210B0CB0250F0C2D20D10412'\n         DC    X'0D2920D104160DA5209A289E20A218A511A90CAD0CB10CB40DB8'\n         DC    X'0D3C0DD104400DD104C411C80DCB0ACF06D104D104D184'\n         SPACE\n@Z       DC    X'E91F01C80D1F03C80D1F06C80D1F09CC091F0BCE071F0ED0051F'\n         DC    X'11D0051F13D1041F16D1041F19D1041F1BD1041F042518D1041F'\n         DC    X'042719D1041F042A18D1041F042D18D1041F042F19D1041F0432'\n         DC    X'19D1041F043518D1041F04B71E1F04BA1B1F04BC191F04BF161F'\n         DC    X'04C2131F05C4111F05C70E1F07CA0B1F09CD081F0DCF061F0DD2'\n         DC    X'031F0DD580'\n         EJECT\n*\n*     PATTERNS FOR UPPER CASE ALPHABETIC CHARACTERS\n*\n         SPACE\n@AA      DC    X'C19F049F049F049F049F059F089F0C9F101F04A60C1F04AA0C1F'\n         DC    X'04AD0D1F04B10DB50DB90CBB0E3B04C10C3B04C50C3B04C90C3B'\n         DC    X'04CC0D3B04D00B3B04D40D3B04D80D3B04DC0C3B04E00C3B04E1'\n         DC    X'0F3B04DE163B04DA1E3B04D6243B04D2263B04CE263B04CA263B'\n         DC    X'04C7253B04C325BB29BB25B7261F04B3261F04AF261F04AB261F'\n         DC    X'04A7279F2B9F279F239F1F9F1B9F189F149F109F0C9F089F059F'\n         DC    X'049F049F049F84'\n         SPACE\n@BB      DC    X'C21F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'\n         DC    X'041F045104F6041F045104F6041F045104F6041F045104F6041F'\n         DC    X'045104F6041F045104F6041F045104F6041F045105F5051F0550'\n         DC    X'06F5051F055006F5051F064F08F40620064E09F40620074D0BF3'\n         DC    X'0620084C0EF10821084B10F00921094A13EE0A220A4818EB0D22'\n         DC    X'0D450CD4232310410FD521242BD61F2529D71D2627D9192725DB'\n         DC    X'152921DE0F2B1DE109AE18B290'\n         SPACE\n@CC      DC    X'C3C019BA25B62DB333B039AE3DAC41AA45A8492719DD152515E2'\n         DC    X'122412E70E2310EB0B220EED0A210CF008210AF206200AF30620'\n         DC    X'08F4051F08F5051F07F5051F06F6041F06F6041F05F6041F05F6'\n         DC    X'041F05F6042004F5052104F5042105F4052204F3052304F10624'\n         DC    X'04EF072604EC092804E80C2A04E8122C04E8122E05E8123105E8'\n         DC    X'12B481'\n         SPACE\n@DD      DC    X'C41F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6041F'\n         DC    X'04F6041F04F6041F04F6041F05F5051F05F5051F06F4061F06F4'\n         DC    X'062006F3062007F2072107F1072108F0082209EE09220CEB0C23'\n         DC    X'0DE90D240FE60F2513E1132618DB18A849A947AB43AD3FAF3BB2'\n         DC    X'35B52FB927BE9D'\n         SPACE\n@EE      DC    X'C51F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'\n         DC    X'041F045104F6041F045104F6041F045104F6041F045104F6041F'\n         DC    X'045104F6041F045104F6041F045104F6041F045104F6041F0451'\n         DC    X'04F6041F045006F6041F044E0AF6041F044A12F6041F044A12F6'\n         DC    X'041F044A12F6041F044A12F6041F04F6041F04F6041F05F5051F'\n         DC    X'05F5051F07F3071F08F2081F0BEF0B1F12E8121F12E8121F12E8'\n         DC    X'121F12E892'\n         SPACE\n@FF      DC    X'C61F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'\n         DC    X'041F045104F6045104F6045104F6045104F6045104F6045104F6'\n         DC    X'045104F6045104F6045104F6045006F6044E0AF6044A12F6044A'\n         DC    X'12F6044A12F6044A12F604F604F604F505F505F307F208EF0BE8'\n         DC    X'12E812E812E892'\n         SPACE\n@GG      DC    X'C7C019BA25B62DB333B039AE3DAC41AA45A8492719DD152515E2'\n         DC    X'122412E70E2310EB0B220EED0A210CF008210AF206200AF30620'\n         DC    X'08F4051F08F5051F07F5051F06F6041F06F6041F05F6041F05F6'\n         DC    X'041F05F6041F054C04F50520054C04F50420064C04F40521074C'\n         DC    X'04F30521094C04F106220B4C04EF07230F4C04EC09242CE80C25'\n         DC    X'2BE8122729E8122828E8122A26E812AD23B11FB51BBE92'\n         SPACE\n@HH      DC    X'C81F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'\n         DC    X'041F045104F604D104D104D104D104D104D104D104D104D104D1'\n         DC    X'04D104D1041F045104F6041F045104F6041F045104F6041F0451'\n         DC    X'04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F04F6041F'\n         DC    X'04F6041F04F6041F04F684'\n         SPACE\n@II      DC    X'C91F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F684'\n         SPACE\n@JJ      DC    X'D1AD07A90DA611A414A316A217A118A1172006AA0D2005AB0B1F'\n         DC    X'05AD079F049F049F049F049F059F05A0052006F6042008F60421'\n         DC    X'09F604220BF604A357A456A555A654A753A951AB4FAE4CB347F6'\n         DC    X'04F604F604F684'\n         SPACE\n@KK      DC    X'D21F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F044D08F6041F044A0DF6041F044712F6'\n         DC    X'041F044417F604C21ABF1FBC23391DDA07361DDC07331DDE0730'\n         DC    X'1DE0061F042E1DE1071F042B1DE3071F04281EE5061F04251EE6'\n         DC    X'071F216807F6041F1E6A06F6041F1B6B07F6041F196D07F6041F'\n         DC    X'16EF0B1F13F00A1F10F2081F0DF4061F0BF5051F08F6041F05F6'\n         DC    X'041F04F6041F04F6049F049F84'\n         SPACE\n@LL      DC    X'D31F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6049F'\n         DC    X'049F049F049F049F049F049F049F049F049F049F049F049F049F'\n         DC    X'049F049F049F059F059F079F089F0B9F129F129F129F92'\n         SPACE\n@MM      DC    X'D41F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B1F'\n         DC    X'04E8121F04E2181F04DD1D1F04D822D228CD2DC731C231BD31B8'\n         DC    X'31B330AD31A830A2319F2FA325A91AAF13B513BB13C113C713CD'\n         DC    X'13D3131F04D9121F04DF121F04E5121F04EB0F9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6'\n         DC    X'84'\n         SPACE\n@NN      DC    X'D51F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B1F'\n         DC    X'04EC0E1F04E9111F04E6141F04E416E119DE1CDC1CD91DD61DD3'\n         DC    X'1DD01DCD1DCB1DC81DC51DC21DBF1DBD1DBA1DB71DB41DB21CAF'\n         DC    X'1DAC1D291DF604261DF604241DF604211DF6049F5B9F5B9F5B9F'\n         DC    X'5BF604F604F604F684'\n         SPACE\n@OO      DC    X'D6C019BA25B62DB333B039AE3DAC41AA45A8492715DD152512E2'\n         DC    X'12240EE70E230BEB0B220AED0A2108F0082106F2062006F30620'\n         DC    X'05F4051F05F5051F05F5051F04F6041F04F6041F04F6041F04F6'\n         DC    X'041F05F5051F05F5052005F4052006F3052106F2062108F00822'\n         DC    X'0AED0A230BEB0B240EE70E2512E2122715DD15A849AA45AC41AE'\n         DC    X'3DB039B333B62DBA25C099'\n         SPACE\n@PP      DC    X'D71F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'\n         DC    X'041F045104F6045104F6045104F6045104F6045104F6045104F6'\n         DC    X'045104F6045105F5055105F5055105F5055106F4065106F40652'\n         DC    X'06F3065208F1085209F009530AEE0A530DEB0DD423D521D61FD7'\n         DC    X'1DD919DB15DE0FE189'\n         SPACE\n@QQ      DC    X'D8C019BA25B62DB333B039AE3DAC41AA45A8492715DD152512E2'\n         DC    X'12240EE70E230BEB0B220AED0A2108F0082106F2062006F30620'\n         DC    X'05F4051F05F5051F05F5051F042802F6041F042904F6041F042A'\n         DC    X'05F6041F042A06F6041F052908F5051F05280AF5052005270BF4'\n         DC    X'052012F3062111F2062110F206220FED0A220EEB0B2111E70E20'\n         DC    X'17E212201CDD159F529F501F0BAC411F0AAE3D2008B0392106B3'\n         DC    X'332205B62D2404BA252702C099'\n         SPACE\n@RR      DC    X'D91F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F044D08F6041F044A0BF6041F04470EF6'\n         DC    X'041F044411F6044213F6043F16F6043C19F604391CF604361FF6'\n         DC    X'043322F604301D5105F5051F042E1D5105F5051F042B1D5105F5'\n         DC    X'051F04281E5106F4061F04251E5106F4061F215206F3061F1E52'\n         DC    X'08F1081F1B5209F0091F19530AEE0A1F16530DEB0D1F13D4231F'\n         DC    X'10D5211F0DD61F1F0BD71D1F08D9191F05DB151F04DE0F1F04E1'\n         DC    X'099F049F84'\n         SPACE\n@SS      DC    X'E29F129F121F12DA0F1F12D617230BD41B2309D21F2208D02322'\n         DC    X'064F10EB0921064E0FEE0721054D0EF00620054C0EF20520044B'\n         DC    X'0FF30520044B0EF4041F044A0FF5041F044A0EF5041F044A0EF6'\n         DC    X'041F04490FF6041F04490FF6041F04480FF6041F04480FF6041F'\n         DC    X'04470FF6041F05470FF6041F05460FF5051F064510F405200644'\n         DC    X'10F30620074311F20621074112F00821083F13EE0922093D14EC'\n         DC    X'0A230B3A16E80D242BE8122529E8122726E8122823E812AA1FAC'\n         DC    X'1BAF16B28E'\n         SPACE\n@TT      DC    X'E3E812E812E812E812EF0BF208F307F505F505F604F604F604F6'\n         DC    X'041F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'\n         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F604F6'\n         DC    X'04F604F604F604F505F505F307F208EF0BE812E812E812E892'\n         SPACE\n@UU      DC    X'E4F604F604F604F604B941B347AF4BAD4DAB4FA951A753A555A4'\n         DC    X'562314F6042211F604210FF604210DF604A00CA00AA0099F099F'\n         DC    X'089F089F079F079F079F07A006A006A007A106A107A207A307A4'\n         DC    X'082509F6042709F604290AF6042B0CF604AD4DAF4BB347B941F6'\n         DC    X'04F604F604F684'\n         SPACE\n@VV      DC    X'E5F604F604F604F604F406EF0BEA10E614E119DD1DD822D426CF'\n         DC    X'2BCB2F472AF604422AF6043D2BF604B92AB42AAF2BAB2BA62CA2'\n         DC    X'2B9F2AA222A719AB10B00FB50FBA0FBE10C310C810CD10D11056'\n         DC    X'10F6045B10F6046010F604E515EA10EF0BF307F604F604F604F6'\n         DC    X'84'\n         SPACE\n@WW      DC    X'E6F604F604F604F604F406EF0BEA10E614E119DD1DD822D426CF'\n         DC    X'2BCB2F472AF604422AF6043D2BF604B92AB42AAF2BAB2BA62CA2'\n         DC    X'2B9F2AA222A719AB10B00FB50FBA0FBE10C211BD1BB924B42AAF'\n         DC    X'2BAB2BA62CA22B9F2AA222A719AB10B00FB50FBA0FBE10C310C8'\n         DC    X'10CD10D1105610F6045B10F6046010F604E515EA10EF0BF307F6'\n         DC    X'04F604F604F684'\n         SPACE\n@XX      DC    X'E71F04F6041F04F6041F04F6041F04F6041F04F4061F04F1091F'\n         DC    X'06EE0C1F09EB0F1F0BE8121F0EE5151F042709E3171F04290AE0'\n         DC    X'1A1F042C09DD1D2F09DA203208571CF6043409541CF604370951'\n         DC    X'1CF6043A084E1CF6043C09CB1CBF26C121C31CC01CBD1CBA1CB7'\n         DC    X'21B427311DD4091F042E1DD7091F042B1DDA091F04281DDD081F'\n         DC    X'04251DDF091F20E2091F1D6508F6041F1A6808F6041F176A09F6'\n         DC    X'041F14ED0D1F12F00A1F0FF2081F0CF5051F09F6041F06F6041F'\n         DC    X'04F6041F04F6041F04F6041F04F684'\n         SPACE\n@YY      DC    X'E8F604F604F604F604F307F00AED0DEA10E713E416E119DE1CDB'\n         DC    X'1FD822551EF6041F04521EF6041F044F1EF6041F044C1EF6041F'\n         DC    X'04C91E9F459F429F3F9F3C9F399F369F339F309F331F04CA0C1F'\n         DC    X'04CD0C1F04D10C1F04D40CD80C5B0CF6045F0BF604620CF60466'\n         DC    X'0CF604E911ED0DF00AF406F604F604F604F604F684'\n         SPACE\n@ZZ      DC    X'E91F01E8121F04E8121F07E8121F09E8121F0CEF0B1F0FF2081F'\n         DC    X'12F3071F15F5051F18F5051F1BF6041F1EF6041F21F6041F0426'\n         DC    X'1CF6041F04291CF6041F042B1DF6041F042E1DF6041F04311DF6'\n         DC    X'041F04341DF6041F04371DF6041F043A1DF6041F043C1EF6041F'\n         DC    X'043F1EF6041F04421EF6041F04451EF6041F04481EF6041F044B'\n         DC    X'1EF6041F044E1EF6041F04511EF6041F04541EF6041F04D7231F'\n         DC    X'04DA201F04DC1E1F04DF1B1F05E2181F05E5151F07E8121F08EB'\n         DC    X'0F1F0BEE0C1F12F1091F12F4061F12F6041F12F981'\n         EJECT\n*\n*     PATTERNS FOR NUMERIC CHARACTERS\n*\n         SPACE\n#0       DC    X'F0BD1FB62DB235AF3BAC41AA45A849A64DA54F240FE60F230BEB'\n         DC    X'0B2209EE092107F1072006F3062005F4051F05F5051F04F6041F'\n         DC    X'04F6041F04F6041F04F6041F05F5052005F4052006F3062107F1'\n         DC    X'072209EE09230BEB0B240FE60FA54FA64DA849AA45AC41AF3BB2'\n         DC    X'35B62DBD9F'\n         SPACE\n#1       DC    X'F11F04E5001F04E5011F04E5031F04E5059F4C9F4E9F509F529F'\n         DC    X'539F559F579F599F5B9F049F049F049F84'\n         SPACE\n#2       DC    X'F29F039F071F0AF2001F0DF1021F10F1031F12F0051F15F0061F'\n         DC    X'17F1061F0E3008F2061F0E3208F3051F0E3408F4051F0E3608F5'\n         DC    X'041F0E3808F5051F0E3909F6041F0E3A09F6041F0E3B0AF6041F'\n         DC    X'0E3C0AF6041F0E3D0BF6041F0E3E0BF5051F0E3F0BF5051F0E40'\n         DC    X'0CF4061F0E410DF3071F0E420DF2081F0E420FF0091F0E4310EE'\n         DC    X'0B1F0E4411EC0C1F0E4514E8101F0EC6311F0EC72F1F0EC82D1F'\n         DC    X'0ECA2A1F0FCC26220CCE22250AD01E2906D3172D03D70FB081'\n         SPACE\n#3       DC    X'F3A7032605F0012507F0022409EF052308EF062207EE082107EF'\n         DC    X'082106F1072006F2062005F3061F05F4051F05F5041F04F6041F'\n         DC    X'04F6041F04F6041F045100F6041F045002F6041F054F04F6041F'\n         DC    X'054E06F5051F064D08F4061F074C0BF3061F084A0FF108200948'\n         DC    X'13EF09200B451AEC0C210D420ED32421103E11D422222CD52023'\n         DC    X'2AD61E2428D81B2526DA172722DD11291EE00BAB1AAE14B28B'\n         SPACE\n#4       DC    X'F4B201B204B206B208B20AB20CB20EB211B213B215B217320EC2'\n         DC    X'09320EC409320EC609320EC80A320ECB09320ECD09320ECF0932'\n         DC    X'0ED109320ED309320ED5091F04320ED70A1F04320EDA091F0432'\n         DC    X'0EDC091F04320EDE099F4A9F4C9F4E9F519F539F559F579F599F'\n         DC    X'5B1F04B20E1F04B20E1F04B20E1F04B28E'\n         SPACE\n#5       DC    X'F5A6012503CE032405CF0B2307CF152207D01D2107D026210651'\n         DC    X'04DD1D20065105E71320055106EC0E20045205EC0E1F055206EC'\n         DC    X'0E1F045206EC0E1F045206EC0E1F045207EC0E1F045108EC0E1F'\n         DC    X'045108EC0E1F055108EC0E1F055009EC0E20055009EC0E20064F'\n         DC    X'0AEC0E21064D0BEC0E21084B0DEC0E220A4810EC0E220F4413EC'\n         DC    X'0E2333EC0E2431EC0E252FEC0E262DEC0E2829EC0E2A25EC0E2D'\n         DC    X'20EC0E3019F00A3410F406F882'\n         SPACE\n#6       DC    X'F6B927B431B039AD3FAB43A947A74BA64DA45123104B05E61022'\n         DC    X'0B4D05EC0B21094E05EF0921075004F10720065104F306200552'\n         DC    X'04F4051F055304F5051F045304F5051F045305F6041F045305F6'\n         DC    X'041F045305F6041F055305F60420055206F60420065107F60421'\n         DC    X'075008F60421094E09F505220B4C0BF50423104511F4052431F3'\n         DC    X'05262EF205272CF1062929F1052B25F2032D21F301B01BB491'\n         SPACE\n#7       DC    X'F7E802E806E909EA0CEB0FEC0EEC0EEC0EEC0EEC0EEC0EEC0EEC'\n         DC    X'0E1F11EC0E1F19EC0E1F1FEC0E1F25EC0E1F2AEC0E1F2EEC0E1F'\n         DC    X'32EC0E1F36EC0E1F3AEC0E1F3DEC0E411EEC0E4B17EC0E5212EC'\n         DC    X'0E5710EC0E5C0EEC0EE119E515E911EC0EF00AF307F604F981'\n         SPACE\n#8       DC    X'F8B10DAD15AB1A291EDD0C2722D9142525D7192427D51D230D40'\n         DC    X'0CD321220B4409D12421094707D0262107C92E20064B16ED0B20'\n         DC    X'054C13F0091F054C11F2071F054B10F3061F044A10F4061F0449'\n         DC    X'10F5051F04490FF6041F044810F6041F054710F6041F05470FF6'\n         DC    X'041F06460FF5051F074511F40520084413F30620094216F20621'\n         DC    X'0B401BEF09210E3D155509EB0C222FD620232DD71E242BD91A25'\n         DC    X'28DB162724DE112920E10AAB1CAD17B18F'\n         SPACE\n#9       DC    X'F9D411CE1B2501CB212403C9252305C7292206C62C2205C52E21'\n         DC    X'05C43120054311E6102004420BEC0B1F054209EF091F044108F1'\n         DC    X'071F044107F3061F044106F4051F044105F5051F044105F6041F'\n         DC    X'044105F6041F044105F6041F054204F6041F054204F505200543'\n         DC    X'04F40520064404F30621074504F10721094605EF09220B4705EC'\n         DC    X'0B23104905E610A451A64DA74BA947AB43AD3FB039B431B9A7'\n         END\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DA": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x03\\xf0\\x03\\xf0\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 1008, "newlines": 1008, "modlines": 0, "user": "ANDREWS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "DD": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x08\\xc7\\x08\\xc7\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 2247, "newlines": 2247, "modlines": 0, "user": "ANDREWS"}, "text": "//DD       JOB\n//*\n//*  DD -\n//*    IS A TSO COMMAND THAT DISPLAYS DATASET ATTRIBUTES.\n//*    IT DOESN'T REQUIRE THAT A DATASET BE CATALOGED, AND\n//*    IT PROVIDES MORE INFORMATION FOR NONVSAM DATASETS\n//*    (AND GENERATION DATA GROUPS) THAN LISTCAT DOES.\n//*\n//*  DDX -\n//*    AN ALIAS FOR \"DD\".  IF THE THIRD CHARACTER OF THE TSO\n//*    COMMAND NAME IS THE LETTER \"X\", THE COMMAND CLEARS\n//*    THE 3270 SCREEN BEFORE DISPLAYING ANY INFORMATION.\n//*    ALTHOUGH THIS SOUNDS LIKE A KLUGE, IT IS ACTUALLY A\n//*    PRETTY USEFUL ONE.  I USE \"DDX\" ALL THE TIME.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE\n//*    COMMAND NAME AND ALIAS YOU WILL HAVE TO DOCTOR THE\n//*    JOBSTREAM.  THERE IS CODE IN THE PROGRAM THAT DEPENDS\n//*    ON THE COMMAND NAME BEING \"DD\" (NEAR SEQUENCE # 00227000)\n//*\n//*  BUGS -\n//*    DD CALCULATES THE NUMBER OF RECORDS FOR FB/PS DATASETS.\n//*    THE CALCULATION IS IN ERROR.  IF YOU FEEL LIKE FIXING\n//*    THIS, BE MY GUEST, IT HAS IRRITATED ME FOR SOME TIME.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY\n//             HELP='SYS1.HELP',     <=== HELP LIBRARY\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME\n//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME\n//             MODGEN='SYS1.MODGEN'  <=== MACRO LIBRARY NAME\n//*                                       (USE SYS1.SMPMTS FOR MVS-370)\n//*\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  DSN=&HELP,DISP=SHR\n//SYSUT2   DD  DSN=&HELP,DISP=SHR\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//         DD  DSN=&AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REFR'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB,DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//        PEND\n//*\n//        EXEC INSTALL\n//IEBUPDTE.SYSIN DD *\n./         ADD    NAME=DD,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n./         ALIAS  NAME=DDX\n)F FUNCTION -\n         -   THE DD COMMAND DISPLAYS INFORMATION ON AN OS\n             DATASET.  AT A MINIMUM THE CATALOG INFORMATION IS\n             DISPLAYED (VOLSER AND DEVICE TYPES) AND IF THE DATASET\n             IS ON A MOUNTED DASD, DEVICE INFORMATION FROM THE\n             DATASET'S DSCB IS DISPLAYED.\n\n             AUTHOR -   DAVE PHILLIPS\n                        A. DUDA AND SONS, INC.\n                        P.O. BOX 257\n                        OVIEDO, FL  32765\n\n)X SYNTAX -\n         DD 'DATASET-NAME'  PARTIAL OR\n                            GENERATION(number) OR\n                            VOLUME(name)\n\n  DEFAULTS -  DATASET-NAME DEFAULTS TO TSO USERID PREFIX\n  ALIAS    -  DDX  (DOES CLEAR COMMAND BEFORE DISPLAY)\n  ABBREVIATIONS -  PARTIAL    ===> P\n                   GENERATION ===> G\n                   VOLUME     ===> V\n\n)O OPERAND -\n  'dataset-name'\n         - SPECIFIES THE COMPLETE OR PARTIAL NAME OF THE DATA SET\n           WHICH IS TO BE SAERCHED FOR.\n\n))PARTIAL - SPECIFIES A PARTIAL DATA SET NAME SEARCH\n))GENERATION(number)  - LISTS DATA SET' DSCB INFORMATION FOR THE\n                        GENERATION LEVEL SPECIFIED.\n))VOLUME(name) - SPECIFIES THE VOLUME NAME ON WHICH THE DATA SET\n                 RESIDES.  IF A VOLUME NAME IS ENTERED, SYSALLDA IS\n                 ASSUMED AS THE UNIT NAME; OTHERWISE, THE UNIT NAME\n                 FROM THE CATALOG IS USED.\n\n                 NOTE:  THIS PARAMETER SHOULD BE USED IF THE DATA SET\n                 IS NOT CATALOGED OR IF THE CATALOG ENTRY IS NOT TO BE\n                 USED.\n\n\n  EXAMPLES:\n\ndd 'men.dp.pub.lib'\n\nDSN = MEN.DP.PUB.LIB\n3380 - INTLIB\nDSORG PO  RECFM U  BLKSIZE 11,476  LRECL 11,476\nC- 7/25/88  KEYLEN 0  RKP 0  #EXTS 1\nU- 8/19/88  CHANGED\nALLOC IN CYL  SEC 1  TOTAL 3 CYL  USED 1 CYL 4 TRK\nEXTENTS  #   CCC HH     CCC HH\n         1.  209 00  -  211 14    3 CYL\n\ndd 'x.file22' p\n\nCATALOG: CATALOG.USER\nNON-VSAM ------ X.FILE225.DATA\nNON-VSAM ------ X.FILE226.DATA\nNON-VSAM ------ X.FILE227.PDS\nNON-VSAM ------ X.FILE229.DATA\n\ndd 'od.abrcat'\n\nCATALOG: CATALOG.USER\nNON-VSAM ------ OD.ABRCAT.G0631V00\nNON-VSAM ------ OD.ABRCAT.G0632V00\nNON-VSAM ------ OD.ABRCAT.G0633V00\n\ndd 'od.abrcat' g(-1)\n\nDSN = OD.ABRCAT.G0632V00\n3380 - VSAM01\nDSORG PS  RECFM VBS  BLKSIZE 23,476  LRECL 32,404\nC- 8/18/88  KEYLEN 0  RKP 0  #EXTS 1\nU- 8/18/88\nALLOC IN CYL  SEC 1  TOTAL 1 CYL  USED 3 TRK\nEXTENTS  #   CCC HH     CCC HH\n         1.  146 00  -  146 14    1 CYL\n\ndd 'sys1.logrec' v(altres)\n\nDSN = SYS1.LOGREC\n3380 - ALTRES\nDSORG PS  RECFM U  BLKSIZE 1,944  LRECL 0\nC-11/09/86  KEYLEN 0  RKP 0  #EXTS 1\nU- 6/08/88\nALLOC IN CYL  SEC 0  TOTAL 5 CYL  USED 5 CYL\nEXTENTS  #   CCC HH     CCC HH\n         1.  448 00  -  452 14    5 CYL\n./        ENDUP\n/*\n//ASM.SYSIN DD *\nDSINFO   TITLE 'DATASET INQUIRY FUNCTION                HOUSEKEEPING AN*\n               D PARSE COMMAND BUFFER'\n         SPACE 2\n*\n* FUNCTION -\n*            THIS PROGRAM DISPLAYS INFORMATION ON A OS DATASET. AT A\n*            MINIMUM THE CATALOG INFORMATION IS DISPLAYED (VOLSER AND\n*            DEVICE TYPES) AND IF THE DATASET IS ON A MOUNTED DASD\n*            DEVICE INFORMATION FROM THE DATASET'S DSCB IS DISPLAYED.\n*\n* AUTHOR -\n*            DAVE PHILLIPS\n*              A. DUDA AND SONS, INC.\n*              P.O. BOX 257\n*              OVIEDO, FL  32765\n*\n* CHANGES OCTOBER 1990 (DAVID ANDREWS) -\n*            PROGRAM MODIFIED TO USE THE MVS UNIT VERIFICATION\n*            SERVICE (IEFEB4UV) IN THE EVENT THAT THE DEVICE NAME\n*            TABLE CANNOT BE LOCATED (DEVNAMET DISAPPEARED IN\n*            MVS/XA).  ALSO REPLACED SOME CODE THAT SCANNED THE\n*            UCB LOOKUP TABLE WITH OTHER CODE THAT USES IOSVSUCB\n*            (THE UCB LOOKUP TABLE ALSO DISAPPEARED IN MVS/XA).\n*\n         SPACE\nDSINFO   CSECT\n         SPACE\n         SAVE  (14,12),,DSINFO-&SYSDATE-&SYSTIME\n         SPACE\n         LR    R11,R15            LOAD FIRST BASE\n         LA    R12,X'FFF'(,R11)   COMPUTE\n         LA    R12,1(,R12)        SECOND BASE\n         USING DSINFO,R11,R12\n         LR    R6,R1              SAVE PARM\n         SPACE\n         LA    R0,CORESIZE\n         GETMAIN R,LV=(0)         GET A WORK AREA\n         ST    R13,4(,R1)         )\n         ST    R1,8(,R13)         ) CHAIN SAVE AREAS\n         LR    R13,R1             )\n         USING CORE,R13\n         SPACE 2\n* BUILD ALL SERVICE ROUTINE PARAMETER BLOCKS & LISTS\n         SPACE\n         MVI   FLAGS,0\n         USING CPPL,R6\n         LA    R4,PPLSECT         -> PPL\n         USING PPL,R4\n         LA    R5,IOPLSECT        -> IOPL\n         USING IOPL,R5\n         L     R1,CPPLUPT         -> UPT\n         L     R2,CPPLECT         -> ECT\n         SR    R3,R3\n         ST    R3,ECB             ZERO ECB\n         LA    R3,ECB             -> ECB\n         STM   R1,R3,PPLSECT      PUT ADDR OF UPT,ECT,ECB IN PPL\n         STM   R1,R3,IOPLSECT     PUT ADDR OF UPT,ECT,ECB IN IOPL\n         LA    R3,IOPB            -> PUTLINE PARM BLOCK\n         ST    R3,IOPLIOPB        PUT IN IOPL\n         MVC   PPLPCL,PCLADDR     MOVE PTR TO PCL TO PPL\n         LA    R2,PARSBACK        -> PARSE ANSWER AREA\n         ST    R2,PPLANS          IN PPL\n         L     R1,CPPLCBUF        CBUF PTR IN PPL\n         ST    R1,PPLCBUF\n         CLI   6(R1),C' '         3RD CHAR OF CMD NAME BLANK ?\n         BE    *+8                YES - MUST BE 'DD'\n         OI    FLAGS,CLRSCN       NO  - MUST BE 'DDX'\n         SPACE\n         LH    R0,0(R1)           LENGTH OF CBUF\n         LH    R1,2(R1)           OFFSET TO PARMS IN CBUF\n         LA    R1,4(,R1)          ADJUST TO SAME SCALE AS LENGTH\n         CR    R1,R0              PARAMETERS ???\n         BL    DOPARSE            YES - PARSE THEM                     *\n                                  NO - SET UP DEFAULT DSNAME\n         L     R1,CPPLUPT         -> UPT\n         SR    R0,R0              CLEAR FOR INSERT\n         ICM   R0,B'0001',23(R1)  LENGTH OF PREFIX\n         BZ    DOPARSE            NO PREFIX - PROMPT FOR DSNAME\n         STH   R0,DSNLEN          LENGTH OF PREFIX IS LEN OF DSNAME\n         MVI   DSNAME,C' '        BLANK OUT DSNAME FIELD\n         MVC   DSNAME+1(L'DSNAME-1),DSNAME\n         MVC   DSNAME(7),16(R1)   GET PREFIX FROM UPT\n         MVI   VOLSER,C' '        BLANK OUT VOLSER FIELD\n         MVC   VOLSER+1(L'VOLSER-1),VOLSER\n         OI    FLAGS,NOVOL        NO VOLSER SUPPLIED\n         B     PARMDONE           ALL DONE\n         SPACE\nDOPARSE  SR    R1,R1\n         ST    R1,PPLUWA          ZERO UWA PTR\n         SPACE\n         DROP  R4,R5,R6\n         SPACE 2\n* CALL PARSE SERVICE ROUTINE TO GET PARAMETERS\n         SPACE\n         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         SPACE\n         LTR   R15,R15            PARSE OK ?\n         BZ    PARSEOK            YES\n         SPACE\n         CH    R15,=H'4'          USER PROFILE NOPROMPT ?\n         BE    RETURN             YES - GO AWAY\n         SPACE\n         LA    R1,GFPARSE         ROUTINE ID FOR GENERAL FAIL\n         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR\n         TITLE 'DATASET INQUIRY FUNCTION                PROCESS PARMS R*\n               ETURNED BY PARSE'\n         SPACE 2\nPARSEOK  L     R5,PARSBACK        -> PDL AREA\n         USING IKJPARMD,R5\n         SPACE\n         MVI   DSNAME,C' '        BLANK OUT DSNAME FIELD\n         MVC   DSNAME+1(L'DSNAME-1),DSNAME\n         SPACE\n         TM    DSNIN+6,X'80'      DSNAME SPECIFIED ?\n         BO    GETDSN             YES\n         SPACE\n         OI    FLAGS,FILETYPE     REMEMBER WE HAVE FILE TYPE PARMS\n         MVI   DDNAME,C' '        BLANK OUT DDNAME FIELD\n         MVC   DDNAME+1(L'DDNAME-1),DDNAME\n         L     R1,DSNIN+8         -> MEMBER\n         LH    R2,DSNIN+12        MEMBER LENGTH\n         LA    R3,DDNAME          -> AREA TO MOVE TO\n         BCTR  R2,0               MINUS ONE FOR EX MVC\n         EX    R2,MOVEPARM        GET DSN\n*        MVC   0(*-*,R3),0(R1)\n         B     PARMSET            DONE WITH PARMS\n         SPACE\nGETDSN   L     R1,DSNIN           -> DSNAME\n         LH    R2,DSNIN+4         DSNAME LENGTH\n         STH   R2,DSNLEN          SAVE IT\n         LA    R3,DSNAME          -> AREA TO MOVE TO\n         BCTR  R2,0               MINUS ONE FOR EX MVC\n         EX    R2,MOVEPARM        GET DSN\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n         CLI   PARTLKY+1,0        PARTIAL KEYWORD SPECIFIED ?\n         BE    *+8                NOPE\n         OI    FLAGS,PARTIAL      YES - REMEMBER THAT\n         SPACE\n         MVI   VOLSER,C' '        BLANK OUT VOLSER FIELD\n         MVC   VOLSER+1(L'VOLSER-1),VOLSER\n         SPACE\n         OI    FLAGS,NOVOL        ASSUME NO VOLSER SPECIFIED\n         SPACE\n         TM    VOLIN+6,X'80'      IS A VOLSER PRESENT\n         BZ    CHK4GEN            NOPE\n         SPACE\n         NI    FLAGS,X'FF'-NOVOL  HAVE A VOLSER - RESET FLAG\n         SPACE\n         L     R1,VOLIN           -> VOLSER\n         LH    R2,VOLIN+4         LENGTH\n         LA    R3,VOLSER          -> AREA FOR VOLSER\n         BCTR  R2,0               MINUS ONE FOR EX\n         EX    R2,MOVEPARM\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n         B     PARMSET            DONE WITH PARMS\n         SPACE\nCHK4GEN  TM    GENIN+6,X'80'      IS A GENERATION NUMBER PRESENT\n         BZ    PARMSET            NOPE\n         OI    FLAGS,GDGDSN       REMEMBER THAT\n         LH    R1,DSNLEN          LENGTH OF DSNAME\n         LA    R1,9(,R1)          PLUS LENGTH OF .G0000V00\n         STH   R1,DSNLEN\n         L     R1,GENIN           -> GENERATION NUMBER\n         LH    R2,GENIN+4         LENGTH\n         CLI   0(R1),C'-'         RELATIVE GENERATION NUMBER ?\n         BNE   ABSGEN             NO - ABSOLUTE GENERATION NUMBER\n         LA    R3,DSNAME+1        -> DSNAME + 1\n         AH    R3,DSNIN+4         -> AFTER DSNAME + 1\n         BCTR  R2,0               MINUS ONE FOR EX\n         EX    R2,MOVEPARM\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n         LA    R3,DSNAME          -> DSNAME\n         AH    R3,DSNIN+4         -> AFTER DSNAME\n         MVI   0(R3),C'('         LEFT PAREN\n         AH    R3,GENIN+4         -> END OF GENERATION NUMBER\n         LA    R3,1(,R3)          -> AFTER GENERATION NUMBER\n         MVI   0(R3),C')'         CLOSE PAREN\n         B     PARMSET\n         SPACE\nABSGEN   LA    R3,DSNAME          -> DSNAME\n         AH    R3,DSNIN+4         -> PAST DSNAME\n         MVC   0(9,R3),=C'.G0000V00'   MOVE IN GENERATION PATTERN\n         LA    R4,4               COMPUTE OFFSET\n         SR    R4,R2              TO MOVE GEN TO\n         LA    R3,2(R4,R3)        -> SPOT TO MOVE GEN TO\n         BCTR  R2,0               MINUS ONE FOR EX\n         EX    R2,MOVEPARM\n*        MVC   0(*-*,R3),0(R1)\n         SPACE\n         LA    R3,DSNAME          -> DSNAME\n         AH    R3,DSNIN+4         -> PAST DSNAME\n         CLC   0(9,R3),=C'.G0000V00'   WAS GENERATION NUMBER ZERO ?\n         BNE   PARMSET            NO - OK\n         MVI   0(R3),C' '         BLANK OUT .G0000V00\n         MVC   1(8,R3),0(R3)\n         MVC   0(3,R3),=C'(0)'    CHANGE TO RELATIVE GENERATION\n         SPACE 2\n         DROP  R5                 FINISHED WITH PDL\n         SPACE 2\nPARMSET  IKJRLSA PARSBACK          RELEASE PARSE STORAGE\n         SPACE 2\nPARMDONE BAL   LINK,SETBUFR       SETUP I/O BUFFER\n         USING OUTRECD,OUTPTR     ESTABLISH OUTPUT BUFFER\n         TITLE 'DATASET INQUIRY FUNCTION                EXTRACT VOLUME *\n               AND UNIT FOR UNCATALOGED DATASETS'\n         TM    FLAGS,GDGDSN       GENERATION NUMBER USED ???\n         BO    DOLOCATE           USE LOCATE TO DECODE GDG NUMBER\n         SPACE\n         TM    FLAGS,NOVOL        NO VOLSER ?\n         BO    GENLOC             DO GENERIC LOCATE FIRST\n         SPACE\n         TM    FLAGS,FILETYPE     FILE TYPE INPUT ?\n         BO    SRCHFILE           LOOK UP FILE IN TIOT\n         SPACE 2\n* LOOK UP UCB FOR GIVEN VOLSER TO GET DEVICE TYPE\n         SPACE\n         MVC   LINE(6),=C'DSN = '          LABEL\n         MVC   LINE+6(L'DSNAME),DSNAME     DISPLAY DSNAME\n         LH    R1,DSNLEN                   LENGTH OF DSNAME\n         LA    OUTPTR,LINE+6(R1)           -> END OF LINE\n         BAL   LINK,NEWLINE                NEXT LINE\n         SPACE\n         L     R3,CVTPTR          -> CVT\n         USING CVTMAP,R3\n         XC    IOSVSWRK,IOSVSWRK  INITIALIZE SCAN WORKAREA     10/16/90\n         LA    R1,IOSVSWRK        BUILD IOSVSUCB PARM LIST     10/16/90\n         ST    R1,IOSVSPRM             \"                       10/16/90\n         LA    R1,IOSVSDEV             \"                       10/16/90\n         ST    R1,IOSVSPRM+4           \"                       10/16/90\n         LA    R1,IOSVSUCB             \"                       10/16/90\n         ST    R1,IOSVSPRM+8           \"                       10/16/90\n         OI    IOSVSPRM+8,X'80'        \"                       10/16/90\n         MVI   IOSVSDEV,UCB3DACC  DIRECT ACCESS ONLY           10/16/90\nUCBLOOP  L     R15,CVTUCBSC       -> IOSVSUCB UCB SCAN RTN     10/16/90\n         LA    R1,IOSVSPRM        -> IOSVSUCB PARAMETER LIST   10/16/90\n         BALR  R14,R15            GET POINTER TO NEXT UCB      10/16/90\n         LTR   R15,R15            ANYMORE UCBS?                10/16/90\n         BNZ   OBTN4              NO, VOLUME NOT MOUNTED       10/16/90\n         L     R2,IOSVSUCB        POINT TO UCB                 10/16/90\n         USING UCB,R2                  \"                       10/16/90\n         AGO   .BYPASS1                                        10/16/90\n         L     R3,CVTILK2         -> UCB ADDR TABLE\n         DROP  R3\n         SR    R2,R2\n         USING UCB,R2\nUCBLOOP  ICM   R2,B'0011',0(R3)   -> UCB\n         LA    R3,2(,R3)          -> NEXT UCB PTR\n         BZ    UCBLOOP            NEXT UCB IF NULL\n         CL    R2,=X'0000FFFF'    END OF TABLE ?\n         BE    OBTN4              YES - VOLUME NOT MOUNTED\n         TM    UCBTBYT3,UCB3DACC  DASD ?\n         BNO   UCBLOOP            NO\n.BYPASS1 ANOP  ,                                               10/16/90\n         CLC   VOLSER,UCBVOLI     THIS THE VOLUME ?\n         BNE   UCBLOOP            NO\n         DROP  R3                 FORGET ABOUT CVT             10/16/90\n         SPACE\nGOTUCB   MVC   DEVTYPE,UCBTYP+3   SAVE DEVICE TYPE\n         L     R0,UCBTYP          DEVICE CODE\n         LR    R1,OUTPTR          -> OUTPUT AREA\n         BAL   LINK,UCBTRAN       GET DEVICE NAME\n         MVI   1(R1),C'-'         JUST FOR LOOKS\n         MVC   3(6,R1),VOLSER     WRITE OUT VOLSER\n         LA    OUTPTR,9(R1)       -> PAST\n         BAL   LINK,NEWLINE       WRITE OUT LINE\n         B     OBTAIN             AND GO FETCH DSCB\n         EJECT\n* LOOK UP DDNAME IN TIOT TO GET DSNAME AND VOLSER\n         SPACE\nSRCHFILE L     R1,CVTPTR          -> CVT\n         USING CVTMAP,R1\n         L     R1,CVTTCBP         -> TCB WORDS\n         L     R1,4(,R1)          -> TCB\n         USING TCB,R1\n         L     R1,TCBTIO          -> TIOT\n         USING TIOT,R1\n         LA    R3,TIOENTRY        -> FIRST DD ENTRY\n         DROP  R1\n         USING TIOENTRY,R3\n         SR    R2,R2              CLEAR TIOT LENGTH REGISTER\n         SPACE\nDDLOOP   AR    R3,R2              -> NEXT DD ENTRY\n         ICM   R2,1,TIOELNGH      LENGTH OF DD ENTRY\n         BZ    NOFILE             YES - END OF TIOT\n         CLC   DDNAME,TIOEDDNM    THIS OUR DDNAME ?\n         BNE   DDLOOP             NOPE - LOOP\nGOTDD    ICM   R2,B'0111',TIOEJFCB   -> JFCB\n         BZ    BADFILE            NO JFCB\n         MVC   DSNAME,16(R2)      GET DSNAME OUT OF JFCB\n         LA    R1,L'DSNAME        -> STRING\n         LA    R0,DSNAME          STRING LENGTH\n         BAL   R14,CHOPSTR        DETERMINE LENGTH OF DSNAME\n         STH   R0,DSNLEN          SAVE IT\n         SPACE\n         ICM   R2,B'0111',TIOEFSRT   -> UCB\n         BZ    BADFILE            NO UCB - ERROR\n         USING UCB,R2\n         SPACE\n         TM    UCBTBYT3,UCB3DACC  DASD ?\n         BNO   BADFILE            NO - INVALID\n         SPACE\n         MVC   VOLSER,UCBVOLI     GET VOLSER\n         MVC   DEVTYPE,UCBTYP+3   SAVE DEVICE TYPE\n         SPACE\n         MVC   LINE(7),=C'FILE = '         LABEL\n         MVC   LINE+7(8),DDNAME            DISPLAY FILE NAME\n         MVC   LINE+21(6),=C'DSN = '       LABEL\n         MVC   LINE+27(L'DSNAME),DSNAME    DISPLAY DSNAME\n         LA    OUTPTR,LINE+27+L'DSNAME     -> END OF LINE\n         BAL   LINK,NEWLINE                NEXT LINE\n         SPACE\n         L     R0,UCBTYP          DEVICE CODE\n         LR    R1,OUTPTR          -> OUTPUT AREA\n         BAL   LINK,UCBTRAN       GET DEVICE NAME\n         MVI   1(R1),C'-'         JUST FOR LOOKS\n         MVC   3(6,R1),VOLSER     WRITE OUT VOLSER\n         TM    UCBJBNR,UCBVRDEV   VIO UCB ?\n         BNO   *+10               NO\n         MVC   3(6,R1),=C'(VIO) ' YES - FLAG VOLUME AS VIO VOLUME\n         LA    OUTPTR,9(R1)       -> PAST\n         BAL   LINK,NEWLINE       WRITE OUT LINE\n         B     OBTAIN             AND GO FETCH DSCB\n         TITLE 'DATASET INQUIRY FUNCTION                GET CATALOG INF*\n               ORMATION'\n* DO A GENERIC LOCATE TO FULLY QUALIFY DATASET\n         SPACE\nGENLOC   L     R0,GLWKSIZE        SIZE OF GENERIC LOCATE WORKAREA\n         GETMAIN R,LV=(0)         GET WORK AREA FOR GENERIC LOCATE\n         ST    R1,GENWKA          WORK AREA PTR\n         ST    R1,@GENWKA         KEEP OUR OWN COPY\n         MVC   0(4,R1),GLWKHDR    HEADER FOR WORKAREA\n         SPACE\n         MVC   GENLPARM(4),GENLFLAG   FLAGS INDICATING FUNCTION\n         LA    R2,DSNLENC         -> GENERIC KEY\n         ST    R2,GENDSN\n         XC    GENCAT,GENCAT      NO CATALOG DSNAME SUPPLIED\n         XC    GENX1,GENX1        ZERO UNUSED WORDS\n         SPACE\n         LH    R3,DSNLEN          LENGTH OF DSNAME\n         TM    FLAGS,PARTIAL      PARTIAL DSNAME SUPPLIED ?\n         BO    PARTDSN            YES - DON'T ADD PERIOD TO END\n         LA    R2,DSNAME(R3)      -> PAST END OF DSNAME\n         MVI   0(R2),C'.'         ADD TRAILING PERIOD\n         LA    R3,1(R3)           BUMP LENGTH\nPARTDSN  STC   R3,DSNLENC         STORE IT FOR GENLOC\n         SPACE\n         LOCATE GENLPARM          DO GENERIC LOCATE\n         SPACE\n         OI    FLAGS,SINGDSN      ASSUME SINGLE DSNAME RETURNED\n         L     R8,@GENWKA         -> GENLOC WORK AREA\n         LTR   R15,R15            GENERIC LOCATE OK ?\n         BZ    GENLOCOK           YES - USE IT\n         SPACE\n         CH    R15,=Y(X'2C')      WORK AREA FILLED UP ?\n         BNE   BADGENL            NO\n         SPACE\n         MVC   LINE(L'FILLMSG),FILLMSG    OUTPUT\n         LA    OUTPTR,LINE+L'FILLMSG      ERROR\n         BAL   LINK,NEWLINE               MESSAGE\n         LH    R2,GLWKMAXR        SET LENGTH USED SINCE IT'S NOT\n         STH   R2,2(,R8)          RETURNED BY THIS PARTICULAR RC\n         SPACE\nGENLOCOK LH    R2,2(,R8)          NUMBER OF BYTES USED OF WORKAREA\n         CH    R2,=Y(4+(45*2))    MORE THAN ONE DSN RETURNED ??\n         BNH   ONEDSN             NOPE\n         SPACE\n* MORE THAN ONE DATASET RETURNED - SO JUST LIST THEM OUT\n         SPACE\n         NI    FLAGS,X'FF'-SINGDSN   RESET FLAG\n         LA    R3,4(R8)           -> START OF DSNAMES\n         LA    R4,45              INCREMENT\n         LA    R5,0(R2,R8)        -> END OF DSNAMES\n         BCTR  R5,0               -1 SO DO NOT TRIP ON EQUAL\n         SPACE\nDSNLOOP  DS    0H                 LOOP WRITING OUT DSNAMES\n         SPACE\n         CLI   0(R3),C'0'         CATALOG ENTRY ?\n         BNE   GETTYP             NO - OTHER\n         MVC   LINE(9),=C'CATALOG: '     YES - LABEL IT\n         MVC   LINE+9(44),1(R3)          MOVE IN CATALOG NAME\n         LA    OUTPTR,LINE+53            -> PAST\n         LA    LINK,NXTDSN               RETURN ADDR\n         B     NEWLINE                   WRITE IT OUT\n         SPACE\nGETTYP   LA    R1,TYPTABLE        -> TYPES OF ENTRIES FROM GENLOC\n         LA    R2,TYPCNT          NUMBER OF TYPES IN TABLE\nTYPLOOP  CLC   0(1,R3),0(R1)      IS THIS IT ?\n         BE    GOTTYPE            YES\n         LA    R1,1(,R1)          BUMP TO NEXT\n         BCT   R2,TYPLOOP         KEEP TRYING\n         SPACE\n         MVC   LINE(15),=CL15'  -  UNKNOWN'   TELL'EM DON'T KNOW\n         MVC   LINE(1),0(R3)      GET TYPE CHARACTER\n         B     TYPDONE\n         SPACE\nGOTTYPE  LA    R1,TYPCNT          NUMBER OF ENTRIES IN TABLE\n         SR    R1,R2              COMPUTE OFFSET\n         MH    R1,=H'15'          TO DESCRIPTION\n         LA    R1,TYPDESC(R1)     -> DESCRIPTION\n         MVC   LINE(15),0(R1)     GET IT\n         MVI   LINE+15,C' '       ADD BLANK TO SEPARATE FROM DSN\n         SPACE\nTYPDONE  MVC   LINE+16(44),1(R3)  MOVE IN DSNAME\n         LA    R1,LINE+16         -> DSNAME\n         LA    R0,44              LENGTH\n         BAL   R14,CHOPSTR        TRIM TRAILING BLANKS\n         LR    OUTPTR,R1          -> PAST\n         BAL   LINK,NEWLINE       WRITE IT OUT\nNXTDSN   BXLE  R3,R4,DSNLOOP      LOOP\n         SPACE\n         BAL   LINK,ENDLINE       FORCE A WRITE\n         B     GENLDONE           ALL DONE\n         SPACE 2\n* JUST ONE DATASET (OR NONE) RETURNED - SET UP TO DO A NORMAL LOCATE\n         SPACE\nONEDSN   CLI   49(R8),C' '        ANY DSNAME RETURNED ?\n         BH    GOTADSN            YES - GET IT\n         SPACE\nBADGENL  LH    R3,DSNLEN          LENGTH OF DSNAME\n         LA    R2,DSNAME(R3)      -> PAST END OF DSNAME\n         MVI   0(R2),C' '         BLANK TRAILING PERIOD\n         B     GENLDONE           DSN ALL SET NOW FOR NORMAL LOCATE\n         SPACE\nGOTADSN  MVC   DSNAME,50(R8)      YES - GET THE DSNAME\n         SPACE 2\nGENLDONE L     R0,GLWKSIZE        SIZE OF GENLOC WORKAREA\n         FREEMAIN R,LV=(0),A=(8)  FREE IT\n         SPACE\n         TM    FLAGS,SINGDSN      DO WE HAVE JUST ONE DSNAME ?\n         BNO   RETURN             NO - ALL DONE\n         EJECT\n* DO NORMAL LOCATE TO GET VOLUME AND DEVICE INFORMATION FOR DATASET\n         SPACE\nDOLOCATE LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         SR    R3,R3              NO CVOL PARM\n         ST    R3,CAMLSTP3\n         LA    R3,CAMAREA         -> CAMLST WORK AREA\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,NAMECAM     CAMLST NAME FLAGS\n         LOCATE CAMLST            GET THE VOLSER FOR DSN\n         LR    R2,R15             SAVE LOCATE RC\n         LR    R3,R0              SAVE POSSIBLE INDEX LEVEL\n         SPACE\n         LA    R1,DSNAME          -> STRING\n         LA    R0,L'DSNAME        LENGTH OF STRING\n         BAL   R14,CHOPSTR        DETERMINE LENGTH OF DSNAME\n         STH   R0,DSNLEN          SAVE IT\n         SPACE\n         MVC   LINE(6),=C'DSN = '          LABEL\n         MVC   LINE+6(L'DSNAME),DSNAME     DISPLAY DSNAME REGARDLESS\n         LH    R1,DSNLEN                   LENGTH OF DSNAME\n         LA    OUTPTR,LINE+6(R1)           -> END OF LINE\n         BAL   LINK,NEWLINE                NEXT LINE\n         SPACE\n         LR    R0,R3              RESTORE POSSIBLE INDEX LEVEL\n         LTR   R15,R2             LOCATE OK ??\n         BNZ   BADLOC             NOPE\n         EJECT\n* WRITE OUT CATALOG INFORMATION - VOLSERS AND DEVICE TYPES\n         SPACE\n         LH    R2,VOLCNT          NUMBER OF VOLUMES DS IS ON\n         CH    R2,=H'20'          OVER 20 ?\n         BNE   *+8                NOPE - USE IT\n         LH    R2,=H'20'          YES - USE MAX\n         SPACE\n         LA    R3,VOLENT          -> FIRST VOLUME ENTRY\n         USING CATRECD,R3\n         B     PUTDEVCD           PUT OUT DEVICE NAME FIRST\n         SPACE\nCATLOOP  C     R5,DEVCODE         DEVICE CODE CHANGED ???\n         BE    DEVCSAME           NOPE - JUST PUT OUT VOLSER\n         SPACE\nPUTDEVCD L     R0,DEVCODE         PICK UP DEVICE CODE\n         LR    R5,R0              SAVE FOR COMPARE\n         LR    R1,OUTPTR          -> OUTPUT AREA\n         BAL   LINK,UCBTRAN       GO GET DEVICE NAME\n         MVI   1(R1),C'-'         LOOKS NICE\n         LA    OUTPTR,3(R1)       -> NEXT FREE SPOT\n         SPACE\nDEVCSAME MVC   0(6,OUTPTR),CATVOL PUT OUT VOLSER\n         LA    R0,6               LENGTH OF VOLSER\n         LR    R1,OUTPTR          -> VOLSER\n         BAL   R14,CHOPSTR        TRIM EXTRA BLANKS OFF VOLSER\n         LR    OUTPTR,R1          UPDATE PTR\n         LH    R0,DSEQNUM         DATASET SEQUENCE NUMBER\n         CH    R0,=H'1'           OVER 1 ?\n         BNH   NODSEQ             NOPE\n         SPACE\n         MVI   0(OUTPTR),C'('     PAREN TO INDICATE DS SEQ NUM\n         LA    R1,1(OUTPTR)       -> POSTION FOR IT\n         BAL   LINK,INSRTNUM      GO OUTPUT NUMBER\n         MVC   0(2,R1),=C'),'     CLOSE PAREN & ADD TRAILING COMMA\n         LA    OUTPTR,2(,R1)      -> NEXT FREE SPOT\n         B     WASDSEQ            SKIP ADDING COMMA & PTR UPDATE\n         SPACE\nNODSEQ   MVI   0(OUTPTR),C','     AND A COMMA\n         LA    OUTPTR,1(OUTPTR)   -> PAST\nWASDSEQ  LA    R3,NEXTVOL         -> NEXT VOLUME ENTRY\n         BCT   R2,CATLOOP         GET NEXT VOLUME\n         SPACE\n         BCTR  OUTPTR,0           BACK UP OVER LAST COMMA\n         BAL   LINK,NEWLINE       NEXT LINE\n         SPACE 2\n         TITLE 'DATASET INQUIRY FUNCTION                GET DSCBS FOR D*\n               ATASET'\n         CLI   CAMAREA+4,UCB3DACC DASD DEVICE ???\n         BNE   TPUT               NOPE\n         SPACE\n         MVC   VOLSER,CAMAREA+6   GET THE VOLSER FROM CATALOG\n         MVC   DEVTYPE,CAMAREA+5  GET THE DEVICE TYPE FROM CATALOG\n         SPACE\n* OBTAIN ALL DSCBS FOR DATASET\n         SPACE\nOBTAIN   LA    R3,DSNAME          -> DSNAME\n         ST    R3,CAMLSTP2\n         LA    R3,VOLSER          -> VOLUME ID\n         ST    R3,CAMLSTP3\n         LA    R3,CAMAREA         -> AREA FOR F1 DSCB\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,SRCHCAM     CAMLST SEARCH FLAGS\n         OBTAIN CAMLST            GET THE DSCB FOR DATASET\n         SPACE\n         LTR   R15,R15            OBTAIN OK ???\n         BNZ   BADOBTN            NOPE\n         SPACE 2\n         TM    DS1DSORG,X'80'     ISAM DATASET ??\n         BNO   NOF2DSCB           NOPE\n         SPACE\n         LA    R3,DS1PTRDS        -> CCHHR OF FORMAT 2 DSCB\n         ST    R3,CAMLSTP2\n         LA    R3,VOLSER          -> VOLUME ID\n         ST    R3,CAMLSTP3\n         LA    R3,IECSDSF2        -> AREA FOR FORMAT 2 DSCB\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,SEEKCAM     CAMLST SEEK FLAGS\n         OBTAIN CAMLST            GET THE EXTENTS DSCB\n         SPACE\n         LTR   R15,R15            OBTAIN OK ???\n         BNZ   BADOBTN            NOPE\n         SPACE 2\nNOF2DSCB CLI   DS1NOEPV,3         DATASET OVER 3 EXTENTS ??\n         BNH   NOF3DSCB           NOPE - DON'T NEED F3 DSCB\n         SPACE 2\n         LA    R3,DS1PTRDS        -> CCHHR OF FORMAT 3 DSCB\n         TM    DS1DSORG,X'80'     ISAM DATASET ??\n         BNO   *+8                NOPE\n         LA    R3,DS2PTRDS        -> CCHHR OF FORMAT 3 DSCB\n         ST    R3,CAMLSTP2\n         LA    R3,VOLSER          -> VOLUME ID\n         ST    R3,CAMLSTP3\n         LA    R3,IECSDSF3        -> AREA FOR FORMAT 3 DSCB\n         ST    R3,CAMLSTP4\n         MVC   CAMLST,SEEKCAM     CAMLST SEEK FLAGS\n         OBTAIN CAMLST            GET THE EXTENTS DSCB\n         SPACE\n         LTR   R15,R15            OBTAIN OK ???\n         BNZ   BADOBTN            NOPE\n         SPACE\n         OI    FLAGS,HAVEF3       INDICATE F3 DSCB READ\n         SPACE\nNOF3DSCB EQU   *                  BYPASS OBTAIN FOR F3 DSCB\n         SPACE 2\n         L     @DVCT,CVTPTR       -> CVT\n         USING CVTMAP,@DVCT\n         L     @DVCT,CVTZDTAB     -> DEVICE CHAR TABLE\n         IC    R4,DEVTYPE         PICK UP LAST BYTE UCBTYPE FIELD\n         LA    R0,X'0F'           MASK\n         NR    R4,R0              BOTTOM 4 BITS UCBTYPE DEVICE FIELD\n         IC    R4,0(R4,@DVCT)     PICK UP OFFSET TO DEV ENTRY\n         AR    @DVCT,R4           -> DEVICE CHAR TABLE ENTRY\n         USING DVCT,@DVCT\n         LH    R1,DVCTRK          TRACKS PER CYLINDER\n         ST    R1,TRKCYL          FOR SPACE CALCULATION\n         ST    @DVCT,DVCTPTR      SAVE ADDRESS OF DVCT ENTRY\n         DROP  @DVCT\n         TITLE 'DATASET INQUIRY FUNCTION                GET DSORG,RECFM*\n               ,BLKSIZE,LRECL,OPTCD AND PSWD'\n         SPACE\n* DSORG\n         SPACE\n         MVC   0(8,OUTPTR),=C'DSORG **' LABEL\n         LR    R5,OUTPTR          SAVE OUTPTR\n         LA    OUTPTR,8(OUTPTR)   -> PAST\n         SR    R1,R1              CLEAR FOR INSERT\n         ICM   R1,B'1100',DS1DSORG   PICK UP DSORG\n         BZ    NODSORG               NONE\n         LA    OUTPTR,6(R5)       BACK UP PTR TO DSORG VALUE AREA\n         LA    R2,DSORGTBL        -> DSORGS\nDSORGLP  LTR   R1,R1              TEST THAT TOP BIT\n         BZ    NODSORG            ALL DONE\n         BNM   NXTDSORG           BIT NOT SET\n         MVC   0(2,OUTPTR),0(R2)  MOVE IN DSORG\n         LA    OUTPTR,2(OUTPTR)   -> NEXT SPOT\nNXTDSORG LA    R2,2(R2)           -> NEXT DSORG\n         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT\n         B     DSORGLP            AND TEST IT\nNODSORG  LA    OUTPTR,2(OUTPTR)   -> NEXT FREE SPOT\n         SPACE\n* RECFM\n         SPACE\n         MVC   0(8,OUTPTR),=C'RECFM **' LABEL\n         LR    R5,OUTPTR          SAVE OUTPTR\n         LA    OUTPTR,8(OUTPTR)   -> PAST RECFM VALUE\n         SR    R1,R1              CLEAR FOR INSERT\n         ICM   R1,B'0001',DS1RECFM   PICK UP RECFM\n         BZ    NORECFM               NONE\n         LA    OUTPTR,6(R5)       BACK UP PTR TO RECFM VALUE AREA\n         MVI   1(OUTPTR),C' '     IN CASE OF ONE-CHAR RECFM VALUE\n         LA    R2,B'11000000'     MASK\n         NR    R2,R1              GET THE RECFM F,V,U BITS\n         BZ    DORECFM            NOT ANY\n         SRL   R2,6               PUT AT BOTTOM\n         IC    R0,RECFMTBL-1(R2)  PICK UP THE CORRECT RECFM\n         STC   R0,0(,OUTPTR)      PUT IN OUTPUT LINE\n         LA    OUTPTR,1(OUTPTR)   -> PAST\nDORECFM  LA    R0,B'00111110'     MASK\n         NR    R1,R0              ZERO F,V,U RECFM BITS\n         LA    R2,RECFMTBL+3      -> REST OF RECFMS\n         SLL   R1,26              PUT IN TOP BYTE REG\nRECFMLP  LTR   R1,R1              TEST THAT TOP BIT\n         BZ    NORECFM            ALL DONE\n         BNM   NXTRECFM           BIT NOT SET\n         MVC   0(1,OUTPTR),0(R2)  MOVE IN RECFM\n         LA    OUTPTR,1(OUTPTR)   -> NEXT SPOT\nNXTRECFM LA    R2,1(R2)           -> NEXT RECFM\n         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT\n         B     RECFMLP            AND TEST IT\nNORECFM  LA    OUTPTR,2(OUTPTR)   -> NEXT AREA\n         EJECT\n         SPACE\n* BLKSIZE\n         SPACE\n         MVC   0(8,OUTPTR),=C'BLKSIZE ' LABEL\n         LA    R1,8(OUTPTR)       -> OUTPUT POSTION FOR BLKSIZE\n         SLR   R0,R0              BLKSIZE\n         ICM   R0,3,DS1BLKL            \"\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* LRECL\n         SPACE\n         MVC   0(6,OUTPTR),=C'LRECL ' LABEL\n         LA    R1,6(OUTPTR)       -> OUTPUT POSITION FOR LRECL\n         SLR   R0,R0              LRECL\n         ICM   R0,3,DS1LRECL           \"\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(,R1)      -> PAST LRECL\n         SPACE 2\n         TM    DS1DSORG+1,X'08'   A VSAM DATASET ???  (DSORG = AM)\n         BO    TPUT               YES - ALL DONE\n         SPACE 2\n* OPTCD\n         SPACE\n         CLI   DS1OPTCD,0         ANY OPTCD ??\n         BZ    NOOPTCD            NOPE\n         SPACE\n         MVC   0(6,OUTPTR),=C'OPTCD ' LABEL\n         LA    OUTPTR,6(OUTPTR)   -> PAST\n         SPACE\n         TM    DS1DSORG,X'80'     ISAM ?\n         BZ    *+12               NO\n         LA    R2,ISAMOPT         -> ISAM OPTCD TABLE\n         B     GOTAM\n         TM    DS1DSORG,X'42'     BSAM OR BPAM ?\n         BZ    *+12               NO\n         LA    R2,BSAMOPT         -> BSAM OPTCD TABLE\n         B     GOTAM\n         TM    DS1DSORG,X'20'     BDAM ?\n         BZ    NOAM               NO\n         LA    R2,BDAMOPT         -> BDAM OPTCD TABLE\n         B     GOTAM\n         SPACE\nNOAM     MVI   0(OUTPTR),C'?'     INDICATE OPTCD UNKNOWN\n         LA    OUTPTR,1(,OUTPTR)  BUMP PAST\n         SR    R4,R4\n         ICM   R4,B'1000',DS1OPTCD    PICK UP OPTCD\n         B     OPTCDHEX               PUT OUT OPTCD IN HEX\n         SPACE\nGOTAM    SR    R1,R1\n         ICM   R1,B'1000',DS1OPTCD    PICK UP OPTCD\n         LR    R4,R1              SAVE OPTCD FOR LATER CHECK\n         ICM   R0,B'1000',0(R2)   SIGNIFICANT BIT MASK\n         NR    R1,R0              KEEP JUST BITS THAT WE KNOW ABOUT\nOPTCDLP  LTR   R1,R1              TEST THAT TOP BIT\n         BZ    OPTCDCHK           ALL DONE\n         BNM   NXTOPTCD           BIT NOT SET\n         MVC   0(1,OUTPTR),1(R2)  MOVE IN OPTCD\n         LA    OUTPTR,1(OUTPTR)   -> NEXT SPOT\nNXTOPTCD LA    R2,1(R2)           -> NEXT OPTCD\n         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT\n         B     OPTCDLP            AND TEST IT\n         SPACE 2\nOPTCDCHK SR    R3,R3              LOAD R3 WITH\n         ICM   R3,B'1000',=X'FF'  A ONE'S COMPLEMENT MASK\n         XR    R3,R0              ONE'S COMPLEMENT OF OPTCD BIT MASK\n         NR    R3,R4              LEAVE JUST UN-INTERPETED BITS\n         BZ    OPTCDONE           ALL BITS INTERPETED\nOPTCDHEX LA    OUTPTR,1(OUTPTR)   SKIP A SPACE\n         MVC   0(3,OUTPTR),=C'(X'''      INDICATE HEX CONSTANT\n         STCM  R4,B'1000',4(OUTPTR)      PUT DOWN OPTCD\n         UNPK  3(1,OUTPTR),4(1,OUTPTR)   REVERSE BYTE ON LEFT\n         NC    3(2,OUTPTR),HEXMASK       PUT WITHIN RANGE OF TR\n         TR    3(2,OUTPTR),HEXTABLE      CONVERT TO HEX PRINTABLE\n         MVC   5(2,OUTPTR),=C''')'       CLOSE QUOTE AND PAREN\n         LA    OUTPTR,7(OUTPTR)   -> PAST\n         SPACE\nOPTCDONE LA    OUTPTR,2(OUTPTR)\n         SPACE\nNOOPTCD  DS    0H                 DONE WITH OPTCD\n         SPACE\n* PSWD\n         SPACE\n         TM    DS1DSIND,DS1IND10  DATASET PROTECTED ?\n         BZ    TESTRACF           NOPE - CHECK FOR RACF DEFINED\n         SPACE\n         MVC   0(4,OUTPTR),=C'PSWD'\n         TM    DS1DSIND,DS1IND04  R/W OR JUST WRITE ?\n         BZ    PSWDRW             ITS R/W\n         MVI   5(OUTPTR),C'W'\n         LA    OUTPTR,6(OUTPTR)\n         B     TESTRACF\nPSWDRW   MVC   5(3,OUTPTR),=C'R/W'\n         LA    OUTPTR,8(OUTPTR)\n         SPACE\nTESTRACF TM    DS1DSIND,DS1IND40  DATASET DEFINED TO RACF ?\n         BZ    PSWDONE            NOPE\n         TM    DS1DSIND,DS1IND10  DID DATASET HAVE A PSWD ?\n         BO    PSWDLABL           YES - HAVE A LABEL\n         MVC   0(9,OUTPTR),=C'PSWD RACF'\n         LA    OUTPTR,9(OUTPTR)   -> NEXT AREA\n         B     PSWDONE\nPSWDLABL MVC   0(5,OUTPTR),=C',RACF' ADD RACF INDICATOR\n         LA    OUTPTR,5(OUTPTR)   -> NEXT AREA\n         SPACE 2\nPSWDONE  BAL   LINK,NEWLINE       NEXT LINE\n         TITLE 'DATASET INQUIRY FUNCTION                GET CREATE DATE*\n               ,EXPIRE DATE,KEYLEN,RKP AND # EXTENTS'\n         SPACE\n* CREATION DATE\n         SPACE\n         MVC  0(2,OUTPTR),=C'C-'  LABEL\n         LA   R0,2(OUTPTR)        -> CREATE DATE VALUE POSTION\n         LA   OUTPTR,12(OUTPTR)   -> PAST CREATE DATE POSITION\n         LA   R1,DS1CREDT         -> CREATE DATE\n         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT\n         SPACE\n* EXPIRATION DATE\n         SPACE\n         OC   DS1EXPDT,DS1EXPDT   ANY EXPIRATION DATE ?\n         BZ   NOEXPDT             NO - SKIP IT\n         SPACE\n         MVC  0(2,OUTPTR),=C'E-'  LABEL\n         LA   R0,2(OUTPTR)        -> EXPIRATION DATE VALUE POSTION\n         LA   OUTPTR,12(OUTPTR)   -> PAST EXPIRATION DATE POSITION\n         LA   R1,DS1EXPDT         -> EXPIRATION DATE\n         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT\nNOEXPDT  EQU  *\n         SPACE\n* KEYLEN\n         SPACE\n         MVC   0(7,OUTPTR),=C'KEYLEN ' LABEL\n         LA    R1,7(OUTPTR)       -> OUTPUT POSTION FOR KEYLEN\n         SR    R0,R0              CLEAR FOR INSERT\n         IC    R0,DS1KEYL         KEYLEN\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* RKP\n         SPACE\n         MVC   0(4,OUTPTR),=C'RKP ' LABEL\n         LA    R1,4(OUTPTR)       -> OUTPUT POSITION FOR RKP\n         SR    R0,R0              CLEAR FOR INSERT\n         ICM   R0,B'0011',DS1RKP  RKP\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* NUMBER OF EXTENTS\n         SPACE\n         MVC   0(6,OUTPTR),=C'#EXTS ' LABEL\n         LA    R1,6(OUTPTR)       -> OUTPUT POSTION FOR #EXTENTS\n         SR    R0,R0              CLEAR FOR INSERT\n         IC    R0,DS1NOEPV        #EXTENTS\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n         CLI   DS1NOEPV,0         ZERO EXTENTS ???\n         BE    TPUT               YES - ALL DONE\n         SPACE\n         TITLE 'DATASET INQUIRY FUNCTION                CALCULATE RECOR*\n               D COUNT'\n         SPACE\n* RECORD COUNT\n         SPACE\n         TM    DS1DSORG,X'40'     DATASET PHYSICAL SEQUENTIAL ?\n         BNO   NRECDCNT           NO GO\n         IC    R1,DS1RECFM        RECFM\n         LA    R0,B'11000000'     MASK\n         NR    R1,R0              GET RECFM F,V,U BITS\n         LA    R0,B'10000000'     VALUE OF RECFM = F\n         CR    R1,R0              DATASET RECFM = F ?\n         BNE   NRECDCNT           CAN'T DO IT\n         ICM   R0,B'0011',DS1BLKL BLKSIZE ZERO ?\n         BZ    NRECDCNT           YES - BYPASS # RECDS CALCULATION\n         SPACE\n         SLR   R4,R4              ASSUME # RECDS IS ZERO\n         ICM   R0,B'0111',DS1LSTAR   LAST USED TTR ZERO ?\n         BZ    NOTBLKED              YES - GO OUTPUT \"RECDS 0\"\n         SPACE\n         L     @DVCT,DVCTPTR      PICK ADDR OF DVCT ENTRY\n         USING DVCT,@DVCT         ADDRESSABILITY\n         SR    R4,R4\n         IC    R4,DS1KEYL         KEYLENGTH\n         SLR   R1,R1              BLKSIZE\n         ICM   R1,3,DS1BLKL            \"\n         AR    R4,R1              + BLKSIZE = LOGICAL BLOCK SIZE\n         LR    R1,R4              SAVE\n         SPACE\n         TM    DVCFLAGS,DVCFTOL   APPLY TOLERANCE FACTOR ??\n         BNO   NOTOL1             NOPE\n         SPACE\n         MH    R4,DVCTOL          * TOLERANCE\n         SRA   R4,DVCTSHFT        / 512 = BLOCKLEN (EXCLUDING OVERHEAD)\n         SPACE\nNOTOL1   TM    DVCFLAGS,DVC2BOV   SPLIT OVERHEAD VALUE ?\n         BNO   SPLTOVHD           YES\n         SPACE\n         LH    R5,DVCOVHD         OVERHEAD PER BLOCK\n         AR    R5,R4              PHYSICAL BLOCK LENGTH\n         CLI   DS1KEYL,0          DATASET KEYED ?\n         BNZ   KEYOVHD            YES, DON'T ADJUST BLOCK LENGTH\n         SR    R0,R0              NEED TO TAKE OUT KEY OVERHEAD\n         IC    R0,DVCOVNK         OVERHEAD REDUCTION IF NOT KEYED\n         SR    R5,R0              PHYSICAL LENGTH OF NON-KEYED BLOCK\nKEYOVHD  SLR   R3,R3              BYTES PER TRACK\n         ICM   R3,3,DVCTRKLN           \"\n         SR    R2,R2              CLEAR FOR DIVIDE\n         DR    R2,R5              R3 = BLOCKS / TRACK\n         B     BLKSTRK            JOIN MAINLINE CODE AGAIN\n         SPACE\nSPLTOVHD EQU   *                  OVERHEAD DIFFERENT FOR LAST BLOCK\n         SR    R5,R5\n         IC    R5,DVCOVNLB        OVERHEAD IF NOT LAST BLOCK\n         AR    R5,R4              PHYSICAL BLOCK LEN IF NOT LAST BLOCK\n         SR    R6,R6\n         IC    R6,DVCOVLB         OVERHEAD IF LAST BLOCK\n         AR    R6,R1              PHYSICAL BLOCK LENGTH IF LAST BLOCK\n         CLI   DS1KEYL,0          DATASET KEYED ??\n         BNZ   KEYOVRHD           YES, DON'T ADJUST BLOCK LENGTHS\n         SR    R0,R0              NEED TO TAKE OUT KEY OVERHEAD\n         IC    R0,DVCOVNK         OVERHEAD REDUCTION IF NOT KEYED\n         SR    R5,R0              PHYSICAL BLOCK LEN IF NOT LAST BLOCK\n         SR    R6,R0              PHYSICAL BLOCK LENGTH IF LAST BLOCK\nKEYOVRHD SLR   R3,R3              BYTES PER TRACK\n         ICM   R3,3,DVCTRKLN           \"\n         SR    R3,R6              SUBTRACT LENGTH OF LAST BLOCK\n         SR    R2,R2              CLEAR FOR DIVIDE\n         DR    R2,R5              (BYTES/TRK-LENLASTBLK)  /  BLKLEN\n         LA    R1,1               ADD ONE TO\n         AR    R3,R1              ACCOUNT FOR LAST BLOCK\n         SPACE\nBLKSTRK  EQU   *                  R3 = BLKS/TRK, R5 = PHYSICAL BLKLEN\n         LR    R6,R3              SAVE BLKS/TRK FOR MAX CHECK\n         SR    R1,R1\n         ICM   R1,B'0011',DS1LSTAR   NUMBER OF TRACKS IN DATASET\n         MR    R2,R1              #TRKS  *  BLKS/TRK = #BLKS - LAST TRK\n         SR    R0,R0\n         IC    R0,DS1LSTAR+2      NUMBER OF BLOCKS ON LAST TRACK\n         CR    R0,R6              MORE THAN CAN FIT ON A TRACK ?\n         BNH   RECNUMOK           NOPE - AS IS\n         LR    R0,R6              NO SET TO MAX\n         STC   R6,DS1LSTAR+2      AND FIX TTR IN DSCB TOO\nRECNUMOK AR    R3,R0              R3 = NUMBER OF BLOCKS IN DATASET\n         LR    R4,R3              IN CASE DS IS NOT BLOCKED\n         SPACE\n         OC    DS1LRECL,DS1LRECL  LRECL ZERO ?\n         BZ    NOTBLKED           YES - DS NOT BLOCKED\n         CLC   DS1LRECL,DS1BLKL   OR EQUAL TO BLOCKSIZE ?\n         BE    NOTBLKED           YES - DS NOT BLOCKED\n         SPACE\n         BCTR  R3,0               EXCLUDE LAST BLOCK (PROBABLY SHORT)\n         SLR   R1,R1              BLKSIZE\n         ICM   R1,3,DS1BLKL            \"\n         SLR   R2,R2              LRECL\n         ICM   R2,3,DS1LRECL           \"\n         SR    R0,R0              CLEAR FOR DIVIDE\n         DR    R0,R2              NUMBER OF LOGICAL RECORDS PER BLOCK\n         MR    R0,R3              * (#BLOCKS IN DS -1) = # RECDS IN DS\n         LR    R4,R1                                  (EXCEPT LAST BLK)\n         SPACE\n         SR    R1,R1\n         IC    R1,DS1LSTAR+2      NUMBER OF BLOCKS ON LAST TRACK\n         BCTR  R1,0               EXCLUDE LAST BLOCK\n         MR    R0,R5              BYTES USED LAST TRK EXCEPT LAST BLK\n         SLR   R3,R3              BYTES ON A TRACK\n         ICM   R3,3,DVCTRKLN           \"\n         SR    R3,R1              - BYTES USED EXCEPT LAST BLOCK\n         SH    R3,DS1TRBAL        - FREE BYTES ON LAST TRACK           *\n                                  = PHYSICAL LENGTH OF LAST BLOCK\n         SPACE\n         TM    DVCFLAGS,DVC2BOV   SPLIT OVERHEAD VALUE ??\n         BO    SNGLOVHD           NOPE\n         SPACE\n         SR    R0,R0\n         IC    R0,DVCOVNLB        OVERHEAD NOT LAST BLOCK\n         SR    R3,R0              ACCOUNT FOR OVERHEAD\n         B     GOTOVHD\n         SPACE\nSNGLOVHD SH    R3,DVCOVHD         ACCOUNT FOR OVERHEAD PER BLOCK\n         SPACE\nGOTOVHD  CLI   DS1KEYL,0          DATASET KEYED ?\n         BNZ   NKEYOVHD           YES - DON'T ADJUST\n         SR    R0,R0\n         IC    R0,DVCOVNK         NOT KEYED CONSTANT\n         AR    R3,R0              ACCOUNT FOR DS NOT KEYED\nNKEYOVHD TM    DVCFLAGS,DVCFTOL   APPLY TOLERANCE FACTOR ??\n         BNO   NOTOL2             NOPE\n         SPACE\n         SLA   R3,DVCTSHFT        * 512\n         LH    R1,DVCTOL          TOLERANCE\n         SR    R2,R2              SET UP FOR DIVIDE\n         DR    R2,R1              / TOLERANCE = LAST BLOCK LOG. LENGTH\n         SPACE\nNOTOL2   SLR   R1,R1              LRECL\n         ICM   R1,3,DS1LRECL           \"\n         SR    R2,R2\n         DR    R2,R1              LOGICAL RECORDS IN LAST BLOCK\n         AR    R4,R3              ADD TO TOTAL\n         SPACE\n         DROP  @DVCT\n         SPACE\nNOTBLKED MVC   0(7,OUTPTR),=C'#RECDS '   LABEL\n         LA    R1,7(,OUTPTR)         -> OUTPUT AREA FOR #RECDS\n         LR    R0,R4                 NUMBER OF RECORDS IN DATASET\n         BAL   LINK,INSRTNUM         OUTPUT IT\n         LA    OUTPTR,2(R1)          -> NEXT AREA\n         SPACE 2\nNRECDCNT BAL   LINK,NEWLINE       NEXT LINE\n         TITLE 'DATASET INQUIRY FUNCTION                GET ISAM STATIS*\n               TICS'\n         SPACE\n         TM    DS1DSORG,X'80'     ISAM DATASET ?\n         BNO   NOTISAM            NOPE\n         SPACE\n* PRIME RECORDS\n         SPACE\n         MVC   0(11,OUTPTR),=C'PRIME RECDS'\n         LA    R1,12(,OUTPTR)     -> OUTPUT AREA\n         L     R0,DS2PRCTR        NUM OF PRIME RECORDS\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* DELETED RECORDS\n         SPACE\n         MVC   0(9,OUTPTR),=C'DEL RECDS'\n         LA    R1,10(,OUTPTR)     -> OUTPUT AREA\n         LH    R0,DS2TAGDT        NUM OF RECORDS TAGGED FOR DELETION\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* OVERFLOW RECORDS\n         SPACE\n         MVC   0(9,OUTPTR),=C'OFL RECDS'\n         LA    R1,10(,OUTPTR)     -> OUTPUT AREA\n         LH    R0,DS2OVRCT        NUM OF RECORDS IN OVERFLOW AREA\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* OVERFLOW REFERENCE COUNT\n         SPACE\n         MVC   0(7,OUTPTR),=C'OFL REF'\n         LA    R1,8(,OUTPTR)      -> OUTPUT AREA\n         SR    R0,R0\n         ICM   R0,B'0111',DS2RORG3   NON-FIRST OVERFLOW REFERNCE COUNT\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n         BAL   LINK,NEWLINE       NEXT LINE\n         SPACE\n* INDEX SIZE IN BYTES\n         SPACE\n         MVC   0(11,OUTPTR),=C'INDEX BYTES'\n         LA    R1,12(,OUTPTR)     -> OUTPUT AREA\n         LH    R0,DS2NOBYT        NUM OF BYTES NEEDED FOR HIGH INDEX\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         EJECT\n         SPACE\n* OVERFLOW AREA REMAINING\n         SPACE\n         MVC   0(13,OUTPTR),=C'OFL AREA LEFT'\n         LA    R1,14(,OUTPTR)     -> OUTPUT AREA\n         LH    R0,DS2RORG2        NUM OF TRACKS REMAINING IN OFL AREA\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         MVC   1(3,R1),=C'TRK'    LABEL\n         LA    R1,5(R1)           -> OUTPUT AREA\n         LH    R0,DS2BYOVL        BYTES REMAINING ON OFL TRACK\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         MVC   1(5,R1),=C'BYTES'  LABEL\n         LA    OUTPTR,8(R1)       -> NEXT AREA\n         SPACE\n* FULL CYLINDER OVERFLOW AREAS\n         SPACE\n         MVC   0(11,OUTPTR),=C'CYLOFL FULL'\n         LA    R1,12(,OUTPTR)     -> OUTPUT AREA\n         LH    R0,DS2RORG1        NUM OF FULL CYLINDER OVERFLOW AREAS\n         BAL   LINK,INSRTNUM      WRITE IT OUT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n         BAL   LINK,NEWLINE       NEXT LINE\n         SPACE 2\nNOTISAM  DS    0H                 SKIP ISAM STATISTICS\n         TITLE 'DATASET INQUIRY FUNCTION                GET ASM2/SU60 U*\n               SAGE INFORMATION'\n         SPACE\n* LAST USE DATE\n         SPACE\n         CLC  ASM2UCNT,=F'0'      SHOULD BE A USE CNT OR LAST USE DATE\n         BE   NOASM2              NO USAGE STATS AVAILABLE\n         SPACE\n         MVC  0(2,OUTPTR),=C'U-'  LABEL\n         LA   R0,2(OUTPTR)        -> LAST USE DATE VALUE POSTION\n         LA   OUTPTR,12(OUTPTR)   -> PAST LAST USE DATE POSITION\n         LA   R1,ASM2UDAT         ASSUME OLD ASM2 (2.3) FORMAT\n         CLI  DS1REFD,0           IS IT ?\n         BE   *+8                 YEP\n         LA   R1,DS1REFD          NO, POINT TO ASM2 2.4 USE DATE LOC\n         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT\n         SPACE\n* MVS SU 60 CHANGE BIT\n         SPACE\n         CLC   DS1DSSN,VOLSER     IS VOLSER FIELD IN DSCB UNTOUCHED ?\n         BNE   ISASM2             NO - WE SHOULD HAVE ASM2 STATS THEN\n         TM    DS1DSIND,DS1IND02  HAS DATASET BEEN MODIFIED ?\n         BZ    ASM2DONE           NOPE - ALL DONE\n         MVC   0(7,OUTPTR),=C'CHANGED'   INDICATE DS HAS BEEN CHANGED\n         LA    OUTPTR,9(,OUTPTR)  -> PAST\n         B     ASM2DONE\nISASM2   DS    0H                 DSCB HAS ASM2 STATS\n         SPACE\n* LAST MODIFY DATE\n         SPACE\n         TM   ASM2MDAT+1,X'FE'    MODIFY DATE VALID ?\n         BNZ  NOMDATE             NO - SKIP IT\n         SPACE\n         MVC  0(2,OUTPTR),=C'M-'  LABEL\n         LA   R0,2(OUTPTR)        -> MOD DATE VALUE POSTION\n         LA   OUTPTR,12(OUTPTR)   -> PAST MOD DATE POSITION\n         LA   R1,ASM2MDAT         -> MOD DATE\n         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT\nNOMDATE  EQU  *\n         SPACE\n* USE COUNT\n         SPACE\n         MVC   0(4,OUTPTR),=C'USE ' LABEL\n         LA    R1,4(OUTPTR)       -> OUTPUT POSTION FOR USE COUNT\n         L     R0,ASM2UCNT        ASSUME OLD ASM2 (2.3) FORMAT\n         CLI   DS1REFD,0          IS IT ?\n         BE    *+10               YES\n         SR    R0,R0              NO, PICK UP NEW ASM2 2.4 USE COUNT\n         ICM   R0,B'0111',ASM2USEC\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         SPACE\n* MODIFYING JOBNAME\n         SPACE\n         TM   ASM2MDAT+1,X'FE'    MODIFY DATE VALID ?\n         BNZ  ASM2DONE            INVALID - NO MODIFYING JOB\n         SPACE\n         MVC   0(5,OUTPTR),=C'USER '  LABEL\n         MVC   5(8,OUTPTR),ASM2MJOB   MODIFYING JOBNAME\n         LA    OUTPTR,15(OUTPTR)  -> NEXT AREA\n         SPACE 2\nASM2DONE BAL   LINK,NEWLINE       NEXT LINE\n         SPACE\nNOASM2   DS    0H                 BYPASS ASM2 STATS\n         TITLE 'DATASET INQUIRY FUNCTION                GET ALLOCATION *\n               TYPE AND SECONDARY AMOUNT'\n         SPACE\n* ALLOCATION TYPE\n         SPACE\n         MVC   0(9,OUTPTR),=C'ALLOC IN ' LABEL\n         LA    OUTPTR,9(OUTPTR)   -> ALLOCATION TYPE VALUE POSITION\n         TM    DS1SCALO,B'11000000'   TEST ALLOCATION TYPE\n         BM    CHKALOC1               IN TRACKS OR BLOCKS\n         BZ    INABSTR                IN ABSOLUTE TRACK\n         MVC   0(3,OUTPTR),=C'CYL'    IN CYLINDERS\n         LA    OUTPTR,3(OUTPTR)       BUMP POINTER\n         B     CHKALOC2               CHECK THE BOTTOM 4 BITS\nINABSTR  MVC   0(5,OUTPTR),=C'ABSTR'  IN ABSOLUTE TRACK\n         LA    OUTPTR,5(OUTPTR)       BUMP POINTER\n         B     CHKALOC2               CHECK NEXT SET OF BITS\nCHKALOC1 TM    DS1SCALO,B'10000000'   CHECK IF ALLOCATED IN TRACKS\n         BNO   INBLKS                 NO - IN BLOCKS\n         MVC   0(3,OUTPTR),=C'TRK'    IN TRACKS\n         LA    OUTPTR,3(OUTPTR)       BUMP POINTER\n         B     CHKALOC2               CHECK NEXT BUNCHA BITS\nINBLKS   MVC   0(3,OUTPTR),=C'BLK'    IN BLOCKS\n         LA    OUTPTR,3(OUTPTR)       BUMP POINTER\n         SPACE\nCHKALOC2 TM    DS1SCALO,B'00001000'   CONTIG ?\n         BNO   NOCONTIG               NOPE\n         MVC   0(7,OUTPTR),=C',CONTIG' SAY SO\n         LA    OUTPTR,7(OUTPTR)       BUMP POINTER\nNOCONTIG TM    DS1SCALO,B'00000100'   MAXIMUM CONTIG EXTENT ON VOL ?\n         BNO   NOMXIG                 NOPE\n         MVC   0(5,OUTPTR),=C',MXIG'  WHAT A PIG\n         LA    OUTPTR,5(OUTPTR)       BUMP POINTER\nNOMXIG   TM    DS1SCALO,B'00000010'   5 BIG ONES ??\n         BNO   NO5BIGYS               NOPE\n         MVC   0(4,OUTPTR),=C',ALX'   ANOTHER HOG\n         LA    OUTPTR,4(OUTPTR)       BUMP POINTER\nNO5BIGYS TM    DS1SCALO,B'00000001'   ROUND ?\n         BNO   NOROUND                NOPE\n         MVC   0(6,OUTPTR),=C',ROUND' YEP\n         LA    OUTPTR,6(OUTPTR)       BUMP POINTER\nNOROUND  LA    OUTPTR,2(OUTPTR)   END OF ALLOCATION TYPE BITS\n         SPACE 2\n* SECONDARY ALLOCATION\n         SPACE\n         MVC   0(4,OUTPTR),=C'SEC ' LABEL\n         LA    R1,4(OUTPTR)       -> OUTPUT POSITION FOR SEC ALLOC AMT\n         SR    R0,R0              CLEAR FOR INSERT\n         ICM   R0,B'0111',DS1SCALO+1    SEC ALLOC AMT\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         LA    OUTPTR,2(R1)       -> NEXT AREA\n         TITLE 'DATASET INQUIRY FUNCTION                GET TOTAL SPACE*\n                ALLOCATED FOR DATASET'\n         SPACE\n* TOTAL ALLOCATION\n         SPACE\n         MVC   0(6,OUTPTR),=C'TOTAL ' LABEL\n         LA    OUTPTR,6(OUTPTR)   -> PAST\n         SR    R2,R2              CLEAR TRK COUNTER\n         SR    R3,R3              CLEAR CYL COUNTER\n         SPACE\n         CLI   DS1NOEPV,0         ANY EXTENTS ?\n         BE    EXTDONE            NOPE\n         SPACE\n         LA    R4,DS1EXT1         -> 1ST 3 EXTENTS IN F1 DSCB\n         LA    R5,3               3 EXTENTS\n         BAL   LINK,ADDEXT        ADD IT UP\n         TM    FLAGS,HAVEF3       DO WE HAVE A F3 DSCB ?\n         BNO   EXTDONE            NOPE\n         SPACE\n         LA    R4,DS3EXTNT        -> 1ST 4 EXTENTS IN F3 DSCB\n         LA    R5,4               4 EXTENTS\n         BAL   LINK,ADDEXT        ADD THEM IN\n         LA    R4,DS3ADEXT        -> LAST 9 EXTENTS IN F3 DSCB\n         LA    R5,9               9 EXTENTS\n         LA    LINK,EXTDONE       FALL THRU TO ADDEXT\n         SPACE\nADDEXT   EQU   *                  LOCAL SUBROUTINE TO ADD UP EXTENTS\n         SR    R1,R1              CLEAR FOR\n         SR    R0,R0              INSERTS\n         CLI   0(R4),X'00'        EMPTY EXTENT ??\n         BE    EXTDONE            YES, FINISHED\n         ICM   R1,B'0011',6(R4)   HIGH CC\n         ICM   R0,B'0011',2(R4)   LOW  CC\n         SR    R1,R0              TOTAL CYL FOR THIS EXTENT\n         AR    R3,R1              ADD TO TOTAL\n         ICM   R1,B'0011',8(R4)   HIGH HH\n         LA    R1,1(R1)           BUMP BY ONE\n         ICM   R0,B'0011',4(R4)   LOW  HH\n         SR    R1,R0              TOTAL TRK FOR THIS EXTENT\n         AR    R2,R1              ADD TO TOTAL\n         LA    R4,10(R4)          -> NEXT EXTENT\n         BCT   R5,ADDEXT          GET REST IN THIS GROUP\n         BR    LINK               RETURN\n         SPACE 2\nEXTDONE  EQU   *                  EXIT WHEN ALL EXTENTS ADDED UP\n         LR    R1,R2              SAVE NUMBER OF TRACKS\n         M     R2,TRKCYL          CONVERT CYLINDER COUNT TO TRACKS\n         AR    R3,R1              ADD IN TRACKS FOR TOTAL SPACE IN TRKS\n         D     R2,TRKCYL          GET CYLINDERS AND TRACKS\n         SPACE\n         BAL   R5,CYLTRK          WRITE OUT AMT IN CYLS AND TRKS\n         TITLE 'DATASET INQUIRY FUNCTION                GET SPACE USED *\n               IN DATASET'\n         SPACE\n* SPACE USED\n         SPACE\n         TM    DS1DSORG,X'80'     ISAM DATASET ??\n         BO    SPCDONE            YES - SKIP\n         SPACE\n         MVC   0(5,OUTPTR),=C'USED ' LABEL\n         LA    OUTPTR,5(OUTPTR)   -> PAST\n         SR    R2,R2              CLEAR FOR INSERT\n         ICM   R2,B'0011',DS1LSTAR  TT OF LAST BLOCK WRITTEN TTR\n         CLI   DS1LSTAR+2,0       USED PART OF A TRACK ?\n         BE    EVENTRK            NO\n         LA    R2,1(R2)           YES - BUMP TRACK COUNT\nEVENTRK  SR    R3,R3              ZERO CYL AMT IN CASE TRKS ONLY\n         C     R2,TRKCYL          OVER A CYL ?\n         BL    TRKOK              NO - SKIP CYLINDER AMT\n         LR    R3,R2              BUILD 64-BIT\n         SR    R2,R2              DIVIDEND FOR DIVIDE\n         D     R2,TRKCYL          GET CYLINDERS AND TRACKS\nTRKOK    LA    R5,SPCDONE         FALL THRU TO CYLTRK SUBROUTINE\n         SPACE 2\nCYLTRK   EQU   *                  LOCAL SUBR TO OUTPUT IN CYL AND TRKS\n         LTR   R3,R3              ANY CYLINDERS ?\n         BZ    TRKONLY            NOPE\n         SPACE\n         LR    R0,R3              NUMBER OF CYLINDERS\n         LR    R1,OUTPTR          -> OUTPUT POSITION FOR CYLINDER AMT\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         MVC   1(3,R1),=C'CYL'    ADD LABEL\n         LA    OUTPTR,5(R1)       -> NEXT AREA\n         SPACE\n         LTR   R2,R2              DO WE NEED TO OUTPUT TRKS ?\n         BNZ   TRKONLY            YES\n         LA    OUTPTR,1(OUTPTR)   NO - PUT 2 SPACES AFTER CYL AMT\n         BR    R5                 RETURN\n         SPACE\nTRKONLY  LR    R0,R2              NUMBER OF TRACKS\n         LR    R1,OUTPTR          -> OUTPUT POSITION FOR TRACK AMT\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         MVC   1(3,R1),=C'TRK'    ADD LABEL\n         LA    OUTPTR,6(R1)       -> NEXT AREA\n         BR    R5                 RETURN\n         SPACE\nSPCDONE  EQU   *\n         TITLE 'DATASET INQUIRY FUNCTION                DESCRIBE EXTENT*\n               S OF DATASET'\n         SPACE\n* EXTENT DESCRIPTIONS\n         SPACE\n         BAL   LINK,NEWLINE       ADVANCE TO NEXT LINE\n         SPACE\n         MVC   LINE(L'XTENTHDR),XTENTHDR  MOVE IN HEADER LINE\n         LA    OUTPTR,LINE+L'XTENTHDR     -> END OF LINE\n         BAL   LINK,NEWLINE               NEXT LINE\n         SPACE\n         LA    R4,DS1EXT1         -> 1ST 3 EXTENTS IN F1 DSCB\n         LA    R5,3               3 EXTENTS\n         BAL   R6,WRTEXT          WRITE THEM OUT\n         TM    FLAGS,HAVEF3       DO WE HAVE A F3 DSCB ?\n         BNO   DESCDONE           NOPE\n         SPACE\n         LA    R4,DS3EXTNT        -> 1ST 4 EXTENTS IN F3 DSCB\n         LA    R5,4               4 EXTENTS\n         BAL   R6,WRTEXT          OUTPUT THEM\n         LA    R4,DS3ADEXT        -> LAST 9 EXTENTS IN F3 DSCB\n         LA    R5,9               9 EXTENTS\n         LA    R6,DESCDONE        FALL THRU TO WRTEXT\n         SPACE\nWRTEXT   EQU   *                  LOCAL SUBR TO WRITE OUT EXTENTS\nDESCLOOP CLI   0(R4),X'00'        EMPTY EXTENT ??\n         BE    DESCDONE           YES, FINISHED\n         SPACE\n         SR    R2,R2              CLEAR FOR INSERTS\n         SPACE\n         IC    R2,1(R4)           EXTENT NUMBER\n         LA    R2,1(R2)           PUT IN RANGE 1-16\n         CVD   R2,DBLWRD          DECIMAL\n         MVC   EXTNUM,EXTMASK     EDIT MASK\n         ED    EXTNUM,DBLWRD+6    CHARACTER\n         SPACE\n         ICM   R2,B'0011',2(R4)   LOW CC\n         CVD   R2,DBLWRD          DECIMAL\n         MVC   LOWCC,EXTMASK      EDIT MASK\n         ED    LOWCC,DBLWRD+5     CHARACTER\n         SPACE\n         ICM   R2,B'0011',4(R4)   LOW HH\n         CVD   R2,DBLWRD          DECIMAL\n         OI    DBLWRD+7,X'0F'     FIX SIGN FOR UNPK\n         UNPK  LOWHH,DBLWRD+6(2)  CHARACTER\n         MVI   LOWHH,C' '         KILL LEADING ZERO\n         SPACE\n         ICM   R2,B'0011',6(R4)   HIGH CC\n         CVD   R2,DBLWRD          DECIMAL\n         MVC   HICC,EXTMASK       EDIT MASK\n         ED    HICC,DBLWRD+5      CHARACTER\n         SPACE\n         ICM   R2,B'0011',8(R4)   HIGH HH\n         CVD   R2,DBLWRD          DECIMAL\n         OI    DBLWRD+7,X'0F'     FIX SIGN FOR UNPK\n         UNPK  HIHH,DBLWRD+6(2)   CHARACTER\n         MVI   HIHH,C' '          KILL LEADING ZERO\n         SPACE\n         MVI   LOWCC,C'.'         LOOKS\n         MVI   HICC,C'-'          NICE\n         SPACE\n         SR    R1,R1              CLEAR FOR\n         SR    R0,R0              INSERTS\n         ICM   R1,B'0011',6(R4)   HIGH CC\n         ICM   R0,B'0011',2(R4)   LOW  CC\n         SR    R1,R0              TOTAL CYL FOR THIS EXTENT\n         LR    R3,R1              GET SET FOR MULTIPLY\n         M     R2,TRKCYL          CONVERT CYLINDER EXTENT TO TRACKS\n         SPACE\n         ICM   R1,B'0011',8(R4)   HIGH HH\n         LA    R1,1(R1)           BUMP BY ONE\n         ICM   R0,B'0011',4(R4)   LOW  HH\n         SR    R1,R0              TOTAL TRK FOR THIS EXTENT\n         AR    R3,R1              ADD TO CYLINDER EXTENT SPACE\n         D     R2,TRKCYL          GET CYLINDERS AND TRACKS\n         SPACE\n         LA    R1,EXTSPC          -> OUTPUT POSITION FOR SPACE DESC\n         SPACE\n         LTR   R3,R3              ANY CYLINDERS ?\n         BZ    TRKONLY2           NOPE\n         SPACE\n         LR    R0,R3              NUMBER OF CYLINDERS\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         MVC   1(3,R1),=C'CYL'    ADD LABEL\n         LA    R1,5(R1)           -> NEXT AREA\n         SPACE\n         LTR   R2,R2              DO WE NEED TO OUTPUT TRKS ?\n         BZ    NXTDESC            NO\n         SPACE\nTRKONLY2 LR    R0,R2              NUMBER OF TRACKS\n         BAL   LINK,INSRTNUM      OUTPUT IT\n         MVC   1(3,R1),=C'TRK'    ADD LABEL\n         LA    R1,4(R1)           -> NEXT AREA\n         SPACE 2\nNXTDESC  LR    OUTPTR,R1          -> END OF LINE\n         BAL   LINK,NEWLINE       NEXT LINE\n         LA    R4,10(R4)          -> NEXT EXTENT\n         BCT   R5,DESCLOOP        GET REST IN THIS GROUP\n         BR    R6                 RETURN\n         SPACE 3\nDESCDONE EQU   *                  EXIT WHEN ALL EXTENTS WRITTEN OUT\n         TITLE 'DATASET INQUIRY FUNCTION                NORMAL EXIT'\nTPUT     L     R1,@CLINE          -> CURRENT LINE\n         LA    R1,8(,R1)          -> PAST PREFIX\n         CR    R1,OUTPTR          ANYTHING ON CURRENT LINE ?\n         BE    EMPTYLIN           NOPE\n         SPACE\n         BAL   LINK,NEWLINE       WRITE THE LAST LINE\n         SPACE\nEMPTYLIN BAL   LINK,ENDLINE       FLUSH OUT BUFFER\n         SPACE\nRETURN   LA    R1,CORE            -> WORKAREA\n         LA    R0,CORESIZE        LENGTH\n         L     R13,4(,R13)        GET OLD SAVE AREA\n         SVC   10                 FREE WORKAREA\n         SPACE\n         SR    R15,R15            RETURN CODE ZERO\n         RETURN (14,12),,RC=(15)  RETURN TO CALLER\n         TITLE 'DATASET INQUIRY FUNCTION                ERROR EXITS'\n         SPACE\nBADLOC   CH    R15,=H'8'\n         BL    LOCRC\n         CH    R15,=H'20'\n         BH    LOCRC\n         B     *-4(R15)           DETERMINE RETURN CODE\n         B     LOC8\n         B     LOC12\n         B     LOC16\n         B     LOC20\n         SPACE 2\nLOC8     MVC   LINE(L'NOQUAL),NOQUAL    \"QUALIFICATION DOESN'T EXIST\"\n         LA    OUTPTR,L'NOQUAL+2(OUTPTR)\n         B     INDXLVL\n         SPACE\nLOC12    MVC   LINE(L'NEEDQUAL),NEEDQUAL  \"INSUFFICIENT QUALIFICATION\"\n         LA    OUTPTR,L'NEEDQUAL+2(OUTPTR)\n         B     INDXLVL\n         SPACE\nLOC16    MVC   LINE(L'OVERQUAL),OVERQUAL  \"TOO MUCH QUALIFICATION\"\n         LA    OUTPTR,L'OVERQUAL+2(OUTPTR)\n         B     INDXLVL\n         SPACE\nINDXLVL  LR    R2,R0                      SAVE R0\n         BAL   LINK,NEWLINE               NEXT LINE\n         MVC   LINE(L'INDXMSG),INDXMSG    \"INDEX LEVEL \"\n         LA    R1,LINE+L'INDXMSG          -> AREA FOR LEVEL NUM\n         LR    R0,R2                      INDEX LEVEL NUMBER\n         BAL   LINK,INSRTNUM\n         LA    OUTPTR,2(R1)               -> PAST\n         B     TPUT\n         SPACE\nLOC20    MVC   LINE(L'BADDSN),BADDSN    \"INVALID DSNAME\"\n         LA    OUTPTR,L'BADDSN+2(OUTPTR)\n         B     TPUT\n         SPACE\nLOCRC    MVC   LINE(L'LOCHDR),LOCHDR    \"LOCATE RETURN CODE XX\"\n         MVC   LINE+L'LOCHDR(L'RCMSG),RCMSG\n         LR    R0,R15                     RETURN CODE\n         LA    R1,LINE+L'LOCHDR+L'RCMSG   -> OUTPUT AREA\n         BAL   LINK,INSRTNUM\n         LA    OUTPTR,2(R1)               -> PAST\n         B     TPUT\n         EJECT\nBADOBTN  CH    R15,=H'4'\n         BL    OBTNRC\n         CH    R15,=H'12'\n         BH    OBTNRC\n         B     *(R15)             DETERMINE RETURN CODE\n         B     OBTN4\n         B     OBTN8\n         B     OBTN12\n         SPACE 2\nOBTN4    MVC   LINE(L'BADVOL1),BADVOL1  \"VOLUME \"\n         MVC   LINE+L'BADVOL1(L'VOLSER),VOLSER\n         LA    R1,LINE+L'BADVOL1        -> VOLSER STRING\n         LA    R0,L'VOLSER              LENGTH\n         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS\n         LR    OUTPTR,R1                -> PAST VOLSER\n         MVC   LINE(L'BADVOL2),BADVOL2  \" NOT MOUNTED\"\n         LA    OUTPTR,LINE+L'BADVOL2    -> PAST\n         B     TPUT\n         SPACE\nOBTN8    MVC   LINE(L'BADDS),BADDS      \"DATASET DOES NOT EXIST\"\n         LA    OUTPTR,L'BADDS+2(OUTPTR)\n         B     TPUT\n         SPACE\nOBTN12   MVC   LINE(L'VTOCERR),VTOCERR  \"I/O ERROR ON VTOC\"\n         LA    OUTPTR,L'VTOCERR+2(OUTPTR)\n         B     TPUT\n         SPACE\nOBTNRC   MVC   LINE(L'OBTNHDR),OBTNHDR  \"OBTAIN RETURN CODE XX\"\n         MVC   LINE+L'OBTNHDR(L'RCMSG),RCMSG\n         LR    R0,R15                      RETURN CODE\n         LA    R1,LINE+L'OBTNHDR+L'RCMSG   -> OUTPUT AREA\n         BAL   LINK,INSRTNUM\n         LA    OUTPTR,2(R1)                -> PAST\n         B     TPUT\n         EJECT\nNOFILE   MVC   LINE(L'NOFILE1),NOFILE1  \"FILE \"\n         MVC   LINE+L'NOFILE1(L'DDNAME),DDNAME\n         LA    R1,LINE+L'NOFILE1        -> DDNAME STRING\n         LA    R0,L'DDNAME              LENGTH\n         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS\n         LR    OUTPTR,R1                -> PAST DDNAME\n         MVC   LINE(L'NOFILE2),NOFILE2  \" NOT FOUND\"\n         LA    OUTPTR,LINE+L'NOFILE2    -> PAST\n         B     TPUT\n         SPACE 2\nBADFILE  MVC   LINE(L'BADFILE1),BADFILE1 \"FILE \"\n         MVC   LINE+L'BADFILE1(L'DDNAME),DDNAME\n         LA    R1,LINE+L'BADFILE1       -> DDNAME STRING\n         LA    R0,L'DDNAME              LENGTH\n         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS\n         LR    OUTPTR,R1                -> PAST DDNAME\n         MVC   LINE(L'BADFILE2),BADFILE2 \" IS NOT VALID FOR DD\"\n         LA    OUTPTR,LINE+L'BADFILE2   -> PAST\n         B     TPUT\n         EJECT\nGNRLFAIL DS    0H                 CALL GENERAL FAIL\n         SPACE\n         XC    GFPARMS(GFLENGF),GFPARMS    INIT GENERAL FAIL PARM LIST\n         SPACE\n         ST    R15,GFRCODE        RETURN CODE IN PARM LIST\n         STH   R1,GFCALLID        FAILING ROUTINE ID\n         L     R1,4(,R13)         -> PREV SAVE AREA\n         L     R1,24(,R1)         REG 1 IN PREV SAVE AREA (-> CPPL)\n         ST    R1,GFCPPLP         -> CPPL FOR GENRL FAIL\n         LA    R1,DSINFO+5        -> PROGRAM NAME\n         ST    R1,GFPGMNP         FOR ERROR MSG\n         LA    R1,6               LENGTH OF NAME\n         STH   R1,GFPGMNL         FOR GENERAL FAIL\n         SPACE\n         LA    R1,ECB             -> DUMMY ECB\n         ST    R1,GFECBP          FOR GENERAL FAIL TO GIVE TO PUTLINE\n         SR    R1,R1\n         ST    R1,ECB             CLEAR ECB\n         SPACE\n         LA    R1,GFPARMS         -> GENERAL FAIL PARMS\n         ST    R1,GFPARMP         ADDR LIST FOR LINK\n         SPACE\n         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  DIAGNOSE RETURN CODE\n         SPACE\n         LTR   R15,R15            GENERAL FAIL EXECUTE OK ?\n         BZ    RETURN\n         SPACE 2\n         ABEND 100,DUMP           WHY ?\n         TITLE 'DATASET INQUIRY FUNCTION                SUBROUTINES'\n         SPACE\n*\n*  INPUT -  R0 = BINARY NUMBER\n*           R1 -> OUTPUT AREA\n*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH COMMA(S) AND LEADING\n*           MINUS SIGN (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR\n*           NUMBER AND R1 WILL POINT PAST THE NUMBER UPON RETURN.\n*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN\n*           THE AREA \"DBLWRD\" AND USING \"INSRTPAK\" ENTRY.\n*\nINSRTNUM CVD   R0,DBLWRD          GET DECIMAL\nINSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS\n         LR    R3,R1              PTR TO OUTPUT AREA\n         SPACE\n         MVC   EDITWK,EDITPAT     P'ZZZ,ZZZ,ZZZ,ZZZ,ZZ9'\n         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT\n         EDMK  EDITWK,DBLWRD      FORMAT NUMBER\n         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN\n         BCTR  R1,0               CHAR BEFORE SIG DIGIT\n         MVI   0(R1),C'-'         LEADING MINUS SIGN\n         SPACE\nINSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT\n         SR    R2,R1              LENGTH TO MOVE - 1\n         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA\n         SPACE\n         LA    R0,1(R2)           LENGTH OF NUMBER\n         LA    R1,1(R2,R3)        -> PAST NUMBER\n         SPACE\n         LM    R2,R3,28(R13)      RESTORE REGISTERS\n         BR    LINK               RETURN\n         SPACE 2\nINSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER\nEDITPAT  DC    4X'2020206B',X'202120'  EDIT PATTERN\n         EJECT\n         SPACE\n*\n*  INPUT -  OUTPTR -> END OF CURRENT OUTPUT LINE\n*\n*  OUTPUT - OUTPTR IS UPDATED TO POINT TO NEXT FREE OUTPUT AREA.\n*           POINTERS ARE SET UP FOR THE PUTLINE SERVICE ROUTINE.\n*           IF IOAREA IS FULL THEN IT IS WRITTEN OUT.\n*\n*  ENTRY  - ENDLINE ENTRY POINT FLUSHES IO BUFFER WITHOUT\n*           WRITING A LINE.\n*\n* USES   - @CLINE  ->  START OF CURRENT LINE\n*          @PLINE  ->  START OF PREVIOUS LINE\n*\n         SPACE\nNEWLINE  DS    0H                 ADVANCE TO NEXT OUTPUT LINE\n         SPACE\n         STM   R2,R3,SAVEREG      SAVE REGISTERS\n         SPACE\n         LA    OUTPTR,0(,OUTPTR)  CLEAR HIGH BYTE\n         LR    R3,OUTPTR          -> START OF NEXT LINE\n         L     R2,@CLINE          -> START OF CURRENT LINE\n         ST    R3,0(,R2)          CHAIN TO NEXT LINE\n         SPACE\n         SR    R3,R2              LENGTH OF CURRENT LINE\n         SH    R3,=H'4'           MINUS LENGTH OF CHAIN WORD\n         STH   R3,4(,R2)          STORE LENGTH FOR PUTLINE\n         SR    R3,R3              CLEAR\n         STH   R3,6(,R2)          ZERO OFFSET VALUE\n         SPACE\n         ST    OUTPTR,@CLINE      SAVE PTR TO CURRENT LINE\n         ST    R2,@PLINE          SAVE PTR TO PREVIOUS LINE\n         LA    OUTPTR,8(,OUTPTR)  -> PAST PREFIX\n         SPACE\n         LA    R2,IOEND           -> END OF IOAREA\n         CR    OUTPTR,R2          END OF AREA ?\n         BL    NLRTN              NOPE\n         B     BUFFLUSH           TIME TO WRITE I/O BUFFER\n         SPACE\nENDLINE  STM   R2,R3,SAVEREG      ENTRY POINT TO FLUSH BUFFER\n         SPACE\nBUFFLUSH TM   FLAGS,CLRSCN        CLEAR SCREEN ???\n         BNO  NOCLR               NOPE\n         SPACE\n         STLINENO LINE=1\n         NI    FLAGS,X'FF'-CLRSCN     RESET FLAG\n         SPACE\nNOCLR    LA    R1,IOAREA+8        -> START OF I/O AREA DATA\n         CR    R1,OUTPTR          ANYTHING TO WRITE ?\n         BE    NLRTN              NOPE - SKIP IT\n         SPACE\n         L     R1,@PLINE          -> LAST LINE\n         SR    R0,R0              CLEAR REGISTER\n         ST    R0,0(,R1)          ZERO LAST CHAIN WORD TO TERMINATE\n         SPACE\n         PUTLINE OUTPUT=(IOAREA,MULTLIN,DATA),MF=(E,IOPLSECT)\n         SPACE\n         LTR   R15,R15            PUTLINE OK ?\n         BZ    SETBUF2            YES - DONE\n         LA    R1,GFPUTL          PUTLINE ERROR\n         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR\n         SPACE\nSETBUFR  STM   R2,R3,SAVEREG      SETUP I/O BUFFER\nSETBUF2  SR    R3,R3              ZERO SOURCE LENGTH\n         ICM   R3,B'1000',=C' '   BLANK PAD CHAR\n         LA    R1,LIOAREA         LENGTH OF IOAREA\n         LA    R0,IOAREA          -> IO BUFFER\n         MVCL  R0,R2              INITIALIZE IT TO BLANKS\n         SPACE\n         LA    R1,IOAREA          -> OUTPUT AREA\n         ST    R1,@CLINE          SAVE ADDR FOR PUTLINE\n         LA    OUTPTR,8(,R1)      -> FIRST FREE DATA BYTE\n         SPACE\nNLRTN    LM    R2,R3,SAVEREG      RESTORE REGISTERS\n         BR    LINK               RETURN\n         EJECT\n         SPACE\n*\n* INPUT  -  R0 ->  OUTPUT AREA TO PLACE DATE IN FORM MM/DD/YY\n*           R1 ->  JULIAN DATE IN FORM YDD  (BINARY)\n* OUTPUT -  DATE IS CONVERTED TO GREGORIAN FORMAT.\n*\nCNVTDATE STM   R2,R5,28(R13)      SAVE WORK REGISTERS\n         LR    R5,R0              -> OUTPUT AREA\n         LR    R4,R1              -> YDD  (BINARY)\n         LH    R2,1(R4)           NUM DAYS SINCE JAN 1\n         TM    0(R4),X'03'        YEAR DIVISIBLE BY 4 ?\n         BNZ   LEAPBYP            NOPE\n         CH    R2,=H'60'          DOES LEAP YEAR AFFECT CUR DATE ?\n         BL    LEAPBYP            NO - BEFORE FEB 29                   C\n                                  YES - PAST FEB 29 NEEDS ADJUST\n         BCTR  R2,0               FIX FOR EXTRA DAY\n         SPACE\nLEAPBYP  LA    R1,DAYSTBLE        -> JULIAN DATE TABLE\n         LA    R3,12              NUMBER OF MONTHS\n         SPACE\nDAYSLOOP CH    R2,0(R1)           LESS THAN THIS MONTH ??\n         BH    GOTMON             NO - WE HAVE A MONTH\n         SH    R1,=H'2'           BACK UP A MONTH\n         BCT   R3,DAYSLOOP\n         SPACE\n         MVC   0(8,R5),=CL8'??/??/??'   SHOULD NEVER FALL THRU\n         B     CVTDATRT                 RETURN\n         SPACE\nGOTMON   SH    R2,0(R1)           CURRENT DAY OF MONTH\n         SR    R1,R1              CLEAR FOR INSERT\n         IC    R1,0(,R4)          PICK UP YEAR\n         SPACE\n*  R1 = YEAR   R2 = DAY   R3 = MONTH\n         SPACE\n         CVD   R1,DBLWRD          YEAR IN DECIMAL\n         ZAP   DATEWK,DBLWRD      PUT IN YEAR\n         CVD   R2,DBLWRD          DAY IN DECIMAL\n         NI    DBLWRD+7,X'F0'     ZERO SIGN NIBBLE\n         OC    DATEWK+1(2),DBLWRD+6    PUT IN DAY\n         CVD   R3,DBLWRD          MONTH IN DECIMAL\n         NI    DBLWRD+7,X'F0'     ZERO SIGN NIBBLE\n         OC    DATEWK(2),DBLWRD+6 PUT IN MONTH\n         MVC   EDITWK(10),DATEPAT MM/DD/YY\n         ED    EDITWK(10),DATEWK  FORMAT DATE\n         MVC   0(8,R5),EDITWK+2   MOVE TO OUTPUT AREA\n         SPACE\nCVTDATRT LM    R2,R5,28(R13)      RESTORE REGISTERS\n         BR    LINK               RETURN\n         SPACE 2\nDATEPAT  DC    X'40202120612020612020'  DATE PATTERN  MM/DD/YY\n         SPACE\n         EJECT\n*  FUNCTION -\n*        THIS SUBROUTINE TRANSLATES THE UCBTYP FIELD INTO A\n*        CHARACTER EBCDIC DEVICE NAME.  UPON ENTRY REGISTER ZERO\n*        SHOULD CONTAIN THE UCBTYP FIELD. THE UNIT TYPE IS PLACED\n*        AT THE ADDRESS POINTED TO BY REGISTER 1.\n*  INPUT -\n*        R0 =  UCBTYP FIELD\n*        R1 -> OUTPUT AREA TO PLACE DEVICE NAME\n*  OUTPUT -\n*        R1 -> PAST END OF EBCDIC DEVICE NAME.\n*\n*  NOTES -\n*        THE TRANSLATION IS MADE BY LOOKING UP THE UCBTYP IN THE\n*        SYSTEM DEVNAMET TABLE, WHICH IS A LOAD MODULE KEPT IN THE\n*        LINK PACK AREA.  THE ADDRESS OF THE DEVNAMET MODULE IS SAVED\n*        TO AVOID A LINK-PACK SEARCH NEXT TIME THIS MODULE IS CALLED.\n*\n*        IN XA SYSTEMS, THE DEVICE NAME TABLE NO LONGER        10/16/90\n*        EXISTS.  WHEN DEVNAMET CANNOT BE FOUND, TRANSLATION   10/16/90\n*        IS PERFORMED VIA A CALL TO IEFEB4UV (MVS UNIT         10/16/90\n*        VERIFICATION SERVICE).                                10/16/90\n*\n         SPACE 2\nUCBTRAN  STM   R14,R12,12(R13)    SAVE REGISTERS\n         LR    R2,R0              GET PARM\n         N     R2,MASKTYPE        MASK OUT IOS-USED BITS IN UCBTYPE\n         LR    R4,R1              SAVE OUTPUT AREA POINTER\n         SPACE\n         ICM   R5,B'1111',@DEVNAME DEVNAMET PREVIOUSLY FOUND?  10/16/90\n         BP    HAVNAMET           YES - SKIP LPA SEARCH        10/16/90\n         BM    UCBTRANX           PRIOR SEARCH FAILED, BRANCH  10/16/90\n         SPACE\n         L     R3,CVTPTR          GET ADDRESS OF CVT\n         L     R15,CVTLPDSR-CVT(,R3) GET ADDR OF LPDE SEARCH ROUTINE\n         LM    R0,R1,DEVNAMET     GET 'DEVNAMET' IN R0 & R1\n         BALR  R14,R15            CALL IEAVVMSR - DESTROYS R6, R8 & R9\n         B     GOTNAMET           +0 - DEVNAMET FOUND\n         MVI   3(R4),C'1'         +4 - DEVNAMET NOT FOUND\n         MVI   @DEVNAME,X'80'     REMEMBER DEVNAMET NOT THERE  10/16/90\n         B     UCBTRANX           ERROR EXIT                   10/16/90\nGOTNAMET DS    0H                 DEVNAMET LPDE FOUND\n         LR    R1,R0              GET ADDRESS OF DEVNAMET LPDE\n         L     R5,LPDENTP-LPDE(,R1) GET EP ADDRESS OF DEVNAMET\n         LA    R5,0(,R5)          CLEAR BIT0 JUST IN CASE      10/16/90\n         ST    R5,@DEVNAME        SAVE FOR FUTURE USE\nHAVNAMET L     R15,0(,R5)         GET NUMBER OF ENTRIES\n         LA    R5,4(,R5)          GET ADDRESS OF 1ST ENTRY\n         SPACE\nUCBTDEV  C     R2,8(,R5)          UCBTYP MATCH ?\n         BE    UCBTGOT            YES - UCBTYP FOUND\n         LA    R5,12(,R5)         NO - POINT TO NEXT ENTRY\n         BCT   R15,UCBTDEV        LOOP UNTIL END\n         SPACE\n         MVI   3(R4),C'2'         INDICATE ERROR TYPE\n         B     NONAMET            UCBTYP NOT FOUND\n         SPACE\nUCBTGOT  DS    0H                 UCBTYP FOUND IN DEVNAMET\n         LA    R0,8               LENGTH OF DEVICE NAME\n         LR    R1,R5              -> DEVICE NAME\n         BAL   R14,CHOPSTR        CHOP OFF TRAILING BLANKS\n         BNP   BLNKDEVC           ERROR - NAME IS ALL BLANKS\n         SPACE\n         LR    R1,R0              COPY LENGTH\n         BCTR  R1,0               ADJUST LENGTH FOR EX\n         EX    R1,MOVEDEVN        MOVE DEVICE NAME TO OUTPUT AREA\n         LA    R4,1(R1,R4)        -> PAST\n         SPACE\nUCBTRETN LR    R1,R4              PASS POINTER BACK TO CALLER\n         LM    R2,R12,28(R13)     RESTORE REGISTERS\n         BR    LINK               RETURN\n         SPACE ,                                               10/16/90\n*                                                              10/16/90\n*  DEVNAMET WAS NOT FOUND, WE MUST BE RUNNING ON AN XA         10/16/90\n*  SYSTEM.  USE IEFEB4UV TO PROCESS WHATEVER PASSES FOR        10/16/90\n*  THE DEVICE NAME TABLE THESE DAYS.                           10/16/90\n*                                                              10/16/90\nUCBTRANX XC    UNITABLE,UNITABLE  CLEAR UNIT TABLE             10/16/90\n         ST    R2,UNITABLE+8      STORE UCBTYP FIELD           10/16/90\n         LA    R5,UNITABLE        POINT TO UNIT TABLE          10/16/90\n         ST    R5,IEFEBPRM        (WILL SOON BE UNIT NAME)     10/16/90\n         LA    R1,=AL1(BIT2+BIT7,0)  POINT TO FLAGS            10/16/90\n         ST    R1,IEFEBPRM+4           \"                       10/16/90\n         OI    IEFEBPRM+4,X'80'   SET VL BIT                   10/16/90\n         LA    R1,IEFEBPRM        POINT TO PARAMETER LIST      10/16/90\n         ST    R13,IEFEBSAV+4     PROVIDE A SAVE AREA          10/16/90\n         LA    R13,IEFEBSAV            \"                       10/16/90\n         LINK  EP=IEFEB4UV        MUSH                         10/16/90\n         L     R13,4(,R13)        RESTORE OLD SAVE AREA        10/16/90\n         LTR   R15,R15            EVERYTHING OKAY?             10/16/90\n         BZ    UCBTGOT            YES, GO MOVE AND TRUNCATE    10/16/90\n         MVI   3(R4),C'4'         INDICATE TRANSLATION ERROR   10/16/90\n         B     NONAMET            AND EXIT                     10/16/90\n         SPACE ,\nBLNKDEVC MVI   3(R4),C'3'         ERROR TYPE - DEVICE ALL BLANKS\n         SPACE\nNONAMET  MVC   0(3,R4),=C'ERR'    INDICATE UCBTRAN TRANSLATION ERROR\n         MVC   4(3,R4),=C'(X'''\n         UNPK  7(9,R4),20(5,R13)  CONVERT DEVTYPE TO HEX\n         NC    7(8,R4),HEXMASK    PUT WITHIN RANGE OF TR\n         TR    7(8,R4),HEXTABLE   CONVERT TO HEX PRINTABLE\n         MVC   15(3,R4),=C''') '\n         LA    R4,17(R4)          -> PAST\n         B     UCBTRETN           RETURN\n         SPACE\nMOVEDEVN MVC   0(*-*,R4),0(R5)    MOVE DEVICE NAME TO OUTPUT AREA\n         EJECT\n         SPACE\n*\n*  INPUT -  R1 -> STRING\n*           R0 = LENGTH OF STRING\n*  OUTPUT - TRAILING BLANKS ARE CHOPPED OFF END OF STRING.\n*           R1 -> FIRST BLANK AFTER STRING\n*           R0 = NEW LENGTH OF STRING\n*           CONDITION CODE IS SET ACCORDING TO VALUE OF R0.\n*\n*  NOTES:  THIS SUBROUTINE USES R14 INSTEAD OF LINK TO ALLOW\n*          IT TO BE CALLED FROM OTHER SUBROUTINES.\n*\nCHOPSTR  LR    R15,R0             LENGTH OF STRING\n         LA    R1,0(R15,R1)       -> PAST STRING\n         BCTR  R1,0               -> LAST CHAR IN STRING\n         SPACE\nCHOPLOOP CLI   0(R1),C' '         BLANK ?\n         BH    CHOPPED            NO - HIT SIGNIFICANT CHARACTER\n         BCTR  R1,0               YES - CHOP IT\n         BCT   R15,CHOPLOOP       LOOP TILL END OF STRING\n         SPACE\nCHOPPED  LTR   R0,R15             NEW LENGTH OF STRING   (ALSO SET CC)\n         LA    R1,1(,R1)          -> FIRST BLANK AFTER STRING\n         BR    R14                RETURN\n         TITLE 'DATASET INQUIRY FUNCTION                CONSTANTS'\nMOVEPARM MVC   0(*-*,R3),0(R1)    MOVE PARAMETERS FROM PDL\n         SPACE\nNAMECAM  CAMLST NAME,0,,0         FOR LOCATE MACRO\n         ORG   NAMECAM+4          BACK UP OVER ADCONS\nSRCHCAM  CAMLST SEARCH,0,0,0      FOR OBTAIN MACRO\n         ORG   SRCHCAM+4          BACKUP OVER ADCONS\nSEEKCAM  CAMLST SEEK,0,0,0        FOR OBTAIN MACRO\n         ORG   SEEKCAM+4          BACK UP OVER ADCONS\n         SPACE\n         DC    Y(0,31,59,90,120,151,181,212,243,273,304,334) JAN-DEC\nDAYSTBLE EQU   *-2                -> DECEMBER\n         SPACE\nPCLADDR  DC    A(PARMTAB)         -> PCL\n         SPACE\n         DS    0F\nMASKTYPE DC    AL1(255,255-(UCBRR+UCBRVDEV+UCBVLPWR+UCBDVPWR),255,255) *\n                                  MASK OUT BITS USED BY IOS IN UCBTYP\nDEVNAMET DC    CL8'DEVNAMET'      MODULE NAME FOR LPDE SEARCH ROUTINE\n         SPACE\nGLWKSIZE DC    A(X'7FFC')         SIZE OF WORKAREA PASSED TO GENLOC\n         SPACE\nGLWKMAXR DC    Y((X'7FFC'-4)/45*45) LEN OF MAX POSSIBLE USED WORKAREA\n         SPACE\nGLWKHDR  DC    X'7FFC0004'        HEADER OF GENLOC WORKAREA\n         SPACE\nGENLFLAG DC    X'05'              CTGNAME+CTGGENLD = DSNAME GEN LOC\n         DC    X'20'              CTGRCATN = RETURN CATALOG NAME\n         DC    X'11'              CTGSUPLT+CTGAM0 = SUPER LOC AND\n         DC    X'00'                                NOT A CAMLST\n         EJECT\n         PRINT NOGEN\nPARMTAB  IKJPARM\nDSNIN    IKJPOSIT DSNAME,USID,PROMPT='DSNAME'\nVOLGENKY IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLSUBF,ALIAS='VOLSER'\n         IKJNAME 'GENERATION',SUBFLD=GENSUBF\nPARTLKY  IKJKEYWD\n         IKJNAME 'PARTIAL'\nVOLSUBF  IKJSUBF\nVOLIN    IKJIDENT 'VOLUME',MAXLNTH=6,PROMPT='VOLUME',                  *\n               FIRST=ALPHA,OTHER=ALPHANUM\nGENSUBF  IKJSUBF\nGENIN    IKJIDENT 'GENERATION NUMBER',MAXLNTH=5,                       *\n               FIRST=ANY,OTHER=NUMERIC,                                *\n               VALIDCK=GENCHK,                                         *\n               DEFAULT='0'\n         IKJENDP\n         SPACE\n         PRINT GEN\n         SPACE 2\nGENCHK   DS    0H\n         SAVE  (14,5),,GENCHK-&SYSDATE-&SYSTIME\n         SPACE\n         LR    R5,R15\n         USING GENCHK,R5\n         SPACE\n         L     R2,0(,R1)          -> PDE FOR GENERATION NUMBER\n         L     R3,0(,R2)          -> GENERATION NUMBER\n         SPACE\n         CLI   0(R3),C'0'         NUMERIC ?\n         BL    TESTSIGN           NO, CHECK FOR MINUS\n         CLI   0(R3),C'9'         NUMERIC ?\n         BH    BADGEN             NO, INVALID GENERATION NUMBER\n         LH    R0,4(,R2)          LENGTH OF PARAMETER\n         CH    R0,=H'4'           OVER 4 DIGITS ?\n         BH    BADGEN             YES - REJECT\n         B     OKGEN              YES, OK\n         SPACE\nTESTSIGN CLI   0(R3),C'-'         MINUS SIGN ?\n         BNE   BADGEN             NO, INVALID GENERATION NUMBER\n         SPACE\nOKGEN    SR    R15,R15\n         B     GENRTN\nBADGEN   LA    R15,4              TELL PARSE TO ISSUE ERROR MESSAGE\n         SPACE\nGENRTN   RETURN (14,5),,RC=(15)\n         SPACE\n         DROP  R5\n         SPACE\nDSORGTBL DC    C'ISPSDACX....POU GSTXTQ..AMTR....'  DSORG TABLE\nRECFMTBL DC    C'VFUTBSAM'                          RECFM TABLE\nBSAMOPT  DC    B'11111111',C'WUCHQZTJ'              OPTCD TABLES\nBDAMOPT  DC    B'11111001',C'WTEFA..R'\nISAMOPT  DC    B'11111011',C'WUMIY.LR'\nHEXTABLE DC    C'0123456789ABCDEF'                  HEX CONVERSION\nHEXMASK  DC    8X'0F'                               HEX CONVERSION\n         SPACE\nEXTMASK  DC    X'402020202120'    EDIT MASK FOR EXTENT DESCRIPTIONS\nXTENTHDR DC    C'EXTENTS  #   CCC HH     CCC HH'\n         SPACE\nTYPTABLE DC    C'ACDIPUXBGV'      TABLE OF TYPES RETURNED BY GENLOC\nTYPCNT   EQU   *-TYPTABLE         NUM OF ENTRIES\n         SPACE\nTYPDESC  DC    CL15'NON-VSAM ------'\n         DC    CL15'CLUSTER -------'\n         DC    CL15'DATA ----------'\n         DC    CL15'INDEX ---------'\n         DC    CL15'PAGE SPACE ----'\n         DC    CL15'USER CATALOG --'\n         DC    CL15'ALIAS ---------'\n         DC    CL15'GDG ENTRY------'\n         DC    CL15'ALT INDEX -----'\n         DC    CL15'VOLUME --------'\n         SPACE\nBADDSN   DC    C'*** INVALID DSNAME ***'\nFILLMSG  DC    C'32K RETURN AREA FILLED - ONLY 728 DATASETS LISTED'\nNOQUAL   DC    C'QUALIFICATION DOES NOT EXIST'\nNEEDQUAL DC    C'INSUFFICIENT QUALIFICATION'\nOVERQUAL DC    C'TOO MUCH QUALIFICATION'\nINDXMSG  DC    C'INDEX LEVEL '\nBADVOL1  DC    C'VOLUME '\nBADVOL2  DC    C' NOT MOUNTED'\nBADDS    DC    C'DATASET NOT ON VOLUME'\nVTOCERR  DC    C'*** I/O ERROR WHILE READING VTOC, NOTIFY SYSTEMS ***'\nLOCHDR   DC    C'LOCATE'\nOBTNHDR  DC    C'OBTAIN'\nRCMSG    DC    C' RETURN CODE '\nNOFILE1  DC    C'FILE '\nNOFILE2  DC    C' NOT FOUND'\nBADFILE1 EQU   NOFILE1,L'NOFILE1\nBADFILE2 DC    C' IS INVALID FOR DD'\n         SPACE 2\n         LTORG\n         SPACE 2\n         TITLE 'DATASET INQUIRY FUNCTION                EQUATES AND DSE*\n               CTS'\n         SPACE 3\nR0       EQU   0                  WORK REGISTER\nR1       EQU   1                  WORK REGISTER\nR2       EQU   2                  WORK REGISTER\nR3       EQU   3                  WORK REGISTER\nR4       EQU   4                  WORK REGISTER\nR5       EQU   5                  WORK REGISTER\nR6       EQU   6                  WORK REGISTER\nR7       EQU   7   ) DUAL         WORK REGISTER\n@DVCT    EQU   7   ) DEFINITION   BASE REGISTER FOR DVCT DSECT\nR8       EQU   8                  WORK REGISTER\nR9       EQU   9   ) DUAL         WORK REGISTER\nLINK     EQU   9   ) DEFINITION   LINKAGE REGISTER FOR SUBROUTINES\nOUTPTR   EQU   10                 POINTER TO POSITION IN OUTPUT BUFFER\nR11      EQU   11                 FIRST  BASE REGISTER FOR DSINFO CSECT\nR12      EQU   12                 SECOND BASE REGISTER FOR DSINFO CSECT\nR13      EQU   13                 BASE REGISTER FOR CORE DSECT\nR14      EQU   14                 WORK REGISTER\nR15      EQU   15                 WORK REGISTER\n         EJECT\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         SPACE 2\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         SPACE 2\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n         SPACE 2\n         EJECT\n         SPACE\n         CVT   DSECT=YES,LIST=NO\n         SPACE\n         EJECT\n         SPACE\n         IHALPDE\n         SPACE\n         EJECT\n         SPACE\n         IKJTCB DSECT=YES,LIST=NO\n         SPACE\n         EJECT\n         SPACE\nTIOT     DSECT\n         IEFTIOT1\n         SPACE\n         EJECT\n         SPACE\nUCB      DSECT\n         IEFUCBOB LIST=NO\n         EJECT\n         SPACE 2\nCORE     DSECT\n         DS    18F\n         SPACE\nDBLWRD   DS    D\nSAVEREG  DS    4F                 FOR SUBROUTINES\n@CLINE   DS    F                  -> CURRENT OUTPUT LINE\n@PLINE   DS    F                  -> PREVIOUS OUTPUT LINE\nDVCTPTR  DS    F                  -> DVCT ENTRY\nTRKCYL   DS    F                  NUMBER OF TRACKS PER CYLINDER\n@DEVNAME DS    A                  -> DEVNAMET MODULE IN LPA\n@GENWKA  DS    A                  -> ADDRESS OF GENLOC WORK AREA\nDSNLEN   DS    H                  LENGTH OF DSNAME\n         DS    H\n         SPACE\nIOPB     PUTLINE MF=L\nPPLSECT  DS    0F                 PPL AREA\n         DS    CL(PPLLEN)\nIOPLSECT DS    0F                 IOPL AREA\n         DS    CL(IOPLLEN)\nECB      DS    F                  ECB FOR PARSE\nPARSBACK DS    F                  -> PARSE PDL\nGFPARMP  DS    F                  -> GENERAL FAIL PARM BLOCK\n         IKJEFFGF                 GENERAL FAIL PARM BLOCK\n         EJECT\nCAMLST   DS    F                  FLAG BYTES INDICATING FUNC OF CAMLST\nCAMLSTP2 DS    A                  PARAMETER TWO OF CAMLST\nCAMLSTP3 DS    A                  PARAMETER THREE OF CAMLST\nCAMLSTP4 DS    A                  PARAMETER FOUR OF CAMLST\n         SPACE\n         ORG   CAMLST             REUSE SOME AREA\nGENLPARM DS    F                  FLAGS INDICATING FUNCTION\nGENDSN   DS    A                  -> GENERIC KEY\nGENCAT   DS    A                  -> CATALOG DSNAME\nGENWKA   DS    A                  -> WORK AREA\nGENX1    DS    XL12               UNUSED PTRS\n         ORG\n         SPACE\n         DS    0D\nCAMAREA  DS    CL265              CAMLST WORK AREA\n         ORG   CAMAREA\n         DS    3CL140             RESERVE SPACE FOR 3 DSCB'S\n         ORG   CAMAREA            LABELS FOR LOCATE INFO\nVOLCNT   DS    H                  VOLUME SERIAL COUNT\nVOLENT   EQU   *                  START OF VOLUME ENTRIES\n         SPACE 2\n         ORG   CAMAREA-44         BACK UP TO ELIMINATE 44 CHAR DSN\n         IECSDSL1 (1,2,3)         GEN FMT 1,2 AND 3 DSCB LABELS\n         SPACE 2\n         ORG   IECSDSL1           START OF F1 DSCB\n         DS    CL45\nASM2USEC DS    0XL3               NEW ASM2 (2.4) USE COUNT LOCATION\nASM2UDAT DS    XL3                LAST USE DATE (YDD)\nASM2MDAT DS    XL3                LAST MOD DATE (YDD)\n         DS    CL11\nASM2MJOB DS    CL8                JOBNAME/USERID LAST MODIFIED DS\n         DS    CL6\nASM2UCNT DS    XL4                USE COUNT\nASM2MTOD DS    XL2                TIME WHEN DS MODIFIED (HHMM)\n         SPACE 3\n         ORG\nDSNLENC  DS    X                  LENGTH OF DSNAME FOR GENERIC LOCATE\nDSNAME   DS    CL44               DSNAME\nDDNAME   DS    CL8                DDNAME (IF FILE TYPE CAT)\nVOLSER   DS    CL6                VOLSER OF DATASET\nEDITWK   DS    CL19               FOR INSRTNUM SUBROUTINE\nDATEWK   DS    CL4                FOR CNVTDATE SUBROUTINE\nDEVTYPE  DS    X                  LAST BYTE OF UCBTYPE FIELD\nFLAGS    DS    X\nNOVOL    EQU   X'80'              NO VOLUME SERIAL SUPPLIED\nGDGDSN   EQU   X'40'              GENERATION NUMBER SUPPLIED\nHAVEF3   EQU   X'20'              FORMAT 3 DSCB HAS BEEN READ\nCLRSCN   EQU   X'10'              CLEAR SCREEN REQUESTED\nSINGDSN  EQU   X'08'              ONE DSNAME FROM GENERIC LOCATE\nPARTIAL  EQU   X'04'              PARTIAL DSNAME SUPPLIED\nFILETYPE EQU   X'02'              FILE TYPE INPUT\n         SPACE\nIOAREA   DS    25CL80\nIOEND    EQU   *\nLIOAREA  EQU   *-IOAREA           LENGTH OF IOAREA\n         SPACE\n         DS    CL80               BUFFER JUST IN CASE\n         ORG   ,                                               10/16/90\nIEFEBPRM DS    2F                 IEFEB4UV PARAMETER LIST      10/16/90\nUNITABLE DS    CL12               IEFEB4UV UNIT TABLE          10/16/90\nIEFEBSAV DS    18F                SAVE AREA FOR IEFEB4UV       10/16/90\n         SPACE ,                                               10/16/90\nIOSVSWRK DC    100X'00'           IOSVSUCB WORKAREA            10/16/90\nIOSVSPRM DC    A(IOSVSWRK)         )                           10/16/90\n         DC    A(IOSVSDEV)         ) MUST BE KEPT TOGETHER     10/16/90\n         DC    X'80',AL3(IOSVSUCB) )                           10/16/90\nIOSVSUCB DS    A                  UCB ADDRESS                  10/16/90\nIOSVSDEV DC    AL1(UCB3DACC)      DASD DEVICE CLASS            10/16/90\n         DS    0D                 ROUND UP TO DOUBLE WORD BOUNDRY\n         SPACE\nCORESIZE EQU   *-CORE\n         SPACE 3\nCATRECD  DSECT                    FORMAT FOR A VOLUME ENTRY ON CATALOG\nDEVCODE  DS    CL4                UCB DEVICE TYPE FIELD\nCATVOL   DS    CL6                SERIAL OF A VOLUME\nDSEQNUM  DS    H                  DATASET SEQUENCE NUMBER\nNEXTVOL  EQU   *                  NEXT VOLUME ENTRY\n         SPACE 3\nOUTRECD  DSECT                    OUTPUT FORMAT\nLINE     DS    0C                 GEN PURPOSE LABEL\n         SPACE\n         DS    CL6                START OF EXTENT DESC OUTPUT LABELS\nEXTNUM   DS    CL4                EXTENT NUMBER\nLOWCC    DS    CL6                LOW CYL ADDR\nLOWHH    DS    CL3                LOW HEAD ADDR\n         DS    CL2\nHICC     DS    CL6                HIGH CYL ADDR\nHIHH     DS    CL3                HIGH HEAD ADDR\n         DS    CL4\nEXTSPC   DS    0C                 AREA FOR EXTENT SPACE DESC\n         SPACE 2\n         IHADVCT ,                DEVICE CHARACTERISTICS TABLE\n*DVCT     DSECT                    DEVICE CHARACTERISTICS TABLE\n*DVCCYL   DS    H                  NUMBER OF CYLINDERS PER VOLUME\n*DVCTRK   DS    H                  NO OF TRACKS PER CYLINDER\n*DVCTRKLN DS    H                  NO OF BYTES PER TRACK\n*DVCOVHD  DS    0H                 OVERHEAD PER BLOCK\n*DVCOVNLB DS    X                  OVERHEAD NOT LAST BLOCK\n*DVCOVLB  DS    X                  OVERHEAD LAST BLOCK\n*DVCOVNK  DS    X                  OVERHEAD DECREMENT NOT KEYED\n*DVCFLAGS DS    X                  FLAG BYTE\n*DVC2BOV  EQU   X'08'              SINGLE VALUE BLOCK OVERHEAD\n*DVCFTOL  EQU   X'01'              APPLY TOLERANCE FACTOR\n*DVCTOL   DS    H                  TOLERANCE FACTOR\n*DVCTSHFT EQU   9                  SHIFT AMOUNT FOR TOLERANCE FACTOR\n*DVCALT   DS    H                  NUMBER OF ALT TRACKS PER VOLUME\n         SPACE ,                                               10/16/90\n         IEZBITS ,                                             10/16/90\n         SPACE 3\n         END   DSINFO\n/*\n//LKED.SYSIN DD *\n  ALIAS DDX\n  NAME  DD(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOM": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x00\\xdf\\x00\\xdf\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 223, "newlines": 223, "modlines": 0, "user": "ANDREWS"}, "text": "//DOM      JOB\n//*\n//*  DOM DELETES A NON-DELETABLE MESSAGE FROM THE OPERATOR'S\n//*  CONSOLE.  IT IS THE COUNTERPART TO THE WTO COMMAND,\n//*  WHICH WRITES NON-DELETABLE MESSAGES TO BEGIN WITH.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE\n//*    COMMAND NAME YOU WILL HAVE TO CHANGE THE HELP TEXT\n//*    ACCORDINGLY.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY\n//             MACLIB='SYS1.MACLIB', <=== MACRO LIBRARY DSNAME\n//             HELP='SYS1.HELP',     <=== HELP LIBRARY\n//             MBR=DOM,              <=== MEMBER NAME\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB'   <=== LOCATION OF YOUR ASSEMBLER\n//*\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  DSN=&HELP,DISP=SHR\n//SYSUT2   DD  DSN=&HELP,DISP=SHR\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,5,RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//IEBUPDTE.SYSIN DD *\n./         ADD    NAME=DOM,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n)F FUNCTION -\n  THE 'DOM' COMMAND DELETES A MESSAGE OFF THE OPERATOR'S CONSOLE.\n\n  IT CAN BE USED TO GET RID OF MESSAGES THAT WERE PREVIOUSLY\n  ISSUED BY THE 'WTO' COMMAND.\n\n  EXAMPLE ===>  DOM  4568\n\n)X SYNTAX -\n      DOM 'message id'\n\n   REQUIRED - MESSAGE ID\n   DEFAULTS - NONE\n\n)O OPERANDS -\n   message id     -  IDENTIFIES THE MESSAGE TO BE DELETED.  THIS\n                     VALUE IS RETURNED BY THE 'WTO' COMMAND.\n./        ENDUP\n/*\n//ASM.SYSIN DD *\n         MACRO\n         REGS\n         LCLA  &A\n.LOOP    ANOP\nR&A      EQU   &A\n&A       SETA  &A+1\n         AIF   (&A LE 15).LOOP\n         MEND\n         SPACE 2\n         REGS\nLINK     EQU   R11\n         SPACE 2\nDOM      CSECT\n         SAVE  (14,12),,DOM-&SYSDATE-&SYSTIME\n         LR    R12,R15\n         USING DOM,R12\n         LR    R6,R1              SAVE PARM\n         SPACE\n         LA    R0,CORESIZE        SIZE OF CORE NEEDED\n         GETMAIN R,LV=(0)         GET IT\n         ST    R1,8(,R13)         ) CHAIN\n         ST    R13,4(,R1)         ) SAVE\n         LR    R13,R1             ) AREAS\n         USING CORE,R13\n         SPACE\n         L     R4,0(,R6)          -> CBUF\n         LH    R3,0(R4)           LENGTH OF CBUF\n         LH    R2,2(R4)           OFFSET TO PARMS IN CBUF\n         LA    R2,4(,R2)          ADJUST TO SAME SCALE AS LENGTH\n         CR    R2,R3              PARAMETERS ???\n         BL    HAVEPARM           YES\n         SPACE\n         LA    R1,NEEDID          \"MESSAGE ID REQUIRED\"\n         LA    R0,L'NEEDID        LENGTH\n         SVC   93                 ISSUE ERROR MSG\n         LA    R2,20              RETURN CODE\n         B     RETURN             QUIT\n         SPACE\nHAVEPARM SR    R3,R2              LENGTH OF PARAMETERS\n         LA    R0,L'STR\n         CR    R3,R0              > L'STR ?\n         BNH   LENOK              NOPE\n         LR    R3,R0              YES, SET TO L'STR\n         LA    R1,LARGEMSG        -> \"MESSAGE TO LARGE\"\n         LA    R0,L'LARGEMSG      LENGTH\n         SVC   93                 ISSUE ERROR MSG\n         LA    R2,20              RETURN CODE\n         B     RETURN             QUIT\nLENOK    LA    R2,0(R2,R4)        -> START OF PARMS\n         MVC   STR,ZEROS          FILL WITH ZEROS\n         LA    R1,L'STR           LENGTH OF WHOLE FIELD\n         SR    R1,R3              COMPUTE OFFSET INTO FIELD\n         LA    R1,STR(R1)         SO THAT VALUE IS RIGHT JUSTIFIED\n         BCTR  R3,0               ADJUST LENGTH FOR EX\n         EX    R3,MVCPARM         COPY PARMS RIGHT JUSTIFIED\n*        MVC   0(*-*,R1),0(R2)\n         SPACE\n         MVC   STRCPY,ZEROS       FILL COPY FIELD WITH C'0'\n         OC    STRCPY,STR         FILL IN SUPPOSED NUMERICS\n         CLC   STR,STRCPY         IS PARM NUMERIC ?\n         BNE   STRNONUM           NO - ERROR\n         TRT   STR,NUMCHECK       IS PARM NUMERIC ?\n         BZ    STRNUM             YES - OK\n         SPACE\nSTRNONUM LA    R1,BADSTR          \"INVALID MSG ID\"\n         LA    R0,L'BADSTR        LENGTH\n         SVC   93                 WRITE MSG\n         LA    R2,20              RETURN CODE\n         B     RETURN             QUIT\n         SPACE\nSTRNUM   PACK  DBLWRD,STR         CONVERT STR TO PACKED DECIMAL\n         CVB   R4,DBLWRD          THEN TO BINARY\n         SPACE\n         DOM   MSG=(R4)           DELETE MSG\n         LTR   R15,R15            OK ?\n         BNZ   RETURN             NO - SKIP MSG\n         SPACE\n         MVC   MSG(L'IDMSG),IDMSG \"MSG ID\"\n         LR    R0,R4              COPY ID NUMBER\n         LA    R1,MSG+L'IDMSG     -> AREA FOR NUMBER\n         BAL   LINK,INSRTNUM      CONVERT NUMBER TO CHAR\n         MVC   0(L'DEL,R1),DEL    \"IS DELETED\"\n         LA    R0,L'DEL(R1)       -> END OF MSG\n         LA    R1,MSG             -> START OF MSG\n         SR    R0,R1              LENGTH\n         SVC   93                 WRITE MSG\n         SLR   R2,R2              CLEAR RETURN CODE\n         SPACE 2\nRETURN   LA    R1,CORE            -> GETMAINED AREA\n         LA    R0,CORESIZE        LENGTH GETMAINED AREA\n         L     R13,4(,R13)        -> OLD SAVE AREA\n         SVC   10                 FREE WORK AREA\n         LR    R15,R2             SET RETURN CODE\n         RETURN (14,12),,RC=(15)  RETURN\n         SPACE\nMVCPARM  MVC   0(*-*,R1),0(R2)    MOVE PARM\n         SPACE 2\n*\n*  INPUT -  R0 = BINARY NUMBER\n*           R1 -> OUTPUT AREA\n*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH LEADING MINUS SIGN\n*           (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR NUMBER AND\n*           R1 WILL POINT PAST THE NUMBER UPON RETURN.\n*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN\n*           THE AREA \"DBLWRD\" AND USING \"INSRTPAK\" ENTRY.\n*\nINSRTNUM CVD   R0,DBLWRD          GET DECIMAL\nINSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS\n         LR    R3,R1              PTR TO OUTPUT AREA\n         SPACE\n         MVC   EDITWK,EDITPAT     P'ZZZZZZZZZZZZZZ9'\n         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT\n         EDMK  EDITWK,DBLWRD      FORMAT NUMBER\n         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN\n         BCTR  R1,0               CHAR BEFORE SIG DIGIT\n         MVI   0(R1),C'-'         LEADING MINUS SIGN\n         SPACE\nINSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT\n         SR    R2,R1              LENGTH TO MOVE - 1\n         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA\n         SPACE\n         LA    R0,1(R2)           LENGTH OF NUMBER\n         LA    R1,1(R2,R3)        -> PAST NUMBER\n         SPACE\n         LM    R2,R3,28(R13)      RESTORE REGISTERS\n         BR    LINK               RETURN\n         SPACE 2\nINSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER\nEDITPAT  DC    4X'202020',X'202120'  EDIT PATTERN\n         SPACE 2\nNEEDID   DC    C'A MESSAGE ID IS REQUIRED'\nLARGEMSG DC    C'MSG ID TOO LONG'\nBADSTR   DC    C'MSG ID IS NOT NUMERIC'\nIDMSG    DC    C'MESSAGE ID '\nDEL      DC    C' HAS BEEN DELETED'\nZEROS    DC    C'000000'\nNUMCHECK EQU   *-C'0'\n         DC    10X'00',6X'FF'\n         SPACE 2\n         LTORG\n         SPACE 2\nCORE     DSECT\n         DS    18F                SAVE AREA\n         SPACE\nDBLWRD   DS    D\nSTR      DS    CL6                AREA FOR NUMBER STRING\nSTRCPY   DS    CL6                COPY TO CHECK TO IF NUMERIC\nMSG      DS    CL40               MESSAGE AREA\nEDITWK   DS    CL15               FOR INSRTNUM SUBROUTINE\n         SPACE\n         DS    0D                 ROUND TO DOUBLE WORD BOUNDARY\nCORESIZE EQU   *-CORE             LENGTH OF GETMAINED AREA\n         SPACE\n         END   DOM\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IFG0EX0B": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x03*\\x03*\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 810, "newlines": 810, "modlines": 0, "user": "ANDREWS"}, "text": "++ USERMOD (ADMX01A) /*\n\n     IFG0EX0B -\n       INSTALLATION DCB OPEN EXIT.  IT PROVIDES DEFAULT BLOCKSIZES\n       FOR DISK AND TAPE DATASETS THAT DO NOT PROVIDE THEIR OWN.\n\n     DATASETS SUPPORTED -\n       DEVICE TYPE = DASD,TAPE OR NULLFILE\n       DSORG = PS OR PO\n       RECFM = F, FB, V, VB\n       MACRF = NOT EXCP\n       IF RECFM = F OR V THEN LRECL AND BLKSIZE MUST NOT BOTH BE ZERO\n       IF RECFM = FB OR VB THEN LRECL MUST NOT BE ZERO, AND THE LRECL\n         MUST BE LESS THAN THE CALCULATED BLKSIZE\n\n     DEFAULTS -\n       RECFM = F\n       BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL\n         IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO\n\n       RECFM = V\n       BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL+4\n         IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO\n\n       NULLFILE DATASETS ARE TREATED AS ABOVE - AS IF THEY WERE\n         UNBLOCKED\n\n       RECFM = FB\n       TAPE DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 16384\n       DASD DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 1/2 TRK\n                                OR FULL TRK (IF 1/2 TRK TOO SMALL)\n\n       RECFM = VB\n       TAPE DATASETS: BLKSIZE = 16384\n       DASD DATASETS: BLKSIZE = 1/2 TRK OR FULL TRK\n\n       FOR CONCATENATED DATASETS:\n       BLKSIZE WILL BE INCREASED TO THE LARGEST BLKSIZE OF THE\n       CONCATENATION, ASSUMING THE BLKSIZES WERE ALL CALCULATED BY\n       THIS ROUTINE.\n\n\n                                                                */ .\n++ VER (Z038) FMID(HDP2240).\n++ JCLIN.\n//IFG0EX0B JOB (9999,DBA,W811),D.ANDREWS,CLASS=S\n//ASM     EXEC PGM=IEV90\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSPUNCH DD  DSN=&&OBJECT(IFG0EX0B),DISP=SHR\n//SYSIN    DD  DSN=SOURCE.SYSPGMS(IFG0EX0B),DISP=SHR\n++ SRC (IFG0EX0B).\n         MACRO\n&NAME    SAVEAREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*                  SAVE AREA EQUATES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSAVEWRD1 EQU    0 .            PL1 WORD\nSAVELAST EQU    4 .            CHAIN POINTER TO LAST SAVE AREA\nSAVENEXT EQU    8 .            CHAIN POINTER TO NEXT SAVE AREA\nSAVER14  EQU   12 .            R14 SLOT\nSAVER15  EQU   16 .            R15 SLOT\nSAVER0   EQU   20 .            R0 SLOT\nSAVER1   EQU   24 .            R1 SLOT\nSAVER2   EQU   28 .            R2 SLOT\nSAVER3   EQU   32 .            R3 SLOT\nSAVER4   EQU   36 .            R4 SLOT\nSAVER5   EQU   40 .            R5 SLOT\nSAVER6   EQU   44 .            R6 SLOT\nSAVER7   EQU   48 .            R7 SLOT\nSAVER8   EQU   52 .            R8 SLOT\nSAVER9   EQU   56 .            R9 SLOT\nSAVER10  EQU   60 .            R10 SLOT\nSAVER11  EQU   64 .            R11 SLOT\nSAVER12  EQU   68 .            R12  SLOT\n         MEND\n         MACRO\n&NAME    $ENTER &BASE=R12,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=NO,      +\n               &CHAIN=YES,&DCTEST=NO,&USING=,&STORE=YES,&EQUSAVE=YES\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                ***NOTE*** ASSEMBLY ERRORS WILL OCCUR IF AN INLINE  *\n.*                SAVEAREA IS USED WITH THE USING= PARAMETER.         *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   USING=                           *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                   STORE=YES\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*\n.*                USING  - SPECIFY THE BASE ADDRESS FROM WHICH THE    *\n.*                         ASSEMBLER CAN COMPUTE DISPLACEMENTS.       *\n.*                         IF NO USING IS SPECIFIED THEN &NAME WILL   *\n.*                         BE USED.                                   *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.*                STORE  - STORE=NO SPECIFIES THAT A STORE MULTIPLE   *\n.*                         OF THE REGISTERS NEED NOT BE DONE.         *\n.*                         THIS CAN BE USED IF A PREVIOUS $ENTER MACRO*\n.*                         SPECIFIED CHAIN=NO AND IT SAVED THE REGS   *\n.*                         BUT DID NOT GET A NEW SAVE AREA.           *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*              08/04/82   USING KEYWORD ADDED      TPR *ADS*         *\n.*              01/02/84   STORE KEYWORD ADDED      TPR *ADS*         *\n.*              09/20/84   EQUSAVE KEYWORD ADDED    DWP *ADS*         *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&US,&TEMP,&ID,&FIRST\n         LCLC  &LBL1,&LBL2,&LABEL\n.*\n&LBL1    SETC  'ENT&SYSNDX.A'\n&LBL2    SETC  'ENT&SYSNDX.B'\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT ANOP\n&LABEL   SETC '&USING'\n         AIF ('&USING' NE '').USENAME\n&LABEL   SETC  '&ID'\n.USENAME ANOP\n         AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         AIF   ('&EQUSAVE' NE 'YES').NOSAVEQ\n         SAVEAREA                    ,  SAVEAREA EQUATES\n.NOSAVEQ ANOP\n         SPACE 2\n         AIF   ('&DCTEST' NE 'YES').NOBALI\n         MNOTE '         #BALI'\n         #BALI\n.NOBALI  ANOP\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  ANOP\n         AIF   ('&STORE' EQ 'NO').NOSTORE\n         STM   R14,R12,12(R13)          SAVE REGISTERS\n.NOSTORE ANOP\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LA    &REG,&LABEL-&NAME.(R15)  LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&US      SETC  '&US.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &LABEL.&US               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.*\n.GETMAIN ANOP\n         AIF   ('&DCTEST' NE 'YES').NODC1\n         MNOTE '         $DCTEST R15,INDC=&LBL1'\n         $DCTEST R15,INDC=&LBL1\n.NODC1   ANOP\n         MNOTE '         GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n         AIF   ('&DCTEST' NE 'YES').NODC2\n         MVI   3(R1),X'FF'              REMEMBER WE USED OS GETMAIN\n         B     &LBL2\n         MNOTE '&LBL1 #GETSTG TYPE=(USER,SHORT),PLIST=*,LEN=&RENT,INIT=X\n               0,ADDR=(R1)'\n&LBL1    #GETSTG TYPE=(USER,SHORT),PLIST=*,LEN=&RENT,INIT=0,ADDR=(R1)\n         MVI   3(R1),X'00'              REMEMBER WE USED DC GETMAIN\n&LBL2    DS    0H\n.NODC2   ANOP\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         LM    R0,R1,20(R15)            RESTORE REG 0,1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\nIFG0EX0B TITLE 'OPEN - INSTALLATION DCB EXIT            INITIALIZATION'\n*\n*  THIS IS THE INSTALLATION DCB OPEN EXIT. IT IS CALLED AFTER THE\n*  USER'S DCB EXIT IS TAKEN.  ITS PURPOSE IS TO FILL IN DEFAULTS\n*  FOR BLKSIZE OR LRECL IF THEY HAVE NOT BEEN SPECIFIED YET.\n*\n*  THESE DEFAULTS ARE ONLY FILLED IN IF THE DATASET PARAMETERS ARE:\n*\n*  DEVICE TYPE = DASD,TAPE OR NULLFILE\n*  DSORG = PS OR PO\n*  RECFM = F, FB, V, VB\n*  MACRF = NOT EXCP\n*  IF RECFM = F OR V THEN LRECL AND BLOCKSIZE MUST NOT BOTH BE ZERO\n*  IF RECFM = FB OR VB THEN LRECL MUST NOT BE ZERO, AND THE LRECL\n*     MUST BE LESS THAN THE CALCULATED BLOCKSIZE\n*\n*  THE DEFAULTS ARE:\n*\n*  RECFM = F\n*  BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL\n*  IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO\n*\n*  RECFM = V\n*  BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL+4\n*  IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO\n*\n*  NULLFILE DATASETS ARE TREATED AS ABOVE - AS IF THEY WERE UNBLOCKED.\n*\n*  RECFM = FB\n*  TAPE DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 16384\n*  DASD DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 1/2 TRACKSIZE\n*                           OR FULL TRACKSIZE (IF 1/2 TRK TOO SMALL)\n*\n*  RECFM = VB\n*  TAPE DATASETS: BLKSIZE = 16384\n*  DASD DATASETS: BLKSIZE = 1/2 TRACKSIZE OR FULL TRACKSIZE\n*\n*  FOR CONCATENATED DATASETS:\n*  BLKSIZE WILL BE INCREASED TO THE LARGEST BLKSIZE OF THE\n*  CONCATENATION, ASSUMING THE BLKSIZES WERE ALL CALCULATED BY\n*  THIS ROUTINE.\n*\n*  AUTHOR -\n*    DAVE PHILLIPS\n*    A. DUDA AND SONS, INC.\n*    1975 W. BROADWAY / P.O. BOX 257\n*    OVIEDO, FL  32765\n*\n         EJECT\nIFG0EX0B $ENTER BASE=R12,CHAIN=NO\n         SPACE\nRTIOT    EQU   R7                  -> TIOT ENTRY\nRJFCB    EQU   R8                  -> JFCB\nRUCB     EQU   R9                  -> UCB\nRDCB     EQU   R10                 -> DCB\nOIEXLPTR EQU   R11                 -> PARM LIST FOR THIS EXIT\n         LR    OIEXLPTR,R1         COPY PARM LIST\n         USING OIEXL,OIEXLPTR\n         L     RDCB,OIEXPDCB       -> PROTECTED COPY OF DCB\n         USING IHADCB,RDCB\n         L     RUCB,OIEXUCB        GET UCB ADDR\n         USING UCBOB,RUCB\n         L     RJFCB,OIEXJFCB      -> JFCB\n         USING INFMJFCB,RJFCB\n         TITLE 'OPEN - INSTALLATION DCB EXIT            FILL IN BLKSIZE*\n               ,LRECL'\n         SPACE\n         TM    DCBDSORG,DCBDSGPS+DCBDSGPO  DSORG PS OR PO ?\n         BZ    EXIT                NOPE\n         TM    DCBRECFM,DCBRECL    RECFM V OR F ?\n         BNM   EXIT                NOPE\n*        TM    DCBMACRF,DCBMRECP   EXCP ?\n*        BO    EXIT                YES - SKIP IT\n         SPACE\n         TM    JFCBMASK+4,JFCMNULL DUMMY DATASET ?\n         BO    UNBLKED             YES - TREAT IT AS RECFM F OR V\n         LTR   RUCB,RUCB           VALID UCB ADDR ?\n         BZ    EXIT                NO? - FORGET IT\n         TM    UCBDVCLS,UCB3TAPE+UCB3DACC    TAPE OR DISK DEVICE ?\n         BZ    EXIT                NO - SKIP IT\n         SPACE 2\n         TM    DCBRECFM,DCBRECBR   BLOCKED RECDS ?\n         BO    BLKED               YES - GO HANDLE\n         SPACE\nUNBLKED  TM    DCBRECFM,DCBRECF    RECFM = F ?\n         BZ    RECV                NO - MUST BE VARIABLE\n         SPACE\n         LH    R0,DCBBLKSI         LOAD BLKSIZE\n         LH    R1,DCBLRECL         LOAD LRECL\n         LTR   R1,R1               LRECL ZERO ?\n         BZ    RECFLR0             YES\n         LTR   R0,R0               BLKSIZE ZERO ?\n         BNZ   CKCONCAT            NO - LRECL,BLKSIZE ALREADY SET\n         STH   R1,DCBBLKSI         SET BLKSIZE=LRECL\n         B     SETUDCB             GO UPDATE USER'S DCB TOO\n         SPACE\nRECFLR0  LTR   R0,R0               BLKSIZE ZERO ?\n         BZ    EXIT                EXIT SINCE BOTH LRECL,BLKSIZE ZERO\n         STH   R0,DCBLRECL         SET LRECL=BLKSIZE\n         B     SETUDCB             GO UPDATE USER'S DCB TOO\n         SPACE\nRECV     LH    R0,DCBBLKSI         LOAD BLKSIZE\n         LH    R1,DCBLRECL         LOAD LRECL\n         LTR   R1,R1               LRECL ZERO ?\n         BZ    RECVLR0             YES\n         LTR   R0,R0               BLKSIZE ZERO ?\n         BNZ   CKCONCAT            NO - LRECL,BLKSIZE ALREADY SET\n         LA    R1,4(,R1)           Z  - ADD 4 TO LRECL FOR BDW\n         STH   R1,DCBBLKSI         AND SET BLKSIZE=LRECL+4\n         B     SETUDCB             GO SET USER'S DCB\n         SPACE\nRECVLR0  LTR   R0,R0               BLKSIZE ZERO ?\n         BZ    EXIT                YES - BOTH LRECL,BLKSIZE ZERO\n         SH    R0,=H'4'            NO - SUBTRACT 4 FOR BDW\n         STH   R0,DCBLRECL         AND SET LRECL=BLKSIZE-4\n         B     SETUDCB             GO SET USER'S DCB\n         EJECT\nBLKED    ICM   R0,B'0011',DCBLRECL LRECL ZERO ?\n         BZ    EXIT                YES - FORGET IT\n         ICM   R0,B'0011',DCBBLKSI BLKSIZE FILLED IN ?\n         BNZ   CKCONCAT            YES - GO CHECK FOR CONCAT DS\n         SPACE\n         BAL   R14,CALCBLK         GO CALCULATE BLKSIZE FOR BLKED DS\n         B     *+8                 RET+0 - WE HAVE A BLOCK SIZE\n         B     CKCONCAT            RET+4 - BLKSIZE NOT SET\n         SPACE\n         STH   R1,DCBBLKSI         SET BLOCK SIZE\n         SPACE 2\nSETUDCB  DS    0H                  COPY BLKSIZE,LRECL TO USER'S DCB\n         LH    R0,DCBLRECL         FETCH NEW LRECL\n         LH    R1,DCBBLKSI         FETCH NEW BLKSIZE\n         L     RDCB,OIEXUDCB       -> USER'S DCB\n         SPACE\n         MODESET KEYADDR=OIEXUKEY,WORKREG=2  GET INTO USER'S KEY\n         SPACE\n         STH   R0,DCBLRECL         SET NEW LRECL\n         STH   R1,DCBBLKSI         SET NEW BLKSIZE\n         SPACE\n         MODESET EXTKEY=ZERO       BACK TO KEY ZERO\n         SPACE\n         L     RDCB,OIEXPDCB       -> PROTECTED DCB AGAIN\n         TITLE 'OPEN - INSTALLATION DCB EXIT            INCREASE BLKSIZ*\n               E FOR CONCATENATED DATASETS'\nCKCONCAT L     RTIOT,OIEXTIOT      -> TIOT ENTRY ADDRESS\n         USING TIOENTRY,RTIOT      TIOT\n         SLR   R1,R1               CLEAR FOR INSERT\n         IC    R1,TIOELNGH         GET LENGTH OF ENTRY\n         AR    RTIOT,R1            -> NEXT TIOT ENTRY\n         CLI   TIOEDDNM,C' '       DDNAME BLANK ?\n         BNE   EXIT                NOPE - ALL DONE\n         SPACE\n         LH    R5,DCBBLKSI         GET BLOCKSIZE\n         LTR   R5,R5               ANY BLOCKSIZE ?\n         BNP   EXIT                NOPE\n         SPACE\nCONCATLP SLR   RUCB,RUCB           CLEAR FOR INSERT\n         ICM   RUCB,7,TIOEFSRT     GET UCB ADDR\n         BZ    NEXTDD              NOT THERE? - FORGET IT\n         TM    UCBDVCLS,UCB3TAPE+UCB3DACC    TAPE OR DISK DEVICE ?\n         BZ    NEXTDD              NO - SKIP IT\n         SPACE\n         BAL   R14,CALCBLK         GO CALCULATE BLOCKSIZE\n         B     CONCATBL            GOT A BLOCKSIZE\n         B     NEXTDD              NOT POSSIBLE TO CALC BLOCKSIZE\n         SPACE\nCONCATBL CR    R1,R5               COMPARE NEW BLKSIZE AGAINST MAX\n         BNH   NEXTDD              NOT A NEW HIGH\n         LR    R5,R1               SET NEW HIGH\n         SPACE\nNEXTDD   SLR   R1,R1               CLEAR FOR INSERT\n         ICM   R1,1,TIOELNGH       GET LENGTH OF ENTRY\n         BZ    ENDTIOT\n         AR    RTIOT,R1            -> NEXT TIOT ENTRY\n         CLI   TIOEDDNM,C' '       DDNAME BLANK ?\n         BE    CONCATLP            YES - KEEP CHECKING\n         SPACE\nENDTIOT  CH    R5,DCBBLKSI         DID WE NEED TO INCREASE BLKSIZE ?\n         BNH   EXIT                NOPE\n         SPACE\n         LR    R1,R5               COPY NEW LARGER BLKSIZE\n         SH    R1,DCBBLKSI         FIGURE OUT AMOUNT WE INCREASED BY\n         LH    R0,DCBBUFL          PICK UP BUFFER LENGTH\n         AR    R1,R0               BUMP BUFL BY NEW LENGTH\n         LTR   R0,R0               ANY BUFLEN SPECIFIED ?\n         BZ    *+8                 NOPE - SKIP STORE\n         STH   R1,DCBBUFL          YES - SET IT\n         STH   R5,DCBBLKSI         YES - SET IT\n         SPACE\n         L     RDCB,OIEXUDCB       -> USER'S DCB\n         MODESET KEYADDR=OIEXUKEY,WORKREG=2  GET INTO USER'S KEY\n         SPACE\n         LTR   R0,R0               ANY BUFLEN SPECIFIED ?\n         BZ    *+8                 NOPE - SKIP STORE\n         STH   R1,DCBBUFL          YES - SET IT\n         STH   R5,DCBBLKSI         SET BLKSIZE IN USER'S DCB TOO\n         SPACE\n         MODESET EXTKEY=ZERO       BACK TO KEY ZERO\n         SPACE\nEXIT     SLR   R15,R15             SET RC=0 - JFCB NOT MODIFIED\n         RETURN (14,12),,RC=(15)   RETURN\n         TITLE 'OPEN - INSTALLATION DCB EXIT            SUBROUTINE TO C*\n               ALCULATE BLOCKSIZE'\n*\n* FUNCTION -  THIS SUBROUTINE CALCULATES AN OPTIMAL BLKSIZE FOR A\n*             GIVEN DEVICE TYPE.  FOR DISK DATASETS THIS IS SET\n*             TO HALF-TRACK OR FULL-TRACK BLOCKING AND FOR TAPE\n*             IT IS SET TO 16K.\n*\n* INPUT -     RUCB  ->  THE UCB FOR THE DEVICE\n*             RDCB  ->  THE DCB FOR THE DATASET\n*             R14   =   RETURN ADDR\n*\n* OUTPUT -    R1    =   CALCULATED BLOCKSIZE\n*\n* USES   -    R0,R1,R2,R3,R4\n*\n* NOTES -     THIS ROUTINE RETURNS TO R14 WHEN A BLKSIZE IS COMPUTED\n*                          RETURNS TO R14+4 IF NOT\n*\n         SPACE\nCALCBLK  TM    UCBDVCLS,UCB3TAPE   TAPE DEVICE ?\n         BNO   DASD                NO\n         SPACE\nTAPE     LH    R1,=H'16384'        BLOCK TAPE AT 16K\n         LR    R3,R1               COPY BLOCKSIZE FOR WORK\n         TM    DCBRECFM,DCBRECV    RECFM=VB ?\n         BNO   TAPEFB              NO - MUST BE FB\nTAPEVB   SH    R3,=H'4'            TAKE OUT SPACE FOR BDW\n         CH    R3,DCBLRECL         BLOCKSIZE < LRECL ?\n         BL    4(,R14)             YES - FORGET IT\n         BR    R14                 ITS OK - RETURN WITH BLKSIZE IN R1\nTAPEFB   SLR   R0,R0               CLEAR FOR DIVIDE\n         LH    R4,DCBLRECL         LRECL\n         DR    R0,R4               DIVIDE BY LRECL\n         LR    R1,R3               GET BLKSIZE\n         SR    R1,R0               MAKE IT MULTIPLE OF LRECL\n         BNP   4(,R14)             SKIP IF BLOCKSIZE < LRECL\n         BR    R14                 RETURN WITH BLKSIZE IN R1\n         EJECT\n*\n* DASD BLOCKSIZE CALCULATIONS:\n*\n* BLKSZ = (TRKSZ - (N-1)*OVHD.NL - OVHD.L + N*KEYADJ)\n*         -------------------------------------------\n*                     (N-1)*(TOL/512) + 1\n*\n*       KEYADJ = OVHD.NK   (NON-KEYED RECORDS)\n*              = -KL       (KEYED RECORDS)\n*\n* WHERE:\n*         BLKSZ      MAXIMUM BLOCKSIZE FOR A GIVEN BLOCKING FACTOR\n*         N          NUMBER OF BLOCKS PER TRACK\n*         TRKSZ      PHYSICAL SIZE OF TRACK\n*         OVHD.NL    OVERHEAD IF NOT LAST BLOCK ON TRACK\n*         OVHD.L     OVERHEAD IF LAST BLOCK ON TRACK\n*         OVHD.NK    OVERHEAD REDUCTION IF DATASET NOT KEYED\n*         KL         LENGTH OF KEYS\n*         TOL        TOLERANCE FACTOR\n*\n* IF THERE IS NO TOLERANCE THEN THE DENOMINATOR REDUCES TO N.\n*\n*\n*    THIS CODE COMPUTES THE BLOCKSIZE FOR HALF TRACK OR FULL\n* TRACK BLOCKING.  IF THERE IS ANY TOLERANCE FACTOR THE\n* CALCULATION IS BYPASSED.  CURRENTLY THE CODE IS OPTIMIZED FOR\n* HALF TRACK CALCULATIONS.  AN ADJUSTMENT FACTOR IS ALSO COMPUTED\n* FOR FULL TRACK BLOCKING.  IF THE GIVEN RECORD LENGTH WILL NOT\n* FIT IN A HALF-TRACK BLOCK, THE BLKSIZE IS CHANGED TO FULL-TRACK\n* BLOCKING.\n*\nDASD     L     R4,CVTPTR           -> CVT\n         USING CVTMAP,R4\n         L     R4,CVTZDTAB         -> DVCT INDEX\n         USING DVCTI,R4\n         LA    R1,DVCTYPMK         MASK FOR UNIT TYPE NUMBER\n         N     R1,UCBTYP           PICK UP UNIT TYPE NUMBER\n         IC    R1,DVCTIOFF(R1)     PICK UP OFFSET\n         AR    R4,R1               -> DVCT ENTRY\n         USING DVCT,R4\n         TM    DVCFLAGS,DVCMODU    MODULO TYPE DEVICE ?\n         BNO   DASDNMOD            NOPE\n         L     R1,=F'11476'        3380 1/4 TRACK BLOCKING\n         L     R4,=F'23476'        3380 1/2 TRACK BLOCKING\n         SLR   R0,R0               CLEAR FOR INSERT\n         ICM   R0,1,DCBKEYLE       PICK UP KEYLEN\n         BZ    BLKCALCD            NO KEYS - JOIN MAINLINE CODE\n         L     R1,=F'11240'        3380 1/4 TRACK BLOCKING W/KEY\n         L     R4,=F'23240'        3380 1/2 TRACK BLOCKING W/KEY\n         SR    R3,R0               TAKE OUT KEYLEN\n         SR    R4,R0               TAKE OUT KEYLEN\n         B     BLKCALCD            JOIN MAINLINE CODE TO MAKE MULTIPLE\n         SPACE\nDASDNMOD TM    DVCFLAGS,DVCFTOL    NEED TO APPLY TOLERANCE FACTOR ?\n         BO    4(,R14)             YES - FORGET IT\n         SPACE\n* R0 = WORK REG\n* R1 = TRACK SIZE\n* R2 = FULL TRACK BLOCKING OVERHEAD ADJUSTMENT\n* R4 = DVCT ENTRY ADDRESS\n         SPACE\n         LH    R1,DVCTRKLN         PICK UP PHYSICAL TRACK SIZE\n         LH    R0,DVCOVHD          ASSUME 2 BYTE OVERHEAD\n         LR    R2,R0               SAVE FOR FULL-TRACK ADJUST\n         AR    R0,R0               * 2 BECAUSE TWO BLOCKS PER TRACK\n         TM    DVCFLAGS,DVC2BOV    IS IT ?\n         BO    SUBOVHD             YES\n         SLR   R0,R0               CLEAR FOR INSERT\n         IC    R0,DVCOVLB          OVERHEAD LAST BLOCK\n         SR    R1,R0               SUBTRACT IT FROM TRACK SIZE\n         IC    R0,DVCOVNLB         OVERHEAD NOT LAST BLOCK\n         LR    R2,R0               SAVE FOR FULL-TRACK BLKING ADJ\nSUBOVHD  SR    R1,R0               SUBTRACT OVERHEAD FROM TRACK SIZE\n         SLR   R0,R0               CLEAR FOR INSERT\n         ICM   R0,1,DCBKEYLE       PICK UP KEYLEN\n         BZ    NOTKEYED            NO KEYS\n         AR    R2,R0               ADD KEYLEN TO FULL-TRACK ADJ\n         AR    R0,R0               KEYLEN * 2\n         SR    R1,R0               SUBTRACT IT FROM TRACK SIZE\n         B     KEYSDONE\nNOTKEYED IC    R0,DVCOVNK          NOT KEYED OVERHEAD REDUCTION\n         SR    R2,R0               SUB KEYED OVHD FROM FULL-TRK ADJ\n         AR    R0,R0               * 2 BECAUSE TWO BLOCKS PER TRACK\n         AR    R1,R0               TAKE OUT OVERHEAD FOR KEYS\n         DROP  R4                  DONE WITH DVCT\n         SPACE\n* R0 = WORK REG\n* R1 = ACTUAL BLOCKSIZE REQUIRED (AT EXIT)\n* R2 = WORK REG\n* R3 = HALF TRACK BLOCK SIZE\n* R4 = FULL TRACK BLOCK SIZE\n         SPACE\nKEYSDONE LR    R4,R1               COPY LOGICAL TRACK SIZE\n         SRA   R1,1                COMPUTE HALF-TRACK BLKSIZE\n         AR    R4,R2               COMPUTE FULL-TRACK BLKSIZE\nBLKCALCD LR    R3,R1               SAVE CALCULATED BLOCKSIZE\n         TM    DCBRECFM,DCBRECV    RECFM=VB ?\n         BNO   DASDFB              NO - MUST BE FB\nDASDVB   SH    R3,=H'4'            TAKE OUT SPACE FOR BDW\n         CH    R3,DCBLRECL         BLOCKSIZE > LRECL ?\n         BNLR  R14                 YES - RETURN WITH BLKSIZE IN R1\n         LR    R1,R4               NO  - TRY FULL-TRACK BLOCKING\n         SH    R4,=H'4'            TAKE OUT SPACE FOR BDW\n         CH    R4,DCBLRECL         BLOCKSIZE > LRECL ?\n         BNLR  R14                 YES  - RETURN WITH BLKSIZE IN R1\n         B     4(,R14)             NO   - CAN'T FIT LRECL ON THIS TRK\nDASDFB   SLR   R0,R0               CLEAR FOR DIVIDE\n         LH    R2,DCBLRECL         LRECL\n         DR    R0,R2               DIVIDE BLKSIZE BY LRECL\n         LR    R1,R3               GET CALCULATED HALF TRACK BLOCKSIZE\n         SR    R1,R0               MAKE IT MULTIPLE OF LRECL\n         BPR   R14                 RETURN WITH BLKSIZE IN R1\n         SPACE\n         LR    R1,R4               NOT ENOUGH - TRY FULL-TRACK BLOCKING\n         SLR   R0,R0               CLEAR FOR DIVIDE\n         LH    R2,DCBLRECL         LRECL\n         DR    R0,R2               DIVIDE BLKSIZE BY LRECL\n         LR    R1,R4               GET CALCULATED FULL TRACK BLOCKSIZE\n         SR    R1,R0               MAKE IT MULTIPLE OF LRECL\n         BPR   R14                 RETURN WITH BLKSIZE IN R1\n         B     4(,R14)             CAN'T FIT LRECL ON THIS TRK\n         TITLE 'OPEN - INSTALLATION DCB EXIT            CONSTANTS AND D*\n               SECTS'\n         SPACE\n*\n* CONSTANTS\n*\n         LTORG\n         SPACE 2\n         IECOIEXL\n         SPACE 4\n*\n*****    JFCB EQUATES\n*\nJFCBUL   EQU   X'08' *                  USER LABEL BIT IN JFCBLTYP\nJFCBH1   EQU   X'04' -                  HIARCHY EQUAL 1\n* JFCBMASK+1\nJFCMBFOF EQU   X'40' -                  ASCII BUFOFF MERGED JFCB TO DCB\n* JFCBMASK+4\nJFCMJMOD EQU   X'80' -                  JFCB MODIFIED, MUST WRITE BACK\nJFCMDMOD EQU   X'40' -                  DSCB MODIFIED, MUST WRITE BACK\nJFCMNULL EQU   X'20' -                  DUMMY, NULL DATA SET\nJFCMBPAM EQU   X'10' -                  BPAM CONCATENATION\nJFCMISAM EQU   X'08' -                  ISAM, BDAM PARALLEL MOUNT\nJFCMPSWD EQU   X'04' -                  PASSWORD REQUIRED\nJFCMABND EQU   X'02' -                  DELAYED OR BYPASSED ABEND\n* JFCBMASK+5\nDSTRYL0P EQU   X'A0' -                  NL SPECIFIED BUT SL MOUNTED\n* JFCBMASK+6\nJFCMNRPS EQU   X'20' -                  NOT DA RCD POSITION SENSING DEV\nJFCMSDIR EQU   X'08' -                  DA USE SEARCH DIRECT CCW INDR\nJFCMTRCE EQU   X'04' -                  DD DCB=DIAGNS=TRACE INDR\nJFCMCTTR EQU   X'01' -                  RECATALOG DSCB VTOC TTR\n* JFCBMASK+7\nJFCMDSPM EQU   B'01000000'              SAVE OF JFCMOD BIT     @Z40JSGD\nJFCMDSPO EQU   B'00100000'              SAVE OF JFCOUT BIT     @Z40JSGD\n         SPACE 4\n         PRINT NOGEN\n         SPACE\n         DCBD  DSORG=(PS,PO),DEVD=(DA,TA)\nUCB      DSECT\n         IEFUCBOB\nTIOT     DSECT\n         IEFTIOT1\nJFCB     DSECT\n         IEFJFCBN\n         CVT   DSECT=YES\n         IHADVCT DSECT=YES\n         SPACE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RSMAP": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x05Q\\x05Q\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 1361, "newlines": 1361, "modlines": 0, "user": "ANDREWS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "S213RC30": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x02B\\x02B\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 578, "newlines": 578, "modlines": 0, "user": "ANDREWS"}, "text": "//S213RC30 JOB\n//*\n//*  S213RC30 -\n//*    ELIMINATES THOSE PESKY LITTLE S213-30 ABENDS THAT IBM SO\n//*    GENEROUSLY PROVIDED IN DFP V2.  IT IS A DYNAMIC FRONT-END\n//*    TO SVC 56 (ENQ) AND MODIFIES NO IBM CODE.\n//*\n//*    WHEN TWO USERS OPEN THE SAME PDS FOR OUTPUT, DFP V2 ABENDS\n//*    THE SECOND USER S213-30.  THIS PROGRAM CHANGES ALL THAT.\n//*    NOW INSTEAD OF S213-30 ABENDS, YOU GET AN OPERATOR WTOR:\n//*      S213RC30: REPLY \"CANCEL\" TO CANCEL WAIT FOR (DATASET)\n//*    AND THE SYSTEM WAITS FOR THE PDS TO BECOME AVAILABLE.\n//*    IF YOU GET TIRED OF WAITING, YOU CAN ALWAYS REPLY \"CANCEL\",\n//*    AND NORMAL PROCESSING (I.E. ABEND S213-30) TAKES OVER.\n//*\n//*    THIS PROGRAM SHOULD BE RUN SOON AFTER IPL.  YOU CAN EITHER\n//*    EXECUTE IT FROM AN AUTHORIZED LIBRARY:\n//*      //INSTALL EXEC PGM=S213RC30\n//*      //STEPLIB  DD  DSN=YOUR.APF.LIBRARY,DISP=SHR\n//*    OR YOU CAN NAME IT AS A SUBSYSTEM INITIALIZATION ROUTINE\n//*    IN AN IEFSSNXX MEMBER OF YOUR CHOICE (IN SYS1.PARMLIB):\n//*      XXXX,S213RC30    <=== \"XXXX\" IS ANY FOUR CHARACTERS\n//*    IN WHICH CASE YOU SHOULD HAVE INSTALLED IT IN A LINKLIST\n//*    DATASET, AND MADE APPROPRIATE CHANGES TO THE \"SSN=\"\n//*    PARAMETER IN YOUR IEASYS00 MEMBER.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  HEAT AND EAT.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY\n//             M=S213RC30,           <=== TARGET LOAD MODULE NAME\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             MODGEN='SYS1.MODGEN', <=== MODGEN DATASET NAME\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME\n//             AMODGEN='SYS1.AMODGEN' <=== AMODGEN DATASET NAME\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NORENT,OBJECT,NODECK'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//         DD  DSN=&AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSLIN   DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1,1),RLSE)\n//*\n//LKED    EXEC PGM=IEWL,COND=(0,NE),\n//          PARM=('RENT',\n//          'SIZE=(512K,200K),NCAL,LIST,LET,XREF,AC=1')\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLMOD  DD  DSN=&LIB(&M),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//SYSUT1   DD  SPACE=(TRK,5),UNIT=&SYSTS\n//        PEND\n//*\n//        EXEC INSTALL\n//ASM.SYSIN DD *\nS213RC30 TITLE '- INSTALL FRONT END TO SVC 56 (ENQ)'\n         PRINT ON,GEN,DATA\nS213RC30 CSECT\nS213RC30 AMODE 31\nS213RC30 RMODE ANY\n*\n*  WHEN TWO USERS CONCURRENTLY OPEN A PDS FOR OUTPUT, DFP OPEN\n*  ABENDS THE SECOND USER S213-30.  WE CAN'T HAVE THIS.\n*\n*  IFG0194D ISSUES AN ENQUEUE (THROUGH IFG019RA AND IFG019RD)\n*  JUST BEFORE IT READS THE F1 DSCB FROM THE DIRECT ACCESS VOLUME.\n*  THE ENQUEUE IS UNCONDITIONAL (NO WAIT) AND HAS\n*    QNAME = \"SYSZDSCB\"\n*    RNAME = VOLSER || \"A\" || DSNAME\n*\n*  THIS PROGRAM INSTALLS A FRONT-END TO THE ENQUEUE SVC (SVC 56).\n*  THE FRONT-END EXAMINES EACH ENQ PARAMETER LIST LOOKING FOR ONE\n*  THAT APPEARS TO BE THE DSCB ENQUEUE.  WHEN IT FINDS ONE, IT\n*  CHANGES THE BEHAVIOR OF THE ENQUEUE SO THAT THE SYSTEM WAITS\n*  FOR THE RESOURCE TO BECOME AVAILABLE RATHER THAN ABENDING.\n*\n*  INSTALLATION -\n*\n*    YOU MAY INSTALL THE INTERCEPT BY RUNNING THIS PROGRAM FROM\n*    AN AUTHORIZED LIBRARY.  FOR EXAMPLE:\n*      //INSTALL EXEC PGM=S213RC30\n*      //STEPLIB  DD  DSN=YOUR.APF.LIBRARY,DISP=SHR\n*\n*    IF THIS PROGRAM RESIDES IN A LINK LIST LIBRARY, YOU CAN\n*    EXECUTE IT AT IPL TIME BY PROVIDING AN \"IEFSSNXX\" MEMBER\n*    IN SYS1.PARMLIB:\n*      XXXX,S213RC30   (WHERE \"XXXX\" IS FOUR CHARACTERS OF YOUR CHOICE)\n*    REMEMBER TO CHANGE THE \"SSN\" PARAMETER IN IEASYS00 APPROPRIATELY.\n*\n*  MESSAGES -\n*\n*    S213RC30: SVCUPDTE RETURN CODE X'..', INTERCEPT WAS NOT INSTALLED\n*      THE INTERCEPT COULD NOT BE INSTALLED DUE TO A BAD RETURN\n*      CODE FROM THE SVCUPDTE MACRO.  NO HARM DONE.  YOUR SYSTEM\n*      SHOULD BEHAVE NORMALLY.\n*    S213RC30: REPLY \"CANCEL\" TO CANCEL WAIT FOR DDDDDDDD\n*      A POTENTIAL ABEND S213-30 WAS DETECTED BY THE INTERCEPT,\n*      AND THE INTERCEPT IS WAITING FOR THE DATASET TO BECOME\n*      AVAILABLE.  IF THE OPERATOR REPLIES \"CANCEL\", THEN THE\n*      INTERCEPT CANCELS ITS OWN SUSPENDED ENQUEUE AND RETURNS\n*      TO OPEN WITH RETURN CODE 4, WHICH WILL RESULT IN A\n*      SUBSEQUENT ABEND S213-30.\n*\n*  AUTHOR -\n*    DAVID ANDREWS\n*    A. DUDA AND SONS, INC.\n*    1975 W. BROADWAY / P.O. BOX 257\n*    OVIEDO, FL  32765\n*    (407) 365-2153\n*\n         EJECT ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,S213RC30-&SYSDATE-&SYSTIME\n         LR    R12,R15             R12 IS PROGRAM BASE\n         USING S213RC30,R12             \"\n         GETMAIN RU,LV=AREALEN,LOC=BELOW  GETMAIN LOCAL WORKAREA\n         ST    R1,8(,R13)          CHAIN SAVE AREAS\n         ST    R13,4(,R1)               \"\n         LR    R13,R1                   \"\n         USING GETAREA,R13         R13 IS BASE FOR SA/WA\n         SPACE ,\n*\n*  GET INTO NAUGHTY-NASTY MODE.  THIS CODE MUST BE AUTHORIZED.\n*\n         MODESET MODE=SUP,KEY=ZERO\n         SPACE ,\n*\n*  GETMAIN A STORAGE AREA IN FIXED ECSA AND RELOCATE THE INTERCEPT.\n*  (IT IS IN FIXED STORAGE BECAUSE ENQ IS A TYPE2 SVC, SUPPOSED TO\n*  BE IN THE NUCLEUS.  I CAN'T IMAGINE HOW BEING PAGEABLE WOULD\n*  HURT A TYPE2 SVC, BUT I DON'T PARTICULARLY CARE TO FIND OUT.\n*\n         GETMAIN RU,LV=INTRLEN,SP=227,LOC=(ANY,ANY)\n         LA    R2,0(,R1)           RELOCATE INTERCEPT\n         USING INTRCEPT,R2              \"\n         LA    R3,INTRLEN               \"\n         L     R4,=V(INTRCEPT)          \"\n         LR    R5,R3                    \"\n         MVCL  R2,R4                    \"\n         LA    R2,0(,R1)           RESTORE INTERCEPT ADDRESS\n         O     R2,=A(X'80000000')  REMEMBER TO SET AMODE BIT\n         SPACE ,\n*\n*  BUILD AN SVCUPDTE REMOTE PARAMETER LIST.\n*\n         MVC   SVCRPL(SVCRPLEN),SVCRPLMD  MOVE IN MODEL\n         SPACE ,\n*\n*  PREPARE TO UPDATE THE SVC TABLE ENTRY FOR SVC 56 (ENQ).\n*  ENQUEUE ON SYSZSVC(TABLE).\n*\n         ENQ   (SYSZSVC,TABLE,E,5,SYSTEM)\n         SPACE ,\n*\n*  OBTAIN CURRENT ADDRESS OF SVC 56 CODE.\n*\n         L     R15,CVTPTR                   R15 -> CVT\n         L     R15,CVTABEND-CVT(,R15)           -> SCVT\n         L     R15,SCVTSVCT-SCVTSECT(,R15)      -> SVC TABLE\n         LA    R15,56*SVCENTRL(,R15)            -> ENTRY FOR SVC 56\n         MVC   INTRIBM-INTRCEPT(4,R2),SVCEP-SVCENTRY(R15) TELL INTRCEPT\n         SPACE ,\n*\n*  INSERT THE INTERCEPT.\n*\n         SVCUPDTE EP=(2),MF=(E,SVCRPL)\n         LR    R3,R15              SAVE SVCUPDTE RETURN CODE\n         DEQ   (SYSZSVC,TABLE,5,SYSTEM)\n         LTR   R15,R3              UPDATE GO OK?\n         BZ    RETURN              YES, INTERCEPT INSTALLED, RETURN\n         SPACE ,\n*\n*  SVCUPDTE FAILED, ISSUE A NASTYGRAM.\n*\n         MVC   WTOPARMS(S213ER1L),S213ER1    CONSTRUCT NASTYGRAM\n         STC   R15,WTOPARMS+37               INSERT RETURN CODE\n         UNPK  WTOPARMS+37(1),WTOPARMS+38(1) EXTERNALIZE IT\n         NC    WTOPARMS+37(2),=X'0F0F'            \"\n         TR    WTOPARMS+37(2),=C'0123456789ABCDEF'\n         SLR   R0,R0               CLEAR FOR QREG0\n         WTO   MF=(E,WTOPARMS)     ISSUE WTO SVC\n         SPACE ,\n*\n*  FREEMAIN INTERCEPT STORAGE.\n*\n         LR    R1,R2               FREE INTERCEPT STORAGE\n         FREEMAIN RU,LV=INTRLEN,A=(1),SP=227\n         SPACE ,\n*\n*  RETURN TO MASTER.\n*\nRETURN   MODESET KEY=NZERO\n         LR    R1,R13              REMEMBER SA ADDR\n         L     R13,4(,R13)         RESTORE R13\n         FREEMAIN RU,LV=AREALEN,A=(1)  FREE WORKAREA\n         RETURN (14,12),RC=0       BACK TO THE USSER\n         SPACE ,\n*\n*  ERROR WTO TEXT\n*\nS213ER1  WTO   'S213RC30: SVCUPDTE RETURN CODE X''..'', INTERCEPT WAS N*\n               OT INSTALLED',DESC=(1,3),MCSFLAG=(QREG0),MF=L\nS213ER1L EQU   *-S213ER1\n         SPACE ,\n*\n*  QNAME AND RNAME FOR SVC TABLE ENQUEUE.\n*\nSYSZSVC  DC    0D'0',CL8'SYSZSVC'\nTABLE    DC    CL5'TABLE'\n         SPACE ,\n*\n*  MODEL PARAMETER LIST FOR SVCUPDTE.\n*\nSVCRPLMD SVCUPDTE 56,REPLACE,TYPE=2,MF=L\nSVCRPLEN EQU   *-SVCRPLMD\n         SPACE ,\n*\n*  LITERALS.\n*\n         LTORG ,\n         DROP  ,\n         TITLE '- SVC 56 INTERCEPT'\n*\n*  THIS CODE IS RELOCATED INTO FIXED ECSA AND IS GIVEN CONTROL\n*  WHENEVER SVC 56 - ENQ - IS ISSUED.  IT CONTAINS THE ADDRESS\n*  OF THE REAL (I.E. DISPLACED) SVC CODE.\n*\n*  USUALLY THIS CODE SIMPLY BRANCH-ENTERS THE ORIGINAL SVC 56.\n*  HOWEVER WHEN WE FIND AN ENQ PARAMETER LIST THAT REPRESENTS AN\n*  OUTPUT PDS OPEN, WE DO SOME OTHER THINGS DOCUMENTED BELOW.\n*\n*  REGISTERS AT ENTRY ARE:\n*\n*      R0  =  CALLER'S DATA, DO NOT DISTURB\n*      R1  -> ENQUEUE PARAMETER LIST, DO NOT DISTURB\n*      R3  -> CVT\n*      R4  -> TCB\n*      R5  -> SVRB\n*      R6  -> ENTRY POINT\n*      R7  -> ASCB\n*      R14 =  RETURN ADDRESS\n*      R15 =  CALLER'S DATA, USED FOR R/C AT EXIT\n*\n*  ALL OTHER REGISTERS CONTAIN UNPREDICTABLE INFORMATION.\n*  REGISTERS R2 THROUGH R14 ARE AUTOMAGICALLY RESTORED BY\n*  THE SUPERVISOR UPON RETURN.\n*\nINTRCEPT CSECT\nINTRCEPT RMODE ANY\n         USING INTRCEPT,R6\n         USING RBBASIC,R5\n         B     INTRID              BRANCH AROUND ID\n         DC    AL1(INTRIBM-*)      LENGTH OF ID\n         DC    C'S213RC30 SVC 56 INTERCEPT &SYSDATE &SYSTIME'\nINTRIBM  DC    A(0)                -> DISPLACED SVC 56 CODE\n         SPACE ,\n*\n*  SAVE REGISTERS R2-R13 IN THE SVRB EXTENDED SAVE AREA.\n*\nINTRID   STM   R2,R13,RBEXSAVE\n         SPACE ,\n*\n*  THE ENQ SVC CALLER MAY BE IN EITHER 24-BIT OR 31-BIT MODE.\n*  IF IN 24-BIT MODE, THEN R1 CONTAINS A 24-BIT ADDRESS, AND\n*  THE ENQUEUE PARAMETER LIST ALSO CONTAINS 24-BIT ADDRESSES.\n*  DETERMINE THE MODE OF THE CALLER BY INSPECTING THE PREVIOUS\n*  RB AND GENERATE A VALUE (IN R12) TO USE FOR MASKING THE HIGH-\n*  ORDER BYTE OF 24-BIT ADDRESSES.\n*\n         SLR   R8,R8               POINT R8 TO PREVIOUS RB\n         ICM   R8,B'0111',RBLINKB       \"\n         DROP  R5                       \"\n         USING RBBASIC,R8               \"\n         SLR   R12,R12             ASSUME 31-BIT MODE\n         BCTR  R12,0               (SET R12=X'FFFFFFFF')  31 BITS\n         TM    RBOPSW+4,X'80'      IS USER IN 31-BIT MODE?\n         BO    INTRSCRN            YES, BRANCH\n         DROP  R8                  DROP ADDRESSABILITY TO RB\n         SRL   R12,8               (SET R12=X'00FFFFFF')  24 BITS\n         SPACE ,\n*\n*  SCREEN ENQUEUE PARAMETER LIST FOR SOMETHING INTERESTING.\n*\nINTRSCRN LR    R9,R1               USE R9 AS PARMLIST POINTER\n         NR    R9,R12              CORRECT FOR CALLER'S AMODE\n         CLI   0(R9),X'C0'         END OF LIST / OLD OPTIONS\n         BNE   INTRLOAD            FIRST FLAGS BYTE UNEXPECTED, EXIT\n         TM    2(R9),X'80'         SHARED REQUEST?          1.......\n         BO    INTRLOAD            YES, DISCARD\n         TM    2(R9),X'40'         SCOPE=SYSTEM OR SYSTEMS? .1......\n         BNO   INTRLOAD            NO, DISCARD\n         TM    2(R9),X'03'         RET=USE?                 .....011\n         BNO   INTRLOAD            NO, DISCARD\n         TM    2(R9),X'04'         RET=USE?\n         BO    INTRLOAD            NO, DISCARD\n         L     R8,4(,R9)           POINT TO QNAME\n         NR    R8,R12              CORRECT FOR CALLER'S AMODE\n         CLC   =CL8'SYSZDSCB',0(R8) IS IT SYSZDSCB?\n         BNE   INTRLOAD            NO, EXIT\n         L     R11,8(,R9)          POINT TO RNAME\n         NR    R11,R12             CORRECT FOR CALLER'S AMODE\n         LA    R10,1(,R9)          POINT TO RNAME LENGTH\n         CLI   0(R10),0            RNAME LENGTH REMOTED?\n         BNE   INTRNAME            NO, GO CHECK RNAME\n         LR    R10,R11             POINT TO REMOTED RNAME LENGTH\n         LA    R11,1(,R11)         ADVANCE RNAME POINTER PAST LENGTH\nINTRNAME CLI   0(R10),8            RNAME LESS THAN 8 BYTES?\n         BL    INTRLOAD            YES, DISCARD\n         CLI   6(R11),C'A'         IS IT OUTPUT OPEN FOR PDS?\n         BE    INTRDOIT            YES, PROCESS\n         SPACE ,\n*\n*  SCREENING FAILED FOR THIS ENQUEUE, JUST BRANCH-ENTER THE\n*  ORIGINAL IBM CODE.\n*\nINTRLOAD L     R6,INTRIBM          POINT TO ORIGINAL CODE\n         BSM   0,R6                EXIT TO IT\n         TITLE '- ENQUEUE INTERCEPT CODE'\n*\n*  WE HAVE IDENTIFIED AN ENQUEUE TO PROCESS.  OPEN ISSUES A SPECIAL\n*  ENQUEUE WHEN YOU OPEN A NON-VIO PDS FOR OUTPUT.  WHEN THE ENQUEUE\n*  FAILS, OPEN ABENDS YOU WITH AN S213-30.\n*\n*  RATHER THAN ABENDING THE USER, LET'S JUST ISSUE A MESSAGE TO THE\n*  CONSOLE OPERATOR, AND WAIT FOR THE RESOURCE TO BECOME AVAILABLE.\n*\n*    1)  MODIFY THE ENQUEUE SO THAT IT SPECIFIES ECB= (IT CURRENTLY\n*        SPECIFIES \"RET=USE\", MEANING NO WAIT OCCURS).  REISSUE THE\n*        SVC.\n*    2)  IF CONTROL WAS GRANTED IN STEP #1, SKIP TO STEP #7.\n*    3)  ISSUE A WTOR TO THE MVS CONSOLE OPERATOR.\n*    4)  WAIT ON CONTROL OF THE DSCB RESOURCE, OR THE WTOR ECB.\n*    5)  IF THE ENQUEUE ECB WAS POSTED, DOM THE WTOR AND\n*        SKIP TO STEP #7.\n*    6)  CHECK THE OPERATOR RESPONSE:\n*        IF \"CANCEL\", THEN\n*          CANCEL THE SUSPENDED ENQUEUE\n*          RETURN TO CALLER WITH RC=4, INDICATING FAILURE.\n*            OPEN IN TURN WILL ABEND THE USER WITH S213-30.\n*        ELSE RETURN TO STEP #3.\n*    7)  SET A NORMAL RETURN CODE IN THE ORIGINAL ENQ PARAMETER\n*        LIST AND RETURN TO OPEN.\n*\n*  REGISTER CONTENTS NOW ARE -\n*    R0-R7   SAME AS AT ENTRY\n*    R8      POINTS TO QNAME\n*    R9      POINTS TO PARAMETER LIST\n*    R10     POINTS TO RNAME LENGTH\n*    R11     POINTS TO RNAME\n*    R12     MASK FOR AMODE CONVERSION\n*    R13-R15 SAME AS AT ENTRY\n*\n         SPACE ,\n*\n*  GETMAIN A WORKAREA.\n*\nINTRDOIT LR    R4,R8               R4 IS PERMANENT BASE FOR QNAME\n         LR    R13,R5              TEMPORARILY SAVE SVRB POINTER\n         LR    R5,R11              R5 IS PERMANENT BASE FOR RNAME\n         SLR   R8,R8               R8 IS RNAME LENGTH\n         IC    R8,0(,R10)               \"\n         LR    R10,R0              REMEMBER REGS 0, 1, 14\n         LR    R11,R1                   \"\n         LR    R12,R14                  \"  (DON'T NEED MASK ANYMORE)\n         GETMAIN RU,LV=IWRKLEN,LOC=ANY  ACQUIRE A WORKAREA\n         USING IWRKAREA,R1              \"\n         ST    R13,IWR5            SAVE INITIAL R5 CONTENT\n         LR    R13,R1              R13 IS W/A BASE\n         DROP  R1                       \"\n         USING IWRKAREA,R13             \"\n         STM   R10,R12,IWR0R1RE    SAVE ORIGINAL R0, R1, R14 CONTENTS\n         SPACE ,\n*\n*  INITIALIZE NEW ENQ/DEQ REMOTE PARAMETER LISTS.\n*\n         MVC   IWENQLSB(IWENQLSL),INTRETYL  INITIALIZE ENQ/DEQ LISTS\n         MVC   IWDEQLSB(IWDEQLSL),INTRDTYL       \"\n         LA    R10,IWENQECB        GET ENQ ECB ADDRESS\n         SPACE ,\n*\n*  ENQUEUE ON THE DSCB RESOURCE.\n*\nINTRA1   XC    IWENQECB,IWENQECB\n         ENQ   ((R4),(R5),E,(R8),SYSTEM),ECB=(R10),MF=(E,IWENQLST)\n         SPACE ,\nINTRA2   LTR   R15,R15             DID WE RECEIVE CONTROL?\n         BZ    INTRA7              YES, CONTINUE\n         CLI   IWENQLST+3,4        WAITING FOR CONTROL?\n         BE    INTRA3              YES, GO ISSUE MESSAGE TO OPERATOR\n         CLI   IWENQLST+3,8        ALREADY HAVE CONTROL (???!!!)\n         BNE   INTRA2B             NO, SOMETHING IS WRONG HERE\n         MVI   3(R9),8             YES, INDICATE ALREADY HAVE IT\n         LA    R11,3(,R9)          POINT TO R/C IN PARAMETER LIST\n         B     INTRMRG             RETURN TO CALLER\n         SPACE ,\n*\n*  BAD RETURN CODE FROM ENQUEUE.  TAKE AN SVC DUMP AND BRANCH-ENTER\n*  THE ORIGINAL IBM CODE.\n*\nINTRA2B  MVC   IWSDUMP(SVCDLSTL),SVCDLST  MOVE IN SDUMP PARMS\n         STM   R0,R15,IWREGS+X'14' STORE REGS FOR SVCDUMP\n         LA    R0,X'54'            LENGTH OF PSWREGS AREA\n         STH   R0,IWREGS               \"\n         MVI   IWREGS+2,X'20'      REGISTERS ONLY\n         XC    IWREGS+3(17),IWREGS+3   \"\n         SDUMP HDR='S213RC30: UNANTICIPATED RETURN CODE FROM ENQ MACRO'*\n               ,PSWREGS=IWREGS,MF=(E,IWSDUMP)\n         LM    R8,R10,IWR0R1RE     DIG OUT CALLER'S R0, R1, R14\n         L     R5,IWR5             RESTORE CALLER'S R5\n         USING RBBASIC,R5          ADDRESS SVRB\n         LR    R1,R13              FREE WORKAREA\n         FREEMAIN RU,LV=IWRKLEN,A=(1)   \"\n         LR    R0,R8               RESTORE R0\n         LR    R1,R9               RESTORE R1\n         LR    R14,R10             RESTORE R14\n         LM    R2,R13,RBEXSAVE     RESTORE CALLER'S R2-R13\n         DROP  R5\n         L     R6,INTRIBM          POINT TO ORIGINAL CODE\n         BSM   0,R6                EXIT TO IT\n         SPACE ,\nSVCDLST  SDUMP PLISTVER=2,MF=L\nSVCDLSTL EQU   *-SVCDLST\n         SPACE ,\n*\n*  ISSUE A WTOR TO THE MVS CONSOLE OPERATOR\n*    S213RC30: REPLY \"CANCEL\" TO CANCEL WAIT FOR DDDDDDDD\n*\nINTRA3   MVC   IWTOPARM(INTRERRL),INTRERR  MESSAGE TO OPERATOR\n         SH    R8,=H'8'            PLUG IN THE DATASET NAME\n         MVI   IWTOPARM+56,C' '         \"\n         MVC   IWTOPARM+57(43),IWTOPARM+56\n         EX    R8,INTRMVC               \"\n*INTRMVC MVC   IWTOPARM+56(*-*),7(R5)   \"\n         LA    R8,8(,R8)           ADJUST RNAME LENGTH BACK\n         MVC   IWTORPLY,=CL8' '    INITIALIZE TO SPACES\n         XC    IWTORECB,IWTORECB   CLEAR ECB\n         WTOR  ,IWTORPLY,L'IWTORPLY,IWTORECB,MF=(E,IWTOPARM)\n         SPACE ,\n*\n*  WAIT FOR EITHER THE WTOR OR THE RESOURCE TO BE POSTED.\n*\nINTRA4   ST    R1,IWDOMID          SAVE WTO-ID FOR DOM\n         LA    R1,IWENQECB         BUILD ECB LIST\n         ST    R1,IWAITLST              \"\n         LA    R1,IWTORECB              \"\n         ST    R1,IWAITLST+4            \"\n         OI    IWAITLST+4,X'80'    END OF LIST\n         WAIT  ECBLIST=IWAITLST    WAIT TO RECEIVE CONTROL\n         SPACE ,\n*\n*  DELETE THE WTOR AND DETERMINE WHICH ECB WAS POSTED.\n*\nINTRA5   OI    IWDOMID,X'80'       FLAG END OF WTO-ID LIST\n         DOM   MSGLIST=IWDOMID,REPLY=YES\n         TM    IWENQECB,X'40'      WAS ENQ ECB POSTED?\n         BO    INTRA7              YES, WE FINALLY GOT CONTROL\n         SPACE ,\n*\n*  CHECK FOR \"CANCEL\"\n*\nINTRA6   OC    IWTORPLY,=CL8' '    UPPERCASE REPLY\n         CLC   =CL8'CANCEL',IWTORPLY DID OPERATOR CANCEL\n         BNE   INTRA3              NO, REISSUE MESSAGE\n         SPACE ,\n*\n*  CANCEL REQUESTED, DEQUEUE THE SUSPENDED ENQUEUE.\n*\n         DEQ   ((R4),(R5),(R8),SYSTEM),MF=(E,IWDEQLST),RET=HAVE\n         SPACE ,\n*\n*  INDICATE ERROR AND RETURN TO CALLER.\n*\n         MVI   3(R9),4             INDICATE FAILURE IN ENQ PARMLIST\n         LA    R11,3(,R9)          POINT TO FAILURE BYTE IN SAME\n         B     INTRMRG             RETURN TO CALLER\n         SPACE ,\n*\n*  EXIT TO CALLER, ENQUEUE WAS SUCCESSFUL.\n*\nINTRA7   MVI   3(R9),0             SUCCESSFUL ENQ RETURN CODE\n         SLR   R11,R11             ZERO R15 MEANS SUCCESS ALSO\nINTRMRG  LM    R8,R10,IWR0R1RE     DIG OUT CALLER'S R0, R1, R14\n         LR    R1,R13              FREEMAIN WORKAREA\n         FREEMAIN RU,LV=IWRKLEN,A=(1)   \"\n         LR    R0,R8               RESTORE R0\n         LR    R1,R9               RESTORE R1\n         LR    R14,R10             RESTORE R14\n         LR    R15,R11             SET ENQ RETURN CODE\n         BR    R14                 RETURN\n         SPACE ,\nINTRMVC  MVC   IWTOPARM+56(*-*),7(R5)   OBJECT OF EX\n         SPACE ,\nINTRERR  WTOR  'S213RC30: REPLY \"CANCEL\" TO CANCEL WAIT FOR .........1.*\n               ........2.........3.........4....',,,MF=L\nINTRERRL EQU   *-INTRERR\n         EJECT ,\n*\n*  MODEL ENQ/DEQ PARAMETER LISTS\n*\nINTRETYL DS    0F\nXXX      ENQ   (0,0,E,44,SYSTEM),ECB=0,MF=L\n         DS    0F\nIWENQLSL EQU   *-INTRETYL\n         SPACE ,\nINTRDTYL DS    0F\nYYY      DEQ   (0,0,44,SYSTEM),MF=L\nIWDEQLSL EQU   *-INTRDTYL\n         SPACE ,\n*\n*  LITERALS\n*\n         LTORG ,\n         SPACE 3\nINTRLEN  EQU   *-INTRCEPT\n         DROP  ,\n         TITLE '- DSECTS'\nGETAREA  DSECT\n         DS    18F\nWTOPARMS DS    0D,CL192            ROOM FOR WTO PARAMETER LIST\nSVCRPL   SVCUPDTE 56,REPLACE,TYPE=2,MF=L\nAREALEN  EQU   *-GETAREA\n         SPACE 3\nIWRKAREA DSECT ,                   INTERCEPT WORK AREA\n         DS    18F                 SAVE AREA\nIWR0R1RE DS    3F                  SAVE CALLER'S R0, R1, R14 HERE\nIWR5     DS    F                   SAVE CALLER'S R5 HERE\nIWENQLSB DS    XL(IWENQLSL)\nIWENQLST EQU   IWENQLSB+XXX-INTRETYL\n         DS    0F\nIWDEQLSB DS    XL(IWDEQLSL)\n         DS    0F\nIWDEQLST EQU   IWDEQLSB+YYY-INTRDTYL\nIWENQECB DS    F\nIWTORECB DS    F\nIWAITLST DS    2F\nIWDOMID  DS    F\n         SPACE ,\nIWTOPARM DS    0D,CL192            ROOM FOR WTO PARAMETER LIST\nIWTORPLY DS    D                   ROOM FOR REPLY\nIWSDUMP  SDUMP PLISTVER=2,MF=L\nIWREGS   DS    0D,CL84\nIWRKLEN  EQU   *-IWRKAREA\n         SPACE 3\nSVCENTRY DSECT ,\nSVCEP    DS    A                   SVC ENTRY POINT ADDRESS\nSVCATTR1 DS    H                   ATTRIBUTES\nSVCLOCKS DS    H                   LOCK ATTRIBUTES\nSVCENTRL EQU   *-SVCENTRY          LENGTH OF SVC ENTRY\n         SPACE ,\n         CVT   DSECT=YES           SYSTEM CVT\n         IHASCVT ,                 SECONDARY CVT, USED TO FIND SVCTABLE\n         IHARB ,                   RB USED TO DETERMINE AMODE OF CALLER\n         END   S213RC30\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTO": {"ttr": 4612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x00\\xcb\\x00\\xcb\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 203, "newlines": 203, "modlines": 0, "user": "ANDREWS"}, "text": "//WTO      JOB\n//*\n//*  WTO WRITES A NON-DELETABLE MESSAGE ON THE OPERATOR'S CONSOLE.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE\n//*    COMMAND NAME YOU WILL HAVE TO CHANGE THE HELP TEXT\n//*    AND THE SYSLMOD DD STATEMENT ACCORDINGLY.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY\n//             HELP='SYS1.HELP',     <=== HELP LIBRARY\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME\n//             MACLIB='SYS1.MACLIB'  <=== MACLIB DATASET NAME\n//*\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  DSN=&HELP,DISP=SHR\n//SYSUT2   DD  DSN=&HELP,DISP=SHR\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,15)\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,5,RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB(WTO),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//IEBUPDTE.SYSIN DD *\n./         ADD    NAME=WTO,LIST=ALL\n./         NUMBER NEW1=1000,INCR=1000\n)F FUNCTION -\n  THE 'WTO' COMMAND SENDS A MESSAGE TO THE OPERATOR CONSOLE.\n\n  IT DIFFERS FROM THE 'SEND' COMMAND IN THAT THE TEXT OF THE\n  MESSAGE IS HIGH-LIGHTED AND WILL NOT ROLL OFF THE SCREEN.\n  IT USES THE EQUIVALENT OF ROUTCDE=(2),DESC=(2).\n\n  EXAMPLE ===>  WTO  'IS ANYONE THERE ?????? '\n\n)X SYNTAX -\n      WTO 'message'\n\n   REQUIRED - MESSAGE\n   DEFAULTS - NONE\n\n)O OPERANDS -\n   message        -  THE TEXT OF THE MESSAGE UP TO 114 CHARACTERS.\n./        ENDUP\n/*\n//ASM.SYSIN DD *\n         MACRO\n         REGS\n         LCLA  &A\n.LOOP    ANOP\nR&A      EQU   &A\n&A       SETA  &A+1\n         AIF   (&A LE 15).LOOP\n         MEND\n         SPACE 2\n         REGS\nLINK     EQU   R11\n         SPACE 2\nWTO      CSECT\n         SAVE  (14,12),,WTO-&SYSDATE-&SYSTIME\n         LR    R12,R15\n         USING WTO,R12\n         LR    R6,R1              SAVE PARM\n         SPACE\n         LA    R0,CORESIZE        SIZE OF CORE NEEDED\n         GETMAIN R,LV=(0)         GET IT\n         ST    R1,8(,R13)         ) CHAIN\n         ST    R13,4(,R1)         ) SAVE\n         LR    R13,R1             ) AREAS\n         USING CORE,R13\n         SPACE\n         L     R4,0(,R6)          -> CBUF\n         LH    R3,0(R4)           LENGTH OF CBUF\n         LH    R2,2(R4)           OFFSET TO PARMS IN CBUF\n         LA    R2,4(,R2)          ADJUST TO SAME SCALE AS LENGTH\n         CR    R2,R3              PARAMETERS ???\n         BL    HAVEPARM           YES\n         SPACE\n         LA    R1,NEEDMSG         \"MESSAGE REQUIRED\"\n         LA    R0,L'NEEDMSG       LENGTH\n         SVC   93                 ISSUE ERROR MSG\n         LA    R2,20              RETURN CODE\n         B     RETURN             QUIT\n         SPACE\nHAVEPARM SR    R3,R2              LENGTH OF PARAMETERS\n         LA    R0,L'STR\n         CR    R3,R0              > L'STR ?\n         BNH   LENOK              NOPE\n         LR    R3,R0              YES, SET TO L'STR\n         LA    R1,TRUNCMSG        -> \"MESSAGE TRUNCATED\"\n         LA    R0,L'TRUNCMSG      LENGTH\n         SVC   93                 ISSUE ERROR MSG\nLENOK    LA    R2,0(R2,R4)        -> START OF PARMS\n         MVI   STR,C' '           BLANK OUT STRING BUFFER\n         MVC   STR+1(L'STR-1),STR\n         BCTR  R3,0               ADJUST FOR EX\n         EX    R3,MVCSTR          COPY PARMS INTO STRING\n*        MVC   STR(*-*),0(R2)\n         SPACE\n         MVC   MCSFLAGS,WTOLIST+2 FILL IN MCS FLAGS\n         LA    R1,5(,R3)          COMPUTE LENGTH FOR WTO PARM\n         STH   R1,WTOLEN\n         LA    R1,WTOPARM(R1)     -> AREA FOR DESC CODES\n         MVC   0(4,R1),WTOLIST+5  MOVE IN DESCRIPTOR CODES\n         WTO   MF=(E,WTOPARM)     THIS'LL WAKE'EM UP\n         SPACE\n         MVC   STR(L'IDMSG),IDMSG \"MSG ID IS\"\n         LR    R0,R1              COPY ID NUMBER\n         LR    R2,R1              ALSO PASS BACK AS RETURN CODE\n         LA    R1,STR+L'IDMSG     -> AREA FOR NUMBER\n         BAL   LINK,INSRTNUM      CONVERT NUMBER TO CHAR\n         LR    R0,R1              -> END OF MSG\n         LA    R1,STR             -> START OF MSG\n         SR    R0,R1              LENGTH\n         SVC   93                 WRITE MSG\n         SPACE 2\nRETURN   LA    R1,CORE            -> GETMAINED AREA\n         LA    R0,CORESIZE        LENGTH GETMAINED AREA\n         L     R13,4(,R13)        -> OLD SAVE AREA\n         SVC   10                 FREE WORK AREA\n         LR    R15,R2             SET RETURN CODE\n         RETURN (14,12),,RC=(15)  RETURN\n         SPACE\nMVCSTR   MVC   STR(*-*),0(R2)     MOVE STRING\n         SPACE 2\n*\n*  INPUT -  R0 = BINARY NUMBER\n*           R1 -> OUTPUT AREA\n*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH LEADING MINUS SIGN\n*           (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR NUMBER AND\n*           R1 WILL POINT PAST THE NUMBER UPON RETURN.\n*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN\n*           THE AREA \"DBLWRD\" AND USING \"INSRTPAK\" ENTRY.\n*\nINSRTNUM CVD   R0,DBLWRD          GET DECIMAL\nINSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS\n         LR    R3,R1              PTR TO OUTPUT AREA\n         SPACE\n         MVC   EDITWK,EDITPAT     P'ZZZZZZZZZZZZZZ9'\n         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT\n         EDMK  EDITWK,DBLWRD      FORMAT NUMBER\n         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN\n         BCTR  R1,0               CHAR BEFORE SIG DIGIT\n         MVI   0(R1),C'-'         LEADING MINUS SIGN\n         SPACE\nINSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT\n         SR    R2,R1              LENGTH TO MOVE - 1\n         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA\n         SPACE\n         LA    R0,1(R2)           LENGTH OF NUMBER\n         LA    R1,1(R2,R3)        -> PAST NUMBER\n         SPACE\n         LM    R2,R3,28(R13)      RESTORE REGISTERS\n         BR    LINK               RETURN\n         SPACE 2\nINSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER\nEDITPAT  DC    4X'202020',X'202120'  EDIT PATTERN\n         SPACE 4\nWTOLIST  WTO   ' ',ROUTCDE=1,DESC=2,MF=L\n         SPACE\nNEEDMSG  DC    C'A MESSAGE IS REQUIRED'\nTRUNCMSG DC    C'MESSAGE HAS BEEN TRUNCATED TO 115 CHARACTERS'\nIDMSG    DC    C'MESSAGE ID IS '\n         SPACE 2\n         LTORG\n         SPACE 2\nCORE     DSECT\n         DS    18F                SAVE AREA\n         SPACE\nDBLWRD   DS    D\nWTOPARM  DS    0F                 WTO PARM LIST\nWTOLEN   DS    H                  LENGTH\nMCSFLAGS DS    H                  MCS FLAGS\nSTR      DS    CL115              MESSAGE AREA\n         DS    XL4                SPACE FOR ROUTE CODES\nEDITWK   DS    CL15               FOR INSRTNUM SUBROUTINE\n         SPACE\n         DS    0D                 ROUND TO DOUBLE WORD BOUNDARY\nCORESIZE EQU   *-CORE             LENGTH OF GETMAINED AREA\n         SPACE\n         END   WTO\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZAPDSCB": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x904\\x0f\\x00\\x904\\x0f\\x148\\x02q\\x02q\\x00\\x00\\xc1\\xd5\\xc4\\xd9\\xc5\\xe6\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-12-06T00:00:00", "modifydate": "1990-12-06T14:38:00", "lines": 625, "newlines": 625, "modlines": 0, "user": "ANDREWS"}, "text": "//ZAPDSCB JOB\n//*\n//*  ZAPDSCB -\n//*    IS A BATCH UTILITY USED TO MODIFY A VARIETY OF DATASET\n//*    ATTRIBUTES.  SEE THE COMMENTS IN THE CODE BELOW FOR\n//*    DOCUMENTATION.\n//*\n//*  INSTALLATION -\n//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS\n//*    BELOW TO SUIT YOUR TASTE.  NOTE THAT THE TARGET LIBRARY\n//*    MUST BE AUTHORIZED.\n//*\n//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS\n//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY\n//             MBR=ZAPDSCB,          <=== LOAD MODULE NAME\n//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER\n//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER\n//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS\n//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS MACRO LIBRARY\n//             MACLIB='SYS1.MACLIB', <=== MACLIB MACRO LIBRARY\n//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN MACRO LIBRARY\n//             MODGEN='SYS1.MODGEN'  <=== MODGEN MACRO LIBRARY\n//*                                  USE 'SYS1.MODGEN' FOR MVS-XA\n//*                                  USE 'SYS1.SMPMTS' FOR MVS-370\n//*\n//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK'\n//STEPLIB  DD  DSN=&ALIB,DISP=SHR\n//SYSTERM  DD  SYSOUT=&SOUT\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSLIB   DD  DSN=&MODGEN,DISP=SHR\n//         DD  DSN=&SMPMTS,DISP=SHR\n//         DD  DSN=&MACLIB,DISP=SHR\n//         DD  DSN=&AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))\n//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),\n//             SPACE=(TRK,(5,1),RLSE)\n//*\n//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,AC=1'\n//SYSPRINT DD  SYSOUT=&SOUT\n//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)\n//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//        PEND\n//*\n//        EXEC INSTALL\n//ASM.SYSIN DD *\n         TITLE 'DOCUMENTATION'\n         SPACE\n*  FUNCTION -\n*             THIS PROGRAM UPDATES DSCB'S WITH SPECIFIED VALUES ON\n*             THE DD CARD FOR THE DATASET(S). THE DSCB IS UPDATED\n*             WITHOUT REGARD TO THE ACTUAL DATASET FORMAT, THUS\n*             CARE MUST BE TAKEN USING THIS PROGRAM - IT IS ABOUT\n*             AS DANGEROUS AS SUPERZAP.\n*\n*  USE -\n*             THIS PROGRAM REQUIRES APF AUTHORIZATION.\n*             THE PROGRAM UPDATES THE DSCB'S FOR ANY DATASETS ALLOCATED\n*             WITH A DDNAME BEGINNING WITH \"ZAP\". THE PARAMETERS THAT\n*             CAN BE CHANGED ARE:\n*                 EXPIRATION DATE (CAN BE SET TO ZERO VIA \"RETPD=0\"),\n*                 ASM2 USE COUNT  (CAN BE SET TO ZERO VIA \"FCB=ZUSE\"),\n*                 SEC SPACE AMT   (SET VIA \"SPACE=(TRK,(0,##))\"),\n*                 DSORG,RECFM,BLKSIZE,LRECL,KEYLEN,RKP,OPTCD AND\n*                 PASSWORD PROTECTION. (CAN BE REMOVED VIA \"FCB=NOPW\"\n*                                       OR SET VIA LABEL=(,,PASSWORD)\n*                                       AND LABEL=(,,NOPWREAD)      )\n*             THIS PROGRAM USES NO FILES FOR CONTROL OR MESSAGES, ALL\n*             DIAGNOSTICS PRODUCED ARE ROUTED TO THE SYSTEM CONSOLE.\n*\n*             SAMPLE JCL FOR USING PROGRAM -\n*                 //ZAPDSCB EXEC PGM=ZAPDSCB\n*                 //SNAP     DD  SYSOUT=A     SNAP  DUMP WHEN I/O ERROR\n*                 //SYSUDUMP DD  SYSOUT=A     ABEND DUMP OTHER ERRORS\n*                 //ZAP1     DD  DSN=SYS1.LINKLIB,LABEL=EXPDT=99350\n*                 //ZAP2     DD  DSN=SYS1.CDS,LABEL=RETPD=0\n*                    ... ETC\n*\n*  AUTHOR -\n*             DAVE PHILLIPS\n*               A. DUDA AND SONS, INC.\n*               P.O. BOX 257\n*               OVIEDO, FL  32765\n*\n         TITLE 'EQUATES'\n         PRINT OFF\n         MACRO\n&NAME   SYNADAF &ACSMETH=,&PARM1=,&PARM2=\n         LCLC  &CB1\n         AIF   (T'&ACSMETH EQ 'O').AMERR\n         AIF   ('&ACSMETH' EQ '(0)').AMERR\n&CB1     SETC  '&ACSMETH'(1,1)\n         AIF   ('&CB1' EQ '(').AMERR\n.*  &CB1     SETC  '(0)'                     FIX A STUPID MACRO\n         AIF   ('&ACSMETH' EQ 'EXCP').AMEXCP\n&CB1     SETC  '(1)'\n         AIF   ('&ACSMETH' EQ 'BPAM').AMCOM\n&CB1     SETC  '(2)'\n         AIF   ('&ACSMETH' EQ 'BSAM').AMCOM\n&CB1     SETC  '(3)'\n         AIF   ('&ACSMETH' EQ 'QSAM').AMCOM\n&CB1     SETC  '(4)'\n         AIF   ('&ACSMETH' EQ 'BDAM').AMCOM\n&CB1     SETC  '(5)'\n         AIF   ('&ACSMETH' EQ 'BISAM').AMCOM\n&CB1     SETC  '(6)'\n         AIF   ('&ACSMETH' EQ 'QISAM').AMCOM\n&CB1     SETC  '(7)'\n         AIF   ('&ACSMETH' EQ 'BTAM').AMCOM\n&CB1     SETC  '(8)'\n         AIF   ('&ACSMETH' EQ 'QTAM').AMCOM\n&CB1     SETC  '(9)'\n         AIF   ('&ACSMETH' EQ 'GAM').AMCOM\n.AMERR   MNOTE 8,' ERROR ** ACCESS METHOD NOT SPEC. OR ILLEGAL '  15138\n         MEXIT                                                    15138\n.AMEXCP  ANOP\n&NAME    LA    15,0(0,15)     SET ACCESS METHOD IN REG. 15\n         AGO     .PARMA\n.AMCOM   ANOP                                                     15138\n&NAME    LA    15,0(0,15)              ZERO HIGH ORDER BYTE       15138\n         CNOP  0,4                                                15138\n         O     15,*+8         SET ACCESS METHOD IN REG. 15\n         BC    15,*+8         BRANCH AROUND LIST\n         DC    AL1&CB1        ACCESS METHOD CODE\n         DC    AL3(0)\n.PARMA   AIF   (T'&PARM1 EQ 'O').PARMB\n         AIF   ('&PARM1' EQ '(1)').PARMB\n&CB1     SETC  '&PARM1'(1,1)\n         AIF   (NOT ('&CB1' EQ '(')).SYMA\n         LR    1,&PARM1(1)    GET ADDRESS IN REG. 1\n         AGO   .PARMB\n.SYMA    LA    1,&PARM1       GET ADDRESS IN REG. 1\n.PARMB   AIF   (T'&PARM2 EQ 'O').COM\n         AIF   ('&PARM2' EQ '(0)').COM\n&CB1     SETC  '&PARM2'(1,1)\n         AIF   (NOT ('&CB1' EQ '(')).SYMB\n         LR    0,&PARM2(1)    SET PARAMETER IN REG. 0\n         AGO   .COM\n.SYMB    LA    0,&PARM2(1)    GET PARAMETER IN REG. 0\n.COM     SVC   68             ISSUE SVC\n         MEND\n         MACRO\n&LABEL   SNAPSHOT &SWITCH,&DCB=SNAPDCB,&TCB=,&ID=,&SDATA=(CB),         C\n               &PDATA=(PSW,REGS,SA),&STORAGE=,&LIST=,                  C\n               &SNAPDCB=NO,&DDNAME=SNAPSHOT\n.*\n         GBLB  &TRACE             GLOBAL TRACE CONTROL\n         LCLC  &TAG\n.*\n&TAG     SETC  '&LABEL.        '(1,8)     SET UP FOR MNOTES\n.*\n         AIF   ('&SWITCH' EQ '').ENTRY\n         AIF   ('&SWITCH' EQ 'ON').SETON\n         AIF   ('&SWITCH' NE 'OFF').CHKOC\n&TRACE   SETB  0                  TURN TRACE OFF\n         MEXIT\n.SETON   ANOP\n&TRACE   SETB  1                  TURN TRACE ON\n         MEXIT\n.*\n.CHKOC   AIF   (NOT &TRACE).LABEL\n         AIF   ('&SWITCH' EQ 'DCB').DODCB\n         AIF   ('&SWITCH' NE 'OPEN').CHKCLS\n.*\n         MNOTE '&TAG OPEN  (&DCB,(OUTPUT))'\n&LABEL   OPEN  (&DCB,(OUTPUT))\n         AIF   ('&SNAPDCB' EQ 'YES').DCBDONE\n         B     SNAP&SYSNDX\n         SPACE\n.DODCB   ANOP\n         MNOTE '&DCB  DCB DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=882,'\n         MNOTE '             LRECL=125,DDNAME=&DDNAME'\n         PUSH  PRINT\n         PRINT NOGEN\n&DCB     DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=882,LRECL=125,     C\n               DDNAME=&DDNAME\n         POP   PRINT\n         AIF   ('&SWITCH' EQ 'DCB').DCBDONE\nSNAP&SYSNDX DS  0H\n.DCBDONE ANOP\n         SPACE\n         MEXIT\n.*\n.CHKCLS  AIF ('&SWITCH' NE 'CLOSE').BADSW\n.*\n         MNOTE '&TAG CLOSE (&DCB)'\n&LABEL   CLOSE (&DCB)\n         SPACE\n         MEXIT\n.*\n.*\n.ENTRY   AIF   (&TRACE).TRACE\n.LABEL   AIF   ('&LABEL' EQ '').STOP\n.*  TRACE NOT ON SO JUST SET A TAG\n&LABEL   EQU   *\n         MEXIT\n.*\n.TRACE   ANOP\n.*\n         MNOTE '&TAG SNAP  DCB=&DCB,TCB=&TCB,ID=&ID,STORAGE=&STORAGE,'\n         MNOTE '               PDATA=&PDATA,SDATA=&SDATA,LIST=&LIST'\n&LABEL   SNAP  DCB=&DCB,TCB=&TCB,ID=&ID,STORAGE=&STORAGE,              *\n               SDATA=&SDATA,PDATA=&PDATA,LIST=&LIST\n         SPACE\n         MEXIT\n.*\n.BADSW   MNOTE 4,'INVALID OPTION, ''&SWITCH'''\n.STOP    MEND\n         SPACE 2\n         PRINT ON\n         SPACE 3\n*        REGISTER EQUATES\n         SPACE\nR0       EQU   0                  WORK REGISTER\nR1       EQU   1                  WORK REGISTER\nR2       EQU   2                  WORK REGISTER\nR3       EQU   3                  WORK REGISTER\nR4       EQU   4                  WORK REGISTER\nR5       EQU   5                  WORK REGISTER\nR6       EQU   6                  WORK REGISTER\nR7       EQU   7                  WORK REGISTER\nR8       EQU   8                  WORK REGISTER\nR9       EQU   9                  WORK REGISTER\nTIOTLEN  EQU   10                 CONTAINS LENGTH OF TIOT ENTRY\n@TIOT    EQU   11                 BASE REGISTER FOR TIOT ENTRIES\nBASEREG  EQU   12                 BASE REGISTER FOR ZAPDSCB CSECT\nR13      EQU   13                 SAVE AREA POINTER\nR14      EQU   14                 LINK REGISTER\nR15      EQU   15                 RETURN CODE REGISTER\n         TITLE 'HOUSEKEEPING AND POINTER SETUP'\nZAPDSCB  CSECT\n         SAVE  (14,12),,&SYSDATE-&SYSTIME-ZAPDSCB\n         BALR  BASEREG,0\n         USING *,BASEREG\n         SPACE\n         LA    R1,SAVEAREA\n         ST    R13,4(,R1)         NEW TO OLD\n         ST    R1,8(,R13)         OLD TO NEW\n         LR    R13,R1             -> NEW SAVE AREA\n         SPACE 2\n         L     R1,16              -> CVT\n         L     R1,0(,R1)          -> TCB WORDS\n         L     R1,4(,R1)          -> TCB\n         L     R1,12(,R1)         -> TIOT\n         SPACE\n         USING TIOT,R1\n         LA    @TIOT,TIOENTRY     -> FIRST DD ENTRY\n         DROP  R1\n         USING TIOENTRY,@TIOT\n         SPACE\n         SR    TIOTLEN,TIOTLEN    CLEAR TIOT LENGTH REGISTER\n         TITLE 'LOOP THRU TIOT LOOKING FOR \"ZAP\" DD CARDS'\nDDLOOP   AR    @TIOT,TIOTLEN      -> NEXT DD ENTRY\n         ICM   TIOTLEN,1,TIOELNGH    LENGTH OF DD ENTRY\n         BZ    ENDTIOT            YES - END OF TIOT\n         SPACE\n         CLC   =C'ZAP',TIOEDDNM   DDNAME START WITH ZAP ???\n         BNE   DDLOOP             NO\n         TM    TIOELINK,X'FF'     SYSIN/SYSOUT/SUBSYSTEM DS ???\n         BNZ   DDLOOP             YES, IGNORE\n         TM    TIOESTTA,TIOSJBLB  A JOBLIB ???\n         BO    DDLOOP             YES - REJECT\n         SPACE\n         L     R1,TIOESTTB        -> UCB\n         USING UCB,R1\n         SPACE\n         TM    UCBTBYT3,UCB3DACC  A DIRECT ACCESS DEVICE ???\n         BNO   DDLOOP             NO - REJECT\n         DROP  R1\n         SPACE 2\n* TIOT ENTRY HAS BEEN SELECTED FOR A POSSIBLE \"ZAP\" DD\n         SPACE\n         MVC   DCB+40(8),TIOEDDNM GET DDNAME OF DATASET\n         SPACE\n         RDJFCB (DCB)             GET JOB FILE CONTROL BLOCK\n         LTR   R15,R15            GET JFCB OK ?\n         BNZ   BADJFCB            NOPE\n         SPACE\n         TM    JFCBTSDM,JFCSDS    A SYSIN/SYSOUT DATA SET ?\n         BO    INVALIDD           YES - REJECT\n         SPACE\n         TM    JFCBLTYP,JFCSL     STANDARD LABEL ??\n         BNO   INVALIDD           NO - REJECT\n         SPACE\n         TM    JFCBIND1,JFCRLSE+JFCADDED+JFCGDG+JFCPDS    CHECK FOR    *\n                           RLSE SPECIFIED,OR A GDG,OR A MEMBER OF A PDS\n         BNZ   INVALIDD           NOT ALLOWED\n         SPACE\n         TM    JFCBIND2,JFCNEW    DATA-SET NEW ??\n         BO    INVALIDD           YES - REJECT\n         TM    JFCBIND2,JFCMOD    DATA-SET ALLOCATED MOD ?\n         BO    INVALIDD           YES - REJECT\n         SPACE\n         TM    JFCBIND2,JFCTEMP   TEMPORARY DATA SET ???\n         BO    INVALIDD           YES - REJECT\n         SPACE\n         TM    JFCDSRG2,JFCORGAM  A VSAM DS ??\n         BO    INVALIDD           YES - REJECT\n         TITLE 'UPDATE THE DSCB'\n         SPACE 2\n* \"ZAP\" DD CARD HAS PASSED TESTS, SO SAVE INFO USER WANTS CHANGED\n         SPACE\n         MVC   DSNAME,JFCBDSNM    DSNAME\n         MVC   VOLSER,JFCBVOLS    VOLSER\n         MVC   CREDT,JFCBCRDT     CREATION DATE  (ALWAYS CURRENT DATE)\n         MVC   EXPDT,JFCBXPDT     EXPIRATION DATE\n         MVC   KEYLEN,JFCKEYLE    KEY LENGTH\n         MVC   DSORG,JFCDSRG1     DSORG\n         MVC   RECFM,JFCRECFM     RECFM\n         MVC   BLKSIZE,JFCBLKSI   BLKSIZE\n         MVC   LRECL,JFCLRECL     LRECL\n         MVC   RKP,JFCRKP         RKP\n         MVC   OPTCD,JFCOPTCD     OPTCD\n         MVC   SPECOPER,JFCFCBID  SPECIAL OPER WORD   (REALLY FCB=)\n         MVC   PSWDBITS,JFCBIND2  FLAGS FOR PSWD PROT AND THINGS\n         NI    PSWDBITS,JFCBRWPW  LEAVE ONLY PSWD BITS\n         MVC   SECQTY,JFCBSQTY    GET SECONDARY SPACE QUANITY\n         MVC   SECBITS,JFCBCTRI   FLAGS FOR SPACE ALLOC\n         NI    SECBITS,JFCBSPAC   LEAVE ONLY SPACE BITS\n         SPACE\n         OC    DSCBINFO,DSCBINFO  ANY CHANGES SPECIFIED ???\n         BZ    NOCHANGE           NO - GET NEXT DD CARD\n         SPACE\n* GET THE DSCB FROM THE VTOC\n         SPACE\n         OBTAIN ADSCB             GET THE DSCB FROM VTOC\n         LTR    R15,R15           OK ?\n         BNZ    BADOBTAN\n         SPACE\n* INITIALIZE A JFCB FOR READING THE VTOC\n         SPACE\n         XC    JFCB(JFCBLGTH),JFCB                 CLEAN SLATE\n         MVI   JFCBDSNM,X'04'                      DSNAME\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM   OF VTOC\n         MVI   JFCBTSDM,JFCNWRIT                   DON'T WRT JFCB BACK\n         MVI   JFCKEYLE,44                         KEYLEN = 44\n         MVC   JFCBLKSI,=AL2(96)                   BLKSIZE = 96\n         MVC   JFCLRECL,=AL2(96)                   LRECL = 96\n         MVI   JFCBNVOL,1                          NVOL = 1\n         MVC   JFCBVOLS(6),VOLSER                  VOLSER\n         MVI   JFCBVLCT,1                          NVOL = 1\n         SPACE\n* OPEN THE VTOC FOR UPDATE SO WE CAN WRITE THE DSCB BACK\n         SPACE\n         OPEN  (DCB,(UPDAT)),TYPE=J\n         LTR   R15,R15            OPEN SUCCESSFULL ?\n         BNZ   BADOPEN            NO\n         EJECT\n* UPDATE THE DSCB FROM INFO SAVED FROM JFCB\n         SPACE\n         MVC   DS1DSNAM,DSNAME    FILL IN DSNAME\n         SPACE\n         OC    EXPDT,EXPDT        ANY EXPIRATION DATE ??\n         BZ    NOEXPDT            NO\n         MVC   DS1EXPDT,EXPDT     YES\n         CLC   CREDT,EXPDT        DID USER SPECIFY RETPD=0 ???\n         BNE   NOEXPDT            NO - LEAVE EXPDT ASIS\n         XC    DS1EXPDT,DS1EXPDT  YES - ZERO OUT EXPIRATION DATE\n         SPACE\nNOEXPDT  OC    KEYLEN,KEYLEN      ANY KEYLEN ??\n         BZ    NOKEYLEN           NO\n         MVC   DS1KEYL,KEYLEN     YES\n         SPACE\nNOKEYLEN OC    DSORG,DSORG        ANY DSORG ??\n         BZ    NODSORG            NO\n         MVC   DS1DSORG,DSORG     YES\n         SPACE\nNODSORG  OC    RECFM,RECFM        ANY RECFM\n         BZ    NORECFM            NO\n         MVC   DS1RECFM,RECFM     YES\n         SPACE\nNORECFM  OC    BLKSIZE,BLKSIZE    ANY BLKSIZE ??\n         BZ    NOBLKSIZ           NO\n         MVC   DS1BLKL,BLKSIZE    YES\n         SPACE\nNOBLKSIZ OC    LRECL,LRECL        ANY LRECL ??\n         BZ    NOLRECL            NO\n         MVC   DS1LRECL,LRECL     YES\n         SPACE\nNOLRECL  OC    RKP,RKP            ANY RKP ??\n         BZ    NORKP              NO\n         MVC   DS1RKP,RKP         YES\n         SPACE\nNORKP    OC    OPTCD,OPTCD        ANY OPTCD ??\n         BZ    NOOPTCD            NO\n         MVC   DS1OPTCD,OPTCD     YES\n         SPACE\nNOOPTCD  CLI   PSWDBITS,JFCBRWPW  SET NOPWREAD AND PWWRITE ??\n         BNE   NOWRITPW           NO\n         OI    DS1DSIND,X'14'     YES\n         SPACE\nNOWRITPW CLI   PSWDBITS,JFCSECUR  SET PWREAD AND PWWRITE ??\n         BNE   NOREADPW           NO\n         OI    DS1DSIND,X'10'     YES\n         NI    DS1DSIND,X'FF'-X'04'\n         SPACE\nNOREADPW CLC   SPECOPER,=C'ZUSE'  ZERO USE COUNT ??   (FCB=ZUSE)\n         BNE   NOZUSE             NO\n         XC    ASM2UCNT,ASM2UCNT  YES\n         B     NONOPW\n         SPACE\nNOZUSE   CLC   SPECOPER,=C'NOPW'  REMOVE PASSWORD PROT ??  (FCB=NOPW)\n         BNE   NONOPW             NO\n         NI    DS1DSIND,X'FF'-X'14'  YES\n         SPACE\nNONOPW   TM    SECBITS,JFCBSPAC   SPACE SPECIFIED ?\n         BZ    NOSECQTY           NOPE\n         MVC   DS1SCALO+1(3),SECQTY   YES - SET SECONDARY SPACE AMT\n         SPACE\nNOSECQTY DS    0H\n         SPACE\n* WRITE THE DSCB BACK TO THE VTOC\n         SPACE\n         ENQ   (SYSVTOC,VOLSER,E,,SYSTEMS)            DON'T BUMP HEADS *\n                                                      WITH DASDM\n         SPACE\n         XC    IOBSEEK(3),IOBSEEK     ZERO MBB OF MBBCCHHR\n         MVC   IOBSEEK+3(5),DSCBCCHH  FILL IN CCHHR OF MBBCCHHR\n         XC    ECB,ECB                INITIALIZE ECB\n         SPACE\n         EXCP  IOB                WRITE THE DSCB BACK\n         SPACE\n         WAIT  ECB=ECB            WAIT FOR I/O TO COMPLETE\n         SPACE\n         DEQ   (SYSVTOC,VOLSER,,SYSTEMS),RET=HAVE    LEGGO OF VTOC\n         SPACE\n         TM    ECB,X'7F'          CHANNEL PROGRAM EXECUTE OKAY ???\n         BNO   IOERROR            NOPE\n         SPACE\n         CLOSE (DCB)              CLOSE VTOC\n         SPACE\n         MVC   WTOUPDAT+35(44),DSNAME      MOVE IN DSNAME\n         MVC   WTOUPDAT+24(6),VOLSER       MOVE IN VOLSER\nWTOUPDAT WTO   'DSCB UPDATED ON VOLSER FOR 1...5...10....5...20....5...*\n               30....5...40...4',ROUTCDE=11\n         SPACE 2\n         B     DDLOOP             DO IT ALL AGAIN\n         TITLE 'CLEANUP AND RETURN'\nENDTIOT  DS    0H                 END OF DD CARDS\n         SPACE\n         TM    DCB+48,X'10'       IS THE VTOC DCB OPEN ???\n         BZ    RTN                NO - JUST RETURN\n         SPACE\n         CLOSE (DCB)              CLOSE VTOC DCB\n         SPACE\n         DEQ   (SYSVTOC,VOLSER,,SYSTEMS),RET=HAVE  MAKE SURE VTOC FREED\n         SPACE\nRTN      L     R13,4(,R13)        -> OLD SAVE AREA\n         SR    R15,R15            RC = 0\n         RETURN (14,12),,RC=(15)\n         TITLE 'ERROR EXITS'\nBADJFCB  BAL   R14,GETRC          GET RC IN CHARACTERS\n         MVC   WTOJFCB+33(5),RC   MOVE TO MSG\nWTOJFCB  WTO   'RETURN CODE FROM RDJFCB =99999',ROUTCDE=11\n         SPACE\n         ABEND 100,DUMP\n         SPACE 2\nINVALIDD MVC   WTODD+8(8),TIOEDDNM\nWTODD    WTO   '-DDNAME- DD CARD INVALID, NO UPDATE PERFORMED',        *\n               ROUTCDE=11\n         B     DDLOOP\n         SPACE 2\nNOCHANGE MVC   WTONOCHG+33(8),TIOEDDNM\nWTONOCHG WTO   'NO CHANGES SPECIFIED FOR -DDNAME- DD CARD, IGNORED',   *\n               ROUTCDE=11\n         B     DDLOOP\n         SPACE 2\nBADOBTAN BAL   R14,GETRC          GET RC IN CHARACTERS\n         MVC   WTOBTAIN+53(5),RC   MOVE TO MSG\n         MVC   WTOBTAIN+43(8),TIOEDDNM\nWTOBTAIN WTO   'RETURN CODE FROM OBTAIN FOR DDNAME -DDNAME- =99999',   *\n               ROUTCDE=11\n         B     DDLOOP\n         SPACE 2\nBADOPEN  BAL   R14,GETRC          GET RC IN CHARACTERS\n         MVC   WTOOPEN+46(5),RC   MOVE TO MSG\n         MVC   WTOOPEN+33(6),VOLSER\nWTOOPEN  WTO   'RETURN CODE FROM OPEN ON VOLSER VTOC =99999',          *\n               ROUTCDE=11\n         SPACE\n         ABEND 200,DUMP\n         SPACE 2\nGETRC    EQU   *                  SUBROUTINE TO MAKE RC PRINTABLE\n         CVD   R15,DBLWRD         DECIMAL\n         OI    DBLWRD+7,X'0F'     INSURE RIGHT CHAR A EBDIC NUMERIC\n         UNPK  RC(5),DBLWRD+5(3)  CHARACTER\n         BR    14                 RETURN\n         TITLE 'I/O ERROR HANDLING ROUTINE'\n         SPACE\nIOERROR  EQU   *                  I/O ERROR ANALYSIS ROUTINE\n         SPACE\n         SYNADAF ACSMETH=EXCP,PARM1=IOB       GET SYNAD INFO\n         SPACE\n         STM   14,12,12(R13)      SAVE REGISTERS IN NEW SAVE AREA\n         SPACE\n         CLI   8(R1),C' '         ANY BINARY ADDRESSES ???\n         BE    NOBIN              NOPE\n         SPACE\n         UNPK  22(7,R1),8(4,R1)   UNPACK BUFFER ADDRESS\n         MVC   29(1,R1),11(R1)    GET RIGHT DIGIT\n         NC    22(8,R1),=8X'0F'   PUT WITHIN RANGE OF XLATE TABLE\n         TR    22(8,R1),=C'0123456789ABCDEF'   CONVERT TO HEX\n         SPACE\n         UNPK  39(3,R1),12(2,R1)  UNPACK NO BYTES READ\n         MVC   42(1,R1),13(R1)    GET RIGHT DIGIT\n         NC    39(4,R1),=8X'0F'   PUT WITHIN RANGE OF XLATE TABLE\n         TR    39(4,R1),=C'0123456789ABCDEF'   CONVERT TO HEX\n         SPACE\nNOBIN    MVC   8(14,R1),=C'I/O ERROR,BFR='     FILL\n         MVC   30(9,R1),=C',NOBYTES='          IN\n         MVC   43(4,R1),=C',CC='               LABELS\n         SPACE\n         UNPK  47(1,R1),ECB(1)    UNPACK COND CODE\n         MVC   48(1,R1),ECB       GET RIGHT DIGIT\n         NC    47(2,R1),=8X'0F'   PUT WITHIN RANGE OF XLATE TABLE\n         TR    47(2,R1),=C'0123456789ABCDEF'   CONVERT TO HEX\n         SPACE\n* CONSTRUCT A PARAMETER LIST FOR WTO SVC\n         SPACE\n         LR    R5,R1              SAVE REGISTER ONE\n         L     R3,4(,R1)          AND PREFIX\n         L     R4,128(,R1)        AND SUFFIX\n         SPACE\n         MVC   6(2,R5),=X'8000'   MCS FLAGS FOR WTO\n         MVC   128(4,R5),=X'00000020'  SET ROUTING AND DESCRIPTOR CODES\n         SPACE\n         WTO   MF=(E,4(5))        WRITE TO PROGRAMMER  (ROUTCDE=11)\n         SPACE\n         LR    R1,R5              RESTORE REGISTER ONE\n         ST    R3,4(,R1)          AND PREFIX\n         ST    R4,128(,R1)        AND SUFFIX\n         LM    14,12,12(R13)      AND REST OF REGISTERS\n         SPACE\n         SYNADRLS\n         SPACE\n         SNAPSHOT ON\n         SNAPSHOT OPEN,SNAPDCB=YES\n         SNAPSHOT PDATA=(PSW,REGS,SA,JPA,SPLS)\n         SNAPSHOT CLOSE\n         SPACE\n         B     ENDTIOT            ENDTIOT WILL DO CLEANUP\n         SPACE 2\n         SNAPSHOT DCB,DDNAME=SNAP\n         SNAPSHOT OFF\n         TITLE 'CONSTANTS'\nSYSVTOC  DC    CL8'SYSVTOC'       QNAME TO ENQ ON VTOC\n         SPACE\nADSCB    CAMLST SEARCH,DSNAME,VOLSER,DSCB+44\n         SPACE 2\nDCB      DCB   DSORG=DA,DEVD=DA,MACRF=E,KEYLEN=44,RECFM=FS,            C\n               EXLST=JFCBLIST,DDNAME=ZAP\n         SPACE 2\nECB      DS    F                  ECB FOR I/O TO WRITE DSCB BACK\n         SPACE 3\nJFCBLIST DC    X'87',AL3(JFCB)\n         SPACE 4\nIOB      DS    0F                 IOB START\nIOBFLAG1 DC    X'42'              CMD CHAINING,UNRELATED CHAN PGM\nIOBFLAG2 DC    X'00'\nIOBSENS0 DC    X'00'              SENSE\nIOBSENS1 DC    X'00'              BYTES\nIOBECBCC DC    X'00'              COMPLETION CODE OF I/O EVENT\nIOBECBPT DC    AL3(ECB)           -> ECB POSTED WHEN I/O EVENT FINISHES\nIOBFLAG3 DC    X'00'\nIOBCSW   DC    XL7'00'            LOW 7 BYTES OF CHANNEL STATUS WORD\nIOBSIOCC DC    X'00'              COND CODE FOR SIO INSTRUCTION\nIOBSTART DC    AL3(CHANPGM)       -> CHANNEL PROGRAM TO EXECUTE\n         DC    X'00'\nIOBDCBPT DC    AL3(DCB)           -> DCB FOR DATASET\nIOBRESTR DC    F'0'\nIOBINCAM DC    X'0000'            AMOUNT TO INCREMENT DCBBLKCT FIELD\nIOBERRCT DC    X'0000'            NUMBER OF RETRIES DURING ERROR OPER\nIOBSEEK  DC    XL8'00'            SEEK ADDRESS FOR CHANNEL PROGRAM\n         SPACE 2\nCHANPGM  DS    0D                 CHANNEL PROGRAM START\nSEARCH   CCW   X'31',IOBSEEK+3,X'40',5       SEARCH ID EQ FOR CCHHR\nTIC      CCW   X'08',SEARCH,0,0              TIC TO SEARCH IF NOT FOUND\nWRITE    CCW   X'0D',DSCB,0,140              WRITE DSCB\n         TITLE 'FORMAT ONE DATA-SET CONTROL BLOCK'\nDSCB     DS    0F\n         IECSDSL1 (1)\nDSCBCCHH DS    CL5                 CCHHR OF DSCB RETURNED BY OBTAIN\n         DS    CL47                REST OF OBTAIN'S 148 BYTE WKAREA\n         SPACE\nASM2UCNT EQU   IECSDSL1+45,3       ASM2 VER 2.4 USE COUNT\n         SPACE 3\n         LTORG\n         SPACE 3\n         TITLE 'JOB FILE CONTROL BLOCK'\nJFCB     DS    0F\n         IEFJFCBN LIST=NO\n         TITLE 'TASK INPUT/OUTPUT TABLE DSECT'\nTIOT     DSECT\n         IEFTIOT1\n         TITLE 'UNIT CONTROL BLOCK DSECT'\nUCB      DSECT\n         IEFUCBOB LIST=NO\n         TITLE 'WORKAREAS'\nZAPDSCB  CSECT\n         SPACE\nDBLWRD   DS    D                  WORKAREA FOR CVD INSTRUCTIONS\nSAVEAREA DS    18F\n         SPACE\nDSNAME   DS    CL44               DSNAME\nVOLSER   DS    CL6                VOLSER\nCREDT    DS    CL3                CREATION DATE  (CURRENT DATE)\nEXPDT    DS    CL3                EXPIRATION DATE\nKEYLEN   DS    CL1                KEY LENGTH\nDSORG    DS    CL2                DSORG\nRECFM    DS    CL1                RECFM\nBLKSIZE  DS    CL2                BLKSIZE\nLRECL    DS    CL2                LRECL\nRKP      DS    CL2                RKP\nOPTCD    DS    XL1                OPTCD\nSPECOPER DS    CL4                SPECIAL OPERATIONS WORD\nPSWDBITS DS    XL1                PASSWORD PROTECTION INDICATORS\nSECQTY   DS    AL3                SECONDARY SPACE QUANITY\nSECBITS  DS    XL1                SPACE ALLOC INDICATORS\nDSCBINFO EQU   EXPDT,*-EXPDT\nRC       DS    CL5                AREA FOR CONVERTING RC'S TO CHAR\n         SPACE 2\n         END\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT163/FILE163.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT163", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}