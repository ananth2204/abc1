{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "TRIDJK", "INMTNODE": "TO", "INMTUID": "CBT", "INMFTIME": "20200812122616000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "AD.HELP", "INMMEMBR": "AD.HELP", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"AD.HELP": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200225", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\n'", "DS1LSTAR": "b'\\x04\\x13\\x02'", "DS1TRBAL": "b'\\xdc\\xde'"}, "COPYR2": {"deb": "b'\\x08\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x16\\x10\\x00\\x04\\x9a\\xbb\\x98'", "extents": ["b'\\x08\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x16\\x10\\x00\\x04\\x9a\\xbb\\x98'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x018\\x00\\x00\\x01H\\x00\\x0e\\x00\\xff'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x034\\x00\\x00\\x034\\x00\\x0e\\x00\\x0f'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x03\\x92\\x00\\x00\\x03\\x9b\\x00\\x0e\\x00\\x96'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x05\\x8c\\x00\\x00\\x05\\x95\\x00\\x0e\\x00\\x96'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x05X\\x00\\x00\\x05a\\x00\\x0e\\x00\\x96'", "b'P\\xf4\\xec\\x00\\x00\\x00\\t\\x05\\x00\\x00\\t\\x0e\\x00\\x0e\\x00\\x96'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x04\\x9e\\x00\\x00\\x04\\xa7\\x00\\x0e\\x00\\x96'", "b'P\\xf4\\xec\\x00\\x00\\x00\\x02\\x98\\x00\\x00\\x02\\xa1\\x00\\x0e\\x00\\x96'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"PDSEGEN": {"ttr": 266497, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00\\x08\\x01\\x19$\\x7f\\x01 \"_\\x07&\\x05\\x7f\\x055\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "2019-09-04T00:00:00", "modifydate": "2020-08-12T07:26:08", "lines": 1407, "newlines": 1333, "modlines": 0, "user": "TRIDJK"}, "text": ")F Function -\n\n This application supports PDSE V2 member generations and is the\n critically acclaimed Lionel B. Dyck PDSEGEN dialog which runs\n under the ISPF Dialog Manager.\n\n ---\n Copyleft (C) 2020, Lionel B. Dyck\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n   http://www.gnu.org/licenses/\n)X Syntax -\n     %PDSEGEN dataset-name filter\n  or\n     %PDSEGEN dataset-name(filter)\n\n Aliases  - none.\n Required - dataset-name\n)O Operands -\n  dataset-name - A PDSE dataset name or *\n\n                 If * then a selection list of previously\n                 used datasets will be presented.\n\n                 If blank then a prompting panel will\n                 be presented to enter a dataset name.\n\n                 The PDSE dataset must be cataloged.\n\n  filter       - An optional member filter\n                 (see the Filter tutorial for more info)\n\n)S Subcommands:\n   <PRIMARY>\n   Age      - Display member age metrics\n   Backup   - Backup a V2 PDSE to a PDSEGEN backup file\n   Browse   - Browse member\n   C        - Change datasets\n   Compare  - Compare members\n   Copy     - Copy members\n   Edit     - Edit member\n   Filter   - Filter member list (MEMList and ML are aliases)\n   Find     - Find string in members\n   Genonly  - Hide     0 generations (toggle)\n   Hide     - Hide non-0 generations (toggle)\n   HIGen    - Display dummy members\n   ID xxx   - Display only members with xxx anywhere in the ID field\n   INfo     - Data set information\n   Isplist  - Output member table to LIST dataset (see usermod below)\n   Locate   - Locate member name\n   MINE     - Display only members with active userid\n   MODel    - Allocate a new dataset based on the active dataset\n   Options  - Display a Primary Command prompting panel\n   Output   - Output member table to temp dataset\n   Prune    - Remove old generations and retain a number of gens 0-n\n   REFList  - List last 30 data sets used in ISPF to switch to\n   REFResh  - Refresh the member list\n   RESTore  - Restore a V2 PDSE from a PDSEGEN backup file\n   Set      - Set default select option\n   SETMacro - Set initial edit macro for a dataset suffix\n   Sort     - Sort member list\n   Submit   - Submit member to internal reader\n   Validate - Validate PDSE with IEBPDSE utility\n   View     - View member\n   Left     - Scroll member list left  (toggle yy and yyyy dates)\n   Right    - Scroll member list right (toggle yy and yyyy dates)\n\n   Today    - Display all members changed today\n   Week     - Display all members changed in the last 7 days\n   Month    - Display all members changed in the last 30 days\n   Year     - Display all members changed this year\n   Since -nn\n            - Display all members updated since the previous nn days\n   Since yy/mm/dd\n            - Display all members updated since the provided date\n\n   <LINE>\n   A Attrib  ** Change attributes (Version, Modification Level, Userid)\n   B Browse  ** Browse the member\n   C COPy       Copy a member to another PDSE or PDS\n                Along with all generations\n   D Delete     Delete a member or generation (if delete is for gen 0)\n                then the member and all generations are deleted)\n   E Edit    ** Edit the member (Converted to View for non-0 gens)\n   G RECover *  Recover a generation to a new member\n   H Hide       Hide the current row\n                This only works to exclude the member from the display\n                and from being accessed using Browse/Edit/View\n                This will NOT exclude the member/gen from\n                Backup/Restore/Copy\n   I Info       Display ISPF Statistics about the member or generation\n   J SUbmit     Submit the member to the internal reader\n   K Klone   ** Clone the member (gen 0 only)\n     Clone      generations are not cloned\n   M MAil       Mail the member$m1\n   O or /       Display a member/generation sensitive popup of commands\n   P Promote *  Promote a generation to generation 0\n                Copies a non-0 generation into gen 0 and leaves the\n                user in Edit.  If you issue Edit Save, then gen 0 will\n                be replaced.\n   Q RENSwap ** Rename and swap the members and all generations\n   R REName  ** reName the member and all generations\n   S SElect     Select the member using the default set action (B, E, V)\n   T Tryit      Edit with the TRYIT Edit Macro\n   U User       User command\n   V View       View the member\n   X EXecute    eXecute the member (REXX or CLIST)\n   Z COMpare *  Compare generation 0 to non-0 generation member\n   =            Repeat prior line command\n\n             *  = Non-0 Generations Only\n             ** = Generation 0 Only\n\n=ATTRIBUTE\n)F Function - Line command\n\n   Review/Change the Version, Modification Level, and Userid of the\n   selected member.\n\n   This only works for base (generation 0) members and does not work for\n   non-0 generations.\n\n=INFO\n)F Function - Line command\n\n   Display ISPF Statistics (if available) for the selected member or\n   generation.\n\n=BROWSE=EDIT=VIEW\n)F Function - Line command\n\n   Browse and View will invoke the ISPF Browse or View interface for the\n   base member (generation 0) and non-0 generations.\n\n   Edit will invoke the ISPF Edit interface for gen 0 members only.\n   If requested for a non-0 generation, the request will be converted\n   to View.\n\n=DELETE\n)F Function - Line command\n\n   Delete will delete an individual member, an individual generation, or\n   if requested on the base member (gen 0), then the member and all\n   generations will be deleted. Optionally the base member will be\n   deleted and the generations promoted up.\n\n=RENAME\n)F Function - Line command\n\n   Rename will rename the base member and all generations.\n\n=RENSWAP\n)F Function - Line command\n\n   Rename swap the two members and all related generations.\n\n=COMPARE\n)F Function - Line command and Primary command\n\n   Compare may be requested as a member selection or on Command line.\n\n      Primary command syntax is:  COMPARE member from-gen to-gen\n\n          Example:  Compare member1 -3 -1\n\n   Abbreviation is COM\n\n   As a line command generation 0 will be compared to the non-0\n   generation.\n\n      Line command syntax:  COMpare or Z\n\n   Notes: During the compare any changes can be saved by using ISPF Edit\n          Create or Replace commands. The new/updated member will not be\n          in the member list display until after a Refresh is performed.\n\n          If Compare/Z is on a base (generation 0) row then the Compare\n          ISPF prompt will be displayed.\n\n=EXECUTE\n)F Function - Line command\n\n   Member selection X will cause the selected member, which should be a\n   REXX EXEC or a CLIST, to be executed.\n\n   If the member is a generation then it will be copied to a temporary\n   dataset prior to execution.\n\n=SUBMIT\n)F Function - Line command\n\n   SUbmit (J)\n\n   Submit the selected member or generation to the internal reader.\n\n=PROMOTE=RECOVER\n)F Function - Line command\n\n   Promote and Recover are designed to take a non-0 generation and make\n   it a generation 0 member so that it can be used by other programs.\n\n   Promote will take the non-0 generation member and replace the base\n   generation 0 member with the non-0 generation. This will push the\n   current generation 0 member to the -1 generation.\n\n   Recover will prompt the user for a new member name and then copy all\n   records from the non-0 generation to the new member.\n\n=HIDE\n)F Function - Line command\n\n   The H line selection will hide the current row (member generation).\n\n   This is to remove the member/generation from the display and also\n   prevents the Browse *, Edit *, Sub *, and View * commands from\n   processing the member/generation.\n\n   Hiding a member/generation does not hide the member/generation from\n   the Backup, Restore, or Copy functions.\n\n=COPY\n)F Function - Line command\n\nTo copy the selected member to another PDSE or PDS.\n\nOnly base (generation 0) members may be selected and then the\nbase, and ALL generations, will be copied to an existing PDSE or\nPDS.\n\nTo copy a generation alone then it must first be Recovered to\na base member.\n\nThe target PDSE or PDS must already exist.\n\n=KLONE\n)F Function - Line command\n\n   To copy the selected member to another PDSE or PDS.\n\n   Only base (generation 0) members may be selected and then the\n   base, and ALL generations, will be copied to an existing PDSE or\n   PDS.\n\n   To copy a generation alone then it must first be Recovered to\n   a base member.\n\n   The target PDSE or PDS must already exist.\n\n   Klone or K or CLone\n\n   K will clone base, generation 0, members by making a full copy of\n   them within the existing PDSE.  Their generations, if any, will\n   NOT be copied.\n\n=USER\n)F Function - Line command\n\n   Enter any command (TSO command, CLIST, or REXX EXEC) and a /\n   to indicate where the 'dataset(member)' will be in the command.\n\n   Examples:   LIST /\n               XMIT node.userid DS(/) NoLog\n\n   Note: The user command field is scrollable to allow up to 255\n         characters in the user command. Use the Left and Right\n         PF Keys. ZEXPAND also works with that field.\n\n=MAIL\n)F Function - Line command\n\n   E-Mail the member using the XMITIP e-mail application.\n\n   The XMITIP ISPF dialog will allow the member to be sent as\n   plain text, HTML, PDF, or RTF.\n\n=LINE/SELECTION/PROMPTING\n)F Function - Line command\n\n   A line selection of O or / will bring up a prompting popup\n   panel with the line selection options to select from.\n\n=OPTIONS\n)F Function - Line command\n\n)X Syntax -\n     O or /\n\n   Display a member/generation sensitive popup of commands.\n\n=SELECT\n)F Function - Line command\n\n)X Syntax -\n     S\n\n   Select the member using the default set action (B, E, V).\n\n=EQUAL\n)F Function - Line command\n\n)X Syntax -\n     =\n\n   Repeat prior line command action (B, E, V).\n\n=TRYIT\n)F Function - Line command\n\n)X Syntax -\n     Tryit\n\n   TRYIT will invoke the ISPF Edit interface for generation 0 members\n   only.  If requested for a non-0 generation then the request will be\n   converted to View.\n\n   Enter TRYIT ? to view the tutorial on the TRYIT Edit/View Command.\n\n=BACKUP\n)F Function - Primary command\n\n   The BACKUP Command will display a panel that provides the ability to\n   backup the specified PDSE dataset with all members and generations to\n   a new PDSE that can be easily backed up or copied with all\n   generations intact.\n\n   Each member and generation will be copied into the backup PDS, or\n   PDSE, as a unique member and will retain all ISPF statistics. The\n   generation (both absolute and relative) information will be stored in\n   the $INDEX member so that the relative generation numbers can be\n   retained.  Unfortunately the absolute generation cannot be retained\n   at this time.\n\n   The from PDSE must be a PDSE with generations enabled or an error\n   message will be generated.\n\n   The to PDSE must not exist as it will be allocated based on the DCB,\n   etc. of the from PDSE.\n\n   When using PDSEGEN on a PDSEGBAK PDS:\n\n   Unfortunately the absolute generation cannot be retained at this\n   time.\n\n   The from PDSE must be a PDSE with generations enabled or an error\n   message will be generated.\n\n   The to PDSE must not exist as it will be allocated based on the DCB,\n   etc. of the from PDSE.\n\n   When using PDSEGEN on a PDSEGBAK PDS:\n\n   1. The $ALLOC member contains the MAXGEN specification for the\n      original PDSE. It may be changed prior to a RESTORE but it must\n      never be more than the system limit\n\n   2. ISPF Edit command GNAME can be used in Edit or View on a backup\n      member (members that start with @) to get information on the\n      real member name and generation information.\n   3. Member $BACKUP is the PDSEGBAK backup report\n   4. Member $INDEX is used during the RESTORE, and by the GNAME\n      command, to map the backup member name and generation to the real\n      member\n\n\n=BROWSE=EDIT=VIEW\n)F Function - Primary command\n\n)X Syntax -\n     Browse member generation\n     Edit  member generation\n     View  member generation\n\n   member\n          May be * for all members in the table display or a member name\n          If using * then use filter, find, and hide to limit the member\n          list Or use filtering for member-name (e.g. A*C).  If Edit *\n          and member does not exist then it will be created.\n\n          Note: * valid only if the filter is not a mask.\n\n   generation\n          May be blank for generation 0 or -nn for a valid relative\n          generation.\n\n   Browse and View will invoke the ISPF Browse or View interface for the\n   base member (generation 0) and non-0 generations.\n\n   Edit will invoke the ISPF Edit interface for generation 0 members\n   only.  If requested for a non-0 generation then the request will be\n   converted to View. If the Edit member does not exist then it will be\n   created.\n\n=C\n)F Function - Primary command\n\n   C will change to another PDSE dataset.\n\n)X Syntax -\n     C dataset-name filter\n\n             Where dataset-name is optional (if not specified then the\n             initial entry panel will be displayed to prompt for a\n             dataset name).\n\n             If dataset-name is * then the change will be back to the\n             prior dataset.\n\n             If dataset-name is ? then a list of up to 25 previous\n             datasets will be presented for selection. With an option to\n             enter a new dataset-name.\n\n             If dataset-name is a number then it will be used as a index\n             into the 25 previously used datasets.\n\n             If dataset-name is > then the dataset that was the target\n             for the most recent COPY (command or line selection), or\n             the most recent MODEL command, will become the new active\n             dataset.\n\n             Filter is optional and if specified will override any\n             existing filter.\n\n             The Dataset List Panel supports point and shoot for\n             many of the panel fields and each dataset field is\n             scrollable using the left (F10) and right (F11) keys.\n\n             Rnn (or R nn) to remove an entry or use point and shoot on\n             the R next to the dataset name.\n\n             Use Mnn (or M nn) to move an entry to the top of the list,\n             or use point and shoot on the M next to the dataset name.\n\n             The CLEAR command will empty the list of datasets.\n             Or click on the CLEAR point and shoot field.\n\n             Rnn (or R nn) to remove an entry or use point and shoot on\n             the R next to the dataset name.\n\n             Use Mnn (or M nn) to move an entry to the top of the list,\n             or use point and shoot on the M next to the dataset name.\n\n             The CLEAR command will empty the list of datasets.\n             Or click on the CLEAR point and shoot field.\n\n             The SORT command will sort the list of datasets in\n             ascending order.  Or click on the SORT point and shoot\n             field.\n\n             The SORT command with a D parm will sort the list of\n             dataset in descending order.  Or click on the SORTD point\n             and shoot field.\n\n             END, EXIT, and QUIT will all close the panel.\n             Each of these have a point and shoot field.\n\n=COPY\n)F Function - Primary command\n\n)X Syntax -\n     COPY to-pdse\n\n   The to-pdse is optional\n\n   The COPY Command will display a popup panel asking for:\n\n         # ---------------------------------------- #\n         |   Target PDSE dataset name               |\n         |   Member name or mask                    |\n         |   Create the target dataset (yes or no)  |\n         |   Replace members on copy   (yes or no)  |\n         |   Show a Progress Meter     (yes or no)  |\n         # ---------------------------------------- #\n\n       The Member name mask uses the same PDSEGEN member pattern\n       filtering options.\n\n       Create will create the target dataset using the same allocation\n       information as the current dataset, including the same PDSE\n       parameters.\n\n       information as the current dataset, including the same PDSE\n       parameters.\n\n       When Create is specified you can change the space allocation\n       and the maxgen.\n\n       Replace does not apply if Create is specified.\n\n       Note that the copy will copy the member and generations while\n       retaining the relative generation order but the absolute\n       generation numbers will be lost and start over at 1.\n\n       The copy operation will copy from the oldest generation to\n       the newest and then the base member.  It does this to retain\n       the relative generation sequence (the absolute generation\n       number will be lost as there is no way to retain it). This\n       process also assures that the base member is retained along\n       with the most recent generations if copying to a PDSE with a\n       smaller MAXGEN value.\n\n=INFO\n)F Function - Primary command\n\n   INFO will display summary information on the PDSE, including how many\n   members and how many generation members.\n\n   Abbreviation is I\n\n=AGE\n)F Function - Primary command\n\n   AGE\n\n   Display age metrics for the members in the PDS/PDSE.\n\n   Abbreviation is AG\n\n=SETMACRO\n)F Function - Primary command\n\n   SETMACRO\n\n   The SetMacro command enables the definition and management of ISPF\n   Edit Initial Edit macros. These are defined based on the dataset\n   suffix and will only be invoked if the defined suffix matches the\n   active dataset.\n\n   The definition includes:\n\n       Dataset Suffix\n       Edit Macro Name\n       Edit Macro Parm (optional)\n\n   Abbreviation is SM\n\n=DATE\n)F Function - Primary command\n\n   TODAY will display all members and generations changed today.\n   WEEK  will display all members and generations changed in the last 7\n         days.\n   MONTH will display all members and generations changed in the last 30\n         days.\n   YEAR  will display all members and generations changed this year.\n   SINCE -nn\n         will display all members and generations updated\n         since the previous nn days.\n   SINCE yy/mm/dd\n         will display all members and generations updated\n         since the provided date. The date MUST be in the format of\n         yy/mm/dd.\n\n   All date filters are toggles. To toggle SINCE off just enter SINCE.\n=FILTER\n)F Function - Primary command\n\n)X Syntax -\n     FILter xxx\n\n   Where xxx is the filter or OFF to turn off filtering\n\n   Abbreviation: FIL        Alias: MEMList or ML\n\n   Filter will limit the member, with their generations, that are\n   displayed in the member list.\n\n   Valid filters are:\n\n       ABC  member ABC\n       ABC: members starting with ABC\n       ABC* for members starting with ABC\n       *ABC members ending with ABC\n       ABC/ members with ABC anywhere\n       /ABC members with ABC anywhere\n       *    for any number of characters(A*E)\n       ABC  member ABC\n       ABC: members starting with ABC\n       ABC* for members starting with ABC\n       *ABC members ending with ABC\n       ABC/ members with ABC anywhere\n       /ABC members with ABC anywhere\n       *    for any number of characters(A*E)\n       %    for any single character (A%B)\n       A:C  members starting with A thru C\n       (mem1 mem2 mem3) for individual members or member masks\n\n   Performance Tips (depending on the number of members/generations)\n\n   Good      Not as Fast         Good      Not as Fast\n   ABC*      A*C                 /ABC      A%C*\n   ABC:      A%C                 *         *A*\n   ABC/      AB%                 ABC       *A%C\n   *ABC      A*C%                (ABC DEF) (AB% D%F)\n\n=FIND\n)F Function - Primary command\n\n)X Syntax -\n     FIND string\n\n   Search all members, including within member names, and generations\n   for the specified string. Then update the display to remove all\n   members that do not match.\n\n   Abbreviation is F\n   Aliases: SRCh and SEArch\n\n   To limit the search to specific members use Filter prior to Find.\n\n   To limit the find string enclose the string in quotes: ' JOB ' will\n   find the string space-JOB-space which will not be found in the member\n   name.\n\n   If used on a PDSEGEN Backup PDS then a different search is performed\n   which will identify the backup member where the string is found and\n   the real member name and relative generation for that backup member.\n\n=GENONLY=HIDE\n)F Function - Primary command\n\n   GENONLY will hide all base members leaving only the generations\n   displayed.\n\n   HIDE will hide all generations in the member list leaving only\n   the base (generation 0) members.\n\n   Both are toggle commands. The 1st use will hide the base or\n   generations and the next use will unhide.\n\n   When GENOnly or HIDE mode are active, Delete, Prune, and Rename\n   are not available.\n\n=HIGEN\n)F Function - Primary command\n\n   HIGEN will add to the member list all High Water Gen (dummy) members.\n\n   A Dummy member is a member that holds information about a previously\n   deleted member. That information includes the highest absolute\n   generation that was used for the member before it, or its\n   generations, were deleted.\n\n   After using the HIGEN command the member name will be added to the\n   member list with the date fields set to blank and the user set to\n   HIGen.  The relative generation will be '-' and the absolute\n   generation will be the highest absolute generation that was used when\n   the member, and/or all its generations, were deleted.\n\n   HIGEN ? will display this tutorial panel.\n\n   Fun aliases:  Achmed, Casper, Zombie\n\n=ID=MINE\n)F Function - Primary command\n\n   ID followed by 1 to 8 characters will be used to filter the displayed\n   member list to only those members where the provided characters are\n   found in the userid.\n\n)X Syntax -\n     ID xxxx\n\n   MINE will display only those members that have a userid the same as\n   the active userid.\n\n)X Syntax -\n     MINE\n\n   Note: These act as toggles to filter or not to filter.\n\n=LOCATE\n)F Function - Primary command\n\n   Locate will locate the requested value in the most recently sorted\n   column (default column is Name).  The locate will be positioned to\n   the closest matching row.\n\n)X Syntax -\n     Locate value\n\n=MODEL\n)F Function - Primary command\n\n)X Syntax -\n     MODel new-dsname\n\n   new-dsname is optional and will be used for the new dataset name\n   if one is provided on the command.\n\n   This command is used to allocate a new dataset (PDS or PDSE) dataset\n   using the characteristics of the existing dataset.\n\n   A popup prompt is provided with all of the current allocation\n   information allowing all allocation parameters to be changed.\n\n   The Dataset name must be changed to a new dataset name before\n   proceeding.\n\n   The Volser field can be blanked out to allow SMS allocation to manage\n   the target location.\n\n   The Copy-To dataset name will be updated with the Model dataset name\n   to facilitate using Copy from the current to the newly allocated\n   dataset.\n\n=OPTIONS\n)F Function - Primary command\n\n   Will  present the user with a selection panel of all available\n   primary commands from which a command may be selected.\n\n   A field is provided to enter both required and optional parameters\n   for the selected command. Some commands (e.g. Browse) require a\n   parameter, others will prompt if a parameter is required but not\n   provided.\n\n   A command may be selected by number, or by using the ISPF Point and\n   Shoot feature.\n\n   Optionally any valid PDSEGEN command, with parameters, may be entered\n   on the command line. Note: Any parameters entered in the optional\n   field will be appended to the command.\n\n=OUTPUT\n)F Function - Primary command\n\n   OUTPUT will write the member list to a sequential dataset.\n\n    BROWSE    USERID.PDSEGEN.REPORT          Line 0000000000 Col 001 072\n    Command ===>                                        Scroll ===> CSR\n   ********************************* Top of Data ***********************\n   DSN=USERID.MBRGEN.LIONEL32 - MaxGens=5\n   Date: 11 Oct 2017 Time: 06:47:20\n   Name      Gen  Abs Created      Changed        VV.MM  Size    ID\n   BIGUNS      0    0 2016/07/01 2016/07/01 11:50 01.01     1    USERID\n   BIGUNS     -1    1 2016/07/01 2016/07/01 11:50 01.00     1    USERID\n   INFO        0    0 2017/09/18 2017/09/18 10:11 01.04    25    USERID\n   INFO       -1    8 2017/09/18 2017/09/18 10:01 01.04    25    USERID\n   INFO       -2    7 2017/09/18 2017/09/18 09:55 01.03    25    USERID\n   INFO       -3    6 2017/09/18 2017/09/18 09:54 01.03    25    USERID\n   INFO       -4    5 2017/09/18 2017/09/18 09:53 01.02    25    USERID\n   INFO       -5    4 2017/09/18 2017/09/18 09:49 01.01    26    USERID\n\n=PRUNE\n)F Function - Primary command\n\n   Prune will remove old member generations and retain the number\n   of generations specified (from 0 to nn).\n\n   If 2 is specified then all generations beyond generation -2 will\n   be deleted.\n\n   If 0 is specified than all generations will be removed leaving\n   only generation 0 (the base member).\n\n   If RESET is specified then it must be in UPPER CASE and it will\n   remove ALL members and generations that are in the member list.\n\n   NOTE: To limit the Prune operation use the FILTER command before\n         using the Prune command.\n\n=REFLIST\n)F Function - Primary command\n\n   The Reflist command will display the last 30 data sets that ISPF has\n   referenced. The user may select one, or none, to switch to.\n\n)X Syntax -\n     REFList\n\n=REFRESH\n)F Function - Primary command\n\n   The Refresh command will refresh the member/generation list and reset\n   all filters with an option to define a new filter.\n\n)X Syntax -\n     REFresh filter\n\n=RESTORE\n)F Function - Primary command\n\n   The RESTORE Command will display a panel that provides the ability to\n   RESTORE the specified PDSE backup dataset with all members and\n   generations to a new PDSE or existing PDSE.\n\n  Panel fields:\n\n  # ----------------------------------------------------------- #\n  |   PDSE Generation Backup: <pdsegen backup pds>              |\n  |   PDSE Target:            <target pdse to restore into>     |\n  |   Allocate Target:            (Y or N)                      |\n  |                                                             |\n  |   Optional fields:                                          |\n  |                                                             |\n  |   Member Name: <member name or member mask>                 |\n  |   Generation:  <generation selection using either absolute  |\n  |                 or relative> (e.g. 0, -5, 47)               |\n  # ----------------------------------------------------------- #\n\n   If the New option is selected then the backup PDSE will be restored\n   to a NEW PDSE that will be allocated based on the DCB, etc. of the\n   backup (e.g. 0, -5, 47).\n\n   If the New option is selected then the backup PDSE will be restored\n   to a NEW PDSE that will be allocated based on the DCB, etc. of the\n   backup PDSE but will have the generations re-enabled. All members and\n   generations will be restored. The original absolute generation number\n   will be lost but the relative generation will be retained.\n\n   When using PDSEGEN on a PDSEGBAK PDS:\n\n   1. The $ALLOC member contains the MAXGEN specification for the\n      original PDSE. It may be changed prior to a RESTORE but it must\n      never be more than the system limit\n   2. ISPF Edit command GNAME can be used in Edit or View on a backup\n      member (members that start with @) to get information on the\n      real member name and generation information.\n   3. Member $BACKUP is the PDSEGBAK backup report\n   4. Member $INDEX is used during the RESTORE, and by the GNAME macro,\n      to map the backup member name and generation to the real member\n\n=EDIT=SELECT\n)F Function - Primary command\n\n)X Syntax -\n     E member gen\n\n   Select (S) and Edit (E) can be used a commands to select, or Edit,\n   an existing or new member.\n\n   If gen is specified then it must be a valid relative or absolute gen\n   If the member does not exist then it will be created using Edit.  An\n   * may be used to Edit the last selected member.\n\n   Valid abbreviations are:  E and S\n\n=SET\n)F Function - Primary command\n\n   SET will prompt to change the default action of the line selection\n   options S and Point and Shoot if option is blank.\n\n   Valid options are:   B - Browse      V - View\n                        E - Edit        / - Prompt popup\n\n   Default Member Position options are:\n                        0 - Do Not reposition the table to place\n                            the last selected member at the top\n                            * Except for Edit processing\n                        1 - Reposition the table to place\n                            the last selected member at the top\n\n   Color options on the next tutorial panel\n\n   SET allows the user to change the default color options for the\n   PDSEGEN application and tutorial panels.\n\n   Valid color options are:\n         B - Blue    R - Red    Y - Yellow\n         G - Green   T - Turq\n         P - Pink    W - White\n\n   The Header row color and the option to reverse the color are\n   supported.\n\n   The member table display column colors may also be changed:\n\n        Sorted is the color of the column last sorted\n        UnSorted is the color of the other columns\n\n=SORT\n)F Function - Primary command\n\n)X Syntax -\n     SORT column order\n\n   Sort Columns:   Field      Abbreviation    Field      Abbreviation\n                   Name       N               Size       S\n                   Created    CR              Init       I\n                   Changed    CH              Mod        M\n                   ID         ID\n\n   Sort ? will display a popup to select the column to sort.\n\n   Order may be A for Ascending or D for Descending. If the order is not\n   specified then the 1st sort will be Descending and the next\n   Ascending.\n\n   To make things 'modern' the column headers may have the cursor placed\n   on them and ENTER pressed for a point and shoot sort.\n\n   Abbreviation is SO\n\n=SUBMIT\n)F Function - Primary command\n\n)X Syntax -\n     SUBmit member generation\n\n   member\n          May be * for all members in the table display or a member name\n          Or the member name may be a filter (e.g. A*C).\n\n   generation\n          May be blank for generation 0 or -nn for a valid relative\n          generation.\n\n   Notes: Member may not contain any wild/filter characters\n          If using a member name of *, use filter, find, and hide to\n          limit the member list.\n\n=VALIDATE\n)F Function - Primary command\n\n   Validate (abbreviation VA) will validate the integrity of the PDSE\n   using the IEBPDSE utility. The IEBPDSE report will be opened in\n   View after processing.\n\n   Abbreviation is VA\n\n   Note: Validate will also force a clean for all pending deletes.\n\n=BATCH=JCL\n)F Function -\n   1. BACKUP and RESTORE\n\n   PDSEGBAK may be run in batch to Backup or Restore PDSE.\n\n   Differences from the ISPF Dialog:\n\n      1. The copy will also generate a report in SYSTSPRT for each\n         copied member and generation\n\n   Sample JCL is provided below. The JOB card and dataset names\n   are examples. The sample includes an example of how to allocate\n   the target PDSE before doing the copy.\n\n   //USERIDT JOB XXXXXXXX,USERID,\n   //          NOTIFY=USERID,MSGCLASS=A\n   //OUT       OUTPUT DEFAULT=YES,JESDS=ALL,OUTDISP=(HOLD,HOLD)\n   //* ------------------------------------------------------ *\n   //* THIS IS A SAMPLE BATCH JOB TO DEMONSTRATE HOW TO RUN   *\n   //* THE PDSEGBAK ROUTINE TO BACKUP AND THEN RESTORE A      *\n   //* PDSE WITH MEMBER GENERATIONS.                          *\n   //*                                                        *\n   //* THE PDSEBAK SYNTAX IS:                                 *\n   //*                                                        *\n   //* %PDSEGBAK  INPUT TARGET OPTION                         *\n   //*                                                        *\n   //* WHERE INPUT IS THE SOURCE PDSE                         *\n   //*       TARGET IS THE TARGET PDSE                        *\n   //*       OPTION IS EITHER BACKUP OR RESTORE               *\n   //* ------------------------------------------------------ *\n   //ALLOC    EXEC PGM=IKJEFT01,DYNAMNBR=50\n   //SYSTSPRT DD   SYSOUT=*\n   //SYSTSIN  DD   *\n    PROFILE PREFIX(HLQ)\n    DELETE TEST.N.BACKUP\n    DELETE TEST.N.PDSE\n    DELETE TEST.N.PDSE\n   /*\n   //PDSEGBAK EXEC PGM=IKJEFT01,DYNAMNBR=50\n   //SYSEXEC  DD  DISP=SHR,DSN=HLQ.PDSEGEN.EXEC\n   //STEPLIB  DD  DISP=SHR,DSN=HLQ.PDSEGEN.LOAD\n   //ISPTLIB DD  DISP=SHR,DSN=SYS1.SISPTENU\n   //ISPPROF DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPPLIB DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPSLIB DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPMLIB  DD DISP=SHR,DSN=SYS1.SISPMENU\n   //SYSTSPRT DD   SYSOUT=*\n   //SYSTSIN  DD   *\n    PROFILE PREFIX(HLQ)\n    ISPSTART CMD(%PDSEGBAK TEST.PDSE TEST.N.BACKUP BACKUP)\n    ISPSTART CMD(%PDSEGRST TEST.N.BACKUP TEST.N.PDSE / NEW)\n   /*\n\n   2. COPY\n\n   PDSEGENC may be run in batch to copy a PDSE to another PDSE.\n\n   Differences from the ISPF Dialog:\n\n      1. The target PDSE must be pre-allocated.\n      2. The copy will generate a report in SYSTSPRT for each\n         copied member and generation.\n\n   Sample JCL is provided below. The JOB card and dataset names\n   are examples. The sample includes an example of how to allocate\n   the target PDSE before doing the copy.\n\n   //USERIDT JOB XXXXXXXX,USERID,\n   //          NOTIFY=USERID,MSGCLASS=A\n   //OUT       OUTPUT DEFAULT=YES,JESDS=ALL,OUTDISP=(HOLD,HOLD)\n   //* ------------------------------------------------------ *\n   //* THIS IS A SAMPLE BATCH JOB TO DEMONSTRATE HOW TO RUN   *\n   //* THE PDSEGENC ROUTINE TO COPY A PDSE TO ANOTHER PDSE.   *\n   //*                                                        *\n   //* THE PDSEGENC SYNTAX IS:                                *\n   //*                                                        *\n   //* %PDSEGENC  FROMPDSE TOPDSE MEMBER-FILTER ( OPTIONS     *\n   //*                                                        *\n   //* WHERE FROMPDSE IS THE SOURCE PDSE                      *\n   //*       TOPDSE IS THE TARGET PDSE                        *\n   //*       MEMBER-FILTER IS * FOR ALL                       *\n   //*                 * TO FILTER ON MULTIPLE CHARACTERS     *\n   //*                 % TO FILTER ON A SINGLE CHARACTERS     *\n   //*                 SPECIFIC MEMBER NAME                   *\n   //*                 MEM/ TO COPY ALL MEMBERS WITH MEM      *\n   //*                     ANYWHERE IN THE NAME               *\n   //*       ( REQUIRED IF ANY OPTION IS SPECIFIED            *\n   //*                                                        *\n   //* OPTIONS MAY BE:                                        *\n   //*                                                        *\n   //*       BATCH TO BYPASS THE ISPF PROGRESS POPUP          *\n   //*       NEW TO CREATE THE TARGET PDSE USING ALLOC INFO   *\n   //*           FROM THE FROM PDSE                           *\n   //*       REPLACE TO REPLACE SAME MEMBER (AND GENERATIONS) *\n   //* ------------------------------------------------------ *\n   //ALLOC    EXEC PGM=IKJEFT1B,DYNAMNBR=50\n   //SYSTSPRT DD   SYSOUT=*\n   //SYSTSIN  DD   *\n   PROFILE PREFIX(HLQ)\n    DELETE TEST.N.PDSE\n    ALLOC DS(TEST.N.PDSE) NEW SPA(30,30) DSNTYPE(LIBRARY,2)\n       MAXGEN(10) LIKE(TEST.PDSE)\n    FREE DS(TEST.N.PDSE)\n   /*\n   //COPY     EXEC PGM=IKJEFT1B,DYNAMNBR=50\n   //SYSEXEC  DD  DISP=SHR,DSN=USERID.PDSEGEN.EXEC\n   //STEPLIB  DD  DISP=SHR,DSN=USERID.PDSEGEN.LOAD\n   //ISPTLIB DD  DISP=SHR,DSN=SYS1.SISPTENU\n   //ISPPROF DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPPLIB DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPSLIB DD  DISP=(,DELETE),SPACE=(TRK,(1,1,1)),UNIT=SYSDA,\n   //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n   //ISPMLIB  DD DISP=SHR,DSN=SYS1.SISPMENU\n   //SYSTSPRT DD   SYSOUT=*\n   //SYSTSIN  DD   *\n   PROFILE PREFIX(HLQ)\n   ISPF CMD(%PDSEGENC TEST.PDSE TEST.N.PDSE *)\n   /*\n\n=ISPF/EDIT/VIEW/COMPARE\n)F Function -\n\n   The COMPare command in ISPF Edit and View has been extended to allow\n   the ability to compare to another member generation within the\n   current PDSE. The traditional COMPARE syntax still works.\n\n   The new syntax to use this extension is:\n\n          Syntax:    COMPare member new-gen old-gen\n          Examples:  COMPare abc -2 0\n                     COMPare -3\n\n   If the generation is 0 then the command is the same as a compare\n   without the generation.\n\n   It is possible to compare other generations with the same member\n   name using this extension.\n\n   Note: All standard Compare functions continue to work with this\n   extension.\n\n=LEFT=RIGHT\n)F Function -\n\n   The LEFT and RIGHT commands (or F10 and F11) can be used to change\n   the member list display from a 2 digit year to a 4 digit year\n   display, and from a 1 character line selection to 9 characters.\n\n   There are two sets of panels, one with the Absolute generation number\n   and one set without. This is to support sites/users where the\n   Absolute and/or Relative generation numbers may exceed the column\n   size on the panels with the Absolute generation column.\n\n   Note that the member list display that is last used will be\n   remembered for the next PDSEGEN session.\n\n=NOTES\n)F Function -\n\n  1.  Browse works as you would expect it to on both normal members\n      and member generations.\n\n  2.  Using Edit or View you can use all normal edit commands,\n      including edit macros. However commands that reference other\n      members can only reference the base, or generation 0 member.\n\n  3.  Multiple members may be selected for Browse or View but Edit\n      will only work if the member IS NOT saved or updated.  If a\n      member is saved or updated then all rows for that member are\n      deleted and re-added to include the updated generation info.\n\n  4.  It shouldn't have to be stated but generations are only\n      supported for PDSE Version 2 datasets where generations have\n      been enabled when the dataset was allocated.\n\n  5.  Edit will be converted to View for non-0 generation members.\n\n  6.  The Compare command only accepts relative generation numbers.\n\n  7.  The Compare line option will compare the base generation (gen 0)\n      to the selected non-0 generation.\n\n  8.  It is possible to allow Edit to edit a generation BUT when that\n      happens only the generation is updated and the base member is\n      NOT updated. Thus the generation with the update could be lost\n      and/or hidden since it is not possible to access a generation\n      using Dynamic Allocation or JCL.\n\n      This application has been configured to prevent editing non-0\n      generations.\n\n  9.  The e-mail option utilizes XMITIP using the XMITIPFE (front end)\n      exec. This option is only available if the mail variable is\n      customized to 1.\n\n  10. Aliases are NOT supported by this application at this time and\n      they are not displayed in the member list.\n\n  11. If using FIND you can improve the performance by reducing the\n      number of members to search by using Filter before Find.\n\n  12. Prune operates on only the members in the display list so\n      using Filter before Prune is a good way to limit the members\n      that Prune will clean up.\n\n  13. Before using Prune a Backup is recommended (CYA).\n\n  14. PDSEGEN supports extended statistics. If a member has more than\n      64K (65535) records then the only way to display the actual record\n      count is to turn on extended statistics using the ISPF Edit\n      command STATS EXT.\n\n  15. The ISPF Edit COMPARE command has been changed to use the PDSEGCPR\n      edit macro. This allows the ability to still do all the normal\n      compares AND adds the ability to, while in Edit or View, to\n      compare to other member generations.\n\n  16. If you see a member with a -1 generation and there is no 0\n      generation that indicates that the member was deleted outside of\n      PDSEGEN. The normal ISPF member delete will delete the base member\n      but leave the generations and the base member will become the -1\n      generation.  PDSE pending delete processing should clean this up\n      at some point.\n\n  17. The Member list display defaults to a 2 digit year display. Using\n      the Left or Right keys (F10 or F11) will shift to use the 4 digit\n      year display by removing the Initial size field from the table.\n      This view is remembered across sessions.\n\n  18. When Hide is active, Delete, Prune, and Rename are not available.\n\n  19. PDSEGEN supports up to approximately 42000 members, or members and\n      generations. Any member, or generation, beyond that will not be\n      processed, even if filtering is used.\n\n  20. The more members, or members and generations, in a PDS/PDSE the\n      more processing is required to read the information and build the\n      ISPF table. Just be aware if the PDS/PDSE has a large number of\n      members, or members and generations.\n\n  21. Dummy members are those members that are displayed using the HIGEN\n      command. These members are actually small pseudo-members in the\n      PDSE directory that contain the highest absolute generation number\n      used by the member when the member had generations. If a member\n      has at least one generation then there will be no dummy member. If\n      a member has never had any generations there will be no dummy\n      member.  If all members generations are deleted then a dummy\n      member will be created.  If a member and all of its generations\n      are deleted then a dummy member is created. This member is used to\n      restart the absolute generation counter when generations are once\n      again created for that member name.\n\n=OVERVIEW\n)F Function -\n\n  PDSEGEN is an ISPF dialog designed to enable the ISPF user to exploit\n  the PDSE Member Generations capability that IBM introduced with z/OS\n  2.1 with the introduction of PDSE Version 2 Libraries. This dialog\n  uses only IBM documented interfaces and services to provide all of the\n  functions that you will find when you use it.\n\n  Background\n\n  IBM introduced PDSE Version 2 with z/OS 2.1 and included member\n  generations as part of that release. With this the IBM ISPF product\n  provided very basic access to member generations, leaving it up to\n  others to provide the means to fully exploit them.\n\n  PDSEGEN was developed to allow the author to work with PDSE member\n  generations after seeing a SHARE presentation by IBM on the topic.\n  This small project evolved into a tool for use by others as the\n  benefit became very apparent. With the assistance and advice or\n  several other ISPF experts around the country the tool has developed\n  into what you are using today. It is released as open source under\n\n\n  into what you are using today. It is released as open source under\n  the GPL V3 license - which means it's free and all source is provided\n  with the distribution.\n\n  What are Member Generations\n\n  A Member Generation is to a PDS member what a Generation Data Set is\n  to a dataset. When a PDSE is allocated it is the responsibility of the\n  individual performing the allocation to define how many generations to\n  allow, up to the installation defined maximum (use the Info command to\n  view information about the active PDS/PDSE and included in that\n  display will be the MaxGen for the current PDS/PDSE and the System\n  MaxGen value.\n\n  The original member will always be relative, and absolute, generation\n  0.  Each time a member is updated (saved) a new generation is created\n  (unless Save NoGen is used). The new generation will be the original\n  member prior to the updates. As generations are created the absolute\n  generation number will be incremented, up to the maximum value of\n  2,000,000,000, while the relative generation will decrement (from -1\n  to -nn, where nn is the installation MaxGens limit). Once the\n  generations reach the installation limit, the oldest will be deleted.\n\n  Be very aware that member generations are outstanding as they provide\n  a way to find the last working member if changes are made that break\n  something, BUT they are also useless outside of the PDSEGEN dialog for\n  the simple reason that neither JCL or Dynamic Allocation can access\n  them. If you want to work with a member generation then you have to\n  copy it into a non-generation member.\n\n  Of Note\n\n  - Space Allocations\n\n  Because a member can have multiple generations the space allocation\n  for the PDSE needs to factor in that additional space.\n\n  - Backup, Copy, and Restore\n\n  PDSEGEN fully supports making usable backup copies of any PDSE with\n  member generations, something that IEBCOPY and a majority of other\n  programs do not. The backup is a normal PDS without member generations\n\n  PDSEGEN fully supports making usable backup copies of any PDSE with\n  member generations, something that IEBCOPY and a majority of other\n  programs do not. The backup is a normal PDS without member generations\n  that can then be copied or backed up using standard utilities. The\n  Restore process converts the backup PDS into a PDSE with member\n  generations restored. During the backup/restore process the relative\n  generation number will be retained, unfortunately the absolute\n  generation number will be lost (not that the absolute generation is\n  all that useful).\n\n  - Compare\n\n   PDSEGEN also provides the ability to compare a generation to it's\n   base member, or to compare two different generations of a member.\n\n  More Information\n\n  This TSO Help member covers all of the PDSEGEN dialog, including\n  some functions that can be performed in Batch (i.e. Backup, Restore,\n  and Copy).\n\n=IEBPDSE\n)F Function -\n\n   IEBPDSE is used to validate a PDSE data set and determine whether it\n   is valid or corrupted.  IEBPDSE produces a message data set that\n   contains informational messages (for example if the data set was\n   found to be corrupted), the results of the validation check, and\n   error messages.\n\n   The PDSEGEN VALIDATE command uses utility program  IEBPDSE with the\n   PERFORMPENDINGDELETE option.\n\n   Sample JCL:\n\n   //ST01    EXEC PGM=IEBPDSE,PARM='PERFORMPENDINGDELETE'\n   //SYSPRINT DD SYSOUT=*\n   //SYSLIB DD DISP=SHR,DSN=hlq.pdse.dsname\n   /*\n\n=RESTRICTIONS\n)F Function -\n\n   1. The MAXGENS option defines the number of generations plus 1 for\n      the base or generation 0 member.  Thus a MAXGENS of 10 yields\n      11 members.\n\n   2. You can delete an individual generation and that will leave a\n      gap in the generations. This is not critical but is curious.\n\n   3. Use of TSO DELETE will delete the base member BUT will NOT\n      Delete any generations. The ISPF LMMDEL service will delete\n      the base member and ALL generations. This application uses\n      its own routine, PDSEGDEL, that uses the STOW delete generation\n      interface for delete processing.\n\n      - If you delete a member and all generations and then create a\n        new member with the same name. All generations for the new\n        member will start with the previous members generation next\n        high generation number.\n\n      - Some ISPF applications do not use LMMDEL to delete members\n        but use the equivalent of the TSO DELETE, with the same\n        results.\n\n   4. The use of ISPF copy services, including 3.3, will NOT copy\n      any generations. Nor will IEBCOPY. The only tool to copy\n      generations is DFDSS (a full dataset dump/restore/copy). This\n      application does not support copying at this time.\n\n   5. If you Edit a generation other than 0 and save it then no new\n      generation is generated. That only happens when editing\n      generation 0.\n\n      This option is not available with this application.\n\n   6. You CANNOT access any generations using JCL or Dynamic\n      Allocation.\n\n   7. You can force a new generation, when editing generation 0, by\n      using the Edit command SAVE NEWGEN.\n\n   8. You can prevent the creation of a new generation by using the\n      Edit command SAVE NOGEN\n\n   9. FTP (IBM's) does not support PDSE Member Generations.\n\n  10. The system PARMLIB and SYS1.PROCLIB must be a PDS and NOT a PDSE.\n      This is also true for all datasets referenced in MSTJCLxx.\n      (other proclib's may be PDSE)\n\n=HINTS=TIPS\n)F Function -\n\n   1. Using Member Generations *will* increase the space requirements\n      for the PDSE (generations take space).\n   2. Use The Copy option to create a PDSE with member generations from\n      a non-generation enabled PDS.\n   3. Use Prune when you're happy with the current gen 0.\n      a.  perhaps prune 1 or 2 so there is fallback but you don't need\n          all generations.\n   4. Use Filter and/or Hide to limit the display of members to a\n      manageable number.\n   5. Remember the generations are NOT accessible from JCL or Dynamic\n      Allocation which precludes 99% (99.999%) of all TSO commands,\n      CLISTs, REXX, and ISPF dialogs.\n      a.  Use Promote or Recover to access the generations you need to\n          access.\n   6. Use Backup (PDSEGBAK) to make a portable copy of your PDSE with\n      generations.\n      a.  Use Restore (PDSEGRST) to restore the copy.\n   7. You can Edit and change backup members.\n      a.  This will change the contents of the generations and their\n          ISPF Stats.\n      b.  Do so with CAUTION.\n   8. The MOD column shows the number of records that were changed\n      (modified) when the member/generation was saved. This\n      information is only available when the member has both STATS and\n      NUMBERS enabled.\n   9. Create a portable copy (pdsegbak) for backup\n      and transfer to other locations then use pdsegbak\n      to restore.\n  10. Change the maxgen value using pdsegenc (copy)\n      or pdsegbak (backup then restore).\n  11. A PDSE will retain member information so that if a member is\n      deleted and then later recreated then the generation count will\n      pick up from where it was. This information is retained what IBM\n      refers to as 'dummy' members. These members cannot be processed\n      in anyway.\n\n=FEATURES\n)F Function -\n\n   1. Find a string of text in all members and generations.\n   2. Protection from editing a non-0 generation.\n      a.  ISPF allows this (bozo no no).\n   3. Promote a non-0 generation to the base generation.\n      a.  The base will become generation -1 so it isn't lost.\n      b.  This allows it to be accessed using JCL, Dynamic Allocation,\n          or other dialogs.\n   4. Recover a non-0 generation to a base (generation 0) member.\n      a.  This allows it to be accessed using JCL, Dynamic Allocation,\n          or other dialogs.\n   5. Compare a base generation (gen 0) to a non-0 generation member.\n   6. Compare two non-0 generations.\n   7. Delete an individual generation that you no longer want.\n   8. Use the Prune command to clean up obsolete generations to\n      conserve space. Use FILTER to limit the members in the display\n      list as those are the only members Prune will operate on.\n      HINT: Do a Backup before using Prune (just in case).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PGLITE": {"ttr": 264707, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01 \"_\\x01 \"_\\x07\\x14\\x03W\\x03W\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-08-12T00:00:00", "modifydate": "2020-08-12T07:14:34", "lines": 855, "newlines": 855, "modlines": 0, "user": "TRIDJK"}, "text": ")F Function -\n The PGLITE exec supports PDSE V2 member generations and is based on\n the critically acclaimed Lionel B. Dyck PDSEGEN dialog which runs\n under the ISPF Dialog Manager.\n\n PGLITE is a simpler version, or subset, of PDSEGEN.\n\n ---\n Copyleft (C) 2020, Janko Kalinic\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n   http://www.gnu.org/licenses/\n)X Syntax -\n     %PGLITE dsname\n\n Aliases  - none.\n Required - dsname\n)O Operands -\n  dsname       - specifies the data set name.  If the data set name is\n                 not entered in quotes ('), your TSO PREFIX will be\n                 appended to the start of the entered data set name.\n)S Subcommands:\n   /           - Hotlist commands pop-up\n   Locate mbr  - scroll to mbr: name\n   Select mbr  - select member for edit\n   Change dsn  - switch datasets\n   FLip        - switch to previous dataset\n   REFresh     - rebuild the member list\n   Big filter  - switch to PDSEGEN\n   SORT column - sort by column\n   Find mbr    - scroll to mbr/ name\n   RFind       - repeat Find\n   Info        - dataset information\n   CLIST       - view SuperC compare listing\n   Real        - use real names from PDSEGEN backup\n   ISPList     - write out member list to ISPLIST\n   VALidate cl - validate with IEBPDSE\n   REFList     - ISPF reference list (datasets)\n   SRCHfor     - search PDS (SuperC)\n   TPC subcmd  - the PDS command\n   VERSion     - show PGLITE version\n   APars       - APARS for PDSE V2 MG\n   FAMS        - display FAMS variables\n   HISt        - display PGLITE modification history\n   HIGen       - display PDSE V2 MG dummy member info\n   ORPHans     - display orphan members\n   QRef        - display PGLITE quick reference\n   SPFX        - extract LoadISPF elements\n   AGE         - display member age metrics\n   ALLOW       - permit Edit of non-zero member generations\n   DISALLOW    - prevent Edit of non-zero member generations\n   Hel cmd     - Help for a command\n   ?           - UDS logo\n   CUP         - Gloria, Gloria, ...\n=LOCATE\n)F Function -\n\n Locate will locate the mbr: value in the Name column.\n The member list will be positioned to the closest matching row.\n\n)X Syntax - Locate value\n Defaults - If value is null, last member name edited.\n\n=FIND\n)F Function -\n\nFind will find the mbr/ value in the Name column.\n\n)X Syntax - Find value\n\n=RFIND\n)F Function -\n\nRepeat Find will find the next mbr/ value in the Name column.\n\nThe ISPF command table must have a user controlled variable for RFIND\nin order for this to work properly.\n\n    Verb      T  Action\n                    Description\n    RFIND     0  &USRRFIND\n                    User controlled variable for RFIND\n    RFIND     0  SETVERB\n                    REPEAT FIND\n\nIf you can not update the installation ISPF command table, here is\na rexx solution you can add to PGLITE early on in the exec.\n\n    zctverb  = \"RFIND\"\n    zcttrunc = 0\n    zctact   = \"&USRRFIND\"\n    zctdesc  = \"User controlled variable for RFIND\"\n    'vget (zsctpref)'\n    ctab = zsctpref'cmds'\n    'tbtop' ctab\n    'tbsarg' ctab\n    'tbscan' ctab 'arglist(zctdesc) condlist(EQ) Next'\n    if rc > 0 then 'tbadd' ctab\n    usrrfind = null\n    'vput (usrrfind)'\n\n)X Syntax - RFind\n\n=CHANGE\n)F Function -\n\nChange will allocate and switch to another DSNAME.\n\n)X Syntax - Change dsname\n\nA \"CHANGE .llq\" command will allocate and switch using the current\nDSNAME with the low-level qualifier (llq) substituted.\n\n<Before>\n  PGLITE\u00ae                  AD.RACFADM.EXEC\n  Command ===> change .panels\n\n<After>\n  PGLITE\u00ae                  AD.RACFADM.PANELS\n  Command ===>\n\n=FLIP\n)F Function -\n\nFLip will switch to the previously allocated PDS that was used.\n\n)X Syntax - FLip\n\n=REFLIST=IRL\n)F Function -\n\nREFList will invoke the ISPF Reference list dialog showing the\nlast 30 referenced datasets.  Any dataset in the list can be\nselected and switched to.\n\nThe MORE command can be used to display other Personal Data Set Lists.\n\n)X Syntax - REFList\n\n   Aliases  - IRL\n\n=REFRESH\n)F Function -\n\nREFresh will refresh the member list by reinvoking the PDSEGENI\nDESERV routine to read the PDS directory.  Non-zero generation\nmembers are displayed in blue, and zero generation members are\ndisplayed in cyan.\n\n)X Syntax - REFresh\n\n=SELECT\n)F Function -\n\nSelect will invoke ISPF Edit for a given member and generation.\n\nA REFresh will be performed after an Edit SAVE operation, thus\nupdating the generation member numbers in the display.  Enter a\nLocate command with no operand to position back to the member\nthat was saved.\n\n)X Syntax - Select member generation\n\n=BIG\n)F Function -\n\nBIG will invoke the critically acclaimed Lionel B. Dyck PDSEGEN\ndialog.\n\nIf no filter is specified, the default is the member name after the\nmember list header.  The rationale being faster entry into PDSEGEN.\n\nYou can combine BIG with a PDSEGEN primary command using the ISPF\ncommand delimiter, such as the following:\n\n  big;backup\n  big;restore\n  big;copy\n  big;model\n  big;prune\n\n)X Syntax - Big filter\n\n=CLIST\n)F Function -\n\nCLIST will view the last SuperC Compare listing generated by the\nZ line command (Edit Compare non-0 gen to gen 0).\n\n)X Syntax - CLIST\n\n=REAL\n)F Function -\n\nReal will change the member list display to reflect the real member\nname and generation contained in the PDSEGEN backup dataset.\n\n)X Syntax - Real\n\nBefore:\n\n   -----------------------------------------------------------\n  |   PGLITE\u00ae                TRIDJK.MBRGEN2.BACK              |\n  |   Command ===>                                            |\n  |                                                           |\n  |     Name       GenNum VV MM  Created     Changed          |\n  |   . $ALLOC            01.00 2019/06/06 2019/06/06 11:27   |\n  |   . $BACKUP           01.00 2019/06/06 2019/06/06 11:27   |\n  |   . $INDEX            01.00 2019/06/06 2019/06/06 11:27   |\n  |   . @0000001          01.01 2019/05/30 2019/06/06 06:46   |\n  |   . @0000002          01.03 2019/05/30 2019/06/06 08:00   |\n  |   . @0000003          01.02 2019/05/30 2019/05/30 10:52   |\n  |   . @0000004          01.07 2009/10/19 2017/03/05 09:15   |\n  |   . @0000005          01.00 2019/05/21 2019/05/21 07:16   |\n  |   . @0000006          01.01 2019/05/21 2019/05/21 07:24   |\n  |   . @0000007          01.02 2019/05/21 2019/05/28 11:39   |\n   -----------------------------------------------------------\n\nAfter:\n\n   -----------------------------------------------------------\n  |   PGLITE\u00ae                TRIDJK.MBRGEN2.BACK              |\n  |   Command ===>                                            |\n  |                                                           |\n  |     Name       GenNum VV MM  Created     Changed          |\n  |   . $ALLOC            01.00 2019/06/06 2019/06/06 11:27   |\n  |   . $BACKUP           01.00 2019/06/06 2019/06/06 11:27   |\n  |   . $INDEX            01.00 2019/06/06 2019/06/06 11:27   |\n  |   . $$$$$$$$        4 01.01 @0000001   2019/06/06 06:46   |\n  |   . $$$$$$$$        5 01.03 @0000002   2019/06/06 08:00   |\n  |   . $$$$$$$$        0 01.02 @0000003   2019/05/30 10:52   |\n  |   . $$$XSTAT        0 01.07 @0000004   2017/03/05 09:15   |\n  |   . $REAL           1 01.00 @0000005   2019/05/21 07:16   |\n  |   . $REAL           2 01.01 @0000006   2019/05/21 07:24   |\n  |   . $REAL           0 01.02 @0000007   2019/05/28 11:39   |\n   -----------------------------------------------------------\n\n=ISPLIST\n)F Function -\n\nISPList will write out the member list to the ISPLIST file.\n\n)X Syntax - ISPList\n\n=SORT\n)F Function -\n\nSORT will sort the member list by column.  SORT invokes Unix SORT\nand the direction is pre-determined for best results.  SORT column\nheaders are underscored and point-and-shoot.\n\nExtended ISPF statistics are sorted into order and displayed with\nscaling factors (M=million, K=thousand) in Size field if necessary.\n\nSORT Size:\n\n   ------------------------------------------------------------------\n  |   PGLITE\u00ae                TRIDJK.MBRGEN2                          |\n  |   Command ===>                                                   |\n  |                                                                  |\n  |     Name       GenNum VV MM  Created     Changed          Size   |\n  |   . BIGUNS          0 01.06 2004/09/01 2005/10/27 15:15  3735M   |\n  |   . $$$XSTAT        0 01.07 2009/10/19 2017/03/05 09:15   255M   |\n  |   . TWOMIL          0 01.00 2009/08/21 2009/08/21 15:24     2M   |\n  |   . HUNDREDK        1 01.00 2019/04/30 2019/04/30 09:00   100K   |\n  |   . NINENINE        0 01.00 2016/07/04 2016/07/04 07:04  99999   |\n  |   . MSPLU20         0 01.00 2009/09/23 2009/09/23 10:16   1041   |\n  |   . PGLITE          0 01.74 2019/04/16 2019/04/25 08:06    338   |\n   ------------------------------------------------------------------\n\n)X Syntax - SORT column\n\n=INFO=USAGE\n)F Function -\n\nInfo will display dataset information similar to the ISPF\nUtility Data set information option.\n\n   ---------------------- Data Set Information ------------------------\n  |                                                                    |\n  |   Data Set Name: 'TRIDJK.MBRGEN2'                                  |\n  |                                                                    |\n  |   Volser:              MVSRES      Management Class:    **None**   |\n  |   Data set name type:  LIBRARY     Storage Class:       **None**   |\n  |   Data set version:    2           Data Class:          **None**   |\n  |   Directory Allocated: 0           Directory Used:      0          |\n  |   Record format:       FB          Extents Allocated:   8          |\n  |   Record length:       80          Extents Used:        0          |\n  |   Block size:          32720       Base Members:        47         |\n  |   Units:               TRACK       Generation Members:  31         |\n  |   Primary:             1           MaxGens:             5          |\n  |   Secondary:           2           System MaxGens:      20         |\n  |   Allocated:           15          Pages Used:          159        |\n  |   Used:                0           Pct Pages Utilized:  88         |\n  |   Orphans:             10          Dummies:             2          |\n  1                                                                    |\n   --------------------------------------------------------------------\n\n)X Syntax - Info\n\n   Aliases  - Usage\n\n=VALIDATE\n)F Function -\n\nVALidate will invoke the IEBPDSE utility program to validate a\nPDSE dataset.\n\nAn operand of CLEAN will direct IEBPDSE to remove any pending delete\nmembers which are no longer needed.  This is done by using the\nPARM=PerformPendingDelete option.\n\n)X Syntax - VALidate operand\n\n=SRCHFOR=SEARCH\n)F Function -\n\nSRCHfor will invoke the ISPF SuperC search utility.  Search is only\nvalid for non-member generation PDSE and PDS files.\n\n)X Syntax - SRCHFOR 'string'\u00dd,W\u00a8\n                            \u00dd,P\u00a8\n                            \u00dd,S\u00a8\n                                \u00dd,startcol\u00a8\n                                           \u00dd:laststartcol\u00a8\n\n   Aliases  - SEArch\n)O Operands -\n))string\n        The character or hexadecimal string to be searched for (enclosed\n        by apostrophes). Use two consecutive apostrophes ('') for one\n        apostrophe within the search string.\n))W\n        Word.   String must appear as a separate word. That is, be\n        delimited by one or more spaces or special characters.\n))P\n        Prefix. String must appear as the first part of some other text.\n))S\n        Suffix. String must appear as the last part of some other text.\n))start_column\n        The column in which the string must start for the search to\n        be successful.  (If a last_start_column is also specified,\n        see description for that operand.)\n))last_start_column\n        The \"latest\" column in which the string can start for the\n        search to be successful.  (Must be separated from the\n        start_column by a colon.)\n\n=VERSION\n)F Function -\n\nVERSion will display the PGLITE version in the long message area.\n\n)X Syntax - VERSion\n\n   ----------------------\n  | PGLITE\u00ae   2019-08-09 |\n   ----------------------\n\n=/=O=HOTLIST\n)F Function -\n\n/ will display a point-and-shoot Hotlist Command pop-up panel\nfor you to select from.  Commands that can have operands will be\ndisplayed in the continued entry panel.\n\n   -------------------------- Point-and-Shoot Hotlist ------------------------\n  |                                                                           |\n  |  Locate   - scroll to mbr: name       VALidate - validate with IEBPDSE    |\n  |  Select   - select member for edit    REFList  - ISPF reference list      |\n  |  Change   - switch datasets           SRCHfor  - search PDS (SuperC)      |\n  |  FLip     - switch to previous dsn    TPC      - the PDS command          |\n  |  REFresh  - rebuild the member list   VERSion  - show PGLITE version      |\n  |  Big      - switch to PDSEGEN         APars    - APARS for PDSE V2 MG     |\n  |  SORT     - sort by column            FAMS     - display FAMS variables   |\n  |  Find     - scroll to mbr/ name       HISt     - display PGLITE mods      |\n  |  RFind    - repeat Find               HIGen    - display dummy mbr info   |\n  |  Info     - dataset information       ORPHans  - display orphan members   |\n  |  CLIST    - view SuperC compare list  AGE      - display mbr age metrics  |\n  |  Real     - real names from backup    Hel      - Help for a command       |\n  |  ISPList  - write out member list     SPFX     - extract LoadISPF elements|\n   ---------------------------------------------------------------------------\n\n)X Syntax - /\n\n=AGE\n)F Function -\n\nAGE will display member age metrics.\n\n   -------------- Member Age Report ------------------\n  |                                                   |\n  |  Dataset: TRIDJK.MBRGEN2                          |\n  |                                                   |\n  |    Members updated today                      0   |\n  |    Members updated yesterday                  2   |\n  |    Members updated this week                  6   |\n  |    Members updated in last 10 days            6   |\n  |    Members updated in 2 weeks                 6   |\n  |    Members updated this month                 9   |\n  |    Members updated in 2 months               17   |\n  |    Members updated this quarter              23   |\n  |    Members updated in 6 months               37   |\n  |    Members updated this year                 71   |\n  |    Members updated in 2 years                71   |\n  |    Members older than dirt                    9   |\n   ---------------------------------------------------\n\n)X Syntax - AGE\n\n   Aliases  - METRICS\n\n=ALLOW\n)F Function -\n\nALLOW will permit Edit of non-zero member generations.\nMaybe you really do not want to do this.  Caution is advised.\n\n)X Syntax - ALLOW\n\n=DISALLOW\n)F Function -\n\nDISALLOW will prevent Edit of non-zero member generations.\nThis is the default.\n\n)X Syntax - DISALLOW\n\n=FAMS\n)F Function -\n\nFAMS will display File Attribute Management Services variables.\n\nOne or more FAMS attribute variable names can be specified as an\noperand.  If no variables are specified, all known attribute variables\nare displayed.\n\n  FAMS attribute variable names (PDSE V2):\n\n  BLKSIZE   -  Block size\n  CATACB    -  Catalog ACB\n  CATNAME   -  Catalog name\n  CATVOL    -  Catalog volume\n  COMPIND   -  Compression indicator\n  DATACLAS  -  Data class\n  DEVTYP    -  Device type\n  DIRBLCKS  -  Directory blocks\n  DSCBTTR   -  DSCB TTR\n  DSCRDT2   -  Dataset creation date\n  DSEXDT2   -  Dataset expiration date\n  DSNVER    -  PDSE version number\n  DSORG     -  Dataset organization\n  ENTNAME   -  Entity name\n  ENTYPE    -  Entity type\n  FILESEQ   -  File sequence number\n  HARPN     -  Highest allocated relative page number\n  HURPN     -  Highest used relative page number\n  LIBSHROP  -  Library share options\n  LRECL     -  Logical record length\n  LTREFDAT  -  Dataset last reference date\n  MAXGENS   -  Maximum generations\n  MAXVOLS   -  Maximum volumes\n  MEMCOUNT  -  Member count\n  MGMTCLAS  -  Management class\n  MINUNITS  -  Minimum units\n  PAGSUSED  -  PDSE pages used\n  PDSEFLAG  -  PDSE flag\n  PDSEXFLG  -  PDSE extended flag\n  RECFM     -  Record format\n  SMSINFOM  -  SMS storage, data, and management class\n  SMSSCMC   -  SMS storage and management class\n  STORCLAS  -  Storage class\n  TOTGENCT  -  Total member generation count\n  TOTMEMCT  -  Total member count\n  VOLCOUNT  -  Volume count\n  VOLFLG    -  Volume flag\n  VOLFLG2   -  Volume flag 2\n  VOLLIST   -  Volume list\n  VOLSER    -  Volume serial\n\n)X Syntax - FAMS operand\n\n  Example:  Command ===> fams maxgens dsnver pagsused\n=+\n)F Function -\n\nUsing a plus sign at the end of the command will cause the command\ncontinued entry panel to be displayed.  You can enter up to 255\ncharacters on that panel.\n\n)X Syntax - command +\n\n=APARS\n)F Function -\n\nAPARS will display APARS for Member Generations.\n\n)X Syntax - APARS\n\n=HIST=MODS\n)F Function -\n\nHIST will display a history of PGLITE modifications.\n\n)X Syntax - HISt\n\n   Aliases  - MODS\n\n=DESERV\n)F Function -\n\nDESERV will display the PDSEGENI DESERV return codes.\n\n)X Syntax - DESERV\n\n=DSN\n)F Function -\n\nDSN will display the PDSEGEN dataset history table which contains\nall datasets that have been accessed by PDSEGEN.  PGLITE will switch\nto the dataset if selected by number on the command line or by using\nthe (s)elect line command.\n\n)X Syntax - DSN\n\n=QREF\n)F Function -\n\nQREF will display the PGLITE Quick Reference Card.\n\n)X Syntax - QREF\n\n=DUMMIES\n)F Function -\n\nDUMMIES will display the number of dummy members.\n\n)X Syntax - DUMmies\n\n=HIGEN=DEBUG\n)F Function -\n\nHIGEN will display the PDSEGENI dummy member records.  The member\nname and absolute generation number are displayed in character or hex.\nCharacter is the default format.\n\nA dummy member is a member that holds information about a previously\ndeleted member. That information includes the highest absolute\ngeneration that was used for the member before it, or it's generations,\nwere deleted.\n\n)X Syntax - HIGen Char/Hex\n\n   Aliases  - DEBug\n\n=ORPHANS\n)F Function -\n\nORPHANS will display the orphan members of a member generation PDSE.\nThese are members that do not have a corresponding base member (gen-0).\nOrphans can be created when a STOW C|D directory action is issued for\na base member name.\n\n)X Syntax - ORPHans\n\n=LINE=COMMANDS\n)F Function -\n\n  B  -  Browse\n  E  -  Edit\n  S  -  Edit\n  V  -  View\n  .  -  View (cursor select)\n  D  -  Dump (hex dump of PDSEGENI member record)\n  T  -  Tryit edit macro\n  Z  -  Compare non-0 gen to gen 0\n  /  -  Options\n\n)X Syntax - line command\n\n=TPC\n)F Function -\n\nThe PDS Command.  A TSO command processor and ISPF dialog program.\n\n)X Syntax - TPC subcommand operands\n\n=SPFX\n)F Function -\n\nExtract LoadISPF elements (IEBUPDTE format) in preparation for\nloading into ISPF libraries (panels, execs, and TSO help) and\nsubsequent removal from PGLITE.\n\nCustomization of PGLITE will be required (see /* PGXLITE */ comments).\nThe PGLX exec in this distribution has the necessary LIBDEF commands\nto define the ISPF libraries that were loaded.\n\n)X Syntax - SPFX\n\n=BACKUP\n)F Function -\n\nInvoke PDSEGEN BACKUP function.\n\n)X Syntax - BACKUP\n\n=RESTORE\n)F Function -\n\nInvoke PDSEGEN RESTORE function.\n\n)X Syntax - RESTORE\n\n=COPY\n)F Function -\n\nInvoke PDSEGEN COPY function.\n\n)X Syntax - COPY\n\n=MODEL\n)F Function -\n\nInvoke PDSEGEN MODEL function.\n\n)X Syntax - MODEL\n\n=PRUNE\n)F Function -\n\nInvoke PDSEGEN PRUNE function.\n\n)X Syntax - PRUNE\n\n=PDSEGENI=STEM=DUMP\n)F Function -\n\nPDSEGENI member. stem format.\n\n  Field      Start Length\n\n  member      5    8\n  absgen     13    8\n  vrm        22    5\n  cdate      35    7   yyyyddd\n  ttr        46    3\n  mdate      49    7   yyyyddd\n  mtime      56    7   0hhmmss\n  userid     63    8\n  mmod       71    2   hex mod records\n  cur size   75    4   hex\n  init size  79    4   hex\n  dummy flag 87    1   D for dummy generation\n\n=PANELMOD=ISREDDE2\n)F Function -\n\n<ISREDDE2 mod to display Gen: number on title line>\n\n/*  Add to end of )INIT section  */\nIF (&gen = '')\nELSE\n   IF (&zmemb \u00ac= ' ') &ztitle =  '&zdsn(&zmemb) Gen: &gen'\n   IF (&zmemb  = ' ') &ztitle =  '&zdsn'\n\n</ISREDDE2 mod>\n\nVIEW       TRIDJK.MBRGEN2($$$$$$$$) Gen: 106         Columns 00001 00072\nCommand ===>                                            Scroll ===> CSR\n****** ***************************** Top of Data ***********************\n==MSG> -CAUTION- View session has been started for generation 106\n==MSG>           High generation number is currently 106\n000001 After ISREDDE2 panel modification\n****** **************************** Bottom of Data *********************\n\n=HEL\n)F Function -\n\nHEL will display the PGLITE pseudo TSO Help member that you are\nreading now.\n\n)X Syntax - Hel command\n\n=CUP\n)F Function -\n\n  The best for last.  Gloria, Gloria, ...\n\n)X Syntax - CUP\n\n=MESSAGE=MS=MES=MSG=MESS=MSGS=MESSA=MESSAG=MESSAGES\n)F Function -\n The MESSAGE HELP entry is provided to document PGLITE messages.\n\n)M Messages -\n   PGLITE has the following messages:\n\n))!@#$% is an invalid command.\n   The command entered is not valid.\n\n))CHARS 'chars' found\n   Search for CHARS 'chars' was successful.\n\n))*Bottom of list reached*\n   CHARS 'chars' not found. Press RFIND key to continue the search from\n   the top of the member list.\n\n))bigcmd is a PDSEGEN command, Press ENTER to invoke.\n   bigcmd can be BACKUP, RESTORE, COPY, MODEL, or PRUNE.\n   Press ENTER to invoke the PDSEGEN dataset command.\n\n))Install FAMSEXTR program from CBT 182 FAMSXMIT file.\n   The FAMSEXTR program must be installed in a task library for\n   the FAMS command to function.\n\n))Member table has been successfully listed.\n   The member table has been written to the ISPLIST dataset.\n\n))PGLITE\u00ae   yyyy-mm-dd\n   The VERSION command displays the PGLITE version date.\n\n))PGLITE\u00ae Motto...\n   When you believe an idea, hold true.\n\n))String 'string' found in nnnnn members.\n   ISPF SuperC Search-For found data in nnnnn members.\n\n))The current dataset is not a PDSEGEN backup dataset.\n   The REAL command only works for PDSEGEN Backups.\n\n))Valid line commands are: E=Edit, V=View, B=Browse, S=Edit, T=Tryit.\n   You can enter these line commands for a base member generation.\n\n))Valid line commands are: E=Edit, V=View, B=Browse, S=Edit, T=Tryit,\n  Z=Compare to generation 0.\n   You can enter these line commands for a non-zero member generation.\n\n))Invalid GEN parameter\n   GEN has been specified for an edit/view service when the source data\n   set does not contain the specified member, the specified generation,\n   or the data set does not support member generations.\n\n=SMPINSTALL=MCS=MRBILL\n++ FUNCTION(PGL0100) .\n++ VER (Z038)\n   DELETE (PGL0000)\n/* Drop previous PGL levels if installed under SMP.\n\n Documentation.\n    This is an an SMP install of PGLITE.\n\n Directions.\n    The panels, execs, help, and object must be extracted and removed\n    from the PGLITE exec and copied to SMPPREFX.PGPSORC.  These members\n    can be extracted with the SPFX command.\n\n    The LoadISPF/DropISPF routines should be nullified in PGLITE.\n    Skeldd should be overridden by the do_pgxlite routine.\n\n      Change..> DropISPF: Procedure; return 0    /* PGXLITE */\n      Change..> LoadISPF: Procedure; return 0    /* PGXLITE */\n\n                parse var load_info . . . . skeldd .\n      Add.....> call do_pgxlite                  /* PGXLITE */\n                parse var load_info . . . . skeldd .\n      Add.....> call do_pgxlite                  /* PGXLITE */\n\n    This member is then received.\n\n    Libraries to be allocated:\n      80 byte FB  :     PGPEXE, PGPPNL, PGPHLP, PGPOBJ\n      Load library:     PGPLINK\n      This library:     PGPSORC\n      One DLIB    :     APGPSRC\n\n    These must be made known to the SMP procedure, or as DDDEFs.\n\n    Approximate space requirements on 3390 drives (please allocate\n    secondary space):\n\n      PGPPNL    -     15  Tracks    -     5   Directory blocks\n      PGPEXE    -     15  Tracks    -     5   Directory blocks\n      PGPHLP    -     15  Tracks    -     5   Directory blocks\n      PGPOBJ    -     15  Tracks    -     5   Directory blocks\n      PGPLINK   -     15  Tracks    -     5   Directory blocks\n      APGPSRC   -     15  Tracks    -     5   Directory blocks\n\n*/ .\n++JCLIN .\n//LK1    EXEC  PGM=IEWL,\n//             PARM='MAP,RENT,REUS,RMODE(ANY),AMODE(31)'\n//PGPOBJ   DD  DISP=SHR,DSN=SYS1.PGPOBJ             <<=== MODIFY\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.PGPLINK            <<=== MODIFY\n//SYSLIN   DD  *\n  INCLUDE  APGPOBJ(PDSEGENI)\n  ENTRY    PDSEGENI\n  NAME     PDSEGENI(R)\n++PNL(PGLDIRG )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLDIRH )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLDIRH2)  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLLOGO )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLBLUES)  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLHOT  )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLINFO )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)   .\n++PNL(PGLGENI )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)  .\n++PNL(PGLAPARS)  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)  .\n++PNL(PGLQREF )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)  .\n++PNL(PGLAGE  )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)  .\n++PNL(PGLCONT )  DISTLIB(APGPSRC) SYSLIB(PGPPNL)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLITE  ) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(GNAME   ) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLFIRST) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLRESET) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLCOMPZ) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLFHELP) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PDSEGFND) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PDSEGVAL) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLFAMSX) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++EXEC(PGLX    ) DISTLIB(APGPSRC) SYSLIB(PGPEXE)\n  TXLIB(PGPSORC)  .\n++HELP(PGLHELP ) DISTLIB(APGPSRC) SYSLIB(PGPHLP)\n  TXLIB(PGPSORC)  .\n++OBJ(PDSEGENI)  DISTLIB(APGPSRC) SYSLIB(PGPOBJ)\n  TXLIB(PGPSORC)  .\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT182/CBT.V500.FILE182.PDS/PGHXMIT.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT182/CBT.V500.FILE182.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}