{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013710000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE987.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE987.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x07'", "DS1TRBAL": "b'\\xa3\\x18'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\n|\\x00\\r\\n}\\x00\\x02\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x001\\x01\\x19\\x10\\x7f\\x01\\x19\\x10\\x7f\\x11C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-17T00:00:00", "modifydate": "2019-04-17T11:43:31", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  987\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE987\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,208 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/17/19    11:43:31    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE987": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00&\\x01\\x19\\x10\\x7f\\x01\\x19\\x10\\x7f\\x11C\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-17T00:00:00", "modifydate": "2019-04-17T11:43:26", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 987 is from Sam Golob and contains a few utilities        *   FILE 987\n//*           which were rescued from the NaSPA VIP utilities tape  *   FILE 987\n//*           of \"old\" (around 1990 or before).  They either didn't *   FILE 987\n//*           work at all, or they didn't work well, under z/OS.    *   FILE 987\n//*           Now (at least) they work.                             *   FILE 987\n//*                                                                 *   FILE 987\n//*           Of course:  Thanks to Scott Sherer, president of      *   FILE 987\n//*                       NaSPA.                                    *   FILE 987\n//*                                                                 *   FILE 987\n//*                       And thanks to Marty Kuntz, who managed    *   FILE 987\n//*                       the contents of the NaSPA VIP tape and    *   FILE 987\n//*                       its construction, for many years.         *   FILE 987\n//*                                                                 *   FILE 987\n//*           email:  sbgolob@cbttape.org                           *   FILE 987\n//*                                                                 *   FILE 987\n//*       These utilities (so far) are:                             *   FILE 987\n//*                                                                 *   FILE 987\n//*       WAITT    - A utility to adjust the timeout time on your   *   FILE 987\n//*                  TSO session, or make it not time out at all.   *   FILE 987\n//*                                                                 *   FILE 987\n//*       SMFMON   - A TSO command to report the status of your     *   FILE 987\n//*                  system's SMF datasets.                         *   FILE 987\n//*                                                                 *   FILE 987\n//*       DSMF     - A \"better\" utility to report on SMF datasets   *   FILE 987\n//*                  which came from CBT File 300.  Included here   *   FILE 987\n//*                  in case you want to work on SMFMON to improve  *   FILE 987\n//*                  it further.                                    *   FILE 987\n//*                                                                 *   FILE 987\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSMF": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x16\\x00\\x91\\t\\x8f\\x01\\x13\\x00/\\x10 \\x022\\x00\\xd0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1991-04-08T00:00:00", "modifydate": "2013-01-02T10:20:16", "lines": 562, "newlines": 208, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'DISPLAY SMF DATA SETS THROUGH TSO'\n*---------------------------------------------------------------------*\n*       LARGE FORMAT - PUTLINE                                        *\n*---------------------------------------------------------------------*\n*                                                                     *\n*       THIS TSOCP EMULATES THE OPERATOR 'D SMF' COMMAND. FOUND THE   *\n*       CODE ON A MODS TAPE WITH NO NAME. ALSO IT WAS NOT RE-ENTRANT  *\n*       HAD ALOT OF INTERNAL MACROS, AND HAD HARDCODED OFFSETS. SO    *\n*       ADDED ALL THE DSECTS, ETC.  THIS IS ALSO A GOOD SOURCE TO SEE *\n*       HOW THE SMF INFORMATION IS STORED IN THE 'SMCA' AND COMPANION *\n*       RDS (RECORDING DATA SET BLOCKS). THIS IS ALSO GOOD WHEN YOU   *\n*       ARE A CONTRACTOR AND THEY DON'T GIVE YOU OPERATOR AUTHORITY.  *\n*       BUT YOU HAVE THE RESPONSIBILITY.                              *\n*                                                                     *\n*       JIM MARSHALL, CAPT, USAF-RET                                  *\n*                                                                     *\n* INSTALLED:  8 APRIL 1991                                            *\n*                                                                     *\n* CHANGE LOG: 11JUN91 - RUNS 31 BIT MODE                         JDM1 *\n*                                                                     *\n*             01JAN13 - IEEMBRDS was of the old format.          SBG  *\n*                       Changed it for the new format,                *\n*                       taken from SHOWzOS 7.21 macro library         *\n*                       Converted command from TPUT to PUTLINE.       *\n*                       Added a nice title instead of leading blanks. *\n*---------------------------------------------------------------------*\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSP000    EQU   0                                                 JDM1\n         SPACE\nDSMF     CSECT\nDSMF     AMODE 31\nDSMF     RMODE ANY                                               JDM1\n         SAVE  (14,12),,DSMF_&SYSDATE\n         LR    R12,R15\n         USING DSMF,R12\n         GETMAIN RU,LV=WORKSIZE,SP=SP000,LOC=BELOW               JDM1\n         USING WORKAREA,R1\n         ST    R13,SAVE+4\n         ST    R1,8(R13)\n         LR    R13,R1\n         DROP  R1\n         USING WORKAREA,R13\n         SPACE\n*-------------------------------------------------------------------*\n*        GO GET THE INFORMATION FROM THE SMCA AND RDS\n*-------------------------------------------------------------------*\n         SPACE\n         L     R15,CVTPTR          GET POINTER TO CVT\n         USING CVTMAP,R15          ESTABLISH ADDRESSABILITY\n         L     R3,CVTSMCA          FIND SMCA\n         DROP  R15\n         USING SMCABASE,R3         ESTABLISH ADDRESSABILITY\n         TM    1(R3),X'80'         IS SMF RECORDING ??\n         BO    SMFOK\n         APUT  NOSMF,80            INFORM YOU\n         B     EXIT\n         SPACE\nSMFOK    EQU   *\n         MVC   SMFANS(80),BLANKL   MOVE IN BLANKS                JDM1\n         APUT  TITLE,L'TITLE       PRINT NAME OF REPORT          SBG\n         APUT  TITLEU,L'TITLEU                                   SBG\n         MVC   SMFANS(80),SMFHD    MOVE IN TITLE                 JDM1\n         APUT  SMFANS,80           PUT OUT A TITLE               JDM1\n         MVC   SMFANS(80),BLANKL   MOVE IN BLANKS                JDM1\n         APUT  SMFANS,80           SEND OUT A BLANK LINE         JDM1\n         L     R4,244(R3)          LOAD A(START OF RDS)\n         USING IEEMBRDS,R4         ESTABLISH ADDRESSABILITY\n         L     R5,248(R3)          LOAD A(END OF RDS)\nLOOP     EQU   *\n         MVC   SMFANS(80),BLANKL   CLEAR FOR GOOD PRACTICE\n         MVC   SMFANS(80),SMFLINE  MOVE IN THE SKELETON\n         MVC   SMFANS(27),RDSNAME  MOVE IN SMF DSN ID (27 CHARS OF 44)\n         MVC   SMFANS+28(6),RDSVOLID  MOVE SMF VOLSER\n         MVC   SMFANS+35(9),=CL9'ALTERNATE'\n         TM    RDSFLG1,RDSREADY    IS DS ACTIVE ?\n         BO    LOOP1\n         MVC   SMFANS+35(9),=CL9'ACTIVE'\nLOOP1    EQU   *\n         TM    RDSFLG1,RDSDUMP     IS DUMP REQUIRED ?\n         BNO   LOOP2\n         MVC   SMFANS+35(9),=CL9'DUMP REQD'\nLOOP2    EQU   *\n         TM    RDSFLG2,RDSPHYER    PHYSCIAL I/O ERROR\n         BO    LOOP3\n         TM    RDSFLG2,RDSLOGER    LOGICAL I/O ERROR\n         BO    LOOP4\n         B     LOOP5\nLOOP3    EQU   *\n         MVC   SMFANS+35(9),=CL9'P I/O ERR'\n         B     LOOP5\nLOOP4    EQU   *\n         MVC   SMFANS+35(9),=CL9'L I/O ERR'\nLOOP5    EQU   *\n         SLR   R14,R14             ZERO WORK REG 14\n         L     R15,RDSNXTBL        ADDRESS OF NEXT BLOCK\n         BCTR  R15,0\n         CVD   R15,DBLEWD2\n         M     R14,=F'100'\n         L     R1,RDSCAPTY         SMF DS CAPACITY\n         CVD   R1,DBLEWD1\n         DR    R14,R1              GET PERCENT FULL\n         CVD   R15,DBLEWD3\n         MVC   SMFALOC(10),MASK1   MOVE IN THE MASK\n         ED    SMFALOC(10),DBLEWD1+4\n         MVC   SMFUSED(10),MASK1   MOVE IN THE MASK\n         ED    SMFUSED(10),DBLEWD2+4\n         MVC   SMFPERC(4),MASK2    MOVE IN THE MASK\n         ED    SMFPERC(4),DBLEWD3+6\n         APUT  SMFANS,80\n         L     R4,RDSNEXT          GET NEXT RDS ON CHAIN\n         CR    R5,R4               AT END OF CHAIN ???\n         BNE   LOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW WE CLEANUP AFTER OURSELVES AND GO HOME.\n*--------------------------------------------------------------------*\n         SPACE\nEXIT     EQU   *\n         LR    R1,R13\n         L     R13,SAVE+4\n         FREEMAIN RU,LV=WORKSIZE,A=(R1),SP=SP000                 JDM1\n         RETURN (14,12),RC=0\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREA FOLLOWS\n*--------------------------------------------------------------------*\n         SPACE\nTITLE    DC    C'                       DISPLAY SMF DATASETS '\nTITLEU   DC    C'                       ------- --- -------- '\nBLANKL   DC    CL80' '\nMASK1    DC    XL10'40206B2020206B202120'\nMASK2    DC    XL4'40202120'\nNOSMF    DC    CL80'SMF IS NOT PRESENTLY RECORDING '\nSMFHD    DC    CL80'--- SMF DATASET NAME ------ VOLSER --STATE-- BLKS Ax\n               LLOC  BLKS USED %FULL'\n*                   01234567890123456789012345678901234567890\nSMFLINE  DS    0CL80\n         DC    CL36' SYS1.MAN?                  VOLSER  '\n         DC    CL09'ACTIVE'\n         DC    CL11' X,XXX,XXX '   BLKS ALLOCATED\n         DC    CL11' X,XXX,XXX '   BLKS USED\n         DC    CL05' XXX '\n         DC    CL8' '\n         LTORG\n         SPACE\nWORKSIZE EQU   WORKEND-WORKAREA                                  JDM1\n         SPACE\nWORKAREA DSECT\n         DS    0D\nSAVE     DS    18F\nDBLEWD1  DS    D\nDBLEWD2  DS    D\nDBLEWD3  DS    D\n         SPACE\nSMFANS   DS    0CL80\n         DS    CL36' SYS1.MAN?  VOLSER  '\n         DS    CL09'ACTIVE'\nSMFALOC  DS    CL11' X,XXX,XXX '   BLKS ALLOCATED\nSMFUSED  DS    CL11' X,XXX,XXX '   BLKS USED\nSMFPERC  DS    CL05' XXX '\n         DS    CL8' '\nWORKEND  EQU   *\n         SPACE\n         CVT   DSECT=YES,LIST=NO\n         SPACE\n         IEESMCA\n         SPACE\n*--------------------------------------------------------------------*\n*        RECORDING DATA SET BLOCKS                                   *\n*        --------- ---- --- ------                                   *\n*    Replaced with new DSECT from SHOWzOS 7.21 macro library.        *\n*    The old version was from when SMF datasets had to be SYS1.MANx  *\n*--------------------------------------------------------------------*\nIEEMBRDS DSECT                         SMF RDS\nRDSID    DS    C'RDS '                 CONTROL BLOCK ID\nRDSNEXT  DS    A(IEEMBRDS)             FORWARD CHAIN POINTER\nRDSPREV  DS    A(IEEMBRDS)             BACKWARD CHAIN POINTER\n*\nRDSFLG1  DS    X\nRDSFREE  EQU   X'10'                   NEED TO FREE DATASET\nRDSDUMP  EQU   X'08'                   OPER HAS BEEN TOLD TO DUMP DS\nRDSREADY EQU   X'04'                   DS IS OPEN AND READY\nRDSCLOSE EQU   X'02'                   DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'                   DS NEEDS TO BE OPENED\n*\nRDSFLG2  DS    X\nRDSLOST  EQU   X'80'                   DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'                   PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'                   LOGICAL I/O ERROR\nRDSFLG3  DS    X                       RESERVED\nRDSDSLEN DS    AL1(L'RDSNAME)          LENGTH OF DATA SET NAME  HBB5510\nRDSNAME  DS    CL44'SYS1.MANX '        DATA SET NAME            HBB5510\nRDSVOLID DS    C'SYSRES'               VOLUME SERIAL\n         DS    2X                      alignment                HBB5510\nRDSDDN   DS    C'SYS00001'             DDNAME RETURNED BY DYNALLOC\nRDSCAPTY DS    F                       CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F                       NUMBER OF NEXT AVAIL BLOCK\nRDSBQE   DS    A                       ADDR OF BQE BEING WRITTEN\nRDSAVSPC DS    F                       AVAIL SPACE FROM SHOWCB\nRDSENRBA DS    F                       ENDRBA FROM SHOWCB\nRDSCINV  DS    F                       CONTROL INTERVAL SIZE\nRDSDOMID DS    F                       MSG # OF DUMP MSG\n         DS    F                                                HBB5510\nRDSRPL   DS    19F                     VSAM RPL\nRDSACB   DS    19F                     VSAM ACB\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSMF$": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00T\\x01\\x126?\\x01\\x13\\x00\\x1f!C\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2013-01-01T21:43:54", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(DSMF)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DSMF\n SETSSI  CB486300\n SETCODE AC(0)\n ENTRY   DSMF\n NAME    DSMF(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFMON": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\t\\x01\\x19\\x06_\\x01\\x19\\x06o\\x14!\\x00\\xc1\\x00\\xeb\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2019-03-06T00:00:00", "modifydate": "2019-03-07T14:21:09", "lines": 193, "newlines": 235, "modlines": 0, "user": "SBGOLOB"}, "text": "*----------------------------------------------------------------------\n*\n*        FREEWARE: THIS PROGRAM IS DISTRIBUTED ON AN AS-IS BASIS\n*                  WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n*\n*                  THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n*                  P.O. BOX 21525\n*                  GREENFIELD, WI 53221\n*\n*        FIXED BY:  SAM GOLOB  -  MAR 2019   (44-CHAR DATASET NAMES)\n*\n*----------------------------------------------------------------------\n         PRINT OFF\n         MACRO\n         IEEMBRDS\nIEEMBRDS DSECT                         SMF RDS\nRDSID    DS    C'RDS '                 CONTROL BLOCK ID\nRDSNEXT  DS    A(IEEMBRDS)             FORWARD CHAIN POINTER\nRDSPREV  DS    A(IEEMBRDS)             BACKWARD CHAIN POINTER\n*\nRDSFLAG1 DS    X\nRDSFREE  EQU   X'10'                   NEED TO FREE DATASET\nRDSDUMP  EQU   X'08'                   OPER HAS BEEN TOLD TO DUMP DS\nRDSREADY EQU   X'04'                   DS IS OPEN AND READY\nRDSCLOSE EQU   X'02'                   DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'                   DS NEEDS TO BE OPENED\n*\nRDSFLAG2 DS    X\nRDSLOST  EQU   X'80'                   DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'                   PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'                   LOGICAL I/O ERROR\nRDSFLAG3 DS    X                       RESERVED\nRDSDSLEN DS    AL1(L'RDSNAME)          LENGTH OF DATA SET NAME  HBB5510\nRDSNAME  DS    CL44'SYS1.MANX '        DATA SET NAME            HBB5510\nRDSVOLID DS    C'SYSRES'               VOLUME SERIAL\n         DS    2X                      alignment                HBB5510\nRDSDDN   DS    C'SYS00001'             DDNAME RETURNED BY DYNALLOC\nRDSCAPTY DS    F                       CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F                       NUMBER OF NEXT AVAIL BLOCK\nRDSBQE   DS    A                       ADDR OF BQE BEING WRITTEN\nRDSAVSPC DS    F                       AVAIL SPACE FROM SHOWCB\nRDSENRBA DS    F                       ENDRBA FROM SHOWCB\nRDSCINV  DS    F                       CONTROL INTERVAL SIZE\nRDSDOMID DS    F                       MSG # OF DUMP MSG\n         DS    F                                                HBB5510\nRDSRPL   DS    19F                     VSAM RPL\nRDSACB   DS    19F                     VSAM ACB\n         MEND\n         PRINT ON\n         TITLE 'SMFMON - SMF MONITOR'\n***********************************************************************\n*                                                                     *\n*   MODULE NAME:   SMFMON                                             *\n*   CSECT  NAME:   SMFMON                                             *\n*                                                                     *\n*   DESCRIPTION:                                                      *\n*        THIS PROGRAM DISPLAYS THE STATUS OF ALL SMF DATASETS.        *\n*                                                                     *\n*        SMFMON READS THROUGH SYSTEM CONTROL BLOCKS                   *\n*        CVT SMCA AND RDS TO DETERMINE THE STATUS OF ALL              *\n*        SMF RECORDING DATASETS.                                      *\n*                                                                     *\n*   AUTHOR:  JEFF GALLAGHER      EAB     NOV. 1981                    *\n*                                                                     *\n*   FIXED BY SAM GOLOB:  MAR 2019 - FIXED FOR 44-CHAR DATASET NAMES   *\n*                                                                     *\n***********************************************************************\n         EJECT\nSMFMON   CSECT\nSMFMON   AMODE 31\nSMFMON   RMODE 24\n         USING SMFMON,R15        BASE REG AT ENTRY\n         SPACE 1\n         STM   R14,R12,12(R13)   SAVE CALLERS REGS\n         B     SKIPID            BR AROUND PROLOG\n         SPACE 1\n         DC    CL8'SMFMON  '     PROGRAM NAME\n         DC    CL8'&SYSDATE'     LAST MAINTENANCE DATE\n         SPACE 1\nSKIPID   DS    0H\n         LR    R12,R15           R12 IS NEW BASE REG.\n         DROP  R15\n         USING SMFMON,R12        ADDRESSABLITY\n         LA    R2,SAVE           ADDRESS OF MY SAVE,\n         ST    R2,8(R13)         INTO HIS SAVE,\n         ST    R13,4(R2)         AND HIS INTO MINE.\n         LR    R13,R2            MAKE MINE CURRENT\n         SPACE 2\n         USING IEEMBRDS,R5       ADDRESSABILITY\n         USING SMCABASE,R3         FOR MAPPING\n         USING CVT,R2                DSECTS\n*\nPRTITLE  DS    0H\n         STM   R14,R1,SAVR14T1\n         TPUT  PTITLE,72\n         LM    R14,R1,SAVR14T1\n*\n         L     R2,16             CVT\n         L     R3,CVTSMCA        SMCA ADDRESS\n         TM    CVTSMCA,X'80'     IS BIT ON FOR MVS/SE2?\n         BO    SE2                YES, THIS IS REL 2 OF SE\n         TPUT  NGSYS,70           NO, COMPLAIN\n         B     ALLDONE                  AND EXIT.\n         SPACE\nSE2      L     R5,SMCASVCR       GET ADDRESS OF CURRENT RDS\n         TM    RDSFLAG2,RDSLOST  IS SMF RECORDING?\n         BZ    GETFIRST           YES\n         TPUT  NOTREC,72          NO... SAY SO\nGETFIRST L     R5,SMCAFRDS       GET FIRST RDS\n         B     TESTDUMY          CHECK FOR THE DUMMY RDS\nGETNEXT  L     R5,RDSNEXT        GET ADDRESS OF NEXT RDS\n         CLC   SMCARDSH,0(R5)    IS IT THE HEADER?\n         BE    ALLDONE            YES, THATS ALL.\n         SPACE 1\nTESTDUMY TM    RDSFLAG2,RDSLOST  IS IT THE DUMMY?\n         BO    GETNEXT            YES, WE DON'T NEED IT.\n         CLI   RDSFLAG1,X'00'     IS THIS ONE \"ACTIVE\"?\n         BNE   CLC                NO, GO AROUND TPUT\n         C     R5,SMCASVCR       IS THIS ONE REALLY ACTIVE?\n         BNE   NOTAVAIL           NO - ERROR!!\n*                                 YES - ISSUE 'NOW RECORDING ON... '\n         MVC   RECORDG+24(44),RDSNAME  MOVE DSNAME TO MESSAGE\n         TPUT  RECORDG,72 ISSUE THE MESSAGE\nCLC      CLC   RDSNXTBL,=F'1'    IS IT EMPTY?\n         BE    WTOEMPTY  YES, GO SAY SO\n         SPACE 1\n         MVC   PERCENT+3(37),RDSNAME  MOVE IN NAME\n         LM    R9,R10,RDSCAPTY   GET TOTAL SPACE & LAST USED\n         CVD   R9,TOTALSP        PUT IN REGS\n         CVD   R10,LASTUSED\n         SP    LASTUSED,=PL2'1'  SUBTRACT 1\n         MP    LASTUSED,=PL2'100'    MULTIPLY BY 100 FOR PERCENT\n         DP    LASTUSED,TOTALSP+4(4) DO THE DIVIDE FOR PERCENT\n         MVC   ANS,PATTERN       EDIT ANSWER\n         ED    ANS,LASTUSED+2    INTO CHARACTER FORM\n         MVC   PERCENT+41(3),ANS+1   AND PUT INTO MESSAGE\n         TPUT  PERCENT,72 ISSUE THE MESSAGE\n         B     GETNEXT LOOP BACK\n         SPACE 2\nWTOEMPTY MVC   EMPTY+3(39),RDSNAME   MOVE DSNAME TO MESSAGE\n         TPUT  EMPTY,72          ISSUE 'DATASET EMPTY' MESSAGE\n         B     GETNEXT           LOOP BACK\n         SPACE 2\nNOTAVAIL MVC   NOTAV+3(37),RDSNAME  MOVE DSNAME TO MESSAGE\n         TPUT  NOTAV,72          ISSUE 'DATASET NOT AVAILABLE' MSG\n         B     CLC               LOOP BACK TO COMPARE INST.\n         SPACE 2\nALLDONE  L     R13,SAVE+4        RESTORE REG 13\n         LM    R14,R12,12(R13)   RESTORE THE REST\n         SR    R15,R15           ZERO RETURN CODE\n         BR    R14               ALL DONE!\n         TITLE 'SMFMON - STORAGE AREAS AND CONSTANTS'\nSAVE     DS    18F               SAVE AREA\nTOTALSP  DS    D                 DOUBLEWORD WORK AREA\nLASTUSED DS    D                 DOUBLEWORD WORK AREA\nANS      DS    CL4               RESULT OF COMPUTATIONS\nPATTERN  DC    X'40202120'       EDITING PATTERN\nNGSYS    DC    CL72'** MVS SYSTEM MUST BE AT MVS/SE2 OR HIGHER '\nNOTREC   DC    CL72'** SMF IS NOT RECORDING !          **'\nRECORDG  DC CL72'** SMF NOW RECORDING ON                              '\nPERCENT  DC    CL72'**                                       NNN% USED'\nEMPTY    DC    CL72'**                                        IS EMPTY'\nNOTAV    DC    CL72'**                                       NON-AVAIL'\nPTITLE   DC    CL72'**   ----   SMF DATASET STATUS DISPLAY   ----   **'\nSAVR14T1 DC    2D'0'\n         SPACE 2\n         TITLE 'SMFMON - CONTROL BLOCK DSECTS'\n         IEEMBRDS\n         EJECT\n         CVT    DSECT=YES\n         EJECT\n         IEESMCA\n         TITLE 'SMFMON - REGISTER EQUATES'\n*\n*        R E G I S T E R    E Q U A T E S\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMFMON$": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00B\\x01\\x19\\x06_\\x01\\x19\\x06o\\x145\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-06T00:00:00", "modifydate": "2019-03-07T14:35:42", "lines": 25, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE987(SMFMON)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB497987\n SETCODE AC(0)\n NAME    SMFMON(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WAITT": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x006\\x01\\x19\\x06?\\x01\\x19\\x06O\\x15\\x01\\x019\\x00\\xda\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-03-04T00:00:00", "modifydate": "2019-03-05T15:01:36", "lines": 313, "newlines": 218, "modlines": 0, "user": "SBGOLOB"}, "text": "WAITT    TITLE 'TSO COMMAND TO ALLOW RESET OF WAIT TIME CANCEL VALUE'\nWAITT    CSECT ,\nWAITT    RMODE 24\nWAITT    AMODE 31\n*\n         PRINT GEN\n*\n* FUNCTION: ALLOWS A TSO USER TO MODIFY THE TIME VALUE THAT IS USED TO\n*           DETERMINE HOW LONG THE SESSION MAY REMAIN IN A WAIT STATE\n*           BEFORE IT IS CANCELLED (S522 ABEND).  USER MUST HAVE TSO\n*           OPER AUTHORITY, AND THIS COMMAND MUST BE AUTHORIZED IN THE\n*           IKJEFTE2 TABLE (AUTHCMD NAMES ENTRY IN PARMLIB MEMBER\n*           IKJTSOxx).\n*\n* ASSEMBLY MACLIBS:     SYS1.MACLIB\n*\n* LINK EDIT ATTRIBUTES: REUS, AC(1)\n*\n* REQUIREMENTS:   NEED PSCB OPER AUTHORITY TO CHANGE ANYTHING.\n*\n*                 COMMAND MUST BE RUN APF-AUTHORIZED, AND MUST\n*                  BE ENTERED IN THE IKJEFTE2 TABLE.\n*\n* WRITTEN:   AROUND 1989.\n*\n* MODIFIED:  SAM GOLOB  -  MARCH 2019\n*\n* INVOKING: WAITT #####X    (SEE ADDED POWER, BELOW)\n*\n*    WHERE: ##### IS 1 TO 5 DIGIT VALUE\n*\n*               X IS H, M OR S TO SIGNIFY THAT THE VALUE IS HOURS,\n*                 MINUTES OR SECONDS.\n*\n*     NOTE: THE NUMBER OF SECONDS IS CONVERTED INTO WAIT TIME UNITS,\n*           EACH OF WHICH REPRESENTS 1.048576 SECONDS.  SOME VALUES\n*           CAN NOT BE REPRESENTED EXACTLY.  IE: 30 MINUTES IS 1800\n*           SECONDS OR 1716 WAIT UNITS.  WHEN 1716 WAIT UNITS ARE\n*           CONVERTED BACK TO SECONDS, THEY BECOME 1799 SECONDS.\n*           THIS IS NOT A PHENOMENON OF THE COMMAND, BUT OF MVS.\n*\n*    ADDED POWER:   WAITT T  -  EXEMPTS JOB FROM STEP TIMING\n*                   WAITT Z  -  TURNS OF EXEMPTION SWITCH\n*\n*          ASCBRCTF IS X'66' INTO THE ASCB.  X'01' ON, EXEMPTS\n*                                            FROM STEP TIMING.\n*\nFPR0     EQU   0                   FLOATING-POINT  REGISTER 0\n*\nR0       EQU   0                   GENERAL PURPOSE REGISTER 0\nR1       EQU   1                      \"       \"        \"    1\nR2       EQU   2                      \"       \"        \"    2\nR3       EQU   3                      \"       \"        \"    3\nR4       EQU   4                      \"       \"        \"    4\nR5       EQU   5                      \"       \"        \"    5\nR6       EQU   6                      \"       \"        \"    6\nR7       EQU   7                      \"       \"        \"    7\nR8       EQU   8                      \"       \"        \"    8\nR9       EQU   9                      \"       \"        \"    9\nR10      EQU   10                     \"       \"        \"    10\nR11      EQU   11                     \"       \"        \"    11\nR12      EQU   12                     \"       \"        \"    12\nR13      EQU   13                     \"       \"        \"    13\nR14      EQU   14                     \"       \"        \"    14\nR15      EQU   15                     \"       \"        \"    15\n*\n         EJECT ,\n*\n         USING WAITT,R15           TEMPORARY ADDRESSABILITY\n*\nBEGIN    SAVE  (14,12),T,'WAITT      &SYSDATE  &SYSTIME '\n         LA    R12,SAVEAREA        GET ADDRESS OF OUR REG SAVE AREA\n         ST    R13,4(,R12)         PROVIDE BACKWARD\n         ST    R12,8(,R13)          AND FORWARD CHAINING\n         LR    R13,R12             COPY NEW SAVE AREA ADDRESS\n         LR    R12,R15             COPY PROGRAM  BASE ADDRESS\n         DROP  R15                 DROP TEMPORARY ADDRESSABILITY\n         USING WAITT,R12           AND PROVIDE PERMANENT ADDRESSABILITY\n*\n*       APF-AUTHORIZATION CHECK TO BE RUN FIRST..........\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n         L     R3,16               GET ADDRESS OF CVT\n         L     R3,0(,R3)            GET ADDRESS OF TCB/ASCB WORDS\n         L     R3,12(,R3)            GET ADDRESS OF OUR ASCB..........\n*\n         LR    R4,R1               COPY PARM/CPPL ADDRESS\n         TM    0(R4),X'80'         IS IT A PARM OR A CPPL ADDRESS\n         BO    SHOWTIME            IF \"CALL\"ED, JUST SHOW THE TIME\n*\n* CHEAP SECURITY CHECK TO TRY TO KEEP UNAUTHORIZED USERS FROM BEING\n* ABLE TO CHANGE THEIR WAIT TIME.  THIS WILL DO THE TRICK IF YOU RUN\n* THE COMMAND FROM A PROTECTED AUTHORIZED LIBRARY, ELSE YOU MAY WANT\n* TO GET A LITTLE MORE EXOTIC.  (I'VE TURNED IT OFF.  YOU ARE WELCOME\n* TO TURN IT BACK ON--THE CODE HAS BEEN LEFT INTACT.)\n*\n         L     R5,8(,R4)           GET POINTER TO PSCB\n         TM    16(R5),X'80'        DO WE HAVE OPER AUTHORITY\n         BO    YESOPER             YES. GO DO OUR THING.\n         BAL   R8,NOOPER           NO. SEND MESSAGE YOU DON'T HAVE IT\n         B     SHOWTEND            AND EXIT.\nYESOPER  DS    0H                  USER HAS PSCB OPER AUTHORITY.\n         B     CHKCOMD             USER CHECK CURRENTLY DISABLED,\n*                                  BUT LEFT IN, IF SOMEBODY WANTS\n*                                  TO USE THE CODE AS A MODEL.\n* ----->    Check user by Userid, code - below\n         LA    R6,VALUSRS          POINT TO START OF VALIDATION TABLE\n*\nCHKUSER  DS    0H\n         CLC   0(7,R5),0(R6)       IS CALLER ALLOWED TO RESET TIME\n         BE    CHKCOMD             YES, CONTINUE\n         LA    R6,20(,R6)          ELSE POINT TO NEXT TABLE ENTRY\n         CLI   0(R6),255           IS IT END OF TABLE\n         BNE   CHKUSER             NO, CONTINUE\n         B     SHOWTIME            ELSE JUST SHOW THE TIME\n* ----->    Check user by Userid, code - above\n*\n* GET INVOKER'S PARM, MAKE SURE IT'S VALID.........................\n*\nCHKCOMD  DS    0H\n         MVC   MNMXVALS,=A(0900,65535,7200)  MIN MAX FOR EVERYBODY\n*        MVC   MNMXVALS,8(R6)      MIN MAX BY USERID TABLE...\n         L     R5,0(,R4)           GET POINTER TO COMMAND BUFFER\n         LH    R6,2(,R5)           GET OFFSET TO COMMAND VARIABLE(S)\n         LTR   R6,R6               ARE THERE ANY VARIABLES\n         BZ    SHOWTIME            NO, SHOW THE CURRENT WAIT VALUE\n         LH    R7,0(,R5)           GET LENGTH OF COMMAND BUFFER\n         SR    R7,R6               SUBTRACT VARIABLE OFFSET FROM LGH.\n         SH    R7,=H'5'            SUBTRACT CONSTANT  FROM LENGTH\n         BM    SHOWTIME             SHOW THE CURRENT WAIT VALUE\n*                                    IF NO VARIABLES ON THE COMMAND\n         LA    R5,4(R5,R6)         POINT TO START OF VARIABLES\n*\n         CH    R7,=AL2(6)          DOES INPUT EXCEED MAXIMUM\n         BNH   *+8                 NO, CONTINUE\n         LA    R7,5                ELSE SET LENGTH TO MAX\n         LA    R1,0(R5,R7)         POINT TO LAST CHARACTER IN VARIABLE\n         OI    0(R1),X'40'         SET LAST CHARACTER TO UPPER-CASE\n         BCTR  R7,R0               DECREMENT LENGTH BY 1\n* ---  Test the parms here  ---  below\n*                                  TEST PARMS HERE\n         CLI   0(R1),C'T'          DO WE WANT TO EXEMPT FROM TIMING?\n         BNE   PASST               NO. BYPASS THAT CODE.\n         BAL   R8,EXEMPTIT         GO EXEMPT JOB.\n         B     SHOWTIME            REPORT RESULTS AND EXIT.\nPASST    DS    0H\n         CLI   0(R1),C'Z'          DO WE WANT TO KILL EXEMPTION?\n         BNE   OTHPARMS            NO. TEST FOR OTHER PARMS.\n         BAL   R8,NOEXEMPT         GO KILL EXEMPTION BIT.\n         B     SHOWTIME            REPORT RESULTS AND EXIT.\nOTHPARMS DS    0H\n         LA    R0,3600             SET MULTIPLIER VALUE FOR HOURS\n         CLI   0(R1),C'H'           IS PARM SPECIFIED AS HOURS\n         BE    VALIDATE              YES, CONTINUE\n         LA    R0,60               SET MULTIPLIER VALUE FOR MINUTES\n         CLI   0(R1),C'M'           IS PARM SPECIFIED AS MINUTES\n         BE    VALIDATE              YES, CONTINUE\n         LA    R0,1                SET MULTIPLIER VALUE FOR SECONDS\n         CLI   0(R1),C'S'           IS PARM SPECIFIED AS SECONDS\n         BNE   SHOWTIME              NO, DON'T ATTEMPT UPDATE\n* ---  Test the parms here  ---  above\n*\n* CONVERT THE HOURS, MINUTES OR SECONDS TO SECONDS & MAKE SURE THAT\n* IT'S WITHIN RANGE;  IF NOT DEFAULT TIME VALUE WILL BE SET........\n*\nVALIDATE STH   R0,DELTAVAL         STORE THE VARIABLE EXTENSION AMOUNT\n         EX    R7,TRANVALS          ENSURE VARIABLE IS ALL NUMERIC\n         BNZ   SHOWTIME              BYPASS UPDATE IF ANY NON-NUMERIC\n         EX    R7,PACKVALS            ELSE PACK THE VARIABLE\n         CVB   R0,DUBLWORD         CONVERT VALUE TO BINARY\n         MH    R0,DELTAVAL         CONVERT VALUE TO SECONDS\n         C     R0,MINTIME          IS REQUESTED VALUE < MINIMUM\n         BNL   *+8                  NO, CONTINUE\n         L     R0,DEFTIME            ELSE RESET TO DEFAULT VALUE\n         C     R0,MAXTIME          IS REQUESTED VALUE > MAXIMUM\n         BNH   *+8                  NO, CONTINUE\n         L     R0,DEFTIME            ELSE RESET TO DEFAULT VALUE\n         O     R0,SHORTZER         MAKE BINARY VALUE UNNORM F/P VALUE\n         ST    R0,DUBLWORD         STORE THE F/P VALUE\n         LE    FPR0,DUBLWORD       LOAD VALUE INTO F/P REGISTER\n         DE    FPR0,=E'1.048576'   CONVERT FROM SECONDS TO WAIT UNITS\n         AU    FPR0,SHORTZER       MAKE IT UN-NORMALIZED F/P VALUE\n         STE   FPR0,DUBLWORD       STORE THE VALUE\n         MVI   DUBLWORD,0          STRIP THE SIGN & EXPONENT\n         BAL   R8,WAITRSET         RESET THE WAIT TIME IN ASCB\n*\nSHOWTIME L     R0,X'C4'(,R3)       PICK UP ASCB WAIT TIME VALUE\n         O     R0,SHORTZER         MAKE BINARY VALUE UNNORM F/P VALUE\n         ST    R0,DUBLWORD         STORE THE F/P VALUE\n         LE    FPR0,DUBLWORD       LOAD VALUE INTO F/P REGISTER\n         ME    FPR0,=E'1.048576'   CONVERT FROM WAIT UNITS TO SECONDS\n         AE    FPR0,=E'0.5'        ROUND SECONDS\n         AU    FPR0,SHORTZER       MAKE IT UN-NORMALIZED F/P VALUE\n         STE   FPR0,DUBLWORD       STORE THE VALUE\n         MVI   DUBLWORD,0          STRIP THE SIGN & EXPONENT\n         L     R0,DUBLWORD         PICK UP THE BINARY VALUE\n         CVD   R0,DUBLWORD         CONVERT IT TO DECIMAL\n         ED    CURSECS,DUBLWORD+5  EDIT IT INTO THE MESSAGE\n         TPUT  CURMSG,L'CURMSG     OUTPUT THE MESSAGE TO TERMINAL\n*\n         TM    X'66'(R3),X'01'     CHECK IF EXEMPTION IS ON\n         BO    PRTYEXMT            YES. TELL US SO.\n         TPUT  NTEXMPT,L'NTEXMPT   NO. TELL US THAT AS WELL.\n         B     SHOWTEND\nPRTYEXMT DS    0H\n         TPUT  ISEXMPT,L'ISEXMPT   MESSAGE THAT WE'RE EXEMPT.\n*\nSHOWTEND DS    0H\n         L     R13,4(,R13)         GET ADDRESS OF PREVIOUS SAVE AREA\n         RETURN (14,12),T,RC=0      AND TERMINATE TASK WITH R/C = ZERO\n*\nNOTAUTH  TPUT  NAUTHMS,L'NAUTHMS\n         B     SHOWTEND\n*\nTRANVALS TRT   0(0,R5),TRTABLE     *** EXECUTED INSTRUCTION ***\nPACKVALS PACK  DUBLWORD,0(0,R5)    *** EXECUTED INSTRUCTION ***\n*\n* IN CASE YOU WANT TO CHECK THIS CODE OUT BEFORE INSTALLING, SET THE\n* FOLLOWING NOP TO A BRANCH AND RUN IT;   IT'LL DO EVERYTHING EXCEPT\n* ACTUALLY GETTING INTO AUTHORIZED STATE AND MODIFYING THE ASCB.....\n*\nWAITRSET L     R0,DUBLWORD         *** FOR TESTING,\n         NOP   4(,R8)                  SET NOP TO BRANCH ***\n*\n* IF YOU USE A \"SECRET\" SVC TO GET INTO AUTHORIZED STATE (INSTEAD OF\n* RUNNING FROM AUTHORIZED LIBRARY), HERE'S WHERE TO CODE IT.........\n*\n         MODESET KEY=ZERO,MODE=SUP\n         MVC   X'C4'(4,R3),DUBLWORD MOVE NEW VALUE INTO ASCB\n         MODESET KEY=NZERO,MODE=PROB\n*\n* IF YOU USE A \"SECRET\" SVC TO GET INTO AUTHORIZED STATE, HERE'S WHERE\n* YOU WANT TO  GET BACK OUT INTO UNAUTHORIZED STATE.................\n*\n         BR    R8\n*\n* ------ >  Code to turn on exemption bit in the ASCBRCTF field\nEXEMPTIT DS    0H                     Need APF-Authorization here\n         MODESET KEY=ZERO,MODE=SUP\n         OI    X'66'(R3),X'01'\n         MODESET KEY=NZERO,MODE=PROB\n*                                     Don't need authorization here\n         TPUT  Q522MSG,L'Q522MSG      Say we are exempt from timing\n         BR    R8\n*\n* ------ >  Code to turn off exemption bit in the ASCBRCTF field\nNOEXEMPT DS    0H                     Need APF-Authorization here\n         MODESET KEY=ZERO,MODE=SUP\n         NI    X'66'(R3),X'FF'-X'01'\n         MODESET KEY=NZERO,MODE=PROB\n*                                     Don't need authorization here\n         TPUT  NONEXMT,L'NONEXMT      Say we're not exempt from timing\n         BR    R8\n*\nNOOPER   DS    0H\n         TPUT  OPERMSG,L'OPERMSG      Say we need OPER authority\n         BR    R8\n*\n         LTORG ,\nSAVEAREA DC    8D'0'               REGISTER SAVE AREA\nSAVE14T1 DC    2D'0'\n*\nDUBLWORD DC    D'0'                DOUBLE-WORD WORK AREA\nSHORTZER DC    X'46000000'         SHORT UNNORMALIZED F/P ZERO\nDELTAVAL DC    H'0'\n*\n         DC    0D'0'\nTRTABLE  DC    256X'04'\n         ORG   TRTABLE+C'0'\n         DC    10X'00'\n         ORG   ,\n*\nMNMXVALS DC    0XL12'0'\nMINTIME  DC    A(0900)\nMAXTIME  DC    A(65535)\nDEFTIME  DC    A(7200)\n*\n* CHEAP SECURITY VERIFICATION TABLE FOLLOWS:\n*\n*    (1) REPLACE 'TSO_UID' WITH THE TSO USER I.D. THAT SHOULD BE\n*        ALLOWED TO ISSUE THIS COMMAND.\n*\n*    (2) SET THE MINIMUM, MAXIMUM AND DEFAULT VALUES TO REFLECT\n*        THE MINIMUM & MAXIMUM NUMBER OF SECONDS THE USER  WILL\n*        BE ALLOWED TO SET AND THE DEFAULT VALUE THAT WILL BE\n*        USED IF HE/SHE ATTEMPTS TO SET A VALUE THAT IS OUTSIDE\n*        THE MIN/MAX RANGE.\n*\nVALUSRS  DC    CL8'TSO_UID1',A(0900,7200,3600) MIN,MAX,DEFAULT SECONDS\n         DC    CL8'TSO_UID2',A(0900,7200,3600)\n*\n         DC    X'FF'               END-OF-TABLE STOPPER...............\n*\n*\nCURMSG   DC    C'CURRENT WAIT TIME VALUE IS: NN,NNN SECONDS'\n         ORG   *-15\nCURSECS  DC    X'4020206B202120'\n         ORG   ,\nQ522MSG  DC    C'JOB MADE EXEMPT FROM STEP TIMING'\nNONEXMT  DC    C'JOB MADE NON-EXEMPT FROM STEP TIMING'\nISEXMPT  DC    C'JOB IS EXEMPT FROM STEP TIMING'\nNTEXMPT  DC    C'JOB NOT EXEMPT FROM STEP TIMING'\nNAUTHMS  DC    C'*** THIS COMMAND MUST BE RUN AUTHORIZED ***'\nOPERMSG  DC    C'*** THIS COMMAND NEEDS OPER AUTHORITY ***'\n         END   BEGIN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WAITT$": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x13\\x01\\x07\"_\\x01\\x19\\x10\\x7f\\x106\\x00\\x1c\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2019-04-17T10:36:13", "lines": 28, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(WAITT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   WAITT\n SETCODE AC(1)\n SETSSI  CB497987\n ENTRY   WAITT\n NAME    WAITT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WAITT#": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x16\\x01\\x19\\x10\\x7f\\x01\\x19\\x10\\x7f\\x11C\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-17T00:00:00", "modifydate": "2019-04-17T11:43:16", "lines": 19, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "INVOKING: WAITT #####X    (SEE ADDED POWER, BELOW)\n\n   WHERE: ##### IS 1 TO 5 DIGIT VALUE\n\n              X IS H, M OR S TO SIGNIFY THAT THE VALUE IS HOURS,\n                MINUTES OR SECONDS.\n\n    NOTE: THE NUMBER OF SECONDS IS CONVERTED INTO WAIT TIME UNITS,\n          EACH OF WHICH REPRESENTS 1.048576 SECONDS.  SOME VALUES\n          CAN NOT BE REPRESENTED EXACTLY.  IE: 30 MINUTES IS 1800\n          SECONDS OR 1716 WAIT UNITS.  WHEN 1716 WAIT UNITS ARE\n          CONVERTED BACK TO SECONDS, THEY BECOME 1799 SECONDS.\n          THIS IS NOT A PHENOMENON OF THE COMMAND, BUT OF MVS.\n\n   ADDED POWER:   WAITT T  -  EXEMPTS JOB FROM STEP TIMING\n                  WAITT Z  -  TURNS OFF EXEMPTION SWITCH\n\n         ASCBRCTF IS X'66' INTO THE ASCB.  X'01' ON, EXEMPTS\n                                           FROM STEP TIMING.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT987/FILE987.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT987", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}