{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011415000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1704794, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE173.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE173.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1c\\x05'", "DS1TRBAL": "b'\\x8d\\xb6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01:\\x00\\x03\\x01<\\x00\\x01\\x00\\x1d'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$CPYRITE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x147\\x00\\n\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:37:00", "lines": 10, "newlines": 12, "modlines": 0, "user": "SYSTAB"}, "text": "***********************************************************************\n*                                                                     *\n*                  Ted Bestani                                        *\n*                  Netcom Consulting & Education, Inc.                *\n*                  1684 Decoto Road Suite 231                         *\n*                  Union City, CA 94587                               *\n*                                                                     *\n*                  October 1991                                       *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x14\\x04\\x00-\\x00-\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:04:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "SYSTAB"}, "text": "***********************************************************************\n*                                                                     *\n*    Welcome!  This is a collection of useful TSO commands and batch  *\n*    utilities.  They are easily assemblable.  They are all self-     *\n*    contained, with no external references or macro libraries        *\n*    required (other than MACLIB and AMODGEN).  They are all serially *\n*    reusable only, and do not require LPA residence.  I recommend    *\n*    that you put them in SYS2.CMDLIB or equivalent.                  *\n*                                                                     *\n*    In order to cut down on multiple versions with through \"creeping *\n*    functionalism\", please notify me of significant additions and I  *\n*    will re-publish the original.                                    *\n*                                                                     *\n*                                 Ted Bestani                         *\n*                                 Netcom Consulting & Education, Inc. *\n*                                 1684 Decoto Road Suite 231          *\n*                                 Union City, CA 94587                *\n*                                                                     *\n*                                 October 1991                        *\n*                                                                     *\n***********************************************************************\n\n  Name     Type   Description\n--------  ------  -----------------------------------------------------\n\nARITH      TSO    Full-screen arithmetic & 3270 buffer addr conversion\nASMLINK    Batch  Sample JCL to assemble & link anything here\nDSATXA     TSO    DataSet ATtribute command, updated for XA\nFINDFMID   Batch  Isolate up to seven FMID's from a CUM/CBPDO tape\nFINDPTF    Batch  Scan CUM tape for a specific service\nHELP*      TSO    Help member for corresponding cmd, put in SYS1.HELP\nJCL*       Batch  Execution JCL for corresponding utility\nLISTALOC   TSO    Like LISTALC, but much better\nLISTLEV    TSO    Like LISTC, but in full-screen\nLISTVTOC   TSO    Like 3.4, but doesn't require ISPF\nMONJOB     TSO    Monitor executing job with full-screen updating\nPOSTIT     TSO    Send the operator a message and make it stick\nPRTPDS     Batch  Utility to print card image PDS's in a nice format\nSHOWVOLS   TSO    Full-screen D U,DASD,ONLINE with space, etc.\nSMPETOOL   Batch  Utility to help you unravel SMP/E apply snarls\nSTARTREK   TSO    Full-screen STREK, not challenging but pretty\nTSOCMDR    TSO    Like Norton Integrator, try it you'll like it\nVOPER      TSO    A Poor Man's NetView (NCCF), but usable from TSO\n\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ARITH": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x81\\x15?\\x00\\x91\\x07/\\x13$\\t>\\t=\\x00\\x06\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1981-06-02T00:00:00", "modifydate": "1991-03-13T13:24:00", "lines": 2366, "newlines": 2365, "modlines": 6, "user": "SYSTAB"}, "text": "ARITH    TITLE '** TSO ARITHMETIC COMMAND **'\n***********************************************************************\n*                                                                     *\n*    NAME - ARITH (AR)                                                *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS COMMAND ALLOWS TSO USERS TO ENTER DO DECIMAL AND  *\n*              HEX ARITHMETIC ON A 3270 TERMINAL IN FULL SCREEN MODE. *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - ARITH REQUIRES THAT VTAM OR TCAM SUPPORT THE      *\n*                   FULL-SCREEN OPTION.  IT IS DESIGNED FOR 3278M2    *\n*                   TERMINALS.  IT WILL WORK ON BIGGER TOOBS, BUT     *\n*                   IT WON'T USE THE ENTIRE SCREEN.                   *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nARITH    CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\n*--> SET UP THE ATTENTION EXIT\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPASS                YES, BYPASS ERROR CODE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPASS EQU   *\n         MVC   SC1LN24(80),ENDLNE01    NORMAL END OF MENU MSG\n         MVI   SC1LN04,C' '            INITIALIZE OPTION FIELD\n         BAL   R9,TPUTMAIN             DISPLAY MENU SCREEN\nDRBYP002 EQU   *\n         CLI   INPUT,C'0'              END?\n         BE    DRCLEAR                 YES, GO CLEAR AND END\n         CLI   INPUT,C'1'              CVD?\n         BNE   DRTRY2                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$CVD              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY2   EQU   *\n         CLI   INPUT,C'2'              CVB?\n         BNE   DRTRY3                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$CVB              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY3   EQU   *\n         CLI   INPUT,C'3'              ADD?\n         BNE   DRTRY4                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$ADD              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY4   EQU   *\n         CLI   INPUT,C'4'              SUB?\n         BNE   DRTRY5                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$SUB              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY5   EQU   *\n         CLI   INPUT,C'5'              MUL?\n         BNE   DRTRY6                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$MUL              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY6   EQU   *\n         CLI   INPUT,C'6'              DIV?\n         BNE   DRTRY7                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$DIV              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY7   EQU   *\n         CLI   INPUT,C'7'              OPTION 7?\n         BNE   DRTRY8                  NO, TRY NEXT OPTION\n         BAL   R9,RTN$327              YES, GO PROCESS\n         B     DRBYPASS                GO PUT OUT MENU AGAIN\nDRTRY8   EQU   *\n         CLI   INPUT,C'8'              OPTION 8?\n         BNE   DRTRY9                  NO, TRY NEXT OPTION\n         MVC   SC1LN24(80),ENDLNE03    MOVE END LINE\n         MVC   SC1LN04(1),INPUT        MOVE OPTION REQUESTED\n         BAL   R9,TPUTMAIN             GO OUTPUT MENU\n         B     DRBYP002                GIVE IT ANOTHER TRY\nDRTRY9   EQU   *\n         CLI   INPUT,C'9'              OPTION 9?\n         BNE   DRNOGOOD                NO, PUT OUT ERROR MESSAGE\n         MVC   SC1LN24(80),ENDLNE03    MOVE END LINE\n         MVC   SC1LN04(1),INPUT        MOVE OPTION REQUESTED\n         BAL   R9,TPUTMAIN             GO OUTPUT MENU\n         B     DRBYP002                GIVE IT ANOTHER TRY\nDRNOGOOD EQU   *\n         MVC   SC1LN24(80),ENDLNE02    MOVE END LINE\n         MVC   SC1LN04(1),INPUT        MOVE OPTION REQUESTED\n         BAL   R9,TPUTMAIN             GO OUTPUT MENU\n         B     DRBYP002                GIVE IT ANOTHER TRY\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE20  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN1             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN MENU OPTION?\n         BNZ   EXIT20                  NO, GO PAINT MENU AGAIN\n         MVI   INPUT,C'0'              SIMULATE END OPTION\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE CONVERT-TO-DECIMAL SCREEN            *\n***********************************************************************\n         SPACE 2\nRTN$CVD  DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'RTN$CVD '\nBSAVE30  EQU   *\n         SPACE 1\n         MVC   SC2LN08(8),=CL50' '     CLEAR INPUT\n         MVI   SC2LN10,C' '                  OUTPUT\n         MVC   SC2LN10+1(20),SC2LN10         OUTPUT\nRCVD0010 EQU   *\n         MVC   SC2LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRCVD0020 EQU   *\n         LA    R2,ATRLST2B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN2              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN2             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC2SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC2SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE ANYTHING IN?\n         BZ    EXIT30                  NO, RETURN TO ORIGINAL MENU\n         MVC   HDINPUT,INPUT           MOVE INPUT NUMBER\n         BAL   R9,HEXDEC               CONVERT TO HEX\n         CLI   HDRC,C'0'               DID IT GO OK?\n         BNE   RCVDBAD                 NO, PUT OUT ERROR MESSAGE\n         MVI   RESULTSW,C'1'           INDICATE A CURRENT RESULT\n         MVI   RESULTRD,C'D'           INDICATE RESULT IN DECIMAL\n         ZAP   RESULT99,HDOUTDEC       SAVE CURRENT RESULT\n         MVC   SC2LN08(8),HDINPUT      MOVE ORIGINAL INPUT BACK IN\n         MVC   SC2LN10(21),DECEDIT     MOVE EDIT MASK\n         ED    SC2LN10(21),HDOUTDEC    EDIT THE OUTPUT\n         CLI   SC2LN10+20,C' '         IS IT A SPACE?\n         BNE   RCVD0010                NO, GO PUT ORIGINAL SCREEN OUT\n         MVI   SC2LN10+20,C'+'         WAS A SPACE, REPLACE WITH A +\n         B     RCVD0010                PUT ORIGINAL SCREEN BACK OUT\nRCVDBAD  EQU   *\n         MVC   SC2LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         MVC   SC2LN08(8),HDINPUT      PUT ORIGINAL INPUT IN\n         B     RCVD0020\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE CONVERT-TO-HEX SCREEN                *\n***********************************************************************\n         SPACE 2\nRTN$CVB  DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'RTN$CVB '\nBSAVE40  EQU   *\n         SPACE 1\n         MVC   SC3LN08(16),=CL16' '    CLEAR INPUT\n         MVI   SC3LN10,C' '                  OUTPUT\n         MVC   SC3LN10+1(07),SC3LN10         OUTPUT\nRCVB0010 EQU   *\n         MVC   SC3LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRCVB0020 EQU   *\n         LA    R2,ATRLST3B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN3              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN3             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC3SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC3SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE ANYTHING IN?\n         BZ    EXIT40                  NO, RETURN TO ORIGINAL MENU\n         MVC   DHINPUT,INPUT           MOVE INPUT NUMBER\n         BAL   R9,DECHEX               CONVERT TO HEX\n         CLI   DHRC,C'0'               DID IT GO OK?\n         BNE   RCVBBAD                 NO, PUT OUT ERROR MESSAGE\n         MVI   RESULTSW,C'1'           INDICATE A CURRENT RESULT\n         MVI   RESULTRD,C'X'           INDICATE RESULT IN DECIMAL\n         ZAP   RESULT99,DHOUTDEC       SAVE CURRENT RESULT\n         MVC   SC3LN08(16),DHINPUT     MOVE ORIGINAL INPUT BACK IN\n         MVC   SC3LN10(08),DHOUTCHR    MOVE THE OUTPUT\n         B     RCVB0010                PUT ORIGINAL SCREEN BACK OUT\nRCVBBAD  EQU   *\n         MVC   SC3LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         MVC   SC3LN08(16),DHINPUT     PUT ORIGINAL INPUT IN\n         B     RCVB0020\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ADD SCREEN                           *\n***********************************************************************\n         SPACE 2\nRTN$ADD  DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'RTN$ADD '\nBSAVE50  EQU   *\n         SPACE 1\nRADD0010 EQU   *\n         MVC   SC4SUFIX+1(2),=X'C94F'  SET CURSOR TO RADIX 1\n         MVI   SC4LN08+4,DEFRADIX      INIT RADIX\n         MVI   SC4LN10+4,DEFRADIX      INIT RADIX\n         MVI   SC4LN14+4,DEFRADIX      INIT RADIX\n         MVI   SC4LN08+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC4LN08+32(15),SC4LN08+31    PROPOGATE SPACES\n         CLI   RESULTSW,C'1'           IS THERE A CURRENT RESULT?\n         BNE   RADDNOCR                NO, BYPASS\n         CLI   RESULTRD,C'D'           IS CURRENT RESULT DECIMAL?\n         BE    RADDRESD                YES, PROCESS DECIMAL\n         UNPK  DHINPUT,RESULT99        UNPACK IT\n         OI    DHINPUT+15,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT NUMBER TO HEX DISPLAY\n         MVC   SC4LN08+38(8),DHOUTCHR  PUT HEX NUMBER IN SCREEN\n         MVI   SC4LN08+4,C'X'          INDICATE HEX RADIX\n         B     RADDNOCR                BYPASS DECIMAL CODE\nRADDRESD EQU   *\n         MVC   SC4LN08+30(16),EDUNPK   UNPACK CURRENT RESULT\n         ED    SC4LN08+30(16),RESULT99+8   EDIT CURRENT RESULT\n         MVI   SC4LN08+46,C'+'         INIT TO NEGATIVE\n         CP    RESULT99,=PL1'0'        SET CONDITION CODE\n         BNL   RADDNOCR                BYPASS MOVE\n         MVI   SC4LN08+46,C'-'         SET TO NEGATIVE\nRADDNOCR EQU   *\n         MVI   SC4LN10+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC4LN10+32(15),SC4LN10+31    PROPOGATE SPACES\n         MVI   SC4LN14+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC4LN14+32(33),SC4LN14+31    PROPOGATE SPACES\n         MVC   SC4LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRADD0020 EQU   *\n         LA    R2,ATRLST4B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN4              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN4             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC4SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC4SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         BAL   R9,DYADIC               GO DO PRELIMINARY EDITING\n         MVC   SC4LN08+4(1),DIRADIX1   PUT DATA BACK INTO SCREEN\n         MVC   SC4LN10+4(1),DIRADIX2   PUT DATA BACK INTO SCREEN\n         MVC   SC4LN14+4(1),DIRADIX3   PUT DATA BACK INTO SCREEN\n         MVC   SC4LN08+31(16),DIDATA1  PUT DATA BACK INTO SCREEN\n         MVC   SC4LN10+31(16),DIDATA2  PUT DATA BACK INTO SCREEN\n         MVI   SC4LN14+31,C' '         CLEAR RESULT AREA\n         MVC   SC4LN14+32(33),SC4LN14+31\n         B     *+4(R15)                BRANCH ON RETURN CODE\n         B     RADDRC00                EDITING/CONVERSION OK\n         B     RADDRC04                ERROR, RC=04\n         B     RADDRC08                ERROR, RC=08\n         B     RADDRC12                ERROR, RC=12\n         B     RADDRC16                ERROR, RC=16\n         B     RADDRC20                ERROR, RC=20\nRADDRC00 EQU   *\n         MVC   SC4SUFIX+1(2),=X'506F'  SET CURSOR TO RESULT\n         MVC   SC4LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\n         ZAP   RESULT3,RESULT1         SHIFT FIRST RESULT\n         AP    RESULT3,RESULT2         ADD SECOND RESULT\n         ZAP   RESULT99,RESULT3        CAPTURE CURRENT RESULT\n         MVI   RESULTSW,C'1'           INDICATE CURRENT RESULT ACTIVE\n         MVC   RESULTRD,DIRADIX3       INDICATE CURRENT RESULT RADIX\n         CP    RESULT3,=PL1'0'         SET CONDITION CODE\n         BL    RADDRC0N                IF NEGATIVE, INSERT -\n         MVI   DHINPUT+15,C'+'         MOVE A POSITIVE SIGN\n         B     RADDRC0B                GO TO BYPASS\nRADDRC0N EQU   *\n         MVI   DHINPUT+15,C'-'         INSERT A - SIGN\nRADDRC0B EQU   *\n         CLI   DIRADIX3,C'D'           DID USER WANT ANSWER IN DEC?\n         BE    RADDYESD                YES, IN DECIMAL\n         MVC   SC4LN14+31(34),=CL50' ' CLEAR AREA FIRST\n         UNPK  DHINPUT(15),RESULT3     SET INPUT UP\n         OI    DHINPUT+14,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT TO HEX\n         MVC   SC4LN14+57(8),DHOUTCHR  MOVE CONVERTED HEX\n         B     RADD0020                GO PUT SCREEN BACK OUT\nRADDYESD EQU   *\n         MVC   SC4LN14+31(34),DECEDIT2 PUT EDIT MASK IN SCREEN\n         ED    SC4LN14+31(34),RESULT3+3     EDIT DECIMAL RESULT\n         CLI   SC4LN14+64,C' '         IS SIGN A BLANK\n         BNE   RADD0020                NO, GO PUT SCREEN BACK OUT\n         MVI   SC4LN14+64,C'+'         YES, REPLACE WITH A +\n         B     RADD0020                GO PUT SCREEN BACK OUT\nRADDRC04 EQU   *\n         MVC   SC4SUFIX+1(2),=X'C8F4'  RESET CURSOR POSITION\n         B     RADDBAD\nRADDRC08 EQU   *\n         MVC   SC4SUFIX+1(2),=X'4BD4'  RESET CURSOR POSITION\n         B     RADDBAD\nRADDRC12 EQU   *\n         MVC   SC4SUFIX+1(2),=X'50D4'  RESET CURSOR POSITION\n         B     RADDBAD\nRADDRC16 EQU   *\n         MVC   SC4SUFIX+1(2),=X'C94F'  RESET CURSOR POSITION\n         B     RADDBAD\nRADDRC20 EQU   *\n         MVC   SC4SUFIX+1(2),=X'4B6F'  RESET CURSOR POSITION\n         B     RADDBAD\nRADDBAD  EQU   *\n         MVC   SC4LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         B     RADD0020\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE SUBTRACT SCREEN                      *\n***********************************************************************\n         SPACE 2\nRTN$SUB  DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'RTN$SUB '\nBSAVE60  EQU   *\n         SPACE 1\nRSUB0010 EQU   *\n         MVC   SC5SUFIX+1(2),=X'C94F'  SET CURSOR TO RADIX 1\n         MVI   SC5LN08+4,DEFRADIX      INIT RADIX\n         MVI   SC5LN10+4,DEFRADIX      INIT RADIX\n         MVI   SC5LN14+4,DEFRADIX      INIT RADIX\n         MVI   SC5LN08+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC5LN08+32(15),SC5LN08+31    PROPOGATE SPACES\n         CLI   RESULTSW,C'1'           IS THERE A CURRENT RESULT?\n         BNE   RSUBNOCR                NO, BYPASS\n         CLI   RESULTRD,C'D'           IS CURRENT RESULT DECIMAL?\n         BE    RSUBRESD                YES, PROCESS DECIMAL\n         UNPK  DHINPUT,RESULT99        UNPACK IT\n         OI    DHINPUT+15,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT NUMBER TO HEX DISPLAY\n         MVC   SC5LN08+38(8),DHOUTCHR  PUT HEX NUMBER IN SCREEN\n         MVI   SC5LN08+4,C'X'          INDICATE HEX RADIX\n         B     RSUBNOCR                BYPASS DECIMAL CODE\nRSUBRESD EQU   *\n         MVC   SC5LN08+30(16),EDUNPK   UNPACK CURRENT RESULT\n         ED    SC5LN08+30(16),RESULT99+8   EDIT CURRENT RESULT\n         MVI   SC5LN08+46,C'+'         INIT TO NEGATIVE\n         CP    RESULT99,=PL1'0'        SET CONDITION CODE\n         BNL   RSUBNOCR                BYPASS MOVE\n         MVI   SC5LN08+46,C'-'         SET TO NEGATIVE\nRSUBNOCR EQU   *\n         MVI   SC5LN10+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC5LN10+32(15),SC5LN10+31    PROPOGATE SPACES\n         MVI   SC5LN14+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC5LN14+32(33),SC5LN14+31    PROPOGATE SPACES\n         MVC   SC5LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRSUB0020 EQU   *\n         LA    R2,ATRLST5B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN5              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN5             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC5SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC5SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         BAL   R9,DYADIC               GO DO PRELIMINARY EDITING\n         MVC   SC5LN08+4(1),DIRADIX1   PUT DATA BACK INTO SCREEN\n         MVC   SC5LN10+4(1),DIRADIX2   PUT DATA BACK INTO SCREEN\n         MVC   SC5LN14+4(1),DIRADIX3   PUT DATA BACK INTO SCREEN\n         MVC   SC5LN08+31(16),DIDATA1  PUT DATA BACK INTO SCREEN\n         MVC   SC5LN10+31(16),DIDATA2  PUT DATA BACK INTO SCREEN\n         MVI   SC5LN14+31,C' '         CLEAR RESULT AREA\n         MVC   SC5LN14+32(33),SC5LN14+31\n         B     *+4(R15)                BRANCH ON RETURN CODE\n         B     RSUBRC00                EDITING/CONVERSION OK\n         B     RSUBRC04                ERROR, RC=04\n         B     RSUBRC08                ERROR, RC=08\n         B     RSUBRC12                ERROR, RC=12\n         B     RSUBRC16                ERROR, RC=16\n         B     RSUBRC20                ERROR, RC=20\nRSUBRC00 EQU   *\n         MVC   SC5SUFIX+1(2),=X'506F'  SET CURSOR TO RESULT\n         MVC   SC5LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\n         ZAP   RESULT3,RESULT1         SHIFT FIRST RESULT\n         SP    RESULT3,RESULT2         SUBTRACT SECOND RESULT\n         ZAP   RESULT99,RESULT3        CAPTURE CURRENT RESULT\n         MVI   RESULTSW,C'1'           INDICATE CURRENT RESULT ACTIVE\n         MVC   RESULTRD,DIRADIX3       INDICATE CURRENT RESULT RADIX\n         CP    RESULT3,=PL1'0'         SET CONDITION CODE\n         BL    RSUBRC0N                IF NEGATIVE, INSERT -\n         MVI   DHINPUT+15,C'+'         MOVE A POSITIVE SIGN\n         B     RSUBRC0B                GO TO BYPASS\nRSUBRC0N EQU   *\n         MVI   DHINPUT+15,C'-'         INSERT A - SIGN\nRSUBRC0B EQU   *\n         CLI   DIRADIX3,C'D'           DID USER WANT ANSWER IN DEC?\n         BE    RSUBYESD                YES, IN DECIMAL\n         MVC   SC5LN14+31(34),=CL50' ' CLEAR AREA FIRST\n         UNPK  DHINPUT(15),RESULT3     SET INPUT UP\n         OI    DHINPUT+14,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT TO HEX\n         MVC   SC5LN14+57(8),DHOUTCHR  MOVE CONVERTED HEX\n         B     RSUB0020                GO PUT SCREEN BACK OUT\nRSUBYESD EQU   *\n         MVC   SC5LN14+31(34),DECEDIT2 PUT EDIT MASK IN SCREEN\n         ED    SC5LN14+31(34),RESULT3+3     EDIT DECIMAL RESULT\n         CLI   SC5LN14+64,C' '         IS SIGN A BLANK\n         BNE   RSUB0020                NO, GO PUT SCREEN BACK OUT\n         MVI   SC5LN14+64,C'+'         YES, REPLACE WITH A +\n         B     RSUB0020                GO PUT SCREEN BACK OUT\nRSUBRC04 EQU   *\n         MVC   SC5SUFIX+1(2),=X'C8F4'  RESET CURSOR POSITION\n         B     RSUBBAD\nRSUBRC08 EQU   *\n         MVC   SC5SUFIX+1(2),=X'4BD4'  RESET CURSOR POSITION\n         B     RSUBBAD\nRSUBRC12 EQU   *\n         MVC   SC5SUFIX+1(2),=X'50D4'  RESET CURSOR POSITION\n         B     RSUBBAD\nRSUBRC16 EQU   *\n         MVC   SC5SUFIX+1(2),=X'C94F'  RESET CURSOR POSITION\n         B     RSUBBAD\nRSUBRC20 EQU   *\n         MVC   SC5SUFIX+1(2),=X'4B6F'  RESET CURSOR POSITION\n         B     RSUBBAD\nRSUBBAD  EQU   *\n         MVC   SC5LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         B     RSUB0020\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE MULTIPLY SCREEN                      *\n***********************************************************************\n         SPACE 2\nRTN$MUL  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'RTN$MUL '\nBSAVE70  EQU   *\n         SPACE 1\nRMUL0010 EQU   *\n         MVC   SC6SUFIX+1(2),=X'C94F'  SET CURSOR TO RADIX 1\n         MVI   SC6LN08+4,DEFRADIX      INIT RADIX\n         MVI   SC6LN10+4,DEFRADIX      INIT RADIX\n         MVI   SC6LN14+4,DEFRADIX      INIT RADIX\n         MVI   SC6LN08+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC6LN08+32(15),SC6LN08+31    PROPOGATE SPACES\n         CLI   RESULTSW,C'1'           IS THERE A CURRENT RESULT?\n         BNE   RMULNOCR                NO, BYPASS\n         CLI   RESULTRD,C'D'           IS CURRENT RESULT DECIMAL?\n         BE    RMULRESD                YES, PROCESS DECIMAL\n         UNPK  DHINPUT,RESULT99        UNPACK IT\n         OI    DHINPUT+15,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT NUMBER TO HEX DISPLAY\n         MVC   SC6LN08+38(8),DHOUTCHR  PUT HEX NUMBER IN SCREEN\n         MVI   SC6LN08+4,C'X'          INDICATE HEX RADIX\n         B     RMULNOCR                BYPASS DECIMAL CODE\nRMULRESD EQU   *\n         MVC   SC6LN08+30(16),EDUNPK   UNPACK CURRENT RESULT\n         ED    SC6LN08+30(16),RESULT99+8   EDIT CURRENT RESULT\n         MVI   SC6LN08+46,C'+'         INIT TO NEGATIVE\n         CP    RESULT99,=PL1'0'        SET CONDITION CODE\n         BNL   RMULNOCR                BYPASS MOVE\n         MVI   SC6LN08+46,C'-'         SET TO NEGATIVE\nRMULNOCR EQU   *\n         MVI   SC6LN10+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC6LN10+32(15),SC6LN10+31    PROPOGATE SPACES\n         MVI   SC6LN14+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC6LN14+32(33),SC6LN14+31    PROPOGATE SPACES\n         MVC   SC6LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRMUL0020 EQU   *\n         LA    R2,ATRLST6B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN6              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN6             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC6SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC6SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         BAL   R9,DYADIC               GO DO PRELIMINARY EDITING\n         MVC   SC6LN08+4(1),DIRADIX1   PUT DATA BACK INTO SCREEN\n         MVC   SC6LN10+4(1),DIRADIX2   PUT DATA BACK INTO SCREEN\n         MVC   SC6LN14+4(1),DIRADIX3   PUT DATA BACK INTO SCREEN\n         MVC   SC6LN08+31(16),DIDATA1  PUT DATA BACK INTO SCREEN\n         MVC   SC6LN10+31(16),DIDATA2  PUT DATA BACK INTO SCREEN\n         MVI   SC6LN14+31,C' '         CLEAR RESULT AREA\n         MVC   SC6LN14+32(33),SC6LN14+31\n         B     *+4(R15)                BRANCH ON RETURN CODE\n         B     RMULRC00                EDITING/CONVERSION OK\n         B     RMULRC04                ERROR, RC=04\n         B     RMULRC08                ERROR, RC=08\n         B     RMULRC12                ERROR, RC=12\n         B     RMULRC16                ERROR, RC=16\n         B     RMULRC20                ERROR, RC=20\nRMULRC00 EQU   *\n         MVC   SC6SUFIX+1(2),=X'506F'  SET CURSOR TO RESULT\n         MVC   SC6LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\n         ZAP   RESULT3,RESULT1         SHIFT FIRST RESULT\n         MP    RESULT3,RESULT2+9(7)    MULTIPLY BY SECOND RESULT\n         ZAP   RESULT99,RESULT3        CAPTURE CURRENT RESULT\n         MVI   RESULTSW,C'1'           INDICATE CURRENT RESULT ACTIVE\n         MVC   RESULTRD,DIRADIX3       INDICATE CURRENT RESULT RADIX\n         CP    RESULT3,=PL1'0'         SET THE CONDITION CODE\n         BL    RMULRC0N                IF NEGATIVE, INSERT -\n         MVI   DHINPUT+15,C'+'         MOVE A POSITIVE SIGN\n         B     RMULRC0B                GO TO BYPASS\nRMULRC0N EQU   *\n         MVI   DHINPUT+15,C'-'         INSERT A - SIGN\nRMULRC0B EQU   *\n         CLI   DIRADIX3,C'D'           DID USER WANT ANSWER IN DEC?\n         BE    RMULYESD                YES, IN DECIMAL\n         MVC   SC6LN14+31(34),=CL50' ' CLEAR AREA FIRST\n         UNPK  DHINPUT(15),RESULT3     SET INPUT UP\n         OI    DHINPUT+14,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT TO HEX\n         MVC   SC6LN14+57(8),DHOUTCHR  MOVE CONVERTED HEX\n         B     RMUL0020                GO PUT SCREEN BACK OUT\nRMULYESD EQU   *\n         MVC   SC6LN14+31(34),DECEDIT2 PUT EDIT MASK IN SCREEN\n         ED    SC6LN14+31(34),RESULT3+3     EDIT DECIMAL RESULT\n         CLI   SC6LN14+64,C' '         IS SIGN A BLANK\n         BNE   RMUL0020                NO, GO PUT SCREEN BACK OUT\n         MVI   SC6LN14+64,C'+'         YES, REPLACE WITH A +\n         B     RMUL0020                GO PUT SCREEN BACK OUT\nRMULRC04 EQU   *\n         MVC   SC6SUFIX+1(2),=X'C8F4'  RESET CURSOR POSITION\n         B     RMULBAD\nRMULRC08 EQU   *\n         MVC   SC6SUFIX+1(2),=X'4BD4'  RESET CURSOR POSITION\n         B     RMULBAD\nRMULRC12 EQU   *\n         MVC   SC6SUFIX+1(2),=X'50D4'  RESET CURSOR POSITION\n         B     RMULBAD\nRMULRC16 EQU   *\n         MVC   SC6SUFIX+1(2),=X'C94F'  RESET CURSOR POSITION\n         B     RMULBAD\nRMULRC20 EQU   *\n         MVC   SC6SUFIX+1(2),=X'4B6F'  RESET CURSOR POSITION\n         B     RMULBAD\nRMULBAD  EQU   *\n         MVC   SC6LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         B     RMUL0020\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE DIVIDE SCREEN                        *\n***********************************************************************\n         SPACE 2\nRTN$DIV  DS    0H\n         ST    R9,SAVE80\n         B     BSAVE80\nSAVE80   DC    F'-1'\n         DC    CL8'RTN$DIV '\nBSAVE80  EQU   *\n         SPACE 1\nRDIV0010 EQU   *\n         MVC   SC7SUFIX+1(2),=X'C94F'  SET CURSOR TO RADIX 1\n         MVI   SC7LN08+4,DEFRADIX      INIT RADIX\n         MVI   SC7LN10+4,DEFRADIX      INIT RADIX\n         MVI   SC7LN14+4,DEFRADIX      INIT RADIX\n         MVI   SC7LN08+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC7LN08+32(15),SC7LN08+31    PROPOGATE SPACES\n         CLI   RESULTSW,C'1'           IS THERE A CURRENT RESULT?\n         BNE   RDIVNOCR                NO, BYPASS\n         CLI   RESULTRD,C'D'           IS CURRENT RESULT DECIMAL?\n         BE    RDIVRESD                YES, PROCESS DECIMAL\n         UNPK  DHINPUT,RESULT99        UNPACK IT\n         OI    DHINPUT+15,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT NUMBER TO HEX DISPLAY\n         MVC   SC7LN08+38(8),DHOUTCHR  PUT HEX NUMBER IN SCREEN\n         MVI   SC7LN08+4,C'X'          INDICATE HEX RADIX\n         B     RDIVNOCR                BYPASS DECIMAL CODE\nRDIVRESD EQU   *\n         MVC   SC7LN08+30(16),EDUNPK   UNPACK CURRENT RESULT\n         ED    SC7LN08+30(16),RESULT99+8   EDIT CURRENT RESULT\n         MVI   SC7LN08+46,C'+'         INIT TO NEGATIVE\n         CP    RESULT99,=PL1'0'        SET CONDITION CODE\n         BNL   RDIVNOCR                BYPASS MOVE\n         MVI   SC7LN08+46,C'-'         SET TO NEGATIVE\nRDIVNOCR EQU   *\n         MVI   SC7LN10+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC7LN10+32(15),SC7LN10+31    PROPOGATE SPACES\n         MVI   SC7LN14+31,C' '         SET FIRST CHAR TO SPACE\n         MVC   SC7LN14+32(33),SC7LN14+31    PROPOGATE SPACES\n         MVC   SC7LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\nRDIV0020 EQU   *\n         LA    R2,ATRLST7B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN7              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN7             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC7SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC7SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         BAL   R9,DYADIC               GO DO PRELIMINARY EDITING\n         MVC   SC7LN08+4(1),DIRADIX1   PUT DATA BACK INTO SCREEN\n         MVC   SC7LN10+4(1),DIRADIX2   PUT DATA BACK INTO SCREEN\n         MVC   SC7LN14+4(1),DIRADIX3   PUT DATA BACK INTO SCREEN\n         MVC   SC7LN08+31(16),DIDATA1  PUT DATA BACK INTO SCREEN\n         MVC   SC7LN10+31(16),DIDATA2  PUT DATA BACK INTO SCREEN\n         MVI   SC7LN14+31,C' '         CLEAR RESULT AREA\n         MVC   SC7LN14+32(33),SC7LN14+31\n         B     *+4(R15)                BRANCH ON RETURN CODE\n         B     RDIVRC00                EDITING/CONVERSION OK\n         B     RDIVRC04                ERROR, RC=04\n         B     RDIVRC08                ERROR, RC=08\n         B     RDIVRC12                ERROR, RC=12\n         B     RDIVRC16                ERROR, RC=16\n         B     RDIVRC20                ERROR, RC=20\nRDIVRC00 EQU   *\n         MVC   SC7SUFIX+1(2),=X'506F'  SET CURSOR TO RESULT\n         MVC   SC7LN24(80),ENDLNE05    PUT OUT BEGINNING MESSAGE\n         ZAP   RESULT3,RESULT1         SHIFT FIRST RESULT\n         DP    RESULT3,RESULT2+9(7)    SUBTRACT SECOND RESULT\n         ZAP   REMAIN,RESULT3+9(7)     SAVE THE REMAINDER\n         ZAP   DIVWORK1,RESULT3(9)     COPY THE QUOTIENT\n         ZAP   RESULT3,DIVWORK1        COPY IT BACK, EXPANDED\n         ZAP   RESULT99,RESULT3        CAPTURE CURRENT RESULT\n         MVI   RESULTSW,C'1'           INDICATE CURRENT RESULT ACTIVE\n         MVC   RESULTRD,DIRADIX3       INDICATE CURRENT RESULT RADIX\n         CP    RESULT3,=PL1'0'         SET THE CONDITION CODE\n         BL    RDIVRC0N                IF NEGATIVE, INSERT -\n         MVI   DHINPUT+15,C'+'         MOVE A POSITIVE SIGN\n         B     RDIVRC0B                GO TO BYPASS\nRDIVRC0N EQU   *\n         MVI   DHINPUT+15,C'-'         INSERT A - SIGN\nRDIVRC0B EQU   *\n         CLI   DIRADIX3,C'D'           DID USER WANT ANSWER IN DEC?\n         BE    RDIVYESD                YES, IN DECIMAL\n         MVC   SC7LN14+31(34),=CL50' ' CLEAR AREA FIRST\n         UNPK  DHINPUT(15),RESULT3     SET INPUT UP\n         OI    DHINPUT+14,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT TO HEX\n         MVC   SC7LN14+57(8),DHOUTCHR  MOVE CONVERTED HEX\n         B     RDIVREMN                GO PUT SCREEN BACK OUT\nRDIVYESD EQU   *\n         MVC   SC7LN14+31(34),DECEDIT2 PUT EDIT MASK IN SCREEN\n         ED    SC7LN14+31(34),RESULT3+3     EDIT DECIMAL RESULT\n         CLI   SC7LN14+64,C' '         IS SIGN A BLANK\n         BNE   RDIV0020                NO, GO PUT SCREEN BACK OUT\n         MVI   SC7LN14+64,C'+'         YES, REPLACE WITH A +\nRDIVREMN EQU   *\n         MVI   DHINPUT+15,C'+'         MOVE A POSITIVE SIGN\n         CLI   DIRADIX3,C'D'           DID USER WANT ANSWER IN DEC?\n         BE    RDIVYSD2                YES, IN DECIMAL\n         MVC   SC7LN15+31(34),=CL50' ' CLEAR AREA FIRST\n         UNPK  DHINPUT(15),REMAIN      SET INPUT UP\n         OI    DHINPUT+14,X'F0'        CLEAR SIGN NIBBLE\n         BAL   R9,DECHEX               CONVERT TO HEX\n         MVC   SC7LN15+57(8),DHOUTCHR  MOVE CONVERTED HEX\n         B     RDIV0020                GO PUT SCREEN BACK OUT\nRDIVYSD2 EQU   *\n         MVC   SC7LN15+31(34),DECEDIT2 PUT EDIT MASK IN SCREEN\n         ED    SC7LN15+31(34),REMAIN+3     EDIT DECIMAL RESULT\n         CLI   SC7LN15+64,C' '         IS SIGN A BLANK\n         BNE   RDIV0020                NO, GO PUT SCREEN BACK OUT\n         MVI   SC7LN15+64,C'+'         YES, REPLACE WITH A +\n         B     RDIV0020                GO PUT SCREEN BACK OUT\nRDIVRC04 EQU   *\n         MVC   SC7SUFIX+1(2),=X'C8F4'  RESET CURSOR POSITION\n         B     RDIVBAD\nRDIVRC08 EQU   *\n         MVC   SC7SUFIX+1(2),=X'4BD4'  RESET CURSOR POSITION\n         B     RDIVBAD\nRDIVRC12 EQU   *\n         MVC   SC7SUFIX+1(2),=X'50D4'  RESET CURSOR POSITION\n         B     RDIVBAD\nRDIVRC16 EQU   *\n         MVC   SC7SUFIX+1(2),=X'C94F'  RESET CURSOR POSITION\n         B     RDIVBAD\nRDIVRC20 EQU   *\n         MVC   SC7SUFIX+1(2),=X'4B6F'  RESET CURSOR POSITION\n         B     RDIVBAD\nRDIVBAD  EQU   *\n         MVC   SC7LN24(80),ENDLNE06    PUT OUT ERROR MESSAGE\n         B     RDIV0020\n         SPACE 1\nEXIT80   EQU   *\n         L     R9,SAVE80\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE 3270 BUFFER CONVERSION SCREEN        *\n***********************************************************************\n         SPACE 2\nRTN$327  DS    0H\n         ST    R9,SAVE90\n         B     BSAVE90\nSAVE90   DC    F'-1'\n         DC    CL8'RTN$327 '\nBSAVE90  EQU   *\n         SPACE 1\nR3270010 EQU   *\n         MVI   SC8LN09+3,C'2'          DEFAULT TO MODEL 2\n         MVC   SC8LN12+2(2),=CL2'__'   UNDERSCORE ROW FIELD\n         MVC   SC8LN13+1(3),=CL3'___'  UNDERSCORE COLUMN FIELD\n         MVC   SC8LN16+2(2),=CL2'__'   UNDERSCORE 1ST BUFFER ADDR\n         MVC   SC8LN17+2(2),=CL2'__'   UNDERSCORE 2ND BUFFER ADDR\n         MVC   SC8LN12+74(6),=CL6' '   CLEAR THE DECIMAL ADDRESS\n         MVC   SC8LN13+74(6),=CL6' '   CLEAR THE HEX ADDRESS\n         MVC   SC8SUFIX+1(2),=XL2'4AC3'    RESET THE CURSOR ADDRESS\n         MVC   SC8LN24(80),ENDLNE05    RESET BOTTOM LINE\nR3270020 EQU   *\n         LA    R2,ATRLST8B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN8              ADDR OF SCREEN\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,ESCREEN8             ADDR OF END OF SCREEN\n         ST    R2,ASCRPTRE             STORE IN PTR AREA\n         LA    R2,SC8SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC8SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         CH    R1,=H'10'               DID WE GET 10 BYTES?\n         BE    R3270030                YES, CONTINUE\n         MVC   SC8LN24(80),ENDLNE07    NO, PUT OUT MESSAGE\n         B     R3270020                PUT SCREEN BACK OUT\nR3270030 EQU   *\n         MVC   SC8LN09+3(1),INPUT+0    RETURN DATA TO ORIGINAL SCREEN\n         MVC   SC8LN12+2(2),INPUT+1    RETURN DATA TO ORIGINAL SCREEN\n         MVC   SC8LN13+1(3),INPUT+3    RETURN DATA TO ORIGINAL SCREEN\n         MVC   SC8LN16+2(2),INPUT+6    RETURN DATA TO ORIGINAL SCREEN\n         MVC   SC8LN17+2(2),INPUT+8    RETURN DATA TO ORIGINAL SCREEN\n         LA    R2,INPUT                GET ADDR OF INPUT\n         LA    R3,10                   GET NUMBER OF BYTES\nR3270040 EQU   *\n         CLI   0(R2),C'_'              IS IT AN UNDERSCORE?\n         BE    R327REPL                YES, REPLACE IT WITH 0\n         CLI   0(R2),C'0'              IS IT A SPACE?\n         BE    R327REPL                YES, REPLACE IT WITH 0\n         LA    R2,1(R2)                BUMP PTR\n         BCT   R3,R3270040             ITERATE\n         B     R3270050                BYPASS\nR327REPL EQU   *\n         MVI   0(R2),C'0'              REPLACE WITH A ZERO\n         LA    R2,1(R2)                BUMP PTR\n         BCT   R3,R3270040             ITERATE\nR3270050 EQU   *\n         CLI   INPUT+0,C'2'            IS IT AT LEAST A 2?\n         BL    R327BAD1                NO, POST AS ERROR\n         CLI   INPUT+0,C'5'            IS IT GREATER THAN 5?\n         BH    R327BAD1                YES, POST AS ERROR\n         CLC   INPUT+1(2),=CL2'00'     DID USER TYPE IN A ROW VALUE?\n         BE    R3270500                NO, MAYBE HE WANTS TO GO BUFFER\n         CLC   INPUT+3(3),=CL3'000'    DID USER TYPE IN A COLUMN?\n         BE    R327BAD3                NO, BUT HE SHOULD HAVE\n         TRT   INPUT+1(2),TRTDEC       IS THE ROW NUMERIC?\n         BC    7,R327BAD2              NO, POST ERROR MESSAGE\n         TRT   INPUT+3(3),TRTDEC       IS THE COLUMN NUMERIC?\n         BC    7,R327BAD3              NO, POST ERROR MESSAGE\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         CLC   INPUT+1(2),=CL2'43'     HIGHEST ROW POSSIBLE\n         BH    R327BAD2                POST ERROR MESSAGE\n         CLC   INPUT+3(3),=CL3'132'    HIGHEST COLUMN POSSIBLE\n         BH    R327BAD3                POST ERROR MESSAGE\n         PACK  R327FLD1,INPUT+1(2)     PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         CLI   INPUT,C'5'              IS THIS A 3278 MOD 5?\n         BE    R3270060                YES, MULTIPLY BY 132\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         B     R3270070                BRANCH AROUND\nR3270060 EQU   *\n         MP    R327FLD1,=PL2'132'      MOD 5 - MULTIPLY BY 132\nR3270070 EQU   *\n         PACK  R327FLD2,INPUT+3(3)     PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         UNPK  SC8LN12+75(4),R327FLD1  PUT THE DECIMAL IN SCREEN\n         OI    SC8LN12+78,X'F0'        CLEAR SIGN NIBBLE\n         UNPK  DHINPUT,R327FLD1        SET UP FOR TRANSLATION\n         OI    DHINPUT+15,X'F0'             CLEAR SIGN\n         BAL   R9,DECHEX                    CONVERT TO HEX CHARACTERS\n         MVC   SC8LN13+75(4),DHOUTCHR+4     MOVE TO SCREEN\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         SLL   R2,1                    MULTIPLY BY 2\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   SC8LN16+2(2),0(R3)      MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         SLL   R2,1                    MULTIPLY BY 2\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   SC8LN17+2(2),0(R3)      MOVE CHARACTERS FROM TABLE\n         B     R327GOOD                GO POST GOOD MESSAGE AND DISPLAY\nR3270500 EQU   *\n         CLC   INPUT+6(2),=CL2'00'     DID USER TYPE IN A BUFFER VALUE?\n         BE    R327BAD6                NO, HE HAS TO TYPE IN SOMETHING.\n         CLC   INPUT+8(2),=CL2'00'     DID USER TYPE IN A BUFFER VALUE?\n         BE    R327BAD5                NO, HE HAS TO TYPE IN SOMETHING.\n         TRT   INPUT+1(2),TRTDEC       IS THE ROW NUMERIC?\n         BC    7,R327BAD4              NO, POST ERROR MESSAGE\n         TRT   INPUT+3(3),TRTDEC       IS THE COLUMN NUMERIC?\n         BC    7,R327BAD5              NO, POST ERROR MESSAGE\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   INPUT+6(2),0(R2)        IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,2(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         B     R327BAD4                POST ERROR MESSAGE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SRL   R2,1                    DIVIDE BY 2\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   INPUT+8(2),0(R2)        IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,2(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         B     R327BAD5                POST ERROR MESSAGE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SRL   R2,1                    DIVIDE BY 2\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         UNPK  SC8LN12+75(4),R327FLD1  PUT THE DECIMAL IN SCREEN\n         OI    SC8LN12+78,X'F0'        CLEAR SIGN NIBBLE\n         UNPK  DHINPUT,R327FLD1        SET UP FOR TRANSLATION\n         OI    DHINPUT+15,X'F0'             CLEAR SIGN\n         BAL   R9,DECHEX                    CONVERT TO HEX CHARACTERS\n         MVC   SC8LN13+75(4),DHOUTCHR+4     MOVE TO SCREEN\n         CLI   INPUT,C'5'              IS IT A MOD 5?\n         BE    R3270550                YES, DIVIDE BY 132\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         B     R3270560                GO AROUND\nR3270550 EQU   *\n         DP    R327FLD1,=PL2'132'      DIVIDE BY 132\nR3270560 EQU   *\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  SC8LN12+2(2),R327FLD1(2)    PUT ROW IN SCREEN\n         OI    SC8LN12+3,X'F0'             CLEAR SIGN\n         UNPK  SC8LN13+1(3),R327FLD1+2(2)  PUT COLUMN IN SCREEN\n         OI    SC8LN13+3,X'F0'             CLEAR SIGN\nR327GOOD EQU   *\n         MVC   SC8LN24(80),ENDLNE05    POST GOOD MESSAGE\n         B     R3270020                GO BACK UP AND DISPLAY RESULTS\nR327BAD1 EQU   *\n         MVC   SC8LN24(80),ENDLNE06    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'4AC3'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\nR327BAD2 EQU   *\n         MVC   SC8LN24(80),ENDLNE06    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'4DF2'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\nR327BAD3 EQU   *\n         MVC   SC8LN24(80),ENDLNE06    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'4FC1'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\nR327BAD4 EQU   *\n         MVC   SC8LN24(80),ENDLNE06    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'D2F2'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\nR327BAD5 EQU   *\n         MVC   SC8LN24(80),ENDLNE06    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'D4C2'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\nR327BAD6 EQU   *\n         MVC   SC8LN24(80),ENDLNE08    POST ERROR MESSAGE\n         MVC   SC8SUFIX+1(2),=XL2'4DF2'    RESET CURSOR ADDRESS\n         B     R3270020                GO PAINT SCREEN AGAIN\n         SPACE 1\nEXIT90   EQU   *\n         L     R9,SAVE90\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE500\n         B     BSAVE500\nSAVE500  DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE500 EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         L     R4,=A(SCRBLD)           GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         L     R7,ASCRPTRE             GET END OF INPUT SCREEN\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A 'START FIELD'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         CLI   0(R6),C'|'              START OF EXPANSION COMMAND?\n         BE    FSLOOP35                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP35 EQU   *\n         PACK  WORKDBLW,1(4,R6)        PACK NUMBER OF BYTES TO EXPAND\n         CVB   R8,WORKDBLW             CONVERT RADIX\nFSLOOP37 EQU   *\n         MVC   0(1,R4),5(R6)           MOVE EXPANSION CHARACTER\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         BCT   R8,FSLOOP37             PROCESS N TIMES\n         LA    R6,6(R6)                BUMP PAST EXPANSION COMMAND\n         B     FSLOOP30\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, RETURN TO ORIGINAL MENU\n         L     R4,=A(SCRBLD)           GET ADDR OF OUTPUT\n         TPUT  (R4),(R5),FULLSCR       PAINT OUTPUT SCREEN\n         TGET  INPUT,50                GET INPUT\n         OC    INPUT,=CL50' '          SET TO UPPERCASE\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                NO, CONTINUE\n         CH    R1,=H'2'                DID WE GET ANYTHING?\n         BL    EXIT500                 NO, EXIT\n         LR    R3,R1                   COPY LENGTH FOR BCT\n         LA    R2,INPUT                GET ADDRESS OF INPUT\nFSCHKDIR EQU   *\n         CLI   0(R2),C'='              DID USER WANT TO GO SOMEWHERE?\n         BE    FSWILDGO                YEP, DO IT TO IT......\n         LA    R2,1(R2)                BUMP PTR\n         BCT   R3,FSCHKDIR             ITERATE\n         B     EXIT500                 NOT FOUND, EXIT\nFSWILDGO EQU   *\n         MVC   INPUT+0(1),1(R2)        MOVE THE REQUESTED FUNCTION\n         B     DRBYP002                RETURN TO MENU - WILD GOTO\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         MVI   STAXSW,C'0'             RESET INTERRUPT SWITCH\n         B     DRBYPASS                RETURN TO MENU - WILD GOTO\n         SPACE 1\nEXIT500  EQU   *\n         L     R9,SAVE500\n         BR    R9\n         EJECT\n***********************************************************************\n*  INPUT TO THIS ROUTINE IS AN 8 CHARACTER REPRESENTATION OF A FULL-  *\n*  WORD HEX NUMBER.  THIS ROUTINE RIGHT-JUSTIFIES THE NUMBER, CHECKS  *\n*  IT FOR ALLOWABLE CHARACTERS, PADS IT WITH ZEROES, AND TRANSLATES   *\n*  IT INTO REAL HEX AND DECIMAL.                                      *\n*  INPUT TO THE ROUTINE IS IN HDINPUT, OUTPUT IS HDOUTHEX, HDOUTDEC,  *\n*  HDINPUT(NORMALIZED), AND HDRC.  HDRC=0 (GOOD), HDRC=1 (BAD)        *\n***********************************************************************\n         SPACE 2\nHEXDEC   DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'HEXDEC  '\nBSAVE510 EQU   *\n         SPACE 1\n         MVI   HDRC,C'0'               INIT TO GOOD\n*--> CHECK FOR VALID HEX CHARACTERS\n         TRT   HDINPUT,TRTHEX          ANY INVALID CHARS?\n         BC    7,HCVDBAD               GO PUT OUT BAD MESSAGE\n*--> RIGHT-JUSTIFY HEX REPRESENTATION\n         LA    R2,8                    GET LENGTH OF INPUT\nHCVDFNDB EQU   *\n         CLI   HDINPUT+7,C' '          IS IT A BLANK?\n         BNE   HCVDNOTB                NO, FINISHED\n         MVC   WORKDBLW+1(7),HDINPUT   MOVE FIRST 7\n         MVI   WORKDBLW,C' '           REPLACE WITH A BLANK\n         MVC   HDINPUT,WORKDBLW        MOVE IT BACK\n         BCT   R2,HCVDFNDB             GO TRY NEXT\n         B     HCVDBAD                 ALL BLANKS? - PUT OUT ERROR\nHCVDNOTB EQU   *\n*--> REPLACE LEADING BLANKS WITH ZEROES\n         LA    R3,HDINPUT              GET BEGINNING ADDRESS\n         LA    R2,8                    GET LENGTH\nHCVDTRBL EQU   *\n         CLI   0(R3),C' '              IS IT A BLANK?\n         BNE   HCVDTR                  NO, GO TRANSLATE\n         MVI   0(R3),C'0'              CHANGE IT TO A ZERO\n         LA    R3,1(R3)                BUMP INDEX\n         BCT   R2,HCVDTRBL             GO TRY NEXT BYTE\nHCVDTR   EQU   *\n*--> CHECK FOR ANY REMAINING BLANKS\n         MVI   TRTHEX+C' ',X'FF'       CHANGE BLANKS TO INVALID\n         TRT   HDINPUT,TRTHEX          ANY INVALID CHARS?\n         BC    8,HCVDTR2               NO, GO ABOUT YOUR BUSINESS\n         MVI   TRTHEX+C' ',X'00'       RESTORE TRT TABLE\n         B     HCVDBAD                 GO PUT OUT BAD MESSAGE\nHCVDTR2  EQU   *\n         MVI   TRTHEX+C' ',X'00'       RESTORE TRT TABLE\n*--> TRANSLATE HEX CHARS TO HEX NIBBLES AND CONVERT RADIX\n         MVC   HDWORK,HDINPUT          COPY INPUT TO WORK\n         TR    HDWORK,TRHEXNIB         TRANSLATE HEX TO NIBBLES\n         LA    R2,8                    GET LENGTH\n         LA    R3,HDWORK               GET BEGINNING ADDRESS\n         XR    R4,R4                   CLEAR REGISTER\n         XC    WORKDBLW,WORKDBLW       CLEAR WORK AREA\nHCVDLOAD EQU   *\n         MVC   WORKDBLW+3(1),0(R3)     MOVE TRANSLATED CHAR\n         SLL   R4,4                    SHIFT LEFT 4 BITS\n         O     R4,WORKDBLW             OR IN THE NIBBLE\n         LA    R3,1(R3)                BUMP INDEX\n         BCT   R2,HCVDLOAD             GO LOAD NEXT NIBBLE\n         ST    R4,HDOUTHEX             STORE HEX OUTPUT\n         CVD   R4,HDOUTDEC             STORE DEC OUTPUT\n*--> REPLACE LEADING ZEROES WITH BLANKS IN HEX FIELD\n         LA    R2,7                    GET LENGTH OF FIELD-1\n         LA    R3,HDINPUT              GET BEGINNING OF FIELD\nHCVDRPL0 EQU   *\n         CLI   0(R3),C'0'              IS IT A ZERO?\n         BNE   EXIT510                 NO, EXIT\n         MVI   0(R3),C' '              REPLACE WITH A BLANK\n         LA    R3,1(R3)                BUMP BY 1\n         BCT   R2,HCVDRPL0             ITERATE THROUGH ZERO CHECK\n         B     EXIT510                 BRANCH AROUND ERROR CODE\n*--> FLAG AS BAD INPUT\nHCVDBAD  EQU   *\n         MVI   HDRC,C'1'               FLAG AS BAD\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*  INPUT TO THIS ROUTINE IS A 15-DIGIT DECIMAL NUMBER IN CHARACTER    *\n*  FORMAT.  THIS ROUTINE RIGHT-JUSTIFIES THE NUMBER, CHECKS IT FOR    *\n*  ALLOWABLE CHARACTERS, PADS IT WITH ZEROES, AND TRANSLATES IT INTO  *\n*  REAL HEX AND DECIMAL.                                              *\n*  INPUT TO RTN IS DHINPUT, OUTPUT IS DHOUTHEX, DHOUTDEC, DHOUTCHR,   *\n*  DHINPUT(NORMALIZED), AND HDRC.  DHRC=0 (GOOD), DHRC=1 (BAD)        *\n***********************************************************************\n         SPACE 2\nDECHEX   DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'DECHEX  '\nBSAVE520 EQU   *\n         SPACE 1\n         MVI   DHRC,C'0'               INIT TO GOOD\n         MVI   DHNEG,C'+'              INITIALIZE TO POSITIVE\n*--> CHECK FOR NEGATIVE SIGN\n         XC    TRCOMMON,TRCOMMON       CLEAR COMMON TRT AREA\n         MVI   TRCOMMON+C'+',C'+'      INSERT A PLUS SIGN\n         TRT   DHINPUT,TRCOMMON        DID USER TYPE IN A PLUS SIGN?\n         BC    8,HCVBTRYD              GO TRY DASH\n         MVI   0(R1),C' '              REPLACE PLUS SIGN WITH BLANK\n         B     HCVBRTJS                GO RIGHT-JUSTIFY\nHCVBTRYD EQU   *\n         MVI   TRCOMMON+C'+',X'00'     CLEAR PLUS SIGN FROM TRT AREA\n         MVI   TRCOMMON+C'-',C'-'      INSERT A DASH\n         TRT   DHINPUT,TRCOMMON        DID USER TYPE IN NEGATIVE SIGN?\n         MVI   TRCOMMON+C'-',X'00'     CLEAR DASH FROM TRT AREA\n         BC    8,HCVBRTJS              GO RIGHT-JUSTIFY\n         MVI   0(R1),C' '              REPLACE NEG SIGN WITH BLANK\n         MVI   DHNEG,C'-'              SET SIGN SWITCH TO NEGATIVE\n*--> CHECK FOR ILLEGALS THEN RIGHT-JUSTIFY\nHCVBRTJS EQU   *\n         TRT   DHINPUT,TRTDEC          ANY INVALID CHARS?\n         BC    7,HCVBBAD               GO PUT OUT BAD MESSAGE\n         LA    R2,16                   GET LENGTH OF INPUT\nHCVBFNDB EQU   *\n         CLI   DHINPUT+15,C' '         IS IT A BLANK?\n         BNE   HCVBNOTB                NO, FINISHED\n         MVC   WORK16+1(15),DHINPUT    MOVE FIRST 15\n         MVI   WORK16,C' '             REPLACE WITH A BLANK\n         MVC   DHINPUT,WORK16          MOVE IT BACK\n         BCT   R2,HCVBFNDB             GO TRY NEXT\n         B     HCVBBAD                 ALL BLANKS? - PUT OUT ERROR\nHCVBNOTB EQU   *\n*--> REPLACE LEADING BLANKS WITH ZEROES\n         LA    R3,DHINPUT              GET BEGINNING ADDRESS\n         LA    R2,16                   GET LENGTH\nHCVBTRBL EQU   *\n         CLI   0(R3),C' '              IS IT A BLANK?\n         BNE   HCVBTR                  NO, GO TRANSLATE\n         MVI   0(R3),C'0'              CHANGE IT TO A ZERO\n         LA    R3,1(R3)                BUMP INDEX\n         BCT   R2,HCVBTRBL             GO TRY NEXT BYTE\nHCVBTR   EQU   *\n*--> CHECK FOR ANY REMAINING BLANKS\n         MVI   TRTDEC+C' ',X'FF'       CHANGE BLANKS TO INVALID\n         TRT   DHINPUT,TRTDEC          ANY INVALID CHARS?\n         BC    8,HCVBTR2               NO, GO ABOUT YOUR BUSINESS\n         MVI   TRTDEC+C' ',X'00'       RESTORE TRT TABLE\n         B     HCVBBAD                 GO PUT OUT BAD MESSAGE\nHCVBTR2  EQU   *\n         MVI   TRTDEC+C' ',X'00'       RESTORE TRT TABLE\n*--> TRANSLATE DECIMAL NUMBER TO HEX\n         PACK  DHOUTDEC,DHINPUT        PACK INPUT\n         MVC   DHINPUT(15),DHINPUT+1   SHIFT LEFT 1 BYTE\n         MVC   DHINPUT+15(1),DHNEG     INDICATE NEG OR POSITIVE\n         CLI   DHNEG,C'+'              IS IT POSITIVE?\n         BE    HCVBYPCS                BYPASS CHANGE SIGN\n         NI    DHOUTDEC+7,X'F0'        TURN OFF BITS IN SIGN\n         OI    DHOUTDEC+7,X'0D'        INDICATE NEGATIVE\nHCVBYPCS EQU   *\n         CVB   R2,DHOUTDEC             CONVERT TO BINARY\n         ST    R2,DHOUTHEX             STORE HEX VERSION\n         LA    R3,8                    GET NUMBER OF NIBBLES\n         LA    R4,DHOUTCHR+7           GET BEGIN ADDRESS\nHCVBCHR1 EQU   *\n         STC   R2,0(R4)                STORE LOW-ORDER NIBBLE\n         SRL   R2,4                    SHIFT RIGHT ONE NIBBLE\n         BCTR  R4,0                    SUBTRACT ONE FROM INDEX\n         BCT   R3,HCVBCHR1             ITERATE 8 TIMES\n         NC    DHOUTCHR,=8XL1'0F'      AND OUT HIGH ORDER NIBBLE\n         TR    DHOUTCHR,TRHEXCHR       TRANSLATE TO REAL CHARACTERS\n*--> REPLACE LEADING ZEROES WITH BLANKS IN HEX FIELD\n         LA    R2,7                    GET LENGTH OF FIELD-1\n         LA    R3,DHOUTCHR             GET BEGINNING OF FIELD\nHCVBRPL0 EQU   *\n         CLI   0(R3),C'0'              IS IT A ZERO?\n         BNE   HCVBRPL1                NO, EXIT\n         MVI   0(R3),C' '              REPLACE WITH A BLANK\n         LA    R3,1(R3)                BUMP BY 1\n         BCT   R2,HCVBRPL0             ITERATE THROUGH ZERO CHECK\n*--> REPLACE LEADING ZEROES WITH BLANKS IN DEC FIELD\nHCVBRPL1 EQU   *\n         LA    R2,14                   GET LENGTH OF FIELD-1\n         LA    R3,DHINPUT              GET BEGINNING OF FIELD\nHCVBRPL2 EQU   *\n         CLI   0(R3),C'0'              IS IT A ZERO?\n         BNE   EXIT520                 NO, EXIT\n         MVI   0(R3),C' '              REPLACE WITH A BLANK\n         LA    R3,1(R3)                BUMP BY 1\n         BCT   R2,HCVBRPL2             ITERATE THROUGH ZERO CHECK\n         B     EXIT520                 BYPASS ERROR CODE\n*--> FLAG AS BAD INPUT\nHCVBBAD  EQU   *\n         MVI   DHRC,C'1'               FLAG AS BAD\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE HANDLES ALL PRELIMINARY EDITING AND CONVERSION FOR  *\n*  THE HIGHER LEVEL ROUTINES THAT PERFORM DYADIC OPERATIONS SUCH AS   *\n*  ADDITION AND MULTIPLICATION.  AT ENTRY TO THE ROUTINE, THE INPUT   *\n*  IS LOCATED IN THE 'INPUT' INPUT BUFFER.                            *\n***********************************************************************\n         SPACE 2\nDYADIC   DS    0H\n         ST    R9,SAVE530\n         B     BSAVE530\nSAVE530  DC    F'-1'\n         DC    CL8'DYADIC  '\nBSAVE530 EQU   *\n         SPACE 1\n         XR    R15,R15                   CLEAR RETURN CODE REGISTER\n         MVC   DIDATA1,=CL50' '          INIT DATA 1\n         MVC   DIDATA2,=CL50' '          INIT DATA 2\n         MVI   DIRADIX1,C' '             INIT RADIX 1\n         MVI   DIRADIX2,C' '             INIT RADIX 2\n         MVI   DIRADIX3,C' '             INIT RADIX 3\n*--> MOVE THE INPUT DATA FROM THE INPUT AREA TO THE FORMAT AREA\n         LA    R3,INPUT                GET ORIGIN ADDRESS\n         AR    R3,R1                   ADD THE INPUT LENGTH\n         MVI   1(R3),C':'              FLAG LAST BYTE\n         LA    R3,5                    GET COUNT FOR BCT\n         XC    TRCOMMON,TRCOMMON       CLEAR TRT AREA\n         MVI   TRCOMMON+C':',C':'      SET CHAR FOR SEARCH\n         LA    R4,INPUT+2              SET BASE ADDRESS\n         LA    R5,DPEXMVC              SET EXMVC INDEX REGISTER\nDPLOOP01 EQU   *\n         TRT   0(18,R4),TRCOMMON       FIND NEXT COLON\n         LR    R6,R1                   SAVE R1\n         SR    R1,R4                   SUBTRACT BASE OF FIELD\n         BCTR  R1,0                    SUBTRACT 1 FOR BYTE BEFORE COLON\n         LTR   R1,R1                   IS LENGTH=0?\n         BZ    DPBYPEX                 YES, BYPASS THE MOVE\n         BCTR  R1,0                    SUBTRACT 1 FOR EX MVC\n         EX    R1,0(R5)                EXECUTE THE MOVE\nDPBYPEX  EQU   *\n         LA    R5,6(R5)                BUMP TO NEXT EXECUTED MVC\n         LR    R4,R6                   COPY SAVED REGISTER\n         LA    R4,1(R4)                BUMP PAST CURRENT COLON\n         BCT   R3,DPLOOP01             ITERATE 5 TIMES\n         B     DPRADIX                 GO CHECK RADIX\nDPEXMVC  MVC   DIRADIX1(0),0(R4)       MOVE RADIX 1\n         MVC   DIDATA1(0),0(R4)        MOVE DATA 1\n         MVC   DIRADIX2(0),0(R4)       MOVE RADIX 2\n         MVC   DIDATA2(0),0(R4)        MOVE DATA 2\n         MVC   DIRADIX3(0),0(R4)       MOVE RADIX 3\n*--> CHECK THAT RADIX ITEMS ARE ALLOWABLE\nDPRADIX  EQU   *\n         MVI   TRCOMMON,X'FF'          SET UP TRT AREA\n         MVC   TRCOMMON+1(255),TRCOMMON\n         MVI   TRCOMMON+C'D',X'00'     ALLOW D=DECIMAL\n         MVI   TRCOMMON+C'X',X'00'           X=HEX\n         TRT   DIRADIX1,TRCOMMON       RADIX 1 OK?\n         BC    7,DPERR04               GO FLAG ERROR RC=04\n         TRT   DIRADIX2,TRCOMMON       RADIX 2 OK?\n         BC    7,DPERR08               GO FLAG ERROR RC=08\n         TRT   DIRADIX3,TRCOMMON       RADIX 3 OK?\n         BC    7,DPERR12               GO FLAG ERROR RC=12\n*--> CHECK THE DATA ITEMS FOR DECIMAL\n         CLI   DIRADIX1,C'D'           DECIMAL?\n         BNE   DPCHKD2                 NO, CHECK RADIX 2 : DEC\n         MVC   DHINPUT,DIDATA1         SET INPUT UP\n         BAL   R9,DECHEX               CALL REFORMAT ROUTINE\n         MVC   DIDATA1,DHINPUT         MOVE REFORMATTED INPUT\n         CLI   DHRC,C'1'               DID IT GO OK?\n         BE    DPERR16                 NO, FLAG ERROR RC=16\n         ZAP   RESULT1,DHOUTDEC        SAVE RESULT IN RESULT1\nDPCHKD2  EQU   *\n         CLI   DIRADIX2,C'D'           DECIMAL?\n         BNE   DPCHKX1                 NO, CHECK RADIX 1 : HEX\n         MVC   DHINPUT,DIDATA2         SET INPUT UP\n         BAL   R9,DECHEX               CALL REFORMAT ROUTINE\n         MVC   DIDATA2,DHINPUT         MOVE REFORMATTED INPUT\n         CLI   DHRC,C'1'               DID IT GO OK?\n         BE    DPERR20                 NO, FLAG ERROR RC=20\n         ZAP   RESULT2,DHOUTDEC        SAVE RESULT IN RESULT2\n*--> CHECK THE DATA ITEMS FOR HEX; LEFT JUSTIFY AND CONVERT\nDPCHKX1  EQU   *\n         CLI   DIRADIX1,C'D'           DECIMAL?\n         BE    DPCHKX2                 YES, ALREADY CHECKED ABOVE\n         LA    R2,8                    NUMBER OF BYTES\n         LA    R3,DIDATA1              GET BEGINNING ADDRESS\nDPX1LP01 EQU   *\n         CLI   0(R3),C' '              IS THIS A BLANK?\n         BNE   DPX1LP02                NO, BREAK OUT OF LOOP\n         MVC   DIDATA1(15),DIDATA1+1   SHIFT LEFT ONE BYTE\n         MVI   DIDATA1+15,C' '         CLEAR SLACK BYTE\n         BCT   R2,DPX1LP01             ITERATE 8 TIMES\nDPX1LP02 EQU   *\n         MVC   HDINPUT,DIDATA1         SET INPUT UP\n         BAL   R9,HEXDEC               CALL REFORMAT ROUTINE\n         MVC   DIDATA1+0(8),=CL50' '   CLEAR BEGINNING PART\n         MVC   DIDATA1+8(8),HDINPUT    MOVE REFORMATTED INPUT\n         CLI   HDRC,C'1'               DID IT GO OK?\n         BE    DPERR16                 NO, FLAG ERROR RC=16\n         ZAP   RESULT1,HDOUTDEC        SAVE RESULT IN RESULT1\nDPCHKX2  EQU   *\n         CLI   DIRADIX2,C'D'           DECIMAL?\n         BE    EXIT530                 YES, ALREADY CHECKED:EXIT RTN\n         LA    R2,8                    NUMBER OF BYTES\n         LA    R3,DIDATA2              GET BEGINNING ADDRESS\nDPX2LP01 EQU   *\n         CLI   0(R3),C' '              IS THIS A BLANK?\n         BNE   DPX2LP02                NO, BREAK OUT OF LOOP\n         MVC   DIDATA2(15),DIDATA2+1   SHIFT LEFT ONE BYTE\n         MVI   DIDATA2+15,C' '         CLEAR SLACK BYTE\n         BCT   R2,DPX2LP01             ITERATE 8 TIMES\nDPX2LP02 EQU   *\n         MVC   HDINPUT,DIDATA2         SET INPUT UP\n         BAL   R9,HEXDEC               CALL REFORMAT ROUTINE\n         MVC   DIDATA2+0(8),=CL50' '   CLEAR BEGINNING PART\n         MVC   DIDATA2+8(8),HDINPUT    MOVE REFORMATTED INPUT\n         CLI   HDRC,C'1'               DID IT GO OK?\n         BE    DPERR20                 NO, FLAG ERROR RC=20\n         ZAP   RESULT2,HDOUTDEC        SAVE RESULT IN RESULT2\n         B     EXIT530                 EXIT RTN\nDPERR04  EQU   *\n         LA    R15,4                   INDICATE RADIX 1 NO GOOD\n         B     EXIT530                 EXIT RTN\nDPERR08  EQU   *\n         LA    R15,8                   INDICATE RADIX 2 NO GOOD\n         B     EXIT530                 EXIT RTN\nDPERR12  EQU   *\n         LA    R15,12                  INDICATE RADIX 3 NO GOOD\n         B     EXIT530                 EXIT RTN\nDPERR16  EQU   *\n         LA    R15,16                  INDICATE DATA 1 NOT DECIMAL\n         B     EXIT530                 EXIT RTN\nDPERR20  EQU   *\n         LA    R15,20                  INDICATE DATA 2 NOT DECIMAL\n         B     EXIT530                 EXIT RTN\n         SPACE 1\nEXIT530  EQU   *\n         L     R9,SAVE530\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nWORK16   DC    2D'0'                   DEC/HEX WORK AREA\nRESULT1  DC    PL16'0'                 RESULT 1 FROM DYADIC ROUTINE\nRESULT2  DC    PL16'0'                 RESULT 2 FROM DYADIC ROUTINE\nRESULT3  DC    PL16'0'                 RESULT 3 FROM PROCESSORS\nREMAIN   DC    PL16'0'                 REMAINDER FROM DIVIDE PROC\nDIVWORK1 DC    PL9'0'                  WORK AREA FOR DIVIDE PROC\nRESULTSW DC    CL1'0'                  0=NO RESULT99, 1=CURR RESULT99\nRESULTRD DC    CL1'D'                  RESULT RADIX = D/X\nRESULT99 DC    PL16'0'                 RESULT FROM LAST OPERATION\nMSG1     DC    CL17'STAX MACRO FAILED'\nENDLNE01 DC    CL40'-------------- ENTER MENU OPTION NUMBER '\n         DC    CL40'DESIRED THEN PRESS ENTER ---------------'\nENDLNE02 DC    CL40'----------------- CORRECT OPTION NUMBER '\n         DC    CL40'AND THEN PRESS ENTER -------------------'\nENDLNE03 DC    CL40'----------------- OPTION NOT IN USE - CO'\n         DC    CL40'RRECT AND PRESS ENTER ------------------'\nENDLNE05 DC    CL40'------------------------- TO RETURN TO M'\n         DC    CL40'ENU PRESS PA1 --------------------------'\nENDLNE06 DC    CL40'------------ INVALID VALUE ENTERED, PLEA'\n         DC    CL40'SE CORRECT AND PRESS ENTER -------------'\nENDLNE07 DC    CL40'---------------- MORE CHARACTERS DELETED'\n         DC    CL40' THAN INSERTED -------------------------'\nENDLNE08 DC    CL40'---------------- CHOOSE EITHER ROW/COLUM'\n         DC    CL40'N OR BUFFER INPUT ----------------------'\nINPUT    DC    CL50' '                 INPUT FROM TERMINAL VIA TGET\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nEDUNPK   DC    XL16'40202020202020202020202020202120'\nDECEDIT  DC    XL21'402020206B2020206B2020206B2020206B20212060'\nDECEDIT2 DC    XL18'40202020206B2020206B2020206B2020206B'\n         DC    XL16'2020206B2020206B2020206B20212060'\nDEFRADIX EQU   C'D'                    DEFAULT RADIX\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> WORK DATA ITEMS FOR HEXDEC ROUTINE\nHDOUTHEX DS    F                       OUTPUT FROM HEXDEC RTN:HEX\nHDINPUT  DS    CL8                     INPUT TO HEXDEC RTN\nHDWORK   DS    CL8                     WORKAREA FOR HEXDEC RTN\nHDOUTDEC DS    PL8                     OUTPUT FROM HEXDEC RTN:DEC\nHDRC     DS    CL1                     RETURN CODE FROM HEXDEC RTN\n*--> WORK DATA ITEMS FOR DECHEX ROUTINE\nDHOUTDEC DS    PL8                     OUTPUT FROM DECHEX RTN:DEC\nDHINPUT  DS    CL16                    INPUT TO DECHEX RTN\nDHWORK   DS    CL8                     WORKAREA FOR DECHEX RTN\nDHOUTCHR DS    CL8                     OUTPUT FROM DECHEX RTN:CHAR\nDHOUTHEX DS    F                       OUTPUT FROM DECHEX RTN:HEX\nDHRC     DS    CL1                     RETURN CODE FROM DECHEX RTN\nDHNEG    DC    CL1'+'                  '+'=POS, '-'=NEG\n*--> WORK AREA FOR THE DYADIC ROUTINE\nDYADIN   DS    0CL45                   STRUCTURED INPUT FIELD\n         DC    CL2'1:'\nDIRADIX1 DS    CL1                     D=DECIMAL, X=HEX\n         DC    CL2'2:'\nDIDATA1  DS    CL16                    DATA NUMBER 1\n         DC    CL2'3:'\nDIRADIX2 DS    CL1                     D=DECIMAL, X=HEX\n         DC    CL2'4:'\nDIDATA2  DS    CL16                    DATA NUMBER 2\n         DC    CL2'5:'\nDIRADIX3 DS    CL1                     D=DECIMAL, X=HEX\n*--> TRT TABLES\nTRTHEX   DC    256XL1'FF'              ALL CHARS OTHER THAN\n         ORG   TRTHEX+C'0'\n         DC    10XL1'00'                   0-9\n         ORG   TRTHEX+C'A'\n         DC    6XL1'00'                    A-F\n         ORG   TRTHEX+C' '\n         DC    1XL1'00'                    BLANK\n         ORG\nTRTDEC   DC    256XL1'FF'              ALL CHARS OTHER THAN\n         ORG   TRTDEC+C'0'\n         DC    10XL1'00'                   0-9\n         ORG   TRTDEC+C' '\n         DC    1XL1'00'                    BLANK\n         ORG\nTRHEXNIB DC    256XL1'00'              DEFAULT CHARACTERS ARE ZERO\n         ORG   TRHEXNIB+C'0'\n         DC    XL10'00010203040506070809'  0-9\n         ORG   TRHEXNIB+C'A'\n         DC    XL6'0A0B0C0D0E0F'           A-F\n         ORG\nTRHEXCHR DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO HEX CHARS\nTRCOMMON DC    XL256'00'               COMMON TRT AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    C'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    C'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    C'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    C'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE 2\n         LTORG                         LITERAL POOL\n         SPACE 2\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRPTRE DC    A(0)                    PTR TO END OF ACTIVE SCREEN\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@UH)\n         DC    AL3(SC1LN03+79)         MENU OPTION NUMBER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC1LN04+01)         REST OF MENU SCREEN\nATRLST1E EQU   *\n         SPACE 1\nATRLST2B DS    0F\n         DC    A(ATRLST2E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC2LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC2LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC2LN04+79)\n         DC    AL1(ATR@UH)\n         DC    AL3(SC2LN07+79)         BEGIN OF HEX NUMBER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC2LN08+08)         END OF HEX NUMBER\n         DC    AL1(ATR@PL)\n         DC    AL3(SC2LN09+79)         BEGIN OF DEC NUMBER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC2LN10+21)         END OF DEC NUMBER\nATRLST2E EQU   *\n         SPACE 1\nATRLST3B DS    0F\n         DC    A(ATRLST3E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC3LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC3LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC3LN04+79)\n         DC    AL1(ATR@UH)\n         DC    AL3(SC3LN07+79)         BEGIN OF DEC NUMBER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC3LN08+16)         END OF DEC NUMBER\n         DC    AL1(ATR@PL)\n         DC    AL3(SC3LN09+79)         BEGIN OF DEC NUMBER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC3LN10+08)         END OF HEX NUMBER\nATRLST3E EQU   *\n         SPACE 1\nATRLST4B DS    0F\n         DC    A(ATRLST4E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN04+79)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC4LN08+00)         NOTE NUMBER 1\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC4LN08+03)         RADIX NUMBER 1\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC4LN08+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC4LN08+27)         NOTE NUMBER 2\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC4LN08+30)         ADD DATA NUMBER 1\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC4LN08+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC4LN10+00)         NOTE NUMBER 3\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC4LN10+03)         RADIX NUMBER 2\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC4LN10+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC4LN10+27)         NOTE NUMBER 4\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC4LN10+30)         ADD DATA NUMBER 2\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC4LN10+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC4LN14+00)         NOTE NUMBER 5\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC4LN14+03)         RADIX NUMBER 3\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC4LN14+05)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN14+30)         RESULT NUMBER 1\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN14+65)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN17+00)         NOTE NUMBER 1:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN17+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN18+00)         NOTE NUMBER 2:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN18+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN19+00)         NOTE NUMBER 3:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN19+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN20+00)         NOTE NUMBER 4:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN20+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC4LN21+00)         NOTE NUMBER 5:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC4LN21+03)\nATRLST4E EQU   *\n         SPACE 1\nATRLST5B DS    0F\n         DC    A(ATRLST5E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN04+79)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC5LN08+00)         NOTE NUMBER 1\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC5LN08+03)         RADIX NUMBER 1\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC5LN08+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC5LN08+27)         NOTE NUMBER 2\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC5LN08+30)         SUBTRACT FROM NUMBER\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC5LN08+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC5LN10+00)         NOTE NUMBER 3\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC5LN10+03)         RADIX NUMBER 2\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC5LN10+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC5LN10+27)         NOTE NUMBER 4\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC5LN10+30)         SUBTRACT NUMBER\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC5LN10+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC5LN14+00)         NOTE NUMBER 5\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC5LN14+03)         RADIX NUMBER 3\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC5LN14+05)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN14+30)         RESULT NUMBER 1\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN14+65)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN17+00)         NOTE NUMBER 1:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN17+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN18+00)         NOTE NUMBER 2:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN18+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN19+00)         NOTE NUMBER 3:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN19+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN20+00)         NOTE NUMBER 4:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN20+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC5LN21+00)         NOTE NUMBER 5:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC5LN21+03)\nATRLST5E EQU   *\n         SPACE 1\nATRLST6B DS    0F\n         DC    A(ATRLST6E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN04+79)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC6LN08+00)         NOTE NUMBER 1\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC6LN08+03)         RADIX NUMBER 1\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC6LN08+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC6LN08+27)         NOTE NUMBER 2\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC6LN08+30)         1ST # TO MULTIPLY\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC6LN08+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC6LN10+00)         NOTE NUMBER 3\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC6LN10+03)         RADIX NUMBER 2\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC6LN10+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC6LN10+27)         NOTE NUMBER 4\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC6LN10+30)         2ND # TO MULTIPLY\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC6LN10+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC6LN14+00)         NOTE NUMBER 5\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC6LN14+03)         RADIX NUMBER 3\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC6LN14+05)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN14+30)         RESULT NUMBER 1\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN14+65)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN17+00)         NOTE NUMBER 1:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN17+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN18+00)         NOTE NUMBER 2:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN18+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN19+00)         NOTE NUMBER 3:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN19+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN20+00)         NOTE NUMBER 4:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN20+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC6LN21+00)         NOTE NUMBER 5:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC6LN21+03)\nATRLST6E EQU   *\n         SPACE 1\nATRLST7B DS    0F\n         DC    A(ATRLST7E)             END OF THIS LIST\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN04+00)\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN04+79)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC7LN08+00)         NOTE NUMBER 1\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC7LN08+03)         RADIX NUMBER 1\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC7LN08+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC7LN08+27)         NOTE NUMBER 2\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC7LN08+30)         DIVIDEND\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC7LN08+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC7LN10+00)         NOTE NUMBER 3\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC7LN10+03)         RADIX NUMBER 2\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC7LN10+05)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC7LN10+27)         NOTE NUMBER 4\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC7LN10+30)         DIVISOR\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC7LN10+47)\n         DC    AL1(ATR@PLMO)\n         DC    AL3(SC7LN14+00)         NOTE NUMBER 5\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC7LN14+03)         RADIX NUMBER 3\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC7LN14+05)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN14+30)         RESULT NUMBER 1\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN14+65)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN15+30)         REMAINDER\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN15+65)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN17+00)         NOTE NUMBER 1:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN17+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN18+00)         NOTE NUMBER 2:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN18+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN19+00)         NOTE NUMBER 3:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN19+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN20+00)         NOTE NUMBER 4:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN20+03)\n         DC    AL1(ATR@PL)\n         DC    AL3(SC7LN21+00)         NOTE NUMBER 5:EXPLANATION\n         DC    AL1(ATR@PH)\n         DC    AL3(SC7LN21+03)\nATRLST7E EQU   *\n         SPACE 1\nATRLST8B DS    0F\n         DC    A(ATRLST8E)             END OF THIS LIST\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PLS)\n         DC    AL3(SC8LN04+00)\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN04+79)\n         DC    AL1(ATR@UHNM)\n         DC    AL3(SC8LN09+02)         MODEL NUMBER\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN09+04)\n         DC    AL1(ATR@UHNM)\n         DC    AL3(SC8LN12+01)         ROW NUMBER\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN12+04)\n         DC    AL1(ATR@PLS)\n         DC    AL3(SC8LN12+74)         SCREEN ADDRESS (DECIMAL)\n         DC    AL1(ATR@UHNM)\n         DC    AL3(SC8LN13+00)         COLUMN NUMBER\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN13+04)\n         DC    AL1(ATR@PLS)\n         DC    AL3(SC8LN13+74)         SCREEN ADDRESS (HEX)\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC8LN16+01)         FIRST BYTE OF BUFFER ADDRESS\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN16+04)\n         DC    AL1(ATR@UHMO)\n         DC    AL3(SC8LN17+01)         SECOND BYTE OF BUFFER ADDRESS\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN17+04)\n         DC    AL1(ATR@PLS)\n         DC    AL3(SC8LN20+00)         NOTE\n         DC    AL1(ATR@PHS)\n         DC    AL3(SC8LN22+79)\nATRLST8E EQU   *\n         SPACE 1\nATR@PL   EQU X'60'              PROTECT-LOW  / BLUE  /\nATR@PLS  EQU X'F0'              PROTECT-LOW  / BLUE  / SKIP\nATR@PLMO EQU X'61'              PROTECT-LOW  / BLUE  / MDT ON\nATR@PH   EQU X'E8'              PROTECT-HIGH / WHITE /\nATR@PHS  EQU X'F8'              PROTECT-HIGH / WHITE / SKIP\nATR@PHMO EQU X'E9'              PROTECT-HIGH / WHITE / MDT ON\nATR@UL   EQU X'40'              UNPROT-LOW   / GREEN /\nATR@ULMO EQU X'C1'              UNPROT-LOW   / GREEN / MDT ON\nATR@UH   EQU X'C8'              UNPROT-HIGH  / RED   /\nATR@UHMO EQU X'C9'              UNPROT-HIGH  / RED   / MDT ON\nATR@UHNM EQU X'D9'              UNPROT-HIGH  / RED   / MDT ON / NUMERIC\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\nSC1LN03  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN04  DC    CL40'  <==== ENTER OPTION DESIRED FROM MENU B'\n         DC    CL40'ELOW                                    ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0320 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    CL40'0 - END THE ARITHMETIC COMMAND          '\n         DC    CL40'5 - MULTIPLICATION                      ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    CL40'1 - CONVERT HEX TO DECIMAL              '\n         DC    CL40'6 - DIVISION                            ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    CL40'2 - CONVERT DECIMAL TO HEX              '\n         DC    CL40'7 - CONVERT 3270 BUFFER ADDRESSES       ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    CL40'3 - ADDITION                            '\n         DC    CL40'8 - NOT IN USE                          ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    CL40'4 - SUBTRACTION                         '\n         DC    CL40'9 - NOT IN USE                          ',C'|0320 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC1LN24  DC    CL40'-------------- ENTER MENU OPTION NUMBER '\n         DC    CL40'DESIRED THEN PRESS ENTER ---------------'\nESCREEN1 EQU   *\nSC1SUFIX DC    XL4'11C3F013'\n         EJECT\nSCREEN2  EQU   *\nSC2LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC2LN04  DC    CL40'      ====   C O N V E R T   T O   D E C'\n         DC    CL40' I M A L   P R O C E S S O R   ====     ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\nSC2LN07  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN08  DC    CL40'         <==== ENTER HEX VALUE THAT YOU '\n         DC    CL40'WISH CONVERTED TO DECIMAL               '\nSC2LN09  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN10  DC    CL40'                      <==== THIS IS THE '\n         DC    CL40'RESULT                                  ',C'|1040 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC2LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN2 EQU   *\nSC2SUFIX DC    XL4'11C8F013'\n         EJECT\nSCREEN3  EQU   *\nSC3LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC3LN04  DC    CL40'   ====  C O N V E R T   T O   H E X A D'\n         DC    CL40' E C I M A L   P R O C E S S O R  ====  ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\nSC3LN07  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC3LN08  DC    CL40'                 <==== ENTER THE DECIMAL'\n         DC    CL40' VALUE THAT YOU WISH CONVERTED TO HEX   '\nSC3LN09  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC3LN10  DC    CL40'         <==== THIS IS THE RESULT       '\n         DC    CL40'                                        ',C'|1040 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC3LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN3 EQU   *\nSC3SUFIX DC    XL4'11C8F013'\n         EJECT\nSCREEN4  EQU   *\nSC4LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN04  DC    CL40'               ====   A D D I T I O N   '\n         DC    CL40'P R O C E S S O R   ====                ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0080 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN08  DC    CL40' 1: D <==== ENTER RADIX     2:          '\n         DC    CL40'        <==== ENTER FIRST NUMBER TO ADD ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN10  DC    CL40' 3: D <==== ENTER RADIX     4:          '\n         DC    CL40'        <==== ENTER SECOND NUMBER TO ADD',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN12  DC    CL40'                               ---------'\n         DC    CL40'-------                                 ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN14  DC    CL40' 5: D <==== ENTER RADIX                 '\n         DC    CL40'                          <==== SUM     ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN17  DC    CL40' 1: ENTER RADIX OF FIRST NUMBER TO ADD, '\n         DC    CL40'D=DECIMAL, X=HEXADECIMAL                '\nSC4LN18  DC    CL40' 2: ENTER FIRST NUMBER TO ADD, PLEASE MA'\n         DC    CL40'KE SURE ITEM (1) IS EQUIVALENT          '\nSC4LN19  DC    CL40' 3: ENTER RADIX OF SECOND NUMBER TO ADD,'\n         DC    CL40' D=DECIMAL, X=HEXADECIMAL               '\nSC4LN20  DC    CL40' 4: ENTER SECOND NUMBER TO ADD, PLEASE M'\n         DC    CL40'AKE SURE ITEM (3) IS EQUIVALENT         '\nSC4LN21  DC    CL40' 5: ENTER RADIX THAT YOU WOULD LIKE THE '\n         DC    CL40'SUM DISPLAY IN, D=DECIMAL, X=HEXADECIMAL',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC4LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN4 EQU   *\nSC4SUFIX DC    XL4'11C94F13'\n         EJECT\nSCREEN5  EQU   *\nSC5LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN04  DC    CL40'             ===   S U B T R A C T I O N'\n         DC    CL40'   P R O C E S S O R   ====             ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0080 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN08  DC    CL40' 1: D <==== ENTER RADIX     2:          '\n         DC    CL40'        <==== ENTER # TO SUBTRACT FROM  ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN10  DC    CL40' 3: D <==== ENTER RADIX     4:          '\n         DC    CL40'        <==== ENTER # TO SUBTRACT       ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN12  DC    CL40'                               ---------'\n         DC    CL40'-------                                 ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN14  DC    CL40' 5: D <==== ENTER RADIX                 '\n         DC    CL40'                          <==== #1 - #2 ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN17  DC    CL40' 1: ENTER RADIX OF # TO SUBTRACT FROM, D'\n         DC    CL40'=DECIMAL, X=HEXADECIMAL                 '\nSC5LN18  DC    CL40' 2: ENTER # TO SUBTRACT FROM, PLEASE MAK'\n         DC    CL40'E SURE ITEM (1) IS EQUIVALENT           '\nSC5LN19  DC    CL40' 3: ENTER RADIX OF # TO SUBTRACT, D=DECI'\n         DC    CL40'MAL, X=HEXADECIMAL                      '\nSC5LN20  DC    CL40' 4: ENTER # TO SUBTRACT, PLEASE MAKE SUR'\n         DC    CL40'E ITEM (3) IS EQUIVALENT                '\nSC5LN21  DC    CL40' 5: ENTER RADIX THAT YOU WOULD LIKE THE '\n         DC    CL40'DIFFERENCE IN, D=DECIMAL, X=HEXADECIMAL ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC5LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN5 EQU   *\nSC5SUFIX DC    XL4'11C94F13'\n         EJECT\nSCREEN6  EQU   *\nSC6LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN04  DC    CL40'          ===   M U L T I P L I C A T I '\n         DC    CL40'O N   P R O C E S S O R   ====          ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0080 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN08  DC    CL40' 1: D <==== ENTER RADIX     2:          '\n         DC    CL40'        <==== ENTER 1ST # TO MULTIPLY   ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN10  DC    CL40' 3: D <==== ENTER RADIX     4:          '\n         DC    CL40'        <==== ENTER 2ND # TO MULTIPLY   ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN12  DC    CL40'                               ---------'\n         DC    CL40'-------                                 ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN14  DC    CL40' 5: D <==== ENTER RADIX                 '\n         DC    CL40'                          <==== #2 X #4 ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN17  DC    CL40' 1: ENTER RADIX OF 1ST # TO MULTIPLY, D='\n         DC    CL40'DECIMAL, X=HEXADECIMAL                 '\nSC6LN18  DC    CL40' 2: ENTER 1ST # TO MULTIPLY, PLEASE MAKE'\n         DC    CL40' SURE ITEM (1) IS EQUIVALENT            '\nSC6LN19  DC    CL40' 3: ENTER RADIX OF 2ND # TO MULTIPLY, D='\n         DC    CL40'DECIMAL, X=HEXADECIMAL                  '\nSC6LN20  DC    CL40' 4: ENTER 2ND # TO MULTIPLY, PLEASE MAKE'\n         DC    CL40' SURE ITEM (3) IS EQUIVALENT            '\nSC6LN21  DC    CL40' 5: ENTER RADIX THAT YOU WOULD LIKE THE '\n         DC    CL40'PRODUCT IN, D=DECIMAL, X=HEXADECIMAL    ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC6LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN6 EQU   *\nSC6SUFIX DC    XL4'11C94F13'\n         EJECT\nSCREEN7  EQU   *\nSC7LN01  DC    CL40'                  T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN04  DC    CL40'               ====   D I V I S I O N   '\n         DC    CL40'P R O C E S S O R   ====                ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0080 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN08  DC    CL40' 1: D <==== ENTER RADIX     2:          '\n         DC    CL40'        <==== ENTER DIVIDEND            ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN10  DC    CL40' 3: D <==== ENTER RADIX     4:          '\n         DC    CL40'        <==== ENTER DIVISOR             ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN12  DC    CL40'                               ---------'\n         DC    CL40'-------                                 ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN14  DC    CL40' 5: D <==== ENTER RADIX                 '\n         DC    CL40'                          <==== QUOTIENT'\nSC7LN15  DC    CL40'                                        '\n         DC    CL40'                          <=== REMAINDER',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN17  DC    CL40' 1: ENTER RADIX OF DIVIDEND, D=DECIMAL, '\n         DC    CL40'X=HEXADECIMAL                           '\nSC7LN18  DC    CL40' 2: ENTER DIVIDEND, PLEASE MAKE SURE ITE'\n         DC    CL40'M (1) IS EQUIVALENT                     '\nSC7LN19  DC    CL40' 3: ENTER RADIX OF DIVISOR, D=DECIMAL, X'\n         DC    CL40'=HEXADECIMAL                            '\nSC7LN20  DC    CL40' 4: ENTER DIVISOR, PLEASE MAKE SURE ITEM'\n         DC    CL40' (3) IS EQUIVALENT                      '\nSC7LN21  DC    CL40' 5: ENTER RADIX THAT YOU WOULD LIKE THE '\n         DC    CL40'QUOTIENT IN, D=DECIMAL, X=HEXADECIMAL   ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC7LN24  DC    CL40'----------- TO RETURN TO MENU PRESS ENTE'\n         DC    CL40'R WITHOUT CHANGING ANYTHING ------------'\nESCREEN7 EQU   *\nSC7SUFIX DC    XL4'11C94F13'\n         EJECT\nSCREEN8  EQU   *\nSC8LN01  DC    CL40'I                 T S O   A R I T H M E '\n         DC    CL40'T I C   C O M M A N D                   ',C'|0080-'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n         DC    C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN04  DC    CL40'    ====   3 2 7 0   B U F F E R   A D D'\n         DC    CL40' R E S S   P R O C E S S O R   ====     ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n         DC    C'|0080-|0160 '\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'----------------------------------------'\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN09  DC    CL40'   2 <==== ENTER 3278/9 MODEL NUMBER 2 -'\n         DC    CL40' 5  (NOTE: 2 - 4 CAUSE THE SAME RESULTS)',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN12  DC    CL40'  __ <==== ENTER ROW NUMBER             '\n         DC    CL40'    SCREEN ADDRESS (DECIMAL) ====>      '\nSC8LN13  DC    CL40' ___ <==== ENTER COLUMN NUMBER          '\n         DC    CL40'                   (HEX)     ====>      ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN16  DC    CL40'  __ <==== ENTER THE FIRST BYTE OF THE B'\n         DC    CL40'UFFER ADDRESS                           '\nSC8LN17  DC    CL40'  __ <==== ENTER THE SECOND BYTE OF THE '\n         DC    CL40'BUFFER ADDRESS                          ',C'|0160 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN20  DC    CL40' NOTE: IF YOU ARE CONVERTING FROM ROW/CO'\n         DC    CL40'LUMN FORMAT TO BUFFER ADDRESS FORMAT, DO'\nSC8LN21  DC    CL40'       NOT TYPE IN THE BUFFER ADDRESS.  '\n         DC    CL40'IF YOU ARE CONVERTING BUFFER ADDRESS TO '\nSC8LN22  DC    CL40'       ROW/COLUMN FORMAT, DO NOT TYPE IN'\n         DC    CL40' THE ROW/COLUMN DATA.                   ',C'|0080 '\n*        DC    CL40'                                        '\n*        DC    CL40'                                        '\nSC8LN24  DC    CL40' ------------------------- TO RETURN TO '\n         DC    CL40'MENU PRESS PA1 -------------------------'\nESCREEN8 EQU   *\nSC8SUFIX DC    XL4'114AC313'\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         SPACE 3\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         SPACE 3\n         END   ARITH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLINK": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01W\\x00\\x00\\x00\\x90\\x05/\\x00\\x91)O\\x14\\x12\\x00\\x17\\x00\\x1b\\x00\\x11\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.87", "flags": 0, "createdate": "1990-02-21T00:00:00", "modifydate": "1991-10-21T14:12:00", "lines": 23, "newlines": 27, "modlines": 17, "user": "SYSTAB"}, "text": "//SYSTABA1 JOB (0000,SFO,1,1),'BESTANI',\n//         CLASS=A,MSGCLASS=X,NOTIFY=SYSTAB\n//*********************************************************************\n//LISTLEV EXEC PGM=IEV90,REGION=1024K\n//SYSIN DD DISP=SHR,DSN=SYSTAB.SOURCE(LISTLEV)\n//SYSPUNCH DD DSN=&&OBJSET,DISP=(NEW,PASS,DELETE),UNIT=SYSDA,\n//            SPACE=(TRK,(5,5))\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(1700,(1600,1600))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(1700,(1600,1600))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(1700,(1600,1600))\n//*\n//LKED     EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),REGION=128K,\n//             COND=(8,LT,LISTLEV)\n//SYSLIN   DD DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD DDNAME=SYSIN\n//SYSLMOD  DD DISP=SHR,DSN=SYS2.CMDLIB(LISTLEV)\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=SYSDA,\n//            SPACE=(1024,(50,20))\n//SYSPRINT DD SYSOUT=*\n//*********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATXA": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x90(/\\x00\\x91\\x07\\x8f\\x16X\\x05\\xdb\\x05\\xc4\\x00X\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1990-10-09T00:00:00", "modifydate": "1991-03-19T16:58:00", "lines": 1499, "newlines": 1476, "modlines": 88, "user": "SYSTAB"}, "text": "DSAT     TITLE '** TSO DATASET ATTRIBUTE COMMAND'\n***********************************************************************\n*    NAME - DSAT                                                      *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - PROVIDE ONLINE (TSO) INFORMATION ABOUT DATASETS        *\n*              SUCH AS DSORG, RECFM, CREATION DATE, SPACE, ETC.       *\n*              IN ADDITION, PRIOR TO WRITING THE SCREEN DSAT          *\n*              WILL SCAN THE TIOT FOR THE DDNAME \"DSATPRNT\".          *\n*              IF THIS DDNAME IS FOUND, THE SCREEN WILL BE            *\n*              WRITTEN TO THE DATA SET ALLOCATED FOR THIS PURPOSE.    *\n*              DCB=(RECFM=FBA,LRECL=133)                              *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - TCAM OR VTAM MUST SUPPORT THE FULL-SCREEN OPTION. *\n*                   DSAT REQUIRES A 3270 DISPLAY STATION WITH AT      *\n*                   LEAST 24 LINES.  IT WILL WORK ON BIGGER TOOBS,    *\n*                   BUT IT WON'T USE THE ENTIRE SCREEN.               *\n*                                                                     *\n*    MACROS USED - TGET, TPUT, LOCATE, OBTAIN, STACK                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nDSAT     CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM FOLLOWS BLOCK CODING CONVENTIONS.  FLOW             *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE1\n         B     BSAVE1\nSAVE1    DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE1   EQU   *\n         SPACE 1\n*------> PROCESS THE USERS REQUEST\n         BAL   R9,GETDSN              PROCESS DSNAME\n         BAL   R9,CATRTN              CHECK CATALOG\n         BAL   R9,GETDSCB1            OBTAIN HEADER DSCB\n         BAL   R9,GETDSCB3            OBTAIN EXTENSION DSCB\n         BAL   R9,GETDATE             GET CURRENT TIME AND DATE\n         BAL   R9,PRINTER             PRINT IF DDNAME PRESENT\n         BAL   R9,FULLSCR             BUILD AND PAINT SCREEN\n         CLI   SYSREQSW,C'1'          REQUEST EXTENTS?\n         BNE   DRCHKSTK               NO, GO CHECK STACK SWITCH\n         BAL   R9,EXTENTS             YES, PAINT EXTENTS\n         B     EXIT1\nDRCHKSTK EQU   *\n         CLI   STACKSW,C'1'           SHOULD WE STACK A NEW DSAT CMND\n         BNE   EXIT1                  NO, BYPASS THE STACK ROUTINE\n         BAL   R9,STACKRTN            YES, STACK A NEW DSAT\n         SPACE 1\nEXIT1    EQU   *\n         L     R9,SAVE1\n         BR    R9\n         EJECT\n***********************************************************************\n*    THE PURPOSE OF THIS ROUTINE IS TO PROCESS THE INPUT DSNAME.      *\n*  THE DSNAME IS OBTAINED FROM ONE OF TWO SOURCES.  THE ROUTINE WILL  *\n*  FIRST CHECK THE COMMAND INPUT BUFFER FOR AN OPERAND LENGTH OF      *\n*  ZERO.  IF IT IS NOT ZERO, THE OPERAND WILL BE MOVED TO THE \"DSN\"   *\n*  FIELD.  IF IT IS ZERO, IT WILL ASK THE USER TO INPUT THE DSNAME.   *\n*  IN EITHER CASE, IT THEN CHECKS FOR APOSTROPHES.  IF THEY ARE NOT   *\n*  PRESENT, THE USERID WILL BE PREFIXED TO THE DSNAME.  IF THEY ARE   *\n*  PRESENT, THEY WILL BE STRIPPED OFF AND THE DSNAME WILL BE LEFT-    *\n*  JUSTIFIED INTO THE \"DSN\" FIELD.  AFTER THIS IS FINISHED, THE       *\n*  DSNAME FIELD IS CONVERTED TO EBCDIC UPPER-CASE BY \"OR\"-ING WITH    *\n*  SPACES.                                                            *\n***********************************************************************\n         SPACE 1\nGETDSN   DS    0H\n         ST    R9,SAVE2\n         B     BSAVE2\nSAVE2    DC    F'-1'\n         DC    CL8'GETDSN  '\nBSAVE2   EQU   *\n         SPACE 1\n         L     R4,CPPLCBUF         GET CBUF ADDR\n         LH    R2,0(R4)            GET TOTAL LENGTH\n         LH    R3,2(R4)            GET RELATIVE OFFSET OF OPERAND\n         LA    R3,4(R3)            BUMP BY BDW LENGTH\n         CR    R2,R3               IF EQUAL, MEANS NO OPERAND\n         BE    NODSN1                GO GET DSNAME\n         SR    R2,R3               GET OPERAND LENGTH\n         BCTR  R2,0                DEC BY 1 FOR EXECUTE\n         AR    R4,R3               POINT R4 TO OPERAND\n         EX    R2,EXMVC1           MOVE DSNAME\n         B     PROCDSN             GO PROCESS DSNAME\nEXMVC1   MVC   DSN(0),0(R4)        DUMMY MVC\nNODSN1   EQU   *\n         TPUT  MSG1,L'MSG1         PUT OUT DSN REQUEST MSG\n         TGET  DSN,L'DSN           GO GET IT\n         CH    R1,=H'1'            MUST BE AT LEAST 1 BYTE LONG\n         BL    NODSN1\nPROCDSN  EQU   *\n         LA    R2,DSN              GET START ADDRESS\n         LA    R3,L'DSN            GET LENGTH\nCLAPOST1 EQU   *\n         CLI   0(R2),C'/'          IS FLAG PRESENT?\n         BE    SYSREQEX            YES, GO HANDLE FLAG\n         CLI   0(R2),X'7D'         APOSTROPHE?\n         BE    CLAPOST2            YES, CLEAR AND FLAG\n         LA    R2,1(R2)            BUMP INDEX\n         BCT   R3,CLAPOST1         DEC AND LOOP\n         B     BCLAPOST            END OF SEARCH\nSYSREQEX EQU   *\n         MVI   0(R2),C' '          CLEAR FROM AREA\n         OI    1(R2),C' '          MAKE UPPER-CASE\n         CLI   1(R2),C'X'          REQUESTING EXTENTS?\n         BNE   NOTEXTNT            NO, TRY OTHER\n         MVI   1(R2),C' '          CLEAR WHATEVER IT IS\n         MVI   SYSREQSW,C'1'       FLAG\n         B     CLAPOST1            GO CHECK FOR DASH\nNOTEXTNT EQU   *\n         MVI   1(R2),C' '          CLEAR WHATEVER IT IS\n         BE    CLAPOST1            GO CHECK FOR DSN\nCLAPOST2 EQU   *\n         MVI   APOSTSW,C'1'        POST NO-APPEND USERID FLAG\n         MVI   0(R2),C' '          CLEAR APOSTROPHE\n         BCT   R3,CLAPOST1         DEC AND LOOP\nBCLAPOST EQU   *\n         LA    R2,L'DSN-1          GET READY TO SHIFT OUT BLANKS\nSHIFTL   EQU   *\n         CLI   DSN,C' '            IS THERE A BLANK?\n         BNE   ESHIFTL\n         MVC   DSN(L'DSN-1),DSN+1  YES, OVERWRITE IT.\n         BCT   R2,SHIFTL           TRY BUFLEN-1 TIMES MAX\nESHIFTL  EQU   *\n         CLI   APOSTSW,C'1'        IS FIRST BYTE AN APOSTROPHE?\n         BE    NOAPPEND            YES, DON'T PREFIX USERID\n         L     R2,CPPLUPT\n         MVC   DSN2(7),16(R2)      MOVE PREFIX (USERID)\n         MVI   DSN2+7,C'.'         INSERT PERIOD\n         MVC   DSN2+8(44-8),DSN    ADD DSN\n         MVC   DSN(44),DSN2        MOVE IT BACK\n         LA    R2,DSN\n         LA    R3,8\n         LA    R4,6\nCLSPC    EQU   *\n         CLI   0(R2),C' '          FIND SPACES DUE TO SHORT USERID\n         BNE   NOSPC1              BYPASS MOVE STATEMENT\n         MVC   0(44,R2),1(R2)      GET RID OF IT\n         BCT   R4,CLSPC            RUN IN PLACE UP TO 6 STEPS\nNOSPC1   EQU   *\n         LA    R2,1(R2)            LOOK AT NEXT CHARACTER\n         BCT   R3,CLSPC            TRY 8 TIMES MAX\nNOAPPEND EQU   *\n         LA    R2,DSN              GET ADDRESS OF DSN\n         LA    R3,44               GET LENGTH FOR BCT\nDASHSRCH EQU   *\n         CLI   0(R2),C'-'          IS DASH PRESENT?\n         BE    DASHFND             DASH FOUND - MOVE VOLSER\n         LA    R2,1(R2)            BUMP INDEX BY 1\n         BCT   R3,DASHSRCH         GO CHECK NEXT\n         B     NODASH              NO DASH FOUND, BYPASS\nDASHFND  EQU   *\n         MVC   VOLSER,1(R2)        MOVE VOLSER\n         OC    VOLSER,=CL6' '      CONVERT TO UPPERCASE\n         MVC   0(7,R2),=CL7' '     CLEAR FROM DSN AREA\nNODASH   EQU   *\n         OC    DSN(80),=CL80' '    CONVERT TO UPPERCASE\n         SPACE 1\nEXIT2    EQU   *\n         L     R9,SAVE2\n         BR    R9\n         EJECT\n***********************************************************************\n*    THE PURPOSE OF THIS ROUTINE IS TO CHECK THE CATALOG FOR THE      *\n*  DSNAME THAT WE HAVE.  IF THE CATALOG SEARCH IS SUCCESSFUL, THE     *\n*  \"LOCATE\" MACRO WILL BUILD A VOLUME TABLE IN OUR WORK AREA.         *\n*  THE ROUTINE THEN CHECKS TO MAKE SURE THAT THE DATASET RESIDES ON   *\n*  A DIRECT-ACCESS DEVICE, AND IF NOT ISSUE AN APPROPRIATE ERROR MSG. *\n***********************************************************************\n         SPACE 1\nCATRTN   DS    0H\n         ST    R9,SAVE3\n         B     BSAVE3\nSAVE3    DC    F'-1'\n         DC    CL8'CATRTN  '\nBSAVE3   EQU   *\n         SPACE 1\n         MVC   VOLIST+6(6),VOLSER  MOVE VOLSER TO PSEUDO INPUT AREA\nCHEKUCB1 EQU   *\n         CLC   VOLSER,=CL6' '      DID USER TYPE IN VOLSER\n         BE    CATLOC              NO, GO SEARCH CATALOG\n         L     R15,CVTPTR          GET PTR TO THE CVT\n         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OP SYS TYPE\n         TM    DSADCB,DSADCBXA     IS IT MVS/XA\n         BO    UCBCHKXA            UCB CHECK FOR XA\n*------> MUST BE AN OLD PRE-XA SYSTEM, USE THE UCB CHAIN\n         L     R2,16               GET CVT\n         L     R2,40(R2)           GET UCBILK2\n         XR    R3,R3               CLEAR WORK REGISTER\nNOCATLP  EQU   *\n         CLC   0(2,R2),=X'FFFF'    END OF LOOKUP TABLE?\n         BE    VSBAD\n         CLC   0(2,R2),=X'0000'    NULL ENTRY?\n         BE    BUMPIX\n         ICM   R3,B'0011',0(R2)    PICK UP PTR\n         CLC   28(6,R3),VOLSER     THIS VOLSER?\n         BE    MVDEVTYP            MOVE THE DEVICE TYPE\nBUMPIX   EQU   *\n         LA    R2,2(R2)            BUMP TO NEXT ENTRY\n         B     NOCATLP             GO CHECK NEXT\n*------------------------------------------------------------------\n***>>>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<<<<<<***\n** PARM: (100BYTE-WORK, 1BYTE-DEV-CLASS, 1WORD-UCB-PTR)           **\n** RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS           **\n*------------------------------------------------------------------\nUCBCHKXA EQU   *\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKAREA\n         LA    R1,DSXAWORK             ADDR OF UCB WORKAREA\n         ST    R1,DSXAWA               STORE IT IN PARM LIST\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH\n         ST    R1,DSXADEVT             STORE IN PARM LIST\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR\n         ST    R1,DSXAUCB              IN PARM LIST\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST\nUCBLOOP  EQU   *\n         L     R15,CVTPTR\n         ICM   R15,15,CVTUCBSC-CVT(R15) CVTUCBSC VALID?(IOSVSUCB)\n         LA    R1,DSXALIST             PTR TO PARM LIST\n         BALR  R14,R15                 BRANCH TO IT\n         LTR   R15,R15                 GOT ONE?\n         BNZ   VSBAD                   NO\n         L     R8,DSXAUCBP GET ADR OF  UCB FROM PTR\n         USING UCBCMSEG,R8\n         CLI   UCBID,UCBSTND           IS ADDRESS VALID\n         BNE   UCBLOOP                 NO\n         CLI   UCBDVCLS,UCB3DACC       IS IT DASDI\n         BNE   UCBLOOP                 NO   SKIP\n         TM    UCBSTAT,UCBONLI         IS IT ONLINE\n         BNO   UCBLOOP                 NO  SKIP\n         TM    UCBSTAT,UCBCHGS         IS IT CHANGING STATUS\n         BO    UCBLOOP                 YES SKIP\n         CLC   28(6,R8),VOLSER         COMPARE VOLSER\n         BNE   UCBLOOP                 DONT WANT\nMVDEVTYP EQU   *\n         MVC   VOLIST+4(2),18(R8)      MOVE DEVICE TYPE\n         MVC   VOLIST+0(2),=H'1'       SIMULATE VOLCNT=1\n         MVC   SC1LN06+73(3),13(R8)    MOVE UCB NUMBER\n         B     OKINCAT                 BYPASS THE LOCATE\n*------> CAN'T LOCATE THE CORRECT VOLUME, ERR MSG THEN ABANDON SHIP\nVSBAD    EQU   *\n         TPUT  MSG10,L'MSG10       ISSUE ERROR MESSAGE\n         L     R13,SAVEAREA+4      RETURN\n         LM    R14,R12,12(R13)       WITH\n         LA    R15,4                   RC=4\n         BR    R14                       GO HOME\n*------> GET THE DATASET INFORMATION FROM THE CATALOG\nCATLOC   EQU   *\n         LOCATE LOCLIST            ISSUE LOCATE MACRO\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    OKINCAT             IF OK, BYPASS\n         TPUT  MSG2,L'MSG2         ISSUE ERROR MESSAGE\n         TPUT  DSN,L'DSN-1         IDENTIFY DATASET\n         L     R13,SAVEAREA+4      RETURN\n         LM    R14,R12,12(R13)       WITH\n         LA    R15,4                   RC=4\n         BR    R14                       GO HOME\nOKINCAT  EQU   *\n         CLI   SC1LN06+73,C' '     HAVE WE ALREADY FOUND THE UNIT?\n         BNE   FDEVICE0            YES, GO AROUND CODE\n         MVC   VOLSER,VOLIST+6     SIMULATE USER ENTRY\n         B     CHEKUCB1            GO CHECK UCB CHAIN\n*------> FIND THE DEVICE TYPE IN THE TABLE AND GET THE TRK/CYL COUNT\nFDEVICE0 EQU   *\n         LA    R2,DEVTABLE\nFDEVICE1 EQU   *\n         CLC   0(2,R2),=X'0000'    END OF TABLE?\n         BE    CHEKUCB2                YES, CHECK UCB\n         CLC   0(2,R2),VOLIST+4    IF SAME DEVICE CODE....\n         BE    FDEVICE2\n         LA    R2,20(R2)           BUMP TO NEXT ENTRY\n         B     FDEVICE1\n*--> IF DATASET CATALOGED WITH A GENERIC NAME, THE CATALOG WILL\n*    INDICATE THAT THE DATASET IS ON A DIRECT ACCESS DEVICE, BUT\n*    IT WON'T TELL US WHAT KIND.  FOR THIS INFO, WE HAVE TO GO\n*    BACK AND SEARCH THE UCB CHAIN; JUST AS IF THE USER HAD TYPED\n*    IN THE VOLSER HIM/HERSELF.\nCHEKUCB2 EQU   *\n         TM    VOLIST+4,X'20'      IS THIS A DASD DATASET?\n         BNO   NOTDASD             NO, INDICATE NOT DASD\n         MVC   VOLSER,VOLIST+6     SIMULATE USER ENTRY\n         B     CHEKUCB1            GO CHECK UCB CHAIN\nFDEVICE2 EQU   *\n         MVC   TRKCOUNT,2(R2)      SAVE TRACKS PER CYLINDER\n         MVC   SC1LN06+50(06),VOLIST+6  MOVE VOLSER TO SCREEN\n         MVC   SC1LN06+57(16),4(R2)     MOVE DEVICE NAME TO SCREEN\n         LH    R3,VOLIST                GET VOLUME COUNT\n         CVD   R3,WORKDBLW\n         MVC   SC1LN06+42(4),=XL4'40202120'\n         ED    SC1LN06+42(4),WORKDBLW+6\n         MVI   SC1LN01+25,X'7D'    INSERT APOSTROPHE IN SCREEN\n         MVC   SC1LN01+26(43),DSN  MOVE DSNAME TO OUTPUT SCREEN\n         B     EXIT3\nNOTDASD  EQU   *\n         TPUT  MSG3,L'MSG3         ISSUE ERROR MESSAGE\n         TPUT  DSN,44              DISPLAY DATASET NAME\n         LH    R3,VOLIST           GET VOLUME COUNT\n         CH    R3,=H'20'           MORE THAN TWENTY VOLUMES?\n         BNH   VOLSINIT            NO, SET UP NORMALLY\n         MVI   VOL20IND,C'1'       YES, INDICATE WITH SWITCH\n         LA    R3,20               LIST ONLY FIRST TWENTY\nVOLSINIT EQU   *\n         LA    R4,VOLIST+6         GET ADDRESS OF FIRST VOLUME\nDISPVOLS EQU   *\n         AP    VOLSCNT,=PL1'1'     ADD 1 TO VOLUME COUNT\n         UNPK  MSG5+0(2),VOLSCNT   UNPACK VOLUME COUNT\n         OI    MSG5+1,X'F0'        CLEAR SIGN NIBBLE\n         MVC   MSG5+11(6),0(R4)    MOVE VOLSER INTO MESSAGE\n         TPUT  MSG5,L'MSG5         ISSUE VOLSER MESSAGE\n         LA    R4,12(R4)           BUMP VOLSER POINTER\n         BCT   R3,DISPVOLS         ITERATE\n         CLI   VOL20IND,C'1'       WAS SWITCH TURNED ON?\n         BNE   VOLSNMSG            NO, BRANCH AROUND MSG\n         TPUT  MSG11,L'MSG11       PUT OUT REFERRAL MSG\nVOLSNMSG EQU   *\n         L     R13,SAVEAREA+4      RETURN\n         LM    R14,R12,12(R13)       WITH\n         LA    R15,4                   RC=4\n         BR    R14                       GO HOME....\n         SPACE 1\nEXIT3    EQU   *\n         L     R9,SAVE3\n         BR    R9\n         EJECT\n***********************************************************************\n*    THE PURPOSE OF THIS ROUTINE IS TO OBTAIN THE FORMAT 1 DSCB FOR   *\n*  THE INDICATED DATASET AND EXTRACT THE BASIC INFORMATION FROM IT.   *\n***********************************************************************\n         SPACE 1\nGETDSCB1 DS    0H\n         ST    R9,SAVE4\n         B     BSAVE4\nSAVE4    DC    F'-1'\n         DC    CL8'GETDSCB1'\nBSAVE4   EQU   *\n         SPACE 1\n*--> GET THE FORMAT 1 DSCB\n         OBTAIN OBLIST1            GET DSCB1\n         LTR   R15,R15\n         BZ    OBOK1\n         MVC   MSG4+38(6),VOLSER   MOVE THE VOLUME NAME\n         TPUT  MSG4,L'MSG4         IF NOT OK ISSUE ERROR MESSAGE\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         LA    R15,0\n         BR    R14\nOBOK1    EQU   *\n*--> IF THIS IS A VSAM DATASET, APOLOGIZE AND PRINT THE PACKS ONLY\n         TM    DSCB1LST+39,X'08'   IS IT VSAM?\n         BNO   EXTALLOC            NO, GO AROUND\n         TPUT  MSG8,L'MSG8         ISSUE ERROR MESSAGE\n         LH    R3,VOLIST           GET VOLUME COUNT\n         LA    R4,VOLIST+6         GET ADDRESS OF FIRST VOLUME\nVSAMVOLS EQU   *\n         MVC   MSG5+8(6),0(R4)     MOVE VOLSER INTO MESSAGE\n         TPUT  MSG5,L'MSG5         ISSUE VOLSER MESSAGE\n         LA    R4,12(R4)           BUMP VOLSER POINTER\n         BCT   R3,VSAMVOLS         ITERATE\n         L     R13,SAVEAREA+4      RETURN\n         LM    R14,R12,12(R13)       WITH\n         LA    R15,4                   RC=4\n         BR    R14                       GO HOME....\n*--> GET THE NUMBER OF EXTENTS ALLOCATED\nEXTALLOC EQU   *\n         XR    R2,R2\n         IC    R2,DSCB1LST+15\n         CVD   R2,WORKDBLW\n         MVC   SC1LN08+2(4),=XL4'40202120'\n         ED    SC1LN08+2(4),WORKDBLW+6\n*--> GET THE DSORG\n         TM    DSCB1LST+38,X'80'   IS DSORG=IS?\n         BNO   D1NOTIS\n         MVC   SC1LN06+1(2),=CL2'IS'\n         B     D1TESTRF\nD1NOTIS  EQU   *\n         TM    DSCB1LST+38,X'40'   IS DSORG=PS?\n         BNO   D1NOTPS\n         MVC   SC1LN06+1(2),=CL2'PS'\n         B     D1TESTRF\nD1NOTPS  EQU   *\n         TM    DSCB1LST+38,X'20'   IS DSORG=DA?\n         BNO   D1NOTDA\n         MVC   SC1LN06+1(2),=CL2'DA'\n         B     D1TESTRF\nD1NOTDA  EQU   *\n         TM    DSCB1LST+38,X'02'   IS DSORG=PO?\n         BNO   D1TESTRF\n         MVC   SC1LN06+1(2),=CL2'PO'\nD1TESTRF EQU   *\n         TM    DSCB1LST+38,X'01'   IS DSORG=U?\n         BNO   D1NOTU\n         MVI   SC1LN06+3,C'U'\nD1NOTU   EQU   *\n*--> GET THE LRECL\n         LH    R2,DSCB1LST+44      GET LRECL\n         CVD   R2,WORKDBLW\n         MVC   SC1LN10+50(6),=XL6'402020202120'\n         ED    SC1LN10+50(6),WORKDBLW+5\n*--> GET THE BLKSIZE\n         LH    R2,DSCB1LST+42      GET BLKSIZE\n         CVD   R2,WORKDBLW\n         MVC   SC1LN10+63(6),=XL6'402020202120'\n         ED    SC1LN10+63(6),WORKDBLW+5\n*--> GET THE KEYLEN\n         XR    R2,R2\n         IC    R2,DSCB1LST+46      GET KEYLEN\n         CVD   R2,WORKDBLW\n         MVC   SC1LN14+51(4),=XL4'40202120'\n         ED    SC1LN14+51(4),WORKDBLW+6\n*--> GET THE RKP\n         MVC   WORKDBLW(2),DSCB1LST+47  GET OFFSET\n         LH    R2,WORKDBLW\n         CVD   R2,WORKDBLW\n         MVC   SC1LN14+63(6),=XL6'402020202120'\n         ED    SC1LN14+63(6),WORKDBLW+5\n*--> GET THE CREATION DATE\n         L     R1,DSCB1LST+8       POINT TO CREATION DATE\n         BAL   R9,DATESUB          PROCESS IT\n         MVC   SC1LN06+21(8),DATEWORK\n*--> GET THE LAST REFERENCED DATE\n         MVC   SC1LN18+55(8),=CL8'  NONE  '\n         CLC   DSCB1LST+31(3),=XL3'00'\n         BE    PEXPDATE\n         L     R1,DSCB1LST+30      POINT TO LAST REFERENCED DATE\n         BAL   R9,DATESUB          PROCESS IT\n         MVC   SC1LN18+55(8),DATEWORK\n*--> GET THE EXPIRATION DATE AND CHECK IT\nPEXPDATE EQU   *\n         L     R1,DSCB1LST+12      POINT TO EXPIRATION DATE\n         SRL   R1,8                SHIFT TO PROPER POSITION\n         BAL   R9,DATESUB          PROCESS IT\n         MVC   SC1LN06+31(8),DATEWORK\n         CLC   SC1LN06+31(2),=CL2'01'  MONTH 01-12 OK\n         BL    CLEXDATE\n         CLC   SC1LN06+31(2),=CL2'12'\n         BH    CLEXDATE\n         CLC   SC1LN06+34(2),=CL2'01'  DAY 01-31 OK\n         BL    CLEXDATE\n         CLC   SC1LN06+34(2),=CL2'31'\n         BH    CLEXDATE\n         CLC   SC1LN06+37(2),SC1LN06+27  YEAR => CR YEAR < 99\n         BL    CLEXDATE\n         CLC   SC1LN06+37(2),=CL2'99'\n         BNH   EXDATEOK\nCLEXDATE EQU   *\n         MVC   SC1LN06+31(8),=CL8'  NONE  '\nEXDATEOK EQU   *\n*--> GET THE OPTCD AND RECFM (SUBROUTINES FOR EASIER READING)\n         BAL   R9,PROPTCD          GO PROCESS THE OPTCD FIELD\n         BAL   R9,PRRECFM          GO PROCESS THE RECFM FIELD\n         SPACE 1\nEXIT4    EQU   *\n         L     R9,SAVE4\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE IS A SUBROUTINE OF ROUTINE 'GETDSCB1'.  IT'S ONLY   *\n*  PURPOSE IS TO FORMAT THE DCB 'OPTCD' FIELD INTO THE OUTPUT SCREEN. *\n***********************************************************************\n         SPACE 1\nPROPTCD  DS    0H\n         ST    R9,SAVE5\n         B     BSAVE5\nSAVE5    DC    F'-1'\n         DC    CL8'PROPTCD '\nBSAVE5   EQU   *\n         SPACE 1\n         LA    R2,SC1LN06+14       PTR TO SCREEN FIELD\n         LA    R3,DSCB1LST+41      OPTCD BYTE\n         CLI   0(R3),X'00'         IF NO OPTCD\n         BNE   OPTCDBR\nNOPTCD1  EQU   *\n         MVC   0(4,R2),=CL4'NONE'  LABEL FIELD\n         B     BYPOPTCD            BYPASS OPTCD PROCESSING\nOPTCDBR  EQU   *\n         TM    DSCB1LST+38,X'80'   DSORG=IS?\n         BO    BLDOPTIS\n         TM    DSCB1LST+38,X'40'   DSORG=PS?\n         BO    BLDOPTPS\n         TM    DSCB1LST+38,X'20'   DSORG=DA?\n         BO    BLDOPTDA\n         TM    DSCB1LST+38,X'02'   DSORG=PO? (SAME AS PS)\n         BO    BLDOPTPS\n         B     NOPTCD1\nBLDOPTIS EQU   *\n         TM    0(R3),X'80'         TEST FOR OPTCD='W'\n         BNO   OPTCD1IS\n         MVI   0(R2),C'W'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD1IS EQU   *\n         TM    0(R3),X'20'         TEST FOR OPTCD='M'\n         BNO   OPTCD2IS\n         MVI   0(R2),C'M'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD2IS EQU   *\n         TM    0(R3),X'10'         TEST FOR OPTCD='I'\n         BNO   OPTCD3IS\n         MVI   0(R2),C'I'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD3IS EQU   *\n         TM    0(R3),X'08'         TEST FOR OPTCD='Y'\n         BNO   OPTCD4IS\n         MVI   0(R2),C'Y'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD4IS EQU   *\n         TM    0(R3),X'02'         TEST FOR OPTCD='L'\n         BNO   OPTCD5IS\n         MVI   0(R2),C'L'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD5IS EQU   *\n         TM    0(R3),X'01'         TEST FOR OPTCD='R'\n         BNO   BYPOPTCD\n         MVI   0(R2),C'R'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\n         B     BYPOPTCD\nBLDOPTPS EQU   *\n         TM    0(R3),X'80'         TEST FOR OPTCD='W'\n         BNO   OPTCD1PS\n         MVI   0(R2),C'W'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD1PS EQU   *\n         TM    0(R3),X'40'         TEST FOR OPTCD='U'\n         BNO   OPTCD2PS\n         MVI   0(R2),C'U'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD2PS EQU   *\n         TM    0(R3),X'20'         TEST FOR OPTCD='C'\n         BNO   OPTCD3PS\n         MVI   0(R2),C'C'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD3PS EQU   *\n         TM    0(R3),X'10'         TEST FOR OPTCD='H'\n         BNO   OPTCD4PS\n         MVI   0(R2),C'H'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD4PS EQU   *\n         TM    0(R3),X'08'         TEST FOR OPTCD='Q'\n         BNO   OPTCD5PS\n         MVI   0(R2),C'Q'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD5PS EQU   *\n         TM    0(R3),X'04'         TEST FOR OPTCD='Z'\n         BNO   OPTCD6PS\n         MVI   0(R2),C'Z'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD6PS EQU   *\n         TM    0(R3),X'02'         TEST FOR OPTCD='T'\n         BNO   OPTCD7PS\n         MVI   0(R2),C'T'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD7PS EQU   *\n         TM    0(R3),X'01'         TEST FOR OPTCD='J'\n         BNO   BYPOPTCD\n         MVI   0(R2),C'J'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\n         B     BYPOPTCD\nBLDOPTDA EQU   *\n         TM    0(R3),X'80'         TEST FOR OPTCD='W'\n         BNO   OPTCD1DA\n         MVI   0(R2),C'W'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD1DA EQU   *\n         TM    0(R3),X'20'         TEST FOR OPTCD='E'\n         BNO   OPTCD2DA\n         MVI   0(R2),C'E'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD2DA EQU   *\n         TM    0(R3),X'10'         TEST FOR OPTCD='F'\n         BNO   OPTCD3DA\n         MVI   0(R2),C'F'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD3DA EQU   *\n         TM    0(R3),X'08'         TEST FOR OPTCD='A'\n         BNO   OPTCD4DA\n         MVI   0(R2),C'A'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\nOPTCD4DA EQU   *\n         TM    0(R3),X'01'         TEST FOR OPTCD='R'\n         BNO   BYPOPTCD\n         MVI   0(R2),C'R'          PUT IN SCREEN\n         LA    R2,1(R2)            BUMP SCREEN POINTER\n         B     BYPOPTCD\nBYPOPTCD EQU   *\n         SPACE 1\nEXIT5    EQU   *\n         L     R9,SAVE5\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE IS A SUBROUTINE OF ROUTINE 'GETDSCB1'.  IT'S ONLY   *\n*  PURPOSE IS TO FORMAT THE DCB RECFM  FIELD INTO THE OUTPUT SCREEN.  *\n***********************************************************************\n         SPACE 1\nPRRECFM  DS    0H\n         ST    R9,SAVE6\n         B     BSAVE6\nSAVE6    DC    F'-1'\n         DC    CL8'PRRECFM '\nBSAVE6   EQU   *\n         SPACE 1\n         LA    R2,SC1LN06+8        POINT TO SCREEN ADDRESS\n         TM    DSCB1LST+40,X'C0'   TEST FOR UNKNOWN RECFM\n         BZ    RFT\n         TM    DSCB1LST+40,X'40'   TEST FOR F RECFM\n         BNZ   RFUORV\n         MVI   0(R2),C'F'\n         LA    R2,1(R2)            BUMP TO NEXT CHAR\n         B     RFT\nRFUORV   EQU   *\n         TM    DSCB1LST+40,X'80'\n         BZ    RFV\n         MVI   0(R2),C'U'          OTHERWISE UNDEFINED\n         LA    R2,1(R2)\n         B     RFT\nRFV      EQU   *\n         MVI   0(R2),C'V'\n         LA    R2,1(R2)\nRFT      EQU   *\n         TM    DSCB1LST+40,X'20'   TEST FOR T RECFM\n         BZ    RFB\n         MVI   0(R2),C'T'\n         LA    R2,1(R2)\nRFB      EQU   *\n         TM    DSCB1LST+40,X'10'   TEST FOR B RECFM\n         BZ    RFS\n         MVI   0(R2),C'B'\n         LA    R2,1(R2)\nRFS      EQU   *\n         TM    DSCB1LST+40,X'08'   TEST FOR S RECFM\n         BZ    RFA\n         MVI   0(R2),C'S'\n         LA    R2,1(R2)\nRFA      EQU   *\n         TM    DSCB1LST+40,X'04'   TEST FOR A RECFM\n         BZ    RFM\n         MVI   0(R2),C'A'\n         LA    R2,1(R2)\nRFM      EQU   *\n         TM    DSCB1LST+40,X'02'   TEST FOR M RECFM\n         BZ    RFEND\n         MVI   0(R2),C'M'\n         LA    R2,1(R2)\nRFEND    EQU   *\n         SPACE 1\nEXIT6    EQU   *\n         L     R9,SAVE6\n         BR    R9\n         EJECT\n***********************************************************************\n*    THE PURPOSE OF THIS ROUTINE IS TO CONVERT A JULIAN (YDD) FORMAT  *\n*  DATE INTO A GREGORIAN FORMAT.  AT ENTRY TO THE ROUTINE, R1 CONTAINS*\n*  THE JULIAN DATE.  UPON EXIT, \"DATEWORK\" CONTAINS THE DATE.         *\n***********************************************************************\n         SPACE 1\nDATESUB  DS    0H\n         ST    R9,SAVE7\n         B     BSAVE7\nSAVE7    DC    F'-1'\n         DC    CL8'DATESUB '\nBSAVE7   EQU   *\n         SPACE 1\n*--------TEST FOR LEAP YEAR\n         ST    R1,DATEWORK         STORE ARGUEMENT\n         LH    R1,DATEWORK+2       LOAD DAY OF YEAR\n         TM    DATEWORK+1,X'03'    TEST FOR YEAR MULTIPLE OF 4\n         BZ    DATEMODA\n*--------NOT A LEAP YEAR\n         C     R1,=F'60'\n         BL    DATEMODA\n         LA    R1,1(R1)\n*--------CONVERT DAY OF YEAR TO MONTH AND DAY OF MONTH\nDATEMODA EQU   *\n         XR    R2,R2               INIT MONTH COUNTER\nDATECVT1 EQU   *\n         SH    R1,DATEMNTH(R2)     SUBTRACT NO. OF DAYS IN MONTH\n         LTR   R1,R1\n         BNP   DATECVT2\n         LA    R2,2(R2)\n         B     DATECVT1\n*--------ADD BACK NUMBER OF DAYS AND DIVIDE REGISTER BY 2\nDATECVT2 EQU   *\n         AH    R1,DATEMNTH(R2)\n         SRA   R2,1\n         LA    R2,1(R2)\n         XR    R3,R3\n         IC    R3,DATEWORK+1\n*--------REG 1 = DAY OF MONTH\n*--------REG 2 = MONTH\n*--------REG 3 = YEAR\n         CVD   R2,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK(2),DATEUDEC+6\n         MVI   DATEWORK+2,C'/'\n         CVD   R1,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK+3(2),DATEUDEC+6\n         MVI   DATEWORK+5,C'/'\n         CVD   R3,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK+6(2),DATEUDEC+6\n         SPACE 1\nEXIT7    EQU   *\n         L     R9,SAVE7\n         BR    R9\n         EJECT\n***********************************************************************\n*   THE PURPOSE OF THIS ROUTINE IS TO COMPUTE THE AMOUNT OF SPACE     *\n* ALLOCATED AND USED FOR THE DATASET, AND TO FORMAT THE EXTENT COUNT. *\n* IF THE EXTENSION POINTER IN THE DSCB1 CONTAINS ZEROES, NO ATTEMPT   *\n* WILL BE MADE TO READ THE DSCB3.  FOR ISAM, WE GET TO THE DSCB3 VIA  *\n* THE DSCB2.  ALSO, WE DON'T DO SPACE USED CALCULATIONS FOR ISAM.     *\n***********************************************************************\n         SPACE 1\nGETDSCB3 DS    0H\n         ST    R9,SAVE8\n         B     BSAVE8\nSAVE8    DC    F'-1'\n         DC    CL8'GETDSCB3'\nBSAVE8   EQU   *\n         SPACE 1\n         CLC   DSCB1LST+91(5),=5XL1'00'    IS THERE AN EXTENSION?\n         BE    NODSCB3                     NO, NOT ISAM EITHER\n         TM    DSCB1LST+38,X'80'           IS IT ISAM?\n         BNO   NOTISAM                     NO, GO GET DSCB3\n         OBTAIN OBLIST2                    ASK FOR DSCB2\n         LTR   R15,R15                     DID OBTAIN WORK?\n         BZ    ISAMDSC3                    YES, GO AROUND\n         TPUT  MSG9,L'MSG9                 PUT OUT AN ERROR MSG\n         L     R13,SAVEAREA+4              GET SAVEAREA ADDRESS\n         LM    R14,R12,12(R13)             RESTORE THE REGISTERS\n         LA    R15,4                       SET BAD RETURN CODE\n         BR    R14                         GO HOME......\nISAMDSC3 EQU   *\n         CLC   DSCB2LST+135(5),=5XL1'00'   IS THERE AN EXTENSION?\n         BE    NODSCB3                     NO, BYPASS DSCB3 OBTAIN\n         MVC   DSCB1LST+91(5),DSCB2LST+135 MOVE THE DSCB3 PTR\nNOTISAM  EQU   *\n         OBTAIN OBLIST3                    ASK FOR DSCB3\n         LTR   R15,R15                     DID OBTAIN WORK?\n         BZ    NODSCB3                     YES, GO AROUND\n         TPUT  MSG7,L'MSG7                 PUT OUT ERROR MSG\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         LA    R15,4\n         BR    R14\nNODSCB3  EQU   *\n         TM    DSCB1LST+50,X'C0'   TEST FOR CYLINDERS\n         BNO   TYPETRK\n         MVC   SC1LN11+17(09),=CL09'CYLINDERS'\n         B     ETYPE\nTYPETRK  EQU   *\n         TM    DSCB1LST+50,X'80'   TEST FOR TRACKS\n         BNO   TYPEBLK\n         MVC   SC1LN11+17(06),=CL06'TRACKS'\n         B     ETYPE\nTYPEBLK  EQU   *\n         TM    DSCB1LST+50,X'40'   TEST FOR PHYSICAL BLOCKS\n         BNO   TYPEREL\n         MVC   SC1LN11+17(06),=CL06'BLOCKS'\n         B     ETYPE\nTYPEREL  EQU   *\n         MVC   SC1LN11+17(16),=CL16'ABSOLUTE TRACKS '\nETYPE    EQU   *\n         LH    R2,DSCB1LST+52      GET SECONDARY COUNT\n         CVD   R2,WORKDBLW\n         MVC   SC1LN12+33(6),=XL6'402020202120'\n         ED    SC1LN12+33(6),WORKDBLW+5\n         MVC   SC1LN11(16),=CL16'ALLOCATION IS IN'\n         MVC   SC1LN12(32),=CL32'SECONDARY ALLOCATION QUANTITY IS'\n         XR    R2,R2               CLEAR BCT REGISTER\n         IC    R2,DSCB1LST+15      GET EXTENT COUNT\n         LA    R3,AEXTENTS         INIT EXTENT ADDR PTR\n         XR    R5,R5               CLEAR ACCUMULATOR\nADDEMUP  EQU   *\n         L     R4,0(R3)            LOAD ADDR OF EXTENT\n         CLI   0(R4),X'00'         IS EXTENT IN USE\n         BE    ADDONE              IT'S OVER....\n         LA    R4,2(R4)\n         LH    R7,4(R4)            LOAD ADDR OF START CYLINDER\n         LH    R8,0(R4)                         END CYLINDER\n         SR    R7,R8               SUBTRACT\n         MH    R7,TRKCOUNT         * BY TRACKS PER CYLINDER\n         LH    R8,6(R4)            LOAD ENDING TRACK\n         AR    R7,R8               ADD TO TRACK TOTAL\n         LH    R8,2(R4)            LOAD STARTING TRACK\n         SR    R7,R8\n         AR    R5,R7               ADD TO ACCUMULATOR\n         LA    R5,1(R5)            INCLUSIVE - BUMP BY 1\n         LA    R3,4(R3)            BUMP EXTENT POINTER\n         BCT   R2,ADDEMUP          LOOP BACK\nADDONE   EQU   *\n         CVD   R5,WORKDBLW\n         MVC   SC1LN09+0(6),=XL6'402020202120'\n         ED    SC1LN09+0(6),WORKDBLW+5\n         MVC   SC1LN09+7(18),=CL18'= TRACKS ALLOCATED'\n         TM    DSCB1LST+38,X'80'       IS IT ISAM?\n         BNO   PROCUSED                NO, GO PROCESS TRACKS USED\n         MVI   SC1LN12,C' '            CLEAR IRRELEVANT MESSAGE\n         MVC   SC1LN12+1(40),SC1LN12\n         XR    R5,R5                   CLEAR A REGISTER\n         IC    R5,DSCB2LST+45          GET NUMBER OF INDEX LEVELS\n         CVD   R5,WORKDBLW             CONVERT RADIX\n         MVC   SC1LN13+4(4),=XL4'40202120'\n         ED    SC1LN13+4(4),WORKDBLW+6\n         MVC   SC1LN13+9(24),=CL24'= NUMBER OF INDEX LEVELS'\n         ICM   R5,X'0F',DSCB2LST+67    GET NUMBER OF PRIME RECORDS\n         CVD   R5,WORKDBLW\n         MVC   SC1LN14(8),=XL8'4020202020202120'\n         ED    SC1LN14(8),WORKDBLW+4\n         MVC   SC1LN14+9(33),=CL33'= NUMBER OF RECORDS IN PRIME AREA'\n         LH    R5,DSCB2LST+128\n         CVD   R5,WORKDBLW\n         MVC   SC1LN15(8),=XL8'4020202020202120'\n         ED    SC1LN15(8),WORKDBLW+4\n         MVC   SC1LN15+9(36),=C'= NUMBER OF RECORDS IN OVERFLOW AREA'\n         B     BYPUSED\nPROCUSED EQU   *\n         LH    R5,DSCB1LST+54\n         CLC   DSCB1LST+54(3),=XL3'000000'\n         BE    NONEUSED\n         LA    R5,1(R5)\nNONEUSED EQU   *\n         CVD   R5,WORKDBLW\n         MVC   SC1LN10+0(6),=XL6'402020202120'\n         ED    SC1LN10+0(6),WORKDBLW+5\n         MVC   SC1LN10+7(13),=CL13'= TRACKS USED'\nBYPUSED  EQU   *\n         SPACE 1\nEXIT8    EQU   *\n         L     R9,SAVE8\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE OBTAINS THE CURRENT TIME AND DATE AND FORMATS THE    *\n* INFORMATION ONTO THE SCREEN.                                        *\n***********************************************************************\n         SPACE 1\nGETDATE  DS    0H\n         ST    R9,SAVE9\n         B     BSAVE9\nSAVE9    DC    F'-1'\n         DC    CL8'GETDATE '\nBSAVE9   EQU   *\n         SPACE 1\n         TIME  DEC                     GET THE TIME IN DECIMAL\n*--> FORMAT THE CURRENT TIME\n         STM   R0,R1,WORKDBLW          STORE THE RESULTS\n         UNPK  WORKTIME,WORKDBLW(4)    UNPACK THE TIME\n         OI    WORKTIME+7,X'F0'        CLEAR THE SIGN NIBBLE\n         MVC   SC1LN24+72(2),WORKTIME+1  MOVE THE HH\n         MVC   SC1LN24+75(2),WORKTIME+3           MM\n         MVC   SC1LN24+78(2),WORKTIME+5           SS\n*--> FORMAT THE CURRENT DATE\n         MVC   DIVFIELD+0(2),=XL2'0019'    MOVE ZEROES + 19\n         MVC   DIVFIELD+2(1),WORKDBLW+5    MOVE YEAR\n         MVI   DIVFIELD+3,X'0F'            MOVE SIGN NIBBLE\n         DP    DIVFIELD,=PL2'40'       DIVIDE BY 4 X 10\n         CP    DIVFIELD+2(2),=PL1'0'   IS IT A LEAP YEAR?\n         BNE   NOTLEAP                 NO, DON'T CHANGE TABLE\n         ZAP   MONTHTBL+2(2),=PL2'29'  FEBRUARY\nNOTLEAP  EQU   *\n         LA    R4,MONTHTBL             GET ADDRESS OF MONTHTBL\n         LA    R5,12                   NUMBER OF MONTHS FOR BCT\n         ZAP   MONTH,=PL1'1'           SOMEPLACE TO START\nMONTH1   EQU   *\n         CP    WORKDBLW+6(2),0(2,R4)   NUMBER OF DAYS IN MONTH\n         BNH   MONTHEND                LESS THAN MONTH, GO FORMAT\n         SP    WORKDBLW+6(2),0(2,R4)   MORE THAN A MONTH\n         AP    MONTH,=PL1'1'           ADD 1 TO MONTH\n         LA    R4,2(R4)                BUMP MONTH POINTER\n         BCT   R5,MONTH1               GO TRY NEXT MONTH\nMONTHEND EQU   *\n         LA    R3,SC1LN24              ADDRESS OF DATE FIELD\n         UNPK  0(2,R3),MONTH           UNPACK MONTH\n         OI    1(R3),X'F0'             CLEAR SIGN NIBBLE\n         MVI   2(R3),C'/'              INSERT THE SLASH\n         UNPK  3(2,R3),WORKDBLW+6(2)   MOVE THE DAY\n         OI    4(R3),X'F0'             CLEAR SIGN NIBBLE\n         MVI   5(R3),C'/'              INSERT THE SLASH\n         UNPK  WORKTIME+0(3),WORKDBLW+5(2) UNPACK THE YEAR\n         OI    WORKTIME+2,X'F0'        CLEAR SIGN NIBBLE\n         MVC   SC1LN24+6(2),WORKTIME   MOVE THE YEAR\n         SPACE 1\nEXIT9    EQU   *\n         L     R9,SAVE9\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE WILL SCAN THE TIOT FOR THE DDNAME \"DSATPRNT\".  IF IT *\n* IS FOUND, THE PROGRAM WILL ASSUME THAT THE USER HAS PRE-ALLOCATED   *\n* A PRINT FILE WHICH THE SCREEN WILL BE WRITTEN TO.  IF THE DDNAME    *\n* IS NOT FOUND, THE ROUTINE WILL RETURN VIA R9.                       *\n***********************************************************************\n         SPACE 1\nPRINTER  DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'PRINTER '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R2,16(0)            CVT\n         L     R2,0(R2)            CVT -> TCB LIST\n         L     R2,4(R2)            TCB LIST -> TCB\n         L     R2,12(R2)           TCB -> TIOT\n         LA    R2,24(R2)           TIOT + 12\nSCANDD   EQU   *\n         CLC   4(8,R2),=CL8'DSATPRNT'  IS THIS THE DDNAME?\n         BE    FOUNDDD\n         XR    R3,R3               CLEAR R3\n         IC    R3,0(R2)            GET LENGTH OF TIOT ENTRY\n         AR    R2,R3               ADD LENGTH\n         L     R3,0(R2)            GET STUFF\n         LTR   R3,R3               NULL POINTER?\n         BZ    EXIT10              YES, NO PRINTER.\n         B     SCANDD\nFOUNDDD  EQU   *\n         OPEN  (PRINTDCB,OUTPUT)\n         MVI   PRINTREC,C' '               FORMAT FIRST LINE\n         MVC   PRINTREC+1(132),PRINTREC\n         MVI   PRINTREC,C'1'\n         MVI   PRINTREC+25,C'*'\n         MVC   PRINTREC+26(83),PRINTREC+25\n         PUT   PRINTDCB,PRINTREC\n         MVI   PRINTREC,C' '               FORMAT SECOND LINE\n         MVC   PRINTREC+1(132),PRINTREC\n         MVI   PRINTREC+25,C'*'\n         MVI   PRINTREC+108,C'*'\n         PUT   PRINTDCB,PRINTREC\n         LA    R2,SCREEN1                  ADDR OF SCREEN\n         LA    R3,24                       COUNT FOR BCT\nPRNTLOOP EQU   *\n         MVC   PRINTREC+27(80),0(R2)\n         PUT   PRINTDCB,PRINTREC\n         LA    R2,80(R2)\n         BCT   R3,PRNTLOOP\n         MVI   PRINTREC,C' '\n         MVC   PRINTREC+1(132),PRINTREC\n         MVI   PRINTREC+25,C'*'\n         MVI   PRINTREC+108,C'*'\n         PUT   PRINTDCB,PRINTREC\n         MVC   PRINTREC+26(83),PRINTREC+25\n         PUT   PRINTDCB,PRINTREC\n         CLOSE (PRINTDCB)\n         MVC   SC1LN20(27),=CL27'THIS SCREEN WILL BE PRINTED'\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* SCREEN1 IS ASSUMED TO BE A STANDARD 1920 BYTE SCREEN IMAGE WITH NO  *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE11\n         B     BSAVE11\nSAVE11   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE11  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         LA    R6,SCREEN1              GET ADDR OF INPUT SCREEN\n         LA    R7,1920(R6)             GET END OF INPUT SCREEN\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP50 EQU   *\n         MVC   0(L'SCSUFFIX,R4),SCSUFFIX  MOVE SUFFIX\n         LA    R5,L'SCSUFFIX(R5)       BUMP LENGTH OF SUFFIX\n*--> TGET'S AND TPUT'S\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TGET  DSN,80                  GET DUMMY INPUT/NEW DSN\n         LTR   R1,R1                   WAS A NEW DSN ENTERED?\n         BZ    FSBYPSW                 NO, BYPASS SWITCH SETTING\n         MVI   STACKSW,C'1'            YES, TURN SWITCH ON\n         OC    DSN(80),=CL80' '        SET INPUT TO UPPER CASE\nFSBYPSW  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT11   EQU   *\n         L     R9,SAVE11\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE IS ENTERED IF THE TERMINAL USER TYPED A NEW DSN INTO *\n* THE FIRST LINE OF THE DISPLAY SCREEN.  IF THEY DID, THIS ROUTINE IS *\n* USED TO RE-INVOKE DSAT USING THE STACK MACRO.                       *\n***********************************************************************\n         SPACE 1\nSTACKRTN DS    0H\n         ST    R9,SAVE12\n         B     BSAVE12\nSAVE12   DC    F'-1'\n         DC    CL8'STACKRTN'\nBSAVE12  EQU   *\n         SPACE 1\n         GETMAIN LU,LA=STCKGMRQ,A=STCKGMRS,SP=78\n         SPACE 1\n         L     R4,STCKGMRS             ADDR OF LSD & COMMAND\n         MVC   0(16,R4),STCKLSD        MOVE LSD TO SP 78 AREA\n         L     R5,STCKGMRS+4           ADDR OF SP 78 COMMAND AREA\n         MVC   0(5,R5),=CL5'DSAT '     MOVE OUR COMMAND NAME\n         MVC   5(47,R5),DSN            MOVE INPUT DSN\n         ST    R5,0(R4)                STORE COMMAND ADDR IN LSD\n         ST    R5,8(R4)                STORE COMMAND ADDR IN LSD\n         L     R2,CPPLUPT              ADDR OF USER PROFILE TABLE\n         L     R3,CPPLECT              ADDR OF ENVIRONMENT CONTROL TBL\n         SPACE 1\n         STACK PARM=STCKLIST,          ADDR OF LIST FORM MACRO         X\n               UPT=(R2),               ADDR OF USER PROFILE TABLE      X\n               ECT=(R3),               ADDR OF ENVIRONMENT CONTROL TBL X\n               ECB=STCKECB,            ADDR OF EVENT CONTROL BLOCK     X\n               STORAGE=((R4),SOURCE),  ADDR OF LIST STORAGE DESCRIPTOR X\n               MF=(E,STCKIOPL)         EXECUTE FORM & IOPL STORAGE\n         LTR   R15,R15                 SUCCESSFUL OPERATION?\n         BZ    EXIT12                  YES, EXIT\n         ISK   0,0                     NO, ABEND RIGHT HERE\n         SPACE 1\nEXIT12   EQU   *\n         L     R9,SAVE12\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE IS ENTERED IF THE TERMINAL USER TYPED A /X FLAG IN   *\n* THE INPUT DSN FIELD SOMEWHERE.  THIS ROUTINE FORMATS THE EXTENT     *\n* INFORMATION AND PRESENTS IT ON THE SCREEN.                          *\n***********************************************************************\n         SPACE 1\nEXTENTS  DS    0H\n         ST    R9,SAVE13\n         B     BSAVE13\nSAVE13   DC    F'-1'\n         DC    CL8'EXTENTS '\nBSAVE13  EQU   *\n         SPACE 1\n         TPUT  MSG12,L'MSG12           WRITE HEADING MESSAGE\n         TPUT  MSG13,L'MSG13                 BLANK\n         XR    R2,R2                   CLEAR WORK REGISTER\n         IC    R2,DSCB1LST+15          INSERT EXTENT COUNT\n         ZAP   VOLSCNT,=PL1'0'         CLEAR MSG COUNT\n         LA    R3,AEXTENTS             GET EXTENTS ADDRESS LIST\nEXTNT000 EQU   *\n         LA    R6,8                    NUMBER OF NIBBLES IN FOUR\n         XR    R4,R4                   CLEAR WORK REG\n         L     R5,0(R3)                LOAD ADDR OF BEGINNING EXTENT\n         L     R5,2(R5)                PICK UP FIRST EXTENT\n         LA    R7,WORKDBLW             GET BEGINNING ADDRESS\nEXTNT010 EQU   *\n         SLDL  R4,4                    SHIFT FOUR BITS INTO R4\n         STC   R4,0(R7)                STORE INTO WORK AREA\n         XR    R4,R4                   CLEAR REGISTER\n         LA    R7,1(R7)                BUMP WORK AREA POINTER\n         BCT   R6,EXTNT010             ITERATE 8 TIMES\n         MVC   MSG14+18(8),WORKDBLW    MOVE TO MESSAGE\n         TR    MSG14+18(8),HEXTRT      TRANSLATE\n         LA    R6,8                    NUMBER OF NIBBLES IN FOUR\n         XR    R4,R4                   CLEAR WORK REG\n         L     R5,0(R3)                LOAD ADDR OF BEGINNING EXTENT\n         L     R5,6(R5)                PICK UP FIRST EXTENT\n         LA    R7,WORKDBLW             GET BEGINNING ADDRESS\nEXTNT020 EQU   *\n         SLDL  R4,4                    SHIFT FOUR BITS INTO R4\n         STC   R4,0(R7)                STORE INTO WORK AREA\n         XR    R4,R4                   CLEAR REGISTER\n         LA    R7,1(R7)                BUMP WORK AREA POINTER\n         BCT   R6,EXTNT020             ITERATE 8 TIMES\n         MVC   MSG14+33(8),WORKDBLW    MOVE TO MESSAGE\n         TR    MSG14+33(8),HEXTRT      TRANSLATE\n         AP    VOLSCNT,=PL1'1'         ADD ONE TO MSG COUNT\n         UNPK  MSG14+7(2),VOLSCNT      UNPACK MSG COUNT\n         OI    MSG14+8,X'F0'           CLEAR SIGN NIBBLE\n         TPUT  MSG14,L'MSG14           PUT OUT EXTENT MSG\n         LA    R3,4(R3)                BUMP TO NEXT EXTENT\n         BCT   R2,EXTNT000             ITERATE\n         SPACE 1\nEXIT13   EQU   *\n         L     R9,SAVE13\n         BR    R9\n         EJECT\nMSG1     DC    CL29'PLEASE ENTER THE DATASET NAME'\nMSG2     DC    CL40'UNABLE TO LOCATE DSNAME IN CATALOG, DSN='\nMSG3     DC    CL43'DATASET NOT ON A DIRECT ACCESS DEVICE, DSN='\nMSG4     DC    CL44'DATASET NOT FOUND ON INDICATED VOLUME XXXXXX'\nMSG5     DC    CL17'   VOL=SER=XXXXXX'\nMSG7     DC    CL42'UNABLE TO OBTAIN FORMAT 3 (EXTENSION) DSCB'\nMSG8     DC    CL44'SORRY - DSAT DOES NOT CURRENTLY SUPPORT VSAM'\nMSG9     DC    CL37'UNABLE TO OBTAIN FORMAT 2 (ISAM) DSCB'\nMSG10    DC    CL43'VOLSER ENTERED BY USER NOT ACTIVE IN SYSTEM'\nMSG11    DC    CL48'MORE VOLUMES THAN CAN BE LISTED, CONSULT LIBRARY'\nMSG12    DC    CL41'------------ DATASET EXTENTS ------------'\nMSG13    DC    CL1' '\nMSG14    DC    CL41'EXTENT XX BEGIN = AAAAAAAA END = BBBBBBBB'\nTRKCOUNT DC    H'0'       TRACKS PER CYLINDER\nDSN      DC    CL80' '    INPUT BUFFER FOR DATASET NAME\nDSN2     DC    CL80' '    WORKAREA FOR APPENDING USERID\nPRMSZE   DS    CL2        PRIMARY SCREEN SIZE\nALTSZE   DS    CL2        ALTERNATE SCREEN SIZE\nVOLSER   DC    CL6' '     VOLSER IF NOT IN CATALOG\nAPOSTSW  DC    CL1'0'     APPEND USERID FLAG 0 = YES, 1 = NO\nSTACKSW  DC    CL1'0'     STACK NEW DSAT CMND 0 = NO, 1 = YES\nSYSREQSW DC    CL1'0'     REQUEST EXTENTS 0 = NO, 1 = YES\nVOL20IND DC    CL1'0'     MORE THAN 20 VOLUMES? 0 = NO, 1 = YES\nVOLSCNT  DC    PL2'0'     VOLUME COUNT FOR MSG 5 DISPLAY\nDSADCB   DS    X          COPY OF CVTDCB - OP SYS\nDSADCBXA EQU   X'80'      XA OPERATING SYSTEM\nWORKTIME DS    CL8\nMONTHTBL DC    PL2'31',PL2'28',PL2'31',PL2'30',PL2'31',PL2'30'\n         DC    PL2'31',PL2'31',PL2'30',PL2'31',PL2'30',PL2'31'\nDIVFIELD DS    PL4                     MEMORY FOR DIVIDE PACKED\nMONTH    DS    PL2                     PACKED MONTH\nWORKDBLW DC    D'0'       WORKAREA FOR CVD INSTRUCTIONS\nPRINTDCB DCB   DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133,DDNAME=DSATPRNT\nPRINTREC DS    CL133\n         DS    0D\n*--------CATALOG SEARCH MACRO\nLOCLIST  CAMLST NAME,DSN,,VOLIST\n         DS    0D\nVOLIST   DS    CL265\n*--------VTOC DSCB 1 OBTAIN MACRO (HEADER DSCB)\nOBLIST1  CAMLST SEARCH,DSN,VOLIST+6,DSCB1LST\n         DS    0D\nDSCB1LST DS    CL148\n*--------VTOC DSCB 2 OBTAIN MACRO (ISAM DSCB)\nOBLIST2  CAMLST SEEK,DSCB1LST+91,VOLIST+6,DSCB2LST\n         DS    0D\nDSCB2LST DS    CL148\n*--------VTOC DSCB 3 OBTAIN MACRO (EXTENSION DSCB)\nOBLIST3  CAMLST SEEK,DSCB1LST+91,VOLIST+6,DSCB3LST\n         DS    0D\nDSCB3LST DS    CL148\n*--------STACK MACRO OPERAND AREA\nSTCKGMRS DC    2F'0'                   GETMAIN RESPONSE AREA\nSTCKGMRQ DS    0F                      GETMAIN REQUEST AREA\n         DC    F'16'                       16 BYTES FOR THE LSD\n         DC    X'80'                       LAST REQUEST INDICATOR\n         DC    AL3(52)                     52 BYTES FOR COMMAND\nSTCKLIST STACK MF=L                    LIST FORM STACK MACRO\nSTCKECB  DC    F'0'                    ECB FOR STACK MACRO USE\nSTCKIOPL DC    4F'0'                   INPUT/OUTPUT PARAMETER LIST\nSTCKLSD  DS    0F                      LIST SOURCE DESCRIPTOR\n         DC    A(0)                        ADDR OF IN-STORAGE LIST\n         DC    H'52'                       RECORD LENGTH OF ELEMENT\n         DC    H'52'                       TOTAL LENGTH OF LIST\n         DC    A(0)                        POINTER TO COMMAND\n         DC    A(0)                        RESERVED\n         SPACE 2\n*--------DATE ROUTINE WORK AREA\nDATEWORK DS    2F\nDATEMNTH DC    H'31'  JAN\n         DC    H'29'  FEB\n         DC    H'31'  MAR\n         DC    H'30'  APR\n         DC    H'31'  MAY\n         DC    H'30'  JUN\n         DC    H'31'  JUL\n         DC    H'31'  AUG\n         DC    H'30'  SEP\n         DC    H'31'  OCT\n         DC    H'30'  NOV\n         DC    H'31'  DEC\nDATEPDEC DS    D\nDATEUDEC DS    D\n         SPACE 2\nAEXTENTS EQU   *\n         DC    A(DSCB1LST+061)  ADDRESS OF EXTENT 1\n         DC    A(DSCB1LST+071)  ADDRESS OF EXTENT 2\n         DC    A(DSCB1LST+081)  ADDRESS OF EXTENT 3\n         DC    A(DSCB3LST+004)  ADDRESS OF EXTENT 4\n         DC    A(DSCB3LST+014)  ADDRESS OF EXTENT 5\n         DC    A(DSCB3LST+024)  ADDRESS OF EXTENT 6\n         DC    A(DSCB3LST+034)  ADDRESS OF EXTENT 7\n         DC    A(DSCB3LST+045)  ADDRESS OF EXTENT 8\n         DC    A(DSCB3LST+055)  ADDRESS OF EXTENT 9\n         DC    A(DSCB3LST+065)  ADDRESS OF EXTENT 10\n         DC    A(DSCB3LST+075)  ADDRESS OF EXTENT 11\n         DC    A(DSCB3LST+085)  ADDRESS OF EXTENT 12\n         DC    A(DSCB3LST+095)  ADDRESS OF EXTENT 13\n         DC    A(DSCB3LST+105)  ADDRESS OF EXTENT 14\n         DC    A(DSCB3LST+115)  ADDRESS OF EXTENT 15\n         DC    A(DSCB3LST+125)  ADDRESS OF EXTENT 16\n         SPACE 2\nHEXTRT   EQU   *     0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' 0\n         DC    XL16'F1000000000000000000000000000000' 1\n         DC    XL16'F2000000000000000000000000000000' 2\n         DC    XL16'F3000000000000000000000000000000' 3\n         DC    XL16'F4000000000000000000000000000000' 4\n         DC    XL16'F5000000000000000000000000000000' 5\n         DC    XL16'F6000000000000000000000000000000' 6\n         DC    XL16'F7000000000000000000000000000000' 7\n         DC    XL16'F8000000000000000000000000000000' 8\n         DC    XL16'F9000000000000000000000000000000' 9\n         DC    XL16'C1000000000000000000000000000000' A\n         DC    XL16'C2000000000000000000000000000000' B\n         DC    XL16'C3000000000000000000000000000000' C\n         DC    XL16'C4000000000000000000000000000000' D\n         DC    XL16'C5000000000000000000000000000000' E\n         DC    XL16'C6000000000000000000000000000000' F\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*               D E V I C E   N A M E   T A B L E                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDEVTABLE EQU   *\n         DC    X'2008'\n         DC    X'0014'\n         DC    CL16'   2314 DISK    '\n         DC    X'2002'\n         DC    X'00C8'\n         DC    CL16'   2301 DRUM    '\n         DC    X'2003'\n         DC    X'000A'\n         DC    CL16'   2303 DRUM    '\n         DC    X'2001'\n         DC    X'000A'\n         DC    CL16'   2311 DISK    '\n         DC    X'2004'\n         DC    X'002E'\n         DC    CL16' 2302 DISK FILE '\n         DC    X'2005'\n         DC    X'0514'\n         DC    CL16' 2321 DATA CELL '\n         DC    X'2006'\n         DC    X'0008'\n         DC    CL16'  2305-1 DRUM   '\n         DC    X'2007'\n         DC    X'0008'\n         DC    CL16'  2305-2 DRUM   '\n         DC    X'2009'\n         DC    X'0013'\n         DC    CL16'   3330 DISK    '\n         DC    X'200D'\n         DC    X'0013'\n         DC    CL16'  3330-1 DISK   '\n         DC    X'200B'\n         DC    X'001E'\n         DC    CL16'   3350 DISK    '\n         DC    X'200E'\n         DC    X'000F'\n         DC    CL16'   3380 DISK    '\n         DC    X'0000'         ** MARKS END OF DEVICE TABLE **\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\nSCSUFFIX DC    XL11'11C1C53CC14E001140D913'\n         SPACE 1\nALISTPTR DC    A(ATRLST1B)             PTR TO ACTIVE ATTR LIST\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@UH)             UNPROT-HIGH  / RED\n         DC    AL3(SC1LN01+24)         JUST BEFORE DSN\n         DC    AL1(ATR@PH)             PROTECT-LOW  / WHITE\n         DC    AL3(SC1LN01+79)         END OF DSN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN06+00)         BEGIN LINE 6\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN06+79)         END LINE 6\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN08+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN08+06)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN09+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN09+06)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN10+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN10+06)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN10+50)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN10+69)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN11+16)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN11+40)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN12+32)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN12+40)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN13+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN13+08)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN14+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN14+08)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN14+51)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN14+69)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN15+00)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN15+08)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN16+40)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN17+40)\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN18+54)\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN23+79)\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40' ATTRIBUTES OF DATASET -                '\n         DC    CL40'                                        '\n         DC    CL40'----------------------------------------'\n         DC    CL40'----------------------------------------'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'DSORG  RECFM  OPTCD  CR. DATE  EX. DATE '\n         DC    CL40' VOLCNT  VOLSER-1  DEVICE TYPE   UNIT   '\n         DC    CL40'-----  -----  -----  --------  -------- '\n         DC    CL40' ------  --------  -----------   ----   '\nSC1LN06  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN08  DC    CL40'       = EXTENTS ALLOCATED              '\n         DC    CL40'           LRECL       BLKSIZE          '\nSC1LN09  DC    CL40'                                        '\n         DC    CL40'           -----       -------          '\nSC1LN10  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN11  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN12  DC    CL40'                                        '\n         DC    CL40'           KEYLEN     KEY OFFSET        '\nSC1LN13  DC    CL40'                                        '\n         DC    CL40'           ------     ----------        '\nSC1LN14  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN15  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN16  DC    CL40'                                        '\n         DC    CL40'           LAST ACCESS DATE             '\nSC1LN17  DC    CL40'                                        '\n         DC    CL40'           ----------------             '\nSC1LN18  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN20  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN23  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40'MM/DD/YY          ---- PRESS ENTER TO CL'\n         DC    CL40'EAR SCREEN ----                 99.99.99'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*      WORK AREA FOR UCB SCAN ROUTINE (FROM TSUCBSCN)                 *\n***********************************************************************\n         SPACE 1\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n******** ***** *********************** END OF UCB LOOKUP DSA\nDSAEND   EQU  *                         LENGTH OF WORK\n         PRINT ON,NOGEN\n         IEFUCBOB ,                    UCB\n         CVT   DSECT=YES               CVT\n         END   DSAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDFMID": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x90\\x05/\\x00\\x91\\x07/\\x134\\x01&\\x00\\xdf\\x00\\\\\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1990-02-21T00:00:00", "modifydate": "1991-03-13T13:34:00", "lines": 294, "newlines": 223, "modlines": 92, "user": "SYSTAB"}, "text": "FINDFMID TITLE '**** EXTRACT ALL PTFS FOR FMID FROM CBPDO ****'\n***********************************************************************\n*                                                                     *\n*    NAME - FINDFMID                                                  *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS PROGRAM EXTRACTS ALL PTF'S FOR A GIVEN FMID       *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    DDNAMES - INPUT    - INPUT CBPDO TAPE                            *\n*              OUTPUT   - OUTPUT PTF MEMBER                           *\n*              REPORT   - OUTPUT REPORT                               *\n*                                                                     *\n*    PARMS - SEVEN CHARACTER NAME OF AN FMID                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nFINDFMID CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         BAL   R9,PARMS                CHECK PARMS FOR VALID PARMS\n         BAL   R9,GETHOLD              COPY HOLD DATA TO TAPE\n         BAL   R9,GETPTF               READ CBPDO AND EXTRACT PTF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SCANS THE INPUT PARM FOR THE FMID NAME             *\n***********************************************************************\n         SPACE 2\nPARMS    DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'PARMS '\nBSAVE15  EQU   *\n         SPACE 1\n*------> INITIALIZE FOR PARM SCAN\n         L     R1,0(R1)                ADDR OF PARM LIST\n         LH    R2,0(R1)                LENGTH OF PARM\n         CH    R2,=H'6'                IS IT THE MINIMUM LENGTH?\n         BNL   BYPASS1                 YES, GO PROCESS PARM\n         WTO   'FINDFMID - NO PARM SUPPLIED '\n         B     EXIT10\nBYPASS1  EQU   *\n         LA    R3,2(R1)                BUMP TO START OF PARM\n         LR    R4,R3                   COPY START ADDR\n         AR    R4,R2                   ADD LENGTH\n         LA    R5,7                    MAX ENTRIES IN TABLE\n         XR    R2,R2                   CLEAR FMID COUNT\n         LA    R6,FMIDNAME             LOAD START OF TABLE\n*------> CHECK FOR PRESENCE OF PARMS IN PARAMETER STRING\nCHKOPT   EQU   *\n         CR    R3,R4                   SCAN OVER?\n         BNL   ENDPARMS                YES, GO STORE FMID COUNT\n         MVC   0(7,R6),0(R3)           MOVE FMID NAME\n         LA    R3,8(R3)                BUMP TO NEXT PARM ENTRY\n         LA    R2,1(R2)                BUMP FMID COUNT\n         LA    R6,7(R6)                BUMP FMID TABLE INDEX\n         BCT   R5,CHKOPT               ITERATE\nENDPARMS EQU   *\n         ST    R2,FMIDCNT              STORE COUNT\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE COPIES THE HOLDDATA TO THE OUTPUT TAPE             *\n***********************************************************************\n         SPACE 2\nGETHOLD  DS    0H\n         ST    R9,SAVE17\n         B     BSAVE17\nSAVE17   DC    F'-1'\n         DC    CL8'GETHOLD'\nBSAVE17  EQU   *\n         SPACE 1\n*------> COPY THE HOLD DATA TO THE OUTPUT TAPE\n         OPEN  (HOLDIN,INPUT,HOLDOUT,OUTPUT)\nREADHOLD EQU   *\n         GET   HOLDIN,WORKREC          GET RECORD\n         PUT   HOLDOUT,WORKREC         PUT RECORD\n         B     READHOLD\nEOFHOLD  EQU   *\n         CLOSE (HOLDIN,,HOLDOUT)\n         SPACE 1\nEXIT17   EQU   *\n         L     R9,SAVE17\n         BR    R9\n         EJECT\n***********************************************************************\n*  THIS ROUTINE READS THE CBPDO TAPE AND WRITES THE PTFS TO OUTPUT    *\n***********************************************************************\n         SPACE 2\nGETPTF   DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'GETPTF  '\nBSAVE20  EQU   *\n         SPACE 1\n         OPEN  (INPUT,INPUT,OUTPUT,OUTPUT,REPORT,OUTPUT)\nREADLOOP EQU   *\n         GET   INPUT,WORKREC           GET RECORD\n         AP    RECCNT1,=PL1'1'         ADD ONE TO COUNTER\n         CLC   WORKREC(7),=CL8'++ PTF ('  IS THIS A PTF\n         BNE   READLOOP                GO READ NEXT RECORD\nBLDTABLE EQU   *\n         LA    R2,TABLE                GET PTR TO START OF TABLE\n         L     R3,=F'50000'            NUMBER OF LINES IN TABLE\nGETLOOP  EQU   *\n         MVC   0(80,R2),WORKREC        MOVE RECORD TO STORAGE\n         GET   INPUT,WORKREC           GET RECORD\n         AP    RECCNT1,=PL1'1'         ADD ONE TO COUNTER\n         CLC   WORKREC(7),=CL8'++ PTF ('  IS THIS A PTF\n         BE    CHKFMID1                END OF PTF, CHECK FMID\n         LA    R2,80(R2)               BUMP INDEX\n         BCT   R3,GETLOOP              ITERATE\n         WTO   'FINDFMID - INSUFFICIENT STORAGE, TERMINATING'\n         B     EXIT10                  GO TO DRIVER'S EXIT\nCHKFMID1 EQU   *\n         MVC   PRT2PTF(7),PTFHOLD      MOVE NAME OF PTF FOR REPORT\n         MVC   PTFHOLD,WORKREC+8       MOVE CURRENT NAME OF PTF\n         LA    R3,TABLE                GET ORIGIN OF TABLE\nCHKFMID2 EQU   *\n         CLC   0(4,R3),=CL4'FMID'      HAVE WE FOUND AN FMID?\n         BE    FNDFMID1                YES, WRITE THIS ONE OUT\n         LA    R3,1(R3)                BUMP\n         CR    R3,R2                   END?\n         BL    CHKFMID2                ITERATE\n         WTO   'FINDFMID - FMID NOT FOUND, ABENDING'\n         DC    H'0'\nFNDFMID1 EQU   *\n         LA    R3,4(R3)                POINT PAST FMID\n         CLI   0(R3),C'('              FOUND LEFT PAREN?\n         BE    FNDFMID2                YES, BRANCH AROUND\n         LA    R3,1(R3)                ALLOW FOR ONE SPACE\nFNDFMID2 EQU   *\n         LA    R4,FMIDNAME             GET TABLE ORIGIN\n         L     R5,FMIDCNT              GET FMID COUNT\nFNDFMID3 EQU   *\n         CLC   1(7,R3),0(R4)           IS FMID IN OUR TABLE?\n         BE    WTRPREP                 YES, PREPARE TO WRITE\n         LA    R4,7(R4)                BUMP INDEX\n         BCT   R5,FNDFMID3             ITERATE\n         B     BLDTABLE                NO, FLUSH TABLE\nWTRPREP  EQU   *\n         MVC   PRT2FMID(7),0(R4)       MOVE FMID NAME\n         PUT   REPORT,PRTREC2          PRINT REPORT LINE\n         LA    R3,TABLE                GET TABLE ORIGIN\nWRITER   EQU   *\n         MVC   WORKREC2,0(R3)          MOVE RECORD\n         AP    RECCNT2,=PL1'1'         ADD ONE TO COUNTER\n         PUT   OUTPUT,WORKREC2         WRITE RECORD\n         LA    R3,80(R3)               BUMP\n         CR    R3,R2                   END?\n         BNH   WRITER                  GO WRITE NEXT RECORD\n         B     BLDTABLE                GO BUILD NEXT TABLE ENTRY\nEOFINPUT EQU   *\n         CLOSE (INPUT,,OUTPUT)         CLOSE WORKING FILES\n         UNPK  PRTCNT1,RECCNT1         SHOW FIRST COUNTER\n         OI    PRTCNT1+6,X'F0'         NORMALIZE SIGN\n         UNPK  PRTCNT2,RECCNT2         SHOW SECOND COUNTER\n         OI    PRTCNT2+6,X'F0'         NORMALIZE SIGN\n         PUT   REPORT,PRTREC           PRINT RECORD\n         CLOSE (REPORT)                CLOSE OUTPUT REPORT\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*              W O R K I N G   S T O R A G E   S E C T I O N          *\n***********************************************************************\n         SPACE 3\nINPUT    DCB   DSORG=PS,               DCB FOR READING INPUT PTFS      X\n               RECFM=FB,                                               X\n               MACRF=GM,                                               X\n               EODAD=EOFINPUT,                                         X\n               LRECL=80,                                               X\n               DDNAME=INPUT\nOUTPUT   DCB   DSORG=PS,               DCB FOR WRITING OUTPUT PTFS     X\n               RECFM=FB,                                               X\n               MACRF=PM,                                               X\n               DDNAME=OUTPUT,                                          X\n               LRECL=80\nHOLDIN   DCB   DSORG=PS,               DCB FOR READING HOLDDATA        X\n               RECFM=FB,                                               X\n               MACRF=GM,                                               X\n               EODAD=EOFHOLD,                                          X\n               LRECL=80,                                               X\n               DDNAME=HOLDIN\nHOLDOUT  DCB   DSORG=PS,               DCB FOR WRITING HOLDDATA        X\n               RECFM=FB,                                               X\n               MACRF=PM,                                               X\n               DDNAME=HOLDOUT,                                         X\n               LRECL=80\nREPORT   DCB   DSORG=PS,               DCB FOR PRINTING REPORT         X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               DDNAME=REPORT,                                          X\n               BLKSIZE=0,                                              X\n               LRECL=133\n*------> THIS AREA IS USED FOR MISCELLANEOUS STUFF\nWORKREC  DC    CL80' '                 INPUT AREA\nWORKREC2 DC    CL80' '                 OUTPUT AREA\nRECCNT1  DC    PL4'0'                  NUMBER OF RECORDS READ\nRECCNT2  DC    PL4'0'                  NUMBER OF RECORDS IN PTF\nFMIDCNT  DC    F'0'                    NUMBER OF FMIDS REQUESTED\nFMIDNAME DC    7XL7'00'                NAMES OF THE PTF WE WANT\nPTFHOLD  DC    CL7' '                  HOLD AREA FOR PTF NAME\n*------>\nPRTREC   DC    CL133' '                TOTALS PRINT RECORD\n         ORG   PRTREC\n         DC    C'1RECORDS READ = '\nPRTCNT1  DC    C'XXXXXXX'\n         DC    C' RECORDS WRITTEN = '\nPRTCNT2  DC    C'XXXXXXX'\n         ORG\n*------>\nPRTREC2  DC    CL133' '                SELECT PRINT RECORD\n         ORG   PRTREC2\n         DC    C' PTF NAME = '\nPRT2PTF  DC    C'XXXXXXX'\n         DC    C' FOR FMID = '\nPRT2FMID DC    C'XXXXXXX'\n         ORG\n*------>\n         LTORG\n*------>\n         SPACE 3\nTABLE    DS    50000CL80\n         END   FINDFMID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDPTF": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x90\\x05/\\x00\\x91\\x07/\\x134\\x00\\xc0\\x00\\xc0\\x00\\x06\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-02-21T00:00:00", "modifydate": "1991-03-13T13:34:00", "lines": 192, "newlines": 192, "modlines": 6, "user": "SYSTAB"}, "text": "FINDPTF  TITLE '**** EXTRACT PTF FROM CBPDO *****'\n***********************************************************************\n*                                                                     *\n*    NAME - FINDPTF                                                   *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS PROGRAM EXTRACTS A NAMED PTF FROM A CBPDO TAPE    *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    DDNAMES - INPUT    - INPUT CBPDO TAPE                            *\n*              OUTPUT   - OUTPUT PTF MEMBER                           *\n*                                                                     *\n*    PARMS - SEVEN CHARACTER NAME OF A PTF                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nFINDPTF  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         BAL   R9,OPTIONS              CHECK PARMS FOR VALID OPTIONS\n         BAL   R9,GETPTF               READ CBPDO AND EXTRACT PTF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SCANS THE INPUT PARM FOR THE PTF NAME              *\n***********************************************************************\n         SPACE 2\nOPTIONS  DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'OPTIONS '\nBSAVE15  EQU   *\n         SPACE 1\n*------> INITIALIZE FOR PARM SCAN\n         L     R1,0(R1)                ADDR OF PARM LIST\n         LH    R2,0(R1)                LENGTH OF PARM\n         CH    R2,=H'6'                IS IT THE MINIMUM LENGTH?\n         BNL   BYPASS1                 YES, GO PROCESS PARM\n         WTO   'FINDPTF - NO PARM SUPPLIED '\n         B     EXIT10\nBYPASS1  EQU   *\n         LA    R3,2(R1)                BUMP TO START OF PARM\n         LR    R4,R3                   COPY START ADDR\n         AR    R4,R2                   ADD LENGTH\n*------> CHECK FOR PRESENCE OF OPTIONS IN PARAMETER STRING\nCHKOPT   EQU   *\n         CR    R3,R4                   SCAN OVER?\n         BNL   EXIT15                  YES, EXIT ROUTINE\n         MVC   PTFNAME,0(R3)           MOVE PTF NAME\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*  THIS ROUTINE READS THE CBPDO TAPE AND WRITES THE PTF TO OUTPUT     *\n***********************************************************************\n         SPACE 2\nGETPTF   DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'GETPTF  '\nBSAVE20  EQU   *\n         SPACE 1\n         OPEN  (INPUT,INPUT,OUTPUT,OUTPUT,REPORT,OUTPUT)\nREADLOOP EQU   *\n         GET   INPUT,WORKREC           GET RECORD\n         AP    RECCNT1,=PL1'1'         ADD ONE TO COUNTER\n         CLC   WORKREC(7),=CL8'++ PTF ('  IS THIS A PTF\n         BNE   READLOOP                GO READ NEXT RECORD\n         CLC   WORKREC+8(7),PTFNAME    IS THIS OUR PTF?\n         BNE   READLOOP                GO READ NEXT RECORD\nPUTLOOP  EQU   *\n         PUT   OUTPUT,WORKREC          WRITE RECORD\n         GET   INPUT,WORKREC           GET RECORD\n         AP    RECCNT2,=PL1'1'         ADD ONE TO COUNTER\n         CLC   WORKREC(7),=CL8'++ PTF ('  IS THIS A PTF\n         BNE   PUTLOOP                 GO READ NEXT RECORD\nEOFINPUT EQU   *\n         CLOSE (INPUT,,OUTPUT)         CLOSE WORKING FILES\n         UNPK  PRTCNT1,RECCNT1         SHOW FIRST COUNTER\n         OI    PRTCNT1+6,X'F0'         NORMALIZE SIGN\n         UNPK  PRTCNT2,RECCNT2         SHOW SECOND COUNTER\n         OI    PRTCNT2+6,X'F0'         NORMALIZE SIGN\n         PUT   REPORT,PRTREC           PRINT RECORD\n         CLOSE (REPORT)                CLOSE OUTPUT REPORT\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*              W O R K I N G   S T O R A G E   S E C T I O N          *\n***********************************************************************\n         SPACE 3\nINPUT    DCB   DSORG=PS,               DCB FOR READING INPUT           X\n               RECFM=FB,                                               X\n               MACRF=GM,                                               X\n               EODAD=EOFINPUT,                                         X\n               LRECL=80,                                               X\n               DDNAME=INPUT\nOUTPUT   DCB   DSORG=PS,               DCB FOR PRINTING DIRECTORY      X\n               RECFM=FB,                                               X\n               MACRF=PM,                                               X\n               DDNAME=OUTPUT,                                          X\n               LRECL=80\nREPORT   DCB   DSORG=PS,               DCB FOR PRINTING PDS            X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               DDNAME=REPORT,                                          X\n               BLKSIZE=0,                                              X\n               LRECL=133\n*------> THIS AREA IS USED FOR MISCELLANEOUS STUFF\nWORKREC  DC    CL80' '                 I/O AREA\nRECCNT1  DC    PL4'0'                  NUMBER OF RECORDS READ\nRECCNT2  DC    PL4'0'                  NUMBER OF RECORDS IN PTF\nPTFNAME  DC    CL7' '                  NAME OF THE PTF WE WANT\n*------>\nPRTREC   DC    CL133' '                CURRENT PRINT RECORD\n         ORG   PRTREC\n         DC    C'1RECORDS READ PRIOR TO FIRST PTF = '\nPRTCNT1  DC    C'XXXXXXX'\n         DC    C'RECORDS IN CURRENT PTF = '\nPRTCNT2  DC    C'XXXXXXX'\n*------>\n         LTORG\n*------>\n         SPACE 3\n         END   FINDPTF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELPAR": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x19_\\x00\\x91\\x07/\\x138\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-07-14T00:00:00", "modifydate": "1991-03-13T13:38:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SYSTAB"}, "text": ")F    FUNCTION - TO DO HEX AND DECIMAL INTEGER ARITHMETIC ON 3278/9\n              CRT TERMINALS IN FULL-SCREEN MODE.\n\n)X    SYNTAX - AR\n\n\n   DESCRIPTION -\n\n     THE PURPOSE OF THIS COMMAND IS TO DO HEX AND DECIMAL INTEGER\n   ARITHMETIC IN FULL-SCREEN MODE ON 3278/9 CRT TERMINALS.  THE\n   COMMAND IS MENU DRIVEN.\n\n     IN ADDITION HEX AND DECIMAL ARITHMETIC, AN OPTION IS AVAILABLE\n   TO DO HEX TO DECIMAL AND DECIMAL TO HEX CONVERSIONS.  ANOTHER\n   OPTION GIVES THE USER THE ABILITY TO CONVERT 3270 SCREEN AND BUFFER\n   ADDRESSES TO ROW/COLUMN ADDRESSES, AND VICE VERSA.\n\n     TO GET BACK TO THE MENU SCREEN FROM ANY OF THE OPTION SCREENS,\n   SIMPLY PRESS THE PA1 (ATTN) KEY.  ANOTHER WAY OF DOING THIS IS TO\n   ENTER =X AND PRESS ENTER.  IN FACT, YOU CAN GET AROUND IN \"AR\" IF\n   YOU CAN REMEMBER THE OPTION NUMBERS BY ENTERING AN = SIGN FOLLOWED\n   BY THE OPTION NUMBER AND PRESSING ENTER.  =0 WILL RETURN TO TSO.\n\n)O    OPERANDS - NONE, OTHER THAN AS SPECIFIED ABOVE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELPDSAT": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x81\\x19O\\x00\\x91\\x07/\\x139\\x00%\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1981-07-13T00:00:00", "modifydate": "1991-03-13T13:39:00", "lines": 37, "newlines": 34, "modlines": 0, "user": "SYSTAB"}, "text": ")F    FUNCTION - DISPLAY THE ATTRIBUTES OF A DATASET ON IBM 3278/9\n              CRT TERMINALS IN FULL-SCREEN MODE.\n\n)X    SYNTAX - DSAT DSNAME (-VOLSER) (:)\n\n\n   DESCRIPTION -\n\n     THE DSNAME OPERAND IS REQUIRED.  APOSTRAPHES ARE REQUIRED ONLY IF\n   THE DATASET IS NOT CATALOGED UNDER YOUR USERID (OR PROFILE PREFIX).\n   IF ENTERING APOSTRAPHES, ONLY THE FIRST IS REQUIRED.\n\n     IF THE DATASET IS NOT CATALOGED, YOU MUST ENTER THE DSN FOLLOWED\n   BY A DASH, FOLLOWED BY THE NAME OF THE VOLUME TO BE SEARCHED.  THERE\n   MUST BE NO SPACES BETWEEN THE DASH AND THE VOLSER.\n\n     IF YOU WANT EXTENT INFORMATION, ENTER A COLON (:) AFTER THE DSNAME\n   OR VOLSER.  YOU WILL NOT SEE THE EXTENTS ON THE ORIGINAL SCREEN.\n   RATHER, AFTER VIEWING THE PRIMARY SCREEN, WHEN YOU PRESS ENTER, THE\n   EXTENTS WILL BE DISPLAYED IN SINGLE LINE MODE.\n\n     YOU CAN \"STACK\" ANOTHER DSAT REQUEST BY MODIFYING THE DSNAME FIELD\n   AT THE TOP OF THE OUTPUT SCREEN.  SIMPLY MAKE WHATEVER CHANGES ARE\n   NECESSARY, THEN PRESS ENTER.\n\n     IF YOU WANT A HARD-COPY OF THE SCREEN, YOU CAN GET IT BY SIMPLY\n   ALLOCATING A PRINT DATASET TO THE DDNAME \"DSATPRNT\" PRIOR TO USING\n   THE COMMAND.  THE DCB ATTRIBUTES OF THE PRINT DATASET MUST BE:\n\n     DSORG=PS, RECFM=FBA, LRECL=133\n\n     IF YOU ALLOCATE THE DATASET \"SHR\", DSAT WILL WRITE OVER THE ENTIRE\n   DATASET EVERY TIME IT IS CALLED.  YOU CAN STACK THE HARD-COPY BY\n   SIMPLY ALLOCATING THE DATASET \"MOD\".  YOU CAN THEN PRINT THIS\n   DATASET USING IEBGENER.  EACH REQUEST WILL PRINT ON A SEPARATE PAGE.\n\n)O    OPERANDS - NONE, OTHER THAN AS SPECIFIED ABOVE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELPVO": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x19_\\x00\\x91\\x07/\\x139\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-07-14T00:00:00", "modifydate": "1991-03-13T13:39:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYSTAB"}, "text": ")F    FUNCTION - TO ENABLE OPERATOR PRIVILEGED USERS THE ABILITY TO\n              ENTER ACF/VTAM COMMANDS FROM TSO TERMINALS.\n\n)X    SYNTAX - VO\n\n\n   DESCRIPTION -\n\n     THE PURPOSE OF THIS COMMAND IS TO ENABLE OPERATOR AUTHORIZED\n   USERS TO ENTER ACF/VTAM COMMANDS FROM TSO TERMINALS.  THIS IS\n   PARTICULARLY HELPFUL WHEN ONE IS WORKING ON A FAULTY TERMINAL\n   FROM A REMOTE LOCATION.  ALL IT REQUIRES IS A SEPARATE TSO TUBE.\n\n     VO PRESENTS THE USER WITH A FULL-SCREEN MENU INTO WHICH HE/SHE\n   CAN ENTER ACF/VTAM COMMANDS SUCH AS VARY, MODIFY, AND DISPLAY.\n   THE RESULTS ARE RETURNED ON A SEPARATE SCREEN, WHICH CANNOT BE\n   CHANGED.  AFTER THE USER VIEWS THE RESULT OF THE FIRST OPERATION,\n   PRESSING ENTER WILL CAUSE VO TO RETURN TO THE ORIGINAL MENU.\n\n     THE VARY AND MODIFY COMMANDS DO NOT GENERATE MESSAGES, SO VO\n   JUST ACKNOWLEDGES RECEIPT OF THE INPUT.  TO SEE WHAT REALLY\n   HAPPENED, DO A DISPLAY COMMAND ON THE DEVICE THAT YOU ARE WORKING\n   WITH AND CHECK THE RESULTS.\n\n     THERE IS A KNOWN PROBLEM WITH THE COMMAND THAT IF YOU TYPE IN\n   AN UNRECOGNIZABLE KEYWORD OR INVALID NETWORK NAME, VO WILL HANG\n   ON A RCVCMD MACRO.  IF THIS APPEARS TO HAVE HAPPENED, (RESPONSE\n   TIME OVER 5-10 SECONDS, PRESS ATTN AND VO WILL BREAK OUT AND\n   YOU CAN THEN GET BACK IN.\n\n     IF YOU ARE REALLY SERIOUS ABOUT DOING THIS KIND OF THING, YOU\n   MIGHT WANT TO CONSIDER ACQUIRING NCCF/NPDA/NPA.\n\n)O    OPERANDS - NONE, OTHER THAN AS SPECIFIED ABOVE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLFINDP": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x14\\x05\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:05:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SYSTAB"}, "text": "//SSPDEABS JOB (000698-SPD-BESTANI,RM-226),'TED BESTANI',\n// MSGCLASS=W,NOTIFY=SSPDEAB,CLASS=X\n//*FORMAT PR,DDNAME=,DEST=CDPC\n//*MAIN LINES=(999,W)\n//FINDPTF EXEC PGM=FINDPTF,PARM='UR21622'\n//STEPLIB DD DSN=SSPDEAB.LOAD,DISP=SHR,UNIT=3380,VOL=SER=DEAL01\n//INPUT   DD DISP=OLD,\n//             VOL=SER=(CU0038,CU0039,CU0040,CU0041),\n//             UNIT=3480,\n//             LABEL=(5,SL),\n//             DSN=SMPMCS\n//OUTPUT DD DSN=SSPDEAB.UY99999.PTF,DISP=SHR,UNIT=3380,VOL=SER=DEAL01\n//REPORT DD SYSOUT=*,DCB=BLKSIZE=1330\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLFMIDF": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x14\\x05\\x00-\\x00-\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:05:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "SYSTAB"}, "text": "//SYSTABF1 JOB (0000,SFO,1,1),'BESTANI',\n//         CLASS=A,MSGCLASS=X,NOTIFY=SYSTAB\n//*********************************************************************\n//FINDFMID EXEC PGM=FINDFMID,REGION=4096K,\n// PARM='HPGP100'\n//STEPLIB DD DSN=SYSTAB.LOAD,DISP=SHR\n//INPUT   DD DISP=OLD,\n//             VOL=SER=(MVSPUT),\n//             UNIT=TAPE80,\n//             LABEL=(1,BLP),DCB=BLKSIZE=7200,\n//             DSN=SMPMCS\n//HOLDIN  DD DISP=(OLD,PASS),\n//             VOL=(PRIVATE,RETAIN,SER=(MVSPUT)),\n//             UNIT=AFF=INPUT,\n//             LABEL=(4,BLP),DCB=BLKSIZE=7200,\n//             DSN=HOLDDATA\n//HOLDOUT DD DSN=SYSTAB.HOLDDATA,DISP=SHR\n//OUTPUT DD DSN=SYSTAB.PTFS,DISP=SHR\n//REPORT DD SYSOUT=*,DCB=BLKSIZE=133\n//******************************************************************//\n//*    PUTXREF PROGRAM FROM CONNECTICUT BANK AND TRUST COMPANY     *//\n//******************************************************************//\n//STEPRINT EXEC PGM=PUTXREF PARM=PUT8907\n//STEPLIB  DD DSN=SYSTAB.LOAD,DISP=SHR\n//INPUT  DD DSN=SYSTAB.PTFS,DISP=SHR\n//SORTIN   DD  DSN=&&SORT,DISP=(NEW,PASS),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=15,BLKSIZE=4095),\n//             SPACE=(CYL,(25,20))\n//SORTOUT  DD  DSN=&&SORT,DISP=(SHR,PASS),VOL=REF=*.SORTIN\n//TITLES   DD  DISP=SHR,DSN=SYSTAB.CMDLIB(XREFTIT)\n//PRINTER  DD  DSN=&P8803,DISP=(NEW,PASS),UNIT=SYSDA,\n//         DCB=(RECFM=VBA,LRECL=137,BLKSIZE=141),\n//         SPACE=(TRK,(15,15))\n//SYSUDUMP DD  SYSOUT=*\n//SORTMSG  DD  SYSOUT=Z\n//SYSPRINT DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=Z\n//SYSIN    DD  *\n SORT FIELDS=(9,7,CH,A,1,7,CH,A)\n/*\n//COPY    EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=Z\n//SYSUT1   DD  DSN=&P8803,DISP=(OLD,DELETE)\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLPRTPD": {"ttr": 2319, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x14\\x06\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:06:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SYSTAB"}, "text": "//SYSTABS1 JOB (0000,SFO,1,1),'BESTANI',\n//         CLASS=A,MSGCLASS=X,NOTIFY=SYSTAB\n//LIST1 EXEC PGM=PRTPDS,\n// PARM='DWIDTH(6),COL(4),FIND(OPSRPTR)'\n//STEPLIB  DD DISP=SHR,DSN=SYSTAB.LOAD\n//PDS DD DISP=SHR,DSN=IPO2.OPERLIB\n//REPORT   DD SYSOUT=*\n//DIRECT   DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//FINDSAVE DD DISP=SHR,DSN=SYSTAB.CMDLIB(OPSRPTR)\n//*********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLSMPET": {"ttr": 2321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91)O\\x00\\x91)O\\x14\\x04\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-21T00:00:00", "modifydate": "1991-10-21T14:04:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSTAB"}, "text": "//XXXXXXXY JOB (0000,SFO,1,1),'SMPETOOL',\n//         CLASS=A,MSGCLASS=X,NOTIFY=XXXXXXX\n//* *******************************************************************\n//* *  TO INTEGRATE THIS PRODUCT INTO YOUR ENVIRONMENT, CHANGE YOUR   *\n//* *  EXISTING SMP/E APPLY PROC TO ROUTE THE SMPRPT/SMPOUT SYSOUTS   *\n//* *  TO A TEMP DATASET, AND THEN RUN THIS JCL IN THE NEXT STEP.     *\n//* *  NOTICE THAT SMPETOOL COPIES THE SMP/E REPORTS VERBATIM.        *\n//* *******************************************************************\n//STEPTEST EXEC PGM=SMPEMINT,REGION=1024K\n//STEPLIB  DD DISP=SHR,DSN=XXXXXXX.LOAD\n//SMPOUTI  DD DISP=SHR,DSN=XXXXXXX.SMPOUTI.DATA\n//SMPRPTI  DD DISP=SHR,DSN=XXXXXXX.SMPRPTI.DATA\n//PTSDD    DD DISP=SHR,DSN=MVSSMPE.SMPPTS\n//SMPOUTO  DD SYSOUT=*,DCB=BLKSIZE=121\n//SMPRPTO  DD SYSOUT=*,DCB=BLKSIZE=121\n//REPORT   DD SYSOUT=*,DCB=BLKSIZE=121\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTALOC": {"ttr": 2323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x91\\x03\\x9f\\x00\\x91\\x07/\\x14\\x19\\x03\\xaa\\x02\\xef\\x01\\r\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1991-02-08T00:00:00", "modifydate": "1991-03-13T14:19:00", "lines": 938, "newlines": 751, "modlines": 269, "user": "SYSTAB"}, "text": "LISTALOC TITLE '** TSO LIST ALLOCATED DATASETS COMMAND ** '\n***********************************************************************\n*                                                                     *\n*    NAME - LISTALOC                                                  *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS ALL DATASETS THAT *\n*              ARE ALLOCATED TO THE SESSION.                          *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - LISTALOC REQUIRES A 3270 DISPLAY STATION WITH AT  *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nLISTALOC CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING EXTRAREA,R4             ESTABLISH ADDRESSABILITY\n         USING SCRNLINE,R7             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         BAL   R9,ALOCINFO             GO GET ALLOCATION INFO\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)\n*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE\n         CLC   MESSAGE+1(2),=XL2'5DC8' WHERE IT IS NORMALLY...\n         BE    DRCSRNMV                CURSOR DIDN'T MOVE\n*------> CODE ABOVE SHOULD BE A (BE) TO ACTIVATE SCREEN POSITIONING\n         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT\n         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN\n         CLC   ROW,=CL2'05'            LESS THAN ROW 5?\n         BL    DRCSRNMV                IGNORE REQUEST\n         CLC   ROW,=CL2'22'            MORE THAN ROW 22?\n         BH    DRCSRNMV                IGNORE REQUEST\n         PACK  WORKDBLW,ROW            PACK THE ROW\n         CVB   R6,WORKDBLW             MAKE IT HEX\n         BCTR  R6,0                    NORMALIZE LINE NUMBER\n         MH    R6,=H'80'               MULTIPLY LINE LENGTH\n         LA    R7,SC1LN01              GET ORIGIN\n         AR    R7,R6                   PTR TO START OF LINE\n         PACK  WORKDBLW,SCLINENO       MOVE LINENO FOUND FROM SCREEN\n         L     R4,EATBLFST             GET ORIGIN OF TABLE\n         L     R5,EATBLAST             GET END OF TABLE\nDRSRCH01 EQU   *\n         CR    R4,R5                   END-OF-TABLE?\n         BNL   DRCSRNMV                IGNORE REQUEST\n         CP    WORKDBLW,EALINENO       IS IT THIS ENTRY?\n         BE    DRSRCHFN                YES, GO TO FOUND\n         LA    R4,EXTRLNTH(R4)         BUMP\n         B     DRSRCH01                ITERATE\nDRSRCHFN EQU   *\n         ST    R4,EATBLNXT             SET NEW PTR\n         ST    R4,EATBLTOP             SET NEW PTR\nDRCSRNMV EQU   *\n         CLI   MESSAGE,C'7'            DID USER PRESS PF7?\n         BNE   DRNOTPB                 BYPASS PAGEBACK CODE\n         L     R4,EATBLTOP             PTR TO NEXT ENTRY\n         LA    R5,EXTRLNTH             GET LENGTH OF NODE\n         MH    R5,=H'17'               GO BACK 17 LINES\n         SR    R4,R5                   SUBTRACT 17 VOLUMES\n         C     R4,EATBLFST             GONE TOO FAR?\n         BNL   DRBYPTOO                OK, BYPASS RESET CODE\n         L     R4,EATBLFST             RESET\nDRBYPTOO EQU   *\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)\nDRNOTPB  EQU   *\n         B     DRLOOPMN                MAIN DRIVER LOOP\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE ISSUES SERIAL DYNALLOC MACROS TO GATHER THE INFO   *\n*   ABOUT ALLOCATED FILES/DATASETS UNTIL THE EOF INDICATOR IS REACHED *\n*   WHEREUPON WE EXIT AND LET THE FORMATER DO IT'S THING.             *\n***********************************************************************\n         SPACE 2\nALOCINFO DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'ALOCINFO'\nBSAVE20  EQU   *\n         SPACE 1\n         L     R0,=A(EXTRLNTH)         SET FOR NODE LENGTH\n         MH    R0,=AL2(300)            MAX NUMBER OF ALLOCATIONS\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R4,R1                   COPY ORIGIN ADDRESS\n         ST    R4,EATBLFST             STORE ORIGIN ADDRESS\n         ST    R4,EATBLNXT             INITIALLY FIRST ENTRY\n*------- ----- GO ISSUE DYNALLOC'S ONE AT A TIME UNTIL EOF REACHED\n         SLR   R3,R3                   CLEAR FOR COUNTER\nTOP      LA    R1,S99RBPTR             POINT TO REQUEST BLOCK\n         AP    LINECNT,=PL1'1'         BUMP LINE NUMBER\n         ZAP   EALINENO,LINECNT        COPY IT\n         MVC   DDNAME(10),FILLDDN\n         MVC   MEMBER(10),FILLDDN\n         MVC   DSNAME(46),FILLDSN\n         AH    R3,=H'1'                ADD FOR REQUEST NUMBER\n         STH   R3,RELNO                PUT IT IN TEXT UNIT\nSVC99    DYNALLOC                      GO DO IT\n         MVC   EADDN,DDNAME+2          MOVE DDNAME TO EAPUT LINE\n         MVC   EADSN,DSNAME+2          MOVE DSNAME\n         MVC   EAMEM,MEMBER+2          MOVE MEMBER NAME\n         MVC   EASTATUS,STATUS         MOVE STATUS INDICATOR\n         MVC   EANDISP,NDISP           MOVE NEW DISPOSITION\n         MVC   EACDISP,CDISP           MOVE CURRENT DISPOSITION\n         MVC   EADSTYPE,DSTYPE         MOVE DATASET TYPE\n         MVC   EADSORG,DSORG           MOVE DATASET ORGANIZATION\n*------- ----- BUMP TO NEXT ENTRY\n         TM    LASTENT,X'80'           WAS THIS LAST ENTRY\n         BO    AIEND                   YEP, TERMINATE\n         LA    R4,EXTRLNTH(R4)         BUMP TO NEXT ENTRY\n         B     TOP                     ITERATE\nAIEND    EQU   *\n         ST    R4,EATBLAST             STORE PTR TO END OF TABLE\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *\n*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *\n*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *\n***********************************************************************\n         SPACE 2\nFORMATER DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'FORMATER'\nBSAVE50  EQU   *\n         SPACE 1\n         L     R4,EATBLNXT             GET NEXT ADDRESS\n         ST    R4,EATBLTOP             SAVE CURRENT TOP\n         LA    R7,SC1LN05              GET ORIGIN IN SCREEN\n         LA    R8,18                   18 LINES OF DATA PER SCREEN\nFMTLOOP1 EQU   *\n         C     R4,EATBLAST             END OF EXTRACT TABLE?\n         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         MVC   SCLINENO-1(4),=XL4'40202120' INSERT EDIT MASK\n         ED    SCLINENO-1(4),EALINENO  EDIT IN THE LINE NUMBER\n         MVC   SCDDN,EADDN             MOVE THE DDNAME\n         MVC   SCDSN,EADSN             MOVE THE DSNAME\n         CLI   EADSTYPE,EADSTERM       ALLOCATED TO TERMINAL?\n         BNE   FMTNTERM                NO, BRANCH AROUND\n         MVC   SCDSN,=CL44'* '         INDICATE TERMINAL FILE\nFMTNTERM EQU   *\n         CLI   EAMEM,C' '              IS THE MEMBERNAME BLANK?\n         BE    FMTNOMEM                YES, GO DO NEXT FIELD\n         LA    R2,SCDSN                GET ORIGIN ADDRESS\n         LA    R3,34                   L'DSN - 10\nFMTDSNLP EQU   *\n         CLI   0(R2),C' '              FIRST BLANK YET?\n         BE    FMTDSNFN                YEP, GO PROCESS\n         LA    R2,1(R2)                BUMP\n         BCT   R3,FMTDSNLP             ITERATE\n         B     FMTNOMEM                DON'T BOTHER MOVING MEMBER\nFMTDSNFN EQU   *\n         MVI   0(R2),C'('              MOVE OPENING PAREN\n         MVI   9(R2),C')'              MOVE CLOSING PAREN\n         MVC   1(8,R2),EAMEM           MOVE MEMBERNAME NEXT TO DSN\nFMTNOMEM EQU   *\n*------- ----- DECIPHER THE DSORG\n         TM    EADSORG,EAORGPS\n         BZ    *+14\n         MVC   SCDSORG,=C'PS'\n         B     FMTSTAT\n         TM    EADSORG,EAORGPO\n         BZ    *+14\n         MVC   SCDSORG,=C'PO'\n         B     FMTSTAT\n         TM    EADSORG+1,EAORGVS\n         BZ    *+14\n         MVC   SCDSORG,=C'VS'\n         B     FMTSTAT\n         TM    EADSORG,EAORGDA\n         BZ    *+14\n         MVC   SCDSORG,=C'DA'\n         B     FMTSTAT\n         TM    EADSORG,EAORGIS\n         BZ    *+14\n         MVC   SCDSORG,=C'IS'\n         B     FMTSTAT\n         TM    EADSORG,EAORGCX\n         BZ    *+14\n         MVC   SCDSORG,=C'CX'\n         B     FMTSTAT\n         TM    EADSORG,EAORGCQ\n         BZ    *+14\n         MVC   SCDSORG,=C'CQ'\n         B     FMTSTAT\n         TM    EADSORG,EAORGMQ\n         BZ    *+14\n         MVC   SCDSORG,=C'MQ'\n         B     FMTSTAT\n         TM    EADSORG+1,EAORGGS\n         BZ    *+14\n         MVC   SCDSORG,=C'GS'\n         B     FMTSTAT\n         TM    EADSORG+1,EAORGTX\n         BZ    *+14\n         MVC   SCDSORG,=C'TX'\n         B     FMTSTAT\n         TM    EADSORG+1,EAORGTQ\n         BZ    *+14\n         MVC   SCDSORG,=C'TQ'\n         B     FMTSTAT\n         TM    EADSORG,EAORGTR\n         BZ    *+14\n         MVC   SCDSORG,=C'TR'\n         B     FMTSTAT\n         MVC   SCDSORG,=C'**'\nFMTSTAT  EQU   *\n*------- ----- DECIPHER THE INITIAL DISPOSITION\n         CLI   EASTATUS,EADSPSHR\n         BNE   *+14\n         MVC   SCSTATUS(3),=C'SHR'\n         B     FMDSPEND\n         CLI   EASTATUS,EADSPOLD\n         BNE   *+18\n         MVC   SCSTATUS(3),=C'OLD'\n         MVI   SCSTATUS+3,C','\n         B     FMTNDISP\n         CLI   EASTATUS,EADSPNEW\n         BNE   *+18\n         MVC   SCSTATUS(3),=C'NEW'\n         MVI   SCSTATUS+3,C','\n         B     FMTNDISP\n         CLI   EASTATUS,EADSPMOD\n         BNE   *+18\n         MVC   SCSTATUS(3),=C'MOD'\n         MVI   SCSTATUS+3,C','\n         B     FMTNDISP\n*------- ----- DECIPHER THE NORMAL DISPOSITION\nFMTNDISP EQU   *\n         CLI   EANDISP,EANDSPAS\n         BNE   *+18\n         MVC   SCNDISP(4),=C'PASS'\n         MVI   SCNDISP+4,C','\n         B     FMTCDISP\n         CLI   EANDISP,EANDSKEP\n         BNE   *+18\n         MVC   SCNDISP(4),=C'KEEP'\n         MVI   SCNDISP+4,C','\n         B     FMTCDISP\n         CLI   EANDISP,EANDSCAT\n         BNE   *+18\n         MVC   SCNDISP(4),=C'CTLG'\n         MVI   SCNDISP+4,C','\n         B     FMTCDISP\n         CLI   EANDISP,EANDSDEL\n         BNE   *+14\n         MVC   SCNDISP(4),=C'DLTE'\n         B     FMTCDISP\n         CLI   EANDISP,EANDSUNC\n         BNE   *+18\n         MVC   SCNDISP(4),=C'UNCT'\n         MVI   SCNDISP+4,C','\n         B     FMTCDISP\n*------- ----- DECIPHER THE CONDITIONAL DISPOSITION\nFMTCDISP EQU   *\n         CLI   EACDISP,EACDSPAS\n         BNE   *+14\n         MVC   SCCDISP(4),=C'PASS'\n         B     FMDSPEND\n         CLI   EACDISP,EACDSKEP\n         BNE   *+14\n         MVC   SCCDISP(4),=C'KEEP'\n         B     FMDSPEND\n         CLI   EACDISP,EACDSCAT\n         BNE   *+14\n         MVC   SCCDISP(4),=C'CTLG'\n         B     FMDSPEND\n         CLI   EACDISP,EACDSDEL\n         BNE   *+14\n         MVC   SCCDISP(4),=C'DLTE'\n         B     FMDSPEND\n         CLI   EACDISP,EACDSUNC\n         BNE   *+14\n         MVC   SCCDISP(4),=C'UNCT'\n         B     FMDSPEND\nFMDSPEND EQU   *\nFMTNEXT  EQU   *\n         LA    R7,80(R7)               BUMP TO NEXT SCREEN LINE\n         LA    R4,EXTRLNTH(R4)         BUMP TO NEXT ENTRY\n         BCT   R8,FMTLOOP1             ITERATE\n         LA    R1,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY\n         SR    R4,R1                   SUBTRACT ONE ENTRY\n         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR\nFMTCLEAR EQU   *\n         LTR   R8,R8                   RUN OUT OF LINES YET?\n         BZ    FMTEND                  YES, ENOUGH IS ENOUGH\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         LA    R7,80(R7)               BUMP TO NEXT LINE\n         BCT   R8,FMTCLEAR             ITERATE\nFMTEND   EQU   *\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE60  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         TGET  MESSAGE,126,ASIS        GET DUMMY INPUT\n         CLI   MESSAGE,C'3'            DID USER PRESS PF3?\n         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER\n         BE    FSREFRSH                RE-PAINT SCREEN\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT70                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *\n***********************************************************************\n         SPACE 2\nCALCADDR DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CALCADDR'\nBSAVE100 EQU   *\n         SPACE 1\n*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE\n         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN\n         SR    R8,R7                   GENERATE DISPLACEMENT\n         CVD   R8,WORKDBLW             CONVERT TO DECIMAL\n         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH\n         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE\n         UNPK  ROW,WORKDBLW+4(2)       UNPACK\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   STARTADR,BUFFADDR       STARTING ADDRESS\n         MVC   COLUMN,=CL2'26'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS\n         SPACE 1\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE510 EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *\n***********************************************************************\n         SPACE 2\nTUBETORC DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'TUBETORC'\nBSAVE520 EQU   *\n         SPACE 1\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  ROW,R327FLD1(2)         RETURN THE ROW\n         OI    ROW+1,X'F0'             CLEAR SIGN\n         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN\n         OI    COLUMN+1,X'F0'          CLEAR SIGN\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nEATBLFST DS    F                       POINTER TO BGN OF EXTRACT TABLE\nEATBLTOP DS    F                       POINTER TO TOP OF CURRENT SCREEN\nEATBLAST DS    F                       POINTER TO END OF EXTRACT TABLE\nEATBLPRV DS    F                       POINTER TO PREVIOUS SCREEN START\nEATBLNXT DS    F                       POINTER TO NEXT ENTRY TO SHOW\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL19'COMMAND INTERRUPTED'\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nLINECNT  DC    PL2'0'                  LINE NUMBER ON SCREEN\n         SPACE 1\nHEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nSTARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING\nENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+22)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+56)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> BACK-LIGHT THE TITLE LINE\n         DC    XL16'1140402903C0F841F442F311C14F1DE8'\n*--> REVERSE VIDEO THE TITLE BLOCKS\n         DC    XL16'11C2602903C0F841F242F111C36F1DE8'\n*--> LONG RANGE SENSORS\n*        DC    XL16'11C1D22903C0F8410042F511C1D61DE8'\n*--> STATISTICS\n*        DC    XL16'11D54A2903C0F8410042F411D54F1DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         EJECT\n***********************************************************************\n*  THE FOLLOWING IS THE DYNALLOC AREA                                 *\n***********************************************************************\n         SPACE 1\nFILLDDN  DC    H'8',CL8' '\nFILLDSN  DC    H'44',CL44' '\n         SPACE\n         DS    0F\nS99RBPTR DC    X'80',AL3(S99RB)\n         SPACE\nS99RB    DS    0F\nS99RBLN  DC    X'14'\nS99VERB  DC    X'07'\nS99FLAG1 DC    H'0'\nS99ERROR DC    X'0000'\nS99INFO  DC    X'0000'\nS99TXTPP DC    A(S99TUPL)\nS99RSVD  DC    F'0'\nS99FLAG2 DC    F'0'\n         SPACE\nS99TUPL  DS    0F\nS99TUP04 DC    A(S99TUN04)\nS99TUP05 DC    A(S99TUN05)\nS99TUP06 DC    A(S99TUN06)\nS99TUP07 DC    A(S99TUN07)\nS99TUP08 DC    A(S99TUN08)\nS99TUP09 DC    A(S99TUN09)\nS99TUP10 DC    A(S99TUN10)\nS99TUP12 DC    A(S99TUN12)\nS99TUP13 DC    A(S99TUN13)\nS99TUP14 DC    A(S99TUN14)\nS99TUP15 DC    X'80',AL3(S99TUN15)\n         SPACE\nS99TUN04 DC    H'4',H'1'\nDDNAME   DC    H'8',CL8' '\nS99TUN05 DC    H'5',H'1'\nDSNAME   DC    H'44',CL44' '\nS99TUN06 DC    H'6',H'1'\nMEMBER   DC    H'8',CL8' '\nS99TUN07 DC    H'7',H'1',H'1'\nSTATUS   DC    X'00'\nS99TUN08 DC    H'8',H'1',H'1'\nNDISP    DC    X'00'\nS99TUN09 DC    H'9',H'1',H'1'\nCDISP    DC    X'00'\nS99TUN10 DC    H'10',H'1',H'2'\nDSORG    DC    X'0000'\nS99TUN12 DC    H'12',H'1',H'1'\nATRIBUTE DC    X'00'\nS99TUN13 DC    H'13',H'1',H'1'\nLASTENT  DC    X'00'\nS99TUN14 DC    H'14',H'1',H'1'\nDSTYPE   DC    X'00'\nS99TUN15 DC    H'15',H'1',H'2'\nRELNO    DC    H'0'\n         EJECT\n***********************************************************************\n*  THIS IS THE MAIN SCREEN                                            *\n***********************************************************************\n         SPACE 1\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                  T S O   A L L O C A T '\n         DC    CL40'I O N    D I S P L A Y                  '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40' NUM  DDNAME   ORG  DATASET NAME        '\n         DC    CL40'                          DSP,NORM,COND '\nSC1LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' --------------------   PF3=END  PF7=BAC'\n         DC    CL40'K  PF8=FORWARD   ---------------------- '\nSC1SUFIX DC    XL4'115DC813'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nEXTRAREA DSECT\nEALINENO DS    PL2                     LINE NUMBER (GENERATED)\nEADDN    DS    CL8                     DDNAME\nEADSN    DS    CL44                    DSNAME\nEAMEM    DS    CL8                     MEMBER\nEASTATUS DS    XL1                     STATUS\nEADSPSHR EQU   X'08'                     HELD SHR\nEADSPOLD EQU   X'01'                     HELD OLD\nEADSPNEW EQU   X'04'                     HELD NEW\nEADSPMOD EQU   X'02'                     HELD MOD\nEANDISP  DS    XL1                     NEW DISPOSITION\nEANDSPAS EQU   X'10'                     HOLD PASS\nEANDSKEP EQU   X'08'                     HOLD KEEP\nEANDSCAT EQU   X'02'                     HOLD CATLG\nEANDSDEL EQU   X'04'                     HOLD DELETE\nEANDSUNC EQU   X'01'                     HOLD UNCATLG\nEACDISP  DS    XL1                     CONDITIONAL DISPOSITION\nEACDSPAS EQU   X'10'                     HOLD PASS\nEACDSKEP EQU   X'08'                     HOLD KEEP\nEACDSCAT EQU   X'02'                     HOLD CATLG\nEACDSDEL EQU   X'04'                     HOLD DELETE\nEACDSUNC EQU   X'01'                     HOLD UNCATLG\nEADSTYPE DS    XL1                     DATASET TYPE\nEANORMAL EQU   X'00'                     NORMAL DATASET\nEADSTERM EQU   X'40'                     ALLOCATED TO TERMINAL\nEADSORG  DS    XL2                     DSORG\nEAORGPS  EQU   X'40'                     PS\nEAORGPO  EQU   X'02'                     PO\nEAORGVS  EQU   X'08'  +1                 VSAM\nEAORGDA  EQU   X'20'                     DA\nEAORGIS  EQU   X'80'                     IS\nEAORGCX  EQU   X'10'                     CX\nEAORGCQ  EQU   X'08'                     CQ\nEAORGMQ  EQU   X'04'                     MQ\nEAORGGS  EQU   X'80'  +1                 GS\nEAORGTX  EQU   X'40'  +1                 TX\nEAORGTQ  EQU   X'20'  +1                 TQ\nEAORGTR  EQU   X'04'                     TR\nEXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY\n         SPACE 2\nSCRNLINE DSECT\n         DS    CL1\nSCLINENO DS    CL3                     DDNAME\n         DS    CL2\nSCDDN    DS    CL8                     DDNAME\n         DS    CL2\nSCDSORG  DS    CL2                     DSORG\n         DS    CL2\nSCDSN    DS    CL44                    DSNAME\n         DS    CL2\nSCSTATUS DS    CL4                     INITIAL DISPOSITION\nSCNDISP  DS    CL5                     NORMAL  DISPOSITION\nSCCDISP  DS    CL4                     COND    DISPOSITION\n         SPACE 2\n         PRINT ON,GEN,NODATA\n         END   LISTALOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTLEV": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00\\x00\\x00\\x91\\x06O\\x00\\x91\\x07O\\x115\\x04B\\x02\\xeb\\x01v\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "1991-03-05T00:00:00", "modifydate": "1991-03-15T11:35:00", "lines": 1090, "newlines": 747, "modlines": 374, "user": "SYSTAB"}, "text": "LISTLEV TITLE '** TSO LIST DATASETS BY LEVEL COMMAND ** '\n***********************************************************************\n*                                                                     *\n*    NAME - LISTLEV                                                   *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS ALL DATASETS THAT *\n*              ARE CATALOGED WITHIN A GIVEN LEVEL (2ND LEVEL GENERIC) *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - LISTLEV REQUIRES A 3270 DISPLAY STATION WITH AT   *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nLISTLEV CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING EXTRAREA,R4             ESTABLISH ADDRESSABILITY\n         USING SCRNLINE,R7             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         BAL   R9,PARSEINP             PARSE INPUT COMMAND\n         BAL   R9,LEVINFO              GO GET LISTC LEVEL() INFO\n         BAL   R9,DEVINFO              BUILD VOLUME INFO\n         BAL   R9,DSNINFO              BUILD DATASET INFO\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)\n*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE\n         CLC   MESSAGE+1(2),=XL2'5DC8' WHERE IT IS NORMALLY...\n         BE    DRCSRNMV                CURSOR DIDN'T MOVE\n*------> CODE ABOVE SHOULD BE A (BE) TO ACTIVATE SCREEN POSITIONING\n         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT\n         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN\n         CLC   ROW,=CL2'05'            LESS THAN ROW 5?\n         BL    DRCSRNMV                IGNORE REQUEST\n         CLC   ROW,=CL2'22'            MORE THAN ROW 22?\n         BH    DRCSRNMV                IGNORE REQUEST\n         PACK  WORKDBLW,ROW            PACK THE ROW\n         CVB   R6,WORKDBLW             MAKE IT HEX\n         BCTR  R6,0                    NORMALIZE LINE NUMBER\n         MH    R6,=H'80'               MULTIPLY LINE LENGTH\n         LA    R7,SC1LN01              GET ORIGIN\n         AR    R7,R6                   PTR TO START OF LINE\n         PACK  WORKDBLW,SCLINENO       MOVE LINENO FOUND FROM SCREEN\n         L     R4,EATBLFST             GET ORIGIN OF TABLE\n         L     R5,EATBLAST             GET END OF TABLE\nDRSRCH01 EQU   *\n         CR    R4,R5                   END-OF-TABLE?\n         BNL   DRCSRNMV                IGNORE REQUEST\n         CP    WORKDBLW,EALINENO       IS IT THIS ENTRY?\n         BE    DRSRCHFN                YES, GO TO FOUND\n         LA    R4,EXTRLNTH(R4)         BUMP\n         B     DRSRCH01                ITERATE\nDRSRCHFN EQU   *\n         ST    R4,EATBLNXT             SET NEW PTR\n         ST    R4,EATBLTOP             SET NEW PTR\nDRCSRNMV EQU   *\n         CLI   MESSAGE,C'7'            DID USER PRESS PF7?\n         BNE   DRNOTPB                 BYPASS PAGEBACK CODE\n         L     R4,EATBLTOP             PTR TO NEXT ENTRY\n         LA    R5,EXTRLNTH             GET LENGTH OF NODE\n         MH    R5,=H'17'               GO BACK 17 LINES\n         SR    R4,R5                   SUBTRACT 17 VOLUMES\n         C     R4,EATBLFST             GONE TOO FAR?\n         BNL   DRBYPTOO                OK, BYPASS RESET CODE\n         L     R4,EATBLFST             RESET\nDRBYPTOO EQU   *\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)\nDRNOTPB  EQU   *\n         B     DRLOOPMN                MAIN DRIVER LOOP\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE PARSES THE COMMAND INPUT                             *\n***********************************************************************\n         SPACE 2\nPARSEINP DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'PARSEINP'\nBSAVE15  EQU   *\n         SPACE 1\n*--> GET THE INPUT PARAMETERS\n         L     R2,CPPLCBUF             GET CBUF PTR\n         LH    R3,0(R2)                GET LENGTH\n         CH    R3,=H'13'               IS IT AT LEAST 13?\n         BL    GETLEVEL                NO, GO ASK FOR IT\n         LA    R3,7(R2)                EARLIEST POINT TO START LOOKING\n         LH    R5,0(R2)                COPY LENGTH\n         SH    R5,=H'8'                PREFIX + 1 FOR EX\n         EX    R5,PIEXOC               RAISE TO UPPER-CASE\nPIEXOC   OC    0(0,R3),=CL50' '        RAISE TO UPPER-CASE\n         LH    R4,0(R2)                PICK UP COMPLETE LENGTH\n         SH    R4,=H'7'                KNOCK OFF PREFIX\nPIFNDFLD EQU   *\n         CLC   0(4,R3),=CL4'LEV('      FIND THE LEVEL QUALIFIER\n         BE    PIFOUNDL                FOUND, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDFLD             ITERATE\n         B     GETLEVEL                GO ASK FOR INFORMATION\nPIFOUNDL EQU   *\n         LA    R3,4(R3)                BUMP TO START OF LEVEL\n         SH    R4,=H'4'                SUBTRACT FOR PREFIX\n         LR    R5,R3                   SAVE LEVEL START ADDRESS\nPIFNDPR1 EQU   *\n         CLI   0(R3),C'.'              REACHED A DELIMITER?\n         BE    PIPR1FND                YEP, GO PROCESS\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR1FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR1             ITERATE\n         B     GETLEVEL                GO ASK FOR INFORMATION\nPIPR1FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF LEVELNAME\n         STH   R6,LEVLNTH              STORE LENGTH OF PRIMARY LEVEL\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXMVC1             MOVE THE LEVEL\nPIEXMVC1 MVC   LEVEL(1),0(R5)          MOVE THE LEVEL\n         OC    LEVEL,=CL50' '          CHANGE IT TO UPPER CASE\n         CLI   0(R3),C'.'              WAS IT A DELIMITER\n         BNE   EXIT15                  YES, DONE, EXIT...\n*------- ----- USER HAS SPECIFIED A SECONDARY LEVEL\n         LA    R3,1(R3)                BUMP PAST PERIOD\n         LR    R5,R3                   COPY START ADDR OF SECLEVEL\n         BCTR  R4,0                    BUMP PAST PERIOD\nPIFNDPR2 EQU   *\n         CLI   0(R3),C'.'              REACHED A DELIMITER?\n         BE    PIPR2FND                YEP, GO PROCESS\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR2FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR2             ITERATE\n         B     EXIT15                  RUNOUT, GO WITH THE PRIMARY\nPIPR2FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF LEVELNAME\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXMVC2             MOVE THE LEVEL\nPIEXMVC2 MVC   SECLEV(1),0(R5)         MOVE THE LEVEL\n         STH   R6,SECLNTH              STORE THE LENGTH\n         OC    SECLEV,=CL50' '         CHANGE IT TO UPPER CASE\n         B     EXIT15                  YES, DONE, EXIT...\n*------- ----- NOT SUCCESSFUL THUS FAR, ASK USER FOR LEVEL INFO\nGETLEVEL EQU   *\n         TPUT  MSG5,L'MSG5             ASK FOR THE LEVEL\n         TGET  LEVEL,44                READ IT\n         LTR   R1,R1                   IS IT ZERO?\n         BZ    GETLEVEL                YES, GO ASK FOR IT AGAIN\n         CH    R1,=H'44'               IS IT TOO BIG?\n         BH    GETLEVEL                YES, GO ASK FOR IT AGAIN\nBYPTGETS EQU   *\n         OC    LEVEL,=CL50' '          CHANGE IT TO UPPER CASE\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE LINKS TO THE IKJEHCIR ROUTINE TO REQUEST A LIST OF *\n*   ALL DATASETS THAT CORRESPOND TO THE LEVEL REQUESTED BY THE USER,  *\n*   WHEREUPON WE EXIT AND LET THE FORMATER DO IT'S THING.             *\n***********************************************************************\n         SPACE 2\nLEVINFO  DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'LEVINFO '\nBSAVE20  EQU   *\n         SPACE 1\n         L     R0,=A(EXTRLNTH)         SET FOR NODE LENGTH\n         MH    R0,=AL2(300)            MAX NUMBER OF DATASETS\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R4,R1                   COPY ORIGIN ADDRESS\n         ST    R4,EATBLFST             STORE ORIGIN ADDRESS\n         ST    R4,EATBLNXT             INITIALLY FIRST ENTRY\n*------- ----- SET UP FOR THE IKJEHCIR ROUTINE\n         XC    CIROPT,CIROPT        INITIALIZE PARM LIST\n         LH    R0,=H'28672'            SET FOR REQUEST LENGTH\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         ST    R1,CIRWA                SAVE PTR TO STORAGE FOUND\n         LR    R2,R1                   COPY PTR\n         LH    R1,=H'28672'\n         STH   R1,0(R2)             LENGTH OF WORKAREA IN WKAREA\n         LA    R8,LEVEL             GET PTR TO LEVEL\n         ST    R8,CIRSRCH           POINT TO LEVEL\n         LA    R8,SAVEAREA          GET ADDRESS OF SAVE AREA\n         ST    R8,CIRSAVE           AND PUT IT IN PARM LIST\n         MVI   CIROPT,X'02'         OPTION FOR SUPER LOCATE\n         LA    R1,CIROPT            POINT TO PARAMETER LIST\n         LINK  EP=IKJEHCIR\n         B     *+4(R15)\n         B     GOTCONT\n         B     NOGOOD\nGOTCONT  EQU   *\n         CLI   CIRLOCR,X'00'       DID WE GET A GOOD LIST?\n         BE    DILOOP00\nNOGOOD   EQU   *\n         TPUT  MSG2,L'MSG2             COMPLAIN ABOUT THE LEVEL\n         B     EXIT10                  BRANCH TO DRIVER'S EXIT\nDILOOP00 EQU   *\n         L     R1,CIRWA                GET PTR TO WORKAREA\n         LH    R2,2(R1)                GET RESIDUAL BYTE COUNT\n         LA    R1,4(R1)                BUMP PAST LENGTH FIELDS\nDILOOP01 EQU   *\n         LTR   R2,R2                   SHOT PAST END YET?\n         BL    AIEND                   YES, STORE END PTR\n         CLI   0(R1),X'FF'             LAST ENTRY?\n         BE    AIEND                   YES, STORE END PTR\n         CLI   SECLEV,C' '             WAS A SECONDARY SPECIFIED?\n         BE    NOSECLV                 NO SECONDARY, BYPASS\n         LA    R3,1(R1)                POINT PAST ID FIELD\n         AH    R3,LEVLNTH              ADD LENGTH OF PRIMARY\n         LA    R3,1(R3)                BUMP PAST PERIOD\n         LH    R5,SECLNTH              GET LENGTH OF SECONDARY ARG\n         EX    R5,DISECEX              EXECUTE CLC\n         BE    NOSECLV                 EQUAL, ACCEPT\n         B     NEXTENT                 NO, BYPASS\nDISECEX  CLC   0(1,R3),SECLEV          COMPARE TO SECONDARY\nNOSECLV  EQU   *\n         MVC   EADSN,1(R1)             MOVE DSN\n         MVC   EAENTYPE,0(R1)          MOVE ENTRY TYPE, A=DSN\n         AP    LINECNT,=PL1'1'         BUMP LINE NUMBER\n         ZAP   EALINENO,LINECNT        COPY IT\n         LA    R4,EXTRLNTH(R4)         BUMP TO NEXT ENTRY\nNEXTENT  EQU   *\n         LA    R1,45(R1)               BUMP TO NEXT ENTRY\n         SH    R2,=H'45'               SUBTRACT FROM RESIDUAL BYTE CNT\n         B     DILOOP01                ITERATE\nAIEND    EQU   *\n         ST    R4,EATBLAST             STORE PTR TO END OF TABLE\n         LH    R0,=H'28672'            SET FOR REQUEST LENGTH\n         L     R8,CIRWA                GET PTR TO MEMORY\n         FREEMAIN R,LV=(R0),A=(R8)     FREE THE MEMORY\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE USES THE DSNAME LIST BUILT PREVIOUSLY AND ADDS       *\n*   VOLUME INFORMATION TO IT.                                         *\n***********************************************************************\n         SPACE 2\nDEVINFO  DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'DEVINFO '\nBSAVE30  EQU   *\n         SPACE 1\n         L     R4,EATBLFST             GET ADDRESS OF FIRST ENTRY\n         L     R3,EATBLAST                            LAST\nDVLOOP01 EQU   *\n         CR    R4,R3                   LAST ENTRY YET?\n         BNL   EXIT30                  YEP, EXIT\n         MVC   DSN,EADSN               MOVE DSNAME\n         XC    VOLIST+000(100),VOLIST  CLEAR THE VOLUME LIST AREA\n         XC    VOLIST+101(165),VOLIST+101\n         LOCATE LOCLIST            ISSUE LOCATE MACRO\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    DVOKINCT            IF OK, BYPASS\n         MVC   EAVOLSER,=CL6'?'    MOVE NOT FOUND INDICATOR\n         B     DVLOOP02            GO TRY NEXT ENTRY\nDVOKINCT EQU   *\n         MVC   EADEVTYP,VOLIST+4   MOVE FIRST VOLSER DEVICE TYPE\n         MVC   EAVOLSER,VOLIST+6   MOVE FIRST VOLSER\n         LA    R2,DEVTABLE\nFDEVICE1 EQU   *\n         CLC   0(2,R2),=X'0000'    END OF TABLE?\n         BE    DVLOOP02                YES, ABANDON\n         CLC   0(2,R2),EADEVTYP    IF SAME DEVICE CODE....\n         BE    FDEVICE2\n         LA    R2,10(R2)           BUMP TO NEXT ENTRY\n         B     FDEVICE1\nFDEVICE2 EQU   *\n         MVC   EAUNITYP,4(R2)      MOVE DEVICE NAME\n         MVC   EATRKCYL,2(R2)      MOVE TRK/CYL\nDVLOOP02 EQU   *\n         LA    R4,EXTRLNTH(R4)     BUMP\n         B     DVLOOP01            ITERATE\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE USES THE DSNAME LIST BUILT PREVIOUSLY AND ADDS       *\n*   DATASET INFORMATION TO IT USING THE DSCB1 / DSCB3 FROM THE VTOC.  *\n***********************************************************************\n         SPACE 2\nDSNINFO  DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'DSNINFO '\nBSAVE40  EQU   *\n         SPACE 1\n         L     R4,EATBLFST             GET ADDRESS OF FIRST ENTRY\n         L     R3,EATBLAST                            LAST\nDSLOOP01 EQU   *\n         CR    R4,R3                   LAST ENTRY YET?\n         BNL   EXIT40                  YEP, EXIT\n         MVC   DSN,EADSN               MOVE DSNAME\n         XC    DSCB1LST,DSCB1LST       CLEAR THE VOLUME LIST AREA\n         MVC   VOLSER,EAVOLSER         MOVE VOLSER INTO POSITION\n         OBTAIN OBLIST1            GET DSCB1\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    DSOK                IF OK, BYPASS\n         MVC   EADSORG,=CL2'?'     MOVE NOT FOUND INDICATOR\n         B     DSLOOP02            GO TRY NEXT ENTRY\nDSOK     EQU   *\n         TM    DSCB1LST+38,X'80'   IS DSORG=IS?\n         BNO   D1NOTIS\n         MVC   EADSORG,=CL2'IS'\n         B     D1TESTRF\nD1NOTIS  EQU   *\n         TM    DSCB1LST+38,X'40'   IS DSORG=PS?\n         BNO   D1NOTPS\n         MVC   EADSORG,=CL2'PS'\n         B     D1TESTRF\nD1NOTPS  EQU   *\n         TM    DSCB1LST+38,X'20'   IS DSORG=DA?\n         BNO   D1NOTDA\n         MVC   EADSORG,=CL2'DA'\n         B     D1TESTRF\nD1NOTDA  EQU   *\n         TM    DSCB1LST+38,X'02'   IS DSORG=PO?\n         BNO   D1TESTRF\n         MVC   EADSORG,=CL2'PO'\nD1TESTRF EQU   *\n         TM    DSCB1LST+38,X'01'   IS DSORG=U?\n         BNO   D1NOTU\n         MVC   EADSORG,=CL2'U '\nD1NOTU   EQU   *\n*--> GET THE LRECL\n         LH    R8,DSCB1LST+44      GET LRECL\n         STH   R8,EALRECL\n*--> GET THE BLKSIZE\n         LH    R8,DSCB1LST+42      GET BLKSIZE\n         STH   R8,EABLKSIZ\n*--> GET THE KEYLEN\n         MVC   EAKEYLEN,DSCB1LST+46    KEYLEN\n*--> GET THE RKP\n         MVC   WORKDBLW(2),DSCB1LST+47 OFFSET\n         LH    R8,WORKDBLW\n         STH   R8,EARKPOFF\n*--> GET THE RECFM\n         LA    R8,EARECFM          POINT TO STORAGE ADDRESS\n         TM    DSCB1LST+40,X'C0'   TEST FOR UNKNOWN RECFM\n         BZ    RFT\n         TM    DSCB1LST+40,X'40'   TEST FOR F RECFM\n         BNZ   RFUORV\n         MVI   0(R8),C'F'\n         LA    R8,1(R8)            BUMP TO NEXT CHAR\n         B     RFT\nRFUORV   EQU   *\n         TM    DSCB1LST+40,X'80'\n         BZ    RFV\n         MVI   0(R8),C'U'          OTHERWISE UNDEFINED\n         LA    R8,1(R8)\n         B     RFT\nRFV      EQU   *\n         MVI   0(R8),C'V'\n         LA    R8,1(R8)\nRFT      EQU   *\n         TM    DSCB1LST+40,X'20'   TEST FOR T RECFM\n         BZ    RFB\n         MVI   0(R8),C'T'\n         LA    R8,1(R8)\nRFB      EQU   *\n         TM    DSCB1LST+40,X'10'   TEST FOR B RECFM\n         BZ    RFS\n         MVI   0(R8),C'B'\n         LA    R8,1(R8)\nRFS      EQU   *\n         TM    DSCB1LST+40,X'08'   TEST FOR S RECFM\n         BZ    RFA\n         MVI   0(R8),C'S'\n         LA    R8,1(R8)\nRFA      EQU   *\n         TM    DSCB1LST+40,X'04'   TEST FOR A RECFM\n         BZ    RFM\n         MVI   0(R8),C'A'\n         LA    R8,1(R8)\nRFM      EQU   *\n         TM    DSCB1LST+40,X'02'   TEST FOR M RECFM\n         BZ    RFEND\n         MVI   0(R8),C'M'\n         LA    R8,1(R8)\nRFEND    EQU   *\nDSLOOP02 EQU   *\n         LA    R4,EXTRLNTH(R4)     BUMP\n         B     DSLOOP01            ITERATE\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *\n*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *\n*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *\n***********************************************************************\n         SPACE 2\nFORMATER DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'FORMATER'\nBSAVE50  EQU   *\n         SPACE 1\n         L     R4,EATBLNXT             GET NEXT ADDRESS\n         ST    R4,EATBLTOP             SAVE CURRENT TOP\n         LA    R7,SC1LN05              GET ORIGIN IN SCREEN\n         LA    R8,18                   18 LINES OF DATA PER SCREEN\nFMTLOOP1 EQU   *\n         C     R4,EATBLAST             END OF EXTRACT TABLE?\n         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         MVC   SCLINENO-1(4),=XL4'40202120' INSERT EDIT MASK\n         ED    SCLINENO-1(4),EALINENO  EDIT IN THE LINE NUMBER\n         MVC   SCDSN,EADSN             MOVE THE DSNAME\n         CLI   EADSN+L'SCDSN,C' '      TRUNCATION OCCURRED?\n         BE    FMTNTRNC                NOPE, BYPASS\n         MVI   SCDSN+(L'SCDSN-1),C'>'  INDICATE TRUNCATION\nFMTNTRNC EQU   *\n         MVC   SCVOLSER,EAVOLSER       MOVE THE VOLSER\n         MVC   SCUNITYP,EAUNITYP       MOVE THE UNIT NAME\n         MVC   SCDSORG,EADSORG         MOVE THE DSORG\n         MVC   SCRECFM,EARECFM         MOVE THE RECFM\n*--> FMT THE LRECL\n         LH    R1,EALRECL          GET LRECL\n         CVD   R1,WORKDBLW\n         MVC   SCLRECL,=XL7'4020206B202120'\n         ED    SCLRECL,WORKDBLW+5\n*--> FMT THE BLKSIZE\n         LH    R1,EABLKSIZ         GET BLKSIZE\n         CVD   R1,WORKDBLW\n         MVC   SCBLKSIZ,=XL7'4020206B202120'\n         ED    SCBLKSIZ,WORKDBLW+5\nFMTNEXT  EQU   *\n         LA    R7,80(R7)               BUMP TO NEXT SCREEN LINE\n         LA    R4,EXTRLNTH(R4)         BUMP TO NEXT ENTRY\n         BCT   R8,FMTLOOP1             ITERATE\n         LA    R1,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY\n         SR    R4,R1                   SUBTRACT ONE ENTRY\n         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR\nFMTCLEAR EQU   *\n         LTR   R8,R8                   RUN OUT OF LINES YET?\n         BZ    FMTEND                  YES, ENOUGH IS ENOUGH\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         LA    R7,80(R7)               BUMP TO NEXT LINE\n         BCT   R8,FMTCLEAR             ITERATE\nFMTEND   EQU   *\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE60  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         TGET  MESSAGE,126,ASIS        GET DUMMY INPUT\n         CLI   MESSAGE,C'3'            DID USER PRESS PF3?\n         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER\n         BE    FSREFRSH                RE-PAINT SCREEN\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT70                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *\n***********************************************************************\n         SPACE 2\nCALCADDR DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CALCADDR'\nBSAVE100 EQU   *\n         SPACE 1\n*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE\n         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN\n         SR    R8,R7                   GENERATE DISPLACEMENT\n         CVD   R8,WORKDBLW             CONVERT TO DECIMAL\n         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH\n         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE\n         UNPK  ROW,WORKDBLW+4(2)       UNPACK\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   STARTADR,BUFFADDR       STARTING ADDRESS\n         MVC   COLUMN,=CL2'26'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS\n         SPACE 1\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE510 EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *\n***********************************************************************\n         SPACE 2\nTUBETORC DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'TUBETORC'\nBSAVE520 EQU   *\n         SPACE 1\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  ROW,R327FLD1(2)         RETURN THE ROW\n         OI    ROW+1,X'F0'             CLEAR SIGN\n         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN\n         OI    COLUMN+1,X'F0'          CLEAR SIGN\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nEATBLFST DS    F                       POINTER TO BGN OF EXTRACT TABLE\nEATBLTOP DS    F                       POINTER TO TOP OF CURRENT SCREEN\nEATBLAST DS    F                       POINTER TO END OF EXTRACT TABLE\nEATBLPRV DS    F                       POINTER TO PREVIOUS SCREEN START\nEATBLNXT DS    F                       POINTER TO NEXT ENTRY TO SHOW\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG2     DC    CL26'LEVEL REQUESTED NOT FOUND'\nMSG5     DC    CL36'PLEASE ENTER THE LISTC LEVEL NEEDED'\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL19'COMMAND INTERRUPTED'\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nLINECNT  DC    PL2'0'                  LINE NUMBER ON SCREEN\n         SPACE 1\nHEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR THE SUPER LOCATE ROUTINE (IKJHECIR)             *\n***********************************************************************\n         SPACE 1\nLEVEL    DC    CL44' '                 LEVEL REQUESTED BY USER\nSECLEV   DC    CL44' '                 SECONDARY LEVEL REQUESTED\nLEVLNTH  DC    H'0'                    PRIMARY LEVEL LENGTH\nSECLNTH  DC    H'0'                    SECONDARY LEVEL LENGTH\n         DS    0F\nCIRPARM  DS    0CL24\nCIROPT   DS    C          OPTION CODE 2\n         DS    CL2\nCIRLOCR  DS    C          RETURN CODE FROM IKJHECIR\nCIRSRCH  DS    A          POINTER TO LEVEL NAME\nCIRCVOL  DS    A          POINTER TO USER CATALOG\nCIRWA    DS    A          POINTER TO WORK AREA\nCIRSAVE  DS    A          POINTER TO SAVE AREA\nCIRPSWD  DS    A          POINTER TO DS PASSWORD\n         SPACE 2\n***********************************************************************\n*      WORK AREAS FOR THE LOCATE ROUTINE                              *\n***********************************************************************\n         SPACE 1\n*--------CATALOG SEARCH MACRO\n         DS    0D\nDSN      DS    CL44\nLOCLIST  CAMLST NAME,DSN,,VOLIST\n         DS    0D\nVOLIST   DS    256C\n         DS    CL16 PROTECT\n*--------VTOC DSCB 1 OBTAIN MACRO (HEADER DSCB)\nVOLSER   DS    CL6\nOBLIST1  CAMLST SEARCH,DSN,VOLSER,DSCB1LST\n         DS    0D\nDSCB1LST DS    CL148\n*--------VTOC DSCB 2 OBTAIN MACRO (ISAM DSCB)\nOBLIST2  CAMLST SEEK,DSCB1LST+91,VOLIST+6,DSCB2LST\n         DS    0D\nDSCB2LST DS    CL148\n*--------VTOC DSCB 3 OBTAIN MACRO (EXTENSION DSCB)\nOBLIST3  CAMLST SEEK,DSCB1LST+91,VOLIST+6,DSCB3LST\n         DS    0D\nDSCB3LST DS    CL148\n         DS    CL16 PROTECT THE DEVTABLE\n         EJECT\n***********************************************************************\n*               D E V I C E   N A M E   T A B L E                     *\n***********************************************************************\n         SPACE 1\nDEVTABLE EQU   *\n         DC    X'2006'\n         DC    X'0008'\n         DC    CL6'2305-1'\n         DC    X'2007'\n         DC    X'0008'\n         DC    CL6'2305-2'\n         DC    X'2009'\n         DC    X'0013'\n         DC    CL6'3330  '\n         DC    X'200D'\n         DC    X'0013'\n         DC    CL6'3330-1'\n         DC    X'200B'\n         DC    X'001E'\n         DC    CL6'3350  '\n         DC    X'200E'\n         DC    X'000F'\n         DC    CL6'3380  '\n         DC    X'0000'         ** MARKS END OF DEVICE TABLE **\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nSTARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING\nENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+22)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+56)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> BACK-LIGHT THE TITLE LINE\n         DC    XL16'1140402903C0F841F442F311C14F1DE8'\n*--> REVERSE VIDEO THE TITLE BLOCKS\n         DC    XL16'11C2602903C0F841F242F111C36F1DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         EJECT\n         SPACE 2\n***********************************************************************\n*  THIS IS THE MAIN SCREEN                                            *\n***********************************************************************\n         SPACE 1\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                T S O   L I S T C A T   '\n         DC    CL40'L E V E L   D I S P L A Y               '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40' NUM  DATASET NAME                    VO'\n         DC    CL40'LSER  DVTYP  ORG  RECFM  LRECL  BLKSIZE '\nSC1LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' --------------------   PF3=END  PF7=BAC'\n         DC    CL40'K  PF8=FORWARD   ---------------------- '\nSC1SUFIX DC    XL4'115DC813'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nEXTRAREA DSECT\nEALINENO DS    PL2                     LINE NUMBER (GENERATED)\nEADSN    DS    CL44                    DSNAME\nEAVOLSER DS    CL6                     VOLSER\nEADEVTYP DS    CL2                     DEVICE TYPE\nEAUNITYP DS    CL6                     DEVICE TYPE (CHARACTER)\nEATRKCYL DS    CL2                     TRACKS PER CYLINDER\nEADSORG  DS    CL2                     DSORG\nEALRECL  DS    CL2                     LRECL\nEABLKSIZ DS    CL2                     BLKSIZE\nEARKPOFF DS    CL2                     RKP (OFFSET)\nEARECFM  DS    CL4                     RECFM\nEAENTYPE DS    CL1                     ENTRY TYPE\nEAKEYLEN DS    CL1                     KEYLEN\nEXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY\n         SPACE 2\nSCRNLINE DSECT\n         DS    CL1\nSCLINENO DS    CL3                     LINE NUMBER\n         DS    CL2\nSCDSN    DS    CL30                    DSNAME\n         DS    CL2\nSCVOLSER DS    CL6                     VOLSER\n         DS    CL2\nSCUNITYP DS    CL6                     DEVICE TYPE\n         DS    CL2\nSCDSORG  DS    CL2                     DATASET ORGANIZATION\n         DS    CL2\nSCRECFM  DS    CL4                     RECORD FORMAT\n         DS    CL1\nSCLRECL  DS    CL7                     LRECL\n         DS    CL1\nSCBLKSIZ DS    CL7                     BLKSIZE\n         SPACE 2\n         END   LISTLEV\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTVTOC": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x00\\x00\\x00\\x91\\x07/\\x00\\x91\\x07O\\x15R\\x04\\xad\\x039\\x01\\xa6\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "1991-03-13T00:00:00", "modifydate": "1991-03-15T15:52:00", "lines": 1197, "newlines": 825, "modlines": 422, "user": "SYSTAB"}, "text": "LISTVTOC TITLE '** TSO LIST VTOC COMMAND ** '\n***********************************************************************\n*                                                                     *\n*    NAME - LISTVTOC                                                  *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS ALL DATASETS THAT *\n*              ARE LISTED IN A PARTICULAR VTOC.                       *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - LISTVTOC REQUIRES A 3270 DISPLAY STATION WITH AT  *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nLISTVTOC CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING EXTRAREA,R4             ESTABLISH ADDRESSABILITY\n         USING SCRNLINE,R7             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         BAL   R9,PARSEINP             PARSE INPUT COMMAND\n         MVC   SC1VOLSR,VOLSER         COPY VOLSER & DEVTYP\n         BAL   R9,GETDSCB4             GET FORMAT4 DSCB\n         BAL   R9,DEVTYPER             FIGURE OUT DEVICE TYPE\n         BAL   R9,GETDSCB1             READ THE VTOC\n         BAL   R9,SORT                 SORT THE ENTRIES\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)\n*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE\n         CLC   MESSAGE+1(2),=XL2'5DC8' WHERE IT IS NORMALLY...\n         BE    DRCSRNMV                CURSOR DIDN'T MOVE\n*------> CODE ABOVE SHOULD BE A (BE) TO ACTIVATE SCREEN POSITIONING\n         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT\n         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN\n         CLC   ROW,=CL2'05'            LESS THAN ROW 5?\n         BL    DRCSRNMV                IGNORE REQUEST\n         CLC   ROW,=CL2'22'            MORE THAN ROW 22?\n         BH    DRCSRNMV                IGNORE REQUEST\n         PACK  WORKDBLW,ROW            PACK THE ROW\n         CVB   R6,WORKDBLW             MAKE IT HEX\n         BCTR  R6,0                    NORMALIZE LINE NUMBER\n         MH    R6,=H'80'               MULTIPLY LINE LENGTH\n         LA    R7,SC1LN01              GET ORIGIN\n         AR    R7,R6                   PTR TO START OF LINE\n         PACK  WORKDBLW,SCLINENO       MOVE LINENO FOUND FROM SCREEN\n         L     R4,EATBLFST             GET ORIGIN OF TABLE\n         L     R5,EATBLAST             GET END OF TABLE\nDRSRCH01 EQU   *\n         CR    R4,R5                   END-OF-TABLE?\n         BNL   DRCSRNMV                IGNORE REQUEST\n         CP    WORKDBLW,EALINENO       IS IT THIS ENTRY?\n         BE    DRSRCHFN                YES, GO TO FOUND\n         LA    R4,EXTRLNTH(R4)         BUMP\n         B     DRSRCH01                ITERATE\nDRSRCHFN EQU   *\n         ST    R4,EATBLNXT             SET NEW PTR\n         ST    R4,EATBLTOP             SET NEW PTR\nDRCSRNMV EQU   *\n         CLI   MESSAGE,C'7'            DID USER PRESS PF7?\n         BNE   DRNOTPB                 BYPASS PAGEBACK CODE\n         L     R4,EATBLTOP             PTR TO NEXT ENTRY\n         LA    R5,EXTRLNTH             GET LENGTH OF NODE\n         MH    R5,=H'17'               GO BACK 17 LINES\n         SR    R4,R5                   SUBTRACT 17 VOLUMES\n         C     R4,EATBLFST             GONE TOO FAR?\n         BNL   DRBYPTOO                OK, BYPASS RESET CODE\n         L     R4,EATBLFST             RESET\nDRBYPTOO EQU   *\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)\nDRNOTPB  EQU   *\n         B     DRLOOPMN                MAIN DRIVER LOOP\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE PARSES THE COMMAND INPUT                             *\n***********************************************************************\n         SPACE 2\nPARSEINP DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'PARSEINP'\nBSAVE15  EQU   *\n         SPACE 1\n*--> GET THE INPUT PARAMETERS\n         L     R2,CPPLCBUF             GET CBUF PTR\n         LH    R3,0(R2)                GET LENGTH\n         CH    R3,=H'13'               IS IT AT LEAST 13?\n         BL    GETVOL                  NO, GO ASK FOR IT\n         LA    R3,7(R2)                EARLIEST POINT TO START LOOKING\n         LH    R5,0(R2)                COPY LENGTH\n         SH    R5,=H'8'                PREFIX + 1 FOR EX\n         EX    R5,PIEXOC               RAISE TO UPPER-CASE\nPIEXOC   OC    0(0,R3),=CL50' '        RAISE TO UPPER-CASE\n         LH    R4,0(R2)                PICK UP COMPLETE LENGTH\n         SH    R4,=H'7'                KNOCK OFF PREFIX\nPIFNDFLD EQU   *\n         CLC   0(4,R3),=CL4'VOL('      FIND THE VOLUME QUALIFIER\n         BE    PIFOUNDL                FOUND, GO PROCESS\n         CLC   0(4,R3),=CL4'LEV('      FIND THE LEVEL QUALIFIER\n         BE    PIFOUNDI                FOUND, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDFLD             ITERATE\n         CLI   VOLSER,C' '             WAS THE VOLSER FOUND?\n         BE    GETVOL                  NO, GO ASK FOR IT\n         B     EXIT15                  YES, EXIT\n*------- ----- VOL(XXXXXX) ENTRY FOUND, PROCESS\nPIFOUNDL EQU   *\n         LA    R3,4(R3)                BUMP TO START OF VOLSER\n         SH    R4,=H'4'                SUBTRACT FOR PREFIX\n         LR    R5,R3                   SAVE VOLSER START ADDRESS\nPIFNDPR1 EQU   *\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR1FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR1             ITERATE\n         B     GETVOL                  GO ASK FOR INFORMATION\nPIPR1FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF VOLSER\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXMVC1             MOVE THE VOLSER\nPIEXMVC1 MVC   VOLSER(1),0(R5)         MOVE THE VOLSER\n         OC    VOLSER,=CL50' '         CHANGE IT TO UPPER CASE\n         B     PIFNDFLD                GO TRY FOR LEVEL\n*------- ----- LEV(XXXXXX) ENTRY FOUND, PROCESS\nPIFOUNDI EQU   *\n         LA    R3,4(R3)                BUMP TO START OF LEVEL\n         SH    R4,=H'4'                SUBTRACT FOR PREFIX\n         LR    R5,R3                   SAVE LEVEL START ADDRESS\nPIFNDPR2 EQU   *\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR2FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR2             ITERATE\n         B     GETVOL                  GO ASK FOR INFORMATION\nPIPR2FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF LEVEL\n         STH   R6,LEVELNTH             STORE LENGTH OF THE LEVEL\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXMVC2             MOVE THE LEVEL\nPIEXMVC2 MVC   LEVEL(1),0(R5)          MOVE THE LEVEL\n         OC    LEVEL,=CL50' '          CHANGE IT TO UPPER CASE\n         B     PIFNDFLD                GO TRY FOR VOLSER\n*------- ----- NOT SUCCESSFUL THUS FAR, ASK USER FOR VOLSER\nGETVOL   EQU   *\n         TPUT  MSG5,L'MSG5             ASK FOR THE VOLSER\n         TGET  VOLSER,6                READ IT\n         LTR   R1,R1                   IS IT ZERO?\n         BZ    GETVOL                  YES, GO ASK FOR IT AGAIN\n         CH    R1,=H'6'                IS IT TOO BIG?\n         BH    GETVOL                  YES, GO ASK FOR IT AGAIN\nBYPTGETS EQU   *\n         OC    VOLSER,=CL50' '         CHANGE IT TO UPPER CASE\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE OBTAINS THE FORMAT 4 DSCB                          *\n***********************************************************************\n         SPACE 2\nGETDSCB4 DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'GETDSCB4'\nBSAVE20  EQU   *\n         SPACE 1\n         MVI   DSN,X'04'           INDICATE DSCB FORMAT 4\n         MVC   DSN+1(43),DSN       PROPOGATE\n         XC    DSCB4LST,DSCB4LST   CLEAR THE VOLUME LIST AREA\n         OBTAIN OBLIST4            GET DSCB1\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    D4BYP01             IF OK, BYPASS\n         ISK   0,0                 DIE RIGHT HERE\nD4BYP01  EQU   *\n         MVC   HICCHHR(5),DS4HPCHR     SAVE HIGH ADDRESS OF F1 DSCB\n         MVC   VOLTKCYL(2),DS4DEVSZ+2  GET NUM OF TRKS/CYL\n         MVC   VOLDSCTK+1(1),DS4DEVDT  GET NUM OF DSCBS PER TRK\n         MVC   VOLF4CHR(4),DS4VTOCE+2  GET CCHH OF START OF VTOC\n         MVI   VOLF4CHR+4,X'01'        F4 DSCB WAS FIRST REC (00)\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FIGURES OUT THE DEVICE TYPE                        *\n***********************************************************************\n         SPACE 2\nDEVTYPER DS    0H\n         ST    R9,SAVE25\n         B     BSAVE25\nSAVE25   DC    F'-1'\n         DC    CL8'DEVTYPER'\nBSAVE25  EQU   *\n         SPACE 1\n         L     R15,CVTPTR          GET PTR TO THE CVT\n         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OP SYS TYPE\n         TM    DSADCB,DSADCBXA     IS IT MVS/XA\n         BO    UCBCHKXA            UCB CHECK FOR XA\n*------> MUST BE AN OLD PRE-XA SYSTEM, USE THE UCB CHAIN\n         L     R2,16               GET CVT\n         L     R2,40(R2)           GET UCBILK2\n         XR    R3,R3               CLEAR WORK REGISTER\nNOCATLP  EQU   *\n         CLC   0(2,R2),=X'FFFF'    END OF LOOKUP TABLE?\n         BE    VSBAD\n         CLC   0(2,R2),=X'0000'    NULL ENTRY?\n         BE    BUMPIX\n         ICM   R3,B'0011',0(R2)    PICK UP PTR\n         CLC   28(6,R3),VOLSER     THIS VOLSER?\n         BE    MVDEVTYP            MOVE THE DEVICE TYPE\nBUMPIX   EQU   *\n         LA    R2,2(R2)            BUMP TO NEXT ENTRY\n         B     NOCATLP             GO CHECK NEXT\n*------------------------------------------------------------------\n***>>>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<<<<<<***\n** PARM: (100BYTE-WORK, 1BYTE-DEV-CLASS, 1WORD-UCB-PTR)           **\n** RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS           **\n*------------------------------------------------------------------\nUCBCHKXA EQU   *\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKAREA\n         LA    R1,DSXAWORK             ADDR OF UCB WORKAREA\n         ST    R1,DSXAWA               STORE IT IN PARM LIST\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH\n         ST    R1,DSXADEVT             STORE IN PARM LIST\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR\n         ST    R1,DSXAUCB              IN PARM LIST\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST\nUCBLOOP  EQU   *\n         L     R15,CVTPTR\n         ICM   R15,15,CVTUCBSC-CVT(R15) CVTUCBSC VALID?(IOSVSUCB)\n         LA    R1,DSXALIST             PTR TO PARM LIST\n         BALR  R14,R15                 BRANCH TO IT\n         LTR   R15,R15                 GOT ONE?\n         BNZ   VSBAD                   NO\n         L     R8,DSXAUCBP GET ADR OF  UCB FROM PTR\n         USING UCBCMSEG,R8\n         CLI   UCBID,UCBSTND           IS ADDRESS VALID\n         BNE   UCBLOOP                 NO\n         CLI   UCBDVCLS,UCB3DACC       IS IT DASDI\n         BNE   UCBLOOP                 NO   SKIP\n         TM    UCBSTAT,UCBONLI         IS IT ONLINE\n         BNO   UCBLOOP                 NO  SKIP\n         TM    UCBSTAT,UCBCHGS         IS IT CHANGING STATUS\n         BO    UCBLOOP                 YES SKIP\n         CLC   28(6,R8),VOLSER         COMPARE VOLSER\n         BNE   UCBLOOP                 DONT WANT\nMVDEVTYP EQU   *\n         MVC   DEVTYPE,18(R8)          MOVE DEVICE TYPE\n         MVC   UCBNUM,13(R8)           MOVE UCB NUMBER\n         B     FDEVICE0                GO GET THE DEVICE NAME\n*------> CAN'T LOCATE THE CORRECT VOLUME, ERR MSG THEN ABANDON SHIP\nVSBAD    EQU   *\n         TPUT  MSG2,L'MSG2         ISSUE ERROR MESSAGE\n         B     EXIT10              GO TO THE DRIVER'S EXIT\n*------> FIND THE DEVICE TYPE IN THE TABLE AND GET THE TRK/CYL COUNT\nFDEVICE0 EQU   *\n         LA    R2,DEVTABLE\nFDEVICE1 EQU   *\n         CLC   0(2,R2),=X'0000'    END OF TABLE?\n         BE    FDEVICE2                YES, CHECK UCB\n         CLC   0(2,R2),DEVTYPE     IF SAME DEVICE CODE....\n         BE    FDEVICE2\n         LA    R2,10(R2)           BUMP TO NEXT ENTRY\n         B     FDEVICE1\nFDEVICE2 EQU   *\n         MVC   SC1DNAME,4(R2)      MOVE NAME FROM TABLE\n         SPACE 1\nEXIT25   EQU   *\n         L     R9,SAVE25\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE OBTAINS THE FORMAT 1 DSCB'S AND BUILDS THE TABLE   *\n***********************************************************************\n         SPACE 2\nGETDSCB1 DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'GETDSCB1'\nBSAVE30  EQU   *\n         SPACE 1\n         L     R0,=A(EXTRLNTH)         SET FOR NODE LENGTH\n         MH    R0,=AL2(300)            MAX NUMBER OF DATASETS\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R4,R1                   COPY ORIGIN ADDRESS\n         ST    R4,EATBLFST             STORE ORIGIN ADDRESS\n         ST    R4,EATBLNXT             INITIALLY FIRST ENTRY\n*------- ----- READ THROUGH THE VTOC SAVING DATA FROM ALL F1 DSCBS\n         LA    R6,1\n         LH    R8,VOLF4CHR         GET CYLINDER\n         LH    R7,VOLF4CHR+2       GET HEAD\nDSCBLOOP EQU   *\n         LA    R6,1(R6)            BUMP RECORD PTR\n         CH    R6,VOLDSCTK         TEST FOR LAST REC ON TRK\n         BNH   VBSET               GO SET VTOCCHHR\n         LA    R6,1                RESET R6 TO 1\n         LA    R7,1(R7)            BUMP TRK COUNTER\n         CH    R7,VOLTKCYL         PAST END OF CYL?\n         BL    VBSET               GO SET VTOCCHHR\n         SR    R7,R7               ELSE SET R7 TO TRK 0\n         LA    R8,1(R8)            BUMP TO NEXT CYL\nVBSET    EQU   *\n         STH   R8,VTOCCHHR         SET...\n         STH   R7,VTOCCHHR+2          UP...\n         STC   R6,VTOCCHHR+4            VTOCCHHR\n         CLC   VTOCCHHR(5),HICCHHR BEYOND HIGHEST DSCB ADDRESS?\n         BH    AIEND\n         OBTAIN OBLIST1            GO READ F1 DSCB\n         LTR   R15,R15\n         BZ    DSBYP01\n         ISK   0,0                 CRAP OUT RIGHT HERE\nDSBYP01  EQU   *\n         CLI   DS1FMTID,X'F1'      IS IT A FORMAT 1 DSCB?\n         BNE   DSCBLOOP\n         LH    R1,LEVELNTH             GET LENGTH FOR EXECUTE\n         LTR   R1,R1                   IS IT NON-ZERO?\n         BZ    DSEXCLC1+6              YES, BYPASS DSN LEVEL CHECK\n         BCTR  R1,0                    SUBTRACT ONE FOR THE EXECUTE\n         EX    R1,DSEXCLC1             CHECK THE DSN LEVEL\n         BNE   DSCBLOOP                NOT SAME, GO READ NEXT DSCB1\nDSEXCLC1 CLC   LEVEL(1),DS1DSNAM       CHECK THE DSN LEVEL\n*------- ----- SAVE THE CCHHR OF THE DSCB FOR THE DISPLAY\n         MVC   EADSCB,VTOCCHHR     MOVE CCHHR OF DSCB\n*------- ----- MOVE ALL OF THE FIELDS FROM THE F1 DSCB WE JUST FOUND\n         MVC   EADSN,DS1DSNAM          MOVE DSNAME\n*------- ----- IS THE RACF BIT TURNED ON?\n         MVC   EARACF,=CL4'NONE'   SET DEFAULT\n         TM    DS1DSIND,DS1IND40   RACF BIT TURNED ON?\n         BNO   GDLRECL             NO, MOVE ON TO LRECL\n         MVC   EARACF,=CL4'RACF'   SET RACF INDICATOR\n*------- ----- GET THE LRECL\nGDLRECL  EQU   *\n         LH    R5,DS1LRECL         GET LRECL\n         STH   R5,EALRECL\n*------- ----- GET THE BLKSIZE\n         LH    R5,DS1BLKL          GET BLKSIZE\n         STH   R5,EABLKSIZ\n*------- ----- GET THE KEY LENGTH\n         MVC   EAKEYLEN,DS1KEYL    GET KEYLEN\n*------- ----- GET THE RELATIVE KEY POSITION\n         MVC   WORKDBLW(2),DS1RKP  GET OFFSET\n         LH    R5,WORKDBLW\n         STH   R5,EARKPOFF\n*------- ----- FORMAT THE DSORG FIELD\n         MVC   EADSORG,=CL2'?'     MOVE NOT FOUND INDICATOR\nDSOK     EQU   *\n         TM    DS1DSORG,X'80'      IS DSORG=IS?\n         BNO   D1NOTIS\n         MVC   EADSORG,=CL2'IS'\n         B     D1TESTRF\nD1NOTIS  EQU   *\n         TM    DS1DSORG,X'40'      IS DSORG=PS?\n         BNO   D1NOTPS\n         MVC   EADSORG,=CL2'PS'\n         B     D1TESTRF\nD1NOTPS  EQU   *\n         TM    DS1DSORG,X'20'      IS DSORG=DA?\n         BNO   D1NOTDA\n         MVC   EADSORG,=CL2'DA'\n         B     D1TESTRF\nD1NOTDA  EQU   *\n         TM    DS1DSORG,X'02'      IS DSORG=PO?\n         BNO   D1TESTRF\n         MVC   EADSORG,=CL2'PO'\nD1TESTRF EQU   *\n         TM    DS1DSORG,X'01'      IS DSORG=U?\n         BNO   D1NOTU\n         MVC   EADSORG,=CL2'U '\nD1NOTU   EQU   *\n*------- ----- FORMAT THE RECFM FIELD\n         LA    R5,EARECFM          POINT TO STORAGE ADDRESS\n         TM    DS1RECFM,X'C0'      TEST FOR UNKNOWN RECFM\n         BZ    RFT\n         TM    DS1RECFM,X'40'      TEST FOR F RECFM\n         BNZ   RFUORV\n         MVI   0(R5),C'F'\n         LA    R5,1(R5)            BUMP TO NEXT CHAR\n         B     RFT\nRFUORV   EQU   *\n         TM    DS1RECFM,X'80'\n         BZ    RFV\n         MVI   0(R5),C'U'          OTHERWISE UNDEFINED\n         LA    R5,1(R5)\n         B     RFT\nRFV      EQU   *\n         MVI   0(R5),C'V'\n         LA    R5,1(R5)\nRFT      EQU   *\n         TM    DS1RECFM,X'20'      TEST FOR T RECFM\n         BZ    RFB\n         MVI   0(R5),C'T'\n         LA    R5,1(R5)\nRFB      EQU   *\n         TM    DS1RECFM,X'10'      TEST FOR B RECFM\n         BZ    RFS\n         MVI   0(R5),C'B'\n         LA    R5,1(R5)\nRFS      EQU   *\n         TM    DS1RECFM,X'08'      TEST FOR S RECFM\n         BZ    RFA\n         MVI   0(R5),C'S'\n         LA    R5,1(R5)\nRFA      EQU   *\n         TM    DS1RECFM,X'04'      TEST FOR A RECFM\n         BZ    RFM\n         MVI   0(R5),C'A'\n         LA    R5,1(R5)\nRFM      EQU   *\n         TM    DS1RECFM,X'02'      TEST FOR M RECFM\n         BZ    RFEND\n         MVI   0(R5),C'M'\n         LA    R5,1(R5)\nRFEND    EQU   *\n         AP    LINECNT,=PL1'1'     BUMP LINE NUMBER\n         ZAP   EALINENO,LINECNT    COPY IT\n         LA    R4,EXTRLNTH(R4)     BUMP TO NEXT ENTRY\n         B     DSCBLOOP            ITERATE\nAIEND    EQU   *\n         ST    R4,EATBLAST         STORE PTR TO END OF TABLE\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUBBLE SORTS THEN RENUMBERS THE ENTRIES IN THE TABLE *\n***********************************************************************\n         SPACE 2\nSORT     DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'SORT    '\nBSAVE40  EQU   *\n         SPACE 1\n         L     R3,EATBLFST             GET FIRST ADDRESS\n         SP    LINECNT,=PL1'1'         DECREMENT FIRST TIME\nSORTLP01 EQU   *\n         LR    R4,R3                   GET CURRENT FIRST ADDRESS\n         LA    R5,EXTRLNTH(R3)         GET NEXT TABLE ENTRY\nSORTLP02 EQU   *\n         C     R5,EATBLAST             REACHED THE END YET?\n         BNL   NEXTPASS                YES, GO DECREMENT COUNTER\n         CLC   EADSN,2(R5)             COMPARE DSN'S\n         BH    SORTBIG                 B < A; GOTO SWAP\nSORTINDX EQU   *\n         LA    R5,EXTRLNTH(R5)         BUMP INDEX\n         B     SORTLP02                ITERATE\nSORTBIG  EQU   *\n         XC    2(EXTRLNTH-2,R4),2(R5)  A <-- B --+\n         XC    2(EXTRLNTH-2,R5),2(R4)  B <-- A   |-- LOGICAL SWAP\n         XC    2(EXTRLNTH-2,R4),2(R5)  A <-- B --+\n         B     SORTINDX                GO ITERATE\nNEXTPASS EQU   *\n         SP    LINECNT,=PL1'1'         DECREMENT\n         BL    EXIT40                  JUST WENT NEGATIVE, EXIT\n         LA    R3,EXTRLNTH(R3)         NEXT ENTRY\n         B     SORTLP01                ITERATE\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *\n*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *\n*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *\n***********************************************************************\n         SPACE 2\nFORMATER DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'FORMATER'\nBSAVE50  EQU   *\n         SPACE 1\n         L     R4,EATBLNXT             GET NEXT ADDRESS\n         ST    R4,EATBLTOP             SAVE CURRENT TOP\n         LA    R7,SC1LN05              GET ORIGIN IN SCREEN\n         LA    R8,18                   18 LINES OF DATA PER SCREEN\nFMTLOOP1 EQU   *\n         C     R4,EATBLAST             END OF EXTRACT TABLE?\n         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         MVC   SCLINENO-1(4),=XL4'40202120' INSERT EDIT MASK\n         ED    SCLINENO-1(4),EALINENO  EDIT IN THE LINE NUMBER\n         MVC   SCDSN,EADSN             MOVE THE DSNAME\n         CLI   EADSN+L'SCDSN,C' '      TRUNCATION OCCURRED?\n         BE    FMTNTRNC                NOPE, BYPASS\n         MVI   SCDSN+(L'SCDSN-1),C'>'  INDICATE TRUNCATION\nFMTNTRNC EQU   *\n         MVC   SCDSORG,EADSORG         MOVE THE DSORG\n         MVC   SCRECFM,EARECFM         MOVE THE RECFM\n         MVC   SCRACF,EARACF           MOVE THE RACF INDICATOR\n*--> FMT THE DSCB/CCHHR\n         UNPK  SCDSCB(11),EADSCB(6)    UNPACK\n         MVC   SCDSCB+10(2),=CL2' '    GET RID OF SIGN\n         TR    SCDSCB,HEXTR-X'F0'      MAKE DISPLAYABLE\n*--> FMT THE LRECL\n         LH    R1,EALRECL          GET LRECL\n         CVD   R1,WORKDBLW\n         MVC   SCLRECL,=XL7'4020206B202120'\n         ED    SCLRECL,WORKDBLW+5\n*--> FMT THE BLKSIZE\n         LH    R1,EABLKSIZ         GET BLKSIZE\n         CVD   R1,WORKDBLW\n         MVC   SCBLKSIZ,=XL7'4020206B202120'\n         ED    SCBLKSIZ,WORKDBLW+5\nFMTNEXT  EQU   *\n         LA    R7,80(R7)               BUMP TO NEXT SCREEN LINE\n         LA    R4,EXTRLNTH(R4)         BUMP TO NEXT ENTRY\n         BCT   R8,FMTLOOP1             ITERATE\n         LA    R1,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY\n         SR    R4,R1                   SUBTRACT ONE ENTRY\n         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR\n         ST    R4,EATBLNXT             STORE NEW NEXT PTR\nFMTCLEAR EQU   *\n         LTR   R8,R8                   RUN OUT OF LINES YET?\n         BZ    FMTEND                  YES, ENOUGH IS ENOUGH\n         MVI   0(R7),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R7),0(R7)          CLEAR THE REST OF THE LINE\n         LA    R7,80(R7)               BUMP TO NEXT LINE\n         BCT   R8,FMTCLEAR             ITERATE\nFMTEND   EQU   *\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE60  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         TGET  MESSAGE,126,ASIS        GET DUMMY INPUT\n         CLI   MESSAGE,C'3'            DID USER PRESS PF3?\n         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER\n         BE    FSREFRSH                RE-PAINT SCREEN\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT70                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *\n***********************************************************************\n         SPACE 2\nCALCADDR DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CALCADDR'\nBSAVE100 EQU   *\n         SPACE 1\n*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE\n         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN\n         SR    R8,R7                   GENERATE DISPLACEMENT\n         CVD   R8,WORKDBLW             CONVERT TO DECIMAL\n         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH\n         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE\n         UNPK  ROW,WORKDBLW+4(2)       UNPACK\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   STARTADR,BUFFADDR       STARTING ADDRESS\n         MVC   COLUMN,=CL2'26'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS\n         SPACE 1\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE510 EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *\n***********************************************************************\n         SPACE 2\nTUBETORC DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'TUBETORC'\nBSAVE520 EQU   *\n         SPACE 1\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  ROW,R327FLD1(2)         RETURN THE ROW\n         OI    ROW+1,X'F0'             CLEAR SIGN\n         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN\n         OI    COLUMN+1,X'F0'          CLEAR SIGN\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nEATBLFST DS    F                       POINTER TO BGN OF EXTRACT TABLE\nEATBLTOP DS    F                       POINTER TO TOP OF CURRENT SCREEN\nEATBLAST DS    F                       POINTER TO END OF EXTRACT TABLE\nEATBLPRV DS    F                       POINTER TO PREVIOUS SCREEN START\nEATBLNXT DS    F                       POINTER TO NEXT ENTRY TO SHOW\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG2     DC    CL27'VOLUME REQUESTED NOT FOUND'\nMSG5     DC    CL32'PLEASE ENTER THE VOLSER DESIRED'\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL19'COMMAND INTERRUPTED'\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\nLEVEL    DC    CL50' '                 LEVEL TO RESTRICT SEARCH TO\nLEVELNTH DC    H'0'                    LENGTH OF THE LEVEL\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nDSADCB   DS    X                       OP SYS TYPE\nDSADCBXA EQU   X'80'                   MVS/XA\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nLINECNT  DC    PL2'0'                  LINE NUMBER ON SCREEN\n         SPACE 1\nHEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR THE OBTAIN MACROS                               *\n***********************************************************************\n         SPACE 1\n*--------CATALOG SEARCH MACRO\n         DS    0D\nDSN      DS    CL44\nLOCLIST  CAMLST NAME,DSN,,VOLIST\n         DS    0D\nVOLIST   DS    256C\n         DS    CL16 PROTECT\n*--------VTOC DSCB 4 OBTAIN MACRO (VTOC DSCB)\nUCBNUM   DS    CL3\nDEVTYPE  DS    CL2\nVOLSER   DC    CL6' '\nOBLIST4  CAMLST SEARCH,DSN,VOLSER,DSCB4LST\n         DS    0D\nDSCB4LST DS    CL148\n         ORG   DSCB4LST\n         IECSDSL1 (4)\n         ORG\n*--------VTOC DSCB 1 OBTAIN MACRO (DATASET HEADER DSCB)\nOBLIST1  CAMLST SEEK,VTOCCHHR,VOLSER,DSCB1LST\n         DS    0D\nDSCB1LST DS    CL148\n         ORG   DSCB1LST\n         PRINT ON,GEN,NODATA\n         IECSDSL1 (1)\n         PRINT ON,NOGEN,NODATA\n         ORG\n*--------VTOC DSCB 2 OBTAIN MACRO (ISAM DSCB)\nOBLIST2  CAMLST SEEK,DSCB1LST+91,VOLSER,DSCB2LST\n         DS    0D\nDSCB2LST DS    CL148\n*--------VTOC DSCB 3 OBTAIN MACRO (EXTENSION DSCB)\nOBLIST3  CAMLST SEEK,DSCB1LST+91,VOLSER,DSCB3LST\n         DS    0D\nDSCB3LST DS    CL148\n         DS    CL16 PROTECT THE DEVTABLE\n         SPACE 3\n***********************************************************************\n*      WORK AREAS FOR THE VTOC READ ROUTINE                           *\n***********************************************************************\n         SPACE 1\nVOLDSCTK DS    H                       # DSCB'S / TRK IN VTOC\nVOLTKCYL DS    H                       TRKS / CYL ON THIS DEVICE\nVOLF4CHR DS    CL5                     CCHHR OF START OF VTOC\nHICCHHR  DS    CL5                     CCHHR OF LAST DSCB IN VTOC\nVTOCCHHR DS    CL5                     WORK AREA FOR OBTAIN SEEK\n         EJECT\n***********************************************************************\n*      WORK AREA FOR UCB SCAN ROUTINE (FROM TSUCBSCN)                 *\n***********************************************************************\n         SPACE 1\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n******** ***** *********************** END OF UCB LOOKUP DSA\nDSAEND   EQU  *                         LENGTH OF WORK\n         EJECT\n***********************************************************************\n*               D E V I C E   N A M E   T A B L E                     *\n***********************************************************************\n         SPACE 1\nDEVTABLE EQU   *\n         DC    X'2006'\n         DC    X'0008'\n         DC    CL6'2305-1'\n         DC    X'2007'\n         DC    X'0008'\n         DC    CL6'2305-2'\n         DC    X'2009'\n         DC    X'0013'\n         DC    CL6'3330  '\n         DC    X'200D'\n         DC    X'0013'\n         DC    CL6'3330-1'\n         DC    X'200B'\n         DC    X'001E'\n         DC    CL6'3350  '\n         DC    X'200E'\n         DC    X'000F'\n         DC    CL6'3380  '\n         DC    X'0000'         ** MARKS END OF DEVICE TABLE **\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nSTARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING\nENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+22)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+56)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> BACK-LIGHT THE TITLE LINE\n         DC    XL16'1140C82903C0F841F442F311C1C71DE8'\n*--> REVERSE VIDEO THE TITLE BLOCKS\n         DC    XL16'11C2602903C0F841F242F111C36F1DE8'\n*--> SET UP THE VOLSER\n         DC    XL5'11C1C81DE4'\nSC1VOLSR DC    CL6'XXXXXX'\n         DC    XL16'11C1C82903C0F8410042F611C14F1DE8'\n*--> SET UP THE DEVICE TYPE\n         DC    XL5'1140401DE4'\nSC1DNAME DC    CL6'XXXXXX'\n         DC    XL16'1140402903C0F8410042F61140C71DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         EJECT\n***********************************************************************\n*  THIS IS THE MAIN SCREEN                                            *\n***********************************************************************\n         SPACE 1\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                          T S O   V T O '\n         DC    CL40'C   L I S T                             '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40' NUM  DATASET NAME                   ORG'\n         DC    CL40'  RFM  LRECL  BLKSIZ  DSCB/CCHHR  RACF  '\nSC1LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' --------------------   PF3=END  PF7=BAC'\n         DC    CL40'K  PF8=FORWARD   ---------------------- '\nSC1SUFIX DC    XL4'115DC813'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nEXTRAREA DSECT\nEALINENO DS    PL2                     LINE NUMBER (GENERATED)\nEADSN    DS    CL44                    DSNAME\nEALRECL  DS    CL2                     LRECL\nEABLKSIZ DS    CL2                     BLKSIZE\nEARKPOFF DS    CL2                     RKP (OFFSET)\nEARECFM  DS    CL4                     RECFM\nEADSORG  DS    CL2                     DSORG\nEAKEYLEN DS    CL1                     KEYLEN\nEADSCB   DS    CL5                     CCHHR OF DSCB\nEARACF   DS    CL4                     RACF DEFINED?\nEXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY\n         SPACE 2\nSCRNLINE DSECT\n         DS    CL1\nSCLINENO DS    CL3                     LINE NUMBER\n         DS    CL2\nSCDSN    DS    CL30                    DSNAME\n         DS    CL2\nSCDSORG  DS    CL2                     DATASET ORGANIZATION\n         DS    CL2\nSCRECFM  DS    CL3                     RECORD FORMAT\nSCLRECL  DS    CL7                     LRECL\n         DS    CL1\nSCBLKSIZ DS    CL7                     BLKSIZE\n         DS    CL2\nSCDSCB   DS    CL10                    CCHHR OF DSCB\n         DS    CL2\nSCRACF   DS    CL4                     RACF?\n         DS    CL2\n         SPACE 2\n         PRINT ON,NOGEN\n         IEFUCBOB ,                    UCB\n         CVT   DSECT=YES               CVT\n         END   LISTVTOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MONJOB": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00\\x00\\x00\\x91\\x03/\\x00\\x91\\x03\\x7f\\x14\\x06\\x02\\xa6\\x01\\xf6\\x01\\x03\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "1991-02-01T00:00:00", "modifydate": "1991-02-06T14:06:00", "lines": 678, "newlines": 502, "modlines": 259, "user": "SYSTAB"}, "text": "MONJOB TITLE '** MONITOR JOB EXECUTION **'\n***********************************************************************\n*                                                                     *\n*    NAME - MONJOB                                                    *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS THE STATUS OF A   *\n*              JOB THAT IS RUNNING, AND DISPLAYS TIME USED.           *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - MONJOB REQUIRES A 3270 DISPLAY STATION WITH AT    *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nMONJOB CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING SCRNLINE,R2             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG2,L'MSG2             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         BAL   R9,PARSEINP             PARSE INPUT COMMAND\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    DRCLEAR                 YES, GET OUTTA HERE\n         BAL   R9,MONITOR              HERE'S THE TIMER CODE\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE PARSES THE COMMAND INPUT                             *\n***********************************************************************\n         SPACE 2\nPARSEINP DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'PARSEINP'\nBSAVE15  EQU   *\n         SPACE 1\n*--> GET THE INPUT PARAMETERS\n         L     R2,CPPLCBUF             GET CBUF PTR\n         CLC   0(2,R2),=H'13'          IS IT AT LEAST 13?\n         BL    GETINTVL                NO, GO ASK FOR IT\n         LA    R3,7(R2)                EARLIEST POINT TO START LOOKING\n         LH    R5,0(R2)                COPY LENGTH\n         SH    R5,=H'8'                PREFIX + 1 FOR EX\n         EX    R5,PIEXOC               RAISE TO UPPER-CASE\nPIEXOC   OC    0(0,R3),=CL25' '        RAISE TO UPPER-CASE\n         LH    R4,0(R2)                PICK UP COMPLETE LENGTH\n         SH    R4,=H'7'                KNOCK OFF PREFIX\nPIFNDFLD EQU   *\n         CLC   0(4,R3),=CL4'JOB('      FIND THE JOB QUALIFIER\n         BE    PIFOUNDJ                FOUND, GO PROCESS\n         CLC   0(4,R3),=CL4'INT('      FIND THE INTERVAL DESIGNATOR\n         BE    PIFOUNDI                FOUND, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDFLD             ITERATE\n         B     GETINTVL                GO ASK FOR INFORMATION\nPIFOUNDJ EQU   *\n         LA    R3,4(R3)                BUMP TO START OF JOBNAME\n         SH    R4,=H'4'                SUBTRACT FOR PREFIX\n         LR    R5,R3                   SAVE JOBNAME START ADDRESS\nPIFNDPR1 EQU   *\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR1FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR1             ITERATE\n         B     GETINTVL                GO ASK FOR INFORMATION\nPIPR1FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF JOBNAME\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXMVC1             MOVE THE JOBNAME\n         B     PIFNDFLD                GO TRY FOR THE INTERVAL\nPIEXMVC1 MVC   JOBNAME(1),0(R5)        MOVE THE JOBNAME\nPIFOUNDI EQU   *\n         LA    R3,4(R3)                BUMP TO START OF INTERVAL\n         SH    R4,=H'4'                SUBTRACT FOR PREFIX\n         LR    R5,R3                   SAVE INTERVAL START ADDRESS\nPIFNDPR2 EQU   *\n         CLI   0(R3),C')'              REACHED THE END YET?\n         BE    PIPR2FND                YEP, GO PROCESS\n         LA    R3,1(R3)                BUMP\n         BCT   R4,PIFNDPR2             ITERATE\n         B     GETINTVL                GO ASK FOR INFORMATION\nPIPR2FND EQU   *\n         LR    R6,R3                   COPY ENDING ADDRESS\n         SR    R6,R5                   LENGTH OF INTERVAL\n         BCTR  R6,0                    SUBTRACT 1 FOR EX\n         EX    R6,PIEXTRT1             IS IT NUMERIC?\n         BC    7,GETINTVL              NO, GO ASK FOR IT AGAIN\n         AH    R6,=AL2(7*16)           SET UP LEFT LENGTH NIBBLE\n         EX    R6,PIEXPACK             MOVE THE INTERVAL\n         MVI   INTVFLAG,C'1'           INDICATE THAT WE GOT THE INTVL\n         B     PIFNDFLD                GO TRY FOR THE JOBNAME\nPIEXTRT1 TRT   0(0,R5),TRTALLOW        EXECUTED TRT\nPIEXPACK PACK  WORKDBLW(0),0(0,R5)     MOVE THE INTERVAL\nGETINTVL EQU   *\n         CLI   INTVFLAG,C'1'           DID WE GET AN INTERVAL?\n         BE    GIBYPACK                YES, BYPASS\n         ZAP   WORKDBLW,=PL2'05'       ESTABLISH DEFAULT INTERVAL\nGIBYPACK EQU   *\n         ED    SC1INTVL,WORKDBLW+6     PLACE INTO SCREEN TITLE\n         CVB   R1,WORKDBLW             CONVERT SECONDS TO HEX\n         MH    R1,=H'100'              MULTIPLY BY HUNDREDTHS\n         ST    R1,INTERVAL             PUT IT IN IT'S PLACE\n         B     GETJOBNM                BRANCH AROUND EXECUTED PACK\nGIEXPACK PACK  WORKDBLW(8),INTERVAL(0) EXECUTED PACK\nGIEXTRT  TRT   INTERVAL(0),TRTALLOW    EXECUTED TRT\nGETJOBNM EQU   *\n         CLI   JOBNAME,C' '            IS THE FIRST CHARACTER BLANK?\n         BNE   BYPTGETS                NO, BYPASS REQUEST\n         TPUT  MSG5,L'MSG5             ASK FOR JOBNAME\n         TGET  JOBNAME,8               READ IT\n         LTR   R1,R1                   IS IT ZERO?\n         BZ    GETJOBNM                YES, GO ASK FOR IT AGAIN\n         CH    R1,=H'8'                IS IT TOO BIG?\n         BH    GETJOBNM                YES, GO ASK FOR IT AGAIN\nBYPTGETS EQU   *\n         OC    JOBNAME,=CL8' '         CHANGE IT TO UPPER CASE\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SEARCHES TO CSCB CHAIN FOR THE JOB REQUIRED, AND   *\n*   IF IT FINDS IT, PUTS A MESSAGE OUT TO THE USERS SCREEN.  IT THEN  *\n*   GOES INTO A TIMER WAIT BASED ON THE USERS INTERVAL REQUEST.       *\n***********************************************************************\n         SPACE 2\nMONITOR  DS    0H\n         ST    R9,SAVE18\n         B     BSAVE18\nSAVE18   DC    F'-1'\n         DC    CL8'MONITOR '\nBSAVE18  EQU   *\n         SPACE 1\nMONLOOP0 EQU   *\n         LA    R3,18                   GET NUMBER OF LINES/SCREEN\n         ZAP   LINENUM,=PL1'5'         STARTING LINE NUMBER\nMONLOOP1 EQU   *\n         L     R2,16                   GET CVT ADDRESS\n         L     R2,148(R2)              GET MSER ADDRESS\n         L     R2,0(R2)                FIRST CSCB ON CHAIN\nMONLOOP2 EQU   *\n         LTR   R2,R2                   END OF CSCB CHAIN?\n         BZ    ENDOFJOB                YES, JOBNAME NOT FOUND\n         CLC   JOBNAME,8(R2)           IS THIS THE JOB?\n         BE    MONLOOP3                YES, GO PUT OUT MESSAGE\n         L     R2,0(R2)                GET NEXT CSCB ADDRESS\n         B     MONLOOP2                GO TRY NEXT\nMONLOOP3 EQU   *\n         TIME  DEC                     GET THE SYSTEM TIME/DATE\n         STM   R0,R1,WORKDBLW          STORE IN WORK AREA\n         UNPK  WORKTIME,WORKDBLW+0(4)  UNPACK THE TIME\n         OI    WORKTIME+7,X'F0'        CLEAR SIGN NIBBLE\n         MVC   SC1UPDTE+0(2),WORKTIME+1 MOVE THE HH\n         MVC   SC1UPDTE+3(2),WORKTIME+3 MOVE THE MM\n         MVC   SC1UPDTE+6(2),WORKTIME+5 MOVE THE SS\n         MVC   SC1UPDTE+9(8),JOBNAME   MOVE JOBNAME\n         MVC   SC1UPDTE+18(8),64(R2)   MOVE JOBSTEP\n         MVC   SC1UPDTE+27(8),32(R2)   MOVE STEPNAME\n         LH    R4,30(R2)               GET ASID\n         L     R5,16                   GET CVT\n         L     R5,564(R5)              GET CVTASCBH\nMONLOOP4 EQU   *\n         LTR   R5,R5                   END OF ASCB READY Q?\n         BZ    MONLOOP6                JOB'S THERE BUT WE CAN'T SEE IT\n         CH    R4,36(R5)               IS THIS THE RIGHT ASID?\n         BE    MONLOOP5                YES, GO GET TIMING\n         L     R5,4(R5)                GET NEXT ASCB ON QUEUE\n         B     MONLOOP4                GO TRY AGAIN\nMONLOOP5 EQU   *\n         LM    R6,R7,64(R5)            PICK UP ASCBJSTL\n         SRDL  R6,12                   DIVIDE BY 2**11\n         D     R6,=F'10000'            DIVIDE BY 10,000\n         LR    R8,R7                   COPY FOR LATER\n         LM    R6,R7,200(R5)           PICK UP ASCBSRBT\n         SRDL  R6,12                   DIVIDE BY 2**11\n         D     R6,=F'10000'            DIVIDE BY 10,000\n         AR    R1,R7                   TOTAL-TIME = TCB-TIME + SRB-TIME\n         CVD   R8,WORKDBLW             CONVERT RADIX\n         MVC   SC1UPDTE+41(10),=XL10'4020206B2021204B2020'\n         ED    SC1UPDTE+41(10),WORKDBLW+4 FORMAT TIMING FIELD\n         TM    102(R5),X'04'           ASCB SWAPPED OUT?\n         BO    MONLOOP6                YES, BYPASS\n         MVC   SC1UPDTE+37(4),=CL4'IN' INDICATE JOB SWAPPED-IN\n         B     MONLOOP7                BYPASS SWAPPED-OUT INDICATOR\nMONLOOP6 EQU   *\n         MVC   SC1UPDTE+37(4),=CL4'OUT' INDICATE JOB SWAPPED-OUT\nMONLOOP7 EQU   *\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    DRCLEAR                 YES, GET OUTTA HERE\n         BAL   R9,HILIT                TPUT THE UPDATE LINE\n         STIMER WAIT,BINTVL=INTERVAL   WAIT FOR DESIGNATED PERIOD\n         AP    LINENUM,=PL1'1'         BUMP TO NEXT LINE\n         BCT   R3,MONLOOP1             WAKE UP, GO TRY AGAIN\n         B     MONLOOP0                SCREEN FULL, CLEAR/HEADING\nENDOFJOB EQU   *\n         B     DRCLEAR                 GO TO THE DRIVER'S EXIT POINT\n         SPACE 1\nEXIT18   EQU   *\n         L     R9,SAVE18\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE HIGH-LIGHTS THE UPDATE LINE WHEN NECESSARY           *\n***********************************************************************\n         SPACE 2\nHILIT    DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'HILIT   '\nBSAVE20  EQU   *\n         SPACE 1\n         UNPK  ROW,LINENUM             STARTING ROW NUMBER\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         ALWAYS START IN COLUMN 1\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   SC1HILTR+01(2),BUFFADDR ADDRESS : STARTING\n         MVC   SC1FIELD+01(2),BUFFADDR ADDRESS : STARTING\n         MVC   SC1LOLTR+01(2),LASTSTRT ADDRESS : STARTING\n         MVC   LASTSTRT,BUFFADDR       STORE NEW LAST ADDR: STARTING\n         MVC   COLUMN,=CL2'80'         ALWAYS END IN COLUMN 80\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   SC1HILTR+12(2),BUFFADDR ADDRESS : ENDING\n         MVC   SC1LOLTR+12(2),LASTEND  ADDRESS : ENDING\n         MVC   LASTEND,BUFFADDR        STORE NEW LAST ADDR: ENDING\n         TPUT  SC1HILIT,LSC1HIL,NOEDIT HI-LITE\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE40\n         STM   R2,R3,SAVE40A\n         B     BSAVE40\nSAVE40   DC    F'-1'\nSAVE40A  DC    2F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE40  EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT40   EQU   *\n         LM    R2,R3,SAVE40A\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE50  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE60  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT60                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG3,L'MSG3             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG2     DC    CL17'STAX MACRO FAILED'\nMSG3     DC    CL19'COMMAND INTERRUPTED'\nMSG5     DC    CL24'PLEASE ENTER THE JOBNAME'\nMSG6     DC    CL23'JOB NOT FOUND BY SEARCH'\nMSG8     DC    XL12'C11140403C4040001140C113'\nWORKTIME DS    D\nINTERVAL DS    F\nINTERDEC DS    F\nJOBNAME  DC    CL8' '                  JOBNAME TO BE MONITORED\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nLINENUM  DC    PL2'5'                  LINE NUMBER ON SCREEN\nINTVFLAG DC    C'0'                    1=INTERVAL SUCCESSFULLY PARSED\n         SPACE 1\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nLASTSTRT DC    XL2'C540'               3270 BUFFER ADDRESS\nLASTEND  DC    XL2'C64F'               3270 BUFFER ADDRESS\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+67)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\n*------- ----- BACK-LIGHT THE TITLE LINE\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n         DC    XL16'1140402903C0F841F442F311C14F1DE8'\n         DC    XL5'11C14A1DE4'\nSC1INTVL DC    XL4'40202120'\n         DC    XL16'11C14A2903C0F8410042F611C14F1DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         SPACE 2\n*------- ----- HI-LITE THE UPDATE LINE\nSC1HILIT EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\nSC1FIELD DC    XL5'1199991DE4'\n         DC    CL12' '\nSC1UPDTE DC    CL67'HH:MM:SS JJJJJJJJ PPPPPPPP SSSSSSSS'\nSC1LOLTR DC    XL16'1199992903C0F8410042F31199991DE4'\nSC1HILTR DC    XL16'1199992903C0F841F142F21199991DE4'\n         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY\nESC1HIL  EQU   *\nLSC1HIL  EQU   ESC1HIL-SC1HILIT\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                      T S O   S T A T U '\n         DC    CL40'S   M O N I T O R                       '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40'             >-TIME-< JOBNAME  JOBSTEP  '\n         DC    CL40'PROCSTEP  STAT  CPU-TIME                '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' ---------   PRESS ATTN (ALT/SYSREQ) TO '\n         DC    CL40'TERMINATE STATUS MONITOR   ------------ '\nSC1SUFIX DC    XL4'115C7D13'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nSCRNLINE DSECT\n         DS    CL1\nSCJOBNM  DS    CL8                     JOBNAME\n         END   MONJOB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POSTIT": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x91\\x18?\\x00\\x91)O\\x14\\x13\\x00\\x8d\\x00\\x85\\x00\\x0c\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1991-07-02T00:00:00", "modifydate": "1991-10-21T14:13:00", "lines": 141, "newlines": 133, "modlines": 12, "user": "SYSTAB"}, "text": "POSTIT   TITLE '** TSO DATASET ATTRIBUTE COMMAND'\n***********************************************************************\n*                                                                     *\n*    NAME - POSTIT                                                    *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - PASS ALONG A STICKY MESSAGE TO THE CONSOLE OPERATOR    *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    MACROS USED - WTO                                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,GEN,NODATA\nPOSTIT   CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM FOLLOWS BLOCK CODING CONVENTIONS.  FLOW             *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE1\n         B     BSAVE1\nSAVE1    DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE1   EQU   *\n         SPACE 1\n*------> MOVE THE INPUT TO THE WTO AREA AND SEND IT\n         BAL   R9,GETMSG              PROCESS MESSAGE\n         SPACE 1\nEXIT1    EQU   *\n         L     R9,SAVE1\n         BR    R9\n         EJECT\n***********************************************************************\n*  MOVE THE INPUT TO THE OUTPUT AREA AND SEND IT                      *\n***********************************************************************\n         SPACE 1\nGETMSG   DS    0H\n         ST    R9,SAVE2\n         B     BSAVE2\nSAVE2    DC    F'-1'\n         DC    CL8'GETDSN  '\nBSAVE2   EQU   *\n         SPACE 1\n         L     R4,CPPLCBUF         GET CBUF ADDR\n         LH    R2,0(R4)            GET TOTAL LENGTH\n         LH    R3,2(R4)            GET RELATIVE OFFSET OF OPERAND\n         LA    R3,4(R3)            BUMP BY BDW LENGTH\n         CR    R2,R3               IF EQUAL, MEANS NO OPERAND\n         BE    NOMSG1                GO GET MESSAGE\n         SR    R2,R3               GET OPERAND LENGTH\n         BCTR  R2,0                DEC BY 1 FOR EXECUTE\n         AR    R4,R3               POINT R4 TO OPERAND\n         CH    R2,=H'59'           CHECK FOR MAX LENGTH\n         BNH   OKFOREX             GO DO IT\n         LH    R2,=H'59'           ARTIFICIAL MAX\n         TPUT  MSG1,L'MSG1         CHASTISE USER\nOKFOREX  EQU   *\n         EX    R2,EXMVC1           MOVE MESSAGE\n         B     PROCMSG             GO PROCESS DSNAME\nEXMVC1   MVC   MSG(0),0(R4)        DUMMY MVC\nNOMSG1   EQU   *\n         TPUT  MSG2,L'MSG2         PUT OUT MSG REQUEST\n         TGET  MSG,L'MSG           GO GET IT\n         CH    R1,=H'1'            MUST BE AT LEAST 1 BYTE LONG\n         BL    NOMSG1\nPROCMSG  EQU   *\n         LA    R2,MSG              GET START ADDRESS\n         LA    R3,L'MSG            GET LENGTH\n         BAL   R1,BYPMSG               GET PARM ADDR & BYPASS\n         DC    AL2(76)                 LENGTH OF WTO\n         DC    X'8000'                 ROUTING & DESC FOLLOW TEXT\n         DC    CL12'TSO/POSTIT: '      MESSAGE PREFIX\nMSG      DC    CL60' '\n         DC    X'4000'                 DESC: IMM ACTION REQ\n         DC    X'8000'                 ROUT: MASTER CONSOLE\nBYPMSG   EQU   *\n         SVC   35                      ISSUE WTO\n         SPACE 1\nEXIT2    EQU   *\n         L     R9,SAVE2\n         BR    R9\n         SPACE 1\nMSG1     DC    CL46'TSO/POSTIT: MAX MESSAGE OF 60 CHARACTERS SENT '\nMSG2     DC    CL46'TSO/POSTIT: PLEASE ENTER MESSAGE FOR OPERATOR '\n         SPACE 1\n         END   POSTIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTPDS": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x89&\\x1f\\x00\\x905\\x1f\\x15\\x01\\x04\\t\\x03n\\x04\\t\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1989-09-18T00:00:00", "modifydate": "1990-12-17T15:01:00", "lines": 1033, "newlines": 878, "modlines": 1033, "user": "SYSTAB"}, "text": "PRTPDS   TITLE '**** PDS PRINT UTILITY ****'\n***********************************************************************\n*    NAME - PRTPDS                                                    *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS PROGRAM PRINTS CARD IMAGE PDS'S.                  *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    DDNAMES - PDS      - INPUT PDS TO BE PRINTED                     *\n*              DIRECT   - OUTPUT LISTING OF THE DIRECTORY             *\n*              REPORT   - OUTPUT LISTING OF THE PDS                   *\n*                                                                     *\n*    PARMS - RUN TIME PARAMETERS ARE OF TWO TYPES, THOSE THAT         *\n*            ACTIVATE BIT SWITCHES ONLY, AND THOSE THAT HAVE VALUES   *\n*            ASSOCIATED WITH THEM.  THE PARAMETERS ARE:               *\n*                                                                     *\n*            1) COL(XX) - A ONE OR TWO DIGIT NUMBER WHICH INDICATES   *\n*               THE COLUMN TO BEGIN PRINTING IN.  THE DEFAULT IS 27.  *\n*            2) PRTASM - IF THIS PARM IS SPECIFIED, ASSEMBLER EJECT   *\n*               AND SPACE PRINT COMMANDS WILL BE EXPANDED.  THE       *\n*               DEFAULT IS NO.                                        *\n*            3) DIRONLY - IF THIS PARM IS SPECIFIED, ONLY THE PDS     *\n*               DIRECTORY WILL BE PRINTED, AND NO ATTEMPT WILL BE     *\n*               MADE TO OPEN THE REPORT OUTPUT DATASET.  THE DEFAULT  *\n*               IS NO, WHICH MEANS PRINT THE FULL REPORT.             *\n*            4) RANGE(A,B) - IF THIS IS SPECIFIED, PRTPDS WILL PRINT  *\n*               ONLY THE MEMBERS THAT EXIST IN THE RANGE BETWEEN \"A\"  *\n*               AND \"B\", INCLUSIVE.  BOTH \"A\" AND \"B\" MUST EXIST, OR  *\n*               PRTPDS WILL TURN THE \"DIRONLY\" OPTION ON.  THE        *\n*               DEFAULT FOR THIS OPTION IS \"ALL\".  \"A\" AND \"B\" CAN    *\n*               BE VARIABLE LENGTH, FROM 1 TO 8 CHARACTERS, AND MUST  *\n*               BE SEPARATED BY A COMMA.                              *\n*            5) DWIDTH(X) - A ONE DIGIT NUMBER WHICH INDICATES THE    *\n*               NUMBER OF DIRECTORY ELEMENTS TO PRINT PER LINE ON     *\n*               THE DIRECTORY LISTING.  THE DEFAULT (ALSO MAX) IS 6.  *\n*               THE MINIMUM IS 1.  USE \"DWIDTH(3)\" IF YOU LIKE TO     *\n*               CUT YOUR LISTINGS DOWN TO BINDER SIZE.                *\n*            6) LINES(XX) - A TWO DIGIT NUMBER WHICH INDICATES THE    *\n*               NUMBER OF LINES YOU WISH PRINTED PER PAGE.  THE       *\n*               DEFAULT IS 59, AND THE MINIMUM IS 20.                 *\n*            7) FIND(X) - UP TO TWENTY CHARACTER SEARCH STRING        *\n*            8) FINDSAVE - SAVE FOUND INFO IN DATASET FINDSAVE        *\n*                                                                     *\n*    EXAMPLES:                                                        *\n*                                                                     *\n*    //LIST1 EXEC PGM=PRTPDS,PARM='COL(1),PRTASM,DWIDTH(3)'           *\n*    //LIST2 EXEC PGM=PRTPDS,PARM='COL(1),RANGE(IEAIPS00,LNKLST00)'   *\n*    //LIST3 EXEC PGM=PRTPDS,PARM='DIRONLY'                           *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nPRTPDS   CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         BAL   R9,OPTIONS              CHECK PARMS FOR VALID OPTIONS\n         BAL   R9,GETDATE              GET AND FORMAT DATE AND TIME\n         BAL   R9,READDIR              READ DIRECTORY AND BUILD BLDL\n         TM    OPTBYTE,FINDSVSW        DID USER REQUEST A FIND SAVE?\n         BNO   BYPJCLGN                NO, BYPASS JCL GENERATION\n         BAL   R9,CHGROUP              INVOKE FIRST TIME TO GEN JCL\nBYPJCLGN EQU   *\n         TM    OPTBYTE,RANGESW         DID USER REQUEST A RANGE?\n         BNO   BYPRNGER                NO, BYPASS RANGER ROUTINE\n         BAL   R9,RANGER               PARSE RANGE PARM AND BUILD PTRS\nBYPRNGER EQU   *\n         TM    OPTBYTE,DIRONLSW        DID USER WANT DIRECTORY ONLY?\n         BO    BYPRPRT                 YES, BYPASS REPORT\n         BAL   R9,PRTLIST              PRINT MEMBERS\nBYPRPRT  EQU   *\n         BAL   R9,PRTDIR               PRINT DIRECTORY\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SCANS THE INPUT PARMS FOR VALID OPTIONS.           *\n***********************************************************************\n         SPACE 2\nOPTIONS  DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'OPTIONS '\nBSAVE15  EQU   *\n         SPACE 1\n*------> INITIALIZE FOR OPTION SCAN\n         L     R1,0(R1)                ADDR OF PARM LIST\n         LH    R2,0(R1)                LENGTH OF PARM\n         CH    R2,=H'6'                IS IT THE MINIMUM LENGTH?\n         BL    EXIT15                  NO, EXIT ROUTINE\n         LA    R3,2(R1)                BUMP TO START OF PARM\n         LR    R4,R3                   COPY START ADDR\n         AR    R4,R2                   ADD LENGTH\n*------> CHECK FOR PRESENCE OF OPTIONS IN PARAMETER STRING\nCHKOPT   EQU   *\n         CR    R3,R4                   SCAN OVER?\n         BNL   EXIT15                  YES, EXIT ROUTINE\n         CLC   0(4,R3),=CL4'COL('      USER WANTS HER OWN COLUMNS?\n         BE    CHKCOL                  YES, GO HANDLE COLUMNS\n         CLC   0(6,R3),=CL6'PRTASM'    USER WANTS EJECTS EXPANDED?\n         BE    CHKEJECT                YES, GO HANDLE PRTASM\n         CLC   0(7,R3),=CL7'DIRONLY'   USER WANTS DIRECTORY ONLY?\n         BE    CHKDIRON                YES, GO HANDLE DIRONLY\n         CLC   0(6,R3),=CL6'RANGE('    USER WANTS TO SPECIFY RANGE\n         BE    CHKRANGE                YES, GO HANDLE RANGE\n         CLC   0(7,R3),=CL7'DWIDTH('   USER WANTS TO SPECIFY DIR WIDTH\n         BE    CHKWIDTH                YES, GO HANDLE DIR WIDTH\n         CLC   0(6,R3),=CL6'LINES('    USER WANTS TO SPECIFY PAGE SIZE\n         BE    CHKLINES                YES, GO HANDLE PAGE SIZE\n         CLC   0(5,R3),=CL6'FIND('     USER WANTS TO FIND STRING\n         BE    CHKFINDR                YES, GO HANDLE FIND STRING\n         CLC   0(8,R3),=CL8'FINDSAVE'  USER WANTS TO SAVE FIND STRINGS\n         BE    CHKFINDS                YES, GO HANDLE FIND STRING SAVE\nCHKOPT2  EQU   *\n         LA    R3,1(R3)                BUMP INDEX\n         B     CHKOPT                  CHECK NEXT POSITION\n*------> PROCESS COL(XX) OPTION\nCHKCOL   EQU   *\n         TRT   4(2,R3),TRTNUM          IS IT NUMERIC?\n         BC    7,CHKCOL2               NO, CHECK FOR 1 DIGIT ONLY\n         PACK  WORKDBLW,4(2,R3)        PACK THE NUMBER\n         B     CHKCOL3                 GO AROUND\nCHKCOL2  EQU   *\n         TRT   4(1,R3),TRTNUM          IS IT ONLY ONE DIGIT?\n         BC    7,COLBAD1               NO, ISSUE ERROR MESSAGE\n         PACK  WORKDBLW,4(1,R3)        PACK 1 DIGIT ONLY\nCHKCOL3  EQU   *\n         CVB   R2,WORKDBLW             CONVERT TO HEX\n         CH    R2,=H'51'               IS IT BEYOND LIMITS?\n         BH    COLBAD2                 YES, ISSUE ERROR MESSAGE\n         STH   R2,OFFSET               PUT IT IN THE OFFSET COUNTER\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\nCOLBAD1  EQU   *\n         WTO   'COLUMN NOT NUMERIC - USING DEFAULT'\n         B     EXIT15\nCOLBAD2  EQU   *\n         WTO   'COLUMN NOT WITHIN RANGE - USING DEFAULT'\n         B     EXIT15\n*------> PROCESS PRTASM OPTION\nCHKEJECT EQU   *\n         OI    OPTBYTE,PRTASMSW        TURN THE PRTASM OPTION ON\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS DIRONLY OPTION\nCHKDIRON EQU   *\n         OI    OPTBYTE,DIRONLSW        TURN THE DIRONLY OPTION ON\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS FINDSAVE OPTION\nCHKFINDS EQU   *\n         OI    OPTBYTE,FINDSVSW        TURN THE FINDSAVE OPTION ON\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS RANGE OPTION\nCHKRANGE EQU   *\n         OI    OPTBYTE,RANGESW         TURN THE RANGE OPTION ON\n         ST    R3,RANGEPTR             SAVE PTR TO BEGINNING OF STRING\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS DWIDTH(X) OPTION\nCHKWIDTH EQU   *\n         TRT   7(1,R3),TRTNUM          IS IT NUMERIC?\n         BC    7,WIDTHBAD              NO, ISSUE ERROR MESSAGE\n         PACK  WORKDBLW,7(1,R3)        PACK THE NUMBER\n         CVB   R2,WORKDBLW             CONVERT TO HEX\n         CH    R2,=H'6'                IS IT BEYOND LIMITS?\n         BH    WIDTHBAD                YES, ISSUE ERROR MESSAGE\n         CH    R2,=H'1'                IS IT BEYOND LIMITS?\n         BL    WIDTHBAD                YES, ISSUE ERROR MESSAGE\n         STH   R2,DWIDTH               SAVE IT FOR LATER USE\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\nWIDTHBAD EQU   *\n         WTO   'PRTPDS - DIR WIDTH ERROR - USING DEFAULT'\n         B     EXIT15\n*------> PROCESS LINES(XX) OPTION\nCHKLINES EQU   *\n         TRT   6(2,R3),TRTNUM          IS IT NUMERIC?\n         BC    7,LINESBAD              NO, ISSUE ERROR MESSAGE\n         PACK  WORKDBLW,6(2,R3)        PACK THE NUMBER\n         CP    WORKDBLW,=PL2'20'       IS IT BELOW LIMITS?\n         BL    LINESBAD                YES, ISSUE ERROR MESSAGE\n         ZAP   PAGESIZE,WORKDBLW       SAVE IT FOR LATER USE\n         SP    PAGESIZE,=PL1'3'        SUBTRACT 3 FOR HEADERS\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\nLINESBAD EQU   *\n         WTO   'PRTPDS - ERROR IN LINES PARAMETER - USING DEFAULT'\n         B     EXIT15\n*------> PROCESS FIND(XX) OPTION\nCHKFINDR EQU   *\n         OI    OPTBYTE,FINDSW          TURN ON THE FIND STRING SWITCH\n         LA    R4,20                   MAXIMUM 20 CHARACTER STRING\n         LR    R5,R3                   COPY STARTING POINT\n         LA    R5,5(R5)                POINT PAST STRING\nCHKFIND2 EQU   *\n         CLI   0(R5),C')'              FIND THE RIGHT PAREN\n         BE    CHKFIND3                GOT IT, GO MOVE IT\n         LA    R5,1(R5)                BUMP\n         BCT   R4,CHKFIND2             ITERATE\n         WTO   'PRTPDS - ERROR IN FIND PARAMETER'\n         B     CHKOPT2                 GO CHECK NEXT PARAMETER\nCHKFIND3 EQU   *\n         S     R4,=F'20'               SUBTRACT MAX LENGTH\n         MH    R4,=H'-1'               CHANGE SIGN\n         BCTR  R4,0                    DECREMENT FOR MOVE\n         STH   R4,FINDLNTH             SAVE LENGTH\n         EX    R4,FNDEXMVC             MOVE THE STRING\n         OC    FINDSTR,=CL20' '        CONVERT TO UPPER CASE\n         B     CHKOPT2                 GO CHECK NEXT PARAMETER\nFNDEXMVC MVC   FINDSTR(1),5(R3)        MOVE THE FINDER STRING\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE OBTAINS AND FORMATS THE CURRENT DATE AND TIME.       *\n***********************************************************************\n         SPACE 1\nGETDATE  DS    0H\n         ST    R9,SAVE17\n         B     BSAVE17\nSAVE17   DC    F'-1'\n         DC    CL8'GETDATE '\nBSAVE17  EQU   *\n         SPACE 1\n         TIME  DEC                     GET THE TIME IN DECIMAL\n*--> FORMAT THE CURRENT TIME\n         STM   R0,R1,WORKDBLW          STORE THE RESULTS\n         UNPK  WORKTIME,WORKDBLW(4)    UNPACK THE TIME\n         OI    WORKTIME+7,X'F0'        CLEAR THE SIGN NIBBLE\n         MVC   TIMEHH,WORKTIME+1       MOVE THE HH\n         MVC   TIMEMM,WORKTIME+3                MM\n         MVC   TIMESS,WORKTIME+5                SS\n*--> FORMAT THE CURRENT DATE\n         MVC   DIVFIELD+0(2),=XL2'0019'    MOVE ZEROES + 19\n         MVC   DIVFIELD+2(1),WORKDBLW+5    MOVE YEAR\n         MVI   DIVFIELD+3,X'0F'            MOVE SIGN NIBBLE\n         DP    DIVFIELD,=PL2'40'       DIVIDE BY 4 X 10\n         CP    DIVFIELD+2(2),=PL1'0'   IS IT A LEAP YEAR?\n         BNE   NOTLEAP                 NO, DON'T CHANGE TABLE\n         ZAP   MONTHTBL+2(2),=PL2'29'  FEBRUARY\nNOTLEAP  EQU   *\n         LA    R4,MONTHTBL             GET ADDRESS OF MONTHTBL\n         LA    R5,12                   NUMBER OF MONTHS FOR BCT\n         ZAP   MONTH,=PL1'1'           SOMEPLACE TO START\nMONTH1   EQU   *\n         CP    WORKDBLW+6(2),0(2,R4)   NUMBER OF DAYS IN MONTH\n         BNH   MONTHEND                LESS THAN MONTH, GO FORMAT\n         SP    WORKDBLW+6(2),0(2,R4)   MORE THAN A MONTH\n         AP    MONTH,=PL1'1'           ADD 1 TO MONTH\n         LA    R4,2(R4)                BUMP MONTH POINTER\n         BCT   R5,MONTH1               GO TRY NEXT MONTH\nMONTHEND EQU   *\n         LA    R3,DATE                 ADDRESS OF DATE FIELD\n         UNPK  DATEMM,MONTH            UNPACK MONTH\n         OI    1(R3),X'F0'             CLEAR SIGN NIBBLE\n         UNPK  DATEDD,WORKDBLW+6(2)    MOVE THE DAY\n         OI    4(R3),X'F0'             CLEAR SIGN NIBBLE\n         UNPK  WORKTIME+0(3),WORKDBLW+5(2) UNPACK THE YEAR\n         OI    WORKTIME+2,X'F0'        CLEAR SIGN NIBBLE\n         MVC   DATEYY,WORKTIME         MOVE THE YEAR\n         SPACE 1\nEXIT17   EQU   *\n         L     R9,SAVE17\n         BR    R9\n         EJECT\n***********************************************************************\n*    THE PURPOSE OF THIS ROUTINE IS TO READ THE DIRECTORY OF THE      *\n*  NAMED PDS INTO MEMORY, IN THE PROCESS BUILDING A BLDL LIST WHICH   *\n*  WHICH WILL BE USED TO PRINT THE INDIVIDUAL MEMBERS.                *\n*    THE ROUTINE ALSO ACQUIRES THE DSNAME OF THE PDS VIA A RDJFCB.    *\n***********************************************************************\n         SPACE 2\nREADDIR  DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'READDIR '\nBSAVE20  EQU   *\n         SPACE 1\n         OPEN  (INPUT,INPUT)\n         RDJFCB INPUT                  PICK UP THE JFCB\n         MVC   DSNAME,JFCBAREA         MOVE THE DSNAME\n         LA    R6,BLDLLIST+4           POINT TO START OF BLDL LIST\n         XR    R7,R7                   INIT MEMBER COUNT\nREADER   EQU   *\n         GET   INPUT,WORKREC           READ DIRECTORY RECORD\n         CLC   WORKREC+2(4),=F'-1'     NULL RECORD?\n         BNE   BYPLASTR                NO, BYPASS CODE\n         BCTR  R7,0                    NORMALIZE ELEMENT COUNTER\n         B     ENDIRECT                GO TO END OF DIRECTORY\nBYPLASTR EQU   *\n         LA    R2,WORKREC+2            PICK UP FIRST PAST COUNT\n         LA    R3,WORKREC              PICK UP FIRST\n         LH    R4,WORKREC              PICK UP COUNT\n         AR    R3,R4                   POINT TO END OF LOGICAL RECORD\nSCANREC  EQU   *\n         CLC   0(4,R2),=F'-1'          LAST MEMBER IN DIRECTORY?\n         BE    ENDIRECT                SAME AS END-OF-FILE\n         CR    R2,R3                   END OF LOGICAL RECORD?\n         BNL   READER                  GO GET NEXT RECORD\n         MVC   0(08,R6),0(R2)          MOVE MEMBER NAME TO BLDL LIST\n         LA    R7,1(R7)                INCREMENT MEMBER COUNT\n         XR    R5,R5                   CLEAR REGISTER\n         IC    R5,11(R2)               INSERT USER COUNT FIELD\n         L     R1,=X'0000001F'         INSERT CLEAR MASK\n         NR    R5,R1                   CLEAR ALL BUT USER COUNT\n         SLL   R5,1                    MULTIPLY BY 2\n         AR    R2,R5                   ADD USER COUNT\n         LA    R2,12(R2)               ADD PDS CONSTANT BASE\n         LA    R6,12(R6)               BUMP PTR TO BLDL LIST\n         B     SCANREC                 GO SCAN FOR NEXT ELEMENT\nENDIRECT EQU   *\n         STH   R7,BLDLLIST             STORE # MEMBERS\n         BLDL  INPUT,BLDLLIST          FILL IN TTR'S AND \"C\" FIELDS\n         CLOSE (INPUT)                 CLOSE THE INPUT FILE\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE PARSES THE RANGE EXECUTION PARAMETER AND BUILDS THE *\n*  NECESSARY POINTERS AND STORAGE AREAS TO BE USED LATER.  IF THERE   *\n*  IS AN ERROR, THE \"DIRONLY\" OPTION IS TURNED ON AND A WTO OPERATOR  *\n*  MESSAGE IS GENERATED.                                              *\n***********************************************************************\n         SPACE 2\nRANGER   DS    0H\n         ST    R9,SAVE25\n         B     BSAVE25\nSAVE25   DC    F'-1'\n         DC    CL8'RANGER  '\nBSAVE25  EQU   *\n         SPACE 1\n*------> FIND THE COMMA AND THE CLOSING PARENTHESES\n         L     R2,RANGEPTR             GET ADDR OF RANGE STRING\n         LA    R2,6(R2)                BUMP TO FIRST MEMBER NAME\n         LA    R3,18(R2)               BUMP TO ENDING ADDRESS\nRNGSCAN  EQU   *\n         CR    R2,R3                   END OF STATEMENT?\n         BE    RNGERROR                ERROR - GO HANDLE\n         CLI   0(R2),C','              IS THIS THE COMMA?\n         BE    RNGCOMMA                YES, GO STORE ADDR OF COMMA\n         CLI   0(R2),C')'              IS THIS THE CLOSING PAREN?\n         BE    RNGPAREN                YES, GO STORE ADDR OF PAREN\n         LA    R2,1(R2)                BUMP INDEX\n         B     RNGSCAN                 TRY NEXT BYTE\nRNGCOMMA EQU   *\n         ST    R2,RANGECOM             STORE ADDR OF COMMA\n         LA    R2,1(R2)                BUMP INDEX\n         B     RNGSCAN                 TRY NEXT BYTE\nRNGPAREN EQU   *\n         ST    R2,RANGEPAR             STORE ADDR OF PAREN\n         B     RNGLENTH                GO CHECK LENGTHS\n*------> IF AN ERROR OCCURS, COME HERE\nRNGERROR EQU   *\n         WTO   'PRTPDS - ERROR IN RANGE STATEMENT'\n         OI    OPTBYTE,DIRONLSW        TURN ON DIRONLY SWITCH\n         B     EXIT25\n*------> CHECK LENGTHS AND CHECK FOR SPACES IN THE RANGE\nRNGLENTH EQU   *\n         L     R2,RANGEPTR             PTR TO BEGINNING OF STRING\n         LA    R2,6(R2)                PTR TO FIRST MEMBER NAME\n         L     R3,RANGECOM             PTR TO IMBEDDED COMMA\n         SR    R3,R2                   GET LENGTH OF FIRST MEMBER\n         CH    R3,=H'1'                IS IT LESS THAN 1?\n         BL    RNGERROR                YES, THAT'S NO GOOD\n         CH    R3,=H'8'                IS IT GREATER THAN 8?\n         BH    RNGERROR                YES, THAT'S NO GOOD\n         BCTR  R3,0                    SUBTRACT ONE FOR EX CLC\n         EX    R3,RNGEXCL1             EXECUTE THE FIRST CLC\n         L     R2,RANGECOM             PTR TO BEGINNING OF 2ND NAME\n         LA    R2,1(R2)                BUMP PAST COMMA\n         L     R3,RANGEPAR             PTR TO RIGHT PAREN\n         SR    R3,R2                   GET LENGTH OF 2ND MEMBER\n         CH    R3,=H'1'                IS IT LESS THAN 1?\n         BL    RNGERROR                YES, THAT'S NO GOOD\n         CH    R3,=H'8'                IS IT GREATER THAN 8?\n         BH    RNGERROR                YES, THAT'S NO GOOD\n         BCTR  R3,0                    SUBTRACT ONE FOR EX CLC\n         EX    R3,RNGEXCL2             EXECUTE THE SECOND CLC\n         B     RNGCHKNM                GO CHECK IF MEMBERS PRESENT\nRNGEXCL1 MVC   RANGESNM(1),0(R2)       MOVE FIRST MEMBER NAME\nRNGEXCL2 MVC   RANGEENM(1),0(R2)       MOVE SECOND MEMBER NAME\n*------> CHECK LISTS TO SEE IF NAMED MEMBERS ARE PRESENT\nRNGCHKNM EQU   *\n         LH    R2,BLDLLIST             GET NUMBER OF MEMBERS\n         LA    R3,BLDLLIST+4           GET ADDR OF 1ST MEMBER\nRNGCNM1  EQU   *\n         CLC   0(8,R3),RANGESNM        IS IT THE FIRST NAMED MEMBER?\n         BE    RNGCNM2                 YES, CHECK SECOND\n         LA    R3,12(R3)               POINT TO NEXT MEMBER\n         BCT   R2,RNGCNM1              NO, CHECK NEXT\n         B     RNGERR02                FELL THROUGH - ERROR\n         LH    R2,BLDLLIST             GET NUMBER OF MEMBERS\n         LA    R3,BLDLLIST+4           GET ADDR OF 1ST MEMBER\nRNGCNM2  EQU   *\n         CLC   0(8,R3),RANGEENM        IS IT THE SECOND NAMED MEMBER?\n         BE    RNGCHKSQ                YES, CHECK SEQUENCE\n         LA    R3,12(R3)               POINT TO NEXT MEMBER\n         BCT   R2,RNGCNM2              NO, CHECK NEXT\n         B     RNGERR02                FELL THROUGH - ERROR\nRNGCHKSQ EQU   *\n         CLC   RANGESNM,RANGEENM       IS FIRST BEFORE SECOND?\n         BL    EXIT25                  YES, EXIT RTN\n         WTO   'PRTPDS - 1ST RANGE MBR NOT GREATER THAN 2ND'\n         OI    OPTBYTE,DIRONLSW        TURN ON DIRONLY SWITCH\n         B     EXIT25\nRNGERR02 EQU   *\n         WTO   'PRTPDS - EITHER OR BOTH RANGE MBRS NOT FOUND'\n         OI    OPTBYTE,DIRONLSW        TURN ON DIRONLY SWITCH\n         SPACE 1\nEXIT25   EQU   *\n         L     R9,SAVE25\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE SCANS THE BLDL LIST AND PRINTS THE MEMBERS.         *\n***********************************************************************\n         SPACE 2\nPRTLIST  DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'PRTLIST '\nBSAVE30  EQU   *\n         SPACE 1\n         OPEN  (PDS,INPUT,REPORT,OUTPUT)\n         LH    R2,BLDLLIST             GET NUMBER OF MEMBERS\n         LA    R3,BLDLLIST+4           GET FIRST MEMBER\n         L     R7,=A(RECNTLST)         GET LIST OF RECCNT TABLE\n         TM    OPTBYTE,RANGESW         WAS THE RANGE OPTION SELECTED?\n         BNO   PRTLOOP1                NO, BYPASS\nPRTCHK01 EQU   *\n         CLC   0(8,R3),RANGESNM        IS THIS THE FIRST NAME YET?\n         BE    PRTLOOP1                YES, GO START PROCESSING\n         ZAP   8(4,R3),=PL4'9999999'   SET TO SPECIAL NUMBER\n         LA    R3,12(R3)               BUMP TO NEXT MEMBER\n         BCT   R2,PRTCHK01             ITERATE\n         ISK   0,0                     INTENTIONAL BOMB\nPRTLOOP1 EQU   *\n         FIND  PDS,8(R3),C             POINT TO MEMBER IN QUESTION\n         ZAP   RECHOLD,=PL1'0'         SET RECORD COUNT HOLD TO ZERO\n         ZAP   PAGEHOLD,PAGECNT        HOLD CURRENT PAGE NUMBER\nPRTLOOP2 EQU   *\n         BAL   R9,NEWPAGE              FLIP TO NEW PAGE\nPRTLOOP3 EQU   *\n         READ  PDSDECB,SF,PDS,DEBLOCK  READ RECORD\n         CHECK PDSDECB,DSORG=ALL       CHECK FOR COMPLETION\n         L     R4,=A(DEBLOCK)          ADDRESS OF DEBLOCKING AREA\n         L     R6,PDS+68               PTR TO IOB PREFIX\n         LH    R6,22(R6)               PICK UP RESIDUAL COUNT\n         LR    R5,R4                   ADDRESS OF DEBLOCKING AREA\n         AH    R5,PDS+62               ADD BLKSIZE\n         SR    R5,R6                   SUBTRACT RESIDUAL COUNT\nPRTLOOP4 EQU   *\n         LA    R6,PRTREC               GET BASE ADDR OF PRINT RECORD\n         AH    R6,OFFSET               ADD DEFAULT OR PARM OFFSET\n         MVC   0(80,R6),0(R4)          MOVE DATA TO THE PRINT RECORD\n         AP    RECHOLD,=PL1'1'         BUMP THE RECORD COUNTER\n         TM    OPTBYTE,FINDSW          IS THERE A FIND REQUEST?\n         BNO   PRTLOOP5                NO, BRANCH AROUND CODE\n         LA    R0,80                   LOAD ITERATION REGISTER\n         SH    R0,FINDLNTH             SUBTRACT LENGTH OF (ARG-1)\n         LH    R1,FINDLNTH             LOAD LENGTH\n         LR    R8,R6                   COPY STARTING POINT\nSTRLOOP1 EQU   *\n         EX    R1,EXSTRMVC             EXECUTE THE MOVE\n         EX    R1,EXSTROC              EXECUTE THE OR\n         EX    R1,EXSTRCLC             EXECUTE THE COMPARE\n         BE    STRLOOP2                FOUND, GO ISSUE THE WTO\n         LA    R8,1(R8)                BUMP\n         BCT   R0,STRLOOP1             ITERATE\n         B     PRTLOOP5                NOT FOUND, BYPASS WTO\nEXSTRMVC MVC   CMPRSTR(0),0(R8)        MOVE STRING TO AREA\nEXSTROC  OC    CMPRSTR(0),=CL20' '     'OR' BLANKS TO REMOVE CASE\nEXSTRCLC CLC   CMPRSTR(0),FINDSTR      EXECUTED CLC FOR STRING\nSTRLOOP2 EQU   *\n         MVC   STRWTO+42(8),0(R3)      MOVE NAME OF MEMBER TO WTO\n         TM    OPTBYTE,FINDSVSW        USER REQUEST FINDSAVE?\n         BO    STRWTOB                 YES, BYPASS WTO\n         PRINT ON,GEN,DATA\nSTRWTO   WTO   'PRTPDS - STRING FOUND IN MEMBER--------       ',       X\n               DESC=6,ROUTCDE=11\n         PRINT ON,NOGEN,NODATA\nSTRWTOB  EQU   *\n         TM    OPTBYTE,FINDSVSW        IS THERE A FINDSAVE REQUEST?\n         BNO   PRTLOOP5                NO, BRANCH AROUND CODE\n         BAL   R9,CHGROUP              CALL RTN TO GEN EDIT STATEMENTS\nPRTLOOP5 EQU   *\n         BAL   R9,PRTLINE              GO PRINT THE LINE\n         LA    R4,80(R4)               BUMP PTR\n         CR    R4,R5                   END OF BLOCK?\n         BNL   PRTLOOP3                YES, GO GET NEXT BLOCK\n         B     PRTLOOP4                NO, CONTINUE DEBLOCKING\nEOFINPUT EQU   *\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    CLEAR REST OF LINE\nFILLPAGE EQU   *\n         CP    LINECNT,PAGESIZE        HAS IT BEEN RESET YET?\n         BNL   ENDMEMBR                YES, FILLING PROCESS COMPLETE\n         PUT   REPORT,PRTREC           GO PRINT THE LINE\n         AP    LINECNT,=PL1'1'         BUMP THE LINE COUNTER\n         B     FILLPAGE                CONTINUE FILLING PAGE\nENDMEMBR EQU   *\n         AP    PAGEHOLD,=PL1'1'        IT'S REALLY THE NEXT PAGE\n         ZAP   8(4,R3),PAGEHOLD        STUFF IT INTO OLD BLDL TTR\n         ZAP   0(3,R7),RECHOLD         SAVE THE RECORD COUNTER\nRANGENDI EQU   *\n         LA    R3,12(R3)               BUMP TO NEXT MEMBER\n         LA    R7,3(R7)                BUMP TO NEXT RECORD COUNTER\n         TM    OPTBYTE,RANGESW         WAS RANGE OPTION SELECTED\n         BNO   BRANGEND                NO, BYPASS THIS CODE\n         CLC   0(8,R3),RANGEENM        IS IT HIGHER THAN THE LAST MBR?\n         BNH   BRANGEND                NO, BYPASS THIS CODE\nRANGENDS EQU   *\n         ZAP   8(4,R3),=PL4'9999999'   SET TO SPECIAL NUMBER\n         BCT   R2,RANGENDI             ITERATE THROUGH SPECIAL POINT\n         B     BYPBCT01                BYPASS THE NORMAL BCT\nBRANGEND EQU   *\n         BCT   R2,PRTLOOP1             ITERATE THRU MEMBERS\nBYPBCT01 EQU   *\n         MVI   PRTREC,C'-'             CLEAR FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    CLEAR REST OF LINE\n         MVI   PRTREC,C'1'             INDICATE TOP OF FORM\n         PUT   REPORT,PRTREC           FLIP TO NEW PAGE\n         ZAP   LINECNT,=PL1'0'         CLEAR LINE COUNTER\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACE\nENDPDS   EQU   *\n         PUT   REPORT,PRTREC           PRINT THE LINE\n         AP    LINECNT,=PL1'1'         BUMP THE LINE COUNTER\n         CP    LINECNT,PAGESIZE        END OF PAGE YET?\n         BL    ENDPDS                  NO, LOOP UNTIL IT DOES\n         PUT   REPORT,PRTREC           PRINT IT\n         CLOSE (PDS,,REPORT)\n         TM    OPTBYTE,FINDSVSW        USER REQUEST FINDSAVE?\n         BNO   PRTBFSCL                NO, BYPASS CLOSE\n         CLOSE (FINDSAVE)              CLOSE SAVE FILE\nPRTBFSCL EQU   *\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE GENERATES JCL TO UPDATE A CARD-IMAGE PDS USING TSO  *\n*  EDIT UNDER THE BACKGROUND TMP (IKJEFT01).  UPON ENTRY 0(R3) MUST   *\n*  POINT TO A VALID MEMBERNAME FOR WHICH CHANGE STATEMENTS ARE TO BE  *\n*  BUILT.  THE FIRST TIME THE ROUTINE IS ENTERED IT GEN'S THE JCL.    *\n***********************************************************************\n         SPACE 2\nCHGROUP  DS    0H\n         ST    R9,SAVE35\n         B     BSAVE35\nSAVE35   DC    F'-1'\n         DC    CL8'CHGROUP '\nBSAVE35  EQU   *\n         SPACE 1\n         CLI   CHGFIRST,C'1'           FIRST TIME THROUGH?\n         BNE   CHGNFRST                NO, BYPASS JCL GEN\n         MVI   CHGFIRST,C'0'           RESET FIRST TIME SWITCH\n         OPEN  (FINDSAVE,OUTPUT)       OPEN SAVE FILE\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC(25),=CL25'//BGTMP EXEC PGM=IKJEFT01'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC(22),=CL22'//SYSPRINT DD SYSOUT=*'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC(22),=CL22'//SYSTSPRT DD SYSOUT=*'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC(15),=CL15'//SYSTSIN  DD *'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         B     EXIT35\nCHGNFRST EQU   *\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC+0(4),=CL4'EDIT'\n         MVI   FINDREC+5,X'7D'         INSERT AN APOSTROPHE\n         MVC   FINDREC+6(44),DSNAME    MOVE DSNAME\n         LA    R1,FINDREC+7            POINT TO 1ST CHAR OF DSN\n         LA    R9,43                   NUMBER OF CHARS IN DSN\nCHGFNDBL EQU   *\n         CLI   0(R1),C' '              BLANK?\n         BE    CHGFNDB2                YUP, RIGHT HERE\n         LA    R1,1(R1)                BUMP\n         BCT   R9,CHGFNDBL             ITERATE\nCHGFNDB2 EQU   *\n         MVI   0(R1),C'('              INSERT LEFT PAREN\n         MVC   1(8,R1),0(R3)           MOVE MEMBER NAME\n         LA    R1,2(R1)                POINT TO 1ST CHAR OF MBRNAME\n         LA    R9,8                    NUMBER OF CHARS IN MBRNAME\nCHGFNDB3 EQU   *\n         CLI   0(R1),C' '              BLANK?\n         BE    CHGFNDB4                YUP, RIGHT HERE\n         LA    R1,1(R1)                BUMP\n         BCT   R9,CHGFNDB3             ITERATE\nCHGFNDB4 EQU   *\n         MVI   0(R1),C')'              INSERT RIGHT PAREN\n         MVI   1(R1),X'7D'             INSERT RIGHT APOST\n         MVC   3(14,R1),=CL14'CNTL NONUM OLD'\n         CLC   0(8,R3),MBRLAST         SAME AS LAST?\n         BE    EXIT35                  YES, BYPASS WRITE\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVC   MBRLAST,0(R3)           SAVE OLD MEMBER\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC+0(9),=CL9'VERIFY ON'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC+0(14),=CL14'C * 99999999 /'\n         LH    R9,FINDLNTH             GET LENGTH\n         EX    R9,CHGEXMV1             MOVE THE FOUND STRING\nCHGEXMV1 MVC   FINDREC+14(00),FINDSTR  MOVE THE FOUND STRING\n         LA    R1,FINDREC+14           GET ORIGIN ADDRESS\n         AH    R1,FINDLNTH             ADD LENGTH OF FOUND STRING\n         LA    R1,1(R1)                BUMP LENGTH BY 1\n         MVI   0(R1),C'/'              INSERT NEXT SLASH\n         LA    R1,1(R1)                BUMP LENGTH BY 1\n         LH    R9,FINDLNTH             GET LENGTH\n         EX    R9,CHGEXMV2             MOVE THE FOUND STRING\nCHGEXMV2 MVC   0(00,R1),FINDSTR        MOVE THE FOUND STRING AGAIN\n         AH    R1,FINDLNTH             ADD LENGTH AGAIN\n         LA    R1,1(R1)                BUMP LENGTH BY 1\n         MVI   0(R1),C'/'              LAST SLASH\n         MVC   2(3,R1),=CL3'ALL'       ALL RECORDS\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC+0(15),=CL15'RENUM 10000 10000'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         MVI   FINDREC,C' '\n         MVC   FINDREC+1(L'FINDREC-1),FINDREC\n         MVC   FINDREC+0(8),=CL8'END SAVE'\n         PUT   FINDSAVE,FINDREC        WRITE OUTPUT RECORD\n         SPACE 1\nEXIT35   EQU   *\n         L     R9,SAVE35\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE PRINTS LINES AND EJECTS ON A LINE COUNTER.  IT ALSO *\n*  CHECKS TO SEE IF OPTION PRTASM IS ON, AND IF SO, EXPANDS EJECTS.   *\n***********************************************************************\n         SPACE 2\nPRTLINE  DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'PRTLINE '\nBSAVE40  EQU   *\n         SPACE 1\n         TM    OPTBYTE,PRTASMSW        DID USER REQUEST PRTASM OPTION?\n         BNO   NOPRTASM                NO, BYPASS THAT CODE\n         CLC   9(5,R4),=CL5'EJECT'     IS IT AN EJECT?\n         BE    PLEJECT                 YES, GO HANDLE EJECT\n         CLC   9(5,R4),=CL5'SPACE'     IS IT A SPACE?\n         BE    PLSPACE                 YES, GO HANDLE SPACE\n         BNE   NOPRTASM                NONE OF THOSE, HANDLE NORMALLY\nPLEJECT  EQU   *\n         ZAP   WORKDBLW,LINECNT        COPY LINE COUNTER\n         AP    WORKDBLW,=PL1'1'        BUMP BY 1\n         CP    WORKDBLW,PAGESIZE       IS IT => PAGESIZE?\n         BNL   FLIPNEW                 YES, DON'T BOTHER SPACING\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\nPLEJECT2 EQU   *\n         PUT   REPORT,PRTREC           PRINT A LINE\n         AP    LINECNT,=PL1'1'         BUMP LINE COUNTER\n         CP    LINECNT,PAGESIZE        END-OF-PAGE\n         BL    PLEJECT2                NO, KEEP SPACING\nFLIPNEW  EQU   *\n         BAL   R9,NEWPAGE              YES, FLIP TO NEW PAGE\n         B     EXIT40                  GO TO EXIT\nPLSPACE  EQU   *\n         TRT   15(1,R4),TRTNUM         IS COLUMN 16 NUMERIC?\n         BC    7,NOPRTASM              NO, HANDLE NORMALLY\n         PACK  WORKDBLW,15(1,R4)       NUMERIC - PICK IT UP\n         AP    WORKDBLW,LINECNT        ADD IT TO WHAT'S ALREADY THERE\n         CP    WORKDBLW,PAGESIZE       DOES IT GO PAST PAGE?\n         BNL   PLEJECT                 YES, MIGHT AS WELL BE AN EJECT\n         PACK  WORKDBLW,15(1,R4)       NUMERIC - PICK IT BACK UP\n         CVB   R8,WORKDBLW             CONVERT IT TO HEX\n         LTR   R8,R8                   IS IT REALISTIC?\n         BNP   NOPRTASM                NO, JUST PRINT THE RECORD\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\nPLSPACE2 EQU   *\n         PUT   REPORT,PRTREC           PRINT A LINE\n         BCT   R8,PLSPACE2             ITERATE\n         AP    LINECNT,WORKDBLW        ADD SPACE COUNT TO COUNTER\n         B     EXIT40                  GET OUT OF HERE\nNOPRTASM EQU   *\n         PUT   REPORT,PRTREC           PRINT IT\n         AP    LINECNT,=PL1'1'         BUMP LINE COUNTER\n         CP    LINECNT,PAGESIZE        END-OF-PAGE\n         BL    EXIT40                  NO, EXIT\n         BAL   R9,NEWPAGE              YES, FLIP TO NEW PAGE\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE FLIPS TO A NEW PAGE AND RESETS THE LINE COUNTER     *\n***********************************************************************\n         SPACE 2\nNEWPAGE  DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'PRTLINE '\nBSAVE50  EQU   *\n         SPACE 1\n         AP    PAGECNT,=PL1'1'         BUMP THE PAGE COUNTER\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVC   PRTREC+95(8),TIME       PRINT THE TIME IN HEADER\n         MVC   PRTREC+85(8),DATE       PRINT THE DATE IN HEADER\n         MVC   PRTREC+70(6),=XL6'402020202120'\n         ED    PRTREC+70(6),PAGECNT+1  PRINT PAGE NUMBER IN HEADER\n         MVC   PRTREC+66(4),=CL4'PAGE'\n         MVC   PRTREC+50(7),=CL7'MEMBER='\n         MVC   PRTREC+57(8),0(R3)      PRINT MEMBER NAME IN HEADER\n         MVC   PRTREC+1(4),=CL4'DSN='\n         MVC   PRTREC+5(44),DSNAME     PRINT DSNAME IN HEADER\n         MVI   PRTREC,C'1'             INDICATE TOP OF FORM\n         PUT   REPORT,PRTREC           PRINT IT\n         MVI   PRTREC,C'-'             SET FIRST BYTE TO DASH\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACE\n         PUT   REPORT,PRTREC           PRINT IT\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACE\n         PUT   REPORT,PRTREC           PRINT IT\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACES\n         ZAP   LINECNT,=PL1'0'         RE-INIT LINE COUNTER\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*    THIS ROUTINE PRINTS THE DIRECTORY USING THE OLD BLDL ENTRIES     *\n***********************************************************************\n         SPACE 2\nPRTDIR   DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'PRTDIR  '\nBSAVE60  EQU   *\n         SPACE 1\n         OPEN  (DIRECT,OUTPUT)         OPEN THE DIRECTORY PRINT FILE\n         LH    R2,BLDLLIST             GET THE NUMBER OF MEMBERS\n         LA    R3,BLDLLIST+4           GET THE ADDR OF THE 1ST MEMBER\n         L     R7,=A(RECNTLST)         ADDR OF THE RECORD COUNTER TABLE\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C'1'             INDICATE TOP OF FORM\n         MVC   PRTREC+1(26),=CL26'DIRECTORY LISTING FOR DSN='\n         MVC   PRTREC+27(44),DSNAME    MOVE THE DSNAME\n         MVC   PRTREC+72(08),DATE      MOVE THE DATE\n         MVC   PRTREC+85(08),TIME      MOVE THE TIME\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C'-'             SET LINE TO DASHES\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C' '             SET LINE TO SPACES\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVC   PRTREC+1(30),=CL30'OPTIONS==> COL(  ),PRTASM(OFF)'\n         MVC   PRTREC+31(13),=CL13',DIRONLY(OFF)'\n         MVC   PRTREC+44(25),=CL25',RANGE(-ALL-ALL,ALL-ALL-)'\n         MVC   PRTREC+69(10),=CL10',DWIDTH(6)'\n         MVC   PRTREC+79(10),=CL10',LINES(59)'\n         MVC   PRTREC+89(06),=CL06',FIND('\n         MVC   PRTREC+95(20),FINDSTR   MOVE SEARCH STRING\n         MVI   PRTREC+115,C')'         MOVE CLOSING PAREN\n         MVC   PRTREC+116(14),=CL14',FINDSAVE(OFF)'\n         TM    OPTBYTE,RANGESW         WAS A RANGE SELECTED?\n         BNO   BMVRANGE                NO, BYPASS\n         MVC   PRTREC+51(8),RANGESNM   MOVE STARTING NAME\n         MVC   PRTREC+60(8),RANGEENM   MOVE ENDING NAME\nBMVRANGE EQU   *\n         TM    OPTBYTE,FINDSW          WAS A STRING SEARCH SELECTED?\n         BO    BMVFIND                 YES, BYPASS\n         MVC   PRTREC+95(4),=CL4'NONE' INDICATE NO SEARCH REQUESTED\nBMVFIND  EQU   *\n         LH    R4,OFFSET               PICK UP OFFSET\n         CVD   R4,WORKDBLW             CONVERT TO DECIMAL\n         UNPK  PRTREC+16(2),WORKDBLW   MAKE READABLE\n         OI    PRTREC+17,X'F0'         CLEAR SIGN NIBBLE\n         TM    OPTBYTE,PRTASMSW        IS PRTASM OPTION ON?\n         BNO   BYPRTASM                NO, BYPASS THE LITERAL\n         MVC   PRTREC+27(3),=CL3'ON '  YES, CHANGE LITERAL\nBYPRTASM EQU   *\n         TM    OPTBYTE,DIRONLSW        IS DIRONLY OPTION ON?\n         BNO   BDIRONLY                NO, BYPASS THE LITERAL\n         MVC   PRTREC+40(3),=CL3'ON '  YES, CHANGE LITERAL\nBDIRONLY EQU   *\n         TM    OPTBYTE,FINDSVSW        IS FINDSAVE OPTION ON?\n         BNO   BFINDSV                 NO, BYPASS THE LITERAL\n         MVC   PRTREC+126(3),=CL3'ON ' YES, CHANGE LITERAL\nBFINDSV  EQU   *\n         LH    R4,DWIDTH               GET DIRECTORY WIDTH\n         CVD   R4,WORKDBLW             CHANGE RADIX\n         UNPK  PRTREC+77(1),WORKDBLW   UNPACK DIR WIDTH\n         OI    PRTREC+77,X'F0'         CLEAR SIGN NIBBLE\n         AP    PAGESIZE,=PL1'3'        ADD 3 FOR THE HEADERS\n         UNPK  PRTREC+86(2),PAGESIZE   UNPACK LINES (PAGESIZE)\n         OI    PRTREC+87,X'F0'         CLEAR SIGN NIBBLE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C'-'             SET LINE TO DASHES\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             INDICATE SINGLE SPACE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVC   PRTREC+1(22),=CL22'MEMBER   PGNUM/RECCNT '\n         MVC   PRTREC+23(5*22),PRTREC+1 PROPOGATE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C'-'             SET TO DASHES\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n         MVI   PRTREC,C' '             SET TO SPACES\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         PUT   DIRECT,PRTREC           PRINT THE RECORD\n*------> PRINT THE DIRECTORY\nDIRLOOP  EQU   *\n         LA    R4,PRTREC+1             GET ADDRESS OF FIRST PRINT BYTE\n         LH    R5,DWIDTH               # OF MEMBERS PER PRINT LINE\n         MVI   PRTREC,C' '             CLEAR THE FIRST BYTE\n         MVC   PRTREC+1(132),PRTREC    PROPOGATE\nDIRLOOP1 EQU   *\n         MVC   0(8,R4),0(R3)           MOVE MEMBER NAME\n         TM    OPTBYTE,DIRONLSW        WAS A PAGE NUMBER GENERATED?\n         BO    BYPAGES                 NO, DIRONLY OPTION SELECTED\n         MVC   9(12,R4),=CL12'NOT-IN-RANGE' SET UP DEFAULT\n         CP    8(4,R3),=PL4'9999999'   WAS IT THE SPECIAL NUMBER?\n         BE    BYPAGES                 YES, BYPASS PRINTING THE PAGE #\n         MVC   8(6,R4),=XL6'402020202120'\n         ED    8(6,R4),9(R3)           EDIT THE PAGE NUMBER\n         MVC   14(7,R4),=XL7'4020206B202120'\n         ED    14(7,R4),0(R7)          EDIT THE PAGE NUMBER\n         MVI   14(R4),C'/'             INSERT THE SEPARATOR\n         LA    R7,3(R7)                BUMP TO NEXT ENTRY\nBYPAGES  EQU   *\n         LA    R3,12(R3)               BUMP TO NEXT ENTRY\n         LA    R4,22(R4)               BUMP THE INDEX\n         BCTR  R2,0                    DECREMENT THE # OF MEMBERS\n         LTR   R2,R2                   IS IT ZERO YET?\n         BZ    CLOSEDIR                YES, PRINT THE LAST LINE\n         BCT   R5,DIRLOOP1             ITERATE THRU MEMBERS\n         PUT   DIRECT,PRTREC           PRINT A LINE\n         B     DIRLOOP                 ITERATE THRU PRINT LINES\nCLOSEDIR EQU   *\n         PUT   DIRECT,PRTREC           PRINT THE LAST LINE\n         CLOSE (DIRECT)                CLOSE THE PRINT FILE\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*              W O R K I N G   S T O R A G E   S E C T I O N          *\n***********************************************************************\n         SPACE 3\nINPUT    DCB   DSORG=PS,               DCB FOR READING DIRECTORY       X\n               RECFM=F,                                                X\n               MACRF=GM,                                               X\n               EODAD=ENDIRECT,                                         X\n               DDNAME=PDS,                                             X\n               EXLST=JFCBLIST,                                         X\n               BLKSIZE=256,                                            X\n               LRECL=256\nPDS      DCB   DSORG=PO,               DCB FOR READING PDS             X\n               RECFM=FB,                                               X\n               MACRF=R,                                                X\n               EODAD=EOFINPUT,                                         X\n               DDNAME=PDS\nDIRECT   DCB   DSORG=PS,               DCB FOR PRINTING DIRECTORY      X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               DDNAME=DIRECT,                                          X\n               BLKSIZE=0,                                              X\n               LRECL=133\nREPORT   DCB   DSORG=PS,               DCB FOR PRINTING PDS            X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               DDNAME=REPORT,                                          X\n               BLKSIZE=0,                                              X\n               LRECL=133\nFINDSAVE DCB   DSORG=PS,               DCB FOR SAVING FOUND IMAGES     X\n               RECFM=FB,                                               X\n               MACRF=PM,                                               X\n               DDNAME=FINDSAVE,                                        X\n               BLKSIZE=0,                                              X\n               LRECL=80\n*------> THIS AREA IS USED FOR MISCELLANEOUS STUFF\nWORKREC  DS    CL256                   READ AREA FOR DIRECTORY\nPRTREC   DS    CL133                   CURRENT PRINT RECORD\nFINDREC  DC    CL80' '                 WORK RECORD FOR FINDSAVE FILE\nDSNAME   DC    CL44' '                 DSN OF PDS DATASET FROM JFCB\nMBRLAST  DC    CL8' '                  KEEP LAST MBR TO AVOID DUPS\nLINECNT  DC    PL2'0'                  NUMBER OF LINES THIS PAGE\nPAGECNT  DC    PL4'0'                  PAGE NUMBER\nPAGEHOLD DC    PL4'0'                  HOLD PAGE # PRIOR TO DIR PRINT\nRECHOLD  DS    PL3                     HOLD RECCNT PRIOR TO DIR PRINT\nPAGESIZE DC    PL2'56'                 NUMBER OF LINES PER PAGE\nFIRSTSW  DC    C'1'                    FIRST TIME THRU NEWPAGE RTN\nCHGFIRST DC    C'1'                    FIRST TIME THRU CHGROUP RTN\n*------> THIS AREA IS USED BY THE RANGE ROUTINE\nRANGEPTR DC    A(0)                    PTR TO START OF RANGE STRING\nRANGECOM DC    A(0)                    PTR TO IMBEDDED COMMA\nRANGEPAR DC    A(0)                    PTR TO TRAILING RIGHT PAREN\nRANGESNM DC    CL8' '                  NAME OF STARTING MEMBER\nRANGEENM DC    CL8' '                  NAME OF ENDING MEMBER\n*------> THIS AREA IS USED BY THE OPTIONS ROUTINE\nOPTBYTE  DC    X'00'                   OPTIONS\nPRTASMSW EQU   X'80'                   PRTASM OPTION SELECTED\nDIRONLSW EQU   X'40'                   DIRONLY OPTION SELECTED\nRANGESW  EQU   X'20'                   RANGE OPTION SELECTED\nFINDSW   EQU   X'10'                   FIND  OPTION SELECTED\nFINDSVSW EQU   X'08'                   FINDSAVE OPTION SELECTED\nOFFSET   DC    H'27'                   DEFAULT OFFSET\nDWIDTH   DC    H'6'                    DEFAULT DIRECTORY WIDTH\nFINDSTR  DC    CL20' '                 AREA TO HOLD FINDER STRING\nFINDLNTH DC    H'0'                    LENGTH OF FOUND STRING\nCMPRSTR  DC    CL20' '                 AREA TO CHANGE CASE\n*------> THIS AREA IS USED TO CHECK FOR NUMERICS\nTRTNUM   DC    256XL1'FF'             |TRT TABLE TO CHECK NUMERICS\n         ORG   TRTNUM+C'0'            |\n         DC    XL10'00'               |\n         ORG\n*------> THE FOLLOWING IS USED BY THE RDJFCB MACRO TO PICK UP THE DSN\nJFCBLIST DS    0F                      FOR ALIGNMENT\n         DC    X'87'                   OPTION CODE + END LIST BIT\n         DC    AL3(JFCBAREA)           ADDRESS OF JFCB AREA\nJFCBAREA DS    CL176                   AREA TO HOLD THE JFCB\n*------> THE FOLLOWING IS USED BY THE DATE ROUTINE\nWORKDBLW DS    D                       WORKAREA FOR CVB CONVERSIONS\nWORKTIME DS    CL8\nMONTHTBL DC    PL2'31',PL2'28',PL2'31',PL2'30',PL2'31',PL2'30'\n         DC    PL2'31',PL2'31',PL2'30',PL2'31',PL2'30',PL2'31'\nDIVFIELD DS    PL4                     MEMORY FOR DIVIDE PACKED\nMONTH    DS    PL2                     PACKED MONTH\nTIME     DS    0CL8                    CURRENT TIME\nTIMEHH   DS    CL2\n         DC    CL1':'\nTIMEMM   DS    CL2\n         DC    CL1':'\nTIMESS   DS    CL2\nDATE     DS    0CL8                    CURRENT DATE\nDATEMM   DS    CL2\n         DC    CL1'/'\nDATEDD   DS    CL2\n         DC    CL1'/'\nDATEYY   DS    CL2\n*------>\n         LTORG\n*------>\nBLDLLIST DC    F'12'                   # MEMBERS & LENGTH\n         DC    10000XL12'00'           BLDL LIST - INITIAL\nRECNTLST DC    10000PL3'0'             AREA TO SAVE RECORD COUNTS\nDEBLOCK  DS    CL32768                 DEBLOCKING AREA\n         SPACE 3\n         END   PRTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWVOLS": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01Z\\x00\\x00\\x00\\x91\\x02\\x8f\\x00\\x91(?\\x10(\\x04\\xdc\\x01\\xb8\\x03_\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.90", "flags": 0, "createdate": "1991-01-28T00:00:00", "modifydate": "1991-10-10T10:28:00", "lines": 1244, "newlines": 440, "modlines": 863, "user": "SYSTAB"}, "text": "SHOWVOLS TITLE '** TSO SHOW VOLUMES COMMAND **'\n***********************************************************************\n*                                                                     *\n*    NAME - SHOWVOLS                                                  *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS ALL VOLUMES THAT  *\n*              ALL MOUNTED ONLINE, AND CAN BE PAGED FORWARD/BACKWARD. *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - SHOWVOLS REQUIRES A 3270 DISPLAY STATION WITH AT  *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nSHOWVOLS CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING EXTRAREA,R2             ESTABLISH ADDRESSABILITY\n         USING SCRNLINE,R4             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         BAL   R9,DEVINFO              GO GET DEVICE INFORMATION\n         BAL   R9,FINDMCAT             FIND THE MASTER-CATALOG VOLUME\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n         CLI   MESSAGE,X'7A'           DID USER PRESS PF10?\n         BNE   DRNOPF10                NO, BYPASS\n         MVI   SHIFTED,C'L'            YES, CHANGE SPEC\n         MVC   EATBLNXT,EATBLPRV       PAINT THE SAME SCREEN AGAIN\n         B     DRLOOPMN                GO BACK AND DO IT AGAIN\nDRNOPF10 EQU   *\n         CLI   MESSAGE,X'7B'           DID USER PRESS PF11?\n         BNE   DRNOPF11                NO, BYPASS\n         MVI   SHIFTED,C'R'            YES, CHANGE SPEC\n         MVC   EATBLNXT,EATBLPRV       PAINT THE SAME SCREEN AGAIN\n         B     DRLOOPMN                GO BACK AND DO IT AGAIN\nDRNOPF11 EQU   *\n*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)\n*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE\n         CLC   MESSAGE+1(2),=XL2'5C7D' WHERE IT IS NORMALLY...\n         BE    DRCSRNMV                CURSOR DIDN'T MOVE\n         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT\n         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN\n         CLC   ROW,=CL2'05'            LESS THAN ROW 5?\n         BL    DRCSRNMV                IGNORE REQUEST\n         CLC   ROW,=CL2'22'            MORE THAN ROW 22?\n         BH    DRCSRNMV                IGNORE REQUEST\n         PACK  WORKDBLW,ROW            PACK THE ROW\n         CVB   R4,WORKDBLW             MAKE IT HEX\n         BCTR  R4,0                    NORMALIZE LINE NUMBER\n         MH    R4,=H'80'               MULTIPLY LINE LENGTH\n         LA    R3,SC1LN01              GET ORIGIN\n         AR    R4,R3                   PTR TO START OF LINE\n         MVC   WORKDBLW(6),SCVOLSER    MOVE VOLSER FOUND FROM SCREEN\n         L     R2,EATBLFST             GET ORIGIN OF TABLE\n         L     R3,EATBLAST             GET END OF TABLE\nDRSRCH01 EQU   *\n         CR    R2,R3                   END-OF-TABLE?\n         BNL   DRCSRNMV                IGNORE REQUEST\n         CLC   WORKDBLW(6),EAVOLSER    IS IT THIS ENTRY?\n         BE    DRSRCHFN                YES, GO TO FOUND\n         LA    R2,EXTRLNTH(R2)         BUMP\n         B     DRSRCH01                ITERATE\nDRSRCHFN EQU   *\n         ST    R2,EATBLNXT             SET NEW PTR\n         ST    R2,EATBLTOP             SET NEW PTR\nDRCSRNMV EQU   *\n         CLI   MESSAGE,C'7'            DID USER PRESS PF7?\n         BNE   DRNOTPB                 BYPASS PAGEBACK CODE\n         L     R2,EATBLTOP             PTR TO NEXT ENTRY\n         LA    R3,EXTRLNTH             GET LENGTH OF NODE\n         MH    R3,=H'17'               GO BACK 17 LINES\n         SR    R2,R3                   SUBTRACT 17 VOLUMES\n         C     R2,EATBLFST             GONE TOO FAR?\n         BNL   DRBYPTOO                OK, BYPASS RESET CODE\n         L     R2,EATBLFST             RESET\nDRBYPTOO EQU   *\n         ST    R2,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)\nDRNOTPB  EQU   *\n         B     DRLOOPMN                MAIN DRIVER LOOP\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SCANS THROUGH THE UCB LOOKUP TABLE (PSEUDO) AND    *\n*   STORES THE ACCUMULATED INFORMATION IN THE DEVICE INFORMATION      *\n*   TABLE FOR LATER USE.                                              *\n***********************************************************************\n         SPACE 2\nDEVINFO  DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'DEVINFO '\nBSAVE20  EQU   *\n         SPACE 1\n         L     R0,=A(EXTRLNTH)         SET FOR NODE LENGTH\n         MH    R0,=AL2(500)            MAX NUMBER OF DASD\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R2,R1                   COPY ORIGIN ADDRESS\n         ST    R2,EATBLFST             STORE ORIGIN ADDRESS\n         ST    R2,EATBLNXT             INITIALLY FIRST ENTRY\n*------------------------------------------------------------------\n***>>>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<<<<<<***\n** PARM: (100BYTE-WORK, 1BYTE-DEV-CLASS, 1WORD-UCB-PTR)           **\n** RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS           **\n*------------------------------------------------------------------\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKDBLW\n         LA    R1,DSXAWORK             ADDR OF UCB WORKDBLW\n         ST    R1,DSXAWA               STORE IT IN PARM LIST\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH\n         ST    R1,DSXADEVT             STORE IN PARM LIST\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR\n         ST    R1,DSXAUCB              IN PARM LIST\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST\nUCBLOOP  EQU   *\n         L     R15,CVTPTR\n         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OPERATING SYSTEM TYPE\n         ICM   R15,15,CVTUCBSC-CVT(R15) CVTUCBSC VALID?(IOSVSUCB)\n         LA    R1,DSXALIST             PTR TO PARM LIST\n         BALR  R14,R15                 BRANCH TO IT\n         LTR   R15,R15                 GOT ONE?\n         BNZ   UCBLPEND                THAT'S PLENTY\n         L     R8,DSXAUCBP GET ADR OF  UCB FROM PTR\n         USING UCBCMSEG,R8\n         CLI   UCBID,UCBSTND           IS ADDRESS VALID\n         BNE   UCBLOOP                 NO\n         CLI   UCBDVCLS,UCB3DACC       IS IT DASDI\n         BNE   UCBLOOP                 NO   SKIP\n         TM    UCBSTAT,UCBONLI         IS IT ONLINE\n         BNO   UCBLOOP                 NO  SKIP\n         TM    UCBSTAT,UCBCHGS         IS IT CHANGING STATUS\n         BO    UCBLOOP                 YES SKIP\n         TM    UCBFLA,UCBNRY           IS IT NOT READY\n         BO    UCBLOOP                 YES SKIP\nMVDEVTYP EQU   *\n         MVI   EAFLAGS,X'00'           CLEAR FLAGS\n         MVC   EAVOLSER,UCBVOLI        MOVE VOLSER\n         MVC   EAUNITYP,UCBDVCLS       MOVE DEVICE TYPE\n         MVC   EAUCBID,UCBNAME         MOVE UCB NUMBER\n*------- ----- SHOW NUMBER OF USERS\n         XR    R1,R1\n         IC    R1,UCBUSER              CONCURRENT USERS(+26X)\n         LH    R1,UCBUSER              2BYTES IN XA            DDMMM84\n         CVD   R1,WORKDBLW             PACKED \"   \"\n         MVC   EAUSECNT,WORKDBLW+6     MOVE FIELD\n*------- ----- SHOW CHANNEL PATHS\n         LH    R15,=H'-24'             GET TO UCBCHPS\n         AR    R15,R8                  GET ADDR OF UCBSHPS\n         UNPK  EACHPATH(9),0(5,R15)    HANDLE 1ST FOUR PATHS\n         MVI   EACHPATH+8,C' '         GET RID OF SIGN\n         TR    EACHPATH(8),HEXTR-X'F0' MAKE DISPLAYABLE\n*------- ----- SHOW ONLINE PATHS\n         LH    R15,=H'-28'             GET TO UCBLPM\n         AR    R15,R8                  GET ADDR OF UCBLPM\n         IC    R15,0(R15)              GET PATH BYTE\n         SRL   R15,4                   ISOLATE NIBBLE\n         N     R15,=F'15'              CLEAR HIGH-ORDER BYTES\n         XR    R14,R14                 CLEAR A WORK REG\n         IC    R14,PTHONTAB(R15)       TRANSLATE TO ONLINE PATHS\n         TM    DSADCB,DSADCBXA         XA?\n         BZ    DOPATHR                 NO, CONTINUE\n         SH    R14,=H'4'               370:0=ON/1=OFF  XA:0=OFF/1=ON\n         LPR   R14,R14                 FLIP FOR XA LOGIC\nDOPATHR  EQU   *\n         STC   R14,EAPATHON            SAVE NUMBER OF PATHS\n         TR    EAPATHON,HEXTR          MAKE DISPLAYABLE\n*------- ----- SHOW PATH MASK\n         SLL   R15,2                   *4=0,4,8,...\n         LA    R14,PATHMASK(R15)       CONVER PATH TO BITS\n         MVC   EAPTHMSK,0(R14)         NIBBLE IN BITS C'XXXX'\n*------- ----- SHOW SUBCHANNEL NUMBER\n         LH    R15,=H'-34'             GET TO THE ADDRESS OF\n         AR    R15,R8                  THE SUBCHANNEL NUMBER\n         LH    R15,0(R15)              PICK UP HALFWORD SUBCHANNEL\n         CVD   R15,WORKDBLW\n         MVC   EASUBCHN,WORKDBLW+6     STORE SUBCHANNEL NUMBER\n*------- ----- GET VOLUME ATTRIBUTE\n         TM    UCBSTAB,UCBBPRV         IS IT PRIVATE?\n         BNO   CHKPUB                  NO BRANCH AROUND\n         MVC   EAVOLATR,=C'PVT'     ELSE\n         B     CHKIPL\nCHKPUB   TM    UCBSTAB,UCBBPUB         IS IT PUBLIC?\n         BNO   CHKSTR                  NO BRANCH AROUND\n         MVC   EAVOLATR,=C'PUB'     ELSE\n         B     CHKIPL\nCHKSTR   TM    UCBSTAB,UCBBSTR         IS IT STORAGE?\n         BNO   CHKIPL                  NO BRANCH AROUND\n         MVC   EAVOLATR,=C'STR'     ELSE\n*------- ----- HI-LITE IPL, PAGE, AND CAT VOLUMES\nCHKIPL   EQU   *\n         TM    UCBSTAT,UCBSYSR         IS THIS THE IPL SYSRES?\n         BNO   CHKCAT                  NO, BYPASS\n         OI    EAFLAGS,EAIPLRES        YES, MARK\n         MVC   EAVOLATR,=CL3'IPL'      INDICATE IPL VOLUME\nCHKCAT   EQU   *\n         TM    UCBSTAB,UCBBNUL         DOES THIS HAVE A CATALOG?\n         BNO   CHKPAGE                 NO, BYPASS\n         OI    EAFLAGS,EACATVOL        YES, MARK\n         MVC   EAVOLATR,=CL3'CAT'      INDICATE IPL VOLUME\nCHKPAGE  EQU   *\n         TM    UCBSTAB,UCBPGFL         DOES THIS HAVE PAGE DATASETS?\n         BNO   DIBYPCHK                NO, BYPASS\n         OI    EAFLAGS,EAPAGING        YES, MARK\n         MVC   EAVOLATR,=CL3'PAG'      INDICATE IPL VOLUME\nDIBYPCHK EQU   *\n*------- ----- SEE IF INDEXED\n         MVI   EAIXFLAG,C' '           INITIALIZE FIELD\nCHKIX    CVAFTST  UCB=(R8)             CHECK FOR IX BIT\n         B     BRTBL(R15)              TEST  RETURN CODE\nBRTBL    B     RC0\n         B     RC4\n         B     RC8                     INDEXED\n         B     RC12\n         B     RC16\nRC8      MVI   EAIXFLAG,C'I'\nRC4      EQU   *\nRC0      EQU   *\nRC12     EQU   *\nRC16     EQU   *\n*------- ----- PICK UP VOLUME SPACE INFORMATION\n         LA    R0,UCBCMSEG             ADDRESS OF UCB COMMON SEGMENT\n         LA    R1,UCBWA                ADDRESS OF UCB WORKAREA\n         SVC   78                      ISSUE LSPACE SVC\n         MVC   EAFREECY,WA#CYL         NUMBER OF FREE CYLINDERS\n         MVC   EAFREETR,WA#TRK         FREE TRACKS\n         MVC   EAFREEXT,WA#EXT         FREE EXTENTS\n         MVC   EACCYL,WA#CCYL          CONTIGUOUS CYLINDERS\n         MVC   EACTRK,WA#CTRK          CONTIGUOUS TRACKS\n*------- ----- BUMP TO NEXT ENTRY\n         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY\n         B     UCBLOOP                 ITERATE\nUCBLPEND EQU   *\n         ST    R2,EATBLAST             STORE PTR TO END OF TABLE\n         DROP  R8\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE DYNAMICALLY ALLOCATES 'SYS1.NUCLEUS(SYSCATLG)',      *\n*   READS THE MASTER-CATALOG DESCRIPTION RECORD AND THEN FREES IT.    *\n*   THE INFORMATION IS STORED IN THE EXTRACT AREA FOR LATER USE.      *\n***********************************************************************\n         SPACE 2\nFINDMCAT DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'FINDMCAT'\nBSAVE30  EQU   *\n         SPACE 1\n         XC    S99C1,S99C1             CLEAR\n         XC    S99C2,S99C2             CLEAR\n         XC    S99INFO,S99INFO         CLEAR\n         LA    R1,S99RBPTR             GET ADDRESS OF S99 PARM LIST\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99\n         LTR   R15,R15                 DID DYNALLOC WORK OK?\n         BNZ   EXIT30                  NO GOOD, TRY NEXT MOM\n         L     R0,=A(32*1024)          MEMORY FOR I/O\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R8,R1                   SAVE PTR TO MEMORY\n         OPEN  (SYSCATLG,(INPUT))      OPEN THE MEMBER\n         READ  READDECB,SF,SYSCATLG,(R8),32760\n         CHECK READDECB                CHECK FOR COMPLETION\n         MVC   MCATREC,0(R8)           MOVE THE RECORD TO SAFEKEEP\n         CLOSE (SYSCATLG)              CLOSE THE MEMBER\n         L     R0,=A(32*1024)          MEMORY FOR I/O\n         FREEMAIN R,LV=(R0),A=(R8)     FREE THE MEMORY\n         XC    S98C1,S98C1             CLEAR\n         XC    S98C2,S98C2             CLEAR\n         XC    S98INFO,S98INFO         CLEAR\n         LA    R1,S98RBPTR             GET ADDRESS OF S99 PARM LIST\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99\n         L     R2,EATBLFST             GET ORIGIN OF THE TABLE\n         L     R3,EATBLAST             GET END    OF THE TABLE\nFMLOOP01 EQU   *\n         CR    R2,R3                   END OF TABLE?\n         BNL   EXIT30                  TERMINATE\n         CLC   EAVOLSER,MCATVOL        SAME VOLUME NAME?\n         BE    FMLOOPFN                FOUND\n         LA    R2,EXTRLNTH(R2)         BUMP\n         B     FMLOOP01                ITERATE\nFMLOOPFN EQU   *\n         OI    EAFLAGS,EAMCAT          POST STATUS\n         MVC   EAVOLATR,=CL3'MCT'      POST STATUS\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *\n*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *\n*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *\n***********************************************************************\n         SPACE 2\nFORMATER DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'FORMATER'\nBSAVE50  EQU   *\n         SPACE 1\n         XC    SCRESPTR,SCRESPTR       CLEAR IPL RES PTR\n         XC    SCPAGPTR,SCPAGPTR       CLEAR PAGING  PTR\n         XC    SCMCTPTR,SCMCTPTR       CLEAR MCAT    PTR\n         L     R2,EATBLNXT             GET NEXT ADDRESS\n         ST    R2,EATBLTOP             SAVE CURRENT TOP\n         LA    R4,SC1LN05              GET ORIGIN IN SCREEN\n         LA    R5,18                   18 LINES OF DATA PER SCREEN\nFMTLOOP1 EQU   *\n         C     R2,EATBLAST             END OF EXTRACT TABLE?\n         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE\n         MVC   SCVOLSER,EAVOLSER       MOVE VOLSER\n         MVC   SCUCBID,EAUCBID         MOVE UCB-NUMBER\n         TM    EAFLAGS,EAIPLRES        ENTRY FOR THE IPL RES VOLUME?\n         BNO   FMTNOIPL                NO, BYPASS\n         ST    R4,SCRESPTR             STORE PTR TO RES VOLUME\nFMTNOIPL EQU   *\n         TM    EAFLAGS,EAPAGING        ENTRY FOR THE PAGING VOLUME?\n         BNO   FMTNOPAG                NO, BYPASS\n         ST    R4,SCPAGPTR             STORE PTR TO PAG VOLUME\nFMTNOPAG EQU   *\n         TM    EAFLAGS,EAMCAT          ENTRY FOR THE MASTER CATALOG?\n         BNO   FMTNOMCT                NO, BYPASS\n         ST    R4,SCMCTPTR             STORE PTR TO MCT VOLUME\nFMTNOMCT EQU   *\n*        MVC   SCUNITYP,EAUNITYP       MOVE UNIT-TYPE\n*------> FIND THE DEVICE TYPE IN THE TABLE AND GET THE TRK/CYL COUNT\nFDEVICE0 EQU   *\n         LA    R6,DEVTABLE\nFDEVICE1 EQU   *\n         CLC   0(2,R6),=X'0000'    END OF TABLE?\n         BE    FUNKNOWN                YES, SET TO UNKNOWN\n         CLC   0(2,R6),EAUNITYP    IF SAME DEVICE CODE....\n         BE    FDEVICE2\n         LA    R6,15(R6)           BUMP TO NEXT ENTRY\n         B     FDEVICE1\nFUNKNOWN EQU   *\n         MVC   SCUNITYP,=CL6'UNKNWN'    DEVICE TYPE NOT KNOWN\n         B     FMTNEXT             BRANCH AROUND\nFDEVICE2 EQU   *\n         MVC   SCUNITYP,9(R6)      MOVE UNIT TYPE\n         MVC   SCUSECNT,=XL4'40202120'  NUMBER OF USERS\n         ED    SCUSECNT,EAUSECNT   FORMAT FIELD\n         MVC   SCSUBCHN,=XL4'40202120'  SUBCHANNEL NUMBER\n         ED    SCSUBCHN,EASUBCHN   FORMAT FIELD\n         MVC   SCVOLATR,EAVOLATR   MOVE VOLUME ATTRIBUTE\n         MVC   SCIXFLAG,EAIXFLAG   MOVE INDEXED = I\n         MVC   SCCHPATH,EACHPATH   MOVE CHANNEL PATHS\n         MVC   SCPATHON,EAPATHON   MOVE NUMBER OF PATHS ONLINE\n         MVC   SCPTHMSK,EAPTHMSK   MOVE PATH MASK\n         CLI   SHIFTED,C'R'        ARE WE RIGHT-SHIFTED?\n         BE    FMTRIGHT            YES, BRANCH AROUND CODE\n*------- ----- THIS SECTION IS EXECUTED IF WE ARE LEFT-SHIFTED\n         TRT   EAFREECY,TRTALLOW   IS THIS FIELD NUMERIC?\n         BC    8,OKTOPACK          YEP, BYPASS\n         MVC   EAFREECY,=CL4'0000' NO, CLEAR\n         MVC   EAFREETR,=CL4'0000' NO, CLEAR\n         MVC   EAFREEXT,=CL4'0000' NO, CLEAR\nOKTOPACK EQU   *\n         MVC   SC1LN03(80),SC1LN3L MOVE TITLE\n         PACK  WORKDBLW,EAFREECY   PACK FREE CYLINDERS\n         MVC   SCFREECY,=XL7'4020206B202120'\n         ED    SCFREECY,WORKDBLW+5\n         PACK  WORKDBLW,EAFREETR   PACK FREE TRACKS\n         MVC   SCFREETR,=XL7'4020206B202120'\n         ED    SCFREETR,WORKDBLW+5\n         PACK  WORKDBLW,EAFREEXT   PACK FREE EXTENTS\n         MVC   SCFREEXT,=XL6'402020202120'\n         ED    SCFREEXT,WORKDBLW+5\n         B     FMTNEXT             BYPASS RIGHT-SHIFTED CODE\n*------- ----- THIS SECTION IS EXECUTED IF WE ARE RIGHT-SHIFTED\nFMTRIGHT EQU   *\n         MVC   SC1LN03(80),SC1LN3R MOVE TITLE\n         MVC   SCTRKCNT,=XL4'40202120'   TRACKS / CYLINDER\n         ED    SCTRKCNT,2(R6)      FORMAT FIELD\n         MVC   SCCYLCNT,=XL4'40202120'   CYLINDERS / VOLUME\n         ED    SCCYLCNT,4(R6)      FORMAT FIELD\n         MVC   SCBYTCNT,=XL7'4020206B202120' BYTES / TRACK\n         ED    SCBYTCNT,6(R6)      FORMAT FIELD\nFMTNEXT  EQU   *\n         LA    R4,80(R4)               BUMP TO NEXT SCREEN LINE\n         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY\n         BCT   R5,FMTLOOP1             ITERATE\n         LA    R7,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY\n         SR    R2,R7                   SUBTRACT ONE ENTRY\n         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR\n         ST    R2,EATBLNXT             STORE NEW NEXT PTR\nFMTCLEAR EQU   *\n         LTR   R5,R5                   RUN OUT OF LINES YET?\n         BZ    FMTEND                  YES, ENOUGH IS ENOUGH\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE\n         LA    R4,80(R4)               BUMP TO NEXT LINE\n         BCT   R5,FMTCLEAR             ITERATE\nFMTEND   EQU   *\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE60  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         BAL   R9,HILITRES             HIGH-LIGHT RES IF PRESENT\n         BAL   R9,YELLOPAG             HIGH-LIGHT PAG IF PRESENT\n         BAL   R9,HILITMCT             HIGH-LIGHT MCAT IF PRESENT\n         TGET  MESSAGE,126,ASIS        GET DUMMY INPUT\n         CLI   MESSAGE,C'3'            DID USER PRESS PF3?\n         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER\n         BE    FSREFRSH                RE-PAINT SCREEN\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT70                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE HIGH-LIGHTS THE RES VOLUME IF PRESENT ON THE SCREEN  *\n***********************************************************************\n         SPACE 2\nHILITRES DS    0H\n         ST    R9,SAVE80\n         B     BSAVE80\nSAVE80   DC    F'-1'\n         DC    CL8'HILITRES'\nBSAVE80  EQU   *\n         SPACE 1\n         L     R8,SCRESPTR             PICK UP PTR TO RES VOLUME\n         LTR   R8,R8                   IS ONE PRESENT?\n         BZ    EXIT80                  NO, SPLIT\n         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   SC1HILTR+01(2),STARTADR ADDRESS TO YELLOW: STARTING\n         MVC   SC1HILTR+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING\n         TPUT  SC1HILIT,LSC1HIL,NOEDIT HI-LITE IPL SYSRES\n         SPACE 1\nEXIT80   EQU   *\n         L     R9,SAVE80\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE YELLOW-LIGHTS ANY PAGING DATASETS THAT SHOW UP       *\n***********************************************************************\n         SPACE 2\nYELLOPAG DS    0H\n         ST    R9,SAVE90\n         B     BSAVE90\nSAVE90   DC    F'-1'\n         DC    CL8'YELLOPAG'\nBSAVE90  EQU   *\n         SPACE 1\n         L     R8,SCPAGPTR             PICK UP PTR TO PAG VOLUME\n         LTR   R8,R8                   IS ONE PRESENT?\n         BZ    EXIT90                  NO, SPLIT\n*------> UNLIKE SYSRES, THERE MAY BE MORE THAN ONE PAGE VOL PER SCREEN\n         LA    R4,SC1LN05              GET ORIGIN ADDRESS\n         LA    R5,18                   # DISPLAY LINES PER SCREEN\nYPLOOP01 EQU   *\n         CLC   SCVOLATR,=CL3'PAG'      PAGING VOLUME?\n         BE    YPFOUND1                YEP, GO PROCESS\nYPLOOP02 EQU   *\n         LA    R4,80(R4)               BUMP\n         BCT   R5,YPLOOP01             ITERATE\n         B     EXIT90\nYPFOUND1 EQU   *\n         LR    R8,R4                   COPY THIS PTR\n         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   SC1YELLA+01(2),STARTADR ADDRESS TO YELLOW: STARTING\n         MVC   SC1YELLA+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING\n         TPUT  SC1YELLO,LSC1YEL,NOEDIT YELLOW-LIGHT PAGING VOLUME\n         B     YPLOOP02                GO BACK TO BUMP/ITERATE CODE\n         SPACE 1\nEXIT90   EQU   *\n         L     R9,SAVE90\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *\n***********************************************************************\n         SPACE 2\nCALCADDR DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CALCADDR'\nBSAVE100 EQU   *\n         SPACE 1\n*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE\n         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN\n         SR    R8,R7                   GENERATE DISPLACEMENT\n         CVD   R8,WORKDBLW             CONVERT TO DECIMAL\n         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH\n         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE\n         UNPK  ROW,WORKDBLW+4(2)       UNPACK\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   STARTADR,BUFFADDR       STARTING ADDRESS\n         MVC   COLUMN,=CL2'26'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS\n         SPACE 1\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE HIGH-LIGHTS THE MCT VOLUME IF PRESENT ON THE SCREEN  *\n***********************************************************************\n         SPACE 2\nHILITMCT DS    0H\n         ST    R9,SAVE110\n         B     BSAVE110\nSAVE110  DC    F'-1'\n         DC    CL8'HILITMCT'\nBSAVE110 EQU   *\n         SPACE 1\n         L     R8,SCMCTPTR             PICK UP PTR TO RES VOLUME\n         LTR   R8,R8                   IS ONE PRESENT?\n         BZ    EXIT110                 NO, SPLIT\n         BAL   R9,CALCADDR             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   SC1MCATA+01(2),STARTADR ADDRESS TO YELLOW: STARTING\n         MVC   SC1MCATA+12(2),BUFFADDR ADDRESS TO YELLOW: ENDING\n         TPUT  SC1MCAT,LSC1MCT,NOEDIT  HI-LITE MASTER CATALOG\n         SPACE 1\nEXIT110  EQU   *\n         L     R9,SAVE110\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE510 EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *\n***********************************************************************\n         SPACE 2\nTUBETORC DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'TUBETORC'\nBSAVE520 EQU   *\n         SPACE 1\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  ROW,R327FLD1(2)         RETURN THE ROW\n         OI    ROW+1,X'F0'             CLEAR SIGN\n         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN\n         OI    COLUMN+1,X'F0'          CLEAR SIGN\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nSCRESPTR DC    A(0)                    PTR TO IPL SYSRES PTR IN SCREEN\nSCPAGPTR DC    A(0)                    PTR TO PAGING VOLUME  IN SCREEN\nSCMCTPTR DC    A(0)                    PTR TO MCAT VOLUME    IN SCREEN\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL19'COMMAND INTERRUPTED'\nSHIFTED  DC    C'L'                    LEFT(L) OR RIGHT(R)\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\nENDLINE1 DC    CL40'--------------------- MORE TO COME - PRE'\n         DC    CL40'SS ENTER FOR NEXT PAGE -----------------'\nENDLINE2 DC    CL40'------------------ DISPLAY COMPLETE - PR'\n         DC    CL40'ESS ENTER TO CONTINUE ------------------'\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\n         SPACE 1\nHEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nSTARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING\nENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n***********************************************************************\n*      WORK AREA FOR DASD ANALYSIS ROUTINE (SVC 78/LSPACE)            *\n***********************************************************************\n         SPACE 1\nUCBWA    DS    CL30                    AREA FOR LSPACE RETURN\nWA#CYL   EQU   UCBWA+06,4              FREE CYL\nWA#TRK   EQU   UCBWA+11,4              FREE TRK\nWA#EXT   EQU   UCBWA+16,4              EXTENTS\nWA#CCYL  EQU   UCBWA+21,4              CONTIG. CYL\nWA#CTRK  EQU   UCBWA+26,4              CONTIG. TRK\n         EJECT\n***********************************************************************\n*      WORK AREA FOR UCB SCAN ROUTINE (FROM TSUCBSCN)                 *\n***********************************************************************\n         SPACE 1\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n******** ***** *********************** END OF UCB LOOKUP DSA\nDSAEND   EQU  *                         LENGTH OF WORK\nDSADCB   DC   XL1'00'                   EXTRACT FROM CVT\nDSADCBXA EQU  X'80'                     MVS/XA\n*                 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F  - MASK BITS\nPTHONTAB DC   AL1(4,3,3,2,3,2,2,1,3,2,2,1,2,1,1,0) - # ZEROS\nPATHMASK DC   C'0000',C'0001',C'0010',C'0011'        0-3 MASK\n         DC   C'0100',C'0101',C'0110',C'0111'        4-7 MASK\n         DC   C'1000',C'1001',C'1010',C'1011'        8-B MASK\n         DC   C'1100',C'1101',C'1110',C'1111'        C-F MASK\nEATBLFST DS   F                        POINTER TO BGN OF EXTRACT TABLE\nEATBLTOP DS   F                        POINTER TO TOP OF CURRENT SCREEN\nEATBLAST DS   F                        POINTER TO END OF EXTRACT TABLE\nEATBLPRV DS   F                        POINTER TO PREVIOUS SCREEN START\nEATBLNXT DS   F                        POINTER TO NEXT ENTRY TO SHOW\n         EJECT\n***********************************************************************\n*                                                                     *\n*               D E V I C E   N A M E   T A B L E                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDEVTABLE EQU   *\n         DC    X'2006'\n         DC    PL2'8'\n         DC    PL2'0'\n         DC    PL3'0'\n         DC    CL6'2305-1'\n         DC    X'2007'\n         DC    PL2'8'\n         DC    PL2'0'\n         DC    PL3'0'\n         DC    CL6'2305-2'\n         DC    X'2009'\n         DC    PL2'19'\n         DC    PL2'404'\n         DC    PL3'13030'\n         DC    CL6'3330  '\n         DC    X'200D'\n         DC    PL2'19'\n         DC    PL2'808'\n         DC    PL3'13030'\n         DC    CL6'3330-1'\n         DC    X'200B'\n         DC    PL2'30'\n         DC    PL2'555'\n         DC    PL3'19069'\n         DC    CL6'3350  '\n         DC    X'200E'\n         DC    PL2'15'\n         DC    PL2'885'\n         DC    PL3'47968'\n         DC    CL6'3380  '\n         DC    X'0000'         ** MARKS END OF DEVICE TABLE **\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+67)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> BACK-LIGHT THE TITLE LINE\n         DC    XL16'1140402903C0F841F442F311C14F1DE8'\n*--> REVERSE VIDEO THE TITLE BLOCKS\n         DC    XL16'11C2602903C0F841F242F111C36F1DE8'\n*--> LONG RANGE SENSORS\n*        DC    XL16'11C1D22903C0F8410042F511C1D61DE8'\n*--> STATISTICS\n*        DC    XL16'11D54A2903C0F8410042F411D54F1DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         SPACE 2\n*------- ----- HI-LITE RES VOLUME FIELD\nSC1HILIT EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\nSC1HILTR DC    XL16'1199992903C0F841F142F21199991DE4'\n         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY\nESC1HIL  EQU   *\nLSC1HIL  EQU   ESC1HIL-SC1HILIT\n         SPACE 2\n*------- ----- MAGENTA MCAT VOLUME\nSC1MCAT  EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\nSC1MCATA DC    XL16'1199992903C0F8410042F31199991DE4'\n         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY\nESC1MCT  EQU   *\nLSC1MCT  EQU   ESC1MCT-SC1MCAT\n         SPACE 2\n*------- ----- YELLOW PAGE DATASETS\nSC1YELLO EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\nSC1YELLA DC    XL16'1199992903C0F8410042F61199991DE4'\n         DC    XL4'115C7D13'           SET BUFFER ADDR/COMMAND ENTRY\nESC1YEL  EQU   *\nLSC1YEL  EQU   ESC1YEL-SC1YELLO\n         EJECT\n***********************************************************************\n*  THE FOLLOWING IS THE DYNALLOC AREA FOR SYS1.NUCLEUS(SYSCATLG)      *\n***********************************************************************\n         SPACE 1\n         DS    0F\nS99RBPTR DC    X'80',AL3(S99RB)        ADDR OF THE REQUEST BLOCK\nS99RB    DC    AL1(20)                 CONSTANT LENGTH\nS99TYPE  DC    AL1(01)                 DSNAME ALLOCATION\n         DC    X'0000'                 MAY USE EXISTING ALLOCATION\nS99ERROR DS    CL2                     RETURN ERROR CODE\nS99INFO  DS    CL2                     ERROR INFO CODE\nS99TXTPP DC    A(S99TUPL)              PTR TO TEXT PTR LIST\nS99C1    DC    A(0)                    RESERVED\nS99C2    DC    A(0)                    RESERVED\nS99TUPL  DC    A(S99TXT01)             PTR TO TEXT 01\n         DC    A(S99TXT02)             PTR TO TEXT 02\n         DC    A(S99TXT03)             PTR TO TEXT 02\n         DC    X'80',AL3(S99TXT04)     PTR TO LAST TEXT BLOCK\nS99TXT01 DC    XL06'000100010008'      ESTABLISH DDNAME\nS99DDNAM DC    CL8'SYSCATLG'               THIS IS THE DDNAME\nS99TXT02 DC    XL06'00020001000C'      REQUEST BY DSNAME\nS99DSN   DC    CL12'SYS1.NUCLEUS'          THIS IS THE DSNAME\nS99TXT03 DC    XL06'000300010008'      REQUEST BY MEMBER\nS99MBR   DC    CL8'SYSCATLG'               THIS IS THE MEMBER\nS99TXT04 DC    XL07'00040001000108'    DISP=SHR\n         SPACE 1\n*--> THE FOLLOWING ENTRIES ARE USED BY DYNALLOC (SVC 99)\n         DS    0F\nS98RBPTR DC    X'80',AL3(S98RB)        ADDR OF THE REQUEST BLOCK\nS98RB    DC    AL1(20)                 CONSTANT LENGTH\nS98TYPE  DC    AL1(02)                 UNALLOCATE DDNAME\n         DC    X'0000'                 MAY USE EXISTING ALLOCATION\nS98ERROR DS    CL2                     RETURN ERROR CODE\nS98INFO  DS    CL2                     ERROR INFO CODE\nS98TXTPP DC    A(S98TUPL)              PTR TO TEXT PTR LIST\nS98C1    DC    A(0)                    RESERVED\nS98C2    DC    A(0)                    RESERVED\nS98TUPL  DC    A(S98TXT01)             PTR TO FIRST TEXT BLOCK\n         DC    X'80',AL3(S98TXT08)     PTR TO LAST TEXT BLOCK\nS98TXT01 DC    XL06'000100010008'      UNALLOCATE DD STATEMENT\nS98DD    DC    CL08'SYSCATLG'          NAME OF THE DD STATEMENT\nS98TXT08 DC    XL04'00080000'          REMOVE IN-USE ATTRIBUTE\n         SPACE 1\n*--> DCB AND DATA AREAS USED TO ACCESS SYS1.NUCLEUS(SYSCATLG)\nSYSCATLG DCB   DSORG=PS,                                               X\n               RECFM=U,                                                X\n               MACRF=R,                                                X\n               LRECL=32760,                                            X\n               BLKSIZE=32760,                                          X\n               NCP=1,                                                  X\n               DDNAME=SYSCATLG\nMEMNAME  DC    CL8'SYSCATLG'\nMCATREC  DS    0CL54\nMCATVOL  DS    CL6\nMCAT1    DS    CL1\nMCATUNIT DS    CL1\n         DS    CL2\nMCATDSN  DS    CL44\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                      T S O   V O L U M '\n         DC    CL40'E   D I S P L A Y                       '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40' VOLSER  UCB  TYPE    ATR               '\n         DC    CL40'                                        '\nSC1LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' ---------   PF3=END  PF7=BACK  PF8=FORW'\n         DC    CL40'ARD  PF10=LEFT  PF11=RIGHT   ---------- '\nSC1SUFIX DC    XL4'115C7D13'\n         SPACE 1\nSC1LN3L  DC    CL40' VOLSER  UCB  TYPE    ATR  USE  SUB  IXV'\n         DC    CL40'   PATHS   ON  MASK    CYL    TRK   EXT '\nSC1LN3R  DC    CL40' VOLSER  UCB  TYPE    ATR  USE  SUB  IXV'\n         DC    CL40'   PATHS   ON  MASK  T/C  CYL  BYTES/T  '\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nEXTRAREA DSECT\nEAVOLSER DS    CL6                     VOLSER\nEAUCBID  DS    CL3                     UCB #\nEAUNITYP DS    CL4                     DEVICE TYPE\nEAUSECNT DS    PL2                     NUMBER OF USERS\nEASUBCHN DS    PL2                     SUBCHANNEL NUMBER\nEAVOLATR DS    CL3                     VOLUME ATTRIBUTE\nEAIXFLAG DS    CL1                     INDEXED=I\nEACHPATH DS    CL9                     CHANNEL PATHS\nEAPATHON DS    CL1                     NUMBER OF PATHS ONLINE\nEAPTHMSK DS    CL4                     PATH MASK\nEAFLAGS  DS    CL1                     VOLUME ATTRIBUTES\nEAIPLRES EQU   X'80'                     CURRENT SYSRES VOLUME\nEAPAGING EQU   X'40'                     CONTAINS PAGE DATASET(S)\nEACATVOL EQU   X'20'                     CONTAINS CATALOG(S)\nEAMCAT   EQU   X'10'                     CURRENT MASTER CATALOG\nEAFREECY DS    CL4                     FREE CYLINDERS\nEAFREETR DS    CL4                     FREE TRACKS\nEAFREEXT DS    CL4                     FREE EXTENTS\nEACCYL   DS    CL4                     CONTIGUOUS CYLINDERS\nEACTRK   DS    CL4                     CONTIGUOUS TRACKS\nEXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY\n         SPACE 2\nSCRNLINE DSECT\n         DS    CL1\nSCVOLSER DS    CL6                     VOLSER\n         DS    CL2\nSCUCBID  DS    CL3                     UCB #\n         DS    CL2\nSCUNITYP DS    CL6                     DEVICE TYPE\n         DS    CL2\nSCVOLATR DS    CL3                     VOLUME ATTRIBUTE\n         DS    CL1\nSCUSECNT DS    CL4                     NUMBER OF USERS\n         DS    CL1\nSCSUBCHN DS    CL4                     SUBCHANNEL NUMBER\n         DS    CL3\nSCIXFLAG DS    CL1                     INDEXED=I\n         DS    CL3\nSCCHPATH DS    CL8                     CHANNEL PATHS\n         DS    CL2\nSCPATHON DS    CL1                     NUMBER OF PATHS ONLINE\n         DS    CL2\nSCPTHMSK DS    CL4                     PATH ONLINE MASK\nSCLEFT   DS    0CL20                   USED IF SCREEN IS PF10'D\nSCFREECY DS    CL7                     FREE CYLINDERS\nSCFREETR DS    CL7                     FREE TRACKS\nSCFREEXT DS    CL6                     FREE EXTENTS\n         ORG   SCLEFT\nSCRIGHT  DS    0CL20                   USED IF SCREEN IS PF11'D\n         DS    CL1\nSCTRKCNT DS    CL4                     TRACKS / CYLINDER\n         DS    CL1\nSCCYLCNT DS    CL4                     CYLINDERS / VOLUME\n         DS    CL2\nSCBYTCNT DS    CL7                     BYTES / TRACK\n         DS    CL1\n         ORG\n         SPACE 2\n         PRINT ON,GEN,NODATA\n         IEFUCBOB ,                    UCB\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\n         CVT   DSECT=YES               CVT\n         END   SHOWVOLS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMPETOOL": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x900o\\x00\\x91)O\\x141\\x06\\x9f\\x06\\xa0\\x00u\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1990-11-02T00:00:00", "modifydate": "1991-10-21T14:31:00", "lines": 1695, "newlines": 1696, "modlines": 117, "user": "SYSTAB"}, "text": "SMPETOOL TITLE '**** IDENTIFY SMP/E APPLY CHECK LOGJAMS **'\n***********************************************************************\n*                                                                     *\n*    NAME - SMPETOOL                                                  *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS PROGRAM READS THE SMP/E APPLY CHECK REPORT AND    *\n*              HELPS IDENTIFY LOGJAMS.  THIS POST-PROCESSOR FORWARDS  *\n*              SMP/E'S OUTPUT TO THE PRINTER BEFORE IT DOES ITS WORK. *\n*              BE CAREFUL WHEN MODIFYING THE CHAINING STRUCTURES, AS  *\n*              THEY ARE QUITE COMPLEX (ALWAYS MAKE A BACKUP OF THE    *\n*              OLD COPY FIRST).  SOME ARE LIFO AND SOME FIFO.         *\n*                                                                     *\n*    PHILOSOPHY - DATA FROM THE SMPOUT/SMPRPT LISTINGS ARE MODELED    *\n*                 INTO DATA STRUCTURES USING CHAINING TECHNIQUES.     *\n*                 LOGICAL TREE STRUCTURES ARE THEN ANALYZED FROM THE  *\n*                 RESULTING CHAINS.  I WANTED TO AVOID RECURSION SO   *\n*                 INSTEAD OF BUILDING TRUE TREE STRUCTURES I USED A   *\n*                 FORM OF NOTE/POINT LOGIC, WHERE AS A LOGICAL TREE   *\n*                 IS BEING TRAVERSED, I KEEP TRACK OF WHERE I NEED    *\n*                 TO RETURN WITH A \"NOTE\" CHAIN.  KEPT IN LIFO ORDER, *\n*                 THIS OBVIATES THE NEED FOR RECURSION.               *\n*                                                                     *\n*                 PLEASE NOTE THE CODE THAT STAMPS AND CHECKS A FIELD *\n*                 CALLED \"MOMCYCLE\".  THE PURPOSE OF THIS CODE IS TO  *\n*                 PREVENT LOOPING IN THE LOGICAL TREE, WHICH CAN      *\n*                 HAPPEN WHEN IBM MAKES A BOO-BOO ON A CBPDO RELEASE. *\n*                 PERSONALLY, I PREFER TO RUN THE UTILITY WITH THE    *\n*                 CODE DISABLED, AS IT PRODUCES A MORE INTERESTING    *\n*                 STATISTICAL REPORT.                                 *\n*                                                                     *\n*    GENDER - PLEASE PARDON THE FACT THAT I HAVE LABELED SECOND LEVEL *\n*             NODES WITH THE PREFIX \"SON\" INSTEAD OF \"DAUGHTER\".  I   *\n*             REALIZE THAT MAY OFFEND SOME PURISTS, BUT THE TRUTH WAS *\n*             I RACKED MY BRAINS BUT COULDN'T COME UP WITH A DECENT   *\n*             3-CHARACTER PREFIX FOR \"DAUGHTER\".  ANY COUTH IDEAS?    *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    DDNAMES - SMPOUTI  - INPUT SMP/E APPLY CHECK REPORT              *\n*              SMPOUTO  - OUTPUT  \"     \"     \"     \"                 *\n*              SMPRPTI  - INPUT SMP/E APPLY CHECK REPORT              *\n*              SMPRPTO  - OUTPUT  \"     \"     \"     \"                 *\n*              PTSDD    - DYNAMICALLY ALLOCATED SMPPTS DATASET        *\n*              REPORT   - OUTPUT REPORT                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*  THIS PROGRAM USES A SERIES OF 32-BYTE CHAINS IN WHICH IT STORES    *\n*  VARIOUS KINDS OF DATA.                                             *\n*                                                                     *\n*  1) MAMACHN  - STORES DATA GATHERED FROM SMPOUTI INPUT REPORT       *\n*                CONSISTS PRIMARILY OF PTF ENTRIES                    *\n*  2) SONSCHN  - ENTRIES ARE CHAINED OFF MOM (1), BUILT FROM SMPOUTI, *\n*                CONSISTS OF REASONS WHY MOM WON'T APPLY              *\n*  3) LRSLTCHN - LOCAL RESULTS, USED TO PRINT CONCLUSIONS DERIVED     *\n*                FOR EACH LOGICAL TREE (EACH INDIVIDUAL MAMA)         *\n*  4) GRSLTCHN - GLOBAL RESULTS, USED TO PRINT CUMULATIVE CONCLUSIONS *\n*                THAT REPRESENT THE ENTIRE SMP/E APPLY ATTEMPT        *\n*  5) NOTECHN  - USED BY FEEDTREE ROUTINE TO RUN A LOGICAL TREE       *\n*  6) FREECHN  - FREE RESOURCES, ACQUIRED THROUGH GETFREE             *\n***********************************************************************\n         SPACE 1\nMOMDSECT DSECT\nMOMFWDP  DS    A                       PTR TO NEXT MOM IN CHAIN\nMOMSONP  DS    A                       PTR TO FIRST ENTRY IN SON CHAIN\nMOMNAME  DS    CL7                     SYSMOD ID OF THIS MOM\nMOMRSN   DS    XL1                     REASON THIS SYSMOD FAILED\nMOMFMID  DS    CL7                     FMID THIS SYSMOD IS OWNED BY\nMOMSUP   DS    CL7                     SYSMOD THAT SUP'S THIS SYSMOD\nMOMCYCLE DS    XL2                     COUNTER TO PREVENT LOOPS IN TREE\n         SPACE 1\nSONDSECT DSECT\nSONFWDP  DS    A                       PTR TO NEXT SON IN CHAIN\nSONMOMP  DS    A                       PTR BACK TO THIS BOY'S MAMA\nSONNAME  DS    CL7                     SYSMOD ID OF THIS SON\nSONRSN   DS    XL1                     REASON THIS SYSMOD FAILED\n         DS    XL8\n         SPACE 1\nGRSDSECT DSECT\nGRSFWDP  DS    A                       PTR TO NXT GLOBAL RESULT CHAINED\nGRSCOUNT DS    F                       # OF TIMES THIS GRSLT APPEARED\nGRSNAME  DS    CL7                     SYSMOD ID OF THIS GRSLT\nGRSRSN   DS    XL1                     REASON THIS SYSMOD FAILED\n         DS    XL8\n         SPACE 1\nLRSDSECT DSECT\nLRSFWDP  DS    A                       PTR TO NEXT LOCAL RESULT CHAINED\nLRSCOUNT DS    F                       # OF TIMES THIS LRSLT APPEARED\nLRSNAME  DS    CL7                     SYSMOD ID OF THIS LRSLT\nLRSRSN   DS    XL1                     REASON THIS SYSMOD FAILED\n         DS    XL8\n         EJECT\n         PRINT ON,NOGEN,NODATA\nSMPETOOL CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING MOMDSECT,R2             ADDRESSABILITY FOR MAMA CHAIN\n         USING SONDSECT,R3             ADDRESSABILITY FOR SONS CHAIN\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         BAL   R9,OPTIONS              PARSE INPUT PARAMETERS\n         BAL   R9,BLDCHAIN             BUILD INITIAL FREE CHAIN\n         L     R1,FREECHN              STORE PTR TO ACQUIRED MEMORY\n         ST    R1,MAMACHN              STORE PTR TO MAMAS CHAIN\n         ST    R1,MAMALAST             STORE PTR TO MAMAS LAST\n         OPEN  (REPORT,OUTPUT)         OPEN OUTPUT REPORT\n         BAL   R9,GETDATE              GET AND FORMAT DATE AND TIME\n         MVC   HDR1DATE,DATE           MOVE THE FORMATTED DATE\n         MVC   HDR1TIME,TIME           MOVE THE FORMATTED TIME\n         MVC   HDR2DATE,DATE           MOVE THE FORMATTED DATE\n         MVC   HDR2TIME,TIME           MOVE THE FORMATTED TIME\n         BAL   R9,READSMPE             READ THE APPLY/CHECK REPORT\n         BAL   R9,READRPT              READ THE DDNAME/DSNAME REPORT\n         BAL   R9,PRTOPTS              PRINT THE OPTIONS\n         CLC   MAMACHN,=F'0'           DID WE HAVE ANY APPLY DATA?\n         BE    DRBYPALL                NO, BYPASS MAIN PROCESSING\n         BAL   R9,READPTS              READ THE PTS AND GET MORE INFO\n         BAL   R9,PRMGRSLT             FILL IN THE GLOBAL RESULT TABLE\n         BAL   R9,FEEDTREE             STEP THRU THE MAIN MAMA CHAIN\n         BAL   R9,PRTGRSLT             PRINT THE GLOBAL RESULT LIST\nDRBYPALL EQU   *\n         CLOSE (REPORT)                CLOSE PRINTED OUTPUT\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SCANS THE INPUT PARMS FOR VALID OPTIONS.           *\n***********************************************************************\n         SPACE 2\nOPTIONS  DS    0H\n         ST    R9,SAVE15\n         B     BSAVE15\nSAVE15   DC    F'-1'\n         DC    CL8'OPTIONS '\nBSAVE15  EQU   *\n         SPACE 1\n*------> INITIALIZE FOR OPTION SCAN\n         L     R1,0(R1)                ADDR OF PARM LIST\n         LH    R2,0(R1)                LENGTH OF PARM\n         CH    R2,=H'6'                IS IT THE MINIMUM LENGTH?\n         BL    EXIT15                  NO, EXIT ROUTINE\n         LA    R3,2(R1)                BUMP TO START OF PARM\n         LR    R4,R3                   COPY START ADDR\n         AR    R4,R2                   ADD LENGTH\n*------> CHECK FOR PRESENCE OF OPTIONS IN PARAMETER STRING\nCHKOPT   EQU   *\n         CR    R3,R4                   SCAN OVER?\n         BNL   EXIT15                  YES, EXIT ROUTINE\n         CLC   0(5,R3),=CL5'SXREF'     USER WANTS SHORT XREF?\n         BE    CHKSXREF                YES, GO HANDLE\n         CLC   0(6,R3),=CL6'NOXREF'    USER WANTS NO XREF AT ALL?\n         BE    CHKNXREF                YES, GO HANDLE\n         CLC   0(6,R3),=CL6'DETAIL'    USER WANTS FULL DETAIL?\n         BE    CHKDETAL                YES, GO HANDLE\n         CLC   0(6,R3),=CL6'LINES('    USER WANTS TO SPECIFY PAGE SIZE\n         BE    CHKLINES                YES, GO HANDLE\nCHKOPT2  EQU   *\n         LA    R3,1(R3)                BUMP INDEX\n         B     CHKOPT                  CHECK NEXT POSITION\n*------> PROCESS SHORT XREF OPTION\nCHKSXREF EQU   *\n         OI    OPTIONS1,OPTSXREF       TURN THE SXREF OPTION ON\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS NO XREF OPTION\nCHKNXREF EQU   *\n         OI    OPTIONS1,OPTSXREF       TURN THE SXREF OPTION ON\n         OI    OPTIONS1,OPTNXREF       TURN THE NO XREF OPTION ON\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS FULL DETAIL\nCHKDETAL EQU   *\n         OI    OPTIONS1,OPTDETAL       TURN THE DETAIL OPTION ON\n         NI    OPTIONS1,255-OPTNXREF   TURN THE NO XREF OPTION OFF\n         NI    OPTIONS1,255-OPTSXREF   TURN THE SXREF OPTION OFF\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\n*------> PROCESS LINES(XX) OPTION\nCHKLINES EQU   *\n         TRT   6(2,R3),TRTNUM          IS IT NUMERIC?\n         BC    7,LINESBAD              NO, ISSUE ERROR MESSAGE\n         PACK  WORKDBLW,6(2,R3)        PACK THE NUMBER\n         CP    WORKDBLW,=PL2'20'       IS IT BELOW LIMITS?\n         BL    LINESBAD                YES, ISSUE ERROR MESSAGE\n         ZAP   PAGESIZE,WORKDBLW       SAVE IT FOR LATER USE\n         B     CHKOPT2                 GO CHECK FOR NEXT OPTION\nLINESBAD EQU   *\n         WTO   'SMPETOOL ERROR IN LINES PARAMETER - USING DEFAULT'\n         B     CHKOPT2\n         SPACE 1\nEXIT15   EQU   *\n         L     R9,SAVE15\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE BUILDS THE INITIAL FREE CHAIN.  THE CHAIN CONSISTS *\n*   OF 32-BYTE ENTRIES WHOSE ANCHOR NODE IS \"FREECHN\".                *\n***********************************************************************\n         SPACE 2\nBLDCHAIN DS    0H\n         ST    R9,SAVE20\n         STM   R2,R4,SAVE22\n         B     BSAVE20\nSAVE20   DC    F'-1'\nSAVE22   DC    3F'-1'\n         DC    CL8'BLDCHAIN'\nBSAVE20  EQU   *\n         SPACE 1\n         L     R0,=A(4096)             SET AT 1 PAGES\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         LR    R2,R1                   GET ADDRESS OF FREE MEMORY\n         ST    R2,FREECHN              STORE ANCHOR PTR\n         L     R3,=F'127'              NUMBER OF INITIAL ENTRIES -1\nBLDLOOP  EQU   *\n         LA    R4,32(R2)               POINT TO NEXT NODE\n         ST    R4,0(R2)                STORE PTR TO NEXT NODE\n         XC    4(28,R2),4(R2)          CLEAR NODE MEMORY\n         LA    R2,32(R2)               BUMP\n         BCT   R3,BLDLOOP              ITERATE\n         XC    0(32,R2),0(R2)          LAST PTR IS NULL\n         SPACE 1\nEXIT20   EQU   *\n         LM    R2,R4,SAVE22\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE READS THE SMP/E APPLY/CHECK REPORT AND MODELS THE  *\n*   DATA INTO A CHAIN IN MEMORY ANCHORED BY \"SMPECHN\"                 *\n***********************************************************************\n         SPACE 2\nREADSMPE DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'READSMPE'\nBSAVE30  EQU   *\n         SPACE 1\n         OPEN  (SMPOUTI,INPUT,SMPOUTO,OUTPUT)\n*------> FIND A MAMA NODE (MSG-GIM3022) AND BUILD A NODE\nMAMALOOP EQU   *\n         GET   SMPOUTI,WORKREC         GET THE RECORD\n         PUT   SMPOUTO,WORKREC         PUT THE RECORD\n         CLC   WORKREC+1(7),=C'GIM3022'    IS THIS A ** TERMINATED?\n         BE    MAMANEW                 YES, GO MAKE NODE\n         CLC   WORKREC+1(7),=C'GIM3190'    IS THIS A REGRESSION?\n         BNE   MAMALOOP                NO, ITERATE\n*------> SPECIAL HANDLING FOR REGRESSION REPORTS\nMAMAREGR EQU   *\n         MVC   SEARCHNM,WORKREC+19     COPY NAME OF REGRESSOR\n         BAL   R9,SEARCHN              GO SEARCH MAMA CHAIN\n         LTR   R1,R1                   IF R1=0 THEN CHILD BARREN\n         BNZ   MOMREGEX                ALREADY EXISTS, ADD ANOTHER SON\n         BAL   R9,GETFREE              GET A NODE\n         LR    R2,R1                   SAVE PTR\n         MVC   MOMNAME,WORKREC+19      MOVE SYSMOD NAME\n         MVI   MOMRSN,MAMARSND         SET FLAG BYTE\n         BAL   R9,GETFREE              GO GET A NODE\n         LR    R3,R1                   SAVE PTR\n         ST    R3,MOMSONP              STORE SONS PTR IN MAMAS NODE\n         ST    R3,SONSLAST             STORE PTR TO INITIAL LAST SON\n         BAL   R9,PUTMAMA              GO CHAIN UP MAMA\n         XC    SONFWDP,SONFWDP         CLEAR FORWARD PTR\n         ST    R2,SONMOMP              SAVE MAMAS ADDRESS\n         MVC   SONNAME,WORKREC+67      MOVE IN UMID/RMID CODE\n         MVI   SONRSN,SONSRSNG         MOVE IN REGRESSION REASON CODE\n         B     MAMALOOP                GO READ NEXT RECORD\nMOMREGEX EQU   *\n         B     MAMALOOP                GO READ NEXT RECORD\n*------> REGULAR HANDLING FOR NON-REGRESSIONS\nMAMANEW  EQU   *\n         BAL   R9,GETFREE              GET A NODE\n         LR    R2,R1                   SAVE PTR\n         MVC   MOMNAME,WORKREC+51      MOVE SYSMOD NAME\n         MVI   MOMRSN,X'00'            CLEAR FLAG BYTE\n         CLC   WORKREC+70(L'MAMAMSGA),MAMAMSGA\n         BE    MAMARSN1                GO STORE REASON CODE\n         CLC   WORKREC+70(L'MAMAMSGB),MAMAMSGB\n         BE    MAMARSN2                GO STORE REASON CODE\n         B     SONSLOOP                GO PROCESS SONS\nMAMARSN1 EQU   *\n         MVI   MOMRSN,MAMARSNA         STORE REASON CODE\n         B     SONSLOOP                GO PROCESS SONS\nMAMARSN2 EQU   *\n         MVI   MOMRSN,MAMARSNB         STORE REASON CODE\n         B     SONSLOOP                GO PROCESS SONS\n*------> FIND FIRST SONS NODE (MSG-GIM3590) AND BUILD A NODE\nSONSLOOP EQU   *\n         GET   SMPOUTI,WORKREC         GET THE RECORD\n         PUT   SMPOUTO,WORKREC         PUT THE RECORD\n         CLC   WORKREC+1(7),=C'GIM3590'    IS THIS A CAUSE ID?\n         BNE   SONSLOOP                NO, SEARCH FOR ONE\n         BAL   R9,GETFREE              GO GET A NODE\n         LR    R3,R1                   SAVE PTR\n         ST    R3,MOMSONP              STORE SONS PTR IN MAMAS NODE\n         ST    R3,SONSLAST             STORE PTR TO INITIAL LAST SON\n*------> NOW THAT WE KNOW WHERE THE FIRST SON IS, CHAIN UP MAMA\n         BAL   R9,PUTMAMA              GO CHAIN UP MAMA\nSONSMOVE EQU   *\n         XC    SONFWDP,SONFWDP         CLEAR FORWARD PTR\n         ST    R2,SONMOMP              SAVE MAMAS ADDRESS\n         CLC   WORKREC+17(08),=CL08'DOC HOLD'\n         BE    SONRSNH1                GO STORE REASON CODE\n         CLC   WORKREC+17(11),=CL11'ACTION HOLD'\n         BE    SONRSNH2                GO STORE REASON CODE\n         CLC   WORKREC+17(11),=CL11'DELETE HOLD'\n         BE    SONRSNH3                GO STORE REASON CODE\n         CLC   WORKREC+17(08),=CL08'DEP HOLD'\n         BE    SONRSNH4                GO STORE REASON CODE\n         CLC   WORKREC+17(07),=CL07'EC HOLD'\n         BE    SONRSNH5                GO STORE REASON CODE\n         CLC   WORKREC+17(09),=CL09'EXRF HOLD'\n         BE    SONRSNH6                GO STORE REASON CODE\n         CLC   WORKREC+17(12),=CL12'FULLGEN HOLD'\n         BE    SONRSNH7                GO STORE REASON CODE\n         CLC   WORKREC+17(10),=CL10'IOGEN HOLD'\n         BE    SONRSNH8                GO STORE REASON CODE\n         CLC   WORKREC+17(10),=CL10'UCLIN HOLD'\n         BE    SONRSNH9                GO STORE REASON CODE\n         MVC   SONNAME,WORKREC+17      MOVE IN CAUSE ID\n         MVI   SONRSN,X'00'            CLEAR REASON CODE\n         CLC   WORKREC+25(L'SONSMSGA),SONSMSGA\n         BE    SONSRSN1                GO STORE REASON CODE\n         CLC   WORKREC+25(L'SONSMSGB),SONSMSGB\n         BE    SONSRSN2                GO STORE REASON CODE\n         CLC   WORKREC+25(L'SONSMSGC),SONSMSGC\n         BE    SONSRSN3                GO STORE REASON CODE\n         CLC   WORKREC+25(L'SONSMSGD),SONSMSGD\n         BE    SONSRSN4                GO STORE REASON CODE\n         CLC   WORKREC+25(L'SONSMSGE),SONSMSGE\n         BE    SONSRSN5                GO STORE REASON CODE\n         CLC   WORKREC+25(L'SONSMSGF),SONSMSGF\n         BE    SONSRSN6                GO STORE REASON CODE\n         B     SONSPUT\nSONSRSN1 EQU   *\n         MVI   SONRSN,SONSRSNA         STORE REASON CODE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONSRSN2 EQU   *\n         MVI   SONRSN,SONSRSNB         STORE REASON CODE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONSRSN3 EQU   *\n         MVI   SONRSN,SONSRSNC         STORE REASON CODE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONSRSN4 EQU   *\n         MVI   SONRSN,SONSRSND         STORE REASON CODE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONSRSN5 EQU   *\n         MVI   SONRSN,SONSRSNE         STORE REASON CODE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONSRSN6 EQU   *\n         MVI   SONRSN,SONSRSNF         STORE REASON CODE\n         LA    R1,SONNAME              POINT TO HOLD ERROR NAME\n         ZAP   ADDGRSCT,=PL1'0'        INITIAL ADD\n         BAL   R9,ADDGRSLT ADD HOLD ERROR CODE TO LIST\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH1 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'DOC    '   INDICATE DOC HOLD SYSTEM\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH2 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'ACTION '   INDICATE ACTION HOLD SYSTEM\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH3 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'DELETE '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH4 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'DEP    '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH5 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'EC     '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH6 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'EXRF   '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH7 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'FULGEN '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH8 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'IOGEN  '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\nSONRSNH9 EQU   *\n         MVI   SONRSN,SONSRSNH         STORE REASON CODE\n         MVC   SONNAME,=CL7'UCLIN  '   INDICATE\n         B     SONSPUT                 GO SEARCH FOR NEXT SON\n*------> CHAIN UP THE SON\nSONSPUT  EQU   *\n         BAL   R9,PUTSONS              GO CHAIN UP SONS\nSONSREAD EQU   *\n         GET   SMPOUTI,WORKREC         GET THE RECORD\n         PUT   SMPOUTO,WORKREC         PUT THE RECORD\n         CLC   WORKREC+1(7),=C'GIM3590'    IS THIS A CAUSE ID?\n         BNE   SONSSRCH                NO, KEEP SEARCHING\n         BAL   R9,GETFREE              GET A FREE NODE FOR SIBLINGS\n         ST    R1,SONFWDP              SAVE PTR\n         LR    R3,R1                   COPY NEW SONS PTR\n         B     SONSMOVE                GO DO THE MOVES\nSONSSRCH EQU   *\n         CLC   WORKREC+1(7),=C'GIM3022'    IS THIS A NEW MAMA?\n         BE    MAMANEW                 YES, GO BACK UP TOP\n         CLC   WORKREC+1(7),=C'GIM3190'    IS THIS A REGRESSION?\n         BE    MAMAREGR                YES, GO HANDLE REGRESSION\n         B     SONSREAD                GO TRY FOR ANOTHER CHILD\nEOFSMPER EQU   *\n         CLOSE (SMPOUTI,,SMPOUTO)      CLOSE DATASETS\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE READS THE SMP/E DDNAME/DSNAME REPORT AND COPIES IT *\n*   TO AN OUTPUT DATASET.                                             *\n***********************************************************************\n         SPACE 2\nREADRPT  DS    0H\n         ST    R9,SAVE33\n         B     BSAVE33\nSAVE33   DC    F'-1'\n         DC    CL8'READRPT '\nBSAVE33  EQU   *\n         SPACE 1\n         OPEN  (SMPRPTI,INPUT,SMPRPTO,OUTPUT)\n*------> READ THE REPORT AND COPY IT TO AN OUTPUT DATASET\nRRPTLOOP EQU   *\n         GET   SMPRPTI,WORKREC         GET THE RECORD\n         PUT   SMPRPTO,WORKREC         PUT THE RECORD\n*------> GRAB THE NAME OF THE SMPPTS AS IT SLIDES BY\n         CLC   WORKREC+1(8),=CL8'SMPPTS  '\n         BNE   RRPTLOOP\n         MVC   PTSNAME,WORKREC+34      GRAB NAME\n         MVC   PTSVOL,WORKREC+79            VOLSER\n         MVC   PTSUNIT,WORKREC+86           UNIT\n         B     RRPTLOOP\nEOFRPTR  EQU   *\n         CLOSE (SMPRPTI,,SMPRPTO)      CLOSE DATASETS\n         SPACE 1\nEXIT33   EQU   *\n         L     R9,SAVE33\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PRINTS THE OPTIONS REPORT PAGE                     *\n***********************************************************************\n         SPACE 2\nPRTOPTS  DS    0H\n         ST    R9,SAVE34\n         B     BSAVE34\nSAVE34   DC    F'-1'\n         DC    CL8'PRTOPTS '\nBSAVE34  EQU   *\n         SPACE 1\n*------> PRINT THE OPTIONS BANNER PAGE\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         LA    R2,5                    SKIP 5 BLANK LINES\nPOBLNK01 EQU   *\n         PUT   REPORT,PRTREC           PRINT BLANK LINE\n         BCT   R2,POBLNK01             ITERATE\n         L     R2,OPTLNCT              LOAD THE BANNER LINE COUNT\n         LA    R3,OPTLINE1             GET ADDRESS OF FIRST LINE\nPOLINE01 EQU   *\n         MVC   PRTREC+30(OPTLNTH),0(R3) MOVE THE BANNER LINE\n         PUT   REPORT,PRTREC           PRINT THE LINE\n         LA    R3,OPTLNTH(R3)          BUMP LENGTH OF COMMENT\n         BCT   R2,POLINE01             ITERATE\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         LA    R2,3                    SKIP 3 BLANK LINES\nPOBLNK02 EQU   *\n         PUT   REPORT,PRTREC           PRINT BLANK LINE\n         BCT   R2,POBLNK02             ITERATE\n*------> PRINT THE OPTIONS THAT ARE SET\n         MVC   PRTREC+40(18),=CL18'LINES(XX) - SET TO'\n         MVC   PRTREC+58(4),=XL4'40202120'\n         ED    PRTREC+58(4),PAGESIZE   DISPLAY PAGESIZE\n         PUT   REPORT,PRTREC           PRINT IT\n         MVC   PRTREC+40(12),=CL12'PTS USED  - '\n         MVC   PRTREC+52(44),PTSNAME   DISPLAY PTS NAME\n         PUT   REPORT,PRTREC           PRINT IT\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         TM    OPTIONS1,OPTSXREF       SXREF TURNED ON?\n         BNO   POBYP01                 NO, BYPASS\n         MVC   PRTREC+40(40),=CL40'SXREF     - SHORT XREF REQUESTED'\n         PUT   REPORT,PRTREC           PRINT IT\nPOBYP01  EQU   *\n         TM    OPTIONS1,OPTNXREF       NXREF TURNED ON?\n         BNO   POBYP02                 NO, BYPASS\n         MVC   PRTREC+40(40),=CL40'NOXREF    - NO XREF DESIRED'\n         PUT   REPORT,PRTREC           PRINT IT\nPOBYP02  EQU   *\n         TM    OPTIONS1,OPTDETAL       FULL DETAIL TURNED ON?\n         BNO   POBYP03                 NO, BYPASS\n         MVC   PRTREC+40(40),=CL40'DETAIL    - FULL DETAIL DESIRED'\n         PUT   REPORT,PRTREC           PRINT IT\nPOBYP03  EQU   *\n*------> IF NOTHING ON MAMA CHAIN, REPORT THAT WE'RE GIVING UP\n         CLC   MAMACHN,=F'0'           IS MAMA CHAIN EMPTY?\n         BNE   POBYP20                 NOPE, BYPASS\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         LA    R2,3                    SKIP 3 BLANK LINES\nPOBLNK03 EQU   *\n         PUT   REPORT,PRTREC           PRINT BLANK LINE\n         BCT   R2,POBLNK03             ITERATE\n         MVC   PRTREC+40(40),=CL40'NO APPLY DATA FOUND IN SMPOUT'\n         PUT   REPORT,PRTREC           PRINT IT\n         B     EXIT34\nPOBYP20  EQU   *\n         SPACE 1\nEXIT34   EQU   *\n         L     R9,SAVE34\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE STEPS THROUGH THE MAIN MAMA CHAIN AND FEEDS THE    *\n*   ENTRIES ONE AT A TIME INTO THE TREE ROUTINE THAT FOLLOWS          *\n***********************************************************************\n         SPACE 2\nREADPTS  DS    0H\n         ST    R9,SAVE35\n         B     BSAVE35\nSAVE35   DC    F'-1'\n         DC    CL8'READPTS '\nBSAVE35  EQU   *\n         SPACE 1\n*------> GET SOME WORKING MEMORY\n         L     R0,=A(4096)             SET AT 1 PAGES\n         GETMAIN R,LV=(R0),BNDRY=DBLWD GO GET SOME MEMORY\n         ST    R1,PTSMEM               STORE PTR TO MEMORY\n         MVC   S99DSN,PTSNAME          MOVE PTS DSNAME\n         MVC   S99VOL,PTSVOL                    VOLSER\n         MVC   S99UNIT,PTSUNIT                  UNIT\n         L     R2,MAMACHN              GET PTR TO MAMACHN\n*------> SCAN THE MAMACHN AND FOR EACH ENTRY, DYNALLOC MBR AND READ\nRPLOOP01 EQU   *\n         XC    S99C1,S99C1             CLEAR\n         XC    S99C2,S99C2             CLEAR\n         XC    S99INFO,S99INFO         CLEAR\n         MVC   S99MBR,MOMNAME          INSERT NAME OF MEMBER\n         LA    R1,S99RBPTR             GET ADDRESS OF S99 PARM LIST\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99\n         LTR   R15,R15                 DID DYNALLOC WORK OK?\n         BNZ   RPNXTMOM                NO GOOD, TRY NEXT MOM\n         OPEN  (PTSDD,INPUT)           OPEN THE INPUT DATASET\nRPLOOP02 EQU   *\n         GET   PTSDD,WORKREC           READ THE INPUT RECORD\n         CLC   WORKREC(4),=CL4'++ VER' HAVE WE REACHED THE VER CARD?\n         BNE   RPLOOP02                NOT YET, KEEP TRYING\n         L     R3,PTSMEM               GET ADDR OF TABLE\n         LA    R4,50                   TABLE CAN FIT 50 CARDS\nRPLOOP03 EQU   *\n         MVC   0(80,R3),WORKREC        MOVE THE CARD IMAGE\n         LA    R3,80(R3)               BUMP\n         LA    R5,72                   CHECK FIRST 72 CHARS FOR (.)\n         LA    R6,WORKREC              GET ADDR OF INPUT CARD\nRPLOOP04 EQU   *\n         CLI   0(R6),C'.'              IS THIS A TERMINATOR?\n         BE    EOFPTS                  YES, NO MORE READING\n         LA    R6,1(R6)                BUMP\n         BCT   R5,RPLOOP04             ITERATE\n         GET   PTSDD,WORKREC           READ THE INPUT RECORD\n         CLC   WORKREC(2),=CL2'++'     ANOTHER ++ CARD?\n         BE    EOFPTS                  YES, NO MORE READING\n         BCT   R4,RPLOOP03             ITERATE\nEOFPTS   EQU   *\n         CLOSE (PTSDD)                 CLOSE CURRENT MEMBER\n         XC    S98C1,S98C1             CLEAR\n         XC    S98C2,S98C2             CLEAR\n         XC    S98INFO,S98INFO         CLEAR\n         LA    R1,S98RBPTR             GET ADDRESS OF S99 PARM LIST\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC99\n*------> SCAN FOR THE FMID OPERATOR OR THE SUP OPERATOR (R3=END)\n         LA    R3,80(R3)               ADJUST ENDING INDICATOR\n         L     R4,PTSMEM               BEGINNING OF TABLE\n         LH    R5,=H'4095'             LENGTH OF TABLE\nRPLOOP10 EQU   *\n         CR    R4,R3                   END OF TABLE?\n         BNL   RPLOOP19                YES, END SEARCH\n         CLC   0(4,R4),=CL4'FMID'      IS THIS OUR KEYWORD?\n         BE    RPLOOP11                YES, NEXT\n         LA    R4,1(R4)                BUMP\n         BCT   R5,RPLOOP10             ITERATE\nRPLOOP11 EQU   *\n         CR    R4,R3                   END OF TABLE?\n         BNL   RPLOOP19                YES, END SEARCH\n         CLI   0(R4),C'('              IS THIS OUR OPEN PAREN?\n         BE    RPLOOP12                YES, NEXT\n         LA    R4,1(R4)                BUMP\n         BCT   R5,RPLOOP11             ITERATE\nRPLOOP12 EQU   *\n         MVC   MOMFMID,1(R4)           MOVE THE FMID\nRPLOOP13 EQU   *\n         CR    R4,R3                   END OF TABLE?\n         BNL   RPLOOP19                YES, END SEARCH\n         CLC   0(3,R4),=CL3'SUP'       IS THIS OUR KEYWORD?\n         BE    RPLOOP14                YES, NEXT\n         LA    R4,1(R4)                BUMP\n         BCT   R5,RPLOOP13             ITERATE\nRPLOOP14 EQU   *\n         CR    R4,R3                   END OF TABLE?\n         BNL   RPLOOP19                YES, END SEARCH\n         CLI   0(R4),C'('              IS THIS OUR OPEN PAREN?\n         BE    RPLOOP15                YES, NEXT\n         LA    R4,1(R4)                BUMP\n         BCT   R5,RPLOOP14             ITERATE\nRPLOOP15 EQU   *\n         MVC   MOMSUP,1(R4)            MOVE THE SUP\nRPLOOP19 EQU   *\n*------> BUMP TO THE NEXT MAMA NODE AND LOOP\nRPNXTMOM EQU   *\n         L     R2,MOMFWDP              GET NEXT MAMA PTR\n         LTR   R2,R2                   IS IT NULL?\n         BNZ   RPLOOP01                GO TRY NEXT MEMBER\n         SPACE 1\nEXIT35   EQU   *\n         L     R9,SAVE35\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE STEPS THROUGH THE MAIN MAMA CHAIN AND FEEDS THE    *\n*   ENTRIES ONE AT A TIME INTO THE TREE ROUTINE THAT FOLLOWS          *\n***********************************************************************\n         SPACE 2\nFEEDTREE DS    0H\n         ST    R9,SAVE37\n         B     BSAVE37\nSAVE37   DC    F'-1'\n         DC    CL8'FEEDTREE'\nBSAVE37  EQU   *\n         SPACE 1\n         MVC   MAMANEXT,MAMACHN        COPY INITIAL ANCHOR\nFTLOOP01 EQU   *\n         MVC   MAMANOW,MAMANEXT        HANG ONTO CURRENT MAMA\n         L     R2,MAMANEXT             PICK UP PTR TO NEXT ENTRY\n         LTR   R2,R2                   NULL FORWARD PTR?\n         BZ    FTLOOP02                YES, BRANCH AROUND\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         BAL   R9,PRTLINE\n         MVC   PRT1MAMA,MOMNAME        MOVE NAME OF MAMA\n         MVC   PRT1FMID,MOMFMID        MOVE FMID\n         MVC   PRT1SUP,MOMSUP          MOVE SUP\n         MVI   PRT1RSN,C' '\n         MVC   PRT1RSN+1(L'PRT1RSN-1),PRT1RSN\n         TM    MOMRSN,MAMARSNA         IS IT THIS REASON CODE?\n         BNO   FTTSTRB                 NO, GO AROUND\n         MVC   PRT1RSN(L'MAMAMSGA),MAMAMSGA\n         B     FTUTLINE                GO WRITE THE LINE OUT\nFTTSTRB  EQU   *\n         TM    MOMRSN,MAMARSNB         IS IT THIS REASON CODE?\n         BNO   FTTSTRC                 NO, GO AROUND\n         MVC   PRT1RSN(L'MAMAMSGB),MAMAMSGB\n         B     FTUTLINE                GO WRITE THE LINE OUT\nFTTSTRC  EQU   *\n         TM    MOMRSN,MAMARSNC         IS IT THIS REASON CODE?\n         BNO   FTTSTRD                 NO, GO AROUND\n         MVC   PRT1RSN(L'MAMAMSGC),MAMAMSGC\n         B     FTUTLINE                GO WRITE THE LINE OUT\nFTTSTRD  EQU   *\n         TM    MOMRSN,MAMARSND         IS IT THIS REASON CODE?\n         BNO   FTTSTRE                 NO, GO AROUND\n         MVC   PRT1RSN(L'MAMAMSGD),MAMAMSGD\n         B     FTUTLINE                GO WRITE THE LINE OUT\nFTTSTRE  EQU   *\n         MVC   PRT1RSN(14),=CL14'REASON UNKNOWN'\nFTUTLINE EQU   *\n         MVC   PRTREC,PRTREC1          MOVE THE BUILT LINE\n         BAL   R9,PRTLINE              GO PRINT A LINE\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         BAL   R9,PRTLINE\n         L     R1,MOMFWDP              GET FORWARD PTR\n         ST    R1,MAMANEXT             STORE NEW FORWARD PTR\n         XC    NOTELAST,NOTELAST       CLEAR NOTE CHAIN FINAL PTR\n         L     R3,CYCLENUM             GET CYCLE NUMBER\n         LA    R3,1(R3)                BUMP\n         ST    R3,CYCLENUM             STORE UPDATED CYCLE NUMBER\n         BAL   R9,TREE                 GO UNRAVEL THIS CHAIN / TREE\n         B     FTLOOP01                GO DO IT AGAIN\nFTLOOP02 EQU   *\n         SPACE 1\nEXIT37   EQU   *\n         L     R9,SAVE37\n         BR    R9\n         EJECT\n***********************************************************************\n*                                                                     *\n*  THIS ROUTINE SERIALLY PROCESSES ENTRIES FROM THE MAMA CHAIN        *\n*    AT ENTRY R2 POINTS TO AN ENTRY ON THE MAMA CHAIN--->             *\n*    FOR EACH MAMA ENTRY IT PERFORMS THE FOLLOWING:                   *\n*      1) FOR EACH SON, IT SCANS THE MAMA CHAIN, IF IT DOESN'T FIND   *\n*         THE SON ON THE CHAIN, IT PRINTS THE NAME OF THE NODE        *\n*      2) IF IT FINDS THE SON ON THE CHAIN, IT REPEATS THE PROCESS    *\n*         UNTIL (1) HAPPENS                                           *\n*      3) IT MAINTAINS A \"NOTE LIST\" TO NAVIGATE THROUGH THE TREE     *\n*      4) ELEMENTS ON THE NOTE LIST WILL ALWAYS BE SOMEMAMA'S SON     *\n*      5) AS THE ROUTINE CRAWLS BACK UP THE NOTE LIST, SECONDARY      *\n*         MAMAS ARE REPLACED IN THE NOTE LIST BY THEIR FIRST SON.     *\n*      6) STAMPING/CHECKING MAMA NODES WITH CYCLE NUMBERS PREVENTS    *\n*         LOOPING WHILE SEARCHING THE TREE                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nTREE     DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'TREE    '\nBSAVE40  EQU   *\n         SPACE 1\n*------> LOOK AT THE NODE POINTED TO BY R2 AND IF IT HAS CHILDREN,\n*        ADD EVERYTHING AFTER THE FIRST TO THE NOTE CHAIN\nCHKSIBS  EQU   *\n         L     R3,MOMSONP              GET CHILDREN PTR\n         L     R4,SONFWDP              GET SIBLINGS PTR\n         LTR   R4,R4                   ANY SIBLINGS?\n         BZ    NOSIBS                  NO SIBLINGS, IS ONLY CHILD\n*------> BEFORE ADDING A NEW NOTE, CHECK TO SEE IF IT IS ALREADY ON\n*        THE NOTE CHAIN, IF SO, DON'T BOTHER\n         L     R1,NOTECHN              GET NOTE CHAIN ANCHOR POINTER\nSIBSLP1  EQU   *\n         LTR   R1,R1                   ANYTHING ON IT?\n         BZ    SIBSLP2                 NO, GO AHEAD AND ADD\n         C     R4,4(R1)                IS IT THE SAME ONE?\n         BE    DONTADDS                YES, DON'T BOTHER ADDING\n         L     R1,0(R1)                BUMP TO NEXT NOTE\n         B     SIBSLP1                 GO TRY NEXT ELEMENT\n*------> GO AHEAD AND ADD THE NEW NOTE\nSIBSLP2  EQU   *\n         BAL   R9,ADDNOTE              ADD AN EMPTY NODE TO NOTE CHAIN\n         ST    R4,4(R1)                STORE PTR TO CHILD\n         L     R4,0(R4)                GET PTR TO NEXT CHILD\n         LTR   R4,R4                   LAST SIBLING?\n         BNZ   SIBSLP2                 NO, GO ADD NEXT CHILD TO NOTE\n*------> WE NOW WANT TO KNOW IF THIS CHILD IS ALSO A PARENT\n*        WE FIND THAT OUT BY SCANNING THE MAMA CHAIN TO SEE IF\n*        IT IS ALSO A MAMA NODE...\nNOSIBS   EQU   *\nNOTEDSIB EQU   *\n         MVC   SEARCHNM,SONNAME        COPY NAME OF CHILD\n         BAL   R9,SEARCHN              GO SEARCH MAMA CHAIN\n         LTR   R1,R1                   IF R1=0 THEN CHILD BARREN\n         BZ    BARREN                  CHILDLESS, GO PRINT NAME\n***********************************************************************\n* THE NEXT FOUR LINES, IF COMMENTED OUT, IMPROVES THE STATISTICS      *\n* QUALITY OF THE RESULTING REPORT.  LEAVING THEM AS IS GIVES YOU      *\n* IMPROVED PROTECTION AGAINST LOOPING DURING A TREE ANALYSIS.         *\n***********************************************************************\n         CLC   MOMCYCLE,CYCLENUM+2     CHECK MAMA CYCLE NUMBER\n         BE    DONTADDS                BEEN HERE BEFORE, FAKE OUT\n         MVC   MOMCYCLE,CYCLENUM+2     STAMP IT\n         LR    R2,R1                   ALSO PARENT, GO DEEPER\n         B     CHKSIBS                 GO ITERATE\nBARREN   EQU   *\n         L     R5,SONMOMP              GET PTR TO OWNING MAMA\n         TM    OPTIONS1,OPTSXREF       DO WE WANT A FULL XREF?\n         BO    PRTSXREF                YES, BYPASS THE DETAIL PRINT\n         MVC   PRT2SON,SONNAME         MOVE NAME OF BARREN CHILD\n         MVC   PRT2REL,8(R5)           MOVE NAME OF RELATED ELEMENT\n         MVC   PRTREC,PRTREC2          MOVE BUILT LINE TO REPORT LINE\n         BAL   R9,PRTLINE              GO REPORT THE BARREN CHILD\nPRTSXREF EQU   *\n         LA    R1,SONNAME              POINT TO NAME OF BARREN CHILD\n         BAL   R9,ADDLRSLT             ADD TO LOCAL RESULT TABLE\n         LA    R1,SONNAME              POINT TO NAME OF BARREN CHILD\n         ZAP   ADDGRSCT,=PL1'1'        INDICATE ADD ONE\n         BAL   R9,ADDGRSLT             ADD TO GLOBAL RESULT TABLE\nDONTADDS EQU   *\n         L     R3,NOTECHN              RESTORE PTR TO NEXT SIBLING\n         LTR   R3,R3                   WAS THAT THE LAST NOTED CHILD?\n         BZ    PRTLRSLT                YES, GO PRINT LOCAL RESULTS\n         LR    R1,R3                   COPY THE PTR TO THE NOTED CHILD\n         L     R3,4(R3)                POINT TO THE ACTUAL NODE\n         BAL   R9,POPNOTE              PERCOLATE NOTE CHAIN\n         B     NOTEDSIB                GO PROCESS NOTED SIBLING\nPRTLRSLT EQU   *\n         MVI   PRTREC,C' '\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         L     R6,LRSLTCHN             GET ANCHOR FOR LOCAL RESULTS\nLPLOOP01 EQU   *\n         CLI   8(R6),X'FF'             TERMINAL NODE?\n         BE    LPFINAL                 YES, GO PRINT LAST LINE\n         CLI   8(R6),X'11'             FIRST NODE?\n         BNE   LPMVNAME                YES, ITERATE\n         LR    R7,R6                   SAVE PTR TO PERMANENT FIRST NODE\n         L     R6,0(R6)                INDEX TO NEXT ENTRY\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         LA    R8,4                    4 ENTRIES PER PRINT LINE\n         LA    R5,PRTREC+1             START OF PRINT RECORD TO USE\n         B     LPLOOP01                GO ITERATE\nLPMVNAME EQU   *\n         MVC   9(7,R5),8(R6)           MOVE NAME OF NAME\n         MVC   18(7,R5),=XL7'4020206B202120'\n         ED    18(7,R5),5(R6)          INSERT THE COUNT\n         MVI   18(R5),C'('             INSERT A PAREN\n         MVI   25(R5),C')'             INSERT A PAREN\n         LA    R5,30(R5)               BUMP INDEX\n         MVC   0(4,R7),0(R6)           POINT TO NEXT NODE FROM 1ST\n         LR    R1,R6                   GET PTR TO CURRENT NODE\n         L     R6,0(R6)                INDEX TO NEXT ENTRY\n         BAL   R9,PUTFREE              GO ADD THE NODE BACK TO FREECHN\n         BCT   R8,LPLOOP01             ITERATE\n         TM    OPTIONS1,OPTNXREF       DO WE WANT NO XREF?\n         BO    PRTNXRF1                YES, BYPASS THE DETAIL PRINT\n         PUT   REPORT,PRTREC           PRINT REPORT\n         AP    LINECNT,=PL1'1'         BUMP THE LINE COUNTER\nPRTNXRF1 EQU   *\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         LA    R8,4                    4 ENTRIES PER PRINT LINE\n         LA    R5,PRTREC+1             START OF PRINT RECORD TO USE\n         B     LPLOOP01                ITERATE\nLPFINAL  EQU   *\n         TM    OPTIONS1,OPTNXREF       DO WE WANT NO XREF?\n         BO    PRTNXRF2                YES, BYPASS THE DETAIL PRINT\n         PUT   REPORT,PRTREC           PRINT REPORT\n         AP    LINECNT,=PL1'1'         BUMP THE LINE COUNTER\nPRTNXRF2 EQU   *\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE DECHAINS A NODE FROM THE FREE CHAIN AND RETURNS    *\n*   THE ADDRESS IN REGISTER 1                                         *\n***********************************************************************\n         SPACE 2\nGETFREE  DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'GETFREE '\nBSAVE520 EQU   *\n         SPACE 1\n         L     R1,FREECHN              GET ADDRESS OF NEXT NODE\n         LTR   R1,R1                   END OF CHAIN\n         BNZ   GFGETNXT                NO, GET THE ELEMENT\n         BAL   R9,BLDCHAIN             GO BUILD ANOTHER PAGE\nGFGETNXT EQU   *\n         L     R0,0(R1)                GET NEXT PTR\n         ST    R0,FREECHN              STORE NEW NEXT PTR\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         SPACE 3\n         SPACE 2\n***********************************************************************\n*     THIS ROUTINE RECHAINS A NODE TO THE FREE CHAIN.                 *\n*     UPON ENTRY, REGISTER 1 MUST POINT TO THE NODE.                  *\n***********************************************************************\n         SPACE 2\nPUTFREE  DS    0H\n         ST    R9,SAVE530\n         B     BSAVE530\nSAVE530  DC    F'-1'\n         DC    CL8'PUTFREE'\nBSAVE530 EQU   *\n         SPACE 1\n         L     R0,FREECHN              GET ADDRESS OF NEXT NODE\n         ST    R1,FREECHN              STORE PTR TO NEW NODE\n         XC    4(28,R1),4(R1)          CLEAR MEMORY\n         ST    R0,0(R1)                STORE PTR TO NEXT NODE\n         SPACE 1\nEXIT530  EQU   *\n         L     R9,SAVE530\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE RECHAINS A NODE TO THE MAMA CHAIN.                 *\n*     UPON ENTRY, REGISTER 2 MUST POINT TO THE NODE.                  *\n***********************************************************************\n         SPACE 2\nPUTMAMA  DS    0H\n         ST    R9,SAVE540\n         B     BSAVE540\nSAVE540  DC    F'-1'\n         DC    CL8'PUTMAMA '\nBSAVE540 EQU   *\n         SPACE 1\n         L     R1,MAMALAST             GET ADDR OF OLD LAST NODE\n         ST    R2,MAMALAST             STORE ADD OF NEW LAST NODE\n         ST    R2,0(R1)                STORE FORWARD PTR\n         XC    MOMFWDP,MOMFWDP         CLEAR NEW TERMINAL PTR\n         SPACE 1\nEXIT540  EQU   *\n         L     R9,SAVE540\n         BR    R9\n         SPACE 3\n         SPACE 3\n***********************************************************************\n*     THIS ROUTINE RECHAINS A SONS NODE TO A MAMA NODE                *\n*     UPON ENTRY, REGISTER 3 MUST POINT TO THE NODE.                  *\n***********************************************************************\n         SPACE 2\nPUTSONS  DS    0H\n         ST    R9,SAVE550\n         B     BSAVE550\nSAVE550  DC    F'-1'\n         DC    CL8'PUTSONS '\nBSAVE550 EQU   *\n         SPACE 1\n         L     R1,SONSLAST             GET ADDR OF OLD LAST NODE\n         ST    R3,SONSLAST             STORE ADDR OF NEW LAST NODE\n         ST    R3,0(R1)                STORE FORWARD PTR\n         XC    0(4,R3),0(R3)           CLEAR NEW TERMINAL PTR\n         SPACE 1\nEXIT550  EQU   *\n         L     R9,SAVE550\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE SEARCHS THE CHAIN FOR A MAMA, IF NOT FOUND, R1=0   *\n*     UPON ENTRY, SEARCHNM MUST CONTAIN THE NAME TO BE FOUND          *\n*     UPON EXIT,  REGISTER 1 WILL POINT TO THE NODE, OR R1=0          *\n***********************************************************************\n         SPACE 2\nSEARCHN  DS    0H\n         ST    R9,SAVE560\n         B     BSAVE560\nSAVE560  DC    F'-1'\n         DC    CL8'SEARCHN '\nBSAVE560 EQU   *\n         SPACE 1\n         L     R1,MAMACHN              GET MAMA CHAIN ANCHOR\nSEARCHN1 EQU   *\n         LTR   R1,R1                   IS THIS THE END OF CHAIN?\n         BZ    EXIT560                 YES, NOT FOUND, EXIT W/ NULLPTR\n         CLC   8(7,R1),SEARCHNM        IS THIS OUR TARGET?\n         BE    EXIT560                 YES, EXIT BACK TO CALLER\n         L     R1,0(R1)                PICK UP NEXT PTR\n         B     SEARCHN1                TRY NEXT\n         SPACE 1\nEXIT560  EQU   *\n         L     R9,SAVE560\n         BR    R9\n         SPACE 2\n***********************************************************************\n*     THIS ROUTINE SEARCHS THE CHAIN FOR A MAMA, IF NOT FOUND, R1=0   *\n*     UPON ENTRY, SEARCHNM MUST CONTAIN THE SUP TO BE FOUND           *\n*     UPON EXIT,  REGISTER 1 WILL POINT TO THE NODE, OR R1=0          *\n***********************************************************************\n         SPACE 2\nSEARCHNS DS    0H\n         ST    R9,SAVE565\n         B     BSAVE565\nSAVE565  DC    F'-1'\n         DC    CL8'SEARCHNS'\nBSAVE565 EQU   *\n         SPACE 1\n         L     R1,MAMACHN              GET MAMA CHAIN ANCHOR\nSEARCHS1 EQU   *\n         LTR   R1,R1                   IS THIS THE END OF CHAIN?\n         BZ    SEARCHS2                YES, NOT FOUND, EXIT W/ NULLPTR\n         CLC   23(7,R1),SEARCHNM       IS THIS OUR TARGET?\n         BE    EXIT565                 YES, EXIT BACK TO CALLER\n         L     R1,0(R1)                PICK UP NEXT PTR\n         B     SEARCHS1                TRY NEXT\nSEARCHS2 EQU   *\n         SPACE 1\nEXIT565  EQU   *\n         L     R9,SAVE565\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE DECHAINS A NODE FROM THE NOTE CHAIN AND RETURNS    *\n*   IT TO THE FREE CHAIN - ALWAYS THE YOUNGEST NODE ON THE CHAIN      *\n***********************************************************************\n         SPACE 1\nPOPNOTE  DS    0H\n         ST    R9,SAVE570\n         B     BSAVE570\nSAVE570  DC    F'-1'\nSAVE578  DC    F'-1'\n         DC    CL8'POPNOTE '\nBSAVE570 EQU   *\n         SPACE 1\n         ST    R8,SAVE578              STORE R8 TEMPORARILY\n         L     R8,0(R1)                GET PTR TO ELDER NODE\n         ST    R8,NOTECHN              STORE THE NEW ANCHOR\n         BAL   R9,PUTFREE              RETURN THE NODE TO THE FREECHN\n         LTR   R8,R8                   IS NOTE CHAIN NOW NULL?\n         BNZ   EXIT570                 NO, NOTELAST PTR STILL VALID\n         ST    R8,NOTELAST             NOTELAST PTR NOW NULL ALSO\n         SPACE 1\nEXIT570  EQU   *\n         L     R8,SAVE578              LOAD R8 BACK UP\n         L     R9,SAVE570\n         BR    R9\n         SPACE 2\n***********************************************************************\n*     THIS ROUTINE GET A NODE FROM THE FREE CHAIN AND ADDS IT ON TO   *\n*   THE NOTE CHAIN IN FIFO ORDER                                      *\n***********************************************************************\n         SPACE 1\nADDNOTE  DS    0H\n         STM   R8,R9,SAVE580\n         B     BSAVE580\nSAVE580  DC    2F'-1'\n         DC    CL8'ADDNOTE '\nBSAVE580 EQU   *\n         SPACE 1\n         BAL   R9,GETFREE              GET A NODE FROM THE FREE CHAIN\n         XC    0(32,R1),0(R1)          CLEAR YOUNGSTERS MEMORY\n         L     R8,NOTELAST             LOAD PTR TO LAST NODE\n         ST    R1,NOTELAST             STORE THE NEW LAST PTR\n         LTR   R8,R8                   WAS THE CHAIN EMPTY?\n         BNZ   ADDNFRWD                NO, GO STORE THE FORWARD PTR\n         ST    R1,NOTECHN              STORE THE PTR IN THE ANCHOR\n         B     EXIT580                 ZOOM AROUND TO THE EXIT\nADDNFRWD EQU   *\n         ST    R1,0(R8)                STORE THE NEW FORWARD PTR\n         SPACE 1\nEXIT580  EQU   *\n         LM    R8,R9,SAVE580\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE IS CALLED WHENEVER WE WANT TO REPORT THE NAME OF   *\n*   A BARREN CHILD                                                    *\n***********************************************************************\n         SPACE 2\nPRTLINE  DS    0H\n         ST    R9,SAVE590\n         B     BSAVE590\nSAVE590  DC    F'-1'\n         DC    CL8'PRTLINE '\nBSAVE590 EQU   *\n         SPACE 1\n         CP    PAGESIZE,LINECNT        HAVE WE HIT OVERFLOW YET?\n         BNL   BYPEJECT                DON'T EJECT YET\n         AP    PAGECNT,=PL1'1'         BUMP PAGE NUMBER\n         MVC   HDR1PAGE,=XL4'40202120' MOVE EDIT FIELD\n         ED    HDR1PAGE,PAGECNT+2 FORMAT THE PAGE NUMBER\n         PUT   REPORT,HDRREC1          WRITE THE TITLE LINE\n         ZAP   LINECNT,=PL1'3'         CLEAR THE LINE COUNTER\n         MVI   PRTREC,C'-'             TRIPLE SPACE TO FIRST DETAIL\n         PUT   REPORT,PRTREC           WRITE THE FIRST DETAIL LINE\n         B     EXIT590                 EXIT THE PRINT ROUTINE\nBYPEJECT EQU   *\n         PUT   REPORT,PRTREC           WRITE THE REPORT LINE\n         AP    LINECNT,=PL1'1'         BUMP THE LINE COUNTER\n         SPACE 1\nEXIT590  EQU   *\n         L     R9,SAVE590\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE OBTAINS AND FORMATS THE CURRENT DATE AND TIME.       *\n***********************************************************************\n         SPACE 1\nGETDATE  DS    0H\n         ST    R9,SAVE600\n         B     BSAVE600\nSAVE600  DC    F'-1'\n         DC    CL8'GETDATE '\nBSAVE600 EQU   *\n         SPACE 1\n         TIME  DEC                     GET THE TIME IN DECIMAL\n*--> FORMAT THE CURRENT TIME\n         STM   R0,R1,WORKDBLW          STORE THE RESULTS\n         UNPK  WORKTIME,WORKDBLW(4)    UNPACK THE TIME\n         OI    WORKTIME+7,X'F0'        CLEAR THE SIGN NIBBLE\n         MVC   TIMEHH,WORKTIME+1       MOVE THE HH\n         MVC   TIMEMM,WORKTIME+3                MM\n         MVC   TIMESS,WORKTIME+5                SS\n*--> FORMAT THE CURRENT DATE\n         MVC   DIVFIELD+0(2),=XL2'0019'    MOVE ZEROES + 19\n         MVC   DIVFIELD+2(1),WORKDBLW+5    MOVE YEAR\n         MVI   DIVFIELD+3,X'0F'            MOVE SIGN NIBBLE\n         DP    DIVFIELD,=PL2'40'       DIVIDE BY 4 X 10\n         CP    DIVFIELD+2(2),=PL1'0'   IS IT A LEAP YEAR?\n         BNE   NOTLEAP                 NO, DON'T CHANGE TABLE\n         ZAP   MONTHTBL+2(2),=PL2'29'  FEBRUARY\nNOTLEAP  EQU   *\n         LA    R4,MONTHTBL             GET ADDRESS OF MONTHTBL\n         LA    R5,12                   NUMBER OF MONTHS FOR BCT\n         ZAP   MONTH,=PL1'1'           SOMEPLACE TO START\nMONTH1   EQU   *\n         CP    WORKDBLW+6(2),0(2,R4)   NUMBER OF DAYS IN MONTH\n         BNH   MONTHEND                LESS THAN MONTH, GO FORMAT\n         SP    WORKDBLW+6(2),0(2,R4)   MORE THAN A MONTH\n         AP    MONTH,=PL1'1'           ADD 1 TO MONTH\n         LA    R4,2(R4)                BUMP MONTH POINTER\n         BCT   R5,MONTH1               GO TRY NEXT MONTH\nMONTHEND EQU   *\n         LA    R3,DATE                 ADDRESS OF DATE FIELD\n         UNPK  DATEMM,MONTH            UNPACK MONTH\n         OI    1(R3),X'F0'             CLEAR SIGN NIBBLE\n         UNPK  DATEDD,WORKDBLW+6(2)    MOVE THE DAY\n         OI    4(R3),X'F0'             CLEAR SIGN NIBBLE\n         UNPK  WORKTIME+0(3),WORKDBLW+5(2) UNPACK THE YEAR\n         OI    WORKTIME+2,X'F0'        CLEAR SIGN NIBBLE\n         MVC   DATEYY,WORKTIME         MOVE THE YEAR\n         SPACE 1\nEXIT600  EQU   *\n         L     R9,SAVE600\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE SEARCHES THE LOCAL RESULT TABLE.  IF IT FINDS AN     *\n*  EXISTING ENTRY OF THE SAME NAME, IT ADDS ONE TO THE ENTRIES COUNT. *\n*  IF IT DOESN'T FIND AN EXISTING ENTRY, IT INSERTS ONE IN COLLATING  *\n*  SEQUENCE AND INITIALIZES ITS COUNT TO 1.                           *\n*   AT ENTRY, R1 POINTS TO THE BARREN CHILD TO BE ADDED TO THE LIST   *\n***********************************************************************\n         SPACE 1\nADDLRSLT DS    0H\n         STM   R6,R9,SAVE610\n         B     BSAVE610\nSAVE610  DC    4F'-1'\n         DC    CL8'ADDLRSLT'\nBSAVE610 EQU   *\n         SPACE 1\n         L     R8,LRSLTCHN             GET ADDR OF INITIAL NODE\n         LR    R7,R1                   SAVE PTR TO INPUT PARM\nLRLOOP01 EQU   *\n         CLC   0(7,R7),8(R8)           IS THIS OUR BABY?\n         BE    LRADDCNT                YES, GO ADD ONE TO COUNT\n         BL    LRADDNEW                LOW, GO ADD NEW NODE TO CHAIN\n         LR    R6,R8                   SAVE PTR TO CURRENT ENTRY\n         L     R8,0(R8)                GET PTR TO NEXT ENTRY\n         LTR   R8,R8                   IS IT NULL?\n         BNZ   LRLOOP01                NO, GO TRY NEXT\n         DC    H'0'                    SHOULD NEVER HAPPEN\nLRADDCNT EQU   *\n         AP    4(4,R8),=PL1'1'         BUMP COUNTER\n         B     EXIT610                 EXIT\nLRADDNEW EQU   *\n         BAL   R9,GETFREE              GET NEW ENTRY\n         ZAP   4(4,R1),=PL1'1'         INITIALIZE COUNT\n         MVC   8(8,R1),0(R7)           MOVE NAME\n         ST    R8,0(R1)                STORE NEW FORWARD PTR\n         ST    R1,0(R6)                STORE PTR TO NEW ELEMENT\n         SPACE 1\nEXIT610  EQU   *\n         LM    R6,R9,SAVE610\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE SEARCHES THE GLOBAL RESULT TABLE.  IF IT FINDS AN    *\n*  EXISTING ENTRY OF THE SAME NAME, IT ADDS ONE TO THE ENTRIES COUNT. *\n*  IF IT DOESN'T FIND AN EXISTING ENTRY, IT INSERTS ONE IN COLLATING  *\n*  SEQUENCE AND INITIALIZES ITS COUNT TO 1.                           *\n*   AT ENTRY, R1 POINTS TO THE BARREN CHILD TO BE ADDED TO THE LIST   *\n***********************************************************************\n         SPACE 1\nADDGRSLT DS    0H\n         STM   R6,R9,SAVE630\n         B     BSAVE630\nSAVE630  DC    4F'-1'\n         DC    CL8'ADDGRSLT'\nBSAVE630 EQU   *\n         SPACE 1\n         L     R8,GRSLTCHN             GET ADDR OF INITIAL NODE\n         LR    R7,R1                   SAVE PTR TO INPUT PARM\nGRLOOP01 EQU   *\n         CLC   0(7,R7),8(R8)           IS THIS OUR BABY?\n         BE    GRADDCNT                YES, GO ADD ONE TO COUNT\n         BL    GRADDNEW                LOW, GO ADD NEW NODE TO CHAIN\n         LR    R6,R8                   SAVE PTR TO CURRENT ENTRY\n         L     R8,0(R8)                GET PTR TO NEXT ENTRY\n         LTR   R8,R8                   IS IT NULL?\n         BNZ   GRLOOP01                NO, GO TRY NEXT\n         DC    H'0'                    SHOULD NEVER HAPPEN\nGRADDCNT EQU   *\n         AP    4(4,R8),ADDGRSCT        BUMP COUNTER\n         B     EXIT630                 EXIT\nGRADDNEW EQU   *\n         BAL   R9,GETFREE              GET NEW ENTRY\n         ZAP   4(4,R1),ADDGRSCT        INITIALIZE COUNT\n         MVC   8(8,R1),0(R7)           MOVE NAME\n         ST    R8,0(R1)                STORE NEW FORWARD PTR\n         ST    R1,0(R6)                STORE PTR TO NEW ELEMENT\n         MVC   SEARCHNM,0(R7)          MOVE NAME FOR SEARCH\n         LR    R8,R1                   SAVE R1 TEMPORARILY\n         MVC   16(7,R8),=7CL1'?'       PRIME WITH ???????\n         MVC   23(8,R8),=8CL1'?'       PRIME WITH ???????\n         BAL   R9,SEARCHNS             CHECK MAMA CHAIN FOR SUP'D PTFS\n         LTR   R1,R1                   ANY MATCHES?\n         BZ    EXIT630                 NO, SPLIT\n         MVC   16(7,R8),16(R1)         MOVE FMID\n         MVC   23(8,R8),8(R1)          MOVE SUP'ING PTF\n         SPACE 1\nEXIT630  EQU   *\n         LM    R6,R9,SAVE630\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE FILLS IN THE GLOBAL RESULT TABLE, AND THEN GOES BACK *\n*   AND ADDS MAMA/SON NODES TO THE MAMA CHAIN FOR EVERY HOLD ERROR    *\n*   THAT HAS A NON-??????? SUPBY FIELD                                *\n***********************************************************************\n         SPACE 1\nPRMGRSLT DS    0H\n         ST    R9,SAVE635\n         B     BSAVE635\nSAVE635  DC    F'-1'\n         DC    CL8'PRMGRSLT'\nBSAVE635 EQU   *\n         SPACE 1\n*------> FIRST, FILL IN THE BLANK SPOTS IN THE TABLE\n         L     R8,GRSLTCHN             GET ADDR OF INITIAL NODE\nGMLOOP01 EQU   *\n         CLI   8(R8),X'FF'             TERMINAL NODE?\n         BE    GMFINAL1                YES, GO PRINT LAST LINE\n         CLI   8(R8),X'11'             FIRST NODE?\n         BE    GMLOOP02                YES, ITERATE\n         MVC   SEARCHNM,8(R8)          MOVE NAME FOR SEARCH\n         MVC   16(7,R8),=7CL1'?'       PRIME WITH ???????\n         MVC   23(8,R8),=8CL1'?'       PRIME WITH ???????\n         BAL   R9,SEARCHNS             CHECK MAMA CHAIN FOR SUP'D PTFS\n         LTR   R1,R1                   ANY MATCHES?\n         BZ    GMLOOP02                NO, SPLIT\n         MVC   16(7,R8),16(R1)         MOVE FMID\n         MVC   23(8,R8),8(R1)          MOVE SUP'ING PTF\nGMLOOP02 EQU   *\n         L     R8,0(R8)                INDEX TO NEXT ENTRY\n         B     GMLOOP01                ITERATE\nGMFINAL1 EQU   *\n*------> SECONDLY, FOR EVERY NON-? IN TABLE, BUILD A MAMA/SON NODE\n         L     R8,GRSLTCHN             GET ADDR OF INITIAL NODE\nGMLOOP03 EQU   *\n         CLI   8(R8),X'FF'             TERMINAL NODE?\n         BE    GMFINAL2                YES, GO PRINT LAST LINE\n         CLI   8(R8),X'11'             FIRST NODE?\n         BE    GMLOOP04                YES, ITERATE\n         CLI   16(R8),C'?'             IS IT UNKNOWN?\n         BE    GMLOOP04                YES, BYPASS\n         BAL   R9,GETFREE              GET A BLANK NODE\n         LR    R3,R1                   SAVE SONS PTR\n         BAL   R9,GETFREE              GET ANOTHER BLANK NODE\n         ST    R3,4(R1)                SAVE PTR TO SON IN MAMA\n         MVC   8(7,R1),8(R8)           MOVE NEW MAMAS NAME (ERROR ID)\n         MVI   15(R1),MAMARSNC         MOVE NEW MAMAS REASON D'ETRE\n         MVC   16(7,R1),16(R8)         MOVE NEW MAMAS FMID\n         MVC   23(7,R1),23(R8)         MOVE NEW MAMAS SUPBY\n         LR    R2,R1                   COPY REGISTER\n         BAL   R9,PUTMAMA              ADD MAMA TO MAMA CHAIN\n         XC    SONFWDP,SONFWDP         CLEAR FORWARD PTR IN SON\n         ST    R2,SONMOMP              STORE PTR TO MAMA\n         MVC   SONNAME,23(R8)          MOVE IN SUPBY NAME\n         MVC   SONRSN,30(R8)           MOVE IN SUPBY NAME\nGMLOOP04 EQU   *\n         L     R8,0(R8)                INDEX TO NEXT ENTRY\n         B     GMLOOP03                ITERATE\nGMFINAL2 EQU   *\n         SPACE 1\nEXIT635  EQU   *\n         L     R9,SAVE635\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE PRINTS THE GLOBAL RESULT TABLE                       *\n***********************************************************************\n         SPACE 1\nPRTGRSLT DS    0H\n         STM   R6,R9,SAVE640\n         B     BSAVE640\nSAVE640  DC    4F'-1'\n         DC    CL8'PRTGRSLT'\nBSAVE640 EQU   *\n         SPACE 1\n         L     R8,GRSLTCHN             GET ADDR OF INITIAL NODE\n         ZAP   LINECNT,=PL2'99'        FORCE FIRST PAGE EJECT\nGPLOOP01 EQU   *\n         CP    PAGESIZE,LINECNT        HAVE WE HIT OVERFLOW YET?\n         BNL   BYPEJCT2                DON'T EJECT YET\n         AP    PAGECNT,=PL1'1'         BUMP PAGE NUMBER\n         MVC   HDR2PAGE,=XL4'40202120' MOVE EDIT FIELD\n         ED    HDR2PAGE,PAGECNT+2      FORMAT THE PAGE NUMBER\n         PUT   REPORT,HDRREC2          WRITE THE TITLE LINE\n         PUT   REPORT,HDRREC3          WRITE THE SUBTITLE LINE\n         MVI   PRTREC,C' '             CLEAR FIRST BYTE\n         MVC   PRTREC+1(L'PRTREC-1),PRTREC\n         MVI   PRTREC,C'0'\n         PUT   REPORT,PRTREC\n         ZAP   LINECNT,=PL1'5'         CLEAR THE LINE COUNTER\nBYPEJCT2 EQU   *\n         CLI   8(R8),X'FF'             TERMINAL NODE?\n         BE    GPFINAL                 YES, GO PRINT LAST LINE\n         CLI   8(R8),X'11'             FIRST NODE?\n         BE    GPLOOP02                YES, ITERATE\n         TM    OPTIONS1,OPTDETAL       USER REQUEST FULL DETAIL?\n         BO    GPBYPDET                YA, BYPASS SXREF/NXREF TEST\n         CP    4(4,R8),=PL1'0'         IS THE COUNT ZERO?\n         BE    GPLOOP02                YES, DON'T PRINT\nGPBYPDET EQU   *\n         MVI   PRTREC3,C'0'            DOUBLE SPACE\n         MVC   PRT3NAME,8(R8)          MOVE NAME OF NAME\n         MVC   PRT3CNT,=XL10'40206B2020206B202120'\n         ED    PRT3CNT,4(R8)           INSERT THE COUNT\n         MVI   PRT3RSN,C' '            CLEAR THE RECORD\n         MVC   PRT3RSN+1(L'PRT3RSN-1),PRT3RSN\n         TM    15(R8),SONSRSNA         IS IT THIS REASON CODE?\n         BNO   GPTSTRB                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGA),SONSMSGA\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRB  EQU   *\n         TM    15(R8),SONSRSNB         IS IT THIS REASON CODE?\n         BNO   GPTSTRC                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGB),SONSMSGB\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRC  EQU   *\n         TM    15(R8),SONSRSNC         IS IT THIS REASON CODE?\n         BNO   GPTSTRD                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGC),SONSMSGC\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRD  EQU   *\n         TM    15(R8),SONSRSND         IS IT THIS REASON CODE?\n         BNO   GPTSTRE                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGD),SONSMSGD\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRE  EQU   *\n         TM    15(R8),SONSRSNE         IS IT THIS REASON CODE?\n         BNO   GPTSTRF                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGE),SONSMSGE\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRF  EQU   *\n         TM    15(R8),SONSRSNF         IS IT THIS REASON CODE?\n         BNO   GPTSTRG                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGF),SONSMSGF\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRG  EQU   *\n         TM    15(R8),SONSRSNG         IS IT THIS REASON CODE?\n         BNO   GPTSTRH                 NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGG),SONSMSGG\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPTSTRH  EQU   *\n         TM    15(R8),SONSRSNH         IS IT THIS REASON CODE?\n         BNO   GPUTLINE                NO, GO AROUND\n         MVC   PRT3RSN(L'SONSMSGH),SONSMSGH\n         B     GPUTLINE                GO WRITE THE LINE OUT\nGPUTLINE EQU   *\n         MVC   PRT3FMID,16(R8)         MOVE FMID\n         MVC   PRT3SUPR,23(R8)         MOVE SUP'ING PTF\n         PUT   REPORT,PRTREC3          PRINT REPORT\n         AP    LINECNT,=PL1'2'         BUMP THE LINE COUNTER\nGPLOOP02 EQU   *\n         L     R8,0(R8)                INDEX TO NEXT ENTRY\n         B     GPLOOP01                ITERATE\nGPFINAL  EQU   *\n         SPACE 1\nEXIT640  EQU   *\n         LM    R6,R9,SAVE640\n         BR    R9\n         EJECT\n***********************************************************************\n*              W O R K I N G   S T O R A G E   S E C T I O N          *\n***********************************************************************\n         SPACE 3\nSMPOUTI  DCB   DSORG=PS,               DCB FOR READING INPUT REPORT    X\n               RECFM=FBA,                                              X\n               MACRF=GM,                                               X\n               EODAD=EOFSMPER,                                         X\n               DDNAME=SMPOUTI\nSMPOUTO  DCB   DSORG=PS,               DCB FOR REPRODUCING SMPOUT      X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               LRECL=121,                                              X\n               BLKSIZE=0,                                              X\n               DDNAME=SMPOUTO\nSMPRPTI  DCB   DSORG=PS,               DCB FOR READING INPUT REPORT    X\n               RECFM=FBA,                                              X\n               MACRF=GM,                                               X\n               EODAD=EOFRPTR,                                          X\n               DDNAME=SMPRPTI\nSMPRPTO  DCB   DSORG=PS,               DCB FOR REPRODUCING SMPRPT      X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               LRECL=121,                                              X\n               BLKSIZE=0,                                              X\n               DDNAME=SMPRPTO\nREPORT   DCB   DSORG=PS,               DCB FOR PRINTING REPORT         X\n               RECFM=FBA,                                              X\n               MACRF=PM,                                               X\n               DDNAME=REPORT,                                          X\n               BLKSIZE=0,                                              X\n               LRECL=121\nPTSDD    DCB   DSORG=PS,               DCB FOR READING PTS             X\n               RECFM=FB,                                               X\n               MACRF=GM,                                               X\n               DDNAME=PTSDD,                                           X\n               BLKSIZE=0,                                              X\n               EODAD=EOFPTS,                                           X\n               LRECL=80\n         EJECT\n*------> THIS AREA IS USED FOR MISCELLANEOUS STUFF\nSEARCHNM DS    CL7                     NAME FOR SEARCHN ROUTINE\nWORKREC  DS    CL121                   INPUT AREA\nPRTREC   DS    CL121                   OUTPUT AREA\nLINECNT  DC    PL2'56'                 LINE COUNTER FOR PAGE EJECT\nPAGECNT  DC    PL4'0'                  PAGE NUMBER\nADDGRSCT DC    PL1'0'                  0=INITIAL ADD 1=LATER ADD\nPTSMEM   DC    F'0'                    MEMORY USED BY PTS ROUTINE\nCYCLENUM DC    F'0'                    CYCLE NUMBER THROUGH FEADTREE\n         EJECT\n*------> THE FOLLOWING ITEMS ARE USED BY THE OPTIONS ROUTINE\nPAGESIZE DC    PL2'55'                 NUMBER OF LINES PER PAGE\nPTSNAME  DC    CL44' '                 NAME OF THE PTS\nPTSVOL   DC    CL6' '                  VOLSER OF THE PTS\nPTSUNIT  DC    CL8' '                  UNITNAME OF THE PTS\nOPTIONS1 DC    XL1'80'                 OPTION FLAGS\nOPTSXREF EQU   X'80'                   SHORT XREF ONLY\nOPTNXREF EQU   X'40'                   NO XREF AT ALL\nOPTDETAL EQU   X'20'                   FULL DETAIL REQUESTED\nOPTLNCT  DC    F'27'                   NUMBER OF LINES IN BANNER\nOPTLNTH  EQU   61\nOPTLINE1 EQU   *\n DC CL61'*************************************************************'\n DC CL61'*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*'\n DC CL61'*++*******************************************************++*'\n DC CL61'*++*                                                     *++*'\n DC CL61'*++*                    SMP/E TOOL                       *++*'\n DC CL61'*++*                                                     *++*'\n DC CL61'*++*        ---------- DEVELOPED BY -------------        *++*'\n DC CL61'*++*                                                     *++*'\n DC CL61'*++*                   TED BESTANI                       *++*'\n DC CL61'*++*        NETCOM CONSULTING AND EDUCATION, INC.        *++*'\n DC CL61'*++*                 2644 TEAL LANE                      *++*'\n DC CL61'*++*               UNION CITY, CA 94587                  *++*'\n DC CL61'*++*                                                     *++*'\n DC CL61'*++*******************************************************++*'\n DC CL61'*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*'\n DC CL61'*************************************************************'\n DC CL61'* TO HELP SYSTEM PROGRAMMERS RESOLVE SMPE APPLY BACKCHAINS  *'\n DC CL61'*************************************************************'\n DC CL61'                                                             '\n DC CL61'    THE FOLLOWING OPTIONS WERE SET BY PARMS:                 '\n DC CL61'                                                             '\n         EJECT\n*------> THE FOLLOWING IS USED BY THE DATE ROUTINE\nWORKDBLW DS    D                       WORKAREA FOR CVB CONVERSIONS\nWORKTIME DS    CL8\nMONTHTBL DC    PL2'31',PL2'28',PL2'31',PL2'30',PL2'31',PL2'30'\n         DC    PL2'31',PL2'31',PL2'30',PL2'31',PL2'30',PL2'31'\nDIVFIELD DS    PL4                     MEMORY FOR DIVIDE PACKED\nMONTH    DS    PL2                     PACKED MONTH\nTIME     DS    0CL8                    CURRENT TIME\nTIMEHH   DS    CL2\n         DC    CL1':'\nTIMEMM   DS    CL2\n         DC    CL1':'\nTIMESS   DS    CL2\nDATE     DS    0CL8                    CURRENT DATE\nDATEMM   DS    CL2\n         DC    CL1'/'\nDATEDD   DS    CL2\n         DC    CL1'/'\nDATEYY   DS    CL2\n         EJECT\n*--> THE FOLLOWING ENTRIES ARE USED BY DYNALLOC (SVC 99)\n         DS    0F\nS99RBPTR DC    X'80',AL3(S99RB)        ADDR OF THE REQUEST BLOCK\nS99RB    DC    AL1(20)                 CONSTANT LENGTH\nS99TYPE  DC    AL1(01)                 DSNAME ALLOCATION\n         DC    X'0000'                 MAY USE EXISTING ALLOCATION\nS99ERROR DS    CL2                     RETURN ERROR CODE\nS99INFO  DS    CL2                     ERROR INFO CODE\nS99TXTPP DC    A(S99TUPL)              PTR TO TEXT PTR LIST\nS99C1    DC    A(0)                    RESERVED\nS99C2    DC    A(0)                    RESERVED\nS99TUPL  DC    A(S99TXT01)             PTR TO TEXT 01\n         DC    A(S99TXT02)             PTR TO TEXT 02\n         DC    A(S99TXT03)             PTR TO TEXT 02\n         DC    A(S99TXT04)             PTR TO TEXT 02\n         DC    A(S99TXT10)             PTR TO TEXT 02\n         DC    X'80',AL3(S99TXT15)     PTR TO LAST TEXT BLOCK\nS99TXT01 DC    XL06'000100010005'      ESTABLISH DDNAME\nS99DDNAM DC    CL5'PTSDD'                  THIS IS THE DDNAME\nS99TXT02 DC    XL06'00020001002C'      REQUEST BY DSNAME\nS99DSN   DC    CL44' '                     THIS IS THE DSNAME\nS99TXT03 DC    XL06'000300010007'      REQUEST BY MEMBER\nS99MBR   DC    CL7' '                      THIS IS THE MEMBER\nS99TXT04 DC    XL07'00040001000108'    DISP=SHR\nS99TXT10 DC    XL06'001000010006'      REQUEST BY VOLSER\nS99VOL   DC    CL6' '                      THIS IS THE VOLSER\nS99TXT15 DC    XL06'001500010008'      REQUEST BY UNIT\nS99UNIT  DC    CL8' '                      THIS IS THE UNIT\n         SPACE 1\n*--> THE FOLLOWING ENTRIES ARE USED BY DYNALLOC (SVC 99)\n         DS    0F\nS98RBPTR DC    X'80',AL3(S98RB)        ADDR OF THE REQUEST BLOCK\nS98RB    DC    AL1(20)                 CONSTANT LENGTH\nS98TYPE  DC    AL1(02)                 UNALLOCATE DDNAME\n         DC    X'0000'                 MAY USE EXISTING ALLOCATION\nS98ERROR DS    CL2                     RETURN ERROR CODE\nS98INFO  DS    CL2                     ERROR INFO CODE\nS98TXTPP DC    A(S98TUPL)              PTR TO TEXT PTR LIST\nS98C1    DC    A(0)                    RESERVED\nS98C2    DC    A(0)                    RESERVED\nS98TUPL  DC    A(S98TXT01)             PTR TO FIRST TEXT BLOCK\n         DC    X'80',AL3(S98TXT08)     PTR TO LAST TEXT BLOCK\nS98TXT01 DC    XL06'000100010005'      UNALLOCATE DD STATEMENT\nS98DD    DC    CL05'PTSDD'             NAME OF THE DD STATEMENT\nS98TXT08 DC    XL04'00080000'          REMOVE IN-USE ATTRIBUTE\n         EJECT\n*------> THIS AREA IS USED TO CHECK FOR NUMERICS\nTRTNUM   DC    256XL1'FF'             |TRT TABLE TO CHECK NUMERICS\n         ORG   TRTNUM+C'0'            |\n         DC    XL10'00'               |\n         ORG\n*------> THE FOLLOWING ARE PRE-DEFINED PRINT AREAS\nHDRREC1  DS    0CL121                  USED TO REPORT BARREN CHILDREN\nHDR1CC   DC    C'1'\nHDR1DATE DC    CL8' '\n         DC    CL1' '\nHDR1TIME DC    CL5' '\n         DC    CL26' '\n         DC    CL39'**** BACK-CHAINING ANALYSIS REPORT ****'\n         DC    CL33' '\n         DC    CL4'PAGE'\nHDR1PAGE DC    XL4'40202120'\n*\nPRTREC1  DS    0CL121                  USED TO REPORT BARREN CHILDREN\nPRT1CC   DC    C' '\nPRT1MAMA DC    CL7' '\n         DC    CL6' FMID('\nPRT1FMID DC    CL7' '\n         DC    CL1')'\n         DC    CL5' SUP('\nPRT1SUP  DC    CL7' '\n         DC    CL1')'\n         DC    CL2' ('\nPRT1RSN  DC    CL30' '\n         DC    CL1')'\n         DC    CL38' IS HELD UP BY THE FOLLOWING ELEMENTS:'\n         DC    CL14' '\n*\nPRTREC2  DS    0CL121                  USED TO REPORT BARREN CHILDREN\nPRT2CC   DC    C' '\n         DC    CL8' '\nPRT2SON  DC    CL7' '\n         DC    C' ('\nPRT2RSN  DC    CL25' '\n         DC    C') IS RELATED TO ELEMENT '\nPRT2REL  DC    CL7' '\n         DC    CL47' '\n*\nHDRREC2  DS    0CL121                  USED TO REPORT GLOBAL RESULTS\nHDR2CC   DC    C'1'\nHDR2DATE DC    CL8' '\n         DC    CL1' '\nHDR2TIME DC    CL5' '\n         DC    CL25' '\n         DC    CL41'**** RESEARCH RECOMMENDATIONS REPORT ****'\n         DC    CL32' '\n         DC    CL4'PAGE'\nHDR2PAGE DC    XL4'40202120'\n*\nHDRREC3  DS    0CL121                  USED TO REPORT GLOBAL RESULTS\nHDR3CC   DC    C'0'\n         DC    CL07' NAME  '\n         DC    CL14'       COUNT '\n         DC    CL26'       TYPE '\n         DC    CL06' FMID '\n         DC    CL11' '\n         DC    CL09' SUPBY '\n         DC    CL48' '\n*\nPRTREC3  DS    0CL121                  USED TO REPORT GLOBAL RESULTS\nPRT3CC   DC    C' '\nPRT3NAME DC    CL7' '\n         DC    CL4'   ('\nPRT3CNT  DC    XL10'40206B2020206B202120'\n         DC    CL3' ) '\nPRT3RSN  DC    CL15' '\n         DC    CL8'   FMID('\nPRT3FMID DC    CL7' '\n         DC    CL10')   SUPBY('\nPRT3SUPR DC    CL7' '\n         DC    CL1')'\n         DC    CL55' '\n         EJECT\n*------> MAMA NODE REASON CODES\nMAMARSNA EQU   X'80'\nMAMARSNB EQU   X'40'\nMAMARSNC EQU   X'20'\nMAMARSND EQU   X'10'\nMAMARSNE EQU   X'08'\nMAMARSNF EQU   X'04'\nMAMARSNG EQU   X'04'\nMAMARSNH EQU   X'01'\nMAMAMSGA DC    CL24'MISSING/NOGO REQUISITES:'\nMAMAMSGB DC    CL28'HOLD REASON IDS NOT RESOLVED'\nMAMAMSGC DC    CL28'HOLD ERROR CODE NOT RESOLVED'\nMAMAMSGD DC    CL24'NO PRE OR SUP - REGRESSION'\n*------> SONS NODE REASON CODES\nSONSRSNA EQU   X'80'\nSONSRSNB EQU   X'40'\nSONSRSNC EQU   X'20'\nSONSRSND EQU   X'10'\nSONSRSNE EQU   X'08'\nSONSRSNF EQU   X'04'\nSONSRSNG EQU   X'02'\nSONSRSNH EQU   X'01'\nSONSMSGA DC    CL8'PRE NOGO'\nSONSMSGB DC    CL8'PRE HELD'\nSONSMSGC DC    CL8'REQ HELD'\nSONSMSGD DC    CL10'IFREQ HELD'\nSONSMSGE DC    CL13'IFREQ MISSING'\nSONSMSGF DC    CL10'HOLD ERROR'\nSONSMSGG DC    CL13'NO PRE OR SUP'\nSONSMSGH DC    CL11'HOLD SYSTEM'\n*------>\nMAMACHN  DC    A(0)                    ANCHOR PTR FOR MAMA CHAIN\nMAMALAST DC    A(0)                    LAST MAMA IN THE CHAIN\nMAMANEXT DC    F'0'                    NEXT ROOT NODE IN MAMA CHAIN\nMAMANOW  DC    F'0'                    CURRENTLY ACTIVE MAMA\nSONSLAST DC    F'0'                    LAST SON IN THIS MAMAS CHAIN\nFREEMEM  DC    F'0'                    PTR TO GETMAINED MEMORY\nFREECHN  DC    F'0'                    ANCHOR PTR FOR FREE CHAIN\nNOTECHN  DC    F'0'                    ANCHOR PTR FOR NOTE CHAIN\nNOTELAST DC    F'0'                    LAST SON IN THE NOTE CHAIN\n         EJECT\n*------> LOCAL RESULT TABLE ALWAYS HAS A FIRST AND LAST ELEMENT\n         DS    0D\nLRSLTCHN DC    A(LRSLTBGN)\nLRSLTBGN DC    A(LRSLTEND),12XL1'11'\nLRSLTEND DC    A(0),12XL1'FF'\n*------> GLOBAL RESULT TABLE ALWAYS HAS A FIRST AND LAST ELEMENT\n         DS    0D\nGRSLTCHN DC    A(GRSLTBGN)\nGRSLTBGN DC    A(GRSLTEND),12XL1'11'\nGRSLTEND DC    A(0),12XL1'FF'\n         EJECT\n*------>\n         LTORG\n         SPACE 3\n         END   SMPETOOL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STARTREK": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x13/\\x00\\x91\\x07/\\x13#\\x06\\x1d\\x06\\x1d\\x00\\x05\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-05-12T00:00:00", "modifydate": "1991-03-13T13:23:00", "lines": 1565, "newlines": 1565, "modlines": 5, "user": "SYSTAB"}, "text": "STREK    TITLE '** TSO FULL-SCREEN STAR TREK **'\n***********************************************************************\n*    NAME - STREK                                                     *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS PROGRAM IS DESIGNED TO PLAY STAR TREK USING THE   *\n*              HARDWARE CHARACTERISTICS OF 3270 TERMINALS.            *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - ARITH REQUIRES THAT VTAM OR TCAM SUPPORT THE      *\n*                   FULL-SCREEN OPTION.  IT IS DESIGNED FOR 3278M2    *\n*                   TERMINALS.                                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nSTREK    CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         SPACE 1\n         BAL   R9,DRIVER               CALL MAIN DRIVER ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET BACKWARD SA PTR\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME......\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         BAL   R9,HEADER               INIT MEMORY AND TPUT HEADER\n         BAL   R9,INTERACT             INTERACT WITH USER\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*  THIS ROUTINE INITIALIZES MEMORY AND TPUT'S HEADERS                 *\n***********************************************************************\n         SPACE 1\nHEADER   DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'HEADER  '\nBSAVE20  EQU   *\n         SPACE 1\n         L     R1,0(R1)                GET ADDR OF PARM\n         LH    R2,0(R1)                GET LENGTH\n         CLI   2(R1),C'2'              BYPASS SCREEN2?\n         BE    BYPSC2                  YES, BYPASS\n         CLI   2(R1),C'3'              GO DIRECTLY TO COMPUTER\n         BE    BYPSC3                  YES\n         L     R2,=A(SCREEN2)          GET SCREEN2 ADDRESS\n         TPUT  (R2),1936,FULLSCR       WRITE HEADER SCREEN\n         TGET  SCRETURN,1              GET RETURN\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN\nBYPSC2   EQU   *\n         L     R2,=A(SCREEN3)          GET SCREEN3 ADDRESS\n         TPUT  (R2),1936,FULLSCR       WRITE HEADER SCREEN\n         TGET  SCRETURN,1              GET RETURN\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN\nBYPSC3   EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         BAL   R9,RANDOM10             GET FROM 0 - 9\n         LR    R2,R1                   COPY REGISTER\n         MH    R2,=H'7'                MULTIPLY BY NODE LENGTH\n         LA    R3,GAMETBL              GET START ADDRESS\n         AR    R3,R2                   ADD TO BASE\n         MVC   GAMESTAT,0(R3)          MOVE THE GAME STATISTICS\n         XC    STARCHRT+000(256),STARCHRT+000  ** CLEAR\n         XC    STARCHRT+256(256),STARCHRT+256  ** CLEAR\n         XC    STARCHRT+512(256),STARCHRT+512  ** CLEAR\n         XC    STARCHRT+768(256),STARCHRT+768  ** CLEAR\n         TIME  MIC,TIMEAREA            GET BASE TIME\n         MVC   TIMEAREA(2),TIMEAREA+5  ALIGN\n         NI    TIMEAREA,X'03'          AT MOST, 4K\n         LH    R2,TIMEAREA             LOAD INTO WORK REGISTER\n         ZAP   INITKLNG,GAMEKLNG       ** INIT COUNTERS\n         ZAP   INITBASE,GAMEBASE       **\n         ZAP   INITSTRS,GAMESTRS       **\n         XR    R4,R4                   INIT RANDOM FACTOR\n         B     INITLOP2\nINITLOP1 EQU   *\n         LA    R3,STARCHRT             RE-INIT STAR CHART\n         SRL   R2,2                    JUMBLE DISP PTR\n         TIME  MIC,TIMEAREA            GET TIME FOR RANDOM FACTOR\n         MVC   TIMEAREA(2),TIMEAREA+5  ALIGN IT\n         NI    TIMEAREA,X'0F'          CLEAR HIGH ORDER NIBBLE\n         NI    TIMEAREA+1,X'F0'              LOW ORDER NIBBLE\n         LH    R4,TIMEAREA\n         SRL   R4,4                    SHIFT DOWN 0 < X < 256\n         AR    R2,R4                   ADD RANDOM FACTOR\n         BAL   R9,RANDOM10             GET INCREMENT FOR RANDOM\n         AR    R4,R1                   BUMP RANDOM FACTOR\nINITLOP2 EQU   *\n         CP    INITSTRS,=PL1'0'        ALL THE STARS USED UP?\n         BE    TRYKLING\n         LA    R3,STARCHRT             RESET START CHART PTR\n         LA    R2,129(R2)              BUMP DISPLACEMENT COUNTER\n         CH    R2,=H'1024'             EXCEEDED TABLE?\n         BH    INITLOP1                YES, CLEAR\n         AR    R3,R2                   ADD DISPLACEMENT\n         CLI   0(R3),X'00'             HAS THIS POINT BEEN USED YET?\n         BNE   TRYKLING\n         CP    INITSTRS,=PL1'0'        ALL THE STARS USED UP?\n         BE    TRYKLING\n         C     R3,=A(STARCHRT+1024)\n         BNL   INITLOP1\n         MVI   0(R3),X'03'             MARK AS A STAR\n         SP    INITSTRS,=PL1'1'        DECREMENT STAR COUNTER\nTRYKLING EQU   *\n         CP    INITKLNG,=PL1'0'        ALL THE KLINGONS USED UP?\n         BE    TRYBASES\n         LA    R3,STARCHRT             RESET START CHART PTR\n         LA    R2,129(R2)              BUMP DISPLACEMENT COUNTER\n         CH    R2,=H'1024'             EXCEEDED TABLE?\n         BH    INITLOP1                YES, CLEAR\n         AR    R3,R2                   ADD DISPLACEMENT\n         CLI   0(R3),X'00'             HAS THIS POINT BEEN USED YET?\n         BNE   TRYBASES\n         CP    INITKLNG,=PL1'0'        ALL THE KLINGONS USED UP?\n         BE    TRYBASES\n         C     R3,=A(STARCHRT+1024)\n         BNL   INITLOP1\n         MVI   0(R3),X'01'             MARK AS A KLINGON\n         SP    INITKLNG,=PL1'1'        DECREMENT KLINGON COUNTER\nTRYBASES EQU   *\n         CP    INITBASE,=PL1'0'        ALL THE BASES USED UP?\n         BE    INITLOP3\n         LA    R3,STARCHRT             RESET STAR CHART PTR\n         LA    R2,129(R2)              BUMP DISPLACEMENT COUNTER\n         CH    R2,=H'1024'             EXCEEDED TABLE?\n         BH    INITLOP1                YES, CLEAR\n         AR    R3,R2                   ADD DISPLACEMENT\n         CLI   0(R3),X'00'             HAS THIS POINT BEEN USED YET?\n         BNE   INITLOP2\n         CP    INITBASE,=PL1'0'        ALL THE BASES USED UP?\n         BE    INITLOP3\n         C     R3,=A(STARCHRT+1024)\n         BNL   INITLOP1\n         MVI   0(R3),X'02'             MARK AS A BASE\n         SP    INITBASE,=PL1'1'        DECREMENT BASE COUNTER\n         B     INITLOP2\nINITLOP3 EQU   *\n         CP    INITKLNG,=PL1'0'        NO KLINGONS ALSO?\n         BNE   INITLOP2\n         CP    INITSTRS,=PL1'0'        NO STARS EITHER\n         BNE   INITLOP2\nINITKIRK EQU   *\n         TIME  MIC,TIMEAREA            GET BASE TIME\n         MVC   TIMEAREA(2),TIMEAREA+5  ALIGN\n         NI    TIMEAREA,X'03'          CLEAR BITS DOWN TO X'02'\n         LA    R2,STARCHRT             GET ADDR OF STAR CHART\n         AH    R2,TIMEAREA             ADD DISP\n         CLI   0(R2),X'00'             IS IT EMPTY\n         BNE   INITKIRK\n         MVI   0(R2),X'04'             PUT CAPT. KIRK IN IT\n*--> NOW LET'S JUMBLE IT UP A BIT.\n         LA    R2,STARCHRT\n         LA    R3,STARCHRT+768\n         LA    R4,128\nJUMBLE1  EQU   *\n         XC    0(1,R2),0(R3)           *\n         XC    0(1,R3),0(R2)           * FLIP THE TWO BYTES\n         XC    0(1,R2),0(R3)           *\n         LA    R2,2(R2)                BUMP 1ST PTR\n         LA    R3,2(R3)                     2ND PTR\n         BCT   R4,JUMBLE1              ITERATE\n         LA    R2,STARCHRT+512\n         LA    R3,STARCHRT+256\n         LA    R4,128\nJUMBLE2  EQU   *\n         XC    0(1,R2),0(R3)           *\n         XC    0(1,R3),0(R2)           * FLIP THE TWO BYTES\n         XC    0(1,R2),0(R3)           *\n         LA    R2,2(R2)                BUMP 1ST PTR\n         LA    R3,2(R3)                     2ND PTR\n         BCT   R4,JUMBLE2              ITERATE\n         SPACE 2\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE RETURNS A NUMBER FROM 0 - 9 IN REGISTER 1.         *\n***********************************************************************\n         SPACE 2\nRANDOM10 DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'RANDOM10'\nBSAVE30  EQU   *\n         SPACE 1\n         TIME  MIC,TIMEAREA            GET TOD CLOCK\n         NI    TIMEAREA+6,X'F0'        CLEAR RIGHT MIC NIBBLE\n         XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,TIMEAREA+6           LOAD LEFT NIBBLE\n         SRL   R1,4                    MOVE IT OVER\n         CH    R1,=H'10'               IF IT'S GREATER THAN 10....\n         BL    LT10\n         SRL   R1,1                        DIVIDE BY TWO\nLT10     EQU   *\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE RETURNS THE SQUARE ROOT OF A NUMBER.               *\n***********************************************************************\n         SPACE 2\nSQRTRTN  DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'SQRTRTN '\nBSAVE40  EQU   *\n         SPACE 1\n         CH    R1,=H'1'                SQRT OF 1 = 1\n         BNH   EXIT40\n         STM   R2,R6,SQRTSV5R          SAVE USERS REGISTERS\n         XR    R2,R2                   INIT LOW REG TO 0\n         LR    R3,R1                        HIGH REG TO X\nSQRTLOOP EQU   *\n         LR    R6,R3                   IF DISTANCE BETWEEN\n         SR    R6,R2                       LOW AND HIGH\n         CH    R6,=H'1'                    EQUAL TO 1....\n         BNE   SQRTBYP1\n         LR    R4,R3                       PUT HIGH IN R4\n         B     SQRTEND                     GOTO END\nSQRTBYP1 EQU   *\n         LR    R4,R3                   GET HIGH\n         AR    R4,R2                   GET LOW\n         SRL   R4,1                    AVERAGE - TRUNCATED\n         LR    R5,R4                   SAVE IT\n         STH   R5,SQRTHALF             AGAIN - IN MEMORY\n         MH    R5,SQRTHALF             GET SQUARE\n         CR    R5,R1                   COMPARE\n         BL    SQRTLOW                 LOW\n         BE    SQRTEND                 =\n         BH    SQRTHIGH                HIGH\nSQRTLOW  EQU   *\n         LR    R2,R4                   RE-INIT LOW PTR\n         B     SQRTLOOP\nSQRTHIGH EQU   *\n         LR    R3,R4                   RE-INIT HIGH PTR\n         B     SQRTLOOP\nSQRTEND  EQU   *\n         LR    R1,R4                   PUT ANSWER INTO R1\n         LM    R2,R6,SQRTSV5R          RESTORE USERS REGISTERS\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         SPACE 3\nSQRTSV5R DS    5F\nSQRTHALF DS    H\n         EJECT\n***********************************************************************\n*     THIS ROUTINE CONTROLS THE INTERACTION WITH THE USER             *\n***********************************************************************\n         SPACE 2\nINTERACT DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'INTERACT'\nBSAVE50  EQU   *\n         SPACE 1\nINTER1PT EQU   *\n         BAL   R9,DISPLAYS             BUILD AND INVOKE PRIMARY SCREEN\n         BAL   R9,CALLCMND             INVOKE REQUESTED COMMAND\n         BAL   R9,REACTION             THE KLINGONS FIRE BACK\n         B     INTER1PT                INFERNAL LOOP\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE REBUILDS THE MAIN DISPLAY SCREEN                   *\n***********************************************************************\n         SPACE 2\nDISPLAYS DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'DISPLAYS'\nBSAVE60  EQU   *\n         SPACE 1\n*--> RESET SCREEN\n         MVI   SC1LN17+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN18+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN19+5,C'.'          RESET COMMAND DOTS\n         MVC   SC1LN20+2(4),=CL4'....' RESET COMMAND DOTS\n*--> FORMAT LOGON RANGE SENSORS\n         LA    R1,STARCHRT             INIT PTR TO STAR CHART\n         LA    R2,SC1LN02+3                        SCREEN\n         LA    R3,4                    4 LINES PER SECTOR\nDSPLOOP1 EQU   *\n         LA    R5,4                    QUADRANTS PER LINE\nDSPLOOP2 EQU   *\n         LA    R4,64                   64 POSITIONS PER QUADRANT\n         ZAP   ACCUM1,=PL1'0'\n         ZAP   ACCUM2,=PL1'0'\n         ZAP   ACCUM3,=PL1'0'\nDSPLOOP3 EQU   *\n         CLI   0(R1),X'00'             EMPTY?\n         BE    DSPEMPTY\n         CLI   0(R1),X'01'             KLINGON?\n         BNE   DSPTYPE2\n         AP    ACCUM1,=PL1'1'          COUNT KLINGONS\n         B     DSPEMPTY\nDSPTYPE2 EQU   *\n         CLI   0(R1),X'02'             BASE\n         BNE   DSPTYPE3\n         CP    ACCUM2,=PL1'0'          CAN'T HAVE TWO BASE IN 1 QUAD\n         BE    DSPTYP2A\n         MVI   0(R1),X'00'             SORRY - CLEAR IT OUT\n         SP    GAMEBASE,=PL1'1'        SUBTRACT FROM TOTAL PER GAME\n         B     DSPTYPE3\nDSPTYP2A EQU   *\n         AP    ACCUM2,=PL1'1'          LET USER HAVE AT LEAST 1\n         B     DSPEMPTY\nDSPTYPE3 EQU   *\n         CLI   0(R1),X'03'             STAR?\n         BNE   DSPTYPE4\n         AP    ACCUM3,=PL1'1'          COUNT STARS\n         B     DSPEMPTY\nDSPTYPE4 EQU   *\n         ST    R1,KIRKPTR              STORE ADDR OF ENTERPRISE\nDSPEMPTY EQU   *\n         LA    R1,1(R1)                BUMP STAR CHART PTR\n         BCT   R4,DSPLOOP3             LOOP THRU MINOR INDEX\n         UNPK  0(1,R2),ACCUM1          PUT KLINGONS IN LONG RANGE\n         OI    0(R2),X'F0'\n         UNPK  1(1,R2),ACCUM2              BASES\n         OI    1(R2),X'F0'\n         UNPK  2(1,R2),ACCUM3              STARS\n         OI    2(R2),X'F0'\n         LA    R2,6(R2)                BUMP SCREEN PTR\n         BCT   R5,DSPLOOP2             ITERATE THRU SECOND LEVEL INDEX\n         LA    R2,136(R2)              MOVE SCREEN PTR TO NEXT LINE\n         BCT   R3,DSPLOOP1             ITERATE THRU MAJOR INDEX\n*--> FORMAT QUADRANT INDICATOR\n         L     R2,KIRKPTR              GET RELATIVE ADDR OF KIRK\n         LA    R3,STARCHRT             GET BASE ADDR\n         SR    R2,R3\n         SRL   R2,6                    DIVIDE BY 64\n         ST    R2,KIRKPTR              SAVE RELATIVE QUADRANT\n         MH    R2,=H'3'                MULTIPLY BY QUADCVT1 LENGTH\n         LA    R3,QUADCVT1             GET ADDR OF CONVERSION TABLE\n         AR    R3,R2                   GET DISP INTO TABLE\n         MVC   SC1LN13+67(3),0(R3)     PUT CURRENT QUADRANT IN SCREEN\n*--> FORMAT SHORT RANGE SENSORS AND POST COMBAT STATUS\n         L     R3,KIRKPTR              GET KIRK'S POSITION\n         SLL   R3,6                    MULTIPLY BY 64\n         A     R3,=A(STARCHRT)         GET ADDR OF QUADRANT\n         LR    R4,R3\n         CLI   STATUS,C'4'             IS THE ENTERPRISE DOCKED?\n         BE    DSPSTBYP                YES, BYPASS\n         XC    TRTABLE,TRTABLE         CLEAR SEARCH TABLE\n         MVI   TRTABLE+X'01',X'01'     POST KLINGON FOR SEARCH\n         TRT   0(64,R3),TRTABLE        SEARCH QUADRANT FOR KLINGON\n         BC    7,DSPR1                 FOUND, GO POST COND RED\n         CP    GAMENRGY,=PL3'1000'     LOW ON ENERGY\n         BNH   DSPY1                          GO POST COND YELLOW\n         CP    GAMEYRS,=PL1'5'         LOW ON YEARS\n         BNH   DSPY1                          GO POST COND YELLOW\n         MVI   STATUS,C'1'             POST COND GREEN\n         MVC   CONDATTR+8(3),=XL3'0042F4'  GREEN ON SCREEN\n         B     DSPSTBYP\nDSPY1    EQU   *\n         MVI   STATUS,C'2'             POST COND YELLOW\n         MVC   CONDATTR+8(3),=XL3'0042F6'  YELLOW ON SCREEN\n         B     DSPSTBYP\nDSPR1    EQU   *\n         MVI   STATUS,C'3'             POST COND RED\n         MVC   CONDATTR+8(3),=XL3'F142F2'  BLINK RED ON SCREEN\n*--> COMPUTE SCREEN EFFICIENCY PERCENTAGE\n         ZAP   WORKDBLW,GAMENRGY       GET REMAINING ENERGY\n         MP    WORKDBLW,=PL2'100'      * 100\n         DP    WORKDBLW,=PL3'5000'     DIVIDE BY STARTING ENERGY\n         ZAP   DEFLECT,WORKDBLW+3(2)   SAVE THE PERCENTAGE\n         MVC   SCMSG3,=CL44'YOU ARE UNDER ATTACK'\nDSPSTBYP EQU   *\n         LR    R2,R4                   RESTORE R2\n         LA    R3,SC1LN02+53           GET ADDR OF SHORT RANGE SENSORS\n         LA    R4,8                    8 LINES PER QUADRANT\nDSPLOOP4 EQU   *\n         LA    R5,8                    8 POSITIONS PER LINE\nDSPLOOP5 EQU   *\n         CLI   0(R2),X'00'             IS IT EMPTY?\n         BNE   TRYK1\n         MVI   0(R3),C'.'              MARK AS EMPTY\n         B     DSPLOOP6\nTRYK1    EQU   *\n         CLI   0(R2),X'01'             IS IT A KLINGON?\n         BNE   TRYB1\n         MVI   0(R3),C'K'              MARK AS KLINGON\n         B     DSPLOOP6\nTRYB1    EQU   *\n         CLI   0(R2),X'02'             IS IT A STAR BASE?\n         BNE   TRYS1\n         MVI   0(R3),C'B'              MARK AS STAR BASE\n         B     DSPLOOP6\nTRYS1    EQU   *\n         CLI   0(R2),X'03'             IS IT A STAR?\n         BNE   TRYE1\n         MVI   0(R3),C'*'              MARK AS STAR\n         B     DSPLOOP6\nTRYE1    EQU   *\n         CLI   0(R2),X'04'             IS IT THE ENTERPRISE?\n         BNE   DSPLOOP6\n         MVI   0(R3),C'E'              MARK AS ENTERPRISE\nDSPLOOP6 EQU   *\n         LA    R2,1(R2)                BUMP STARCHRT PTR\n         LA    R3,3(R3)                     SCREEN PTR\n         BCT   R5,DSPLOOP5             ITERATE THRU LOW INDEX\n         LA    R3,56(R3)               GO TO NEXT LINE\n         BCT   R4,DSPLOOP4             ITERATE THRU HIGH INDEX\n*--> FORMAT OPERATING STATISTICS\n         UNPK  SC1LN17+76(4),GAMENRGY   DISPLAY ENERGY RESERVES\n         OI    SC1LN17+79,X'F0'\n         UNPK  SC1LN18+78(2),GAMETORP           PHOTON TORPEDOES\n         OI    SC1LN18+79,X'F0'\n         UNPK  SC1LN19+78(2),GAMEYRS            REMAINING YEARS\n         OI    SC1LN19+79,X'F0'\n         UNPK  SC1LN20+78(2),GAMEKLNG           KLINGONS\n         OI    SC1LN20+79,X'F0'\n         UNPK  SC1LN21+77(2),GAMEBASE           BASES\n         OI    SC1LN21+78,X'F0'\n         UNPK  SC1LN22+76(3),DEFLECT            DEFLECTION PERCENTAGE\n         OI    SC1LN22+78,X'F0'\n         MVC   SC1LN23+73(6),GAMEDATE           STAR DATE\n*--> FORMAT BATTLE CONDITION\n         CLI   STATUS,C'1'\n         BNE   MAYBEY\n         MVC   SC1LN24+73(6),=CL6'GREEN '\n         B     STATUS1\nMAYBEY   EQU   *\n         CLI   STATUS,C'2'\n         BNE   MAYBER\n         MVC   SC1LN24+73(6),=CL6'YELLOW'\n         B     STATUS1\nMAYBER   EQU   *\n         CLI   STATUS,C'3'\n         BNE   MAYBED\n         MVC   SC1LN24+73(6),=CL6'RED   '\n         B     STATUS1\nMAYBED   EQU   *\n         CLI   STATUS,C'4'\n         BNE   STATUS1\n         MVC   SC1LN24+73(6),=CL6'DOCKED'\nSTATUS1  EQU   *\n*--> PUT MESSAGES IN SCREEN\n         MVC   SC1LN22(44),SCMSG1\n         MVC   SC1LN23(44),SCMSG2\n         MVC   SC1LN24(44),SCMSG3\n*--> PUT OUT THE SCREEN AND THEN RETURN IT\nSCPUT1   EQU   *\n         TPUT  SCREEN1,1944,FULLSCR    PAINT THE SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         TGET  SCRETURN,7              RETURN IT\n         LA    R1,0(R1)                CLEAR POSSIBLE GARBAGE\n         LTR   R1,R1                   IS IT ZERO?\n         BZ    SCPUT1                  YES, GO PAINT AGAIN\n         CH    R1,=H'7'                DID USER DELETE ANYTHING?\n         BNE   SCPUT1                  NOT PERMITTED\n         CLI   SCRETURN+00,C'0'           USER REQUEST DIRECTORY\n         BE    SCHELP1\n         MVC   SC1LN17+5(1),SCRETURN+0      MOVE COMMAND\n         MVC   SC1LN18+5(1),SCRETURN+1      MOVE COMMAND\n         MVC   SC1LN19+5(1),SCRETURN+2      MOVE COMMAND\n         MVC   SC1LN20+2(4),SCRETURN+3      MOVE COMMAND\n         MVI   SCMSG1,C' '             CLEAR MSG LINE 1\n         MVC   SCMSG1+1(43),SCMSG1\n         MVC   SCMSG2,SCMSG1                 MSG LINE 2\n         MVC   SCMSG3,SCMSG2                 MSG LINE 3\n         B     EXIT60\nSCHELP1  EQU   *\n         L     R2,=A(SCREEN4)          GET ADDRESS OF SCREEN4\n         TPUT  (R2),1936,FULLSCR       PAINT THE SCREEN\n         TGET  SCRETURN,1              RETURN IT\n         B     SCPUT1\n         SPACE 2\nEXIT60   EQU   *\n         TPUT  CLSCREEN,12,FULLSCR\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE ROUTES CONTROL TO THE COMMAND ROUTINES             *\n***********************************************************************\n         SPACE 2\nCALLCMND DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'CALLCMND'\nBSAVE70  EQU   *\n         SPACE 1\n         MVI   TRTABLE,C'0'\n         MVC   TRTABLE+1(L'TRTABLE-1),TRTABLE\n         MVC   TRTABLE+C'1'(9),=CL9'123456789'\n         TR    SC1LN17+5(1),TRTABLE    *\n         TR    SC1LN18+5(1),TRTABLE    *  RESET NON-NUMERICS\n         TR    SC1LN19+5(1),TRTABLE    *    TO NUMERICS\n         TR    SC1LN20+2(4),TRTABLE    *\n         CLI   SC1LN17+5,C'9'          END OF STAR TREK\n         BE    GOHOME\n         CLI   SC1LN17+5,C'1'          COMMAND 1\n         BNE   CCMND2\n         BAL   R9,CMD1                 * WARP DRIVE INTER-QUADRANT\n         B     CCMNDNON\nCCMND2   EQU   *\n         CLI   SC1LN17+5,C'2'          COMMAND 2\n         BNE   CCMND3\n         BAL   R9,CMD2                 * WARP DRIVE INTRA-QUADRANT\n         B     CCMNDNON\nCCMND3   EQU   *\n         CLI   SC1LN17+5,C'3'          COMMAND 3\n         BNE   CCMND4\n         BAL   R9,CMD3                 * PHOTON TORPEDOES\n         B     CCMNDNON\nCCMND4   EQU   *\n         CLI   SC1LN17+5,C'4'          COMMAND 4\n         BNE   CCMND5\n         BAL   R9,CMD4                 * PHASER CONTROL\n         B     CCMNDNON\nCCMND5   EQU   *\nCCMNDNON EQU   *\n         B     EXIT70\nGOHOME   EQU   *\n         TPUT  CLSCREEN,12,FULLSCR\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         LA    R15,0\n         BR    R14\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE HANDLES TRAVEL BETWEEN QUADRANTS                   *\n***********************************************************************\n         SPACE 2\nCMD1     DS    0H\n         ST    R9,SAVE80\n         B     BSAVE80\nSAVE80   DC    F'-1'\n         DC    CL8'CMD1    '\nBSAVE80  EQU   *\n         SPACE 1\n         CLI   SC1LN18+5,C'1'          *\n         BL    CMD1BADC                * X MUST BE 1 - 4\n         CLI   SC1LN18+5,C'4'          *\n         BH    CMD1BADC\n         CLI   SC1LN19+5,C'1'          *\n         BL    CMD1BADC                * Y MUST BE 1 - 4\n         CLI   SC1LN19+5,C'4'          *\n         BNH   CMD1GOOD\nCMD1BADC EQU   *\n         MVC   SCMSG1,=CL44'THE COORDINATES YOU SUPPLIED ARE NOT'\n         MVC   SCMSG2,=CL44'IN THE ROMULA ANDROS IV SECTOR'\n         B     EXIT80\nCMD1GOOD EQU   *\n         PACK  WORKDBLW,SC1LN13+67(1)  GET X AXIS OF KIRK\n         CVB   R2,WORKDBLW\n         PACK  WORKDBLW,SC1LN18+05(1)  GET X AXIS OF DESTINATION\n         CVB   R3,WORKDBLW\n         SR    R2,R3                   GET DIFFERENCE\n         BNL   CMD1POS1\n         MH    R2,=H'-1'               GET ABSOLUTE VALUE\nCMD1POS1 EQU   *\n         STH   R2,WRKHALF1             STORE\n         MH    R2,WRKHALF1             GET SQUARE\n         STH   R2,WRKHALF1             SAVE IT\n         PACK  WORKDBLW,SC1LN13+69(1)  GET Y AXIS OF KIRK\n         CVB   R2,WORKDBLW\n         PACK  WORKDBLW,SC1LN19+05(1)  GET Y AXIS OF DESTINATION\n         CVB   R3,WORKDBLW\n         SR    R2,R3                   GET DIFFERENCE\n         BNL   CMD1POS2\n         MH    R2,=H'-1'               GET ABSOLUTE VALUE\nCMD1POS2 EQU   *\n         STH   R2,WRKHALF2             STORE\n         MH    R2,WRKHALF2             GET SQUARE\n         AH    R2,WRKHALF1             ADD SQUARES\n         LR    R1,R2                   MOVE FOR SQRT RTN\n         BAL   R9,SQRTRTN              GET SQUARE ROOT\n         CVD   R1,WORKDBLW             CONVERT RADIX\n         SP    GAMEYRS,WORKDBLW        SUBTRACT FROM YEARS LEFT\n         BNH   KIRKDEAD                < 1 FEDERATION IS CONQUERED\n         PACK  WRKFULL1,GAMEDATE(4)    PACK DATE\n         AP    WRKFULL1,WORKDBLW       SUBTRACT YEARS\n         UNPK  GAMEDATE(4),WRKFULL1    REINSTATE DATE\n         OI    GAMEDATE+3,X'F0'        CLEAR SIGN BIT\n         MH    R1,=H'50'               ENERGY = 50 UNITS PER YEAR\n         CVD   R1,WORKDBLW             CONVERT RADIX\n         SP    GAMENRGY,WORKDBLW       SUBTRACT FROM ENERGY TOTAL\n         BNH   KIRKDEAD                < 0 FEDERATION IS CONQUERED\n         L     R2,KIRKPTR              GET QUADRANT OF KIRK\n         SLL   R2,6                    MULTIPLY BY 64\n         A     R2,=A(STARCHRT)         ADD BASE ADDRESS\n         LA    R3,64                   INIT BCT REGISTER\nCMD1KRK1 EQU   *\n         CLI   0(R2),X'04'             IS THIS KIRK\n         BE    CMD1KRK2                YES, GO CLEAR HIM FROM QUAD\n         LA    R2,1(R2)                NO, BUMP BY 1\n         BCT   R3,CMD1KRK1             BCT\n         B     CMD1KRK3                GO AROUND CLEAR\nCMD1KRK2 EQU   *\n         MVI   0(R2),X'00'             CLEAR KIRK\nCMD1KRK3 EQU   *\n         MVC   QUADFIND+0(1),SC1LN18+5 BUILD NEW QUADRANT ADDRESS\n         MVI   QUADFIND+1,C','\n         MVC   QUADFIND+2(1),SC1LN19+5\n         LA    R2,QUADCVT1             GET ADDRESS OF CONVERT TABLE\n         XR    R3,R3                   CLEAR FIND REGISTER\nCMD1KRK4 EQU   *\n         CH    R3,=H'16'               END OF TABLE?\n         BE    CMD1KRK5                YES, LEAVE\n         CLC   QUADFIND,0(R2)          THIS ENTRY IN TABLE?\n         BE    CMD1KRK6                YES, THIS IS IT\n         LA    R2,3(R2)                NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD1KRK4\nCMD1KRK5 EQU   *\n         ISK   0,0                     IMPOSSIBLE - BOMB\nCMD1KRK6 EQU   *\n         ST    R3,KIRKPTR              STORE NEW KIRK PTR\n         SLL   R3,6                    MULTIPLY BY 64\n         A     R3,=A(STARCHRT)         ADD BASE ADDRESS\n         BAL   R9,RANDOM10             GET RANDOM FACTOR\n         SLL   R1,1                    MULTIPLY BY 2\n         AR    R3,R1                   ADD RANDOM FACTOR\n         LA    R4,64                   SET UP FOR BCT\nCMD1KRK7 EQU   *\n         CLI   0(R3),X'00'             IS THIS SLOT EMPTY\n         BE    CMD1KRK8                YES, PUT KIRK IN IT\n         LA    R3,1(R3)                BUMP PTR\n         BCT   R4,CMD1KRK7             ITERATE\n         ISK   0,0                     IMPOSSIBLE, BOMB\nCMD1KRK8 EQU   *\n         MVI   0(R3),X'04'             PUT KIRK IN SLOT\n         MVI   SC1LN17+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN18+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN19+5,C'.'          RESET COMMAND DOTS\n         MVC   SC1LN20+2(4),=CL4'....' RESET COMMAND DOTS\n         SPACE 1\nEXIT80   EQU   *\n         L     R9,SAVE80\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE HANDLES TRAVEL INSIDE QUADRANTS                    *\n***********************************************************************\n         SPACE 2\nCMD2     DS    0H\n         ST    R9,SAVE90\n         B     BSAVE90\nSAVE90   DC    F'-1'\n         DC    CL8'CMD2    '\nBSAVE90  EQU   *\n         SPACE 1\n         CLI   SC1LN18+5,C'1'          *\n         BL    CMD2BADC                * X MUST BE 1 - 8\n         CLI   SC1LN18+5,C'8'          *\n         BH    CMD2BADC\n         CLI   SC1LN19+5,C'1'          *\n         BL    CMD2BADC                * Y MUST BE 1 - 8\n         CLI   SC1LN19+5,C'8'          *\n         BNH   CMD2GOOD\nCMD2BADC EQU   *\n         MVC   SCMSG1,=CL44'THE COORDINATES YOU SUPPLIED ARE NOT'\n         MVC   SCMSG2,=CL44'IN THE CURRENT QUADRANT'\n         B     EXIT90\nCMD2GOOD EQU   *\n         MVC   QUADFIND+0(1),SC1LN18+5 FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),SC1LN19+5\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3                   CLEAR FIND REGISTER\nCMD2FULL EQU   *\n         CLC   QUADFIND,0(R2)          THIS ENTRY IN TABLE?\n         BE    CMD2FND                 YES, THIS IS IT\n         LA    R2,3(R2)                NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD2FULL\nCMD2FND  EQU   *\n         L     R2,KIRKPTR              GET ABSOLUTE ADDRESS\n         SLL   R2,6\n         A     R2,=A(STARCHRT)\n         LR    R5,R2\n         AR    R2,R3\n         CLI   0(R2),X'00'\n         BE    CMD2NULL\n         MVC   SCMSG1,=CL44'THE POINT THAT YOU WANT TO MOVE TO'\n         MVC   SCMSG2,=CL44'IS ALREADY OCCUPIED'\n         B     EXIT90\nCMD2NULL EQU   *\n         LA    R4,64\nCMD2FIND EQU   *\n         CLI   0(R5),X'04'             IS THIS KIRK?\n         BE    CMD2FND2                YES, END OF SEARCH\n         LA    R5,1(R5)\n         BCT   R4,CMD2FIND\n         ISK   0,0\nCMD2FND2 EQU   *\n*--> COMPUTE ENERGY COST OF MOVE\n         LR    R6,R5                   SAVE PTR\n         S     R6,=A(STARCHRT)         SUBTRACT START ADDRESS\n         L     R7,KIRKPTR              GET QUAD PTR\n         SLL   R7,6                    * 64\n         SR    R6,R7                   SUBTRACT FROM RESIDUAL\n         MH    R6,=H'3'                * NODE LENGTH\n         LA    R7,QUADCVT2             TABLE BEGIN AREA\n         AR    R6,R7                   ADD OFFSET\n         PACK  WORKDBLW,QUADFIND+0(1)\n         CVB   R8,WORKDBLW\n         PACK  WORKDBLW,0(1,R6)\n         CVB   R7,WORKDBLW\n         SR    R8,R7\n         BNL   CMD2POS1\n         MH    R8,=H'-1'\nCMD2POS1 EQU   *\n         STH   R8,WRKHALF1             STORE\n         MH    R8,WRKHALF1             GET SQUARE\n         STH   R8,WRKHALF1             SAVE IT\n         PACK  WORKDBLW,QUADFIND+2(1)\n         CVB   R8,WORKDBLW\n         PACK  WORKDBLW,2(1,R6)\n         CVB   R7,WORKDBLW\n         SR    R8,R7                   GET DIFFERENCE\n         BNL   CMD2POS2\n         MH    R8,=H'-1'               GET ABSOLUTE VALUE\nCMD2POS2 EQU   *\n         STH   R8,WRKHALF2             STORE\n         MH    R8,WRKHALF2             GET SQUARE\n         AH    R8,WRKHALF1             ADD SQUARES\n         LR    R1,R8                   MOVE FOR SQRT RTN\n         BAL   R9,SQRTRTN              GET SQUARE ROOT\n         MH    R1,=H'10'\n         CVD   R1,WORKDBLW\n         SP    GAMENRGY,WORKDBLW\n         BNH   KIRKDEAD\n         MVI   0(R5),X'00'             CLEAR OLD POSITION\n         MVI   0(R2),X'04'             MARK NEW POSITION\n         MVI   SC1LN17+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN18+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN19+5,C'.'          RESET COMMAND DOTS\n         MVC   SC1LN20+2(4),=CL4'....' RESET COMMAND DOTS\n         SPACE 1\nEXIT90   EQU   *\n         L     R9,SAVE90\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE HANDLES PHOTON TORPEDOES                           *\n***********************************************************************\n         SPACE 2\nCMD3     DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CMD3    '\nBSAVE100 EQU   *\n         SPACE 1\n         CLI   SC1LN18+5,C'1'          *\n         BL    CMD3BADC                * X MUST BE 1 - 8\n         CLI   SC1LN18+5,C'8'          *\n         BH    CMD3BADC\n         CLI   SC1LN19+5,C'1'          *\n         BL    CMD3BADC                * Y MUST BE 1 - 8\n         CLI   SC1LN19+5,C'8'          *\n         BNH   CMD3GOOD\nCMD3BADC EQU   *\n         MVC   SCMSG1,=CL44'THE COORDINATES YOU SUPPLIED ARE NOT'\n         MVC   SCMSG2,=CL44'IN THE CURRENT QUADRANT'\n         B     EXIT100\nCMD3GOOD EQU   *\n         MVC   QUADFIND+0(1),SC1LN18+5 FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),SC1LN19+5\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3                   CLEAR FIND REGISTER\nCMD3FULL EQU   *\n         CLC   QUADFIND,0(R2)          THIS ENTRY IN TABLE?\n         BE    CMD3FND                 YES, THIS IS IT\n         LA    R2,3(R2)                NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD3FULL\nCMD3FND  EQU   *\n         L     R2,KIRKPTR              GET ABSOLUTE ADDRESS\n         SLL   R2,6\n         A     R2,=A(STARCHRT)\n         LR    R5,R2\n         AR    R2,R3\n         SP    GAMENRGY,=PL2'10'       COST IS 10 UNITS - ENERGY\n         BNH   KIRKDEAD\n         SP    GAMETORP,=PL1'1'                1 TORPEDO\n         CLI   0(R2),X'00'             IS SLOT EMPTY\n         BNE   CMD3TRYS\nCMD3MISS EQU   *\n         MVC   SCMSG1,=CL44'YOU MISSED, EITHER BY SUPPLYING THE WRONG'\n         MVC   SCMSG2,=CL44'COORDINATES OR BY BEING UNLUCKY'\n         B     CMD3CLR\nCMD3TRYS EQU   *\n         CLI   0(R2),X'03'             IS IT A STAR\n         BNE   CMD3TRYB\n         MVI   0(R2),X'00'             CLEAR STAR\n         MVC   SCMSG1,=CL44'YOU JUST WALLOPED A STAR'\n         SP    GAMESTRS,=PL1'1'        DECREMENT STAR COUNT\n         B     CMD3CLR\nCMD3TRYB EQU   *\n         CLI   0(R2),X'02'             IS IT A BASE\n         BNE   CMD3TRYK\n         MVI   0(R2),X'00'             CLEAR BASE\n         MVC   SCMSG1,=CL44'CONGRATULATIONS, IDIOT, YOU JUST'\n         MVC   SCMSG2,=CL44'DESTROYED ONE OF YOUR OWN BASES'\n         SP    GAMEBASE,=PL1'1'\n         BNH   KIRKDEAD\n         BNL   CMD3BLOW\n         ZAP   GAMEBASE,=PL1'0'\n         B     CMD3BLOW\nCMD3TRYK EQU   *\n         CLI   0(R2),X'01'             IS IT A KLINGON\n         BNE   CMD3CLR\n         BAL   R9,RANDOM10             GET RANDOM NUMBER\n         CH    R1,=H'7'\n         BE    CMD3MISS\n         CH    R1,=H'8'\n         BE    CMD3MISS\n         CH    R1,=H'9'\n         BE    CMD3MISS\n         MVI   0(R2),X'00'             CLEAR IT\n         SP    GAMEKLNG,=PL1'1'        DECREMENT KLINGON COUNT\n         BE    KIRKWIN\n         MVC   SCMSG1,=CL44'YOU DESTROYED THE KLINGON'\n         B     CMD3CLR\nCMD3BLOW EQU   *\n         L     R2,=A(SCREEN5)          GET ADDR OF SCREEN5\n         TPUT  (R2),1936,FULLSCR\nCMD3CLR  EQU   *\n         MVI   SC1LN17+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN18+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN19+5,C'.'          RESET COMMAND DOTS\n         MVC   SC1LN20+2(4),=CL4'....' RESET COMMAND DOTS\n         SPACE 2\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE HANDLES PHASERS                                    *\n***********************************************************************\n         SPACE 2\nCMD4     DS    0H\n         ST    R9,SAVE110\n         B     BSAVE110\nSAVE110  DC    F'-1'\n         DC    CL8'CMD4    '\nBSAVE110 EQU   *\n         SPACE 1\n         CLI   SC1LN18+5,C'1'          *\n         BL    CMD4BADC                * X MUST BE 1 - 8\n         CLI   SC1LN18+5,C'8'          *\n         BH    CMD4BADC\n         CLI   SC1LN19+5,C'1'          *\n         BL    CMD4BADC                * Y MUST BE 1 - 8\n         CLI   SC1LN19+5,C'8'          *\n         BNH   CMD4GOOD\nCMD4BADC EQU   *\n         MVC   SCMSG1,=CL44'THE COORDINATES YOU SUPPLIED ARE NOT'\n         MVC   SCMSG2,=CL44'IN THE CURRENT QUADRANT'\n         B     EXIT110\nCMD4GOOD EQU   *\n         MVC   QUADFIND+0(1),SC1LN18+5 FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),SC1LN19+5\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3                   CLEAR FIND REGISTER\nCMD4FULL EQU   *\n         CLC   QUADFIND,0(R2)          THIS ENTRY IN TABLE?\n         BE    CMD4FND                 YES, THIS IS IT\n         LA    R2,3(R2)                NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD4FULL\nCMD4FND  EQU   *\n         L     R2,KIRKPTR              GET ABSOLUTE ADDRESS\n         SLL   R2,6\n         A     R2,=A(STARCHRT)\n         LR    R5,R2\n         AR    R2,R3\n         CLI   0(R2),X'00'             IS SLOT EMPTY\n         BNE   CMD4TRYS\nCMD4MISS EQU   *\n         MVC   SCMSG1,=CL44'YOU MISSED, EITHER BY SUPPLYING THE WRONG'\n         MVC   SCMSG2,=CL44'COORDINATES OR BY BEING UNLUCKY'\n         B     CMD4CLR\nCMD4TRYS EQU   *\n         CLI   0(R2),X'03'             IS IT A STAR\n         BNE   CMD4TRYB\n         MVC   SCMSG1,=CL44'YOU CANNOT DESTROY A STAR WITH PHASERS'\n         B     CMD4CLR\nCMD4TRYB EQU   *\n         CLI   0(R2),X'02'             IS IT A BASE\n         BNE   CMD4TRYK\n         MVC   SCMSG1,=CL44'YOU CANNOT DESTROY A BASE WITH PHASERS'\n         B     CMD4CLR\nCMD4TRYK EQU   *\n         CLI   0(R2),X'01'             IS IT A KLINGON\n         BNE   CMD4MISS\n         CLC   SC1LN20+2(4),=CL4'0499' MINIMUM ENERGY\n         BL    CMD4LOW\n         CLC   SC1LN20+2(4),=CL4'1000' MAXIMUM ENERGY\n         BH    CMD4BLOW\n         BAL   R9,RANDOM10\n         CH    R1,=H'6'                60% CHANCE\n         BNH   CMD4BLOW\nCMD4LOW  EQU   *\n         MVC   SCMSG1,=CL44'INSUFFICIENT ENERGY TO PHASERS'\n         B     CMD4CLR\nCMD4BLOW EQU   *\n         MVI   0(R2),X'00'             CLEAR KLINGON FROM MAP\n         L     R2,=A(SCREEN5)          GET ADDR OF SCREEN5\n         TPUT  (R2),1936,FULLSCR\n         MVC   SCMSG1,=CL44'YOU DESTROYED THE KLINGON'\n         SP    GAMEKLNG,=PL1'1'\n         BE    KIRKWIN\nCMD4CLR  EQU   *\n         PACK  WORKDBLW,SC1LN20+2(4)  SUBTRACT RATED ENERGY\n         SP    GAMENRGY,WORKDBLW\n         BNH   KIRKDEAD\n         MVI   SC1LN17+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN18+5,C'.'          RESET COMMAND DOTS\n         MVI   SC1LN19+5,C'.'          RESET COMMAND DOTS\n         MVC   SC1LN20+2(4),=CL4'....' RESET COMMAND DOTS\n         SPACE 2\nEXIT110  EQU   *\n         L     R9,SAVE110\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE GIVES ANY KLINGONS PRESENT IN THE CURRENT QUAD THE *\n*   OPPORTUNITY TO FIRE BACK AT THE ENTERPRISE.                       *\n***********************************************************************\n         SPACE 2\nREACTION DS    0H\n         ST    R9,SAVE120\n         B     BSAVE120\nSAVE120  DC    F'-1'\n         DC    CL8'REACTION'\nBSAVE120 EQU   *\n         SPACE 1\n         L     R2,KIRKPTR              GET KIRK'S QUAD\n         SLL   R2,6                    * 64\n         A     R2,=A(STARCHRT)         ADD BASE ADDR\n         LA    R3,64                   SET TO 64\n         LR    R5,R2                   SAVE BASE\nRCTFND1  EQU   *\n         CLI   0(R2),X'02'             IS IT A BASE?\n         BE    RCTFND2                 YES, GO LOCATE\n         LA    R2,1(R2)                BUMP PTR\n         BCT   R3,RCTFND1              ITERATE\n         B     RCTCOUNT                NO BASE, GO RETALIATE\nRCTFND2  EQU   *\n         SR    R2,R5                   GET OFFSET\n         MH    R2,=H'3'                * NODE LENGTH\n         A     R2,=A(QUADCVT2)         ADD BASE ADDR\n         PACK  ACCUM1,0(1,R2)          X AXIS\n         PACK  ACCUM2,2(1,R2)          Y AXIS\n         L     R2,KIRKPTR              GET (X, Y) OF BASE\n         SLL   R2,6                    PROCESS SAME AS ABOVE\n         A     R2,=A(STARCHRT)\n         LA    R3,64\n         LR    R5,R2\nRCTFND3  EQU   *\n         CLI   0(R2),X'04'\n         BE    RCTFND4\n         LA    R2,1(R2)\n         BCT   R3,RCTFND3\n         B     RCTCOUNT\nRCTFND4  EQU   *\n         SR    R2,R5\n         MH    R2,=H'3'\n         A     R2,=A(QUADCVT2)\n         MVC   QUADFIND,0(R2)\n         PACK  ACCUM3,QUADFIND+0(1)\n         PACK  ACCUM4,QUADFIND+2(1)\n         CP    ACCUM1,ACCUM3           ARE X COOR'S SAME\n         BE    RCTFND5\n         CP    ACCUM2,ACCUM4               Y\n         BNE   RCTCOUNT\n         SP    ACCUM1,ACCUM3\n         OI    ACCUM1,X'0F'\n         CLI   ACCUM1,X'1F'            IS DIFFERENCE 1\n         BNE   RCTCOUNT                GO, GO RETALIATE\n         B     RCTDOCK                 YES, GO POST DOCKED STATUS\nRCTFND5  EQU   *\n         SP    ACCUM2,ACCUM4\n         OI    ACCUM2,X'0F'\n         CLI   ACCUM2,X'1F'            IS DIFFERENCE 1\n         BNE   RCTCOUNT                GO, GO RETALIATE\nRCTDOCK  EQU   *\n         MVI   STATUS,C'4'\n         MVC   CONDATTR+8(3),=XL3'0042F4'  GREEN ON SCREEN\n         ZAP   GAMENRGY,=PL3'5000'     REPLENISH ENERGY\n         ZAP   GAMETORP,=PL2'10'                 TORPEDOES\n         ZAP   DEFLECT,=PL2'100'                 DEFLECTION %\n         B     EXIT120\nRCTCOUNT EQU   *\n         L     R2,KIRKPTR              ESTABLISH\n         SLL   R2,6\n         A     R2,=A(STARCHRT)\n         LA    R3,64\n         XR    R4,R4\nRCTCNT1  EQU   *\n         CLI   0(R2),X'01'             COUNT KLINGONS\n         BNE   RCTCNT2\n         LA    R4,1(R4)\nRCTCNT2  EQU   *\n         LA    R2,1(R2)\n         BCT   R3,RCTCNT1\n         MH    R4,=H'500'              RETALIATION ENERGY = 500\n         LA    R4,0(R4)                PER KLINGON MINUS\n         CVD   R4,WORKDBLW             SCREEN EFFICIENCY\n         ZAP   WRKFULL1,=PL2'100'\n         SP    WRKFULL1,DEFLECT\n         MP    WORKDBLW,WRKFULL1\n         DP    WORKDBLW,=PL2'100'\n         SP    GAMENRGY,WORKDBLW(6)\n         BNH   KIRKDEAD\n         MVI   STATUS,C'1'\n         MVC   CONDATTR+8(3),=XL3'0042F4'  GREEN ON SCREEN\n         SPACE 1\nEXIT120  EQU   *\n         L     R9,SAVE120\n         BR    R9\n         EJECT\nKIRKDEAD DS    0H\n         TPUT  CLSCREEN,12,FULLSCR\n         TPUT  DEADMSG1,L'DEADMSG1\n         TPUT  DEADMSG2,L'DEADMSG2\n         TPUT  DEADMSG3,L'DEADMSG3\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         LA    R15,0\n         BR    R14\n         SPACE 3\n         SPACE 3\nKIRKWIN  DS    0H\n         TPUT  CLSCREEN,12,FULLSCR\n         TPUT  WINMSG1,L'WINMSG1\n         TPUT  WINMSG2,L'WINMSG2\n         TPUT  WINMSG3,L'WINMSG3\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         LA    R15,0\n         BR    R14\n         EJECT\n***********************************************************************\n*            W O R K I N G   S T O R A G E                            *\n***********************************************************************\n         SPACE 3\nDEADMSG1 DC    CL33'THE ENTERPRISE HAS BEEN DEFEATED'\nDEADMSG2 DC    CL33'THE FEDERATION WILL BE CONQUERED'\nDEADMSG3 DC    CL33'MAYBE IN YOUR NEXT LIFE.........'\nWINMSG1  DC    CL33'THE KLINGONS HAVE BEEN DEFEATED '\nWINMSG2  DC    CL33'THE FEDERATION IS VICTORIOUS    '\nWINMSG3  DC    CL34'MAYBE THE KLINGONS WILL TRY AGAIN'\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nPRMSZE   DS    CL2           PRIMARY SCREEN SIZE - HEX ROW/COLS\nALTSZE   DS    CL2           ALTERNATE\nATTRIB   DS    F             SCREEN ATTRIBUTES - COLOR, ETC.\nTIMEAREA DS    D             RETURN AREA FOR TIME MACRO\nSCRETURN DS    CL16                          TGET FULLSCR\nSTARCHRT DS    CL1024        STAR CHART - 16 X 64 DOT MATRIX\nINITKLNG DS    PL2           INIT AREA FOR KLINGONS\nINITBASE DS    PL1           INIT AREA FOR STAR BASES\nINITSTRS DS    PL2           INIT AREA FOR STARS\nACCUM1   DS    PL1\nACCUM2   DS    PL1\nACCUM3   DS    PL1\nACCUM4   DS    PL1\nTRTABLE  DS    CL256         WORK AREA FOR TRT'S\nWORKDBLW DS    D             WORK AREA FOR CVD & CVB\nWRKHALF1 DS    H             WORK AREA\nWRKHALF2 DS    H             WORK AREA\nWRKFULL1 DS    F             WORK AREA\nQUADFIND DS    CL3           WORK AREA FOR QUAD CONVERSIONS\nSCMSG1   DC    CL44' '\nSCMSG2   DC    CL44' '\nSCMSG3   DC    CL44' '\nKIRKPTR  DC    F'0'\n         SPACE 3\n         LTORG\n         EJECT\n***********************************************************************\n*  THIS IS THE GAME TABLE - IT CONTAINS 10 GAMES                      *\n***********************************************************************\nGAMETBL  EQU   *\n         DC    PL2'08',PL2'50',PL1'2',PL2'20'\n         DC    PL2'09',PL2'51',PL1'2',PL2'20'\n         DC    PL2'10',PL2'52',PL1'2',PL2'21'\n         DC    PL2'11',PL2'53',PL1'2',PL2'21'\n         DC    PL2'12',PL2'54',PL1'2',PL2'22'\n         DC    PL2'13',PL2'55',PL1'3',PL2'22'\n         DC    PL2'14',PL2'56',PL1'3',PL2'23'\n         DC    PL2'15',PL2'57',PL1'3',PL2'23'\n         DC    PL2'16',PL2'58',PL1'4',PL2'24'\n         DC    PL2'17',PL2'59',PL1'4',PL2'24'\n         SPACE 1\nGAMESTAT DS    0CL7\nGAMEKLNG DS    PL2           NUMBER OF KLINGONS FOR THIS GAME\nGAMESTRS DS    PL2                     STARS\nGAMEBASE DS    PL1                     BASES\nGAMEYRS  DS    PL2                     YEARS\n         SPACE 1\nGAMENRGY DC    PL4'5000'     AMOUNT OF ENERGY TO START\nGAMEDATE DC    CL6'5537.1'   STAR DATE OF THE GAME\nGAMETORP DC    PL2'10'       PHOTON TORPEDOES\nSTATUS   DC    CL1'1'        1=GREEN, 2=YELLOW, 3=RED, 4=DOCKED\nDEFLECT  DC    PL5'100'      DEFLECTION ENERGY PERCENTAGE\n         SPACE 3\n***********************************************************************\n*  CONVERSION TABLES FROM INTERNAL QUAD NUMBERS TO WORLD COORDINATES  *\n***********************************************************************\n         SPACE 1\nQUADCVT1 DC    CL24'1,42,43,44,41,32,33,34,3'\n         DC    CL24'1,22,23,24,21,12,13,14,1'\n         SPACE 1\nQUADCVT2 DC    CL24'1,82,83,84,85,86,87,88,8'\n         DC    CL24'1,72,73,74,75,76,77,78,7'\n         DC    CL24'1,62,63,64,65,66,67,68,6'\n         DC    CL24'1,52,53,54,55,56,57,58,5'\n         DC    CL24'1,42,43,44,45,46,47,48,4'\n         DC    CL24'1,32,33,34,35,36,37,38,3'\n         DC    CL24'1,22,23,24,25,26,27,28,2'\n         DC    CL24'1,12,13,14,15,16,17,18,1'\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR MAIN BATTLE COMPUTER                     *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> SHORT RANGE SENSORS\n         DC    XL16'11C2C32903C0F8410042F611C25B1DE8'\n         DC    XL16'11C3D32903C0F8410042F611C36B1DE8'\n         DC    XL16'11C4E32903C0F8410042F611C47B1DE8'\n         DC    XL16'11C5F32903C0F8410042F611C64B1DE8'\n         DC    XL16'11C7C32903C0F8410042F611C75B1DE8'\n         DC    XL16'11C8D32903C0F8410042F611C86B1DE8'\n         DC    XL16'11C9E32903C0F8410042F611C97B1DE8'\n         DC    XL16'114AF32903C0F8410042F6114B4B1DE8'\n*--> COMMAND ENTRY CHARACTERS\n         DC    XL11'11D4C42C03C0C941F142F2'\n         DC    XL11'11D5D42C03C0C941F142F2'\n         DC    XL11'11D6E42C03C0C941F142F2'\n         DC    XL11'11D7F12C03C0C941F142F2'\n*--> UNDERLINE THE QUADRANT INDICATOR\n         DC    XL16'1150C12903C0F841F442F31150C71DE8'\n*--> LONG RANGE SENSORS\n         DC    XL16'11C1D22903C0F8410042F511C1D61DE8'\n         DC    XL16'11C1D82903C0F8410042F511C15C1DE8'\n         DC    XL16'11C15E2903C0F8410042F511C1E21DE8'\n         DC    XL16'11C1E42903C0F8410042F511C1E81DE8'\n         DC    XL16'11C3F22903C0F8410042F511C3F61DE8'\n         DC    XL16'11C3F82903C0F8410042F511C37C1DE8'\n         DC    XL16'11C37E2903C0F8410042F511C4C21DE8'\n         DC    XL16'11C4C42903C0F8410042F511C4C81DE8'\n         DC    XL16'11C6D22903C0F8410042F511C6D61DE8'\n         DC    XL16'11C6D82903C0F8410042F511C65C1DE8'\n         DC    XL16'11C65E2903C0F8410042F511C6E21DE8'\n         DC    XL16'11C6E42903C0F8410042F511C6E81DE8'\n         DC    XL16'11C8F22903C0F8410042F511C8F61DE8'\n         DC    XL16'11C8F82903C0F8410042F511C87C1DE8'\n         DC    XL16'11C87E2903C0F8410042F511C9C21DE8'\n         DC    XL16'11C9C42903C0F8410042F511C9C81DE8'\n*--> REVERSE VIDEO THE USS ENTERPRISE\n         DC    XL16'11405F2903C0F841F242F11140611DE8'\n         DC    XL16'1140E62903C0F841F242F11140E81DE8'\n         DC    XL16'11C16F2903C0F841F242F111C1F11DE8'\n         DC    XL16'11C1F62903C0F841F242F111C1F81DE8'\n         DC    XL16'11C27F2903C0F841F242F111C3C11DE8'\n         DC    XL16'11C3C62903C0F841F242F111C3C81DE8'\n         DC    XL16'11C55F2903C0F841F242F111C5611DE8'\n         DC    XL16'11C5E62903C0F841F242F111C5E81DE8'\n         DC    XL16'11C66F2903C0F841F242F111C6F11DE8'\n         DC    XL16'11C6F62903C0F841F242F111C6F81DE8'\n         DC    XL16'11C77F2903C0F841F242F111C8C11DE8'\n         DC    XL16'11C8C62903C0F841F242F111C8C81DE8'\n         DC    XL16'11C94F2903C0F841F242F111C9D11DE8'\n         DC    XL16'11C9D62903C0F841F242F111C9D81DE8'\n         DC    XL16'114A5F2903C0F841F242F1114A611DE8'\n         DC    XL16'114AE62903C0F841F242F1114AE81DE8'\n         DC    XL16'114B6F2903C0F841F242F1114BF11DE8'\n         DC    XL16'114BF62903C0F841F242F1114BF81DE8'\n         DC    XL16'114C7F2903C0F841F242F1114DC11DE8'\n         DC    XL16'114DC62903C0F841F242F1114DC81DE8'\n         DC    XL16'114E4F2903C0F841F242F1114ED11DE8'\n         DC    XL16'114ED62903C0F841F242F1114ED81DE8'\n         DC    XL16'114F5F2903C0F841F242F1114F611DE8'\n         DC    XL16'114F662903C0F841F242F1114F681DE8'\n         DC    XL16'11506F2903C0F841F242F11150F11DE8'\n         DC    XL16'1150F62903C0F841F242F11150F81DE8'\n*--> STATISTICS\n         DC    XL16'11D54A2903C0F8410042F411D54F1DE8'\n         DC    XL16'11D65C2903C0F8410042F411D65F1DE8'\n         DC    XL16'11D76C2903C0F8410042F411D76F1DE8'\n         DC    XL16'11D87C2903C0F8410042F411D87F1DE8'\n         DC    XL16'115A4C2903C0F8410042F4115A4F1DE8'\n         DC    XL16'115B5B2903C0F8410042F4115B5F1DE8'\n         DC    XL16'115CE82903C0F8410042F4115C6F1DE8'\nCONDATTR DC    XL16'115DF82903C0F8410042F4115D7F1DE8'\n*--> INSERT CURSOR AT COMMAND ENTRY FIELD\n         DC    XL4'11D4C513'           SET BUFFER ADDR/COMMAND ENTRY\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         EJECT\n***********************************************************************\n*  MAIN BATTLE COMPUTER SCREEN LAYOUT                                 *\n***********************************************************************\nSCREEN1  DC    XL13'401140403C4040001140401DE8'\nSC1LN01  DC    CL039'=========================      U      U'\n         DC    CL40'          ============================  '\nSC1LN02  DC    CL40' = XXX = XXX = XXX = XXX =      S      S'\n         DC    CL40'     Y-8  =  .  .  .  .  .  .  .  .  =  '\nSC1LN03  DC    CL40' =========================      S      S'\n         DC    CL40'       7  =  .  .  .  .  .  .  .  .  =  '\nSC1LN04  DC    CL40' = XXX = XXX = XXX = XXX =              '\n         DC    CL40'       6  =  .  .  .  .  .  .  .  .  =  '\nSC1LN05  DC    CL40' =========================      E      E'\n         DC    CL40'       5  =  .  .  .  .  .  .  .  .  =  '\nSC1LN06  DC    CL40' = XXX = XXX = XXX = XXX =      N      N'\n         DC    CL40'       4  =  .  .  .  .  .  .  .  .  =  '\nSC1LN07  DC    CL40' =========================      T      T'\n         DC    CL40'       3  =  .  .  .  .  .  .  .  .  =  '\nSC1LN08  DC    CL40' = XXX = XXX = XXX = XXX =      E      E'\n         DC    CL40'       2  =  .  .  .  .  .  .  .  .  =  '\nSC1LN09  DC    CL40' =========================      R      R'\n         DC    CL40'       1  =  .  .  .  .  .  .  .  .  =  '\nSC1LN10  DC    CL40' SECTOR - ROMULA ANDROS IV      P      P'\n         DC    CL40'          ============================  '\nSC1LN11  DC    CL40' LONG RANGE SENSORS             R      R'\n         DC    CL40'         X - 1  2  3  4  5  6  7  8     '\nSC1LN12  DC    CL40' POSITION 1 - KLINGONS          I      I'\n         DC    CL40'              SHORT RANGE SENSORS       '\nSC1LN13  DC    CL40' POSITION 2 - STAR BASES        S      S'\n         DC    CL40'               QUADRANT = (X,Y)         '\nSC1LN14  DC    CL40' POSITION 3 - STARS             E      E'\n         DC    CL40'                                        '\nSC1LN15  DC    CL40'                                        '\n         DC    CL40'               OPERATING STATISTICS     '\nSC1LN16  DC    CL40'************* COMMUNICATIONS ***********'\n         DC    CL41'******    ==============================*'\nSC1LN17  DC    CL41'     .  <---ENTER COMMAND (0 FOR DIRECTOR'\n         DC    CL41'Y)   *    ENERGY..................(0000)*'\nSC1LN18  DC    CL41'     .  <---ENTER X AXIS COORDINATE      '\n         DC    CL41'     *    PHOTON TORPEDOES..........(00)*'\nSC1LN19  DC    CL41'     .  <---ENTER Y AXIS COORDINATE      '\n         DC    CL41'     *    YEARS REMAINING...........(00)*'\nSC1LN20  DC    CL41'  ....  <---ENTER ENERGY QUANTITY        '\n         DC    CL40'     *    KLINGONS..................(00)'\nSC1LN21  DC    CL40'****************************************'\n         DC    CL40'******    STAR BASES................(00)'\nSC1LN22  DC    CL40'                                        '\n         DC    CL40'          DEFLECTION ENERGY (%)....(000)'\nSC1LN23  DC    CL40'                                        '\n         DC    CL40'          STAR DATE.............(0000.0)'\nSC1LN24  DC    CL40'                                        '\n         DC    CL40'          COMBAT STATUS.........(YELLOW)'\n         DC    XL4'11D4C513'\n         ORG   SC1LN17+3\n         DC    XL2'1DC9'\n         ORG   SC1LN17+6\n         DC    XL2'1DF8'\n         ORG   SC1LN18+3\n         DC    XL2'1DC9'\n         ORG   SC1LN18+6\n         DC    XL2'1DF8'\n         ORG   SC1LN19+3\n         DC    XL2'1DC9'\n         ORG   SC1LN19+6\n         DC    XL2'1DF8'\n         ORG   SC1LN20+0\n         DC    XL2'1DC9'\n         ORG   SC1LN20+6\n         DC    XL2'1DF8'\n         ORG\n         EJECT\n***********************************************************************\n*  MAIN BATTLE COMPUTER SCREEN LAYOUT                                 *\n***********************************************************************\nSCREEN2  DC    XL13'441140403C4040001140401DE8'\nSC2LN01  DC    CL039'   SSSSSSSSSSS      TTTTTTTTTTTTTTTT   '\n         DC    CL40'   AAAAAAAAAAAA      RRRRRRRRRRRRRR     '\nSC2LN02  DC    CL40'   SS         SS     TTTTTTTTTTTTTTTT   '\n         DC    CL40'  AAAAAAAAAAAAAA     RR           RR    '\nSC2LN03  DC    CL40'  SS           SS           TT          '\n         DC    CL40' AA            AA    RR            RR   '\nSC2LN04  DC    CL40'  SS           SS           TT          '\n         DC    CL40' AA            AA    RR            RR   '\nSC2LN05  DC    CL40'   SS                       TT          '\n         DC    CL40' AA            AA    RR           RR    '\nSC2LN06  DC    CL40'    SSSSSSSSSSS             TT          '\n         DC    CL40' AAAAAAAAAAAAAAAA    RRRRRRRRRRRRRR     '\nSC2LN07  DC    CL40'              SS            TT          '\n         DC    CL40' AAAAAAAAAAAAAAAA    RR       RR        '\nSC2LN08  DC    CL40'  SS           SS           TT          '\n         DC    CL40' AA            AA    RR        RR       '\nSC2LN09  DC    CL40'  SS           SS           TT          '\n         DC    CL40' AA            AA    RR         RR      '\nSC2LN10  DC    CL40'   SS         SS            TT          '\n         DC    CL40' AA            AA    RR          RR     '\nSC2LN11  DC    CL40'    SSSSSSSSSSS             TT          '\n         DC    CL40' AA            AA    RR           RR    '\nSC2LN12  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN13  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN14  DC    CL40'TTTTTTTTTTTTTTTTT    RRRRRRRRRRRRRR     '\n         DC    CL40' EEEEEEEEEEEEEEEE    KK            KK   '\nSC2LN15  DC    CL40'TTTTTTTTTTTTTTTTT    RR           RR    '\n         DC    CL40' EEEEEEEEEEEEEEEE    KK          KK     '\nSC2LN16  DC    CL40'       TT            RR            RR   '\n         DC    CL40' EE                  KK        KK       '\nSC2LN17  DC    CL40'       TT            RR            RR   '\n         DC    CL40' EE                  KK      KK         '\nSC2LN18  DC    CL40'       TT            RR           RR    '\n         DC    CL40' EE                  KK    KK           '\nSC2LN19  DC    CL40'       TT            RRRRRRRRRRRRRR     '\n         DC    CL40' EEEEEEEEEE          KK  KKK            '\nSC2LN20  DC    CL40'       TT            RR      RR         '\n         DC    CL40' EE                  KKKK  KK           '\nSC2LN21  DC    CL40'       TT            RR       RR        '\n         DC    CL40' EE                  KK      KK         '\nSC2LN22  DC    CL40'       TT            RR        RR       '\n         DC    CL40' EE                  KK        KK       '\nSC2LN23  DC    CL40'       TT            RR         RR      '\n         DC    CL40' EEEEEEEEEEEEEEEE    KK          KK     '\nSC2LN24  DC    CL40'       TT            RR          RR     '\n         DC    CL40' EEEEEEEEEEEEEEEE    KK            KK   '\n         DC    XL4'11404013'\n         EJECT\n***********************************************************************\n*  MAIN BATTLE COMPUTER SCREEN LAYOUT                                 *\n***********************************************************************\nSCREEN3  DC    XL13'401140403C4040001140401DE8'\nSC3LN01  DC    CL039'                     **** WELCOME TO ST'\n         DC    CL40'AR TREK ****                            '\nSC3LN02  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC3LN03  DC    CL40'    HI!  WELCOME TO STAR TREK!  THIS GAM'\n         DC    CL40'E IS BASED ON THE STAR TREK TV SERIES,  '\nSC3LN04  DC    CL40'AND IS INTENDED FOR THOSE OF US THAT JUS'\n         DC    CL40'T NEVER WERE ABLE TO GET ENOUGH.        '\nSC3LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC3LN06  DC    CL40'    THE CONTEXT OF THE GAME IS A SPACE B'\n         DC    CL40'ATTLE BETWEEN THE FEDERATION STARSHIP   '\nSC3LN07  DC    CL40'ENTERPRISE AND SEVERAL KLINGON VESSELS. '\n         DC    CL40' THE ENTERPRISE HAS BEEN PATROLLING THE '\nSC3LN08  DC    CL40'ROMULA ANDROS IV SECTOR AT THE OUTBREAK '\n         DC    CL40'OF INTERSTELLAR WAR.  THE MISSION IS NOW'\nSC3LN09  DC    CL40'TO DEFEAT THE KLINGON VESSELS IN A SPECI'\n         DC    CL40'FIC NUMBER OF \"PARALLAX YEARS\".         '\nSC3LN10  DC    CL40'    FOLLOWING THIS PAGE, YOU WILL BE INT'\n         DC    CL40'RODUCED TO THE MAIN SCREEN OF THE SHIPS '\nSC3LN11  DC    CL40'BATTLE COMPUTER.  BY SKILLFULLY USING TI'\n         DC    CL40'ME, PHOTON TORPEDOES, AND PHASERS, YOU  '\nSC3LN12  DC    CL40'CAN DEFEAT THE KLINGONS AND SAVE THE FED'\n         DC    CL40'ERATION.                                '\nSC3LN13  DC    CL40'    THE SCREEN OF THE BATTLE COMPUTER IS'\n         DC    CL40' MADE UP OF FOUR DISTINCT SECTIONS.  THE'\nSC3LN14  DC    CL40'UPPER LEFT SECTION CONTAINS THE LONG RAN'\n         DC    CL40'GE SENSORS.  THIS IS A DISPLAY OF THE   '\nSC3LN15  DC    CL40'STATUS OF THE SECTOR, BROKEN INTO QUADRA'\n         DC    CL40'NTS, AND REFERRED TO BY THEIR (X,Y) AXIS'\nSC3LN16  DC    CL40'COORDINATES.  THE UPPER RIGHT SECTION CO'\n         DC    CL40'NTAINS THE SHORT RANGE SENSORS.  THIS IS'\nSC3LN17  DC    CL40'A DISPLAY OF THE STATUS OF THE QUADRANT '\n         DC    CL40'YOU ARE IN.  STARS ARE REPRESENTED BY AN'\nSC3LN18  DC    CL40'\"*\", THE ENTERPRISE BY \"E\", AND KLINGONS'\n         DC    CL40' BY \"K\".  THIS LOWER RIGHT SECTION IS A '\nSC3LN19  DC    CL40'DISPLAY OF THE CURRENT OPERATING STATIST'\n         DC    CL40'ICS OF THE ENTERPRISE.  THE LOWER LEFT  '\nSC3LN20  DC    CL40'SECTION IS THE AREA YOU USE TO COMMUNICA'\n         DC    CL40'TE WITH THE BATTLE COMPUTER.            '\nSC3LN21  DC    CL40'    IF YOU RUN OUT OF SUPPLIES OR ENERGY'\n         DC    CL40' YOU CAN GET REFUELED BY GOING TO A STAR'\nSC3LN22  DC    CL40'BASE.  NOTE, HOWEVER, THAT EVERY TIME YO'\n         DC    CL40'U USE THE WARP DRIVE, IT COSTS YOU AT   '\nSC3LN23  DC    CL40'LEAST A YEAR.  TO BYPASS THESE INTRODUCT'\n         DC    CL40'ION SCREENS, CALL STREK WITH OPTION 3.  '\nSC3LN24  DC    CL40'                         G O O D    L U '\n         DC    CL40'C K    !!!!                             '\n         DC    XL4'11404013'\n         EJECT\n***********************************************************************\n*  MAIN BATTLE COMPUTER SCREEN LAYOUT                                 *\n***********************************************************************\nSCREEN4  DC    XL13'401140403C4040001140401DE8'\nSC4LN01  DC    CL039'                   **** STAR TREK COMMA'\n         DC    CL40'ND DIRECTORY ****                       '\nSC4LN02  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN03  DC    CL40' 9<---- END THE GAME (THIS IMPLIES THAT '\n         DC    CL40'YOU ARE SURRENDERING)                   '\nSC4LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN05  DC    CL40' 1<---- WARP DRIVE, INTERQUADRANT TRAVEL'\n         DC    CL40' (BETWEEN QUADRANTS)                    '\nSC4LN06  DC    CL40'        OPERAND 1 - ENTER THE X AXIS OF '\n         DC    CL40'THE DESTINATION QUADRANT                '\nSC4LN07  DC    CL40'        OPERAND 2 - ENTER THE Y AXIS OF '\n         DC    CL40'THE DESTINATION QUADRANT                '\nSC4LN08  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN09  DC    CL40' 2<---- IMPULSE POWER, INTRAQUADRANT TRA'\n         DC    CL40'VEL (WITHIN THE CURRENT QUADRANT)       '\nSC4LN10  DC    CL40'        OPERAND 1 - ENTER THE X AXIS OF '\n         DC    CL40'THE DESTINATION POSITION                '\nSC4LN11  DC    CL40'        OPERAND 2 - ENTER THE Y AXIS OF '\n         DC    CL40'THE DESTINATION POSITION                '\nSC4LN12  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN13  DC    CL40' 3<---- FIRE PHOTON TORPEDO             '\n         DC    CL40'                                        '\nSC4LN14  DC    CL40'        OPERAND 1 - ENTER THE X AXIS COO'\n         DC    CL40'RDINATE OF THE TARGET                   '\nSC4LN15  DC    CL40'        OPERAND 2 - ENTER THE Y AXIS COO'\n         DC    CL40'RDINATE OF THE TARGET                   '\nSC4LN16  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN17  DC    CL40' 4<---- FIRE PHASERS                    '\n         DC    CL40'                                        '\nSC4LN18  DC    CL40'        OPERAND 1 - ENTER THE X AXIS COO'\n         DC    CL40'RDINATE OF THE TARGET                   '\nSC4LN19  DC    CL40'        OPERAND 2 - ENTER THE Y AXIS COO'\n         DC    CL40'RDINATE OF THE TARGET                   '\nSC4LN20  DC    CL40'        OPERAND 3 - ENTER THE AMOUNT OF '\n         DC    CL40'ENERGY FOR PHASER BURST                 '\nSC4LN21  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN22  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN23  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC4LN24  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    XL4'11404013'\n         EJECT\n***********************************************************************\n*  MAIN BATTLE COMPUTER SCREEN LAYOUT                                 *\n***********************************************************************\nSCREEN5  DC    XL13'441140403C4040001140401DE8'\nSC5LN01  DC    CL039'          *****    *                   '\n         DC    CL40'    .                  .                '\nSC5LN02  DC    CL40' .        ***..*** *               *    '\n         DC    CL40'            ***                         '\nSC5LN03  DC    CL40'          *** ...**           .   *|*   '\n         DC    CL40'          #*#*#     . .                 '\nSC5LN04  DC    CL40' .  .      *.** . **.     .        |    '\n         DC    CL40'.        #*#*# .                        '\nSC5LN05  DC    CL40'              * **** *             |    '\n         DC    CL40'          .      . .                    '\nSC5LN06  DC    CL40'                .****** .     .    |    '\n         DC    CL40'    .    .        .                     '\nSC5LN07  DC    CL40'     .     .              .        |    '\n         DC    CL40'        .    .                          '\nSC5LN08  DC    CL40'                  .       .             '\n         DC    CL40' .         % .       .                  '\nSC5LN09  DC    CL40'                             .    @@@   '\n         DC    CL40'         .%%%                           '\nSC5LN10  DC    CL40'                                 @@@@@  '\n         DC    CL40'        .                               '\nSC5LN11  DC    CL40'  <---------------------------- @@@@@@@ '\n         DC    CL40'----------------------------->          '\nSC5LN12  DC    CL40'                  .              @@@@@  '\n         DC    CL40'                                        '\nSC5LN13  DC    CL40'              .      .      .     @@@   '\n         DC    CL40'      .      .             .            '\nSC5LN14  DC    CL40'              .            .           .'\n         DC    CL40'   .    .            .                  '\nSC5LN15  DC    CL40'      .   .                        |    '\n         DC    CL40'                                        '\nSC5LN16  DC    CL40'           .        . *   .   *    |    '\n         DC    CL40'          **        .      .            '\nSC5LN17  DC    CL40'                      * .   *      |    '\n         DC    CL40'  .       ***                           '\nSC5LN18  DC    CL40'                     *    *        |   .'\n         DC    CL40'            **       .         .        '\nSC5LN19  DC    CL40'      **          ***  . *         |    '\n         DC    CL40'               *          .             '\nSC5LN20  DC    CL40'       **  .     ****              |    '\n         DC    CL40'       .        *     .                 '\nSC5LN21  DC    CL40'                ****              *|*   '\n         DC    CL40'          .      *                      '\nSC5LN22  DC    CL40'                **                 *    '\n         DC    CL40'                  *    .     .          '\nSC5LN23  DC    CL40'         .                              '\n         DC    CL40'                                        '\nSC5LN24  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    XL4'11404013'\n         END   STREK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOCMDR": {"ttr": 6406, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x00\\x00\\x91\\x07\\x7f\\x00\\x91)O\\x146\\x03\\xdc\\x02\\xe3\\x01\\x88\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1991-03-18T00:00:00", "modifydate": "1991-10-21T14:36:00", "lines": 988, "newlines": 739, "modlines": 392, "user": "SYSTAB"}, "text": "TSOCMDR TITLE '** TSO COMMANDER **'\n***********************************************************************\n*                                                                     *\n*    NAME - TSOCMDR                                                   *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS IS A FULL-SCREEN COMMAND PROCESSOR THAT IS ONLY   *\n*              INTENDED TO BE USED BY SYSTEMS PROGRAMMERS.  IT CHECKS *\n*              FOR OPERATOR AUTHORITY.  IT DISPLAYS THE NAME OF OTHER *\n*              COMMANDS THAT ARE AVAILABLE, ALONG WITH HELP/SYNTAX.   *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - TSOCMDR REQUIRES A 3270 DISPLAY STATION WITH AT   *\n*                   LEAST 24 LINES.  IT WILL WORK ON LARGER TUBES,    *\n*                   BUT DOES NOT REQUIRE THEM.                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT, STAX                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nTSOCMDR CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         USING EXTRAREA,R2             ESTABLISH ADDRESSABILITY\n         USING SCRNLINE,R4             ESTABLISH ADDRESSABILITY\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         MVC   USERID,0(R1)            COPY USERID\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    DRBYPERR                YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         B     EXIT10                  GO HOME.....\nDRBYPERR EQU   *\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nDRLOOPMN EQU   *\n         BAL   R9,FORMATER             FORMAT EXTRACT DATA INTO SCREEN\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n         CLI   MESSAGE,X'7A'           DID USER PRESS PF10?\n         BNE   DRNOPF10                NO, BYPASS\n         BAL   R9,STACKRTN             YES, GO LAUNCH REQUESTED COMMAND\n         B     DRCLEAR                 EXIT\n*        CLI   MESSAGE,C'3'            DID USER PRESS PF3? (IN FULLSCR)\n*        BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n*------> IF USER MOVED THE CURSOR WE WANT TO MOVE THE PAGE THERE\nDRNOPF10 EQU   *\n         CLC   MESSAGE+1(2),=XL2'C54B' WHERE IT IS NORMALLY...\n         BE    DRCSRNMV                CURSOR DIDN'T MOVE\n         MVC   BUFFADDR,MESSAGE+1      MOVE THE CURSOR LANDING SPOT\n         BAL   R9,TUBETORC             CONVERT TO ROW/COLUMN\n         CLC   ROW,=CL2'05'            LESS THAN ROW 5?\n         BL    DRCSRNMV                IGNORE REQUEST\n         CLC   ROW,=CL2'13'            MORE THAN ROW 13?\n         BH    DRCSRNMV                IGNORE REQUEST\n         PACK  WORKDBLW,ROW            PACK THE ROW\n         CVB   R4,WORKDBLW             MAKE IT HEX\n         BCTR  R4,0                    NORMALIZE LINE NUMBER\n         MH    R4,=H'80'               MULTIPLY LINE LENGTH\n         LA    R3,SC1LN01              GET ORIGIN\n         AR    R4,R3                   PTR TO START OF LINE\n         MVC   WORKDBLW(6),SCCMDNAM    MOVE CMDNAME FOUND FROM SCREEN\n         L     R2,EATBLFST             GET ORIGIN OF TABLE\n         L     R3,EATBLAST             GET END OF TABLE\nDRSRCH01 EQU   *\n         CR    R2,R3                   END-OF-TABLE?\n         BNL   DRCSRNMV                IGNORE REQUEST\n         CLC   WORKDBLW(6),EACMDNAM    IS IT THIS ENTRY?\n         BE    DRSRCHFN                YES, GO TO FOUND\n         LA    R2,EXTRLNTH(R2)         BUMP\n         B     DRSRCH01                ITERATE\nDRSRCHFN EQU   *\n         ST    R2,EATBLNXT             SET NEW PTR\n         ST    R2,EATBLTOP             SET NEW PTR\nDRCSRNMV EQU   *\n         CLI   MESSAGE,C'7'            DID USER PRESS PF7?\n         BNE   DRNOTPB                 BYPASS PAGEBACK CODE\n         L     R2,EATBLTOP             PTR TO NEXT ENTRY\n         LA    R3,EXTRLNTH             GET LENGTH OF NODE\n         MH    R3,=H'9'                GO BACK 9 LINES\n         SR    R2,R3                   SUBTRACT 9 LINES\n         C     R2,EATBLFST             GONE TOO FAR?\n         BNL   DRBYPTOO                OK, BYPASS RESET CODE\n         L     R2,EATBLFST             RESET\nDRBYPTOO EQU   *\n         ST    R2,EATBLNXT             STORE NEW NEXT PTR (PAGEBACK)\nDRNOTPB  EQU   *\n         B     DRLOOPMN                MAIN DRIVER LOOP\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE STACKS THE NEW COMMAND ONTO THE TSO COMMAND STACK.   *\n***********************************************************************\n         SPACE 1\nSTACKRTN DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'STACKRTN'\nBSAVE20  EQU   *\n         SPACE 1\n         OC    MESSAGE+6(80),=CL80' '  SET TO UPPER CASE\n         GETMAIN LU,LA=STCKGMRQ,A=STCKGMRS,SP=78\n         SPACE 1\n         L     R4,STCKGMRS             ADDR OF LSD & COMMAND\n         MVC   0(16,R4),STCKLSD        MOVE LSD TO SP 78 AREA\n         L     R5,STCKGMRS+4           ADDR OF SP 78 COMMAND AREA\n         MVC   0(80,R5),MESSAGE+6      MOVE OUR COMMAND NAME\n         ST    R5,0(R4)                STORE COMMAND ADDR IN LSD\n         ST    R5,8(R4)                STORE COMMAND ADDR IN LSD\n         L     R2,CPPLUPT              ADDR OF USER PROFILE TABLE\n         L     R3,CPPLECT              ADDR OF ENVIRONMENT CONTROL TBL\n         SPACE 1\n         STACK PARM=STCKLIST,          ADDR OF LIST FORM MACRO         X\n               UPT=(R2),               ADDR OF USER PROFILE TABLE      X\n               ECT=(R3),               ADDR OF ENVIRONMENT CONTROL TBL X\n               ECB=STCKECB,            ADDR OF EVENT CONTROL BLOCK     X\n               STORAGE=((R4),SOURCE),  ADDR OF LIST STORAGE DESCRIPTOR X\n               MF=(E,STCKIOPL)         EXECUTE FORM & IOPL STORAGE\n         LTR   R15,R15                 SUCCESSFUL OPERATION?\n         BZ    EXIT20                  YES, EXIT\n         ISK   0,0                     NO, ABEND RIGHT HERE\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE FORMATS THE DATA DERIVED IN THE EXTRACT ROUTINE    *\n*   AND FORMATS IT INTO THE SCREEN THAT IS THEN PAINTED DURING THE    *\n*   TPUTMAIN ROUTINE WHICH FOLLOWS.                                   *\n***********************************************************************\n         SPACE 2\nFORMATER DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'FORMATER'\nBSAVE50  EQU   *\n         SPACE 1\n         L     R2,EATBLNXT             GET NEXT ADDRESS\n         ST    R2,EATBLTOP             SAVE CURRENT TOP\n         LA    R4,SC1LN05              GET ORIGIN IN SCREEN\n         LA    R5,9                    # LINES OF DATA PER SCREEN\n         L     R1,EASAMPTR             GET ADDRESS OF SAMPLE LINE\n         ST    R1,SAMPTRSV             SAVE THIS ADDRESS\n         MVC   SC1LN22+1(78),0(R1)     MOVE SAMPLE LINE\n         LA    R6,SC1LN22+1            GET START ADDRESS\n         LA    R7,78                   GET COUNT FOR BCT\nFMTUSER1 EQU   *\n         CLC   0(7,R6),=CL7'%USERID'   SPECIAL IDENTIFIER?\n         BE    FMTUSER2                YUP, GO REPLACE\n         LA    R6,1(R6)                BUMP\n         BCT   R7,FMTUSER1             ITERATE\n         B     FMTHELPR                BYPASS USERID MOVE\nFMTUSER2 EQU   *\n         MVC   0(7,R6),USERID          MOVE IN USERID\n         CLI   6(R6),C' '              7TH CHAR A BLANK?\n         BNE   FMTHELPR                NO, IT'S OK\n         MVC   6(2,R6),=CL2') '        TRANSPOSE SPACE\nFMTHELPR EQU   *\n         L     R1,EAHELPTR             GET ADDRESS OF HELP LINE\n         MVC   SC1LN16(80),0(R1)       MOVE SAMPLE LINE\n         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE\n         MVC   SC1LN17(80),0(R1)       MOVE SAMPLE LINE\n         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE\n         MVC   SC1LN18(80),0(R1)       MOVE SAMPLE LINE\n         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE\n         MVC   SC1LN19(80),0(R1)       MOVE SAMPLE LINE\n         LA    R1,80(R1)               GET ADDRESS OF NEXT HELP LINE\n         MVC   SC1LN20(80),0(R1)       MOVE SAMPLE LINE\nFMTLOOP1 EQU   *\n         C     R2,EATBLAST             END OF EXTRACT TABLE?\n         BNL   FMTCLEAR                CLEAR REST OF SCREEN LINES\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE\n         MVC   SCCMDNAM,EACMDNAM       MOVE CMD FULL NAME\n         MVC   SCSHORT,EASHORT         MOVE CMD NICKNAME\n         L     R1,EATITPTR             GET PTR TO TITLE LINE\n         MVC   SCTITLE,0(R1)           MOVE TITLE INFORMATION\nFMTNEXT  EQU   *\n         LA    R4,80(R4)               BUMP TO NEXT SCREEN LINE\n         LA    R2,EXTRLNTH(R2)         BUMP TO NEXT ENTRY\n         BCT   R5,FMTLOOP1             ITERATE\n         LA    R7,EXTRLNTH             GET LENGTH OF EXTRACT ENTRY\n         SR    R2,R7                   SUBTRACT ONE ENTRY\n         MVC   EATBLPRV,EATBLNXT       SAVE OLD ORIGIN PTR\n         ST    R2,EATBLNXT             STORE NEW NEXT PTR\nFMTCLEAR EQU   *\n         LTR   R5,R5                   RUN OUT OF LINES YET?\n         BZ    FMTEND                  YES, ENOUGH IS ENOUGH\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          CLEAR THE REST OF THE LINE\n         LA    R4,80(R4)               BUMP TO NEXT LINE\n         BCT   R5,FMTCLEAR             ITERATE\nFMTEND   EQU   *\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE60  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\nFSREFRSH EQU   *\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TM    ATTRIB+3,X'01'          DOES THIS TUBE SUPPORT COLOR?\n         BNO   NOCOLOR                 BRANCH AROUND COLORS\n         TPUT  SC1COLOR,LSC1CLR,NOEDIT WRITE SPECIALTY COLORS\nNOCOLOR  EQU   *\n         MVI   MESSAGE,C' '            CLEAR FIRST CHARACTER\n         MVC   MESSAGE+1(85),MESSAGE   CLEAR REST\n         TGET  MESSAGE,86,ASIS         GET DUMMY INPUT\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, CLEAR AND END\n         CLI   MESSAGE,C'3'            DID USER PRESS PF3?\n         BE    DRCLEAR                 GO TO DRIVER'S CLEAR/EXIT\n         L     R8,SAMPTRSV             GET ADDRESS OF CURRENT SAMP LINE\n         MVC   0(80,R8),MESSAGE+6      SAVE USER'S CHANGES\n         CLI   MESSAGE,X'7D'           DID USER PRESS ENTER\n         BNE   EXIT70                  NO, EXIT\n         L     R7,EATBLTOP             GET CURRENT TOP\n         ST    R7,EATBLNXT             SAVE INTO NEXT\n         B     EXIT70                  SPLIT\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE CALCULATES THE SCREEN ADDR'S FROM LINE START ADDRESS *\n***********************************************************************\n         SPACE 2\nCALCADDR DS    0H\n         ST    R9,SAVE100\n         B     BSAVE100\nSAVE100  DC    F'-1'\n         DC    CL8'CALCADDR'\nBSAVE100 EQU   *\n         SPACE 1\n*------> AT ENTRY, R8 MUST CONTAIN A PTR TO A VOLSER ON A SCREEN LINE\n         LA    R7,SC1LN01              PICK UP ADDR OF START OF SCREEN\n         SR    R8,R7                   GENERATE DISPLACEMENT\n         CVD   R8,WORKDBLW             CONVERT TO DECIMAL\n         DP    WORKDBLW,=PL2'80'       DIVIDE BY LINE LENGTH\n         AP    WORKDBLW(6),=PL1'1'     VOLSER IS ON FOLLOWING LINE\n         UNPK  ROW,WORKDBLW+4(2)       UNPACK\n         OI    ROW+1,X'F0'             CLEAR SIGN NIBBLE\n         MVC   COLUMN,=CL2'01'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   STARTADR,BUFFADDR       STARTING ADDRESS\n         MVC   COLUMN,=CL2'26'         SET UP COLUMN\n         BAL   R9,RCTOTUBE             CONVERT ROW/COLUMN TO SCREEN ADR\n         MVC   ENDADDR,BUFFADDR        ENDING SCREEN ADDRESS\n         SPACE 1\nEXIT100  EQU   *\n         L     R9,SAVE100\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE ROW/COLUMN TO BUFFER CONVERSION      *\n***********************************************************************\n         SPACE 2\nRCTOTUBE DS    0H\n         ST    R9,SAVE510\n         B     BSAVE510\nSAVE510  DC    F'-1'\n         DC    CL8'RCTOTUBE'\nBSAVE510 EQU   *\n         SPACE 1\n*--> USER WANTS A ROW/COLUMN TO BUFFER ADDRESS CONVERSION\n         PACK  R327FLD1,ROW            PACK THE ROW NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT 1\n         MP    R327FLD1,=PL2'80'       NO, MULTIPLY BY 80\n         PACK  R327FLD2,COLUMN         PACK THE COLUMN\n         AP    R327FLD1,R327FLD2       ADD TO GET POSITION NUMBER\n         SP    R327FLD1,=PL1'1'        SUBTRACT TO GET REL POSITION\n         DP    R327FLD1,=PL2'64'       DIVIDE BY BASE 64\n         ZAP   WORKDBLW,R327FLD1(2)    MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+0(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         ZAP   WORKDBLW,R327FLD1+2(2)  MOVE FOR CONVERSION\n         CVB   R2,WORKDBLW             CONVERT FOR USE AS AN INDEX\n         LA    R3,TABLE327             GET BASE ADDRESS\n         AR    R3,R2                   ADD DISPLACEMENT TO BASE\n         MVC   BUFFADDR+1(1),0(R3)     MOVE CHARACTERS FROM TABLE\n         SPACE 1\nEXIT510  EQU   *\n         L     R9,SAVE510\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PROCESSES THE BUFFER TO ROW/COLUMN CONVERSION      *\n***********************************************************************\n         SPACE 2\nTUBETORC DS    0H\n         ST    R9,SAVE520\n         B     BSAVE520\nSAVE520  DC    F'-1'\n         DC    CL8'TUBETORC'\nBSAVE520 EQU   *\n         SPACE 1\n*--> USER WANTS A BUFFER ADDRESS TO ROW/COLUMN CONVERSION\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270510 EQU   *\n         CLC   BUFFADDR(1),0(R2)       IS IT THIS POINT IN TABLE\n         BE    R3270520                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270510             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270520 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         SLL   R2,6                    MULTIPLY BY 64\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         ZAP   R327FLD1,WORKDBLW       PLACE IN SAFE-KEEPING\n         LA    R2,TABLE327             GET BASE ADDRESS OF TABLE\n         LA    R3,64                   GET TABLE LENGTH\nR3270530 EQU   *\n         CLC   BUFFADDR+1(1),0(R2)     IS IT THIS POINT IN TABLE\n         BE    R3270540                YES, BREAK OUT\n         LA    R2,1(R2)                BUMP\n         BCT   R3,R3270530             ITERATE\n         ISK   0,0                     BUG, KILL IT RIGHT HERE\nR3270540 EQU   *\n         LA    R3,TABLE327             GET BASE ADDRESS OF TABLE\n         SR    R2,R3                   GET OFFSET\n         CVD   R2,WORKDBLW             CONVERT TO DECIMAL\n         AP    R327FLD1,WORKDBLW       ADD TO BASE\n         DP    R327FLD1,=PL2'80'       NO, DIVIDE BY 80\n         AP    R327FLD1+0(2),=PL1'1'   ADD 1 TO GET REAL ROW\n         AP    R327FLD1+2(2),=PL1'1'   ADD 1 TO GET REAL COLUMN\n         UNPK  ROW,R327FLD1(2)         RETURN THE ROW\n         OI    ROW+1,X'F0'             CLEAR SIGN\n         UNPK  COLUMN,R327FLD1+2(2)    RETURN THE COLUMN\n         OI    COLUMN+1,X'F0'          CLEAR SIGN\n         SPACE 1\nEXIT520  EQU   *\n         L     R9,SAVE520\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL19'COMMAND INTERRUPTED'\nMESSAGE  DC    CL86' '                 MESSAGE TO BE RECEIVED\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\nUSERID   DC    CL7' '                  USERID, PADDED WITH BLANKS\n         SPACE 1\nHEXTR    DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHAR\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         EJECT\n***********************************************************************\n*      WORK AREAS FOR 3270 ADDRESS CONVERSION ROUTINES                *\n***********************************************************************\n         SPACE 1\nWORKDBLW DC    D'0'                    HEX/DECIMAL CONVERSION AREA\nSAMPTRSV DS    F                       PTR TO CURRENT SAMPLE LINE\nROW      DS    CL2                     ROW\nCOLUMN   DS    CL2                     COLUMN\nBUFFADDR DS    XL2                     3270 BUFFER ADDRESS\nSTARTADR DS    XL2                     3270 BUFFER ADDRESS: STARTING\nENDADDR  DS    XL2                     3270 BUFFER ADDRESS: ENDING\n*--> WORK DATA ITEMS FOR 3270 TRANSLATION ROUTINE\nR327FLD1 DS    F                       WORK AREA\nR327FLD2 DS    F                       WORK AREA\n*--> IBM 3270 BASE 64 ENCODING TABLE (IS THERE A ROUTINE SOMEWHERE?)\nTABLE327 EQU   *\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n*--> POINTERS TO KEEP TRACK OF THE CURRENT SCREEN POSITION\nEATBLFST DC   A(CMDNMTBL)              POINTER TO BGN OF EXTRACT TABLE\nEATBLTOP DC   A(CMDNMTBL)              POINTER TO TOP OF CURRENT SCREEN\nEATBLAST DC   A(CMDNMEND)              POINTER TO END OF EXTRACT TABLE\nEATBLPRV DC   A(CMDNMTBL)              POINTER TO PREVIOUS SCREEN START\nEATBLNXT DC   A(CMDNMTBL)              POINTER TO NEXT ENTRY TO SHOW\n         EJECT\n***********************************************************************\n*               S T A C K   M A C R O   A R E A                       *\n***********************************************************************\n         SPACE 1\nSTCKGMRS DC    2F'0'                   GETMAIN RESPONSE AREA\nSTCKGMRQ DS    0F                      GETMAIN REQUEST AREA\n         DC    F'16'                       16 BYTES FOR THE LSD\n         DC    X'80'                       LAST REQUEST INDICATOR\n         DC    AL3(80)                     80 BYTES FOR COMMAND\nSTCKLIST STACK MF=L                    LIST FORM STACK MACRO\nSTCKECB  DC    F'0'                    ECB FOR STACK MACRO USE\nSTCKIOPL DC    4F'0'                   INPUT/OUTPUT PARAMETER LIST\nSTCKLSD  DS    0F                      LIST SOURCE DESCRIPTOR\n         DC    A(0)                        ADDR OF IN-STORAGE LIST\n         DC    H'52'                       RECORD LENGTH OF ELEMENT\n         DC    H'52'                       TOTAL LENGTH OF LIST\n         DC    A(0)                        POINTER TO COMMAND\n         DC    A(0)                        RESERVED\n         EJECT\n***********************************************************************\n*               C O M M A N D   N A M E   T A B L E                   *\n***********************************************************************\n         SPACE 1\nSCCMDPTR DC    A(CMDNMTBL)     ADDRESS OF COMMAND LINE TO HILITE\nCMDNMTBL EQU   *\n         DC    CL8'ARITH   '   NAME OF THE COMMAND\n         DC    CL4'AR  '       NICKNAME\n         DC    A(HELPAR)       ADDRESS OF HELP TEXT\n         DC    A(SAMPAR)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLAR)       ADDRESS OF TITLE TEXT\n         DC    CL8'DSATTRIB'   NAME OF THE COMMAND\n         DC    CL4'DSAT'       NICKNAME\n         DC    A(HELPDSAT)     ADDRESS OF HELP TEXT\n         DC    A(SAMPDSAT)     ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLDSAT)     ADDRESS OF TITLE TEXT\n         DC    CL8'LISTALOC'   NAME OF THE COMMAND\n         DC    CL4'LA  '       NICKNAME\n         DC    A(HELPLA)       ADDRESS OF HELP TEXT\n         DC    A(SAMPLA)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLLA)       ADDRESS OF TITLE TEXT\n         DC    CL8'LISTLEV '   NAME OF THE COMMAND\n         DC    CL4'LL  '       NICKNAME\n         DC    A(HELPLL)       ADDRESS OF HELP TEXT\n         DC    A(SAMPLL)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLLL)       ADDRESS OF TITLE TEXT\n         DC    CL8'LISTPDS '   NAME OF THE COMMAND\n         DC    CL4'LPDS'       NICKNAME\n         DC    A(HELPLPDS)     ADDRESS OF HELP TEXT\n         DC    A(SAMPLPDS)     ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLLPDS)     ADDRESS OF TITLE TEXT\n         DC    CL8'LISTVTOC'   NAME OF THE COMMAND\n         DC    CL4'LV  '       NICKNAME\n         DC    A(HELPLV)       ADDRESS OF HELP TEXT\n         DC    A(SAMPLV)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLLV)       ADDRESS OF TITLE TEXT\n         DC    CL8'MONJOB  '   NAME OF THE COMMAND\n         DC    CL4'MJ  '       NICKNAME\n         DC    A(HELPMJ)       ADDRESS OF HELP TEXT\n         DC    A(SAMPMJ)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLMJ)       ADDRESS OF TITLE TEXT\n         DC    CL8'SHOWVOLS'   NAME OF THE COMMAND\n         DC    CL4'SV  '       NICKNAME\n         DC    A(HELPSV)       ADDRESS OF HELP TEXT\n         DC    A(SAMPSV)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLSV)       ADDRESS OF TITLE TEXT\n         DC    CL8'KERTS   '   NAME OF THE COMMAND\n         DC    CL4'KE  '       NICKNAME\n         DC    A(HELPKE)       ADDRESS OF HELP TEXT\n         DC    A(SAMPKE)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLKE)       ADDRESS OF TITLE TEXT\n         DC    CL8'TSOCMDR '   NAME OF THIS COMMAND\n         DC    CL4'TC  '       NICKNAME\n         DC    A(HELPTC)       ADDRESS OF HELP TEXT\n         DC    A(SAMPTC)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLTC)       ADDRESS OF TITLE TEXT\n         DC    CL8'VTAMOPER'   NAME OF THE COMMAND\n         DC    CL4'VO  '       NICKNAME\n         DC    A(HELPVO)       ADDRESS OF HELP TEXT\n         DC    A(SAMPVO)       ADDRESS OF SAMPLE COMMAND TEXT\n         DC    A(TITLVO)       ADDRESS OF TITLE TEXT\nCMDNMEND DC    XL8'00'         ** MARKS END OF DEVICE TABLE **\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN02+00)         FIRST BYTE OF SECOND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN04+00)         FIRST BYTE OF FIFTH LINE\n         DC    AL1(ATR@UH)             UNPROTECTED  / RED\n         DC    AL3(SC1LN05+10)         START OF ACTIVE COMMAND\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN05+16)         END OF ACTIVE COMMAND\n         DC    AL1(ATR@UHMO)           UNPROT-HIGH  / RED / MDT-ON\n         DC    AL3(SC1LN22+00)         INPUT FROM COMMAND LINE\n         DC    AL1(ATR@PL)             UNPROTECTED  / RED\n         DC    AL3(SC1LN22+79)         END OF COMMAND LINE\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+00)         BEGINNING OF LAST LINE\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN24+11)         BEGINNING OF PFK LIST\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC1LN24+67)         END OF PFK LIST\nATRLST1E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\nATR@UHMO EQU   X'C9'                   UNPROT-HIGH  / RED / MDT-ON\n         EJECT\n***********************************************************************\n*  EXTENDED COLOR FIELDS FOR FULL CAPABILITY SCREENS                  *\n***********************************************************************\n         SPACE 1\nSC1COLOR EQU   *\n         DC    XL1'F1'                 WRITE COMMAND\n         DC    XL1'C2'                 WCC - RELEASE KEYBOARD\n*--> BACK-LIGHT THE TITLE LINE\n         DC    XL16'1140402903C0F841F442F311C14F1DE8'\n*--> REVERSE VIDEO THE TITLE BLOCKS\n         DC    XL16'11C2602903C0F841F242F111C36F1DE8'\n*--> HILIT THE CURRENT ACTIVE COMMAND\n*        DC    XL16'11C5C92903C0F8410042F211C5501DE4'\n*--> BACK-LIGHT THE HELP BLOCK\n         DC    XL16'11D1602903C0F841F442F311D26F1DE8'\n         DC    XL16'11D9402903C0F841F442F3115A4F1DE8'\nESC1CLR  EQU   *\nLSC1CLR  EQU   ESC1CLR-SC1COLOR\n         SPACE 2\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'                           T S O   C O M'\n         DC    CL40' M A N D E R                            '\nSC1LN02  DC    CL40' ---------------------------------------'\n         DC    CL40'--------------------------------------- '\nSC1LN03  DC    CL40' FULLNAME  SHORT  *---------------------'\n         DC    CL40'-- DESCRIPTION -----------------------* '\nSC1LN04  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN06  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN07  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN08  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN09  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN10  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN11  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN12  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN16  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN17  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN18  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN19  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN20  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN22  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40' ---------   PF3=END  PF7=BACK  PF8=FORW'\n         DC    CL40'ARD  PF10=LAUNCH COMMAND    ----------- '\nSC1SUFIX DC    XL4'11C54B13'\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  HELP AND SAMPLE DATA TEXT FOR THE COMMAND LINE ENTRIES             *\n***********************************************************************\n         SPACE 1\nHELPAR   DC    CL40'   AR PROVIDES ARITHMETIC FUNCTIONS IN D'\n         DC    CL40'ECIMAL AND HEX, AS WELL AS 3270 BUFFER  '\n         DC    CL40'   ADDRESS CONVERSION CAPABILITIES.  IT '\n         DC    CL40'IS FULL-SCREEN MENU DRIVEN.  RESULTS    '\n         DC    CL40'   ARE SAVED FROM ONE COMMAND TO THE NEX'\n         DC    CL40'T.  INDIVIDUAL SCREENS MAY BE EXITED    '\n         DC    CL40'   BY PRESSING PA1 OR ATTN.             '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPAR   DC    CL40'AR  <NO OPERANDS - THIS COMMAND IS MENU '\n         DC    CL40'DRIVEN>                                 '\nTITLAR   DC    CL40'PERFORMS ARITHMETIC OPERATIONS, HEX AND '\n         DC    CL20'3270 CALCULATIONS   '\n         SPACE 1\nHELPDSAT DC    CL40'   DSAT PROVIDES EXTENSIVE INFORMATION A'\n         DC    CL40'BOUT INDIVIDUAL DATASETS.  THE FORMAT   '\n         DC    CL40'   IS DSAT DSNAME, WHERE DSNAME MAY BE E'\n         DC    CL40'ITHER FULLY QUALIFIED OR IF ENTERED     '\n         DC    CL40'   WITHOUT APOSTROPHES WILL HAVE YOUR US'\n         DC    CL40'ERID APPENDED.  EXTENT INFORMATION MAY  '\n         DC    CL40'   BE OBTAINED BY USING THE /X SWITCH.  '\n         DC    CL40'SCREENS MAY BE SAVED BY PROVIDING AN    '\n         DC    CL40'   FBA/133 DATASETS TO DDNAME DSATPRNT. '\n         DC    CL40'                                        '\nSAMPDSAT DC    CL40'DSAT DATASET.NAME                       '\n         DC    CL40'/X                                      '\nTITLDSAT DC    CL40'DISPLAYS DATASET ATTRIBUTES AND OPTIONAL'\n         DC    CL20'LY THE EXTENTS      '\n         SPACE 1\nHELPLA   DC    CL40'   THIS COMMAND DISPLAYS ALL DATASETS TH'\n         DC    CL40'AT ARE ALLOCATED TO YOUR CURRENT TSO    '\n         DC    CL40'   SESSION, ALONG WITH DISPOSITION INFOR'\n         DC    CL40'MATION.  PLEASE NOTE THAT YOU CAN       '\n         DC    CL40'   POSITION THE SCREEN PRECISELY BY MOVI'\n         DC    CL40'NG THE CURSOR TO THE STARTING LINE AND  '\n         DC    CL40'   PRESSING EITHER PF7 OR PF8.          '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPLA   DC    CL40'LA  <NO OPERANDS>                       '\n         DC    CL40'                                        '\nTITLLA   DC    CL40'DISPLAYS FOREGROUND ALLOCATIONS BY DDNAM'\n         DC    CL20'E AND DISPOSITION   '\n         SPACE 1\nHELPLL   DC    CL40'   THIS COMMAND WILL LIST ALL DATASETS W'\n         DC    CL40'ITHIN A GIVEN QUALIFIER, UP TO TWO      '\n         DC    CL40'   LEVELS.  THE SECOND QUALIFIER MAY BE '\n         DC    CL40'WILD-CARDED, BUT NO ASTERISK OR OTHER   '\n         DC    CL40'   WILD-CARD CHARACTER IS REQUIRED.  THE'\n         DC    CL40' SCREEN MAY BE PRECISELY POSITIONED BY  '\n         DC    CL40'   MOVING THE CURSOR TO THE LINE DESIRED'\n         DC    CL40' AND THEN PRESSING PF7 OR PF8.          '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPLL   DC    CL40'LL  LEV(%USERID)                        '\n         DC    CL40'                                        '\nTITLLL   DC    CL40'DISPLAYS DATASET LISTS FROM THE CATALOG '\n         DC    CL20'USING A QUALIFER    '\n         SPACE 1\nHELPLPDS DC    CL40'   THE LPDS COMMAND IS A POWERFUL UTILIT'\n         DC    CL40'Y THAT PERFORMS MANY OPERATIONS ON ANY  '\n         DC    CL40'   KIND OF PDS.  THE FORMAT OF THE COMMA'\n         DC    CL40'ND IS LPDS DSNAME, WHICH MAY EITHER BE  '\n         DC    CL40'   FULLY QUALIFIED OR USERID-ASSUMED.  I'\n         DC    CL40'F THIS IS YOUR FIRST TIME USING THE     '\n         DC    CL40'   COMMAND, TRY ENTERING O FOR OPTIONS. '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPLPDS DC    CL40'LPDS DATASET.NAME                       '\n         DC    CL40'                                        '\nTITLLPDS DC    CL40'PERFORMS NUMEROUS USEFUL ACTIVITIES ON A'\n         DC    CL20'NY PDS              '\n         SPACE 1\nHELPLV   DC    CL40'   THIS COMMAND LISTS ALL DATASETS ON A '\n         DC    CL40'PARTICULAR DASD VOLUME, OPTIONALLY BY   '\n         DC    CL40'   LEVEL.  THE FORMAT IS LV VOL(VOLSER) '\n         DC    CL40' LEV(QUALIFIERS).  THE LEV INFORMATION  '\n         DC    CL40'   IS WILD-CARDED BUT REQUIRES NO SPECIA'\n         DC    CL40'L CHARACTER.  THE SCREEN MAY BE PRE-    '\n         DC    CL40'   CISELY POSITIONED BY MOVING THE CURSO'\n         DC    CL40'R TO THE LINE DESIRED AND PRESSING PF7  '\n         DC    CL40'   OR PF8.                              '\n         DC    CL40'                                        '\nSAMPLV   DC    CL40'LV  VOL(VOLSER) LEV(%USERID)            '\n         DC    CL40'                                        '\nTITLLV   DC    CL40'DISPLAYS LISTS OF DATASETS ON A SPECIFIC'\n         DC    CL20' VOLUME BY LEVEL    '\n         SPACE 1\nHELPMJ   DC    CL40'   MONJOB IS USEFUL IF YOU ARE WATCHING '\n         DC    CL40'A JOB OR STARTED TASK RUN OR ARE JUST   '\n         DC    CL40'   WAITING FOR IT TO FINISH.  THE FORMAT'\n         DC    CL40' OF THE COMMAND IS MJ JOB(JOBNAME) AND  '\n         DC    CL40'  YOU MAY OPTIONALLY CHANGE THE UPDATE I'\n         DC    CL40'NTERVAL BY ALSO APPENDING INT(N) WHERE  '\n         DC    CL40'   N OR NN IS THE NUMBER OF REFRESH SECO'\n         DC    CL40'NDS, WHICH DEFAULTS TO 5.  PRESS PA1    '\n         DC    CL40'   OR ATTN TO EXIT THE MONITORING SESSIO'\n         DC    CL40'N THAT IS IN PROGRESS.                  '\nSAMPMJ   DC    CL40'MJ  JOB(%USERID) INT(10)                '\n         DC    CL40'                                        '\nTITLMJ   DC    CL40'MONITOR EXECUTION OF A JOB, STARTED TASK'\n         DC    CL20' OR TSO USER BY NAME'\n         SPACE 1\nHELPSV   DC    CL40'   SHOWVOLS DISPLAYS A LIST OF ALL DASD '\n         DC    CL40'VOLUMES THAT ARE PRESENTLY MOUNTED ON   '\n         DC    CL40'   THE SYSTEM.  IT REQUIRES NO OPERANDS.'\n         DC    CL40'  THE SCREEN MAY BE MORE PRECISELY      '\n         DC    CL40'   POSITIONED BY MOVING THE CURSOR AND P'\n         DC    CL40'RESSING PF7 OR PF8.  THE IPL, MASTER    '\n         DC    CL40'   CATALOG, AND PAGING VOLUMES ARE HIGH-'\n         DC    CL40'LIGHTED.                                '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPSV   DC    CL40'SV  <NO OPERANDS>                       '\n         DC    CL40'                                        '\nTITLSV   DC    CL40'DISPLAYS A LIST OF VOLUMES THAT ARE ONLI'\n         DC    CL20'NE TO THE SYSTEM    '\n         SPACE 1\nHELPKE   DC    CL40'   THIS FULL-SCREEN STAR TREK WAS WRITTE'\n         DC    CL40'N AS A DEMONSTRATION OF 3270 EXTENDED   '\n         DC    CL40'   HIGH-LIGHTING CAPABILITIES, AND IS NO'\n         DC    CL40'T PARTICULARLY CHALLENGING AS A GAME.   '\n         DC    CL40'   IT IS MENU DRIVEN.  THIS IS A GOOD TO'\n         DC    CL40'OL FOR DEMONSTRATING TSO TO NON-DP      '\n         DC    CL40'   LITERATE FRIENDS.                    '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPKE   DC    CL40'KE  <NO OPERANDS>                       '\n         DC    CL40'                                        '\nTITLKE   DC    CL40'FULL SCREEN STAR TREK (MEANT AS A DEMO T'\n         DC    CL20'OOL ONLY)           '\n         SPACE 1\nHELPTC   DC    CL40'   TSO COMMANDER TRACES ITS LINEAGE TO T'\n         DC    CL40'HE FAMOUS PC/DOS UTILITY CALLED NORTON  '\n         DC    CL40'   COMMANDER.  TSO HAS ALWAYS SUFFERED F'\n         DC    CL40'ROM A LACK OF FULL-SCREEN ONLINE HELP   '\n         DC    CL40'   FOR NON-ISPF COMMANDS.  THIS IS AN AT'\n         DC    CL40'TEMPT TO REDRESS THAT SAD SITUATION.    '\n         DC    CL40'   TRY MOVING THE CURSOR TO THE LINE THA'\n         DC    CL40'T YOU WANT AND PRESS EITHER PF7/PF8.    '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSAMPTC   DC    CL40'TC  <NO OPERANDS>                       '\n         DC    CL40'                                        '\nTITLTC   DC    CL40'THIS COMMAND - TSO COMMANDER            '\n         DC    CL20'                    '\n         SPACE 1\nHELPVO   DC    CL40'   VTAMOPER (VO) IS A VTAM SECONDARY PRO'\n         DC    CL40'GRAM OPERATOR (SPO).  IT IS A SORT OF   '\n         DC    CL40'   MINI-NCCF (NETVIEW) FACILITY THAT USE'\n         DC    CL40'S SENDCMD/RCVCMD MACROS TO ISSUE VTAM   '\n         DC    CL40'   COMMANDS AND RETRIEVE THE OUTPUT TO T'\n         DC    CL40'HE SCREEN.  BEING A SPO RATHER THAN A   '\n         DC    CL40'   PPO, IT HAPPILY CO-EXISTS WITH NETVIE'\n         DC    CL40'W, AND CAN BE VERY HELPFUL FOR ISSUING  '\n         DC    CL40'   NETWORK COMMANDS WHEN YOU ARE LOGGED '\n         DC    CL40' ONTO TSO.                              '\nSAMPVO   DC    CL40'VO  <NO OPERANDS>                       '\n         DC    CL40'                                        '\nTITLVO   DC    CL40'VTAM OPERATOR - SORT OF A MINI NCCF     '\n         DC    CL20'                    '\n         EJECT\n***********************************************************************\n*        INTERRUPTION EXIT ROUTINE --- STAX SERVICE ROUTINE           *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,NOGEN,NODATA\nEXTRAREA DSECT\nEACMDNAM DS    CL8                     COMMAND FULL NAME\nEASHORT  DS    CL4                     NICKNAME\nEAHELPTR DS    A                       POINTER TO HELP BLOCK\nEASAMPTR DS    A                       POINTER TO SAMPLE COMMAND BLOCK\nEATITPTR DS    A                       POINTER TO TITLE LINE\nEXTRLNTH EQU   *-EXTRAREA              LENGTH OF ENTRY\n         SPACE 2\nSCRNLINE DSECT\n         DS    CL1\nSCCMDNAM DS    CL8                     COMMAND FULL NAME\n         DS    CL2\nSCSHORT  DS    CL4                     NICKNAME\n         DS    CL3\nSCTITLE  DS    CL60                    TITLE (SHORT DESCRIPTION)\n         SPACE 2\n         END   TSOCMDR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOPER": {"ttr": 6915, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x81\\x15O\\x00\\x91\\x07/\\x14\\x08\\x03\\x19\\x03\\x18\\x00\\x02\\xe2\\xe8\\xe2\\xe3\\xc1\\xc2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1981-06-03T00:00:00", "modifydate": "1991-03-13T14:08:00", "lines": 793, "newlines": 792, "modlines": 2, "user": "SYSTAB"}, "text": "VTAMOPER TITLE '** TSO ACF/VTAM OPERATOR COMMAND **'\n***********************************************************************\n*                                                                     *\n*    NAME - VTAMOPER (VO)                                             *\n*                                                                     *\n*    AUTHOR - TED BESTANI                                             *\n*                                                                     *\n*    PURPOSE - THIS COMMAND ALLOWS TSO USERS TO ENTER VTAM CONSOLE    *\n*              COMMANDS AND RECEIVE RESPONSES IN A FULL SCREEN        *\n*              FORMAT.  ALL VTAM COMMANDS ARE AVAILABLE EXCEPT        *\n*              HALT AND START.  THIS COMMAND IS ONLY AVAILABLE        *\n*              TO TSO USERS WITH OPERATOR AUTHORITY.  IT IS INTENDED  *\n*              PRIMARILY FOR SYSTEMS PROGRAMMERS AND OTHERS WHO MUST  *\n*              MAINTAIN THE VTAM NETWORK.                             *\n*                                                                     *\n*    ATTRIBUTES - NON-REUSABLE                                        *\n*                                                                     *\n*    REQUIREMENTS - VTAMOPER REQUIRES A 3270 DISPLAY STATION WITH AT  *\n*                   LEAST 24 LINES.  IT WILL WORK ON 32 LINE TUBES,   *\n*                   BUT DOES NOT REQUIRE THEM.  ALSO, AN APPL MUST    *\n*                   BE ADDED TO 'SYS1.VTAMLST' WITH SPO AUTHORITY.    *\n*                   'TSOINQ   APPL AUTH=(SPO)'                        *\n*                                                                     *\n*    MACROS USED - TGET, TPUT, OPEN, CLOSE, ACB, SENDCMD, RCVCMD      *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN,NODATA\nVTAMOPER CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R9,0                    WHERE ARE WE?\n         USING *,R9                    TEMPORARY BASE REGISTER\n         ST    R13,SAVEAREA+4          SAVE BACKWARD SA PTR\n         LA    R8,SAVEAREA             GET SA ADDR\n         ST    R8,8(R13)               SAVE FORWARD SA PTR\n         LR    R13,R8                  COPY SA ADDR\n         LA    R12,4095(R13)           BASE2 = BASE1 + 4095 +\n         LA    R12,1(R12)                                     1\n         LA    R11,4095(R12)           BASE3 = BASE2 + 4095 +\n         LA    R11,1(R11)                                     1\n         LA    R10,4095(R11)           BASE4 = BASE3 + 4095 +\n         LA    R10,1(R10)                                     1\n         USING SAVEAREA,R13,R12,R11,R10    PERMANENT BASE REGISTERS\n         DROP  R9                      DROP TEMPORARY BASE REGISTER\n         MVC   SAVECPPL(16),0(R1)      SAVE CP PARM LIST\n         SPACE 1\n         BAL   R9,DRIVER               INVOKE MAIN ROUTINE\n         SPACE 1\n         L     R13,SAVEAREA+4          GET ADDR OF CALLER'S SA\n         LM    R14,R12,12(R13)         RESTORE REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     GO HOME....\n         SPACE 1\nSAVEAREA DS    18F    PROGRAM MAIN SAVE AREA\nSAVECPPL DS    0F     ** TSO COMMAND PROCESSOR PARAMETER LIST **\nCPPLCBUF DS    A      ADDRESS OF COMMAND INPUT BUFFER\nCPPLUPT  DS    A                 USER PROFILE TABLE\nCPPLPSCB DS    A                 PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    A                 ENVIRONMENT CONTROL TABLE\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*     THIS IS THE HIGHEST LEVEL WORK ROUTINE IN THE PROGRAM.  IT      *\n*   DIRECTS THE FLOW OF CONTROL TO THE WORK ROUTINES.                 *\n*     THE PROGRAM IS WRITTEN USING BASIC STRUCTURED PROGRAMMING. FLOW *\n*   BETWEEN ROUTINES IS ACCOMPLISHED VIA REGISTER 9, WHICH IS ALWAYS  *\n*   SAVED UPON ENTRY AND RESTORED BEFORE EXIT.                        *\n***********************************************************************\n         SPACE 2\nDRIVER   DS    0H\n         ST    R9,SAVE10\n         B     BSAVE10\nSAVE10   DC    F'-1'\n         DC    CL8'DRIVER  '\nBSAVE10  EQU   *\n         SPACE 1\n         L     R1,CPPLPSCB             ADDR OF THE PSCB\n         TM    16(R1),X'80'            DOES USER HAVE OPERATOR AUTH?\n         BO    GOWITHIT                YES, BYPASS ERROR MESSAGE\n         TPUT  MSG1,L'MSG1             PUT OUT ERROR MESSAGE\n         B     EXIT10                  EXIT COMMAND\nGOWITHIT EQU   *\n         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,ATTRIB=ATTRIB\n         OPEN  APPLACB                 IDENTIFY OURSELVES TO VTAM\n         L     R2,=A(ATTNRTN)          GET ADDR OF ATTN ROUTINE\n         STAX  (R2)                    SET UP STAX QUEUE ELEMENT\n         LTR   R15,R15                 GO OK?\n         BZ    GETCMND                 YES, BYPASS ERROR CODE\n         TPUT  MSG6,L'MSG6             PUT OUT ERROR MESSAGE\n         CLOSE APPLACB                 CLOSE THE ACB\n         B     EXIT10                  GO HOME.....\nGETCMND  EQU   *\n         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON\nGETCMND1 EQU   *\n         MVI   SCANSW,C'1'             INIT RC SWITCH=EXPECT RESPONSE\n         BAL   R9,TPUTMAIN             GO PAINT MAIN INPUT SCREEN\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 NO, CLEAR SCREEN AND GO HOME\n         CLC   COMMAND(4),=CL4'END '   DID USER REQUEST END?\n         BE    DRCLEAR                 YES, END COMMAND PROCESSOR\n         BAL   R9,SENDCMDR             SEND COMMAND TO ACF/VTAM\n         BAL   R9,SCANCMDR             SCAN COMMAND FOR VARY/MODIFY\n         CLI   SCANSW,C'1'             SCAN FOUND VARY/MODIFY?\n         BNE   GETCMND                 NO, DON'T EXPECT RESPONSES\n         BAL   R9,RCVRESPR             RECEIVE RESPONSES/BUILD SCREENS\n         B     GETCMND1                GO GET NEXT COMMAND\nDRCLEAR  EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         STLINENO MODE=OFF,LINE=1      SET FULL SCREEN MODE OFF\n         CLOSE APPLACB                 DISCONNECT FROM VTAM\n         SPACE 1\nEXIT10   EQU   *\n         L     R9,SAVE10\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PAINTS THE INPUT SCREEN AND READS A RESPONSE FROM  *\n*   THE TERMINAL.  UPON RETURN, REGISTER 1 WILL CONTAIN THE NUMBER    *\n*   OF BYTES READ FROM THE TERMINAL.                                  *\n***********************************************************************\n         SPACE 2\nTPUTMAIN DS    0H\n         ST    R9,SAVE20\n         B     BSAVE20\nSAVE20   DC    F'-1'\n         DC    CL8'TPUTMAIN'\nBSAVE20  EQU   *\n         SPACE 1\n         LA    R2,ATRLST1B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN1              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC1SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC1SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         MVC   ASCRNSIZ,=F'1920'       STORE SIZE OF SCREEN\n         BAL   R9,FULLSCR              GO DO DEMO SCREEN WORK\n         LTR   R1,R1                   DID USER TYPE IN COMMAND?\n         BZ    DRCLEAR                 YES, BYPASS CLEAR\n         SPACE 1\nEXIT20   EQU   *\n         L     R9,SAVE20\n         BR    R9\n         EJECT\n***********************************************************************\n*  THIS ROUTINE SENDS THE COMMAND ENTERED BY THE USER TO ACF/VTAM     *\n***********************************************************************\n         SPACE 2\nSENDCMDR DS    0H\n         ST    R9,SAVE30\n         B     BSAVE30\nSAVE30   DC    F'-1'\n         DC    CL8'SENDCMDR'\nBSAVE30  EQU   *\n         SPACE 1\n*--> MOVE COMMAND TO DISPLAY SCREENS\n         MVC   SC1LN04+33(126),COMMAND MOVE INPUT COMMAND\n         MVC   SC2LN04+30(126),COMMAND MOVE INPUT COMMAND\n*--> DO NOT ALLOW ANY WIERD CHARACTERS TO GO TO ACF/VTAM\n         TRT   COMMAND,TRTALLOW        ANY BAD CHARACTERS?\n         BC    8,PCBYP1                NO, BYPASS CODE\n         MVI   SCANSW,C'0'             SET RC SWITCH=NO RESPONSE\n         MVC   SC2LN08(80),=CL80'VTAMOPER - INVALID CHARACTER ENTERED'\n         LA    R3,14                   NUMBER OF LINES - 1\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCMOD2A1                NO, LEAVE MSG ALONE\n         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\nPCMOD2A1 EQU   *\n         BAL   R9,TPUTOUTP             GO TPUT SCREEN\n         B     EXIT30                  RETURN TO DRIVER\nPCBYP1   EQU   *\n*--> BUILD MESSAGE AND SEND IT TO ACF/VTAM\n         LA    R2,CMDHDR               ESTABLISH ADDRESSABILITY TO\n         USING ISTDPOHD,R2                 HEADER DSECT\n         MVI   POHRSVD,X'00'           CLEAR RESERVED BYTE\n         MVI   POHSTAT,POHRREQ+POHGEN  RESPONSE REQUIRED + ORIGIN=SPO\n         LH    R1,MSGNUM               GET MESSAGE COUNTER\n         LA    R1,1(R1)                BUMP BY 1\n         STH   R1,POHID                STORE MESSAGE ID\n         STH   R1,MSGNUM               STORE NEW MESSAGE COUNTER\n         SENDCMD RPL=SENDRPL,OPTCD=SYN SEND COMMAND TO ACF/VTAM\n         STM   R15,R0,SAVE15N0         SAVE THE RETURN REGISTERS\n         SHOWCB AM=VTAM,               GET THESE FIELDS FROM THE RPL:  X\n               RPL=SENDRPL,                                            X\n               AREA=SHOWCB1,                1) 'RTNCD' FIELD           X\n               FIELDS=(RTNCD,FDBK2),        2) 'FDBK2' FIELD'          X\n               LENGTH=8\n         L     R15,SAVE15N0\n         LTR   R15,R15                 DID SENDCMD COMPLETE OK?\n         BZ    EXIT30                  YES, BYPASS ISK\n         CLC   SHOWCB1+4(4),=X'00000071'   COMMAND NOT RECOGNIZED\n         BNE   PCKILLIT                NO, GO KILL IT\n         MVI   SCANSW,C'0'             SET RC SWITCH=NO RESPONSE\n         MVC   SC2LN08(80),=CL80'VTAMOPER - INVALID COMMAND ENTERED'\n         LA    R3,14                   NUMBER OF LINES - 1\n         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCMOD2A2                NO, LEAVE MSG ALONE\n         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\nPCMOD2A2 EQU   *\n         BAL   R9,TPUTOUTP             GO TPUT SCREEN\n         B     EXIT30                  RETURN TO DRIVER\nPCKILLIT EQU   *\n         CLOSE APPLACB                 CLOSE THE ACB\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN\n         TPUT  MSG2,L'MSG2             SEND THE ERROR MESSAGE\n         ISK   0,0                     KILL THE COMMAND PROCESSOR\n         SPACE 1\nEXIT30   EQU   *\n         L     R9,SAVE30\n         BR    R9\n         EJECT\n***********************************************************************\n*  THIS ROUTINE SCANS THE COMMAND ENTERED FOR VARY/MODIFY             *\n***********************************************************************\n         SPACE 2\nSCANCMDR DS    0H\n         ST    R9,SAVE40\n         B     BSAVE40\nSAVE40   DC    F'-1'\n         DC    CL8'SCANCMDR'\nBSAVE40  EQU   *\n         SPACE 1\n*--> FIND THE FIRST NON-BLANK IN THE COMMAND\n         LA    R2,SC2LN04+30           GET ADDR OF COMMAND SENT\n         LA    R3,126                  GET MAX LENGTH FOR BCT\nSCFINDBL EQU   *\n         CLI   0(R2),C' '              IS IT A BLANK\n         BNE   SCFNDNBL                NO, GO TO FOUND-NON-BLANK\n         LA    R2,1(R2)                BUMP TO NEXT CHAR\n         BCT   R3,SCFINDBL             LOOP\n         ISK   0,0                     SHOULD NEVER HAPPEN\nSCFNDNBL EQU   *\n*--> CHECK AND SEE IF COMMAND IS IN THE SEARCH TABLE\n         LA    R3,SCTBLBGN             BEGINNING OF TABLE\n         LA    R4,SCTBLEND             END OF TABLE\nSCSCANTB EQU   *\n         CR    R3,R4                   END OF TABLE?\n         BE    EXIT40                  YES, EXIT W/O RESETTING RC SW\n         XR    R5,R5                   CLEAR EXECUTE REGISTER\n         IC    R5,0(R3)                GET FIRST LENGTH\n         LR    R6,R5                   SAVE FOR LATER\n         SH    R5,=H'2'                SUB, 1 FOR EX, 1 FOR LENGTH\n         EX    R5,SCEXCLC              EXECUTE COMPARE\n         BE    SCFNDINT                HIT - GO RESET RC SWITCH\n         AR    R3,R6                   ADD LENGTH OF ENTRY\n         B     SCSCANTB                GO CHECK NEXT ENTRY\nSCEXCLC  CLC   1(0,R3),0(R2)           EXECUTED CLC - FIND COMMAND\nSCFNDINT EQU   *\n         MVI   SCANSW,C'0'             SET RC SW=NO RESPONSE\n         MVC   SC2LN08(80),MSG4        SET 'MESSAGE ACCEPTED' MSG\n         MVC   SC2LN09(80),MSG5        SET 'USE DISPLAY' MSG\n         LA    R3,13                   NUMBER OF LINES - 2\n         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   SCMOD2A1                NO, LEAVE MSG ALONE\n         MVC   SC2LN32(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\nSCMOD2A1 EQU   *\n         BAL   R9,TPUTOUTP             GO TPUT SCREEN.........\n         SPACE 1\nEXIT40   EQU   *\n         L     R9,SAVE40\n         BR    R9\n         SPACE 2\nSCTBLBGN EQU   *\n         DC    AL1(3),C'V '\n         DC    AL1(6),C'VARY '\n         DC    AL1(3),C'F '\n         DC    AL1(8),C'MODIFY '\nSCTBLEND EQU   *\n         EJECT\n***********************************************************************\n*  THIS ROUTINE RECEIVES RESPONSES FROM ACF/VTAM AND DISPLAYS THEM ON *\n*  ON THE USERS TSO TERMINAL.                                         *\n***********************************************************************\n         SPACE 2\nRCVRESPR DS    0H\n         ST    R9,SAVE50\n         B     BSAVE50\nSAVE50   DC    F'-1'\n         DC    CL8'RCVRESPR'\nBSAVE50  EQU   *\n         SPACE 1\nPCSENDOK EQU   *\n         MVI   LASTLNSW,C'0'           RESET END LINE SWITCH\n         LA    R2,RECHDR               ESTABLISH ADDRESSABILITY\n         LA    R3,15                   NUMBER OF USEABLE LINES/MOD 2\n         MVC   ASCRNSIZ,=F'1920'       MOVE SIZE OF SMALL SCREEN\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCMOD2A                 NO, LEAVE R3 ALONE\n         LA    R3,22                   ADD 8 MORE LINES\n         MVC   ASCRNSIZ,=F'2560'       MOVE SIZE OF BIG SCREEN\nPCMOD2A  EQU   *\n         LA    R4,SC2LN08              START AREA ON SCREEN\nPCSCRCHK EQU   *\n         CH    R3,=H'2'                ARE LESS THAN TWO LINES LEFT?\n         BNL   PCRCVCMD                NO, CONTINUE RECEIVING...\n         STM   R2,R7,SAVE2TO7          SAVE REGISTERS\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCMOD2B                 NO, LEAVE MESSAGE ON LINE 24\n         MVC   SC2LN32(80),ENDLINE1    PUT MSG ON LINE 32 INSTEAD\n         B     PCMOD2B1                BRANCH AROUND OTHER MESSAGE\nPCMOD2B  EQU   *\n         MVC   SC2LN24(80),ENDLINE1    MOVE 'MORE TO COME' MSG\nPCMOD2B1 EQU   *\n         BAL   R9,TPUTOUTP             GO TPUT THIS SCREEN\n         LM    R2,R7,SAVE2TO7          RESTORE REGISTERS\n         LA    R4,SC2LN08              RESET START AREA ON SCREEN\n         LA    R3,15                   RESET NUMBER OF USEABLE LINES\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCRCVCMD                NO, LEAVE R3 ALONE\n         LA    R3,22                   ADD 8 MORE LINES\nPCRCVCMD EQU   *\n         MVI   MESSAGE,C' '            MOVE FIRST BLANK\n         MVC   MESSAGE+1(125),MESSAGE  PROPOGATE BLANKS\n         RCVCMD RPL=RECVRPL,OPTCD=SYN  RECEIVE MESSAGE FROM ACF/VTAM\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\n         STM   R15,R0,SAVE15N0         SAVE THE RETURN REGISTERS\n         SHOWCB AM=VTAM,               GET THESE FIELDS FROM THE RPL:  X\n               RPL=RECVRPL,                  1) LENGTH OF RESPONSE     X\n               AREA=SHOWCB2,                 2) 'RTNCD' FIELD          X\n               FIELDS=(AREALEN,RTNCD,FDBK2), 3) 'FDBK2' FIELD'         X\n               LENGTH=12\n         L     R15,SAVE15N0\n         LTR   R15,R15                 DID MACRO COMPLETE OK?\n         BZ    PCRCVOK                 YES, BRANCH AROUND\n         CLOSE APPLACB                 CLOSE THE ACB\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR THE SCREEN\n         TPUT  MSG3,L'MSG3             SEND THE ERROR MESSAGE\n         ISK   0,0                     KILL THE COMMAND PROCESSOR\nPCRCVOK  EQU   *\n         LA    R1,126                  NUMBER OF BYTES\n         LA    R8,MESSAGE+125          POINT TO LAST BYTE\nPCBLANK1 EQU   *\n         CLI   0(R8),C' '              IS IT A SPACE?\n         BNE   PCBLANK2                NO, BREAK OUT OF LOOP\n         BCTR  R8,0                    SUBTRACT 1\n         BCT   R1,PCBLANK1             LOOP\n         B     PCRCVCMD                HUH??? GO GET ANOTHER LINE\nPCBLANK2 EQU   *\n         ST    R1,SHOWCB2              STORE LENGTH\n         CLI   LASTLNSW,C'1'           WAS LAST LINE PROCESSED?\n         BE    PCRCVEND                YES, END OF SCREEN\n         TM    POHSTAT,POHEND          END LINE?\n         BNO   PCRCVCON                NO, CONTINUE\n         CLI   POHSTAT,X'81'           ANY DATA?\n         BE    PCRCVEND                NO DATA, END OF SCREEN\n         MVI   LASTLNSW,C'1'           SET LAST LINE PROCESSED\nPCRCVCON EQU   *\n         L     R5,SHOWCB2              GET THE LENGTH OF THE MESSAGE\n         LA    R7,MESSAGE              GET ADDRESS OF THE MESSAGE\n         CH    R5,=H'80'               IS IT BIGGER THAN 80?\n         BNH   PCONEMVC                NO, ONLY ONE MOVE REQUIRED\n         LR    R6,R5                   COPY LENGTH\n         SH    R6,=H'80'               SUBTRACT FIRST 80\n         BCTR  R6,0                    SUBTRACT ONE FOR EX INSTRUCTION\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          PROPOGATE SPACES\n         EX    R6,PCEXMVC              EXECUTE THE FIRST MVC\n         BCTR  R3,0                    SUBTRACT ONE FROM LINE COUNTER\n         LA    R4,80(R4)               POINT TO NEXT LINE\n         LA    R7,80(R7)               BUMP TO NEXT LINE FOR MVC\n         LR    R5,R6                   SET LENGTH FOR SECOND MVC\nPCONEMVC EQU   *\n         BCTR  R5,0                    SUBTRACT ONE FOR EX INSTRUCTION\n         MVI   0(R4),C' '              CLEAR FIRST BYTE\n         MVC   1(79,R4),0(R4)          PROPOGATE SPACES\n         EX    R5,PCEXMVC              EXECUTE THE SECOND/ONLY MVC\n         BCTR  R3,0                    SUBTRACT ONE FROM LINE COUNTER\n         LA    R4,80(R4)               POINT TO NEXT LINE\n         TM    POHSTAT,POHEND          WAS THAT THE LAST RESPONSE?\n         BO    PCRCVEND                YES, NO MOVE SCROLL NEEDED?\n         B     PCSCRCHK                GO GET NEXT RESPONSE\nPCEXMVC  MVC   0(0,R4),0(R7)           EXECUTED MOVE\nPCRCVEND EQU   *\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   PCMOD2C                 NO, LEAVE MESSAGE ON LINE 24\n         MVC   SC2LN32(80),ENDLINE2    PUT MSG ON LINE 32 INSTEAD\n         B     PCMOD2C1                BRANCH AROUND OTHER MSG\nPCMOD2C  EQU   *\n         MVC   SC2LN24(80),ENDLINE2    MOVE 'DISPLAY COMPLETE' MSG\nPCMOD2C1 EQU   *\n         BAL   R9,TPUTOUTP             GO TPUT SCREEN......\n         SPACE 1\nEXIT50   EQU   *\n         L     R9,SAVE50\n         BR    R9\n         EJECT\n***********************************************************************\n*     THIS ROUTINE BLANKS OUT THE SCROLL LINES NOT USED IN THE        *\n*   RCVRESPR ROUTINE, AND CALLS FULLSCR TO TPUT THE SCREEN.           *\n***********************************************************************\n         SPACE 2\nTPUTOUTP DS    0H\n         ST    R9,SAVE60\n         B     BSAVE60\nSAVE60   DC    F'-1'\n         DC    CL8'TPUTOUTP'\nBSAVE60  EQU   *\n         SPACE 1\n*--> CLEAR UNUSED SCROLL LINES ON DISPLAY SCREEN\n         LA    R3,1(R3)                BUMP RESIDUAL COUNT BY 1\n         LA    R2,SC2LN23              GET ADDR OF LAST SCROLL LINE\n         CLI   ALTSZE,ALTMOD3          IS THIS A 3278/9 MOD 3?\n         BNE   TOLOOP01                NO, LEAVE IT AT 23\n         LA    R2,SC2LN31              GET ADDR OF LAST SCROLL LINE\nTOLOOP01 EQU   *\n         MVI   0(R2),C' '              CLEAR FIRST BYTE TO SPACE\n         MVC   1(79,R2),0(R2)          CLEAR REST OF THE LINE\n         SH    R2,=H'80'               BUMP UPWARDS ONE LINE\n         BCT   R3,TOLOOP01             LOOP THROUGH CLEAR\n*--> PREPARE FOR CALLING THE FULLSCR ROUTINE\n         LA    R2,ATRLST2B             ADDR OF ATTRIBUTE LIST\n         ST    R2,ALISTPTR             STORE IN PTR AREA\n         LA    R2,SCREEN2              ADDR OF ATTRIBUTE LIST\n         ST    R2,ASCRNPTR             STORE IN PTR AREA\n         LA    R2,SC2SUFIX             ADDR OF SUFFIX\n         ST    R2,ASUFXPTR             STORE IN PTR AREA\n         LA    R2,L'SC2SUFIX           GET LENGTH OF SUFFIX\n         STC   R2,ASUFXPTR             STORE IN PTR AREA\n         BAL   R9,FULLSCR              FORMAT/WRITE OUTPUT SCREEN\n         SPACE 1\nEXIT60   EQU   *\n         L     R9,SAVE60\n         BR    R9\n         EJECT\n***********************************************************************\n*   THIS ROUTINE BUILDS THE FINAL SCREEN, DOES A FULL SCREEN TPUT,    *\n* A DUMMY TGET, AND CLEARS THE SCREEN.  THE MAJOR PART OF THE CODE    *\n* IS THE BUILDING OF THE FINAL SCREEN.  THE ROUTINE HAS THREE INPUTS. *\n* 'ASCRNPTR' POINTS TO A STANDARD 1920 BYTE SCREEN IMAGE WITH NO      *\n* ATTRIBUTE CHARACTERS.  'ALISTPTR' CONTAINS THE ADDRESS OF THE       *\n* ATTRIBUTE LIST THAT WE WILL USE THIS TIME AROUND.  'SCPREFIX' IS    *\n* THE CONTROL STREAM WHICH IS TO BE PREFIXED ONTO THE FINAL SCREEN.   *\n*   USING THE THREE INPUTS, A TPUT'ABLE FINAL SCREEN IS BUILT IN THE  *\n* 'SCRBLD' AREA AT THE END OF THE PROGRAM.                            *\n***********************************************************************\n         SPACE 1\nFULLSCR  DS    0H\n         ST    R9,SAVE70\n         B     BSAVE70\nSAVE70   DC    F'-1'\n         DC    CL8'FULLSCR '\nBSAVE70  EQU   *\n         SPACE 1\n*--> INIT REGISTERS\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         L     R3,0(R2)                GET END OF ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\n         LA    R4,SCRBLD               GET ADDR OF BUILD AREA\n         XR    R5,R5                   INIT LENGTH REGISTER\n         L     R6,ASCRNPTR             GET ADDR OF INPUT SCREEN\n         LR    R7,R6                   GET BEGINNING\n         A     R7,ASCRNSIZ             ADD SIZE OF SCREEN TO GET END\n*--> INSERT PREFIX\n         MVC   0(L'SCPREFIX,R4),SCPREFIX   MOVE PREFIX\n         LA    R4,L'SCPREFIX(R4)       BUMP PTR\n         LA    R5,L'SCPREFIX(R5)       ADD LENGTH\n*--> FLAG ATTRIBUTE BYTES FIRST\nFSLOOP10 EQU   *\n         CR    R2,R3                   END OF ATTRIBUTE LIST?\n         BE    FSLOOP20                YES, END OF FLAGGING\n         L     R8,0(R2)                GET ADDR OF NEXT ATTR BYTE\n         MVI   0(R8),X'1D'             FLAG BYTE WITH A X'FF'\n         LA    R2,4(R2)                GET NEXT ATTRIBUTE ADDR\n         B     FSLOOP10                GO TRY NEXT\nFSLOOP20 EQU   *\n         L     R2,ALISTPTR             GET PTR TO ATTRIBUTE LIST\n         LA    R2,4(R2)                BUMP PAST END ADDRESS\nFSLOOP30 EQU   *\n         CR    R6,R7                   INPUT SCREEN EXHAUSTED?\n         BE    FSLOOP50                GO TPUT\n         CLI   0(R6),X'1D'             IS THIS A FLAG?\n         BE    FSLOOP40                YES, GO PROCESS\n         MVC   0(1,R4),0(R6)           NO, MOVE THIS BYTE TO OUTPUT\n         LA    R4,1(R4)                BUMP PTR TO OUTPUT SCREEN\n         LA    R5,1(R5)                BUMP LENGTH OF OUTPUT\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSLOOP40 EQU   *\n         MVC   0(1,R4),0(R6)           MOVE FLAG TO OUTPUT\n         MVC   1(1,R4),0(R2)           MOVE ATTR TO OUTPUT\n         LA    R2,4(R2)                BUMP TO NEXT ATTR\n         LA    R4,2(R4)                BUMP TWO BYTES IN OUTPUT\n         LA    R5,2(R5)                BUMP LENGTH BY TWO\n         LA    R6,1(R6)                BUMP TO NEXT INPUT BYTE\n         B     FSLOOP30                GO TRY NEXT BYTE\nFSEXMVC  MVC   0(0,R4),0(R8)           MOVE SUFFIX TO OUTPUT\nFSLOOP50 EQU   *\n         XR    R1,R1                   CLEAR REGISTER\n         IC    R1,ASUFXPTR             GET LENGTH TO MOVE\n         BCTR  R1,0                    SUBTRACT ONE FOR MVC\n         L     R8,ASUFXPTR             ADDR OF SUFFIX\n         EX    R1,FSEXMVC              MOVE THE SUFFIX TO OUTPUT\n         AR    R4,R1                   BUMP LENGTH OF SUFFIX\n         AR    R5,R1                   BUMP LENGTH OF SUFFIX\n         LA    R4,1(R4)                RESTORE 1 BYTE FROM EX\n         LA    R5,1(R5)                RESTORE 1 BYTE FROM EX\n*--> TGET'S AND TPUT'S\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BE    FSINTRPT                YES, BYPASS THIS TPUT\n         TPUT  SCRBLD,(R5),FULLSCR     PAINT OUTPUT SCREEN\n         TGET  COMMAND,126             GET DUMMY INPUT\n         OC    COMMAND,=CL126' '       SET TO UPPERCASE\n         CLI   STAXSW,C'1'             HAVE WE BEEN INTERRUPTED?\n         BNE   EXIT70                  NO, CONTINUE\nFSINTRPT EQU   *\n         TPUT  CLSCREEN,12,FULLSCR     CLEAR SCREEN\n         TPUT  MSG7,L'MSG7             SEND INTERRUPTED MESSAGE\n         CLOSE APPLACB                 CLOSE THE ACB NORMALLY\n         LTR   R15,R15                 DID CLOSE GO OK?\n         BZ    FSCLOSOK                YES, BYPASS\n         CLOSE APPLACB                 DISCARD UNRECEIVED MESSAGES\nFSCLOSOK EQU   *\n         L     R13,SAVEAREA+4          GET ADDR OF SAVEAREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,4                   SET RC=4\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nEXIT70   EQU   *\n         L     R9,SAVE70\n         BR    R9\n         EJECT\n***********************************************************************\n*           W O R K I N G   S T O R A G E   S E C T I O N             *\n***********************************************************************\n         SPACE 2\nMSG1     DC    CL36'COMMAND REQUIRES OPERATOR AUTHORITY'\nMSG2     DC    CL20'SENDCMD MACRO FAILED'\nMSG3     DC    CL19'RCVCMD MACRO FAILED'\nMSG4     DC    CL40'THE COMMAND YOU ENTERED HAS BEEN PASSED '\n         DC    CL40'TO ACF/VTAM                             '\nMSG5     DC    CL40'USE THE DISPLAY COMMAND TO FIND OUT THE '\n         DC    CL40'RESULT                                  '\nMSG6     DC    CL17'STAX MACRO FAILED'\nMSG7     DC    CL33'VTAM OPERATOR COMMAND INTERRUPTED'\nENDLINE1 DC    CL40'--------------------- MORE TO COME - PRE'\n         DC    CL40'SS ENTER FOR NEXT PAGE -----------------'\nENDLINE2 DC    CL40'------------------ DISPLAY COMPLETE - PR'\n         DC    CL40'ESS ENTER TO CONTINUE ------------------'\nMSGNUM   DC    H'0'                    SENDMSG MESSAGE NUMBER\nSAVE15N0 DC    2F'0'                   SAVE AREA FOR REGS 15 AND 0\nSAVE2TO7 DC    6F'0'                   SAVE AREA FOR REGS 2 THRU 7\nSHOWCB1  DC    2F'0'                   RETURN AREA FROM SHOWCB MACRO\nSHOWCB2  DC    3F'0'                   RETURN AREA FROM SHOWCB MACRO\nPRMSZE   DS    CL2                     PRIMARY SCREEN SIZE\nALTSZE   DS    CL2                     SECONDARY SCREEN SIZE\nALTMOD3  EQU   X'20'                   TERMINAL = 3278/9 MOD 3\nATTRIB   DS    F                       TERMINAL ATTRIBUTES\nLASTLNSW DC    CL1'0'                  LAST LINE PROCESSED SWITCH\nSCANSW   DC    CL1'1'                  RESPONSE EXPECTED, YES/NO\nSTAXSW   DC    CL1'0'                  INTERRUPTED, YES/NO\n         SPACE 1\nTRTALLOW DC    256XL1'FF'              TRT TABLE/ALLOWABLE CHARS\n         ORG   TRTALLOW+C'A'           ALLOW A-I\n         DC    9XL1'00'                  CLEAR CHARS\n         ORG   TRTALLOW+C'J'           ALLOW J-R\n         DC    9XL1'00'                  CLEAR CHARS\n         ORG   TRTALLOW+C'S'           ALLOW S-Z\n         DC    8XL1'00'                  CLEAR CHARS\n         ORG   TRTALLOW+C'0'           ALLOW 0-9\n         DC    10XL1'00'                 CLEAR CHARS\n         ORG   TRTALLOW+C'='           ALLOW =\n         DC    XL1'00'                   CLEAR CHARS\n         ORG   TRTALLOW+C','           ALLOW ,\n         DC    XL1'00'                   CLEAR CHARS\n         ORG   TRTALLOW+C' '           ALLOW BLANK\n         DC    XL1'00'                   CLEAR CHARS\n         ORG\n         SPACE 2\n         LTORG                         LITERAL POOL\n         SPACE 2\n*--> ACF/VTAM CONTROL BLOCKS AND DATA AREAS\nAPPLID   DC    AL1(L'APPLNAME)         LENGTH OF APPLID\nAPPLNAME DC    CL6'TSOINQ'             NAME OF APPLID\nAPPLACB  ACB   AM=VTAM,APPLID=APPLID,MACRF=NLOGON\nSENDRPL  RPL   AM=VTAM,ACB=APPLACB,AREA=SENDMSG,RECLEN=130,OPTCD=NQ\nRECVRPL  RPL   AM=VTAM,ACB=APPLACB,AREA=RECVMSG,AREALEN=130,OPTCD=NQ\n         SPACE 1\nSENDMSG  DS    0CL130                  MESSAGE AREA TO ACF/VTAM\nCMDHDR   DC    XL4'00'                 HEADER: SEE DSECT ISTDPOHD\nCOMMAND  DC    CL126' '                COMMAND TO BE PASSED\n         SPACE 1\nRECVMSG  DS    0CL130                  MESSAGE AREA FROM ACF/VTAM\nRECHDR   DC    XL4'00'                 HEADER: SEE DSECT ISTDPOHD\nMESSAGE  DC    CL126' '                MESSAGE TO BE RECEIVED\n         EJECT\n*--> THE FOLLOWING ARE USED BY THE 'FULLSCR' ROUTINE\nCLSCREEN DC    XL12'C11140403C4040001140C113'\nSCPREFIX DC    XL11'C11140403C404000114040'\n         SPACE 1\nALISTPTR DC    A(0)                    PTR TO ACTIVE ATTR LIST\nASCRNPTR DC    A(0)                    PTR TO ACTIVE INPUT SCREEN\nASCRNSIZ DC    F'0'                    SIZE OF THE SCREEN INPUT\nASUFXPTR DC    A(0)                    LENGTH/PTR TO SUFFIX\n         SPACE 1\nATRLST1B DS    0F\n         DC    A(ATRLST1E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@UH)             UNPROT-HIGH  / RED\n         DC    AL3(SC1LN04+32)         JUST BEFORE INPUT COMMAND\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC1LN05+79)         END OF INPUT COMMAND\nATRLST1E EQU   *\n         SPACE 1\nATRLST2B DS    0F\n         DC    A(ATRLST2E)             END OF THIS LIST\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC2LN01+00)         FIRST BYTE OF SCREEN\n         DC    AL1(ATR@PL)             PROTECT-LOW  / BLUE\n         DC    AL3(SC2LN04+29)         JUST BEFORE INPUT COMMAND\n         DC    AL1(ATR@PH)             PROTECT-HIGH / WHITE\n         DC    AL3(SC2LN05+79)         END OF INPUT COMMAND\nATRLST2E EQU   *\n         SPACE 1\nATR@PL   EQU   X'E4'                   PROTECT-LOW  / BLUE\nATR@PH   EQU   X'E8'                   PROTECT-HIGH / WHITE\nATR@UL   EQU   X'C4'                   UNPROT-LOW   / GREEN\nATR@UH   EQU   X'C8'                   UNPROT-HIGH  / RED\n         EJECT\nSCREEN1  EQU   *\nSC1LN01  DC    CL40'    T S O   A C F / V T A M   C O N S O '\n         DC    CL40'L E   O P E R A T O R   C O M M A N D   '\n         DC    CL40'----------------------------------------'\n         DC    CL40'----------------------------------------'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN04  DC    CL40'ENTER VTAM CONSOLE COMMAND ====>        '\n         DC    CL40'                                        '\nSC1LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN06  DC    CL40'----------------------------------------'\n         DC    CL40'----------------------------------------'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'EXAMPLES OF ACF/VTAM CONSOLE COMMANDS:  '\n         DC    CL40'                                        '\n         DC    CL40'D NET,ID=NODENAME,E                     '\n         DC    CL40'V NET,ACT,ID=NODENAME                   '\n         DC    CL40'D NET,TERMS                             '\n         DC    CL40'V NET,INACT,{I,F,OMIT},ID=NODENAME      '\n         DC    CL40'D NET,CLSTRS                            '\n         DC    CL40'V NET,TERM,{P,S}LU=NODENAME,TYPE=FORCE  '\n         DC    CL40'D NET,LINES                             '\n         DC    CL40'                                        '\n         DC    CL40'D NET,MAJNODES                          '\n         DC    CL40'                                        '\n         DC    CL40'D NET,BFRUSE                            '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'F NET,(NO)TRACE,TYPE={IO,BUF,LINE},ID=NO'\n         DC    CL40'DENAME                                  '\n         DC    CL40'F NET,DUMP,ID=NCPNAME,DYNA              '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'****************************************'\n         DC    CL40'****************************************'\n         DC    CL40'* IF THIS COMMAND TAKES MORE THAN 10 SEC'\n         DC    CL40'ONDS TO RESPOND, PLEASE PRESS ATTN!!!! *'\n         DC    CL40'****************************************'\n         DC    CL40'****************************************'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC1LN24  DC    CL40'--------------------- PRESS ENTER TO PRO'\n         DC    CL40'CESS COMMAND ---------------------------'\nSC1SUFIX DC    XL11'11C57B3CC64D0011C4D113'\n         EJECT\nSCREEN2  EQU   *\nSC2LN01  DC    CL40'    T S O   A C F / V T A M   C O N S O '\n         DC    CL40'L E   O P E R A T O R   C O M M A N D   '\n         DC    CL40'----------------------------------------'\n         DC    CL40'----------------------------------------'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN04  DC    CL40'YOU ENTERED THE COMMAND ====>           '\n         DC    CL40'                                        '\nSC2LN05  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN06  DC    CL40'----------------------------------------'\n         DC    CL40'----------------------------------------'\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN08  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN09  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN23  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN24  DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN31  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2LN32  DC    CL40'                                        '\n         DC    CL40'                                        '\nSC2SUFIX DC    XL4'11C44E13'\n         SPACE 1\nSCRBLD   DS    CL4096                  BUILD AREA FOR FINAL SCREEN\n         EJECT\n***********************************************************************\n*  INTERRUPTION EXIT ROUTINE ---- STAX SERVICE ROUTINE                *\n***********************************************************************\n         SPACE 2\nATTNRTN  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,R0                  SET UP BASE REGISTER\n         DROP  R12                     DROP OLD BASE REGISTER\n         USING *,R12                   SET UP NEW BASE REGISTER\n         ST    R13,STAXSAVE+4          SAVEAREA BACKWARD PTR\n         LA    R11,STAXSAVE            PICK UP OUR SAVEAREA ADDR\n         ST    R11,8(R13)              SAVEAREA FORWARD PTR\n         LR    R13,R11                 ESTABLISH NEW S/A PTR\n         SPACE 1\n         L     R3,STAXSWAD             GET ADDR OF SWITCH ADDR\n         MVI   0(R3),C'1'              TURN SWITCH ON\n         SPACE 1\n         L     R13,STAXSAVE+4          PICK UP OLD S/A ADDR\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS\n         LA    R15,0                   SET RC=0\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\nSTAXSWAD DC    A(STAXSW)               ADDR OF INTERRUPT SWITCH\nSTAXSAVE DS    18F                     SAVE AREA FOR INTERRUPT RTN\n         EJECT\n***********************************************************************\n*                     D S E C T S                                     *\n***********************************************************************\n         SPACE 2\n         PRINT ON,GEN,NODATA\n         SPACE 2\n         ISTDPOHD\n         SPACE 2\n         END   VTAMOPER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT173/FILE173.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT173", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}