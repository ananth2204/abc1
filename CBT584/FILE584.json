{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012414000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE584.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE584.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x04'", "DS1TRBAL": "b'\\xa7z'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04O\\x00\\x0e\\x04P\\x00\\x02\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\"\\x1f\\x01\\x02\"\\x1f\\x08\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-09T00:00:00", "modifydate": "2002-08-09T08:22:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 450    FILE:  584\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT450.FILE584\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 700 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/09/02    08:22:38    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE584": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00P\\x01\\x01\\x02_\\x01\\x02\"\\x1f\\x08!\\x00%\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-08-09T08:21:50", "lines": 37, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 584 is from Ugur Cilesiz, and contains a job with REXX    *   FILE 584\n//*           execs and other nice things, which automates the      *   FILE 584\n//*           initialization of DASD.  This job is useful in a      *   FILE 584\n//*           disaster recovery situation, and is also good for     *   FILE 584\n//*           \"everyday\" use, too.  The job is called AUTOINIT.     *   FILE 584\n//*                                                                 *   FILE 584\n//*           Phone extern   : +49-2181-285-218                     *   FILE 584\n//*           Phone Fax      : +49-2181-285-203                     *   FILE 584\n//*           MailTo:Ugur.Cilesiz@Rwesystems.com                    *   FILE 584\n//*                                                                 *   FILE 584\n//*      DESCRIPTION:  DASD MANAGEMENT IN BATCH                     *   FILE 584\n//*                                                                 *   FILE 584\n//*                   *  VARY OFFLINE THE UNITS                     *   FILE 584\n//*                   *  ICKDSF INIT DASD                           *   FILE 584\n//*                   *  VARY ONLINE THE UNITS                      *   FILE 584\n//*                   *  IDCAMS DEFINE VVDS                         *   FILE 584\n//*                   *  IDCAMS DEFINE GDG'S FOR DISASTER REC.      *   FILE 584\n//*                                                                 *   FILE 584\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 584\n//*                                                                 *   FILE 584\n//*      HOW TO USE :  1. FIND //INITIAL                            *   FILE 584\n//*                    2. FILL IN THE SYSUT1 CARD THE FIELDS        *   FILE 584\n//*                       NEWVOLUME  OLDVOLUME UNITADR SMS-BIT      *   FILE 584\n//*                       AND STYPE                                 *   FILE 584\n//*                                                                 *   FILE 584\n//*                       SMS-BIT :  1 = SMS MANAGED                *   FILE 584\n//*                                  0 = NOT SMS MANAGED            *   FILE 584\n//*                                                                 *   FILE 584\n//*                       STYPE   :  0 = NO BACKUP                  *   FILE 584\n//*                                  T = DAILY BACKUP               *   FILE 584\n//*                                  N = WEEKLY BACKUP              *   FILE 584\n//*                                  B = BOTH ( T + N )             *   FILE 584\n//*                                                                 *   FILE 584\n//*                       OLDVOLUME: + = NOVERIFY                   *   FILE 584\n//*                                                                 *   FILE 584\n//*                    3. SUBMIT THE JOB                            *   FILE 584\n//*                                                                 *   FILE 584\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUTOINIT": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00P\\x01\\x02!\\x9f\\x01\\x02!\\x9f\\x10S\\x02\\x8b\\x02\\x99\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-08-07T10:53:50", "lines": 651, "newlines": 665, "modlines": 0, "user": "RE03063"}, "text": "//KURZINIT JOB (DVRF,PS,,,,,,,00,4703F0000),\n//             'CILESIZ 218',\n//             CLASS=H,\n//             MSGCLASS=0,\n//             REGION=4M,\n//             NOTIFY=&SYSUID\n//* --------------------------------------------------------- *\n//*  PROGRAMMER : UGUR CILESIZ                                *\n//*  DATE       : 21.12.2001                                  *\n//*  CHANGED    : 02.05.2002                                  *\n//*  NEEDED     : RE03063.SLEEP.LOAD                          *\n//*  LIBRARIES    RE03063.XMITIP.EXEC                         *\n//* --------------------------------------------------------- *\n//*  DESCRIPTION: DASD MANAGEMENT IN BATCH                    *\n//*               *  VARY OFFLINE THE UNITS                   *\n//*               *  ICKDSF INIT DASD                         *\n//*               *  VARY ONLINE THE UNITS                    *\n//*               *. IDCAMS DEFINE VVDS                       *\n//*               *  IDCAMS DEFINE GDG'S FOR DISASTER REC.    *\n//* --------------------------------------------------------- *\n//*  HOW TO USE :  1. FIND //INITIAL                          *\n//*                2. FILL IN THE SYSUT1 CARD THE FIELDS      *\n//*                   NEWVOLUME  OLDVOLUME UNITADR SMS-BIT    *\n//*                   AND STYPE                               *\n//*                                                           *\n//*                   SMS-BIT :  1 = SMS MANAGED              *\n//*                              0 = NOT SMS MANAGED          *\n//*                                                           *\n//*                   STYPE   :  0 = NO BACKUP                *\n//*                              T = DAILY BACKUP             *\n//*                              N = WEEKLY BACKUP            *\n//*                              B = BOTH ( T + N )           *\n//*                                                           *\n//*                                                           *\n//*                   OLDVOLUME: + = NOVERIFY                 *\n//*                                                           *\n//*                3. SUBMIT THE JOB                          *\n//* --------------------------------------------------------- *\n//* --------------------------------------------------------- *\n//*  CALL ISPF IN BATCH-PROCESSING-MOD                        *\n//* --------------------------------------------------------- *\n//$ISPFBAT  PROC SOUT='*'\n//G         EXEC PGM=IKJEFT01\n//ISPLLIB   DD DISP=SHR,DSN=SYS1.SISPLOAD\n//ISPSLIB   DD DISP=SHR,DSN=SYS1.SISPSENU\n//ISPPLIB   DD DISP=SHR,DSN=SYS1.SISPPENU\n//ISPMLIB   DD DISP=SHR,DSN=SYS1.SISPMENU\n//ISPTLIB   DD DISP=SHR,DSN=SYS1.SISPTENU\n//ISPPROF   DD UNIT=SYSDA,SPACE=(TRK,(5,5,5)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)\n//ISPLOG    DD UNIT=SYSDA,SPACE=(TRK,(2,1)),\n//             DCB=(RECFM=FBA,LRECL=121,BLKSIZE=6413,DSORG=PS)\n//ISPLIST   DD UNIT=SYSDA,SPACE=(TRK,(2,1)),\n//             DCB=(RECFM=FBA,LRECL=121,BLKSIZE=6413,DSORG=PS)\n//SYSTSPRT  DD SYSOUT=&SOUT\n//SYSPRINT  DD SYSOUT=&SOUT\n//ENDE      PEND\n//* --------------------------------------------------------- *\n//*   GENERATE THE SYSIN CARD                                 *\n//* --------------------------------------------------------- *\n//INPUT   EXEC PGM=IEBGENER\n//* --------------------------------------------------------- *\n//*  DELETE REPORT DATA SET                                   *\n//* --------------------------------------------------------- *\n//DELDS     DD DSN=&SYSUID..AUTOINIT.REPORT,DISP=(MOD,DELETE),\n//             UNIT=3390,SPACE=(TRK,1)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DUMMY\n//SYSUT2    DD DISP=(NEW,PASS,DELETE),DSN=&&INPUT,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//SYSUT1    DD DATA,DLM=@#\n  * -------------------------------------------- *\n  *        Eingabe Maske                         *\n  * -------------------------------------------- *\n  *  NEWVOL | OLDVOL | UNITADR | SMS-BIT | STYPE *\n  * --------+--------+---------+---------+------ *\n  *         |        |         |         |       *\n     FSVK03   SK763A   763A        1        N\n     FSVK04   SK763B   763B        0        B\n     FSVK05   SK763C   763C        1        T\n@#\n//* --------------------------------------------------------- *\n//*  GENERATE KURZINIT REXX PROCEDURE                         *\n//* --------------------------------------------------------- *\n//RX00    EXEC PGM=IEBGENER\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DUMMY\n//SYSUT2    DD DISP=(NEW,PASS,DELETE),DSN=&&PDS(KURZINIT),\n//             UNIT=3390,SPACE=(TRK,(100,100,10)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)\n//SYSUT1    DD DATA,DLM=@#\n/* Rexx ---------------------------------------------------- *\n *                                                           *\n * Programmer : Ugur Cilesiz                                 *\n * Date       : 12.06.2002                                   *\n * Changed    :                                              *\n * Descript.  : A Rexx Utility To Initialize DASD with       *\n *              ICKDSF                                       *\n * Aufbau Member:                                            *\n *                                                           *\n           *  NEWVOL | OLDVOL | UNITADR | SMS-BIT | STYPE *\n           * --------+--------+---------+---------+------ *\n           *         |        |         |         |       *\n *                                                           *\n * --------------------------------------------------------- */\nTrace O\n/* --------------------------------------------------------- *\n *             Main Procedure                                *\n * --------------------------------------------------------- */\nDoIt:\n\nCall ReadIt\n\nExit\n\n/* --------------------------------------------------------- *\n *             Display ISPF Message                          *\n * --------------------------------------------------------- */\n\nIspMsg:\n\nParse Arg ZEDLMSG\nSay ZEDLMSG\n\nReturn\n\n/* --------------------------------------------------------- *\n *             Allocation For The JCL Cards                  *\n * --------------------------------------------------------- */\n\nMesaj  = Msg('ON')\n\nReadIt:\n\"EXECIO * DISKR INPUT (STEM Input.\"\nIf Input.0 = 0\n   Then Do\n   Call IspMsg \"There Is No Input In Member \"Mem\n   Exit\n   End\n\nDo i = 1 to Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\n   Call VaryUnit  Uadr.i OFFLINE\n   If i = Input.0\n      Then Queue \"\"\nEnd\n\n\n\"EXECIO * DISKW VARYOFF (FINIS\"\n\nDo  i = 1 To Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\n   Oldvol.i = Strip(Oldvol.i)\nIf Oldvol.i = '+'\n   Then Do\nQueue \" INIT UNIT(\"Uadr.i\") NOVERIFY VOLID(\"NewVol.i\")                 -\"\n        End\n   Else Do\nQueue \" INIT UNIT(\"Uadr.i\") VERIFY(\"OldVol.i\") VOLID(\"NewVol.i\")       -\"\n        End\nQueue \"      INDEX (0,1,74)                                -           \"\nQueue \"      VTOC(5,0,300)                                 -           \"\nQueue \"      MAP                                           -           \"\n\n/* --------------------------------------------------------- *\n *             Volume Is DFSMS Managed                       *\n * --------------------------------------------------------- */\nIf Sms.i = 1 Then Do\n   Queue \"      STORAGEGROUP                                  - \"\n   End\n\nQueue \"      NOCHECK                                       -           \"\nQueue \"      NOVALIDATE                               \"\nEnd\n\n\n\"EXECIO * DISKW ICKIN (FINIS\"\n\nReturn\nVaryUnit:\n Arg Unit OffOrOn\n\n/* --------------------------------------------------------- *\n *   PASS THE COMMAND LINES TO SDSF                          *\n * --------------------------------------------------------- */\n\n Queue  \" /V \"||Unit||\",\"||OffOrOn\n\nReturn 0\n/* --------------------------------------------------------- *\n *             End Of The Procedure                          *\n * --------------------------------------------------------- */\n@#\n//* --------------------------------------------------------- *\n//*  EXECUTE THE KURZINIT REXX PROCEDURE                      *\n//* --------------------------------------------------------- *\n//INIT    EXEC $ISPFBAT\n//INPUT     DD DISP=SHR,DSN=&&INPUT\n//ICKIN     DD DISP=(NEW,PASS,DELETE),DSN=&&ICKIN,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//VARYOFF   DD DISP=(NEW,PASS,DELETE),DSN=&&VARYOFF,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//SYSEXEC   DD DISP=(OLD,DELETE,DELETE),DSN=&&PDS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n  %KURZINIT\n/*\n//* --------------------------------------------------------- *\n//*  VARY OFFLINE TROUGH SDSF                                 *\n//* --------------------------------------------------------- *\n//VARYOFF EXEC PGM=SDSF,PARM='++60,228'\n//ISFOUT    DD SYSOUT=*\n//ISFIN     DD DISP=SHR,DSN=&&VARYOFF\n//* --------------------------------------------------------- *\n//*  WAIT FOR 10 SECS.                                        *\n//* --------------------------------------------------------- *\n//SLEEP   EXEC PGM=IKJEFT01,PARM='WAIT10'\n//STEPLIB   DD DISP=SHR,DSN=RE03063.SLEEP.LOAD\n//SYSTSPRT  DD SYSOUT=*\n//SYSPRINT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//* --------------------------------------------------------- *\n//*  EXECUTE ICKDSF FOR DASD INIT                             *\n//* --------------------------------------------------------- *\n//ICKDSF  EXEC PGM=ICKDSF\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DISP=(OLD,DELETE),DSN=&&ICKIN      *\n//* --------------------------------------------------------- *\n//*  GENERATE DEFVVDS REXX PROCEDURE                          *\n//* --------------------------------------------------------- *\n//RX01    EXEC PGM=IEBGENER       /* GENERATE REXX PROCEDURE         */\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DUMMY\n//SYSUT2    DD DISP=(NEW,PASS,DELETE),DSN=&&PDS(DEFVVDS),\n//             UNIT=3390,SPACE=(TRK,(100,100,10)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)\n//SYSUT1    DD DATA,DLM=@#\n/* Rexx ---------------------------------------------------- *\n *                                                           *\n * Programmer : Ugur Cilesiz                                 *\n * Date       : 12.06.2002                                   *\n * CHANGED    :                                              *\n * Descript.  : A Rexx Utility To Define VVDS For DASD       *\n *                                                           *\n * --------------------------------------------------------- */\nTrace O\n/* --------------------------------------------------------- *\n *             Main Procedure                                *\n * --------------------------------------------------------- */\nDoIt:\n\nCall ReadIt\n\nExit\n\n/* --------------------------------------------------------- *\n *             Display ISPF Message                          *\n * --------------------------------------------------------- */\n\nIspMsg:\n\nParse Arg ZEDLMSG\nSay ZEDLMSG\n\nReturn\n\n/* --------------------------------------------------------- *\n *             Allocation For The JCL Cards                  *\n * --------------------------------------------------------- */\n\nMesaj  = Msg('ON')\n\nReadIt:\n\"EXECIO * DISKR INPUT (STEM Input.\"\nIf Input.0 = 0\n   Then Do\n   Call IspMsg \"There Is No Input In Member \"Mem\n   Exit\n   End\n\nDo i = 1 to Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\n   Call VaryUnit  Uadr.i ONLINE\n   If i = Input.0\n      Then Queue \"\"\nEnd\n\n\n\"EXECIO * DISKW VARYON (FINIS\"\n\nDo  i = 1 To Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\nQueue \" DEFINE CLUSTER                                     - \"\nQueue \"      (NAME(SYS1.VVDS.V\"||Newvol.i||\")                      -   \"\nQueue \"      NONINDEXED                                    -           \"\nQueue \"      VOLUMES(\"||Newvol.i||\")                               -   \"\nQueue \"      CYLINDERS(10 1))                                          \"\nEnd\n\n\n\"EXECIO * DISKW DEFVVDS (FINIS\"\n\nReturn\nVaryUnit:\n Arg Unit OffOrOn\n\n/* --------------------------------------------------------- *\n *   PASS THE COMMAND LINES TO SDSF                          *\n * --------------------------------------------------------- */\n\n Queue  \" /V \"||Unit||\",\"||OffOrOn\n\nReturn 0\n/* --------------------------------------------------------- *\n *             End Of The Procedure                          *\n * --------------------------------------------------------- */\n@#\n//* --------------------------------------------------------- *\n//*  EXECUTE DEFVVDS REXX PROCEDURE                           *\n//* --------------------------------------------------------- *\n//DEFVVDS EXEC $ISPFBAT           /* EXECUTE REXX PROCEDURE          */\n//INPUT     DD DISP=SHR,DSN=&&INPUT\n//DEFVVDS   DD DISP=(NEW,PASS,DELETE),DSN=&&DEFVVDS,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//VARYON    DD DISP=(NEW,PASS,DELETE),DSN=&&VARYON,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//SYSEXEC   DD DISP=(OLD,DELETE,DELETE),DSN=&&PDS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n  %DEFVVDS\n/*\n//* --------------------------------------------------------- *\n//*  VARY ONLINE TROUGH SDSF                                  *\n//* --------------------------------------------------------- *\n//VARYON  EXEC PGM=SDSF,PARM='++60,228'\n//ISFOUT    DD SYSOUT=*\n//ISFIN     DD DISP=SHR,DSN=&&VARYON\n//* --------------------------------------------------------- *\n//*  WAIT FOR 10 SECS.                                        *\n//* --------------------------------------------------------- *\n//SLEEP   EXEC PGM=IKJEFT01,PARM='WAIT10'\n//STEPLIB   DD DISP=SHR,DSN=RE03063.SLEEP.LOAD\n//SYSTSPRT  DD SYSOUT=*\n//SYSPRINT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//* --------------------------------------------------------- *\n//*  EXECUTE IDCAMS FOR DEFINE VVDS                           *\n//* --------------------------------------------------------- *\n//DEFVVDS EXEC PGM=IDCAMS\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DISP=(OLD,DELETE),DSN=&&DEFVVDS *\n//* --------------------------------------------------------- *\n//*  GENERATE DEFGDG  REXX PROCEDURE                          *\n//* --------------------------------------------------------- *\n//RX02    EXEC PGM=IEBGENER       /* GENERATE REXX PROCEDURE         */\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DUMMY\n//SYSUT2    DD DISP=(NEW,PASS,DELETE),DSN=&&PDS(DEFGDG),\n//             UNIT=3390,SPACE=(TRK,(100,100,10)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)\n//SYSUT1    DD DATA,DLM=@#\n/* Rexx ---------------------------------------------------- *\n *                                                           *\n * Programmer : Ugur Cilesiz                                 *\n * Date       : 12.06.2002                                   *\n * CHANGED    :                                              *\n * Descript.  : A Rexx Utility To Define GDG  For DASD       *\n *                                                           *\n * --------------------------------------------------------- */\nTrace O\n/* --------------------------------------------------------- *\n *             Main Procedure                                *\n * --------------------------------------------------------- */\nDoIt:\n\nCall ReadIt\n\nExit\n\n/* --------------------------------------------------------- *\n *             Display ISPF Message                          *\n * --------------------------------------------------------- */\n\nIspMsg:\n\nParse Arg ZEDLMSG\nSay ZEDLMSG\n\nReturn\n\n/* --------------------------------------------------------- *\n *             Allocation For The JCL Cards                  *\n * --------------------------------------------------------- */\nMesaj  = Msg('ON')\n\nReadIt:\n\"EXECIO * DISKR INPUT (STEM Input.\"\nIf Input.0 = 0\n   Then Do\n   Call IspMsg \"There Is No Input In Member \"Mem\n   Exit\n   End\n\n\nDo  i = 1 To Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\n   Newvol.i = Strip(Newvol.i)\n   Stype.i  = Strip(Stype.i)\n   If Stype.i <> 0\n      Then Do\n           If Stype.i = 'B'\n              Then Do\n                   Stype.i = 'T'\nQueue \" DEFINE GDG                                         - \"\nQueue \"      (NAME(FB3FNOT.T.\"||Stype.i||Newvol.i||\")              -   \"\nQueue \"      SCRATCH NOEMPTY LIMIT(255))                               \"\n                   Stype.i = 'N'\nQueue \" DEFINE GDG                                         - \"\nQueue \"      (NAME(FB3FNOT.T.\"||Stype.i||Newvol.i||\")              -   \"\nQueue \"      SCRATCH NOEMPTY LIMIT(255))                               \"\n                   End\n              Else Do\nQueue \" DEFINE GDG                                         - \"\nQueue \"      (NAME(FB3FNOT.T.\"||Stype.i||Newvol.i||\")              -   \"\nQueue \"      SCRATCH NOEMPTY LIMIT(255))                               \"\n                   End\n           End\n      Else Queue \" SET LASTCC=0\"\nEnd\n\n\n\"EXECIO * DISKW GDGDEF (FINIS\"\n\nReturn\n/* --------------------------------------------------------- *\n *             End Of The Procedure                          *\n * --------------------------------------------------------- */\n@#\n//* --------------------------------------------------------- *\n//*  EXECUTE DEFVVDS REXX PROCEDURE                           *\n//* --------------------------------------------------------- *\n//DEFGDG  EXEC $ISPFBAT           /* EXECUTE REXX PROCEDURE          */\n//INPUT     DD DISP=SHR,DSN=&&INPUT\n//GDGDEF    DD DISP=(NEW,PASS,DELETE),DSN=&&GDGDEF,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//SYSEXEC   DD DISP=(OLD,DELETE,DELETE),DSN=&&PDS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n  %DEFGDG\n/*\n//* --------------------------------------------------------- *\n//*  EXECUTE IDCAMS FOR DEFINE VVDS                           *\n//* --------------------------------------------------------- *\n//GDGDEF  EXEC PGM=IDCAMS\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DISP=(OLD,DELETE),DSN=&&GDGDEF\n//*\n//* --------------------------------------------------------- *\n//*  GENERATE REPORT  REXX PROCEDURE                          *\n//* --------------------------------------------------------- *\n//RX03    EXEC PGM=IEBGENER       /* GENERATE REXX PROCEDURE         */\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DUMMY\n//SYSUT2    DD DISP=(NEW,PASS,DELETE),DSN=&&PDS(REPORT),\n//             UNIT=3390,SPACE=(TRK,(100,100,10)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)\n//SYSUT1    DD DATA,DLM=@#\n/* Rexx ---------------------------------------------------- *\n *                                                           *\n * Programmer : Ugur Cilesiz                                 *\n * Date       : 12.06.2002                                   *\n * CHANGED    :                                              *\n * Descript.  : Report erstellen und f}r                     *\n *              die e-mail- Funktion  aufbereiten            *\n * --------------------------------------------------------- */\nTrace O\n/* --------------------------------------------------------- *\n *             Main Procedure                                *\n * --------------------------------------------------------- */\nDoIt:\n\nCall ReadIt\n\nExit\n\n/* --------------------------------------------------------- *\n *             Display ISPF Message                          *\n * --------------------------------------------------------- */\n\nIspMsg:\n\nParse Arg ZEDLMSG\nSay ZEDLMSG\n\nReturn\n\n/* --------------------------------------------------------- *\n *             Allocation For The JCL Cards                  *\n * --------------------------------------------------------- */\nMesaj  = Msg('ON')\n\nReadIt:\n\"EXECIO * DISKR INPUT (STEM Input.\"\nIf Input.0 = 0\n   Then Do\n   Call IspMsg \"There Is No Input In Member \"Mem\n   Exit\n   End\n\nGetSMFId:\n  Cvt      = C2d(Storage(10,4))\n  Smca     = Storage(D2x(Cvt + 196),4)\n  Smca     = C2d(Bitand(Smca,'7FFFFFFF'X))\n  SMFID    = Strip(Storage(D2x(Smca + 16),4),T)\n  Node     = Sysvar('SYSNODE')\nGetUser:\n  If Userid() = 'RE03063'\n     Then Do\n          UserName = 'Ugur Cilesiz'\n          email    = 'Ugur.Cilesiz@Rwesystems.com'\n          telnr    = '+49-2181-285-218'\n          End\n  If Userid() = 'R255386'\n     Then Do\n          UserName = 'Matthias Dieck'\n          email    = 'Matthias.Dieck@Rwesystems.com'\n          telnr    = '+49-2181-285-223'\n          End\n  If Userid() = 'R404641'\n     Then Do\n          UserName = 'Wolfgang Franke'\n          email    = 'Wolfgang.Franke@Rwesystems.com'\n          telnr    = '+49-2181-285-210'\n          End\nFirstLoop = 0\nDo  i = 1 To Input.0\n   If Index(Input.i,'*') > 0 | Input.i = ''\n      Then Iterate\n   Parse Var Input.i Newvol.i Oldvol.i Uadr.i Sms.i Stype.i\n   Newvol.i = Strip(Newvol.i)\n   Stype.i  = Strip(Stype.i)\n   If Stype.i  = 'B'\n      Then StypeText.i = \"NOTFALL+TAEGLICH \"\n   If Stype.i  = 'N'\n      Then StypeText.i = \"NOTFALL          \"\n   If Stype.i  = 'T'\n      Then StypeText.i = \"TAEGLICH         \"\n   If Stype.i  = '0'\n      Then StypeText.i = \"Keine Sicherung  \"\n   If FirstLoop = 0\n      Then Do\n           FirstLoop = 1\n           Queue \"Hallo !\"\n           Queue \"                                                \"\n           Queue \"                                                \"\n           Queue \"                                                \"Date()\n           Queue \"                                                \"Time()\n           Queue \"                                                \"\n           Queue \"Auf der LPAR \"SMFId\n           Queue \"wurde(n) folgende(n) Platte(n) angelegt:\"\n           Queue \"                                                \"\n           Queue \"                                                \"\n           Queue \"                                                \"\n           Queue \"+--------+-------------------------------------+-----------+\"\n           Queue \"| Volser | Sicherung                           | Kontrolle |\"\n           Queue \"+--------+-------------------------------------+-----------+\"\n           End\n           Queue \"| \"Newvol.i\" | \"StypeText.i\"                   |           |\"\n           Queue \"+--------+-------------------------------------+-----------+\"\nEnd\n           Queue \"                                                \"\n           Queue \"Mit freundlichen Gruessen                       \"\n           Queue \"                                                \"\n           Queue \" \"Username\n           Queue \" e-mail:\"email\n           Queue \" Tel.:  \"telnr\n\n\"EXECIO * DISKW REPORT (FINIS\"\n\nReturn\n/* --------------------------------------------------------- *\n *             End Of The Procedure                          *\n * --------------------------------------------------------- */\n@#\n//* --------------------------------------------------------- *\n//*  EXECUTE REPORT  REXX PROCEDURE                           *\n//* --------------------------------------------------------- *\n//REPORT  EXEC $ISPFBAT           /* EXECUTE REXX PROCEDURE          */\n//INPUT     DD DISP=SHR,DSN=&&INPUT\n//REPORT    DD DISP=(NEW,CATLG,DELETE),DSN=&SYSUID..AUTOINIT.REPORT,\n//             UNIT=3390,SPACE=(TRK,(100,100)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)\n//SYSEXEC   DD DISP=(OLD,DELETE,DELETE),DSN=&&PDS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n  %REPORT\n/*\n//PRINT   EXEC PGM=IEBGENER\n//*\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD DISP=SHR,DSN=&SYSUID..AUTOINIT.REPORT\n//SYSUT2    DD SYSOUT=(Y,,PR11),DEST=KOB\n//SYSIN     DD *\n/*\n//*   Hier ist Schluss ||\n//\n//MAIL    EXEC PGM=IKJEFT1B,DYNAMNBR=50\n//REPORT    DD DISP=SHR,DSN=&SYSUID..AUTOINIT.REPORT\n//SYSEXEC   DD DISP=SHR,DSN=RE03063.XMITIP.EXEC\n//SYSPRINT  DD  SYSOUT=*\n//MSGDS     DD *\nHallo\n\nDie im Anhang aufgelisteten Platten wurden\nneu angelegt.\n\n|| Dies ist nur ein Test ||\n/*\n//ADRDS     DD *\n* Mail Addressen Storage- Management im RZ RWE Systems Neurath\nCC  Ugur.Cilesiz@Rwesystems.com\nCC  Hans.Wurst@Rwesystems.com\n/*\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD   *\n%xmitip * +\n        Msgdd MSGDS +\n        From RE03063@fri.energie.rwe.de +\n        AddressfileDD ADRDS +\n        Subject 'Neue Platten |||' +\n        File REPORT +\n        Filename neue.platte.pdf +\n        Format PDF////\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT584/FILE584.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT584", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}