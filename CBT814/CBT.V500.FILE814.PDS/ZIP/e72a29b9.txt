A software card reader for MVS

Occasionally, we have been bitten by partial or complete failures
of ACF/VTAM during its start-up.  Fortunately we have always
been able to circumvent the problem and bring the system up
without too much trouble, but we are concerned by the prospect
of VTAM being so disabled that we would be unable to get around
the failure without a stand-alone restore from the pack back-ups.

The basic idea is to have a started task issue a series of WTOR
(write to operator with reply) messages.  As each reply is
received, the program writes it to an opened internal reader.
When a JCL NULL (‘//’) is returned to the program, the internal
reader is closed and the started task ends.  The  batch job you
have ‘submitted’ will then execute on its own.

For convenience, the program will translate lower case characters
to upper case for all replies beginning with ‘//’.  SYSIN data will
be unaffected.  Remember not to go past column 71 for JCL cards.
Also, some SYSIN data may require a reply in the form R nn,
'xxxxxxxxxx' (if your data needs a leading blank).

Those of you running CA-TOP SECRET will have to issue the last
continuation card of the JOB card in the format:
    // PASSWORD=XXXXXXXX,USER=YYYYYYYY

I suspect that RACF and ACF2 will affect the system in a similar
way.

Naturally, once the system is back up you will want to change
your password.

The started task is invoked using the MVS command, ‘S CONRDR’.
JCL for the started task must be in your JES2 procedure library
concatenation.  Additionally, I suggest that you eliminate the
STEPLIB JCL statement from my example and place the program
in SYS1.LINKLIB.  I would also suggest that the procedure resides
in SYS1.PROCLIB, to maximise its availability.

This program requires no special APF authorisation.

STARTED TASK JCL

//CONRDR   PROC
//*
//STEP010  EXEC PGM=CONRDR
//STEPLIB   DD  DSN=Z03AF.TEST.LOADLIB,DISP=SHR
//*
//SYSPRINT  DD  SYSOUT=V
//SYSUDUMP  DD  SYSOUT=V
//*
//OUTFILE   DD  SYSOUT=(A,INTRDR)
//*


PROGRAM CODE

CONRDR   CSECT
         STM   R14,R12,12(R13)       ENTRY LINKAGE AND ADDRESSABILITY
         LR    R2,R15
         USING CONRDR,R2
         LA    R11,SAVE
         ST    R13,4(R11)
         ST    R11,8(R13)
         LR    R13,R11
         OPEN  (OUTFILE,OUTPUT)      OPEN INTERNAL READER FOR OUTPUT
WTORLOOP SR    R3,R3
         ST    R3,ECBREPLY           ZERO THE ECB
         MVC   REPLY(80),BLANKS      CLEAR THE REPLY AREA
*  ISSUE WTO WITH REPLY
         WTOR 'ENTER JCL/SYSIN CARD--USE "//" TO CAUSE JOB SUBMISSION',X
               REPLY,80,ECBREPLY,ROUTCDE=1
*  WAIT FOR REPLY
         WAIT  ECB=ECBREPLY
         CLC   REPLY(2),=CL2'//'     TEST FOR REPLY BEING A JCL CARD
         BNE   WRITEOUT              BRANCH IF NOT A JCL CARD
         TR    REPLY(80),UPCASE      TRANSLATE LOWER CASE TO UPPER CASE
WRITEOUT PUT OUTFILE,REPLY           WRITE REPLY TO THE INTERNAL READER
         CLC   REPLY(80),ENDJCL      TEST FOR END OF JOB CARD
         BNE   WTORLOOP              LOOP IF NOT END OF JOB
         CLOSE (OUTFILE)             OTHERWISE CLOSE INTRDR
*  ISSUE JOB STATUS MESSAGE AND RETURN TO OPERATING SYSTEM
EXIT     WTO   'BATCH JOB HAS BEEN SUBMITTED',ROUTCDE=11
         WTO   '                            ',ROUTCDE=11
         WTO   'HAVE A NICE DAY',ROUTCDE=11
         L     R13,4(R13)            EXIT LINKAGE
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
*  DATA AREAS
OUTFILE  DCB   MACRF=(PM),DDNAME=OUTFILE,BLKSIZE=80,RECFM=F,DSORG=PS
SAVE     DS    18F                   SAVE AREA
ECBREPLY DS    F                     ECB FOR WTOR
BLANKS   DC    CL80' '               SPACES
ENDJCL   DS    0CL80                 END OF JOB CARD
         DC    CL2'//'
         DC    CL78' '
REPLY    DS    CL80                  REPLY AREA
UPCASE   DS    0CL256
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'404142434445464748494A4B4C4D4E4F'
         DC    XL16'505152535455565758595A5B5C5D5E5F'
         DC    XL16'606162636465666768696A6B6C6D6E6F'
         DC    XL16'707172737475767778797A7B7C7D7E7F'
         DC    XL16'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         LTORG
         END


David Saunders
Senior Systems Engineer
University of Virginia (USA) © University of Virginia 1989

