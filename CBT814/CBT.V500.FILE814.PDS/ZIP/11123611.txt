Loading subroutines in REXX


Problem addressed

The REXX language provides a large library of functions. This
library includes a function to invoke a program using the
REXX calling sequence (the invoked program receives two
parameters: the address of the parameter, and the length of the
parameter). In the June 1990 issue of MVS Update, a program
to invoke (load) a program using the standard MVS calling
sequence was described (REXCALL program). The
LOADSUB function complements this previous program: it
invokes a subroutine using the standard MVS calling sequence
for a subroutine, ie register 1 on entry contains the address of a
list of pointers, each pointer being the address of the
corresponding parameter. A typical use of LOADSUB is as a
test driver.


Solution

The LOADSUB function loads the specified subroutine (which
should be linked with the REUS attribute, if it is to remain in
storage). The parameter list containing those values received
from the called subroutine is stored as the REXX variable
'_PARM'. This enables subroutines that have an unclean
linkage to be processed (eg subroutines that alter the parameter
list).


Calling sequence

      frc = LOADSUB(subroutinename[,parm]...);

where frc is returned with the function return code (decimal),
subroutinename is the name of the subroutine to be invoked
(the subroutine is loaded with the LOAD macro using the
standard program library sequence), and parm is a parameter to
be passed to the subroutine. The 'end-of-list' flag is
automatically set for the last parameter. Multiple parameters
can be specified. The parameters are passed exactly as they are
received, eg a full-word parameter value must be contained in a
4-byte variable (if necessary, the appropriate REXX function
(D2C, X2C, etc) must be used to convert the parameter to the
required form).

The REXX variable '_PARM' is returned with the parameter
list (which contained the pointers to the parameters) as it exists
after returning from the invoked subroutine.

The standard REXX function value -3 indicates that REXX
detected an error condition while trying to perform the function
(eg the function could not be located). Any other function
value is the return code from the loaded (and executed)
subroutine.


Example

/* REXX - LOADSUB test */
frc = LOADSUB("ALPHA",4,p2);
If frc < 0 THEN EXIT;
/* parm 2 */
pp2 = SUBSTR(_PARM,5,4);
xp2 = C2X(pp2); /* address pointer */
data = STORAGE(xp2,4);

This example invokes the subroutine ALPHA with two
parameters: the character 4, and a dummy parameter p2 (which
is returned with the address of a data word); the data word is
stored in the variable data.


LOADSUB program code

LOADSUB  TITLE 'REXX LOAD subprogram function'
* Function:
*  Load (and execute) subroutine and pass specified parameters to it.
*  The generated parameter list (after CALL) is returned as the
*  REXX variable _PARM.
**
* Calling sequence:
* >>---LOADSUB(-pgmname----------------+-)---<<
*                       A              !
*                       +- ,parameter -+
**
* Function value:
*  normal return:
*   subroutine return code
*  error return:
*   -1 - program name error
*   -2 - program load error
*   -4 - too many parameters
*   -5 - parameter length error
**
LOADSUB  CSECT
* initialize addressing
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save area)
         B     SA_END             jump over save area
SA       DS    18A                save area
SA_END   DS    0H
         LR    R9,R0             A(Environment Block)
         USING EFPL,R1
         L     R2,EFPLEVAL       PTR(Evaluation Block)
         L     R11,0(R2)         A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG        A(parsed Argument List)
         USING ARGTABLE_ENTRY,R10
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get "pgmname"
         LM    R3,R4,0(R10)
* R3: A(argument), R4: L(argument)
         MVC   ERRCODE,=CL2'-1'   preset return code (=error)
         LTR   R4,R4
         BM    ERROR              "pgmname" missing
         BZ    ERROR              null "string"
         CH    R4,=H'8'
         BH    ERROR              name too long
         BCTR  R4,0
         MVC   PGMNAME(0),0(R3)
         EX    R4,*-6
* get "parms"
         LA    R2,0               parameter counter
         LA    R8,PARMADDR-4
         LA    R7,PARMDATA
A110     DS    0H
         LA    R10,8(R10)
         LM    R5,R6,0(R10)
         LTR   R6,R6
         BM    A100               no "parameter"
         MVC   ERRCODE,=CL2'-4'   preset RC (N(parms))
         C     R2,=A(NPARM*4)
         BE    ERROR              too many parameters
         MVC   ERRCODE,=CL2'-5'   preset RC (Size(parms))
         LA    R1,0(R6,R7)        A(end of current parameter)
         C     R1,=A(EPARM)
         BH    ERROR              parameter length error
         BCTR  R6,0               length code
         MVC   0(0,R7),0(R5)      move data
         EX    R6,*-6
         ST    R7,4(R8)           set parm address
         LA    R8,4(R8)           update parm ptr
         LA    R7,1(R6,R7)        update address ptr
         LA    R2,4(R2)           update parameter length (counter)
         B     A110
A100     OI    0(R8),X'80'        set ho flag
* load program
* create BLDL entry
         MVC   ERRCODE,=CL2'-2'   preset load error
         MVC   BLDLNAME,PGMNAME
         BLDL  0,BLDLLIST
* test return code
         LTR   R15,R15
         BNZ   ERROR
         LOAD  DE=BLDLNAME        load program
* R0: entry-point address
         LR    R15,R0             set entry point address
         L     R1,APGMPARM        address of pointer to parameter
         BASSM R14,R15            link to program
         BASR  R12,0              re-establish addressing
         USING *,R12
* store return code from program
         CVD   R15,D
         OI    D+7,X'0F'
         UNPK  EVALBLOCK_EVDATA(4),D
         LA    R1,4
         ST    R1,EVALBLOCK_EVLEN   entry size
* return program parameter as variable (_PARM)
         L     R3,APGMPARM        address of pointer to parameter
* R2: size of parameter
* Set REXX variable
*  <VN>: variable name
*  R3: A(variable data)
*  R2: L(variable data)
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         LA    R0,L'VN
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVSTORE   set store flag
         ST    R3,SHVVALA         A(data)
         ST    R2,SHVVALL         L(data)
         LOAD  EP=IRXEXCOM
         LR    R15,R0
         LR    R0,R9              A(environment block)
         BAL   R1,SETVAR1
         DC    AL4(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK)
SETVAR1  OI    *-4,X'80'
         BASSM R14,R15            invoke IRXEXCOM
EOJ      DS    0H                 job end
         L     R13,4(R13)         restore A(old save area)
         RETURN (14,12),RC=0
ERROR    BASR  R15,0
         USING *,R15
         LA    R1,2               length
         ST    R1,EVALBLOCK_EVLEN  entry size
         MVC   EVALBLOCK_EVDATA(2),ERRCODE
         L     R13,4(R13)         restore A(old save area)
         RETURN (14,12),RC=0
         DROP  R15
ERRCODE  DS    H
VN       DC    C'_PARM'
PGMNAME  DC    CL8' '
D        DS    0D,PL8
         LTORG
APGMPARM DC    A(PARMADDR)
NPARM    EQU   16                 maximum no of parameters
LPARM    EQU   256                maximum parameter length
PARMADDR DS    (NPARM)A
PARMDATA DS    XL(LPARM)
EPARM    EQU  *                  end of parameter list
BLDLLIST DS    0F
         DC    H'1'               one entry
         DC    H'58'              entry length
BLDLNAME DS    CL8
         ORG   BLDLNAME+58
IRX_IRXEXCOM DC CL8'IRXEXCOM'
IRX_SHVBLOCK DC (SHVBLEN)X'0'
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         IRXSHVB
         END


A S Rudd
Technical Consultant (Germany)                              c A S Rudd 1992

