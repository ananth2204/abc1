Useful routines for the systems programmer

This is a collection of Assembler language routines to make life
easier for the systems programmer.  These routines have been
compiled by me during my years as a systems programmer.
They have come from my own research, from public domain
software, and from friends.  They have proven very useful over
the years.

As a warning, these routines may or may not execute
successfully in MVS/XA and/or MVS/ESA environments.  I
leave it to the user to determine their applicability to a given
environment.


LOCATING MODULES IN THE LPA

The first routine invokes an MVS function to locate a module
on the active LPA queue by searching the Contents Directory
Entry (CDE) chain.  This can be used to determine if a module
has been loaded into the MLPA or FLPA, or dynamically
loaded by a utility such as OMEGAMON, as well as retrieving
module information like load and entry points.  Register usage
is listed in the comments.  Note that the CDE search routine
returns to the address in register 14 if the module was found
and returns 4 bytes past the register 14 address if the module
was not found.  If the module was found, register 10 will
contain the address of the CDE.


***********************************************************************
*        IEAQCDSR SCANS THE CONTENTS DIRECTORY FOR AN ENTRY           *
*        REPRESENTING THE MODULE NAME REQUESTED BY THE CALLER         *
*        REGS      ON ENTRY                  ON RETURN                *
*        R0        IRRELEVANT                LEFT HALF MODULE NAME    *
*        R1            "                     RIGHT HALF MODULE NAME   *
*        R2-R7         "                     UNCHANGED                *
*        R8        A(ACTIVE LPA QUEUE HDR)       "                    *
*        R9        A(SEARCH ARGUMENT)            "                    *
*        R10       IRRELEVANT                A(CDE-IF FOUND)          *
*        R11-R13       "                     UNCHANGED                *
*        R14       A(RETURN POINT)              "                     *
*        R15       A(IEAQCDSR)               CHANGED (USED FOR BASE)  *
*        ON EXIT, IF MODULE NOT FOUND, RETURNS TO THE CALLER 4 BYTES  *
*        BEYOND THE RETURN ADDRESS INDICATED BY R14.                  *
***********************************************************************
         L     R15,CVTPTR              LOAD A(CVT)
         L     R8,CVTQLPAQ-CVT(,R15)   LOAD A(ACTIVE LPA QUEUE HEADER)
         LA    R9,PDS2NAME             LOAD NAME OF MODULE
         L     R15,CVTQCDSR-CVT(,R15)  LOAD A(CDE SEARCH ROUTINE)
         BALR  R14,R15                 INVOKE CDE SEARCH ROUTINE
         B     MODFOUND                +0 MODULE FOUND, END SEARCH
         B     MODNOTFN                +4 MODULE NOT FOUND
MODFOUND EQU   *
         USING CDENTRY,R10             ESTABLISH ADDRESSABILITY TO CDE
         .
         .
         .
MODNOTFN EQU   *
         .
         .
         .
PDS2NAME DC    CL8'IEEMB860'           MEMBER NAME FROM PDS DIRECTORY
         CVT   DSECT=YES
         IHACDE


SEARCHING THE LPA DIRECTORY

The following routine searches the LPA directory for the
existence of a module.  This Link Pack Directory Entry
(LPDE) search routine and the CDE search routine above can
be combined to locate the existence of a module in the MLPA,
FLPA, or PLPA.  It employs the same register 14 return
technique as the CDE search routine.  If the module is found,
register 0 will contain the address of the LPDE.


***********************************************************************
*        IEAVVMSR SCANS THE LINK PACK DIRECTORY FOR AN ENTRY          *
*        REPRESENTING THE MODULE NAME REQUESTED BY THE CALLER         *
*        REGS         ON ENTRY                 ON RETURN              *
*        R0           LEFT HALF MODULE NAME    A(LPDE-IF FOUND)       *
*        R1           RIGHT HALF MODULE NAME   UNCHANGED              *
*        R2           IRRELEVANT                   "                  *
*        R3           A(CVT)                       "                  *
*        R4-R5        IRRELEVANT                   "                  *
*        R6               "                    CHANGED (USED AS BASE) *
*        R7               "                    UNCHANGED              *
*        R8-R9            "                    UNPREDICTABLE          *
*        R10-R13          "                    UNCHANGED              *
*        R14          A(RETURN POINT)              "                  *
*        R15          A(IEAVVMSR)                  "                  *
*        ON EXIT, IF MODULE NOT FOUND, RETURNS TO THE CALLER 4 BYTES  *
*        BEYOND THE RETURN ADDRESS INDICATED BY R14.                  *
***********************************************************************
         L     R0,PDS2NAME             LOAD 1ST HALF OF MODULE NAME
         L     R1,PDS2NAME+4           LOAD 2ND HALF OF MODULE NAME
         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTLPDSR-CVT(,R15)  LOAD A(LPDE SCAN ROUTINE)
         BALR  R14,R15                 GO SEARCH FOR THE MODULE
         B     MODFOUND                +0 MODULE FOUND, END SEARCH
         B     MODNOTFN                +4 MODULE NOT FOUND
MODFOUND LR    R2,R0                   SAVE A(LPDE)
         USING LPDE,R2                 ESTABLISH ADDRESSABILITY TO LPDE
         .
         .
         .
MODNOTFN EQU   *
         .
         .
         .
PDS2NAME DC    CL8'IEEMB860'           MEMBER NAME FROM PDS DIRECTORY
         CVT   DSECT=YES
         IHALPDE


CHANGING AN ADDRESS SPACE'S DISPATCHING PRIORITY

The next routine will invoke an MVS function to change the
dispatching priority (CHAP) of an Address Space Control
Block (ASCB).  Register conventions are in the comments in
the code.  This ASCBCHAP routine runs in 31-bit mode in
MVS/XA and above.  The SRM user control block (OUCB)
must also be referenced to turn off a bit indicating that the
ASCB is in the Automatic Priority Group (APG) so that the
SRM will not place the address space back at the previous
priority.


***********************************************************************
*        IEAVEAC0 (ASCBCHAP) REQUEUES AN ASCB AT A NEW DISPATCHING    *
*        PRIORITY.  IT RUNS IN 31 BIT MODE.                           *
*        REGS      ON ENTRY                  ON RETURN                *
*        R0        ENTRY CODE                UNPREDICTABLE            *
*        R1        A(PARAMETER LIST)             "                    *
*        R2-R13    IRRELEVANT                UNCHANGED                *
*        R14       A(RETURN POINT)               "                    *
*        R15       A(IEAVEAC0)               RETURN CODE              *
***********************************************************************
         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTTCBP-CVT(,R15)   LOAD A(TCBWORDS)
         L     R15,12(,R15)            LOAD A(ASCB OLD)
         ST    R15,MYASCB              SAVE ASCB ADDRESS
         L     R1,=A(OUCB31+X'80000000') LOAD A(31 BIT ROUTINE)
         BSM   R0,R1                   BRANCH TO ROUTINE IN 31 BIT MODE
OUCB31   L     R11,ASCBOUCB-ASCB(,R15) LOAD A(OUCB)
         MODESET KEY=ZERO,MODE=SUP     SET SUPVSR STATE KEY ZERO
         NI    OUCBAFL-OUCB(R11),255-OUCBAPG TURN OFF APG BIT
* ABOVE IS SO SRM WILL NOT RESET OUR PRIORITY RIGHT BACK AGAIN
* OUCB EXISTS ABOVE THE LINE IN MVS/XA AND ABOVE
         SLR   R0,R0                   CLEAR R0 FOR ASCBCHAP ENTRY CODE
         LA    R1,PARMFLD              LOAD A(PARM FIELD)
         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTVEAC0-CVTMAP(,R15) LOAD A(ASCBCHAP ROUTINE)
         BALR  R14,R15                 INVOKE ASCBCHAP ROUTINE
         LR    R2,R15                  SAVE RETURN CODE
         MODESET KEY=NZERO,MODE=PROB   SET PROBLEM STATE BACK
         LA    R1,BACK24               LOAD A(24 BIT ROUTINE)
         BSM   R0,R1                   BRANCH TO ROUTINE IN 24 BIT MODE
BACK24   LTR   R2,R2                   CHECK ASCBCHAP RETURN CODE
         BNZ   ERROR                   IF NOT ZERO, HANDLE ERROR
         .
         .
         .
ERROR    EQU   *
         .
         .
         .
PARMFLD  DC    X'8000'
PRIORITY DC    H'255'
MYASCB   DC    A(0)
         CVT   DSECT=YES
         IHAASCB DSECT=YES
         IRAOUCB DSECT=YES


LOCATING THE JOB CONTROL TABLE

This next piece of code can be used to locate the MVS Job
Control Table (JCT) control block which contains pointers to
step-related control blocks (SCTs) and accounting information
(ACTs) as well as SMF-related information.  Note that, in the
control block chain, the JCT pointer in the job step control
block (JSCB) points to a 16-byte JCT prefix after which the
JCT proper begins.


         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTTCBP-CVT(,R15)   LOAD A(TCB WORDS)
         L     R15,4(,R15)             LOAD A(TCB OLD)
         L     R15,TCBJSCB-TCB(,R15)   LOAD A(JSCB)
         L     R15,JSCBJCT-JSCB(,R15)  LOAD A(JCT-16)
         L     R11,16(,R15)            LOAD A(TRUE JCT)
         USING INJMJCT,R11             ESTABLISH ADDRESSABILITY TO JCT
         .
         .
         .
         CVT   DSECT=YES
         IKJTCB DSECT=YES
         IEZJSCB
JCT      DSECT
         IEFAJCTB

This routine can be used to locate the MVS JCT in an
MVS/XA or above system when the option is chosen to allow
Scheduler Work Area (SWA) control blocks to reside above the
16-megabyte line.  When this is allowed the JCT value in the
JSCB is a token used by the SWA manager rather than a 24-bit
address.


         L     R2,CVTPTR               LOAD A(CVT)
         L     R2,CVTTCBP-CVT(,R2)     LOAD A(TCB WORDS)
         L     R2,4(,R2)               LOAD A(TCB OLD)
         L     R2,TCBJSCB-TCB(,R2)     LOAD A(JSCB)
         USING IEZJSCB,R2              ESTABLISH ADDRESSABILITY TO JSCB
         LA    R15,EPA                 LOAD A(EXTERNAL PARM AREA)
         USING ZB505,R15               ESTABLISH ADDRESSABILITY SXXX
         XC    ZB505(ZB505LEN),ZB505   CLEAR THE AREA
         MVC   SWVA,JSCBJCTA           MOVE A(JCT) INTO AREA
         DROP  R15
         ST    R15,SMPTR               SAVE A(EXTERNAL PARM AREA)
         MVC   SMPARMS(SMLENGTH),SWAREQ1 INITIALIZE PARM LIST
         SWAREQ FCODE=RL,EPA=(15),MF=(E,SMPARMS) CALL SWA MGR LOCATE
         LTR   R15,R15                 WERE WE SUCCESSFUL?
** R15 = 00 - SUCCESSFUL
**       04 - INVALID FUNCTION CODE
**       08 - INVALID SELF-POINTER IN BLOCK PREFIX
**       12 - BLOCK NOT WRITTEN TO SWA YET
**       16 - INVALID BLOCK LENGTH
**       20 - INVALID COUNT FIELD
**       28 - INVALID BLOCK ID
**       36 - BLOCK ADDRESS TRANSLATION ERROR
**       56 - CONDITIONAL GETMAIN FAILURE
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         L     R2,SWBLKPTR             ELSE GET A(JCT)
         USING INJMJCT,R2              ESTABLISH ADDRESSABILITY TO JCT
         .
         .
         .
SWAREQ1  SWAREQ MF=L                   LIST FORM SWAREQ MACRO
SMLENGTH EQU   *-SWAREQ1               LENGTH OF LIST FORM SWAREQ MACRO
WORKAREA DSECT
SMPTR    DS    F
EPA      DS    CL(ZB505LEN)            AREA FOR SWA EPA LOCATE MODE
SMPARMS  DS    CL(SMLENGTH)            AREA FOR LIST FORM SWAREQ MACRO
         CVT   DSECT=YES
         IKJTCB DSECT=YES
         IEZJSCB
JCT      DSECT
         IEFAJCTB
         IEFZB505
ZB505LEN EQU   *-ZB505                 LENGTH OF SWA EPA MAPPING


LOCATING THE LINKAGE CONTROL TABLE

This next piece of code can be used to locate the MVS Linkage
Control Table (LCT) control block which contains information
used by the initiator when creating a job step task to run.  Note
that the LCT is located by chaining through Task Control
Blocks (TCBs) to the initiating TCB.


         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTTCBP-CVT(,R15)   LOAD A(TCB WORDS)
         L     R15,12(,R15)            LOAD A(ASCB OLD)
         L     R15,ASCBRCTP-ASCB(,R15) LOAD A(RCT TCB)
         L     R15,TCBLTC-TCB(,R15)    LOAD A(DUMP TASK TCB)
         L     R15,TCBLTC-TCB(,R15)    LOAD A(INIT TASK TCB)
         L     R11,TCTGRS4-TCB(,R15)   LOAD A(LCT)
         USING LCTQDRTY,R11            ESTABLISH ADDRESSABILITY TO JCT
         CLC   LCTLABEL,=C'ENDOFLCT'   CHECK LCT EYECATCHER
         BNE   NOTLCT                  NOT LCT, HANDLE ERROR
         .
         .
         .
NOTLCT   EQU   *
         .
         .
         .
         CVT   DSECT=YES
         IHAASCB DSECT=YES
         IKJTCB DSECT=YES
LCT      DSECT
         IEFALLCT


The following short code segment is an alternative route to
finding the LCT.


         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTTCB-CVT(,R15)    LOAD A(TCB WORDS)
         L     R15,4(,R15)             LOAD A(TCB OLD)
         ICM   R15,7,TCBTCTP-TCB(,R15) LOAD A(TCT)
         L     R11,TCTLCTAD-TCT(,R15)  LOAD A(LCT)
         USING LCTQDRTY,R11            ESTABLISH ADDRESSABILITY TO LCT
         CLC   LCTLABEL,=C'ENDOFLCT'   CHECK LCT EYECATCHER
         BNE   NOTLCT                  NOT LCT, HANDLE ERROR
         .
         .
         .
NOTLCT   EQU   *
         .
         .
         .
         CVT   DSECT=YES
         IKJTCB
         IEFTCT DSECT=YES
LCT      DSECT
         IEFALLCT


MAKING A JOB NON-CANCELLABLE

The code below can be used to make a job step non-cancellable
and non-forceable.  This is done by turning off a bit in the
CSCB mentioned above which disallows MVS CANCEL
commands.  Since a CANCEL command must be issued
against an address space before a FORCE command can be
used, this effectively disallows both commands.


***********************************************************************
*        MAKE JOB NON-CANCELLABLE/NON-FORCEABLE                       *
***********************************************************************
         L     R15,CVTPTR              LOAD A(CVT)
         L     R15,CVTTCBP-CVT(,R15)   LOAD A(TCB WORDS)
         L     R15,12(,R15)            LOAD A(ASCB OLD)
         L     R15,ASCBCSCB-ASCB(,R15) LOAD A(CSCB)
         MODESET KEY=ZERO              GET KEY 0 TO DO UPDATE
         NI    CHACT-CHAIN(R1),255-CHCL TURN OFF CANCELLABLE BIT
         MODESET KEY=NZERO             BACK TO PROBLEM KEY
         .
         .
         .
         CVT   DSECT=YES
         IHAASCB DSECT=YES
CSCB     DSECT
         IEECHAIN


                                                            c Reserved 1991

