Obtaining maximum flexibility from ACF2
This article will outline one approach to implementing ACF2/MVS in a manner that
overcomes a serious ACF2 limitation and produces a low rule-maintenance, high
security environment.  This solution is operational at ITT, Europe and at the
European Commission, but careful consideration must be given to the implications
of this technique for any other prospective implementations.
With ACF2, it is necessary to define a UID string to logically represent the
user for access rule validation purposes.  This string is built from fields
defined in the log-on-id record and as such can be fully defined as required by
the installation.  The problem is that having defined a UID string, there can
only be one per log-on-id.  This string must contain all the information that
the installation decides is relevant for rule definition; but the length cannot
exceed 24 characters and the log-on-id should be included in it.
This leads to either a vague UID string definition and consequent vague access
rules or alternatively, if the UID string is defined precisely, then problems
arise when one person (ie one log-on-id) needs access to unrelated resources
(for example a programmer who is assigned to more than one project at any given
time).  The result in the latter case is usually rules containing the log-on-id
name in the rule set that are hard to maintain and extremely undesirable.
The root cause of this difficulty is the annoying habit of users having multiple
responsibilities at one time!  The correct principle of rule definition is to
identify access by a generic rule based on the UID (or part of it since it can
be masked) without specifying an individual.  But how can this be achieved with
the typical degree of overlap of responsibility that most users have at many
sites?
What is needed is a group concept whereby a log-on-id can have access to several
different UID definitions and select the one appropriate to his immediate needs.
In RACF this is allowed by the selection of a GROUP during log-on or in JCL.  In
ACF2 this is not possible and the result is that either rules become non-generic
or the generic identifier becomes vague or is under-utilised in rules.  The
former entails high rule maintenance effort and the latter gives poor security.
There are two ways to circumvent this problem: the first is to use departmental
(or non-personal) log-on-ids whereby the log-on-id does not belong permanently
to an individual but is assigned for the duration of that individual’s task in
that particular area.  This leads to users having access to several log-on-ids
and passwords and consequent likely password exposure, duplication of personal
data files, operational confusion over which log-on-id is which person, and
generally a rather unpleasant and impersonal situation that requires a lot of
maintenance.
It is far better to have the ‘one person - one log-on-id’ concept and make the
log-on-id name easy to relate to the person (for example seven characters, five
for the surname and two for the first name will uniquely identify most people).
This helps operationally and is much more secure and easier to maintain.
Combining this with group or structured access is achieved with the following
implementation.
IMPLEMENTATION
Most sites use their account code to distinguish use of the computer resources
for budgeting and other purposes, yet few realise that this is also an ideal way
to define security access.  For a new installation the method is to ensure the
parallel development of accounting and security planning such that the account
code defines both the budgetary and security needs of the user.  If these do not
overlap exactly the code can be structured into a security portion and a
budgetary portion.  For existing sites the account code can be extended (maximum
of 40 characters) to include a code for security access, but remember the UID
limit of 24 characters still applies.
The account code (or the portion used for security purposes) should reflect a
security access requirement such that it can be coded in the access rules and
constitute sufficient accuracy for around 95% of access rule requirements.  But
how is an account code used in a rule?  The answer is that it cannot be used as
such and this is the key to the solution.  An installation exit (IEFUJI) is used
to move the selected account code into a field in the UID to override the
default account code, which must be defined as a UID field in the log-on-id
record.  The account field is called TSOACCT and can be defined so that only
part of it becomes incorporated into the UID string.
The effect of this is to allow one log-on-id access to as many different
security environments as he is permitted to via the account code rules (TAC
rules).  During log-on or job initiation the supplied account code is validated
and then placed into the already built-in storage UID string.  From then on ACF2
will operate entirely as normal.  The benefit is that to permit a log-on-id
access to a new security environment (by which I mean a given set of access
rights) all that is necessary is to permit him access to the appropriate account
code.  The dataset rules themselves are kept very short and easy to maintain
since they only reflect generic accesses via the account codes.
This removes most dataset rule maintenance effort and all that is required is to
keep the account code rules (TAC rules) accurate which is much simpler.  The
important point is that one log-on-id can now have access to as many or as few
different types of access as required.  A side effect is to force the use of the
correct account code since using the incorrect one will not grant the dataset
access needed for a particular task.  The account code rules themselves must
grant access only by log-on-id of course. Where access requirements are so
unique that only one person needs a particular access, the installation can code
the log-on-id in the access rule rather than create another account code.
Similarly, other parts of the UID can still be used for access rule definition
either by themselves or in conjunction with the account code portion of the UID
string.
With this slight modification to ACF2 in effect, there are no changes to the
normal principles of ACF2 operation and the only point to remember is that the
UID actually in the log-on-id record is simply the default and that the UID
operand of the TEST rule command should be used for testing non-default access
rights rather than the log-on-id operand.  This is because the supplied account
code is moved into the UID string dynamically (after verification) during job
initiation by the exit.  For CICS and other TP systems an interface must be
coded to perform the same function as the IEFUJI exit does for TSO and batch
jobs.  In the case of CICS, the CSSN transaction can be modified to prompt for
an account code then verify it and modify the user’s UID in CICS storage.
SUMMARY
This technique effectively structures ACF2 rules into two levels, firstly
permitting the log-on-id access to the account code(s) defining security
requirements, secondly permitting the account code(s) access to the datasets and
other resources.  The result is all the benefits of precise rules with the
simple maintenance of group access rights.  Only one simple exit (plus similar
for MUSASS systems such as CICS) is needed, which cannot become unusable with
future ACF2 releases since the UID string will always be addressable in storage
and the account code is passed to IEFUJI by MVS or prompted for by TP systems.
TECHNICAL IMPLEMENTATION DETAILS
1    Define the UID string to include all or part of the account code field from
the log-on-id record (field name is TSOACCT).  Remember the default length of
TSOACCT is 40 characters so use the length operand to limit it to your
installation’s account code length.
2    Adapt the ACF2 sample IEFUJI exit so that after the validation of the
account code for TSO users and batch jobs the validated account code is inserted
into its correct position in the UID string, which is already built in storage.
Branch round this if the account code is not validated due to the NOVLD-ACCT
option.  The address of the UID is obtained from the ACUCB field ACUUIDP.
3    To check that the supplied account code is in fact replacing the default,
write a simple TSO command processor to TPUT the contents of the UID string and
execute this after logging on.
4    Code a change to CSSN if you use CICS to prompt for an account code, verify
against a resource type defined as RTAC, update the UID using the address passed
in the ACMCB.  Code a similar change for other TP systems such as IMS DC.
5    Remember the ACF2 TEST command and use the UID operand with the correct
account code in it if you don’t want to test the log-on-id’s default UID string
when checking rules.
6    Remember to set VLD-ACCT on for all log-on-ids to ensure that validation of
the supplied account code is performed.
7    Note that TSO log-on procedure rules are checked before log-on, so ensure
the TPR rules are not based on the account code part of the UID since it will
not have been updated yet.  The same point applies to the TAC rules themselves.
8    Try to have the account code portion of the UID string defined at the front
of the UID string since it will be used more often than other parts of the UID
string when coding access rules (this avoids having to use masking characters
more than necessary).

Peter Toogood
Systems Programmer (UK)  © Xephon 1988































































