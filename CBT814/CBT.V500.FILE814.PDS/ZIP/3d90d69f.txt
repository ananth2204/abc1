Writing a Host Command Environment for
REXX

INTRODUCTION

REXX within MVS is a very powerful language. It gives you
almost every function you need for easy and efficient
programming. And if you lack a specific facility you can set up
your own extension to the language and define a function of your
own (see MVS Update, Issue 67, April 1992, page 38).

But there is also another way to extend REXX, which gives you
even more flexibility: you can define your own Host Command
Environment (HCE). This environment can be called using an
ADDRESS statement. Normally within TSO/E and ISPF you are
used to environments like TSO, ISPEXEC, and ISREDIT. You
will probably be familiar with statements like:

      ADDRESS TSO "FREE FILE(SYSPRINT)"
      ADDRESS ISPEXEC "DISPLAY PANEL(ASDF)"
      ADDRESS ISREDIT "FIND WHO"

Additionally there are others (eg LINK) that are not used very
often, and you can add your own ones. So after having done some
preparation you may write:

      ADDRESS MEMO "SEND DATA. MIKE.HAMBURG"

which could mean that, by this single statement, you send an E-
mail item using the HCE MEMO to user MIKE at node
HAMBURG. The data for that task consists of records grouped
within the stem DATA.

The regular way to define extensions to REXX is to enter a value
into the REXX table SUBCOMTB, assemble and link-edit it, and
move that module to the proper library. By using the routines on
the following pages you can even forget about that. You can
define any HCE dynamically during the execution time of a
REXX within that REXX.

The whole thing works like this:

1      Compile and link-edit the PL/I module for the dynamic
      define/delete function of an HCE (the source is shown below).

2      Write your own HCE support routine with all the logic you
      need (include the source components below), compile, and
      link-edit that module too.

3      Start your REXX with a statement to define your new HCE
      by connecting the HCE name with the name of the support
      routine. You may want to check if this environment already
      exists when you enter your REXX.

4      End your REXX with a statement to delete your new HCE
      by specifying the HCE name.

5      Within the range of the two statements (items 3 and 4) you
      may call your new HCE by using an ADDRESS statement
      that might contain parameters of any format, as long as your
      support routine understands what they mean.

6      The ADDRESS statement will return a value into the
      variable RC to inform the current REXX about the success of
      the statement. It can modify any other variable within that
      REXX.

HCE DEFINITION ROUTINE

To use your own HCE within a REXX you have to define it to the
REXX environment. You specify its name, the module name of
the routine to support it, and a token for that specific HCE
definition that can be accessed within an ADDRESS call.

The routine could be used to perform the following:

1      Dynamically define an HCE and the support routine for all
      functions.

2      Dynamically update an HCE definition.

3      Dynamically delete an HCE definition.

4      Determine whether an HCE is defined.

5      Supply a global token value of any format for the support
      routine.

ZRXHCE source code

*PROCESS SYSTEM(MVS);
 ZRXHCE:
   PROC(P1,P2) OPTIONS(MAIN,NOEXECOPS,REENTRANT) REORDER;
 /*******************************************************************/
 /*   Routine to define an HCE for a REXX                           */
 /*   Subroutines:  Routine dynamically calls IRXSUB for that task  */
 /*   Call syntax:  ADDRESS LINK ZRXHCE  ADD    Par2 Par3 Par4      */
 /*                 ADDRESS LINK ZRXHCE  QUERY  Par2                */
 /*                 ADDRESS LINK ZRXHCE  UPDATE Par2 Par3 Par4      */
 /*                 ADDRESS LINK ZRXHCE  DELETE Par2                */
 /*   Return code:    0  OK                                         */
 /*                   4  not OK                                     */
 /*                 100  call syntax error                          */
 /*   Parameters:   Par1:  Request type                             */
 /*                    'ADD'     adds a new HCE                     */
 /*                    'QUERY'   tests if an HCE name exists        */
 /*                    'UPDATE'  updates an HCE                     */
 /*                    'DELETE'  deletes an HCE                     */
 /*                 Par2:  HCE name for REXX ADDRESS statement      */
 /*                    (8 byte string, name syntax)                 */
 /*                 Par3:  Loadmod name of supporting routine       */
 /*                    (8 byte string, name syntax)                 */
 /*                 Par4:  User token                               */
 /*                    (16 byte string, anything)                   */
 /*******************************************************************/
   DCL (P1,P2)               PTR;
   DCL LINK_PARM             CHAR(999)    BASED(P1);
   DCL LINK_LENG             BIN(31)FIXED BASED(ADDR(P2));
   DCL FUNC                  CHAR( 8) INIT('');
   DCL (L,Z)                 BIN(31)FIXED INIT(0);
   DCL 1 HCTE,
         2 NAME              CHAR( 8) INIT(''),
         2 ROUTINE           CHAR( 8) INIT(''),
         2 TOKEN             CHAR(16) INIT('');
   DCL PARM                  CHAR(999)VAR;
   DCL PARM1                 CHAR(999)VAR INIT('');
   DCL PARM2                 CHAR(999)VAR INIT('');
   DCL PARM3                 CHAR(999)VAR INIT('');
   DCL PARM4                 CHAR(999)VAR INIT('');
   DCL (I1,I2,I3,I4)         BIN(31)FIXED;
   DCL (J1,J2,J3,J4)         BIN(31)FIXED;
   DCL (ADDR,LENGTH,STG)     BUILTIN;
   DCL (PLIRETC,SUBSTR)      BUILTIN;
   DCL IRXSUB                EXT ENTRY OPTIONS(ASM,INTER,RETCODE);
 %PAGE;
   FETCH IRXSUB;
   PARM = SUBSTR(LINK_PARM,1,LINK_LENG);
 /*******************************************************************/
 /*   Syntax check of input line                                    */
 /*******************************************************************/
   DO I1=1 TO LENGTH(PARM);
     IF SUBSTR(PARM,I1,1)^=' '  THEN LEAVE;
     END;
   DO J1=I1 TO LENGTH(PARM);
     IF SUBSTR(PARM,J1,1)=' '  THEN LEAVE;
     END;
   PARM1 = SUBSTR(PARM,I1,J1-I1);
   DO I2=J1 TO LENGTH(PARM);
     IF SUBSTR(PARM,I2,1)^=' '  THEN LEAVE;
     END;
   DO J2=I2 TO LENGTH(PARM);
     IF SUBSTR(PARM,J2,1)=' '  THEN LEAVE;
     END;
   PARM2 = SUBSTR(PARM,I2,J2-I2);
   DO I3=J2 TO LENGTH(PARM);
     IF SUBSTR(PARM,I3,1)^=' '  THEN LEAVE;
     END;
   DO J3=I3 TO LENGTH(PARM);
     IF SUBSTR(PARM,J3,1)=' '  THEN LEAVE;
     END;
   PARM3 = SUBSTR(PARM,I3,J3-I3);
   DO I4=J3 TO LENGTH(PARM);
     IF SUBSTR(PARM,I4,1)^=' '  THEN LEAVE;
     END;
   PARM4 = SUBSTR(PARM,I4);
   SELECT(PARM1);
     WHEN('ADD')     IF PARM3=''  THEN GOTO ERROR;
     WHEN('QUERY')   IF PARM1=''  THEN GOTO ERROR;
     WHEN('UPDATE')  IF PARM3=''  THEN GOTO ERROR;
     WHEN('DELETE')  IF PARM1=''  THEN GOTO ERROR;
     OTHERWISE       GOTO ERROR;
     END;
 %PAGE;
 /*******************************************************************/
 /*   Call IRXSUB for dynamic modification                          */
 /*******************************************************************/
   FUNC = PARM1;
   HCTE.NAME = PARM2;
   HCTE.ROUTINE = PARM3;
   HCTE.TOKEN = PARM4;
   L = STG(HCTE);
   IF FUNC^='DELETE'  THEN
     CALL IRXSUB(FUNC,ADDR(HCTE),L,HCTE.NAME);
   ELSE
     CALL IRXSUB(FUNC,Z         ,Z,HCTE.NAME);
   RETURN;
 /*******************************************************************/
 /*   Error return point                                            */
 /*******************************************************************/
 ERROR:
   CALL PLIRETC(100);
   RETURN;
   END ZRXHCE;

Remarks

The routine is called via the REXX LINK HCE, which is
available almost everywhere. You could move your REXX to
another environment like NetView, and ZRXHCE will work there
too.

The user token may be any sequence of 16 bytes. You might want
to GETMAIN an area and keep a pointer to it in the token. Every
call to the new HCE will get the token value automatically.

ACCESS TO REXX VARIABLES

Within an HCE you may want to have access to some REXX
variables. By using the PL/I routine included below you have the
following possibilities:

1      Write text into a variable (SET).

2      Read the contents of a variable (FETCH).

3      Delete a variable (DROP).

4      Read the contents of all variables one by one each call
      (NEXT).

5     Read the contents of the ARG, SOURCE, VERSION
      variables (PRIVATE).

REXXVAR source code

   REXXVAR:  PROC(FUNC,NAME,DATA);
   /**************************************************************/
   /*  Procedure to Access REXX Variables from PL/I              */
   /*  Subroutines:  Routine dynamically calls IRXEXC            */
   /*                (alias of routine IRXEXCOM)                 */
   /*  Parameters:                                               */
   /*     FUNC    is the required function, may be               */
   /*            'SET'     = write REXX variable                 */
   /*            'FETCH'   = read REXX variable                  */
   /*            'DROP'    = delete REXX variable                */
   /*            'NEXT'    = read next REXX variable in sequence */
   /*            'PRIVATE' = read system variables, eg SOURCE    */
   /*     NAME    is the name of the variable                    */
   /*     DATA    is the value of the variable                   */
   /**************************************************************/
     DCL FUNC                 CHAR(8),
         NAME                 CHAR(*)VAR,
         DATA                 CHAR(*)VAR;
     DCL (ADDR,
         LENGTH,
         STG,
         SUBSTR,
         SYSNULL)             BUILTIN;
     DCL Z                    BIN(31)FIXED INIT(0);
     DCL NAMBUF               CHAR(250),
         VALBUF               CHAR(9999);
     DCL 1 SHVBLOCK,
           2 SHVNEXT          PTR INIT(SYSNULL),
           2 SHVUSER          BIN(31)FIXED,
           2 SHVCODE          CHAR(1),
           2 SHVRET           CHAR(1),
           2 DUMMY            CHAR(2),
           2 SHVBUFL          BIN(31)FIXED,
           2 SHVNAMA          PTR,
           2 SHVNAML          BIN(31)FIXED,
           2 SHVVALA          PTR,
           2 SHVVALL          BIN(31)FIXED;
   DCL IRXEXC               EXT ENTRY OPTIONS(ASM,INTER,RETCODE);
   FETCH IRXEXC ;
     SHVBLOCK.SHVUSER = STG(NAMBUF);
     SHVBLOCK.SHVBUFL = STG(VALBUF);
     SHVBLOCK.SHVNAMA = ADDR(NAMBUF);
     SHVBLOCK.SHVVALA = ADDR(VALBUF);
   /**************************************************************/
   /*  Prepare values in control block before call               */
   /**************************************************************/
     SELECT(FUNC);
       WHEN('SET')     DO;
                         NAMBUF = NAME;
                         SHVNAML = LENGTH(NAME);
                         VALBUF = DATA;
                         SHVVALL = LENGTH(DATA);
                         END;
       WHEN('FETCH')   DO;
                         NAMBUF = NAME;
                         SHVNAML = LENGTH(NAME);
                         END;
       WHEN('DROP')    DO;
                         NAMBUF = NAME;
                         SHVNAML = LENGTH(NAME);
                         END;
       WHEN('NEXT')    DO;
                         END;
       WHEN('PRIVATE') DO;
                         NAMBUF = NAME;
                         SHVNAML = LENGTH(NAME);
                         END;
       OTHERWISE       DO;
                         END;
       END; /* SELECT */
   /**************************************************************/
   /*  Do the call now                                           */
   /**************************************************************/
     SHVBLOCK.SHVCODE = SUBSTR(FUNC,1,1);
     CALL IRXEXC('IRXEXCOM',Z,Z,SHVBLOCK);
   /**************************************************************/
   /*  Evaluate values from control block after call             */
   /**************************************************************/
     SELECT(FUNC);
       WHEN('SET')     DO;
                         END;
       WHEN('FETCH')   DO;
                         DATA = SUBSTR(VALBUF,1,SHVVALL);
                         END;
       WHEN('DROP')    DO;
                         END;
       WHEN('NEXT')    DO;
                         NAME = SUBSTR(NAMBUF,1,SHVNAML);
                         DATA = SUBSTR(VALBUF,1,SHVVALL);
                         END;
       WHEN('PRIVATE') DO;
                         DATA = SUBSTR(VALBUF,1,SHVVALL);
                         END;
       OTHERWISE       DO;
                         END;
       END; /* SELECT */
     END REXXVAR;

Remarks

The most commonly used function calls will be FETCH and SET
for read and write access to variables. Keep in mind that normally
within REXX even numeric data is stored as character text.

HCE SUPPORT ROUTINE

You are now ready to write your own HCE support routine. After
specifying the label for the name of your main routine
immediately include the source code below. It will define the
correct environment and the necessary routines for you. Within
that HCE you may now:

1      Read the HCE name by which you were called (from the
      ADDRESS statement).

2      Read the parameter line given to you (from the ADDRESS
      statement).

3      Read the value of the global token (from the LINK
      ZRXHCE statement).

4      Set the value RC for the calling REXX.

5      Set the value to register 15 to influence REXX processing.

6      Read/write/delete any REXX variable.

REXXHCE source code

   PROC(P1,P2,P3,P4,P5) OPTIONS(MAIN,NOEXECOPS,REENTRANT) REORDER;
   DCL (P1,P2,P3,P4,P5)  PTR;
 /*****************************************************************/
 /*   Routine to read HCE name from ADDRESS statement             */
 /*     when this HCE is called from REXX by                      */
 /*     ADDRESS SUPPORT "X Y Z"                                   */
 /*     you will get here within PL/I the string 'SUPPORT' by     */
 /*     NAME = REXX_HCE_NAME                                      */
 /*****************************************************************/
   REXX_HCE_NAME:  PROC     RETURNS(CHAR(8));
     DCL HCE_NAME          CHAR(8) BASED(ADDR(P1));
     DCL ADDR              BUILTIN;
     RETURN(HCE_NAME);
     END REXX_HCE_NAME;
 /*****************************************************************/
 /*   Routine to read HCE parameters from ADDRESS statement       */
 /*     when this HCE is called from REXX by                      */
 /*     ADDRESS SUPPORT "X Y Z"                                   */
 /*     you will get here within PL/I the string 'X Y Z' by       */
 /*     PARAM = REXX_HCE_PARAM                                    */
 /*****************************************************************/
   REXX_HCE_PARAM: PROC     RETURNS(CHAR(9999)VAR);
     DCL HCE_PARAM         CHAR(9999) BASED(P2);
     DCL HCE_LENG          BIN(31)FIXED BASED(ADDR(P3));
     DCL HCE_PARAM_RET     CHAR(9999)VAR;
     DCL (ADDR,SUBSTR)     BUILTIN;
     HCE_PARAM_RET = SUBSTR(HCE_PARAM,1,HCE_LENG);
     RETURN(HCE_PARAM_RET);
     END REXX_HCE_PARAM;
 /*****************************************************************/
 /*   Routine to read HCE token value from global definition      */
 /*     when this HCE is defined from REXX by                     */
 /*     ADDRESS LINK "ZRXHCE ADD SUPPORT HCE001 TOTO TOTO"        */
 /*     you will get here within PL/I the string 'TOTO TOTO' by   */
 /*     PARAM = REXX_HCE_TOKEN                                    */
 /*****************************************************************/
   REXX_HCE_TOKEN: PROC     RETURNS(CHAR(16));
     DCL HCE_TOKEN         CHAR(16) BASED(P4);
     RETURN(HCE_TOKEN);
     END REXX_HCE_TOKEN;
 /*****************************************************************/
 /*   Routine to set return code for caller into variable RC      */
 /*     when being called within PL/I like                        */
 /*     CALL REXX_HCE_RETCODE(16)                                 */
 /*     you will find that value again within REXX using          */
 /*     ADDRESS SUPPORT "X Y Z"                                   */
 /*     IF RC=16 THEN ...                                         */
 /*****************************************************************/
   REXX_HCE_RETCODE: PROC(RC);
     DCL HCE_RETCODE       BIN(31)FIXED BASED(ADDR(P5));
     DCL RC                BIN(31)FIXED;
     HCE_RETCODE = RC;
     END REXX_HCE_RETCODE;
 /*****************************************************************/

Remarks

Your values for RC may be positive, zero, or negative. Also your
values for return register 15 - like CALL PLIRETC(N) - may be
positive, zero, or negative. They influence trace and condition
handling. Zero means OK, between -12 and +12 the HOSTERR
flag will be turned on, with other values the HOSTFAIL flag will
be turned on.

Your PL/I program structure would have at least two include
statements at the beginning and would typically look like this:

      *PROCESS SYSTEM(MVS);
       HCEMAIN:
       %INCLUDE REXXHCE;
       %INCLUDE REXXVAR;

         /* mainline code */

       END HCEMAIN;

EXAMPLE OF A REXX CALLING OWN HCE

  /*  REXX  */
  /*  ADD A HCE WITH NAME PDIR  */
ADDRESS LINK "ZRXHCE ADD PDIR ZRHPDIR"
  /*  ALLOC A PDS OR PDSE TO FILENAME PDSXX  */
ADDRESS TSO  "ALLOC REU FI(PDSXX) SHR DA('PREFIX.TYPE.PDS')"
  /*  CALL HCE PDIR TO READ DIRECTORY  */
ADDRESS PDIR "PDSXX ENTRY."
  /*  SHOW RESULTS OF CALL TO HCE  */
SAY "RC =" RC
DO I=1 TO ENTRY.0
  SAY SUBSTR(ENTRY.I,1,8) C2X(SUBSTR(ENTRY.I,9))
  END I
  /*  FREE FILENAME PDSXX  */
ADDRESS TSO  "FREE FI(PDSXX)"
  /*  DELETE HCE NAMED PDIR  */
ADDRESS LINK "ZRXHCE DELETE PDIR"

EXAMPLE OF OWN HCE CALLED FROM REXX

*PROCESS SYSTEM(MVS);
 ZRHPDIR:
 %INCLUDE REXXHCE;
 %PAGE;
 %INCLUDE REXXVAR;
 %PAGE;
   /**************************************************************/
   /*  MAIN ROUTINE FOR REXX HOST COMMAND ENVIRONMENT            */
   /*     TO READ A PDS OR PDSE DIRECTORY                        */
   /*  IS CALLED FROM REXX BY A STATEMENT LIKE                   */
   /*     ADDRESS PDIR "INDD LINE."                              */
   /*  OR LIKE                                                   */
   /*     ADDRESS PDIR "INDD LINE. MEMA"                         */
   /**************************************************************/
   DCL (ADDR,
        HIGH,
        INDEX,
        LENGTH,
        PLIRETC,
        PLIRETV,
        SUBSTR,
        UNSPEC)        BUILTIN;
   DCL PARAM           CHAR(255)VAR INIT('');
   DCL (TITLE,MEMBER)  CHAR(8) INIT('');
   DCL STEM            CHAR(128)VAR INIT('');
   DCL DIR             FILE RECORD INPUT ENV(U RECSIZE(256));
   DCL EOF             BIT(1) INIT('0'B);
   DCL DIRREC          CHAR(300)VAR INIT('');
   DCL (I,J,K)         BIN(15)FIXED INIT(0);
 %PAGE;
   /**************************************************************/
   /*  GET PARAM FROM CALLER AND SPLIT IT INTO PARTS             */
   /*      1.  FILE NAME                                         */
   /*      2.  STEM NAME                                         */
   /*      3.  MEMBER NAME (OPTIONAL)                            */
   /*  SET ERROR RETURN CODE IF WRONG SYNTAX FROM CALLER         */
   /**************************************************************/
   PARAM = REXX_HCE_PARAM;
   I = INDEX(PARAM,' ');
   IF I=0  THEN DO;
     CALL REXX_HCE_RETCODE(100);
     CALL PLIRETC(20);
     RETURN;
     END;
   TITLE = SUBSTR(PARAM,1,I-1);
   DO I=I TO LENGTH(PARAM);
     IF SUBSTR(PARAM,I,1)^=' '  THEN LEAVE;
     END;
   IF I>LENGTH(PARAM)  THEN DO;
     CALL REXX_HCE_RETCODE(104);
     CALL PLIRETC(20);
     RETURN;
     END;
   PARAM = SUBSTR(PARAM,I);
   I = INDEX(PARAM,' ');
   IF I=0  THEN I = LENGTH(PARAM) + 1;
   STEM = SUBSTR(PARAM,1,I-1);
   DO I=I TO LENGTH(PARAM);
     IF SUBSTR(PARAM,I,1)^=' '  THEN LEAVE;
     END;
   IF I>LENGTH(PARAM)  THEN PARAM = '';
                       ELSE PARAM = SUBSTR(PARAM,I);
   MEMBER = PARAM;
   IF SUBSTR(STEM,LENGTH(STEM),1)^='.'  THEN DO;
     CALL REXX_HCE_RETCODE(108);
     CALL PLIRETC(20);
     RETURN;
     END;
   /**************************************************************/
   /*  READ DIRECTORY, RECORD BY RECORD FROM INPUT FILE          */
   /*  SET PROPER RETURN CODE FOR REXX CALLER                    */
   /**************************************************************/
   ON ENDFILE(DIR)  EOF = '1'B;
   K = 0;
   OPEN FILE(DIR) TITLE(TITLE);
   READ FILE(DIR) INTO(DIRREC);
   DO WHILE(^EOF);
     CALL ENTRY;
     READ FILE(DIR) INTO(DIRREC);
     END;
   CLOSE FILE(DIR);
   CALL FINAL;
   CALL REXX_HCE_RETCODE(PLIRETV);
   CALL PLIRETC(0);
   RETURN;
 %PAGE;
   /**************************************************************/
   /*  SEPARATE SINGLE MEMBER ENTRY                              */
   /*  PUT IT INTO EXTERNAL REXX VARIABLE                        */
   /*  IF MEMBER NAME SPECIFIED, ONLY IF THERE IS A MATCH        */
   /**************************************************************/
   ENTRY: PROC;
     DCL (I,J)                BIN(15)FIXED INIT(0);
     DCL (ST,LE)              BIN(15)FIXED INIT(0);
     DCL B8                   BIT(8) INIT(''B);
     DCL C2                   CHAR(2) INIT('');
     DCL DATA                 CHAR(200)VAR INIT('');
     C2 = SUBSTR(DIRREC,1,2);
     UNSPEC(I) = UNSPEC(C2);
     ST = 3;
     DO WHILE(ST<=I);
       B8 = '00011111'B & UNSPEC(SUBSTR(DIRREC,ST+11,1));
       UNSPEC(LE) = '00000000'B || B8;
       LE = 12 + LE * 2;
       DATA = SUBSTR(DIRREC,ST,LE);
       IF SUBSTR(DATA,1,8)=HIGH(8)  THEN LEAVE;
       IF ( MEMBER=' ' | MEMBER=SUBSTR(DATA,1,8) )  THEN DO;
         K = K + 1;
         CALL PUTVAR(K,DATA);
         END;
       ST = ST + LE;
       END;
     END ENTRY;
 %PAGE;
   /**************************************************************/
   /*  PUT NUMBER OF RECORDS FROM K INTO REXX VARIABLE STEM.0    */
   /**************************************************************/
   FINAL: PROC;
     DCL J                    BIN(15)FIXED INIT(0);
     PARAM = K;
     DO J=1 TO LENGTH(PARAM);
       IF SUBSTR(PARAM,J,1)^=' '  THEN LEAVE;
       END;
     PARAM = SUBSTR(PARAM,J);
     CALL PUTVAR(0,PARAM);
     END FINAL;
 %PAGE;
   /**************************************************************/
   /*  PUT DATA INTO EXTERNAL REXX VARIABLE STEM.NUMB            */
   /**************************************************************/
   PUTVAR:   PROC(NUMB,DATA);
     DCL NUMB                 BIN(15)FIXED;
     DCL NAME                 CHAR(128)VAR INIT('');
     DCL DATA                 CHAR(*)VAR;
     DCL J                    BIN(15)FIXED INIT(0);
     NAME = NUMB;
     DO J=1 TO LENGTH(NAME);
       IF SUBSTR(NAME,J,1)^=' '  THEN LEAVE;
       END;
     NAME = STEM || SUBSTR(NAME,J);
     CALL REXXVAR('SET',NAME,DATA);
     END PUTVAR;
   END ZRHPDIR;

Having taken the first steps with your own HCEs you will find out
that it is a very easy and convenient facility to use. I have
implemented many HCEs, and they all work fine.

Manfred Heinrich
Zurich Insurance (Germany)                                        c Xephon 1994

