Accessing a PDS from a high-level language
High-level languages such as COBOL, FORTRAN, or PL/I do not support the
partitioned dataset organisation.  Only a member of a Partitioned Dataset (PDS)
may be accessed like a physical sequential dataset.  This member must be
specified by the JCL and may not be determined by the program.
The following routine, REPLMN, can be used by programs to replace the member
name in the DD card (which can be a dummy name) by a different name.  After
open, access is to this member instead of the one defined on the DD card.  In
this way all members of the PDS can be processed if the names are known to the
program.  It is possible to create new members by opening the dataset for
output.
***********************************************************************
* REPLACE PARTITIONED DATA SET MEMBER NAME IN DD CARD BY A DIFFERENT  *
* MEMBER NAME. THEREFORE MEMBER SPECIFIED IN PROGRAM WILL BE ACCESSED *
* INSTEAD OF MEMBER SPECIFIED IN DD CARD.                             *
* E.G. COBOL:                                                         *
* // EXEC COBUCLG                                                     *
*      ...                                                            *
*      77  DDNAME PIC X(8) VALUE 'DDDDDDDD'.                          *
*      77  MEMBER PIC X(8) VALUE 'MMMMMMMM'.                          *
*      77  RC PIC 9999 SYNC COMP.                                     *
*      ...                                                            *
*          CALL 'REPLMN' USING DDNAME MEMBER RC.                      *
*      ...                                                            *
* //GO.DDDDDDDD DD DISP=SHR,DSN=PDS.NAME(DUMMY)                       *
*                                              ANY MEMBER NAME        *
* RC = 8 : NO DD CARD                                                 *
***********************************************************************
REPLMN   CSECT                                SERIALLY REUSEABLE
         SAVE  (14,12),,               SAVE REGISTERS                  X
               REPLMN_&SYSDATE         IDENTIFY MODULE
         LR    R2,R15                  LOAD BASE REGISTER
         USING REPLMN,R2               TELL IT ASSEMBLER
         ST    R13,SAVEAREA+4          CHAIN
         LR    R3,R13                    SAVEAREAS
         LA    R13,SAVEAREA
         ST    R13,8(R3)
         LM    R3,R5,0(R1)             ADDR. OF ARGUMENTS
         LA    R6,DCB                  BASE OF DCB
         USING IHADCB,R6
         MVC   DCBDDNAM,0(R3)          DD NAME INTO DCB
         RDJFCB DCB                    READ JFCB
         SLL   R15,1                   IF RETURN CODE = 4 THEN RC = 8
         STH   R15,0(R5)               RETURN RC
         LTR   R15,R15                 DD CARD PRESENT ?
         BNZ   PROGEND                   NO
         LA    R7,JFCB                 BASE OF JFCB
         USING INFMJFCB,R7
         MVC   JFCBELNM,0(R4)          MEMBER NAME INTO JFCB
         OPEN  (DCB,INPUT),TYPE=J      OPEN WITH MODIFIED JFCB
         CLOSE DCB                     WRITE BACK JFCB
PROGEND  L     R13,4(R13)
         RETURN (14,12),RC=0           LOAD REGISTERS AND RETURN
DCB      DCB   DSORG=PS,MACRF=(R),EXLST=EXLST  DCB FOR RDJFCB AND OPEN
EXLST    DC    0F'0',X'87',AL3(JFCB)   EXIT LIST FOR RDJFCB
         DS    0D
JFCB     DS    CL(JFCBLGTH)            BUFFER FOR JFCB                  SAVEAREA
DS    18F
         DCBD
         DSECT
         IEFJFCBN LIST=YES
         END   REPLMN


Walter Wiedemann
Consultant (West Germany)     © Walter Wiedemann 1988


































































