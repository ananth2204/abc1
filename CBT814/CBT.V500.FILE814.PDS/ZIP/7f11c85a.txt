Dynamic internal reader allocation
The JES internal reader is a useful way for job schedulers and other programs to
submit jobs to MVS.
Batch jobs can allocate the internal reader with a DD card as follows:
//INTRDR   DD SYSOUT=(A,INTRDR)
INTRDR in the writer name field is a reserved name that tells JES2 or JES3 to
process jobs written to this file for execution just as if they had been read
from a card reader.  The SYSOUT class that is specified is used as the message
class for jobs that do not specify MSGCLASS on their JOB cards.  If no SYSOUT
class is specified  - ie SYSOUT=(,INTRDR) - these jobs will inherit the message
class of the submitting job.
Allocating the internal reader under TSO is more difficult, because the TSO
ALLOC command does not allow a writer name to be specified.
Putting a DD card for the internal reader in the TSO log-on procedure is not a
good solution, because the number of internal readers is limited, at least in
JES2.  It is specified by the &NUMIRDRS or INTRDR RDINUM parameter in the JES2
initialisation deck.  Each TSO user who logs on will use one of these internal
readers.  When all are allocated, log-on attempts will fail with allocation
errors.
The internal reader may be dynamically allocated by using the DYNALLOC SVC - SVC
99.  Programs can allocate the reader when they need it and free it when they
are done with it.  This will reduce the chances of running out of internal
readers.  Even if all the internal readers are allocated, users will still be
able to log on; they will just be unable to submit jobs.
RDRALC is a subroutine that lets programs written in Assembler or high-level
languages dynamically allocate and free the internal reader.
From Assembler, RDRALC is called like this:
                   L     R15,=V(RDRALC)
                   LA    R1,RDRPARM
                   BALR  R14,R15
                   LTR   R15,R15
                   .
                   .
          RDRPARM  DC    A(X'80000000'+ALLOC)
          ALLOC    DC    CL1'A'
From PL/I, RDRALC is called like this:
          DCL RDRALC EXTERNAL ENTRY(CHAR(1))
              OPTIONS( ASSEMBLER INTER RETCODE );
          DCL RC     FIXED BINARY(31);
          DCL PLIRETV BUILTIN;
          .
          .
          CALL RDRALC( 'A' );
          RC = PLIRETV();
The internal reader will be allocated with a DDNAME of INTRDR.
         TITLE 'RDRALC - DYNAMICALLY ALLOCATE INTERNAL READER'
*====================================================================*
*  MODULE NAME: RDRALC                                               *
*  DESCRIPTIVE NAME: DYNAMICALLY ALLOCATE INTERNAL READER            *
*  FUNCTION: ALLOCATE OR FREE THE INTERNAL READER USING SVC99        *
*  ENTRY POINT: RDRALC                                               *
*  PARAMETERS:                                                       *
*     ALLOCATE FUNCTION -                                            *
*        FUNCTION CODE - CL1'A' INPUT PARM - ALLOCATE                *
*  FREE FUNCTION -                                                   *
*        FUNCTION CODE - CL1'F'   INPUT PARM - FREE                  *
*  RETURN CODES:                                                     *
*     0 - ALLOCATE OR FREE WAS SUCCESSFUL                            *
*     8 - ALLOCATE OR FREE FAILED                                    *
*    12 - FUNCTION WAS INVALID                                       *
*  SYSTEM MACROS/LIBRARIES:                                          *
*     DYNALLOC  -  MACLIB                                            *
*     IEFZB4D0  -  MACLIB                                            *
*     IEFZB4D2  -  MACLIB                                            *
*====================================================================*
         IEFZB4D0 ,
         IEFZB4D2 ,
RDRALC   CSECT ,
         USING RDRALC,R15          SET UP TEMPORARY BASE
         B     AROUNDID            SKIP AROUNDID EYECATCHER
         DC    AL1(ENDID-*-1)      LENGTH OF EYECATCHER
         DC    C'RDRALC &SYSDATE. &SYSTIME.'
ENDID    EQU   *                   END OF ID
AROUNDID DS    0H                  -
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET UP NEW BASE
         USING RDRALC,R11          -
         DROP  R15                 DROP TEMPORARY BASE
         LA    R15,SAVEAREA        R15 -> LSA
         ST    R13,4(R15)          LSA -> HSA
         ST    R15,8(R13)          HSA -> LSA
         LR    R13,R15             R13 -> LSA
         LR    R10,R1              SAVE PARAMETER LIST POINTER
*   INITIALIZE THE DYNAMIC ALLOCATION REQUEST BLOCK
         LA    R15,DYNRB           R15 -> SVC99 REQUEST BLOCK
         USING S99RB,R15           SET UP BASE FOR IT
         MVI   S99RBLN,(S99RBEND-S99RB)  INSERT LENGTH
         XC    S99FLAG1,S99FLAG1   CLEAR OUT FLAGS
         XC    S99ERROR,S99ERROR   AND ERROR CODES
         XC    S99INFO,S99INFO     ...
         XC    S99RSV01,S99RSV01   -
         XC    S99FLAG2,S99FLAG2   CLEAR OUT FLAGS
         DROP  R15                 (S99RB)
*   VALIDATE THE FUNCTION CODE
         L     R2,0(R10)           R2 -> FUNCTION CODE
         CLI   0(R2),C'A'          IS IT ALLOCATE?
         BE    ALLOCATE            YES...GO DO
         CLI   0(R2),C'F'          IS IT FREE?
         BE    FREE                YES...GO DO
         LA    R15,12              BAD FUNCTION - SET RETURN CODE
         B     EXIT                AND EXIT
ALLOCATE DS    0H
*   CUSTOMIZE THE DYNALLOC REQUEST BLOCK
         LA    R15,DYNRB           SET UP BASE FOR DYNALLOC REQ BLOCK
         USING S99RB,R15           ...
         MVI   S99VERB,S99VRBAL    INDICATE ALLOCATION
         LA    R0,TEXTLSTA         R0 -> TEXT UNIT LIST
         ST    R0,S99TXTPP         STORE TEXT UNIT LIST ADDR
         DROP  R15                 (S99RB)
*   DYNAMICALLY ALLOCATE THE FILE
         LA    R1,DYNAMPTR         R1 -> DYNALLOC REQUEST BLOCK
         DYNALLOC ,                CALL DYNAMIC ALLOCATION
         LTR   R15,R15             DID IT WORK?
         BZ    EXIT                YES...GO RETURN
         LA    R15,8               NO...SET BAD RETURN CODE
         B     EXIT                AND EXIT
FREE     DS    0H                  -
*   CUSTOMIZE THE DYNALLOC REQUEST BLOCK
         LA    R15,DYNRB           R15 -> SVC99 REQUEST BLOCK
         USING S99RB,R15           SET UP BASE FOR IT
         MVI   S99VERB,S99VRBUN    INDICATE UNALLOCATION
         LA    R0,TEXTLSTF         R0 -> TEXT UNIT LIST
         ST    R0,S99TXTPP         STORE TEXT UNIT LIST ADDR
         DROP  R15                 (S99RB)
*   DYNAMICALLY UNALLOCATE THE FILE
         LA    R1,DYNAMPTR         R1 -> DYNALLOC REQUEST BLOCK
         DYNALLOC ,                CALL DYNAMIC ALLOCATION
         LTR   R15,R15             DID IT WORK?
         BZ    EXIT                YES...GO RETURN
         LA    R15,8               NO...SET BAD RETURN CODE
         B     EXIT                AND RETURN
EXIT     DS    0H
         L     R13,4(R13)          R13 -> HSA
         L     R14,12(R13)         RESTORE REG 14
         LM    R0,R12,20(R13)      RESTORE REGS 0 TO 12
         MVI   12(R13),X'FF'       FLAG SAVE AREA
         BR    R14                 AND RETURN
         LTORG ,                   -
SAVEAREA DS    18F                 REGISTER SAVE AREA
DYNAMPTR DC    A(X'80000000'+DYNRB)   POINTER TO DYNRB
DYNRB    DS    0F                  SVC99 REQUEST BLOCK
         DC    (S99RBEND-S99RB)XL1'00'
*   TEXT UNITS
TXUUDDN  DC    Y(DUNDDNAM),Y(1),Y(6)    UNALLOCATE DDNAME
TXUZUDDN DC    CL6'INTRDR'
TXUUNALC DC    Y(DUNUNALC),Y(0)         UNALLOC EVEN IF PERM. ALLOC
TXUSYSOU DC    Y(DALSYSOU),Y(0)         ALLOCATE SYSOUT DATASET
*                                       (DEFAULT SYSOUT CLASS)
TXUPERMA DC    Y(DALPERMA,Y(0)          PERMANENT ALLOCATION
TXUSPGNM DC    Y(DALSPGNM),Y(1),Y(6)    SYSOUT PROGRAM NAME
         DC    CL6'INTRDR'
TXUDDNAM DC    Y(DALDDNAM),Y(1),Y(6)    SPECIFY DDNAME
         DC    CL6'INTRDR'
TEXTLSTA DS    0A                  ALLOCATE TEXT LIST
         DC    A(TXUSYSOU)         ...SYSOUT DATA SET
         DC    A(TXUPERMA)         ...PERMANENT ALLOCATION
         DC    A(TXUDDNAM)         ...DDNAME
         DC    A(X'80000000'+TXUSPGNM)  ...PROGRAM NAME (INTRDR)
TEXTLSTF DS    0A                  FREE TEXT LIST
         DC    A(TXUUDDN)          ...DDNAME
         DC    A(X'80000000'+TXUUNALC)  ...UNALLOC EVEN IF PERM
         LTORG
         END


Lynn Grant
Technical Consultant (USA)    © Xephon 1988































