Cancelling an IMS-dependent region

An IMS dependent region (eg Message Processing Region or
Batch Message Processing region) cannot be cancelled by the
MVS cancel command because of the architecture of the
product. Instead, IMS provides several commands to stop a
region such as /STO REGION regid, /STO REGION regid
ABDUMP, and /STO REGION regid CANCEL.
Unfortunately, although these commands have been
continuously improved with different IMS releases, they are
inefficient under certain circumstances, for example when a
CPU loop occurs (eg in a PL/I ESTAE routine etc) in a
dependent region. That is the reason why we have devised the
following solution to fill this gap.

The basic idea is to provide the possibility of cancelling an
IMS dependent region temporarily through the use of the MVS
cancel command - this is done by dynamically zapping the
module DFSISI00 in memory. The process is based on
products such as CA-LOOK or RESOLVE, and the solution
described below has been developed in IMS 3.1 with
RESOLVE (the only difference with a solution based on IMS
2.2 is the zapping offset in DFSISI00: X'168' instead of
X'3BE').

The process involves three stages:

1      Listing the Contents Directory Entry (CDE) of the IMS
      control region in order to get the entry point of the module DFSISI00.

2      Calculating the zap address.

3      Zapping.

In order to automate the process and make it easy to use, we
have packaged the solution into two started tasks (CANCELY
and CANCELN). So one simply has to enter the MVS
command S CANCELY, then cancel the appropriate dependent
region, and finally enter the command S CANCELN so as to
prevent further unfortunate cancellations.

It goes without saying that the method described here has to be
used cautiously and knowingly, otherwise it can lead to an
abend U113 of the control region, especially when the
dependent region is performing a DL/I call.


STARTED TASK CANCELY

//LISTCDE  EXEC PGM=RESOLVE,PARM='BATCH'
//*  DISPLAY THE CDES IN ORDER TO IDENTIFY DFSISI00 ENTRY POINT
//SYSPRINT DD DISP=SHR,DSN=UMMYEH.LIB.DDCDE
//SYSIN    DD DISP=SHR,DSN=SYSA.PROCLIB(CANCELCD)
//*TIM
//*CDE,IMSXCTL
//*END
//LOCATE   EXEC  PGM=LOCENTRY
//STEPLIB  DD DISP=SHR,DSN=UMMYEH.LIB.LOAD
//SYSOUT   DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2400)
//DDOUT    DD DISP=OLD,DSN=UMMYEH.LIB.DDOUT
//DDCDE    DD DISP=SHR,DSN=UMMYEH.LIB.DDCDE
//SYSUDUMP DD SYSOUT=*
//SYSIN    DD DISP=SHR,DSN=SYSA.PROCLIB(CANCELZY)
//*,41F0000450,41F0000050,IMSXCTL
//*
//*  ZAP DFSISI00 IN MEMORY
//*
//RESZAP   EXEC PGM=RESOLVE,PARM='BATCH'
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DISP=SHR,DSN=UMMYEH.LIB.DDOUT


CANCELCD MEMBER OF SYSA.PROCLIB

TIM
CDE,IMSXCTL
END


CANCELZY MEMBER OF SYSA.PROCLIB

,41F0000450,41F0000050,IMSXCTL


STARTED TASK CANCELN

//LISTCDE  EXEC PGM=RESOLVE,PARM='BATCH'
//*  DISPLAY THE CDES IN ORDER TO IDENTIFY DFSISI00 ENTRY POINT
//SYSPRINT DD DISP=SHR,DSN=UMMYEH.LIB.DDCDE
//SYSIN    DD DISP=SHR,DSN=SYSA.PROCLIB(CANCELCD)
//*TIM
//*CDE,IMSXCTL
//*END
//LOCATE   EXEC  PGM=LOCENTRY
//STEPLIB  DD DISP=SHR,DSN=UMMYEH.LIB.LOAD
//SYSOUT   DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2400)
//DDOUT    DD DISP=OLD,DSN=UMMYEH.LIB.DDOUT
//DDCDE    DD DISP=SHR,DSN=UMMYEH.LIB.DDCDE
//SYSUDUMP DD SYSOUT=*
//SYSIN    DD DISP=SHR,DSN=SYSA.PROCLIB(CANCELZN)
//*,41F0000050,41F0000450,IMSXCTL
//*
//*  ZAP DFSISI00 IN MEMORY
//*
//RESZAP   EXEC PGM=RESOLVE,PARM='BATCH'
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DISP=SHR,DSN=UMMYEH.LIB.DDOUT


CANCELZN MEMBER OF SYSA.PROCLIB

,41F0000050,41F0000450,IMSXCTL


LOCENTRY PROGRAM SOURCE CODE

         CSECT
**1. LOCATE THE ENTRY POINT OF DFSISI00 FROM THE DISPLAY OF THE    ***
*    COMMAND RESOLVE 'CDE,IMSXCTL'.                                  *
* 2. EDIT THE ZAP COMMAND :                                          *
*       ZAP,ADDR(DFSISI00)+X'3BE',YYYYYYYY,ZZZZZZZZ,IMSXCTL          *
*    YYYYYYYY = OLD DATA TO BE REPLACED                              *
*    ZZZZZZZZ = NEW DATA                                             *
* DATA TO BE CUSTOMIZED :                                            *
* JOBNAME OF IMS CONTROL REGION                                      *
* ADDRESS DEPENDING OF THE LEVEL OF IMS                              *
* DATA TO BE ZAPPED                                                  *
* INPUT :                                                            *
*    DDCDE    = RESULT OF THE RESOLVE COMMAND 'CDE,IMSXCTL'          *
*    SYSIN    = YYYYYYYY,ZZZZZZZZ,IMSXCTL                            *
* OUTPUT :                                                           *
*    DDOUT    = RESOLVE COMMANDS.                                    *
*    EXAMPLE :  DUMP,ADDR,40,IMSXCTL                                 *
*               ZAP,ADDR,YYYYYYYY,ZZZZZZZZ,IMSXCTL                   *
*               DUMP,ADDR,40,IMSXCTL                                 *
*               END                                                  *
*               ADDR= DFSISI00 + X'168'   IMS220                     *
*               ADDR= DFSISI00 + X'3BE'   IMS310                     *
***  SYSOUT   = MESSAGES                                           ***
         STM   R14,R12,12(R13)          SAVE REGISTERS
         BALR  R12,0                    BASE REGISTER
         USING *,R12
         CNOP  0,4                      FORCE FULLWORD ALIGNMENT
         BAL   R15,*+76                 R15 -> NEW SAVE AREA
         DC    18F'0'                   NEW SAVE AREA
         ST    R15,8(R13)               STORE NSA ADDR IN LSA
         ST    R13,4(R15)               STORE LSA ADDR IN NSA
         LR    R13,R15                  R13 -> NEW SAVE AREA
         OPEN (SYSIN,,DDCDE)
         OPEN (SYSOUT,(OUTPUT),DDOUT,(OUTPUT))
         GET   SYSIN,LIZAPD            READ SYSIN RECORD
GTCDE    DS    0H                      LOCATE DFSISI00 ENTRY POINT
         GET   DDCDE,RCCDE             READ DDCDE RECORD
         CLC   LMODN(8),DFSISI00       LMOD NAME = DFSISI00 ?
         BNE   GTCDE
CNVB     DS    0H                      CONVERT ADDR TO BINARY
         TR    EP(8),TAB
         LA    R2,4                    LOAD LENGTH OF OUTPUT
         LA    R6,EP                   LOAD INPUT ADDRESS
         LA    R7,WRK1                 LOAD OUTPUT ADDRESS
LOOPB    DS    0H
         MVO   0(1,R7),0(1,R6)         MOVE 4 RIGHT BITS TO 4 LEFT BITS
         OC    0(1,R7),1(R6)           MOVE THE SECOND BYTES
         LA    R6,2(R6)                SKIP TO THE NEXT 2 CARACTERS
         LA    R7,1(R7)                SKIP TO THE NEXT BYTE
         BCT   R2,LOOPB                LOOP UNTIL 4 TIMES
ADD      DS    0H                      ADD OFFSET TO ENTRY POINT
         L     R7,WRK1                 LOAD BINARY ADDR
         A     R7,V3BE                 ADD OFFSET X'3BE'
         ST    R7,WRK1                 STORE RESULT IN WRK1
CNVC     DS    0H                      CONVERT ADDR TO CHARACTER
         LA    R5,WRK1                 LOAD BINARY ADDRESS
         LA    R6,EP                   LOAD EP ADDRESS
         LA    R8,4                    INITIALIZE INPUT LENGTH
LOOPC    DS    0H
         L     R4,0(R5)
         SRL   R4,24                   SHIFT 3 BYTES RIGHT
         STC   R4,OP2                  STORE RIGHT BYTE INTO OP2
         NI    OP2,X'0F'               SET 4 LEFT BITS TO ZERO
         SRL   R4,4                    SHIFT 4 BITS RIGHT
         STC   R4,OP1                  STORE RIGHT BYTE INTO OP1
         MVC   0(1,R6),OP1
         MVC   1(1,R6),OP2
         LA    R5,1(R5)                SKIP TO NEXT INPUT BYTE
         LA    R6,2(R6)                SKIP TWO OUTPUT BYTES
         BCT   R8,LOOPC
CVT      DS    0H
         TR    EP(8),TAB2              REPLACE THE 4 HI ORDER BITS
         MVC   LIDMPA(8),EP            MOVE DUMP ADDRESS
         MVC   LIZAPA(8),LIDMPA        MOVE ZAP ADDRESS
END      DS    0H
         PUT   DDOUT,LITIM             WRITE RESOLVE COMMANDS ON
         PUT   DDOUT,LIDMP             DATASET DDOUT
         PUT   DDOUT,LIZAP
         PUT   DDOUT,LIDMP
         PUT   DDOUT,LIEND
         CLOSE SYSIN SYSOUT DDCDE DDOUT
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         LA    R15,0
         BR    R14
SYSOUT   DCB DSORG=PS,MACRF=PM,DDNAME=SYSOUT
DDOUT    DCB DSORG=PS,MACRF=PM,DDNAME=DDOUT
SYSIN    DCB DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=END
DDCDE    DCB DSORG=PS,MACRF=GM,DDNAME=DDCDE,EODAD=END
         LTORG
         DS    0F
DFSISI00 DC    CL8'DFSISI00'      LMOD NAME
V3BE     DC    X'000003BE'        OFFSET FOR ZAP
OP1      DC    F'0'               WORK AREA
OP2      DC    F'0'               WORK AREA
WRK1     DS    F'0'               WORK AREA
RCCDE    DS    0CL133            DDCDE RECORD DESCRIPTION
         DS    CL4               RECORD LENGTH
         DS    CL17
LMODN    DS    CL8               LOAD MODULE NAME
         DS    CL1
EP       DS    CL8               ENTRY POINT ADDRESS
         DS    CL99
LITIM    DC    CL80'TIM'
LIEND    DC    CL80'END'
LIDMP    DS    0CL80                   DUMP COMMAND
         DC    CL5'DUMP,'
LIDMPA   DS    CL8                     DUMP ADDRESS
         DC    CL67',40,IMSXCTL'       <=== CUSTOMIZED
LIZAP    DS    0CL80                   ZAP COMMAND
         DC    CL4'ZAP,'
LIZAPA   DS    CL8                     ZAP  ADDRESS
LIZAPD   DS    CL67                    DATA TO BE ZAPPED
TAB      DS    CL193
         DC    X'0A0B0C0D0E0F'
         DS    CL42
         DC    X'010203040506070809'
TAB2     DC    C'0123456789ABCDEF'
         END


Kou Xuan Son
Systems Programmer
Alta•r (France)                                                      c Xephon 1992

