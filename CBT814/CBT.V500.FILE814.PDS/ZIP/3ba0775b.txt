An improved cursor-driven edit macro

-------------- PF KEY DEFINITIONS AND LABELS - ALTERNATE KEYS -------------
    COMMAND ===>

    PF13 ===> %CURSEDIT
    PF14 ===> SPLIT
    PF15 ===> END
    ...

CURSEDIT REXX EXEC

/* REXX                                                                      */
/* CURSEDIT                                                                  */
/* "A macro to enable cursor-driven edit"                                    */
/* MVS Update issue 99, December 1994                                        */
/* Steven Leek, Systems Programmer, British Gas (UK)                         */
/* (c) Xephon 1994                                                           */
/* Used by permission of Xephon, Inc. at Meriter Hospital, Inc.              */
/*                                                                           */
/* Revised by George Perkins, Meriter Hospital, Inc. December 1994           */
/* 1.  Fixed symbolic variable substitution problem with HL&Q..DSN           */
/* 2.  Provided error messages on relative GDG limitation                    */
/* 3.  Allowed member name on ISPF edit                                      */
/* 5.  Removed klugey logic based on strange LISTDSI and SYSDSN '''' syntax  */
/*                                                                           */
ADDRESS ISREDIT
"MACRO (DUMMY)"
"(LPTR,COL) = CURSOR"
"(LRECL)    = LRECL"
"(NUMMODE,NUMTYPE) = NUMBER"
PARSE VAR NUMTYPE STD COBOL DISPLAY
/* Subtract 8 from lrecl if standard numbers are being used.                */
SELECT
WHEN  nummode = ON & std = STD  THEN
  DO
  lrecl = lrecl-8
  END
OTHERWISE NOP
END
/* if cursor isn't on a data line, then set message and quit.                */
SELECT
WHEN  col = 0 THEN
  DO
  zmsg000l = "POSITION CURSOR ON A DATA SET NAME"
  CALL QUIT
  END
OTHERWISE NOP
END
/* Truncate the line from cursor pos thru to first space or comma.  If we    */
/* are on the start of a dataset name, this should give us the name.         */
"(RECORD) = LINE" lptr
record = SUBSTR(record,col,lrecl)
poscomma = POS(',',record)
posspace = POS(' ',record)
IF poscomma = 0 THEN poscomma = lrecl
IF posspace = 0 THEN posspace = lrecl
pos2 = MIN(poscomma,posspace) - 1
/* What we have left SHOULD be a dataset name.                               */
dsn   = SUBSTR(record,1,pos2)
/* Now find any single or double quotes.                                     */
blippos   = POS("'",dsn) ;  quotepos  = POS('"',dsn)
/* Remove single or double quotes (if any found).                            */
SELECT
WHEN ( blippos = 0 & quotepos = 0 ) THEN
     NOP
WHEN ( blippos ^= 0 && quotepos ^=0 ) THEN
     dsn = SUBSTR(dsn,1,blippos+quotepos-1)
OTHERWISE
     DO
     len = MIN(blippos,quotepos)
     dsn = SUBSTR(dsn,1,len-1)
     END
END
/* Now find any '(' or ')'.  Might be PDS member (okay), may be GDG (bad).   */
/* Throw away the parenthesis and member name or relative GDG number.        */
paren1 = POS('(',dsn)
paren2 = POS(')',dsn)
pdsgdg = ""
memlen = ""
IF paren1 > 0 & paren2 > 0 THEN
  DO
  memlen = paren2 - paren1 - 1
  IF memlen > 0 THEN
    DO
    pdsgdg = SUBSTR(dsn,paren1+1,memlen)
    dsn = SUBSTR(dsn,1,paren1-1)
    END
  IF paren1 > paren2 THEN dsn = SUBSTR(dsn,1,paren2,' ')
  IF paren2 > paren1 THEN dsn = SUBSTR(dsn,1,paren1,' ')
  END
/* Now split the data set up into its separate qualifiers in case            */
/* we need to resolve any symbolics (eg &HLQ..SPF.CNTL).                     */
dsn = TRANSLATE(dsn,' ','.')
numparts = WORDS(dsn)
resdsn = ''
/* Loop thru each separate qualifier of the dataset name and call            */
/* the SYMBRES subroutine, which will determine if any symbolic              */
/* resolution needs to be done.                                              */
DO x=1 TO numparts
part.x = WORD(dsn,x)
CALL SYMBRES part.x
resdsn = resdsn||"."||result
END
/* First, must remove the leading period resulting from SYMBRES loop.        */
dsn = SUBSTR(resdsn,2)
/* We now have the fully resolved dataset name.                              */
/* Turn msg off, and issue SYSDSN to enquire on the status of our dataset    */
x = MSG(OFF)
x = SYSDSN(''''dsn'''')
/* If dataset status is anything other than OK, set a msg and quit           */
SELECT
WHEN WORDS(TRANSLATE(dsn,,'.')) < 2  THEN
  DO
  zmsg000l = "INVALID DATASET NAME: "||dsn
  CALL QUIT
  END
WHEN DATATYPE(pdsgdg) = "NUM" THEN
  DO
  zmsg000l = ,
  "RELATIVE GENERATIONS OF A GDG ARE NOT SUPPORTED (eg "||,
  pdsgdg||,
  ").  USE ABSOLUTE GENERATION SPECIFICATION (ie G1234V00) INSTEAD."
  CALL QUIT
  END
WHEN x ^= "OK" THEN
  DO
  zmsg000l = SYSDSN(''''dsn'''')||": "||dsn
  CALL QUIT
  END
OTHERWISE NOP
END
x = MSG(ON)
/* Now get dataset info to display in a pop-up window when we go into edit.  */
zz = LISTDSI(''''dsn'''' DIRECTORY NORECALL)
vol  = sysvolume
blk  = sysblksize
fm   = sysrecfm
recl = syslrecl
SELECT
WHEN sysexdate = 0 THEN exdate = "EXPDT(**NONE**)"
OTHERWISE exdate = "EXPDT("sysexdate")"
END
SELECT
WHEN sysunits  = "BLOCK" THEN
  units = blk
OTHERWISE units = sysunits
END
/* Now set long msg with dataset info to be displayed in a pop-up window.    */
/* NB different msg if dsn is partitioned.                                   */
SELECT
WHEN sysdsorg = PO THEN
  DO
  zmsg000l = ,
  "DSN="dsn",VOL=SER="vol" DSORG="sysdsorg" MEMBERS("sysmembers")" exdate" ",
  "DCB=(RECFM="fm",LRECL="recl",BLOCKSIZE="blk")",
  "SPACE=("units",("sysprimary","sysseconds","sysadirblk"))",
  "EXTENTS("sysextents") CREATED("syscreate")",
  "USED=("units"="sysused",DIRBLKS="sysudirblk")"
  END
OTHERWISE
  DO
  zmsg000l = ,
  "DSN="dsn",VOL=SER="vol" DSORG="sysdsorg  exdate" ",
  "DCB=(RECFM="fm",LRECL="recl",BLOCKSIZE="blk")",
  "SPACE=("units",("sysprimary","sysseconds"))",
  "EXTENTS("sysextents") CREATED("syscreate")",
  "USED=("units"="sysused")"
  END
END
/* Now set a msg with dataset information. (msg is long enough to force a    */
/* pop-up window to be displayed).                                           */
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
/* Now go into edit on the dataset.  If a member name has been provided,     */
/* attempt to use it.                                                        */
SELECT
WHEN DATATYPE(pdsgdg,A) = 0 THEN
  DO
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  ADDRESS ISPEXEC "EDIT   DATASET('"dsn"')"
  END
WHEN DATATYPE(pdsgdg,A) = 1 THEN
  DO
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  ADDRESS ISPEXEC "EDIT   DATASET('"dsn"("pdsgdg")')"
  END
OTHERWISE NOP
END
/* Upon our return from ISPF EDIT, check the return codes!                   */
SELECT
WHEN rc <=  4  THEN
  DO
  zmsg000l =  ' '
  CALL QUIT
  END
WHEN rc  =  14 THEN
  DO
  zmsg000s = "DATASET IN USE"
  CALL QUIT
  END
WHEN rc  =  16 THEN
  DO
  zmsg000s = "NO MEMBERS IN DATASET"
  CALL QUIT
  END
OTHERWISE NOP
END
/* If the dataset is no good for edit (eg recfm=u), then go into browse      */
/* instead.                                                                  */
ADDRESS ISPEXEC "BROWSE DATASET('"dsn"')"
SELECT
WHEN rc   = 0  THEN
  DO
  zmsg000l = " "
  CALL QUIT
  END
WHEN rc  =  12 THEN
  DO
  zmsg000s = "EMPTY DATA SET"
  CALL QUIT
  END
WHEN rc  =  16 THEN
  DO
  zmsg000s = "NO MEMBERS IN DATASET"
  CALL QUIT
  END
WHEN rc  >  16 THEN
  DO
  zmsg000l = "EDIT/BROWSE SEVERE ERROR"
  CALL QUIT
  END
OTHERWISE NOP
END
/* ------------------------- CALLED SUBROUTINES ---------------------------- */
QUIT:
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
"CURSOR = " lptr col
EXIT
RETURN
/* ------------------------------------------------------------------------- */
SYMBRES:
ARG qual
qualifr = qual
/* If the qualifier does not contain a '&', then no symbolic resolution is   */
/* needed. Just return the value we came in with.                            */
IF POS('&',qualifr) = 0 THEN RETURN qualifr
/* Remove any '&' from the qualifier to isolate the symbolic from potential  */
/* constant DSN in front of the symbolic; front is NULL if the qualifier     */
/* is composed entirely of a symbolic variable.  This logic is limited to    */
/* one level of substitution, ie  DSN&HLQ..DSN but not DSN&Q1&Q2..DSN and    */
/* not DSN&Q1.&Q2..DSN                                                       */
qualifr = TRANSLATE(qualifr,,'&')
SELECT
WHEN WORDS(qualifr) = 1 THEN
  DO
  front = ""
  symbolic = WORD(qualifr,1)||"="
  END
WHEN WORDS(qualifr) = 2 THEN
  DO
  front = WORD(qualifr,1)
  symbolic = WORD(qualifr,2)||"="
  END
OTHERWISE
  DO
  zmsg000l = "CANNOT RESOLVE MULTIPLE LEVELS OF SYMBOLICS IN "qual
  CALL QUIT
  END
END
where = FIRST
/* Search for the symbolic. If it is not present in the JCL, then set a      */
/* message and exit.                                                         */
DO i=1
"SEEK C'"symbolic"'" where
IF rc ^= 0 THEN
  DO
  zmsg000l = "VALUE NOT FOUND FOR SYMBOLIC VARIABLE "symbolic
  CALL QUIT
  END
/* We are now positioned on the symbolic.                                    */
"(PROCLPTR,PROCCOL) = CURSOR"
"(PROCLINE) = LINE " proclptr
/* Truncate the line from cursor pos thru to first space or comma.           */
proccol  = proccol + LENGTH(symbolic)
procline = SUBSTR(procline,proccol,lrecl)
poscomma = POS(',',procline)
posspace = POS(' ',procline)
IF poscomma = 0 THEN poscomma = lrecl
IF posspace = 0 THEN posspace = lrecl
pos2     = MIN(poscomma,posspace) - 1
symres   = SUBSTR(procline,1,pos2)
blippos  = POS("'",symres)
/* Remove any single quotes that may be present.                             */
SELECT
WHEN  blippos ^= 0  THEN  symres = STRIP(symres,BOTH,"'")
OTHERWISE NOP
END
/* If the symbolic is blank, then we may have found the default value in the */
/* jcl procedure. Keep searching to try and find a value for it.             */
SELECT
WHEN symres   = "" THEN where = NEXT
OTHERWISE LEAVE i
END
END
/* Now we have dropped out of the end of the loop with a value for the       */
/* symbolic; Return to the caller with this value concatenated with a        */
/* potential prefix saved earlier in the variable front.                     */
symres = front||symres
RETURN symres


George Perkins
Manager of IBM Systems
Meriter Health Services Inc (USA)                                     c Xephon 1995

