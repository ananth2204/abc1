Enforcing DASD volume security with ACF2
After recently installing the ACF2 product to provide dataset level security at
our installation, we decided that we also wanted to restrict users as to the
DASD volumes that they could allocate datasets to and delete datasets from.  In
ACF2, dataset and volume level security controls are tailorable through the use
of global option records that specify individual criteria for the user’s
environment.  Two such records in ACF2 are the RESVOLS and SECVOLS records.
RESVOLS defines those volumes that should be protected at the dataset level
while the SECVOLS record defines volumes to be protected at the volume level.
Unfortunately, if the RESVOLS record specifies that all volumes are to be
protected, you have dataset protection on all volumes.  If a volume is not
defined in RESVOLS, then it may be specified in the SECVOLS record for volume
protection.  However, specifying a volume in both places only produces dataset
level protection, since the RESVOLS record takes precedence over the SECVOLS
records.  Since we could not use ACF2 facilities natively for both types of
protection, we opted to write an ACF2 exit to simulate DASD volume level
security using ACF2 dataset rules.
We chose to implement the ACF2 dataset post-processing exit as our control point
for DASD allocation.  The basic function of the exit, called DSNPOST, is to
check if dataset access has already been denied.  If so, then this is honoured
and we exit back to the caller.  If the dataset access request is allowed, then
we proceed to check the type of request with regard to DADSM functions
(allocation, scratch, re-name, or catalog management).  The exit checks the
catalog parameter list passed by the caller if the request is for catalog
management functions.  This is done because we will allow catalog manipulation
requests if not accompanied by allocate/scratch requests.  If it is one of the
above functions, we then start to build a new dataset name and rule key to pass
back to ACF2 for re-validation.  The exit checks the UCB or VOLSER pointer in
the ACF2 ACSXP parameter list to determine if the request applies to a DASD
dataset, and if not, allows the request to continue unaltered.  If there is no
UCB pointer, but a VOLSER pointer, the exit uses the MVS UCB scan service
(IOSVSUCB) to match the VOLSER passed in the parameter list with an on-line DASD
VOLSER.  If there is no match found, the exit will allow the request to continue
unaltered.  If there is no volume serial pointer, the exit will generate a dummy
volume serial of ‘@NOVOL’ to indicate that no UCB/volume serial pointer was
present.
After all of the above checking, the exit will build a new dataset name in the
form of DASDVOLS.@volser where volser is the DASD volume serial obtained from
the UCB.  The exit will then return to the caller with a return code indicating
that ACF2 is to re-validate using the newly-built dataset name.  When we come
back in to the exit, it checks to see if the dataset name being validated begins
with the prefix of ‘DASDVOLS.@’.  This indicates that we are coming through a
second time, so ACF2 has performed the validation; at which point we may return
back to the caller.  Also note that this exit issues some non-standard return
codes to indicate unusual conditions such as missing parameter list pointers.
This was put in for debugging purposes.  One other point that the exit checks is
if the original dataset access request is being allowed because a user has the
NON-CNCL attribute, which essentially converts an ACF2 failure into an ACF2
logging.  If this is true, a return code is set preventing and logging the
access and the exit returns to the caller.  This works to ignore the NON-CNCL
attribute during DASD volume security verification.
Using this method, we can build dataset rules with the high-level key of
DASDVOLS to validate requests against.  A sample set of dataset rules is shown
below.  This also adds the extra convenience of having rules for all DASD
volumes under one key.  If we had implemented volume level security as suggested
in the ACF2 manual using generalised resource rules (another feature of ACF2),
we would have to write individual resource rules for each volume.  Using the
exit method also affords the ability to check the type of request (allocate,
scratch, etc) to give more granularity while resource rules would only specify
if a user was allowed to access the volume.  That is, if a user was allowed by
resource rules, he could both allocate and delete datasets on the volume in
question, whereas using the exit the request type can be checked and a decision
could be made individually on the allocate and delete authority.
The exit was written to be easily modifiable for future use.  It has been run on
MVS/SP1.3.5 and should run in MVS/XA if none of the referenced control blocks
moves above the line.  The mapping macro for the catalog parameter DSECT
(IEZCTGPL) was not readily available in standard MVS/370 macro libraries, so it
was hard-coded into the program.  I believe that it is available in MVS/XA, so a
macro invocation could be substituted for the hard-coding.
SAMPLE SET OF DATASET RULES
$KEY(DASDVOLS)
***    RULES BELOW CONTROL ACCESS TO KNOWN DASD VOLUMES
@CICS-  UID(*PROD...SCHED)          R(A) W(A) A(A)
@CICS-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@CICS-  UID(*PROD...DAADM)          R(A) W(A) A(A)
@CICS-  UID(*TEST...MISAP)          R(A) W(A) A(A) UNTIL(10/01/88)
@CICS-  UID(P)                      R(A) W(A) A(A)
@CICS-  UID(*)                      R(A) W(A)
@DBA-   UID(*PROD...DBADM)          R(A) W(A) A(A)
@DBA-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@DBA-   UID(*PROD...DAADM)          R(A) W(A) A(A)
@DBA-   UID(PPROD...PJIDM)          R(A) W(A) A(A)
@DBA-   UID(*)                      R(A) W(A)
@GDG-   UID(*PROD...SCHED)          R(A) W(A) A(A)
@GDG-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@GDG-   UID(*PROD...DAADM)          R(A) W(A) A(A)
@GDG-   UID(P)                      R(A) W(A) A(A)
@GDG-   UID(*)                      R(A) W(A)
@IDMS-  UID(*PROD...DBADM)          R(A) W(A) A(A)
@IDMS-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@IDMS-  UID(*PROD...DAADM)          R(A) W(A) A(A)
@IDMS-  UID(*)                      R(A) W(A)
@LIB-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@LIB-   UID(*)                      R(A) W(A)
@MICS-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@MICS-  UID(*PROD...DAADM)          R(A) W(A) A(A)
@MICS-  UID(*)                      R(A) W(A)
@MIS-   UID(EPROD...PERFC)          R(A) W(A) A(A) UNTIL(09/12/88)
@MIS-   UID(*PROD...SCHED)          R(A) W(A) A(A)
@MIS-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@MIS-   UID(*PROD...DAADM)          R(A) W(A) A(A)
@MIS-   UID(*TEST...MISAP)          R(A) W(A) A(A) UNTIL(12/01/88)
@MIS-   UID(P)                      R(A) W(A) A(A)
@MIS-   UID(*)                      R(A) W(A)
@MVS-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@MVS-   UID(*)                      R(A) W(A)
@PAGE-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@PAGE-  UID(*PROD...DAADM)          R(A) W(A) A(A)
@PAGE-  UID(*)                      R(A) W(A)
@PUB-   UID(*)                      R(A) W(A) A(A)
@SPOOL- UID(*PROD...MVSSP)          R(A) W(A) A(A)
@SPOOL- UID(*)                      R(A) W(A)
@STOR-  UID(*)                      R(A) W(A) A(A)
@SWAP-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@SWAP-  UID(*)                      R(A) W(A)
@SYS-   UID(*PROD...MVSSP)          R(A) W(A) A(A)
@SYS-   UID(*)                      R(A) W(A)
@TCAM-  UID(*PROD...MVSSP)          R(A) W(A) A(A)
@TCAM-  UID(EPROD...VTASP)          R(A) W(A) A(A)
@TCAM-  UID(EPROD...DAADM)          R(A) W(A) A(A)
@TCAM-  UID(*)                      R(A) W(A)
@TEST   UID(*)                      R(A) W(A) A(A)
@TSO-   UID(*)                      R(A) W(A) A(A)
@VSAM-  UID(EPROD...DAADM)          R(A) W(A) A(A)
@VSAM-  UID(EPROD...MVSSP)          R(A) W(A) A(A)
@VSAM-  UID(*)                      R(A) W(A)
@WORK-  UID(*)                      R(A) W(A) A(A)
***    RULE BELOW CONTROLS ACCESS TO UNKNOWN DASD VOLUMES
@-      UID(*)                      R(A) W(A) A(P)
PROGRAM SOURCE CODE
*** DSNPOST-ACF2 DATASET POST-VALIDATION EXIT                       ***
*   FUNCTION: THIS EXIT IS TAKEN FROM TYPE=S SVC CALL AFTER DATASET   *
*        ACCESS VALIDATION. IF ACCESS IS DENIED UPON ENTRY, THEN      *
*        EXIT. IF ACCESS IS GRANTED THEN WE OBTAIN THE VOLUME SERIAL  *
*        AND GENERATE A PSEUDO DATASET NAME IN THE FORM OF            *
*        'DASDVOLS.@XXXXXX' AND THE SVC IS RE-INVOKED WITH THE NEW    *
*        KEY OF 'DASDVOLS' TO CHECK VOLUME SECURITY (XXXXXX IS THE    *
*        DASD VOLSER FOR WHICH ACCESS IS REQUESTED).                  *
*  ATTRIBUTES:  REENTRANT, REUSABLE                                   *
*       STATE:  KEY 0, SUPERVISOR                                     *
*  RETURN CODES: THE STANDARD CODES ALLOWED BY THE EXIT PLUS THE      *
*        FOLLOWING ILLEGAL RETURN CODES FOR DEBUGGING PURPOSES:       *
*        254 - NO ACSXP PARMLIST POINTER SUPPLIED UPON ENTRY          *
*        253 - NO RULE KEY POINTER SUPPLIED                           *
*        252 - NO CATALOG PARMLIST POINTER FOR CMS ACCESS SUPPLIED    *
***      251 - NO DSN POINTER FOR NEW RULE BUILD SUPPLIED           ***
DSNPOST  CSECT                    ESTABLISH CSECT
         SAVE  (14,12),,DSNPOST-&SYSDATE
         LR    R12,R15            LOAD R12 W/EPA ADDRESS
         USING DSNPOST,R12        ESTABLISH ADDRESSABILITY TO CSECT
         LA    R15,254            LOAD ILLEGAL RETURN CODE
         LTR   R10,R1             WAS A PARM LIST PASSED
         USING ACSXP,R10          ESTABLISH ADDRESSABILITY TO DSECT
         BZ    RETURN2            NO, GO RETURN
         GETMAIN RU,LV=WORKLEN    GETMAIN WORKAREA
         ST    R13,4(R1)          ST CALLER'S S/A ADDR IN MY S/A
         ST    R1,8(R13)          ST MY S/A ADDR IN CALLER'S S/A
         LR    R13,R1             LOAD ADDR OF MY S/A IN R13
         USING WORKAREA,R13       ESTABLISH ADDRESSABILITY TO DSECT
         XC    VOLUME(CLEARLEN),VOLUME CLEAR GETMAIN WORK AREAS
         LA    R15,0              LOAD RETURN CODE TO CONTINUE
         L     R2,RCTBLEN         LOAD R2 W/LENGTH OF RETURN CODE TABLE
         LA    R3,RCTABLE         LOAD R3 W/A(RETURN CODE TABLE)
RCLOOP   CLC   ACUUARSN,0(R3)     IS REASON CODE = TABLE ENTRY?
         BE    RETURN             YES, RETURN NOW
         LA    R3,1(R3)           ELSE, POINT TO NEXT TABLE ENTRY
         BCT   R2,RCLOOP          LOOP BACK TO CHECK NEXT ENTRY
***      CHECK REQUEST TYPE AND IF IT HAS ALREADY BEEN PROCESSED    ***
         CLI   ACUUFLG3,ACUU3CMS  IS IT CATALOG MGMT ACCESS?
         BE    CHKCMS             YES, GO CHECK TYPE OF REQUEST
         CLI   ACUUFLG3,ACUU3DSD  IS IT DADSM NEW ALLOCATE ACCESS?
         BE    GETKEY             YES, CONTINUE
         CLI   ACUUFLG3,ACUU3REN  IS IT RENAME ACCESS?
         BE    GETKEY             YES, CONTINUE
         CLI   ACUUFLG3,ACUU3SCR  IS IT SCRATCH/DELETE ACCESS?
         BNE   RETURN             ELSE GO RETURN
GETKEY   LA    R15,253            LOAD ILLEGAL RETURN CODE
         ICM   R2,15,ACUUKEY      LOAD R2 W/A(RULE KEY) IF ANY
         BZ    RETURN             NO KEY, GO RETURN
         CLC   0(L'DASDRULE,R2),DASDRULE IS THIS THE SECOND TIME THRU?
         BNE   CHECKUCB           NO, SET UP DASDVOLS VALIDATION
         LA    R15,0              ELSE, LOAD RETURN CODE TO CONTINUE
         CLI   ACUUARSN,ACUUA002  IS ACCESS ALLOWED BECAUSE NON-CNCL?
         BNE   RETURN             NO, GO RETURN
         LA    R15,16             ELSE, LOAD RETURN CODE TO PREVENT/LOG
         B     RETURN             GO RETURN
CHKCMS   LA    R15,252            LOAD ILLEGAL RETURN CODE
         ICM   R2,15,ACUUDATA     LOAD R2 W/A(CATLG PARMLIST) IF ANY
         USING IEZCTGPL,R2        ESTABLISH ADDRESSABILITY TO DSECT
         BZ    RETURN             NO CATLG PARMLIST, GO RETURN
         LA    R15,0              LOAD RETURN CODE TO CONTINUE
         TM    CTGOPTNS,CTGVVDS   IS THIS A VVDS CALL?
         BO    GETKEY             YES, GO CHECK KEY
         TM    CTGOPTNS,CTGDELET  IS THIS IDCAMS DELETE?
         BO    DELTYPE            YES, GO CHECK DELETE TYPE
         TM    CTGOPTNS,CTGDEFIN  IS THIS IDCAMS DEFINE?
         BO    DEFTYPE            YES, GO CHECK DEFINE TYPE
         B     GETKEY             ELSE, GO CHECK KEY
DEFTYPE  MVI   CTLGSW,X'FF'       ASSUME CATALOG-ONLY OP. SWITCH
         CLI   CTGTYPE,CTGALIN    IS IT DEF NONVSAM?
         BE    GETKEY             YES, GO CHECK KEY
         CLI   CTGTYPE,CTGTGBS    IS IT DEFINE GDGBASE?
         BE    GETKEY             YES, GO CHECK KEY
         CLI   CTGTYPE,CTGTPTH    IS IT DEFINE PATH?
         BE    GETKEY             YES, GO CHECK KEY
         CLI   CTGTYPE,CTGTANM    IS IT DEFINE ALIAS?
         BE    GETKEY             YES, GO CHECK KEY
         MVI   CTLGSW,X'00'       ELSE, RESET CATALOG-ONLY OP. SWITCH
         B     GETKEY             ELSE, GO CHECK KEY
DELTYPE  TM    CTGOPTN2,CTGSCR    IS IT DELETE SCRATCH?
         BO    GETKEY             YES, GO CHECK KEY
         MVI   CTLGSW,X'FF'       SHOW CATALOG-ONLY OPERATION
         B     GETKEY             GO CHECK KEY
***      SETUP TO BUILD NEW KEY & RULE FOR DASD VALIDATION          ***
CHECKUCB ICM   R1,15,ACUUUCB      LOAD R1 W/A(UCB) IF ANY
         USING UCBOB,R1           ESTABLISH ADDRESSABILITY TO DSECT
         BZ    CHECKVOL           NO UCB ADDR, GO CHECK VOLSER
         TM    UCBSTAT,UCBONLI    IS DEVICE ONLINE?
         BZ    CHECKVOL           NO, GO CHECK VOLSER
         LA    R15,0              LOAD RETURN CODE TO CONTINUE
         TM    UCBDVCLS,UCB3DACC  IS IT A DASD UCB?
         BZ    RETURN             NO, RETURN
         MVC   VOLUME,UCBVOLI     SAVE VOLSER
         B     BUILDDSN           GO BUILD DSN FOR VALIDATION
CHECKVOL ICM   R1,15,ACUUVOL      LOAD R1 W/A(VOLSER POINTER) IF ANY
         BZ    NOVOL              NO VOLSER ADDR, GO USE DUMMY VOLSER
         MVC   VOLUME,0(R1)       SAVE VOLSER FOR LATER COMPARISON
         LA    R15,IOSWORK        LOAD R15 W/A(IOSWORK)
         ST    R15,IOSWKPTR       STORE IT
         LA    R15,IOSTYPE        LOAD R15 W/A(IOSTYPE)
         ST    R15,IOSTYPPT       STORE IT
         LA    R15,IOSUCB         LOAD R15 W/A(IOSUCB)
         ST    R15,IOSUCBPT       STORE IT
         OI    IOSUCBPT,X'80'     TURN ON HIGH-ORDER BIT
         MVI   IOSTYPE,UCB3DACC   INDICATE DASD ONLY
         XC    IOSWORK,IOSWORK    CLEAR IOSVSUCB WORK AREA
         XC    IOSUCB,IOSUCB      CLEAR UCB POINTER
UCBLOOP  L     R15,CVTPTR         LOAD R15 W/A(CVT)
         USING CVTMAP,R15         ESTABLISH ADDRESSABILITY TO DSECT
         LA    R1,IOSWKPTR        LOAD R1 W/A(PARM LIST)
         L     R15,CVTUCBSC       LOAD R15 W/A(SCAN SERVICE)
         BALR  R14,R15            INVOKE UCBSCAN SERVICE
         LTR   R15,R15            ARE THERE ANY MORE UCBS?
         BZ    LOADUCB            YES, GO GET IT
         LA    R15,0              ELSE, LOAD RETURN CODE TO CONTINUE
         B     RETURN             GO RETURN
LOADUCB  L     R1,IOSUCB          LOAD R1 W/A(UCB)
         USING UCBOB,R1           ESTABLISH ADDRESSABILITY TO DSECT
         TM    UCBSTAT,UCBONLI    IS DEVICE ONLINE?
         BZ    UCBLOOP            NO, GO CHECK NEXT UCB
         TM    UCBDVCLS,UCB3DACC  IS DEVICE DASD?
         BZ    UCBLOOP            NO, GO CHECK NEXT UCB
         CLC   UCBVOLI,VOLUME     IS IT THE SAME VOLSER?
         BNE   UCBLOOP            NO, GO CHECK NEXT UCB
         B     BUILDDSN           ELSE, GO BUILD DSN FOR VALIDATION
NOVOL    CLI   CTLGSW,X'FF'       WAS IT A CATALOG-ONLY OPERATION?
         BNE   NULLVOL            NO, GO SET UP DUMMY VOLSER
         LA    R15,0              ELSE, LOAD RETURN CODE TO CONTINUE
         B     RETURN             GO RETURN
NULLVOL  MVC   VOLUME,NULLSER     MOVE DUMMY VOLSER IF ACUUVOL=0
***      REPLACE DATASET NAME WITH 'DASDVOLS.@VOLSER' & RETURN WITH ***
***      RC=24 TO RETRY DATASET VALIDATION WITH NEW INFO.           ***
BUILDDSN LA    R15,251            LOAD ILLEGAL RETURN CODE
         ICM   R2,15,ACUUDSN      LOAD R2 W/A(CURRENT DSN) IF ANY
         BZ    RETURN             NO DSN, GO RETURN
         MVI   0(R2),C' '         BLANK OUT THE
         MVC   1(43,R2),0(R2)           PREVIOUS DSN
         MVC   0(RULELEN,R2),DASDRULE MOVE IN NEWLY GENERATED
         MVC   RULELEN(L'VOLUME,R2),VOLUME    DATASET NAME
         ICM   R2,15,ACUUKEY      LOAD R2 W/A(RULE KEY)
         MVC   0(L'DASDRULE,R2),DASDRULE MOVE NEW 'DASDVOLS' RULE KEY
         LA    R15,24             LOAD RETURN CODE TO RE-VALIDATE
RETURN   LR    R3,R15             SAVE R15 ACROSS FREEMAIN
         LR    R1,R13             LOAD R1 W/A(SAVE AREA)
         L     R13,4(R13)         LOAD R13 W/A(CALLERS SAVE AREA)
         FREEMAIN RU,LV=WORKLEN,A=(1) FREEMAIN WORKAREA
         LR    R15,R3             LOAD R15 WITH RETURN CODE
RETURN2  RETURN (14,12),RC=(15)   RETURN
DASDRULE DC    C'DASDVOLS'        NEW DASD RULE KEY ------------------|
         DC    C'.@'              NODE SEPARATOR & VOLUME PREFIX      |
RULELEN  EQU   *-DASDRULE         LENGTH OF NEW DSN ------------------|
NULLSER  DC    CL6'@NOVOL'        DUMMY VOLSER
WORKAREA DSECT
SAVEAREA DS    18F                OS SAVEAREA (MUST BE FIRST)
VOLUME   DS    CL6                VOLUME BUFFER
IOSWKPTR DS    F                  A(IOSVSUCB WORK AREA) --------------|
IOSTYPPT DS    F                  A(IOSVSUCB UCB TYPE INDICATOR)      |
IOSUCBPT DS    F                  A(IOSVSUCB UCB POINTER) ------------|
IOSUCB   DS    F                  IOSVSUCB UCB
IOSWORK  DS    CL100              IOSVSUCB WORK AREA
IOSTYPE  DS    C                  IOSVSUCB DEVICE TYPE INDICATOR
CTLGSW   DS    C                  INDICATOR FOR CATALOG MGMT CALL
CLEARLEN EQU   *-VOLUME           LENGTH OF AREA TO CLEAR
WORKLEN  EQU   *-WORKAREA         LENGTH OF WORKAREA DSECT
IEZCTGPL DSECT                    CATALOG PARAMETER LIST
CTGOPTN2 EQU   IEZCTGPL+2,1       SECOND OPTION BYTE
CTGSCR   EQU   X'02'              SCRATCH SPACE OPTION
CTGOPTNS EQU   IEZCTGPL+16,1      CMS REQUEST OPTIONS
CTGDEFIN EQU   X'08'              DEFINE
CTGALTER EQU   X'10'              ALTER
CTGDELET EQU   X'18'              DELETE
CTGLTCAT EQU   X'20'              LISTCAT
CTGCNVTX EQU   X'30'              CONVERTV
CTGVVDS  EQU   X'48'              VVDS CALL
CTGTYPE  EQU   IEZCTGPL+18,1      TYPE OF CATALOG RECORD
CTGTALIN EQU   C'A'               NON-VSAM DATA SET
CTGTGBS  EQU   C'B'               GDG BASE
CTGTCL   EQU   C'C'               CLUSTER
CTGTDATA EQU   C'D'               DATA SET
CTGTFREE EQU   C'F'               FREE
CTGTAIX  EQU   C'G'               ALTERNATE INDEX
CTGTINDX EQU   C'I'               INDEX
CTGTMCAT EQU   C'M'               MASTER CATALOG
CTGTPGSP EQU   C'P'               PAGE SPACE
CTGTPTH  EQU   C'R'               PATH
CTGTUCAT EQU   C'U'               USER CATALOG
CTGTVOL  EQU   C'V'               VOLUME
CTGTANM  EQU   C'X'               ALIAS NAME
CTGTUPG  EQU   C'Y'               UPGRADE
         ACSXP
         ACCVT
         IEFUCBOB
         CVT   DSECT=YES
DSNPOST  CSECT
RCTABLE  DC    AL1(14,15,16,17)   RETURN CODE TABLE
         DC    AL1(18,19,21,22)
         DC    AL1(128,129,130,131)
         DC    AL1(132,133,134,135)
         DC    AL1(136,137,138,143)
         DC    AL1(147,151,157)
RCTBEND  EQU   *                  END OF RETURN CODE TABLE
         DS    0F
RCTBLEN  DC    A(RCTBEND-RCTABLE) LENGTH OF RETURN CODE TABLE
         END


Bruce Bordonaro
System Software Manager
EDS (USA) © EDS 1988

























































