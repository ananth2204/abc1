Front-ending and back-ending SVCs

The idea of front-ending standard system SVCs has been
around for quite some time. The most widely used method is to
replace the SVC entry routine address (in the system
SVCTABLE) by the user's own SVC routine. The user's own
routine can then gain control directly from the SVC FLIH
before the standard system SVC routine. The user has the
options of either branching to the standard SVC or
returning to the SVC FLIH (via register 14) with a normal or
abnormal return code.

This method has been used by a number of software products
and user modifications to intercept standard system SVCs. The
main purposes for doing so are:

o      To verify and/or reject an SVC call.

o      To perform additional processing before returning to the
      standard SVC.

o      To functionally replace the standard system SVC.

The system SVCTABLE used to reside in common storage
below the 16-megabyte line and could be updated by any
authorized user. In recent years, this table has been moved
above the line and is now page-protected (ie even key zero
users cannot update it). In order to update it, a special macro
SVCUPDTE has to be used.

Updating the SVCTABLE obviously has a system-wide effect
on all users. In cases where only SVC calls from one single
address space are to be intercepted, another method called
'SVC screening' is available. Following are the general steps
required to turn on SVC screening for a TCB:

1      Allocate a screening table (preferably in LSQA) and
      initialize it in the following format:

      -      Bytes 0 to 7 - user SVC routine address and attributes
            (format is the same as the regular system SVCTABLE
            entry).

      -      Bytes 8 to 263 - 255-byte mask, one for each possible
            SVC. Initially, every byte is set to X'80' to indicate
            screening is off. If screening is to be activated for any
            SVC, just set the corresponding byte to X'00'.

2      Turn on the TCBSVCS bit in TCBFLGS7 of the TCB
      when SVC screening is to be activated.

SVC FLIH always checks the TCBSVCS bit of the current
TCB. If it is on, it will check the screening mask byte that
matches the SVC interrupt code. If the matching byte is X'00',
then it will pass control to the user SVC routine address
specified in byte 0 to 7 of the screening table.

If more than one SVC is being screened, the same user SVC
routine will be entered for all the screened SVCs. The user
SVC routine will have to analyse the SVC interrupt code and
process it accordingly.

If system SVCs are being screened, the user SVC routines can
either return to SVC FLIH or, optionally, branch to the normal
system routine in the SVCTABLE. (SVC FLIH will not invoke
the standard system SVC if it is screened). As with updating
the system SVCTABLE, SVC screening for a TCB can only be
done by authorized users.

So far I have summarized the techniques used for front-ending
an SVC, ie gaining control before the regular system SVC.
However, once the so-called front-end of an SVC branches
back to the regular system SVC, it has really no way of
knowing whether the subsequent SVC routine (or, quite often,
yet another front-end for the same SVC) is successful or not.
For this reason, the technique of developing a back-end of an
SVC call is developed to gain control after all front-end
routines and the standard system SVC have been processed and
before the SVC FLIH returns to the original SVC caller.

The practical reasons for implementing a back-end for an SVC
are mainly:

1      To inform another program or system immediately of the
      result of the SVC call.

2      To provide the last opportunity to review the parameters
      and registers returned to the SVC caller and perform
      further processing before returning to the SVC caller.

There are no back-end tables that can be used to set up a back-
end. Instead, a method has been developed to use the fact that
SVC FLIH always returns to the SVC caller using the address
stored in the field RBOPSW (of the caller's PRB or SVRB).

The following programs have been developed to demonstrate
the steps to set up the front-end and back-end of a system SVC
(BLDL):

1      PWLSCRNI - the driver routine that will turn on SVC
      screening for BLDL (SVC 18) for the current task. It will
       then issue a test BLDL in problem state to exercise the
      screening SVC front-end and back-end routines. It will
      also write part of the directory entry returned by the system
      BLDL SVC to the file PRINT (to show the system SVC
      has been executed properly).

2      PWLSCRNR - the screening routine for BLDL. Upon
      entry, it will verify the SVC number and then branch to the
      front-end routine, PWLSCRNF.

3      PWLSCRNF - the front-end routine. It will allocate an
      area to be used as a save area by the back-end routine. It
      will also pass the address of a parameter to the back-end
      routine. On exit, it will branch to the standard system SVC
      routine for BLDL.

4      PWLSCRNB - the back-end routine. Before returning to
      the SVC caller (which is PWLSCRNI in this case), this
      back-end routine will get control first. For demonstration
      purposes, this routine is simply coded to display the
      parameter passed from the front-end using a WTO.
      Because the back-end routine will run in the problem state
      caller's key, an ESTAE routine is set up for recovery
      purposes. If the caller is another SVC, a FESTAE routine
      would be required.

This set of programs has been used to successfully screen
(intercept) type 2, 3, or 4 SVCs. For type 1 and 6 SVCs, since
they either run under an SRB and/or disabled, special
considerations will be required (eg setting up FRR for
recovery, preventing the issuing of another SVC, etc).

Obviously, instead of TCB screening, the system SVCTABLE
can also be modified directly to set up both front-end and back-
end processing.


Source listing for PWLSCRNI

PWLSCRNI PWLINIT
* INVOKE SVC SCREENING FOR CURRENT TCB
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=3
         GETMAIN RC,LV=SCRNTABL,SP=255 LSQA
         LTR   R15,R15
         BNZ   ERREXIT1
         LR    R8,R1                   SAVE GOTTEN ADDR
         MVI   8(R8),X'80'
         MVC   9(255,R8),8(R8)         INIT SSTMASK
* SCREENING ROUTINE PROCESSES SCREENED SVCS AND RETURN TO SVC FLIH
*   AT THE END. (THIS CAN BE USED TO FRONT-END ANY SVC - FOR THE
*   CURRENT TASK).
         MVI   26(R8),X'00'            SCREEN BLDL (SVC 18)
         LOAD  EPLOC=PWLSCRNR,ERRET=ERREXIT4
         LR    R15,R0
         ST    R15,0(R8)               SAVE SCREENING ROUTINE ADDR
*        MVC   4(4,R8),SVCATTR         ATTR BYTES  (TYPE 3/4)
         MVC   4(4,R8),SVCATTR1        ATTR BYTES  (TYPE 2)
         L     R2,X'218'               TCB
         TM    X'CB'(R2),X'08'         TCBFLGS7
         BO    ERREXIT2                EXIT IF ALREADY SCREENING
         CLC   X'124'(4,R2),ZERO       TCBSVCA2
         BNZ   ERREXIT3                EXIT IF NOT ZERO
         ST    R8,X'124'(R2)           STORE SCREEN TABLE ADDR
         OI    X'CB'(R2),X'08'         TURN ON TCBSVCS BIT
         WTO   'PWLSCRNI1I - SVC SCREENING TURNED ON',ROUTCDE=11
         B     SVC01                   GO ISSUE SVC TO TEST
ERREXIT1 DS    0H
         WTO   'PWLSCRNI2E - ERROR EXIT 1',ROUTCDE=11
         B     EXIT2
ERREXIT2 DS    0H
         WTO   'PWLSCRNI3E - ERROR EXIT 2',ROUTCDE=11
         B     EXIT1
ERREXIT3 DS    0H
         WTO   'PWLSCRNI4E - ERROR EXIT 3',ROUTCDE=11
         B     EXIT1
ERREXIT4 DS    0H
         WTO   'PWLSCRNI5E - ERROR EXIT 4',ROUTCDE=11
         B     EXIT1
SVC01    DS    0H                      ISSUE SVC TO TEST
         MODESET KEYADDR=OLDKEY,WORKREG=3 BACK TO PROBLEM STATE
         MODESET MODE=PROB
*        OPEN  (IN1,(INPUT))            ISSUE SVC FROM PROBLEM STATE
*        BLDL  IN1,BLDLIST              BLDL FROM PRIVATE LIB
*        CLOSE (IN1)
         BLDL  0,BLDLIST                BLDL FROM LINKLST
         OPEN  (PRINT,(OUTPUT))
         MVC   RECAREA(76),BLDLDE
         PUT   PRINT,RECAREA
         CLOSE (PRINT)
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=3
         NI    X'CB'(R2),255-X'08'     TURN OFF TCBSVCS BIT
         WTO   'PWLSCRNI6I - SVC SCREENING TURNED OFF',ROUTCDE=11
EXIT1    DS    0H
         FREEMAIN RC,LV=SCRNTABL,A=(8),SP=255
EXIT2    DS    0H
         MODESET KEYADDR=OLDKEY,WORKREG=3
         B     EXIT                    EXIT LABEL IN PWLINIT
OLDKEY   DS    F
PWLSCRNR DC    C'PWLSCRNR'
SVCATTR  DC    X'C1000000'             TYPE 3/4, ASSISTABLE, NO LOCKS
SVCATTR1 DC    X'81000000'             TYPE 2,   ASSISTABLE, NO LOCKS
ZERO     DC    F'0'
SCRNTABL EQU   264
IN1      DCB   DDNAME=IN1,MACRF=(R),DSORG=PO
PRINT    DCB   DDNAME=PRINT,MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=80,     X
               BLKSIZE=3200
RECAREA  DC    CL80' '
BLDLIST  DC    X'0001',X'004C'
BLDLDE   DC    CL8'IEBGENER',XL6'00',CL62' '
         END   PWLSCRNI


Source listing for PWLSCRNR

PWLSCRNR CSECT
PWLSCRNR AMODE 31
PWLSCRNR RMODE ANY
         EXTRN SVCRTN
* SVC SCREENING ROUTINE
* R5 = SVRB ADDR
* R1 = RETURN ADDR
         USING *,R6
         USING RBBASIC,R5
         STM   R14,R7,RBEXSAVE         SAVE IN EXTENDED SAVE AREA
         SLR   R9,R9
         ICM   R9,7,RBLINKB            PREV RB
         LA    R8,RBPRFXLN
         SR    R9,R8                   PT TO RB PREFIX
         USING RBPRFX,R9
         CLI   RBINTCOD+1,PWLSVCNO     SVC TO BE SCREENED?
         BNE   EXIT                    NO.
         L     R6,=A(SVCRTN)           YES. BR TO SVC ROUTINE
         L     R6,0(,R6)
         BSM   0,R6
EXIT     DS    0H
         BSM   0,R14
PWLSVCNO EQU   18                      BLDL
         IHARB ,
         END   PWLSCRNR


Source listing for PWLSCRNF

PWLSVCF0 CSECT
PWLSVCF0 AMODE 31
PWLSVCF0 RMODE ANY
* SVC ROUTINE FOR SCREENED SVC
         ENTRY SVCRTN
         USING *,R6
         USING RBBASIC,R5
*                                      INDICATE SVC ENTERED
         WTO   'PWLSCRNF1I - SVC FRONT-END ENTERED',ROUTCDE=11
*TURN OFF SCREENING HERE BECAUSE LOAD ALSO ISSUES BLDL, AND IF BLDL
*IS SCREENED, THIS CODE WILL BE ENTERED TWICE, RESULTING IN ABENDA06
         L     R2,X'218'               TCB
         NI    X'CB'(R2),255-X'08'     TURN OFF TCBSVCS BIT
         LOAD  EP=PWLSCRNB             LOAD SVC BACK-END
         OI    X'CB'(R2),X'08'         TURN ON TCBSVCS BIT
         LR    R8,R0                   SAVE ADDR OF SVC BACK-END
         L     R3,X'218'
         USING TCB,R3
         MODESET EXTKEY=RBT234,SAVEKEY=(2),WORKREG=1
         DROP  R3
* GETMAIN IN SVC CALLER'S KEY
         GETMAIN RC,LV=88,SP=230       GET SAVEAREA+SUFFIX FOR BACK-END
         LR    R4,R1
         LR    R3,R15
         MODESET KEYREG=R2             RESTORE KEY
         LTR   R3,R3
         BZ    SCRNF010
         WTO   'PWLSCRNF2E - GETMAIN FOR BACK-END FAILED',ROUTCDE=11
         B     EXIT1
SCRNF010 DS    0H
         LR    R2,R4
         LA    R1,PARMS
         MVC   72(4,R2),=C'SCRN'       STORE ID IN SUFFIX
         ST    R1,76(,R2)              STORE PARM ADDR IN SUFFIX
         MVC   84(4,R2),RBGRS13        SAVE CALLER'S R13 IN SUFFIX
         L     R1,RBGRS0               RESTORE R0 (PARMLST PTR) - BLDL
*        MVC   PARMS(20),0(R1)         MOVE BLDLIST TO PARM
         MVC   PARMS(20),=CL20'PARM FROM FRONT-END '
* R1 IN SVRB NOT RESTORED ON RETURN TO CALLER. R13 WILL BE RESTORED.
         L     R1,RBGRS13              GET CALLER'S R13
         ST    R2,8(,R1)               CHAIN MINE TO CALLER'S
         ST    R1,4(,R2)               CHAIN CALLER'S TO MINE
         ST    R2,RBGRS13              CHANGE R13 TO POINT TO MINE
* ALSO CHANGE R13 IN SVRB SAVE AREA TO POINT TO MINE
         LR    R13,R2                  CHANGE R13 TO POINT TO MINE
         SLR   R9,R9
         ICM   R9,7,RBLINKB            PREV RB
         MVC   80(4,R2),X'14'(R9)      SAVE RBOPSW IN SUFFIX
         ST    R8,X'14'(,R9)           CHANGE RBOPSW OF CALLER'S RB
         OI    X'14'(R9),X'80'         INDICATE AMODE 31
EXIT1    DS    0H
         L     R8,16                   CVT
         L     R8,X'C8'(R8)            SCVT
         L     R8,X'84'(R8)            SVCTABLE
         LA    R8,0(R8)
         SLR   R7,R7
         LA    R7,SVCNUM
         MH    R7,=H'8'                CAL OFFSET
         ALR   R8,R7                   R8=SVCTABLE ENTRY ADDRESS
         L     R8,0(R8)
         LM    R14,R7,RBEXSAVE
         LR    R6,R8                   ORIGINAL SYSTEM SVC
         BSM   R0,R6
PARMS    DS    CL20                    PARM PASSED TO BACK-END
SVCRTN   DC    A(X'80000000'+PWLSVCF0)
SVCNUM   EQU   18
         DROP  R6
         IKJTCB
         IHARB ,
         END   PWLSVCF0


Source listing for PWLSCRNB

*  SVC BACK-END ROUTINE
PWLSCRNB CSECT
PWLSCRNB AMODE 31
PWLSCRNB RMODE ANY
*  SVC BACK-END ROUTINE
*  BACK-END RUNS IN SVC CALLER'S KEY AND MODE
*  ON ENTRY:
*     R2 = ADDR OF SAVEAREA+SUFFIX PASSED FROM FRONT-END (88 BYTES)
*         +00 START OF 72 BYTE SAVE AREA FOR THIS BACK-END
*         +72 ID   C'SCRN'
*         +76 ADDR 0F PARM FROM FRONT-END
*         +80 CALLER'S RBOPSW
*         +84 CALLER'S R13
*         +88 SVC NO(1 BYTE) + 3 BYTE RESERVED
*    R13 = SAVEAREA OBTAINED BY FRONTEND (SAVEAREA+SUFFIX)
*   SAVEAREA CHAINS: CALLER'S --> FRONT-END (+SUFFIX) --> BACK-END
         STM   R14,R12,12(R13)  STORE IN SAVEAREA OBTAINED BY FRONT-END
         BALR  R12,R0
         USING *,R12
         GETMAIN RC,LV=WORKL   GET BACK-END SAVEAREA
         LTR   R15,R15
         BNZ   EXIT200
         LR    R6,R13          SAVE POINTER TO FRONT-END SAVEAREA
         LR    R13,R1          POINT TO BACK-END SAVEAREA
         ST    R6,4(,R13)      CHAIN FRONT-END TO BACK-END
         ST    R13,8(,R6)      CHAIN BACK-END TO FRONT-END
         B     START100
         DC    C'PWLSCRNB &SYSDATE &SYSTIME'
START100 DS    0H
         USING WORK,R13
         CLC   =C'SCRN',72(R6) CHECK ID
         BNE   EXIT200
         LTR   R15,R15         TEST RC FROM SVC FLIH
         BZ    START102
         WTO   'PWLSCRNB1I - ERROR RETURN FROM SVC FLIH',ROUTCDE=11
         B     EXIT100
START102 DS    0H
         ESTAE ESTAEXIT
         LTR   R15,R15
         BZ    START110
         WTO   'PWLSCRNB2E - FAILED TO SET UP ESTAE',ROUTCDE=11
         B     EXIT100
START110 DS    0H
*                              ENTERING BACK-END PROCESSING
         WTO   'PWLSCRNB3I - SVC BACK-END ENTERED',ROUTCDE=11
         L     R2,76(,R6)      ADDR OF PARMS PASSED FROM FRONT-END
         MVC   MSG(L'MSG4),MSG4
         MVC   MSG+L'MSG4(20),0(R2)  DISPLAY PARM FROM FRONT-END
         $#WTO MSG,L'MSG4+20
EXIT100  DS    0H              NORMAL EXIT
         LR    R2,R13          SAVE POINTER TO BACK-END SAVEAREA
         L     R13,4(,R13)     POINT TO FRONT-END SAVEAREA
         FREEMAIN RC,LV=WORKL,A=(R2) FREE BACK-END SAVEAREA
         L     R14,80(,R13)    RESTORE CALLER'S RETURN ADDR
         LM    R15,R0,16(R13)  RESTORE R15-R0
         LR    R1,R12          SAVE MY BASE
         LM    R2,R12,28(R13)  RESTORE R2-R12
         L     R13,4(,R13)     POINT TO CALLER'S SAVEAREA
         STM   R14,R12,12(R13) SAVE ALL REGS IN CALLER'S SAVEAREA
         LR    R12,R1          RESTORE MY BASE
         L     R2,8(,R13)      POINT TO FRONT-END SAVEAREA
         FREEMAIN RC,LV=88,A=(R2) FREE FRONT-END SAVEAREA
         WTO   'PWLSCRNB5I - SVC BACK-END EXITING',ROUTCDE=11
EXIT200  DS    0H              NORMAL EXIT
         LM    R14,R12,12(R13) RESTORE ALL REGS FROM CALLER'S SAVEAREA
         BSM   0,R14
ERREXIT  DS    0H
         WTO   'PWLSCRNB6I - RETRY SUCCESSFUL'
         B     EXIT100
ESTAEXIT DS    0H
         USING ESTAEXIT,R12
         LR    R12,R15
         LR    R10,R14         SAVE RETURN ADDR
         L     R4,=A(ERREXIT)  LOAD RETRY ADDR
         SETRP RC=4,RETADDR=(R4),RETREGS=YES   INDICATE RETRY
         LR    R14,R10         RESTORE RETURN ADDR
         BR    R14
MSG4     DC    C'PWLSCRNB4I - '
WORK     DSECT
SAVEAREA DS    CL72
MSG      DS    CL80
WORKL    EQU   *-SAVEAREA
         IHASDWA
         END   PWLSCRNB


Source listing for $#WTO

         MACRO
&LABEL   $#WTO  &MSG,&MSGLEN,&R=,&ROUTCDE=,&WRK=,&DESC=
         LCLC  &RR1
         LCLC  &LAB
         LCLA  &LEN
&SW1     SETA  0
         AIF   ('&LABEL' EQ '').NL
&LAB     SETC  '&LABEL'
         AGO   .NL1
.NL      ANOP
&LAB     SETC  '#MSG&SYSNDX'
.NL1     ANOP
         AIF   ('&MSG' NE '').ML1
.*
         AIF   ('&R'(1,1) EQ '(').ISREGA
         AGO   .ERR1
.ISREGA  ANOP
         LA    R1,0&R
         AGO   .ML30
.ML1     ANOP
         CNOP  0,4
         BAL   R1,W9&SYSNDX
W3&SYSNDX DC    AL2(L'&MSG+4)           TEXT LENGTH
         DC    AL2(0)                   MCS FLAGS
W2&SYSNDX DC   CL120' '                 TEXT+ROUT+DESC
W4&SYSNDX DC    AL2(L'&MSG)             MSG LENGTH
         AIF   ('&ROUTCDE' EQ '').ML7
         AIF   ('&DESC' EQ '').ML9
R1&SYSNDX WTO  ' ',ROUTCDE=&ROUTCDE,DESC=&DESC,MF=L
&SW1     SETA  1
         AGO   .ML8
.ML9     ANOP
R2&SYSNDX WTO  ' ',ROUTCDE=&ROUTCDE,MF=L
&SW1     SETA  2
         AGO   .ML8
.ML7     ANOP
         AIF   ('&DESC' EQ '').ML8
R3&SYSNDX WTO  ' ',DESC=&DESC,MF=L
&SW1     SETA  3
.ML8     ANOP
W9&SYSNDX DS   0H
         AIF   ('&MSGLEN' EQ '').ML10
         LA    R14,&MSGLEN               MESSAGE LENGTH
         LA    R14,4(R14)
         STH   R14,W3&SYSNDX
         AGO   .ML12
.ML10    ANOP
         LH    R14,W4&SYSNDX             MESSAGE LENGTH
.ML12    ANOP
         AIF   ('&WRK' EQ '').ML14
         LA    R15,&WRK
         MVC   0(4,R15),0(R1)            MOVE IN PREFIX
         LA    R15,4(R15)
         LA    R1,&WRK
         AGO   .ML16
.ML14    ANOP
         LA    R15,W2&SYSNDX
.ML16    ANOP
         BCTR  R14,R0
         EX    R14,MV&SYSNDX
         B     MV9&SYSNDX
MV&SYSNDX DS   0H
         MVC   0(0,R15),&MSG
MV9&SYSNDX DS  0H
         AIF   ('&SW1' EQ '1').ML20
         AIF   ('&SW1' EQ '2').ML21
         AIF   ('&SW1' EQ '3').ML22
         AGO   .ML30
.ML20    ANOP
         LH    R15,W3&SYSNDX          TEXT LENGTH
         AR    R15,R1                 SKIP TEXT
         MVC   0(4,R15),R1&SYSNDX+5   MOVE IN DESC AND ROUTE CODES
         MNOTE ' ROUTCDE AND DESC SPECIFIED'
         AGO   .ML30
.ML21    ANOP
         LH    R15,W3&SYSNDX          TEXT LENGTH
         AR    R15,R1                 SKIP TEXT
         MVC   0(4,R15),R2&SYSNDX+5   MOVE IN ROUTE CODES
         MNOTE ' ROUTCDE SPECIFIED'
         AGO   .ML30
.ML22    ANOP
         LH    R15,W3&SYSNDX          TEXT LENGTH
         AR    R15,R1                 SKIP TEXT
         MVC   0(4,R15),R3&SYSNDX+5   MOVE IN DESC CODES
         MNOTE ' DESC SPECIFIED'
         AGO   .ML30
.ML30    ANOP
         SVC   35
         AGO   .MEND
.ERR1    ANOP
         MNOTE  '&R'(1,4)
.*
.MEND    MEND


Source listing for PWLINIT

         MACRO
&L       PWLINIT
.* INIT MACRO FOR NON-RENT CODE
&L       CSECT ,
INIT_A&SYSNDX DS 0H
R0       EQU   0
R1       EQU   1
     similarly for R2 to R14
R15      EQU   15
         USING *,R15                    TEMPORARY
         B     INIT_B&SYSNDX
         DC    AL4(INIT_B&SYSNDX-INIT_A&SYSNDX-8)
         DC    CL23'&L   &SYSDATE &SYSTIME'
INIT_B&SYSNDX DS 0H
         STM   R14,R12,12(R13)
         LR    R1,R13                   WORK REGISTER
         CNOP  0,4
         BAL   R13,*+4+72               SET UP R13
         DC    18F'0'                   SAVE AREA
         LA    R13,0(,R13)              IN CASE 31-BIT
         ST    R1,4(,R13)               SAVE LAST IN THIS
         ST    R13,8(,R1)               SAVE THIS IN LAST
         USING *-84,R13
         B     INIT_C&SYSNDX
         DROP  R15
EXIT     DS    0H
         LA    R15,0                    STORE RETURN CODE
RC       EQU   *-1,1                    RETURN CODE
         L     R14,4(,R13)              PREV SAVE AREA
         STM   R0,R1,20(R14)            SAVE R0,R1 IN PREV SAVE AREA
         L     R13,4(,R13)              RESTORE REG 13
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)
         BR    R14
INITMODE DC    H'0'
INIT_C&SYSNDX MVI RC,0                  ENSURE RETURN CODE = 0
         L     R1,4(,R13)
         LM    R14,R2,12(R1)            RESTORE LINKAGE REGS
         AGO   .MEND
.MEND    ANOP
         MEND


JCL for linking and invoking PWLSCRNI

//STA    EXEC  ASMFCL,LPARM='AMODE=24,AC=1',PROG=PWLSCRNI
//LKED.SYSLMOD DD DISP=SHR,DSN=auth.library(PWLSCRNI)
//STB    EXEC  ASMFCL,LPARM='',PROG=PWLSCRNB
//LKED.SYSLMOD DD DISP=SHR,DSN=auth.library(PWLSCRNB)
//STC    EXEC  ASMFCL,LPARM='',PROG=PWLSCRNF
//LKED.SYSLMOD DD DISP=SHR,DSN=auth.library(PWLSCRNF)
//STD    EXEC  ASMFCL,LPARM='',PROG=PWLSCRNR
//LKED.SYSLMOD DD DISP=SHR,DSN=auth.library
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(PWLSCRNF)
  ENTRY PWLSCRNR
  NAME PWLSCRNR(R)
//
//EXE EXEC PGM=PWLSCRNI
//STEPLIB DD DISP=SHR,DSN=auth.library
//SYSABEND DD SYSOUT=*
//PRINT    DD SYSOUT=*


Peter W K Lee
Software Analyst (Canada)                                    c Xephon 1993

