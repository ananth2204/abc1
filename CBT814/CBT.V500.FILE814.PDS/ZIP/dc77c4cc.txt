A single-screen system monitor for MVS/XA

During periods of heavy activity, managers and systems
programmers typically use either RMF or SDSF to determine
which jobs and STCs are the big users of system resources.
Usually the resource of interest will be the CPU but it can also
be I/Os and paging activity.  A problem arises from the fact
that one must wade through several screens of information to
get a few pieces of critical data.

CPUMON provides a condensed, single-screen display of all
address spaces which are using at least 2% of the total CPU
resources, performing 30 I/Os, or experiencing 30 page-ins
over one second.  Figure 1 illustrates a typical screen display.

CPUMON will collect a snapshot of the system, wait one
second, and collect a second snapshot.  Anything exceeding
one of the thresholds will get displayed.  There is a limit of 15
jobs or STCs on the display screen.  Anything not displayed
will be lost: this is usually not a problem, however.

To update the display, a user simply presses the ENTER key.
To exit, he or she should press PF3. To execute this program
from TSO, use the following CLIST:

      PROC 0
      CALL 'YOUR.LOAD.LIBRARY(CPUMON)'

Assuming you call this CLIST 'CPU', you can invoke it with
the command '%cpu'.  CA-ROSCOE users can also invoke the
program using the following RPF; it is best to call this 'CPU'
too.

      <<CPU>>
      CALL CPUMON

CPUMON must be link-edited into a library in the ETSO load
library concatenation and must be defined in the ETSO Eligible
Program List.  CA-ROSCOE users should use 'cpu' to invoke
the command, not '%cpu'.

This program was created on an MVS/XA 2.2.0 system.  It
may or may not run under MVS/ESA - it will not run under
MVS/370.

The JCL to assemble and link CPUMON is as follows:

//YOURJOB  JOB ...
//ASM EXEC PGM=IEV90,COND=(0,LT),
// PARM='LIST,OBJECT,NODECK,XREF,LOAD'
//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//       DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN DD DSN=your.source.library(CPUMON),DISP=SHR
//SYSLIN DD DSN=&&OBJ,DISP=(,PASS),UNIT=SYSDA
// DCB=(RECFM=FB,BLKSIZE=960,LRECL=80),SPACE=(CYL,(1,1))
//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT2 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUDUMP DD SYSOUT=Q
//*
//LINK EXEC PGM=IEWL,COND=(0,LT),PARM='XREF,LET)
//SYSPRINT DD SYSOUT=*
//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSLMOD DD DSN=your.load.library,DISP=SHR
//SYSLIN DD DSN=&&OBJ,DISP=(OLD,DELETE)
//       DD *
 NAME  CPUMON(R)
/*
//


SOURCE CODE FOR CPUMON

*  CPUMON:  THIS PROGRAM WILL DISPLAY ON ONE SCREEN THE HEAVIEST
*           USERS OF CPU, I/O AND PAGING RESOURCES IN YOUR SYSTEM.
*           CPU UTILIZATION WILL ALSO BE INDICATED IN BAR GRAPH
*           FORMAT AS WELL.
*           CURRENT THRESHOLDS WHICH WILL CAUSE JOBS TO BE DISPLAYED
*           ARE:
*                 JOBS USING MORE THAN 2% OF THE SYSTEM'S CPU RESOURCES
*                 JOBS CAUSING MORE THAN 30 PAGEINS PER SECOND
*                 JOBS PERFORMING MORE THAN 30 I/O'S PER SECOND
*  USE AT YOUR OWN RISK!  NO WARRANTY IS PROVIDED WITH THIS
*  CODE, AND THE AUTHOR AND THE UNIVERSITY OF VIRGINIA SHALL NOT BE
*  HELD LIABLE FOR ITS USE (OR MISUSE) IN ANY ENVIRONMENT.
*  THIS PROGRAM NEEDS NO SPECIAL AUTHORIZATION TO RUN PROPERLY.
*  THIS PROGRAM WAS CREATED ON AN MVS/XA 2.2.0 SYSTEM.  IT MAY RUN
*  ON AN ESA SYSTEM PROPERLY BUT I HAVE NOT BEEN ABLE TO TEST THIS.
*  IT WILL NOT RUN ON AN MVS/370 SYSTEM.
*  THIS PROGRAM MUST BE LINKED RMODE=24 AND AMODE=24 USING ASSEMBLER-H.
*  (AMODE IS CHANGED DYNAMICALLY).
CPUMON   CSECT
         STM   R14,R12,12(R13)        ADDRESSABILITY
         USING CPUMON,R12,R2
         LR    R12,R15
         LR    R2,R12
         A     R2,=F'4096'
         LA    R11,SAVEAREA
         ST    R11,8(R13)
         ST    R13,4(R11)
         LR    R13,R11
*  THIS IS THE MAIN PROGRAM LOOP: THE PROGRAM WILL COLLECT INFORMATION
*  AND DISPLAY IT.  IF THE USER DOES NOT RESPOND WITH A PF3 AID KEY,
*  THE PROGRAM WILL COME BACK HERE AND REPEAT.
*  TO COLLECT THE DATA, THE PROGRAM WILL MAKE TWO PASSES SEPARATED
*  BY ONE SECOND OF TIME.  DATA IS STORED IN A TABLE CONTAINING 34-BYTE
*  ENTRIES, EACH ENTRY HAVING THE FOLLOWING FIELDS:
*  +0   NAME
*  +8   ASID
*  +10  PASS1 CPU TIME
*  +14  PASS2 CPU TIME
*  +18  PASS1 I/O COUNT
*  +22  PASS2 I/O COUNT
*  +26  PASS1 PAGEIN COUNT
*  +30  PASS2 PAGEIN COUNT
SCANLOOP MVI   PASS,C'1'              SET PASS FLAG TO FIRST TIME
         L     R3,CVTPTR              GET CVT POINTER
         USING CVT,R3
*                                     START OF EACH PASS IS HERE
PASSSTRT L     R7,CVTASVT             GET ASVT POINTER
         USING ASVT,R7
         L     R9,ASVTMAXU            GET MAXIMUM NUMBER OF ASCBS
         LA    R7,ASVTENTY            POINT TO FIRST PTR FOR ASCBS
         L     R8,0(R7)               GET FIRST ASCB ADDR
         USING ASCB,R8
         LA    R11,TABLE              POINT AT START OF DATA TABLE
         LA    R1,SYSDATA             POINT AT SYSTEM DATA CODE
         O     R1,AM31                SET BIT 31 TO 1
         BSM   R0,R1                  CHANGE TO AMODE 31
SYSDATA  L     R5,604(R3)             GET RMCT PTR
         L     R6,4(R5)               GET CCT PTR
         LH    R1,110(R6)             GET NUMBER OF ON-LINE CPUS
         ST    R1,NUMCPUS             SAVE NUMBER OF ON-LINE CPUS
         LH    R6,102(R6)             GET CPU BUSY RATE
         ST    R6,TOTALCPU            SAVE BUSY RATE
         L     R6,12(R5)              GET MCT PTR
         LH    R6,132(R6)             GET HIGHEST UIC
         ST    R6,TOTALUIC            SAVE HIGH UIC
         L     R5,CVTRCEP             GET RSM CTL & ENUMERATION TBL PTR
         L     R6,68(R5)              GET TOTAL PAGEINS
         CLI   PASS,C'2'              ARE WE IN PASS 2?
         BE    SUBNSTOR               B IF SO
         ST    R6,TOTALPG             ELSE SAVE TOTAL PAGE INS
         B     SCANJOBS               GO SCAN THE JOBS
SUBNSTOR S     R6,TOTALPG             SUBTRACT PASS 1 PAGEIN COUNT
         ST    R6,TOTALPG             SAVE THE DIFFERENCE
SCANJOBS L     R10,ASCBJBNI           GET POINTER TO JOBNAME
         LTR   R10,R10                TEST PTR FOR VALIDITY
         BNZ   ANALJOB                BRANCH IF THIS IS A JOB
         L     R10,ASCBJBNS           GET POINTER TO STC NAME
         LTR   R10,R10                TEST PTR FOR VALIDITY
         BZ    NEXTJOB                BRANCH IF THIS IS NOT A JOB
ANALJOB  CLC   0(8,R10),=CL8'INIT'    IS THIS AN INITIATOR?
         BE    NEXTJOB                   BRANCH IF SO
         CLI   PASS,C'1'              ARE WE IN PASS ONE?
         BNE   PASS2                  IF NOT, GOTO PASS TWO CODE
PASS1    MVC   0(8,R11),0(R10)        GET NAME
         MVC   8(2,R11),ASCBASID      GET ASID
         LM    R14,R15,ASCBEJST       GET ELAPSED CPU TIME
         SRDL  R14,12                 DIVIDE BY 4096
         D     R14,=F'10000'          DIVIDE BY 10,000--RESULT IS CPU
         LR    R10,R15                  TIME IN HUNDREDTHS OF SECONDS
         LM    R14,R15,ASCBSRBT       GET ELAPSED SRB TIME
         SRDL  R14,12                 DIVIDE BY 4096
         D     R14,=F'10000'          DIVIDE BY 10,000 TO GET HUNDTHS
         AR    R15,R10                ADD CPU AND SRB TIME
         ST    R15,10(R11)            SAVE TOTAL CPU TIME (IN HUNDTHS
         L     R15,ASCBIOSC           GET IOCOUNT
         ST    R15,18(R11)            SAVE IOCOUNT
         L     R10,ASCBOUXB           POINT TO OUXB
         L     R15,16(R10)            GET PAGEIN COUNT
         ST    R15,26(R11)            SAVE PAGEIN COUNT
         LA    R11,34(R11)            POINT AT NEXT ENTRY IN DATA TABLE
         B     NEXTJOB                GO LOOK AT NEXT JOB
PASS2    CLC   8(2,R11),ASCBASID      COMPARE CURRENT TABL ENTR W/ ASID
         BL    ADJTABLE               IF <, INC TABL PTR TO NEXT NETRY
         BH    NEXTJOB                IF >, LOOK AT NEXT ASCB
         LM    R14,R15,ASCBEJST       GET ELAPSED JOB STEP TIME
         SRDL  R14,12                 DIVIDE BY 4096
         D     R14,=F'10000'          DIVIDE BY 10,000
         LR    R10,R15                SAVE IN R10
         LM    R14,R15,ASCBSRBT       GET ELAPSED SRB TIME
         SRDL  R14,12                 DIVIDE BY 4096
         D     R14,=F'10000'          DIVIDE BY 10,000
         AR    R15,R10                ADD CPU AND SRB TIMES
         ST    R15,14(R11)            SAVE PASS 2 TIME STAMP
         L     R15,ASCBIOSC           GET TOTAL I/O'S
         ST    R15,22(R11)            SAVE I/O COUNT
         L     R10,ASCBOUXB           GET OUXB PTR
         L     R15,16(R10)            GET PAGEIN COUNT
         ST    R15,30(R11)            SAVE PAGEIN COUNT
         LA    R11,34(R11)            POINT AT NEXT TABLE ENTRY
         B     NEXTJOB                GO LOOK AT NEXT JOB
ADJTABLE MVC   0(8,R11),=CL8'XXXXXXXX'   MARK THIS ENTRY AS "DEAD"
         LA    R11,34(R11)            POINT AT NEXT ENTRY
         CLC   0(8,R11),=CL8' '       NEXT ENTRY ALL BLANKS  ?
         BE    ENDOFCHN               B IF SO
         B     PASS2                  ELSE CONTINUE W/ PASS2
NEXTJOB  LA    R7,4(R7)               GET NEXT ASCB PTR
         BCT   R9,NEXTJOB2            LOOP TILL NO MORE ASCB'S
         B     ENDOFCHN               WHEN DONE, GOTO END-OF-CHAIN CODE
NEXTJOB2 TM    0(R7),X'80'            IS THIS ASCB IN USE?
         BO    NEXTJOB                LOOP HERE IF IT IS NOT
         L     R8,0(R7)               ELSE PT AT ASCB
         B     SCANJOBS               AND CHECK IT OUT
ENDOFCHN CLI   PASS,C'2'              ARE WE IN PASS2?
         BE    LISTJOBS               IF SO, GO LIST RESULTS
         MVC   0(8,R11),=CL8' '       ELSE WE'RE IN P1--MARK END OF TBL
WAIT1SEC STIMER WAIT,BINTVL=WAITONE   WAIT ONE SECOND
         MVI   PASS,C'2'              MARK FLAG TO SHOW WE'RE NOW IN P2
         LA    R11,TABLE              POINT AT START OF DATA TABLE
         B     PASSSTRT               GO DO PASS2
LISTJOBS LA    R11,TABLE              POINT AT START OF DATA TABLE
         LA    R1,WRITEOUT            POINT AT WRITEOUT CODE
         BSM   R0,R1                  BACK TO AMODE 24 FOR I/O COMMANDS
WRITEOUT LA    R9,LINE7               POINT AT START OF USABLE AREA
         LA    R8,15                  ALLOW NO MORE THAN 15 LINES
         SR    R6,R6                  ZERO I/O SUM
ANALYZE  MVI   OKFLAG,C'N'            MARK ENTRY AS UNINTERESTING
         LA    R8,1(R8)               INC SCREEN CNT FOR POSS DEAD ENT
         CLC   0(8,R11),=CL8'XXXXXXXX'  DEAD ENTRY?
         BE    ADJTABL2               GO TO NEXT NEXT ENTRY
         CLC   0(8,R11),=CL8' '       LAST ENTRY?
         BE    CPUTOTAL               WRITE TOTAL CPU LINE IF ALL DONE
         BCTR  R8,R0                  RESTORE SCREEN CNT
         LM    R4,R5,10(R11)          GET OLD AND NEW CPU TIMES
         SR    R5,R4                  SUB OLD CPU FROM NEW CPU
         BM    ADJTABL2               IF STEP CHANGED, DROP THIS ENTRY
         SR    R4,R4                  SUB FOR DIVIDE OPERATION
         D     R4,NUMCPUS             DIVIDE BY NUMBER OF CPUS
         SRL   R5,1         DIVIDE BY 2 TO GET SYSCPU UTIL IN 2 % UNITS
         C     R5,=F'1'     TASKS MUST HAVE 2% OF SYSTEM TO BE LISTED
         BNL   HIGHTEST               B IF THIS ONE DOES
         LA    R5,1                   SET MINIMUM CPU UTIL
         B     PERCNTOK               CONTINUE LOOKING AT THIS ENTRY
HIGHTEST C     R5,=F'50'              MAKE SURE CPU UTIL ISN'T HIGHER
         BH    ADJTABL2               THAN POSSIBLE (100%)
         MVI   OKFLAG,C'Y'            CPU IN RANGE--MARK OK
PERCNTOK MVC   OUTREC(80),BLANKS      BLANK OUT OUTPUT RECORD
         MVC   OUTREC(8),0(R11)       MOVE NAME
         LA    R1,OUTREC+23           POINT AT START LOCAT FOR BAR
GRAPHLOO MVI   0(R1),C'X'             CREATE BAR GRAPH ENTRY
         LA    R1,1(R1)
         BCT   R5,GRAPHLOO
         LM    R4,R5,18(R11)          GET I/O'S FOR THIS ENTRY
         SR    R5,R4                  SUB OLD COUNT FROM NEW COUNT
         BNM   FORMAT1
         SR    R5,R5                  ZERO RESULT IF IS MINUS
FORMAT1  AR    R6,R5                  SUM SYSTEM I/O'S
         C     R5,=F'30'              ARE THERE 30 I/O'S FOR THIS JOB?
         BL    CONVERT1               IF NOT, LEAVE FLAG ALONE
         MVI   OKFLAG,C'Y'            SET FLAG TO OUTPUT THIS ENTRY
CONVERT1 CVD   R5,DECIMAL                   CONVERT I/O COUNT
         UNPK  OUTREC+10(4),DECIMAL+4(4)    TO EBCDIC
         OI    OUTREC+13,X'F0'
         LA    R1,OUTREC+10           SUPPRESS LEADING ZEROS IN I/O CT
         LA    R10,3                  SUPPRESS ONLY FIRST 3 DIGITS
IOSUPP   CLI   0(R1),C'0'                IF APPROPRIATE
         BNE   DISPPGIN
         MVI   0(R1),C' '
         LA    R1,1(R1)
         BCT   R10,IOSUPP
DISPPGIN LM    R4,R5,26(R11)          GET PAGEIN'S FOR THIS ENTRY
         SR    R5,R4                  SUB OLD FROM NEW
         BNM   FORMAT2A               IF NEGATIVE,
         SR    R5,R5                     ZERO OUT
FORMAT2A C     R5,TOTALPG             IF PGINS FOR THIS JOB > TOTAL PGS
         BL    FORMAT2B
         SR    R5,R5                  THEN NUMBER IS INVALID: ZERO IT
FORMAT2B C     R5,=F'30'              ARE THERE 30 PAGEIN'S FOR JOB?
         BL    CONVERT2               IF NOT, LEAVE FLAG ALONE
         MVI   OKFLAG,C'Y'            SET FLAG TO OUTPUT THIS ENTRY
CONVERT2 CVD   R5,DECIMAL                   CONVERT PAGEIN'S
         UNPK  OUTREC+16(4),DECIMAL+4(4)    TO EBCDIC
         OI    OUTREC+19,X'F0'
         LA    R1,OUTREC+16           SUPPRESS LEADING ZEROS IN PGIN CT
         LA    R10,3                  SUPPRESS ONLY FIRST 3 DIGITS
PGINSUPP CLI   0(R1),C'0'                IF APPROPRIATE
         BNE   CHKFLAG
         MVI   0(R1),C' '
         LA    R1,1(R1)
         BCT   R10,PGINSUPP
CHKFLAG  LA    R8,1(R8)               INC SCREEN CNT FOR POSS SKIPPING
         CLI   OKFLAG,C'Y'            OUTPUT THIS ENTRY?
         BNE   ADJTABL2               IF NOT, LOOK AT NEXT ENTRY
         BCTR  R8,R0                  RESTORE SCREEN CNT
         MVC   0(80,R9),OUTREC        MOVE RECORD TO SCREEN
         LA    R9,80(R9)              POINT TO NEXT AREA ON SCREEN
ADJTABL2 LA    R11,34(R11)            POINT AT NEXT DATA ENTRY
         BCT   R8,ANALYZE                CONTINUE ANALYSIS
CPUTOTAL LA    R9,80(R9)              POINT AT NEXT SCREEN AREA
         ST    R6,TOTALIO             SAVE SUM OF I/O'S
         MVC   0(10,R9),=CL10'TOTAL CPU:'  WRITE TOTAL CPU
         LA    R1,23(R9)                     BAR GRAPH
         L     R6,TOTALCPU
         SRL   R6,1                   DIVIDE BY 2 FOR 2% UNITS
         LTR   R6,R6                  IF CPU IS ZERO,
         BZ    PUTGBLS                   DON'T WRITE BAR
TOTALLOO MVI   0(R1),C'X'             ELSE, WRITE BAR GRAPH
         LA    R1,1(R1)
         BCT   R6,TOTALLOO
*                                     WRITE GLOBAL INDICATORS LINE
PUTGBLS  MVC   LINE2(80),=CL80'Global Indicators:'
         L     R6,TOTALCPU            CONVERT TOTAL CPU TO EBCDIC
         C     R6,=F'100'
         BL    CNVTCPU
         LA    R6,99
CNVTCPU  CVD   R6,DECIMAL
         UNPK  LINE2+27(2),DECIMAL+6(2)
         OI    LINE2+28,X'F0'
         MVC   LINE2+23(4),=CL4'CPU='
         L     R6,TOTALIO             CONVERT TOTAL I/O'S TO EBCDIC
         CVD   R6,DECIMAL
         UNPK  LINE2+36(4),DECIMAL+4(4)
         OI    LINE2+39,X'F0'
         MVC   LINE2+32(4),=CL4'I/O='
         L     R6,TOTALPG             CONVERT TOTAL PAGEINS TO EBCDIC
         CVD   R6,DECIMAL
         UNPK  LINE2+46(4),DECIMAL+4(4)
         OI    LINE2+49,X'F0'
         MVC   LINE2+42(4),=CL4'PIN='
         L     R6,TOTALUIC            CONVERT TOTAL UIC TO EBCDIC
         CVD   R6,DECIMAL
         UNPK  LINE2+56(3),DECIMAL+4(4)
         OI    LINE2+58,X'F0'
         MVC   LINE2+52(4),=CL4'UIC='
         TIME  DEC                    CONVERT TIME TO EBCDIC
         SRL   R0,8
         SLL   R0,4                   CLEAR TENTHS/HUNDREDTHS OF SECS
         O     R0,=F'12'              SET SIGN
         ST    R0,DECIMAL+4
         UNPK  LINE2+66(6),DECIMAL+4(4)
         OI    LINE2+71,X'F0'            NOW HAVE 6 PROPER EBCDIC DIGS
         MVC   LINE2+61(5),=CL5'TIME='   SET UP TIME STRING
         MVC   LINE2+73(1),LINE2+71
         MVC   LINE2+72(1),LINE2+70
         MVI   LINE2+71,C':'
         MVC   LINE2+70(1),LINE2+69
         MVC   LINE2+69(1),LINE2+68
         MVI   LINE2+68,C':'
*  WRITE THE SCREEN.  GET SOME INPUT.  IF INPUT IS NOT PF3, CONTINUE
*  PROGRAM LOOP, OTHERWISE EXIT PROGRAM.
         TPUT  PUTBUF,LENPUTBF,FULLSCR
         MVC   CMDAREA(80),BLANKS
         TGET  CMDAREA,1920,ASIS
         CLI   CMDAREA,X'F3'          PF3 PRESSED?
         BE    EXITCPUM               BRANCH IF SO
         LA    R9,LINE7               OTHERWISE, BLANK OUT SCREEN AND
         LA    R8,17                  CONTINUE PROGRAM LOOP
BLNKLOOP MVC   0(80,R9),BLANKS
         LA    R9,80(R9)
         BCT   R8,BLNKLOOP
         B     SCANLOOP
EXITCPUM STLINENO LINE=1              CLEAR SCREEN
         STFSMODE OFF                 EXIT FULL SCREEN MODE
         STTMPMD OFF                  RETURN CTRL TO DISPLAY MANAGER
         L     R13,4(R13)             RETURN
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         SR    R15,R15
         BR    R14
*  DATA AREAS
         LTORG
SAVEAREA DS    18F                    PROGRAM SAVE AREA
RESULTS  DCB   DDNAME=RESULTS,MACRF=(PM),DSORG=PS,BLKSIZE=8000,        X
               LRECL=80,RECFM=FB
*  SCREEN FOR DATA PRESENTATION
PUTBUF   DC    X'27'       ESCAPE CTRL CHAR FOR TPUT FULLSCR OPTION
         DC    X'F5C3'     REMOTE ERASE/WRITE AND WCC
         DC    X'114040'   SBA AT UPPER LEFT CORNER
LINE1    DC    X'1DF0',CL80' '
LINE2    DC    CL80' '
LINE3    DC    CL80' '
LINE4    DC    CL37' '
         DC    CL43'Percent CPU Utilization'
LINE5    DC    CL50'Jobname    I/O  PGIN   0   10   20   30   40   50 '
         DC    CL30'  60   70   80   90  100'
LINE6    DC    CL80' '
LINE7    DC    CL80' '
LINE8    DC    CL80' '
LINE9    DC    CL80' '
LINE10   DC    CL80' '
LINE11   DC    CL80' '
LINE12   DC    CL80' '
LINE13   DC    CL80' '
LINE14   DC    CL80' '
LINE15   DC    CL80' '
LINE16   DC    CL80' '
LINE17   DC    CL80' '
LINE18   DC    CL80' '
LINE19   DC    CL80' '
LINE20   DC    CL80' '
LINE21   DC    CL80' '
LINE22   DC    CL80' '
LINE23   DC    CL80' '
LINE24   DC    CL40'Press ENTER to continue or PF3 to exit: '
         DC    X'1D40',CL38' '
         DC    X'115D5A13'
LENPUTBF EQU   *-PUTBUF
BLANKS   DC    CL80' '
CMDAREA  DC    25CL80' '
NUMCPUS  DS    F
TOTALCPU DS    F
TOTALUIC DS    F                      GLOBAL INDICATORS STORAGE AREAS
TOTALIO  DS    F
TOTALPG  DS    F
DECIMAL  DS    D                      CVD WORKAREA
AM31     DC    XL4'80000000'          31-BIT MODE OR ARGUMENT
WAITONE  DC    F'100'                 ONE SECOND
OUTREC   DS    CL80
PASS     DS    CL1
OKFLAG   DS    CL1
TABLE    DC    4250F'0'               SPACE FOR 500 ENTRIES
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         END


David Saunders
Senior Computer Systems Engineer
University of Virginia (USA)                                   c University of Virginia 1992

