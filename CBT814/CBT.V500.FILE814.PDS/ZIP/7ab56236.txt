Freespace analysis

Most sites have a shortage of DASD space and as a result it is
always hard to find a device that has enough freespace on
which to allocate your datasets.  The following program gives
the user a nicely formatted 3270 screen with a list of all the
DASD on the system and the amount of freespace, free extents,
largest cylinders etc.  The display is pageable and allows the
user to sort the screen on any field or to select volumes starting
with a certain string of characters.  The screen format conforms
to CUA in that it uses an action bar on the top line with pull
down windows that are cursor selectable (see Figure 1).  In an
effort to make this program seem fast, the main task attaches a
subtask to process the UCBs.  This task posts an ECB once the
first page of data is ready to be displayed then carries on until
complete.  This allows the main task to display the first page of
data to the user while the subtask completes the list.

The main task calls a program to test the TSO terminal for
Extended Attribute Byte (EAB) support and, if it is present,
uses reverse video and graphics escape line draw characters to
give the screens a more professional look.  These programs do
not need ISPF.


MAIN PROGRAM

FRSP     CSECT
         SAVE  (14,12)                 NORMAL
         BALR  R12,0                     LINKAGE
         USING *,R12,R11                    STUFF
         LA    R11,4095(R12)                   USING
         LA    R11,1(R11)                         R11 AND R12
         LR    R10,R13                 SAVE ADDR OF OLD SAVEAREA IN R11
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R10,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R10)              SAVE ADDR NEW IN OLD SAVEAREA
MAINLINE EQU   *
         BAL   R14,INIT                PERFORM INIT SECTION
         BAL   R14,PROCESS             PROCESS THE SCREENS
         BAL   R14,FINISH              TERMINATE PROGRAM
INIT     DS    0F
         ST    R14,INITR14             SAVE R14 FOR RETURN
         GETMAIN RU,LV=4000            GETMAIN STORAGE FOR BUFFER
         ST    R1,BUFFERA              SAVE ADDRESS OF STORAGE
         GETMAIN RU,LV=74000           GETMAIN FOR PAGEABLE AREA
         ST    R1,DATAADDR             SAVE START ADDRESS
         ST    R1,DATABASE             SAVE ADDRESS OF TOP OF AREA
         LA    R1,DATABASE             POINT TO LIST STORAGE ADDR
*   ATTACH TASK TO BUILD PAGEABLE AREA OF DASD DATA
         ATTACH EP=FRSP1,ECB=ECB2      ATTACH THE TASK
         ST    R1,SR1                  SAVE TASK ADDRESS
*   CALL PROGRAM TO TEST SCREEN TYPE FOR EAB AND GRAPHICS ESCAPE
         CALL  TESTEAB                   TEST FOR EAB
         LTR   R15,R15                   DOES THIS SUPPORT IT ?
         BZ    INIT01                     YES
         MVC   SCRNEAB(SCRNLEN),SCRNNEAB   NO THEN SET NEW SCREENS
INIT01   EQU   *
         LM    R2,R3,SCRN01            LOAD SCREEN1 ADDR AND LEN
         TPUT  (R2),(R3),FULLSCR,WAIT  DISPLAY 3270 SCREEN
         WAIT  ECB=ECB1                WAIT FOR FIRST PAGE
         L     R14,INITR14             LOAD RETURN ADDRESS
         BR    R14                     RETURN TO MAINLINE
PROCESS  DS    0F
         ST    R14,PROCR14             SAVE RETURN ADDRESS
PROC0000 EQU   *
         L     R8,DATABASE             POINT TO LIST LINES
         ST    R8,LASTADDR             SAVE AS LAST START ADDR
PROC0001 EQU   *
         MVC   REPOPTN,BLANKS          BLANK OUT OPTION FIELD
         L     R8,LASTADDR             LOAD START ADDRESS
         LM    R2,R3,HIL09             CLEAR THE MORE
         TPUT  (R2),(R3),FULLSCR,WAIT    MESSAGE
         LA    R3,BUFFADDR             POINT TO BUFF ADDRESSES
         L     R4,BUFFERA              LOAD ADDRESS OF BUFFER STORAGE
         XR    R5,R5                   ZERO R5 FOR BUFFER LENGTH
         MVC   0(3,R4),=X'27F1C2'      MOVE IN WRITE 3270 STRING
         LA    R4,3(R4)                POINT TO FREE AREA
         LA    R5,3(R5)                ADD LENGTH OF DATA MOVED
PROC0002 EQU   *
         CLI   0(R8),X'00'             IS THIS LAST ADDRESS LINE ?
         BE    PROC0004                  YES THEN GO PAD BUFFER
         CLI   MASKCHK,C'Y'            DO THEY WANT A MASKED LIST
         BNE   PROC0003                 NO THEN MOVE LINE TO BUFFER
         EX    R9,MASKTST               YES THEN TEST MASK
         BNE   NOMATCH                   NOT EQUAL POINT TO NEXT LINE
PROC0003 CLI   0(R3),X'00'             IS THIS LAST ADDRESS ?
         BE    PROC0005                 YES THEN WE HAVE FULL PAGE
         MVC   0(3,R4),0(R3)           LOAD SET BUFFER FROM ADDR LIST
         MVC   3(74,R4),0(R8)          MOVE LIST LINE TO BUFFER
         LA    R4,77(R4)               POINT BUF TO NEXT FREE BIT
         LA    R5,77(R5)               ADD TO LENGTH OF BUFFER
         LA    R3,3(R3)                POINT TO NEXT SCREEN ADDRESS
NOMATCH  LA    R8,74(R8)               POINT TO NEXT LIST LINE
         B     PROC0002                GO CHECK NEXT LINE
MASKTST  CLC   6(0,R8),MASK            MOVE COMMAND FOR EX INSTRUCTION
PROC0004 DS    0F
         CLI   0(R3),X'00'             IS THIS LAST ADDRESS ?
         BE    PROC0006                 YES THEN GO DISPLAY DATA
         MVC   0(3,R4),0(R3)           LOAD SET ADDRESS
         MVC   3(74,R4),BLANKS         LOAD BLANK LINE
         LA    R4,77(R4)               POINT BUF TO NEXT FREE BIT
         LA    R5,77(R5)               ADD TO LENGTH OF BUFFER
         LA    R3,3(R3)                POINT TO NEXT SCREEN ADDRESS
         B     PROC0004                CHECK NEXT ADDRESS
PROC0005 DS    0F
         MVI   PAGEFLAG,C'Y'           FLAG PAGE DOWN ALLOWED
         B     PROC0007
PROC0006 DS    0F
         MVI   PAGEFLAG,C'N'           FLAG PAGE DOWN NOT ALLOWED
         B     PROC0007
PROC0007 DS    0F
         L     R4,BUFFERA              LOAD ADDRESS OF BUFFER
         CLI   POPFLAG,C'Y'            WAS LAST SCREEN A POPUP ?
         BNE   PROC0008                 NO THEN SKIP THIS NEXT BIT
         MVI   POPFLAG,C'N'            FLAG POPUP CLEARED
         LM    R2,R3,SCRN02            LOAD DATA TO CLEAN TOP OF POPUP
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT DATA ON SCREEN
PROC0008 TPUT  (R4),(R5),FULLSCR,WAIT  PUT PAGEABLE AREA ON SCREEN
         CLI   PAGEFLAG,C'Y'           IS PAGEDOWN ALLOWED ?
         BNE   PROC0009                 NO THEN SKIP THIS NEXT BIT
         LM    R2,R3,HIL08             LOAD DATA TO INDICATE MORE
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT IT ONTO SCREEN
PROC0009 TGET  REPBUF,REPBUFL,ASIS,WAIT  GET RESPONSE FROM SCREEN
         WAIT  ECB=ECB2                MAKE SURE THE SUBTASK IS DONE
         CLI   REPAID,X'F3'            WAS PF3 HIT ?
         BE    PROC9999                 YES THEN EXIT PROGRAM
         CLI   REPAID,X'C3'            WAS PF15 HIT ?
         BE    PROC9999                 YES THEN EXIT PROGRAM
         CLI   REPAID,X'F8'            WAS PF8 HIT ?
         BE    PROCDOWN                 YES THEN GO TO PROCDOWN
         CLI   REPAID,X'C8'            WAS PF20 HIT ?
         BE    PROCDOWN                 YES THEN GO TO PROCDOWN
         CLI   REPAID,X'F7'            WAS PF7 HIT ?
         BE    PROCUP                   YES THEN GO TO PROCUP
         CLI   REPAID,X'C7'            WAS PF19 HIT ?
         BE    PROCUP                   YES THEN GO TO PROCUP
         CLI   REPAID,X'7D'            WAS ENTER HIT ?
         BE    PROCENTR                 YES THEN GO TO PROCENTR
         B     PROC0001                 NO THEN REDISPLAY
PROCDOWN DS    0F
         CLI   PAGEFLAG,C'Y'           IS MORE TO COME ?
         BNE   PROC0001                  NO THEN IGNORE AND REDISPLAY
         L     R2,LASTADDR             LOAD ADDRESS OF LAST START
         LA    R2,1406(R2)             ADD 1 PAGE TO IT
         ST    R2,LASTADDR             SAVE IT
         B     PROC0001                GO REDISPLAY DOWN 1 PAGE
PROCUP   DS    0F
         L     R2,LASTADDR             LOAD ADDRESS OF LAST START
         L     R3,DATABASE             LOAD ADDRESS OF TOP OF DATA
         CLR   R2,R3                   IS IT THE SAME ?
         BE    PROC0001                  YES THEN CANNOT PAGE UP
         SH    R2,=H'1406'               NO THEN POINT 1 PAGE UP
         ST    R2,LASTADDR             SAVE NEW START ADDRESS
         B     PROC0001                GO REDISPLAY 1 PAGE UP
PROCENTR DS    0F
         OC    REPOPTN,=X'40404040'    CONVERT TO UPPERCASE
         CLI   REPOPTN,C'S'            IS SORT POPUP SELECTED ?
         BE    SORT0000                 YES THEN POPUP SORT WINDOW
         CLI   REPOPTN,C'M'            IS MASK WINDOW SELECTED ?
         BE    MASK0000                 YES THEN MASK POPUP
         CLI   REPOPTN,C'O'            IS OPTION WINDOW SELECTED ?
         BE    OPTN0000                 YES THEN OPTION POPUP
         BAL   R14,ROWCOL              LOCATE CURSOR POSITION
         CLI   CSRROW,X'01'            IS IT ON ROW 1 ?
         BE    ABAR0000                 YES THEN CHECK FOR POS SELECT
         B     PROC0001                 NO THEN GO REDISPLAY
ABAR0000 DS    0F
         CLI   CSRCOL,X'06'            IS IT AFTER START OF OPTION ?
         BNH   PROC0001                 NO THEN GO REDISPLAY
         CLI   CSRCOL,X'0F'            IS IT AFTER START OF SORT ?
         BNH   OPTN0000                 NO THEN OPTION SELECTED
         CLI   CSRCOL,X'15'            IS IT AFTER START OF MASK ?
         BNH   SORT0000                 NO THEN SORT SELECTED
         CLI   CSRCOL,X'1B'            IS IT AFTER END OF MASK ?
         BNH   MASK0000                 NO THEN MASK SELECTED
         B     PROC0001                GO REDISPLAY
OPTN0000 DS    0F
         MVC   REPOPTN,BLANKS          BLANK REPLY FIELD
         MVI   POPFLAG,C'Y'            FLAG THAT POPUP SELECTED
         LM    R2,R3,POP01             LOAD POPUP SCREEN ADDRESS
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT POPUP ON SCREEN
         TGET  REPBUF,REPBUFL,ASIS,WAIT  GET REPLY
         CLI   REPAID,X'F3'            WAS PF3 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'C3'            WAS PF15 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'7D'            WAS ENTER HIT ?
         BNE   OPTN0000                 YES THEN SEE WHAT WAS SELECTED
         CLI   REPOPTN,C' '            IS OPTION BLANK ?
         BNE   OPTN0020                 NO THEN SELECTED BY NUMBER
         BAL   R14,ROWCOL              CALCULATE CURSOR POSITION
         B     OPTN0010                GO CHECK CURSOR SELECTION
OPTN0010 DS    0F
         CLI   CSRCOL,X'09'            MAKE SURE
         BNH   OPTN0000                  THE ROW AND
         CLI   CSRCOL,X'20'                COL ARE
         BNL   OPTN0000                     WITHIN THE
         CLI   CSRROW,X'04'                   SELECTABLE
         BNH   OPTN0000                         AREA OF
         CLI   CSRROW,X'09'                       THE POPUP
         BNL   OPTN0000                             SCREEN
         XR    R2,R2                   CLEAR R2
         IC    R2,CSRROW               LOAD THE ROW NUMBER
         SH    R2,=H'4'                SUBTRACT 4 TO MAKE NUMBER
         STC   R2,REPOPTN                BETWEEN 1 AND 4
         OI    REPOPTN,X'F0'               TURN INTO CHAR NUMBER
         B     OPTN0020                     CHECK NUMBER FOR OPTION
OPTN0020 DS    0F
         CLI   REPOPTN,C'1'            WAS OPTION 1 ENTERED ?
         BNE   OPTN0021                 NO THEN CHECK NEXT
         LM    R2,R3,HIL07             HILITE THE OPTION
         TPUT  (R2),(R3),FULLSCR,WAIT       SELECTED
         B     PROC9999                EXIT PROGRAM
OPTN0021 B     OPTN0000                NO OTHER OPTIONS RESHOW POPUP
SORT0000 DS    0F
         MVC   REPOPTN,BLANKS          BLANK REPLY FIELD
         MVI   POPFLAG,C'Y'            FLAG THAT POPUP SELECTED
         LM    R2,R3,POP02             LOAD POPUP SCREEN ADDRESS
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT POPUP ON SCREEN
         TGET  REPBUF,REPBUFL,ASIS,WAIT  GET REPLY
         CLI   REPAID,X'F3'            WAS PF3 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'C3'            WAS PF15 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'7D'            WAS ENTER HIT ?
         BNE   SORT0000                 YES THEN SEE WHAT WAS SELECTED
         CLI   REPOPTN,C' '            IS OPTION BLANK ?
         BNE   SORT0010                 NO THEN SELECTED BY NUMBER
         BAL   R14,ROWCOL              CALCULATE CURSOR POSITION
         B     SORT0020                GO CHECK CURSOR SELECTION
SORT0010 DS    0F
         CLI   REPOPTN,C'1'            WAS SORT 1 SELECTED ?
         BNE   SORT0011                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'1,4,CH,A)  ' SET UP SORT PARMS
         LM    R2,R3,HIL01             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0011 CLI   REPOPTN,C'2'            WAS SORT 1 SELECTED ?
         BNE   SORT0012                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'7,6,CH,A)  ' SET UP SORT PARMS
         LM    R2,R3,HIL02             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0012 CLI   REPOPTN,C'3'            WAS SORT 1 SELECTED ?
         BNE   SORT0013                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'23,9,CH,D) ' SET UP SORT PARMS
         LM    R2,R3,HIL03             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0013 CLI   REPOPTN,C'4'            WAS SORT 1 SELECTED ?
         BNE   SORT0014                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'40,9,CH,D) ' SET UP SORT PARMS
         LM    R2,R3,HIL04             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0014 CLI   REPOPTN,C'5'            WAS SORT 1 SELECTED ?
         BNE   SORT0015                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'60,9,CH,D) ' SET UP SORT PARMS
         LM    R2,R3,HIL05             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0015 CLI   REPOPTN,C'6'            WAS SORT 6 SELECTED ?
         BNE   SORT0016                 NO THEN CHECK NEXT
         MVC   CTLPARM,=C'66,7,CH,D) ' SET UP SORT PARMS
         LM    R2,R3,HIL06             HILIGHT OPTION SELECTED
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT HILIGHT
         B     SORT0100                GO DO THE SORT
SORT0016 B     SORT0000                RESHOW POPUP
SORT0020 DS    0F
         CLI   CSRCOL,X'12'            MAKE SURE
         BNH   SORT0000                  THE ROW AND
         CLI   CSRCOL,X'29'                COL ARE
         BNL   SORT0000                     WITHIN THE
         CLI   CSRROW,X'04'                   SELECTABLE
         BNH   SORT0000                         AREA OF
         CLI   CSRROW,X'0B'                       THE POPUP
         BNL   SORT0000                             SCREEN
         XR    R2,R2                   CLEAR R2
         IC    R2,CSRROW               LOAD THE ROW NUMBER
         SH    R2,=H'4'                SUBTRACT 4 TO MAKE NUMBER
         STC   R2,REPOPTN                BETWEEN 1 AND 4
         OI    REPOPTN,X'F0'               TURN INTO CHAR NUMBER
         B     SORT0010                     CHECK NUMBER FOR OPTION
SORT0100 DS    0F
         LA    R1,SORTPARM             LOAD PARM ADDRESS
         CALL  FRSPSORT                CALL SORT PROGRAM
         B     PROC0001                GO REDISPLAY SCREEN
MASK0000 DS    0F
         MVC   REPOPTN,BLANKS          BLANK REPLY FIELD
         MVI   POPFLAG,C'Y'            FLAG THAT POPUP SELECTED
         LM    R2,R3,POP03             LOAD POPUP SCREEN ADDRESS
         TPUT  (R2),(R3),FULLSCR,WAIT  PUT POPUP ON SCREEN
         TGET  REPBUF,REPBUFL,ASIS,WAIT  GET REPLY
         CLI   REPAID,X'F3'            WAS PF3 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'C3'            WAS PF15 HIT ?
         BE    PROC0001                 YES THEN GO REDISPLAY
         CLI   REPAID,X'7D'            WAS ENTER HIT ?
         BNE   MASK0000                 NO THEN REDISPLAY POPUP
         CLI   REPOPTN,C' '            IS MASK BLANK ?
         BE    MASK0000                 YES THEN REDISPLAY POPUP
         MVC   MASK,REPOPTN            MOVE INPUT FIELD TO MASK
         OC    MASK,=X'404040404040'   CHANGE TO UPPERCASE
         XR    R9,R9                   ZERO R9 FOR COUNT
         LA    R3,MASK                 LOAD ADDRESS INTO R3
MASK0001 CLI   0(R3),C'*'              IS THIS THE WILDCARD ?
         BE    MASK0002                 YES THEN GO WORK OUT LENGTH
         LA    R9,1(R9)                ADD 1 TO COUNT REG
         LA    R3,1(R3)                INCREMENT ADDRESS
         B     MASK0001                LOOP BACK TO CHECK NEXT
MASK0002 MVI   MASKCHK,C'Y'            FLAG MASKING ON
         LTR   R9,R9                   CHECK R9 = 0 ?
         BNZ   MASK0003                 NO THEN NOT JUST *
         MVI   MASKCHK,C'N'            FLAG MASKING OFF
MASK0003 BCTR  R9,0                    DECREMENT R9
         CLC   LASTMASK,MASK           COMPARE MASK WITH LAST MASK
         BE    MASK0004                 EQUAL THEN SKIP THIS
         MVC   LASTMASK,MASK           SAVE MASK AS LAST MASK
         L     R8,DATABASE             LOAD BASE DATA ADDRESS
         ST    R8,LASTADDR             CAUSE JUMP TO TOP OF DATA
MASK0004 B     PROC0001                GO REDISPLAY LIST
**  THIS ROUTINE CONVERTS THE SBA RETURNED FOR THE CURSOR INTO   **
**  TWO BINARY NUMBERS ROW AND COL 1 1 BEING THE TOP LEFT CORNER **
ROWCOL   DS    0F
         ST    R14,ROWCOLR             SAVE RETURN ADDRESS
         MVC   HEXDATA,REPCURSA        MOVE CURSOR ADDRESS TO WORK
         NI    HEXDATA,B'00111111'     GET RID OF TOP TWO
         NI    HEXDATA+1,B'00111111'       BITS IN BOTH BYTES
         IC    R2,HEXDATA              LOAD FIRST BYTE INTO R2
         SLL   R2,6                    SHIFT LEFT 6 BITS
         STC   R2,HEXDATA+2            SAVE THE TWO REMAINING BITS
         OC    HEXDATA+1(1),HEXDATA+2  OR IT TO MAKE AN 8 BIT NUMBER
         IC    R2,HEXDATA              LOAD THE FIRST BYTE AGAIN
         SRL   R2,2                    GET RID OF BOTTOM TWO BITS
         STC   R2,HEXDATA              SAVE IT
         NI    HEXDATA,B'00001111'     MAKE SURE TOP 4 BITS ARE 0
         XR    R2,R2                   ZERO R2
         XR    R3,R3                   ZERO R3
         ICM   R3,3,HEXDATA            LOAD TWO BYTES INTO R3
         AH    R3,=H'80'               ADD 80 TO MAKE ROW 0 = 1
         D     R2,=F'80'               DIVIDE BY 80 TO GIVE ROW COL
         LA    R2,1(R2)                ADD 1 TO COL TO MAKE 0 = 1
         STC   R2,CSRCOL               STORE COL
         STC   R3,CSRROW               STORE ROW
         L     R14,ROWCOLR             LOAD RETURN ADDRESS
         BR    R14                     RETURN
PROC9999 L     R14,PROCR14             LOAD RETURN ADDRESS TO MAINLINE
         BR    R14                     RETURN
FINISH   DS    0F
RETURN   DETACH SR1,STAE=YES           DETACH SUBTASK
         L     R1,DATABASE             LOAD ADDRESS OF GETMAIN STORAGE
         FREEMAIN RU,LV=74000,A=(1)    FREE IT
         L     R1,BUFFERA              LOAD ADDRESS OF GETMAIN STORAGE
         FREEMAIN RU,LV=4000,A=(1)     FREE IT
         L     R13,4(R13)              LOAD ADDRESS OF HIS SAVE AREA
         RETURN (14,12),RC=(15)        RESTORE HIS REGISTERS AND RETURN
SAVEAREA DS    9D                      SAVE AREA
*      RETURN ADDRESS SAVE AREAS
INITR14  DC    F'0'
PROCR14  DC    F'0'
ROWCOLR  DC    F'0'
LASTADDR DC    F'0'
DATAADDR DC    F'0'
BUFFERA  DC    F'0'
SORTPARM DC    A(CTLPARM)              THESE
DATABASE DC    F'0'                      THREE MUST
ECB1ADDR DC    A(ECB1)                     STAY TOGETHER !!!!
ECB2ADDR DC    A(ECB2)
ECB1     DC    F'0'
ECB2     DC    F'0'
BLANKS   DC    CL74' '
HEXDATA  DC   X'000000'
CSRROW   DC   X'00'
CSRCOL   DC   X'00'
SR1      DC    F'0'                    SAVE ADDRESS FOR ATTACHED TASK
REPBUF   DS    0F
REPAID   DC    X'00'
REPCURSA DC    X'0000'
         DC    X'000000'
REPOPTN  DC    C'      '
MASK     DC    C'      '
         DC    C'*'
REPBUFL  EQU   *-REPBUF-1
LASTMASK DC    C'*     '
MASKCHK  DC    C'N'    FLAGS
SORTFLAG DC    C'N'      USED
PAGEFLAG DC    C'N'        IN THIS
POPFLAG  DC    C'N'          PROGRAM
CTLPARM  DC    C'           '        CONTROL FIELD FOR SORT
BUFFADDR DS    0F       ADDRESS LIST FOR SA ORDERS IN 3279 DATASTREAM
         DC    X'114544'
         DC    X'114654'
         DC    X'114764'
         DC    X'114874'
         DC    X'114A44'
         DC    X'114B54'
         DC    X'114C64'
         DC    X'114D74'
         DC    X'114F44'
         DC    X'115054'
         DC    X'115164'
         DC    X'115274'
         DC    X'115444'
         DC    X'115554'
         DC    X'115664'
         DC    X'115774'
         DC    X'115944'
         DC    X'115A54'
         DC    X'115B64'
         DC    X'000000'
MORE     DC    X'27F1C211425C2841F12842F5',C'More',X'284200284100'
MOREL    EQU   *-MORE
NOMORE   DC    X'27F1C211425C2841002842F52843F1',X'A2A2A2D5'
NOMOREL  EQU   *-NOMORE
MOREX    DC    X'27F1C211425C',C'MORE'
MOREXL   EQU   *-MOREX
NOMOREX  DC    X'27F1C211425C',C'---+'
NOMOREXL EQU   *-NOMOREX
SCREEN01 DS    0C
         DC    X'27F5C21140401DC4132841F41340404040284100'
         DC    X'1DC8',C' Options',X'1DC8',C' Sort'
         DC    X'1DC8',C' Mask',X'1DE8'
         DC    X'1141501DE42843F12842F5C53C425FA2D5FF85'
         DC    X'2843002842F4'
         DC    C'  Addr  Volser     Type       Exts        Largest ext'
         DC    C'          Trks  Cyls '
         DC    X'11436F2843F12842F585FFC63C447FA2D6FF85284300'
         DC    X'11464F2843F185FF85284300'
         DC    X'11475F2843F185FF85284300'
         DC    X'11486F2843F185FF85284300'
         DC    X'11497F2843F185FF85284300'
         DC    X'114B4F2843F185FF85284300'
         DC    X'114C5F2843F185FF85284300'
         DC    X'114D6F2843F185FF85284300'
         DC    X'114E7F2843F185FF85284300'
         DC    X'11504F2843F185FF85284300'
         DC    X'11515F2843F185FF85284300'
         DC    X'11526F2843F185FF85284300'
         DC    X'11537F2843F185FF85284300'
         DC    X'11554F2843F185FF85284300'
         DC    X'11565F2843F185FF85284300'
         DC    X'11576F2843F185FF85284300'
         DC    X'11587F2843F185FF85284300'
         DC    X'115A4F2843F185FF85284300'
         DC    X'115B5F2843F185FF85284300'
         DC    X'115C6F2843F185FFC43C5D7FA2D4284300'
SCREEN1L EQU   *-SCREEN01               MESSAGE LENGTH
SCREENFX DS    0C
         DC    X'27F1C21140401DC4132841F41340404040284100'
         DC    X'1DC8',C' Options',X'1DC8',C' Sort'
         DC    X'1DC8',C' Mask',X'1DE8'
         DC    X'1141501DE42843F12842F5C53C425FA2D5FF85'
         DC    X'2843002842F4'
         DC    C'  Addr  Volser     Type       Exts        Largest ext'
         DC    C'          Trks  Cyls '
         DC    X'11436F2843F12842F585FFC63C447FA2D6FF85284300'
SCREENFL EQU   *-SCREENFX
OPTNPOP  DC    X'27F1C21140401DE41140451DE811404E1DE81140541DE8'
         DC    X'1140472841F22842F5'
         DC    C'Options',X'284100'
         DC    X'1141572842F52841F2'
         DC    26C' ',X'284100'
         DC    X'1142672841F22842F5',C' ',X'2841002842F6'
         DC    C'     Select option      ',X'2842F52841F2',C' '
         DC    X'1143772841F22842F5'
         DC    C' ',X'2841002843F1',24X'A2',X'2843002841F2',C' '
         DC    X'1145472841F22842F5',C' ',X'2841001DC42841F42842F413'
         DC    C' ',X'1DE42842F7284100'
         DC    C'  1. Exit            ',X'2842F52841F2',C' '
         DC    X'1146572841F22842F5',C' ',X'2841002842F7'
         DC    C'     2.                 ',X'2842F52841F2',C' '
         DC    X'1147672841F22842F5',C' ',X'2841002842F7'
         DC    C'     3.                 ',X'2842F52841F2',C' '
         DC    X'1148772841F22842F5',C' ',X'2841002842F7'
         DC    C'     4.                 ',X'2842F52841F2',C' '
         DC    X'114A472841F22842F5'
         DC    C' ',X'2841002843F1',24X'A2',X'2843002841F2',C' '
         DC    X'114B572841F22842F5',C' ',X'2841002842F1'
         DC    C'  Enter  PF3/15 Cancel  ',X'2842F52841F2',C' '
         DC    X'114C672841F22842F5'
         DC    26C' ',X'284100'
OPTNPOPL EQU   *-OPTNPOP
OPTHL1   DC    X'27F1C41145482842F3',C'     1. Exit            '
OPTHLL   EQU   *-OPTHL1
SORTPOP  DC    X'27F1C21140401DE41140451DE811404E1DE81140541DE8'
         DC    X'1140502841F22842F5',C'Sort',X'284100'
         DC    X'1141602841F22842F5'
         DC    C'                          '
         DC    X'1142702841F22842F5',C' ',X'2841002842F6'
         DC    C'      Sort listing      ',X'2842F52841F2',C' '
         DC    X'1144402841F22842F5'
         DC    C' ',X'2841002843F1',24X'A2',X'2843002841F2',C' '
         DC    X'1145502841F22842F5',C' ',X'2841001DC42841F42842F413'
         DC    C' ',X'1DE42842F7284100'
         DC    C'  1. BY CU Address   ',X'2842F52841F2',C' '
         DC    X'1146602841F22842F5',C' ',X'2841002842F7'
         DC    C'     2. By volser       ',X'2842F52841F2',C' '
         DC    X'1147702841F22842F5',C' ',X'2841002842F7'
         DC    C'     3. By # of extents ',X'2842F52841F2',C' '
         DC    X'1149402841F22842F5',C' ',X'2841002842F7'
         DC    C'     4. By largest ext  ',X'2842F52841F2',C' '
         DC    X'114A502841F22842F5',C' ',X'2841002842F7'
         DC    C'     5. By total trks   ',X'2842F52841F2',C' '
         DC    X'114B602841F22842F5',C' ',X'2841002842F7'
         DC    C'     6. By total cyls   ',X'2842F52841F2',C' '
         DC    X'114C702841F22842F5'
         DC    C' ',X'2841002843F1',24X'A2',X'2843002841F2',C' '
         DC    X'114E402841F22842F5',C' ',X'2841002842F1'
         DC    C'  Enter  PF3/15 Cancel  ',X'2842F52841F2',C' '
         DC    X'114F502841F22842F5'
         DC    C'                          '
SORTPOPL EQU   *-SORTPOP
SRTHL1   DC    X'27F1C41145512842F3',C'     1. By CU address   '
SRTHL2   DC    X'27F1C41146612842F3',C'     2. By volser       '
SRTHL3   DC    X'27F1C41147712842F3',C'     3. By # of extents '
SRTHL4   DC    X'27F1C41149412842F3',C'     4. By largest ext  '
SRTHL5   DC    X'27F1C4114A512842F3',C'     5. By total trks   '
SRTHL6   DC    X'27F1C4114B612842F3',C'     6. By total cyls   '
SRTHLL   EQU   *-SRTHL6
MASKPOP  DC    X'27F1C21140401DE41140451DE811404E1DE81140541DE8'
         DC    X'1140562841F22842F5',C'Mask',X'284100'
         DC    X'1141662841F22842F5'
         DC    C'                          '
         DC    X'1142762841F22842F5',C' ',X'2841002842F6'
         DC    C'      Listing mask      ',X'2842F52841F2',C' '
         DC    X'1144462841F22842F5',C' ',X'284100'
         DC    C'                        ',X'2841F2',C' '
         DC    X'1145562841F22842F5',C' ',X'2841001DC42841F42842F413'
         DC    C'      ',X'1DE42842F7284100'
         DC    C' Mask ie: JEC*  ',X'2842F52841F2',C' '
         DC    X'1146662841F22842F5',C' ',X'284100'
         DC    C'                        ',X'2841F2',C' '
         DC    X'1147762841F22842F5'
         DC    C' ',X'2841002843F1',24X'A2',X'2843002841F2',C' '
         DC    X'1149462841F22842F5',C' ',X'2841002842F1'
         DC    C'  Enter  PF3/15 Cancel  ',X'2842F52841F2',C' '
         DC    X'114A562841F22842F5'
         DC    C'                          '
MASKPOPL EQU   *-MASKPOP
SCREEN02 DS    0C
         DC    X'27F5C21140401DC41340404040'
         DC    X'1DC4',C' Options',X'1DC4',C' Sort'
         DC    X'1DC4',C' Mask',X'1DE4'
         DC    X'1141501DE44E3C425F604E404F'
         DC    X'1DE8'
         DC    C' Addr  Volser     Type       Exts        Largest ext'
         DC    C'          Trks  Cyls',X'1DE4'
         DC    X'11436F4F404E3C447F604E404F'
         DC    X'11464F4F404F'
         DC    X'11475F4F404F'
         DC    X'11486F4F404F'
         DC    X'11497F4F404F'
         DC    X'114B4F4F404F'
         DC    X'114C5F4F404F'
         DC    X'114D6F4F404F'
         DC    X'114E7F4F404F'
         DC    X'11504F4F404F'
         DC    X'11515F4F404F'
         DC    X'11526F4F404F'
         DC    X'11537F4F404F'
         DC    X'11554F4F404F'
         DC    X'11565F4F404F'
         DC    X'11576F4F404F'
         DC    X'11587F4F404F'
         DC    X'115A4F4F404F'
         DC    X'115B5F4F404F'
         DC    X'115C6F4F404E3C5D7F604E'
SCREEN2L EQU   *-SCREEN02               MESSAGE LENGTH
SCRENFX  DS    0C
         DC    X'27F1C21140401DC4131340404040'
         DC    X'1DC4',C' Options',X'1DC4',C' Sort'
         DC    X'1DC4',C' Mask',X'1DE4'
         DC    X'1141501DE44E3C425F604E404F'
         DC    X'1DE8'
         DC    C' Addr  Volser     Type       Exts        Largest ext'
         DC    C'          Trks  Cyls',X'1DE4'
         DC    X'11436F4F404E3C447F604E404F'
SCRENFL  EQU   *-SCRENFX
OPTNPP   DC    X'27F1C21140401DE41140451DE411404E1DE41140541DE4'
         DC    X'1140461DE8'
         DC    C'Options',X'1DE4'
         DC    X'1141561DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'1142661DE8'
         DC    C']',X'1DE4',C'    Select option     ',X'1DE8',C']'
         DC    X'1143761DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'1145461DE8',C']',X'1DC413'
         DC    C' ',X'1DE4'
         DC    C'  1. Exit           ',X'1DE8',C']',X'1DE4'
         DC    X'1146561DE8'
         DC    C']',X'1DE4',C'    2.                '
         DC    X'1DE8',C']',X'1DE4'
         DC    X'1147661DE8'
         DC    C']',X'1DE4',C'    3.                '
         DC    X'1DE8',C']',X'1DE4'
         DC    X'1148761DE8'
         DC    C']',X'1DE4',C'    4.                '
         DC    X'1DE8',C']',X'1DE4'
         DC    X'114A461DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'114B561DE8'
         DC    C']',X'1DE4',C' Enter  PF3/15 Cancel '
         DC    X'1DE8',C']',X'1DE4'
         DC    X'114C661DE8'
         DC    C'+------------------------+',X'1DE4'
OPTNPPL  EQU   *-OPTNPP
SORTPP   DC    X'27F1C21140401DE41140451DE411404E1DE41140541DE4'
         DC    X'11404F1DE8',C'Sort',X'1DE4'
         DC    X'11415F1DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'11426F1DE84F1DE4'
         DC    C'     Sort listing     ',X'1DE84F1DE8'
         DC    X'11437F1DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'11454F1DE84F1DC413401DE4'
         DC    C'  1. By CU Address  ',X'1DE84F1DE4'
         DC    X'11465F1DE84F1DE4'
         DC    C'    2. By volser      ',X'1DE84F1DE4'
         DC    X'11476F1DE84F1DE4'
         DC    C'    3. By # of extents',X'1DE84F1DE4'
         DC    X'11487F1DE84F1DE4'
         DC    C'    4. By largest ext ',X'1DE84F1DE4'
         DC    X'114A4F1DE84F1DE4'
         DC    C'    5. By total trks  ',X'1DE84F1DE4'
         DC    X'114B5F1DE84F1DE4'
         DC    C'    6. By total cyls  ',X'1DE84F1DE4'
         DC    X'114C6F1DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'114D7F1DE84F1DE4'
         DC    C' Enter  PF3/15 Cancel ',X'1DE84F1DE4'
         DC    X'114F4F1DE8'
         DC    C'+------------------------+',X'1DE4'
SORTPPL  EQU   *-SORTPP
SRTHL11  DC    X'27F1C41145511DE8',C'    1. By CU address  '
SRTHL12  DC    X'27F1C41146611DE8',C'    2. By volser      '
SRTHL13  DC    X'27F1C41147711DE8',C'    3. By # of extents'
SRTHL14  DC    X'27F1C41149411DE8',C'    4. By largest ext '
SRTHL15  DC    X'27F1C4114A511DE8',C'    5. By total trks  '
SRTHL16  DC    X'27F1C4114B611DE8',C'    6. By total cyls  '
SRTHL1L  EQU   *-SRTHL16
OPTHL11  DC    X'27F1C41145481DE8',C'    1. Exit',X'1DE4'
OPTHL1L  EQU   *-OPTHL11
MASKPP   DC    X'27F1C21140401DE41140451DE411404E1DE41140541DE4'
         DC    X'1140551DE8',C'Mask'
         DC    X'1141651DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'1142751DE84F1DE4'
         DC    C'     Listing mask     ',X'1DE84F1DE8'
         DC    X'1144451DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'1145551DE84F1DC413'
         DC    C'      ',X'1DE4'
         DC    C' Mask ie: JEC* ',X'1DE84F1DE4'
         DC    X'1146651DE8'
         DC    C']                        ]',X'1DE4'
         DC    X'1147751DE8'
         DC    C'+------------------------+',X'1DE4'
         DC    X'1149451DE84F1DE4'
         DC    C' Enter  PF3/15 Cancel ',X'1DE84F1DE4'
         DC    X'114A551DE8'
         DC    C'+------------------------+',X'1DE4'
MASKPPL  EQU   *-MASKPP
SCRNEAB  DS   0F
SCRN01   DC    A(SCREEN01)
SCRN01L  DC    A(SCREEN1L)
SCRN02   DC    A(SCREENFX)
SCRN02L  DC    A(SCREENFL)
POP01    DC    A(OPTNPOP)
POP01L   DC    A(OPTNPOPL)
POP02    DC    A(SORTPOP)
POP02L   DC    A(SORTPOPL)
POP03    DC    A(MASKPOP)
POP03L   DC    A(MASKPOPL)
HIL01    DC    A(SRTHL1)
         DC    A(SRTHLL)
HIL02    DC    A(SRTHL2)
         DC    A(SRTHLL)
HIL03    DC    A(SRTHL3)
         DC    A(SRTHLL)
HIL04    DC    A(SRTHL4)
         DC    A(SRTHLL)
HIL05    DC    A(SRTHL5)
         DC    A(SRTHLL)
HIL06    DC    A(SRTHL6)
         DC    A(SRTHLL)
HIL07    DC    A(OPTHL1)
         DC    A(OPTHLL)
HIL08    DC    A(MORE)
         DC    A(MOREL)
HIL09    DC    A(NOMORE)
         DC    A(NOMOREL)
SCRNLEN  EQU   *-SCRNEAB
SCRNNEAB DS   0F
         DC    A(SCREEN02)
         DC    A(SCREEN2L)
         DC    A(SCRENFX)
         DC    A(SCRENFL)
         DC    A(OPTNPP)
         DC    A(OPTNPPL)
         DC    A(SORTPP)
         DC    A(SORTPPL)
         DC    A(MASKPP)
         DC    A(MASKPPL)
         DC    A(SRTHL11)
         DC    A(SRTHL1L)
         DC    A(SRTHL12)
         DC    A(SRTHL1L)
         DC    A(SRTHL13)
         DC    A(SRTHL1L)
         DC    A(SRTHL14)
         DC    A(SRTHL1L)
         DC    A(SRTHL15)
         DC    A(SRTHL1L)
         DC    A(SRTHL16)
         DC    A(SRTHL1L)
         DC    A(OPTHL11)
         DC    A(OPTHL1L)
         DC    A(MOREX)
         DC    A(MOREXL)
         DC    A(NOMOREX)
         DC    A(NOMOREXL)
         LTORG
         END

This article will be concluded next month with the publication
of the remaining components of the system.

Wayne MacDonald
MVS Systems Programmer
GIO Technical Services (Australia)                        c Xephon 1991

