Creation of an MVS stand-alone system
THE JUSTIFICATION
In today’s typical data processing installation, the uptime expectations for MVS
are higher than ever.  This is partly because of advertised MVS reliability and
even greater dependence on many real-time applications.
Along with these greater expectations comes the ever-growing complexity of the
MVS environment.  There are more and more support, productivity, and monitoring
products to be installed and maintained.  Despite the claims of reliability MVS,
partly because of all its enhancements, continues to have problems.  Finally,
there is the issue of human error, which in the MVS environment is costly, for
it frequently results in IPL failure.  There are, especially for the new MVS
systems programmer, countless ways to achieve an un-IPLable MVS system.  We must
also not forget hardware failures, which, although infrequent, can be disastrous
and embarrassing if not prepared for.
All these situations can be and should be addressed with proper change control
and back-up procedures for critical datasets.  Change control can be addressed
with a simple machine-resident log of all changes and back-outs.  Change
policies require retaining virgin versions of SYS1.PARMLIB members before
changes, and retaining (on DASD) back-up versions of the system residence pack
after major changes should also be considered.  It is also advised to have back-
ups of the master catalog, small versions of the JES2 checkpoint and HASPACE
datasets, and skeleton page datasets readily available on DASD for ‘instant’
recovery from hardware failure or corruption on their resident packs.  In every
shop there is usually  DASD, that because of high performance requirements, is
modestly allocated and is a strong candidate for this use.
The thrust of this article however is not change control, nor is it how to
develop a policy for backing up critical system datasets.  It is a
justification, which is discussed at length, for developing an entire MVS or
MVS/XA functional system on a single DASD actuator.  Using the recently released
version of DFDSS, tailored development of a procedure to build a stand-alone MVS
operating system is almost trivial and in the author’s opinion essential in
guaranteeing the highest level of MVS uptime.  The stand-alone system (SAS) or
mini-system may be backed up onto tape or remain on DASD to expedite recovery.
This ensures that one always has an IPLable system within reach.  If a
SYS1.PARMLIB member, a SYSMOD, an IOGEN, an improperly followed back-up
procedure, or even a hardware failure prevents one from being able to IPL, one
can simply IPL the stand-alone system to recover the primary system.
Note: The phrases stand-alone system, mini-system, and SAS are used
interchangeably throughout this article.
The SAS facility is an excellent base for a disaster recovery plan.  Many MVS
installations that have developed disaster recovery procedures have never
performed an entire test of the procedures.  Even if tests have been performed,
the disaster plan is rarely kept absolutely current with production.  This opens
a window of vulnerability, in that the omission of a system-required production
dataset, a back-up/restore version incompatibility, or even a bad tape may make
an IPL of the disaster back-up MVS impossible.  This may require an entire
installation  of MVS to reach a production release level.  The stand-alone
system provides a ‘back-up to the back-up’.  It should be included in any MVS
disaster recovery package.
The facility is even more functional in a VM or VM/XA SF environment.  Within
VM, the mini-MVS can be used as a test environment for any change that warrants
it.  It can also be used under VM to trial new functions of MVS that are likely
to cause complications in the production MVS arena.  The user may test user-
authorised SVCs, SRBs, and exits.  Major or even minor changes such as IOGENS,
PTFs, IEASYS00 updates, CBIPOs, or PDOs can all be tried out without any fear of
jeopardising the production environment.  Experience has shown that the minimum
virtual machine size for an average MVS/XA guest using one or two TSO users and
initiators is 6MB.  The MVS consoles and TSO terminals can be defined as VM
specials to lessen the need for additional devices for testing.  Another hint is
that, if additional datasets or changes are needed from the production MVS
machine, simply place the SAS guest into CP READ and issue the CP SET RUN OFF
command to stop the SAS guest.  Then detach the SYSRES pack, attach it to the
production MVS, perform your copies or changes, attach the SYSRES back to the
SAS machine and continue uninterrupted.  Also, remember that there is no MVS/VM
handshaking so the SAS machine will impact the VM paging subsystem.  It is
advisable to monitor the VM paging rate and possibly add VM paging actuators
(not additional space on an existing paging pack).  This will be especially
measurable during the SAS IPL, for MVS performs a clear memory operation on all
on-line real memory at IPL (in fact, this is how MVS determines the amount of
real storage it has available to it).  This is also the reason that the decision
about the size of the guest machine of the SAS machine should be reached with
prudence.
The use of VM mini-disks and GRS may also be employed to implement shared DASD
between the production MVS and stand-alone MVS to allow for testing of entire
subsystems or complicated applications, which require a variety of DASD-based
datasets (such as CICS).
The mini-system can also be very useful for experimentation with MVS facilities
and system modelling.  Users may trial a variety of functions during production
hours previously considered too risky.
THE CREATION PROCESS
The process of building a stand-alone MVS system can be packaged into a series
of jobs tailored by the organisation to what they perceive their needs are in a
mini-MVS system.  It is advisable to keep the size of the mini-system to a
minimum in order to leave as much room on the actuator as possible for growth
and testing.  It is helpful to create a PDS with all the required jobs along
with a member outlining the order and a description of each step.
Each of the jobs used to build the stand-alone system pack is contained in the
job SYSNUCUP.  A pre-requisite is the installation of DFDSS 2.2.0.  This version
provides the automatic cataloguing and partial qualifiers for copied datasets.
After copying all the required datasets, it is now necessary to tailor any
SYS1.PARMLIB members.  Each site may require additional tailoring; however,
every site will probably need to update its PARMLIB members IEASYS00, IEAAPF00,
JES2PARM, and may want to update COMMND00.  The member IEAAPF00 needs to have
any of the APF-authorised libraries that are now on SYSSAS added.  The member
JES2PARM needs the new VOLSER pre-fixes added for the JES2 datasets.  It should
also be updated to reduce the number of started initiators.  The member IEASYS00
needs to be updated with the new page datasets.  Finally, COMMND00 should be
updated to prevent any unwanted started tasks from starting (if the site uses
COMMND00 for this purpose).  The code for IEASYS00 and IEAAPF00 shows examples
of each, except for COMMND00, which does not require changes, only deletions.
Each parameter update made for SAS is flagged with ‘(*** SAS ***)’.  The
JES2PARM member is abbreviated from its normal length to show only the
parameters that need to be changed.
After updating all the required SYS1.PARMLIB members any system procedures
should be updated.  All sites running JES2 will need to remove any PROCLIB
datasets that were not chosen to be ‘brought over’ from the production MVS
system.  All these tailored members should be saved in the SAS library, which
contains all the SAS information.
FINAL THOUGHTS
At this time your stand-alone or mini-MVS system is ready to be IPLed.  After it
is tested, use DFDSS full volume back-up to create back-up tapes.  Remember to
create a stand-alone IPLable DFDSS program tape that allows DFDSS to run without
an operating system.  This will allow the SAS system to be restored when the
production MVS system is not functional.  It is advisable to re-create the
stand-alone system whenever a new production system is upgraded or after major
revision.  This will maintain compatibility between the production and SAS
environments.  If the SAS system is a RACF user, it is critical that the TSO
users are ‘frozen’ or protected from expiration.  If this step is not performed
and the SAS system is not used beyond the expiration period, depending on the
installation RACF options defined, all of your TSO user-ids could be unusable.
ORDER OF JOBS TO CREATE A STAND-ALONE SYSTEM
RESINIT   -    initialise SYSRES volume
MSCATDEF  -    define master catalog
RESBUILD  -    copy systems datasets and catalog
IPLPROG   -    place IPL text on SYSRES volume
COPYOTH   -    copy other datasets from other volumes
ALLOCOTH  -    allocate and define other system datasets
SYSNUCUP  -    update SYS1.NUCLEUS with new catalog volume
At this point the following members in TO.SASBUILD.LIB can be used to replace
SYS1.PARMLIB members on the stand-alone system for IPL:
•    JES2PM00
•    IEAAPF00
•    IEASYS00
•    COMMND00
In addition, the member JES2 in TO.SASBUILD.LIB can be used to replace
SYS1.PROCLIB members on the stand-alone system for IPL.
The members BACKUP and RESTORE may be used to create a set of back-up tapes of
the newly-created system.
This article will be continued over the next two months when we shall be
printing details of the job streams used to set up this MVS stand-alone system.

Steven Zeh
Lead Systems Programmer
Norstar Data Services (USA)   © Xephon 1988






















































