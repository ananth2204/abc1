TSO commands to control swapping status

Required software:  MVS (any release).

THE DONTSWAP COMMAND

This makes the address space itself non-swappable, a nice facility
to have in TSO when tracing service unit consumption for TSO
activity via RMFMON from a different TSO terminal.

*      TSO COMMAND DONTSWAP. CAN ALSO BE CALLED AS A SUBROUTINE.
*      SETS THE ADDRESS SPACE AS NONSWAPPABLE
DONTSWAP INITR                          see issue 15 pages 20-24
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      GET KEY ZERO AND SUPV STATE
         SYSEVENT DONTSWAP              SET NON SWAPPABLE
         LTR   R1,R1                    TEST FOR ACCEPTED
         BZ    EXIT                     EXIT IF ACCEPTED
         TPUT  ERROR,L'ERROR            INFORM USER IF NOT
EXIT     MODESET KEY=NZERO,MODE=PROB    RETURN TO USER KEY AND STATE
         AUTHOFF                        see issue 10 page 24
         EXITR                          see issue 15 pages 25-26
ERROR    DC    C'DONTSWAP NOT ACCEPTED'
         LTORG
         END

THE OKSWAP COMMAND

The TSO command OKSWAP makes the address space itself swappable.

*      TSO COMMAND OKSWAP. CAN ALSO BE CALLED AS A SUBROUTINE.
*      SETS THE ADDRESS SPACE AS SWAPPABLE
OKSWAP   INITR                          see issue 15 pages 20-24
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      GET KEY ZERO AND SUPV STATE
         SYSEVENT OKSWAP                SET SWAPPABLE
         LTR   R1,R1                    TEST FOR ACCEPTED
         BZ    EXIT                     EXIT IF ACCEPTED
         TPUT  ERROR,L'ERROR            INFORM USER IF NOT
EXIT     MODESET KEY=NZERO,MODE=PROB    RETURN TO USER KEY AND STATE
         AUTHOFF                        see issue 10 page 24
         EXITR                          see issue 15 pages 25-26
ERROR    DC    C'OKSWAP NOT ACCEPTED'
         LTORG
         END

THE TSO SWAP COMMAND

The TSO command SWAP can make any non-swappable address
space swappable.  Together with the command SWAPNON it eases
experiments with and setting of non-swappable/swappable status
without changing the PPT, which requires IPL to take effect:

*    MAKE A DIFFERENT ADDRESS SPACE SWAPPABLE
*    THE COMMAND TAKES ALL ADDR SPACES UNDER THE INDICATED NAME.
*    TSO COMMAND: SWAP ADDR-SPACE-NAME
         IHAPSA
         USING PSA,R0                   DUMMY ADDRESS PSA
         IHAASCB
         USING ASCB,R15                 ADDRESS ASCB
         IRAOUCB
         USING OUCB,R14                 ADDRESS ASCB
&ID      SETC  'SWAP'
&IDLEN   SETA  K'&ID
&ID      INITR                          see issue 15 pages 20-24
         L     R2,0(R1)                 GET PARM ADDR
         LH    R3,0(R2)                 GET PARM LENGTH
         CH    R3,=AL2(5+&IDLEN)        TEST FOR ZERO DATA
         BNH   EXIT                     IF ZERO, IGNORE
         LR    R15,R3                   SAVE LENGTH
         SH    R15,=AL2(5+&IDLEN)       REDUCE BY COMMAND HEADER
         LA    R14,&IDLEN+5(R2)         POINT TO FIRST DATA
RECYCLE  CH    R15,=H'256'              MORE THAN 256 TO XLATE
         BNH   XLATELST                 GO TO LAST XLATE
         TR    0(256,R14),TRTAB         XLATE A BATCH OF 256 BYTES
         SH    R15,=H'256'              COUNT DOWN ALREADY XLATED
         LA    R14,256(R14)             STEP BEHIND
         B     RECYCLE                  AND RECYCLE
XLATELST BCTR  R15,0                    REDUCE FOR EXECUTE
         EX    R15,TRLATE               TRANSLATE TO UPPER
         LOAD  EP=ASVTSCAN              GET ASVT SCAN SUBROUTINE
         ST    R0,ASVTADDR              SAVE ADDR OF ASVTSCAN
         XC    ASCBNO,ASCBNO            CLEAR ADDR SPACE ID
RESCAN   L     R14,ASCBNO               GET ADDR SPACE ID
         LA    R14,1(R14)               STEP ADDR SPACE ID UP BY ONE
         ST    R14,ID                   AND SAVE IT FOR CALL
         ST    R14,ASCBNO               AND SAVE IT FOR CALL
         L     R15,ASVTADDR             GET ADDR OF ASVT SCAN SUBROUT
         CALLXA (15),(ADDRNAME,TYPE,ASCBADDR) CALL ASVT SCAN SUBROUITNE
         CH    R15,=H'8'                TEST FOR END
         BE    EXIT                     THEN FINISHED
         CH    R15,=H'4'                TEST FOR EMPTY POINTER
         BE    RESCAN                   THEN RECYCLE
         LR    R11,R3                   SAVE LENGTH
         SH    R11,=AL2(5+&IDLEN+1)     REDUCE BY HEADER + 1
         EX    R11,COMPARE              MATCH USERID
         BNE   RESCAN                   IF NOT, THEN RECYCLE
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      SET KEY ZERO, SUPERVISOR STATE
         SETLOCK OBTAIN,TYPE=SRM,MODE=UNCOND,REGS=USE,                 *
               RELATED=SWAP             GET SRM LOCK
         L     R15,ASCBADDR             GET ASCB ADDR
         L     R14,ASCBOUCB             GET OUCB ADDR
         NI    ASCBFLG1,255-ASCBNSWP    TURN OFF NON SWAP
         NI    OUCBSFL,255-OUCBNSW      TURN OFF NON SWAP
         SETLOCK RELEASE,TYPE=SRM,REGS=USE,                            *
               RELATED=SWAP             RELEASE SRM LOCK
         MODESET KEY=NZERO,MODE=PROB    SET KEY NZERO, PROBLEM STATE
         L     R0,ASCBNO                GET ASID NO
         SLL   R0,16                    SHIFT INTO HIGH ORDER
         SR    R1,R1                    NO ECB
         SVC   95                       SYSEVENT 0
         AUTHOFF                        see issue 10 page 24
         B     RESCAN                   LOOK FOR MORE OF SAME NAME
EXIT     EXITR                          see issue 15 pages 25-26
COMPARE  CLC   ADDRNAME(0),&IDLEN+5(R2) MATCH USERID
ASVTADDR DS    F                        ADDR OF ASVT SCAN SUBROUTINE
ASCBNO   DC    F'0'                     ADDR SPACE NO
ID       DS    0F                       ADDR SPACE ID
ADDRNAME DC    CL8' '                   ADDR SPACE NAME
TYPE     DC    CL4' '                   ADDR SPACE TYPE
ASCBADDR DS    A                        ADDR OF ASCB
TRLATE   TR    0(0,R14),TRTAB           TRANSL INPUT
TRTAB    DC    256AL1(*-TRTAB)          TRANSLATE TABLE USED BY
         ORG   TRTAB+C'ö'                XLATE OF INPUT AND
         DC    C'Ö'                      XLATE OF INVALID JOBNAME
         ORG   TRTAB+C'ä'
         DC    C'Ä'
         ORG   TRTAB+C'å'
         DC    C'Å'
         ORG   TRTAB+C'a'
         DC    C'ABCDEFGHI'
         ORG   TRTAB+C'i'
         DC    C'JKLMNOPQR'
         ORG   TRTAB+C's'
         DC    C'STUVWXYZ'
         ORG
         LTORG
         END

THE TSO SWAPNON COMMAND

The TSO command SWAPNON can make a swappable address space non-swappable:

*    MAKE A DIFFERENT ADDRESS SPACE NON SWAPPABLE
*    THE COMMAND TAKES ALL ADDR SPACES UNDER THE INDICATED NAME.
*    TSO COMMAND: SWAPNON ADDR-SPACE-NAME
         IHAPSA
         USING PSA,R0                   DUMMY ADDRESS PSA
         IHAASCB
         USING ASCB,R15                 ADDRESS ASCB
         IRAOUCB
         USING OUCB,R14                 ADDRESS ASCB
&ID      SETC  'SWAPNON'
&IDLEN   SETA  K'&ID
&ID      INITR                          see issue 15 pages 20-24
         L     R2,0(R1)                 GET PARM ADDR
         LH    R3,0(R2)                 GET PARM LENGTH
         CH    R3,=AL2(5+&IDLEN)        TEST FOR ZERO DATA
         BNH   EXIT                     IF ZERO, IGNORE
         LR    R15,R3                   SAVE LENGTH
         SH    R15,=AL2(5+&IDLEN)       REDUCE BY COMMAND HEADER
         LA    R14,&IDLEN+5(R2)         POINT TO FIRST DATA
RECYCLE  CH    R15,=H'256'              MORE THAN 256 TO XLATE
         BNH   XLATELST                 GO TO LAST XLATE
         TR    0(256,R14),TRTAB         XLATE A BATCH OF 256 BYTES
         SH    R15,=H'256'              COUNT DOWN ALREADY XLATED
         LA    R14,256(R14)             STEP BEHIND
         B     RECYCLE                  AND RECYCLE
XLATELST BCTR  R15,0                    REDUCE FOR EXECUTE
         EX    R15,TRLATE               TRANSLATE TO UPPER
         LOAD  EP=ASVTSCAN              GET ASVT SCAN SUBROUTINE
         ST    R0,ASVTADDR              SAVE ADDR OF ASVTSCAN
         XC    ASCBNO,ASCBNO            CLEAR ADDR SPACE ID
RESCAN   L     R14,ASCBNO               GET ADDR SPACE ID
         LA    R14,1(R14)               STEP ADDR SPACE ID UP BY ONE
         ST    R14,ID                   AND SAVE IT FOR CALL
         ST    R14,ASCBNO               AND SAVE IT FOR CALL
         L     R15,ASVTADDR             GET ADDR OF ASVT SCAN.SUBROUT
         CALLXA (15),(ADDRNAME,TYPE,ASCBADDR) CALL ASVT SCAN SUBROUTINE
         CH    R15,=H'8'                TEST FOR END
         BE    EXIT                     THEN FINISHED
         CH    R15,=H'4'                TEST FOR EMPTY POINTER
         BE    RESCAN                   THEN RECYCLE
         LR    R11,R3                   SAVE LENGTH
         SH    R11,=AL2(5+&IDLEN+1)     REDUCE BY HEADER + 1
         EX    R11,COMPARE              MATCH USERID
         BNE   RESCAN                   IF NOT, THEN RECYCLE
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      SET KEY ZERO, SUPERVISOR STATE
         SETLOCK OBTAIN,TYPE=SRM,MODE=UNCOND,REGS=USE,                 *
               RELATED=SWAPNON          GET SRM LOCK
         L     R15,ASCBADDR             GET ASCB ADDR
         L     R14,ASCBOUCB             GET OUCB ADDR
         OI    ASCBFLG1,ASCBNSWP        TURN ON NON SWAP
         OI    OUCBSFL,OUCBNSW          TURN ON NON SWAP
         SETLOCK RELEASE,TYPE=SRM,REGS=USE,                            *
               RELATED=SWAPNON          RELEASE SRM LOCK
         MODESET KEY=NZERO,MODE=PROB    SET KEY NZERO, PROBLEM STATE
         L     R0,ASCBNO                GET ASID NO
         SLL   R0,16                    SHIFTH INTO HIGH ORDER
         SR    R1,R1                    NO ECB
         SVC   95                       SYSEVENT 0
         AUTHOFF                        see issue 10 page 24
         B     RESCAN                   GO LOOK FOR MORE OF SAME NAME
EXIT     EXITR                          see issue 15 pages 25-26
COMPARE  CLC   ADDRNAME(0),&IDLEN+5(R2) MATCH USERID
ASVTADDR DS    F                        ADDR OF ASVT SCAN SUBROUTINE
ASCBNO   DC    F'0'                     ADDR SPACE NO
ID       DS    0F                       ADDR SPACE ID
ADDRNAME DC    CL8' '                   ADDR SPACE NAME
TYPE     DC    CL4' '                   ADDR SPACE TYPE
ASCBADDR DS    A                        ADDR OF ASCB
TRLATE   TR    0(0,R14),TRTAB           TRANSL INPUT
TRTAB    DC    256AL1(*-TRTAB)          TRANSLATE TABLE USED BY
         ORG   TRTAB+C'ö'                XLATE OF INPUT AND
         DC    C'Ö'                      XLATE OF INVALID JOBNAME
         ORG   TRTAB+C'ä'
         DC    C'Ä'
         ORG   TRTAB+C'å'
         DC    C'Å'
         ORG   TRTAB+C'a'
         DC    C'ABCDEFGHI'
         ORG   TRTAB+C'i'
         DC    C'JKLMNOPQR'
         ORG   TRTAB+C's'
         DC    C'STUVWXYZ'
         ORG
         LTORG
         END

If a started task or job should be made non-swappable
dynamically, without having a TSO user to do the task, the
following technique can be applied. Since a request for non-
swappability only lasts for the current step it does not help to
execute DONTSWAP or SWAPNON in-line in batch; instead do the
following to make program xxxxxxx non-swappable:

//JOBA JOB ....
//S1   EXEC PGM=INTCMD,PARM='S SWAPNON,JOBN=JOBA'
//S2   EXEC PGM=xxxxxxx

and have a procedure as follows:

//SWAPNON  PROC JOBN=,SLEEP=10
//*  MAKE AN ADDRESS SPACE NON SWAPPABLE
//S0       EXEC PGM=INTSYSIN,
// PARM='SLEEP &SLEEP'
//SYSUT2   DD
DSN=&TEMP,UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS)
//S1       EXEC PGM=INTSYSIN,
// PARM='SWAPNON &JOBN'
//SYSUT2   DD   DSN=&TEMP,DISP=MOD
//S2       EXEC PGM=IKJEFT01,DYNAMNBR=10
//SYSTSPRT DD   SYSOUT=*
//SYSTSIN  DD   DSN=&TEMP,DISP=(OLD,DELETE)

THE TSO COMMAND SWAPOUT

The TSO command SWAPOUT can be used to temporarily disable
execution in an address space (a different technique is to reset a
swappable address space to a domain with a maximum multi-
programming level of zero while a non-swappable address space
will continue execution in such a domain).

*    SWAP OUT AN ADDR SPACE AND LEAVE IT UNABLE TO EXECUTE UNTIL
*    COMMAND SWAPIN IS ISSUED FOR THAT ADDR SPACE
*    THE COMMAND TAKES ALL ADDR SPACES UNDER THE INDICATED NAME.
*    TSO COMMAND: SWAPOUT ADDR-SPACE-NAME
         IHAPSA
         USING PSA,R0                   DUMMY ADDRESS PSA
         IHAASCB
         USING ASCB,R15                 ADDRESS ASCB
         IRAOUCB
         USING OUCB,R14                 ADDRESS ASCB
&ID      SETC  'SWAPOUT'
&IDLEN   SETA  K'&ID
&ID      INITR                          see issue 15 pages 20-24
         L     R2,0(R1)                 GET PARM ADDR
         LH    R3,0(R2)                 GET PARM LENGTH
         CH    R3,=AL2(5+&IDLEN)        TEST FOR ZERO DATA
         BNH   EXIT                     IF ZERO, IGNORE
         LR    R15,R3                   SAVE LENGTH
         SH    R15,=AL2(5+&IDLEN)       REDUCE BY COMMAND HEADER
         LA    R14,&IDLEN+5(R2)         POINT TO FIRST DATA
RECYCLE  CH    R15,=H'256'              MORE THAN 256 TO XLATE
         BNH   XLATELST                 GO TO LAST XLATE
         TR    0(256,R14),TRTAB         XLATE A BATCH OF 256 BYTES
         SH    R15,=H'256'              COUNT DOWN ALREADY XLATED
         LA    R14,256(R14)             STEP BEHIND
         B     RECYCLE                  AND RECYCLE
XLATELST BCTR  R15,0                    REDUCE FOR EXECUTE
         EX    R15,TRLATE               TRANSLATE TO UPPER
         LOAD  EP=ASVTSCAN              GET ASVT SCAN SUBROUTINE
         ST    R0,ASVTADDR              SAVE ADDR OF ASVTSCAN.
         XC    ASCBNO,ASCBNO            CLEAR ADDR SPACE ID
RESCAN   L     R14,ASCBNO               GET ADDR SPACE ID
         LA    R14,1(R14)               STEP ADDR SPACE ID UP BY ONE
         ST    R14,ID                   AND SAVE IT FOR CALL
         ST    R14,ASCBNO               AND SAVE IT FOR CALL
         L     R15,ASVTADDR             GET ADDR OF ASVT SCAN SUBROUT
         CALLXA (15),(ADDRNAME,TYPE,ASCBADDR) CALL ASVT SCAN SUBROUTINE
         CH    R15,=H'8'                TEST FOR END
         BE    EXIT                     THEN FINISHED
         CH    R15,=H'4'                TEST FOR EMPTY POINTER
         BE    RESCAN                   THEN RECYCLE
         LR    R11,R3                   SAVE LENGTH
         SH    R11,=AL2(5+&IDLEN+1)     REDUCE BY HEADER + 1
         EX    R11,COMPARE              MATCH USERID
         BNE   RESCAN                   IF NOT, THEN RECYCLE
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      SET KEY ZERO, SUPERVISOR STATE
         SETLOCK OBTAIN,TYPE=SRM,MODE=UNCOND,REGS=USE,                 *
               RELATED=SWAPIN           GET SRM LOCK
         L     R15,ASCBADDR             GET ASCB ADDR
         L     R14,ASCBOUCB             GET OUCB ADDR
         OI    ASCBRCTF,ASCBOUT         ADDR SPACE CONSIDERED SWAPOUT
         OI    ASCBDSP1,ASCBFAIL        ADDR SPACE NON DISPATCH
         OI    OUCBSFL,OUCBNSWI         PREVENT SWAPIN
         SETLOCK RELEASE,TYPE=SRM,REGS=USE,                            *
               RELATED=SWAPIN           RELEASE SRM LOCK
         MODESET KEY=NZERO,MODE=PROB    SET KEY NZERO, PROBLEM STATE
         L     R0,ASCBNO                GET ASID NO
         SR    R1,R1                    NO ECB
         SLL   R0,16                    SHIFT INTO HIGH ORDER
         SVC   95                       SYSEVENT 0
         AUTHOFF                        see issue 10 page 24
         B     RESCAN                   LOOK FOR MORE OF SAME NAME
EXIT     EXITR                          see issue 15 pages 25-26
COMPARE  CLC   ADDRNAME(0),&IDLEN+5(R2) MATCH USERID
ASVTADDR DS    F                        ADDR OF ASVT SCAN SUBROUTINE
ASCBNO   DC    F'0'                     ADDR SPACE NO
ID       DS    0F                       ADDR SPACE ID
ADDRNAME DC    CL8' '                   ADDR SPACE NAME
TYPE     DC    CL4' '                   ADDR SPACE TYPE
ASCBADDR DS    A                        ADDR OF ASCB
TRLATE   TR    0(0,R14),TRTAB           TRANSL INPUT
TRTAB    DC    256AL1(*-TRTAB)          TRANSLATE TABLE USED BY
         ORG   TRTAB+C'ö'               XLATE OF INPUT AND
         DC    C'Ö'                     XLATE OF INVALID JOBNAME
         ORG   TRTAB+C'ä'
         DC    C'Ä'
         ORG   TRTAB+C'å'
         DC    C'Å'
         ORG   TRTAB+C'a'
         DC    C'ABCDEFGHI'
         ORG   TRTAB+C'i'
         DC    C'JKLMNOPQR'
         ORG   TRTAB+C's'
         DC    C'STUVWXYZ'
         ORG
         LTORG
         END

THE TSO COMMAND SWAPIN

The TSO command SWAPIN swaps in again with an address space
that was previously swapped out (by SWAPOUT or SRM).

*    SWAP IN A PREVIOUSLY SWAPPED OUT ADDR SPACE
*    THE COMMAND TAKES ALL ADDR SPACES UNDER THE INDICATED NAME.
*    TSO COMMAND: SWAPIN ADDR-SPACE-NAME
         IHAPSA
         USING PSA,R0                   DUMMY ADDRESS PSA
         IHAASCB
         USING ASCB,R15                 ADDRESS ASCB
         IRAOUCB
         USING OUCB,R14                 ADDRESS ASCB
&ID      SETC  'SWAPIN'
&IDLEN   SETA  K'&ID
&ID      INITR
         L     R2,0(R1)                 GET PARM ADDR
         LH    R3,0(R2)                 GET PARM LENGTH
         CH    R3,=AL2(5+&IDLEN)        TEST FOR ZERO DATA
         BNH   EXIT                     IF ZERO, IGNORE
         LR    R15,R3                   SAVE LENGTH
         SH    R15,=AL2(5+&IDLEN)       REDUCE BY COMMAND HEADER
         LA    R14,&IDLEN+5(R2)         POINT TO FIRST DATA
RECYCLE  CH    R15,=H'256'              MORE THAN 256 TO XLATE
         BNH   XLATELST                 GO TO LAST XLATE
         TR    0(256,R14),TRTAB         XLATE A BATCH OF 256 BYTES
         SH    R15,=H'256'              COUNT DOWN ALREADY XLATED
         LA    R14,256(R14)             STEP BEHIND
         B     RECYCLE                  AND RECYCLE
XLATELST BCTR  R15,0                    REDUCE FOR EXECUTE
         EX    R15,TRLATE               TRANSLATE TO UPPER
         LOAD  EP=ASVTSCAN              GET ASVT SCAN SUBROUTINE
         ST    R0,ASVTADDR              SAVE ADDR OF ASVTSCAN
         XC    ASCBNO,ASCBNO            CLEAR ADDR SPACE ID
RESCAN   L     R14,ASCBNO               GET ADDR SPACE ID
         LA    R14,1(R14)               STEP ADDR SPACE ID UP BY ONE
         ST    R14,ID                   AND SAVE IT FOR CALL
         ST    R14,ASCBNO               AND SAVE IT FOR CALL
         L     R15,ASVTADDR             GET ADDR OF ASVT SCAN SUBROUT
         CALLXA (15),(ADDRNAME,TYPE,ASCBADDR) CALL ASVT SCAN SUBROUTINE
         CH    R15,=H'8'                TEST FOR END
         BE    EXIT                     THEN FINISHED
         CH    R15,=H'4'                TEST FOR EMPTY POINTER
         BE    RESCAN                   THEN RECYCLE
         LR    R11,R3                   SAVE LENGTH
         SH    R11,=AL2(5+&IDLEN+1)     REDUCE BY HEADER + 1
         EX    R11,COMPARE              MATCH USERID
         BNE   RESCAN                   IF NOT, THEN RECYCLE
         AUTHON                         see issue 10 page 24
         MODESET KEY=ZERO,MODE=SUP      SET KEY ZERO, SUPERVISOR STATE
         SETLOCK OBTAIN,TYPE=SRM,MODE=UNCOND,REGS=USE,                 *
               RELATED=SWAPIN           GET SRM LOCK
         L     R15,ASCBADDR             GET ASCB ADDR
         L     R14,ASCBOUCB             GET OUCB ADDR
         NI    ASCBRCTF,255-ASCBOUT     ADDR SPACE CONSIDERED SWAPIN
         NI    ASCBDSP1,255-ASCBFAIL    ADDR SPACE DISPATCH AGAIN
         NI    OUCBSFL,255-OUCBNSWI     TURN OFF PREVENT SWAPIN
         SETLOCK RELEASE,TYPE=SRM,REGS=USE,                            *
               RELATED=SWAPIN           RELEASE SRM LOCK
         MODESET KEY=NZERO,MODE=PROB    SET KEY NZERO, PROBLEM STATE
         L     R0,ASCBNO                GET ASID NO
         SLL   R0,16                    SHIFT INTO HIGH ORDER
         SR    R1,R1                    NO ECB
         SVC   95                       SYSEVENT 0
         AUTHOFF                        see issue 10 page 24
         B     RESCAN                   LOOK FOR MORE OF SAME NAME
EXIT     EXITR                          see issue 15 pages 25-26
COMPARE  CLC   ADDRNAME(0),&IDLEN+5(R2) MATCH USERID
ASVTADDR DS    F                        ADDR OF ASVT SCAN SUBROUTINE
ASCBNO   DC    F'0'                     ADDR SPACE NO
ID       DS    0F                       ADDR SPACE ID
ADDRNAME DC    CL8' '                   ADDR SPACE NAME
TYPE     DC    CL4' '                   ADDR SPACE TYPE
ASCBADDR DS    A                        ADDR OF ASCB
TRLATE   TR    0(0,R14),TRTAB           TRANSL INPUT
TRTAB    DC    256AL1(*-TRTAB)          TRANSLATE TABLE USED BY
         ORG   TRTAB+C'ö'               XLATE OF INPUT AND
         DC    C'Ö'                     XLATE OF INVALID JOBNAME
         ORG   TRTAB+C'ä'
         DC    C'Ä'
         ORG   TRTAB+C'å'
         DC    C'Å'
         ORG   TRTAB+C'a'
         DC    C'ABCDEFGHI'
         ORG   TRTAB+C'i'
         DC    C'JKLMNOPQR'
         ORG   TRTAB+C's'
         DC    C'STUVWXYZ'
         ORG
         LTORG
         END


Nils Plum
Systems Programmer (Denmark) © Nils Plum 1989

