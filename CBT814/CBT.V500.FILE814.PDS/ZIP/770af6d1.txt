An automated operations tool

OPAUTO JCL

//OPAUTO  PROC
//CONTROL EXEC PGM=OPAUTO,TIME=1440
//STEPLIB  DD  DSN=your.authlib,DISP=SHR
//SYSPRINT DD  SYSOUT=Q
//SYSUDUMP DD  SYSOUT=Q
//SYSOUT   DD  SYSOUT=Q
//SYSIN    DD  DSN=OPAUTO.CONTROL(OPAUTO),DISP=SHR,FREE=CLOSE

Example control statements

********************************************************************
* OPAUTO COMMAND TABLE                                             *
********************************************************************
* TIME TIME   MINS   DAYS    COMMAND                               *
* HHMM HHMM   MMMM   MTWTFSS     'CMD....'                         *
********************************************************************
* EVERY HOUR CLEAR UP THESE TWO VOLUMES (Mon - Fri)                *
********************************************************************
T=0000-2359,I=0060,D=YYYYYNN,COM='S BACKUP,J=HKPMIG01'
T=0000-2359,I=0060,D=YYYYYNN,COM='S BACKUP,J=HKPMIG02'
********************************************************************
* PROCESS JES2 HELD OUTPUT CLASSES                                 *
********************************************************************
T=2330-2330,I=0001,D=YYYYYYY,COM='$OQ,Q=Q,A=3,CANCEL'
T=2332-2332,I=0001,D=YYYYYYY,COM='$OQ,Q=P,A=7,CANCEL'
********************************************************************
* CLEAR ALL OUTPUT 30 DAYS OLD                                     *
********************************************************************
T=2335-2335,I=0001,D=YYYYYYY,COM='$PQ,ALL,A=30'
********************************************************************
* STOP AND START SOFTSWITCH ON A FRIDAY NIGHT                      *
********************************************************************
T=0100-0100,I=0001,D=NNNNYNN,COM='F SOFTSW,QUIESCE'
T=0110-0110,I=0001,D=NNNNYNN,COM='S SOFTSW'

SOURCE CODE FOR OPAUTO - MAIN CONTROL TASK

OPAUTO    TITLE 'AUTOMATED OPERATIONS AND UTILITIES'
*********************************************************************
* OPAUTO IS A STARTED TASK THAT IS SET UP TO ISSUE OP CMDS AT       *
* SPECIFIED INTERVALS DURING THE DAY. ORIGINALLY WRITTEN FOR        *
* MIGRATION COMMANDS FOR VOLS MIG001 AND MIG002, IT CAN BE USED     *
* FOR ANY APPLICATION.                                              *
* IT WILL WAKE UP EVERY MINUTE AND SCAN A CONTROL TABLE TO SEE      *
* IF ANY COMMANDS NEED ACTION.                                      *
* IT USES A SYSIN FILE TO CREATE A CONTROL TABLE OF OP CMDS AND     *
* ASSOCIATED PARMS IN THE FOLLOWING FORMAT:                         *
* T=HHMM-HHMM,I=NNNN,D=MTWTFSS,COM='<OP CMD>'                       *
* (A) T=HHMM-HHMM                                                   *
*     TIME RANGE (24HR) THAT COMMAND WILL BE ISSUED.                *
*     EG  T=0500-1900   5AM TO 7PM                                  *
* (B) I=NNNN                                                        *
*     INTERVAL BETWEEN COMMANDS                                     *
*     EG  I=0060        ISSUE COMMAND EVERY HOUR                    *
* (C) D=MTWTFSS                                                     *
*     DAY RANGE. SPECIFYING 'Y' IN THE DAY FIELD WILL MAKE THE      *
*     COMMAND BE ISSUED ONLY ON THAT DAY.                           *
*     A 'N' WILL CAUSE THE COMMAND TO BE BYPASSED.                  *
*     THE FIRST POSITION IS FOR MONDAY                              *
* (D) COM='<OP CMD>'                                                *
*     45-BYTE FIELD TO CONTAIN THE OP CMD TO BE ISSUED              *
* A STORAGE ANCHOR IS ESTABLISHED BY THE PROGRAM SO THAT TSO        *
* USERS CAN COMMUNICATE WITH THE STARTED TASK. THE COMMAND 'OPLIST' *
* IS AVAILABLE UNDER TSO TO LIST THE CURRENT COMMAND TABLE.         *
* THE PROGRAM WILL ACCEPT MODIFY COMMANDS : F OPAUTO,<OPTION>       *
* VALID OPTIONS ARE :-                                              *
* 1. QUIESCE                                                        *
*    CAUSES OPAUTO TO SUSPEND THE SUBMISSION OF THE OPERATOR        *
*    COMMAND UNTIL FURTHER NOTICE.                                  *
* 2. RESUME                                                         *
*    CAUSES OPAUTO TO RESUME THE SUBMISSION OF THE OPERATOR         *
*    COMMAND WHICH HAS BEEN SUSPENDED BY 'QUIESCE'.                 *
* 3. LIST                                                           *
*    CAUSES OPAUTO TO LIST ITS COMMAND TABLE                        *
* 4. UTIL=........                                                  *
*    CAUSES OPAUTO TO BRANCH AUTHORIZED TO THE SPECIFIED PROGRAM    *
*    WHICH MUST RESIDE IN THE JPA.                                  *
* 5. ABEND                                                          *
*    CAUSES OPAUTO TO ABEND WITH A USER CODE 999.                   *
* NOTE: ONE EXIT POINT IS AVAILABLE JUST BEFORE THE ISSUING OF THE  *
*       COMMAND. THIS WILL ALLOW THE SYSTEMS PROGRAMMER TO FURTHER  *
*       CHECK AGAINST DESIRED CRITERIA BEFORE THE COMMAND IS ISSUED *
* TO STOP ISSUE 'P OPAUTO'                                          *
* AUTHORIZED                                                        *
* NEEDS 'SYS1.CSSLIB' IN THE SYSLIB OF THE LINKEDIT TO PICK         *
* UP THE NAME/TOKEN PAIR CALLABLE SERVICES.                         *
*********************************************************************
OPAUTO    CSECT                           *
OPAUTO    AMODE 31                        *
OPAUTO    RMODE ANY                       *
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPAUTO,R12                * AND ADDRESSABILITY
          LOAD  EP=OPAUMSG,LOADPT=MODMSG   * LOAD MSG ROUTINE
          LOAD  EP=OPAUSCAN,LOADPT=MODSCAN * LOAD SCAN ROUTINE
          LOAD  EP=OPAUDAY,LOADPT=MODDATE  * LOAD DATE ROUTINE
          LOAD  EP=OPAUEX01,LOADPT=MODEX01 * LOAD EXIT ROUTINE
          LOAD  EP=OPAUINIT               * LOAD INIT ROUTINE
          LR    R15,R0                    * COPY ADDRESS OF ROUTINE
          BALR  R14,R15                   * BRANCH TO ROUTINE
          LTR   R15,R15                   * INIT OK ?
          BZ    INITOK                    * YES - GO ON
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,2                      *
          BALR  R14,R15                   * MSG INIT FAILED
          B     ABEND888                  * ABEND 888
INITOK    EQU   *
          DELETE EP=OPAUINIT              * GET RID OF INIT ROUTINE
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,1                      * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG INIT OK
* THIS CODE WILL SYNTAX CHECK THE SYSIN STATEMENTS AND CREATE THE   *
* TABLE USED TO STORE THE COMMANDS AND TIME RANGES.                 *
          GETMAIN RU,LV=TABSIZE,SP=241,LOC=BELOW
          LR    R9,R1                     * GET ADDRESS
          LR    R10,R9                    * COPY ADDRESS
          L     R15,MODSCAN               * COPY ADDRESS OF ROUTINE
          LR    R1,R9                     * PUT IN GETMAINED ADDRESS
          BASSM R14,R15                   * CALL TABLE SCAN
          LTR   R15,R15                   * CHECK RC (ZERO IS FAILURE)
          BNZ   SCANOK                    * ALL OK - CARRY ON
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,14                     * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG - SCAN FAILED
          B     ABEND888                  * ABEND 888
SCANOK    EQU   *
          ST    R15,TABENT                * STORE # TABLE ENTRIES
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,9                      *
          BALR  R14,R15                   * MSG SCAN OK
ANCHOR    EQU   *
          MODESET KEY=ZERO,MODE=SUP       * CHANGE AUTHORITY
          ST    R9,TOKEN                  * STORE TABLE ADDRESS
          MVC   TOKEN+4,TABENT            * STORE # TABLE ENTRIES
          CALL  IEANTCR,(LEVEL,NAME,TOKEN,PERSOPT,RETCODE)
          LTR   R15,R15                   * ALL OK ?
          BZ    ANCHOROK                  * YES - CARRY ON
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,11                     * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG ANCHOR FAILED
          B     ABEND888                  * ABEND 888
ANCHOROK  EQU   *
          MODESET KEY=NZERO,MODE=PROB     * RESET AUTHORITY
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,10                     * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG ANCHOR OK
START     EQU   *                         *
* NOW SET UP THE COMMUNICATION WITH THE OPERATOR CONSOLE TO         *
* ACCEPT MODIFY COMMANDS.                                           *
          EXTRACT COMM,FIELDS=COMM        * GET ADDR OF COMM AREA
          L     R5,COMM                   * LOAD ADDR OF COMM...
          USING COMLIST,R5                * ..TO IEZCOM
          L     R3,COMCIBPT               * GET ADDR OF CIB
          USING CIBNEXT,R3                * ESTAB ADDR TO IEZCIB
          LTR   R3,R3                     * WAS CIB ADDR RETURNED
          BZ    SETCOUNT                  * NO - INIT
          LA    R4,0                      * ZERO REG4
          LH    R4,CIBDATLN               * GET LEN OF DATA
          C     R4,=F'0'                  * IS LEN ZERO ?
          BE    CONT                      * YES - SKIP NEXT
          BCTR  R4,R0                     * DECREASE BY 1
          EX    R4,DATAMOVE               * MOVE DATA TO WS
CONT      CLI   CIBVERB,CIBSTART          * IS IT START?
          BNE   SETCOUNT                  * NO - INIT
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * YES FREE IT
          LTR   15,15                     * OK ?
          BZ    SETCOUNT                  * YES - CONTINUE
SETCOUNT  EQU   *
          QEDIT ORIGIN=COMCIBPT,CIBCTR=1  * SET LIMIT ON MODIFY
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          DROP  R3,R5                     * DONE WITH BOTH
          LA    R1,12                     * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG ACCEPT COMMANDS
INTERVAL  EQU   *
* NOW SET THE TIMER AND WAIT FOR SOMETHING TO HAPPEN:               *
* EITHER THE TIMER WILL POP IN WHICH CASE WE PROCESS THE TABLE      *
* OR A OPERATOR COMMAND WILL BE ENTERED.                            *
          XC    TIMERECB,TIMERECB         * CLEAR THE STIMER EXIT'S ECB
          XC    UTILECB,UTILECB           * CLEAR THE UTILITY ECB
          STIMER  REAL,                   * WAIT IN REAL TIME          X
               TIMERXIT,                  * NAME EXIT ROUTINE          X
               DINTVL=TIMESPAN            * WAIT FOR THIS LONG
WAIT      EQU   *
          L     R5,COMM                   * GET THE COMMTASK STUFF
          L     R5,COMECBPT-COMLIST(,R5)  * POINT TO COMMAND ECB
          ST    R5,ECBLIST                * POST IT TO OUR ECB LIST
          LA    R3,UTILECB                * POINT TO THE UTIL ECB
          ST    R3,ECBLIST+4              * PUT THAT IN THE ECB LIST
          LA    R3,TIMERECB               * POINT TO THE STIMER ECB
          ST    R3,ECBLIST+8              * PUT THAT IN THE ECB LIST
          OI    ECBLIST+8,X'80'           * MARK THE END OF THE LIST
          WAIT  1,                        * WAIT FOR SOMETHING         X
               ECBLIST=ECBLIST            * TO HAPPEN IN THIS LIST
*                                         * FIGURE OUT WHAT IT WAS
          LA    R3,UTILECB                * POINT TO UTIL ECB
          USING ECB,R3                    * COVER UTIL ECB
          TM    ECBCC,ECBPOST             * DID THE UTIL POP?
          BO    POPUTIL                   * YES, GO DO DEQ STUFF
          LA    R3,TIMERECB               * POINT TO TIMER ECB
          USING ECB,R3                    * COVER THE STIMER ECB
          TM    ECBCC,ECBPOST             * DID THE TIMER POP?
          BO    PERIOD                    * YES, GO DO PERIODIC STUFF
          DROP  R3
          USING ECB,R5                    * COVER THE COMMAND ECB
          TM    ECBCC,ECBPOST             * DID WE GET A COMMAND?
          BO    COMENTER                  * YES, GO SEE WHAT IT WAS
          B     ABEND777
* THIS IS THE ROUTINE TAKEN WHEN THE CURRENT UTIL ENDS              *
POPUTIL   EQU   *
          DEQ   (MAJOR,MINOR,,SYSTEM),RET=HAVE
*                                         * THE UTIL HAS ENDED - DEQ
          XC    UTILECB,UTILECB           * CLEAR THE ECB
          DETACH UTILTCB                  * DETACH THE UTIL TASK
          B     WAIT                      * GO BACK AND WAIT AGAIN
* WE HAVE DETECTED AN OPERATOR COMMAND                              *
COMENTER  EQU   *
          L     R5,COMM                   * GET BACK R5
          USING COMLIST,R5                * ADDRESS IT
          L     R3,COMCIBPT               * GET ADDR OF CIB
          USING CIBNEXT,R3                * ADDRESS IT
          CLI   CIBVERB,CIBMODFY          * IS IT MODIFY ?
          BNE   STOP                      * NO - IS IT STOP?
MODIFY    EQU   *
          CLC   CIBDATA(8),CQUIESCE       * QUIESCE OPAUTO ?
          BE    QUIESCE                   *
          CLC   CIBDATA(7),CRESUME        * RESUME OPAUTO ?
          BE    RESUME                    *
          CLC   CIBDATA(5),CLIST          * LIST TABLE
          BE    LIST                      *
          CLC   CIBDATA(5),CUTIL          * CALL UTIL
          BE    UTIL                      *
          CLC   CIBDATA(6),CABEND         * DUMP ME
          BE    ABEND                     *
          B     ERROR                     * COMMAND UNKNOWN
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO A 'QUIESCE' COMMAND      *
QUIESCE   EQU   *
          MVI   QFLAG,X'FF'               * SET QUIESCE FLAG
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,7                      * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG QUIESCED
          B     WAIT                      * GO BACK
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO A 'RESUME' COMMAND       *
RESUME    EQU   *
          MVI   QFLAG,X'00'               * RESET QUIESCE FLAG
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,8                      * SELECT MSG NUMBER
          BALR  R14,R15                   * MSG RESUMED
          B     WAIT                      * GO BACK
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO A 'LIST' COMMAND         *
LIST      EQU   *
          WTO   ,MF=(E,WTOT)              * TITLE TEXT
          WTO   ,MF=(E,WTOC)              * LABELS
          L     R6,TABENT                 * LOAD UP # OF ENTRIES
          LR    R9,R10                    * COPY TABLE ADDRESS
          USING OPATAB,R9                 * USE DSECT
LISTENT   EQU   *
          MVC   WTOS+15(2),OPASTART+0     * MOVE IN START TIME (HH)
          MVC   WTOS+18(2),OPASTART+2     * MOVE IN START TIME (MM)
          MVC   WTOS+22(2),OPAEND+0       * MOVE IN END TIME (HH)
          MVC   WTOS+25(2),OPAEND+2       * MOVE IN END TIME (MM)
          L     R11,OPAINT                * LOAD INTERVAL
          CVD   R11,PWORK                 * CONVERT TO DEC
          UNPK  WORK,PWORK                * UNPACK IT
          OI    WORK+3,X'F0'              * OR LAST BIT
          MVC   WTOS+29(4),WORK           * MOVE IT IN
          MVC   WTOS+35(7),OPADAYS        * MOVE IN DAYS
          MVC   WTOS+44(45),OPACMD        * MOVE IN COMMAND
          WTO   ,MF=(E,WTOS)              * WRITE OUT TABLE ENTRY
          LA    R9,OPALEN(,R9)            * NEXT ONE...
          BCT   R6,LISTENT                * LOOP FOR ALL
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          B     WAIT                      * GO BACK
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO A 'UTIL=' COMMAND        *
UTIL      EQU   *
          MVC   NAMUTIL(8),=C'        '   * BLANK OUT NAME
          LA    R6,8                      * SET MAX LENGTH
          LA    R11,CIBDATA+5             * POINT TO UTIL NAME
          LA    R7,NAMUTIL                * POINT TO UTIL FIELD
GETUTIL   EQU   *                         *
          CLI   0(R11),X'00'              * IS IT END ?
          BE    GOTUTIL                   * YEP - GOT IT
          MVC   0(1,R7),0(R11)            * MOVE UTIL IN
          LA    R7,1(R7)                  * SHUFFLE
          LA    R11,1(R11)                * ..ALONG
          BCT   R6,GETUTIL                * FOR EIGHT CHARS
GOTUTIL   EQU   *
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          CSVQUERY INEPNAME=NAMUTIL,OUTEPA=MODUTIL
          LTR   R15,R15                   * DOES UTIL EXIST ?
          BZ    CALLUTIL                  * YES - GO ATTACH IT
          LA    R1,16                     * SELECT MSG NUMBER
          L     R15,MODMSG                * POINT TO MSG ROUTINE
          BALR  R14,R15                   * ISSUE MESSAGE
          B     WAIT                      * GO BACK
CALLUTIL  EQU   *
          ENQ   (MAJOR,MINOR,E,,SYSTEM),RET=USE
          LTR   R15,R15                   * CAN WE ENQ ?
          BZ    ATTACHIT                  * YES - ATTACH UTIL
          LA    R1,17                     * SELECT MSG
          L     R15,MODMSG                * POINT TO MSG ROUTINE
          BALR  R14,R15                   * ISSUE MESSAGE
          B     WAIT                      * GO BACK
ATTACHIT  EQU   *
          ATTACH EPLOC=NAMUTIL,ECB=UTILECB * ATTACH UTIL
          ST    R1,UTILTCB                * STORE TCB ADDRESS
          B     WAIT                      * GO BACK
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO AN 'ABEND' COMMAND        *
ABEND     EQU   *
          B     ABEND999
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO AN INVALID COMMAND       *
ERROR     EQU   *
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,4                      *
          BALR  R14,R15                   * MSG INVALID COMMAND
          B     WAIT                      * GO BACK
* THIS IS THE ROUTINE TAKEN IN RESPONSE TO A 'STOP' COMMAND         *
STOP      EQU   *
          CLI   CIBVERB,CIBSTOP           * IS IT STOP?
          BNE   ERROR                     * YES - PROCESS
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) * FREE CIB
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,5                      *
          BALR  R14,R15                   * MSG TERMINATION
          B     RETURN                    * GET OUT
RETURN    EQU   *
          TTIMER CANCEL,TU                * CANCEL TIMER AND CLEAR UP
          MODESET  KEY=ZERO,MODE=SUP      * CHANGE AUTHORITY
          CALL  IEANTDL,(LEVEL,NAME,RETCODE)
          MODESET  KEY=NZERO,MODE=PROB    * CHANGE AUTHORITY
          L     R15,MODMSG                * COPY ADDRESS OF MSG PROG
          LA    R1,13                     *
          BALR  R14,R15                   * MSG ANCHOR RELEASED
          FREEMAIN RU,LV=TABSIZE,A=(R10),SP=241
          PR                              * RETURN TO CALLER
* THIS IS THE ROUTINE TAKEN TO PERFORM THE PERIODIC COMMANDS        *
* CONTROL IS PASSED BACK AFTERWARDS TO SET UP ANOTHER TIMER         *
PERIOD    EQU   *
          TIME  DEC,TIMEDATE,LINKAGE=SYSTEM * GET TIME AND DATE
          MVC   WORK(4),TIMEFULL          *
          UNPK  TODFULL,WORK              * UNPACK IT
          L     R6,TABENT                 * LOAD UP # OF ENTRIES
          LR    R9,R10                    * COPY TABLE ADDRESS
          USING OPATAB,R9                 * USE DSECT
          LA    R11,QFLAG                 * ADDRESS QFLAG
          CLI   0(R11),X'FF'              * IS IT QUIESCED ?
          BNE   ADDINT                    * NO - CARRY ON
          B     PEREND                    * GET OUT
ADDINT    EQU   *                         *
          CLC   TOD,OPASTART              * IS IT BEFORE START TIME ?
          BL    TABNEXT                   * YES - GET NEXT
          CLC   TOD,OPAEND                * IS IT AFTER END TIME ?
          BH    TABNEXT                   * YES - GET NEXT
          LA    R11,OPACNT                * LOAD COUNT
          L     R7,0(,R11)                * GET COUNT
          A     R7,=F'1'                  * INCREMENT IT
          ST    R7,0(,R11)                * STORE IT
TABNEXT   EQU   *
          LA    R9,OPALEN(R9)             * GET NEXT TABLE ENTRY
          BCT   R6,ADDINT                 * LOOP FOR ALL ENTRIES
          DROP  R9                        * DROP ADDRESS
PERCMD    EQU   *
          L     R6,TABENT                 * GET # OF TABLE ENTRIES
          LR    R9,R10                    * COPY TABLE ADDRESS
          USING OPATAB,R9                 * USE DSECT
DECIDE    EQU   *
          MVC   EX01ST(4),OPASTART        * COPY START
          MVC   EX01END(4),OPAEND         * COPY END
          MVC   EX01INT(4),OPAINT         * COPY INTERVAL
          MVC   EX01CNT(4),OPACNT         * COPY COUNT
          MVC   EX01CMD(45),OPACMD        * COPY COMMAND
          MVC   EX01DAYS(7),OPADAYS       * COPY DAYS
          LA    R1,EX01PARM               * POINT TO PARMS
          L     R15,MODEX01               * EXIT MODULE
          BALR  R14,R15                   * CALL MODULE
          ST    R15,EXITRC                * STORE R15
NORM      EQU   *
          CLC   OPAINT,OPACNT             * IS IT RIGHT INTERVAL ?
          BNE   EX04CH1                   * NO - BUT CHECK EXIT STUFF
          MVC   OPACNT,=F'0'              * CLEAR COUNT FIELD
          CLC   EXITRC,=F'12'             * EXIT OVERRIDE ?
          BE    DECNEXT                   * YEP - DON'T DO IT
          B     RIGHTDAY                  * NO - CARRY ON
EX04CH1   EQU   *
          CLC   EXITRC,=F'4'              * OVERRIDE INT COUNT ?
          BE    RIGHTDAY                  * YES
          B     DECNEXT                   * NO - SKIP IT
RIGHTDAY  EQU   *
          L     R15,MODDATE               * CALL DATE ROUTINE
          BALR  R14,R15                   *
          ST    R15,DATEOUT
          LA    R11,OPADAYS               * POINT TO DAYS ENTRY
          A     R11,DATEOUT               * POINT TO DAY OF THE WEEK
          CLI   0(R11),C'Y'               * DO THIS TODAY ?
          BNE   EX04CH2
          B     DOMGCR
EX04CH2   EQU   *
          CLC   EXITRC,=F'8'              * OVERRIDE DAY CHECK ?
          BE    DOMGCR                    * YES
          B     DECNEXT                   * NO - SKIP IT
DOMGCR    EQU   *
          LA    R7,PARMLIST               * POINT TO PARMS
          MVC   4(45,R7),EX01CMD          * MOVE IN COMMAND
          MODESET  KEY=ZERO,MODE=SUP      * CHANGE AUTHORITY
          LA    R0,0                      * CLEAR R0
          MGCR (R7)                       * ISSUE OP CMD
          MODESET  KEY=NZERO,MODE=PROB    * RESET AUTHORITY
DECNEXT   EQU   *
          LA    R9,OPALEN(R9)             * SHUFFLE TO NEXT TABLE ENTRY
          BCT   R6,DECIDE                 * LOOP IT FOR ALL ENTRIES
PEREND    EQU   *
          B     INTERVAL
ABEND777  ABEND 777,DUMP
ABEND888  ABEND 888,DUMP
ABEND999  ABEND 999,DUMP
* THIS IS THE EXIT ROUTINE TAKEN BY THE TIMER WHEN THE INTERVAL IS  *
* EXPIRED.                                                          *
TIMERXIT  EQU  *
          PUSH  USING                     * SAVE USING STATUS
          DROP  ,                         * DROP ADDRESSABILITY
          STM   R14,R12,12(R13)           * SAVE REGISTERS
          LR    R12,R15                   * BASE REGISTER
          USING TIMERXIT,R12              * ADDRESS IT
          LA    R14,TIMERSAV              * GET A SAVEAREA
          ST    R13,4(,R14)               * SAVE THE SAVEAREA PTR
          ST    R14,8(,R13)               * CHAIN THE SAVEAREAS
          LR    R13,R14                   * USE OURS
          POST  TIMERECB                  * JUST POST THE TIMER ECB
          L     R13,4(,R13)               * GET THE SAVEAREA BACK
          LM    R14,R12,12(R13)           * GET THE REGISTERS BACK
          BR    R14                       * RETURN
          POP   USING
* VARIABLES CONSTANTS AND DSECTS                                    *
          DS    0F
LEVEL     DC    A(IEANT_SYSTEM_LEVEL)
NAME      DC    CL16'SYSC-OPAUTO-TABL'
TOKEN     DC    2D'0'
PERSOPT   DC    A(IEANT_NOPERSIST)
RETCODE   DC    F'0'
TABENT    DC    F'0'
MAJOR     DC    C'OPAUENQM'
MINOR     DC    C'UTILITYQ'
TIMESPAN  DC    C'00010000'               * TIME LIMIT HHMMSSTH
TFLAG     DC    X'00'                     * TIME FLAG
QFLAG     DC    X'00'                     * QUIESCE FLAG
CQUIESCE  DC    C'QUIESCE',X'00'
CRESUME   DC    C'RESUME',X'00'
CABEND    DC    C'ABEND',X'00'
CLIST     DC    C'LIST',X'00'
CREFRESH  DC    C'REFRESH',X'00'
CUTIL     DC    C'UTIL='
NAMUTIL   DC    CL8'        '
MODTABLE  DC    CL16'MODULE TABLE'
MODMSG    DC    F'0'
MODSCAN   DC    F'0'
MODDATE   DC    F'0'
MODEX01   DC    F'0'
MODUTIL   DC    F'0'
MSGADDR   DS    F                         * MSG ADDRESS
PARMLIST  DC    X'80'                     * OP COMMAND
LENGTH    DC    X'32'                     *     "
          DC    X'0000'                   *     "
TEXT      DC    50C' '                    *     "
          DS    0F
DATAAREA  DS    4F
          DS    0D
TODFULL   DS    0D
          DS    CL1
TOD       DS    CL4
          DS    CL4
WORK      DS    F
PWORK     DS    D
TIMERSAV  DS    18F                   OUR STIMER EXIT'S SAVEAREA
EXITRC    DS    F
COMM      DS    A                     COMM TASK INFORMATION POINTER
TIMERECB  DS    F                     ECB FOR STIMER POP
UTILECB   DS    F                     ECB FOR UTILITY
UTILTCB   DS    F                     ECB FOR UTILITY
ECBLIST   DS    2A                    ECB LIST WE WAIT ON
TIMEDATE  DS    0D
TIMEFULL  DS    CL8
DATEIN    DC    F'0'
          DC    F'0'
DATEOUT   DC    F'0'
EX01PARM  DS    0F
EX01ST    DS    F
EX01END   DS    F
EX01INT   DS    F
EX01CNT   DS    F
EX01DAYS  DS    CL7
EX01CMD   DS    CL45
WTOT      WTO   'OPA0100I - OPAUTO COMMAND TABLE LISTING',MF=L
WTOC      WTO   'OPA0100I - START  END    MINS  MTWTFSS  COMMAND',MF=L
WTOS      WTO   'OPA0101I - HH:MM  HH:MM  NNNN  NTWTFSS                X
                                                          ',MF=L
DATAMOVE  MVC   DATAAREA(0),CIBDATA
          DS   0D
          COPY IEANTASM                   * SEE GC28-1642-03
          LTORG
          OPADSECT
TABSIZE   EQU   1000*OPALEN
          CVT   DSECT=YES,LIST=YES        * MAPPING MACROS
          IEZCOM
          IHAECB
          IEZCIB
          IKJTCB                          *
          IEZJSCB                         *
DSAB      IHADSAB                         *
TIOT      DSECT                           *
          IEFTIOT1                        *
          END OPAUTO

SOURCE CODE FOR OPAUINIT - INITIALIZATION ROUTINE

OPAUINIT  TITLE 'OPAUTO INITIALIZATION ROUTINE'
* OPAUINIT IS THE INITIALIZATION ROUTINE FOR OPAUTO.                *
* THE FOLLOWING BIT OF CODE CHECKS THAT THE SYSIN DD STATEMENT HAS  *
* BEEN SPECIFIED IN THE JCL. IF NOT IT WILL RETURN A CONDITION CODE *
* OF 16 TO OPAUTO.                                                  *
OPAUINIT  CSECT
OPAUINIT  AMODE 31
OPAUINIT  RMODE ANY
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPAUINIT,R12              * AND ADDRESSABILITY
          L     R4,CVTPTR                 * FIND CVT ADDR
          USING CVTMAP,R4                 * ADDR CVT
          L     R4,CVTTCBP                * FIND TCB POINTER
          L     R4,4(,R4)                 * GET OUR TCB
          USING TCB,R4                    * ADDR TCB
          L     R4,TCBJSCB                * GET JSCB
          USING IEZJSCB,R4                * ADDR JSCB
          L     R4,JSCDSABQ               * FIND QDB ADDR
          USING QDB,R4                    * ADDR QDB
          CLC   QDBNELMS,=F'0'            * ANY DD PRESENT ?
          BE    NOTFOUND                  * NO = GET OUT
          L     R4,QDBFELMP               * GET ADDR FIRST DSAB
          USING DSAB,R4                   *
LOOP      EQU   *                         *
          L     R3,DSABTIOT               * GET ADDR TIOT ENTRY
          USING TIOENTRY,R3               * ADDR  TO TIOT
          CLC   TIOEDDNM(5),=C'SYSIN'     * IS IT DDNAME?
          BE    RETURN00                  * YES - CARRY ON
NEXTDSAB  EQU   *                         *
          L     R4,DSABFCHN               * GET PTR TO NEXT DSAB ENTRY
          LTR   R4,R4                     * END OF CHAIN?
          BNZ   LOOP                      * NO - LOOP
          B     NOTFOUND                  * CANNOT FIND SYSIN DDNAME
NOTFOUND  EQU   *
          LA    R15,16
          B     RETURN
RETURN00  EQU   *
          LA    R15,0
RETURN    EQU   *
          PR
          LTORG
          CVT   DSECT=YES,LIST=YES        * MAPPING MACROS
          IKJTCB                          *
          IHAQDB
          IEZJSCB                         *
DSAB      IHADSAB                         *
TIOT      DSECT                           *
          IEFTIOT1                        *
          END OPAUINIT

SOURCE CODE FOR OPAUSCAN - CONTROL STATEMENT SCAN

OPAUSCAN  TITLE 'OPAUTO TABLE SCAN ROUTINE'
* THIS PROGRAM SCANS THE SYSIN INPUT TO OPAUTO AND CHECKS THE       *
* SYNTAX OF THE STATEMENTS AND SETS UP THE TABLE IN GETMAINED       *
* STORAGE.                                                          *
OPAUSCAN  CSECT
OPAUSCAN  AMODE 24
OPAUSCAN  RMODE 24
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPAUSCAN,R12              * AND ADDRESSABILITY
          LR    R9,R1
          USING OPATAB,R9
          OPEN  (SYSIN,(INPUT))           * OPEN SYSIN FILE
SETUP     EQU   *                         *
          LA    R6,45                     * SET LOOP COUNT
READ      EQU   *                         *
          GET   SYSIN,INREC               * READ A ENTRY IN
          LA    R7,INREC                  * POINT TO IT
          LA    R8,OPACMD                 * POINT TO TABLE ENTRY
          MVC   0(80,R8),BLANK80          * BLANK OPACMD OUT
          CLI   0(R7),C'*'                * IS IT A COMMENT ?
          BE    NEXTREC                   * IF SO IGNORE IT
READT     EQU   *                         *
          CLC  0(2,R7),=C'T='             * TIME IN FIRST COLUMN ?
          BNE  ERROR                      * NO - POINT IT OUT
          CLC  6(1,R7),=C'-'              * HYPHEN PLACED CORRECTLY ?
          BNE  ERROR                      * NO - POINT IT OUT
          CLC  11(1,R7),=C','             * COMMA IN RIGHT PLACE ?
          BNE  ERROR                      * NO - POINT IT OUT
          MVC  OPASTART(4),2(R7)          * MOVE IN START TIME
          MVC  OPAEND(4),7(R7)            * MOVE IN END TIME
          LA   R7,12(R7)                  * SHUFFLE ALONG SYSIN
          CLC  0(2,R7),=C'I='             * INTERVAL?
          BNE  ERROR                      * NO - POINT IT OUT
          CLI  6(R7),C','                 * COMMA IN RIGHT PLACE ?
          BNE  ERROR                      * NO - POINT IT OUT
          MVC  WORK(4),2(R7)              * MOVE INTERVAL INTO WORK
          PACK PWORK,WORK                 * PACK IT
          CVB  R11,PWORK                  * CONVERT TO BINARY
          ST   R11,WORK                   * STORE BACK IN WORK
          MVC  OPAINT(4),WORK             * PUT INTO TABLE
          MVC  OPACNT(4),=F'0'            * INITIALIZE COUNT IN TABLE
          LA   R7,7(R7)                   * SHUFFLE ALONG SYSIN
          CLC  0(2,R7),=C'D='             * IS IT DAYS KEYWORD ?
          BNE  ERROR                      * NO - POINT IT OUT
          CLI  9(R7),C','                 * COMMA IN RIGHT PLACE ?
          BNE  ERROR                      * NO - POINT IT OUT
          MVC  OPADAYS(7),2(R7)           * MOVE DAYS TO TABLE
          LA   R7,10(R7)                  * SHUFFLE ALONG SYSIN
GETCOM    EQU   *                         *
          CLC  0(4,R7),=C'COM='           * IS IT OPACMD ?
          BNE  ERROR                      * NO - POINT IT OUT
          LA   R7,4(R7)                   * SHUFFLE TO OPACMD
          CLI  0(R7),X'7D'                * START WITH A "'" ?
          BNE  ERROR                      * NO - POINT IT OUT
          LA   R7,1(R7)                   * POINT TO NEXT CHAR
READLP2   EQU  *                          *
          CLI  0(R7),X'7D'                * IS IT END?
          BE   GOTCOM                     * YES GOT COMPLETE OPACMD
          MVC  0(1,R8),0(R7)              * MOVE..
          LA   R7,1(R7)                   *   THE..
          LA   R8,1(R8)                   *     OPACMD..
          BCT  R6,READLP2                 *      IN BIT BY BIT
          B    ERROR                      * ERROR IN READING OPACMD
GOTCOM    EQU  *                          *
          L    R7,TABENT
          A    R7,=F'1'
          ST   R7,TABENT
          LA   R9,OPALEN(R9)              * POINT TO NEXT TABLE ENTRY
NEXTREC   EQU  *                          *
          B    SETUP                      * GO GET NEXT ONE..
ERROR     L    R15,0
          PR
CLOSEOK   EQU  *                          *
          CLOSE (SYSIN)                   * CLOSE FILE
RETURN00  EQU   *
          L     R15,TABENT
RETURN    EQU   *
          PR
          DS   0D
BLANK80   DC   80C' '
TABENT    DC   F'0'
INREC     DS   CL80
PWORK     DS   D
WORK      DS   F
SYSIN     DCB  DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=CLOSEOK
          LTORG
          OPADSECT
          END OPAUSCAN

OPAUMSG GENERAL MESSAGE ROUTINE

OPAUMSG   TITLE 'OPAUTO MESSAGE ROUTINE'
* OPAUMSG IS THE GENERAL MESSAGE ROUTINE USED BY OPAUTO.            *
* THIS NEEDS TO BE AUTHORISED IN ORDER TO PLACE A MESSAGE ON        *
* THE CONSOLE WITHOUT A PRECEEDING '+'                              *
OPAUMSG   CSECT
OPAUMSG   AMODE 31
OPAUMSG   RMODE ANY
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPAUMSG,R12               * AND ADDRESSABILITY
          LR    R10,R1                    * COPY PARMS
          SLL   R10,2                     * X 4
          LTR   R10,R10                   * IS IT ZERO ?
          BZ    RETURN00                  * YES - GET OUT
MSGTABLE  B     MSGTABLE(R10)
          B     MSG001                    * INITIALIZED OK
          B     MSG002                    * INITIALIZATION FAILED
          B     MSG003                    * MODIFY ACCEPTED
          B     MSG004                    * INVALID COMMAND
          B     MSG005                    * TERMINATION
          B     MSG006                    * MODULE NOT FOUND
          B     MSG007                    * QUIESCED
          B     MSG008                    * RESUMED
          B     MSG009                    * SCAN COMPLETE
          B     MSG010                    * STORAGE ANCHOR OK
          B     MSG011                    * STORAGE ANCHOR FAILED
          B     MSG012                    * ACCEPT OP COMMANDS
          B     MSG013                    * STORAGE ANCHOR RELEASED
          B     MSG014                    * TABLE SCAN FAILED
          B     MSG015                    * TABLES REFRESHED
          B     MSG016                    * UTILITY NOT FOUND
          B     MSG017                    * UTILITY ALREADY ACTIVE
MSG001    EQU   *
          WTO   'OPA0001I - OPAUTO IS INITIALIZED'
          B     RETURN00
MSG002    EQU   *
          WTO   'OPA0002E - OPAUTO INITIALIZATION FAILED',ROUTCDE=(1)
          B     RETURN00
MSG003    EQU   *
          WTO   'OPA0003I - MODIFY COMMAND ACCEPTED'
          B     RETURN00
MSG004    EQU   *
          WTO   'OPA0004E - INVALID COMMAND - PLEASE RE-SPECIFY'
          B     RETURN00
MSG005    EQU   *
          WTO   'OPA0005I - OPAUTO IS TERMINATING'
          B     RETURN00
MSG006    EQU   *
          WTO   'OPA0006E - OPAUTO MODULES NOT FOUND',ROUTCDE=(1)
          B     RETURN00
MSG007    EQU   *
          WTO   'OPA0007I - OPAUTO IS QUIESCED'
          B     RETURN00
MSG008    EQU   *
          WTO   'OPA0008I - OPAUTO IS RESUMED'
          B     RETURN00
MSG009    EQU   *
          WTO   'OPA0009I - TABLE SCAN COMPLETE'
          B     RETURN00
MSG010    EQU   *
          WTO   'OPA0010I - STORAGE ANCHOR ESTABLISHED'
          B     RETURN00
MSG011    EQU   *
          WTO   'OPA0011E - STORAGE ANCHOR FAILED',ROUTCDE=(1)
          B     RETURN00
MSG012    EQU   *
          WTO   'OPA0012I - OPAUTO IS ACCEPTING OPERATOR COMMANDS'
          B     RETURN00
MSG013    EQU   *
          WTO   'OPA0013I - STORAGE ANCHOR RELEASED'
          B     RETURN00
MSG014    EQU   *
          WTO   'OPA0014E - TABLE SCAN FAILED',ROUTCDE=(1)
          B     RETURN00
MSG015    EQU   *
          WTO   'OPA0015I - TABLES REFRESHED'
          B     RETURN00
MSG016    EQU   *
          WTO   'OPA0016E - UTILITY NOT FOUND',ROUTCDE=(1)
          B     RETURN00
MSG017    EQU   *
          WTO   'OPA0017E - UTILITY ALREADY ACTIVE',ROUTCDE=(1)
          B     RETURN00
RETURN00  EQU   *
          LA    R15,0
RETURN    EQU   *
          PR
          LTORG
          END OPAUMSG

SOURCE CODE FOR OPAUDAY - DAY OF THE WEEK ROUTINE

OPAUDAY   TITLE 'OPAUTO DAY OF THE WEEK ROUTINE'
* THIS ROUTINE TAKES THE JULIAN DATE AND RETURNS AN INTEGER   *
* VALUE FROM 0 TO 6 REPRESENTING THE DAYS OF THE WEEK FROM    *
* MONDAY TO SUNDAY RESPECTIVELY                               *
OPAUDAY   CSECT
OPAUDAY   AMODE 24
OPAUDAY   RMODE 24
          BAKR  R14,0              * LINKAGE STACK
          LR    R12,R15            * SET BASE REG
          USING OPAUDAY,R12        * AND ADDRESSABILITY
          TIME  DEC                *
          ST    R0,TOD             *
          ST    R1,MACHDATE        *
          ZAP   WORKDAYS,MACHDATE+2(2)  PUT DAYS IN PL4 FIELD
          CVB   R7,WORKDAYS        *    AND CONVERT TO BINARY IN R7
          ZAP   WORKYEAR,=P'0'     * ZEROIZE WORK FIELD WITH SIGN
          MVO   WORKYEAR(8),MACHDATE(2)  MOVE 00YY WITH OFFSET ==> 0YYC
          CVB   R8,WORKYEAR        *    AND CONVERT TO BINARY IN R8
CONVERT   ST    R8,INTEG           * STORE YEAR IN INTEG
          BAL   R10,FPINT          * CONVERT FIXED TO FLOATING
          LD    FPR2,FPINTEG       * LOAD THE YEAR INTO AN FP REG
          SD    FPR2,ONE           * TAKE 1 OFF
          MD    FPR2,FACTOR        * X 365.25
          LDR   FPR4,FPR2          * BACKUP
          BAL   R10,INTEGER        * FIND INTEGER PART AS FIXED POINT
          BAL   R10,FPINT          * CONVERT FIXED TO FLOATING
          LD    FPR2,FPINTEG       * GET INTEGRAL YEAR DAYS BACK 2
          ST    R7,INTEG           * STORE DAYS IN INTEG
          BAL   R10,FPINT          * CONVERT FIXED TO FLOATING
          LD    FPR4,FPINTEG       * GET INTEGRAL DAYS INTO FPR 4
          ADR   FPR2,FPR4          * ADD THEM INTO FPR 2
          LDR   FPR6,FPR2          * BACKUP
          LD    FPR4,SEVEN         * GET 7 IN FPR 4
          DDR   FPR2,FPR4          * DIVIDE THEM
          BAL   R10,INTEGER        * FIND INTEGER PART
          BAL   R10,FPINT          * CONVERT FIXED TO FLOATING
          LD    FPR2,FPINTEG       * GET INTEGRAL NUMBER BACK
          LD    FPR4,SEVEN         * GET 7 IN FPR 4
          MDR   FPR2,FPR4          * MULTIPLY THEM
          SDR   FPR6,FPR2          * SUBTRACT THEM
          LDR   FPR2,FPR6          * GET RESULT IN FPR 2 FOR BRANCH
          BAL   R10,INTEGER        * SUBTRACT THEM
*       INTEG NOW CONTAINS X'00' - X'06'                      *
          SLR   R15,R15            * CLEAR R15
          L     R15,INTEG          *
          PR                       * RETURN
* ------ SUBROUTINE --------------- ------------------------- *
* CONVERTS TO AN INTEGER IN A STORAGE AREA INTEG              *
* FROM A DOUBLE PRECISION NUMBER IN FLOATING POINT REGISTER 2 *
INTEGER   SD    FPR2,TWO31R        * FPR 2 CONTAINS F.P. NUMBER
          AW    FPR2,TWO32         *
          STD   FPR2,TEMPR         *
          XI    TEMPR+4,X'80'      *
          MVC   INTEG(4),TEMPR+4   *
          BR    R10                * RETURN TO CALLING AREA
* ------ SUBROUTINE --------------- ---------------------------- *
* CONVERTS FROM AN INTEGER IN A STORAGE AREA INTEG               *
* TO A DOUBLE PRECISION NUMBER IN FLOATING POINT STORAGE FPINTEG *
FPINT     L     R9,INTEG           * INTEG CONTAINS FIXED POINT INTEGER
          X     R9,TWO31+4         *
          ST    R9,TEMP+4          *
          MVC   TEMP(4),TWO31      *
          LD    FPR0,TEMP          *
          SD    FPR0,TWO31         *
          STD   FPR0,FPINTEG       *
          BR    R10                * RETURN TO CALLING AREA
* VARIABLES                                                      *
TOD      DS    F
MACHDATE DS    PL4
         DS    0D
WORKYEAR DS    PL8
WORKDAYS DS    PL8
ONE      DC    D'1'                          DOUBLE PRECISION FORMAT
SEVEN    DC    D'7'                          DOUBLE PRECISION FORMAT
FACTOR   DC    D'365.25'                     DOUBLE PRECISION FORMAT
TEMP     DS    D
TEMPR    DS    D
INTEG    DS    CL4
FPINTEG  DS    D
         DS    0D
TWO31    DC    X'4E00000080000000'           2**31 IN FP FORMAT
TWO31R   DC    X'4F00000008000000'           2**31 IN FP FORMAT
TWO32    DC    X'4E00000100000000'           2**32 IN FP FORMAT
FPR0     EQU   0
FPR2     EQU   2
FPR4     EQU   4
FPR6     EQU   6
         END

SOURCE CODE FOR OPAUEX01 - SAMPLE EXIT

OPAUEX01  TITLE 'OPAUTO EXIT ROUTINE'
* EXIT ROUTINE AVAILABLE TO OPAUTO                                  *
* IT IS TAKEN JUST BEFORE THE FOR EACH COMMAND IN THE TABLE         *
* REGISTER 1 POINTS TO :                                            *
* TIME RANGE START - 4 BYTES                                        *
* TIME RANGE END   - 4 BYTES                                        *
* TIME INTERVAL    - 4 BYTES                                        *
* CURRENT COUNT    - 4 BYTES                                        *
* DAYS OF THE WEEK - 7 BYTES                                        *
* OPERATOR COMMAND - 45 BYTES                                       *
* THE EXIT CAN OVERRIDE THE ABOVE FIELDS AND THE ACTION             *
* OPAUTO TAKES WILL DEPEND ON THE RETURN CODE PASSED IN R15         *
* RETURN CODE :                                                     *
* 0  - CARRY ON AS NORMAL                                           *
* 4  - OVERRIDE INTERVAL COUNT CHECK                                *
* 8  - OVERRIDE DAY CHECK                                           *
* 12 - DO NOT ISSUE THE COMMAND                                     *
OPAUEX01  CSECT
OPAUEX01  AMODE 31
OPAUEX01  RMODE ANY
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPAUEX01,R12              * AND ADDRESSABILITY
          LA    R15,0                     *
          PR
          DS   0D
* PARAMETER LIST POINTED TO BY R1                                   *
EX01PARM  DS    0F
EX01ST    DS    F
EX01END   DS    F
EX01INT   DS    F
EX01CNT   DS    F
EX01DAYS  DS    CL7
EX01CMD   DS    CL45
          END OPAUEX01

SOURCE CODE FOR OPLIST - TSO COMMAND INTERFACE

OPLIST    TITLE 'AUTOMATED OPERATIONS TABLE LIST'
* TSO COMMAND TO LIST THE OPAUTO TABLE OF COMMANDS                  *
* RETRIEVES THE ADDRESS OF THE TABLE IN THE FIRST WORD OF THE       *
* RETURNED TOKEN.                                                   *
* THE NUMBER OF ENTRIES IS RETURNED IN THE SECOND WORD OF THE       *
* RETURNED TOKEN.                                                   *
OPLIST    CSECT                           *
OPLIST    AMODE 31                        *
OPLIST    RMODE 24                        *
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING OPLIST,R12                * AND ADDRESSABILITY
          LA    R4,TOKEN                  * POINT TO TOKEN
          CALL  IEANTRT,(LEVEL,NAME,TOKEN,RETCODE)
          LTR   R15,R15                   * ALL OK ?
          BNZ   ERROR                     * OPAUTO NOT STARTED
          LM    R2,R3,0(R4)               * GET TOKENS
LIST      EQU   *
          TPUT  TITLE1,80                 * TITLE TEXT
          TPUT  TITLE2,80                 * TITLE TEXT
          LR    R9,R2                     * COPY TABLE ADDRESS
          USING OPATAB,R9                 * USE DSECT
LISTENT   EQU   *
          MVC   TEXT+0(2),OPASTART+0      * MOVE IN START TIME (HH)
          MVC   TEXT+3(2),OPASTART+2      * MOVE IN START TIME (MM)
          MVC   TEXT+7(2),OPAEND+0        * MOVE IN END TIME (HH)
          MVC   TEXT+10(2),OPAEND+2       * MOVE IN END TIME (MM)
          L     R11,OPAINT                * LOAD INTERVAL
          CVD   R11,PWORK                 * CONVERT TO DEC
          UNPK  WORK,PWORK                * UNPACK IT
          OI    WORK+3,X'F0'              * OR LAST BIT
          MVC   TEXT+14(4),WORK           * MOVE IT IN
          MVC   TEXT+20(7),OPADAYS        * MOVE IN DAYS
          MVC   TEXT+29(45),OPACMD        * MOVE IN COMMAND
          TPUT  TEXT,80                   * WRITE OUT TABLE ENTRY
          LA    R9,OPALEN(,R9)            * NEXT ONE...
          BCT   R3,LISTENT                * LOOP FOR ALL
          PR                              * RETURN TO CALLER
ERROR     EQU   *
          TPUT  ERR1,80
          PR                              * RETURN TO CALLER
* VARIABLES CONSTANTS AND DSECTS                                    *
          DS    0F
ERR1      DC    CL80'ERROR IN OBTAINING OPAUTO TABLE'
TITLE1    DC    CL80'OPAUTO COMMAND TABLE LISTING'
TITLE2    DC    CL80'START  END    MINS  MTWTFSS  COMMAND'
TEXT      DC    CL80'HH:MM  HH:MM  NNNN  MTWTFSS         '
LEVEL     DC    A(IEANT_SYSTEM_LEVEL)
NAME      DC    CL16'SYSC-OPAUTO-TABL'
TOKEN     DC    2D'0'
PERSOPT   DC    A(IEANT_NOPERSIST)
RETCODE   DC    F'0'
WORK      DS    F
PWORK     DS    D
          COPY IEANTASM
          OPADSECT
          END OPLIST

SOURCE CODE FOR OPADSECT - COMMAND TABLE ENTRY

         MACRO
         OPADSECT
.********************************************************************
.* MACRO USED TO MAP OPAUTO TABLE ENTRY .                           *
.********************************************************************
OPATAB    DSECT
OPACMD    DS   CL45
OPADAYS   DS   CL7
          DS   0F
OPASTART  DS   CL4
OPAEND    DS   CL4
OPAINT    DS   CL4
OPACNT    DS   CL4
OPALEN    EQU  *-OPATAB
         MEND


Rob Scott
MVS Consultant (UK)                                                     c Xephon 1995

