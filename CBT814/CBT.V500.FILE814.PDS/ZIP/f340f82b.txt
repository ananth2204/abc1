tSOS - a small TSO for SOS situations

THE SOURCE CODE FOR TSOS

TSOS      TITLE ' tSOS  module  '
***********************************************************************
* tSOS - modify systsin systsprt dcb get/put executor addr            *
* attrib : amode24 , rmode24 , rent , reus , ac(1) , MLPA             *
***********************************************************************
         IKJTCB
         DCBD  DSORG=PS,DEVD=DA
         IEZDEB
* module work area
WM       DSECT
* module save area
WMSAVE   DS    18F                 module save
WMPARA   DS    A                   parameter area address
WMRPLL   DS    F                   length of rpl
WMRPLA   DS    A                   addr of rpl
WMRECL   DS    F                   record length (max )
WMRECA   DS    A                   record address
WMRECEND DS    A                   record last byte addr + 1
         DS    0F
DDNAME1  DC    CL8'SYSTSIN',A(GET)
DDNAME2  DC    CL8'SYSTSPRT',A(PUT)
DCBADDR1 DC    A(0)                dcb addr 1
DCBADDR2 DC    A(0)                dcb addr 2
WMFDBK   DS    F                   feedback code area
WMFDBT   DS    CL80                error message text
WMMSGW   DS    CL24                message processing work area
WMLGTH   EQU   *-WM                length of the dsect
         TITLE ' TSOS  , mainline module '
TSOS CSECT
         USING *,R15               temp base for entry
         B     RMSTART             branch to start
         DC    AL1(L'RMID)         ID LENGTH
RMID     DC    C'TSOS &SYSDATE ' MODULE ID
         DS    0H                  align for halfword
* module initialization
RMSTART  STM   R14,R12,12(R13)     save in higher save
         LR    R12,R15             get program base
         DROP  R15                 drop temp base
         USING TSOS,R12            program base reg 12
         MODESET MODE=SUP,KEY=ZERO into prev state
         GETMAIN R,LV=WMLGTH,SP=252 get work area
         LR    R2,R1               get addr in reg2
         LA    R3,WMLGTH           get length
         SR    R4,R4               clear a pair of regs
         SR    R5,R5               clear a pair of regs
         MVCL  R2,R4               clear the work area
         ST    R1,8(,R13)          store new save addr
         ST    R13,4(R1)           store higher save addr
         LR    R13,R1              get the new work area addr
         L     R1,4(,R13)          back the higher save
         LM    R0,R5,20(R1)        back the regs from the higher save
         USING WM,R13              assign base on wm area
* search on the tcb deb chain for the ddname list entries
         MVC   DDNAME1(12),DDNAME10
         MVC   DDNAME2(12),DDNAME20
         LA    R8,DDNAME1          get first ddname addr
         LA    R9,DDNAME2          get the second in r9
         L     R1,X'10'            get cvt addr
         L     R1,0(,R1)           get cvttcbp
         L     R1,4(,R1)           get actual tcb
         USING TCB,R1              base on tcb
         L     R7,TCBTIO           get tiot addr
         LR    R2,R1               save tcb addr
         L     R1,TCBJSTCB         get mother TCB addr
         ST    R13,TCBUSER         save in first
         LR    R1,R2               get our tcb addr
TCBADDR  L     R2,TCBDEB           get deb chain addr
         LTR   R2,R2               test deb addr
         BNP   NEXTTCB             branch if no more deb's
         USING DEBBASIC,R2         base on deb
DEBADDR  SR    R3,R3               clear r3
         ICM   R3,7,DEBDCBB        get dcb addr
         BZ    NEXTDEB             branch if no more
         USING IHADCB,R3           base on dcb
         TM    DCBOFLGS,DCBOFOPN   test open flag
         BNO   NEXTDEB             branch if not on
         LR    R4,R7               get tiot addr
         AH    R4,DCBTIOT          get tiot addr
         LTR   R8,R8               test reg8
         BZ    CHECKDD2            branch if it has found
         CLC   4(8,R4),0(R8)       is it our dd
         BNE   CHECKDD2            branch if it is
         ST    R3,DCBADDR1         save dcb addr
         LR    R6,R1               save tcb addr
         XC    DCBGET+1(3),9(R8)   change
         XC    9(3,R8),DCBGET+1      the addr in
         XC    DCBGET+1(3),9(R8)     the dcb
         LR    R1,R6               back tcb
         LR    R8,R8               indicate that we have found
CHECKDD2 LTR   R9,R9               test reg9
         BZ    NEXTDEB             branch if it has found
         CLC   4(8,R4),0(R9)       is it the second one
         BNE   NEXTDEB             branch if it is
         LR    R6,R1               save tcb
         ST    R3,DCBADDR2         save dcb addr
         XC    DCBGET+1(3),9(R9)   change
         XC    9(3,R9),DCBGET+1    the addr in
         XC    DCBGET+1(3),9(R9)   the dcb
         LR    R1,R6               back tcb
         SR    R9,R9               indicate that we have found
NEXTDEB  CR    R8,R9               check if all zero
         BE    RETURN              return if yes
         ICM   R2,7,DEBDEBB        get next deb
         BZ    NEXTTCB             branch if no more
         B     DEBADDR             try the next deb
NEXTTCB  LR    R0,R1               save tcb addr
         ICM   R1,15,TCBNTC        get next tcb addr
         BNZ   TCBADDR             branch if set
TCBNTCB  LR    R1,R0               back tcb
         ICM   R1,15,TCBOTC        get mother tcb addr
         BNZ   TCBADDR             branch if more tcb
         LA    R15,8               get return code
RETURN   L     R13,4(R13)          back higher save
         MODESET MODE=PROB,KEY=NZERO back to user
         ST    R15,16(R13)         save return
         LM    R14,R12,12(R13)     back  regs from higher save
         BR    R14                 back to the caller
EXIT     LR    R0,R0
         BR    R14
         DROP  R13
* data area and execute instructions
         TITLE 'get/put routine '
PUT      STM    R14,R12,12(R13)    save regs
         BALR  R11,0               get next inst addr
         USING *,R11               assign base
         GETMAIN R,LV=LWTOLD
         LR    R10,R1
         USING WTOLD,R10
         XC    0(LWTOLD,R10),0(R10)
         LM    R0,R1,20(R13)
         LR    R3,R1               get dcb addr in dcb base
         LH    R1,DCBLRECL         get record length
         STH   R1,WTOL             set length
         BCTR  R1,0                get in machine form
         LR    R8,R0               get start addr
         EX    R1,MOVEWTO          move into wto buff
         WTO   MF=(E,WTOL),ROUTCDE=13 issue wto
PUTRET   FREEMAIN R,LV=LWTOLD,A=(10)
         LM    R14,R12,12(R13)     back the regs
         SR    R15,R15             clear r15
         BR    R14
MOVEWTO  MVC   WTOL+4(*-*),0(R8)   ** exec only ***
WTOLD    DSECT
WTOL     WTO   '                                                       *
                                                                       *
                                     ',MF=L
LWTOLD   EQU   *-WTOL
WTORD    DSECT
REPLY    DC    CL80'  '
WTORECB  DC    A(0)                reply ecb
WTORL    WTOR  'REPLY',MF=L
         DS    0F
LWTORD   EQU   *-WTORD
TSOS     CSECT
GET      STM    R14,R12,12(R13)    save regs
         BALR  R11,0               get next inst addr
         DROP  R11
         USING *,R11               assign base
         GETMAIN R,LV=LWTORD
         LR    R10,R1
         DROP  R10
         USING WTORD,R10
         LM    R0,R1,20(R13)       back regs
         XC    0(LWTORD,R10),0(R10) clear work
         LR    R3,R1               get dcb addr in dcb base
         LH    R1,DCBLRECL         get record length
         LA    R7,80               set length
         LR    R8,R0               get start addr
         XC    WTORECB,WTORECB     clear ecb
         MVC   WTORL(LWTORL),MWTORL
         LA    R5,REPLY
         LA    R6,WTORECB
         WTOR  'REPLY',(5),L'REPLY,(6),ROUTCDE=13,MF=(E,WTORL)
         WAIT  ECB=WTORECB         wait for the reply
         OC    REPLY,BLANKS        make to upper case
         LA    R1,REPLY            get reply addr for locate
         ST    R1,24(R13)          put into the return reg1
         CLC   =C'LOGOFF ',REPLY   is it a LOGOFF IMM?
         BNE   GETRET              branch if not
LOFF     L     R1,X'10'            get cvt addr
         L     R1,0(,R1)           get cvttcbp
         L     R1,4(,R1)           get actual tcb
         ICM   R1,15,TCBJSTCB      get mother tcb
         SR    R4,R4               clear reg
LOFFUSER L     R4,TCBUSER          get user addr
         LTR   R4,R4               test addr
         BNZ   LOFFADDR
         BZ    GETRET              branch if not ok
         B     LOFFUSER            try next
         USING WM,R4               base on wm
LOFFADDR DS    0H
         MVC   DCBGET+1,DDNAME1+9  get back routine
         L     R3,DCBADDR2         get second dcb
         MVC   DCBGET+1,DDNAME2+9  get back routine
GETRET   FREEMAIN R,LV=LWTORD,A=(10)
         LM    R14,R12,12(R13)     back the regs
         SR    R15,R15             clear r15
         BR    R14
MVCWTOR  MVC   0(*-*,R8),REPLY
MWTORL   WTOR  'REPLY',0,L'REPLY,MF=L
LWTORL   EQU *-MWTORL
         DS    0F
BLANKS   DC    CL80' '
         DS    0F
DDNAME10 DC    CL8'SYSTSIN',A(GET)
DDNAME20 DC    CL8'SYSTSPRT',A(PUT)
         LTORG
         END

xx,LISTD 'SYS1.PROCLIB'
or
xx,EDIT 'SYS1.PARMLIB(LNKLST00)'   ASM         (line mode edit command)
xx+1,LIST *  10                        (line mode edit list subcommand)
           etc

The start-up procedure

//TSOS PROC MEMBER=TSOSPARM
//TSOS EXEC PGM=IKJEFT01,REGION=4M,DYNAMNBR=64,TIME=1440
//*
//* TSOSPARM MEMBER CONTAINS ONLY A LINE :"TSOS          "
//*
//SYSTSIN   DD  DSN=TSOS.SAMPLIB(&MEMBER),DISP=SHR
//*
//* SYSTSPRT A DUMMY OUTPUT DATASET ALLOCATED ON THE
//* SYSTEM RESIDENT VOLUME
//*
//SYSTSPRT  DD  UNIT=SYSALLDA,VOL=SER=iplvol,
//          DCB=(RECFM=FB,LRECL=80,BLKSIZE=80),
//          DSN=TSOS.TEMP,DISP=SHR
//*
//* A TSO SYSPROC LIBRARY FOR THE CALLED PROCEDURES
//*
//SYSPROC   DD  DSN=TSOS.SAMPLIB,DISP=SHR

      SPACE=(TRK,1),DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)

Miklos Szigetvari
Systems Programmer (Austria)                                             c Xephon 1995

