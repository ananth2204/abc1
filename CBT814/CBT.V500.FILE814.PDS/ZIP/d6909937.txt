Running jobs from the console

If you are a systems programmer and you have to maintain
MVS, then you know that it is very important that MVS and
the subsystems come up correctly after an IPL. If they don't,
you have to IPL the production system again (power on reset is
necessary), correct the error, and perform a 'power on reset'
once more to test the 'new' system. This takes a lot of time. In
most cases, the reason for the error is a simple thing like a
misspelt statement or a forgotten comma in a SYS1.PARMLIB
member, a system dataset is not catalogued, or a DSNAME is
forgotten in the APF member or LINKLIST, etc. As a
consequence, VTAM does not work.

Following my own bad experiences, I looked for a way to
submit jobs when only JES is running, and I came up with the
following solution. You can activate started tasks by issuing a
'S taskname,parameters' command from the console. If this
started task could submit any individual job to the internal
reader, most of the problems would be solved. In stage 1, I
wrote a little program (CONPROG), which communicates with
the console by WTOs and WTORs, accepts any line, and puts
it to a SYSOUT queue, which is connected to the internal
reader. Figure 1 illustrates the flow. When CONPROG
receives a submit command, it closes JOBOUT and ends.


The contents of the member CONJOB

//CONJOB  PROC CLASS='A'           DEFAULT CLASS OF SUBMITTED JOB
//* LIB: SYS1.PROCLIB(CONJOB)
//* DOC: THIS PROCEDURE CAN BE USED TO SUBMIT A JOB STREAM FROM
//*      CONSOLE INPUT.
//*      START THE PROCEDURE WITH "S CONJOB" FROM THE CONSOLE,
//*             OPTIONAL "S CONJOB,CLASS=x",
//*             IF ANOTHER OUTPUT CLASS IS TO BE USED.
//*      ENTER A JOB CARD FIRST,
//*      THEN ENTER OTHER CARDS FOR THE JOB STREAM,
//*      AT LAST KEY "Rnn-SUBMIT" AT THE CONSOLE -
//*      INPUT.
//S01      EXEC PGM=CONPROG
//STEPLIB  DD DISP=SHR,DSN=your.PUBLIC.LINKLIB
//JOBOUT   DD SYSOUT=(&CLASS,INTRDR)


Example using CONJOB

S CONJOB
CONJOB STARTED
*15 CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END
15//JOBNAME  JOB CLASS=S,USER=USERID,PASSWORD=PASS
*16 CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END
16//         EXEC PGM=IEFBR14
*17 CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END
17//DD1     DD DISP=SHR,DSN=ANY.FILE
*18 CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END
18-SUBMIT
*19 CONPROG ENDED
CONJOB ENDED
JOBNAME STARTED

   etc

JOBNAME ENDED

Instead of IEFBR14 you can of course execute any program
such as IDCAMS, IEBGENER, IEBUPDTE, or even
IKJEFT01, and so on, except those which need a subsystem
that didn't come up. SYSIN data is allowed and SYSOUT data
can be directed to any SYSOUT queue. In most cases, you do
not have any problems with RACF, as you can include USER
and PASSWORD parameters in the job card.


CONPROG

I have written CONPROG in PL/I, but there shouldn't be any
problem with other languages.

CONPROG:PROCEDURE OPTIONS(MAIN);
DCL EOF BIT INIT('0'B);
DCL CONIN CHAR(72);
DCL CARDOUT CHAR(80);
DCL JOBOUT   FILE RECORD OUTPUT ENV(BLKSIZE(80) F);
DISPLAY ('CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END')
REPLY   (CONIN);
IF SUBSTR(CONIN,1,4) = '-SUB' THEN EOF = '1'B;
DO WHILE (EOF = '0'B);
     CARDOUT = CONIN;
     WRITE FILE(JOBOUT)FROM(CARDOUT);
     DISPLAY ('CONPROG : ENTER JCL-STATEMENT OR "-SUBMIT" TO END')
     REPLY   (CONIN);
     IF SUBSTR(CONIN,1,4) = '-SUB' THEN EOF = '1'B;
END;
DISPLAY ('CONPROG   ENDED');
END CONPROG;


CONEDIT

In the second stage, I created a JCL procedure and its
associated program to edit any sequential dataset or member of
a library that has a fixed record length of 80 bytes and line
numbering in columns 73 to 80. The procedure and the
program are both called CONEDIT. To avoid complex
programming, the program does not allocate datasets
dynamically, but uses a VSAM KSDS for easy editing
functions. This KSDS is used as temporary storage only. The
flow of the program is controlled by statements like '-DIS', '-
UPD', '-DEL', or '-ADD'. If you finish the program with '-
END', the original dataset will be updated; if you close it with
'-CAN', a return-code is set and no change will occur.

CONEDIT:PROCEDURE OPTIONS(MAIN);
DCL EOF BIT INIT('0'B);
DCL NOTFND BIT;
DCL COMMAND CHAR(4);
DCL (FROMLINE, TOLINE) CHAR(8);
DCL CONIN CHAR(72);
DCL CARDOUT CHAR(80);
DCL EDIFIL   FILE ENV(VSAM);
DCL 1 EDIREC,
     2 DATA CHAR(72),
     2 RECNO CHAR(8);
DISPLAY ('CONEDI    ENTER MAIN-COMMAND OR "-HLP" FOR HELP')
REPLY   (CONIN);
COMMAND = SUBSTR(CONIN,1,4);
DO WHILE (COMMAND ^= '-END' & COMMAND ^= '-CAN');
     SELECT (COMMAND);
       WHEN ('-HLP')
         DO;
           /* HELP NEEDED */
           CALL HELP;
         END;
       WHEN ('-DIS')
         DO;
           /* DISPLAY SERVICE */
           CALL DISPL;
         END;
       WHEN ('-UPD')
         DO;
           /* UPDATE  SERVICE */
           CALL UPDAT;
         END;
       WHEN ('-ADD')
         DO;
           /* ADD     SERVICE */
           CALL ADDI;
         END;
       WHEN ('-DEL')
         DO;
           /* DELETE  SERVICE */
           CALL DELET;
         END;
      OTHER
         DO;
           /* INVALID COMMAND */
           DISPLAY ('CONEDI --> INVALID COMMAND  **********');
         END;
    END; /*COMMAND IDENTIFICATION*/
    DISPLAY ('CONEDI --> ENTER MAIN-COMMAND OR "-HLP" FOR HELP')
    REPLY   (CONIN);
    COMMAND = SUBSTR(CONIN,1,4);
END; /*MAIN LOOP */
/* EXIT PRODCESSING      */
IF COMMAND = '-END' THEN CALL PLIRETC(0);
     ELSE CALL PLIRETC(016);
/*****  SUBROUTINES                                    ******/
/*****  HELP                                           ******/
HELP: PROC;
DISPLAY ('CONEDI --> HELP SERVICE                        ');
DISPLAY ('CONEDI --> MAIN-CMDS: "-DIS" --> DISPLAY SERVICE');
DISPLAY ('CONEDI -->            "-UPD" --> UPDATE  SERVICE');
DISPLAY ('CONEDI -->            "-ADD" --> ADD     SERVICE');
DISPLAY ('CONEDI -->            "-DEL" --> DELETE  SERVICE');
DISPLAY ('CONEDI -->            "-HLP" --> GET THIS MESSAGE');
DISPLAY ('CONEDI -->            "-END" --> END PROCESSING ');
DISPLAY ('CONEDI -->            "-CAN" --> CANCEL PROCESS ');
DISPLAY ('CONEDI --> SUB -CMDS:    "-RET" --> RETURN TO MAIN ');
DISPLAY ('CONEDI -->               "-HLP" --> GET SPECIFIC HELP');
END; /*HELP*/
/*****  DISPLAY                                        ******/
DISPL: PROC;
ON ENDFILE(EDIFIL) EOF = '1'B;
EOF = '0'B;
DISPLAY ('CONEDI --> DISPLAY SERVICE  ENTER CMD    OR "-HLP"')
REPLY (CONIN);
COMMAND = SUBSTR(CONIN,1,4);
DO WHILE (COMMAND ^= '-RET');
     OPEN FILE(EDIFIL) RECORD INPUT SEQUENTIAL;
     SELECT (COMMAND);
       WHEN ('-HLP')
         DO;
            /*SPECIFIC HELP FOR -DIS */
       DISPLAY ('CONEDI --> HELP SERVICE FOR DISPLAY            ');
       DISPLAY ('CONEDI --> "-RET" --> RETURN TO MAIN MENU      ');
       DISPLAY ('CONEDI --> EOB    --> PROCEED                  ');
       DISPLAY ('CONEDI -->  LINE NUMBERS MUST BE 8 CHAR LONG   ');
       DISPLAY ('CONEDI                  AND NUMERIC            ');
       DISPLAY ('CONEDI --> AT THE FIRST PROMPT ENTER A FROM LNNO');
       DISPLAY ('CONEDI --> AT THE SECND PROMPT ENTER A TO   LNNO');
         END;
       OTHER
         DO;
       DISPLAY ('CONEDI --> DISPLAY SERVICE     ENTER FROM-LINE')
       REPLY (CONIN);
       FROMLINE = SUBSTR(CONIN,1,8);
       DISPLAY ('CONEDI --> DISPLAY SERVICE     ENTER   TO-LINE')
       REPLY (CONIN);
       TOLINE = SUBSTR(CONIN,1,8);
       READ FILE (EDIFIL) INTO(EDIREC);
       DO WHILE(RECNO < FROMLINE);
         READ FILE (EDIFIL) INTO(EDIREC);
         IF EOF THEN RECNO=FROMLINE;
       END;
       IF EOF
         THEN
         DO;
            CLOSE FILE(EDIFIL);
            RETURN;
         END;
         ELSE
         DO WHILE (RECNO <= TOLINE);
           DISPLAY ('CONEDI --> LINE NUMBER '!!RECNO);
           DISPLAY (DATA);
           READ FILE (EDIFIL) INTO(EDIREC);
           IF EOF THEN RECNO = TOLINE;
         END;
     END;
   END;
   DISPLAY ('CONEDI --> DISPLAY SERVICE     ENTER CMD OR "-HLP"')
   REPLY (CONIN);
   COMMAND = SUBSTR(CONIN,1,4);
   CLOSE FILE(EDIFIL);
END; /*DISPLAY - LOOP*/                                               END; /*DIS*/
/*****  UPDATE                                         ******/          UPDAT: PROC;
ON KEY(EDIFIL) BEGIN;
IF ONCODE() = 51 THEN NOTFND='1'B;
     ELSE DO;
       CALL PLIDUMP ('BTS');
       STOP;
     END;
END;
OPEN FILE(EDIFIL) RECORD UPDATE DIRECT;
DISPLAY ('CONEDI --> UPDATE  SERVICE  ENTER CMD OR    "-HLP"')
REPLY (CONIN);
COMMAND = SUBSTR(CONIN,1,4);
DO WHILE (COMMAND ^= '-RET');
     NOTFND = '0'B;
     SELECT (COMMAND);
       WHEN ('-HLP')
         DO;
         /*SPECIFIC HELP FOR -UPD */
       DISPLAY ('CONEDI --> HELP SERVICE FOR UPDATE             ');
       DISPLAY ('CONEDI --> "-RET" --> RETURN TO MAIN MENU      ');
       DISPLAY ('CONEDI --> EOB    --> PROCEED                  ');
       DISPLAY ('CONEDI -->  LINE NUMBERS MUST BE 8 CHAR LONG   ');
       DISPLAY ('CONEDI               AND NUMERIC            ');
       DISPLAY ('CONEDI --> AT THE FIRST PROMPT ENTER A LINENO   ');
       DISPLAY ('CONEDI -->           FOR UPDATE              ');
       DISPLAY ('CONEDI --> AT THE SECOND PROMPT ENTER THE       ');
       DISPLAY ('CONEDI -->           COMPLETE LINE (MAX.72 CHAR)');
         END;
       OTHER
         DO;
         DISPLAY ('CONEDI --> UPDATE  SERVICE  ENTER LINENO   ')
         REPLY (CONIN);
         FROMLINE = SUBSTR(CONIN,1,8);
         READ FILE (EDIFIL) INTO(EDIREC) KEY(FROMLINE);
         IF NOTFND
           THEN
           DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE);
                 DISPLAY ('CONEDI --> LINE NOT FOUND');
           END;
           ELSE
           DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE);
                 DISPLAY (DATA);
                 DISPLAY ('CONEDI --> UPDATE  SERVICE '!!
                 'ENTER CONTENT  ')
                 REPLY (CONIN);
                 DATA = CONIN;
                 REWRITE FILE(EDIFIL) FROM(EDIREC) KEY (FROMLINE);
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE!!
                 '  UPDATE COMPLETE');
           END;
         END;
       END;
       DISPLAY ('CONEDI --> UPDATE  SERVICE     ENTER CMD OR "-HLP"')
       REPLY (CONIN);
       COMMAND = SUBSTR(CONIN,1,4);
     END; /*UPDATE  - LOOP*/
     CLOSE FILE(EDIFIL);
END; /*UPD*/
/*****  ADD RECORD                                     ******/
ADDI: PROC;
ON KEY (EDIFIL) BEGIN;
IF ONCODE() = 51 THEN NOTFND='1'B;
     ELSE DO;
        CALL PLIDUMP ('BTS');
        STOP;
      END;
END;
OPEN FILE(EDIFIL) RECORD DIRECT UPDATE;
DISPLAY ('CONEDI --> ADD     SERVICE  ENTER CMD OR    "-HLP"')
REPLY (CONIN);
COMMAND = SUBSTR(CONIN,1,4);
DO WHILE (COMMAND ^= '-RET');
     NOTFND = '0'B;
     SELECT (COMMAND);
       WHEN ('-HLP')
         DO;
         /*SPECIFIC HELP FOR -ADD */
       DISPLAY ('CONEDI --> HELP SERVICE FOR ADD                ');
       DISPLAY ('CONEDI --> "-RET" --> RETURN TO MAIN MENU      ');
       DISPLAY ('CONEDI --> EOB    --> PROCEED                  ');
       DISPLAY ('CONEDI -->  LINE NUMBERS MUST BE 8 CHAR LONG   ');
       DISPLAY ('CONEDI               AND NUMERIC            ');
       DISPLAY ('CONEDI --> AT THE FIRST PROMPT ENTER A LINENO   ');
       DISPLAY ('CONEDI -->           FOR ADD                 ');
       DISPLAY ('CONEDI --> AT THE SECOND PROMPT ENTER THE       ');
       DISPLAY ('CONEDI -->           COMPLETE LINE (MAX.72 CHAR)');
         END;
       OTHER
         DO;
         DISPLAY ('CONEDI --> ADD     SERVICE  ENTER LINENO   ')
         REPLY (CONIN);
         FROMLINE = SUBSTR(CONIN,1,8);
         READ FILE (EDIFIL) INTO(EDIREC) KEY(FROMLINE);
         IF NOTFND
            THEN
            DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE);
                 DISPLAY ('CONEDI --> ADD     SERVICE '!!
                 'ENTER CONTENT  ')
                 REPLY (CONIN);
                 DATA = CONIN;
                 WRITE FILE(EDIFIL) FROM(EDIREC)
                 KEYFROM (FROMLINE);
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE!!
                 '  ADD    COMPLETE');
            END;
            ELSE
            DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE!!
                 '  ALREADY EXISTS');
                 DISPLAY (DATA);
            END;
       END;
     END;
     DISPLAY ('CONEDI --> ADD     SERVICE     ENTER CMD OR "-HLP"')
     REPLY (CONIN);
     COMMAND = SUBSTR(CONIN,1,4);
END; /*ADD     - LOOP*/
CLOSE FILE(EDIFIL);
END; /*ADD*/
/*****  DELETE                                         ******/
DELET: PROC;
ON KEY(EDIFIL) BEGIN;
     IF ONCODE() = 51 THEN NOTFND='1'B;
       ELSE DO;
         CALL PLIDUMP ('BTS');
         STOP;
       END;
END;
OPEN FILE(EDIFIL) RECORD UPDATE DIRECT;
DISPLAY ('CONEDI --> DELETE  SERVICE  ENTER CMD OR    "-HLP"')
REPLY (CONIN);
COMMAND = SUBSTR(CONIN,1,4);
DO WHILE (COMMAND ^= '-RET');
     NOTFND = '0'B;
     SELECT (COMMAND);
       WHEN ('-HLP')
       DO;
         /*SPECIFIC HELP FOR -DEL */
       DISPLAY ('CONEDI --> HELP SERVICE FOR DELETE             ');
       DISPLAY ('CONEDI --> "-RET" --> RETURN TO MAIN MENU      ');
       DISPLAY ('CONEDI --> EOB    --> PROCEED                  ');
       DISPLAY ('CONEDI -->  LINE NUMBERS MUST BE 8 CHAR LONG   ');
       DISPLAY ('CONEDI               AND NUMERIC            ');
       DISPLAY ('CONEDI --> AT THE FIRST PROMPT ENTER A LINENO   ');
       DISPLAY ('CONEDI -->           FOR DELETE              ');
       DISPLAY ('CONEDI --> AT THE SECOND PROMPT ENTER "Y"       ');
       DISPLAY ('CONEDI -->           TO CONFIRM DELETE       ');
       END;
       OTHER
       DO;
         DISPLAY ('CONEDI --> DELETE  SERVICE  ENTER LINENO   ')
         REPLY (CONIN);
         FROMLINE = SUBSTR(CONIN,1,8);
         READ FILE (EDIFIL) INTO(EDIREC) KEY(FROMLINE);
         IF NOTFND
         THEN
           DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE);
                 DISPLAY ('CONEDI --> LINE NOT FOUND');
           END;
         ELSE
           DO;
                 DISPLAY ('CONEDI --> LINE NUMBER '!!FROMLINE);
                 DISPLAY (DATA);
                 DISPLAY ('CONEDI --> DELETE  SERVICE '!!
                 'ENTER "Y" TO CONFIRM')
                 REPLY (CONIN);
                 IF SUBSTR(CONIN,1,1) = 'Y'
                 THEN
                       DO;
                       DELETE FILE(EDIFIL) KEY (FROMLINE);
                       DISPLAY ('CONEDI --> LINE NUMBER'
                             !!FROMLINE!!'  DELETED  ');
                       END;
                 ELSE
                       DO;
                       DISPLAY ('CONEDI --> LINE NUMBER '
                       !!FROMLINE!!  '  NOT DELETED  ');
                       END;
           END;
      END;
    END;
     DISPLAY ('CONEDI --> DELETE  SERVICE     ENTER CMD OR "-HLP"')
     REPLY (CONIN);
     COMMAND = SUBSTR(CONIN,1,4);
END; /*DELETE  - LOOP*/
CLOSE FILE(EDIFIL);
END; /*DEL*/
/*****  END SUBROUTINES                                ******/
/* END PROGRAM */
END CONEDIT;

The JCL procedure, which executes CONEDIT, is as follows:

//CONEDIT PROC DSEDI='',UNVOL=''
//* $IDX: EDIT A MEMBER OR SEQL DATASET FROM CONSOLE
//* $REM: CALL THIS PROC, IF VTAM OR TSO IS NOT AVAILABLE
//*       FROM A JOB, SUBMITTED BY CONJOB.
//*       USE THE PARM DSEDI TO LOCATE THE DATASET.
//*       IF THE DATASET YOU WANT TO EDIT IS NOT CATALOGUED,
//*       USE THE PARM UNVOL TO SPECIFY UNIT AND VOLSER
//*       SAMPLE-JOB:
//*       //jobname  JOB (0000),'name',CLASS=A,MSGCLASS=X,
//*       //      USER=userid,PASSWORD=XXXXXXXX
//*       //      EXEC CONEDIT,DSEDI=SYS1.PARMLIB(IEAAPF02)
//*       //
//S01     EXEC PGM=IDCAMS,REGION=1024K
//* DELETE / DEFINE TEMP FILE F. MEMBER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=SHR,DSN=your.PARMLIB(CONEDI01)
//S02     EXEC PGM=IDCAMS,REGION=1024K
//* REPRO MEMBER -> TEMP FILE
//EIN      DD DISP=SHR,DSN=&DSEDI.&UNVOL
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=SHR,DSN=your.PARMLIB(CONEDI02)
//S03     EXEC PGM=CONEDIT
//STEPLIB  DD DISP=SHR,DSN=your.PUBLIC.LINKLIB
//EDIFIL   DD DISP=OLD,DSN=your.PRIVATE.TEMP
//SYSPRINT DD SYSOUT=*
//* EDIT  TEMP FILE FROM CONSOLE
//S04     EXEC PGM=IDCAMS,REGION=1024K,COND=(0,NE)
//*       EXEC ONLY IF CONEDIT NOT CANCELLED
//TEMPFIL  DD DISP=OLD,DSN=your.PRIVATE.TEMP
//* REPRO TEMP FILE -> MEMBER
//SYSPRINT DD  SYSOUT=*
//AUS      DD DISP=SHR,DSN=&DSEDI.&UNVOL
//SYSIN    DD  DISP=SHR,DSN=your.PARMLIB(CONEDI04)
//S05     EXEC PGM=IDCAMS,REGION=1024K
//* DELETE  TEMP FILE
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DISP=SHR,DSN=your.PARMLIB(CONEDI05)

CONEDI01 member

 DELETE your.PRIVATE.TEMP PURGE

 DEFINE CLUSTER-
      (NAME(your.PRIVATE.TEMP))-
      DATA -
         (RECORDS(1000 1000) -
          FREESPACE(20 10) -
          KEYS(8 72) -
          RECORDSIZE(80 80)-
          VOLUMES(WRK000)) -
      INDEX -
         (RECORDS (1000 1000)-
          IMBED -
          VOLUMES (WRK000))

CONEDI02 member

 REPRO -
  INFILE (EIN)-
  OUTDATASET ('your.PRIVATE.TEMP')

CONEDI04 member

 REPRO -
  INDATASET ('your.PRIVATE.TEMP')-
  OUTFILE (AUS)

CONEDI05 member

 DELETE your.PRIVATE.TEMP PURGE


Franz Eckl
Systems Programmer (Germany)                        c Xephon 1993

