An Assembler program trace facility


          MTRACE ON
          MVC   A,B
          LM    R7,R8,REGS
          B     LABEL
 REGS     DC    F'7'
          DC    F'8'
 LABEL    SLA   R7,2
          LA    R1,*+10
          O     R1,=X'80000000'
          BSM   R0,R1
          MTRACE OFF


TRACEASM SOURCE CODE

         MACRO
&LAB     PUSHR &REG
&LAB     ST    &REG,0(,R11)
         LA    R11,4(,R11)
         MEND
         MACRO
&LAB     POPR  &REG
&LAB     S     R11,=F'4'
         L     &REG,0(,R11)
         MEND
TRACEASM CSECT
TRACEASM AMODE ANY
TRACEASM RMODE 24
         USING TRACEASM,R15
         B     A_START
         DC    CL8'TRACEASM'
         DC    CL8'&SYSDATE'
A_START  DS    0H
         LR    R12,R15
         USING TRACEASM,R12
         DROP  R15
         LA    R11,W_STACK
         LA    R13,W_SAVE_AREA
         ST    R14,W_RETURN_ADDRESS
         LR    R7,R12                       base address
         N     R7,=X'7F000000'              below the line ?
         BNZ   A_ERROR0
         LR    R7,R1                        r7 --> epie
         CLI   EPIEINT-EPIE+3(R7),X'01'     is it an 0C1 ?
         BNE   A_ERROR1
         L     R3,EPIEPSW-EPIE+4(,R7)       r3 --> instr after 0c1
         LA    R3,0(,R3)                    0 hi order bit (if on)
         LH    R4,EPIEINT-EPIE(,R7)
         SR    R3,R4                        r3 --> 0c1
         AP    W_TRACE_COUNT,=PL1'1'        count +1
         CP    W_TRACE_COUNT,=PL1'1'        first time ?
         BNE   A_NOT_FIRST_TIME
         L     R2,EPIEPARM-EPIE(,R7)        r2 --> parm list
         L     R5,0(,R2)                    r5 --> parm1 (max count)
         MVC   W_MAX_COUNT(2),0(R5)         save for later
         L     R5,4(,R2)                    r5 --> parm2 (ddname)
         MVC   W_DDNAME(8),0(R5)
         S     R3,=F'10'                    r3 --> "trace on" code
         MVC   W_ESPIE_RESET+2(2),8(R3)     espie token (base/displ)
         CLC   0(8,R3),=X'41F0001C0A6D5010' our espie set up ?
         BNE   A_ERROR2
         LA    R2,TRACE                     r2 --> dcb
         MVC   DCBDDNAM-IHADCB(8,R2),W_DDNAME
         MVI   W_TRACE_OPEN,C'N'            set flag
         L     R8,CVTPTR                    r8 --> cvt
         L     R8,CVTTCBP-CVT(,R8)          r8 --> tcb/ascb pointer
         L     R8,4(,R8)                    r8 --> tcb
         L     R8,TCBTIO-TCB(,R8)           r8 --> tiot
         XR    R9,R9
         XR    R10,R10
A_TIOT_LOOP    EQU *
         IC    R9,TIOELNGH-TIOT1(R10,R8)    length of dd entry
         LTR   R9,R9                        end ?
         BZ    A_EXIT                       ddname not present
         LA    R6,TIOEDDNM-TIOT1(R10,R8)    r6 --> ddname
         CLC   0(8,R6),W_DDNAME             dd in jcl ?
         BE    A_OPEN_IT                    yes - use it
         AR    R10,R9
         B     A_TIOT_LOOP                  check next one
A_OPEN_IT      EQU *
         OPEN  (TRACE,(OUTPUT))             trace output dataset
         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN open ok ?
         BZ    A_ERROR3
         MVI   W_TRACE_OPEN,C'Y'            set flag
         LOAD  EP=TROPCODE,ERRET=A_ERROR4   load table of mnemonics
         ST    R0,W_@OPCODE_TABLE           save for later
         BAS   R10,XA_PUT_LINE
         MVC   1(27,R1),=C'Registers at start of trace'
         BAS   R10,AA_FORMAT_REGISTERS      registers at start
         LA    R3,12(,R3)                   r3 --> first instruction
         CLC   0(L'W_ESPIE_RESET,R3),W_ESPIE_RESET trace "end" ?
         BE    A_NOTHING_TO_TRACE           yes - nothing for us to do
         ST    R3,W_@START                  save starting address
         MVC   W_REGISTERS(64),EPIEGPR-EPIE(R7) save registers
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         MVC   5(33,R1),=C'---------- Trace start ----------'
         MVC   W_PREV_AMODE(1),EPIEPSW-EPIE+4(R7)
         NI    W_PREV_AMODE,X'80'
         BAS   R10,AB_SETUP_NEXT_0C1        set next interrupt
         BAS   R10,AC_FORMAT_INSTRUCTION    format first instr
         B     A_EXIT                       go execute it
A_NOT_FIRST_TIME EQU *
         CLI   W_TRACE_OPEN,C'Y'            trace dataset open ?
         BNE   A_TRACE_NOT_OPEN
         ICM   R4,B'1111',W_@0C1_1          this interrupt set ?
         BZ    A_SKIP_FIRST
         MVC   0(2,R4),W_SAVE_INSTR_1       yes - restore instruction
A_SKIP_FIRST   EQU *
         ICM   R4,B'1111',W_@0C1_2          this interrupt set ?
         BZ    A_SKIP_SECOND
         MVC   0(2,R4),W_SAVE_INSTR_2       yes - restore instruction
A_SKIP_SECOND  EQU *
         C     R3,W_@0C1_1                  is it our 0c1 ?
         BE    A_CHECK_AMODE
         C     R3,W_@0C1_2                  is it our 0c1 ?
         BE    A_CHECK_AMODE
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         ST    R3,W_BINARY                  address of the 0C1
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   1(11,R1),=C'**** 0C1 at'
         MVC   13(8,R1),W_ZONED
         CLOSE (TRACE)
         MVI   W_TRACE_OPEN,C'N'
         B     A_ABEND
A_CHECK_AMODE     EQU *
         MVI   W_AMODE,X'80'
         NC    W_AMODE(1),EPIEPSW-EPIE+4(R7) get hi order bit
         CLC   W_AMODE(1),W_PREV_AMODE      amode changed ?
         BE    A_CHECK_REGISTERS
         MVC   W_PREV_AMODE,W_AMODE
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         CLI   W_AMODE,X'80'                x'80' => amode(31)
         BE    A_MODE_31
         MVC   8(16,R1),=C'into 24 bit mode'
         B     A_CHECK_REGISTERS
A_MODE_31      EQU *
         MVC   8(16,R1),=C'into 31 bit mode'
A_CHECK_REGISTERS EQU *
         CLC   W_REGISTERS(64),EPIEGPR-EPIE(R7) any changed ?
         BE    A_REGISTERS_UNCHANGED
         BAS   R10,AD_CHECK_REGISTERS       format changed registers
A_REGISTERS_UNCHANGED EQU *
         ST    R3,EPIEPSW-EPIE+4(,R7)       adjust restart address
         OC    EPIEPSW-EPIE+4(1,R7),W_AMODE set amode bit
         CLC   0(L'W_ESPIE_RESET,R3),W_ESPIE_RESET trace "end" ?
         BE    A_END_OF_TRACE
         CP    W_TRACE_COUNT,W_MAX_COUNT    at maximum ?
         BH    A_TRACE_MAX_REACHED
         BAS   R10,AB_SETUP_NEXT_0C1        next interrupt
         BAS   R10,AC_FORMAT_INSTRUCTION    format next instruction
         B     A_EXIT                       go execute it
A_TRACE_MAX_REACHED EQU *
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         MVC   1(26,R1),=C'**** Trace maximum reached'
         B     A_CLOSE_TRACE
A_TRACE_NOT_OPEN EQU *
         ST    R3,W_BINARY                  address of the 0C1
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   WTOMSG4+4+24(8),W_ZONED
         WTO   MF=(E,WTOMSG4)
         B     A_ABEND
WTOMSG4  WTO 'Trce-4  ***0C1 abend at xxxxxxxx',MF=L
A_NOTHING_TO_TRACE DS 0H
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         MVC   1(27,R1),=C'**** no instructions traced'
         B     A_CLOSE_TRACE
A_END_OF_TRACE EQU *
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         MVC   5(32,R1),=C'---------- Trace stop ----------'
         BAS   R10,XA_PUT_LINE
         BAS   R10,XA_PUT_LINE
         MVC   1(25,R1),=C'Registers at end of trace'
         BAS   R10,AA_FORMAT_REGISTERS
A_CLOSE_TRACE  EQU *
         MVI   W_TRACE_OPEN,C'N'
         CLOSE (TRACE)
         DELETE EP=TROPCODE
A_EXIT   EQU *
         L     R14,W_RETURN_ADDRESS
         BSM   0,R14                        resume execution
A_ERROR4 EQU   *
         WTO   'Trce-4  Unable to load OPCODE table'
         B     A_ABEND
A_ERROR3 EQU   *
         WTO   'Trce-3  Open failed for TRACE dataset'
         B     A_EXIT
A_ERROR2 EQU   *
         WTO   'Trce-2 initialization error'
         B     A_ABEND
A_ERROR1 EQU   *
         WTO   'Trce-1  error, not an 0C1'
         B     A_ABEND
A_ERROR0 EQU   *
         WTO   'Trce-0  error, program must be RMODE 24'
A_ABEND  EQU   *
         ABEND 99,DUMP
AA_FORMAT_REGISTERS EQU *              ==== subroutine ====
         PUSHR R10                          save return address
         LA    R1,EPIEGPR-EPIE(,R7)         r1 --> registers
         LA    R6,16                        16 times
         LA    R4,W_REGS
AA_FORMAT_LOOP EQU *
         MVC   W_BINARY(4),0(R1)
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   4(8,R4),W_ZONED
         LA    R4,13(,R4)                   r4 --> next slot
         LA    R1,4(,R1)                    r1 --> next register
         BCT   R6,AA_FORMAT_LOOP            do next one ....
         BAS   R10,XA_PUT_LINE
         LA    R6,4                         4 times
         LA    R4,W_REGS                    r4 --> first line of text
AA_WRITE_LOOP  EQU *
         BAS   R10,XA_PUT_LINE
         MVC   1(L'W_REGS,R1),0(R4)
         LA    R4,L'W_REGS(,R4)             r4 --> next line of text
         BCT   R6,AA_WRITE_LOOP             do next one ....
         POPR  R10                          load return address
AA_EXIT  BSM   0,R10                        return to caller
AB_SETUP_NEXT_0C1 EQU *                ==== subroutine ====
         PUSHR R10                          save return address
         MVC   W_@0C1_1,=F'0'
         MVC   W_@0C1_2,=F'0'
         MVC   W_BINARY(4),0(R3)            next instruction
         BAS   R10,XB_CONVERT_TO_HEX
         LR    R2,R3
         TM    0(R3),B'11000000'            work out length of instr
         BZ    AB_TWO_BYTES
         BM    AB_FOUR_BYTES
AB_SIX_BYTES   EQU *
         LA    R2,2(,R2)
AB_FOUR_BYTES  EQU *
         LA    R2,2(,R2)
AB_TWO_BYTES   EQU *
         LA    R2,2(,R2)                    r2 --> instr after
         MVI   W_BRANCH_INSTR,C'N'          set flag
         LA    R4,W_BRANCH_INSTR_TABLE-3
AB_SEARCH_TABLE_LOOP EQU *
         LA    R4,3(,R4)                    r4 --> next entry
         CLI   0(R4),X'FF'                  end of table ?
         BE    AB_NEXT_SEQUENTIAL           yes - not a branch instr
         CLC   0(2,R4),W_ZONED              no - is it in the table ?
         BNE   AB_SEARCH_TABLE_LOOP         try next one
         MVI   W_BRANCH_INSTR,C'Y'          in table - set flag
         CLC   W_ZONED(2),=C'45'            bal ?
         BE    AB_PROCESS_BRANCH
         CLC   W_ZONED(2),=C'0B'            bsm ?
         BE    AB_PROCESS_BRANCH_REGISTER
         CLC   W_ZONED(3),=C'47F'           branch unconditional ?
         BE    AB_PROCESS_BRANCH
         CLC   W_ZONED(4),=C'07F0'          special case ?
         BE    AB_NEXT_SEQUENTIAL
         CLC   W_ZONED(3),=C'07F'           branch unconditional ?
         BE    AB_PROCESS_BRANCH_REGISTER
AB_NEXT_SEQUENTIAL EQU *
         ST    R2,W_@0C1_1
         MVC   W_SAVE_INSTR_1(2),0(R2)      save for next time
         MVC   0(2,R2),=H'0'                overwrite with x'0000'
         CLI   W_BRANCH_INSTR,C'Y'          branch instr ?
         BNE   AB_RETURN                    no - finished
         CLC   W_ZONED(3),=C'470'           nop ?
         BE    AB_RETURN
         CLC   W_ZONED(3),=C'070'           nop ?
         BE    AB_RETURN
         CLI   2(R4),C'R'                   instr type rr ?
         BNE   AB_PROCESS_BRANCH            no
         CLI   W_ZONED+3,C'0'               reg2 zero ?
         BE    AB_RETURN                    yes - no branch then
AB_PROCESS_BRANCH_REGISTER EQU *
         XR    R2,R2
         IC    R2,1(,R3)
         SLL   R2,28                        get rid of left 4 bits
         SRL   R2,26                        shift back and x 4
         L     R9,EPIEGPR-EPIE(R2,R7)       branch address
         LA    R9,0(,R9)                    adjust
         B     AB_INSERT_BREAK
AB_PROCESS_BRANCH EQU *
         XR    R2,R2
         XR    R9,R9
         CLI   2(R4),C'S'                   rs type instr ?
         BE    AB_PROCESS_BASE              yes - no index register
         IC    R2,1(,R3)
         SLL   R2,28                        get rid of left 4 bits
         SRL   R2,26                        shift back and x 4
         LTR   R2,R2                        zero ?
         BZ    AB_PROCESS_BASE
         L     R8,EPIEGPR-EPIE(R2,R7)       index register value
         LA    R9,0(,R8)                    adjust
AB_PROCESS_BASE EQU *
         IC    R2,2(,R3)
         SRA   R2,4                         get rid of right 4 bits
         SLA   R2,2                         shift back and x 4
         LTR   R2,R2                        zero ?
         BZ    AB_PROCESS_DISPLACEMENT
         L     R8,EPIEGPR-EPIE(R2,R7)       base register value
         LA    R9,0(R8,R9)                  unsigned arithmetic
AB_PROCESS_DISPLACEMENT EQU *
         LH    R10,2(,R3)
         N     R10,=F'4095'                 "and" out left 4 bits
         AR    R9,R10                       r9 is branch address
AB_INSERT_BREAK EQU *
         MVC   W_SAVE_INSTR_2(2),0(R9)
         MVC   0(2,R9),=H'0'
         ST    R9,W_@0C1_2
AB_RETURN EQU  *
         POPR  R10                          load return address
AB_EXIT  BSM   0,R10                        return to caller
AC_FORMAT_INSTRUCTION EQU *            ==== subroutine ====
         PUSHR R10                          save return address
         BAS   R10,XA_PUT_LINE              blank line
         BAS   R10,XA_PUT_LINE
         MVI   W_TL,C' '
         MVC   W_TL+1(L'W_TL-1),W_TL
         MVC   W_TL_COUNT,=X'40202021'      edit mask
         ED    W_TL_COUNT,W_TRACE_COUNT+1
         LR    R4,R3
         ST    R3,W_BINARY                  address of instr
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   W_TL_ADDR,W_ZONED            address in hex
         S     R4,W_@START                  offset from starting point
         ST    R4,W_BINARY
         BAS   R10,XB_CONVERT_TO_HEX
         LA    R8,W_ZONED
         LA    R9,7
AC_FORMAT_OFFSET_LOOP EQU *
         CLI   0(R8),C'0'
         BNE   AC_END_OF_LEADING_ZEROS
         MVI   0(R8),C' '                   replace '0' with ' '
         LA    R8,1(,R8)
         BCT   R9,AC_FORMAT_OFFSET_LOOP
AC_END_OF_LEADING_ZEROS EQU *
         BCTR  R8,0
         BCTR  R8,0
         MVC   0(2,R8),=C'(+'
         MVC   W_TL_OFFSET,W_ZONED
         MVI   W_TL_OFFSET+8,C')'           format is (+n)
         MVC   W_BINARY(4),0(R3)            instruction code
         BAS   R10,XB_CONVERT_TO_HEX
         TM    0(R3),B'11000000'            work out instr length
         BZ    AC_INSTR_2BYTES
         BM    AC_INSTR_4BYTES
AC_INSTR_6BYTES EQU *
         MVC   W_TL_INSTR_HEX(8),W_ZONED
         MVC   W_BINARY(4),4(R3)
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   W_TL_INSTR_HEX+8(4),W_ZONED
         B     AC_LOOKUP_TABLE
AC_INSTR_4BYTES EQU *
         MVC   W_TL_INSTR_HEX(8),W_ZONED
         B     AC_LOOKUP_TABLE
AC_INSTR_2BYTES EQU *
         MVC   W_TL_INSTR_HEX(4),W_ZONED
AC_LOOKUP_TABLE EQU *
         L     R4,W_@OPCODE_TABLE           r4 --> table
         XR    R2,R2
         IC    R2,0(R3)                     opcode
         SLA   R2,3                         x 8
         LA    R4,0(R2,R4)                  start + offset
         CLI   0(R4),X'00'                  in table ?
         BE    AC_RETURN                    no - return
         MVC   W_TL_MNEMONIC,0(R4)          instr mnemonic
         LH    R15,6(,R4)                   offset
         B     *+4(R15)                     branch to routine
         B     AC1_FORMAT_RR                +  0  reg/reg
         B     AC2_FORMAT_RX                +  4  reg/indexed storage
         B     AC3_FORMAT_RS                +  8  reg/storage
         B     AC4_FORMAT_SI                + 12  storage/immediate
         B     AC5_FORMAT_SS                + 16  storage/storage
AC1_FORMAT_RR  EQU *
         LA    R2,W_TL_OPERANDS
         CLC   W_TL_INSTR_HEX(2),=C'0A'     svc ?
         BE    AC1_SVC
         CLC   W_TL_INSTR_HEX(2),=C'07'     branch
         BNE   AC1_REGISTER1
         CLI   W_TL_INSTR_HEX+2,C'0'        zero mask => nop
         BE    AC1_NOP
         CLI   W_TL_INSTR_HEX+3,C'0'        reg2 zero => nop
         BE    AC1_NOP
         CLI   W_TL_INSTR_HEX+2,C'F'        unconditional ?
         BNE   AC1_MASK
         MVC   W_TL_MNEMONIC(3),=C'BR '     change bcr to br
         B     AC1_REGISTER2
AC1_SVC  EQU   *
         XR    R5,R5
         IC    R5,1(R3)                     svc number
         CVD   R5,W_PACKED                  hex -> dec
         MVC   0(4,R2),=X'40202120'         edit pattern
         ED    0(4,R2),W_PACKED+6
         LA    R6,3
         LR    R5,R2
AC1_EDIT_LOOP  EQU *
         LA    R5,1(,R5)
         CLI   0(R5),C' '                   leading blank ?
         BE    AC1_DEC
         MVC   0(1,R2),0(R5)                shuffle up
         MVI   0(R5),C' '
         LA    R2,1(,R2)
AC1_DEC  EQU   *
         BCT   R6,AC1_EDIT_LOOP
         B     AC_RETURN
AC1_NOP  EQU   *
         MVC   W_TL_MNEMONIC(3),=C'NOP'     change to "nop"
         B     AC_RETURN
AC1_MASK EQU   *
         MVC   0(1,R2),W_TL_INSTR_HEX+2     mask
         MVI   1(R2),C','
         LA    R2,2(,R2)
         B     AC1_REGISTER2
AC1_REGISTER1  EQU *
         LA    R4,W_TL_INSTR_HEX+2          r4 --> reg1
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C','
         LA    R2,1(,R2)
AC1_REGISTER2  EQU *
         CLC   W_TL_INSTR_HEX(2),=C'06'     bctr ?
         BNE   AC1_LABEL
         CLI   W_TL_INSTR_HEX+3,C'0'        reg2 zero ?
         BNE   AC1_LABEL
         MVI   0(R2),C'0'
         B     AC_RETURN
AC1_LABEL EQU  *
         LA    R4,W_TL_INSTR_HEX+3          r4 -->  reg2
         BAS   R10,XC_FORMAT_REGISTER
         CLI   W_BRANCH_INSTR,C'Y'          is it a branch instr ?
         BNE   AC_RETURN                    no - finished here
         MVC   W_BINARY,W_@0C1_2
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   W_TL_OPERANDS+15(15),=C'(addr xxxxxxxx)'
         MVC   W_TL_OPERANDS+21(8),W_ZONED
         B     AC_RETURN
AC2_FORMAT_RX  EQU *
         LA    R2,W_TL_OPERANDS
         CLC   W_TL_INSTR_HEX(2),=C'47'     branch
         BNE   AC2_REGISTER1
         CLI   W_TL_INSTR_HEX+2,C'F'        unconditional ?
         BNE   AC2_MASK
         MVC   W_TL_MNEMONIC(2),=C'B '
         B     AC2_OPERAND2
AC2_MASK EQU   *
         MVC   0(1,R2),W_TL_INSTR_HEX+2     mask
         MVI   1(R2),C','
         LA    R2,2(,R2)
         B     AC2_OPERAND2
AC2_REGISTER1  EQU *
         LA    R4,W_TL_INSTR_HEX+2          r4 --> reg1
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C','
         LA    R2,1(,R2)
AC2_OPERAND2   EQU *
         MVC   0(3,R2),W_TL_INSTR_HEX+5     displacement
         CLC   W_TL_INSTR_HEX+3(2),=C'00'   no index/base regs ?
         BE    AC_RETURN                    yes - finished
         MVI   3(R2),C'('
         LA    R2,4(,R2)
         LA    R4,W_TL_INSTR_HEX+3          index register
         CLI   0(R4),C'0'
         BE    AC2_BASE_REGISTER
         BAS   R10,XC_FORMAT_REGISTER
AC2_BASE_REGISTER EQU *
         MVI   0(R2),C','
         LA    R2,1(,R2)
         LA    R4,W_TL_INSTR_HEX+4          base register
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C')'
         CLI   W_BRANCH_INSTR,C'Y'          branch instr ?
         BNE   AC_RETURN                    no - finished
         MVC   W_BINARY,W_@0C1_2
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   W_TL_OPERANDS+15(15),=C'(addr xxxxxxxx)'
         MVC   W_TL_OPERANDS+21(8),W_ZONED
         B    AC_RETURN
AC3_FORMAT_RS  EQU *
         LA    R2,W_TL_OPERANDS
         LA    R4,W_TL_INSTR_HEX+2          r4 --> reg1
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C','
         LA    R2,1(,R2)
         CLC   W_TL_INSTR_HEX+3(2),=C'00'   shift instr ?
         BE    AC3_SHIFT
         LA    R4,W_TL_INSTR_HEX+3          r4 --> reg2
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C','
         LA    R2,1(,R2)
         MVC   0(3,R2),W_TL_INSTR_HEX+5     displacement
         MVI   3(R2),C'('
         LA    R2,4(,R2)
         LA    R4,W_TL_INSTR_HEX+4          base register
         BAS   R10,XC_FORMAT_REGISTER
         MVI   0(R2),C')'
         CLI   W_BRANCH_INSTR,C'Y'          branch instr ?
         BNE   AC_RETURN                    no - finished
         MVC   W_BINARY,W_@0C1_2
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   W_TL_OPERANDS+15(15),=C'(addr xxxxxxxx)'
         MVC   W_TL_OPERANDS+21(8),W_ZONED
         B     AC_RETURN
AC3_SHIFT      EQU  *
         MVC   0(3,R2),W_TL_INSTR_HEX+5
         B     AC_RETURN
AC4_FORMAT_SI  EQU *
         LA    R2,W_TL_OPERANDS
         MVC   0(3,R2),W_TL_INSTR_HEX+5     displacement
         MVI   3(R2),C'('
         LA    R2,4(,R2)
         LA    R4,W_TL_INSTR_HEX+4
         BAS   R10,XC_FORMAT_REGISTER       base register
         MVC   0(7,R2),=C'),X''  '''
         MVC   4(2,R2),W_TL_INSTR_HEX+2     immediate operand
         B     AC_RETURN
AC5_FORMAT_SS  EQU *
         LA    R2,W_TL_OPERANDS
         MVC   0(3,R2),W_TL_INSTR_HEX+5     displacement 1
         MVI   3(R2),C'('
         LA    R2,4(,R2)
         CLI   W_TL_INSTR_HEX,C'F'          "decimal" instr ?
         BE    AC5_PACKED
         MVC   0(2,R2),W_TL_INSTR_HEX+2     length
         MVI   2(R2),C','
         LA    R2,3(,R2)
         LA    R4,W_TL_INSTR_HEX+4
         BAS   R10,XC_FORMAT_REGISTER       base reg 1
         MVC   0(2,R2),=C'),'
         LA    R2,2(,R2)
         MVC   0(3,R2),W_TL_INSTR_HEX+9     displacement 2
         MVI   3(R2),C'('
         LA    R2,4(,R2)
         LA    R4,W_TL_INSTR_HEX+8
         BAS   R10,XC_FORMAT_REGISTER       base reg 2
         MVI   0(R2),C')'
         B     AC_RETURN
AC5_PACKED EQU *
         MVC   0(1,R2),W_TL_INSTR_HEX+2     length 1
         MVI   1(R2),C','
         LA    R2,2(,R2)
         LA    R4,W_TL_INSTR_HEX+4
         BAS   R10,XC_FORMAT_REGISTER       base reg 1
         MVC   0(2,R2),=C'),'
         LA    R2,2(,R2)
         MVC   0(3,R2),W_TL_INSTR_HEX+9     displacement 2
         MVI   3(R2),C'('
         MVC   4(1,R2),W_TL_INSTR_HEX+3     length 2
         MVI   5(R2),C','
         LA    R2,6(,R2)
         LA    R4,W_TL_INSTR_HEX+8
         BAS   R10,XC_FORMAT_REGISTER       base reg 2
         MVI   0(R2),C')'
AC_RETURN EQU  *
         MVC   0(L'W_TL,R1),W_TL
         POPR  R10                          load return address
AC_EXIT  BSM   0,R10                        return to caller
AD_CHECK_REGISTERS EQU *               ==== subroutine ====
         PUSHR R10                          save return address
         LA    R4,EPIEGPR-EPIE(,R7)         r4 --> registers now
         LA    R5,W_REGISTERS               registers previously
         LA    R6,16                        16 times
         LA    R8,W_REGS
         BAS   R10,XA_PUT_LINE
AD_CHECK_REGISTERS_LOOP EQU *
         CLC   0(4,R4),0(R5)                register value changed ?
         BE    AD_NEXT_REGISTER
         BAS   R10,XA_PUT_LINE
         MVC   8(12,R1),0(R8)               "name" of register
         MVC   0(4,R5),0(R4)                save new value
         MVC   W_BINARY(4),0(R4)
         BAS   R10,XB_CONVERT_TO_HEX
         MVC   12(8,R1),W_ZONED
AD_NEXT_REGISTER EQU *
         LA    R4,4(,R4)                    increment pointers
         LA    R5,4(,R5)
         LA    R8,13(,R8)
         BCT   R6,AD_CHECK_REGISTERS_LOOP   do next one ....
         POPR  R10                          load return address
AD_EXIT  BSM   0,R10                        return to caller
XA_PUT_LINE EQU *                      ==== subroutine ====
         LA    R1,*+6
         BSM   0,R1                         into 24 bit addr mode
         PUT   TRACE
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
XA_EXIT  BSM   0,R10                        return to caller
XB_CONVERT_TO_HEX EQU *                ==== subroutine ====
         UNPK  W_ZONED(9),W_BINARY(5)
         NC    W_ZONED(8),=X'0F0F0F0F0F0F0F0F'
         TR    W_ZONED(8),=C'0123456789ABCDEF'
XB_EXIT  BSM   0,R10                        return to caller
XC_FORMAT_REGISTER EQU *               ==== subroutine ====
         CLI   0(R4),C'0'
         BL    XC_TO_DECIMAL
         MVI   0(R2),C'R'                   n -> Rn (n < 10)
         MVC   1(1,R2),0(R4)
         LA    R2,2(,R2)
         B     XC_EXIT
XC_TO_DECIMAL  EQU *                        A -> R10, B-> R11 etc
         MVC   0(2,R2),=C'R1'
         MVC   2(1,R2),0(R4)
         TR    2(1,R2),W_TRANSLATE_TABLE-X'C1'
         LA    R2,3(,R2)
XC_EXIT  BSM   0,R10                        return to caller
W_SAVE_AREA          DC  18F'0'
W_RETURN_ADDRESS     DC  F'0'               mvs return address
W_STACK              DC  6F'0'              stack
W_@START             DC  F'0'               trace start address
W_@0C1_1             DC  F'0'               address of next 0c1 (1)
W_@0C1_2             DC  F'0'               address of next 0c1 (2)
W_@OPCODE_TABLE      DC  F'0'               address of loaded table
W_REGISTERS          DC  16F'0'             traced programs registers
W_SAVE_INSTR_1       DC  H'0'               code at @0c1 (1)
W_SAVE_INSTR_2       DC  H'0'               code at @0c1 (2)
W_BINARY             DC  F'0'
                     DS  CL1
W_TRANSLATE_TABLE    DC  C'012345'
W_BRANCH_INSTR_TABLE DC  C'06',C'R'         bctr  rr
                     DC  C'07',C'R'         bcr   rr
                     DC  C'0B',C'R'         bsm   rr
                     DC  C'45',C'X'         bal   rx
                     DC  C'46',C'X'         bct   rx
                     DC  C'47',C'X'         bc    rx
                     DC  C'86',C'S'         bxh   rs
                     DC  C'87',C'S'         bxle  rs
                     DC  X'FF'
W_ZONED              DC  CL9' '
W_PACKED             DC  D'0'
W_DDNAME             DC  CL8' '             trace ddname
W_MAX_COUNT          DC  PL2'0'             trace maximum
W_AMODE              DC  CL1' '             "current" amode
W_PREV_AMODE         DC  CL1' '             "previous" amode
W_ESPIE_RESET        DC  X'581000004100000841F0001C0A6D'
W_TRACE_OPEN         DC  C' '               flag
W_BRANCH_INSTR       DC  C' '               flag
W_TRACE_COUNT        DC  PL3'0'
W_TL                 DS  0CL100             trace output line
W_TL_COUNT           DS  CL4
                     DS  CL4
W_TL_ADDR            DS  CL8
W_TL_OFFSET          DS  CL8
                     DS  CL4
W_TL_INSTR_HEX       DS  CL12
                     DS  CL2
W_TL_MNEMONIC        DS  CL6
W_TL_OPERANDS        DS  CL30
                     DS  CL4
                     DS  CL(100-*+W_TL)
W_REGS   DC    C'R0  xxxxxxxx R1  xxxxxxxx R2  xxxxxxxx R3  xxxxxxxx '
         DC    C'R4  xxxxxxxx R5  xxxxxxxx R6  xxxxxxxx R7  xxxxxxxx '
         DC    C'R8  xxxxxxxx R9  xxxxxxxx R10 xxxxxxxx R11 xxxxxxxx '
         DC    C'R12 xxxxxxxx R13 xxxxxxxx R14 xxxxxxxx R15 xxxxxxxx '
         LTORG
TRACE    DCB DDNAME=TRACE,MACRF=PL,DSORG=PS,LRECL=121
         DCBD   DSORG=PS,DEVD=DA
         IHAEPIE
         @REGS
         CVT   DSECT=YES
         IKJTCB
         IEFTIOT1
         END


MTRACE macro

          MACRO
 &LABEL   MTRACE &P1,&DDNAME=TRACE,&MAX=100
          AIF ('&P1' EQ 'ON').ON
          AIF ('&P1' EQ 'OFF').OFF
          MNOTE 4,'call must be ON or OFF," &P1 " is invalid'
          MEXIT
 .ON      ANOP
 &LABEL   LOAD EP=TRACEASM
          SLL   R0,1
          SRL   R0,1                    0 hi-order bit                                                              ESPIE SET,(R0),(1),PARAM=TRACE_PARM
          ST    R1,TRACE_TOKEN          save token for reset
          DC    H'0'                    first interrupt
          MEXIT
 .OFF     ANOP
 &LABEL   ESPIE RESET,TRACE_TOKEN       cancel our ESPIE environment
          DELETE EP=TRACEASM
          B     TR$&SYSNDX
 TRACE_TOKEN  DC F'0'
 TRACE_PARM   DC A(TRACE_MAX)
              DC A(TRACE_DDNAME)
 TRACE_MAX    DC PL2'&MAX'
 TRACE_DDNAME DC CL8'&DDNAME'
 TR$&SYSNDX   DS 0H
          MEXIT
          MEND


          MACRO
          OPCODE &OP,&MNEMONIC,&FORMAT
          LCLA &OFFSET
 &OFFSET  SETA 0
          AIF  ('&OP' EQ 'DEFINE_TABLE').DEFINE
          AIF  ('&FORMAT' EQ 'RR').RR
          AIF  ('&FORMAT' EQ 'RX').RX
          AIF  ('&FORMAT' EQ 'RS').RS
          AIF  ('&FORMAT' EQ 'SI').SI
          AIF  ('&FORMAT' EQ 'SS').SS
          MNOTE 4,'&FORMAT is invalid'
          MEXIT
 .SS      ANOP
 &OFFSET  SETA &OFFSET+4
 .SI      ANOP
 &OFFSET  SETA &OFFSET+4
 .RS      ANOP
 &OFFSET  SETA &OFFSET+4
 .RX      ANOP
 &OFFSET  SETA &OFFSET+4
 .RR      ANOP
          ORG  START+(X'&OP'*8)
          DC   CL6'&MNEMONIC',AL2(&OFFSET)
          MEXIT
 .DEFINE  ANOP
 START    DC (256*8)X'00'
          MEND


TROPCODE CSECT
         OPCODE DEFINE_TABLE
         OPCODE 05,BALR,RR
         OPCODE 06,BCTR,RR
         OPCODE 07,BCR,RR
         OPCODE 0A,SVC,RR

         ... etc

         OPCODE FC,MP,SS
         OPCODE FD,DP,SS
         END


David Welch (New Zealand)                      c Xephon 1996

