Deleting selected members from a PDS/PDSE


SOURCE FOR THE CLEARPDS PROGRAM

         TITLE 'CLEARPDS - PDS/PDSE HOUSEKEEPING UTILITY'
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CSECT   : CLEARPDS                                                  *
* MODULE  : CLEARPDS                                                  *
* AUTHOR  : ENTERPRISE DATA TECHNOLOGIES                              *
* DESC    : CLEARPDS IS A UTILITY THAT CAN BE USED TO DELETE SELECTED *
*           MEMBERS FROM A PDS OR A PDSE.  THE LIST OF MEMBERS        *
*           TO DELETE IS OBTAINED BY READING THE DIRECTORY FROM ONE   *
*           PDSE AND THEN USING THAT INFORMATION TO PERFORM THE       *
*           DELETES.                                                  *
* MACROS  : $ESAPRO $ESAEPI $ESASTG $CALL DCB DCBE                    *
* DSECTS  : DCBD                                                      *
* CALL(S) : DSABSERV ROUTINE                                          *
* INPUT   : DATASET ASSOCIATED WITH THE PDSQSAM DD                    *
* OUTPUT  : DATASET ASSOCIATED WITH THE PDSBPAM DD                    *
*           MESSAGES DATASET                                          *
* PLIST   : NONE                                                      *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
CLEARPDS $ESAPRO R12,AM=31,RM=24
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* OPEN THE MESSAGES DATASET. ISSUE A WTO IF WE CAN'T DO IT            *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         OPEN  (MESSAGES,(OUTPUT)),MODE=31
         USING IHADCB,R1               TELL THE ASSEMBLER
         LA    R1,MESSAGES             GET @(DCB WE JUST OPENED)
         TM    DCBOFLGS,DCBOFOPN       Q. OPEN SUCCESSFUL?
         BNO   NO_MSGS                 A. NO, EXIT ROUTINE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* LOAD DSABSERV INTO VIRTUAL STORAGE AND SAVE THE ENTRY POINT ADDRESS.*
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         LOAD  EP=DSABSERV,ERRET=LOAD_ERR
         B     LOAD_OK                 LOAD SUCCESSFUL, CONTINUE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* LOAD OF DSABSERV FAILED.  ISSUE MESSAGE AND EXIT THE ROUTINE.       *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
LOAD_ERR DS    0H
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE BLANK OUT REMAINDER
         MVC   O_LINE(LINE_91L),LINE_91  MOVE IN THE MESSAGE
         PUT   MESSAGES,O_LINE
         MVC   RET_CODE,CC010          SET THE RETURN CODE
         B     EXITPROG                EXIT THE PROGRAM
LOAD_OK  DS    0H
         ST    R0,@DSAB
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CALL THE DSABSERV ROUTINE.  WE WILL PASS A SET OF TRIPLETS TO THE   *
* ROUTINE. EACH TRIPLET CONSISTS OF THE FOLLOWING:                    *
*          ADDRESS(HALFWORD FOR THE LENGTH OF THE DATASET NAME)       *
*          ADDRESS(8 BYTE ARE WITH THE DDNAME WE ARE INTERESTED IN)   *
*          ADDRESS(44 BYTE AREA FOR THE RETURNED DATASET NAME         *
*                  WILL CONTAIN 44 ASTERISKS IF DSABSERV WAS NOT ABLE *
*                  TO OBTAIN THE DATASET NAME.)                       *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
*   CALL THE DSABSERV ROUTINE TO OBTAIN THE DATASET NAMES
         $CALL @DSAB,(QSAM_L,QSAMPDS,QSAM_DSN,BPAM_L,BPAMPDS,BPAM_DSN),+
               VL,BM=BASSM,MF=(E,PLIST)
*   OPEN THE PDSBSAM DATASET TO PROCESS THE DIRECTORY
         OPEN  (PSDCB,(INPUT)),MODE=31
         LA    R1,PSDCB                GET @(DCB WE JUST OPENED)
         TM    DCBOFLGS,DCBOFOPN       Q. OPEN SUCCESSFUL?
         BO    MSG_1                   A. YES, PROCESS THE DIRECTORY
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE BLANK OUT REMAINDER
         MVC   O_LINE(LINE_90L),LINE_90  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_90L     GET TARGET ADDRESS
         LA    R15,QSAM_DSN            POINT AT THE DATASET NAME
         LH    R1,QSAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         PUT   MESSAGES,O_LINE
MSG_1    DS    0H                      READ A DIRECTORY BLOCK
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE BLANK OUT REMAINDER
         MVC   O_LINE(LINE_1L),LINE_1  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_1L      GET TARGET ADDRESS
         LA    R15,QSAM_DSN            POINT AT THE DATASET NAME
         LH    R1,QSAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         PUT   MESSAGES,O_LINE
         XR    R9,R9                   CLEAR REG 9
         LA    R10,MEM_LIST            GET @(DIRECTORY SAVE AREA)
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* PROCESS THE DIRECTORY.  REGISTER 9 WILL BE USED TO COUNT THE NUMBER *
* OF DIRECTORY ENTRIES.  REGISTER 10 POINTS TO THE SAVE AREA WHERE WE *
* ARE SAVING THE DIRECTORY NAMES.                                     *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
READDIR  DS    0H                      READ A DIRECTORY BLOCK
         GET   PSDCB,DIRBLOCK
         LH    R2,FREEBYTE             GET NUMBER OF USED BYTES
         LA    R5,DIRBLOCK+2           GET STARTING ADDRESS
         AR    R2,R5                   REG 2 WILL HOLD ADDRESS IN
         S     R2,FULL8                DIRBLOCK WE DON'T WANT TO PASS
PROCBLK  DS    0H
         CLC   LASTNTRY,0(R5)          IS THIS LAST ENTRY ?
         BE    PDSEOF                  YES, CLOSE FILE AS PS
         MVC   0(8,R10),0(R5)          SAVE THE ENTRY NAME
         LA    R10,8(,R10)             INCREMENT POINTER TO SAVE AREA
         LA    R9,1(,R9)               INCREMENT NUMBER OF ENTRIES
         XR    R8,R8                   CLEAR REG 8
         IC    R8,11(R5)               GET THE USER DATA BYTE
         N     R8,FULL31               ISOLATE NUMBER OF HALFWORDS
         SLL   R8,1                    GET THE NUMBER OF BYTES
         LA    R5,12(,R5)              INCREMENT PAST FIXED DATA
         AR    R5,R8                   NOW ADD USER DATA
         CR    R5,R2                   CAN WE GO ANY FURTHER
         BNH   PROCBLK                 GO PROCESS NEXT ENTRY
         B     READDIR                 GO GET ANOTHER BLOCK
PDSEOF   DS    0H                      CLOSE THE FILE IN PS FORM
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE BLANK OUT REMAINDER
         MVC   O_LINE(LINE_2L),LINE_2  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_2L      GET TARGET ADDRESS
         LA    R15,QSAM_DSN            POINT AT THE DATASET NAME
         LH    R1,QSAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         CVD   R9,DUBLWORK             CONVERT TO DECIMAL
         UNPK  O_LINE+1(6),DUBLWORK+4(4) NOW UNPACK IT
         OI    O_LINE+6,X'F0'          FIX THE SIGN ON THE LAST BYTE
         PUT   MESSAGES,O_LINE
         CLOSE (PSDCB),MODE=31
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE BLANK OUT REMAINDER
         MVC   O_LINE(LINE_3L),LINE_3  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_3L      GET TARGET ADDRESS
         LA    R15,QSAM_DSN            POINT AT THE DATASET NAME
         LH    R1,QSAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         PUT   MESSAGES,O_LINE
         OPEN  (PDSDCB,(OUTPUT)),MODE=31
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE   BLANK OUT REMAINDER
         MVC   O_LINE(LINE_4L),LINE_4  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_4L      GET TARGET ADDRESS
         LA    R15,BPAM_DSN            POINT AT THE DATASET NAME
         LH    R1,BPAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         PUT   MESSAGES,O_LINE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* PERFORM THE DELETE PROCESS.  REGISTER NINE IS USED AS COUNTER IN A  *
* BCTR LOOP.  REGISTER 10 STILL POINTS AT THE MEMBER NAMES.  REGISTER *
* 8 IS USED TO DECREMENT THE VALUE IN REGISTER 10.  WE DO THIS SO     *
* THAT WE COME THROUGH THE LIST OF NAMES IN REVERSE ORDER.   AFTER    *
* EACH MEMBER IS OPERATED ON, WE ANALYSE THE RETURN CODE AND DISPLAY  *
* THE APPROPRIATE MESSAGE.                                            *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         L     R8,NEG8                 PLACE NEGATIVE 8 IN REG 8
         LA    R10,0(R8,R10)           ADJUST REGISTER 10
STOWLOOP DS    0H
         STOW  PDSDCB,(R10),D
         C     R15,CC000               Q. STOW COMPLETE SUCCESSFULLY
         BNE   TROUBLE                 A. NO, ANALYSE THE PROBLEM
         LA    R14,O_LINE              GET DESTINATION ADDRESS
         LA    R15,LINE_5              GET SOURCE ADDRESS
         LA    R7,LINE_5L              GET THE LENGTH
         B     BCT_R9                  BRANCH TO COMMON CODE
TROUBLE  DS    0H
         C     R15,RET_CODE            Q. COMPARE TO CURRENT RC
         BNH   NO_CHANG                A. NO NEED TO CHANGE RET_CODE
         ST    R15,RET_CODE            MOVE IN NEW HIGH RETURN CODE
NO_CHANG DS    0H
         C     R15,CC018               Q. CHECK FOR HIGH KNOWN CODE
         BNH   ANAL_COD                A. GO ANALYSE R15 AND R0
         MVC   O_LINE,RXX_XX           MOVE IN THE ERROR MESSAGE
         MVC   O_LINE+1(8),0(R10)      GET MEMBER NAME WE WERE DOING
         PUT   MESSAGES,O_LINE
         B     EXITPROG                EXIT THE ROUTINE
ANAL_COD DS    0H
         C     R15,CC008               Q. CHECK THE RETURN CODE
         BNE   NEXT_1                  A. NOT RC8, BRANCH
         LA    R14,O_LINE              GET DESTINATION ADDRESS
         LA    R15,R08_00              GET SOURCE ADDRESS
         LA    R7,R08_00_L             GET THE LENGTH
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_1   DS    0H
         C     R15,CC010               Q. CHECK THE RETURN CODE
         BNE   NEXT_2                  A. NOT RC10, BRANCH
         C     R0,CC001                Q. REASON CODE 001
         BNE   NEXT_11                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_01           MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_11  DS    0H
         C     R0,CC004                Q. REASON CODE 004
         BNE   NEXT_12                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_04           MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_12  DS    0H
         C     R0,CC737                Q. REASON CODE 737
         BNE   NEXT_13                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_737          MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_13  DS    0H
         C     R0,CCB37                Q. REASON CODE B37
         BNE   NEXT_14                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_B37          MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_14  DS    0H
         C     R0,CCD37                Q. REASON CODE D37
         BNE   NEXT_15                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_D37          MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_15  DS    0H
         C     R0,CCE37                Q. REASON CODE E37
         BNE   NEXT_16                 A. NO, CHECK NEXT CODE
         MVC   O_LINE,R10_E37          MOVE IN ERROR MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_16  DS    0H
         MVC   O_LINE,R10_XX           MOVE IN MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_2   DS    0H
         C     R15,CC014               Q. RETURN CODE 14
         BNE   NEXT_3                  A. NO CHECK NEXT CODE
         MVC   O_LINE,R14_00           MOVE IN MESSAGE
         B     BCT_R9                  BRANCH TO COMMON CODE
NEXT_3   DS    0H
         MVC   O_LINE,R18_00           MOVE IN MESSAGE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* BUILD THE OUTPUT LINE FOR THE MESSAGES DATASET.                     *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
BCT_R9   DS    0H
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE   BLANK OUT REMAINDER
         BCTR  R7,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R7,EX_MVC               MOVE IN THE MESSAGE
         LA    R14,O_LINE              GET TARGET ADDRESS
         LA    R14,1(R7,R14)           ADJUST TARGET ADDRESS
         LA    R15,BPAM_DSN            POINT AT THE DATASET NAME
         LH    R1,BPAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         MVC   O_LINE+2(8),0(R10)      MOVE IN MEMBER NAME
         PUT   MESSAGES,O_LINE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* SINCE REGISTER 8 CONTAINS A NEGATIVE VALUE, THE FOLLOWING LA IN-    *
* STRUCTION ACTUALLY DECREMENTS THE CONTENTS OF REGISTER 10.          *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
BCT_R91  DS    0H
         LA    R10,0(R8,R10)           ADJUST POINTER TO NEXT MEMBER
         BCT   R9,STOWLOOP             LOOP TILL ALL MEMBERS DONE
         CLOSE (PDSDCB),MODE=31
         MVI   O_LINE,C' '             PUT BLANK IN BYTE ONE
         MVC   O_LINE+1(L'O_LINE-1),O_LINE   BLANK OUT REMAINDER
         MVC   O_LINE(LINE_6L),LINE_6  MOVE IN THE MESSAGE
         LA    R14,O_LINE+LINE_6L      GET TARGET ADDRESS
         LA    R15,BPAM_DSN            POINT AT THE DATASET NAME
         LH    R1,BPAM_L               GET THE LENGTH
         BCTR  R1,0                    DECREMENT THE LENGTH FOR MOVE
         EX    R1,EX_MVC               MOVE IN THE DATASET NAME
         PUT   MESSAGES,O_LINE
EXITPROG DS    0H
         CLOSE (MESSAGES),MODE=31
NO_MSGS  DS    0H
         $ESAEPI RET_CODE              GET THE RETURN CODE
         TITLE 'CLEARPDS - LITERALS AND OTHER SYMBOLS'
#MEMBERS EQU   10000                   ALLOW FOR PDS WITH 10000 MEMBERS
LASTNTRY DS    0D                      ALIGN IT
         DC    8X'FF'                  USED TO TEST DIRECTORY BLOCK
QSAMPDS  DC    CL8'PDSQSAM'            USED BY THE GETDSAB CALL
BPAMPDS  DC    CL8'PDSBPAM'            USED BY THE GETDSAB CALL
CC000    DC    X'00000000'             USED FOR RETURN CODE CHECKING
CC001    DC    X'00000001'             USED FOR RETURN CODE CHECKING
CC004    DC    X'00000004'             USED FOR RETURN CODE CHECKING
CC008    DC    X'00000008'             USED FOR RETURN CODE CHECKING
CC010    DC    X'00000010'             USED FOR RETURN CODE CHECKING
CC014    DC    X'00000014'             USED FOR RETURN CODE CHECKING
CC018    DC    X'00000018'             USED FOR RETURN CODE CHECKING
CC737    DC    X'00000737'             USED FOR RETURN CODE CHECKING
CCB37    DC    X'00000B37'             USED FOR RETURN CODE CHECKING
CCD37    DC    X'00000D37'             USED FOR RETURN CODE CHECKING
CCE37    DC    X'00000E37'             USED FOR RETURN CODE CHECKING
NEG8     DC    F'-8'
FULL8    DC    F'8'
FULL31   DC    F'31'
FULL1000 DC    F'1000'
EX_MVC   MVC   0(*-*,R14),0(R15)       TARGET OF AN EXECUTE
*  MESSAGES
LINE_1   DC    C'1READING DIRECTORY INFORMATION FROM DATASET '
LINE_1L  EQU   *-LINE_1                LET ASSEMBLER COMPUTE LENGTH
LINE_2   DC    C' XXXXXX DIRECTORY ENTRIES READ FROM '
LINE_2L  EQU   *-LINE_2                LET ASSEMBLER COMPUTE LENGTH
LINE_3   DC    C' DIRECTORY READ OPERATION COMPLETE, CLOSING '
LINE_3L  EQU   *-LINE_3                LET ASSEMBLER COMPUTE LENGTH
LINE_4   DC    C' BEGINNING MEMBER DELETE OPERATION ON '
LINE_4L  EQU   *-LINE_4                LET ASSEMBLER COMPUTE LENGTH
LINE_5   DC    C' (12345678) RETURN CODE 000, REASON CODE 000, MEMBER W+
               AS DELETED FROM '
LINE_5L  EQU   *-LINE_5                LET ASSEMBLER COMPUTE LENGTH
LINE_6   DC    C' DELETE OPERATIONS COMPLETE ON '
LINE_6L  EQU   *-LINE_6                LET ASSEMBLER COMPUTE LENGTH
LINE_90  DC    C'1ERROR ENCOUNTERED TRYING TO OPEN '
LINE_90L EQU   *-LINE_90               LET ASSEMBLER COMPUTE LENGTH
LINE_91  DC    C'1UNABLE TO LOCATE THE GETDSAB ROUTINE. ABORTING EXECUT+
               ION OF CLEARPDS PROGRAM.'
LINE_91L EQU   *-LINE_91               LET ASSEMBLER COMPUTE LENGTH
R08_00   DC    C' (12345678) RETURN CODE 008, REASON CODE 000, MEMBER W+
               AS NOT FOUND IN '
R08_00_L EQU   *-R08_00                LET ASSEMBLER COMPUTE LENGTH
R10_01   DC    C' (12345678) RETURN CODE 010, REASON CODE 001, PERMANEN+
               T I/O ERROR DETECTED ON '
R10_01_L EQU   *-R10_01                LET ASSEMBLER COMPUTE LENGTH
R10_04   DC    C' (12345678) RETURN CODE 010, REASON CODE 004, ERROR WR+
               ITING DATA IN SYSTEM BUFFERS FOR '
R10_04_L EQU   *-R10_04                LET ASSEMBLER COMPUTE LENGTH
R10_737  DC    C' (12345678) RETURN CODE 010, REASON CODE 737, ERROR TR+
               YING TO READ OR WRITE VTOC FOR '
R10_737L EQU   *-R10_737               LET ASSEMBLER COMPUTE LENGTH
R10_B37  DC    C' (12345678) RETURN CODE 010, REASON CODE B37, SYSTEM W+
               AS UNABLE TO UPDATE VTOC FOR '
R10_B37L EQU   *-R10_B37               LET ASSEMBLER COMPUTE LENGTH
R10_D37  DC    C' (12345678) RETURN CODE 010, REASON CODE D37, NO SECON+
               DARY SPACE OR DADSM ERROR FOR '
R10_D37L EQU   *-R10_D37               LET ASSEMBLER COMPUTE LENGTH
R10_E37  DC    C' (12345678) RETURN CODE 010, REASON CODE E37, NO SECON+
               DARY SPACE OR DADSM ERROR FOR '
R10_E37L EQU   *-R10_E37               LET ASSEMBLER COMPUTE LENGTH
R14_00   DC    C' (12345678) RETURN CODE 014, REASON CODE 000, SPECIFIE+
               D DCB NOT OPEN, OR DEB ERROR FOR '
R14_00_L EQU   *-R14_00                LET ASSEMBLER COMPUTE LENGTH
R18_00   DC    C' (12345678) RETURN CODE 018, REASON CODE 000, INSUFFIC+
               IENT VIRTUAL STORAGE FOR STOW ON '
R18_00_L EQU   *-R18_00                LET ASSEMBLER COMPUTE LENGTH
RXX_XX   DC    C' (12345678) RETURN CODE 018, REASON CODE 000, INSUFFIC+
               IENT VIRTUAL STORAGE FOR STOW ON '
RXX_XX_L EQU   *-RXX_XX                LET ASSEMBLER COMPUTE LENGTH
R10_XX   DC    CL133'          UNEXPECTED REASON CODE OCCURRED DURING S+
               TOW OPERATION WITH RC=16'
         TITLE 'CLEARPDS - MAP OUT THE DCB AND DCBE CONTROL BLOCKS'
*                                      DCB EXTENSIONS
DCBE_1   DCBE  RMODE31=BUFF
DCBE_2   DCBE  RMODE31=BUFF
DCBE_3   DCBE  RMODE31=BUFF
*                                      DCB FOR THE PDS DIRECTORY
PSDCB    DCB   DSORG=PS,DDNAME=PDSQSAM,EODAD=PDSEOF,RECFM=U,           +
               BLKSIZE=256,MACRF=(GM),DEVD=DA,DCBE=DCBE_1
*                                      DCB FOR THE PDS WE ARE GOING
*                                      TO BE CLEARING MEMBERS FROM
PDSDCB   DCB   DSORG=PO,DDNAME=PDSBPAM,MACRF=(W),DEVD=DA,DCBE=DCBE_2
*                                      DCB FOR THE MESSAGES FILE
MESSAGES DCB   DSORG=PS,DDNAME=MSGS,MACRF=(PM),DEVD=DA,DCBE=DCBE_3
         TITLE 'CLEARPDS - MAP OUT THE DYNAMIC STORAGE AREA'
         $ESASTG
DUBLWORK DS    D                       DOUBLEWORD WORK AREA
O_LINE   DS    XL133                   OUTPUT LINE
PLIST    DS    6A                      PLIST FOR DSABSERV
QSAM_L   DS    H                       LENGTH OF DATASET NAME
BPAM_L   DS    H                       LENGTH OF DATASET NAME
QSAM_DSN DS    XL44                    DATASET NAME RETURNED BY DSAB
BPAM_DSN DS    XL44                    DATASET NAME RETURNED BY DSAB
@DSAB    DS    A                       RESERVE SOME SPACE
RET_CODE DS    F                       RETURN CODE FIELD
DIRBLOCK DS    0F                      DIRECTORY BUFFER
FREEBYTE DS    BL2                     BYTE COUNT FOR BLOCK
         DS    CL254                   DEFINE SPACE FOR REMAINDER OF
*                                      THE DIRECTORY BLOCK
MEM_LIST DS    (#MEMBERS)D             SPACE FOR DIRECTORY ENTRIES
         DCBD  DSORG=(QS)
         END   CLEARPDS                TELL ASM WHERE PROGRAM ENDS


SOURCE FOR THE DSABSERV ROUTINE

         TITLE 'DSABSERV - ACCESS DATASET JFCB INFORMATION'
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CSECT   : DSABSERV                                                  *
* MODULE  : DSABSERV                                                  *
* AUTHOR  : ENTERPRISE DATA TECHNOLOGIES                              *
* DESC    : DSABSERV IS A CALLABLE ROUTINE THAT CAN BE USED TO OBTAIN *
*           THE NAME OF THE DATASET THAT IS ASSOCIATED WITH A DDNAME  *
*           IN THE CURRENT STEP.  THE ROUTINE DOES NOT ESTABLISH A    *
*           RECOVERY ENVIRONMENT, SO IT WILL PERCOLATE IF IT ABENDS.  *
* MACROS  : $ESAPRO $ESAEPI $ESASTG GETDSAB SWAREQ                    *
* DSECTS  : IHADSAB CVT IEFJESCT IEFTIOT1 IEFJFCBN IEFZB505           *
* INPUT   : NONE                                                      *
* OUTPUT  : NONE                                                      *
* PLIST   : R1 POINTS TO A STANDARD PARAMETER LIST                    *
*           R1+X'00'  ADDRESS OF HALFWORD FOR DATASET NAME LENGTH     *
*           R1+X'04'  ADDRESS OF DDNAME                               *
*           R1+X'08'  ADDRESS OF 44 BYTE AREA TO PLACE THE DATASET    *
*                     NAME INTO                                       *
*           THE PLIST IS VARIABLE IN LENGTH.  THE HIGH-ORDER BIT IS   *
*           TURNED ON IN THE LAST ADDRESS IN THE LIST.  THIS ALLOWS   *
*           THE ROUTINE TO DETERMINE HOW MANY ARGUMENTS ARE IN THE    *
*           PLIST.                                                    *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
DSABSERV $ESAPRO R12,RM=ANY,AM=31
         USING ZB505,R9                LET THE ASSEMBLER KNOW
         LR    R8,R1                   PICK UP POINTER FROM CALLER
         LTR   R8,R8                   Q. DID WE GET SOME PARMS
         BNZ   GOT_PARM                A. YES, CALLER PASSED SOMETHING
         MVC   RET_CODE,RC016          SET IN A RETURN CODE
         B     EXITPROG                EXIT THE ROUTINE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* BUILD THE TRANSLATE TABLE.  IT IS USED TO DETERMINE THE LENGTH OF   *
* THE DATASET NAME.  ONLY SIGNIFICANT CHARACTER IS THE SPACE X'40'.   *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
GOT_PARM DS    0H
         MVI   TRANTAB+C' ',C' '       PUT SPACE IN XLATE TABLE
NXT_PARM DS    0H
         LM    R3,R5,0(R8)             PICK UP ADDRESSES FROM CALLER
*                                      R3 NOW HAS @(DSNAME LENGTH)
*                                      R4 NOW HAS @(DDNAME)
*                                      R5 NOW HAS @(DSNAME)
         XC    EPA_AREA,EPA_AREA       ENSURE AREA IS CLEARED
         LA    R9,EPA_AREA             GET @(EPA AREA)
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* SET THE DSNAME LENGTH TO THE MAXIMUM POSSIBLE, AND PRIME THE DSNAME *
* FIELD WITH ASTERISKS.  IT WILL BE UP TO THE CALLER TO CHECK THE     *
* CONTENTS OF THE DSNAME FIELD TO SEE WHAT IT CONTAINS.               *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         MVC   0(2,R3),HALF44          SET MAX DSNAME LENGTH
         MVI   0(R5),C'*'              DUMMY OUT FIRST BYTE OF THE
*                                      DATASET NAME FIELD
         MVC   1(43,R5),0(R5)          DUMMY OUT THE REMAINDER OF
*                                      THE DATASET NAME FIELD
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* UTILIZE THE GETDSAB SERVICE TO GET THE ADDRESS OF THE DATASET       *
* ASSOCIATION BLOCK.  FROM THE DSAB, WE PICK UP THE POINTER TO THE    *
* TIOT ENTRY.  FROM THE TIOT ENTRY, WE PICK UP THE SVA FOR THE JFCB.  *
* THEN WE USE THE SWAREQ SERVICE TO GET THE ADDRESS OF THE JFCB, AND  *
* FROM THERE WE PICK UP THE DATASET NAME.                             *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         GETDSAB DDNAME=(R4),DSABPTR=PTRDSAB,RETCODE=DSAB_RET,         +
               RSNCODE=DSAB_RSN,MF=(E,DYN_DSAB)
         CLC   DSAB_RET,RC000          Q. DO WE HAVE THE DSAB
         BNE   NXT_NTRY                A. ENCOUNTERED AN ERROR
         L     R4,PTRDSAB              GET @(DSAB)
         L     R4,DSABTIOT-DSAB(,R4)   GET @(TIOT ENTRY)
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* FROM THE TIOT ENTRY FOR THE DDNAME IN QUESTION WE PICK UP A TOKEN   *
* THAT WILL BE PLACED INTO THE EPA(EXTENDED PARAMETER AREA) THAT WILL *
* BE PASSED TO SWAREQ.                                                *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
         MVC   SWVA(L'TIOEJFCB),TIOEJFCB-TIOENTRY(R4)
         LA    R4,EPA_AREA             GET @(EXTENDED PARAMETER AREA)
         ST    R4,SVA_PTR              SET UP PLIST FOR CALL TO SWAREQ
         SWAREQ FCODE=RL,EPA=SVA_PTR,UNAUTH=YES,MF=(E,DYN_SWA)
         C     R15,RC000               Q. CLEAN FROM SWAREQ
         BNE   NXT_NTRY                A. ENCOUNTERED AN ERROR
         L     R1,SWBLKPTR             GET @(JFCB)
         MVC   0(L'JFCBDSNM,R5),JFCBDSNM-JFCBDSCT(R1) MOVE THE DSNAME
*                                      TO THE CALLER'S AREA
         TRT   0(L'JFCBDSNM,R5),TRANTAB SCAN FOR THE FIRST BLANK
*                                      IN THE DATASET NAME
         BC    2,NXT_NTRY              NO BLANKS ENCOUNTERED
         BC    4,CALC_LEN              BLANK FOUND, CALCULATE LENGTH
*                                      SHOULD NEVER FALL THROUGH, BUT
*                                      JUST IN CASE WE DO
         MVC   RET_CODE,RC004          SET A RETURN CODE TO INDICATE
         B     EXITPROG                LEAVE THE ROUTINE
*                                      AN ERROR WAS ENCOUNTERED
CALC_LEN DS    0H
         SR    R1,R5                   CALCULATE DSNAME LENGTH - 1
         STH   R1,0(R3)                PUT IT IN CALLER'S STORAGE
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CONTINUE UNTIL WE HAVE PROCESSED THE LAST TRIPLET OF ADDRESSES.     *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
NXT_NTRY DS    0H
         TM    8(R8),HIBITON           Q. LAST SET OF ARGUMENTS
         BO    EXITPROG                A. YES, ALL DONE
         LA    R8,12(,R8)              ADJUST REGISTER 2
         B     NXT_PARM                GO PROCESS NEXT SET
EXITPROG DS    0H
         $ESAEPI RET_CODE              GET THE RETURN CODE
HIBITON  EQU   X'80'                   USED FOR ADDRESS TESTING
RC000    DC    F'0'                    USED FOR RETURN CODE SETTING
RC004    DC    F'4'                    USED FOR RETURN CODE SETTING
RC016    DC    F'16'                   USED FOR RETURN CODE SETTING
HALF44   DC    H'44'                   MAX DATASET NAME LENGTH
         LTORG
         TITLE 'DSABSERV - MAP OUT THE DYNAMIC STORAGE AREA'
         $ESASTG
DSAB_RET DS    F                       RETURN CODE FROM GETDSAB
DSAB_RSN DS    F                       REASON CODE FROM GETDSAB
PTRDSAB  DS    F                       USED BY THE GETDSAB CALL
RET_CODE DS    F                       RETURN CODE FIELD
SVA_PTR  DS    F                       POINTER TO THE EPA
EPA_AREA DS    XL16                    SPACE FOR THE SWAREQ EPA
TRANTAB  DS    256XL1                  SET ASIDE SPACE FOR THE
*                                      TRANSLATE TABLE
* SET ASIDE SPACE FOR THE GETDSAB MACRO
         GETDSAB MF=(L,DYN_DSAB)
* SET ASIDE SPACE FOR THE SWAREQ MACRO
DYN_SWA  SWAREQ MF=L
         TITLE 'DSABSERV - MAP OUT THE DSAB CONTROL BLOCK'
         IHADSAB
         TITLE 'DSABSERV - MAP OUT THE CVT CONTROL BLOCK'
         CVT DSECT=YES,LIST=YES
         TITLE 'DSABSERV - MAP OUT THE JESCT CONTROL BLOCK'
         IEFJESCT
         TITLE 'DSABSERV - MAP OUT IEFZB505'
         IEFZB505
         TITLE 'DSABSERV - MAP OUT THE TIOT CONTROL BLOCK'
TIOT     DSECT
         IEFTIOT1
         TITLE 'DSABSERV - MAP OUT THE JFCB CONTROL BLOCK'
JFCBDSCT DSECT
         IEFJFCBN
         END   DSABSERV                TELL ASM WHERE PROGRAM ENDS


SOURCE FOR THE $ESAPRO MACRO

         MACRO
&LABEL   $ESAPRO &AM=31,&RM=ANY,&MODE=P
.**********************************************************************
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  TO USE THIS MACRO, YOU NEED TO
.*       ALSO USE THE $ESASTG MACRO.  THE $ESASTG DEFINES THE SYMBOL
.*       QLENGTH WHICH OCCURS IN THE CODE THAT &ESAPRO GENERATES.
.*       IF YOU DO NOT CODE ANY OPERANDS, THEN REGISTER 12 WILL BE
.*       USED AS THE BASE.  IF YOU CODE MULTIPLE SYMBOLS, THEN THEY
.*       WILL BE USED AS THE BASE REGISTERS.
.*       EXAMPLES:
.*              SECTNAME $ESAPRO          = REG 12 BASE
.*              SECTNAME $ESAPRO 5        = REG 5 BASE
.*              SECTNAME $ESAPRO R10,R11  = REGS 10 AND 11 ARE BASES
.**********************************************************************
*
         LCLA  &AA,&AB,&AC
*
R0       EQU   0
R1       EQU   1
         etc
R15      EQU   15
RF       EQU   15
*
&LABEL   CSECT
&LABEL   AMODE &AM
&LABEL   RMODE &RM
*
         SYSSTATE ASCENV=&MODE         SET THE ENVIRONMENT
*
         B     $$$$EYEC-*(R15)         BRANCH AROUND EYECATCHER
         DC    AL1(($$$$EYEC-*)-1)     EYECATCHER LENGTH
         DC    CL8'&LABEL'             MODULE ID
         DC    CL3' - '
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL3' - '
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         DC    CL3'   '                FILLER
*
$$$$F1SA DC    CL4'F1SA'               USED FOR STACK OPERATIONS
$$$$4096 DC    F'4096'                 USED TO ADJUST BASE REGS
*
$$$$EYEC DS    0H
*
         BAKR  R14,0                   SAVE GPRS AND ARS ON THE STACK
         AIF   (N'&SYSLIST EQ 0).USER12
         LAE   &SYSLIST(1),0(R15,0)    LOAD OUR BASE REG
         USING &LABEL,&SYSLIST(1)      LET THE ASSEMBLER KNOW
         AGO   .GNBASE
.USER12  ANOP
         MNOTE *,'NO BASE REG SPECIFIED, REGISTER 12 USED'
         LAE   R12,0(R15,0)            LOAD OUR BASE REG
         USING &LABEL,R12              LET THE ASSEMBLER KNOW
         AGO   .STGOB
.GNBASE  ANOP
         AIF   (N'&SYSLIST LE 1).STGOB
&AA      SETA  2
&AC      SETA  4096
.GNBASE1 ANOP
*
         AIF   (&AA GT N'&SYSLIST).STGOB
&AB      SETA  &AA-1
         LR    &SYSLIST(&AA),&SYSLIST(&AB) GET INITIAL BASE
         A     &SYSLIST(&AA),$$$$4096      ADJUST NEXT BASE
         USING &LABEL+&AC,&SYSLIST(&AA)    LET THE ASSEMBLER KNOW
&AA      SETA  &AA+1
&AC      SETA  &AC+4096
         AGO   .GNBASE1
.STGOB   ANOP
*
         L     R0,QLENGTH              GET THE DSECT LENGTH
*
         STORAGE OBTAIN,LENGTH=(R0),LOC=(RES,ANY)
*
         LR    R15,R1                  GET @(OBTAINED AREA)
         L     R13,QDSECT              GET DISPLACEMENT INTO AREA
         LA    R13,0(R13,R15)          GET @(OBTAINED AREA)
         LR    R0,R13                  SET REG 0 = REG 13
         L     R1,QLENGTH              GET THE LENGTH OF THE AREA
         XR    R15,R15                 CLEAR REG 5
         MVCL  R0,R14                  INTIALIZE THE AREA
         MVC   4(4,R13),$$$$F1SA       INDICATE STACK USAGE
         USING DSECT,R13               INFORM ASSEMBLER OF BASE
.MEND    ANOP
*
         EREG  R1,R1                   RESTORE REGISTER 1
         MEND


SOURCE FOR THE $ESAEPI MACRO

         MACRO
         $ESAEPI
.**********************************************************************
.*       THIS MACRO WILL PROVIDE EXIT LINKAGE. IT WILL FREE THE
.*       STORAGE AREA THAT WAS ACQUIRED BY THE $ESAPRO MACRO.  YOU
.*       CAN OPTIONALLY PASS IT A RETURN CODE VALUE.  THIS VALUE IS
.*       EITHER THE LABEL OF A FULL WORD IN STORAGE, OR IT IS A REG-
.*       ISTER. AS WITH THE $ESAPRO MACRO, YOU NEED TO USE THE $ESASTG
.*       MACRO.  THE SYMBOL QLENGTH WHICH OCCURS IN THE CODE THAT IS
.*       GENERATED BY THIS MACRO IS DEFINED BY $ESASTG
.*       EXAMPLES:
.*              $ESAEPI          = NO RETURN CODE SPECIFIED
.*              $ESAEPI (R5)     = RETURN CODE IS IN REG 5
.*              $ESAEPI RETCODE  = RETURN CODE IS IN THE FULLWORD AT
.*                                 RETCODE
.**********************************************************************
*
         AIF   (N'&SYSLIST EQ 0).STGFRE
*
         AIF   ('&SYSLIST(1)'(1,1) EQ '(').REGRC
         L     R2,&SYSLIST(1)          GET RETURN CODE VALUE
         AGO   .STGFRE
.REGRC   ANOP
         LR    R2,&SYSLIST(1,1)        GET RETURN CODE VALUE
.STGFRE  ANOP
*
         L     R0,QLENGTH              GET THE DSECT LENGTH
*
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R13)
*
         AIF   (N'&SYSLIST NE 0).SETRC
         XR    R15,R15                 CLEAR THE RETURN CODE
         AGO   .MEND
.SETRC   ANOP
         LR    R15,R2                  SET THE RETURN CODE
.MEND    ANOP
         PR                            RETURN TO CALLER
         MEND


SOURCE FOR THE $ESASTG MACRO

         MACRO
         $ESASTG
.**********************************************************************
.*       THIS MACRO IS USED IN CONJUNCTION WITH THE $ESAEPI AND $ESAPRO
.*       MACROS.  IT PROVIDES A Q TYPE ADDRESS CONSTANT WHICH WILL CON-
.*       TAIN THE LENGTH OF THE DSECT.  A REGISTER SAVE AREA IS 
.*       PROVIDED AS WELL.
.*       EXAMPLES:
.*              $ESASTG
.*      XXX     DC    F          = DEFINE ADDITIONAL STORAGE AREA
.*      YYY     DC    XL255
.*       .       .      .
.*       .       .      .
.*       .       .      .
.**********************************************************************
QDSECT   DC    Q(DSECT)                DEFINE A QCON
QLENGTH  CXD                           LET ASM CALCULATE THE LENGTH
DSECT    DSECT
         DS    18F                     SET ASIDE REGISTER SAVE AREA
         MEND


SOURCE FOR THE $CALL MACRO

         MACRO
&NAME    $CALL &ENTRY,&OPRNDS,&VLPARA,&BM=BALR,&ID=,&MF=I
.**********************************************************************
.* MODIFIED VERSION OF THE IBM SUPPLIED CALL MACRO                    *
.**********************************************************************
         GBLB  &IHBSWA,&IHBSWB
         GBLC  &IHBNO
         LCLC  &GNAME
&IHBNO   SETC  '309'
&GNAME   SETC  'IHB'.'&SYSNDX'
&IHBSWA  SETB  ('&VLPARA' EQ 'VL')
&IHBSWB  SETB  ('&ENTRY' EQ '(15)')
         AIF   ('&VLPARA' NE '' AND '&VLPARA' NE 'VL').ERROR4
         AIF   ('&MF' EQ 'L' AND '&ENTRY' NE '').ERROR1
         AIF   ('&MF' EQ 'L' AND '&ID' NE '').ERROR2
         AIF   ('&MF' NE 'L' AND '&ENTRY' EQ '').ERROR3
&NAME    DS    0H                                ALIGNMENT
         AIF   ('&MF' EQ 'L' ).CONTC
         AIF   (&IHBSWB).CONTCC
.CONTC   AIF   ('&OPRNDS' EQ '' AND                                    X
               ('&MF' EQ 'I' OR '&MF' EQ 'L')).CONTB
.CONTA   IHBOPLTX &ENTRY,&OPRNDS,&NAME,MF=&MF
.CONTB   AIF   ('&MF' EQ 'L').EXIT
         AIF   (&IHBSWB).CONTD
         L     15,&ENTRY                         LOAD 15 WITH ENTRY ADR
.CONTD   AIF   ('&BM' EQ 'BASSM').CONTE
         BALR  14,15                             BRANCH TO ENTRY POINT
         AGO   .CONTF
.CONTE   BASSM 14,15                        BRANCH TO ENTRY POINT
.CONTF   AIF   ('&ID' EQ '').EXIT
         DC    X'4700'                      NOP INSTRUCTION WITH
         DC    AL2(&ID)                     ID IN LAST TWO BYTES
.EXIT    MEXIT
.CONTCC  ANOP
&NAME    DS    0H
         AGO   .CONTC
.ERROR1  IHBERMAC 73,&IHBNO,&ENTRY          ENTRY  W/ MF=L
         MEXIT
.ERROR2  IHBERMAC 74,&IHBNO,&ID             ID W/ MF=L
         MEXIT
.ERROR3  IHBERMAC 26,&IHBNO                 ENTRY SYMBOL MISSING
         MEXIT
.ERROR4  IHBERMAC 1014,THIRD                INVALID THIRD PARM
         MEND


Enterprise Data Technologies (USA)              c Xephon 1996

