CMS enquiry on the status of MVS jobs
PROBLEM
When we were a VM/VSE site 18 months ago all our work was run on a single
processor and programmers were able to use CMS to enquire on the status of their
batch jobs on VSE.  Now we have changed to MVS, it is run native on one
processor and VM is run on a second processor purchased for that purpose.  The
two machines communicate on a channel-to-channel link using JES and RSCS.  The
application work is developed on CMS and submitted to MVS for compilation and
testing.
Inevitably programmers requested the ability to enquire on the status of their
jobs and so we eventually wrote a simple version of the following ENQMVS EXEC,
which executed the £DA command of JES2 and displayed the output from it on the
requesting programmer’s terminal.  However, this only shows that the job is
running and does not show the step currently being executed and so it is not
possible for the programmers to know how far the job has progressed.
When I saw An MVS Display Active (DA) for CICS in the September 1987 issue of
CICS Update it gave me the inspiration and help to see if I could in fact return
the step name and status of the job to CMS as well as the job name.
SOLUTION
I managed to do it by writing an Assembler program that runs as a started task
in MVS and is then ‘modified’ using the MVS MODIFY command (F) with the CMS
machine name of the programmer requesting the information, eg if the started
task is called CMSMON and the requesting CMS machine is CMS4 then the command
that is issued is F CMSMON,CMS4.
The CMS EXEC (which issues the MVS command via RSCS) has four options A, R, P,
and job name, which respectively display information on active jobs, jobs in the
reader waiting to run, output waiting to come back to CMS via RSCS, and
information on a particular job only.  The output as seen on CMS is of the
format shown in Figures 1, 2, and 3.
The Assembler program that is executed in the started task must be link-edited
with the AC=1 attribute and put in an authorised library.  When assembling it,
it is necessary to have SYS1.AMODGEN on the SYSLIB DD chain.
ENQMVS EXEC
   &TRACE
   &OPT = &1
   &IF .&OPT = .? &GOTO -EXPLAIN
   &IF .&OPT NE . &GOTO -USERID
-ASKOPT
   &TYPE Please enter one of the options A, P, R or JOBNAME
   &TYPE or type EXIT to quit
   &READ VARS &OPT
   &IF .&OPT = .EXIT &GOTO -END
   &IF .&OPT = . &GOTO -ASKOPT
-USERID
   USERID
   &IF &RETCODE = 0 &GOTO -ALRITE
   &GOTO -USERIDER
-ALRITE
   &READ VARS * &USERID
   &IF .&OPT NE .A &IF .&OPT NE .R &COMM = &CONCAT OF £D' &OPT '
   &IF .&OPT = .A &COMM = &CONCAT OF F &BLANK CMSMON, &USERID
   &IF .&OPT = .P &COMM = £DN,ALL,R=N2
   &IF .&OPT = .R &COMM = £DN,Q=XEQ
   CP SMSG RSCS CMD MVS1 &COMM
   &GOTO -END
-USERIDER
   &RCSAVE = &RETCODE
   CLRSCRN
   &TYPE
   &TYPE
   &TYPE ** ERROR USING MODULE 'USERID' IN ENQMVS
   &TYPE ** RETURN CODE = &RCSAVE -- INFORM SYS PROGS
   &TYPE
   &EXIT
-EXPLAIN
   &BEGTYPE -END
    ENQMVS will display information concerning MVS depending on option.

    Options :-
                 A         Display jobs currently running
                 P         Display jobs in waiting to return to CMS
                 R         Display jobs in MVS reader
                 jobname   Display the status of job 'jobname'
    e.g.    If you had sent a job with jobname SYS00100
            then to enquire on its status enter :-

            ENQMVS LHW001

            When doing ENQMVS R the following message is always displayed
            even if there are no jobs in the reader :-
         £HASP646 nn PERCENT SPOOL UTILIZATION
-END
   &EXIT
UT039 ASSEMBLE (PROGRAM EXECUTED BY STARTED TASK)
UT039    TITLE 'INFORM CMS USER OF ACTIVE MVS JOBS'
UT039    START
         SAVE  (14,12)
         BALR  12,0
         USING *,R12
         ST    R13,SAVEREGS+4          POINT NEW TO OLD
         LA    R15,SAVEREGS            UPDATE SAVEREGS POINTER
         ST    R15,8(,R13)             POINT OLD TO NEW
         LR    R13,R15
* SET UP TO ALLOW MODIFY COMMANDS
SETMOD   EXTRACT EXTR1,FIELDS=COMM     GET ADDRESS OF COMM AREA
         L     R2,EXTR1                MOVE TO R2
         MVC   MODECB1,0(R2)           SET UP MODECB
         LA    R2,4(,R2)               GET ADDRESS OF CIB
         ST    R2,AACIB                REMEMBER WHERE WE'VE PUT IT
* CLEAR CIB
CLRCIB   L     R2,AACIB                GET ADDR OF ADDR OF CIB
         ICM   R3,15,0(R2)             GET ADDR OF CIB
         BZ    CIBCLR                  IF ZERO THEN CHAIN CLEAR
         QEDIT ORIGIN=(R2),BLOCK=(R3)  CLEAR FIRST BLOCK ON CHAIN
         B     CLRCIB                  LOOK AGAIN
CIBCLR   L     R2,AACIB                GET ADDR OF ADDR OF CIB
         QEDIT ORIGIN=(R2),CIBCTR=1    ENABLE MODIFY COMMAND
NEXTCMD  MVI   REPLY,C' '              CLEAR OUR REPLY AREA
         MVC   REPLY+1(L'REPLY-1),REPLY
         NI    FLAG1,255-MODIFY        CLEAR MODIFY FLAG
         L     R2,AACIB
         L     R3,0(,R2)
         QEDIT ORIGIN=(R2),BLOCK=(R3)  REMOVE OLD CIB & ENABLE MODIFY
* WAIT FOR A MODIFY COMMAND
WAITMOD  WAIT  1,ECBLIST=MODECB        WAIT FOR MODIFY CMD
         OI    FLAG1,MODIFY            SET MODIFY FLAG
         L     R2,AACIB                SAVE ADDR OF ADDR OF CIB TO R2
         L     R2,0(,R2)               POINT TO CIB
         LH    R1,14(,R2)              GET LENGTH OF DATA
         BCTR  R1,R0                   REDUCE BY 1 FOR THE MACHINE
         EX    R1,MVEREP               MVC REPLY (*-*),16(R2)
         CLC   REPLY,=C'END     '      IS IT THE END ?
         BE    ENDMOD                  YES
         L     R6,CVTOFF               NO - POINT TO CVT
         USING CVT,R6
         L     R6,CVTASVT              ADDR OF ASVT
         DROP  R6
         USING ASVT,R6
         L     R2,ASVTMAXU             HOW MANY ASIDS?
         LA    R6,ASVTENTY             POINT TO FIRST ONE
         MVI   FLAG2,C'N'              RESET ACTIVE JOBS FLAG
         MVI   FLAG3,C'N'              RESET HEADING SENT FLAG
GETASID  TM    0(R6),ASVTAVAI          IS ASID ENTRY AVAILABLE?
         BO    NXTASID                 NO - LOOK FOR NEXT ONE
         L     R8,0(R6)                ADDRESS OF ASCB
         LA    R8,0(R8)                CLEAR THE TOP BYTE
         LTR   R8,R8                   IS ASCB POINTER ZERO?
         BZ    NXTASID                 YES, - LOOK FOR NEXT POINTER
         USING ASCB,R8
         L     R9,ASCBOUCB             ADDRESS OF OUCB
         LA    R9,0(R9)                CLEAR TOP BYTE
         LTR   R9,R9                   IS THERE A OUCB ?
         BZ    NXTASID                 NO - LOOK FOR NEXT ENTRY
         USING OUCB,R9
         TM    OUCBSFL,OUCBINV         IS OUCB VALID ?
         BO    NXTASID                 NO - LOOK FOR NEXT ENTRY
         MVC   FMCT,ASCBFMCT           FRAME COUNT
         L     R5,ASCBJBNI             JOBNAME ADDRESS
         LA    R5,0(R5)                CLEAR TOP BYTE
         LTR   R5,R5                   IS IT ZERO?
         BZ    NXTASID                 YES, NOT A JOB SO GET NEXT ASID
         SH    R5,=H'8'                POINT TO START OF CSCB
         USING CHAIN,R5
         CLI   FLAG3,C'Y'              HAVE WE SENT A HEADING ALREADY?
         BE    SETDAT                  YES - SKIP
         MVI   FLAG3,C'Y'              SET HEADING FLAG
         MVC   CMDCMS(8),REPLY         MOVE IN CMS MACHINE TO SEND TO
         MVC   CMDJOB(9),=C'JOBNAME  ' SET UP HEADING
         MVC   CMDSP1(4),=C'    '
         MVC   CMDSTEP(9),=C'STEPNAME '
         MVC   CMDSTOR(9),=C'STORAGE  '
         MVC   CMDSTA(13),=C'STATUS       '
         MVC   COMACTN(117),CMD
         MODESET KEY=ZERO,MODE=SUP     SET SUPERVISOR MODE
         SLR   R0,R0
         MGCR  COMAREA                 SEND HEADING
         MODESET KEY=NZERO,MODE=PROB   RESET PROBLEM MODE
SETDAT   MVC   CMDJOB(8),CHKEY         JOBNAME
         MVC   CMDSTEP(8),CHSTEP       STEPNAME
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB        IN TRANSITION?
         BNZ   INTRANS
         TM    ASCBRCTF,ASCBOUT        SWAPPED OUT?
         BO    SWAPOUT
         TM    OUCBSFL,OUCBNSW         NON-SWAPPABLE?
         BO    NONSWAP
         MVC   CMDSTA(13),=C'SWAPPED-IN   '
         B     FRMCNT
NONSWAP  MVC   CMDSTA(13),=C'NON-SWAPPABLE'
         B     FRMCNT
INTRANS  MVC   CMDSTA(13),=C'IN-TRANSITION'
         B     FRMCNT
SWAPOUT  MVC   CMDSTA(13),=C'SWAPPED-OUT  '
FRMCNT   LH    R0,FMCT                 PAGE FRAME COUNT
         SLL   R0,2                    PUT IN K BYTES
         CVD   R0,FMCTD                GET IN DECIMAL
         L     R0,FMCTD+4              SHIFT OF SIGN
         SRL   R0,4
         ST    R0,FMCTD+4
         MVC   FMCTE,=X'4020202120D2'  MASK FOR EDIT
         ED    FMCTE,FMCTD+6           EDIT REAL STORAGE FIGURE
         MVC   CMDSTOR(9),=C'         '
         MVC   CMDSTOR(6),FMCTE        MOVE TO MSG LINE
         MVC   CMDCMS(8),REPLY         MOVE CMS M/C NAME TO MSG LINE
         MVC   COMACTN(117),CMD        MOVE WHOLE CMD
         MODESET KEY=ZERO,MODE=SUP     SET SUPERVISOR MODE
         SLR   R0,R0                   FOR SUPVSR MODE
         MGCR  COMAREA                 ISSUE THE CMD
         MODESET KEY=NZERO,MODE=PROB   SET PROBLEM MODE
         MVI   FLAG2,C'Y'              FLAG TO SAY ACTIVE JOB FOUND
NXTASID  LA    R6,4(R6)                NEXT ASCB
         BCT   R2,GETASID              PROCESS NEXT ASCB
         CLI   FLAG2,C'Y'              ANY ACTIVE JOBS?
         BE    SETMOD                  YES - WAIT FOR NEXT MODIFY
         MVC   CMDCMS(8),REPLY         MOVE IN CMS MACHINE TO REPLY TO
         MVC   CMDJOB(9),=C' NO JOBS ' SET UP 'NO JOBS ACTIVE' LINE
         MVC   CMDSP1(4),=C'ACTI'
         MVC   CMDSTEP(9),=C'VE       '
         MVC   CMDSTOR(9),=C'         '
         MVC   CMDSTA(13),=C'             '
         MVC   COMACTN(117),CMD
         MODESET KEY=ZERO,MODE=SUP     AND SEND TO CMS MACHINE
         SLR   R0,R0
         MGCR  COMAREA
         MODESET KEY=NZERO,MODE=PROB
         B     SETMOD
ENDMOD   L     R13,R4(,R13)            RESET REGS
         RETURN (14,12),RC=0           AND END PROGRAM
SAVEREGS DS    18F
FMCT     DS    H
FMCTD    DS    D
FMCTE    DS    CL6
CMD      DC    C'£N,D=N2;MSG RSCS1 '
CMDCMS   DC    CL9' '
         DC    CL4' '
CMDJOB   DC    CL9' '
CMDSP1   DC    CL4' '
CMDSTEP  DC    CL9' '
         DC    CL4' '
CMDSTOR  DC    CL9' '
         DC    CL4' '
CMDSTA   DC    CL13' '
         DC    CL31' '
COMAREA  DS    0F
         DC    H'111'
         DC    X'0000'
COMACTN  DC    CL117' '
FLAG1    DC    X'00'                   MODIFY FLAG
FLAG2    DC    C'N'                    JOBS ACTIVE FLAG
FLAG3    DC    C'N'                    SENT HEADING FLAG
EXTR1    DS    F                       WORK AREA
AACIB    DS    F                       BECOMES A(A(CIB))
ECB1     DC    F'0'
MODECB   DS    0F                      ECB ADDRESS LIST
MODECB1  DC    F'0'                    BECOMES A(MODIFY ECB)
         DC    X'80',AL3(ECB1)         A(ECB1) + END OF LIST
MVEREP   MVC   REPLY(*-*),16(R2)       EXECUTED MOVE
REPLY    DS    CL8
         LTORG
MODIFY   EQU   X'10'                   ON IF MODIFY USED ON LAST CMMD
CVTOFF   EQU   X'4C'
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         IEECHAIN
         IRAOUCB
         END


Tony Ledger
Senior Systems Programmer
Mercantile & General Reinsurance Co PLC © Xephon 1988



