A SAS/MXG-based DASD report

The following code was developed in an MVS/ESA 4.1, SAS
6.06, and SAS/MXG 9.9 environment. Although levels of
MXG and MVS are probably irrelevant, some features of SAS
Version 6 are used that do not appear in SAS Version 5 - a
competent SAS programmer should be able to remove or re-
create these features as required. SAS Version 6 specifics are
noted in the example.


INTRODUCTION

A frequent problem in performance reporting and monitoring is
in manipulating and managing the vast amounts of data
produced by SMF, RMF, and third-party product reporters.
Various data reduction and reporting tools have evolved over
the years to tackle this problem, perhaps one of the most
widely installed being Barry Merrill's SAS/MXG product. The
book(s) and software provide a basic set of SAS routines that
reformat raw SMF data into SAS files (databases). Sets of
reports and trending macros are also provided.


REPORT DETAILS

The following example demonstrates the power of SAS in data
manipulation and presentation. The report shows an overview
of the entire DASD configuration of a system. Volumes are
grouped by logical control unit and the performance of a
volume during each recording interval (as set by RMF) is
represented by a single character. The performance measure
chosen would typically be an activity level or response time
(variables IORATE and AVGRSPMS respectively), but it can
be any measure you wish to use (so long as it is available in the
SAS/MXG database).

Potential problem volumes and 'hot spots' can be seen at a
glance without having to wade through pages of RMF reports.
The general pattern of activity across the day also becomes
more obvious aiding understanding of workloads. I have
always found this report style invaluable as part of an
installation's daily health checks allowing in-depth analysis to
be quickly focused onto problem areas.

The report reads the TYPE74 file created by SAS/MXG (it
could be adapted to use the Legent product MICS - another
SAS-based system). The report covers all hours in a day and a
fresh report is produced for each day. The report has been
designed for RMF intervals of 15 minutes or multiples thereof,
aligned on the hour. Other intervals could easily be used once
the report features are understood.

A sample of a typical report print is shown in Figure 1 - I have
truncated the print at column 80 for the purposes of A4
printing, but you can get the idea.

A general purpose print procedure exists in SAS (PROC
PRINT) but in this instance it is not flexible enough to print the
data in the format required so a user-designed print program is used.


SAS NOTES

The SAS language is forgiving about style. Keywords and
variable names are not case-sensitive. I have used upper case
for SAS reserved words, lower case for variables, and mixed
case for SAS file names and labels in the example. Layout is a
matter of taste. Comments are enclosed in /* */ delimiters. All
SAS statements terminate with a semi-colon ';' - this is most
important.


THE REPORT CODE

//------------ JOBCARD DETAILS -----------------------------
//       EXEC SAS6
//---- your installation SAS procedure ----
//*
//PDB   DD DSN=Your SAS database with TYPE74 data in,DISP=SHR
//SYSIN DD *
  /* -------------------------------------------------------------- */
  /*  The FORMAT procedure is used to map characters to number      */
  /*   ranges. Hence 0 - 14 become '.', 15 - 25 become '-', etc.    */
  /*  Smaller ranges or other characters can be used as desired.    */
  /* -------------------------------------------------------------- */
PROC FORMAT ;
  VALUE Plotfmt
     0-<15  ='.'
    15-<25  ='-'
    25-<35  ='='
    35-<50  ='*'
    50-<99  ='#'
   other    ='@' ;
RUN;
  /* -------------------------------------------------------------- */
  /* Read in the data from the ddname PDB                           */
  /* -------------------------------------------------------------- */
DATA Type74;
 SET PDB.Type74;
 FORMAT date date8. time time5.;
 LENGTH plotchar œ1  plotname plotdesc œ40 ;
  IF device = '3380'
  OR device = '3390' ;      /* <--- Select for dasd device types */
  date = DATEPART(startime) ;
  time = TIMEPART(startime) ;
  plotchar = PUT(avgrspms,plotfmt.) ;
  /* ----------------------------------------------------- */
  /* Extract and output variable name used for this report */
  /*   ( Version 5 users need to adapt this section )      */
  /* ----------------------------------------------------- */
  CALL VNAME(avgrspms,plotname);     /* <--SAS V6 facility */
  CALL SYMPUT('plotname',plotname);
  CALL LABEL(avgrspms,plotdesc);     /* <--SAS V6 facility */
  CALL SYMPUT('plotdesc',plotdesc);
RUN;
  /* -------------------------------------------------------------- */
  /*  The SUMMARY procedure is used to determine the average RMF    */
  /*   interval in effect as it can vary in duration.               */
  /* -------------------------------------------------------------- */
PROC SUMMARY NWAY DATA=Type74;
 CLASS date;
   VAR duratm;
OUTPUT OUT=Avg(KEEP=date avgdur)
  MEAN=avgdur ;
RUN;
  /* -------------------------------------------------------------- */
  /* Use the average duration determined above to determine how     */
  /*  many print positions after midnight each entry should appear. */
  /* Each entry is also checked to eliminate any obviously 'bad'    */
  /*  data records - details of the bad records are put in the job  */
  /*  log for investigation.                                        */
  /* -------------------------------------------------------------- */
DATA Slice74;
 MERGE Type74 Avg;
    BY date;
 mins = ROUND(time   / 60 ) ;                /* round to minutes */
 intv = ROUND(avgdur / 60 ) ;                /* round to minutes */
 IF intv = 0  THEN DO;
    PUT 'Entry failed reasonableness test'
        date= time= avgdur= mins= intv= volser= ;
    DELETE;                              /* delete entry */
 END;
 pos  = ROUND(mins / intv);   /* convert time to clicks past 00:00 */
 IF pos > 100 THEN DO;             /* 100 = quarter hours in a day */
    PUT 'Entry failed position test ' pos= time= duratm= volser=;
    DELETE;                                        /* delete entry */
 END;
RUN;
  /* -------------------------------------------------------------- */
  /* Sort the data ready for output                                 */
  /* -------------------------------------------------------------- */
PROC SORT DATA=Slice74 OUT=Sort74;
  BY date lcu devnr volser time;
RUN;
  /* -------------------------------------------------------------- */
  /* Set up a default title line                                    */
  /* -------------------------------------------------------------- */
TITLE1 'Overview of DASD activity by LCU';
  /* -------------------------------------------------------------- */
  /* Produce the report                                             */
  /* -------------------------------------------------------------- */
DATA _NULL_ ;
 SET Sort74 END=Last ;
  BY date lcu devnr volser ;
 RETAIN Line Col Off 0 ;
 IF _N_ = 1 THEN DO;      /* on first entry only */
    Off = 20 ;            /* set up offset from left side of page */
 END;
 FILE PRINT N=PAGESIZE LINESLEFT=Remain ;
 IF FIRST.date THEN DO;    /* New page if new date */
   LINK Head ;      /* Subroutine call */
 END;
 IF FIRST.lcu  THEN DO;    /* New block for new lcu */
   LINK NewLcu ;    /* Subroutine call */
 END;
 IF FIRST.devnr THEN DO;   /* New line for new volume */
   IF remain < 5  THEN DO; /* near bottom of page ? */
      LINK Head ;          /* new page required */
      LINK Newlcu ;        /* repeat headings  */
   END;
   line = line + 1 ;
   PUT #line @(col+1) lcu @(col+4) devnr @(col+9) volser @ ;
 END;
 PUT #line @(pos+off) plotchar ;   /* Build up current line */
 IF LAST.devnr THEN DO;
   PUT ;                    /* release current line */
 END;
 IF last THEN DO;   /* No more records to process - tidy up */
   LINK Foot ;
   PUT _PAGE_ ;     /* output current page image */
 END;
 RETURN;            /* Go back and get another record */
 /* ================= SUBROUTINES FOLLOW ===================== */
 /* ----------------- Page heading lines --------------------- */
 Head:                                  /* page header routine */
    IF line > 0 THEN DO;                /* existing page? */
      LINK Foot ;                       /* put in footnote */
      PUT _PAGE_ ;         /* output page */
    END;
    line = 1;  /* reset counter */
    col  = 2;  /* reset counter */
    PUT #line @col "VARIABLE  Plotted    = &PLOTNAME";
    line=line+1;
    PUT #LINE @COL "VARIABLE Description = &PLOTDESC";
    LINK Markers ;
 RETURN;
 /* ----------------- Page footing lines --------------------- */
 Foot:                /* skip to end of page and put in footnote */
    DO UNTIL(remain = 1) ;
      line = line + 1 ;
      PUT #line " ";
    END;
    line=line+1 ;
    PUT #line @col "Report : TYPE74" ;
 RETURN;
 /* ----------------- Time marker lines ---------------------- */
 Markers:
    line=line+1;
    PUT #line
        @col "DATE = " date
        @off 33*'-' ' Hour and Quarter Hour Markers ' 33*'-' ;
    line=line+1;
    PUT #line
        @off "                                        1   1   1   1"
              "   1   1   1   1   1   1   2   2   2   2   2";
    line=line+1;
    PUT #line
        @col "LCU DEV  VOLSER"
        @off "0...1...2...3...4...5...6...7...8...9...0...1...2...3"
              "...4...5...6...7...8...9...0...1...2...3...4";
 RETURN;
 /* ----------------- New control unit ----------------------- */
 Newlcu:                              /* new Logical unit */
    IF remain < 4 THEN LINK Head ;   /* new page required? */
    line=line+1;
    PUT #line " " ;
 RETURN;
RUN;


G R Baxter
Service Analyst (UK)                                          c Xephon 1993

