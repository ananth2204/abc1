SMS ACS STORCLAS exit

IGDACSSC is the SMS ACS storage class exit. It is an LPA-
resident module that, if present, is called after completion of
the ACS STORCLAS routine. The exit is documented in the
DFP Customization manual.

If possible, use of this exit should be avoided as, while it is
very easy to change and implement a new STORCLAS routine,
it is not so easy to refresh the exit. However, in some complex
environments it may be necessary to make use of the exit, for
example you may need to access some information that is not
available to you in the STORCLAS read-only variables (eg
time of day, system SMF-id) or you may need to search a large
table.

The exit has the choice of:

o      Doing nothing (accepting the ACS-assigned STORCLAS name).

o      Assigning a storage class name (overriding the ACS-
      assigned name).

o      Re-invoking the ACS STORCLAS routine.

For example, the ACS routine assigns a STORCLAS name of,
say, $UNDEF in cases where it cannot determine the correct
name to use. The exit then uses this as an indicator that it is
required to assign the STORCLAS name. Some sample code
for this might be:

         CLC  ACEROSCV(6),=C'$UNDEF'
         BNE  RETURN
         logic to determine STORCLAS name
         MVC  ACERWNCS(4),=F'1'
         MVC  ACERWVLN(2),half-word-length
         MVC  ACERWVAL(n),storclas-name
         return to SMS

A more complicated case is to re-invoke the ACS STORCLAS
routine. This is done after modifying one or more of the read-
only variables (otherwise there would not be much point). The
following example illustrates this approach.

The variable &ACSENVIR is set to $EXIT so that the ACS
routine can detect that it is being re-invoked by the exit. The
exit assigns the SMF-id of the system to the variable
&def_dataclas (which we have decided not to use as its real
value) and re-drives the ACS routine. Effectively we have
created our own variable.

IGDACSSC  CSECT
IGDACSSC  AMODE 31            must run in 31-bit mode
IGDACSSC  RMODE ANY
          USING *,R15
          B     START
          DC    C'IGDACSSC'
          DC    C'&SYSDATE'
          DROP  R15
START     STM   R14,R12,12(R13)
          L     R8,0(,R1)     r8 --> igdacspm (parm list)
          USING ACSPMD,R8
          LR    R2,R13        save addr of caller's savearea
          L     R13,ACSPWORK  r13 --> our work area
          USING WORK,R13
          ST    R2,W_SAVE+4   standard linkage
          ST    R13,8(,R2)    .. of save areas
          LR    R12,R15       base register
          USING IGDACSSC,R12
          L     R2,ACSPERO    r2 --> read-only variables
          USING ACERO,R2
          L     R3,ACSPERW    r3 --> read/write variables
          USING ACERW,R3
          L     R4,CVTPTR     r4 --> cvt
          USING CVT,R4
          L     R4,CVTSMCA    r4 --> smca (smf)
          USING SMCABASE,R4
          CLC   SMCASMCA(4),=C'SMCA'  eyecatcher ok ?
          BNE   RETURN        no - don't do anything
          MVC   ACEROENV,=CL8'$EXIT'  set &acsenvir
*         set &def_dataclas to smf-id
          MVC   ACERODDL,=H'4'
          MVC   ACERODDV(4),SMCASID
          LA    R4,ACSPACSP   r4 --> parm list
          ST    R4,W_ACS
          LA    R1,W_ACS      r1 --> @ of parms
          L     R15,ACSPACS
          BALR  R14,R15       call ACS routine
RETURN    L     R13,4(,R13)   r13 --> caller's savearea
          LM    R14,R12,12(R13)   restore registers
          XR    R15,R15       return code
          BR    R14           return to SMS
          LTORG
          REGS
WORK      DSECT
W_SAVE    DS    18F
W_ACS     DS    F
          IGDACSPM
          IGDACERO
          IGDACERW
          CVT DSECT=YES
          IEESMCA
          END

The DSECTs IGDACSPM etc are in SYS1.MODGEN.

The advantage of using this approach is that you can extend the
capabilities of your ACS routines by providing additional
variables (ie information) to base your decisions on. In addition
you retain all the advantages of ACS routines (eg easy to
change etc).

Some sample ACS code for using the above exit might look
like this:
      IF (&ACSENVIR = '$EXIT') THEN
      SELECT     /* &def_dataclas is SMF-id */
        WHEN(&DEF_DATACLAS = 'PSYS' && &DSTYPE = 'TEMP')
             SET &STORCLAS = 'WORKP'
        WHEN(&DEF_DATACLAS = 'TSYS' && &DSTYPE = 'TEMP')
             SET &STORCLAS = 'WORKT'
               etc
      END


David Welch (New Zealand)                               c Xephon 1993

