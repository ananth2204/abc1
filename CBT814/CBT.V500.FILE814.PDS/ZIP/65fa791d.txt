Using the ALTLIB command

THE PROBLEM

In the 'olden days' prior to MVS/ESA and TSO/E Version
2.1.0, there was no way of making CLIST or REXX libraries
available to the user except by using the ALLOCATE
command to re-allocate all the SYSPROC or SYSEXEC
concatenation or to use some sort of locally-written
concatenation command.  These techniques are limited since
they won't work if your datasets happen to be open.  There is
also a performance degradation when re-allocating all your
SYSPROC or SYSEXEC if you have many datasets.

THE SOLUTION

The ALTLIB command was introduced in TSO/E Version
2.1.0 and is only available when running TSO/E on an
MVS/ESA (MVS 3.1.0 or higher) system.  It can be used to set
up CLIST and EXEC libraries for applications or users without
disrupting all your standard allocations.  The command is
conceptually similar to the LIBDEF service of ISPF but is more
flexible.

The concept of the ALTLIB command is a three-tiered search
order:

1     User level (SYSUEXEC and SYSUPROC DDNAMEs)

2     Application level

3     System level (SYSEXEC and SYSPROC DDNAMEs).

User level

The user level is at the top of the search order.  It is always
searched first.  It is set up by the following sequence of events:

     ALLOC FI(SYSUEXEC) DA('my.rexx.lib') SHR REU
     ALTLIB ACTIVATE USER(EXEC).

The library my.rexx.lib will then be the first library searched.
You can do the same thing for SYSPROC.  It is important to
note that, despite the fact that you allocate to the SYSUEXEC
and SYSUPROC DDNAMEs, it is still necessary to issue the
ALTLIB ACTIVATE command to make it take effect.

Application level

The middle level of the search is the application level.  The
application level can be used as individual applications allocate
their own EXEC and CLIST libraries.  The difference with the
application level definitions is that you do not have to pre-
allocate the datasets to special DDNAMEs as you must for user
and system levels.  You can do so if you wish but it is not
required.  Up to eight levels of application definitions will be
stacked for each of the EXEC and CLIST library types.  If you
already have an application library active and you activate
another level, the previous definition is stacked (de-activated)
until you de-activate the new level.

For example, the following would set up a level that searched
dataset3 and dataset4 and left a level with dataset1 and dataset2
on the stack:

     ALTLIB ACT APPLICATION(EXEC) DA('dateset1' 'dataset2')
     ALTLIB ACT APPLICATION(EXEC) DA('dataset3' 'dataset4')

If you then issued an ALTLIB DEACT
APPLICATION(EXEC) command the top level would be
removed and the dataset1/dataset2 level would be made active
and would thus be searched after the user level if any.

System level

The system level is the last level searched.  The SYSEXEC and
SYSPROC DDNAMEs are searched at the system level.
Depending upon how the REXX IRXTSPRM CSECT was set
up by your TSO/E install and support person, SYSEXEC may
or may not be searched.  By default from IBM,  the SYSEXEC
DD is not searched.  IRXTSPRM must be updated to turn this
support on.  In the following discussion, I will assume this is
done.  The system level is the base level that one would
normally have.  When you log on to the system, TSO/E would
be looking for SYSEXEC and SYSPROC and this would be
your search order initially.


GENERAL NOTES OF INTEREST

Starting over

o     ALTLIB RESET - removes all searches except the system
     level.

o     ALTLIB DEACT USER(*) - removes all user level
definitions.

o     ALTLIB DEACT APPLICATION(*) - removes all
     application level definitions including those that are
     stacked.

o     ALTLIB DEACT ALL - removes all search definitions.

Displaying search orders

The ALTLIB DISPLAY command can be issued at any time to
find your current search order for EXECs and CLISTs.  You
will then receive on your screen a series of messages similar to
this:

     IKJ79322I Current search order (by DDNAME) is:
     IKJ79323I User level EXEC         DDNAME=SYSUEXEC
     IKJ79324I User level CLIST        DDNAME=SYSUPROC
     IKJ79325I Application level EXEC DDNAME=SYS00011
     IKJ79321I             Stacked DDNAME=SYS00009
     IKJ79326I Application level CLIST DDNAME=SYS00001
     IKJ79327I System level EXEC      DDNAME=SYSEXEC
     IKJ79328I System level CLIST     DDNAME=SYSPROC

The only disadvantage that I see in this display is that there are
only DDNAMEs, not dataset names, which I think would be
more useful, especially for the SYSnnnnn-generated
DDNAMEs.

In addition to this visual inspection method, there is support for
reporting this information to a program or EXEC running the
ALTLIB command.  By using the QUIET parameter on
ALTLIB (eg ALTLIB DISP QUIET) a number of ISPF
variables will be created to hold the output of the command.
The variables are created in the ISPF shared pool and contain
the output messages as they would have been displayed on your
screen.  The variables are:

o     IKJADM - this variable represents the number of variables
     containing output for this issuance of the command.

o     IKJADM1 - the text of the command issued.

o     IKJADM2, IKJADM3, etc - output from the command.

It is important to use the value in IKJADM to process messages
in IKJADM2 and so on because these variables are not deleted
if another display results in fewer messages.  For example, the
command above that resulted in eight messages would have
filled IKJADM2 to IKJADM9 with output, IKJADM1 would
be 'ALTLIB DISP QUIET', and IKJADM would be 9.  If you
did an 'ALTLIB RESET' to remove all definitions except for
those at the system level and reissued the 'ALTLIB DISP
QUIET', IKJADM would be 4, IKJADM1 would be the same,
and IKJADM2 to IKJADM4 would contain this command's
output.  However, IKJADM5 to 9 would still exist and contain
output from the previous issuance of 'ALTLIB DISP QUIET'.

Use under ISPF

The ALTLIB processor has been designed to operate by having
definitions associated with the current application.  When using
ISPF, the ALTLIB command is sensitive to which ISPF
application you are in.  This means that your current ALTLIB
definitions are suspended when any SELECT involving
NEWAPPL(xxxx) happens and you are reset to system level
only.  When you exit the application, the previous ALTLIB
definitions are restored.  If you want the definitions to be
carried forward, the PASSLIB operand on the SELECT service
will do this for you in a manner similar to the LIBDEF service.

You can have several levels per application stacked if you so
desire or you can specify COND as an ALTLIB operand to
make sure that you only get one application level EXEC and
CLIST definition per application-id.  If you specify nothing,
UNCOND is the default and it will cause stacking of
definitions within the application.

It is also important to note that the same type of processing
applies to definitions done in native TSO.  When you invoke
ISPF, all your  native TSO definitions are suspended.  This is
also true even if you specify PASSLIB on an ISPSTART
command to get into ISPF.


CONCLUSIONS

The ALTLIB command is a welcome addition to TSO.  It
seems to operate well and appears to be well and thoughtfully
designed.

Dan Little
Senior Software Analyst
Royal Bank of Canada (Canada)                               c Xephon 1990

