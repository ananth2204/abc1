An automated operations facility

The following system consists of two started tasks: JTIMER and
JTMP.  JTIMER and the subtask JTIMERS allow an MVS system
(JES3 or JES2) to issue MVS commands, to send messages to the
MVS master console, to submit jobs, and to execute CLISTs on
specified times and days.  The CLISTs are not executed by
JTIMER but by the other started task, JTMP.  JTMP requires 912
bytes of CSA (SP 231), where the names of the CLISTs are
written by JTIMER.  JTMP will read the name of that CLIST and
will execute it.  There is also a timer abend routine for the
CLISTs and also an ESTAE exit routine for JTMP in case of an
abnormal end.

Some interesting characteristics of the system are:
¥   The main task JTIMER is a started task that attaches the
subtask JTIMERS.  The main task accepts the following
commands :
         S JTIMER - start
         P JTIMER - stop
         F JTIMER,REFRESH - refresh of JTIMER.
    The concept of the main task can also be used for other
started tasks that have to attach other tasks and also to
respond to operator commands (eg F JTIMER,command).
¥   It includes a facility to perform commands only on workdays.
You can record all the company holidays in a separate
dataset.
¥   It is usable in a JES2 and JES3 environment.  (It has been
written in a MVS/XA JES3 environment.)
¥   It includes a SVC (Supervisor Call) to make it authorised.
This SVC can be omitted , but then you have to link the
program with AC=1 and the program must reside in an
authorised library.
¥   It is possible with JES3 (release 2.2) to send commands to
different CPUs, eg T SYn,command.
¥   JTIMER can do the following things :
    1    Submit jobs (JOB)
    2    Send MVS commands (COM)
    3    Execute CLISTs (CLI)
    4    Send a message to the operator (DIS).
¥   The CLISTs are not executed by JTIMER but by the other
started task JTMP.  JTIMER will write the name of the
CLIST that has to be executed in a table in the CSA (created
by JTMP).  JTMP will read that name and will execute the
specified CLIST.
¥   There is a timer abend routine for CLISTs.  If a CLIST
executes for more than two and a half minutes then the timer
abend routine KILL will stop the CLIST.
¥   There is an ESTAE exit in the case of an abnormal end of
JTMP.  The exit will free the GETMAINed storage of JTMP
in the CSA.


THE MAIN PROGRAM JTIMER

JTIMER    CSECT
JTIMER    AMODE 24
JTIMER    RMODE 24
* THIS PROGRAM WILL SEND COMMANDS AND WRITE-TO-OPERATORS ON SPECIFIED *
* TIMES AND DAYS
* - IT IS STARTED WITH THE PROCEDURE JTIMER
*           S JTIMER,SYS=SYX   X = SYSTEM ID
* - IT IS STOPPED WITH THE COMMAND P JTIMER
* - IF YOU ADD NEW COMMANDS IN THE CONTROL STATEMENT THEN YOU CAN
*   REFRESH JTIMER SO THAT IT WILL READ THE NEW INPUT STATEMENTS
*           COMMAND : F JTIMER,REFRESH
*  INPUT : SYSIN  --> CONTROL STATEMENTS
*          SYSIN1 --> THE HOLIDAYS
*  OUTPUT : TO CONSOLE VIA WTO OR MGCR MACRO
         STM   R14,R12,12(R13) SAVE AREA OF THE CALLER
         LR    12,R15          PUT ENTRY ADDRESS IN BASE REGISTER
         USING JTIMER,R12      R12 = BASE REGISTER FOR ADDRESSABILTY
         ST    R13,SAVEAREA+4  ADDRESS OF SAVE AREA OF THE CALLER
         LR    R2,R13          ADDRESS OF CALLER SAVE AREA IN R2
         LA    R13,SAVEAREA    R13 ADRRESS OF MY SAVE AREA
         ST    R13,8(R2)       PUT ADDRESS IN SAVE AREA OF THE CALLER
* INITIALIZATION PROCESSING - DELETE START CIB
* OBTAIN ADDRESS OF CIB
         LA    R5,ANSRAREA         ADDRESS OF RESPONSE AREA FOR QEDIT
         EXTRACT (R5),FIELDS=COMM  OBTAIN ADDRESS OF THE COMM AREA
         L     R5,ANSRAREA         LOAD ADDRESS OF COMM AREA
         USING COMLIST,R5          ESTABLISH ADDRESSABILITY TO IEZCOM
         L     R3,COMCIBPT         OBTAIN ADDRESS OF CIB
         USING CIBNEXT,R3          ESTABLISH ADDRESSABILITY TO IEZCIB
* MOVE DATA FROM CIB TO WORKING STORAGE
         LH    4,CIBDATLN         OBTAIN LENGTH OF DATA FIELD
         BCTR  R4,0               DECREASE LENGTH BY ONE
         EX    R4,DATAMOVE        MOVE DATA TO WORKING STORAGE
* FREE THE START CIB, IF PRESENT
         CLI   CIBVERB,CIBSTART  FIRST CIB FOR START COMMAND ?
         BNE   SETCOUNT           NO, CONTINUE INITIALIZATION
         QEDIT ORIGIN=COMCIBPT,BLOCK=(3)  YES,FREE IT
         LTR   R15,R15            CHECK RETURN CODE
         BZ    SETCOUNT           IF ZERO THEN THE CIB WAS FREED
         WTO   'START CIB NOT FREED' NOTIFY OPERATOR OF THIS
SETCOUNT QEDIT ORIGIN=COMCIBPT,CIBCTR=1   SET LIMIT TO 1
         B     SUBROUT1           ATTACH SUBTASK
* COMMAND PROCESSING LOOP
WAIT     L     R4,COMECBPT        OBTAIN ADDRESS OF COMMUNICATIONS ECB
         WAIT  ECB=(R4)           WAIT FOR STOP OR MODIFY COMMAND
         L     R3,COMCIBPT        OBTAIN ADDRESS OF CIB
         CLI   CIBVERB,CIBMODFY   IS IT FOR A MODIFY COMMAND ?
         BNE   TSTSTOP            NO, GO TEST FOR STOP
         LH    R4,CIBDATLN        OBTAIN LENGTH OF DATA FIELD
         BCTR  R4,0               DECREASE LENGTH BY ONE
         MVC   DATAAREA(133),BLANKS    INITIALIZE WITH BLANKS
         EX    R4,DATAMOVE        MOVE DATA TO WORKING STORAGE
         CLC   DATAAREA(6),=C'REFRESH' IS IT A REFRESH COMMAND
         BE    SUBROUT                 YES
* FREE THE MODIFY CIB
VERVOLG  QEDIT ORIGIN=COMCIBPT,BLOCK=(3)  FREE THE CIB
         B     WAIT                       WAIT FOR THE NEXT COMMAND
TSTSTOP  CLI   CIBVERB,CIBSTOP           IS IT FOR A STOP COMMAND ?
         BNE   EINDE                     NO STOP THIS TASK
* FREE THE STOP CIB
         QEDIT ORIGIN=COMCIBPT,BLOCK=(3) FREE THE CIB
EINDE    DETACH TCB                   DETACH SUBTASK
         L     R13,SAVEAREA+4          THE WORK IS DONE
         RETURN (14,12),RC=(15)        BYE BYE !
SUBROUT  DETACH TCB                    DETACH OF PREVIOUS SUBTASK
SUBROUT1 ATTACH EP=JTIMERS             ATTACH A NEW SUBTASK
         ST    R1,TCB                  STORE ADDRESS OF THE NEW TCB
         B     VERVOLG
SAVEAREA DC    18F'0'                  SAVEAREA
BLANKS   DC    CL133' '                BLANKS
TCB      DS    F                       ADDRESS OF THE TCB
         DS    0F
DATAAREA DS    133F                    OUR INPUT AREA
ANSRAREA DS    F                       ANSWER AREA
DATAMOVE MVC   DATAAREA(0),CIBDATA     MOVE OF THE INPUT
         DSECT
         IEZCOM
         DSECT
         IEZCIB
         END


THE SUBTASK JTIMERS

JTIMERS  CSECT
         STM   R14,R12,12(R13) SAVE AREA OF THE CALLER
         LR    12,R15          PUT ENTRY ADDRESS IN BASE REGISTER
         USING JTIMERS,R12     R12 = BASE REGISTER FOR ADDRESSABILITY
         ST    R13,SAVEAREA+4  ADDRESS OF SAVE AREA OF THE CALLER
         LR    R2,R13          ADDRESS OF CALLER SAVE AREA IN R2
         LA    R13,SAVEAREA    R13 ADDRESS OF MY SAVE AREA
         ST    R13,8(R2)       PUT ADDRESS IN SAVE AREA OF THE CALLER
BEGIN    MVC   CURDMSK,CURDMSK1    INITIALIZE THE MASKS AND
         MVC   CURDAT,CURDAT1      THE VARIABLES THAT YOU NEED IN THE
         MVC   CURTMSK,CURTMSK1    PROGRAM
         MVC   CURTIM,CURTIM1
         MVC   NXTTMSK,NXTTMSK1
         MVC   NXTTIM,NXTTIM1
         MVC   JULDMSK,JULDMSK1
         MVC   DAYTYPE,WORKDAY     INITIALIZE DAYTYPE WITH WORKDAY
         TIME  DEC                     GET SYSTEM TIME AND DATE
         ST    R0,PTIM                 STORE PACKED TIME
         ST    R1,PDAT                 STORE PACKED DATE
         STCM  R1,4,YEAREND+1          SAVE 'YY' PART OF DATE
         ED    CURTMSK(6),PTIM         UNPACK TIME
         ED    CURDMSK(7),PDAT+1       UNPACK DATE
         SLR   R2,R2                   R2 = 0
         CVB   R3,PDATDBL              R3 = YYDDD IN BINARY
         D     R2,FULL1000             R3 = YY, R2 = DDD
         LR    R4,R3                   KEEP YEARS FOR LATER
         SRL   R4,2                    R4 = R4 / 4
         SLL   R4,2                    R4 = R4 * 4
         CR    R3,R4                   ARE YEARS EQUAL ?
         BNE   NOLEAP                  NO ->
         MVC   YEAREND+2(2),LEAPDAYS   LEAP YEARS HAVE 366 DAYS
NOLEAP   ST    R3,YEARS                SAVE BINARY YEARS
         ST    R2,DAYS                 SAVE BINARY DAYS
         SLR   R2,R2                   R2 = 0
         LA    R3,365                  R3 = 365
         M     R2,YEARS                R3 = YEARS * 365
         M     R4,YEARS                R4 = YEARS IN BINARY
         BCTR  R4,0                    R4 = R4 - 1
         SRL   R4,2                    R4 = R4 / 4
         AR    R3,R4                   R3 = R3 + R4
         A     R3,DAYS                 R3 = R3 + DDD DAYS
         ST    R3,TEMP                 SAVE IT FOR NOW
         SLR   R2,R2                   R2 = 0
         D     R2,FULL7                R3 = INTEGER(R3 / 7)
         M     R2,FULL7                R3 = R3 * 7
         L     R2,TEMP                 GET BACK PREVIOUS VALUE
         SR    R2,R3                   R2 = 0 TO 6 (SUN TO SAT)
         SLL   R2,2                    R2 = R2 * 4
         LA    R2,WKDAYS(R2)           R2 -> TABLE ENTRY
         MVC   WKDAY,0(R2)             EXTRACT WEEKDAY
         CLC   WKDAY,SATURDAY          IS IT A SATURDAY ?
         BE    WEEKEND                 YES ->
         CLC   WKDAY,SUNDAY            IS IT A SUNDAY ?
         BNE   WEEKDAY                 YES ->
WEEKEND  MVC   DAYTYPE,WKEND           SET DAYTYPE TO WEEKEND
* FILE SYSIN1 CONTAINS THE HOLIDAYS
WEEKDAY  MVC   DAGTYPE,WORKDAY         INTIALIZE TO WORKDAY
         OPEN  (SYSIN1,(INPUT))        OPEN FILE WITH THE HAPPY DAYS
LEZEN    GET   SYSIN1,INAREA           READ A RECORD
         CLI   INAREA,C'*'             IS THIS A COMMENT CARD ?
         BE    LEZEN                   YES ->
         CLI   INAREA+2,C'/'           CHECK IF GOOD SEPARATORS
         BNE   LEZEN                   NO READ NEXT DAY
         CLI   INAREA+5,C'/'           THE SAME
         BNE   LEZEN
         BAL   R14,CALTOJUL            CONVERSION DD/MM/YY -> YY.MMM
         CLC   JULDAT,CURDAT           TODAY <-> HAPPY DAY
         BNE   LEZEN                   BAD LUCK
         MVC   DAGTYPE,WKEND           GOOD LUCK
EOFSYS   CLOSE SYSIN1                  CLOSE THE HAPPY FILE
* CALCULATE NEXT INVOCATION OF JTIMERS
* 1 HOUR HENCE OR AT NEXT EVENT WHICHEVER COMES EARLIER
         OI    PTIM+3,X'0F'            GIVE A DECENT SIGN TO PTIM
         SRP   PTIM,64-1,0             SHIFT RIGHT 1 DIGIT POS
         AP    PTIM,HRS1               TIME = TIME + 1 HOUR
         ED    NXTTMSK(7),PTIM         TIME FOR NEXT EXECUTION
         MVC   TIJD(2),NXTTIM+1        PUT THE TIME FOR THE NEXT
         MVC   TIJD+2(2),NXTTIM+4            WAKE-UP OF JTIMERS
         MVC   TIJD+4(4),=C'0100'
         CP    PTIM,DAYEND             DID WE PASS MIDNIGHT
         BNH   SAMEDAY                 NO ->
         MVC   NXTTIM+1(5),TWENTY4     NEXT EXECUTION IS AT MIDNIGHT
         MVC   TIJD(2),MIDNIGHT
         MVC   TIJD+2(2),MIDNIGHT+3    THIS IS FOR THE STIMER MACRO
         MVC   TIJD+4(4),=C'0100'
SAMEDAY  OPEN  (SYSIN,(INPUT))         OPEN INPUT FILE
READ     GET   SYSIN,INAREA            READ A RECORD
         CLI   INAREA,C'*'             IS THIS A COMMENT CARD ?
         BE    READ                    YES ->
         CLC   INAREA(5),WORKD         TO BE DONE ON WORKDAYS ?
         BNE   VERV1                   NO ->
         CLC   DAYTYPE,WKEND           TODAY HAPPY DAY ?
         BE    READ                    YES ->
         CLC   DAGTYPE,WORKDAY         WORKDAY = TODAY ?
         BE    CHKSYSID                YES ->
         B     READ                    NO -->  CONTINUE
VERV1    CLC   INAREA(3),ALL           TO BE DONE ALL DAYS ?
         BE    CHKSYSID                YES ->
         CLC   INAREA(5),DAYTYPE       TO BE DONE ON THIS TYP OF DAY ?
         BE    CHKSYSID                YES ->
         CLC   INAREA(3),WKDAY         TO BE DONE ON THIS WEEKDAY ?
         BE    CHKSYSID                YES ->
         LA    R2,WKDAYS               R2 -> WEEKDAY TABLE
         LA    R4,4                    R4 = LENGTH OF TABLE ENTRIES
         LA    R5,WKDAYS+24            R5 -> END OF WEEKDAY TABLE
DAYSERCH CLC   INAREA(3),0(R2)         TO BE DONE ON ANOTHER DAY ?
         BE    READ                    YES ->
         BXLE  R2,R4,DAYSERCH          INCR, CHECK AND LOOP
         CLC   INAREA(5),WKEND         TO BE DONE ON A WEEKEND ?
         BE    READ                    YES ->
         CLC   INAREA(5),WORKDAY       TO BE DONE IN THE WEEK ?
         BE    READ                    YES ->
         CLC   INAREA(6),CURDAT        TO BE DONE ON THIS JULIAN DATE ?
         BE    CHKSYSID                YES ->
         CLI   INAREA+2,C'/'           VALID DATE SEPARATOR ?
         BNE   DUFFCARD                NO ->
         CLI   INAREA+5,C'/'           VALID DATE SEPARATOR ?
         BNE   DUFFCARD                NO ->
         BAL   R14,CALTOJUL            DDMMYY TO YYDDD CONVERSION
         CLC   JULDAT,CURDAT           TO BE DONE TODAY ?
         BNE   READ                    NO ->
CHKSYSID MVC   COMACTN(7),BLANCO       BLANKS FOR THE COMMAND LINE
         CLC   INSYSID,BLANKS          CHECK IF THERE IS A SYSTEM ID
         BE    CHKTIME                 NO --->
         MVC   ZSYS+3(3),INSYSID       COMMAND FOR SYX
         MVC   COMACTN(7),ZSYS         '*T SYX,' COMMAND FOR SYX
CHKTIME  CLC   INTIME,BLANKS           WAS A TIME SPECIFIED ?
         BE    EXECUTE                 NO -> GO AND DO IT
         CLC   INTIME,CURTIM           WHEN IS THE EVENT FOR ?
         BE    EXECUTE                 NOW -> GO AND DO IT
         BL    READ                    BEFORE -> IGNORE IT
         CLC   INTIME,NXTTIM+1         BEFORE THE NEXT EXECUTION
         BH    READ                    NO -> IGNORE IT
         MVC   NXTTIM+1(5),INTIME      ENSURE WE CATCH HIM
         MVC   TIJD(2),INTIME          PUT THE TIME FOR THE NEXT
         MVC   TIJD+2(2),INTIME+3             WAKE-UP OF JTIMERS
         MVC   TIJD+4(4),=C'0100'
         B     READ                    GET NEXT CARD
EXECUTE  CLC   INTYPE(3),JOB           IS IT A JOB REQUEST ?
         BE    ISSUEJOB                YES ->
         CLC   INTYPE(3),CLIST         IS IT A CLIST REQUEST ?
         BE    XCLIST                  YES ->
         CLC   INTYPE(3),COMMAND       IS IT A COMMAND REQUEST ?
         BE    ISSUECOM                YES ->
         CLC   INTYPE(3),DISPLAY
         BNE   DUFFCARD
         MVC   MESSAGE+8(49),INACTN
MESSAGE  WTO   '....+....1....+....2....+....3....+....4....+....',DESCX
               =(2)
         B     READ
XCLIST   L     R10,CVTPTR              ADDRESS OF THE CVT
         USING CVTMAP,R10              ADDRESSABILITY TO THE CVT
         L     R2,CVTUSER              LOAD R2 = CVTUSER FIELD
         CLC   CVTUSER(4),HEX40  CVTUSER = X'40404040'0R X'00000000'
         BE    READ                    YES -> ZTMP NOT STARTED AND
         CLC   CVTUSER(4),HEX00              THUS THE CLIST CAN NOT BE
         BE    READ                          EXECUTED
         LA    R0,1                    R0 = 1
         SVC   247                     JSCBAUTH BIT ON
         MODESET KEY=ZERO,MODE=SUP     SUPERVISOR AND KEY=ZERO
         L     R5,4(R2)                ADDR OF THE OFFSET IN THE TABLE
* OFFSET 4 OF POINTER OF CVTUSER IS A COUNTER. THIS COUNTER GIVES
* US THE OFFSET OF THE CLIST TABLE IN PRIVATE AREA OF ZHAAL.
* EX . OFFSET = 36
*       BEGINNING OF THE TABLE = OFFSET 0
*    --> 36 + ADDRESS OF THE BEGINNING OF THE TABLE = ADDRESS OF CLIST
*                 -> THIS IS THE PLACE WHERE WE PUT THE NAME OF THE
*                    CLIST THAT HAS TO BE EXECUTED
*                       -> STARTED TASK 'ZTMP' WILL READ THE NAME OF
*                          THIS CLIST AND WILL EXECUTE IT
LOOPIE   LR    R3,R5              R5 = R3
         A     R3,=F'9'           ADD 9 TO THE OFFSET ADDRESS
         C     R3,F899            THE TABLE IS 900 BYTES LONG
         BL    VV1                NOT THE END ->
         SR    R3,R3              YES -> POSITION TO THE BEGINNING
VV1      CS    R5,R3,4(R2)        CHANGE THE POINTER
         BC    4,LOOPIE           IN THE MEANTIME CHANGED ?
         L     R6,0(R2)           ADDRESS OF THE BEGINNING OF TABLE
         AR    R6,R5              OFFSET + BEGIN TABLE = ENTRY ADDRESS
         MVC   0(1,R6),=X'AA'     MOVE X'AA' TO THE FIRST BYTE
         MVC   1(8,R6),INACTN     MOVE NAME OF THE CLIST
         MODESET KEY=NZERO,MODE=PROB   BACK TO PROBLEM STATE
         SR    R0,R0              R0 = 0
         SVC   247                CLEAR THE JSCBAUTH FIELD
         B     READ               GET THE NEXT COMMAND
ISSUEJOB MVC   COMACTN+7(12),INJOB    INITIALIZE COMMAND AREA
         MVC   COMACTN+19(57),INACTN  MOVE THE JOBNAME
         B     NEXT01
ISSUECOM MVC   COMACTN+7(57),INACTN   MOVE THE COMMAND
NEXTO1   LA    R0,1                   R0 = 1
         SVC   247                    PUT THE JSCBAUTH BIT ON SO THAT
         MODESET KEY=ZERO,MODE=SUP    WE CAN USE THE MODESET MACRO
         LA    R0,1                   R0 = ID OF THE MASTER CONSOLE
         MGCR  COMAREA                ISSUE THE COMMAND
         MODESET KEY=NZERO,MODE=PROB  BACK TO PROBLEM STATE
         XR    R0,R0                  R0 = 0
         SVC   247                    CLEAR THE JSCBAUTH BIT
         B     READ                   BRANCH TO READ
EOF      CLOSE SYSIN                  CLOSE SYSIN DATASET
         STIMER WAIT,GMT=TIJD         WAIT FOR THE NEXT EVENT
         B     BEGIN                  BRANCH TO THE BEGIN
EINDE    L     R13,SAVEAREA+4         END OF SUBROUTINE
         RETURN (14,12),RC=(15)
DUFFCARD WTO   'JTIMER : INVALID INPUT DETECTED - CARDS:'
         MVC   DUFFMSG+8(54),INAREA
DUFFMSG  WTO   '....+....1....+....2....+....3....+....4....+....5....'
         B     READ
CALTOJUL PACK  DAY,INDATE(2)               EXTRACT DAY PORTION
         PACK  MONTH,INDATE+3(2)           EXTRACT MONTH PORTION
         PACK  YEAR,INDATE+6(2)            EXTRACT YEAR PORTION
         CVB   R5,MONTHDBL                 R5 = MONTH IN BINARY
         BCTR  R5,0                        R5 = R5 - 1
         SLL   R5,1                        R5 = R5 * 2
         LH    R2,TABLE(R5)                EXTRACT CUMULATIVE DAYS
         CVB   R3,YEARDBL                  R3 = YEAR IN BINARY
         LR    R5,R3                       R5 = YEAR IN BINARY
         SRL   R3,2                        R3 = R3 / 4
         SLL   R3,2                        R3 = R3 * 4
         CR    R3,R5                       WAS IT A LEAP YEAR ?
         BNE   MNTHREDY                    NO ->
         CP    MONTH,PACK2                 IS IT PAST FEBRUARY ?
         BNH   MNTHREDY                    NO ->
         LA    R2,1(R2)                    ADD 1 FOR THE 29TH
MNTHREDY CVB   R3,DAYDBL                   R3 = DAY IN BINARY
         AR    R2,R3                       R2 = TOTAL DAYS
         M     R4,FULL1000                 R5 = YEAR * 1000
         AR    R5,R2                       R5 = R5 + DAYS
         CVD   R5,DOUBLE                   CONVERT DATE TO PACKED
         MVC   JULDATF(7),JULDMSK          MOVE EDIT MASK TO FIELD
         ED    JULDATF(7),DOUBLE+5         FORMAT INTO CHAR FIELD
         BR    R14                         RETURN TO CALLER
SAVEAREA DC    18F'0'                      SAVE AREA
CURDMSK1 DC    CL1'0'                     FILL CHARACTER
CURDAT1  DC    XL6'21204B202020'          CURRENT DATE
CURTMSK1 DC    CL1'0'                     FILL CHARACTER
CURTIM1  DC    XL5'21204B2020'            CURRENT TIME
NXTTMSK1 DC    CL1'0'                     FILL CHARACTER
NXTTIM1  DC    XL6'2120204B2020'          TIME OF NEXT EXECUTION
JULDMSK1 DC    XL7'F021204B202020'        JULIAN DATE EDIT MASK
HEX40    DC    XL4'40404040'              CONSTANT
HEX00    DC    XL4'00000000'              CONSTANT
F899     DC    F'899'                     CONSTANT
CLIST    DC    CL3'CLI'                   CONSTANT
DUMMY    DS    0D                         DUMMY VARIABLE
TIJD     DS    1D                         TIME VARIABLE
FULL7    DC    F'7'                       CONSTANT
FULL1000 DC    F'1000'                    CONSTANT
PACK2    DC    PL2'2'                     CONSTANT
HRS1     DC    PL4'010000'                ONE HOUR
HRS24    DC    PL4'240000'                24 HOURS
DAYEND   DC    PL4'235959'                THE END OF THE DAY
YEAREND  DC    PL4'365'                   THE END OF THE YEAR
LEAPDAYS DC    PL2'366'                   LEAP YEARS
CURDMSK  DC    CL1'0'                     FILL CHARACTER
CURDAT   DC    XL6'21204B202020'          CURRENT DATE
CURTMSK  DC    CL1'0'                     FILL CHARACTER
CURTIM   DC    XL5'21204B2020'            CURRENT TIHE (HH.MM)
NXTTMSK  DC    CL1'0'                     FILL CHARACTER
NXTTIM   DC    XL6'2120204B2020'          TIME OF NEXT EXECUTION
JULDMSK  DC    XL7'F021204B202020'        JULIAN DATE EDIT MASK
JULDATF  DS    XL1                        FILL CHARACTER
JULDAT   DS    XL6                        JULIAN DATE
TABLE    DC    H'000',H'031',H'059',H'090',H'120',H'151'
         DC    H'181',H'212',H'243',H'273',H'304',H'334'
WKDAYS   DC    C'SUN MON TUE WED THU FRI SAT'  WEEKDAYS
ALL      DC    CL3'ALL'                    CONSTANT
TWENTY4  DC    CL5'24.00'                  CONSTANT
MIDNIGHT DC    CL5'00.00'                  CONSTANT
BLANKS   DC    CL5'     '                  CONSTANT
DISPLAY  DC    CL3'DIS'                    CONSTANT
COMMAND  DC    CL3'COM'                    CONSTANT
JOB      DC    CL3'JOB'                    CONSTANT
INJOB    DC    CL12'S JJOB,NAAM='          CONSTANT
SATURDAY DC    CL3'SAT'                    CONSTANT
SUNDAY   DC    CL3'SUN'                    CONSTANT
WKEND    DC    CL5'WKEND'                  CONSTANT
WORKDAY  DC    CL5'WKDAY'                  CONSTANT
WORKD    DC    CL5'WORKD'                  CONSTANT
DAYTYPE  DC    CL5'WKDAY'                  CONSTANT
DAGTYPE  DC    CL5'WKDAY'                  CONSTANT
COMAREA  DS    0F                          COMMAND AREA
         DC    H'70'                       LENGTH
         DC    X'0000'                     FLAGS
COMACTN  DC    CL80' '                     COMMAND FIELD
DOUBLE   DS    D                           WORK SPACE FOR CONVERSION
PTIMDBL  DC    XL4'0'
PTIM     DC    PL4'0'                      PACKED TIHE FORMAT HHMMSSCC
PDATDBL  DC    XL4'0'
PDAT     DC    PL4'0'                      PACKED DATE FORMAT 00YYDDDF
DAYDBL   DC    XL5'0'
DAY      DC    PL3'0'                      WORKSPACE
MONTHDBL DC    XL5'0'
MONTH    DC    PL3'0'                      WORKSPACE
YEARDBL  DC    XL5'0'
YEAR     DC    PL3'0'                      WORKSPACE
TEMP     DS    F                           WORKSPACE
YEARS    DS    F                           YEARS IN BINARY
DAYS     DS    F                           DAYS IN BINARY
WKDAY    DS    CL3                         TODAY'S WEEK DAY
SYSID    DC    CL4'SY2X'                   SYSTEM ID
INAREA   DS    0CL80                       INPUT AREA
INDATE   DS    CL08                        DATE FORMAT DD/MM/YY
         DS    CL01                        FILLER
INTIME   DS    CL05                        TIME FORMAT HH.MM OR BLANK
         DS    CL01                        FILLER
INTYPE   DS    CL03                        ACTION TYPE
         DS    CL01                        FILLER
INSYSID  DS    CL03                        SMF SYSTEM-ID
         DS    CL01                        FILLER
INACTN   DS    CL57                        COMMAND
ZSYS     DC    CL7'*T SYX,'                COMMAND INIT
BLANCO   DC    CL7'       '                BLANKS
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM),EODAD=EOF
SYSIN1   DCB   DDNAME=SYSIN1,DSORG=PS,MACRF=(GM),EODAD=EOFSYS
         CVT   DSECT=YES,LIST=NO
         END

In next monthÕs issue we shall be concluding this article by
publishing the source code for the program JTMP, along with the
ESTAE exit routine, an SVC to make programs authorised, and
examples of control cards and JCL.

    © Xephon 1989

