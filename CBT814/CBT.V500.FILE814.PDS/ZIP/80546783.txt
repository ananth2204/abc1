Making the most of IBM’s ISPF/PDF editor
If you work in any IBM MVS environment, chances are that you spend a great deal
of time each day using the ISPF/PDF editor.  Over the years I have had many
opportunities to think about and develop various techniques and shortcuts that
allow me to make better use of my time when using the editor.  IBM seems
committed to improving the editor as much as possible and each new release of
ISPF/PDF brings along more useful features, which if used properly mean more
productivity for those of us who use it every day.  I have outlined here
specific features of the product (found on ISPF Version 2.1 or later) that help
me when creating and debugging programs and writing various documents.
BROWSING IN EDIT
I always browse datasets and libraries in EDIT, solely because in EDIT one can
exclude lines, run macros, and label lines (which is just like putting your
finger or a pencil in a thick manual).  All of this helps you keep your place
and make more sense of the data put in front of you.  If you do a ‘browse in
edit’, I suggest that you set AUTOSAVE OFF in your profile.  With AUTOSAVE OFF,
edit will tell you if you have (inadvertently) changed anything as the END
command will cease to work like SAVE.
EDIT RECOVERY
I never use the automatic recovery if I am carrying out a lengthy or complicated
set of updates.  Where I would be upset if I lost work in progress, I divide the
work up into logical sections and save each one under a different name.  That
way, if the system crashes or, more likely, I enter a wrong command and trash my
file, I have a set of back-ups taken at sensible stages.  Not only do I have the
back-ups, but I know what is in each one without having to think about it.  Far
from being an overhead, I find this process speeds up my work by allowing me to
proceed with more confidence.
SAVING REGULARLY
Save whatever you are editing regularly.  Normally, if I pause to have a think
or stop to flick through a document or manual, I take the time to save whatever
I am working on.  Again I always save my work just before attempting anything
that I think may trash my file, for example a complicated mass change or a sort
(sorts always require thought!).  Lastly, always save after doing anything that
was very time consuming or anything that you regarded as difficult; after all if
it was difficult you don’t want to have to do it again.
EDIT PROFILES
Edit profiles are used to retain information that controls your edit session.  A
new profile gets generated for each new file type you edit.  Profiles are built
based on either the Library Low-level Qualifier (LLQ), meaning that you will
most probably have a CLIST profile, a CNTL (or JCL) profile, and a PL/I or COBOL
(or ASM) profile, or based on the last part of the sequential dataset name,
meaning that you will almost definitely have a LIST profile and possibly a PRINT
profile.  If you edit a large range of different dataset or library types, be
aware that as ISPF only maintains a queue of 25 profiles, new profiles created
could eventually wrap over earlier profiles; next time you edit the type
associated with the lost profile, you will get the ISPF default profile
ZDEFAULT.  One way to avoid this is to always specify a profile name on the edit
panel when in option 2.
To change the defaults that are set when a new file type is created, edit any
old file, and specify ZDEFAULT as the profile.  Do a PROFILE command, make any
changes you want, and be sure that the profile is unlocked.  Exit all the way
out of PDF.  From now on, your revised ZDEFAULT will be used when a new profile
is created.  In my ZDEFAULT I always have:
...RECOVERY ON...
...AUTOSAVE OFF PROMPT...
...NULL ON STD...
EDIT MACROS
The edit macro facility allows you to develop new edit commands or customise
existing ones to perform new functions.  Use of macros can increase productivity
in many edit sessions.  The easiest way to give you an idea of what can be done
with edit macros is to give you a description of some that I use.  I have given
code examples of some of the smaller macros so that you can try them (they
should all work with ISPF Version 2.2 or later), and the others are described
here to show the ideals that I have been trying to work towards.
DELMEMB

Deletes the member being edited after prompting for confirmation, ie saves you
going into ISPF option 3.1.
/* ISPF/PDF EDIT MACRO "DELMEMB' */
ISREDIT MACRO
ISREDIT (DSN) = DATASET
ISREDIT (MEMB) = MEMBER
WRITENR DELETE THIS MEMBER ? (Y/N) ===>
READ &REPLY
IF &REPLY = Y THEN DO
   ISPEXEC LMINIT DATAID(DID) DATASET('&DSN') ENQ(SHRW)
   ISPEXEC LMOPEN DATAID(&DID) OPTION(OUTPUT)
   ISPEXEC LMMDEL DATAID(&DID) MEMBER(&MEMB)
   ISPEXEC LMFREE DATAID(&DID)
   ISREDIT CANCEL
END
DOEND
Checks DO, BEGIN, SELECT - type blocks etc, against END statements in CLIST
and/or PL/I programs.  This macro can be modified easily to suit any group of
language statements.
/* ISPF/PDF EDIT MACRO "DOEND" */
ISREDIT MACRO
ISREDIT EXCLUDE ALL
ISREDIT FIND 'PROC' WORD ALL
ISREDIT FIND 'PROCEDURE' WORD ALL
ISREDIT FIND 'SELECT' WORD ALL
ISREDIT FIND 'BEGIN' WORD ALL
ISREDIT FIND 'DO' WORD ALL
ISREDIT FIND 'END' WORD ALL
ISREDIT FIND P'^DO' 1 3 ALL
ISREDIT FIND P'^END' 1 4 ALL
ISREDIT FIND P'^PROC' 1 5 ALL
ISREDIT FIND P'^PROCEDURE' 1 10 ALL
ISREDIT FIND P'^SELECT' 1 7 ALL
ISREDIT FIND P'^BEGIN' 1 6 ALL
TOGGLE
Assign TOGGLE to a PF key.  It will move the cursor from the text area to the
command line and remember the cursor position.  When hit again it will re-
position the cursor in the text area.
/* ISPF/PDF EDIT MACRO "TOGGLE" */
ISREDIT MACRO NOPROCESS
ISREDIT (LINE,COL) = CURSOR
IF &COL = 0 +
   THEN DO
        ISPEXEC VGET (TLINE TCOL)
        IF &TLINE = &STR() +
           THEN EXIT CODE(1)
           ELSE ISREDIT CURSOR = &TLINE &TCOL
        END
   ELSE DO
        SET TLINE = &LINE
        SET TCOL = &COL
        ISPEXEC VPUT (TLINE TCOL)
        EXIT CODE(1)
        END
If you count how many times a day you are in edit and need to jump to the
command line, execute a command (could be anything from a SAVE or RENUM to a
recursive edit), then find where you were in the text again, you will appreciate
how useful this macro is.
TSD
Assign TSD to a PF key.  If you position the cursor somewhere in a line of text
and hit the appropriate PF key, all data up to but not including the cursor
position will be deleted.
/* ISPF/PDF EDIT MACRO "TSD" */
ISREDIT MACRO NOPROCESS
ISREDIT (LINE,COL) = CURSOR
ISREDIT TSPLIT .ZCSR &COL
ISREDIT DELETE .ZCSR
In this example you can see how simple edit macros can be.  TSD simply issues a
‘text split’ based on the cursor position and deletes the line split.
RUN
Executes a CLIST from the changes entered, ie no need to save changes made to a
CLIST before you test whether it works.
/* ISPF/PDF EDIT MACRO "RUN" */
PROC 0
ISREDIT MACRO (PARM)
ISREDIT (STATUS) = USER_STATE
ISREDIT REPLACE £&SYSUID 1 .ZLAST
ISREDIT (DSN) = DATASET
EX '&DSN(£&SYSUID)' '&PARM'
ISPEXEC LMINIT DATAID(DID) DATASET('&DSN') ENQ(SHRW)
ISPEXEC LMOPEN DATAID(&DID) OPTION(OUTPUT)
ISPEXEC LMMDEL DATAID(&DID) MEMBER(£&SYSUID)
ISPEXEC LMFREE DATAID(&DID)
ISREDIT USER_STATE = (STATUS)
To use it, edit a CLIST, make some changes to it (do not save them), and enter
RUN on the command line.
EXCEPT
This macro saves me typing in the following:
COMMAND ===> exclude all
COMMAND ===> find 'A'
COMMAND ===> find 'SOMETHING'
COMMAND ===> find etc..etc..etc.
It allows me to enter up to 20 search strings, for example:
COMMAND ===> EXCEPT 'A' 'B' SOMETHING
will exclude all lines of text except those containing the characters ‘A’, ‘B’,
or ‘SOMETHING’.
Scissors – the CUT, PASTE, and EAT macros
The most useful macros that I use are PC-type ‘scissors’ functions that allow me
to copy or remove data from a member or dataset (via cut) and then either in
recursive edit, split screen, or another edit session, allow me to paste that
data somewhere else.  My cut works with standard edit CC or MM line commands and
my paste works with standard A or B edit line commands.  A macro, EAT, runs
through a member or dataset and eats excluded or non-excluded lines (eg I can
specify EAT ALL NX or EAT NX (between label ranges etc).  This allows me to do
the following sort of thing:
COMMAND ===> exclude all
COMMAND ===> find 'data string' all
COMMAND ===> EAT ALL NX
My CUT, PASTE, and EAT macros all manipulate data into and out of a temporary
ISPF table.  Users of any ‘scissors’ functions need not know about this and need
only regard it as a temporary (or virtual) buffer space.  Once you have macros
that can work on this buffer space you can write even more macros that speed up
or help your daily work.  For example, edit will not allow a user to copy or
move overlay text data into a ‘mask’ line so I wrote a small macro that will
allow me to create a ‘mask’ line based on text data available in an edit
session.
Recursive edit
If I was editing a program and I continually needed to either update or
reference a copy (or include) member library as I was going through making my
changes, to help me I would create a macro (normally called HITLIST for want of
a better descriptive name) that allowed me to get to that dataset with the
minimum of keystrokes.  As follows:
/* ISPF/PDF EDIT MACRO "HITLIST" */
ISREDIT MACRO
ISPEXEC EDIT DATASET('HLQ.COPY.BOOK(xxxxxxx)'
END
If I only wanted to browse certain libraries, the following macro would take me
straight to the browse panel, having finished browsing, hitting END would take
me back to the point of invocation.
/* ISPF/PDF EDIT MACRO "B" */
ISREDIT MACRO
ISPEXEC SELECT PGM(ISRBRO) PARM(ISRBRO01)
END
RETRIEVE SYSTEM COMMAND (RECALL)
ISPF Version 2.3 has a RETRIEVE system command facility which can be used to
recall previously-entered commands to the command line.  The commands are
displayed, one at a time, in a reverse sequence to which they were entered.  The
command retrieved may be edited before re-submission if required.  This command
is only of benefit if assigned to a PF key.  Anything entered incorrectly can be
recalled, corrected, and re-submitted.  Similarly, commands that need repeated
execution with only a little modification can also be recalled.  Specifically in
edit, I find the retrieve function particularly useful for issuing FIND commands
in both halves of a split screen and repeating LOCATE commands - ISPF/PDF
supplies a RFIND (repeat find) and RCHANGE (repeat change) facility but no
similar function for LOCATE.
PRECEDING AMPERSANDS TO EDIT PRIMARY COMMANDS
Edit primary commands can be preceded with an ampersand if the command is
required to be left in the command field after execution.  Before ISPF Version
2.3 (and the advent of the RETRIEVE system command) this was particularly useful
when issuing complicated FIND or CHANGE commands, or commands that might need
repeated execution with only a little modification.  For example:
COMMAND ===> &find 'little miss moffat sat on a ?' all
COMMAND ===> &find 'big mrs. moffat sat on a ?' all
USING PROGRAM FUNCTION (PF) KEYS
Using PF keys can save a lot of needless typing and cursor movement.  This can
help your productivity enormously.  Once you start using your PF keys you will
want to put more and more functions on them – even if you have a 24-key terminal
you may find that you could do with more keys.  If, like me, you only have a 12-
key terminal (a dumb old 3278!) you may find that you are severely hampered in
trying to use your PF keys productively.  I use a simple CLIST (example below)
that swaps PF keys 1-12 to those at 13-24 and vice versa.  In effect users with
a 12-PF key terminal can then have (nearly) 24 keys available.
/* TSO/E CLIST "SWAPKEYS" */
ISPEXEC VGET (ZPF01 ZPF02 .... ZPF23 ZPF24 etc.)
ISPEXEC VGET (ZPFL01 ZPFL02 ....ZPFL23 ZPFL24 etc.)
SET SAV1PF13 = &STR(&ZPF13)
               ....etc.
SET SV1LPF13 = &STR(&ZPFL13)
               ....etc.
SET ZPF13    = &STR(&ZPF01)
               ....etc.
SET ZPFL13   = &STR(&ZPFL01)
               ....etc.
SET ZPF01 = &STR(&SAV1PF13)
               ....etc.
SET ZPFL01 = &STR(&SV1LPF13)
               ....etc.
ISPEXEC VPUT (ZPF01 ZPF02 .... ZPF23 ZPF24 etc.)
ISPEXEC VPUT (ZPFL01 ZPFL02 .... ZPFL23 ZPFL24 etc.)
If you do have an IBM 3278 (or similar) terminal that only has 12 PF keys then,
from the KEYS panel, change the field NUMBER OF PF KEYS  from 12 to 24.  You
will then have two screens of PF keys available to you (ignore the note that
says that the definitions and labels apply only to terminals with 24 PF keys).
Choose a PF key on each screen that you wish to use to swap your set of keys
back and forth.  It’s easier if you choose the same one on both screens (I
sacrifice the HELP key and use PF01 and PF13), then enter on that key:
PF01 ===> TSO %SWAPKEYS
PF13 ===> TSO %SWAPKEYS
Then fill in all PF key fields as normal and leave the KEYS option.
Subsequently anytime you hit the PF01 key on your keyboard you will swap your
keys from one set to another.  It is not too difficult to write a similar CLIST
to the one above that gives users with a 24-PF key terminal the ability to have
up to 36 or 48 PF keys.
LABELLING YOUR PF KEYS
Using the PFSHOW system command users can display their PF-key definitions and
labels at the bottom of each screen.  You can display as many keys and labels as
you have, that means up to 24!  However, 24 keys displayed takes up a good
proportion of the screen and looks a bit cumbersome and unwieldy.  Providing you
specify KEYS PER LINE as ‘MAX’ on the PFSHOW TAILOR panel, the shorter you make
the descriptions you use for each key, the more you can squeeze onto each line.
I usually just have to sacrifice one line on each screen and still manage to
squeeze on seven or eight key descriptors. Working on a 12-PF key IBM 3278 and
using the CLIST SWAPKEYS (mentioned above), I manage to have 12 keys (minus
PF01) for use in ISPF/PDF EDIT and another 12 keys (all right 11!) for general
use.  The labels at the bottom of my screen read:
PF 1='EDIT'  2=SWAP 4=%TSD  5=RFIND  6=RCHANGE  9=%TOGGLE 12=RECALL
and after I have invoked SWAPKEYS change to:
PF 1='NORMAL' 2=SPLIT  4=RETURN  5=LISTA  6=       9=SWAP   12=RECALL
In edit, PF01 is TSO %SWAPKEYS but so that at a glance I can easily see what set
of keys I have available at my fingertips it is labelled as edit.  Similarly,
general purpose keys are labelled NORMAL.  PF04 and PF09 are edit macros
described earlier.  PF12 is the RETRIEVE system command but is labelled as
‘RECALL’, and the other keys are standard IBM defaults (ie END, UP, DOWN, LEFT,
RIGHT etc).  Note that when editing I have to sacrifice the standard HELP,
RETURN, and SPLIT functions in order to accommodate the features that I require.

Rowena Binnington
Information Consultant
Welbeck Financial Group Ltd (UK)   © Xephon 1988













































