Checking for active jobs in MVS

A frequent use of most automation packages is to check whether a
specific job or started task is running in the MVS system and to
take some action if the job is not found. This is usually done by
having the automation package issue an MVS DISPLAY
JOBS,LIST (D J,L) command and trapping its output to check if
the job in question is displayed. This requires issuing MVS
commands and checking their output, in addition to the fact that
the automation tool is generating more SYSLOG output, using
more spool space, as well as having MVS consume CPU
resources scanning and displaying all active jobs. We found this
unacceptable in our shop, so we decided to write a command to
perform active job checking without requiring so much overhead.

The result is a program, called CHECKJOB, which can be run
from a REXX EXEC (which almost all current automation
software packages support) to see if a particular job is executing
or not. The syntax of the command is CHECKJOB jobname
where jobname is the name of the batch job, started task, or TSO
user you wish to check. The CHECKJOB command sets a return
code of 0 if the job in question is active, a return code of 4 if the
job is not active, and a return code of 8 if no parameter is supplied
to the command. If the parameter supplied is longer than 8 bytes
(the maximum allowable MVS job name), it is truncated to 8
bytes: there is also no validation performed against the parameter
(it is up to the user not to code special characters, etc). The return
code can be checked by code in a REXX EXEC and appropriate
action can then be taken. In addition, if CHECKJOB is run under
TSO and/or ISPF, a TPUT message is issued stating whether or
not the job in question is executing.

As an example, the following REXX EXEC, which is run via the

OPS/MVS automation product, uses the CHECKJOB command
to check that multiple production CICS regions are currently
executing:

/** REXX **/
ADDRESS 'TSO'
CICSID.1 = 'CICSP01'                   /* TRY ALL CICS REGIONS       */
CICSID.2 = 'CICSP02'                   /*                            */
CICSID.3 = 'CICSP03'                   /*                            */
CICSID.4 = 'CICSP04'                   /*                            */
I = 1                                  /* START LOOP                 */
DO WHILE I < 5                         /* LOOP THROUGH ALL REGIONS   */
  REGION = CICSID.I                    /* ASSIGN PROPER CICS REGION  */
  "CHECKJOB" REGION                    /* CHECK FOR ACTIVE CICS REG  */
  IF RC = 0 THEN DO                    /* IF DOWN, CHECK STATUS      */
    CMD = 'F' REGION',DSNC DISP STAT'  /* BUILD STATUS CHECK COMMAND */
    'OPSCMD COM('CMD') NOOUTPUT'       /* ISSUE STATUS CHECK COMMAND */
    END
  I = I + 1                            /* BUMP LOOP COUNTER          */
  END

PROGRAM SOURCE CODE

CHECKJOB CSECT
CHECKJOB AMODE 24
CHECKJOB RMODE 24
         YREGS                    REGISTER EQUATES
         LR    R12,R15            LOAD R12 W/EPA
         USING CHECKJOB,R12
         STM   R14,R12,12(R13)    PUT CALLER'S REGS IN HIS/HER AREA
         LR    R10,R13            REMEMBER CALLER'S SAVE AREA ADDRESS
         LR    R5,R1              SAVE CALLER'S PARMLIST
         LA    R0,AREALEN         LOAD LENGTH(STORAGE)
         GETMAIN RU,LV=(0)        GETMAIN STORAGE
         ST    R10,4(,R1)         PUT CALLER'S REG 13 IN DYNAMIC AREA
         LR    R13,R1             MAKE R13 POINT TO MY SAVE AREA
         ST    R13,8(,R10)        CHAIN MY SAVE AREA ONTO CHAIN
         USING WORKAREA,R13
         LR    R1,R5              RESTORE CALLER'S PARMLIST REGISTER
         LTR   R1,R1              SAVE AND CHECK REGISTER 1
         BZ    NOPRMMSG           IF ZERO, NO PARM FOR LENGTH
         L     R2,0(,R1)          NOW GET PARM BEGINNING
         LTR   R2,R2              CHECK FOR VALID BEGINNING
         BZ    NOPRMMSG           IF NONE, THEN LEAVE IMMEDIATELY
         MVI   FLAGS,X'00'        CLEAR FLAG
         NI    2(R2),X'FF'        CHECK FIRST CHARACTER POSITION
         BZ    TSOPARM            IF ZERO THIS IS A TSO COMMAND
         LH    R5,0(,R2)          PUT PARM LENGTH INTO REGISTER 5
         LA    R2,2(,R2)          POINT TO PARM
         B     GETIT              GO TO COMMON CODE
TSOPARM  LH    R5,0(,R2)          GET TO PARM LENGTH
         LH    R3,2(,R2)          POINT TO OFFSET
         LA    R2,4(R3,R2)        POINT TO PARM START
         CLI   0(R2),C'"'         DO WE NEED TO STRIP QUOTES ?
         BE    STRIPPER           IF SO, RECORD THE POINT
         CLI   0(R2),C''''        DO WE NEED TO STRIP APOSTROPHES ?
         BNE   NOSTRIP            IF NOT, DON'T BOTHER
STRIPPER OI    FLAGS,STRIPFLG     ELSE TURN ON QUOTE STRIP FLAG
NOSTRIP  SR    R5,R3              SUBTRACT OFFSET FROM LENGTH
         CH    R5,=H'5'           DOES LENGTH ALLOW PARM
         BL    NOPRMMSG           IF NOT QUIT NOW
         SH    R5,=H'4'           SUBTRACT FOR INCLUSIVE LENGTH
GETIT    CH    R5,=H'8'           MAKE SURE WE'RE 8 CHARS OR LESS
         BLE   GOODLEN            IF LENGTH IS OK, THEN USE IT
         LH    R5,=H'8'           ELSE TRUNCATE TO 8 CHARS
GOODLEN  BCT   R5,FLAGTEST        ALLOW FOR MVC QUIRKY COUNTING
FLAGTEST TM    FLAGS,STRIPFLG     SEE IF WE NEED TO STRIP DELIMS
         BZ    NONEED             IF UNNECESSARY, DON'T BOTHER
         LA    R2,1(,R2)          ELSE BUMP STARTING ADDRESS
         SH    R5,=H'2'           AND DECREASE LENGTH
NONEED   EX    R5,OCNAME          UPPER CASE NAME
         L     R3,16              LOAD A(CVT)
         USING CVT,R3
         L     R3,CVTASVT         LOAD A(ASVT)
         USING ASVT,R3
         L     R6,ASVTMAXU        LOAD MAX NUM OF ASIDS
         LA    R3,ASVTENTY        LOAD A(FIRST ASVT ENTRY)
         USING ASCB,R4
ASVTLOOP TM    0(R3),ASVTAVAL     IS ENTRY AVAILABLE
         BO    ASVTNEXT           YES, GO CHECK NEXT ENTRY
         BCTR  R6,0               ELSE, DECREMENT COUNT
         L     R4,0(,R3)          LOAD A(ASCB)
         L     R4,ASCBJBNS        LOAD A(JOBNAME)
         EX    R5,CLCJOBNM        EXECUTE COMPARE ON JOB NAME
         BE    FOUNDIT            MATCH, TELL CALLER
         LA    R3,4(R3)           ELSE, LOAD A(NEXT ASVT ENTRY)
         B     ASVTLOOP           LOOP BACK
ASVTNEXT LA    R3,4(,R3)          LOAD A(NEXT ASVT ENTRY)
         BCT   R6,ASVTLOOP        LOOP BACK IF MORE ENTRIES
NOTFOUND MVC   MSGAREA,NOACTMSG   TELL CALLER JOB NAME NOT FOUND
         EX    R5,MVCJOBNM        EXECUTE MOVE OF JOB NAME
         TPUT  MSGAREA,L'MSGAREA  ISSUE MESSAGE
         LA    R15,4              SET RETURN CODE
         B     RETURN             GO RETURN TO CALLER
FOUNDIT  MVC   MSGAREA,ACTIVMSG   TELL CALLER JOB NAME FOUND
         MVC   MSGAREA(8),0(R4)   MOVE JOB NAME TO MESSAGE
         TPUT  MSGAREA,L'MSGAREA  ISSUE MESSAGE
         SR    R15,R15            SET RETURN CODE
RETURN   LR    R14,R13            SAVE POINTER TO DYNAMIC AREA
         LR    R2,R15             SAVE RETURN CODE
         L     R13,SAVEAREA+4     GET ORIGINAL REGISTER 13
         FREEMAIN RU,LV=AREALEN,A=(14) FREE STORAGE
         LR    R15,R2             RESTORE RETURN CODE
         RETURN (14,12),RC=(15)   RETURN TO CALLER
NOPRMMSG TPUT PARMMSG,L'PARMMSG   DISPLAY ERROR MESSAGE
         LA    R15,8              SET NON-ZERO RETURN CODE
         B     RETURN             AND EXIT PROPERLY
CLCJOBNM CLC   0(0,R4),0(R2)      EXECUTED JOB NAME COMPARE
MVCJOBNM MVC   MSGAREA(0),0(R2)   EXECUTED JOB NAME MOVE
OCNAME   OC    0(0,R2),=8C' '     EXECUTED OC TO UPPER CASE NAME
PARMMSG  DC    CL79'NO PARAMETER SUPPLIED TO PROGRAM.'
ACTIVMSG DC    CL79'         IS ACTIVE.'
NOACTMSG DC    CL79'         IS NOT ACTIVE.'
         LTORG
WORKAREA DSECT
SAVEAREA DS    18F                TEMPORARY REGISTER STORAGE
FLAGS    DS    CL1                FLAG BYTE
STRIPFLG EQU   X'80'              QUOTES/APOSTROPHES INCLUDED
MSGAREA  DS    CL79               MESSAGE AREA
AREALEN  EQU   *-SAVEAREA         LENGTH OF GETMAINED AREA
         CVT DSECT=YES            MAPPING DSECTS
         IHAASCB
         IHAASVT
         END


                                                          c Xephon 1994

