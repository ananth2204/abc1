DB2 - the performance issues
DB2, the IBM relational database management system for MVS users, is rapidly
growing in both customer acceptance and use.  It has already become a production
system, and its popularity continues to increase as the DB2 product itself
continues to mature.  DB2 Version 2 continues this trend of providing functional
and performance enhancements.
DB2 brings database services to applications in the CICS, IMS, and TSO
environments.  It also provides batch access through the TSO background and the
DB2 Call Attach Facility (CAF).  All subsystems connected to DB2 have concurrent
access to DB2 data and services. Its internal design provides the concurrency
needed to exploit the power of large multi-engine processors.  Its ability to
allocate and efficiently manage large buffer pools optimises physical I/O.  DB2
buffer management services capitalise on the use of expanded and large real
storage when available.  Its use of extended storage in an MVS/XA environment
eliminates typical virtual storage constraint concerns.
DB2 is frequently criticised for its overall system performance and system
resource consumption.  Consequently, performance monitoring and tuning are
crucial to the success of DB2 production applications.  DB2 performance
management is necessary to control CPU, real memory, and I/O subsystem use.
Performance monitoring and tuning of DB2 require it to be interrogated from the
perspectives of both system and application performance.
System performance analysis and the subsequent tuning of various DB2
subcomponents can lead to resource optimisation.  Performance areas that will be
discussed in this article include the management of subsystem support and
attachment facilities, buffer pools, I/O, and recovery logs.
DB2 application performance considerations include application SQL and locking
activities.  Excessive DB2 response times and lack of application commit
activity are exceptions that need to be examined.  Buffer and I/O activity for
an application should be evaluated and minimised when possible.
DB2 SYSTEM PERFORMANCE
The performance of DB2 depends on the availability of system resources and DB2
performance can be monitored and tuned to optimise resource use and maximise
workload activity.  To monitor a DB2 system, a performance analyst must be
familiar with its design.
A DB2 subsystem is composed of three unique address spaces:
•    System Services Address Space (SSAS)
•    Database Services Address Space (DBAS)
•    IMS/VS Resource Lock Manager (IRLM).
These address spaces are interdependent but operate together as a formal MVS
subsystem.  Communication between them is handled through the MVS subsystem
interface, cross-memory services, and MVS schedule request blocks.
Within the SSAS and DBAS are a variety of DB2 subcomponents known as resource
managers.  As the name indicates, they manage designated system resources.
Because each has a special function, it is possible to approach system
performance management from a resource manager perspective.
Not all resource managers within DB2 provide or have a need to provide tuning
mechanisms.  Performance analysts should however, focus their attention on
performance issues presented by the subsystem support manager (and attachment
facilities), buffer manager, and recovery log manager.
Subsystem Support Manager
DB2 establishes and manages user request activity through a set of connection
protocols.  The connection process enables applications within CICS, IMS, and
TSO environments to communicate and access DB2 databases.  The connection
mechanism is implemented by communication between the attachment facilities,
subsystem support, and the agent services subcomponents of DB2.
DB2 attachment facilities physically reside and execute in the user’s address
space.  Their implementation is unique for the subsystems supported - ie CICS,
IMS, and TSO.  They provide the communication interface necessary to enable
application access to DB2 database services.  The connection process consists of
three operations: identify, sign-on, and thread creation.
Identify is the initial phase of connection.  An identify request is issued by
the attachment facility executing within the user’s address space.  It is
received by DB2 through the MVS subsystem interface and results in the
allocation of an internal control structure to support the requestor.  Unlike
sign-on and thread creation, which may be issued repetitively upon completion of
a single identify request, identify occurs when a DB2 attachment facility
requests that a connection is established.  Although connected, the requestor is
unable to access DB2 resources until the sign-on and thread creation phases in
the connection process have been completed.
The second phase identifies an individual CICS or IMS user to DB2.  DB2’s
ability to service multiple users from within a single CICS region (single
identify) and multiple IMS regions requires the connection process to validate
the individual user in those environments.  Sign-on is the validation process to
determine whether the requestor has the authority to access DB2 resources. Sign-
on is not applicable to TSO users since there is only one user in a TSO address
space.
The final phase necessary to gain access to DB2 resources is thread creation.  A
DB2 thread is a path between a requesting transaction and specific DB2
resources.  Thread creation results in the allocation of an additional internal
structure that is used by DB2 to tie together all requests and resources
associated with a single DB2 user.
By limiting the number of concurrent connections and threads, performance
analysts can manage the DB2 workload and system resource consumption.
Installation options available within DSNZPARM permit the control of DB2
connection and thread use.  Options allow for the specification of the maximum
number of concurrent threads, as well as the maximum concurrent foreground and
background connections.  Other workload control options are available when the
CICS and IMS attachments are used.
The CICS attachment provides workload control options in the Resource Control
Table (RCT).  The RCT module allows a performance analyst to define DB2 threads
available to a CICS region and the associated transactions that can use them.
It is loaded and used by the CICS attachment when CICS is connected to DB2.  The
attachment allows for the definition of two types of threads: entry and pool
threads.  Entry threads are dedicated to selected DB2 resources and can service
one or more CICS transactions.  Pool threads, on the other hand, are shared by
all transactions lacking dedicated threads.  They can also be used as an
overflow area for entry threads to eliminate waiting for an available entry
thread.
Performance analysts can manage the number of DB2 threads originating in IMS by
limiting the number of dependent regions connected to DB2.  With the IMS
attachment, every dependent region attached to DB2 has a single DB2 thread.  DB2
connections between IMS control and dependent regions are defined in the
Subsystem Member (SSM) residing in the IMS PROCLIB.  Unlike CICS, IMS can define
connections to multiple DB2 subsystems.  IMS connections to DB2 are controlled
by options specified in the SSM.
Another performance objective in tuning the DB2 connection process includes
optimising thread re-use.  Thread creation costs can be significant for DB2
requests requiring minimal data access.  Consequently, thread re-use should be
considered mainly for high-volume transactions.  Threads can be re-used in a
CICS environment if they are defined as entry threads.  If high-volume
transactions are defined to entry threads, threads can be re-used, and the
overhead involved in thread creation can be avoided.
In an IMS environment, threads can be re-used if the transaction is defined as
Wait For Input (WFI).  The thread-id is created by the first SQL request and
terminated when the IMS connection is stopped.  Performance analysts can also
make threads re-usable by implementing IMS class scheduling or by setting the
PROCLIM count to greater than one.  IMS Fastpath regions always re-use threads.
Buffer Manager
The volume of I/Os and I/O response time are probably the most important
performance considerations in any database system.  As would be expected, the
buffer manager manages DB2 buffers and I/O activity.  It attempts to service
application requests with minimal I/O.
User options available for managing database buffer pools include specifying the
number of pools to be used, setting the minimum and maximum size of each pool,
and determining which physical datasets to allocate to the pool.  To tune the
buffer manager, an analysis of buffer manager requests, physical read and write
activity, expansions, and threshold occurrences is needed.
Buffer manager read operations take two forms - synchronous reads and sequential
prefetch.  Synchronous reads are often called normal reads.  Normal read
activity occurs when only a few data pages are retrieved.  It is a synchronous
operation in that the user waits for the I/O operation to complete.

Sequential prefetch, on the other hand, is an asynchronous activity that
anticipates the need for data pages.  It occurs typically when an SQL request
results in a table scan and the amount of data retrieved justifies its use.  The
type of read operation used in processing user requests is determined by DB2,
not the user.
Write operations are normally not synchronised to user requests.  Since data
integrity is ensured by the log manager, the buffer manager is able to defer
output operations.  Buffer pages that have been updated are queued off the
owning table space until they are physically written.  As a result, user update
and insert activity is logical, and physical I/O is determined by the buffer
manager.  Buffer pages remain in the buffer pool until internal algorithms used
by the buffer manager force the data pages to be physically written.
Internal thresholds within the buffer manager aid in the control of physical
reads and writes.  These thresholds, based internally on the unavailable buffer
pages, are used to minimise physical I/O.
Buffer pool size is a major performance factor.  The allocation of large buffer
pools improves efficiency.  It writes application recovery data and reads
recovery information during back-out and recovery operations.  It also performs
log dataset archiving and tracking functions.
One goal in tuning the log manager is to limit application waits due to an
absence of available log output buffers.  Another is to minimise application
wait time during commit processing when log records must be physically written
to ensure data recoverability and integrity.  The physical placement of log
datasets is critical, and device contention should be minimised.
Tuning options for the Recovery Log Manager include specifying the output by
buffer size and write threshold.  Specification of the log write threshold
provides control over asynchronous write activity by the log manager.  It can
reduce application wait time during application commit processing when all log
records must be physically written to the recovery log.
The preceding discussion seeks only to identify selected system performance
issues within the DB2 subsystem.  Obviously effort is required to control DB2
performance: the performance analyst can manage DB2 resource consumption by
monitoring and tuning various DB2 subcomponents.
DB2 APPLICATION PERFORMANCE
Although DB2 is not a transaction manager like CICS and IMS, its user request
activity is managed as units of work similar to those of a transaction manager.
A DB2 unit of work, or transaction, starts when the first SQL request is
received by an application requesting DB2 services.  It is terminated upon
successful completion of a commit or abort request.
Application-level tuning focuses on the analysis of active threads or units of
work executing within DB2.  Applications using DB2 resources excessively need
detection.  The elapsed time, or ‘transit time’, of a DB2 transaction can be
used as a basis for locating and subsequently interrogating troublesome
transactions. DB2 resources are typically acquired and freed on a unit-of-work
basis.  Adequate application commit logic is necessary to prevent resource
bottlenecks.  Major areas of application performance include SQL, locking, and
buffer manager activities.
SQL activity
SQL, the language used to access DB2 data, is both flexible and powerful.
Analysis of application SQL activity can assist in locating troublesome
transactions.  Monitoring SQL activity requires statistics for the various SQL
requests issued by an application.  These statistics should include the number
of requests for open cursors, fetches, selects, updates, inserts, deletes, close
cursors, prepares, commits, and aborts.
SQL commit and abort activity is extremely important.  Applications that read
and modify DB2 tables need to commit (or abort) any changes periodically.  DB2
locks and other resources are normally freed during commit processing.  Poor
application design with inadequate commit logic can exhaust DB2 resources and
decrease system throughput.
Locking activity
Application locking is a major area requiring performance analysis.  DB2 uses
locks to control data access and to ensure data integrity.  Locks are obtained
automatically by DB2 when it processes application SQL requests.  The DB2 data
manager uses the IRLM to manage and control locks.
Two types of locking strategies are available: table space and page locking.
The type of locking used for a table space is selected when the table space is
created.  Table space locks are assigned at the table space level; page locks,
on the other hand, are issued at the data page level.  Index space page locking
can be implemented on subpages.  DB2 provides a facility for escalating page
locks to a table space lock when the number of page locks owned by the
application justifies escalation.
To improve performance, analysts should evaluate the type and number of locks
issued for application requests.  Excessive locking increases DB2 CPU and memory
demands.  Lock suspensions and deadlock occurrences need to be detected and
interrogated so that sluggish system performance can be avoided.
Buffer and I/O activity
Because DB2 uses the relational database model it is a ‘set-oriented’ database
system.  In response to a single SQL request, many rows (records) of data can be
read or updated.  SQL simplifies DB2 use and isolates the user from the system
aspects of data access and data storage.  SQL users concern themselves only with
what data they desire, not how the data will be retrieved.
The access path used in data retrieval is determined internally by the DB2
optimiser.  Users are typically unaware of the internal access techniques used
in satisfying their requests.  SQL requests resulting in sequential scans of DB2
tables can, however, severely degrade system performance.  DB2 database
administrators can influence the access path used in data retrieval by creating
table indexes.   Because the access path used in data retrieval is normally
transparent, the performance analyst should monitor application buffer and I/O
activity.  Applications generating excessive activity should be interrogated.
The information needed to monitor and tune application buffer manager activity
includes getpage, sequential prefetch reads, synchronous reads, and update
request counts.
The preceding discussion of DB2 performance identifies some major areas of
concern.  However, the information presented only scratches the surface and it
is hoped to present future articles which will address selected DB2 performance
issues in more detail.

Bill MacDonald
Managing Director, Europe
Candle Service Ltd (UK)  © Candle Service 1989
































