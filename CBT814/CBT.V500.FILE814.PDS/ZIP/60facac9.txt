Keeping track of DASD volume back-ups


INTRODUCTION

Most MVS installations use DFDSS to back up DASD volumes
to tape. If an installation does not have DFHSM, keeping track
of the datasets backed up on a certain day, and the tape
volumes used, is not easy. This information is needed for end
users who want to restore lost datasets and for operators to
know which tape volumes are expired and hence can be
recycled.

The following program can be used to keep track of the above
information. It stores the details about a DASD volume back-
up in two DB2 tables, DSETTAB and TAPETAB. The
DSETTAB table contains information about all the datasets
backed up and the corresponding GDG version. The
TAPETAB table contains the attributes of each GDG created,
along with the tape volumes used for it. The structure of the
tables is documented in the program.

This program is run immediately after DFDSS volume dump.
The DASD volume and the GDG base of the tape dataset to
which the volume is dumped are passed as parameters. It
invokes IDCAMS internally and passes the commands
'LISTCAT ENT( gdgbase ) ALL' and 'DCOLLECT
OUTFILE( dcol ) VOLUME(volid)'. The output of LISTCAT
is read to get the last created back-up GDG version, the tape
volumes used, and the first existing GDG version. The latest
GDG version and the tape volumes used are inserted into
TAPETAB. The output generated by 'DCOLLECT' is
processed for dataset and VSAM cluster information. Each of
the extracted entries is inserted into DSETTAB along with the
latest GDG version. Finally, rows corresponding to expired
versions of back-ups are deleted from both tables.

This program needed APF authorization for processing the
'DCOLLECT' command. Hence the standard TSO-DB2
interface cannot be used. To overcome this problem it uses the
Call Attachment Facility so that it can be run just like any other
batch program.


SAMPLE JCL

//BKUPINFO JOB (0),'xxxx',CLASS=A,MSGCLASS=X
//DSN1        EXEC PGM=BKUPINFO,PARM='volid,gdgbase'
//DSFILE      DD  SYSOUT=*,RECFM=FB,LRECL=120,BLKSIZE=120


SAMPLE QUERIES

Users can select information from the DB2 tables using SQL.
Some sample queries which are used most commonly are
shown below.

Dataset information

SELECT DSETNAME,CREDATE,REFDATE,BKUPDSET,BKPDATE FROM DSETTAB,TAPETAB
   WHERE ( DSETNAME = 'dataset name' ) AND ( BKPDSET = BKUPDSET )

DASD back-up information

SELECT DISKVOL,BKPDSET,BKPDATE,REELID FROM TAPETAB
   WHERE DISKVOL = 'volid'

Show all back-ups done on a day

SELECT DISKVOL,BKPDATE,BKPDSET,REELID FROM TAPETAB
   WHERE BKPDATE = 'yymmdd'

List expired tapes for a certain back-up

SELECT BKPDSET,REELID FROM TAPETAB
   WHERE ( BKPDSET LIKE 'gdg base name' ) and ( BKPDATE < 'yymdd' )


PROGRAM SOURCE CODE

BKUPINFO CSECT
         SAVE   (14,12)                     SAVE REGS
         LR     12,15                       SET UP BASE REG
         LA     11,4095(12)
         LA     11,1(11)                    SECOND BASE REGISTER
         USING  BKUPINFO,12,11              ESTABLISH ADDRESSABILITY
         ST     13,SAVE+4                   FORWARD POINTER
         LA     10,SAVE                     SAVE AREA ADDRESS
         ST     10,8(13)                    BACKWARD POINTER
         LR     13,10                       NEW SAVE AREA ADDRESS
         L      1,0(1)                      POINTER TO PARAMETER
         LH     3,0(1)                      PARAMETER LENGTH
         LTR    3,3                         LENGTH = 0?
         BZ     EXIT1                       NO PARAMETER PASSED
         MVC    VOLID,2(1)                  VOLID TO DCOLLECT COMMAND
         LA     2,9(1)                      POINT TO GDG NAME
         SH     3,=H'7'                     LENGTH OF GDG NAME
         STH    3,GDGLEN                    SAVE FOR LATER USE
         LA     4,GDGNAME                   GDG NAME IN "LISTCAT" CMD
         LR     5,3                         DESTINATION LENGTH
         MVCL   4,2                         MOVE GDG BASE NAME TO CMD
*  DYNAMICALLY ALLOCATE AMSPRINT  AMSIN AND DCOUT
         LA     1,IDCPRINT
         DYNALLOC ,                         ALLOCATE SYSPRINT FOR AMS
         LTR    15,15                       DYNALLOC SUCCESSFUL?
         L      3,IDCPRINT
         MVC    ALOCDD,=CL8'AMSPRINT'       SYSPRINT DDNAME
         BNZ    DALERR                      ERROR IN DYNALLOC
         LA     1,IDCIN
         DYNALLOC ,                         ALLOCATE SYSIN FOR AMS
         LTR    15,15                       SUCCESSFUL ALLOCATION?
         L      3,IDCIN
         MVC    ALOCDD,=CL8'AMSIN'          SYSIN DDNAME
         BNZ    DALERR                      ERROR IN DYNALLOC?
         LA     1,IDCOUT
         DYNALLOC ,                         ALLOCATE DCOUT FOR AMS
         LTR    15,15                       SUCCESSFUL ALLOCATION
         L      3,IDCOUT
         MVC    ALOCDD,=CL8'DCOUT'          DCOLLECT DDNAME
         BNZ    DALERR                      ERROR IN DYNALLOC?
*  WRITE COMMAND TO AMSIN AND LINK TO IDCAMS
         OPEN   (AMSIN,OUTPUT)              OPEN COMMAND FILE
         PUT    AMSIN,LISTCAT               LISTCAT COMMAND
         PUT    AMSIN,DCOLLECT              DCOLLECT COMMAND
         CLOSE  AMSIN                       CLOSE IDCAMS SYSIN FILE
         LINK   EP=IDCAMS,PARAM=(OPTIONS,DDNAMES),VL  ; INVOKE IDCAMS
         LTR    15,15                       IS IDCAMS SUCCESSFUL
         BZ     PROCESS                     THEN PROCESS THE OUTPUT
         MVC    WTO1+8(80),AMSERR           ERROR IN IDCAMS PROCESSING
         B      WTO1                        DISPLAY MESSAGE ON CONSOLE
*  OPEN THE FILES CREATED BY IDCAMS AND PROCESS
PROCESS  OPEN   (DCOUT,(INPUT),AMSPRINT,(INPUT),DSFILE,(OUTPUT))
         LTR    15,15                       ERROR IN OPEN?
         BZ     NXTREC                      DISPLAY ERROR MESSAGE
         MVC    WTO1+8(80),OPENERR          MOVE ERROR MESSAGE
         B      WTO1                        DISPLAY ON CONSOLE
NXTREC   BAL    8,GETREC                    NEXT LISTCAT RECORD
         CLC    LCATREC+7(7),=CL7'NONVSAM'  IS IT NON VSAM GDG ENTRY?
         BNE    NXTREC                      IF NOT SKIP IT
         MVC    FIRSTGDG(44),LCATREC+16     GET THE FIRST GDG NAME
         MVC    LASTGDG(44),LCATREC+16      LAST GDG SAME AS FIRST
NXTGDG   BAL    8,GETREC                    GET NEXT RECORD
         CLC    LCATREC+3(7),=CL7'NONVSAM'  IS IT NON VSAM ENTRY?
         BE     GDGOVER                     IF YES ALL GDGS OVER
         MVC    LASTGDG(44),LCATREC+16      MAKE CURRENT GDG LAST
         B      NXTGDG                      READ NEXT ENTRY
*  PROCESS THE NON VSAM ENTRIES
GDGOVER  CLC    LCATREC+16(44),LASTGDG      NAME OF LAST GDG?
         BE     NXTREC2
NXTREC1  BAL    8,GETREC                    GET NEXT ENTRY
         CLC    LCATREC+3(7),=CL7'NONVSAM'  NON VSAM ENTRY?
         BE     GDGOVER                     THEN CHECK IF LAST
         B      NXTREC1                     SKIP OTHER RECORDS
NXTREC2  BAL    8,GETREC                    READ NEXT ENTRY
         CLC    LCATREC+7(6),=CL6'VOLSER'   IS IT A VOLSER ENTRY?
         BNE    NXTREC2                     IF NOT SKIP IT
         SLR    3,3                         INITIALIZE REELID LENGTH
         LA     2,VOLUMTAB                  VOLSER TABLE ADDRESS
NXTREC3  MVC    0(6,2),LCATREC+25           MOVE THE CURRENT VOLSER
         LA     2,8(2)                      POINT TO NEXT
         LA     3,8(3)                      INCREMENT LENGTH
         BAL    8,GETREC                    GET NEXT ENTRY
         CLC    LCATREC+7(6),=CL6'VOLSER'   IS IT A VOLSER ENTRY
         BE     NXTREC3                     THEN CONTINUE
         STH    3,REELID                    LENGTH OF REELID FIELD
         MVC    REELID+2(120),VOLUMTAB      CONTENT OF REELID FIELD
         MVC    BKPDSET,LASTGDG             LAST CREATED GDG NAME
         TIME   DEC                         GET DATE AND TIME
         LR     3,0                         TIME IN HHMMSSTH
         SRL    3,8                         TIME IN 00HHMMSS
         SLL    3,4                         TIME IN 0HHMMSS0
         ST     3,BKPTIMEP                  SAVE IT
         OI     BKPTIMEP+3,X'0C'            TIME IN PACKED DECIMAL
         UNPK   BKPTIME(6),BKPTIMEP(4)      CONVERT TO DISPLAY FORMAT
         OI     BKPTIME+5,X'F0'             GIVE A PROPER SIGN
         ST     1,CURDATE
         LA     1,CURDATE
         BAL    14,DATECNV                  CONVERT DATE TO YYMMDD
         MVC    BKPDATE(6),YYMMDD           SAVE IT
         MVC    DISKVOL,VOLID               MOVE VOLID TO DB2 COLUMN
         L      6,SQLDSIZ                   SIZE OF SQL DSECT
         GETMAIN R,LV=(6)                   ACQUIRE AREA FOR SQLDSECT
         LR     8,1                         ADDRESS OF ACQUIRED AREA
         USING  SQLDSECT,8                  ADDRESSABILITY TO SQLDSECT
*  DECLARE THE DB2 TABLES
         EXEC   SQL DECLARE DSETTAB   TABLE                            X
               (DSETNAME  CHAR(44)  NOT NULL,                          X
               CREDATE   CHAR(06)  NOT NULL,                           X
               REFDATE   CHAR(06)  NOT NULL,                           X
               DSETTYP   CHAR(01)  NOT NULL,                           X
               BKUPDSET  CHAR(44)  NOT NULL)
         EXEC   SQL DECLARE TAPETAB   TABLE                            X
               (BKPDSET   CHAR(44)  NOT NULL,                          X
               DISKVOL   CHAR(06)  NOT NULL,                           X
               BKPDATE   CHAR(06)  NOT NULL,                           X
               BKPTIME   CHAR(06)  NOT NULL,                           X
               REELID    VARCHAR(120) NOT NULL )
*  CODE FOR SQL CALL ATTACHMENT FACILITY
         LOAD   EP=DSNALI                   LOAD CAF SERVICE REQ
         ST     0,LIALI                     SAVE START ADDRESS
         LOAD   EP=DSNHLI2
         ST     0,LISQL
         L      15,LIALI                    LOAD INTERFACE ADDRESS
         CALL   (15),(CONNECT,SSID,TECB,SECB,RIBPTR),VL,               X
               MF=(E,CAFCALL)               CONNECT TO DB2
         L      15,LIALI
         CALL   (15),(OPEN,SSID,PLAN),VL,MF=(E,CAFCALL)  CREATE THREAD
         EXEC   SQL  WHENEVER SQLERROR GO TO SQLERR1
         EXEC   SQL  INSERT INTO TAPETAB                               X
               ( BKPDSET,DISKVOL,BKPDATE,BKPTIME,REELID ) VALUES       X
               (:BKPDSET,:DISKVOL,:BKPDATE,:BKPTIME,:REELID)
*  REMOVE ALL EXPIRED GDGS AND REELID FROM TABLE
         MVC    FIRSTGD1,FIRSTGDG
         LA     2,FIRSTGD1                  STARTING ADDRESS OF GDG
         AH     2,GDGLEN                    END OF GDG BASE
         LA     2,1(,2)                     POSITION AT GEN FIELD
         MVC    0(8,2),=XL8'00'             LOW VALUES IN GENR.
         EXEC   SQL  DELETE FROM TAPETAB WHERE                         X
               ( BKPDSET < :FIRSTGDG AND BKPDSET > :FIRSTGD1 )
         L      5,SQLERRD+8                 COUNT OF GDGS DELETED
         CVD    5,DWORD                     CONVERT TO DECIMAL
         UNPK   DELGDG(6),DWORD+4(4)        MAKE DISPLAY FORMAT
         OI     DELGDG+5,X'F0'              GIVE A GOOD SIGN
*  PROCESS THE DCOLLECT OUTPUT
PROCDCOL GETMAIN R,LV=44000                 ACQ STORAGE FOR CLSTR TAB
         LR     9,1                         ADDRESS OF TABLE
         LA     5,1000                      NUMBER OF ENTRIES IN TABLE
INIT2    MVC    0(44,9),SPACE               INITIALIZE WITH SPACE
         LA     9,44(9)                     POINT TO NEXT ENTRY
         BCT    5,INIT2                     REPEAT FOR WHOLE TABLE
         LR     9,1                         GET STARTING ADDR OF TAB
         XR     5,5                         COUNTER NON VSAM
         XR     6,6                         COUNTER VSAM
         XR     2,2                         COUNTER CLUSTER
NEXTREC  GET    DCOUT                       GET A DCOLLECT RECORD
         LA     3,4(,1)                     ADDRESS OF RECORD READ
         USING  IDCDOUT,3                   ADDRESSABILITY TO RECORD
         CLI    DCURCTYP,C'D'               IS IT DATA COMPONENT
         BE     WRITEREC                    THEN WRITE THIS RECORD
         CLI    DCURCTYP,C'A'               IS IT ASSOCIATION RECORD
         BNE    NEXTREC                     IF NOT SKIP IT
ASSOCOMP LR     4,9                         START ADDRESS OF TABLE
LOOP     CLC    0(44,4),DCAASSOC            CLUSTER ALREADY IN TABLE
         BE     NEXTREC                     THEN LEAVE IT
         CLC    0(44,4),SPACE               LAST ENTRY OF TABLE OVER
         BE     ADDENT                      THEN ADD TO TABLE
         LA     4,44(4)                     POINT TO NEXT ENTRY
         B      LOOP                        CHECK NEXT ENTRY
ADDENT   MVC    0(44,4),DCAASSOC            MOVE THE CLUSTER NAME
         B      NEXTREC                     PROCESS NEXT RECORD
WRITEREC CLI    DCDDSORG+1,X'08'            VSAM DATASET
         BE     VSAMCOMP
         LA     5,1(,5)                     INCREMENT NON VSAM COUNT
         MVI    DSETTYPE,C'N'               NON VSAM
         B      INS1                        INSERT ENTRY TO DB2 TABLE
VSAMCOMP MVI    DSETTYPE,C'V'               VSAM COMPONENT ENTRY
         LA     6,1(,6)                     INCREMENT VSAM COUNT
INS1     LA     1,DCDCREDT                  CREATION DATE
         BAL    14,DATECNV                  CONVERT TO YYMMDD FORMAT
         MVC    CREDATE(6),YYMMDD           MOVE TO DB FIELD
         LA     1,DCDLSTRF                  LAST REFERENCE DATE
         BAL    14,DATECNV
         MVC    REFDATE(6),YYMMDD           REFERENCE DATE IN DB FIELD
         MVC    DSETNAME,DCDDSNAM           DATASET NAME IN DB FIELD
         MVC    BKUPDSET,BKPDSET            BACKUP DATASET IN DB FIELD
         EXEC   SQL  INSERT INTO DSETTAB                               X
               ( DSETNAME,CREDATE,REFDATE,DSETTYP,BKUPDSET ) VALUES    X
               (:DSETNAME,:CREDATE,:REFDATE,:DSETTYPE,:BKUPDSET)
         B      NEXTREC                     PROCESS NEXT RECORD
*  DCOUT END OF FILE IS FOUND
DCEND    LR     4,9                         CLUSTER TABLE ADDRESS
         MVI    DSETTYPE,C'C'               CLUSTER TYPE
LOOP1    CLC    0(44,4),SPACE               CURRENT ENTRY SPACE
         BE     FINISH1                     DATASET ENTRIES OVER
         MVC    DSETNAME,0(4)               GET CLUSTER NAME
         LA     2,1(,2)                     INCREMENT COUNT
         EXEC   SQL  INSERT INTO DSETTAB                               X
               ( DSETNAME,BKUPDSET,DSETTYP ) VALUES                    X
               (:DSETNAME,:BKUPDSET,:DSETTYPE)
         LA     4,44(4)                     POINT TO NEXT
         B      LOOP1                       PROCESS NEXT CLUSTER
FINISH1  CVD    5,DWORD                     NON-VSAM COUNT TO DECIMAL
         UNPK   NVSCNT(6),DWORD+4(4)        CONVERT TO DISPLAY
         OI     NVSCNT+5,X'F0'              SET GOOD SIGN
         CVD    6,DWORD                     VSAM COUNT TO DECIMAL
         UNPK   VSCNT(6),DWORD+4(4)         CONVERT TO DISPLAY
         OI     VSCNT+5,X'F0'               SET PROPER SIGN
         CVD    2,DWORD                     CLUSTER COUNT TO DECIMAL
         UNPK   CLSCNT(6),DWORD+4(4)        CONVERT TO DISPLAY
         OI     CLSCNT+5,X'F0'              PROPER SIGN
*  DELETE ALL EXPIRED ENTRIES FROM DSETTAB
         EXEC   SQL  DELETE FROM DSSETTAB WHERE                        X
               ( BKUPDSET < :FIRSTGDG AND BKUPDSET > :FIRSTGD1 )
         L      5,SQLERRD+8                 ROWS DELETED
         CVD    5,DWORD                     CONVERT TO DECIMAL
         UNPK   DELDSET(6),DWORD+4(4)       DISPLAY FORMAT
         OI     DELDSET+5,X'F0'             PROPER SIGN
         LA     2,MSGAREA                   STATISTICAL MESSAGES
         LA     3,6                         NUMBER OF LINES TO PRINT
PUTLOOP  MVC    OUTMSG(50),0(2)             PUT A MESSAGE
         PUT    DSFILE,OUTMSG               PRINT STATISTICS
         LA     2,50(,2)                    POINT TO NEXT MESSAGE
         BCT    3,PUTLOOP
         PUT    DSFILE,VOLUMTAB             LIST OF VOLUMES USED
         CLOSE  (DCOUT,,DSFILE,,AMSPRINT)   CLOSE ALL FILES
         EXEC   SQL COMMIT
         LA     1,IDINU                     DEALLOCATE SYSIN
         DYNALLOC ,
         LA     1,IDPRNTU                   DEALLOCATE SYSPRINT
         DYNALLOC ,
         LA     1,IDCOUTU                   DEALLOCATE DCOUT
         DYNALLOC ,
         B      RETURN                      EXIT
SQLER1   MVC    WTO1+8(80),SQLMSG           DISPLAY MESSAGE
         B      WTO1
WTO1     WTO   '                                                       X
                                        ',ROUTCDE=(1,10),DESC=(6)
         B      EXIT1                       EXIT
*  DISCONNECT FROM DB2
RETURN   L      15,LIALI
         CALL   (15),(CLOSE,TRMOP),VL,MF=(E,CAFCALL)
         L      15,LIALI
         CALL   (15),(DISCON),VL,MF=(E,CAFCALL)
EXIT1    L      13,4(13)                    OLD SAVE AREA ADDRESS
         RETURN (14,12),RC=0                EXIT
*  ROUTINE TO GET A LISTCAT RECORD
GETREC   MVI    LCATREC,C' '                SPACE IN FIRST CHAR
         MVC    LCATREC+1(119),LCATREC      INITIALIZE SPACES
         GET    AMSPRINT,LCATREC1           READ ONE RECORD
         CLC    LCATREC1+71(4),=CL4'TIME'   LISTCAT HEADER?
         BE     GETREC                      THEN SKIP IT
         CLC    LCATREC1+5(25),SPACE        BLANK LINE?
         BE     GETREC                      SKIP THAT ALSO
         BR     8                           RETURN
*  DYNAMIC ALLOCATION ERROR ROUTINE
DALERR   CVD    15,DWORD
         UNPK   ERRORRC(2),DWORD+3(2)       DYN ALLOC RET CODE
         OI     ERRORRC+1,X'F0'             SET SIGN
         USING  S99RB,3                     ADDRESSABILITY TO REQ BLK
         UNPK   ERRCODE,S99ERROR(3)         UNPACK ERROR CODE
         TR     ERRCODE,HEXTOCHR            TRANSLATE TO CHAR FORMAT
         MVI    ERRCODE+L'ERRCODE-1,C' '
         UNPK   ERRINFO,S99INFO(3)          UNPACK INFO CODE
         TR     ERRINFO,HEXTOCHR            TRANSLATE TO CHAR FORMAT
         MVI    ERRINFO+L'ERRINFO-1,C' '
         DROP   3
         MVC    WTO1+8(80),DYNMESS          ERROR MESSAGE
         B      WTO1
*  CONVERT DATE IN YYDDD FORMAT TO YYMMDD FORMAT
DATECNV  STM    14,12,12(13)                SAVE REGS
         LR     2,1                         SAVE PARAMETER REGISTER
         MVC    YYMMDD,SPACE                INITIALIZE SPACES
         CLC    0(4,1),=XL4'00'             IS IT LOW VALUES
         BE     NOCONV                      THEN NO CONVERSION
         UNPK   YYMMDD(5),1(3,1)            GET THE YEAR
         MVC    DWORD2+6(2),2(1)            GET DDDF PART
         CVB    5,DWORD2                    GET DATE IN BINARY
         PACK   DWORD2+6(2),YYMMDD(2)       GET YY IN PACKED FORM
         CVB    7,DWORD2                    GET IN BINARY
         LR     9,7                         SAVE YEAR FOR LATER USE
         SR     6,6                         YEAR IN DOUBLE WORD
         D      6,=F'4'                     CHECK FOR LEAP YEAR
         LTR    6,6                         REMAINDER ZERO?
         BZ     LEAP
         LA     8,YEARTAB                   NON-LEAP YEAR TABLE
         B      *+8
LEAP     LA     8,LEAPTAB                   LEAP YEAR TABLE
         LA     4,1                         INITIALIZE MONTH TO 1
         LTR    5,5                         DATE FIELD ZERO?
         BNZ    NXTMONTH                    IF NOT CONVERT
         MVC    YYMMDD(6),=CL6'000000'      ELSE SET TO ZERO
         B      NOCONV
NXTMONTH CH     5,2(8)                      CHECK ELAPSED DATE
         BNH    MATCH
         LA     8,2(8)                      POINT TO NEXT
         LA     4,1(4)                      PREVIOUS MONTH
         B      NXTMONTH                    CHECK NEXT MONTH
MATCH    SH     5,0(8)                      REMAINING DAYS OF MONTH
         CVD    4,DWORD2
         UNPK   YYMMDD+2(2),DWORD2+6(2)     CONVERT MONTH TO DISPLAY
         OI     YYMMDD+3,X'F0'              SET SIGN BIT
         CVD    5,DWORD2
         UNPK   YYMMDD+4(2),DWORD2+6(2)     CONVERT DATE TO DISPLAY
         OI     YYMMDD+5,X'F0'              SET SIGN BIT
NOCONV   LM     14,12,12(13)
         BR     14
*  DCB DECLARATIONS
DSFILE   DCB   DDNAME=DSFILE,DSORG=PS,MACRF=(PM)
DCOUT    DCB   DDNAME=DCOUT,DSORG=PS,MACRF=(GL),RECFM=VB,              X
               EODAD=DCEND,LRECL=264,BLKSIZE=23476
AMSPRINT DCB   DDNAME=AMSPRINT,DSORG=PS,MACRF=GM,RECFM=VBA,            X
               LRECL=125,BLKSIZE=629
AMSIN    DCB   DDNAME=AMSIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,       X
               BLKSIZE=80
*  IDCAMS COMMAND
LISTCAT  DS    0CL80
         DC    CL17'     LISTCAT ENT('
GDGNAME  DC    CL35' '
         DC    CL28') ALL'
DCOLLECT DS    0CL80
         DC    CL36'     DCOLLECT OUTFILE(DCOUT) VOLUME('
VOLID    DC    CL6' '
         DC    CL38')'
*  ERROR MESSAGES
DYNMESS  DS    0CL80
         DC    CL10'BKUPINFO: '
ALOCDD   DS    CL8
         DC    CL28' ALLOCATION ERROR - RETCD='
ERRORRC  DC    CL3' ',CL10'ERR CODE ='
ERRCODE  DC    CL5' ',CL11'INFO CODE ='
ERRINFO  DC    CL5' '
OPENERR  DC    CL80'BKUPINFO: - ERROR IN OPENING IDCAMS OUTPUT FILES'
AMSERR   DC    CL80'BKUPINFO: - ERROR IN PROCESSING IDCAMS PROGRAM'
SQLMSG   DC    CL80'BKUPINFO: - ERROR IN PROCESSING SQL'
*  STATISTICS MESSAGES
MSGAREA  DS    0CL300                       STATISTICAL MESSAGES
         DC    CL44'NUMBER OF NON VSAM DATASETS PROCESSED = '
NVSCNT   DS    CL6
         DC    CL44'NUMBER OF  VSAM COMPONENTS PROCESSED  = '
VSCNT    DS    CL6
         DC    CL44'NUMBER OF  VSAM CLUSTERS PROCESSED    = '
CLSCNT   DS    CL6
         DC    CL44'NUMBER OF BACKUP GDG''S DELETED        = '
DELGDG   DS    CL6
         DC    CL44'NUMBER OF DATASETS IN DELETED GDG''S   = '
DELDSET  DS    CL6
         DC    CL50'TAPE REELS USED                       = '
OUTMSG   DC    CL120' '
OPTIONS  DC    H'0,0'                       OPTIONS IN IDCAMS
DDNAMES  DC    H'48'                        DDNAMES FOR IDCAMS
         DC    32X'00'
         DC    CL8'AMSIN',CL8'AMSPRINT'
*  DYNAMIC ALLOCATION PARAMETER FOR AMSPRINT
         DS    0D
IDCPRINT DC    AL1(X'80'),AL3(IDCPRNTA)
IDCPRNTA DC    AL1(20),AL1(S99VRBAL),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCPRNTX),AL4(0),AL4(0)
IDCPRNTX DC    AL4(DDNM1)                   DDNAME
         DC    AL4(STAT1),AL4(DISP1),AL4(DISP2),AL4(UNIT),AL4(TRAX)
         DC    AL1(X'80'),AL3(SPC1)         SPACE ALLOCATED
*  DYNAMIC ALLOCATION PARAMETER FOR AMSIN
         DS    0D
IDCIN    DC    AL1(X'80'),AL3(IDCINA)
IDCINA   DC    AL1(20),AL1(S99VRBAL),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCINX),AL4(0),AL4(0)
IDCINX   DC    AL4(DDNM2)                   DDNAME
         DC    AL4(STAT1),AL4(DISP1),AL4(DISP2),AL4(UNIT),AL4(TRAX)
         DC    AL1(X'80'),AL3(SPC2)
*  DYNAMIC ALLOCATION PARAMETER FOR DCOUT
         DS    0D
IDCOUT   DC    AL1(X'80'),AL3(IDCOUTA)
IDCOUTA  DC    AL1(20),AL1(S99VRBAL),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCOUTX),AL4(0),AL4(0)
IDCOUTX  DC    AL4(DDNM3)                   DDNAME
         DC    AL4(STAT1),AL4(DISP1),AL4(DISP2),AL4(UNIT),AL4(TRAX)
         DC    AL4(RECFM3),AL4(LRECL3),AL4(BLKSZ3)
         DC    AL1(X'80'),AL3(SPC3)
*  DYNAMIC DE-ALLOCATION PARAMETER FOR AMSPRINT
IDPRNTU  DC    AL1(X'80'),AL3(IDPRNTUA)
IDPRNTUA DC    AL1(20),AL1(S99VRBUN),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDPRNTUX),AL4(0),AL4(0)
IDPRNTUX DC    AL4(DDNMU1)                  DDNAME
         DC    AL1(X'80'),AL3(DISPU1)
*  DYNAMIC DE-ALLOCATION PARAMETER FOR AMSIN
IDINU    DC    AL1(X'80'),AL3(IDINUA)
IDINUA   DC    AL1(20),AL1(S99VRBUN),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDINUX),AL4(0),AL4(0)
IDINUX   DC    AL4(DDNMU2)                  DDNAME
         DC    AL1(X'80'),AL3(DISPU1)
*  DYNAMIC DE-ALLOCATION PARAMETER FOR DCOUT
IDCOUTU  DC    AL1(X'80'),AL3(IDCOUTUA)
IDCOUTUA DC    AL1(20),AL1(S99VRBUN),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCOUTUX),AL4(0),AL4(0)
IDCOUTUX DC    AL4(DDNMU3)                  DDNAME
         DC    AL1(X'80'),AL3(DISPU1)
*  DYNAMIC ALLOCATION TEXT UNITS
DDNM1    DC    AL2(DALDDNAM),AL2(1),AL2(8),CL8'AMSPRINT'   DDNAME
DDNM2    DC    AL2(DALDDNAM),AL2(1),AL2(5),CL8'AMSIN'        "
DDNM3    DC    AL2(DALDDNAM),AL2(1),AL2(5),CL8'DCOUT'        "
STAT1    DC    AL2(DALSTATS),AL2(1),AL2(1),X'04'           STAT = NEW
DISP1    DC    AL2(DALNDISP),AL2(1),AL2(1),X'04'     NOR DISP=DELETE
DISP2    DC    AL2(DALCDISP),AL2(1),AL2(1),X'04'     COND DISP=DELETE
UNIT     DC    AL2(DALUNIT),AL2(1),AL2(8),C'SYSALLDA'  UNIT=SYSALLDA
TRAX     DC    AL2(DALTRK),AL2(0)                      TRK ALLOCATION
RECFM3   DC    AL2(DALRECFM),AL2(1),AL2(1),X'50'           RECFM=VB
LRECL3   DC    AL2(DALLRECL),AL2(1),AL2(2),XL2'108'        LRECL=264
BLKSZ3   DC    AL2(DALBLKSZ),AL2(1),AL2(2),XL2'2000'       BLK=8192
SPC1     DC    AL2(DALPRIME),AL2(1),AL2(3),X'00000F'       15 TRKS
SPC2     DC    AL2(DALPRIME),AL2(1),AL2(3),X'000001'       1 TRACK
SPC3     DC    AL2(DALPRIME),AL2(1),AL2(3),X'00000F'       15 TRKS
*  DYNAMIC DEALLOCATION TEXT UNITS
DDNMU1   DC    AL2(DUNDDNAM),AL2(1),AL2(8),CL8'AMSPRINT'   DDNAME
DDNMU2   DC    AL2(DUNDDNAM),AL2(1),AL2(5),CL5'AMSIN'      DDNAME
DDNMU3   DC    AL2(DUNDDNAM),AL2(1),AL2(5),CL5'DCOUT'      DDNAME
DISPU1   DC    AL2(DUNOVDSP),AL2(1),AL2(1),X'04'           DISP
         LTORG
HEXTOCHR EQU  *-C'0'
         DC    C'0123456789ABCDEF'
TAPETAB   DS    0CL184                      TAPETAB TABLE DEFINITION
BKPDSET   DS    CL44                        CURRENT GDG
DISKVOL   DS    CL6                         DASD VOLUME NAME
BKPDATE   DS    CL6                         BACKUP DATE
BKPTIME   DS    CL6                         BACKUP TIME
REELID    DS    H,CL120                     REELID FIELD IN TAPETAB
DSETTAB   DS    0CL101                      DSETTAB TABLE DEFINITION
DSETNAME  DS    CL44                        DATASET BACKED UP
CREDATE   DS    CL6                         CREATION DATE
REFDATE   DS    CL6                         REFERENCE DATE
DSETTYPE  DS    CL1                         DATASET TYPE
BKUPDSET  DS    CL44                        CURRENT GDG
BKPTIMEP  DS    F                           BACKUP TIME IN PACK DEC
CURDATE   DS    F                           TODAY'S DATE IN 00YYDDDF
YYMMDD    DS    CL6                         DATE IN YYMMDD FORMAT
VOLUMTAB  DS    15CL8' '                    VOLUMES FOR CURRENT GDG
TEMP      DS    CL8                         TEMPORARY AREA FOR SORT
DWORD     DS    D                           WORK AREA
DWORD2    DC    D'0'                        WORK AREA FOR DATECNV
YEARTAB   DC    H'000',H'031',H'059',H'090',H'120',H'151'
          DC    H'181',H'212',H'243',H'273',H'304',H'334',H'365'
LEAPTAB   DC    H'000',H'031',H'060',H'091',H'121',H'152'
          DC    H'182',H'213',H'244',H'274',H'305',H'335',H'366'
SAVE      DS    18F                         REGISTER SAVE AREA
SPACE     DC    CL120' '                    DUMMY BLANK AREA
GDGLEN    DS    H                           LENGTH OF GDG BASE
LCATREC1  DS    CL125                       LISTCAT RECORD
          ORG   LCATREC1+5
LCATREC   DS    CL120
FIRSTGDG  DS    CL44                        FIRST VERSION OF BACKUP GDG
FIRSTGD1  DC    CL44' '
LASTGDG   DS    CL44                        LAST GDG OF LISTCAT
*  DEFINIIONS FOR DB2 CALL ATTACHMENT FACILITY
SECB      DS    F
TECB      DS    F
LIALI     DS    F
LISQL     DS    F
RIBPTR    DS    F
SAVEHLI   DS    18F                         SAVE AREA FOR DSNHLI
SSID      DC    CL4'DBXX'                   DB2 SUBSYSTEM ID
PLAN      DC    CL8'BINFPLAN'               PLAN FOR THIS PROGRAM
TRMOP     DS    CL4
CONNECT   DC    CL12'CONNECT'               CONNECT CALL TO DB2
OPEN      DC    CL12'OPEN'                  OPEN PLAN
CLOSE     DC    CL12'CLOSE'                 CLOSE PLAN
DISCON    DC    CL12'DISCONNEC'             DISC FROM DB2
          EXEC  SQL INCLUDE SQLCA
CAFCALL   CALL   ,(*,*,*,*,*),VL,MF=L
          DS    0D
DSNHLI    CSECT
          STM   14,12,12(13)                SAVE REGS
          LA    15,SAVEHLI                  HLI SAVE AREA ADDRESS
          ST    13,4(,15)                   FORWARD POINTER
          ST    15,8(,13)                   BACKWARD POINTER
          LR    13,15                       CURRENT SAVE AREA ADDRESS
          L     15,LISQL                    SQL LANG INTERFACE
          BALR  14,15                       BRANCH TO IT
          L     13,4(,13)                   PREVIOUS SAVE AREA ADDR
          L     14,12(,13)                  RESTORE  REGS
          RETURN  (1,12)                    RETURN
          IDCDOUT                           DCOLLECT RECORD LAYOUT
          IEFZB4D0                          MACROS FOR SVC 99
          IEFZB4D2
BKUPINFO  CSECT
          END   BKUPINFO


M V George
Systems Programmer
Ministry of Interior (Qatar)                               c Xephon 1993

