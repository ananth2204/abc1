Adding user-defined edit models to ISPF

One of the most effective approaches to increasing productivity is
to reuse resources rather than crafting them anew each time they
are needed. It is common practice to keep an ever-growing library
of JCL to run all kinds of jobs from AMBLISTs to ZAPs. But
what if you have never run a particular utility program before, or
what if your personal version of IEBGENER only does a straight
copy, but now you need to copy certain fields of each input record
to different locations in the output record? Maybe you ask your
colleagues if they have versions which more closely match your
immediate needs. As a last resort, however, you will have to locate
and study the utilities manual, hand code the control cards and
perhaps the JCL as well from scratch, and enter a debugging
cycle that is certain to include at least one instance of a
continuation card not starting exactly in column 16.

ISPF has built-in statement models which can be easily brought
into an edit session and made a part of the edited text by the
MODEL command. In addition to data lines containing model
statements, the MODEL command brings along with it note lines
which contain explanatory information that aids in the
customization of the supplied model or example. The note lines
do not become a part of the edited text and are not saved when the
data is saved (unless they are turned into data lines with the
MakeData (MD) line command).

Although the models supplied by IBM as part of ISPF deal
mostly with invoking ISPF services from different language
environments, like executing ISPEXEC TBCREATE from
Fortran or COBOL, the facility can easily be extended to include
installation-authored models of anything thought to be useful and
time-saving. Such local models can also serve to encourage
adherence to shop standards. Models can be created for individual
JCL statements, non-ISPF related programming language
statements, textual 'boilerplate', or, as in the example provided
here, complete job steps for running IBM utility programs along
with notes describing how to code the most frequently used
options.

The model facility is invoked from within an ISPF edit session.
Place an 'a' or a 'b' in the prefix area of the line where you want
the model to appear. Enter the MODEL command on the
command line or assign it to a function key if it is used often. If
the last level of qualification of the name of the dataset being
edited matches one of the classes supported by modelling, you
will be presented with a selection panel of available models from
which to choose. If the modelling facility cannot determine from
the dataset naming convention the class of model which is
appropriate, a menu of supported model classes is presented via
panel ISREMCLS as follows.

ISREMCLS ------------------  MODEL CLASSES  ---------------------------
OPTION  ===>

   1  CLIST       - ISPF services in CLIST commands
   2  COBOL       - ISPF services in COBOL programs
   3  EXEC        - ISPF services in EXEC commands
   4  FORTRAN     - ISPF services in FORTRAN programs
   5  MSGS        - Message format
   6  PANELS      - Panel formats and statements
   7  PLI         - ISPF services in PLI programs
   8  SKELS       - File tailoring control statements
   9  PASCAL      - ISPF services in PASCAL programs
  10  REXX        - ISPF services in TSO/REXX commands
  11  DTL         - ISPF Dialog Tag Language formats and statements
  12  C           - ISPF services in C/370 programs
  13  SCLM        - SCLM Project Definition Macros
  14  ARCHDEF     - SCLM Architecture Definition templates
  15  JCL         - JCL for selected utility programs

Enter END command to cancel MODEL command.

After a class is selected, the item to be modelled can be selected
just as in the case where the class was determined from the DSN.
The selected model then appears in the edited text after or before
the indicated line along with its explanatory notes.

Creating your own model class and models

Use the editor to create a member containing your new model.
Model statements should be entered exactly as you want them to
appear when called in by the user. Note lines are created by
simply beginning them with '(N' followed by at least one space.
Save the following sample model of an IEBGENER step in a
member named MIEBGENE in a library in the ISPSLIB
concatenation of your log-on PROC.

//GENERXX  EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DISP=SHR,DSN=INPUT.DATA.SET.NAME
//SYSUT2   DD DSN=OUTPUT.DATA.SET.NAME,
//            DISP=(NEW,CATLG,DELETE),
//            UNIT=TEST,
//            VOL=SER=000000,
//            SPACE=(TRK,(10,10),RLSE),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)
//SYSIN    DD DUMMY
)N         If SYSIN is dummied, a simple sequential copy takes place
)N
//SYSIN    DD *
               GENERATE MAXFLDS=2,MAXNAME=1
               RECORD   FIELD=(8,73,,1),FIELD=(72,1,,9)
)N             RECORD   FIELD=({length}
)N                             {,input-location ] 'literal'}
)N                             {,conversion}
)N                             {output-location})
)N             The above example moves columns 73 - 80 of the input
)N             record to columns 1 - 8 of the output record and
)N             columns 1 - 72 of the input to columns 9 - 80 of output.
               MEMBER   NAME=membname
)N             Operation will apply to above named member only

Copy panel ISREMCLS from ISR.V3R2M0.ISRPLIB into a user
library that comes earlier in the ISPPLIB concatenation where
you will modify it. The modified panel with the changes to add a
new model class called JCL would appear like this.

)ATTR
)BODY
%---------------------------  MODEL CLASSES  -----------------------------------
%OPTION  ===>_ZCMD                                                             %
%
%   1 +CLIST       - ISPF services in CLIST commands
%   2 +COBOL       - ISPF services in COBOL programs
%   3 +EXEC        - ISPF services in EXEC commands
%   4 +FORTRAN     - ISPF services in FORTRAN programs
%   5 +MSGS        - Message format
%   6 +PANELS      - Panel formats and statements
%   7 +PLI         - ISPF services in PLI programs
%   8 +SKELS       - File tailoring control statements
%   9 +PASCAL      - ISPF services in PASCAL programs
%  10 +REXX        - ISPF services in TSO/REXX commands
%  11 +DTL         - ISPF Dialog Tag Language formats and statements
%  12 +C           - ISPF services in C/370 programs
%  13 +SCLM        - SCLM Project Definition Macros
%  14 +ARCHDEF     - SCLM Architecture Definition templates
%  15 +JCL         - JCL for selected utility programs (USER-ADDED)
+
+Enter%END+command to cancel MODEL command.+
)INIT
  .CURSOR = ZCMD
  .HELP = ISR2P100
  .MSG = '        '                /*   BLANK MSG INITIALLY           */
  &ISRMCLAS = '        '           /*   AND THE CLASS HOLDER VARIABLE */
)PROC
  IF (&ISRMONCL = 'Y')             /* ARE WE ONLY OBTAINING A CLASS ? */
      &ISRMCLAS = TRANS(TRUNC(&ZCMD,'.')  1,CLIST 2,COB 3,EXEC 4,FORT
         5,MSGS 6,PANELS 7,PLI 8,SKELS 9,PASCAL 10,REXX 11,DTL 12,C
         13,SCLM 14,ARCHDEF 15,JCL *,*) /* USER UPDATED */
                                   /*                         @H1C@H5C*/
      &TMPTRAIL = .TRAIL           /* Save any remaining          @H1A*/
  IF (&ISRMONCL ^= 'Y')     /* ARE WE ONLY OBTAINING A CLASS ? OZ83844*/
       &ISRMDSPL = '        '
  &ZSEL = TRANS(TRUNC (&ZCMD,'.')  /* FOLLOW SELECTION TO NEXT PANEL  */
         1,'PANEL(ISREMCMD)'
     CLIST,'PANEL(ISREMCMD)'       /*  CLIST UNDER COMMAND SERVICES   */
         2,'PANEL(ISREMCOB)'
       COB,'PANEL(ISREMCOB)'       /*  COBOL PROGRAM SERVICE MODELS   */
     COBOL,'PANEL(ISREMCOB)'
         3,'PANEL(ISREMEXC)'
      EXEC,'PANEL(ISREMEXC)'       /* Exec function services          */
     EXEC2,'PANEL(ISREMEXC)'
         4,'PANEL(ISREMFTN)'
       FTN,'PANEL(ISREMFTN)'       /*  FORTRAN PROGRAM SERVICE MODELS */
      FORT,'PANEL(ISREMFTN)'
   FORTRAN,'PANEL(ISREMFTN)'
         5,'PGM(ISRECMBR) PARM(ISREMMSG)'   /*   GO RIGHT OUT TO GET  */
      MSGS,'PGM(ISRECMBR) PARM(ISREMMSG)'   /*    THE MSG MODEL       */
         6,'PANEL(ISREMPNL)'
     MENUS,'PANEL(ISREMPNL)'       /*   OLD TYPE PANELS               */
    PANELS,'PANEL(ISREMPNL)'
         7,'PANEL(ISREMPLI)'
       PLI,'PANEL(ISREMPLI)'       /* PLI FOR TSO AND MVS(DEFAULT)    */
       PL1,'PANEL(ISREMPLI)'       /* PL1 FOR TSO AND FOR DOS         */
    PLIOPT,'PANEL(ISREMPLI)'       /* PLIOPT DOES HAVE SOME USAGE YET */
       PLS,'PANEL(ISREMPLI)'       /* PLS OPTION IS TEMPORARY FOR NOW */
         8,'PANEL(ISREMSKL)'
     PROCS,'PANEL(ISREMSKL)'
     SKELS,'PANEL(ISREMSKL)'       /* FOR BOTH PROCS AND SKELS        */
         9,'PANEL(ISREMPAS)'
    PASCAL,'PANEL(ISREMPAS)'       /* PASCAL PROGRAM SERVICE MODELS   */
        10,'PANEL(ISREMRXC)'
      REXX,'PANEL(ISREMRXC)'       /* REXX   PROGRAM SERVICE MODELS   */
        11,'PANEL(ISREMDTL)'
       DTL,'PANEL(ISREMDTL)'       /* DTL   PROGRAM SERVICE MODELS@H4A*/
        12,'PANEL(ISREMWLN)'       /*                             @H6A*/
         C,'PANEL(ISREMWLN)'       /* C Lang                      @H6A*/
        13,'PANEL(ISREMFLM)'       /* SCLM Macro models           @H7A*/
    SOURCE,'PANEL(ISREMFLM)'       /* SCLM Macro models           @H7A*/
        14,'PANEL(ISREMARC)'       /* SCLM Architecture Defs      @H7A*/
   ARCHDEF,'PANEL(ISREMARC)'       /* SCLM Architecture Defs      @H7A*/
        15,'PANEL(ISREMJCL)'       /* JCL utility programs USER ADDED */
       JCL,'PANEL(ISREMJCL)'       /* JCL utility programs USER ADDED */
       ' ',' '
         *,'?' )
  IF (&ZSEL = '?')
               /* IF (&ISRMDSPL ^= 'RETURN' ) ** REPLACED BY OY33372*/
    IF (&ZMACRO = 'N' )            /*                        0Y33372*/
      &ZEMTEMP = &ZCMD             /* SET VARIABLE FOR MSG   OZ91267*/
      .MSG = ISRYM012
      &ZCMD = ' '                  /* RESET CMD LINE = BLANK OZ91267*/
      .RESP = 'ENTER'              /* WANT TO RESET RESP FOR RE-ENT */
                /* IF (&ISRMDSPL = 'RETURN' ) ** REPLACED BY OY33372*/
    ELSE                           /*                        OY33372*/
      .RESP = 'END'
      &ISRMCLAS = '?'
      .MSG = ISRYM012              /* INVALID CLASS          OY33372*/
  &ISRMMEND = 'N'                  /* SET THE END INDICATOR TO NO   */
  IF (.RESP = END)                 /* DID WE GET AN END FROM WHERE  */
      IF (&ISRMDSPL ^= 'RETURN  ') /* WAS IT BECAUSE WE HAVE MEMBER */
        &ISRMMEND = 'Y'            /* IT'S BECAUSE USER HIT END KEY */
  IF (&ISRMONCL = 'Y')             /* ARE WE ONLY OBTAINING A CLASS */
     IF (.RESP ^= 'RETURN  ')      /* Has user hit extended return  */
       IF (&ISRMCLAS ^= '        ') /* Make sure we have some class */
          IF (&TMPTRAIL = ' ')     /* Just class entered        @H1A*/
             .RESP = END          /* ONLY WANT CLASS, NO OTHER DISP.*/
          IF (&TMPTRAIL ^= ' ')    /* More than class entered   @H1A*/
             &ZEMTEMP = &ZCMD      /* Set variable for message  @H1A*/
             .MSG = ISRYM012       /* Set message number        @H1A*/
             &ZCMD = ' '           /* Reset cmd lint = blank    @H1A*/
             .RESP = 'ENTER'       /* Reset RESP to Re-enter    @H1A*/
  &ZMSG = .MSG                     /* SET MESSAGE VARIABLE      @L1A*/
  VPUT(ZMSG) PROFILE               /* SAVE MESSAGE IN PROF POOL @L1A*/
)END

In your user ISPPLIB, create the model selection panel for the
JCL class named ISREMJCL. The first five characters of the
name must be ISREM and the last three must be the same as the
first three characters of the new class name in order for ISPF to
locate it automatically based on the name of the edited dataset. A
possible version of ISREMJCL derived by modifying
ISREMDTL might look like this.

%------------------------  JCL MODELS FOR UTILITY PROGRAMS ---------------------
%OPTION  ===>_ZCMD                                                             +
%
%  UTILITY PROGRAMS:
%  J1 +IEBGENER      - Copy sequential data sets with or without changes
%  J2 +IEBCOPY       - Copy PDS members or a whole PDS - may reblock
%  J3 +IEBUPDTE      - Update members of a PDS
%  J4 +IEHPROGM      - Catalog and VTOC services
%  J5 +IEV90         - 370 Assembler
%  J6 +IEWL          - 370 Linkage Editor
%
+
+Enter%END+command to cancel MODEL command.+
%
)INIT
  .CURSOR = ZCMD
  .HELP = ISR2P200
  IF (&ISRMDSPL = 'RETURN  ')
      .RESP = END
)REINIT
 REFRESH(ZCMD)
)PROC
  IF (&ZCMD = 'SELECTION')
      &TMP = TRUNC (&ZCMD,'.')
      &ZCMD = TRUNC (&ZCMD,8)
  &ZSEL = TRANS(TRUNC (&ZCMD,'.')
        J1,'PGM(ISRECMBR) PARM(MIEBGENE)'
  IEBGENER,'PGM(ISRECMBR) PARM(MIEBGENE)'
        J2,'PGM(ISRECMBR) PARM(MIEBCOPY)'
   IEBCOPY,'PGM(ISRECMBR) PARM(MIEBCOPY)'
        J3,'PGM(ISRECMBR) PARM(MIEBUPDT)'
  IEBUPDTE,'PGM(ISRECMBR) PARM(MIEBUPDT)'
 SELECTION,'PGM(ISRECMBR) PARM(ISREMDP3)'
        J4,'PGM(ISRECMBR) PARM(MIEHPROG)'
  IEHPROGM,'PGM(ISRECMBR) PARM(MIEHPROG)'
  TUTORIAL,'PGM(ISRECMBR) PARM(ISREMDP4)'
        J5,'PGM(ISRECMBR) PARM(MIEV90)'
     IEV90,'PGM(ISRECMBR) PARM(MIEB90)'
     TABLE,'PGM(ISRECMBR) PARM(ISREMDP5)'
        J6,'PGM(ISRECMBR) PARM(MIEWL)'
      IEWL,'PGM(ISRECMBR) PARM(MIEWL)'
   COMMAND,'PGM(ISRECMBR) PARM(ISREMDC1)'
         *,'?')
  IF (&ZSEL = '?')
     &ZEMTEMP = &ZCMD
     .MSG = ISRYM013
     &ZCMD = ' '
     IF (&ZMACRO = 'Y')             /* IF A MACRO COMMAND     OY27220*/
       .RESP = 'END'                /* DON'T DISPLAY ERROR    OY27220*/
       &ISRMMEMB = '?'              /* INDICATE NO MEMBER FND OY27220*/
  &ISRMMEND = 'N'                   /* SET THE END INDICATOR TO NO    */
  IF (.RESP = END)                  /* IF ENDING, WHY ... WHO CAUSED  */
    IF (&ISRMONCL ^= 'Y')           /* MAKE SURE IT'S NOT A CLASS OP. */
      IF (&ISRMDSPL ^= 'RETURN  ')  /* MAKE SURE IT'S NOT END ON MBR. */
        &ISRMMEND = 'Y'             /* NO - IT'S BECAUSE USER HIT END */
  &ZMSG = .MSG                      /* Set message variable           */
  VPUT(ZMSG) PROFILE                /* Save message in prof pool      */
)END

In the PROC section of the panel the user input is associated with
the name of the member, MIEBGENE, of ISPSLIB, which
contains the model text. Now, whenever you are editing a dataset
whose name ends in '.JCL' and you enter the 'model iebgener'
command, the model selection panel, ISREMJCL, will be
displayed like this:

ISREMJCL ---------------  JCL MODELS FOR UTILITY PROGRAMS -------------
OPTION  ===>

  UTILITY PROGRAMS:
  J1  IEBGENER      - Copy sequential datasets with or without changes
  J2  IEBCOPY       - Copy PDS members or a whole PDS - may reblock
  J3  IEBUPDTE      - Update members of a PDS
  J4  IEHPROGM      - Catalog and VTOC services
  J5  IEV90         - 370 Assembler
  J6  IEWL          - 370 Linkage Editor


Enter END command to cancel MODEL command.

and you can select the IEBGENER model by entering J1. An
even more direct method would be to enter 'model iebgener' as
an edit primary command (along with an 'a' or 'b' line
command) to bypass all panel interactions entirely. Below is the
final result within the original edit screen.

ISREDDE - TS21JJC.TEST.JCL(MODELTST) ------------------------- COLUMNS 001 072
COMMAND ===>                                                  SCROLL ===> CSR
****** ***************************** TOP OF DATA ******************************
000001 //GENERXX  EXEC PGM=IEBGENER
000002 //SYSPRINT DD SYSOUT=*
000003 //SYSUT1   DD DISP=SHR,DSN=INPUT.DATA.SET.NAME
000004 //SYSUT2   DD DSN=OUTPUT.DATA.SET.NAME,
000005 //            DISP=(NEW,CATLG,DELETE),
000006 //            UNIT=TEST,
000007 //            VOL=SER=000000,
000008 //            SPACE=(TRK,(10,10),RLSE),
000009 //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)
000010 //SYSIN    DD DUMMY
=NOTE=            If SYSIN is dummied, a simple sequential copy takes place
=NOTE=
000011 //SYSIN    DD *
000012                GENERATE MAXFLDS=2,MAXNAME=1
000013                RECORD   FIELD=(8,73,,1),FIELD=(72,1,,9)
=NOTE=                RECORD   FIELD=({length}
=NOTE=                                {,input-location ] 'literal'}
=NOTE=                                {,conversion}
=NOTE=                                {output-location})
=NOTE=                The above example moves columns 73 - 80 of the input
=NOTE=                record to columns 1 - 8 of the output record and
=NOTE=                columns 1 - 72 of the input to columns 9 - 80 of output.
000014                MEMBER   NAME=membname
=NOTE=                Operation will apply to above named member only
****** **************************** BOTTOM OF DATA ****************************


John Cornman
Systems Programmer (USA)                                            c Xephon 1994

