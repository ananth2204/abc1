Analysing DFSORT SMF records


PROGRAM SOURCE CODE

         TITLE 'EXTSMF16 - EXTRACT AND ANALYZE SMF TYPE 16 RECORDS'
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CSECT   : EXTSMF16                                                  *
* MODULE  : EXTSMF16                                                  *
* AUTHOR  : ENTERPRISE DATA TECHNOLOGIES                              *
* DESC    : EXTSMF16 IS A ROUTINE THAT EXTRACTS SMF TYPE 16 RECORDS   *
*           WHICH ARE CREATED BY DFSORT.  THE RESULTING REPORT CAN BE *
*           USED TO LOOK FOR JOBS THAT MAY BE MAKING POOR USE OF RE-  *
*           SOURCES SUCH AS DASD, HIPER AND DATASPACES.               *
* MACROS  : $ESAPRO $ESAEPI $ESASTG OPEN CLOSE DCB DCBD DCBE ICESMF   *
* DSECTS  : ICESMFH ICESMFD                                           *
* INPUT   : FILE CONTAINING SMF RECORDS                               *
* OUTPUT  : REPORT FILE, FILE WITH TYPE 16 RECORDS                    *
* PLIST   : NONE                                                      *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
*                                      INSERT PROLOG CODE
EXTSMF16 $ESAPRO R12,AM=31,RM=24
*                                      OPEN UP THE FILES
         OPEN  (UT1,(INPUT),UT2,(OUTPUT),UT3,(OUTPUT)),MODE=31
*                                      SET UP SOME BASE REGISTERS
         USING ICESMFH,R8              ESTABLISH ADDRESSABILITY
         USING ICESMFD,R9              ESTABLISH ADDRESSABILITY
         MVC   SMF16_A(L'P_ZERO*#CNTRS),P_ZERO ZERO ALL THE COUNTERS
         LA    R4,1                    SET UP R4 FOR HEADER CONTROL
*                                      READ IN INPUT RECORD
LOOP_UT1 DS    0H
         GET   UT1
         LR    R8,R1                   GET @(CURRENT RECORD)
         CLC   =XL2'0000',ICERDW+2     Q. VALID RDW?
         BNE   LOOP_UT1                A. NO, GET NEXT RECORD
         CLC   ICERTYP,TYPE16          Q. RECORD TYPE 16?
         BNE   LOOP_UT1                A. NO, GET NEXT RECORD
*                                WRITE SORT RECORD TO SECONDARY FILE
         PUT   UT2,ICESMFH
         AP    SMF16_A,P_ONE           INCREMENT RECORD COUNTER
         MVI   O_BUFF,C' '             BLANK IN FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF-1),O_BUFF BLANKS IN REST OF BUFFER
         TM    PROD_FLG,BITX80         Q. DO WE HAVE PRODUCT INFO
         BO    C_DATN                  A. ALREADY HAVE IT
         CLC   ICEPRODL,=XL2'0000'     Q. PRODUCT SECTION PRESENT
         BE    C_DATN                  A. NO, GO CHECK FOR DATA SECN.
         L     R9,ICEPROD              GET OFFSET TO PRODUCT SECTION
         AR    R9,R8                   POINT TO PRODUCT SECTION
         MVC   PRDCT,ICEPRDCT-ICESMFP(R9) GET THE PRODUCT
         MVC   RELNM,ICERELNM-ICESMFP(R9) GET THE RELEASE NUMBER
         MVI   PROD_FLG,BITX80         SET ON HIGH-ORDER BIT
C_DATN   DS    0H
         CLC   ICEDATAN,=XL2'0000'     Q. DATA SECTION PRESENT
         BE    LOOP_UT1                A. NO, GET NEXT RECORD
         MVC   JOBNMICE,ICEJOBNM       PICK UP THE JOB NAME
         L     R9,ICEDATA              GET OFFSET TO DATA SECTION
         AR    R9,R8                   COMPUTE @(DATA SECTION)
         TM    ICEFLBY2,ICESORT        Q. SORT OPERATION
         BNO   CHK_MERG                A. NO, SEE IF MERGE
         AP    SMF16_S,P_ONE           INCREMENT COUNTER
         MVC   OPERICE,L_SORT          MOVE LITERAL TO OUTPUT
         B     NOT_CFW                 BRANCH DOWN
CHK_MERG DS    0H
         TM    ICEFLBY2,ICEMERG        Q. MERGE OPERATION
         BNO   NOT_MERG                A. NO, SEE IF COPY
         AP    SMF16_M,P_ONE           INCREMENT COUNTER
         B     LOOP_UT1                GET NEXT RECORD
NOT_MERG DS    0H
         AP    SMF16_C,P_ONE           INCREMENT COUNTER
         B     LOOP_UT1                GET NEXT RECORD
NOT_CFW  DS    0H
         TM    ICEFLBY3,ICEHSSRT       Q. HIPERSPACE UTILIZED
         BNO   CHK_DSS                 A. NO, GO CHECK FOR DATASPACE
         ICM   R7,B'1111',ICEHSPU      PICK UP HIPERSPACE PAGES USED
         CVD   R7,D_WORK               CONVERT IT TO DECIMAL
         MVC   HSPUICE,E_P2            MOVE IN THE EDIT PATTERN
         ED    HSPUICE,D_WORK+5        EDIT DATA INTO PATTERN
         MVC   HSSICE,L_HSS            INDICATE HIPERSPACE UTILIZED
         AP    SMF16_HS,P_ONE          INCREMENT COUNTER
CHK_DSS  DS    0H
         TM    ICEFLBY3,ICEDSSRT       Q. DATASPCAE UTILIZED
         BNO   NOT_DSS                 A. NO
         ICM   R7,B'1111',ICEDSPU      PICK UP DATASPACE PAGES USED
         CVD   R7,D_WORK               CONVERT IT TO DECIMAL
         MVC   DSPUICE,E_P2            MOVE IN THE EDIT PATTERN
         ED    DSPUICE,D_WORK+5        EDIT DATA INTO PATTERN
         MVC   DSSICE,L_DSS            INDICATE DATASPACE UTILIZED
         AP    SMF16_DS,P_ONE          INCREMENT COUNTER
NOT_DSS  DS    0H
         MVC   STPNMICE,ICESTPNM       GET THE STEP NAME
         ICM   R7,B'1111',ICERCDS      PICK UP # RECORDS SORTED
         CVD   R7,D_WORK               CONVERT IT TO DECIMAL
         MVC   RCDSICE,E_P1            MOVE IN THE EDIT PATTERN
         ED    RCDSICE,D_WORK+3        NOW EDIT THE FIELD
*                                      GET THE INITIAL SORTWORK
         ICM   R7,B'1111',ICEWALLS     ALLOCATED AMOUNT
         CVD   R7,D_WORK               CONVERT TO DECIMAL
         MVC   WALLSICE,E_P2           MOVE IN THE EDIT PATTERN
         ED    WALLSICE,D_WORK+5       APPLY THE PATTERN
*                                      GET THE FINAL SORTWORK
         ICM   R7,B'1111',ICEWALLE     ALLOCATED AMOUNT
         CVD   R7,D_WORK               CONVERT TO DECIMAL
         MVC   WALLEICE,E_P2           MOVE IN THE EDIT PATTERN
         ED    WALLEICE,D_WORK+5       APPLY THE PATTERN
*                                      GET THE TOTAL NUMBER OF WORK
         ICM   R7,B'1111',ICEWBLK      DATASET TRACKS USED
         CVD   R7,D_WORK               CONVERT TO DECIMAL
         MVC   WBLKICE,E_P2            MOVE IN THE EDIT PATTERN
         ED    WBLKICE,D_WORK+5        APPLY THE PATTERN
         MVC   INVKICE,L_PGM           ASSUME SORT WAS PGM. INVOKED
         TM    ICEFLBYT,ICEVOKED       Q. HOW WAS IT INVOKED
         BNO   JCL_VOK                 A. JCL INVOKED
         AP    SMF16_P,P_ONE           A. PROGRAM INVOKED
         B     PGM_VOK                 BRANCH DOWN
JCL_VOK  DS    0H
         MVC   INVKICE,L_JCL           SET JCL INVOKED
         AP    SMF16_J,P_ONE           INCREMENT THE COUNTER
PGM_VOK  DS    0H
*                                      Q. WAS THE SORTING OPERATION
         TM    ICEFLBYT,ICEINMEM          COMPLETED IN MEMORY?
         BNO   WRK_USED                A. NO WORK DATASETS USED
         MVC   MEMICE,L_MEM            A. YES, MOVE IN LITERAL
         AP    SMF16_IM,P_ONE          INCREMENT THE COUNTER
WRK_USED DS    0H
*                                      Q. WERE THE SORT WORK DATA
         TM    ICEWKFLG,ICEWKDYN          SETS DYNAMICALLY ALLOCATED
         BNO   CFW_USED                A. NO
         MVC   DYNICE,L_DYN            A. YES, MOVE IN THE LITERAL
         AP    SMF16_DY,P_ONE          INCREMENT THE COUNTER
CFW_USED DS    0H                      Q. WAS CACHE FAST WRITE
         TM    ICEWKFLG,ICEWKCW           UTILIZED?
         BNO   AM_CHK                  A. NO
         MVC   CFWICE,L_CFW            A. YES, MOVE IN THE LITERAL
         AP    SMF16_CF,P_ONE          INCREMENT THE COUNTER
AM_CHK   DS    0H
         MVC   DSIAM,L_EXCP            ASSUME EXCP ACCESS
         MVC   DSOAM,L_EXCP            ASSUME EXCP ACCESS
         TM    ICEIAMB,ICEIVSAM        Q. VSAM
         BNO   I_BSAM                  A. NO, CHECK FOR BSAM
         MVC   DSIAM,L_VSAM            MOVE IN VSAM LITERAL
         AP    SMF16_V,P_ONE           INCREMENT COUNTER
         B     AMO_CHK1                GO DETERMINE OUTPUT METHOD
I_BSAM   DS    0H
         TM    ICEIAMB,ICEIBSAM        Q. BSAM
         BNO   AMO_CHK                 A. NO, LEAVE AS EXCP
         MVC   DSIAM,L_BSAM            MOVE IN BSAM LITERAL
         AP    SMF16_B,P_ONE           INCREMENT COUNTER
         B     AMO_CHK1                GO DETERMINE OUTPUT METHOD
AMO_CHK  DS    0H
         AP    SMF16_E,P_ONE           INCREMENT COUNTER
AMO_CHK1 DS    0H
         TM    ICEOAMB,ICEOVSAM        Q. VSAM
         BNO   O_BSAM                  A. NO CHECK FOR BSAM
         MVC   DSOAM,L_VSAM            MOVE IN VSAM LITERAL
         AP    SMF16_V,P_ONE           INCREMENT COUNTER
         B     FLG_CHK1                BRANCH TO FLAG LOGIC
O_BSAM   DS    0H
         TM    ICEOAMB,ICEOBSAM        Q. BSAM
         BNO   FLG_CHK                 A. NO, LEAVE AS EXCP
         MVC   DSOAM,L_BSAM            MOVE IN BSAM LITERAL
         AP    SMF16_B,P_ONE           INCREMENT COUNTER
         B     FLG_CHK1                BRANCH TO FLAG LOGIC
FLG_CHK  DS    0H
         AP    SMF16_E,P_ONE           INCREMENT COUNTER
FLG_CHK1 DS    0H
         CLC   ICEWALLS,=AL4(0)        Q. CHECK INITIAL ALLOCATION
         BE    PUT_UT3                 A. BRANCH IF ZERO
         CLC   ICEWBLK,=AL4(0)         Q. CHECK TRACKS USED
         BNE   PUT_UT3                 A. BRANCH IF NONZERO
         CLC   ICEWALLS,=AL4(1500)     Q. INITIAL > 100 CYLINDERS
         BL    PUT_UT3                 A. NO, BRANCH
         MVC   FLAGICE,L_FLAG          MOVE IN THE FLAG
         AP    SMF16_FL,P_ONE          INCREMENT COUNTER
PUT_UT3  DS    0H
         BCT   R4,PUT_UT31             BRANCH IF PAGE NOT FULL
         PUT   UT3,H_LINE              PUT OUT HEADING LINE
         PUT   UT3,H_LINE2             PUT OUT HEADING LINE
         LA    R4,56                   RESET THE LINE COUNTER
PUT_UT31 DS    0H
         PUT   UT3,O_BUFF
         B     LOOP_UT1
EOF_UT1  DS    0H
*                                      OUTPUT HEADING LINES
         PUT   UT3,H_LINE3
         PUT   UT3,H_LINE2
*                                      BUILD AND PRINT RELEASE INFO
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_PRD1),L_PRD1
         MVC   O_BUFF+3+L'L_PRD1(8),PRDCT
         PUT   UT3,O_BUFF
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_PRD2),L_PRD2
         MVC   O_BUFF+3+L'L_PRD2(4),RELNM
         PUT   UT3,O_BUFF
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL JOBS LINE
         MVC   O_BUFF+3(L'L_TJOB),L_TJOB
         MVC   O_BUFF+3+L'L_TJOB(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_TJOB(L'E_P3),SMF16_A
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL SORT LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_TSRT),L_TSRT
         MVC   O_BUFF+3+L'L_TSRT(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_TSRT(L'E_P3),SMF16_S
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL MERGE LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_TMRG),L_TMRG
         MVC   O_BUFF+3+L'L_TMRG(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_TMRG(L'E_P3),SMF16_M
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL COPY LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_TCPY),L_TCPY
         MVC   O_BUFF+3+L'L_TCPY(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_TCPY(L'E_P3),SMF16_C
         PUT   UT3,O_BUFF
*                                      PRINT OUT A BLANK LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL EXCP LINE
         MVC   O_BUFF+3(L'L_EXCP1),L_EXCP1
         MVC   O_BUFF+3+L'L_EXCP1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_EXCP1(L'E_P3),SMF16_E
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL BSAM LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_BSAM1),L_BSAM1
         MVC   O_BUFF+3+L'L_BSAM1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_BSAM1(L'E_P3),SMF16_B
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL VSAM LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_VSAM1),L_VSAM1
         MVC   O_BUFF+3+L'L_VSAM1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_VSAM1(L'E_P3),SMF16_V
         PUT   UT3,O_BUFF
*                                      PUT OUT A BLANK LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL PROGRAM LINE
         MVC   O_BUFF+3(L'L_PGN1),L_PGN1
         MVC   O_BUFF+3+L'L_PGN1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_PGN1(L'E_P3),SMF16_P
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL JCL LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_JCL1),L_JCL1
         MVC   O_BUFF+3+L'L_JCL1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_JCL1(L'E_P3),SMF16_J
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL IN MEMORY LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_MEM1),L_MEM1
         MVC   O_BUFF+3+L'L_MEM1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_MEM1(L'E_P3),SMF16_IM
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL DYN ALLOC LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_DYN1),L_DYN1
         MVC   O_BUFF+3+L'L_DYN1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_DYN1(L'E_P3),SMF16_DY
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL CACHE FW LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_CFW1),L_CFW1
         MVC   O_BUFF+3+L'L_CFW1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_CFW1(L'E_P3),SMF16_CF
         PUT   UT3,O_BUFF
*                                      PUT OUT A BLANK LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         PUT   UT3,O_BUFF'O_BUFF),O_BUFF
*                                      BUILD TOTAL HIPERSPACE LINE
         MVC   O_BUFF+3(L'L_HSS1),L_HSS1
         MVC   O_BUFF+3+L'L_HSS1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_HSS1(L'E_P3),SMF16_HS
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL DATASPACE LINE
         MVI   O_BUFF,C' '               SPACE TO THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         MVC   O_BUFF+3(L'L_DSS1),L_DSS1
         MVC   O_BUFF+3+L'L_DSS1(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_DSS1(L'E_P3),SMF16_DS
         PUT   UT3,O_BUFF
*                                      PUT OUT A BLANK LINE
         MVI   O_BUFF,C' '             SPACE IN THE FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACES TO THE REMAINDER
         PUT   UT3,O_BUFF
*                                      BUILD TOTAL JOBS FLAGGED LINES
         MVC   O_BUFF+3(L'L_FLG1),L_FLG1
         PUT   UT3,O_BUFF
         MVI   O_BUFF,C' '               SPACE TO FIRST BYTE
         MVC   O_BUFF+1(L'O_BUFF),O_BUFF SPACE TO THE REST OF THE LINE
         MVC   O_BUFF+3(L'L_FLG2),L_FLG2
         MVC   O_BUFF+3+L'L_FLG2(L'E_P3),E_P3
         ED    O_BUFF+3+L'L_FLG2(L'E_P3),SMF16_FL
         PUT   UT3,O_BUFF
*                                      CLOSE UP ALL THE FILES
         CLOSE (UT1,,UT2,,UT3),MODE=31
*                                      EXIT POINT
EXIT_RTN DS    0H
*                                      EPILOG CODE FOLLOWS
         $ESAEPI
*        LITERALS AND CONSTANTS DEFINITIONS
TYPE16   DC    XL1'10'                 USED TO CHECK FOR TYPE 16 RECS
P_ZERO   DC    (#CNTRS)PL4'0'          USED TO ZERO COUNTERS
P_ONE    DC    PL4'1'
L_PGM    DC    CL3'PGM'
L_JCL    DC    CL3'JCL'
L_MEM    DC    CL3'MEM'
L_DYN    DC    CL3'DYN'
L_CFW    DC    CL3'CFW'
L_HSS    DC    CL3'HSS'
L_DSS    DC    CL3'DSS'
L_SORT   DC    CL4'SORT'
L_MERG   DC    CL4'MERG'
L_COPY   DC    CL4'COPY'
L_EXCP   DC    CL4'EXCP'
L_VSAM   DC    CL4'VSAM'
L_BSAM   DC    CL4'BSAM'
L_FLAG   DC    CL5'<<---'
L_TJOB   DC    CL36'TOTAL TYPE 16 RECORDS             = '
L_TSRT   DC    CL36'TOTAL INVOCATIONS FOR SORT        = '
L_TMRG   DC    CL36'TOTAL INVOCATIONS FOR MERGE       = '
L_TCPY   DC    CL36'TOTAL INVOCATIONS FOR COPY        = '
L_EXCP1  DC    CL36'TOTAL INVOCATIONS WITH EXCP       = '
L_BSAM1  DC    CL36'TOTAL INVOCATIONS WITH BSAM       = '
L_VSAM1  DC    CL36'TOTAL INVOCATIONS WITH VSAM       = '
L_PGN1   DC    CL36'TOTAL INVOCATIONS VIA PROGRAM     = '
L_JCL1   DC    CL36'TOTAL INVOCATIONS VIA JCL         = '
L_DYN1   DC    CL36'TOTAL DYNAMIC WORK ALLOCATION     = '
L_MEM1   DC    CL36'TOTAL IN MEMORY EXECUTIONS        = '
L_CFW1   DC    CL36'TOTAL CACHE FAST WRITE UTILIZED   = '
L_HSS1   DC    CL36'TOTAL INVOCATIONS WITH HIPERSPACE = '
L_DSS1   DC    CL36'TOTAL INVOCATIONS WITH DATASPACE  = '
L_FLG1   DC    CL36'TOTAL JOBS FLAGGED BECAUSE INITIAL  '
L_FLG2   DC    CL36'WORK ALLOCATION WAS >= 1500 TRKS. = '
L_PRD1   DC    CL36'THE CURRENT SORT PRODUCT IS         '
L_PRD2   DC    CL36'THE CURRENT SORT PRODUCT RELEASE IS '
* EDIT PATTERNS FOR THE NUMERIC FIELDS
E_P1     DC    XL10'40202020202020202120'
E_P2     DC    XL06'402020202120'
E_P3     DC    XL08'4020202020202120'
* HEADING LINE
H_LINE   DC    CL133' '
         ORG   H_LINE
         DC    C'1'
         ORG   H_LINE+3
         DC    CL8'JOBNAME'
         DS    XL2
         DC    CL8'STEPNAME'
         DS    XL2
         DC    CL4'OPER'
         DS    XL4
         DC    CL09'# RECORDS'
         DS    XL1
         DC    CL3'INV'                DISPLAY HOW SORT WAS INVOKED
         DS    XL17
         DC    CL7'OPTIONS'
         DS    XL20
         DC    CL4'I-AM'               INPUT ACCESS METHOD
         DS    XL2
         DC    CL4'O-AM'               OUTPUT ACCESS METHOD
         DS    XL4
         DC    CL6'TRK. S'             ALLOCATED SORT WORK TRACKS
         DS    XL3                     AT START
         DC    CL6'TRK. E'             ALLOCATED SORT WORK TRACKS
         DS    XL3                     AT END
         DC    CL6'TRK. U'             UTILIZED SORT WORK TRACKS
         DS    XL13
H_LINE_L EQU   *-H_LINE
H_LINE2  DC    C' '
         DC    132CL1'-'
H_LINE3  DC    C'1'
         DC    132CL1' '
         ORG   H_LINE3+60
         DC    CL13'S U M M A R Y'
         ORG
         LTORG
UT1DCBE  DCBE  RMODE31=BUFF            DCB EXTENSIONS
UT2DCBE  DCBE  RMODE31=BUFF
UT3DCBE  DCBE  RMODE31=BUFF
UT1      DCB   DSORG=PS,MACRF=(GL),DDNAME=SYSUT1,EODAD=EOF_UT1,        +
               DCBE=UT1DCBE
UT2      DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSUT2,                      +
               DCBE=UT2DCBE
UT3      DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSOUT,                      +
               DCBE=UT3DCBE
         $ESASTG
PRDCT    DS    XL8                     PRODUCT
RELNM    DS    XL4                     RELEASE NUMBER
D_WORK   DS    D                       WORK FIELD
DIS_WRK  DS    XL9                     WORK FIELD
SMF16_A  DS    PL4                     COUNTER FOR TOTAL RECORDS
SMF16_S  DS    PL4                     COUNTER FOR SORT RECORDS
SMF16_M  DS    PL4                     COUNTER FOR MERGE RECORDS
SMF16_C  DS    PL4                     COUNTER FOR COPY RECORDS
SMF16_E  DS    PL4                     COUNTER FOR EXCP
SMF16_B  DS    PL4                     COUNTER FOR BSAM
SMF16_V  DS    PL4                     COUNTER FOR VSAM
SMF16_P  DS    PL4                     COUNTER FOR PROGRAM INVOKE
SMF16_J  DS    PL4                     COUNTER FOR JCL INVOKE
SMF16_IM DS    PL4                     COUNTER FOR IN MEMORY OPS
SMF16_DY DS    PL4                     COUNTER FOR DYN WORK ALLOC
SMF16_CF DS    PL4                     COUNTER FOR CACHE FAST WRITE
SMF16_HS DS    PL4                     COUNTER FOR HIPERSPACE
SMF16_DS DS    PL4                     COUNTER FOR DATASPACE
SMF16_FL DS    PL4                     COUNTER FOR JOBS FLAGGED
#CNTRS   EQU   (*-SMF16_A)/4           LET ASM DETERMINE THE NUMBER
PROD_FLG DS    XL1                     FLAG BYTE
BITX80   EQU   X'80'
*                                      LAYOUT FOR OUTPUT LINE
O_BUFF   DS    XL133
         ORG   O_BUFF+3
JOBNMICE DS    XL8                     JOBNAME
         DS    XL2
STPNMICE DS    XL8                     STEPNAME
         DS    XL2
OPERICE  DS    XL4                     OPERATION
         DS    XL2
RCDSICE  DS    XL10                    # OF RECORDS SORTED
         DS    XL2
INVKICE  DS    XL3                     HOW WAS SORT INVOKED
         DS    XL2
MEMICE   DS    XL3                     SORT DONE IN MEMORY
         DS    XL2
DYNICE   DS    XL3                     WORK DATASETS DYNAMIC
         DS    XL2
CFWICE   DS    XL3                     CACHE FAST WRITE
         DS    XL3
HSSICE   DS    XL3                     HIPERSPACE
         DS    XL1
HSPUICE  DS    XL6                     HIPERSPACE PAGES USED
         DS    XL3
DSSICE   DS    XL3                     DATASPACE
         DS    XL1
DSPUICE  DS    XL6                     HIPERSPACE PAGES USED
         DS    XL3
DSIAM    DS    XL4                     SORTIN ACCESS METHOD
         DS    XL2
DSOAM    DS    XL4                     SORTOUT ACCESS METHOD
         DS    XL3
WALLSICE DS    XL6                     INITIAL TRACKS
         DS    XL3
WALLEICE DS    XL6                     FINAL TRACKS
         DS    XL3
WBLKICE  DS    XL6                     TRACKS UTILIZED
         DS    XL3
FLAGICE  DS    XL5
O_BUFF_L EQU   *-O_BUFF
*                                      GET SORT RECORDS DSCET
         ICESMF
*                                      PULL IN DCB MAPPING MACRO
         DCBD  DSORG=(QS)
*                                      END THE PROGRAM
         END EXTSMF16                  AND LET THE ASSEMBLER KNOW
$ESAPRO MACRO
         MACRO
&LABEL   $ESAPRO &AM=31,&RM=ANY,&MODE=P
.**********************************************************************
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  TO USE THIS MACRO, YOU NEED TO
.*       ALSO USE THE $ESASTG MACRO.  THE $ESASTG DEFINES THE SYMBOL
.*       QLENGTH WHICH OCCURS IN THE CODE THAT &ESAPRO GENERATES.
.*       IF YOU DO NOT CODE ANY OPERANDS, THEN REGISTER 12 WILL BE
.*       USED AS THE BASE.  IF YOU CODE MULTIPLE SYMBOLS, THEN THEY
.*       WILL BE USED AS THE BASE REGISTERS.
.*
.*       EXAMPLES:
.*              SECTNAME $ESAPRO          = REG 12 BASE
.*              SECTNAME $ESAPRO 5        = REG 5 BASE
.*              SECTNAME $ESAPRO R10,R11  = REGS 10 AND 11 ARE BASES
.**********************************************************************
*
         LCLA  &AA,&AB,&AC
*
R0       EQU   0
R1       EQU   1
         etc
R15      EQU   15
*
&LABEL   CSECT
&LABEL   AMODE &AM
&LABEL   RMODE &RM
*
         SYSSTATE ASCENV=&MODE         SET THE ENVIRONMENT
*
         B     $$$$EYEC-*(R15)         BRANCH AROUND EYECATCHER
         DC    AL1(($$$$EYEC-*)-1)     EYECATCHER LENGTH
         DC    CL8'&LABEL'             MODULE ID
         DC    CL3' - '
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL3' - '
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         DC    CL3'   '                FILLER
*
$$$$F1SA DC    CL4'F1SA'               USED FOR STACK OPERATIONS
$$$$4096 DC    F'4096'                 USED TO ADJUST BASE REGS
*
$$$$EYEC DS    0H
*
         BAKR  R14,0                   SAVE GPRS AND ARS ON THE STACK
         AIF   (N'&SYSLIST EQ 0).USER12
         LAE   &SYSLIST(1),0(R15,0)    LOAD OUR BASE REG
         USING &LABEL,&SYSLIST(1)      LET THE ASSEMBLER KNOW
         AGO   .GNBASE
.USER12  ANOP
         MNOTE *,'NO BASE REG SPECIFIED, REGISTER 12 USED'
         LAE   R12,0(R15,0)            LOAD OUR BASE REG
         USING &LABEL,R12              LET THE ASSEMBLER KNOW
         AGO   .STGOB
.GNBASE  ANOP
         AIF   (N'&SYSLIST LE 1).STGOB
&AA      SETA  2
&AC      SETA  4096
.GNBASE1 ANOP
*
         AIF   (&AA GT N'&SYSLIST).STGOB
&AB      SETA  &AA-1
         LR    &SYSLIST(&AA),&SYSLIST(&AB) GET INITIAL BASE
         A     &SYSLIST(&AA),$$$$4096      ADJUST NEXT BASE
         USING &LABEL+&AC,&SYSLIST(&AA)    LET THE ASSEMBLER KNOW
&AA      SETA  &AA+1
&AC      SETA  &AC+4096
         AGO   .GNBASE1
.STGOB   ANOP
*
         L     R0,QLENGTH              GET THE DSECT LENGTH
*
         STORAGE OBTAIN,LENGTH=(R0),LOC=(RES,ANY)
*
         LR    R15,R1                  GET @(OBTAINED AREA)
         L     R13,QDSECT              GET DISPLACEMENT INTO AREA
         LA    R13,0(R13,R15)          GET @(OBTAINED AREA)
         LR    R0,R13                  SET REG 0 = REG 13
         L     R1,QLENGTH              GET THE LENGTH OF THE AREA
         XR    R15,R15                 CLEAR REG 5
         MVCL  R0,R14                  INTIALIZE THE AREA
         MVC   4(4,R13),$$$$F1SA       INDICATE STACK USAGE
         USING DSECT,R13               INFORM ASSEMBLER OF BASE
.MEND    ANOP
*
         EREG  R1,R1                   RESTORE REGISTER 1
         MEND


$ESAEPI MACRO

         MACRO
         $ESAEPI
.**********************************************************************
.*       THIS MACRO WILL PROVIDE EXIT LINKAGE. IT WILL FREE THE
.*       STORAGE AREA THAT WAS ACQUIRED BY THE $ESAPRO MACRO.  YOU
.*       CAN OPTIONALLY PASS IT A RETURN CODE VALUE.  THIS VALUE IS
.*       EITHER THE LABEL OF A FULL WORD IN STORAGE, OR IT IS A REG-
.*       ISTER. AS WITH THE $ESAPRO MACRO, YOU NEED TO USE THE $ESASTG
.*       MACRO.  THE SYMBOL QLENGTH WHICH OCCURS IN THE CODE THAT IS
.*       GENERATED BY THIS MACRO IS DEFINED BY $ESASTG
.*
.*       EXAMPLES:
.*              $ESAEPI          = NO RETURN CODE SPECIFIED
.*              $ESAEPI (R5)     = RETURN CODE IS IN REG 5
.*              $ESAEPI RETCODE  = RETURN CODE IS IN THE FULLWORD AT
.*                                 RETCODE
.**********************************************************************
*
         AIF   (N'&SYSLIST EQ 0).STGFRE
*
         AIF   ('&SYSLIST(1)'(1,1) EQ '(').REGRC
         L     R2,&SYSLIST(1)          GET RETURN CODE VALUE
         AGO   .STGFRE
.REGRC   ANOP
         LR    R2,&SYSLIST(1,1)        GET RETURN CODE VALUE
.STGFRE  ANOP
*
         L     R0,QLENGTH              GET THE DSECT LENGTH
*
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R13)
*
         AIF   (N'&SYSLIST NE 0).SETRC
         XR    R15,R15                 CLEAR THE RETURN CODE
         AGO   .MEND
.SETRC   ANOP
         LR    R15,R2                  SET THE RETURN CODE
.MEND    ANOP
         PR                            RETURN TO CALLER
         MEND


$ESASTG MACRO

         MACRO
         $ESASTG
.**********************************************************************
.*       THIS MACRO IS USED IN CONJUNCTION WITH THE $ESAEPI AND $ESAPRO
.*       MACROS.  IT PROVIDES A Q TYPE ADDRESS CONSTANT WHICH WILL
.*       CONTAIN THE LENGTH OF THE DSECT.  A REGISTER SAVE AREA ID
.*       PROVIDED AS WELL.
.*
.*       EXAMPLES:
.*              $ESASTG
.*      XXX     DC    F          = DEFINE ADDITIONAL STORAGE AREA
.*      YYY     DC    XL255
.*       .       .      .
.*       .       .      .
.*       .       .      .
.**********************************************************************
QDSECT   DC    Q(DSECT)                DEFINE A QCON
QLENGTH  CXD                           LET ASM CALCULATE THE LENGTH
DSECT    DSECT
         DS    18F                     SET ASIDE REGISTER SAVE AREA
         MEND


Enterprise Data Technologies (USA)                 c Xephon 1996

