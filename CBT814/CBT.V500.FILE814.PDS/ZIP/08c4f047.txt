Hexadecimal functions in CLISTs

I have written a couple of CLISTs to run under IPCS to help set
up the TCB address, abend PSW, and registers. One type of
function missing in CLISTs is any kind of hexadecimal
processing. Before everyone shouts "Well REXX does!!!" - I
will point out that we did not have REXX at the time and, even
now, I still find CLISTs easier to use.

I have therefore written some user functions to do four things:

1      Convert a hexadecimal character string into a decimal
      character string.

2      Convert a decimal character string into a hexadecimal
      character string.

3      Remove the top bit from an 8-character hexadecimal string
      (which has a 31-bit address).

4      Return the current SMF-id ('TEST', 'PROD', or 'SPR' in
      our case).

The routines are written in Assembler and form a module called
IKJCT44B, which can live anywhere in the STEPLIB libraries for
the TSO users or batch jobs that want them.

To use them in a CLIST simply code as a normal function but the
function name starts 'SYSX', eg:

      SET &DECNUM = SYSXHEXTONUM(SYSXHEXPTR(&STR(ABCD1234)))

will set DECNUM to 734859828 (which is X'ABCD1234').
The workings of IKJCT44B are quite simple; entry is standard
with register 1 pointing at pointers for the function name, the input
argument, and an area to put the reply.

The function list can be expanded as much as required, and the
logic can be as complicated as required, even to the extent of
reading one or more files, although don't forget to add an extra
save area if you do.

IKJCT44B SOURCE CODE

 TITLE 'IKJCT44B, TSO CLIST USER FUNCTIONS'
         MACRO ,
         $ASMDATE ,
         B     4+8+8+8(,R15)
         DC    CL8'&SYSECT'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         MEND  ,
IKJCT44B CSECT ,
        $ASMDATE ,
PARM     DSECT ,
         DC    9F'0'
PARM#10  DC    A(0)            -> =A(2,LEN,->FUNCTION NAME)
PARM#11  DC    A(0)            -> =A(2,LEN,->ARGUMENT)
PARM#12  DC    A(0)            -> =A(2,256,->RESULT AREA)
PARM#13  DC    A(0)            -> =A(0,4,0) =EXTRA BUFFER PTR
REPLY    DSECT ,
FINAL    DC    C'-4294967296'
DOUBLE   DC    D'0'
NUMOUT   DC    CL12'-4294967296'
         DC    (256-(*-REPLY))X'00'
IKJCT44B CSECT ,
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING IKJCT44B,R12
         LA    R10,0(,R1)          SAVE PARM ADDRESS
         USING PARM,R10
         L     R8,PARM#10          -> A(2,LEN,->FUNCTION NAME)
         L     R9,4(,R8)           FUNCTION NAME LENGTH
         L     R8,8(,R8)           FUNCTION NAME PROPER
         CLC   0(4,R8),=C'SYSX'
         BNE   SCNNSYSX
         LA    R8,4(,R8)           STEP OVER "SYSX"
         SH    R9,=Y(4)
         BNP   SCANRET8              NONE LEFT, NOT FOUND
SCNNSYSX EQU   *
         LA    R6,FUNCTABL         FUNCTION NAMES I KNOW ABOUT
         LA    R7,FUNCTAB#         HOW MANY
         LR    R15,R9              COPY LENGTH
         BCTR  R15,0                 MINUS ONE FOR "EX"
SCANFUNC EQU   *
         CH    R9,0(,R6)           CHECK LENGTH
         BNE   SCANSKIP              NOT SAME, BRANCH
SCANCLC  CLC   2(*-*,R6),0(R8)
         EX    R15,SCANCLC         CLC   2(*-*,R6),0(R8)
         BE    GOTFUNC             GOT FUNCTION, BRANCH
SCANSKIP EQU   *
         AH    R6,0(,R6)           STEP OVER
         LA    R6,2(,R6)             TO NEXT ENTRY
         BCT   R7,SCANFUNC             AND LOOP BACK FOR NEXT
*** FUNCTION NAME NOT IN MY LIST, RETURN IN ERROR
SCANRET8 EQU   *
        RETURN (14,12),RC=8
GOTFUNC  EQU   *
         L     R9,PARM#12          -> A(2,256,->REPLY AREA)
         L     R8,8(,R9)           REPLY AREA PROPER
         USING REPLY,R8            ADDRESS "REPLY" IN "R8"
         LA    R2,FUNCTAB#         NUMBER OF ENTRIES
         SR    R2,R7                 MINUS WHATS LEFT
         SLL   R2,2                    TIMES FOUR
         B     *+4(R2)             BRANCH ON FUNCTION NAME
           B     HEXTONUM  $ERRMSG 'HEXTONUM'  0
           B     NUMTOHEX  $ERRMSG 'NUMTOHEX'  1
           B     HEXPTR    $ERRMSG 'HEXPTR'    2
           B     SMFID     $ERRMSG 'SMFID'     3
           B     *+1               SPARE       4
           B     *+1               SPARE       5
           B     *+1               SPARE       6
           B     *+1               SPARE       7
HEXTONUM EQU   *
** CONVERT HEX STRING TO A DECIMAL NUMBER
         L     R6,PARM#11          -> A(2,LEN,->ARGUMENT)
         L     R7,4(,R6)           ARGUMENT LENGTH
         LTR   R15,R7              COPY LENGTH
         BNP   H2N0ZERO              ZERO, ASSUME ZERO
         L     R6,8(,R6)           ARGUMENT STRING PROPER
         BAL   R14,ZERO0000        SKIP LEADING ZEROES/BLANKS
           B     H2N0ZERO            NUMBER IS ZERO
         SLR   R0,R0
         SLR   R1,R1
H2N00220 EQU   *
         IC    R1,0(,R6)           GET HEX DIGIT
         CLI   0(R6),C'A'-X'40'    VALID DIGIT?
         BL    H2N00900              NO, THEN INVALID
         CLI   0(R6),C'F'-X'40'    VALID DIGIT?
         BNH   H2N00260              YES, LETTER
         CLI   0(R6),C'A'          VALID DIGIT?
         BL    H2N00900              NO, THEN INVALID
         CLI   0(R6),C'9'          VALID DIGIT?
         BH    H2N00900              NO, THEN INVALID
         CLI   0(R6),C'0'          VALID NUMBER?
         BNL   H2N00280              YES, NUMBER
         CLI   0(R6),C'F'          VALID DIGIT?
         BH    H2N00900              NO, THEN INVALID
H2N00260 EQU   *
         LA    R1,X'FA'-C'A'(,R1)  ADJUST HEX DIGIT
H2N00280 EQU   *
         CLM   R0,B'1000',=X'0F'   ARE WE ABOUT TO OVERFLOW?
         BH    H2N00900              YES, THEN INVALID
         N     R1,=XL4'F'          REMOVE ZONE
         SLL   R0,4                SHUNT PREVIOUS UP
         OR    R0,R1                 AND MERGE THIS IN
         LA    R6,1(,R6)           STEP ON
         BCT   R7,H2N00220           AND LOOP BACK
         B     H2N00320
H2N0ZERO EQU   *
         SLR   R0,R0
H2N00320 EQU   *
         CVD   R0,DOUBLE           CONVERT TO DECIMAL
         MVC   NUMOUT(12),=X'402020202020202020202120'
         LA    R1,NUMOUT+12-1
         LR    R15,R1
         EDMK  NUMOUT(12),DOUBLE+8-6
         BNM   *+4+2+4
           BCTR  R1,0
           MVI   0(R1),C'-'
         SR    R15,R1              LENGTH-1 OF NUMBER
         BM    *+1
           MVC   0(*-*,R8),0(R1)
         EX    R15,*-6             MVC   0(*-*,R8),0(R1)
         LA    R15,1(,R15)
         ST    R15,4(,R9)          SAVE REPLY LENGTH
        RETURN (14,12),RC=0
H2N00900 EQU   *
        RETURN (14,12),RC=12
NUMTOHEX EQU   *
** CONVERT A DECIMAL NUMBER TO A HEX STRING
         L     R6,PARM#11          -> A(2,LEN,->ARGUMENT)
         L     R7,4(,R6)           ARGUMENT LENGTH
         LTR   R15,R7              COPY LENGTH
         BNP   N2H0ZERO              ZERO, ASSUME ZERO
         L     R6,8(,R6)           ARGUMENT STRING PROPER
         SLR   R5,R5               ASSUME POSITIVE NUMBER
         BAL   R14,ZERO0000        SKIP LEADING ZEROES/BLANKS
           B     N2H0ZERO            NUMBER IS ZERO
         CLI   0(R6),C'-'          LEADING MINUS SIGN?
         BNE   N2H00140              NO, THEN IS POSITIVE
         BCTR  R5,0                SET NEGATIVE NUMBER
         LA    R6,1(,R6)           STEP OVER MINUS SIGN
         BCT   R7,*+4+4              AND REDUCE COUNT
           B     N2H0ZERO              NONE LEFT, ASSUME ZERO
         BAL   R14,ZERO0000        SKIP LEADING ZEROES/BLANKS
           B     N2H0ZERO            NUMBER IS ZERO
N2H00140 EQU   *
         CH    R7,=Y(10)           NOT TOO LONG I HOPE
         BH    N2H00900              YES, THEN ERROR
         LR    R15,R7              COPY LENGTH
         BCTR  R15,0                 MINUS 1 FOR "EX"
           PACK  DOUBLE,0(*-*,R6)
         EX    R15,*-6             PACK  DOUBLE,0(*-*,R6)
N2H00220 EQU   *
         CLI   0(R6),C'9'          VALID DIGIT?
         BH    N2H00900              NO, THEN INVALID
         CLI   0(R6),C'0'          VALID NUMBER?
         BL    N2H00900              NO, THEN INVALID
         LA    R6,1(,R6)           STEP ON
         BCT   R7,N2H00220           AND LOOP BACK
         CP    DOUBLE,=P'2147483648' NOT TOO HIGH I HOPE
         BL    N2H00280                NO, THEN CARRY ON
         BH    N2H00900                YES, THEN INVALID
         LTR   R5,R5               NEGATIVE NUMBER?
         BZ    N2H00900              NO, THEN INVALID
N2H00280 EQU   *
         LTR   R5,R5               NEGATIVE NUMBER?
         BZ    *+4+6                 NO, THEN INVALID
           MVN   DOUBLE+8-1(1),=X'0D' SET NEGATIVE SIGN
         CVB   R0,DOUBLE           CONVERT TO BINARY
         B     N2H00320
N2H0ZERO EQU   *
         SLR   R0,R0
N2H00320 EQU   *
         ST    R0,DOUBLE           SAVE BACK BINARY
         UNPK  FINAL(8+1),DOUBLE(4+1)
         TR    FINAL(8),HEXTAB-C'0'
         MVC   4(4,R9),=A(8)       SET REPLY LENGTH = 8
        RETURN (14,12),RC=0
N2H00900 EQU   *
        RETURN (14,12),RC=12
HEXPTR   EQU   *
** REMOVE TOP BIT FROM HEX POINTER
         L     R6,PARM#11          -> A(2,LEN,->ARGUMENT)
         L     R7,4(,R6)           ARGUMENT LENGTH
         LTR   R15,R7              COPY LENGTH
         BNP   HP00ZERO              ZERO, ASSUME ZERO
         L     R6,8(,R6)           ARGUMENT STRING PROPER
         LR    R15,R7              COPY LENGTH
         BCTR  R15,0                 MINUS 1 FOR "EX"
           MVC   FINAL(*-*),0(R6)
         EX    R15,*-6             MVC   FINAL(*-*),0(R6)
         ST    R7,4(,R9)           SAVE REPLY LENGTH
         CH    R7,=Y(8)            IGNORE FEWER THAN FULLWORD
         BL    HP000320              YES, THEN NOWT TO DO
         SLR   R1,R1
         IC    R1,FINAL            GET HEX DIGIT
         CLI   FINAL,C'A'-X'40'    VALID DIGIT?
         BL    HP000900              NO, THEN INVALID
         CLI   FINAL,C'F'-X'40'    VALID DIGIT?
         BNH   HP000260              YES, LETTER
         CLI   FINAL,C'A'          VALID DIGIT?
         BL    HP000900              NO, THEN INVALID
         CLI   FINAL,C'9'          VALID DIGIT?
         BH    HP000900              NO, THEN INVALID
         CLI   FINAL,C'0'          VALID NUMBER?
         BNL   HP000280              YES, NUMBER
         CLI   FINAL,C'F'          VALID DIGIT?
         BH    HP000900              NO, THEN INVALID
HP000260 EQU   *
         LA    R1,X'FA'-C'A'(,R1)  ADJUST HEX DIGIT
HP000280 EQU   *
         N     R1,=XL4'7'          REMOVE ZONE AND SIGN BIT
         IC    R1,HEXTAB(R1)       TRANSLATE
         STC   R1,FINAL              ANS SAVE BACK
         B     HP000320
HP00ZERO EQU   *
         MVI   FINAL,C'0'
         MVC   4(4,R9),=A(1)       SET REPLY LENGTH = 1
HP000320 EQU   *
        RETURN (14,12),RC=0
         DROP  R8                  DIS-OWN "REPLY" IN "R8"
HP000900 EQU   *
        RETURN (14,12),RC=12
SMFID    EQU   *
** RETURN "SMFID"
         L     R2,CVTPTR           LOAD CVT ADDR
         L     R2,CVTSMCA-CVT(,R2) 196(R10)  LOAD CVTSMCA
         MVC   0(4,R8),X'010'(R2)   "SMCASID" SYSID
         LA    R15,4
         ST    R15,4(,R9)          SAVE REPLY LENGTH
        RETURN (14,12),RC=0
ZERO0000 EQU   * R6->NUM, R7=LEN   SKIP LEADING ZEROES/BLANKS
ZERO0020 EQU   *
         CLI   0(R6),C'0'          LEADING ZERO?
         BH    4(,R14)               NO, THEN CARRY ON
         BE    ZERO0040              YES, THEN STEP OVER
         TM    0(R6),X'BF'         LEADING BLANK?
         BNZ   4(,R14)               NO, THEN CARRY ON
ZERO0040 EQU   *
         LA    R6,1(,R6)           STEP OVER LEADING ZERO/BLANK
         BCT   R7,ZERO0020           AND LOOP BACK
         B     0(,R14)             RETURN, ONLY ZEROES/BLANKS
******************************************************************
*  CONSTANTS AND MESSAGES
******************************************************************
         LTORG ,
FUNCTABL DC    0D'0'
         DC    YL2(8),C'HEXTONUM'  0
         DC    YL2(8),C'NUMTOHEX'  1
         DC    YL2(6),C'HEXPTR'    2
         DC    YL2(5),C'SMFID'     3
FUNCTAB# EQU   4
HEXTAB   DC    C'0123456789ABCDEF'
        REGEQU ,
        CVT    DSECT=YES,LIST=NO
         END   IKJCT44B


Martin Hamilton
Technical Consultant
Thomson Tour Operations Ltd (UK)                                        c Xephon 1994

