DDNAME rename facility

The site at which I was working wanted to front-end a locally-
written copy program so that it would invoke the high-
performance SYNCSORT copy facility instead. In the end this
project was abandoned since the benefits were found to be small,
but the technique that was developed to do it may be of interest.

The original copy program used different DDNAMEs from those
that SYNCSORT expects, and it was desired to avoid JCL
changes. It was suggested that I use dynamic allocation to free the
existing files and re-allocate them using the DDNAMEs SORTIN
and SORTOUT, but the more I thought about this the less I liked
it: all sorts of nasty complications would have to be handled, such
as concatenated datasets, tape datasets, and so on.

Then I thought of a method that was so silly it had to be tried,
namely overwriting the DDNAMEs in the TIOT. Surely it
couldn't be that easy? Well, it was and it wasn't. When I just
changed the TIOT entries, SYNCSORT ran quite happily, but
DFSMS issued a strange IGD... message at step termination. To
fix this I had to change the SIOT entries as well. This necessitated
the use of the SWAREQ macro, which is an instructive exercise
in itself. It was also necessary to restore the TIOT and SIOT
DDNAMEs to their original values after invoking SYNCSORT.

Strangely, when I ran my first version again in an attempt to get
the exact error message so that I could include it in this article, it
ran without error. I do not know why - perhaps the PTF level of
the system had changed.

The sample code below should be self-explanatory. It could
obviously be used whenever you want to invoke a program which
expects different DDNAMEs from those actually in the JCL.

By the way, if you were wondering how SYNCSORT's
IEBGENER front-end, SYNCGENR, tells SYNCSORT to use
DDNAMEs of SYSUT1 and SYSUT2 instead of SORTIN and
SORTOUT, I found the answer when I disassembled
SYNCGENR. It uses an undocumented parameter - X'F0' in the
SYNCSORT parameter list. I have included it as a comment in the
SYNCSORT parameter list below.

WARNINGS

1      APF authorization is required for the MODESET which gets
us into key zero so that we can overwrite the TIOT, and for the
use of SWAREQ for update. The program must therefore be
placed in an APF-authorized library (listed in the IEAAPF00
member of SYS1.PARMLIB).

2      Some of the mapping macros are in SYS1.MODGEN (or
SYS1.AMODGEN on earlier MVS releases), so make sure you
include this library in the SYSLIB concatenation for the assembly.

3      IBM documentation describes the layout of the SIOT as a
'Product-Sensitive Programming Interface'. This means that
programs using this technique may have to be changed for future
releases of MVS, DFP, or DFSMS/MVS. This code was
developed and tested under MVS/ESA 4.2.2 and DFP 3.3, but
should work on earlier MVS releases from MVS/XA 2.1 upwards.
If you have problems, you may want to try removing the  parts of
this code which modify the SIOT, since, as explained above, this
may not be necessary.

         PUNCH ' SETCODE AC(1)'
MFCOPY   CSECT
***********************************************************************
* INVOKE SYNCSORT TO DO COPY                                          *
* WITH MODIFICATION OF TIOT AND SIOT                                  *
* ATTRIBUTES: REENTRANT, AC=1                                         *
* REGISTER USAGE:                                                     *
* R0  - LINKAGE AND TRANSIENT WORK                                    *
* R1  - LINKAGE AND TRANSIENT WORK                                    *
* R2  - TIOT ENTRY                                                    *
* R3  - * UNUSED *                                                    *
* R4  - TCB                                                           *
* R5  - WORK                                                          *
* R6  - SCT                                                           *
* R7  - * UNUSED *                                                    *
* R8  - SIOT                                                          *
* R9  - * UNUSED *                                                    *
* R10 - SWAREQ PARAMETER LIST (TEMP)                                  *
* R11 - INTERNAL LINK                                                 *
* R12 - PROGRAM BASE                                                  *
* R13 - REENTRANT SAVE AREA                                           *
* R14 - LINKAGE                                                       *
* R15 - LINKAGE AND TRANSIENT WORK                                    *
***********************************************************************
         YREGS
         SAVE  (14,12),,'MFCOPY.&SYSDATE..&SYSTIME'
         LR    R12,R15             ENTRY ADDRESS
         USING MFCOPY,R12
*---     LINKAGE                                                   ---*
* GET STORAGE FOR REENTRANT EXTENDED SAVE AREA
         GETMAIN R,LV=DSASIZE
         LR    R4,R1
         LA    R5,DSASIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R4,R14              CLEAR AREA TO ZEROES
         ST    R13,4(,R1)          SAVE AREA CHAINING
         ST    R1,8(R13)
         LR    R13,R1              SWITCH TO NEW SAVE AREA
         USING DSA,R13             ADDRESSABILITY
*---     FIND TCB                                                  ---*
         L     R4,CVTPTR           CVT
         L     R4,CVTTCBP-CVT(,R4) TCB WORDS
         L     R4,4(,R4)           TCB
         USING TCB,R4              ADDRESSABILITY
*---     SET UP PARAMETERS FOR SWAREQ                              ---*
         LA    R1,EPA              ADDR OF EXTERNAL PARAMETER AREA
         ST    R1,SWEPAPTR         SET EPA POINTER
* SET UP PARAMETER LISTS FOR SWA READ AND SWA WRITE
         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(M,SWAPREAD)
         SWAREQ FCODE=WL,EPA=SWEPAPTR,MF=(M,SWAPWRIT)
*---     FIND THE SCT USING SWAREQ                                 ---*
         L     R6,TCBJSCB          JSCB
         LA    R6,0(,R6)           PURIFY ADDRESS
         USING IEZJSCB,R6          ADDRESS JSCB
         MVC   SWVA-SWAEPA+EPA,JSCSCTP  MOVE SVA OF SCT INTO EPA
         DROP  R6                  KILL JSCB ADDRESSABILITY
         BAS   R11,SWAREAD         READ SCT
         L     R6,SWBLKPTR-SWAEPA+EPA  POINTER TO SCT
         USING INSMSCT,R6          SCT ADDRESSABILITY
*---     SET UP DDNAMES THAT ARE IN JCL                            ---*
         MVC   DDIN,=CL8'IN'
         MVC   DDOUT,=CL8'OUT'
*---     CHANGE INPUT DDNAME IN TIOT AND SIOT TO 'SORTIN'          ---*
         MVC   DDOLD,DDIN          DDNAME TO LOOK FOR
         MVC   DDNEW,=CL8'SORTIN'  REPLACEMENT DDNAME
         BAS   R11,DDSCAN          SCAN TIOT/SIOT AND REPLACE DDNAME
         B     NOTIOT              +0 NOT FOUND
*                                  +4 OK
         ST    R2,INTIOT           SAVE ADDRESS OF TIOT ENTRY
         ST    R8,INSIOT           SAVE ADDRESS OF SIOT
*---     CHANGE OUTPUT DDNAME IN TIOT AND SIOT TO 'SORTOUT'        ---*
         MVC   DDOLD,DDOUT         DDNAME TO LOOK FOR
         MVC   DDNEW,=CL8'SORTOUT' REPLACEMENT DDNAME
         BAS   R11,DDSCAN          SCAN TIOT/SIOT AND REPLACE DDNAME
         B     NOTIOT              +0 NOT FOUND
*                                  +4 OK
         ST    R2,OUTTIOT          SAVE ADDRESS OF TIOT ENTRY
         ST    R8,OUTSIOT          SAVE ADDRESS OF SIOT
*---     INVOKE SYNCSORT                                           ---*
         LA    R1,SORTPLEN         LENGTH OF PARAMETERS
         STH   R1,SORTPARM         STORE IN PARAMETER LIST
         LA    R1,SORTSTMT         ADDRESS OF SORT STATEMENT
         ST    R1,SORTBEG          STORE IN PARAMETER LIST
         LA    R1,SORTSTND         END OF SORT STATEMENT
         ST    R1,SORTEND          STORE IN PARAMETER LIST
         LA    R1,=CL8'SYSPRINT'   ALTERNATIVE MSG DDNAME
         ST    R1,SORTPRDD         STORE IN PARAMETER LIST
         MVI   SORTPRDD,3          SET CODE IN TOP BYTE
         LA    R1,SORTPARM         PARAMETER LIST FOR SYNCSORT
         ST    R1,SORTPTR          SET POINTER
         OI    SORTPTR,X'80'       TURN ON TOP BIT
         LA    R1,SORTPTR          ADDR OF PTR TO SYNCSORT PARAMS
         LINK  EP=SYNCSORT         LINK TO SYNCSORT
*---     PUT THE DDNAMES BACK AS THEY WERE                         ---*
         MVC   DDOLD,DDIN          ORIGINAL INPUT DDNAME
         L     R2,INTIOT           RELOAD ADDRESS OF TIOT ENTRY
         L     R8,INSIOT           RELOAD ADDRESS OF SIOT
         BAS   R11,DDREST          RESTORE DDNAME
         MVC   DDOLD,DDOUT         ORIGINAL OUTPUT DDNAME
         L     R2,OUTTIOT          RELOAD ADDRESS OF TIOT ENTRY
         L     R8,OUTSIOT          RELOAD ADDRESS OF SIOT
         BAS   R11,DDREST          RESTORE DDNAME
*---     RELEASE STORAGE AND RETURN                                ---*
         LR    R1,R13              STORAGE ADDRESS FOR FREEMAIN
         L     R13,4(,R13)         RELOAD CALLER'S SAVE AREA
         FREEMAIN R,A=(1),LV=DSASIZE
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         SR    R15,R15             SET ZERO RETURN CODE
         BR    R14                 RETURN TO CALLING ROUTINE
*---     DDSCAN - FIND AND CHANGE TIOT AND SIOT FOR SPECIFIED DDNAME -*
* ON ENTRY:                                                           *
*        DDOLD = DDNAME TO LOOK FOR                                   *
*        DDNEW = DDNAME TO REPLACE IT WITH                            *
*        R4  = TCB ADDRESS                                            *
*        R6  = SCT ADDRESS                                            *
*        R11 = RETURN ADDRESS                                         *
* ON RETURN:                                                          *
*        R2  = ADDRESS OF TIOT ENTRY                                  *
*        R8  = ADDRESS OF SIOT                                        *
*        DDNAME IN TIOT ENTRY AND SIOT IS CHANGED FROM 'DDOLD'        *
*        TO 'DDNEW'                                                   *
*        RETURN +0 IF DDNAME NOT FOUND IN TIOT                        *
*        RETURN +4 IF DDNAME FOUND                                    *
*---     ABEND IF DDNAME IN TIOT BUT NO SIOT FOUND                 ---*
DDSCAN   DS    0H
         ST    R11,SAVERET         SAVE RETURN ADDRESS
         L     R2,TCBTIO           TIOT
         LA    R2,TIOENTRY-TIOT1(,R2) FIRST TIOT ENTRY
         USING TIOENTRY,R2         ADDRESSABILITY
         SLR   R15,R15             CLEAR FOR LENGTH INSERTION
NEXTDD   DS    0H
         IC    R15,TIOELNGH
         LTR   R15,R15             END OF TIOT?
         BZR   R11                 YES, RETURN +0 (NOT FOUND)
         CLC   TIOEDDNM,DDOLD      RIGHT DDNAME?
         BE    DDFOUND             YES, GO FIND SIOT
         AR    R2,R15              NO, STEP TO NEXT ENTRY
         B     NEXTDD              AND LOOP
DDFOUND  DS    0H
         CLC   DDNEW,DDOLD         NEW DDNAME SAME AS OLD?
         BE    4(,R11)             YES, RETURN +4 (DO NOTHING)
* FIND SIOT
         MVC   SWVA-SWAEPA+EPA,SCTFSIOT   FIRST SIOT (FROM SCT)
NEXTSIOT DS    0H
         BAS   R11,SWAREAD         READ IT
         L     R8,SWBLKPTR-SWAEPA+EPA  LOAD BLOCK POINTER
         USING INDMSIOT,R8         ADDRESS SIOT
         CLC   SCTDDNAM,DDOLD      RIGHT ONE?
         BE    GOTSIOT             YES
         CLC   SWVA-SWAEPA+EPA,SCTLSIOT  LAST SIOT?
         BE    NOSIOT              YES, ABEND
         MVC   SWVA-SWAEPA+EPA,SCTPSIOT  SVA OF NEXT SIOT
         B     NEXTSIOT            LOOP
GOTSIOT  DS    0H
         MODESET KEY=ZERO
         MVC   TIOEDDNM,DDNEW      OVERWRITE DDNAME IN TIOT
         MVC   SCTDDNAM,DDNEW      OVERWRITE DDNAME IN SIOT
         MODESET KEY=NZERO
         BAS   R11,SWAWRITE        WRITE SIOT BACK TO SWA
         L     R11,SAVERET         LOAD RETURN ADDRESS
         B     4(,R11)             RETURN +4
*--- DDREST - RESTORE DDNAMES IN TIOT AND SIOT TO FORMER STATE     ---*
* ON ENTRY:                                                           *
*        DDOLD = DDNAME TO BE PUT BACK                                *
*        R2  = ADDRESS OF TIOT ENTRY                                  *
*        R8  = ADDRESS OF SIOT                                        *
*        R11 = RETURN ADDRESS                                         *
* ON RETURN:                                                          *
*---     DDNAME IN TIOT ENTRY AND SIOT IS CHANGED BACK TO 'DDOLD'  ---*
DDREST   DS    0H
         ST    R11,SAVERET         SAVE RETURN ADDRESS
         MODESET KEY=ZERO
         MVC   TIOEDDNM,DDOLD      OVERWRITE DDNAME IN TIOT
         MVC   SCTDDNAM,DDOLD      OVERWRITE DDNAME IN SIOT
         MODESET KEY=NZERO
         BAS   R11,SWAWRITE        WRITE SIOT BACK TO SWA
         L     R11,SAVERET         LOAD RETURN ADDRESS
         BR    R11                 RETURN
         DROP  R2                  KILL TIOT ADDRESSABILITY
         DROP  R4                  KILL TCB ADDRESSABILITY
         DROP  R6                  KILL SCT ADDRESSABILITY
         DROP  R8                  KILL SIOT ADDRESSABILITY
* SWAREAD  - SWAREQ 'READ LOCATE' SUBROUTINE                          *
* SWAWRITE - SWAREQ 'WRITE LOCATE' SUBROUTINE                         *
* SWAREQ   - SWAREQ COMMON ROUTINE (R10 = ADDRESS OF PARAMETER LIST)  *
* ON ENTRY:                                                           *
*        EXTERNAL PARAMETER AREA (EPA) IS SET UP IN 'EPA'             *
*        R11 = RETURN ADDRESS                                         *
SWAREAD  DS    0H
         LA    R10,SWAPREAD        POINT TO 'READ' PARAMETER LIST
         B     SWAREQ              GO TO COMMON ROUTINE
SWAWRITE DS    0H
         LA    R10,SWAPWRIT        POINT TO 'WRITE' PARAMETER LIST
SWAREQ   DS    0H                  COMMON ROUTINE
         MODESET MODE=SUP          SUPERVISOR STATE
         SWAREQ MF=(E,(R10))       CALL SWAREQ SYSTEM ROUTINE
         MODESET MODE=PROB         RETURN TO EARTH
         BR    R11                 RETURN
         DROP  R13                 KILL DSA ADDRESSABILITY
*---     USER ABENDS                                               ---*
BADPARM  DS    0H                  INVALID PARM FIELD
         ABEND 1,DUMP
NOSIOT   DS    0H                  SIOT NOT FOUND
         ABEND 4094,DUMP
NOTIOT   DS    0H                  TIOT ENTRY NOT FOUND
         ABEND 4095,DUMP
*---     CONSTANTS                                                 ---*
SORTSTMT DC    C' SORT FIELDS=COPY'  SORT STATEMENT
SORTSTND DC    C' '                  END OF SORT STATEMENT
         LTORG
*---     REENTRANT EXTENDED SAVE AREA                              ---*
DSA      DSECT
SAVEAREA DS    18F                 STANDARD OS SAVE AREA
DDIN     DS    CL8                 INPUT DDNAME
DDOUT    DS    CL8                 OUTPUT DDNAME
DDOLD    DS    CL8                 OLD DDNAME
DDNEW    DS    CL8                 NEW DDNAME
SAVERET  DS    A                   SAVE RETURN ADDRESS
INTIOT   DS    A                   ADDRESS OF TIOT ENTRY FOR INPUT DD
INSIOT   DS    A                   ADDRESS OF SIOT FOR INPUT DD
OUTTIOT  DS    A                   ADDRESS OF TIOT ENTRY FOR OUTPUT DD
OUTSIOT  DS    A                   ADDRESS OF SIOT FOR OUTPUT DD
*---     PARAMETER LIST FOR SWAREQ                                 ---*
SWEPAPTR DS    A                   SWAREQ EPA POINTER
EPA      DS    XL16                SWAREQ EXTERNAL PARAMETER AREA
SWAPARMS SWAREQ MF=L               SWAREQ PARAMETER LIST
SWAPREAD SWAREQ MF=L               SWAREQ PARAMETER LIST FOR READ
SWAPWRIT SWAREQ MF=L               SWAREQ PARAMETER LIST FOR WRITE
*---     PARAMETER LIST FOR SYNCSORT                               ---*
SORTPTR  DC    0F'0',X'80',AL3(SORTPARM)
         DS    0F
         DS    H                   ALIGN TO SECOND HALF OF FULLWORD
SORTPARM DS    H                   LENGTH OF PARAMETER LIST
SORTPLST DS    0F                  START OF PARAMETER LIST PROPER
SORTBEG  DS    A                   SORT STATEMENT START ADDRESS
SORTEND  DS    A                   SORT STATEMENT END ADDRESS
         DS    4A                  RECORD STMT, EXIT ROUTINES NOT USED
SORTPRDD DS    A                   REPLACEMENT MESSAGE DDNAME
***      DC    X'F0000000'         UNDOCUMENTED PARM USED BY SYNCGENR
         DC    X'FF',C' AP'        MSG OPTION
         DS    0F
SORTPLEN EQU   *-SORTPLST          LENGTH OF PARAMETER LIST
DSASIZE  EQU   *-DSA               LENGTH OF STORAGE AREA
*---     CONTROL BLOCK MAPPING MACROS                              ---*
         IEFZB505 ,                MAP SWAREQ EXTERNAL PARAMETER AREA
         CVT   DSECT=YES           MAP CVT
         IKJTCB ,                  MAP TCB
TIOT     DSECT
         IEFTIOT1 ,                MAP TIOT
         IEZJSCB ,                 MAP JSCB
         IEFJESCT ,
SCT      DSECT
         IEFASCTB ,                MAP SCT
SIOT     DSECT
         IEFASIOT ,                MAP SIOT
         END


Mike Field
Systems Programmer
CDS Ltd (UK)                                                                            c Reserved 1994

