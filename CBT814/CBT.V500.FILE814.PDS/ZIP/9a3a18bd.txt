Using name/token callable services in MVS/SP4

Like a lot of shops, we have a common piece of storage in
ECSA, addressable by all jobs in our system. It contains some
system-wide data. In the past (before MVS/SP4) we used a
subsystem to address the chunk of storage after its allocation -
I don't think IBM had this in mind when they designed
subsystems. In MVS/ESA SP4, IBM has provided a means of
assigning a name to a piece of data. This nice little feature is
called 'name/token callable services'. These are services
provided by the operating system, allowing you to assign a
name to a 'token'. A token in this context means a piece of
data, 16 bytes in size. These 16 bytes can contain anything
(storage addresses, dataspace ALETs, etc). We use name/token
callable services for storing the address of our piece of ECSA.


Creating A Name/Token Pair

Any program can create a name/token pair. The level for the
name/token pair may require you to be authorized. The most
useful level is the SYSTEM_LEVEL. This allows your
name/token pair to be retrieved by any other task in the system.
For creating a system level name/token pair you must be in
supervisor state or PSW key 0-7. The 'persist' option allows
your name/token pair to stay alive after the creating task
terminates. Fill up the token data, assign a name to it, call the
name/token creation callable service, and off you go.

The following piece of code shows you how to create a
name/token pair. The IEANTASM copy book resides in
SYS1.SAMPLIB.

         MODESET MODE=SUP  YOU SHOULD BE AUTHORIZED FOR GETMAIN IN ECSA
         STORAGE OBTAIN,LENGTH=4096,SP=241,LOC=ANY,KEY=8
         ST    R1,ECSAADDR          STORE ECSA ADDRESS IN TOKEN
         CALL  IEANTCR,(SYSLVL,NAME,TOKEN,PERSOPT,RETCODE),VL
*                                            CREATE THE NAME/TOKEN PAIR
         MODESET MODE=PROB          RESET AUTHORIZATION
* RETCODE SHOULD BE CHECKED (SEE BELOW)
* N/T DATA AND CONSTANTS
SYSLVL   DC    A(IEANT_SYSTEM_LEVEL)
NAME     DC    CL16'IPPASTOR'       THE NAME OF THE TOKEN
         DS    0D
TOKEN    DC    XL16'00'             THE TOKEN
         ORG   TOKEN
ECSAADDR DS    F                    ECSA ADDR
         ORG
RETCODE  DC    F'0'
PERSOPT  DC    A(IEANT_PERSIST)     KEEP THE TOKEN AFTER JOB TERMINATES
         COPY  IEANTASM             COPY BOOK FOR N/T CONSTANTS


Retrieving A Name/Token Pair

Once the name/token pair is created, it can be retrieved by
other tasks/jobs in the system (assuming a system level token
was created). The task retrieving the name/token callable
service need not be authorized. You specify the name and the
level of the token you want to retrieve and you receive the data
stored in the token at creation time. The following piece of
code shows you how to retrieve a name/token pair.

         CALL  IEANTRT,(SYSLVL,NAME,TOKEN,RETCODE),VL
* RETCODE SHOULD BE CHECKED (SEE BELOW)
* N/T DATA AND CONSTANTS
SYSLVL   DC    A(IEANT_SYSTEM_LEVEL)
NAME     DC    CL16'IPPASTOR'    THE NAME OF THE TOKEN TO BE RETRIEVED
         DS    0D
TOKEN    DC    XL16'00'             THE TOKEN
         ORG   TOKEN
ECSAADDR DS    F                    THE ADDRESS OF THE ECSA STORAGE
         ORG
RETCODE  DC    F'0'
         COPY  IEANTASM             COPY BOOK FOR N/T CONSTANTS


Deleting A Name/Token Pair

To delete a name/token pair, use the same level and name as
during creation. You must be authorized to delete system level
name/token pairs. The following piece of code shows you how
to delete a name/token pair.

         CALL  IEANTDL,(SYSLVL,NAME,RETCODE),VL
* RETCODE SHOULD BE CHECKED (SEE BELOW)
* N/T DATA AND CONSTANTS
SYSLVL   DC    A(IEANT_SYSTEM_LEVEL)
NAME     DC    CL16'IPPASTOR'       THE NAME OF THE TOKEN TO BE DELETED
         DS    0D
RETCODE  DC    F'0'
         COPY  IEANTASM             COPY BOOK FOR N/T CONSTANTS


CHECKING THE RESULT OF A NAME/TOKEN CALLABLE SERVICE

We use the following routine to check the result of a
name/token callable service.

         @IF   EQ
         CLC   RETCODE,=A(IEANT_OK)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN SUCCESSFUL RETRIEVAL IEANT_OK',  X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_NOT_FOUND)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_NOT_FOUND    ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_24BITMODE)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_24BITMODE    ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_NOT_AUTH)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_NOT_AUTH     ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_SRB_MODE)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_SRB_MODE     ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_LOCK_HELD)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_LOCK_HELD    ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_LEVEL_INVALID)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_LEVEL_INVALID',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_NAME_INVALID)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_NAME_INVALID ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_PERSIST_INVALID)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_PERSIST_INVALID',    X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_AR_INVALID)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_AR_INVALID   ',      X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         @IF   EQ
         CLC   RETCODE,=A(IEANT_UNEXPECTED_ERR)
         @THEN
         WTO   'IPPBCALI - NAME/TOKEN ERROR IEANT_UNEXPECTED_ERR',     X
               ROUTCDE=(11),DESC=(7)
         @ELSE
         WTO   'IPPBCALI - NAME/TOKEN ERROR DURING CREATION',          X
               ROUTCDE=(11),DESC=(7)
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF
         @ENIF

The @ macros are user-written, but you can clearly see the
flow. The name/token routines reside in SYS1.CSSLIB and
must be linked with the program.

Stan Adriansen
Systems Engineer
IPPA Bank nv (Belgium)                                                c Xephon 1993

