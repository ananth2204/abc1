Better use of the TSO TEST command

The TSO TEST command is a useful tool for testing Assembler
programs interactively.  To use symbolic names for locations
(program labels) where breakpoints are to be established, the
CSECTs have to be assembled and link-edited with the TEST
option.

To set a large number of breakpoints and specify actions at
breakpoints, a CLIST containing the necessary TEST
subcommands can be quite helpful.  Instead of entering a lot of
subcommands at every test run, just enter the CLIST name when
TEST is requesting a subcommand.

The following CLIST generates a subcommand CLIST containing
EQ and AT subcommands.  Input is the cross reference of the
Assembler listing.

The advantages are:

1   The TEST option (which creates a symbol table) is not
required for assembly and link-edit:

    ¥    I found that establishing breakpoints using the symbol
table performs quite slowly.

    ¥    You cannot forget to assemble and link-edit without the
TEST option before moving the program into production.

2   A subset of program labels can be specified using substrings
(starting with first character of the label).  However:

    ¥    Only names up to eight characters in length are
supported.

    ¥    Some naming convention for labels is required.

3   Subcommands performed at every breakpoint can be specified
when executing the generated subcommand CLIST.

4   The generated CLIST can be modified easily by editing.

EXAMPLE

Generate a CLIST for setting breakpoints in load module
MAINPGM, CSECT name ABC, at labels starting with L1 and
L650, and at label RETURN:

    %GENEQAT +
      MAINPGM.ABC +
      'MY.ASSEMBLR.LIST' +
      'MY.CLIST(MEMBER)' +
      LABELS('L1,L650,RETURN')

The generated CLIST is as follows:

    PROG 0 AT()
    Q MAINPGM.ABC
    EQ L6500010 +000F12
    AT L6500010 (&AT)

Run program MAINPGM and establish breakpoints.  At every
breakpoint list registers, then continue program execution:

    TEST 'MY.PGM.LOAD(MAINPGM)'
      EXEC 'MY.CLIST(MEMBER)' 'AT(''L OR:15R; GO'')'

or, if the CLIST library is concatenated to SYSPROC:

      %MEMBER AT('L OR:15R; GO')

THE CLIST

PROC 3 QUAL XREFIN GENOUT LABELS() TRACE
/* GENERATE 'EQ' AND 'AT' SUBCOMMANDS FOR TSO TEST COMMAND
/* FROM ASSEMBLER CROSS REFERENCE
IF &TRACE EQ TRACE THEN +
 CONTROL   LIST   CONLIST   SYMLIST NOFLUSH
ELSE +
 CONTROL NOLIST NOCONLIST NOSYMLIST NOFLUSH
ERROR GOTO FINI
SET MAXL = 10
SET SYSDVAL = &STR(&LABELS)
READDVAL L1 L2 L3 L4 L5 L6 L7 L8 L9 L10
SET I = 1
DO WHILE &I LE &MAXL
 SET LX = &&L&I
 SET LL&I = &LENGTH(&STR(&LX))
 SET I = &I + 1
END
ALLOC F(SYSINP) DA(&XREFIN) SHR REUS
ALLOC F(SYSOUT) DA(&GENOUT) OLD REUS
OPENFILE SYSINP INPUT
SET FI = 1
OPENFILE SYSOUT OUTPUT
SET FO = 1
SET F = 0
SET SYSOUT = &STR(PROC 0 AT())
PUTFILE SYSOUT
SET SYSOUT = &STR(Q &QUAL)
PUTFILE SYSOUT
LOOP: +
 GETFILE SYSINP
 IF &F EQ 0 THEN +
  IF &SUBSTR(47:61,&SYSINP) EQ &STR(CROSS REFERENCE) THEN DO
   SET F = 1
   GOTO LOOP
  END
 IF &F EQ 1 THEN DO
  IF &SUBSTR(2:2,&SYSINP) NE &STR( ) THEN DO
   SET I = 1
   DO WHILE &I GE 1 AND &I LE &MAXL
    SET LLX = &&LL&I
    IF &LLX GT 0 THEN DO
     SET LX = &&L&I
     IF &SUBSTR(2:&LLX+1,&SYSINP) EQ &STR(&LX) THEN +
      SET I = -1
    END
    SET I = &I + 1
   END
   IF &I EQ 0 THEN DO
    SET SYSOUT = &STR(/*)
    PUTFILE SYSOUT
    SET SYSOUT = +
     &STR(EQ &SUBSTR(2:9,&SYSINP) +&SUBSTR(19:24,&SYSINP))
    PUTFILE SYSOUT
    SET SYSSCAN = 3
    SET SYSOUT = &STR(AT &SUBSTR(2:9,&SYSINP) (&&&Z.AT))
    SET SYSSCAN = 16
    PUTFILE SYSOUT
    GOTO LOOP
   END
  END
  IF &SUBSTR(5:29,&SYSINP) EQ +
     &STR(OPTIONS FOR THIS ASSEMBLY) THEN DO
   SET F = 2
   GOTO LOOP
  END
 END
 IF &F EQ 2 THEN DO
  SET SYSDVAL = &STR(&SYSINP)
  READDVAL O0 O1 O2 O3 O4
  IF &O4 EQ NOXREF THEN +
   WRITE ERROR: 'NOXREF' WAS SPECIFIED FOR ASSEMBLY
  ELSE +
   IF &O4 EQ XREF(SHORT) THEN +
    WRITE WARNING: 'XREF(SHORT)' WAS SPECIFIED FOR ASSEMBLY
  GOTO FINI
 END
GOTO LOOP
FINI: +
ERROR OFF
IF &FI EQ 1 THEN +
 CLOSFILE SYSINP
IF &FO EQ 1 THEN +
 CLOSFILE SYSOUT
FREE F(SYSINP SYSOUT)
ISPEXEC EDIT DATASET(&GENOUT)


Walter Wiedemann
Consultant (West Germany) © Walter Wiedemann 1989

