Detecting datasets with block waste

When using ISMF to display dataset attributes, I am always
interested in the block waste value and the potential for
reclaiming DASD space. The block waste value is the number
of kilobytes a dataset is wasting because of an inefficient block
size. This is dead space and cannot be reclaimed except by
reallocating the dataset and using a more efficient block size.
The information is quite useful and can provide high payback
when analysed and acted upon.

Unfortunately, ISMF is very cumbersome when the analysis is
done on many datasets. There is no interface to produce batch
reports and, since it is an on-line process, large requests are
very slow and, in most cases, impractical.

I decided to write a program to produce the data in a flexible
yet concise batch report format. The program interfaces with
the IDCAMS DCOLLECT function to secure information
regarding wasted space. The program, called BLKWASTE,
provides four possible input parameters to customize the report.
They are:

1      A lower limit block waste value to determine which
      datasets to include in the report (BW).

2      Volumes to include in the search for datasets (VL).

3      DFSMS storage groups to include in the search for datasets (SG).

4      A sort field report sequence (SF).

Possible values and further explanation for these parameters are
documented in the sample JCL which follows. By combining
analysis of BLKWASTE reports with use of the open exit for
system determined block size, documented in the July 1991
issue of MVS Update, I have practically eliminated lost space
due to inefficient block sizes. In most shops, this will be quite
a significant amount of DASD. Datasets appearing on the
report can be corrected by running a DFDSS COPY function
with the REBLOCK option. If the dataset is continually
recreated in a job stream, a simple change in the originating
JCL to invoke system determined blocksize will correct the
situation. For this utility to function, you must have DFP 3.2
with the DCOLLECT enabling PTF UY90555 installed. In
addition to the JCL necessary to run the program, a brief
sample report follows.


SAMPLE JCL

//*
//*  This job determine datasets wasting space due to inefficient block size
//*
//*  Parm values are: BW=Block waste decimal kilobyte value.  Only datasets
//*                      with waste greater or equal will be reported.
//*                      Code five digits with leading zeros. Default is 10000.
//*                   SG=Storage group to gather information from.  No default.
//*                   VL=Volumes to gather information from.  Use * to specify
//*                      all remaining characters. Default is * (all).
//*                   SF=Sort field report sequence; A - dsname (default)
//*                                                  B - block waste
//*                                                  C - volume //* //STEP1    EXEC PGM=BLKWASTE,PARM='BW=15000,VL=*,SF=B'
//SYSPRINT DD   SYSOUT=*
//SYSOUT   DD   SYSOUT=*
//SYSIN    DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTIN   DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTOUT  DD   UNIT=VIO,SPACE=(CYL,(10,1))
//DCOLLECT DD   UNIT=VIO,SPACE=(CYL,(10,1)),
//  DCB=(LRECL=264,RECFM=VB,DSORG=PS)
//DISPLAY  DD   SYSOUT=*


SAMPLE REPORT

BLOCK WASTE REPORT OF DATASETS WASTING OVER 15000 KILOBYTES SORTED BY WASTE
         DATASET NAME                                WASTE(KBYTES)     VOLUME
------------------------------                       -------------     ------
HRMGP.LIB.SOURCE                                         15366         S921C4
RSSP.PRNTFILE.REPORT                                     19577         S8E642
SYS2.GSP.LOG                                             25538         S921C3
IPSP.ONLINEPO.FILE                                       38166         S8E82D


BLKWASTE PROGRAM

BLKWASTE CSECT
         STM   R14,R12,12(R13)         HOUSEKEEPING
         BALR  R12,R0
         USING *,R12
         LA    R2,REGSAVE
         ST    R2,8(R13)
         ST    R13,4(R2)
         LR    R13,R2
         L     R4,0(R1)                GET PARM LENGTH ADDRESS
         LH    R5,0(R4)                LENGTH OF PARM DATA
         LTR   R5,R5                   IS IT ZERO?
         BZ    BLKWST30                YES, NO PARM
         LA    R5,2(R5,R4)             END OF PARM DATA
         LA    R4,1(,R4)               POSITION FOR COMPARE
BLKWST05 LA    R4,1(,R4)               POSITION FOR COMPARE
         CLC   0(3,R4),=C'SG='         STORAGE GROUP?
         BE    BLKWST07                YES, SAVE IT
         CLC   0(3,R4),=C'VL='         VOLUME?
         BE    BLKWST10                YES, SAVE IT
         CLC   0(3,R4),=C'BW='         BLOCK WASTE?
         BE    BLKWST20                YES, SAVE IT
         CLC   0(3,R4),=C'SF='         SORT FIELD?
         BE    BLKWST25                YES, SAVE IT
         WTO   '* BAD PARM DATA *'
         ABEND 997
BLKWST07 LA    R6,DCOLSTO2             PREPARE FOR STORGRP MOVE
         MVI   PRIMEFLG,C'1'           INDICATE THERE WAS A STORGRP
         MVC   DCOLSTO1,=C' STOG('     PRIME DCOLLECT
         MVI   DCOLSTO3,C')'
         LA    R4,3(R4)                POINT TO STORGRP CHARACTER
         B     BLKWST15                GO MOVE IT
BLKWST10 LA    R6,DCOLVOL2             PREPARE FOR VOLUME MOVE
         MVI   PRIMEFLG,C'1'           INDICATE THERE WAS A VOLUME
         MVC   DCOLVOL1,=C' VOL('      PRIME DCOLLECT
         MVI   DCOLVOL3,C')'
         LA    R4,3(R4)                POINT TO VOLUME CHARACTER
BLKWST15 MVC   0(1,R6),0(R4)           MOVE CHARACTER
         LA    R4,1(R4)                NEXT CHARACTER
         CR    R4,R5                   AT END?
         BE    BLKWST30                IF YES, GO PROCESS
         CLI   0(R4),C','              IS IT A COMMA?
         BE    BLKWST05                IF YES, WHATS NEXT?
         LA    R6,1(R6)                NEXT DCOLLECT POSTION
         B     BLKWST15                GO MOVE IT
BLKWST20 LA    R4,3(R4)                POINT TO WASTE VALUE
         MVC   WASTEPRM(5),0(R4)       MOVE THE WASTE PARM
         MVC   HD1WASTE,WASTEPRM       PUT BLOCK WASTE IN HEADING
         LA    R4,5(R4)                JUMP PAST WASTE VALUE
         B     BLKWST27                GO CHECK FOR END
BLKWST25 LA    R4,3(R4)                POINT TO SORT VALUE
         MVC   SORTPARM(1),0(R4)       MOVE SORT PARM
         LA    R4,1(R4)                JUMP PAST SORT VALUE
BLKWST27 CR    R4,R5                   AT END?
         BE    BLKWST30                IF YES, GO PROCESS
         B     BLKWST05                GO CHECK NEXT PARM
BLKWST30 CLI   PRIMEFLG,C'1'           WAS THERE A STORGRP OR VOLUME?
         BE    BLKWST33                IF YES, CONTINUE
         MVC   DCOLVOL1,=C' VOL('      IF NO, NEED TO PRIME DCOLLECT
         MVC   DCOLVOL2,=C'*     '        FOR ALL
         MVI   DCOLVOL3,C')'                 VOLUMES
BLKWST33 OPEN  (SYSIN,(OUTPUT))
         PUT   SYSIN,DCOLCARD          PUT DCOLLECT OUT TO IDCAMS
         CLOSE SYSIN                   CLOSE SYSIN SO IDCAMS CAN READ
         LA    R1,0                    PREPARE FOR IDCAMS LINK
         LINK  EP=IDCAMS               CALL IDCAMS TO DO DCOLLECT
         LTR   R15,R15                 ZERO RC FROM IDCAMS DCOLLECT?
         BZ    BLKWST35                IF YES, CONTINUE ON
         WTO   '*  NON ZERO RC FROM DCOLLECT, REVIEW SYSPRINT *'
         ABEND   998
BLKWST35 OPEN  (DCOLLECT,,SORTIN,(OUTPUT),DISPLAY,(OUTPUT))
BLKWST40 GET   DCOLLECT                 READ OUTPUT FROM IDCAMS LISTC
         LA    R9,4(R1)                 POINT TO RECORD
         USING IDCDOUT,R9
         CLI   DCURCTYP,C'D'            IS THIS A DATASET RECORD?
         BNE   BLKWST40                 IF NOT, DONT WANT IT
         L     R8,DCDNMBLK              LOAD THE BLOCK WASTE VALUE
         CVD   R8,BLKWSTE1              CONVERT TO DECIMAL
         PACK  PACKWSTE,WASTEPRM        PACK IT FOR COMPARE
         CP    BLKWSTE1,PACKWSTE        COMPARE ACTUAL WITH PARM
         BL    BLKWST40                 IF LESS, DONT WANT IT
         MVC   BLKWSTE2,EDITPTRN        PREPARE FOR EDIT
         ED    BLKWSTE2,BLKWSTE1        GET RID OF LEADING ZEROS
         MVC   SAVEDSN,DCDDSNAM         SAVE DSNAME
         MVC   SAVESIZE,BLKWSTE2        SAVE BLOCK WASTE
         MVC   SAVEVOL,DCDVOLSR         SAVE VOLUME SERIAL
         PUT   SORTIN,SAVERCRD          PUT RECORD OUT TO SORT
         B     BLKWST40                 GO GET ANOTHER RECORD
BLKWST45 CLOSE SORTIN                   CLOSE SORTIN SO SORT CAN READ
         CLI   SORTPARM,C'B'            IS THIS A BLOCK WASTE SORT?
         BE    BLKWST47                 IF YES, GO PROCESS
         CLI   SORTPARM,C'C'            IS THIS A VOLUME SERIAL SORT?
         BNE   BLKWST49                 IF NOT, USE DEFAULT
         MVC   SORTFLD,SORTFLD2         MOVE VOLUME SERIAL SORT FIELD
         MVC   HD1SORT,=C'VOLUME'       INDICATE A VOLUME SORT
         B     BLKWST49                 GO SORT
BLKWST47 MVC   SORTFLD,SORTFLD1         MOVE WASTE SORT FIELD
         MVC   HD1SORT,=C'WASTE '       INDICATE A BLOCK WASTE SORT
BLKWST49 LA    R1,POINTER               PREPARE FOR SORT
         LINK  EP=SORT                  CALL SORT
         LTR   R15,R15                  WAS SORT RC ZERO?
         BZ    BLKWST50                 IF YES, CONTINUE
         WTO   '* NON ZERO RC FROM SORT, REVIEW SYSOUT *'
         ABEND   999
BLKWST50 OPEN  SORTOUT                   PREPARE TO READ SORTED DATA
         LA    R3,64                     ALLOW 64 LINES PER PAGE
BLKWST55 PUT   DISPLAY,HEADING1          PRINT HEADING1
         PUT   DISPLAY,BLANKS            PRINT BLANK LINE
         PUT   DISPLAY,HEADING2          PRINT HEADING2
         PUT   DISPLAY,HEADING3          PRINT HEADING3
         LA    R4,5                      STARTING AT LINE 5
BLKWST60 GET   SORTOUT                   READ A SORT RECORD
         MVC   SAVERCRD+1(79),0(R1)      PREPARE TO PRINT
         PUT   DISPLAY,SAVERCRD          PRINT THE RECORD
         LA    R4,1(R4)                  ADD 1 TO LINE COUNT
         CR    R3,R4                     IS IT PAST LINE 64?
         BL    BLKWST55                  IF YES, GO PRINT HEADING
         B     BLKWST60                  GO GET NEXT RECORD
BLKWST65 CLOSE (SORTOUT,,DISPLAY)        CLEAN UP
         L     R13,REGSAVE+4             RESTORE REGISTERS
         ST    R15,16(R13)                               AND
         LM    R14,R12,12(R13)                              GO
         BR    R14                                            HOME
         LTORG
REGSAVE  DS    18F                       REGISTER SAVE AREA
BLANKS   DC    CL80' '
PACKWSTE DS    D                         PARM WASTE WORK AREA
BLKWSTE1 DS    D                         ACTUAL WASTE WORK AREA
BLKWSTE2 DS    CL16                      UNPACKED, CONVERTED
WASTEPRM DC    CL5'10000'                DEFAULT WASTE PARM
PRIMEFLG DC    C' '                      DCOLLECT PRIMED FLAG
SORTPARM DC    C'A'                      DEFAULT SORT PARM
SORTFLD1 DC    C'49,16,CH,A)'            BLOCK WASTE SORT
SORTFLD2 DC    C'67,08,CH,A)'            VOLUME SERIAL SORT
EDITPTRN DC    X'40202020202020202020202020202020'
HEADING1 DC    CL80'1'                   REPORT HEADING
         ORG   HEADING1
         DS    CL3
         DC    C' BLOCK WASTE REPORT OF DATASETS WASTING OVER '
HD1WASTE DC    CL5'10000'
         DC    C' KILOBYTES SORTED BY '
HD1SORT  DC    CL6'DSNAME'
         ORG
HEADING2 DC    CL80' '                   REPORT HEADING
         ORG   HEADING2
         DS    CL12
         DC    CL44'DATASET NAME'
         DC    C'WASTE(KBYTES)'
         DC    C'     VOLUME'
         ORG
HEADING3 DC    CL80' '                   REPORT HEADING
         ORG   HEADING3
         DS    CL3
         DC    CL53'------------------------------'
         DC    C'-------------'
         DC    C'     ------'
         ORG
SAVERCRD DC    CL80' '                   SAVE RECORD FOR SORT
         ORG   SAVERCRD
         DS    CL2
SAVEDSN  DS    CL44
         DS    CL2
SAVESIZE DS    CL16
         DS    CL9
SAVEVOL  DS    CL6
         ORG
DCOLCARD DC    CL80' '                   IDCAMS DCOLLECT RECORD
         ORG   DCOLCARD
         DC    C' DCOLLECT'
         DC    C' OFILE(DCOLLECT)'
DCOLVOL1 DC    CL5' '
DCOLVOL2 DC    CL6' '
DCOLVOL3 DC    C' '
DCOLSTO1 DC    CL6' '
DCOLSTO2 DC    CL8' '
DCOLSTO3 DC    C' '
         DC    C' NOVOLUMEINFO'
         ORG
         CNOP  2,4
BYTECNT  DC    Y(24)                     SORT PARAMETERS
         DC    A(SORTBEG)
         DC    A(SORTEND)
         DC    A(RECBEG)
         DC    A(RECEND)
         DC    2F'0'
POINTER  DC    X'80'
         DC    AL3(BYTECNT)
SORTBEG  DC    C' SORT FIELDS=('
SORTFLD  DC    C'03,44,CH,A)'
SORTEND  DC    C' '
RECBEG   DC    C' RECORD TYPE=F,LENGTH=80'
RECEND   DC    C' '
DISPLAY  DCB   DDNAME=DISPLAY,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=80 DCOLLECT DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=BLKWST45
SORTOUT  DCB   DDNAME=SORTOUT,DSORG=PS,MACRF=GL,EODAD=BLKWST65
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,       X
              BLKSIZE=80
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80
         IDCDOUT
         END


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                        c Xephon 1992

