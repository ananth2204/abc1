Varying DASD volumes off-line generically

Using the PARM specified in the JCL, the following program
will vary DASD off-line, based on the VOLSER. In MVS
environments with shared DASD, it is often desirable that
some disks are not on-line to a system. For example, you may
not want development disks to be on-line to the production
system. In most cases the disks are varied on-line/off-line using
a member in SYS1.PARMLIB. This is cumbersome to
maintain, since each change in the DASD configuration
requires SYS1.PARMLIB to be updated as well. In addition,
the SYS1.PARMLIB member requires an address or address
range to be specified.

The OFFLINE program solves this problem. It allows you to
vary volumes off-line based on a generic VOLSER. The
program is executed like this:

      //ST010   EXEC PGM=OFFLINE,PARM='nnnnnn'

where nnnnnn is a 6-byte generic volume serial number.
Asterisks may be used as a wild-card character. For example,
DDSK** would vary off-line all volumes starting with
'DDSK'.

         TITLE 'Vary DASD-volumes offline                             '
*/*------------------------------------------------------------------*/
*/* INSTALLATION NOTES:                                              */
*/* Assemble and link this program into an APF library.              */
*/* Create a started task to execute the OFFLINE program.            */
*/* Add a command to one of the SYS1.PARMLIB members to start        */
*/* the started task.                                                */
*/* EXAMPLE:                                                         */
*/* SYS1.PROCLIB(DISKOFF)                                            */
*/* //ST010   EXEC PGM=OFFLINE,PARM='VOL***' Offline all VOL... disks*/
*/* //STEPLIB   DD DISP=SHR,DSN=MY.APF.LIB                           */
*/* //ST020   EXEC PGM=OFFLINE,PARM='TM****' Offline all TM.... disks*/
*/* //STEPLIB   DD DISP=SHR,DSN=MY.APF.LIB                           */
*/* SYS1.PARMLIB(COMMND00)                                           */
*/* COM='S DISKOFF'                                                  */
*/* RESTRICTIONS:                                                    */
*/* Must be executed from an authorized environment.                 */
*/* Supports three-digit device numbers only.                        */
*/* Before a volume is varied off-line a display command is          */
*/* done. Because of the amount of the output this can generate to   */
*/* the console, you may want to suppress the code.                  */
*/*------------------------------------------------------------------*/
         MACRO
&LABEL   $JGESAVE &RENT=NO,&V='1',&R='00',&M='000',&STACK=YES,         X
               &REGEQU=YES
         AGO   .NODOC
***********************************************************************
*    MODULE NAME: $JGESAVE
*    MODULE FUNCTION: Establish register conventions etc...
*    MODULE DESCRIPTION:
*    This macro establishes the linkage conventions, assigns
*    symbolics to the general purpose registers,
*    assigns the base registers R11 and R12.
*    PARAMETERS:
*   RENT=      Used to indicate whether reentrant or non-reentrant
*              linkage conventions should be created. Default=NO
*   V=         One digit version nr of csect
*   R=         Two digit release nr of csect
*   M=         Three digit modification level nr of csect
*   STACK=YES  Specified whether Linkage Save Stack (BAKR) should
*              be used or not, default=YES. Stack = NO should be
*              used when the program being called does not use
*              standard linkage conventions or when the XCTL macro
*              is being used to transfer control to another program.
*   REGEQU=YES Define register equates yes or no, specify NO
*              when $HASPEQU is used.
*    MANUALS REFERENCED:
*    Application Development Guide - Linkage Conventions
*    RESTRICTIONS:
*    Must test functionality when RENT=YES is specified.
***********************************************************************
.NODOC   ANOP
         TITLE 'PROGRAM=&SYSECT'                            ,$JGE920827
         SPLEVEL SET=3
         AIF   ('&REGEQU' EQ 'NO').NOREGS
         $JGEREGS                 Assign register symbolics
.NOREGS  ANOP
&SYSECT  CSECT
         USING *,R15              Assign temporary base register
         B     &SYSECT.BEGIN      Branch around constants
         DC    CL08'$JGESAVE'     Eyecatcher
         DC    XL1'00'            Reserved for future use
         DC    XL1'00'            Reserved for future use
.* Store version, release, modification level
$JGEVERS DC    CL1&V              Version nr
$JGERLSE DC    CL2&R              Release nr
$JGEMOD  DC    CL3&M              Modification level
         DC    CL08'&SYSECT'      Csect name
         DC    CL08'&SYSDATE'     Assembly date
         DC    CL01' '            Must be blank
         DC    CL08'&SYSTIME'     Assembly time
         DROP  R15
*/*------------------------------------------------------------------*/
*/* Perform register saving conventions                              */
*/*------------------------------------------------------------------*/
&SYSECT.BEGIN DS 0H
         AIF   ('&STACK' NE 'YES').STM
         BAKR  R14,0              Save caller's registers
         AGO   .USE
.STM     ANOP
         STM   R14,R12,12(R13)    Save caller's registers
.USE     USING &SYSECT,R11
         USING &SYSECT+4095,R12
         LR    R11,R15            LOAD FIRST BASE REGISTER
         LA    R12,4095(R11)      LOAD SECOND BASE REGISTER
         AIF   ('&RENT' EQ 'NO').$JGE01
         MNOTE 0,'Test functionality of reentrant program'
*/*------------------------------------------------------------------*/
*/* Get storage for save area                                        */
*/*------------------------------------------------------------------*/
.*DEL    GETMAIN R,LV=$JGESLTH    Obtain storage for save area
         STORAGE OBTAIN,          Obtain storage for...     ,$JGE920827X
               LENGTH=$JGESLTH    ...save area              ,$JGE920827
         USING $JGESAVE,R13
         ST    R13,$JGESABK-$JGESA(,R1) Store caller's save area addr
*                                 in my save area (backward chain)
         ST    R1,$JGESAFW        Save my save area address
*                                 in caller's save area (forward ch)
         AIF   ('&STACK' NE 'YES').$JGE00
         LR    R13,R1             Save area address in R13
         USING $JGESAVE,R13
         EREG  R0,R1              Recall parameter registers
         AGO   .$JGE01A
.$JGE00  ANOP
         LR    R15,R1             Save addr of getmained area
         L     R1,$JGESA1         Reload registers corrupted
         L     R2,$JGESA0         ...by getmain
         LR    R13,R15            Address of getmained area
         AGO   .$JGE01A
.$JGE01  ANOP
.* Non-reentrant code
         ST    R13,$JGESABK       Store caller's save area address
*                                 in my save area (backward chain)
         LR    R2,R13
         LA    R13,$JGESA         Copy my save area's address
         ST    R13,8(R2)          in caller's save area (forward ch)
.* Non-reentrant code should not establish a register
.* for save area, this will cause problems
.$JGE01A ANOP
         AIF   ('&STACK' NE 'YES').$JGE01B
         MVC   4(4,R13),F1SA      Load Linkage stack indicator
.$JGE01B XC    $JGERETC,$JGERETC  CLEAR RETURN CODE
         B     $JGE&SYSNDX        BRANCH AROUND RETURN ROUTINE
*/*------------------------------------------------------------------*/
*/* Return to caller routine                                         */
*/*------------------------------------------------------------------*/
$JGERETN DS    0H
         AIF   ('&STACK' EQ 'YES').$JGE01D
         AIF   ('&RENT' EQ 'NO').$JGE01C
         MNOTE 12,'$JGESAVE supports only STACK=YES'        ,$JGE920827
.$JGE01C ANOP
         L     R15,$JGERETC       Load return code
         L     R13,$JGESABK       Reload caller's save area address
         L     R14,12(R13)        Reload return address
         LM    R0,R12,20(R13)     Restore caller's registers
         BR    R14                Return to caller
.$JGE01D ANOP
         AIF   ('&RENT' EQ 'NO').$JGE02
         L     R2,$JGERETC        Save return code          ,$JGE920827
.* STORAGE macro uses R14                                   ,$JGE920827
         STORAGE RELEASE,         Release storage           ,$JGE920827X
               LENGTH=$JGESLTH,                             ,$JGE920827X
               ADDR=(R13)                                   ,$JGE920827
         LR    R15,R2             Reload return code        ,$JGE920827
         PR
         AGO   .$JGE02A
.$JGE02  ANOP
         AIF   ('&STACK' NE 'YES').$JGE02B
         L     R15,$JGERETC       Load return code
         PR                       Return to caller
.$JGE02A ANOP
F1SA     DC    CL4'F1SA'
.$JGE02B ANOP
         AIF   ('&RENT' EQ 'NO').$JGE03
$JGESAVE DSECT
         AGO   .$JGE04
.$JGE03  ANOP
$JGESAVE DS    0F
.$JGE04  ANOP
$JGESA   DS    18F
         ORG   $JGESA
$JGESAXX DS    F
$JGESABK DS    F                  CALLER'S SAVE AREA
$JGESAFW DS    F                  FORWARD SAVE AREA ADDRESS
$JGESA14 DS    F                  REGISTER 14
$JGESA15 DS    F                  REGISTER 15
$JGESA0  DS    F                  REGISTER 0
$JGESA1  DS    F                  REGISTER 1
         DS    11F
.$JGE09  ANOP
$JGERETC DS    1F                 RETURN CODE
$JGESLTH EQU   *-$JGESAVE
&SYSECT  CSECT
$JGE&SYSNDX DS    0H
         MEND
         MACRO
&LABEL   $JGEREGS
         $DOC
***********************************************************************
*    MODULE NAME: $JGEREGS
*    MODULE FUNCTION: Assign register symbolics
*    MODULE DESCRIPTION:
***********************************************************************
         $DOCEND
*/*------------------------------------------------------------------*/
*/* ASSIGN REGISTER SYMBOLICS                                        */
*/*------------------------------------------------------------------*/
R0       EQU   0                  PARAMETER PASSING
R1       EQU   1                  PARAMETER PASSING
R2       EQU   2
                    etc
R13      EQU   13                 ADDR SAVE AREA OF CALLER
R14      EQU   14                 RETURN ADDRESS OF CALLER
R15      EQU   15                 ENTRY ADDRESS AT ENTRY OR RC
ON       EQU   1
TRUE     EQU   1
OFF      EQU   0
FALSE    EQU   0
         MEND
         MACRO
&LBL     $BLANK   &FIELD
.**********************************************************************
.* MACRO: $BLANK                                                      *
.* FILL A FIELD WITH BLANKS                                           *
.**********************************************************************
&LBL      MVI   &FIELD,C' '
          MVC   &FIELD+1(L'&FIELD-1),&FIELD
          MEND
OFFLINE  CSECT
         $JGESAVE V='1',R='00',M='000'
         L     R10,0(R1)          Get parm pointer
         CLC   0(2,R10),=H'6'
         BE    COPYVOL
         WTO   'OFFLINE - Invalid parameter length',ROUTCDE=1
         B     $JGERETN
COPYVOL  DS    0H
         MVC   VOLMASK,2(R10)     Copy volser from parm to make
*                                 things a little easier
         L     R3,CVTPTR
         USING CVTMAP,R3
         XC    WORKAREA,WORKAREA  CLEAR WORKAREA ONCE
         LA    R1,WORKAREA
         ST    R1,PARMWA
         LA    R1,DEVCLASS
         ST    R1,PARMDEVT
         MVI   DEVCLASS,UCB3DACC  ONLY DIRECT ACCESS UCBS
         LA    R1,ADDRUCB
         ST    R1,PARMUCB
         OI    PARMUCB,X'80'      INDICATE END OF PARMLIST
         USING UCBOB,R2           ADDRESSIBILITY
SCANIT   LA    R1,PARMLIST
         L     R15,CVTUCBSC      GET SCAN SERVICE ROUTINE ADDRESS
         BALR  R14,R15           GO DO SCANNING
         LTR   R15,R15           DID IT RETURN A UCB?
         BNZ   EOF               NO END OF JOB (CLEANUP)
         L     R2,ADDRUCB
         TM    UCBSTAT,UCBONLI   IS IT ON-LINE
         BNO   SCANIT            NO FORGET ABOUT IT
* Check if volser is of a volume we want to put off-line
         CLC   VOLMASK,UCBVOLI   Match complete volser name?
         BNE   SCANV000          No, go check generic name
* Put volume offline and terminate program
         LA    R1,UCBVOLI        Volume matched complete name
         BAL   R14,PUTOFF        Go put it off-line
         B     EOF               Go home
* Check the wildcards in VOLMASK
SCANV000 DS    0H
         LA    R1,VOLMASK         Start of generic volser mask
         LA    R14,UCBVOLI        Disk volume serial nr
         LA    R15,L'VOLMASK      Length of volser mask
SCANV010 DS    0H
         CLI   0(R1),C'*'         Any character?
         BE    SCANV020           Yes, check next
         CLC   0(1,R14),0(R1)     Character match?
         BNE   SCANIT             No go get next
SCANV020 DS    0H
         LA    R1,1(R1)           Point to next volmask character
         LA    R14,1(R14)         Point to next UCBVOLI character
         BCT   R15,SCANV010       Go compare mext
         LA    R1,UCBVOLI         All six characters matched
         BAL   R14,PUTOFF         Go put it off-line
         B     SCANIT             Go get next volume
*/*------------------------------------------------------------------*/
*/* PUTOFF: Subroutine to put a volume off-line                      */
*/* R1  - Pointer to volume serial nr                                */
*/* R14 - Return address                                             */
*/* UCB - Must be addressable                                        */
*/*------------------------------------------------------------------*/
         DS    0F
         DC    F'0'               Return address's save area
PUTOFF   ST    R14,PUTOFF-4       Save return address
         $BLANK CMDTEXT           Clear command text buffer
* Issue a display command for the device, possibly to
* help in problem determination
         MVC   CMDTEXT(017),=CL017'DISPLAY U,,,nnn,1'
         MVC   CMDTEXT+12(3),UCBNAME Copy device nr into command
         MODESET KEY=ZERO,MODE=SUP
         SR    R0,R0              Clear register
         LA    R1,CMDBUFF         Set parm address
         SVC   34                 Issue display command
         $BLANK CMDTEXT
         MVC   CMDTEXT(016),=CL016'VARY nnn,OFFLINE'
         MVC   CMDTEXT+5(3),UCBNAME
         SR    R0,R0              Clear register
         LA    R1,CMDBUFF         Set parm address
         SVC   34                 Issue display command
         MODESET KEY=NZERO,MODE=PROB
         L     R14,PUTOFF-4       Load return address
         BR    R14                Return to caller
*/*------------------------------------------------------------------*/
*/* DEALLOC: Subroutine to start DEALLOC                             */
*/* R14 - Return address                                             */
*/*------------------------------------------------------------------*/
         DS    0F
         DC    F'0'               Return address's save area
DEALLOC  ST    R14,DEALLOC-4      Save return address
         $BLANK CMDTEXT           Clear command text buffer
         MVC   CMDTEXT(019),=CL019'S DEALLOC'
         MODESET KEY=ZERO,MODE=SUP
         SR    R0,R0              Clear register
         LA    R1,CMDBUFF         Set parm address
         SVC   34                 Issue display command
         MODESET KEY=NZERO,MODE=PROB
         L     R14,DEALLOC-4      Load return address
         BR    R14                Return to caller
EOF      DS    0H
         BAL   R14,DEALLOC
         B     $JGERETN
         DC    C'CMDBUFF='        *** Eyecatcher ***
CMDBUFF  DS    0D
CMDFLAG1 DC    X'00'              Flag 1
CMDLNGTH DC    AL1(CMDBUFFL)      Length
CMDFLAG2 DC    X'0000'            Flag 2
CMDTEXT  DC    CL80' '            Command text
CMDBUFFL EQU   *-CMDBUFF
PARMLIST DC    3F'0'
         ORG   PARMLIST
PARMWA   DS    F
PARMDEVT DS    F
PARMUCB  DS    F
DEVCLASS DC    X'00'
ADDRUCB  DC    F'0'
SAVEVOLA DC    F'0'
INPUT    DC    X'00'
         DS    0D
WORKAREA DS    CL100
VOLMASK  DS    CL6               Volser mask for volumes to put offline
         LTORG
         DSECT
         IEFUCBOB
         CVT   DSECT=YES
         END


                                                                  c Xephon 1993

