Programmable console (continued)

This month we conclude our look at a programmable console
routine with the publication of the remaining source code.


CONSOLE (CONTINUED)

         TITLE 'COMMAND PROCESSING'
*              READ ANY INPUT
GETCMD   DS    0H
         XC    MSGAREA,MSGAREA     CLEAR ERR MSG AREA
         TM    FLAG,STATIC         WANT A STATIC DISPLAY ?
         BO    NOSTIMER            BIF SO...
         TM    FLAG2,SNA           SNA SCREEN ?
         BZ    DOSTIMER            BIF NOT...START WAITING
         TGET  TGETAREA,L'TGETAREA,ASIS,NOWAIT     READ ANY INPUT
*            (NO SUCH THING AS A SHORT READ WITH A FORMATTED I/P FIELD)
         CH    R15,=H'4'               ANY INPUT FROM NOWAIT ?
         BNE   GOTCMD                  BIF SO...LETS SEE IT
DOSTIMER DS    0H
         STIMER WAIT,BINTVL=DELAY      WAIT FOR A SEC..
         TGET  TGETAREA,L'TGETAREA,ASIS,NOWAIT     READ ANY INPUT
*            (NO SUCH THING AS A SHORT READ WITH A FORMATTED I/P FIELD)
         CH    R15,=H'4'               NO INPUT FROM NOWAIT ?
         BE    NXTINPUT                BIF SO..REDISPLAY SCREEN ETC...
         B     GOTCMD                  OTHERWISE PROCESS INPUT
NOSTIMER DS    0H
         TGET  TGETAREA,L'TGETAREA,ASIS,WAIT     WAIT FOR INPUT
         CH    R1,=H'3'                ANY INPUT ? (LEN 3=NO DATA)
         BNE   GOTCMD                  BIF SO...PROCESS IT
         OI    FLAG,LONGWRT            REWRITE COMPLETE SCREEN
         CLI   TGETAREA,#ENTER         ENTER HIT ?
         BNE   ENDFIELD                BIF NOT...ACT ON PFKEY
         B     NXTINPUT                OTHERWISE NO OTHER ACTION NEEDED
GOTCMD   DS    0H
         NI    INATTR,X'FE'            SET MDT BIT OFF
         LA    R4,CMDBUFF              POINT TO CMDBUFF
         XC    CMDBUFF,CMDBUFF         SET CMDBUFF TO NULLS
         LA    R5,TGETAREA             POINT TO TGETAREA
         BCTR  R1,0                    R1 IS OFFSET TO LAST BYTE
         LR    R15,R1                  = INPUT LEN - 1 (=DATA LEN+5)
         BCTR  R15,0                   = INPUT LEN - 2 (DATA LEN + 4)
         STH   R15,CMDLEN              SAVE CMD LEN (+4)
         AR    R1,R5                   COMPUTE ADDR OF LAST BYTE READ
         LR    R6,R1                   AND SAVE IT
         LA    R5,1(R5)                SKIP OVER AID BYTE
         LA    R5,2(R5)                SKIP OVER CURSOR ADDRESS
         CR    R5,R6                   ARE WE BEYOND LAST BYTE?
         BH    ENDFIELD                YEP, QUIT
*              NOW PROCESS THE ONE AND ONLY MODIFIED FIELD
         CLC   INSBA,1(R5)             SBA, ROW=LAST-2, COL 2?
         BE    OKFIELD                 MODIFIED FIELD IS AS EXPECTED
         TPUT  =CL10'BAD SBA',10       OTHERWISE ISSUE MSG
         B     PAUSE                   REVIEW MSG AND END
OKFIELD  DS    0H
         LA    R5,3(R5)                SKIP OVER SBA
         OI    FLAG2,LEFTJ             DROP (LEADING) BLANKS
NEXTBYTE DS    0H
         CR    R5,R6                   BEYOND LAST BYTE IN TGETAREA?
         BH    ENDFIELD                YEP
         TM    FLAG2,LEFTJ             NEED TO DROP (LEADING) BLANKS ?
         BZ    ADJUSTED                BIF NOT...JUST COPY
         CLI   0(R5),X'40'             THIS CHAR A BLANK (OR LESS) ?
         BH    ADJUSTED                BIF NOT...GET COPYING
         LA    R5,1(,R5)               => NEXT BYTE IN TGETAREA
         B     NEXTBYTE                GO GET ANOTHER BYTE
ADJUSTED DS    0H
         NI    FLAG2,255-LEFTJ         DONT DROP ANY MORE BLANKS
         MVC   0(1,R4),0(R5)           MOVE BYTE TO CMDBUFF
         LA    R4,1(R4)                => NEXT BYTE IN CMDBUFF
         LA    R5,1(R5)                => NEXT BYTE IN TGETAREA
         B     NEXTBYTE                GO GET ANOTHER BYTE
ENDFIELD DS    0H
         OI    FLAG,LONGWRT            COMPLETE SCREEN NEEDED
*              NOW PROCESS THE COMMAND
         OI    TGETAREA,X'30'          CONVERT PF13-24 TO PF1-12
*              IF PF6 - REISSUE LAST COMMAND
         CLI   TGETAREA,#PF6           WAS COMMAND TO ISSUE LAST CMD?
         BNE   NOTPF6                  BIF NOT
         MVC   CMDBUFF,LASTCMD         RECALL LAST COMMAND
         MVC   CMDLEN,CMD              SET TEMP CMD LEN FROM LAST VALUE
         MVI   TGETAREA,#ENTER         SET INPUT TO ENTER TO ISSUE CMD
NOTPF6   DS    0H
         CLI   TGETAREA,#ENTER         WAS COMMAND ENTER?
         BNE   NOTENTER                BIF NOT
*              PREPARE TO ISSUE COMMAND
         MVC   COMMAND,CMDBUFF         COPY THE COMMAND
         LA    R5,CMDBUFF+123          => LAST CHAR IN CMDBUFF FIELD
         LA    R6,123                  MAX CHARS TO BE PADDED
NULLOOP  DS    0H
         CLI   0(R5),X'40'             THIS CHAR A BLANK (OR LESS) ?
         BH    NULLOOPX                BIF NOT...END OF NULL FILLING
         MVI   0(R5),X'00'             PAD FIELD WITH NULLS
         BCTR  R5,0                    => PREVIOUS INPUT CHAR
         BCT   R6,NULLOOP              PAD UNTIL WE HIT SOMETHING SOLID
NULLOOPX DS    0H
         OC    COMMAND,BLANKS          TRANSLATE TO UPPER CASE
         CLC   COMMAND,BLANKS          WAS COMMAND BLANKS?
         BE    ISSUEX                  BIF SO...IGNORE IT
         CLC   =C'END',COMMAND         WAS COMMAND END ?
         BE    DROPSUP                 BIF SO...CHANGE STATE AND END
*              'CN--' COMMAND ? (DISPLAY DIFFERENT CONSOLE)
         CLC   =C'CN',COMMAND          SET NEW CONSOLE ID?
         BNE   NOTCID                  BIF NOT...USE SAME CID
         LA    R2,COMMAND+2            POINT TO ID REQUESTED
         CLC   =C'FF ',0(R2)           MASTER CONSOLE REQUESTED ?
         BNE   NOTFF                   BIF NOT..GENUINE CID VALUE
         MVI   CONSID,X'FF'            OTHERWISE REQUEST MASTER
         B     GOTCID                  AND SKIP THE COMPLICATED STUFF
NOTFF    DS    0H
*              CONVERT 'DECIMAL' CHARS TO A SINGLE BYTE HEX FIELD
         LA    R15,2                   NO OF 'DECIMAL' CHARS
         SLR   R0,R0                   ZERO REGISTER
         LR    R1,R0                   DITTO
CTOHEX0  DS    0H
         CLI   0(R2),C'0'              CHAR < 0 ? (INVALID)
         BL    DECERR                  BIF SO
         CLI   0(R2),C'9'              CHAR > 9 ? (INVALID)
         BH    DECERR                  BIF SO
         LA    R2,1(R2)                NEXT CHAR PLEASE
         BCT   R15,CTOHEX0             LOOP BACK FOR NEXT CHAR
         CLI   1(R2),C' '              CHECK FOR DELIMITER (BLANK)
         BE    CTOHEXD                 GOOD...HAD RIGHT NO OF CHARS
DECERR   DS    0H                      INVALID HEX CHAR OR INVALID LEN
         MVC   MSGAREA,ERR6            CID MUST BE 2 DEC CHARS
         B     NXTINPUT                GET NEXT CMD
CTOHEXD  DS    0H                      END OF ROUTINE
         LA    R2,COMMAND+2            => CID VALUE REQUESTED
         MVC   CIDREQ,0(R2)            SAVE IN CASE OF ERRORS
         PACK  DWORK,0(2,R2)           PACK IT
         CVB   R1,DWORK                HEX IT
         STC   R1,CONSID               AND SAVE REQUESTED CONS ID
GOTCID   DS    0H
         XC    CMDBUFF,CMDBUFF         CLEAR INPUT FIELD
         B     NXTINPUT                GET NEXT CMD
NOTCID   DS    0H
*              'SCROLL-' COMMAND ? (CHANGE SCROLL TIME)
         CLC   =C'SCROLL',COMMAND      CMD=SCROLL ?
         BNE   SCROLLX                 BIF NOT...
         CLI   COMMAND+7,C' '          MAX SCROLL VALUE = 1 NUMBER
         BNE   BADSCROL                BIF SCROLL AMT INVALID
         CLI   COMMAND+6,C'9'          PARM > 9 ?
         BH    BADSCROL                BIF SO
         CLI   COMMAND+6,C'1'          PARM < 1 ?
         BL    BADSCROL                BIF SO
         PACK  DWORK(8),COMMAND+6(1)   PACK PARM VALUE
         CVB   R15,DWORK               IN BINARY
         MH    R15,=H'100'             HUNDREDTHS OF A SECOND
         ST    R15,DELAY               REPLACE CURRENT SCROLL TIME
         MVC   SCRTIME,COMMAND+6       SHOW NEW SCROLL TIME
         MVC   SAVTIME,SCRTIME         SAVE IT
         NI    FLAG,255-STATIC         START SCROLLING
         XC    CMDBUFF,CMDBUFF         CLEAR INPUT FIELD
         B     NXTINPUT                GET NEXT CMD
BADSCROL DS    0H                      INVALID SCROLL TIME
         MVC   MSGAREA,ERR9            INVALID SCROLL TIME
         B     NXTINPUT                GET NEXT CMD
SCROLLX  DS    0H
*              'K S' OPTIONS REQUIRED ?
         CLC   =C'K S ',COMMAND        WANT CONTROL OPTIONS LOADED ?
         BE    SETKS
*              ISSUE THE COMMAND
         XC    LASTCMD,LASTCMD         ZERO SAVED CMD FIELD
         LH    R15,CMDLEN              THIS CMD LEN + 4
         SH    R15,=H'5'               MINUS 5 = CMDLEN - 1 (FOR EX)
         EX    R15,SAVCMD              SAVE THIS CMD
         MVC   MSGAREA,LASTCMD         CONFIRM PART OF CMD ON DISPLAY
         MVC   CMD(2),CMDLEN           SET CMD LEN FROM SAVED VALUE
         CLC   MAXCLEN,CMD             CMD LEN WITHIN LIMITS ?
         BNL   ISSUE                   BIF SO...CARRY ON
         MVC   CMD(2),MAXCLEN          OTHERWISE SET CMD LEN = MAX
ISSUE    DS    0H
         LA    R1,CMD                  => COMMAND BUFFER
         SLR   R0,R0                   ZERO CMD SOURCE ID
         IC    R0,CONSID               INSERT THIS CONS ID
         SVC   34                      SEND THE COMMAND
         XC    CMDBUFF,CMDBUFF         SET CMDBUFF TO NULLS
         TM    FLAG,INVISIBL           WANT REPLY DISPLAYED ?
         BZ    ISSUEX                  BIF SO..LEAVE ALONE
         XC    MSGAREA,MSGAREA         OTHERWISE CLEAR REPLY FIELD
ISSUEX   DS    0H
         B     NXTINPUT                GET NEXT CMD
SAVCMD   MVC   LASTCMD(*-*),CMDBUFF    << EXECUTED >>
*              IF PF1 - DISPLAY HELP INFO
NOTENTER DS    0H
         CLI   TGETAREA,#PF1           WAS COMMAND FOR HELP?
         BNE   NOTPF1                  NOPE
         TPUT  HELPMSG,LHELPMSG,NOEDIT   DISPLAY THE HELP SCREEN
         TGET  FWORK,1             WAIT UNTIL WE'VE BEEN HELPED ENOUGH
         MVI   LASTUCM,X'FF'           FORCE SCREEN REFRESH
         OI    FLAG,LONGWRT            COMPLETE SCREEN NEEDED NEXT TIME
         B     NXTINPUT                AND SEE WHATS NEXT
NOTPF1   DS    0H
*              IF PF3 - WE'RE THROUGH
         CLI   TGETAREA,#PF3           WAS COMMAND TO END?
         BE    DROPSUP                 BIF SO..CHANGE STATE AND END
*              IF PF2 - DISPLAY 'K S' OPTIONS IN COMMAND BUFFER
         CLI   TGETAREA,#PF2           WANT 'K S' OPTIONS ?
         BNE   NOTPF2                  BIF NOT
SETKS    DS    0H
         XC    CMDBUFF,CMDBUFF         ZERO CMDBUFF
         MVC   CMDBUFF(PF2MSGL),PF2MSG LOAD CONTROL OPTIONS
         CLI   DEL+1,C' '          SINGLE CHAR 'DEL=' OPTION ?
         BNE   KSDONE2             BIF NOT...TEXT IS OK
         MVC   CMDBUFF+DELOFFP+1(DELMVCL),SEGDC  SHIFT TEXT 1 CHAR LEFT
         MVI   CMDBUFF+MFOFFP,X'40'  AND BLANK LAST CHAR
KSDONE2  DS    0H
         B     NXTINPUT                GET NEXT CMD
NOTPF2   DS    0H
*              IF PF5 - DISPLAY LAST COMMAND
         CLI   TGETAREA,#PF5           WAS COMMAND TO INSERT LAST CMD?
         BNE   NOTPF5                  BIF NOT
         MVC   CMDBUFF,LASTCMD         OTHERWISE REDISPLAY IT
         B     NXTINPUT                GET NEXT CMD
NOTPF5   DS    0H
*              IF PF9 - SWITCH BETWEEN SCROLLING AND STATIC DISPLAY
         CLI   TGETAREA,#PF9           PF9 ?
         BNE   NOTPF9                  BIF NOT
         XI    FLAG,STATIC             CHANGE DISPLAY MODE
         MVC   SCRTIME,SAVTIME         SHOW REAL SCROLL TIME
         TM    FLAG,STATIC             SCROLLING ALLOWED ?
         BZ    NXTINPUT                BIF SO..THATS IT
         MVC   SAVTIME,SCRTIME         SAVE REAL SCROLL TIME
         MVI   SCRTIME,C'0'            SHOW SCROLLING IS OFF
         B     NXTINPUT                GET NEXT CMD
NOTPF9   DS    0H
*              IF PF10 - SWITCH BETWEEN EXTENDED AND NORMAL ATTRS
         CLI   TGETAREA,#PF10          PF10 ?
         BNE   NOTPF10                 BIF NOT
         XI    FLAG,EXTON              FLIP EXT ATTR REQUIREMENT
         B     NXTINPUT                GET NEXT CMD
NOTPF10  DS    0H
*              IF PF11 - SWITCH BETWEEN VISIBLE AND NON-VISIBLE INPUT
         CLI   TGETAREA,#PF11          PF11 ?
         BNE   NOTPF11                 BIF NOT
         XI    FLAG,INVISIBL           FLIP INPUT VISIBILITY FLAG
         OI    FLAG,LONGWRT            WRITE COMPLETE SCREEN IMAGE
         MVI   INATTR,X'C8'            ATTR=UNPROT/HI
         TM    FLAG,INVISIBL           WANT INPUT DISPLAYED ?
         BZ    SKIPVIS                 BIF SO...LEAVE ASIS
         MVI   INATTR,X'4C'            ATTR=UNPROT/NON-DISPLAY
SKIPVIS  DS    0H
         B     NXTINPUT                GET NEXT CMD
NOTPF11  DS    0H
*              UNDEFINED PF KEY
         MVC   MSGAREA,ERR7            PF KEY NOT DEFINED
         CLI   TGETAREA,X'70'          FUNNY KEYBOARD INTERRUPT ?
         BNE   NXTINPUT                BIF NOT...THATS ALL
         OI    INATTR,X'01'            OTHERWISE SET MDT BIT ON
         MVC   MSGAREA,ERR4            RE-ENTER SELECTED OPTION
NXTINPUT DS    0H
         B     FINDCON             AND START AGAIN
         TITLE 'CLEAN-UP AND FINISH'
*              RETURN FROM ESTAE ROUTINE
CLEANUP  DS    0H
         TM    FLAG,ESTENT         ALREADY BEEN HERE ?
         BO    DROPAUTH            BIF SO..SKIP THE MESSAGE STUFF
         OI    FLAG,ESTENT         SHOW WE'VE BEEN THROUGH ESTAE..
         TM    FLAG,ATTN           ATTENTION PRESSED ?
         BZ    NOTATTN             BIF NOT
         TPUT  =C'ATTENTION PRESSED',17
         B     PAUSEX              THAT'S ALL
NOTATTN  DS    0H
         L     R4,ABCODE           ABEND CODE (--SSSUUU)
         LA    R15,DWORK           => FIELD TO CONTAIN HEXED VALUE
         BAL   R14,R4HEX           HEX R4
         MVC   E8SYS(3),DWORK+2    COPY SYSTEM ABEND CODE
         MVC   E8USER(3),DWORK+5   COPY USER ABEND CODE
         L     R4,ABADDR           ABEND ADDRESS
         SR    R4,R12              MINUS BASE = OFFSET
         LA    R15,DWORK           => FIELD TO CONTAIN HEXED VALUE
         BAL   R14,R4HEX           HEX R4
         MVC   E8OFF(4),DWORK+4    OFFSET OF ABENDING INSTRUCTION
         TPUT  ERR8,ERR8L          WRITE THE WHOLE MESSAGE
*              T E R M I N A T E
PAUSE    DS    0H                  PAUSE TO REVIEW MSG BEFORE ENDING
         TPUT  =CL30'...PRESS ENTER TO END',30
         TGET  DWORK,1             WAIT FOR ENTER (OR SOMETHING)
PAUSEX   DS    0H
         TM    FLAG,ESTENT         BEEN THROUGH ESTAE ?
         BO    DROPAUTH            BIF SO...MUST BE KEY 8 EITHER WAY
DROPSUP  DS    0H
         MODESET KEY=NZERO,MODE=PROB  DROP THE POWER-IF WE EVER HAD IT
DROPAUTH DS    0H
         ESTAE 0                   CANCEL ESTAE TO PREVENT LOOPING
         TM    FLAG2,AUTHSVC       DID WE NEED THE AUTH SVC ?
         BZ    AUTHSVCX            BIF NOT....SO DON'T USE IT NOW
***      #APF  OFF                 ..REVERSE OF #APF ON
AUTHSVCX DS    0H
         STAX ,                    DROP ATTENTION EXIT
         TCLEARQ OUTPUT            DELETE QUEUED OUTPUT
         TCLEARQ INPUT             DELETE QUEUED INPUT
         STLINENO LINE=1           CLEAR SCREEN
         STFSMODE OFF              FULL SCREEN MODE OFF
RETURN0  DS    0H
         SLR   R15,R15             SET RETURN CODE TO ZERO
         LR    R14,R13             SAVE PTR TO DYNAMIC SAVE AREA
         L     R13,4(R13)          => CALLING PROGS SAVE AREA
         ST    R15,16(R13)         SAVE RETURN CODE (R15)
         BAL   R1,*+8              SKIP CONSTANTS
         DC    AL4(DYNLEN)         DYNAMIC SA LENGTH
         L     R0,0(R1)            LOAD IT
         LR    R1,R14              => DSA
         LA    1,0(0,1)            CLEAR HI-ORDER OF DSA ADDR
         SVC   10                  FREE IT (AT LAST)
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         MVI   12(R13),X'FF'       SET RETURN FLAG
         BR    R14
*              ROUTINE TO CONVERT REG CONTENTS TO PRINTABLE HEX CHARS
*                PARMS: R4 = SOURCE REG, R15 => OUTPUT
R4HEX    DS    0H
         STCM  R4,B'1000',0(R15)       1ST CHAR
         MVO   0(2,R15),0(1,R15)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R4,B'1000',1(R15)       1ST CHAR AGAIN
         NI    1(R15),X'0F'            ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R4,B'0100',2(R15)       2ND CHAR
         MVO   2(2,R15),2(1,R15)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R4,B'0100',3(R15)       2ND CHAR AGAIN
         NI    3(R15),X'0F'            ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R4,B'0010',4(R15)       3RD CHAR
         MVO   4(2,R15),4(1,R15)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R4,B'0010',5(R15)       3RD CHAR AGAIN
         NI    5(R15),X'0F'            ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R4,B'0001',6(R15)       4TH CHAR
         MVO   6(2,R15),6(1,R15)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R4,B'0001',7(R15)       4TH CHAR AGAIN
         NI    7(R15),X'0F'            ZERO HIGH NIBBLE OF 2ND BYTE
         TR    0(8,R15),=CL16'0123456789ABCDEF' CONVERT TO HEX CHARS
         BR    R14                RETURN TO CALLER
         TITLE 'DYNAMIC SBA GENERATION ROUTINE'
*              ROUTINE TO CONVERT A ROW/COLUMN POSITION TO AN SBA.
*              R1=>F(ROW) + F(COL) AND R15=>RETURNED SBA
SBAGEN   DS    0H
         STM   R4,R5,SUBSAVE       SAVE R4/R5 (WORK REGS)
         LM    R4,R5,0(R1)         LOAD ROW/COL VALUES
         BCTR  R4,0                ROW-1 FOR OFFSET
         BCTR  R5,0                COL-1 FOR OFFSET
         MH    R4,=H'80'           ROW OFFSET * 80
         AR    R4,R5               OFFSET FROM START OF SCREEN
         STC   R4,1(,R15)          SAVE THE RH BYTE
         NI    1(R15),X'3F'        ZERO ALL BUT LAST 6 BITS
         SRL   R4,6                SHIFT OUT THE RH 6 BITS
         STC   R4,0(R15)           SAVE THE HIGH 6 BITS
         TR    0(2,R15),SBATRT     CONVERT TO SBA
         LM    R4,R5,SUBSAVE       RESTORE R5/R4
         BR    R14                 AND RETURN
SUBSAVE  DS    2F
SBATRT   DC    X'40'
         DC    X'C1C2C3C4C5C6C7C8C9'
         DC    X'4A4B4C4D4E4F'
         DC    X'50'
         DC    X'D1D2D3D4D5D6D7D8D9'
         DC    X'5A5B5C5D5E5F'
         DC    X'60'
         DC    X'E1E2E3E4E5E6E7E8E9'
         DC    X'6A6B6C6D6E6F'
         DC    X'70'
         DC    X'F1F2F3F4F5F6F7F8F9'
         DC    X'7A7B7C7D7E7F'
         DS    0H
         TITLE 'ATTENTION EXIT'
*              S T A X   E X I T
STAXEXIT DS    0H
         USING *,R15
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R2,R1               => ATTX EXIT PARM LIST
         L     R3,8(,R1)           => USER PARMS
         OI    0(R3),ATTN          INDICATE ATTN PRESSED
         LM    R0,R12,20(R13)      RESTORE REGS
         BR    R14                 AND RETURN
         TITLE 'CONSTANTS AND STORAGE RESERVATIONS'
         LTORG
*              CONSTANTS AND STORAGE RESERVATIONS
DYNLEN   EQU   DYNEND-DYNAREA      < TOTAL SIZE OF GETMAINED AREA >
INSBA    DS    H                   SBA OF UNPROT (INPUT) FIELD
PATTR    DS    H                   OUTPUT FROM GTTERM
AATTR    DS    H                   OUTPUT FROM GTTERM
MINLINES DC    AL2(15)             MIN LINES NEEDED FOR HELP SCREEN
MAXROLL  DS    AL2                 MAX SCROLLING SCRSIZE
COMMCHAR DC    AL1(#ERSWT)         DEFAULT 1ST CMD = ERASE/WRITE
LINES    DC    XL1'00'             MAX LINES ON SCREEN
*              < THE NEXT -4- FIELDS ARE ESTAE PARMS >
ABRET    DC    A(CLEANUP)          RET ADDR IN MAIN CODE FROM ESTAE
ABCODE   DC    F'0'                ABEND CODE
ABADDR   DC    F'0'                => ABENDING INSTR
FLAG     DC    X'80'               GENERAL STATUS FLAG
LONGWRT  EQU   X'80'               WRITE COMPLETE SCREEN IMAGE
EXTEND   EQU   X'40'               SCREEN SUPPORTS EXTENDED ATTR
EXTON    EQU   X'20'               EXTENDED ATTRS WANTED
STATIC   EQU   X'10'               STATIC (NON-SCROLLING) DISPLAY
INVISIBL EQU   X'08'               VISIBLE/INVISIBLE INPUT
SCANALL  EQU   X'04'               DISPLAY ANY CONSOLE THAT'S THERE
ATTN     EQU   X'02'               PA1/ATTENTION PRESSED
ESTENT   EQU   X'01'               PREVENT RECURSION IN ESTAE
*                   END OF ESTAE PARMS
FLAG2    DC    X'00'               GENERAL STATUS FLAG
LEFTJ    EQU   X'80'               LEFT JUSTIFY THE INPUT CMD
AUTHSVC  EQU   X'40'               NEEDED AUTH SVC FOR AUTHORIZATION
SNA      EQU   X'20'               USER IS ON A SNA TERMINAL
XPSIZE   EQU   X'10'               PRIMARY SCREEN SIZE NO GOOD
XASIZE   EQU   X'08'               ALTERNATE SCREEN SIZE NO GOOD
DWORK    DS    D
DWORK2   DS    CL8
FWORK    DS    F
DELAY    DC    F'100'              STIMER DELAY (1/100 SEC UNITS)
SNADELAY DC    AL4(SNADFLT*100)    DEFAULT STIMER DELAY FOR A SNA NODE
MAXCLEN  DC    H'128'                 * MAX CMD BUFFER LEN *
CMDLEN   DC    H'5'                   TEMP CMD LEN VALUE
CMD      DC    AL2(L'COMMAND+4),H'0'  * 1ST H = L'COMMAND + 4 *
COMMAND  DC    CL124' '
CONSID   DC    XL1'FF'             CONSID AS INPUT (FF=MASTER)
MASTUCM  DS    XL1                 UCMID OF MASTER CONSOLE
UCMID    DS    XL1                 CURRENT CONSOLE ID TAKEN FROM UCM
LASTUCM  DC    X'FF'               UCMID OF LAST CONSOLE (FF INVALID)
CIDREQ   DS    CL2                 CID REQUESTED IN CID COMMAND
MYASID   DS    H
CONSASID DS    H
UCMEPTR  DS    F
RDCMPTR  DS    F
*              < THE NEXT FIELD GROUP IS THE TARGET OF A MVCP >
RDCMDATA DS    0F
TDCMPTR  DS    F
         DS    CL16
RDCMLIT  DS    CL4         SHOULD BE 'RDCM'
         DS    CL4
ROLLSIZE DS    H
*              < THE NEXT 3 FIELDS ARE THE TARGET OF A MVCP >
SCREENPT DS    F                   PTR TO SCREEN IMAGE
SCRNLEN  DS    F                   ENDSCRN-SCREENPT (FILLED IN BY ME)
ENDSCRN  DS    F                   => END OF SCROLLING SCREEN (IEE152I)
QINFO    DC    C'UCME: '
UCMEHEX  DC    CL8' ',C', RDCM: '
RDCMHEX  DC    CL8' ',C', TDCM: '
TDCMHEX  DC    CL8' '
QINFOL   EQU   *-QINFO
ERR1     DC    CL35'CNXX NOT CURRENTLY ACTIVE'
ERR2     DC    CL35'CNXX HAS NO SCREEN BUFFER'
ERR3     DC    CL35'CNXX DOES NOT EXIST'
ERR4     DC    CL35'PLEASE RE-ENTER OPTION'
ERR5     DC    CL35'CNXX SCREEN SIZE > MAX'
ERR6     DC    CL35'CID MUST BE FF OR 2 DECIMAL CHARS'
ERR7     DC    CL35'PF KEY NOT DEFINED'
ERR8     DC    C'ABEND S'           ABEND MESSAGE
E8SYS    DC    C'XXX U'
E8USER   DC    C'XXX AT OFFSET '
E8OFF    DC    C'XXXX'
ERR8L    EQU   *-ERR8
ERR9     DC    CL35'SCROLL TIME MUST BE 1-9 (SECS)'
PF2MSG   DC    C'K S,L='
PF2CID   DC    C'XX,'
KMSG     DC    CL53' '             'K S' MESSAGE
         ORG   KMSG
         DC    C'DEL='
DELOFFK  EQU   *-KMSG
DELOFFP  EQU   *-PF2MSG
DEL      DS    CL2
SEGDC    DC    C',SEG='
SEG      DS    CL2
         DC    C',CON='
CON      DS    CL1
         DC    C',RNUM='
RNUM     DS    CL2
         DC    C',RTME='
RTME     DS    CL3
         DC    C',MFORM=('
MFOFFP   EQU   *-PF2MSG
MFORM    DS    CL6
MFOFFK   EQU   (*-1)-KMSG
PF2MSGL  EQU   *-PF2MSG
DELMVCL  EQU   *-SEGDC
         ORG
*              CONTENTS OF CONSOLE BUFFER MINUS SCROLLING PART
CONTROL  DC    X'F1C2'             WRITE/WCC (DON'T RESET MDTS)
INAREA   DS    0CL1
         DC    X'11'
DSBA1    DS    XL2                 SBA: ROW=&MINUS3,COL=01
         DC    X'1DF8'             SF,AB(SKIP,HI)
         DC    C'>> '
CONLIT   DC    C'CONSOLE'
         DC    C' CN='
CONSID2  DC    CL2' '
         DC    C' UCB='
UCBNAME  DS    CL3
         DC    CL2' '
MSGDISP  DS    CL(L'KMSG)              AREA FOR K S PARMS
LAREA1   EQU   *-INAREA                STATIC LEN IF NO PREVIOUS READ
         DC    X'11'                   SBA
DSBA2    DS    XL2 '                   SBA: ROW=&MINUS2,COL=01
         DC    X'1D'                   SF
INATTR   DC    X'C8'                   ATTR=INPUT/HI
         DC    X'13'                   INSERT CURSOR
CMDBUFF  DC    CL124' '
         DC    X'1DF8'                 SF,AB(SKIP,HI)
MSGAREA  DC    CL35'* SNA TERMINAL *'
         DC    X'11'                   SBA
DSBA3    DS    XL2                     SBA: ROW=&LAST,COL=01
         DC    X'1DF4'                 SF,AB(SKIP,LOW)
         DC    CL17'PF1=HELP, PF3=END'
         DC    X'1DF8'                 SF,AB(SKIP,HI)
         DC    CL10' ',C'SYSID='
SYSID    DS    CL4                 SMF SYSTEM ID
         DC    C'   SCROLL='
SCRTIME  DC    C'1'                DEFAULT SCROLL TIME (SEC)
         DC    X'1DF4'                 SF,AB(SKIP,LOW)
LAREA2   EQU   *-INAREA                STATIC LEN IF PREVIOUS READ
INAREAL  EQU   *-INAREA                LEN OF NON-SCROLLING SCREEN AREA
SNADFLT  EQU   2                   DEFAULT SCROLL TIME FOR SNA NODES
SAVTIME  DC    C' '                SAVED SCROLL TIME (SEC)
DYNAREA  DSECT ,                   SAVEAREA AND SCREEN IMAGE AREA
         DS    18F                 SAVEAREA
BLANKS   DC    CL124' '
TGETAREA DS    CL130               * LEN = L'COMMAND + 6 *
LASTCMD  DC    CL124' '
MYBUFF   DS    CL2                 START OF SCREEN IMAGE (CC/WCC)
TARGET   EQU   *                   START OF COPIED SCREEN BUFFER
         DS    CL4000              SPACE FOR SCREEN BUFFER
DYNEND   EQU   *
CONSOLE  CSECT ,                   RESUME CSECT
MAXSIZEE EQU   DYNEND-TARGET-INAREAL  MAX SIZE OF SCROLLING SCREEN AREA
MAXSIZE  DC    A(MAXSIZEE)         DITTO AS A DC
STATPT   DS    F                   => STATIC SCREEN IN GETMAINED AREA
*                                  3270 EQUATES
#ERSWT   EQU   X'F5'               ERASE/WRITE COMMAND
#ERSWTA  EQU   X'7E'               ERASE/WRITE ALTERNATE COMMAND
#WRITE   EQU   X'F1'               WRITE COMMAND
#ENTER   EQU   X'7D'               ENTER KEY
#PF1     EQU   X'F1'               PFKEY
#PF2     EQU   X'F2'               PFKEY
#PF3     EQU   X'F3'               PFKEY
#PF5     EQU   X'F5'               PFKEY
#PF6     EQU   X'F6'               PFKEY
#PF9     EQU   X'F9'               PFKEY
#PF10    EQU   X'7A'               PFKEY
#PF11    EQU   X'7B'               PFKEY
*              HELP SCREEN DISPLAY
HELPMSG  DC    X'F5C3'                 ERASE/WRITE + WCC
         DC    X'1140C1'  SBA ROW=01,COL=02
         DC    X'1DF8'                 SF,AB(SKIP,HI)
         DC    C'-------- CONSOLE PF KEY DEFINITIONS --------'
         DC    X'1DF4'                 SF,AB(SKIP,LOW)
         DC    X'11C261'  SBA ROW=03,COL=02
         DC    C'PF1/13  - DISPLAY PF KEY INFORMATION'
         DC    X'11C3F1'  SBA ROW=04,COL=02
         DC    C'PF2/14  - RECALL CONTROL (K S) OPTIONS (NOT ISSUED UNL+
               ESS MODIFIED)'
         DC    X'11C5C1'  SBA ROW=05,COL=02
         DC    C'PF3/15  - EXIT'
         DC    X'11C6D1'  SBA ROW=06,COL=02
         DC    C'PF5/17  - RECALL LAST COMMAND (NOT ISSUED UNLESS MODIF+
               IED)'
         DC    X'11C761'  SBA ROW=07,COL=02
         DC    C'PF6/18  - REISSUE LAST COMMAND'
         DC    X'11C8F1'  SBA ROW=08,COL=02
         DC    C'PF9/21  - SWITCH BETWEEN SCROLLING AND STATIC MODE'
         DC    X'114AC1'  SBA ROW=09,COL=02
         DC    C'PF10/22 - SWITCH BETWEEN EXTENDED AND NORMAL ATTRIBUTE+
               S (IF APPLICABLE)'
         DC    X'114BD1'  SBA ROW=10,COL=02
         DC    C'PF11/23 - SWITCH BETWEEN VISIBLE && NON-VISIBLE INPUT'
         DC    X'114DF1'  SBA ROW=12,COL=02
         DC    C'ENTER "CN--"    TO CHANGE CONSOLE ID (FF=MASTER)'
         DC    X'114FC1'  SBA ROW=13,COL=02
         DC    C'ENTER "SCROLL-" TO CHANGE SCROLL TIME (1-9 SECS)'
         DC    X'11D160'  SBA ROW=15,COL=01
         DC    X'1DF8'                 SF,AB(SKIP,HI)
         DC    C'PRESS ENTER TO RETURN TO CONSOLE SCREEN'
LHELPMSG EQU   *-HELPMSG
         TITLE 'ESTAE EXIT: ''EXPECTED'' STORAGE VIOLATION OR ABEND ?'
ESTAEX   CSECT
         DROP
         USING ESTAEX,R9
         LR    R9,R15                  SET BASE REG
         C     R0,=F'12'               NO SDWA IF RC=12
         BE    NOSDWA                  BRANCH IF NO SDWA
         LR    R10,R1                  COPY SDWA ADDR
         USING SDWA,R10
         L     R8,SDWAPARM         GET ADDR OF ESTAE PARAM
         L     R2,0(,R8)           LOAD ADDR OF RETRY ROUTINE
         TM    12(R8),ATTN         ATTN PRESSED ?
         BO    SNAPEX              BIF SO...FORGET ABENDS
         L     R3,540              => CURRENT TCB
         MVC   5(3,R8),17(R3)      SAVE ABEND CODE
         SLR   R3,R3               ZERO REG
         ICM   R3,B'0111',SDWANXT1+1 => NEXT INSTR (FROM PSW)
         CLI   SDWAICD1,X'10'      INTC=10 ? (SEGMENT EXCEPTION)
         BE    OFFOK               BIF SO..OFFSET IS OK
         CLI   SDWAICD1,X'11'      INTC=11 ? (PAGE EXCEPTION)
         BE    OFFOK               BIF SO..OFFSET IS OK
         SLR   R4,R4               ZERO REG
         IC    R4,SDWAILC1         LOAD ILC
         SR    R3,R4               => ACTUAL ABENDING INSTR
OFFOK    DS    0H
         STCM  R3,B'0111',9(R8)    => ABENDING INSTR
*              TAKE A SNAP DUMP TO SYSUDUMP IF PRESENT
         LA    R5,DUMPDD               ADDRESS PRINT DCB
         USING IHADCB,R5
         OPEN  (DUMPDD,OUTPUT)         OPEN PRINT FILE
         TM    DCBOFLGS,X'10'          OPEN OK ?
         BZ    SNAPEX                  BIF NOT..THATS ALL
         SNAP  SDATA=(CB,ERR,TRT,DM,IO),                               X
               PDATA=(PSW,REGS,SA,JPA,SPLS),                           X
               DCB=DUMPDD
         CLOSE DUMPDD                  CLOSE PRINT DCB
SNAPEX   DS    0H
         SETRP WKAREA=(10),RC=4,FRESDWA=YES,     RETURN                X
               RETADDR=(2),DUMP=NO,RETREGS=YES
         BR    R14                 RETURN TO RTM (+ RETRY)
NOSDWA   DS    0H
         LR    R8,R2                   LOAD ADDR OF ESTAE PARM
         TPUT  =CL30'IN ESTAE EXIT: NO SDWA',30
         L     R0,0(,R8)               LOAD RETRY ADDRESS
         LA    R15,4                   INDICATE RETRY
         BR    R14                     RETURN TO RTM (+ RETRY)
DUMPDD   DCB   DDNAME=SYSUDUMP,DSORG=PS,RECFM=VBA,MACRF=(W)  FOR SNAP
         LTORG
         DCBD  DSORG=PO,DEVD=DA        DCB DSECT
         IHASDWA ,                     SDWA DSECT
         END   CONSOLE


                                                                        c Xephon 1992

