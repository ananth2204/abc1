Record-oriented REXX - getting records

Problem addressed

Previous articles described the RXRECORD subcommand used
to create a COBOL-like record definition (MVS Update, April
1994) and the PUTREC function used to create records using the
specified record definition (MVS Update, May 1994). GETREC is
the third and final program in the group, and uses this record
definition to decompose records into their constituent fields (stem
variables). These records can be created with the PUTREC
function or by some other means (eg direct output from a
program).

Solution

GETREC reads the record definition created by RXRECORD.
The recname parameter in the GETREC function call specifies
the name of the stem variable that contains the record definition
(ie recname.0.i, where i denotes the field number) and the records
to be processed (recname.j, where j denotes the record number).
The varname entries in the record definition specify the names of
the corresponding stem variables that are to receive the data from
the record. GETREC sets an ESPIE exit to trap potential program
exceptions caused by incorrect data. The GETREC function
returns -4 as the function value if a program exception is signalled.
Figure 1 illustrates the processing performed. The matrix (record
1, record 2, etc) represents the data values used to create the
record.

Invocation

The function is invoked like this:

      functionvalue = GETREC(recname)

where functionvalue is a numeric value indicating the processing
status. These values are:

 0      OK (normal return).

-1      Record name missing.

-2      recname.0 missing.

-3      recname.0 zero.

-4      Data error (caused 0C4, 0C7).

-5      RFD table overflow (too many record field descriptors). The
NRFD program constant (currently 100) contains the maximum
number of Record Field Descriptors (RFDs). This constant
(EQU) can be increased if necessary.

recname is the name of the stem variable that contains the record
descriptor (created by RXRECORD) and the records to be
processed. The records are named recname.1,... . The individual
record field descriptors are stored as stem variables (ie
recname.0.i, where i is a value between 1 and the number of fields
in the record.

data values

The record field descriptors have the following (Assembler)
format:

LINE     DSECT
LVL      DS    CL2,C    level
VARNAME  DS    CL32,C   field name
PICT     DS    CL1,C    field type (numeric or alphanumeric)
#PICT9   EQU   1
#PICTS   EQU   2
#PICTX   EQU   4
LEN      DS    CL5,C    field length in record (no. of digits/bytes)
TYPE     DS    CL1,C    stored field type
#BINARY  EQU   C'1'     BINARY, COMP, COMPUTATIONAL
#PACKED  EQU   C'2'     PACKED-DECIMAL, COMP-3, COMPUTATIONAL-3
#DISPLAY EQU   C'3'     DISPLAY
VALLEN   DS    CL3,C    length of default value
VAL      DS    CL160    default value

The VARNAME entry in the record descriptor specifies the stem
name of the corresponding variable (eg the alpha VARNAME
entry specifies that the stem variables alpha.1, alpha.2, etc are to
be set to contain the column data values from record 1, record 2,
etc). Negative numeric values (type S9) are set with a leading
negative sign (eg -123).

Sample invocation

The following code creates the record definition R1 that contains
ten fields.

ADDRESS RXRECORD "01 R1.",
 "02 ALPHA PIC S9(4) BINARY.",
 "02 BETA  PIC X(8) DISPLAY.",
 "02 GAMMA PIC S9(5) PACKED-DECIMAL.",
 "02 DELTA PIC 9(5).",
 "02       PIC X(1).",
 "02 OMEGA PIC S9(9) PACKED-DECIMAL.",
 "02       PIC X(1).",
 "02 PHI   PIC S9(5) BINARY.",
 "02       PIC S9(3) COMP-3.",
 "02 PSI   PIC S9(5) COMPUTATIONAL-3."
IF RC <> 0 THEN DO
  SAY "RECORD error:" rc
  EXIT
END
ADDRESS TSO "ALLOC F(DD) DA(TEST.DATA) SHR REUS"
"EXECIO * DISKR DD (STEM R1."
fc = GETREC(R1)
IF fc <> 0 THEN DO
  SAY "GETREC error:" fc
  EXIT
END
/* display selected fields */
SAY alpha.1
SAY alpha.2
SAY gamma.1
SAY gamma.2

Program code FOR GETREC

Programs that use REXX services must be written in 31-bit
addressing mode.

GETREC   TITLE 'REXX GETREC Function'
* Register usage:
*   R5   LC(record name)
*   R6   A(SHVBLK)
*   R7   A(common area)
*   R8   A(External Entry Points Vector)
*   R9   A(ENVBLOCK)
*   R10  A(input record)
*   R11  A(record descriptor)
*   R12  base register
GETREC   CSECT
GETREC   AMODE 31
GETREC   RMODE ANY
         BAKR  R14,0              save return address
         BALR  R12,0
         USING *,R12
         LR    R3,R1
         USING EFPL,R3
         L     R2,EFPLEVAL        PTR(Evaluation Block)
* allocate dynamic area
         STORAGE OBTAIN,LENGTH=$GETREC_L,ADDR=(R7),SP=1
         USING $GETREC,R7
* allocate record field descriptor area
         STORAGE OBTAIN,LENGTH=NRFD*LINEL,ADDR=ARFD,SP=1
         LA    R13,SA
* initialize variables
         L     R0,0(R2)           A(Evaluation Block)
         ST    R0,AEVALBLK
         ZAP   RECNO,=P'0'
* set ESPIE (Addressing+Data)
         ESPIE SET,EXCP0CX,(5,7)
         B     CONTINUE
EXCP0CX  DS    0H                 ESPIE exit
         BALR  R15,0
         USING *,R15
         MVC   ERRCODE,=CL2'-4'   data error
         B     ERROR
         DROP  R15
CONTINUE LOAD  EP=IRXEXCOM
         ST    R0,AIRXEXCOM
         L     R10,EFPLARG        A(parsed Argument List)
         USING ARGTABLE_ENTRY,R10
         MVC   ERRCODE,=CL2'-1'   preset ReturnCode (=error)
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get record name
         LM    R4,R5,0(R10)
* R4: A(record name), R5: L(record name)
         LTR   R5,R5
         BM    ERROR              record name missing
         BZ    ERROR              null record name
         CH    R5,=AL2(L'RECNAME)
         BH    ERROR              record name too long
         BCTR  R5,0               LC(recname)
         MVC   RECNAME(0),0(R4)
         EX    R5,*-6
         LA    R1,RECNAME+1(R5)
         MVI   0(R1),C'.'
         LA    R5,1(R5)
         MVC   FLDNAME,RECNAME
         LA    R1,FLDNAME+1(R5)
         MVC   0(2,R1),=C'0.'
         L     R11,ARFD           record field descriptors
         USING LINE,R11
         L     R0,=A(NRFD)        maximum no of entries
         CVD   R0,MAXRFD
         ZAP   FLDNO,=P'0'        field number
* store record field descriptors
NEXTRFLD DS    0H                 rec.0.j
* rec.0.j
* |     |
* |     +--- <FLDNO>
* +--------- <VARNAME>
         AP    FLDNO,=P'1'        j=j+1
         MVC   EDWK,=X'40202020202040'
         EDMK  EDWK,FLDNO         R1: A(first digit)
         LA    R15,FLDNAME+3(R5)
         MVC   0(7,R15),0(R1)
         MVC   VN,FLDNAME
         LA    R3,VAR
         LA    R4,LVAR
         BAL   R14,GETVAR
         LTR   R4,R4
         BZ    NEWREC
         MVC   ERRCODE,=CL2'-5'   RFD table overflow
         CP    FLDNO,MAXRFD
         BH    ERROR              error
         MVC   0(LINEL,R11),0(R3)
         LA    R11,LINEL(R11)
         B     NEXTRFLD           get next record field descriptor
NEXTFLD  DS    0H
* rec.(i+1).j
* |   |     |
* |   |     +--- <INDEX>
* |   +--------- <RECNO>
* +------------- <VARNAME>
         LA    R11,LINEL(R11)     next field descriptor
         AP    INDEX,=P'1'        i=i+1
         CP    INDEX,FLDNO        test for last field in record
         BL    GETFLD             not last, get field (data)
         B     NEWREC             last field in record
* get next field
GETFLD   DS    0H
* perform conversion
         IC    R15,TYPE
         N     R15,=X'0000000F'
         SLL   R15,2              *4
         L     R15,BRTAB-4(R15)   load address of conversion routine
         BALR  R14,R15            invoke conversion routine
* R3: A(data), R4: L(converted data), R10: A(record entry)
* R15: L(record data)
         LA    R10,0(R15,R10)     update record pointer
         MVC   VN,VARNAME
         CLC   =C'FILLER ',VN
         BE    NEXTFLD            ignore filler
         BAL   R14,GETVNL         R0: L(name)
         LR    R1,R0
         LA    R1,VN(R1)
         MVC   0(7,R1),0(R2)      record no.
         BAL   R14,SETVAR
         B     NEXTFLD
BRTAB    DC    A(CVTBIN)
         DC    A(CVTPACK)
         DC    A(CVTDISPL)
NEWREC   DS    0H                 rec.(j+1)
         ZAP   INDEX,=P'0'        zeroize field no.
         AP    RECNO,=P'1'        j=j+1
         MVC   EDRECNO,=X'40202020202040'
         EDMK  EDRECNO,RECNO      R1: A(first digit)
         BCTR  R1,0
         MVI   0(R1),C'.'
         LR    R2,R1
         LA    R10,REC
         L     R11,ARFD           A(record field descriptors)
         S     R11,=A(LINEL)
* read record
         LR    R3,R10             record address
         L     R4,=A(LREC)        maximum record length
         LA    R1,RECNAME+1(R5)
         MVC   0(7,R1),1(R2)      current record number
         MVC   VN,RECNAME
         BAL   R14,GETVAR
* R4: L(record)
         LTR   R4,R4
         BNZ   NEXTFLD
         LA    R15,L'FC0          L(data)
         LA    R1,FC0             A(data)
EOJ      L     R2,AEVALBLK        A(EVALBLOCK)
         USING EVALBLOCK,R2
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0
         MVC   EVALBLOCK_EVDATA(0),0(R1)
         EX    R15,*-6
         STORAGE RELEASE,LENGTH=$GETREC_L,ADDR=(R7),SP=1
         PR    ,                  terminate program
ERROR    LA    R15,2              L(data)
         LA    R1,ERRCODE         A(data)
         B     EOJ
         LTORG
         TITLE 'Subroutines'
CVTBIN   DS    0H                 convert binary data
* R10: A(data)
* Return: R3: A(data), R4: L(data)
         SR    R0,R0              initialize result register
         LA    R1,EXLH
         TM    PICT,¤PICTS
         BO    *+8
         LA    R1,EXICM
         LA    R15,2              default length
         CLC   LEN,=C'00005'
         BL    *+12
         LA    R1,EXL
         LA    R15,4              length
         EX    R0,0(R1)
* R0: data
         CVD   R0,PL8
         MVC   EDWK16,EDMK16
         LA    R1,EDWK16+L'EDWK16-1
         LA    R4,EDWK16+L'EDWK16
         EDMK  EDWK16,PL8         R1: A(first significant digit)
FMT      BNL   *+10
         BCTR  R1,0
         MVI   0(R1),C'-'         set negative
         LR    R3,R1              address
         SR    R4,R3              length
         BR    R14                continue
CVTDISPL DS    0H                 convert display data
* R10: A(data), LEN: L(data)
* Return: R3: A(data), R4: L(data)
         PACK  D,LEN
         CVB   R4,D               source length
         LR    R3,R10             A(data)
         LR    R15,R4
         BR    R14                continue
CVTPACK  DS    0H                 convert packed decimal data
* R10: A(data), LEN: L(data)
* Return: R3: A(data), R4: L(data)
         PACK  D,LEN
         CVB   R15,D              source length (digits)
         LA    R15,2(R15)
         SRL   R15,1              source length (bytes)
         BCTR  R15,0              LC(source data)
         EX    R15,EXZAP
         TM    PICT,¤PICTS
         BO    *+8                signed
         OI    PL16+L'PL16-1,X'0F'
         MVC   EDWK32,EDMK32
         LA    R1,EDWK32+L'EDWK32-1
         LA    R4,EDWK32+L'EDWK32
         EDMK  EDWK32,PL16        R1: A(first significant digit)
         LA    R15,1(R15)
         B     FMT
* EX-instructions
EXZAP    ZAP   PL16,0(0,R10)
EXL      L     R0,0(R10)
EXLH     LH    R0,0(R10)
EXICM    ICM   R0,B'0011',0(R10)
SETVAR   ST    R14,RSA            set REXX variable
* input:
*  <VN>: variable name
*  R3: A(variable data)
*  R4: L(variable data)
         BAL   R14,GETVNL         get L(VN) -> R0
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVSTORE   set store flag
         ST    R3,SHVVALA         A(data)
         ST    R4,SHVVALL         L(data)
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL,MF=(E,CALL4)
         L     R14,RSA
         BR    R14                return
GETVAR   ST    R14,RSA            get REXX variable
* input:
*  <VN>: variable name
*  R3: A(variable)
*  R4: L(variable), max
* output:
*  R4: L(variable), actual
         BAL   R14,GETVNL         get L(VN)
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVFETCH   Fetch
         ST    R3,SHVVALA         A(buffer)
         ST    R4,SHVBUFL         L(buffer)
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL,MF=(E,CALL4)
         L     R4,SHVVALL         L(data)
         L     R14,RSA            load return address
         TM    SHVRET,SHVNEWV     new variable?
         BZR   R14                :no, return
         SR    R4,R4              else zeroize length
         BR    R14                return
GETVNL   DS    0H                 determine actual length of name
* input: <VN> - name
* output: R0: L(name), normalised
         LA    R1,L'VN
         SR    R0,R0              counter
         LA    R15,VN
GETVNL1  CLI   0(R15),C' '        search for first blank
         BER   R14                end found
         AH    R0,=H'1'           increment counter
         LA    R15,1(R15)         bump address
         BCT   R1,GETVNL1
         BR    R14
         TITLE 'Constants'
IRX_IRXEXCOM DC CL8'IRXEXCOM'
FC0      DC    C'0'
EDMK16   DC    X'40',13X'20',X'2120'
EDMK32   DC    X'40',29X'20',X'2120'
         TITLE 'Data areas (variables)'
$GETREC DSECT
RSA      DS    A
SA       DS    18F
FRC      DS    F                  function return code
CALL4    CALL  ,(0,0,0,0),MF=L
ERRCODE  DS    H
AEVALBLK DS    A                  A(EVALBLOCK)
AIRXEXCOM DS   A
RECNAME  DS    CL32,CL7
FLDNAME  DS    CL32,CL7           recname.0.
VN       DS    CL40
FLDNO    DS    PL3
INDEX    DS    PL3
RECNO    DS    PL3
EDWK     DS    CL7
EDRECNO  DS    CL7
EDWK16   DS    CL16
EDWK32   DS    CL32
PL16     DS    PL16
CL16     DS    CL16
D        DS    0D,PL8
PL8      EQU   D
         ORG   D
WORD     DS    F
         ORG   D
HALF     DS    H
         ORG
NRFD     EQU   100                max no. of record field descriptors
MAXRFD   DS    PL8
ARFD     DS    A                  A(record field descriptor table)
IRX_SHVBLOCK DS (SHVBLEN)X'0'
LVAR     EQU   257
VAR      DS    CL(LVAR)
LREC     EQU   32767
REC      DS    CL(LREC)
$GETREC_L EQU *-$GETREC
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         IRXSHVB
LINE     DSECT
LVL      DS    CL2,C
VARNAME  DS    CL32,C
PICT     DS    CL1,C
#PICT9   EQU   1
#PICTS   EQU   2
#PICTX   EQU   4
LEN      DS    CL5,C
TYPE     DS    CL1,C
#BINARY  EQU   C'1'
#PACKED  EQU   C'2'
#DISPLAY EQU   C'3'
VALLEN   DS    CL3,C
VAL      DS    CL160
LINEL    EQU   *-LINE             length
         END


Anthony Rudd
Technical Consultant (Germany)                                         c A S Rudd 1994

