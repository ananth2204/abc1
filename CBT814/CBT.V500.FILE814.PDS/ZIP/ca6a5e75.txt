A REXX function to write SMF records

      rc = REXXSMF(type,text)

      CALL 'REXXSMF' type,text

/*Rexx*/
smftyp = '189'
smftxt = userid()' accessing application A at 'date(e) time()
rc = REXXSMF(smftyp,smftxt)
.
.
.
exit

/*Rexx*/
.
.
call 'REXXSMF '172','User 'userid()' exiting application A at' ,
     date(e) time()
.
.
exit

REXXSMF source

REXXSMF TITLE 'REXX FUNCTION TO WRITE SMF RECORDS'
***********************************************************************
***      THIS IS A PROGRAM THAT WILL EXECUTE AS A REXX              ***
***      FUNCTION UNDER TSO/E REXX AND WILL CUT SMF RECORDS.        ***
***      THE FUNCTION ACCEPTS 2 ARGUMENTS:-                         ***
***       1. THE SMF RECORD TYPE NUMBER.                            ***
***       2. THE SMF RECORD TEXT.                                   ***
***   EG                                                            ***
***       CALL 'REXXSMF' '185','TEST RECORD DATA'                   ***
***   OR                                                            ***
***       XXX = REXXSMF('185','TEST RECORD DATA')                   ***
***   THE PARAMETERS CAN BE LITERAL STRINGS OR VALID REXX SYMBOLS   ***
***   THAT HAVE BEEN PREVIOUSLY SET.                                ***
***   SMF TYPES OF 128 OR BELOW WILL CAUSE A FUNCTION ERROR.        ***
***   THE FUNCTION DOES NOT RETURN ANY DATA OTHER THAN THE RETURN   ***
***   CODE FROM THE SMF ROUTINE. THIS WILL BE SET INTO 'XXX' IF     ***
***   CALLED AS A FUNCTION, OR THE REXX SPECIAL VARIABLE 'RESULT'   ***
***   IF 'CALL'ED AS A SUBROUTINE.                                  ***
***   IF ONE OR BOTH PARAMETERS ARE OMITTED THE FUNCTION WILL       ***
***   RETURN REXX ERROR 40 - INVALID CALL TO ROUTINE, AND WILL      ***
***   SET A RESULT OF 'ERROR'.                                      ***
***   POSSIBLE RC VALUES (SMFEWTM RETURN CODES) :-                  ***
***   0   ....... RECORD WRITTEN WITHOUT ERROR                      ***
***   8   ....... LENGTH < 18 BYTES.                                ***
***   16  ....... SMF NOT ACTIVE                                    ***
***   20  ....... RECORD SUPPRESSED BY INSTALLATION EXIT IEFU83/    ***
***               IEFU84/IEFU85                                     ***
***   24  ....... DATA LOST                                         ***
***   36  ....... SMF RECORD TYPE NOT CURRENTLY BEING RECORDED      ***
***   40  ....... DATA LOST DUE TO BUFFER SHORTAGE                  ***
***   44  ....... SMF COULD NOT ESTABLISH RECOVERY                  ***
***   48  ....... CALLER NOT IN PRIMARY ASC MODE OR INCORRECT       ***
***                ASID ENCOUNTERED.                                ***
***********************************************************************
REXXSMF CSECT
REXXSMF AMODE 31
REXXSMF RMODE ANY
         STM   R14,R12,12(R13)         * SAVE REGS
         LR    R12,R15                 *R12 --> BASE REGISTER
         USING REXXSMF,R12
         LR    R10,R0                  *R10 --> A(ENVIRONMENT BLOCK)
         USING ENVBLOCK,R10
         LR    R11,R1                  *R11 --> A(PARAM LIST (EFPL))
         USING EFPL,R11
         GETMAIN RU,LV=DYNLEN,LOC=ANY  *** OBTAIN DYNAMIC STORAGE
         LR    R2,R1                   * POINT AT WORKAREA
         L     R3,=A(DYNLEN)           * SET ITS LENGTH
         LA    R4,0                    * SET DUMMY FROM ADDRESS
         LA    R5,0                    * SET DUMMY LENGTH
         MVCL  R2,R4                   * BLANK OUT THE AREA
         ST    R13,4(R1)               * SAVE R13
         ST    R1,8(R13)               * BACK-CHAIN SAVE AREAS
         LR    R13,R1                  *R13 --> A(REG SAVE/DYNAMIC AREA)
         USING DYNAM,R13
         L     R9,ENVBLOCK_IRXEXTE     *R9 --> A(EXTERNAL EP TABLE)
         USING IRXEXTE,R9
         LA    R8,SMFAREA              *R8 --> AREA TO BUILD SMF REC
         USING SMFSMF,R8
***      CHECK THE PARAMETER LIST FOR VALID ARGUMENTS               ***
***      AND STORE VALUES IN WORKING STORAGE                        ***
***      FIRST CHECK FOR SMF TYPE VALUE AND STORE                   ***
         L     R6,EFPLARG              *R6 --> A(ARGUMENT TABLE)
         USING ARGTABLE_ENTRY,R6
         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?
         BE    ERROR                   * --> YES - EXIT RC 40
*                                      (INVALID CALL TO ROUTINE)
         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)
         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)
         LA    R4,SMFTYP                    *R4 --> A(ARGUMENT)
         BCTR  R1,0                    * DECREASE FOR MOVE
         EX    R1,MOVEARG              * SAVE ARGUMENT
***      NOW CHECK FOR SMF DATA, ENSURE NOT > 256 CHARS AND STORE   ***
         LA    R6,ARGTABLE_NEXT        *R6 --> A(NEXT ARGUMENT)
         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OR ARGS?
         BE    ERROR                   * --> YES - EXIT RC 40
*                                      (INVALID CALL TO ROUTINE)
         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)
         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)
         CH    R1,=H'256'              * LENGTH <= 256 ?
         BH    ERROR                   * --> NO - EXIT
         STH   R1,SMFSLEN              * SAVE DATA LENGTH IN SMF AREA
         LA    R4,SMFDATA              *R4 --> A(ARGUMENT)
         BCTR  R1,0                    * DECREASE LENGTH FOR MOVE
         EX    R1,MOVEARG              * --> SAVE ARGUMENT
         LA    R6,8(R6)                *R6 --> A(NEXT ARGUMENT)
         B     ARGOK                   * SKIP EXECUTE STATEMENT
MOVEARG  MVC   0(0,R4),0(R2)           * EXECUTABLE MOVE
***      ARGUMENTS STORED - BUILD SMF RECORD                        ***
ARGOK     DS    0H
          PACK  PTEMP(8),SMFTYP         * PACK PASSED SMF RECORD TYPE
          CVB   R5,PTEMP                *R5 - RECORD TYPE (HEX)
          STCM  R5,B'0001',SMFSTYPE     * SAVE SINGLE BYTE TYPE
          CLI   SMFSTYPE,X'80'          * TYPE 128 OR BELOW?
          BH    SMFBLD                  * --> NO ? - OK
          B     ERROR                   * --> YES? - EXIT
* BUILD SMF RECORD FIXED ENTRIES (EXCEPT RECORD LENGTH)
SMFBLD   EQU   *
         MVI   SMFSFLAG,X'00'           * SET SMF FLAG
         MVC   SMFSFIL,=H'0'            * SECOND HALF WORD TO 0
         MVC   SMFSYSID(4),=C'IPO1'     * SET SYSTEM ID
* EXTRACT CURRENT DATE FROM CVT
         USING CVT,0                    * ADDRESS CVT BASE
         L     R3,CVTPTR                * GET THE CVT
         USING CVT,R3                   * AND MAP
         L     R3,CVTDATE               *R3 --> DATE(PACKED)
         DROP R3
         ST    R3,SMFSDATE              * SAVE IN SMF AREA
* EXTRACT CURRENT TIME IN BINARY
         LA    R3,TIMEADDR              *R3 --> A(TIME SAVE AREA)
         TIME MIC,(3)                   * GET TIME
         LM    R2,R3,TIMEADDR           *R2 - TIME, R3 - DATE
         SRDL  R2,12                    *SHIFT FOR DIVIDE
         L     R1,=AL4(10000)           *SET DIVISOR
         DR    R2,R1                    *CONVERT TO HUNDREDTHS
         ST    R3,SMFSTIME              * SAVE IN SMF
         LH    R14,SMFSLEN              *R14 - DATA LENGTH
         AH    R14,=AL2(SMFLEN)         *ADD IN LENGTH OF HEADER
         STH   R14,SMFSLEN              *STORE TOTAL LENGTH
* WRITE RECORD TO SMF
* R8 --> RECORD BUILT WITHIN PROGRAM WORK AREA (--> R13)
*        FIRST TEST AUTHORIZATION, AND APF AUTHORIZE IF NEEDED
         MVI   STORSTAT,C'5'        * AUTHORIZATION FLAG (OFF)
         TESTAUTH FCTN=1            * CHECK CURRENT STATE
         LTR   R15,R15              * R15 = 0 ? - AUTHORISED
         BZ    CALLSMF              * GO DO IT
         SVC   235                  * ELSE SET AUTHORIZED
         MVI   STORSTAT,C'6'        * AND SET FLAG ON
*        NOW CALL SMFEWTM MACRO TO WRITE RECORD
CALLSMF  DS     0H
         MODESET MODE=SUP,KEY=ZERO   * MUST BE SUPERVISOR
         SMFEWTM (8),BRANCH=YES      * WRITE SMF  (NEEDS IEESMCA DSECT)
         ST      R15,SMFRC           * PRESERVE SMF RETURN CODE
         MODESET MODE=PROB,KEY=NZERO * BACK TO PROBLEM STATE
*        IF DYNAMICALLY APF AUTHORISED, REMOVE
         CLI   STORSTAT,C'6'      * ENSURE EXIT IN SAME STATE AS CALLER
         BNE   ALLOK              * IF NOT APF - CARRY ON
         SVC   236                * ELSE REMOVE APF
*        ALL OK - SO SET SMF RETURN CODE AS 'RC' VARIABLE &
*        FUNCTION RESULT.
ALLOK    DS    0H
         L     R15,SMFRC            * RETRIEVE SMF RETURN CODE
         CVD   R15,PTEMP            * CONVERT TO PACKED
         MVC   RETCODE,=X'40212020' * SET EDIT MASK
         ED    RETCODE,PTEMP+6      * CONVERT TO CHARACTER
*        INITIALISE IRXEXCOM PARAMETER AREA
         LA    R0,COMID             *R0 --> A(IRXEXCOM ID)
         ST    R0,COMAREA           * SAVE ADDRESS
         LA    R0,COMDUMMY          *R0 --> NOT USED PARM
         ST    R0,COMAREA+4         * SAVE ADDRESS
         ST    R0,COMAREA+8         * AND AGAIN (PARM2&3 MUST BE SAME)
         LA    R0,COMSHVB           *R0 --> A(SHVBLOCK AREA)
         ST    R0,COMAREA+12        * SAVE ADDRESS
         LA    R0,COMRET            *R0 --> A(RETURN CODE AREA)
         ST    R0,COMAREA+16        * SAVE ADDRESS
         OI    COMAREA+16,X'80'     * SET HIGH BIT ON FOR LIST END
         MVC   COMID,=CL8'IRXEXCOM'
*        BUILD IRXEXCOM PARAMETERS
         ST    R10,COMRET           *STORE ENVBLOCK ADDRESS (R10)
         LA    R6,COMSHVB           *R6 --> A(SHVBLOCK AREA)
         USING SHVBLOCK,R6
         XC    COMSHVB(SHVBLEN),COMSHVB * INITIALIZE SHVBLOCK
         XC    SHVNEXT,SHVNEXT          * RESET POINTER
         MVI   SHVCODE,C'S'          * SET FUNCTION CODE - 'SET'
         LA    R0,=C'RC'             *R0 --> A(VARIABLE NAME
         ST    R0,SHVNAMA            * STORE IN SHVBLOCK
         MVC   SHVNAML,=A(2)         * STORE NAME LENGTH
         LA    R0,RETCODE            *R0 --> A(VARIABLE VALUE)
         ST    R0,SHVVALA            * STORE IN SHVBLOCK
         MVC   SHVVALL,=A(L'RETCODE) * STORE VALUE LENGTH
*        INVOKE IRXEXCOM TO SET VARIABLE
         LR    R0,R10                *R0 --> A(ENVBLOCK)
         LA    R1,COMAREA            *R1 --> A(PARM ADDR LIST)
         L     R15,IRXEXCOM          *R15 --> AIRXEXCOM) FROM IRXEXTE
         BALR  R14,R15               * CALL ROUTINE
         LTR   R15,R15               * SET OK ?
         BZ    SETOK                 * --> YES? - SKIP ABEND
         LA    R1,=CL4'IRXC'         * SET ERROR INDICATOR
         SLR   R0,R0                 * CLEAR R0
         EX    R0,*                  * FORCE DIAGNOSTIC ABEND
*        SET RETURN CODE VALUE AS FUNCTION RESULT
SETOK    EQU   *
         DROP  R6
         L     R6,EFPLEVAL
         L     R6,0(R6)              *R6 --> A(EVALUATION BLOCK)
         USING EVALBLOCK,R6
         MVC   EVALBLOCK_EVLEN,=A(L'RETCODE) * SET LENGTH
         MVC   EVALBLOCK_EVDATA(L'RETCODE),RETCODE * SET VALUE
         XR    R15,R15               * ZERO REXX RETURN CODE
         B     RETURN                * AND RETURN TO CALLER
*        IF FUNCTION ERROR - SET 'ERROR' AS FUNCTION RESULT,
*        AND REXX ERROR CODE 40 AS RETURN CODE
ERROR    DS    0H
         L     R6,EFPLEVAL
         L     R6,0(R6)              *R6 --> A(EVALUATION BLOCK)
         MVC   EVALBLOCK_EVLEN,=A(5) * SET LENGTH
         MVC   EVALBLOCK_EVDATA(5),=CL5'ERROR' * SET VALUE
         LA    R15,40  * SET RC=40 TO INDICATE INVALID FUNCTION CALL
         B     RETURN  * AND RETURN TO CALLER
***      RETURN TO CALLER                                           ***
RETURN   LR    R1,R13                  *R1 --> A(DYNAMIC AREA)
         L     R13,4(R13)              * RESTORED BACK POINTER
         LR    R2,R15                  * SAVE R15 AROUND FREEMAIN
         FREEMAIN RU,A=(R1),LV=DYNLEN  * RELEASE DYNAMIC STORAGE
         LR    R15,R2                  * RESTORE R15 FOR RETURN
         RETURN (14,12),RC=(15)        * RETURN TO CALLER
***      WORKING STORAGE ETC.                                       ***
         TITLE  'WORKING STORAGE / DSECTS'
         LTORG
DYNAM    DSECT                  * DYNAMIC WORK AREA STORAGE
SAVEAREA DS    9D               * REG SAVE AREA
SMFAREA  DS    CL330            * AREA FOR BUILD OF SMF REC
PTEMP    DS    PL8              * PACKED DECIMAL WORK AREA
SMFTYP   DS    CL3              * SMF TYPE (CHARACTER FROM ARG)
SMFRC    DS    F                * SAVE AREA FOR SMFEWTM RETURN CODE
RETCODE  DS    CL4              * OUTPUT RETURN CODE (CHARACTER)
STORSTAT DS    C                * APF STATUS INDICATOR
TIMEADDR DS    2F               * RETURN AREA FOR TIME MACRO
***      IRXEXCOM PARAMETER AREA                                    ***
COMAREA  DS    5A               * PARAMETER ADDRESS LIST
COMID    DS    CL8              * IRXEXCOM ID - C'IRXEXCOM'
COMDUMMY DS    A                * NOT USED
COMSHVB  DS    (SHVBLEN)X       * IRXEXCOM SHVBLOCK (LENGTH FROM DSECT)
COMRET   DS    A                * IRXECOM RC
         DS    0D
DYNLEN   EQU   *-DYNAM
***      SMF RECORD MAPPING                                         ***
SMFSMF   DSECT
SMFSLEN  DS    XL2              * LEN OF SMF RECORD
SMFSFIL  DS    XL2              * NOT USED
SMFSFLAG DS    XL1              * SMF RECORD FLAG
SMFSTYPE DS    XL1              * SMF RECORD TYPE
SMFSTIME DS    XL4              * CURRENT TIME (BINARY)
SMFSDATE DS    PL4              * CURRENT DATE (PACKED)
SMFSYSID DS    CL4              * SYSTEM NAME (IP01)
SMFLEN   EQU   *-SMFSMF    LENGTH OF RECORD HEADER
SMFDATA  DS    0C          RECORD
***      REQUIRED DSECTS FOR REXX AND SMF                           ***
         CVT   DSECT=YES,LIST=YES
         IRXEFPL
         IRXARGTB
         IRXEVALB
         IRXENVB
         IRXEXTE
         IRXSHVB
         IEESMCA
         END


Systems Programmer (UK)                                          c Xephon 1995

