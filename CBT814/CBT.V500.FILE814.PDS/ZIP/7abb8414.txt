The SVC update recording table


SVCR REXX EXEC

/**rexx**/
/*  Program-id           SVCR                                      */
/*  Remarks              This REXX EXEC will display the entries   */
/*                       in the SVC update recording table.        */
/*                       The following information is displayed    */
/*                       for each updated SVC:                     */
/*                       1. SVC Number.                            */
/*                       2. The old SVC Table Entry.               */
/*                       3. The new SVC EP address.                */
/*                       4. Date the SVC table was updated.        */
/*                       5. The number of updates for the SVC.     */
/*                       6. Suffix of the IEASVCxx parmlib member, */
/*                          if the SVC table entry was replaced    */
/*                          using this method.                     */
/*                       When the table is displayed, the entries  */
/*                       can be selected to display the first 128  */
/*                       bytes of the SVC module storage.          */
/*trace i*/                             /* trace option            */
call house_keeping                      /* let's initialize        */
do forever
   call get_the_svcr_address            /* svc upd recording table */
   call display_info_panel              /* display info panel      */
   call build_the_svcr_entries          /* build the svcr entries  */
   call display_the_svcr_entries        /* display the svcr entries*/
   exit(¯)                              /* let's get out           */
end
get_the_svcr_address:
cvt=         c2x(storage(1¯,4))         /* cvt address             */
cvtabend=    d2x((x2d(cvt))+2¯¯)        /* cvt + 2¯¯ = cvtabend    */
scvt=        c2x(storage(cvtabend,4))   /* scvt @                  */
scvtsvcr=    d2x(x2d(scvt)+136)         /* scvt + 136 = scvtsvcr   */
svcrtaddr=   c2x(storage(scvtsvcr,4))   /* svct table @            */
svcr@=       svcrtaddr                  /* store for panel output  */
return                                  /* return to the caller    */
build_the_svcr_entries:
do i = ¯ to 255                         /* process all svcr entries*/
   svcr.i= storage(svcrtaddr,24)        /* pick up the svcr entry  */
   svcrtaddr= d2x(x2d(svcrtaddr)+24)    /* next svcr table entry   */
end
ADDRESS "ISPEXEC" "TBCREATE SVCRTAB NOWRITE REPLACE"
if (rc >  4) then do                    /* call okay?              */
   say 'TBCREATE error    rc = 'rc''    /* no- inform the user     */
   call dealloc                         /* remove allocation       */
   exit(¯)                              /* let's quit              */
end
ssel=       '_'                         /* init                    */
svcrtadr=  svcr@                        /* svcr table address      */
ztdmark= '**************** End Of SVC Update Recording Table *****************'
ADDRESS "ISPEXEC" "VPUT (ztdmark) SHARED"
tabrows=  256                           /* max table rows          */
svcnos=   ¯                             /* count the no of svcs    */
do i= ¯ to 255                          /* add the esr svcs to an  */
   if substr(svcr.i,1,16)= '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'x then
      iterate
   svcnos= (svcnos + 1)                 /* no of updated svcs      */
   svcnum= i                            /* svc number              */
   svcurold= c2x(substr(svcr.i,1,8))    /* old svc table entry     */
   svcurret= c2x(substr(svcr.i,9,4))    /* ret @ in caller        */
   svcurnew= c2x(substr(svcr.i,13,4))   /* new svc ep @           */
   svcurdat= c2x(substr(svcr.i,17,4))   /* cvtdate for update     */
   svcurcnt= c2x(substr(svcr.i,21,2))   /* count of updates for svc*/
   svcursx=  substr(svcr.i,23,2)        /* suffix of ieasvcxx     */
   ADDRESS "ISPEXEC" "TBADD SVCRTAB     /* add the entries        */
            SAVE(svcnum,svcurold,svcurret,svcurnew,svcurdat,svcurcnt,
            svcursx)
            MULT("TABROWS")"
   if (rc \= ¯) then do                 /* call okay?             */
      say 'TBADD error    rc = 'rc''    /* no- inform the user    */
      call dealloc                      /* remove allocation      */
      exit(¯)                           /* let's quit             */
   end
end
ADDRESS "ISPEXEC" "TBTOP SVCRTAB"       /* position to top of tab */
if (rc \= ¯) then do                    /* call okay?             */
   say 'TBTOP error    rc = 'rc''       /* no- inform the user    */
   call dealloc                         /* remove allocation      */
   exit(¯)                              /* let's quit             */
end
return
display_the_svcr_entries:
ADDRESS "ISPEXEC" "ADDPOP POPLOC(ZCMD)" /* pop-up position        */
ADDRESS "ISPEXEC" "TBDISPL SVCRTAB PANEL(SVCRPAN1)"
if (rc > 8) then do                     /* error?                 */
   say 'TBDISPL error    rc = 'rc''     /* yes- output message    */
   call dealloc                         /* remove allocation      */
   exit(¯)                              /* and quit               */
end
if (rc = 8) then do                     /* end?                   */
   ADDRESS "ISPEXEC" "REMPOP"           /* remove pop-up          */
   call dealloc                         /* remove allocation      */
   return                               /* and quit               */
end
do while (ztdsels > ¯)                  /* svc selection loop     */
   address "ISPEXEC" "CONTROL DISPLAY SAVE" /* Save The Environment */
   if (rc \= ¯) then do                 /* save okay?             */
      say 'CONTROL SAVE error  rc = 'rc''
      call dealloc                      /* Dealloc                */
      exit(¯)                           /* and quit               */
   end
   if (ssel = '/') then do              /* user selected a svc?   */
      call display_svc_storage          /* display the svc storage*/
   end
   address "ISPEXEC" "CONTROL DISPLAY RESTORE" /* Restore the envirn*/
   if (rc \= ¯) then do                 /* save okay?             */
      say 'CONTROL RESTORE error  rc = 'rc''
      call dealloc                      /* Dealloc                */
      exit(¯)                           /* and quit               */
   end
   ssel= '_'                             /* reset the sel ind      */
ztdmark= '**************** End Of SVC Update Recording Table *****************'
   ADDRESS "ISPEXEC" "TBDISPL SVCRTAB"
   if (rc = 8) then do                   /* pf3 or return?         */
      ADDRESS "ISPEXEC" "REMPOP"         /* remove pop-up          */
      return                             /* and quit               */
   end
   if (rc > 8) then do
      say 'TBDISPL error  rc = 'rc''
      call dealloc                       /* Dealloc                */
      exit(¯)                            /* and quit               */
   end
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove menu pop-up     */
return
display_svc_storage:
ADDRESS "ISPEXEC" "TBCREATE SVCSTOR NOWRITE REPLACE"
if (rc >  4) then do                     /* call okay?             */
   say 'TBCREATE error    rc = 'rc''     /* no- inform the user    */
   call dealloc                          /* remove allocation      */
   exit(¯)                               /* let's quit             */
end
ztdmark= ''                              /* set to null            */
ADDRESS "ISPEXEC" "VPUT (ztdmark) SHARED"
tabrows=  2¯                             /* max table rows         */
svc_storage= storage(svcurnew,128)       /* 128 bytes of storage   */
x= 1                                     /* starting position      */
do i= 1 to 8                             /* the number of lines    */
   modhex=  c2x(substr(svc_storage,x,4)) /* first four bytes       */
   modhex=  modhex' '                    /* blank                  */
   modhex=  modhex''c2x(substr(svc_storage,x+4,4))
   modhex=  modhex' '                    /* blank                  */
   modhex=  modhex''c2x(substr(svc_storage,x+8,4))
   modhex=  modhex' '                    /* blank                  */
   modhex=  modhex''c2x(substr(svc_storage,x+12,4))
   modchar= substr(svc_storage,x,16)     /* 16 bytes char          */
   ADDRESS "ISPEXEC" "TBADD SVCSTOR      /* add the entries        */
            SAVE(modhex,modchar)
            MULT("TABROWS")"
   if (rc \= ¯) then do                  /* call okay?             */
      say 'TBADD error    rc = 'rc''     /* no- inform the user    */
      call dealloc                       /* remove allocation      */
      exit(¯)                            /* let's quit             */
   end
   x= (x + 16)                           /* next entry             */
end
ADDRESS "ISPEXEC" "TBTOP SVCSTOR"        /* position to top of tab */
if (rc \= ¯) then do                     /* call okay?             */
   say 'TBTOP error    rc = 'rc''        /* no- inform the user    */
   call dealloc                          /* remove allocation      */
   exit(¯)                               /* let's quit             */
end
ADDRESS "ISPEXEC" "ADDPOP POPLOC(ZCMD)" /* pop-up position         */
ADDRESS "ISPEXEC" "TBDISPL SVCSTOR PANEL(SVCRPAN2)"
if (rc > 8) then do                     /* error?                  */
   say 'TBDISPL error    rc = 'rc''     /* yes- output message     */
   call dealloc                         /* remove allocation       */
   exit(¯)                              /* and quit                */
end
ADDRESS "ISPEXEC" "REMPOP"              /* remove pop-up           */
return
display_info_panel:
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* lock the terminal      */
if (rc \= ¯) then do                     /* error?                 */
   say 'SUBSYS Lock error    rc = 'rc''  /* yes- output message    */
   call dealloc                          /* dealloc                */
   exit(¯)                               /* and quit               */
end
svcinfo= 'Your Request Is Being Processed Please Wait'
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(1)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(svcrpan3)" /* position the cursor */
if (rc \= ¯) then do                    /* error?                  */
   ADDRESS "ISPEXEC" "REMPOP"           /* remove pop-up           */
   say 'Display error    rc = 'rc''
   call dealloc                         /* Dealloc                 */
   exit(¯)                              /* and quit                */
end
ADDRESS "ISPEXEC" "REMPOP"              /* remove pop-up           */
return
house_keeping:
/*                                                                 */
/* Set the error mode                                              */
/*                                                                 */
address "ISPEXEC" "CONTROL ERRORS CANCEL"
/*                                                                 */
/* dynamically allocate the panel libraries                        */
/*                                                                 */
address "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('XXXXXXX.PANELS')"
return
dealloc:
address "ISPEXEC" "LIBDEF ISPPLIB"
return


SVCRPAN1 PANEL

)ATTR
* TYPE(INPUT)   INTENS(HIGH) COLOR(RED)
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(TEXT)    INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
$ TYPE(OUTPUT)  COLOR(YELLOW)
)BODY WINDOW(69,18)
%
% COMMAND ===>_ZCMD          %            SCROLL ===>_AMT   +
%
% SVC Update Recording Table Address:    $z       %
% Number Of SVC Updates:                 $z   %
%
# Sel  SVC     OLD SVC           New SVC   Date      No Of   IEASVCxx
# SVC  Number  Table             EP        Of        Updates Parmlib
#              Entry             Address   Update    For SVC Suffix
%
)MODEL
 *z%  $z  %   $z               %$z       %$z       %$z   %  $z %
)INIT
.ZVARS= '(svcr@,svcnos,ssel,svcnum,svcurold,svcurnew,svcurdat, +
svcurcnt,svcursx)'
&ZCMD= ' '
.CURSOR=   ZCMD
&ZWINTTL= 'SVC Update Recording Table'
)REINIT
&ZCMD=    ' '
.CURSOR=   ZCMD
&ZWINTTL= 'SVC Update Recording Table'
)PROC
)END


SVCRPAN2 PANEL

)ATTR
* TYPE(INPUT)   INTENS(HIGH) COLOR(RED)
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(TEXT)    INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
$ TYPE(OUTPUT)  COLOR(YELLOW)
)BODY WINDOW(62,16)
%
% COMMAND ===>_ZCMD          %    SCROLL ===>_AMT   +
%
% SVC Number:       $z  %
% SVC Address:      $z       %
%
# First 128 bytes of the SVC Program
%
)MODEL
 $z                                  %     $z               %
)INIT
.ZVARS= '(svcnum,svcurnew,modhex,modchar)'
&ZCMD= ' '
.CURSOR=   ZCMD
&ZWINTTL= 'SVC Program Storage'
)REINIT
&ZCMD=    ' '
.CURSOR=   ZCMD
&ZWINTTL= 'SVC Program Storage'
)PROC
)END


SVCRPAN3 PANEL

)ATTR
* TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(TEXT)    INTENS(HIGH) COLOR(BLUE)
$ TYPE(OUTPUT)  INTENS(HIGH) COLOR(YELLOW)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(56,9)
%
%COMMAND ===>_ZCMD          %     SCROLL ===>_AMT   +
%
%    ------------------------------------------------
%    |                                              |
%    |$z                                           %|
%    |                                              |
%    ------------------------------------------------
%
)INIT
.ZVARS=  '(svcinfo)'
&ZCMD=   ' '
.CURSOR= ZCMD
&ZWINTTL=  'SVC Information Panel'
)REINIT
.CURSOR= ZCMD
&ZWINTTL=  'SVC Information Panel'
)PROC
)END


R F Perretta
Senior Systems Programmer (UK)                c Xephon 1996
