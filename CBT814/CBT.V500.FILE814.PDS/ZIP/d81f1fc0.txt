Timer delay program

We have recently experienced problems when scheduling
processes that transfer data to one of our remote sites. The
normal process is to transfer data and, because of a functional
defect in the communications hardware, have the line recycled
at the end of each transfer. However, more than one process
can be queued to execute as a batch job and when one process
finishes the next will start: because the line was recycled, the
next job will fail as no resources are available. As the requests
are generated automatically we could not ensure that jobs
would be recognized and held until the operators saw that the
line had been successfully recycled. To overcome this problem
the following program was written. This program will take
parameter input from the EXEC card and cause a delay to
occur as coded on the card.

This means that at the start of each job we could code a 90-
second delay to ensure that the line has been successfully
recycled before connection is attempted. This has proved very
successful and we now code this routine in all of our processes.
The routine is also very useful if you need to delay processes
for other reasons and allows a delay of up to 24 hours to be
coded.


TIMER PROGRAM SOURCE CODE

SUTA009  CSECT
*--- CHAIN SAVEAREAS
BDSTART  EQU      *
         SAVE     (14,12)
         LR       R12,R15
         USING    SUTA009,R12
         ST       R13,SAVEAREA+4
         LA       R2,SAVEAREA
         ST       R15,8(R13)
         LR       R13,R2
*--- GET INPUT PARM AND STRIP OUT COLONS BETWEEN HH:MM:SS THEN WAIT
MAINSEC  EQU      *
         L        R9,0(,R1)               SAVE PARM ADDRESS
         WTO      MF=(E,TIMASTER)
         LH       R2,0(,R9)               LOAD LENGTH OF PARM INTO R2
         CH       R2,=H'0'                ANY PARMS ENTERED
         BE       ERROR01                 NO ISSUE MESSAGE
         CH       R2,=H'8'               YES - MUST BE 8 CHARS HH:MM:SS
         BNE      ERROR04                 IF NOT ERROR MESSAGE
         LA       R9,2(R9)                INCREMENT PAST PARM LENGTH
         MVC      TIMWTO+30(8),0(R9)      PUT INPUT PARM INTO WTO
HOURS    EQU      *
         LA       R8,0(R9)                LOAD CHAR1 OF HH FOR CHECK
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         LA       R8,1(R9)                LOAD CHAR 2 OF HH FOR CHECK
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         CLC      =C'23',0(R9)            MAKE SURE HOURS LT 24
         BNH      ERROR02                 IF NOT - ERROR MESSAGE
         MVC      PAUSE(2),0(R9)          SAVE HOURS
MINS     EQU      *
         LA       R8,3(R9)                LOAD CHAR1 OF MM FOR CHECK
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         LA       R8,4(R9)                LOAD CHAR2 OF MM FOR CHECK
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         CLC      =C'59',3(R9)            MAKE SURE LT 60 MINUTES
         BNH      ERROR02                 IF NOT ERROR MESSAGE
         MVC      PAUSE+2(2),3(R9)        SAVE MINUTES
SECS     EQU      *
         LA       R8,6(R9)                LOAD CHAR1 OF SS
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         LA       R8,7(R9)                LOAD CHAR2 OF SS
         BAL      R7,CHECKNUM             MAKE SURE NUMERIC
         CLC      =C'59',6(R9)            MAKE SURE LT 60 SECONDS
         BNH      ERROR02                 IF NOT - ERROR MESSAGE
         MVC      PAUSE+4(2),6(R9)        SAVE SECONDS
         WTO      MF=(E,TIMWTO)           ISSUE WTO
         STIMER   WAIT,DINTVL=PAUSE       DO TIMER
         B        EXIT                    EXIT RC=0
*--- ISSUE ERROR MESSAGES
ERROR01  EQU      *
         WTO      MF=(E,TIMWTO3)          ISSUE ERROR MESSAGE
         LA       R15,8                   SET RC=8
         B        EXIT2                   EXIT RC=8
ERROR02  EQU      *
         WTO      MF=(E,TIMWTO2)          ISSUE ERROR MESSAGE
         LA       R15,9                   SET RC=9
         B        EXIT2                   EXIT RC=9
ERROR03  EQU      *
         WTO      MF=(E,TIMWTO4)          ISSUE ERROR MESSAGE
         LA       R15,10                  SET RC=10
         B        EXIT2                   EXIT RC=10
ERROR04  EQU      *
         WTO      MF=(E,TIMWTO5)          ISSUE ERROR MESSAGE
         LA       R15,11                  SET RC=11
         B        EXIT2                   EXIT RC=11
*--- EXIT FROM PROGRAM
EXIT     EQU      *
         SR       R15,R15                 SET RC=0
EXIT2    EQU      *
         WTO      MF=(E,TIMASTER)         ISSUE ASTERISK MESSAGE
         L        R13,SAVEAREA+4
         L        R14,12(R13)
         LM       R0,R12,20(R13)
         BR       R14                     EXIT BACK TO SYSTEM
*--- MAKE SURE PASSED CHARACTER IS BETWEEN 0 AND 9  IE NUMERIC
CHECKNUM EQU      *
         CLI      0(R8),C'0'
         BL       ERROR03
         CLI      0(R8),C'9'
         BH       ERROR03
         BR       R7
TIMASTER WTO  '***************************************************',MF=L
TIMWTO   WTO  '* SUTA009 : WILL WAIT FOR XX:XX:XX  (HH:MM:SS) *',MF=L
TIMWTO2  WTO  '* SUTA009 : INVALID WAIT TIME ENTERED          *',MF=L
TIMWTO3  WTO  '* SUTA009 : NO WAIT TIME ENTERED               *',MF=L
TIMWTO4  WTO  '* SUTA009 : NON-NUMERIC INPUT DETECTED         *',MF=L
TIMWTO5  WTO  '* SUTA009 : INVALID PARM LENGTH - (HH:MM:SS)   *',MF=L
SAVEAREA DS       18F
PAUSE    DS       CL8
         END


EXECUTION JCL EXAMPLE

//STS01A      JOB    (SDTS),'LINK',CLASS=A,MSGCLASS=Q,MSGLEVEL=(1,1)
         **************************************************************
         * TIMER JOB.                                                 *
         * WILL MAKE JOB WAIT FOR LENGTH OF TIME SPECIFIED IN PARM    *
         * FIELD. SO TO WAIT FOR 90 SECONDS ENTER:-                   *
         * 00:01:30                                                   *
         **************************************************************
//SUTA009     EXEC  PGM=SUTA009,PARM='00:06:00'
//SYSPRINT    DD    SYSOUT=Q


John Bradley
Senior Technical Support Engineer (UK)                  c Xephon 1993

