Automatically starting VTAM tasks
This is a simple program that waits for VTAM to become active and then issues
some commands that require VTAM, eg JES NJE, NCCF etc.  Issuing the JES COMMANDs
directly rather than via INTRDR is more flexible (and it allows me to put the
//*WAITss logic in).  An APPL statement is required for TESTNODE (or whatever
you choose for the APPLID) in the VTAM definitions.  It is automatically
activated at VTAM start-up (preferably near the end of the ATCCONxx member to
ensure that all required resources are active).
Note: SYS1.HASPSRC is required unless the program is altered.
         PUNCH '         SETCODE AC(1)  '
VTAMWAIT CSECT ,
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R11,R15             ENTRY REGISTER IS BASE
         USING VTAMWAIT,R11
         LA    R14,SAVEAREA
         ST    R13,4(,R14)
         ST    R14,8(,R13)
         LR    R13,R14
         L     R2,0(,R1)           GET "PARM"
         LH    R3,0(,R2)           LENGTH
         LA    R2,2(,R2)           START OF DATA
         LTR   R3,R3               ANY "PARM" PRESENT?
         BNP   NOPARM                NO, THEN LEAVE DEFAULT
         CH    R3,=Y(8)            NOT TOO LONG I HOPE
         BNH   *+4+4                 NO, THEN CARRY ON
         LA    R3,8                SET MAX LENGTH
         STC   R3,TESTAPPL         SAVE LENGTH
         MVC   TESTAPPL+1(8),=CL8' ' CLEAR CURRENT NAME
         BCTR  R3,0
         EX    R3,MVCPARM          MVC   TESTAPPL+1(*-*),0(R2)
MVCPARM  MVC   TESTAPPL+1(*-*),0(R2)
NOPARM   LA    R8,20               MAXIMUM LOOP COUNT
         B     LOOPSTRT
LOOPWAIT STIMER WAIT,BINTVL==FE2'2.00' WAIT TWO SECONDS
LOOPSTRT L     R9,CVTPTR           "CVT"
         L     R9,CVTEXT2-CVT(,R9) SECOND EXTENSION
         CLC   (CVTATCVT+1)-CVTXTNT2(3,R9),=A(0) IS "VTAM" ACTIVE?
         BE    LOOPWAIT              NO, THEN WAIT AGAIN
         OPEN  MF=(E,OPENACB)       "OPEN" VTAM ACB
         LTR   R15,R15             ANY ERRORS?
         BZ    OPENOKAY              NO, THEN JOB DONE
         CLI   (ACBERFLG-IFGACB)+TESTACB,ACBOANAT VTAM NOT IN SYSTEM?
         BE    NOVTAM                YES, THEN SAY SO
         CLI   (ACBERFLG-IFGACB)+TESTACB,ACBOVINA VTAM NOT ACTIVE?
         BE    LOOPWAIT              YES, THEN LOOP BACK AND WAIT AGAIN
         CLI   (ACBERFLG-IFGACB)+TESTACB,ACBOAPNM INVALID "APPLID"?
         BE    LOOPWAIT              YES, THEN LOOP BACK AND WAIT AGAIN
OPERRWTO ST    R15,OERWORK         SAVE R15
         UNPK  OERR15(L'OERR15+1),OERWORK+3(1+1)
         TR    OERR15,HEXTAB-C'0'
         MVI   OERR15+L'OERR15,C''''
         UNPK  OERFLG(L'OERFLG+1),(ACBERFLG-IFGACB)+TESTACB(1+1)
         TR    OERFLG,HEXTAB-C'0'
         MVI   OERFLG+L'OERFLG,C''''
         MVC   OERAPPL,TESTAPPL+1  "APPLID"
         WTO    MF=(E,OERWTO)
         BCT   R8,LOOPWAIT           THEN LOOP BACK AND WAIT AGAIN
         ABEND  2,DUMP
OPENOKAY CLOSE  MF=(E,OPENACB)        "CLOSE" VTAM ACB
VTAMRDY  STIMER WAIT,BINTVL==FE2'2.OO' WAIT TWO MORE SECONDS
         OPEN  (SYSIN,INPUT)
         L     R2,X'10'                 LOAD CVT ADDR
         L     R2,0(,R2)                LOAD ADDR AT CVT HEAD
         L     R2,4(,R2)                LOAD TCB ADDR
         L     R2,12(,R2)               LOAD TIOT ADDR
         MVC   JOBNAME,0(R2)       SAVE "JOBNAME" FOR LATER
CONTLOOP GET SYSIN
         LA    R4,3(,R1)           ASSUME NORMAL COMMAND
         CLC   =C'// ',0(R1)       SHOULD BE "// "
         BE    NORMCOMM              IT IS, CONTINUE
         CLC   =C'/*£',0(R1)       "JES2" COMMAND?
         BE    JES2COMM              YES, THEN PREFIX '@'
         CLC   =C'//*WAIT',0(R1)   "WAIT" COMMAND?
         BE    WAITCOMM              YES, THEN WAIT
         B     CONTLOOP            IGNORE INVALID CARD
WAITCOMM MVC   DINTVL+4(2),7(R1)   SET "SECONDS"
         STIMER WAIT,DINTVL=DINTVL   AND WAIT
         B     CONTLOOP            THEN PROCESS NEXT CARD
JES2COMM LA    R4,2(,R1)
         L     R15,CVTPTR           OBTAIN THE CVT ADDRESS
         L     R15,CVTJESCT-CVT(,R15)  OBTAIN THE "JESCT" ADDR
         L     R15,JESSSCT-JESCT(,R15)  OBTAIN "PRIM-SSCT" ADDR
         L     R15,SSCTSSVT-SSCT(,R15)  OBTAIN "PRIM-SSVT" ADDR
         MVC   2(1,R1),SVTCOMCH-SVT(R15) HASP COMMAND PREFIX
NORMCOMM LA    R5,71(,R1)          POINT AT END-OF-CARD
COMMFEND BCTR  R5,0
         TM    0(R5),X'BF'         BLANK OR NULL?
         BZ    COMMFEND              YES, THEN LOOP BACK
         SR    R5,R4               (LENGTH-1) OF COMMAND
         BNP   CONTLOOP            IGNORE EMPTY CARD
*** R4 -> COMMAND, R5 = LENGTH-1,
         MVC   WTOWORK(CMDMSGL),CMDMSG BASIC MESSAGE
         MVC   (CMDMSGJ-CMDMSG)+WTOWORK,JOBNAME "JOBNAME" TO MESSAGE
         EX    R5,MVCWTO           MVC   (CMDMSG    (*-*) 0(R4)
         LH    R15,CMDMSG          GET BASIC MESSAGE LENGTH
         L     R0,CMDMSG(R15)      LOAD IN "DESC,ROUT"
         LA    R15,1(R5,R15)       ALLOW FOR EXTRA MESSAGE
         ST    R0,WTOWORK(R15)     SAVE "DESC,ROUT"
         STH   R15,WTOWORK           AND NEW LENGTH
         WTO   MF=(E,WTOWORK)      SEND MESSAGE TO OPERATOR
         MVC   WTOWORK(SVC34L),SVC34    "SVC34" BASIC
         EX    R5,MVCMGCR          MVC   WTOWORK+SVC34L(*-*),0(R4)
         LA    R14,SVC34L+1(,R5)   TOTAL LENGTH OF "SVC34-COMMAND"
         STC   R14,(SVC34LEN-SVC34)+WTOWORK SAVE INTO "SVC34"
         MODESET MODE=SUP,KEY=ZERO GET AUTH
         SLR   R0,R0
         LA    R1,WTOWORK          POINT AT MESSAGE
         MGCR   (1)                ISSUE "COMMAND"
         LR    R9,R15              SAVE "RETURN-CODE"
         MODESET MODE=PROB,KEY=NZERO
         B     CONTLOOP
MVCWTO   MVC   (CMDMSGC-CMDMSG)+WTOWORK(*=*),0(R4)
MVCMGCR  MVC   WTOWORK+SVC34L(*-*),0(R4)
EOFSYSIN CLOSE  (SYSIN,DISP)        CLOSE FILE
         SLR   R15,R15             SET ZERO RETURN CODE
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
NOVTAM   WTO   'VTAMIN01 NO VTAM SUPPORT IN SYSTEM',                   X
               DESC=2,ROUTCDE=2
         ABEND  1,DUMP
         LTORG
SAVEAREA DC    18F'0'
         DC    0D'0'
TESTACB ACB    AM=VTAM,                                                X
               APPLID=TESTAPPL,                                        X
               MACRF=LOGON
OPENACB OPEN   (TESTACB,),MF=L     "OPEN" VTAM ACB
TESTAPPL DC    AL1(8),CL8'TESTAPPL' DUMMY "APPLID"
         DC    0D'0'
OERWTO  WTO         'VTAMWAIT VTAM ACB OPEN failed error code=X''XX'', X
               R15=X''XX'', APPL=''aaaaaaaa''!',                       X
               DESC=2,ROUTCDE=2,MF=L
OERFLG   EQU   OERWTO+4+43,2,C'C'
OERR15   EQU   OERWTO+4+54,2,C'C'
OERAPPL  EQU   OERWTO+4+65,8,C'C'
OERWTOL  EQU   *-OERWTO
OERWORK  DC    D'0'
HEXTAB   DC    X'0123456789ABCDEF'
SYSIN    DCB   DDNAME=SYSIN,MACRF=GL,DSORG=PS,EODAD=EOFSYSIN
WTOWORK  DC    XL256'00'
DINTVL   DC    CL8'0000??00'       USED BY "//*WAIT" CARD
JOBNAME  DC    CL8'JOBNAME'
WTOMSG   WTO   'JJJJJJJJ-',                                            X
               ROUTCDE=2,DESC=2,MF=L
WTOMSGL  EQU   *-WTOMSG            LENGTH OF MODEL "WTO"
WTOMSGJ  EQU   WTOMSG+4+0,8,C'C'   "JOBNAME" OFFSET
WTOMSGM  EQU   WTOMSG+4+9,*-*,C'C' "MESSAGE TEXT" OFFSET
CMDMSG   WTO   'JJJJJJJJ-Command issued-',                             X
               ROUTCDE=11,MF=L
CMDMSGL  EQU   *-CMDMSG            LENGTH OF MODEL "CMD"
CMDMSGJ  EQU   CMDMSG+4+0,8,C'C'   "JOBNAME" OFFSET
CMDMSGC  EQU   CMDMSG+4+24,*-*,C'C' "COMMAND TEXT" OFFSET
SVC34    DC    0D'0',B'00000000'
SVC34LEN DC    AL1(*-*),XL2'0000'
SVC34L   EQU   *-SVC34
         CVT   DSECT=YES,LIST=NO
         DCBD  DSORG=PS,DEVD=DA
         £HASPEQU ,
         £HFAME ,
         £SCAT  ,
         £XECB  ,
         IEFJESCT ,           GENERATE MVS "JESCT" DSECT
         IEFJSCVT ,           GENERATE MVC "SSCT" DSECT
         £SVT   ,             GENERATE HASP "SVT" DSECT
         IFGACB AM=VTAM,DSECT=YES *,LIST=NO
         END   VTAMWAIT
The sample procedure to run the job follows, it can be automatically started via
the COMMNDxx member of SYS1.PARMLIB.
//*     THIS PROCEDURE IS INVOKED BY "COMMND00" AT "IPL" TIME OR
//*   BY AN OPERATOR "START" COMMAND.  IT ISSUES A "START NETBATCH"
//*   COMMAND AND THEN EXECUTES PROGRAM "VTAMWAIT".  THIS PROGRAM
//*   WAITS UNTIL "VTAM" IS ACTIVE AND THEN ISSUES "VTMBATCH" AS A
//*   SERIES OF OS/JES COMMANDS TO BE ISSUED ONCE
//*   "VTAM" IS ABLE TO PROCESS THEM E.G. "TSO" AND "NCCF".
//*     THE REASON FOR THIS METHOD IS THAT THIS IS THE MOST
//*   CONVENIENT WAY OF SUBMITTING "JES2" COMMANDS WHICH MAY BE
//*   REQUIRED.
//*
// START NET.NET
//*    THE FOLLOWING ARE GEN-ED AS CONSOLES BUT SHOULD BE VTAM
//* VARY O-0DF,ONLINE
// VARY 080,ONLINE
// VARY 081,ONLINE
// VARY 082,ONLINE
// VARY 083,ONLINE
// VARY O-0FF,ONLINE
// VARY O-4DF,ONLINE
// VARY O-4FF,ONLINE
//IEFPROC  EXEC  PGM=VTAMWAIT  ,PARM='VTMBATCH'
//STEPLIB  DD    DSN=S.LOAD,DISP=SHR
//SYSUDUMP DD    SYSOUT=*
//SYSIN    DD    DDNAME=IEFRDER
//IEFRDER  DD    DSN=SYS1.PROCLIB(VTMBATCH),DISP=SHR
The sample procedure to run the job follows.  It can be automatically started
via the COMMNDxx member of SYS1.PARMLIB.
//* "SYS1.PROCLIB(VTMBATCH)"
//*     THIS COMMAND LIST IS INVOKED BY "VTAMWAIT" ONCE "VTAM" HAS
//*   GOT GOING.  IT CONTAINS A LIST OF COMMANDS TO BE ISSUED
//*   ONCE "VTAM" IS ABLE TO PROCESS THEM E.G. "TSO" AND "NCCF".
//*     "VTAMWAIT" IS STARTED WITHIN THE "IPLBATCH" PROCEDURE.
//*START NPM.NPM
// START NCCFB.NCCFB   **,DOMAIN=B
// START TSPRINT.TSPRINT
// START TSO.TSO
// START HARDCOPY
// START VSMRMINR        CA-MANAGER ONLINE UPDATE/DISPLAY
// START VCIVCSS.VCIVCSS,SYS=TEST & MONITORING SUB-SYSTEM
// START MULTSESS.MULTSESS
// START TMONXS.TMONXS
// START OMEGVTAM,APPL=OMEGAB,USER=TT
// START TLMS.TLMS
//*MODIFY RMF,S III,MEMBER(DG)
//*WAIT10
/*£SLGN1,LNE1
//*WAIT20
/*£SN,A=BACKUP
/*£TN


Martin Hamilton
Technical Consultant
Thomson Holidays (UK)    © Thomson Holidays 1988










































