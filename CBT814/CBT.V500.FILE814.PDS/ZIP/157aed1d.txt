An MVS version of VMUTIL

Prior to starting my current job I used to work in a VM shop,
where I had the use of VMUTIL to execute different actions at
pre-selected days and hours. However, in this strictly MVS
shop I have nothing that compares to VMUTIL. Confronted
with this I came up with a REXX EXEC that tries to address
the problem.

This EXEC, which I have called MVSUTIL, uses an internal
reader and JES2 automatic commands in order to execute pre-
programmed actions at pre-selected days and hours. These
actions can be SUBMIT or EXEC. There is a control file where
you specify when and what is to be executed. If you specify an
EXEC, that EXEC must exist in the PDS named in the
SYSPROC variable at the beginning of the MVSUTIL EXEC.
For either EXECs or SUBMITs you must be authorized to use
the referenced PDSs. The best way to achieve this is to create
an MVSUTIL user-id with the necessary accesses but without
terminal access.

After MVSUTIL has completed the actions selected it will
generate a job for its next execution, which will be left in the
input queue in hold status, and a JES2 automatic command for
its release at the next programmed time specified in the control
file. If there are no more actions to be executed in the current
day, the next JES2 automatic command for the release of
MVSUTIL will be generated for midnight. To prevent any
disruption because of a JES2 stoppage, I have included the
line, $A'MVSUTIL', in the JES2 start-up deck. There can only
be one entry named MVSUTIL in the JES2 spool or the release
command won't work. I use an output class that suppresses
output to achieve this effect (MSGCLASS=Z at my shop). The
MVSUTIL control file is defined in the CNTL_FILE variable
at the beginning of the EXEC. The file definition is no great
problem, as long as the commands you are going to specify
won't be greater than 80 bytes long. I use DSORG(PS),
RECFM(VB), LRECL(84), and a half-track BLKSIZE
(27998). I allocate one cylinder for the file. The records have a
structure similar to the VMUTIL wake-up parameter records
such as:

000001 M-F      22.30 93/07/15 SUBMIT xxxxxx.WORK.CNTL(BACKSYS)
000002 ALL      08.00 93/07/15 SUBMIT xxxxxx.PROD.CNTL(CLEANDSK)
000003 ALL      08.30 93/07/15 SUBMIT XXXXXX.UTIL.CNTL(STATDLY)
000004 XX/XX/01 07.00 93/06/01 SUBMIT XXXXXX.UTIL.CNTL(STATMNTH)
000005 S-S      13.00 93/07/11 TELLTHEM

Each valid record is as follows :

      day hh.mm yy/mm/dd action

where day is the day in which the action is to be executed,
which can be:

o      ALL - every day
o      M-F - from Monday to Friday
o      S-S - Saturdays and Sundays
o      MON - only on Mondays
o      TUE - only on Tuesdays
o      WED - only on Wednesdays
o      THU - only on Thursdays
o      FRI - only on Fridays
o      SAT - only on Saturdays
o      SUN - only on Sundays
o      YY/MM/DD - just this particular date
o      XX/MM/DD - the DD day of the MM month, any year
o      YY/MM/XX - every day of the MM month of the YY year
o      XX/MM/XX - every day of the MM month, any year
o      YY/XX/DD - the DD day of every month of the YY year
o      XX/XX/DD - the DD day of any month, any year.

hh.mm is the hour at which the action is to be started,
yy/mm/dd is the date of the last execution: it is updated each
time this line is picked for execution. action is the action to be
executed: it can be either a SUBMIT or an EXEC.

Each time the EXEC is invoked a line with the format:

      ********** YY/MM/DD HH:MM:SS **********

is added to a LOG file. If a line is picked for execution it will
be copied to the LOG file, prior to its update. The LOG file is
defined as DSORG(PS), RECFM(FB), LRECL(80), and
BLKSIZE(27920). The variable LOG_FILE, declared at the
beginning of the EXEC, contains the name of LOG file. The
LOG operates on a monthly basis and will be newly created
every month. The ALLOC command will have to be adjusted
to your installation standards.

As you can see in the second coded line, I put the EXEC name
into the variable EX_NAME so the EXEC will work without
further changes even if you choose to rename it.

When MVSUTIL is invoked, it reads the control file defined in
the variable CNTL_FILE into memory, using the STEM
LINE.; it then proceeds to check every one of those lines in
order to find the ones eligible for the current day. If a line is
picked, it is matched against the invocation hour.

The line that performs this comparison can be coded to use one
of two operators. If you code '=', only lines that have an exact
hour match are selected for execution: if you code '>=', any
line that has an hour that is smaller than the invocation hour
will be selected for execution. This is done to cater for possible
system outages. When the system is running again you may
have actions that should have been executed, but weren't
because of the outage. If you want them to be executed
anyway, you code '>='; if you don't want them to be executed
because the right execution time has already passed by, you
code '='. If after the time comparison you have a line selected
for execution, that line will be written to the LOG file specified
in the variable LOG_FILE, the date in the line will be updated
with the current date, and a batch job will be sent for execution
by means of an internal reader. This job will execute
IKJEFT01 and will have for input the action specified in the
picked line. If the hour in the picked line doesn't match the
invocation hour then it will be compared with the hour in the
variable NEXT_TIME (which is initialized with 24.00) and the
lowest of the two will be retained in the variable. After all the
lines have been processed, the control file will be rewritten, a
job for the execution of MVSUTIL will be put in the input
queue in hold status, and a JES2 automatic command will be
generated for its release at the time specified in NEXT_TIME.

If you invoke MVSUTIL for the first time under TSO, you
must have a CARDS DD internal reader assigned to your user-
id in the log-on procedure. If you choose to run it as a batch
job using IKJEFT01, don't forget to code a CARDS DD
statement for an internal reader.

This EXEC is currently being used in two MVS/ESA 4.1 shops
with JES2 4.1 without any problems.


MVSUTIL REXX EXEC

/* REXX */
 wakeup_time=translate(left(time(),5),'.',':')
 parse upper source with . ex_name .
 sysproc="XXXXXX.REXX.EXEC"
 log_file="'XXXXXX."ex_name".LOG"substr(date(s),3,4)"'"
 cntl_file ="'XXXXXX."ex_name".WAKEUP.PARMS'"
 class="U" /* MVSUTIL job's execution class */
 x=sysdsn(log_file)
 if  x='OK' then
     "alloc f(file01) da("log_file") mod"
 else
     "alloc f(file01) da("log_file") new space(1,1) tracks",
          "dsorg(ps) recfm(f b) lrecl(80) unit(XXXXXXX)"
 x=sysdsn(cntl_file)
 if  x='OK' then
     call do_it
 else
     log_line.1=" "date(o) time()" DATA SET "cntl_file" NOT FOUND"
 "execio * diskw file01 (finis stem log_line.)"
 "free f(file01)"
 exit
 /* - - - - - - - - - - - - */
 do_it:
 next_time='24.00'
 log_line.1=" "copies('*',10) date(o) time() copies('*',10)
 "alloc f(file00) shr da("cntl_file")"
 "execio * diskru file00 (finis stem line.)"
 j=0;
 l=1;
 do  a=1 to line.0
     parse var line.a day hour date action
     if  day='ALL' |,
             (day='M-F' & left(date(w),1)\='S') |,
             (day='S-S' & left(date(w),1)='S') |,
             day=date(o) |,
             day='XX'right(date(o),5) |,
             day=left(date(o),5)'XX' |,
             day='XX'substr(date(o),3,4)'XX' |,
             day=left(date(o),3)'XX'right(date(o),3) |,
             day='XX/XX'right(date(o),3) |,
             day=translate(left(date(w),3)) then
         do
             if  date(o)>date then
                 do
                     if  wakeup_time >= hour then   /*   =  or  >=   */
                         do
                             l=l+1;
                             log_line.l=" "date(o) time() line.a
                             line.a=left(day,8) hour date(o) action
                             call do_action
                         end
                     else
                         next_time=min(next_time,hour)
                 end
         end
 end
 "execio * diskw file00 (finis stem line.)"
 "free f(file00)"
 call next_one
 return
 /* - - - - - - - - - - - - */
 do_action:
 cmd.1 ="//"USERID()"RX JOB (ACCT#),"
 cmd.2 ="//     CLASS="class",MSGCLASS=Z,MSGLEVEL=(1,1),"
 cmd.3 ="//     TIME=1440"
 cmd.4 ="//*"
 cmd.5 ="//REXX EXEC PGM=IKJEFT01,DYNAMNBR=20,REGION=8M"
 cmd.6 ="//SYSPROC  DD  DISP=SHR,DSN="sysproc
 cmd.7 ="//SYSPRINT DD  DUMMY"
 cmd.8 ="//SYSTSPRT DD  SYSOUT=X"
 cmd.9 ="//CARDS    DD  SYSOUT=(A,INTRDR),"
 cmd.10="//             DCB=(RECFM=F,LRECL=80,BLKSIZE=80)"
 cmd.11="//SYSTSIN DD *"
 cmd.12="    PROFILE NOPREFIX"
 cmd.13="    "action
 "execio * diskw CARDS (finis stem cmd.)"
 drop cmd.
 return
 /* - - - - - - - - - - - - */
 next_one:
 cmd.1 ="//"ex_name" JOB (ACCT#),CLASS="class",MSGCLASS=Z,"
 cmd.2 ="//             MSGLEVEL=(1,1),TYPRUN=HOLD,TIME=1440"
 cmd.3 ="//"ex_name" EXEC PGM=IKJEFT01,DYNAMNBR=20,REGION=2M"
 cmd.4 ="//SYSPRINT DD  DUMMY"
 cmd.5 ="//SYSPROC  DD  DISP=SHR,DSN="sysproc
 cmd.6 ="//CARDS    DD  SYSOUT=(A,INTRDR),"
 cmd.7 ="//             DCB=(RECFM=F,LRECL=80,BLKSIZE=80)"
 cmd.8 ="//SYSTSPRT DD  SYSOUT=*"
 cmd.9 ="//SYSTSIN  DD  *"
 cmd.10="    PROFILE NOPREFIX"
 cmd.11="    "ex_name
 cmd.12="//*"
 "execio * diskw CARDS (finis stem cmd.)"
 drop cmd.
 /* - -   Next wakeup time   - - */
 cmd.1="/*$TA,T="next_time",'$VS,''$A'"ex_name"' '''"
 "execio * diskw CARDS (finis stem cmd.)"
 drop cmd.
 return
 /* - - - - - - - - - - - - */


João Bentes de Jesus
Systems Programmer
Mundial Confiança SA (Portugal)                  c Xephon 1993

