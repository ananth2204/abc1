Record-oriented REXX

Problem addressed

Although REXX is a powerful script language that can often be
used for general programming tasks, its lack of common batch-
oriented programming constructions is often apparent - in
particular, REXX does not have the concept of records.

This failing hampers the use of REXX in interfacing with batch
programs: an ideal use would be to produce sample or test data. If
a record (a collection of data items) is required it has to be built
from the individual data items expanded (or truncated) to the
required length. REXX certainly has the necessary functions to do
this (LEFT, RIGHT, etc) however, their use is long-winded and
error-prone, especially if existing record definitions are available.

RXRECORD addresses this problem by mapping COBOL-like
record definitions into an internal format that can be used by two
associated functions, GETREC and PUTREC, to decompose a
REXX (stem) variable into its constituent fields and vice versa.

RXRECORD also offers an elegant solution to the formatting of
complex REXX strings, especially when the fields of the
formatted string are not separated by REXX's standard blank
delimiter. The use here of the concatenation operator results in
expressions that are difficult to write (and understand).

Solution

RXRECORD runs as a subcommand and processes the record
definition specified as an expression (the examples assume that
RXRECORD is the environment name). To simplify coding and
to reduce processing time, only record descriptions having the
shown simplified syntax can be processed. Again, to simplify
processing, an imbedded REXX EXEC is used to process (parse)
the record description. An optimized solution could replace this
imbedded EXEC with compiled code (eg PL/I). Similarly the
program could be extended to support variable length records.

Subsequent articles will describe the GETREC and PUTREC
functions, which actually get data from records and place data in
records, respectively.

Record description syntax

Records are defined as follows:

      01 recname.     fielddescr

fielddescr:

      level      fieldname       PICTURE    [S] 9  (length)
                 FILLER          PIC         X

                 BINARY                  VALUE value .
                 PACKED-DECIMAL
                 COMP-3
                 COMPUTATIONAL-3
                 COMP
                 COMPUTATIONAL
                 DISPLAY

recname

The name of the stem variable that contains (is to contain) the
records to be processed. The records are named recname.1,
recname.2, etc. The individual record field descriptors are stored
as stem variables: recname.0.i (i = 1, ... , n) n is the number of
fields in the record. These record field descriptors (stem variables)
are used by the associated functions (ie GETREC and PUTREC)
to convert a record into its constituent fields or create a record
from individual stem variables. The standard REXX service
(EXECIO) can be used to perform the actual physical
input/output. For example:

      ADDRESS USER "RECORD 01 R1.",
      "02 ALPHA PIC S9(4) BINARY.",
      "02 BETA  PIC X(8) DISPLAY."

creates R1.0.ALPHA and R1.0.BETA as record definitions.
ALPHA.i and BETA.i (where i is the record number) are the
corresponding stem variables.

fielddescr

A field descriptor. The field descriptors are specified in the
sequence in which the fields appear in the record. Subfields are
not supported, ie definitions of the form:

      05 FLD1.
       10 FLD11 PIC  9(4).
       10 FLD12 PIC S9(9) BINARY.

are not allowed.

level

Level number - in the range 02 through 49. The actual level
number used has no significance (subfields are not supported).

fieldname

Field name - as for COBOL, field names have a maximum length
of 30 characters. The field name serves as linkage to the
corresponding REXX variable (the REXX stem variable
fieldname.i - again, i is the record number - contains the
corresponding data). Default: FILLER (placeholder) - no
corresponding REXX variable exists.

PIC, PICTURE

The PIC, PICTURE keyword introduces the field length
descriptor.

S9      The field contains signed numeric data (right justified)

9      The field contains unsigned numeric data (right justified)

X      The field contains alphanumeric data (left justified).

length

The external field length in bytes (digits). The internal (stored)
length is dependent on the usage (BINARY, PACKED-
DECIMAL, etc). If length is n, then the internal field length can
be calculated as follows (any remainder is ignored):

o      DISPLAY- n.

o      PACKED-DECIMAL  (COMP-3,  COMPUTATIONAL-
3)  - (n+2)/2.

o      BINARY (COMP, COMPUTATIONAL) - 2 if n < 5,
otherwise 4.

BINARY, PACKED-DECIMAL, etc

Specifies the usage - the internal (stored) field type in the record.
DISPLAY is the default.

value

The VALUE keyword precedes value, which specifies the default
data for the field. The specified value is used for FILLER fields
and when the corresponding REXX variable contains no data.
The default data value has a maximum length of 160 bytes
(excluding any enclosing quotes). Because of the parsing
algorithm used, the value field may not specify data containing
periods (decimal points). Default: 0 for numeric (9) fields, blank
for alphanumeric (X) fields. Any enclosing quotes are not used as
data, for example, VALUE ''' defines a single quote (apostrophe).
The record field descriptors have the (Assembler) format:

LINE     DSECT
LVL      DS    CL2,C       level
VARNAME  DS    CL32,C      field name
PICT     DS    CL1,C       field type (numeric or alphanumeric)
#PICT9   EQU   1
#PICTS   EQU   2
#PICTX   EQU   4
LEN      DS    CL5,C       field length in record (no. of digits/bytes)
TYPE     DS    CL1,C       stored field type
#BINARY  EQU   C'1'        BINARY, COMP, COMPUTATIONAL
#PACKED  EQU   C'2'        PACKED-DECIMAL, COMP-3, COMPUTATIONAL-3
#DISPLAY EQU   C'3'        DISPLAY
VALLEN   DS    CL3,C       length of default value
VAL      DS    CL160       default value

Return ValueS

RXRECORD returns one of the values:

0      OK

-1      Parsing error. An explanatory message is displayed

-2      Processing error. An internal processing error occurred in
the parsing routine.

-3      Stack retrieval error. An internal processing error occurred
in the stack retrieval routine (the stack record being retrieved is
too long).

Sample invocation (example 1)

The sample code in example 1 creates the record definition R1
that contains ten fields.

ADDRESS RXRECORD "01 R1.",
 "02 ALPHA PIC S9(4) BINARY.",
 "02 BETA  PIC X(8) DISPLAY.",
 "02 GAMMA PIC S9(5) PACKED-DECIMAL.",
 "02 DELTA PIC 9(5).",
 "02       PIC X(1) VALUE '''.",
 "02 OMEGA PIC S9(9) PACKED-DECIMAL.",
 "02       PIC X(1) VALUE '''.",
 "02 PHI   PIC S9(5) BINARY VALUE 77777.",
 "02       PIC S9(3) COMP-3 VALUE 11.",
 "02 PSI   PIC S9(5) COMPUTATIONAL-3 VALUE 22."
IF RC <> 0 THEN DO
  SAY "RECORD error:" rc
  EXIT
END

Sample invocation (example 2)

The sample code in example 2 creates the definition R2, which is
an SQL query template.

ADDRESS USER "RXRECORD R2."
 "02          PIC X(12) VALUE 'INSERT INTO '.",
 "02 TABNAME  PIC X(18) VALUE 'PERS'.",
 "02          PIC X(1) VALUE '('.",
 "02 COLNAME1 PIC X(18) VALUE 'PNO'.",
 "02          PIC X(1) VALUE ','.",
 "02 COLNAME2 PIC X(18) VALUE 'PNAME'.",
 "02          PIC X(10) VALUE ') VALUES ('.",
 "02 VALUE1   PIC X(256).",
 "02          PIC X(1) VALUE ','.",
 "02 VALUE2   PIC X(256).",
 "02          PIC X(1) VALUE ')'."
 SAY "RXRECORD" RC
IF RC <> 0 THEN DO
  SAY "RECORD error:" rc
  EXIT
END
/* define values */
VALUE1.1 = 1111
VALUE2.1 = "'alpha'"
VALUE1.2 = 2222
VALUE2.2 = "'beta'"
R2.0 = 2 /* no. of records */
fc = PUTREC(R2)
IF fc <> 0 THEN DO
  SAY "PUTREC error:" rc
  EXIT
END

Compare this definition with the equivalent native REXX
statements:

r2.0 = 2;
/* define values */
VALUE1.1 = 1111
VALUE2.1 = "'alpha'"
VALUE1.2 = 2222
VALUE2.2 = "'beta'"
DO i = 1 TO r2.0;
  r2.i = 'INSERT INTO '||,
        LEFT('PERS',18)||,
        '('||,
        LEFT('PNO',18)||,
        ','||,
        LEFT('PNAME',18)||,
        ') VALUES ('||,
        LEFT(VALUE1.i,256)||,
        ','||,
        LEFT(VALUE2.i,256)||,
        ')'
END;

Although fewer native REXX statements are required in this case,
the situation changes when the parameter list is more complex
and often used.

Program code

The sample program code contains the DCX in-line macro which
creates INSTBLK entries for the internal EXEC used to parse the
input expression (record definition). The RXRECORD program
is written as reentrant code. Programs that use REXX services
must be written in 31-bit addressing mode.

         MACRO
         DCX   &P
.* macro for the definition of INSTBLK entries
         GBLC  &CSECT
         AIF   ('&CSECT' NE '').A1
&CSECT   SETC  '&SYSECT'
.A1      ANOP
&CSECT   CSECT
STMT&SYSNDX DC C&P
$INSTBLK CSECT
         DC    A(STMT&SYSNDX,L'STMT&SYSNDX)
         MEND
REX16    TITLE 'REXX record-oriented processing'
* Register usage:
*   R5   A(command ReturnCode=
*   R6   A(SHVBLK)
*   R7   A(common area)
*   R8   A(External Entry Points Vector)
*   R9   A(ENVBLOCK)
*   R10  -
*   R11  -
*   R12  base register
RXRECORD CSECT
RXRECORD AMODE 31
RXRECORD RMODE ANY
         BAKR  R14,0              save return address
         BALR  R12,0
         USING *,R12
* R0: A(Environment Block)
* R1: A(Host Command Environment Routine parameter list)
         LR    R9,R0              A(ENVBLOCK)
         LM    R2,R5,4(R1)
* initialization
         STORAGE OBTAIN,LENGTH=$RXRECORD_L,SP=1
         LR    R7,R1
         USING $RXRECORD,R7
         USING ENVBLOCK,R9
         LA    R13,SA
         ST    R5,ACMDRC          A(command ReturnCode)
         ZAP   INDEX,=P'0'
         MVC   LELEME(8),=2F'-1'
         LA    R1,ARGLIST
         ST    R1,AARGLIST
         LA    R1,EVALBLK
         ST    R1,AEVALBLK
         MVC   EVSIZE,=A((EVDATAE-EVALBLK)/8)
         MVC   EVLEN,=XL4'80000000'
         LA    R1,INSTBLK
         ST    R1,AINSTBLK        A(INSTBLK)
         MVC   INSTBLK_ACRONYM,=CL8'IRXINSTB'
         MVC   INSTBLK_HDRLEN,=F'128'  L(INSTBLK header)
         L     R1,=A($INSTBLK)
         ST    R1,INSTBLK_ADDRESS      INSTBLK entries
         MVC   INSTBLK_USEDLEN,=A(USEDLEN)
         MVC   INSTBLK_MEMBER,=CL8' '
         MVC   INSTBLK_DDNAME,=CL8' '
         MVC   INSTBLK_SUBCOM,=CL8'MVS'
         MVC   INSTBLK_DSNLEN,=F'0'
         L     R2,0(R2)           A(parm)
         L     R3,0(R3)           L(parm)
* R5: A(host command return code)
         STM   R2,R3,AELEM
         L     R8,ENVBLOCK_IRXEXTE
         USING IRXEXTE,R8
* process
         MVC   RC,=H'-2'          RC: processing error
         L     R15,IRXEXEC        A(IRXEXEC)
         CALL (15),                                                    X
               (P0,AARGLIST,FLAGS,AINSTBLK,P0,AEVALBLK,P0,P0),VL,      X
               MF=(E,CALL8)
         LTR   R15,R15
         BNZ   ERROR              processing error
         MVC   RC,=H'-1'          RC: parsing error
         IC    R15,EVDATA
         N     R15,=X'0000000F'   clear high-order
         LTR   R15,R15
         BNZ   ERROR              parsing error
* retrieve passed parameters (from stack)
* get record name
         MVC   RC,=H'-3'          stack retrieval error
         L     R15,IRXSTK         A(IRXSTK)
         CALL (15),(PULL,AELEM,LELEM,FRC),VL,MF=(E,CALL4)
         LTR   R15,R15
         BNZ   ERROR              error
         LM    R1,R2,AELEM
         BCTR  R2,0
         MVC   RECNAME(0),0(R1)
         EX    R2,*-6
         LA    R15,RECNAME+1(R2)
         MVC   0(3,R15),=C'.0.'
         LA    R2,3(R2)
READLOOP L     R15,IRXSTK         A(IRXSTK)
         CALL (15),(PULL,AELEM,LELEM,FRC),VL,MF=(E,CALL4)
         LTR   R15,R15
         BNZ   EOJ
         AP    INDEX,=P'1'
         MVC   WK,=X'40202020202040'
         EDMK  WK,INDEX           R1: A(first character)
         LA    R15,RECNAME+1(R2)
         MVC   0(8,R15),0(R1)
         LM    R3,R4,AELEM
         BAL   R14,SETVAR
         B     READLOOP
EOJ      MVC   RC,=H'0'
ERROR    LH    R15,RC
         L     R1,ACMDRC
         ST    R15,0(R1)          set command return code
* release allocated main storage
         STORAGE RELEASE,LENGTH=$RXRECORD_L,ADDR=(7),SP=1
         LA    R15,0
         PR    ,                  terminate program
         LTORG
         TITLE 'Constants'
P0       DC    A(0)
FLAGS    DC    X'80000000'        invoke as command
PULL     DC    CL8'PULL'
IRX_IRXEXCOM DC CL8'IRXEXCOM'
         TITLE 'Subroutines'
SETVAR   ST    R14,RSA
* Function: Set REXX variable
* input:
*  <VN>: variable name
*  R3: A(variable data)
*  R4: L(variable data)
         BAL   R14,GETVNL        get L(VN) -> R0
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVSTORE   set store-flag
         ST    R3,SHVVALA         A(data)
         ST    R4,SHVVALL         L(data)
         L     R15,IRXEXCOM       A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL,MF=(E,CALL4)
         L     R14,RSA
         BR    R14                return
GETVNL   DS    0H
* Function: Determine actual (normalized) length of name
* input: <VN> - name
* output: R0: L(name), normalized
         LA    R1,L'VN
         SR    R0,R0              counter
         LA    R15,VN
GETVNL1  CLI   0(R15),C' '
         BER   R14                end found
         AH    R0,=H'1'           increment counter
         LA    R15,1(R15)         bump address
         BCT   R1,GETVNL1
         BR    R14
         TITLE 'Variables and data areas'
$RXRECORD DSECT
RSA      DS    A
SA       DS    18F
ACMDRC   DS    A                  A(command return code)
FRC      DS    F                  function return code
RC       DS    H
CALL4    CALL  ,(0,0,0,0),MF=L
CALL8    CALL  ,(0,0,0,0,0,0,0,0),MF=L
AARGLIST DS    A(ARGLIST)
ARGLIST  DS    0A    Argument List (also used for stack processing)
AELEM    DS    2A
         ORG   AELEM+4
LELEM    DS    F
LELEME   DS    2F'-1'
RECNAME  DS    CL16,CL8
VN       EQU   RECNAME
INDEX    DS    PL3
WK       DS    CL8
AEVALBLK DS    A(EVALBLK)
EVALBLK  DS    0F    align
         DS    F                  reserved
EVSIZE   DS    A((EVDATAE-EVALBLK)/8)
EVLEN    DS    XL4'80000000'      L(data)
         DS    F                  reserved
EVDATA   DS    CL64               data
EVDATAE  EQU   *
         DS    0F    align
AINSTBLK DS    A(INSTBLK)
INSTBLK  DS    0H
INSTBLK_ACRONYM DS    CL8'IRXINSTB'
INSTBLK_HDRLEN  DS    F'128'      L(INSTBLK header)
         DS    F                  reserved
INSTBLK_ADDRESS DS    A($INSTBLK) INSTBLK entries
INSTBLK_USEDLEN DS    A(USEDLEN)
INSTBLK_MEMBER  DS    CL8' '      member name (unused)
INSTBLK_DDNAME  DS    CL8' '      DD name (unused)
INSTBLK_SUBCOM  DS    CL8'MVS'    subcom
         DS    F                  reserved
INSTBLK_DSNLEN  DS    F           L(DSN)
         DS    CL54' '            DSN, unused
         ORG   INSTBLK+128
IRX_SHVBLOCK DS (SHVBLEN)X'0'
$RXRECORD_L EQU *-$RXRECORD
         IFGACB
         IRXENVB
         IRXEXTE
         IRXSHVB
         TITLE 'INSTBLK entries'
RXRECORD CSECT
 DCX 'PARSE ARG a;'
 DCX 'CALL AnlRecord(a);'
 DCX 'EXIT 0;'
 DCX 'AnlRecord:'
 DCX '  x = ARG(1);'
 DCX '  PARSE VAR x lvl recname "." x'
 DCX '  IF lvl ^= "01"'
 DCX '   THEN CALL Abort("invalid record level " || lvl);'
 DCX '  QUEUE recname;'
 DCX '  DO WHILE x ^= ""'
 DCX '    x = GetItem(x);'
 DCX '  END;'
 DCX '  RETURN;'
 DCX 'GetItem:'
 DCX '  x = ARG(1);'
 DCX '  PARSE VAR x lvl pfx "(" len ")" sfx "." x;'
 DCX '  IF lvl < "02" | lvl > "49"'
 DCX '   THEN CALL Abort("invalid level " || lvl);'
 DCX '  PARSE VAR pfx varname kywd pict .;'
 DCX '  IF pict = "" THEN DO;'
 DCX '    pict = kywd;'
 DCX '    kywd = varname;'
 DCX '    varname = "FILLER";'
 DCX '  END;'
 DCX '  i = WORDPOS(kywd,"PIC PICTURE");'
 DCX '  IF i = 0 THEN CALL Abort("invalid keyword " || kywd);'
 DCX '  pictlist = "9 1 S9 3 X 4";'
 DCX '  i = WORDPOS(pict,pictlist);'
 DCX '  IF i = 0 THEN CALL Abort("invalid picture type " || pict);'
 DCX '  pict = WORD(pictlist,i+1);'
 DCX '  IF DATATYPE(len) ^= "NUM"'
 DCX '   THEN CALL Abort("length not numeric " || len);'
 DCX '  PARSE VAR sfx type "VALUE" val ".";'
 DCX '  IF type = "" THEN type = "DISPLAY";'
 DCX '  typelist = "BINARY 1 COMP 1 COMPUTATIONAL 1",'
 DCX '             "COMP-3 2 COMPUTATIONAL-3 2 PACKED-DECIMAL 2",'
 DCX '             "DISPLAY 3";'
 DCX '  i = WORDPOS(type,typelist);'
 DCX '  IF i = 0 THEN CALL Abort("invalid type " || type);'
 DCX '  type = WORD(typelist,i+1);'
 DCX '  val = STRIP(val,"B"," ");'
 DCX '  vallen = LENGTH(val);'
 DCX '  IF SUBSTR(val,1,1) = "''" THEN DO;'
 DCX '    vallen = vallen-2;'
 DCX '    val = SUBSTR(val,2,vallen);'
 DCX '  END;'
 DCX '  IF vallen > 160 THEN CALL Abort("value too long " || vallen);'
 DCX '  line = RIGHT(lvl,2,0) LEFT(varname,32) pict,'
 DCX '         RIGHT(len,5,0) type RIGHT(vallen,3,0) val;'
 DCX '  QUEUE line;'
 DCX '  RETURN x;'
 DCX 'Abort:'
 DCX '  SAY "Error:" ARG(1);'
 DCX '  EXIT 8;'
$INSTBLK CSECT
USEDLEN  EQU *-$INSTBLK
         END


Anthony Rudd
Technical Consultant (Germany)                                              c A S Rudd 1994

