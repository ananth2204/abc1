Detecting duplicate modules in LINKLIST

Over the years, I have experienced various problems because
of load module duplication in LINKLIST.  It generally
involves older versions of code being executed unexpectedly
when libraries are repositioned in the concatenation or the first
occurrence of a duplicated member is deleted.

To point out these possible trouble spots, I have written a
procedure to determine all duplicated modules in the
LINKLIST, along with the libraries they are in.  The procedure
consists of three Assembler programs, LLANLYZ1,
LLANLYZ2, and LLANLYZ3, along with a sort step.

The first step in the procedure executes program LLANLYZ1
and determines which libraries are in the current LINKLIST
concatenation.  After finding the libraries, DD statements are
generated for each one and merged with other JCL supplied via
the JCLIN DD card.  A '-INSERT' card indicates where the
merge should take place.  As the job stream is being created, it
is written to the internal reader for execution and contains the
final three steps.

The first step in the generated job executes program
LLANLYZ2.  It is responsible for creating a list of all load
modules in all LINKLIST libraries.  After the list is created, it
is passed to a sort step which sorts the data by member name.
Program LLANLYZ3 then executes and contains logic to
determine what is duplicated along with producing the finalized
report.  The original order is maintained, thus the report shows
libraries in the sequence in which they originally appear in
LINKLIST.  This is important since the first library in the
sequence is where the currently executed version of the module
originates.  Each additional version would then potentially get
executed should the prior one be deleted or moved.

Source code for LLANLYZ1, LLANLYZ2, and LLANLYZ3
follows, along with sample output and JCL necessary to
execute the process.  The code was written under MVS/XA 2.2
and continues to run without modification through MVS/ESA
3.1.3.  Figure 1 illustrates what a sample report might look
like.


    FOLLOWING MODULES ARE DUPLICATED IN LINKLIST
          MODULE         LINKLIST LIBRARY
         --------        ----------------
         ICEMAN          SYS1.LINKLIB
                         SYS2MC.SYNCR32.LINKLIB
         IGC0024I        SYS2MC.CA.CAILPA
                         SYS2MC.XA.LINKLIB
                         SYS1.SYSPROD.SUBSYS

    Figure 1: An example of the output


LLANLYZ1

LLANLYZ1  CSECT
          STM     14,12,12(13)              HOUSEKEEPING
          LA      14,0(13)
          BAL     13,84(15)
          USING   *,13
          DS      18F
          ST      14,4(13)
          ST      13,8(14)
          OPEN    (JCLIN,,JCLOUT,(OUTPUT))  OPEN JCL FILES
GETJCL    GET     JCLIN                     GET JCL RECORD
          CLC     =C'-INSERT',0(1)          IS THIS THE INSERT POINT?
          BE      GETLIBS                   IF YES, GET LINKLIST LIBS
          MVC     JCLHOLD(80),0(1)          IF NOT, SAVE JCL RECORD
          PUT     JCLOUT,JCLHOLD            WRITE JCL RECORD
          B       GETJCL                    GO LOOK FOR MORE
GETLIBS   ZAP     DDCNT,=P'1'               INITIALIZE DD COUNT TO 1
          L       2,16                      CVT ADDRESS
          L       3,1244(2)                 LINKLIST TABLE ADDRESS
          LA      3,9(3)                    1ST LINKLIST DATASET NAME
LIBLOOP   MVC     JCLDSN,0(3)               MOVE DATASET NAME
          UNPK    CNTWRK,DDCNT              UNPACK DD COUNT
          OI      CNTWRK+2,X'F0'            GET RID OF SIGN
          MVC     JCLDD+4(2),CNTWRK+1       MOVE IN DD COUNT
          PUT     JCLOUT,JCLSTMNT           WRITE JCL RECORD
          AP      DDCNT,=P'1'               ADD 1 TO DD COUNT
          LA      3,45(3)                   GET NEXT DATASET ADDRESS
          TM      0(3),X'C0'                IS THERE A DATASET?
          BO      LIBLOOP                   IF YES, GO GET IT
          B       GETJCL                    IF NOT, GET MORE JCL
ALLDONE   CLOSE   (JCLIN,,JCLOUT)           CLOSE JCL FILES
          L       13,4(13)                  RELOAD CALLERS SAVE AREA
          LM      14,12,12(13)              RELOAD CALLERS REGISTERS
          LA      15,0                      ZERO RETURN CODE
          BR      14                        GO BACK TO CALLER
DDCNT     DS      PL2
CNTWRK    DS      CL3
JCLSTMNT  DS      CL80
          ORG     JCLSTMNT
JCLDD     DC      CL25'//DDXX  DD  DISP=SHR,DSN='
JCLDSN    DS      CL44
JCLFILL   DC      CL11'          '
JCLHOLD   DS      CL80
          LTORG
JCLIN     DCB     DDNAME=JCLIN,DSORG=PS,MACRF=GL,EODAD=ALLDONE
JCLOUT    DCB     DDNAME=JCLOUT,DSORG=PS,MACRF=PM,RECFM=F,             X
               BLKSIZE=80,LRECL=80
          END


LLANLYZ2

LLANLYZ2 CSECT
         STM     14,12,12(13)        HOUSEKEEPING
         LA      14,0(13)
         BAL     13,84(15)
         USING   *,13
         DS      18F
         ST      14,4(13)
         ST      13,8(14)
         OPEN    (MEMLIST,(OUTPUT)) OPEN MEMBER LIST FILE
         L       11,16              CVT ADDRESS
         USING   CVTMAP,11          ESTABLISH CVT ADDRESSABILITY
         L       3,CVTTCBP          TCB HEADER ADDRESS
         L       3,4(3)             TCB ACTIVE ADDRESS
         L       3,12(3)            TIOT ADDRESS
         LA      3,24(3)            DD ENTRY LENGTH FIELD
         B       CHECKDDX           GO CHECK DD
NEXTDDX  SR      0,0                ZERO REG 0
         IC      0,0(3)             MOVE LENGTH TO REG 0
         AR      3,0                ADD LENGTH TO REG 3
CHECKDDX CLI     0(3),X'00'         IS LENGTH ZERO?
         BE      ENDDDS             IF YES, ALL DONE
         CLC     =C'DD',4(3)        IS THIS A "DD" DD STMNT?
         BNE     NEXTDDX            IF NO, KEEP LOOKING
         MVC     DDXX+40(8),4(3)    USE DDNAME FROM TIOT
         OPEN    DDXX               OPEN THE PDS
         MVI     JFCB,C' '          BLANK OUT
         MVC     JFCB+1(175),JFCB            JFCB
         RDJFCB  MF=(E,EXRDJFCB)    READ THE JFCB
         LTR     15,15              WAS IT A GOOD READ?
         BNZ     BADJFCB            IF NO, BETTER GET OUT
         MVI     MEMREC,C' '        BLANK OUT
         MVC     MEMREC+1(79),MEMREC          MEMREC
         MVC     DSNAME(44),JFCB    SAVE LINKLIST DSNAME
NEXTREC  GET     DDXX               READ A DIRECTORY RECORD
         LR      6,1                SAVE ADDRESS OF RECORD
         USING   PDS2,6             ESTABLISH ADDRESSABILITY
         SLR     1,1                ZERO REG 1
         ICM     1,3,0(6)           GET LENGTH OF DATA
         LA      5,0(1,6)           ADDRESS END OF RECORD
         LA      6,2(6)             ADDRESS OF FIRST MEMBER
NEXTMEM  CLC     PDS2NAME,=8X'FF'   AT END?
         BNE     MOVEMEM            IF NO, GET NEXT MEMBER
         CLOSE   DDXX               IF YES, CLOSE THIS ONE
         B       NEXTDDX            GO GET ANOTHER
MOVEMEM  MVC     MEMNAME,PDS2NAME   SAVE MEMBER NAME
         PUT     MEMLIST,MEMREC     WRITE MEMLIST RECORD
         NI      PDS2INDC,X'1F'     ZERO UNEEDED BITS
         SLR     8,8                ZERO REG 8
         ICM     8,1,PDS2INDC       GET LENGTH OF USER DATA
         SLL     8,1                MULTIPLY BY 2
         LA      6,12(8,6)          POSITION TO NEXT MEMBER
         CR      6,5                IS THIS THE END?
         BL      NEXTMEM            IF NO, GET ANOTHER MEMBER
         B       NEXTREC            IF YES, GET ANOTHER RECORD
BADJFCB  WTO     '*** LLANLYZ2 - BAD JFCB READ ***',ROUTCDE=(11)
         ABEND   999
ENDDDS   CLOSE   MEMLIST
         L       13,4(13)           RELOAD CALLERS SAVE AREA
         LM      14,12,12(13)       RELOAD CALLERS REGISTERS
         LA      15,0               ZERO RETURN CODE
         BR      14                 GO BACK TO CALLER
MEMREC   DS      CL80
         ORG     MEMREC
MEMNAME  DS      CL8
MEMFILL1 DS      CL8
DSNAME   DS      CL44
MEMFILL2 DS      CL20
EXJFCB   DS      0F
         DC      X'07'
         DC      AL3(JFCB)
JFCB     DS      0D,CL176
EXRDJFCB RDJFCB  (DDXX),MF=L
         LTORG
DDXX     DCB     DDNAME=DDXX,DSORG=PS,MACRF=GL,RECFM=FB,LRECL=256,     X
               BLKSIZE=256,EXLST=EXJFCB
MEMLIST  DCB     DDNAME=MEMLIST,DSORG=PS,MACRF=PM
         IHAPDS PDSBLDL=NO
         CVT DSECT=YES
         END


LLANLYZ3

LLANLYZ3 CSECT
         STM     14,12,12(13)              HOUSEKEEPING
         LA      14,0(13)
         BAL     13,84(15)
         USING   *,13
         DS      18F
         ST      14,4(13)
         ST      13,8(14)
         OPEN    (MEMLIST,,REPORT,(OUTPUT)) OPEN FILES
         GET     MEMLIST                    GET A MEMBER RECORD
         MVC     CURRMEM(8),0(1)            SAVE CURRENT MEMBER NAME
         MVC     CURRDSN(44),16(1)          SAVE CURRENT DATASET NAME
         MVC     SAVEMEM,BLNKMEM            INIT SAVEMEM TO BLANKS
         MVI     RPTREC,C' '                BLANK OUT
         MVC     RPTREC+1(79),REPTREC                RPTREC
         BAL     10,PRNTHEAD                GO PRINT HEADINGS
NEXTREC  GET     MEMLIST                    READ A MEMBER RECORD
         MVC     PREVMEM,CURRMEM            SAVE PREVIOUS MEMBER NAME
         MVC     PREVDSN,CURRDSN            SAVE PREVIOUS DATASET NAME
         MVC     CURRMEM(8),0(1)            SAVE CURRENT MEMBER NAME
         MVC     CURRDSN(44),16(1)          SAVE CURRENT DATASET NAME
         CLC     CURRMEM,PREVMEM            PREV MEM NAME = CURRENT
         BNE     NEXTREC                    IF NOT, GET NEXT ONE
         CP      LINECNT,=P'60'             TIME FOR HEADINGS?
         BL      PRNTCHEK                   IF NOT, SKIP
         BAL     10,PRNTHEAD                GO PRINT HEADINGS
PRNTCHEK CLC     PREVMEM,SAVEMEM            PREV MEM NAME = SAVED?
         BE      PRNTCURR                   IF YES, ONLY NEED CURRENT
         MVC     RPTDSN,PREVDSN             REPORT
         MVC     RPTMEM,PREVMEM                   PREVIOUS
PRNTBOTH PUT     REPORT,RPTREC                            INFO
         AP      LINECNT,=P'1'              ADD 1 TO LINE COUNTER
         MVC     RPTMEM,BLNKMEM             BLANK OUT REPORT MEM NAME
PRNTCURR MVC     RPTDSN,CURRDSN             REPORT
         MVC     SAVEMEM,CURRMEM                   CURRENT
         PUT     REPORT,RPTREC                             INFO
         AP      LINECNT,=P'1'              ADD 1 TO LINE COUNTER
         B       NEXTREC                    GET NEXT MEMBER RECORD
PRNTHEAD PUT     REPORT,PRNTLNE1            PRINT HEADINGS
         PUT     REPORT,PRNTLNE2
         PUT     REPORT,PRNTLNE3
         ZAP     LINECNT,=P'3'              RESET LINE COUNTER
         BR      10
EOF      CLOSE   (MEMLIST,,REPORT)          CLOSE FILES
         L       13,4(13)                   RELOAD CALLERS SAVE AREA
         LM      14,12,12(13)               RELOAD CALLERS REGISTERS
         LA      15,0                       ZERO RETURN CODE
         BR      14                         GO BACK TO CALLER
PRNTLNE1 DC      CL80'1FOLLOWING MODULES ARE DUPLICATED IN LINKLIST'
PRNTLNE2 DC      CL80'       MODULE         LINKLIST LIBRARY'
PRNTLNE3 DC      CL80'      --------        ----------------'
BLNKMEM  DC      CL8'        '
SAVEMEM  DS      CL8
LINECNT  DS      PL2
CURRMEM  DS      CL8
PREVMEM  DS      CL8
PREVDSN  DS      CL44
RPTREC   DS      CL80
         ORG     RPTREC
RPTFILL1 DS      CL6
RPTMEM   DS      CL8
RPTFILL2 DS      CL8
RPTDSN   DS      CL44
RPTFILL3 DS      CL14
         LTORG
REPORT   DCB     DDNAME=REPORT,DSORG=PS,MACRF=PM,                      X
               BLKSIZE=80,RECFM=FBA,LRECL=80
MEMLIST  DCB     DDNAME=MEMLIST,DSORG=PS,MACRF=GL,EODAD=EOF
         END


SAMPLE JCL

//STEP1     EXEC PGM=LLANLYZ1
//STEPLIB   DD   DSN=YOUR.LOAD.LIBRARY,DISP=SHR
//JCLOUT    DD   SYSOUT=(A,INTRDR)
//JCLIN     DD   DATA,DLM=ZZ
//YOURJOB   JOB  (),'LLANLYZ',MSGCLASS=X,NOTIFY=YOURID
//STEP1     EXEC PGM=LLANLYZ2
//STEPLIB   DD   DSN=YOUR.LOAD.LIBRARY,DISP=SHR
//MEMLIST   DD   DSN=&&TEMP1,DISP=(,PASS),
//          DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB),
//          UNIT=SYSWK,SPACE=(CYL,(5,1))
-INSERT
//STEP2     EXEC PGM=SORT
//SORTIN    DD   DSN=&&TEMP1,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP2,DISP=(,PASS),
//          DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB),
//          UNIT=SYSWK,SPACE=(CYL,(5,1))
//SYSPRINT  DD   SYSOUT=*
//SYSOUT    DD   SYSOUT=*
//SYSIN     DD   *
 SORT FIELDS=(1,8,CH,A),EQUALS
//STEP3     EXEC PGM=LLANLYZ3
//STEPLIB   DD   DSN=YOUR.LOAD.LIBRARY,DISP=SHR
//MEMLIST   DD   DSN=&&TEMP2,DISP=(OLD,DELETE)
//REPORT    DD   SYSOUT=*
ZZ


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)      c Xephon 1990

