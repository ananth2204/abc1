Dynamic reload of JES2 exits

A recent exercise in writing JES2 exits highlighted a problem
with writing and testing JES2 exits - namely having to reload
JES2 each time you need to change the exit program.  While
IBM has provided a mechanism for enabling and disabling the
loaded exit, you cannot request JES to reload a fresh version
from a program library.

Typically, when writing exits, you will go through several
stages including:

o      Initial versions to gather information and verify that you
      are correctly searching control blocks.

o      Initial test versions which perform most of the functions of
      the final version, but perhaps not all the functions, and
      which will generally contain debugging information such
      as strategic $WTOs.

o      The final versions which contain all of the function
      required and (hopefully) work properly.

Even the simplest JES2 exit may require a minimum of five or
six versions before you reach a workable exit.  Given JES2's
requirement of a restart each time, you could end up very
unpopular with the users!  In our case, this problem is made
even worse because of a bug in SDSF which causes problems if
JES2 is restarted - the only solution being a complete MVS
IPL.


JES2 EXIT 5 - COMMAND PRE-PROCESSOR

The solution we came up with to this problem was to write
another exit (exit 5 - JES2 command pre-processor), which
adds a JES2 command called '$RELOAD'.  This command
will allow you to reload an exit program dynamically without
having to disturb the JES environment.

The format of this command is:
      $RELOAD,EXIT=nn

where nn is the number of the exit to be reloaded.  When the
command is entered, exit 5 will:

1      Search through JES2's exit control blocks to determine the
      name of the program currently loaded (as specified in the
      LOADMOD and EXIT control statements in the JES2
      start-up parameters.

2      Disable the current exit and delete it from JES2 storage.

3      Issue a load to reload the program.

4      Issue a message stating the exit number and the name of
      the program loaded.

By default, and for safety reasons, the newly loaded exit will
be left 'disabled'.  It is your responsibility to issue the '$T
EXIT(n),enable' command to re-enable the new version.

You still have to include the LOADMOD and EXIT statements
in the JES2 start-up, so a new exit will still require one reload
of JES2.  However, once defined, no further reloads are
required in order to perform whatever testing is required.

When using $RELOAD, it is generally a good idea to manually
disable the exit being replaced before you issue the $RELOAD
command to replace it.  This ensures that the exit is not active
when it is deleted.  For example, when replacing JES exit 1,
you would issue:

      $T EXIT(1),DISABLE
      $RELOAD,EXIT=1
      $T EXIT(1),ENABLE

The exit can be used to replace itself, but only if done with
great care.  JES2 is happy to issue the delete and load
commands for exit 5.  However, as soon as the loaded version
of exit 5, which is currently executing, is deleted, its storage
becomes available for page stealing.  If system activity is
relatively low, the page remains in storage long enough for the
program to end.  After this, the new copy of exit 5 is available.
If the storage is overwritten before the program ends, you will
typically get an S0C1 abend in JES2.  The ESTAE traps and
corrects this, but you have to make a few replies.  This does
not happen when replacing any exit other than exit 5.


ASSEMBLING AND LINKING THE EXIT

The exit must be assembled into a library available to JES2 at
start-up.  We use SYS1.LINKLIB.  The module should be
link-edited with the name specified in the LOADMOD JES2
control statement (JESXIT5) and should have the RENT and
REFR attributes.  For specific details on assembling and
linking JES2 exits, you should refer to LY28-1010 MVS/ESA
JES2 Customization.


DEFINING THE EXIT TO JES2

Assuming the exit is assembled using the CSECT and
MODULE names given in the source, you should include the
following two statements in the JES2 parameters in order to
define the exit to JES:

      LOADMOD(JESXIT5)
      EXIT5 TRACE=NO,STATUS=DISABLED,ROUTINES=(JESXIT5)

The initial status is kept as disabled purely as a performance
option.  Since the exit only needs to be executed when we
specifically want to use the $RELOAD command, it serves no
useful purpose to keep it enabled when $RELOAD will not be
required.


SOURCE CODE FOR THE EXIT

HASX05A  TITLE 'JES2 EXIT5 - PROLOG (MODULE COMMENT BLOCK)'
*** MODULE NAME = HASX05A CSECT                                     ***
* DESCRIPTIVE NAME = JES2 COMMAND PREPROCESSOR                        *
* IMPLEMENTS A NEW JES2 COMMAND "$RELOAD" WHICH CAN BE USED TO DYNAM- *
* ICALLY RELOAD JES2 EXITS WITHOUT HAVING TO SHUTDOWN/RESTART JES2.   *
         TITLE 'JES2 EXIT5 - PROLOG ($HASPGBL)'
         COPY  $HASPGBL            COPY HASP GLOBALS
         TITLE 'JES2 EXIT5 - PROLOG ($MODULE)'
HASX05A $MODULE ENVIRON=JES2,NOTICE=NONE,                              C
               TITLE='JES2 EXIT5 - PROLOG ($MODULE)',                  C
               $CADDR,             GENERATE HASP CADDR DSECT           C
               $CMB,               GENERATE HASP CMB DSECT             C
               $COMWORK,           GENERATE HASP COMWORK DSECT         C
               $CWA,               GENERATE HASP CWA DSECT             C
               $DCT,               GENERATE HASP DCT DSECT             C
               $DTE,               GENERATE HASP DTE DSECT             C
               $ERA,               GENERATE HASP ERA DCT               C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $HCCT,              GENERATE HASP HCCT DSECT            C
               $HCT,               GENERATE HASP HCT DSECT             C
               $JOE,               GENERATE HASP JOE DSECT             C
               $LMT,               GENERATE HASP LMT DSECT             C
               $MIT,               GENERATE HASP MIT DSECT             C
               $PADDR,             GENERATE HASP PADDR DSECT           C
               $PARMLST,           GENERATE HASP PARMLST DSECT         C
               $PCE,               GENERATE HASP PCE DSECT             C
               $PRE,               GENERATE HASP PRE DSECT             C
               $PSV,               GENERATE HASP PSV DSECT             C
               $QSE,               GENERATE HASP QSE DSECT             C
               RESPA,              GENERATE MVS IATRESPA DSECT         C
               SDWA,               GENERATE MVS SDWA DSECT             C
               $TQE,               GENERATE HASP TQE DSECT             C
               UCB,                GENERATE MVS UCB DSECT              C
               $USERCBS,           GENERATE HASP USERCBS DSECT         C
               $XECB,              GENERATE HASP XECB DSECT            C
               $XRT,               GENERATE HASP XRT DSECT             C
               $XIT                GENERATE HASP XIT DSECT
         TITLE 'JES2 EXIT5 - COMMAND PREPROCESSOR EXIT ENTRY POINT'
***       EXIT5 - INSTALLATION EXIT 5 ROUTINE                       ***
*         VALID RETURN CODES FOR EXIT ROUTINES --                     *
*         +0  --  CONTINUE WITH NORMAL COMMAND PROCESSING             *
*         +4  --  CONTINUE WITH NORMAL COMMAND PROCESSING             *
*         +8  --  PERFORM $CRET NORMAL RETURN -- (DELETES COMMAND)    *
*         +12 --  ISSUE $CRET OK MESSAGE                              *
*         +16 --  ISSUE $CRET MESSAGE  --  TEXT IN 'COMMAND' AREA     *
***                                        MESSAGE LENGTH IN R0     ***
         USING HCT,R11             HCT ADDRESSABILITY
         USING PCE,R13             PCE ADDRESSABILITY
JESXIT5 $ENTRY BASE=R12
        $SAVE  TRACE=YES           SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
***       ESTABLISH ESTAE ENVIRONMENT                                 *
         L     R14,=A(X5RECOVR)    R14 => EXIT05 RECOVERY EP
        $ESTAE RECADDR=(R14)       CREATE ESTAE ENVIRONMENT
***   MOVE PORTION OF THE COMMAND CURRENTLY BEING PROCESSED INTO THE  *
*     PRE (PRETRACK) FOR THE PROCESSOR RECOVERY ROUTINE (X5RECOVR)    *
         L     R14,PCEPRE          GET ADDRESS OF PRE
         USING PRE,R14             ADDRESSABILITY
         MVC   PRETRACK(CCMDLN),COMMAND     MOVE COMMAND INTO PRE
         MVI   PRELOGLN,CCMDLN     SET LENGTH OF DATA IN PRETRACK      C
                                   TO BE RECORDED IN LOGREC
         DROP  R14                 KILL ADDRESSABILITY
         TITLE 'JES2 EXIT5 - COMMAND PREPROCESSOR EXIT MAIN ROUTINE'
*         EXIT5 MAIN CALLING ROUTINE                                  *
        $CALL  X5TSTU,ERRET=X5RC00 IS IT OUR COMMAND ?
        $CALL  X5UCMD              PROCESS USER COMMAND
         B     X5RC12              ALL DONE, RETURN TO HASPCOMM
         TITLE 'JES2 EXIT5 - COMMAND PREPROCESSOR COMMON RETURN'
*         HASX05A COMMON RETURN ROUTINES                              *
X5RC00   XR    R2,R2               CONTINUE WITH NORMAL PROCESSING
         B     X5ECAN              BRANCH TO COMMON RETURN
X5RC04   LA    R2,4                CONTINUE WITH NORMAL PROCESSING
         B     X5ECAN              BRANCH TO COMMON RETURN
X5RC08   LA    R2,8                DELETE COMMAND
         B     X5ECAN              BRANCH TO COMMON RETURN
X5RC12   LA    R2,12               ISSUE JES2 "OK" MESSAGE
         B     X5ECAN              BRANCH TO COMMON RETURN
X6RC16   LA    R2,16               DISPLAY TEXT IN COMMAND AREA
         B     X5ECAN              BRANCH TO COMMON RETURN
X5ECAN   EQU   *                   CANCEL XJ2COMM ESTAE ENVIRON
         ICM   R3,B'1111',PCEPRE   GET ADDRESS OF PRE
         BZ    X5RTN               IF NONE, SKIP ESTAE CANCEL
        $ESTAE CANCEL              CANCEL ESTAE ENVIRONMENT
X5RTN   $RETURN RC=(R2),TRACE=YES  RETURN TO MAINLINE HASPCOMM
         TITLE 'JES2 EXIT5 - XCREEN   - CHECK FOR USER COMMANDS'
***       X5TSTU  - CHECK THE COMMAND VERB                          ***
*         THIS SECTION TESTS FOR OUR COMMAND VERB(S). IN THIS CASE,   *
*         WE TEST FOR THE "RELOAD" VERB. IF FOUND, WE RETURN WITH A   *
*         RETURN CODE OF 0, ALLOWING THE MAINLINE CODE TO CONTINUE.   *
*         IF THE VERB IS NOT "RELOAD", WE RETURN WITH A RETURN CODE   *
*         OF "4" WHICH WILL CAUSE THE $CALL TO BRANCH TO THE "ERRET"  *
***       LABEL.                                                    ***
         USING X5TSTU,R12          ESTABLISH X5TSTU ADDRESSABILITY
X5TSTU  $SAVE  TRACE=YES           SAVE CALLERS REGISTERS
         LR    R12,R15             ESTABLISH BASE
         LA    R15,4               ASSUME NON-ZERO RC, NOT OURS..
         CLC   =C'RELOAD',COMVERB IS IT OUR VERB ???
         BNE   X5TSRET             NO, RETURN TO CALLER, RC=04
         XR    R15,R15             ELSE, RETURN TO CALLER RC=00
X5TSRET $RETURN RC=(R15),TRACE=YES
         DROP  R12
         TITLE 'JES2 EXIT5 - X5UCMD   - USER COMMAND PROCESSING'
***       X5UCMD - USER COMMAND PROCESSING                          ***
*    THE FORMAT OF THE COMMAND WE SHOULD HAVE RECEIVED IS:            *
*                  $RELOAD,EXIT=NN                                    *
*    WHERE "NN" IS THE NUMBER OF THE JES2 EXIT TO BE RELOADED.        *
* RECOVERY:                                                           *
*         $ESTAE ESTABLISH UPON ENTRY.  THE RECOVERY ROUTINE IS       *
*         PROVIDED IN X5RECOVR.                                       *
* REGISTER USAGE (INTERNAL):                                          *
*    R0-R1     WORK REGISTERS                                         *
*    R2        GETMAINED WORK AREA ADDRESS                            *
*    R3        GETMAINED WORK AREA LENGTH                             *
*    R4        HCCT POINTER                                           *
*    R5-R8     WORK REGISTERS                                         *
*    R9        XIT  POINTER                                           *
*    R10       XRT  POINTER                                           *
*    R11       HCT BASE ADDRESS                                       *
*    R12       LOCAL BASE ADDRESS                                     *
*    R13       PCE BASE ADDRESS                                       *
*    R14       LINK/WORK REGISTER                                     *
***  R15       LINK/WORK REGISTER                                   ***
         USING X5UCMD,R12          ESTABLISH X5UCMD ADDRESSABILITY
X5UCMD  $SAVE  TRACE=YES           SAVE CALLERS REGISTERS
         LR    R12,R15             ESTABLISH BASE
* WE NEED TO MODIFY SOME OF THE MESSAGES ISSUED, SO GETMAIN A WORK
* AREA FROM FREE STORAGE TO PLAY IN.
         GETMAIN R,LV=X5LEN,LOC=BELOW,SP=X5SP
         LR    R2,R1               ADDRESS OF AREA
         LR    R3,R0               LENGTH OF AREA
         USING X5WORK,R2           USE DSECT TO MAP GETMAINED AREA
         L     R4,$HCCT            WE NEED THE HCCT FOR THE
         USING HCCT,R4             ADDRESS OF THE XIT
* WE ONLY MODIFY SOME OF THE MESSAGES. HOWEVER, FOR CONSISTENCY
* WE WILL MOVE THEM ALL TO THE WORK AREA, AND ISSUE THEM FROM THERE.
         MVC   MSG501(40),SMSG501
         MVC   MSG502(40),SMSG502  INITIALIZE MESSAGE TEXT
         MVC   MSG503(40),SMSG503  IN WORK AREA
         MVC   MSG504(40),SMSG504
         MVC   MSG505(40),SMSG505
         MVC   MSG506(40),SMSG506
         MVC   MSG507(40),SMSG507
* TEST FOR THE "EXIT=" PARAMETER.
         LA    R8,COMVERB+6        ADDRESS OF FIRST PARM IF ANY
         CLC   =C',EXIT=',0(R8)    IS IT THE "EXIT" PARM
         BNE   X5UE05              NO - THEN IT'S AN ERROR
* THE EXIT NUMBER MAY HAVE BEEN GIVEN AS ONE OR TWO NUMERIC
* DIGITS. DETERMINE WHICH, AND INSERT THE EXIT NUMBER INTO MESSAGE 1.
         MVC   MSG501X(2),=CL2'00' INITIALIZE EXIT NUMBER
         TM    6(R8),X'F0'         IS FIRST DIGIT NUMERIC ?
         BNO   X5UE03              NO - THEN IT'S INVALID
         TM    7(R8),X'F0' IS THERE A SECOND DIGIT ?
         BNO   X5U010 NO - THEN WE ONLY MOVE 1
         MVC   MSG501X(2),6(R8)    MOVE 2 DIGIT EXIT NUMBER
         B     *+10                SKIP NEXT MOVE
X5U010   MVC   MSG501X+1(1),6(R8)  MOVE 1 DIGIT EXIT NUMBER
         PACK  X5DWD(8),MSG501X(2) PACK 2 DIGITS OF EXIT NUMBER
         CP    X5DWD+6(2),=PL2'35' IS THIS A REASONABLE NUMBER
         BH    X5UE03              NO - ISSUE AN ERROR MESSAGE
* THE EXIT NUMBER IS BETWEEN 0 AND 35. THIS IS USED AS AN INDEX
* INTO THE "XIT" (EXIT INFORMATION TABLE) WHICH CONTAINS SOME
* NICE STATUS STUFF. WE USE THIS TO DETERMINE IF THERE IS A
* "LOADMOD" STATEMENT IN THE JES2 STARTUP DECK FOR THIS EXIT.
* IT ALSO GIVES US THE CHANCE TO DISABLE THE EXIT BEFORE WE
* LOAD THE NEW VERSION.
         CVB   R9,X5DWD            AND GET IT INTO A USABLE REG.
         MH    R9,=Y(XITLNGTH)     AND CALC OFFSET INTO XIT TABLE.
         A     R9,CCTXITA          FIND ACTUAL XRT
         USING XIT,R9              AND ADDRESS IT
         TM    XITFLAGS,XITDEF     IS THIS EXIT DEFINED ?
         BZ    X5UE04              NO - THEN GET OUT NOW
         NI    XITFLAGS,X'FF'-XITENBLD    DISABLE THE EXIT!!!
* THE XIT POINTS TO THE XRT (THE EXIT ROUTINE TABLE) WHICH WILL
* TELL US THE NAME OF THE ROUTINE LOADED TO SERVICE THIS EXIT.
* WE WILL NEED THIS INFO IN ORDER TO DELETE AND RELOAD THE EXIT.
         L     R10,XITXRTAD        LOAD ADDRESS OF XRT FOR THIS XIT
         USING XRT,R10             AND ADDRESS IT
         MVC   MSG501NA(8),XRTRNAME  MOVE EXIT ROUTINE NAME
* THE FOLLOWING TWO COMMANDS ACTUALLY DELETE THE CURRENT EXIT
* MODULE AND LOAD THE NEW COPY. DON'T FORGET TO REFRESH LLA
* AFTER ASSEMBLING THE EXIT!!!
        $MODELET NAME=XRTRNAME,ERRET=X5UE01
        $MODLOAD NAME=XRTRNAME,MESSAGE=YES,ERRET=X5UE02
* THE $MODLOAD (IF IT WORKS) RETURNS THE ADDRESS OF THE LMT
* (LOAD MODULE TABLE) - WE NEED THIS.
         LR    R5,R1               SAVE RETURNED LMT ADDRESS
         USING LMT,R5              ADDRESS $LMT RETURNED
         OI    LMTFLG1,LMT1LOAD    SHOW PROGRAM LOADED.
* THE $MODCHK DOES THE REAL WORK FOR US. IT WILL GO THRU AND ENTER
* THE CORRECT INFO IN THE XIT AND XRT FOR US TO SHOW THAT THE
* EXIT IS VALID AND TO ENTER THE CORRECT ENTRY POINT.
        $MODCHK NAME=XRTRNAME,TEST=(VERSION,RMODE24,EXITPTS,           X
               EXITRTNS,MIT)
         NI    LMTFLG2,X'FF'-LMT2PVTR-LMT2CMNR-LMT2LPAR
* TELL THE USERS THAT WE'VE DONW SOMETHING AND EXIT.
X5U001  $CWTO  MSG=MSG501,L=40,MSGID=901
        $CWTO  MSG=MSG502,L=40,MSGID=902
*         SET END OF LINE CONTROL IF L=A OR L=CCA WAS SPECIFIED       *
         CLI   COMUCMA,0           IS THIS A MLWTO...
         BZ    X50012              NO, THEN RETURN NOW WITH RC=12
         MVI   COMLINET,X'10'      OTHERWISE, SET END OF LINE
        $CWTO  MSG=MSG502,L=L'MSG502,MSGID=902  ISSUE NULL MESSAGE
*         RETURN TO MAIN CALLING ROUTINE                              *
X50012   XR    R15,R15             SET ZERO RETURN CODE
        FREEMAIN RC,LV=(R3),A=(R2),SP=X5SP
        $RETURN RC=(R15),TRACE=YES RETURN TO MAIN CALLING ROUTINE
         DROP  R4
         DROP  R9
         DROP  R10
* ERROR ON DELETE - ADD RETURN CODE TO MESSAGE, ISSUE IT AND
* THEN EXIT BACK TO MAINLINE CODE
X5UE01         CVD   R15,X5DWD     STUFF OUT RETCODE
         UNPK  MSG504RC(2),X5DWD(8)  UNPACK TO MESSAGE
         OI    MSG504RC+1,X'F0'      CLEAR SIGN DIGIT
        $CWTO  MSG=MSG504,L=40,MSGID=904
         B     X50012
* ERROR ON LOAD - ADD RETURN CODE TO MESSAGE, ISSUE IT AND
* THEN EXIT BACK TO MAINLINE CODE
X5UE02         CVD   R15,X5DWD     STUFF OUT RETCODE
         UNPK  MSG503RC(2),X5DWD(8)  UNPACK TO MESSAGE
         OI    MSG503RC+1,X'F0'      CLEAR SIGN DIGIT
        $CWTO  MSG=MSG503,L=40,MSGID=903
         B     X50012
* EXIT NUMBER OVER 35. ISSUE MESSAGE AND RETURN TO MAINLINE
X5UE03        $CWTO  MSG=MSG505,L=40,MSGID=905
         B     X50012
* EXIT NOT DEFINED. (IT'S NOT IN THE JES2 STARTUP DECK)
* ISSUE MESSAGE AND RETURN TO MAINLINE CODE.
X5UE04        $CWTO  MSG=MSG506,L=40,MSGID=906
         B     X50012
* ",EXIT=" NOT SPECIFIED
X5UE05  $CWTO  MSG=MSG507,L=40,MSGID=907
         B     X50012
*         BASIC MESSAGE TEXT - COPIED TO WORKING STORAGE LATER        *
SMSG501  DC    CL40'EXIT ?? (????????) CHANGED AND DISABLED.'
SMSG502  DC    CL40'ISSUE $T COMMAND TO ENABLE FOR USE.     '
SMSG503  DC    CL40'ERROR - MODULE LOAD FAILED  RC(..).     '
SMSG504  DC    CL40'ERROR - MODULE DELETE FAILED, RC(..).   '
SMSG505  DC    CL40'INVALID EXIT NUMBER. USE 00 THRU 35.    '
SMSG506  DC    CL40'ERROR - EXIT NOT LOADED BY JES2 LOADMOD.'
SMSG507  DC    CL40'ERROR - COMMAND IS:  $RELOAD,EXIT=NN   .'
         LTORG ,                   EXPAND LITERAL POOL HERE
         DROP  R12
         TITLE 'JES2 EXIT5 - X5RECOVR - PROCESSOR RECOVERY ROUTINE'
***       HASX05A - EXIT 5 RECOVERY ROUTINE                         ***
*         THIS ROUTINE WILL RECOVER FROM PROGRAM                      *
*         CHECKS BY DISCARDING THE COMMAND CURRENTLY                  *
*         BEING PROCESSED AND THEN RETURN TO 'X5RC08'                 *
*         WHERE IT WILL RETURN TO JES2 WITH A CODE 8                  *
*         WHICH WILL CAUSE JES2 TO IGNORE THE COMMAND                 *
*         REGISTERS UPON ENTRY -                                      *
*             R0 - SAME AS AT ABEND                                   *
*             R1 - POINTER TO ERA                                     *
*       R2 - R10 - SAME AS AT ABEND                                   *
*            R11 - POINTER TO HCT                                     *
*            R13 - POINTER TO PCE                                     *
*            R14 - RETURN ADDRESS                                     *
***          R15 - ENTRY ADDRESS                                    ***
X5RECOVR $SAVE TRACE=YES           SAVE CALLERS REGISTERS
         LR    R8,R15              GET ADDRESS OF RECOVERY RTN
         USING X5RECOVR,R8         SET ADDRESSABILITY FOR RTN
         LR    R5,R1               GET ADDRESS OF ERA IN R5
         USING ERA,R5              SET ADDRESSABILITY FOR ERA
         CLC   ERAESRG0,=F'12'     IS THERE A SDWA....
         BE    CPERC               BRANCH IF NO
         L     R3,ERASDWA          GET ADDRESS OF SDWA
         USING SDWA,R3             SET ADDRESSABILITY FOR SDWA
         L     R4,ERAPRE           GET ADDRESS OF PRE
         USING PRE,R4              SET ADDRESSABILITY FOR PRE
*         TEST FOR PROGRAM CHECK  (SDWAPCHK)                          *
         TM    SDWAERRA,SDWAPCHK   TEST FOR PROGRAM CHECK
         BZ    CPERC               BRANCH IF NOT A PROGRAM CHECK
         DROP  R3                  KILL ADDRESSABILITY FOR SDWA
*         END ANY MULTIPLE LINE WTO IN PROGRESS                       *
         TM    COMFLAG,CMBFLAGU    TEST FOR UCMID .(OWN OR OTHER)
         BZ    CSETMSG             BRANCH IF OTHER
         CLI   COMUCMA,0           IS THIS A MLWTO...
         BZ    CSETMSG             BRANCH IF NO
         OI    COMLINET,X'10'      SET END LINE
         SLR   R0,R0               SET NULL MESSAGE LENGTH
         BCTR  R0,0                SET LENGTH TO -1 TO TRUNC MLWTO
        $CWTO  L=(R0)              END ANY MLWTO IN PROGRESS
         MVI   COMUCMA,X'00'       CLEAR UCM AREA TO INSURE CMD        C
                                   TERMINATED MSG IS NOT MLWTO
***       INFORM OPERATOR OF COMMAND THAT WILL BE DISCARDED.        ***
*         'NETWORK COMMAND' WILL BE USED FOR SSI FORMATTED            *
***       COMMANDS.                                                 ***
CSETMSG  MVC   COMMAND(L'CMSGTXT),CMSGTXT   MOVE IN MESSAGE TEXT
         TM    COMINCON,X'80'      TEST FOR SSI FORMATTED COMMAND
         BZ    CPREMSG             BRANCH IF NOT SSI FORMATTED CMD
         MVC   COMMAND+L'CMSGTXT(CCMDLN),CNETCMD MOVE IN FORMATTED     C
                                                     COMMAND TEXT
         B     CMSGTOOP            GO SEND MESSAGE TO OPERATOR
CPREMSG  MVC   COMMAND+L'CMSGTXT(CCMDLN),PRETRACK MOVE IN PORTION      C
                                                      OF COMMAND
         DROP  R4                  KILL ADDRESSABILITY FOR PRE
*         SEND COMMAND TERMINATED MESSAGE TO CONSOLE WHERE THE        *
*         COMMAND ORIGINATED AND ALSO TO THE MAIN CONSOLE             *
CMSGTOOP $CWTO L=CMLENGTH,MSGID=925   SEND MESSAGE TO WHERE            C
                                         COMMAND ORIGINATED
        $WTO   COMMID,CMLENGTH+L'COMMID,JOB=NO,       SEND MSG TO      C
               ROUTE=$MAIN+$ERR,CLASS=$ALWAYS,PRI=$HI MASTER CON
*      $SETRP                                                         *
*         SET UP OPTIONS (RESUME OR PERCOLATE)                        *
*         AND RETURN TO CALLER.                                       *
         L     R14,=A(X5RC08)      R14 => DELETE COMMAND RETURN
        $SETRP RESUME=(R14)        SET RESUMPTION ADDRESS
         B     CRETURN             GO TO RETURN
CPERC   $SETRP PERCOLATE           SET PERCOLATE OPTION
CRETURN $RETURN TRACE=YES          RETURN TO CALLER
         DROP  R5                  KILL ADDRESSABILITY FOR ERA
*         CONSTANTS FOR X5RECOVR PROCESSOR RECOVERY ROUTINE           *
CMSGTXT  DC    C'COMMAND TERMINATED - '   CMD TERMINATED MSG TEXT
CNETCMD  DC    C'NETWORK COMMAND' FOR FORMATTED COMMANDS THIS TEXT     C
                            WILL BE USED INSTEAD OF THE ACTUAL COMMAND
CMLENGTH EQU   L'CMSGTXT+CCMDLN    TOTAL MESSAGE LENGTH
         DROP  R8
         TITLE 'JES2 EXIT5 - COMMAND EDIT CONSTANTS'
*         EXIT 5  CONSTANTS                                           *
CCMDLN   EQU   15                  = LENGTH OF CMD TO BE MOVED
         LTORG ,                   EXPAND LITERAL POOL HERE
X5SP     EQU   0                   SUB-POOL FOR GETMAIN
        $MODEND ,
**  GETMAINED WORK AREA DEFINITION.                            **
X5WORK   DSECT ,
MSG501   DS    CL40                STORAGE FOR MESSAGE 01
MSG501X  EQU   MSG501+5            OFFSET TO EXIT NUMBER IN MESSAGE
MSG501NA EQU   MSG501+9            OFFSET TO EXIT MODULE NAME
MSG502   DS    CL40                STORAGE FOR MESSAGE 02
MSG503   DS    CL40                STORAGE FOR MESSAGE 03
MSG503RC EQU   MSG503+31           OFFSET TO RETURN CODE IN MESSAGE
MSG504   DS    CL40                STORAGE FOR MESSAGE 04
MSG504RC EQU   MSG504+31           OFFSET TO RETURN CODE IN MESSAGE
MSG505   DS    CL40                STORAGE FOR MESSAGE 05
MSG506   DS    CL40                STORAGE FOR MESSAGE 06
MSG507   DS    CL40                STORAGE FOR MESSAGE 07
X5DWD    DS    D                   DOUBLE WORD WORK AREA
X5LEN    EQU   *-X5WORK
         END   ,


Steve Barnett
Senior Technical Consultant
IMI Computing Ltd (UK)                              c Xephon 1991

