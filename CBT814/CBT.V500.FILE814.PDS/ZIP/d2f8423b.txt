Checking that required jobs are running


INTRODUCTION

To check whether important jobs are running on the system, a
visual search of SDSF is required or a D A,L command must
be issued.  To automate this process, the program SYSTASK
has been written to search the system for required jobs and
report if any are missing.


PROGRAM FLOW

The program reads control cards containing the names of the
jobs that require checking.  The system control blocks are
scanned for the required jobs and a report is produced listing
which are available and which are not.

If all the required jobs are found to be running, this is indicated
by the message SYSTASKC being displayed; then the program
ends and the report is printed.

If any required jobs are not found, a non-rollable message,
SYSTASKA, is displayed listing the missing jobs.  Message
SYSTASKB is then displayed asking whether the scan is to be
retried (option R) or the program is to end (option E).  If E is
selected, the program prints the report and ends.  R gives the
operator the time to start the missing jobs.  If R is selected, the
program retries the scan and displays messages SYSTASKA
and SYSTASKB again if the jobs are still not started.  If all the
required jobs are found to be running, message SYSTASKC is
displayed, indicating that all jobs are running; the program
ends; and the report is printed.


CONTROL CARD FORMAT

The control cards contain a list of job names to be checked.
Single or multiple job names may be placed on a control card
up to column 72.  Columns 73 to 80 are ignored.  Job names
must be separated by at least one space.  When all the job
names will not fit on one card, start a new card - a
continuation character is not required.  Comments must be
preceded by an asterisk.  An asterisk in column 1 indicates a
control card containing only comments.  If an invalid control
card is found, message SYSTASKE is issued and the program
abends.


REPORT FORMAT

A double-spaced listing is produced, showing the jobs checked,
whether they were running or not started, and the time, date,
and day.  A note is provided at the end of the report asking for
a signature.

The program produces the following return code:

      Zero         Normal completion.


ABEND CODES

The program produces the following abend codes:

      1000     Getmain error.
      1001     Invalid control card.


MESSAGES

The following messages are produced by the program.

SYSTASKA  JOB NOT STARTED JJJJJJJJ

This non-rollable message is produced for each job checked but
found not to be started.

SYSTASKB  REPLY R TO RETRY OR E TO END

This message is produced after all the jobs have been checked,
and some have been found not to be started.  A reply of 'R'
will cause the program to retry the job check.  A reply of 'E'
will end the program and the report will be produced.

SYSTASKC  ALL REQUIRED JOBS RUNNING

After a successful pass, this message is produced, the program
ends, and the report is produced.

SYSTASKD  GETMAIN ERROR

The program failed to acquired its storage.

SYSTASKE  INVALID CONTROL CARD

An invalid control card has been found in the input deck.


SAMPLE JCL

//JOBCHECK  JOB  (1230,SYS0),'OPS',CLASS=A,MSGCLASS=X
//STEP1   EXEC  PGM=SYSTASK
//STEPLIB   DD  DSN=your.load.library,DISP=SHR
//SYSPRINT  DD  SYSOUT=*
//SYSIN     DD  *
*   CONTROL CARDS FOLLOW
           CICSTEST  MANAGER  RMF
          CICSLIVE  *  MUST CHECK CICS IS UP
   VTAM    DBS
CONSOLE   ALLOCAS  SMF   JES2 TCAS  CATALOG     LLA
/*


DEPENDENCIES

The program has been run on MVS/XA 2.2 and MVS/ESA
3.1.3.  It does not require authorization.


SYSTASK SOURCE CODE

SYSTASK  TITLE 'CHECK RUNNING TASKS  -   SYSTASK'
SYSTASK  CSECT
         B     TSSTART-SYSTASK(R15)      JUMP OVER PROGRAM ID
         DC    C'SYSTASK       &SYSDATE   &SYSTIME'
TSSTART  SAVE  (14,12)
         LA    R12,0(R15)               LOAD BASE R12
         USING SYSTASK,R12
         ST    R13,SAVE+4
         LR    R15,R13                  CHAIN
         LA    R13,SAVE                        SAVE
         ST    R13,8(R15)                           AREAS
         L     R2,=A(GETML)             LOAD GETMAIN LENGTH
         GETMAIN R,LV=(2)
         LTR   R15,R15                  GETMAIN OK
         BZ    TS10                     YES BRANCH
         WTO   'SYSTASKD  GETMAIN ERROR',                              *
               ROUTCDE=(1,2)
         ABEND 1000
TS10     DS    0H
         LA    R10,0(R1)                LOAD STORAGE ADDRESS
         USING GETM,R10                 MAP STORAGE
         MVI   SW,X'00'                 CLEAR SWITCH
         OPEN  (SYSPRINT,(OUTPUT),SYSIN,(INPUT))
         LA    R3,JOBSTORE              ADDRESS JOB STORE
TS20     DS    0H
         GET   SYSIN,CARD
         LA    R15,CARD                 ADDRESS CARD
         LR    R1,R15                   COPY ADDRESS
         LH    R2,=Y(CLEN)              MAX LENGTH
TS30     DS    0H
         BCTR  R2,0                     MACHINE LENGTH
         EX    R2,TRTNB                 SCAN FOR NON BLANK
         BZ    TS20                     END OF CARD IF NOT FOUND
         CLI   0(R1),COMMENT            COMMENTS FOLLOW
         BE    TS20                     YES GET NEXT CARD
         LR    R15,R1                   COPY JOB NAME ADDRESS
         LA    R1,JOBLEN(R1)            PRE-SET END ADDRESS
         TRT   0(JOBLEN,R15),TABB       FIND END OF JOB NAME
         LA    R2,CARD+CLEN             END OF CARD ADDRESS
         CR    R1,R2                    AT END OF CARD
         BNL   TS40                     YES BRANCH
         CLI   0(R1),C' '               SPACE AFTER JOB NAME
         BNE   TS50                     NO INVALID CARD
TS40     DS    0H
         LR    R2,R1                    COPY JOB END ADDRESS
         SR    R2,R15                   JOB NAME LENGTH
         BNP   TS50                     INVALID IF SHORT
         MVC   0(JOBLEN,R3),BLANKS      CLEAR SLOT
         BCTR  R2,0                     MACHINE LENGTH
MVC1     MVC   0(1,R3),0(R15)
         EX    R2,MVC1                  MOVE JOB NAME
         LA    R3,JOBLEN(R3)            NEXT SLOT ADDRESS
         LR    R15,R1                   COPY JOB END ADDRESS
         LA    R2,CARD+CLEN             END OF CARD ADDRESS
         SR    R2,R15                   FIND LENGTH REMAINING
         BP    TS30                     BRANCH IF SOME LEFT
         B     TS20                     GET NEXT CARD
TS50     DS    0H
         WTO   'SYSTASKE  INVALID CONTROL CARD',                       *
               ROUTCDE=(1,2)
         ABEND 1001
TS60     DS    0H
         MVI   0(R3),ENDMARK            SET END OF TABLE
* CHECK IF REQUIRED JOBS ARE RUNNING
TS70     DS    0H
         LA    R3,JOBSTORE              ADDRESS JOBS STORE
         L     R6,=A(REPORT-GETM)       DISPLACEMENT OF REPORT STORE
         LA    R6,0(R6,R10)             ADDRESS REPORT STORE
         MVI   PRINTL,C' '              CLEAR
         MVC   PRINTL+1(L'PRINTL-1),PRINTL     PRINT LINE
         MVC   PR1CHK,CHECKC            MOVE CHECKED CONST
         TIME
         ST    R0,TIME                  STORE TIME
         MVC   PR1TIME,TPAT             MOVE TIME PATTERN
         ED    PR1TIME,TIME             EDIT TIME
         DMY   DOW=YES
         MVC   PR1DATE,0(R1)            MOVE DATE
         MVC   PR1DAY,8(R1)             MOVE DAY OF WEEK
         NI    SW,X'FF'-SNS             TURN OFF JOB NOT STARTED
TS80     DS    0H
         MVC   PR1JOB,0(R3)             MOVE JOB NAME
         BAL   R14,SET31                SET 31 BIT ADDRESSING
         USING PSA,0
         L     R2,FLCCVT                LOAD CVT POINTER
         L     R2,CVTASVT-CVT(R2)       LOAD ASVT POINTER
         LA    R1,ASVTENTY-ASVT(R2)     ADDRESS ASCB ADDRESS SLOTS
         L     R15,ASVTMAXU-ASVT(R2)    LOAD NUMBER OF SLOTS
TS90     DS    0H
         TM    0(R1),X'80'              FREE ENTRY
         BO    TS110                    YES BRANCH
         L     R2,0(R1)                 LOAD ASCB ADDRESS
         CLC   CHKASCB,ASCBASCB-ASCB(R2)   CHECK THAT ASCB IS FOUND
         BNE   TS110                    NO BRANCH
         L     T14,ASCBJBNI-ASCB(R2)    INITIATED PROGRAM JOB NAME ADDR
         LTR   R14,R14                  ANY JOB NAME
         BZ    TS100                    NO BRANCH
         CLC   0(JOBLEN,R14),0(R3)      JOB RUNNING
         BE    TS120                    YES BRANCH
TS100    DS    0H
         L     R14,ASCBJBNS-ASCB(R2)    STARTED TASK JOB NAME ADDRESS
         LTR   R14,R14                  ANY JOB NAME
         BZ    TS110                    NO BRANCH
         CLC   0(JOBLEN,R14),0(R3)      JOB RUNNING
         BE    TS120                    YES BRANCH
TS110    DS    0H
         LA    R1,4(R1)                 NEXT ASCB ADDRESS IN CHAIN
         BCT   R15,TS90                 REPEAT
         BAL   R14,SET24                SET 24 BIT ADDRESSING
         MVC   PR1NS,NOTSTART           MOVE NOT STARTED TO PRINT LINE
         MVC   MSG52J(JOBLEN),0(R3)     JOB NAME TO WTO MESSAGE
         WTO   'SYSTASKA  JOB NOT STARTED XXXXXXXX',                   X
               ROUTCDE=(1,2),DESC=2
MSG52J   EQU   *-14                     JOB NAME IN MESSAGE
         OI    SW,SNS                   IND A JOB NOT STARTED
         B     TS130
TS120    DS    0H
         BAL   R14,SET24                SET 24 BIT ADDRESSING
         MVC   PR1NS,RUNC               MOVE RUNNING MSG TO PRINT LINE
TS130    DS    0H
         MVC   0(L'PRINTL,R6),PRINTL    MOVE PRINT LINE TO STORE
         LA    R6,L'PRINTL(R6)          NEXT PRINT LINE SLOT
         LA    R3,JOBLEN(R3)            NEXT JOB NAME SLOT
         CLI   0(R3),ENDMARK            END OF JOB NAMES
         BNE   TS80                     NO BRANCH
         MVI   0(R6),ENDMARK            SET END OF PRINT LINES
         TM    SW,SNS                   ANY REQUIRED JOBS NOT STARTED
         BZ    TS150                    NO BRANCH
TS140    DS    0H
         XC    ECB,ECB                  CLEAR ECB
         WTOR  'SYSTASKB  REPLY R TO RETRY OR E TO END',               *
               ROUTCDE=(1,2),REPLY,1,ECB
         WAIT  ECB=ECB
         CLI   REPLY,C'R'               RETRY CHECKS
         BE    TS70                     YES BRANCH
         CLI   REPLY,C'E'               END PROGRAM
         BE    TS160                    YES BRANCH
         B     TS140
TS150    DS    0H
         WTO   'SYSTASKC  ALL REQUIRED JOBS RUNNING',                  *
               ROUTCDE=(1,2)
*   PRODUCE REPORT
TS160    DS    0H
         L     R6,=A(REPORT-GETM)       DISPLACEMENT OF REPORT STORE
         LA    R6,0(R6,R10)             ADDRESS REPORT STORE
TS170    DS    0H
         LH    R5,LINECT                LOAD LINE COUNT
         MVI   PCC,C'1'                 SET TO START NEW PAGE
TS180    DS    0H
         CLI   0(R6),ENDMARK            END OF PRINT LINES
         BE    TS190                    YES BRANCH
         MVC   PRINTL,0(R6)             MOVE PRINT LINE
         BAL   R14,PLINE                PRINT LINE
         LA    R6,L'PRINTL(R6)          NEXT PRINT LINE SLOT
         BCT   R5,TS180                 BRANCH IF NOT NEW PAGE
         B     TS170                    NEW PAGE
TS190    DS    0H
         MVC   PRINTL(L'BSIGN),BSIGN    MOVE LAST LINE
         BAL   R14,PLINE                PRINT LINE
         CLOSE (SYSPRINT,,SYSIN)
         L     R2,=A(GETML)             LOAD GETMAIN LENGTH
         FREEMAIN R,LV=(2),A=(10)
         L     R13,SAVE+4               RESET SAVE AREA ADDRESS
         RETURN (14,12),RC=0
TRTNB    TRT   0(1,R15),TABNB           EXECUTED TRT
* SUBROUTINE TO PRINT A LINE
PLINE    STM   R14,R1,PSAVE             SAVE REGISTERS
         PUT   SYSPRINT,PCC
         MVI   PCC,C'0'                 SET TO SPACE 2 LINES
         MVI   PRINTL,C' '              CLEAR
         MVC   PRINTL+1(L'PRINTL-1),PRINTL     PRINT LINE
         LM    R14,R1,PSAVE             RELOAD REGISTERS
         BR    R14                      EXIT
PSAVE    DS    4F                       SAVE AREA
* SUBROUTINE TO CHANGE TO 31 BIT ADDRESSING
SET31    LA    R14,0(R14)               CLEAR TOP BIT OF REG 14
         O     R14,=X'80000000'         SET 31 BYTE ADDRESSING BIT
         BSM   0,R14                    RETURN WITH 31 BIT ADDRESSING
* SUBROUTINE TO CHANGE TO 24 BIT ADDRESSING
SET24    LA    R14,0(R14)               CLEAR TOP BIT OF REG 14
         BSM   0,R14                    RETURN WITH 24 BIT ADDRESSING
*  CONSTANTS & EQUATES
SAVE     DS    9D                       SAVE AREA
TABB     DS    256X'00'                 SCAN FOR A BLANK
         ORG   TABB+C' '
         DC    X'FF'
         ORG
TABNB    DC    256X'FF'                 SCAN FOR A NON BLANK
         ORG   TABNB+C' '
         DC    X'00'
         ORG
ECB      DS    F                        ECB
CHKASCB  DC    C'ASCB'                  CHECK FOR ASCB CONTROL BLOCK
BLANKS   DC    CL8' '                   BLANKS
LINECT   DC    H'25'                    LINE COUNT 25 DOUBLE SPACED
TPAT     DC    X'4021207A20207A2020'    TIME EDIT PATTERN
REPLY    DS    CL1                      WTOR REPLY
CHECKC   DC    C'CHECKED'               CHECKED CONSTANT
RUNC     DC    C'       RUNNING     '   RUNNING CONSTANT
NOTSTART DC    C'*** NOT STARTED ***'   NOT STARTED CONSTANT
BSIGN    DC    C'   BOTH SHIFT LEADERS TO SIGN BELOW'
CLEN     EQU   72                       CARD LENGTH
JOBLEN   EQU   8                        LENGTH IF JOB NAME
ENDMARK  EQU   X'FF'                    MARK TABLE END
COMMENT  EQU   C'*'                     COMMENTS ON CARD CHECK
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=TS60
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=81,             *
               RECFM=FBA
*  DSECT OF GETMAINED AREA
GETM     DSECT
CARD     DS    CL80                     CONTROL CARD
TIME     DS    F                        TIME STORE
PCC      DS    CL1                      PRINT CONTROL CHARACTER
PRINTL   DS    CL80                     PRINT LINE
         ORG   PRINTL                   PRINT LINE 1 REDEFINES PRINTL
         DS    CL3
PR1JOB   DS    CL8                      JOB NAME
         DS    CL3
PR1NS    DS    CL(L'NOTSTART)           STATUS CONSTANT
         DS    CL3
PR1CHK   DS    CL(L'CHECKC)             CHECKED CONSTANT
         DS    CL3
PR1TIME  DS    CL(L'TPAT)               TIME
         DS    CL3
PR1DATE  DS    CL8                      DATE
         DS    CL3
PR1DAY   DS    CL9                      DAY
         ORG
SW       DS    XL1                      SWITCH
SNS      EQU   X'80'                    IND A JOB NOT STARTED
         DS    0D
JOBSTORE DS    2001CL(JOBLEN)           ROOM FOR 2000 JOBS + END MARKER
REPORT   DS    4001CL(L'PRINTL)         REPORT STORE MAX 4000 LINES +EM
GETML    EQU   *-GETM                   AREA LENGTH
         IHAPSA
         IHAASCB
         IHAASVT
         CVT   DSECT=YES
         END   SYSTASK


DMY MACRO

DMY returns either today's Julian date or a supplied Julian
date in Gregorian format with the day of the week.

         MACRO
&NAME    DMY   &DATE=,&DOW=NO,&LC=NO
.*   GREGORIAN DATE AND DAY OF THE WEEK MACRO.
.*   RETURNS DATE IN THE FORM DD/MM/YY FOLLOWED BY THE DAY OF THE WEEK
.*   ADDRESSED BY REGISTER ONE.
.*   DATE PARAMETER IS OF THE FORM 0CYYDDDS (PACKED JULIAN).
.*   OMITTED DATE PARAMETER RETURNS TODAYS DATE.
.*   INVALID DATE PARAMETER RETURNS 00/00/00 FOLLOWED BY BLANK DAY.
.*   DOW PARAMETER IS NO OR YES FOR DAY OF WEEK.
.*   LC PARAMETER RETURNS THE DAY OF THE WEEK IN EITHER UPPER OR
.*   LOWER CASE.
&NAME    STM   14,0,TS$&SYSNDX          SAVE REGISTERS
         AIF   ('&DATE' EQ '').T2
         LA    1,&DATE                  ADDRESS JULIAN DATE
         L     1,0(1)                   LOAD JULIAN DATE
         ST    1,TW$&SYSNDX             SAVE DATE
         TM    TW$&SYSNDX+3,X'0C'       VALID SIGN
         BNO   TX$&SYSNDX               NO BRANCH
         OI    TW$&SYSNDX+3,X'0F'       SET TO UNSIGNED
         UNPK  TD$&SYSNDX,TW$&SYSNDX    UNPACK DATE
         LA    0,L'TD$&SYSNDX           UNPACKED LENGTH
         LA    15,TD$&SYSNDX            ADDRESS UNPACKED DATE
T0$&SYSNDX CLI 0(15),C'0'               VALID BYTE
         BL    TX$&SYSNDX               NO BRANCH
         CLI   0(15),C'9'               VALID BYTE
         BH    TX$&SYSNDX               NO BRANCH
         LA    15,1(15)                 NEXT BYTE
         BCT   0,T0$&SYSNDX             REPEAT
         AIF   ('&DOW' EQ 'NO').T4
         CP    TW$&SYSNDX,TJ$&SYSNDX    DATE MINIMUM OR ABOVE
         BL    TX$&SYSNDX               NO BRANCH
         AGO   .T4
.T2      TIME
         ST    1,TW$&SYSNDX             SAVE DATE
.T4      MVC   TT$&SYSNDX+2(2),TN$&SYSNDX    SET DAYS IN FEBRUARY
         XC    TD$&SYSNDX,TD$&SYSNDX    CLEAR WORK AREA
         STCM  1,3,TD$&SYSNDX+6         STORE DAYS
         CVB   15,TD$&SYSNDX            BINARY DAYS
         STCM  1,4,TD$&SYSNDX           STORE YEAR
         UNPK  TD$&SYSNDX+2(3),TD$&SYSNDX.(2)  UNPACK YEAR
         MVC   TR$&SYSNDX+6(2),TD$&SYSNDX+2    SAVE YEAR
         PACK  TD$&SYSNDX,TR$&SYSNDX+6(2)    PACK YEAR
         CVB   1,TD$&SYSNDX             BINARY YEAR
         XR    0,0
         D     0,TC$&SYSNDX             DIVIDE BY LEAP YEAR CONST
         LTR   0,0                      IS THIS A LEAP YEAR
         BNZ   T2$&SYSNDX               NO BRANCH
         MVC   TT$&SYSNDX+2(2),TF$&SYSNDX  SET TO LEAP YEAR
T2$&SYSNDX LA  1,TT$&SYSNDX             ADDRESS DAYS PER MONTH TABLE
T4$&SYSNDX CH  15,0(1)                  THIS MONTH
         BNH   T6$&SYSNDX               YES BRANCH
         SH    15,0(1)                  SUBTRACT DAYS FOR THIS MONTH
         LA    1,2(1)                   NEXT MONTH
         B     T4$&SYSNDX               REPEAT
T6$&SYSNDX LA  0,TT$&SYSNDX             TABLE START
         SR    1,0                      MONTHS USED
         SRL   1,1                      /2
         LA    1,1(1)                   FIND MONTH
         CVD   15,TD$&SYSNDX            DECIMAL DAYS
         OI    TD$&SYSNDX+7,X'0F'       ALTER SIGN
         UNPK  TR$&SYSNDX.(2),TD$&SYSNDX  MOVE DAYS
         CVD   1,TD$&SYSNDX             DECIMAL MONTH
         OI    TD$&SYSNDX+7,X'0F'       ALTER SIGN
         UNPK  TR$&SYSNDX+3(2),TD$&SYSNDX   MOVE MONTH
         AIF   ('&DOW' EQ 'NO').T6
.* FIND DAY OF WEEK,  ORIGIN IS WEDNESDAY 31ST DECEMBER 1980
         ZAP   TD$&SYSNDX,TG$&SYSNDX         MOVE
         MVO   TD$&SYSNDX+5(3),TW$&SYSNDX.(2)       YEAR
         CVB   1,TD$&SYSNDX             BINARY YEAR
         SH    1,TH$&SYSNDX             NUMBER OF YEARS SINCE 1981
         LR    15,1                     COPY NUMBER OF YEARS
         XR    0,0                      CLEAR FOR DIVIDE
         D     0,TC$&SYSNDX             NUMBER OF LEAP YEARS
         AR    15,1                     ADD TO YEARS
         XR    14,14                    REMAINDER = DAY OF THE WEEK FOR
         D     14,TY$&SYSNDX             31ST DECEMBER PREVIOUS YEAR
         ZAP   TD$&SYSNDX,TW$&SYSNDX+2(2) MOVE JULIAN DAY
         CVB   15,TD$&SYSNDX            BINARY JULIAN DAY
         AR    15,14                    ADD CURRENT DAY NO.
         XR    14,14                    CLEAR FOR DIVIDE
         D     14,TY$&SYSNDX            REMAINDER = DAY OF WEEK INDEX
         MH    14,TL$&SYSNDX            FIND TABLE DISPLACEMENT
         LA    14,TB$&SYSNDX.(14)       ADDRESS DAY OF WEEK ENTRY
         MVC   TA$&SYSNDX,0(14)         SAVE DAY OF THE WEEK
.T6      LA    1,TR$&SYSNDX             ADDRESS DATE
         B     TE$&SYSNDX
TD$&SYSNDX DS  D                        WORK AREA
TS$&SYSNDX DS  3F                       SAVE AREA
TW$&SYSNDX DS  F                        STORED JULIAN DATE
         AIF   ('&DOW' EQ 'NO').T62
TY$&SYSNDX DC  F'7'                     DAYS IN A WEEK
.T62     ANOP
TC$&SYSNDX DC  F'4'                     LEAP YEAR CHECK
TT$&SYSNDX DC  H'31,00,31,30,31,30,31,31,30,31,30,31'  DAYS PER MONTH
TN$&SYSNDX DC  H'28'                    NORMAL YEAR
TF$&SYSNDX DC  H'29'                    LEAP YEAR
         AIF   ('&DOW' EQ 'NO').T7
TH$&SYSNDX DC  H'81'                    CONSTANT FOR 1981
TL$&SYSNDX DC  Y(L'TB$&SYSNDX)          LENGTH OF TABLE ENTRY
         AIF   ('&LC' EQ 'NO').T64
TB$&SYSNDX DC  CL9'Wednesday'           DAY OF WEEK TABLE
           DC  CL9'Thursday'
           DC  CL9'Friday'
           DC  CL9'Saturday'
           DC  CL9'Sunday'
           DC  CL9'Monday'
           DC  CL9'Tuesday'
         AGO   .T66
.T64     ANOP
TB$&SYSNDX DC  CL9'WEDNESDAY'           DAY OF WEEK TABLE
           DC  CL9'THURSDAY'
           DC  CL9'FRIDAY'
           DC  CL9'SATURDAY'
           DC  CL9'SUNDAY'
           DC  CL9'MONDAY'
           DC  CL9'TUESDAY'
.T66     ANOP
TG$&SYSNDX DC  P'0'
.T7      ANOP
TR$&SYSNDX DC  C'00/00/00'              RETURNED DATE
         AIF   ('&DOW' EQ 'NO').T72
TA$&SYSNDX DS  CL9                      RETURNED DAY OF WEEK
.T72     ANOP
         AIF ('&DATE' EQ '').T8
         AIF   ('&DOW' EQ 'NO').T73
TJ$&SYSNDX DC  P'81001'                 MINIMUM DATE ALLOWED
.T73     ANOP
TP$&SYSNDX DC  C'00/00/00'              DATE RETURNED IF ERROR
         AIF   ('&DOW' EQ 'NO').T74
           DC  CL9' '                   DAY RETURNED IF IN ERROR
.T74     ANOP
TX$&SYSNDX LA  1,TP$&SYSNDX             ERROR EXIT
.T8      ANOP
TE$&SYSNDX LM  14,0,TS$&SYSNDX          RESET REGISTERS
         MEND


Martin Stallard
Systems Programmer
Land Rover Parts (UK)                         c Land Rover Parts 1991

