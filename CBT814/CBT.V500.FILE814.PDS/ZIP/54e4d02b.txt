Tracking CPU utilization

In any new MVS installation where the systems programmer
has taken some trouble over the SRM members of PARMLIB
and has done some rudimentary tuning, one expects excellent
throughput with no cause for alarm over high CPU utilization.
However, when the daily RMF report starts showing high CPU
usage coupled with long queues of 'In Ready' address spaces,
one needs to start collecting facts and figures to alert
management to the state of affairs.  What constitutes a 'long'
queue will of course depend on whether the system has single
or multiple CPUs and on the number of TSO users.  In a CICS-
dominated single-CPU system, with all development work
being done out of a single address space like ROSCOE or
WILBUR, one wouldn't want to see the 'ready queue' figure
much higher than 1.0.

The program that follows was written to summarize CPU
utilization over a calendar month.  CPU busy percentages and
distribution of ready queue lengths is shown for four busy
hours of each working day, as detailed in the comments
prefacing the code.  Data from weekends and any holidays are
ignored.  The program's input is a monthly SMF tape with
RMF-written records on it, particularly record type 70.
Starting with XA 2.1.7, the figures for 'ready queue' are for
address spaces swapped in and ready to be dispatched, whereas
previously this count had represented all swapped in address
spaces.  In shops using say CMF from Boole and Babbage,
rather than RMF, record types 70 through 79 would be created
by CMF.  However, the macros for mapping these record types
are not in SYS1.MACLIB but in SYS1.RMFMAC01.

The program checks for holidays by reference to a hard coded
internal table.  If one has a suite of similar data reduction
programs, it would be preferable to have the code and data for
holiday checking in a subprogram in order to localize annual
maintenance for table updates.

The program is narrowly focused and makes some assumptions
about the environment:

1      The system is a uniprocessor machine.
2      The RMF interval is 60 minutes synchronized with the
      hour with a sampling frequency of 1 second.
3      Entries in PARMLIB's ERBRMFxx member include:
      -      CPU
      -      CYCLE(1000)
      -      INTERVAL(60M)
      -      SYNC(0M).

The summary report ends with average monthly figures for
prime time CPU utilization and the length of the ready queue,
these being useful for charting longer term trends.  A sample
output page from the report is shown in Figure 1.


RMF70SUM SOURCE CODE

REC70    TITLE '**   PROGRAM SHOWS CPU USAGE FROM RMF''S SMFREC-70  **'
RMF70SUM START 0
*  This program is used to show a summary of CPU usage over a given
*  month.  Program expects a 4-digit PARM input in "MMYY" format.
*  Input file used will be an SMF monthly tape.  Thus if the EXEC
*  statement has PARM=0390, input file will be scanned for all type-70
*  records with dates of March 1990.  (PARM=0401 will cause the search
*  to be for records of April 2001.)
*  Some assumptions and restrictions:
*   -  Input SMF data is from a single CPU system
*   -  Data from weekends and holidays is not used for the report
*   -  Usage and ready queues are shown only for busy periods of
*      9:00-10:00 AM, 10:00-11:00 AM, 2:00-3:00 PM, and 3:00-4:00 PM.
         LCLC  &IDNAME                    For this CSECT's ID tag
         LCLC  &DATE6,&TIME4              For Date & Time of Assembly
&DATE6   SETC  '&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
&TIME4   SETC  '&SYSTIME'(1,2).'&SYSTIME'(4,2)
&IDNAME  SETC  'RMF70SUM/&DATE6/&TIME4'   Put together std. ID
BEGIN    SAVE  (14,12),,&IDNAME
         LR    R12,R15                    Establish R12 as
         USING RMF70SUM,R12                 the Base Register
         LR    R11,R13                    Hold C(R13) in R11 for now
         LA    R13,SAVE18F                Point R13 to our SAVE area
         ST    R13,8(R11)
         ST    R11,SAVE18F+4
         L     R2,0(R1)                   Let's look at PARM input
         LH    R3,0(R2)                   Length of input data into R3
         CH    R3,=H'04'                  Program requires a 4-digit
         BNE   PARMERR1                     'MMYY' value in PARM
         LA    R9,2(R2)                   Point R9 to input MMYY
         BAL   R11,@PARMCK                Edit input, set date range
         LTR   R9,R9                      Was PARM input usable?
         BZ    PARMERR1                   If not, exit
         OPEN  (SMF#FILE,,PRNTFILE,(OUTPUT))
         BAL   R11,@HSKPNG                Set initial values, etc.
*             M A I N L I N E    L O G I C                            *
GET1REC  DS    0H
         GET   SMF#FILE                 Begin scan for SMF
         LR    R10,R1                     record type 70
         USING SMF70HDR,R10             R10 points to common SMF header
         USING SMF70PRO,R8              R8 =  RMF product sectn's base
         USING SMF70CPU,R7              R7 =  Base reg for CPU data sec
         USING SMF70AID,R6              R6 =  Pointer to ASID data sectn
         CLI   SMF70RTY,X'46'           Type-70 record?
         BNE   GET1REC                  If not, read the next record
         BAL   R11,@FILTER              Day and Time criteria
         LTR   R9,R9                    Usable record?
         BZ    GET1REC                  If not, skip this
         BAL   R11,@PUTOUT              Format and print a data line
         B     GET1REC
FILE#END EQU   *                        <===  EODAD for SMF#FILE
         BAL   R11,@SUMMRY              Go print summary figures
         CLOSE (SMF#FILE,,PRNTFILE)
EOJPOINT EQU   *             <=======  Pointed to by EODAD in DCB
         L     R13,SAVE18F+4           Restore entry time value in R13
         LH    R15,RTRNCDE
         RETURN (14,12),,RC=(15)       Pick up return code and exit
SAVE18F  DC    18F'0'        <======   This module's SAVE area
@PARMCK  DS    0H             ----  Edit PARM input, set initial values
         LR    R2,R9                   R9 has addr of PARM data
         LA    R3,4
@PARMCK1 EQU   *                       4-digit input must be numeric
         CLI   0(R2),C'0'
         BL    @PARMCK8                If not numeric, exit
         CLI   0(R2),C'9'
         BH    @PARMCK8
         LA    R2,1(R2)                Will check all 4 digits
         BCT   R3,@PARMCK1
         CLC   0(2,R9),=C'01'          Valid value range for the
         BL    @PARMCK8                  first 2 digits is 01 thru 12
         CLC   0(2,R9),=C'12'          "MM" value > 12 is an error
         BH    @PARMCK8
         MVC   W#YYMMDD(2),2(R9)       Save YY & MM values for
         MVC   W#YYMMDD+2(2),0(R9)       $HOLIDY routine
         MVC   DT#MDY(2),0(R9)
         MVC   DT#MDY+2(2),=C'01'      Use 01 for "DD" value
         MVC   DT#MDY+4(2),2(R9)
         BAL   R2,DTC@JUL              Need corresponding Julian day
         MVC   SM#WRK5(2),DT#MDY+4     2-digit "YY" value
         MVC   SM#WRK5+2(3),DT#JUL
         PACK  BEGN#JDT,SM#WRK5        Starting Julian date
         ZAP   END#JDT,BEGN#JDT
         PACK  SM#DBLW,DT#MDY(2)       Pack 2-digit "MM" value
         CVB   R2,SM#DBLW
         LR    R3,R2                   Hold "MM" value in R3
         BCTR  R2,0                    Compute (MM - 1) in R2
         SLL   R2,1(0)                   and   (MM - 1) * 2
*  R2 now has the indexing value for the 2-byte subfield at MNTHDAYS
         LA    R4,MNTHDAYS(R2)         Day in this month
         CH    R3,=H'02'               Is the month February?
         BNE   @PARMCK3                If not, keep going
         TM    SM#SWBYT,SM#LEAP#       Did DTC@JUL flag a leap year?
         BO    @PARMCK3                If yes, keep going
         SP    END#JDT,=P'1'           Feb's days should be 1 less
@PARMCK3 EQU   *
         AP    END#JDT,0(2,R4)         Add number of days in the month
         SP    END#JDT,=P'1'           Julian date for month's last day
         BCTR  R3,0                    Compute (MM - 1)
         MH    R3,=H'09'                 and   (MM - 1) * L'MNTHNMES
         LA    R2,MNTHNMES(R3)         Point to name of the month
         MVC   C#MNTHID(9),0(R2)
         LA    R2,C#MNTHID+3           Shortest month name is 3 bytes
@PARMCK4 EQU   *
         CLI   0(R2),C' '              Locating display position
         BE    @PARMCK5                  for the 4-digit year value
         LA    R2,1(R2)                    within C#MNTHID
         B     @PARMCK4
@PARMCK5 EQU   *
         MVC   1(2,R2),=C'19'          Probably a 20th century month
         CLI   BEGN#JDT+1,X'87'        Isn't "YY" value > 86?
         BNL   *+10                    If yes, we're are all set
         MVC   1(2,R2),=C'20'          And this program still in use??]
         MVC   3(2,R2),2(R9)           "YY" value from the PARM
         B     @PARMCK9                Now return
@PARMCK8 EQU   *
         SR    R9,R9                   Signal bad input
@PARMCK9 EQU   *
         BR    R11
MNTHNMES DS    0CL108
         DC    CL9'January',CL9'February',CL9'March',CL9'April'
         DC    CL9'May',CL9'June',CL9'July',CL9'August'
         DC    CL9'September',CL9'October',CL9'November',CL9'December'
MNTHDAYS DC    PL2'31,29,31,30,31,30,31,31,30,31,30,31'
DTC@JUL  DS    0H              ----  Date conversion to Julian format
*  This subroutine can be used to obtain a 3-digit Julian date for a
*  given Gregorian date.
*  Input date,  in MMDDYY format:  in a 6-byte field, DT#MDY
*  Output date, in DDD    format:  in a 3-byte unsigned field, DT#JUL
         STM   R2,R5,SM#SVD4R            Save R2 thru R5
         NI    SM#SWBYT,255-SM#LEAP#     Initialize bit to:  "off"
         PACK  SM#DBLW,DT#MDY+4(2)       Let's see if it's
         CVB   R1,SM#DBLW                  a leap year
         N     R1,SM#LPMSK               Are bits 0 and 1 ON?
         BNZ   DTC@JUL2                  C(R1)=0 means a leap year
         OI    SM#SWBYT,SM#LEAP#         It's a leap year
DTC@JUL2 EQU   *
         PACK  SM#DBLW,DT#MDY(2)         Pack 2-digit "MM" value
         CVB   R2,SM#DBLW
         LR    R3,R2                     Save "MM" value in R3
         BCTR  R2,0                      Compute (MM - 1)
         SLL   R2,1(0)                     and   (MM - 1) * 2
*  R2 now has the indexing value for the 2-byte subfield at SM#DAYTB
         LH    R4,SM#DAYTB(R2)           1st-of-the-month Julian day
         PACK  SM#DBLW,DT#MDY+2(2)
         CVB   R1,SM#DBLW                Get "DD" value in R1
         AR    R4,R1                     Get Julian "DDD" in R4
         TM    SM#SWBYT,SM#LEAP#         Is it a leap year?
         BO    DTC@JUL7                  Yes, "DDD" value is good
         CH    R3,=H'02'                 Is date effected by it
         BNH   DTC@JUL7                    being a non-leap year?
         BCTR  R4,0                      Yes, apply correction
DTC@JUL7 EQU   *
         CVD   R4,SM#DBLW
         UNPK  DT#JUL,SM#DBLW+6(2)
         OI    DT#JUL+2,X'F0'
DTC@JUL9 EQU   *
         LM    R2,R5,SM#SVD4R            Restore R2 thru R5
         BR    R2
@HSKPNG  DS    0H              ----  INITIAL HOUSE-KEEPING
         TIME  BIN                    Get date and time for the report
         ST    R0,SM#TIME             Time and Date of
         ST    R1,SM#DATE               running the report
         BAL   R2,SMF@DTE
         MVC   FN#MDY,=XL6'020300010405'
         TR    FN#MDY,SM#DMY           Rearrange 'DDMMYY' as 'MMDDYY'
         BAL   R2,SMF@TME              Get time as HHMM
         MVC   FN#HHMM,SM#HMS
         MVI   PRNTREC,C' '            Initialize the print line
         MVC   PRNTREC+1(132),PRNTREC    with spaces
@HSKPNG9 EQU   *
         BR    R11
SMF@DTE  DS    0H              ----  Reformat SMF Date to DDMMYY
*  This subroutine can be used to convert the contents of a fullword
*  SMF date field to DDMMYY format placed in a 6-byte field.
*  Subroutine expects the SMF date, expressed as X'00YYDDDF', to be
*  in a field called SM#DATE, and places the computed DDMMYY value
*  at SM#DMY.  (Contents of R0 & R1 are not saved across this code).
         STM   R2,R5,SM#SVD4R             Save R2 thru R5
         UNPK  SM#WRK5,SM#DATE            X'00YYDDDF' to C'YYDDD'
         MVC   SM#DMY+4(2),SM#WRK5
         PACK  SM#DBLW,SM#DMY+4(2)        Check whether it's
         CVB   R1,SM#DBLW                   a leap year
         N     R1,SM#LPMSK                Check bits 0 and 1 to be ON
         BNZ   SMF@DTE2                   C(R1)=0 If it's a leap year
         OI    SM#SWBYT,SM#LEAP#          It is a leap year
SMF@DTE2 EQU   *
         ZAP   SM#DBLW,SM#DATE+2(2)       Input data:  X'DDDF'
         CVB   R1,SM#DBLW                 R1 has DDD value now
         TM    SM#SWBYT,SM#LEAP#          A leap year?
         BO    SMF@DTE3                   Yes, table is OK
         CH    R1,SM#DAYTB+4              2nd operand is H'60'
*  60 can be FEB-29 or MAR-01, 59 is always FEB-28
         BL    *+8
         LA    R1,1(R1)                   Make non-leapyear adjustment
SMF@DTE3 EQU   *
         LA    R2,SM#DAYTB
         LA    R3,1                      Initialize MM value as 01
         LA    R4,12                     Maximum MM value
SMF@DTE4 EQU   *
         CH    R1,2(R2)                  2nd operand starts with H'31'
         BNH   SMF@DTE5
         LA    R3,1(R3)                  Increment MM value
         LA    R2,2(R2)                  Next entry in SM#DAYTB
         CR    R3,R4
         BNH   SMF@DTE4
         BCTR  R3,0                      Use Max of 12 in R3
SMF@DTE5 EQU   *
         SH    R1,0(R2)                  Compute DD value
         CVD   R1,SM#DBLW
         UNPK  SM#DMY(2),SM#DBLW+6(2)
         OI    SM#DMY+1,X'F0'
         CVD   R3,SM#DBLW
         UNPK  SM#DMY+2(2),SM#DBLW+6(2)
         OI    SM#DMY+3,X'F0'
SMF@DTE9 EQU   *
         LM    R2,R5,SM#SVD4R            Restore R2 thru R5
         BR    R2
SMF@TME  DS    0H              ----  Reformat SMF Time to HHMMSS
*  This subroutine can be used to convert the contents of a fullword
*  SMF time field to HHMMSS format placed in a 6-byte field.
*  Subroutine expects the SMF time to be in a field called SM#TIME,
*  and places the computed HHMMSS value at SM#HMS.
*  NOTE:  Contents of R0 & R1 are not saved across this code
         STM   R2,R5,SM#SVD4R             Save R2 thru R5
         ICM   R1,B'1111',SM#TIME         TOD in centiseconds
         XR    R0,R0
         LA    R3,100
         DR    R0,R3                      R1 now has TOD in seconds
         XR    R0,R0                      Clear out the remainder
         LA    R3,60
         DR    R0,R3
         CVD   R0,SM#DBLW                 SS value for HHMMSS
         UNPK  SM#DBLW(2),SM#DBLW+6(2)
         OI    SM#DBLW+1,X'F0'
         MVC   SM#HMS+4(2),SM#DBLW
         XR    R0,R0
         DR    R0,R3
         CVD   R0,SM#DBLW                 MM value for HHMMSS
         UNPK  SM#DBLW(2),SM#DBLW+6(2)
         OI    SM#DBLW+1,X'F0'
         MVC   SM#HMS+2(2),SM#DBLW
         CVD   R1,SM#DBLW                 HH value for HHMMSS
         UNPK  SM#DBLW(2),SM#DBLW+6(2)
         OI    SM#DBLW+1,X'F0'
         MVC   SM#HMS(2),SM#DBLW
SMF@TME9 EQU   *
         LM    R2,R5,SM#SVD4R             Restore R2 thru R5
         BR    R2
BEGN#JDT DC    PL4'0'                  Format:  X'00yydddF'
END#JDT  DC    PL4'0'                  Month's highest Julian date
SVD#SMFD DC    PL4'0'                  SMF70DAT value of the last rec
SVD#SM2D DC    PL4'0'                  Last SMF70DAT value processed
SVD#PDT  DC    PL4'0'

This article will be continued next month when we shall be
publishing the remainder of the source code for RMF70SUM.


B S Oberoi
Manager Technical Services
Allendale Insurance (USA)                                           c Xephon 1990

