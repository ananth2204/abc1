Who has my dataset?

It used to be difficult at this shop trying to find out who was
holding an enqueue on a dataset that you wanted to use.  If you
wanted to edit the dataset on TSO, for example, and were
refused, the commonest solution was to submit a batch job with
an IEFBR14 step allocating the dataset and to log on to
OMEGAMON to check the enqueue contentions on screen one.
The problem with OMEGAMON, besides the time it takes
getting in and out, is that it only reports on contention, but if
you're trying to allocate a dataset dynamically (for TSO edit or
browse, for example), the allocation simply fails, and no
enqueue is issued.  (The OMEGAMON LOC command has a
similar function, but it is difficult to use and limited in
function, and most people around here don't know about it
anyway.)

I wrote a simple TSO command processor program to list all
the enqueues on a given resource name (RNAME), regardless
of contention.  TSO users can now quickly find out whether
there are outstanding enqueues or reserves on any resource,
even if there is no contention.  The user supplies a fully or
partially qualified resource name, and the command will
return, for each owner or waiter on an enqueue or reserve, the
user-id, QNAME, RNAME, the type of enqueue (EXC or
SHR), and an asterisk to indicate a user waiting on an enqueue.
For reserves, the command will also return the device name and the VOLSER from the UCB.

For example, the TSO user enters:

GRSQ SYS1.RACF*

and the command returns:

FD99TAP  SHR SYSZRACF SYS1.RACF00 RESV B9B RACF00
YM99TXT  SHR SYSDSN   SYS1.RACF.PDS
YM99TXT  EXC SPFEDIT  SYS1.RACF.PDS                           ICHUTL  <-
YM99TTD  EXC SPFEDIT  SYS1.RACF.INSTALL                       <-
YM99TTD  EXC SYSDSN   SYS1.RACF.INSTALL
YM02D   *SHR SYSDSN   SYS1.RACF.INSTALL

In this example, the command shows that RACF is holding a
reserve for user FD99TAP (probably a log-on or access
attempt), user YM99TXT is editing member ICHUTL on
dataset SYS1.RACF.PDS (the '<-' pointer indicates the end of
the RNAME when it ends with a blank), user YM99TTD is
editing a dataset called SYS1.RACF. INSTALL, while a batch
job, YM02D, waits (indicated by the asterisk) for the resource.

The GRSQ command has become quite popular here, and other
uses have been found for it besides just finding out who's got
your dataset.  When I want to know which of our thirty or so
CICS regions has a certain LOADLIB in its RPL
concatenation, I use GRSQ, and get back a nice list of the
regions holding an enqueue on the dataset.  A 'GRSQ
SYS1.UADS' will show who's logged on to TSO (assuming
you're using UADS and not RACF for TSO account
information).  You can also use GRSQ on the selection line of
the dataset list utility (ISPF option 3.4).


GRSQ SOURCE CODE

         TITLE 'GRSQ: SCAN GRS ENQ/RESERVE QUEUES'
*--------------------------------------------------------------------
*        PURPOSE: SCAN GRS QUEUES TO PROVIDE ENQ INFORMATION FOR
*                 A PARTICULAR RESOURCE OR RESOURCES
*        INVOCATION:  TSO COMMAND PROCESSOR
*        FOR FURTHER INFORMATION ON GQSCAN, SEE:
*        SPL: SYSTEM MACROS & FACILITIES, VOL 1 & VOL 2
*--------------------------------------------------------------------
GRSQ     CSECT
         SAVE  (14,12),,GRSQ:GHI:&SYSDATE
         BALR  R12,0
START    DS    0H
         USING START,R12
         ST    R13,SAVE+4
         LA    R2,SAVE
         ST    R2,8(R13)
         LR    R13,R2           R13 => MY SAVE AREA
         SR    R9,R9
         MVI   REPLY,X'40'
         MVC   REPLY+1(L'REPLY-1),REPLY    MOVE SPACES TO REPLY
         LR    R6,R1             R6  --->  CPPL
         USING CPPL,R6
         LA    R7,IOPLADS
         ST    R7,R7SAVE
         USING IOPL,R7
         L     R11,CPPLUPT      MOVE UPT ADDRESS
         ST    R11,IOPLUPT                      TO IOPL
         LA    R11,ECBADS       MOVE ECB ADDRESS
         ST    R11,IOPLECB                      TO IOPL
         L     R11,CPPLECT      MOVE ECT ADDRESS
         ST    R11,IOPLECT                       TO IOPL
         LR    R1,R7                 PUT ADDR OF IOPL IN R1
         STACK PARM=STAKBLOK,DATASET=*,MF=(E,(1))
*        SEE IF AN RNAME WAS ENTERED WITH THE COMMAND
         L     R2,CPPLCBUF         LOAD POINTER TO COMMAND BUFFER
         USING CBUF,R2
         CLC   CBUFLEN,=XL2'8'
         BNH   REQUEST             NO OPERANDS ENTERED
         LA    R3,COMMAND
         LR    R4,R3
         AH    R4,CBUFLEN
         SH    R4,=H'4'            SUBTRACT LENGTH OF CBUFLEN + CMDOFF
         LA    R3,4(,R3)           POINT PAST COMMAND NAME GRSQ
CMDLOOP  DS    0H
         CLI   0(R3),C' '
         BNE   OPERAND
         LA    R3,1(,R3)
         CR    R3,R4
         BNL   REQUEST             NO OPERAND FOUND
         B     CMDLOOP
OPERAND  DS    0H
         SR    R4,R3               GET OPERAND LENGTH
         LR    R5,R4               LOAD INTO R5 FOR LATER
         BCTR  R4,0                SUBTRACT ONE FOR MOVE
         CLI   0(R3),C''''         DSN ENCLOSED IN TICS?
         BNE   MOVEDSN             NO, MOVE IT IN
         LA    R3,1(,R3)           BUMP PAST TIC MARK
         BCTR  R4,0                SUBTRACT ANOTHER BYTE FOR MOVE
         BCTR  R5,0                SUBTRACT A BYTE FROM LENGTH
MOVEDSN  DS    0H
         EX    R4,MVCOPER          MOVE OPERAND INTO REPLY FIELD
         OC    REPLY,BLANKS                CAPITALIZE
         MVI   ONETIME,C'Y'        INDICATE ONLY ONE TIME THROUGH
         B     GETMAIN             GO GET STORAGE AND PROCESS
MVCOPER  MVC   REPLY(0),0(R3)
*--------------------------------------------------------------------
*        COMMAND NAME ENTERED ALONE. REQUEST RNAME BE ENTERED
*--------------------------------------------------------------------
REQUEST  DS    0H
         BE    RETURN
         LA    R1,TEXTHDR            ADDRESS OF LINE HEADER WORD
         ST    R1,TEXTADDR           SAVED IN OLD
         L     R1,R7SAVE             PUT ADDR OF IOPL IN R1
         PUTGET PARM=PUTGBLK,OUTPUT=(TEXTOLD),                         X
               TERMPUT=(HOLD),MF=(E,(1))
         LTR   R15,R15               COND CODE ZERO ?
         MVC   FUNCTION,=C'PUTGET'
         BNZ   RETBAD                NO, QUIT
         LA    R8,PUTGBLK            LOCATE PGPB
         LA    R8,12(R8)             GO TO FOURTH WORD; ADDR OF REPLY
         L     R8,0(R8)              PUT ADDR OF REPLY IN R8
         MVC   REPLY,4(R8)           PUT REPLY IN REPLY FIELD
         OC    REPLY,BLANKS                CAPITALIZE
         CLC   REPLY(4),=CL4'STOP'         REPLY = STOP ?
         BE    RETQUICK                    YES, END.
         CLI   REPLY,X'40'                 REPLY = BLANKS
         BE    REQUEST                     YES, ASK AGAIN
         LA    R10,L'REPLY                 MAX. REPLY LENGTH
         LA    R9,REPLY                    POINT TO START OF REPLY
         SR    R5,R5                       CLEAR WORK REG.
RPLYLOOP EQU   *
         LA    R5,1(R5)                    BUMP COUNTER BY 1
         CLI   0(R9),X'40'                 REACHED BLANK ?
         BE    OUT                         YES
         LA    R9,1(R9)                    BUMP 1
         BCT   R10,RPLYLOOP                LOOP THROUGH AGAIN
         B     AROUND             DON''T DO THE BCTR
OUT      EQU   *
         BCTR  R5,0                TRUE LENGTH OF ENTERED RNAME
AROUND   EQU   *
GETMAIN  DS    0H
         GETMAIN R,LV=GMLEN
         LR    R3,R1
         LA    R4,REPLY(R5)        POINT TO END OF REPLY
         BCTR  R4,0                BACK UP ONE
         CLI   0(R4),C''''         ENCLOSED IN TICS?
         BNE   CKGENRIC             NO
         MVI   0(R4),C' '          MOVE A BLANK
         BCTR  R5,0                DECREASE LENGTH BY ONE
         BCTR  R4,0                BACK UP TO BEFORE TIC MARK
CKGENRIC DS    0H
         CLI   0(R4),C'*'          GENERIC?
         BNE   SCANLOOP             NO
         BCTR  R5,0                BACK UP TO LAST CHAR OF GENERIC
         OI    GQFLAG2,GENERIC     SET GENERIC INDICATOR IN PARM LIST
SCANLOOP DS    0H
         GQSCAN AREA=((3),GMLEN),                                      X
               SCOPE=ALL,                                              X
               TOKEN=TOKEN,                                            X
               OWNERCT=1,                                              X
               RESNAME=(,DSNAME,(5)),                                  X
               MF=(E,GQSCAN)
         STH   R15,GQSRET
         CH    R15,=H'8'
         MVC   FUNCTION,=CL6'GQSCAN'
         BH    RETBAD
         CH    R15,=H'4'
         BE    RETNONE
*----------------------------------------------------------------------
*        GET POINTERS TO THE RIB AND RIBE
*----------------------------------------------------------------------
         STCM  R0,B'1100',RIBLEN
         STH   R0,RIBELEN
         STH   R1,#RIBS
         LTR   R8,R1
         BZ    RETLOST
         USING RIB,R4
         USING RIBVAR,R5
         USING RIBE,R6
         LR    R4,R3               POINT TO 1ST RIB
RIBLOOP  DS    0H
         STH   R8,#RIBS
         LR    R5,R4
         LR    R6,R5
         AH    R6,RIBVLEN          POINT PAST RIB VARIABLE
*----------------------------------------------------------------------
*        SAVE INFORMATION FROM RIB FIXED PORTION
*----------------------------------------------------------------------
         MVC   QNAME,RIBQNAME
         MVI   RNAME,C' '
         MVC   RNAME+1(L'RNAME-1),RNAME
         SLR   R7,R7
         IC    R7,RIBRNMLN         RNAME LENGTH
         LR    R8,R7
         A     R8,=A(TEXTLEN2)
         STH   R8,TEXTHDR2
         BCTR  R7,0                SUBTRACT ONE FOR MOVE
         EX    R7,MOVERNAM         MOVE RNAME TO HEADER
         LA    R7,RNAME(R7)        POINT TO END OF RNAME
         CLI   0(R7),C' '          IS IT BLANK?
         BNE   CKRESV              NO, NO DELIMITER
         MVC   1(2,R7),=C'<-'        MOVE RNAME DELIMITER
         LH    R8,TEXTHDR2         LOAD TEXT LENGTH
         LA    R8,2(,R8)           ADD ROOM FOR DELIMITER
         STH   R8,TEXTHDR2         STORE NEW TEXT LENGTH
         LA    R7,2(,R7)           POINT PAST DELIMITER
CKRESV   DS    0H
         TM    RIBERFLG,RIBERESV   RESERVE IN EFFECT?
         BNO   RIBERTN              NO
         MVC   RESV,=C'RESV'       INDICATE RESERVE
         L     R15,RIBEUCB         R15 -> UCB
         MVC   UNIT,UCBNAME-UCBCMSEG(R15)    GET UNIT NAME
         MVC   VOLSER,UCBVOLI-UCBCMSEG(R15)  GET VOLSER
         MVC   2((TEXTLN2A-1),R7),RESV MOVE RESV IND + UNIT TO TPUT LOC
         LH    R8,TEXTHDR2         LOAD TEXT LENGTH
         LA    R8,TEXTLN2A(,R8)     ADD ROOM FOR RESV IND + UNIT NAME
         STH   R8,TEXTHDR2         STORE NEW TEXT LENGTH
*----------------------------------------------------------------------
*        LOOP THE RIBES TO PULL THE OWNERS AND WAITERS
*----------------------------------------------------------------------
RIBERTN  DS    0H
         ICM   R7,B'1111',RIBNRIBE
         BZ    SCANRLOP
RIBELOOP DS    0H
         MVC   JOBNAME,RIBEJBNM
         MVC   TYPE,=CL8'EXC'
         TM    RIBERFLG,RIBETYPE
         BNO   CKWAIT
         MVC   TYPE,=C'SHR'
CKWAIT   DS    0H
         MVI   WAIT,C' '
         TM    RIBESFLG,RIBESTAT
         BO    PUTLINE
         MVI   WAIT,C'*'
PUTLINE  DS    0H
         ST    R1,R1SAVE
         LA    R1,TEXTHDR2           ADDRESS OF LINE HEADER WORD
         ST    R1,TEXTADDR           SAVED IN OLD
         L     R1,R7SAVE
         PUTLINE PARM=PUTBLOK,OUTPUT=(TEXTOLD),                        X
               TERMPUT=(HOLD),MF=(E,(1))
         L     R1,R1SAVE
         AH    R6,RIBELEN          NEXT RIBE
         BCT   R7,RIBELOOP
SCANRLOP DS    0H
         LR    R4,R6
         LH    R8,#RIBS
         BCT   R8,RIBLOOP
         CLC   GQSRET,=AL4(0)
         BNE   SCANLOOP
         B     REQUEST
RETURN   DS    0H
         FREEMAIN R,LV=GMLEN,A=(3)
RETQUICK DS    0H
         L     R13,4(R13)
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    14
PARMHOLD DC    CL4' '
TESTSCOP TM    RIBSCOPE,X'00'
TESTRFLG TM    RIBERFLG,X'00'
MOVERNAM MVC   RNAME(0),RIBRNAME
RETBAD   DS    0H
         CVXE  BADCODE,((R15))      CONVERT R15 TO EBCDIC
         ST    R1,R1SAVE
         LA    R1,TEXTHDR3           ADDRESS OF LINE HEADER WORD
         ST    R1,TEXTADDR           SAVED IN OLD
         L     R1,R7SAVE
         PUTLINE PARM=PUTBLOK,OUTPUT=(TEXTOLD),                        X
               TERMPUT=(HOLD),MF=(E,(1))
         L     R1,R1SAVE
         LA    R2,8
         ST    R2,RETCODE
         B     RETURN
RETNONE  DS    0H
         ST    R1,R1SAVE
         LA    R1,TEXTHDR4           ADDRESS OF LINE HEADER WORD
         ST    R1,TEXTADDR           SAVE IN OLD
         L     R1,R7SAVE
         PUTLINE PARM=PUTBLOK,OUTPUT=(TEXTOLD),                        X
               TERMPUT=(HOLD),MF=(E,(1))
         L     R1,R1SAVE
         LA    R2,4
         ST    R2,RETCODE
         B     REQUEST
RETLOST  DS    0H
         ST    R1,R1SAVE
         LA    R1,TEXTHDR5           ADDRESS OF LINE HEADER WORD
         ST    R1,TEXTADDR           SAVED IN OLD
         L     R1,R7SAVE
         PUTLINE PARM=PUTBLOK,OUTPUT=(TEXTOLD),                        X
               TERMPUT=(HOLD),MF=(E,(1))
         L     R1,R1SAVE
         LA    R2,4
         ST    R2,RETCODE
         B     REQUEST
REQTYPTB EQU   *
         DC    AL1(RIBETYPE)
         DC    CL4'SHR'
*        DC    AL1(RIBEMC)
*        DC    CL4'MC '
         DC    AL1(RIBERESV)
         DC    CL4'RSV'
*        DC    AL1(RIBERESC)
*        DC    CL4'CVT'
*        DC    AL1(RIBEAUTH)
*        DC    CL4'ATH'
REQT#ENT EQU   (*-REQTYPTB)/5
SCOPETB  EQU   *
         DC    AL1(RIBSYS)
         DC    CL7'SYSTEM'
         DC    AL1(RIBSYSS)
         DC    CL7'SYSTEMS'
         DC    AL1(RIBSTEP)
         DC    CL7'STEP'
SCPT#ENT EQU   (*-SCOPETB)/8
WORKDUBL DS    CL8
RETCODE  DC    A(0)
GQSRET   DC    A(0)
REPLYLEN DC    H'0'
GMLEN    EQU   8192
#RIBS    DC    H'0'
TOKEN    DC    A(0)
RIBLEN   DC    H'0'
RIBELEN  DC    H'0'
ONETIME  DC    C'N'
CVXAREA  DS    CL20                    WORKAREA FOR CVX
         LTORG
BLANKS   DC    CL44' '
PAT1     DC    C'40202120'
R1SAVE   DS    F
R7SAVE   DS    F
SAVE     DC    18F'0'
         DS    0D
WORKAREA DS    CL100
         DS    0F
TEXTHDR  DC    AL2(TEXTLEN-TEXTHDR)  LENGTH OF TEXT INC THIS RDW
         DC    H'0'                  RESERVED
         DC    C' ENTER RESOURCE NAME OR ''STOP'' TO TERMINATE'
TEXTLEN  DS    0F
TEXTHDR2 DC    AL2(0)
         DC    H'0'                  RESERVED
         DC    CL1' '
JOBNAME  DC    CL8' '
WAIT     DC    CL1' '
TYPE     DC    CL3' '
         DC    CL1' '
QNAME    DC    CL8' '
         DC    CL1' '
TEXTEND2 EQU   *
RNAME    DC    CL255' '
         DC    CL1' '
RESV     DC    CL4' '
         DC    CL1' '
UNIT     DC    CL3' '
         DC    CL1' '
VOLSER   DC    CL6' '
TEXTLEN2 EQU   TEXTEND2-TEXTHDR2
TEXTLN2A EQU   *-(TEXTEND2+L'RNAME)
TEXTHDR3 DC    AL2(TEXTLEN3-TEXTHDR3) LENGTH OF TEXT INC THIS RDW
         DC    H'0'                  RESERVED
         DC    C' RETURN CODE FROM '
FUNCTION DC    CL6' '
         DC    C' IS '
BADCODE  DC    CL8' '
TEXTLEN3 DS    0F
TEXTHDR4 DC    AL2(TEXTLEN4-TEXTHDR4) LENGTH OF TEXT INC THIS RDW
         DC    H'0'                  RESERVED
         DC    C' NO RESOURCES MATCH YOUR REQUEST '
REPLY    DC    CL44' '
DSNAME   EQU   REPLY,44
TEXTLEN4 DS    0F
TEXTHDR5 DC    AL2(TEXTLEN5-TEXTHDR5) LENGTH OF TEXT INC THIS RDW
         DC    H'0'                  RESERVED
         DC    C' INFORMATION LOST - INSUFFICIENT STORAGE'
TEXTLEN5 DS    0F
TEXTOLD  DC    F'1'
TEXTADDR DS    F
ECBADS   DS    F
IOPLADS  DC    4F'0'
STAKBLOK STACK  MF=L
PUTBLOK  PUTLINE MF=L
PUTGBLK  PUTGET MF=L
GQSCAN   GQSCAN MF=L
GQFLAG1  EQU   GQSCAN+44
GQFLAG2  EQU   GQSCAN+45
GENERIC  EQU   B'00000100'
         IKJCPPL
CBUF     DSECT                        COMMAND BUFFER
CBUFLEN  DS    H                       LENGTH OF BUFFER
CMDOFF   DS    H                       OFFSET TO COMMAND
COMMAND  DS    C                       COMMAND AS INPUT
         IKJIOPL
         ISGRIB
         IEFUCBOB
         REGS
         END


Steven  St Jean
Systems Programmer
Blue Cross/Blue Shield of the NC area (USA)       c Xephon 1991

