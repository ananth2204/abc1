Virtual storage allocation map

It is often very helpful to be able to get an overall picture of
virtual storage allocation and the following utility provides just
this facility.  An example of the output it produces is shown in
Figure 1.

         TITLE 'VIRTMAP - VIRTUAL STORAGE ALLOCATION'
*** THIS PROGRAM PRODUCES AN OVERALL PICTURE OF VIRTUAL STORAGE ***
*   ALLOCATION. IT HAS RUN SUCCESSFULLY ON XA AND ESA SYSTEMS.    *
*   THE JCL TO EXECUTE THIS PROGRAM IS AS FOLLOWS:                *
*     //STEP01 EXEC PGM=VIRTMAP                                   *
***   //OUTDD  DD SYSOUT=*                                      ***
VIRTMAP  CSECT
VIRTMAP  AMODE  31
VIRTMAP  RMODE  24
         STM    R14,R12,12(R13)   SAVE REGS (EXTERNAL SAVE AREA)
         LR     R12,R15           ENTRY POINT OF THIS PGM
         USING  VIRTMAP,R12       ESTABLISH ADDRESSABILITY
         ST     R13,REGSAVE+4     SAVE EXTERNAL SAVE AREA ->
         LA     R5,REGSAVE        ADDRESS OF MY SAVE AREA
         ST     R5,8(R13)         CHAIN SAVE AREAS
         LR     R13,R5            R13 NOW -> TO MY SAVE AREA
         OPEN   (OUTDD,(OUTPUT))
* A D D R E S S A B I L I T Y   T O   G D A *
         L      R3,CVTPTR         POINTER TO CVT
         USING  CVTMAP,R3         ADDRESSABILITY TO CVT
         L      R10,CVTGDA        ADDRESS OF GDA
         USING  GDA,R10           ADDRESSABILITY TO GDA
* E / P V T - LOW ADDRESS *
EPVT     EQU    *
         L      R5,GDAEPVT          START ADRS OF EPVT
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#EPVT+20(8),EBCDIC MOVE IT TO OUTPUT REC
* E / P V T - HIGH ADDRESS *
         L      R6,GDAEPVTS         E/PVT SIZE
         AR     R5,R6               ADD TO START OF E/PVT
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    T#EPVT+20(8),EBCDIC MOVE IT TO OUTPUT REC
* E / P V T - SIZE *
         LR     R5,R6                ADD TO START OF E/PVT
         BAL    R4,XLATE             GO CONVERT HEX TO EBCDIC
         MVC    EPVTSZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* E / C S A - LOW ADDRESS *
ECSA     EQU    *
         L      R5,GDAECSA          START ADRS OF ECSA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#ECSA+20(8),EBCDIC MOVE IT TO OUTPUT REC
* E / C S A - SIZE *
         L      R6,GDAECSAS          E/CSA SIZE
         BAL    R4,XLATE             GO CONVERT HEX TO EBCDIC
         MVC    ECSASZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* E / C S A - TOTAL AND PERCENTAGE USED *
         L      R6,GDAEFBCF         POINTER TO FIRST FBQE
         LA     R7,GDAEFBCF         ADRS OF POINTER TO 1ST FBQE
         LA     R8,FR#ECSA          ADRESS OUT OUTPUT RECORD
         XR     R9,R9               ECSA TOT FREE SPACE COUNTER
NEXTFBQE EQU    *
         L      R5,8(R6)            SIZE OF FREE BLOCK
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    35(8,R8),EBCDIC     MOVE IT TO OUTPUT RECORD
         AR     R9,R5               ADD TO TOTAL FREE SPACE
         L      R5,12(R6)           ADRS OF FREE BLOCK
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    19(8,R8),EBCDIC     MOVE TO OUTPUT REC
         BAL    R4,WRITEREC         WRITE RECORD TO OUTDD
         CL     R7,0(R6)            NEXT FBQE POINT TO START?
         BE     ECSAFTOT            YES..NO MORE FBQE'S, CALC TOT
         L      R6,0(R6)            NO..ADRS OF NEXT FBQE
         B      NEXTFBQE            ANALYSE THIS ONE
ECSAFTOT EQU    *
         LR     R5,R9               GET TOTAL BACK TO R5
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    TOTAL+35(8),EBCDIC  MOVE TO OUTPUT REC
         L      R9,GDAECSAS         GET SIZE OF E/CSA
         SR     R4,R4               CLEAR
         M      R4,=F'100'          CALC % E/CSA USED
         DR     R4,R9                 "  "   "     "
         BAL    R4,CONVDEV          GO CONVERT TO DECIMAL
         MVC    TOTAL+44(3),DECVAL  MOVE IT TO OUTPUT RECORD
         LA     R8,TOTAL            ADRS OF OUTPUT RECORD
         BAL    R4,WRITEREC         WRITE RECORD TO OUTDD
         LA     R8,BLANK            BLANK RECORD ADRS
         BAL    R4,WRITEREC         WRITE RECORD TO OUTDD
* E / S Q A - LOW ADDRESS *
ESQA     EQU    *
         L      R5,GDAESQA          START ADRS OF ESQA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#ESQA+20(8),EBCDIC MOVE IT TO OUTPUT REC
* E / S Q A - HIGH ADDRESS *
         L      R6,GDAESQAS         E/SQA SIZE
         AR     R5,R6               ADD TO START OF E/SQA
         ST     R5,ESQAHIGH         SAVE ESQA HIGH ADDRESS
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    T#ESQA+20(8),EBCDIC MOVE IT TO OUTPUT REC
* E / S Q A - SIZE *
         LR     R5,R6                ADD TO START OF E/SQA
         BAL    R4,XLATE             GO CONVERT HEX TO EBCDIC
         MVC    ESQASZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* S Q A - LOW ADDRESS *
SQA      EQU    *
         L      R5,GDASQA           START ADRS OF SQA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#SQA+20(8),EBCDIC  MOVE IT TO OUTPUT REC
* S Q A - HIGH ADDRESS *
         L      R6,GDASQASZ         SQA SIZE
         AR     R5,R6               ADD TO START OF SQA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    T#SQA+20(8),EBCDIC MOVE IT TO OUTPUT REC
* S Q A - SIZE *
         LR     R5,R6               ADD TO START OF SQA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    SQASZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* C S A - LOW ADDRESS *
CSA      EQU    *
         L      R5,GDACSA           START ADRS OF CSA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#CSA+20(8),EBCDIC  MOVE IT TO OUTPUT REC
* C S A - HIGH ADDRESS *
         L      R6,GDACSASZ         CSA SIZE
         AR     R5,R6               ADD TO START OF CSA
         ST     R5,CSAHIGH          SAVE CSA HIGH ADDRESS
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    T#CSA+20(8),EBCDIC MOVE IT TO OUTPUT REC
* C S A - SIZE *
         LR     R5,R6               ADD TO START OF CSA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    CSASZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* C S A - TOTAL AND PERCENTAGE USED *
         L      R6,GDAFBQCF         POINTER TO FIRST FBQE
         LA     R7,GDAFBQCF         ADRS OF POINTER TO 1ST FBQE
         LA     R8,FR#CSA           ADDRESS OUT OUTPUT RECORD
         XR     R9,R9               CSA TOT FREE SPACE COUNTER
NXTFBQE  EQU    *
         L      R5,8(R6)            SIZE OF FREE BLOCK
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    34(8,R8),EBCDIC     MOVE IT TO OUTPUT RECORD
         AR     R9,R5               ADD TO TOTAL FREE SPACE
         L      R5,12(R6)           ADRS OF FREE BLOCK
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    18(8,R8),EBCDIC     MOVE TO OUTPUT REC
         BAL    WRITEREC            WRITE RECORD TO OUTDD
         CL     R7,0(R6)            NEXT FBQE POINT TO START?
         BE     CSAFTOT             YES..NO MORE FBQE'S, CALC TOT
         L      R6,0(R6)            NO..ADRS OF NEXT FBQE
         B      NXTFBQE             ANALYSE THIS ONE
CSAFTOT  EQU    *
         LR     R5,R9               GET TOTAL BACK TO R5
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    TOTAL+34(8),EBCDIC  MOVE TO OUTPUT REC
         L      R9,GDACSASZ         GET SIZE OF CSA
         SR     R4,R4               CLEAR
         M      R4,=F'100'          CALC % E/CSA USED
         DR     R4,R9                 "  "   "     "
         BAL    R4,CONVDEV          GO CONVERT TO DECIMAL
         MVC    TOTAL+44(3),DECVAL  MOVE IT TO OUTPUT RECORD
         LA     R8,TOTAL            ADRS OF OUTPUT RECORD
         BAL    R4,WRITEREC         WRITE RECORD TO OUTDD
         LA     R8,BLANK            BLANK RECORD ADRS
         BAL    R4,WRITEREC         WRITE RECORD TO OUTDD
* P V T - LOW ADDRESS *
PVT      EQU    *
         L      R5,GDAPVT           START ADRS OF PVT
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    B#PVT+20(8),EBCDIC  MOVE IT TO OUTPUT REC
* P V T - SIZE *
         L      R5,GDAPVTSZ         SIZE OF PVT
         SL     R5,=F'4096'         SUBTRACT SIZE OF PSA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    PVTSZ+23(8),EBCDIC  MOVE IT TO OUTPUT REC
* E / M L P A  +  E / F L P A  +  E / P L P A  -  SIZE *
         L      R5,GDAECSA        LOW ADRS OF ECSA
         L      R6,ESQAHIGH       GET HIGH ADDRESS OF ESQA
         SR     R5,R6             CALC SIZE OF EMLPA,EFLPA & EPLPA
         BAL    R4,XLATE            GO CONVERT HEX TO EBCDIC
         MVC    ELPASZ+26(8),EBCDIC MOVE IT TO OUTPUT REC
*  M L P A  +  F L P A  +  P L P A  -  SIZE *
         L      R5,GDASQA          START ADRS OF SQA
         L      R6,CSAHIGH         GET HIGH ADDRESS OF ESQA
         SR     R5,R6              CALC SIZE OF MLPA,FLPA & PLPA
         BAL    R4,XLATE           GO CONVERT HEX TO EBCDIC
         MVC    LPASZ+26(8),EBCDIC MOVE IT TO OUTPUT REC
* W R I T E   R E C O R D S   T O   O U T D D *
         LA     R8,RECORDS          ADRS OF OUTPUT RECORDS
         BAL    R4,SET24            CHANGE TO AMODE=24
WRITE    EQU    *
         MVC    OUTREC(80),0(R8)    GET THIS RECORD
         PUT    OUTDD,OUTREC        WRITE IT TO OUTDD
         LA     R8,80(,R8)          POINT TO NEXT RECORD
         CLI    0(R8),X'FF'         ANY MORE RECORDS
         BNE    WRITE               YES..WRITE THEM OUT
* R E T U R N   T O   C A L L E R *
         CLOSE  OUTDD               CLOSE OUTDD
         L      R13,REGSAVE+4       RESTORE R13
         LM     R14,R12,12(R13)     RESTORE REGS
         SR     R15,R15             PLUG RC
         BR     R14                 RETURN TO WHERE YOU CAME FROM
*                    S U B R O U T I N E S                     *
* S W I T C H   T O   A M O D E   =   2 4   S U B R O U T I N E *
SET24    DS     0H
         STM    R4,R5,SAVE45       SAVE CALLERS R4 AND R5
         LA     R5,ADRS24          READY R5 WITH BRANCH ADDRESS
         BASSM  R4,R5              BRANCH. AMODE IS SET TO 24
ADRS24   DS     0H
         LM     R4,R5,SAVE45       RESTORE CALLERS REGS
         BR     R4                 BACK TO CALLER
* S W I T C H   T O   A M O D E   =   3 1   S U B R O U T I N E *
SET31    DS     0H
         STM    R4,R5,SAVE45       SAVE CALLERS R4 AND R5
         LA     R5,ADRS31          READY R5 WITH BRANCH ADDRESS
         ST     R5,FWD             STORE BRANCH ADDRESS
         OI     FWD,X'80'          HIGH ORDER BIT ON
         L      R5,FWD             BRANCH ADRS BACK INTO R5
         BASSM  R4,R5              BRANCH. AMODE IN NOW 31 BIT
ADRS31   DS     0H
         LM     R4,R5,SAVE45       RESTORE CALLERS REGISTERS
         BR     R4                 BACK TO CALLER
SAVE45   DS     2F
* W R I T E   R E C O R D   T O   O U T D D   R O U T I N E *
WRITEREC DS     0H
         ST     R4,FWD                  SAVE CALLERS R4
         BAL    R4,SET24                GO GET INTO AMODE=24
         MVC    OUTREC(80),0(R8)        GET RECORD TO BE WRITTEN
         PUT    OUTDD,OUTREC            WRITE RECORD TO OUTDD
         BAL    R4,SET31                GO GET INTO AMODE=31
         L      FWD                     RESTORE CALLERS R4
         BR     R4                      RETURN TO CALLER
* H E X   T O   E B C D I C   C O N V E R S I O N *
XLATE    DS     0H
         STM    R6,R9,XLATESAV    JUST IN CASE SAVE REGS
         ST     R5,HEXVAL         EXTRACT HEX VALUE
         LA     R6,HEXVAL         -> TO START OF HEX VALUE
         XR     R7,R7             CLEAR
         LA     R8,EBCDIC         -> TO EBCDIC RESULT FLD
         XR     R9,R9             CLEAR HEX CHAR COUNT
XLATE1   DS     0H
         LA     R9,1(,R9)         INC HEX CHAR COUNT
         CL     R9,=F'4'          ALL HEX CHARS READY FOR TR?
         BH     TRANS             YES..DO TRANSLATE
         IC     R7,0(R6)          GET HEX CHARACTER
         SRL    R7,4              LOSE 2ND HALF OF HEX CHAR
         STCM   R7,1,0(R8)        SAVE 1ST HALF HEX CHAR
         LA     R8,1(,R8)         READY TO PLACE NEXT CHAR
         NI     0(R6),X'0F'       LOSE 1ST HALF OF HEX CHAR
         MVC    0(1,R8),0(R6)     SAVE 2ND HALF OF HEX CHAR
         LA     R8,1(,R8)         NO..READY FOR NEXT HEX CHAR
         LA     R6,1(,R6)         POINT TO NEXT HEX CHAR
         B      XLATE1            GET NEXT HEX CHAR READY
TRANS    DS     0H
         TR     EBCDIC(8),TRANSTAB   TRANSLATE TO EBCDIC
         LM     R6,R9,XLATESAV       RESTORE REGS
         BR     R4                   RETURN TO CALLER
HEXVAL   DS     F
EBCDIC   DS     CL8
TRANSTAB DC     CL16'1234567890ABCDEF'
XLATESAV DS     4F
* C O N V E R T   T O   D E C I M A L *
CONVDEC  DS     0H
         CVD    R5,DWD             CONVERT
         OI     DWD+7,X'0F'        CORRECT SIGN
         MVC    EDIT(12),EDITMASK  GET EDIT PATTERN
         EDMK   EDIT(12),DWD+2     EDIT
         MVC    DECVAL(12),0(R1)   EXTRACT SIGNIFICANT CHARS
         BR     R4                 RETURN TO CALLER
DECVAL   DS     CL12
EDIT     DS     CL12
         DS     CL4
EDITMASK DC     XL12'402020202020202020202020'
         LTORG
OUTDD    DCB    DDNAME=OUTDD,DSORG=PS,RECFM=FB,MACRF=(PM)
FWD      DS     F
DWD      DS     D
ESQAHIGH DS     F
CSAHIGH  DS     F
OUTREC  DS   CL80
RECORDS EQU  *
T#EPVT  DC  CL80'------------------- XXXXXXXX    ---'
        DC  CL80'                                   |   EXTENDED'
EPVTSZ  DC  CL80'      E/PVT   SIZE HEX XXXXXXXX    |-- PRIVATE'
        DC  CL80'                                   |'
B#EPVT  DC  CL80'------------------- XXXXXXXX    ==='
        DC  CL80'                                   |'
ECSASZ  DC  CL80'      E/CSA   SIZE HEX XXXXXXXX    |'
        DC  CL80'                                   |'
B#ECSA  DC  CL80'------------------- XXXXXXXX       |'
        DC  CL80'      E/MLPA  / \                  |'
        DC  CL80'-------------  |                   |'
ELPASZ  DC  CL80'      E/FLPA   |-SIZE HEX XXXXXXXX |   EXTENDED'
        DC  CL80'-------------  |                   |--  COMMON'
        DC  CL80'      E/PLPA  \ /                  |'
T#ESQA  DC  CL80'------------------- XXXXXXXX       |'
        DC  CL80'                                   |'
ESQASZ  DC  CL80'      E/SQA   SIZE HEX XXXXXXXX    |'
        DC  CL80'                                   |'
B#ESQA  DC  CL80'=================== XXXXXXXX       |'
        DC  CL80'  ** E/NUC **                      |'
        DC  CL80'------------------------- 16MB    =''
        DC  CL80'  ** NUC **                        |'
T#SQA   DC  CL80'=================== XXXXXXXX       |'
        DC  CL80'                                   |'
SQASZ   DC  CL80'      SQA     SIZE HEX XXXXXXXX    |'
        DC  CL80'                                   |'
B#SQA   DC  CL80'------------------- XXXXXXXX       |'
        DC  CL80'      PLPA    / \                  |'
        DC  CL80'-------------  |                   |-- COMMON'
LPASZ   DC  CL80'      FLPA     |-SIZE HEX XXXXXXXX |'
        DC  CL80'-------------  |                   |'
        DC  CL80'      MLPA    \ /                  |'
T#CSA   DC  CL80'------------------- XXXXXXXX       |'
        DC  CL80'                                   |'
CSASZ   DC  CL80'      CSA     SIZE HEX XXXXXXXX    |'
        DC  CL80'                                   |'
B#CSA   DC  CL80'------------------- XXXXXXXX    === '
        DC  CL80'                                   |'
PVTSZ   DC  CL80'      PVT     SIZE HEX XXXXXXXX    |-- PRIVATE'
        DC  CL80'                                   |'
        DC  CL80'------------------- 00001000    === '
        DC  CL80'      PSA                          |-- COMMON'
B#PVT   DC  CL80'------------------- XXXXXXXX    === '
        DC  XL1'FF'
FR#ECSA  DC  CL80'E/CSA FREE = ADRS =XXXXXXXX SIZE = XXXXXXXX'
FR#ECS   DC  CL80'  CSA FREE = ADRS =XXXXXXXX SIZE = XXXXXXXX'
TOTAL    DC  CL80'                           TOTAL = XXXXXXXX XXX% FREE'
REGSAVE  DS     18F
         REGS
         IHAGDA
         CVT DSECT=YES
         END    VIRTMAP


Dieter Appelhans
Consultant Systems Programmer
Sysdisc Ltd (UK)                                          c Dieter Appelhans 1991

