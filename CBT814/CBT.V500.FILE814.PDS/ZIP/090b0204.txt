Accessing cross-memory storage in REXX

TSO/REXX provides a very useful function called STORAGE,
which allows the retrieval of virtual storage from your own
address space. However, it does not allow access to the virtual
storage of other address spaces. The command XTSOMEM
shown below can be called from a REXX to access the storage of
another address space.

This can be useful for developing in-house debugging EXECs to
show control blocks or for many other purposes. It should be
noted that only non-swappable address spaces may be accessed in
this way although MVS/ESA sites could use Access Register
(AR) mode code to avoid this restriction. A RACF resource
called XTSOMEM in class TSOAUTH is tested to limit the use
of the program to authorized users.

The command, XTSOMEM, is called passing parameters of the
storage address, the length (up to 256 bytes), and the ASID of the
target address space (all in decimal characters). Using REXX
functions to convert between character and decimal makes this
simple enough, after you have perhaps found the appropriate
values from common storage control blocks using the standard
REXX STORAGE function.

An example of how to use it is shown below. This REXX chains
through control blocks to find information from the PCAUTH
address space using both the standard STORAGE function and
the XTSOMEM command.

/* REXX : LXAT - EXAMINE PCAUTH CONTROL BLOCK                        */
/*********************************************************************/
NUMERIC DIGITS 10                        /* ALLOW FOR FULLWORD ADDR  */
ASID  = 2                                /* ASID 2 FOR PCAUTH ASID   */
CVT   = ADDC(16,'00')                    /* FIND CVT                 */
SVT   = ADDC(CVT,'364')                  /* FIND SVT                 */
XMD   = ADDC(SVT,'94')                   /* FIND XMD                 */
LXAT  = C2D(ZSUBMEM(XMD+4,4,ASID))       /* FIND LXAT CROSS-MEMORY   */
HIGH  = C2D(ZSUBMEM(LXAT+4,2,ASID))      /* MAX NUMBER USED          */
SAY 'MAX LXAT' HIGH
EXIT
ADDC:ARG AD1,AD2                         /* CALC ADDRESS FUNCTION    */
RETURN C2D(STORAGE(D2X(AD1+X2D(AD2)),4))
ZSUBMEM:
ARG P1,P2,P3
ADDRESS TSO "XTSOMEM ADR("P1") LEN("P2") ASI("P3")"
RETURN STOREX

XTSOMEM COMMAND

*****************************************************************
*  XTSOMEM - TSO COMMAND PROCESSOR - CALLS XTSOMEM2 INTERNALLY
*  CROSS-MEMORY STORAGE EXTRACT, NOT REENTRANT, AC=1, EP=XTSOMEM
*  MUST RUN AS AN AUTHORIZED TSO COMMAND PROCESSOR (IN IKJTSO00)
*  SYNTAX: XTSOMEM ADR(N) LEN(N) ASI(N)   (N = DECIMAL CHARACTERS)
*  ADR IS THE STORAGE ADDRESS START
*  LEN IS THE STORAGE LENGTH REQUIRED (MAX 256)
*  ASI IS THE ASID OF ADDRESS SPACE, OR 0 FOR THIS ADDR SPACE
*  TARGET ADDR SP MUST BE NON-SWAPPABLE OR ABEND 0D5 WILL RESULT
*  SETS THE VARIABLE STOREX AS THE RETURNED STORAGE CONTENTS
*****************************************************************
XTSOMEM  CSECT
XTSOMEM  AMODE  31
XTSOMEM  RMODE  24
         SPLEVEL SET=2
         STM   R14,R12,12(R13)   SAVE REGISTERS
         LR    R12,R15           ADDRESSABILITY
         USING XTSOMEM,R12       BASE REG
         LR    R2,R1             SAVE PARMS
         L     R0,SIZDATD        R0 = SIZE OF DYNAMIC AREA
         GETMAIN R,LV=(0)        GETMAIN DYNAMIC AREA
         LR    R11,R1            R11 -> DYNAMIC AREA
         USING DATD,R11          ADDRESS DYNAMIC AREA
         ST    R13,SAVEAREA+4    SAVE CALLER'S SAVEAREA ADDRESS
         ST    R11,8(R13)        SAVE SAVEAREA ADDRESS
         LR    R13,R11           SAVE AREA PTR
         MVC   RC,=F'0'          RC DFT ZERO
* TEST APF AUTHORITY OF MODULE
         TESTAUTH FCTN=1         TEST APF
         LTR   R15,R15           RESULT
         BZ    CONT0             OK
         TPUT  =CL40'XTSOMEM01 - NOT APF AUTHORIZED',40
         MVC   RC,=F'1'          RC 1
         B     EXIT              EXIT
* TSO PARM RETRIEVAL VIA CPPL
CONT0    EQU   *
         L     R2,0(R2)          CPPL PARM OF COMMAND BUFFER
         LA    R5,PARM           POINT TO VARIABLE
         LH    R3,0(R2)          LOAD LEN OF BUFFER
         LH    R4,2(R2)          LOAD REL OFF PARM
         LA    R4,4(R4)          LOAD OFFSET OF PARM
         CR    R4,R3             OFF = LEN THEN NO PARM
         BNE   SETPARM           CONTINUE
         TPUT  =CL40'XTSOMEM14 - NO PARM ENTERED',40
         MVC   RC,=F'14'         RC 14
         B     EXIT              LEAVE
SETPARM  EQU   *
         LR    R6,R2             COMMAND BUFFER
         AR    R6,R4             PLUS OFFSET
         MVC   0(1,R5),0(R6)     MOVE ONE BYTE
         LA    R5,1(R5)          UP OFFSET
         LA    R4,1(R4)          UP OFFSET
         CR    R4,R3             OFF = LEN THEN END
         BL    SETPARM           NOT YET
         OC    PARM,BLANKS       UPPER CASE WITH BLANKS
* PARSE PARM TO EXTRACT KEYWORD VALUES
         MVC   FIELD,=CL3'ADR'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   ADR,VALUE         STORE VALUE
         MVC   FIELD,=CL3'LEN'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   LEN,VALUE         STORE VALUE
         MVC   FIELD,=CL3'ASI'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   ASI,VALUE         STORE VALUE
* CONVERT PARMS TO BINARY NUMBERS
         LA    R4,ADR            ADDRESS ADR
         LA    R5,BIN1           ADDRESS BIN1
         BAL   R9,CONVB          CONVERT TO BIN
         LA    R4,LEN            ADDRESS LEN
         LA    R5,BIN2           ADDRESS BIN2
         BAL   R9,CONVB          CONVERT TO BIN
         LA    R4,ASI            ADDRESS ASI
         LA    R5,BIN3           ADDRESS BIN2
         BAL   R9,CONVB          CONVERT TO BIN
* ACCESS STORAGE FOR THIS ADDRESS SPACE IF ASI = 0
         CLC   BIN3,=F'0'        THIS ADDR SPACE
         BNE   XMEM              NO, CROSS-MEMORY
         L     R4,BIN1           ADDR OF STORAGE
         L     R5,BIN2           LEN
         ST    R5,STRXL          SAVE LENGTH OF RETURN AREA
* STORE RESULT IN STOREX
         BCTR  R5,0              DOWN FOR EX
         EX    R5,MOVES          MOVE TO STOREX
         B     TSOUPD            LEAVE
* ACCESS STORAGE FOR ANOTHER ADDRESS SPACE WITH XTSOMEM2
XMEM     EQU   *
         LA    R2,STOREX         RECEIVER ADDR
         L     R3,BIN1           ADDR
         L     R4,BIN2           LEN
         L     R5,BIN3           ASID
         CALL  XTSOMEM2,((2),(3),(4),(5))
         L     R5,BIN2           LEN
         ST    R5,STRXL          SAVE LENGTH OF RETURN AREA
* STORE RESULT IN TSO VARIABLE
         B     TSOUPD            LEAVE
MOVES    MVC   STOREX(0),0(R4)   MOVE STORAGE
* CONVERT 1-10 DIGIT CHARACTER   NUMBER TO BINARY
CONVB    EQU   *
         MVC   PICTURE,=CL10'0000000000'  FIELD WITH ZEROS
         LA    R1,PICTURE+9      ADDRESS END PICTURE FIELD
         LA    R2,9(R4)          ADDRESS END PARM FIELD
         LA    R6,10             LENGTH OF FIELD
RLOOP1   EQU   *
         CLI   0(R2),C' '        IS THERE A CHAR HERE
         BE    RNEXT             NO, SKIP TO NEXT
         CLI   0(R2),C'0'        LESS THAN 0
         BL    PARMBAD           BAD
         CLI   0(R2),C'9'        MORE THAN 9
         BH    PARMBAD           BAD
         MVC   0(1,R1),0(R2)     MOVE IT TO PICTURE FIELD
         BCTR  R1,0              BACK ONE-BYTE PICTURE FIELD
RNEXT    EQU   *
         BCTR  R2,0              BACK ONE-BYTE PARM FIELD
         BCT   R6,RLOOP1         AND NEXT
* CONVERT LENGTH VALUE INTO BINARY FIELD
         PACK  DECNUM,PICTURE    PACK IT
         CVB   R2,DECNUM         CONVERT TO BIN
         ST    R2,0(R5)          SAVE IT
         BR    R9                RETURN
* ERROR CONDITIONS
NOPARM   EQU   *
         TPUT  =CL40'XTSOMEM01 - NOT ENOUGH PARMS ENTERED',40
         MVC   RC,=F'01'         RC
         B     EXIT              LEAVE
PARMBAD  EQU   *
         TPUT  =CL40'XTSOMEM02 - NON-NUMERIC PARM ENTERED',40
         MVC   RC,=F'02'         RC
         B     EXIT              LEAVE
BADGET   EQU   *
         ST    R15,RC            RC
         TPUT  =CL40'XTSOMEM03 - BAD TSO VARIABLE ACCESS',40
         B     EXIT              LEAVE
* TSO VARIABLE UPDATE STOREX
TSOUPD   EQU   *
         MVC   TOKEN,=F'0'       CLEAR
         L     R15,CVTPTR        GET TSO/E SERVICE ROUTINE
         L     R15,CVTTVT(,R15)  ADDRESS
         L     R15,TSVTVACC-TSVT(,R15)    FROM CVT
         CALL  (15),(ECODE,NAMEA,NLEN,VALUA,STRXL,TOKEN),VL SET
         ST    R15,RC            SAVE RC
* LEAVE PROGRAM
EXIT     EQU   *
         L     R13,SAVEAREA+4    RESTORE R13
         L     R3,RC             RETURN CODE
         L     R0,SIZDATD        R0 = DYNAMIC AREA SIZE
         LR    R1,R11            R1 -> DYNAMIC AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1) FREE DYNAMIC AREA
         LR    R15,R3            RETURN CODE
         L     R14,12(R13)       RESTORE R14
         LM    R0,R12,20(R13)    RESTORE R0 TO R12
         BR    R14               RETURN
* SUBROUTINE R2, PARSE PARM FOR FIELDS REQUIRED
PARSE    EQU   *
         LA    R3,PARM           ADDR PARM
         LA    R4,240            MAX SCAN LEN
SCANP    EQU   *
         CLC   0(4,R3),FIELD     IS IT FIELD NAME PLUS (
         BE    ENDS              YES
         LA    R3,1(R3)          UP PTR IN PARM
         BCT   R4,SCANP          SCAN AGAIN
         TPUT  =CL40'XTSOMEM07 - PARAMETER WAS MISSING',40
         MVC   RC,=F'7'          RC 7
         TPUT  FIELD,3           SAY WHICH
         B     EXIT              OUT
ENDS     EQU   *
         MVC   VALUE,BLANKS      INITIALIZE
         LA    R5,VALUE          VALUE FIELD
         LA    R4,255            MAX VALUE LEN
         LA    R3,4(R3)          SKIP TO DATA IN PARM
MOVEV    EQU   *
         CLC   0(2,R3),=CL2') '  END OF PARM FIELD
         BE    ENDV              YES
         MVC   0(1,R5),0(R3)     MOVE ONE CHAR
         LA    R5,1(R5)          NEXT CHAR IN VALUE
         LA    R3,1(R3)          NEXT CHAR IN PARM
         BCT   R4,MOVEV          LOOK AGAIN
         TPUT  =CL40'XTSOMEM08 - DELIMITER IS MISSING',40
         MVC   RC,=F'8'          RC 8
         TPUT  FIELD,3           SAY WHICH
         B     EXIT              OUT
ENDV     EQU   *
         BR    R2
* DATA AREAS                                                     *
         LTORG
DATA     DS    0F
SIZDATD  DC    AL1(0)            DYNAMIC AREA SIZE
         DC    AL3(ENDDATD-DATD)
CVTPTR   EQU   16
CVTTVT   EQU   X'9C'
ECODE    DC    A(TSVEUPDT)       ENTRY CODE FOR VARIABLE UPDATE
TOKEN    DC    F'0'
NLEN     DC    F'6'              LENGTH OF VARIABLE NAME
STRXL    DC    F'0'              LEN OF DATA USED
NAMEA    DC    A(NAME)
VALUA    DC    A(STOREX)
NAME     DC    CL6'STOREX'       VARIABLE NAME SET UP
ADR      DC    CL10' '           ADDR REQUIRED
LEN      DC    CL10' '           LEN REQUIRED
ASI      DC    CL10' '           ASID REQURIED
STOREX   DC    256X'00'          RETURNED STORAGE AREA
FIELD    DC    CL3' '            FIELD NAME
FIELD2   DC    C'('              BRACKET (KEEP AFTER FIELD)
VALUE    DC    CL255' '          VALUE OF FIELD NAME
PARM     DC    CL255' '          PARM AREA
BLANKS   DC    CL255' '          BLANKS
* UNINITIALIZED STORAGE (GETMAINED)
DATD     DSECT                   GETMAINED STORAGE AREA
SAVEAREA DS    18F               SAVE AREA
         DS    0D
DECNUM   DS    PL8               LENGTH IN DECIMAL
RC       DS    F                 PROGRAM RETURN CODE - DEFAULT 0
BIN1     DS    F                 PARM BIN 1
BIN2     DS    F                 PARM BIN 2
BIN3     DS    F                 PARM BIN 3
PICTURE  DS    CL10              PICTURE FIELD
ENDDATD  EQU   *
* DSECTS
         YREGS
         IKJTSVT
         END   XTSOMEM

Subroutine XTSOMEM2

*****************************************************************
*  XTSOMEM2 - TSO PROGRAM TO READ CROSS-MEMORY STORAGE
*  SUBROUTINE OF XTSOMEM (LINKED INTO THE SAME LOAD MODULE)
*  TESTS ACCESS TO RACF CLS TSOAUTH, PROFILE XTSOMEM, BEFORE
*  ALLOWING ACCESS TO ANY CROSS-STORAGE MEMORY. THIS CAN BE
*  CHANGED TO ANOTHER CLASS/NAME BUT SHOULD BE RACLISTED.
*****************************************************************
XTSOMEM2 CSECT
XTSOMEM2 AMODE 31
XTSOMEM2 RMODE 24
         SPLEVEL SET=2
         STM   R14,R12,12(R13)   SAVE REGISTERS
         LR    R12,R15           ADDRESSABILITY
         USING XTSOMEM2,R12      BASE REG
         LM    R2,R5,0(R1)       SAVE PARMS
         L     R0,SIZDATD        R0 = SIZE OF DYNAMIC AREA
         GETMAIN R,LV=(0)        GETMAIN DYNAMIC AREA
         LR    R11,R1            R11 -> DYNAMIC AREA
         USING DATD,R11          ADDRESS DYNAMIC AREA
         ST    R13,SAVEAREA+4    SAVE CALLER'S SAVEAREA ADDRESS
         ST    R11,8(R13)        SAVE SAVEAREA ADDRESS
         LR    R13,R11           SAVE AREA PTR
         MVC   RC,=F'0'          RC DFT ZERO
* ACCESS STORAGE AS X-MEM, REC ADDR, ADDR, LEN, ASID
         ST    R2,RECADDR        REC  ADDR
         ST    R3,STORADDR       STOR ADDR
         ST    R4,LEN            LEN
         ST    R5,ASID           ASID
* TEST READ ACCESS TO RESOURCE TSOAUTH XTSOMEM
OKAPF    EQU   *
         LA    R8,RACW
         RACROUTE REQUEST=AUTH,WORKA=(8),CLASS='TSOAUTH',ENTITY=RES,  XX
               ATTR=READ,LOG=NOSTAT
         C     R15,=F'5'         TEST
         BL    OKALL             < 5 IS OK
         L     R4,RECADDR        RECEIVER
         L     R5,LEN            LENGTH
         BCTR  R5,0              DOWN 1
         EX    R5,MOVEZ          RETURN ZEROS
         B     EXIT              OUT
MOVEZ    MVC   0(0,R4),=256X'00' MOVE ZEROS
* PROCESS REQUEST
OKALL    EQU   *
         MODESET MODE=SUP        SUP
         EPAR  R1                EXTRACT PRIMARY ASID
         ST    R1,PRIMASID       SAVE IT
         LA    R1,1              SET R1
         AXSET AX=(R1)           AUTHORIZE CROSS-MEMORY SERVICES
         SR    R2,R2             STORAGE KEY SEC. A/S USED IN MVCP
         L     R1,ASID           ASID OF TARGET ADDR SP
         SSAR  R1                SET AS SECONDARY A/S
         L     R4,RECADDR        RECEIVER
         L     R5,LEN            LENGTH
         L     R3,STORADDR       ADDR IN TARGET A/S
         MVCP  0(R5,R4),0(R3),R2 TCB ADDRESS FROM ASXB IN ASID
         L     R1,PRIMASID       MY A/S
         SSAR  R1                SET SECONDARY AS PRIMARY
         SR    R1,R1             CLEAR R1
         AXSET AX=(R1)           RESET AUTHORIZATION INDEX
         MODESET MODE=PROB       PROBLEM STATE
* LEAVE PROGRAM
EXIT     EQU   *
         L     R13,SAVEAREA+4    RESTORE R13
         L     R3,RC             RETURN CODE
         L     R0,SIZDATD        R0 = DYNAMIC AREA SIZE
         LR    R1,R11            R1 -> DYNAMIC AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1) FREE DYNAMIC AREA
         LR    R15,R3            RETURN CODE
         L     R14,12(R13)       RESTORE R14
         LM    R0,R12,20(R13)    RESTORE R0 TO R12
         BR    R14               RETURN
* DATA AREAS                                                     *
         LTORG
DATA     DS    0F
SIZDATD  DC    AL1(0)            DYNAMIC AREA SIZE
         DC    AL3(ENDDATD-DATD)
*        CONSTANT DATA AREAS                                     *
BLANKS   DC    CL255' '          BLANKS
RES      DC    CL39'XTSOMEM'     RACF PROFILE TESTED (MAX LENGTH 8)
* UNINITIALIZED STORAGE (GETMAINED)
DATD     DSECT                   GETMAINED STORAGE AREA
SAVEAREA DS    18F               SAVE AREA
RC       DS    F                 PROGRAM RETURN CODE - DEFAULT 0
STORADDR DS    F                 PARM
RECADDR  DS    F                 PARM
LEN      DS    F                 PARM
PRIMASID DS    F                 PARM
ASID     DS    F                 PARM
GOTA     DS    C                 FLAG
RACW     DS    CL512             RACROUTE WORK
ENDDATD  EQU   *
* DSECTS
         YREGS
         END   XTSOMEM2


                                                           c Xephon 1994

