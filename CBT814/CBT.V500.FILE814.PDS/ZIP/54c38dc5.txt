Access to TSO CLIST variables
MVS TSO/E now offers functions to access CLIST variables.  Unfortunately these
routines are relatively complicated to use and can lead to errors if called from
outside the TSO environment.  The following subroutine, CLISTVAR, simplifies the
access from the application program to CLIST variables.
** FUNCTION: This subprogram accesses (fetch or store) a CLIST-Variable
*  CALLING SEQUENCE:
*            CALL CLISTVAR,(function,varname,varlen,vardata),VL
*            <function>: function
*                         CL'1' - fetch
*                         CL'2' - store
*             <varname>: variable-name, delimited with a blank (CLm)
*              <varlen>: length of variable data (FL4)
*             <vardata>: variable-data (XLn)
* RETURN-CODES:
*   0 - ok
*   4 - no CLIST environment
*   8 - CLIST-Variable missing
*  12 - Parameter error
*  16 - CLIST-Variable data invalid
CLISTVAR .....                          initialisation
        LM    R2,R5,0(R1)               A(parmlist)
* R2: A(<function>)
*      CL'1' - fetch
*      CL'2' - store
* R3: A(<varname>), variable-name, delimited with a blank (CLn)
* R4: A(<varlen>), length of variable data (FL4)
* R5: A(<vardata>), variable-data (XLn)
* get environment (TSO/batch)
         MVC   RC,=H'4'                RETURN-CODE: not TSO
         EXTRACT ATSO,'S',FIELDS=(TSO)
         L     R1,ATSO
         TM    0(R1),X'80'             test high-order bit
         BZ    EXIT                    : not TSO
* initialise parameter list
         MVC   RC,=H'0'                RETURN-CODE: ok
         MVI   MFUNC,X'0'              initialise
         MVC   VN,0(R3)                varname
         CLI   0(R2),C'1'              ? fetch
         BNE   NOT_FETCH               : no
         MVC   MFUNC,=C'TSVERETR'      RETRIEVE function
         MVC   ECODE,=A(TSVERETR)
NOT_FETCH DS   0H
         CLI   0(R2),C'2'              ? STORE
         BNE   NOT_STORE               : no
         MVC   MFUNC,=C'TSVEUPDT'      U{PDATE function
         MVC   ECODE,=A(TSVEUPDT)
* R4: A(<varlen>), length of variable data (FL4)
* R5: A(<vardata>), variable-data (XLn)
         MVC   VAL,0(R4)               L(variable-data)
         MVC   VA,0(R5)                variable-data
NOT_STORE DS   0H
         MVC   RC,=H'12'               RETURN-CODE, parameter error
         CLI   MFUNC,X'0'
         BE    EXIT                    :invalid function
* set (length) variable-name
* R3: A(variable-name)
         LA    R0,MAXLEN_VN            MAX_LEN(variable-name)
         LA    R1,VN                   A(variable-name)
VN_LEN   CLI   0(R1),C' '
         BE    VN_END                  end
         LA    R1,1(R1)
         BCT   R0,VN_LEN
* no delimiter found
         MVC   RC,=H'16'               RETURN-CODE, varname error
         B     EXIT                    :variable name too long
VN_END   DS    0H                      end-delimiter found
* R0: residual length
         LA    R1,MAXLEN_VN            MAX_LEN(variable-name)
         SR    R1,R0                   LEN(variable-name)
* R1: L(variable-name)
         ST    R1,VNL
* set (length) variable-data
* perform CLIST-variable function
         BAL   R14,CLIST_VAR
         BAL   R14,TEST_VN             : test RETURN_CODE
         MVC   RC,=H'0'                RETURN_CODE: ok
EXIT     DS    0H                      return
* <RC>: return-code
          ....                         return macro
RC       DC    H'0'                    Return-code
         DS    A                       return address save-area
CLIST_VAR DS   0H
* interface to TSO VARIABLE ACCESS SERVICE ROUTINE
* input:
*     R3: A(variable-name)
*  <VNL>: L(variable-name)
*     R4: A(<varlen>), length of variable data (FL4)
*     R5: A(<vardata>), variable-data (XLn)
* output:
*  dependent on function
         ST    R14,CLIST_VAR-4         save return address
         L     R15,CVTPTR              A(CVT)
         L     R15,CVTTVT(R15)         A(TSVT)
         L     R15,TSVTVACC-TSVT(R15)  A(VARIABLE ACCESS ROUTINE)
* invoke VARIABLE ACCESS SERVICE ROUTINE
         CALL  (15),                                                 X
               (ECODE,                 Entry Code                    X
               VNPTR,                  PTR(variable name)            X
               VNL,                    L(variable name)              X
               VAPTR,                  PTR(data)                     X
               VAL,                    L(data)                       X
               TOKEN),VL               TOKEN (unused)
* R15: RETURN-CODE
         LTR    R15,R15                 ? error
         BNZ    CLIST_VAR_ERR           : yes
* test variable length
         L      R1,VAL                  L(data)
         LTR    R1,R1                   ? Null-data
         BNZ    CLIST^VAR^EXIT          : no, ok
         MVC    RC,=H'8'                RETURN-CODE: no data retrieved
* test function
        CLI    0(R2),C'1'              ? fetch
        BNE    CLIST_VAR_EXIT          : no, exit
        ST     R1,0(R4)                L(data)
        LA     R1,VA                   A(data)
        ST     R1,0(R5)
        B      CLIST_VAR_EXIT          : exit
CLIST_VAR_ERR DS 0H
* error processing
* R15: SERVICE RETURN-CODE
         BAL   R14,CVD
         MVC   MRC,0(R1)               move to <MSG>
         L     R15,FRC                 FUNCTION RETURN-CODE
         BAL   R14,CVD
         MVC   MFRC,0(R1)              move to <MSG>
         L     R15,RSC                 REASON-CODE
         BAL   R14,CVD
         MVC   MRSC,0(R1)              move to <MSG>
         TPUT  MSG,MSGL                display <MSG>
*     R3: A(variable-name)
*  <VNL>: L(variable-name)
         L     R0,VNL                  L(variable name)
         TPUT  (3),(0)                 display
         B     EXIT                    exit
CLIST_VAR_EXIT DS 0H
         L     R14,CLIST_VAR-4         reload return address
         BR    R14                     return
ADDR     DS    0A
ATSO     DS    A
VNPTR    DC    A(VN)
VN       DS    CL32
VNL      DS    F
VAPTR    DC    A(VA)
VA       DS    CL256
VAL      DS    F
* pointers
ECODE    DC    A(TSVEUPDT)             entry code
TOKEN    DC    A(0)                    token (unused)
RSC      DC    F'0'                    REASON-CODE
FRC      DC    F'0'                    FUNCTION RETURN-CODE
* error message
MSG      DS    0C
MFUNC    DS    C'TSVEUPDT'             function
         DC    C' ERROR -'
         DC    C' RC:'
MRC      DS    CL2                     TSR RETURN-CODE
         DC    C' FRC:'
MFRC     DS    CL2                     FUNCTION RETURN-CODE
         DC    C' RSC:'
MRSC     DS    CL2                     REASON-CODE
MSGL     EQU   *-MSG MSG LENGTH
TEST_VN  DS    0H
* test 'CLIST_VAR' RETURN-CODE
* input:
*     R3: A(variable-name)
*  <VNL>: L(variable-name)
*     R4: A(<varlen>), length of variable data (HL4)
*     R5: A(<vardata>), variable-data (XLn)
*   R14: return address
* output:
*  EXIT (if error)
         LTR   R15,R15
         BZR   R14                     : ok
* else retrieval error
         MVC   RC,=H'4'                RETURN-CODE: Variable missing
EXIT_VN  DS    0H
         L     R0,VNL                  L(variable name)
         TPUT  (3),(0)                 display
         L     R0,0(R4)                L(variable name)
         TPUT  (5),(0)                 display
         B     EXIT                    : exit
* CVD: convert to decimal
* input:
*  R15: binary value
* output:
*  R1: A(nn)
CVD      CVD   R15,D
         UNPK  CVDWK,D
         OC    CVDWK,=2C'0'
         LA    R1,CVDWK
         BR    R14                     return
CVDWK    DS    CL2
D        DS    PL8                     double-word
WK       DS    CL10                    edit work-area
         LTORG
         TITLE 'DSECTS'
MAXLEN_VN EQU  32                      MAX_LEN(variable-name)
* System pointers
CVTPTR   EQU   X'010'
CVTTVT   EQU   X'9C'
         IKJTSVT
         END


A Rudd (West Germany)    © A Rudd 1988


























































