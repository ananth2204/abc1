Dynamically adding modules to the LPA

For those of us who aren't fortunate enough to have
OMEGAMON/MVS or the like, the necessity to IPL to change
a single Link Pack Area (LPA) module is a little frustrating.
The following programs can be used to install a module
dynamically at the front of the LPA search queue.

The service module YJP$MSG, which is used to issue
messages, may be of some interest for use in other programs:
this module should be assembled first. After assembling and
link-editing the YJPLPA program to an APF library, the JCL
below is required to execute it. Note that the SYSUT1 library
must also be authorized.

//label     EXEC PGM=YJPLPA,PARM=module
//STEPLIB    DD DISP=SHR,DSN=steplib_library
//SYSUT1     DD DISP=SHR,DSN=library containing module


YJPLPA SOURCE CODE

* FUNC   Dynamically add module to LPA list ***************************
* MACROs $ENTER,$EXIT,$MSG  *******************************************
* RTNS   YJP$MSG  *****************************************************
* ATTRIB AC(1),AMODE(24),RMODE(24) ************************************
YJPLPA   $ENTER ,
         USING CVT,R3              (COMMUNICATIONS VECTOR TABLE)
         USING CDENTRY,R4          (CONTENTS DIRECTORY ENTRY)
         USING XTLST,R6            (EXTENT LIST)
*--------------------------------- PROCESS EXEC PARAMETER ------------*
         SR    R14,R14             CLEAR FOR INSERT
         SR    R15,R15             CLEAR FOR INSERT
         ICM   R14,7,1(R1)         ->EXEC PARAMETER
         BZ    ERROR1              OMITTED
         ICM   R15,3,0(R14)        =EXEC PARAMETER LENGTH
         BZ    ERROR1              OMITTED
         CH    R15,=Y(8)           TRUNCATE IF NECESSARY :-
         BNH   *+8
         LA    R15,8
         BCT   R15,*+10            MOVE TO WORKAREA :-
         MVC   MODNAME(*-*),2(R14)
         EX    R15,*-6
*--------------------------------- CHECK AUTHORIZATION ---------------*
         TESTAUTH FCTN=1
         LTR   R15,R15
         BNZ   ERROR4
*--------------------------------- DETERMINE MODULE LENGTH AND AMODE -*
         LOAD  EPLOC=MODNAME,      LOAD INTO PRIVATE :-                *
               ERRET=ERROR6
         N     R1,=A(X'00FFFFFF')  MASK LENGTH BYTES
         SLL   R1,3                CONVERT LENGTH TO BYTES
         ST    R1,MODLEN           SAVE FOR LATER
         ST    R0,DW               SAVE EP ADDRESS IN WORKAREA
         TM    DW,X'80'            31 BIT?
         BZ    *+8                 (NO )
         OI    FLAG$PGM,$PGM31     (YES)
         DELETE EPLOC=MODNAME      DELETE MODULE FROM PRIVATE
*--------------------------------- BUILD CDE AND EXTENT LIST IN SQA --*
         MODESET MODE=SUP,         GET AUTHORIZED :-                   *
               KEY=ZERO
         LA    R0,LENCDE+LENXTLST  =LENGTH OF CDE AND XTLST
         GETMAIN RC,LV=(0),        GETMAIN SQA :-                      *
               SP=245,LOC=BELOW
         LTR   R15,R15             OK?
         BNZ   ERROR2              (NO )
         LR    R4,R1               ->CDE
         XC    0(LENCDE+LENXTLST,R4),0(R4) CLEAR STORAGE
         LA    R6,LENCDE(,R4)      ->EXTENT LIST
         ST    R6,CDXLMJP          SAVE EXTENT LIST ADDRESS IN CDE
         MVC   CDNAME,MODNAME      ADD MODULE NAME TO CDE
         OI    CDATTR,CDNIP+CDREN+CDSER+CDNLR ADD ATTRIBUTES TO CDE
         OI    CDATTR2,CDXLE
         LA    R5,16               =LENGTH OF EXTENT LIST
         ST    R5,XTLLNTH          SET IN EXTENT LIST
         LA    R5,1                =?
         ST    R5,XTLNRFAC         SET IN EXTENT LIST
         MVI   XTLMSBLA,X'80'      SET ?
         MODESET MODE=PROB,        GET UNAUTHORIZED :-                 *
               KEY=NZERO
*--------------------------------- GETMAIN STORAGE FOR MODULE --------*
         L     R0,MODLEN           =LENGTH OF MODULE
         TM    FLAG$PGM,$PGM31     31 BIT?
         BZ    GETM24              (NO )
         GETMAIN RC,LV=(0),        GETMAIN ABOVE THE LINE :-           *
               SP=228,LOC=(ANY,ANY)
         B     CHECKGET
GETM24   GETMAIN RC,LV=(0),        GETMAIN BELOW THE LINE :-          *
               SP=228,LOC=BELOW
CHECKGET LTR   R15,R15             GETMAIN OK?
         BNZ   ERROR3              (NO )
         STCM  R1,15,MODADDR       SAVE FOR LATER
*--------------------------------- LOAD MODULE INTO CSA --------------*
         MODESET MODE=SUP,         GET AUTHORIZED :-                   *
               KEY=ZERO
         ICM   R8,15,MODADDR       ->GETMAINED AREA IN CSA
         OPEN  (DCB,INPUT)         OPEN DCB FOR LOAD :-
         TM    DCB+DCBOFLGS-IHADCB,X'10'
         BZ    ERROR5
         TM    FLAG$PGM,$PGM31     31 BIT MODE REQUIRED?
         BZ    LOAD                (NO )
         LA    R14,LOAD            (YES)
         O     R14,=A(X'80000000')
         BSM   R0,R14
LOAD     LOAD  EPLOC=MODNAME,      LOAD MODULE TO CSA :-               *
               ADRNAPF=(R8),DCB=DCB,                                   *
               ERRET=ERROR7
         STCM  R0,15,MODEP         SAVE ENTRY POINT
         LA    R14,*+6             SWITCH TO 24 BIT MODE :-
         BSM   R0,R14
         CLOSE DCB
*--------------------------------- UPDATE LPA QUEUE ------------------*
         SETLOCK OBTAIN,           GET LOCAL LOCK :-                   *
               MODE=UNCOND,                                            *
               TYPE=LOCAL,                                             *
               REGS=USE,                                               *
               RELATED=REQUIRED
         SETLOCK OBTAIN,           GET CMS LOCK :-                     *
               MODE=UNCOND,                                            *
               TYPE=CMS,                                               *
               REGS=USE,                                               *
               RELATED=REQUIRED
         L     R3,CVTPTR                 ->CVT
         L     R8,CVTQLPAQ               ->START OF LPA QUEUE
         ICM   R5,15,CDCHAIN-CDENTRY(R8) ->FIRST CDE ON LPAQ
         ST    R4,CDCHAIN-CDENTRY(R8)    OVERWRITE WITH OUR CDE ADDR
         STCM  R5,15,CDCHAIN             CHAIN OLD FIRST CDE FROM OURS
         L     R6,CDXLMJP                ->OUR EXTENT LIST
         ICM   R1,15,MODADDR             ->START OF GETMAINED CSA
         STCM  R1,15,XTLMSBAD            SAVE IN OUR EXTENT LIST
         ICM   R1,15,MODEP               ->MODULE ENTRY POINT
         STCM  R1,15,CDENTPT             SAVE IN OUR CDE
         L     R1,MODLEN                 =LENGTH OF OUR MODULE
         STCM  R1,B'0111',XTLMSBLN       SAVE IN EXTENT LIST
         SETLOCK RELEASE,          RELEASE ALL LOCKS :-                *
               TYPE=ALL,                                               *
               REGS=USE,                                               *
               RELATED=REQUIRED
         MODESET MODE=PROB,        GET UNAUTHORIZED :-                 *
               KEY=NZERO
         SR    R15,R15             SET OK RETURN CODE
*--------------------------------- ISSUE INFORMATION MESSAGES --------*
         $MSG  MSG=10,TYPE=WTO,TABLE=YJP$MSGT,                         *
               FIELDS=(MODNAME,8,CHAR,MODADDR,4,HEX,MODEP,4,HEX)
         ST    R4,DW
         ST    R6,DW+4
         $MSG  MSG=11,TYPE=WTO,TABLE=YJP$MSGT,                         *
               FIELDS=(DW,4,HEX,DW+4,4,HEX)
*--------------------------------- RETURN TO CALLER ------------------*
YJP$EXIT $EXIT RET=(15)
*--------------------------------- PARAMETER OMITTED -----------------*
ERROR1   $MSG  MSG=1,TYPE=WTO,TABLE=YJP$MSGT,                          *
               FIELDS=(DW,4,HEX)
         LA    R15,8
         B     YJP$EXIT
*--------------------------------- GETMAIN FOR SQA FAILED ------------*
ERROR2   ST    R15,DW              SAVE RETURN CODE
         MODESET MODE=PROB,        GET UNAUTHORIZED :-                 *
               KEY=NZERO
         $MSG  MSG=2,TYPE=WTO,TABLE=YJP$MSGT,                          *
               FIELDS=(DW,4,HEX)
         LA    R15,8
         B     YJP$EXIT
*--------------------------------- GETMAIN FOR CSA FAILED ------------*
ERROR3   ST    R15,DW
         $MSG  MSG=3,TYPE=WTO,TABLE=YJP$MSGT,                          *
               FIELDS=(DW,4,HEX)
         LA    R15,12
         B     YJP$EXIT
*--------------------------------- NOT RUNNING AUTHORIZED ------------*
ERROR4   $MSG  MSG=4,TYPE=WTO,TABLE=YJP$MSGT
         LA    R15,16
         B     YJP$EXIT
*--------------------------------- UNABLE TO OPEN SYSUT1 DDNAME ------*
ERROR5   $MSG  MSG=5,TYPE=WTO,TABLE=YJP$MSGT
         LA    R15,20
         B     YJP$EXIT
*--------------------------------- LOAD INTO PRIVATE FAILED ----------*
ERROR6   ST    R1,DW
         ST    R15,DW+4
         $MSG  MSG=6,TYPE=WTO,TABLE=YJP$MSGT,                          *
               FIELDS=(MODNAME,8,CHAR,DW,4,HEX,DW+4,4,HEX)
         LA    R15,24
         B     YJP$EXIT
*--------------------------------- LOAD INTO CSA FAILED --------------*
ERROR7   ST    R1,DW
         ST    R15,DW+4
         MODESET MODE=PROB,        GET UNAUTHORIZED :-                 *
               KEY=NZERO
         $MSG  MSG=7,TYPE=WTO,TABLE=YJP$MSGT,                          *
               FIELDS=(MODNAME,8,CHAR,DW,4,HEX,DW+4,4,HEX)
         LA    R15,24
         B     YJP$EXIT
*--------------------------------- LITERAL POOL ----------------------*
         LTORG ,
*--------------------------------- DATA AREA -------------------------*
DW       DC    D'0'                WORKAREA
MODNAME  DC    CL8' '              MODULE NAME
MODADDR  DC    A(0)                MODULE START ADDRESS IN CSA
MODLEN   DC    A(0)                MODULE LENGTH
MODEP    DC    A(0)                MODULE ENTRY POINT ADDRESS
FLAG$PGM DC    X'00'               PROGRAM FLAGS :
$PGM31   EQU   X'80'                MODULE RESIDES ABOVE THE LINE
DCB      DCB   DDNAME=SYSUT1,      DCB FOR PROGRAM LOAD :-             *
               MACRF=GL,DSORG=PS
*--------------------------------- MAPPING MACROS --------------------*
         CVT   DSECT=YES,LIST=NO   COMMUNICATIONS VECTOR TABLE
         DCBD  DSORG=(PO,PS),DEVD=DA DATA CONTROL BLOCK
         IHACDE                    CONTENTS DIRECTORY ENTRY :-
LENCDE   EQU   *-CDENTRY
         IHAPSA DSECT=YES,LIST=NO  PREFIXED SAVE AREA
         IHAXTLST                  EXTENT LIST
LENXTLST EQU   *-XTLST
*--------------------------------- MESSAGE TABLE ---------------------*
YJP$MSGT CSECT ,
         DC    AL2(1,L'M001)
M001     DC    C'LPA001E EXEC parameter omitted'
         DC    AL2(2,L'M002)
M002     DC    C'LPA002E GETMAIN for SQA failed; RC=X''%'''
         DC    AL2(3,L'M003)
M003     DC    C'LPA003E GETMAIN for CSA failed; RC=X''%'''
         DC    AL2(4,L'M004)
M004     DC    C'LPA004E Program is not running authorized'
         DC    AL2(5,L'M005)
M005     DC    C'LPA005E Unable to OPEN SYSUT1 DDNAME'
         DC    AL2(6,L'M006)
M006     DC    C'LPA006E Unable to LOAD %; ABEND=X''%'' R15=X''%'''
         DC    AL2(7,L'M007)
M007     DC    C'LPA007E Unable to LOAD % into CSA; ABEND=X''%'' R15=X'*
               '%'''
         DC    AL2(10,L'M010)
M010     DC    C'LPA010I Module % LOADed at X''%'' Entry point X''%'''
         DC    AL2(11,L'M011)
M011     DC    C'LPA011I CDE at X''%'' XTLST at X''%'''
         DC    X'FFFFFFFF'
*--------------------------------- END OF PROGRAM --------------------*
         END   ,


YJP$MSG SOURCE CODE

* FUNC   Message format and display routine ***************************
* MACROs DJSRENTR, DJSREXIT *******************************************
* RTNS   None *********************************************************
* ATTRIB RENT,REUSE,REFR,AC(0),AMODE(24),RMODE(24) ********************
*        Savearea chaining                                            *
YJP$MSG  $ENTERR BASE1=12,SVLEN=4096
         USING MSGDSECT,R13        (SAVEAREA)
*        Locate message                                               *
         LR    R2,R1               ->INPUT PARAMETER LIST
         L     R4,0(,R2)           ->MESSAGE TABLE
MSGLOOP2 CLC   10(2,R2),0(R4)      MATCH ON MESSAGE NUMBER?
         BE    MSGSCAN             (YES)
         SR    R1,R1               CLEAR FOR ICM
         ICM   R1,3,2(R4)          LENGTH OF CURRENT MESSAGE
         LA    R4,4(R4,R1)         ->NEXT MESSAGE
         CLC   0(4,R4),MSGHEXFF    END OF TABLE?
         BNE   MSGLOOP2            (NO )-KEEP LOOKING
         B     MSGERR1             (YES)-MESSAGE NOT FOUND
*        Start of message build and substitution                      *
MSGSCAN  LA    R5,4(,R4)           ->START OF TEXT
         SR    R1,R1               CLEAR FOR ICM
         ICM   R1,3,2(R4)          LENGTH OF CURRENT MESSAGE
         LA    R6,0(R1,R5)         ->END OF TEXT
         L     R3,16(,R2)          ->START OF VARIABLE LIST
         LA    R7,MSGBUFR          ->START OF OUTPUT BUFFER
         LA    R8,MSGBUFR+L'MSGBUFR ->END OF OUTPUT BUFFER
         B     *+8
MSGLOOP3 LA    R5,1(,R5)           ->NEXT BYTE OF MESSAGE
         CR    R5,R6               END OF TEXT?
         BE    MSGTPUT             (YES)
         CLC   0(1,R5),13(R2)      SUBSTITUTION CHARACTER?
         BE    MSGCHAR             (YES)
         MVC   0(1,R7),0(R5)       ADD FIXED TEXT TO BUFFER
         LA    R7,1(,R7)           INCREMENT OUTPUT BUFFER POINTER
         B     MSGLOOP3            PROCESS NEXT CHARACTER
*        Format substitution as character data                        *
MSGCHAR  CLI   6(R3),1             CHARACTER DISPLAY?
         BNE   MSGHEX              (NO )
         LH    R15,4(,R3)          LENGTH OF FIELD
         L     R14,0(,R3)          ->FIELD
         LA    R0,0(R7,R15)        ->END OF FIELD
         CR    R0,R8               ROOM FOR FIELD?
         BNL   MSGERR5             (NO )
         BCT   R15,*+10            ADD TO OUTPUT BUFFER :-
         MVC   0(*-*,R7),0(R14)
         EX    R15,*-6
         LA    R7,1(R15,R7)        INCREMENT OUTPUT BUFFER POINTER
         LA    R3,8(,R3)           ->NEXT VARIABLE IN LIST
         B     MSGLOOP3            PROCESS NEXT CHARACTER
*        Format substitution as hexadecimal data                      *
MSGHEX   CLI   6(R3),2             HEXADECIMAL DISPLAY?
         BNE   MSGDEC              (NO )
         LH    R15,4(,R3)          LENGTH OF FIELD
         LA    R0,0(R7,R15)
         AR    R0,R15              ->END OF FIELD
         CR    R0,R8               ROOM FOR FIELD?
         BNL   MSGERR5             (NO )
         L     R14,0(,R3)          ->FIELD
         LA    R3,8(,R3)           ->NEXT VARIABLE IN LIST
         LA    R15,0(R14,R15)      ->END OF FIELD
         B     *+12
MSGLOOP4 LA    R7,2(,R7)           ->NEXT BYTE IN OUTPUT FIELD
         LA    R14,1(,R14)         ->NEXT BYTE IN INPUT FIELD
         CR    R14,R15             END OF INPUT FIELD?
         BE    MSGLOOP3            (YES)
         UNPK  0(3,R7),0(2,R14)    CONVERT TO EBCDIC :-
         TR    0(2,R7),MSGHEXTR
         B     MSGLOOP4            PROCESS NEXT CHARACTER
*        Format substitution as decimal data                          *
MSGDEC   CLI   6(R3),3             DECIMAL DISPLAY?
         BNE   MSGBIN              (NO )
         LH    R15,4(,R3)          LENGTH OF FIELD
         LA    R0,0(R7,R15)        ->END OF FIELD
         CR    R0,R8               ROOM FOR FIELD?
         BNL   MSGERR5             (NO )
         L     R14,0(,R3)          ->FIELD
         LA    R3,8(,R3)           ->NEXT VARIABLE IN LIST
         MVC   MSGWORK,MSGMASK     ADD EDIT MASK
         ED    MSGWORK,0(R14)      FORMAT
         LA    R1,MSGWORK+16       ->END OF WORK FIELD
         SR    R1,R15              ->START OF REQD BIT OF WORK FIELD
         BCT   R15,*+10            ADD TO OUTPUT BUFFER :-
         MVC   0(*-*,R7),0(R1)
         EX    R15,*-6
         LA    R7,1(R15,R7)        INCREMENT OUTPUT BUFFER
         B     MSGLOOP3            PROCESS NEXT BYTE
*        Format substitution as binary data                           *
MSGBIN   CLI   6(R3),4             BINARY FULLWORD DISPLAY?
         BE    MSGBINW             (YES)
         CLI   6(R3),5             BINARY HALFWORD DISPLAY?
         BE    MSGBINH             (YES)
         B     MSGDUMP             TRY OTHER TYPES
MSGBINW  L     R14,0(,R3)          ->FIELD
         L     R0,0(,R14)          =FIELD
         B     *+12
MSGBINH  L     R14,0(,R3)          ->FIELD
         LH    R0,0(,R14)          =FIELD
         CVD   R0,MSGDW            CONVERT TO DECIMAL
         LH    R15,4(,R3)          LENGTH OF FIELD
         LA    R0,0(R7,R15)        ->END OF FIELD
         CR    R0,R8               ROOM FOR FIELD?
         BNL   MSGERR5             (NO )
         LA    R3,8(,R3)           ->NEXT VARIABLE IN LIST
         MVC   MSGWORK,MSGMASK     ADD EDIT MASK
         ED    MSGWORK,MSGDW       FORMAT
         LA    R1,MSGWORK+16       ->END OF WORK FIELD
         SR    R1,R15              ->START OF REQD BIT OF WORK FIELD
         BCT   R15,*+10            ADD TO OUTPUT BUFFER :-
         MVC   0(*-*,R7),0(R1)
         EX    R15,*-6
         LA    R7,1(R15,R7)        INCREMENT OUTPUT BUFFER
         B     MSGLOOP3            PROCESS NEXT BYTE
*        Format substitution as dump data                             *
MSGDUMP  CLI   6(R3),6             DUMP DISPLAY?
         BNE   MSGERR2             (NO )
         LH    R15,4(,R3)          LENGTH OF FIELD
         CH    R15,=Y(16)          TRUNCATE IF NECESSARY :-
         BNH   *+8
         LA    R15,16
         LA    R0,56(,R7)          ->END OF FIELD
         CR    R0,R8               ROOM FOR FIELD?
         BNL   MSGERR5             (NO )
         L     R14,0(,R3)          ->FIELD
         MVI   36(R7),C'*'         ADD CHARACTER TO OUTPUT :-
         BCT   R15,*+10
         MVC   38(*-*,R7),0(R14)
         EX    R15,*-6
         MVI   55(R7),C'*'
         LA    R15,1(R14,R15)      ->END OF FIELD
         MVI   MSGWORK,64          CLEAR WORK FIELD :-
         MVC   MSGWORK+1(L'MSGWORK-1),MSGWORK
         LA    R1,MSGWORK          ->START OF WORK FIELD
         B     *+12
MSGLOOP5 LA    R1,2(,R1)           ->NEXT BYTE IN OUTPUT FIELD
         LA    R14,1(,R14)         ->NEXT BYTE IN INPUT FIELD
         CR    R14,R15             END OF INPUT FIELD?
         BE    MSGDUMP1            (YES)
         UNPK  0(3,R1),0(2,R14)    CONVERT TO EBCDIC :-
         TR    0(2,R1),MSGHEXTR
         B     MSGLOOP5            PROCESS NEXT CHARACTER
MSGDUMP1 MVC   0(8,R7),MSGWORK     ADD TO OUTPUT BUFFER :-
         MVC   9(8,R7),MSGWORK+8
         MVC   18(8,R7),MSGWORK+16
         MVC   27(8,R7),MSGWORK+24
         LA    R7,56(,R7)          INCREMENT OUTPUT BUFFER
         LA    R3,8(,R3)           ->NEXT VARIABLE IN LIST
         B     MSGLOOP3            PROCESS NEXT MESSAGE BYTE
*        Display message using TPUT                                   *
MSPTPUT  CLI   12(R2),1            DISPLAY USING TPUT?
         BNE   MSGWTO              (NO )
         LA    R1,MSGBUFR          ->START OF OUTPUT BUFFER
         SR    R7,R1               =LENGTH OF OUTPUT BUFFER
         LR    R0,R7               MOVE FOR TPUT
         TPUT  (1),(0),R           DISPLAY MESSAGE
         SR    R15,R15             CLEAR RETURN CODE
         B     MSGEXIT             TERMINATE PROGRAM
*        Display message using WTO                                    *
MSGWTO   CLI   12(R2),2            DISPLAY USING WTO?
         BNE   MSGBUF              (NO )
         LA    R1,MSGBUFR          ->START OF OUTPUT BUFFER
         SR    R7,R1               =LENGTH OF OUTPUT BUFFER
         MVC   MSGEXWTO(MSGWTOL),MSGMFWTO RESET WORKAREA
         CH    R7,=Y(120)          TRUNCATE MESSAGE IF NECESSARY :-
         BNH   *+8
         LA    R7,120
         BCT   R7,*+10             ADD MESSAGE TO WORKAREA :-
         MVC   MSGEXWTO+4(*-*),0(R1)
         EX    R7,*-6
         WTO   MF=(E,MSGEXWTO)     ISSUE MESSAGE USING WTO
         SR    R15,R15             CLEAR RETURN CODE
         B     MSGEXIT             TERMINATE PROGRAM
*        Build buffer and return it to caller                         *
MSGBUF   CLI   12(R2),3            RETURN BUFFER TO CALLER?
         BNE   MSGERR3             (NO )
         LA    R8,MSGBUFR          ->START OF OUTPUT BUFFER
         SR    R7,R8               =LENGTH OF OUTPUT BUFFER
         LA    R7,7(,R7)           ROUND UP TO NEAREST DOUBLEWORD :-
         SRL   R7,3
         SLL   R7,3
         STH   R7,8(,R2)           SAVE LENGTH FOR CALLER
         GETMAIN RC,LV=(R7)        GET BUFFER FOR CALLER :-
         LTR   R15,R15             GETMAIN OK?
         BNZ   MSGERR4             (NO )
         ST    R1,4(,R2)           SAVE ADDRESS OF BUFFER FOR CALLER
         BCT   R7,*+10             ADD MESSAGE TO BUFFER :-
         MVC   0(*-*,R1),0(R8)
         EX    R7,*-6
         B     MSGEXIT             TERMINATE PROGRAM
*        Error routines                                               *
MSGERR1  LA    R15,4               SET MESSAGE NOT FOUND CODE
         B     MSGEXIT             TERMINATE PROGRAM
MSGERR2  LA    R15,8               SET FORMAT NOT RECOGNIZED CODE
         B     MSGEXIT             TERMINATE PROGRAM
MSGERR3  LA    R15,12              SET TYPE NOT RECOGNIZED CODE
         B     MSGEXIT             TERMINATE PROGRAM
MSGERR4  LA    R15,16              SET GETMAIN FAILED CODE
         B     MSGEXIT             TERMINATE PROGRAM
MSGERR5  LA    R15,20              SET MESSAGE TOO LONG CODE
         B     MSGEXIT             TERMINATE PROGRAM
*        Set return code and return to caller                         *
MSGEXIT  $EXITR RET=(15)           SET RETURN CODE AND EXIT
*        Literal pool                                                 *
         LTORG ,
*        Constants                                                    *
MSGHEXFF DC    X'FFFFFFFF'
MSGMASK  DC    X'40202020202020202020202020202120'
         DC    C'0123456789ABCDEF'
MSGHEXTR EQU   *-256
MSGMFWTO WTO   '                                                       *
                                                                       *
                       ',ROUTCDE=11,MF=L
*        GETMAINED workarea map                                       *
MSGDSECT DSECT ,
         DS    18F
MSGDW    DS    D
MSGBUFR  DS    CL256
MSGWORK  DS    CL16
MSGEXWTO WTO   '                                                       *
                                                                       *
                       ',ROUTCDE=11,MF=L
MSGWTOL  EQU   *-MSGEXWTO
         END   ,


$MSG MACRO

         MACRO
&LABEL   $MSG  &MSG=,                                                  *
               &EP=,                                                   *
               &TABLE=,                                                *
               &TYPE=,                                                 *
               &CHAR=,                                                 *
               &FIELDS=,                                               *
               &MF=I
.* MACRO for calling YJP$MSG service routine                          *
&WORDS   SETA  5
&J       SETA  1
.DEFLOOP AIF   ('&FIELDS(&J)' EQ '').MF1
&WORDS   SETA  &WORDS+2
&J       SETA  &J+3
         AGO   .DEFLOOP
.MF1     AIF   ('&MF(1)' EQ 'I').MF5
         AIF   ('&MF(1)' EQ 'L').MF2
         AIF   ('&MF(1)' EQ 'E').MF3
         MNOTE 8,'$MSG MACRO - INVALID MF VALUE'
         MEXIT
.MF2     ANOP
&LABEL   DC    &WORDS.F'0'         WORKAREA
         MEXIT
.MF3     AIF   ('&MF(2)' NE '').MF4
         MNOTE 8,'$MSG MACRO - INVALID MF EXECUTE VALUE'
         MEXIT
.MF4     ANOP
&LABEL   IHBINNRA &MF(2)
         LR    R14,R1              ->WORKAREA
         AGO   .MSG
.MF5     ANOP
&LABEL   CNOP  0,4
         BAL   R14,*+4+(&WORDS*4)  ->WORKAREA
         DC    &WORDS.F'0'         WORKAREA
.MSG     AIF   ('&MSG' EQ '').TABLE
         IHBINNRA &MSG
         STH   R1,10(,R14)         SAVE MESSAGE NUMBER
.TABLE   AIF   ('&TABLE' EQ '').TYPE
         L     R1,=V(&TABLE)       ->MESSAGE TABLE
         ST    R1,0(,R14)          SAVE MESSAGE TABLE ADDRESS
.TYPE    AIF   ('&TYPE' EQ '').CHAR
         AIF   ('&TYPE' NE 'TPUT').TYPEWTO
         MVI   12(R14),1           SET DISPLAY TO TPUT
         AGO   .CHAR
.TYPEWTO AIF   ('&TYPE' NE 'WTO').TYPEBUF
         MVI   12(R14),2           SET DISPLAY TO WTO
         AGO   .CHAR
.TYPEBUF AIF   ('&TYPE' NE 'BUFFER').TYPERR
         MVI   12(R14),3           SET DISPLAY TO RETURN BUFFER
         AGO   .CHAR
.TYPERR  MNOTE 8,'$MSG MACRO - INVALID DISPLAY TYPE'
         MEXIT
.CHAR    AIF   ('&CHAR' NE '').CHARSET
         MVI   13(R14),C'%'        SET SUBSTITUTION CHARACTER
         AGO   .VARINIT
.CHARSET ANOP
         MVI   13(R14),C'&CHAR'    SET SUBSTITUTION CHARACTER
.VARINIT ANOP
&I       SETA  1
&ADDR    SETA  20
.VARLOOP AIF   ('&FIELDS(&I)' EQ '').CALL
         IHBINNRA &FIELDS(&I)
         ST    R1,&ADDR.(,R14)     SET VARIABLE ADDRESS
         IHBINNRA &FIELDS(&I+1)
         STH   R1,&ADDR+4(,R14)    SET VARIABLE LENGTH
         AIF   ('&FIELDS(&I+2)' NE 'CHAR').VARHEX
         MVI   &ADDR+6(R14),1      SET VARIABLE TYPE TO CHARACTER
         AGO   .VARNEXT
.VARHEX  AIF   ('&FIELDS(&I+2)' NE 'HEX').VARDEC
         MVI   &ADDR+6(R14),2      SET VARIABLE TYPE TO HEXADECIMAL
         AGO   .VARNEXT
.VARDEC  AIF   ('&FIELDS(&I+2)' NE 'DEC').VARBIN
         MVI   &ADDR+6(R14),3      SET VARIABLE TYPE TO DECIMAL
         AGO   .VARNEXT
.VARBIN  AIF   ('&FIELDS(&I+2)' NE 'BIN').VARBINH
         MVI   &ADDR+6(R14),4      SET VARIABLE TYPE TO BINARY WORD
         AGO   .VARNEXT
.VARBINH AIF   ('&FIELDS(&I+2)' NE 'BINH').VARDUMP
         MVI   &ADDR+6(R14),5      SET VARIABLE TYPE TO BINARY HALF
         AGO   .VARNEXT
.VARDUMP AIF   ('&FIELDS(&I+2)' NE 'DUMP').VARERR
         MVI   &ADDR+6(R14),6      SET VARIABLE TYPE TO HEX DUMP
         AGO   .VARNEXT
.VARERR  MNOTE 8,'$MSG MACRO - UNRECOGNIZED FIELD TYPE'
.VARNEXT ANOP
&I       SETA  &I+3
&ADDR    SETA  &ADDR+8
         AGO   .VARLOOP
.CALL    LA    R1,20(,R14)         ->VARIABLE LIST
         ST    R1,16(,R14)         SET IN PARAMETER LIST
         AIF   ('&EP' EQ '').CALL1
         IHBINNRA &EP
         LR    R15,R1
         AGO   .CALL2
.CALL1   L     R15,=V(YJP$MSG)     ->FORMAT ROUTINE
.CALL2   LR    R1,R14              ->PARAMETER LIST
         BALR  R14,R15             INVOKE FORMAT ROUTINE
         MEND


NOTES

The macros used for save area chaining on entry and exit
(namely $ENTER, $EXIT, $ENTERR, and $EXITR) do
nothing out of the ordinary and have not been included.

Dave Martin
Consultant Systems Programmer
IMI Computing Ltd (UK)                               c Xephon 1993

