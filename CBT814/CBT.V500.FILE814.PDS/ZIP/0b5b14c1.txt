Failed DASD dataset analysis

During a recent six-week period, my environment had the
undesirable experience of dealing with unrecoverable failures on
four separate 3380 HDA devices. Depending on the nature of the
failures, any one of the following occurred:

o      An address went into a disabled state and couldn't be
enabled.

o      An address couldn't be brought on-line even with enabled
hardware.

o      An address remained on-line but received data or equipment
checks every time it was accessed.

In each case, it wasn't possible to retrieve a VTOC listing of the
volume to analyse which datasets were lost. I found it was
extremely important to plan ahead and have a procedure in place
to deal with these difficult situations. In our SMS environment, we
typically have 100 to 300 datasets per address and they are
constantly changing. This means upwards of 600 datasets could
be involved in an HDA loss. Most DASD management software
packages provide some kind of volume level recovery. However,
volume level recovery is from an old point-in-time snapshot,
which does not adequately provide a solution to resolving all
problems created by these failures. The broad extent of impact,
along with requirements to understand and recognize all aspects
of the recovery, prompted me to write a program which provides
assistance in dealing with these problems.

We needed a way of producing a report which would give a quick
but thorough analysis of what was required to recover from a
failure. To do this, a report would have to list the following
information:

o      Which datasets were on the volume at the time of the last
back-ups.

o      Which datasets were on the volume at the time of the crash.

o      Who has accessed datasets on the volume since the last back-
ups.

o      What type of access took place.

o      Whether VSAM components were data- or index-related.

o      What were the associated base cluster names for the VSAM
components.

o      Which datasets on the volume were multi-volume.

o      Which datasets on the volume were only multi-volume
candidates.

o      Which datasets on the volume were alternate indexes.

Each piece of information would serve a purpose in formulating a
recovery strategy with the following thoughts in mind:

o      By knowing what was on the volume as of the last back-ups,
datasets which required restoration to that point in time could be
identified.

o      If a dataset was on the volume at the time of the back-ups but
no longer had an entry for that volume in a catalog, it should be
excluded from the recovery.

o      By knowing what was on the volume at the time of the crash
but not during the back-ups, we could determine which datasets
would not have had an opportunity to get backed up by the
system. The impact of this could then be discussed with the
appropriate owners of the data. In some cases, batch jobs creating
these datasets would have a back-up available.

o      By knowing which datasets had been updated, one could
determine what forward recovery procedures to perform. This
would primarily focus on CICS VSAM and DB2 files processed
since the last back-ups.

o      By knowing which files had been updated or read since the
back-ups, it would be possible to determine which jobs may need
to be rerun when a file could not be forward recovered where
journalling was not applicable.

o      For updated files, it was possible a back-up taken within the
application was more appropriate to restore than an older system
back-up.

o      If a TSO user had opened a file for update, they could be
informed to redo any activity back to the point in time to which
the file was restored.

o      For KSDS VSAM files with only index components on a
volume, the data component could be used to rebuild the entire
cluster.

o      When a file is detected as multi-volume, it is important to
know the entire file is affected, not just this extent.

o      By knowing a volume is only a multi-volume candidate for
future growth, it is possible to determine whether any actual data
is involved, avoiding an unnecessary restore.

o      If a file is an alternate index, but the base is not being
restored, a procedure to just rebuild the AIX can be pursued.

These and other scenarios can all be identified, as long as proper
information is readily available.

A program, called VOLCHECK, was written to create a report
with all the required information. The program makes use of three
sources of information: daily IDCAMS DCOLLECT, current ICF
catalogs, and previously recorded SMF data. The raw
DCOLLECT data is produced nightly for all datasets on all
volumes via a basic IDCAMS DCOLLECT job. This is
performed at approximately the same time as the saves. It supplies
VOLCHECK with a snapshot of how the volume looked at the
time of back-ups. The ICF catalog data is directly extracted from
the current catalog structure by VOLCHECK and provides a
snapshot of what the volume looked like at the time of the crash.
Catalog names to search are supplied to VOLCHECK via JCL
DD statements. Since catalogs are read directly as files, the
analysis is very fast. The SMF data is a concatenation of all
available SMF datasets containing relevant data. DATE and
TIME parameters are fed to the program via JCL, indicating how
far back the program should go to analyse data for reads and
updates. The appropriate SMF data must be available via the
concatenation. It's possible this would be a combination of tape
and disk datasets. Note that VOLCHECK detects who accessed a
dataset via SMF type 14, 15, or 62 records. Since these records
get cut based on open/close activity, this must be taken into
consideration when deciding how far back to extract information
relative to back-ups.

In addition to DATE and TIME parameters, there is a VOL
parameter to indicate the name of the volume which was lost.
VOLCHECK produces a single report on this volume using all
DCOLLECT, catalog, and SMF data available. Since the number
of read accesses can be very significant and contribute to a large
report, there is a parameter called NOT14. This bypasses
reporting on read-only access (type 14 SMF records), which can
help streamline the process in its early stages. It's unlikely, but
possible, that some portion of expected data is on the failed HDA
and can't be accessed. If this occurs, there are NODCO and
NOSMF parameters to reflect the absence of any particular piece
of information. As a general rule, catalogs are restored and
forward recovered prior to anything else, so they should all be
available prior to application dataset recovery. VOLCHECK only
processes catalogs in the JCL, so any that are unavailable can be
left out till later in the process. The DD name of each catalog must
begin with ICFCAT. The remaining digits/letters are not
significant, they just make the DD statement unique.

The VOLCHECK load module should be in a location with
guaranteed accessibility, similar to other critical system and
DASD management software. These typically are on DASD
which have full volume back-ups, so you can always get back to a
workable base system using stand-alone techniques. DCOLLECT
and SMF data can be written to tape to maximize availability and
effectiveness of the total process. If any piece is unavailable, that
part of the analysis is bypassed.

VOLCHECK produces a complete report of permanent datasets
on the failing device along with pertinent information. All dataset
names whether from DCOLLECT, catalog, or both are listed. For
VSAM datasets, both component name and associated cluster are
listed. This is important because most accesses to the data are via
the cluster name, not the component name, which shows up as the
dataset name on the volume. When SMF is searched, an attempt is
made to match on either name. If there is a catalog hit, but no
matching DCOLLECT data, NDCO appears under a NOTE
column. If there is a DCOLLECT hit, but no matching catalog
data, NCAT appears. A DC/IC/M*/AX column appropriately
marks applicable data component (DC), index component (IC),
multi-volume (MV), multi-volume candidate (MC), and alternate
index (AX) datasets. For datasets having SMF activity hits, a JOB,
DATE, TIME, and TYP column list appropriate information. One
line is listed per activity. The dataset name is left blank on multiple
matches to clarify the report. In the case of a VSAM access, TYP
is listed only as X since the SMF 62 record does not distinguish
between read or update. For other datasets, U appears for update
and R appears for read.

One final feature of the program is to create a dataset of
RESTORE commands for files it feels require restoration. This file
can be edited to meet the needs of the recovery and can help to
speed up the process. An assumption is made not to restore
alternate index datasets, as they can be rebuilt using the base
cluster. Also, multi-volume candidate datasets are not restored.
For a VSAM component, a restore is issued only for the cluster
name of a data component. In many cases, such as DB2, there are
other considerations in deciding how and from where the restores
get executed. The format of the RESTORE statement created in
this file can be modified to match appropriate software.

This is the type of program we all hope never to have reason to
use. However, if the unpleasant scenario of losing DASD presents
itself, quick access to this kind of information can be a real asset.
Obviously, it's extremely important to verify that all back-up and
journalling procedures are functioning properly so the data is
available if needed for a recovery. The code for VOLCHECK
along with sample JCL and appropriate comments to execute the
process follow. There is also a sample job stream to produce
DCOLLECT data at an appropriate time on a nightly basis. Since
catalogs are being read directly, the load module for
VOLCHECK must be authorized. The code and JCL are
executing on an MVS 4.2 system and, to my knowledge, should
be compatible with any MVS release capable of producing
DCOLLECT data.

SAMPLE JCL

//*     This job can be run to analyse what datasets need to be
//*     recovered in the event of DASD failure.
//*     Before running this job, all catalog structures should be
//*     accessible, along with the latest DCOLLECT and SMF data.
//*     In the event DCOLLECT or SMF data is unavailable, an applicable
//*     parm must be coded to indicate its absence.  If a particular
//*     catalog is unavailable, it can be removed from the JCL.  The
//*     report produced will not be as complete if any data is
//*     unavailable.
//*     Input parms are VOL= ; Volume id of the device which was lost
//*                     DATE=; Date from which SMF is analysed (Julian)
//*                     TIME=; Time from which to analyze (0000 - 2400)
//*                     NODCO; DCOLLECT data is unavailable
//*                     NOSMF; SMF data is unavailable
//*                     NOT14; Do not print type 14 SMF read info
//STEP1    EXEC PGM=VOLCHECK,
//         PARM='VOL=badvol,DATE=yyddd,TIME=hhmm,NOT14'
//SORTIN   DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTOUT  DD   UNIT=VIO,SPACE=(CYL,(10,1))
//DCOLIN   DD   DSN=your.dcollect.data,DISP=SHR
//SMFIN    DD   DSN=your.smf.data,DISP=SHR
//ICFCAT01 DD   DSN=your.first.icf.catalog,disp=shr
//ICFCAT02 DD   DSN=your.second.icf.catalog,disp=shr
//ICFCAT03 DD   DSN=your.third.icf.catalog,disp=shr
//DCOLOUT  DD   DSN=&&TEMP1,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//SMFOUT   DD   DSN=&&TEMP2,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//CATLGOUT DD   DSN=&&TEMP3,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//RPTHOLD  DD   DSN=&&TEMP4,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//SORTOT1  DD   DSN=&&TEMP5,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//SORTOT2  DD   DSN=&&TEMP6,DISP=(,DELETE),
//   LRECL=130,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(10,1))
//RESTORES DD   DSN=your.restore.commands,DISP=(,CATLG),
//   LRECL=80,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(1,1))
//SYSOUT   DD   SYSOUT=*
//REPORT   DD   SYSOUT=*
//*
//*   The following job is used to capture DCOLLECT data nightly
//*
//STEP1    EXEC PGM=IDCAMS
//SYSPRINT DD   SYSOUT=*
//OUTDS    DD   DSN=your.dcollect.data,DISP=(,CATLG,DELETE),
//  SPACE=(CYL,(5,1)),DCB=(LRECL=264,RECFM=VB,DSORG=PS)
//SYSIN    DD *
 DCOLLECT OFILE(OUTDS) VOLUME(*) NOVOLUMEINFO

VOLCHECK SOURCE CODE

VOLCHECK CSECT
         STM   R14,R12,12(R13)       SAVE REGS
         BALR  R12,0                 ESTABLISH ADDRESSABILITY
         USING *,R12,R11             NEED TWO BASE REGS
         LA    R11,4095(,R12)        SET UP
         LA    R11,1(,R11)              BASE TWO
         LA    R3,REGSAVE            ADDRESS OF OUR SAVE AREA
         ST    R3,8(R13)             SAVE OUR ADDRESS
         ST    R13,4(R3)             SAVE CALLING SAVE AREA
         LR    R13,R3                LOAD OUR SAVE ADDRESS
         L     R4,0(R1)              GET PARM LENGTH ADDRESS
         LH    R5,0(R4)              LENGTH OF PARM DATA
         LTR   R5,R5                 IS IT ZERO?
         BZ    VOLCK004              YES, NO PARM
         LA    R5,2(R5,R4)           END OF PARM DATA
         LA    R4,1(,R4)             POSITION FOR COMPARE
VOLCK001 LA    R4,1(,R4)             POSITION FOR COMPARE
         CLC   0(4,R4),=C'VOL='      VOLSER?
         BE    VOLCK007              YES, SAVE IT
         CLC   0(5,R4),=C'DATE='     DATE?
         BE    VOLCK010              YES, SAVE IT
         CLC   0(5,R4),=C'TIME='     TIME?
         BE    VOLCK013              YES, SAVE IT
         CLC   0(5,R4),=C'NODCO'     NO DCOLLECT DATA?
         BE    VOLCK016              YES, SET FLAG
         CLC   0(5,R4),=C'NOSMF'     NO SMF DATA?
         BE    VOLCK022              YES, SET FLAG
         CLC   0(5,R4),=C'NOT14'     DON'T PROCESS TYPE 14 DATA?
         BE    VOLCK025              YES, SET FLAG
         BCTR  R4,0                  BACK UP 1 CHARACTER
         MVC   WTOBPARM+32(8),0(R4)  SET UP BAD PARM DISPLAY
VOLCK004 WTO   MF=(E,WTOBPARM)       INDICATE BAD PARM DATA
         ABEND 999                      AND ABEND
VOLCK007 LA    R4,4(R4)              POINT TO VOLSER
         MVC   PARMVOL(6),0(R4)      SAVE VOLSER
         LA    R4,6(R4)              POINT TO NEXT PARM
         B     VOLCK031              GO CHECK FOR END
VOLCK010 LA    R4,5(R4)              POINT TO DATE
         MVC   PARMDATE(5),0(R4)     MOVE DATE
         B     VOLCK028              GO CHECK FOR END
VOLCK013 LA    R4,5(R4)              POINT TO TIME
         MVC   PARMTIME(4),0(R4)     MOVE TIME
         LA    R4,4(R4)              POINT TO NEXT PARM
         B     VOLCK031              GO CHECK FOR END
VOLCK016 MVI   NODCOFLG,C'1'         SET NO DCOLLECT DATA FLAG
         B     VOLCK028              GO CHECK FOR END
VOLCK022 MVI   NOSMFFLG,C'1'         SET NO SMF DATA FLAG
         MVC   HEADLIT,NOSMFLIT      THERE WILL BE NO SMF IN REPORT
         MVC   HEADAT(4),SPACES      BLANK OUT OTHER PART OF HEADING
         B     VOLCK028              GO CHECK FOR END
VOLCK025 MVI   NOT14FLG,C'1'         SET NO TYPE 14 DATA FLAG
VOLCK028 LA    R4,5(R4)              POINT TO NEXT PARM
VOLCK031 CR    R4,R5                 AT END OF PARMS?
         BE    VOLCK034              TIME TO PROCESS DATA
         B     VOLCK001              GO CHECK NEXT PARM
VOLCK034 OPEN  (CATLGOUT,(OUTPUT))   OPEN CATALOG INFO DATASET
         WTO   '* ANALYSING CATALOG DATA *'
         L     R9,16                 GET ADDRESS OF CVT
         USING CVTMAP,R9             ADDRESS CVT DSECT
         L     R4,CVTTCBP            TCB HEAD ADDR
         L     R4,4(R4)              TCB ACTIVE ADDR
         L     R4,12(R4)             TIOT ADDR
         LA    R4,24(R4)             DD ENTRY LENGTH FIELD
         B     VOLCK040              GO CHECK FOR ICFCAT DD
VOLCK037 SR    R0,R0                 ZERO REG 0
         IC    R0,0(R4)              SAVE TIOELNGH
         AR    R4,R0                 POSITION TO NEXT DD
VOLCK040 CLI   0(R4),X'00'           IS LENGTH FIELD ZERO?
         BE    VOLCK116              IF YES, NO MORE DD STATEMENTS
         CLC   =C'ICFCAT',4(R4)      IS THIS AN ICFCAT DD?
         BNE   VOLCK037              IF NO, IGNORE
         MVC   CATLGACB+40(8),4(R4)  USE DDNAME FROM TIOT
         MVI   FIRSTFLG,C'0'         INDICATE LOOKING FOR CAT NAME
         OPEN  CATLGACB              OPEN THE BCS CLUSTER
         LTR   R15,R15               DID IT OPEN?
         BZ    VOLCK043              IF YES, GO PROCESS
         SHOWCB  ACB=CATLGACB,AREA=CATOPNER,LENGTH=4,FIELDS=(ERROR)
         L     R7,CATOPNER           SAVE ERROR CODE FOR DIAGNOSIS
         ABEND 996                   SOMETHING'S WRONG
VOLCK043 L     R0,CATBUFLN           GETMAIN LENGTH
         GETMAIN R,LV=(0)            INPUT BUFFER FOR BCS RECORDS
         ST    R1,CATBUF             SAVE ADDRESS OF RECORD BUFFER
         GENCB BLK=RPL,ACB=(S,CATLGACB),AM=VSAM,AREA=(*,CATBUF),       X
               AREALEN=131072,OPTCD=(KEY,SEQ,MVE)
         ST    R1,CATLGRPL           SAVE GENERATED RPL ADDR
VOLCK045 L     R1,CATLGRPL           PICK UP RPL ADDRESS
         GET   RPL=(1)               READ A BCS RECORD
         LTR   R15,R15               WAS READ OK?
         BZ    VOLCK048              IF YES, GO PROCESS IT
         ABEND 997                   SOMETHING'S WRONG
VOLCK048 L     R3,CATBUF             ADDR OF CATALOG RECORD
         L     R1,CATLGRPL           ADDR OF BCS RPL
         L     R1,48(0,R1)           LENGTH OF RECORD READ
         AR    R1,R3                 POINT TO END OF CATALOG RECORD
         ST    R1,CATRECND           SAVE END OF RECORD
         LA    R3,2(,R3)             SKIP OVER PREFIX
VOLCK051 CLI   2(R3),C'A'            NONVSAM CELL?
         BE    VOLCK078
         CLI   2(R3),C'C'            CLUSTER CELL?
         BE    VOLCK087
         CLI   2(R3),C'D'            DATA CELL?
         BE    VOLCK090
         CLI   2(R3),C'I'            INDEX CELL?
         BE    VOLCK093
         CLI   2(R3),C'B'            GDG BASE CELL?
         BE    VOLCK066
         CLI   2(R3),C'H'            GDG ENTRY CELL?
         BE    VOLCK069
         CLI   2(R3),C'G'            ALTERNATE INDEX CELL?
         BE    VOLCK081
         CLI   2(R3),X'04'           VOLUME CELL?
         BE    VOLCK102
VOLCK054 SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,0(R3)            PICK UP CELL LENGTH
         AR    R3,R1                 POINT TO NEXT CELL
         C     R3,CATRECND           ANY MORE CELLS IN THIS RECORD?
         BL    VOLCK051              IF YES, CONTINUE PROCESSING
         B     VOLCK045              GO READ ANOTHER RECORD
VOLCK057 CLI   LOGICFLG,C'1'         ANY INFO WAITING FOR OUTPUT?
         BNE   VOLCK060              IF NOT, NOTHING TO PUT
         PUT   CATLGOUT,SAVEINFO     WRITE CATALOG COLLECTED INFO
         MVI   LOGICFLG,C'0'         RESET WAITING TO OUTPUT FLAG
VOLCK060 BR    R7                    RETURN TO WHERE WE CAME FROM
VOLCK063 BAL   R7,VOLCK057           GO SEE IF ANYTHING TO WRITE
         CLOSE CATLGACB              THAT'S ALL FOR THIS CATALOG
         B     VOLCK037              GO SEE IF THERE ARE ANY MORE
VOLCK066 MVC   GDGSAVE(44),7(R3)     SAVE GDGNAME
         MVI   TYPEFLG,C'D'          INDICATE WORKING ON NEW DATASET
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK069 MVC   GDGWORK1,GDGSAVE      START WITH BASE NAME
         BAL   R7,VOLCK057           GO SEE IF ANYTHING TO WRITE
         MVI   TYPEFLG,C'D'          INDICATE WORKING ON NEW DATASET
         MVI   SAVEFLG1,C'0'         ASSUME THIS IS SINGLE VOLUME
         LA    R1,GDGWORK1           GET ADDRESS OF BASE NAME
         LA    R8,44                 44 BYTES AT MOST
VOLCK072 CLI   0(R1),C' '            IS THIS A BLANK CHARACTER?
         BE    VOLCK075              IF YES, WE FOUND THE END
         LA    R1,1(0,R1)            TRY NEXT CHARACTER
         BCT   R8,VOLCK072           GO LOOK AT IT
VOLCK075 SR    R8,R8                 CLEAR A REGISTER
         ICM   R8,3,5(R3)            PICK UP GENERATION NUMBER
         CVD   R8,GDGWORK2           PACK IT
         UNPK  2(4,R1),GDGWORK3      UNPACK GENERATION NUMBER
         OI    5(R1),X'F0'           FIX SIGN
         SR    R8,R8                 CLEAR A REGISTER
         ICM   R8,1,7(R3)            PICK UP VERSION NUMBER
         CVD   R8,GDGWORK2           PACK IT
         UNPK  7(2,R1),GDGWORK4      UNPACK VERSION NUMBER
         OI    8(R1),X'F0'           FIX SIGN
         MVC   0(2,R1),=C'.G'        PUT .G IN PLACE
         MVI   6(R1),C'V'            PUT V IN PLACE
         MVI   SAVEDSN,X'40'         SPACE OUT THE SAVE AREA
         MVC   SAVEDSN+1(L'SAVEDSN-1),SAVEDSN
         MVC   SAVEDSN,GDGWORK1      SAVE IN DEVELOPED NAME
         B     VOLCK054              GO PROCESS NEXT BCS CELL
VOLCK078 BAL   R7,VOLCK057           GO SEE IF ANYTHING TO WRITE
         MVC   SAVECLUS,SPACES       NONVSAM DOESN'T HAVE CLUSTER NAME
         MVI   SAVEFLG1,C'0'         ASSUME THIS IS SINGLE VOLUME
         MVI   SAVEFLG2,C'0'         CAN'T BE ALTERNATE INDEX
         MVI   SAVEFLG3,C'0'         CAN'T BE DATA/INDEX COMPONENT
         MVI   TYPEFLG,C'D'          INDICATE WORKING ON NEW DATASET
         MVC   SAVEDSN(44),7(R3)     SAVE DSNAME
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK081 BAL   R7,VOLCK057           GO SEE IF ANTHING TO WRITE
         MVI   SAVEFLG2,C'1'         INDICATE THIS IS AN AIX
         SR    R1,R1                 CLEAR A REGISTER
         ICM   R1,1,6(R3)            PICK UP AIX NAME LENGTH
         SH    R1,=H'2'              CORRECT LENGTH
         MVI   SAVECLUS,X'40'        SPACE OUT THE SAVE AREA
         MVC   SAVECLUS+1(L'SAVECLUS-1),SAVECLUS
         EX    R1,VOLCK084           MOVE NAME WITH PROPER LENGTH
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK084 MVC   SAVECLUS(0),7(R3)     EXECUTED
VOLCK087 BAL   R7,VOLCK057           GO SEE IF ANYTHING TO WRITE
         MVI   SAVEFLG2,C'0'         THIS IS A BASE, NOT AIX
         MVC   SAVECLUS(44),7(R3)    SAVE THE BASE CLUSTER NAME
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK090 MVI   SAVEFLG3,C'D'         THIS IS A DATA COMPONENT
         B     VOLCK096              GO PROCESS IT
VOLCK093 BAL   R7,VOLCK057           GO SEE IF ANTHING TO WRITE
         MVI   SAVEFLG3,C'I'         THIS IS AN INDEX COMPONENT
VOLCK096 MVI   TYPEFLG,C'D'          INDICATE WORKING ON NEW DATASET
         MVI   SAVEFLG1,C'0'         ASSUME THIS IS SINGLE VOLUME
         SR    R1,R1                 CLEAR A REGISTER
         IC    R1,6(R3)              LENGTH OF INDEX/DATA NAME
         SH    R1,=H'2'              CORRECT LENGTH
         MVI   SAVEDSN,X'40'         SPACE OUT THE SAVE AREA
         MVC   SAVEDSN+1(L'SAVEDSN-1),SAVEDSN
         EX    R1,VOLCK099           MOVE COMPONENT NAME FOR PRINT
         CLI   FIRSTFLG,C'0'         IS THIS FIRST CATALOG DATA ENTRY?
         BNE   VOLCK054              IF NO, ALREADY HAVE NAME
         MVC   WTOCATL+24(44),SAVEDSN DISPLAY CATALOG WE'RE PROCESSING
         WTO   MF=(E,WTOCATL)        TELL WHAT WE'RE PROCESSING
         MVI   FIRSTFLG,C'1'         INDICATE WE HAVE CATALOG NAME
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK099 MVC   SAVEDSN(0),7(R3)      EXECUTED
VOLCK102 CLI   SAVEFLG1,C'2'         DID WE DETECT CANDIDATE VOLUME?
         BE    VOLCK054              IF YES, DON'T LOOK ANY FURTHER
         CLI   TYPEFLG,C'V'          WAS LAST CELL A VOLUME CELL?
         BNE   VOLCK111              IF NOT, NOT MULTI-VOLUME
         CLI   LOGICFLG,C'1'         DID WE ALREADY SELECT THIS?
         BE    VOLCK108              IF YES, GO CHECK SAME VOLUME
VOLCK105 MVI   SAVEFLG1,C'1'         THIS IS A MULTI-VOLUME DATASET
         B     VOLCK112              GO CHECK VOLUME NAME
VOLCK108 CLC   4(6,R3),PARMVOL       IS THIS THE SAME VOLUME AGAIN?
         BNE   VOLCK105              IF NOT, SET MULTI-VOLUME FLAG
         B     VOLCK054              WE'VE ALREADY PROCESSED THIS
VOLCK111 MVI   TYPEFLG,C'V'          WE'RE IN A VOLUME CELL
VOLCK112 CLC   4(6,R3),PARMVOL       DO WE WANT IT?
         BNE   VOLCK054              IF NOT, DON'T PROCESS
         CLC   SAVEDSN(10),=C'SYS1.VVDS.' IS THIS A VVDS?
         BE    VOLCK054              IF YES, IGNORE IT
         TM    14(R3),B'01000000'    IS THIS A CANDIDATE VOLUME?
         BO    VOLCK113              IF YES, INDICATE SO
         B     VOLCK114              NOT CANDIDATE
VOLCK113 MVI   SAVEFLG1,C'2'         THIS IS ONLY A CANDIDATE VOLUME
VOLCK114 MVI   LOGICFLG,C'1'         INDICATE WE WANT TO WRITE INFO
         B     VOLCK054              GO PROCESS NEXT CELL
VOLCK116 CLOSE CATLGOUT              ALL DONE WITH CATALOG PROCESSING
         OPEN  (DCOLOUT,(OUTPUT))    PREPARE TO EXTRACT FROM DCOLLECT
         CLI   NODCOFLG,C'1'         IF THERE ANY DCOLLECT INFO
         BE    VOLCK153              IF NO, DON'T PROCESS
         WTO   '* ANALYSING DCOLLECT DATA *' INFORM WHERE WE'RE AT
         OPEN  DCOLIN                OPEN THE DCOLLECT FILE
VOLCK117 GET   DCOLIN                READ A RECORD FROM DCOLLECT
         LA    R9,4(R1)              POINT TO RECORD
         DROP  R9
         USING IDCDOUT,R9            ESTABLISH ADDRESSABILITY
         CLI   DCURCTYP,C'D'         IS THIS A DATASET RECORD?
         BNE   VOLCK117              IF NO, DON'T WANT IT
         CLC   DCDVOLSR,PARMVOL      IS IT THE PARMVOL WE WANT?
         BNE   VOLCK117              IT NO, DON'T WANT IT
         CLC   DCDDSNAM(10),=C'SYS1.VVDS.'  IS THIS A VVDS ENTRY?
         BE    VOLCK117              IF YES, DON'T WANT IT
         CLC   DCDDSNAM(12),=C'SYS1.VTOCIX.' IS THIS A VTOC ENTRY?
         BE    VOLCK117              IF YES, DON'T WANT IT
         TM    DCDFLAG1,DCDTEMP      IS IT TEMPORARY?
         BO    VOLCK117              IF YES, DON'T WANT IT
         MVI   SAVEFLG1,C'0'         ASSUME NO MULTI-VOLUME
         CLC   DCDVOLSR,DCDDSSER     MULTI-VOLUME RECORD?
         BE    VOLCK120              IF NO, DON'T MARK IT AS SUCH
         MVI   SAVEFLG1,C'1'         IT IS MULTI-VOLUME
VOLCK120 MVC   SAVEDSN,DCDDSNAM      SAVE THE DATASET NAME
         MVI   SAVEFLG2,C'0'         ASSUME NOT AIX
         MVI   SAVEFLG3,C'0'         ASSUME NOT A COMPONENT
         TM    DCDDSORG+1,DCDDSGVS   IS IT VSAM?
         BO    VOLCK123              IF YES, GET CLUSTER
         MVC   SAVECLUS,SPACES       THERE IS NO ASSOCIATED CLUSTER
         B     VOLCK143              GO WRITE OUT THE INFO
VOLCK123 GET   DCOLIN                READ NEXT DCOLLECT RECORD
         LA    R9,4(R1)              POINT TO RECORD
         CLI   DCURCTYP,C'A'         VSAM ASSOCIATED RECORD?
         BNE   VOLCK147              IF NO, SOMETHING'S WRONG
         CLC   DCADSNAM,SAVEDSN      IS IT SAME NAME?
         BNE   VOLCK147              IF NO, SOMETHING'S WRONG
         TM    DCAFLAG1,DCADATA      DATA COMPONENT?
         BO    VOLCK127              IF YES, INDICATE SO
         B     VOLCK130              GO CHECK FOR INDEX
VOLCK127 MVI   SAVEFLG3,C'D'         INDICATE DATA COMPONENT
         B     VOLCK136              GO CHECK FOR AIX
VOLCK130 TM    DCAFLAG1,DCAINDEX     INDEX COMPONENT?
         BO    VOLCK133              IF YES, INDICATE SO
         B     VOLCK136              GO CHECK FOR AIX
VOLCK133 MVI   SAVEFLG3,C'I'         INDICATE INDEX COMPONENT
VOLCK136 TM    DCAFLAG1,DCAAIX       ALTERNATE INDEX?
         BO    VOLCK139              IF YES, INDICATE SO
         B     VOLCK140              GO SAVE CLUSTER NAME
VOLCK139 MVI   SAVEFLG2,C'1'         INDICATE IT'S AN AIX
VOLCK140 MVC   SAVECLUS,DCAASSOC     SAVE ASSOCIATED BASE CLUSTER NAME
VOLCK143 PUT   DCOLOUT,SAVEINFO      WRITE OUT THE EXTRACTED INFO
         B     VOLCK117              GO READ THE NEXT DCOLLECT RECORD
VOLCK147 WTO   '*  LOGIC ERROR IN DCOLLECT DATA *' SOMETHING'S WRONG
         ABEND 998                                         SO ABEND
VOLCK150 CLOSE DCOLIN                WE'RE FINISHED WITH DCOLLECT INFO
VOLCK153 CLOSE DCOLOUT               DCOLLECT INFO HAS BEEN EXTRACTED
         OPEN  (SMFOUT,(OUTPUT))     GET READY FOR EXTRACTED SMF INFO
         CLI   NOSMFFLG,C'1'         IS THERE ANY SMF INFO?
         BE    VOLCK190              IF NO, DON'T PROCESS
         WTO   '* ANALYZING SMF DATA *' INDICATE WE'RE PROCESSING SMF
         MVC   SAVECLUS,SPACES       THERE WILL BE NO ASSOCIATED INFO
         OPEN  SMFIN                 OPEN THE SMF FILE
         DROP  R9
         USING SMF14HDR,R9           MAP THE SMF HEADER INFO
VOLCK156 GET   SMFIN                 GET SMF RECORD
         LR    R9,R1                 SAVE ADDRESS OF RECORD
         CLI   SMF14RTY,14           OPEN INPUT?
         BE    VOLCK159              YES, GO PROCESS
         CLI   SMF14RTY,15           OPEN UPDATE?
         BE    VOLCK162              YES, GO PROCESS
         CLI   SMF14RTY,62           VSAM OPEN?
         BE    VOLCK174              YES, GO PROCESS
         B     VOLCK156              DON'T WANT IT
VOLCK159 CLI   NOT14FLG,C'1'         DO WE WANT TYPE 14 INFO
         BE    VOLCK156              IF NO, SKIP IT
         MVI   SAVEFLG1,C'R'         INDICATE THIS WAS A READ
         B     VOLCK165              GO LOOK AT JFCB INFO
VOLCK162 MVI   SAVEFLG1,C'U'         INDICATE THIS WAS AN UPDATE
VOLCK165 LA    R8,SMFJFCB1           ADDRESS OF JFCB INFO
         USING INFMJFCB,R8           MAP JFCB INFO
         CLI   JFCBNVOL,X'01'        IS THIS SINGLE VOLUME?
         BE    VOLCK168              IF YES, GO CHECK IT
         CLC   SMFDSSNO(6),PARMVOL   IS THIS A VOLUME MATCH?
         BNE   VOLCK156              IF NO, BYPASS
         B     VOLCK171              THIS IS ONE WE'RE LOOKING FOR
VOLCK168 CLC   JFCBVOLS(6),PARMVOL   IS IT ONE WE WANT?
         BNE   VOLCK156              IF NO, BYPASS
VOLCK171 TM    SMF14RIN,SMF14TDS     IS IT A TEMPORARY DATASET?
         BO    VOLCK156              IF YES, DON'T WANT IT
         CLC   JFCBDSNM(4),=X'04040404' IS THIS AN UNKNOWN DSNAME?
         BE    VOLCK156              IF YES, DON'T WANT IT
         MVC   SAVEJOB,SMF14JBN      MOVE IN JOBNAME
         MVC   SAVEDSN,JFCBDSNM      MOVE IN DATASET NAME
         MVC   SMFDATE,SMF14DTE      SAVE THE DATE
         MVC   SMFTIME,SMF14TME      SAVE THE SAVETIME
         B     VOLCK183              GO PROCESS DATE/TIME
         DROP  R9
         USING SMFRCD62,R9           MAP THE TYPE 62 INFO
VOLCK174 MVI   SAVEFLG1,C'X'         INDICATE THIS WAS A VSAM OPEN
         SR    R5,R5                 CLEAR REG 5
         LH    R5,SMF62VCT           LOAD VOLUME COUNT
         LTR   R5,R5                 VOLUME INFO COUNT ZERO?
         BZ    VOLCK156              IF YES, DON'T PROCESS
         LA    R6,SMF62VSR           LOAD VOLSER INFO ADDRESS
VOLCK177 CLC   0(6,R6),PARMVOL       IS VOLSER A MATCH?
         BE    VOLCK180              IF YES, GO PROCESS
         LA    R6,10(R6)             POINT TO NEXT VOLUME INFO
         BCT   R5,VOLCK177           SUBTACT ONE FROM COUNT,GO CHECK IT
         B     VOLCK156              THERE WAS NO VOLSER MATCH
VOLCK180 MVC   SAVEDSN,SMF62DNM      SAVE OPENED VSAM DATASET NAME
         MVC   SAVEJOB,SMF62JBN      MOVE IN JOBNAME
         MVC   SMFDATE,SMF62DTE      SAVE THE DATE
         MVC   SMFTIME,SMF62TME      SAVE THE TIME
VOLCK183 UNPK  SAVEDATE,SMFDATE      UNPACK SAVEDATE FIELD
         CLC   SAVEDATE,PARMDATE     HOW DOES IT COMPARE TO PARM DATE?
         BL    VOLCK156              IF IT'S LESS, DON'T WANT IT
         L     R5,SMFTIME            LOAD BINARY SAVETIME
         LA    R6,SAVETIME           POINT TO SAVED PARM TIME
         SR    R4,R4                 CLEAR REG 4
         D     R4,=F'100'            DIVIDE 4-5 BY 100 (GET HUNDREDTHS)
         SR    R4,R4                 DROP HUNDREDTHS
         D     R4,=F'60'             DIVIDE 4-5 BY 60 (GET SECONDS)
         SR    R4,R4                 DROP SECONDS
         D     R4,=F'60'             DIVIDE 4-5 BY 60 (GET MINUTES)
         CVD   R4,DBL                CONVERT TO PACKED DECIMAL
         UNPK  2(2,R6),DBL+6(2)      UNPACK MINUTES
         OI    3(R6),X'F0'           FORCE ZONE READABLE
         CVD   R5,DBL                CONVERT HOURS TO PACKED DECIMAL
         UNPK  0(2,R6),DBL+6(2)      UNPACK HOURS
         OI    1(R6),X'F0'           FORCE ZONE READABLE
         CLC   SAVEDATE,PARMDATE     IS DATE EQUAL PARM DATE?
         BNE   VOLCK186              IT NOT, WE WANT THIS ONE
         CLC   SAVETIME,PARMTIME     HOW DOES TIME COMPARE TO PARM?
         BL    VOLCK156              IF LESS, WE DON'T WANT THIS RECORD
VOLCK186 PUT   SMFOUT,SAVEINFO       WRITE EXTRACTED SMF INFO
         B     VOLCK156              GO READ NEXT SMF RECORD
VOLCK189 CLOSE SMFIN                 WE'RE DONE READING SMF DATA
         B     VOLCK192
VOLCK190 MVC   PARMDATE(5),SPACES    NO SMF DATA SO
         MVC   PARMTIME(4),SPACES    BLANK THESE OUT
VOLCK192 CLOSE SMFOUT                CLOSE EXTRACTED SMF INFO FILE
         WTO   '* COMPARISON OF ACCUMULATED DATA IN PROGRESS *'
         MVI   PHASEFLG,C'0'         PHASES ARE JUST GETTING STARTED
         OPEN  (DCOLOUT,,SMFOUT,,CATLGOUT,,SORTIN,(OUTPUT))
         OPEN  (SORTOT1,(OUTPUT),SORTOT2,(OUTPUT))
VOLCK195 GET   DCOLOUT,WORKREC1      READ THE DCOLLECT INFO
         PUT   SORTIN,WORKREC1       PUT RECORD OUT TO SORT
         B     VOLCK195              GO PROCESS NEXT RECORD
VOLCK198 GET   CATLGOUT,WORKREC1     READ THE CATALOG INFO
         PUT   SORTIN,WORKREC1       PUT RECORD OUT TO SORT
         B     VOLCK198              GO PROCESS NEXT RECORD
VOLCK201 MVC   SORTPARM,SORTPRM3     SORT ON ASSOICATED CLUSTER NAME
         MVI   PHASEFLG,C'4'         IT'S NOW PHASE 4
         B     VOLCK207              GO READ RPTHOLD
VOLCK204 MVC   SORTPARM,SORTPRM1     SORT ON ORIGINAL DSNAME
         MVI   PHASEFLG,C'5'         IT'S NOW PHASE 5
VOLCK207 GET   RPTHOLD,WORKREC1      READ A RPTHOLD RECORD
         PUT   SORTIN,WORKREC1       PUT RECORD OUT TO SORT
         B     VOLCK207              GO PROCESS NEXT RECORD
VOLCK210 MVC   SORTPARM,SORTPRM2     SET SORT TO MATCH SMF DATA
         CLOSE (SORTOT1,,SORTOT2,,RPTHOLD)
         OPEN  (SORTIN,(OUTPUT),SORTOT1,(OUTPUT),SORTOT2,(OUTPUT))
         OPEN  RPTHOLD
VOLCK213 GET   SMFOUT,WORKREC1       READ THE SMF INFO
         PUT   SORTIN,WORKREC1       PUT RECORD OUT TO SORT
         B     VOLCK213              GO PROCESS NEXT RECORD
VOLCK216 CLI   PHASEFLG,C'6'         WAS THIS PHASE 6?
         BE    VOLCK342              IF YES, WE'RE FINISHED
         CLOSE SORTIN                CLOSE SORTIN SO SORT CAN READ
         LA    R1,POINTER            PREPARE FOR SORT
         LINK  EP=SORT               CALL SORT
         LTR   R15,R15               WAS SORT RC ZERO?
         BZ    VOLCK219              IF YES, CONTINUE ON
         WTO   '* NON ZERO RC FROM SORT - REVIEW SYSOUT *'
         B     VOLCK345              SHOULD NEVER HAVE A SORT PROBLEM
VOLCK219 OPEN  SORTOUT               GET READY TO READ SORTED INFO
         CLI   PHASEFLG,C'1'         WAS LAST PHASE 1?
         BE    VOLCK228              IF YES, GO PROCESS PHASE 2
         CLI   PHASEFLG,C'2'         WAS LAST PHASE 2?
         BE    VOLCK222              IF YES, GO PROCESS PHASE 3
         CLI   PHASEFLG,C'4'         IS THIS PHASE 4?
         BE    VOLCK231              IF YES, GO PROCESS IT
         CLI   PHASEFLG,C'5'         IS THIS PHASE 5?
         BE    VOLCK231              IF YES, GO PROCESS IT
         MVI   PHASEFLG,C'1'         INDICATE PHASE 1
         B     VOLCK225              BEGIN PHASE 1 PROCESSING
VOLCK222 MVI   PHASEFLG,C'3'         SET TO PHASE 3
VOLCK225 GET   SORTOUT,WORKREC1      READ A SORTED RECORD
         PUT   SORTOT1,WORKREC1      PUT RECORD OUT TO SORT FILE 1
         B     VOLCK225              GET ANOTHER RECORD
VOLCK228 MVI   PHASEFLG,C'2'         SET TO PHASE 2
VOLCK231 GET   SORTOUT,WORKREC1      READ A SORTED RECORD
         PUT   SORTOT2,WORKREC1      PUT RECORD OUT TO SORT FILE 2
         B     VOLCK231              GET ANOTHER RECORD
VOLCK234 CLOSE SORTOUT               END OF SORTED INFO
         OPEN  (SORTIN,(OUTPUT))     GET READY FOR NEXT SORT
         CLI   PHASEFLG,C'1'         IS THIS PHASE 1?
         BE    VOLCK198              IF YES, GO PROCESS PHASE 2
         CLI   PHASEFLG,C'3'         IS THIS PHASE 3?
         BE    VOLCK201              IF YES, GO PROCESS PHASE 4
         CLOSE (SORTOT1,,SORTOT2,,SORTIN)
         CLI   PHASEFLG,C'4'         IS THIS PHASE 4?
         BE    VOLCK318              IF YES, GO PROCESS
         CLI   PHASEFLG,C'5'         IS THIS PHASE 5?
         BE    VOLCK315              IF YES, GO PROCESS
         CLOSE (DCOLOUT,,CATLGOUT)
         OPEN  (SORTOT1,,SORTOT2,,RPTHOLD,(OUTPUT))
         MVI   LOGICFLG,C'1'         IN CASE DCOLLECT IS EMPTY
VOLCK237 GET   SORTOT1,WORKREC1      READ DCOLLECT EXTRACT RECORD
VOLCK240 GET   SORTOT2,WORKREC2      READ CATALOG EXTRACT RECORD
         MVI   LOGICFLG,C'0'         DON'T WORRY ABOUT EMPTY DCOLLECT
VOLCK243 CLC   WR1DSN,WR2DSN         DO DSNAMES MATCH?
         BE    VOLCK252              IF YES, GO PROCESS THE MATCH
         BL    VOLCK249              THERE IS NO MATCHING CATALOG INFO
VOLCK246 CLI   LOGICFLG,C'1'         WAS DCOLLECT EMPTY FROM START?
         BE    VOLCK240              IF YES, DON'T REPORT ANYTHING
         MVC   RPTNOTE1,=C'NDCO'     INDICATE NO DCOLLECT MATCH
         MVC   RPTDSN,WR2DSN         SAVE DSNAME IN REPORT
         MVC   RPTCLUS,WR2CLUS       SAVE ASSOCIATED CLUSTER IN REPORT
         MVC   WRKFLG1(1),WR2FLG1    SAVE MULTI-VOL FLAG
         MVC   WRKFLG2(1),WR2FLG2    SAVE AIX FLAG
         MVC   WRKFLG3(1),WR2FLG3    SAVE DATA/INDEX FLAG
         BAL   R7,VOLCK255           GO PRINT APPLICABLE INFO
         B     VOLCK240              GO READ NEXT CATALOG RECORD
VOLCK249 MVC   RPTNOTE1,=C'NCAT'     INDICATE NO CATALOG MATCH
         MVC   RPTDSN,WR1DSN         SAVE DSNAME IN REPORT
         MVC   RPTCLUS,WR1CLUS       SAVE ASSOCIATED CLUSTER IN REPORT
         MVC   WRKFLG1(1),WR1FLG1    SAVE MULTI-VOL FLAG
         MVC   WRKFLG2(1),WR1FLG2    SAVE AIX FLAG
         MVC   WRKFLG3(1),WR1FLG3    SAVE DATA/INDEX FLAG
         BAL   R7,VOLCK255           GO PRINT APPLICABLE INFO
         GET   SORTOT1,WORKREC1      GET NEXT DCOLLECT EXTRACT RECORD
         B     VOLCK243              GO CHECK FOR A MATCH
VOLCK252 MVC   RPTNOTE1(4),SPACES    DCOLLECT/CATALOG MATCHED
         MVC   RPTDSN,WR1DSN         SAVE DSNAME IN REPORT
         MVC   RPTCLUS,WR1CLUS       SAVE ASSOCIATED CLUSTER IN REPORT
         MVC   WRKFLG1(1),WR2FLG1    CATALOG MULTI-VOL IS MORE RELIABLE
         MVC   WRKFLG2(1),WR1FLG2    SAVE AIX FLAG
         MVC   WRKFLG3(1),WR1FLG3    SAVE DATA/INDEX FLAG
         BAL   R7,VOLCK255           GO PRINT APPLICABLE INFO
         B     VOLCK237              GO GET ANOTHER RECORD FROM EACH
VOLCK255 CLI   WRKFLG3,C'D'          IS THIS A DATA COMPONENT?
         BE    VOLCK258              IF YES, GO SET REPORT
         CLI   WRKFLG3,C'I'          IS THIS AN INDEX COMPONENT?
         BE    VOLCK261              IS YES, GO SET REPORT
         B     VOLCK263              GO CHECK FOR MULTI-VOLUME
VOLCK258 MVC   RPTNOTE2,=C'DC'       INDICATE DATA COMPONENT
         B     VOLCK263              GO CHECK FOR MULTI-VOLUME
VOLCK261 MVC   RPTNOTE3,=C'IC'       INDICATE INDEX COMPONENT
VOLCK263 CLI   WRKFLG1,C'1'          IS THIS A MULTI-VOLUME DATASET?
         BE    VOLCK265              IF YES, GO SET REPORT
         B     VOLCK266              GO CHECK MULTI-VOLUME CANDIDATE
VOLCK265 MVC   RPTNOTE4,=C'MV'       INDICATE MULTI-VOLUME PRIMARY
         B     VOLCK270              GO CHECK FOR AIX
VOLCK266 CLI   WRKFLG1,C'2'          IS THIS A MULTI-VOLUME CANDIDATE?
         BE    VOLCK267              IF YES, GO SET REPORT
         B     VOLCK270              NOT MULTI-VOLUME CANDIDATE
VOLCK267 MVC   RPTNOTE4,=C'MC'       INDICATE MULTI-VOLUME CANDIDATE
VOLCK270 CLI   WRKFLG2,C'1'          IS THIS AN ALTERNATE INDEX?
         BE    VOLCK273              IF YES, GO SET REPORT
         B     VOLCK276              NOT AIX
VOLCK273 MVC   RPTNOTE5,=C'AX'       INDICATE ALTERNATE INDEX
VOLCK276 PUT   RPTHOLD,RPTLINE       WRITE OUT THE REPORT LINE
         MVC   RPTNOTE2(2),SPACES    BLANK OUT
         MVC   RPTNOTE3(2),SPACES              NOTES
         MVC   RPTNOTE4(2),SPACES                    FOR
         MVC   RPTNOTE5(2),SPACES                        NEXT TIME
         BR    R7                    GO BACK TO WHERE WE CAME FROM
VOLCK279 CLI   PHASEFLG,C'4'         IS THIS PHASE 4?
         BE    VOLCK285
         CLI   PHASEFLG,C'6'         IS THIS PHASE 6?
         BE    VOLCK285
         CLI   OT2FLG,C'1'           IS SORTOT2 FILE AT END?
         BE    VOLCK210              IF YES, GO PROCESS SMF MATCH PHASE
         CLC   WR1DSN,WR2DSN         DID THE DSNAMES MATCH?
         BE    VOLCK210
         MVI   OT1FLG,C'1'           INDICATE SORTOT1 IS AT END
         MVI   WR1DSN,X'FF'          SET SORTOT1 DSNAME TO HIGH VALUES
         B     VOLCK246              GO PROCESS THE REST OF SORTOT2
VOLCK282 CLI   PHASEFLG,C'4'         IS THIS PHASE 4?
         BE    VOLCK288
         CLI   PHASEFLG,C'6'         IS THIS PHASE 6?
         BE    VOLCK291
         CLI   OT1FLG,C'1'           IS SORTOT1 FILE AT END?
         BE    VOLCK210
         CLC   WR1DSN,WR2DSN         DID THE DSNAMES MATCH?
         BE    VOLCK210
         MVI   OT2FLG,C'1'           INDICATE SORTOT2 IS AT END
         MVI   WR2DSN,X'FF'          SET SORTOT2 DSNAME TO HIGH VALUES
         B     VOLCK249              GO PROCESS THE REST OF SORTOT1
VOLCK285 MVI   WR1DSN,X'FF'          SET SORTOT1 DSNAME TO HIGH VALUES
         B     VOLCK333
VOLCK288 CLOSE (RPTHOLD,,SORTOT1,,SORTOT2)
         OPEN  (RPTHOLD,,SORTOT1,,SORTOT2,(OUTPUT),SORTIN,(OUTPUT))
         B     VOLCK204
VOLCK291 CLOSE (RPTHOLD,,SORTOT1,,SORTOT2)
         OPEN  (REPORT,(OUTPUT),RESTORES,(OUTPUT),RPTHOLD)
         MVC   HEADVOL,PARMVOL       MOVE PARM VOLUME TO THE REPORT
         MVC   HEADDATE,PARMDATE     MOVE PARM DATE TO THE REPORT
         MVC   HEADTIME,PARMTIME     MOVE PARM TIME TO THE REPORT
         MVI   WR2DSN,X'FF'          MAKE SURE NO INITIAL MATCH
         BAL   R7,VOLCK312           GO PRINT HEADINGS
VOLCK294 GET   RPTHOLD,RPTLINE       GET A REPORT RECORD
         CLC   RPTDSN,WR2DSN         IS DSNAME SAME AS PREVIOUS
         BE    VOLCK303              IF YES, GO BLANK IT OUT
         MVC   WR2DSN,RPTDSN         SAVE THE DSNAME FOR NEXT COMPARE
         CLC   RPTNOTE3,=C'IC'       IS THIS AN INDEX COMPONENT?
         BE    VOLCK306              IF YES, DON'T ISSUE A RESTORE
         CLC   RPTNOTE4,=C'MC'       IS THIS A MULTI-VOLUME CANDIDATE?
         BE    VOLCK306              IF YES, DON'T ISSUE A RESTORE
         CLC   RPTNOTE5,=C'AX'       IS THIS AN ALTERNATE INDEX?
         BE    VOLCK306              IF YES, DON'T ISSUE A RESTORE
         CLC   RPTNOTE2,=C'DC'       IS THIS A DATA COMPONENT?
         BE    VOLCK297              IF YES, PUT CLUSTER IN RESTORE
         MVC   RESTDSN,RPTDSN        SAVE DSNAME FOR RESTORE
         B     VOLCK300              GO WRITE RESTORE COMMAND
VOLCK297 MVC   RESTDSN,RPTCLUS       SAVE CLUSTER FOR RESTORE
VOLCK300 PUT   RESTORES,RESTLINE     WRITE OUT THE RESTORE COMMAND
         B     VOLCK306              GO PRINT THE REPORT LINE
VOLCK303 MVC   RPTDSN,SPACES         BLANK OUT DSNAME, SAME AS LAST ONE
         MVC   RPTCLUS,SPACES        BLANK OUT CLUSTER FOR SAME REASON
VOLCK306 CP    LINECNT,=P'60'        DO WE NEED HEADINGS
         BL    VOLCK309              NO, PRINT THE LINE
         BAL   R7,VOLCK312           GO PRINT HEADINGS
VOLCK309 PUT   REPORT,LINEVFC        PRINT REPORT LINE
         AP    LINECNT,=P'1'         ADD ONE TO REPORT LINE COUNTER
         B     VOLCK294              GO READ NEXT REPORT RECORD
VOLCK312 AP    PGE,=P'1'             ADD 1 TO PAGE COUNT
         MVC   HEADPAGE,=X'402020202020' PREPARE FOR PAGE EDIT
         ED    HEADPAGE,PGE          EDIT PAGE NUMBER INTO HEADING
         PUT   REPORT,HEADVFC1       WRITE HEADER LINE 1
         PUT   REPORT,HEADVFC2       WRITE HEADER LINE 2
         ZAP   LINECNT,=P'0'         SET LINE COUNT BACK TO 0
         BR    R7                    RETURN TO WHERE WE CAME FROM
VOLCK315 CLOSE RPTHOLD
         OPEN  (RPTHOLD,(OUTPUT))
         MVI   PHASEFLG,C'6'         INDICATE FINAL MATCH IN PROGRESS
         B     VOLCK321
VOLCK318 CLOSE (RPTHOLD,,SMFOUT)
         OPEN  (RPTHOLD,(OUTPUT))
VOLCK321 OPEN  (SORTOT1,,SORTOT2)
         MVI   LOGICFLG,C'1'         IN CASE SMF IS EMPTY 1ST TIME
         GET   SORTOT1,WORKREC1      GET AN SMF RECORD
VOLCK324 GET   SORTOT2,RPTLINE       GET A HELD REPORT RECORD
         MVI   LOGICFLG,C'0'         NO NEED TO WORRY ABOUT EMPTY FILE
VOLCK327 CLI   PHASEFLG,C'4'         IS THIS PHASE 4?
         BE    VOLCK330              IF YES, NEED TO CHECK CLUSTER NAME
         CLC   WR1DSN,RPTDSN         DO THE DSNAMES MATCH?
         BE    VOLCK339              IF YES, GO WRITE REPORT RECORD
         BL    VOLCK336              IF SMF IS LESS, BYPASS IT
         B     VOLCK333              GO WRITE REPORT RECORD
VOLCK330 CLC   WR1DSN,RPTCLUS        DO DSNAME/CLUSTER MATCH
         BE    VOLCK339              IF YES, GO WRITE REPORT RECORD
         BL    VOLCK336              IF SMF IS LESS, BYPASS IT
VOLCK333 CLI   LOGICFLG,C'1'         WAS LAST READ FROM SMF?
         BE    VOLCK324              IF YES, DON'T WRITE ANYTHING YET
         PUT   RPTHOLD,RPTLINE       WRITE OUT THE REPORT LINE
         B     VOLCK324              GO READ NEXT HEAD REPORT LINE
VOLCK336 GET   SORTOT1,WORKREC1      GET NEXT SMF RECORD
         B     VOLCK327              GO PROCESS IT
VOLCK339 MVC   RPTJOB,WR1JOB         SAVE SMF JOBNAME
         MVC   RPTDATE,WR1DATE       SAVE SMF DATE
         MVC   RPTTIME,WR1TIME       SAVE SMF TIME
         MVC   RPTTYPE,WR1FLG1       SAVE SMF TYPE FLAG
         PUT   RPTHOLD,RPTLINE       WRITE OUT THE REPORT LINE
         MVI   LOGICFLG,C'1'         INDICATE LAST READ WAS SMF
         GET   SORTOT1,WORKREC1      GET AN SMF EXTRACT RECORD
         B     VOLCK327              GO PROCESS IT
VOLCK342 CLOSE (REPORT,,RESTORES,,RPTHOLD)
VOLCK345 LA    R15,0                 ZERO RC
         L     R13,REGSAVE+4         RESTORE REGISTERS
         ST    R15,16(R13)                  AND
         LM    R14,R12,12(R13)                 GO
         BR    R14                                HOME
         LTORG
EXMOVE1  MVC    SAVECAT(0),16(R6)    EXECUTED MOVE
EXMOVE2  MVC    SAVEDSN(0),16(R6)    EXECUTED MOVE
EXMOVE3  MVC    SAVECLUS(0),16(R6)   EXECUTED MOVE
WTOCATL  WTO   'PROCESSING CATALOG:                                    X
                              ',MF=L
WTOBPARM WTO   '* BAD PARM DATA STARTING AT XXXXXXXX *',MF=L
REGSAVE  DS    18F                   REGISTER SAVE AREA
CATBUFLN DC    AL4(1024*128)         128K RECORD BUFFER
CATOPNER DC    AL4(0)                OPEN ERROR CODE
CATBUF   DC    AL4(0)
CATLGRPL DC    AL4(0)                MOVE MODE RPL FOR BCS ACCESS
GDGSAVE  DC    CL44' '               GDG BASE NAME
GDGWORK1 DC    CL44' '               WORKAREA TO DEVELOP ENTRY NAME
GDGWORK2 DC    D'0'
GDGWORK3 EQU   GDGWORK2+5,3
GDGWORK4 EQU   GDGWORK2+6,2
CATRECND DS    F
WORKREC1 DS    0CL130                RECORD WORK AREA 1
WR1DSN   DS    CL44
WR1CLUS  DS    CL44
WR1JOB   DS    CL8
WR1DATE  DS    CL5
WR1TIME  DS    CL4
WR1FLG1  DS    CL1
WR1FLG2  DS    CL1
WR1FLG3  DS    CL1
         DC    CL22' '
WORKREC2 DS    0CL130                RECORD WORK AREA 2
WR2DSN   DS    CL44
WR2CLUS  DS    CL44
         DS    CL17
WR2FLG1  DS    CL1
WR2FLG2  DS    CL1
WR2FLG3  DS    CL1
         DC    CL22' '
PARMVOL  DS    CL6                   VOLSER PARM INPUT
PARMDATE DC    X'0000000000'         DATE PARM INPUT
PARMTIME DC    X'00000000'           TIME PARM INPUT
LINECNT  DS    PL3'0'                PAGE LINE COUNT
PHASEFLG DC    C'0'                  FLAGS CURRENT PROCESSING MODE
*                0 - PREPARING TO READ EXTRACTED DCOLLECT DATA
*                1 - PREPARING TO READ SORTED DCOLLECT DATA
*                2 - PREPARING TO READ SORTED CATALOG DATA
*                3 - PREPARING TO READ COMBINED DCOLLECT/CATALOG DATA
*                4 - SORTING COMBINED DATA ON CLUSTER/COMPARE WITH SMF
*                5 - SORTING COMBINED DATA ON DSNAME/COMPARE WITH SMF
*                6 - FINAL REPORT BEING CREATED
FIRSTFLG DC    C'0'                  FIRST ENTRY IN CATALOG FLAG
TYPEFLG  DC    C'V'                  USED IN PROCESSING CATALOG VOLSER
NOT14FLG DC    C'0'                  INDICATES NEED FOR SMF TYPE 14
LOGICFLG DC    C'0'                  USED TO GUIDE VARIOUS LOGIC PATHS
OT1FLG   DC    C'0'                  EOF SORTOT1 FLAG
OT2FLG   DC    C'0'                  EOF SORTOT2 FLAG
NODCOFLG DC    C'0'                  INDICATES AVAILABILITY OF DCOLLECT
NOSMFFLG DC    C'0'                  INDICATES AVAILABILITY OF SMF
WRKFLG1  DS    CL1                   FLAG 1 WORK AREA
WRKFLG2  DS    CL1                   FLAG 2 WORK AREA
WRKFLG3  DS    CL1                   FLAG 3 WORK AREA
SORTPRM1 DC    CL41'1,44,CH,A)'      DSNAME SORT
SORTPRM2 DC    C'1,44,CH,A,89,8,CH,A,97,5,CH,A,102,4,CH,A)' SMF SORT
SORTPRM3 DC    CL41'46,44,CH,A),EQUALS' CLUSTER SORT
NOSMFLIT DC    C' USING NO SMF DATA   '
SPACES   DC    CL44' '               USED TO BLANK OUT FIELDS
RESTLINE DC    CL80' '               RESTORE COMMAND LINE
         ORG   RESTLINE
         DC    C' RESTORE DSN='
RESTDSN  DS    CL44                  RESTORE DSNAME
         ORG
LINEVFC  DC    C' '                  SINGLE LINE SPACING
RPTLINE  DC    CL130' '              REPORT LINE DETAIL
         ORG   RPTLINE
RPTDSN   DS    CL44                  DSNAME
         DC    C' '
RPTCLUS  DS    CL44                  ASSOCIATED CLUSTER NAME
         DC    C' '
RPTNOTE1 DS    CL4                   NO CAT/NO DCO
         DC    C' '
RPTNOTE2 DS    CL2                   DATA COMPONENT
         DC    C' '
RPTNOTE3 DS    CL2                   INDEX COMPONENT
         DC    C' '
RPTNOTE4 DS    CL2                   MULTI-VOLUME
         DC    C' '
RPTNOTE5 DS    CL2                   ALTERNATE INDEX
         DC    C' '
RPTJOB   DS    CL8                   SMF JOB
         DC    C' '
RPTDATE  DS    CL5                   SMF DATE
         DC    C' '
RPTTIME  DS    CL4                   SMF TIME
         DC    C'  '
RPTTYPE  DS    CL1                   SMF RECORD TYPE
         ORG
HEADVFC1 DC    C'1'                  TOP OF PAGE
HEADLNE1 DC    CL130' '              HEADING LINE 1
         ORG   HEADLNE1
         DC    CL35' '
         DC    C'ANALYSIS OF VOLUME '
HEADVOL  DS    CL6                   VOLUME ANALYSED
HEADLIT  DC    C' USING SMF DATA FROM '
HEADDATE DC    C'-----'              SMF DATE
HEADAT   DC    C' AT '
HEADTIME DC    C'----'               SMF TIME
         DC    CL28' '
         DC    C'PAGE'
HEADPAGE DS    CL6                   PAGE COUNT
         ORG
HEADVFC2 DC    C'0'                  SINGLE SPACE
         DC    0CL130' '             HEADING LINE 2
         DC    C'------------------ DSNAME ------------------'
         DC    C' '
         DC    C'============= ASSOCIATED CLUSTER ==========='
         DC    C' '
         DC    C'NOTE'
         DC    C' '
         DC    C'DC/IC/M*/AX'
         DC    C' '
         DC    C'  JOB   '
         DC    C' '
         DC    C'DATE '
         DC    C' '
         DC    C'TIME'
         DC    C' '
         DC    C'TYP'
SAVEINFO DC    CL130' '              INTERIM WORK AREA
         ORG   SAVEINFO
SAVEDSN  DS    CL44                  DSNAME
SAVECLUS DS    CL44                  CLUSTER NAME
SAVEJOB  DC    C'        '           JOBNAME
SAVEDATE DC    C'     '              DATE
SAVETIME DC    C'    '               TIME
SAVEFLG1 DC    C'0'                  MULTI-VOL FLAG/SMF TYPE
SAVEFLG2 DC    C'0'                  AIX FLAG
SAVEFLG3 DC    C'0'                  COMPONENT FLAG
         ORG
SAVECAT  DS    CL44                  CATALOG NAME SAVE
DBL      DC    D'0'                  USED FOR TIME CONVERSION
PGE      DC    PL2'0'                PAGE COUNT
SMFDATE  DC    F'0'                  HOLD SMF DATE
SMFTIME  DC    F'0'                  HOLD SMF TIME
         CNOP  2,4
BYTECNT  DC    Y(24)                 SORT PARAMETERS
         DC    A(SORTBEG)
         DC    A(SORTEND)
         DC    A(RECBEG)
         DC    A(RECEND)
         DC    2F'0'
POINTER  DC    X'80'
         DC    AL3(BYTECNT)
SORTBEG  DC    C' SORT FIELDS=('
SORTPARM DC    CL41'1,44,CH,A)'      INITIAL SORT IS ON DSNAME
SORTEND  DC    C' '
RECBEG   DC    C' RECORD TYPE=F,LENGTH=130'
RECEND   DC    C' '
SORTOT1  DCB   DDNAME=SORTOT1,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         X
               LRECL=130,EODAD=VOLCK279
SORTOT2  DCB   DDNAME=SORTOT2,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         X
               LRECL=130,EODAD=VOLCK282
CATLGOUT DCB   DDNAME=CATLGOUT,DSORG=PS,MACRF=(GM,PM),RECFM=FB,        X
               LRECL=130,EODAD=VOLCK216
SMFOUT   DCB   DDNAME=SMFOUT,DSORG=PS,MACRF=(GM,PM),RECFM=FB,          X
               LRECL=130,EODAD=VOLCK216
DCOLOUT  DCB   DDNAME=DCOLOUT,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         X
               LRECL=130,EODAD=VOLCK216
DCOLIN   DCB   DDNAME=DCOLIN,DSORG=PS,MACRF=GL,EODAD=VOLCK150
REPORT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=131
RPTHOLD  DCB   DDNAME=RPTHOLD,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         X
               LRECL=130,EODAD=VOLCK216
RESTORES DCB   DDNAME=RESTORES,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80
SORTOUT  DCB   DDNAME=SORTOUT,DSORG=PS,MACRF=GM,EODAD=VOLCK234,        X
               LRECL=130
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=130
SMFIN    DCB   DDNAME=SMFIN,DSORG=PS,MACRF=GL,EODAD=VOLCK189,BFTEK=A
CATLGACB ACB   AM=VSAM,DDNAME=ICFCATXX,EXLST=CATLGEXL,                 X
               BUFNI=16,BUFND=16
CATLGEXL EXLST EODAD=VOLCK063
         IFGACB
         IDCDOUT
         IFASMFR 62
         IFASMFR 14
         CVT   DSECT=YES
JFCB     DSECT
         IEFJFCBN
         END


Ernie Ishman
Manager, Systems Support
Geisinger System Services (USA)                                           c Xephon 1994

