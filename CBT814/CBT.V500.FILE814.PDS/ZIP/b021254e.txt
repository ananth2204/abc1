A REXX command to retrieve MVS information

The following piece of Assembler code attempts to provide a
common routine to retrieve MVS information and place it in
REXX variables. Once this is accomplished, the variables can be
referenced by other applications very easily. It avoids 're-
inventing the wheel' when commonly-used MVS system
information is required.

The REXX stemmed variable structure proves ideal when dealing
with any MVS information that is in the form of a table, such as
the system LINKLIST or LPALIST. The REXX variables can be
placed in ISPF profile pools (by the VPUT service) and used
throughout an ISPF session, for example placing the SMF
system-id on an ISPF panel to remind a user of multiple MVS
systems which one is being used.

The syntax is:

  {var} = MVSVAR({parms})

where parms can be any combination (in any order) of the
following:

o      APF - APF list information.

      The information returned in REXX stems is:

      -      MVSAPF.i - APF library name

      -      MVSAPV.i - APF library volume serial.

o      LNK - system LINKLIST information.

      The information returned in REXX stems is:

      -      MVSLNK.i - LINKLIST library name.

o      LPA - system LPALIST information.

      The information returned in a REXX stem is:

      -      MVSLPA.i - LPALIST library name.

      SYS - Other system information.

      The information returned in REXX variables is:

      MVSSID - SMF system-id

      MVSIPLV - SYSRES volume serial number

      MVSIPLA - SYSRES device address

      MVSCPU - CPU serial number (last five digits)

      MVSMCAT - Master Catalog name

      MVSIPLT - Last IPL time

      MVSIPLD - Last IPL date (DDMMYYYY)

      MVSIPLJ - Last IPL date (YYDDD)

      MVSFMID - MVS FMID

      MVSNUC - MVS nucleus-id

      MVSIOC - MVS I/O configuration-id.

      TSO - TSO dataset allocations.

      The information returned in REXX variables is:

      MVSISPL.i - ISPLLIB libraries

      MVSISPP.i - ISPPLIB libraries

      MVSISPM.i - ISPMLIB libraries

      MVSISPS.i - ISPSLIB libraries

      MVSISPT.i - ISPTLIB libraries

      MVSSYSP.I - SYSPROC libraries

      MVSSTEP.I - STEPLIB libraries.

EXAMPLE 1

The following code puts the SMF system-id and IPL volume into
ISPF variables.

/* REXX */
x = mvsvar(sys)
address ISPEXEC "VPUT (MVSSID MVSIPLV) PROFILE"

EXAMPLE 2

The following code searches LINKLIST for a module.

/* REXX */
arg mem .
i = 1
qu = "'"
x = mvsvar(lnk)
do while i <= mvslnk.0
   mvslnk.i = strip(mvslnk.i)
   if sysdsn(qu||mvslnk.i||'('mem')'||qu) = OK then
       say mem 'was found in ' mvslnk.i
   i = i + 1
   end

MVSVAR SOURCE CODE

The following code can easily be modified to include any other
MVS information that is required. Register 5 always contains the
address of the CVT, and registers 6,7, and 11 can be used to
address any subsequent control blocks.

The macro CVH appeared in Paul Lemmon's article Command
line update of LINKLIST, MVS Update, September 1991.

MVSVAR   TITLE 'REXX COMMAND TO RETRIEVE MVS DATA'
*********************************************************************
* PROGRAM TO RETRIEVE THE MVS INFORMATION AND RETURN IT IN A        *
* REXX VARIABLE .                                                   *
*********************************************************************
MVSVAR    CSECT                               *
MVSVAR    AMODE 31                            *
MVSVAR    RMODE ANY                           *
          BAKR  R14,R0                        * INIT STUFF
          LR    R12,R15                       *
          USING MVSVAR,R12                    *
          LR    R2,R1                         * SAVE PARMS
          USING EFPL,R2                       * ADDR REXX FUNC PARMS
          L     R3,EFPLEVAL                   * ADDR OF ADDR
          L     R3,0(R3)                      * REXX EVAL BLOCK ADDR
          USING EVALBLOCK,R3                  * ADDRESS IT
          L     R4,EFPLARG                    * REXX ARG LIST
          USING ARGTABLE_ENTRY,R4             * ADDRESS ARG TABLE
          CLC   0(4,R4),=XL4'FFFFFFFF'        * NO ARGS ?
          BNE   GETARGS                       *
          OI    PARMFLAG,WANTALL              * INDICATE EVERYTHING
          B     GETINFO                       * DO SUBROUTINES
* PROCESS THE FIRST ARG PASSED IN THE REXX COMMAND                  *
GETARGS   EQU   *
          L     R6,ARGTABLE_ARGSTRING_PTR     * R6 POINTS TO ARG
          L     R7,ARGTABLE_ARGSTRING_LENGTH  * R7 POINTS TO LENGTH
          C     R6,=XL4'FFFFFFFF'             * END OF ARGS ?
          BE    GETINFO                       * YES - GET OUT
          C     R7,=F'3'                      * LENGTH 3 ?
          BNE   ERROR
CHECK1    EQU   *
          CLC   0(3,R6),=C'LNK'               * WANT LINKLIST ?
          BNE   CHECK2                        * NO - NEXT
          OI    PARMFLAG,WANTLNK              * SET FLAG
          B     ARGNEXT                       *
CHECK2    EQU   *
          CLC   0(3,R6),=C'LPA'               * WANT LPALIST  ?
          BNE   CHECK3                        * NO - NEXT
          OI    PARMFLAG,WANTLPA              * SET FLAG
          B     ARGNEXT                       *
CHECK3    EQU   *
          CLC   0(3,R6),=C'APF'               * WANT APFLIST  ?
          BNE   CHECK4                        * NO - NEXT
          OI    PARMFLAG,WANTAPF              * SET FLAG
          B     ARGNEXT                       *
CHECK4    EQU   *
          CLC   0(3,R6),=C'SYS'               * WANT SYSTEM INFO ?
          BNE   CHECK5                        * NO - NEXT
          OI    PARMFLAG,WANTSYS              * SET FLAG
CHECK5    EQU   *
          CLC   0(3,R6),=C'TSO'               * WANT SYSTEM INFO ?
          BNE   ARGNEXT                       * NO - NEXT
          OI    PARMFLAG,WANTTSO              * SET FLAG
ARGNEXT   EQU   *                             *
          LA    R4,8(R4)                      * POINT TO NEXT ARG
          B     GETARGS
* DECIDE HOW MUCH INFORMATION HAS BEEN REQUESTED BY TESTING THE     *
* FLAG AND THEN BRANCHING TO THE REQUIRED SUBROUTINES               *
GETINFO   EQU   *
          L     R5,CVTPTR                     * POINT TO CVT
          USING CVTMAP,R5                     * ADDR IT
CHKLNK    EQU   *
          TM    PARMFLAG,WANTLNK              * LINKLIST ?
          BNO   CHKLPA                        * NO - CHECK NEXT
          BAL   R9,LNKSET                     * GET LINKLIST INFO
CHKLPA    EQU   *
          TM    PARMFLAG,WANTLPA              * LPALIST ?
          BNO   CHKAPF                        * NO - CHECK NEXT
          BAL   R9,LPASET                     * GET LPALIST INFO
CHKAPF    EQU   *
          TM    PARMFLAG,WANTAPF              * APFLIST ?
          BNO   CHKSYS                        * NO - CHECK NEXT
          BAL   R9,APFSET                     * GET APFLIST INFO
CHKSYS    EQU   *
          TM    PARMFLAG,WANTSYS              * SYSTEM INFO ?
          BNO   CHKTSO                        * NO - CHECK NEXT
          BAL   R9,SYSSET                     * GET SYSTEM INFO
CHKTSO    EQU   *
          TM    PARMFLAG,WANTTSO              * TSO INFO    ?
          BNO   EXIT                          * NO - CHECK NEXT
          BAL   R9,TSOSET                     * GET TSO INFO
          B     EXIT
* ROUTINE TO GET THE SYSTEM INFORMATION INTO REXX VARIABLES         *
SYSSET    EQU   *
          L     R6,CVTSMCA                    * POINT TO SMCA
          USING SMCABASE,R6                   * ADDR IT
* SET UP REXX VAR 'MVSSID'                                          *
          MVC   NAME+3(3),=C'SID'             * SET UP MVSSID
          MVC   NAMELEN,=F'6'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(4),SMCASID              * MOVE IN SYSID
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSIPLT' AND 'MVSIPLD'                           *
          MVC   NAME+3(4),=C'IPLT'            * SET UP MVSIPLT
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   INBINTME,SMCAITME             * MOVE IN IPL TIME
          MVC   INDATE,SMCAIDTE               * MOVE IN IPL DATE
* THE IPL TIME IS IN STORED IN BINARY FORMAT IN THE SMCA.           *
* THE EASIEST WAY TO CONVERT IT TO DECIMAL FORMAT IS TO TURN IT     *
* INTO A TOD VALUE (USING THE CONVTOD MACRO) AND THEN CONVERT THAT  *
* TOD VALUE TO DECIMAL BY USING THE STCKCONV MACRO.                 *
          CONVTOD CONVVAL=INTOD,              * CONVERT TO TOD VALUE
               TODVAL=OUTTOD,                 *
               TIMETYPE=BIN,                  * SMCAITME IS IN BINARY
               DATETYPE=YYDDD                 * SMCAIDTE IS JULIAN
          STCKCONV STCKVAL=OUTTOD,            * CONVERT TO DEC TIME
               CONVVAL=OUTCONV,               *
               TIMETYPE=DEC,                  * DECIMAL TIME VALUE
               DATETYPE=DDMMYYYY              * READABLE DATE FORMAT
          L     R15,OUTCONV                   * POINT TO TIME
          CVH   R15,PWORK,8                   * MAKE READABLE
          MVC   VALUE(2),PWORK                * MOVE IN HOURS
          MVI   VALUE+2,C':'                  *
          MVC   VALUE+3(2),PWORK+2            * MOVE IN MINUTES
          MVI   VALUE+5,C':'                  *
          MVC   VALUE+6(2),PWORK+4            * MOVE IN SECONDS
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   NAME+3(4),=C'IPLD'            * SET UP MVSIPLD
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          L     R15,OUTCONV+8                 * LOAD UP IPL DATE
          CVH   R15,VALUE,8                   * MAKE IT PRINTABLE
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSIPLJ'                                         *
          MVC   NAME+3(4),=C'IPLJ'            * SET UP MVSIPLJ
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          L     R15,SMCAIDTE                  * LOAD UP IPL DATE
          CVH   R15,PWORK,8                   * MAKE READABLE
          MVC   VALUE(5),PWORK+2              * MOVE IN TO RESULT
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSCPU'                                          *
          L     R6,CVTPCCAT                   * POINT TO PCCA
          USING PCCAVT,R6                     * ADDR IT
          L     R7,0(R6)                      * POINT TO FIRST
          USING PCCA,R7                       * ADDR IT
          MVC   NAME+3(3),=C'CPU'             * SET UP MVSCPU
          MVC   NAMELEN,=F'6'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(5),PCCACPID+3           * MOVE IN CPUID
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSIPLV' AND 'MVSIPLA'                           *
          L     R6,CVTSYSAD                   * POINT TO SYSRES UCB
          USING UCBCMSEG,R6                   * ADDR IT
          MVC   NAME+3(4),=C'IPLV'            * SET UP MVSIPLV
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(6),UCBVOLI              * MOVE IN VOLSER
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   NAME+3(4),=C'IPLA'            * SET UP MVSIPLA
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(3),UCBNAME              * MOVE IN CUA
          BAL   R10,LINK441                   * CALL IKJCT441
* THE NEXT PART OF THE CODE TRIES TO FIND THE NAME OF THE CURRENT   *
* MASTER CATALOG.  THE CONTROL BLOCK FLOW WAS DOCUMENTED IN A VSAM  *
* LOGIC MANUAL - THE LOCATION OF THIS STRUCTURE COULD WELL BE MOVED *
* IN FUTURE RELEASES OF DFP.                                        *
          L     R6,CVTCBSP                    * POINT TO AMCB
          L     R7,20(R6)                     * POINT TO CAX
MASTCAT   EQU   *
          LTR   R7,R7                         * ZERO ADDRESS ?
          BZ    ENDCAT                        * YES - GIVE UP
          TM    8(R7),X'04'                   * MASTER CATALOG ?
          BO    GOTMCAT                       * YES - MOVE IT
          L     R7,4(R7)                      * INCR R7
          B     MASTCAT                       * LOOP
GOTMCAT   EQU   *
          MVC   NAME+3(4),=C'MCAT'            * SET UP MVSMCAT
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(44),52(R7)              * MOVE IN CATNAME
          BAL   R10,LINK441                   * CALL IKJCT441
ENDCAT    EQU   *
* SET UP REXX VAR 'MVSFMID'                                         *
          LR    R6,R5                         * COPY CVT ADDRESS
          S     R6,=F'256'                    * -256 FOR PREFIX
          USING CVTFIX,R6                     * ADDRESS IT
          MVC   NAME+3(4),=C'FMID'            * SET UP MVSFMID
          MVC   NAMELEN,=F'7'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(8),CVTPRODI             * MOVE IN FMID
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSNUC'                                          *
          L     R6,CVTEXT2                    * POINT TO CVTEXT2
          USING CVTXTNT2,R6
          MVC   NAME+3(4),=C'NUC'             * SET UP MVSNUC
          MVC   NAMELEN,=F'6'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(7),=C'IEANUC0'          * SET UP NUC NAME
          MVC   VALUE+7(1),CVTNUCLS           * INDICATE LEVEL
          BAL   R10,LINK441                   * CALL IKJCT441
* SET UP REXX VAR 'MVSIOC'                                          *
          MVC   NAME+3(4),=C'IOC'             * SET UP MVSNUC
          MVC   NAMELEN,=F'6'                 * SET UP LENGTH
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          MVC   VALUE(2),CVTIOCID             * INDICATE IO CONFIG
          BAL   R10,LINK441                   * CALL IKJCT441
          BR    R9
* ROUTINE TO GET THE TSO DATASETS INTO REXX STEMMED VARIABLES       *
* ISPLLIB - 'MVSISPL.'                                              *
* ISPMLIB - 'MVSISPM.'                                              *
* ISPPLIB - 'MVSISPP.'                                              *
* ISPSLIB - 'MVSISPS.'                                              *
* SYSPROC - 'MVSSYSP.'                                              *
* STEPLIB - 'MVSSTEP.'                                              *
TSOSET    EQU   *
          EXTRACT ADDRTIOT,FIELDS=(TIOT)      * GET TIOT ADDRESS
          L     R6,ADDRTIOT                   * LOAD INTO R6
          USING TIOT,R6                       * ADDRESS TIOT
          LA    R6,TIOELNGH-TIOT1(,R6)        * POINT TO FIRST ENTRY
          USING TIOENTRY,R6                   * ADDRESS IT
TSOLOOP   EQU   *
          LA    R11,0                         * CLEAR R11
          ICM   R11,B'0001',TIOELNGH          * GET LENGTH OF ENTRY
          BZ    ENDTSO                        * END OF TIOT
          CLC   TIOEDDNM,=CL8'ISPLLIB'        * IS IT ISPLLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'ISPPLIB'        * IS IT ISPPLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'ISPMLIB'        * IS IT ISPMLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'ISPTLIB'        * IS IT ISPTLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'ISPSLIB'        * IS IT ISPSLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'STEPLIB'        * IS IT STEPLIB ?
          BE    TSODDS                        * YES - DO IT
          CLC   TIOEDDNM,=CL8'SYSPROC'        * IS IT SYSPROC ?
          BE    TSODDS                        * YES - DO IT
          LA    R6,0(R11,R6)                  * POINT TO NEXT ENTRY
          B     TSOLOOP
TSODDS    EQU   *
          MVC   DDPREF(4),TIOEDDNM            * MOVE IN PREFIX
          MVC   PCNT,=PL2'1'                  * INIT COUNT
          MVC   NAME+3(4),DDPREF              * SET UP MVSXXXX
          MVI   NAME+7,C'.'
DDLOOP    EQU   *
          CLC   TIOEDDNM(8),=CL8' '           * SPACES
          BE    DDADD                         * YES - CARRY ON
          CLC   DDPREF(4),TIOEDDNM            * IS IT STILL SAME DD ?
          BE    DDADD                         * YES - CARRY ON
          MVC   NAME+3(4),DDPREF              * MOVE IN PREFIX
          MVC   NAME+7(2),=C'.0'              * SET UP .0 VAR
          MVC   NAMELEN,=F'9'                 * SET UP NAME LENGTH
          MVC   VALUE(44),=CL44' '
          MVC   VALUE(2),UCNT+2               * MOVE IN VALUE
          BAL   R10,LINK441                   * CALL IKJCT441
          B     TSOLOOP                       * GO BACK
DDADD     EQU   *
          UNPK  UCNT,PCNT                     * UNPACK LOOP COUNT
          OI    UCNT+3,X'F0'                  * GET RID OFF SIGN
          CLI   UCNT+2,X'F0'                  * IS THERE A ZERO?
          BE    DDAST1                        * YES - COUNT < 10
          MVC   NAMELEN,=F'10'                * SET LENGTH OF NAME
          MVC   NAME+8(2),UCNT+2              * MOVE IN LOOP COUNT
          B     DDVALUE                       * GET VALUE
DDAST1    EQU   *
          MVC   NAME+8(1),UCNT+3              * MOVE IN LOOP COUNT
          MVC   NAMELEN,=F'9'                 * SET LENGTH OF NAME
DDVALUE   EQU   *
          LA    R7,0                          * ZERO R7
          ICM   R7,B'0111',TIOEJFCB           * POINT TO JFCB
          LA    R7,16(R7)                     * BUMP PAST HEADER
          USING INFMJFCB,R7                   * ADDRESS JFCB
          MVC   VALUE(44),JFCBDSNM            * MOVE IN DSNAME
          BAL   R10,LINK441                   * CALL IKJCT441
          LA    R6,0(R11,R6)                  * POINT TO NEXT ENTRY
          AP    PCNT,=PL2'1'                  * INCREMENT COUNT
          B     DDLOOP                        * LOOP BACK
ENDTSO    EQU   *
          BR    R9
* ROUTINE TO GET THE LPA DATASETS INTO THE STEMMED REXX VARIABLE    *
* 'MVSLPA.'                                                         *
LPASET    EQU   *
          L     R6,CVTSMEXT                   * POINT TO STOR SECT
          USING CVTVSTGX,R6                   * ADDR IT
          L     R6,CVTEPLPS                   * POINT TO LPA TABLE
          USING LPAT,R6                       * ADDR IT
          LA    R7,LPATDSN                    * POINT TO DSNAME
          L     R8,LPATCNT                    * LOAD COUNT
          CVD   R8,PWORK                      * CONVERT TO DEC
          UNPK  UWORK,PWORK                   * UNPACK IT
          OI    UWORK+3,X'F0'                 * GET RID OF SIGN
          MVC   NAME+3(4),=C'LPA.'            * SET UP MVSLPA.
          MVC   NAME+7(1),=C'0'               * SET UP MVSLPA.0
          MVC   VALUE(2),UWORK+2              * SET UP NUMBER
          MVC   NAMELEN,=F'8'                 * LENGTH OF VAR NAME
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   PCNT,=PL2'1'                  * INIT COUNT
LPALOOP   EQU   *
          MVC   VALUE(44),0(R7)               * MOVE DSNAME TO VAR
          UNPK  UCNT,PCNT                     * UNPACK LOOP COUNT
          OI    UCNT+3,X'F0'                  * GET RID OFF SIGN
          CLI   UCNT+2,X'F0'                  * IS THERE A ZERO?
          BE    LPAST1                        * YES - COUNT < 10
          MVC   NAME+7(2),UCNT+2              * NO - COUNT > 10
          MVC   NAMELEN,=F'9'                 * SET LENGTH OF NAME
          B     LPANEXT                       * GET NEXT
LPAST1    EQU   *
          MVC   NAME+7(1),UCNT+3              * MOVE IN LOOP COUNT
          MVC   NAMELEN,=F'8'                 * SET LENGTH OF NAME
LPANEXT   EQU   *
          BAL   R10,LINK441                   * CALL IKJCT441
          LA    R7,45(R7)                     * POINT TO NEXT ENTRY
          AP    PCNT,=PL2'1'                  * ADD TO LOOP COUNT
          MVC   NAME+7(2),=C'  '              * BLANK OUT NAME
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          BCT   R8,LPALOOP                    * LOOP FOR ALL DSNAMES
          BR    R9
* ROUTINE TO GET THE LINKLIST DATASETS INTO THE STEMMED VARIABLE    *
* 'MVSLNK.'                                                         *
LNKSET    EQU   *
          L     R6,CVTLLTA                    * POINT TO LNK TABLE
          USING LLT,R6                        * ADDR IT
          LA    R7,LLTDSN                     * POINT TO DSNAME
          L     R8,LLTCOUNT                   * LOAD COUNT
          CVD   R8,PWORK                      * CONVERT TO DEC
          UNPK  UWORK,PWORK                   * UNPACK IT
          OI    UWORK+3,X'F0'                 * GET RID OF SIGN
          MVC   NAME+3(4),=C'LNK.'            * SET UP MVSLNK.
          MVC   NAME+7(1),=C'0'               * SET UP MVSLNK.0
          MVC   VALUE(2),UWORK+2              * SET UP NUMBER
          MVC   NAMELEN,=F'8'                 * LENGTH OF VAR NAME
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   PCNT,=PL2'1'                  * INIT COUNT
LNKLOOP   EQU   *
          MVC   VALUE(44),0(R7)               * MOVE DSNAME TO VAR
          UNPK  UCNT,PCNT                     * UNPACK LOOP COUNT
          OI    UCNT+3,X'F0'                  * GET RID OFF SIGN
          CLI   UCNT+2,X'F0'                  * IS THERE A ZERO?
          BE    LNKST1                        * YES - COUNT < 10
          MVC   NAME+7(2),UCNT+2              * NO - COUNT > 10
          MVC   NAMELEN,=F'9'                 * SET LENGTH OF NAME
          B     LNKNEXT                       * GET NEXT
LNKST1    EQU   *
          MVC   NAME+7(1),UCNT+3              * MOVE IN LOOP COUNT
          MVC   NAMELEN,=F'8'                 * SET LENGTH OF NAME
LNKNEXT   EQU   *
          BAL   R10,LINK441                   * CALL IKJCT441
          LA    R7,45(R7)                     * POINT TO NEXT ENTRY
          AP    PCNT,=PL2'1'                  * ADD TO LOOP COUNT
          MVC   NAME+7(2),=C'  '              * BLANK OUT NAME
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          BCT   R8,LNKLOOP                    * LOOP FOR ALL DSNAMES
          BR    R9
* ROUTINE TO GET THE APFLIST  DATASETS INTO THE STEMMED VARIABLE    *
* 'MVSAPF.' (AND 'MVSAPV.' FOR VOLUME SERIALS).                     *
APFSET    EQU   *
          L     R6,CVTAUTHL                   * POINT TO APF TABLE
          USING AUTHL,R6                      * ADDR IT
          LH    R8,AUTHNO                     * LOAD NO. ENTRIES
          CVD   R8,PWORK                      * CONVERT TO DEC
          UNPK  UWORK,PWORK                   * UNPACK IT
          OI    UWORK+3,X'F0'                 * GET RID OF SIGN
          MVC   NAME+3(4),=C'APF.'            * SET UP MVSAPF.
          MVC   NAME+7(1),=C'0'               * SET UP MVSAPF.0
          MVC   VALUE(3),UWORK+1              * SET UP NUMBER
          MVC   NAMELEN,=F'8'                 * LENGTH OF VAR NAME
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   NAME+3(4),=C'APV.'            * SET UP MVSAPV.
          MVC   NAME+7(1),=C'0'               * SET UP MVSAPV.0
          MVC   VALUE(3),UWORK+1              * SET UP NUMBER
          MVC   NAMELEN,=F'8'                 * LENGTH OF VAR NAME
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   PCNT,=PL2'1'                  * INIT COUNT
          LA    R7,AUTHENT                    * POINT TO 1ST ENTRY
APFLOOP   EQU   *
          LA    R11,0                         * ZERO R11
          ICM   R11,B'0001',0(R7)             * LOAD LENGTH OF ENTRY
          MVC   NAME+3(4),=C'APV.'            * SET UP MVSAPV.
          MVC   VALUE(6),1(R7)                * MOVE VOLSER TO VAR
          UNPK  UCNT,PCNT                     * UNPACK LOOP COUNT
          OI    UCNT+3,X'F0'                  * GET RID OF SIGN
          CLI   UCNT+1,X'F0'                  * IS THERE A ZERO?
          BNE   APFST2                        * NO  - COUNT > 99
          CLI   UCNT+2,X'F0'                  * IS THERE A ZERO?
          BNE   APFST1                        * NO  - COUNT > 9
          MVC   NAME+7(1),UCNT+3              * NO - COUNT < 10
          MVC   NAMELEN,=F'8'                 * SET LENGTH OF NAME
          BAL   R10,LINK441                   * CALL IKJCT441
          MVC   NAME+3(4),=C'APF.'            * SET UP MVSAPV.
          MVC   NAME+7(1),UCNT+3              * COUNT < 10
          S     R11,=F'7'                     * MINUS 7 FOR MOVE
          EX    R11,AUTHMOVE                  * MOVE IN AUTHLIB
          LA    R11,8(R11)                    * ADD 7 BACK
          BAL   R10,LINK441                   * CALL IKJCT441
          B     APFNEXT                       * GET NEXT
APFST2    EQU   *
          MVC   NAME+7(3),UCNT+1              * MOVE IN LOOP COUNT
          MVC   NAMELEN,=F'10'                * SET LENGTH OF NAME
          BAL   R10,LINK441                   * CALL IKJCT411
          MVC   NAME+3(4),=C'APF.'            * SET UP MVSAPV.
          MVC   NAME+7(3),UCNT+1              * COUNT > 100
          S     R11,=F'7'                     * MINUS 7 FOR MOVE
          EX    R11,AUTHMOVE                  * MOVE IN AUTHLIB
          LA    R11,8(R11)                    * ADD 7 BACK
          BAL   R10,LINK441                   * CALL IKJCT441
          B     APFNEXT                       * GET NEXT
APFST1    EQU   *
          MVC   NAME+7(2),UCNT+2              * MOVE IN LOOP COUNT
          MVC   NAMELEN,=F'9'                 * SET LENGTH OF NAME
          BAL   R10,LINK441                   * CALL IKJCT411
          MVC   NAME+3(4),=C'APF.'            * SET UP MVSAPV.
          MVC   NAME+7(2),UCNT+2              * COUNT < 99
          S     R11,=F'7'                     * MINUS 7 FOR MOVE
          EX    R11,AUTHMOVE                  * MOVE IN AUTHLIB
          LA    R11,8(R11)                    * ADD 7 BACK
          BAL   R10,LINK441                   * CALL IKJCT441
          B     APFNEXT                       * GET NEXT
APFNEXT   EQU   *
          AR    R7,R11                        * INCR R7
          AP    PCNT,=PL2'1'                  * ADD TO LOOP COUNT
          MVC   NAME+7(3),=C'   '             * BLANK OUT NAME
          MVC   VALUE(44),=CL44' '            * BLANK OUT VALUE
          BCT   R8,APFLOOP                    * DO FOR ALL
          BR    R9
* ROUTINE TO LINK TO IKJCT441 AND UPDATE THE TSO/REXX VARIABLE       *
LINK441   EQU   *
          LINK   EP=IKJCT441,
               PARAM=(ECODE,           * ENTRY CODE
               NAMEPTR,                * POINTER TO VARIABLE NAME
               NAMELEN,                * LENGTH OF VARIABLE NAME
               VALUEPTR,               * POINTER TO VARIABLE VALUE
               VALUELEN,               * LENGTH OF VARIABLE VALUE
               TOKEN),                 * TOKEN TO VAR ACCESS RTN
               VL=1                    * HIGH BIT IN PARM LIST
          LTR    R15,R15               * ALL OK ?
          BNZ    ERROR                 * NOPE - SET RC
          BR     R10                   * RETURN TO CALLER
* ERROR ROUTINES                                                     *
ERROR     EQU   *
          MVC   EVALBLOCK_EVLEN(4),=F'2'      * SET LENGTH OF RESULT
          MVC   EVALBLOCK_EVDATA(3),=C'-3'    * MOVE IN RESULT DATA
          LA    R15,8                         * SET RC = 8
          PR                                  * RETURN TO CALLER
EXIT      EQU   *
          MVC   EVALBLOCK_EVLEN(4),=F'1'      * SET LENGTH OF RESULT
          MVC   EVALBLOCK_EVDATA(1),=C'0'     * MOVE IN RESULT DATA
          LA    R15,0                         * SET RC = 0
          PR                                  * RETURN TO CALLER
* STORAGE DEFINITIONS AND DSECTS                                     *
          LTORG
INTOD     DS    0F                            * TIME CONVERSION VARS
INBINTME  DS    F                             *
          DC    F'0'                          *
INDATE    DS    F                             *
          DS    F                             *
OUTTOD    DS    D                             *
OUTCONV   DS    2D                            *
DDPREF    DS    CL4                           * DDNAME PREFIX
ADDRTIOT  DS    F                             * TIOT ADDRESS
NAME      DC    CL16'MVSXXX.1'                * VARIABLE NAME
NAMELEN   DC    F'8'                          * LENGTH OF VARIABLE
PARMFLAG  DC    X'00'                         * PARM FLAG
          DS    0F                            *
VALUE     DC    CL44' '                       * VALUE
VALUELEN  DC    F'44'                         * LENGTH OF VALUE
NAMEPTR   DC    A(NAME)                       * POINTER TO VAR
VALUEPTR  DC    A(VALUE)                      * POINTER TO VALUE
TOKEN     DC    F'0'                          * TOKEN
ECODE     DC    A(TSVEUPDT)                   * UPDATE ENTRY CODE
          DS    0D                            *
PWORK     DS    D                             * PACKED WORK AREA
UWORK     DS    F                             * UNPACKED WORK AREA
PCNT      DS    PL2                           * PACKED COUNT FIELD
UCNT      DS    F                             * UNPACKED COUNT FIELD
AUTHMOVE  MVC   VALUE(0),7(R7)                * EXECUTED MOVE
AUTHL     DSECT                               * APF TABLE DSECT
AUTHNO    DS    H                             *
AUTHENT   DS    0CL51                         *
AUTHLEN   DS    X                             *
AUTHVOL   DS    CL6                           *
AUTHDSN   DS    CL44                          *
LLT       DSECT                               * LLT TABLE DSECT
LLTHEAD   DS    CL4'LLT '                     * HEADER
LLTCOUNT  DS    F                             * COUNT
LLTDSLTH  DS    X                             * DSN LENGTH
LLTDSN    DS    CL44' '                       * DSNAME
LPAT      DSECT                               * LPA TABLE DSECT
LPAHEAD   DS    CL4'LPAT'                     * HEADER
LPATCNT   DS    F                             * COUNT
LPATDSLN  DS    X                             * DSN LENGTH
LPATDSN   DS    CL44' '                       * DSNAME
          IRXEFPL                             * REXX MAPPING MACROS
          IKJTSVT                             *
          IRXEVALB                            *
          IRXARGTB DECLARE=YES                *
          CVT DSECT=YES,LIST=YES,PREFIX=YES   * MVS MAPPING MACROS
          IEESMCA                             *
          IHAPSA                              *
TIOT      DSECT
          IEFTIOT1                            *
          IEFJFCBN                            *
          IEFUCBOB                            *
          IHAPCCA                             *
          IHAPCCAT                            *
WANTALL   EQU  X'FF'                          * FLAG SETTINGS
WANTLNK   EQU  X'01'                          *
WANTLPA   EQU  X'02'                          *
WANTAPF   EQU  X'04'                          *
WANTSYS   EQU  X'08'                          *
WANTTSO   EQU  X'10'                          *
          END


Rob Scott
Operating Systems Team,
SmithKline Beecham (UK)                                                           c Xephon 1994

