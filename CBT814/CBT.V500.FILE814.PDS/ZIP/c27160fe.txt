Dynamically updating tables within JES2
Our installation recently installed two Xerox 4050 laser printers as
replacements for our aging 3203 impact printers.  Output onto the laser printers
is achieved through a control language which provides many additional
capabilities over the old 3203s.  However, our development staff did not relish
the idea of a major migration effort just to get our normal production output
printed correctly.  Fortunately, several firms have developed some standard JES2
exits (namely Exits 1 and 15), which provided us with a quick way to generate
the necessary control statements and thus avoid rewriting most of our production
jobs.  (File 89 of the SHARE ÔJES2 modsÕ tape has these exits if you need them.)
We still needed a way to keep our production programs from being recoded in the
case where special forms were being used.  A protocol was devised whereby the
laser printer statements to create these special forms would be located in a
table within a JES2 exit.  By using the GROUPID keyword on an OUTPUT JCL
statement, the programmer could let the exit know which group of control
statements to generate to get a particular form produced on the laser printer.
An obvious disadvantage to this procedure is that a re-assembly of the exit and
subsequent IPL are required for additions and changes to the table to take
effect.  To avoid this, I devised the following solution.
JES2 Exit 4 is designed to allow you to scan JCL as it is coming through a
reader.  If the exit is coded to look for a certain job name submitted by a
certain user-id, it is possible to create ÔcommandsÕ from JCL comment
statements.  For instance, the job:
//SPECIAL JOB USER=SYSPGMR, ...
//*I
//*AFORM1
//*S$$DJDE JDL=FORM1,END;
//STEP1 EXEC PGM=IEFBR14
//SYSPRINT DD SYSOUT=A
is perfectly legal from a JCL standpoint and will run without incident (doing
nothing).  However, Exit 4 can be coded to look for comments in the job SPECIAL
submitted by SYSPGMR and to perform certain tasks when it recognises commands.
In this case, those commands might be:
¥    I - initialise the internal table.
¥    A - add a form name (in this case ÔFORM1Õ).
¥    S - add a statement to be generated when FORM1 is recognised ($$DJDE
JDL=FORM1,END;).
The table can be updated only at times when other exits will not be referencing
it.  In our case, this is when the laser printers are drained.  (Our Exit 1 does
nothing if the printer is not a laser printer.)  There remains only the problem
of finding the table (located within Exit 4) from other exits which are to be
the actual users of the table.
All JES2 exits have addressability to the HASP Control Table (HCT) upon entry
via register 11.  Within the HCT are several fields available to the programmer,
one of which is $USER1, a fullword which is initially zero.  When the internal
table within Exit 4 is loaded successfully, the address to the start of the
table is placed into the fullword $USER1.  Later, when Exit 1 needs to reference
the table, it loads a register with the value in $USER1 and, if it is non-zero,
proceeds to use it.
Our current implementation of this idea uses an internal table fixed in size
with a corresponding limit as to the number of group-ids and control statements
it can contain.  It would be possible to create an additional command (say
Ô//*KNNÕ) which would cause the exit to issue a $GETMAIN for a user-determined
amount of storage to hold the information in the succeeding JCL statements.  We
have not implemented this idea, however.
In this specific example, our code actually maintains two different tables.  The
first table contains 14-byte entries that give the group-id name, the number of
laser printer (DJDE) statements associated with this group-id, and the address
of the first statement.  The second table is the DJDE statements themselves.
With this type of structure, it is obvious that the order of the commands in the
JCL deck are very important - commands that are out of order will cause the DJDE
statements to be improperly indexed.
         TITLE 'EXIT4: JES2 USER EXIT 4 FOR XEROX FORMS CONTROL'
*** >>>>  NOTE!!  THIS CODE CONTAINS NO WARRANTY AND IS SUBMITTED   ***
*                 FOR USE AT YOUR OWN RISK.  THE AUTHOR AND THE       *
*                 UNIVERSITY OF VIRGINIA WILL NOT BE HELD LIABLE      *
*                 FOR ANY ERROR EXISTING IN THIS CODE OR INTRODUCED   *
*                 BY YOU AS A MODIFICATION OF IT.                     *
*   ENVIRONMENT:  MVS/SP 1.3.3 AND JES2/SP 1.3.6                      *
*       THE PURPOSE OF THIS EXIT IS TO ALLOW THE DYNAMIC RELOADING    *
*       OF A DJDE GROUPID TABLE WITHOUT A RE-ASSEMBLY OF EXIT 1       *
*       FOLLOWED BY AN IPL.                                           *
*       THE TABLE IS RELOADED WHEN THE EXIT ENCOUNTERS THE JOB        *
*       "XXXXXXXX", SUBMITTED WITH THE USERID "YYYYYYYY".             *
*       ALL OTHER JOB NAMES ARE IGNORED.                              *
*       THE EXIT THEN EXAMINES THE JCL STATEMENT.  ACTIONS ARE        *
*       TAKEN ON THE FOLLOWING STATEMENTS:                            *
*       //*I              --  INITIALIZE THE TABLE WITH X'FF'         *
*                             CHARACTERS                              *
*       //*ADJDENAME09    --  ADD A GROUPID NAME, IN THIS CASE        *
*                             'DJDENAME'.  THE GROUPID WILL HAVE      *
*                             9 DJDE STATEMENTS ASSOCIATED WITH IT.   *
*       //*S$$DJDE ...    --  ADD A DJDE STATEMENT.                   *
*       ONLY "//*I", "//*A", AND "//*S" ARE RECOGNIZED AS "COMMANDS". *
*       ALL OTHER JCL COMMENTS AND STATEMENTS IN THE JOB XXXXXXXX ARE *
*       IGNORED.                                                      *
*       SOME RULES AND RESTRICTIONS:                                  *
*       THE FIRST COMMAND IN JOB XXXXXXXX SHOULD ALWAYS BE "//*I"     *
*       TO AVOID OLD GARBAGE BEING LEFT BEHIND.  IT IS RECOMMENDED    *
*       THAT YOU RELOAD THE ENTIRE TABLE WITH EACH EXECUTION OF THE   *
*       JOB XXXXXXXX (ALTHOUGH AN ADDITION TO AN EXISTING TABLE IS    *
*       POSSIBLE).                                                    *
*       THE FIRST COMMAND USED TO DEFINE A NEW DJDE GROUPID IS THE    *
*       "//*A" COMMAND.  THIS DEFINES THE GROUPID NAME AND ALSO THE   *
*       NUMBER OF DJDE STATEMENTS FOR THIS GROUPID.                   *
*       NOTE:  YOU  >>MUST<<  ALWAYS FOLLOW THE GROUPID NAME WITH     *
*       "NN", WHICH IS THE (DECIMAL) NUMBER OF DJDE STATEMENTS        *
*       ASSOCIATED WITH THIS GROUPID.  YOU  >>MUST<<  USE TWO         *
*       CHARACTERS (SUCH AS "07").                                    *
*       THE DJDE STATEMENT DEFINITIONS MUST  >>ALWAYS<<               *
*       FOLLOW THE GROUPID THEY BELONG IN.  DJDE STATEMENTS BEGIN IN  *
*       COLUMN 4 FOLLOWING THE "//*S" COMMAND AND CAN CONTINUE UP TO  *
*       COLUMN 71.                                                    *
*       NOTE:  THE  >>LIMIT<<  FOR CHARACTERS IN DJDE STATEMENTS IN   *
*       ANY ONE STATEMENT IS 67.  IF YOU NEED LONGER LINES, YOU WILL  *
*       HAVE TO CREATE A "CONTINUATION" COMMAND.                      *
*       TO RELOAD THE DJDE TABLE, DRAIN THE XEROX PRINTERS            *
*       AND SUBMIT JOB XXXXXXXX.  DO NOT RUN WHILE OUTPUT IS BEING    *
*       WRITTEN TO THE XEROX PRINTERS!!!                              *
*       THE NUMBER OF DJDE GROUPID'S IS CURRENTLY SET TO 100.         *
*       THE NUMBER OF DJDE STATEMENT'S IS CURRENTLY SET TO 200.       *
*       IF EITHER OF THESE LIMITS IS EXCEEDED, XXXXXXXX IS ABENDED.   *
*       (THE TABLE ELEMENTS UP TO THE LAST STATEMENT OR GROUPID       *
*       SHOULD STILL BE FUNCTIONAL.)                                  *
*   THE DJDE TABLE LOCATED IN THIS EXIT IS MADE AVAILABLE TO EXIT 1   *
*   BY PLACING THE TABLE ADDRESS IN THE "$USER1" FIELD IN THE HCT.    *
*   THE TABLE IS ACTUALLY TWO TABLES, THE FIRST HOLDING GROUPIDS AND  *
*   INDEXING INTO THE SECOND, WHICH HOLDS THE ACTUAL LASER PRINTER    *
*   COMMANDS.  ENTRIES IN THE GROUPID TABLE HAVE THE FOLLOWING        *
*   FORMAT:                                                           *
*       BYTES   0-7:  GROUPID NAME                         CL8        *
*       BYTES   8-9:  NUMBER OF DJDE STATEMENTS             H         *
*                     ASSOCIATED WITH THIS GROUPID                    *
*       BYTES 10-13:  ADDRESS OF THE FIRST DJDE STATEMENT   F         *
*   THE SECOND TABLE CONSISTS OF 80-BYTE ENTRIES HOLDING THE LASER    *
*   PRINTER COMMANDS.  COMMAND ENTRIES FOLLOW ONE AFTER ANOTHER AND   *
*   NO SPECIAL SEPARATORS DELINEATE THE LAST COMMAND FOR ONE GROUPID  *
*   AND THE FIRST COMMAND OF THE NEXT.                                *
*   AT ENTRY, THE CONTENTS OF VARIOUS REGISTERS ARE AS FOLLOWS:       *
*       R15,  ENTRY ADDRESS                                           *
*       R14,  RETURN ADDRESS                                          *
*       R13,  ADDRESS OF THE READER PCE                               *
*       R12,  NOT APPLICABLE                                          *
*       R11,  ADDRESS OF THE HCT                                      *
*       R10,  ADDRESS OF THE JCT                                      *
*     (R2-R9),NOT APPLICABLE                                          *
*       R1    PARAMETER LIST:                                         *
*                       WORD 1(+0): ADDR OF CTRL STMT IMAGE BUFFER    *
*          NOT USED >>  WORD 2(+0): ADDR OF PCE EXIT FLG BYTE RXITFLAG*
*          NOT USED >>  WORD 3(+0): ADDR OF JCT JCTXWRK FIELD         *
*       R0    CONTAINS ONE OF THE FOLLOWING VALUES:                   *
*             = 00,  FOR JES2 CONTROL STATEMENT                       *
*             = 04,  FOR JES2 JCL STATEMENT                           *
*   AT EXIT, ALL REGISTERS EXCEPT FOR R15 SHOULD BE RESTORED.         *
*             R15 SHOULD CONTAIN ONE OF THE FOLLOWING VALUES:         *
*       = 00, INVOKE NEXT ROUTINE AND PERFORM STD RDR PROCESSING      *
*       = 04, IGNORE NEXT ROUTINE AND PERFORM STD RDR PROCESSING      *
*       = 08, FOR JECL, CONVERT TO //*; FOR JCL, PERFORM STD PROCESSNG*
*       = 12, CANCEL JOB, PRODUCE OUTPUT                              *
*       = 16, CANCEL JOB, PRODUCE NO OUTPUT                           *
*          - REGISTER USAGE:                                          *
*            .  R3,    DJDE POINTERS (GROUPIDS) REGISTER              *
*            .  R4,    DJDE STATEMENT REGISTER/COUNTER                *
*            .  R5,R6  WORK REGISTERS TO CONVERT CHAR COUNT TO HEX    *
*            .  R7,    DJDE TABLE ADDRESS/DJDE DUMMY ADDRESS          *
*            .  R8,    BASE REGISTER                                  *
*            .  R14,R15 CALL AND RETURN WHEN INVOKING JES MACROS      *
*          -  REGISTERS RESTORED: ALL EXCEPT FOR R15 WHICH CONTAINS   *
*             .  0000, WHERE JES2 WILL PRODUCE THE STANDARD SEPARATOR *
*                       (UNDER NORMAL EXIT)                           *
*          -  ABNORMAL EXIT:  NO ESTAE IS PROVIDED--USE AT YOUR OWN   *
*                             RISK!!!                                 *
*          -  MODULE SIZE:  THIS MODULE USES ONLY ONE REGISTER        *
*                 TO BASE ADDRESS THE PROGRAM.  THOSE WHO USE         *
*                 A LARGE NUMBER OF FORMS MAY NEED TO HAVE            *
***               ANOTHER REGISTER FOR BASE ADDRESSING.             ***
         COPY $HASPGBL
EXIT4          $MODULE $BUFFER,                                        X
               $CAT,                                                   X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $JCT,                                                   X
               $JOE,                                                   X
               $JQE,                                                   X
               $MIT,                                                   X
               $PCE,                                                   X
               $PDDB,                                                  X
               $PPPWORK,                                               X
               RPL
EXIT4A   $ENTRY  CSECT=YES    * ALSO CREATES 'USING EXIT4A,R8'
         $SAVE                * SAVE CALLER'S REGISTERS
         USING JCT,R10        * PROVIDE ADDRESSABILITY TO THE JCT
         LR    R8,R15         * MAKE R8 AS THE BASE
         L     R7,$USER1      * LOAD "PRIOR" DJDE ADDRESS
         C     R0,=F'4'       * JCL STATEMENT?
         BNE   EXIT4A00       * IF NOT, RETURN TO JES
         CLC   JCTJNAME(8),=CL8'XXXXXXXX'  * IS THE JOB  'XXXXXXXX'?
         BNE   EXIT4A00                    * IF NOT, RETURN TO JES
*   THE FOLLOWING CODE (COMMENTED OUT) HAS NOT YET BEEN TESTED:
*        CLC   JCTUSEID(8),=CL8'YYYYYYYY'  * IS THE USER 'YYYYYYYY'?
*        BNE   EXIT4A00                    * IF NOT, RETURN TO JES
         L     R1,0(,R1)          * GET POINTER TO IMAGE BUFFER
         CLC   0(3,R1),=CL3'//*'  * IS IT A JCL COMMENT STMT?
         BNE   EXIT4A00           * IF NOT, RETURN TO JES
         CLC   0(4,R1),=CL4'//*I' * IS THIS A TABLE INIT CMD?
         BE    TABLINIT           * IF SO, INITIALIZE DJDE TABLES
         CLC   0(4,R1),=CL4'//*A' * IS THIS A DJDE GROUPID?
         BE    ADDGID             * IF SO, ADD GROUPID TO POINTER AREA
         CLC   0(4,R1),=CL4'//*S' * IS THIS A DJDE STATEMENT?
         BE    ADDSTMT            * IF SO, ADD DJDE STATEMENT
         B     EXIT4A00           * IT'S JUST A COMMENT--RETURN TO JES
*  ADD STATEMENT TO END OF DJDE STATEMENT AREA:
ADDSTMT  LA    R3,DJDESTMT    * GET START OF DJDE STATEMENT AREA
LOOP     CLI   0(R3),X'FF'    * ARE WE PAST VALID DJDE STATEMENTS?
         BE    EXITLOOP       * IF SO, EXIT LOOP AND ADD STATEMENT
         CLI   0(R3),X'EE'    * ARE WE AT END OF STATEMENT AREA?
         BE    EXIT4A16       * IF SO, ABEND W/OUT PRINTING
         LA    R3,80(R3)      * ELSE, IT'S A DJDE STMT--POINT PAST IT
         B     LOOP           * AND CONTINUE CHECKING
EXITLOOP MVC   0(67,R3),4(R1) * MOVE 67 CHARS FROM BUFF INTO STMT AREA
         MVC   67(13,R3),=CL13'             ' * FILL REST OF DJDE STMT
         LA    R7,DJDEPTRS    * GET "REAL" TABLE ADDR (FOR EXIT ENDING)
         B     EXIT4A00       * EXIT PEACEFULLY
*  INITIALIZE DJDE GROUPID TABLE AND DJDE STATEMENT AREA
TABLINIT LA    R3,DJDEPTRS    * POINT AT START OF DJDE GROUPID AREA
         LA    R4,100         * SET COUNT: 100 14-BYTE GROUPID ENTRIES
LOOPPTRS MVC   0(14,R3),FOXES * FILL ENTRY WITH 'FF'
         LA    R3,14(R3)      * POINT TO NEXT ENTRY
         BCT   R4,LOOPPTRS    * LOOP UNTIL ALL FILLED
         MVC   0(28,R3),EES   * INDICATE END OF GROUPID AREA
         LA    R3,DJDESTMT    * POINT AT START OF DJDE STATEMENT AREA
         LA    R4,200         * SET COUNT: 200 80-BYTE STATEMENTS
LOOPSTMT MVC   0(80,R3),FOXES * FILL STATEMENT WITH 'FF'
         LA    R3,80(R3)      * POINT TO NEXT STATEMENT
         BCT   R4,LOOPSTMT    * LOOP UNTIL ALL ARE FILLED
         MVC   0(80,R3),EES   * INDICATE END OF STATEMENT AREA
         MVC   80(80,R3),EES  * INDICATE END OF STATEMENT AREA
         LA    R7,DJDEPTRS    * GET "REAL" TABLE ADDR (FOR EXIT ENDING)
         B     EXIT4A00       * EXIT PEACEFULLY
*  ADD DJDE GROUPID TO DJDE POINTER AREA
ADDGID   LA   R3,DJDEPTRS     * POINT AT START OF DJDE GROUPIDS
LOOPADD1 CLI  0(R3),X'FF'     * ARE WE AT 1ST FREE GROUPID ENTRY?
         BE   ADDIT1          * IF SO, GO ADD GROUPID NAME AND LNE CNT
         CLI  0(R3),X'EE'     * ARE WE AT THE END OF THE GROUPID AREA?
         BE   EXIT4A12        * IF SO, ABEND JOB AND PRINT
         LA   R3,14(R3)       * ELSE, POINT PAST VALID GROUPID ENTRY
         B    LOOPADD1        * AND CONTINUE LOOKING FOR FREE ENTRY
ADDIT1   MVC  0(8,R3),4(R1)   * ADD GROUPID/LNE CNT TO GROUPID AREA
         LH   R5,12(R1)       * GET 2-CHARACTER LINE COUNT
         LH   R6,12(R1)       * GET 2-CHARACTER LINE COUNT (COPY)
         N    R5,=F'15'       * AND-OUT ALL BITS EXCEPT 8TH NIBBLE
         N    R6,=F'3840'     * AND-OUT ALL BITS EXCEPT 6TH NIBBLE
         SRL  R6,8            * SHIFT R6 RIGHT BY 8 BITS
         MH   R6,=F'10'       * MULTIPLY R6 BY 10
         AR   R5,R6           * ADD ONES AND TENS
         STH  R5,8(R3)        * SAVE HEX REPRESENTATION OF LINE COUNT
         LA   R4,DJDESTMT     * POINT AT START OF STATEMENT AREA
LOOPADD2 CLI  0(R4),X'FF'     * ARE WE AT THE 1ST FREE STMT ENTRY?
         BE   ADDIT2          * IF SO, COMPLETE DJDE PTR W/ THIS ADDR
         CLI  0(R4),X'EE'     * ELSE, ARE WE AT THE END OF STMT AREA?
         BE   EXIT4A16        * IF SO, ABEND AND DO NOT PRINT
         LA   R4,80(R4)       * ELSE, POINT PAST VALID STATEMENT
         B    LOOPADD2        * AND KEEP LOOKING FOR A FREE STMT ENTRY
ADDIT2   ST   R4,10(R3)       * COMPLETE GROUPID W/ADDR OF NEXT STMT
         LA   R7,DJDEPTRS     * GET "REAL" TABLE ADDR (FOR EXIT ENDING)
         B    EXIT4A00        * EXIT PEACEFULLY
***********************************************************************
*        EXIT 4 COMPLETION SECTION                                    *
***********************************************************************
EXIT4A00 SR    R15,R15        * TELL JES2 TO CONTINUE NORMAL PROCESSING
         ST    R7,$USER1      * SAVE TABLE ADDR IN HCT FOR EXIT 1
         B     EXIT4ARE       *
EXIT4A04 LA    R15,4          * TELL JES2 THAT NO OTHER EXITS TO GO,
         B     EXIT4ARE       *  CONTINUE NORMAL PROCESSING
EXIT4A08 LA    R15,8          * TELL JES2 TO CONVERT TO //* STMT
         B     EXIT4ARE       *
EXIT4A12 LA    R15,12         * TELL JES2 TO ABEND JOB AND PRINT
         SR    R7,R7          * CLEAR PTR TO START OF DJDE PTR AREA
         ST    R7,$USER1      * SAVE IN HCT FOR EXIT1 (ZERO INDICATES
         B     EXIT4ARE       *  INVALID TABLE)
EXIT4A16 LA    R15,16         * TELL JES2 TO ABEND JOB BUT NO PRINT
         SR    R7,R7          * CLEAR PTR TO START OF DJDE PTR AREA
         ST    R7,$USER1      * SAVE IN HCT FOR EXIT1 (ZERO INDICATES
         B     EXIT4ARE       *  INVALID TABLE)
EXIT4ARE $RETURN RC=(R15)     * GET ADDR (RETURN POINT) AND EXIT
***********************************************************************
*        EXIT4 LITERAL POOL                                           *
***********************************************************************
EES      DC    80B'11101110'     'EE'
FOXES    DC    20F'-1'           'FF'
LITS     DS    0D
         LTORG
DJDEPTRS DC  350F'-1'        1400 BYTES FOR 100 14-BYTE POINTERS---FF'S
         DC   28B'11101110'    28 BYTES FOR   2 14-BYTE POINTERS---EE'S
DJDESTMT DC 4000F'-1'       16000 BYTES FOR 200 80-BYTE STATEMENTS-FF'S
         DC  160B'11101110'   160 BYTES FOR   2 80-BYTE STATEMENTS-EE'S
        $MODEND
         END


David Saunders
Senior Systems Engineer
University of Virginia (USA)  © University of Virginia 1988




































