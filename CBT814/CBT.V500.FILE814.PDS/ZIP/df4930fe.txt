Getting a list of volumes into a REXX variable

The following program and REXX EXEC are used together to
produce a list of on-line DASD VOLSERs as REXX variables.
This list is then used by other EXECs to launch back-up jobs,
verify allocation requests, produce listings of non-catalogued
datasets on DASD volumes, and much more.


PROGRAM SOURCE CODE

* PROGRAM :  RETURNS LIST OF ON-LINE DASD VOLSERS INTO REXX VARIABLE
*            SGVVOLL1 .
*            RETURNS IPL VOLSER INTO REXX VARIABLE SGVIPLV .
*            THIS PROGRAM USES THE IOSVSUCB SCAN ROUTINE.
* DOCUMENTATION:
*  SEE UCB SCAN SERVICES IN SPL APPLICATION DEVELOPMENT GUIDE.
* INPUT :
*  PARMS: IIIPPPOOO
*   III INPUT
*   PPP PROCESSING
*   OOO OUTPUT
*  FILES: NONE
* OUTPUT:
*  FILES  :  NONE
*   LAYOUT:
*  VARIABLES : SGVVOLL1 SGVIPLV
*  RC        :
*    0 : ALL OK
*    8 : LIST TOO SHORT
*   16 : BAD OR NO PARMS
* OTHER:     64+RC FROM IRXEXCOM
* ABENDS     :
* REG EQUS
SVCREG0  EQU  R00
SVCREG1  EQU  R01
SVCREG2  EQU  R02
BASER    EQU  R03     BASE REGISTER
WORK01   EQU  R04
WORK02   EQU  R05
WORK04   EQU  R06
R_PRM_DS EQU  R07
SHVBLOCKR EQU R08
R_SGVVOLL1 EQU R09
R_CVT    EQU  R10
R_UCB    EQU  R11
PLITCAR  EQU  R12     PL/I TCA
R_SA     EQU  R13     SAVE AREA OF CALLER / OWN SAVE AREA
R_RA     EQU  R14     RETURN ADRESS
R_EP     EQU  R15     ENTRY POINT / RC
#VOLS    EQU   20
PRM_DS   DSECT
         DS 0A
PRM_IPO  DS CL9
         ORG PRM_IPO
PRM_III  DS CL3
PRM_PPP  DS CL3
PRM_OOO  DS CL3
         DSECT
         IEFUCBOB
         CVT DSECT=YES
HVPSUCB  CSECT
         SAVE  (14,12),,HVPSUCB.&SYSTIME..&SYSDATE
         LR    R03,R15
         USING HVPSUCB,R03
* GETMAIN WORKING STORAGE
         LR    R05,R01       SAVE PARM ADDRESS
         L     R06,WS_FIX_LEN
         STORAGE OBTAIN,LENGTH=(R06),ADDR=(R01)
         ST    R13,4(0,1)    SAVE 13 IN OWN SAVE
         ST    R01,8(0,13)   SAVE ADR. OF SAVE IN PREV. SAVE
         LR    R13,R01
         USING WS,R13
         ST    R05,PARMADR
* END GETMAIN WORKING STORAGE
         SR    SVCREG0,SVCREG0
         ST    SVCREG0,RC
* ANY PARMS ?
*        JCLLIKE PARMS
         XR    WORK04,WORK04
         L     WORK01,PARMADR
         L     WORK01,0(0,WORK01)
         LTR   WORK01,WORK01
         BNM   L_REXX_PARMS      HIGH ORDER BIT OFF
         ICM   WORK04,B'0011',0(WORK01)
         LTR   WORK04,WORK04
         BNP   L_NO_PARMS
         LA    WORK02,2(0,WORK01)  BUMP LEN HW
         B     L_ANYPARMSE
L_REXX_PARMS EQU *
*        REXXLIKE PARMS
         L     WORK01,PARMADR
         L     WORK02,0(0,WORK01)  POINTER TO DATA POINTER
         LTR   WORK02,WORK02       HIGH ORDER BIT OFF
         BM    L_NO_PARMS
         L     WORK02,0(0,WORK02)  POINTER TO DATA
         L     WORK01,4(0,WORK01)  POINTER TO LENGTH POINTER
         LTR   WORK01,WORK01       HIGH ORDER BIT ON
         BNM   L_NO_PARMS          IF NOT
         L     WORK04,0(0,WORK01)  LENGTH
         LTR   WORK04,WORK04
         BNP   L_NO_PARMS
L_ANYPARMSE   EQU  *      WORK04 LENGTH WORK02 -> BUFFER
         ST    WORK04,#PRM
         ST    WORK02,@PRM
         LR    R_PRM_DS,WORK02
         USING PRM_DS,R_PRM_DS
         LA    WORK02,L'PRM_IPO
         CR    WORK04,WORK02
         BL    L_NO_PARMS
         CLC   PRM_III,=CL3'000'
         BNE   L_NO_PARMS
BEGIN    EQU   *
         XC    UCBWA,UCBWA    CLEAR WORK AREA
         MVI   DEVCLASS,UCB3DACC
         L     R_CVT,CVTPTR
         USING CVTMAP,R_CVT
         LA    R01,UCBWA
         ST    R01,UCBPRMWA
         LA    R01,DEVCLASS
         ST    R01,UCBPRMDEVT
         LA    R01,ADDRUCB
         ST    R01,UCBPRMUCB
         OI    UCBPRMUCB,X'80'     END OF PARMS
         LA    R_SGVVOLL1,SGVVOLL1
         LA    WORK01,#VOLS
         XR    R_UCB,R_UCB
L_SEARCH EQU   *
         LA    R01,UCBPRMS
         L     R15,CVTUCBSC
         BALR  R14,R15
*        ST    R15,RC
         LTR   R15,R15
         BNZ   L_NO_MORE_UCBS
         L     R_UCB,ADDRUCB
         USING UCBOB,R_UCB
         TM    UCBSTAT,UCBONLI   ON-LINE
         BNO   L_TEST_RESIDENT   IF NOT ON-LINE
         MVC   0(L'UCBVOLI,R_SGVVOLL1),UCBVOLI
         MVI   L'UCBVOLI(R_SGVVOLL1),C' '
         LA    R_SGVVOLL1,L'UCBVOLI+1(0,R_SGVVOLL1)
L_TEST_RESIDENT  EQU *
         TM    UCBSTAT,UCBSYSR   SYSTEM RESIDENT
         BNO   L_NEXT_VOL   IF NOT RESIDENT
         MVC   SGVIPLV(L'UCBVOLI),UCBVOLI
L_NEXT_VOL     EQU *
         BCT   WORK01,L_SEARCH
L_NO_MORE_UCBS EQU    *
         LTR   R15,R15
         BNZ   L_LIST_BIG_ENOUGH
         LA    R15,8
         ST    R15,RC
L_LIST_BIG_ENOUGH  EQU *
         CLC   PRM_OOO,=CL3'000'
         BNE   RETURN
         LA    SHVBLOCKR,IRXSHVBSTG
         USING SHVBLOCK,SHVBLOCKR
         LA    WORK02,$SGVVOLL1
         ST    WORK02,SHVNAMA
         LA    WORK02,SGVVOLL1
         ST    WORK02,SHVVALA
         LA    WORK02,L'$SGVVOLL1
         ST    WORK02,SHVNAML
         LR    WORK02,R_SGVVOLL1
         LA    WORK01,SGVVOLL1
         SLR   WORK02,WORK01
         ST    WORK02,SHVVALL
         BAL   R14,S_STORE
         LTR   R15,R15
         BNZ   RETURN
* SGVIPLV
         LA    WORK02,$SGVIPLV
         ST    WORK02,SHVNAMA
         LA    WORK02,SGVIPLV
         ST    WORK02,SHVVALA
         LA    WORK02,L'$SGVIPLV
         ST    WORK02,SHVNAML
         LA    WORK02,L'SGVIPLV
         ST    WORK02,SHVVALL
         BAL   R14,S_STORE
RETURN   EQU   *
         L  WORK04,RC      LOAD RC BEFORE RESTORING R13
         L  WORK01,SAVEAREA+4    SAVE AREA
         L  WORK02,WS_FIX_LEN
         STORAGE RELEASE,LENGTH=(WORK02),ADDR=(R13)
         LR R13,WORK01
         LR R15,WORK04
         RETURN (14,12),RC=(15)
L_BAD_PARMS  EQU *
L_NO_PARMS   EQU *
         LA     R15,16
         ST     R15,RC
         B      RETURN
* INTERNAL SUBROUTINES
S_STORE  EQU   *
         ST    R14,SAVE_R14
         SR    R00,R00        NO ENVIRONMENT BLOCK
         ST    R00,SHVNEXT
         MVI   SHVCODE,SHVSTORE
         LINK  EP=IRXEXCOM,DCB=0,MF=(E,CALLIST),SF=(E,LINKLIST),      *
               PARAM=(EYEC,DUMMY,DUMMY,IRXSHVBSTG),VL=1
         LTR   R15,R15
         BZ    S_STORE_END
         LA    WORK01,1
         CR    WORK01,R15   VARIABLE DID NOT EXIST
         BNE   L_RCSET
         XR    R15,R15
         B     S_STORE_END
L_RCSET  EQU   *
         AH    R15,$BASE_RC_IRX
         ST    R15,RC
S_STORE_END    EQU   *
         L     R14,SAVE_R14
         BR    R14
* CONSTANTS
$BASE_RC_IRX   DC  H'64'
WS_FIX_LEN DC  A(WS_FIX_END-WS)
EYEC       DC  CL8'IRXEXCOM'
DUMMY      DC  A(0)
$SGVVOLL1  DC  CL8'SGVVOLL1'
$SGVIPLV   DC  CL7'SGVIPLV'
* STATIC STORAGE
* DYNAMIC STORAGE
WS       DSECT
SAVEAREA  DS   18F
PARMADR   DS   A
RC        DS   F
SAVE_R14  DS   A
* REXX LINKING
LINKLIST  LINK  EP=IRXEXCOM,DCB=0,SF=L
CALLLIST  CALL  ,(EYEC,DUMMY,DUMMY,IRXSHVBSTG),VL,MF=L
IRXSHVBSTG DS CL(SHVBLEN)
* REXX LINKING END
#PRM       DS   F
@PRM       DS   F
           DS   0D
* 100 BYTE WORK AREA STARTING ON DOUBLEWORD
UCBWA      DS   CL100
UCBPRMS    DS   3F
           ORG  UCBPRMS
UCBPRMWA   DS   F
UCBPRMDEVT DS   F
UCBPRMUCB  DS   F
DEVCLASS   DS   CL1           DEVICE CLASS TO BE SEARCHED
ADDRUCB    DS   F           ADDRESS OF UCB FOUND
SGVVOLL1   DS   (#VOLS)CL(L'UCBVOLI+1)
SGVIPLV    DS   CL(L'UCBVOLI)
WS_FIX_END EQU  *
*          DSECT FOR REXX
           IRXSHVB
HVPSUCB    CSECT
           LTORG
           END


REXX EXEC

/* REXX */
/* GET SGVIPLV(RESIDENT VOLUME) SGVVOLL1(LIST OF ON-LINE VOLUMES)*/
/* PARMS: NONE -> SAY OUTPUT                                     */
/*        VPUT -> VPUT OUTPUT                                    */
TRACE
RC=0
RC_INVALID_PARMS=24
RC_HVPSUCB=25
RC_ISPF=26
SAY="SAY"
VPUT="VPUT"
SGVVOLL1=""
SGVIPLV=""
OUTPUTMODE=""
ARG PARMS
#WORDS=WORDS(PARMS)
IF #WORDS > 1 THEN      EXIT(RC_INVALID_PARMS)
PARM1=WORD(PARMS,1)
IF      PARM1="" THEN OUTPUTMODE=SAY
ELSE IF PARM1=VPUT THEN OUTPUTMODE=VPUT
ELSE  EXIT(RC_INVALID_PARMS)
IPO="000000000"
ADDRESS LINK "HVPSUCB"  IPO
IF RC^=0     THEN      EXIT(RC_HVPSUCB)
IF OUTPUTMODE=VPUT THEN
DO
 ADDRESS ISPEXEC " VPUT (SGVIPLV SGVVOLL1) SHARED"
 IF RC^=0     THEN      EXIT(RC_ISPF)
END/*IF OUTPUTMODE=VPUTMODE*/
ELSE DO
 SAY SGVIPLV SGVVOLL1
END
EXIT RC


Herman Vierendeels
Systems Programmer
Belgian Parliament (Belgium)                                     c Xephon 1993

