Loading an external file into GDDM/PGF
PROBLEM ADDRESSED
IBMÕs mainframe graphic system IBM GDDM/PGF Version 2.0 now provides a function
to extract information from an external file to produce a GDDM/PGF data file
(member of the ADMCDATA file).  Unfortunately, this function can only be invoked
from within the GDDM/PGF Interactive Chart Utility (ICU), and it requires a
number of steps and inputs before the transfer can be initiated.  As such, it is
not ideal as standard procedure for the continuing transfer of data (especially
by non-professional data processing personnel).  The program PGFSTORE performs a
similar function, but can be directly initiated from within the TSO environment.
The program uses a pre-defined parameter file and loads the selected data from
the input file into the specified GDDM/PGF data member.
PROCESSING
PGFSTORE extracts the selected data fields (according to the parameter file)
from the input file, converts the numeric data to the GDDM/PGF internal format,
and stores the data in the specified ADMCDATA member.  PGFSTORE allocates tables
(via GETMAIN) for the parameters and the data.
PGFSTORE can only process fixed format sequential files (files of a different
format must be converted to this format in order for them to be processed).  The
GDDM/PGF ADMASNT module must be included as  input for the linkage editor.
Return codes
On completion, one of the following return codes will be generated:
¥    0 - OK
¥    4 - not OK, data error in a parameter
¥    8 - too many parameter records (program equate)
¥    12 - too many records to be processed (EXEC parameter).
The EXEC parameter (optional)
This is used to specify the maximum number of input records.  The default is 100
and the maximum (PGF restriction) is 999.
Datasets
PGFSTORE uses the following datasets:
¥    PARMPSIN - parameter statements
¥    FILEPSIN - input file (RECFM=F[B]), DSORG=PS)
¥    ADMCDATA - PGF data file (DSORG=PO).
Parameter format
There are four different parameter types:
¥    HEAD - heading
¥    NAME - member name in the ADMCDATA file
¥    LABEL - Y-label definition
¥    DATA - data field definition.
The parameter type is specified in columns 1-6 (left justified) of the parameter
statement.
HEAD statement (optional)
Columns 08-80 - heading text.
NAME statement
Columns 08-15 - member name (left justified).
DATA statement
Column 08 - Co-ordinate type
     X (= independent variable
     Y (= dependent variable)
Column 10 - Input format
     P (= packed decimal)
     E (= floating point, single precision)
     N (= numeric digit, ie unsigned numeric digits in character format).
     Input data of type ÔNÕ may have the following forms:
          nnn  positive
          -nnn negative
          *    null (missing) value.
     The Ô-Õ and Ô*Õ are only valid in the left-most column.  A type N field may
contain an embedded decimal point, eg 1.34 is equivalent to 1 and 34/100ths.
Columns 12-15 - Scaling
     annn where
     a = '+' (default) or '-'
     nnn = scaling factor


     The scaling specifies the power of 10 by which the input data value is to
be multiplied before being stored (default 0, where 10**0 = 1).  Example: -003
means that the input values are to be multiplied by the factor 10**-3 (= 0.001).
Columns 17-20 - Field position within the input record, right justified (1 =
first byte).
Columns 22-23 - Field length within the input record, right justified.
Column 25 - Key name (optional), left justified.
LABEL statement (optional)
Columns 17-20 - Label position within the input record, right justified (1 =
first byte).
Columns 22-23 - Label length within the input record, right justified.
Error messages
The following error messages may be displayed:
¥    NO ÔDATAÕ STATEMENTS - No X-DATA definitions specified.
¥    NO ÔGROUPÕ DEFINITIONS - No Y-DATA definitions specified.
¥    NO DATA ELEMENTS - No data values processed.
¥    DATA ERROR: RECORDNO. nnnn FIELDNO. mm - Field number  mm  of record number
nnnn  contains non-numeric data.
EXAMPLE
If we have the following parameter file:
....+....1....+....2....+
HEAD   Report Title
NAME   ALPHA
DATA   X N +000 0001 02 Year
DATA   Y N -003 0010 06 Sales (in thousands)
DATA   Y N -003 0020 06 Profit (in thousands)
and the following data file
....+....1....+....2....+
81       123456    001345
82       153456    002345
83       209460    -02345
84       240000    *
etc.
The data file yields the following data entries:
Year 81 (x co-ordinate)
     123 (1st y co-ordinate) (123 = 123456 * 10**-3)
     1 (2nd y co-ordinate)   (1 = 001345 * 10**-3)
Year 82 (x co-ordinate)
     153 (1st y co-ordinate
     2 (2nd y co-ordinate)
Year 83 (x co-ordinate)
     209 (1st y co-ordinate)
     -2 (2nd y co-ordinate)
Year 84 (x co-ordinate)
     240 (1st y co-ordinate)
     null value  (2nd y co-ordinate).
The y values are scaled.  A null (missing) value is not the same as a zero
value, and the GDDM/PGF routines interpret such values differently.
PGFSTORE SOURCE CODE
PGFSTORE CSECT
         STM   R14,R12,12(R13)         save registers
         BALR  R12,0                   base register
         USING *,R12
         LA    R15,SA                  A(save-area)
         ST    R13,4(R15)              backward ptr
         ST    R15,8(R13)              forward ptr
         LR    R13,R15                 A(new save-area)
         B     SA_END                  jump over save-area
SA       DS    18A                     save-area
SA_END   ZAP   D,=P'100'               default (maximum no of records)
         L     R1,0(R1)                A(EXEC parameter)
         LH    R2,0(R1)                L(EXEC parameter)
         LTR   R2,R2                   test length
         BZ    *+16                    no EXEC parameter
         BCTR  R2,0                    LC(EXEC parameter)
         PACK  D,2(0,R1)               pack maximum no. of records
         EX    R2,*-6
         CVB   R0,D
         ST    R0,NE                   max. no. of elements (records)
         ST    R0,MAXREC
         SPIE  E100,(7,9,11)           data error exit
*    obtain PARM statements
         LA    R2,MAXPARM              maximum no. of records
         L     R0,=A(MAXPARM*LRECL)    buffer size
         GETMAIN R,LV=(0)              allocate buffer
         LR    R10,R1
         ST    R10,ABUF                A(buffer)
         OPEN  (PARMPSIN,(INPUT))
A010     GET   PARMPSIN,(10)           read parameter record
         LA    R10,LRECL(R10)          next entry
         BCT   R2,A010                 decrement count
*    end of buffer (=overflow)
         MVC   RC,=H'8'                error code
         B     EOJ
A000     LA    R11,MAXPARM             maximum no. of records
         SR    R11,R2                  no. of records left
         ST    R11,NRECS               no. of records (LRECL=80)
         L     R10,ABUF                buffer address
         USING PMDSECT,R10
         LA    R6,0                    null 'LABEL'-entry
         LA    R5,0                    null 'DATA-entry
A100     CLC   =C'HEAD',PMTYPE
         BNE   A120
         LA    R1,PMHTEXT
         STCM  R1,B'0111',AHEAD
         LA    R15,PMHTEXT
         BAL   R14,LENGTH
         ST    R0,HEADINGL
         B     A110
A120     CLC   =C'NAME',PMTYPE
         BNE   A130
         MVC   MEMBER,PMNNAME          member name
         B     A110
A130     CLC   =C'LABEL',PMTYPE
         BNE   A140
         LR    R6,R10
         PACK  D,PMDPOS
         CVB   R0,D
         BCTR  R0,0                    displacement
         ST    R0,PMDPOS
         PACK  D,PMDLEN
         CVB   R0,D
         STH   R0,PMDLEN
         ST    R0,LABELL               label length
         B     A110
A140     CLC   =C'DATA',PMTYPE
         BNE   A160
         CLI   PMDCOORD,C'Y'
         BNE   A150
         L     R1,NG                   no. of groups
         LA    R1,1(R1)
         ST    R1,NG
         LA    R15,PMKNAME
         BAL   R14,LENGTH
         LTR   R0,R0
         BZ    *+10                   no entry
         AP    NKEY,=P'1'
*    determine maximum key name length
         C     R0,KEYL
         BL    *+8
         ST    R0,KEYL
A150     LR    R15,R5                  R5: address of DATA chain
         BAL   R14,CHAIN
         LTR   R5,R5
         BNZ   *+6                     not first entry
         LR    R5,R10
*    convert fields
         PACK  D,PMDSCAL+1(3)          scaling factor
         CVB   R0,D
         LA    R15,EXME                Address(ME FP0,=E'10')
         CLI   PMDSCAL,C'-'
         BNE   *+8
         LA    R15,EXDE                Address(DE FP0,=E'10')
         LE    FP0,=E'1'
         LTR   R0,R0
         BZ    *+12                    end
         EX    0,0(R15)                perform floating point op
         BCT   R0,*-8
*    FP0: scaling factor
         STE   FP0,PMDSCAL
         PACK  D,PMDPOS                position
         CVB   R0,D
         BCTR  R0,0                    displacement
         ST    R0,PMDPOS
         PACK  D,PMDLEN                length
         CVB   R0,D
         STH   R0,PMDLEN
         B     A110
A160     DS    0H
A110     LA    R10,LRECL(R10)          next record
         BCT   R11,A100
         LTR   R5,R5
         BZ    E200                    no DATA-statements
*    allocate X-value table
         SR    R0,R0
         LA    R1,4                    element length
         M     R0,NE                   * no. of elements
         STH   R1,NLE                  = group length
*    allocate storage
         LR    R0,R1
         GETMAIN R,LV=(0)
         ST    R1,AX                   A(X-table)
         SR    R0,R0
         LH    R1,NLE                  group length
         M     R0,NG                   * no. of groups
         LTR   R0,R1
         BZ    E300                    no groups
         GETMAIN R,LV=(0)
         ST    R1,AZ                   A(Y(intermediate)-table)
         SR    R0,R0
         L     R1,LABELL               length
         M     R0,NE                   * no. of elements
         LR    R0,R1
         GETMAIN R,LV=(0)
         ST    R1,ALABEL               A(Label-table)
         XC    NE,NE                   <NE> : = 0
         L     R9,ALABEL               A(Label-table)
         L     R3,AX                   A(X-table)
         L     R4,AZ                   A(Y(intermediate)-table)
         OPEN  (FILEPSIN,(INPUT))      open data file
         MVC   RC,=H'12'               return code, too many records
This article will be concluded next month when we shall be publishing the
remainder of the source code for PGFSTORE.

A S Rudd
Senior Technical Specialist (West Germany)   © A S Rudd 1989


