Linkage editor front-end

THE PROBLEM

The on-line change control facility in use at our site copies load
modules from test to production load libraries, and, if successful,
the load modules are deleted from the test load library.

Compile and link-edit jobs are constantly submitted throughout
the day by the development programmers, some of them taking
20 minutes or more in the compile step, and as a result the test
load library is allocated for much of the time, thus preventing
access to the library by the on-line change control facility.

In addition, IBM recommends exclusive control of the load library;
thus either DISP=OLD must be coded on the SYSLMOD DD
statement, which is not always desirable or possible, or only one
compile/link-edit job can run concurrently.


THE SOLUTION

The following program allows multiple compiles to run together
and reduces to a few minutes the amount of time that the load
library is allocated, thus allowing the on-line facility to run at any
time.  The load library name is supplied to the program as the
first parameter, the remainder of the link-edit parameters being
coded immediately after it.

The program then dynamically allocates the load library with
shared control, enqueues on the library with a major name of
COMPDSN, and then links to IEWL to perform the link-edit.

There are other solutions to the problem, eg running the compile
and link-edit steps as separate jobs, or only allowing the change
control facility to execute at certain times of the day, but this
seems the most satisfactory method at our site.


EXAMPLE JCL

//COMP EXEC PGM=IKFCBLOO
// etc
/*
//LINK  EXEC  PGM=MAXLINK,REGION=512K,
//      PARM=('TEST.LOADLIB',
//             LET,LIST,MAP,XREF),
//             COND=(7,LT,COMP)
//SYSUT1   DD  DSN=&&WRKAWORK,UNIT=DISK,SPACE=(CYL,(4,1))
//SYSPRINT DD  SYSOUT=*
//OBJECT   DD  DISP=SHR,DSN=TEST.OBJECT
//SYSLIB   DD  DSN=CBV4.COBLIB,DISP=SHR
//SYSLIN   DD  *
etc


THE PROGRAM

As coded, the program attempts to enqueue on the library 30
times, with five seconds between each attempt; this can easily be
changed to suit your environment.  It is non-reentrant, and must
be authorised.

If the dynamic allocation fails, the error and information codes are
displayed in hexadecimal and the program abends.

MAXLINK CSECT
*--------------------------------------------------------------------*
*        Linkeditor front end                                        *
*        Extract DSN from parm field                                 *
*        Enqueue dsn with major name of COMPDSN                      *
*        Dynamically allocate with DISP=SHR                          *
*        Link to IEWL to perform linkedit.                           *
*--------------------------------------------------------------------*
         STM   R14,R12,12(R13)         | Save registers
         LR    R12,R15                 | Load base
         USING MAXLINK,R12             | Addressability
         LA    R11,SAVEAREA            | Load new savearea add
         ST    R11,8(R13)              | Chain new to old
         ST    R13,4(R11)              | Chain old to new
         LR    R13,R11                 | R13 --> new save area
         L     R2,0(R1)                | R2 --> parm pointer
         LH    R3,0(R2)                | R3 = Length of parm
         LTR   R3,R3                   | If no parm then
         BNZ   KEEPPARM                | error condition
         WTO   'No parm field supplied - MAXLINK terminated',          X
               ROUTCDE=11
         ABEND 16,DUMP
KEEPPARM BCTR  R3,0                    | Minus 1 for exec
         EX    R3,MOVEPARM             | Save parm field
         B     XTRACT
MOVEPARM MVC   PARMS(0),2(R2)
*        Extract DSN from parm field                                  *
XTRACT   LA    R3,1(R3)                | Reset length
         LA    R4,£DSN                 | R4 --> dynalloc dsn
         LA    R5,PARMS                | R5 --> Parm field
         XR    R6,R6                   | Clear length reg
XTRACT1  CLI   0(R5),C','              | Look for next parm
         BE    ENDXTR
         MVC   0(1,R4),0(R5)           | Move DSN character
         LA    R4,1(R4)                | Next DSN pos
         LA    R5,1(R5)                | Next parm char
         LA    R6,1(R6)                | Increment length
         BCT   R3,XTRACT1              | Loop through parm
ENDXTR   STH   R6,£DSNLEN              | Save DSN length
         CLI   0(R5),C','              | Was there another parameter
         BNE   ALLOCATE
         LA    R3,1(R3)
         EX    R3,MOVEREST             | Move rest of parms
         STH   R3,OPTIONS              | Save link parm length
         B     ALLOCATE
MOVEREST MVC   OPTIONS+2(0),1(R5)
*        Dynamically allocate SYSLMOD to required DSN                 *
ALLOCATE LA    R1,SVC99APT             | Point to SVC99 parms
         DYNALLOC
         LTR   R15,R15                 | Check it worked
         BZ    ENQUEUE
         L     R10,SVC99APT            | Address parm block
         USING S99RB,R10               | Parm block address.
         CVD   R15,£DOUBLE             | Save DYNALLOC return
         UNPK  PAVERETC,£DOUBLE        | Unpack return code
         OI    PAVERETC+2,X'F0'        | Make printable
         UNPK  PAVEERRC,S99ERROR(3)    | Unpack error code
         TR    PAVEERRC,HEXTOCHR       | Translate to EBCDIC
         MVI   PAVEERRC+L'PAVEERRC-1,C' '  | Blank garbage byte
         UNPK  PAVEINFO,S99INFO(3)     | Unpack info code
         TR    PAVEINFO,HEXTOCHR       | Translate to EBCDIC
         MVI   PAVEINFO+L'PAVEINFO-1,C' '  | Blank garbage byte
         DROP  R10                     | Drop SVC99 block address'lity
         LA    R1,PAVEWTO              | Send message to console
         SVC   35                      |
         ABEND 2048
*        Enqueue to prevent multiple updates                          *
ENQUEUE  LA    R4,30                   | 30 * 5 seconds total wait
ENQTEST  ENQ   (£MAJOR,£DSN,E,44,SYSTEM),RET=TEST
         LTR   R15,R15                 | Resource available
         BZ    ENQUSE
         WTO   'MAXLINK: UNABLE TO ENQUEUE ON LIBRARY - RETRYING',     X
               ROUTCDE=11
         STIMER WAIT,BINTVL=FIVESECS   | Wait 5 seconds
         BCT   R4,ENQTEST
ENQUSE   ENQ   (£MAJOR,£DSN,E,44,SYSTEM),RET=USE
         LTR   R15,R15                 | Resource available
         BZ    LINKLINK                | Yes, continue
         WTO   'MAXLINK: UNABLE TO ENQUEUE ON LIBRARY - ABORTING',     X
               ROUTCDE=11
         ABEND 2048
*        Call the linkage editor
LINKLINK LINK  EP=IEWL,PARAM=(OPTIONS),VL=1  | Link to linkeditor
         LR    R10,R15                 | Save return code
         DEQ   (£MAJOR,£DSN,8,SYSTEM),RET=HAVE
         LR    R15,R10                 | Restore return code
         B     RETURN
*        RETURN TO SYSTEM                                             *
RETURN   L     R13,4(R13)              | Reload old save area
         LM    R0,R12,20(R13)          | Restore registers
         L     R14,12(R13)             | Restore return address
         BR    R14                     | Return to MVS
*        CONSTANTS ..                                                 *
SAVEAREA DS    18F                     | Our savearea
         CNOP  2,4                     | Half word alignment
OPTIONS  DC    H'0',CL100' '           | Linkedit options
PARMS    DC    CL100' '
FIVESECS DC    AL4(100*5)              | 5 second wait
*        DYNALLOC PARAMETERS                                          *
SVC99APT DC    A(X'80000000'+SVC99RBA)
SVC99RBA DC    AL1(S99RBEND-S99RB,S99VRBAL,S99NOMNT,0)
         DC    Y(0,0),A(SVC99ATX,0)
         DC    AL1(S99WTDSN),AL3(0)
SVC99ATX DC    A(TUDSNAM)          DATASET NAME
         DC    A(TUSTATS)          STATUS
         DC    A(TUDDNME)          DDNAME
         DC    A(TUCLOSE)          DEALLOC AT CLOSE
         DC    A(X'80000000')      END OF TEXT UNIT LIST
TUDSNAM  DC    Y(DALDSNAM,1)
£DSNLEN  DC    H'0'
£DSN     DC    CL44' '
£MAJOR   DC    CL8'COMPDSN'
TUSTATS  DC    Y(DALSTATS,1,1),X'08'
TUDDNME  DC    Y(DALDDNAM,1,7),CL7'SYSLMOD'
TUCLOSE  DC    Y(DALCLOSE,0)
HEXTOCHR EQU   *-C'0'
         DC    C'0123456789ABCDEF'
£DOUBLE  DS    D
PAVEWTO  DC    H'80,0'
PAVELINE DC    CL80' '
         ORG   PAVELINE
         DC    C' ALLOCATION ERROR - RETCD='
PAVERETC DC    CL3' '
         DC    C',ERROR CODE='
PAVEERRC DC    CL5' '
         DC     C',INFO CODE='
PAVEINFO DC    CL5' '
         ORG   ,
*        DSECTS                                                      *
         IEFZB4D0
         IEFZB4D2
         END


Paul Beesley
Senior Systems Programmer
Revlon Group (UK) © Xephon 1989
