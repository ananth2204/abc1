Re-initialising a PDS directory
I was pleased to see the article on emptying a PDS that appeared in the June
1988 issue of MVS Update.  We also needed that function and so we had also
developed a program called PDSCLEAR.  Our program for emptying a PDS executes
faster than the one you published because it uses EXCP (actually XDAP) to clear
the directory, thus avoiding the overhead inherent in the STOW macro.  It
imposes no limit on the size of the new directory and does not require the new
directory to be the same size as the original.
Our program formats a PDS directory.  It can be used to clear the directory of
an existing PDS.  This will effectively scratch all members from the dataset
without scratching the dataset itself.  PDSCLEAR can also expand or contract the
directory size at the same time.  You may use a parameter to specify the size of
the directory as a number of blocks.  When no parameter is used, the directory
size remains unchanged.
Upon successful completion PDSCLEAR issues a zero return code.  Upon
unsuccessful completion PDSCLEAR issues a non-zero return code and an
appropriate error message.  SYSUT1 specifies the dataset whose directory will be
formatted.
******   THIS PROGRAM REWRITES THE DIRECTORY TO INDICATE THAT
*        THERE ARE NO MEMBERS IN THE PARTITIONED DATA SET.
*        THE PURPOSE OF THIS PROGRAM IS TO ENABLE THE PROGRAMMER
*        TO REWRITE A PDS WITHOUT FIRST DELETING AND REALLOCATING
*        THE DATA SET.  THIS PROGRAM CAN BE USED TO RE-ESTABLISH
*        A DIRECTORY OVERWRITTEN BY A SEQUENTIAL DATA SET BECAUSE
******   THE MEMBER NAME WAS OMITTED FROM AN OUTPUT DD IN JCL.
PDSCLEAR CSECT
         BEGLINK BASE=8            PROGRAM INITIALISATION
         USING PARMR,R1
         L     R3,PARMPTR
         DROP  R1
         USING PARMS,R3
         OC    PARMLEN,PARMLEN     ANY PARAMETERS?
         BE    NOPARM              NO.. KEEP DIRECTORY SIZE THE SAME
         LH    R4,PARMLEN          LENGTH OF PARM
         BCTR  R4,0                LENGTH FOR PACK
         EX    R4,PACK             PACK
         CVB   R4,WORKAREA         SET R4 FOR BLOCK COUNTER
         B     L1                  NO NEED TO READ DIRECTORY
PACK     PACK  WORKAREA,PARMVAL
         DROP  R3
NOPARM   OPEN  (INFILE,INPUT)      OPEN TO COUNT DIRECTORY BLOCKS
         TM    INFILE+48,X'10'     OPENED SUCCESSFULLY?
         BNO   RETURN
         SLR   R4,R4               ZERO COUNTER
GETLOOP  GET   INFILE
         LA    R4,1(,R4)           COUNT DIRECTORY BLOCKS
         B     GETLOOP
CLOSE    CLOSE INFILE
L1       RDJFCB OUTFILE
         OBTAIN CAMLST
         LTR   R15,R15
         BNZ   NOGOT
         TM    OBTAREA+38,X'02'   TEST FOR DSORG=PO
         BNO   NOTPO
         DEVTYPE OUTFILE+40,DEVTYPE,DEVTAB,RPS
DEVICEOK OPEN  (OUTFILE,OUTPUT)
         L     R12,16        ADDRESS OF CVT
         L     R1,28(,R12)   ADDRESS OF IECPCNVT
         ST    R1,CNVTADDR
         L     R1,232(,R12)  ADDRESS OF IEC0SCR1
         ST    R1,A0SCR1
         B     CONVERT
NEWTRK   LH    R12,TT
         LA    R12,1(,R12)   INCREMENT RELATIVE TRACK
         STH   R12,TT
CONVERT  L     R0,TT
         L     R1,DEBADDR
         LA    R2,DISKADDR
         L     R15,CNVTADDR
         STM   9,13,SAVEAREA
         BALR  R14,R15       CALL IECPCNVT
         LM    9,13,SAVEAREA
         CH    R15,=H'4'     TEST FOR OUT OF SPACE
         BNE   AROUND
         EOV   OUTFILE       GET ANOTHER EXTENT
         B     CONVERT       FIND NEW EXTENT
AROUND   MVC   ABLOCK,CCHH
         SLR   R3,R3         CLEAR COUNTER OF NO. OF BLOCKS ON TRACK
         LTR   R4,R4         ABOUT TO WRITE EOF?
         BNP   WRITEEOF      YES...GO WRITE EOF RECORD
SAMETRK  STC   R3,R          SEARCH FOR BLOCK R
         LA    R3,1(,R3)     INCREMENT COUNTER
         STC   R3,RECORDNO   WRITE BLOCK RECORDNO
         STM   R9,R11,SAVEAREA IEC0SCR1 CLOBBERS R9-R11
         MVC   BLOCKR,RECORDNO RECORD NUMBER ABOUT TO WRITE
         L     R0,BLOCKDDK        DATA LEN, KEY LEN, RECORDNO
         LA    R2,SECTOR          -> RECEIVING AREA
         ICM   R2,8,DEVTYPE+4     DEVICE TYPE
         L     R15,A0SCR1
         BALR  R14,R15            GET SECTOR TO USE IN XDAP
         LM    R9,R11,SAVEAREA
         TRKCALC REGSAVE=YES,FUNCTN=TRKBAL,TYPE=DEVTYPE+3,REMOVE=NO,   +
               R=(R3),K=8,DD=256,BALANCE=DCBTRBAL
         LTR   R15,R15            ROOM FOR RECORD ON THIS TRACK
         BNZ   NEWTRK
         STH   R0,DCBTRBAL        BALANCE AFTER THIS RECORD
         XC    DIRECB,DIRECB CLEAR THE ECB
         XDAP  DIRECB,WI,OUTFILE,ABLOCK,272,,DISKADDR,SECTOR
         ORG   *-10          *
         DC    X'ID'         * WRITE COUNT, KEY, DATA
         ORG   ,
         WAIT  ECB=DIRECB
         CLI   DIRECB,X'7F'  CHECK FOR SUCCESSFUL COMPLETION
         BNE   IOERR
         BCT   R4,SAMETRK         WRITE NEXT BLOCK
WRITEEOF STC   R3,R
         LA    R3,1(,R3)
         STC   R3,RECORDNO
         MVC   KDD,=X'000000'
* EVEN THOUGH RECORD WILL BE WRITTEN WITH ZERO KL AND DL,
* TELL SECTOR CALCULATION ROUTINE THAT ITS REGULAR RECORD
* FOR PROPER RESULTS
         STM   R9,R11,SAVEAREA IEC0SCR1 CLOBBERS R9-R11
         MVC   BLOCKR,RECORDNO RECORD NUMBER ABOUT TO WRITE
         L     R0,BLOCKDDK        DATA LEN, KEY LEN, RECORDNO
         LA    R2,SECTOR          -> RECEIVING AREA
         ICM   R2,8,DEVTYPE+4     DEVICE TYPE
         L     R15,A0SCR1
         BALR  R14,R15            GET SECTOR TO USE IN XDAP
         LM    R9,R11,SAVEAREA
         TRKCALC REGSAVE=YES,FUNCTN=TRKBAL,TYPE=DEVTYPE+3,REMOVE=NO,   +
               R=(R3),K=0,DD=0,BALANCE=DCBTRBAL
         LTR   R15,R15            ROOM FOR RECORD ON THIS TRACK
         BNZ   NEWTRK
         STH   R0,DCBTRBAL        BALANCE AFTER THIS RECORD
         XDAP  EOFECB,WI,OUTFILE,ABLOCK,8,,DISKADDR
         ORG   *-10
         DC    X'1D'         * WRITE COUNT, KEY, DATA
         ORG   ,
         WAIT  ECB=EOFECB
         CLI   EOFECB,X'7F'
         BNE   IOERR
         MVC   R,RECORDNO    ADDRESS OF LAST RECORD WRITTEN
         MVC   DCBFDAD(8),DISKADDR
         CLOSE OUTFILE
         LA    RF,0               INDICATE SUCCESSFUL
ENDLINK  ENDLINK RC=(15)
RETURN   WTO   'FILE CANNOT BE OPENED',ROUTCDE=11
         LA    RF,4
         B     ENDLINK
NOGOT    WTO   'DATA SET NOT FOUND',ROUTCDE=11
         LA    RF,4               INDICATE ERROR
         B     ENDLINK
NOTPO    WTO   'DATASET NOT PARTITIONED',ROUTCDE=11
         LA    RF,4
         B     ENDLINK
IOERR    WTO   'OUTPUT ERROR OCCURRED WHILE WRITING DIRECTORY, ECB IN R*
               EGISTER 15',ROUTCDE=11
         L     RF,DIRECB
         ABEND 20,DUMP
CAMLST   CAMLST SEARCH,DSNAME,VOLSER,OBTAREA
JFCBAREA DS    CL176
DSNAME   EQU   JFCBAREA           DS    CL44
VOLSER   EQU   JFCBAREA+118
OBTAREA  DS    0D,CL148
OUTFILE  DCB   DDNAME=SYSUT1,MACRF=(E),DEVD=DA,DSORG=PO,KEYLEN=8,      *
               EXLST=LIST
DCBFDAD  EQU   OUTFILE+5
DCBTRBAL EQU   OUTFILE+18
INFILE   DCB   RECFM=F,DSORG=PS,MACRF=GL,EODAD=CLOSE,                  *
               DDNAME=SYSUT1,BLKSIZE=256,LRECL=256
LIST     DC    X'87',AL3(JFCBAREA)
WORKAREA DC    D'0'
DISKADDR DS    0D            MBBCCHHR
         DC    XL3'0'        MBB
CCHH     DS    XL4           CCHH
R        DS    XL1           R
ABLOCK   DS    XL4       CCHH
RECORDNO DC    XL1'01'
KDD      DC    X'080100'   COUNT
         DC    8X'FF',X'000E',8X'FF',246X'00' KEY AND DATA
*              MEMBER,LENGTH-USED,MEMBER,TTR,C,ZEROES
TT       DC    H'0'
RN       DC    H'0'
BLOCKDDK DC    0F'0',AL2(256),AL1(8)  FOR COMPUTING SECTOR
BLOCKR   DS    X
SAVEAREA DS    5F
DEBADDR  EQU   OUTFILE+44
CNVTADDR DS    A
A0SCR1   DS    A
SECTOR   DS    X
DEVTYPE  DS    6F
PARMR    DSECT
PARMPTR  DS    A
PARMS    DSECT
PARMLEN  DS    H
PARMVAL  DS    CL1
         END


Howard Givner
Brooklyn College (USA)   © Brooklyn College 1988






