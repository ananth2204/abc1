Reading a PDS or PDS/E directory

Over the past few years I have written numerous programs that
read the directory of a PDS, some in Assembler and others in
PL/I.  The PL/I code that I have used came, for the most part,
from the example given in the PL/I Programmers' Guide.  The
Assembler code was patterned after the PL/I code.

These routines served me very well, until recently.  The last
program I wrote needed to support concatenated PDSs.  It is
here that the old standby routines failed.  The old routines
would read the directory of the first concatenated dataset
without any problems.  The problems arose when trying to
figure out where the directory of subsequent PDSs began.
There is simply no foolproof way to tell whether members past
the first end of directory member are residual members from
the first directory or valid members from the second directory.

The solution is a general purpose subroutine that is capable of
determining valid and non-valid members.  To do this it uses
BDAM.  By looking at the key of each record, it is a simple
matter to tell where one directory ends and the next one begins.

An added benefit to reading the directory in this fashion is that
it is an IBM-documented interface.  This program has been
used to successfully read both standard PDS directories and the
directories of PDS/Es.

Below is an example of a PL/I program using the subroutine.
The example could, just as easily, have been written in any
other language that supports calls to Assembler language
subroutines.


PL/I PROGRAM

 dir:proc options(main) reorder;
 dcl
         1 entry,
           2  name                     char(8)        init(''),
           2  ttr                      char(3)        init(''),
           2  ind,
              3 alias                  bit(1)         init('0'b),
              3 num_ptrs               bit(2)         init('0'b),
              3 usr_data               bit(5)         init('0'bx),
              3 ispf_stats,
                4 version              bit(8)         init('0'bx),
                4 mod                  bit(8)         init('0'bx),
                4 fill01               char(2)        init('0'),
                4 credate              fixed dec(7,3) init(0),
                4 chadate              fixed dec(7,3) init(0),
                4 chatime,
                  5 hh                 bit(8)         init('0'bx),
                  5 mm                 bit(8)         init('0'bx),
                4 current_num_lines    fixed bin(15)  init(0),
                4 init_num_lines       fixed bin(15)  init(0),
                4 modified_lines       fixed bin(15)  init(0),
                4 updating_userid      char(8)        init(''),
           2  filler                   char(34)       init(''),
         rc                            fixed bin(31)  init(0),
         readdir                       entry(char(*),
                                             char(8),
                                             /* dir ent struct */ ,
                                             fixed bin(31))
                                       options(asm inter retcode),
         sysprint                      file print;
 call readdir('O','PDS',entry,rc);        /* open the directory       */
 call readdir('R','PDS',entry,rc);        /* Read the first dir entry */
 do while (rc ^= 4);                      /* Read until end of file   */
    if (rc = 0) then do;
       if (usr_data = '01111'b) then      /* See if it has ISPF Stats */
          put edit(name,chadate,updating_userid) /* yes..say who chgd */
                  (col(1),a,x(2),f(7,3),x(2),a);
       else                                      /* no...say i dono?? */
          put edit(name,' --.---','Unknown')
                  (col(1),a,x(2),a,x(2),a);
    end;
    call readdir('R','PDS',entry,rc);     /* Read the next dir entry  */
 end;
 call readdir('C','PDS',entry,rc);        /* Close the directory      */
 end;                                     /* all done                 */


SOURCE CODE FOR READDIR

READDIR  STDENTRY REGS=YES,AMODE=24,RMODE=24
* FUNCTION  : THIS SUBROUTINE WILL READ THE DIRECTORY OF A PDS. IT IS
*             INTENDED TO BE USED BY HIGH LEVEL LANGUAGES SUCH AS PL/I
*             OR COBOL BECAUSE THEY HAVE LIMITED ACCESS TO THE
*             DIRECTORY. ITS USE, HOWEVER, BY ASSEMBLER PROGRAMS CAN
*             PREVENT THE CONSTANT RECREATION OF THE WHEEL.
* FEATURES  : AS STATED IN THE FUNCTION SECTION, THIS PROGRAM WILL READ
*             THE DIRECTORY OF A PDS. IT WILL WORK ON PDS'S AS WELL
*             AS PDSE'S. IT WILL MANAGE ANY NUMBER OF OPEN PDS'S AT THE
*             SAME TIME. THIS IS DONE BY MAINTAINING A DYNAMIC QUEUE OF
*             OPEN DCBS. THIS QUEUE EXPANDS AND CONTRACTS AS NEEDED TO
*             ACCOMMODATE THE NUMBER OF DCB'S REQUIRED.
* CALL FMT  : CALL READDIR,(FUNC,DDNAME,ENTPTR,RC)
* PARAMETERS: THERE ARE FOUR PARMS PASSED TO READ PDS. THEY ARE DEFINED
*             AS FOLLOWS:
* FUNC   DS CL1    O=OPEN, R=READ, C=CLOSE
* DDNAME DS CL8    DESIGNATES THE CURRENT DCB TO USE
* ENTRY  DS CL74   WILL CONTAIN THE DIRECTORY ENTRY. THIS PARAMETER IS
*                  GENERALLY A STRUCTURED VARIABLE IN THE CALLING PROG.
*                  THE STRUCTURE OF THE DIRECTORY ENTRY IS DEFINED IN
*                  THE "MANAGING NON-VSAM DATASETS" OR "DATA ADMIN
*                  GUIDE". THE CONSTANT PORTION OF THE DIRECTORY ENTRY
*                  IS LAID OUT AT THE END OF THIS PROGRAM IN THE
*                  DSECT NAMED "ENTRY".
* RC     DS F     |     OPEN       |    READ       |      CLOSE      |
*                 |0 - SUCCESS     | 0 - SUCCESS   | 0 - SUCCESS     |
*                 |4 - ALREADY OPEN| 4 - EOF       | 4 - NOT OPENED  |
*                 |8 - OPEN FAILED | 8 - DUMMY MEM | 8 - CLOSE FAILED|
*                 |                |12 - UNUSED BLK|                 |
*                 |                |16 - NOT OPENED|                 |
*                 +--------------------------------------------------+
*                 |             20 INVALID FUNCTION                  |
* THE PARAMETERS "FUNC" AND "DDNAME" ARE PASSED TO THE SUBROUTINE.
* PARAMETERS "ENTPTR" AND "RC" ARE RETURNED TO THE CALLER.
* BEGIN ENTRY ROUTINE
         LM    R2,R5,0(R1)             R2-> FUNC,R3->DDNAME,R4->ENTRY
*                                      R5-> ERR FLG
         CLI   0(R2),C'R'              READ ??
         BE    READ_DS                 YEP .. GO GET NEXT MEMBER
         CLI   0(R2),C'O'              OPEN ??
         BE    OPEN_DS                 YEP .. GO OPEN  DATASET
         CLI   0(R2),C'C'              CLOSE??
         BE    CLOSE_DS                YEP .. GO CLOSE DATASET
         B     ERR_20                  NOPE .. EXIT RC=20
* BEGIN OPEN ROUTINE
         USING DCB_BLK,R9              MAP DCB BLOCK
         USING IHADCB,R8               MAP DCB
* FIRST SCANS THROUGH THE QUEUE TO SEE IF FILE IS ALREADY THERE OR
* IF WE NEED TO ADD A NEW ENTRY.
OPEN_DS  ICM   R9,B'1111',ROOT         GET ROOT ADDR OF OPEN PDS QUEUE
         BZ    ADD_ENT                 END OF QUEUE..ADD NEW ENTRY
OP_SCAN  LA    R8,PDSDCB               ADDRESS THE DCB
         CLC   DDNAME(8),0(R3)         HAS THIS ALREADY BEEN ALLOC'ED??
         BE    ERR_4                   YEP .. EXIT RETURN CODE-4
         CLC   NEXT_DCB(4),=A(0)       THIS THE END OF THE QUEUE ??
         BE    ADD_ENT                 YEP .. GO ADD A NEW ENTRY
         ICM   R9,B'1111',NEXT_DCB     NOPE .. GO GET NEXT DD BLOCK
         B     OP_SCAN                 AND PLAY THE SAME SONG
ADD_ENT  STORAGE OBTAIN,LENGTH=BLK_LEN,LOC=BELOW,ADDR=(R7)
         LTR   R9,R9                   IS THIS AN ADD TO THE ROOT ??
         BZ    ADD_ROOT                YEP .. GO ADD ENTRY AT THE ROOT
         ST    R7,NEXT_DCB             NOPE .. STORE ADDR IN NEXT_DCB
         B     INIT_ENT                GO INITIALIZE NEW ENTRY
ADD_ROOT ST    R7,ROOT                 PLACE ADDRESS IN THE ROOT PTR
* INITIALIZE THE NEW ENTRY AND OPEN THE DCB
INIT_ENT LR    R9,R7                   MAP THE NEW ENTRY
         LA    R8,PDSDCB               ADDRESS THE NEW DCB
         MVC   PDSDCB(DCBLEN),A_DCB    MOVE A FRESH DCB INTO NEW ENTRY
         MVC   DDNAME(8),0(R3)         LABEL THIS BLOCK W/ THIS DDNAME
         MVC   DCBDDNAM(8),0(R3)       PLACE THE DDNAME IN NEW DCB
         XC    NEXT_DCB(4),NEXT_DCB    CLEAR FORWARD POINTER
         XC    ENT_PTR(4),ENT_PTR      CLEAR DIRECTORY ENTRY PTR
         OPEN  ((R8),INPUT)            OPEN THE NEW DCB
         TM    DCBOFLGS,DCBOFOPN       SUCCESS ??
         BZ    ERR_8                   NOPE .. EXIT RC=8
         B     RET_0                   YEP  .. EXIT RC=0
         DROP  R8,R9                   DROP DCB_BLK AND DCB MAPPING
* BEGIN READ ROUTINE
         USING DCB_BLK,R9              MAP DCB BLOCK
* SCAN THROUGH QUEUE TO FIND CORRECT DCB
READ_DS  ICM   R9,B'1111',ROOT         GET ROOT ADDR OF OPEN PDS QUEUE
         LTR   R9,R9
         BZ    ERR_16                  QUEUE EMPTY .. FILE NOT OPEN
RD_SCAN  LA    R8,PDSDCB               ADDRESS THE DCB
         CLC   DDNAME(8),0(R3)         IS THIS THE ONE ??
         BE    GET_ENT                 YEP .. GO READ THE FILE
         CLC   NEXT_DCB(4),=A(0)       THIS THE END OF THE QUEUE ??
         BE    ERR_16                  YEP .. FILE NOT OPENED
         ICM   R9,B'1111',NEXT_DCB     NOPE .. GO GET NEXT DD BLOCK
         B     RD_SCAN                 AND PLAY THE SAME SONG
* ENT_PTR IS ALWAWS PRIMED TO CONTAIN THE ADDRESS CURRENT DIR ENTRY.
* IF ITS VALUE IS ZERO THEN WE NEED TO READ THE NEXT BLOCK FROM THE
* FILE.
GET_ENT  ICM   R6,B'1111',ENT_PTR      GET ADDRESS OF ENTRY TO RETURN
         BNZ   RET_ENT                 NON-ZERO?? GO RET ADDR TO CALLER
         LA    R7,DIR_KEY              GET ADDR TO PUT DIR KEY+BLOCK
         READ  DECB1,SF,(R8),(R7),'S'  READ KEY+BLOCK
         CHECK DECB1                   WAIT TILL DONE
         LA    R6,DIR_ENTS+2           ADDRESS THE FIRST ENTRY
         USING ENTRY,R6                MAP THE DIRECTORY ENTRY
RET_ENT  XR    R1,R1                   CLEAR A WORK REG
         IC    R1,IND                  PICKUP THE INDICATORS
         N     R1,=X'0000001F'         LEAVE ONLY THE LENGTH OF UDATA
         SLL   R1,1                    TIMES IT BY TWO
         LA    R1,12(R1)               ADD CONST LENGTH OF DIR ENTRY
         EX    R1,MVC_DIR              STORE ENTRY IN CALLERS AREA
         MVC   MEMNAME(8),NAME         SAVE MEMBER NAME FOR LATER
         CLC   NAME(8),DIR_KEY         LAST MEMBER IN THIS BLOCK ??
         BE    ZERO_NXT                YEP .. ZERO NEXT ENTRY ADDR
         LA    R6,0(R6,R1)             ADD LENGTH OF DIR ENTRY
         ST    R6,ENT_PTR              STORE NEW ADDRESS FOR NEXT CALL
         B     CHK_ENT                 GO SEE HOW TO RETURN
MVC_DIR  MVC   0(*-*,R4),ENTRY   EX'ED STORE ENTRY IN CALLERS AREA
ZERO_NXT XC    ENT_PTR(4),ENT_PTR      FORCE A READ ON NEXT CALL
* THERE ARE THREE TYPES OF MEMBERS RETURNED.
*   1) REGULAR MEMBERS
*   2) DUMMY MEMBERS (MEMBER NAME = X'FFFFFFFFFFFFFFFF')
*   3) EMPTY BLOCKS  (MEMBER NAME - X'0000000000000000')
* THEY EACH SET A DIFFERENT RETURN CODE. THEY ARE
*   1) 0  - ZERO
*   2) 8  - EIGHT
*   3) 12 - TWELVE
* RESPECTIVLY.
CHK_ENT  CLC   MEMNAME(8),ALL_FOX      LAST MEMBER ??
         BE    ERR_8                   YEP .. RETURN CODE=8
         CLC   DIR_KEY(8),ALL_ZERO     EMPTY BLOCK ??
         BE    ERR_12                  YEP .. RETURN CODE=12
         B     RET_0                   NOPE.. RETURN CODE=0
DONE     B     ERR_4                   END OF FILE .. RC=4
         DROP  R6,R9                   DROP ENTRY AND DCB_BLK
* BEGIN CLOSE ROUTINE
         USING DCB_BLK,R9              MAP DCB BLOCK
CLOSE_DS ICM   R9,B'1111',ROOT         GET ROOT ADDR OF OPEN PDS QUEUE
         BZ    ERR_4                   QUEUE EMPTY .. FILE NOT OPEN
         XR    R7,R7                   CLEAR BACK POINTER
* FIND THE DCB TO CLOSE.
CLS_SCAN CLC   DDNAME(8),0(R3)         IS THIS THE ONE ??
         BE    CLOSE_IT                YEP .. GO CLOSE THE FILE
         CLC   NEXT_DCB(4),=A(0)       THIS THE END OF THE QUEUE ??
         BE    ERR_4                   YEP .. FILE NOT OPENED
         LR    R7,R9                   KEEP A POINTER TO PREV ENTRY
         ICM   R9,B'1111',NEXT_DCB     NOPE .. GO GET NEXT DD BLOCK
         B     CLS_SCAN                AND PLAY THE SAME SONG
CLOSE_IT LA    R8,PDSDCB               GET ADDRESS OF DCB
         CLOSE ((R8))                  CLOSE THE DCB
* REMOVE THE ENTRY FROM THE QUEUE AND FREE THE STORAGE.
         LTR   R7,R7                   FIRST ENTRY IN QUEUE ??
         BZ    DEL_1ST                 YEP .. GO REMOVE FROM HEAD
         LR    R8,R9                   SAVE CURRENT ENTRY ADDRESS
         L     R6,NEXT_DCB             GET CURRENTS ENT'S NEXT PTR
         LR    R9,R7                   MAP PREVIOUS ENTRY
         ST    R6,NEXT_DCB             POINT PAST THE CLOSING ENTRY
         LR    R9,R8                   POINT TO AREA TO BE FREED
         B     FREE_ENT                GO FREE THE STORAGE
DEL_1ST  MVC   ROOT(4),NEXT_DCB        ROOT POINTS PAST CURRENT ENTRY
FREE_ENT STORAGE RELEASE,LENGTH=BLK_LEN,ADDR=(R9)
         B     RET_0                   RETURN
         DROP  R9                      DROP DCB_BLK
* BEGIN COMMON EXIT POINTS
RET_0    XR    R15,R15                 RETURN CODE = 0
         B     EXIT
ERR_4    LA    R15,4                   RETURN CODE = 4
         B     EXIT
ERR_8    LA    R15,8                   RETURN CODE = 8
         B     EXIT
ERR_12   LA    R15,12                  RETURN CODE = 12
         B     EXIT
ERR_16   LA    R15,16                  RETURN CODE = 16
         B     EXIT
ERR_20   LA    R15,20                  RETURN CODE = 20
         B     EXIT
EXIT     ST    R15,0(R5)               UPDATE CALLERS RETURN CODE VAR
         STDEXIT RC=(15)
A_DCB    DCB   DDNAME=PDS,MACRF=R,DSORG=PS,RECFM=F,BLKSIZE=256,        -
               KEYLEN=8,LRECL=256,EODAD=DONE
DCBLEN   EQU   *-A_DCB
MEMNAME  DC    CL8' '                  TEMP STORAGE FOR A MEMBER NAME
ROOT     DC    A(0)                    ROOT ADDRESS OF DCB CHAIN
ALL_FOX  DC    XL8'FFFFFFFFFFFFFFFF'   DUMMY MEMBER NAME
ALL_ZERO DC    XL8'0000000000000000'   EMPTY BLOCK
         LTORG
DCB_BLK  DSECT
NEXT_DCB DS    A
DDNAME   DS    CL8
PDSDCB   DCB   DDNAME=PDS,MACRF=R,DSORG=PS,RECFM=F,BLKSIZE=256,        -
               KEYLEN=8,LRECL=256,EODAD=DONE
ENT_PTR  DS    A
DIR_KEY  DS    CL8
DIR_ENTS DS    CL256
BLK_LEN  EQU   *-DCB_BLK
* THIS MAPS THE DIRECTORY ENTRY
ENTRY    DSECT
NAME     DS    CL8
TTR      DS    CL3
IND      DS    XL1
*          3  ALIAS      BIT(1),
*          3  NUM_PTRS   BIT(2),
*          3  USR_DATA   BIT(5),
USERDATA DS    CL62
* THOUGH NOT USED BY THIS PROGRAM, THE FOLLOWING IS THE LAYOUT OF THE
* USERDATA PORTION OF A DIRECTORY ENTRY WHEN THE MEMBER HAS HAD STATS
* WRITTEN BY ISPF.
         ORG   USERDATA
VV       DC    XL1'01'
MM       DC    XL1'00'
         DC    XL2'0000'
CREDATE  DC    PL4'00000000'
CHADATE  DC    PL4'00000000'
TIME     DC    XL2'0000'
SIZE     DC    XL2'0000'
INIT     DC    XL2'0000'
MOD      DC    XL2'0000'
USERID   DC    CL8' '
         DC    CL2'  '
         ORG
         DCBD  DSORG=PS
         END


Paul Lemmons
Systems Programmer
Tucson Medical Center (USA)                                               c Xephon 1991

