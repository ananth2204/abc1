Displaying the EDT

EDTINF TITLE 'RETURN THE EDT ESOTERIC INFORMATION'
EDTINF CSECT
SPACE    EQU   C' '                      SPACE
EDTINF   AMODE 31
EDTINF   RMODE 24
         BAKR  R14,0                     SAVE CALLER'S ARS + GPRS
*                                        IN THE LINKAGE STACK
         LAE   R12,0(R15,0)              SET UP PROGRAM BASE REGISTER
GETWORK  EQU   *
         USING EDTINF,R12                INFORM THE ASSEMBLER
         LR    R8,R1                     PARM @ OF @
         STORAGE OBTAIN,LENGTH=WORKALEN,ADDR=(R10),SP=0,KEY=8,         X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LAE   R13,0(R10,0)              @ THE WORKAREA
         USING WORKAREA,R13              INFORM THE ASSEMBLER
         MVC   PREVSA,=C'F1SA'           PUT ACRONYM INTO SAVEAREA
*                                        TO INDICATE STATUS SAVED ON
*                                        THE LINKAGE STACK.
EDTDAT   EQU   *
         STORAGE OBTAIN,LENGTH=DVNLTLEN,ADDR=(R9),SP=0,KEY=8,          X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE DEVICE LIST')
         STCM  R9,B'1111',DEVLIST@     STORE DEVICE NAME LIST @
         BAL   R2,GETESC               GET THE EDT ESOTERICS
RETURN   EQU   *
         ICM   R1,B'1111',DEVLIST@     ADDRESS TO FREE
         STORAGE RELEASE,ADDR=(R1),LENGTH=DVNLTLEN,SP=0,KEY=8,         X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         LAE   R1,0(R13,0)             ADDRESS TO FREE
         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKALEN,SP=0,KEY=8,         X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         LR    R15,R10                 SET RC
         PR                            RESTORE CALLER'S ARS
*                                      GPRS 2-14 AND RETURN
*                                      TO CALLER
* THIS ROUTINE WILL BUILD A TABLE OF THE CURRENTLY DEFINED ESOTERICS.
* THE FORMAT OF THE TABLE IS AS FOLLOWS.
*  --------------------------------------
*  |  NO OF ESOTERICS IN THE TABLE. AL4 |
*  --------------------------------------
*  THE FOLLOWING VARIABLE SECTION WILL BE REPEATED FOR EACH ESOTERIC.
*     ---------------------------------------------------
*     |  ESOTERIC NAME                 CL8              |
*     |  VIO-ELIGIBLE                  CL1              |
*     |  NO OF DEVICE UNDER ESOTERIC   AL4              |
*     |  DEVICE NUMBERS                CL4*NO OF DEVICES|
*     ---------------------------------------------------
GETESC   EQU   *
         STCM  R2,B'1111',RETURN@      SAVE THE RETURN @
         LA    R3,DEVCLASS             @ THE DEVICE CLASS TABLE
         USING DCLASS,R3               INFORM THE ASSEMBLER
         LA    R4,DEVCLNET             NO OF TABLE ENTRIES
         LA    R5,EDTTAB+L'EDTNTE      @ THE EDT TABLE. SKIP OVER HDR
EDTBLD   EQU   *
         EDTINFO RTNNAMD,                                              X
               DEVCLASS=DEVCLS,                                        X
               NAMELIST=NLISTPTR,                                      X
               RSNCODE=REASONC,                                        X
               MF=(E,EDTRNLST,COMPLETE)
         LTR   R15,R15                 CALL OK?
         BZ    RETATTR                 YES-
         LR    R10,R15                 SAVE THE RETURN CODE
         A     R10,=F'100'             UNIQUE RETURN CODE
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO THE CALLER
RETATTR  EQU   *
         ICM   R7,B'1111',NLISTPTR     NAME LIST POINTER
         USING UNLISTD,R7              INFORM THE ASSEMBLER
         ICM   R8,B'1111',UNLNETS      NO OF TABLE ENTRIES
         BZ    NXTDCLAS                NO- ENTRIES
         LA    R7,UNLHDRL(,R7)         SKIP OVER THE HEADER
         DROP  R7                      INFORM THE ASSEMBLER
         USING UNLARRAY,R7             INFORM THE ASSEMBLER
UNSCAN   EQU   *
         MVI   ATTRALEN,X'0A'          ATTRIBUTE AREA LENGTH
         EDTINFO RTNATTR,                                              X
               UNITNAME=UNLARRAY,                                      X
               ATTRAREA=ATTRARA,                                       X
               RSNCODE=REASONC,                                        X
               MF=(E,EDTRNATR,COMPLETE)
         LTR   R15,R15                 CALL OK?
         BZ    TESTATTR                YES-
         CH    R15,=H'8'               RC = 8?
         BNE   BADRC1                  RETURN CODE?
         CLC   REASONC,=X'00000001'    UNIT NAME NOT IN EDT?
         BE    NEXTUNME                YES-
BADRC1   EQU   *
         LR    R10,R15                 SAVE THE RETURN CODE
         A     R10,=F'200'             UNIQUE RETURN CODE
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO THE CALLER
TESTATTR EQU   *
         TM    ATTRFLG1,ATTRESC        ESOTERIC?
         BNO   NEXTUNME                NO- CHECK THE NEXT UNIT NAME
         ST    R5,EDTTAB@              STORE CURRENT TABLE ENTRY @
         LA    R5,EDTEHLEN(,R5)        MOVE OVER THE HEADER PART
         ICM   R9,B'1111',DEVLIST@     DEVICE NAME LIST @
         STCM  R9,B'1111',DNLIST@      STORE FOR RTNDEVN MACRO USE
         USING DVNLISTD,R9             INFORM THE ASSEMBLER
         ICM   R10,B'1111',=AL4(L'DVNLIST) LENGTH OF DEVICE NAME LIST
         STCM  R10,B'1111',DVNLLEN     STORE LENGTH INTO TABLE
         EDTINFO RTNDEVN,                                              X
               UNITNAME=UNLARRAY,                                      X
               DEVNLIST=DNLIST@,                                       X
               RSNCODE=REASONC,                                        X
               MF=(E,EDTRNDEV,COMPLETE)
         LTR   R15,R15                 CALL OK?
         BZ    MOVEDEVN                YES-
         LR    R10,R15                 SAVE THE RETURN CODE
         A     R10,=F'300'             UNIQUE RETURN CODE
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO THE CALLER
MOVEDEVN EQU   *
         ICM   R15,B'1111',DVNLNENT    CALCULATE THE NO OF DEVICE
         SLL   R15,(DVNENTL/2)(0)      NUMBERS TO MOVE
         ST    R15,LENSTORE            STORE FOR A WHILE
         LA    R14,DVNLIST             @ DSN LIST
         LR    R0,R5                   DESTINATION @
         LR    R1,R15                  LENGTH TO RECEIVE
         MVCL  R0,R14                  MOVE THE DEVICE NUMBERS
         L     R14,LENSTORE            LENGTH FOR UPDATE
         LA    R5,0(R14,R5)            NEXT ESOTERIC TABLE ENTRY
         ICM   R15,B'1111',VARVALLN    CURRENT LENGTH OF EDT TABLE
         LA    R14,EDTEHLEN(R15,R14)   LENGTH OF THIS ESOTERIC ENTRY
         STCM  R14,B'1111',VARVALLN    UPDATED LENGTH OF EDT TABLE
         ST    R5,STORE@               LET'S STORE FOR A MOMENT
         L     R5,EDTTAB@              RESET TABLE @
         USING EDTTABD1,R5             INFORM THE ASSEMBLER
         MVC   EDTESC,UNLARRAY         ESOTERIC NAME
         MVC   EDTNENTS,DVNLNENT       NO OF DEVICE NUMBERS FOR
*                                      ESOTERIC
         MVI   EDTVIO,C'Y'             VIO ELIGIBLE
         TM    ATTRFLG1,ATTRVIO        VIO ELIGIBLE?
         BO    RESET@                  YES-
         MVI   EDTVIO,C'N'             NOT VIO ELIGIBLE
RESET@   EQU   *
         L     R14,NOESOTER            UPDATE THE NUMBER
         LA    R14,1(,R14)             OF CREATED
         ST    R14,NOESOTER            ESOTERICS
         L     R5,STORE@               RESET EDTTAB @
         DROP  R5                      INFORM THE ASSEMBLER
NEXTUNME EQU  *
         LA    R7,L'UNLARRAY(,R7)      NEXT UNIT NAME ENTRY
         BCT   R8,UNSCAN               DO WHILE R8 > 0?
NXTDCLAS EQU  *
         LA    R3,L'DEVCLASS(,R3)      NEXT DEVICE CLASS ENTRY
         BCT   R4,EDTBLD               DO WHILE R4 > 0?
         LA    R5,EDTTAB               @ THE GENERATED EDT TABLE
         L     R14,NOESOTER            NO OF DEFINED ESOTERICS
         ST    R14,0(,R5)              STORE INTO TABLE
         LA    R14,VARNAME             @ OF VARIABLE NAME TO CREATE
         STCM  R14,B'1111',VARNPTR     STORE FOR IKJCT441
         LA    R14,L'VARNAME(0,0)      LENGTH OF VARIABLE NAME
         STCM  R14,B'1111',VARVNLEN    STORE FOR IKJCT441
         LA    R14,EDTTAB              @ OF VARIABLE
         STCM  R14,B'1111',VARVAL@     STORE FOR IKJCT441
         ICM   R14,B'1111',VARVALLN    CURRENT LENGTH OF EDT TABLE
         LA    R14,L'EDTNTE(,R14)      ADD HEADER PART IN
         STCM  R14,B'1111',VARVALLN    UPDATED LENGTH OF EDT TABLE
         BAL   R2,REXXVAR              BUILD THE REXX VARIABLE
         LTR   R15,R15                 DID WE BUILD THE VARIABLE?
         BZ    ALLOK                   YES-
         L     R10,RCODE441            SAVE THE RETURN CODE
         A     R10,=F'400'             UNIQUE RETURN CODE
         B     LETSQUIT                AND LET'S QUIT
ALLOK    EQU   *
         SR    R10,R10                 SET THE RETURN CODE
LETSQUIT EQU   *
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO CALLER
REXXVAR  EQU   *                       DEFINE REXX VARIABLE
         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL
         XC    RCODE441,RCODE441       RETURN CODE
         L     R15,CVTPTR              CVT @
         USING CVT,R15                 INFORM THE ASSEMBLER
         L     R15,CVTTVT              TSCT @
         USING TSVT,R15                INFORM THE ASSEMBLER
         L     R15,TSVTVACC            IKJCT441 @
         LTR   R15,R15                 ENTRY POINT FOUND?
         BNZ   CALL441                 YES- DO A CALL
LINK441  EQU   *
         MVC   LINKAREA,LINKL          LINK SL=L
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         LINK  EP=IKJCT441,                                            X
               PARAM=(ECODE,           ENTRY CODE                      X
               VARNPTR,                POINTER TO VARIABLE NAME        X
               VARVNLEN,               LENGTH  OF VARIABLE NAME        X
               VARVAL@,                POINTER TO VARIABLE VALUE       X
               VARVALLN,               LENGTH  OF VARIABLE             X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL=1,                   EOL                             X
               MF=(E,CALLAREA),        CALL AREA                       X
               SF=(E,LINKAREA)         LINK AREA
         B     CHKRET                  CHECK THE RETURN CODE
CALL441  EQU   *
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         CALL  (15),                                                   X
               (ECODE,                 ENTRY CODE                      X
               VARNPTR,                POINTER TO VARIABLE NAME        X
               VARVNLEN,               LENGTH  OF VARIABLE NAME        X
               VARVAL@,                POINTER TO VARIABLE VALUE       X
               VARVALLN,               LENGTH  OF VARIABLE             X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL,                     EOL                             X
               MF=(E,CALLAREA)
         B     CHKRET                  CHECK THE RETURN CODE
CHKRET   EQU   *
         BR    R2                      RETURN TO CALLER
MOVEDNUM MVC   0(*-*,R5),DVNLIST       MOVE IN ESOTERIC DEVICE NUMS
         LTORG
VARNAME  DC    CL6'EDTTAB'             VARIABLE NAME
ECTPARM  DC    X'FFFFFFFF'             ECT
ECODE    DC    AL4(TSVEUPDT)           CREATE CODE
LINKL    LINK SF=L
LINKLEN EQU  *-LINKL                   LENGTH
CALLL    CALL ,(,,,,,,,),MF=L
CALLLEN EQU  *-CALLL                   LENGTH
DEVCLASS DS    0X                      DEVICE CLASS TABLE
         DC    X'80'                   TAPE
         DC    X'40'                   COMMS
         DC    X'41'                   CTC
         DC    X'20'                   DASD
         DC    X'10'                   DISPLAY
         DC    X'08'                   UNIT RECORD
         DC    X'04'                   CHARACTER
DEVCLLEN EQU   *-DEVCLASS              DEVICE CLASS TABLE LENGTH
DEVCLNET EQU   DEVCLLEN/L'DEVCLASS     NO OF TABLE ENTRIES
WORKAREA DSECT
SAVEAREA DS    CL72                    SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA
REASONC  DS    AL4                     REASON CODE
LENSTORE DS    F                       STORE AREA FOR LENGTH
NOESOTER DS    F                       NO OF OBTAINED ESOTERICS
RETURN@  DS    F                       RETURN @
STORE@   DS    F                       @ STORE AREA
EDTTAB@  DS    F                       CURRENT EDT TABLE @ ENTRY
EDTTABNE DS    F                       EDT NO OF TABLE ENTRIES
DEVLIST@ DS    F                       STORED DEVICE LIST @
DNLIST@  DS    F                       DEVICE LIST @
*                                      A(DVNLIST)
ATTRARA  DS    0CL10                   ATTRIBUTE AREA
ATTRALEN DS    X                       ATTRIBUTE AREA LENGTH
ATTRFLG1 DS    X                       ATTRIBUTE AREA FLAG 1
ATTRESC  EQU   X'80'                   UNITNAME IS AN ESOTERIC
ATTRVIO  EQU   X'40'                   UNITNAME IS VIO ELIGIBLE
ATTRFLG2 DS    X                       ATTRIBUTE AREA FLAG 2
ATTRDEVC DS    X                       NO OF DEVICE CLASSES IN
*                                      UNIT NAME
ATTRDEVT DS    AL4                     NO OF DEVICE TYPES IN
ATTRFILL DS    XL2                     NOT PART OF PROG INTERFACE
*                                      UNIT NAME
NLISTPTR DS    F                       RETURNED UNITNAME TABLE
         EDTINFO MF=(L,EDTRNLST)       EDT INFO
         EDTINFO MF=(L,EDTRNATR)       EDT INFO
         EDTINFO MF=(L,EDTRNDEV)       EDT INFO
*  IJKCT441 PARAMETERS                 UNIT NAME
IKJTOKEN DS    F                       TOKEN
RCODE441 DS    F                       RETURN CODE
VARNPTR  DS    F                       VARIABLE NAME PTR
VARVNLEN DS    F                       VARIABLE NAME LENGTH
VARVAL@  DS    F                       VARIABLE @
VARVALLN DS    F                       LENGTH OF VARIABLE
         DS    0F
LINKAREA DS    CL(LINKLEN)             LINK AREA
CALLAREA DS    CL(CALLLEN)             PARM LIST AREA
EDTTAB   DS    CL32000                 GENERATED EDT TABLE
WORKALEN EQU   *-WORKAREA              WORK AREA LENGTH
DCLASS   DSECT
DEVCLS   DS    X                       DEVICE CLASS
UNLISTD  DSECT
UNLSUBP  DS    X                       NAME LIST SUBPOOL
UNLSIZE  DS    AL3                     SIZE OF UNIT NAME LIST
UNLNETS  DS    AL4                     NO OF TABLE ENTRIES
UNLHDRL  EQU   *-UNLSUBP               HEADER LENGTH
UNLARRAY DS    CL8                     ARRAY OF UNIT NAMES
EDTTABD1 DSECT
EDTNTE   DS    AL4                     NO OF TABLE ENTRIES
         ORG   EDTNTE
EDTESC   DS    CL8                     ESOTERIC
EDTVIO   DS    CL1                     VIO ELIGIBLE
EDTNENTS DS    AL4                     NO OF ENTRIES FOR ESOTERIC
EDTEHLEN EQU   *-EDTESC                LENGTH OF HEADER PART
         ORG   EDTNENTS+L'EDTNENTS
EDTDEVNM DS    CL4                     DEVICE NUMBER
         ORG
DVNLISTD DSECT
DVNLLEN  DS    AL4                     TABLE LENGTH + HEADER
DVNLNENT DS    AL4                     NO OF TABLE ENTRIES
DVNLHLEN EQU   *-DVNLLEN               LENGTH OF HEADER PART
DVNLIST  DS    CL32000                 DEVICE NUMBER LIST TABLE
DVNENTL  EQU   4                       DEVICE NUMBER LENGTH
DVNLTLEN EQU   *-DVNLISTD              DEVICE NUMBER LIST LENGTH
         CVT   DSECT=YES,LIST=NO
         IKJTSVT
         END   EDTINF

EDTDSPLY REXX EXEC

/**rexx**/
/*  PROGRAM-ID           EDTDSPLY.                                 */
/*  Displays the esoteric entries in the current EDT.              */
/*trace i*/
save_prompt = prompt("off")
address "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('XXXXXX.PANELS')"
edtscan:
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* LOCK THE TERMINAL      */
if (rc > 8) then do                      /* error?                 */
   say 'Lock error    rc = 'rc''         /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "ADDPOP ROW(6) COLUMN(5)" /* pop up position    */
ADDRESS "ISPEXEC" "DISPLAY PANEL(EDTPAN02)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
EDTINF                                   /* Obtain EDT Info        */
if (rc ^= 0) then do                     /* error?                 */
   edtrc= rc                             /* save the return code   */
   say 'EDTINF Error    rc = 'rc''       /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(edtrc)                           /* and quit               */
end
call edt_esoteric_build                  /* build esoteric info    */
ADDRESS "ISPEXEC" "REMPOP"               /* remove popup           */
ADDRESS "ISPEXEC" "ADDPOP ROW(2) COLUMN(1)"  /* pop up position    */
ADDRESS "ISPEXEC" "TBDISPL EDTTAB PANEL(EDTPAN01)"
if (rc > 8) then do                      /* error?                 */
   say 'tbdispl error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove menu popup      */
ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"       /* remove allocation      */
exit(0)                                  /* quit                   */
edt_esoteric_build:
ADDRESS "ISPEXEC" "TBCREATE EDTTAB NOWRITE REPLACE"
if (rc >  4) then do                     /* call ok?               */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* lets quit              */
end
ztdmark=    '-------------------------------------------------------------------
--------'
ADDRESS  "ISPEXEC" "VPUT    (esoteric,vio,devnums,ZTDMARK) SHARED"
tabrows=  5000                           /* max table rows         */
no_edt_table_entries= x2d(c2x(substr(edttab,1,4))) /*no of table ents*/
displ= 5                                 /* starting displacement  */
do i = 1 to no_edt_table_entries         /* loop through all tab ents*/
   esoteric= substr(edttab,displ,8)      /* esoteric name          */
   vio=      substr(edttab,displ+8,1)    /* vio eligible           */
   no_of_device_nums= x2d(c2x(substr(edttab,displ+9,4)))
   displ= (displ + 13)                   /* position onto dev nums */
   devnums_displ= displ                  /* device number start    */
   devnums= ''                           /* init                   */
   devnums_per_line= 0                   /* init                   */
   do x= 1 to no_of_device_nums          /* print the device nums  */
      devnums= devnums||' '||substr(edttab,devnums_displ,4)
      devnums_displ= (devnums_displ + 4) /* next entry             */
      devnums_per_line= (devnums_per_line + 1)
      if (devnums_per_line = 10) then do /* ten device nos per line*/
         ADDRESS "ISPEXEC" "TBADD EDTTAB  /* add the entries       */
                 SAVE(esoteric,vio,devnums)
                 MULT("TABROWS")"
         if (rc ^= 0) then do           /* call ok?                */
            say 'tbadd error    rc = 'rc'' /* no- inform the user  */
            ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation*/
            exit(0)                      /* let's quit             */
         end
         else do
            esoteric= ''                 /* init                   */
            vio=      ''                 /* init                   */
            devnums=  ''                 /* init                   */
            devnums_per_line= 0          /* init                   */
         end
      end
   end
  if (devnums_per_line ^= 0) then do     /* anything left to print?*/
     ADDRESS "ISPEXEC" "TBADD EDTTAB     /* yes- add the entries   */
              SAVE(esoteric,vio,devnums)
              MULT("TABROWS")"
     if (rc ^= 0) then do               /* call ok?                */
        say 'tbadd error    rc = 'rc' ' /* no- inform the user  */
        ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation*/
        exit(0)                         /* let's quit              */
     end
  end
  displ= devnums_displ                  /* next edt entry position */
end
ADDRESS "ISPEXEC" "TBTOP EDTTAB"         /* position to top of tab */
if (rc ^= 0) then do                     /* call ok?               */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
return

EDTPAN01 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(70,18)
%
%COMMAND ===>_ZCMD      %                      SCROLL ===>_AMT      +
%
%
*Esoteric   VIO     Device
* Name              Numbers
%
)MODEL
#Z       %  #z%   #z                                                 %
)INIT
.ZVARS= '(esoteric,vio,devnums)'
&ZCMD= ' '
&ZWINTTL=  'EDT ESOTERICS'
)REINIT
&ZCMD= ' '
)PROC
)END

EDTPAN02 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(60,5)
%
%    -----------------------------------------------------
%    |  EDT ESOTERIC Search is in progress. Please Wait  |
%    -----------------------------------------------------
%
)INIT
&ZCMD= ' '
&ZWINTTL=  'EDT ESOTERIC Search'
)REINIT
&ZCMD= ' '
)PROC
)END


R F Perretta
Senior Systems Programmer (UK)                                               c Xephon 1995

