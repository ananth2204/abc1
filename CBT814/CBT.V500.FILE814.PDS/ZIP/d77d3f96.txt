The SHIFT function

REXX, the procedure language offered with MVS TSO/E 2,
includes many powerful string handling functions.  However, a
shift function is missing from its repertoire.  The SHIFT
function described here can be used to shift the contents of a
string through the specified number of bit positions.

The SHIFT function shifts the specified string (ie a string of
characters) through the number of bit positions specified in bit
count.  The string may be shifted either left (parameter L) or
right (parameter R).  Binary zero is used as filler.

The following restrictions apply:

o       The string may have a maximum length of 4 bytes

o       The bit count may have a maximum value of 32.

The SHIFT function does not alter the specified string.  The
returned function value may be assigned to string if it is to be
altered.

The syntax used for the command is:

       SHIFT(string,L or R,bitcount)

The function does not set the REXX return code variable rc -
any error code is returned as function value.  The following
error values can be returned:

o       1 - string missing or too long (ie more than 4 bytes)

o       2 - direction parameter missing or invalid

o       4 - bit count (shift-length) error (ie more than than 32 bits).

An error return may indistinguishable from a successful return.

The following sequence:

       alpha = "1234";
       x = SHIFT(alpha,'L',12);

sets x to X'2F3F4000'.

Similarly, the following:

alpha = "1234";
alpha = SHIFT(alpha,'R',8);

shifts alpha one byte to the right, ie alpha is set to contain
X'00F1F2F3'.


PROGRAM CODE

         TITLE 'REXX SHIFT Function'
SHIFT    CSECT
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save-area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         USING EFPL,R1
         L     R2,EFPLEVAL       PTR(Evaluation Block)
         L     R11,0(R2)         A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG        A(parsed Argument List)
         USING ARGTABLE_ENTRY,R10
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get "string"
         LM    R3,R4,0(R10)
* R3: A(argument), R4: L(argument)
         MVC   ERRCODE,=CL2'-1'   preset return code (=error)
         LTR   R4,R4
         BM    ERROR              "string" missing
         BZ    ERROR              null "string"
         CH    R4,=H'4'
         BH    ERROR              "string" too long
* get "direction" (L or R)
         MVC   ERRCODE,=CL2'-2'   preset return code (=error)
         LM    R5,R6,8(R10)
         LTR   R6,R6
         BM    ERROR              "parameter" missing
         BZ    ERROR              null "string"
         MVI   FLAG,0
         CLI   0(R5),C'L'         upper case(L)
         BNE   *+8
         OI    FLAG,$LEFT
         CLI   0(R5),C'l'         lower case(L)
         BNE   *+8
         OI    FLAG,$LEFT
         CLI   0(R5),C'R'         upper case(R)
         BNE   *+8
         OI    FLAG,$RIGHT
         CLI   0(R5),C'r'         lower case(R)
         BNE   *+8
         OI    FLAG,$RIGHT
         CLI   FLAG,0
         BE    ERROR              invalid parameter value
* get "shift count"
         MVC   ERRCODE,=CL2'-4'   preset return code (=error)
         LM    R5,R6,16(R10)
         LTR   R6,R6
         BM    ERROR              "parameter" missing
         BZ    ERROR              null "parameter"
         BCTR  R6,0               length code
         EX    R6,EXPACK
         CVB   R5,D
         LTR   R5,R5
         BZ    ERROR              null "value"
         CH    R5,=H'32'
         BH    ERROR
* R4: field size
         SR    R1,R1              zeroize result register
         SR    R2,R2
         TM    FLAG,$RIGHT
         BO    RSHIFT
* else left shift
         IC    R2,LMASK-1(R4)
         EX    R2,EXICM
         SLL   R1,0(R5)
         B     SHIFTEND
* right shift
RSHIFT   IC    R2,RMASK-1(R4)
         EX    R2,EXICM
         SRL   R1,0(R5)
SHIFTEND ST    R4,EVALBLOCK_EVLEN   entry size
         EX    R2,EXSTCM
EOJ      DS    0H                 job end
         L     R13,4(R13)         restore A(old save-area)
         SR    R15,R15            zeroize return code
         RETURN (14,12),RC=(15)
ERROR    LA    R15,2              length
         ST    R15,EVALBLOCK_EVLEN   entry size
         MVC   EVALBLOCK_EVDATA(2),ERRCODE
         B     EOJ
ERRCODE  DS    H
FLAG     DS    X
$LEFT    EQU   X'01'
$RIGHT   EQU   X'02'
LMASK    DC    X'080C0E0F'
RMASK    DC    X'0103070F'
EXPACK   PACK  D,0(0,R5)
EXICM    ICM   R1,0,0(R3)
EXSTCM   STCM  R1,0,EVALBLOCK_EVDATA
D        DS    0D,PL8
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         END


Anthony Rudd
Technical Consultant (Germany)                     c Anthony Rudd 1991

