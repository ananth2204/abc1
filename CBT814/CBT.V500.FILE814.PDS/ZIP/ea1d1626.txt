Command line update of LINKLIST

This utility, like most utilities, was written to plug a gap.
When IBM introduced MVS/ESA, it came with several very
useful enhancements.  One program that received several of
these enhancements was the LLA program.  In the evolution
from XA to ESA this facility changed from LINKLIST Look
Aside to Library Look Aside.  In so doing it took on a much
broader role.

One of the many improvements in LLA was the addition of the
update option.  With this option it became possible to refresh
individual libraries or even individual members within a library
without refreshing the entire LINKLIST.  Herein lies the gap.

If a single member is to be refreshed, a member must be
created in SYS1.PARMLIB.  The member name must be
CSVLLAxx, where xx is a suffix chosen by the person doing
the update.  Control statements to indicate which members are
to be updated are placed in this member.  Once done, the
command 'F LLA,UPDATE=xx' has to be given at a console.
After the command is issued there are no messages stating
success or failure - just a one-line notice that indicates that the
library look aside has been updated.

Even if all is done properly, it is still possible to make an error.
This is because you must specify each alias of the member to
be refreshed, along with the member itself.  Also, because
there are no messages, it is impossible to know from which
library the member was updated.

An obvious improvement would be the ability to update
members via a simple command.  That is where LNKLST
comes in.  With simple operator commands, individual
members of LINKLIST may be refreshed.  When a member is
selected for refresh, all of its aliases will also be included.
Additionally, messages will be displayed telling the operator
exactly what is being refreshed and from what libraries.

For the sake of completeness, LNKLST serves two other
functions.  The first is the FIND function.  This aid will locate
where in LINKLIST a specified member may be found.  The
second will simply list the LINKLIST concatenation and
indicate whether or not the library is APF authorized.

To use LNKLST there has to be some set-up.  First of all the
LNKLST program needs to be placed in an APF-authorized
library.  If your LINKLIST is authorized this is an ideal place
to put it.  Next, the program needs to be defined to your
security system.  The program must have read access to all
libraries in the LINKLIST.  It must also have write access to
SYS1.PARMLIB.  Thirdly, the LNKLST procedure must be
placed in a system PROCLIB.  This is so that when the
operator issues the start command, JES will be able to find the
appropriate JCL.  This program also uses a subroutine to read
the directories of the LINKLIST libraries.  The name of the
subroutine is READDIR.  The source to it may be found in the
May 1991 issue of MVS Update.

To use the program the operator simply issues the start
command at the console and passes parameters to the program
in that command.


Examples of use

To list the LINKLIST library concatenation with an indication
as to whether or not the library is APF authorized, do the
following:

       S  LNKLST

or

       S  LNKLST,PARM=LIST

To find which libraries contain a given member, issue the
following start command:

       S  LNKLST,PARM='FIND,member'

To refresh a member with all of its aliases and report on where
the member is being updated from, do the following:

       S  LNKLST,PARM='UPDATE,member'


LNKLST SOURCE CODE

         MACRO
.* THIS MACRO CONVERTS THE VALUE FOUND IN A REGISTER TO READABLE
.* EBCDIC.
.* &REG - REG TO CONVERT TO READABLE EBCDIC
.* &TO  - THE ADDRESS OF AN AREA IN STORAGE TO CONTAIN CONVERTED VALUE
.* &LEN - LENGTH OF THE OUTPUT AREA. MAX IS 8.
.*        IF OMITTED THE DEFAULT VALUE IS 8.
&LABEL   CVH   &REG,&TO,&LEN
&LABEL   LR    1,&REG                  LOAD REG-1 WITH VAL TO CONVERT
         AIF   ('&LEN' EQ '').NOLEN   .IF NO LENGTH SPECIFIED DEFAULT
&L       SETC  '&LEN'                 .OTHERWISE SET LENGTH HERE
         AGO   .TOP                   .AND GO EXPAND
.NOLEN   ANOP                         .HERE IS WHERE WE
&L       SETC  '8'                    .SET A DEFAULT
.TOP     ANOP                         .START EXPANSION
         AIF   ('&L' EQ '8').START    .CHECK IS LENGTH=8?? SKIP SLL
&X       SETA  (8-&L)*4               .NOPE .. GET SHIFT COUNT
         SLL   1,&X                    SHIFT OFF UNNEEDED NIBBLES
.START   ANOP                         .EXPAND CONVERSION
         LA    15,&L                   R15 = NUMBER OF NIBBLED TO CONV
         LA    14,&TO                  R14 -> PLACE TO PUT CHARS
L&SYSNDX XR    0,0                     CLEAR WORK VARIABLE
         SLDL  0,4                     GET A NIBBLE
         CH    0,=H'10'                DECIMAL DIGIT??
         BL    F&SYSNDX                YEP .. THEN FORMAT IS "F."
         AH    0,=H'183' (X'C0'-X'09') NOPE ..THEN FORMAT IS "C."
         B     S&SYSNDX                GO STORE THE CHARACTER IN "TO"
F&SYSNDX AH    0,=H'240' (X'F0')       ADD X'F0'
S&SYSNDX STC   0,0(14)                 STORE THE CHARACTER
         LA    14,1(14)                ADVANCE TO NEXT CHAR IN "TO"
         BCT   15,L&SYSNDX             LOOP "LEN" TIMES
         MEND                         .THE END
LNKLST   STDENTRY REGS=YES,AMODE=24,RMODE=24 OR LOCAL EQUIVALENT
         L     R2,0(R1)                R2 -> LEN OF PARM STRING
         LA    R3,2(R2)                R3 -> PARM STRING
         CLC   0(2,R2),=X'0000'        STRING LENGTH = 0 ??
         BE    LIST_TOP                DEFAULT = LIST
         CLC   0(4,R3),=CL4'LIST'      LIST COMMAND ??
         BE    DO_LIST                 YEP .. GO DO FIND FUNCTION
         CLC   0(5,R3),=CL5'FIND,'     FIND COMMAND ??
         BE    DO_FIND                 YEP .. GO DO FIND FUNCTION
         CLC   0(7,R3),=CL7'UPDATE,'   UPDATE COMMAND ??
         BE    DO_UPD                  YEP .. GO DO UPDATE FUNCTION
* SIMPLY LIST THE NAME OF EACH LINKLIST DATASET AND INDICATE WHETHER OR
* NOT IT IS APF AUTHORIZED.
DO_LIST  CLC   0(2,R2),=Y(4)           LENGTH OF PARM = 4 ??
         BE    LIST_TOP                YEP .. CALLER DID IT RIGHT
         WTO   'LNKLST - UNRECOGNIZED EXECUTION PARM SPECIFIED'
         LA    R15,12                  SET RETURN CODE
         B     EXIT                    AND EXIT
         USING CVT,R10                 MAP THE CVT
LIST_TOP L     R10,CVTPTR              R10 ADDRESSES THE CVT
         USING LLT,R9                  MAP THE LLT
         L     R9,CVTLLTA              ADDRESS THE LLT
         DROP  R10                     DROP CVT MAP
         LA    R10,LLTDSN              ADDRESS FIRST DATASET
         L     R8,LLTCOUNT             GET NUMBER OF LINKLIST LIBRARIES
         L     R7,LLTCOUNT             R7 = NUMBER ENT
         MH    R7,=Y(L'LLTENTRY)       OFFSET PAST LAST ENTRY
         A     R7,=A(L'LLTHEAD)        OFFSET TO FIRST FLAG BYTE
         LA    R7,0(R7,R9)             R7 -> FIRST APF FLAG BYTE
LIST_LUP MVC   LIST_WTO+30(44),0(R10)
         TM    0(R7),LLTAPFIN          APF AUTHORIZED ??
         BO    LIST_APF                YEP .. GO SAY SO
         MVI   LIST_WTO+22,C'N'        NOPE..    SAY NO
         B     LIST_WTO                GO DISPLAY ENTRY
LIST_APF MVI   LIST_WTO+22,C'Y'        Y = YES IT IS APF AUTHORIZED
LIST_WTO WTO   'LNKLST - APF: ., DSN: .................................-
               ...........'
         LA    R7,1(R10)               POINT TO NEXT APF FLAG BYTE
         A     R10,=A(L'LLTENTRY)      POINT TO NEXT ENTRY
         BCT   R8,LIST_LUP             PLAY IT AGAIN
         B     EXIT                    WE ARE DONE ... EXIT
         DROP  R9                      UN-MAP LLT
* DYNAMICALLY ALLOCATE EACH DATASET AND CHECK TO SEE IF THE DESIRED
* MEMBER IS PRESENT IN IT.
DO_FIND  CLC   0(2,R2),=Y(5)           LENGTH OF PARM > 5 ??
         BH    FIND_MEM                YEP .. CALLER HAS A MEM NAME
         WTO   'LNKLST - MISSING MEMBER NAME ON FIND COMMAND'
         LA    R15,12                  SET RETURN CODE
         B     EXIT                    AND EXIT
FIND_MEM CLC   0(2,R2),=Y(5+8)         LENGTH OF PARM <= (5+8) ??
         BNH   FIND_TOP                YEP .. GO MOVE MEMBER NAME
         WTO   'LNKLST - MEMBER NAME INVALID. LENGTH > 8'
         LA    R15,12                  SET RETURN CODE
         B     EXIT                    AND EXIT
FIND_TOP MVC   BLDLMEM(8),=CL8' '      PRIME MEMBER NAME
         LA    R3,5(R3)                R3 -> MEMBER NAME FROM PARM
         LH    R2,0(R2)                R2 = LENGTH OF PARM STR
         SH    R2,=Y(5+1)              REMOVE "FIND," AND 1 FOR EX
         EX    R2,MOV_MEM              MOVE MEMBER NAME TO BLDL
         MVC   FIND_MSG+49(8),BLDLMEM
FIND_MSG WTO   'LNKLST - SEARCHING LINK-LIST FOR MEMBER: ........'
         WTO   'LNKLST -'
         USING CVT,R10                 MAP THE CVT
         L     R10,CVTPTR              R10 ADDRESSES THE CVT
         USING LLT,R9                  MAP THE LLT
         L     R9,CVTLLTA              ADDRESS THE LLT
         DROP  R10                     DROP CVT MAP
         LA    R10,LLTDSN              ADDRESS FIRST DATASET
         L     R8,LLTCOUNT             GET NUMBER OF LINKLIST LIBRARYS
FIND_LUP MVC   DYN_DSNM(44),0(R10)     MOVE DSN TO DYNAMIC ALLOC PRM
         MVC   FIND_WTO+33(44),0(R10)  PLACE DSN IN FIND_WTO
         LA    R1,DYN_PTR              POINT TO DYNAMIC ALLOCATION PRM
         SVC   99                      ALLOCATE DATASET
         LTR   R15,R15                 SUCCESS ??
         BNZ   S99_ERR                 NOPE .. GO DISPLAY ERROR
FIND_BLD MVC   LIB_DCB(LEN_DCB),DCB_REF REFRESH THE DCB
         LA    R1,LIB_DCB              ADDRESS THE DCB
         USING IHADCB,R1               MAP THE DCB
         MVC   DCBDDNAM(8),DYN_DDNM    PLACE THE DDNAME
         DROP  R1                      DROP THE DCB
         OPEN  (LIB_DCB,INPUT)         OPEN THE LINKLIST LIBRARY
         BLDL  LIB_DCB,BLDLIST         ATTEMPT TO FIND THE MEMBER
         LTR   R15,R15                 SUCCESS ??
         BZ    FIND_YES                YEP ... GO SAY SO
         MVC   FIND_WTO+17(3),=CL3'NOT' NOPE .. GO SAY NO
         B     FIND_WTO                 GO DO IT
FIND_YES MVC   FIND_WTO+17(3),=CL3'   ' GO SAY YES
FIND_WTO WTO   'LNKLST - ... FOUND, DSN: ..............................-
               ..............'
         CLOSE LIB_DCB                 CLOSE THE FILE
         A     R10,=A(L'LLTENTRY)      POINT TO NEXT ENTRY
         BCT   R8,FIND_LUP             PLAY IT AGAIN
         B     EXIT                    WE ARE DONE ... EXIT
         DROP  R9                      UN-MAP LLT
* REQUEST LLA TO UPDATE THE SPECIFIED MEMBER
DO_UPD   CLC   0(2,R2),=Y(7)           LENGTH OF PARM > 5 ??
         BH    UPD_MEM                 YEP .. CALLER HAS A MEM NAME
         WTO   'LNKLST - MISSING MEMBER NAME ON UPDATE COMMAND'
         LA    R15,12                  SET RETURN CODE
         B     EXIT                    AND EXIT
UPD_MEM  CLC   0(2,R2),=Y(7+8)         LENGTH OF PARM <= (7+8) ??
         BNH   UPD_TOP                 YEP .. GO MOVE MEMBER NAME
         WTO   'LNKLST - MEMBER NAME INVALID. LENGTH > 8'
         LA    R15,12                  SET RETURN CODE
         B     EXIT                    AND EXIT
UPD_TOP  MVC   BLDLMEM(8),=CL8' '      PRIME MEMBER NAME
         LA    R3,7(R3)                R3 -> MEMBER NAME FROM PARM
         LH    R2,0(R2)                R2 = LENGTH OF PARM STR
         SH    R2,=Y(7+1)              REMOVE "UPDATE," AND 1 FOR EX
         EX    R2,MOV_MEM              MOVE MEMBER NAME TO BLDL
         USING CVT,R10                 MAP THE CVT
         L     R10,CVTPTR              R10 ADDRESSES THE CVT
         USING LLT,R9                  MAP THE LLT
         L     R9,CVTLLTA              ADDRESS THE LLT
         DROP  R10                     DROP CVT MAP
         LA    R10,LLTDSN              ADDRESS FIRST DATASET
         L     R8,LLTCOUNT             GET NUMBER OF LINKLIST LIBRARIES
UPD_LUP  MVC   DYN_DSNM(44),0(R10)     MOVE DSN TO DYNAMIC ALLOC PRM
         LA    R1,DYN_PTR              POINT TO DYNAMIC ALLOCATION PRM
         SVC   99                      ALLOCATE DATASET
         LTR   R15,R15                 SUCCESS ??
         BNZ   S99_ERR                 YEP .. GO DO BLDL
         MVC   LIB_DCB(LEN_DCB),DCB_REF REFRESH THE DCB
         LA    R1,LIB_DCB              ADDRESS THE DCB
         USING IHADCB,R1               MAP THE DCB
         MVC   DCBDDNAM(8),DYN_DDNM    PLACE THE DDNAME
         MVC   LIB_DDNM(8),DYN_DDNM    SAVE DDNAME FOR LATER
         DROP  R1                      DROP THE DCB
         OPEN  (LIB_DCB,INPUT)         OPEN THE LINKLIST LIBRARY
         BLDL  LIB_DCB,BLDLIST         ATTEMPT TO FIND THE MEMBER
         LTR   R15,R15                 WAS BLDL SUCCESSFUL ??
         BZ    UPD_FIND                YEP .. EXIT LOOP
         CLOSE LIB_DCB                 CLOSE THE FILE
         A     R10,=A(L'LLTENTRY)      POINT TO NEXT ENTRY
         BCT   R8,UPD_LUP              PLAY IT AGAIN
         WTO   'LNKLST - THE REQUESTED MEMBER WAS NOT FOUND IN ANY'
         WTO   'LNKLST - LINKLIST DATASETS. UPDATE REQUEST REJECTED'
         LA    R15,16                  SET RETURN CODE
         B     EXIT                    EXIT
         DROP  R9                      UN-MAP LLT
* OK, THE MEMBER SPECIFIED WAS FOUND IN ONE OF THE LINKLIST LIBRARIES
* NOW WE NEED TO BUILD A CSVLLALK MEMBER THAT INCLUDES IT AS WELL AS
* ALL OF ITS ALIASES.
UPD_FIND MVC   UPD_WTO1+32(44),0(R10)   PLACE DSNAME IN WTO
UPD_WTO1 WTO   'LNKLST - UPDATING FROM: ...............................-
               .............'
* ALLOCATE AND OPEN THE LINKLIST LIBRARY AND SYS1.PARMLIB
* ---> SEE MVS UPDATE - ISSUE 56 - MAY 1991 FOR "READDIR" ROUTINE <---
*                      OPEN THE DIRECTORY
         CALL  READDIR,(OPEN,LIB_DDNM,DIRENT,RETCODE)
* ALLOCATE SYS1.PARMLIB
         MVC   DYN_DSNM(44),=CL44'SYS1.PARMLIB'
         LA    R1,DYN_PTR              ADDRESS DYN PARM
         SVC   99                      ALLOC SYS1.PARMLIB
         LTR   R15,R15                 SUCCESS ??
         BNZ   S99_ERR                 NOPE .. GOTO ERROR ROUTINE
         USING IHADCB,R7               MAP DCB
         LA    R7,PARMLIB              MAP THE OUTPUT DCB
         MVC   DCBDDNAM(8),DYN_DDNM    PLACE DDNAME IN DCB
* OPEN THE PARM LIB DATASET
         OPEN  (PARMLIB,OUTPUT)        REOPEN FOR OUTPUT
         MVC   DCBBLKSI(2),=H'80'      FORCE 80 BYTE BLKSIZE
         MVI   ONCE,0                  RESET LOOP FLAG
* SEARCH FOR MEMBER AND ALL OF ITS ALIASES. DISPLAY EACH.
UPD_ALI  CALL  READDIR,(READ,LIB_DDNM,DIRENT,RETCODE)
         ICM   R15,B'1111',RETCODE     GET THE RETURN CODE
         BNZ   UPD_DOIT                NONZERO ... MUST BE DONE
         CLC   BLDLTTR(3),ENT_TTR      THIS ONE OF THE ONES I WANT??
         BNE   UPD_ALI                 NOPE .. KEEP LOOKING
         MVC   UPD_WTO2+27(8),NAME     PLACE MEMBER NAME IN WTO
         TM    IND,ALIAS               IS THIS AN ALIAS ??
         BO    IS_ALI                  YEP .. GO PLACE "- ALIAS" IN WTO
         MVC   UPD_WTO2+36(7),=CL7' '  NOPE .. CLEAN UP
         B     UPD_WTO2                GO ISSUE THE WTO
IS_ALI   MVC   UPD_WTO2+36(7),=CL7'- ALIAS'
UPD_WTO2 WTO   'LNKLST -    MEMBER ........ .......'
* CREATE A LINE IN THE PARMLIB MEMBER FOR EACH MEMBER/ALIAS FOUND
         MVC   PARMLINE+31(8),NAME     PLACE MEMBER NAME IN PARM LINE
         MVI   PARMLINE+31+8,C' '      CLEAR POSSIBLE ")"
         LA    R1,PARMLINE+31+8        POINT TO PLACE BEYOND MEMBER
UPD_CAP  CLI   0(R1),C' '              SPACE ??
         BNE   UPD_PARN                NOPE .. GO PLACE ")"
         BCT   R1,UPD_CAP              DECREMENT AND TRY AGAIN
UPD_PARN MVI   1(R1),C')'              CAP THE MEMBER NAME
         WRITE DECBW,SF,PARMLIB,PARMLINE   WRITE THE LINE TO THE FILE
         CHECK DECBW                   WAIT TILL IT FINISHES
         CLI   ONCE,1                  HAVE WE BEEN HERE BEFORE ??
         BE    UPD_ALI                 YEP .. GO SEARCH FOR MORE ALIA
         MVI   ONCE,1                  NOPE .. SET FLAG
         NOTE  PARMLIB                 TAKE NOTE OF TTR
         STCM  R1,B'1110',PARM_TTR     STORE TTR FOR LATER STOW
         B     UPD_ALI                 GO BACK AND SEARCH SOME MORE
UPD_DOIT STOW  PARMLIB,CSVLLALK,R      REPLACE MEMBER
         CLOSE (PARMLIB,,LIB_DCB)      CLOSE PARMLIB AND LIBRARY
         CALL  READDIR,(CLOSE,DYN_DDNM,DIRENT,RETCODE)
         DROP  R7                      DE-MAP DCB
* CSVLLALK HAS BEEN CREATED IN SYS1.PARMLIB AND ALL FILES ARE CLOSED.
* NOW ISSUE THE "F LLA,UPDATE=LK" COMMAND, IF WE CAN.
         TESTAUTH FCTN=1               ARE WE AUTHORIZED ??
         LTR   R15,R15                 WELL??? ARE WE ???
         BZ    SUPERMAN                YEP .. GO ISSUE VS COMMAND
         WTO  'LNKLST - THIS PROGRAM IS NOT APF AUTHORIZED. BECAUSE OF'
         WTO  'LNKLST - THAT AUTOMATIC UPDATE OF LLA WILL NOT BE DONE.'
         WTO  'LNKLST - IF YOU WISH YOU MAY ISSUE THE COMMAND:'
         WTO  'LNKLST -'
         WTO  'LNKLST -     F LLA,UPDATE=LK'
         WTO  'LNKLST -'
         WTO  'LNKLST - AT A CONSOLE TO PERFORM THE REQUESTED UPDATE '
         WTO  'LNKLST - MANUALLY.'
         B     EXIT
SUPERMAN MODESET KEY=ZERO,MODE=SUP     PUT ON BOOTS, TIGHTS AND CAPE
         SR    R0,R0                   R0 MUST BE ZERO
         MGCR  CMDHEAD                 DO THE VS COMMAND
         MODESET KEY=NZERO,MODE=PROB   BACK TO CLARK KENT
         B     EXIT                    EXIT
* COMMON DYNAMIC ALLOCATION ERROR ROUTINE
S99_ERR  CVH   R15,S99_ERR1+33,8       CONVERT RC TO EBCDIC
         LH    R15,DYN_ERR             GET DYN ERROR CODE
         CVH   R15,S99_ERR2+33,4       CONVERT ERR TO EBCDIC
         LH    R15,DYN_INF             GET DYN INFO CODE
         CVH   R15,S99_ERR3+33,4       CONVERT INFO CODE TO EBCDIC
         WTO   'LNKLST - DYNAMIC ALLOCATION FAILED:'
S99_ERR1 WTO   'LNKLST -    RETURN CODE: ........'
S99_ERR2 WTO   'LNKLST -    ERROR  CODE: ....'
S99_ERR3 WTO   'LNKLST -    INFO   CODE: ....'
         LA    R15,16                  SET RETURN CODE
         B     EXIT                    EXIT
EXIT     STDEXIT RC=(15)               EXIT WITH RETURN CODE
         LTORG
* EXECUTED INSTRUCTIONS
MOV_MEM  MVC   BLDLMEM(*-*),0(R3)     MOVE MEMBER NAME TO BLDL
PARMLINE DC    CL80'   LIBRARIES(-LNKLST-) MEMBERS(' <- +31
LIB_DDNM DC    CL8' '
CSVLLALK DC    CL6'CSVLLA'             PARMLIB MEMBER NAME
         DC    CL2'LK'                 PARMLIB MEMBER SUFFIX
PARM_TTR DC    XL3'000000'             TTR OF MEMBER
         DC    XL1'00'
ONCE     DC    XL1'00'                 WE BEEN HERE BEFORE ??? FLAG
OPEN     DC    CL1'O'                  READDIR PARM
CLOSE    DC    CL1'C'                  READDIR PARM
READ     DC    CL1'R'                  READDIR PARM
PDSDDN   DC    CL8'PDS'                READDIR PARM
RETCODE  DC    F'0'                    READDIR PARM
         DS   0D                       ALIGNMENT
CMDHEAD  DC    AL1(0)                  FLAG1 ZERO ... NO TOKEN
CMDLEN   DC    AL1(CMD_LEN)            CMD LENGTH
CMDTOK   DC    AL2(0)                  ZERO .... NO TOKEN
CMDSTR   DC    C'F LLA,UPDATE=LK'      REFRESH THE LLA
CMD_LEN  EQU   *-CMDHEAD
BLDLIST  DS   0F                       BLDL PARM
BLDLCNT  DC    H'1'                    NUMBER OF MEMBERS IN LIST
BLDLEN   DC    H'76'                   LENGTH OF THIS LIST
BLDLMEM  DC    CL8' '                  MEMBER NAME
BLDLTTR  DC    AL3(0)                  TTR OF MEMBER
BLDLCAT  DC    AL1(0)                  CONCATENATION NUMBER
BLDLLOC  DC    AL1(0)                  LOCATION CODE
BLDLTYPE DC    AL1(0)                  FLAGS AND USER DATA LENGTH
BLDLUSER DC    CL62' '                 USER DATA PORTION
DIRENT   DS   0D                       MAP OF A DIRECTORY ENTRY
NAME     DS    CL8                     MEMBER NAME
ENT_TTR  DS    CL3                     TTR OF MEMBER
IND      DS    XL1                     FLAGS DEFINED BELOW
ALIAS    EQU   X'80'                   HIGH BIT = THIS IS AN ALIAS
*        ALIAS      BIT(1)
*        NUM_PTRS   BIT(2)
*        USR_DATA   BIT(5)
USERDATA DS    CL62                    USER DATA IN THE ENTRY
PARMLIB  DCB   DDNAME=X,DSORG=PO,MACRF=W,LRECL=80,RECFM=FB
DCB_REF  DCB   DDNAME=X,DSORG=PO,MACRF=R
LIB_DCB  DCB   DDNAME=X,DSORG=PO,MACRF=R
LEN_DCB  EQU   *-LIB_DCB
DYN_PTR  DC    A(X'80000000'+DYN_REQ)  POINTER TO REQUEST BLOCK
DYN_REQ  DC    AL1(20)                 LENGTH OF BLOCK
         DC    AL1(S99VRBAL)           ALLOCATE
         DC    AL2(0)                  FLAGS-1
DYN_ERR  DC    AL2(0)                  ERROR RETURN CODE
DYN_INF  DC    AL2(0)                  ERROR INFORMATION CODE
         DC    A(DYN_TEXT)             POINTER TO TEXT POINTERS
         DC    A(0)                    ADDRESS OF EXTENTION BLOCK
         DC    A(0)                    FLAGS-2
DYN_TEXT DC    A(DYN_DDN)              POINTER TO DDNNAM TEXT UINT
         DC    A(DYN_DSN)              POINTER TO DSNAME TEXT UINT
         DC    A(DYN_CLS)              POINTER TO DSNAME TEXT UINT
         DC    A(X'80000000'+DYN_DISP) POINTER TO DISP   TEXT UNIT
DYN_DDN  DC    AL2(DALRTDDN)           RETRIEVE THE DDNAME
         DC    AL2(1)                  THERE IS ONLY ONE DDNAME
DYN_DDLN DC    AL2(8)                  THE LENGTH OF THE DDNAME
DYN_DDNM DC    CL8' '                  THE DDNAME ITSELF
DYN_DSN  DC    AL2(DALDSNAM)           DSNAME TO ALLOCATE
         DC    AL2(1)                  THERE IS ONLY ONE DSNAME
DYN_DSLN DC    AL2(44)                 THE LENGTH OF THE DSNAME
DYN_DSNM DC    CL44' '                 THE DSNAME ITSELF
DYN_CLS  DC    AL2(DALCLOSE)           FREE DDNAME UPON CLOSE
         DC    AL2(0)                  NO PARMS
DYN_DISP DC    AL2(DALSTATS)           DISPOSITION OF DATASET
         DC    AL2(1)                  ONE ENTRY IN LIST
         DC    AL2(1)                  LENGTH OF DISP PARM
         DC    AL1(8)                  DISP = SHR
* DSECTS
         IEFZB4D0
         IEFZB4D2
         CVT    DSECT=YES
         DCBD   DSORG=PS,DEVD=DA
LLT      DSECT
LLTHEAD  DS    0CL8                    LLT HEADER
LLTID    DC     CL4'LLT'               LLT LITTERAL
LLTCOUNT DS     F                      NUMBER OF LINKLIST ENTRIES
LLTENTRY DS    0CL45  (LLTCOUNT TIMES) LINKLIST ENTRY
LLTDSLTH DS     XL1                    DSNAME LENGTH
LLTDSN   DS     CL44                   LINKLIST DATASET NAME
LLTAPFIN EQU    X'80'                  DATASET APF AUTHORIZED
         END
//LKED.SYSLMOD DD DSN=apf.authorized.lib(LNKLST),DISP=SHR,UNIT=
//LKED.SYSIN   DD *
 INCLUDE MODLIB(READDIR)
 SETCODE AC(1)
//LKED.MODLIB  DD DSN=library.that.contains.readdir,DISP=SHR


The JCL procedure to execute LNKLST

//LNKLST PROC
//LNKLST EXEC PGM=LNKLST
//STEPLIB DD DSN=apf.authorized.lib,DISP=SHR
//*
//* Steplib is only required if LNKLST is not in the LINKLIST


Paul Lemmons
Systems Programmer
Tucson Medical Center (USA)                            c Xephon 1991

