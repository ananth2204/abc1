Freespace analysis (continued)

This month we continue our look at freespace analysis with the
publication of the remaining components of the system.


SUBTASK - THIS TASK CREATES THE DASD LIST

FRSP1    CSECT
         SAVE  (14,12)
         BALR  R12,0
         USING *,R12
         LR    R11,R13                 SAVE ADDR OF OLD SAVEAREA IN R11
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R11,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R11)              SAVE ADDR NEW IN OLD SAVEAREA
STARTPRG EQU   *
         LR    R5,R1
         L     R2,0(R5)                LOAD ADDRESS OF GETMAIN STORAGE
         ST    R2,DATAADDR             SAVE ADDRESS
         ST    R2,DATABASE             SAVE BASE ADDRESS
         L     R2,4(R5)                LOAD ADDRESS OF FLAG BYTE
         ST    R2,ECB1ADDR             STORE IN FULLWORD SAVE AREA
*   SCAN FOR ONLINE DASD          *
UCBNEXT  EQU   *
         LA    R15,16                  LOAD CVT ADDRESS
         L     R15,0(R15)              ADDRESSABILITY TO CVT
         L     R15,1076(R15)           POINT TO UCB SCAN ROUTINE
         LA    R1,UCBPARM              LOAD PARM ADDRESS
         BALR  R14,R15                 LINK TO SCAN ROUTINE
         LTR   R15,R15                 END OF UCBS ?
         BNZ   DASDEND
LOADUCB  L     UCBREG,UCBADDR          LOAD UCB ADDRESS
SETSCREN MVC   PRADDR(3),13(UCBREG)    MOVE EBCDIC ADDRESS TO PRINTLINE
         MVC   PRVOL(6),28(UCBREG)     MOVE VOLSER TO PRINT LINE
         LA    DEVREG,DEVTAB           START OF TABLE
         LA    R4,DEVEND               END OF TABLE
DEVLOOP  EQU   *
         CLC   16(4,UCBREG),8(DEVREG)  TEST DEVICE TYPE
         BE    DEVHIT                  YES, EXIT LOOP
         LA    DEVREG,DEVLEN(DEVREG)   NEXT ENTRY
         CR    DEVREG,R4               TEST FOR END OF TABLE
         BL    DEVLOOP                 IF NOT END, TRY NEXT DEVTYPE
         MVC   EXT#(62),=CL62'NO MATCHING DEVTYPE IN TABLE'
         B     PUTLINE
DEVHIT   EQU   *
         SR    R4,R4                   CLEAR REG
         MVC   DYNUNIT,13(UCBREG)      PUT UNIT ADDR IN SVC99 PARMLIST
         MVC   DYNDDN+2(6),28(UCBREG)  APPEND VOLSER TO 'DD' FOR DDNAME
         MVC   DCBDASD+40(8),DYNDDN    MOVE DDNAME TO JFCBAREA
         MVC   DYNVOL,28(UCBREG)       MOVE VOLSER TO SVC99 PARMLIST
         L     R1,DYNPARM              ISSUE DYNALLOC FOR F4 DSCB
         SVC   99
         LTR   R15,R15                 TEST RETURN CODE
         BZ    OPENDASD                OK..GO TO OPEN ROUTINE
*        MVC   EXT#(62),=CL62'SVC 99 ALLOCATION FAILURE'
*        B     PUTLINE                 NO..SEND ERROR MESSAGE
         B     UCBNEXT                 NO..SEND ERROR MESSAGE
*   OPEN VTOC DATASET
OPENDASD EQU   *
         RDJFCB DCBDASD                READ IN JFCB
         MVI   WORKAREA,X'04'          SET DSNAME TO X'04'S
         MVC   WORKAREA+1(43),WORKAREA
*                                      FORMAT4 DSCB CAN BE READ WITH
*                                      44 BYTES OF X'04'S. AS
*                                      ITS DSNAME.
         OPEN  (DCBDASD,(INPUT)),TYPE=J
*   TEST FOR INDEXED OR NON INDEXED VTOC
         CVAFTST UCB=(UCBREG)
         CH    R15,=H'4'               RC=4 INDEXED VTOC SUPPORTED
         BE    NONINDX                 BUT VTOC NOT INDEXED.
         CH    R15,=H'8'               RC=8 INDEXED VTOC SUPPORTED
         BE    INDX                    VOL HAS INDEXED VTOC.
         ABEND 4,DUMP
*   GET FREE SPACE DATA FROM INDEXED VTOC USING CVAF
INDX     EQU   *
         MVC   PRINDX(3),=CL3'(I)'     INDICATE INDEXED
         XC    XTENTS,XTENTS           SET START ADDR AS TRK 0
         SR    R4,R4                   TOTAL CYLINDERS
         SR    R5,R5                   TOTAL TRACKS
         SR    R6,R6                   ZERO LARGEST EXTENT
         SR    R7,R7                   EXTENT COUNT
CVAFDSM  EQU   *
         L     R8,DCBDASD+44           LOAD DEB ADDRESS
         CVAFDSM ACCESS=MAPDATA,   *   GET FREE SPACE
               MAP=VOLUME,         *   EXTENT LIST USING
               COUNT=NO,           *   CVAFDSM MACRO
               EXTENTS=XTENTS#,    *
               MAPRCDS=NO,         *
               IOAREA=NOKEEP,      *
               DEB=(R8)
         LA    R9,XTENTS               POINT TO EXTENT LIST
         SR    R10,10                  CLEAR LOOP COUNTER
         SR    R8,R8                   CLEAR WORKREG
         IC    R10,XTENTS#             GET MAXIMUM NO OF ENTRIES
INDXLOOP EQU   *
         CLC   0(5,R9),=XL5'00000000'  END OF ENTRIES ?
         BE    VOLEND                  YES, GO ADD UP TOTALS AND PRINT
         MVC   DWD1(2),2(R9)           MOVE CYLS TO HWD BNDRY
         AH    R4,DWD1                 ADD TO TOTAL
         CH    R6,DWD1                 TEST FOR LARGEST XTENT
         BH    *+RX+RX
         LH    R6,DWD1                 KEEP LARGEST XTENT
         IC    R8,4(R9)                GET NO. OF TRACKS
         AR    R5,R8                   ADD TO TOTAL
         LA    R7,1(R7)                COUNT EXTENTS
         LA    R9,5(R9)                POINT TO NEXT EXTENT
         BCT   R10,INDXLOOP            DO FOR EACH EXTENT IN LIST
         SH    R9,=H'5'                GO BACK TO PREVIOUS ENTRY
         MVC   XTENTS(2),0(R9)         SET LAST EXTENT AS STARTING TRK
         B     CVAFDSM                 GO AGAIN
*   GET FREE SPACE DATA FROM NON-INDEXED VTOC
NONINDX  EQU   *
         SR    R4,R4                   TOTAL CYLINDERS
         SR    R5,R5                   TOTAL TRACKS
         SR    R6,R6                   ZERO LARGEST EXTENT
         SR    R7,R7                   EXTENT COUNT
         LA    R8,2              1ST F5 DSCB IS ALWAYS 2ND DSCB IN VTOC
READ     EQU   *
         READ  DECB1,SF,DCBDASD,DISKWORK,'S'
         CHECK DECB1
         BCT   R8,READ                 READ UNTIL 1ST F5 DSCB
F5PROC   EQU   *
         LA    R9,DISKWORK             ADDRESS F5 DSCB
         MVC   44(95,R9),45(R9)        GET RID OF X'05' IN MIDDLE
         LA    R10,26                  26 EXTENTS PER F5 DSCB
         MVC   F5CCHHR,134(R9)         MOVE NEXT F5 DSCB ADDRESS
         LA    R11,4(R9)               POINT TO 1ST FREE SPACE
F5LOOP   EQU   *
         CLC   0(5,R11),=XL5'0000000000' ANY MORE FREE SPACE ?
         BE    NMORE
         LA    R7,1(R7)                COUNT EXTENT NOS
         SR    R8,R8
         IC    R8,4(R11)               NO OF UNUSED TRACKS
         AR    R5,R8                   ADD TO RUNNING TOTAL
         SR    R8,R8
         LH    R8,2(R11)               NO OF UNUSED CYLS
         CR    R8,R6                   COMPARE WITH LARGEST EXTENT
         BL    *+RX+RR
         LR    R6,R8                   IF LARGER STORE IN R4
         AR    R4,R8                   ADD TO RUNNING TOTAL
         LA    R11,5(R11)              FOR NEXT FREE SPACE EXTENT
         BCT   R10,F5LOOP
NMORE    EQU   *
         CLC   134(5,R9),=XL5'0000000000'   ANOTHER F5 DSCB ?
         BE    VOLEND
         OBTAIN CYLADDR                READ NEXT F5 DSCB
         LTR   R15,R15                 TEST RETURN CODE
         BZ    F5PROC                  OK, GO GET SPACE INFO
         ABEND 5,DUMP
*   ALL FREE SPACE ON VOLUME HAS BEEN COUNTED.  CLOSE DCB,
*   ADD TO TOTALS FOR DEVICE TYPE, EDIT & DISPLAY FREE
*   SPACE DATA.
VOLEND   EQU   *
         CLOSE DCBDASD
         LM    R8,R9,0(DEVREG)        LOAD TRK & CYL TOTALS FOR DEVTYPE
         AR    R8,R4                   ADD TO TOTAL CYL
         AR    R9,R5                   ADD TO TOTAL TRACKS
         STM   R8,R9,0(DEVREG)         STORE TOTALS BACK INTO TABLE
         CVD   R4,DWD1                 GET FREE CYLS IN PACKED DEC.
         LA    R8,TCYL                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         CVD   R5,DWD1                 GET TRACKS IN PACKED DEC.
         LA    R8,TTRK                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         CVD   R6,DWD1                 GET LARGEST EXTENT IN PACKED DEC
         LA    R8,LCYL                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         CVD   R7,DWD1                 NO. EXTENTS IN PACKED DEC.
         LA    R8,EXT#                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         MVC   PRTYPE(6),12(DEVREG)    MOVE IN DEVICE TYPE
*        MVC   PRTYPE(6),DYNUNIT       MOVE IN DEVICE TYPE
PUTLINE  EQU   *
         L     R5,DATAADDR             LOAD ADDRESS OF LIST
         MVI   74(R5),X'00'            PUT IN END MARKER
         MVC   0(74,R5),PRLINE         SAVE PRINT LINE IN LIST
         LA    R5,74(R5)               POINT TO NEXT SPOT
         ST    R5,DATAADDR             SAVE THE ADDRESS
         MVI   PRLINE,C' '             CLEAR FOR NEXT LINE
         MVC   PRLINE+1(L'PRLINE-1),PRLINE
         L     R4,MSGCOUNT             HAVE WE
         LA    R4,1(R4)                  BUILT THE
         CH    R4,=H'20'                   PAGE OF DATA ?
         BNE   DONTPOST                 NO THEN SKIP THIS
         L     R2,ECB1ADDR             LOAD ADDRESS OF ECB
         POST  (R2)                    POST TO START MAIN TASK
DONTPOST ST    R4,MSGCOUNT             SAVE MSG COUNT
         B     UCBNEXT                 GO GET NEXT
*   EDIT ROUTINE.
EDIT     EQU   *
         MVC   0(16,R8),MASK           MOVE IN MASK
         ED    0(16,R8),DWD1           CONVERT TO EBCDIC
         BR    R14                     RETURN TO CALLER
*   ALL DASD VOLUMES HAVE BEEN READ.
*   EDIT & DISPLAY DATA, RETURN
DASDEND  EQU   *
*        LH    R4,PARMLEN              LOAD PARM LENGTH INTO R4.
*        CH    R4,=H'0'                PARMLENGTH = 0 ?
*        BNE   RETURN
         LA    DEVREG,DEVTAB           LOAD FOR TABLE PROCESSING
         LA    R4,DEVEND
ENDLOOP  EQU   *
         MVC   PRVOL(6),=CL6'TOTAL'
         MVC   PRTYPE(7),12(DEVREG)    MOVE DEV TYPE
         LM    R5,R6,0(DEVREG)         LOAD TOTALS
         CVD   R5,DWD1                 GET FREE CYLS IN PACKED DECIMAL
         LA    R8,TCYL                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         CVD   R6,DWD1                 GET TRACKS IN PD
         LA    R8,TTRK                 LOAD POINTER
         BAL   R14,EDIT                GO TO EDIT ROUTINE
         MVI   PRLINE,C' '             CLEAR FOR NEXT LINE
         MVC   PRLINE+1(L'PRLINE-1),PRLINE
         LA    DEVREG,DEVLEN(DEVREG)   NEXT ENTRY
         CR    DEVREG,R4               TEST FOR END OF TABLE
         BL    ENDLOOP                 NO , GO AGAIN
*        B     RETURN
TERM0000 EQU   *
RETURN   L     R2,ECB1ADDR             POST IN CASE
         POST  (R2)                     LESS THAN 1 PAGE
         L     R13,4(R13)              LOAD ADDRESS OF CALLER SA
         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN
SAVEAREA DS    9D                      SAVE AREA
*   DEVICE TABLE - ONE ENTRY FOR EACH DEVICE IN SYSTEM
*                  1 FWD EACH FOR CYL & TRACK TOTALS
*                  UCB DEVICE CONSTANT
*                  SVC 99 UNIT TYPE CONSTANT
*                  L' DEVICE CONSTANT
DEVTAB   DC    2F'0',XL4'3010200E',CL7'3380',AL1(4)
DEVLEN   EQU   *-DEVTAB
         DC    2F'0',XL4'3050200D',CL7'3330-1',AL1(6)
         DC    2F'0',XL4'3050200B',CL7'3350',AL1(4)
*        DC    2F'0',XL4'3050200E',CL7'3380',AL1(4)
DEVEND   EQU   *
XTENTS#  DC    AL1(20)                 EXTENT LIST FOR CVAFDSM
XTENTS   DC    20XL5'00'
EX1      DS    0F
         DC    X'07'
         DC    AL3(WORKAREA)
WORKAREA DS    CL176
         DS    0F
DISKWORK DS    CL140
CYLADDR  CAMLST SEEK,F5CCHHR,DYNVOL,DISKWORK
F5CCHHR  DS    CL5
UCBPARM  DC    A(UCBWORK)              UCBSCAN PARAMETER LIST
         DC    A(UCBTYPE)
         DC    X'80'                   HIGH ORDER BIT MUST BE '1'
         DC    AL3(UCBADDR)            MEANING THE LAST IN PARM
UCBWORK  DC    XL100'00'               UCB SCAN WORKAREA
UCBTYPE  DC    X'20'                   ONLY SCAN FOR DASD
UCBADDR  DS    F                       UCB ADDRESS
UCBSCAN  DS    F                       EP OF UCB SCAN ROUTINE
DYNPARM  DC    A(DYNRBP)
DYNRBP   DS    0F                      REQUEST BLOCK POINTER
         DC    X'80'
         DC    AL3(DYNRB)
DYNRB    DS    0F                      REQUEST BLOCK
LENGTH   DC    AL1(20)                 1BYTE LENGTH MUST BE 20
VERBCOD  DC    X'01'                   1BYTE VERB CODE
FLAGS1   DC    XL2'00'                 2BYTES FLAGS1
ERRORCOD DC    XL2'0'                  2BYTES ERROR CODE
INFOCODE DC    XL2'0'                  2BYTES INFO CODE
         DC    A(DYNTXT1)              POINTER
         DC    F'0'                    RESERVED
         DC    F'0'                    FLAGS2
DYNTXT1  DS    0F                      TEXT UNIT POINTERS
         DC    X'00'
         DC    AL3(DYNTU1)
         DC    X'00'
         DC    AL3(DYNTU4)
         DC    X'00'
         DC    AL3(DYNTU5)
         DC    X'00'
         DC    AL3(DYNTU10)
         DC    X'00'
         DC    AL3(DYNTU15)
         DC    X'80'
         DC    AL3(DYNTU1C)
DYNTU1   DS    0F                      DDNAME TEXT UNIT
         DC    X'0001'                 KEY
         DC    X'0001'                 NUMBER
         DC    X'0008'                 LENGTH OF PARM.
DYNDDN   DC    C'DD'
         DS    CL6
DYNTU4   DS    0F
         DC    X'0004'                 DISP = SHR
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DYNTU5   DS    0F
         DC    X'0005'                 KEEP
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DYNTU10  DS    0F
         DC    X'0010'                 VOLSER TEXT UNIT
         DC    X'0001'
         DC    X'0006'
DYNVOL   DS    CL6
DYNTU15  DS    0F
         DC    X'0015'                 UNIT TEXT UNIT
         DC    X'0001'
DYNUNITL DC    X'0003'                 LENGTH OF PARM.
*DYNUNITL DS    H
DYNUNIT  DS    CL6
DYNTU1C  DS    0F
         DC    X'001C'                 FREE = CLOSE TEXT UNIT
         DC    X'0000'
DWD1     DS    D
MASK     DC    XL16'40202020202020202020202020202120'
MSGCOUNT DC    F'0'
DATAADDR DC    F'0'
DATABASE DC    F'0'
ECB1ADDR DC    F'0'
ECB2ADDR DC    F'0'
BLANKS   DC    CL74' '
BLANK    DC    C' '
BLANKL   EQU   *-BLANK
PRLINE   DC    CL74' '
PRLINEL  EQU   *-PRLINE
PRADDR   EQU   PRLINE
PRVOL    EQU   PRLINE+6
PRINDX   EQU   PRLINE+12
PRTYPE   EQU   PRLINE+17
EXT#     EQU   PRLINE+15
LTRK     EQU   PRLINE+28
LCYL     EQU   PRLINE+32
TTRK     EQU   PRLINE+48
TCYL     EQU   PRLINE+56
         LTORG
DCBDASD  DCB   MACRF=R,
               RECFM=F,
               DSORG=PS,
               EODAD=VOLEND,
               KEYLEN=44,
               EXLST=EX1,
               BLKSIZE=96
*     COMMAND    PROCESSOR    PARAMETER LIST
PPL      IKJPPL
*   P A R S E     P A R A M E T E R      L I S T
CPPL     IKJCPPL
UCBREG   EQU   2                       UCB POINTER
DEVREG   EQU   3                       DEVICE TABLE ENTRY POINTER
RR       EQU   2
RX       EQU   4
*   C V T     D S E C T.
         CVT DSECT=YES,LIST=YES
         END


FRSPSORT - CALLED FROM MAIN PROGRAM TO CALL SORT

**  This program sets up a call to dfsort using exit 15 and 35   **
**  to pass the records to sort and receive the output records   **
FRSPSORT CSECT
         SAVE  (14,12)                 SAVE REGISTERS
         BALR  R12,0                   LOAD R12 WITH NEXT ADDRESS
         USING *,R12                   ADDRESS WITH R12 FROM HERE
         LR    R10,R13                 SAVE ADDR OF OLD SAVEAREA IN R10
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R10,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R10)              SAVE ADDR NEW IN OLD SAVEAREA
         L     R2,0(R1)                LOAD ADDRESS OF SORT PARM
         MVC   CTLPARM,0(R2)           MOVE SORT PARM IN
         L     R1,4(R1)                LOAD ADDRESS OF DATA LIST
         ST    R1,EXITDATA             SAVE IT FOR EXIT15
         ST    R1,EXITDAT1             SAVE IF FOR EXIT35
         ST    R12,ACONST              SAVE BASE ADDRESS FOR EXITS
         LA    R1,PARMLST              LOAD PARAMETER LIST
         LINK  EP=SORT                 CALL DFSORT
RETURN   RETURN (14,12),RC=(15)        RETURN TO CALLER
SAVEAREA DC    9D'0'          SAVE AREA
PARMLST  DC    A(CNTLSTMT)    POINTS TO CONTROL STATEMENTS
         DC    A(EXIT15)      ADDRESS OF USER EXIT E15
         DC    A(EXIT35)      ADDRESS OF USER EXIT E35
ACONST   DC    A(0)           USER EXIT ADDRESS CONSTANT
         DC    A(0)           ADDR OF ALTSEQ XLATE TABLE
         DC    A(0)           ADDR OF STAE WORK AREA ADDR
         DC    A(0)           ADDRESS OF USER EXIT E18
         DC    A(0)           ADDRESS OF USER EXIT E39
         DC    F'-1'          DENOTES END OF 31-BIT PARM LST
CNTLSTMT DS    0H             RSRV FOR LNGTH OF CNTL STMTS
         DC    AL2(CTLEND-CTLSTART)
CTLSTART DC    C' SORT FIELDS=('
CTLPARM  DC    C'7,6,CH,A)  '
         DC    C' RECORD TYPE=F,LENGTH=74  '
CTLEND   EQU   *
EXIT15   DS    0F
         USING *,R15                   ADDRESS USING R15
         STM   2,14,EXITSV15+4         SAVE REGISTERS
         DROP  R15
         LA    R1,4(R1)                LOAD ADDRESS OF ADDR CONSTANT
         L     R12,0(R1)               RESTORE ADDRESSING
         L     R5,EXITDATA             STORE DATA ADDRESS
         ST    R5,EXITSV15             STORE DATA ADDRESS
         CLI   0(R5),X'00'             IS THIS LAST RECORD ?
         BNE   EXIT151                  NO THEN PASS IT TO SORT
         LM    1,14,EXITSV15           RESTORE REGISTERS
         LA    R15,8                   TELL SORT DONT COME BACK
         BR    R14                     RETURN TO SORT
EXIT151  LA    R5,74(R5)               POINT TO NEXT RECORD
         ST    R5,EXITDATA             SAVE ADDRESS OF NEXT RECORD
         LM    1,14,EXITSV15           RESTORE REGISTERS
         LA    R15,12                  TELL SORT TO INSERT RECORD
         BR    R14                     RETURN TO SORT
EXITSV15 DC   15F'0'
EXITDATA DC    A(0)
EXIT35   DS    0F
         USING *,R15                   USE R15 FOR ADDRESSING
         STM   14,12,EXITSV35          SAVE REGISTERS
         DROP  R15
         LR    R7,R1                   LOAD R7 WITH ADDR CONST
         LA    R1,8(R1)                ADDRESS OF ADDR CONST
         L     R12,0(R1)               RESET ADDRESSING
         L     R5,0(R7)                ADDRESS OF OUTPUT RECORD
         L     R6,EXITDAT1             LOAD ADDRESS OF DATA
         LTR   R5,R5                   IS THIS LAST OUTPUT RECORD ?
         BZ    EXIT350                  YES THEN GO END
         MVC   0(74,R6),0(R5)          SAVE THE RECORD
         LA    R6,74(R6)               POINT TO NEXT RECORD
         ST    R6,EXITDAT1             SAVE ADDRESS OF NEXT LINE
         LM    14,12,EXITSV35          RESTORE RECORDS
         LA    R15,4                   SET RC 5 DELETE RECORD
         BR    R14                     RETURN TO SORT
EXIT350  LM    14,12,EXITSV35          RESTORE RECORDS
         LA    R15,8                   SET RC 8 DONT COME BACK
         BR    R14                     RETURN TO SORT
EXITSV35 DC   15F'0'                   SAVE AREA
EXITDAT1 DC    A(0)                    ADDRESS OF STORAGE
*              CREATE PARAMETER LIST
         END


TESTEAB - TESTS TSO FOR EAB SUPPORT

**  THIS PROGRAM ISSUES A WSF QUERY TO THE TERMINAL TO WORK OUT IF **
**  THE TERMINAL SUPPORTS EAB GRAPHIC ESCAPE AND CHARACTER ATTR    **
**  IF IT DOES A RETURN CODE OF 0 IS RETURNED OTHERWISE 12 RETURNED**
TESTEAB  CSECT
         SAVE  (14,12)                 SAVE REGISTERS
         BALR  R12,0                   LOAD R12 WITH NEXT ADDRESS
         USING *,R12                   ADDRESS WITH R12 FROM HERE
         LR    R11,R13                 SAVE ADDR OF OLD SAVEAREA IN R11
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R11,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R11)              SAVE ADDR NEW IN OLD SAVEAREA
         TPG MSG,MSGL,NOEDIT,WAIT      ISSUE WSF QUERY
         TGET BUFF,2000,ASIS,WAIT      GET BACK REPLY
         LTR  R15,R15                  DID IT WORK ?
         BNZ  ERRORRET                  NO THEN RETURN 12
         LTR  R1,R1                    IS LENGTH NON ZERO
         LR   R3,R1                    LOAD LENGTH INTO R3
         LA   R4,0                     ZERO R4
         LA   R2,BUFF                  POINT TO BUFF WITH R2
         CLI  0(R2),X'88'              IS RESPONSE FROM QUERY ?
         BNE    ERRORRET                NO THEN RETURN 12
         LA     R2,1(R2)               POINT PAST X'88'
         LA     R4,1(R4)               ADD 1 TO COUNT
LOOP     CLR    R4,R3                  CHECK LENGTH FROM TGET
         BE     ERRORRET               YES END OF QUERY REPLIES
         CLI    3(R2),X'88'            CHECK FOR REPLY MODES
         BE     CHKMODE                YES THEN CHECK ITS RIGHT
         XR     R5,R5                  ZERO R5
         ICM    R5,2,0(R2)             LOAD FIRST LENGTH BYTE
         ICM    R5,1,1(R2)             LOAD SECOND LENGTH BYTE
         LA     R2,0(R5,R2)            POINT TO NEXT QUERY REPLY
         LA     R4,0(R5,R4)            INCREMENT R4
         B      LOOP                   GO CHECK NEXT ONE
*  CHECK FOR QUERY REPLY REPLY MODE 0 1 AND 2  *
CHKMODE  CLC    0(7,R2),=X'00078188000102'
         BNE    ERRORRET                NO THEN RETURN 12
RETURN   RETURN (14,12),RC=0            RETURN AND SET RETCODE
ERRORRET RETURN (14,12),RC=0            RETURN AND SET RETCODE
**  3270 DATASTREAM WSF QUERY REPLY           **
MSG      DC  X'F3'
         DC  X'0005'
         DC  X'01FF02'
MSGL     EQU *-MSG
*   BUFFER FOR REPLY FROM WSF QUERY
BUFF     DC   2000X'00'
         LTORG
         END


FRSP CLIST

This CLIST is needed to allocate SYSOUT for the sort
otherwise the sort will not work.

PROC 0
CONTROL NOMSG
FREE F(SYSOUT)
ALLOC F(SYSOUT) DUMMY
CALL 'SYS2.CMDLIB(FRSP)'
FREE F(SYSOUT)
END


Wayne MacDonald
MVS Systems Programmer
GIO Technical Services (Australia)                  c Xephon 1991

