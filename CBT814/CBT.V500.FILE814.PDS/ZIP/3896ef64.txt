SMF job/step termination exit

MVS provides an exit point in the system that gains control
from the terminator when a job or job step terminates normally
or abnormally.  The exit, IEFACTRT, is passed various SMF
records and can use the information to perform several tasks,
including:

1      Adding additional information to the SMF records.

2      Writing messages to SYSOUT to provide additional
      information about the job/step.

3      Extracting accounting information and job resource usage
      for charging purposes.

Once all the information has been retrieved from the SMF
record, the exit can write messages to SYSOUT, by calling the
IBM module IEFYS, to place messages in the JESYSMSG
dataset to provide more explicit information in each step's
output area. Figure 1 illustrates the writing of messages to
SYSOUT at step termination.


EXIT ROUTINE PROCESSING

When IEFACTRT gains control, the registers contain the
following information.

Register 0

Register 0 contains one of the following hexadecimal codes
indicating the reason why SMF has invoked the exit.

o      X'0C' - Indicates step termination.  The exit is passed type
      4 or type 34 SMF records.

o      X'10' - Indicates job termination.  The exit is passed type
      5 or type 35 SMF records.

o      X'14' - Indicates job or step termination.  The exit is
      passed type 30 SMF records.

o      X'18' - Indicates TSO session or accounting interval
      termination.  The exit is passed type 32 SMF records.

Register 1

Register 1 contains the address of the parameter list.  The
following is a list of offsets into the parameter list and the
pointers contained in them.

o      X'00' - Common Exit Parameter Area (CEPA)
o      X'04' - Job name
o      X'08' - Programmer name
o      X'0C' - Job CPU time/number account fields
o      X'10' - Job accounting information
o      X'14' - EXEC CPU time/number account fields
o      X'18' - EXEC accounting information
o      X'1C' - Cancel bit/job step
o      X'20' - Termination status
o      X'24' - Record Descriptor Word (RDW) of SMF record.

Register 13

Register 13 contains the address of the save area.

Register 14

Register 14 contains the return address.

Register 15

Register 15 contains the entry point address of IEFACTRT.

On exit, registers 0 and 2 to 14 must be restored to their
contents on entry.  A value of X'04' in register 1 indicates that
SMF is not to write the termination record to the SMF dataset
and a value of X'04' in register 15 indicates that the remaining
job steps are to be cancelled.


USING TYPE 30 RECORDS

This exit will investigate SMF type 30 records which contain
an amalgamation of record types 4, 5, 20, 34, 35, and 40.
Each type 30 record has a subtype field to identify which
information is contained within it.  The various subtypes are:

1      Job start
2      Interval record
3      Step termination
4      Step termination total
5      Job termination
6      System address space.

The type 30 record contains a 104-byte header and defining
section which points to the other variable sections within the
record.  By obtaining the offset within the defining section,
information can be retrieved from the relevant variable section.
When the exit encounters a subtype 4 record, it will collect all
the relevant information from the SMF type 30 record and
produce the job step summary box.

WRITING OUT NEWS INFORMATION

On finding a subtype 5 record, the exit will attempt to write out
the news information to the job log. For certain applications
(eg production jobs) it may not be desirable for this facility.
News can be suppressed by coding the following JCL statement
in the job:

      //BOCNEWS  DD  DUMMY

To prevent the MVS console and SYSLOG becoming full of
news (it is written by a WTO instruction), routing code 11
needs to be suppressed.

The news module itself is simply a non-executable module that
resides in LINKLIST and is loaded by the exit when needed. It
is made up of 50-character lines and can be updated by using
the functions of LLA. The following is an example of the
source code for such a module.

BOCNEWS  CSECT
         DC    A(TABBEGIN)
         DC    A(TABEND)
TABBEGIN EQU   *
         DC    CL50'**************************************************'
         DC    CL50'* B.O.C. LTD DATACENTRE SERVICES: NEWS           *'
         DC    CL50'*                                                *'
         DC    CL50'* THERE WILL BE NO MAINFRAME SERVICES ON SUNDAY  *'
         DC    CL50'* 23RD FEBRUARY BETWEEN 4PM AND 10PM.            *'
         DC    CL50'*                                                *'
         DC    CL50'**************************************************'
TABEND   EQU   *
         END


IEFACTRT SOURCE CODE

The following source code is supplied in SMP/E USERMOD
form as most sites will apply it as such. It has been tested on
MVS/ESA 3.1.3.

++ USERMOD(SMF0001).
++ VER(Z038) FMID(HBB3310) .
++ JCLIN .
//S01 EXEC PGM=HEWLH096,PARM='NCAL,LET,AC=1,AMODE=31,RMODE=ANY'
//SYSPRINT DD SYSOUT=A
//A0SB3    DD  DSN=SYS1.A0SB3,DISP=SHR
//SYSLMOD  DD  DSN=SYS1.LPALIB,DISP=SHR
//SYSLIN DD *
  INCLUDE SYSPUNCH(IEFACTRT)
  INCLUDE A0SB3(IEFTB724)
  ENTRY IEFACTRT
 NAME IEFACTRT(R)
/*
++ SRC(IEFACTRT) DISTLIB(ABOCSRC) .
IEFACTRT TITLE 'STEP TERMINATION EXIT ROUTINE'
***IEFACTRT GAINS CONTROL AT STEP AND JOB TERMINATION AND IS PASSED ***
*  THE FOLLOWING SMF RECORD TYPES:                                    *
*  TYPE 04 : STEP TERMINATION                                         *
*  TYPE 05 : JOB TERMINATION                                          *
*  TYPE 30 : COMMON ADDRESS SPACE WORK RECORD                         *
*  TYPE 32 : TSO USER WORK ACCOUNTING RECORD                          *
*  TYPE 34 : TS-STEP TERMINATION RECORD AT TSO LOGOFF                 *
*  TYPE 35 : LOGOFF RECORD                                            *
*  THIS EXIT IS CODED TO USE THE TYPE 30 RECORDS AND ASSOCIATED       *
*  SUBTYPES TO GET INFORMATION FOR THE STEP TERMINATION MESSAGES.     *
*  ON ENTRY REGISTER 0 CONTAINS AN INDICATOR TO WHICH RECORD TYPE     *
*  THE EXIT HAS BEEN PASSED. A VALUE OF 30 (X'1E') IN R0 INDICATES    *
*  A TYPE 30 SMF RECORD HAS BEEN PASSED TO THIS EXIT. THE RECORD      *
*  SUBTYPES AVAILABLE FOR TYPE 30 RECORDS ARE :                       *
*  SUBTYPE 01 : JOB START                                             *
*  SUBTYPE 02 : INTERVAL                                              *
*  SUBTYPE 03 : STEP TERMINATION                                      *
*  SUBTYPE 04 : STEP TOTAL                                            *
*  SUBTYPE 05 : JOB TERMINATION                                       *
*  SUBTYPE 06 : SYSTEM ADDRESS SPACE                                  *
*  THIS EXIT WILL ACT ON SUBTYPE 04 RECORDS WHICH CONTAIN STEP        *
*  TERMINATION SUMMARY INFORMATION.                                   *
*  ON ENTRY REGISTER 1 WILL CONTAIN THE ADDRESS OF THE CEPA (COMMON   *
*  EXIT PARAMETER AREA) OF WHICH OFFSET 36 (X'24') CONTAINS THE       *
*  ADDRESS OF THE SMF RECORD PASSED TO THE EXIT.                      *
*  THE EXIT WILL WRITE STEP INFORMATION MESSAGES TO THE JOB'S         *
*  SYSOUT DATASET IN THE FOLLOWING FORM :                             *
* ******************************************************************* *
* * B.O.C. LTD DATACENTRE SERVICES: STEP TERMINATION                * *
* *                                                                 * *
* * STEPNAME   PROGRAM  COMPLETION-CODE  TAPE-MOUNTS  CPU-TIME      * *
* *                                                                 * *
* * DDNAME  I/O-COUNT  UNIT-ADDRESS                                 * *
* ******************************************************************* *
*  REGISTER USAGE                                                     *
*           R0                  * SYSTEM
*           R1                  * -> PARAMETER LIST
*           R2                  * -> SMF RECORD BASE ADDRESS
*           R3                  * -> SMF RECORD AREA
*           R4                  * -> WORKAREA
*           R5                  * NOT USED
*           R6                  * WORK REGISTER
*           R7                  * WORK REGISTER
*           R8                  * LINKAGE REGISTER
*           R9                  * NOT USED
*           R10                 * WORK REGISTER
*           R11                 * BASE REGISTER
*           R12                 * -> PARAMETER FIELDS IN IEFYS
*           R13                 * -> SAVE AREA
*           R14                 * =  RETURN ADDRESS
***         R15                 * =  ENTRY POINT ADDRESS
IEFACTRT CSECT
         SAVE  (14,12),,*
         BALR  R11,0                  * ESTABLISH..
         USING *,R11                  * ..ADDRESSABILITY
         LR    R10,R0                 * SAVE REASON CODE
         LR    R3,R1                  * SAVE PARAMETER LIST ADDRESS
         USING PARMLIST,R3            * ADDRESS IT
         B     BRTABLE(R10)           * BRANCH TO CONTS. OF REG.0
BRTABLE  B     RETURN00               * REG0 = 0
         B     RETURN00               * REG0 = 4
         B     RETURN00               * REG0 = 8
         B     RETURN00               * REG0 = 12
         B     RETURN00               * JOB TERMINATION
         B     STEPTERM               * SMF TYPE 30
         B     RETURN00               * TYPE 32 RECORD
RETURN00 EQU   *                      * GO BACK RC=0
         RETURN (14,12),RC=0
*  STEP TERMINATION PROCESSING USING TYPE 30 RECORDS                  *
STEPTERM EQU   *
         L     R2,SMFRDW              * GET ADDR SMF RECORD TYPE 30
         USING SMFRCD30,R2            * ADDRESS IT
TYPE4    CLC   SMF30STP(2),=X'0004'   * ENSURE STEPTERM
         BE    STEP4                  * IF NOT SUBTYPE 04 THEN RETURN
TYPE5    CLC   SMF30STP(2),=X'0005'   * ENSURE JOBTERM
         BE    JOBTERM                *
         B     RETURN00               * IF NOT SUBTYPE 05 THEN RETURN
STEP4    LR    R3,R2                  * COPY R2
         A     R3,SMF30IOF            * GET ID SECTION
         USING SMF30ID,R3             * ADDRESS IT
         CLI   SMF30CLS,=X'40'        * IS IT TSO USER OR STC ?
         BE    RETURN00               * IF SO GET OUT
         GETMAIN R,LV=WORKEND         * GET STORAGE FOR WORKAREA
         LR    R4,R1                  * STORE ADDRESS
         ST    R13,4(R1)              * SAVE..
         ST    R1,8(R13)              * ..AREA..
         LR    R13,R1                 * ....BITS
         USING WORKAREA,R4            * ADDRESS WORKAREA
         MVC   MSGLINE(132),BLANKS    * MOVE IN BLANKS
         MVC   MSGLINE(110),STARS     * SET UP BOX
         BAL   R8,WRITEMSG            * WRITE MSG
         MVC   MSGLINE(132),BLANKS    * MOVE IN BLANKS
         MVC   MSGLINE(110),LABEL1    * SET UP BOX
         BAL   R8,WRITEMSG            * WRITE MSG
         MVC   MSGLINE(132),BLANKS    * MOVE IN BLANKS
         MVC   MSGLINE(110),LABEL4    * SET UP BOX
         BAL   R8,WRITEMSG            * WRITE MSG
         MVC   MSGLINE(132),BLANKS    * MOVE IN BLANKS
         MVC   MSGLINE(110),LABEL2    * SET UP BOX
         MVC   MSGLINE+12(8),SMF30STM * MOVE IN STEP NAME
         MVC   MSGLINE+31(8),SMF30PGM * MOVE IN PGM NAME
         LR    R3,R2                  * COPY R2
         A     R3,SMF30TOF            * ADD OFFSET TO COMP SECTION
         USING SMF30CMP,R3            * ADDRESS IT
         TM    SMF30STI,SMF30ABD      * HAS IT ABENDED ?
         BNO   NOTABEND               * NO - NORMAL COMPLETION
         CLC   SMF30SCC,=X'7FFF'      * IS IT SYSTEM CODE ?
         BH    UBEND                  * NO - USER ABEND
         MVC   WORK+0(2),SMF30SCC     * MOVE IN COMP CODE
         MVC   WORK+2(1),SMF30SCC+1   * DOUBLE UP LAST BYTE
         OC    WORK(3),=X'F00FF0'     * CLEAR OUT UNWANTED BITS
         TR    WORK(3),TABLE          * TRANS TO EBCDIC
         MVC   MSGLINE+60(3),WORK     * MOVE IN CODE
         MVC   MSGLINE+58(2),=C'S0'   * SYSTEM ABEND INDICATOR
         B     CPUTIME                * GO AND GET CPU TIME
UBEND    EQU   *
         MVC   MSGLINE+58(1),=C'U'    * USER ABEND INDICATOR
         LA    R7,0                   * CLEAR OUT R7
         LH    R7,SMF30SCC            * HOLD ON A SEC ...
         N     R7,=X'00000FFF'        * GET RID OF INDICATOR
         CVD   R7,PWORK               * .. USER ABENDS ARE IN BINARY
         UNPK  UWORK,PWORK            * SO UNPACK IT
         OI    UWORK+3,X'F0'          * CLEAR LAST BYTE
         MVC   MSGLINE+59(4),UWORK+0  * MOVE IN USER ABEND CODE
         B     CPUTIME                * GO AND GET CPUTIME
NOTABEND EQU   *
         MVC   MSGLINE+58(2),=C'00'   * NORMAL COMPLETION
CPUTIME EQU    *
         LR    R3,R2                  * COPY R2
         A     R3,SMF30COF            * SET TO PROCESSOR SECTION
         USING SMF30CAS,R3            * ADDRESS IT
         SR    R6,R6                  * CLEAR REG FOR DIVIDE
         L     R7,SMF30CPT            * LOAD UP CPU TIME
         D     R6,=F'100'             * DIVIDE BY 100 FOR 100THS SEC
         CVD   R6,PWORK               * CONVERT REMAINDER TO DEC
         UNPK  UWORK,PWORK            * UNPACK IT
         OI    UWORK+3,X'F0'          * CLEAR LAST BYTE
         MVC   MSGLINE+102(2),UWORK+2 * MOVE TO MSG LINE
         C     R7,=F'0'               * ANY MORE ?
         BE    TAPEMNT                * NO - GO GET # OF TAPE MOUNTS
         SR    R6,R6                  * CLEAR REG FOR DIVIDE
         D     R6,=F'60'              * DIVIDE BY 60 FOR SECS
         CVD   R6,PWORK               * CONVERT TO DEC
         UNPK  UWORK,PWORK            * UNPACK IT
         OI    UWORK+3,X'F0'          * CLEAR LAST BYTE
         MVC   MSGLINE+100(2),UWORK+2 * MOVE TO MESSAGE LINE
         C     R7,=F'0'               * ANY MORE ?
         BE    TAPEMNT                * NO - GO GET # OF TAPE MOUNTS
         SR    R6,R6                  * CLEAR REG FOR DIVIDE
         D     R6,=F'60'              * DIVIDE BY 60 FOR MINS
         CVD   R6,PWORK               * CONVERT TO DEC
         UNPK  UWORK,PWORK            * UNPACK IT
         OI    UWORK+3,X'F0'          * CLEAR LAST BYTE
         MVC   MSGLINE+97(2),UWORK+2  * MOVE TO MSGLINE
         C     R7,=F'0'               * ANY MORE ?
         BE    TAPEMNT                * NO - GO GET # OF TAPE MOUNTS
         CVD   R7,PWORK               * CONVERT HOURS TO DEC
         UNPK  UWORK,PWORK            * UNPACK IT
         OI    UWORK+3,X'F0'          * CLEAR LAST BYTE
         MVC   MSGLINE+94(2),UWORK+2  * MOVE TO MSGLINE
TAPEMNT  EQU   *
         LR    R3,R2
         A     R3,SMF30OOF            * SET TO OPERATOR SECTION
         USING SMF30OPS,R3            * ADDRESS IT
         L     R7,SMF30TPR            * LOAD # SPECIFIC TAPE MOUNTS
         A     R7,SMF30PTM            * ADD # NON-SPECIFIC MOUNTS
         CVD   R7,PWORK               * CONVERT TO DEC
         UNPK  UWORK,PWORK            * UNPACK IT
         OI    UWORK+3,X'F0'          * OR OUT ZONE
         MVC   MSGLINE+78(4),UWORK    * MOVE TO MSGLINE
         BAL   R8,WRITEMSG            * WRITE MSG
         MVC   MSGLINE(132),BLANKS    * BLANK LINE
         MVC   MSGLINE(110),LABEL5    * ADD BLANK LINE TO OUTPUT
         BAL   R8,WRITEMSG            * WRITE MSG
EXCP     EQU   *
         LR    R3,R2                  * COPY R2
         A     R3,SMF30EOF            * SET TO EXCP SECTION
         USING SMF30EXP,R3            * ADDRESS IT
         SR    R7,R7                  * CLEAR REG 7
         LH    R7,SMF30EON            * LOAD UP R7 WITH # OF EXCP RECS
         C     R7,=F'0'               * ARE THERE ANY ?
         BNH   DONE                   * - NO THEN IGNORE
EXCPCHK  EQU   *
         MVC   MSGLINE(132),BLANKS    * BLANK OUT MSGLINE
         MVC   MSGLINE(110),LABEL3    * SET UP LINE
         CLC   SMF30CUA,VIO           * IS IT VIO ?
         BNE   CUACHECK               * NO - GO AND CHECK IF UNIT TYPE
         MVC   MSGLINE+56(3),VIOMSG   * MOVE 'VIO' TO MSG LINE
         B     EXCPCNT
CUACHECK EQU   *
         CLI   SMF30DEV,X'20'         * IS IT DASD ?
         BE    CUATRANS               * YES - GET CUA
         CLI   SMF30DEV,X'80'         * IS IT TAPE ?
         BE    CUATRANS               * YES - GET CUA
         B     NEXTREC                * NOT INTERESTED IN THIS ONE
CUATRANS EQU   *
         MVC   WORK+0(2),SMF30CUA     * MOVE IN CUU TO WORK AREA
         MVC   WORK+2(1),SMF30CUA+1   * DOUBLE UP LAST BYTE
         OC    WORK(3),=X'F00FF0'     * REMOVE UNWANTED BITS
         TR    WORK(3),TABLE          * TRANSLATE TO EBCDIC
         MVC   MSGLINE+56(3),WORK     * MOVE CUA TO MSG LINE
EXCPCNT  EQU   *
         L     R6,SMF30BLK            * LOAD UP EXCP COUNTS
         CVD   R6,EXPWKA              * CONVERT TO DEC
         MVC   MSGLINE+31(8),EXCPMASK * MOVE IN EDIT MASK TO LINE
         ED    MSGLINE+31(8),EXPWKA+4 * EDIT THE EXCP COUNT
         MVC   MSGLINE+10(8),SMF30DDN * MOVE IN ASSOC. DDNAME
         BAL   R8,WRITEMSG            * WRITE THE MSG
NEXTREC  EQU   *
         LA    R3,22(R3)              * GET THE NEXT EXCP SECTION
         BCT   R7,EXCPCHK             * LOOP IT
ADDBLNK  MVC   MSGLINE(132),BLANKS    * BLANK LINE
         MVC   MSGLINE(110),LABEL5    * ADD BLANK LINE TO OUTPUT
         BAL   R8,WRITEMSG
DONE     EQU   *
         MVC   MSGLINE(132),BLANKS    * FINISH BOX
         MVC   MSGLINE(110),STARS     *
         BAL   R8,WRITEMSG
FREE     EQU   *
         L     R13,4(R13)             * RESET SAVEAREA
         FREEMAIN R,LV=WORKEND,A=(4)
         B     RETURN00
WRITEMSG EQU   *                      * WRITE MESSAGE LINE
         LA    R6,MSGLINE             * LOAD ADDRESS OF MSGLINE
         ST    R6,36(R12)             * MOVE MSG ADDRESS TO IEFYS
         MVS   42(2,R12),MSGLEN       * MOVE MSG LENGTH TO IEFYS
         L     R15,VIEFYS             * LOAD ADDR OF IEFYS
         BALR  R14,R15                * EXECUTE IEFYS
         BR    R8                     * RETURN
*  CONSTANTS.                                                         *
VIEFYS   DC    V(IEFYS)               * ADDRESS OF IEFYS
VIO      DC    X'7FFF'                * VIO MASK
VIOMSG   DC    C'VIO '                * VIO MSG
MSGLEN   DC    H'132'                 * LENGTH OF MSG LINE
EXCPMASK DC    X'4020202020202120'    * MASK FOR EXCPS
STARS    DC    110C'*'
BLANKS   DC    132C' '
LABEL1   DC    C'* B.O.C. LTD DATACENTRE SERVICES: '
WHICH    DC    C'STEP TERMINATION'
         DC    59C' '
         DC    C'*'
LABEL2   DC    C'* STEPNAME: '
         DC    C'        '
         DC    C'  PROGRAM: '
         DC    C'        '
         DC    C'  COMPLETION CODE: '
         DC    C'    '
         DC    C'  TAPE MOUNTS: '
         DC    C'    '
         DC    C'  CPU TIME: '
         DC    C'00:00:00:00     '
         DC    C'*'
LABEL3   DC    C'* DDNAME: '
         DC    C'        '
         DC    C'  I/O COUNT: '
         DC    C'        '
         DC    C'  UNIT ADDRESS: '
         DC    C'   '
         DC    51C' '
         DC    C'*'
LABEL4   DC    C'*'
         DC    93C' '
         DC    C'HH:MM:SS:TH'
         DC    C'    *'
LABEL5   DC    C'*'
         DC    108C' '
         DC    C'*'
TABLE    DS    0CL256
         DC    X'404040404040404040404040404040F0'
         DC    X'404040404040404040404040404040F1'
         DC    X'404040404040404040404040404040F2'
         DC    X'404040404040404040404040404040F3'
         DC    X'404040404040404040404040404040F4'
         DC    X'404040404040404040404040404040F5'
         DC    X'404040404040404040404040404040F6'
         DC    X'404040404040404040404040404040F7'
         DC    X'404040404040404040404040404040F8'
         DC    X'404040404040404040404040404040F9'
         DC    X'404040404040404040404040404040C1'
         DC    X'404040404040404040404040404040C2'
         DC    X'404040404040404040404040404040C3'
         DC    X'404040404040404040404040404040C4'
         DC    X'404040404040404040404040404040C5'
         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         LTORG
WORKAREA DSECT
SAVEAREA DS    9D                      * SAVEAREA FOR IEFYS
MSGLINE  DS    0CL132                  * MESSAGE LINE
MSG      DS    CL132                   * MESSAGE
WORK     DS    CL3                     * HEX2CHAR WORK AREA
         DS    0D
PWORK    DS    D                       * PACKED WORK AREA
UWORK    DS    F                       * UNPACKED WORK AREA
EXPWKA   DS    0D                      * EXCP WORK AREA
EXPWKA1  DS    D                       *
WORKEND  EQU   *-SAVEAREA              * LENGTH OF WORKAREA
*  IEFACTRT PARAMETER LIST DSECT                                      *
PARMLIST DSECT
CEPA     DS    A                       * COMMON EXIT PARAMETER AREA
JOBNAME  DS    A                       * JOBNAME
PROGNAME DS    A                       * PROGRAMMER NAME
CPUTME   DS    A                       * CPU TIME
ACCTINFO DS    A                       * ACCOUNT INFORMATION
STEPCPU  DS    A                       * CPU TIME FOR STEP
EXECACT  DS    A                       *
CANBIT   DS    A                       * CANCEL BIT
TERMSTAT DS    A                       *
SMFRDW   DS    A                       * SMF RECORD DESCRIPTOR
*  SMF TYPE 30 RECORD DSECT                                           *
         IFASMFR 30
*  CVT DSECT.                                                         *
         CVT   DSECT=YES,PREFIX=YES
         END


Rob Scott
MVS Systems Programmer
BOC Limited (UK)                                            c Xephon 1992

