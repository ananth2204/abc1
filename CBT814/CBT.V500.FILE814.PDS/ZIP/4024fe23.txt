Displaying SRM values

This program is based on an article published in Issue 41 of MVS
Update (February 1990). It reads the control blocks that belong to
SRM, extracting the relevant information, and displaying it on a
screen.

Figure 1 shows an example of a display, in which each line of the
screen includes an area of interest (ie CPU, I/O, etc), a brief
description of the parameter, the name of the parameter in
IEAOPTxx of SYS1.PARMLIB, the current value, the minimum
and maximum values specified in the OPT, and a column
indicating whether the current value is considered to be 'good' or
'bad'.

    P A R A M E T E R           VALUE         LOW         HIGH
CPU   % USO CPU        CCCUTT       71         101          110     GOOD
I/O   % I/O VIA TPI    CPENABLE      1          10           30     GOOD
LSW   % PAGE FIX < 16M LSCTFET      31          76           82     GOOD
LSW   % PAGE FIX ALL   LSCTFTT      39          58           66     GOOD
LSW   THINK TIME       LSCTMTE   16560                    60000
LSW   UIC              LSCTUCT       6           5            8
MSO   AFQ              MCCSBAT      48          50         1000     BAD
MSO   UIC              MCCSBST      12           2            9     GOOD
MPL   % CPU            RCCCPUT      81         101          110     GOOD
MPL   % PAGE FIX < 16M RCCFXET      31         100          100     GOOD
MPL   % PAGE FIX ALL   RCCFXTT      39         100          100     GOOD
MPL   PAGE FAULT       RCCPTRT       3        1000         1000     GOOD
MPL   UIC              RCCUICT       6           2            4     GOOD
Figure 1: Sample screen

This program currently runs under MVS/ESA 3.1.3.

SOURCE CODE FOR SRMSHOW

***********************************************************************
* THIS PROGRAM SHOWS SRM CONSTANTS AND CURRENT VALUES.                *
* FOR MORE INFORMATION SEE MVS/ESA DATA AREAS.                        *
* THIS PROGRAM IS BASED ON "DISPLAYING MAJOR SRM PARAMETERS UNDER TSO"*
* INCLUDED IN "MVS UPDATE" ISSUE 41 FEBRUARY 1990.                    *
***********************************************************************
* THIS MACRO CONVERTS BINARY HALFWORD TO DECIMAL                      *
        MACRO
        EXTEND &BIN,&ETEND
        LCLA  &LEN
        AIF   (T'&ETEND NE 'U').FOLLOW
        B     EXPR&SYSNDX
&ETEND  DC    CL6'0'               CREATE THE ZONE IF IT DOESN'T EXIST
.FOLLOW ANOP
EXPR&SYSNDX DS 0H
        XR    R1,R1                SET REGISTER TO ZERO
        ICM   R1,3,&BIN            LOAD BINARY ZONE
        CVD   R1,DBLEWORD          CONVERT TO DECIMAL
        MVC   &ETEND,MASK1         LOAD MASK FOR ED INSTRUCTION
        ED    &ETEND.(6),PACKED3   CONVERSION FROM PACKED TO DECIMAL
        MEND
* THIS MACRO CONVERTS BINARY FULLWORD TO DECIMAL
        MACRO
        EXTENDW &BIN,&ETEND
        LCLA  &LEN
        AIF   (T'&ETEND NE 'U').FOLLOW
        B     EXPR&SYSNDX
&ETEND  DC    CL10'0'              CREATE ZONE IF IT DOESN'T EXIST
.FOLLOW ANOP
EXPR&SYSNDX DS 0H
        XR    R1,R1                SET REGISTER TO ZERO
        ICM   R1,15,&BIN           LOAD BINARY ZONE
        CVD   R1,DBLEWORD          CONVERT TO DECIMAL
        MVC   &ETEND,MASK2         LOAD MASK FOR ED INSTRUCTION
        ED    &ETEND.(10),PACKED5  CONVERSION FROM PACKED TO DECIMAL
        MEND
* THIS MACRO SETS A ZONE TO ALL SPACES
        MACRO
&NLA    SPACES &ZONE
        MVI   &ZONE,C' '           FIRST BYTE SET TO SPACES
        MVC   &ZONE+1(L'&ZONE-1),&ZONE   PROPAGATE TO ALL BYTES
        MEND
        CVT   DSECT=YES
SRMSHOW CSECT
        STM   R14,R12,12(R13)      SAVE REGISTERS
        LR    R12,R15
        USING SRMSHOW,R12,R6       R12 & R6 = BASE REGISTERS
        LR    R6,R12
        LA    R6,4095(R6)
        LA    R6,1(R6)
        ST    R13,SAVE+4
        LA    R13,SAVE
OTRAVEZ EQU   *
        LA    R8,SCRCOPY           R8 = ADDRESS OF SCREEN
        L     R1,AMODE31A          SWITCH TO 31 BITS
        BSM   0,R1
AMODE31A DC   A(AMODE31B+X'80000000')
AMODE31B DS   0H
        L     R2,CVTPTR
        USING CVT,R2               R2 = ADDRESS TO CVT
        L     R2,CVTOPCTP          R2 = ADDRESS TO RCMT (SRM MAJOR
        MVC   TRAP,RMCT                                  TABLE)
        CLC   RMCT,0(R2)           IS RMCT ?
        BNE   NOBLOC               NO. GO TO ERROR
        DROP  R2
        L     R3,60(R2)            R3 = ADDRESS OF LSCT(LOGICAL SWAP
        MVC   TRAP,LSCT                                 CONTROL TABLE)
        CLC   LSCT,0(R3)           IS LSCT?
        BNE   NOBLOC               NO. GO TO ERROR
        L     R4,228(R2)           R4 = ADDRESS OF RCT(SRM RESOURCE
        MVC   TRAP,RCT                                 TABLE)
        CLC   RCT,0(R4)            IS RCT?
        BNE   NOBLOC               NO. GO TO ERROR
        L     R5,8(R2)             R5 = ADDRESS OF ICT(SRM I/O MGT
        MVC   TRAP,ICT                                 CONTROL TABLE)
        CLC   ICT,0(R5)            IS ICT?
        BNE   NOBLOC               NO. GO TO ERROR
        L     R9,4(R2)             R9 = ADDRESS OF CCT
        MVC   TRAP,CCT
        CLC   CCT,0(R9)            IS CCT
        BNE   NOBLOC               NO. GO TO ERROR
* MOVES TO BINARY CONSTANTS
* INFORMATION FROM SRM CPU MANAGEMENT CONTROL TABLE (IRACCT)
        LH    R1,32(R9)            LOW UTILIZATION IN BALANCE THRESHOLD
        SRL   R1,8                 RESET SCALE
        STH   R1,CCCUTTL           MOVE TO CONSTANT
        LH    R1,30(R9)            HIGH UTILIZATION IN BALANCE THRESHLD
        SRL   R1,8                 RESET SCALE
        STH   R1,CCCUTTH           MOVE TO CONSTANT
        MVC   CCCUTT,102(R9)       SYSTEM CPU UTILIZATION
* INFORMATION FROM SRM I/O MANAGEMENT CONTROL TABLE (IRAICT)
        MVC   TPILOW(2),30(R5)     LOW THRES TPI INTERRUPTS PERCENT
        MVC   TPIHIGH(2),32(R5)    HIGH THRES TPI INTERRUPTS PERCENT
        MVC   TPI(2),68(R5)        PERCENT I/O INTERR HANDLED VIA TPI
* INFORMATION FROM SRM LOGICAL SWAP CONTROL TABLE (N/A ON ESA)
        MVC   LSCTUCTL(2),4(R3)    UIC LOW FOR LOGICAL SWAP
        MVC   LSCTUCTH(2),6(R3)    UIC HIGH FOR LOGICAL SWAP
        MVC   LSCTMTE(4),36(R3)    CURRENT USER THINK TIME
        MVC   LSCTMTEL(4),16(R3)   LOW USER THINK TIME
        MVC   LSCTMTEH(4),20(R3)   HIGH USER THINK TIME
        MVC   LSCTFETL,48(R3)      LOW PAGE FIXED THINK TIME EXTENDED
        MVC   LSCTFETH,50(R3)      HIGH PAGE FIXED THINK TIME EXTENDED
        MVC   LSCTFTTL,44(R3)      LOW PAGE FIXED THINK TIME BELOW
        MVC   LSCTFTTH,46(R3)      HIGH PAGE FIXED THINK TIME BELOW
* INFORMATION FROM SYSTEM RESOURCE MANAGER CONTROL TABLE (IRARCT)
        MVC   LSCTUCT(2),54(R4)    CURRENT UIC AVERAGE
        MVC   LSCTFET,130(R4)      CURRENT PAGE FIXED EXTENDED
        MVC   LSCTFTT,128(R4)      CURRENT PAGE FIXED BELOW
        MVC   MCCSBAT,60(R4)       AVAILABLE FRAME AVERAGE
        MVC   RCCUICTL(2),4(R4)    UIC THRESHOLD LOW
        MVC   RCCUICTH(2),6(R4)    UIC THRESHOLD HIGH
        MVC   RCCUICT(2),54(R4)    CURRENT UIC AVERAGE
        MVC   RCCPTRTL(2),12(R4)   PAGE RATE LOW THRESHOLD
        MVC   RCCPTRTH(2),14(R4)   PAGE RATE HIGH THRESHOLD
        MVC   RCCPTRT(2),68(R4)    TOTAL PAGING RATE
        MVC   RCCFXTTL(2),120(R4)  % ALL OF REAL LOW MPL THRESHOLD
        MVC   RCCFXTTH(2),122(R4)  % ALL OF REAL HIGH MPL THRESHOLD
        MVC   RCCFXTT(2),128(R4)   AVG % TOTAL FRAMES FIXED OR IN I/O
        MVC   RCCFXETL(2),124(R4)  % BELOW THE LINE LOW MPL THRESHOLD
        MVC   RCCFXETH(2),126(R4)  % BELOW THE LINE HIGH MPL THRESHLD
        MVC   RCCFXET(2),130(R4)   AVG % TOTAL FRAME FIXED BELOW
        L     R9,12(R2)            R9 = ADDRESS OF MCT (STORAGE CTRL
        MVC   TRAP,MCT                                  TABLE)
        CLC   MCT,0(R9)            IS MCT?
        BNE   NOBLOC               NO. GO TO ERROR
* INFORMATION FROM SYSTEM STORAGE MANAGEMENT CONTROL TABLE(IRAMCT)
        MVC   MCCSBATL,80(R9)      LOW AFC THRESHOLD
        MVC   MCCSBATH,78(R9)      HIGH AFC THRESHOLD
        MVC   MCCSBSTL,76(R9)      LOW STC IN BALANCE THRESHOLD
        MVC   MCCSBSTH,74(R9)      HIGH STC IN BALANCE THRESHOLD
        MVC   MCCSBST,132(R9)      HIGHEST SYSTEM UIC
* INFORMATION FROM SYSTEM RESOURCE MANAGER CONTROL TABLE (IRARCT)
        LH    R1,8(R4)             LOW CPU THRESHOLD SCALED BY 16
        SRL   R1,4                 RESET SCALE
        STH   R1,RCCCPUTL          MOVE TO CONSTANT
        LH    R1,10(R4)            HIGH CPU THRESHOLD SCALED BY 16
        SRL   R1,4                 RESET SCALE
        STH   R1,RCCCPUTH          MOVE TO CONSTANT
        LH    R1,56(R4)            CPU USAGE THRESHOLD SCALED BY 16
        SRL   R1,4                 RESET SCALE
        STH   R1,RCCCPUT           MOVE TO CONSTANT
        LA    R1,AMODE24           SWITCH TO 24 BITS
        BSM   0,R1
AMODE24 DS    0H
        MVC   0(80,R8),L0          MOVE TITLES LINES TO SCREEN
        LA    R8,80(R8)            SKIP LINE
        MVC   0(80,R8),=80C' '     MOVE BLANKS
        LA    R8,80(R8)            SKIP LINE
        EXTEND CCCUTTL,ZL          CONVERT CONSTANT TO DECIMAL
        EXTEND CCCUTTH,ZH          CONVERT CONSTANT TO DECIMAL
        EXTEND CCCUTT,Z            CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR LINE
        MVC   L1P,LIBCPU1          MOVE TITLES
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND TPILOW,ZL           CONVERT CONSTANT TO DECIMAL
        EXTEND TPIHIGH,ZH          CONVERT CONSTANT TO DECIMAL
        EXTEND TPI,Z               CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR LINE
        MVC   L1P,LIBIO1           MOVE TITLES
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND LSCTFETL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTFETH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTFET,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR LINE
        MVC   L1P,LIBLSW1          MOVE TITLES
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND LSCTFTTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTFTTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTFTT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR LINE
        MVC   L1P,LIBLSW2          MOVE TITLES
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTENDW LSCTMTE,M          CONVERT CONSTANT TO DECIMAL
        EXTENDW LSCTMTEL,ML        CONVERT CONSTANT TO DECIMAL
        EXTENDW LSCTMTEH,MH        CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR LINE
        MVC   L1P,LIBLSW3          MOVE TITLES
        BAL   R10,COMPARE2         ANALYSE VALUE AND RETURN
        MVC   L1V,M                MOVE VALUE TO LINE
        MVC   L1L,ML               MOVE VALUE TO LINE
        MVC   L1H,MH               MOVE VALUE TO LINE
        MVC   L1GOOD,C             MOVE VALUE TO LINE
        MVC   0(80,R8),L1          MOVE LINE TO SCREEN
        LA    R8,80(R8)            SKIP LINE
        SPACES L1                  CLEAR LINE
        SPACES ZL                  CLEAR CONSTANT
        SPACES ZH                  CLEAR CONSTANT
        SPACES Z                   CLEAR CONSTANT
        SPACES C                   CLEAR CONSTANT
        EXTEND LSCTUCTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTUCTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND LSCTUCT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBLSW4          MOVE CONSTANT
        BAL   R10,COMPARE2         ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND MCCSBATL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND MCCSBATH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND MCCSBAT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMSO1          MOVE CONSTANT
        BAL   R10,COMPARE2         ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND MCCSBSTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND MCCSBSTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND MCCSBST,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMSO2          MOVE CONSTANT
        BAL   R10,COMPARE2         ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND RCCCPUTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCCPUTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCCPUT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMPL1          MOVE CONSTANT
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND RCCFXETL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCFXETH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCFXET,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMPL2          MOVE CONSTANT
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND RCCFXTTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCFXTTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCFXTT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMPL3          MOVE CONSTANT
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND RCCPTRTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCPTRTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCPTRT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMPL4          MOVE CONSTANT
        BAL   R10,COMPARE          ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        EXTEND RCCUICTL,ZL         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCUICTH,ZH         CONVERT CONSTANT TO DECIMAL
        EXTEND RCCUICT,Z           CONVERT CONSTANT TO DECIMAL
        SPACES L1                  CLEAR CONSTANT
        MVC   L1P,LIBMPL5          MOVE CONSTANT
        BAL   R10,COMPARE2         ANALYSE VALUE AND RETURN
        BAL   R10,SEND             INSERT LINE ON SCREEN
        LA    R8,SCRCOPY           R8 = START OF SCREEN
        LA    R7,8                 R7 = 8
LOOPC   TR    0(240,R8),TABLE      CLEAR BAD CHARACTERS
        LA    R8,240(R8)           SKIP AREA OK
        BCT   R7,LOOPC             LOOP 8 TIMES
        MVC   STAT1,STAT2          MOVE STATUS
        TPUT  SCREEN,LENS,FULLSCR  SEND SCREEN
        TGET  TBUFF,L'TBUFF,ASIS,WAIT  OBTAIN RESPONSE
        LTR   R15,R15              ALL OK?
        BNZ   ENDOFPGM             NO. GO TO END OF PROGRAM
        CLI   TBUFF,243            PF3 ?
        BE    ENDOFPGM             YES. GO TO END OF PROGRAM
        CLI   TBUFF,195            PF15?
        BE    ENDOFPGM             YES. GO TO END OF PROGRAM
        B     OTRAVEZ              ANOTHER. GO TO AGAIN
ENDOFPGM L    R13,4(R13)           RESET R13
        RETURN (14,12),T,RC=0      RETURN TO CALLER
* GOOD - LOW THRESHOLD < VALUE OK=BLANKS < HIGH THRESHOLD - BAD
COMPARE DS    0H                   VALUE BETWEEN THRESHOLD BAD
        SPACES C                   CLEAR CONSTANT "BAD OR GOOD"
        CLC   Z,ZL                 VALUE VS LOW THRESHOLD
        BNL   LABEL1               GREATER OR EQUAL.. BAD
        MVC   C,GOOD               LOW.. GOOD
LABEL1  DS    0H
        CLC   Z,ZH                 VALUE VS HIGH THRESHOLD
        BNH   LABEL2               LOW OR EQUAL.. OK GO TO RETURN
        MVC   C,BAD                GREATER.. BAD
LABEL2  DS    0H
        BR    R10                  RETURN
* BAD - LOW THRESHOLD < VALUE OK=BLANKS < HIGH THRESHOLD - GOOD
COMPARE2 DS   0H
        SPACES C                   CLEAR CONSTANT "BAD OR GOOD"
        CLC   Z,ZL                 VALUE VS LOW THRESHOLD
        BNL   LABEL3               GREATER OR EQUAL.. GOOD
        MVC   C,BAD                LOW.. BAD
LABEL3  DS    0H
        CLC   Z,ZH                 VALUE VS HIGH THRESHOLD
        BNH   LABEL4               LOW OR EQUAL.. OK GO TO RETURN
        MVC   C,GOOD               GREATER.. GOOD
LABEL4  DS    0H
        BR    R10                  RETURN
SEND    DS    0H
        MVC   L1V+4(6),Z           MOVE VALUE
        MVC   L1L+4(6),ZL          MOVE LOW THRESHOLD
        MVC   L1H+4(6),ZH          MOVE HIGH THRESHOLD
        MVC   L1GOOD,C             MOVE CONSTANT "BAD OR GOOD"
        MVC   0(80,R8),L1          MOVE LINE TO SCREEN AREA
        LA    R8,80(R8)            SKIP LINE ON SCREEN AREA
        SPACES L1                  CLEAR CONSTANT
        SPACES ZL                  CLEAR CONSTANT
        SPACES ZH                  CLEAR CONSTANT
        SPACES Z                   CLEAR CONSTANT
        SPACES C                   CLEAR CONSTANT
        BR    R10                  RETURN
C       DS    CL15                 CONSTANT "BAD OR GOOD"
NOBLOC  DS    0H
        MVC   ERRMSG+24(4),TRAP    MOVE "EYECATCHER" TO ERROR AREA
        TPUT  ERRMSG,80            SEND SCREEN
        B     ENDOFPGM             GO TO END OF PROGRAM
ERRMSG  DC    CL80'** EYECATCHER OF BLOCK XXXX NOT FOUND **'
GOOD    DC    CL15'        GOOD  '
BAD     DC    CL15'     ** BAD **'
TRAP    DC    C'NONE'
RMCT    DC    C'RMCT'
ICT     DC    C'ICT '
RCT     DC    C'RCT '
CCT     DC    C'CCT '
MCT     DC    C'MCT '
LSCT    DC    C'LSCT'
L0      DS    0CL80
        DC    CL35'    P A R A M E T E R'
        DC    CL10'    VALUE'
        DC    CL10'      LOW'
        DC    CL10'     HIGH'
        DC    CL15' '
L1      DS    0CL80
L1P     DC    CL35' '
L1V     DC    CL10' '
L1L     DC    CL10' '
L1H     DC    CL10' '
L1GOOD  DC    CL15' '
        DC    CL5' '
LIBCPU1 DC    CL35'CPU . % USO CPU        CCCUTT '
LIBIO1  DC    CL35'I/O . % I/O VIA TPI    CPENABLE'
LIBLSW1 DC    CL35'LSW . % PAGE FIX < 16M LSCTFET '
LIBLSW2 DC    CL35'LSW . % PAGE FIX ALL   LSCTFTT '
LIBLSW3 DC    CL35'LSW . THINK TIME       LSCTMTE '
LIBLSW4 DC    CL35'LSW . UIC              LSCTUCT '
LIBMSO1 DC    CL35'MSO . AFQ              MCCSBAT '
LIBMSO2 DC    CL35'MSO . UIC              MCCSBST '
LIBMPL1 DC    CL35'MPL . % CPU            RCCCPUT '
LIBMPL2 DC    CL35'MPL . % PAGE FIX < 16M RCCFXET '
LIBMPL3 DC    CL35'MPL . % PAGE FIX ALL   RCCFXTT '
LIBMPL4 DC    CL35'MPL . PAGE FAULT       RCCPTRT '
LIBMPL5 DC    CL35'MPL . UIC              RCCUICT '
CCCUTTL DS    H
CCCUTTH DS    H
CCCUTT  DS    H
TPILOW  DS    H
TPIHIGH DS    H
TPI     DS    H
LSCTFETL DS   H
LSCTFETH DS   H
LSCTFET  DS   H
LSCTFTTL DS   H
LSCTFTTH DS   H
LSCTFTT  DS   H
LSCTMTEL DS   F
LSCTMTEH DS   F
LSCTMTE  DS   F
LSCTUCTL DS   H
LSCTUCTH DS   H
LSCTUCT  DS   H
MCCSBATL DS   H
MCCSBATH DS   H
MCCSBAT  DS   H
MCCSBSTL DS   H
MCCSBSTH DS   H
MCCSBST  DS   H
RCCCPUTL DS   H
RCCCPUTH DS   H
RCCCPUT  DS   H
RCCFXETL DS   H
RCCFXETH DS   H
RCCFXET  DS   H
RCCFXTTL DS   H
RCCFXTTH DS   H
RCCFXTT  DS   H
RCCPTRTL DS   H
RCCPTRTH DS   H
RCCPTRT  DS   H
RCCUICTL DS   H
RCCUICTH DS   H
RCCUICT  DS   H
SAVE     DS   18F
MASK1    DC   X'402020202020'
MASK2    DC   X'40202020202020202020'
DBLEWORD DS   D
         ORG  DBLEWORD+5
PACKED3  DS   PL3
         ORG  DBLEWORD+3
PACKED5  DS   PL5
         ORG
         LTORG
SCREEN   EQU  *
CLRSCRN  DC   X'C3115D7F1140403C404000'
ATTR1    DC   X'1140401DF413'
SCRCOPY  DC   1919X'40'
LENS     EQU  *-SCREEN
         ORG  SCRCOPY+1906
STAT1    DC   CL13' '
         ORG
FILL     DC   C' '
STAT2    DC   C'>'
STATFD   DC   CL12' '
TBUFF    DC   CL10' '
TABLE    DS   0XL256
        DC    64X'40'
        DC    XL16'4040404040404040404040404C4D4040'
        DC    XL16'404040404040404040404040405D4040'
        DC    XL16'4061404040404040404040406C406E4F'
        DC    XL16'40404040404040404040404040404040'
        DC    XL16'408182838485868788898A8B8C8D8E8F'
        DC    XL16'909192939495969798999A9B9C9D9E9F'
        DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
        DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
        DC    XL16'C0C1C2C3C4C5C6C7C8C9CA4040404040'
        DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'
        DC    XL16'E0E1E2E3E4E5E6E7E8E9404040404040'
        DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'
        END


Nestor Lacabe
Systems Programmer
Sevel Argentina SA (Argentina)                                   c Xephon 1994

