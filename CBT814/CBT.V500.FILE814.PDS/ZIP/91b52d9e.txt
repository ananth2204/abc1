A JES2 archiving facility (continued)

This month we continue our look at our JES2 archiving facility
by printing the remaining source code for JAFPP.


JAFPP (CONTINUED)

FIRSTJOB DS    0H                  - BRANCH ADDRESS FOR FIRST JOB
         OI    FLAGS,JOBPROC       -SET FLAG FOR THIS INTERVAL
         TM    FLAGS,FIRSTBLK     Q-DID LAST JOB HAVE MORE THAN 1 BLK
         BO    FIRSTON            Y-IT'S INDEX REC HAS BEEN WRITTEN
* BY EITHER IT HAVING MORE THAN 2 DATA BLOCKS, OR BY WRITING IT'S
* LAST DATA BLOCK WHEN THIS NEW JOB WAS ENCOUNTERED
         NI    FLAGS,INDXNTWR      -TURN OFF INDEX REC WRITTEN FLG -
* 2 JOB'S PREVIOUS JUST HAD ITS INDEX REC WRITTEN - LAST JOB'S
* INDEX REC MUST BE SET TO WRITE
         MVC   INDEXREC,NEWINDX    -SAVE INDEX RECORD FOR LAST JOB
         B     JOBSETUP            -
FIRSTON  DS    0H                  -
         OI    FLAGS,INDXWRIT     Y-LAST JOB'S INDEX REC WAS JUST WRIT
*  - TURN FLAG ON TO PREVENT IT FROM BEING WITTEN TWICE
JOBSETUP DS    0H                  -
         NI    FLAGS,FIRSTOFF      -TURN OFF FIRST BLK WRITTEN FLAG
         MVC   PREVJOB,SSSOJOBI    -UPDATE PREVIOUS JOB ID
         MVC   IDXJOBNM,SSSOJOBN   -MOVE JOB NAME INTO INDEX
         MVC   IDXJOB#,SSSOJOBI+4  -MOVE JOB NAME INTO INDEX
PROCJOB  DS    0H                  -PROCESS JOB
         BR    R7                  -BRANCH TO PROCESSING ROUTINE
LOGDATST DS    0H                  -PROCESS LOG DATA SET
         BAL   R10,READLINE        -GET NEXT LINE
         MVI   0(R5),C'1'          -SET NEW PAGE ASA CHAR
LOGDATLP DS    0H                  -PROCESS LOG DATA SET LOOP
         BAL   R10,COMPRESS        -COMPRESS LINE
         BAL   R10,ADDLINE         -ADDLINE TO RECORD AND WRITE IF REQ
         BAL   R10,READLINE        -GET NEXT LINE
         B     LOGDATLP            -CONTINUE
JCLDATST DS    0H                  -PROCESS JCL DATA SET
         BAL   R10,READLINE        -GET NEXT LINE
         MVI   0(R5),C'1'          -SET NEW PAGE ASA CHAR
JCLDATLP DS    0H                  -PROCESS JCL DATA SET LOOP
         BAL   R10,COMPRESS        -COMPRESS LINE
         BAL   R10,ADDLINE         -ADDLINE TO RECORD AND WRITE IF REQ
         BAL   R10,READLINE        -GET NEXT LINE
         B     JCLDATLP            -CONTINUE
MSGDATST DS    0H                  -PROCESS MSG DATA SET
         BAL   R10,READLINE        -GET NEXT LINE
         MVI   0(R5),C'1'          -SET NEW PAGE ASA CHAR
MSGDATLP DS    0H                  -PROCESS MSG DATA SET LOOP
         CLC   1(7,R5),IEF375I    Q-'JOB START' MSG
         BNE   NOT375             N-
         MVC   IDXSTRDT,31(R5)    Y-MOVE START DATE/TIME TO INDEX
         B     NOT376              CONTINUE
NOT375   DS    0H                  -
         CLC   1(7,R5),IEF376I    Q-'JOB END'
         BNE   NOT376             N-
         MVC   IDXENDDT,31(R5)    Y-MOVE END DATE/TIME TO INDEX
NOT376   DS    0H                  -
         BAL   R10,COMPRESS        -COMPRESS LINE
         BAL   R10,ADDLINE         -ADDLINE TO RECORD AND WRITE IF REQ
         BAL   R10,READLINE        -GET NEXT LINE
         B     MSGDATLP            -CONTINUE
OTHDATST DS    0H                  -PROCESS OTHER DATA SET
         BAL   R10,READLINE        -GET NEXT LINE
         MVI   0(R5),C'1'          -SET NEW PAGE ASA CHAR
OTHDATLP DS    0H                  -PROCESS OTHER DATA SET LOOP
         BAL   R10,COMPRESS        -COMPRESS LINE
         BAL   R10,ADDLINE         -ADDLINE TO RECORD AND WRITE IF REQ
         BAL   R10,READLINE        -GET NEXT LINE
         B     OTHDATLP            -CONTINUE
READLINE DS    0H                  -READ NEXT RECORD FROM JOB LOG
         GET   FSSINDCB            -READ A RECORD
         LR    R5,R1               -SAVE INPUT RECORD ADDRESS
         LA    R3,FSSINDCB         -RETRIEVE ADDRESS OF DATA DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         LH    R6,DCBLRECL         -GET INPUT RECORD LENGTH
         DROP  R3
         BR    R10                 -PERFORM APPROPRIATE PROCESSING
COMPRESS DS    0H                  -COMPRESS A LOGICAL RECORD
         LA    R3,COMPLINE         -RETRIEVE THE BLOCK PTR FOR THIS JOB
COMPLOOP DS    0H                  -COMPRESS ROUTINE LOOP
         CLC   0(1,R5),1(R5)      Q-SAME AS NEXT CHARACTER
         BNE   MOVE1CHR           N-MOVE TO DATA RECORD
         CLC   0(1,R5),2(R5)      Q-WHAT ABOUT THE NEXT 2 CHARS
         BNE   MOVE1CHR           N-NOT WORTH COMPRESSING
         SLR   R4,R4              Y-SET # OF CHARS TO ZERO
         MVC   0(1,R3),DUPCHRST    -INDICATE BEG OF A COMPRESSED RECORD
         MVC   1(1,R3),0(R5)       -MOVE DUPLICATE CHARACTER
DUPLOOP  DS    0H                  -DUPLICATE LOOP
         LA    R4,1(R4)            -INCREMENT LENGTH REG
         LA    R5,1(R5)            -INCREMENT INPUT INDEX
         CLC   1(1,R3),0(R5)      Q-STILL REPEATING
         BNE   ENDOFDUP           N-END DUP ROUTINE
         BCT   R6,DUPLOOP         Q-END OF INPUT RECORD
         STC   R4,2(R3)           Y-STORE DUP'ED LENGTH INTO COMP REC
         LA    R3,3(R3)            -INC OUTPUT INDEX PAST DUP BLOCK
         B     FINCOMPR            -FINISH COMPRESSED RECORD
ENDOFDUP DS    0H                  -PLACE LENGTH INTO DATA RECORD
         STC   R4,2(R3)            -STORE DUP'ED LENGTH INTO COMP REC
         LA    R3,3(R3)            -INC OUTPUT INDEX PAST DUP BLOCK
MOVE1CHR DS    0H                  -MOVE A CHAR TO OUTPUT REC
         MVC   0(1,R3),0(R5)       -
         LA    R3,1(R3)            -INCREMENT OUTPUT INDEX
         LA    R5,1(R5)            -INCREMENT INPUT INDEX
CHKLENGT DS    0H                  -CHECK FOR END OF LOGICAL REC
         BCT   R6,COMPLOOP        Q-END OF INPUT RECORD
FINCOMPR DS    0H                 Y-FINISH COMPRESSED RECORD
         MVC   0(1,R3),ENDOFREC    -INDICATE END OF COMPRESSED REC
         LA    R3,1(R3)            -INCREMENT OUTPUT INDEX
         LA    R5,COMPLINE         -RETRIEVE ADDR OF THE STARTING PT
         SR    R3,R5               -SUBTRACT ENDING POINT
         ST    R3,COMPLENG         -SAVE LEN OF ENTIRE COMPRESSED REC
         BR    R10                 -PERFORM APPROPRIATE PROCESSING
ADDLINE  DS    0H -ADD A LINE TO THE DATA RECORD AND WRITE IF REQUIRED
         L     R5,BLOCKSIZ         -RETRIEVE CURRENT BLOCK SIZE
         L     R3,COMPLENG         -RETRIEVE COMPRESSED LENGTH
         AR    R5,R3               -CALCULATE NEW BLOCK SIZE
         LA    R5,1(R5)            -SAVE A BYTE FOR EOJ INDICATOR
         C     R5,MAXRECSZ        Q-TOO LARGE
         BNH   STILLADD           N-BYPASS WRITE CODE
         ST    R10,RETSAVE         -SAVE RETURN REG
         BAL   R10,WRITEBUF        -MUST WRITE IT NOW
         TM    FLAGS,FIRSTBLK     Q-HAS FIRST BLK ALR BEEN WRITTEN
         BZ    STILFRST           N-
         OI    FLAGS,INDXWRIT     Y-THIS JOB'S INDEX REC WAS JUST WRIT
         B     LOADR10             -
STILFRST DS    0H                  -LAST JOB'S INDEX REC WAS JUST WRIT
         OI    FLAGS,FIRSTBLK      -INDICATE FIRST BLK WRITTEN
         MVC   INDEXREC,NEWINDX    -MOVE THIS JOB'S INDEX RECORD
         NI    FLAGS,INDXNTWR      -ENSURE THAT THIS JOB'S INDEX REC
* WILL BE WRITTEN - THIS BIT MIGHT BE ON IF LAST JOB HAD MORE THAN 2
* BLOCKS OF DATA
LOADR10  DS    0H                  -RELOAD RETURN ADDRESS
         L     R10,RETSAVE         -RELOAD RETURN REG
         B     ADDLINE             -NOW ADD LINE
RETSAVE  DC    F'0'                -SAVE AREA FOR REURN REG
STILLADD DS    0H                  -
         BCTR  R5,0                -DEC R5 BACK TO ACCURATE FIGURE
         ST    R5,BLOCKSIZ        N-KEEP BUILDING REC - SAVE NEW SIZE
         BCTR  R3,0                -DEC R3 FOR EXECUTE
         L     R4,BLOCKPTR         -RETRIEVE ADDRESS OF NEXT POS IN BLK
         EX    R3,MOVECMPR         -MOVE COMPRESSED RECORD TO DATA REC
         AR    R4,R3               -CALCULATE NEW BLOCKPTR
         LA    R4,1(R4)            -RE-ADD 1 BECAUSE OF EX
         ST    R4,BLOCKPTR         -SAVE NEW BLOCKPTR
         BR    R10                 -RETURN
MOVECMPR MVC   0(*-*,R4),COMPLINE  -MVC TO MOVE COMPR. LINE INTO BLK
WRITEBUF DS    0H                  -WRITE A DATA RECORD
         LA    R3,ARCDADCB         -RETRIEVE ADDRESS OF DATA DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         TM    FLAGS,DATAWRIT     Q-DATA WRITTEN YET
         BZ    JUSTWRIT           N-BYP CHECK
         CHECK ARCHDECB
         TM    FLAGS,INDXWRIT     Q-INDEX RECORD WRITTEN
         BO    JUSTWRIT           N-BYPASS WRITING INDEX REC
         L     R1,DCBDEBAD         -RETRIEVE DEB ADDRESS
         LA    R2,DCBFDAD          -RETRIEVE ABSOLUTE ADDRESS
         LR    R4,R13              -SAVE R13
         STM   R1,R13,12(R13)      -SAVE REGISTERS
         L     R15,TRKCONV         -LOAD CONVERSION ROUTINE ADDRESS
         BALR  R14,R15             -BRANCH TO ROUTINE
         LM    R1,R13,12(R4)       -RESTORE REGISTERS
         ST    R0,IDXTTR           -SAVE TTR
         PUT   ARCIXDCB,INDEXREC   -WRITE OUT INDEX REC FROM PREV JOB
         DROP  R3
JUSTWRIT DS    0H                  -
         SR    R2,R2               -CLEAR REG 2
         L     R3,BLOCKSIZ         -RETRIEVE CURRENT BLOCK SIZE
         A     R3,RECINCRM         -ADD REQUIRED RECORD INCREMENT
         D     R2,INCINTER         -DIVIDE BY INCREMENT INTERVAL
         LTR   R2,R2              Q-ANY REMAINDER
         BZ    BYPINCQT            -BYPASS INCREMENTING QUOTIENT
         LA    R3,1(R3)            -ADD 1 TO QUOTIENT TO ROUND UP
BYPINCQT DS    0H                  -
         MH    R3,INCINTER+2       -MULTIPLY BY INTERVAL
         A     R3,OVERHEAD         -ADD RECORD OVERHEAD
         L     R2,TRACKBAL         -RETRIEVE TRACKBAL
         SR    R2,R3               -SUBTRACT AMOUNT OF THIS DATA REC
         ST    R2,TRACKBAL         -SAVE IN TRACK BALANCE
         OI    FLAGS,DATAWRIT      -SET ARCHIVE DATA WRITTEN FLAG
         TM    FLAGS,BUFFERSW     Q-BUFFER1
         BO    USEBUFF2            -USE BUFFER 2
         OI    FLAGS,BUFFERSW      -SET BUFFERSW TO IND USING BUFF2
         L     R5,BUF1ADDR         -SET DATA ADDRESS TO BUFFER1
         L     R3,BUF2ADDR         -SET DEFAULT NEW BUFFER TO 2
         ST    R3,BLOCKPTR         -SAVE NEW BLOCKPTR
         B     WRITEDAT            -GO ISSUE WRITE
USEBUFF2 DS    0H                  -SET UP FOR BUFFER 2
         XI    FLAGS,BUFFERSW      -SET BUFFERSW TO IND USING BUFF1
         L     R5,BUF2ADDR         -SET DATA ADDRESS TO BUFFER2
         L     R3,BUF1ADDR         -SET DEFAULT NEW BUFFER TO 1
         ST    R3,BLOCKPTR         -SAVE NEW BLOCKPTR
WRITEDAT DS    0H                  -ISSUE WRITE TO DATA FILE
         L     R4,BLOCKSIZ         -RETRIEVE CURRENT BLOCK SIZE
         WRITE ARCHDECB,SF,ARCDADCB,(R5),(R4),MF=E
TRKCALC  DS    0H                  -CALCULATE REMAINING TRACK SPACE
         MVC   BLOCKSIZ,=F'0'      -RE-INITIALIZE CURRENT BLOCK LENGTH
         CLC   TRACKBAL,TRACKREQ  Q-WILL FULL RECORD FIT
         BNL   RECFITS            Y-
         CLC   TRACKBAL,TRACKMIN  Q-ANY ROOM LEFT FOR ANY RECORD
         BNH   NEWTRACK           N-NEED TO GO TO NEW TRACK
         SR    R2,R2               -CLEAR TOP HALF OF THE DIVIDEND
         L     R3,TRACKBAL        Y-RETRIEVE TRACK BALANCE
         S     R3,OVERHEAD         -SUBTRACT KEY AREA
         D     R2,INCINTER         -DIVIDE BY INCREMENT INTERVAL
         MH    R3,INCINTER+2       -MULTIPLY BY INTERVAL
         S     R3,RECINCRM         -SUBTRACT RECORD INCREMENT
         ST    R3,MAXRECSZ         -SAVE MAXIMUM RECORD SIZE
         IC    R4,RECNUMBR         -RETRIEVE REC NUMBER
         LA    R4,1(R4)            -CALCULATE NEXT RECORD NUMBER
         STC   R4,RECNUMBR         -STORE NEXT RECORD NUMBER
         BR    R10                 -EXIT
NEWTRACK DS    0H                  -WILL BE FORCED TO A NEW TRACK
         MVC   TRACKBAL,TRACKCAP   -SET TRACK BALANCE TO TRACK CAPACITY
         MVI   RECNUMBR,X'00'      -SET RECORD NUMBER TO 1
RECFITS  DS    0H
         MVC   MAXRECSZ,DEFMAXSZ   -SET MAC REC TO FULL BLOCK
         IC    R4,RECNUMBR         -RETRIEVE REC NUMBER
         LA    R4,1(R4)            -CALCULATE NEXT RECORD NUMBER
         STC   R4,RECNUMBR         -STORE NEXT RECORD NUMBER
         BR    R10                 -EXIT
FSSEOF   DS    0H                  -END OF FILE ROUTINE FOR SYSOUT
         CLOSE (FSSINDCB)          CLOSE INPUT DS BEFORE DELETING IT
         MVC   TXTUDDNM,FSSDDNAM   -MOVE DDNAME TO UNALLOC TXT UNIT
         MVI   DYNVERB,X'02'       -REQUEST DE-ALLOCATION
         LA    R1,DYNTXTSU         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFUL
         BZ    FSSUNAOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP009: UNABLE TO DE-ALLOCATE FSS SYSOUT DATASET',   X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -INDICATE JAF TERMINATION REQ
         B     TERMARCH            -EXIT ARCHIVE
FSSUNAOK DS    0H                  -
         B     RETRDS              -GO RETRIEVE ANOTHER SYSOUT DATA SET
TERMARCH DS    0H                  -A PROBLEM WITH FSS HAS BEEN FOUND
         WTO   'JAFPP008: FAILURE FOUND IN ARCHIVE ROUTINE',           X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -INDICATE TERM OF JAF REQUIRED
EXITARCH DS    0H                  -INDICATE TO FSS THAT TASK IS TERM
         L     R3,BLOCKPTR         -NEW JOB - RETRIEVE CURR BLK PTR
         MVC   0(1,R3),ENDOFJOB    -SET END OF JOB INDICATOR IN BLK
         L     R3,BLOCKSIZ         -RETRIEVE CURRENT BLOCK SIZE
         LA    R3,1(R3)            -INCREMENT
         ST    R3,BLOCKSIZ         -SAVE FOR WRITEBUF
         BAL   R10,WRITEBUF        -WRITE OUT LAST BUFFER (IF FILLED)
         TM    FLAGS,FIRSTBLK     Q-DID LAST JOB HAVE MORE THAN 1 BLK
         BO    BYPLSTIX           Y-IT'S INDEX REC HAS BEEN WRITTEN
         MVC   INDEXREC,NEWINDX    -SAVE INDEX RECORD FOR LAST JOB
         LA    R3,ARCDADCB         -RETRIEVE ADDRESS OF DATA DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         TM    FLAGS,DATAWRIT     Q-DATA WRITTEN YET
         BZ    BYPLSTIX           N-BYP CHECK
         CHECK ARCHDECB
         L     R1,DCBDEBAD         -RETRIEVE DEB ADDRESS
         LA    R2,DCBFDAD          -RETRIEVE ABSOLUTE ADDRESS
         LR    R4,R13              -SAVE R13
         STM   R1,R13,12(R13)      -SAVE REGISTERS
         L     R15,TRKCONV         -LOAD CONVERSION ROUTINE ADDRESS
         BALR  R14,R15             -BRANCH TO ROUTINE
         LM    R1,R13,12(R4)       -RESTORE REGISTERS
         ST    R0,IDXTTR           -SAVE TTR
         PUT   ARCIXDCB,INDEXREC   -WRITE OUT INDEX REC FROM LAST JOB
         DROP  R3
BYPLSTIX DS    0H                  -
         OI    SSSOFLG2,SSSOCTRL   -INDICATE WRITER TERMINATING
         MODESET MF=(E,SUPMODE)    -ENTER SUP STATE
         LA    R1,SSPARM           -LOAD ADDRESS OF SSOB
         IEFSSREQ
         MODESET MF=(E,PROBMODE)   -RETURN TO PROBLEM STATE
         BR    R11                 -
DEALLOC  DS    0H                  -DE-ALLOCATE AND CLOSE ARCH DATA SET
         CLOSE SNAPOUT
         TM    FLAGS,DATAWRIT     Q-FIRST WRITE FOR THIS OPEN
         BZ    BYPCHECK           Y-BYPASS LAST CHECK
         TM    FLAGS,FIRSTBLK     Q-DID LAST JOB HAVE MORE THAN 1 BLK
         BZ    BYPCHECK           N-IT WAS A SHORT JOB, IT'S LAST CHECK
*                                   ALREADY PERFORMED
         CHECK ARCHDECB
BYPCHECK DS    0H
         CLOSE ARCDADCB
         MVI   DYNVERB,X'02'       -REQUEST DE-ALLOCATION
         MVC   TXTDSN,ARCDADSN     -COPY DSN
         LA    R1,DYNTXTDL         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFUL
         BZ    DEALCDOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP017: UNABLE TO DE-ALLOCATE ARCHIVE DATA DATASET', X
               ROUTCDE=2,DESC=4
         TM    FLAGS,TERMJAF      Q-JAF TERM ALREADY INDICATED
         BOR   R11                Y-AVOID A TERMINATION LOOP
         OI    FLAGS,TERMJAF      N-INDICATE TERM OF JAF REQUIRED
         B     TERMEXIT            -EXIT
DEALCDOK DS    0H                  -DE-ALLOC  OK
         CLOSE ARCIXDCB
         MVC   TXTDSN,ARCIXDSN     -COPY DSN
         LA    R1,DYNTXTDL         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -ALLOC SUCCESSFUL
         BZ    DEALCIOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP018: UNABLE TO DE-ALLOC ARCHIVE INDEX DATASET',   X
               ROUTCDE=2,DESC=4
         TM    FLAGS,TERMJAF      Q-JAF TERM ALREADY INDICATED
         BOR   R11                Y-AVOID A TERMINATION LOOP
         OI    FLAGS,TERMJAF      N-INDICATE TERM OF JAF REQUIRED
         B     TERMEXIT            -EXIT
DEALCIOK DS    0H                  -DE-ALLOC  OK
         BR    R11
         PUSH  USING               -SAVE BASE INFORMATION
         DROP  R12,R8              -DROP BASE
POSTTIME DS    0H                  -POST STIMER ECB
         USING POSTTIME,R15        -ESTABLISH ADDRESSABILITY
         STM   R14,R12,12(R13)     -SAVE REGISTERS
         POST  STIMRECB            -INDICATE END OF INTERVAL
         LM    R14,R12,12(R13)     -RESTORE REGISTERS
         BR    R14                 -RETURN TO SYSTEM
         POP   USING               -RESTORE PREVIOUS BASE REG STATUS
SYNODATA DS    0H                  -SYNAD ROUTINE FOR DATA FILE
         SYNADAF ACSMETH=BSAM
         MVC   SYNERRMS,0(R1)      -SAVE ERROR MSG
         SYNADRLS
         WTO   'JAFPP014: I/O ERROR WHILE WRITING TO DATA FILE',       X
               ROUTCDE=2,DESC=4
         TM    FLAGS,TERMJAF      Q-JAF TERM ALREADY INDICATED
         BOR   R11                Y-AVOID A TERMINATION LOOP
         OI    FLAGS,TERMJAF      N-INDICATE TERM OF JAF REQUIRED
         B     EXITARCH            -EXIT
*  WORK AREAS AND CONSTANTS FOR WEEKDAY#
DBLWORD  DS    D
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
F11      DC    F'11'
F13      DC    F'13'
F1000    DC    F'1000'
CENTURY  DC    F'19'
YEAR     DS    F
DAY      DC    X'00'
JULADD   DC    X'1D1C1C1C'
JULTAB   DC    X'001F000B001C000C001F0001001E0002001F0003001E0004'
         DC    X'001F0005001F0006001E0007001F0008001E0009001F000A'
*  WORK AREAS AND CONSTANTS FOR ARCHIVE
TRACKCAP DC    F'47968'            -TRACK BALANCE
TRACKBAL DC    F'0'                -TRACK BALANCE
TRACKMIN DC    F'640'              -MINIMUM TRACK BALANCE FOR ANY DATA
TRACKREQ DC    F'23968'            -MINIMUM TRACK BALANCE FOR FULL REC
INCINTER DC    F'32'               -ROUNDING INTERVAL FOR EACH RECORD
OVERHEAD DC    F'480'              -OVERHEAD FOR EACH RECORD
RECINCRM DC    F'12'               -REQUIRED ADDITION TO EACH DATA LEN
RECNUMBR DS    CL1                 -RECORD NUMBER
COMPLINE DS    CL133               -COMPRESSED LINE
         DS    CL17                -BUFFER FOR LONG COMPRESSED LINES
COMPLENG DC    F'0'                -COMPRESSED LINE LENGTH
BLOCKPTR DC    A(DATABUF1)         -POINTER TO CURR. LOC.IN DATA BLOCK
BLOCKSIZ DC    F'0'                -CURRENT ACCUMULATED BLOCK SIZE
MAXRECSZ DC    F'23476'            -CURRENT MAX RECORD FOR THIS TRACK
DEFMAXSZ DC    F'23476'            -DEFAULT MAXIMUM RECORD SIZE
ENDOFJOB DC    X'FF'               -END OF JOB INDICATOR
ENDOFREC DC    X'EE'               -END OF LOGICAL COMPRESSED RECORD
DUPCHRST DC    X'DD'               -DUPLICATE CHARACTER INDICATOR
*                                  - FORMAT IS X'DDXXYY'
*                                  - WHERE XX = CHARACTER TO DUPLICATE
*                                  -       YY = NUMBER OF DUPS IN HEX
IEF375I  DC    C'IEF375I'          'JOB START' MSG
IEF376I  DC    C'IEF376I'          'JOB STOP' MSG
PSODS    DC    CL5'PS000'
PREVJOB  DC    CL8' '
DSTYPE   DC    CL1' '
DSPRCAD  DS    0F
         DC    A(LOGDATST)
         DC    A(JCLDATST)
         DC    A(MSGDATST)
         DC    A(OTHDATST)
TRKCONV  DC    F'0'                -ADDRESS OF TRACK CONVERSION ROUTINE
INDEXREC DS    0CL36
         DS    CL32
IDXTTR   DS    XL4
NEWINDX  DS    0CL36
IDXJOBNM DS    CL8
IDXJOB#  DS    CL4
IDXSTRDT DS    CL10
IDXENDDT DS    CL10
         DS    CL4
SUPMODE  MODESET KEY=ZERO,MODE=SUP,MF=L
PROBMODE MODESET KEY=NZERO,MODE=PROB,MF=L
FSSINDCB DCB   DSORG=PS,MACRF=GL,EODAD=FSSEOF,DDNAME=DUMMY,            X
               EROPT=ACC,DEVD=DA
*              SYNAD=SYNARCH
SSPARM   DC    X'80',AL3(SSAREA)   ADDRESS OF SSOB
SSAREA   DC    C'SSOB'             CONTROL BLOCK IDENTIFIER
         DC    AL2(SSOBHSIZ)       LENGTH OF SSOB HEADER
         DC    AL2(SSOBSOUT)       FUNCTION ID
         DC    A(0)                ADDRESS OF SSIB OR ZERO
         DC    F'0'                RETURN CODE FROM SUBSYSTEM
         DC    A(SSFUNC)           FUNCTION DEPENDENT AREA POINTER
         DC    XL8'00'             EXTENDED SSOB
SSFUNC   DC    AL2(SSSOSIZE)       SYSOUT EXTENSION LENGTH
         DC    X'00'               SSSOUFLG
         DC    X'00'               RESERVED
         DC    AL1(SSSOSCLS)       DS SELECTION CNTL FLAGS - CLASS ONLY
         DC    XL23'00'            FILLER
         DC    XL8'00'             DEST. - NOT A SELECTION CRITERION
         DC    XL64'00'            FILLER
         DC    CL8'J'              SYSOUT CLASS SELECTION LIST
         DC    XL12'00'            REST OF SSOB EXTENSION
         DC    CL20'00'            PPS/1 - PGMR NAME FIELD
         DC    XL4'00'             PPS/1 - RESERVED
         DC    CL4'00'             PPS/1 - ACCOUNT NUMBER
         DC    CL4'00'             PPS/1 - ROOM NUMBER
         DC    CL8'00'             PPS/1 - /*JOBPARM O=
         DC    XL20'00'            PPS/1 - RESERVED
*  WORK AREAS AND CONSTANTS FOR ENTIRE CSECT AND DRIVER
COMMLPTR DC    A(0)                PTR FROM EXTRACT (TO ECB & CIB PTRS)
ECBLIST  DS    0F                  -BEGINNING OF ECBLIST
CMDECBPT DC    A(0)                -POINTER TO COMMAND ECB
TIMECBPT DC    X'80',AL3(STIMRECB) -POINTER TO STIMER ECB
STIMRECB DC    F'0'                -ECB POSTED BY STIMER EXIT
         DS    0F
RETCDEYE DC    C'REG 15 FOLLOWS ON A FULLWORD BOUNDARY'
RETCODE  DC    F'0'
LINKSAVE DC    F'0'
         DS    0F
COMMLIST DS    0CL84
CMDLENG  DC    H'84'
         DC    H'00'
CMDTEXT  DC    CL19'S TS0JAFCP,ARCHIVE='
CMDARCH  DC    C' '
         DC    60C' '
FLAGS    DC    F'0'
NEWDAYDS EQU   X'80'
TERMJAF  EQU   X'40'
DATAWRIT EQU   X'20'               -ON = DATA HAS BEEN WRIT THIS EXEC
BUFFERSW EQU   X'10'               -ON = BUFFER1, OFF = BUFFER2
INDXWRIT EQU   X'08'               -OFF = INDEX REC FOR JOB NOT YET WR
*                                  -ON INDEX REC ALREADY WRITTEN
INDXNTWR EQU   X'F7'               -USED TO TURN OFF INDXWRIT FLAG
JOBPROC  EQU   X'04'               -OFF = FIRST JOB NOT YET PROCESSED
*                                  -ON FIRST JOB FOR THIS INTERVAL PROC
FIRSTBLK EQU   X'02'               -OFF = FIRST BLK NOT YET WRITTEN FOR
*                                  -      CURRENT JOB
*                                  -ON MORE THAN ONE BLK FOR THIS JOB
FIRSTOFF EQU   X'FD'               -USED TO TURN OFF FIRSTBLK FLAG
WAITIME  DS    0D
         DC    CL8'00000000'
EIGHTAM  DC    X'08000000'
TIME     DS    F
DATE     DS    0F
         DS    X
YR       DS    X
PCKDAY   DS    PL2
LEAPINC  DC    P'0'
ARCDAYPK DS    0PL2
ARCDAY   DS    X
ARCDAYSG DC    X'0F'
PCKYEAR  DC    PL2'0'
DUBLWORD DC    D'0'
FULLWORD DC    F'0'
CRDATE   DS    0XL3                -CALCULATED CREATION DATE
CRYEAR   DC    X'00'
CRDAY    DC    X'0000'
EOMDADSN DS    0CL44
         DC    CL19'DS.SSDPRM.JAF.DATA7'
         DC    CL25' '
ARCDADSN DS    0CL44
         DC    CL18'DS.SSDPRM.JAF.DATA'
ARCHIVE# DC    CL1' '
         DC    CL25' '
ARCIXDSN DS    0CL44
         DC    CL19'DS.SSDPRM.JAF.INDEX'
ARCIX#   DC    CL1' '
         DC    CL24' '
LOCEOM   CAMLST NAME,EOMDADSN,,LOCCAT
LOCARC   CAMLST NAME,ARCDADSN,,LOCCAT
LOCCAT   DS    0D
         DC    265C' '
         ORG   LOCCAT+6
LOCVOL   DS    CL6
         ORG
LOCDSCB  CAMLST SEARCH,ARCDADSN,ARCVOL,DSCB
ARCVOL   DS    CL6
LOCDSCB2 CAMLST SEARCH,EOMDADSN,EOMVOL,DSCB
EOMVOL   DS    CL6
DSCB     DC    CL140' '
         ORG   DSCB+9
DSCBCRDT DS    0CL3                -DSCB CREATION DATE
DSCBCRYR DS    XL1                 -DSCB CREATION YEAR
DSCBCRDY DS    XL2                 -DSCB CREATION DAY
         ORG
DYNPTR   DC    0F'0',X'80',AL3(DYNRQBLK)
DYNRQBLK DS    0F
         DC    AL1(20)
DYNVERB  DC    XL1'00'
DYNFLGS1 DC    XL2'00'
DYNERR   DC    XL2'0000'
DYNINFO  DC    XL2'0000'
DYNTXTPT DC    A(0)
         DC    F'0'
DYNFLGS2 DC    0XL4'00'
         DC    X'40000000'         -INDICATE TO WAIT FOR DSNAME
DYNTXTAL DS    0F                  -LIST OF TEXT PTR ADDRESS FOR ALLOC
         DC    A(TXTDSNA)
         DC    A(TXTSTATA)
         DC    A(TXTNDSPA)
         DC    A(TXTCDSPA)
         DC    A(TXTORGA)
         DC    A(TXTDDNAM)
         DC    A(TXTBLKLA)
         DC    A(TXTPRIMA)
         DC    A(TXTSECOA)
         DC    A(TXTVOLA)
         DC    A(TXTUNITA)
         DC    A(TXTBLKSA)
         DC    A(TXTLRECA)
         DC    X'80'
         DC    AL3(TXTRECFA)
TXTDSNA  DS    0F                  -SPECIFY DSN
         DC    XL2'0002'
         DC    XL2'0001'
         DC    AL2(0022)
TXTDSN   DS    CL44
TXTSTATA DS    0F                  -SPECIFY STATUS
         DC    XL2'0004'
         DC    XL2'0001'
         DC    XL2'0001'
TXTSTAT  DC    XL1'01'
TXTNDSPA DS    0F                  -SPECIFY NORMAL DISPOSITION
         DC    XL2'0005'
         DC    XL2'0001'
         DC    XL2'0001'
TXTNDSP  DC    XL1'01'
TXTCDSPA DS    0F                  -SPECIFY COND DISPOSITION
         DC    XL2'0006'
         DC    XL2'0001'
         DC    XL2'0001'
TXTCDSP  DC    XL1'01'
TXTORGA  DS    0F                  -SPECIFY DSORG
         DC    XL2'003C'
         DC    XL2'0001'
         DC    XL2'0002'
TXTDSORG DC    XL2'4000'
TXTDDNAM DS    0F                  -SPECIFY REQUEST DDNAME
         DC    XL2'0055'
         DC    XL2'0001'
         DC    XL2'0008'
ARCDDNAM DC    CL8' '
TXTBLKLA DS    0F                  -SPECIFY BLOCK SIZE FOR ALLOCATION
         DC    XL2'0009'
         DC    XL2'0001'
         DC    XL2'0003'
TXTBLKAL DC    AL3(0)
DATBLKSZ DC    AL3(23476)
IDXBLKSZ DC    AL3(23472)
TXTPRIMA DS    0F                  -SPECIFY PRIMARY ALLOCATION
         DC    XL2'000A'
         DC    XL2'0001'
         DC    XL2'0003'
TXTPRIM  DC    AL3(0)
DATPRIM  DC    AL3(4000)
IDXPRIM  DC    AL3(30)
TXTSECOA DS    0F                  -SPECIFY SECONDARY ALLOCATION
         DC    XL2'000B'
         DC    XL2'0001'
         DC    XL2'0003'
TXTSECON DC    AL3(0)
DATSECON DC    AL3(200)
IDXSECON DC    AL3(5)
TXTVOLA  DS    0F                  -SPECIFY VOLSER
         DC    XL2'0010'
         DC    XL2'0001'
         DC    XL2'0006'
TXTVOL   DC    CL6' '
TXTUNITA DS    0F                  -SPECIFY UNIT
         DC    XL2'0015'
         DC    XL2'0001'
         DC    XL2'0004'
         DC    CL4'3380'
TXTBLKSA DS    0F                  -SPECIFY BLOCKSIZE
         DC    XL2'0030'
         DC    XL2'0001'
         DC    XL2'0002'
TXTBLKSZ DC    AL2(0)
TXTLRECA DS    0F                  -SPECIFY LRECL
         DC    XL2'0042'
         DC    XL2'0001'
         DC    XL2'0002'
TXTLRECL DC    XL2'0000'
DATLRECL DC    AL2(0)
IDXLRECL DC    AL2(36)
TXTRECFA DS    0F                  -SPECIFY RECFM
         DC    XL2'0049'
         DC    XL2'0001'
         DC    XL2'0001'
TXTRECFM DC    XL1'C0'
DYNTXTDL DS    0F                  -LIST OF TEXT PTR ADDRESS FOR DE-ALC
         DC    A(TXTDSNA)           ARC DATA & INDEX
         DC    X'80'
         DC    AL3(TXTUNALA)
TXTUNALA DS    0F                  -SPECIFY FORCED UN-ALLOCATE
         DC    XL2'0007'
         DC    XL2'0000'
DYNTXTSA DS    0F                  -LIST OF TEXT PTR ADDRESS FOR ALLOC
         DC    A(TXTFDSN)           OF FSS DATA SET
         DC    A(TXTSSA)
         DC    X'80'
         DC    AL3(TXTRDD)
TXTFDSN  DS    0F                  -SPECIFY DSN
         DC    XL2'0002'
         DC    XL2'0001'
         DC    XL2'002C'
TXTFSDSN DS    CL44
TXTSSA   DC    X'005C'             SUBSYSTEM DATA SET ALLOCATION
         DC    X'0001'             ONE PARAMETER
         DC    X'0004'             LENGTH OF PARAMETER
TXTSSN   DC    CL4'JES2'           SUBSYSTEM NAME
         DS    0H
TXTRDD   DC    X'0055'             RETURN WITH DDNAME
         DC    X'0001'             ONE PARAMETER
         DC    X'0008'             LENGTH OF PARAMETER
FSSDDNAM DC    CL8' '              AREA FOR DDNAME
DYNTXTSU DS    0F                  -LIST OF TEXT PTR ADDRESS FOR DEL
         DC    A(TXTUDDN)           OF FSS DATA SET
         DC    X'80'
         DC    AL3(TXTOVDSP)
TXTUDDN  DC    X'0001'             UNALLOCATION BY DDNAME
         DC    X'0001'             ONE PARAMETER
         DC    X'0008'             LENGTH OF PARAMETER
TXTUDDNM DC    CL8' '              DDNAME TO BE UNALLOCATED
         DS    0H
TXTOVDSP DC    X'0005'             OVERRIDING DISPOSITION SPECIFICATION
         DC    X'0001'             ONE PARAMETER
         DC    X'0001'             LENGTH OF PARAMETER
         DC    X'04'               DELETE DATA SET
*        THIS MACRO IS RETAINED FOR FUTURE TESTING.
SNAPOUT  DCB   DDNAME=SNAPOUT,DEVD=DA,RECFM=VBA,DSORG=PS,              X
               BLKSIZE=1632,LRECL=125,MACRF=W
ARCDADCB DCB   DSORG=PS,BLKSIZE=23476,MACRF=W,RECFM=U,DDNAME=DUMMY,    X
               DEVD=DA,SYNAD=SYNODATA
         WRITE ARCHDECB,SF,MF=L
ARCIXDCB DCB   DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=36,BLKSIZE=23472,    X
               DDNAME=DUMMY,DEVD=DA
*              SYNAD=SYNARCH
SYNERRMS DC    CL136' '
SAVEAREA DS    18F
         LTORG ,
ENDPTADD DC    A(ENDPT)
BUF1ADDR DC    A(DATABUF1)
BUF2ADDR DC    A(DATABUF2)
DATABUF1 DS    0CL23476            -1/2 OF A 3380 TRACK
         DS    CL23476             -MAX DATA RECORD SIZE
DATABUF2 DS    0CL23476            -1/2 OF A 3380 TRACK
         DS    CL23476             -MAX DATA RECORD SIZE
         DC    C'END OF JAFPP-2.03'
ENDPT    EQU   *                   -END OF DUMPED STORAGE
         DCBD  DSORG=PS,DEVD=DA    DCB DSECT
COMMADDR DSECT                     POINTED TO BY COMMLPTR
COMMECB  DS    A                   POINTER TO COMMAND ECB
COMMCIB  DS    A                   POINTER TO COMMAND INPUT BUFFER
         CVT   DSECT=YES,LIST=NO
         IEFJESCT                  JES COMMUNICATION TABLE DSECT
         IEFJSSOB (SO)             SSOB DSECT WITH PROCESS SYSOUT FUNC
         END   JAFPP

This article will be concluded next month when we shall be
publishing details of the remaining components of the system.

Steven Zeh
Lead Systems Programmer
Fleet/Norstar Services (USA)                                    c Xephon 1991

