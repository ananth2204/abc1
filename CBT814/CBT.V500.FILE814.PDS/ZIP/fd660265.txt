Building lists and stacks in PL/I


List processing

List processing is the name for a number of techniques to help
manipulate collections of data. A list is a data structure and is
used in a program in much the same way as arrays to store and
later retrieve data.

IBM's PL/I Language Reference manual devotes less than one
page to list processing, yet PL/I has many features that allow it
to process lists efficiently. PL/I's BASED and POINTER
variables and its NULL built-in function (among others) give
the programmer a very flexible way of handling data items.

Building a list

Every data item (or datum) in a list is linked to the next datum
by a pointer. The following is an example in PL/I of how a
typical datum might be declared.

DCL SPTR      POINTER;
DCL 1 EXAMPLE BASED ( SPTR ),
     3 NEXT    POINTER,
     3 DATA1   CHAR (80),
     3 DATA2     ...     ;

In the above example, a datum (any level 3 item(s) such as
DATA1, DATA2) plus the pointer NEXT make up one
element of a list and one or many elements (different
allocations of the based structure EXAMPLE) make up a
complete list.

A start pointer (sometimes referred to as the head of the list) is
often useful to indicate where the first datum is. With this
declared, one can allocate the first element of the list as shown
below. Once this is done, data can be assigned to the first
datum as and when necessary.

DCL START_PTR POINTER;

ALLOCATE EXAMPLE SET (START_PTR);
SPTR = START_PTR;
NEXT = NULL();

DATA = 'gobbledygook';

If the current allocation of the structure EXAMPLE is the last
one (in the list) then the pointer NEXT must be a terminator -
if not then the pointer NEXT must always point to the next
element in the list.

The NULL built-in function in PL/I provides a convenient null
pointer value so this is normally used as a terminator.

Further elements in the list can be allocated easily like this:

ALLOCATE EXAMPLE SET (NEXT);
SPTR = NEXT;
NEXT = NULL();

This allocation can be continued (almost indefinitely). A map
of what you would get in storage is shown in Figure 1.

Note that there should always be one more element than the
number of data items, the last one (pointer set to NULL)
pointing to nowhere!

Retrieving data from a list

Retrieving data from a list is a simple matter of moving the
pointer upon which the structure is based (ie SPTR) along the
list of elements in internal storage.

In PL/I this is done using the PL/I composite symbol ->. This
should be read as 'qualified by' or 'points to'.

The following sample PL/I and pseudo-code illustrate how to
retrieve data from the list created in earlier examples.

SPTR = START_PTR;

DO WHILE (SPTR not equal to NULL);
   ...
   Access the data here!
   ...
   SPTR = SPTR -> NEXT;
END;

Deleting and inserting elements

Elements can be removed from a list by using the PL/I FREE
command. There are two methods we can use. The code shown
below would remove (or delete) the last (or latest) element in
our list:

FREE EXAMPLE;

whereas this code would remove (or delete) the element
EXAMPLE that was pointed to by the pointer SPTR (ie the
current element).

FREE SPTR -> EXAMPLE;

Elements can easily be inserted in a list by allocating another
datum and juggling the NEXT pointers of the elements around
it to re-order the list.

More complex lists

So far we have only seen an example of how to assign data into
a simple form of list, called a uni-directional list or a one-
directional chain. This is where each element points to the next
and so on, except the last element which points to a terminator.
Much more complex chains can easily be created to give even
greater flexibility when storing and retrieving data.

Figure 2 shows an example of a bi-directional list. Here, each
element has two pointers, one pointing forward (FPTR) to the
next element and the other pointing backwards (BPTR) to the
previous element. Note that in this list there are two
terminators, one in the last element (in a forwards motion) and
one in the first element (ie going backwards).

Operations of a list

A list is characterized by the operations that can be performed
upon it. These are:

o      Find the position and value of the first element
o      Find the next element (sometimes also the previous element)
o      Insert an element
o      Delete an element
o      Find a specific element
o      Output the list elements in order
o      Create an empty list.


Stacks

A stack, like a list, is also a type of data structure and is used
in a program in much the same way (ie as temporary storage).
Data items are always added to the top of a stack and also
removed from the top. The last datum in is the first datum out
(LIFO). A LIFO stack can be thought of as a pack of cards on
a table where cards are either added or removed from the top.

Stack handling

Stack handling consists of:

1      The operation of placing an item on a stack, often called
      'push'.

2      The operation of removing an item from a stack, often
      called 'pop'.

Hence we get the names 'push-down stack' and/or 'pop-up
stack'.

PL/I implements stacks in two ways. Recursive procedures,
like those below, stack automatic variables to protect them
from change by other  activations (of that procedure). This
LIFO arrangement allows only the most recent generation of an
automatic variable (ie the one on top!) to be referenced.

WOTSIT: PROCEDURE RECURSIVE;
     ...
     DCL EXAMPLE AUTOMATIC FIXED DEC (7);
     ...
END WOTSIT;

However, in PL/I by far the most flexible way to handle stacks
is by using CONTROLLED storage and the ALLOCATE and
FREE commands. The best way to demonstrate this is by
coding an example.

Say we wished to read in a file containing parameter cards and
we didn't know how many (or how few) records there could
be. We could either guess (or make a rough estimate) and
declare an array with that many elements like this:

DECLARE ARRAY (99) CHAR (80);

or we could use a push-down stack like this:

DECLARE CARD CONTROLLED;

READ FILE (PARM) INTO (INPARM);
DO WHILE (...);
   ALLOCATE CARD CHAR (80);
   CARD = INPARM;
   READ FILE (PARM) INTO (INPARM);
END;

The declaration on the first line of the above example gives us
some controlled storage in a variable called CARD. We can
then assign any records we have read in from the parameter file
to CARD and allocate more as necessary. This would give us
many generations of the variable CARD, each stacked on
another (ie a push-down stack).

We now need to allocate an array of the appropriate size. First
we need to find out how many parameter records we had read
in earlier. This could be done by placing a count in the DO
loop.

The following code uses the PL/I built-in function
ALLOCATION to find out how many data items we have in
our stack; it assigns this number into the variable 'K', declares
a controlled ARRAY, and then allocates it to the correct size.

DCL ALLOCATION BUILTIN;
K = ALLOCN (CARD);

DECLARE ARRAY (*) CHAR (80) CONTROLLED;
ALLOCATE ARRAY (K);

The following code wraps up our example by going through the
push-down stack, popping up each datum (by using the FREE
statement), and then assigning data across to our newly created
array.

DO J = 1 to K;
   ARRAY (J) = CARD;
   FREE CARD;
END;

Characteristics of a stack

As with lists, there are typical functions that can be performed
against stacks. They are described below together with their
implementation in PL/I.

o      A clear procedure which sets the state of the stack to
      'stack-is-empty' (use the PL/I FREE statement).

o      A 'stack-is-empty' function, which returns true when the
      stack is empty and returns false otherwise (the PL/I built-in
      function ALLOCN returns 0 when a stack is empty).

o      A 'stack-is-full' function, which returns true when the
      stack is full and returns false otherwise (no implementation
      in PL/I).

o      A push procedure (the PL/I ALLOCATE variable
      statement).

o      A pop procedure, which involves removing the top items
      from a stack, is sometimes split into two operations:
      -      pop, which merely deletes the top item from the stack
            (the PL/I FREE variable statement).
      -      top, which returns the top item from the stack without
            deleting it (no implementation in PL/I).


Technical Considerations

There are very few technical considerations that you need to
consider when using lists and stacks. However, for
performance reasons, when building large lists and stacks you
may wish to consider using the PLIXOPT statement as shown
below. Use the 'REPORT' option to get exact amounts for
isasize, isaincr, size, and incr.

DCL PLIXOPT STATIC EXTERNAL CHAR (50) INIT
     ('isasize,isaincr,HEAP(size,incr,ANYWHERE,KEEP)');

HEAP separates the structured (LIFO) acquisition and the
freeing of Dynamic Save Areas (DSAs) or stack space, from
the unstructured (random) acquisition and freeing of based or
controlled variables. This is a useful option to specify if you
are going to create large lists or stacks in your program(s).

If you run application programs above the 16-megabyte line on
a regular basis (the HEAP storage is able to reside above 16
megabytes as long as you don't specify the BELOW suboption
of HEAP) you can have, in principle, a vast 'LIST'.
Otherwise, the size of all the lists created by your program
would be restricted to what is left of 8 megabytes, shared with
all the other commitments of low storage including IMS or
CICS code and a lot of other stuff.

The PL/I Release 5 Programmers Guide contains some good
explanations about HEAP, the 16-megabyte line, and related
performance.


Summary

With list processing, collections of data can be indefinitely re-
ordered and extended (up to the region size limit) with minimal
data movement and with little or no loss of storage space.

Stacks can be particularly useful when you have to store a
variable amount of data and you don't know how many
occurrences there will be. Both stacks and lists come in handy
when reading a 'set' of input records that need processing and
you can't start any processing until you've reached the end of
the set.

Lists and stacks have many advantages to offer the
programmer, especially when using a powerful language like
PL/I. They can solve many problems confronting the
programmer and can offer a very fast and efficient way of
processing data.

Adrian Cotterill
Application Technology Manager
Intel Corporation (UK)                                          c Xephon 1992

