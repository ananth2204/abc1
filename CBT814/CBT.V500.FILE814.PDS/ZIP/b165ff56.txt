A utility to manage personal storage datasets

rexx01 - Main rexx program

/* rexx - rexx01 */
/* ***************************************************************** */
/* This rexx program manages personal storage datasets for converted */
/* VM CMS users.  The dataset first qualifier must be the user's     */
/* userid.  The second and third qualifiers can be anything.  The    */
/* fourth qualifier must be 'ps'.  The 'ps' is for personal storage  */
/* If the dataset has not been accessed after four hundred days, it  */
/* will be deleted.                                                  */
/* You can change the first qualifier to another userid, but you     */
/* can only browse, not edit, plus you must have racf authority.     */
/* ***************************************************************** */
/* Save the current pf settings */
address ispexec;
vget ' (zpfctl zpfset zpffmt)' profile;
gnzpfctl = zpfctl;
gnzpfset = zpfctl;
gnzpffmt = zpfctl;
vput ' (gnzpfctl gnzpfset gnzpffmt)' shared;
/* change the pf labels - CMS users don't know what up and down are */
vget ' (zpfl07 zpfl08)' profile;
gnzpfl07 =  zpfl07;
gnzpfl08 =  zpfl08;
vput ' (gnzpfl07 gnzpfl08)' shared;
zpfl07 = 'Backward';
zpfl08 = 'Forward';
vput ' (zpfl07 zpfl08)' profile;
p = userid();                    /* The default prefix    */
call create_table;               /* open up housekeeping  */
/* main routine */
pfkey = '';
do until (pfkey = 'PF03');
     zpfctl = 'ON';
     zpfset = 'ALT';
     zpffmt = 'SIX';
     vput ' (zpfctl zpfset zpffmt)' profile;
     'tbdispl' tbdsn 'panel(panel01)' cursor csrrow,
          'autosel(no) position(crp)';
     if rc > 8 then do;
          say 'rc=' || rc;
          say 'tbdispl failed rc=' || rc ' table name=' || tbdsn;
          signal exit;
          end;
     errmsg = '';
     if length(pcmd) > 0 then do;
          call process_pcmd;
          end;
     if ztdsels > 0 then
          call process_input;
     if pfkey = 'PF15' then
          pfkey = 'PF03';
     end;
/* program exit */
exit:
     control errors return;
     tbend tbdsn;                     /* delete table */
     control errors cancel;
     vget ' (gnzpfctl gnzpfset gnzpffmt)' shared;
     zpfctl = qnzpfctl;
     zpfset = qnzpfset;
     zpffmt = qnzpffmt;
     vput ' (zpfctl zpfset zpffmt)' profile;
     vget ' (gnzpfl07 gnzpfl08)' shared;
     zpfl07 = gnzpfl07;
     zpfl08 = gnzpfl08;
     vput ' (zpfl07 zpfl08)' profile;
exit;                            /* end of rexx */
/* this creates the table used by ispf */
create_table:
     tbdsn = 'qcldsn00';
     vget ' (zsplit)' shared;
     if zsplit = 'YES' then do;
          vget ' (zscreen)' shared;
          tbdsn = 'qcldsn0' || zscreen;
          if zscreen = 4 then do;
               say 'too many logical screens and tables saved';
               signal exit;
               end;
          end;
     control errors return;
     tbopen tbdsn;
     select;
          when rc = 0  then return; /* table already exists */
          when rc = 8  then nop;       /* table not found */
          otherwise do;
               say 'Table' tbdsn 'access already by logical screen';
               signal exit;
               end;
          end;
     control errors cancel;
     qclpref = '';
     qcldsn1 = '';
     qcldsn2 = '';
     qcldsn = '';
     cmd = ' ';
     msg = ' ';
     qdate = ' ';
     cursor =  'cursor( )';
     csrrow = 'csrrow(1)';
     'tbcreate' tbdsn ,
          'names(qclpref qcldsn1 qcldsn2 qcldsn cmd msg qdate)' ,
          'nowrite share';
     address ispexec;
     "select cmd(ICQGCL00 prefix(" p ") exact(n) table(" tbdsn ")";
     if rc > 0 then do;
          errmsg = 'No files found';
          return;
          end;
     /* delete files from table that we dont want to display */
     tbtop tbdsn;
     if substr(p,1,1) = 'U' then do;
          do forever;
               tbskip tbdsn;
               if rc > 0 then leave;
               dummy = translate(qcldsn,' ','.');
               parse var dummy . . . forth_qual .
               parse var dummy . second_qual . forth_qual .
               if forth_qual  = 'PS' | ,
                  second_qual = 'TEXT' then nop;
                    else tbdelete tbdsn;
               end;
          end;
     tbtop tbdsn;
return;
/* process the pcmds */
process_pcmd:
     parse upper var pcmd pcmd1 pcmd2 .
     pcmd1 = substr(pcmd1,1,1);
     select;
          when (pcmd1 = 'B') then do;
               tbbottom tbdsn;
               end;
          when (pcmd1 = 'C') then do;
               tbend tbdsn;
               pfkey = 'PF03';
               end;
          when (pcmd1 = 'L') then do;
               call locate_rtn;
               end;
          when(pcmd1 = 'P') then do;
               call prefix_rtn;
               end;
          when(pcmd1 = 'R') then do;    /* refresh the screen */
               tbend tbdsn;
               call create_table;
               end;
          when(pcmd1 = 'S') then do;
               call sort_rtn;
               end;
          when(pcmd1 = 'TOP') then do;
               tbtop tbdsn;
               end;
          otherwise;
               nop;
          end;
return;
/* locate routine */
locate_rtn:
     tbtop tbdsn;
     tbvclear tbdsn;
     qcldsn1 = pcmd2
     'tbsarg' tbdsn 'next namecond(qcldsn1,eq)';
     'tbscan' tbdsn 'noread';
     if rc > 0 then do;
          tbvclear tbdsn;
          qcldsn2 = pcmd2
          'tbsarg' tbdsn 'next namecond(qcldsn2,eq)';
          'tbscan' tbdsn 'noread';
          if rc > 0 then errmsg = 'Target not found';
          end;
return;
/* prefix routine - this routine will allow the user to change the */
/* first qualifier to their userid or another user userid.         */
/* Anything else, the prefix will be changed to userid().          */
prefix_rtn:
     select;
          when length(pcmd2) = 0 then do;
               pcmd2 = userid();
               end;
          /* all corporate userids begin with 'u' */
          when substr(pcmd2,1,1) ^= 'U' then do;
               pcmd2 = userid();
               end;
          otherwise;
               nop;
          end;
     if pcmd2 = p then nop; /* why recreate table if already there? */
     else do;
          p = pcmd2;
          tbend tbdsn;
          call create_table;
          end;
return;
/* sort routine */
sort_rtn:
select;
     when pcmd2 = 'FNAME' then
          'tbsort' tbdsn 'fields(qcldsn1,C,A)';
     when pcmd2 = 'FTYPE' then
          'tbsort' tbdsn 'fields(qcldsn2,C,A)';
     when pcmd2 = 'DATE' then do;
          tbend  tbdsn;
          call create_table;
          tbtop  tbdsn;
          tbskip tbdsn;
          do until (rc > 0);
               tbget tbdsn;
               dsn = "'" || qcldsn || "'";
               address tso;
               x = listdsi(dsn norecall directory);
               if sysreason = 0 then;
                    qdate = substr(sysrefdate,3,6);
               if sysreason = 9 then;
                    qdate = 'Migrat';
               if sysrefdate = 0 then;
                    qdate = 'empty';
               address ispexec;
               tbput tbdsn;
               tbskip tbdsn;
               end;
          'tbsort' tbdsn 'fields(qdate,C,D)';
          end;
     otherwise;
          'tbsort' tbdsn 'fields(qcldsn1,C,A,qcldsn2,C,A)';
     end;
return;
/* process dataset commands */
process_input:
     cursor = 'cursor( )';
     csrrow = 'csrrow(1)';
     do while ztdsels > 0;
     cmd = substr(cmd,1,1);
          select;
              when (cmd = 'B') then;
                  call browse_rtn;
              when (cmd = 'C') then;
                  call copy_rtn;
              when (cmd = 'E') then;
                  call edit_rtn;
              when (cmd = 'D') then;
                  call delete_rtn;
              when (cmd = 'H') then;
                  call hardcopy_rtn;
              when (cmd = 'I') then;
                  call info_rtn;
              when (cmd = 'R') then;
                  call rename_rtn;
              when (cmd = 'P') then;
                  call protect_rtn;
              otherwise do;
                  msg = 'Try using the PF1 for help';
                  cmd = '';
                  tbput tbdsn;
                  end;
              end;
          /* get next row if more than one selected */
          if ztdsels > 1 then
               'tbdispl' tbdsn 'position(crp)';
          else
               ztdsels = 0;
     end;  /* end do while */
     /* position the table as the user last saw it */
     'tbtop' tbdsn;
     'tbskip' tbdsn 'number('ztdtop')';
return;
/* This checks to make sure that the 1st qualifer */
/* is the userid and the 4th qualifer is 'PS'     */
is_it_ok_dsn:
     xrc = 0;
     dsn = translate(qcldsn,' ','.');
     parse var dsn user . . type .
     if type = 'PS' then xrc = 0;
          else xrc = 8;
     if user ^= userid() then xrc = 8;
return xrc;
/* browse routine */
browse_rtn:
     cmd = '';
     msg = 'browsed';
     dsn = "'" || qcldsn || "'";
     control display save;
     control errors return;
     'browse dataset(' dsn ')';
     lrc = rc;
     control errors cancel;
     control display restore;
     if lrc > 0 then
         msg = zerrsm;
     tbput tbdsn;
     pfkey = '';
return;
/* copy routine - allow users to copy other users' datasets */
copy_rtn:
     cmd = '';
     call is_it_ok_dsn;
     if xrc > 0 then do;
          msg = 'wrong type of dataset';
          tbput tbdsn;
          return;
          end;
     save_msg_setting = msg();
     dummy = msg("off");
     zpfctl = 'OFF';
     vput ' (zpfctl)' profile;
     'addpop poploc(pcmd)';
     zwinttl = qcldsn;
     'display panel(panel07)';
     dsn   = "'" || qcldsn || "'";
     todsn = "'" || userid() || "." || fname || "." || ftype|| ".PS'";
     address tso;
     x = listdsi(dsn norecall);
     lrc = sysreason;
     select;
          when fname = '' & ftype = '' then do;
               msg = 'not copied';
               end;
          when sysused = 0 then do;
               msg = 'Cannot copy empty dataset';
               end;
          when lrc = 0 then do;
               x = listdsi(todsn norecall);
               if sysreason = 0 then do;
                    address ispexec;
                    'addpop poploc(pcmd)';
                    zwinttl = todsn;
                    'display panel(panel08)';
                    rempop;
                    end;
               if s = 'Y' | sysreason = 5 then do;
                    address tso;
                    call alloc_rtn;
                    select;
                         when result = 0  then msg = 'Copy Successful';
                         when result = 4  then msg = 'Copy Successful';
                         otherwise msg = 'copy failed rc=' || rc;
                         end;
                    end;
               if s = 'N' | s = '' then msg = 'not copied';
               end;
          when lrc = 9 then do;
               msg = 'not copied - migrated';
               end;
          otherwise do;
               msg = 'copy failed - sysreason=' || sysreason;
               end;
          end;
     address ispexec;
     dummy = msg(save_msg_setting);
     zpfctl = 'ON';
     vput ' (zpfctl)' profile;
     rempop;
     tbput tbdsn;
     pfkey = '';
return;
/* edit routine */
edit_rtn:
     cmd = '';
     call is_it_ok_dsn;
     if xrc > 0 then do;
          msg = 'wrong type of dataset';
          tbput tbdsn;
          return;
          end;
     dsn = "'" || qcldsn || "'";
     control errors return;
     control display save;
     'edit dataset(' || dsn || ')';
     lrc = rc;
     control display restore;
     control errors cancel;
     if lrc = 0 then msg = 'Changes saved';
     if lrc = 4 then msg = 'No changes saved';
     if lrc > 4 then msg = zerrsm;
     tbput tbdsn;
     pfkey = '';
return;
/* delete routine */
delete_rtn:
     cmd = '';
     call is_it_ok_dsn;
     if xrc > 0 then do;
          msg = 'wrong type of dataset';
          tbput tbdsn;
          return;
          end;
     save_msg_setting = msg();
     dummy = msg("off");
     zpfctl = 'OFF';
     vput ' (zpfctl)' profile;
     'addpop poploc(pcmd)';
     zwinttl = qcldsn;
     'display panel(panel02)';
     rempop;
     if s = 'Y' then do;
          dsn = "'" || qcldsn || "'";
          address tso;
          'delete' dsn;
          msg = 'Deleted';
          'dd' dsn 'generic';    /* delete any racf definitions */
          end;
     else do;
          msg = 'dataset not deleted';
          end;
     dummy = msg(save_msg_setting);
     address ispexec;
     zpfctl = 'ON';
     vput ' (zpfctl)' profile;
     tbput tbdsn;
     pfkey = '';
return;
/* print printer routine */
hardcopy_rtn:
     cmd = '';
     dsn = "'" || qcldsn || "'";
     control display save;
     /* call you print routine from here */
     control display restore;
     select;
          when result = 0 then msg = 'print completed';
          when result = 4 then msg = 'print cancelled';
          otherwise msg = 'print failed. RC=' || result;
          end;
     tbput tbdsn;
     pfkey = '';
return;
/* display dataset information */
info_rtn:
     cmd = '';
     if msg = 'Deleted' | msg = 'Renamed' then do;
          tbput tbdsn;
          return;
          end;
     dsn = "'" || qcldsn || "'";
     address tso;
     x = listdsi(dsn norecall directory);
     if x = 4 then do;
          msg = 'Error Determining Unit Name';
          end;
     if sysreason = 0 then do;
          volume  = sysvolume;
          unit    = sysunit;
          dsorg   = sysdsorg;
          recfm   = sysrecfm;
          lrecl   = syslrecl;
          blksize = sysblksize;
          keylen  = syskeylen;
          alloc   = sysalloc;
          used    = sysused;
          primary = sysprimary;
          second  = sysseconds;
          units   = sysunits;
          extents = sysextents;
          create  = syscreate;
          refdate = sysrefdate;
          address ispexec;
          zpfctl = 'OFF';
          vput ' (zpfctl)' profile;
          'addpop poploc(pcmd)';
          zwinttl = qcldsn;
          'display panel(panel03)';
          rempop;
          msg = 'info';
          end;
     if sysreason = 9 then do;
          msg = 'Dataset has been migrated';
          end;
     address ispexec;
     zpfctl = 'ON';
     vput ' (zpfctl)' profile;
     tbput tbdsn;
     pfkey = '';
return;
/* rename the dataset routine */
rename_rtn:
     cmd = '';
     call is_it_ok_dsn;
     if xrc > 0 then do;
          msg = 'wrong type of dataset';
          tbput tbdsn;
          return;
          end;
     nfname = '';
     nftype = '';
     dsn = "'" || qcldsn || "'";
     control display save;
     address tso;
     dsinfo = listdsi(dsn norecall);
     fname = qcldsn1;
     ftype = qcldsn2;
     select;
          when sysreason = 0 then do;
               address ispexec;
               zpfctl = 'OFF';
               vput ' (zpfctl)' profile;
               'display panel(panel04)';
               if rc = 0 then do;
                    ndsn = nfname||'.'||nftype||'.PS';
                    address tso;
                    'rename' dsn','ndsn;
                    if rc = 0 then do;
                         save_msg_setting = msg();
                         dummy = msg(off);
                         'dd' dsn 'generic'; /* delete any racf defs */
                         dummy = msg(save_msg_setting);
                         msg = 'Renamed';
                         end;
                    else msg = 'Dataset not Renamed';
                    end;
               else msg = 'Dataset not Renamed';
               end;
          when sysreason = 5 then do;
               msg = 'Dataset not Cataloged';
               end;
          when sysreason = 9 then do;
               address ispexec;
               zpfctl = 'OFF';
               vput ' (zpfctl)' profile;
               'display panel(panel05)';
               if r = 'Y' then do;
                    msg = 'Dataset being Recalled';
                    address tso;
                    'hrecall' dsn;
                    end;
               else  msg = 'Dataset not Recalled';
               end;
          otherwise do;
               msg = 'An Error occurred during file processing';
               end;
          end;
     address ispexec;
     control display restore;
     zpfctl = 'ON';
     vput ' (zpfctl)' profile;
     tbput tbdsn;
     pfkey = '';
return;
/* racf protection routine */
protect_rtn:
     cmd = '';
     call is_it_ok_dsn;
     if xrc > 0 then do;
          msg = 'wrong type of dataset';
          tbput tbdsn;
          return;
          end;
     control display save;
     /* call you racf protection program here pass qcldsn as a parm */
     control display restore;
     msg = 'racf';
     address ispexec;
     tbput tbdsn;
return;
/* to copy a dataset I must allocate a new dataset */
alloc_rtn:
     recfm = '';
     x = listdsi(dsn);
     do x = 1 to length(sysrecfm);
           recfm = recfm || substr(sysrecfm,x,1) || ',';
           end;
     recfm = strip(recfm,t,',');
     "allocate dataset(" || todsn || ")" ,
          "space(" || sysprimary || ',' || sysseconds || ")" ,
          "lrecl(" || syslrecl || ")" ,
           sysunits ,
          "recfm(" || recfm || ")" ,
          "blksize(" || sysblksize || ")" ,
          "dsorg(" || sysdsorg || ")" ,
          "new";
     options = 'notrans ';
     if recfm = 'F,B,A' then options = options ]] 'preformat';
     "smcopy fds(" || dsn || ")" ,
          "tds(" || todsn || ")" options;
     return rc;

panel01 - Main display panel

)ATTR          /* panel01 */
  ^ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)
  $ TYPE(OUTPUT) INTENS(HIGH) COLOR(BLUE)
  # TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
  [ TYPE(OUTPUT) INTENS(HIGH) COLOR(PINK)
)BODY
%--------------------- Personal Storage Utility ------------------------------
%OPTION  ===> ^pcmd                +#errmsg                %SCROLL ===> _AMT
%Command  Name                                Message
)MODEL
^Z       ^Z                                  #Z                         [Z
)INIT
  &amt = PAGE
  &pcmd = ''
  &pfkey = ''
  &enter = ''
  &message = ''
  .help = panel06
  .zvars = '(cmd qcldsn msg qdate)'
)PROC
  IF(.PFKEY NE '')
       &PFKEY = .PFKEY
  IF(.RESP = END)
       &ENTER = END
)END

panel02 - Delete confirmation pop-up panel

)ATTR          /* panel02 */
  ^ TYPE(INPUT) INTENS(HIGH) CAPS(ON)
)BODY WINDOW(40,2)
%
%     Delete Confirmation(Y/N) ^S%
)INIT
  &S = ''
  &enter = ''
)PROC
  ver (&S,nb,LIST,Y,N)
  IF(.RESP = END)
       &ENTER = END
)END

panel03 - Information pop-up panel

)ATTR          /* panel03 */
  _ TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
)BODY WINDOW(50,10)
%
%Volume  _volume      %Allocation     _alloc
%Unit    _unit        %Used           _used
%DSORG   _dsorg       %Primary        _primary
%RECFM   _recfm       %Secondary      _second
%LRECL   _lrecl       %Space Units    _units
%BLKSIZE _blksize     %Extents        _extents
%KEYLEN  _keylen      %Creation Date  _create
%                     %Last Reference _refdate
%Press enter to continue
)INIT
  &enter = ''
)PROC
  IF(.RESP = END)
       &ENTER = END
)END

panel04 - Rename Dataset Panel

)ATTR          /* panel04 */
  ^ TYPE(INPUT) INTENS(NON)
  $ TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT) PAD('')
)BODY
%----------------------------  RENAME DATASET  ---------------------------------
%COMMAND ===>_zcmd+ $msg                                                       +
%
%
%
%
%
+
+ISPF LIBRARY:
+   File Name%===>$fname   +     New File Name%===>_nfname  +
+   File Type%===>$ftype   +     New File Type%===>_nftype  +
+
+
+
+
+
+
)INIT
  &zcmd = ''
  &enter = ''
  &nfname = .cursor
  .help = panel06
)PROC
  ver (&nfname,dsname)
  ver (&nftype,dsname)
  IF(.RESP = END)
       &ENTER = END
)END

panel05 - If the RENAMED dataset is to be migrated

)ATTR          /* panel05 */
  ^ TYPE(INPUT) INTENS(NON)
)BODY
%----------------------------  MIGRATION PANEL  --------------------------------
%COMMAND ===>_zcmd+
+                                                                              +
+      The dataset that you want to rename is migrated. If you want to
+      recall the the dataset now answer "Y" to%RECALL DATASET+and
+      press%ENTER.+This could take a few moments to complete. After
+      the dataset is recalled you will have to execute the rename
+      command again. If you do not want to recall the dataset now,
+      answer "N" to%RECALL DATASET+and press%ENTER.
+
+
+
+
+                            RECALL DATASET? ===>_r+
+
+
+
+
+
)INIT
  &enter = ''
  &r = .cursor
  .help = panel06
)PROC
  ver (&r,nb,LIST,Y,y,N,n)
  IF(.RESP NE END)
       &ENTER = END
)END

panel06 - Help

)ATTR          /* panel06 */
 % TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(YELLOW)
 # TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(RED)
 $ TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(WHITE)
 + TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(BLUE)
 [ TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(PINK)
)BODY
[TSO Personal Storage Help Screen
$Options ===>     $Descriptions
+Top       #T     %Scrolls to the top of the table.
+Bot       #B     %Scrolls to the bottom of the table.
+Cancel    #C     %Exit the personal storage panel.  The same as PF03.
+Locate    #L     %Locates the 2nd or 3rd qualifier in a dataset.
+Prefix    #P     %Changes the 1st qualifier.
+Sort      #S     %Type in Sort Fname, Sort Ftype or Sort Date.
$Commands
+Browse    #B     %Browses the dataset.
+Copy      #C     %Copies a dataset.
+Delete    #D     %Deletes the dataset.  User will be prompted for a delete
+                 %confirmation message.  It will be a yes or no response.
+Edit      #E     %Edits the dataset.  To Save any Changes, just press PF3.
                  %To quit, or not save any changes, type in CANCEL.
+Hardcopy  #H     %Prints a copy of the dataset.
+Info      #I     %Displays information on the dataset.
+Protect   #P     %Displays RACF Panel to secure personal storage.
+Rename    #R     %Renames the dataset to a new name.
+Press$PF3+to Exit
)INIT
  &enter = ''
)PROC
  IF(.RESP = END)
       &ENTER = END
)END

panel07 - Copyfile panel

)ATTR          /* panel07 */
  ^ TYPE(INPUT) INTENS(HIGH) CAPS(ON)
)BODY WINDOW(40,5)
% Copyfile:%
%
%      File name ^fname   %
%      File type ^ftype   %
%
)INIT
  &fname = ''
  &ftype = ''
  &enter = ''
)PROC
  ver (&fname,dsname)
  ver (&ftype,dsname)
  ver (&fname,nb)
  ver (&ftype,nb)
  IF(.RESP = END)
       &ENTER = END
)END

panel08 - copyfile confirmation

)ATTR          /* panel08 */
  ^ TYPE(INPUT) INTENS(HIGH) CAPS(ON)
)BODY WINDOW(40,4)
%
%Dataset already exists.
%Do you want to replace this? (Y/N) ^s %
)INIT
  &s = ''
)PROC
  IF(.RESP = END)
       &ENTER = END
)END


                                                                               c Reserved 1995

