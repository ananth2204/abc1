System Determined Blocksizes

IBM has provided a facility known as System Determined
Blocksize (SDB) with DFP 3.1 (plus PTF) and above, which
can significantly enhance performance and capacity
requirements for poorly blocked datasets.  When used, SDB
will attempt to block a dataset at an optimal factor based on the
device type and dataset attributes.  If SDB is used, the system
marks the dataset as 'reblockable' so that future movement of
the data to any other device type would allow the dataset again
to take on the most efficient block size available.  Generally,
the system will assign a value that is as near as possible to half
track blocking.  To invoke SDB, the BLKSIZE value must be
0 or null and the LRECL, DSORG, and RECFM must be
known.

Implementing SDB as described above requires most shops to
make many changes to existing JCL because BLKSIZE is
coded quite frequently.  That effort can prove quite time-
consuming and involve a number of people who are already
saddled with more than enough work.  In an attempt to
automate the process, I decided to exploit the capabilities of the
IFGOEXOB OPEN exit.  By using this exit, it is possible to
zero out the BLKSIZE for selected datasets at open time even
if it has already been coded.  In most cases, this causes the
system to drive the SDB logic.

Since SDB is not tolerated by some programs and utilities, it is
necessary to make the code somewhat selective.  Even then,
when the code is implemented, it will probably cause a few
abends until the jobs unable to tolerate a change in dataset
BLKSIZE are identified.  To make the code very selective
during initial testing, a check is provided so only specific job
names will be allowed to have their BLKSIZE zeroed out.
Using these job names, various processes in the environment
can be tested to see how they react to SDB.  After testing, this
code is removed so that all jobs get selected except for those in
the exemption table.  By restricting datasets to the most likely
SDB candidates, the possibility for abends is significantly
minimized.  Basic checking applied to a dataset before
BLKSIZE is zeroed out includes:

o      Must be open for output
o      Can't use EXCP
o      Must have a blocked RECFM
o      Must have a DSORG of PS or PO
o      Must be open for output
o      If the dataset is on tape, it must be labelled
o      Can't be a system (ie SYS1) dataset
o      The job name or DD must not be in the list of excludes.

A bypass is provided for any job name containing the special
character '$'.  This allows jobs to be restarted quickly by
simply changing the name.  If you have a product available to
zap and page-fix LPA modules, a byte is provided to turn off
the exit by zapping it from 00 to FF.  A zap can also be applied
to the exclude tables to add excluded job and DD names
dynamically.  One known utility which does not tolerate SDB
is the linkage editor.  The DD name exclude table is used to
avoid problems with it by specifying SYSLIN and
SYSPUNCH.

Code for IFGOEXOB must be installed as part of the SVC 19
(IGC0001I) load module in LPALIB.  Local conventions for
implementing such an exit using SMP/E should be followed to
install the code.  At the time I installed the code, it was
necessary to put on a couple of additional PTFs to force the
system to redrive SDB logic in certain circumstances.  Even
with these PTFs in place, IEBCOPY, ICEMAN
(SYNCSORT), and TSO ALLOCATE were unable to take
advantage of the OPEN exit because of their method of
manipulating datasets.  It is possible that some isolated jobs
will require enough additional virtual storage with the increased
buffer sizes to cause a region limit abend.  If you have an
IEFUSI exit in place to raise the region request or region
requests are already substantial, it shouldn't be a problem.  If it
does occur, a quick change to the job or step REGION
parameter will fix the problem.  IFGOEXOB has the potential
to significantly reduce run times and DASD usage for
inefficiently blocked applications.  However, the impact of
potential abends must be understood and communicated prior
to its implementation.

IFGOEXOB TITLE 'DCB OPEN EXIT'
*  IFGOEXOB IS THE SYSTEM DCB OPEN EXIT.  AS CODED HERE, ITS PURPOSE IS *  TO FORCE BLKSIZE TO ZERO FOR SELECTED DATASETS SO SYSTEM DETERMINED
*  BLOCKSIZE LOGIC IS DRIVEN.
IFGOEXOB CSECT
         SAVE  (14,12)             HOUSEKEEPING
         LR    R12,R15
         USING IFGOEXOB,R12
         CLI   TURNOFF,X'FF'       ALLOW FOR THIS EXIT
         BE    EXIT                  TO BE ZAPPED ON/OFF
         LR    R11,R1              ADDRESS PARM LIST
         USING OIEXL,R11
         TM    OIEXOOPT,X'0F'      OPEN FOR OUTPUT?
         BO    OUTPUTOK            CONTINUE IF OPEN OUTPUT
         B     EXIT                NOT OPEN OUTPUT, GET OUT
OUTPUTOK L     R10,OIEXPDCB        ADDRESS PROTECTED DCB
         USING IHADCB,R10
         TM    DCBMACRF,DCBMRECP   EXCP?
         BO    EXIT                IF EXCP, GET OUT
         TM    DCBRECFM,DCBRECBR   BLOCKED?
         BZ    EXIT                IF NOT BLOCKED, GET OUT
         TM    DCBDSRG1,DCBDSGPS+DCBDSGP0  DSORG PS OR PO?
         BZ    EXIT                IF NOT PS OR PO, GET OUT
         L     R9,OIEXUCB          ADDRESS UCB
         LTR   R9,R9               CHECK FOR VALID UCB
         BZ    EXIT                IF NONE, GET OUT
         USING UCBOB,R9
         L     R8,OIEXJFCB         ADDRESS JFCB
         USING INFMJFCB,R8
         TM    UCBDVCLS,UCB3DACC   DISK DEVICE?
         BO    DEVICEOK            IF DISK, SKIP LABELED CHECK
         TM    UCBDVCLS,UCB3TAPE   TAPE DEVICE?
         BZ    EXIT                IF NOT TAPE OR DISK, GET OUT
         TM    JFCBLTYP,JFCSL      LABELED TAPE?
         BZ    EXIT                IF NOT LABELED, GET OUT
DEVICEOK TM    JFCBIND2,JFCNEW     IS THIS A NEW DATASET?
         BO    DISPOK              CONTINUE IF NEW DATASET
         B     EXIT                NOT NEW, GET OUT
DISPOK   CLC   JFCBDSNM(5),=C'SYS1.' IS THIS A SYSTEM DATASET?
         BE    EXIT                IF SYSTEM DSN, GET OUT
*   FOLLOWING CODE WOULD BE REMOVED AFTER TESTING
         L     R7,16               CVT
         L     R7,0(R7)            TCB WORDS
         L     R7,4(R7)            TCB
         L     R7,12(R7)           TIOT
         USING TIOT1,R7            ADDRESS TIOT
         CLC   TIOCNJOB(6),=C'SDBJOB' CHECK FOR AN SDB JOB NAME
         BE    SDBJOBOK            AND CONTINUE IF FOUND
         CLC   TIOCNJOB(7),=C'TESTJOB' CHECK FOR AN SDB JOB NAME
         BE    SDBJOBOK            AND CONTINUE IF FOUND
         B     EXIT                MUST NOT BE AN SDB JOB
*   PREVIOUS CODE WOULD BE REMOVED AFTER TESTING
SDBJOBOK LA    R3,NOSDBJOB         ADDRESS NO SDB JOBS TABLE
         LA    R2,TIOCNJOB+3       ADDRESS 4TH BYTE OF JOB NAME
         LA    R4,TIOCNJOB+8       ADDRESS END OF JOB NAME
$LOOP    CLI   0(R2),C'$'          IS THIS A $ JOB?
         BE    EXIT                IF YES, GET OUT
         LA    R2,1(R2)            STEP TO NEXT CHARACTER
         CR    R2,R4               AT END?
         BL    $LOOP               IF NOT, GO CHECK NEXT CHARACTER
JOBLOOP  CLC   TIOCNJOB(8),0(R3)   IS THIS A NOSDB JOB?
         BE    EXIT                IF YES GET OUT
         CLC   0(,R3),=C'FF'       END OF TABLE?
         BE    JOBOK               IF YES, CONTINUE ON
         LA    R3,8(R3)            POINT TO NEXT TABLE ENTRY
         B     JOBLOOP             GO CHECK IT
         DROP  R7
JOBOK    L     R7,OIEXTIOT         ADDRESS TIOT ENTRY
         USING TIOENTRY,R7
         LA    R3,NOSDBDD          ADDRESS NO SDB DD TABLE
DDLOOP   CLC   TIOEDDNM(8),0(R3)   IS THIS A NOSDB DD?
         BE    EXIT                IF YES, GET OUT
         CLC   0(,R3),=C'FF'       END OF TABLE?
         BE    DDOK                IF YES CONTINUE ON
         LA    R3,8(R3)            POINT TO NEXT TABLE ENTRY
         B     DDLOOP              GO CHECK IT
DDOK     LH    R1,ZEROBLK          LOAD A ZERO
         STH   R1,DCBBLKSI         SET BLKSIZE=0
         L     R10,OIEXUDCB        ADDRESS USER'S DCB
         MODESET KEYADDR=OIEXUKEY,WORKREG=2   GET INTO USER'S KEY
         STH   R1,DCBBLKSI         SET NEW BLKSIZE
         MODESET EXTKEY=ZERO       BACK TO KEY ZERO
EXIT     SLR   R15,R15             JFCB NOT MODIFIED SO ZERO RC
         RETURN (14,12),,RC=(15)   RETURN
ZEROBLK  DC    H'0'
SHOWDDS  DC    CL24'DD EXCLUDE TABLE FOLLOWS'
NOSDBDD  DS    0F
         DC    CL8'SYSLIN  '
         DC    CL8'SYSPUNCH'
         DC    CL8'FF      '
         DC    CL8'FF      '
         DC    CL8'FF      '
SHOWJOBS DC    CL25'JOB EXCLUDE TABLE FOLLOWS'
NOSDBJOB DS    0F
         DC    CL8'PRODJOB '
         DC    CL8'FF      '
         DC    CL8'FF      '
         DC    CL8'FF      '
         DC    CL8'FF      '
SHOWZAP  DC    CL32'EXIT SWITCH FOLLOWS 00=ON FF=OFF'
TURNOFF  DC    X'00'
         LTORG
         IECOIEXL
         DCBD  DSORG=(PS,PO),DEVD=(DA,TA)
UCB      DSECT
         IEFUCBOB
TIOT     DSECT
         IEFTIOT1
JFCB     DSECT
         IEFJFCBN
         END


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                         c Xephon 1991

