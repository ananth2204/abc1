Dynamically loading SVC routines

In the past, an IPL and possibly a rebuilding of the LPA were
required to incorporate SVC routines into the operating system
before they could be used or referenced for testing. However, it
is impractical to keep IPLing the system while trying to
develop a new SVC or modify an existing one. Every time an
error is discovered you would have to re-link the SVC and IPL
the system in order to test it again.

However, there is a way of dynamically adding a new SVC or
replacing an existing one in the operating system without
having to IPL. In MVS/XA and MVS/ESA this can be done by
issuing the SVCUPDTE macro instruction to update the SVC
table, which is stored in the page-protected section located
above the 16-megabyte line of the nucleus.

The following program can be executed via JCL with
parameters specifying the SVC number and the member name
of an SVC that exists in an authorized PDS pointed to by the
DDNAME SVCPDS. The program requires APF authorization
and has been tested under MVS/ESA 4.2.2. It is invoked as
follows:

//JOBNAME JOB CLASS=A,REGION=4096K
//STEPNAME EXEC PGM=DYNAMSVC,PARM='nnn,xxxxxxxx'
//SVCPDS   DD DSN=SYS1.SVCLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=D

where nnn is a three-digit SVC number between 200 and 255,
and xxxxxxxx is the name of the SVC routine (1 to 8
characters).


DYNAMSVC ROUTINE

DYNAMSVC CSECT
* THIS ROUTINE DYNAMICALLY ADDS OR REPLACES AN SVC INTO THE OPERATING
* SYSTEM WITHOUT REQUIRING AN IPL.
         SAVE  (14,12)
         BASR  R12,0
         USING *,R12
         ST    R13,SAVEA+4
         LA    R13,SAVEA
*                 COPY PARMS FROM EXEC CARD
GETPARM  L     R1,0(0,R1)         GET ADDR OF JCL PARMS
         LH    R15,0(0,R1)        GET LEN  OF JCL PARMS
         LTR   R15,R15            ANY PARMS?
         BZ    NOPARM             NO PARMS PASSED
         BCTR  R15,0              DECREMENT PARM FOR LEN FOR EX INST
         EX    R15,MOVEPARM       MOVE PARMS
         B     CHECKSVC           PRESS ON
MOVEPARM MVC   SVCPARM(0),2(R1)   MOVE INST FOR PARMS
NOPARM   WTO   '* NO SVC PARMS PASSED, PROGRAM TERMINATED *',ROUTCDE=11
         ABEND 301
*       MAKE SURE THAT SVC NUMBER IS BETWEEN 200 AND 255
CHECKSVC LA    R0,3               SET MAX DIGITS FOR SVC NUMBER
         LA    R3,SVCNO           POINT TO SVC NUMBER
NXTDIGIT CLI   0(R3),C'0'         IS IT LESS THAN 0?
         BL    BADSVCNO           IF SO, SVC NUMBER IS BAD
         CLI   0(R3),C'9'         IS IT GREATER THAN 9?
         BH    BADSVCNO           IF SO, SVC NUMBER IS BAD
         LA    R3,1(0,R3)         INCREMENT TO NEXT DIGIT
         BCT   R0,NXTDIGIT        CONTINUE CHECKING
         CLC   SVCNO,=C'200'      IS SVCNO LESS THAN 200?
         BL    BADSVCNO           IF SO, SVC NUMBER IS BAD
         CLC   SVCNO,=C'255'      IS SVCNO GREATER THAN 255
         BH    BADSVCNO           IF SO, SVC NUMBER IS BAD
         B     CNVTSVC            ELSE GO TO SVC CONVERSION ROUTINE
BADSVCNO WTO   '* INVALID SVC NUMBER SPECIFIED, PROGRAM TERMINATED  *',-
               ROUTCDE=11
         ABEND 302
*       CONVERT SVC NUMBER FROM DECIMAL TO BINARY
CNVTSVC  PACK  PKSVCNO,SVCNO      PACK SVCNO
         CVB   R3,PKSVCNO         CONVERT SVCNO TO BINARY
         ST    R3,SAVESVC         SAVE BINARY SVC NUMBER
*       GET INTO SUPERVISOR STATE / KEY 0, SO WE CAN EXECUTE:
*                      "SVCUPDTE MACRO"
SETMODE  MODESET MODE=SUP,KEY=ZERO
OPENPDS  OPEN  SVCPDS             OPEN PDS THAT HAS SVC ROUTINE
*      LOAD SVC INTO CSA FROM PDS POINTED TO BY SVCPDS DDNAME
LOADSVC  LOAD  EPLOC=SVCNAME,GLOBAL=(YES,P),DCB=SVCPDS,LSEARCH=YES
         ST    R0,SVCEP           SAVE SVC ENTRY POINT ADDR
CLOSEPDS CLOSE SVCPDS             CLOSE PDS THAT HAS SVC ROUTINE
*          UPDATE SCVTABLE WITH ENTRY POINT OF NEW SVC
UPDSVCTB L     R3,SVCEP           LOAD ENTRY POINT ADDR OF NEW SVC
         L     R4,SAVESVC         LOAD SAVED BINARY SVC NUMBER
         ENQ   (QNAME,RNAME,E,,SYSTEM)
         SVCUPDTE (R4),REPLACE,TYPE=3,EP=(R3)
         DEQ   (QNAME,RNAME,,SYSTEM)
         LTR   R15,R15            WAS SVC TABLE UPDATE SUCCESSFUL?
         BZ    FINISHED           IF SO, EXIT PROGRAM.
         WTO   '* ERROR UPDATING SVC TABLE, PROGRAM TERMINATED *'
         ABEND 303,DUMP
*                      EXIT PROGRAM
FINISHED L     R13,SAVEA+4
         RETURN (14,12),RC=0
*                      WORK AREAS
SAVEA    DS    18F
PKSVCNO  DS    D
SAVESVC  DS    F
SVCEP    DS    F
SVCPARM  DS    0CL12
SVCNO    DS    CL3
         DS    CL1
SVCNAME  DC    CL8' '
QNAME    DC    CL8'SYSZSVC'        USED BY ENQ/DEQ MACROS
RNAME    DC    C'TABLE'                       "
*                      SVC PDS DCB (MUST BE AUTHORIZED)
SVCPDS   DCB   DSORG=PO,MACRF=R,DDNAME=SVCPDS
*        REQUIRED DSECTS (FOUND IN SYS1.MACLIB)
         CVT DSECT=YES,LIST=NO    GENERATES CSECT REQUIRED BY SVCUPDTE
         END


Jeffrey A Nix
Systems Programmer
AutoZone Inc (USA)                                    c Xephon 1993

