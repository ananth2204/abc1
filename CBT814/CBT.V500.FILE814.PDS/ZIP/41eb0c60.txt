A replacement TSO LISTALC command

The TSO LISTALC command has been around about as long as
TSO itself. Its output is cumbersome and difficult on the eye. Also,
at times, it does not present enough information when a person is
performing problem diagnosis. I wrote an alternative to
LISTALC, called ALIST, many years ago and have recently
updated it with other diagnostic information. In addition to
displaying dataset names, volumes, DDNAMEs, dataset
organization, and disposition, the program interprets various flags
in the Dataset Association Block (DSAB). The flag fields follow
the dataset organization and are interpreted as follows:

     ISPPROF  PO  -------- SHRxVOLSER TSOUSER.ISPFPDF.PROFILE
                  ||||||||
                  |||||||*-JOBCAT/STEPCAT dataset (J)
                  ||||||*--dataset is a catalog   (C)
                  |||||*---VIO dataset            (V)
                  ||||*----dataset in-use         (I)
                  |||*-----convertible            (C)
                  ||*------dynamically converted  (D)
                  |*-------permanently allocated  (P)
                  *--------dynamically allocated  (D)

The letters in parentheses after the flag field descriptions will
appear in place of the dashes in the sample line to indicate that the
dataset whose name is displayed has that attribute. Note that the
dataset may have almost any combination of the various attributes.
A lower-case letter 'o' will appear between the disposition and
volume serial fields indicating that the DSAB open flag was also
found on. For DDNAMEs allocated to SYSOUT, ALIST will
display the JES-generated dataset name along with an eyecatcher
at the end of the dataset name showing the SYSOUT class used. It
should also be noted that this was originally written as a quick
and dirty replacement for LISTALC; as such, it uses the TPUT
macro rather than PUTLINE. Therefore, the output from the
command is not available to be trapped by the SYSOUTTRAP
feature of TSO. I leave it to the reader to handle this if necessary.
Some sample output is shown in Figure 1.

  SYSTERM  --- -P------ OLD *Temp* **Terminal**
  ISPPROF  PO  -P------ SHRoTSOVOL TSOUSER.ISPFPDF.PROFILE
  ISPTABL  --- -P------ SHR TSOVOL TSOUSER.ISPFPDF.PROFILE
  ISPMLIB  PO  -P------ SHRoTSOVOL TSOUSER.ISPMLIB
           PO  -P------ SHR MVS001 ISR.V3R3M0.ISRMENU
           PO  -P------ SHR MVS001 ISP.V3R3M0.ISPMENU
  ISPSLIB  PO  -P------ SHRoTSOVOL TSOUSER.ISPSLIB
           PO  -P------ SHR MVS001 ISR.V3R3M0.ISRSENU
           PO  -P------ SHR MVS001 ISP.V3R3M0.ISPSENU
  ISPLST1  PS  -P---V-- OLD *Temp* SYS93350.T081453.RA000.TSOUSER.R0000075
  ISPLST2  PS  -P---V-- OLD *Temp* SYS93350.T081453.RA000.TSOUSER.R0000076
  ISPLST3  PS  -P---V-- OLD *Temp* SYS93350.T081453.RA000.TSOUSER.R0000077
  ISPLST4  PS  -P---V-- OLD *Temp* SYS93350.T081453.RA000.TSOUSER.R0000078
  ISPTLIB  PO  -P------ SHRoTSOVOL TSOUSER.ISPFPDF.PROFILE
           PO  -P------ SHR MVS001 ISR.V3R3M0.ISRTENU
           PO  -P------ SHR MVS001 ISP.V3R3M0.ISPTENU
  SYSHELP  PO  -P------ SHRoMVS001 SYS1.HELP
           PO  -P------ SHRoMVS003 SYS2.HELP
  SYSPROC  PO  -P------ SHRoMVS005 TSOUSER.CLIST
           PO  -P------ SHR MVS004 SYS2.USER.CLIST
           PO  -P------ SHR MVS001 ISR.V3R3M0.ISRCLIB
  SYSEXEC  PO  -P------ SHRoTSOVOL TSOUSER.EXEC
           PO  -P------ SHR MVS004 SYS2.USER.EXEC
  ISPPLIB  PO  -P---V-- OLDo*Temp* SYS93350.T081443.RA000.TSOUSER.R0000002
           PO  -P------ SHR MVS001 ISR.V3R3M0.ISRPENU
           PO  -P------ SHR MVS001 ISP.V3R3M0.ISPPENU
  SYSPRINT PS  DP------ MOD *Temp* TSOUSER.TSOUSER.TSU02367.D0000103.?(Sysout=V)
  HASPINDX --- D--CI--- SHRoMVS001 ISF.HASPINDX
  SYS00154 --- D--CI--- SHRoSPOOL1 SYS1.HASPACE
  SYS00155 --- D--CI--- SHRoSPOOL2 SYS1.HASPACE
  SYS00156 --- D--CI--- SHRoSPOOL3 SYS1.HASPACE
  SYS00157 --- D--CI--- SHRoSPOOL4 SYS1.HASPACE

  Figure 1: Sample output

ALIST    CSECT                    ESTABLISH CSECT
         SAVE  (14,12),,ALIST-&SYSDATE
         YREGS                    PERFORM REGISTER EQUATES
         LR    R12,R15            LOAD R12 W/EPA ADDRESS
         USING ALIST,R12          ESTABLISH ADDRESSABLITY TO CSECT
         LA    R8,SAVEAREA        LOAD ADDR OF MY S/A
         ST    R8,8(R13)          ST MY S/A ADDR IN CALLER'S S/A
         ST    R13,4(R8)          ST CALLER'S S/A ADDR IN MY S/A
         LR    R13,R8             LOAD ADDR OF MY S/A IN R13
         L     R1,CVTPTR          LOAD R1 W/A(CVT)
         USING CVT,R1
         L     R1,CVTTCBP         LOAD R1 W/A(TCBWORDS)
         L     R1,4(R1)           LOAD R1 W/A(MY TCB)
         USING TCB,R1
         L     R1,TCBJSCB         LOAD R1 W/A(JSCB)
         USING IEZJSCB,R1
         ICM   R1,15,JSCDSABQ     LOAD R1 W/A(QDB), IF ANY
         BZ    END                NO, THEN EXIT
         ICM   R6,15,12(R1)       LOAD R6 W/A(DSABQ), IF ANY
         BZ    END                NO, THEN EXIT
         USING DSAB,R6
         SR    R2,R2              CLEAR R2 FOR IC
LOOP     LA    R1,DORG1           LOAD A(DSABORG1 FLAG TABLE)
         IC    R2,DSABORG1        GET DSABORG1 BYTE
ORG1L1   CLC   DORG1END(DORG1LEN),0(R1) END OF TABLE
         BE    ORG2L              YES, GO CHECK DSABORG2
         EX    R2,EXTM            ELSE, EXECUTE TM
         BNZ   ORG1L3             BITS ON, PICK UP VALUE
ORG1L2   LA    R1,DORG1LEN(,R1)   ELSE, BUMP TO NEXT ENTRY
         B     ORG1L1             GO CHECK ENTRY
ORG1L3   OC    DSORG,1(R1)        PUT VALUE IN OUTPUT LINE
         B     ORG1L2             GO BUMP TO NEXT ENTRY
ORG2L    LA    R1,DORG2           LOAD A(DSABORG2 FLAG TABLE)
         IC    R2,DSABORG2        GET DSABORG2 BYTE
ORG2L1   CLC   DORG2END(DORG2LEN),0(R1) END OF TABLE
         BE    FLG1L              YES, GO CHECK DSABFLG1
         EX    R2,EXTM            ELSE, EXECUTE TM
         BNZ   ORG1L3             BITS ON, PICK UP VALUE
ORG2L2   LA    R1,DORG2LEN(,R1)   ELSE, BUMP TO NEXT ENTRY
         B     ORG2L1             GO CHECK ENTRY
ORG2L3   OC    DSORG,1(R1)        PUT VALUE IN OUTPUT LINE
         B     ORG2L2             GO BUMP TO NEXT ENTRY
FLG1L    LA    R1,DFLG1           LOAD A(DSABFLG1 FLAG TABLE)
         IC    R2,DSABFLG1        GET DSABFLG1 BYTE
FLG1L1   CLC   DFLG1END(DFLG1LEN),0(R1) END OF TABLE
         BE    FLG3L              YES, GO CHECK DSABFLG3
         EX    R2,EXTM            ELSE, EXECUTE TM
         BNZ   FLG1L3             BITS ON, PICK UP VALUE
FLG1L2   LA    R1,DFLG1LEN(,R1)   ELSE, BUMP TO NEXT ENTRY
         B     FLG1L1             GO CHECK ENTRY
FLG1L3   OC    FLAGS,1(R1)        PUT VALUE IN OUTPUT LINE
         B     FLG1L2             GO BUMP TO NEXT ENTRY
FLG3L    LA    R1,DFLG3           LOAD A(DSABFLG3 FLAG TABLE)
         IC    R2,DSABFLG3        GET DSABFLG3 BYTE
FLG3L1   CLC   DFLG3END(DFLG3LEN),0(R1) END OF TABLE
         BE    CHECKDD            YES
         EX    R2,EXTM            EXECUTE TM
         BNZ   FLG3L3             BITS ON, PICK UP VALUE
FLG3L2   LA    R1,DFLG3LEN(,R1)   ELSE, BUMP TO NEXT ENTRY
         B     FLG3L1             GO CHECK ENTRY
FLG3L3   OC    FLAGS,1(R1)        PUT VALUE IN OUTPUT LINE
         B     FLG3L2             GO BUMP TO NEXT ENTRY
CHECKDD  LA    R1,FLAGS           LOAD A(FLAGS)
         LA    R2,L'FLAGS         LOAD LENGTH(FLAGS)
DASHLP1  CLI   0(R1),C' '         CHECK FOR BLANK FIELD
         BNE   DASHBMP1           NO, GO BUMP TO NEXT BYTE
         MVI   0(R1),C'-'         ELSE, FILL IT IN
DASHBMP1 LA    R1,1(,R1)          BUMP TO NEXT BYTE
         BCT   R2,DASHLP1         LOOP TO CHECK BYTE
         CLI   DSORG,C' '         WAS DSORG FILLED IN
         BNE   NODASH             YES, SKIP FILL
         MVC   DSORG,DASHES       ELSE, FILL IT IN W/DASHES
NODASH   L     R7,DSABTIOT        LOAD R7 W/A(TIOT ENTRY)
         USING TIOENTRY,R7
MOVEDDN  MVC   DDNAME,TIOEDDNM    MOVE DDNAME
         ICM   R8,7,TIOEJFCB      LOAD R8 W/A(JFCB)
         LA    R8,16(,R8)         BUMP PAST PREFIX
         USING JFCB,R8
MOVEDSN  CLI   JFCBDSNM,X'04'     IS IT FORMAT4.DSCB
         BNE   NORMDSN            NO, GO PROCESS NORMAL DSN
         MVC   DSN,FORMAT4K       ELSE, PUT SPECIAL NAME
         B     CKDISP             GO PROCESS DISP
NORMDSN  MVC   DSN,JFCBDSNM       MOVE NORMAL DSN
         TM    TIOELINK,TIOESYOT  IS IT A SYSOUT
         BZ    CKTERM             NO, GO CHECK FOR TERMINAL/SYSIN
         LA    R1,DSN             LOAD A(DSN)
         LA    R2,L'DSN           LOAD LENGTH(DSN)
ALP      CLI   0(R1),C' '         FIND END OF DSN
         BE    MVSYSCL            FOUND, GO MOVE SYSOUT ID
         LA    R1,1(,R1)          ELSE, BUMP TO NEXT BYTE
         BCT   R2,ALP             LOOP TO CHECK NEXT BYTE
MVSYSCL  MVC   0(SYSOUTLN,R1),SYSOUT MOVE SYSOUT ID
         ICM   R15,7,DSABSSVA     LOAD A(SIOT PREFIX)
         LA    R15,16(,R15)       LOAD A(SIOT)
         USING SIOT,R15
         MVC   8(1,R1),SCTOUTPN   MOVE SYSOUT CLASS
         MVC   VOL,SYSOUTK        MOVE SYSOUT ID TO VOL
         B     CKDISP             GO CHECK DISP
CKTERM   TM    TIOELINK,TIOTTERM  IS IT A TERMINAL
         BZ    CKPDS              NO, GO CHECK FOR PDS
         MVC   DSN,BLANKS         ELSE, CLEAR OUT RESIDUAL JFCBDSNM
         MVC   DSN(L'TERMK),TERMK SHOW DSN AS A TERMINAL
         B     CKDISP             GO CHECK DISP
CKPDS    TM    JFCBIND1,JFCPDS    IS IT A PDS
         BZ    CKDISP             NO, GO CHECK DISP
         LA    R1,DSN             LOAD A(DSN)
         LA    R2,L'DSN           LOAD LENGTH(DSN)
BLP      CLI   0(R1),C' '         FIND END OF DSN
         BE    MVMEM              FOUND, GO MOVE MEMBER NAME
         LA    R1,1(,R1)          ELSE, BUMP TO NEXT BYTE
         BCT   R2,BLP             LOOP TO CHECK NEXT BYTE
MVMEM    MVI   0(R1),C'('         MOVE START PAREN
         MVC   1(8,R1),JFCBELNM   MOVE MEMBER NAME
         LA    R1,1(,R1)          LOAD A(MEMBER NAME)
         LA    R2,L'JFCBELNM      LOAD LENGTH(MEMBER NAME)
CLP      CLI   0(R1),C' '         FIND END OF MEMBER NAME
         BE    MVPAREN            FOUND, GO MOVE END PAREN
         LA    R1,1(,R1)          ELSE, BUMP TO NEXT BYTE
         BCT   R2,CLP             LOOP TO CHECK NEXT BYTE
MVPAREN  MVI   0(R1),C')'         MOVE END PAREN
CKDISP   LA    R1,JIND2           LOAD A(JFCBIND2 FLAG TABLE)
         IC    R2,JFCBIND2        GET JFCBIND2 BYTE
IND2L1   CLC   JIND2END(JIND2LEN),0(R1) END OF TABLE
         BE    CKVOL              YES, GO CHECK VOL
         EX    R2,EXTM            ELSE, EXECUTE TM
         BNZ   IND2L3             BITS ON, PICK UP VALUE
IND2L2   LA    R1,JIND2LEN(,R1)   ELSE, BUMP TO NEXT ENTRY
         B     IND2L1             GO CHECK ENTRY
IND2L3   OC    DISP,1(R1)         PUT VALUE IN OUTPUT LINE
         TM    JFCBIND2,JFCTEMP   IS IT A TEMPORARY DATASET
         BZ    CKVOL              NO, GO CHECK VOL
         MVC   VOL,TMPK           ELSE SHOW TEMP IN VOL
CKVOL    CLC   VOL,BLANKS         WAS VOL ALREADY FILLED IN
         BNE   CKOPEN             YES, SKIP JFCB VOL INFO
         MVC   VOL,JFCBVOLS       ELSE, MOVE FIRST VOLSER TO VOL
CKOPEN   TM    DSABFLG2,DSABOPEN  IS DATASET OPEN
         BZ    DODISP             NO, GO DISPLAY MSG
         MVI   DISP+3,C'o'        ELSE, SHOW OPEN
DODISP   TPUT  MSG,MSGLEN         DISPLAY MSG
         MVC   MSG(MSGLEN),BLANKS CLEAR MSG
         L     R6,DSABFCHN        LOAD A(NEXT DSAB), IF ANY
         LTR   R6,R6              WAS THERE ANOTHER
         BNZ   LOOP               YES, GO PROCESS ENTRY
END      L     R13,SAVEAREA+4     RELOAD R13 W/ADDR OF CALLER'S S/A
         RETURN (14,12),RC=0      RETURN TO OS WITH RETCODE=0
SAVEAREA DC    18F'0'             O/S SAVE AREA
         LTORG                    GENERATE LITERAL POOL
EXTM     TM    0(R1),0            EXECUTED INSTRUCTION
MSG      DS    0CL(MSGEND-DDNAME) ----------------------------|
DDNAME   DC    CL8' ',C' '                                    |
DSORG    DC    CL3' ',C' '                                    |
FLAGS    DC    CL8' ',C' '                                    |
DISP     DC    CL3' ',C' '                                    |
VOL      DC    CL6' ',C' '                                    |
DSN      DC    CL44' ',C' '                                   |
MEM      DC    CL8' ',C' '                                    |
MSGEND   EQU   *                                              |
MSGLEN   EQU   *-MSG -----------------------------------------|
BLANKS   DC    CL(MSGLEN)' '
DASHES   DC    C'-----------'
FORMAT4K DC    CL44'----------------FORMAT4.DSCB----------------'
SYSOUT   DC    C'(Sysout='
SYSOUTCL DC    C'*)'
SYSOUTLN EQU   *-SYSOUT
TERMK    DC    C'**Terminal**'
SYSOUTK  DC    C'Sysout'
TMPK     DC    C'*Temp*'
******
DORG1    DC    AL1(DSABIS),C'IS '       ISAM
         DC    AL1(DSABPS),C'PS '       SEQUENTIAL
         DC    AL1(DSABDA),C'DA '       DIRECT ACCESS
         DC    AL1(DSABCX),C'CX '       COMMUNICATION LINE GROUP
         DC    AL1(DSABCQ),C'CQ '       DIRECT ACCESS MESSAGE QUEUE
         DC    AL1(DSABMQ),C'MQ '       PROBLEM PROGRAM MESSAGE QUEUE
         DC    AL1(DSABPO),C'PO '       PARTITIONED
         DC    AL01(DSABU),C'  U'       UNMOVEABLE
DORG1END DC    AL0001(255),C'---'       END-OF-TABLE
DORG1LEN EQU   *-DORG1END
******
DORG2    DC    AL1(DSABGS),C'GS '       GRAPHICS
         DC    AL1(DSABTX),C'TX '       TCAM LINE GROUP
         DC    AL1(DSABTQ),C'TQ '       TCAM MESSAGE QUEUE
         DC    AL1(DSABAM),C'AM '       VSAM
         DC    AL1(DSABTR),C'TR '       TCAM 3705
DORG2END DC    AL0001(255),C'---'       END-OF-TABLE
DORG2LEN EQU   *-DORG2END
******
DFLG1    DC    AL1(DSABDALC),C'D       ' DYNAMICALLY ALLOCATED
         DC    AL1(DSABPALC),C' P      ' PERMANENTLY ALLOCATED
         DC    AL1(DSABDCNV),C'  D     ' DYNAMICALLY CONVERTED
         DC    AL1(DSABCONV),C'   C    ' CONVERTIBLE
         DC    AL1(DSABNUSE),C'    I   ' IN USE
DFLG1END DC    AL000001(255),C'--------' END-OF-TABLE
DFLG1LEN EQU   *-DFLG1END
******
DFLG3    DC    AL01(DSABVAM),C'     V  ' VIO DATASET
         DC    AL1(DSABCATL),C'      C ' DATASET IS A CATALOG
         DC    AL1(DSABJSCT),C'       J' JOBCAT/STEPCAT DATASET
DFLG3END DC    AL000001(255),C'--------' END-OF-TABLE
DFLG3LEN EQU   *-DFLG3END
******
JIND2    DC    AL1(JFCSHARE),C'SHR'          SHARE
         DC    AL001(JFCOLD),C'OLD'          OLD
         DC    AL001(JFCMOD),C'MOD'          MOD
         DC    AL001(JFCNEW),C'NEW'          NEW
         DC    AL01(JFCTEMP),C'TMP'          TEMPORARY
JIND2END DC    AL000001(255),C'---'          END-OF-TABLE
JIND2LEN EQU   *-JIND2END
         CVT   DSECT=YES
         IKJTCB
         IEZJSCB
         IHADSAB
         IEFJESCT
TIOT     DSECT
         IEFTIOT1
SIOT     DSECT
         IEFASIOT
JFCB     DSECT
         IEFJFCBN
         END


                                                                                                                c Xephon 1994

