Using CRC for file integrity verification

CRC32 SOURCE CODE

CRC32    CSECT                     ESTABLISH CSECT
CRC32    AMODE 24                  ESTABLISH AMODE
CRC32    RMODE 24                  ESTABLISH RMODE
         YREGS                     REGISTER EQUATES
         SAVE  (14,12),,CRC32-&SYSDATE SAVE REGISTERS
         LR    R12,R15             LOAD R12 W/EPA ADDRESS
         USING CRC32,R12           ESTABLISH ADDRESSABLITY
         LR    R2,R1               SAVE A(CPPL)
         USING CPPL,R2
         STORAGE OBTAIN,ADDR=(1),LENGTH=WORKLEN   GET STORAGE
         ST    R13,4(,R1)          ST CALLER'S S/A ADDR IN MY S/A
         ST    R1,8(,R13)          ST MY S/A ADDR IN CALLER'S S/A
         LR    R13,R1              LOAD ADDR OF MY S/A IN R13
         USING WORKAREA,R13
         LA    R3,PPLAREA          LOAD A(PPL)
         USING PPL,R3
         LA    R6,IOPLAREA         LOAD A(IOPL)
         USING IOPL,R6
         XC    DIRSAVE(DIRSAVEL),DIRSAVE     CLEAR AREAS
         XC    DIRBLKSZ(CLEARLEN),DIRBLKSZ   CLEAR AREAS
         MVC   CRCDATA,FOXES       INITIALIZE DATA CRC
         MVC   CRCDIR,FOXES        INITIALIZE DIR CRC
         MVC   CRCTOT,FOXES        INITIALIZE TOTAL CRC
         MVC   CRCGRTOT,FOXES      INITIALIZE GRAND TOTAL CRC
         MVC   PPLUPT,CPPLUPT      SAVE A(UPT)  IN PPL
         MVC   PPLCBUF,CPPLCBUF    SAVE A(CBUF) IN PPL
         MVC   PPLECT,CPPLECT      SAVE A(ECT)  IN PPL
         L     R1,=A(CRCPCL)       LOAD A(PCL)
         ST    R1,PPLPCL           SAVE A(PCL)  IN PPL
         LA    R1,PDLADDR          LOAD A(PDL)
         ST    R1,PPLANS           SAVE A(PDL)  IN PPL
         LA    R1,ECB              LOAD A(ECB)
         ST    R1,PPLECB           SAVE A(ECB)  IN PPL
         ST    R1,IOPLECB          SAVE A(ECB)  IN IOPL
         LA    R1,PUTBLK           LOAD A(IOPB)
         ST    R1,IOPLIOPB         SAVE A(IOPB) IN IOPL
         MVC   IOPLUPT,CPPLUPT     SAVE A(UPT)  IN IOPL
         MVC   IOPLECT,CPPLECT     SAVE A(ECT)  IN IOPL
         LA    R1,PPL              LOAD A(PPL)
         LINK  EP=IKJPARS          PARSE THE PARAMETER
         LTR   R15,R15             WAS PARSE SUCCESSFUL?
         MVC   MSGPART,=CL8'PARSE' SHOW PARSE ERROR TYPE
         BNZ   MISCERR             GO TELL USER
         OI    FLAG1,PARSEOK       SHOW PARSE PERFORMED
         L     R2,PPLANS           LOAD A(PDL POINTER)
         L     R2,0(,R2)           LOAD A(PDL)
         USING IKJPARMD,R2
         DROP  R3,R6
         TM    DSNAME+6,X'80'      WAS DSNAME SPECIFIED?
         MVC   MSGPART,=CL8'PARSEDSN'   SHOW PARSE ERROR TYPE
         BZ    MISCERR             NO, GO TELL USER
         L     R1,DSNAME           LOAD A(DSNAME)
         LH    R14,DSNAME+4        LOAD LENGTH(DSNAME)
         MVI   DSN,C' '            CLEAR ALL
         MVC   DSN+1(CHARLEN-1),DSN   CHARACTER FIELDS
         BCTR  R14,R0              DECREMENT LENGTH FOR MVC
         EX    R14,MOVEDSN1        EXECUTE MOVE OF DSNAME
*        MVC   DYNDSN(0),0(R1)     EXECUTED INSTRUCTION COPY
         TM    DSNAME+14,X'80'     WAS MEMBER NAME SPECIFIED?
         BZ    MEMDONE             NO, SKIP IT
         L     R1,DSNAME+8         LOAD A(MEMBER NAME)
         LH    R14,DSNAME+12       LOAD LENGTH(DSNAME)
         BCTR  R14,R0              DECREMENT LENGTH FOR MVC
         EX    R14,MOVEMEM1        EXECUTE MOVE OF DSNAME
*        MVC   DYNMBR(0),0(R1)     EXECUTED INSTRUCTION COPY
         OI    FLAG1,MBRREQ        SHOW MEMBER NAME GIVEN
MEMDONE  TM    VOL+6,X'80'         WAS VOLUME SPECIFIED?
         BO    VOLSET              YES, GO PROCESS VOLSER
         OI    DYNRTDDP,X'80'      ELSE, SET END OF LIST INDICATOR
         B     VOLDONE             AND SKIP VOLSER CHECKING
VOLSET   L     R1,VOL              LOAD A(VOLSER)
         LH    R14,VOL+4           LOAD LENGTH(VOLSER)
         BCTR  R14,R0              DECREMENT LENGTH FOR MVC
         EX    R14,MOVEVOL1        EXECUTE MOVE OF VOLSER
*        MVC   DYNVOL(0),0(R1)     EXECUTED INSTRUCTION COPY
         OI    FLAG1,VOLREQ        SHOW VOLSER GIVEN
         DROP  R2
VOLDONE  L     R15,CVTPTR          LOAD A(CVT)
         L     R15,CVTPUTL-CVT(R15)   LOAD A(PUTLINE ROUTINE)
         ST    R15,ADDRPUTL        SAVE A(PUTLINE ROUTINE)
         LA    R1,DYNRBA           LOAD A(ALLOC PLIST)
         SVC   99                  ISSUE DYNALLOC
         LTR   R15,R15             WAS DYNALLOC SUCCESSFUL?
         MVC   MSGPART,=CL8'DYNALLOC'   SHOW ALLOC ERROR
         BNZ   MISCERR             NO, GO TELL USER
         OI    FLAG1,ALLOCOK       SHOW DYNALLOC PERFORMED
         MVC   PDSDCB+DCBDDNAM-IHADCB(8),DYNRDDNM   MOVE DDNAME TO DCB
         MVC   DIRDCB+DCBDDNAM-IHADCB(8),DYNRDDNM   MOVE DDNAME TO DCB
         MVC   SEQDCB+DCBDDNAM-IHADCB(8),DYNRDDNM   MOVE DDNAME TO DCB
         TM    DYNRDSOR,DCBDSGPO   IS DSORG=PO?
         BO    CHKMEM              YES, GO DO FURTHER CHECKING
         TM    DYNRDSOR,DCBDSGPS   ELSE, IS DSORG=PS?
         BO    SEQREAD             YES, GO PROCESS IT
         TM    DYNRDSOR,DCBDSGDA   ELSE, IS IT DSORG=DA?
         MVC   MSGPART,=CL8'DSORG' SHOW DSORG ERROR
         BZ    MISCERR             NO, GO TELL USER (ONLY PO/PS/DA)
         B     SEQREAD             ELSE, GO READ DA
CHKMEM   OI    FLAG1,DSORGPO       SHOW DSORG=PO
         OPEN  (PDSDCB,INPUT)      OPEN DCB
         TM    PDSDCB+DCBOFLGS-IHADCB,DCBOFOPN   WAS OPEN GOOD?
         MVC   MSGPART,=CL8'OPEN'  SHOW OPEN ERROR
         BZ    MISCERR             NO, GO TELL USER
         OI    FLAG1,OPENOK        SHOW OPEN PERFORMED
         TM    FLAG1,MBRREQ        WAS A MEMBER REQUESTED?
         BZ    DIRLOOP             NO, SKIP BLDL, DO ENTIRE PDS
         MVC   BLDLDATA+PDS2NAME-PDS2,DYNMBR  MOVE MEMBER TO BLDL PLIST
         MVI   BLDLLIST+1,1        SET NUMBER OF MEMBERS
         MVI   BLDLLIST+3,BLDLLEN  SET SIZE OF MEMBER DATA
         BLDL  PDSDCB,BLDLLIST     LOCATE MEMBER IN PDS
         LTR   R15,R15             WAS MEMBER FOUND?
         MVC   MSGPART,=CL8'BLDL'  SHOW BLDL ERROR
         BNZ   MISCERR             NO, GO TELL USER
         OI    FLAG1,MBRFOUND      SHOW MEMBER FOUND
         MVC   DIRMEMBR,DYNMBR     MOVE MEMBER NAME FOR FIND
         B     FINDMEMB            GO POSITION TO REQUESTED MEMBER
DIRLOOP  BAL   R14,READDIR         READ A DIRECTORY BLOCK/ENTRY
         CH    R15,=H'4'           WAS A MEMBER/ALIAS FOUND?
         BH    CLEANUP             YES, GO CLEAN UP
FINDMEMB FIND  PDSDCB,DIRMEMBR,D   POSITION TO REQUESTED MEMBER
         LTR   R15,R15             WAS MEMBER FOUND?
         MVC   MSGPART,=CL8'FIND'  SHOW FIND ERROR
         BNZ   MISCERR             NO, GO TELL USER
CHKRECFM TM    PDSDCB+DCBRECFM-IHADCB,DCBRECU   IS RECFM=U?
         BO    PDSDATA             YES, SKIP RECFM=V SETUP
         TM    PDSDCB+DCBRECFM-IHADCB,DCBRECF   IS RECFM=F?
         BO    PDSDATA             YES, SKIP RECFM=V SETUP
         OI    FLAG2,RECFMVAR      ELSE, SHOW RECFM=V
PDSDATA  LA    R2,DATAAREA         LOAD A(DIR BLOCK DATA AREA)
PDSLOOP  READ  PDSDECB,SF,PDSDCB,(2),'S'   READ DATA BLOCK
         CHECK PDSDECB             CHECK THE READ
         TM    FLAG2,RECFMVAR      IS RECFM=V?
         LH    R1,PDSDCB+DCBBLKSI-IHADCB  ELSE, LOAD BLKSIZE(RECFM=F/U)
         L     R3,PDSDECB+DECIOBPT-DECB LOAD A(IOB) TO GET IOBCSW CNT
         SH    R1,IOBCSW+5-IOBSTDRD(R3) RESIDUAL COUNT-BLKSZ=DATA LEN
         B     PDSCRC              GO COMPUTE CRC
PDSRECV  LH    R1,DATAAREA         LOAD DATA LENGTH FROM BDW
PDSCRC   L     R6,CRCDATA          LOAD CURRENT DATA CRC
         BAL   R14,COMPCRC         COMPUTE DATA CRC
         ST    R6,CRCDATA          SAVE NEW DA
         B     PDSLOOP             GO READ NEXT DATA BLOCK
PDSEOF   MVC   CRCTEMP,CRCDATA     SAVE CRCDATA FOR LATER
         XC    CRCDATA,FOXES       OR HIGH VALUES OVER CRC
         UNPK  UNPKAREA(9),CRCDATA(5)   UNPACK DATA CRC
         TR    UNPKAREA(8),TRTABLE-240  MAKE DATA READABLE
         MVC   MSG1CRC,UNPKAREA         MOVE DATA TO MESSAGE AREA
         MVC   MSG1CRCK,MSG1KEYC        MOVE LITERAL TO MESSAGE AREA
         LA    R15,MSG1LEN         LOAD MESSAGE LENGTH
   STH   R15,MSG1                  STORE MESSAGE LENGTH
   MVC   MSG1MEMK,MSG1KEYM         MOVE LITERAL TO MESSAGE AREA
   MVC   MSG1MEMB,DIRMEMBR         MOVE MEMBER NAME TO MESSAGE AREA
   L     R15,ADDRPUTL              LOAD A(PUTLINE ROUTINE)
   PUTLINE OUTPUT=(MSG1,TERM,SINGLE,DATA),ENTRY=(15),                  X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
         TM    FLAG1,MBRFOUND      WAS REQUEST FOR SINGLE MEMBER?
         BO    CLEANUP             YES, GO CLEAN UP
         XC    CRCTOT,CRCTEMP      BUCKET TEMP CRC TO TOTAL CRC
         MVC   CRCDATA,FOXES       INITIALIZE DATA CRC
         LA    R1,8                LOAD LENGTH(MEMBER NAME)
         LA    R2,DIRMEMBR         LOAD A(MEMBER NAME)
         L     R6,CRCDIR           LOAD CURRENT DIRECTORY CRC
         BAL   R14,COMPCRC         COMPUTE DATA CRC
         ST    R6,CRCDIR           SAVE NEW DIR CRC
         B     DIRLOOP             GO TO PROCESS NEXT MEMBER
SEQREAD  OPEN  (SEQDCB,INPUT)      OPEN DCB
         TM    SEQDCB+DCBOFLGS-IHADCB,DCBOFOPN   WAS OPEN GOOD?
         MVC   MSGPART,=CL8'OPEN'  SHOW OPEN ERROR
         BZ    MISCERR             NO, GO TELL USER
         OI    FLAG1,OPENOK        SHOW OPEN PERFORMED
         TM    SEQDCB+DCBRECFM-IHADCB,DCBRECU   IS RECFM=U?
         BO    SEQDATA             YES, SKIP RECFM=V SETUP
         TM    SEQDCB+DCBRECFM-IHADCB,DCBRECF   IS RECFM=F?
         BO    SEQDATA             YES, SKIP RECFM=V SETUP
         OI    FLAG2,RECFMVAR      ELSE, SHOW RECFM=V
SEQDATA  LA    R2,DATAAREA         LOAD A(INPUT AREA)
SEQLOOP  READ  SEQDECB,SF,SEQDCB,(2),'S'   READ DATA BLOCK
         CHECK SEQDECB             CHECK THE READ
         TM    FLAG2,RECFMVAR      IS RECFM=V?
         BO    SEQRECV             YES, PROCESS RECFM=V
         LH    R1,SEQDCB+DCBBLKSI-IHADCB ELSE, LOAD  BLKSIZE(RECFM=F/U)
         L     R3,SEQDECB+DECIOBPT-DECB  LOAD A(IOB) TO GET IOBCSW CNT
         SH    R1,IOBCSW+5-IOBSTDRD(R3)  RESIDUAL COUNT-BLKSZ=DATA LEN
         B     SEQCRC              GO COMPUTE CRC
SEQRECV  LH    R1,DATAAREA  0(R2)  LOAD DATA LENGTH FROM BDW
SEQCRC   L     R6,CRCDATA          LOAD CURRENT DATA CRC
         BAL   R14,COMPCRC         COMPUTE DATA CRC
         ST    R6,CRCDATA          SAVE NEW DATA CRC
         B     SEQLOOP             GO READ NEXT DATA BLOCK
SEQEOF   CLOSE (SEQDCB)            CLOSE DCB
         NI    FLAG1,255-OPENOK    SHOW DCB NOT OPEN
         XC    CRCDATA,FOXES       OR HIGH VALUES OVER DATA CRC
         UNPK  UNPKAREA(9),CRCDATA(5)    UNPACK DATA CRC
         TR    UNPKAREA(8),TRTABLE-240   MAKE DATA READABLE
         MVC   MSG1CRC,UNPKAREA    MOVE DATA TO MESSAGE AREA
         MVC   MSG1CRCK,MSG1KEYC   MOVE LITERAL TO MESSAGE AREA
         MVC   MSG1DSNK,MSG1KEYG   MOVE LITERAL TO MESSAGE AREA
         MVC   MSG1DSN3,DYNDSN     MOVE DSNAME TO MESSAGE AREA
         LA    R15,MSG1LEN         LOAD MESSAGE LENGTH
         STH   R15,MSG1            STORE MESSAGE LENGTH
         L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSG1,TERM,SINGLE,DATA),ENTRY=(15),            X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
         B     CLEANUP             GO CLEAN UP
COMPCRC  LR    R3,R2               COPY A(DATAAREA BLOCK) FOR BXLE
         LA    R4,1                LOAD INCREMENT FOR BXLE
         LA    R5,0(R2,R1)         LOAD A(LAST BYTE+1) AS COMPARAND
         BCTR  R5,R0               LOAD A(REAL LAST BYTE) FOR BXLE
         L     R8,=A(CRCTABLE)     LOAD A(CRC TABLE)
         L     R9,=X'000000FF'     LOAD MASK FOR LATER AND'ING
BYTELOOP IC    R7,0(,R3)           LOAD DATAAREA BYTE
         XR    R7,R6               OR PREV CRC WITH DATAAREA BYTE
         NR    R7,R9               ISOLATE LOW ORDER BYTE
         SLL   R7,2                MULTIPLY BY FOUR FOR TABLE INDEX
         SRL   R6,8                SHIFT LOW ORDER BYTE OF PREV CRC
         X     R6,0(R7,R8)         UPDATE RUNNING CRC W/TABLE ENTRY
         BXLE  R3,R4,BYTELOOP      LOOP UNTIL END OF DATAAREA BLOCK
         BR    R14                 RETURN TO CALLER
CLEANUP  CLC   CRCDIR,FOXES        IS THERE ANY DIR CRC TO DISPLAY?
         BE    CKCRCTOT            NO, SKIP DISPLAY
         UNPK  UNPKAREA(9),CRCDIR(5)   UNPACK DIR CRC
         TR    UNPKAREA(8),TRTABLE-240 MAKE DATA READABLE
         MVC   MSG1CRC,UNPKAREA    MOVE DATA TO MESSAGE AREA
         MVC   MSG1CRCK,MSG1KEYC   MOVE LITERAL TO MESSAGE AREA
         LA    R15,MSG1LEN         LOAD MESSAGE LENGTH
         STH   R15,MSG1            STORE MESSAGE LENGTH
         MVC   MSG1DIRK,MSG1KEYD   MOVE LITERAL TO MSG AREA
         MVC   MSG1DSN1,DYNDSN     MOVE DSNAME TO MESSAGE AREA
         L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSG1,TERM,SINGLE,DATA),ENTRY=(15),            X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
CKCRCTOT CLC   CRCTOT,FOXES        IS THERE A TOTAL CRC TO DISPLAY?
         BE    CKOPEN              NO, SKIP DISPLAY
         MVC   CRCTEMP,CRCTOT      SAVE TOTAL CRC FOR LATER
         XC    CRCTOT,FOXES        ELSE, OR HIGH VALUES ON TOT CRC
         UNPK  UNPKAREA(9),CRCTOT(5)   UNPACK TOTAL CRC
         TR    UNPKAREA(8),TRTABLE-240 MAKE DATA READABLE
         MVC   MSG1CRC,UNPKAREA    MOVE DATA TO MESSAGE AREA
         MVC   MSG1CRCK,MSG1KEYC   MOVE LITERAL TO MESSAGE AREA
         LA    R15,MSG1LEN         LOAD MESSAGE LENGTH
         STH   R15,MSG1            STORE MESSAGE LENGTH
         MVC   MSG1MEMS,MSG1KEYT   MOVE LITERAL TO MSG AREA
         MVC   MSG1DSN2,DYNDSN     MOVE DSNAME TO MESSAGE AREA
         L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSG1,TERM,SINGLE,DATA),ENTRY=(15),            X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
         XC    CRCGRTOT,CRCDIR     OR DIR CRC ON GRAND TOT CRC
         XC    CRCGRTOT,CRCTEMP    OR DATA TOTAL CRC ON GR TOT CRC
         XC    CRCGRTOT,FOXES      OR HIGH VALUES ON GRAND TOT CRC
         UNPK  UNPKAREA(9),CRCGRTOT(5) UNPACK GRAND TOTAL CRC
         TR    UNPKAREA(8),TRTABLE-240 MAKE DATA READABLE
         MVC   MSG1CRC,UNPKAREA    MOVE DATA TO MESSAGE AREA
         MVC   MSG1CRCK,MSG1KEYC   MOVE LITERAL TO MESSAGE AREA
         LA    R15,MSG1LEN         LOAD MESSAGE LENGTH
         STH   R15,MSG1            STORE MESSAGE LENGTH
         MVC   MSG1DSNK,MSG1KEYG   MOVE LITERAL TO MSG AREA
         MVC   MSG1DSN3,DYNDSN     MOVE DSNAME TO MESSAGE AREA
         L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSG1,TERM,SINGLE,DATA),ENTRY=(15),            X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
CKOPEN   TM    FLAG1,OPENOK        WAS OPEN DONE?
         BZ    SKIPCLOS            NO, SKIP CLOSE
         CLOSE (PDSDCB)            ELSE, CLOSE DCB
SKIPCLOS TM    FLAG1,ALLOCOK       WAS DYNALLOC DONE?
         BZ    SKIPDYNF            NO, SKIP DYNALLOC
         MVC   DYNFDDN,DYNRDDNM    SET DDNAME
         LA    R1,DYNRBF           LOAD A(DEALLOC PLIST)
         SVC   99                  ISSUE DYNALLOC
         LTR   R15,R15             WAS DYNALLOC SUCCESSFUL?
         BZ    SKIPDYNF            YES, SKIP MESSAGE
         MVC   MSGPART,=CL8'DYN FREE'  SHOW DELALLOC ERROR
         L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSGPARS,TERM,SINGLE,DATA),ENTRY=(15),         X
               MF=(E,IOPLAREA)     ISSUE MESSAGE
SKIPDYNF TM    FLAG1,PARSEOK       WAS PARSE DONE?
         BZ    RETURN              NO, SKIP RELEASE
         IKJRLSA PDLADDR           RELEASE ANSWER AREA
RETURN   LR    R2,R15              SAVE RETURN CODE
         LR    R1,R13              LOAD R1 W/A(SAVEAREA)
         L     R13,4(,R13)         LOAD R13 W/ADDR OF CALLER'S S/A
         STORAGE RELEASE,ADDR=(1),LENGTH=WORKLEN FREE STORAGE
         LR    R15,R2              RESTORE RETURN CODE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
MISCERR  L     R15,ADDRPUTL        LOAD A(PUTLINE ROUTINE)
         PUTLINE OUTPUT=(MSGPARS,TERM,SINGLE,DATA),ENTRY=(15),         X
               MF=(E,IOPLAREA)     ISSUE ERROR MESSAGE
         B     CLEANUP             GO CLEAN UP
READDIR  STM   R14,R3,DIRSAVE      SAVE CURRENT REGISTERS
         LM    R14,R3,DIRLOAD      RELOAD PREVIOUS REGISTERS
         TM    FLAG1,PDSDIROP      WAS DIRECTORY ALREADY OPENED?
         BO    CALCSIZE            YES, SKIP OPEN/READ
         OPEN  (DIRDCB,INPUT)      OPEN DIRECTORY
         TM    DIRDCB+DCBOFLGS-IHADCB,DCBOFOPN WAS OPEN GOOD?
         BZ    DIROPBAD            NO, GO SET RETURN CODE
         OI    FLAG1,PDSDIROP      ELSE, SHOW OPEN PERFORMED
GETDIR   XC    DIRBLOCK,DIRBLOCK   CLEAR DIRECTORY BLOCK IN
         GET   DIRDCB,DIRBLOCK     READ A DIRECTORY BLOCK
         LA    R15,2               ACCOUNT FOR DIR BLOCK LEN BYTES
         LA    R1,DIRBLOCK+2       LOAD A(DIR DATA)
         B     CKDIREOF            GO CHECK DIRECTORY EOF
         USING PDS2,R1
CALCSIZE MVC   DIRBLKSZ+3(1),PDS2INDC  MOVE # HALFWORDS TO WORK AREA
         NI    DIRBLKSZ+3,PDS2LUSR ISOLATE # OF USERDATA HALFWORDS
         L     R2,DIRBLKSZ         LOAD NUMBER OF HALFWORDS
         LA    R2,12(R2,R2)        LOAD LENGTH(DIR ENTRY)  X*2+12
         AR    R15,R2              POINT TO END OF THIS DIR ENTRY
         CH    R15,DIRBLOCK        ARE WE AT END OF DIR BLOCK?
         BNL   GETDIR              YES, GO GET NEXT DIR BLOCK
         AR    R1,R2               ELSE, POINT TO NEXT DIR ENTRY
CKDIREOF CLC   PDS2NAME,FOXES      ARE WE AT LOGICAL EOF?
         BE    DIREOF              YES, GO CLEAN UP
         MVC   DIRMEMBR,PDS2NAME   ELSE, SAVE MEMBER NAME FOR LATER
         TM    PDS2INDC,PDS2ALIS   IS THIS AN ALIAS ENTRY?
         BZ    MAINMBR             NO, GO SET RC=0 (MAIN MEMBER)
         LA    R0,4                ELSE, SET RC=4 (ALIAS MEMBER)
         B     DIREXIT             GO TO EXIT
MAINMBR  LA    R0,0                SET RC=0 (MAIN MEMBER)
         B     DIREXIT             GO TO EXIT
DIROPBAD LA    R0,12               SET RC=12 (OPEN ERROR)
         B     DIREXIT             GO TO EXIT
DIREOF   NI    FLAG1,255-PDSDIROP  CLEAR DIR OPEN FLAG
         CLOSE (DIRDCB)            CLOSE DCB
         XC    DIRMEMBR,DIRMEMBR   CLEAR MEMBER NAME
         XC    CRCDIR,FOXES        OR HIGH VALUES OVER DIR CRC
         LA    R0,8                SET RC=8 (DIRECTORY EOF)
DIREXIT  ST    R0,DIRSAVE+4        SAVE RETURN CODE
         STM   R14,R3,DIRLOAD      SAVE CURRENT REGISTERS
         LM    R14,R3,DIRSAVE          RELOAD PREVIOUS REGISTERS
         BR    R14                     RETURN TO CALLER
         DROP  R1
MSGPARS  DC    AL2(MSGPARSL,0)         OUTPUT DESCRIPTOR -----------|
         DC    C'*** Error encountered in '                         |
MSGPART  DC    CL8' '                                               |
MSGPARSL EQU   *-MSGPARS               MESSAGE LENGTH --------------|
FOXES    DC    8X'FF'                  DIRECTORY EOF FLAG/CRC INIT VAL
MSG1KEYM DC    C'for member '          MESSAGE FIELD
MSG1KEYC DC    C'CRC is '              MESSAGE FIELD
MSG1KEYD DC    C'for directory of '    MESSAGE FIELD
MSG1KEYT DC    C'for members of '      MESSAGE FIELD
MSG1KEYG DC    C'for dataset '         MESSAGE FIELD
TRTABLE  DC    C'0123456789ABCDEF'     TRANSLATE TABLE
PUTBLK   PUTLINE MF=L                  IOPB FOR PARSE
MOVEDSN1 MVC   DYNDSN(0),0(R1)         EXECUTED MVC OF DSNAME
MOVEMEM1 MVC   DYNMBR(0),0(R1)         EXECUTED MVC OF MEMBER NAME
MOVEVOL1 MVC   DYNVOL(0),0(R1)         EXECUTED MVC OF VOLSER
DYNRBF   DC    A(DYNRBFFL+X'80000000') POINTER TO REQUEST BLOCK
DYNRBFFL DC    AL1(20,2,0,0)           LENGTH, DEALLOC VERB, FLAGS1
DYNFERR  DC    AL2(0)                  ERROR CODE
DYNFINFO DC    AL2(0)                  INFORMATION CODE
DYNFTUO  DC    A(DYNFTU01),AL4(0,0)    TEXT UNIT POINTER, RSVD, FLAGS2
DYNFTU01 DC    A(DYNFDDNM+X'80000000') LAST TEXT UNIT POINTER
DYNFDDNM DC    AL2(DALDDNAM,1,8)       DDNAME KEY, NUM, PARMLEN
DYNFDDN  DC    CL8' '                  DDNAME FIELD
DYNRBA   DC    A(DYNRBAFL+X'80000000') POINTER TO REQUEST BLOCK
DYNRBAFL DC    AL1(20,1,0,0)           LENGTH, ALLOC VERB, FLAGS1
DYNAERR  DC    AL2(0)                  ERROR CODE
DYNAINFO DC    AL2(0)                  INFORMATION CODE
DYNATUO  DC    A(DYNATU01),AL4(0,0)    TEXT UNIT POINTER, RSVD, FLAGS2
DYNATU01 DC    A(DYNDSNAM)             DSNAME TEXT UNIT POINTER
         DC    A(DYNSTATS)             STATUS TEXT UNIT POINTER
         DC    A(DYNRETOR)             RET DSORG TEXT UNIT POINTER
DYNRTDDP DC    A(DYNRETDD)             RET DDNAME TEXT UNIT POINTER
         DC    A(DYNVLSER)             VOLSER TEXT UNIT POINTER
         DC    A(DYNUNITT+X'80000000') UNIT   TEXT UNIT POINTER
DYNDSNAM DC    AL2(DALDSNAM,1,44)      DSNAME KEY, NUM, PARMLEN
DYNDSN   DC    CL44' '                 DSNAME FIELD
DYNMEMBR DC    AL2(DALMEMBR,1,8)       MEMBER/GDG KEY, NUM, PARMLEN
DYNMBR   DC    CL8' '                  MEMBER NAME/GDG LEVEL FIELD
DYNSTATS DC    AL2(DALSTATS,1,1)       DATASET STATUS KEY, NUM, PARMLEN
DYNSTAT  DC    XL1'08'                 CONSTANT FOR DISP=SHR
DYNVLSER DC    AL2(DALVLSER,1,6)       VOLSER KEY, NUM, PARMLEN
DYNVOL   DC    CL6' '                  VOLUME SERIAL FIELD
DYNUNITT DC    AL2(DALUNIT,1,8)        UNIT TYPE KEY, NUM, PARMLEN
DYNUNIT  DC    CL8'SYSDA'              UNIT TYPE FIELD
DYNRETDD DC    AL2(DALRTDDN,1,8)       RETURN DDNAME, NUM, PARMLEN
DYNRDDNM DC    CL8' '                  RETURNED DDNAME
DYNRETOR DC    AL2(DALRTORG,1,2)       RETURN DSORG, NUM, PARMLEN
DYNRDSOR DC    XL2'0000'               RETURNED DSORG
SEQDCB   DCB   DDNAME=XXXXXXXX,DSORG=PS,MACRF=R,EODAD=SEQEOF
PDSDCB   DCB   DDNAME=XXXXXXXX,DSORG=PO,MACRF=R,EODAD=PDSEOF
DIRDCB   DCB   DDNAME=XXXXXXXX,DSORG=PS,MACRF=GM,EODAD=DIREO           X
         LRECL=256,BLKSIZE=256,RECFM=F
CRCPCL   IKJPARM DSECT=IKJPARMD
DSNAME   IKJPOSIT DSNAME,USID,UPPERCASE,PROMPT='Dataset name'
VOLSERKW IKJKEYWD
         IKJNAME  'VOLUME',SUBFLD=VOLSF
VOLSF    IKJSUBF
VOL      IKJIDENT 'VOLSER',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    X
         PROMPT='Volume serial on which dataset resides'
         IKJENDP
         CVT   DSECT=YES,LIST=NO       CVT
CPPL     IKJCPPL                       CPPL
CPPLLEN  EQU   *-CPPL                  CPPL LENGTH
PPL      IKJPPL                        PPL
PPLLEN   EQU   *-PPL                   PPL LENGTH
IOPPL    IKJIOPL                       IOPL FOR PUTLINE
IOPLLEN  EQU   *-IOPL                  IOPL LENGTH
DCBMAP   DCBD  DSORG=(PS,PO),DEVD=DA   DCB PLIST
         IHAPDS DSECT=YES,PDSBLDL=NO   PDS DIRECTORY ENTRY MAPPING
         IHADECB DSECT=YES             DATA EVENT CONTROL BLOCK
         IEZIOB DSECT=YES              INPUT/OUTPUT BLOCK
         IEFZB4D2                      SVC 99 TEXT UNIT KEYS
WORKAREA DSECT                         WORKAREA
SAVEAREA DS    18F                     SHOULD BE FIRST IN WORKAREA
DIRSAVE  DS    6F                      REGISTER SAVE AREA -----------|
DIRLOAD  DS    6F                      REGISTER SAVE AREA            |
DIRSAVEL EQU   *-DIRSAVE               SAVE AREA FIELD LENGTH -------|
DIRBLKSZ DS    F                       DIRECTORY BLOCK SIZE AREA ----|
CRCTEMP  DS    F                       TEMP STORAGE FOR CRC          |
CRCDATA  DS    F                       DERIVED CHECKSUM FOR DATA     |
CRCDIR   DS    F                       DERIVED CHECKSUM FOR DIRECTORY|
CRCTOT   DS    F                       DERIVED CHECKSUM TOTAL MEMBERS|
CRCGRTOT DS    F                       DERIVED CHECKSUM GRAND TOTAL  |
ECB      DS    A                       ECB                           |
ADDRPUTL DS    A                       A(PUTLINE ROUTINE)            |
PDLADDR  DS    A                       A(PDL)                        |
PPLAREA  DS    (PPLLEN)X               PPL WORKAREA                  |
IOPLAREA DS    (IOPLLEN)X              IOPL WORKAREA                 |
UNPKAREA DS    D,X                     AREA FOR UNPACKING/SLACK BYTE |
BLDLLIST DS    2H                      BLDL PLIST HEADER -----|      |
BLDLDATA DS    XL60                    BLDL PLIST DATA        |      |
BLDLLEN  EQU   *-BLDLDATA              BLDL PLIST LENGTH------|      |
FLAG1    DS    XL2                     INDICATOR FLAG1 -------|      |
PDSDIROP EQU   X'80'                   PDS DIR OPEN PERFORMED |      |
PARSEOK  EQU   X'40'                   PARSE PERFORMED        |      |
MBRREQ   EQU   X'20'                   MEMBER NAME GIVEN
VOLREQ   EQU   X'10'                   VOLSER GIVEN
ALLOCOK  EQU   X'08'                   DYNALLOC PERFORMED     |      |
OPENOK   EQU   X'04'                   OPEN PERFORMED
MBRFOUND EQU   X'02'                   MEMBER FOUND           |      |
DSORGPO  EQU   X'01'                   DSORG=PO (VS. PS/DA) --|      |
FLAG2    DS    X                       INDICATOR FLAG2 -------|      |
RECFMVAR EQU   X'80'                   DATASET RECFM=V        |      |
CLEARLEN EQU   *-DIRBLKSZ              BINARY FIELDS LENGTH ---------|
DIRBLOCK DS    0F,XL256                DIRECTORY BLOCK AREA
DSN      DS    CL44                    DSNAME -----------------------|
MEMBER   DS    CL8                     MEMBER                        |
DIRMEMBR DS    CL8                     DIRECTORY MEMBER NAME         |
VOLUME   DS    CL6                     VOLSER                        |
MSG1     DS    0F,2AL2                 OUTPUT DESCRIPTOR -----|      |
MSG1CRCK DS    CL(L'MSG1KEYC)          'CRC is '              |      |
MSG1CRC  DS    CL8                     cccccccc               |      |
         DS    CL1                                            |      |
MSG1MEMK DS    CL(L'MSG1KEYM)          'for member '          |      |
MSG1MEMB DS    CL8                     mmmmmmmm               |      |
         DS    CL(80-(*-MSG1CRCK))     FILLER                 |      |
         ORG   MSG1MEMK                                       |      |
MSG1DIRK DS    CL(L'MSG1KEYD)          'for directory of '    |      |
MSG1DSN1 DS    CL44                    dsn                    |      |
         ORG   MSG1MEMK                                       |      |
MSG1MEMS DS    CL(L'MSG1KEYT)          'for members of '      |      |
MSG1DSN2 DS    CL44                    dsn                    |      |
         ORG   MSG1MEMK                                       |      |
MSG1DSNK DS    CL(L'MSG1KEYG)          'for dataset '         |      |
MSG1DSN3 DS    CL44                    dsn                    |      |
MSG1LEN2 EQU   *-MSG1MEMK                                     |      |
         ORG   ,                                              |      |
MSG1LEN  EQU   *-MSG1                  MESSAGE LENGTH --------|      |
CHARLEN  EQU   *-DSN                   CHARACTER FIELDS LENGTH ------|
DATAAREA DS    0F,CL32768              DATA AREA FOR BSAM READ
WORKLEN  EQU   *-WORKAREA              WORKAREA LENGTH
CRCTABLE CSECT
         DC    X'0000000077073096EE0E612C990951BA'  00-03
         DC    X'076DC419706AF48FE963A5359E6495A3'  04-07
         DC    X'0EDB883279DCB8A4E0D5E91E97D2D988'  08-0B
         DC    X'09B64C2B7EB17CBDE7B82D0790BF1D91'  0C-0F
         DC    X'1DB710646AB020F2F3B9714884BE41DE'  10-13
         DC    X'1ADAD47D6DDDE4EBF4D4B55183D385C7'  14-17
         DC    X'136C9856646BA8C0FD62F97A8A65C9EC'  18-1B
         DC    X'14015C4F63066CD9FA0F3D638D080DF5'  1C-1F
         DC    X'3B6E20C84C69105ED56041E4A2677172'  20-23
         DC    X'3C03E4D14B04D447D20D85FDA50AB56B'  24-27
         DC    X'35B5A8FA42B2986CDBBBC9D6ACBCF940'  28-2B
         DC    X'32D86CE345DF5C75DCD60DCFABD13D59'  2C-2F
         DC    X'26D930AC51DE003AC8D75180BFD06116'  30-33
         DC    X'21B4F4B556B3C423CFBA9599B8BDA50F'  34-37
         DC    X'2802B89E5F058808C60CD9B2B10BE924'  38-3B
         DC    X'2F6F7C8758684C11C1611DABB6662D3D'  3C-3F
         DC    X'76DC419001DB710698D220BCEFD5102A'  40-43
         DC    X'71B1858906B6B51F9FBFE4A5E8B8D433'  44-47
         DC    X'7807C9A20F00F9349609A88EE10E9818'  48-4B
         DC    X'7F6A0DBB086D3D2D91646C97E6635C01'  4C-4F
         DC    X'6B6B51F41C6C6162856530D8F262004E'  50-53
         DC    X'6C0695ED1B01A57B8208F4C1F50FC457'  54-57
         DC    X'65B0D9C612B7E9508BBEB8EAFCB9887C'  58-5B
         DC    X'62DD1DDF15DA2D498CD37CF3FBD44C65'  5C-5F
         DC    X'4DB261583AB551CEA3BC0074D4BB30E2'  60-63
         DC    X'4ADFA5413DD895D7A4D1C46DD3D6F4FB'  64-67
         DC    X'4369E96A346ED9FCAD678846DA60B8D0'  68-6B
         DC    X'44042D7333031DE5AA0A4C5FDD0D7CC9'  6C-6F
         DC    X'5005713C270241AABE0B1010C90C2086'  70-73
         DC    X'5768B525206F85B3B966D409CE61E49F'  74-77
         DC    X'5EDEF90E29D9C998B0D09822C7D7A8B4'  78-7B
         DC    X'59B33D172EB40D81B7BD5C3BC0BA6CAD'  7C-7F
         DC    X'EDB883209ABFB3B603B6E20C74B1D29A'  80-83
         DC    X'EAD547399DD277AF04DB261573DC1683'  84-87
         DC    X'E3630B1294643B840D6D6A3E7A6A5AA8'  88-8B
         DC    X'E40ECF0B9309FF9D0A00AE277D079EB1'  8C-8F
         DC    X'F00F93448708A3D21E01F2686906C2FE'  90-93
         DC    X'F762575D806567CB196C36716E6B06E7'  94-97
         DC    X'FED41B7689D32BE010DA7A5A67DD4ACC'  98-9B
         DC    X'F9B9DF6F8EBEEFF917B7BE4360B08ED5'  9C-9F
         DC    X'D6D6A3E8A1D1937E38D8C2C44FDFF252'  A0-A3
         DC    X'D1BB67F1A6BC57673FB506DD48B2364B'  A4-A7
         DC    X'D80D2BDAAF0A1B4C36034AF641047A60'  A8-AB
         DC    X'DF60EFC3A867DF55316E8EEF4669BE79'  AC-AF
         DC    X'CB61B38CBC66831A256FD2A05268E236'  B0-B3
         DC    X'CC0C7795BB0B4703220216B95505262F'  B4-B7
         DC    X'C5BA3BBEB2BD0B282BB45A925CB36A04'  B8-BB
         DC    X'C2D7FFA7B5D0CF312CD99E8B5BDEAE1D'  BC-BF
         DC    X'9B64C2B0EC63F226756AA39C026D930A'  C0-C3
         DC    X'9C0906A9EB0E363F7207678505005713'  C4-C7
         DC    X'95BF4A82E2B87A147BB12BAE0CB61B38'  C8-CB
         DC    X'92D28E9BE5D5BE0D7CDCEFB70BDBDF21'  CC-CF
         DC    X'86D3D2D4F1D4E24268DDB3F81FDA836E'  D0-D3
         DC    X'81BE16CDF6B9265B6FB077E118B74777'  D4-D7
         DC    X'88085AE6FF0F6A7066063BCA11010B5C'  D8-DB
         DC    X'8F659EFFF862AE69616BFFD3166CCF45'  DC-DF
         DC    X'A00AE278D70DD2EE4E0483543903B3C2'  E0-E3
         DC    X'A7672661D06016F74969474D3E6E77DB'  E4-E7
         DC    X'AED16A4AD9D65ADC40DF0B6637D83BF0'  E8-EB
         DC    X'A9BCAE53DEBB9EC547B2CF7F30B5FFE9'  EC-EF
         DC    X'BDBDF21CCABAC28A53B3933024B4A3A6'  F0-F3
         DC    X'BAD03605CDD7069354DE572923D967BF'  F4-F7
         DC    X'B3667A2EC4614AB85D681B022A6F2B94'  F8-FB
         DC    X'B40BBE37C30C8EA15A05DF1B2D02EF8D'  FC-FF
         END

Sample TSO help file member

)F FUNCTION -
  The CRC32 command is used to compute a Cyclic Redundancy Check (CRC)
  value for any non-VSAM dataset.  This value is used to verify the
  successful transfer of files between computers as well as to check for
  file modification by comparison with a previously computed CRC value.
  The CRC value ensures with over 99% probability (but not 100%) that
  files have transferred correctly or have not been modified.  The user
  should have an equivalent program to compute the CRC value on the
  non-MVS system.

)X SYNTAX  -
   CRC32 'dsname'
         VOLSER(volume)
   Required - dsname
)O OPERANDS -
  'dsname' - The dataset name (with optional member name for partitioned
             datasets) for which a CRC value is to be computed. The
             naming follows standard TSO conventions.  The dataset may
             be any non-VSAM dataset and have any record format, logical
             record length, and blocksize.
))VOLSER(volume) - the volume on which the dataset resides: required if
                   the dataset is not catalogued, optional otherwise.


                                                                                                 c Xephon 1996

