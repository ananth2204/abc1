JES2 dynamic exit services

JES2 Release 2.2.0 brought a large number of welcome
enhancements in various areas - tailoring and control being
among the most significant.  Of all the enhancements, the new
exit facilities would rank at or near the top.  It is possible to
provide a wide range of customized features and services using
these exits, and many installations have devised innovative
uses for them.

Curiously, despite all of the new and improved exit-related
features, there still remains what many would consider to be a
significant deficiency - the lack of a dynamic exit refresh
capability.  The current procedure for enabling a new version
of an exit requires a JES2 hot start (provided the exit is not
LPA-resident) or an IPL (if it is).  Neither is an option outside
of normally-scheduled outages, which are becoming
increasingly infrequent as continuous system operation
requirements grow.  During testing, the need for repeated hot
starts or IPLs to enable new test exit versions constitutes a
time-consuming annoyance.

The $ES (Exit Services) command supplied below allows exits
to be refreshed on the fly without system disruption.  In
addition, it provides a display capability for exit routine names,
numbers, and addresses.  These features, coupled with those
supplied already through the $DEXIT and $TEXIT commands,
provide for a reasonably comprehensive range of exit-related
services.

To install $ES, Assemble the $ES source as appropriate for an
exit 5 module.  Ensure that the supplied copy member,
$ESMSGS, is available on SYSLIB for the assembly.  Link-
edit the object module into a JES2-accessible load library under
a member name of $ES - no special link-edit attributes are
necessary.  If you choose a different member name, change the
label on the $MODULE statement to match.  Then add the
following to your JES2PARM deck:

      LOAD$ES
      EXIT5 ROUTINE=($ESRTN)

Restart JES2.  $ES should now be operative.

The $ES commands are as follows:

      $ES,REFRESH,LMOD=xxxxxxxx,AREA=[PRIVATE]
                                     [COMMON]

where xxxxxxxx is the load module name, PRIVATE means
that the exit routine(s) resides in the JES2 address space, and
COMMON means that the exit routine(s) is reentrant and
resides in the common area, ie LPA.

      $ES,DISPLAY[,NBR=nnn][,RTN=rrrrrrrr]

where nnn is an exit number between 0 and 255, and rrrrrrrr is
an exit routine name which appears as the label on a $ENTRY
macro and in the JES2PARM statement, EXITnnn
ROUTINE=(rrrrrrrr).

There are several considerations to be aware of when using
$ES:

1      Exits to be refreshed must be defined via the appropriate
      JES2PARM (LOAD and EXITnnn) at a prior JES2 start-
      up, ie the exit(s) to be refreshed must already be known to JES2.

2      $ES refresh uses an MVS LOAD macro to bring in the
      requested LMOD.  Since the entire JES2 address space
      will wait until the LOAD is satisfied, the LMOD should be
      quickly accessible (for example, if you are using a
      STEPLIB in the JES2 procedure, it should not be a large library).

3      The $ES refresh does not free any storage - each refresh
      uses new storage.  If there were a large number of
      refreshes and/or large modules involved, it is conceivable
      that a storage shortage situation could develop.  This is
      highly unlikely to occur under normal usage conditions, however.

A standard procedure which will ensure that the refresh you
request is effective is outlined in the following example:

1      Assume you currently have an exit load module for exit 1
      named LOADMOD1 with two exit routines defined inside
      it named EXIT11 and EXIT12 (these are the names
      appearing on the $ENTRY statement labels).  The
      corresponding JES2PARM statements are:

      LOAD=LOADMOD1
      EXIT1 ROUTINE=(EXIT11,EXIT12)

2      To refresh these routines, create a new load module,
      TESTMOD1, retaining the exit point names EXIT11 and
      EXIT12.  Then enter the following commands:

      $ES,DISPLAY,NBR=1            ...to display current exit 1 addresses
      $ES,REFRESH,LMOD=TESTMOD1,AREA=PRIVATE         ...to do the refresh
      $ES,DISPLAY,NBR=1                          ...to verify the refresh

3      After you are satisfied that the new routines are functioning
      correctly, rename or delete LOADMOD1 and rename
      TESTMOD1 to LOADMOD1.  Note that there is no
      explicit 'unrefresh' capability.  Backing out a refreshed
      exit that is malfunctioning consists of performing another
      refresh specifying an error-free copy.  For this reason you
      may wish to retain the production copy for some time.

4      Note that the module renaming procedure detailed above is
      not necessary if the module is MVS-non-reentrant and
      resides in the JES2 address space, which is true for most
      exits.  In such a case, $ES refresh will reload an LMOD of
      the same name as one which is already loaded.  However,
      if the module is MVS-reentrant, the MVS LOAD macro
      will reuse a currently resident copy, and a refresh of the
      new copy will not take place as expected.  Using the
      renaming procedure should ensure success under all conditions.

5      Be certain to specify the AREA parameter correctly to
      correspond to the module's residency requirements.  For
      example, AREA=COMMON must be specified for exit 8 routines.


The $ES routine

 TITLE '$ES - JES2 DYNAMIC EXIT SERVICES'
         COPY  $HASPGBL           COPY HASPGBL PARAMETERS
$ES      $MODULE NOTICE=SP220,                                         X
               $HCT,                                                   X
               $COMWORK,                                               X
               $XIT,                                                   X
               $XRT,                                                   X
               $ERA
$ESRTN   $ENTRY BASE=R12,CSECT=YES
         $SAVE
         LR    R12,R15            ADDRESSABILITY
         USING HCT,R11
         USING PCE,R13
         CLC   =C'ES,',COMVERB    EXIT SERVICES COMMAND?
         BNE   $ESR3000           NO, RETURN
$ESR0010 $ESTAE RECADDR=$ESR4900
         LA    R0,WORKAREA
         LA    R1,WORKLEN
         LA    R14,0
         LA    R15,0
         MVCL  R0,R14             ZERO WORKAREA
         MVC   EXITNBR,=X'FFFF'   EXIT NBR. INITIAL VALUE
         CLC   =C'REFRESH',COMVERB+3 'REFRESH' PROCESSING?
         BE    $ESR0100           YES
         CLC   =C'DISPLAY',COMVERB+3 'DISPLAY' PROCESSING?
         BE    $ESR0500           YES
         B     $ESR1010           ERROR
* 'REFRESH' PROCESSING *
$ESR0100 DS    0H
         LA    R1,COMVERB+10      POINT PAST COMMAND/OPERATION
         BAL   R14,$ESR4000       PROCESS OPERANDS
         LTR   R15,R15            OK?
         BNZ   $ESR3050           NO, ERROR
         TM    FLAG1,LMODFND+AREAFND NECESSARY OPERANDS GIVEN?
         BNO   $ESR1110           NO, ERROR
         TM    FLAG1,255-(LMODFND+AREAFND) UNNECESSARY OPERANDS GIVEN?
         BNZ   $ESR1140           YES, ERROR
         TM    FLAG2,COMMON       COMMON AREA LOAD?
         BO    $ESR0200           YES
         LOAD  EPLOC=LMODNAME,ERRET=$ESR1100
         B     $ESR0300
$ESR0200 DS    0H
         LOAD  EPLOC=LMODNAME,GLOBAL=YES,ERRET=$ESR1100,EOM=YES
$ESR0300 DS    0H
         LR    R2,R0              SAVE LOAD ADDRESS
         $MODCHK NAME=LMODNAME,ADDR=(R2),                              *
               TEST=(RMODE24,VERSION,EXITPTS,EXITRTNS),                *
               ERRET=$ESR1120,MESSAGE=YES
         $CWTO MSG=MSG100,L=MSG100L OPERATION SUCCESSFULLY COMPLETED
         B     $ESR3050
* 'DISPLAY' PROCESSING *
$ESR0500 DS    0H
         LA    R1,COMVERB+10      POINT PAST COMMAND/OPERATION
         BAL   R14,$ESR4000       PROCESS OPERANDS
         LTR   R15,R15            OK?
         BNZ   $ESR3050           NO, ERROR
         TM    FLAG1,255-(RTNFND+NBRFND) UNNECESSARY OPERANDS GIVEN?
         BNZ   $ESR1140           YES, ERROR
         LA    R5,0               CLEAR WORK REGISTER
         L     R3,$XITADDR        XIT ADDRESS
         USING XIT,R3             SET USING
         LA    R4,0               EXIT NO.
$ESR0530 DS    0H
         CLC   EXITNBR,=X'FFFF'   ANY EXIT NUMBER SPECIFIED?
         BE    $ESR0535           NO, ANYTHING GOES
         CH    R4,EXITNBR         YES, MATCH?
         BNE   $ESR0570           NO, NEXT XIT ENTRY
$ESR0535 DS    0H
         IC    R5,XIT#RTNS        NO. OF EXIT ROUTINES FOR THIS EXIT
         ICM   R6,15,XITXRTAD     XRT ADDRESS
         USING XRT,R6             SET USING
         BZ    $ESR0570           NONE, NEXT XIT ENTRY
$ESR0540 DS    0H
         CLI   RTNNAME,0          ANY ROUTINE NAME SPECIFIED?
         BE    $ESR0545           NO, ANYTHING GOES
         CLC   XRTRNAME,RTNNAME   COMPARE ROUTINE NAMES
         BNE   $ESR0560           NOT EQUAL, NEXT XRT ENTRY
$ESR0545 DS    0H
         OI    FLAG1,XRTMEFND     INDICATE MATCHING ENTRY FOUND
         MVC   MSG140+15(8),XRTRNAME MOVE ROUTINE NAME
         XC    WORKAREA(8),WORKAREA ZERO WORKAREA SUBFIELD
         MVZ   WORKAREA(4),XRTRADDR MOVE ZONES FROM RTN. ADDRESS
         MVN   WORKAREA+4(4),XRTRADDR MOVE NUMERICS FROM RTN. ADDRESS
         TR    WORKAREA(8),TRTABLE2 CONVERT TO EBCDIC
         LA    R1,0               MOVE EBCDIC ADDRESS TO MESSAGE
         LA    R2,MSG140+35
         LA    R14,WORKAREA
$ESR0550 DS    0H
         MVC   0(1,R2),0(R14)
         MVC   1(1,R2),4(R14)
         LA    R1,1(R1)
         LA    R2,2(R2)
         LA    R14,1(R14)
         CH    R1,=H'4'
         BL    $ESR0550
         CVD   R4,WORKAREA        CONVERT EXIT NO. TO PACKED
         UNPK  MSG140+92(3),WORKAREA+6(2) UNPACK
         OI    MSG140+94,X'F0'    DE-SIGN
         $CWTO MSG=MSG140,L=MSG140L ISSUE INFO. MESSAGE
$ESR0560 DS    0H
         LA    R6,XRTLNGTH(R6)    NEXT XRT ENTRY
         BCT   R5,$ESR0540        RECYCLE
$ESR0570 DS    0H
         LA    R3,XITLNGTH(R3)    NEXT XIT ENTRY
         LA    R4,1(R4)           NEXT EXIT NUMBER
         CH    R4,=H'255'         END OF EXITS?
         BNH   $ESR0530           NO, RECYCLE
         TM    FLAG1,XRTMEFND     ANY MATCHING ROUTINE NAME FOUND?
         BO    $ESR3050           YES
         $CWTO MSG=MSG150,L=MSG150L ISSUE 'NO MATCH FOUND' MESSAGE
         B     $ESR3050
* MAINLINE ERROR DISPLAYS *
$ESR1010 DS    0H
         $CWTO MSG=MSG070,L=MSG070L
         B     $ESR3050
$ESR1100 DS    0H
         $CWTO MSG=MSG020,L=MSG020L
         B     $ESR3050
$ESR1110 DS    0H
         $CWTO MSG=MSG080,L=MSG080L
         B     $ESR3050
$ESR1120 DS    0H
         $CWTO MSG=MSG030,L=MSG030L
         B     $ESR3050
$ESR1140 DS    0H
         $CWTO MSG=MSG110,L=MSG110L
         B     $ESR3050
* TERMINATION PROCESSING *
$ESR3000 DS    0H
         LA    R15,0
         B     $ESR3100
$ESR3050 DS    0H
         LA    R15,8
$ESR3100 DS    0H
         $STORE R15
         $RETURN RC=(R15)
* INTERNAL SUBROUTINES - PROCESS OPERANDS *
$ESR4000 DS    0H
         STM   R0,R15,$ESR4800    SAVE REGISTERS
$ESR4010 DS    0H
         CLC   =C',LMOD=',0(R1)   'LOAD MODULE' OPERAND?
         BE    $ESR4200           YES
         CLC   =C',AREA=',0(R1)   'AREA' OPERAND?
         BE    $ESR4300           YES
         CLC   =C',RTN=',0(R1)    'RTN' OPERAND?
         BE    $ESR4400           YES
         CLC   =C',NBR=',0(R1)    'NBR' OPERAND?
         BE    $ESR4500           YES
         CLI   0(R1),C' '         END OF OPERANDS?
         BE    $ESR4700           YES
         B     $ESR4600           ERROR, UNRECOGNIZABLE OPERAND
* 'LMOD' OPERAND *
$ESR4200 DS    0H
         LA    R3,6(R1)           POINT PAST ',LMOD='
         LA    R1,9(R3)           POINT PAST MAX. LMOD LENGTH + 1
         TRT   0(9,R3),TRTABLE1   LOOK FOR ENDING COMMA OR BLANK
         SR    R1,R3              GET LENGTH OF LMOD NAME
         BZ    $ESR4610           ERROR, ZERO LENGTH
         CH    R1,=H'8'           LENGTH GREATER THAN EIGHT?
         BH    $ESR4620           YES, ERROR
         MVC   LMODNAME,=CL8' '   BLANK FIELD
         BCTR  R1,0               DECREMENT LENGTH FOR EXECUTE
         LA    R14,LMODNAME       TARGET ADDRESS
         LR    R15,R3             SOURCE ADDRESS
         EX    R1,EXECMVC         MOVE LOAD MODULE NAME
         OI    FLAG1,LMODFND      INDICATE LOAD MODULE FOUND
         LA    R1,1(R1,R3)        MOVE ON TO NEXT OPERAND
         B     $ESR4010           RECYCLE
* 'AREA' OPERAND *
$ESR4300 DS    0H
         CLC   =C',AREA=COMMON',0(R1) LOAD INTO COMMON AREA?
         BE    $ESR4310           YES
         CLC   =C',AREA=PRIVATE',0(R1) LOAD INTO PRIVATE AREA?
         BE    $ESR4320           YES
         B     $ESR4630           ERROR
$ESR4310 DS    0H
         LA    R1,12(R1)          POINT PAST ',AREA=COMMON'
         OI    FLAG2,COMMON       INDICATE COMMON LOAD
         B     $ESR4360
$ESR4320 DS    0H
         LA    R1,13(R1)          POINT PAST ',AREA=PRIVATE'
         OI    FLAG2,PRIVATE      INDICATE PRIVATE LOAD
$ESR4360 DS    0H
         OI    FLAG1,AREAFND      INDICATE AREA OPERAND FOUND
         B     $ESR4010           RECYCLE
* 'RTN' OPERAND *
$ESR4400 DS    0H
         LA    R3,5(R1)           POINT PAST ',RTN='
         LA    R1,9(R3)           POINT PAST MAX. RTN. LENGTH + 1
         TRT   0(9,R3),TRTABLE1   LOOK FOR ENDING COMMA OR BLANK
         SR    R1,R3              GET LENGTH OF RTN. NAME
         BZ    $ESR4640           ERROR, ZERO LENGTH
         CH    R1,=H'8'           LENGTH GREATER THAN EIGHT?
         BH    $ESR4650           YES, ERROR
         MVC   RTNNAME,=CL8' '    BLANK FIELD
         BCTR  R1,0               DECREMENT LENGTH FOR EXECUTE
         LA    R14,RTNNAME        TARGET ADDRESS
         LR    R15,R3             SOURCE ADDRESS
         EX    R1,EXECMVC         MOVE ROUTINE NAME
         OI    FLAG1,RTNFND       INDICATE ROUTINE FOUND
         LA    R1,1(R1,R3)        MOVE ON TO NEXT OPERAND
         B     $ESR4010           RECYCLE
* 'NBR' OPERAND *
$ESR4500 DS    0H
         LA    R3,5(R1)           POINT PAST ',NBR='
         LA    R1,4(R3)           POINT PAST MAX. NBR. LENGTH + 1
         TRT   0(9,R3),TRTABLE1   LOOK FOR ENDING COMMA OR BLANK
         SR    R1,R3              GET LENGTH OF NBR. VALUE
         BZ    $ESR4660           ERROR, ZERO LENGTH
         CH    R1,=H'3'           LENGTH GREATER THAN THREE?
         BH    $ESR4670           YES, ERROR
         LR    R4,R1              LENGTH OF VALUE
         LR    R5,R3              START OF VALUE
$ESR4510 DS    0H
         CLI   0(R5),C'0'         LESS THAN ZERO?
         BL    $ESR4680           YES, ERROR
         CLI   0(R5),C'9'         GREATER THAN NINE?
         BH    $ESR4680           YES, ERROR
         LA    R5,1(R5)           NEXT DIGIT
         BCT   R4,$ESR4510        RECYCLE
         BCTR  R1,0               DECREMENT LENGTH FOR EXECUTE
         LA    R14,WORKAREA       TARGET ADDRESS
         LR    R15,R3             SOURCE ADDRESS
         EX    R1,EXECPACK        PACK THE NBR. VALUE
         CP    WORKAREA(8),=P'255' GREATER THAN 255?
         BH    $ESR4680           YES, ERROR
         CVB   R2,WORKAREA        CONVERT TO HEX.
         STH   R2,EXITNBR         STORE
         OI    FLAG1,NBRFND       INDICATE NUMBER FOUND
         LA    R1,1(R1,R3)        MOVE ON TO NEXT OPERAND
         B     $ESR4010           RECYCLE
* SUBROUTINE ERROR DISPLAYS *
$ESR4600 DS    0H
         $CWTO MSG=MSG090,L=MSG090L
         B     $ESR4710
$ESR4610 DS    0H
         $CWTO MSG=MSG040,L=MSG040L
         B     $ESR4710
$ESR4620 DS    0H
         $CWTO MSG=MSG050,L=MSG050L
         B     $ESR4710
$ESR4630 DS    0H
         $CWTO MSG=MSG060,L=MSG060L
         B     $ESR4710
$ESR4640 DS    0H
         $CWTO MSG=MSG120,L=MSG120L
         B     $ESR4710
$ESR4650 DS    0H
         $CWTO MSG=MSG130,L=MSG130L
         B     $ESR4710
$ESR4660 DS    0H
         $CWTO MSG=MSG160,L=MSG160L
         B     $ESR4710
$ESR4670 DS    0H
         $CWTO MSG=MSG170,L=MSG170L
         B     $ESR4710
$ESR4680 DS    0H
         $CWTO MSG=MSG180,L=MSG180L
         B     $ESR4710
* ALL OPERANDS PROCESSED *
$ESR4700 DS    0H
         LA    R15,0              SUCCESSFUL
         B     $ESR4720
$ESR4710 DS    0H
         LA    R15,4              UNSUCCESSFUL
$ESR4720 DS    0H
         LM    R0,R14,$ESR4800
         BR    R14                RETURN TO CALLER
$ESR4800 DC    16F'0'             REG. SAVE AREA FOR THIS SUBROUTINE
         DROP  R12
* ESTAE RECOVERY ROUTINE *
$ESR4900 DS    0H
         $SAVE
         LR    R12,R15
         USING $ESR4900,R12
         LR    R10,R1
         USING ERA,R10
         $CWTO MSG=MSG010,L=MSG010L
         L     R0,=A($ESR3050)
         $SETRP RESUME=(R0)
         $RETURN
         DROP  R12
* GENERALIZED EXECUTED INSTRUCTIONS *
EXECMVC  MVC   0(0,R14),0(R15)
EXECPACK PACK  0(8,R14),0(0,R15)
* DATA AREA *
TRTABLE1 DC    256X'0'            TRANSLATE TABLE
         ORG   TRTABLE1+C' '
         DC    C' '               SENSITIZE TO BLANK
         ORG   TRTABLE1+C','
         DC    C','               SENSITIZE TO COMMA
         ORG
TRTABLE2 DC    256X'0'
         ORG   TRTABLE2+X'00'
         DC    C'0'
         ORG   TRTABLE2+X'01'
         DC    C'1'
         ORG   TRTABLE2+X'10'
         DC    C'1'
         ORG   TRTABLE2+X'02'
         DC    C'2'
         ORG   TRTABLE2+X'20'
         DC    C'2'
         ORG   TRTABLE2+X'03'
         DC    C'3'
         ORG   TRTABLE2+X'30'
         DC    C'3'
         ORG   TRTABLE2+X'04'
         DC    C'4'
         ORG   TRTABLE2+X'40'
         DC    C'4'
         ORG   TRTABLE2+X'05'
         DC    C'5'
         ORG   TRTABLE2+X'50'
         DC    C'5'
         ORG   TRTABLE2+X'06'
         DC    C'6'
         ORG   TRTABLE2+X'60'
         DC    C'6'
         ORG   TRTABLE2+X'07'
         DC    C'7'
         ORG   TRTABLE2+X'70'
         DC    C'7'
         ORG   TRTABLE2+X'08'
         DC    C'8'
         ORG   TRTABLE2+X'80'
         DC    C'8'
         ORG   TRTABLE2+X'09'
         DC    C'9'
         ORG   TRTABLE2+X'90'
         DC    C'9'
         ORG   TRTABLE2+X'0A'
         DC    C'A'
         ORG   TRTABLE2+X'A0'
         DC    C'A'
         ORG   TRTABLE2+X'0B'
         DC    C'B'
         ORG   TRTABLE2+X'B0'
         DC    C'B'
         ORG   TRTABLE2+X'0C'
         DC    C'C'
         ORG   TRTABLE2+X'C0'
         DC    C'C'
         ORG   TRTABLE2+X'0D'
         DC    C'D'
         ORG   TRTABLE2+X'D0'
         DC    C'D'
         ORG   TRTABLE2+X'0E'
         DC    C'E'
         ORG   TRTABLE2+X'E0'
         DC    C'E'
         ORG   TRTABLE2+X'0F'
         DC    C'F'
         ORG   TRTABLE2+X'F0'
         DC    C'F'
         ORG
         COPY  $ESMSGS            MESSAGE TEXTS
WORKAREA DS    0D
         DC    08X'0'             MISCELLANEOUS WORK AREA
FLAG1    DC    X'0'               FLAG BYTE 1
LMODFND  EQU   X'80'              'LMOD' WAS FOUND
AREAFND  EQU   X'40'              'AREA' WAS FOUND
RTNFND   EQU   X'20'              'RTN' WAS FOUND
XRTMEFND EQU   X'10'              XRT MATCHING ENTRY FOR 'RTN=' FOUND
NBRFND   EQU   X'08'              'NBR' WAS FOUND
FLAG2    DC    X'0'               FLAG BYTE 2
COMMON   EQU   X'80'              COMMON AREA LOAD REQUESTED
PRIVATE  EQU   X'40'              PRIVATE AREA LOAD REQUESTED
LMODNAME DC    CL8' '             EXIT LOAD MODULE NAME
RTNNAME  DC    CL8' '             EXIT ROUTINE NAME
EXITNBR  DC    H'0'               EXIT NUMBER
WORKLEN  EQU   *-WORKAREA
         LTORG
         $MODEND ,
         END


The $ESMSGS copy member

MSG010   EQU   *
 DC C'$ES010 $ESTAE recovery invoked - enter $S command if recovery is *
               successful'
MSG010L  EQU   *-MSG010
MSG020   EQU   *
 DC C'$ES020 Error attempting to load specified LMOD'
MSG020L  EQU   *-MSG020
MSG030   EQU   *
 DC C'$ES030 Error from $MODCHK routine'
MSG030L  EQU   *-MSG030
MSG040   EQU   *
 DC C'$ES040 Error - no LMOD value supplied'
MSG040L  EQU   *-MSG040
MSG050   EQU   *
 DC C'$ES050 Error - LMOD value length must not exceed 8 characters'
MSG050L  EQU   *-MSG050
MSG060   EQU   *
 DC C'$ES060 Error - AREA value must be COMMON or PRIVATE'
MSG060L  EQU   *-MSG060
MSG070   EQU   *
 DC C'$ES070 Error - invalid operation'
MSG070L  EQU   *-MSG070
MSG080   EQU   *
 DC C'$ES080 Error - necessary operands not supplied'
MSG080L  EQU   *-MSG080
MSG090   EQU   *
 DC C'$ES090 Error - unrecognizable or incomplete operand'
MSG090L  EQU   *-MSG090
MSG100   EQU   *
 DC C'$ES100 Operation successfully completed'
MSG100L  EQU   *-MSG100
MSG110   EQU   *
 DC C'$ES110 Error - unnecessary operands supplied'
MSG110L  EQU   *-MSG110
MSG120   EQU   *
 DC C'$ES120 Error - No RTN value supplied'
MSG120L  EQU   *-MSG120
MSG130   EQU   *
 DC C'$ES130 Error - RTN value length must not exceed 8 characters'
MSG130L  EQU   *-MSG130
MSG140   EQU   *
 DC C'$ES140 Routine=XXXXXXXX    Address=XXXXXXXX                      *
                              Exit number =XXX'
MSG140L  EQU   *-MSG140
MSG150   EQU   *
 DC C'$ES150 No match for the specified criteria was found'
MSG150L  EQU   *-MSG150
MSG160   EQU   *
 DC C'$ES160 Error - No NBR value supplied'
MSG160L  EQU   *-MSG160
MSG170   EQU   *
 DC C'$ES170 Error - NBR value length must not exceed 3 digits'
MSG170L  EQU   *-MSG170
MSG180   EQU   *
 DC C'$ES180 Error - NBR must have a numeric value between 0 and 255'
MSG180L  EQU   *-MSG180


                                          c Xephon 1991

