Re-entrant 31-bit table binary search subroutine

Today, it is generally accepted by anyone involved with
computing performance that one of the fundamental
requirements for increasing that performance is to keep as
much data as possible in storage close to the CPU.  This
naturally leads to more data structures being built and
maintained in storage.

Tables are obvious examples of such structures, and with the
immense addressing capabilities of today's virtual storage
systems, these can reach previously unsupportable sizes.  If a
large table is kept in sorted order, the time required to locate an
entry can be substantially reduced by using a binary search
approach.  The BINSRCH subroutine supplied below can
search a fixed entry length table of any size, sorted in
ascending or descending order, to locate an entry matching the
supplied search argument.  The comparison field may comprise
either the whole entry or a portion of it starting at any
displacement into the entry.

The subroutine's parameters are:

1      Start of the table.

2      End of the table plus 1.

3      Length of a table entry (one fullword).

4      Sequence in which the table is sorted (one character - 'A'
      for ascending or 'D' for descending).

5      Search argument (variable length).

6      Search argument length (one fullword).

7      Displacement into a table entry of the search argument
      comparison field (one fullword).

If no errors are encountered and a match with the search
argument is found, the address of the matching entry is
returned in Register 0.  Error conditions are defined and
handled in the section of code beginning at label BINS2100.

The subroutine should be link-edited with the RENT attribute.
It may subsequently be used either statically linked in with the
calling routine, or else it can be dynamically loaded and called.
The calling example supplied below uses the latter technique.
The caller should be in AMODE 31 to ensure normal
execution.  In the supplied example, Register 0 would contain
the address of the TEST5 entry upon return to the caller.


BINSRCH SUBROUTINE

 TITLE 'B I N S R C H  -  BINARY SEARCH AN IN-STORAGE TABLE'
BINSRCH  AMODE 31
BINSRCH  RMODE ANY
BINSRCH  CSECT
         STM   R14,R12,12(R13)             LINKAGE
         LR    R12,R15
         USING BINSRCH,R12
         LR    R11,R1                      SAVE P.A.L. POINTER
* VALIDITY-CHECK THE PARAMETERS PASSED *
         CLC   0(4,R11),4(R11)             TABLE START = TABLE END?
         BE    BINS2100                    YES, NULL, ENTRY NOT FOUND
         BH    BINS2200                    START IS HIGHER, ERROR
         LM    R2,R8,0(R11)                PARM ADDRS
         SLR   R3,R2                       R3 = TABLE LENGTH
         LA    R2,0                        ZERO R2 FOR DIVIDE
         D     R2,0(R4)                    DIVIDE BY ENTRY LENGTH
         LTR   R2,R2                       INTEGRAL MULTIPLE?
         BNZ   BINS2300                    NO, ERROR
         LM    R2,R3,0(R11)                RELOAD ALTERED REGISTERS
         L     R1,0(R7)                    LOAD ARG. LENGTH
         AL    R1,0(R8)                    ADD ARG. DISPLACEMENT
         CL    R1,0(R4)                    > ENTRY LENGTH?
         BH    BINS2400                    YES, ERROR
         SL    R3,0(R4)                    POINT TO LAST TABLE ENTRY
         CLI   0(R5),C'A'                  ASCENDING ORDER TABLE?
         BE    BINS0100                    YES
         CLI   0(R5),C'D'                  DESCENDING ORDER TABLE?
         BE    BINS1000                    YES
         B     BINS2500                    ERROR
* SEARCH A TABLE SORTED IN ASCENDING ORDER *
BINS0100 DS    0H
         LR    R10,R2                      SAVE CURRENT ENTRY ADDR
         LR    R0,R2                       LOWER ENTRY ADDR
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE
         BE    BINS2000                    FOUND
         BH    BINS2100                    ENTRY NOT IN TABLE
         LR    R10,R3                      SAVE CURRENT ENTRY ADDR
         LR    R0,R3                       UPPER ENTRY ADDR
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE
         BE    BINS2000                    FOUND
         BL    BINS2100                    ENTRY NOT IN TABLE
BINS0150 DS    0H
         LR    R1,R3                       HIGHER ENTRY ADDR
         SLR   R1,R2                       TABLE SEGMENT LENGTH
         SRL   R1,1                        DIVIDE BY 2
         LA    R0,0                        ZERO R0 FOR DIVIDE
         D     R0,0(R4)                    EXPRESS IN NO. OF ENTRIES
         LA    R0,0                        ZERO R0 FOR MULTIPLY
         M     R0,0(R4)                    CONVERT BACK TO BYTES
         ALR   R1,R2                       ADD LOWER ENTRY ADDR
         LR    R10,R1                      SAVE NEW CURRENT ENTRY ADDR
         LR    R0,R1                       PUT IN R0
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE CONTENTS
         BE    BINS2000                    FOUND
         BL    BINS0200                    NEW CURRENT ENTRY LESS
         BH    BINS0300                    NEW CURRENT ENTRY GREATER
BINS0200 DS    0H
         CLR   R2,R10                      IS LOWER = CURRENT?
         BE    BINS2100                    YES, ARGUMENT NOT FOUND
         LR    R2,R10                      INCREASE LOWER ENTRY ADDR
         B     BINS0150                    REITERATE
BINS0300 DS    0H
         CLR   R3,R10                      IS HIGHER = CURRENT?
         BE    BINS2100                    YES, ARGUMENT NOT FOUND
         LR    R3,R10                      DECREASE HIGHER ENTRY ADDR
         B     BINS0150                    REITERATE
* SEARCH A TABLE SORTED IN DESCENDING ORDER *
BINS1000 DS    0H
         LR    R10,R2                      SAVE CURRENT ENTRY ADDR
         LR    R0,R2                       LOWER ENTRY ADDR
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE
         BE    BINS2000                    FOUND
         BL    BINS2100                    ENTRY NOT IN TABLE
         LR    R10,R3                      SAVE CURRENT ENTRY ADDR
         LR    R0,R3                       UPPER ENTRY ADDR
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE
         BE    BINS2000                    FOUND
         BH    BINS2100                    ENTRY NOT IN TABLE
BINS1150 DS    0H
         LR    R1,R3                       HIGHER ENTRY ADDR
         SLR   R1,R2                       TABLE SEGMENT LENGTH
         SRL   R1,1                        DIVIDE BY 2
         LA    R0,0                        ZERO R0 FOR DIVIDE
         D     R0,0(R4)                    EXPRESS IN NO OF ENTRIES
         LA    R0,0                        ZERO R0 FOR MULTIPLY
         M     R0,0(R4)                    CONVERT BACK TO BYTES
         ALR   R1,R2                       ADD LOWER ENTRY ADDR
         LR    R10,R1                      SAVE NEW CURRENT ENTRY ADDR
         LR    R0,R1                       PUT IN R0
         AL    R0,0(R8)                    ADD DISPLACEMENT
         L     R1,0(R7)                    ARGUMENT LENGTH
         LR    R14,R6                      SEARCH ARGUMENT ADDR
         LR    R15,R1                      SAME LENGTH
         CLCL  R0,R14                      COMPARE CONTENTS
         BE    BINS2000                    FOUND
         BL    BINS1200                    NEW CURRENT ENTRY LESS
         BH    BINS1300                    NEW CURRENT ENTRY GREATER
BINS1200 DS    0H
         CLR   R3,R10                      IS HIGHER = CURRENT?
         BE    BINS2100                    YES, ARGUMENT NOT FOUND
         LR    R3,R10                      DECREASE HIGHER ENTRY ADDR
         B     BINS1150                    REITERATE
BINS1300 DS    0H
         CLR   R2,R10                      IS LOWER = CURRENT?
         BE    BINS2100                    YES, ARGUMENT NOT FOUND
         LR    R2,R10                      INCREASE LOWER ENTRY ADDR
         B     BINS1150                    REITERATE
* TERMINATION PROCESSING *
BINS2000 DS    0H                          MATCH FOUND FOR ARGUMENT
         LR    R0,R10                      LOAD MATCHING ENTRY ADDR
         LA    R15,0
         B     BINS3000
BINS2100 DS    0H                          MATCH NOT FOUND FOR ARGUMENT
         LA    R15,4
         B     BINS3000
BINS2200 DS    0H                          TABLE START ADDR GREATER
         LA    R15,8                       THAN TABLE END ADDR
         B     BINS3000
BINS2300 DS    0H                          TABLE LENGTH NOT AN INTEGRAL
         LA    R15,12                      MULTIPLE OF ENTRY LENGTH
         B     BINS3000
BINS2400 DS    0H                          ENTRY LENGTH NOT > OR =
         LA    R15,16                      ARG LENGTH + DISPLACEMENT
         B     BINS3000
BINS2500 DS    0H                          TABLE SORT TYPE NOT
         LA    R15,20                      ASCENDING OR DESCENDING
* EXIT PROCESSING *
BINS3000 DS    0H
         L     R14,12(R13)
         LM    R1,R12,24(R13)
         BR    R14
         END


BINSRCH CALLING EXAMPLE

BINSCALL AMODE 31
BINSCALL CSECT
         LOAD  EP=BINSRCH
         LR    R15,R0
         CALL (15),(TABSTART,TABEND,ENTLEN,SORTYPE,ARG,ARGLEN,ARGDISPL)
         LTR   R15,R15
         BNZ   error routine
         .
         .
         .
TABSTART EQU   *
         DC    C'TEST7'
         DC    C'TEST5'
         DC    C'TEST1'
         DC    C'TEST1'
         DC    C'TEST1'
         DC    C'TEST1'
         DC    C'TEST1'
TABEND   EQU   *
ENTLEN   DC    F'5'
SORTYPE  DC    C'D'
ARG      DC    C'T5'
ARGLEN   DC    F'2'
ARGDISPL DC    F'3'


                                                                  c Xephon 1991

