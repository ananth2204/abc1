Utilities for 3270 terminal control under TSO

The FULLSCR option of the TSO TPUT macro can provide a
degree of flexibility in the formatting of 3270-type screens
which is either not available at all or not easily implemented in
the ISPF full-screen dialog environment.  For example,
displaying 'pop-up' windows, selectively erasing parts of a
display, and so on.  If you are a user of FULLSCR TPUT then
you will appreciate the constant need to refer to the 3270 IDS
Reference Summary to determine buffer addresses and attribute
byte values.  The following describes two Assembler macros
and an Assembler program designed to simplify the creation of
3270 datastreams which use attributes and Set Buffer Address
(SBA) pairs.


ASSEMBLER MACRO SBA3270

The SBA3270 macro allows easy specification of 3270-type
buffer addresses by referring to screen row and column by
number.  It supports three screen sizes: 24 by 80 (the default),
43 by 80, and 27 by 132.  You can optionally specify that the
Insert Cursor control order (X'13') is generated following the
addresses, that the SBA control order (X'11') is omitted before
the addresses, that the Repeat to Address (X'3C') control order
is generated following the addresses, and that a two-character
hexadecimal repeat value is included.

For example, the following code will generate the sequence
necessary to clear the bottom half of a 24 by 80 screen and
return the cursor to the start of the cleared area;

         TPUT  CLEARSCR,CLEARLEN,FULLSCR
          .
          .
CLEARSCR EQU   *
         DC    X'C3'
         SBA3270 ROW=13,COL=01,CURSOR=YES,REPEAT=YES
         SBA3270 ROW=24,COL=80,STARTSBA=NO,REPCHAR=00
CLEARLEN EQU   *-CLEARSCR

Note that the macro does not do any global consistency
checking to ensure that a logically correct sequence of controls
is generated.

         MACRO
         SBA3270 &SCRNSZ=24X80,                                        X
               &STARTSBA=YES,                                          X
               &ROW=,                                                  X
               &COL=,                                                  X
               &CURSOR=NO,                                             X
               &REPEAT=NO,                                             X
               &REPCHAR=
.*------------------------------------------------------------------*
.*  MACRO TO GENERATE AN SBA SEQUENCE FOR A 3270-TYPE TERMINAL      *
.*  GIVEN THE ROW (1-43) AND COLUMN (1-132) (BOTH REQUIRED).        *
.*  PARAMETERS:                                                     *
.*  SCRNSZ=   (OPTIONAL)                                            *
.*  BY DEFAULT THE TERMINAL IS ASSUMED TO HAVE A 24X80 DISPLAY.     *
.*  FOR A 43X80 DISPLAY THE PARAMETER "SCRNSZ=43X80" IS REQUIRED.   *
.*  FOR A 27X132 DISPLAY THE PARAMETER "SCRNSZ=27X132" IS REQUIRED. *
.*  STARTSBA= (OPTIONAL)                                            *
.*  MUST BE YES OR NO. IF NO, X'11' (SET BUFFER ADDRESS) WILL BE    *
.*  OMITTED.                                                        *
.*  ROW=      (REQUIRED)                                            *
.*  MUST BE A NUMERIC VALUE WITHIN THE RANGE OF THE NUMBER OF ROWS  *
.*  FOR THE SPECIFIED SCREEN SIZE.                                  *
.*  COL=      (REQUIRED)                                            *
.*  MUST BE A NUMERIC VALUE WITHIN THE RANGE OF THE NUMBER OF       *
.*  COLUMNS FOR THE SPECIFIED SCREEN SIZE.                          *
.*  THE VALUE FOR BOTH ROW AND COL IS CHECKED TO BE A SELF-DEFINING *
.*  TERM, SO CONSTRUCTIONS OF THE FOLLOWING TYPE ARE INVALID;       *
.*  TEN      EQU   10                                               *
.*  TWENTY   EQU   20                                               *
.*           SBA3270 ROW=TEN+4,COL=TWENTY-2                         *
.*  CURSOR=   (OPTIONAL)                                            *
.*  MUST BE YES OR NO. IF YES, X'13' (INSERT CURSOR) WILL BE        *
.*  GENERATED FOLLOWING THE SBA ADDRESSES.                          *
.*  REPEAT=   (OPTIONAL)                                            *
.*  MUST BE YES OR NO. IF YES, X'3C' (REPEAT TO ADDRESS) WILL BE    *
.*  GENERATED FOLLOWING THE SBA ADDRESSES.                          *
.*  REPCHAR=  (OPTIONAL)                                            *
.*  MUST BE NULL OR A TWO-CHARACTER REPRESENTATION OF A HEX VALUE.  *
.*  IF TWO VALID HEX CHARACTERS, THESE WILL BE GENERATED FOLLOWING  *
.*  THE SBA ADDRESSES.                                              *
.*------------------------------------------------------------------*
         LCLA  &X
         LCLA  &Y
         LCLA  &Z
         LCLA  &QUOT
         LCLA  &REM
         LCLA  &MAXROWS
         LCLA  &MAXCOLS
         LCLB  &ENDLOOP
         LCLC  &RC
         LCLC  &ERRM
         LCLC  &SBA
         LCLC  &SBAST
         LCLC  &DIGIT1
         LCLC  &DIGIT2
         AIF   ('&SCRNSZ' EQ '24X80').D24X80
         AIF   ('&SCRNSZ' EQ '43X80').D43X80
         AIF   ('&SCRNSZ' EQ '27X132').D27X132
         MNOTE 12,'*** ERROR ***, SCRNSZ= PARAMETER IS INVALID'
         MNOTE 12,'    MUST BE ONE OF "SCRNSZ=24X80" (DEFAULT),'
         MNOTE 12,'    "SCRNSZ=43X80", OR "SCRNSZ=27X132"'
         MEXIT
.D24X80  ANOP
&MAXROWS SETA  24
&MAXCOLS SETA  80
         AGO   .CHKVALS
.D43X80  ANOP
&MAXROWS SETA  43
&MAXCOLS SETA  80
         AGO   .CHKVALS
.D27X132 ANOP
&MAXROWS SETA  27
&MAXCOLS SETA  132
.CHKVALS ANOP
&ERRM    SETC  'ROW= PARAMETER IS REQUIRED'
         AIF   (T'&ROW EQ 'O').ERMNOTE
&ERRM    SETC  'ROW= PARAMETER IS NOT NUMERIC'
         AIF   (T'&ROW NE 'N').ERMNOTE
&ERRM    SETC  'ROW= VALUE MUST BE >= 1'
         AIF   (&ROW LT 1).ERMNOTE
&ERRM    SETC  'ROW= VALUE MUST BE <= &MAXROWS'
         AIF   (&ROW GT &MAXROWS).ERMNOTE
&ERRM    SETC  'COL= PARAMETER IS REQUIRED'
         AIF   (T'&COL EQ 'O').ERMNOTE
&ERRM    SETC  'COL= PARAMETER IS NOT NUMERIC'
         AIF   (T'&COL NE 'N').ERMNOTE
&ERRM    SETC  'COL= VALUE MUST BE >= 1'
         AIF   (&COL LT 1).ERMNOTE
&ERRM    SETC  'COL= VALUE MUST BE <= &MAXCOLS'
         AIF   (&COL GT &MAXCOLS).ERMNOTE
&ERRM    SETC  'STARTSBA= PARAMETER MUST BE YES OR NO'
         AIF   ('&STARTSBA' NE 'YES' AND '&STARTSBA' NE 'NO').ERMNOTE
&ERRM    SETC  'CURSOR= PARAMETER MUST BE YES OR NO'
         AIF   ('&CURSOR' NE 'YES' AND '&CURSOR' NE 'NO').ERMNOTE
&ERRM    SETC  'REPEAT= PARAMETER MUST BE YES OR NO'
         AIF   ('&REPEAT' NE 'YES' AND '&REPEAT' NE 'NO').ERMNOTE
&ERRM    SETC  'REPCHAR= MUST BE NULL OR TWO HEX CHARACTERS'
         AIF   (T'&REPCHAR EQ 'O').CONT
         AIF   (K'&REPCHAR NE 2).ERMNOTE
&RC      SETC  '&REPCHAR'(1,1)
.CHKRC   AIF   ('&RC' EQ 'A' OR '&RC' EQ 'B' OR '&RC' EQ 'C' OR '&RC' EX
               Q 'D' OR '&RC' EQ 'E' OR '&RC' EQ 'F' OR '&RC' EQ '0' ORX
               '&RC' EQ '1' OR '&RC' EQ '2' OR '&RC' EQ '3' OR '&RC' EQX
               '4' OR '&RC' EQ '5' OR '&RC' EQ '6' OR '&RC' EQ '7' OR 'X
               &RC' EQ '8' OR '&RC' EQ '9').CHKRCX
         AGO   .ERMNOTE
.CHKRCX  ANOP
&RC      SETC  '&REPCHAR'(2,1)
         AIF   (&ENDLOOP).CONT
&ENDLOOP SETB  1
         AGO   .CHKRC
.ERMNOTE MNOTE 12,'** ERROR **, &ERRM'
         MEXIT
.CONT    ANOP
&ENDLOOP SETB  0
&Z       SETA  &COL+((&ROW-1)*&MAXCOLS)
&X       SETA  &Z/64
&Y       SETA  &Z-(64*(&Z/64))
         AIF   (&Y EQ 0).SET64
&X       SETA  &X+1
         AGO   .CALCXY
.SET64   ANOP
&Y       SETA  64
.CALCXY  ANOP
.*  --------------------------------------------------------
.*  VARIABLES X AND Y NOW CONTAIN A VALUE FROM 1 THRU 64.
.*  USE THESE VALUES TO CALCULATE THE ACTUAL SBA BYTE VALUE
.*  FOR THE FIRST AND SECOND SBA ADDRESS BYTES RESPECTIVELY.
.*  --------------------------------------------------------
&QUOT    SETA  1+(&X/16)
&REM     SETA  &X-(16*(&X/16))
         AIF   (&REM GT 0).CONT1
&QUOT    SETA  &QUOT-1
&REM     SETA  16
.CONT1   ANOP
&DIGIT2  SETC  '0123456789ABCDEF'(&REM,1)
         AIF   (&REM GT 10 OR &REM EQ 0).CONT2
&DIGIT1  SETC  '0123456789ABCDEF'(&QUOT+12,1)
         AGO   .CONT3
.CONT2   ANOP
&Z       SETA  &QUOT+3
&DIGIT1  SETC  '&Z'
.CONT3   AIF   (&REM GT 1).CONT4
&Z       SETA  &QUOT+3
&DIGIT1  SETC  '&Z'
.*  ------------------------------------------------------------
.*  NOW CHECK FOR TWO SPECIAL CASES. A VALUE OF X'E1' MUST BE
.*  CHANGED TO X'61'. A VALUE OF X'70' MUST BE CHANGED TO X'F0'.
.*  ------------------------------------------------------------
.CONT4   AIF   ('&DIGIT1&DIGIT2' EQ 'E1').ALTERE1
         AIF   ('&DIGIT1&DIGIT2' EQ '70').ALTER70
         AGO   .CONT5
.ALTERE1 ANOP
&DIGIT1  SETC  '6'
         AGO   .CONT5
.ALTER70 ANOP
&DIGIT1  SETC  'F'
.CONT5   ANOP
&SBA     SETC  '&SBA&DIGIT1&DIGIT2'
&X       SETA  &Y
         AIF   (&ENDLOOP).CONT6
&ENDLOOP SETB  1
         AGO   .CALCXY
.CONT6   ANOP
         AIF   ('&STARTSBA' EQ 'NO').DEFSBA
&SBAST   SETC  '11'
.DEFSBA  ANOP
         DC    X'&SBAST&SBA'    SET BUFFER ADDRESS
         AIF   ('&CURSOR' EQ 'NO').CHKREP
         DC    X'13'      INSERT CURSOR
.CHKREP  AIF   ('&REPEAT' EQ 'NO').CHKREPC
         DC    X'3C'      REPEAT TO ADDRESS
.CHKREPC AIF   ('&REPCHAR' EQ '').ENDMAC
         DC    X'&REPCHAR'
.ENDMAC  MEND


ASSEMBLER MACRO ATT3270

The ATT3270 macro generates a 3270 attribute character
sequence.  All parameters are optional: the default attribute is
normal intensity, protected auto-skip, with modified data tag
off and no pen detection.  The user may also specify that an
Insert Cursor control order be generated following the attribute
definition.

         MACRO
         ATT3270 &FIELD=ASKIP,    (ASKIP | PROT | UNPROT | NUNPROT)    X
               &INTENS=NORM,      (NORM | DARK | HIGH)                 X
               &PENDET=NO,        (YES | NO)                           X
               &MDT=OFF,          (OFF | ON)                           X
               &CURSOR=NO         (YES | NO)
.*------------------------------------------------------------------*
.*  MACRO TO GENERATE A 3270 FIELD ATTRIBUTE (NON-EXTENDED).        *
.*  PARAMETERS:                                                     *
.*  ALL PARAMETERS ARE OPTIONAL. THE PROTOTYPE STATEMENT SHOWS THE  *
.*  ACCEPTABLE VALUES FOR EACH PARAMETER.                           *
.*------------------------------------------------------------------*
         LCLB  &B0
         LCLB  &B2
         LCLB  &B3
         LCLB  &B4
         LCLB  &B5
         LCLB  &B7
         LCLB  &BPDT
         LCLC  &INVOP
.*  -------------------------------------------------
.*  CHECK ALL KEYWORD PARAMETERS FOR INVALID OPERANDS
.*  -------------------------------------------------
         AIF   ('&FIELD' EQ 'ASKIP' OR '&FIELD' EQ 'PROT' OR '&FIELD' EX
               Q 'UNPROT' OR '&FIELD' EQ 'NUNPROT').FTYPEOK
&INVOP   SETC  'FIELD=&FIELD '
         AGO   .INVALOP
.FTYPEOK ANOP
         AIF   ('&INTENS' EQ 'HIGH' OR '&INTENS' EQ 'NORM' OR '&INTENS'X
               EQ 'DARK').INTENOK
&INVOP   SETC  'INTENS=&INTENS '
         AGO   .INVALOP
.INTENOK ANOP
         AIF   ('&PENDET' EQ 'NO' OR '&PENDET' EQ 'YES').PENDOK
&INVOP   SETC  'PENDET=&PENDET '
         AG0   .INVALOP
.PENDOK  ANOP
         AIF   ('&MDT' EQ 'ON' OR '&MDT' EQ 'OFF').MDTOK
&INVOP   SETC  'MDT=&MDT '
         AGO   .INVALOP
.MDTOK   ANOP
         AIF   ('&CURSOR' EQ 'NO' OR '&CURSOR' EQ 'YES').CURSOK
&INVOP   SETC  'CURSOR=&CURSOR '
         AGO   .INVALOP
.CURSOK  ANOP
.*  ------------------------------------------------------
.*  CHECK FOR INVALID COMBINATION - INTENS=DARK,PENDET=YES
.*  ------------------------------------------------------
         AIF   ('&INTENS' EQ 'DARK' AND '&PENDET' EQ 'YES').EDRKPD
.*  ----------------------------------------------------------
.*  CHECK FOR INVALID COMBINATION - INTENS=HIGH,PENDET=NO
.*  DO NOT TREAT THIS AS AN ERROR, SINCE PENDET DEFAULT IS NO.
.*  IF INTENS=HIGH, SET PENDET TO YES.
.*  ----------------------------------------------------------
&BPDT    SETB  ('&PENDET' EQ 'YES')
         AIF   ('&INTENS' EQ 'DARK' OR '&INTENS' EQ 'NORM').SETBITS
&BPDT    SETB  1
         AIF   ('&PENDET' EQ 'YES').SETBITS
         MNOTE *,'** WARNING ** PENDET=NO CHANGED TO PENDET=YES'
         MNOTE *,'              (INTENS=HIGH IMPLIES PENDET=YES)'
.SETBITS ANOP
.*  ---------------------------------------------------------------
.*  SET ATTRIBUTE BYTE BITS (BIT 1 IS ALWAYS 1, BIT 6 IS ALWAYS 0).
.*  ---------------------------------------------------------------
&B2      SETB  ('&FIELD' EQ 'PROT' OR '&FIELD' EQ 'ASKIP')
&B3      SETB  ('&FIELD' EQ 'NUNPROT' OR '&FIELD' EQ 'ASKIP')
&B7      SETB  ('&MDT' EQ 'ON')
&B4      SETB  ('&INTENS' EQ 'HIGH' OR '&INTENS' EQ 'DARK')
&B5      SETB  (('&INTENS' EQ 'NORM' AND &BPDT) OR '&INTENS' EQ 'DARK')
&B0      SETB  (NOT (&B4 AND &B5))
         AIF   (NOT &B0).FORMATT
&B0      SETB  (&B2 OR &B3 OR &B4 OR &B5 OR &B7)
         AIF   (NOT &B0).FORMATT
&B0      SETB  (&B2 OR (NOT &B3) OR &B4 OR &B5 OR &B7)
         AIF   (NOT &B0).FORMATT
&B0      SETB  ((NOT &B2) OR &B3 OR &B4 OR &B5 OR &B7)
         AIF   (NOT &B0).FORMATT
&B0      SETB  ((NOT &B2) OR &B3 OR &B4 OR &B5 OR (NOT &B7))
.FORMATT ANOP
         DC    X'1D',B'&B0.1&B2&B3&B4&B5.0&B7'
         AIF   ('&CURSOR' EQ 'NO').ENDMAC
         DC    X'13'     INSERT CURSOR
.ENDMAC  MEXIT
.*  ------------------ E R R O R   M N O T E S -----------------------
.INVALOP MNOTE 12,'** ERROR ** INVALID OPERAND, &INVOP'
         MEXIT
.EDRKPD  MNOTE 12,'** ERROR ** INVALID COMBINATION, INTENS=DARK,PENDET=X
               YES'
         MEXIT
         MEND


ASSEMBLER PROGRAM CALCSBA

The CALCSBA program can be used by programs that issue
FULLSCR TPUT as a means of dynamically determining SBA
pairs.  For example, a program may obtain current
primary/secondary screen sizes by issuing the TSO GTTERM
macro, and may then wish to control the placement of its own
full or partial screen displays depending on the information
returned.  CALCSBA supports the same three screen sizes as
SBA3270.

*---------------------------------------------------------------------*
*  Program:  CALCSBA                                                  *
*  Purpose:  To calculate a Set Buffer Address pair for a 3270-type   *
*            terminal given the row and column number, or vice versa. *
*  Usage:    Access to this routine uses standard linkage             *
*            conventions, as set up by the CALL macro, eg.            *
*                 CALL  CALCSBA,(PARMBLK),VL                          *
*            where the PARMBLK parameter is the start of a 17-byte    *
*            halfword-aligned data block formatted as follows;        *
*            Bytes 0 - 1  :  Row number (hexadecimal)                 *
*                 eg. X'0013' = row 19                                *
*            Bytes 2 - 3  :  Column number (hexadecimal)              *
*                 eg. X'0041' = col 65                                *
*            Bytes 4 - 5  :  Row number (zoned decimal)               *
*                 eg. C'19'   = row 19                                *
*            Bytes 6 - 8  :  Column number (zoned decimal)            *
*                 eg. C'065'  = col 65                                *
*            Bytes 9 - 10 :  SBA pair (hexadecimal)                   *
*                 eg. X'D760' = row 19 col 65 (24x80)                 *
*            Bytes 11- 14 :  SBA pair (character)                     *
*                 eg. C'D760' = row 19 col 65 (24x80)                 *
*            Byte  15     :  Screen size indicator                    *
*                            Three screen sizes are supported         *
*                 X'00' = 24x80                                       *
*                 X'01' = 43x80                                       *
*                 X'02' = 27x132                                      *
*            Byte 16      :  Type of conversion required indicator    *
*                 X'00' = Convert row and column to SBA               *
*                 X'01' = Convert SBA to row and column               *
*            For row/col to SBA conversion the user may supply        *
*            either hexadecimal or zoned decimal row/col values.      *
*            If valid hexadecimal values are supplied, these will     *
*            be used in preference to zoned decimal values.           *
*            For SBA to row/col conversion the user may supply        *
*            either hexadecimal or character SBA values. Again,       *
*            valid hexadecimal values will be used in preference      *
*            to character values.                                     *
*  NOTE ===> It follows from the above rules that any non-required    *
*  NOTE ===> fields in the parameter block should be set to X'00'.    *
*  NOTE ===> Be aware that any non-zero hexadecimal row/col or SBA    *
*  NOTE ===> value present in the parameter block on the second and   *
*  NOTE ===> subsequent calls to this routine will be used instead    *
*  NOTE ===> of a zoned decimal row/col or character SBA value.       *
*            If no error is detected, return will be with R15 set     *
*            to zero and both row/col and SBA fields set to           *
*            appropriate values.                                      *
*            If an error is detected, R15 will be set to a non-zero   *
*            value, as follows;                                       *
*            08 - An invalid screen size was specified                *
*            12 - An invalid conversion type was specified            *
*            16 - Row number invalid (0 or > MAXROWS)                 *
*            20 - Column number invalid (0 or > MAXCOLS)              *
*            24 - An invalid SBA pair was specified                   *
*  Dependencies:                                                      *
*            None.                                                    *
*            Link-edit as non-RENT, non-REUS, non-REFR.               *
*            No APF authorization required.                           *
*---------------------------------------------------------------------*
SBAPARMS DSECT
RNUMX    DS    H
CNUMX    DS    H
RNUMZ    DS    CL2
CNUMZ    DS    CL3
SBAPAIRX DS    CL2
SBAPAIRC DS    CL4
SCRSIZE  DS    X
CONVTYP  DS    X
SCRDIMEN DSECT
MAXROWS  DS    H
MAXCOLS  DS    H
CALCSBA  CSECT
         SAVE  (14,12),,'CALCSBA &SYSDATE &SYSTIME'
         LR    R12,R15
         USING CALCSBA,R12
         ST    R13,SAVEAREA+4
         LA    R02,SAVEAREA
         ST    R02,8(,R13)
         LA    R13,SAVEAREA
         L     R02,0(,R01)      Load the parameter block address
         USING SBAPARMS,R02
         USING SCRDIMEN,R04
         LA    R04,S24X80
         CLI   SCRSIZE,0           Screen size 24x80  ?
         BE    CHKCONV
         LA    R04,S43X80
         CLI   SCRSIZE,1           Screen size 43x80  ?
         BE    CHKCONV
         LA    R04,S27X132
         CLI   SCRSIZE,2           Screen size 27x132 ?
         BE    CHKCONV
         LA    R15,8               Invalid screen size specified
         B     EXITR15
CHKCONV  EQU   *
         CLI   CONVTYP,0           Convert R/C to SBA ?
         BE    CHKRCX
         CLI   CONVTYP,1           Convert SBA to R/C ?
         BE    CHKSBA
         LA    R15,12              Invalid conversion type specified
         B     EXITR15
*------- C o n v e r t   r o w / c o l   t o   S B A -----------------*
CHKRCX   EQU   *                   Check the hexadecimal row/col
         MVI   ZDECRC,0            Assume row/col not zoned dec
         CLC   RNUMX(4),LOWVALS    Hex. row and col both zeroes ?
         BNE   CHKROWX             BIF no, go process hex. row/col
*                                  Process the zoned decimal row/col
         MVI   ZDECRC,1            Indicate row/col was zoned dec
         MVC   TRFLD,RNUMZ         Zoned row/col into translate fld
         TR    TRFLD,ZONETAB-240   Convert F0-F9 to hi-values
         CLC   TRFLD(2),HIVALS     Row value OK ?
         BNE   INVRNUM
         CLC   TRFLD+2(3),HIVALS   Col value OK ?
         BNE   INVCNUM
*  Convert the zoned decimal row/col to hexadecimal
         PACK  DWORD+6(2),RNUMZ
         CVB   R01,DWORD
         STH   R01,RNUMX
         PACK  DWORD+6(2),CNUMZ
         CVB   R01,DWORD
         STH   R01,CNUMX
CHKROWX  EQU   *                   Check the hexadecimal row
         CLC   RNUMX,=H'1'         Check specified row #
         BL    INVRNUM             BIF low, row # less than 1
         CLC   RNUMX,MAXROWS       Check specified row #
         BH    INVRNUM             BIF high, row # too large
         CLC   CNUMX,=H'1'         Check specified col #
         BL    INVCNUM             BIF low, col # less than 1
         CLC   CNUMX,MAXCOLS       Check specified col #
         BH    INVCNUM             BIF high, col # too large
         CLI   ZDECRC,1            Was the row/col input zoned dec ?
         BE    ROWCOLOK            BIF yes, no need to convert
*  Now convert the hexadecimal row and column numbers to zoned decimal
         LH    R01,RNUMX
         CVD   R01,DWORD
         UNPK  RNUMZ,DWORD+6(2)
         OI    RNUMZ+1,X'F0'
         LH    R01,CNUMX
         CVD   R01,DWORD
         UNPK  CNUMZ,DWORD+6(2)
         OI    CNUMZ+2,X'F0'
ROWCOLOK EQU   *
         LH    R05,RNUMX           Specified row into R05
         BCTR  R05,R00             Subtract 1
         MH    R05,MAXCOLS         Multiply by MAXCOLS
         AH    R05,CNUMX           Add in the specified column
         BCTR  R05,R00             Subtract 1
*  R05 now contains the screen position, numbering from 0
*  up to (MAXROWS*MAXCOLS)-1.
         LR    R06,R05
         SRL   R06,6               Divide by 64
         LR    R07,R05
         LR    R08,R06             Calculated ROW value into R08
         SLL   R08,6               Multiply by 64
         SR    R07,R08             Calculate the remainder (COL)
         STC   R06,SBABYTE         Row value
         BAL   R14,SBACONV         Convert to an SBA value
         MVC   SBAPAIRX(1),SBABYTE  Store first SBA address byte
         STC   R07,SBABYTE         Col value
         BAL   R14,SBACONV         Convert to an SBA value
         MVC   SBAPAIRX+1(1),SBABYTE  Store second SBA address byte
         BAL   R14,HEXCSBA         Set up character representation
         LA    R15,0               of the hexadecimal SBA pair
         B     EXITR15
*------- C o n v e r t   S B A   t o   r o w / c o l -----------------*
CHKSBA   EQU   *
         MVI   CHRSBA,0            Assume SBA not in character format
         CLC   SBAPAIRX,LOWVALS    Hex. SBA pair zeroes ?
         BNE   CHKSBAX             BIF no, go process hex. SBA
*  Process character representation of hexadecimal SBA pair
         MVI   CHRSBA,1            Indicate SBA in character format
         OC    SBAPAIRC,=CL4' '    Fold lowercase letters to upper
         MVC   TRFLD(4),SBAPAIRC   Eg. C'5D7F' becomes ...
         TR    TRFLD(4),XSBATAB    X'050D070F' ...
         PACK  PACK3,TRFLD         X'5D7Fnn' ...
         MVC   SBAPAIRX,PACK3      X'5D7F'
CHKSBAX  EQU   *
         MVC   TRFLD(2),SBAPAIRX
         TR    TRFLD(2),SBATAB     SBAPAIRX contains only valid
         CLC   TRFLD(2),HIVALS      SBA byte combinations ?
         BNE   INVSBA              BIF not, error
*  Convert SBAPAIRX into a screen position, starting from zero
         LA    R10,0
         LA    R11,0
         IC    R10,SBAPAIRX        Row SBA into Reg. 0
         N     R10,=X'0000003F'    Switch off bits 0 and 1
         IC    R11,SBAPAIRX+1      Col SBA into Reg. 1
         N     R11,=X'0000003F'    Switch off bits 0 and 1
         SLL   R10,6               Multiply row SBA by 64
         AR    R11,R10             Add it to the col SBA
         LH    R15,MAXROWS         Calculate the maximum screen
         MH    R15,MAXCOLS          size for terminal
         BCTR  R15,R00             Subtract 1 for max. position from 0
         CR    R11,R15             Compare SBA position to
         BH    INVSBA               maximum screen position
         CLI   CHRSBA,1            SBA in character format ?
         BE    SBACHAR             BIF yes, avoid conversion subr.
         BAL   R14,HEXCSBA         Set up character representation
*                                   of the hexadecimal SBA pair
SBACHAR  LH    R15,MAXCOLS         Set up divisor
         LA    R10,0               Clear for divide. Register 11
         DR    R10,R15              contains the SBA screen position
         LA    R10,1(,R10)         Add 1 to remainder (col)
         LA    R11,1(,R11)         Add 1 to quotient  (row)
         STH   R10,CNUMX           Hex. col number (1 to MAXCOLS)
         STH   R11,RNUMX           Hex. row number (1 to MAXROWS)
         CVD   R10,DWORD
         UNPK  CNUMZ,DWORD+6(2)
         OI    CNUMZ+2,X'F0'       Zoned decimal col number
         CVD   R11,DWORD
         UNPK  RNUMZ,DWORD+6(2)
         OI    RNUMZ+1,X'F0'       Zoned decimal row number
         LA    R15,0
         B     EXITR15
INVRNUM  LA    R15,16              Row number = 0 or > MAXROWS
         B     EXITR15
INVCNUM  LA    R15,20              Col number = 0 or > MAXCOLS
         B     EXITR15
INVSBA   LA    R15,24              An invalid SBA was supplied
EXITR15  EQU   *
         L     R13,SAVEAREA+4
         RETURN (14,12),,RC=(15)
*-------- S u b r o u t i n e s --------------------------------------*
SBACONV  EQU   *
*  There are 64 possible values for each of the two bytes of an
*  SBA address pair;
*  40, C1, C2, C3, C4, C5, C6, C7, C8, C9, 4A, 4B, 4C, 4D, 4E, 4F
*  50, D1, D2, D3, D4, D5, D6, D7, D8, D9, 5A, 5B, 5C, 5D, 5E, 5F
*  60, 61, E2, E3, E4, E5, E6, E7, E8, E9, 6A, 6B, 6C, 6D, 6E, 6F
*  F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, 7A, 7B, 7C, 7D, 7E, 7F
         MVC   SBABYTEN,SBABYTE
         NI    SBABYTEN,X'0F'     Set hi-order quartet to zero
         CLI   SBABYTEN,0         Is low-order quartet zero ?
         BE    SBACONVA           BIF yes, don't switch on bit 0
         CLI   SBABYTEN,9         Is low-order quartet > 9
         BH    SBACONVA           BIF yes, don't switch on bit 0
         OI    SBABYTE,X'80'      Switch on bit 0
SBACONVA EQU   *
         OI    SBABYTE,X'40'      Switch on bit 1
*  Check for two special cases. A value of X'E1' must be changed
*  to X'61', and X'70' must be changed to X'F0'.
         CLI   SBABYTE,X'E1'
         BE    SBACONVB
         CLI   SBABYTE,X'70'
         BNER  R14
         MVI   SBABYTE,X'F0'
         BR    R14
SBACONVB EQU   *
         MVI   SBABYTE,X'61'
         BR    R14
HEXCSBA  EQU   *
*  Set up the character representation of the hexadecimal SBA pair
         MVC   HEXNUM+2(2),SBAPAIRX
         UNPK  CHARHEX(9),HEXNUM(5)
         TR    CHARHEX(8),HEXVALS-240
         MVC   SBAPAIRC,CHARHEX+4
         BR    R14
*-------- C o n s t a n t s   a n d   w o r k a r e a s --------------*
SAVEAREA DS    9D
DWORD    DS    D
S24X80   DC    H'24,80'
S43X80   DC    H'43,80'
S27X132  DC    H'27,132'
HEXVALS  DC    CL16'0123456789ABCDEF'
CHARHEX  DS    CL9
HEXNUM   DC    XL5'0000000000'
ZDECRC   DS    X
CHRSBA   DS    X
ZONETAB  DS    0CL16
HIVALS   DC    10X'FF'
LOWVALS  DC    6X'00'
TRFLD    DS    CL5
SBABYTE  DS    CL1
SBABYTEN DS    CL1
PACK3    DS    CL3
SBATAB   DC    256X'00'
         ORG   SBATAB+X'40'
         DC    X'FF'
         ORG   SBATAB+X'4A'
         DC    6X'FF'
         ORG   SBATAB+X'50'
         DC    X'FF'
         ORG   SBATAB+X'5A'
         DC    6X'FF'
         ORG   SBATAB+X'60'
         DC    2X'FF'
         ORG   SBATAB+X'6A'
         DC    6X'FF'
         ORG   SBATAB+X'7A'
         DC    6X'FF'
         ORG   SBATAB+X'C1'
         DC    9X'FF'
         ORG   SBATAB+X'D1'
         DC    9X'FF'
         ORG   SBATAB+X'E2'
         DC    8X'FF'
         ORG   SBATAB+X'F0'
         DC    10X'FF'
XSBATAB  DC    256X'00'
         ORG   XSBATAB+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   XSBATAB+C'0'
         DC    X'00010203040506070809'
         LTORG
         END   CALCSBA


Phil Rigby
Systems Engineer (UAE)                               c Xephon 1991

