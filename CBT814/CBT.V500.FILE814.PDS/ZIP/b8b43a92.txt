Resetting limits in Generation Data Groups

We were recently requested by our staff to find a way to allow the
resetting of a Generation Data Group (GDG) limit, or the number
of associated files, without having to record all information on the
files. This manual process is required since all associated datasets
must be uncatalogued and recatalogued so the GDG can be
deleted and redefined. If there are only a few associated files, the
manual procedure isn't too inconvenient, but if there are up to 255
files, each catalogued on several volumes, the procedure becomes
tedious and error-prone.

I wrote a CLIST that records all relevant information about the
GDG (including its name, catalog, and current limit, as well as the
associated dataset names, volumes, and file sequences). The
CLIST will locate all currently catalogued versions, uncatalog
them, delete the GDG, redefine the GDG, and recatalog all
versions. I use IDCAMS invocations to prevent mount problems
with tapes, since DEFER is not allowed in the UNIT parameter of
the ALLOC command.

The CLIST asks for the GDG base name (unless provided - see
parameters below), invokes IDCAMS to display all relevant
information, and asks for a new limit. You can terminate the
procedure at this point by hitting ENTER. If the file name entered
is not a GDG base, you will be prompted for a valid name. If a
new limit is entered, its contents are validated (ie the value entered
is betwen 1 and 255 and all positions are numeric). You can re-
enter the limit, if necessary. If the user specifies a limit lower than
the current GDG limit, a warning is displayed that files will be
deleted. The CLIST then invokes IDCAMS three times, first
issuing a DELETE and NOSCRATCH (essentially just
uncataloguing each associated dataset), then issuing a DELETE
and DEFINE for the GDG, and finally issuing a DEFINE for
each associated file (amounting to a recatalog). If the IDCAMS
deletes or defines fail, a message is issued to have the user contact
Technical Support. You can use the DEBUG option to diagnose
the problem, or alter the CLIST to save the SYSPRINT file
created.

Parameters for the CLIST are DSN and DEBUG. DEBUG issues
a CONTROL MSG LIST SYMLIST CONLIST PROMPT. If
you want to enter the GDG base dataset name and not have the
CLIST prompt you for it, enter:

      GDGALTER DSN (the.gdg.data.set.name)

It doesn't matter if you enclose the dataset name in apostrophes -
they will be stripped.

You can invoke the CLIST in several ways:

o      From a command line, like this:

      TSO GDGALTER

      or like this:

      TSO GDGALTER DSN(the.gdg.name)

o      From a panel, like this:

      X,'CMD(GDGALTER)'

o      Or from the ISPF/PDF Data Set List Utility (3.4) line
command like this:

      GDGALTER DSN(/)

      (If DSN is not entered, hit enter on the subsequent error
created. Also be sure to hit ERASE EOF if the DSN parameter is
used.)

The CLIST should, of course, be placed in a dataset accessible
from your log-on procedure (SYSPROC concatenation).

The following warnings should be noted:

o      We always specify NOEMPTY and SCRATCH on our
GDG definition - adjust the defines as needed for your standards.

o      On recataloguing associated datasets, we check for the first
position of a volume being greater than or equal to zero. This
differentiates our tapes and disks. Adjust as needed.

o      We use device types of 3480 and 3380. Adjust these as
needed or add code to determine and save the device type of the
original dataset.

o      At the end of the procedure, we reassign our SYSPRINT and
SYSIN according to our standard usage - you may want to
change this.

We are currently running MVS/XA (2.2.3) with ISPF/PDF 2.3.0.

THE GDGALTER CLIST

PROC 0 DSN() DEBUG
/* THIS CLIST WILL ALTER A GDG - NUMBER OF GENERATIONS (LIMIT) BY  */
/* LOCATING ALL CURRENTLY CATALOGUED VERSIONS, UNCATALOGUING THEM, */
/* DELETING THE GDG, REDEFINING THE GDG, AND                       */
/* RECATALOGING ALL VERSIONS.                                      */
/* IDCAMS IS USED INSTEAD OF ALLOCATES, ETC TO PREVENT MOUNT       */
/* PROBLEMS WITH TAPES (DEFER NOT ALLOWED IN UNIT)                 */
CLEAR
 /* TURN ON TRACES IF DEBUG SPECIFIED */
 IF &DEBUG = DEBUG THEN CONTROL MSG LIST SYMLIST CONLIST PROMPT
 /* IF ANY ERRORS, RETURN; EXCEPT FOR END OF FILE, SET FLAG FIRST */
 ERROR -
  DO
     SET RETCOD = &LASTCC
     IF &LASTCC = 400 THEN -
        DO
           SET EOF = YES
           SET &RETCOD = 0
           RETURN
        END
     IF &LASTCC > 0 THEN RETURN
  END
 WRITE *************************************************************
 WRITE | ALTER GDG # OF GENERATIONS (LIMIT)    &SYSDATE  &SYSTIME  |
 WRITE *************************************************************
 /* WE ALLOCATE SYSPRINT AND SYSIN - FREE THEM FOR NOW... */
 FREE F(SYSPRINT)
 FREE F(SYSIN)
 IF &STR(&DSN) = &STR() THEN GOTO E
 ELSE -
      DO
        SET &D = &SYSCAPS(&DSN)
        GOTO HAVEDSN
      END
E: -
 WRITE ENTER THE GDG BASE NAME:
 WRITENR ?
 READ
 SET &D = &STR(&SYSDVAL)
 IF &STR(&D) = &STR() THEN GOTO E
HAVEDSN: -
 WRITE READING CURRENT CATALOG INFORMATION...
 /* SET UP REQUIRED IDCAMS FILES */
 ALLOC F(SYSPRINT) DA('&SYSUID..GDG.PRINT') NEW CATALOG +
  SPACE(5,5) TRACKS RELEASE LRECL(125) RECFM(V,B,A) BLKSIZE(23476)
 ALLOC F(SYSIN) DA('&SYSUID..GDG.INPUT') NEW CATALOG +
  SPACE (1,1) TRACKS RELEASE LRECL (80) RECFM(F) BLKSIZE(80)
 /* SET UP REQUIRED IDCAMS PARMS */
 SET BLNK = &STR( )
 SET PCON = &STR(LISTC)
 SET PENT = &STR(ENT)
 SET OPAR = &STR((
 SET CPAR = &STR())
 SET PALL = &STR(ALL)
 OPENFILE SYSIN OUTPUT
 SET SYSIN = &STR(&BLNK&PCON&BLNK&PENT&OPAR&D&CPAR&BLNK&PALL)
 PUTFILE SYSIN
 CLOSFILE SYSIN
 /* INVOKE IDCAMS TO READ CURRENT CATALOG INFORMATION    */
 /* ABOUT THE BASE GDG AND ALL ASSOCIATED FILES          */
 CALL 'SYS1.LINKLIB(IDCAMS)'
 IF &RETCOD > 0 THEN -
    DO
       SET &RETCOD = 0
       WRITE &D IS NOT A VALID GDG NAME
       FREE F(SYSPRINT)
       ALLOC F(SYSPRINT) DA('&SYSUID..GDG.PRINT') OLD DELETE
       FREE F(SYSPRINT)
       FREE F(SYSIN)
       ALLOC F(SYSIN) DA('&SYSUID..GDG.INPUT') OLD DELETE
       FREE F(SYSIN)
       GOTO E
    END
 FREE F(SYSPRINT)
 FREE F(SYSIN)
 ALLOC F(SYSIN) DA('&SYSUID..GDG.INPUT') OLD DELETE
 FREE F(SYSIN)
 /* OPEN PREVIOUS PRINT FOR ANALYSIS */
 ALLOC F(SYSPRINT) DA('&SYSUID..GDG.PRINT') OLD
 OPENFILE SYSPRINT INPUT
 SET &EOF = NO
 GETFILE SYSPRINT
 SET SYSPRINT = &SYSPRINT
 SET &J = 0
 /* J WILL BE THE NUMBER OF DATASETS ASSOCIATED WITH THE GDG */
 DO WHILE &EOF = NO
    SET &K = 1
    SET &L = &LENGTH(&STR(&SYSPRINT))
    /* SKIP LINES WE HAVE NO INTEREST IN */
    IF &L < 30 THEN GOTO NXTP
    /* IF ASSOCIATED FILES ARE FOUND, WE WANT THE DATASET NAME,  */
    /* VOLUME NAMES, A COUNT OF THE VOLUMES, AND FILE            */
    /* SEQUENCE NUMBERS.                                         */
L:  IF &SUBSTR(5:11,&SYSPRINT) = &STR(NONVSAM) THEN -
       DO
          SET &J = &J + 1
          /* FX = THE DATASET NAME; X =1 TO 255  */
          /* EXAMPLE:  F1 = XXX.DATA.G0001V00    */
          /*           F2 = XXX.DATA.G0002V00    */
          SET F&J = &SUBSTR(18:&L,&SYSPRINT)
FVOL:     GETFILE SYSPRINT
          SET &L = &LENGTH(&STR(&SYSPRINT))
          IF &L < 30 THEN GOTO FVOL
          SET SYSPRINT = &SYSPRINT
          IF &SUBSTR(9:14,&SYSPRINT) = &STR(VOLSER) THEN GOTO NF
          GOTO FVOL
          /* FXVY = VOLSER; X=1 TO 255, Y=1 TO 6 */
          /* EXAMPLE: F1V1 = V0L001              */
          /*          F2V1 = 012345              */
          /*          F2V2 = 012346              */
NF:       SET F&J.V&K = &SUBSTR(27:32,&SYSPRINT)
          /* FXFSY = FILE SEQUENCE NUMBER                 */
          /* USUALLY 0 FOR DISK                           */
          /* FOR TAPE = FILE POSITION ON A STACKED VOLUME */
          /* EXAMPLE:  F1FS1 = 0                          */
          /*           F2FS1 = 4                          */
          /*           F2FS2 = 4                          */
          SET F&J.FS&K = &SUBSTR(88:90,&SYSPRINT)
          SET &TMPSQ = &&F&J.FS&K
          /* IDCAMS FLOATS IN DASHES; REMOVE ANY FOUND    */
          /* EXAMPLE:  --1 BECOMES 1; -26 = 26; 244=244   */
          IF &SUBSTR(1:1,&TMPSQ) = &STR(-) THEN -
           SET TMPSQ = &SUBSTR(2:3,&TMPSQ)
          IF &SUBSTR(1:1,&TMPSQ) = &STR(-) THEN -
           SET TMPSQ = &SUBSTR(2:2,&TMPSQ)
          SET F&J.FS&K = &TMPSQ
          SET &K = &K + 1
LPIT:     GETFILE SYSPRINT
          /* AFTER ONE VOLSER IS FOUND, LOOK FOR MORE */
          SET &L = &LENGTH(&STR(&SYSPRINT))
          IF &L < 30 THEN GOTO LPIT
          SET SYSPRINT = &SYSPRINT
          IF &SUBSTR(1:7,&SYSPRINT) = &STR(1IDCAMS) THEN GOTO LPIT
          IF &SUBSTR(9:14,&SYSPRINT) = &STR(VOLSER) THEN GOTO NF
          IF &SUBSTR(9:11,&SYSPRINT) = &STR(GDG) THEN GOTO JKEND
          /* FCX = A COUNT OF VOLUMES FOUND */
          /* EXAMPLE:  FC1 = 1              */
          /*           FC2 = 2              */
JKEND:    SET FC&J = &K -1
          GOTO NXTP
       END
    IF &SUBSTR(2:9,&SYSPRINT) = &STR(GDG BASE) THEN -
       DO
          /* NAME = THE GDG BASE DATASET NAME */
          SET NAME = &SUBSTR(18:&L,&SYSPRINT)
          GOTO NXTP
       END
    IF &SUBSTR(7:12,&SYSPRINT) = &STR(IN-CAT) THEN -
       DO
          /* CAT = THE CATALOG DATASET NAME WHERE THE GDG BASE IS */
          SET CAT = &SUBSTR(18:&L,&SYSPRINT)
          GOTO NXTP
       END
    IF &SUBSTR(9:13,&SYSPRINT) = &STR(LIMIT) THEN -
       DO
          /* LIM = THE CURRENT LIMIT SETTING */
          SET LIM = &SUBSTR(30:32,&SYSPRINT)
       END
NXTP: -
    GETFILE SYSPRINT
    SET SYSPRINT = &SYSPRINT
 END
 CLOSFILE SYSPRINT
 FREE F(SYSPRINT)
 ALLOC F(SYSPRINT) DA('&SYSUID..GDG.PRINT') OLD DELETE
 FREE F(SYSPRINT)
 /* IF NO LIMIT, THIS IS NOT A GDG BASE */
 IF &STR(&LIM) = &STR() THEN -
    DO
       WRITE &D IS NOT A VALID GDG NAME
       GOTO E
    END
 /* GET RID OF LEADING DASHES IN LIMIT NUMBER */
 IF &SUBSTR(1:1,&LIM) = &STR(-) THEN SET LIM = &SUBSTR(2:3,&LIM)
 IF &SUBSTR(1:1,&LIM) = &STR(-) THEN SET LIM = &SUBSTR(2:2,&LIM)
 /* INFORM USER OF ITEMS FOUND */
 WRITE &NAME
 WRITE IS IN CATALOG:  &CAT
 WRITE AND HAS A CURRENT LIMIT OF:  &LIM
 WRITE WITH &J ASSOCIATED FILES
 SET &C = 1
 DO WHILE &C <= &J
    SET &NN = &&F&C
    /* SHOW DATASET NAMES */
    WRITE FILE&C = &NN
    SET &C2 = 1
    SET &LOOP = &&FC&C
    DO WHILE &C2 <= &LOOP
        SET &VV = &&F&C.V&C2
        SET &SQVV = &&F&C.FS&C2
        /* SHOW VOLUMES AND FILE SEQUENCES */
        WRITE ON VOLUME(S) &VV (FILE SEQUENCE=&SQVV)
        SET &C2 = &C2 + 1
    END
    SET &C = &C + 1
 END
R: -
 WRITE ENTER THE NEW LIMIT, OR JUST HIT ENTER TO EXIT:
 WRITENR ?
 READ
 /* S = THE NEW GDG BASE LIMIT, OR NUMBER OF ASSOCIATED FILES */
 SET &S = &STR(&SYSDVAL)
 IF &STR(&S) = &STR() THEN GOTO DONE
 IF &LENGTH(&STR(&S)) > 3 THEN -
    DO
       WRITE LIMIT &S IS INVALID (MORE THAN 3 CHARACTERS ENTERED)
       GOTO R
    END
 IF &S > 255 THEN -
    DO
       WRITE LIMIT &S IS GREATER THAN 255, OR IS NOT 3 NUMERIC DIGITS
       GOTO R
    END
 IF &S = 0 THEN -
    DO
       WRITE LIMIT CANNOT BE ZERO
       GOTO R
    END
/* THE NEXT CODE VERIFIES THAT THE NEW LIMIT IS ALL NUMERIC */
 SET &JK = 1
 SET &KL = &LENGTH(&STR(&S)) - 1
 DO WHILE &JK <= &LENGTH(&STR(&S))
    SET &KK = 1
    DO WHILE &KK <= 10
       IF &SUBSTR(&JK:&JK,&STR(&S)) = &SUBSTR(&KK:&KK,0123456789) -
       THEN SET &KK = 12
       ELSE SET &KK = &KK + 1
    END
    IF &KK = 11 THEN -
       DO
          WRITE LIMIT &S IS NOT NUMERIC
          GOTO R
       END
    SET &JK = &JK + 1
 END
 WRITE NEW LIMIT = &S
R2: -
 WRITE IF THIS LIMIT IS OK, HIT ENTER; ELSE ENTER NO TO REKEY LIMIT
 WRITENR ?
 READ
 SET &Q = &STR(&SYSDVAL)
 IF &STR(&Q) = &STR() THEN GOTO DOIT
 ELSE GOTO R
/* WARN THE USER IF THEY REDUCE THE LIMIT FROM THE ORIGINAL,    */
/* CAUSING SOME DATASETS TO BE DELETED DURING THE RECATALOGING  */
/* EXAMPLE:   XXX.GDG.G0001V00                                  */
/*            XXX.GDG.G0002V00                                  */
/*            XXX.GDG.G0003V00                                  */
/*            XXX.GDG.G0004V00                                  */
/*  THESE ARE THE CURRENT FILES - THE LIMIT WAS 4               */
/*  THE USER ENTERS A NEW LIMIT OF 2; WHEN REDEFINED, THE       */
/*  FILES WILL BE RETAINED AS FOLLOWS:                          */
/*            XXX.GDG.G0003V00                                  */
/*            XXX.GDG.G0004V00                                  */
/*  XXX.GDG.G0001V00 AND XXX.GDG.G0002V00 WILL BE DELETED/UNCAT */
DOIT: -
 IF &S < &J THEN -
    DO
       SET &DIF = &J - &S
       WRITE WARNING NEW LIMIT IS &S; CURRENT NUMBER OF FILES IS &J
       WRITE &DIF FILE(S) WILL BE DELETED
       WRITE IF OK, HIT ENTER, ELSE ENTER NO TO TERMINATE THIS CLIST
       WRITENR ?
       READ
       SET &QRR = &STR(&SYSDVAL)
       IF &STR(&QRR) = &STR() THEN GOTO UNCATEM
       ELSE GOTO DONE
    END
UNCATEM: -
 WRITE UNCATALOGING ALL RELATED DATASETS...
 SET &U = 1
 ALLOC F(SYSPRINT) DUMMY
 ALLOC F(SYSIN) DA('&SYSUID..DSU.INPUT') NEW CATALOG +
  SPACE(1,1) TRACKS RELEASE LRECL(80) RECFM(F) BLKSIZE(80)
 OPENFILE SYSIN OUTPUT
 DO WHILE &U <= &J
    SET &NN = &STR(&&F&U)
    /* CREATE A DELETE (UNCATALOG) FOR EACH ASSOCIATED FILE   */
    /* NOT THAT NOSCRATCH RETAINS THE FILE; IT IS NOT DELETED */
    SET SYSIN = &STR( DELETE &NN NOSCRATCH)
    PUTFILE SYSIN
    SET &U = &U + 1
 END
 CLOSFILE SYSIN
 CALL 'SYS1.LINKLIB(IDCAMS)'
 IF &RETCOD > 0 THEN -
  DO
    SET &RETCOD = 0
    WRITE UNCATALOG(S) FAILED... CONTACT TECH SUPPORT
    FREE F(SYSPRINT)
    FREE F(SYSIN)
    ALLOC F(SYSIN) DA('&SYSUID..DSU.INPUT') OLD DELETE
    FREE F(SYSIN)
    GOTO DONE
  END
 FREE F(SYSPRINT)
 FREE F(SYSIN)
 ALLOC F(SYSIN) DA('&SYSUID..DSU.INPUT') OLD DELETE
 FREE F(SYSIN)
 WRITE REDEFINING THE GDG WITH THE NEW LIMIT
 ALLOC F(SYSPRINT) DUMMY
 ALLOC F(SYSIN) DA('&SYSUID..GDGDEF.INPUT') NEW CATALOG +
  SPACE(1,1) TRACKS RELEASE LRECL(80) RECFM(F) BLKSIZE(80)
 SET BLNK = &STR( )
 SET DLCN = &STR(DELETE)
 SET DFCN = &STR(DEFINE)
 SET NMCN = &STR(NAME)
 SET LMCN = &STR(LIMIT)
 /* WE ALWAYS SPECIFY NOEMPTY AND SCRATCH - ADDITIONAL CODE MAY BE */
 /* NEEDED TO RETAIN THE ORIGINAL VALUES IF THIS IS NOT TRUE       */
 SET EMCN = &STR(NOEMPTY)
 SET SCCN = &STR(SCRATCH)
 SET GDG = &STR(GDG)
 SET DASH = &STR(-)
 SET PRGC = &STR(PURGE)
 OPENFILE SYSIN OUTPUT
 /* PUT OUT THE IDCAMS DELETE FOR THE GDG BASE */
 /* EXAMPLE:   DELETE XXX.GDG GDG PURGE        */
 SET SYSIN = &STR(&BLNK&DLCN&BLNK&NAME&BLNK&GDG&BLNK&PRGC)
 PUTFILE SYSIN
 /* PUT OUT THE IDCAMS DEFINE FOR THE GDG BASE     */
 /* EXAMPLE:   DEFINE GDG (NAME -                  */
 /*            (XXX.GDG) -                         */
 /*            LIMIT (XXX) -                       */
 /*            NOEMPTY SCRATCH)                    */
 SET SYSIN = &STR(&BLNK&DFCN&BLNK&GDG&BLNK&OPAR&NMCN&BLNK&DASH)
 PUTFILE SYSIN
 SET SYSIN = &STR(&BLNK&OPAR&NAME&CPAR&BLNK&DASH)
 PUTFILE SYSIN
 SET SYSIN = &STR(&BLNK&LMCN&OPAR&S&CPAR&BLNK&DASH)
 PUTFILE SYSIN
 SET SYSIN = &STR(&BLNK&EMCN&BLNK&SCCN&CPAR)
 PUTFILE SYSIN
 CLOSFILE SYSIN
 CALL 'SYS1.LINKLIB(IDCAMS)'
 IF &RETCOD > 0 THEN -
    DO
       SET &RETCOD = 0
       WRITE &NAME COULD NOT BE REDEFINED... CONTACT TECH SUPPORT
       FREE F(SYSPRINT)
       FREE F(SYSIN)
       ALLOC F(SYSIN) DA('&SYSUID..GDGDEF.INPUT') OLD DELETE
       FREE F(SYSIN)
       GOTO DONE
    END
 FREE F(SYSPRINT)
 FREE F(SYSIN)
 ALLOC F(SYSIN) DA('&SYSUID..GDGDEF.INPUT') OLD DELETE
 FREE F(SYSIN)
 WRITE RECATALOGING ALL RELATED DATASETS...
 /* RECATALOGUE ALL ASSOCIATED FILES                             */
 /* IF TAPE, NEED TO CHANGE DEVICE TYPE AND ADD FILE SEQUENCE    */
 /* IF LIMIT WAS REDUCED, SOME FILES WILL BE DELETED/UNCATALOGUED*/
 SET &W = 1
 /* SET VOLUME NAME NULL TO START (ACTUALLY IS A BLANK) */
 SET &JKVOL = &STR()
 /* SET SEQUENCE NO NULL TO START (ACTUALLY IS A BLANK) */
 SET &JKSEQ = &STR()
 ALLOC F(SYSPRINT) DUMMY
 ALLOC F(SYSIN) DA('&SYSUID..DSC.INPUT') NEW CATALOG +
  SPACE(1,1) TRACKS RELEASE LRECL(80) RECFM(F) BLKSIZE(80)
 OPENFILE SYSIN OUTPUT
 DO WHILE &W <= &J
    /* NN = DATASET NAME */
    SET &NN = &STR(&&F&W)
    SET &W2 = 1
    SET &LOOP = &&FC&W
    DO WHILE &W2 <= &LOOP
        /* JKVL = VOLUME NAME */
        SET &JKVL = &&F&W.V&W2
        /* JKSQ = SEQUENCE NUMBER */
        SET &JKSQ = &&F&W.FS&W2
        /* APPEND MULTIPLE VOLUME NAMES, IF NEEDED      */
        /* LEADING BLANK IS NOT A PROBLEM FOR IDCAMS... */
        SET &JKVOL = &STR(&JKVOL &JKVL)
        /* APPEND MULTIPLE FILE SEQUENCES, IF NEEDED    */
        /* LEADING BLANK IS NOT A PROBLEM FOR IDCAMS... */
        SET &JKSEQ = &STR(&JKSEQ &JKSQ)
        SET &W2 = &W2 + 1
    END
    /* IF LEADING CHARACTER OF VOLUME IS GREATER THAN OR EQUAL TO */
    /* ZERO, THIS IS A TAPE CARTRIDGE... DO APPROPRIATE DEFINE    */
    /* WITH DEVICE TYPE 3480 AND FILE SEQUENCE NUMBERS            */
    /* IF OTHER DEVICES ARE USED (3490, 3390, ETC) MORE           */
    /* CHECKING FOR THE ORIGINAL DEVICE TYPES MUST BE ADDED...    */
    IF &SUBSTR(1:1,&JKVL) >= &STR(0) THEN -
       DO
          SET SYSIN = &STR( DEFINE NONVSAM (NAME (&NN) &DASH
          PUTFILE SYSIN
          SET SYSIN = &STR( DEVT(3480) VOLUMES(&JKVOL) &DASH
          PUTFILE SYSIN
          SET SYSIN = &STR( FSEQN(&JKSEQ) &CPAR
          PUTFILE SYSIN
          GOTO JKZZ
       END
    /* IF NOT TAPE, IT IS DISK - DO DEFINE FOR 3380 */
    SET SYSIN = &STR( DEFINE NONVSAM (NAME (&NN) &DASH
    PUTFILE SYSIN
    SET SYSIN = &STR( DEVT(3380) VOLUMES(&JKVOL) &CPAR
    PUTFILE SYSIN
JKZZ: -
    SET &JKVOL = &STR()
    SET &JKSEQ = &STR()
    SET &W = &W + 1
 END
 CLOSFILE SYSIN
 CALL 'SYS1.LINKLIB(IDCAMS)'
 IF &RETCOD > 0 THEN WRITE RECATALOGING FAILED... CONTACT TECH SUPPORT
 SET &RETCOD = 0
 FREE F(SYSPRINT)
 FREE F(SYSIN)
 ALLOC F(SYSIN) DA('&SYSUID..DSC.INPUT') OLD DELETE
 FREE F(SYSIN)
 /* WE REASSIGN SYSPRINT TO OUR TSO HELD CLASS AND */
 /* SYSIN BACK TO THE TERMINAL - IF LOGON PROC.    */
 /* DIFFERS, ADJUST AS NEEDED...                   */
DONE: -
 ALLOC F(SYSPRINT) SYSOUT(X)
 ALLOC F(SYSIN) DATASET(*)
 WRITE CLIST GDGALTER ENDED...
 EXIT


Joe Klopfenstein
Director, Technical Support
American Mutual Life (USA)                               c Xephon 1994

