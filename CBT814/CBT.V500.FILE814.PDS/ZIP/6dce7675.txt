CA-7 job scheduling facilities in on-line systems

Our installation recently came upon a requirement for a CICS
region to be able to submit a job to produce reports from a
VSAM dataset after the CICS region had loaded the dataset.  In
the past, we let the CICS systems and applications
programmers use internal readers to do this.  The result was
that each CICS region had an internal reader allocated to it for
the life of the job, which could be as long as seven days.  Since
internal reader storage came out of common area storage, they
started to become a scarce resource.  In the more recent
releases of JES2 for MVS/ESA, these internal reader buffers
were moved to a data space thus relieving the storage problem
associated with internal readers.  However, as other
applications programmers came asking for other internal
readers in CICS regions which already had them, we realized
that this was becoming a problem and started looking for a way
to standardize job submission and remove internal reader
dependencies.

Our installation has CA-7 from Computer Associates for job
scheduling.  CA-7 provides a facility to be posted by an
external program when certain external requirements are met,
like when an out-of-house input tape arrives.  When this
happens, clerks manually post a requirement in CA-7
indicating that the tape is available so that any jobs dependent
on the tape may be submitted.  The interface program provided
by CA-7 is called U7SVC.  We decided to use the U7SVC
program as part of a generalized routine to give applications
programmers the ability to post their own requirements
dynamically.

We wrote a user WTO exit, called CA7VMXIT, which would
intercept and act upon a special format WTO message issued
by an application program or CICS transaction.  We set up a
convention of using pseudo-dataset names as resource
requirements in CA-7.  Jobs requiring the creation of a dataset
before execution would be given a dependency of a particular
pseudo-dataset name resource requirement being posted in CA-
7.  We then set up a practice for applications programmers to
issue a WTO message of a particular format which had the
variable length pseudo-dataset name at the end.  The WTO user
exit was written to pick up the pseudo-dataset name resource
requirement from the message and issue an OS LINK macro to
the U7SVC program, passing the resource name to CA-7 for
posting.  With this mechanism, a CICS transaction could then
post CA-7 when it had finished creating or updating a dataset.
As a result of the posting, CA-7 could then submit any batch
jobs requiring the dataset.  If the batch jobs thus submitted
encounter any ENQ conflict on the dataset with the CICS
region, the code could be modified to issue the appropriate
MVS MODIFY commands to the CICS region to close the file
in question.  An alternative would be to give the CICS
applications programmers use of a transaction or program that
would allow them to close the file in question before issuing
the WTO to post the resource requirement, thus avoiding any
ENQ conflicts.

We have found the mechanism described above so useful, that
we are also planning to implement it in jobs which come into
our system via the NJE and RJE methods of job submission.
Jobs thus sent into our system from remote users would be able
to post their own resource requirements in CA-7.  This would
notify CA-7 that the jobs have arrived and would allow CA-7
to submit other dependent jobs.  These out-of-house jobs could
also include, as their last step, execution of a program to just
issue a WTO to post resource requirements as an indicator that
the out-of-house job has completed.  At that time, any local
jobs could be submitted by CA-7 which depend upon datasets
created by the out-of-house jobs.

The requirements for the exits are relatively simple.  A
standard message format for the posting message must first be
agreed upon.  The CA-7 load library must be placed into the
LINKLIST concatenation of datasets via the LNKLSTxx
member of SYS1.PARMLIB.  An entry must be placed in the
MPFLSTxx member of SYS1.PARMLIB indicating the
message-id to be used and the name of the user exit which will
process the message-id; an example of such an entry is:

      CA7001I,SUP(NO),RETAIN(NO),USEREXIT(CA7VMXIT)

Lastly, resource dependency requirements for the dependent
jobs must be set up under CA-7.  The pseudo-dataset resource
names must correspond to the names which will be issued in
the WTO message.  Below is the version of the user WTO exit
we have written to implement this facility.


CA7VMXIT TITLE ' CA7 REQUIREMENTS POSTING WTO INTERFACE'
***********************************************************************
* MODULE NAME         = CA7VMXIT                                      *
* DESCRIPTIVE NAME    = COMMUNICATIONS TASK USER EXIT FOR MESSAGE     *
*                       CA7001I.                                      *
* FUNCTION            = ISSUES A CA7 SVC TO POST REQUIREMENTS TO RUN  *
*                       JOBS BASED ON MESSAGE TEXT.                   *
* OPERATION           = WHEN MESSAGE CA7001I IS ISSUED THIS PROGRAM   *
*                       DETERMINES THE REQUIREMENT TO POST CA7        *
*                       ON.  IT WILL BE CONTAINED IN POSITIONS        *
*                       38-84 OF THE MESSAGE TEXT.  THE CA7 SVC WILL  *
*                       BE INVOKED TO INFORM CA7 OF THE REQUIREMENT   *
*                       COMPLETION.                                   *
* ENTRY POINT         = CA7VMXIT                                      *
*   INPUT DATA        = REG1 POINTS TO THE ADDRESS OF THE CTXT        *
*                       REG13 ADDRESS OF STANDARD SAVE AREA           *
*                       REG14 RETURN POINT                            *
*                       REG15 ENTRY POINT                             *
*   CONTROL BLOCKS                                                    *
*     NAME     MAPPING MACRO                                          *
*     CTXT     IEZVX100                                               *
***********************************************************************
CA7VMXIT AMODE 31            31-BIT ADDRESSING MODE
CA7VMXIT RMODE 24            24-BIT RESIDENCY  MODE
CA7VMXIT CSECT
         SAVE  (14,12),,CA7VMXIT-&SYSDATE
         LR    R12,R15                 LOAD R12 W/BASE ADDRESS
         USING CA7VMXIT,R12
         L     R5,0(R1)                SAVE PARMS IN R5
         USING CTXT,R5                 ESTABLISH ADDRESSABILITY TO CTXT
         GETMAIN RU,LV=DATALEN,SP=230  OBTAIN DYNAMIC STORAGE
         ST    R13,4(R1)               SET BACKWARD POINTER
         ST    R1,8(R13)               SET FORWARD POINTER
         LR    R13,R1                  POINT R13 TO STD SAVE AREA
         USING DATAAREA,R13            ESTABLISH ADDRESSABILITY
*****    CHECK THE MESSAGE TEXT OF CA7001I TO DETERMINE THE NAME  *****
*        OF THE RESOURCE TO BE POSTED.                                *
*        THE FOLLOWING IS AN EXAMPLE OF MESSAGE CA7001I               *
*        CA7001I POST RESOURCE REQUIREMENT FOR D=XXXX                 *
*        WHERE XXXX IS THE NAME OF A FICTITIOUS DATASET TO BE         *
*****    POSTED AS HAVING BEEN CREATED.                           *****
         L     R2,CTXTTXPJ             ESTABLISH ADDRESSABILITY TO THE
         USING CTXTATTR,R2             MESSAGE ATTRIBUTES
         CLC   CA7MSG(CA7MSGL1),CTXTTMSG THIS THE CORRECT FORMAT
         BNE   RETURN                  NO, GO RETURN
         LH    R1,CTXTTLEN             LOAD R1 W/MESSAGE LENGTH
         LA    R3,CA7MSGL2             LOAD R3 W/LENGTH OF MSG PREFIX
         SR    R1,R3                   SUBTRACT FOR DSNAME LENGTH
         BCTR  R1,R0                   DECREMENT BY 1 FOR MVC EXECUTE
         EX    R1,MOVEDSN              EXECUTE MVC
         LA    R14,PARMSTRT            LOAD R14 W/A(PARM DATA START)
         LA    R15,1(R1,R14)           LOAD R15 W/A(PARM DATA END)
         SR    R15,R14                 SUBTRACT FOR DSNAME LENGTH
         STH   R15,PARMLEN             STORE PARM LENGTH
         LA    R1,PARMLEN              LOAD A(PARMLIST)
         ST    R1,PARMPTR              STORE A(PARMLIST)
         OI    PARMPTR,X'80'           TURN ON HIGH-ORDER BIT
         LA    R1,PARMPTR              LOAD R1 W A(PARMLIST POINTER)
         LINK  EP=U7SVC                ISSUE CA7 SVC
*****    OPTIONALLY CAN ISSUE MVS MODIFY COMMANDS TO CLOSE FILES IN   *
*        USE BY A CICS REGION, IF, AS A RESULT OF CA7 SUBMITTING      *
*****    JOBS, AN ENQ CONFLICT OCCURS.                                *
*        RETURN TO CALLER AFTER FREEING STORAGE GETMAINED             *
RETURN   LR    R1,R13                  GET AREA ADDRESS
         L     R13,4(R13)              LOAD R13 W/A(CALLER SAVEAREA)
         FREEMAIN RU,A=(1),LV=DATALEN,SP=230 FREE STORAGE
         RETURN (14,12),RC=0           RETURN TO CALLER
*        CHARACTER CONSTANTS AND TABLES                               *
CA7MSG   DC    C'CA7001I '             MESSAGE ID
         DC    C'POST RESOURCE REQUIREMENT FOR '
CA7MSGL2 EQU   *-CA7MSG                LENGTH(MESSGE PREFIX)
RESNAME  DC    C'D='                   D= PARAMTER FOR CA7 SVC
CA7MSGL1 EQU   *-CA7MSG                LENGTH(MESSAGE PREFIX+'D=')
         DC    CL44' '                 DATASET NAME FOR POSTING
CA7MSGL3 EQU   *-RESNAME               LENGTH OF CA7 PARAMETERS
MOVEDSN  MVC   PARMSTRT(0),CTXTTMSG+CA7MSGL2 EXECUTED MVC
         LTORG
DATAAREA DSECT
SAVEAREA DS    18F                     STANDARD OS SAVE AREA
PARMPTR  DC    A(0+X'80000000')        POINTER TO PARM FIELD
PARMLEN  DS    AL2                     HALFWORD OF TOTAL PARM LENGTH
PARMSTRT DS    CL(CA7MSGL3)            ACTUAL PARM FIELD (D=DSN)
DATALEN  EQU   *-DATAAREA              CALCULATE LENGTH FOR GETMAIN
         IEZVX100                      CTXT MAPPING MACRO
         END


                                                c Xephon 1990

