SMS storage group monitoring

INTRODUCTION

While most information about an SMS DASD configuration can
be obtained through ISMF facilities, ISMF doesn't provide a tool
to inspect the disk space allocation by storage group. This
function would be very useful, especially during a heavy batch
time frame.

A way to obtain DASD information, well known by MVS system
engineers, is to find the UCBs via the CVT and use the OBTAIN
and LSPACE macros for each VOLSER and UCB address.
Unfortunately, this traditional method does not return SMS
STOGROUP information. Another problem, in a dynamic I/O
configuration environment, is the UCB scan via the CVT
(described by IBM as the 'UCB scan service'), which must be
replaced by an authorized call to the UCBSCAN macro.

An easier way is to invoke IDCAMS for the DCOLLECT
function. This function, described in SC26-4562: Access Method
Services for the Integrated Catalog Facility, returns information
such as VTOC status, mount attribute, free space, fragmentation
index etc, and the storage group. The DCOLLECT function can
only be invoked from an APF-authorized environment. In
addition, the access to DCOLLECT function can be controlled by
RACF. In case of problems with the DCOLLECT function,
consider IBM APAR OY65054.

ON-LINE MONITORING

The SGMON REXX EXEC invokes IDCAMS to gather
information for all on-line DASD volumes. Then it processes the
information by STOGROUP. The volume count, total capacity,
and free and used amounts are then presented to the user via an
ISPF panel in a dynamic area. Typical output is shown in Figure
1.

SGMON REXX EXEC

/* REXX : SGMON ------------------------------------------------- */
/* STORAGE GROUP MONITOR                                 VER 1.2  */
/* TRACE I */
NUMERIC DIGITS 15
"NEWSTACK"
CPU = STORAGE(208,4)
CPU = STORAGE(D2X(C2D(CPU) + 12),4)
CVT = STORAGE(10,4)
CVTPROD = D2X(C2D(CVT) - C2D('28'X))
SPLVL = STORAGE(CVTPROD,16)
ADDRESS ISPEXEC "VGET (ZSYSID)"
SID = ZSYSID
LO = 66
HI = 80          /* THRESHOLD */
BL = '21'X
GR = '22'X
YE = '23'X
RE = '24'X
"ALLOC DD(SYSPRINT) DSN('NULLFILE') SHR REUSE"
"ALLOC DD(SYSIN) NEW LRECL(80) REUSE"
QUEUE ' DCOLLECT VOLUMES(*) OUTFILE(OUTDS) NODATAINFO'
QUEUE ''
"EXECIO * DISKW SYSIN (FINIS"
/* --------------------------------------------------------------- */
END = 0
DO WHILE (^END)
   "ALLOC DD(OUTDS) NEW LRECL(264) RECFM(V B) REUSE"
   "CALL 'SYS1.LINKLIB(IDCAMS)'"
   "EXECIO * DISKR OUTDS (STEM X. FINIS"
   "FREE F(OUTDS)"
   STOGRP_NB = 0
   ALLDATA = ''
   DO I = 1 TO X.0
      VOLUME.I = SUBSTR(X.I,25,6)
      PCT_FREE.I = C2D(SUBSTR(X.I,36,1))
      KB_FREE.I = C2D(SUBSTR(X.I,37,4))
      KB_ALLOC.I = C2D(SUBSTR(X.I,41,4))
      TOT_CAPA.I = C2D(SUBSTR(X.I,45,4))
      LEN = C2D(SUBSTR(X.I,81,2))
      STOGROUP_NM.I = SUBSTR(X.I,83,LEN)
      IF STOGROUP_NM.I = ''
         THEN STOGROUP_NM.I = 'OTHER   '
      DO J = 0 TO STOGRP_NB
         IF STOGROUP_NM.I = GROUP.J
            THEN
               DO
                  FREE.J = FREE.J + KB_FREE.I
                  CAPA.J = CAPA.J + TOT_CAPA.I
                  VOL_NB.J = VOL_NB.J + 1
                  LEAVE
               END
      END
      IF J = STOGRP_NB +1
         THEN
            DO
               FREE.J = KB_FREE.I
               CAPA.J = TOT_CAPA.I
               GROUP.J = STOGROUP_NM.I
               VOL_NB.J = 1
               STOGRP_NB = STOGRP_NB +1
            END
   END
   SGDATA = ''
   DO I = 1 TO STOGRP_NB
      PCT.I = 100*(FREE.I / CAPA.I)
      PCT.I = FORMAT(PCT.I,3,0)
      FREE.I = FORMAT(FREE.I/1024,9,0)
      CAPA.I = FORMAT(CAPA.I/1024,10,0)
      VOL_NB.I = FORMAT(VOL_NB.I,3)
      IF 100-PCT.I >= LO THEN CO = YE
                         ELSE CO = GR
      IF 100-PCT.I >= HI THEN CO = RE
      STAR = COPIES('*',41)
      BLNK = COPIES(' ',41)
      BAR = (100-PCT.I)/2.5
      BAR = FORMAT(BAR,2,0)
      BAR = SUBSTR(STAR,1,BAR)
      BAR = BAR || BL || BLNK
      BAR = SUBSTR(BAR,1,40)
      LNE.I = BL || GROUP.I || ' ' || VOL_NB.I || ,
              ' ' || FREE.I || ' ' || CAPA.I || ' ' || ,
              ' ' || PCT.I || CO || BAR
      ALLDATA = ALLDATA || LNE.I
   END
   PDATE = DATE('U')
   PTIME = TIME()
   ADDRESS ISPEXEC "PQUERY PANEL(SGMON01) AREANAME(SGDATA) DEPTH(DEPTH)"
   AREALEN = DEPTH * 80
   TOP = 0
   RETCODE = 0
   DO UNTIL (RETCODE ^= 0)
      SGDATA = SUBSTR(ALLDATA,(TOP*80)+1,AREALEN)
      ADDRESS ISPEXEC "DISPLAY PANEL(SGMON01)"
      RETCODE = RC
      ADDRESS ISPEXEC "VGET (ZVERB ZSCROLLA ZSCROLLN)"
      IF ZVERB = '' THEN LEAVE
      IF (STOGRP_NB > VDEPTH)
         THEN
            DO
               IF (ZVERB = 'DOWN')
                  THEN
                     IF ZSCROLLA = 'MAX'
                        THEN TOP = STOGRP_NB-VDEPTH+1
                        ELSE TOP = MIN(TOP+ZSCROLLN, STOGRP_NB-VDEPTH+1)
                  ELSE
                     IF (ZVERB = 'UP')
                        THEN
                           IF ZSCROLLA = 'MAX'
                              THEN TOP = 1
                              ELSE TOP = MAX(TOP-ZSCROLLN,1)
            END
   END
   IF RETCODE >= 8 THEN END = 1
END
"DELSTACK"
"FREE F(SYSIN)"

Notice that IDCAMS must be defined in the TSO-authorized
program table IKJTSOxx.

SGMON01 ISPF PANEL

)Attr default(]+[)
 $ Type(output) Intens(high) Color(yellow) Just(left) Caps(off)
 | Type(text)   Intens(high) Color(white)  Caps(off)
 + Type(text)   Intens(high) Color(green)  Caps(off)
 $ Type(input)  Intens(high) Color(red)    Caps(on)
 @ Area(dynamic) Scroll(on)    Extend(on)
21 Type(dataout) Intens(low)   Color(blue)
22 Type(dataout) Color(green)  Hilite(reverse)
23 Type(dataout) Color(yellow) Hilite(reverse)
24 Type(dataout) Color(red)    Hilite(reverse)
/* ------------------------------------------------------------------ */
/* Storage Group Monitor (SGMON)                             ver 1.2  */
/* ------------------------------------------------------------------ */
)Body expand(\\)
|--\-\-- SGMon Ver 1.2 --\-\--+
+     CPU:$cpu + SYSID:$sid + MVS:$splvl  + DATE:$pdate   + TIME:$ptime   +
]Command ===>[zcmd                                            ]Scroll ===>[amt +
+     Low-Threshold:$lo+%     Hi-Threshold:$hi+%
]         Vol      Free      Total  Pct
]StoGroup   #      (Mb)       (Mb) free         StorageGroup Pct used
]______________________________________ 0__________________50________________100
+
@sgdata -----------------------------------------------------------------------@
+PF  3=END   7=UP   8=DOWN   ENTER=REFRESH
+
+
)Init
 .cursor = zcmd
)Proc
 &vdepth = lvline(sgdata)
 ver(&lo,range,0,100)
 ver(&ht,range,0,100)
)End


Pierre Gavroy
Systems Engineer
J P Morgan  (Belgium)                                                              c J P Morgan 1994

