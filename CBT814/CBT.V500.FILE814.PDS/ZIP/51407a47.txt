MVS performance tuning experience

We are a fairly young MVS/SP CICS 1.6.1 site and inherited our
MVS performance settings (ie ICS, IPS, and OPT) from the
contractors who helped us initially set up the system.

The system was reasonably lightly loaded for the first 18 months
to 2 years and performance was satisfactory.  However, we then
experienced a more rapid growth in the workload (mostly in the
form of more CICS transactions) and the production CICS systems
began to suffer.

We were surprised to discover that the production CICS systems
were often paging at up to 100 pages a second; we believed our
production CICS regions to be storage protected and so should not
have paged very much.  Further investigation showed that we
were protecting only the first 2 megabytes of production CICS
storage whereas the production CICS working set sizes were often
larger than this.  Also unknown to us was the fact that if a region
is storage protected and the working set size for that region
becomes larger than the maximum specified as being protected,
that region becomes the first candidate for page stealing!  So this
explained our experiences - as the CICS regions grew so they
paged at a disproportionately higher rate.

The question was - how to tackle the problem?  If we increased
the size of the maximum working set size to be protected it could
have a severe impact on the test and middle (user acceptance)
CICS regions and the batch workload.  Also there was the chance
that the CICS working set size would still peak at greater than the
maximum size protected and so would suffer a very high paging
rate just at the time when most people were using it!

We decided it was probably best to review all of our performance
parameters rather than try to tackle this problem in isolation.
First we decided on a priority order for all work in the system
(see Figure 1) and then looked at the performance parameters of
MVS.

The three members of SYS1.PARMLIB that we concerned
ourselves with were IEAICS, IEAIPS, and IEAOPT.


IEAICS

This member is used to split the tasks (as listed in Figure 1) into
separate performance groups - both for RMF reporting purposes
and to enable member IEAIPSnn to describe discrete performance
attributes for each type of task.  An example ICS member is
shown in Figure 2.


IEAIPS

This member is used to give different performance characteristics
to each performance group.

The CPU, IOC, MSO, and SRB parameters are weighting factors that
determine the number of service units used by a task.  They are
probably best left at the default values unless, for example, you
want to penalise tasks that are heavy on I/O.

APGRNG should be (0-15) to stop users creating a higher priority
job than is calculated by the system.

CPGRT determines the minimum and maximum paging rate that
you are prepared to let the common area suffer.  It makes sense
to use this parameter, since if, for example, you are going to
protect production CICS you might not see much benefit if the
common area is paging at a very high rate.

IOQ should normally be set to PRTY - ie I/O requests are queued
based on each address space’s I/O priority.

PVLDP defines the dispatching algorithm and priority that
initiators and privileged jobs will use.  Don’t let it default as the
default means that initiators and privileged jobs are put at the
lowest level!

The WKL and OBJ parameters define how much of a ‘look in’ a
domain (as specified by the DMN parameter later) will receive,
depending upon how many service units the domain has
consumed.  These can range from giving a domain service
whenever it can, regardless of how many service units it has
consumed, to putting a domain at the bottom of the pile as soon as
it has consumed any service units.

The DMN (domain) parameter is used to determine the target
minimum and maximum number of address spaces that should be
swapped in at any one time.  Clearly something like VTAM should
never be swapped out so it should be defined in its own
performance group (in the ICS) and a CNSTR sub-parameter of
(1,1) should be used on the DMN parameter associated with the
performance group that VTAM is in.  The AOBJ and DOBJ sub-
parameters decide which OBJ curve (or definitions) should be used
for this domain.  FWKL is used when a fixed work level rather
than any OBJ curve, is required.

The PGN parameter is where the performance groups are tied up
to domains and also where further performance attributes are
described.  The DMN sub-parameter links the performance group
with a particular domain, eg in Figure 3 performance group 8 is
VTAM and is linked to domain 8 which has a CNSTR sub-
parameter of (1,1), meaning always have one address space from
this performance group swapped in whenever possible.  As VTAM
is the only address space in that domain it should always be
swapped in.

DP is used to give a dispatching algorithm and priority to the
address space.  F gives a fixed priority, M gives a mean time to
wait priority (ie the priority varies depending on how long the
task has been waiting for the CPU), and R gives a rotating priority.
Use the DP sub-parameter to prioritise the workload as originally
set out in your version of Figure 1.

OBJ associates an objective curve (as defined by the WKL and OBJ
parameters earlier) with this performance group.  This OBJ differs
from the AOBJ and DOBJ sub-parameters of the DMN parameter in
that AOBJ and DOBJ are used to determine the rate of service
given to the domain and OBJ is used when the system calculates
which address space to swap out.

Now we come to the two sub-parameters that were affecting our
production CICS systems.  PWSS is the sub-parameter that
specifies the target working set size for tasks in that performance
group.  Specify PWSS by PWSS=(min,max).  If the target working
set size of a task is less than the minimum specified by PWSS it
will never have any pages stolen unless there is a severe frame
shortage.  However (and this is where our problem lay), if the
working set size becomes greater than the maximum specified by
PWSS, that task becomes the first candidate for page stealing.  So
in our case, production CICS was having pages stolen from it
before test batch!  We have found that a better way to protect a
performance group is to use the PPGRT sub-parameter, which
specifies the minimum and maximum paging rates that you are
prepared to let the performance group suffer.  This is specified by
PPGRT=(min,max).  If the paging rate for a task in that
performance group falls below the minimum specified by PPGRT,
the target working set size may be reduced.  If the paging rate
goes above the maximum specified by PPGRT then the target
working set size will be increased until the paging rate falls
between the minimum and maximum again.  This, for us, has been
a much better way of giving a good and more consistent response
time to our production CICS users.  Some experimentation with
PPGRT is necessary to find that users feel to be a sufficiently good
level of response without noticeably affecting the other tasks in
the system.  As can be seen from the example IPS (Figure 3) the
PPGRT sub-parameter is different for each of our production CICS
regions.

DUR and ISV are used to determine how long a task is at a
particular level within a performance group.  They are normally
only used for TSO and batch.


IEAOPT

IBM recommends that you don’t touch this member unless you
really know what you are doing.  However, there are some
parameters worth looking at.

When the system is looking to see whether it should increase or
decrease the target number of tasks running, ie it checks to see if
it is under or over-utilised.  If it is neither, it is ‘happy’; if it is
under-utilised, it will increase the target number of tasks by 1; if
it is over-utilised, it will decrease that number by 1.

The following OPT parameters are used (among others) in these
calculations: RCCUICT, RCCCPUT, PAGERT1/2, RCCPDLT, RCCPUP,
RCCASMT, and RCCPTRT.  You may find it is of benefit to use only
the page fault rate parameter (RCCPTRT) to control ‘system happy’.

To do this you will have to monitor performance reports (eg RMF)
and decide what are acceptable minimum and maximum paging
rates for your system.  Then disable all the other parameters
involved in the calculation by setting them so they have no
impact, ie:
    RCCUICT=(0,0)
    RCCCPUT=(98.0, 100.0)
    PAGERT1/2=(1000,2000)
    RCCPDLT=(1000,1000)
    RCCCPUP=(98.0,100.0)
    RCCASMT=(1000,1000)

Use RCCPTRT to determine a ‘happy’ paging rate for your system.
Figure 4 shows an example of an OPT definition.  Remember that
the ICS, IPS, and OPT members can be brought in and backed out
while the system is up by using the SET command, eg SET ICS=nn,
so if you do make a mistake it is easy to go back to what you
know to be an acceptable member.

Obviously, no two systems are alike and parameter definitions
that give good performance on one system may give bad
performance on another, eg in our particular case TSO is used by
Technical Support and Operations only and so has little impact on
the overall system.

I hope this article has given you a feeling for what can be
achieved in MVS performance tuning.  Clearly not all parameters
can be covered in an article like this but hopefully I have whetted
your appetite for tuning, getting the best out of your system and
not accepting IBM defaults without question!  One final word -
always remember the golden rule of tuning - one change at a
time!

Tony Ledger
Chief Systems Programmer
Mercantile and General Reinsurance (UK) © Xephon 1989

