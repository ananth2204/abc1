ACS storage class exit

While working with ACS routines during the implementation
of DFSMS, I found a couple of drawbacks associated with
WRITE messages originating from the Storage Class routine.
By default, the WRITE verb presents messages back to a batch
job via the JCL statement messages portion of the JOBLOG.  If
a job executes successfully, the submitter is rarely interested in
looking at this area of output, which follows the JCL expansion
output.  In addition, messages coming out of the ACS routines
do not appear in the SYSLOG for review.

In my case, the shop was interested in flagging any allocation
going through the system that exceeded 300 megabytes.  This
included two possibilities: one where the primary is over 300
megabytes and the other where the combination of primary and
secondary could go over 300 megabytes.  Using the ACS
routine to WRITE a message to the user is helpful if the job
gets failed.  In that situation, the user is forced to look at the
JCL statement messages to determine the reason for failure.  I
chose to fail the job with a WRITE message and EXIT CODE
(999) if the primary allocation was above 300 megabytes.  The
message indicated that they should contact the storage
administrator for further assistance.  However, when a dataset
allocation was only potentially greater than 300 megabytes
because of possible secondary allocations, we decided it was
not necessary to fail the job outright.  Instead, a warning
message was issued via a WTO in the IGDACSSC ACS exit.
This caused it to appear in the initial area of the JOBLOG,
which programmers usually review.  It also permitted the
storage administrator to examine the SYSLOG periodically to
summarize which jobs were receiving the message.  They
could then be brought to the programmer's attention in a
follow-up call.  In most instances, they noticed the message
and analysed whether the allocation was proper.  Where
appropriate, the allocation was reduced.

The IGDACSSC exit code used to implement the WTO
message is shown below.  It has been adapted from the sample
IGDACSSC exit code found on the CBIPO RIM tape.  The
basic framework of the code allows it to be easily adapted to
write other messages to the JOBLOG/SYSLOG from an ACS
routine.  An added feature of the exit is that it will issue a
warning message to TSO users as well as batch jobs if a large
allocation occurs via TSO ALLOCATE.  Using the ACS
routine, WRITE, this would not be possible unless the
allocation is failed.  In addition to writing messages via a
WTO, the exit code has another significant advantage over the
ACS routine.  It can format and display data from any of the
read-only variables.  This function can be used to display
variables when the ACS routines are not working as desired
because of variables containing unexpected or unknown values.
If you have access to the same code on the RIM tape, it
contains considerable code to exploit this idea.  The code is
installed by assembling and linking into SYS1.LPALIB.
Remember to link it RENT, REUS, and REFR.  At IPL time,
DFSMS will detect its presence and use it appropriately.  If
problems occur with the exit, DFSMS disables it until the next
IPL.

         TITLE 'ACS STORAGE CLASS ROUTINE EXIT'
*   THIS EXIT IS USED TO WRITE A MESSAGE TO THE JOBLOG WHEN A TEST JOB
*   ALLOCATES A DATASET THAT COULD POTENTIALLY GROW LARGER THAN 300MB.
*   IN ADDITION TO A MESSAGE, THE DATASET NAME AND MAXSIZE ARE LISTED.
R0       EQU   0         WORK
R1       EQU   1         ADDRESS OF EXIT PARAMETER LIST
R2       EQU   2         WORK
R3       EQU   3         BASE FOR ACS READ ONLY VARIABLES
R4       EQU   4         WORK AREA 1 BASE
R5       EQU   5         EXIT PARAMETER LIST BASE
R6       EQU   6         VARIABLE WORK AREA BASE
R10      EQU   10        WORK
R11      EQU   11        WORK AREA 2 BASE
R12      EQU   12        BASE REG
R13      EQU   13        REG SAVE AREA
R14      EQU   14        RETURN ADDRESS
R15      EQU   15        BASE REG
IGDACSSC CSECT
IGDACSSC AMODE 31
IGDACSSC RMODE ANY
         USING IGDACSSC,R15       ESTABLISH ADDRESSABILITY
         STM   R14,R12,12(R13)    STANDARD ENTRY LINKAGE
         L     R5,0(R1)           ESTABLISH ADDRESSABILITY TO
         USING ACSPMD,R5             EXIT PARAMETER LIST
         L     R4,ACSPWORK        ESTABLISH ADDRESSABILITY TO
         USING WORKAR1,R4            WORK AREA
         LA    R11,SAVEAREA       STANDARD SAVE AREA
         ST    R13,4(R11)         BACKWARD SAVE AREA POINTER
         ST    R11,8(R13)         FORWARD SAVE AREA POINTER
         LR    R13,R11
         LR    R12,R15            LOAD BASE REGISTER
         DROP  R15
         USING IGDACSSC,R12       ESTABLISH ADDRESSABILITY
         L     R3,ACSPERO
         USING ACERO,R3           ANCHOR ACS READ ONLY VARIABLES
         DROP  R5
         DROP  R4
         CLC   ACEROJOB(2),=C'TS' IS THIS A TEST JOB?
         BNE   RETURN             IF NOT, NO NEED TO CHECK
         L     R2,ACEROMSZ        LOAD THE MAXSIZE VALUE
         C     R2,=X'0004B000'    IS MAXSIZE < 300MB
         BL    RETURN             IF YES, NO NEED FOR MESSAGE
         LA    R2,WRKARSZ         LOAD SIZE OF WORK AREA
         GETMAIN R,LV=(R2)        GET VIRT STOR FOR WORK AREA
         LR    R11,R1             ESTABLISH ADDRESSABILITY TO
         USING WORKAR2,R11           WORK AREA
         MVC   WTOD,WTOL          INTIALIZE WTO AREA
         MVC   VARWORK,BLANKS     BLANK OUT WORKAREA
         MVC   VARWORK(73),WTOMSG LOAD WTO MESSAGE
         XR    R4,R4              CLEAR REG
         LA    R6,VARWORK         LOAD WORKAREA ADDRESS
         USING MAXSIZED,R6        ADDRESS MAXSIZE DSECT
         L     R4,ACEROMSZ        MAX DS SIZE IN KB
         CVD   R4,DW              CONVERT TO DECIMAL
         UNPK  MAXSIZEV,DW        UNPACK
         OI    MAXSIZEV+6,X'F0'   UNSIGN
         BAL   R10,ISSUEWTO       GO WRITE MESSAGE
         DROP  R6
         MVC   VARWORK,BLANKS     BLANK OUT WORKAREA
         USING DSND,R6            ADDRESS DSNAME DSECT
         MVC   DSNK,=C'DSN: '     MOVE DSNAME KEYWORD
         MVC   DSNV,ACERODSN      MOVE DSNAME
         BAL   R10,ISSUEWTO       GO WRITE DSNAME MESSAGE
         DROP  R6
         LA    R0,WRKARSZ         LOAD SIZE OF WORK AREA
         FREEMAIN R,LV=(R0),A=(R11) FREE WORK AREA
RETURN   DS    0H
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         LA    R15,0              SET RETURN CODE
         BR    R14
ISSUEWTO DS    0H
         LA    R2,WTOD            ADDRESS OF WTO LIST
         WTO   MF=(E,(R2))        WRITE VARIABLE TO JOBLOG
         BR    R10                RETURN TO CALLER
WTOL     WTO   '1-------10--------20--------30--------40--------50-----C
               ---60--------70--------80',ROUTCDE=(11),MF=L
WTOSZ    EQU   *-WTOL             SIZE OF WTO AREA
BLANKS   DC    CL80' '            BLANKS
WTOMSG   DC    C'FOLLOWING DATASET POTENTIALLY EXCEEDS 300MB TOTAL ALLOC
               CATION (XXXXXXXKB),'
         LTORG
         IGDACSPM                 MAP EXIT PARAMETER LIST (R5)
         IGDACERO                 MAP READ ONLY VARIABLES (R3)
WORKAR1  DSECT
SAVEAREA DS    XL72               STANDARD SAVE AREA
WORKAR2  DSECT                    WORK AREA
WTOD     DS    XL(WTOSZ)          ISSUE WTO WORK AREA
         ORG   WTOD+4
VARWORK  DS    CL80               TEST CASE WORK AREA
         ORG   WTOD+WTOSZ
DW       DS    0D                 DOUBLE WORD WORK AREA
         DS    XL8
         DS    0H
WRKARSZ  EQU   *-WORKAR2          SIZE OF WORK AREA
DSND     DSECT
DSNK     DS    CL5'DSN= '
DSNV     DS    CL44
         DS    CL31
MAXSIZED DSECT
         DS    CL62
MAXSIZEV DS    CL7
         DS    CL11
         END   IGDACSSC


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                   c Geisinger System Services 1991

