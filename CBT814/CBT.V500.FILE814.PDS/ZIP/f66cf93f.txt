Displaying MVS virtual storage

I wrote the following program in order to follow the control
block chains described in the MVS Debugging Handbooks. and
browse through MVS virtual storage.

The program, SHOWMEM, displays the virtual storage of the
address space of a TSO user in a form similar to that of a dump
listing, that is, in both hexadecimal and character
representation. SHOWMEM shows memory at location zero
(the beginning of the PSA). With subcommands you can view
other parts of memory. A summary of all subcommands you
can use is given when you press PF1.

         TITLE  'SHOWMEM: Display virtual memory'
*   THIS PROGRAM SHOWS VIRTUAL MEMORY OF MVS ON SCREEN
*   This program shows memory at location zero (begin PSA).
*   With several subcommands you can view other parts of memory.
SHOWMEM  CSECT
         STM    R14,R12,12(R13)
         BALR   R12,0
         USING  *,R12
         ST     R13,SAVE+4
         LR     R2,R13
         LA     R13,SAVE
         ST     R13,8(R2)
         B      PRGBEGIN
SAVE     DC     18F'0'
PRGBEGIN DS     0H
* Save USING status
         PUSH   USING
*   I N I T I A L I Z A T I O N
BEGINPSA DS     0H
         XR     R11,R11           R11 = 0: Load begin address of memory
SHOWSCR  DS     0H
         USING  MEMORY,R11
         BAL    R14,SUBCLS        Clear screen
         TPUT   TOPLINE1,L'TOPLINE1
         TPUT   TOPLINE2,L'TOPLINE2
*   S H O W   M E M O R Y   O N   S C R E E N
SHOWLINE MVC    HEXA(16),MEMORY
* Translate address memory location from HEX to EBCDIC
         LA     R1,HEXTAB         R1: HEXADECIMAL TABLE
         LA     R2,MEMADDR        R2: RESULT FIELD
         LA     R3,8              R3 = 8: NUMBER OF DIGITS TO TRANSLATE
         LR     R7,R11            R7: SOURCE FIELD
         BAL    R14,SUBX2E        Convert address memory location
* Translate memory from HEX to EBCDIC
         LA     R2,EBCDIC1
         LA     R3,8
         L      R7,MEMORY
         BAL    R14,SUBX2E        Convert first fullword
         LA     R2,EBCDIC1+9
         LA     R3,8
         L      R7,MEMORY+4
         BAL    R14,SUBX2E        Convert second fullword
         LA     R2,EBCDIC2
         LA     R3,8
         L      R7,MEMORY+8
         BAL    R14,SUBX2E        Convert third fullword
         LA     R2,EBCDIC2+9
         LA     R3,8
         L      R7,MEMORY+12
         BAL    R14,SUBX2E        Convert fourth fullword
* Translate offset from HEX to EBCDIC
         LA     R2,OFFSET
         LA     R3,4
         LR     R7,R4
         SLDL   R6,16             Convert only last 4 bytes of R7
         BAL    R14,SUBX2E        Convert offset
         LA     R4,16(R4)         Next offset
* TPUT / TGET and validation of response
         TPUT   LINE,L'LINE
         DROP   R11
         LA     R11,16(R11)       R11 = R11 + 16
         USING  MEMORY,R11
         BCT    R9,SHOWLINE       Loop until 18 lines on screen
         TPUT   BOTLINE,L'BOTLINE
         XC     RESPONSE(15),RESPONSE   Low value in response
         TGET   RESPONSE,15,ASIS
         DROP   R11
         TR     RESPDATA,TRTABLU  Translate response to uppercase
         CLI    RESPKEY,X'F8'     PFkey 8: FORWARD
         BE     PFK8
         CLI    RESPKEY,X'F6'     PFkey 6: GOTO ADDR 1ST FULLW ON SCRN
         BE     PFK6
         CLI    RESPKEY,X'F7'     PFkey 7: BACKWARD
         BE     PFK7
         CLI    RESPKEY,X'F2'     PFkey 2: REFRESH CURRENT SCREEN
         BE     PFK2
         CLI    RESPKEY,X'F1'     PFkey 1: SHOW HELP INFORMATION
         BE     PFK1
         CLI    RESPKEY,X'F3'     PFkey 3: END
         BE     PRGEND
         B      ENTER
PFK1     LA     R2,HELPTEXT
         LA     R3,HELPLEN
         STFSMODE ON,INITIAL=YES      VTAM full screen mode
         TPUT   (R2),(R3),FULLSCR
         STFSMODE OFF
         TGET   RESPONSE,15,ASIS
         B      PFK2              Show same screen
PFK2     SH     R11,H288          Show same screen
         B      SHOWSCR
PFK6     SH     R11,H288          Go to top of screen
         L      R11,0(R11)        Load pointer 1st fullword on screen
         B      SHOWSCR
PFK7     CLI    RESPDATA,X'00'    Page backward ??
         BNE    PFK7HALF          .. NO, maybe half page backward
         CH     R11,H576          Already at start of memory ??
         BL     BEGINPSA          .. YES, show memory at begin PSA
         SH     R11,H576          Page backward
         B      SHOWSCR
PFK7HALF CLI    RESPDATA,C'H'     User wants half page backwards ??
         BNE    PFK7OFFS          .. NO, offset        backward
         CH     R11,H432          Already at start of memory ??
         BL     BEGINPSA          .. YES, show memory at begin PSA
         SH     R11,H432          Half page backward
         B      SHOWSCR
PFK7OFFS BAL    R14,SUBOFFS
         LR     R7,R11            Save new R11
         LR     R11,R6
         SH     R11,H288          Go to begin screen
         CR     R11,R7            Offset greater than memory location??
         BL     BEGINPSA
         SR     R11,R7            Go backward offset
         B      SHOWSCR
PFK8     CLI    RESPDATA,X'00'    Page forward ??
         BE     SHOWSCR           .. YES
PFK8HALF CLI    RESPDATA,C'H'     Half page forward ??
         BNE    PFK8OFFS          .. NO, offset forward
         SH     R11,H144
         B      SHOWSCR
PFK8OFFS BAL    R14,SUBOFFS
         AR     R11,R6
         SH     R11,H288
         B      SHOWSCR
ENTER    CLI    RESPDATA,X'00'     No data
         BE     SHOWSCR            .. assume page forward
UCVT     CLC    RESPDATA(3),=C'CVT'   User wants CVT control block ??
         BNE    UAPF              .. NO, examine next possibility
         L      R11,CVTPTR        Pointer to CVT
         B      SHOWSCR
UAPF     CLC    RESPDATA(3),=C'APF'   User wants APF library table ??
         BNE    UMAP              .. NO, examine next possibility
         BAL    R14,SUBAPF
         B      PFK2              Show same screen
UMAP     CLC    RESPDATA(3),=C'MAP'   User wants map of virtual storage
         BNE    UADDR             .. NO, RESPDATA is LOCATION address
         BAL    R14,SUBMAP
         B      PFK2              Show same screen
UADDR    BAL    R14,SUBOFFS
         B      SHOWSCR
*   S T A N D A R D   R E T U R N   C O N V E N T I O N S
PRGEND   BAL    R14,SUBCLS        Clear screen
         L      R13,SAVE+4
         LM     R14,R12,12(R13)
         BR     R14
* Restore USING status for subroutines
         POP   USING
         TITLE 'SHOWMEM: Subroutines'
*   S U B R O U T I N E: CONVERT HEX TO EBCDIC CODE
         DC     F'0'
SUBX2E   ST     R14,SUBX2E-4
X2ELOOP  XR     R6,R6             R6 = 0, then next HEX
         SLDL   6,4               digit is shifted into it, and
         LA     8,0(6,1)          is used to compute addr of
         MVC    0(1,2),0(8)       corresponding EBCDIC code.
         LA     R2,1(R2)          Adjust addr to next result byte
         BCT    R3,X2ELOOP        Repeat till all digits done
         L      R14,SUBX2E-4
         BR     R14
*   S U B R O U T I N E: CONVERT EBCDIC TO HEX CODE
         DC     F'0'
SUBE2X   ST     R14,SUBE2X-4
         TR     RESPDATA,TRTABEX      Translate RESP
         PACK   RESPPACK(8),RESPDATA(8)
         LM     R10,R11,RESPPACK
         SRDL   R10,4             Shift sign digit out of R11
         L      R14,SUBE2X-4
         BR     R14
*   S U B R O U T I N E: CONVERT OFFSET
         DC     F'0'
SUBOFFS  ST     R14,SUBOFFS-4
         LM     R6,R7,RESPDATA
OFFSLOOP CLM    R7,B'0001',=X'00'   Last byte is low value ??
         BNE    OFFSOK              .. NO, convert address
         SRDL   R6,8                Add leading zeroes to address
         B      OFFSLOOP
OFFSOK   STM    R6,R7,RESPDATA
         LR     R6,R11              Save old R11
         BAL    R14,SUBE2X
         L      R14,SUBOFFS-4
         BR     R14
*   S U B R O U T I N E: CLEAR SCREEN
         DC     F'0'
SUBCLS   ST     R14,SUBCLS-4
         STLINENO LINE=1
         TPUT   CLSCREEN,3,CONTROL,WAIT,HOLD,BREAKIN
         XR     R4,R4             R4 = 0 : Reset offset
         LA     R9,18             R9 = 18: Number of lines on screen
         L      R14,SUBCLS-4
         BR     R14
CLSCREEN DC     X'125D7F'         clear screen command for 3270
*   S U B R O U T I N E: SHOW APF LIBRARIES
         DC     F'0'
SUBAPF   ST     R14,SUBAPF-4
         BAL    R14,SUBCLS              Clear screen
         L      R6,CVTPTR               Pointer to CVT
         L      R6,CVTAUTHL-CVT(R6)     Pointer to APF libraries
         LH     R7,0(R6)                R7 = Number of APF libraries
         LA     R6,2(R6)                R6 = R6 + 2: Skip Number
APFLOOP  DS     0H
         MVI    APFLINE,C' '            Clear,
         MVC    APFLINE+1(52),APFLINE      APFLINE
         MVC    APFVOLID(6),1(R6)       Get VOLID
         XR     R8,R8                   R8 = 0
         ICM    R8,1,0(R6)              Get length APFVOLID+APFDSN
         SH     R8,=H'7'                Subtract length APFVOLID + 1
         LA     R6,7(R6)                R6 = R6 + 7: Go to begin DSN
         EX     R8,APFMOVE              Move DSN to APFDSN
         TPUT   APFLINE,L'APFLINE
         AR     R6,R8                   Go to length APFVOLID+APFDSN of
         LA     R6,1(R6)                R6 = R6 + 1: Next APF library
         BCT    R7,APFLOOP
         TGET   RESPONSE,15,ASIS
         L      R14,SUBAPF-4
         BR     R14
APFLINE  DS     0CL53
APFVOLID DS     CL6
         DS     CL3
APFDSN   DS     CL44
APFMOVE  MVC    APFDSN(0),0(R6)
*   S U B R O U T I N E: SHOW VIRTUAL STORAGE MAP
         DC     F'0'
SUBMAP   ST     R14,SUBMAP-4
         LA     R1,HEXTAB
         L      R7,CVTPTR             Determine end of nucleus
         L      R7,CVTNUCB-CVT(R7)
         ST     R7,FULLW              Save begin of private area
         BCTR   R7,0                  Subtract 1 from R7
         LA     R2,NUCEND
         LA     R3,8
         BAL    R14,SUBX2E
         LA     R2,PRIBEG
         LA     R3,8
         L      R7,FULLW              Get begin of private area
         BAL    R14,SUBX2E
         L      R7,CVTPTR             Determine end of private area
         L      R7,CVTSHRVM-CVT(R7)
         ST     R7,FULLW              Save begin of CSA
         BCTR   R7,0                  Subtract 1 from R7
         LA     R2,PRIEND
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R2,CSABEG
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,CVTPTR
         L      R7,CVTVPSA-CVT(R7)    Addr of copy of sysgened PSA
         ST     R7,FULLW
         BCTR   R7,0                  Subtract 1 from R7
         LA     R2,CSAEND
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R2,CPSABEG
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R7,4095(R7)           Size sysgened PSA: 4096 bytes
         ST     R7,FULLW
         LA     R2,CPSAEND
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R7,1(R7)
         LA     R2,MLPABEG
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,CVTPTR
         L      R7,CVTLPDIA-CVT(R7)   Addr of LPA directory
         LA     R7,0(R7)              Drop high order bit
         ST     R7,FULLW              Save begin address of LPA
         BCTR   R7,0                  Subtract 1 from R7
         LA     R2,MLPAEND
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R2,PLPABEG
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,CVTPTR
         L      R7,CVTGDA-CVT(R7)
         L      R7,SQASPQEP-GDA(R7)
         L      R7,SPDQEPTR-SPQESECT(R7)
         L      R7,DQEBLKAD-DQESECT(R7)  Addr 1st 2K block described by
*                                        this DQE
         LA     R7,0(R7)               Drop high order bit
         ST     R7,FULLW              Save begin address of SQA
         BCTR   R7,0                  Subtract 1 from R7
         LA     R2,PLPAEND
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,FULLW
         LA     R2,SQABEG
         LA     R3,8
         BAL    R14,SUBX2E
         L      R7,CVTPTR
         L      R7,CVTMZ00-CVT(R7)    Highest addr in virtual storage
         LA     R2,SQAEND
         LA     R3,8
         BAL    R14,SUBX2E
         STFSMODE ON,INITIAL=YES      VTAM full screen mode
         LA     R2,MAP
         LA     R3,MAPLEN
         TPUT   (R2),(R3),FULLSCR
         STFSMODE OFF
         TGET   RESPONSE,15,ASIS
         L      R14,SUBMAP-4
         BR     R14
         TITLE 'SHOWMEM: Tables'
*   T A B L E S
HEXTAB   DC     C'0123456789ABCDEF'
*  Translate table EBCDIC to HEX
TRTABEX  DC     256AL1(*-TRTABEX)      Generate 256 byte table
         ORG    TRTABEX+X'81'          ORG over little a
         DC     XL6'AABBCCDDEEFF'
         ORG    TRTABEX+X'C1'          ORG over big A
         DC     XL6'AABBCCDDEEFF'
         ORG    TRTABEX+X'FF'          Set location counter after table
*  Translate table LOWERCASE to UPPERCASE
TRTABLU  DC    256AL1(*-TRTABLU)       Generate 256 byte table
         ORG   TRTABLU+X'81'           ORG over little a
         DC    9AL1(*-TRTABLU+X'40')   uppercase A to I
         ORG   TRTABLU+X'91'           ORG over little j
         DC    9AL1(*-TRTABLU+X'40')   uppercase J to R
         ORG   TRTABLU+X'A2'           ORG over little s
         DC    8AL1(*-TRTABLU+X'40')   uppercase S to Z
         ORG   TRTABLU+X'FF'           Set location counter after table
         TITLE 'SHOWMEM: Data areas'
*   D A T A   A R E A S
TOPLINE1 DS     0CL77
         DC     2CL1' '
         DC     CL7'ADDRESS'
         DC     3CL1' '
         DC     CL6'OFFSET'
         DC     14CL1' '
         DC     CL11'HEXADECIMAL'
         DC     20CL1' '
         DC     CL9'CHARACTER'
         DC     5CL1' '
TOPLINE2 DS     0CL77
BOTLINE  DS     0CL77
         DC     CL1'+'
         DC     10CL1'-'
         DC     CL1'+'
         DC     6CL1'-'
         DC     CL1'+'
         DC     38CL1'-'
         DC     CL1'+'
         DC     18CL1'-'
         DC     CL1'+'
LINE     DS     0CL77
         DC     CL2'[ '
MEMADDR  DS     CL8
         DC     CL3' [ '
OFFSET   DS     CL4
         DC     CL3' [ '
EBCDIC1  DS     CL17
         DC     CL2'  '
EBCDIC2  DS     CL17
         DC     CL3' [ '
HEXA     DS     CL16
         DC     CL2' ['
HELPTEXT DC     X'C1'            WCC
         DC     X'115D7F'        SBA r24 c80
         DC     X'114040'        SBA r01 c01
         DC     X'3C404000'      Fill screen with nulls
         DC     X'11404E'        SBA r01 c15
         DC     C'SUBCOMMANDS OF SHOWMEM'
         DC     X'11C15E'        SBA r02 c15
         DC     C'======================'
         DC     X'11C3F0'        SBA r04 c01
         DC     C'  address      - SHOW MEMORY AT LOCATION address'
         DC     X'11C540'        SBA r05 c01
         DC     C'  <ENTER>      - PAGE FORWARD'
         DC     X'11C650'        SBA r06 c01
         DC     C'  <PF1>        - SHOW HELP INFORMATION'
         DC     X'11C760'        SBA r07 c01
         DC     C'  <PF2>        - REFRESH CURRENT SCREEN'
         DC     X'11C8F0'        SBA r08 c01
         DC     C'  <PF3>        - QUIT'
         DC     X'114A40'        SBA r09 c01
         DC     C'  <PF6>        - GOTO 1ST ADDRESS ON SCREEN'
         DC     X'114B50'        SBA r10 c01
         DC     C'  <PF7>        - PAGE BACKWARD'
         DC     X'114C60'        SBA r11 c01
         DC     C'  H<PF7>        - HALF PAGE BACKWARD'
         DC     X'114DF0'        SBA r12 c01
         DC     C'  offset<PF7>  - SUBTRACT offset FROM CURRENT '
         DC     C'LOCATION'
         DC     X'114F40'        SBA r13 c01
         DC     C'  <PF8>        - PAGE FORWARD'
         DC     X'115050'        SBA r14 c01
         DC     C'  H<PF8>        - HALF PAGE FORWARD'
         DC     X'11D160'        SBA r15 c01
         DC     C'  offset<PF8>  - ADD offset TO CURRENT LOCATION'
         DC     X'11D2F0'        SBA r16 c01
         DC     C'  APF          - SHOW APF AUTHORIZED LIBRARIES'
         DC     X'11D2F0'        SBA r16 c01
         DC     C'  CVT          - SHOW MEMORY OF COMMUNICATIONS'
         DC     C'VECTOR TABLE'
         DC     X'11D440'        SBA r17 c01
         DC     C'  MAP          - SHOW VIRTUAL STORAGE MAP'
         DC     X'115CF0'                           r24 c01
         DC     X'1D40134040401DE8'
HELPLEN  EQU    *-HELPTEXT
H288     DC     H'288'           18 lines of 16 bytes
H144     DC     H'144'           0.5 * 288
H432     DC     H'432'           1.5 * 288
H576     DC     H'576'           2   * 288
MAP      DC     X'C1'                       WCC
         DC     X'115D7F'                   SBA r24 c80
         DC     X'114040'                   SBA r01 c01
         DC     X'3C404000'                 fill screen with nulls
         DC     X'11C55D',C'VIRTUAL STORAGE MAP'   r05 c30
         DC     X'11C66D',C'==================='   r06 c30
         DC     X'11C9C3',C'PREFIXED SAVE AREA'    r08 c20
         DC     X'11C9D7',C'00000000 - 00000FFF'   r08 c40
         DC     X'114AD3',C'NUCLEUS'               r09 c20
         DC     X'114AE7',C'00001000 -'            r09 c40
         DC     X'114AF2'                          r09 c51
NUCEND   DS     CL8
         DC     X'114BE3',C'PRIVATE AREA'          r10 c20
         DC     X'114BF7'                          r10 c40
PRIBEG   DS     CL8
         DC     CL3' - '
PRIEND   DS     CL8
         DC     X'114CF3',C'COMMON SERVICE AREA'   r11 c20
         DC     X'114DC7'                          r11 c40
CSABEG   DS     CL8
         DC     CL3' - '
CSAEND   DS     CL8
         DC     X'114EC3',C'SYSGENED PSA'          r12 c20
         DC     X'114ED7'                          r12 c40
CPSABEG  DS     CL8
         DC     CL3' - '
CPSAEND  DS     CL8
         DC     X'114FD3',C'MODIFIED LPA'           r13 c20
         DC     X'114FE7'                           r13 c40
MLPABEG  DS     CL8
         DC     CL3' - '
MLPAEND  DS     CL8
         DC     X'1150E3',C'PAGEABLE LPA'           r14 c20
         DC     X'1150F7'                           r14 c40
PLPABEG  DS     CL8
         DC     CL3' - '
PLPAEND  DS     CL8
         DC     X'11D1F3',C'SYSTEM QUEUE AREA'      r15 c20
         DC     X'11D2C7'                           r15 c40
SQABEG   DS     CL8
         DC     CL3' - '
SQAEND   DS     CL8
         DC     X'115CF0'                           r24 c01
         DC     X'1D40134040401DE8'
MAPLEN   EQU     *-MAP
         DS     0F
RESPONSE DS     0CL15
RESPKEY  DS     CL1                     id of key user hits
         DS     CL2                     screen address of cursor
         DS     CL1                     X'11' if any fields are modified
         DS     CL2                     screen address of RESPDATA
RESPDATA DS     CL9                     offset 6: data field
RESPPACK DS     2F
FULLW    DS     F
         LTORG
         TITLE 'SHOWMEM: Dummy sections'
* Memory addressability
MEMORY   DSECT
         DS     4F
         CVT    DSECT=YES
         IHAGDA
         IHASPQE
         IHADQE
         END    SHOWMEM


Jim de Vries
Systems Programmer (The Netherlands)                  c Xephon 1992

