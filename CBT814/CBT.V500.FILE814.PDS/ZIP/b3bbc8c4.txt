Static link to dynamically loaded subprograms
In the MVS environment it is often necessary to perform a static CALL to a
subprogram, either for performance reasons or because the subprogram has
multiple entry points.  This technique is simple but suffers the disadvantage of
not necessarily accessing the most up to date program version.  This problem can
be solved by writing an interface program which is called statically from the
calling program.  The interface program performs a dynamic load of the called
subprogram and passes control onto this loaded subprogram.  This method is
especially useful where the called subprogram is used by a large number of
programs, as it isolates the calling program from changes to the called
subprograms and avoids the requirement of re-linking these programs.
Figure 1 illustrates the technique.
A second interface program is required when the called subprogram contains more
than one entry point.  This interface program contains the statically linked
subprogram and is itself dynamically loaded by the first interface program.
This technique does not avoid a re-link of the modified subprogram, but it
isolates the calling program from such changes and, as such, restricts the
alterations to a single program (which is especially useful when the subprogram
is used by a large number of programs).
Figure 2 illustrates this technique.
This technique can also be extended for the case where a number of subprograms
(and subroutines) are called.
ASSEMBLER CODE
Interface one
             ENTRY subrtn1
             ENTRY subrtn2
             ...
subrtn1      NOPR  1                   subroutine 1 ID
subrtn2      NOPR  2                   subroutine 2 ID
             ...
             ST    R12,12(R13)         save R12
             BALR  R12,0               set up base register
             USING *,R12
             STM   R0,R1,REGSA         save work registers
             ST    R14,REGRA           save return address
             SR    R14,R14             zeroise R14
             IC    R14,1(R15)          subroutine code (from NOPR)
             SLL   R14,2               displacement in branch-table
             B     BR_TAB(R14)         go to (pseudo-)subroutine
BR_TAB       NOP   0                   dummy entry
             B     X_subrtn1           link address
             B     X_subrtn2            etc
             ...
X_subrtn1    MVI   ID,ID_subrtn1       ID for subroutine 1
             B     LINK
             ...
LINK         L     R15,A_interface2    address(Interface 2)
             LTR   R15,R15             zero (= not yet loaded)?
             BNZ   LOADED              : no
             LOAD  EP=interface_2      load Interface 2
             ST    R0,A_interface2     save Interface 2 address
             LR    R15,R0
LOADED       L     R14,REGRA         load return addr (in calling pgm)
             LM    R0,R1,REGSA         restore work registers
             MVC   PARMLIST,0(R1)      copy parameter list
* simulate CALL
             LA    R1,PARMADDR         address of parameter list
             L     R12,12(R13)         restore R12
             BR    R15                 go to Interface 2
REGSA        DS    2A                  R0, R1 save area
REGRA        DS    A                   R14 save area
ID           DS    X                   ID for called subroutine
PARMADDR     DC    A(ID)             address(ID for called subroutine)
PARMLIST     DS    XL256              work area for calling parameters
A_interface2 DC A(0)
Interface two
interface_2  CSECT
             USING *,R15               set up temporary base register
             ST    R2,reg2             save R2
             ST    R12,reg12           save R12
             BALR  R12,0               set up base register
             USING *,R12
             LR    R2,R1               save address of parameter list
             L     R1,0(R2)            subprogram ID (first parameter)
             SLL   R1,2                displacement in transfer table
             L     R15,xfer(R1)        address of subroutine
             LA    R1,4(R2)            addr of called subrtn parm list
             L     R2,reg2             restore R2
             L     R12,reg12           restore R12
             BR    R15                 call subroutine
xfer         DC    V(subrtn1)
             DC    V(subrtn2)
             ...
reg2         DS    A
reg12        DS    A


A Rudd (West Germany)    © A Rudd 1988












































