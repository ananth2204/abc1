The PDSE - IBM's definitive partitioned dataset?

In 1989, IBM announced a new type of file for MVS, the
Partitioned Dataset Extended (PDSE), a considerable
enhancement of the old PDS structure, still very popular in
every MVS data centres, but dating from the 1960s and quite
fossilized since then.

With the PDSE, IBM's intentions are:

1      To go beyond today's limitations of PDSs, the most acute
      of which are the frequent need to compress them in order
      to reclaim the lost space resulting from old members being
      deleted.

2      To benefit from the new ESA and SMS features (eg dataset
      level caching, automatic management).

3      To set a more device-independent structure for partitioned
      files. The PDSE, being nothing more than a disguised
      VSAM dataset, can be allocated onto FBA or CKD disks,
      whereas the PDS depends more closely on the CKD
      architecture.


Characteristics of THE PDSE and comparison with PDS

1      PDSs cannot spread over more than 16 extents: PDSEs can
      take up to 123 extents, like VSAM files.

2      PDSs become bigger and bigger because of wasted
      unreusable space making it necessary for them to be
      periodically compressed using the IEBCOPY utility. A
      kind of software end-of-file is maintained from which new
      members can be added (the DS1LSTAR field in VTOC
      DSCB). PDSEs dynamically reuse internal spaces: a
      member (or even the directory) can be spread over multiple
      unreusable spaces, and the DS1LSTAR field is frozen to
      indicate the last track allocated, not the last track used (as
      with traditional PDSs). IEBCOPY does not compress
      PDSEs.

3      The directory of the PDSE is extendable, whereas you
      must create a new PDS just to have the size of its directory
      increased. Moreover, the directory can contain more than
      500,000 members.

4      Directory searches in a PDS are sequential: member 'Z'
      will always be reached more slowly (sometimes
      significantly so) than member 'A'. With PDSEs, use of an
      index makes searching more efficient, no matter how many
      members there are.

5      Owing to the fact that they are allocated in 4K control
      intervals, PDSEs behave independently of their 'declared'
      blocksize: the concept of 'simulated blocksize' allows them
      to be read whatever blocksize is indicated, contrasting with
      the old PDSs, where blocksize has a determining influence
      upon member processing and optimized DASD occupancy.

6      Concurrent updating of PDSEs can be envisaged, while
      only one member at a time may be modified in a PDS. For
      instance, the following JCL (where OUT1 and OUT2 are
      opened and closed at the same time) could apply to PDSEs
      but not to PDSs.

      //UPDATE EXEC  PGM=MYUPDATE
      //OUT1   DD    DSN=MYPDSE(MEMBER1),DISP=SHR
      //OUT2   DD    DSN=MYPDSE(MEMBER2),DISP=SHR

7      The PDS displays a rather simple structure, while the
      PDSE is much like a VSAM linear dataset the internals of
      which are 'IBM proprietary information'. Those old
      systems programmer's tricks of the trade which induced us
      to zap directories in order to recover mistakenly destroyed
      members are now getting out of date.

8      A PDSE is a SMS-managed file: therefore it will be
      catalogued, allocated in a storage pool, and perhaps
      managed by HSM. Unlike PDSs, PDSEs cannot belong to
      a Generation Data Group (GDG), nor contain load modules
      (though IBM is committed to giving this support). Like
      PDSs, PDSEs cannot be multi-volume.

9      Access to PDSEs can be enhanced by caching both the
      directory (thanks to an ESA dataspace) and the members (a
      hiperspace may be used according to the SMS storage class
      assigned to the PDSE). VLF also works in the usual way
      with PDSEs.

10      A difference which IBM does not put forward, but I quite
      appreciate, is that in everyday life the PDSE appears to be
      a less 'breakable' file than the PDS. An erroneous
      IEBGENER with just //SYSUT2 DD DSN=PDSE (ie
      without a member name) or similarly a link edit with
      //SYSLMOD DD DSN=PDSE will terminate with an
      abend code of S213-4C or S213-3C, and the PDSE,
      fortunately, will not be damaged.


Compatibility

One more time, praise be to IBM! Upward compatibility is not
a myth. Any program that processes PDSs in a standard way
may handle PDSEs without any change. TTR addressing is
simulated for PDSEs, so the usual Assembler macro
instructions are processed in the same way. These are:

o      READ, WRITE, CHECK, GET, PUT (for member
      processing).

o      BLDL, FIND, STOW, NOTE, POINT (for directory
      processing and access to members).

All the utilities that handled PDSs until now run likewise with
PDSEs. These are: IEBCOPY; IEHLIST; IEHPROGM;
IEBPTPCH; IEBEDIT; IEBGENER; AMS; DFDSS; SORT;
the PRINTDS command; PDF 3.4, 3.5, or 3.6; and so on - the
archaic IEHMOVE is the only exception.

The directory (or what replaces it) can be read as a sequential
file with RECFM=F,BLKSIZE=256, as can be done with the
PDS.

PDSs and PDSEs can be concatenated together (up to 123 files
or extents).

A PDSE is recognized by a new flag set at offset X'4E' in the
format-1 DSCB of the VTOC (current values are X'80' for an
SMS-managed file, X'08' for a PDSE, and possibly X'20' for
system determined blocksizes). IBM warns that some third-
party products use that 'reserved' field for other purposes, in
which case some tidying up should be done in the VTOC
before implementing PDSEs (or SMS).


Installation

Minimum levels required to support PDSEs are: MVS/ESA
3.1.0 plus PTFs, DFP 3.2 plus PTFs (IEBCOPY is completely
re-shipped), ISPF and ISPF/PDF 3.2 (though 3.3 would be
preferable), DFDSS 2.5, DFHSM 2.5 (2.6 is preferable), and
DFSORT Release 11 plus PTFs. An enabling PTF for PDSEs
has to be applied: UY50879 (PUT9104). In addition, read the
informational APAR II04480.

SMS must be installed and active for PDSEs to be created. So,
check your ACS routines and storage classes to be sure PDSEs
can really be allocated. Two new systems address spaces will
appear (after IPL) to support access to PDSEs; their names are
SYSBMAS and SMXC.

DFHSM parameters must be updated to indicate DFDSS as the
DATAMOVER for PDSE datasets, for example:

      SETSYS -
           DATAMOVER(DFHSM  -
                     DFDSS(       /* DFDSS AS DATAMOVER FOR PDSE   */ -
                     MIGRATE(PO(LIBRARY))  /* (MIGRATION AND       */ -
                     BACKUP(PO(LIBRARY)))) /* BACKUP OPERATIONS)   */


How to create a PDSE

Under ISPF/PDF option 3.2

A new option M, 'Enhanced dataset allocation', now performs
allocation of any SMS-managed file with some other
advantages like the capability to bypass any blocksize
specification (it will be system determined) or to specify space
units in kilobytes or megabytes.

To create a PDSE, specify 'LIBRARY' as the dataset name
type field. Space quantities or file format can be omitted if a
data class assigns default sizes and format.

By JCL

Here are 2 examples involving the new DSNTYPE parameter
(the first example uses default options provided by a data
class):

//STEP1   EXEC   PGM=IEFBR14
//DD1     DD     DISP=(NEW,KEEP),DSN=PROD.SOURCE,DSNTYPE=LIBRARY
/*
//STEP2   EXEC   PGM=IEFBR14
//DD1     DD     DISP=(NEW,CATLG),DSN=PROD.CNTL,DSNTYPE=LIBRARY,
//        SPACE=(CYL,(1,1,9)),LRECL=80,RECFM=FB,UNIT=DASD

Note that in the first example, DISP=(NEW,KEEP) will be
read in fact as DISP=(NEW,CATLG). In the second, system
determined blocksize (SDB) will be invoked.

By AMS

A PDSE can be created with the ALLOCATE statement like
this:

//STEP1   EXEC   PGM=IDCAMS
//SYSPRINT DD    SYSOUT=*
//SYSIN    DD    *
   ALLOCATE  DA('PROD.SOURCE')  NEW  DSNTYPE(LIBRARY)

Under TSO

Under TSO, a PDSE can be created with the ALLOCATE
command as follows:

ALLOC  DA('PROD.CNTL') NEW CATALOG LRECL(80) RECFM(F B)
       SP(1 1) CYLINDERS DIR(9) DSNTYPE(LIBRARY)

In every case (except with a default data class) the directory
size must be indicated, even though it is meaningless for
PDSEs.


Our experience

A few PDSs were converted to PDSEs: typically, CLIST or
skeleton libraries, source or JCL datasets. Some PTFs had to
be applied to DFHSM (no PDSEs could be restored from
HSM) and ISPF. The PDSE facility worked smoothly but it
seemed that some improvements are still necessary. Very big
PDSEs can cause several annoyances.

These are the most glaring problems we have encountered and,
hopefully, they should be fixed by IBM in the months to come:

o      The 'Number of members' displayed by ISPF 3.1 or 3.2
      can be false (APAR OY37430 is closed 'SUG' -
      Suggested system improvement).

o      DFHSM cannot back-up some very big PDSEs because of
      a bug when calculating their sizes (APAR OY52023 still
      opened at the time of writing).

o      IEBCOPY is very slow in copying PDSEs to PDSs or to
      other PDSEs: the elapsed time is often three times larger,
      and the CPU time and number of EXCPs are considerably
      larger than with PDSs. We must wait for a new DFP
      release to get this fixed (again APAR OY33516 is closed
      'SUG').

o      More disk space is required for PDSEs than for PDSs (we
      noted in some cases PDSEs needed up to 40% more). This
      is partly because of the way members are stored in the
      PDSE (each member begins on a block boundary) and
      partly because of the space taken up with some internal
      information (an empty PDSE is never 0% full).

o      The need for more virtual common space must be seriously
      addressed. IBM specifies that a minimum of 1.4
      megabytes of common (ECSA, ESQA) is required, but
      from what we could see much more will be required if you
      use big PDSEs. Watch the usage of ECSA key 5 (subpools
      231 and 241) carefully. These get filled by 'IGW' control
      blocks (the majority of them are never released). We
      realized this when we began to implement PDSE to store
      the daily MVS SYSLOG dataset with a monthly cycle (the
      last 30 days were kept). That PDSE was allocated as
      follows :

      //   DCB=(LRECL=137,BLKSIZE=13030,RECFM=VBM),SPACE=(CYL,(81,9,10)),
      //   UNIT=3390

      It soon became very big (120 extents and 1152 allocated
      cylinders). When we submitted a batch job to read it
      completely, ECSA key 5 space grew by 2 megabytes and
      an auxiliary storage shortage occurred caused very likely
      by the hiperspace associated with SYSBMAS. We had to
      increase the ECSA size and (prudently) disable PDSE
      caching.


Conclusion

PDSEs will not completely replace PDSs, just as VSAM did
not kill OS files (a good reason being that systems files like
PARMLIB cannot be SMS-managed and therefore cannot be
PDSEs). Nevertheless, PDSEs can produce substantial benefits
in avoiding X37 abends with big PDSs, for PDSs having many
members, or when cache performance is required.


Thierry Falissard
Systems Engineer
SOGEM - Banque la Henin (France)                        c Xephon 1992

