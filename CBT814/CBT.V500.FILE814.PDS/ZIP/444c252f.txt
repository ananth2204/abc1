Cross memory communication (continued)

This article is concluded this month with the publication of the
final set of programs (PWLFDDN3 and PWLFDDN4); the
PWLINIT, XSRB, and $#DDN macros; sample JCL; and an
example of SYSPRINT output.


PWLFDDN3 AND PWLFDDN4

Simultaneous and synchronous addressability to another
address space is finally possible with MVS/ESA through the
use of access registers and a new addressability mode called
AR mode. With this method, the need to pass information back
and forth using the CSA is completely eliminated.

As in previous examples, the main program, PLWFDDN3, will
analyse input parameters, obtain a work area (in the private
subpool), load the subroutine program PWLFDDN4 (in the
private subpool), and then BALR to it.

The main functions performed by PWLFDDN4 are:

1      Save the current secondary address space number.

2      Switch the current secondary address space number to the
      specified address space.

3      Use an SAC instruction to switch to AR mode.

4      Use the LAE instruction to load a special ALET value of 1
      in selected access registers. PWLFDDN4 now has
      addressability to both the primary and secondary address
      spaces. Any reference to data using the selected registers
      (with the corresponding AR set to ALET 1) as the base
      register will be from the secondary address space (ie use
      the segment table of the secondary address space). Other
      registers not affected (corresponding AR not changed) can
      still be used to access data from the primary address space.

5      Restore the secondary address space number.

6      Restore addressing mode and return.

PWLFDDN4 also demonstrates the use of BAKR and PR
instructions to utilize the ESA linkage stacks instead of the
conventional save area chains.

Since the ability to examine any address space also implies the
ability to destroy any address space, all programs must be
authorized and linked with the AC=1 attribute.

Source code for PWLFDDN3

         TITLE ' FIND DDNS FOR SPECIFIED JOB OR USER'
* THIS PROGRAM WILL CALL PWLFDDN4 WHICH WILL SWITCH TO AR MODE
* TO SEARCH THE TARGET ADDRESS SPACE
PWLFDDN3 PWLINIT
         LTR   R1,R1
         BZ    EXIT                      EXIT IF NO INPUT PARM
         L     R2,0(R1)
         TM    0(R1),X'80'
         BNO   DDNS0000
         LA    R4,JOBNAME
         LH    R5,0(R2)
         LR    R3,R5
         LA    R2,2(R2)
         MVCL  R4,R2                     GET INPUT JOBNAME
DDNS0000 DS    0H
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=2
         L     R2,16                     CVT
         L     R2,X'22C'(R2)             ASVT
         LA    R2,X'210'(R2)             PT TO 1ST ASID SLOT
LOOP     DS    0H
         L     R3,0(R2)
         N     R3,=X'00FFFFFF'
         LTR   R3,R3
         BZ    EXIT                      END OF ASVT. CAN'T FIND ASID
         L     R3,0(R2)
         LTR   R3,R3
         BM    SKIP                      SLOT NOT ASSIGNED
         L     R3,0(R2)
         L     R3,X'AC'(R3)              ASCBJBNI
         LTR   R3,R3
         BZ    LOOP1
         CLC   JOBNAME,0(R3)
         BE    FOUND
LOOP1    DS    0H
         L     R3,0(R2)
         L     R3,X'B0'(R3)              ASCBJBNS
         LTR   R3,R3
         BZ    SKIP
         CLC   JOBNAME,0(R3)
         BE    FOUND
SKIP     DS    0H
         LA    R2,4(R2)
         B     LOOP
FOUND    DS    0H
         L     R8,0(R2)                   GET ASCB ADDR
         LH    R9,X'24'(R8)               GET ASID
* LOAD PWLFDDN4
* PWLFDDN4 WILL SWITCH TO AR MODE
         LOAD  EP=PWLFDDN4,LOADPT=PWLFDDN4
         LA    R2,DDNWASZ          WORK AREA PREFIX
         LA    R3,DDN2DDSZ         SIZE OF EACH DDNAME ENTRY
         LA    R1,DDN#EQU
         STH   R1,ENT#
         MH    R3,ENT#             SIZE OF ALL DDNAME ENTRIES
         AR    R2,R3
         ST    R2,DDNWKSZ
         GETMAIN RC,LV=(R2),SP=24  GET DDN WORK AREA IN PRIVATE
         LTR   R15,R15
         BZ    DDN10100
         WTO   'ERROR1',ROUTCDE=11
         B     EXIT
DDN10100 DS    0H
         LR    R7,R1               POINT TO DDN WORK AREA
         ST    R1,DDNWORK
         USING DDNSECT,R7          DDN ADDRESSABILITY
         LR    R10,R7
         LA    R11,DDNWASZ
         LR    R4,R7
         SLR   R5,R5
         MVCL  R10,R4             CLEAR WORKAREA
         ST    R8,DDNASCB         STORE TARGET ASCB ADDR IN DDN
         MVC   DDNID,=C'DDNS'      SET DDN ID
         STH   R9,DDNPASID        STORE TARGET ASID IN DDN
         LH    R1,ENT#
         STH   R1,DDN#ENT
         LR    R1,R7               POINT TO DDN WORKAREA
         L     R15,PWLFDDN4
         BALR  R14,R15             CALL PWLFDDN4
         B     OPEN
OPEN     DS    0H
         L     R7,DDNWORK         POINT TO WORK AREA
         LA    R3,DDN2ENT         SKIP PREFIX TO FIRST ENTRY
         LA    R4,OUTAREA
         LH    R5,DDN#ENT
         LA    R6,DDN2DDSZ        SIZE OF EACH ENTRY
         BCTR  R6,0
*PRINT DDN ENTRIES
         OPEN  (SYSPRINT,OUTPUT)
PRINT1   DS    0H
         CLI   0(R3),X'FF'        END OF ALL FOUND ENTRIES?
         BE    PRINT9
         MVI   OUTAREA,C' '
         MVC   OUTAREA+1(79),OUTAREA
         EX    R6,MOVE
         PUT   SYSPRINT,(R4)
         LA    R3,DDN2DDSZ(,R3)   NEXT ENTRY
         BCT   R5,PRINT1
PRINT9   DS    0H
         CLOSE (SYSPRINT)
         L     R2,DDNWKSZ
         FREEMAIN RC,LV=(R2),A=(R7),SP=24  FREE WORK AREA
         LTR   R15,R15
         BZ    DSN10900
         WTO   'ERROR 9',ROUTCDE=11
DSN10900 DS    0H
         MODESET KEYADDR=OLDKEY,WORKREG=2
         B     EXIT
MOVE     MVC   0(0,R4),0(R3)
PWLFDDN4 DS    F                   ENTRY POINT ADDR OF PWLFDDN4
DDNWORK  DS    F                   WORKAREA ADDR
DDNWKSZ  DS    F                   WORKAREA SIZE
ENT#     DS    F
OUTAREA  DS    CL80
ZERO     DC    F'0'
OLDKEY   DC    F'0'
JOBNAME  DC    CL8' '
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS
         $#DDN
         END   PWLFDDN3

Source code for PWLFDDN4

PWLFDDN4 CSECT
* THIS ROUTINE LOADED INTO PRIVATE AREA AND CALLED BY PWLFDDN3
*        RECEIVE CONTROL IN PRIMARY ADDRESS MODE
*        R1: ADDRESS OF DDN WORK AREA (MAPPED BY $#DDN)
*        SWITCH TO AR MODE TO ACCESS TARGET ADDRESS SPACE
         BAKR  R14,R0             SAVE STATUS (ESA ONLY)
* SET UP BASE AR/GPR 12
         LAE   R12,R0             CLEAR BITS 0-31 OF AR 12
         BASR  R12,R0             SET UP GR 12
         USING *,R12
         LR    R9,R1               LOAD WORKAREA ADDR
         USING DDNSECT,R9          SET ADDRESSABILITY
         AXSET AX=AUTHALL          SET AUTH INDEX
         ESAR  R14                 GET CURRENT 2NDRY ASN
         ST    R14,DDNCSASN        SAVE CURRENT 2NDRY ASN
         LH    R4,DDNPASID         GET TARGET ASID
         SSAR  R4                  SET 2NDRY TO TARGET
         LAM   R2,R5,ALET1         LOAD ALET 1 INTO AR 2 TO 5
         SAC   512                 SET AR MODE
         L     R2,DDNASCB          PTR TO ASCB
         L     R3,X'AC'(,R2)
         LTR   R3,R3
         BZ    DDN20010
         MVC   DDN2JBNI,0(R3)      BATCH JOBNAME
         B     DDN20020
DDN20010 DS    0H
         L     R3,X'B0'(,R2)
         LTR   R3,R3
         BZ    DDN20020
         MVC   DDN2JBNS,0(R3)      STC/LOGON/MOUNT JOBNAME
DDN20020 DS    0H
         L     R3,X'6C'(,R2)       ASCBASXB   (TARGET)
         ST    R3,DDN2ASXB
         MVC   DDN2FTCB(8),4(R3)   MOVE IN FIRST AND LAST TCB
         L     R3,4(,R3)           R3=FIRST TCB
         LA    R6,DDN2ENT          R6=FIRST DDN ENTRY  (HOME)
DDN20022 DS    0H
         LTR   R3,R3
         BZ    DDN20900
         L     R4,X'B4'(,R3)       JSCB
         L     R4,X'D0'(,R4)       INIT TCB
         LTR   R4,R4
         BZ    DDN20030            NO INIT (REGION CONTROL OR DUMP)
         CR    R3,R4
         BE    DDN20030            INIT
         L     R4,X'C'(,R3)        TIOT ADDR
         C     R4,DDN2PTIO         SAME TIOT TABLE
         BE    DDN20030
         ST    R4,DDN2PTIO
         LA    R4,24(,R4)           SKIP HEADER
         USING DDN2DDNS,R6
DDN20024 DS    0H
         CLC   0(4,R4),=X'00000000'  END OF TIOT?
         BE    DDN20030
         CLC   4(4,R4),=X'00000000'  INVALID DDNAME?
         BE    DDN20026              BYPASS.
         CLI   0(R4),X'14'         END OF ALL REGULAR DDENTRY
         BNE   DDN20900
         MVC   DDN2DDN,4(R4)
         ICM   R5,7,X'C'(R4)       JFCB ADDR
         MVC   DDN2DSN,X'10'(R5)   MOVE IN DSN
         TM    X'72'(R5),X'A0'     JFCDSRG1 - ISAM OR DA?
         BM    DDN20026            YES. SKIP.
         TM    X'73'(R5),X'08'     JFCDSRG2 - VSAM?
         BO    DDN20026            YES. SKIP.
         TM    X'67'(R5),X'01'     JFCBIND2 - TEMPORARY D.S.?
         BO    DDN20026            YES. SKIP.
         ICM   R5,7,X'11'(R4)      UCB ADDR
         LTR   R5,R5
         BZ    DDN20026
         TM    X'12'(R5),X'20'     DIRECT ACCESS?
         BNO   DDN20026            NO. SKIP.
         MVC   DDN2VOL,X'1C'(R5)   VOLSER
         MVC   DDN2DEV,X'D'(R5)    DEV ADDR  X'4' IS DEV ADDR IN HEX
         LA    R6,DDN2DDSZ(,R6)
         LA    R4,20(,R4)
         B     DDN20024
DDN20026 DS    0H
         XC    DDN2DDN(52),DDN2DDN
         LA    R4,20(,R4)
         B     DDN20024
DDN20030 DS    0H
         L     R3,X'74'(,R3)        NEXT TCB
         B     DDN20022
DDN20900 DS    0H
         MVI   DDN2DDN,X'FF'       INDICATE END OF ALL ENTRIES
         OI    DDNFLG1,X'80'       SIGNAL COMPLETION
         L     R14,DDNCSASN        GET SAVED 2NDRY ASN
         SSAR  R14                 RESTORE ORIGINAL 2NDRY ASN
         SAC   00                  RESTORE ADDRESSING MODE
         PR                        RESTORE STATUS AND RETURN
AUTHALL  DC    H'1'
ALET1    DC    16F'1'
         REGS
         $#DDN
         END   PWLFDDN4


Source code for macro PWLINIT

         MACRO
&L       PWLINIT
.* INIT MACRO FOR NON-RENT CODE
&L       CSECT ,
INIT_A&SYSNDX DS 0H
R0       EQU   0
R1       EQU   1

       etc

R15      EQU   15
         USING *,R15                    TEMPORARY
         B     INIT_B&SYSNDX
         DC    AL4(INIT_B&SYSNDX-INIT_A&SYSNDX-8)
         DC    CL23'&L   &SYSDATE &SYSTIME'
INIT_B&SYSNDX DS 0H
         STM   R14,R12,12(R13)
         LR    R1,R13                   WORK REGISTER
         CNOP  0,4
         BAL   R13,*+4+72               SET UP R13
         DC    18F'0'                   SAVE AREA
         LA    R13,0(,R13)              IN CASE 31-BIT
         ST    R1,4(,R13)               SAVE LAST IN THIS
         ST    R13,8(,R1)               SAVE THIS IN LAST
         USING *-84,R13
         B     INIT_C&SYSNDX
         DROP  R15
EXIT     DS    0H
         LA    R15,0                    STORE RETURN CODE
RC       EQU   *-1,1                    RETURN CODE
         L     R14,4(,R13)              PREV SAVE AREA
         STM   R0,R1,20(R14)            SAVE R0,R1 IN PREV SAVE AREA
         L     R13,4(,R13)              RESTORE REG 13
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)
         BR    R14
INITMODE DC    H'0'
INIT_C&SYSNDX MVI RC,0                  ENSURE RETURN CODE = 0
         L     R1,4(,R13)
         LM    R14,R2,12(R1)            RESTORE LINKAGE REGS
         AGO   .MEND
.MEND    ANOP
         MEND


Source code for macro XSRB

         MACRO
         XSRB
SRBSECT  DSECT
SRB      DS    0A
SRBID    DS    CL4                      EBCDIC ACRONYM FOR SRB @G381PXU
*                                       OR SSRB.               @G381PXU
SRBFLNK  DS    A                        FORWARD CHAIN FIELD
SRBASCB  DS    A                        PTR TO ASCB OF ADDRESS SPACE
*                                       SRB IS TO BE DISPATCHED TO
SRBFLC   DS    0CL8                     SRB AREA MOVED TO LOW CORE
SRBCPAFF DS    BL2                      CPU AFFINITY MASK
SRBPASID DS    H                        PURGEDQ ASID IDENTIFIER
SRBPTCB  DS    A                        PURGEDQ TCB IDENTIFIER
SRBEP    DS    0A                       ENTRY POINT OF ROUTINE @G860PXH
SRBEPA   DS    A                        ADDRESS OF ENTRY POINT @G860PXH
*                                        (31-BIT USERS)        @G860PXH
SRBMODE  EQU   X'80'                    ADDRESSING MODE INDICATOR
*                                                              @G860PXH
SRBRMTR  DS    0A                       ADDRESS OF RESOURCE MANAGER
*                                        ROUTINE               @G860PXH
SRBRMTRA DS    A                        ADDRESS OF RESOURCE MANAGER
*                                       ROUTINE (31-BIT USERS) @G860PXH
SRBRMODE EQU   X'80'                    ADDRESSING MODE INDICATOR
*                                                              @G860PXH
SRBPARM  DS    A                        USER PARAMETER
SRBSAVE  DS    A                        SAVE AREA POINTER
SRBPKF   DS    B                        PROTECT KEY INDICATION
SRBPRIOR DS    0B                       PRIORITY LEVEL INDIC   @G50DPXE
SRBFLGS  DS    B                        SRB OPTION FLAGS       @G50DPXE
SRBLLREQ EQU   X'80'                    LOCAL LOCK REQUIRED    @G50DPXE
SRBLLHLD EQU   X'40'                    LOCAL LOCK HELD        @G50DPXE
SRBFRREQ EQU   X'20'                    FRR REQUESTED          @G50DPXE
SRBFRRCL EQU   X'10'                    THIS BIT IS OBSOLETE   @G386PXV
*                                       SINCE FRR PARM AREA    @G386PXV
*                                       ALWAYS CLEARED BY      @G386PXV
*                                       DISPATCHER. RETAINED   @G386PXV
*                                       FOR COMPATIBILITY.     @G386PXV
SRBSUSP  EQU   X'08'                    SUSPENDED SRB ONLY ON FOR
*                                       SSRB                   @G50DPXE
SRBPNONQ EQU   X'04'                    NON QUIESCABLE SRB     @G50DPXE
SRBCMLRQ EQU   X'02'                    SRB REPRESENTS A CML   @G381PXU
*                                       LOCK REQUEST OR LOCAL  @G381PXU
*                                       LOCK REQUEST DELAYED   @G381PXU
*                                       DUE TO A CML REQUEST.  @G381PXU
*                                       IF SRBSUSP=1, THIS     @G381PXU
*                                       SSRB REQUIRES A CML    @G381PXU
*                                       LOCK FOR ITS OWN       @G381PXU
*                                       PROCESSING.            @G381PXU
*                                       IF SRBSUSP=0 AND       @G381PXU
*                                       SRBLLREQ=0, THIS SRB   @G381PXU
*                                       WAS CREATED ON BEHALF  @G381PXU
*                                       OF A TASK REQUIRING    @G381PXU
*                                       A CML LOCK.            @G381PXU
*                                       IF SRBSUSP=0 AND       @G381PXU
*                                       SRBLLREQ=1, THIS       @G381PXU
*                                       DELAYED SRB HAS BEEN   @G381PXU
*                                       RESCHEDULED WITHOUT    @G381PXU
*                                       THE LOCAL LOCK DUE TO  @G381PXU
*                                       A CML LOCK REQUEST.    @G381PXU
SRBRES1  EQU   X'01'                    RESERVED.              @G381PXU
SRBPSYS  EQU   X'00'                    SYSTEM PRIORITY LEVEL  @G50DPXE
SRBHLHI  DS    BL1                      INDICATION OF SUSPEND LOCKS
*                                       HELD AT SRB SUSPENSION @G50DPXE
SRBFLGS1 DS    B                        SRB TYPE FLAGS.        @G381PXU
SRBMAIN  EQU   X'80'                    SRB/SSRB MUST BE       @G381PXU
*                                       FREEMAINED.            @G381PXU
SRBSP245 EQU   X'40'                    SRB/SSRB FROM SUBPOOL  @G381PXU
*                                       245.                   @G381PXU
SRBRES2  EQU   X'20'                    RESERVED.              @G381PXU
SRBRES3  EQU   X'10'                    RESERVED.              @G381PXU
SRBRES4  EQU   X'08'                    RESERVED.              @G381PXU
SRBRES5  EQU   X'04'                    RESERVED.              @G381PXU
SRBRES6  EQU   X'02'                    RESERVED.              @G381PXU
SRBRES7  EQU   X'01'                    RESERVED.              @G381PXU
SRBFRRA  DS    A                        FRR ROUTINE ADDRESS    @G50DPXE
SRBEND   DS    0F                       END OF SRB             @G381PXU
SRBSIZE  EQU   SRBEND-SRBSECT           SIZE OF SRB
XSRBID   DC    C'XSRB'          EXTENDED SRB AREA
XSRBSCAN DS    F                ADDR OF CALLER'S SCAN AREA
XSAVE    DS    CL72             SAVE AREA FOR SRB
XSRBJBNI DS    CL8              BATCH JOBNAME
XSRBJBNS DS    CL8              TSO USERID/STC JOBNAME
XSRBASXB DS    F                ASXB ADDR
XSRBFTCB DS    F                FIRST TCB
XSRBLTCB DS    F                LAST TCB
XSRBWORK DS    F
XSRBPTIO DS    F
XMECB    DS    F
SRBWAREA DS    F
SRBWASZ  EQU   *-SRBSECT
XSRBDDNS DSECT                  FORMAT OF CALLER'S SCAN AREA
XSRBDDN  DS    CL8
XSRBDSN  DS    CL44
XSRBDEV  DS    CL3
XSRBVOL  DS    CL6
XSRBDDSZ EQU  *-XSRBDDN
         MEND


Source code for macro $#DDN

         MACRO
         $#DDN
DDNSECT  DSECT
DDNID    DS    F                                               PLMAR92D
DDNASCB  DS    F                ASCB ADDR OF TARGET ADDRESS SPACE
DDNPASID DS    H                ASID OF TARGET ADDRESS SPACE
DDNCSASN DS    F                CURRENT SECONDARY ASN
DDN#ENT  DS    H                NUMBER OF DDNAME ENTRIES
DDNFLG1  DS    XL1              FLAGS
DDNFLG2  DS    XL1              FLAGS
DDNFLG3  DS    XL1              FLAGS
DDNFLG4  DS    XL1              FLAGS
DDNSCAN  DS    F                ADDR OF DDN SCAN AREA
DDNSAVE  DS    CL72             SAVE AREA FOR PWLFDDN2
DDN2JBNI DS    CL8              BATCH JOBNAME
DDN2JBNS DS    CL8              TSO USERID/STC JOBNAME
DDN2ASXB DS    F                ASXB ADDR
DDN2FTCB DS    F                FIRST TCB
DDN2LTCB DS    F                LAST TCB
DDN2WORK DS    F
DDN2PTIO DS    F
DDN#EQU  EQU   2048                                            PLMAR92D
DDNWASZ  EQU   *-DDNSECT        DDN WORK AREA PREFIX
DDN2ENT  EQU   *                START OF DDN SCAN AREA
DDN2DDNS DSECT                  FORMAT OF EACH SCAN AREA ENTRY
DDN2DDN  DS    CL8              DDNAME
DDN2DSN  DS    CL44             DSNAME
DDN2DEV  DS    CL3              DEVICE ADDR
DDN2VOL  DS    CL6              VOLSER
DDN2DDSZ EQU  *-DDN2DDN
         MEND


Sample JCL to for assemble/link/execute

(PWLASM1 is an ASMFCLG procedure. LPARM is used for
the required link-edit parameters.)

//STA EXEC PWLASM1,PROG=PWLFDDNS,LPARM='AC=1'
//STA EXEC PWLASM1,PROG=PWLSRB,LPARM='AC=1,RENT'
//
//STA EXEC PWLASM1,PROG=PWLFDDN1,LPARM='AC=1'
//STA EXEC PWLASM1,PROG=PWLFDDN2,LPARM='AC=1,RENT'
//
//STA EXEC PWLASM1,PROG=PWLFDDN3,LPARM='AC=1'
//STA EXEC PWLASM1,PROG=PWLFDDN4,LPARM='AC=1'
//
//STC EXEC PGM=PWLFDDNS,PARM='NET'
//* OR     PGM=PWLFDDN1
//* OR     PGM=PWLFDDN3
//* PARM = TSO userid or STC/BATCH jobname
//STEPLIB DD DSN=your.loadlib,DISP=SHR
//SYSPRINT DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)


Sample output to SYSPRINT

DDNAME   DATA SET NAME                               DEV VOLSER

STEPLIB  ACFNCP.NCP43725.SSPLIB                      730 MVS123
VTAMLIB  SYS1.VTAMLIB1                               730 MVS123
         SYS1.VTAMLIB                                FA0 MVS456
VTAMLST  SYS1.VTAMLST                                730 MVS123
NCPDUMP  ACFNCP.DUMP                                 F40 MVS789
LOAD3705 SYS1.NCPLOAD                                730 MVS123


Peter W K Lee
Software Analyst (Canada)                        c Xephon 1992

