Dynamically adding entries to the APF table
INTRODUCTION
The following software has been tested under MVS/370 1.3.3 and 1.3.5, and MVS/XA
2.1.5 and 2.1.7.
All systems programmers have had a salesman arrive with new software, which he
insists should be tried straight away.  Even worse, someone high up in the
organisation wants his software package installed and run immediately and the
systems programmer realises that the software needs an authorised load library.
To get in a new authorised library, the IEAAPF member in SYS1.PARMLIB must be
updated and, worse still, an IPL must be performed.  In a production shop the
next IPL could very well be planned to take place in a weekÕs time so the
programmer has to break the news that the software will not be running until
then.  There is, of course, always the circumvention of temporarily polluting an
existing library with the new software and then moving it after the next IPL.
Likewise, moving an existing APF-authorised library to another volume will
require the APF table to be changed and an IPL to be performed.
To solve these problems and make dynamic changes to the in-storage APF table
without doing an IPL, a small program has been written.  This program can only
add a new entry to the in-storage APF table: it does not contain a real
change/delete function since this has been considered unnecessary.  The clean-up
will, anyway, take place during the next scheduled IPL provided that the changes
are reflected in the APF member in SYS1.PARMLIB.  The program will also list the
in-storage table.
The in-storage APF table is pointed to by CVTAUTHL in the CVT.  The format of
the table is a halfword containing a number of entries in the table followed by
a series of entries each consisting of the length of the entry (one byte), the
volume serial number (six bytes), and the DSNAME left aligned (variable length).
THE SOURCE CODE
*  PROGRAM TO LIST AND PERHAPS ADD A NEW ENTRY TO THE APF LIBRARY
*  A NEW ENTRY IS PUT INTO THE PARMFIELD AS 'VOLUMEDSNAME'.
*  EXAMPLE: CALL 'SYS1.XLINKLIB(APFTABLE)' 'PLQ004SYSX.ZXCV.LINKLIB'
         CVT   DSECT=YES
APFTABLE INITR AMODE=31,RMODE=24         see issue 15 pages 20-24
         L     R1,0(R1)                  GET PARM POINTER
         LH    R11,0(R1)                 GET LENGTH OF PARM
         STH   R11,PARMLEN               SAVE LENGTH OF PARM
         LA    R1,2(R1)                  GET PARM DATA ADDR
         ST    R1,PARMADDR               SAVE PARM DATA ADDR
         USING CVT,R2                    ADDRESS CVT
         L     R2,CVTPTR                 GET CVT ADDRESS
         L     R3,CVTAUTHL               GET AUTH LIBRARY LIST
         LH    R4,0(R3)                  GET NO OF ENTRIES IN TABLE
         STH   R4,OLDENTNO               SAVE NO OF ENTRIES
         LA    R3,2(R3)                  POINT TO FIRST ENTRY
         LA    R15,L'OLDENTNO            INITIALISE TABLE LENGTH
         STH   R15,OLDLEN                INITIALISE TABLE LENGTH
LOOP     EQU   *
         XR    R5,R5                     CLEAR WORK REG
         IC    R5,0(R3)                  GET LENGTH OF ENTRY
         LH    R15,OLDLEN                GET LENGTH OF TABLE
         LA    R15,1(R5,R15)             ADD UP LENGTH OF TABLE
         STH   R15,OLDLEN                SAVE LENTH OF TABLE
         LA    R6,1(R3)                  POINT TO ENTRY
         MVC   VOL,1(R3)                 GET VOLUME
         MVC   DSNAME,=CL44' '           CLEAR DSNAME
         SH    R5,=Y(L'VOL)              REDUCE BY LENGTH OF VOLUME
         BCTR  R5,0                      REDUCE FOR EXECUTE
         EX    R5,*+4                    MOVE THE STUFF
         MVC   DSNAME(0),1+L'VOL(R3)     MOVE THE STUFF
         LA    R5,1+L'VOL(R5)            RESET LENGTH AFTER EXECUTE
         TPUT  ENTRY,L'ENTRY             SHOW ENTRY
         LA    R3,1(R3,R5)               POINT TO NEXT ENTRY
         BCT   R4,LOOP                   RECYCLE
         LH    R15,PARMLEN               GET LENGTH OF PARM
         LTR   R15,R15                   ANY PARM
         BZ    RETURN                    IF NOT, RETURN
         CH    R15,=Y(L'VOL+HLQ+1)       AT LEAST SIX CHAR DSNAME
         BL    RETURN                    ELSE RETURN
         LA    R15,1(R15)                ADD LENGTH OF LENGTH
         AH    R15,OLDLEN                AND ADD OLD TABLE LEN
         STCM  R15,7,GETPARM+1           SET UP LENGTH FOR GETMAIN
         AUTHON                          see issue 10 page 24
         MODESET KEY=ZERO                GO INTO KEY ZERO
         STAX DEFER=YES                  DEFER ATTENTIONS
         SYSEVENT DONTSWAP               DONTSWAP SYSEVENT
         STATUS SET,MC,STEP              STOP ALL OTHER TASKS
         L     RO,GETPARM                SET UP FOR GETMAIN
         GETMAIN R,LV=(0)                GETMAIN NEW TABLE
         ST    R1,NEWTAB                 SAVE NEW TABLE ADDR
         LR    R14,R1                    GET NEW TABLE ADDR
         L     R2,CVTPTR                 GET CVT ADDRESS
         L     R4,CVTAUTHL               GET OLD AUTH LIBRARY LIST
         LH    R5,OLDLEN                 GET LENGTH OF OLD LIBRARY LIST
         LR    R15,R5                    SET UP TO LENGTH FOR MOVE LONG
         MVCL  R14,R4                    MOVE OVER OLD TO NEW TABLE
         L     R14,NEWTAB                GET ADDR OF NEW TABLE
         LH    R15,OLDENTNO              GET OLD NO OF ENTRIES
         LA    R15,1(R15)                ADD UP ONE NEW ENTRY
         STH   R15,0(R14)                SET NEW NO OF ENTRIES
         AH    R14,OLDLEN                POINT TO NEW ENTRY
         LH    R15,PARMLEN               GET PARM LENGTH
         STC   R15,0(R14)                SET NEW ENTRY LENGTH
         BCTR  R15,0                     REDUCE FOR EXECUTE
         L     R1,PARMADDR               GET PARM DATA ADDR
         EX    R15,*+4                   MOVE IN NEW ENTRY
         MVC   1(0,R14),0(R1)            MOVE IN NEW ENTRY
         L     R14,CVTAUTHL              GET OLD AUTH TABLE POINTER
         L     R15,NEWTAB                GET NEW AUTH TABLE POINTER
         CS    R14,R15,CVTAUTHL          SWAP POINTER TO NEW AUTH TABLE
         STATUS RESET,MC,STEP            START ALL OTHER TASKS
         SYSEVENT OKSWAP                 OSKSWAP SYSEVENT
         STAX  DEFER=NO                  ALLOW ATTENTIONS
         MODESET KEY=NZERO               GO INTO USER KEY
         AUTHOFF                         see issue 10 page 24
RETURN   EQU   *
         EXITR                           see issue 15 pages 25-26
PARMLEN  DC    H'0'                      LENGTH OF PARAMETER
OLDENTNO DC    H'0'                      ORIGINAL NO OF ENTRIES IN TABLE
OLDLEN   DC    F'0'                      ORIGINAL LENGTH OF TABLE
NEWTAB   DC    A(0)                      NEW TABLE ADDRESS
PARMADDR DC    A(0)                      ADDR OF PARM DATA
SUBPOOL  EQU   245                       SUBPOOL FOR GETMAIN
HLQ      EQU   5                         WE REQUIRE DSNAMES TO BE > 5
GETPARM  DC    0F'0',AL1(SUBPOOL),AL3(0)  GETMAIN PARAMETERS
ENTRY    DS    0CL51                     ACTUAL ENTRY
VOL      DS    CL6                       VOLUME ENTRY
         DC    C' '                      BLANK
DSNAME   DS    CL44                      DSNAME ENTRY
         LTORG
         END
THE ISPF PANEL
To facilitate the use of this function an ISPF dialogue has been implemented:
)ATTR
 Û TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(' ')
 ƒ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) PAD(' ') SKIP(ON)
 ^ TYPE(INPUT) INTENS(LOW) CAPS(ON) JUST(LEFT) PAD(' ')
 ¤ TYPE(INPUT) INTENS(LOW) CAPS(ON) JUST(RIGHT) PAD(' ')
 / TYPE(INPUT) INTENS(NON)
 " TYPE(TEXT) COLOR(GREEN) INTENS(HIGH)
 Ž TYPE(TEXT) COLOR(TURQ) INTENS(HIGH)
 ' TYPE(TEXT) COLOR(YELLOW) INTENS(HIGH)
 ; TYPE(TEXT) COLOR(RED) INTENS(HIGH)
 ? TYPE(TEXT) COLOR(PINK) INTENS(HIGH)
   TYPE(TEXT) COLOR(RED) INTENS(HIGH) HILITE(REVERSE)     /* HEX FA */
   TYPE(TEXT) COLOR(RED) INTENS(HIGH) HILITE(USCORE)      /* HEX FB */
   TYPE(TEXT) COLOR(RED) INTENS(HIGH) HILITE(BLINK)       /* HEX FC */
)BODY
%---------------------------- APF TABLE MAINTENANCE -------------------
%EXECUTE FUNCTION   ===>_ZCMD +           _THRD  +
'OPTIONAL PARAMETER ===>_COMM
+                                   %|%
+ % 1+"LIST CURRENT APF TABLE       %|% 2+"ADD NEW LIBRARY TO APF TABLE
+                                   %|%
+
+
)INIT
 &ZPRIM = NO
 .CURSOR = ZCMD
&COMM = ' '
&THRD = ' '
)PROC
 &JOB = &ZCMD
 VER (&ZCMD,NONBLANK,MSG=USER001)
 IF (&ZCMD = 2)
    VER (&THRD,NONBLANK,MSG=USER006)
    VER (&THRD,PICT,AAANNN,MSG=USER006)
    IF (&THRD = ' ')
       .CURSOR = THRD
    VER (&COMM,NONBLANK,MSG=USER138)
    VER (&COMM,DSNAME,MSG=USER138)
    IF (&COMM = ' ')
       .CURSOR = COMM
 &ZSEL = TRANS( TRUNC (&ZCMD,'.')
              1,'CMD(%APFMOD)'
              2,'CMD(%APFMOD)'
            ' ','PANEL(ISR…PRIM)'
              *,'?')
)END
THE ISPF CLIST APFMOD
PROC 0
CONTROL MAIN NOMSG NOFLUSH NOLIST NOCONLIST NOSYMLIST
ERROR DO
 SET &RET = &LASTCC
 RETURN
END
SET &RET = 0
ISPEXEC VGET (JOB COMM THRD)
SET &COMM = &STR(&COMM)
IF &JOB = &STR(1) THEN DO
 ISPEXEC CONTROL DISPLAY LINE START(1)
 WRITE VOLUME DSNAME...............
 CALL 'SYS1.XLINKLIB(APFTABLE)'
 ISPEXEC CONTROL DISPLAY LINE START(1)
END
IF &JOB = &STR(2) THEN DO
 %EDITRECV
 ISPEXEC EDIT DATASET('SYS1.PARMLIB(IEAAPF00)')
 SET &RET = 0
 ISPEXEC CONTROL DISPLAY LINE START(1)
 WRITE VOLUME DSNAME...............  BEFORE ADDITION
 CALL 'SYS1.XLINKLIB(APFTABLE)' '&THRD&COMM'
   /* LIST APF TABLE AFTER CHANGE */
 ISPEXEC CONTROL DISPLAY LINE START(1)
 WRITE VOLUME DSNAME...............  AFTER ADDITION
 CALL 'SYS1.XLINKLIB(APFTABLE)'
 ISPEXEC CONTROL DISPLAY LINE START(1)
END
IF &RET NE 0 THEN DO
 ISPEXEC SETMSG MSG(USER005)
END
ELSE DO
 ISPEXEC SETMSG MSG(USER011)
END
EXIT
THE ISPF MESSAGES
USER001  'NO SELECTION MADE    '     .ALARM=YES
'PLEASE ENTER ONE OF THE SELECTABLE FUNCTIONS FROM MENU.'

USER005  'FUNCTION IN ERROR     '    .ALARM=YES
'THERE WAS EITHER AN IMPLEMENTATION ERROR OR USER SUPPLIED WRONG DATA.'

USER006  'SPECIFY A VOLUME SER  '    .ALARM=YES
'YOU MUST INDICATE A VOLUME SERIAL NO FOR THIS SELECTION.'

USER011  'FUNCTION COMPLETED   '     .ALARM=YES
'YOUR REQUEST WAS SUCCESSFUL.'

USER138  'INDICATE LIBRARY NAME'  .ALARM=YES
'INDICATE NEW LIBRARY TO BE ADDED TO APF TABLE.'


Nils Plum
Systems Programmer (Denmark)  © Nils Plum 1988









































