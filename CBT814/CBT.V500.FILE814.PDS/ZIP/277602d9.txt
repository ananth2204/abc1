Adding return/abend codes to the notify message


IEFACTRT modified Assembler source

         MACRO
&NAME    J16MCODE &TYPE=
.**********************************************************************
.* MACRO NAME  = J16MCODE                                             *
.* DESCRIPTION = MACRO TO GENERATE ASSEMBLER  CODE TO ACQUIRE         *
.*               ECSA MEMORY BLOCK TO RECORD USER INFORMATION         *
.*               RETURN OR ABEND CODE                                 *
.**********************************************************************
.*
         LCLC  &SUF                     LOCAL VARIABLE SUFFIX
         LCLA  &L                       LOCAL VARIABLE LENGHT
.*
.**********************************************************************
         AIF   ('&TYPE' EQ 'C').INIT
         AIF   ('&TYPE' EQ 'U').INIT
         AIF   ('&TYPE' EQ 'S').INIT
         AIF   ('&TYPE' EQ '').ERR1
         AGO   .ERR0
.*
.INIT    ANOP
&SUF     SETC  '&TYPE&TYPE'
&L       SETA  24
.**********************************************************************
.* * *         PROCESS TYPE PARAMETER                             * * *
.**********************************************************************
************************************ START CODE FOR JES EXIT 16
         CLC   JMRUCOM,=F'0'       USER COMM. AREA INITIAL SETTING?
         BNE   NOGETM&SUF          NO, SKIP CSA GET MEMORY
*   GET CSA MEMORY UPPER, IF ANY, IN JES2 KEY (I.E. 1)
         STORAGE OBTAIN,LENGTH=&L,SP=241,KEY=1,LOC=ANY,BNDRY=DBLWD,    X
               COND=YES
         LTR   R15,R15             TEST RETURN CODE
         BNZ   NOMEM&SUF
**********************************************************************
** LAYOUT OF CSA MEMORY ACQUIRED: LLNNNNNNNNPPPPPPPPFFCCCC          **
**                                012345678901234567890123          **
** LL       = LENGTH OF AREA ACQUIRED 24 BYTES                      **
** NNNNNNNN = STEP NAME                                             **
** PPPPPPPP = PROC STEP NAME                                        **
** FF       = STATUS FLAG (SS=SYSABEND - UU=USERABEND - CC=RETCODE) **
** CCCC     = RC OR ABEND CODE                                      **
**********************************************************************
         ST    R01,JMRUCOM         STORE ADDRESS IN COMM. AREA
         B     MOVE&SUF
NOGETM&SUF EQU   *
         L     R01,JMRUCOM         LOAD R01 WITH PTR USER AREA ACQUIRED
         AIF   ('&SUF' NE 'CC').NOCC
         CLC   &L-4(4,R01),RC+K1   COMPARE STEP COND CODE
         BH    NOACT&SUF           MOVE IF NEW HIGHTER
.NOCC    ANOP
MOVE&SUF EQU   *
         MVC   0(2,R01),=C'&L'     MOVE LENGTH OF AREA IN LL FIELD
         MVC   2(8,R01),STEPNAME   MOVE STEPNAME IN NNNNNNNN FIELD
         MVC   10(8,R01),PROCSTEP  MOVE PROCSTEP IN PPPPPPPP FIELD
         MVC   18(2,R01),=C'&SUF'  MOVE VALUE IN STATUS FLAG
         MVC   20(4,R01),RC+K1     MOVE CODE IN CCCC FIELD
         B     NOACT&SUF           EXIT
NOMEM&SUF EQU   *
         MVC   JMRUCOM,=F'0'       INITIAL SETTING OF COMM.AREA
NOACT&SUF EQU   *
************************************ END   CODE FOR JES EXIT 16
.*
         AGO   .EXIT
.**********************************************************************
.*****         MACRO ERROR EXITS                                 ******
.**********************************************************************
.*
.ERR0    MNOTE 12,'INVALID TYPE - ABORTED; SPECIFY "C", "S" OR "U"'
         AGO   .EXIT
.ERR1    MNOTE 12,'TYPE PARAMETER MUST BE SPECIFY- ABORTED'
         AGO   .EXIT
.*
.EXIT    ANOP
         MEXIT
         MEND
.*
IEFACTRT TITLE 'SMF JOB/STEP TERMINATION EXIT ROUTINE     '
*/* LIB:  IPO1.SAMPLIB(SMF4CTRT)
*/* GDE:  CBIPO MVS CUSTOMIZATION
*/* DOC:  THIS SAMPLE SMF EXIT ROUTINE PUTS JOB SUMMARY MESSAGES
*/*       TO THE JOB LOG WITH STEP TERMINATION STATUS.
***********************************************************************
*             MODULE NAME = IEFACTRT                                  *
*             DESCRIPTIVE NAME =  CUSTOM-BUILT IPO SUPPLIED           *
*                SMF EXIT ROUTINE TO PUT MESSAGES ON JOB LOG WITH     *
*                STEP TERMINATION STATUS.                             *
*             COPYRIGHT = 5751-CS1                                    *
*                         INTERNATIONAL BUSINESS MACHINES             *
*                         CORPORATION, 1983, 1988, 1990               *
*             FUNCTION =                                              *
*                PUT MESSAGES VIA WTO ON JOB LOG.                     *
*                OPERATION =                                          *
*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *
*                   FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.    *
*   -CHANGED THE WAY STEPNAME AND PROCSTEPNAME ARE OBTAINED           *
*      TO HAVE LESS DEPENDENCY ON CSCB STRUCTURE. THIS WILL ONLY      *
*      WORK ON MVS4.1.0 OR HIGHER.                                    *
*              NOTES =                                                *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *
*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *
*                 RESTRICTIONS = NONE                                 *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 1  = WORK REGISTERS               *
*                    REGISTERS 2 TO 5  = UNUSED                       *
*                    REGISTER  6       = OUTPUT LINE REGISTER         *
*                    REGISTER  7       = COMMON PARAMETER AREA        *
*                    REGISTERS 8 TO 11 = UNUSED                       *
*                    REGISTER  12      = ADDRESSABILITY TO IEFACTRT   *
*                                        CSECT                        *
*                    REGISTER  13      = ADDRESSABILITY TO DATA DSECT *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *
*                   BINARY ZEROES)                                    *
*             MODULE TYPE = PROCEDURE                                 *
*                PROCESSOR = MUST BE ASSEMBLED WITH ASSEMBLER H       *
*                   VERSION 2                                         *
*                MODULE SIZE = 1200 BYTES                             *
*                ATTRIBUTES = KEY 0, REENTRANT,                       *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *
*                LINKAGE =                                            *
*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *
*                     AS FOLLOWS.                                     *
*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *
*                 2.  PTR TO STEPNAME FIELD                           *
*                 3.  PTR TO PROGRAMMER NAME FIELD                    *
*                 4.  PTR TO JOB TCB CPU TIME FIELD                   *
*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *
*                 6.  PTR TO STEP TCB CPU TIME FIELD                  *
*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *
*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *
*                 9.  PTR TO CONDITION CODE FIELD                     *
*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *
*             OUTPUT = NONE                                           *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH AND SET MODE  *
*                             (BSM 0,14)                              *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*             EXIT - ERROR = NONE                                     *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*             EXTERNAL REFERENCES =                                   *
*                ROUTINES = NONE                                      *
*                DATA AREAS = NONE                                    *
*                CONTROL BLOCKS = NONE                                *
*             TABLES = NONE                                           *
*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *
*                      SETRP, IFASMFR, IEFJMR, IHASDWA, SPLEVEL       *
*             CHANGE ACTIVITY = HAS BEEN UPDATED TO RUN ON MVS/XA     *
*                ON 31-BIT MODE ABOVE THE LINE.                       *
*                IT PROVIDES THE TOTAL DEVICE CONNECT TIME IN MS      *
*                FOR EACH STEP IN ADDITION TO THE EXCP COUNT          *
*                THIS PROGRAM WILL NOT RUN ON MVS/370                 *
*             MESSAGES =                                              *
*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *
*             ABEND CODES = NONE                                      *
*             10/26/89 FIX FOR APAR OY24316                     OY24316
*             02/12/92 FIX FOR APAR OY51685                     OY51685
***********************************************************************
         EJECT
IEFACTRT CSECT ,
IEFACTRT AMODE 31                                             IPOXA
IEFACTRT RMODE ANY                                            IPOXA
*
* CONSTANT ADDRESS EQUATES
*
PSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB
*
* CONSTANT EQUATES
*
K0       EQU   00                  NON-RELOCATABLE CONSTANT 00
K1       EQU   01                  NON-RELOCATABLE CONSTANT 01
K2       EQU   02                  NON-RELOCATABLE CONSTANT 02
K3       EQU   03                  NON-RELOCATABLE CONSTANT 03
K4       EQU   04                  NON-RELOCATABLE CONSTANT 04
K5       EQU   05                  NON-RELOCATABLE CONSTANT 05
K6       EQU   06                  NON-RELOCATABLE CONSTANT 06
K7       EQU   07                  NON-RELOCATABLE CONSTANT 07
K8       EQU   08                  NON-RELOCATABLE CONSTANT 08
K9       EQU   09                  NON-RELOCATABLE CONSTANT 09
KA       EQU   10                  NON-RELOCATABLE CONSTANT 10
KB       EQU   11                  NON-RELOCATABLE CONSTANT 11
KC       EQU   12                  NON-RELOCATABLE CONSTANT 12
KD       EQU   13                  NON-RELOCATABLE CONSTANT 13
KE       EQU   14                  NON-RELOCATABLE CONSTANT 14
KF       EQU   15                  NON-RELOCATABLE CONSTANT 15
*
* CONSTANT EQUATES
*
SUBPOOL  EQU   229                 USE SUBPOOL 229 FOR GETMAIN
CK       EQU   C'K'                CONSTANT CHAR 'K'
CASTR    EQU   C'*'                CONSTANT CHAR '*'
C0       EQU   C'0'                CONSTANT CHAR '0'
         IEZBITS
*
* REGISTER EQUATES
*
R00      EQU   00                  REG 00 - WORK REG
R01      EQU   01                  REG 01 - WORK/PARMETER REG
R02      EQU   02                  REG 02 - WORK REG
R03      EQU   03                  REG 03 - WORK REG
R04      EQU   04                  REG 04 - UNUSED
R05      EQU   05                  REG 05 - UNUSED
R06      EQU   06                  REG 06 - BASE FOR OUTPUT LINE
R07      EQU   07                  REG 07 - BASE FOR COMMON PARM AREA
R08      EQU   08                  REG 08 - BASE FOR BLDL LIST
R09      EQU   09                  REG 09 - BASE FOR SMF RECORD
R10      EQU   10                  REG 10 - UNUSED
R11      EQU   11                  REG 11 - UNUSED
R12      EQU   12                  REG 12 - CSECT BASE REG
R13      EQU   13                  REG 13 - DATA DSECT BASE REG
R14      EQU   14                  REG 14 - LINKAGE REGISTER
R15      EQU   15                  REG 15 - WORK REG
         EJECT
* SPLEVEL IS CALLED TO REQUEST THE MVS/XA EXPANSION
         SPLEVEL SET=2             GET MVS/XA LABEL IF REQ'D AS WE
*                                  RUN IN 31-BIT MODE
         SAVE  (14,12),,IEFACTRT_R01.0_&SYSDATE._&SYSTIME
         USING IEFACTRT,R12        SET UP CSECT ADDRESSABILITY
         LR    R12,R15             LOAD BASE REGISTER
         USING DATA,R13            SET UP DATA DSECT ADDR.
         USING JMR,R07             SET UP ADDRESSABILITY TO COMMON
         L     R07,PARMEPRM-PARMS(K0,R01) COMMON AREA ADDRESS
         TM    JMRINDC,JMRFIND     IS IT TIME SHARING USER?
         BO    QUICKOUT            YES, EXIT BEFORE GETMAIN
         GETMAIN RU,LV=LDATA,SP=SUBPOOL GET STORAGE           IPOXA
         ST    R13,SAVEBK-SAVE(,R01) SAVE CALLER'S SAVE AREA ADDR
         ST    R01,SAVEFW          SAVE MY SAVE AREA ADDRESS
         LR    R15,R01             SAVE GETMAINED STORE ADDRESS
         L     R01,SAVER1          RELOAD REGISTERS AFTER GETMAIN
         L     R02,SAVER0          RELOAD REG2 WITH REG0 ENTRY  CODE
         LR    R13,R15             LOAD REGISTER 13 WITH GETMAINED ADDR
         MVC   PARMS(LPARMS),K0(R01) SAVE INPUT PARMS
*------- SET UP RECOVERY ENVIRONMENT
         LA    R00,RTRYRTN1            RETRY ROUTINE - NO SDWA
         ST    R00,ESTAPARM            STORE IN PARAMETER LIST
         LA    R00,RTRYRTN2            RETRY ROUTINE - WITH SDWA
         ST    R00,ESTAPARM+K4         STORE IN PARAMETER LIST
         STM   R12,R13,ESTAPARM+K8     STORE BASE & DATA REG IN PARM
         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST
         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY
*------- DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION
         L     R09,PARMRECD        LOAD ADDRESS OF SMF RECORD
         C     R02,R30CODE         WAS ENTRY CODE FOR REC30     MSEIPO4
         BNE   EXIT                NO - EXIT                    MSEIPO4
         USING SMFRCD30,R09                                     MSEIPO4
         CLI   SMF30SON+1,K1       CHECK IF SS SEGMENT IS THERE MSEIPO4
         BL    EXIT                NO - EXIT                    MSEIPO4
         CLI   SMF30UON+1,K1       CHECK IF CONTINUATION RECORD MSEIPO4
         BL    EXIT                YES- EXIT                    MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30SOF        POINT TO SS SEGMENT          MSEIPO4
         USING SMF30PSS,R04                                     MSEIPO4
         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION       MSEIPO4
         BE    JOBTERM             YES, HANDLE JOB TERM         MSEIPO4
         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION      MSEIPO4
         BNE   EXIT                EXIT IF NOT                  MSEIPO4
         DROP  R04                                              MSEIPO4
         EJECT
*        HANDLE STEP TERMINATION CONDITIONS
*
STEPTERM DS    0H                  ENTRY FROM STEP TERMINATION
         LA    R06,WTO1TXT         GET ADDRESS OF WTO TEXT AREA
         USING LINE2,R06           SET UP ADDRESSABILITY TO LINE
         L     R01,PARMINDC        LOAD ADDRESS OF STEP NO
         CLI   K1(R01),K1          IS IT STEP 1?
         BNE   NOTFIRST            NO, BR PAST HEADER LINE
         MVC   WTO1TXT,LINE3A      MOVE HEADER LINE 1 TO OUTPUT
         BAL   R14,MSGRTN          PUT OUT LINE
         MVC   WTO1TXT,LINE3       MOVE SECOND HEADER
         BAL   R14,MSGRTN          PUT IT OUT
NOTFIRST MVI   WTO1TXT,C' '        INIT OUTPUT LINE TO BLANKS
         MVC   WTO1TXT+K1(L'WTO1TXT-K1),WTO1TXT COPY BLANKS
         MVC   JOBNAME,JMRJOB      MOVE JOBNAME INTO LINE
         L     R01,PSAAOLD         GET ADDRESS OF CURRENT ASCB
         L     R01,ASCBJBNI-ASCB(,R01) GET ADDRESS OF CHNAME
         LTR   R01,R01                 BATCH JOB                OY51685
         BNZ   GOTASCB                 YES, GO ON               OY51685
         L     R01,PSAAOLD             RELOAD ASCB              OY51685
         L     R01,ASCBJBNS-ASCB(,R01) GET STC/MOUNT ID         OY51685
GOTASCB  EQU   *                                                OY51685
         LA    R00,CHNAME-CSCX         GET CHNAME OFFSET
         SLR   R01,R00                 GET CSCX ADDRESS
         L     R01,CHCSCBP-CSCX(,R01)  GET CSCB ADDRESS
         USING CSCB,R01
         CLI   CHPROCSN,C' '       IS PROC STEP NAME BLANK?
         BNH   NOPROC              YES, DO NOT MOVE IT IN
         MVC   PROCSTEP,CHPROCSN MOVE IN PROC STEP NAME
NOPROC   CLI   CHSTEP,C' '         IS STEP NAME BLANK?
         BNH   PUTMSG1             YES, DO NOT MOVE IT IN
         MVC   STEPNAME,CHSTEP MOVE IN STEP NAME
         DROP  R01                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM COMPLETION SEGMENT                       MSEIPO4
*                                                               MSEIPO4
PUTMSG1  DS    0H                  CONTINUE PROCESSING
         CLI   SMF30TON+1,K1       DOES COMPL SEGM EXIST        MSEIPO4
         BL    PUTMSG1A            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30TOF        POINT TO SS SEGMENT          MSEIPO4
         USING SMF30CMP,R04                                     MSEIPO4
         LA    R01,SMF30STI
         SLR   R00,R00
         ICM   R00,K3,SMF30SCC     GET COND CODE
         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE
         DROP  R04                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM PERFORMANCE SECTION                      MSEIPO4
*                                                               MSEIPO4
PUTMSG1A DS    0H                  CONTINUE PROCESSING          MSEIPO4
         CLI   SMF30PON+1,K1       DOES PERFORMANCE SECT EXIST  MSEIPO4
         BL    PUTMSG1B            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30POF        POINT TO PERFORM SEGMENT     MSEIPO4
         USING SMF30PRF,R04                                     MSEIPO4
         L     R01,SMF30SRV        SET SERVICE UNITS USED       MSEIPO4
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         MVC   SERV,DWORD+L'DWORD-L'SERV MOVE TO OUTPUT LINE
         DROP  R04                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM ID SEGMENT                               MSEIPO4
*                                                               MSEIPO4
PUTMSG1B DS    0H                  CONTINUE PROCESSING          MSEIPO4
         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4
         BL    PUTMSG1C            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4
         USING SMF30ID,R04                                      MSEIPO4
         LH    R01,SMF30PGN        GET PERFORMANCE GROUP NUM    MSEIPO4
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         MVC   PG,DWORD+L'DWORD-L'PG MOVE TO OUTPUT LINE
         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4
         LR    R01,R00             LOAD STEP TERM INTO REG 1    MSEIPO4
         ICM   R00,15,SMF30SIT     LOAD STEP INIT TIME          MSEIPO4
         BAL   R14,PCLOCK          CONVERT IT
         MVC   CLOCK,DWORD+L'DWORD-L'CLOCK-K2 MOVE TO OUTPUT LINE
         DROP  R04                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM STORAGE AND PAGING SECTION               MSEIPO4
*                                                               MSEIPO4
PUTMSG1C DS    0H                  CONTINUE PROCESSING          MSEIPO4
         CLI   SMF30RON+1,K1       DOES STORAGE SECTION EXIST   MSEIPO4
         BL    PUTMSG1D            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30ROF        POINT TO ID SEGMENT          MSEIPO4
         USING SMF30SAP,R04                                     MSEIPO4
         L     R01,SMF30NSW        GET NUMBER OF SWAPS          MSEIPO4
         BAL   R14,PCOUNT          CONVERT IT
         MVC   SWAPS,DWORD+L'DWORD-L'SWAPS MOVE IT TO OUTPUT
         L     R01,SMF30PGI        GET NUMBER OF PAGE INS       MSEIPO4
         A     R01,SMF30PGO        ADD NUMBER OF PAGE OUTS      MSEIPO4
         BAL   R14,PCOUNT          CONVERT COUNT
         MVC   PAGE,DWORD+L'DWORD-L'PAGE MOVE TO OUTPUT LINE
         L     R01,SMF30PSI        GET NUMBER OF SWAP PAGE INS  MSEIPO4
         A     R01,SMF30PSO        ADD NUMBER OF SWAP PAGE OUTS MSEIPO4
         BAL   R14,PCOUNT          CONVERT COUNT
         MVC   SWAP,DWORD+L'DWORD-L'SWAP MOVE TO OUTPUT LINE
         L     R01,SMF30VPI        GET NUMBER OF VIO PAGE INS   MSEIPO4
         A     R01,SMF30VPO        ADD NUMBER OF VIO PAGE OUTS  MSEIPO4
         BAL   R14,PCOUNT          CONVERT COUNT
         MVC   VIO,DWORD+L'DWORD-L'VIO MOVE TO OUTPUT LINE
         DROP  R04                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM CPU ACCOUNTING SECTION                   MSEIPO4
*                                                               MSEIPO4
PUTMSG1D DS    0H                  CONTINUE PROCESSING          MSEIPO4
         SLR   R00,R00             CLEAR REG 0
         L     R01,PARMSTPC        LOAD STEP TCB CPU TIME ADDR
         ICM   R01,K7,K0(R01)      LOAD STEP TCB CPU TIME       MSPIPOI
         LA    R01,K0(,R01)        ZERO HIGH ORDER BYTE
         BAL   R14,PCLOCK          CONVERT FOR OUTPUT
         MVC   TCB,DWORD+L'DWORD-L'TCB-K1 MOVE TO OUTPUT LINE
         CLI   SMF30CON+1,K1       DOES CPU/ACC SECTION EXIST   MSEIPO4
         BL    PUTMSG1E            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30COF        POINT TO ID SEGMENT          MSEIPO4
         USING SMF30CAS,R04                                     MSEIPO4
         SLR   R00,R00             CLEAR REG 0
         LR    R01,R00             CLEAR REG 1
         ICM   R01,KF,SMF30CPS     LOAD SRB TIME                MSPIPOI
         BAL   R14,PCLOCK          CONVERT IT
         MVC   SRB,DWORD+L'DWORD-L'SRB-K1 MOVE IT TO OUTPUT LINE
         DROP  R04                                              MSEIPO4
*                                                               MSEIPO4
* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4
*                                                               MSEIPO4
PUTMSG1E DS    0H                  CONTINUE PROCESSING          MSEIPO4
         CLI   SMF30UON+1,K1       DOES I/O ACT SECTION EXIST   MSEIPO4
         BL    PUTMSG1F            NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30UOF        POINT TO ID SEGMENT          MSEIPO4
         USING SMF30URA,R04                                     MSEIPO4
         L     R01,SMF30TEP        GET TOTAL NUMBER OF EXCPS    MSEIPO4
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         MVC   EXCP,DWORD+L'DWORD-L'EXCP MOVE TO OUTPUT LINE
         TM    SMF30DCF,SMF30MFL   DEVICE CONNECT TIME CORRECT  IPOXA
         BO    NDEVCON             NO                           IPOXA
         SR    R02,R02             CLEAR R2                     OY24316
         SR    R03,R03             CLEAR R3                     OY24316
         L     R03,SMF30TCN        GET DEVICE CONNECT TIME      OY24316
* MULTIPLY DEVICE CONNECT TIME BY .128 TO GET MS                IPOXA
         SLDA  R02,7               MULTIPLY BY 128              OY24316
         D     R02,F1000           DIVIDE BY 1000               IPOXA
         LR    R01,R03             PUT QUOTIENT IN R1 (MS)      IPOXA
         DROP  R04                                              MSEIPO4
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE         IPOXA
         MVC   CONN,DWORD+L'DWORD-L'CONN MOVE TO OUTPUT LINE    IPOXA
         B     PUTMSG1F                                         IPOXA
NDEVCON  DS    0H                                               IPOXA
         MVC   CONN+2(4),=C'****'     NO DEVICE CONNECT TIME    IPOXA
PUTMSG1F DS    0H                                               MSEIPO4
         BAL   R14,MSGRTN          PUT LINE OUT
         B     EXIT                BR TO EPILOGUE CODE
         SPACE 3                                                MSEIPO4
*                                                               MSEIPO4
*        HANDLE JOB TERMINATION CONDITIONS                      MSEIPO4
*                                                               MSEIPO4
JOBTERM  DS    0H                  ENTRY ON JOB TERMINATION
         MVC   WTO1TXT,LINE4       SET UP OUTPUT LINE
         MVC   WTO1TXT+LINE4J(L'LINE4J),JMRJOB MOVE IN JOB NAME
         L     R01,PARMPROG        LOAD ADDR OF PROGRAMMER NAME
         MVC   WTO1TXT+LINE4N(L'LINE4N),K0(R01) MOVE IN PROG NAME
         SLR   R00,R00             ZERO REG
         LR    R01,R00             ZERO REG 1
         L     R02,PARMJOBC        LOAD JOB TCB CPU TIME ADDR
         ICM   R01,K7,K0(R02)      LOAD JOB TCB CPU TIME
         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT
         MVC   WTO1TXT+LINE4C(L'LINE4C),DWORD+L'DWORD-L'LINE4C-K1
*                                                               MSEIPO4
* GET INFORMATION FROM ID SEGMENT                               MSEIPO4
*                                                               MSEIPO4
         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4
         BL    PUTMSG2             NO - GOTO NEXT SEGMENT       MSEIPO4
         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4
         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4
         USING SMF30ID,R04                                      MSEIPO4
         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4
         LR    R01,R00             GET JOB TERM TIME            MSEIPO4
         ICM   R00,15,SMF30SIT     GET JOB INIT TIME            MSEIPO4
         DROP  R04,R09                                          MSEIPO4
         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT
         MVC   WTO1TXT+LINE4E(L'LINE4E),DWORD+L'DWORD-L'LINE4E-K2
         BAL   R14,MSGRTN          PRINT LINE
PUTMSG2  DS    0H                                               MSEIPO4
*   FIND BULLETIN
         LA    R08,BLDLWORK        LOAD ADDR OF BLDL LIST
         USING BLDL,R08            SET UP ADDR. TO BLDL PARM LIST
         LA    R01,K1              LOAD A 1
         STH   R01,BLDLFF          STORE IN BLDL LIST
         LA    R01,BLDLELEN        LOAD LENGTH OF BLDL ENTRY LEN
         STH   R01,BLDLLL          STORE ENTRY LENGTH
         MVC   BLDLNAME,=CL8'BULLETIN' LOAD PROGRAM NAME
         LR    R00,R08             LOAD REG 0 WITH BLDL
         BLDL  0,(0)               ISSUE BLDL FOR MODULE
         LTR   R15,R15             WAS IT THERE?
         BNZ   EXIT                NO, BR TO EXIT EPILOGUE
         CLI   BLDLZ,K2            WAS IT OUT OF LINKLIST
         BNL   EXIT                NO, BR TO EXIT PROLOGUE
         LA    R02,BLDLNAME        GET BLDL ENTRY ADDRESS
         MVC   LINKE,LINKL         MOVE IN LINK LIST FORM
         LINK  DE=(2),SF=(E,LINKE) LINK TO BULLETIN ROUTINE
         DROP  R08                 DROP BLDL DSECT
         SPACE 3
EXIT     DS    0H                  EXIT PROLOGUE
         ESTAE 0                   CANCEL ESTAE EXIT
RTRYRTN2 DS    0H                  ESTAE RETRY ROUTINE WITH SDWA
*                                  JUST FREE STORAGE AND EXIT
         LR    R01,R13             GET FREEMAIN ADDRESS
         L     R13,SAVEBK          LOAD OLD REG 13
         FREEMAIN RU,LV=LDATA,A=(1),SP=SUBPOOL FREE DATA DSECT STORAGE
QUICKOUT DS 0H                     RETURN TO CALLER
         LM    14,12,12(13)        RESTORE REGISTERS            IPOXA
         LA    15,0                SET RETURN CODE              IPOXA
         BSM   0,14                RETURN TO CALLER IN ITS MODE IPOXA
         EJECT
MSGRTN   DS    0H                  MESSAGE(WTO) ROUTINE
         STM   R14,R01,SAVEAR2     SAVE A FEW REGISTERS
         LA    R01,L'WTO1TXT+K4    GET LENGTH FOR WTO
         STH   R01,WTO1LEN         STORE IN WTO PARM LIST
         MVC   WTO1MCS,MCSFLAG     MOVE IN MCSFLAG
         MVC   WTO1DESC,DESC       MOVE IN DESCRIPTOR CODES
         MVC   WTO1ROUT,ROUT       MOVE IN ROUTE CODES
         MVI   WTO1TXT,C'-'        MOVE IN MESSAGE PREFIX
         WTO   MF=(E,WTO1)         ISSUE WTO
         LM    R14,R01,SAVEAR2     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
***********************************************************************
*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *
*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *
***********************************************************************
PCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         CVD   R01,DWORD           CONVERT COUNT TO DECIMAL
         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK
         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER
         CP    DWORD,P99999        IS COUNT>99999?
         BNH   NOFLOAT             NO, BR PAST FLOAT CODE
         MVC   DWORD(L'DWORD-K1),EDWORK2+K2 SHIFT IT RIGHT 3 DEC DIGTS
         MVI   DWORD+L'DWORD-K1,CK MOVE A 'K' FOR THOUSANDS
         B     PCNTEX              BR TO RETURN
NOFLOAT  MVC   DWORD,EDWORK2+K4    MOVE IN UNFLOATED COUNT
PCNTEX   RETURN (14,12)            RETURN TO CALLER
         SPACE 2
***********************************************************************
*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS FIRST TIME                                 *
*                REG 0 HAS SECOND TIME
*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *
***********************************************************************
PCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         SR    R01,R00             GET TIME DIFFERENCE
         BNL   LSTH24              IF DIFFERENCE>=0 THEN SKIP
         A     R01,HR24            ELSE ADD 24 HOURS TO TIME
LSTH24   DS    0H                  SKIPPED TO HERE
         SLR   R00,R00             ZERO REG FOR DIVIDE
         D     R00,F6              DIVIDE TIME BY 6
         C     R01,TOVER           IF TIME<MAX THEN
         BL    NOTOVER             BR TO CONVERT IT
         MVI   DWORD,CASTR         ELSE OVERFLOW FILL WITH
         MVC   DWORD+K1(L'DWORD-K1),DWORD ********
         B     PCLKEX              BR TO RETURN
NOTOVER  CVD   R01,DWORD           CONVERT TIME TO DECIMAL
         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK
         ED    EDWORK,DWORD+K4     CONVERT TO CHARACTER
         MVC   DWORD,EDWORK+K1     MOVE TO RETURN AREA
PCLKEX   RETURN (14,12)            RETURN TO CALLER
         SPACE 2
***********************************************************************
*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *
*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *
*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *
*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *
***********************************************************************
PRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS
         TM    K0(R01),SMF30FLH    WAS STEP FLUSHED             MSEIPO4
         BNO   NOFLUSH             NO,BRANCH PAST
         MVC   RC,=C'FLUSH'        MOVE IN FLUSHED MESSAGE
         B     PRETEXT             BR TO RETURN
NOFLUSH  TM    K0(R01),SMF30ABD    DID IT ABEND?                MSEIPO4
         BO    STPABEND            YES, GO CONVERT ABEND CODE
         N     R00,=A(X'FFF')      ZERO UNUSED PORTION
         CVD   R00,RWORK           GET ADDRESS OF COND FIELD
         MVC   RC-K1(L'RC+K1),=X'402020212020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR
* INIT OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
***********************************************************************
         J16MCODE TYPE=C           SET MAXCC IN CSA SHARED MEMORY
***********************************************************************
* END  OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
         B     PRETEXT             BR TO RETURN
STPABEND CLM   R00,2,=X'80'        WAS IT A USER ABEND CODE?
         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.
         N     R00,=A(X'FFF')      TURN OFF X'80' BIT
         CVD   R00,RWORK           CONVERT FOR OUTPUT
         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER
         MVI   RC,C'U'             MOVE IN 'U' USER ABEND
* INIT OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
***********************************************************************
         J16MCODE TYPE=U           SET USER ABEND IN CSA SHARED MEMORY
***********************************************************************
* END  OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
         B     PRETEXT             BR TO RETURN
SYSABND  STH   R00,RWORK           STORE ABEND CODE
         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD
         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS
         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE
         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND
* INIT OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
***********************************************************************
         J16MCODE TYPE=S          SET SYSTEM ABEND IN CSA SHARED MEMORY
***********************************************************************
* END  OF USER CODE NEDEED TO IMPROVE JES2 EXIT N.16 (NOTIFY)
PRETEXT  RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*  ESTAE EXIT ROUTINE                                                 *
***********************************************************************
RECOVERY DS    0H
         USING *,R15               SET UP ADDRESSABILITY
         LA    R04,K4              PUT 4 IN REGISTER FOR COMPARE
         CR    R00,R04             IS SDWA PRESENT?
         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA
         L     R00,K0(R02)         LOAD RETRY ADDRESS FROM PARAM LIST
         LA    R15,K4              SET RETCODE TO RETRY ADDR IN R00
         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR
HAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT
         ST    R14,KC(R13)         SAVE RETURN ADDRESS
         L     R02,K0(R01)         LOAD PARAM LIST ADDR FROM SDWA
         L     R02,K4(R02)         LOAD RETRY ADDRESS
         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)
         DROP  R15
         SPACE 3
***********************************************************************
*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *
***********************************************************************
RTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT
         LM    R12,R13,K8(R01)     LOAD REGS FOR ESTAE PARM LIST
         B     RTRYRTN2            AND GET OUT
         EJECT
*  OUTPUT LINE DSECT FOR STEP TERMINATION MESSAGE
LINE2    DSECT
         DS    C
JOBNAME  DS    CL8                 JOB NAME
         DS    C
STEPNAME DS    CL8                 STEPNAME
         DS    C
PROCSTEP DS    CL8                 PROCEDURE STEP NAME
         DS    C
RC       DS    XL5                 RETURN/ABEND CODE
         DS    C
EXCP     DS    XL6                 EXCP COUNT
*DEVICE CONNECT TIME IS ALSO COLLECTED IN MVS/XA                 IPOXA
         DS    C                                                 IPOXA
CONN     DS    XL6                 DEVICE CONNECT TIME           IPOXA
         DS    C
TCB      DS    XL6                 TCB CPU TIME
         DS    C
SRB      DS    XL6                 SRB CPU TIME
         DS    C
CLOCK    DS    XL6                 ELAPSED TIME
         DS    C
SERV     DS    XL6                 SERVICE UNITS
         DS    C
PG       DS    XL3                 PERFORMANCE GROUP
         DS    C
PAGE     DS    XL5                 NUMBER OF PAGE-INS + PAGE OUTS IPOXA
         DS    C
SWAP     DS    XL5                 NUMBER OF PAGES XFER'D ON SWAP IPOXA
         DS    C
VIO      DS    XL5                 NUMBER OF PAGES XREF'D FOR VIO IPOXA
         DS    C
SWAPS    DS    XL5                 NUMBER OF SWAPS
LLINE2   EQU   *-LINE2
BLDL     DSECT                     BLDL PARM LIST
BLDLFF   DS   H                    TOTAL LENGTH OF PARMLIST
BLDLLL   DS   H                    LENGTH OF EACH ENTRY
BLDLNAME DS   CL8                  MEMBERNAME
BLDLTTR  DS   XL3                  TTR OF MEMBER
BLDLK    DS   X                    K FIELD
BLDLZ    DS   X                    Z FIELD
BLDLC    DS   X                    C FIELD
BLDLUSER DS   CL44                 USER DATA FIELD
BLDLELEN EQU  *-BLDLNAME
BLDLLEN  EQU  *-BLDLFF
IEFACTRT CSECT
LINE3    DS    0CL(LLINE2)         OUTPUT LINE HEADER
         DC    C' '
         DC    CL30'JOBNAME  STEPNAME PROCSTEP'
         DC    C'RC'
         DC    CL3' '
         DC    C'EXCP'
         DC    CL3' '                                             IPOXA
         DC    C'CONN'                                            IPOXA
         DC    CL4' '
         DC    C'TCB'
         DC    CL4' '
         DC    C'SRB'
         DC    CL2' '
         DC    C'CLOCK'
         DC    CL3' '
         DC    C'SERV'
         DC    CL2' '
         DC    C'PG'
         DC    CL2' '                                             IPOXA
         DC    C'PAGE'
         DC    CL2' '                                             IPOXA
         DC    C'SWAP'
         DC    CL3' '                                             IPOXA
         DC    C'VIO'
         DC    CL1' '
         DC    C'SWAPS'
LLINE3   EQU   *-LINE3
         ORG   LINE3+LLINE2
LINE3A   DS    0CL(LLINE2)         OUTPUT LINE FIRST HEADER
         DC    C' '
         DC    CL48' '                                            IPOXA
         DC    CL2'--'
         DC    C'TIMINGS (MINS.)'
         DC    CL2'--'
         DC    CL12' '
         DC    CL4'----'   12
         DC    C'PAGING COUNTS'  3456
         DC    CL3'---'   789
         DC    CL6' '
         ORG   LINE3A+LLINE2
LINE4    DC    CL(LLINE2)' '       JOB TERMINATION MESSAGE LINE
         ORG   LINE4
         DC    C' '
         DC    C'XXXXXXXX ENDED.  NAME-XXXXXXXXXXXXXXXXXXXX TOTAL TCB CX
               PU TIME=XXX.XX  TOTAL ELAPSED TIME=XXXX.X'
*                012345678901234567890123456789012345678901234567890123
*         50-> 45678901234567890123456789012345678901234567890123456789
         ORG   LINE4+LLINE2
LINE4J   EQU   1,8         OFFSET OF JOBNAME IN LINE4 TEXT
LINE4N   EQU   23,20       OFFSET OF NAME IN LINE4 TEXT
LINE4C   EQU   63,6        OFFSET OF TCB CUP TIME IN LINE4 TEXT
LINE4E   EQU   90,6        OFFSET OF ELAPSED TIME IN LINE4 TEXT
R30CODE  DC    F'20'               CODE FOR NEW RECORD 30       MSEIPO4
R30STEP  DC    H'4'                  STEP TERMINATION           MSEIPO4
R30JOB   DC    H'5'                  JOB TERMINATION            MSEIPO4
F6       DC    F'6'
TOVER    DC    F'10000000'         OVERFLOW CONSTANT
F1000    DC    F'1000'             ONE THOUSAND
HR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS
MCSFLAG  DC    B'1000001000000000' ROUT+HRDCPY
*                0123456789ABCDEF
DESC     DC    B'0000000000000000' NO DEC CODES
*                1234567890123456
ROUT     DC    B'0000000000000100' ROUT CODE=14
*                1234567890123456
EDMASK   DC    XL9'40202020214B202020'
P99999   DC    P'99999'
EDMASK2  DC    XL12'402020202020202020202120'
TRTAB    DC    C'0123456789ABCDEF'
* DEFINE ESTAE LIST FORM
ESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST
LESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH
* DEFINE LINK  LIST FORM
LINKL    LINK  DE=0,SF=L          CREATE MODEL LINK PARM LIST
LLINKL   EQU   *-LINKL            NAME ITS LENGTH
DATA     DSECT
SAVE     DS    18F                SAVE AREA FOR REGISTERS ON ENTRY
         ORG   SAVE
SAVEXX   DS    F
SAVEBK   DS    F
SAVEFW   DS    F
SAVER14  DS    F
SAVER15  DS    F
SAVER0   DS    F
SAVER1   DS    F
         DS    11F
DWORD    DS    D
RWORK    DS    D
*
LINKE    DS    XL(LLINKL)       LINK PARM LIST AREA
ESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA
ESTAPARM DS    4F               PARAMETER LIST PASSED TO RETRY ROUTINE
*              RETRY ROUTINE ADDRESS  NO SWDA OBTAINED
*              RETRY ROUTINE ADDRESS  SWDA OBTAINED
*              BASE REGISTER R12
*              DATA REGISTER R13
SAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA
PARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE
PARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA
PARMSTEP DS    F                PTR TO STEPNAME FIELD
PARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD
PARMJOBC DS    F                PTR TO JOB TCB CPU TIME FIELD
PARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS
PARMSTPC DS    F                PTR TO STEP TCB CPU TIME FIELD
PARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS
PARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER
PARMCOND DS    F                PTR TO CONDITION CODE FIELD
PARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN
LPARMS   EQU   *-PARMS
BLDLWORK DS    CL(BLDLLEN)
EDWORK   DC    XL9'00'
EDWORK2  DC    XL12'00'
LWTO1    EQU   LLINE2+KA
         DS    0F
WTO1     DS    0CL(LWTO1)
WTO1LEN  DS    XL2
WTO1MCS  DS    XL2
WTO1TXT  DS    CL(LLINE2)       MESSAGE TEXT
WTO1DESC DS    XL2
WTO1ROUT DS    XL2
         EJECT
         IFASMFR 30            SMF TYPE 30 RECORD              MSEIPO4
SMF30XA  EQU   X'04'               HEADER INDICATES MVS/XA RECORD IPOXA
         EJECT
         PRINT OFF
         IEFJMR                    JMR MAPS COMMON PARAMETER AREA
         IHAASCB                       CHG FOR MVS4.1.0
CSCB     DSECT                         CHG FOR MVS4.1.0
         IEECHAIN                      CHG FOR MVS4.1.0
         EJECT
         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO
         PRINT ON
DATA     DSECT
         DS    6D                  RESERVE FOR ZAPS
LDATA    EQU   *-DATA
IEFACTRT CSECT
         LTORG ,
         DS    0D
DATALEN  DC    0F'0',AL1(SUBPOOL),AL3(LDATA)
MODLEN   EQU   *-IEFACTRT
LPATCH   EQU   (MODLEN+K9)/KA/K8+K1 ADD 10% FOR PATCH AREA
LPATCHL  DC    AL2(LPATCH*K8)
SPATCH   DC    S(PATCH)
PATCH    DC    (LPATCH)D'00'
         SPLEVEL SET               RESET TO DEFAULT               IPOXA
         END   IEFACTRT


JES2 exit 16 Assembler source

MEXIT16S TITLE 'JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
* MODULE NAME: EXIT016                                                *
* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *
* FMID: HJE4430 (MVS/ESA - JES2 4.3.0)                                *
* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *
*          THE MAXIMUM CONDITION CODE OF ALL THE STEPS IN A JOB OR    *
*          THE ABEND CODE OF THE JOB.                                 *
* ENTRY POINT: EXIT16                                                 *
* REGISTERS ON INPUT:                                                 *
*     R0: 0                                                           *
*     R1: ADDRESS OF 3-WORD PARAMETER LIST WITH THE FOLLOWING LAYOUT: *
*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SENT               *
*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *
*         WORD 3 (+8) ADDRESS OF THE JCT                              *
*     R2-R10: N/A                                                     *
*     R11: ADDRESS OF THE HCT                                         *
*     R12: N/A                                                        *
*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *
*     R14: RETURN ADDRESS                                             *
*     R15: ENTRY ADDRESS                                              *
* REGISTERS ON RETURN:                                                *
*     R0: N/A                                                         *
*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *
*     R15: A RETURN CODE:                                             *
*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *
*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *
*              PROCESSING                                             *
*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *
* JES2 MACROS USED:                                                   *
*     $ENTRY, $SAVE, $RETURN, $MODEND                                 *
* DATA AREA (INTERNAL) USED:                                          *
*     JCTUSERA/B/C/D/E/F FIELD WITH DATA LAYOUT LOADED BY EXIT28      *
*     (+0)  LENGTH OF AREA FIXED VALUE 24 (UNUSED)            2 BYTES *
*     (+2)  STEP NAME                                         8 BYTES *
*     (+10) PROC STEP NAME                                    8 BYTES *
*     (+18) STATUS FLAG (SS=SYSABEND/UU=USERABEND/CC=RETCODE) 2 BYTES *
*     (+20) RC OR ABEND CODE                                  4 BYTES *
***********************************************************************
         COPY $HASPGBL                 COPY HASP GLOBALS
MEXIT16  $MODULE ENVIRON=JES2,                                         C
               IBMJES2=NO,                                             C
               RMODE=ANY,                                              C
               SYSP=(GEN,GEN,DATA,GEN,GEN),                            C
               TITLE='JES2 EXIT16 - MAX COND CODE/ABEND CODE SUPPORT', C
               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C
               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C
               $MIT,                   REQ'D BY $MODEND, HCT           C
               $PCE                    REQ'D TO GET PROCESSOR INFO
         TITLE 'JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*  INITIALIZATION                                                     *
***********************************************************************
EXIT16   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         $SAVE                         SAVE CALLER'S REGISTERS
         LR    R12,R15                 LOAD BASE REGISTER
         USING HCT,R11                 PROVIDE HCT ADDRESSABILITY
         USING PCE,R13                 PROVIDE HCT ADDRESSABILITY
         L     R3,8(R1)                LOAD GPR3 WITH ADDR JCT BLOCK
         USING JCT,R3                  PROVIDE JCT ADDRESSABILITY
***********************************************************************
*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *
*  BEEN SAVED.  IF NOT, RETURN.                                       *
***********************************************************************
         CLC   JCTUCOM,=F'0'           IS JOB'S ABEND/MAX CC SAVED?
         BNE   X16RC00                 NO, EXIT 28 FAILED
         CLI   JCTFLAG1,X'20'          INVALID USERID FROM JOB CARD?
         BE    X16RC08                 YES, SKIP MESSAGE
         CLC   JCTNOTUS(6),=C'NOUSER'  DEFAULT USERID SET BY EXIT2?
         BE    X16RC08                 YES, SKIP MESSAGE
         CLI   JCTJTFLG,X'80'        80=FAIL,IS MESSAGE TO BE ALTERED?
         BE    X16RC00                 NO, SKIP
***********************************************************************
*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *
***********************************************************************
         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST
         USING CMBWTOPL,R4             ESTABLISH $CMB ADDRESSABILITY
         SLR   R5,R5                   ZERO WORK REGISTER
         IC    R5,CMBML                GET MESSAGE LENGTH
         CH    R5,=H'51'               MSG TOO LONG TO UPDATE IN PLACE?
         BH    X16RC00                 YES, RETURN (SHOULDN'T HAPPEN)
         L     R6,0(R1)                GET ADDRESS IF MESSAGE TEXT
         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT
***********************************************************************
*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *
***********************************************************************
         LA    R2,JCTUSERA             LOAD R2 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         CLC   18(2,R2),=C'CC'         MAXCC RECORDERED ?
         BE    MAXCONDC                YES, GET IT AND RETURN
         CLC   18(2,R2),=C'UU'         USER ABEND RECORDERED ?
         BE    USRABEND                YES, GET IT AND RETURN
         CLC   18(2,R2),=C'SS'         SYS  ABEND RECORDERED ?
         BE    SYSABEND                YES, GET IT AND RETURN
         B     X166RC00                RETURN IF OTHER, ERROR
***********************************************************************
*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *
*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *
***********************************************************************
SYSABEND DS    0H
         LA    R5,10(,R5)              INCR. MSG LENGTH (+10 BYTES)
         MVC   0(4,R6),20(R2)          BUILD NEW MESSAGE TEXT (PART 1)
         MVC   4(6,R6),=C' STEP('      BUILD NEW MESSAGE TEXT (PART 2)
         LA    R6,10(,R6)              MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,2(,R7)               POINT TO START OF JOBNAME
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(S_STRIPPED_JOBNAME) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP JOBNAME
S_STRIPPED_JOBNAME  EQU *              RETURN ISTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         CLC   10(8,R2),=CL8' '        EXIST PROCSTEP ?
         BE    STORELEN                NO, STORE MSG LENGTH AND EXIT
         MVC   0(1,R6),=C'.'           BUILD NEW MESSAGE TEXT
         LA    R6,1(,R6)               MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,10(,R7)              POINT TO START OF PROCSTEP
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(S_STRIPPED_PROCSTEP) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP PROCSTEP
S_STRIPPED_PROCSTEP EQU *              RETURN INSTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         B     STORELEN                GO CHECK NEW MESSAGE LENGTH
***********************************************************************
*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *
*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *
***********************************************************************
USRABEND DS    0H
         LA    R5,11(,R5)              INCR. MSG LENGTH (+20 BYTES)
         MVC   0(1,R6),=C'U'           BUILD NEW MESSAGE TEXT (PART 1)
         MVC   1(4,R6),20(R2)          BUILD NEW MESSAGE TEXT (PART 2)
         MVC   5(6,R6),=C' STEP('      BUILD NEW MESSAGE TEXT (PART 3)
         LA    R6,11(,R6)              MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,2(,R7)               POINT TO START OF JOBNAME
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(U_STRIPPED_JOBNAME) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP JOBNAME
U_STRIPPED_JOBNAME  EQU *              RETURN ISTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         CLC   10(8,R2),=CL8' '        EXIST PROCSTEP ?
         BE    STORELEN                NO, STORE MSG LENGTH AND EXIT
         MVC   0(1,R6),=C'.'           BUILD NEW MESSAGE TEXT
         LA    R6,1(,R6)               MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,10(,R7)              POINT TO START OF PROCSTEP
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(U_STRIPPED_PROCSTEP) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP PROCSTEP
U_STRIPPED_PROCSTEP EQU *              RETURN INSTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         B     STORELEN                GO CHECK NEW MESSAGE LENGTH
***********************************************************************
*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *
*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *
***********************************************************************
MAXCONDC DS    0H
         LA    R5,8(,R5)               INCR. MSG LENGTH (+8 BYTES)
         MVC   0(8,R6),=C'- MAXCC '    BUILD NEW MESSAGE TEXT (PART 1)
         CLC   20(4,R2),=C'  00'       MAXCC EQUAL ZERO
         BE    NOSTEP                  YES, NO STEP IN MESSAGE TEXT
         LA    R6,8(,R6)               MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,20(,R7)              POINT TO START OF MAXCC
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,4(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(C_STRIPPED_MAXCC) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP JOBNAME
C_STRIPPED_MAXCC  EQU *                RETURN ISTRUCTION
         MVC   0(6,R6),=C' STEP('      BUILD NEW MESSAGE TEXT (PART 3)
         LA    R5,6(,R5)               INCR. MSG LENGTH (+6 BYTES)
         LA    R6,6(,R6)               MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,2(,R7)               POINT TO START OF JOBNAME
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(C_STRIPPED_JOBNAME) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP JOBNAME
C_STRIPPED_JOBNAME  EQU *              RETURN ISTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         CLC   10(8,R2),=CL8' '        PROCSTEP ?
         BE    STORELEN                NO, STORE MSG LENGTH AND EXIT
         MVC   0(1,R6),=C'.'           BUILD NEW MESSAGE TEXT
         LA    R6,1(,R6)               MOVE POINTER AT END OF NEW MSG
         LA    R7,JCTUSERA             LOAD R7 WITH ADDR. OF CSA AREA
*                                      STORED IN JCTUSERA-F (24 BYTES)
*                                      BY EXIT28 (JOB TERMINATION)
         LA    R7,10(,R7)              POINT TO START OF PROCSTEP
         SLR   R8,R8                   WORK GPR8 RESET
         LA    R8,8(,R8)               WORK GPR8 USED LIKE COUNTER
         L     R9,=A(C_STRIPPED_PROCSTEP) WORK GPR9 USED RETURN ADDRESS
         B     STRIP_VARIABLE          STRIP PROCSTEP
C_STRIPPED_PROCSTEP EQU *              RETURN INSTRUCTION
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),=C')'           BUILD NEW MESSAGE TEXT
         B     STORELEN                GO CHECK NEW MESSAGE LENGTH
NOSTEP   EQU   *
         MVC   8(2,R6),=C'00'          RC SET TO ZERO VALUE
         LA    R5,2(,R5)               INCR. MSG LENGTH (+2 BYTES)
         B     STORELEN                
***********************************************************************
*  STRIP JOBNAME/PROCSTEP TO INSERT IN MSG ONLY NON BLANK CHARACTERS  *
***********************************************************************
STRIP_VARIABLE DS 0H                   CODE TO STRIP VARIABLE
         CLC   0(1,R7),=C' '           CHAR OF VARIABLE IS BLANK?
         BE    STRIPPED_VARIABLE       YES, NO MOVE BLANK
         LA    R5,1(,R5)               INCR. MSG LENGTH (+1 BYTES)
         MVC   0(1,R6),0(R7)           BUILD NEW MESSAGE TEXT (PART 3)
         LA    R6,1(,R6)               MOVE POINTER AT END OF NEW MSG
STRIPPED_VARIABLE EQU *                LABEL FOR SKIP BLANK
         LA    R7,1(,R7)               MOVE POINTER AT END OF NEW MSG
         BCT   R8,STRIP_VARIABLE       BRANCH AND DECREASE COUNTER
         BR    R9                      RETURN TO CALLER
***********************************************************************
*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *
***********************************************************************
STORELEN DS    0H
         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST
         B     X16RC00
X16RC08  DS    0H
         LA    R15,8                   SET RC=8 (NOT ISSUE NOTIFY MSG)
         B     RETURN
X16RC04  DS    0H
         LA    R15,4                   SET RC=4 (IGNORE OTHER EXIT)
         B     RETURN
X16RC00  DS    0H
         SLR   R15,R15                 SET NORMAL RC=0
RETURN   DS    0H
        $RETURN RC=(R15)               RETURN TO CALLER
         EJECT
         LTORG
        $MODEND
         END


JES2 exit 28 Assembler source

MEXIT28S TITLE 'JES2 EXIT 028 - RELEASE RESOURCE AT END OF JOB'
***********************************************************************
* MODULE NAME: EXIT028                                                *
* DESCRIPTIVE NAME: JES2 EXIT 028 - RELEASE STORAGE ACQUIRED BY       *
*                   IEFACTRT EXIT AND COPY INFORMATION ABOUT          *
*                   END JOB IN JCT USER FIELD                         *
* FMID: HJE4430 (MVS/ESA - JES2 4.3.0)                                *
* PURPOSE: THIS EXIT COPY INFORMATION ABOUT THE MAXIMUM CONDITION CODE*
*          OF ALL THE STEPS IN A JOB OR THE ABEND CODE OF THE JOB AND *
*          RELEASE STORAGE ACQUIRED BY IEFACTRT ROUTINE.              *
* ENTRY POINT: EXIT28                                                 *
* RECOVERY :                                                          *
*        EXIT28 IS COVERED BY THE GENERAL RECOVERY SERVICE OF         *
*        SSIBEGN. IF THE USER EXIT ROUTINE IS IN ERROR, THE           *
*        RECOVERY ROUTINE WILL INDICATE ERROR TO THE SSI CALLER       *
*        AND TERMINATE ANY FURTHER SSI FUNCTION PROCESSING.           *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*    REG       VALUE ON ENTRY                                         *
*    R0        0                                                      *
*    R1        ADDRESS OF PARAMETER LIST                              *
*    R2-R10    N/A                                                    *
*    R11       ADDRESS OF HCCT                                        *
*    R12       N/A                                                    *
*    R13       ADDRESS OF AVAILABLE SAVE AREA                         *
*    R14       RETURN ADDRESS                                         *
*    R15       ENTRY ADDRESS                                          *
*    REG       VALUE ON EXIT                                          *
*    R0-R14    UNCHANGED                                              *
*    R15       RETURN CODE (0)                                        *
* PARAMETER LIST :                                                    *
*        (+0)   TYPE OF PROCESSING INDICATOR                          *
*                0 - CALLER ID JOB TERMINATION (JOB/STC/TSU/XBM IS    *
*                    TERMINATING)                                     *
*                4 - CALLER IS RETURN ID (SYSLOG IS TERMINATING)      *
*                8 - RESERVED FOR FUTURE USE                   430P270
*               12 - CALLER IS JOB SELECT (JOB/STC/TSU UNABLE TO      *
*                    OBTAIN RESOURCE                                  *
*               16 - CALLER IS REQUEST-ID (REQUEST-ID JOB      430P270
*                    UNABLE TO OBTAIN RESOURCES)               430P270
*               20 - RESERVED FOR FUTURE USE                   430P270
*               24 - CALLER IS JOB RE-QUEUE (UNABLE TO RESTART 430P270
*                    JOB BECAUSE RESOURCES CANNOT BE OBTAINED) 430P270
*        (+1)   RESERVED                                              *
*        (+2)   RESPONSE BYTE (COMPOSED IF BITS 0-7).                 *
*                BITS 0-6 - RESERVED FOR FUTURE USE                   *
*                BIT  7   - IF 1, SUPPRESS JES2 JOB TERMINATION MSG.  *
*                           IF 0, ISSUE JES2 JOB TERMINATION MSG.     *
*        (+3)   RESERVED                                              *
*        (+4)   ADDRESS OF SJB                                        *
*        (+8)   ADDRESS OF JCT OR ZERO                                *
* REGISTER USAGE (INTERNAL) :                                         *
*    REG       VALUE                                                  *
*    R0-R1                                                            *
*    R2        ADDRESS OF PARAMETER LIST                              *
*    R3-R6     N/A                                                    *
*    R7        ADDRESS OF JCT                                         *
*    R8-R10    N/A                                                    *
*    R11       ADDRESS OF HCCT                                        *
*    R12       ROUTINE BASE REGISTER                                  *
*    R13       ADDRESS OF SAVE AREA                                   *
*    R14       RETURN ADDRESS                                         *
*    R15       RETURN CODE                                            *
* DATA AREA USAGE (INTERNAL) :                                        *
*    NAME          VALUE                                              *
*    JCTUSERA-F   JCT USER FIELDS REFERENCE FOR MAPPING CSA USER BLOCK*
*    JCTUCOM      JCT USER COMUNICATION AREA LOADED BY IEFACTRT EXIT  *
* RETURN CODES (R15 ON EXIT) :                                        *
*         0 - NORMAL JES2 PROCESSING RESUMES                          *
*         4 - SAME AS 0 EXCEPT NO FURTHER EXITS ARE TO BE CALLED      *
* OTHER CONSIDERATIONS :                                              *
*    LAYOUT OF CSA MEMORY ACQUIRED BY IEFACTRT ROUTINE AND POINTED    *
*    BY JCTUCOM FIELD.                                                *
*     (+0)  LENGTH OF AREA FIXED VALUE 24 (UNUSED)            2 BYTES *
*     (+2)  STEP NAME                                         8 BYTES *
*     (+10) PROC STEP NAME                                    8 BYTES *
*     (+18) STATUS FLAG (SS=SYSABEND/UU=USERABEND/CC=RETCODE) 2 BYTES *
*     (+20) RC OR ABEND CODE                                  4 BYTES *
***********************************************************************
         COPY $HASPGBL                 COPY HASP GLOBALS
MEXIT28  $MODULE ENVIRON=USER,                                         C
               IBMJES2=NO,                                             C
               RMODE=ANY,                                              C
               SYSP=(GEN,GEN,DATA,GEN,GEN),                            C
               TITLE='JES2 EXIT 028 - RELEASE RESOURCE AT END OF JOB', C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C
               $HCCT,                  HCCT DSECT                      C
               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C
               $MIT,                   REQ'D BY $MODEND, HCT           C
               $SJB                    REQ'D TO GET PROCESSOR INFO
         TITLE 'JES2 EXIT 028 - RELEASE RESOURCE AT END OF JOB'
***********************************************************************
*  INITIALIZATION                                                     *
***********************************************************************
EXIT28   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         $SAVE                          SAVE CALLER'S REGISTERS
         LR    R12,R15              LOAD BASE REGISTER
         SLR   R15,R15              RESET RETURN CODE TO ZERO
         USING JCT,R3               PROVIDE JCT ADDRESSABILITY
         LR    R2,R1                SAVE PARAMETER LIST POINTER
         ICM   R3,B'1111',8(R2)     LOAD JCT (IF ONE IS PRESENT)
         BZ    FASTEXIT             IF NO JCT THEN EXIT
***********************************************************************
*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *
*  BEEN SAVED.  IF NOT, RETURN.                                       *
***********************************************************************
         CLC   JCTUCOM,=F'0'          IS JOB'S ABEND/MAXCC SAVED?
         BE    FASTEXIT               NO, EXIT
***********************************************************************
*  COPY INFO IN JCTUSER FIELD (INTO USERA-USERF) AND RESET JCTUCOM
***********************************************************************
         L     R4,JCTUCOM              LOAD R4 WITH ADDR. OF CSA AREA
         MVC   JCTUSERA(4),0(R4)       LOAD FIRST 4 BYTE IN USERA FIELD
         MVC   JCTUSERB(4),4(R4)       LOAD 2ND   4 BYTE IN USERB FIELD
         MVC   JCTUSERC(4),8(R4)       LOAD 3TH   4 BYTE IN USERC FIELD
         MVC   JCTUSERD(4),12(R4)      LOAD 4TH   4 BYTE IN USERD FIELD
         MVC   JCTUSERE(4),16(R4)      LOAD 5TH   4 BYTE IN USERE FIELD
         MVC   JCTUSERF(4),20(R4)      LOAD 6TH   4 BYTE IN USERF FIELD
         MVC   JCTUCOM,=F'0'           RESET JCTUCOM FIELD
         B     X28RC00
***********************************************************************
*  FREE OF  CSA MEMORY ACQUIRED BY IEFACTRT ROUTINE AT END OF JOB     *
*  AND GO BYE-BYE.                                                    *
***********************************************************************
X28RC04  DS    0H
         STORAGE RELEASE,LENGTH=24,SP=241,KEY=1,ADDR=(R4),COND=YES
         LA    R15,4                   SET RC=4 (IGNORE OTHER EXIT)
         B     RETURN
X28RC00  DS    0H
         STORAGE RELEASE,LENGTH=24,SP=241,KEY=1,ADDR=(R4),COND=YES
         SLR   R15,R15                 SET NORMAL RC=0
         B     RETURN
FASTEXIT DS    0H
         SLR   R15,R15                 SET DEFAULT RC=0
RETURN   DS    0H
        $RETURN RC=(R15)               RETURN TO CALLER
         LTORG
        $MODEND
         END


Salvatore Mancini
Systems Analyst
In Tel Tec srl (Italy)                   c Xephon 1996

