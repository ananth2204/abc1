Displaying active TSO users

AUTSO is an ISPF dialog written in Assembler that gives
pertinent information concerning our TSO users. Once AUTSO is
called it displays all of the following user information:

o      Active TSO users

o      Terminal-id

o      Log-on procedure

o      TSO user's name

o      Log-on time

o      Default RACF group-id

o      VTAM LOGMODE table

o      Whether the TSO user is in ISPF or native TSO.

Figure 1 shows a sample display from AUTSO. AUTSO gets all
of its information from various MVS and RACF control blocks.
Since AUTSO gets the TSO users' names from the RACF
database, it gets the up-to-date name assigned to the TSO user.

AUTSO is a good productivity tool that can be used by systems
programming, system performance, MVS coverage, data security,
and operations personnel.

INSTALLATION INSTRUCTIONS

At certain points in the TSO log-on process the MVS DSECT
that contains the TSO user-id will contain either binary zeroes or
blanks. These values will cause the RACF RACXTRT macro to
fail with a bad condition code. My circumvention is to check for
binary zeroes or blanks; if any are found, the program passes a
special user-id called 'LOGON' to the RACF RACXTRT
macro.

Our data security department has defined this user-id (LOGON)
to RACF with a name value of 'LOGON IN PROGRESS'. Our
AUTSO dialog will then display the TSO user-id of 'LOGON'
and the name 'LOGON IN PROGRESS' any time the user-id
'LOGON' is passed to the RACF RACXTRT macro.

Define the authorization SVC to your operating system in the
SYS1.PARMLIB member IEASVCxx. For example:

      SVCPARM nnn,REPLACE,TYPE(4),APF(NO)

where nnn is the SVC number you decide to use.

Specify the SVC number you have just defined in the AUTH
macro. Currently SVC 239 is specified.

Copy the AUTH macro and MOVELONG macro into a macro
library. This library must be specified on the SYSLIB DD
statement for assembling the authorization SVC.

Using the JCL shown below, assemble and link the authorization
SVC into an LPALIB library as IGC00xxx, where xxx is the SVC
number you decide to use.

Using the JCL shown below, assemble and link the AUTSO
ISPF dialog into an ISPLLIB library or LINKLIST library. You
must edit the source first and make the following site changes:

o      Copy the ISPF message member AUTSO00 to an ISPMLIB
      library allocated by your TSO log-on procedure.

o      Copy the ISPF panels AUTSOERR and AUTSO002 to an
      ISPPLIB library allocated by your TSO log-on procedure.

o      Modify an ISPF panel to access the AUTSO dialog. For
      example AUTSO,'PGM(AUTSO)'.

AUTH MACRO

         MACRO
.**********************************************************************
.***  MACRO  DOCUMENTATION  INFORMATION:                            ***
.***      NAME:        A U T H                                      ***
.***      PURPOSE:     AUTH APF-AUTHORIZES THE CALLER IN KEY=ZERO   ***
.***                   ALLOWING RESTRICTED SVC'S, SUCH AS MODESET   ***
.***                   TO BE EXECUTED BY A NON-APF CALLER. AUTH IS  ***
.***                   USED IN AUIMS & AUTSO ISPF DIALOGS.          ***
.***      PARMS:       "ON" TURN ON APF AUTHORIZATION               ***
.***                   "OFF" TURN OFF APF AUTHORIZATION             ***
.**********************************************************************
&N       AUTH  &SWITCH
         LCLA  &NUM
         AIF   ('&SWITCH' NE 'ON' AND '&SWITCH' NE 'OFF').ERROR
&NUM     SETA  0
         AIF   ('&SWITCH' EQ 'OFF').L1
&NUM     SETA  1
.L1      CNOP  0,4
&N       BAL   R2,*+8
         DC    C'AUTH'
         L     R1,0(R2)
         LA    R0,&NUM
         SVC   239
         MEXIT
.ERROR   MNOTE 12,'INVALID OPTION - &SWITCH'
         MEND

MOVELONG MACRO

         MACRO
&LABEL   MOVELONG &OP1,&OP2,&LEN
         ACTR  100                     MAX LOOP = 100 TIMES
.**********************************************************************
.***  MACRO  DOCUMENTATION  INFORMATION:                            ***
.***     NAME:        M O V E L O N G                               ***
.***     PURPOSE:     MOVELONG WILL ACT LIKE AN  'MVCL'  INS-       ***
.***                  TRUCTION, BUT ONLY USE  'MVC'  INSTRUC-       ***
.***                  TIONS TO MOVE UP TO 4096 CHARACTERS.          ***
.***                  IT WILL BE INVOKED WITH THREE PARAMETERS:     ***
.***                     1) RECEIVING FIELD - MUST BE PRESENT.      ***
.***                     2) SENDING FIELD - MUST BE PRESENT.        ***
.***                     3) LENGTH OF MOVE - MUST BE NUMERIC,       ***
.***                          DEFAULT=LENGTH OF RECEIVING FIELD.    ***
.**********************************************************************
.*--------------------------------------------------------------------*
.*       CHECK FOR REQUIRED/CORRECT OPERANDS                          *
.*--------------------------------------------------------------------*
         AIF   ('&SYSLIST(1)' EQ '').NOOP1
         AIF   ('&SYSLIST(2)' EQ '').NOOP2
         AIF   (T'&SYSLIST(3) NE 'N' AND T'&SYSLIST(3) NE 'O').BADLTYP
         AIF   ('&SYSLIST(3)' GT '4096').GT4096
.*--------------------------------------------------------------------*
.*       DECLARE INTERNAL MACRO VARIABLES                             *
.*--------------------------------------------------------------------*
         LCLA  &L,&L2,&O               LENGTH AND OFFSET ACCUMULATORS
&L       SETA  &LEN                    SET TO LENGTH OPERAND
&L2      SETA  256                     SET TO MAXIMUM MOVE LENGTH
.*--------------------------------------------------------------------*
.*       GENERATE SUCCESSIVE ASSEMBLY MOVE INSTRUCTIONS               *
.*--------------------------------------------------------------------*
         AIF   (&L NE 0).CONT
         MNOTE 0,'LENGTH OMITTED -- ASSUMING FIRST OPERAND LENGTH'
&L       SETA  L'&OP1                  DEFAULT TO LENGTH OF REC FIELD
         AGO   .LOOP                   GO GENERATE INSTRUCTIONS
.CONT    ANOP
         AIF   (&L LE L'&OP1).LOOP
         MNOTE 0,'WARNING -- LENGTH SPECIFIED LONGER THAN 1ST OPERAND'
.LOOP    ANOP
         AIF   (&L GE 256).DOIT        MAXIMUM LENGTH ??
&L2      SETA  &L                        NO - SET TO REMAINDER
.DOIT    MVC   &OP1+&O.(&L2.),&OP2+&O  GENERATE  'MVC'  INSTRUCTION
&L       SETA  &L-&L2                  DECREMENT LENGTH
&O       SETA  &O+&L2                  INCREMENT OFFSET
         AIF   (&L GT 0).LOOP          MOVE COMPLETE ??
         MEXIT                           YES -
.*--------------------------------------------------------------------*
.*       MACRO DIAGNOSTIC MESSAGES                                    *
.*--------------------------------------------------------------------*
.NOOP1   ANOP
         MNOTE 8,'FIRST OPERAND OMITTED -- REQUIRED FIELD'
         MEXIT
.NOOP2   ANOP
         MNOTE 8,'SECOND OPERAND OMITTED -- REQUIRED FIELD'
         MEXIT
.BADLTYP ANOP
         MNOTE 8,'INCORRECT TYPE SPECIFICATION FOR LENGTH OPERAND'
         MEXIT
.GT4096  ANOP
         MNOTE 8,'SPECIFIED LENGTH IS GREATER THAN 4096'
         MEXIT
         MEND

IGC00XXX SOURCE

IGC00XXX TITLE '--  AUTHORIZATION CONTROL SVC  --'
***********************************************************************
*               PLEASE NOTE                                           *
*  CHANGE  XXX TO THE SVC YOU DECIDE TO USE AT YOUR SHOP              *
*  CHANGE  YYY TO THE SVC MODULE LETTER.                              *
*  EX  SVC = IGC00239 SVC MODULE = IGC0023I
*               PLEASE NOTE                                           *
*  THIS SVC WILL TURN AUTHORIZATION ON AND OFF AS SPECIFIED.          *
*  SECURITY IS IMPLEMENTED BY REQUIRING A CODE WORD FOR SUCCESSFUL    *
*  EXECUTION.  TO USE THIS SVC, REGISTER ONE MUST CONTAIN THE         *
*  CODE WORD AND REGISTER ZERO THE FUNCTION INDICATOR.                *
*  IF THE FUNCTION INDICATOR IS NON-ZERO, AUTHORIZATION WILL BE       *
*  TURNED ON, IF IT IS ZERO AUTHORIZATION WILL BE TURNED OFF.         *
*  THE SVC TYPE MAY BE ANY, AND NO LOCKS ARE REQUIRED.  AN EXAMPLE    *
*  INSTALLATION AS A TYPE 4 WOULD USE THESE LINK EDIT CARDS:          *
*    ENTRY IGC00XXX                                                   *
*    SETCODE AC(1)                                                    *
*    NAME IGC00YYY(R)                                                 *
*  APPLICABILITY:  MVS/ESA                                            *
*  MODE:  KEY ZERO, SUPERVISOR STATE.                                 *
*  ATTRIBUTES:  REFRESHABLE, REENTRANT, REUSABLE                      *
***********************************************************************
IGC00239 START 0                      BEGIN CONTROL SECTION.
         USING BEGIN,R6               PROVIDE ADDRESSABILITY.
BEGIN    LA    R15,4                  SET INVALID RETURN CODE.
         CL    R1,CODE                TEST FOR GOOD CODE WORD.
         BNER  R14                    RETURN IF BAD CODE WORD.
         SR    R15,R15                SET GOOD RETURN CODE.
         L     R8,TCBJSCB(,R4)        GET ADDRESS OF JSCB.
         LTR   R0,R0                  CHECK FUNCTION INDICATOR.
         BZ    UNAUTH                 IF ZERO, TURN AUTHORIZATION OFF.
AUTH     OI    JSCBOPTS(R8),JSCBAUTH  TURN AUTHORIZATION ON.
         BR    R14                    RETURN TO XLIH.
UNAUTH   NI    JSCBOPTS(R8),X'FF'-JSCBAUTH   TURN IT OFF.
         BR    R14                    RETURN TO XLIH.
*        DATA CONSTANTS AND DEFINITIONS                              *
CODE     DC    0F'0',C'AUTH'
TCBJSCB  EQU   180                    OFFSET OF JSCB ADDRESS IN TCB.
JSCBOPTS EQU   236                    OFFSET OF OPTIONS BYTE IN JSCB.
JSCBAUTH EQU   X'01'                  BIT ON ALLOWS MODESET EXECUTION.
R0       EQU   0                      FUNCTION FLAG.
R1       EQU   1                      SECURITY CODE WORD.
R4       EQU   4                      TCB ADDRESS.
R6       EQU   6                      ENTRY POINT ADDRESS.
R8       EQU   8                      JSCB ADDRESS FROM TCB.
R14      EQU   14                     RETURN ADDRESS.
R15      EQU   15                     RETURN CODE.
         END

JCL TO ASSEMBLE AND LINK AUTHORIZATION SVC

//*********************************************************************
//*       ASSEMBLE AND LINK-EDIT SVC NNN INTO THE LPA LIBRARY         *
//*********************************************************************
//ASM     EXEC PGM=IEV90,
//             PARM=(LIST,NODECK,OBJECT)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR          <--- SYSTEM MACLIB
//         DD  DSN=MACRO.LIBRARY                 <----  AUTH MACRO
//             DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR         <--- SYSTEM MAPPINGS
//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),     <--- ASSEMBLED OBJECT
//             SPACE=(80,(200,50)),UNIT=SYSDA         PASS TO LINK-EDIT
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSPUNCH DD  DUMMY
//SYSIN    DD  DSN=SOURCE.LIBRARY(IGC00XXX),     <--- SOURCE CODE
//             DISP=SHR
//*
//LKED    EXEC PGM=IEWL,COND=(0,LT,ASM),REGION=1024K,
//             PARM='AC=1,LIST,LET,XREF,MAP'
//*
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)    <--- OBJECT INPUT
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=LPALIB.LIBRARY,DISP=SHR       <--- LPALIB
//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR         <--- SYSTEM MODS
//*
//*    LINKEDIT CONTROL STATEMENTS, REVIEW THEM FOR ACCURACY !
//*
//SYSIN    DD *
 ENTRY IGC00XXX
 SETCODE AC(1)
 NAME IGC00XXX(R)
/*

AUTSO SOURCE

***********************************************************************
*  PURPOSE:     DISPLAY ALL ACTIVE TSO USERS                          *
*  INVOCATION:  TSO CALL 'A088A17.ASM.LOAD(AUTSOR)'                   *
*  SOFTWARE:    SOURCE CODE - A088A17.DIALOG.CNTL(AUTSO)              *
*               MODULE/TEST - A088A17.ASM.LOAD(AUTSO)                 *
*  NOTES:                                                             *
*  1. THIS MODULE REQUIRES JSCB AUTHORIZATION, IT USES THE AUTH MACRO *
*     AND AN SVC.                                                     *
*  2. THIS CODE CAN SUPPORT BOTH 24X80 AND 43X80 TERMINAL DISPLAYS.   *
*     UNLESS THE CODE IS MODIFIED YOU WILL NEED ONE MODULE FOR 24X80  *
*     SUPPORT AND ONE FOR 43X80. THE INSTRUCTIONS THAT ARE REQUIRED   *
*     FOR 43X80 HAVE BEEN SUPPLIED AND ARE COMMENTED OUT. TO MAKE     *
*     THEM EFFECTIVE PLEASE UNCOMMENT THE INSTRUCTIONS FOR 43X80      *
*     SUPPORT AND COMMENT OUT THE ONES FOR 24X80 SUPPORT.             *
***********************************************************************
AUTSO    CSECT
         SAVE  (14,12),,'AUTSO    BRUCE   CHALMERS  &SYSDATE &SYSTIME'
         LR    R12,R15              1ST BASE REGISTER --> R12
         LA    R10,4095(R12)        2ND BASE REGISTER --> R10
         LA    R10,1(R10)           CONNECTS ITS CHAIN
         USING AUTSO,R12,R10        ESTABLISH ADDRESSABILITY
         LR    R3,R13               CALLER'S SAVEAREA POINTER
         ST    R13,SAVEAREA+4       SAVE IT
         LA    R13,SAVEAREA         MODULE SAVEAREA POINTER
         ST    R13,8(R3)            SAVE IT
         MVC   MODULE(8),5(R12)     GET ASSEMBLED MODULE NAME
         MVC   LNKDATE(14),32(R12)  GET ASSEMBLED DATE AND TIME
         MVC   MSG+5(3),AUTSO007
*  SET DIALOG OPTIONS AND DEFINE THE PROGRAM VARIABLES TO ISPF    *
SETISPF  CALL  ISPLINK,(CONTROL,ERRORS,RETURN),VL
         CALL  ISPLINK,(VDEFINE,IVARS1,VARS1,ICHAR,IL8),VL
         CALL  ISPLINK,(VDEFINE,IVARS2,VARS2,ICHAR,IL14),VL
         CALL  ISPLINK,(VDEFINE,IZCMD,ZCMD,ICHAR,IL45),VL
         CALL  ISPLINK,(VDEFINE,IAUDATA,AUDATA,ICHAR,IL1440),VL  24X80
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
**       CALL  ISPLINK,(VDEFINE,IAUDATA,AUDATA,ICHAR,IL3440),VL  43X80
*  TREK TO THE SPECIFIED ASCB BASED ON THE SYSTEM SIDE            *
BEGIN1   L     R4,16              POINT TO CVT PROPER
         USING CVT,R4             CVT ADDRESSABILITY
         MVC   SYSTEM,CVTSNAME    GET CVTSNAME - SYSTEM NAME
         BAL   R2,AUTHON          TURN ON JSCB AUTHORIZATION
         L     R5,CVTTCASP        POINT TO THE TSO/VTAM TCAS TABLE
         ST    R5,SAVETCAS        AND SAVE IT
         USING TCAST,R5           TCAST ADDRESSABILITY
         LH    R6,TCASUSEC        NUMBER OF ACTIVE USERS
         ST    R6,TSOUSERS        SAVE IT
         L     R7,TCASTSB         GET 1ST TSO/VTAM TSB
         ST    R7,FIRSTTSB        AND SAVE IT
         DROP  R5                 RELEASE TCAST BASE REGISTER
         LA    R9,AUDATA          POINT TO AU BLOCK (1ST TIME THRU)
NEXTTSB  LTR   R7,R7              END OF CHAIN FOR TSB
         BZ    DISPLAY1           YES, GO DISPLAY ACTIVE USERS
         ST    R7,SAVETSB         SAVE IT
         USING TSB,R7             TSB ADDRESSABILITY
         TM    TSBFLG5,TSBSPF     ISPF ACTIVE?
         BO    ISPF1              YES CONTINUE
         MVI   ISPFFLAG,C' '      NO RESET ISPF FLAG
         B     PTERMID            AND CONTINUE
ISPF1    MVI   ISPFFLAG,C'*'      YES, FLAG AU RECORD (ISPF ACTIVE)
PTERMID  MVC   PTERM,TSBTRMID     GET PHYSICAL TERMINAL ID
         L     R2,SV2             RESTORE TSB COUNTER
         AH    R2,ZERO            INCREMENT COUNT BY ONE
         ST    R2,SV2             SAVE IT
         L     R8,TSBEXTNT        GET THE TSB EXTENTION POINTER
         ST    R8,SAVETSBX        AND SAVE IT
         USING TSBX,R8            TSBX ADDRESSABILITY
         MVC   LOGMODE,TSBXLMOD   VTAM LOGMODE NAME
         L     R6,TSBASCBA        GET THE ASCB POINTER
         N     R6,=X'00FFFFFF'    SET HIGH-ORDER BYTE TO ZEROES
         ST    R6,SAVEASCB        AND SAVE IT
         USING ASCB,R6            ASCB ADDRESSABILITY
         L     R15,=A(X'80000000'+CSCB1) SET FOR 31-BIT MODE
         BSM   R0,R15
CSCB1    L     R11,ASCBCSCB       GET THE CSCB POINTER
         ST    R11,SAVECSCB       AND SAVE IT
         USING CHAIN,R11          CSCB ADDRESSABILITY
         CLC   CHKEY,=C'        '  ID FIELD IS BLANK
         BNE   VALIDID
         CLC   CHKEY,=D'0'         ID FIELD BINARY ZEROES
         BNE   VALIDID
         MVC   CHKEY,SPECID       MOVE LOGON TO CHKEY FIELD
VALIDID  MVC   LOGON,CHKEY        ID OF THE STARTED TASK (LOGON ID)
         MVC   USERID,CHKEY       AND LOAD IT FOR RACFXTRT CALL
         CLC   CHCLS,=D'0'        BINARY ZEROES IN LOGON PROC
         BNE   VPROC              NO VALID LOGON PROC
         MVC   LPROC,ZEROES       FILL WITH ZEROES
         B     BIT31              AND SKIP MVC BELOW
VPROC    MVC   LPROC,CHCLS        TSO LOGON PROC
BIT31    L     R15,=A(X'80000000'+OUCB1) SET FOR 31-BIT MODE
         BSM   R0,R15
OUCB1    L     R5,ASCBOUCB        GET THE SRM OUCB POINTER
         ST    R5,SAVEOUCB        AND SAVE IT
         USING OUCB,R5            OUCB ADDRESSABILITY
         MVC   TRANX,OUCBTRXN     GET THE TRANSACTION NAME
         LA    R15,OUCBX          SET FOR 24 BIT MODE
         BSM   R0,R15             EXECUTE IT
OUCBX RACXTRT TYPE=EXTRACT,       EXTRACT FUNCTION ROUTINE             X
               ENTITY=USERID,     LOGON ID FROM THE CSCB FIELD CHKEY   X
               RELEASE=1.8.1,     RELEASE LEVEL OF PARAMETER LIST      X
               FLDACC=NO,         NO FIELD LEVEL CHECKING              X
               CLASS='USER',      TYPE OF DATA TO EXTRACT              X
               FIELDS=FLDLIST     LIST OF PROFILE FIELDS TO EXTRACT
         ST    R15,R15LJ          SAVE RETURN CODE BEFORE AUTH
         LTR   R15,R15            EXTRACT FUNCTION SUCCESSFUL ?
         BZ    RACFOK             YES, CONTINUE
         MVC   TBSRVC,=C'RACXTRT  '  NO IDENTIFY LAST ROUTINE
         MVC   MSG+5(3),AUTSO001     IDENTIFY WARNING MESSAGE
         BAL   R2,AUTHOFF            TURN OFF JSCB AUTHORIZATION
         L     R15,R15LJ             RESTORE RETURN CODE
         B     EXIT1                 END DIALOG WITH A SEVERE ERROR
RACFOK   ST    R1,XTRTADDR           SAVE THE ADDRESS
         AH    R1,4(R1)
         USING EXTOUT,R1
*  FORMAT 18 AU RECORD PER DISPLAY RESET XMS AND JSCB AUTHORIZATION   *
FORMAT1  MVC   AUREC1,AUREC1-1         CLEAR AU RECORD
         MVC   AUREC1(8),LOGON         LOGON ID
         MVC   AUREC1+9(8),PTERM       PHYSICAL TERMINAL NAME
         MVC   AUREC1+18(8),LPROC      TSO LOGON PROC NAME
         MVC   AUREC1+27(20),UNAME     RACF USER NAME
         UNPK  UNPK1,LJTIME                CONVERT TO ZONED DECIMAL
         MVZ   UNPK1+L'UNPK1-1(1),UNPK1    CHANGE SIGN  NIBBLE TO "F"
         MVC   TIME1,UNPK1+1               AND ONLY MOVE LAST 4 BYTES
         MVC   CLBHH(2),TIME1              MOVE CLB TIME (HOURS)
         MVC   CLBMM(2),TIME1+2            MOVE CLB TIME (MINUTES)
         MVC   CLBSS(2),TIME1+4            MOVE CLB TIME (SECONDS)
         MVC   AUREC1+48(8),TIME2          CLB TIME OF POSTING
         MVC   AUREC1+57(8),DFLTGRP        RACF DEFAULT GROUP
         MVC   AUREC1+66(8),LOGMODE        VTAM LOGMODE
         MVC   AUREC1+76(1),ISPFFLAG       ISPF INDICATOR
FORMATX  MVC   0(80,R9),AUREC1          COPY INTO NEXT SLOT AU BLOCK
         DROP  R1
         L     R1,XTRTADDR          RESTORE THE REMOTE AREA ADDRESS
         FREEMAIN RC,LV=24,A=(1)    FREE IT
         L     R1,SV1               RESTORE AU RECORDS IN BLOCK COUNTER
         AH    R1,ONE               INCREMENT BY +1
         L     R15,BLKCNT           RESTORE TOTAL AU RECORDS PROCESSED
         AH    R15,ONE              ADD AU RECORDS PROCESSED
         ST    R15,BLKCNT           SAVE TOTAL AU RECORDS PROCESSED
         LA    R9,80(R9)            POINT TO THE NEXT AU BLOCK SLOT
         L     R7,TSBXFWD           GET THE NEXT TSB ON FORWARD CHAIN
         CH    R1,=H'18'            HAVE 18 AU RECORDS BEEN COPIED
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
*        CH    R1,=H'43'            HAVE 43 AU RECORDS BEEN COPIED
         BE    DISPLAY1             YES GO DISPLAY THEM TO THE USER
         ST    R1,SV1               SAVE COUNTER
         B     DISPLAYX             AND PROCESS IT
DISPLAY1 SR    R1,R1                      CLEAR REGISTER 1
         ST    R1,SV1                 SAVE REGISTER 1 FOR AUDATA LOOP
         BAL   R2,AUTHOFF                 TURN OFF JSCB AUTHORIZATION
         LA    R9,AUDATA                  POINT TO AU BLOCK RESET IT
         CALL  ISPLINK,(VREPLACE,IAUDATA,IL1440,AUDATA),VL       24X80
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
**       CALL  ISPLINK,(VREPLACE,IAUDATA,IL3440,AUDATA),VL       43X80
         MVC   PANEL,PANEL1             BASIC PANEL
DISPLAY2 CALL  ISPLINK,(SETMSG,MSG),VL     MESSAGE ON NEXT PANEL
         CALL  ISPLINK,(DISPLAY,PANEL),VL    DISPLAY THE AU PANEL
         CH    R15,=H'8'                  END KEY HIT? (PF3/PF15)
         BE    EXIT2                      YES END KEY HIT EXIT DIALOG
         BL    MOVEMAC                    NO ENTER CONTINUE
         MVC   TBSRVC,DISPLAY             IDENTIFY NEXT ISPF SERVICE
         MVC   ERRPNL,PANEL                 "        "    "   PANEL
         MVC   MSG+5(3),AUTSO002          IDENTIFY WARNING MESSAGE
         B     EXIT1                      SEVERE ERROR FROM DISPLAY
MOVEMAC  EQU   *
         MOVELONG AUDATA,AUBLANK,1440     CLEAR AU BLOCK SCREEN BUFFER
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
**       MOVELONG AUDATA,AUBLANK,3440     CLEAR AU BLOCK SCREEN BUFFER
PANELS   MVC   MSG+5(3),AUTSO007       BLANK MESSAGE DEFAULT IF NO INFO
         MVC   SOURCE,SPACES              CLEAR SOURCE
         LTR   R7,R7                      DETERMINE IF END OF CHAIN
         BZ    DISPLAY3                   YES CONTINUE
         L     R2,SV2                     NO RESTORE TSB COUNTER
         AH    R2,ZERO                    ZERO OUT COUNT TSB COPIED
         ST    R2,SV2                     SAVE IT
         B     DISPLAY4                   YES CONTINUE
DISPLAY3 L     R7,FIRSTTSB            RESTORE 1ST TSO/VTAM TSB POINTER
         MVC   BLKCNT,=F'0'           CLEAR TOTAL AU RECORD COUNT
DISPLAY4 MVC   ZCMD,ZCMD-1            CLEAR PANEL COMMAND LINE
DISPLAYX BAL   R2,AUTHON              TURN ON JSCB AUTHORIZATION
         B     NEXTTSB                AND PROCESS NEXT OR FIRST TSB
* ERROR ROUTINE, DISPLAY A WARNING PANEL TO THE USER                  *
EXIT1    ST    R15,R15LJ                SAVE R15 BEFORE LEFT JUSTIFY
         CVD   R15,DOUBLE               STORE R15 INTO A DOUBLE WORD
         MVC   EDITRC,=X'40202120'      MOVE EDIT PATTERN IN
         ED    EDITRC,DOUBLE+6          EDIT PACKED FIELD INTO FULLWORD
         MVC   RC(8),SPACES             CLEAR OUT THE RETURN CODE
         CALL  $$LJUSTC,(D8,EDITRC,RC),VL    LEFT JUSTIFY FOR SETMSG
         L     R15,R15LJ                RESTORE R15 ($$JUSTC SETS TO 0)
         CALL  ISPLINK,(SETMSG,MSG),VL       MESSAGE ON NEXT PANEL
         CALL  ISPLINK,(GETMSG,MSG,P1,LMSG),VL   GET LONG MSG TEXT
         CALL  ISPLINK,(DISPLAY,PANEL2),VL     WARNING PANEL
         CH    R15,=H'8'               TEST RC FROM DISPLAY
         BNL   EXIT2                   END KEY OR RC>8, EXIT
         MVC   MSG+5(3),AUTSO007       SEND A BLANK MESSAGE
         B     BEGIN1                  RC=0 TRY DIALOG AGAIN
* HOUSEKEEPING CLEANUP AND FINISH INSTRUCTIONS                        *
EXIT2    CALL  ISPLINK,(VRESET),VL
         L     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)
*  RESET JSCB AUTHORIZATION (AUTHORIZE)                               *
AUTHON   EQU   *                    TURN ON JSCB AUTHORIZATION
         ST    R2,SAVER2            STORE R2 INTO SAVEAREA
         AUTH  ON                   TURN ON JSCB AUTHORIZATION
         MODESET MODE=SUP         TURN OFF PSW PROBLEM STATE INDICATOR
         MODESET EXTKEY=ZERO,     SET KEY TO ZERO                      X
               SAVEKEY=KEY,       SAVE PROBLEM PROGRAM KEY             X
               WORKREG=3          MODESET WORK REGISTER
         L     R2,SAVER2          RESTORE R2 FROM SAVEAREA
         BR    R2
* RESET JSCB AUTHORIZATION (UN-AUTHORIZE)                             *
AUTHOFF  EQU   *                    TURN ON JSCB AUTHORIZATION
         ST    R2,SAVER2            STORE R2 INTO SAVEAREA
         MODESET KEYADDR=KEY,       RESET KEY THAT WAS SAVED           X
               WORKREG=3            MODESET WORK REGISTER
         MODESET MODE=PROB        TURN ON PSW PROBLEM STATE INDICATOR
         AUTH  OFF                TURN OFF AUTHORIZATION
         L     R2,SAVER2          RESTORE R2 FROM SAVEAREA
         BR    R2                 RETURN
* STORAGE AND WORK AREAS                                              *
         DS    0F
         DC    CL16'+++ SAVEAREA +++'
SAVEAREA DS    18F               SAVE REGISTER AREA
SV1      DS    F'0'              SAVE R1 COUNTER AU RECORDS PER BLOCKS
SV2      DS    F'0'              SAVE R2 COUNTER TSB COPIEB
         DC    CL16'+++ SAVEADDR +++'
SAVER2   DS    F
SAVETCAS DS    F
SAVEASCB DS    F
SAVECSCB DS    F
SAVEOUCB DS    F
FIRSTTSB DS    F
SAVETSB  DS    F
SAVETSBX DS    F
TSOUSERS DS    F
SPECID   DC   CL8'LOGON   '
ONE      DC    H'1'
ZERO     DC    H'0'
TWELVE   DC    H'12'
KEY      DS    X
ISPFFLAG DC    CL1'N'
BLKCNT   DS    F
R15LJ    DS    F
D8       DC    CL4'0008'
TIME1    DS    CL6
         DC    CL2' '
UNPK1    DS    CL8
TIME2    DS    0CL8
CLBHH    DS    CL2
         DC    CL1':'
CLBMM    DS    CL2
         DC    CL1':'
CLBSS    DS    CL2
         DS    0D
DOUBLE   DS    D
EDITWORD DS    D
EDITRC   DS    D
SPACES   DC    CL14' '
         DC    CL5'<QUES'
ZEROES   DC    CL8'00000000'
         DS    0F
USERID   DS    CL8
FLDLIST  DC    A(3)
         DC    CL8'PGMRNAME'
         DC    CL8'DFLTGRP '
         DC    CL8'LJTIME  '
XTRTADDR DS    XL4
*  USED IN THE CALLING LIST TO "ISPLINK" AND/OR WARNING PANELS        *
CONTROL  DC    C'CONTROL '
DISPLAY  DC    C'DISPLAY '
ERRORS   DC    C'ERRORS  '
GETMSG   DC    C'GETMSG  '
LMSG     DC    C'LONGMSG '
PANEL    DC    C'        '
PANEL1   DC    C'AUTSO002'
PANEL2   DC    C'AUTSOERR'
RETURN   DC    C'RETURN  '
SETMSG   DC    C'SETMSG  '
VDEFINE  DC    C'VDEFINE '
VREPLACE DC    C'VREPLACE'
VRESET   DC    C'VRESET  '
ICHAR    DC    C'CHAR    '
IL8      DC    F'8'
IL14     DC    F'14'
IL45     DC    F'45'
IL1440   DC    F'1440'                              24X80
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
*IL3440   DC    F'3440'                             43X80
*  AUREC1 IS FORMATTED AND MOVED 18 TIMES TO AUDATA, (18X80) BYTES    *
         DC    CL7'AUREC1 '
P1       DC    CL1' '
AUREC1   DS    CL80
IAUDATA  DC    CL8'AUDATA  '
AUBLANK  DC    CL1' '
AUDATA   DS    CL1440                                24X80
*****************************************************************
* IF YOU NEED THIS ISPF DIALOG TO SUPPORT 43X80 TERMINALS       *
* UNCOMMENT THE FOLLOWING STATEMENT. BE SURE TO COMMENT OUT THE *
* INSTRUCTION ABOVE THESE COMMENTS.                             *
* IF YOU NEED BOTH 24X80 & 43X80 SUPPORT PLEASE SEE THE COMMENTS*
* ABOVE IN MY PROLOG.                                           *
*****************************************************************
*AUDATA   DS    CL3440                               43X80
*  ISPF SYMBOLIC NAME-LIST USED BY VDEFINE                            *
IVARS1   DS    0CL86
         DC    C'('
ISYSTEM  DC    C'SYSTEM '
IERRPNL  DC    C'ERRPNL '
IPROC    DC    C'PROC   '
ILOGON   DC    C'LOGON  '
ILOGMODE DC    C'LOGMODE'
IMODULE  DC    C' MODULE'
IMSG     DC    C' MSG   '
IPTERM   DC    C'PTERM  '
IRC      DC    C'RC     '
ITABLE1  DC    C'TABLE1 '
ITBSRVC  DC    C'TBSRVC '
ITRANX   DC    C'TRANX  '
         DC    C')'
VARS1    DS    0CL96
SYSTEM   DS    CL8
ERRPNL   DS    CL8
LPROC    DS    CL8
LOGON    DS    CL8
LOGMODE  DC    CL8'        '
MODULE   DS    CL8
MSG      DC    CL8'AUTSO   '
PTERM    DC    CL8'        '
RC       DS    CL8
TABLE1   DC    CL8'**NONE**'
TBSRVC   DS    CL8
TRANX    DS    CL8
IVARS2   DS    0CL16
         DC    CL8'(LNKDATE'
         DC    CL8' SOURCE)'
VARS2    DS    0CL28
LNKDATE  DS    CL14
SOURCE   DS    CL14
IZCMD    DC    CL8'ZCMD    '
ZCMD     DS    CL45
*  ISPF MESSAGES FOR DISPLAY AND LOGGING                              *
AUTSO000 DC   C'000'
AUTSO001 DC   C'001'
AUTSO002 DC   C'002'
AUTSO003 DC   C'003'
AUTSO004 DC   C'004'
AUTSO005 DC   C'005'
AUTSO006 DC   C'006'
AUTSO007 DC   C'007'
AUTSO008 DC   C'008'
AUTSO009 DC   C'009'
         LTORG
*  RACF EXTRACT RESULTS                                               *
EXTOUT   DSECT
*        DS    XL4
UNAMEL   DS    XL4
UNAME    DS    CL20
DFLTGRPL DS    XL4
DFLTGRP  DS    CL8
LJTIMEL  DS    XL4
LJTIME   DS    CL4
*  SYSTEM CONTROL BLOCKS                                              *
         CVT   DSECT=YES
         IHAASCB
         IKTTCAST
         IEECHAIN
         IKJTSB EXT=YES
         IRAOUCB
         END

JCL TO ASSEMBLE AND LINK AUTSO

//**********************************************************************
//*   MVS/XA ASSEMBLE AND LINK-EDIT "AUTSO":                           *
//*              JCL SOURCE: SY34904.HK.CNTL(AUTSO)                    *
//**********************************************************************
//ASM     EXEC PGM=IEV90,
//        PARM=(LIST,'LINECOUNT(66)',NODECK,OBJECT)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR          <--- SYSTEM MACLIB
//         DD  DSN=SYS1.AMODGEN,DISP=SHR         <--- SYSTEM MAPPINGS
//         DD  DSN=MACRO.LIBRARY,DISP=SHR     <-- AUTH & MOVELONG MACRO
//SYSLIN   DD  DSN=&&OBJSET,DISP=(NEW,PASS),     <--- ASSEMBLED OBJECT
//             SPACE=(80,(200,50)),UNIT=SYSDA         PASS TO LINK-EDIT
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(3,3))
//SYSPUNCH DD  DUMMY
//SYSIN    DD  DSN=SOURCE.LIBRARY(AUTSO),  < SOURCE
//             DISP=SHR
//*
//LKED    EXEC PGM=IEWL,COND=(0,LT,ASM),REGION=1024K,
//             PARM='LIST,LET,XREF,MAP'
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)    <--- OBJECT INPUT
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=ISPLLIB.LIBRARY(AUTSO), <--- LOADLIB
//             DISP=SHR
//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR         <--- SYSTEM MODS
//         DD  DSN=SYS1.MACLIB,DISP=SHR          <-- SYSTEM MACROS
//         DD  DSN=SYS1.AMODGEN,DISP=SHR         <-- SYSTEM MACROS

AUTSO00 MESSAGE MEMBER

AUTSO000 ' '                 .ALARM = YES .HELP = *
' '

AUTSO001 ' '                 .ALARM = YES .HELP = *
'&TBSRVC MACRO ISSUED RC+&RC USING PANEL &ERRPNL CONTACT SYSTEMS'

AUTSO002 ' '                 .ALARM = YES .HELP = *
'&TBSRVC ISSUED RC=&RC USING PANEL &ERRPNL CONTACT SYSTEMS'

AUTSO003 ' '                 .ALARM = YES .HELP = *
' '

AUTSO004 ' '                 .ALARM = YES .HELP = *
' '

AUTSO005 ' '                 .ALARM = YES .HELP = *
'&SOURCE WAS NOT FOUND (LOGON HAS NOT BEEN COMPLETED)'

AUTSO006 ' '                 .ALARM = YES .HELP = *
'&SOURCE LOCATED (LOGON HAS BEEN COMPLETED), SEE 1ST ENTRY BELOW'

AUTSO007 ' '                 .ALARM = YES .HELP = *
' '

AUTSOERR PANEL

)ATTR
 $ TYPE(TEXT)   INTENS(LOW)  COLOR(RED)
 | TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)  COLOR(YELLOW)
 @ TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)  COLOR(WHITE)
)BODY LMSG(LONGMSG)
%---------------------active users on tso ispf error panel ---------------------
+
$* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
$* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
$* *                                                                         * *
$* * A SEVERE ERROR was encountered in this ISPF/PDF Dialog, any attempt   $ * *
$* * to continue with the dialog could result in additional errors or an   $ * *
$* * ISPF subtask abend.  Contact your systems programming group           $ * *
$* * and relay the diagnostic message below:                               $ * *
$* *                                                                         * *
$* *+------------------------ CALLED ISPF ROUTINE --------------------------$* *
$* *                                                                         * *
$* *%AUTSO ROUTINE|TBSRVC  %ISSUED RC =|RC% CURRENT ISPF TABLE IS|table1  + $* *
$* *                                                                         * *
$* * ------------------- DIAGNOSTIC/CORRECTIVE MESSAGE --------------------- * *
$* *                                                                         * *
$* *@LONGMSG                                                                $* *
$* *                                                                         * *
$* *%MODULE|MODULE  +%ASSEMBLE DATE and TIME|LNKDATE        +                * *
$* *%Press ENTER key or END to exit this ISPF/PDF dialog                    $* *
$* *                                                                         * *
$* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
$* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
)INIT
 &AMT = 'PAGE'
)PROC
)END

AUTSO002 PANEL

)ATTR
 |  TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)
 $  TYPE(OUTPUT)  INTENS(HIGH) COLOR(PINK)  JUST(LEFT)  CAPS(ON)
 #  AREA(DYNAMIC) SCROLL(OFF)  EXTEND(ON)
)BODY
%AUTSO -----&AMTACT -------- ACTIVE TSO USERS DIALOG --------------------- AUTSO
+COMMAND%===>_ZCMD                                            +SCROLL%===>_AMT +
%
LOGON    TERMINAL PROC     RACF USER NAME       --TIME-- DFLTGRP  LOGMODE  SPF |
#AUDATA -----------------------------------------------------------------------#
+HIT%END+TO EXIT+OR%ENTER+TO EXTRACT MORE ACTIVE TSO USERS ON$SYSTEM  +
+
)INIT
)PROC
)END


Bruce T Chalmers
Senior Systems Programmer
USAir Inc (USA)                                                                    c Xephon 1994

