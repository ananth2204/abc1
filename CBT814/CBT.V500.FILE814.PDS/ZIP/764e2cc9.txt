Job submission using other access-ids

The design of most access control software such as RACF and
CA-TOP SECRET is usually based on the access-id that is set up
for each user of the system. For batch jobs, the access-id is either
derived from the submitting user's access-id or from the USER or
GROUP parameter specified on the job statement or from the job
name itself. The derived access-id is then used to determine the
submitted job's access authority. The submitted job will
automatically have access to all files and resources permitted for
the derived access-id (not the submitting user's access-id). For
obvious security reasons, users are usually restricted from
submitting jobs specifying another user's access-id on the USER
or the GROUP parameter.

However, in situations like vacation periods or temporary project
assignments, a user may have to be allowed to submit jobs using
another user's access-id, ie to act as a surrogate user for the user
that is on vacation or transferred to another project temporarily.
Both RACF and CA-TOP SECRET have similar standard
procedures to set up surrogate users.

The following summarizes the different procedures used by
RACF and CA-TOP SECRET to define a surrogate user. With
CA-TOP SECRET it is also possible, but not recommended, to
set up a super-surrogate user.

definING surrogate users under RACF 1.9

To define users that need to have surrogate users enter:

      RDEFINE SURROGAT execution-userid.SUBMIT
          UACC(NONE) OWNER(execution-userid)

For example:

      RDEFINE SURROGAT ALICE.SUBMIT
          UACC(NONE) OWNER(DEPT)

ALICE is now allowed to have surrogate users.

To define surrogate users (for execution users) enter:

      PERMIT execution-userid.SUBMIT CLASS(SURROGAT)
          ID(surrogate-userid) ACCESS(READ)

For example:

      PERMIT ALICE.SUBMIT CLASS(SURROGAT)
          ID(BOB) ACCESS(READ)

BOB is now a surrogate for ALICE.

To list surrogate users for execution users enter:

      RLIST SURROGAT execution-userid.SUBMIT AUTHUSER

For example:

      RLIST SURROGAT ALICE.SUBMIT AUTHUSER

lists all authorized surrogates for ALICE.

To activate the SURROGAT class:

      SETROPTS CLASSACT(SURROGAT)

definING surrogate users under CA-TOP SECRET

With CA-TOP SECRET, any user can assign surrogates by
entering:

      TSS PER(surrogate-userid) ACID(execution-userid)

For example:

      TSS PER(BOB) ACID(ALICE)

BOB is now a surrogate for ALICE.

The surrogate function is automatically active, ie there is no need
to activate the surrogate class. Additionally, FOR or UNTIL
keywords can be specified to define the number of days allowed
for the surrogate (after the expiry date, the surrogate authority will
be automatically revoked).

For example:

      TSS PER(BOB) ACID(ALICE) FOR(5)

will make BOB a surrogate for ALICE for five days only.
Surrogate users can be listed using the standard LIST command,
for example:

      TSS LIS(ALICE) DATA(ALL)

A super-surrogate can be defined to submit jobs for any user by
entering:

      TSS ADD(surrogate-userid) NOSUBCHK

For example:

      TSS ADD(BOB) NOSUBCHK

No job submission test check will be done for BOB.

The above procedures both require the surrogate users to be pre-
defined by the security administrator or the users that need
surrogates. In emergency situations or when the security
administrator is not available (usually at 3 am) it may not be
possible to define surrogate users (to submit a job to fix up a
production file for example).

The following two programs have been written to show how they
can be executed in batch or called by a TSO user to perform
surrogate functions. PWLROUT3 has been written to run under
CA-TOP SECRET Version 4.2. This program basically changes
the active ACEE anchored off the master ACEE built by CA-
TOP SECRET for each address space. When the active ACEE is
present, it will be used by CA-TOP SECRET to verify all security
calls related to the address space. This will only work if the
address space (ie a TSO user or an executing batch job) supports
only one user at a time. Since CA-TOP SECRET Version 4.3,
TCB level security (ie the ACEE anchored off TCBSENV) will
always be checked by CA-TOP SECRET prior to checking the
master ACEE for each address space (ie the ACEE anchored off
ASXBSENV), which is the way that RACF has been working.
Therefore PWLROUT4, which was written to work under RACF,
will now also work for CA-TOP SECRET Version 4.3.

Source listing for program PWLROUT3

PWLROUT3 PWLINIT
* RACROUTE TO SWITCH TO NEW USER (ADD ACTIVE ACEE TO MASTER ACEE)
* THIS VERSION FOR CA-TOP SECRET V4.2 ONLY:
*   AN ACTIVE ACEE IS STORED IN THE MASTER ACEE (ASXBSENV). THIS ACTIVE
*   ACEE WILL BE USED BY CA-TOP SECRET V4.2 FOR ADDRESS SPACES THAT DO
*   NOT SUPPORT TCB LEVEL SECURITY.
         LTR   R2,R1
         BZ    ERREXIT1                NO INPUT PARM
         MODESET   MODE=SUP
         MODESET   KEY=ZERO
         L     R2,0(,R2)
         LA    R2,2(,R2)
         $#FIND REC=(R2),CHAR=('RESTORE=YES','RES=Y')
         LTR   R1,R1
         BZ    PARM10
         OI    FLAG1,RESTORE           ZERO OUT ACTIVE ACEE
         B     CLOSE90
PARM10   DS    0H
         $#FIND REC=(R2),CHAR=('DEBUG=YES','DEBUG=Y')
         LTR   R1,R1
         BZ    PARM20
         OI    FLAG1,DEBUG             DEBUG OPTION
PARM20   DS    0H
         $#FIND REC=(R2),CHAR=('SUBMIT=YES','SUB=Y')
         LTR   R1,R1
         BZ    PARM30
         OI    FLAG1,SUBMIT            SUBMIT JOB TO INTRDR
PARM30   DS    0H
         $#FIND REC=(R2),CHAR=('NEWUSER=','NU=')
         LTR   R1,R1
         BZ    ERREXIT2                NEW USER NOT SPECIFIED
         MVC   NEWUSER+1(7),0(R1)
         $#COUNT FIELD=NEWUSER+1,STOP=(' '),MAX=7
         STC   R1,NEWUSER
         USING SAFP,R8                 ADDRESS PARMLIST
         TM    FLAG1,DEBUG
         BNO   OPEN90                  DEBUG?
         OPEN  (ERRMSG,OUTPUT)         YES. OPEN ERRMSG FILE.
OPEN90   DS    0H
         BAL   R7,CREATE               CREATE ACEE FOR NEW USER
         LTR   R15,R15
         BZ    NEXT
         WTO   'PWLROUT3A - ERROR ON CREATE',ROUTCDE=11
NEXT     DS    0H
         LA    R8,RACREAT+4            POINT TO RETURN CODES
         BAL   R7,PUT                  WRITE OUT RETURN CODES
         TM    FLAG1,DEBUG             DEBUG?
         BNO   CLOSE90
         CLOSE ERRMSG
CLOSE90  DS    0H
         L     R1,PSAAOLD-PSA(0)
         L     R1,ASCBASXB-ASCB(,R1)
         L     R1,ASXBSENV-ASXB(,R1)
         TM    FLAG1,RESTORE           RESTORE SPECIFIED?
         BO    RESTOR10
         MVC   X'D0'(4,R1),0(R3)       ADD NEW ACEE TO MASTER ACEE
         B     RESTOR90
RESTOR10 DS    0H
         XC    X'D0'(4,R1),X'D0'(R1)   RESET ACTIVE ACEE POINTER
RESTOR90 DS    0H
         MODESET   KEY=NZERO
         MODESET   MODE=PROB
         TM    FLAG1,SUBMIT            SUBMIT SPECIFIED?
         BNO   EXIT                    NO
*INVOKE IEBGENER TO SUBMIT JCL WITH THE NEW ACEE.
         LINK  EP=IEBGENER,PARAM=(OPT,DDLIST),VL=1
         B     EXIT
PUT      DS    0H
         TM    FLAG1,DEBUG
         BNOR  R7
         MVC   PRINT(L'MSG1),MSG1
         $#SNAP  PRINT+L'MSG1,SAFPRRET,TRTAB-240        RETURN CODE
         MVC   PRINT+L'MSG1+10(L'MSG2),MSG2
         $#SNAP  PRINT+L'MSG1+10+L'MSG2,SAFPRREA,TRTAB-240 REASON CODE
         PUT   ERRMSG,PRINT
         BR    R7
CREATE   DS    0H
         LA    R3,UACEE
RACREAT  RACROUTE  REQUEST=VERIFY,                                     X
               USERID=NEWUSER,ACEE=(3),                                X
               PASSCHK=NO,                                             X
               ENVIR=CREATE,                                           X
               WORKA=WORKA,RELEASE=1.9
         BR    R7
ERREXIT1 DS    0H
         WTO   'PWLROUT3A - INPUT PARMS NOT PRESENT',ROUTCDE=11
         B     EXIT
ERREXIT2 DS    0H
         WTO   'PWLROUT3B - NEWUSER MUST BE SPECIFIED',ROUTCDE=11
         B     EXIT
UACEE    DS    F
OPT      DC    H'0'
DDLIST   DC    H'0'
TRTAB    DC    C'0123456789ABCDEF'
NEWUSER  DC    XL1'7',CL7' '
PASSWORD DC    XL1'8',CL8'        '
FLAG1    DC    XL1'00'
DEBUG    EQU   X'80'
RESTORE  EQU   X'40'
SUBMIT   EQU   X'20'
WORKA    DS    CL512
PRINT    DC    CL80'  '
MSG1     DC    C'RACROUTE RETURN CODE = '
MSG2     DC    C'REASON CODE = '
FILEIN   DCB   DDNAME=FILEIN,DSORG=PS,MACRF=(GM)
ERRMSG   DCB   DDNAME=ERRMSG,DSORG=PS,MACRF=(PM)
         ICHSAFP
         IHAPSA
         IHAASCB
         IHAASXB
         END   PWLROUT3

Examples to invoke PWLROUT3

The following can be executed to submit a job internally using a
new access-id ALICE:

//SURROGAT JOB  ,BOB,CLASS=A,MSGCLASS=A,USER=BOB
//* THIS JOB IS ORIGINALLY SUBMITTED WITH AN ACID CALLED BOB
//STC EXEC PGM=PWLROUT3,
//         PARM=('NEWUSER=ALICE','SUBMIT=YES')
//* PWLROUT3 IS INVOKED TO CHANGE THE TCB LEVEL ACID TO ALICE
//STEPLIB DD DSN=your.apflib,DISP=SHR
//FILEOUT DD SYSOUT=*,LRECL=80,BLKSIZE=3200  IF DEBUG=YES SPECIFIED
//SYSPRINT DD SYSOUT=*
//ERRMSG   DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)
//SYSUT2 DD SYSOUT=(A,INTRDR)
//SYSIN DD DUMMY
//SYSUT1  DD  DATA,DLM=XY
//* THE FOLLOWING JOB WILL BE SUBMITTED WITH A NEW ACID CALLED ALICE
//JOB1   JOB ,LEE,CLASS=A,MSGCLASS=R,TIME=(,5)
      .
  JCL statements for JOB1
      .
XY  END OF JOB1

PWLROUT3 can also be called from TSO by an authorized user.
If user BOB wants to switch to a new access-id ALICE, enter:

      CALL 'your.apflib(PWLROUT3)' 'NEWUSER=ALICE'

After entering the above command, any jobs submitted by BOB
will be assigned the new access-id ALICE (instead of BOB).

To switch back to BOB's own access-id, enter:

      CALL 'your.apflib(PWLROUT3)' 'RESTORE=YES'

Source listing for program PWLROUT4

PWLROUT4 PWLINIT
* RACROUTE TO SWITCH TO NEW USER
* THIS VERSION FOR BOTH RACF AND CA-TOP SECRET V4.3
*  DIFFERENCES WITH PWLROUT3 (CA-TOP SECRET V4.2):
*     BOTH RACF AND CA-TOP SECRET V4.3 WILL USE ACEE STORED IN TCBSENV
*     IF NO ACEE IS SPECIFIED ON THE RACROUTE CALLS. IF NO ACEE
*     STORED IN TCBSENV, THE ACTIVE ACEE WILL BE USED.
*     ACTIVE ACEE USED BY CA-TOP SECRET 4.2 IS DROPPED IN 4.3.
         LTR   R2,R1
         BZ    ERREXIT1                NO INPUT PARM
         MODESET   MODE=SUP
         MODESET   KEY=ZERO
         L     R2,0(,R2)
         LA    R2,2(,R2)
         $#FIND REC=(R2),CHAR=('DEBUG=YES','DEBUG=Y')
         LTR   R1,R1
         BZ    PARM20
         OI    FLAG1,DEBUG             DEBUG OPTION
PARM20   DS    0H
         $#FIND REC=(R2),CHAR=('SUBMIT=YES','SUB=Y')
         LTR   R1,R1
         BZ    PARM30
         OI    FLAG1,SUBMIT            SUBMIT OPTION
PARM30   DS    0H
         $#FIND REC=(R2),CHAR=('NEWUSER=','NU=')
         LTR   R1,R1
         BZ    ERREXIT2                NEW USER NOT SPECIFIED
         MVC   NEWUSER+1(7),0(R1)
         $#COUNT FIELD=NEWUSER+1,STOP=(' '),MAX=7
         STC   R1,NEWUSER              STORE SIZE OF USERID
         USING SAFP,R8                 ADDRESS PARMLIST
         TM    FLAG1,DEBUG
         BNO   OPEN90
         OPEN  (ERRMSG,OUTPUT)
OPEN90   DS    0H
         BAL   R7,CREATE               CREATE NEW ACEE
         LTR   R15,R15
         BZ    NEXT
         WTO   'PWLROUT4B - ERROR ON CREATE',ROUTCDE=11
NEXT     DS    0H
         LA    R8,RACREAT+4
         BAL   R7,PUT
         TM    FLAG1,DEBUG
         BNO   CLOSE90
         CLOSE ERRMSG
CLOSE90  DS    0H
         MODESET   KEY=NZERO
         MODESET   MODE=PROB
*INVOKE IEBGENER TO SUBMIT JOB WITH THE NEWLY CREATED ACID IF
*    SUBMIT=YES IS SPECIFIED.
         TM    FLAG1,SUBMIT
         BNO   EXIT
         LINK  EP=IEBGENER,PARAM=(OPT,DDLIST),VL=1
         B     EXIT
PUT      DS    0H
         TM    FLAG1,DEBUG
         BNOR  R7
         MVC   PRINT(L'MSG1),MSG1
         $#SNAP  PRINT+L'MSG1,SAFPRRET,TRTAB-240        RETURN CODE
         MVC   PRINT+L'MSG1+10(L'MSG2),MSG2
         $#SNAP  PRINT+L'MSG1+10+L'MSG2,SAFPRREA,TRTAB-240 REASON CODE
         PUT   ERRMSG,PRINT
         BR    R7
CREATE   DS    0H
         LA    R3,UACEE
RACREAT  RACROUTE  REQUEST=VERIFY,                                     X
               USERID=NEWUSER,                                         X
               PASSCHK=NO,                                             X
               ENVIR=CREATE,                                           X
               WORKA=WORKA
         BR    R7
ERREXIT1 DS    0H
         WTO   'PWLROUT4A - INPUT PARMS NOT PRESENT',ROUTCDE=11
         B     EXIT
ERREXIT2 DS    0H
         WTO   'PWLROUT4B - NEWUSER MUST BE SPECIFIED',ROUTCDE=11
         B     EXIT
FLAG1    DS    F
DEBUG    EQU   X'80'
SUBMIT   EQU   X'40'
UACEE    DS    F
OPT      DC    H'0'
DDLIST   DC    H'0'
NEWUSER  DC    XL1'5',CL8' '         LENGTH OF USERID, USERID
WORKA    DS    CL512
PRINT    DC    CL80'  '
ERRMSG   DCB   DDNAME=ERRMSG,DSORG=PS,MACRF=(PM)
MSG1     DC    C'RACROUTE RETURN CODE = '
MSG2     DC    C'REASON CODE = '
TRTAB    DC    C'0123456789ABCDEF'
         ICHSAFP
         IHAPSA
         IHAASCB
         IHAASXB
         END   PWLROUT4

JCL required to invoke PWLROUT4 is identical to that for
PWLROUT3.

Source listing for macro $#FIND

         MACRO
&LBL     $#FIND   &REC=,&CHAR=,&RECLEN=72
.*  MACRO TO FIND CHARACTER STRING
         AIF   ('&REC' EQ '').ERR1
         AIF   ('&REC'(1,1) EQ '(').ISREG1
         LA    R1,&REC
         AGO   .XM02
.ISREG1  ANOP
         LA    R1,0&REC
.XM02    ANOP
         AIF   ('&CHAR' EQ '').ERR2
&T1      SETA  N'&CHAR
         AIF   (&T1 EQ 1).CHAROK,
               (&T1 EQ 2).CHAROK
         MNOTE 12,'$#FIND ONLY SUPPORTS 1 OR 2 CHAR STRINGS'
         MEXIT ,
.CHAROK  ANOP  ,
         B     FN01&SYSNDX
C1&SYSNDX DC   C&CHAR(1)
         AIF   (&T1 EQ 1).NOCHAR2
C2&SYSNDX DC   C&CHAR(2)
.NOCHAR2 ANOP  ,
&L11     SETA  K'&CHAR(1)
&L11     SETA  &L11-2
&L1      SETC  '&L11'
         MNOTE ' &L11  &L1  '
         AIF   (&T1 EQ 1).NOL22A
&L22     SETA  K'&CHAR(2)
&L22     SETA  &L22-2
&L2      SETC  '&L22'
         MNOTE ' &L22  &L2  '
.NOL22A  ANOP  ,
FN01&SYSNDX DS 0H
         LA    R15,&RECLEN-&L11            COUNTER
FN02&SYSNDX DS 0H
         CLC   C1&SYSNDX,0(R1)
         BE    FN03&SYSNDX
         AIF   (&T1 EQ 1).NOCHAR2B
         CLC   C2&SYSNDX,0(R1)
         BE    FN04&SYSNDX
.NOCHAR2B ANOP ,
         LA    R1,1(,R1)
         BCT   R15,FN02&SYSNDX
         SLR   R1,R1
         B     FN99&SYSNDX
FN03&SYSNDX DS 0H
         LA    R1,&L1.(,R1)
         B     FN99&SYSNDX
         AIF   (&T1 EQ 1).NOCHAR2C
FN04&SYSNDX DS 0H
         LA    R1,&L2.(,R1)
         B     FN99&SYSNDX
.NOCHAR2C ANOP ,
FN99&SYSNDX DS 0H
.ERR1    ANOP
.ERR2    ANOP
.MEND    MEND

Source listing for macro $#SNAP

         MACRO
         $#SNAP &TO,&FROM,&TRTAB
.*
.* MACRO TO TRANSLATE HEX STRING
.*
         UNPK  &TO.(9),&FROM.(5)
         MVI   &TO+8,X'40'
         TR    &TO.(8),&TRTAB
.EXIT    MEXIT
         MEND

Source listing for macro $#COUNT

         MACRO
&LBL     $#COUNT  &FIELD=,&STOP=,&MAX=
.*
.* MACRO TO COUNT SIZE OF CHARACTER STRING
.*
         AIF   ('&FIELD' EQ '').ERR1
         AIF   ('&FIELD'(1,1) EQ '(').ISREG1
         LA    R14,&FIELD
         AGO   .XM02
.ISREG1  ANOP
         LA    R14,0&FIELD
.XM02    ANOP
         AIF   ('&STOP' EQ '').ERR2
         AIF   ('&MAX' EQ '').ERR2
         B     CN01&SYSNDX
C1&SYSNDX DC   H'&MAX'
CN01&SYSNDX DS 0H
         LA    R1,0
CN02&SYSNDX DS 0H
         CLI   0(R14),C&STOP(1)
         BE    CN09&SYSNDX
         LA    R1,1(R1)
         LA    R14,1(R14)
         CH    R1,C1&SYSNDX              REACH MAX?
         BE    CN03&SYSNDX
         B     CN02&SYSNDX
CN03&SYSNDX DS 0H
         LA    R1,0
CN09&SYSNDX DS 0H
.ERR1    ANOP
.ERR2    ANOP
.MEND    MEND

Source listing for macro PWLINIT

         MACRO
&L       PWLINIT
.* INIT MACRO FOR NON-RENT CODE
.*
&L       CSECT ,
INIT_A&SYSNDX DS 0H
R0       EQU   0
         etc
R15      EQU   15
         USING *,R15                    TEMPORARY
         B     INIT_B&SYSNDX
         DC    AL4(INIT_B&SYSNDX-INIT_A&SYSNDX-8)
         DC    CL23'&L   &SYSDATE &SYSTIME'
         SPACE
INIT_B&SYSNDX DS 0H
         STM   R14,R12,12(R13)
         LR    R1,R13                   WORK REGISTER
         CNOP  0,4
         BAL   R13,*+4+72               SET UP R13
         DC    18F'0'                   SAVE AREA
         LA    R13,0(,R13)              IN CASE 31-BIT
         ST    R1,4(,R13)               SAVE LAST IN THIS
         ST    R13,8(,R1)               SAVE THIS IN LAST
         USING *-84,R13
         B     INIT_C&SYSNDX
         DROP  R15
         SPACE
EXIT     DS    0H
         LA    R15,0                    STORE RETURN CODE
RC       EQU   *-1,1                    RETURN CODE
         L     R14,4(,R13)              PREV SAVE AREA
         STM   R0,R1,20(R14)            SAVE R0,R1 IN PREV SAVE AREA
         L     R13,4(,R13)              RESTORE REG 13
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)
         BR    R14
*
INITMODE DC    H'0'
INIT_C&SYSNDX MVI RC,0                  ENSURE RETURN CODE = 0
         L     R1,4(,R13)
         LM    R14,R2,12(R1)            RESTORE LINKAGE REGS
         AGO   .MEND
.MEND    ANOP
         MEND

Both PWLROUT3 and PWLROUT4 are required to be APF-
authorized and, if they are called from TSO, they must be added
to the AUTHPGM list in IKJTSOxx. Because of the sensitive
nature of both programs, they should only be used as a last resort
during emergencies and should be given FETCH access only to a
limited number of staff in the installation.

Peter W K Lee
Software Analyst (Canada)                                                   c Xephon 1994

