PDS upload/download facility

As PCs get more widespread, even among mainframe freaks, I
sometimes have a need for a quick download facility for PDSs.
This article describes a REXX program that makes this
download process easy.  But why all the fuss?  The PC 3270
emulation programs that support file transfer (at least those that
I know of), only accept PDS datasets if the members are
requested individually.  This makes it very time-consuming to
download or upload if your PDS contains many members.


How the program works

Here is an overview of what UPLOAD (for want of a better
name) does:

1      Verifies and checks that the PDS dataset name given as a
      parameter is valid.

2      Executes the TSO command:

      LISTDS pds MEMBERS

      and places the output in a REXX stem variable using the
      OUTTRAP REXX facility.

3      Loops through the stem variable and, for every member,
      creates two entries in two different stem output variables
      with the values:

      SEND   A:membername.MBR A:pds(membername) ASCII CRLF
      RECEIVE A:membername.MBR A:pds(membername) ASCII CRLF

      where pds and membername are substituted by their actual values.

4      Creates two sequential files:

      pds.UPLOAD
      pds.DOWNLOAD

      The first one contains the SEND commands and the second
      one contains the RECEIVE commands.

5      Cleans up and tells the user how many members were recognized.


How to use the facility

First of all you should have a PC of course, equipped with
some 3270 emulation package that supports file transfer using
the mainframe TSO program IND$FILE.

Here is the procedure for downloading a PDS:

1      Log-on to your TSO/ISPF system.  When you have
      decided which PDS to download, execute the REXX
      program:

      TSO %UPLOAD LIB(pds)

      where pds stands for the PDS dataset name.  When it has
      run successfully, switch to the ISPF menu 6 (TSO
      commands).

2      Switch to your PC session and transfer the
      pds.DOWNLOAD  file using the DOS 3270 emulator
      command:

      RECEIVE A:DOWNLOAD.BAT A:pds.DOWNLOAD ASCII CRLF

      This places your file in your A drive, which presumably is
      your diskette station. This has to be 'on-line' with a pre-
      formatted empty diskette.

3      Change your DOS prompt to your A drive using the DOS
      command:

      A:

4      Execute the DOS batch file you have just received using
      the DOS command:

      DOWNLOAD

5      From now on, the file transfer of every member of your
      PDS will take place until either your PDS has been
      downloaded or, if you are unlucky, the diskette runs out of space.

6      When it has transferred all the members, you transfer the
      other BAT file:

      RECEIVE A:UPLOAD.BAT  A:pds.UPLOAD  ASCII CRLF

      which you will need when you want to upload all your
      members at a later occasion.

Here is what you should do when uploading a PDS from your
diskette.

1      Pre-allocate a PDS on your system to contain the members.
      If you cannot use the same dataset name then remember
      the name when you get to step 3.  Be aware that a track
      (3380 type) can contain 46 directory blocks.  You should
      always allocate a minimum of one track for the directory.
      Assuming every directory entry takes up 12 bytes, then
      your one-track directory can contain 966 members.

2      Let your DOS prompt point to the A drive with your
      downloaded PDS members and the BAT files.

3      Perform a global replace of the PDS name in the UPLOAD
      BAT file if you cannot use the same dataset naming.

4      Log on to your host TSO/ISPF session and position it to
      the TSO Command Line (ISPF menu 6)

5      Switch to your PC session and activate the upload process
      by typing the DOS command:

      UPLOAD

6      Now you can (I hope) sit back and see the uploading take
      place until all the members are uploaded.

7      Eventually upload the BAT files too, but be aware that
      they have to be synchronized with the PDS content.


Program comments

I have written the program in a structured fashion.  Most of the
code comes from a REXX ISPF model skeleton that I use as
the basis for new REXXs.  You will see some subroutines
included that are not used.  I have included them only for your
convenience.  I strongly recommend you to use ISPF model
skeletons.  In that way you enforce some coding guidelines that
you might otherwise forget.

First of all, the program assumes that the PDS contains
EBCDIC data that should be converted to ASCII for PC editing
purposes or such like.  If your PDS contains load modules for
example, then do not use the ASCII CRLF keyword parameters
in the generated BAT files.  This feature could easily be
incorporated into the UPLOAD REXX either by requesting it
by a new KEYWORD parameter or by just looking at the PDS
characteristics.

Secondly, you should remove your TSO prefix:

      TSO PROFILE NOPREFIX

if you want the REXX to generate the pds.UPLOAD and
pds.DOWNLOAD files.  Otherwise they will be prefixed with
your TSO prefix.

Thirdly, always synchronize the content of the UPLOAD and
DOWNLOAD BAT files with the files with MBR extension
names.

Fourthly, the error handling in the REXX could have been
better.  You can surely enhance this yourself.

Unfortunately the directory information is lost in the download
process.  Thus version and release numbers, creation and
revision dates, number of records, and user-id information are
lost.  I have no idea how to easily incorporate that into the
REXX.  I have also experienced the situation of 3270 file
transfer tools making a global ENQ (DISP=OLD) on the host
PDSs.  If this bothers you, you may have to copy your PDS to
another PDS using DISP=SHR.


UPLOAD REXX

/* REXXTSO ---------------------------------------------------------
 *  Syntax for UPLOAD:
 *   %UPLOAD ? ! LIB(libdsn) ! LIST(listdsn) DEBUG(OFF/ON)
 *               -----------                       +++
 *  The underlined keywords are mandatory, the values that have '+'
 *  are default values.
 *  Other defaults are:
 *      listdsn     defaults to libdsn.UPLOAD and libdsn.DOWNLOAD
 *  Explanation:
 *      ?           gives this explanation.
 *      libdsn      is the name of the library to create the
 *                  UPLOAD/DOWNLOAD BAT files for.
 *      listdsn     is your own prefix name for the two sequential file
 *                  names to contain the
 *                       UPLOAD BAT file and the
 *                       DOWNLOAD BAT file.
 *      DEBUG       specifies that the user wishes to see the
 *                  internal trace of this exec.
 *  NOTE ========>  This may generate a lot of terminal output..
 *  Description of UPLOAD
 *   This exec is used for making PDS upload/download commands
 *   so every PDS member will be a DOS file when the resulting
 *   UPLOAD/DOWNLOAD BAT files are executed from the PC.
 *   (Those have first to be uploaded in order to make it work)
 *   This means that two files are created:
 *        a DOS BAT file containing SEND commands
 *        a DOS BAT file containing RECEIVE commands
 *   Be aware of which file names are created for output
 *   depending on your use of qualified (quoted) LIB dataset names.
 *________________________________________________________________ */
Arg Argstring
Signal On Novalue  /* Signal must be done in primary proc    */
Signal On Syntax
Signal On Halt
Call Init_exec
/* Trace must be set in primary procedure */
If debug = "ON" Then Trace 'r'
/*  INITIATE IDENTIFIERS                                     */
Call Keyword_Parm "LIB"
Call Keyword_Parm "LIST"

/* Check mandatory fields                                          */
If lib = " " Then
   Do
   zedlmsg = "Library name missing in command; Please reenter"
   Zrc = 8
   Call Eop
   End
If Length(lib) > 46 Then
   Do
   zedlmsg = "Library name in command too long; Please reenter"
   Zrc = 8
   Call Eop
   End
idsn = lib
/*     If a LIB is an unqualified dataset make it qualified:       */
/*        userid.lib                                               */
/*     as input dataset.                                           */
unquotds = Strip(idsn,'B',"'")
If Left(idsn,1)  ^= "'" Then
   Do
   lib    = "'"Sysvar("SYSUID")"."unquotds"'"
   End
Else
   Do
   lib    = lib
   End
/*     If a LIST is not specified then use the                     */
/*        userid.lib.UPLOAD and                                    */
/*        userid.lib.DOWNLOAD                                      */
/*     as output BAT files.                                        */
If list = " " Then list  = idsn
unquotds = Strip(list,'B',"'")
If Left(list,1)  ^= "'" Then
   Do
   listu  = "'"Sysvar("SYSUID")"."unquotds".UPLOAD'"
   listd  = "'"Sysvar("SYSUID")"."unquotds".DOWNLOAD'"
   End
Else
   Do
   listu  = unquotds".UPLOAD"
   listd  = unquotds".DOWNLOAD"
   End
/*     Allocate input datasets:                               */
/*       lib                                                  */
If Sysdsn(lib) = "OK" Then
   Call Command "ALLOC FI(LIB) DA("idsn") SHR REUSE", 0
Else
   Do
   zedlmsg = "Input file:" lib "does not exist."
   Zrc = 8
   Call Eop
   End
/*     Allocate output datasets:                              */
/*       listu and listd                                      */
If Sysdsn(listu) = "OK" Then
   Call Command "ALLOC FI(LISTU) DA("listu") SHR REUSE", 12
Else
   Call Command "ALLOC FI(LISTU) DA("listu") NEW CATALOG",
                "RECFM (F B) DSORG (PS) SP (1 5)",
                "TRACKS LRECL(100) BLKSIZE(6000) UNIT(SYSTSO)", 0
If zrc > 0 Then
   Do
   zedlmsg = "Output file:" listu " could not be allocated. RC = "zrc
   Zrc = 8
   Call Eop
   End
If Sysdsn(listd) = "OK" Then
   Call Command "ALLOC FI(LISTD) DA("listd") SHR REUSE", 12
Else
   Call Command "ALLOC FI(LISTD) DA("listd") NEW CATALOG",
                "RECFM (F B) DSORG (PS) SP (1 5)",
                "TRACKS LRECL(100) BLKSIZE(6000) UNIT(SYSTSO)", 0
If zrc > 0 Then
   Do
   zedlmsg = "Output file:" listd " could not be allocated. RC = "zrc
   Zrc = 8
   Call Eop
   End
/* Initialize variables                                    */
zrc = 0
i   = 0
gendate = Date('N')
/* Make date in a nice format                              */
/* for use as comments (REM commands) in the BAT files.    */
gendate = Left(gendate,2)Word(gendate,2)Right(gendate,2)
gentime = Time('N')
/* Initialize compounds.                                   */
/*   libmem for LISTDS lib MEMBERS output                  */
/*   batup for UPLOAD BAT commands                         */
/*   batdo for DOWNLOAD BAT commands                       */
libmem. = ""
libmem.0 = 0
batup.  = ""
batup.0  = 0
batdo.  = ""
batdo.0  = 0
/*   Main Logic                                            */
/*   Create the compound variable with member names.       */
Call Get_Members
If zrc > 0 Then
   Do
   zrc = 4
   Call Eop
   End
/*   Create compounds with BAT commands.                   */
Call Make_Bat_Commands
/*   Put the compounds into the output files.              */
/*   The subroutine make termination itself.               */
Call Put_Bat_Files
/*  End of Main Logic                                        */
Eop:
Call Close
If zrc > 0 Then Do
   Address ISPEXEC "SETMSG MSG(ISRZ000) COND"
   End
Exit
/*  Subroutines                                              */
/* Pick up all the member names from the input library.         */
Get_Members:
  x = Outtrap("libmem.")
  Call Command "LISTDS "idsn" MEMBERS", 0
  If Zrc > 0 Then
   Do
   zedlmsg = "Input file:" idsn " LISTDS error. RC = "zrc
   Zrc = 8
   Call Eop
   End
  x = Outtrap("OFF")
/* If compound variable has 7 lines, file is empty.             */
  If libmem.0 < 8 Then
   Do
   zedlmsg = "Input file:" lib " is empty."
   Zrc = 8
   Call Eop
   End
  Return Zrc
/* Make BAT SEND/RECEIVE commands in the output compounds.      */
Make_BAT_Commands:
  j = 1
  rem = "REM BAT file generated at Date: "gendate". Time: "gentime"."
  batup.0 = j
  batup.1 = rem
  batdo.0 = j
  batdo.1 = rem
  Do i = 7 to libmem.0
   member = Strip(libmem.i)
   unquotds = Strip(list,'B',"'")
   target  = Substr("A:"member".MBR  ",1,20)
   origin  = Substr("A:"unquotds"("member")",1,60)
   suffix  = "ASCII CRLF"
   sendcmd = "SEND "target" "origin" "suffix
   recvcmd = "RECEIVE "target" "origin" "suffix
   j = j + 1
   batup.0 = batup.0 + 1
   batup.j = sendcmd
   batdo.0 = batdo.0 + 1
   batdo.j = recvcmd
   End
  Return Zrc
/* Make BAT SEND/RECEIVE commands in the output compounds.      */
Put_BAT_Files:
   "EXECIO * DISKW LISTU (STEM batup. FINIS)"
   "EXECIO * DISKW LISTD (STEM batdo. FINIS)"
   zedlmsg = "Upload/Download BAT files created for "batdo.0-1,
             "Members."
   Zrc = 4
   Call Eop
  Return Zrc
/* Close: Here you should tidy up before leaving the exec       */
Close:
  Signal Off Syntax
  Signal Off Novalue
  Signal Off Error
  Zispfrc = Zrc
  Address Ispexec 'VPUT ZISPFRC SHARED'
/*   Put here any kind of cleanup activities. BUT they have to be  */
/*   in NATIVE format.                                             */
Address TSO "FREE FI(LISTU)"
Address TSO "FREE FI(LISTD)"
Address TSO "FREE FI(LIB)"
  If Debug ^= "OFF" Then,
     Do
       trace off
       Say
       Say "****************************"
       Say "*" Sysicmd "Ended RC =" zrc "*"
       Say "****************************"
       Say
     End
  Address ISPEXEC 'CONTROL DISPLAY REFRESH'
return
/*  REXX error handling routines                             */
Novalue:
  Signal Off Novalue
  Rc = 0
Syntax:
  Signal Off Syntax
  zrc = rc + 20000
  Call Error sigl
Return  /* End proc Novalue/Syntax */
Halt:
  Signal Off Halt
  zerrlm = 'Halt issued at line' sigl
Error:
  Signal Off Syntax
  Signal Off Novalue
  Signal Off Error
  Arg argsigl
  if datatype(argsigl) = 'NUM' then sigl = argsigl
  If cseline = 'CSELINE' !,
     cseline = ' ' then cseline = space(sourceline(sigl))
  Call Error_display sigl
  Call CLOSE /* Assumed to be the internal CLOSE procedure.          */
Exit Zrc
Error_display:
  Arg argsigl
  if datatype(argsigl) = 'NUM' then sigl = argsigl
  Address ISPEXEC,                    /* Save values for Error Hndler*/
             "VPUT (CSELINE ZRC ZERRMSG ZERRSM ZERRLM SIGL) SHARED"
  Call XERROR  sysicmd                /* Invoke ERROR handler        */
Return  /* End proc Error_display */
/* Call ISPF and perform Rc-check               */
/* Syntax: Call Ispfexec ispexec_string,Max_rc  */
/* eg:   Call Ispfexec "display panel(xxx)",8   */
ISPFEXEC:
  Trace off
  Arg Cseline, Ispf_MaxRc
  if Ispf_MaxRc = '' then Ispf_MaxRc = 8
  Address ISPEXEC Cseline
  Zrc = Rc
  If Zrc > Ispf_MaxRc then,
    Do
      Zrc = Min(Zrc,20)             /* Do not accept ISPF-Rc > 20 */
      Call Error_display sigl
      Call Close                    /* Close files and tables etc. */
      exit (Zrc)
    End
Cseline = ''   /* Reset Cseline */
Return Zrc /* End proc ispFexec */
/* Call TSO  and perform Rc-check               */
/* Syntax: Call Command command_string,Max_rc   */
/* eg:   Call Command "Alloc ds(test.clist)"    */
Command:
  trace off
  Arg Cseline, TSO_MaxRc
  if TSO_MaxRc = '' then TSO_MaxRc = 8
  Address TSO Cseline
  Zrc = Rc
  If Zrc > TSO_MaxRc then,
    Do
      Zrc = Min(Zrc,19999)         /* Do not accept TSO-Rc > 19999 */
      Call Error_display sigl
      Call Close                   /* Close files and tables etc.  */
      Exit Zrc
    End
Cseline = ''  /* Reset Cseline */
Return Zrc
/* interpret switch parameters */
switch_parm:
  trace off
  arg switch .
  If Find(Argstring,switch)^= 0 then,
     Do
       interpret switch '= switch'
       Argstring = Strip(Delword(Argstring,Find(Argstring,switch),1))
     End
  else interpret switch '= ""'
  if debug ^= '' then,
     Say '>>> Switch Parameter:' switch '=' value(switch)
return
/* Interpret keyword Parameters */
Keyword_Parm:
  Trace off
  Arg Keyword .
  If  Index(Argstring,Keyword'(') ^= 0 then,
     Do
       /* Find starting position of Keyword */
       W_S_Pos = Index(argstring,Keyword'(')
       W_Parm  = Substr(argstring,W_S_Pos)
       /* Find next ')' to delimit Keyword */
       W_E_Pos = Index(W_Parm,')')
       W_Parm  = left(W_Parm,W_E_Pos)
       /* Get value of Keyword */
       Parse Value W_Parm with '('Parm_val')'
       /* If value is a null string */
       If Space(Parm_val,0) = "''" then Parm_val = ""
       /* Assign value of Keyword to Keyword */
       Interpret Keyword '= Parm_val'
       /* Get rid of Keyword from parameter string */
       Argstring = Strip(Delstr(Argstring,W_S_Pos,length(W_Parm)))
     End
  Else interpret Keyword '= "" '
  if debug = 'ALL' ! debug = 'ON' then,
     Say '>>> Keyword Parameter:' Keyword '=' value(Keyword)
Return
/*  Initiate exec                                                  */
Init_exec:
Parse Upper Source . . Sysicmd .
If Word(Argstring,1) = '?' Then,
   Do  /* List top Comments of exec containing documentation */
     Do i=1 by 1 while(Substr(Sourceline(i),2,1) = '*')
        Say Left(Sourceline(i),71)
     End
     Exit 0
   End
Address ISPEXEC "CONTROL ERRORS RETURN"
If Rc^= 0 Then,
   Do
      Say Sysicmd': Required ISPF environment not active'
      exit (255)
   End
/* Check if DEBUG is OFF/ON.                   */
/*                   ^^^ Is default            */
Call Keyword_parm  'DEBUG'
If debug = " " Then
   Do
   Address ISPEXEC "VGET DEBUG SHARED"
   debug = "OFF"
   End
If debug ^= "OFF" Then
   Do
     Address ISPEXEC "CONTROL DISPLAY SM START(1)"
     Say
     Say "****************************"
     Say "*   " Sysicmd" CALLED           *"
     Say "****************************"
     Say
   End
Return
/* Check existence of Mandatory Parameters */
/* and nonexistence of excess Parameters   */
Parm_check:
  trace off
  Arg Mandatory  /* A string of names of mandatory parameters parsed */
  Parse value '12' with Zrc $missing Zerrsm Zerrmsg  /* init */
  M_num = words(Mandatory)
  if M_num > 0 then,
     Do i = 1 to M_num
       If value(word(Mandatory,i)) = '' then,
          $missing = $missing !! ' ' !! word(Mandatory,i)
     End
  If $missing ^= '' then,
     Do
       Cseline = 'Mandatory parameters missing:               ' !!,
                      '                  "' !! space($missing) !! '"'
       Zerrlm = 'Add missing parameters to the call to' sysicmd
       Call error sigl
     End
  /* Excess parameters - if any - assumed to be in 'argstring' */
  If Argstring ^= '' then,
     Do
      Cseline='Unrecognized arguments parsed to' sysicmd':' argstring
       Zerrlm = 'Remove Excess parameters from the call to' sysicmd
       Call error sigl
     End
  Zrc = 0
return


Peter Rosenberg
Systems Engineer
CRI (Denmark)                                          c Xephon 1991

