ISPF edit macro for multi-coloured parsing

Have you ever wished that the logic flow in your program
source could be highlighted whilst in edit or that different parts
of the source such as keywords and comments showed up in
different colours?  Well, this edit macro does just that using a
dynamic ISPF display and can be used with Assembler,
REXX, CLISTs, PL/I, and other similar languages.

Because of the constraints of the 3270 architecture it is not
possible to directly insert attribute bytes into the edit data.
This macro works by creating a dynamic area containing the
edit data you are viewing and adding colour attribute bytes
contextually. The effect (with a colour terminal) is to greatly
enhance the readability of the logic.

Procedural languages are coloured so that keywords show up in
yellow, operators in pink, external commands in red,
comments in blue, and the other text (mostly variables) in
green.  This display can then be scrolled exactly like a normal
edit but cannot be over-typed.  Pressing END/PF3 returns you
to the real edit display at the same position.

Assembler source is parsed to show labels in red, op codes in
yellow, operands in green, and comments in blue.  No change
is made to the edit data during this process.  With a
monochrome screen, less effect is seen as only high/low
intensity is available.   For maximum efficiency, only the part
of the code about to be displayed is parsed.

The scroll logic adapts itself to any screen size and will work
with split screens as well.  I cannot illustrate the effect with
only a monochrome typeset, but it is well worth experimenting
with.  The keyword list can easily be modified to suit tastes or
to target it more specifically at a particular language.

There are no limitations to using this REXX as an edit macro
other than the fact that, to be highlighted, keywords etc must
have a blank on each side to be replaced by attribute bytes in
the dynamic area.  This is because no changes are made to the
layout when parsing.  Such items in column one are treated as
if they have a blank before.

The type of parse (procedural or assembler) is decided by a
parameter passed to the macro or defaulted to depending on the
edit profile name used.  If the parameter is A or S the
assembler parse is used, otherwise the procedural parse is used.
If omitted the parameter defaults to the first character of the
edit profile name currently in effect.

To invoke, simply enter the name of the macro (for example
LP) in the edit command field when you have positioned the
edit display to the required starting point for the colour parse.
Optionally, override the parse type (for example LP A or LP
P).  Scroll up with PF7/UP and down with PF8/DOWN.
Pressing PF3/END will resume normal editing.

If a type parameter of N is entered then no line clean up will be
performed.  This increases the speed of the parse but will also
highlight keywords inside comments and literals.  This only
applies to procedural parsing.  You need not type in the code
for both parsers if you only require one.  Similarly you can
omit the clean-up routine.


LP SOURCE CODE

/* REXX : LIVE PARSE EDIT MACRO (OPTIONAL PARM OF TYPE)            */
/* THIS DISPLAYS A DYNAMIC ISPF PANEL WITH THE EDIT DATA PARSED UP */
/* TO SHOW THE KEYWORDS, OPERATORS, COMMMENT AND EXTERNAL COMMANDS */
/* IN DIFFERENT COLOURS (OR HIGH/LOW). THIS PANEL CAN BE SCROLLED. */
/* THE ASSEMBLER LANGUAGE PARSER IS USED IF TYPE PARAMETER IS SET  */
/* TO 'A' OR 'S', OTHERWISE A PROCEDURAL PARSER IS USED (REXX ETC).*/
/* IF TYPE IS OMITTED THE EDIT PROFILE NAME IS USED (1ST CHAR OF). */
/* IF TYPE IS 'N' THEN NO CLEAN UP IS DONE AFTER PROCEDURAL PARSE. */
/*******************************************************************/
ADDRESS ISREDIT "MACRO (TYPE)"          /* OPTIONAL TYPE PARAMETER */
ADDRESS ISREDIT "(PROF,LOCK) = PROFILE"   /* RETRIEVE EDIT PROFILE */
ADDRESS ISREDIT "(DSN) = DATASET"
ADDRESS ISREDIT "(MEM) = MEMBER"
IF TYPE = ' ' THEN                 /* IF NO TYPE PARM THEN USE THE */
   TYPE = SUBSTR(PROF,1,1)         /* FIRST CHAR EDIT PROFILE NAME */
ELSE
   TYPE = TRANSLATE(TYPE)          /* TYPE OF PARSE, S, A, NO, XXX */
IF MEM \= ' ' THEN
   MEM = '('|| MEM || ')'
CT = 0
KEY.0  = 35               /* PROCEDURAL    NUMBER IN KEYWORD LIST  */
KEY.1  = 'THEN '    ;   KEY.2  = 'ELSE '
KEY.3  = 'DO '      ;   KEY.4  = 'END '
KEY.5  = 'IF '      ;   KEY.6  = 'WHILE '
KEY.7  = 'UNTIL '   ;   KEY.8  = 'WHEN '
KEY.9  = 'SYSCALL ' ;   KEY.10 = 'SELECT '
KEY.11 = 'EXIT '    ;   KEY.12 = 'OTHERWISE '
KEY.13 = 'SIGNAL '  ;   KEY.14 = 'LEAVE '
KEY.15 = 'ON '      ;   KEY.16 = 'CALL '
KEY.17 = 'ADDRESS ' ;   KEY.18 = 'INTERPRET '
KEY.19 = 'ITERATE ' ;   KEY.20 = 'PARSE '
KEY.21 = 'FOR '     ;   KEY.22 = 'SAY '
KEY.23 = 'RETURN '  ;   KEY.24 = 'CONTROL '
KEY.25 = 'TRACE '   ;   KEY.26 = 'OR '
KEY.27 = 'ARG '     ;   KEY.28 = 'GOTO '
KEY.29 = 'BY '      ;   KEY.30 = 'WRITE '
KEY.31 = 'TO '      ;   KEY.32 = 'AND '
KEY.33 = 'DO; '     ;   KEY.34 = 'BEGIN; '
KEY.35 = 'END; '
OPR.0  = 10               /* PROCEDURAL    NUMBER IN OPERATOR LIST */
OPR.1  = ' = '   ;      OPR.2  = ' || '
OPR.3  = ' > '   ;      OPR.4  = ' >= '
OPR.5  = ' < '   ;      OPR.6  = ' <= '
OPR.7  = ' | '   ;      OPR.8  = ' \= '
OPR.9  = ' & '   ;      OPR.10 = ' ^= '
C.1 = '51'X ;  C.4 = '54'X                  /* HEX ATTRIBUTE BYTES */
C.2 = '52'X ;  C.5 = '55'X
C.3 = '53'X ;  C.6 = '56'X
CX  = '40515253545556'X
/* DYNAMIC PANEL DISPLAY SECTION */
ADDRESS ISREDIT "RESET"             /* REMOVE MESSAGE LINES IF ANY */
ADDRESS ISREDIT "(SL,EL) = DISPLAY_LINES"     /* DISPLAYED LINES   */
ADDRESS ISREDIT "(ML) = LINENUM .ZLAST"         /* MAXIMUM LINES   */
NL = (EL - SL) + 1                     /* LENGTH OF DISPLAYED DATA */
PRC = 0
DO WHILE (PRC = 0)                     /* DISPLAY PANEL IF NOT END */
   IF NL > ML THEN
      NL = ML                          /* JUST DO WHAT YOU'VE GOT  */
   IF SL = 1 THEN                      /* ADD TOP OF DATA TO THIS  */
      DO
         T = '*****************************'                 /* 29 */
         DATA = C.5 || '******' || C.3 || T || ' TOP OF DATA *' || T
      END
   ELSE
      DATA = ''                        /* NO DATA AT ALL YET       */
   DO V = 0 TO (NL - 1)               /* PROCESS THE VISIBLE LINES */
      Z = SL + V                         /* CALC THE EDIT LINE NUM */
      ADDRESS ISREDIT "(LINE) = LINE" Z  /* GET LINE FROM EDITOR   */
      CALL SYNTAX                        /* PROCESS LINE CONTENTS  */
      DATA = DATA || SUBSTR(LINE,1,80)   /* ALLOW VARIOUS LENGTHS  */
   END
   ADDRESS ISPEXEC "DISPLAY PANEL(PARSE1)"       /* DYNAMIC PANEL  */
    PRC = RC
   ADDRESS ISPEXEC "VGET (ZVERB ZSCROLLN ZSCROLLA)"
   SELECT
   WHEN (ZVERB = 'UP') THEN               /* PERFORM THE SCROLLING */
      DO
         SL = SL - ZSCROLLN
         IF (SL < 1) | ZSCROLLA = 'MAX' THEN
            SL = 1
      END
   WHEN (ZVERB = 'DOWN') THEN             /* PERFORM THE SCROLLING */
      DO
         IF SL = 1 THEN                 /* IGNORE TOP OF DATA LINE */
            ZSCROLLN = ZSCROLLN - 1
         SL = SL + ZSCROLLN
         IF ((SL + NL) > ML) | ZSCROLLA = 'MAX' THEN
            SL = (ML - NL) + 1
         IF SL < 1 THEN                    /* PREVENT OVERRUN      */
            SL = 1
      END
   OTHERWISE NOP
   END
END                                        /* RETURN/END OR PFK3/4 */
IF SL = 1 THEN                             /* FORCE RIGHT TO TOP   */
   SL = 0
ADDRESS ISREDIT "LOCATE " SL               /* KEEP SAME POSITION   */
EXIT 0                                     /* END MAIN PROCEDURE   */
SYNTAX:            /* SYNTAX ANALYSIS SUBROUTINE TO COLOUR TEXT UP */
OUT = 0
IF LINE = ' ' THEN                                   /* BLANK LINE */
   OUT = 1
IF Z = ML THEN                                   /* FLAG LAST LINE */
   N = C.6 || 'LAST' || C.1
ELSE
   N = TRANSLATE(FORMAT(Z,6),'0',' ')               /* LINE NUMBER */
LINE = C.1 || N || ' ' || SUBSTR(LINE,1,72)        /* BASIC FORMAT */
IF OUT = 1 THEN
   RETURN
LINE = STRIP(LINE,'T') || ' '            /* REMOVE TRAILING BLANKS */
LL = LENGTH(LINE)
/* ASSEMBLER PARSER CODE STARTS HERE */
IF TYPE = 'A' | TYPE = 'S' THEN        /* USE ASSEMBLER TYPE PARSE */
   DO
      IF SUBSTR(LINE,9,1) = '*' | SUBSTR(LINE,9,2) = '.*' THEN
         LINE = OVERLAY(C.3,LINE,8)              /* COMMENT CARD   */
      ELSE
         DO
            LINE = OVERLAY(C.5,LINE,8)           /* LABELS COL 1   */
            I = 1; J =1; K = 1; QT1 = 0; BR = 0; SS = 9
            IF CT = 0 THEN                   /* NO OP IF CONT CARD */
               DO
                  X = POS(' ',LINE,9)            /* FIND A BLANK   */
                  IF X > 0 THEN
                     DO
                        LINE = OVERLAY(C.4,LINE,X)
                        DO I = X+1 TO LL
                           A1 = SUBSTR(LINE,I,1)
                           IF A1 = 'B' THEN
                              BR = 1
                           IF A1 \= ' ' THEN       /* FOUND OPCODE */
                              LEAVE
                        END
                     END
               END
            J = POS(' ',LINE,I)              /* FIND NEXT BLANK    */
            IF J > 0 THEN
               DO
                  IF BR = 1 THEN             /* IF BRANCH SHOW RED */
                     LINE = OVERLAY(C.5,LINE,J)
                  ELSE
                     LINE = OVERLAY(C.1,LINE,J)
                  M = J + 10
                  IF CT = 1 THEN
                     M = LL
                  DO K = J+1 TO M
                     IF SUBSTR(LINE,K,1) \= ' ' THEN    /* OPERAND */
                        LEAVE
                  END
               END
            DO H = K TO LL                       /* END OF OPERAND */
               QT1 = SCAN("'" 1 "'" 1 QT1)
               IF QT1 = 0 & SUBSTR(LINE,H,1) = ' ' THEN
                  DO
                     LINE = OVERLAY(C.3,LINE,H)
                     LEAVE
                  END
            END
         END
      IF SUBSTR(LINE,80,1) \= ' ' THEN
         CT = 1                                   /* CONT IS NEXT  */
      ELSE
         CT = 0
      RETURN
   END                                  /* END OF ASSEMBLER PARSER */
/* PROCEDURAL PARSER CODE STARTS HERE */
DO K = 1 TO KEY.0                                /* FIND KEYWORDS  */
   DO UNTIL (X = 0)
      X = INDEX(LINE,KEY.K)
      IF X > 0 THEN
         DO
            IF VERIFY(SUBSTR(LINE,X-1,1),CX) = 0 THEN
               LINE = OVERLAY(C.4,LINE,X-1)
            LINE = OVERLAY(C.1,LINE,(X+LENGTH(KEY.K)-1))
         END
   END
END
DO P = 1 TO OPR.0                                /* FIND OPERATORS */
   DO UNTIL (X = 0)
      X = INDEX(LINE,OPR.P)
      IF X > 0 THEN
         DO
            LINE = OVERLAY(C.2,LINE,X)
            LINE = OVERLAY(C.1,LINE,(X+LENGTH(OPR.P)-1))
         END
   END
END
AA = STRIP(SUBSTR(LINE,9))
SS = LL - LENGTH(AA)
A  = SUBSTR(AA,1,1)                                   /* REXX CMDS */
IF A = '"' | A = "'" THEN                   /* IF FIRST CHAR QUOTE */
   LINE = OVERLAY(C.5,LINE,INDEX(LINE,A)-1)
CALL COMMAND ' ISPEXEC'                          /* FIND COMMANDS  */
CALL COMMAND ' ISREDIT'
DO UNTIL (X = 0)                                 /* COMMENT STARTS */
   X = INDEX(LINE,' /*')
   IF X > 0 THEN
      LINE = OVERLAY(C.3,LINE,X)
END
DO UNTIL (X = 0)                                 /* COMMENT ENDS   */
   X = INDEX(LINE,'*/ ')
   IF X > 0 THEN
      LINE = OVERLAY(C.1,LINE,X+2)
END
IF TYPE \= 'N' THEN                 /* UNLESS SUPRESSED CLEAN LINE */
   CALL CLEAN
RETURN                                         /* RETURN LINE BACK */
CLEAN:               /* SUBROUTINE TO CLEAN LINE WITHIN QUOTES ETC */
STR = 0; COM = 0; QT1 = 0; QT2 = 0    /* REMOVE INVALID HIGHLIGHTS */
IF INDEX(LINE,'/*') > 0 | INDEX(LINE,"'") > 0 | INDEX(LINE,'"') > 0 |,
   INDEX(LINE,'STR(') > 0  THEN
   DO H = SS TO LL
      A1 = SUBSTR(LINE,H,1)
      IF A1 \= ' ' THEN
         DO
            IF (COM = 0 & QT1 = 0 & QT2 = 0) THEN
               STR = SCAN('STR(' 4 ')' 1 STR)
            IF (STR = 0 & QT1 = 0 & QT2 = 0) THEN
               COM = SCAN('/*' 2 '*/' 2 COM)
            IF (COM = 0 & STR = 0 & QT2 = 0) THEN
               QT1 = SCAN("'" 1 "'" 1 QT1)
            IF (COM = 0 & STR = 0 & QT1 = 0) THEN
               QT2 = SCAN('"' 1 '"' 1 QT2)
            IF (STR = 1 | COM = 1 | QT1 = 1 | QT2 = 1) THEN
               DO
                  A1   = TRANSLATE(A1,'       ',CX)
                  LINE = OVERLAY(A1,LINE,H)
               END
         END
   END
RETURN                                         /* RETURN LINE BACK */
SCAN:   /* USED BY BOTH PARSERS - FUNCTION TO FIND IMBEDDED STRING */
ARG T1 L1 T2 L2 FG
IF SUBSTR(LINE,H,L1) = T1 & FG = 0 THEN
   FG = 1
ELSE
   IF SUBSTR(LINE,H,L2) = T2 THEN
      FG = 0
RETURN FG
COMMAND:                   /* SUBROUTINE TO FIND EXTERNAL COMMANDS */
ARG FUNC
X = INDEX(LINE,FUNC)
IF X > 0 THEN
   LINE = OVERLAY(C.5,LINE,X)
RETURN


THE DYNAMIC DISPLAY PANEL PARSE1

)ATTR
  ` AREA(DYNAMIC) SCROLL(ON)   EXTEND(ON)
 51 TYPE(DATAOUT) INTENS(LOW)  COLOR(GREEN)    /* NORMAL    */
 52 TYPE(DATAOUT) INTENS(HIGH) COLOR(PINK)     /* KEYWORDS  */
 53 TYPE(DATAOUT) INTENS(LOW)  COLOR(BLUE)     /* COMMENTS  */
 54 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)   /* OPERATORS */
 55 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)      /* EXTERNALS */
 56 TYPE(DATAOUT) INTENS(HIGH) COLOR(WHITE)    /* LAST FLAG */
)BODY
%PARSE --- &DSN&MEM --------------------------------------------%LIVE EDIT PARSE
%COMMAND ===>_ZCMD                                            %SCROLL ===>_AMT +
`DATA                                                                          `
)INIT
  IF (&AMT = &Z)
     &AMT  = 'CSR'
  .CURSOR = ZCMD
  .HELP = PARSE2
)PROC
  &NL = LVLINE(DATA)
  IF (&ZCMD = 'CAN','CANCEL','RES','RESET')
     .RESP = END
)END


THE TUTORIAL PANEL PARSE2

%TUTORIAL---------------------- LIVE EDIT PARSE ----------------------- TUTORIAL
%COMMAND ===>_ZCMD
+
% LIVE EDIT PARSING+
+
+ This will display your%EDIT DATA+with either a%PROCEDURAL+language
+ parse or an%ASSEMBLER+language parse to enhance the readability.
+ Various%COLOURS+are used to highlight related information such as
+ keywords, operators, comments etc. Monochrome screens use high intensity.
+
+ The screen display is NOT the editor and cannot be modified, however
+ the usual%SCROLL+commands will still operate. When%END+is pressed you
+ are returned to edit at the same point in the file. The file is not
+ altered in any way by this process. The parsing is performed only
+ on the portion of data required for display at any one time. Pressing
+ ENTER will refresh the screen (use if any blank lines appear).
+
+ To invoke the parser simply enter%LP+, if omitted the type of parse
+ depends on the edit profile name, if it starts with A or S then an
+ Assembler parse is used, otherwise a procedural parse. To override the
+ type enter%LP A+(for assembler type) or%LP C+(for clist/REXX type).
+ Entering  %LP N+(for procedural type) will suppress clean up process.
+
+ Press%END+to return to the parse display.
)PROC
   &ZCONT = PARSE2
)END


                                                                 c Reserved 1990

