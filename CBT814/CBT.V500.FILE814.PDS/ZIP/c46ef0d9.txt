Extracting RACF profile fields easily under TSO

One feature lacking in RACF is the ability to extract fields from
RACF profiles easily under TSO. The only direct method
available is to use the RACXTRT (or RACROUTE EXTRACT)
macro in Assembler. When this is used, any fields can be
accessed but the program must be APF-authorized and no
checking of the user's RACF authority is performed. One other
way is to issue the RACF TSO commands and trap the output but
this is not an intended programming interface and is subject to
change by IBM.

To overcome these limitations I have written a general purpose
TSO command which directly extracts any field(s) from any
RACF profile but only after checking the profile is within the
issuer's RACF scope of authority (ie SPECIAL, GROUP-
SPECIAL, or OWNER). A list of fields is supplied and the values
extracted are placed in TSO variables of the same name. This
provides optimum performance and flexibility, and should not
have any release dependencies. It can be used for any class,
segment, and field both at the present time and in the future,
without change. See SYS1.MODGEN(IRRTEMP1) for a list of
the RACF profile field names.

This makes it much easier to build good TSO/ISPF interfaces for
users and RACF administrators alike. For example a REXX
designed to allow a local administrator to change a RACF user's
password could extract the name, installation data, and default
group of the user and display it for confirmation before continuing
with the password update. There are many other possible uses and
it's particularly useful where information needs to be amended
(such as installation data) as the original data can be displayed
and then edited in an ISPF panel field before replacement using
the standard IBM-supplied ALTUSER command.

The program is called ZRACXRT and runs as an APF-authorized
TSO command (it needs an entry in the
SYS1.PARMLIB(IKJTSO00) AUTHCMD list). The RACF
entity name (profile name), RACF class, segment, and field list are
passed as parameters to the command. The program checks that
the issuer is allowed to perform the extract according to standard
RACF rules and then does a RACXTRT to retrieve the fields. The
return area is placed into a TSO variable, which the calling REXX
decodes into separate variables, one for each field name requested.
Note that the field names are passed as a single parameter
consisting of a multiple of eight characters.

passING parameters and parsING results from
ZRACXRT

/**REXX*********************************************************/
/* EXAMPLE OF USING ZRACXRT TO EXTRACT DATA FROM RACF PROFILE  */
/***************************************************************/
E = 'ZPAT'                                /* RACF ENTITY NAME  */
C = 'USER'                                /* RACF CLASS NAME   */
S = 'BASE'                                /* RACF SEGMENT NAME */
L = 'PGMRNAME'||'INSTDATA'||'DFLTGRP '    /* FIELD NAME LIST   */
CALL EXTRACT               /* EXTRACT FIELDS AND SET VARIABLES */
SAY PGMRNAME                       /* DISPLAY EXTRACTED VALUES */
SAY INSTDATA                       /* NORMALLY USE ISPF PANELS */
SAY DFLTGRP                        /* FOR ALL SCREEN DISPLAYS  */
EXIT 0                                    /* END OF MAIN PROC  */
/***************************************************************/
/* SUBROUTINE : EXTRACT FIELDS FROM RACF PROFILE AND SET VARS  */
/***************************************************************/
EXTRACT:
N = LENGTH(L) % 8                 /* NUM OF 8-CHAR FIELD NAMES */
V = 'DATVAR'                      /* 6-CHAR NAME - RETURN AREA */
PARMS = "ENT("E") CLS("C") LST("L") NUM("N") VAR("V") SEG("S")"
ADDRESS TSO "ZRACXRT" PARMS       /* CALL RACF MACRO INTERFACE */
IF RC > 0 THEN
   DO
      SAY 'ZRACXRT ENDED WITH NON-ZERO RC ' RC
      RETURN RC
   END
/* ANALYSE RETURN AREA AND SET THE REXX VARIABLES WITH VALUES  */
OFF = C2D(SUBSTR(DATVAR,5,2))        /* OFFSET TO DATA AREA    */
VAR = SUBSTR(DATVAR,OFF+1)           /* DATA AREA FROM RACXTRT */
J = 1
DO X = 1 TO N                        /* FOR EACH RACF FIELD    */
   Y = (X-1) * 8 + 1                 /* OFFSET IN NAME LIST    */
   NAM = SUBSTR(L,Y,8)               /* NAME OF THIS FIELD     */
   LEN = C2D(SUBSTR(VAR,J,4))        /* LENGTH OF THIS FIELD   */
   DAT = SUBSTR(VAR,J+4,LEN)         /* CONTENTS OF THIS FIELD */
   INTERPRET NAM '= DAT'             /* SET REXX VARIABLE NAME */
   J = J + 4 + LEN                   /* POINT TO NEXT FIELD    */
END
RETURN 0

command processor to check authority and call
RACF
         TITLE 'ZRACXRT - EXTRACT RACF FIELDS FROM PROFILES'
*****************************************************************
*  ZRACXRT - AUTHORIZED TSO COMMAND PROCESSOR
*  THIS PROGRAM ACCEPTS AN ENTITY NAME AND A LIST OF FIELDS AND WILL
*  RACXTRT THEM INTO A TSO VARIABLE IF THE ISSUER HAS OWNERSHIP OR
*  AUTHORITY OVER THE PROFILE CONCERNED. CAN BE USED IN TSO BATCH.
*  NOT REENTRANT, AC=1, ENTRY POINT ZRACXRT
*  MUST RUN AS A CP (NOT BE CALLED) AND MUST RUN AUTHORIZED SO
*  BE FROM AN AUTHORIZED LIBRARY, LINKED AC=1, AND IN IKJTSO00.
*  SYNTAX: ZRACXRT ENT(X) CLS(X) SEG(X) LST(X) NUM(N) VAR(X)
*  KEYWORD VALUES:
*  ENT  IS THE RACF ENTITY NAME, TYPICALLY A USERID OR GROUP NAME.
*       (MAXIMUM LENGTH IS 44 BUT NEED NOT BE BLANK PADDED)
*  CLS  IS THE RACF CLASS, TYPICALLY USER OR GROUP.
*       (MAXIMUM LENGTH IS 8 BUT NEED NOT BE BLANK PADDED)
*  SEG  IS THE NAME OF THE SEGMENT IN THE PROFILE, TYPICALLY BASE.
*       (MAXIMUM LENGTH IS 8 BUT NEED NOT BE BLANK PADDED)
*  LST  IS A LIST OF LIST OF RACF PROFILE FIELDS TO RETRIEVE.
*       (MULTIPLES OF 8 BYTES BLANK PADDED, MIN LEN 8, MAX 256)
*  NUM  IS THE NUMBER OF FIELDS IN THE LIST TO RETRIEVE.
*       (NUMBER SPECIFIED IN CHARACTER FORMAT, MAX VALUE 32)
*  VAR  IS THE TSO VARIABLE NAME TO STORE THE DATA.
*       (MUST BE A SIX-CHARACTER NAME)
*  NOTES:
*  RACF PERFORMS THE ACCESS AND THE USER DOES NOT REQUIRE DATASET
*  LEVEL ACCESS TO THE RACF DATABASE FOR ANY OF THESE FUNCTIONS. THE
*  RACF SEGMENT AND FIELD NAMES CAN BE FOUND IN SYS1.MODGEN(IRRTEMP1).
*  RETURN CODES IN R15.
*  00 - OPERATION SUCCESSFUL
*  01 - NOT APF AUTHORIZED
*  02 - NO PARM ENTERED
*  03 - INVALID NUMBER
*  04 - NO RACF ACEE FOUND
*  05 - DENIED ACCESS TO PROFILE
*  06 - TSO VARIABLE UPDATE FAILED
*  07 - RACF MACRO FAILED
*  08 - ENTITY/SEGMENT NOT FOUND
*  09 - PARAMETER WAS MISSING
*  10 - DELIMITER IS MISSING
*****************************************************************
ZRACXRT  CSECT
         STM   R14,R12,12(R13)   SAVE REGISTERS
         LR    R11,R15           ADDRESSABILITY
         LR    R2,R1             SAVE PARMS
         LA    R12,2048(R11)     BASE REG 2
         LA    R12,2048(R12)     UP 2048 TO 4096 ON R12
         USING ZRACXRT,R11,R12   BASE REGS
         L     R0,SIZDATD        R0 = SIZE OF DYNAMIC AREA
         GETMAIN R,LV=(0)        GETMAIN DYNAMIC AREA
         LR    R10,R1            R10 -> DYNAMIC AREA
         USING DATD,R10          ADDRESS DYNAMIC AREA
         ST    R13,SAVEAREA+4    SAVE CALLER'S SAVEAREA ADDRESS
         ST    R10,8(R13)        SAVE SAVEAREA ADDRESS
         LR    R13,R10           SAVE AREA PTR
* TEST APF AUTHORITY OF COMMAND
         TESTAUTH FCTN=1         TEST APF
         LTR   R15,R15           RESULT
         BZ    CONT0             OK
         TPUT  =CL40'ZRACXRT01 - NOT APF AUTHORIZED',40
         MVC   RC,=F'1'          RC 1
         B     EXIT              EXIT
* TSO PARM RETRIEVAL VIA CPPL
CONT0    EQU   *
         L     R2,0(R2)          CPPL PARM OF COMMAND BUFFER
         LA    R5,PARM           POINT TO VARIABLE
         LH    R3,0(R2)          LOAD NUM OF BUFFER
         LH    R4,2(R2)          LOAD REL OFF PARM
         LA    R4,4(R4)          LOAD OFFSET OF PARM
         CR    R4,R3             OFF = NUM THEN NO PARM
         BNE   SETPARM           CONTINUE
         TPUT  =CL40'ZRACXRT02 - NO PARM ENTERED',40
         MVC   RC,=F'2'          RC 2
         B     EXIT              LEAVE
SETPARM  EQU   *
         LR    R6,R2             COMMAND BUFFER
         AR    R6,R4             PLUS OFFSET
         MVC   0(1,R5),0(R6)     MOVE ONE BYTE
         LA    R5,1(R5)          UP OFFSET
         LA    R4,1(R4)          UP OFFSET
         CR    R4,R3             OFF = NUM THEN END
         BL    SETPARM           NOT YET
         OC    PARM,BLANKS       UPPER CASE WITH BLANKS
* PARSE PARM TO EXTRACT ENT, CLS, LST, NUM, VAR
         MVC   FIELD,=CL3'ENT'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   ENTITY,VALUE      STORE VALUE
         MVC   FIELD,=CL3'CLS'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   CLASS,VALUE       STORE VALUE
         MVC   FIELD,=CL3'SEG'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   SEGMENT,VALUE     STORE VALUE
         MVC   FIELD,=CL3'LST'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   LISTFLD,VALUE     STORE VALUE
         MVC   FIELD,=CL3'NUM'   SET FIELD NAME
         BAL   R2,PARSE          CALL PARSE ROUTINE
         MVC   NUMBER,VALUE      STORE VALUE
         MVC   FIELD,=CL3'VAR'   SET FIELD NAME
         BAL   R2,PARSE           CALL PARSE ROUTINE
         MVC   VARNAME,VALUE      STORE VALUE
* CONVERT 1-3 DIGIT CHARACTER NUMBER TO BINARY
         MVC   PICTURE,=CL3'000'  INITIALIZE FIELD WITH ZEROS
         LA    R1,PICTURE+2       ADDRESS END PICTURE FIELD
         LA    R2,NUMBER+2        ADDRESS END NUMBER FIELD
         LA    R3,3               LENGTH OF FIELD
RLOOP1   EQU   *
         CLI   0(R2),C' '         IS THERE A CHAR HERE
         BE    RNEXT              NO, SKIP TO NEXT
         CLI   0(R2),C'0'         LESS THAN 0
         BL    NUMBAD             BAD
         CLI   0(R2),C'9'         MORE THAN 9
         BH    NUMBAD             BAD
         MVC   0(1,R1),0(R2)      MOVE IT TO PICTURE FIELD
         BCTR  R1,0               BACK ONE BYTE PICTURE FIELD
RNEXT    EQU   *
         BCTR  R2,0               BACK ONE BYTE PERIOD FIELD
         BCT   R3,RLOOP1          AND NEXT
* CONVERT LENGTH VALUE INTO BINARY FIELD
         PACK  DECNUM,PICTURE     PACK IT
         CVB   R8,DECNUM          CONVERT TO BINARY
         ST    R8,BINNUM          SAVE IT
         CLC   BINNUM,=F'0'       IS IT ZERO
         BE    NUMBAD             BAD
         CLC   BINNUM,=F'32'      IS IT MORE THAN MAX
         BH    NUMBAD             BAD
         B     NUMOK              GOOD
NUMBAD   EQU   *
         TPUT  =CL40'ZRACXRT03 - INVALID NUMBER',40
         MVC   RC,=F'3'           RC 3
         B     EXIT               LEAVE
NUMOK    EQU   *
* PERMIT ACCESS IF CALLER IS RACF SPECIAL/GRP-SPEC OR IF GRANTED BY
* TESTING RACF PROFILE CLASS FACILITY RESOURCE INST.ZRACXRT.CLASS
NORMLST  EQU   *
         L     R8,PSATOLD-PSA          CURRENT TCB
         L     R9,TCBSENV-TCB(R8)      ACEE
         LTR   R9,R9                   CHECK ACEE
         BNZ   ACEEOK                  THERE OK
         L     R9,PSAAOLD-PSA          CURRENT ASCB
         L     R9,ASCBASXB-ASCB(R9)    ASXB
         L     R9,ASXBSENV-ASXB(R9)    ACEE
         LTR   R9,R9                   CHECK ACEE
         BNZ   ACEEOK                  THERE
         TPUT  =CL40'ZRACXRT04 - NO RACF ACEE FOUND',40
         MVC   RC,=F'4'                RC 4
         B     EXIT                    LEAVE
* ALLOW ACCESS IF RACF SPECIAL, OR ISSUER'S OWN DATA FOR READ
ACEEOK   EQU   *
         USING ACEE,R9                 ADDR IT
         ST    R9,ADDRACEE             SAVE ADDR
         MVC   ISSUER,ACEEUSRI         SAVE ISSUER
         TM    ACEEFLG1,ACEESPEC       RACF SPECIAL ?
         BO    ISSOK                   OK, ALLOW
* ALLOW THE ISSUER TO LIST THEIR OWN FIELDS
         CLC   ACEEUSRI,ENTITY         IS IT THE CURRENT ISSUER'S DATA
         BE    ISSOK                   YES, ALLOWED FOR THIS ENTITY
         DROP  R9
* NON-SYSTEM SPECIAL OBTAIN OWNING GROUP OF ENTITY TO BE MODIFIED
         LA    R6,RFLD1A         ADDR FIELDS TO BE OBTAINED
         LA    R7,CLASS          CLASS OF ENTITY
         LA    R8,ENTITY         ADDR ENTITY FIELD
         LA    R9,RACWORK        RACROUTE WORK AREA
         MVC   RX2(RX2L),RX1     INITIALIZE REENTRANT AREA
         RACROUTE REQUEST=EXTRACT,WORKA=(9),RELEASE=1.9,CLASS=(7),     X
               TYPE=EXTRACT,FIELDS=(6),ENTITY=(8),MF=(E,RX2)
         L     R8,RX2            LOAD RACXTRT RETURN CODE
         L     R7,RX2+4          LOAD RACXTRT REASON CODE
         LTR   R15,R15           TEST RACROUTE RETURN CODE
         BNZ   BADRACF           RACXTRT FAILED
         LR    R7,R1             RETURN AREA ADDR
* PROCESS THE RETURNED INFOMATION, SEG AREA IS NUM(4), DATA(8)
         XR    R4,R4             CLEAR
         IC    R4,0(R7)          SUBPOOL OF GETMAINED AREA
         XR    R5,R5             CLEAR
         ICM   R5,B'0111',1(R7)  LENGTH OF GETMAINED AREA
         LH    R6,4(R7)          OFFSET TO SEGMENT AREA
         AR    R6,R7             ADD BASE ADDR FOR SEGMENT AREA
         MVC   OWNER,4(R6)       COPY THE PROFILE OWNER (8)
         FREEMAIN R,LV=(5),A=(7),SP=(4) FREE RACXTRT AREA
* SEE IF ISSUER IS THE OWNER
         CLC   ISSUER,OWNER      ISSUER IS THE PROFILE OWNER
         BE    ISSOK             YES, OK
* SEE IF ISSUER HAS GROUP SPECIAL FOR THE ENTITY'S OWNING GROUP
CHECKG   EQU   *
         L     R4,ADDRACEE       LOAD ACEE ADDR
         USING ACEE,R4
         L     R5,ACEECGRP       ADDR OF CONNECT TABLE, 1
         LTR   R5,R5             TEST
         BNZ   OKCG              OK, THERE
         L     R5,ACEEFCGP       ADDR OF CONNECT TABLE, 2
         LTR   R5,R5             TEST
         BZ    DORACH            NOT THERE
OKCG     EQU   *
         USING CGRP,R5           ADDR CONNECT TABLE
         LA    R6,CGRPENT        ADDR FIRST ENTRY
         LH    R7,CGRPNUM        NUMBER OF ENTRIES
         USING CGRPENTD,R6
LOOPG    EQU   *
         CLC   OWNER,CGRPNAME           IS THIS THE GROUP
         BE    MATCHG                   YES
         LA    R6,L'CGRPENT(R6)         INCREMENT ENTRY
         BCT   R7,LOOPG                 CHECK NEXT
         B     NEXTG                    NOT AUTHORIZED
MATCHG   EQU   *
         TM    CGRPAUTH,CGRPSPEC        GROUP SPECIAL FLAG
         BO    ISSOK                    ON, AUTH
NEXTG    EQU   *
         CLC   OWNER,=CL8'SYS1'         IS IT THE FINAL GROUP
         BE    DORACH                   YES, NOT AUTHORIZED HERE
* GET SUPERIOR GROUP TO LAST GROUP AND CHECK AGAIN UNTIL SYS1
         LA    R6,RFLD2A         ADDR FIELDS TO BE OBTAINED
         LA    R7,=CL8'GROUP'    CLASS NAME
         LA    R8,OWNER          ADDR GROUP FIELD
         LA    R9,RACWORK        RACROUTE WORK AREA
         MVC   RX2(RX2L),RX1     INITIALIZE REENTRANT AREA
         RACROUTE REQUEST=EXTRACT,WORKA=(9),RELEASE=1.9,CLASS=(7),     X
               TYPE=EXTRACT,FIELDS=(6),ENTITY=(8),MF=(E,RX2)
         L     R8,RX2            LOAD RACXTRT RETURN CODE
         L     R7,RX2+4          LOAD RACXTRT REASON CODE
         LTR   R15,R15           TEST RACROUTE RETURN CODE
         BNZ   BADRACF           RACXTRT FAILED
         LR    R7,R1             RETURN AREA ADDR
* PROCESS THE RETURNED INFOMATION, SEG AREA IS NUM(4), DATA(8)
         XR    R4,R4             CLEAR
         IC    R4,0(R7)          SUBPOOL OF GETMAINED AREA
         XR    R5,R5             CLEAR
         ICM   R5,B'0111',1(R7)  LENGTH OF GETMAINED AREA
         LH    R6,4(R7)          OFFSET TO SEGMENT AREA
         AR    R6,R7             ADD BASE ADDR FOR SEGMENT AREA
         MVC   OWNER,4(R6)       COPY GROUP SUPERIOR GROUP
         FREEMAIN R,LV=(5),A=(7),SP=(4) FREE RACXTRT AREA
         L     R1,COUNTG         LOAD COUNT OF LOOPS
         LA    R1,1(R1)          INCREMENT IT
         ST    R1,COUNTG         SAVE COUNT
         CLC   COUNTG,=F'200'    200 LOOPS
         BH    DORACH            STOP LOOPING IF NO SYS1 FOUND
         B     CHECKG            TRY AGAIN FOR THIS GROUP
         DROP  R4,R5,R6
* PERFORM RACHECK ON FACILITY CLASS RESOURCE.
DORACH   EQU   *
         MVC   RESO,BLANKS             CLEAR RESOURCE NAME
         MVC   RESO(13),=CL14'INST.ZRACXRT.'
         MVC   RESO+13(8),CLASS        ADD CLASS NAME
         RACHECK CLASS='FACILITY',ATTR=READ,ENTITY=RESO,LOG=NONE
         LTR   R15,R15                 TEST RC
         BZ    ISSOK                   AUTHORIZED TO ENTITY
FAILR    EQU   *
         TPUT  =CL50'ZRACXRT05 - DENIED ACCESS TO PROFILE',50
         MVC   RC,=F'5'          RC 5
         B     EXIT              LEAVE
ISSOK    EQU   *
* RETRIEVE THE REQUESTED FIELD LIST FROM RACF FOR GIVEN ENTITY
         LA    R5,SEGMENT        SEGMENT NAME
         LA    R6,RFLDS          START OF FIELD NUMBER AND NAMES
         LA    R7,CLASS          CLASS OF ENTITY
         LA    R8,ENTITY         ADDR ENTITY
         LA    R9,RACWORK        RACROUTE WORK AREA
         MVC   RX2(RX2L),RX1     INITIALIZE REENTRANT AREA
         RACROUTE REQUEST=EXTRACT,WORKA=(9),RELEASE=1.9,               X
               TYPE=EXTRACT,FIELDS=(6),ENTITY=(8),CLASS=(7),           X
               SEGMENT=(5),MF=(E,RX2)
         C     R15,=F'4'         RC 4
         BE    BADENT            ENTITY NOT FOUND
         L     R8,RX2            LOAD RACXTRT RETURN CODE
         L     R7,RX2+4          LOAD RACXTRT REASON CODE
         LTR   R15,R15           TEST RC
         BNZ   BADRACF           BAD
* PROCESS THE RETURNED INFOMATION, NUM(4), DATA(4), NUM(4), DATA(NN)
         LR    R7,R1             RETURN AREA ADDR
         XR    R4,R4             CLEAR
         IC    R4,0(R7)          SUBPOOL OF GETMAINED AREA
         XR    R5,R5             CLEAR
         ICM   R5,B'0111',1(R7)  LENGTH OF GETMAINED AREA
         LH    R6,4(R7)          OFFSET TO SEGMENT AREA
         AR    R6,R7             ADD BASE ADDR FOR SEGMENT AREA
* SAVE ALL RETURNED DATA TO TSO VARIABLE FOR REXX TO ANALYSE
         ST    R5,BINNUM               LENGTH OF AREA
         ST    R7,DATPTR               AREA ADDR
         L     R15,CVTPTRX             GET TSO/E SERVICE ROUTINE
         L     R15,CVTTVTX(,R15)       ADDRESS
         L     R15,TSVTVACC-TSVT(,R15) FROM CVT
         CALL  (15),(ECODE,NAMEPTR,L6,DATPTR,BINNUM,TOKEN),VL  SET
         LTR   R15,R15                 TEST RC
         BZ    ENDOK                   COMPLETED OK
         TPUT  =CL40'ZRACXRT06 - TSO VARIABLE UPDATE FAILURE',50
         MVC   RC,=F'6'                RC 6
         B     ENDVAR                  CONTINUE
ENDOK    EQU   *
         MVC   RC,=F'0'                SAVE RETURN CODE
ENDVAR   EQU   *
         FREEMAIN R,LV=(5),A=(7),SP=(4) FREE RACXTRT AREA
         B     EXIT                    CONTINUE
* SHOW RACF RETURN/REASON CODE
BADRACF  EQU   *
         MVC   RMSG,BLANKS             CLEAR MSG
         CVD   R8,WORK1                CONVERT TO DEC
         CVD   R7,WORK2                CONVERT TO DEC
         UNPK  WORK3,WORK1             UNPACK
         MVZ   WORK3+7(1),=X'F0'       SET ZONE
         MVC   RMSG(9),=CL9'RETURN = ' INTO MSG
         MVC   RMSG+9(8),WORK3         INTO MSG
         UNPK  WORK4,WORK2             UNPACK
         MVZ   WORK4+7(1),=X'F0'       SET ZONE
         MVC   RMSG+9+9(9),=CL9'REASON = ' INTO MSG
         MVC   RMSG+9+9+9(8),WORK4         INTO MSG
         TPUT  =CL40'ZRACXRT07 - RACF MACRO FAILED',40
         MVC   RC,=F'7'          RC 7
         TPUT  RMSG,L'RMSG       INFORMATION MESSAGE
         B     EXIT              LEAVE
BADENT   EQU   *
         TPUT  =CL40'ZRACXRT08 - ENTITY NOT FOUND',40
         MVC   RC,=F'8'          RC 8
         B     EXIT              LEAVE
* LEAVE PROGRAM
EXIT     EQU   *
         L     R13,SAVEAREA+4    RESTORE R13
         L     R3,RC             RETURN CODE
         L     R0,SIZDATD        R0 = DYNAMIC AREA SIZE
         LR    R1,R10            R1 -> DYNAMIC AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1) FREE DYNAMIC AREA
         LR    R15,R3            RETURN CODE
         L     R14,12(R13)       RESTORE R14
         LM    R0,R12,20(R13)    RESTORE R0 TO R12
         BR    R14               RETURN
* SUBROUTINE R2, PARSE PARM FOR FIELDS REQUIRED
PARSE    EQU   *
         LA    R3,PARM           ADDR PARM
         LA    R4,240            MAX SCAN NUM
SCANP    EQU   *
         CLC   0(4,R3),FIELD     IS IT FIELD NAME PLUS (
         BE    ENDS              YES
         LA    R3,1(R3)          UP PTR IN PARM
         BCT   R4,SCANP          SCAN AGAIN
         TPUT  =CL40'ZRACXRT09 - PARAMETER WAS MISSING',40
         MVC   RC,=F'9'          RC 9
         TPUT  FIELD,3           SAY WHICH
         B     EXIT              OUT
ENDS     EQU   *
         MVC   VALUE,BLANKS      INITIALIZE
         LA    R5,VALUE          VALUE FIELD
         LA    R4,255            MAX VALUE NUM
         LA    R3,4(R3)          SKIP TO DATA IN PARM
         MVI   QUOTE,C'N'        SET FLAG DEFAULT
         CLI   0(R3),C''''       IS FIRST CHAR QUOTE
         BNE   MOVEV             NO
         MVI   QUOTE,C'Y'        SET FLAG
         LA    R3,1(R3)          JUMP OVER QUOTE
MOVEV    EQU   *
         CLI   QUOTE,C'Y'        QUOTE FLAG
         BNE   NORMP             NO
         CLI   0(R3),C''''       IS IT QUOTE
         BE    ENDV              YES THEN END
         B     QUOP              SKIP USUAL TEST
NORMP    EQU   *
         CLC   0(2,R3),=CL2') '  END OF PARM FIELD
         BE    ENDV              YES
QUOP     EQU   *
         MVC   0(1,R5),0(R3)     MOVE ONE CHAR
         LA    R5,1(R5)          NEXT CHAR IN VALUE
         LA    R3,1(R3)          NEXT CHAR IN PARM
         BCT   R4,MOVEV          LOOK AGAIN
         TPUT  =CL40'ZRACXRT10 - DELIMITER IS MISSING',40
         MVC   RC,=F'10'         RC 10
         TPUT  FIELD,3           SAY WHICH
         B     EXIT              OUT
ENDV     EQU   *
         BR    R2
* DATA AREAS                                                     *
         LTORG
DATA     DS    0F
SIZDATD  DC    AL1(0)            DYNAMIC AREA SIZE
         DC    AL3(ENDDATD-DATD)
         DS    0D
DECNUM   DC    PL8'0'            LENGTH IN DECIMAL
WORK1    DC    PL8'0'            WORK AREA FOR RETURN/REASON CODES
WORK2    DC    PL8'0'            WORK AREA FOR RETURN/REASON CODES
RC       DC    F'0'              PROGRAM RETURN CODE - DEFAULT 0
L6       DC    F'6'              LENGTH 6 (OF TSO VARIABLE NAME)
COUNTG   DC    F'0'              LOOP COUNT FOR GROUP SPECIAL
RFLD1A   DC    A(1)              NUMBER OF FIELDS FOLLOWING
RFLD1B   DC    CL8'AUTHOR'       NAME OF FIELD (OWNER)
RFLD2A   DC    A(1)              NUMBER OF FIELDS FOLLOWING
RFLD2B   DC    CL8'SUPGROUP'     NAME OF FIELD (SUPERIOR GROUP)
WORK3    DC    CL8' '            WORK AREA FOR RETURN/REASON CODES
WORK4    DC    CL8' '            WORK AREA FOR RETURN/REASON CODES
FIELD    DC    CL3' '            FIELD NAME
FIELD2   DC    C'('              BRACKET (KEEP AFTER FIELD)
VALUE    DC    CL255' '          VALUE OF FIELD NAME
PICTURE  DC    CL3'000'          PICTURE FIELD
QUOTE    DC    CL1' '            QUOTES USED FLAG
ENTITY   DC    CL44' '           RACF ENTITY NAME
CLASS    DC    CL8' '            CLASS NAME
SEGMENT  DC    CL8' '            SEGMENT NAME
NUMBER   DC    CL3' '            NUMBER OF FIELDS
RFLDS    DS    0F                FIELD NAMES       | KEEP
BINNUM   DC    F'0'              NUMBER OF FIELDS  | THIS
LISTFLD  DC    CL256' '          LIST OF FIELDS    | ORDER
RMSG     DC    CL40' '           RACF MSG
RESO     DC    CL39' '           FACILITY CLASS RESOURCE NAME
PARM     DC    CL255' '          TSO COMMAND PARM
BLANKS   DC    CL255' '          BLANKS
ZEROS    DC    100X'00'          ZEROS
* RACXTRT FOR USER AND GROUP CHECKING AND REQUESTED PROFILE
RX1      RACROUTE REQUEST=EXTRACT,WORKA=ZEROS,RELEASE=1.9,             X
               TYPE=EXTRACT,FIELDS=ZEROS,ENTITY=ZEROS,MF=L
* TSO VARIABLE UPDATE FIELDS
CVTPTRX  EQU   16
CVTTVTX  EQU   X'9C'
ECODE    DC    A(TSVEUPDT)  ENTRY CODE FOR VARIABLE UPDATE
TOKEN    DC    F'0'
VARNAME  DC    CL8' '            TSO VARIABLE NAME
NAMEPTR  DC    A(VARNAME)        PTR TO VARIABLE NAME
DATPTR   DC    A(0)              PTR TO DATA FIELD
* UNINITIALIZED STORAGE (GETMAINED)
DATD     DSECT                   GETMAINED STORAGE AREA
SAVEAREA DS    18F               SAVE AREA
ADDRACEE DS    F                 ACEE ADDR
ISSUER   DS    CL8               COMMAND ISSUER
OWNER    DS    CL8               OWNING ENTITY
RX2      RACROUTE REQUEST=EXTRACT,WORKA=ZEROS,RELEASE=1.9,             X
               TYPE=EXTRACT,FIELDS=ZEROS,ENTITY=ZEROS,MF=L
RX2L     EQU   *-RX2             RACXTRT LENGTH
* RACROUTE WORK AREA
RACWORK  DS    CL512             RACROUTE WORK AREA
ENDDATD  EQU   *
* DSECTS
         YREGS
         IHAASCB                 ASCB
         IHAASXB                 ASXB
         IHAPSA                  PSA
         IHAACEE                 ACEE
         ICHPCGRP                CGRP
         IKJTSVT                 TSVT
         IKJTCB                  TCB
         CVT DSECT=YES           CVT
         END   ZRACXRT


                                                            c Xephon 1994

