Browsing MVS virtual storage from ISPF

The appearance of a virtual storage browser in Issue 74 of MVS
Update prompted me to finish off a project to write a similar
program which would run under ISPF and have the ability to look
at the private storage of other address spaces running on the
system.

The program, BRWSTOR, is self-authorizing via an SVC, so I
have included the source for a very basic authorization SVC (type
3). Most installations probably have a more secure method of
handling this function nowadays, and can modify BRWSTOR
accordingly.

BRWSTOR uses the ISPF dialog manager for screen handling
functions, and this gives it the capability to take snapshots of large
amounts of storage, which can then be scrolled through at leisure.
The logic in panel BRWSTORP currently allows 100 16-byte
lines of data to be held at once, but this value can be increased to
9999 lines merely by changing the panel, as long as you can
support the ISPF table's memory requirement. This table requires
40 bytes per display line. Increasing the maximum beyond 9999
requires changing the definition of the variable PLINES in the
program.

The help panel BRWSTORH explains how to use the facilities
offered by BRWSTOR, the most useful probably being the ability
to browse the private storage of any non-swappable address space
in the system via the XM command. This uses cross memory
services to link to the secondary address space and move data
back to the primary for display.

Macros which convert 4-byte fields to 8-byte display format and
vice versa have appeared in MVS Update before (or at least similar
macros to achieve this type of function): they are included for
completeness.

BRWSTOR must be assembled with a SYSLIB pointing to
SYS1.MACLIB and SYS1.MODGEN. It must be linked with a
SYSLIB pointing to the ISPF load library, usually called
ISP.VnRnM0.ISPLOAD where VnRn reflects the ISPF version
and release level.

The program was originally written under MVS/XA SP2.2 and
ISPF Version 2, whereas the final development has been under
MVS/ESA SP4.2 and ISPF 3.2, but it will run under MVS/XA
without modification as no ESA facilities such as access registers
have been used, and the ISPF panels have not been modified at
all.

BRWSTOR SOURCE CODE

**********************************************************************
**  ISPF application program to display memory. Use XMS to display  **
**  other address spaces. Calls panel BRWSTORP.                     **
**********************************************************************
BRWSTOR  CSECT
         STM   14,12,12(13)          SAVE CALLER'S REGISTERS
         USING BRWSTOR,12            ESTABLISH ADDRESSABILITY
         LR    12,15                 SET UP MY BASE
         LR    14,13                 SAVE ADDR(PREVIOUS SAVE AREA)
         LA    13,SAVE               ADDR(MY SAVE AREA)
         ST    13,8(,14)             CHAIN MY SAVE AREA TO PREVIOUS
         ST    14,4(,13)             CHAIN PREVIOUS SAVE AREA TO MINE
         LM    14,1,12(13)           RESTORE REGS 14 ---> 1
         STM   0,15,EXITSAVE
         ESTAE PARAM=EXITSAVE,MF=(E,ESATEL)
ISPFDEFN CALL  ISPLINK,(VDEFINE,NEXT,PNEXT,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,VER,PVER,CHAR,L4),VL
         CALL  ISPLINK,(VDEFINE,LINES,PLINES,CHAR,L4),VL
         CALL  ISPLINK,(VDEFINE,MYMSG,PMYMSG,CHAR,L36),VL
         CALL  ISPLINK,(VDEFINE,SADDR,PSADDR,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,SECAS,PSECAS,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,ADDR,PADDR,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,OFFS,POFFS,CHAR,L4),VL
         CALL  ISPLINK,(VDEFINE,STOR1,PSTOR1,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,STOR2,PSTOR2,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,STOR3,PSTOR3,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,STOR4,PSTOR4,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,STOR,PSTOR,CHAR,L18),VL
         LA    5,1                   REG 5 = 1
         XR    2,2                   ZERO REG 2
         ESAR  2                     OBTAIN OUR ADDR SP NUMBER
         ST    2,OURASN              SAVE IT
         MVC   USEASN,OURASN         START OFF USING OWN ASN
         L     11,CVTPTR
         USING CVT,11
         L     11,CVTASVT
         DROP  11
         USING ASVT,11
         LA    9,ASVTENTY            POINT TO FIRST ASVTENTY ENTRY
         L     6,USEASN              OUR ADDR SP NUMBER
         SR    6,5                   SUBTRACT 1 FROM REG 6
ASVTLOOP LA    9,4(,9)               INCR ASVTENTY ENTRY POINTER
         BCT   6,ASVTLOOP            INCR LOOP COUNTER
         L     10,0(,9)              REG 10 SET UP FOR ASCB
         USING ASCB,10               ESTABLISH ADDRESSABILITY - ASCB
         L     5,ASCBJBNS            PTR TO JOB NAME IF NOT INIT
         MVC   PSECAS,0(5)           GET OUR ADDR SP NAME
         MVC   SAVAS,PSECAS          SAVE ADDR SP NAME
         MVC   OURAS,PSECAS          SAVE ADDR SP NAME
ISPFTABL CALL  ISPLINK,(TBCREATE,STRGTAB,,NAMELIST,NOWRITE,REPLACE),VL
         XR    5,5
         ST    5,OFFSET
         CLC   PNEXT,=C'        '
         BE    CMDSTAY
         CLC   PNEXT(1),=C'+'
         BE    CMDPLUS
         CLC   PNEXT(1),=C'-'
         BE    CMDMINUS
         CLC   PNEXT(1),=C'*'
         BE    CMDSTAR
         CLC   PNEXT(3),=C'CVT'
         BE    CMDCVT
         CLC   PNEXT(4),=C'ASCB'
         BE    CMDASCB
         CLC   PNEXT(3),=C'UCB'
         BE    CMDUCB
         CLC   PNEXT(1),=C'T'
         BE    CMDTOP
         CLC   PNEXT(1),=C'U'
         BE    BUILD
         CLC   PNEXT(1),=C'D'
         BE    CMDDOWN
         CLC   PNEXT(1),=C'A'
         BE    CMDADDR
         CLC   PNEXT(2),=C'XM'
         BE    CMDXM
         MVC   PMYMSG,=CL36'INVALID REQUEST - REENTER'
         B     ISPFDISP
CMDMINUS BAL   14,INVERT
         ST    11,DOWNAMT
         L     11,STAY11
         S     11,DOWNAMT
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDPLUS  BAL   14,INVERT
         L     8,STAY11
         AR    11,8                  ADD TO REG 11
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDSTAR  L     11,SAVESTAR           LOAD FIRST 4B OF LAST DISPLAY
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDADDR  BAL   14,INVERT
         B     BUILD
CMDCVT   L     11,CVTPTR
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDASCB  L     11,CVTPTR
         USING CVT,11
         L     11,CVTASVT
         DROP  11
         USING ASVT,11
         LA    9,ASVTENTY            POINT TO FIRST ASVTENTY ENTRY
         L     6,ASVTMAXU            MAXUSER IN IEASYS00
ASCBLOOP L     10,0(,9)              REG 10 SET UP FOR ASCB
         CLI   0(9),X'80'            UNUSED ASVT POINTERS HAVE HIGH-
         BE    ASCBBUMP              -ORDER BIT SET ON
         USING ASCB,10               ESTABLISH ADDRESSABILITY - ASCB
         L     5,ASCBJBNI
         LTR   5,5                   ZERO => CHECK JBNS
         BNZ   ASCBUSE               BRANCH IF OK TO USE
         L     5,ASCBJBNS            PTR TO JOBNAME IF NOT INIT
         LTR   5,5                   ZERO => UNUSED ASCB
         BZ    ASCBBUMP              BRANCH IF UNUSED
ASCBUSE  CLC   0(8,5),PSADDR         CHECK IF REQUESTED ASCB
         BE    ASCBFIND              YES IT IS
ASCBBUMP LA    9,4(,9)               INCR ASVTENTY ENTRY POINTER
         BCT   6,ASCBLOOP            INCR LOOP COUNTER
ASCBNFND MVC   PMYMSG,=CL36'INVALID ASCB REQUESTED'  DISPLAY MESS
         B     ISPFDISP
ASCBFIND LR    11,10
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDUCB   L     11,CVTPTR
         USING CVT,11
         L     11,CVTUCBA            ESTABLISH ADDRESSABILITY TO UCBS
UCBCHECK EQU   *
         USING UCBOB,11
         CLC   UCBNAME,PSADDR        SEE IF CORRECT UCB
         BE    GOTUCB                YES, DISPLAY IT
         L     11,UCBNXUCB           ADDRESS OF NEXT UCB
         C     11,=F'0'              IS IT = 0 ?
         BNE   UCBCHECK              NO, GO CHECK IT
         MVC   PMYMSG,=CL36'INVALID UCB REQUESTED'  YES, DISPLAY MESS
         B     ISPFDISP
GOTUCB   EQU   *
         DROP  11
         MVC   PNEXT,=CL8' '
         B     BUILD
CMDDOWN  L     11,STOR11
         S     11,STAY11
         A     11,SIXTEEN
         ST    11,DOWNAMT
         L     11,STAY11
         S     11,DOWNAMT
         B     BUILD
CMDSTAY  L     11,STAY11
         B     BUILD
CMDXM    L     11,STAY11
         CLC   PSADDR,OURAS          IS IT OUR ASID?
         BNE   XMNEW                 NO
         MVC   PSECAS,OURAS          YES - NO MORE CHECKING
         MVC   USEASN,OURASN
         XR    11,11
         B     BUILD
XMNEW    CLC   PSADDR,SAVAS          IS IT A DIFFERENT ASID?
         BNE   XMCHNG                YES
         MVC   PMYMSG,=CL36'ADDR SP NOT CHANGED'  DISPLAY MESS
         B     ISPFDISP
XMCHNG   L     11,CVTPTR             CHECK IF ASID NON-SWAP
         USING CVT,11
         L     11,CVTASVT
         DROP  11
         USING ASVT,11
         LA    9,ASVTENTY            POINT TO FIRST ASVTENTY ENTRY
         LA    2,1                   REG 2 = 1 (FIRST ASCB)
         L     6,ASVTMAXU            MAXUSER IN IEASYS00
XMLOOP   L     10,0(,9)              REG 10 SET UP FOR ASCB
         CLI   0(9),X'80'            UNUSED ASVT POINTERS HAVE HIGH-
         BE    XMBUMP                -ORDER BIT SET ON
         USING ASCB,10               ESTABLISH ADDRESSABILITY - ASCB
         L     5,ASCBJBNI
         LTR   5,5                   ZERO => CHECK JBNS
         BNZ   XMUSE                 BRANCH IF OK TO USE
         L     5,ASCBJBNS            PTR TO JOBN AME IF NOT INIT
         LTR   5,5                   ZERO => UNUSED ASCB
         BZ    XMBUMP                BRANCH IF UNUSED
XMUSE    CLC   0(8,5),PSADDR         CHECK IF REQUESTED ADDR SP
         BE    XMFIND                YES IT IS
XMBUMP   LA    9,4(,9)               INCR ASVTENTY ENTRY POINTER
         LA    2,1(,2)               INCR ASN COUNTER
         BCT   6,XMLOOP              INCR LOOP COUNTER
XMNFND   MVC   PMYMSG,=CL36'INVALID ADDR SP REQUESTED'  DISPLAY MESS
         B     ISPFDISP
XMFIND   ST    2,NEWASN              STORE A/S NUMBER
         MVC   PSECAS,0(5)           GET NEW A/S NAME
         L     9,ASCBOUCB            ADDR OUCB
         USING OUCB,9                ESTABLISH ADDRESSABILITY - OUCB
         TM    OUCBSFL,OUCBNSW       IS A/S NON-SWAPPABLE
         BO    XMOK                  YES, A/S NON-SWAPPABLE
         MVC   PMYMSG,=CL36'ADDR SP NOT NON-SWAP'  DISPLAY MESS
         MVC   PSECAS,SAVAS          SAVE NEW A/S NAME
         B     ISPFDISP
XMOK     XR    11,11                 REG 11 = 0
         MVC   PNEXT,=CL8' '
         MVC   SAVAS,PSECAS          SAVE NEW A/S NAME
         MVC   USEASN,NEWASN         USE NEW A/S
         B     BUILD
CMDTOP   XR    11,11                 R11 = 0
BUILD    ST    11,STAY11             SAVE REG 11 FOR REDISPLAY
         ST    11,STOR11             SAVE REG 11 FOR CONVERSION
         LA    1,0                   AUTHORIZE TSO SESSION
         SVC   217                   CALL AUTHORIZATION SVC
         MODESET KEY=ZERO,MODE=PROB  KEY ZERO, PROBLEM STATE
         LA    2,1                   REG 2 = 1
         AXSET AX=(2)                AUTH INDEX = 1
         L     2,USEASN              NEW ADDRESS SPACE
         SSAR  2                     SET SECONDARY ADDRESS SPACE
         XR    1,1                   REG 1 = 0
         LA    2,4                   REG 2 = 4
         MVCP  MVCP4(2),0(11),1      LOAD FIRST 4B OF DISPLAY
         L     10,MVCP4              LOAD TO REG 10
         L     2,OURASN              RESET TO ORIG ADDRESS SPACE
         SSAR  2                     SET SECONDARY ADDRESS SPACE
         XR    2,2                   REG 2 = 0
         AXSET AX=(2)                AUTH INDEX = 0
         MODESET KEY=NZERO,MODE=PROB KEY USER, PROBLEM STATE
         LA    1,4                   UNAUTHORIZE TSO SESSION
         SVC   217                   CALL AUTHORIZATION SVC
         ST    10,SAVESTAR           LATER ACCESS BY '*' NOTATION
         L     5,STOR11              DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PSADDR,STORADDR
         PACK  PCKLN,PLINES(4)       NUMBER OF LINES TO DISPLAY
         CVB   6,PCKLN               KEEP IT IN R6 FOR BCT
STORLOOP LA    1,0                   AUTHORIZE TSO SESSION
         SVC   217                   CALL AUTHORIZATION SVC
         MODESET KEY=ZERO,MODE=PROB  KEY ZERO, PROBLEM STATE
         LA    2,1                   REG 2 = 1
         AXSET AX=(2)                AUTH INDEX = 1
         L     2,USEASN              NEW ADDRESS SPACE TO BROWSE
         SSAR  2                     SET SECONDARY ADDRESS SPACE
         XR    1,1                   REG 1 = 0
         LA    2,16                  REG 2 = 4
         MVCP  PSTORB(2),0(11),1     LOAD 16B OF DISPLAY
         L     2,OURASN              RESET TO ORIG ADDRESS SPACE
         SSAR  2                     SET SECONDARY ADDRESS SPACE
         XR    2,2                   REG 2 = 0
         AXSET AX=(2)                AUTH INDEX = 0
         MODESET KEY=NZERO,MODE=PROB KEY USER, PROBLEM STATE
         LA    1,4                   UNAUTHORIZE TSO SESSION
         SVC   217                   CALL AUTHORIZATION SVC
         L     5,OFFSET              DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   POFFS,STORADDR+4      MOVE CONV TO DISP - LOW-ORDER 4
         L     5,OFFSET              INCREMENT OFFSET FIELD
         LA    5,16(,5)              INCREMENT BY 16
         ST    5,OFFSET              AND STORE IT
         ST    11,STOR11             SAVE REG 11 FOR CONVERSION
         L     5,STOR11              DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PADDR,STORADDR        MOVE CONV TO DISPLAY FIELD
         LA    11,16(,11)            ADD 16 TO REG 11 - 16 BYTES LONG
         MVC   DISP,PSTORB
         L     5,DISP1               DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PSTOR1,STORADDR       MOVE CONV TO DISPLAY FIELD
         L     5,DISP2               DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PSTOR2,STORADDR       MOVE CONV TO DISPLAY FIELD
         L     5,DISP3               DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PSTOR3,STORADDR       MOVE CONV TO DISPLAY FIELD
         L     5,DISP4               DATA FOR CONVERSION
         BAL   14,CONVERT            CONVERSION ROUTINE
         MVC   PSTOR4,STORADDR       MOVE CONV TO DISPLAY FIELD
ISPFADD  CALL  ISPLINK,(TBADD,STRGTAB,,ORDER),VL
         BCT   6,STORLOOP            INCR LOOP COUNTER AND LOOP
ISPFPNTT CALL  ISPLINK,(TBTOP,STRGTAB),VL   POINT TO TOP OF TABLE
         MVC   PMYMSG,=CL36' '
ISPFDISP CALL  ISPLINK,(TBDISPL,STRGTAB,BRWSTORP),VL   AND DISPLAY
TESTENTR LTR   15,15                 HAS ENTER BEEN HIT
         BNZ   FINISHKP              NO, TERMINATE PROGRAM
         CALL  ISPLINK,(TBCLOSE,STRGTAB),VL  CLOSE TABLE TO REFRESH
         B     ISPFTABL
FINISHKP CALL  ISPLINK,(TBCLOSE,STRGTAB),VL  CLOSE TABLE TO EXIT
         L     13,SAVE+4             RESTORE CALLER'S REGS
         RETURN (14,12),RC=0         BACK TO CALLER
**  SUBROUTINES  **************************************************
CONVERT  REGDISP 5,STORADDR          MACRO TO CONVERT REG -> DISPLAY
         BR    14                    BACK TO BAL
INVERT   DISPREG PSADDR,11           MACRO TO CONVERT DISPLAY -> REG
         BR    14                    BACK TO BAL
SAVE     DS    18F
SAVESTAR DS    F
ESPTOKEN DS    F
TBADD    DC    CL5'TBADD'
TBCLOSE  DC    CL7'TBCLOSE'
TBCREATE DC    CL8'TBCREATE'
TBDISPL  DC    CL7'TBDISPL'
TBTOP    DC    CL5'TBTOP'
VDEFINE  DC    CL7'VDEFINE'
CHAR     DC    CL4'CHAR'
L4       DC    F'4'
L8       DC    F'8'
L18      DC    F'18'
L36      DC    F'36'
BRWSTORP DC    CL8'BRWSTORP'
STRGTAB  DC    CL8'STRGTAB'
NAMELIST DS    0CL40
         DC    CL40'(ADDR OFFS STOR1 STOR2 STOR3 STOR4 STOR)'
NOWRITE  DC    CL7'NOWRITE'
ORDER    DC    CL5'ORDER'
REPLACE  DC    CL7'REPLACE'
STAY11   DC    F'0'
DOWNAMT  DC    F'0'
NEXT     DC    CL8'NEXT'
PNEXT    DC    CL8' '
VER      DC    CL8'VER'
PVER     DC    CL4'V4.1'
ADDR     DC    CL8'ADDR'
PADDR    DS    CL8
OFFS     DC    CL8'OFFS'
POFFS    DS    CL4
SADDR    DC    CL8'SADDR'
PSADDR   DS    CL8
SECAS    DC    CL8'SECAS'
PSECAS   DS    CL8
MYMSG    DC    CL8'MYMSG'
PMYMSG   DS    CL36
LINES    DC    CL8'LINES'
PLINES   DC    CL4'0016'
STOR     DC    CL8'STOR'
STOR1    DC    CL8'STOR1'
STOR2    DC    CL8'STOR2'
STOR3    DC    CL8'STOR3'
STOR4    DC    CL8'STOR4'
PCKLN    DS    D
PSTOR    DS    0CL18
PSTORA   DC    CL1'|'
PSTORB   DS    CL16
PSTORC   DC    CL1'|'
         DS    0D
DISP     DS    0CL16
DISP1    DS    F
DISP2    DS    F
DISP3    DS    F
DISP4    DS    F
PSTOR1   DS    CL8
PSTOR2   DS    CL8
PSTOR3   DS    CL8
PSTOR4   DS    CL8
DBLWRD   DS    D
         DS    0D
SIXTEEN  DC    XL4'00000010'
STOR11   DS    F
STORXX   DS    CL13
STORADDR DS    CL8
         DS    0D
OURASN   DS    F
USEASN   DS    F
NEWASN   DS    F
SAVAS    DS    CL8
OURAS    DS    CL8
MVCP4    DS    F
OFFSET   DS    F
ESTAEXIT DS    0H
         USING ESTAEXIT,15
         CH    0,=H'12'              HAVE WE GOT SDWA?
         BE    GOHOMEQ               NO, FORCE RETURN
         USING SDWA,1
         L     12,SDWAPARM           EXITSAVE
         LM    2,12,8(12)            RESTORE REGS
         DROP  15
         MVC   ABCODE,SDWAABCC       COMPLETION CODE
         MVC   ABREAS,SDWAAEC1       ADDITIONAL EC MODE DATA
         MVC   SDWASRSV(64),EXITSAVE RETRY REGS
         SETRP RC=4,RETADDR=ABS0C4,DUMP=NO
         DROP  1
GOHOMEQ  LA    0,FINISHKP            RETRY ADDRESS
         LA    15,4                  ESTAE RETURN CODE
         BR    14                    RETURN TO RTM
ABS0C4   MODESET KEY=ZERO,MODE=PROB  KEY ZERO, PROBLEM STATE
         L     2,OURASN
         SSAR  2
         XR    2,2                   REG 2 = 0
         AXSET AX=(2)                AUTH INDEX = 0
         MODESET KEY=NZERO,MODE=PROB KEY USER, PROBLEM STATE
         LA    1,4                   UNAUTHORIZE TSO SESSION
         SVC   217                   CALL AUTHORIZATION SVC
         L     5,ABCODE              ABEND CODE
         BAL   14,CONVERT            CONVERT FOR DISPLAY
         MVC   ABCD,STORADDR
         L     5,ABREAS1             REASON CODE
         BAL   14,CONVERT            CONVERT FOR DISPLAY
         MVC   REAS,STORADDR
         MVC   PMYMSG(6),=CL6'ABEND '
         MVC   PMYMSG+6(3),ABCDE
         MVC   PMYMSG+9(8),=CL8' REASON '
         MVC   PMYMSG+17(4),REASCD
         MVC   PMYMSG+21(10),=CL10' DETECTED '
         CALL  ISPLINK,(TBDISPL,STRGTAB,BRWSTORP),VL   AND DISPLAY
         LTR   15,15                 HAS ENTER BEEN HIT
         BNZ   FINISHKP              NO, TERMINATE PROGRAM
         B     FINISHKP              TERMINATE ANYWAY
ESATEL   ESTAE ESTAEXIT,CT,MF=L
EXITSAVE DS    16F
         DS    0D
ABCODE   DC    F'0'
ABREAS   DS    0D
ABREAS1  DC    F'0'
ABREAS2  DC    F'0'
ABCD     DS    0CL8
         DS    CL2
ABCDE    DS    CL3
         DS    CL3
REAS     DS    0CL8
         DS    CL4
REASCD   DS    CL4
         CVT   DSECT=YES
         IEFUCBOB PREFIX=NO
         IHAASVT
         IHAASCB
         IRAOUCB
         IHASDWA
         END

MACRO DISPREG SOURCE CODE

***********************************************************************
**  Convert the contents of a passed 8-character display field to a  **
**  four-character register value                                    **
***********************************************************************
         MACRO
&LABEL   DISPREG &DSP,&HEX
&LABEL   STM   0,15,SAVE&SYSNDX
         MVC   WDSP&SYSNDX.(8),&DSP
         NC    WDSP&SYSNDX.(8),NMSK&SYSNDX
         TR    WDSP&SYSNDX.(8),TRTB&SYSNDX
         OC    WDSP&SYSNDX.(8),OMSK&SYSNDX
         PACK  WHEX&SYSNDX.(5),WDSP&SYSNDX.(9)
         LM    0,15,SAVE&SYSNDX
         L     &HEX,WHEX&SYSNDX
         B     END&SYSNDX
SAVE&SYSNDX DS 16F
NMSK&SYSNDX DC XL8'3F3F3F3F3F3F3F3F'
OMSK&SYSNDX DC XL8'F0F0F0F0F0F0F0F0'
HXTB&SYSNDX DC CL16'0123456789ABCDEF'
WHEX&SYSNDX DS F
            DS C
WDSP&SYSNDX DS CL8'********'
            DC CL1'.'
TRTB&SYSNDX DC XL7'000A0B0C0D0E0F'
            DS XL41
            DC XL10'00010203040506070809'
END&SYSNDX  DS 0H
         MEND

MACRO REGDISP SOURCE CODE

***********************************************************************
**  Convert the contents of a passed register to an 8-character      **
**  display field.                                                   **
***********************************************************************
         MACRO
&LABEL   REGDISP &HEX,&DSP
&LABEL   STM   0,15,SAVE&SYSNDX
         ST    &HEX,WHEX&SYSNDX
         UNPK  WDSP&SYSNDX.(9),WHEX&SYSNDX.(5)
         NC    WDSP&SYSNDX.(8),MASK&SYSNDX
         TR    WDSP&SYSNDX.(8),HXTB&SYSNDX
         MVC   &DSP,WDSP&SYSNDX
         LM    0,15,SAVE&SYSNDX
         B     END&SYSNDX
SAVE&SYSNDX DS 16F
MASK&SYSNDX DC XL8'0F0F0F0F0F0F0F0F'
HXTB&SYSNDX DC CL16'0123456789ABCDEF'
WHEX&SYSNDX DS F
            DS C
WDSP&SYSNDX DS CL8'********'
            DC CL1'.'
END&SYSNDX  DS 0H
         MEND

AUTHORIZATION SVC SOURCE CODE

***********************************************************************
**  Authorization SVC                                                **
***********************************************************************
IGC00217 CSECT
         BALR  12,0
         USING *,0
         L     2,180(4)            ADDR OF JSCB
         BCT   0,AUTHOFF           R0 NE 1 = AUTH OFF
AUTHON   OI    236(2),X'01'        SET JSCBAUTH BIT
         B     RETURN
AUTHOFF  NI    236(2),X'FE'        CLEAR JSCBAUTH BIT
RETURN   BR    14
         END   IGC00217

BRWSTORP ISPF PANEL SOURCE CODE

)ATTR
 ! TYPE(OUTPUT) INTENS(LOW) JUST(LEFT)
 $ TYPE(OUTPUT) INTENS(HIGH)
 # TYPE(OUTPUT) INTENS(HIGH)
   TYPE(TEXT) SKIP(ON) INTENS(LOW)
)BODY EXPAND(@@)
%@-@  Storage Browse  @-@
%ISPFCMD  ===>_ZCMD                                     +     %SCROLL ===>_AMT +
%COMMAND  ===>_NEXT    + $MYMSG                               +%LINES ===>_Z   +
%   DATA  ===>_SADDR   + %ADDR SP  ===>$SECAS   +            %VERSION ===>_VER +
+
)MODEL
    !Z       !Z   +=!Z       !Z       !Z       !Z       +!Z
)INIT
.HELP = BRWSTORH
.ZVARS = '(LINES ADDR OFFS STOR1 STOR2 STOR3 STOR4 STOR)'
.CURSOR = NEXT
&ZCMD = &Z
&ZTDMARK = ' '
 IF (&LINES = ' ')
   &LINES = 16
)PROC
VER (&LINES,RANGE,1,100)
 IF (&NEXT = 'A')
   VER (&SADDR,NB,PICT,XXXXXXXX)
)END

BRWSTORH ISPF PANEL SOURCE CODE

)ATTR DEFAULT(%$_)
)BODY EXPAND(@@)
%@-@  Storage Browse Help  @-@
%ISPFCMD  ===>_ZCMD                                                            +
%
%     +$= Increment by value in data field
%     -$= Decrement by value in data field
%     *$= Go to address pointed to by data field
%   CVT$= Go to Communications Vector Table
%  ASCB$= Go to Address Space Control block of job in data field
%   UCB$= Go to Unit Control Block of device in data field char 1 - 3
%     T$= Top
%     U$= Up 1 page
%     D$= Down 1 page
%     A$= Go to address in data field
%    XM$= Change to address space in data field
%
)INIT
)PROC
&ZCONT = BRWSTORH
)END


Patrick Mullen
Advisory Systems Engineer
Persetel (South Africa)                                                                    c Xephon 1994

