Providing security for deleted DASD data

You're done with that DASD dataset; it contained sensitive
information so you promptly delete it, feeling comfortable that
your data has been appropriately removed - wrong! The nature
of magnetic recording devices dictates that current data remains
until new data is written in its place. If your installation does
not invoke erase-on-scratch processing (generally an option
available with security packages) your deleted dataset has only
been made more difficult to access. The data has not been
'deleted'.

In an MVS environment, a request to delete a DASD dataset
will involve two basic functions: the VTOC entry for the
dataset will be cleared and the area occupied by the dataset will
be returned to the volume freespace pool. If the security
package your installation uses supports erase-on-scratch and the
performance analysts are willing to accept the overhead (ie the
option is enabled), the area occupied by your dataset may then
be overwritten with zeros or some other random bit pattern. If
erase-on-scratch is not the selected option, the data remains
intact. As you can well appreciate, erase-on-scratch can be a
significant overhead, especially in environments where DASD
data is very dynamic.

When previously used DASD space is selected for reuse and is
not re-initialized prior to attempting data access, one of two
things can happen:

o      An abend will occur because the existing data is not in a
      format compatible with the new allocation.

o      The existing data will be accessed successfully.

Accessing residual data is a security problem that can be partly
addressed with a simple solution. Standard access methods
know only about the contents of allocated DASD space, not
when or how it was last altered. Assuming that the majority of
DASD data access is through a standard access method, a basic
solution to the residual data access problem would be to write
an end-of-file marker at the starting location of newly allocated
DASD space. Ideally, the write end-of-file should take place
with minimal overhead and without the requirement of opening
and closing the newly allocated dataset. The IGGPOST0
DADSM exit can be used to perform this function.

IGGPOST0 can trap allocation requests and use information
contained in the JFCB and an in-storage copy of the format 1
DSCB to determine whether and where an end-of-file should be
written. The IGGPOST0 exit that follows selects single
volume, non-VSAM, non-VIO, non-absolute track allocation
requests. A write end-of-file channel program is dynamically
constructed using the extent information contained in the
format 1 DSCB. The STARTIO macro is used to perform the
I/O because it is relatively efficient and it does not require the
dataset to be open. Notification of any failed write end-of-file
I/O is sent to the operator's console.

By bypassing standard access methods, the knowledgeable
low-level I/O coder (EXCP or STARTIO) may still find ways
to access old data. Erase-on-scratch is the foolproof solution to
this problem, but it comes with a cost. This IGGPOST0 exit
prevents unintentional residual data access (especially for
BSAM and QSAM datasets), and, as a result, the technique
can be used with a very high level of confidence to provide
security for deleted DASD data.


IGGPOST0 DADSM EXIT

         TITLE 'IGGPOST0 - PROVIDING SECURITY FOR DELETED DASD DATA'
IGGPOST0 CSECT
*   THE IGGPOST0 EXIT SHOULD BE LINK-EDITED INTO SYS1.LPALIB WITH
*   RENT,REUS ATTRIBUTES.
&MSG     SETC  'NOMSG'               CHANGE TO 'MSG' IF YOU WANT ...
*                                       SUCCESSFUL EOF MESSAGE WRITTEN
         STM   R14,R12,12(R13)       SAVE ENVIRONMENT
         LR    R10,R15               SET MODULE ...
         USING IGGPOST0,R10             ADDRESSABILITY
         LR    R2,R1                 SAVE PARAMETER LIST ADDRESS
         USING PREPL,R2              SET ADDRESSABILITY
*   THE EXIT, AS IT IS WRITTEN, BYPASSES EOF INITIALIZATION FOR VSAM,
*   VIO, AND ABSOLUTE TRACK ALLOCATION REQUESTS.
*   THESE CRITERIA CAN BE ALTERED TO MEET YOUR SPECIFIC NEEDS.
*   FOR EXAMPLE, YOU MAY WANT TO EXAMINE THE VOLSER OR DSNAME IN
*   THE JFCB AND RESTRICT THE ACTIONS WITHIN THE EXIT TO A SPECIFIC
*   VOLSER GROUP OR DSNAME MASK (EG 'PROD' OR 'TEST').
*   CHECKS ARE MADE TO ENSURE THAT THE JFCB, DSCB, AND EXTENT
*   INFORMATION ARE VALID.
         TM    IEXFUNC,IEXALL        AN ALLOCATE REQUEST?
         BNO   RETURN                NO - RETURN
         TM    IEXFLAG,IEXVIO        VIO?
         BO    RETURN                YES - RETURN
         TM    IEXFLAG,IEXMF1        JFCB NOT AVAILABLE?
         BO    RETURN                YES - RETURN
         L     R3,IEXPTR1            GET JFCB ADDRESS
         LTR   R3,R3                 DO WE HAVE ONE?
         BZ    RETURN                NO - RETURN
         USING INFMJFCB,R3           SET JFCB ADDRESSABILITY
         L     R15,IEXDSN            GET DSN ADDRESS
         CLC   JFCBDSNM(44),0(R15)   THE SAME DATASET?
         BNE   RETURN                NO - RETURN
         TM    JFCDSRG2,JFCORGAM     A VSAM DATASET?
         BO    RETURN                YES - RETURN
         CLI   JFCBNVOL,X'01'        MULTI-VOLUME?
         BNE   RETURN                YES - RETURN
         TM    JFCFLGS1,JFCVRDS      IS DADSM MISSED IT, IS IT VIO?
         BO    RETURN                YES - RETURN
         TM    JFCBCTRI,JFCBABS      ABSOLUTE TRACK ALLOCATION?
         BO    RETURN                YES - RETURN
         L     R4,IEXFMT1            GET THE FORMAT 1 DSCB ADDRESS
         LTR   R4,R4                 DO WE HAVE ONE?
         BZ    RETURN                NO - RETURN
         USING DS1FMTID,R4           SET FORMAT 1 DSCB ADDRESSABILITY
         CLI   DS1FMTID,X'F1'        IS THIS A FORMAT 1 DSCB?
         BNE   RETURN                NO - RETURN
         CLI   DS1SCAL1,DS1DSABS     ABSOLUTE TRACK ALLOCATION?
         BE    RETURN                YES - RETURN
         CLC   DS1EXT1+2(4),=F'0'    ANY FIRST EXTENT INFORMATION?
         BE    RETURN                NO - RETURN: PROBABLY A MODEL DSCB
*   WE'VE PASSED ALL THE TESTS SO LET'S GO ON.
         GETMAIN R,LV=WORKLEN        GET SOME WORKAREA STORAGE
         LTR   R15,R15               DID WE GET THE STORAGE?
         BNZ   RETURN                NO - RETURN
         ST    R13,4(,R1)            SAVE OLD SAVEAREA ADDRESS
         LR    R13,R1                LOAD NEW SAVEAREA ADDRESS
         GETMAIN R,LV=SRBSIZE+IOSEND-IOSB,LOC=BELOW,SP=227
         LTR   R15,R15               DID WE GET THE STORAGE?
         BNZ   FREEWORK              NO - GO FREE WORKAREA STORAGE
         USING WORKAREA,R13          SET WORKAREA ADDRESSABILITY
         ST    R1,SRBADDR            SAVE COMMON STORAGE ADDRESS
         LA    R15,SRBSIZE(,R1)      GET IOSB ADDRESS
         ST    R15,IOSBADDR          SAVE IT
         XC    0(SRBSIZE+IOSEND-IOSB,R1),0(R1) CLEAR THE AREA
         SYSEVENT DONTSWAP           GO NON-SWAPPABLE
         CLM   R1,B'0001',=X'00'     GOT NON-SWAPPABLE?
         BNE   FREECSA               NO - GO FREE COMMON STORAGE
         LR    R11,R13               GET STORAGE ADDRESS
         XR    R15,R15               GET STORAGE ...
         LA    R15,WORKLEN              LENGTH
         LA    R9,0(R15,R11)         GET ENDING STORAGE ADDRESS
         STM   R0,R4,R0R4SAVE        SAVE SOME REGISTERS
         PGSER R,FIX,A=(R11),EA=(R9),ECB=0 PAGE FIX WORKAREA STORAGE
         LM    R0,R4,R0R4SAVE        RESTORE SOME REGISTERS
         LTR   R15,R15               GOT PAGE FIXED?
         BNZ   GOSWAP                NO - GO SET SWAPPABLE
         L     R8,=A(PGMEND)         GET PROGRAM END ADDRESS
         STM   R0,R4,R0R4SAVE        SAVE SOME REGISTERS
         PGSER R,FIX,A=(R10),EA=(R8),ECB=0 PAGE FIX PROGRAM STORAGE
         LM    R0,R4,R0R4SAVE        RESTORE SOME REGISTERS
         LTR   R15,R15               GOT PAGE FIXED?
         BNZ   PGFREE                NO - GO PAGE FREE WORKAREA STORAGE
         BAL   R14,SRBINIT           INITIALIZE THE SRB/IOSB & CHNL PGM
         XC    ECB(4),ECB            CLEAR THE ECB
         L     R1,SRBADDR            GET SRB ADDRESS
         STM   R14,R12,12(R13)       SAVE CURRENT ENVIRONMENT
         STARTIO SRB=(1),TCB=SRB     START THE REQUESTED I/O
         LM    R14,R12,12(R13)       RESTORE THE ENVIRONMENT
         WAIT  ECB=ECB               WAIT FOR I/O TO COMPLETE
         CLI   ECB,X'7F'             I/O WAS O.K.?
         BE    OKMSG                 YES - ISSUE A MESSAGE IF REQUIRED
         UNPK  R0R4SAVE(3),ECB(2)    UNPACK THE ECB COMPLETION CODE
         NC    R0R4SAVE(2),=2X'0F'   CLEAR HIGH ORDER NIBBLES
         TR    R0R4SAVE(2),=C'0123456789ABCDEF'
         L     R15,IEXDSN            GET DSN ADDRESS
         LA    R7,WTOAREA            GET ADDRESS OF WTO AREA
         MVC   0(WTOLEN,R7),WTOLIST  COPY THE WTO
         MVC   38(2,R7),R0R4SAVE     COPY IN THE ECB COMPLETION CODE
         MVC   55(44,R7),0(R15)      COPY IN THE DSN
         WTO   MF=(E,(7))            ISSUE THE WTO
         B     IOOK                  BYPASS I/O OK MESSAGE
OKMSG    EQU   *
         AIF   ('&MSG' NE 'MSG').NOMSG
         L     R15,IEXDSN            GET DSN ADDRESS
         LA    R7,WTOAREA            GET ADDRESS OF WTO AREA
         MVC   0(WTOLEN,R7),WTOLIST  COPY THE WTO
         MVC   4(121,R7),MSG02       COPY IN THE MESSAGE
         MVC   55(44,R7),0(R15)      COPY IN THE DSN
         WTO   MF=(E,(7))            ISSUE THE WTO
.NOMSG   ANOP
IOOK     PGSER R,FREE,A=(R10),EA=(R8),ECB=0 PAGE FREE PROGRAM STORAGE
PGFREE   PGSER R,FREE,A=(R11),EA=(R9),ECB=0 PAGE FREE WORKAREA STORAGE
GOSWAP   SYSEVENT OKSWAP             SET SWAPPABLE
FREECSA  L     R1,SRBADDR            GET AREA ADDRESS
         FREEMAIN R,LV=SRBSIZE+IOSEND-IOSB,A=(R1),SP=227
FREEWORK LR    R1,R13                GET WORKAREA ADDRESS
         L     R13,4(,R1)            GET OLD SAVEAREA ADDRESS
         FREEMAIN R,LV=WORKLEN,A=(R1) FREE WORKAREA STORAGE
RETURN   LM    R14,R12,12(R13)       RESTORE ENVIRONMENT
         XR    R15,R15               SET RETURN CODE
         BR    R14                   RETURN
SRBINIT  EQU   *
*   THE FOLLOWING ROUTINE INITIALIZES THE SRB/IOSB AND CHANNEL PROGRAM
         LM    R5,R6,SRBADDR         GET SRB/IOSB ADDRESS
         XC    DATAAREA(40),DATAAREA CLEAR CHANNEL PROGRAM & DATA AREA
         USING PSA,0                 SET PSA ADDRESSABILITY
         USING SRB,R5                SET SRB ADDRESSABILITY
         USING IOSB,R6               SET IOSB ADDRESSABILITY
*   INITIALIZE THE SRB
         MVC   SRBID(4),=C'SRB '     MOVE IN SRB IDENTIFIER
         MVC   SRBPTCB(4),PSATOLD    POINT SRB'S PURGEDQ TCB TO US
         ST    R6,SRBPARM            SAVE IOSB ADDRESS IN SRB
*   INITIALIZE THE IOSB
         LA    R15,EXITSAVE          GET SAVEAREA ADDRESS
         ST    R15,IOSUSE            SAVE IT
         MVC   IOSUCB+1(3),IEXUCB+1  MOVE IN THE UCB ADDRESS
         ST    R5,IOSSRB             SAVE SRB ADDRESS IN IOSB
         L     R1,PSAAOLD            GET ASCB ADDRESS
         MVC   IOSASID(2),ASCBASID-ASCB(R1) SAVE THE ASID
         LA    R1,SEEKCCW            GET VIRTUAL CHANNEL PGM ADDRESS
         ST    R1,IOSVST             SAVE VIRTUAL ADDRESS OF CP
         LRA   R1,0(,R1)             GET REAL CHANNEL PGM ADDRESS
         ST    R1,IOSRST             SAVE REAL ADDRESS OF CP
         MVC   IOSPGAD(4),=A(TERMEXIT) GET TERMINATION EXIT ADDR
         MVC   IOSNRM(4),=A(NORMEXIT) GET NORMAL EXIT ADDRESS
         MVC   IOSABN(4),=A(NORMEXIT) GET ABNORMAL EXIT ADDRESS
         MVI   IOSDVRID,IOSMISID     SET MISCELLANEOUS DRIVER ID
         MVI   IOSFLA,IOSCCHN        ALLOW COMMAND CHAINING
         OI    IOSPKEY,IOSCHCMP      TELL IOS NOT TO BUILD CP PREFIX
         MVI   IOSOPT,IOSBYP         BYPASS CP PREFIXING
         MVC   DATAAREA(4),DS1EXT1+2 GET FIRST EXTENT CCHH
         MVI   DATAAREA+4,X'01'      SET RECORD NUMBER
         MVC   IOSEEK+3(4),DATAAREA  MOVE IN SEEK INFORMATION
         MVC   IOSEEKA+3(4),DATAAREA MOVE IN SEEK INFORMATION
*   INITIALIZE THE CHANNEL PROGRAM
         LRA   R0,IOSEEK+1           GET SEEK DATA REAL ADDRESS
         STCM  R0,B'0111',SEEKCCW+1  SAVE IN SEEK CCW
         MVI   SEEKCCW+4,CMDCD       SET COMMAND CHAINING FLAG
         MVI   SEEKCCW+7,X'06'       SET LENGTH
         MVI   SEEKCCW,SEEK          SET CHANNEL COMMAND
         LRA   R0,SFMCCW+5           GET SET FILE MASK DATA REAL ADDR
         STCM  R0,B'0111',SFMCCW+1   SAVE IN SET FILE MASK CCW
         MVI   SFMCCW+4,CMDCD        SET COMMAND CHAINING FLAG
         MVI   SFMCCW+7,X'01'        SET LENGTH
         MVI   SFMCCW,SFM            SET CHANNEL COMMAND
         LRA   R0,IOSEEK+3           GET SEARCH ID DATA REAL ADDRESS
         STCM  R0,B'0111',SIDCCW+1   SAVE IN SEARCH ID CCW
         MVI   SIDCCW+4,CMDCD        SET COMMAND CHAINING FLAG
         MVI   SIDCCW+7,X'05'        SET LENGTH
         MVI   SIDCCW,SID            SET CHANNEL COMMAND
         LRA   R0,SIDCCW             GET TIC REAL ADDRESS
         STCM  R0,B'0111',TICCCW+1   SAVE IN TIC CCW
         MVI   TICCCW+4,CMDCD        SET COMMAND CHAINING FLAG
         MVI   TICCCW+7,X'00'        SET LENGTH
         MVI   TICCCW,TIC            SET CHANNEL COMMAND
         LRA   R0,DATAAREA           GET REAL ADDRESS
         STCM  R0,B'0111',WRITECCW+1 SAVE IN CCW
         MVI   WRITECCW+4,SLI        SET CCW FLAGS
         MVI   WRITECCW+7,X'08'      SET LENGTH
         MVI   WRITECCW,WRITECKD     SET CHANNEL COMMAND
         BR    R14                   RETURN
NORMEXIT XR    R15,R15               NORMAL RETURN
         BSM   0,R14                 RETURN
TERMEXIT L     R13,IOSUSE-IOSB(,R1)  GET SAVE AREA ADDRESS
         STM   R0,R15,0(R13)         SAVE THE ENVIRONMENT
         LR    R6,R15                SAVE ROUTINE ADDRESS
         USING TERMEXIT,R6
         XR    R10,R10               GET I/O ...
         ICM   R10,B'1000',IOSCOD-IOSB(R1)   RETURN CODE
         LA    R11,ECB-EXITSAVE(,R13) GET ECB ADDRESS
         LR    R9,R13                R9 IS PRESERVED DURING B/E POST
         L     R15,16                GET CVT ADDRESS
         L     R15,CVTOPT01-CVT(,R15) GET POST ROUTINE ADDRESS
         BALR  R14,R15               POST THE ECB
         L     R1,4(,R9)             GET IOSB ADDRESS
         L     R6,60(,R9)            GET EXIT ADDRESS
         ICM   R1,B'1111',IOSIPIB-IOSB(R1) GET THE IPIB ADDRESS
         BZ    RELLOCK-TERMEXIT(R6)  IF NONE GO FREE LOCAL LOCK
         XR    R0,R0                 INDICATE LOCAL LOCK HELD
         L     R15,16                GET CVT ADDRESS
         L     R15,CVTIXAVL-CVT(,R15) GET IOCOM ADDRESS
         L     R15,IOCQCNT-IOCOM(,R15) GET PURGE IPIB IOS RTN ADDRESS
         BALR  R14,R15               UPDATE QUIESCE COUNT
RELLOCK  SETLOCK RELEASE,TYPE=LOCAL,RELATED=(POST)
         LM    R0,R15,0(R9)          RESTORE THE ENVIRONMENT
         XR    R15,R15               SET RETURN CODE
         BSM   0,R14                 RETURN
         LTORG
WTOLIST  WTO   'IGGPOST0 - INITIALIZATION FAILED (XX)  FOR DATASET XXXXX
               XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.  CONTACT SYSTEX
               M SUPPORT.',ROUTCDE=(1),DESC=(6),MF=L
WTOLEN   EQU   *-WTOLIST
MSG02    DC    CL121'IGGPOST0 - EOF INITIALIZATION COMPLETE FOR DATASETX
                XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'
PGMEND   EQU   *
SEEK     EQU   X'07'
SFM      EQU   X'1F'
SID      EQU   X'31'
TIC      EQU   X'08'
WRITECKD EQU   X'1D'
SLI      EQU   X'20'
CMDCD    EQU   X'40'
WORKAREA DSECT
SAVEAREA DS    18F
EXITSAVE DS    16F
SRBADDR  DS    F
IOSBADDR DS    F
ECB      DS    F
DATAAREA DS    D
SEEKCCW  DS    D
SFMCCW   DS    D
SIDCCW   DS    D
TICCCW   DS    D
WRITECCW DS    D
R0R4SAVE DS    5F
WTOAREA  DS    CL(WTOLEN)
WORKLEN  EQU   *-WORKAREA
         DSECT
         IECSDSL1 1
         DSECT
         IEFJFCBN
         IECIEXPL DSECT=YES
         IEFUCBOB PREFIX=YES
         IHAPSA
         IHAASCB
         IECDIOSB
         IECDIOCM
         IHASRB
         CVT   DSECT=YES
         $REQU
         END

                                              c Xephon 1992

