Page protection in MVS

Storage protection in MVS comes in three flavours: storage
key-controlled protection, low address protection, and page
protection.  This article will only concentrate on the page
protection facility.

The principle of page protection is based on bit 22 of the Page
Table Entry (PGTE) of every virtual page.  When this bit is
off, both fetching and storing are allowed.  When this bit is on,
only fetching is allowed.  Thus an entire 4K page can be
protected from unauthorized or accidental storing by turning on
the corresponding bit of its PGTE.

MVS uses this facility quite extensively to protect its sensitive
areas.  One example is the SVC table.  In prior releases of
MVS, anyone running in key zero could freely update (and also
destroy) this table.  Since MVS/XA, this table has been page
protected.  To update this table (eg to install a user-written
SVC), the special macro, SVCUPDTE, must be used.  An
alternative would be to find the PGTE of the page containing
the SVCTABLE, turn the page protect bit off, update the table,
and turn the bit on again.  This method works, but it is very
dangerous and not recommended.

The page protect facility can also be used by a user program to
protect any virtual page from unauthorized updates (even by
users running in key zero).  The following two routines have
been written to demonstrate how this can be done.
PWLDRVR1 is a driver program.  It GETMAINs a page in the
CSA on a page boundary and then calls PWLZPAGE to
flip/flop the page protect bit of the corresponding page.  The
TPROT instruction is used to test the storing status of the page
before and after (flipping the bit). Both routines must be linked
into an authorized library with AC=1.

A word of caution: any page that has been page protected must
be unprotected before it can be freed.  Otherwise a S0C4 abend
will occur.  Extreme care must be be exercised when using this
facility.

Finally, although PWLZPAGE has been written to protect a
page in the CSA, it can be easily modified to protect any page
in the user private area.


SOURCE LISTING OF DRIVER PROGRAM PWLDRVR1

PWLDRVR1 INIT                         - in-house initialization routine
         B     DRVR000
         DC    C' PWLDRVR1 &SYSDATE &SYSTIME'
DRVR000  DS    0H
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=2
         L     R5,=F'4096'
         GETMAIN RC,LV=(5),SP=228,BNDRY=PAGE   COMMON AREA
         LR    R2,R1
         LTR   R15,R15
         BZ    DRVR100
         WTO   'GETMAIN FAILURE'
         B     DRVR900
DRVR100  DS    0H
         ST    R2,ADDR1
         TPROT 0(R2),X'00'(R0)
         BC    8,DRVR200             CAN FETCH AND STORE
         WTO   'CANNOT FETCH AND STORE INITIALLY'
         B     DRVR400
DRVR200  DS    0H
         ST    R2,PARMADR
         LA    R1,PARMLST
         CALL  PWLZPAGE
         LTR   R15,R15
         BZ    DRVR300
         WTO   'ERROR RETURNING FROM PWLZPAGE - 1'
         B     DRVR400
DRVR300  DS    0H
         TPROT 0(R2),X'00'(R0)
         BC    8,DRVR400         CAN FETCH AND STORE
         WTO   'PAGE SUCCESSFULLY PROTECTED'
DRVR400  DS    0H
         MVC   PARMADR(4),ADDR1
         MVC   PARMACT,=H'0001'  SPECIFY UNPROTECT FUNCTION CODE
         LA    R1,PARMLST
         CALL  PWLZPAGE
         LTR   R15,R15
         BZ    DRVR500
         WTO   'ERROR RETURNING FROM PWLZPAGE - 2'
         B     DRVR900           UNPROTECT FAILED. DO NOT FREEMAIN
DRVR500  DS    0H
         TPROT 0(R2),X'00'(R0)   CHECK STORING STATUS
         BC    8,DRVR600         CAN FETCH AND STORE
         WTO   'PAGE UNPROTECT FAILED'
         B     DRVR900
DRVR600  DS    0H
         WTO   'PAGE SUCCESSFULLY UNPROTECTED'
         L     R5,=F'4096'
         L     R4,ADDR1
         FREEMAIN RC,LV=(5),A=(4),SP=228
         LTR   R15,R15
         BZ    DRVR900
         WTO   'FREEMAIN FAILED'
DRVR900  DS    0H
         MODESET KEYADDR=OLDKEY,WORKREG=2
         B     EXIT
ADDR1    DS    F
OLDKEY   DS    F
ZERO     DC    F'0'
PARMLST  DS    0D
PARMACT  DC    X'0000'               FUNCTION CODE
         DC    X'0000'               RESERVED
PARMADR  DC    X'00000000'           PAGE ADDRESS
         END   PWLDRVR1


SOURCE LISTING OF ROUTINE PWLZPAGE

PWLZPAGE START
*FUNCTION: TURN ON/OFF PAGE PROTECT FOR SPECIFIED ADDRESS IN CSA
*          CALLED BY PROGRAM PWLDRVR1
*INPUT: R1 POINTS TO PARAMETER LIST:
*          H - FUNCTION CODE
*              X'0000' = PROTECT PAGE
*              X'0001' = UNPROTECT PAGE
*          H - RESERVED
*          F - INPUT VIRTUAL ADDRESS
*OUTPUT: PARAMETER LIST:
*          H - RETURN CODE
*              X'00' = FUNCTION SUCCESSFUL
*              X'04' = FUNCTION UNSUCCESSFUL
*          F - CORRESPONDING REAL ADDRESS IF SUCCESSFUL
* ORDER OF BITS IN COMMENTS:  0 1 2 3 ....... 31  (ASSUME 31 BIT ADDR)
*       BIT 1 TO 11 = SX      MAX 2**11 = 2048 SEGMENTS
*       BIT 12 TO 19 = PX     MAX 2**8  = 256 PAGES IN EACH SEGMENT
*       BIT 20 TO 31 = BX     MAX 2**12 = 4096 BYTES IN EACH PAGE
         STM   R14,R12,12(R13)
         LR    R6,R1          SAVE PARMLST ADDRESS
         LR    R7,R13
         BALR  R12,R0
         USING *,R12
         LA    R12,0(R12)
         GETMAIN R,LV=72
         LR    R13,R1
         ST    R7,4(R13)
         ST    R13,8(R7)
         LR    R1,R6          RESTORE PARMLST ADDRESS
         B     ENDINIT
EXIT     DS    0H
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R2,R12,28(R13)
         BR    R14
ENDINIT  DS    0H
         B     ZPAG0000
         DC    C' PWLZPAGE &SYSDATE &SYSTIME'
ZPAG0000 DS    0H
         LR    R8,R1          SAVE PARMLST ADDRESS
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=2
         $AM31                      MACRO TO SET TO 31 BIT ADDRESSING
         L     R2,X'10'             CVT
         L     R2,X'164'(R2)        CVTPVTP
         L     R3,4(R2)             PVTRIT - START OF RIT
         CLC   =C'RIT ',0(R3)
         BNE   ZPAG9100
         ST    R3,WORK             $FOOTPRINT
         L     R4,X'18'(R3)         R4=ADDR OF RABC
*                                      1ST RAB IS COMMON
         CLC   =C'RABC',0(R4)
         BNE   ZPAG9100
         ST    R4,WORK+4           $FOOTPRINT
         L     R4,X'20'(R4)         R4=SGT (OF RABC)
         ST    R4,WORK+8
         L     R3,X'D0'(R3)         R3=RITPFT
         ST    R3,WORK+12
         L     R5,4(R8)             LOAD VIRTUAL ADDRESS
         SRL   R5,10
         N     R5,K1                R5=OFFSET INTO PGT
*                                      (8 BIT PAGE INDEX: BIT 12 TO 19
*                                         TIMES 4)
         L     R2,4(R8)             LOAD INPUT VIRTUAL ADDRESS
         SRL   R2,18
         N     R2,K2                R2=OFFSET INTO SGT
*                                      (11 BIT SEG INDEX: BIT 1 TO 11
*                                         TIMES 4)
         AR    R2,R4                R2=ADDR OF SGTE
         TM    3(R2),B'00100000'    IF VALID SEGMENT
         BNO   ZPAG0010             CONTINUE
         B     ZPAG0900             ERROR - INVALID SEGMENT
ZPAG0010 DS    0H
         L     R6,0(R2)             R6=SGTE
         N     R6,K3                R6=19 BIT SEGMENT ADDRESS
         SRL   R6,7                    (OFFSET INTO PFT)
         AR    R6,R3                R6=ADDR OF PFTE
         L     R6,X'14'(R6)         R6=PFTVSA
         AR    R6,R5                R6=ADDR OF PGTE
         LR    R5,R6                SAVE ADDR OF PGTE
         ST    R6,WORK+28          $FOOTPRINT
         L     R6,0(R6)             R6=PGTE
         N     R6,K3                R6=19 BIT REAL PAGE ADDR
         L     R2,4(R8)             LOAD INPUT VSA
         N     R2,K4                R2=12 BIT BYTE INDEX
         AR    R6,R2                R6=31 BIT REAL ADDDR
         ST    R6,WORK+32          $FOOTPRINT
         L     R4,4(R8)             LOAD INPUT VSA
         ST    R6,4(R8)             STORE REAL ADDR IN PARMLST
         LRA   R3,0(0,R4)
         ST    R3,WORK+36          $FOOTPRINT
         CR    R3,R6
         BNE   ZPAG0910
         LH    R2,0(R8)
         CH    R2,=H'0'
         BE    ZPAG0020
         CH    R2,=H'1'
         BE    ZPAG0030
         WTO   'ZPAG001I - ILLEGAL FUNCTION CODE'
         B     ZPAG9100
ZPAG0020 DS    0H
         OI    2(R5),X'02'          TURN ON PAGE PROTECT
         B     ZPAG9000
ZPAG0030 DS    0H
         NI    2(R5),B'11111101'    TURN OFF PAGE PROTECT
         B     ZPAG9000
ZPAG0900 DS    0H                   ERROR - INVALID SEGMENT
         WTO   'ZPAG002I - INVALID SEGMENT'
         B     ZPAG9100
ZPAG0910 DS    0H                   XLATED ADDRESS NOT SAME AS LRA
         WTO   'ZPAG003I - TRANSLATION ERROR'
         B     ZPAG9100
ZPAG9000 DS    0H                   SET SUCCESSFUL
         LA    R2,0
         STH   R2,0(R8)             RETURN CODE
         B     ZPAG9900
ZPAG9100 DS    0H                   SET UNSUCCESSFUL
         LA    R2,4
         STH   R2,0(R8)             RETURN CODE
         B     ZPAG9900
ZPAG9900 DS    0H                   EXIT
         $AM24                      MACRO TO SET TO 24 BIT ADDRESSING
*FOLLOWING TO DISPLAY OPTIONAL DEBUGGING AREA
         MODESET KEYADDR=OLDKEY,WORKREG=2
OPEN     DS    0H
         $AM24
         OPEN  (SYSPRINT,OUTPUT)
         MVC   WORK+40(8),0(R8)
         LA    R3,WORK
         PUT   SYSPRINT,(R3)
         CLOSE (SYSPRINT)
         B     EXIT
PARMLST  DC    X'0001'               FUNCTION CODE
         DC    X'0000'               RESERVED
         DC    X'00000000'           PAGE ADDRESS
ZERO     DC    F'0'
OLDKEY   DS    F
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS
WORK     DS    CL80
K1       DC    X'000003FC'
K2       DC    X'00001FFC'
K3       DC    X'7FFFF000'
K4       DC    X'00000FFF'
         IHAPVT
         IARRCE
         END   PWLZPAGE


SOURCE LISTING OF MACRO $AM24

         MACRO
         $AM24
* SET TO 24-BIT ADDRESSING
         L     R14,16
         LA    R14,0(R14)
         TM    X'74'(R14),X'80'       MVS/XA?
         BZ    AM24A&SYSNDX
         LA    R14,AM24A&SYSNDX
*        BSM   0,R14                  RESET AMODE & BR TO AM24A&SYSNDX
         DC    X'0B0E'                BSM  R0,R14
AM24A&SYSNDX  DS  0H
         MEND


SOURCE LISTING OF MACRO $AM31

         MACRO
         $AM31
* SET TO 31-BIT ADDRESSING
         L     R14,16
         TM    X'74'(R14),X'80'       MVS/XA?
         BZ    AM31A&SYSNDX
         LA    R14,AM31A&SYSNDX
         O     R14,AM31B&SYSNDX        INDICATE 31-BIT ADDRESSING
*        BSM   0,R14      CHANGE TO AMODE=31 & BRANCH TO AM31A&SYSNDX
         DC    X'0B0E'                BSM  R0,R14
         DS    0F
AM31B&SYSNDX  DC    X'80000000'
AM31A&SYSNDX  DS    0H
         MEND


LINK EDIT STATEMENTS (LINK PARM='AMODE=24,AC=1')

//LKED.SYSIN DD *
  INCLUDE SYSLIB(PWLZPAGE)
  ENTRY PWLDRVR1
  NAME  PWLDRVR1(R)


JCL TO EXECUTE PWLDRVR1

//    EXEC PGM=PWLDRVR1
//STEPLIB  your authorized library
//SYSPRINT DD SYSOUT=A,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)


Peter W K Lee
Software Analyst (Canada)                              c Peter W K Lee 1991

