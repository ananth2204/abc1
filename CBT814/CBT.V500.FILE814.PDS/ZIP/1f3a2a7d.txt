Dynamic job release control

Many circumstances require the scheduling of a cycle of batch
jobs when the scheduling parameters are not very complicated
(eg JOB1 must finish with condition code zero before JOB2
can be released, JOB2 must finish with condition code four or
less before JOB3 can be released).  When this type of
scheduling is required it might be appropriate to allow the jobs
to schedule themselves rather than rely on operations staff to
monitor condition codes and release jobs in the correct
sequence.  A simple program that can release jobs is all that is
required to perform this type of scheduling.

The RLSEJOB program that follows is capable of performing
this function.  The job name of a job that is to be released is
passed as a parameter to the program.  The program scans the
JES2 address space to see if there are any jobs waiting to
execute in held status with the requested job name.  If one is
found, a $AJ'job#' command (where job# is the job number of
the job to be released) is issued.  This method is preferred to
the $A'jobname' command since release by job name will not
release anything if it finds multiple jobs with the same job
name, even if only one of those jobs is waiting to execute in
held status.

The RLSEJOB program has been tested in a JES2 2.2.0
environment, but should work with any release of JES2 that
runs under MVS/XA.  The program should reside in an
authorized library with attribute AC(1) and can be invoked as
follows:

     //RELEASE  EXEC PGM=RLSEJOB,PARM='jobname'


RLSEJOB PROGRAM

         MACRO
&LBL     @AMODE &MODE
.*   THE CONTENTS OF REG R14 ARE NOT PRESERVED BY THIS MACRO
.*   MODE:  IS THE ADDRESSING MODE YOU WANT TO SET
         AIF   ('&MODE' EQ '24').AMODE24
         AIF   ('&MODE' EQ '31').AMODE31
         MNOTE 5,'INVALID MODE SPECIFIED'
         AGO   .DONE                   ALL DONE
.AMODE24 LA    14,*+6                  SET ADDRESS VALUE
         BSM   0,14                    SET ADDRESS MODE
         AGO   .DONE                   ALL DONE
.AMODE31 CNOP  0,4                     ALIGN TO FULL WORD
         L     14,*+8                  SET ADDRESS VALUE
         B     *+8                     BRANCH AROUND CONSTANT
         DC    A(X'80000000'+*+6)      BRANCH ADDRESS AND ADDRESS MODE
         BSM   0,14                    SET ADDRESS MODE
.DONE    ANOP
         MEND
RLSEJOB  CSECT
*   THE RLSEJOB PROGRAM IS USED TO RELEASE JOBS THAT HAVE BEEN
*   PLACED ON HOLD IN THE JOB ENTRY SUBSYSTEM.  THE PROGRAM ACCEPTS
*   A JOBNAME AS A PARAMETER. IT SCANS THE JQE CHAIN IN THE JES2
*   ADDRESS SPACE LOOKING FOR THE FIRST JQE WITH THE CORRECT JOBNAME,
*   A JOB HELD INDICATOR (EITHER THE JQE1HLD1 OR JQE4JCLH FLAG SET),
*   AND EITHER THE $INPUT OR $XEQ FLAG SET.  IT EXTRACTS THE JOBNUMBER
*   FROM THE JQE AND ISSUES A '$AJXXXX' COMMAND (WHERE "XXXX" IS THE
*   JOBNUMBER).
*   THE FOLLOWING STEP COULD BE ADDED TO A JOB STREAM TO CAUSE A
*   HELD JOB, 'MYJOB', TO BE RELEASED:
*   //RELEASE  EXEC PGM=RLSEJOB,PARM='MYJOB'
         STM   R14,R12,12(R13)         SAVE ENVIRONMENT
         LR    R10,R15                 SET MODULE ...
         USING RLSEJOB,R10                ADDRESSABILITY
         ST    R13,SAVEAREA+4          SAVE CURRENT SAVE AREA ADDRESS
         LA    R13,SAVEAREA            LOAD NEW SAVE AREA ADDRESS
         L     R2,0(,R1)               GET PARM ADDRESS
         XR    R3,R3                   CLEAR R3
         LH    R3,0(,R2)               GET LENGTH
         LTR   R3,R3                   ZERO?
         BZ    RET12                   YES - END
         CH    R3,=H'8'                GREATER THAN 8?
         BH    RET12                   YES - END
         LA    R2,2(,R2)               POINT PAST LENGTH
         ST    R3,PARMLEN              SAVE THE LENGTH
         BCTR  R3,0                    REDUCE BY ONE
         EX    R3,JOBNMVC              MOVE THE JOBNAME
         L     R3,16                   LOAD ADDRESS OF CVT
         L     R4,CVTJESCT-CVTMAP(,R3) LOAD ADDRESS OF JESCT
         LTR   R4,R4                   A VALID JESCT ADDRESS?
         BZ    RET04                   NO - THEN FINISH UP
         CLC   0(4,R4),=CL4'JEST'      IT'S THE JESCT?
         BNE   RET08                   NO - WE HAVE AN ERROR
         L     R3,CVTASVT-CVTMAP(,R3)  POINT TO ASVT
         CLC   ASVTASVT-ASVT(4,R3),=CL4'ASVT' ASVT?
         BNE   RET08                   NO - WE HAVE AN ERROR
         LA    R5,ASVTENTY-ASVT(,R3)   POINT TO ENTRY MAP
         L     R6,ASVTMAXU-ASVT(,R3)   LOAD MAXIMUM ADDRESS SPACES
RLSE010  TM    0(R5),X'80'             ASID USED?
         BO    RLSE020                 NO - CHECK NEXT ONE
         L     R7,0(R5)                LOAD ADDRESS OF ASCB
         L     R8,ASCBJBNS-ASCB(,R7)   LOAD ADDRESS OF JOBNAME
         CLC   0(8,R8),=C'JES2    '    PRIMARY JES2?
         BE    RLSE030                 YES - WE'RE ON OUR WAY
RLSE020  LA    R5,4(,R5)               POINT TO NEXT ASID ENTRY
         BCT   R6,RLSE010              CHECK OUT IF LOOP COUNT PERMITS
         B     RET04                   IF NOT - THEN FINISH UP
RLSE030  LH    R5,ASCBASID-ASCB(,R7)   LOAD ASID OF JES2
         L     R3,JESSSCT-JESCT(,R4)   POINT TO SSCT
RLSE040  CLC   SSCTID-SSCT(4,R3),=CL4'SSCT'  SSCT?
         BNE   RET08                   NO - THEN WE HAVE AN ERROR
         CLC   SSCTSNAM-SSCT(4,R3),=C'JES2    ' JES2 SSCVT?
         BE    RLSE050                 YES - WE CAN GO ON
         L     R3,SSCTSCTA-SSCT(,R3)   LOAD POINTER TO NEXT
         LTR   R3,R3                   END OF CHAIN?
         BZ    RET08                   YES - SOME KIND OF ERROR EXISTS
         B     RLSE040                 NO - CHECK OUT THE NEXT ONE
RLSE050  L     R3,SSCTSSVT-SSCT(,R3)   POINT TO SVDSECT
         USING SVT,R3
         ST    R5,JESASID              SAVE JES ASID
         L     R7,SVTHCT               LOAD POINTER TO HCT
         ST    R7,HCTADDR              SAVE HCT ADDRESS
         MODESET MODE=SUP,KEY=ZERO
         EPAR  R1                      EXTRACT PRIMARY ASID
         ST    R1,PRIMASID             SAVE IT
         L     R1,=F'1'                LOAD AUTHORIZATION INDEX
         AXSET AX=(R1)                 AUTHORIZATION INDEX FOR ASIDS
         L     R1,JESASID              GET ASID OF JES2 ADDRESS SPACE
         SSAR  R1                      SET SECONDARY ASID TO JES2
         L     R4,=F'4'                SET LENGTH OF $JOBQPTR FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JQEBASE              GET TARGET ADDRESS
         MVCP  0(R4,R6),$JOBQPTR-HCT(R7),R5  MOVE IN JQE BASE ADDRESS
         L     R4,=F'2'                SET LENGTH OF $MAXJOBS FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,NUMJQES              GET TARGET ADDRESS
         L     R7,HCTADDR              GET HCT ADDRESS
         MVCP  0(R4,R6),$MAXJOBS-HCT(R7),R5  MOVE IN MAX # OF JQES
         L     R4,=F'2'                SET LENGTH OF $JQELEN FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JQELEN               GET TARGET ADDRESS
         L     R7,HCTADDR              GET HCT ADDRESS
         MVCP  0(R4,R6),$JQELEN-HCT(R7),R5  MOVE IN LENGTH OF A JQE
         L     R1,PRIMASID             ASID OF US
         SSAR  R1                      SET SECONDARY ASID TO US
         MODESET MODE=PROB,KEY=NZERO
         L     R7,JQEBASE              GET STARTING JQE ADDRESS
         USING JQE,R7
         XR    R8,R8                   CLEAR R8
         LH    R8,NUMJQES              SET LOOP COUNTER
         XR    R2,R2                   CLEAR R2
         LH    R2,JQELEN               GET JQE LENGTH
         GETMAIN RU,LV=(R2)            GET JQE AREA STORAGE
         LTR   R15,R15                 GOT STORAGE O.K.?
         BNZ   RET16                   NO - DON'T GO ON
         ST    R1,JQEADDR              SAVE AREA ADDRESS
JQELOOP  EQU   *
         ST    R7,JQESAVE              SAVE JQE ADDRESS
         @AMODE 31                     31 BIT ADDRESSING
         MODESET MODE=SUP,KEY=ZERO
         L     R1,JESASID              GET ASID OF JES2 ADDRESS SPACE
         SSAR  R1                      SET SECONDARY ASID TO JES2
         XR    R4,R4                   CLEAR R4
         LH    R4,JQELEN               SET JQE LENGTH
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         L     R6,JQEADDR              GET TARGET ADDRESS
         MVCP  0(R4,R6),0(R7),R5       MOVE IN THE JQE
         L     R1,PRIMASID             ASID OF US
         SSAR  R1                      SET SECONDARY ASID TO US
         MODESET MODE=PROB,KEY=NZERO
         @AMODE 24                     24 BIT ADDRESSING
         L     R7,JQEADDR              GET JQE AREA ADDRESS
         CLC   JQEJNAME(8),JOBNAME     OUR JOBNAME?
         BNE   NEXTJQE                 NO - GET NEXT JQE
         TM    JQETYPE,$FREE           A FREE JQE?
         BO    NEXTJQE                 YES - GET NEXT JQE
         TM    JQETYPE,$INPUT+$XEQ     WAITING EXECUTION?
         BZ    NEXTJQE                 NO - GET NEXT JQE
         TM    JQEFLAG1,JQE1HLD1       A HELD JOB?
         BO    GORLSE                  YES - GO RELEASE IT
         TM    JQEFLAG4,JQE4JCLH       A HELD JOB?
         BZ    NEXTJQE                 NO - GET NEXT JQE
GORLSE   XR    R15,R15                 CLEAR R15
         ICM   R15,B'0011',JQEJOBNO    GET BINARY JOB NUMBER
         CVD   R15,DBL2                CONVERT TO DECIMAL
         UNPK  DBL1,DBL2               UNPACK THE VALUE
         OI    DBL1+7,X'F0'            CLEAR THE SIGN
         MVC   CMDDATA+3(4),DBL1+4     MOVE JOBNUMBER TO COMMAND
         MODESET MODE=SUP,KEY=ZERO
         XR    R0,R0                   CLEAR R0
         LA    R1,CMD                  GET COMMAND AREA ADDRESS
         SVC   34                      ISSUE COMMAND
         MODESET MODE=PROB,KEY=NZERO
         MVC   WTORLSE+19(8),JOBNAME   MOVE IN JOBNAME
         MVC   WTORLSE+29(4),DBL1+4    MOVE IN JOB#
WTORLSE  WTO   'RLSE001I - XXXXXXXX JXXXX HAS BEEN RELEASED.'
         B     RET00                   RETURN
NEXTJQE  L     R7,JQESAVE              GET CURRENT JQE ADDRESS
         AH    R7,JQELEN               POINT TO NEXT ONE
         BCT   R8,JQELOOP              GET THE NEXT ONE
         WTO   'RLSE900I - NO HELD JOB WAITING FOR EXECUTION WITH THE RX
               EQUESTED JOBNAME.',ROUTCDE=(1),DESC=(6)
RET00    EQU   *
         XR    R2,R2                   CLEAR R2
         LH    R2,JQELEN               GET JQE LENGTH
         L     R7,JQEADDR              GET JQE STORAGE ADDRESS
         FREEMAIN RU,LV=(R2),A=(R7)    FREE JQE AREA STORAGE
         XR    R15,R15                 SET RETURN CODE
         B     END                     RETURN
RET16    L     R15,=F'16'              SET RETURN CODE
         B     END                     RETURN
RET12    L     R15,=F'12'              SET RETURN CODE
         B     END                     RETURN
RET08    L     R15,=F'8'               SET RETURN CODE
         B     END                     RETURN
RET04    L     R15,=F'4'               SET RETURN CODE
END      L     R13,SAVEAREA+4          RELOAD SAVE AREA ADDRESS
         L     R14,12(,R13)            RELOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE ENVIRONMENT
         BR    R14                     GO HOME
CMD      DS    0F
         DC    X'000B0000'
CMDDATA  DC    C'$AJ    '
JOBNAME  DC    C'        '
JOBNMVC  MVC   JOBNAME(1),0(R2)
PARMLEN  DS    F
HCTADDR  DS    F
NUMJQES  DS    H
JQELEN   DS    H
DBL1     DS    D
DBL2     DS    D
SAVEAREA DS    18F
JESASID  DS    F
PRIMASID DS    F
JQEBASE  DS    F
JQESAVE  DS    F
JQEADDR  DS    F
         COPY $HASPGBL
         $HASPEQU
         $XECB
         $MIT
         $SCAT
         $HFAME
         $PCE
         $JQE
         $SVT
&MACSPLV SETC  '2'
         $HCT
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         IEFJSCVT
         IEFJESCT
         END


                                                                                   c Xephon 1990

