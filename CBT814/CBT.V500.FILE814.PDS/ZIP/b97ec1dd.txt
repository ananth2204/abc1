Automated creation of user modifications
The maintenance of AMASPZAP (SUPERZAP) user modifications to the operating
system is a tedious chore.  When a module is changed by an APAR or replaced by a
PTF, you must sometimes spend many hours reworking module offsets for
verification and replacement.  An easier way would be to let the system generate
the required changes with minor modifications to some basic input information.
The following program, ASMTOZAP, does just that.  The reason for using ASMTOZAP
is to create a special format Assembler program skeleton with embedded ASMTOZAP
control cards telling it where to verify and replace data in an existing module.
The Assembler code is then assembled and the assembly listing is passed to the
ASMTOZAP program via SYSUT1, which will then produce a report to SYSPRINT and a
deck suitable for input to AMASPZAP or, with a little more effort, a deck
suitable for SMP processing.  In order for the ASMTOZAP program to work
correctly, the assembly of the input source program needs to be done with the
Assembler PRINT DATA option.
Below is the sample Assembler code for an SMP user modification to module
IEEMB810 in ASMTOZAP format.  The program begins with a CSECT card and the PRINT
DATA statement.  The next 12 *PUNCH comment cards are read by ASMTOZAP and cause
it to punch the specified text out.  The next three cards require research into
the program being ZAPped.  By looking at the microfiche for the module, I
determined that register 12 was used as its base register and its initial value
was XÔ20Õ (this is required to code a USING statement), the instructions I wish
to verify and replace begin at offset XÔ3B4Õ and the patch area in IEEMB810 that
I will use begins at offset XÔ490Õ.  The two EQU statements are assigned labels
so that we can reference them in later ORG statements.
The next two ASMTOZAP control cards start the ZAP verification process and will
punch a comment card into the output ZAP deck.  We then ORG to the area we want
to verify and replace it, after which we follow with the three instructions we
wish to verify.  Then we ORG to the patch area to verify four full words of
zeros.
Having completed the verification process, the *SZAP and *PUNCH control cards
begin the ZAP replacement process and will punch a comment card into the output
ZAP deck respectively.  We then ORG to the area that we will change to branch to
the patch area and replace it with a branch to label NEWCODE.  Then we ORG to
the patch area label PATCH.  The instructions at labels NEWCODE to ENDZAP will
replace the contents of the patch area.  The *EZAP control card then ends ZAP
replacement in case there is Assembler code following it which you do not want
scanned.  If there were more areas to verify and replace you could use the *PZAP
control card to pause ZAP verification/replacement and later resume it with a
*SZAP control card.
This skeleton program is now assembled and the Assembler SYSPRINT listing is
passed to ASMTOZAP as input.  ASMTOZAP will then produce an 80-byte card image
deck via SYSPUNCH suitable for an AMASPZAP SYSIN file or an SMP SMPPTFIN input
file.
This should be all the complex research you have to do to maintain the module
for a long time.  Now, if there is a change to IEEMB810, the only things that
need to be done are to check what the new offsets are to the ZAPped instruction
and patch areas, check the base register and its value, and check the sequence
of instructions you are verifying and replacing.  Usually the only thing to
change is the offsets to the ZAPped instruction and patch area, after which you
can assemble the source again and run it through ASMTOZAP to produce an updated
AMASPZAP or SMPPTFIN deck.
This program is similar to another popular public domain program written in PL/I
available on the SHARE or Connecticut Bank MVS modifications tape.  Assembler
was chosen for this one since most systems programmers understand it more than
PL/I and they may not have a PL/I compiler.  As some regular readers of MVS
Update may have noticed, this was the process I used to create the SMP user
modification for my article in issue 5 to restrict the use of the MVS RESET
command.
For simple one or two line ZAPs, this method would not be necessary.  For those
occasions where you would need to rework many instruction displacements or just
to make modification coding easier by being able to code Assembler mnemonics and
macro calls, though, this could prove to be a valuable tool.
USERMOD TO IEEMB810
IEEMB810 CSECT                    ESTABLISH CSECT
         PRINT DATA
***      BEGINNING OF SMP CONTROL CARDS
*PUNCH ++USERMOD(LM00145).
*PUNCH ++VER(Z038) FMID(HBB2102).
*PUNCH ++ZAP(IEEMB810) /* THIS ZAP HOOKS INTO IEEMB810 BEFORE A
*PUNCH                    SYSEVENT RESETPG IS ISSUED. IT CALLS PROGRAM
*PUNCH                    RESETICS TO VALIDATE THE PERFORMANCE GROUP
*PUNCH                    ENTERED ON THE RESET COMMAND.  IEEMB810 IS
*PUNCH                    MARKED REENTRANT/REUSABLE AND THIS ZAP WILL
*PUNCH                    VIOLATE REENTRANCY (SEE COMMENTS MARKED WITH
*PUNCH                    ASTERISK).  AN ALTERNATIVE METHOD IS TO
*PUNCH                    REWRITE RESETICS AS AN SVC TO REPLACE THE
*PUNCH                    IEEMB810 SYSEVENT RESETPG. */ .
*PUNCH  NAME IEEMB810
         USING IEEMB810+X'20',12 ESTABLISH ADDRESSABLITY TO CSECT
ZAP      EQU   IEEMB810+X'3B4'   ZAPPED INSTRUCTION
PATCH    EQU   IEEMB810+X'490'   PATCH AREA
*SZAPV   START ZAP VERIFICATION
*PUNCH * START ZAP VERIFICATION
         ORG   ZAP           DISPLACE TO ZAP AREA
         B     SVC95         VERIFY BRANCH
         DC    AL2(31)       VERIFY SYSEVENT CODE
SVC95    SVC   95            VERIFY SYSEVENT SVC
         ORG   PATCH         DISPLACE TO PATCH AREA
         DC    4F'0'         VERIFY PATCH
         DC    4F'0'         VERIFY PATCH
         DC    4F'0'         VERIFY PATCH
*SZAPR   START ZAP REPLACE
*PUNCH * START ZAP REPLACE
         ORG   ZAP           DISPLACE TO ZAP AREA
         B     NEWCODE       REPLACE BRANCH
         ORG   PATCH         DISPLACE TO PATCH AREA
NEWCODE  LA    15,PGMNAME    LOAD R15 W/A(PGMNAME)
         ST    15,PGMPTR    *STORE A(PGM) IN PARM*
         ST    14,R14SAVE   *SAVE R14 FOR RETURN*
         BAL   15,SVC        BRANCH TO LINK
PGMPTR   DC    F'0'          A(MODULE NAME)--|
DCBPTR   DC    F'0'          DCB POINTER     |
PGMNAME  DC    CL8'RESETICS' PROGRAM NAME----|
R14SAVE  DC    F'0'          R14 SAVEAREA
SVC      SVC   6             LINK TO RESETICS
         L     14,R14SAVE    RELOAD R14
ENDZAP   B     SVC95         BACK TO MAINLINE
***   $$$ COMMENTS WITH ASTERISKS VIOLATE REENTRANCY $$$   ***
*EZAP END ZAP REPLACEMENT
         END
SAMPLE JCL
//ASMTOZAP EXEC PGM=ASMTOZAP
//STEPLIB  DD DISP=SHR,DSN=your.load.library
//SYSUT1   DD DISP=SHR,DSN=your.assemblr.output.listing  INPUT
//SYSPUNCH DD DISP=SHR,DSN=your.card.image.library       PUNCH OUTPUT
//SYSPRINT DD SYSOUT=*                                   REPORT OUTPUT
SAMPLE OUTPUT
++USERMOD(LM00145).
++VER(Z038) FMID(HBB2102).
++ZAP(IEEMB810) /* THIS ZAP HOOKS INTO IEEMB810 BEFORE A
                   SYSEVENT RESETPG IS ISSUED. IT CALLS PROGRAM
                   RESETICS TO VALIDATE THE PERFORMANCE GROUP
                   ENTERED ON THE RESET COMMAND.  IEEMB810 IS
                   MARKED REENTRANT/REUSABLE AND THIS ZAP WILL
                   VIOLATE REENTRANCY (SEE COMMENTS MARKED WITH
                   ASTERISK).  AN ALTERNATIVE METHOD IS TO
                   REWRITE RESETICS AS AN SVC TO REPLACE THE
                   IEEMB810 SYSEVENT RESETPG. */ .
 NAME IEEMB810
* START ZAP VERIFICATION
 VER 03B4 47F0C39A                  B     SVC95         VERIFY BRANCH
 VER 03B8 001F                      DC    AL2(31)       VERIFY SYSEVENT CODE
 VER 03BA 0A5F             SVC95    SVC   95            VERIFY SYSEVENT SVC
 VER 0490 0000000000000000          DC    4F'0'         VERIFY PATCH
 VER 0498 0000000000000000
 VER 04A0 0000000000000000          DC    4F'0'         VERIFY PATCH
 VER 04A8 0000000000000000
 VER 04B0 0000000000000000          DC    4F'0'         VERIFY PATCH
 VER 04B8 0000000000000000
* START ZAP REPLACE
 REP 03B4 47F0C470                  B     NEWCODE       REPLACE BRANCH
 REP 0490 41F0C488         NEWCODE  LA    15,PGMNAME    LOAD R15 W/A(PGMNAME)
 REP 0494 50F0C480                  ST    15,PGMPTR    *STORE A(PGM) IN PARM*
 REP 0498 50E0C490                  ST    14,R14SAVE   *SAVE R14 FOR RETURN*
 REP 049C 45F0C494                  BAL   15,SVC        BRANCH TO LINK
 REP 04A0 00000000         PGMPTR   DC    F'0'          A(MODULE NAME)--|
 REP 04A4 00000000         DCBPTR   DC    F'0'          DCB POINTER     |
 REP 04A8 D9C5E2C5E3C9C3E2 PGMNAME  DC    CL8'RESETICS' PROGRAM NAME----|
 REP 04B0 00000000         R14SAVE  DC    F'0'          R14 SAVEAREA
 REP 04B4 0A06             SVC      SVC   6             LINK TO RESETICS
 REP 04B6 58E0C490                  L     14,R14SAVE    RELOAD R14
 REP 04BA 47F0C39A         ENDZAP   B     SVC95         BACK TO MAINLINE
PROGRAM LISTING
ASMTOZAP CSECT
         SAVE  (14,12),,ASMTOZAP-&SYSDATE
         LR    R12,R15
         USING ASMTOZAP,R12
         LA    R14,SAVE
         ST    R13,4(R14)
         ST    R14,8(R13)
         LR    R13,R14
         OPEN  (SYSUT1,,SYSPUNCH,OUTPUT,SYSPRINT,OUTPUT)
         USING PRNTLINE,R4
START    BAL   R11,GETLINE        GET 1 LINE OF ASSEMBLY
         CLC   SZAP,ISRCE         START OF ZAP
         BE    SZAPTYPE           YES, CHECK VER OR REP
         CLC   PUNCH,ISRCE        START OF PUNCH
         BE    PUNCHIT            YES, GO PUNCH OUTPUT
         B     START              ELSE GO BACK TO START
SZAPTYPE CLI   ISRCE+5,C'V'       START OF VERIFY
         BNE   REPSTART           NO, CHECK FOR START OF REPLACE
         MVC   ZAPTYPE,VER        PREPARE TO VERIFY
         B     NEXTLINE           GO GET NEXT RECORD
REPSTART CLI   ISRCE+5,C'R'       START OF REPLACE
         BNE   START              NO, INVALID *SZAP CNTL STMT
         MVC   ZAPTYPE,REP        PREPARE TO REPLACE
NEXTLINE BAL   R11,GETLINE        GET 1 LINE OF ASSEMBLY.
         CLI   ISRCE,C'*'         COMMENT CARD
         BE    NOOBJECT           YES, GO CHECK FURTHER
         CLI   ICODE1,C' '        ANY OBJECT CODE PRODUCED
         BE    NOOBJECT           NO, GO CHECK FURTHER
         CLI   ICODE1,C'O'        'OBJECT' HEADING FROM ASSEMBLER
         BE    NEXTLINE           YES, IGNORE STMT
         MVC   OREC(4),ZAPTYPE    MOVE IN VER/REP TYPE
         MVC   OZAPADDR,IADDR+2   MOVE 4 BYTE ZAP ADDR TO CARD
         MVC   OSRCE,ISRCE        MOVE ZAP SOURCE TO CARD
*****    SCAN OBJECT CODE AREA FOR FIRST BLANK
         LA    R2,ICODE1          LOAD R2 W/A(INPUT CODE)
         LR    R3,R2              SAVE R2 IN R3
BLNKSCAN LA    R3,1(,R3)          BUMP R3 BY 1
         CLI   0(R3),C' '         IS THIS A BLANK
         BNE   BLNKSCAN           NO, GO CHECK NEXT POSITION
         SR    R3,R2              GET LENGTH IN R3
         C     R3,=F'4'           IS LENGTH = 4
         BNE   DATA               NO, GO MOVE ALL DATA
         MVC   OCODE1,ICODE1      MOVE ADDRESS
         MVC   OCODE2,ICODE2      MOVE FIRST HALF OF INSTRUCTION
         MVC   OCODE3,ICODE3      MOVE SECOND HALF OF INSTRUCTION
         B     PUT                GO WRITE OUTPUT
MOVEDATA MVC   OCODE1(0),ICODE1   EXECUTED MVC FOR DATA
DATA     BCTR  R3,0               DECREMENT R3 FOR EX
         EX    R3,MOVEDATA        EX VARIABLE LENGTH MVC
PUT      PUT   SYSPUNCH,OREC      PUT CARD TO DISK
         PUT   SYSPRINT,ORECLINE  PRINT CARD IMAGE
         MVC   OREC,BLANKS        CLEAR CARD
         B     NEXTLINE           GO GET ANOTHER RECORD
NOOBJECT CLI   ISRCE,C'*'         COMMENT CARD
         BNE   NEXTLINE           NO, GET NEXT LINE
         CLC   PUNCH,ISRCE        START OF PUNCH
         BE    PUNCHIT            YES, GO PUNCH OUTPUT
         CLC   EZAP,ISRCE         END OF ZAP
         BE    STOP               YES, FINISHED-GO RETURN TO OS
         CLC   SZAP,ISRCE         START OF NEW ZAP
         BE    SZAPTYPE           YES, GO CHECK TYPE
         CLC   PZAP,ISRCE         START OF PAUSE
         BE    START              YES, GO LOOK FOR SZAP AGAIN
         B     NEXTLINE           ELSE GO GET NEXT RECORD
*****    GEN SPECIAL CARDS
PUNCHIT  MVC   OSPCPAD,BLANKS     CLEAR END OF CARD.
         MVC   OSPC,SPECIAL       GET SPECIAL INFORMATION,.
         B     PUT                WRITE IT OUT
GETLINE  GET   SYSUT1             GET 1 LINE OF ASSEMBLY.
         LR    R4,R1              DATA POINTER TO R4
         BR    R11                RETURN TO CALLER.
STOP     CLOSE (SYSUT1,,SYSPUNCH,,SYSPRINT)
         L     R13,SAVE+4
         RETURN (14,12),RC=0
SYSUT1   DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,      INPUT LISTING     X
               EODAD=STOP
SYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,    DISK FILE         X
               RECFM=FB,LRECL=80,BLKSIZE=6400
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,    ZAP DECK LIST     X
               RECFM=FB,LRECL=ORECLEN,BLKSIZE=ORECLEN*75
         LTORG
SAVE     DC    18F'0'
ZAPTYPE  DC    CL4' '
SZAP     DC    C'*SZAP'
EZAP     DC    C'*EZAP'
PZAP     DC    C'*PZAP'
PUNCH    DC    C'*PUNCH'
REP      DC    C' REP'
VER      DC    C' VER'
BLANKS   DC    CL80' '
ORECLINE DC    C'      '         CARRIAGE CONTROL AND PAD FOR LISTING
*****    OUTPUT RECORD
OREC     DS    CL80
OEND     EQU   *                 END OF OUTPUT RECORD
ORECLEN  EQU   *-ORECLINE        LEN OF OUTPUT RECORD
         ORG   OREC
         DC    C' '
OZAPCNTL DC    CL3' ',C' '       ZAP KEYWORD
OZAPADDR DC    CL4' ',C' '       2-BYTE ADDR
OCODE1   DC    CL4' '            2-BYTES OF CODE
OCODE2   DC    CL4' '            2-BYTES OF CODE
OCODE3   DC    CL4' '            2-BYTES OF CODE
         ORG   OCODE1
ODATA    DC    CL16' ',C' '      UP TO 8 BYTES OF DC DATA
OSRCE    DC    CL(OEND-*)' '     SOURCE CARD
         ORG   OREC
OSPC     DC    CL65' '           SPECIAL CARD
OSPCPAD  DC    CL15' '           SEQ FIELD
*****    INPUT PRINT LINE
PRNTLINE DSECT
         DS    C                 CARRIAGE CONTROL
IADDR    DS    CL6,C
ICODE1   DS    CL4,C
ICODE2   DS    CL4,C
ICODE3   DS    CL4,C
         DS    CL18
ISRCE    DS    CL72
ISEQ     DS    CL8
         ORG   ISRCE
IINSTR   DS    CL10,CL5
IEND     EQU   *
         ORG   ISRCE
         DC    C'*PUNCH '
SPECIAL  DC    CL65' '
         DC    CL8' '
         END


Bruce Bordonaro
System Software Manager (USA) © Xephon 1988














































