Modifying ISPF's MODEL facility

ISPF's MODEL command provides a means of entering samples
of source statements and notes (non-data lines that provide
additional information) into the dataset you are editing. The
intention is to speed up coding by freeing the developer from
memorizing syntax, options, and possible return codes. As
delivered by IBM, the MODEL command provides code in
several languages (CLIST, COBOL, REXX, FORTRAN, PL/I,
and more) for various ISPF dialog development statements. The
MODEL command can be truly useful when developing an ISPF
dialog but what if you are developing a REXX EXEC that does
not use ISPF's dialog manager? The answer is to modify the
MODEL facility to provide syntax and examples of whatever
code you want.

Models are divided into classes. By default the class is set to your
current edit profile, so when you are editing a COBOL program
the class is set to COBOL, when editing a REXX EXEC the class
is set to REXX. To override the default class use the following edit
primary command:
      MODEL CLASS classname

where classname is the valid class you wish to set such as
SKELS, DTL, PANELS, etc (refer to ISPF's MODEL help for
information on all available classes).

Now that the class is set, you may obtain some model data. The
primary command:

      MODEL model-name qualifier

will insert sample source and notes for the item model-name in
your code in the location directed by either the 'A' (after) or 'B'
(before) line command. The qualifier is a way to specify which
version of the mode name you desire, for those model names that
have multiple entries. A simple example is:

      MODEL VPUT

which would place the syntax of the VPUT ISPF dialog manager
command into your code at a line specified by the 'A' or 'B' line
command. The interesting part is that the VPUT syntax is in the
language of the dataset you are editing. If you were editing a
COBOL program, the VPUT would have COBOL syntax, if you
were editing a REXX EXEC the VPUT would be in REXX
syntax.

When using the MODEL command, if the model-name is not
specified, a panel is displayed to show the available model names.
Selecting a model name would either display a panel of qualifiers,
if available, or insert the model name's syntax into your dataset.

There are three steps to modifying the MODEL command to suite
your own purpose.

1      Edit the IBM-supplied MODEL CLASS panel adding your
class name and the name of a panel to display if chosen.

2      Create that model name panel, which will contain a list of
your models and the skeleton names to be used to insert your
statements and notes into the edited dataset.

3      Code the skeleton members that will contain the actual
statements and notes to be inserted.

To perform the first step, the IBM-supplied panel ISREMCLS
must be edited. There are two parts to the modification. The first
part is to modify the )BODY section to add your new class to the
display of available classes. After item 14, you could add:

      %   15 +MR        - my REXX syntax

the second part of step one is to add an entry to the )INIT section
that names a panel to be displayed when class MR (or 15) is
chosen. An example would be:

      15,'PANEL(MYREXX)'   /* Local modification for REXX */
      MR,'PANEL(MYREXX)'   /* Local modification for REXX */

The double entry of both 15 and MR allows the class to be
specified either way. When editing, you may now set the class to
your new REXX class by entering either:

      MODEL CLASS 15

or

      MODEL CLASS MR

The second step is to code the panel (MYREXX in the example
from step 1) that will be displayed when your class is selected.
There is nothing unusual about this panel - it is simply a menu
selection panel. Below is a panel containing three REXX
functions: SUBSTR, STRIP, and TIME. The )PROC section of
the panel passes the name of your skeleton member as a PARM
to the ISPF program ISRECMBR, which actually does the work
of inserting your statements into the edited dataset. Your panel
must be a member of a PDS that is concatenated to the ISPPLIB
DD statement. Assuming the model class is set to MR, there are
two ways to obtain the syntax for the REXX TIME function. You
can enter a primary command of MODEL with no operands and
a line command of either 'A' or 'B' to indicate where to place the
TIME statement, in which case the MYREXX panel will be
displayed showing choices of SUBSTR, STRIP, and TIME. At
that point either item 3 or TIME may be entered and the TIME
syntax will be inserted. The other method would be to use a
primary command of:

      MODEL TIME

and a line command indicating either after or before.

)ATTR DEFAULT(%+_)
  _ TYPE(INPUT)  COLOR(PINK)   INTENS(HIGH)
  ~ TYPE(OUTPUT) COLOR(RED)   INTENS(HIGH)
  + TYPE(TEXT)   COLOR(GREEN)
  % TYPE(TEXT)   COLOR(WHITE)  INTENS(HIGH)
  ¢ TYPE(TEXT)   COLOR(TURQ) INTENS(HIGH)  HILITE(REVERSE)
  $ AREA(SCRL) EXTEND(Off)
)BODY EXPAND(\\) LMSG(LM) SMSG(SM)
¢\-\ MY REXX MODELS \-\
%OPTION  ===>_ZCMD                                                             +
~SM
%
% $models                                                                      $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% $                                                                            $
% ~LM
+ Enter either the%number+or%name+of the command to Model.
+
+ Press%PF7/8+to Scroll or%PF3+to end.
)AREA models
%                               %  1+SUBSTR
%                               %  2+STRIP
%                               %  3+TIME
)INIT
  .CURSOR = ZCMD
  IF (&ISRMDSPL = 'RETURN  ')
      .RESP = END
)PROC
  &ZSEL = TRANS(TRUNC (&ZCMD,'.')
         1,'PGM(ISRECMBR) PARM(MYSUBSTR)'
    SUBSTR,'PGM(ISRECMBR) PARM(MYSUBSTR)'
         2,'PGM(ISRECMBR) PARM(MYSTRIP)'
     STRIP,'PGM(ISRECMBR) PARM(MYSTRIP)'
         3,'PGM(ISRECMBR) PARM(MYTIME)'
      TIME,'PGM(ISRECMBR) PARM(MYTIME)'
         *,'?')
  IF (&ZSEL = '?')
    &ZSEL = TRANS(TRUNC (&ZCMD,'.')
         *,'?' )
  IF (&ZSEL = '?')
    &ZEMTEMP = &ZCMD
    .MSG = ISRYM013
  &ISRMMEND = 'N'                   /* SET THE END INDICATOR TO NO   */
  IF (.RESP = END)                  /* IF ENDING, WHY ... WHO CAUSED */
    IF (&ISRMONCL ¬= 'Y')           /* MAKE SURE ITS NOT A CLASS OP. */
      IF (&ISRMDSPL ¬= 'RETURN  ')  /* MAKE SURE ITS NOT END ON MBR. */
        &ISRMMEND = 'Y'             /* NO - ITS BECAUSE USER HIT END */
  &ZMSG = .MSG                      /* Set message variable      @H1A*/
  VPUT(ZMSG) PROFILE                /* Save message in prof pool @H1A*/
)END

The final step is to code the skeleton members that contain the
actual syntax and notes (if any) to be inserted into the edited data.
Below is an example of the REXX TIME function. All lines in the
skeleton member are inserted into the edit session. Lines
beginning with ')N ' are considered notes instead of data and are
not saved with the edited dataset. Simply code a skeleton member
for every item from your model-name panel. All these skeleton
members are placed in a PDS library that is concatenated to the
ISPSLIB DD statement.

x = Time(option)
)N  RETURNS THE LOCAL TIME, BY DEFAULT (NO option) THE FORMAT IS 24HR
)N  HH:MM:SS.  SPECIFYING option WILL RETURN THE TIME IN THESE FORMATS:
)N    'C'ivil   - HH:MMam OR HH:MMpm
)N    'E'lapsed - ssssssss.uuuuuu SECONDS.MICROSECS SINCE ET CLOCK RESET
)N    'H'ours   - Number of hours since midnight
)N    'L'ong    - HH:MM:SS.UUUUUU
)N    'M'inutes - Number of minutes since midnight (4 digits)
)N    'N'ormal  - see default format above
)N    'R'eset   - ssssssss.uuuuuu SINCE ET CLOCK RESET & DOES RESET
)N    'S'econds - 5 digit number of seconds since midnight

Depending on the number of entries you code, this could require
some initial time investment, but the pay-off in productivity could
be beneficial in the long run. I have found three instances when
taking the time to code some model skeletons can be worthwhile.

1      When you have some frequently-used code that is large
enough to be time-consuming to type in.

2      When using an obscure statement that you never remember
the syntax of.

3      When attempting to teach someone a language. For example,
when learning REXX, it is much simpler to remember what the
various functions do than to have to remember the purpose and all
options to all functions. Using the MODEL facility to handle the
syntax relieves the student of much of this burden and hastens the
learning process.

Joseph R Grace
Senior Systems Programmer (USA)                                           c Xephon 1994

