Removing user-written authorization SVCs

In common with many MVS sites, we have used user-written
authorization SVCs in the past, particularly to enable us to
perform privileged code while running under ISPF. However,
we became concerned about the security exposure, and decided
to rewrite our code to remove the need for SVCs.

This required two different approaches. The first was to write
another user SVC of our own to perform the required function.
We have only used this for a small set of functions as it
requires an IPL to load or modify the code.

The second more general method, which I will detail here, is to
use the TSO Service Vector Facility to enable an ISPF dialog
(be it a program or CLIST/REXX etc) to invoke  authorized
code. The advantage of using this method rather than an SVC
is that the code is located in either a STEPLIB or LINKLIST
library, and can be implemented or modified without recourse
to an IPL.

When invoked from a CLIST/REXX you use the ISPEXEC
SELECT function to invoke the TSF program. Whilst this is
very simple to use, it does have limitations as the TSF program
can only return information via its return code, and only has
access to the parameter list it is supplied with.

However, when invoked using the procedure detailed below, a
program can pass the address of its own storage via TSF to
another program. This can then be used to pass additional
information between the two programs.

In order to remove the need for the user authorization SVC
under  ISPF, you must put the code which requires
authorization into a separate load module, which must be link-
edited AC=1, and be placed either in an APF-authorized
LINKLIST dataset, or an APF-authorized STEPLIB
concatenation. The program name must also be coded in the
TSO AUTHTSF table of IKJTSOxx in SYS1.PARMLIB.

You should also note that the authorized program cannot issue
any ISPF functions as it runs under its own TCB. Also, any
storage GETMAINed in the private area by the program is
released when the program, and therefore its TCB, finishes. If
you want the TSF program to return data to you, the calling
program must provide the storage address to the called program
via the TSF parameters.

The example which I have used here is from our RACF enrol
procedure. Here the programs and all the ISPF panels are
accessible to any user of the system. The application can be
invoked by anyone using ISPF under TSO, and allows users to
store requests for user-ids to be either added or deleted.

However, the programs check that the user requesting an action
is in fact authorized to do so, either being 'system special', in
which case he can perform any action, or that he has 'group
special' on the RACF GROUP which he is trying to add a user-
id to or delete a user-id from.

We are running MVS/ESA 3.1.3, TSO/E 2.1.1, and ISPF 3.2,
and the details given are for those levels. There were some
differences under MVS/XA 2.2 which we were running when
we started this exercise, but it does work.

The code below is in two parts. The first shows the code
required  in the main program in order to invoke the authorized
code. The second is a sample program. This program uses
ICHEINTY to interrogate the RACF database to  determine if a
user-id is 'system special'. ICHEINTY can only be executed
from a program which is in supervisor state, key zero, or APF-
authorized.

The following non-IBM macros are used:

o      INITR - program initialization (see MVS Update issues
      15 and 16).

o      EXITR - program termination (see MVS Update issues
      15 and 16).

The following IBM macros are used:

o      IHAPSA - DSECT mapping the PSA
o      CVT - DSECT mapping the CVT
o      IKJTSVT - DSECT mapping the TSVT
o      ICHEINTY - macro to invoke ICHEINTY
o      ICHETEST - macro to perform test via ICHEINTY.

The following IBM publications contain additional information:

o      TSO Extensions Version 2 Programming Services SC28-1875-1
o      RACF Macros and Interfaces SC28-1345-0
o      ISPF Dialog management Guide and Reference SC34-4266-0.


SAMPLE CODE FROM THE CALLING (ISPF) PROGRAM

         .
   program initialization
         .
*         The follow code must be executed before calling the
*         TSO Service vector routine
         USING  PSA,R0
         L      R15,FLCCVT
         DROP   R0
         USING  CVT,R15
         L      R15,CVTTVT
         DROP   R15
         USING  TSVT,R15
         L      R15,TSVTASF
         DROP   R15
         ST     R15,SVADDR            save address of TSV
        .
   perform your processing
        .
         OI     TSPARM,X'80'        set flag for end of parm list
         MVC    ENRUSR,SUSERID      ok - get Userid
         L      R15,SVADDR          Load address of TSV
         CALL   (15),(TSFLAG,TSCMDBUF,TSRETCDE,TSBUFLN,TSRETCDE,       *
               TSRSNCDE,TSABNCDE,TSPARM),VL                            *
         C      R15,R15             did ENROSPC work ok?
         BNZ    POSSERR             NOPE - so go check
        .
   user is system special so perform your processing
        .
POSSERR  DS      0H
         C      R15,=F'4'           was it NZERO Ret from ENROSPC?
         BNE    OOPSERR             nope - must be something bad
        .
   perform your processing
        .
OOPSERR  DS      0H
        .
   perform error processing on values in R15 (IKJEFTSR return)
   and TSRETCDE/TSRSNCDE/TSABNCDE
        .
*     DATA AREAS
SUSERID  DC     CL8' '
SVADDR   DS     F                SAVE AREA FOR ADDRESS OF
*   TSO SERVICE ROUTINE PARAMETERS
TSFLAG   DS     0F        Flag bytes
TSFLAG1  DC     X'0'      Must be zero
TSFLAG2  DC     X'0'      0 = TSV will invoke from AUTHORIZED envir.
*                         1 = TSV will invoke from UNAUTHORIZED envir.
TSFLAG3  DC     X'0'      1 if Dump required after abend
TSFLAG4  DC     X'2'      2 function invoked is a program
*                         1 for a TSO command, REXXX or CLIST
TSCMDBUF DC     C'ENROSPC' Name of Function to invoke
TSBUFLN  DC     F'7'       Length of TSCMDBUF
TSRETCDE DC     F'0'       Return code from Function invoked
TSRSNCDE DC     F'0'       Reason code from Function invoked
TSABNCDE DC     F'0'       Abend code of Function invoked
TSPARM   DC     A(ENRPARM) Address of parameter for ENROSPC
*     Parameters for the invoked function (ENROSPC)
ENRPARM  DS     0F
ENRPRML  DC     H'8'         Length of parameter
ENRUSR   DC     CL8' '       USERID to check
*    IBM DSECTS TO BE USED
         IHAPSA
         CVT   DSECT=YES
         IKJTSVT


SAMPLE CODE

* ENROSPC
*        This program takes the USERID passed from the calling
*        Environment, and uses ICHEINTY to check if it has the
*        SYSTEM SPECIAL attribute.
*        In order to do this, ENROSPC must be Link-edited AC=1,
*        and be loaded from an APF authorized Load Library.
* RETURN CODES IN R15
*        0     -    Userid is SYSTEM SPECIAL
*        8     -    Userid is not SYSTEM SPECIAL (or doesn't exist)
*       12     -    Parameter passed is incorrect length
ENROSPC INITR   AMODE=24,RMODE=24
         L      R10,0(R1)    get parameter address
         CLC    0(2,R10),=H'8'    is length correct?
         BE     ENROSTC      ok
         LA     R3,12
         B      RETURN       go error return
ENROSTC  DS     0H
         MVC    RUSERID,3(R10) first get USERID from parameter
         BAS    R14,CHECKSYS
         LR     R3,R15         save R15
RETURN   DS     0H
         EXITR  RC=(3)         Return to caller
* CHECKSYS
*        This section checks the RACF entry for the user-id passed to
*        this program, and to extract user's status viz SYSTEM SPECIAL
*        RUSERID must contain the USERID left justified and space
*        filled.
* Return Codes:
*        0    :  User-id has SYSTEM SPECIAL
*        8    :  Requestor not AUTHORIZED
CHECKSYS DS     0H
         ST     R14,R14CHKS
         MVI    RUSR1,X'08' set length to 8
         TRT    RUSERID,TRTABLE  find first space
         BZ     CSULDON
         LA     R2,RUSERID
         SR     R1,R2
         STC    R1,RUSR1
CSULDON DS      0H
         LA     R15,RUSRWRKL
         ST     R15,RUSRWRK
         XC     RUSRRSV,RUSRRSV
         ICHEINTY LOCATE,TYPE='USR',ENTRY=RUSR1,WKAREA=RUSRWRK,        *
               TESTS=RSPECIAL,RELEASE=1.8.1
         LTR    R15,R15      ok does he have system special?
         BNZ    CSSPECNO     Nope
         MVI    RSSPECS,RISPEC  set SYSTEM SPECIAL FLAG
         LA     R15,0
         L      R14,R14CHKS
         BR     R14
CSSPECNO DS     0H
         LA     R15,8
         L      R14,R14CHKS
         BR     R14
         LTORG
* RACF DATA AREAS
RSPECIAL ICHETEST FIELD=FLAG2,FLDATA=(,RSSPECF),COND=ONES,             *
               RELEASE=1.8.1,MF=L
RSSPECF  DC     AL1(RISPEC)  mask for ICHETEST
RISPEC   EQU    X'80'    bit mask for ICHETEST
RSSPECS  DC     C' '     SYSTEM SPECIAL STATUS X'80' is SYSTEM SPECIAL
RUSR1    DS     AL1
RUSERID  DS     CL8
RUSRWRK  DS     F
RUSRRSV  DS     CL44
         DS     F
RUSRWRKE EQU    *
RUSRWRKL EQU    *-RUSRWRK
* Register save areas
R14CHKS  DS     F
* TRANSLATE TABLES
TRTABLE  DC     256X'00'
         ORG    TRTABLE+C' '
         DC     C' '
         ORG    ,
         END    ENROSPC


Adrian Cole
Senior Software Programmer
TSB Retail Bank and Insurance (UK)                  c Xephon 1992

