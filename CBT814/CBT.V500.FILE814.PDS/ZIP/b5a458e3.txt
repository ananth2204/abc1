Date function extensions to REXX

One group of functions not addressed well in the TSO REXX
interpreter's rich set of built-in functions is DATE. As shipped,
REXX provides one DATE function, which returns the system
date in a choice of formats. This is very good where the current
date is the only one required but slips up when dates in the past or
future are of interest.

In order to work with a date in the past or future one needs to
perform calculations based upon the number of days in a month
and whether the current year is a leap year or not.

In order to rectify this gap in function two additional REXX
functions were developed. They are based around the REXX base
date format.

The base date format is defined as the number of whole days from
January 0001 until the present, assuming that the present
Gregorian calendar applies from that initial date. (In fact, the
Gregorian calendar only historically applies from 1582 AD
onwards.) Keeping this in mind, the base date format is a useful
mechanism for advancing dates forward or backward in steps of
days.

The two functions are called DATEBTOS and DATESTOB
(meaning convert a date from base to string and from string to
base formats respectively). The string is a generic term for an
expression specifying a date or a component of a date.

DATEBTOS

DATEBTOS converts a base date (a positive integer) into a date
expression. It is called using the following syntax:

      X = DATEBTOS(basedate,output-format)

where basedate is a valid REXX date in base date format and
output-format is a single alphabetic character that indicates the
format the date expression is to be converted to.

Acceptable values of the output format are:

E      European (dd/mm/yy)

S      System (yyyymmdd)

J      Julian (yyyyddd)

O      Ordered (yy/mm/dd)

N      Natural (dd mmm yyyy)

F      Full (day name, dd month name yyyy)

D      Day in year (ddd)

M      Month (month name)

Y      Year (yyyy)

U      USA (mm/dd/yy)

W      Weekday (day of the week).

The default is E.

Let's look at the following example:

      b = DATE('B') /* The REXX built-in function DATE*/
      B = b - 111
      s = DATEBTOS(b,'F') /* Convert to full format */

Assuming today is 14th October, 1994, then s will contain the
string Saturday, 25 June 1994 (ie the date 111 days before today).

Alone, the DATEBTOS function enables you to work with dates
offset from the current date by a number of days. The
DATESTOB function enables you to start working with a date
other than today.

DATESTOB

DTAESTOB converts a day, month, and year into a base date
format. It is called using the following syntax:

      x = DATESTOB(dd,mm,yyyy)

where dd is the day in the month, mm is the month number in the
year, and yyyy is the year number. Normal calendar limits apply to
each of these parameters. Additionally, yyyy must be a positive
number.

In the example:

      b = DATESTOB(14,10,1994)
      b = B - 111
      s = DATEBTOS(b,'W')

the value 'Saturday', ie the day of the week of the date 111 days
before the 14th October 1994, is placed into variable s.

Both functions take leap years into account. Also errors are
responded to with a message and a return code of -20.

The functions should be placed into a system REXX library
which appears in the SYSEXEC concatenation list of your
installation's TSO log-on procedure and in any JCL which
executes the functions in batch.

DATEBTOS REXX EXEC

/*--------  REXX  ----------------------------------------------------*/
/* Convert a Rexx base date to a date string                         -*/
/*  call: x = DATEBTOS(basedate,output-format)                       -*/
/*        basedate is the number of whole days from 0001-01-01       -*/
/*        output-format = 'E' for  dd/mm/yyyy                        -*/
/*                      = 'S' for  yyyymmdd                          -*/
/*                      = 'J' for  yyyyddd                           -*/
/*                      = 'O' for  yy/mm/dd                          -*/
/*                      = 'N' for  dd mmm yyyy                       -*/
/*                      = 'F' for  dayname, dd mthname yyyy          -*/
/*                      = 'D' for  day in year                       -*/
/*                      = 'M' for  monthname                         -*/
/*                      = 'Y' for  year                              -*/
/*                      = 'U' for  mm/dd/yy                          -*/
/*                      = 'W' for  the day of the week               -*/
/*                      default is 'E'                               -*/
/*  errors: return a code of -20                                     -*/
/*--------  REXX  ----------------------------------------------------*/
datebtos:
  Parse arg basedate,outformt,garbage ;
  if ^datatype(basedate,'W') then do;
    say 'datebtos: -E-  Input date is in incorrect format';
    say 'datebtos:      Must be in Rexx Base format';
    say 'datebtos:      Input date given is ' basedate;
    exit -20;
  end;
  if basedate < 0 then do;
    say 'datebtos: -E-  Input data is in incorrect format';
    say 'datebtos:      Must be a whole number greater than 0';
    say 'datebtos:      Input date given is ' basedate;
    exit -20;
  end;
  if (length(outformt) = 0) | outformt = ' ' then outformt = 'E';
  outformt = substr(outformt,1,1);
  if (length(outformt) > 1 |,
      ( outformt ^= 'E'      &,
        outformt ^= 'S'      &,
        outformt ^= 'U'      &,
        outformt ^= 'W'      &,
        outformt ^= 'N'      &,
        outformt ^= 'F'      &,
        outformt ^= 'D'      &,
        outformt ^= 'M'      &,
        outformt ^= 'O'      &,
        outformt ^= 'Y'      &,
        outformt ^= 'J'))
  then do;
    say 'datebtos: -E-  output format must be one of the following';
    say 'datebtos:      E, S, U, W, N, F, D, M, O, Y, J';
    say 'datebtos:      output format specified is '|| outformt ||'.';
    exit -20;
  end;
  if outformt = 'F' | outformt = 'W' then do;
       weekday = basedate // 7 ;
       select ;
         when weekday = 0 then dayname = 'Monday';
         when weekday = 1 then dayname = 'Tuesday';
         when weekday = 2 then dayname = 'Wednesday';
         when weekday = 3 then dayname = 'Thursday';
         when weekday = 4 then dayname = 'Friday';
         when weekday = 5 then dayname = 'Saturday';
         when weekday = 6 then dayname = 'Sunday';
         otherwise do;
           say 'datebtos: -E-  Incorrect weekday calculated';
           say 'datebtos:      Weekday is ' weekday;
           exit -20;
         end;
       end'
   end;
  years = (basedate * 400) % 146097 ;
  days = (years * 365) + (years % 4) - (years % 100) + (years % 400);
  days = basedate - days ;
  year = years + 1 /* current year is difference + 1*/
  day  = days + 1 /* current day in year is days till yesterday + 1*/
  leapyear = 0;
  if (((year % 4) = (year / 4)) & ((year % 100) ^= (year / 100))) |,
     ((year % 400) = (year / 400))
  then
     leapyear = 1 ;
  if leapyear then do;
    if day > 366 then do;
      year = year + 1;
      day = day - 366;
    end;
  end;
  else do;
    if day > 365 then do;
      year = year + 1;
      day = day - 365;
    end;
  end;
  mthdays.1 = 31 ;
  if leapyear then
     mthdays.2 = 29 ;
  else
     mthdays.2 = 28 ;
  mthdays.3 = 31 ;
  mthdays.4 = 30 ;
  mthdays.5 = 31 ;
  mthdays.6 = 30 ;
  mthdays.7 = 31 ;
  mthdays.8 = 31 ;
  mthdays.9 = 30 ;
  mthdays.10 = 31 ;
  mthdays.11 = 30 ;
  mthdays.12 = 31 ;
  totdays.0 = 0 ;
  totdays.1 = 31 ;
  if leapyear then do;
     totdays.2 = 60 ;
     totdays.3 = 91 :
     totdays.4 = 121;
     totdays.5 = 152;
     totdays.6 = 182;
     totdays.7 = 213;
     totdays.8 = 244;
     totdays.9 = 274;
     totdays.10 = 305;
     totdays.11 = 335;
     totdays.12 = 366;
  end;
  else do
     totdays.2 = 59 ;
     totdays.3 = 90 ;
     totdays.4 = 120;
     totdays.5 = 151;
     totdays.6 = 181;
     totdays.7 = 212;
     totdays.8 = 243;
     totdays.9 = 273;
     totdays.10 = 304;
     totdays.11 = 334;
     totdays.12 = 365;
   end;
   month = 0;
   mthnum = 1;
   do while (month = 0 & mthnum < 13) ;
     if day <= totdays.mthnum then month = mthnum ;
     else mthnum = mthnum + 1;
   end;
   if month = 0 then do;
     say 'DATEBTOS: -E- error in month calculation';
     say 'Day is ' day ;
     exit -20;
   end;
   if outformt = 'M' | outformt = 'N' | outformt = 'F' then do;
        select ;
          when month = 1 then mthname = 'January';
          when month = 2 then mthname = 'February';
          when month = 3 then mthname = 'March';
          when month = 4 then mthname = 'April';
          when month = 5 then mthname = 'May';
          when month = 6 then mthname = 'June';
          when month = 7 then mthname = 'July';
          when month = 8 then mthname = 'August';
          when month = 9 then mthname = 'September';
          when month = 10 then mthname = 'October';
          when month = 11 then mthname = 'November';
          when month = 12 then mthname = 'December';
          otherwise do;
            say 'datebtos: -E-  Incorrect month calculated';
            say 'datebtos:      Month is ' month;
            exit -20;
          end;
        end;
    end;
   x = month - 1;
   dayinmth = day - totdays.x ;
   if length(month) < 2 then month = '0'||month;
   if length(dayinmth) < 2 then dayinmth = '0'||dayinmth;
   if length(year) < 2 then year = '0'||year;
   if length(year) < 3 then year = '0'||year;
   if length(year) < 4 then year = '0'||year;
   if length(day) < 2 then day  = '0'||day ;
   if length(day) < 3 then day  = '0'||day ;
   select;
      when outformt = 'E' then
           datestr = dayinmth || '/' || month ||,
                           '/' || substr(year,3,2);
      when outformt = 'S' then
           datestr = year || month || dayinmth;
      when outformt = 'U' then
           datestr = month || '/' || dayinmth || '/' || substr(year,3,2);
      when outformt = 'J' then
           datestr = year || day;
      when outformt = 'W' then
        datestr = dayname ;
      when outformt = 'M' then
        datestr = mthname;
      when outformt = 'N' then
        datestr = dayinmth || ' ' || substr(mthname,1,3) || ' ' || year;
      when outformt 'D' then
        datestr = day;
      when outformt = 'O' then
        datestr = substr(year,3,2) || '/' || month || '/' || dayinmth ;
      when outformt = 'Y' then
        datestr = year ;
      when outformt = 'F' then do;
        datestr = dayname || ', ' ||,
                  dayinmth || ' ' || mthname || ' ' || year;
      end;
      otherwise datestr = year || month || dayinmth;
   end;
   return datestr ;

DATESTOB REXX EXEC

/*--------  REXX  ----------------------------------------------------*/
/* Convert a day, month, and year into a Rexx base date              -*/
/*  call: x = DATESTOB(dd,mm,yyyy)                                   -*/
/*        basedate is the number of whole days from 0001-01-01       -*/
/*        dd is the day in the month                                 -*/
/*        mm is the month in the year                                -*/
/*        yyyy is the year                                           -*/
/*  errors: return a code of -20                                     -*/
/*--------  REXX  ----------------------------------------------------*/
datestob:
  Parse arg dayinmth,month,year,garbage ;
  if ^datatype(year,'W') |  year < 1 | year > 20000
  then do;
    say 'datestob: -E-  Input year (parameter 3) is incorrect' ;
    say 'datestob:      Must be a whole number in range 1 to 20000';
    say 'datestob:      Input year given is ' year;
    exit -20;
  end;
  year = year + 0;
  if ^datatype(month,'W') | month < 1 | month > 12
  then do;
    say 'datestob: -E-  Input month (parameter 2) is incorrect';
    say 'datestob:      Must be a whole number in range 1 to 12';
    say 'datestob:      Input month given is ' month;
    exit -20;
  end;
  month = month + 0;
  leapyear = 0;
  if (((year % 4) = (year / 4)) & ((year % 100) ^= (year / 100))) |,
     ((year % 400) = (year / 400))
  then
     leapyear = 1 ;
  mthdays.1 = 31 ;
  if leapyear then
     mthdays.2 = 29 ;
  else
     mthdays.2 = 28 ;
  mthdays.3 = 31 ;
  mthdays.4 = 30 ;
  mthdays.5 = 31 ;
  mthdays.6 = 30 ;
  mthdays.7 = 31 ;
  mthdays.8 = 31 ;
  mthdays.9 = 30 ;
  mthdays.10 = 31 ;
  mthdays.11 = 30 ;
  mthdays.12 = 31 ;
  totdays.0 = 0 ;
  totdays.1 = 31 ;
  if leapyear then do;
     totdays.2 = 60 ;
     totdays.3 = 91 ;
     totdays.4 = 121;
     totdays.5 = 152;
     totdays.6 = 182;
     totdays.7 = 213;
     totdays.8 = 244;
     totdays.9 = 274;
     totdays.10 = 305;
     totdays.11 = 335;
     totdays.12 = 366;
  end;
  else do
     totdays.2 = 59 ;
     totdays.3 = 90 ;
     totdays.4 = 120;
     totdays.5 = 151;
     totdays.6 = 181;
     totdays.7 = 212;
     totdays.8 = 243;
     totdays.9 = 273;
     totdays.10 = 304;
     totdays.11 = 334;
     totdays.12 = 365;
  end;
  if ^datatype(dayinmth,'W') | dayinmth < 1 | dayinmth > mthdays.month
    then do;
    say 'datestob: -E-  Input day in month (parameter 1) is incorrect';
    say 'datestob:      Must be a whole number in range 1 to ',
                        mthdays.month;
    say 'datestob:      Input day given is ' dayinmth;
    exit -20;
  end;
  dayinmth = dayinmth + 0;
  years = year - 1 ; /*difference between year and year 0001*/
  days = (years * 365) + (years % 4) - (years % 100) + (years % 400);
  x = month - 1 ;
  basedate = days + todays.x + dayinmth - 1; /* - 1 for whole days*/
  return basedate ;


George Koungoulos
Systems Programmer
Water Board (Australia)                                                          c Water Board 1994

