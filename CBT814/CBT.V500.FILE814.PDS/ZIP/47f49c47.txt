Direct internal reader access
The JES internal reader lets programs submit jobs to JES for execution.  It can
be used to perform a variety of useful tasks.  Here are some things that can be
done with the JES internal reader:
•    Job schedulers can submit daily jobs at the appropriate times of day.
•    JCL editors can submit production jobs, enforcing corporate JCL standards
as they are submitted.
•    A TSO command can insert ACF2, TOP SECRET, or RACF user-ids and passwords
into jobs as they are submitted, making it unnecessary to expose passwords in
JCL files.
Allocating an internal reader is just like allocating a SYSOUT file, except that
you allocate the file with a writer name of INTRDR, like this:
     //JOBFILE DD SYSOUT=(A,INTRDR)
The internal reader may also be allocated dynamically.  The DYNALLOC SVC, SVC99,
is used, with the DALSYSOU and DALSPGNM text units.  You cannot allocate an
internal reader with the TSO ALLOC command, because the command does not let you
specify a writer name.
When you write to the internal reader, or any SYSOUT dataset, it appears to be
an ordinary QSAM or BSAM file, but really it is not.  In most cases, you do not
need to know this, but sometimes you do.  If you are submitting jobs, and
require the JES job-id of each job you submit, you need to know.  If you are
debugging a program that uses SYSIN or SYSOUT datasets from a dump, you need to
know.
SYSIN and SYSOUT datasets, including the internal reader (which looks like a
SYSOUT dataset), are accessed through VSAM-like macros: ACBs, RPLs, PUTs, and
ENDREQs.  When you open a BSAM or QSAM DCB for a SYSOUT dataset, the SAM-SI
(Sequential Access Method Subsystem Interface) open executor, IGG0119F, creates
a CICB (Compatibility Interface Control Block) and chains it from the DCBCICB
field of the DCB.  The CICB contains an ACB, starting at offset X‘20’, which
will be used to access the JES dataset.  Just before the ACB, at offset X‘1C’,
is a pointer to the DCB.  The DCB write routine is set to be a routine that
converts BSAM WRITEs and QSAM PUTs into VSAM-like PUTs to the ACB.
You may have noticed that when you look up the listing of DEBs in a SYSUDUMP
dump, you don’t see any associated DCBs listed for SYSIN and SYSOUT datasets
(the ones with an AMTYPE of 81).  This is because the DEBDCBAD address in the
DEB points to an ACB that is not in your program.  This is the ACB in the CICB
so, by looking four bytes before this address, you can find the address of your
DCB.
Because SAM-SI processes all WRITEs and PUTs to SYSIN and SYSOUT DCBs there is
little point in blocking up SYSOUT files.  If you use QSAM to access the file,
PUTs to the DCB are converted to PUTs to the JES ACB by SAM-SI on a record-by-
record basis and whatever block size you specify is ignored.  If you use BSAM,
you block up the records yourself and when you do a WRITE to the DCB, the SAM-SI
takes the blocks apart and does individual PUTs to the JES ACB.  Either way, JES
then reblocks the records its own way as it writes them to the spool.  If your
program is already coded to produce blocked records, you needn’t change it; it
will still work, but the big blocks will not gain you performance.
If you need the JES job-id of the jobs you submit to the internal reader, you
must access the internal reader directly.  This entails setting up an ACB and
RPL for the file, just as you would for a VSAM file.  In this case, SAM-SI does
not get involved.  You write records to the file using PUTs.  At the end of the
job, you issue an ENDREQ.  This tells JES that there are no more records coming
for the job, and it can be queued for execution.  In return, JES puts the job-id
(eg JOB00123) in the RPLRBAR field of the RPL.
If you are submitting multiple jobs to the internal reader, your program must
know where one job ends and the next begins.  You can do this by scanning for
‘//xxxxxxxx JOB’ cards, and issuing an ENDREQ whenever you find one (except for
the first).  Some jobs may have JCL included in SYSIN DD * datasets.  If you may
be submitting jobs like this, you need to look for ‘//xxxxxxxx DD *,DLM=xx’
cards and their corresponding delimiters, so you don’t get fooled and issue an
ENDREQ in the middle of the job.
INTRDR is a subroutine that lets programs written in Assembler or high-level
languages write to the internal reader using an ACB.
The program has four functions:
•    O - open the file with a DDNAME of INTRDR.
•    C - close the file.
•    W - write a record to the internal reader.
•    T - terminate the job and return the job-id.  If the INTRDR DDNAME is not
allocated to an internal reader, a job-id of JOB00000 will be returned.  This
makes testing easier, as you can dump out the file or run it to a sequential
dataset.
The program is re-usable.  It accepts 80-byte records.  Actually, the JES2
internal reader will accept records up to 252 bytes - handy if you want to
submit jobs that have wide DD * files.  JES3, with which I am less familiar,
seems to require a record length of 80, or 160 for column binary card images.
The support for wide records is not well documented, and does not always work as
you might expect it to, so the program here has been set up to handle the
ordinary case of 80-byte records.
From Assembler, INTRDR is called like this:
         L      R15,=V(INTRDR)
         LA     R1,INTPARM
         BALR   R14,R15
         LTR    R15,R15
       . . .
INTPARM  DC     A(FUNCTION)
         DC     A(X'80000000'+BUFFER)
FUNCTION DC     CL1'C'       FUNCTION: O, W, T, or C
BUFFER   DC     CL80         RECORD OR JOBID
From PL/I, INTRDR is called like this:
         DCL INTRDR EXTERNAL ENTRY(CHAR(1),CHAR(*))
             OPTIONS( ASSEMBLER INTER RETCODE );
         DCL JOBID  CHAR(8);
         DCL RC     FIXED BIN(31);
         DCL RECORD CHAR(80);
         DCL PLIRETV BUILTIN;
         . . .
         CALL INTRDR( '0', '');      /* OPEN THE INTRDR */
         RC = PLIRETV();
         . . .
         CALL INTRDR( 'W', RECORD ); /* WRITE A RECORD */
         RC = PLIRETV();
         . . .
         CALL INTRDR( 'T', JOBID );  /* TERMINATE JOB AND GET JOBID */
         RC = PLIRETV();
         . . .
         CALL INTRDR( 'C', '');      /* CLOSE THE FILE */
         RC = PLIRETV();
THE ASSEMBLER SOURCE CODE FOR INTRDR
*====================================================================*
*  MODULE NAME: INTRDR                                               *
*  DESCRIPTIVE NAME: WRITE TO THE JES INTERNAL READER                *
*  FUNCTION:                                                         *
*     THIS MODULE PERFORMS ONE OF 4 FUNCTIONS, BASED UPON THE FIRST  *
*     PARAMETER PASSED TO IT -                                       *
*       'C' - CLOSE AN INTERNAL READER FILE                          *
*       'O' - OPEN AN INTERNAL READER FILE                           *
*       'T' - TERMINATE AN INTERNAL READER JOB                       *
*       'W' - WRITE A RECORD TO THE INTERNAL READER                  *
*  ENTRY POINT: INTRDR                                               *
*  PARAMETERS:                                                       *
*     CLOSE FUNCTION -                                               *
*        FUNCTION CODE - CL1'C'   INPUT PARM  - CLOSE                *
*     OPEN FUNCTION -                                                *
*        FUNCTION CODE - CL1'O'   INPUT PARM  - OPEN                 *
*     TERMINATE FUNCTION -                                           *
*        FUNCTION CODE - CL1'T'   INPUT PARM - TERMINATE             *
*                        CL8      OUTPUT PARM - JOBID OF SUBMITTED   *
*                                    JOB (E.G. 'JOB00832')           *
*     WRITE FUNCTION -                                               *
*        FUNCTION CODE - CL1'W'   INPUT PARM - WRITE                 *
*                        CL80     INPUT PARM - OUTPUT LINE           *
*     RETURN CODES:                                                  *
*         CLOSE FUNCTION -                                           *
*            0 - CLOSE WAS SUCCESSFUL                                *
*         OPEN FUNCTION -                                            *
*            0 - OPEN WAS SUCCESSFUL                                 *
*            8 - OPEN WAS UNSUCCESSFUL                               *
*         TERMINATE FUNCTION -                                       *
*            0 - TERMINATE WAS SUCCESSFUL                            *
*            8 - AN ENDREQ ERROR OCCURRED                            *
*         WRITE FUNCTION -                                           *
*            0 - WRITE WAS SUCCESSFUL                                *
*            8 - A WRITE ERROR OCCURRED                              *
*         INVALID FUNCTION -                                         *
*           12 - INVALID FUNCTION                                    *
*  SYSTEM MACROS/LIBRARIES:                                          *
*     ACB       -  MACLIB                                            *
*     CLOSE     -  MACLIB                                            *
*     ENDREQ    -  MACLIB                                            *
*     PUT       -  MACLIB                                            *
*     IFGACB    -  MACLIB                                            *
*     IFGRPL    -  MACLIB                                            *
*     OPEN      -  MACLIB                                            *
*     RPL       -  MACLIB                                            *
*====================================================================*
INTRDR CSECT
*   ENTRY LINKAGE
         USING INTRDR,R15         SET UP TEMPORARY BASE
         B     AROUNDID           BRANCH AROUND ID
         DC    AL1(ENDID-*-1)     LENGTH OF ID
         DC    C'INTRDR &SYSDATE &SYSTIME '
ENDID    EQU   *
AROUNDID STM   R14,R12,12(R13)    SAVE REGISTERS
         LR    R11,R15            SET UP NEW BASE
         USING INTRDR,R11         -
         DROP  R15                DROP TEMPORARY BASE
         LA    R15,SAVEAREA       R15 -> LSA
         ST    R13,4(R15)         LSA -> HSA
         ST    R15,8(R13)         HSA -> LSA
         LR    R13,R15            R13 -> LSA
         LR    R10,R1             SAVE PARAMETER LIST POINTER
*   DETERMINE THE FUNCTION TO BE PERFORMED
         L     R2,0(R10)          R2  -> FUNCTION
         CLI   0(R2),C'O'         IS IT OPEN ?
         BE    OPEN               YES...
         CLI   0(R2),C'C'         IS IT CLOSE ?
         BE    CLOSE              YES...
         CLI   0(R2),C'W'         IS IT WRITE ?
         BE    WRITE              YES...
         CLI   0(R2),C'T'         IS IT TERMINATE?
         BE    TERM               YES...
         LA    R15,12             BAD FUNCTION - SET RETURN CODE
         B     EXIT               AND EXIT
*   OPEN THE FILE
OPEN     OPEN  (JESACB)           OPEN THE FILE
         TM    JESACB+(ACBOFLGS-IFGACB),ACBOPEN   DID IT OPEN OK?
         BZ    OPNERROR           NO...ERROR
         XR    R15,R15            SET GOOD RETURN CODE
         B     EXIT               AND RETURN
OPNERROR LA    R15,8              BAD OPEN - SET RETURN CODE TO 8
         B     EXIT               AND RETURN
CLOSE    CLOSE (JESACB)           CLOSE THE FILE
         XR    R15,R15            SET GOOD RETURN CODE
         B     EXIT               AND EXIT
WRITE    L     R2,4(R10)          R2 -> OUTPUT RECORD
         MVC   IOAREA,0(R2)       MOVE TO I/O AREA
         PUT   RPL=JESRPL         WRITE THE RECORD
         LTR   R15,R15            DID THE WRITE GO OK?
         BZ    EXIT               YES...RETURN WITH ZERO RC
         LA    R15,8              NO...SET RC TO 8
         B     EXIT               AND EXIT
TERM     ENDREQ  RPL=JESRPL       ENDREQ THE FILE
         LTR   R15,R15            DID THE ENDREQ GO OK?
         BNZ   TRMERERR           NO...ERROR
         L     R2,4(R10)          R2 -> JOBID PARM
         MVC   0(8,R2),JESRPL+(RPLRBAR-IFGRPL)  MOVE JOBID TO PARM
         CLC   =CL3'JOB',0(R2)    IS IT A GOOD JOBID (JOBXXXXX)?
         BE    EXIT               YES...EXIT WITH GOOD RETURN CODE
         MVC   0(8,R2),BOGUSID    NO...SET UP BOGUS JOBID
         B     EXIT               EXIT WITH ZERO RC
TRMERERR LA    R15,8              ENDREQ ERROR - SET RC TO 8
         B     EXIT               AND EXIT
EXIT     L     R13,4(R13)         R13 -> HSA
         L     R14,12(R13)        RESTORE REG 14
         LM    R0,R12,20(R13)     RESTORE REGS 0 TO 12
         MVI   12(R13),X'FF'      FLAG SAVE AREA
         BR    R14                AND RETURN
BOGUSID  DC    CL8'JOB00000'      BOGUS JOB ID
         LTORG ,                  -
SAVEAREA DS    18F                REGISTER SAVE AREA
IOAREA   DS    CL80               RECORD AREA
JESACB   ACB   DDNAME=INTRDR,                                          X
               LRECL=80,                                               X
               MACRF=(ADR,SEQ,OUT)
JESRPL   RPL   ACB=JESACB,                                             X
               AREA=IOAREA,                                            X
               AREALEN=80,                                             X
               RECLEN=80
         IFGACB ,                  -
         IFGRPL ,                  -
         END


Lynn Grant
Technical Consultant (USA)    © Xephon 1988





























