Transferring load modules via a PC

A problem we have encountered with all PC to mainframe file
transfers is their inability to handle undefined record formats.
This makes it impossible to transfer a load module from one
site to another using a PC. Even if this type of transfer was
supported, the directory entry information is required by the
loader to determine the module's attributes.

To get around this problem I have written two small programs,
STUFF and UNSTUFF. The first takes a variable spanned
dataset from an IEBCOPY unload and converts it to an 80-byte
FB dataset containing no non-display characters. This file can
then be transferred to and from the PC with no problems. The
second program reverses the process building the IEBCOPY
unload file from the 80-byte file. This can then be reloaded
with no problems.

The process allows all members in a PDS to be unloaded to the
PC and restored without having to do a transfer for each
member. If the source for UNSTUFF is included with the
unload file this method can be used to send a program
anywhere in the world.


SOURCE CODE FOR STUFF

*******************************************************
*  THIS PROGRAM TAKES A VARIABLE SPANNED IEBCOPY      *
*  UNLOAD DATASET AND CONVERTS IT TO A FLAT 80-BYTE   *
*  FILE TO ALLOW TRANSFER TO A PC.                    *
*******************************************************
STUFF    CSECT
         SAVE  (14,12)                 NORMAL LINKAGE
         BALR  R12,0                     STUFF USING
         USING *,R12                        R12 FOR ADDRESSING
         LR    R10,R13                 SAVE ADDR OF OLD SAVEAREA IN R11
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R10,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R10)              SAVE ADDR NEW IN OLD SAVEAREA
         GETMAIN R,LV=32760    LOC=BELOW GET BUFFER STORAGE
         ST    R1,BUFFADDR             SAVE IN ADDRESS FIELD
         OPEN  (INFILE,(INPUT))
         OPEN  (OUTFILE,(OUTPUT))
         XR    R9,R9
         XR    R10,R10
NEXTREC  GET   INFILE                  READ INPUT RECORD
         LA    R9,1(R9)                INCREMENT RECORD COUNT
         LR    R6,R1                   ADDRESS OF RECORD IN R6
         XR    R5,R5                   ZERO R5
         L     R4,BUFFADDR             LOAD ADDRESS OF OUTPUT RECORD
         LH    R5,0(R6)                LOAD LENGTH OF RECORD
         LR    R7,R5                   LOAD LENGTH OF REC
         LR    R8,R5                   LOAD LENGTH OF REC FOR LATER
         MVCL  R4,R6                   MOVE RECORD TO OUTPUT
         B     SKIP
         CVD   R8,PACKED               CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   RECORDS,ZONED           MOVE TO OUTPUT RECORD
         WTO   MF=(E,WTOY)
SKIP     EQU   *
         XR    R3,R3                   ZERO R3 FOR COUNT
         XR    R4,R4                   ZERO R4 FOR LENGTH
         L     R5,BUFFADDR             LOAD ADDRESS OF OUTPUT RECORD
         LH    R4,0(R5)                LOAD LENGTH OF RECORD
CHKREC   CLR   R3,R4                   CHECK LENGTH
         BNL   NEXTREC                 ALL DONE THEN GET NEXT RECORD
         LA    R2,OUTREC               ADDRESS OF OUTPUT RECORD
         XR    R7,R7                   ZERO COUNTER
         LA    R7,40                   LOAD COUNTER
MOVENEXT IC    R8,0(R5)                LOAD CHARACTER
         STC   R8,1(R2)                STORE SECOND CHAR
         SRL   R8,4                    MOVE RIGHT 4 BITS
         STC   R8,0(R2)                STORE CHAR
         LA    R2,2(R2)                POINT TO NEXT BIT OF RECORD
         LA    R5,1(R5)                INCREMENT RECORD POINTER
         BCT   R7,MOVENEXT
         NC    OUTREC,ANDIT            AND IT WITH X'0F'
         TR    OUTREC,TRTAB            TRANSLATE IT
         PUT   OUTFILE,OUTREC          WRITE OUTPUT RECORD
         LA    R10,1(R10)              INCREMENT RECORD COUNT
         LA    R3,40(R3)               ADD TO COUNT
         B     CHKREC                  GO CHECK LENGTH
END      CLOSE (INFILE)
         CLOSE (OUTFILE)
         CVD   R9,PACKED               CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   INCNT,ZONED             MOVE TO OUTPUT RECORD
         CVD   R10,PACKED              CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   OUTCNT,ZONED            MOVE TO OUTPUT RECORD
         WTO   MF=(E,WTOX)
         L     R13,4(R13)              LOAD ADDRESS OF HIS SAVE AREA
         RETURN (14,12),RC=(15)        RESTORE HIS REGISTERS AND RETURN
SAVEAREA DC    18F'0'
BUFFADDR DC    F'0'
ANDIT    DC    80X'0F'
TRTAB    DC    C'0123456789ABCDEF'
ZONED    DS    ZL8
         DS    0D
PACKED   DS    PL8'0'
WTOY     WTO   'XXXXXXXX                                          ',   +
               MF=L
         ORG   WTOY+4
RECORDS  DC    CL8' '
         ORG
WTOX     WTO   'XXXXXXXX RECORDS STUFFED OUT TO XXXXXXXX RECORDS  ',   +
               MF=L
         ORG   WTOX+4
INCNT    DC    CL8' '
         ORG   WTOX+36
OUTCNT   DC    CL8' '
         ORG
INFILE   DCB   DDNAME=UNLOAD,DSORG=PS,MACRF=GL,EODAD=END
OUTFILE  DCB   DDNAME=STUFFED,DSORG=PS,MACRF=PM
OUTREC   DC    CL80' '
         LTORG
         END  STUFF


SOURCE CODE FOR UNSTUFF

*******************************************************
*  THIS PROGRAM TAKES A FILE THAT HAS BEEN STUFFED    *
*  IE CONVERTED FROM IEBCOPY UNLOAD FORMAT VARIABLE   *
*  SPANNED RECORDS INTO A FLAT 80-BYTE RECORD DATASET *
*  AND CONVERTS IT BACK TO AN IEBCOPY UNLOAD FORMAT   *
*******************************************************
UNSTUFF  CSECT
         SAVE  (14,12)                 NORMAL
         BALR  R12,0                     LINKAGE
         USING *,R12                        UNSTUFF USING R12
         LR    R10,R13                 SAVE ADDR OF OLD SAVEAREA IN R11
         LA    R13,SAVEAREA            ADDR NEW SAVEAREA IN R13
         ST    R10,4(R13)              SAVE ADDR OLD IN NEW SAVEAREA
         ST    R13,8(R10)              SAVE ADDR NEW IN OLD SAVEAREA
         GETMAIN R,LV=32760    LOC=BELOW GET BUFFER STORAGE
         ST    R1,BUFFADDR             SAVE IN ADDRESS FIELD
         OPEN  (INFILE,(INPUT))
         OPEN  (OUTFILE,(OUTPUT))
         XR    R9,R9
         XR    R10,R10
NEXTREC  GET   INFILE,INREC            READ INPUT RECORD
         LA    R9,1(R9)                INCREMENT COUNT
         BAL   R14,CONVREC
         XR    R3,R3                   ZERO R3
         XR    R5,R5                   ZERO R5
         LH    R5,INREC                LOAD LENGTH OF RECORD
         L     R4,BUFFADDR             LOAD ADDRESS OF BUFFER
MOVEIT   MVC   0(40,R4),INREC          MOVE RECORD IN
         LA    R3,40(R3)               INCREMENT COUNT
         CLR   R3,R5                   TOTAL RECORD LOADED
         BNL   PUTREC                  GOT ALL THEN PUT RECORD
         LA    R4,40(R4)               POINT TO NEXT BIT OF BUFFER
         GET   INFILE,INREC            GET ANOTHER RECORD BIT
         BAL   R14,CONVREC
         LA    R9,1(R9)                INCREMENT COUNT
         B     MOVEIT                  GO DO IT AGAIN
PUTREC   PUT   OUTFILE                 GET RECORD ADDRESS
         LA    R10,1(R10)              INCREMENT COUNT
         LR    R4,R1                   ADDRESS OF RECORD IN R6
         L     R6,BUFFADDR             LOAD ADDRESS OF OUTPUT RECORD
         LR    R7,R5                   LOAD LENGTH OF REC
         LR    R8,R5                   LOAD LENGTH OF REC
         MVCL  R4,R6                   MOVE RECORD TO OUTPUT
         B     SKIP
         CVD   R8,PACKED               CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   RECORDS,ZONED           MOVE TO OUTPUT RECORD
         WTO   MF=(E,WTOY)
SKIP     EQU   *
         B     NEXTREC                 GO GET NEXT RECORD
END      CLOSE (INFILE)
         CLOSE (OUTFILE)
         CVD   R9,PACKED               CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   INCNT,ZONED             MOVE TO OUTPUT RECORD
         CVD   R10,PACKED              CONVERT REG 7 TO PACKED
         UNPK  ZONED,PACKED            CONVERT PACKED TO ZONED
         OI    ZONED+7,X'F0'           CONVERT ZONED TO CHAR FORMAT
         MVC   OUTCNT,ZONED            MOVE TO OUTPUT RECORD
         WTO   MF=(E,WTOX)
         L     R13,4(R13)              LOAD ADDRESS OF HIS SAVE AREA
         XR    R15,R15                 ZERO RETURN CODE
         RETURN (14,12),RC=(15)        RESTORE HIS REGISTERS AND RETURN
CONVREC  TR    INREC,TRTAB
         STM   R2,R5,CONVSAVE
         LA    R2,INREC
         LA    R3,INREC
         XR    R4,R4
         LA    R4,40
CONVR1   XR    R5,R5
         XR    R6,R6
         IC    R5,0(R2)
         SLL   R5,4                    SHIFT 4 BITS LEFT
         IC    R6,1(R2)                LOAD BYTE
         AR    R5,R6
         STC   R5,0(R3)
         LA    R3,1(R3)                POINT TO NEXT BYTE
         LA    R2,2(R2)                POINT TO NEXT TWO BYTES
         BCT   R4,CONVR1               LOOP UNTIL DONE
         LM    R2,R5,CONVSAVE
         BR    R14                     RETURN TO CALLER
CONVSAVE DC    5F'0'
TRTAB    DC    256X'00'
         ORG   TRTAB+C'0'
         DC    X'00010203040506070809'
         ORG   TRTAB+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG
SAVEAREA DC    18F'0'                  REGISTER SAVE AREA
BUFFADDR DC    F'0'
ZONED    DS    ZL8
         DS    0D
PACKED   DS    PL8'0'
WTOY     WTO   'XXXXXXXX                                          ',   +
               MF=L
         ORG   WTOY+4
RECORDS  DC    CL8' '
         ORG
WTOX     WTO   'XXXXXXXX RECORDS STUFFED IN TO XXXXXXXX RECORDS   ',   +
               MF=L
         ORG   WTOX+4
INCNT    DC    CL8' '
         ORG   WTOX+35
OUTCNT   DC    CL8' '
         ORG
OUTFILE  DCB   DDNAME=UNLOAD,DSORG=PS,MACRF=PL
INFILE   DCB   DDNAME=STUFFED,DSORG=PS,MACRF=GM,EODAD=END
INREC    DC    CL80' '
         LTORG
         END  UNSTUFF


JCL FOR STUFF

//IEBCOPY  EXEC PGM=IEBCOPY,PARM='SIZE=256K'
//IN1      DD  DSN=your.load.library,DISP=SHR
//OUT1     DD  DSN=&&TEMP,DISP=(NEW,PASS),UNIT=SYSDA,
//         DCB=(LRECL=18448,BLKSIZE=18452,RECFM=VS),
//         SPACE=(TRK,(10,5),RLSE)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  COPY INDD=((IN1,R)),OUTDD=OUT1
//*
//STUFF    EXEC PGM=STUFF,REGION=4096K
//SYSPRINT DD  SYSOUT=*
//SNAP     DD  SYSOUT=*
//UNLOAD   DD  DSN=&&TEMP,DISP=(OLD,DELETE)
//STUFFED  DD  DSN=your.stuffed.file,DISP=(,CATLG),UNIT=SYSDA,
//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB),
//         SPACE=(TRK,(10,5),RLSE)


JCL FOR UNSTUFF

//UNSTUFF  EXEC PGM=UNSTUFF,REGION=4096K
//SYSPRINT DD  SYSOUT=*
//STUFFED  DD  DSN=your.stuffed.file,DISP=SHR
//UNLOAD   DD  DSN=&&TEMP,DISP=(NEW,PASS),UNIT=SYSDA,
//         DCB=(LRECL=18448,BLKSIZE=18452,RECFM=VS),
//         SPACE=(TRK,(10,5),RLSE)
//*
//IEBCOPY  EXEC PGM=IEBCOPY,PARM='SIZE=256K'
//OUT1     DD  DSN=your.load.library,DISP=SHR
//IN1      DD  DSN=&&TEMP,DISP=(OLD,DELETE)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  COPY INDD=((IN1,R)),OUTDD=OUT1


Wayne MacDonald
Systems Programmer
GIO (Australia)                                                cXephon 1993

