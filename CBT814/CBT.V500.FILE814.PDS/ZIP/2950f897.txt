The PUSHPOP utility


PROBLEM ADDRESSED

A very common programming requirement is to store
temporary data in tables.  In most cases the sizes of these tables
are not known in advance.  This means that if a table is
allocated statically it will usually be the wrong size.  If it is too
small it will cause a program failure (unless corrective
measures are taken), if it is too large it will be wasteful of main
storage (which even in days of virtually unlimited storage
cannot be entirely ignored, especially if the program uses a
number of tables).  The processing of variable length entries
further complicates the coding.  Simple stack (or queue)
processing is a function missing from the standard MVS
routines.  The following PUSHPOP utility provides subroutines
for the efficient processing of dynamically allocated tables.


SOLUTION

PUSHPOP organizes the tables in chains.  Each chain is
identified by its chain number.  A chain consists of one or
more dynamically allocated blocks.  As each block becomes
full a new block is allocated and chained to the previous block.
In this way the size of each table (chain) is virtually unlimited
but only as large as it needs to be.  The number of chains
(independent tables) is also virtually unlimited.  The records in
the chains are maintained as a queue in First In First Out
(FIFO) sequence, although the program could easily be
modified to support a Last In First Out (LIFO) oganization.
The following routines (functions) are provided:

o      PUSH - put entry (record) into table (chain).

o      POP - retrieve entry (record) from table (chain).

o      POPUP - position chain at start.

o      POPOUT - remove chain.  The blocks are placed in a
       free chain, which is used to satisfy subsequent allocation
      requests.

o      SETBLOCKSIZE - set the block size (default 4096).

o      FREECHAIN - remove chain.  The blocks are returned to
      MVS via FREEMAIN).

These routines are part of the PUSHPOP program and are
invoked using the appropriate function code.

Notes

1      The function names (PUSH, POP, etc) are used because
      of their familiarity, although these names are usually
      associated with stack processing (ie LIFO processing).

2      The chain number may be assigned at will.  For example,
      new chains do not need to be assigned in strict numerical
      sequence (the first chain could have chain number 27, the
      second chain could have chain number 3, etc).

3      There is no way of physically deleting individual entries
      from a chain.  The complete chain is deleted with the
      POPOUT or FREECHAIN command.  The POPOUT
      command enables the freed blocks to be re-used.


CALLING SEQUENCE

PUSH - put entry (record) into table (chain)

The following format is used:

      CALL PUSHPOP,(fc_push,record,recordlength[,chainno]),VL

where fc_push is the function code (DC H'1'), record is the area
containing the record to be stored, recordlength is the length of
the record to be stored, and chainno is the number of the chain
in which the record is to be placed (default 1).  The PUSH
operation always puts each new record at the end of the table
(POPUP has no effect on PUSH operations).

POP - retrieve entry (record) from table (chain)

The following format is used:

      CALL
PUSHPOP,(fc_pop,record,recordlength[,chainno[,buffaddr]]),VL

where fc_pop is the function code (DC H'2'), record is the area
to receive the record to be retrieved (this area must be large
enough to accommodate the record), recordlength is the length
of the record retrieved, chainno is the number of the chain in
which the record is to be retrieved (default 1), and buffaddr is
(optionally) returned with the address of the record in the
internal buffer.  The POP operation accesses the next retrieval
record in the table.  The retrieved record is not deleted.  The
next pointer can be reset by the POPUP operation.  The records
accessed by PUSH and POP operations are basically
independent of each other.

POPUP - position retrieval (POP) chain at start

The following format is used:

      CALL PUSHPOP,(fc_popup,chainno),VL

where fc_popup is the function code (DC H'3') and chainno is
the number of the chain which is to be repositioned (for POP
operations).

POPOUT - remove chain (retain blocks)

The following format is used:

      CALL PUSHPOP,(fc_popout,chainno),VL

where fc_popout is the function code (DC H'4') and chainno is
the number of the chain which is to be released.  The blocks in
the chain are set into a pool of free blocks, which are then re-
used for subsequent block allocations (ie block allocations are
made from this pool rather than via GETMAIN, until this pool
is exhausted).  The chain can no longer be used after this
operation has been performed.

SETBLOCKSIZE - set the block size

The following format is used:
CALL PUSHPOP,(fc_setblocksize,blocksize),VL

where fc_setblocksize is the function code (DC H'5') and
blocksize is the block size to be allocated.  This size, including
the length of the block header (16 bytes) and the record header
(2 bytes), must be at least as large as the largest record to be
stored.  The default block size is 4096.

FREECHAIN - remove chain (free blocks)

The following format is used:

CALL PUSHPOP,(fc_freechain,chainno),VL
where fc_freechain is the function code (DC H'6') and chainno
is the number of the chain which is to be released.  The blocks
 in the chain are released (via FREEMAIN).  The chain can no
longer be used after this operation has been performed.


RETURN CODES

The return code (register 15) is set to one of the following values:

0      OK - operation successful.

4      Not OK - the end of the chain (POP operation) has been
      reached; the buffer does not contain a record.

8      Not OK - the specified chain is not present.

16      Not OK - the function code is invalid.


METHOD OF OPERATION

The dynamically allocated blocks are chained together as
illustrated in Figure 1.  Each block has a 16-byte header, which
contains information about the block (address of the next block
in the chain, address of the next entries within this block,
number of bytes free in the block).  Chain 0 contains
information about each table chain (see Figure 2).  Chain 0 is
itself administered as a table.


PUSHPOP SOURCE CODE

         TITLE 'PUSH/POP Functions'
**
* register usage:
*   R8: chain no.
*   R9: A(current block)
*  R10: A(Chain 0 entry)
**
PUSHPOP  CSECT
* initialize addressing
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save-area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         LM    R2,R6,0(R1)        load parameter pointers
* R2: A(parameter 1) - FunctionCode (half-word)
**                      1 = PUSH
**                      2 = POP
**                      3 = POPUP
**                      4 = POPOUT
**                      5 = SETBLOCKSIZE
**                      6 = FREECHAIN
* The following parameters are function dependent
* R3: A(parameter 2)
* R4: A(parameter 3)
* R5: A(parameter 4)
* R6: A(parameter 5)
         MVC   RC,=H'16'          invalid FunctionCode
         LH    R15,0(R2)          function code
         CH    R15,=AL2(N_BR_TAB)
         BH    EOP                :error
         SLL   R15,2              FunctionCode * 4
         B     BR_TAB-4(R15)      transfer to processing routine
* branch-table
BR_TAB   B     B1000              PUSH
         B     B2000              POP
         B     B3000              POPUP
         B     B4000              POPOUT
         B     B5000              SETBLKSIZE
         B     B6000              FREECHAIN
N_BR_TAB EQU   (*-BR_TAB)/4       no. of BR_TAB entries
EOP      DS    0H                 job end
         L     R13,4(R13)         restore A(old save-area)
         LH    R15,RC             load ReturnCode
         RETURN (14,12),RC=(15)   terminate
RC       DS    H
         TITLE 'PUSH routine'
B1000    DS    0H
* R3: A(parameter 2) - A(record)
* R4: A(parameter 3) - A(record-length field)
* R5: A(parameter 4) - A(chain-number field), optional
         LA    R8,1               default chain
         LTR   R4,R4              test last parameter
         BM    *+8                3rd parameter = last parameter
         LH    R8,0(R5)           load chain number
* R8: chain number
         LH    R7,0(R4)           load record length
* R7: record length
         BAL   R14,GETCH0         get chain block for "chain number"
* R15: ReturnCode 0 = ok, 8 = nok
         LTR   R15,R15
         BZ    *+8
         BAL   R14,SETCH0
* set entry at end of chain
         USING C_DSECT,R10
         L     R9,C_LAST          A(data block header)
* R9: A(data block header)
* R3: A(entry)
* R7: L(entry)
         BAL   R14,SETENTRY       set entry into data block
B1010    DS    0H
         MVC   RC,=H'0'           set ReturnCode
         B     EOP
         TITLE 'POP routine'
B2000    DS    0H
* R3: A(parameter 2) - A(record)
* R4: A(parameter 3) - A(record-length field)
* R5: A(parameter 4) - A(chain-number field), optional
* R6: A(parameter 5) - A(buffer record), optional
         LA    R8,1               default chain
         LTR   R4,R4              test last parameter
         BM    B2010              4th parameter missing
         LH    R8,0(R5)           load chain number
         LTR   R5,R5              test last parameter
         BP    B2020              5th parameter present
B2010    SR    R6,R6
* R8: chain number
B2020    EQU   *
         BAL   R14,GETCH0        get chain block for "chain number"
* R15: ReturnCode 0 = ok; 8 = nok
* R10: A(Chain 0 entry)
         STH   R15,RC             set ReturnCode
         LTR   R15,R15            test ReturnCode
         BNZ   EOP                :nok
         USING C_DSECT,R10
         L     R9,C_CURR          A(current data block hdr)
* R9: A(block)
         USING B_DSECT,R9
* test whether EOB
B2110    L     R14,B_CURR         current ptr
         C     R14,B_LAST         ?end of block ptr
         BL    B2100              :ok
* else get next chain block
         MVC   RC,=H'4'           ReturnCode: end of chain
         L     R9,B_NEXT          A(next chain block)
         LTR   R9,R9
         BZ    EOP                :end of chain
* update Chain-0 entry
         ST    R9,C_CURR
* reset intra-block pointers
         LA    R1,B_DATA
         ST    R1,B_CURR          current ptr
         B     B2110              :process next chain block
* return buffer record
         USING R_DSECT,R14
B2100    LH    R1,R_DATLEN        data length
         STH   R1,0(R4)           return record length
         LR    R0,R3              A(record)
         LA    R14,R_DATA         A(buffer-data)
         LTR   R6,R6              is record address to be returned?
         BZ    *+8                :no
         ST    R14,0(R6)          return record address in buffer
         LR    R15,R1             L(record)
         MVCL  R0,R14             move from data buffer
         ST    R14,B_CURR         new current ptr
         MVC   RC,=H'0'           set ReturnCode := 0
         B     EOP
         TITLE 'POPUP routine'
B3000    DS    0H
* R3: A(parameter 1) - A(chain-number field)
         LH    R8,0(R3)           load chain number
* R8: chain number
         BAL   R14,GETCH0         get chain block for "chain number"
* R15: ReturnCode 0 = ok; 8 = nok
         STH   R15,RC             set ReturnCode
         LTR   R15,R15            test ReturnCode
         BNZ   EOP                :nok
* ok, R10: A(Chain 0 entry)
         USING C_DSECT,R10
* reset pointers
         L     R9,C_FIRST         A(first block)
         ST    R9,C_CURR
         LA    R1,B_DATA          A(first entry)
         ST    R1,B_CURR
         B     EOP
         TITLE 'POPOUT routine'
B4000    DS    0H
* Function: remove chain
* R3: A(parameter 1) - A(chain-number field)
         LH    R8,0(R3)           load chain number
* R8: chain number
         BAL   R14,GETCH0         get chain block for "chain number"
* R15: ReturnCode 0 = ok; 8 = nok
         STH   R15,RC             set ReturnCode
         LTR   R15,R15            test ReturnCode
         BNZ   EOP                :nok
* ok, R10: A(Chain 0 entry)
         USING C_DSECT,R10
         MVC   C_NO,=H'0'         delete Chain 0 entry
         MVC   CURRCHN,=H'0'      reset current chain
         L     R1,C_FIRST         A(first block in chain)
         L     R15,FREEPTR        current pointer to free blocks
         ST    R1,FREEPTR         set pointer to free blocks
         LTR   R15,R15            empty?
         BZ    EOP                :return
         L     R9,C_LAST          A(last block in chain)
         USING B_DSECT,R9
* concatenate chains
*  R9: A(header, last block in chain)
* R15: A(existing chain)
         ST    R15,B_NEXT
         B     EOP
         TITLE 'SetBlksize routine'
B5000    DS    0H
* R3: A(parameter 1) - A(blocksize)
         L     R1,0(R3)           blocksize
         ST    R1,BLKSIZE
         MVC   RC,=H'0'           set ReturnCode := 0
         B     EOP
         TITLE 'FreeChain routine'
B6000    DS    0H
* Function: free chain (chain blocks deallocated (via FREEMAIN))
* R3: A(parameter 1) - A(chain-number field)
         LH    R8,0(R3)           load chain number
* R8: chain number
         BAL   R14,GETCH0         get chain block for "chain number"
* R15: ReturnCode 0 = ok; 8 = nok
          STH  R15,RC             set ReturnCode
          LTR  R15,R15            test ReturnCode
          BNZ  EOP                :nok
* ok, R10: A(Chain 0 entry)
         USING C_DSECT,R10
         MVC   C_NO,=H'0'         delete Chain 0 entry
         MVC   CURRCHN,=H'0'      reset current chain
         L     R9,C_FIRST         A(first block in chain)
         USING B_DSECT,R9
B6010    L     R0,BLKSIZE         L(block)
         LR    R1,R9              A(block)
         L     R9,B_NEXT          A(next chain block), 0 = EOC
         FREEMAIN R,LV=(0),A=(1)  free storage block
         LTR   R9,R9              EOC?
         BNZ   B6010
         B     EOP
         TITLE 'Subroutines'
GETCH0   DS    0H    get Chain 0 entry
* Function: get Chain-0 entry
* Input- R8: chain no.
* Output - R10: A(Chain-0 entry)
*        - R15: ReturnCode 0 = ok; 8 = nok
         SR    R15,R15            ReturnCode := 0
         CH    R8,CURRCHN         current chain?
         BNE   GETCH0_1           :no
* else use current pointers
         L     R10,ACCHAIN        A(current chain)
         BR    R14                return
GETCH0_1 L     R1,ACHAIN0         A(Chain 0)
         USING B_DSECT,R9
GETCH0_2 LR    R9,R1              A(Chain 0 block)
         LA    R10,B_DATA         A(start of data), Chain 0 entry
         USING C_DSECT,R10
GETCH0_3 C     R10,B_LAST         A(last entry)
         BE    GETCH0_4           :end of block
* else entry present
         CH    R8,C_NO            test chain no.
         BNE   GETCH0_5           :entry not found
* entry found
         STH   R8,CURRCHN         set current chain no.
         ST    R10,ACCHAIN        set A(current chain)
         BR    R14                :return
* else get next entry
GETCH0_5 LA    R10,C_LEN(R10)     ptr++
         B     GETCH0_3           :test next entry
* end of chain block
GETCH0_4 L     R1,B_NEXT          A(next chain block, forward)
         LTR   R1,R1
         BNZ   GETCH0_2           :not end of chain
* end of chain, entry not found
* R9: A(current Chain 0 block)
         LA    R15,8              set ReturnCode
         BR    R14
         DS    A
SETCH0   ST    R14,SETCH0-4
* Function: create Chain-0 entry
* Input - R8: chain no.
* find first free entry
         STH   R8,CURRCHN         current chain no.
         L     R9,ACHAIN0         A(Chain 0)
         USING B_DSECT,R9
SETCH0_5 LA    R10,B_DATA         A(start of data), Chain 0 entry
         USING C_DSECT,R10
* test whether EOB
SETCH0_4 C     R10,B_LAST
         BE    SETCH0_2           :EOB
* test whether entry free
         CLC   C_NO,=H'0'
         BE    SETCH0_3           free entry found
         LA    R10,C_LEN(R10)
         B     SETCH0_4           :try next entry
SETCH0_2 LR    R1,R9              A(current chain block)
         L     R9,B_NEXT          A(next chain block)
         LTR   R9,R9
         BNZ   SETCH0_5           not EOC
* end of chain, test whether space in block
         LR    R9,R1              A(current chain block)
         LA    R1,C_LEN           L(chain-0 entry)
         C     R1,B_FREE          test against bytes remaining
         BNH   SETCH0_1           :space available
         BAL   R14,ALLOCBLK       allocate new Chain-0 block
* R9: A(block)
SETCH0_1 L     R10,B_CURR         A(Chain-0 entry)
         USING C_DSECT,R10
SETCH0_3 STH   R8,C_NO            set chain no.
* update block header
         LA    R1,C_LEN           L(chain-0 entry)
         LA    R0,0(R1,R10)
* R0: A(next entry)
         ST    R0,B_CURR          new current ptr
         ST    R0,B_LAST          (current) last block in chain
         L     R0,B_FREE          current bytes remaining
         SR    R0,R1              - L(chain-0 entry)
         ST    R0,B_FREE          update bytes remaining
* allocate first data block
         SR    R9,R9              R9:=0
         BAL   R14,ALLOCBLK       allocate data block
* R9: A(data block)
* complete Chain 0 entry
         ST    R9,C_FIRST         first block in chain
         ST    R9,C_CURR          current block in chain
         ST    R9,C_LAST          last block in chain
         ST    R10,ACCHAIN        A(current Chain 0 entry)
         L     R14,SETCH0-4
         BR    R14                :return
* allocate new chain block
         DS    A
ALLOCBLK ST    R14,ALLOCBLK-4     save return address
* Function: allocate block
* Input - R9: A(current chain block), 0 = none
* Output- R9: A(new chain block)
* get free block, if available
         L     R1,FREEPTR
         LTR   R1,R1
         BZ    ALLOC0             :no free blocks
         DROP  R9                 temporary
         USING B_DSECT,R1
         L     R0,B_NEXT          A(next free block), 0 = EOC
         ST    R0,FREEPTR         update FREEPTR
         B     ALLOC2             :process as GETMAINed block
         DROP  R1
         USING B_DSECT,R9
ALLOC0   L     R0,BLKSIZE         L(block)
         GETMAIN R,LV=(0)         perform dynamic allocation
* R1: A(allocated block)
ALLOC2   LR    R2,R1
* initialize block header
         LTR   R1,R9
         BZ    ALLOC1             :first block in chain
         ST    R2,B_NEXT          set chain-forward
ALLOC1   LR    R9,R2              A(new block)
         XC    B_NEXT,B_NEXT
         LA    R0,B_DATA
         ST    R0,B_CURR          A(current entry)
         ST    R0,B_LAST          A(last entry)
         L     R0,BLKSIZE         L(block)
         SH    R0,=AL2(B_HDRLEN)
         ST    R0,B_FREE          N(bytes free)
         L     R14,ALLOCBLK-4     load return address
         BR    R14                :return
         DS    A
SETENTRY ST    R14,SETENTRY-4     save return address
* Function: set entry into data block
* Input - R3: A(entry)
*       - R7: L(entry)
*       - R9: A(data block header)
* test whether space in data block
         USING R_DSECT,R14        internal record DSECT
SETENTR1 L     R1,B_FREE          space remaining
         LA    R0,R_FIXLEN(R7)    total record length (incl fixed part)
         SR    R1,R0              residual length
         BP    SETENTR3           :room in current block
* else allocate new data block
         BAL   R14,ALLOCBLK       allocate new block
* R9: A(data block header)
         ST    R9,C_CURR          update current ptr
         ST    R9,C_LAST          update EOC ptr
         B     SETENTR1           :retry
* move data
* R1: residual length in chain block
* R7: L(data)
* R3: A(data)
SETENTR3 ST    R1,B_FREE
         L     R14,B_LAST         EOC ptr
         STH   R7,R_DATLEN        set data length
         LR    R0,R3              A(record)
         LR    R1,R7              L(record)
         LA    R14,R_DATA         A(buffer data)
         LR    R15,R1             L(record)
         MVCL  R14,R0             move into data buffer
         ST    R14,B_LAST         (current) last block in chain
         L     R14,SETENTRY-4     load return address
         BR    R14                return
         TITLE 'Data areas'
CURRCHN  DC    H'0'               current chain no, 0 = empty
ACCHAIN  DC    A(0)               A(current chain)
ACHAIN0  DC    A(CHAIN0)          A(anchor chain)
FREEPTR  DC    A(0)               A(free blocks), chained
NCHAIN0  EQU   10                 no of preallocated entries
BLKSIZE  DC    A(4096)            size of block, default
CHAIN0   DS    0A                 preallocated Chain 0 block header
* block header
         DC    A(0)        address of next block in chain (0 = EOC)
         DC    A(CHAIN0_DUMMY)   address of current record in block
         DC    A(CHAIN0_DUMMY)   address of last record in block
         DC    A(NCHAIN0*C_LEN)  number of free bytes in block
* preallocated data
CHAIN0_DUMMY DC  XL(NCHAIN0*C_LEN)'0'
         TITLE 'DSECTS'
B_DSECT  DSECT , block header
B_NEXT   DS    A     address of next block in chain (0 = EOC)
B_CURR   DS    A     address of current (POP) record in block
B_LAST   DS    A     address of last (PUSH) record in block
B_FREE   DS    F     number of free bytes in block
B_HDRLEN EQU   *-B_DSECT length of header
B_DATA   EQU   *     start of data
C_DSECT  DSECT , Chain-0 entry
C_NO     DS    HL2   chain number (0 = free)
C_FIRST  DS    AL4   address of first block in chain
C_CURR   DS    AL4   address of current (POP) block in chain
C_LAST   DS    AL4   address of last (PUSH) block in chain
C_LEN    EQU   *-C_DSECT    total length of Chain-0 entry
R_DSECT  DSECT , internal record entry
R_DATLEN DS    HL2   data length
R_DATA   DS    0X    start of data
R_FIXLEN EQU   *-R_DSECT    length of fixed part
         END


A S Rudd
Technical Consultant (Germany)        c A S Rudd 1991

