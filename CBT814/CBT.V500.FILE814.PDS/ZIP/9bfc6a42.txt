A TSO-based STC monitor

STCMON REXX EXEC

/*REXX*/
/*Trace ?i*/
signal on syntax                                      /* standard     */
signal on halt                                        /* error        */
/**********************************************************************/
/******************* allocate STC list members ************************/
/**********************************************************************/
"ALLOC FI(STLIST1) DA(your.pds(STCLIST)) SHR REUS"
"ALLOC FI(STLIST2) DAyour.pds(REQLIST)) SHR REUS"
/**********************************************************************/
/********** Set up PF4 for timer refresh command **********************/
/**********************************************************************/
"ISPEXEC VGET (ZPF04)"
pf04 = zpf04
zpf04 = 'STIM'
"ISPEXEC VPUT (ZPF04)"
/**********************************************************************/
/********** set hexadecimal panel attribute characters ****************/
/**********************************************************************/
c1 = '51'x       /*Green, Reverse Video (task active)                 */
c2 = '52'x       /*Red, Reverse Video (task inactive)                 */
c3 = '53'x       /*Blue, normal (unused slots display)                */
c4 = '54'x       /*Blue, Reverse Video (PF key area)                  */
c5 = '55'x       /*White, Reverse Video (PF key area)                 */
/**********************************************************************/
/********** Main Processing Loop **************************************/
/**********************************************************************/
start:
say 'Gathering information, please wait ...'
say "Press ENTER when '***' appears"
call refresh     /***** call ASVT scan subroutine  ********************/
process_flag = 1 /****** initialize exit flag  ************************/
timer_flag = 0   /****** set auto refresh off  ************************/
info = c4'    'c5'F1-HELP'c5'F4-AUTOREF'c5'F15-EXIT'c4 /*PFkey display*/
signal on halt name start  /**** trap attention interrupts ************/
do while process_flag      /**** go until PF15 pressed ****************/
  call display             /***** display screen **********************/
  if timer_flag then do    /***** are we in auto refresh mode? ********/
    "ISPEXEC CONTROL DISPLAY LOCK"   /*** yes - then lock panel *******/
    do cnt = 1 to sdelay by 5        /*** go into wait loop  **********/
/**********************************************************************/
/** The wait loop uses a 'TSO SLEEP' program to wait in 5-second   ****/
/** intervals. This is to allow attention interrupts to be         ****/
/** processed without too much delay. If you have a different      ****/
/** program for performing 'SLEEP'-type waiting, change this call. ****/
/**********************************************************************/
      interval = 5
      "SLEEP "interval
    end
  end
end
/**********************************************************************/
/** If we are here, PF15 must have been processed, so normal exit. ****/
/**********************************************************************/
signal on halt
"FREE FI(HBLIST1 HBLIST2)"
signal fin
/**********************************************************************/
/************* Standard REXX error traps ******************************/
/**********************************************************************/
halt:
syntax:
 say 'STCMON : ' sigl' +++ 'sourceline(sigl)
 say 'STCMON : ',
 'Error running exec, line 'sigl': 'errortext(rc)
 say 'STCMON : ' 'Rc = 'rc
/**********************************************************************/
/***** Exit routine - sets PF4 back to user's default *****************/
/**********************************************************************/
fin:
zpf04 = pf04
"ISPEXEC VPUT (ZPF04)"
exit
/**********************************************************************/
/***** Subroutines*****************************************************/
/**********************************************************************/
/**********************************************************************/
/***** Update STC statuses ********************************************/
/**********************************************************************/
refresh:
/**********************************************************************/
/***** Scan ASVT, building string containing names of all active ******/
/***** address spaces.                                           ******/
/**********************************************************************/
get_info:
stclist = ''
cvt = storage(10,4)                            /* address CVT  */
asvt = c2d(storage(d2x(c2d(cvt)+556),4))       /* address ASVT */
ascbaddr = asvt+528                            /* address first ASCB */
numascb = c2d(storage(d2x(asvt+516),4))        /* get no of ASCBs*/
ascbaddr = ascbaddr-4                          /* pre-set ascbaddr */
do numascb
  ascbaddr = ascbaddr+4                          /* bump up ascbddr*/
  ascb = c2x(storage(d2x(ascbaddr),4))           /* address ASCB  */
  if left(ascb,2) = '80' then iterate            /* invalid ASCB   */
  if x2d(ascb)=ascbaddr+4 then iterate            /* invalid ASCB?  */
  ascbdat = storage(ascb,4)                      /* get ASCB header */
  if ascbdat ^= 'ASCB' then iterate              /* invalid ASCB?   */
  if ascbdat = '80000000'x then leave            /* end of ASCBs?  */
  ascb = x2d(ascb)
  jobad = c2x(storage(d2x(ascb+172),4))          /* address JOB/INIT*/
  if jobad^=0 then                               /* valid address?   */
    stclist = stclist||' 'storage(jobad,8)       /* concatenate name */
  stcad = c2x(storage(d2x(ascb+176),4))          /* address STC      */
  if stcad^=0 then                               /* valid address?   */
    stclist = stclist||' 'storage(stcad,8)       /* concatenate name */
end
done: /* all done?        */
/**********************************************************************/
/***** Now read in started task lists and compare them against   ******/
/***** active task list built above                              ******/
/**********************************************************************/
/**********************************************************************/
/***** First for the 'SYSTEM' task list ....                     ******/
/**********************************************************************/
system_tasks:
drop stclist.      /***** initialize stem variables  ******************/
address mvs "EXECIO * DISKR STCLIST (STEM STCLIST. FINIS"
nsys = 0           /***** initialize number of active tasks ***********/
sysflg = 1         /***** set 'all-active' flag on ********************/
do cnt1 = 1 for 120  /***** max 120 tasks can fit on panel ************/
 num = right(cnt1,3,'0') /***** convert to 3 digits for variable name**/
 parse upper var stclist.cnt1 stcnam .  /* extract STC name ***********/
 if symbol('stclist.cnt1') = 'VAR' then do /*** is variable set? ******/
   if wordpos(stcnam,stclist) ^= 0 then do /* yes then check if active*/
      nsys = nsys + 1                      /* yes, bump counter *******/
      interpret "STC"num" = c1||left(stcnam,8)" /*set as green  *******/
   end
   else do                               /** not active ***************/
      interpret "STC"num" = c2||left(stcnam,8)" /*** set as red *******/
      sysflg = 0
   end
 end
 else                                    /* var not set - no task name*/
   interpret "STC"num"= c3||copies('.',8)" /* set as '......' *********/
end
/**********************************************************************/
/***** Now for the 'REQUEST' task list ...                       ******/
/**********************************************************************/
request_tasks:
drop reqlist.
address mvs "EXECIO * DISKR REQLIST (STEM REQLIST. FINIS"
nreq = 0
reqflg = 1
do cnt1 = 1 for 40
 num = right(cnt1,3,'0')
 parse upper var hblist2.cnt1 reqnam .
 if symbol('hblist2.cnt1') = 'VAR' then do
   if wordpos(reqnam,stclist) ^= 0 then do
      nreq = nreq + 1
      interpret "REQ"num"= c1||left(reqnam,8)"
   end
   else do
      interpret "REQ"num"= c2||left(reqnam,8)"
      reqflg = 0
   end
 end
 else
   interpret "REQ"num"= c3||copies('.',8)"
end
return
/**********************************************************************/
/***** Display main panel ... *****************************************/
/**********************************************************************/
display:
dat = date(e)             /**** Get today's date   ********************/
tim = time()              /**** .... and time      ********************/
datim = dat||' 'tim       /**** ... and put them together *************/
if sysflg then            /**** All tasks active ? ********************/
  nsys = c1||nsys         /**** .. set count as green *****************/
else                      /**** else ... ******************************/
  nsys = c2||nsys         /**** .. set count as red********************/
if reqflg then            /**** All tasks active ? ********************/
  nreq = c1||nreq         /**** .. set count as green *****************/
else                      /**** else ..********************************/
  nreq = c2||nreq         /****  .. set count as red ******************/
"ISPEXEC DISPLAY PANEL(STCMON)"
mainret = rc
/***** If auto-refresh requested, call routine ************************/
if zcmd = 'STIM' then call settim
/***** If PF15 pressed, then set exit flag ****************************/
if mainret <> 0 then process_flag = 0
/***** otherwise, refresh task statuses *******************************/
else call refresh
return
/**********************************************************************/
/***** Auto-refresh request, display panel to set interval. ***********/
/**********************************************************************/
settim:
err = ''
timpan:
"ISPEXEC ADDPOP"
"ISPEXEC DISPLAY PANEL(STCMON1)"
panret = rc
"ISPEXEC REMPOP"
if panret = 0 then do          /***** enter pressed ?******************/
  if sdelay // 5 ^= 0 then do   /** must be divisible by 5 ************/
    zedsmsg = 'INVALID INTERVAL'
    zedlmsg = 'INTERVAL MUST BE MULTIPLE OF 5 SECONDS'
    "ISPEXEC SETMSG MSG(ISRZ001)"
    err = 'YES'                 /* set panel error indicator **********/
    signal timpan               /* and re-display *********************/
  end
  zcmd = ''                    /* reset command ***********************/
  timer_flag = 1               /* switch on auto indicator ************/
/*********** switch bottom line display to indicate auto mode *********/
  info = c4'    'c5'*** AUTO-UPDATE MODE - USE ATTN TO CANCEL ***'c4
/*********** Lock display & re-display main panel *********************/
  "ISPEXEC CONTROL DISPLAY LOCK"
  "ISPEXEC DISPLAY"
end
return

STCMON PANEL

)ATTR
  } TYPE(TEXT) COLOR(WHITE) HILITE(REVERSE) INTENS(HIGH)
  { TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE) INTENS(HIGH)
  | TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) INTENS(HIGH)
  \ TYPE(OUTPUT) COLOR(GREEN) HILITE(REVERSE) INTENS(HIGH)
  ! AREA(DYNAMIC) SCROLL(OFF) EXTEND(OFF)
  ^ AREA(DYNAMIC) SCROLL(OFF) EXTEND(OFF)
  @ AREA(DYNAMIC) SCROLL(OFF) EXTEND(OFF)
  51 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN) HILITE(REVERSE)
  52 TYPE(DATAOUT) INTENS(LOW) COLOR(RED) HILITE(REVERSE)
  53 TYPE(DATAOUT) INTENS(LOW) COLOR(BLUE)
  54 TYPE(DATAOUT) INTENS(HIGH) COLOR(BLUE) HILITE(REVERSE)
  55 TYPE(DATAOUT) INTENS(HIGH) COLOR(WHITE) HILITE(REVERSE)
)BODY
} STCMON TASK DISPLAY      |SYSTEM==>!NSYS!|REQUEST==>!NREQ!\DATIM            +
{ SYSTEM TASKS                                                 ON REQUEST     +
{ @STC001 @@STC021 @@STC041 @@STC061 @@STC081 @@STC101 @{ @REQ001 @@REQ021 @{ +
{ @STC002 @@STC022 @@STC042 @@STC062 @@STC082 @@STC102 @{ @REQ002 @@REQ022 @{ +
{ @STC003 @@STC023 @@STC043 @@STC063 @@STC083 @@STC103 @{ @REQ003 @@REQ023 @{ +
{ @STC004 @@STC024 @@STC044 @@STC064 @@STC084 @@STC104 @{ @REQ004 @@REQ024 @{ +
{ @STC005 @@STC025 @@STC045 @@STC065 @@STC085 @@STC105 @{ @REQ005 @@REQ025 @{ +
{ @STC006 @@STC026 @@STC046 @@STC066 @@STC086 @@STC106 @{ @REQ006 @@REQ026 @{ +
{ @STC007 @@STC027 @@STC047 @@STC067 @@STC087 @@STC107 @{ @REQ007 @@REQ027 @{ +
{ @STC008 @@STC028 @@STC048 @@STC068 @@STC088 @@STC108 @{ @REQ008 @@REQ028 @{ +
{ @STC009 @@STC029 @@STC049 @@STC069 @@STC089 @@STC109 @{ @REQ009 @@REQ029 @{ +
{ @STC010 @@STC030 @@STC050 @@STC070 @@STC090 @@STC110 @{ @REQ010 @@REQ030 @{ +
{ @STC011 @@STC031 @@STC051 @@STC071 @@STC091 @@STC111 @{ @REQ011 @@REQ031 @{ +
{ @STC012 @@STC032 @@STC052 @@STC072 @@STC092 @@STC112 @{ @REQ012 @@REQ032 @{ +
{ @STC013 @@STC033 @@STC053 @@STC073 @@STC093 @@STC113 @{ @REQ013 @@REQ033 @{ +
{ @STC014 @@STC034 @@STC054 @@STC074 @@STC094 @@STC114 @{ @REQ014 @@REQ034 @{ +
{ @STC015 @@STC035 @@STC055 @@STC075 @@STC095 @@STC115 @{ @REQ015 @@REQ035 @{ +
{ @STC016 @@STC036 @@STC056 @@STC076 @@STC096 @@STC116 @{ @REQ016 @@REQ036 @{ +
{ @STC017 @@STC037 @@STC057 @@STC077 @@STC097 @@STC117 @{ @REQ017 @@REQ037 @{ +
{ @STC018 @@STC038 @@STC058 @@STC078 @@STC098 @@STC118 @{ @REQ018 @@REQ038 @{ +
{ @STC019 @@STC039 @@STC059 @@STC079 @@STC099 @@STC119 @{ @REQ019 @@REQ039 @{ +
{ @STC020 @@STC040 @@STC060 @@STC080 @@STC100 @@STC120 @{ @REQ020 @@REQ040 @{ +
^INFO                                                                        ^+
)INIT
)REINIT
REFRESH(*)
)PROC
)END

STCMON1 PANEL

)ATTR DEFAULT(%+_)
   % TYPE(TEXT  ) INTENS(HIGH)
   + TYPE(TEXT  ) INTENS(LOW ) SKIP(ON)
   _ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD(NULLS)
)BODY  EXPAND(##) WINDOW(56,4)
+
+   ENTER DELAY TIME IN SECONDS_Z  +
+   (RANGE 15-300, DEFAULT 60)
+
)INIT
.ZVARS = '(SDELAY)'
.CURSOR = SDELAY
IF (&ERR = '')
  &SDELAY = ''
)PROC
 VER (&SDELAY,RANGE,15,300)
 IF (&SDELAY = '')
   &SDELAY = 60
)HELP
)END


Systems Programmer (UK)                                                         c Xephon 1995

