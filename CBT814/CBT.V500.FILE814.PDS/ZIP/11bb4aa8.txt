A JES2 information dialog


JES2SCAN SOURCE CODE

JES2SCAN TITLE 'RETURNS JES2 INSTALLATION INFORMATION'
JES2SCAN CSECT
***********************************************************************
*        MODULE NAME.   JES2SCAN.                                     *
*        REMARKS.       THIS MODULE WILL EXTRACT THE FOLLOWING JES2   *
*                       INFORMATION.                                  *
*                       1.   JES2 COLD START INFORMATION.             *
*                       2.   JES2 START-UP INFORMATION.               *
*                       3.   JES2 USER EXIT INFORMATION.              *
*                       RETURN CODES.                                 *
*                       0  =  OKAY                                    *
*                       4  =  OPTION INVALID                          *
*                       8  =  SSI CALL ERROR                          *
*                       12 =  JES2 NOT ACTIVE                         *
*                       16 =  IKJCT441 ERROR                          *
***********************************************************************
         COPY $HASPGBL
&ANVIRON SETC  'JES2'
SPACE    EQU   C' '                    SPACE
JES2SCAN AMODE 31
JES2SCAN RMODE 24
         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS
*                                      IN THE LINKAGE STACK
         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER
GETWORK  EQU   *
         USING JES2SCAN,R12            INFORM THE ASSEMBLER
         L     R3,0(,R1)               @ OF PARM
         USING OPTIONS,R3              INFORM THE ASSEMBLER
         STORAGE OBTAIN,LENGTH=WORKALEN,ADDR=(R10),SP=0,KEY=8,         X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LAE   R13,0(R10,0)            @ THE WORKAREA
         USING WORKAREA,R13            INFORM THE ASSEMBLER
         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA
*                                      TO INDICATE STATUS SAVED ON
*                                      THE LINKAGE STACK.
         BAL   R2,CHKOPT               CHECK THE OPTIONS
         LTR   R10,R10                 VALID OPTION?
         BNZ   FREESA                  NO-
         BAL   R2,VERJES2              VERIFY JES2 EXISTS
COLDCHK  EQU   *
         CLC   OPT,=C'01'              JES2 COLD START INFO?
         BNE   STARTUP                 NO-
         BAL   R2,COLDFMT              JES2 COLD START INFO
         B     RETURN                  RETURN TO CALLER
STARTUP  EQU   *
         CLC   OPT,=C'02'              START-UP INFO?
         BNE   JESEXITS                NO-
         BAL   R2,STRTFMT              JES2 START-UP INFORMATION
         B     RETURN                  RETURN TO CALLER
JESEXITS EQU   *
         CLC   OPT,=C'03'              JES2 EXITS?
         BNE   RETURN                  NO-
         BAL   R2,JESEXTIN             JES2 EXIT INFORMATION
         B     RETURN                  RETURN TO CALLER
RETURN   EQU   *
         ICM   R8,B'1111',SSVI@        SSVI PRESENT?
         BZ    FREESA                  NO-
         SR    R9,R9                   ZEROIZE
         ICM   R9,B'1111',SSVILENG     LENGTH OF STORAGE TO FREE
         STORAGE RELEASE,ADDR=(R8),LENGTH=(R9),SP=0,KEY=8,             X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
FREESA   EQU   *
         LAE   R1,0(R13,0)             ADDRESS TO FREE
         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKALEN,SP=0,KEY=8,         X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         LR    R15,R10                 SET RC
         PR                            RESTORE CALLER'S ARS
*                                      GPRS 2-14 AND RETURN
*                                      TO CALLER
CHKOPT   EQU   *                       CHECK THE OPTIONS
         XR    R10,R10                 SET THE RETURN CODE
         CLC   OPTLEN,=XL2'0000'       NO PARM?
         BE    OPTERR                  YES-
         CLC   OPTLEN,=XL2'0002'       > 2?
         BH    OPTERR                  YES-
         LA    R5,OPTTAB               OPTION TABLE @
         USING TABOPS,R5               INFORM THE ASSEMBLER
         LA    R6,OPTTABNE             NO OF TABLE ENTRIES
OPTCHK   EQU   *
         CLC   OPT,TABOPT              OPTION FOUND?
         BER   R2                      YES-
         LA    R5,L'OPTTAB(,R5)        NEXT ENTRY
         BCT   R6,OPTCHK               DO WHILE R6 > 0?
OPTERR   EQU   *
         LA    R10,4(0,0)              RETURN CODE
         BR    R2                      RETURN TO THE CALLER
         DROP  R5                      INFORM THE ASSEMBLER
VERJES2  EQU   *                       VERIFY THE EXISTENCE OF JES2
         STCM  R2,B'1111',RETURN@      STORE THE RETURN @
         LA    R5,SSOBCB               SSOB @
         USING SSOB,R5                 SSOB @
         XC    SSOB,SSOB               INIT
         MVC   SSOBID,=CL4'SSOB'       SSOB IDENTIFIER
         MVC   SSOBLEN,=AL2(SSOBHSIZ)  SSOB LENGTH
         MVC   SSOBFUNC,=Y(SSOBVERS)   VERIFY SUBSYSTEM FUNCTION CALL
         LA    R6,SSIBCB               @ OF THE SSIB
         STCM  R6,B'1111',SSOBSSIB     STORE IN THE PARAMETER LIST
         LA    R8,SSVSCB               SSVS EXT @
         STCM  R8,B'1111',SSOBINDV     STORE FOR SSI
         USING SSIB,R6                 SSOB @
         XC    SSIB,SSIB               INIT
         MVC   SSIBID,=CL4'SSIB'       SSIB IDENTIFIER
         MVC   SSIBLEN,=AL2(SSIBSIZE)  SSIB LENGTH
         MVI   SSIBSSID,C' '           SSID
         MVC   SSIBSSNM,=CL4'MSTR'     MASTER SUBSYSTEM NAME
         MVC   SSIBJBID,=CL8'JES2'     SUBSYSTEM TO BE VALIDATED
         MVC   SSIBDEST,=CL8' '        DESTINATION
         LA    R7,SSVSCB               VERIFY SUBSYTEM EXTENSION
         USING SSOBEXT,R7              INFORM THE ASSEMBLER
         MVC   SSVSLEN,=AL2(SSVSSIZE)  LENGTH OF SSOB EXTENSION
         STCM  R5,B'1111',PARM         @ OF SSOB IN PARAMETER LIST
         LA    R1,PARM                 PARM @
         OI    PARM,X'80'              EOL
         IEFSSREQ                      SSI CALL
         XR    R10,R10                 SET THE RETURN CODE
         LTR   R15,R15                 REQUEST ACCEPTED?
         BZ    TESTSSOB                YES-
         LA    R10,8(0,0)              RETURN CODE
         B     SSIRET                  SSIRET
TESTSSOB EQU   *
         CLC   SSOBRETN,=F'0'          VALID SUBSYSTEM?
         BE    SUBSYSVN                YES-
         LA    R10,8(0,0)              RETURN CODE
         B     SSIRET                  SSIRET
SUBSYSVN EQU   *
         LA    R9,SSVIMSIZ(0,0)        MINIMUM SIZE REQUIRED
SUBSTOR  EQU   *
         STORAGE OBTAIN,LENGTH=(R9),ADDR=(R10),SP=0,KEY=8,             X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         STCM  R10,B'1111',SSVI@       STORE FOR FUTURE REF
         USING SSVI,R10                INFORM THE ASSEMBLER
         MVC   SSOBFUNC,=Y(SSOBSSVI)   REQUEST SUBSYSTEM VERSION CALL
         MVC   SSIBSSNM,=CL4'JES2'     SUBSYSTEM TO GET INFO
         MVC   SSIBJBID,=CL8' '        CLEAR
         LR    R0,R10                  CLEAR
         LR    R1,R9                   THE
         LA    R14,LOWBYTE             SSVI
         XR    R15,R15                 CONTROL BLOCK
         MVCL  R0,R14                  DO IT
         STCM  R9,B'0011',SSVILEN      SIZE OF THE SSVI
         MVI   SSVIVER,SSVICVER        CURRENT VERSION NUMBER
         MVC   SSVIID,=A(SSVICID)      IDENTIFIER
         STCM  R10,B'1111',SSOBINDV    SSVI @ FOR SSI
         STCM  R5,B'1111',PARM         @ OF SSOB IN PARAMETER LIST
         LA    R1,PARM                 PARM @
         OI    PARM,X'80'              EOL
         IEFSSREQ                      SSI CALL
         LTR   R15,R15                 REQUEST ACCEPTED?
         BZ    CHKSTOR                 YES-
         LA    R10,8(0,0)              RETURN CODE
         B     SSIRET                  SSIRET
CHKSTOR  EQU   *
         CLC   SSOBRETN,=F'0'          ALL OKAY?
         BE    GETHCT                  GET THE JES2 HCT
         CLC   SSOBRETN,=A(SSVINSTR)   STORAGE AREA LARGE ENOUGH?
         BE    UPTHESTR                NO-
         LA    R10,8(0,0)              RETURN CODE
         B     SSIRET                  SSIRET
UPTHESTR EQU   *
         LH    R8,SSVIRLEN             STORAGE REQUIRED
         STCM  R8,B'1111',SSVILENG     STORE THE LENGTH
         STORAGE RELEASE,ADDR=(R10),LENGTH=(R9),SP=0,KEY=8,            X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         LR    R9,R8                   NEW STORAGE REQUIRED
         B     SUBSTOR                 LET'S DO IT AGAIN
GETHCT   EQU   *
         MVC   JESVERS,SSVIVERS        JES2 PRODUCT VERSION
         MVC   JESFMID,SSVIFMID        JES2 FMID
         DROP  R5                      INFORM THE ASSEMBLER
         DROP  R6                      INFORM THE ASSEMBLER
* R7  = SSVS
* R10 = SSVI
         BAL   R2,CROSSMEM             LET'S GET INTO CROSS MEMORY MODE
         LTR   R10,R10                 ALL OK?
         BNZ   SSIRET                  NO-
         LA    R6,$HCTLEN(0,0)         HCT LENGTH
         SR    R9,R9                   ACCESS WITH KEY=0
         LA    R8,JES2HCT              MOVE TO FIELD
         LA    R14,256(0,0)            MAX LENGTH
MOVEPRIM EQU   *
         MVCP  0(R6,R8),0(R5),R9       MOVE THE JES2 HCT FROM THE JES2
*                                      ADDRESS SPACE TO OUR PRIMARY
*                                      ADDRESS SPACE
         BC    8,SETSASN               TRUE LENGTH <|= 256?
         AR    R8,R14                  NEXT 256 BYTES
         AR    R5,R14                  NEXT 256 BYTES
         SR    R6,R14                  DECREASE THE LENGTH
         B     MOVEPRIM                KEEP MOVING TO PRIMARY
SETSASN  EQU   *
         SR    R6,R6                   ZEROIZE
         ICM   R6,B'0011',SASN         OUR PREVIOUS SECONDARY SPACE
         SSAR  R6                      RESET OUR SECONDARY SPACE
         SR    R6,R6                   ZEROIZE
         AXSET AX=(R6)                 SET AX=0
         LTR   R15,R15                 AX SET?
         BNZ   AXSETERR                YES-
         XR    R10,R10                 SET THE RETURN CODE
SSISMODE EQU   *
         MODESET KEY=NZERO,MODE=PROB   GET INTO PROBLEM MODE
SSIRET   EQU   *
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO CALLER
COLDFMT  EQU   *                       JES2 COLD START INFORMATION
         STCM  R2,B'1111',RETURN@      STORE THE RETURN @
         LA    R6,JES2HCT              @ JES2 HCT
         USING HCT,R6                  INFORM THE ASSEMBLER
         LA    R9,JESTABS              @ JES2 HCT
         USING JES2COLD,R9             INFORM THE ASSEMBLER
         MVC   JESGFMID,JESFMID        JES2 FMID
         MVC   JESGVSN,JESVERS         JES2 VERSION
         MVC   JESGSCPE,=CL8'SYSTEM'   JES2 SYSTEM SCOPE
         TM    $PRFXFLG,$SCOPSYS       SCOPE= SYSTEM?
         BO    CHKNOSPL                YES-
         MVC   JESGSCPE,=CL8'SYSPLEX'  SYSPLEX SYSTEM
CHKNOSPL EQU   *
         MVC   JESGINTS,$MAXPART       JES2 MAX INITIATORS
         MVC   JESGJOBS,$MAXJOBS       JES2 MAX JOBS
         MVC   JESGJOES,$NUMJOES       JES2 MAX JOES
         MVC   JESGCMID,$CCOMCHR       JES2 COMMAND IDENTIFIER
         MVC   JESGRMID,$RCOMCHR       JES2 REMOTE COMMAND IDENTIFIER
         MVC   JESGNAME,$NDENAME       JES2 NODE NAME
         MVC   JESGSPLP,$SPOOL         JES2 SPOOL PREFIX
         MVC   JESGDUPX,=C'YES'        CHKPT DUPLEX = Y
         TM    $CKPTFG1,$CKPTDPY       DUPLEX MODE?
         BO    COLDINFO                YES-
         MVC   JESGDUPX,=C'NO'         CHKPT DUPLEX = N
COLDINFO EQU   *
         MVC   JESCJSN,$COLDJSN        NAME OF JES
         MVC   JESCVSN,$COLDVSN        VERSION OF JES
         MVC   JESCJSP,$COLDJSP
         MVC   JESCSID,$COLDSID        COLD SMFID
         UNPK  JESCDATE,$COLDDTM+5(3)  JES COLDSTART DATE IN JULIAN
         OI    JESCDATE+L'JESCDATE-1,X'F0' MAKE IT PRINTABLE
         XR    R14,R14                 CLEAR
         XR    R15,R15                 CLEAR
         ICM   R15,B'1111',$COLDDTM    COLD START TIME
         SLDL  R14,4(0)                ROOM FOR A PACKED SIGN
         O     R15,=X'0000000F'        A POSITIVE SIGN
         XC    WORKTIME,WORKTIME       CLEAR THE WORKAREA
         STC   R14,HIGHTIME            HIGH-ORDER BYTE
         STCM  R15,B'1111',RESTTIME    REST OF TIME
         UNPK  JESCTIME,WORKTIME       CONVERT TO CHARACTER
         OI    JESCTIME+L'JESCTIME-1,X'F0' MAKE IT PRINTABLE
         LA    R14,JESCVAR             @ OF VARIABLE NAME TO CREATE
         STCM  R14,B'1111',VARNPTR     STORE FOR IKJCT441
         LA    R14,L'JESCVAR(0,0)      LENGTH OF VARIABLE NAME
         STCM  R14,B'1111',VARVNLEN    STORE FOR IKJCT441
         LA    R14,JESTABS             @ OF VARIABLE
         STCM  R14,B'1111',VARVAL@     STORE FOR IKJCT441
         ICM   R14,B'1111',=AL4(JESCLEN)  LENGTH OF GENERATED TABLE
         STCM  R14,B'1111',VARVALLN    STORE AWAY
         BAL   R2,REXXVAR              BUILD THE REXX VARIABLE
COLDOUT  EQU   *
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO CALLER
STRTFMT  EQU   *                       JES2 START-UP INFORMATION
         STCM  R2,B'1111',RETURN@      STORE THE RETURN @
         LA    R6,JES2HCT              @ JES2 HCT
         USING HCT,R6                  INFORM THE ASSEMBLER
         LA    R9,JESTABS              @ OUTPUT AREA
         USING JES2STRT,R9             INFORM THE ASSEMBLER
         MVI   JESSFMT,C'Y'            DEFAULT
         TM    $OPTSTAT,$OPTFMT        FORMAT?
         BO    TESTCOLD                YES-
         MVI   JESSFMT,C'N'            NO
TESTCOLD EQU   *
         MVI   JESSCOLD,C'Y'           DEFAULT
         TM    $OPTSTAT,$OPTCOLD       COLD?
         BO    TESTREQ                 YES-
         MVI   JESSCOLD,C'N'           DEFAULT
TESTREQ  EQU   *
         MVI   JESSREQ,C'Y'            DEFAULT
         TM    $OPTSTAT,$OPTREQ        REQ?
         BO    TESTLIST                YES-
         MVI   JESSREQ,C'N'            NO
TESTLIST EQU   *
         MVI   JESSLIST,C'Y'           DEFAULT
         TM    $OPTSTAT,$OPTLIST       LIST?
         BO    TESTLOG                 YES-
         MVI   JESSLIST,C'N'           NO
TESTLOG  EQU   *
         MVI   JESSLOG,C'Y'            DEFAULT
         TM    $OPTSTAT,$OPTLOG        LOG?
         BO    TESTRECF                YES-
         MVI   JESSLOG,C'N'            NO
TESTRECF EQU   *
         MVI   JESSRECF,C'Y'           DEFAULT
         TM    $OPTSTAT,$OPTRECF       RECONFIGURATION?
         BO    TESTCONS                YES-
         MVI   JESSRECF,C'N'           NO
TESTCONS EQU   *
         MVI   JESSCONS,C'Y'           DEFAULT
         TM    $OPTSTAT,$OPTCONS       CONSOLE?
         BO    TESTQICK                YES-
         MVI   JESSCONS,C'N'           NO
TESTQICK EQU   *
         MVI   JESSQICK,C'N'           DEFAULT
         TM    $OPTSTAT,$OPTQWIK       QUICK START?
         BNO   SREXXVAR                NO-
         TM    $OPTSTAT,$OPTFMT+$OPTCOLD FMT/COLD MUST BE OFF?
         BZ    YESQUICK                YES-
         B     SREXXVAR                NO-
YESQUICK EQU   *
         MVI   JESSQICK,C'Y'           QUICK START
SREXXVAR EQU   *
         LA    R14,JESSVAR             @ OF VARIABLE NAME TO CREATE
         STCM  R14,B'1111',VARNPTR     STORE FOR IKJCT441
         LA    R14,L'JESSVAR(0,0)      LENGTH OF VARIABLE NAME
         STCM  R14,B'1111',VARVNLEN    STORE FOR IKJCT441
         LA    R14,JESTABS             @ OF VARIABLE
         STCM  R14,B'1111',VARVAL@     STORE FOR IKJCT441
         ICM   R14,B'1111',=AL4(JESSLEN)  LENGTH OF GENERATED TABLE
         STCM  R14,B'1111',VARVALLN    STORE AWAY
         BAL   R2,REXXVAR              BUILD THE REXX VARIABLE
STARTOUT EQU   *
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO CALLER
JESEXTIN EQU   *                       JES2-DEFINED EXIT POINTS
         STCM  R2,B'1111',RETURN@      STORE THE RETURN @
         LA    R6,JES2HCT              @ JES2 HCT
         USING HCT,R6                  INFORM THE ASSEMBLER
         L     R4,$XITADDR             XIT ADDRESS
         USING XIT,R4                  INFORM THE ASSEMBLER
         LA    R5,XIT#PTS(0,0)         MAX NO OF JES2 EXIT POINTS
         LA    R9,JESTABS+L'JEXTENTS   @ OUTPUT AREA
         USING JEXTPNT,R9              INFORM THE ASSEMBLER
         XR    R10,R10                 JES2 EXIT NUMBER
         XR    R14,R14                 NO OF DEFINED EXITS
BLDEXTAB EQU   *
         ICM   R15,B'1111',XITXRTAD    XRT ADDRESS PRESENT?
         BZ    NEXTEXIT                NO-
         USING XRT,R15                 INFORM THE ASSEMBLER
         STH   R10,JEXTPNT             EXIT POINT NUMBER
         MVC   JEXTNAME,XRTRNAME       JES2 EXIT NAME
         MVC   JEXTADDR,XRTRADDR       JES2 EXIT ADDRESS
         MVC   JEXTRTNS,XIT#RTNS       NO OF EXIT ROUTINES
         MVC   JEXTENV,XITENVIR        EXIT ENVIRONMENT
         MVI   JEXTENA,C'Y'            ENABLED
         TM    XITFLAGS,XITENBLD       EXIT IS ENABLED?
         BO    EXITTRAC                YES-
         MVI   JEXTENA,C'N'            EXIT ENABLED NOT ENABLED
EXITTRAC EQU   *
         MVI   JEXTRACE,C'Y'           TRACE
         TM    XITFLAGS,XITTRACE       EXIT IS TRACING?
         BO    NXTEXTTB                YES-
         MVI   JEXTRACE,C'N'           EXIT IS NOT TRACING
NXTEXTTB EQU   *
         LA    R9,JEXTLEN(,R9)         NEXT TABLE ENTRY
         LA    R14,1(,R14)             NO OF DEFINED EXITS
NEXTEXIT EQU   *
         LA    R10,1(,R10)             NEXT EXIT POINT NUMBER
         LA    R4,XITLNGTH(,R4)        NEXT EXIT TABLE ENTRY
         BCT   R5,BLDEXTAB             DO WHILE R5 > 0?
         LA    R9,JESTABS              @ OUTPUT AREA
         USING JEXTPNT,R9              INFORM THE ASSEMBLER
         STH   R14,JEXTENTS            NO OF TABLE ENTRIES
         LR    R15,R14                 SWITCH
         LA    R14,JESEVAR             @ OF VARIABLE NAME TO CREATE
         STCM  R14,B'1111',VARNPTR     STORE FOR IKJCT441
         LA    R14,L'JESEVAR(0,0)      LENGTH OF VARIABLE NAME
         STCM  R14,B'1111',VARVNLEN    STORE FOR IKJCT441
         LA    R14,JESTABS             @ OF VARIABLE
         STCM  R14,B'1111',VARVAL@     STORE FOR IKJCT441
         M     R14,=AL4(JEXTLEN)       LENGTH OF GENERATED TABLE
         LA    R15,L'JEXTENTS(,R15)    + HEADER LENGTH
         STCM  R15,B'1111',VARVALLN    STORE AWAY
         BAL   R2,REXXVAR              BUILD THE REXX VARIABLE
EXITRET  EQU   *
         ICM   R2,B'1111',RETURN@      RETURN @
         BR    R2                      RETURN TO CALLER
         DROP  R15                     INFORM THE ASSEMBLER
CROSSMEM EQU   *                       GET INTO CROSS MEMORY MODE
         XR    R10,R10                 SET THE RETURN CODE
         ICM   R5,B'1111',SSVSSCTP     JES2 SSCVT @
         USING SSCT,R5                 INFORM THE ASSEMBLER
         ICM   R5,B'1111',SSCTSUS2     JES2 HCCT @
         BZ    NOJES2                  NO JES2 AVAILABLE
         USING HCCT,R5                 INFORM THE ASSEMBLER
         LOCASCB STOKEN=CCTJSTKN       JES2 STOKEN
         LTR   R15,R15                 ASCB @ RETURNED?
         BNZ   NOJES2                  NO- WHERE IS JES2?
         LR    R9,R1                   SWITCH
         USING ASCB,R9                 INFORM THE ASSEMBLER
         ICM   R5,B'1111',CCTHCT       JES2 HCT @ IN JES2 ADDRESS SPACE
         BZ    NOJES2                  NO JES2 AVAILABLE
         DROP  R5                      INFORM THE ASSEMBLER
         MODESET KEY=ZERO,MODE=SUP     GET INTO SUPERVISOR MODE
         SR    R6,R6                   ZEROIZE
         LA    R6,1(,R6)               AX=1
         AXSET AX=(R6)                 SET AX=1
         LTR   R15,R15                 AX SET?
         BNZ   AXSETERR                YES-
         ESAR  R6                      EXTRACT OUT CURRENT SASID
         STCM  R6,B'0011',SASN         STORE FOR FUTURE SSAR
         SR    R6,R6                   ZEROIZE
         ICM   R6,B'0011',ASCBASID     JES2 ASID
         SSAR  R6                      SET SECONDARY TO JES2 SPACE
         B     XMEMRET                 SSIRET
NOJES2   EQU   *
         LA    R10,12(0,0)             NO JES2 RETURN CODE
         B     XMEMRET                 SSIRET
XMEMRET  EQU   *
         BR    R2                      RETURN TO CALLER
REXXVAR  EQU   *                       DEFINE REXX VARIABLE
         XR    R10,R10                 ZEROIZE
         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL
         XC    RCODE441,RCODE441       RETURN CODE
         L     R15,CVTPTR              CVT @
         USING CVT,R15                 INFORM THE ASSEMBLER
         L     R15,CVTTVT              TSCT @
         USING TSVT,R15                INFORM THE ASSEMBLER
         L     R15,TSVTVACC            IKJCT441 @
         LTR   R15,R15                 ENTRY POINT FOUND?
         BNZ   CALL441                 YES- DO A CALL
LINK441  EQU   *
         MVC   LINKAREA,LINKL          LINK SL=L
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         LINK  EP=IKJCT441,                                            X
               PARAM=(ECODE,           ENTRY CODE                      X
               VARNPTR,                POINTER TO VARIABLE NAME        X
               VARVNLEN,               LENGTH  OF VARIABLE NAME        X
               VARVAL@,                POINTER TO VARIABLE VALUE       X
               VARVALLN,               LENGTH  OF VARIABLE             X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL=1,                   EOL                             X
               MF=(E,CALLAREA),        CALL AREA                       X
               SF=(E,LINKAREA)         LINK AREA
         B     CHKRET                  CHECK THE RETURN CODE
CALL441  EQU   *
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         CALL  (15),                                                   X
               (ECODE,                 ENTRY CODE                      X
               VARNPTR,                POINTER TO VARIABLE NAME        X
               VARVNLEN,               LENGTH  OF VARIABLE NAME        X
               VARVAL@,                POINTER TO VARIABLE VALUE       X
               VARVALLN,               LENGTH  OF VARIABLE             X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL,                     EOL                             X
               MF=(E,CALLAREA)
         B     CHKRET                  CHECK THE RETURN CODE
CHKRET   EQU   *
         LTR   R15,R15                 DID WE BUILD THE VARIABLE?
         BZR   R2                      YES-
         LA    R10,16(0,0)             SET RC INDICATOR
         BR    R2                      RETURN TO CALLER
AXSETERR EQU   *
         ABEND 001,DUMP
         LTORG
LOWBYTE  DC    X'00'                   LOW BYTE
JESCVAR  DC    CL7'JESCVAR'            @ OF VARIABLE NAME TO CREATE
JESSVAR  DC    CL7'JESSVAR'            @ OF VARIABLE NAME TO CREATE
JESEVAR  DC    CL7'JESEVAR'            @ OF VARIABLE NAME TO CREATE
ECTPARM  DC    X'FFFFFFFF'             ECT
ECODE    DC    AL4(TSVEUPDT)           CREATE CODE
LINKL    LINK SF=L
LINKLEN  EQU   *-LINKL                 LENGTH
CALLL    CALL  ,(,,,,,,,),MF=L
CALLLEN  EQU  *-CALLL                  LENGTH
OPTTAB   DS    0XL2                    OPTION TABLE
         DC    C'01',C'02',C'03'
OPTTABLN EQU   *-OPTTAB                TABLE LENGTH
OPTTABNE EQU   OPTTABLN/L'OPTTAB       NO OF TABLE ENTRIES
WORKAREA DSECT
SAVEAREA DS    CL72                    SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA
JESVERS  DS    CL8                     JES2 PRODUCT VERSION
JESFMID  DS    CL7                     JES2 FMID
SASN     DS    XL2                     STORED SECONDARY SPACE
WORKTIME DS    CL5                     COLD START TIME WORK AREA
HIGHTIME EQU   WORKTIME,1              HIGH BYTE OF TIME
RESTTIME EQU   WORKTIME+1,4            REST OF TIME
HFAM@    DS    F                       HFAM@ IN OUR ADDRESS SPACE
RETURN@  DS    F                       RETURN @
SSVI@    DS    F                       SSVI @
SSVILENG DS    F                       SSVI LENGTH
*  IJKCT441 PARAMETERS                 UNIT NAME
IKJTOKEN DS    F                       TOKEN
RCODE441 DS    F                       RETURN CODE
VARNPTR  DS    F                       VARIABLE NAME PTR
VARVNLEN DS    F                       VARIABLE NAME LENGTH
VARVAL@  DS    F                       VARIABLE @
VARVALLN DS    F                       LENGTH OF VARIABLE
LINKAREA DS    CL(LINKLEN)             LINK AREA
CALLAREA DS    CL(CALLLEN)             PARM LIST AREA
         DS    0F
PARM     DS    A                       SSOB @
         DS    0F
SSIBCB   DS    CL(SSIBSIZE)            SSIB
         DS    0F
SSOBCB   DS    CL(SSOBHSIZ)            SSOB
         DS    0F
SSVSCB   DS    CL(SSVSSIZE)            SSVS
         DS    0F
JES2HCT  DS    CL($HCTLEN)             JES2 HCT
         DS    0F
JESTABS  DS    CL(JEXTNENT)            REXX OUTPUT AREA
WORKALEN EQU   *-WORKAREA              WORK AREA LENGTH
OPTIONS  DSECT
OPTLEN   DS    XL2                     LENGTH
OPT      DS    CL2                     OPTION
TABOPS   DSECT
TABOPT   DS    CL2                     TABLE OPTION
JES2COLD DSECT
JESCJSN  DS    CL5                     NAME OF JES
JESCVSN  DS    CL8                     VERSION OF JES
JESCJSP  DS    CL11
JESCSID  DS    CL4                     COLD SMFID
JESCTIME DS    CL9                     JES COLDSTART TIME
JESCDATE DS    CL5                     JES COLDSTART DATE
JESGVSN  DS    CL8                     JES2 VERSION
JESGFMID DS    CL7                     JES2 FMID
JESGINTS DS    AL2                     JES2 MAX INITIATORS
JESGJOBS DS    AL2                     JES2 MAX JOBS
JESGJOES DS    AL4                     JES2 MAX JOES
JESGCMID DS    C                       JES2 COMMAND IDENTIFIER
JESGRMID DS    C                       JES2 REMOTE COMMAND IDENTIFIER
JESGNAME DS    CL8                     JES2 NODE ID
JESGSCPE DS    CL8                     JES2 SYSTEM SCOPE
JESGSPLP DS    CL5                     JES2 SPOOL PREFIX
JESGDUPX DS    CL3                     JES2 CKPT DUPLEX OPTION
JESCLEN  EQU   *-JES2COLD              LENGTH
JES2STRT DSECT
JESSFMT  DS    C                       FORMAT
JESSCOLD DS    C                       COLD
JESSREQ  DS    C                       REQ
JESSLIST DS    C                       LIST
JESSLOG  DS    C                       LOG
JESSRECF DS    C                       RE-CONFIG
JESSCONS DS    C                       CONSOLES
JESSQICK DS    C                       QUICK START
JESSLEN  EQU   *-JES2STRT              LENGTH
JES2EXIT DSECT
JEXTENTS DS    AL2                     NO OF ENTRIES
         ORG   JEXTENTS
JEXTPNT  DS    AL2                     EXIT POINT
JEXTNAME DS    CL8                     EXIT NAME
JEXTADDR DS    XL4                     EXIT ADDRESS
JEXTRTNS DS    AL1                     NUMBER OF EXIT ROUTINES
JEXTENA  DS    C                       EXIT ENABLED
JEXTRACE DS    C                       EXIT TRACE
JEXTENV  DS    C                       EXIT ENVIRONMENT
JEXTLEN  EQU   *-JEXTPNT               LENGTH
JEXTNENT EQU   (JEXTLEN*XIT#PTS)       EXIT TABLE LENGTH
         CVT   DSECT=YES,LIST=NO
         IHAASCB
         IKJTSVT
         IEFJSCVT
         IEFJSSOB (VS),CONTIG=NO
         IEFJSSIB
         IEFSSVI DSECT=YES
         IEFJESCT
         $MIT
         $HASPEQU
         $HCT
         $HCCT
         $SCAT
         $XECB
         $PCE
         $PSV
         $XIT
         $XRT
         $HFAM
         $HFAME
         END   JES2SCAN


JES2INFO REXX EXEC

/**rexx**/
/*  PROGRAM-ID           JES2INFO                                  */
/*  Remarks              This REXX EXEC will display jes2 info.    */
/*trace i*/
save_prompt = prompt("off")
option= '  '                                /* option field       */
address "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('XXXXXX.PANELS')"
main_processing_loop:
do forever
   call display_the_main_panel              /* display main panel */
   select
      when (jescold = '/') then do          /* display jes2 cold? */
           option= '01'                     /* obtain jes2 cold   */
           call display_jes2_cold_info      /* yes-               */
      end
      when (jesstart = '/') then do         /* display jes2 start?*/
           option= '02'                     /* obtain jes2 cold   */
           call display_jes2_start_info     /* yes-               */
      end
      when (jesexits = '/') then do         /* display jes2 exits?*/
           option= '03'                     /* obtain jes2 exits  */
           call display_jes2_exits          /* yes-               */
      end
      otherwise
           call display_error_panel_one     /*   error panel      */
   end
   ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up      */
end
Lets_Lock_The_Terminal:
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* lock the terminal      */
if (rc > 8) then do                      /* error?                 */
   say 'Lock error    rc = 'rc''         /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)" /* pop-up position     */
info= 'Your Request Is being Processed Please Wait'
ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan02)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
return
display_error_panel_one:
jerr1= '----------------------------'    /* error message          */
jerr2= '|  Please Select An Option |'    /* error message          */
jerr3= '----------------------------'    /* error message          */
ADDRESS "ISPEXEC" "ADDPOP ROW(2) COLUMN(1)"  /* pop up position    */
ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan03)" /* display error panel */
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up      */
return
display_jes2_cold_info:
call Lets_Lock_The_Terminal              /* lock the terminal      */
address TSO "CALL 'sys1.linklib.utility(JES2SCAN)' '"option"'"
if (rc = 0) then do                     /* error?                 */
   jesrc= rc                             /* save the return code   */
   say 'JES2SCAN Error    rc = 'rc''     /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(jesrc)                           /* and quit               */
end
jescnme=  substr(jescvar,1,5)            /* jes cold name          */
jescvsn=  substr(jescvar,6,8)            /* jes cold version name  */
jescsmfi= substr(jescvar,25,4)           /* jes cold smf sid       */
                                         /* jes cold start time    */
jesctime= substr(jescvar,30,2)||':'||substr(jescvar,32,2)||':'
jesctime= jesctime||substr(jescvar,34,2)||':'||substr(jescvar,36,2)
jescdate= substr(jescvar,38,5)           /* jes cold start date    */
jesvern= substr(jescvar,43,8)            /* jes2 version           */
jesfmid= substr(jescvar,51,7)            /* jes2 fmid              */
jesbint= x2d(c2x(substr(jescvar,58,2)))  /* no of batch inits      */
jesmjbs= x2d(c2x(substr(jescvar,60,2)))  /* max no of jobs         */
jesnjoe= x2d(c2x(substr(jescvar,62,4)))  /* no of joes             */
jescmdi= substr(jescvar,66,1)            /* command identifier     */
jesrcdi= substr(jescvar,67,1)            /* rmt command identifier */
jesnnam= substr(jescvar,68,8)            /* node name              */
jesscope= substr(jescvar,76,8)           /* jes2 scope             */
jessprfx= substr(jescvar,84,5)           /* spool prefix           */
jesduplx= substr(jescvar,89,3)           /* duplex option          */
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(5)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan04)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
display_jes2_start_info:
call Lets_Lock_The_Terminal              /* lock the terminal      */
address TSO "CALL 'sys1.linklib.utility(JES2SCAN)' '"option"'"
if (rc = 0) then do                     /* error?                 */
   jesrc= rc                             /* save the return code   */
   say 'JES2SCAN Error    rc = 'rc''     /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(jesrc)                           /* and quit               */
end
select
   when (substr(jessvar,2,1)) = 'Y' then do /* cold start?         */
        jesstype= 'cold'                 /* yes-                   */
   end
   when (substr(jessvar,8,1)) = 'Y' then do /* quick start?        */
        jesstype= 'quick'                /* yes-                   */
   end
   otherwise
        jesstype= 'warm'                 /* warm start             */
end
jessfmt=  substr(jessvar,1,1)            /* format option          */
jesscon=  substr(jessvar,7,1)            /* console option         */
jesslist= substr(jessvar,4,1)            /* list option            */
jesslog=  substr(jessvar,5,1)            /* log option             */
jessrcfg= substr(jessvar,6,1)            /* reconfig option        */
jessreq=  substr(jessvar,3,1)            /* req option             */
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(5)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan05)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
display_jes2_exits:
call Lets_Lock_The_Terminal              /* lock the terminal      */
address TSO "CALL 'sys1.linklib.utility(JES2SCAN)' '"option"'"
if (rc = 0) then do                     /* error?                 */
   jesrc= rc                             /* save the return code   */
   say 'JES2SCAN Error    rc = 'rc''     /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(jesrc)                           /* and quit               */
end
ADDRESS "ISPEXEC" "TBCREATE JESETAB NOWRITE REPLACE"
if (rc >  4) then do                     /* call okay?             */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ztdmark= '<--------------------------------------------------------------->'
ADDRESS  "ISPEXEC" "VPUT    (ztdmark) SHARED"
tabrows=  9999                           /* max table rows         */
x= 3                                     /* starting position      */
no_of_exit_table_entries= x2d(c2x(substr(jesevar,1,2)))
if (no_of_exit_table_entries = 0) then do
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   info= '**   No JES2 Exits Have been Installed  **'
   ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(5)" /* pop up position  */
   ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan02)"
   if (rc > 8) then do                   /* error?                 */
      say 'Display error    rc = 'rc''   /* yes- output message    */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(0)                            /* and quit               */
   end
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   return                                /* return to caller       */
end
do i= 1 to no_of_exit_table_entries      /* do no of table entries */
   jextpnt=  x2d(c2x(substr(jesevar,x,2))) /* jes2 exit point      */
   jextname= substr(jesevar,x+2,8)       /* jes2 exit name         */
   jextaddr= c2x(substr(jesevar,x+10,4)) /* jes2 exit point        */
   jextnoex= x2d(c2x(substr(jesevar,x+14,1))) /* no of exit rtns   */
   jextenb=  substr(jesevar,x+15,1)      /* jes2 exit enabled flag */
   jextrace= substr(jesevar,x+16,1)      /* jes2 exit trace flag   */
   select                                /* test the exit enviro   */
     when (substr(jesevar,x+17,1)) = 'J' then do /* jes2 main task */
        jextenv= 'JES2'                  /* yes-                   */
     end
     when (substr(jesevar,x+17,1)) = 'S' then do /* jes2 subtask?  */
        jextenv= 'SUBTASK'               /* yes-                   */
     end
     when (substr(jesevar,x+17,1)) = 'F' then do /* fss?           */
        jextenv= 'FSS'                   /* yes-                   */
     end
     when (substr(jesevar,x+17,1)) = 'U' then do /* user?          */
        jextenv= 'USER'                  /* yes-                   */
     end
     when (substr(jesevar,x+17,1)) = 'M' then do /* mixed?         */
        jextenv= 'MIXED'                 /* yes-                   */
     end
   otherwise
        jextenv=  'OTHER'                /* other environments     */
   end
   ADDRESS "ISPEXEC" "TBADD JESETAB
      SAVE(jextpnt,jextname,jextaddr,jextenb,jextrace,jextnoex,jextenv)
      MULT("TABROWS")"
   if (rc = 0) then do                  /* call okay?             */
      say 'tbadd error    rc = 'rc''     /* no- inform the user    */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(0)                            /* let's quit             */
   end
   x= (x + 18)                           /* next table entry       */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(2)" /* pop-up position     */
ADDRESS "ISPEXEC" "TBTOP JESETAB"        /* position to top of tab */
if (rc = 0) then do                     /* call okay?             */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ADDRESS "ISPEXEC" "TBDISPL JESETAB PANEL(JESPAN06)"
if (rc > 8) then do                      /* error?                 */
   say 'tbdispl error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "TBCLOSE  JESETAB"     /* close the table        */
if (rc = 0) then do                     /* call okay?             */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
display_the_main_panel:
ADDRESS "ISPEXEC" "ADDPOP ROW(2) COLUMN(10)" /* pop-up position    */
ADDRESS "ISPEXEC" "DISPLAY PANEL(jespan00)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
if (rc = 8) then do                      /* return?                */
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
return


JESPAN00 PANEL

)ATTR
* TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(TEXT)    INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(46,10)
%
%COMMAND ===>_ZCMD      %  SCROLL ===>_AMT   +
%
%
#    Cold Start And Global Information  _z%
#    JES2 Start-up Parameters           _z%
#    JES2 User Exits                    _z%
#
% Please select an option by entering a '/'
%
)INIT
.ZVARS= '(jescold,jesstart,jesexits)'
&ZCMD= ' '
&jescold=  '_'
&jesstart= '_'
&jesexits= '_'
&check= ' ,_,/'
.CURSOR= jescold
&ZWINTTL=  'JES2 Information Panel'
)REINIT
&ZWINTTL=  'JES2 Information Panel'
&jescold=  '_'
&jesstart= '_'
&jesexits= '_'
.CURSOR= jescold
)PROC
ver (&jescold,listv,&check)
ver (&jesstart,listv,&check)
ver (&jesexits,listv,&check)
)END


JESPAN02 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(53,5)
%
%  -----------------------------------------------
%  |?info                                       *|
%  -----------------------------------------------
%
)INIT
&ZCMD= ' '
&ZWINTTL=  'Information Panel'
)REINIT
&ZCMD= ' '
)PROC
)END


JESPAN03 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(35,7)
%
%COMMAND ===>_ZCMD      %
%
%  @jerr1                       %
%  @jerr2                       %
%  @jerr3                       %
%
)INIT
&ZCMD= ' '
&ZWINTTL=  'JES2 Error Display Panel'
)REINIT
&ZCMD= ' '
)PROC
)END


JESPAN04 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(BLUE)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(GREEN)
? TYPE(OUTPUT)  INTENS(LOW) COLOR(BLUE)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(67,17)
%
%COMMAND ===>_ZCMD      %         SCROLL ===>_AMT   +
%
% Cold Start Information
%
*    JES Name:      #z   *        JES Version:   #z       *
*    SMF System ID: #z   *        Date:          #z    *
*    Time:          #z          *
%
% JES2 Global Information
%
*   JES2 Version:    #z       *   JES2 FMID:             #z      *
*   Max No Of Jobs:  #z       *   Max Batch Initiators:  #z  *
*   No Of JOES:      #z     *     NODE Name:             #z       *
*   Command ID:      #z*          RDR/RMT Command ID:    #z*
*   Scope:           #z      *    Spool Prefix:          #z    *
*   Duplex Mode:     #z*
)INIT
.ZVARS= '(jescnme,jescvsn,jescsmfi,jescdate,jesctime,     +
jesvern,jesfmid,jesmjbs,jesbint,jesnjoe,jesnnam,jescmdi,  +
jesrcdi,jesscope,jessprfx,jesduplx)'
&ZCMD= ' '
&ZWINTTL=  'JES2 Cold Start And Global Information'
)REINIT
&ZCMD= ' '
)PROC
)END


JESPAN05 PANEL

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(BLUE)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(GREEN)
? TYPE(OUTPUT)  INTENS(LOW) COLOR(BLUE)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(46,9)
%
%COMMAND ===>_ZCMD      %  SCROLL ===>_AMT   +
%
% Start-up Information
%
*    Type:     #z    *   Format:    #z*
*    Console:  #z*       List:      #z*
*    Log:      #z*       Reconfig:  #z*
*    Reqmsg:   #z*
)INIT
.ZVARS= '(jesstype,jessfmt,jesscon,jesslist,jesslog,jessrcfg,jessreq)'
&ZCMD= ' '
&ZWINTTL=  'JES2 Start-up Information'
)REINIT
&ZCMD= ' '
)PROC
)END


JESPAN06 PANEL

)ATTR
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(YELLOW)
# TYPE(TEXT)    INTENS(HIGH) COLOR(BLUE)
? TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)
@ TYPE(OUTPUT)  COLOR(GREEN)
* TYPE(OUTPUT)  COLOR(YELLOW)
)BODY WINDOW(67,17)
%
%COMMAND ===>_ZCMD      %            SCROLL ===>_AMT  +
%
%
# Exit   Exit       Module     Exit    Trace  No Of Exit  Exit
# Point  Name       Address    Enabled        Routines    Environ
%
)MODEL
% @z  % @z       % @z       %    @z%    @z%       @z  %  @z      %
)INIT
.ZVARS= '(jextpnt,jextname,jextaddr,jextenb,jextrace,jextnoex,jextenv)'
&ZCMD= ' '
&ZWINTTL=  'JES2 Installed User Exits'
)REINIT
&ZCMD= ' '
&ZWINTTL=  'JES2 Installed User Exits'
)PROC
)END


R F Perretta
Senior Systems Programmer (UK)               c Xephon 1996

