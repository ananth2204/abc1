Finding uncatalogued datasets

In many MVS environments, it is not unusual for uncatalogued
datasets to accumulate on DASD.  Causes for this vary from
the 'not catalogued 2' events to programmers uncataloguing
without a delete.  During operating system upgrades,
uncatalogued datasets seem to show up even more than usual
because of catalog manipulations and various other upgrade
tasks.

During the course of a recent XA to ESA upgrade, I decided to
write a procedure to automate the process of finding and then
optionally recataloguing or scratching uncatalogued datasets.
The process also lent itself well to use as an on-going tool in
overall DASD management.

The procedure is broken into two jobs.  The first job is
responsible for setting up a second job stream which will do the
actual dataset searching.  An Assembler program in job one,
called FINDDASD, generates a JCL DD statement for all
DASD volumes currently on-line in the environment.  The
purpose of this first job is to allow dynamic changes to the
search job stream, based on the currently configured DASD
pool.  It merges and writes the generated DD statements, along
with other JCL supplied via the JCLIN DD, to an internal
reader for execution.  This second job then executes an
Assembler program called SRCHDASD.  SRCHDASD
contains the logic to search the DASD for improperly
catalogued or uncatalogued datasets.  The SRCHDASD
program keys off the DDxx cards in the JCL to determine what
volumes to search.  Note that the second job can run stand-
alone in those cases where only select volumes need to be
processed.  Simply create a DDxx card for each volume to
process.

There are two exception reports produced by SRCHDASD.
One indicates datasets which are not catalogued and the other
lists datasets catalogued to a different pack.  For datasets not
catalogued, there is a DEFINE NONVSAM statement written
to the DEFDSNS DD along with an IEHPROGM SCRATCH
statement generated to the SCRDSNS DD.  Datasets
catalogued to another pack have only a SCRATCH card
generated, with the assumption that the catalogued entry is
proper and will remain unchanged.  VSAM files do not have
 DEFINE or SCRATCH cards created.  However, the program
reports them appropriately and flags them as VSAM so they
can be handled on an individual basis.  The program also
contains logic to handle multi-volume datasets.  Examine the
two reports on a dataset-by-dataset basis to determine the
proper course of action.  After appropriately manipulating the
DEFINE and SCRATCH cards, feed them into an IDCAMS or
IEHPROGM job stream to clean up the datasets as desired.
Programs FINDDASD and SRCHDASD along with the JCL to
execute them are illustrated below.  Sample output from the
process is illustrated in Figure 1.


FINDDASD SOURCE CODE

FINDDASD CSECT
         STM   14,12,12(13)             HOUSEKEEPING
         LA    14,0(13)
         BAL   13,84(15)
         USING *,13
         DS    18F
         ST    14,4(13)
         ST    13,8(14)
         OPEN  (JCLIN,,JCLOUT,(OUTPUT)) OPEN JCL FILES
GETJCL   GET   JCLIN                    GET JCL RECORD
         CLC   =C'-INSERT',0(1)         IS THIS THE INSERT POINT?
         BE    GETUCBS                  IF YES, CREATE DDS FROM UCBS
         MVC   JCLHOLD(80),0(1)         IF NOT, SAVE JCL RECORD
         PUT   JCLOUT,JCLHOLD           WRITE JCL RECORD
         B     GETJCL                   GO LOOK FOR MORE
GETUCBS  XC    WORKAREA,WORKAREA        CLEAR WORK AREA
         LA    1,WORKAREA               GET ADDR OF WORK AREA
         ST    1,PARMWA                 STORE ADDR IN PARMLIST
         LA    1,DEVCLASS               GET ADDR OF DEV CLASS
         ST    1,PARMDEVT               STORE ADDR IN PARMLIST
         MVI   DEVCLASS,UCB3DACC        INDICATE ONLY DASD UCBS.
         LA    1,ADDRUCB                ADDR OF UCB STORE ADDR
         ST    1,PARMUCB                STORE ADDR IN PARMLIST
         OI    PARMUCB,X'80'            INDICATE END OF PARMLIST
         ZAP   DDCNT,=P'0'              INITIALIZE DD COUNT TO 0
         USING UCBOB,10                 ESTABLISH UCB ADDRESSABILITY
         USING CVTMAP,11                ESTABLISH CVT ADDRESSABILITY
SRCHUCBS LA    1,PARMLIST               ADDR OF PARMLIST IN R1
         L     11,16                    CVT ADDR
         L     15,CVTUCBSC              GET SCAN SERVICE ADDR
         BALR  14,15                    EXECUTE SCAN SERVICE
         LTR   15,15                    WAS A UCB FOUND?
         BNZ   GETJCL                   IF NO, GET OUT
         L     10,ADDRUCB               GET RETURNED ADDR
         TM    SRTESTAT,UCBONLI         IS IT ONLINE?
         BO    ONLINE                   IF YES, PROCESS
         B     SRCHUCBS                 IF NOT, LOOK FOR ANOTHER
ONLINE   MVC   JCLVOL,UCBVOLI           SAVE THE VOL SER
         AP    DDCNT,=P'1'              ADD 1 TO DD COUNT
         UNPK  CNTWRK,DDCNT             UNPACK DD COUNT
         OI    CNTWRK+2,X'F0'           GET RID OF SIGN
         MVC   JCLDD+4(2),CNTWRK+1      MOVE IN DD COUNT
         PUT   JCLOUT,JCLSTMNT          WRITE JCL RECORD
         B     SRCHUCBS                 GO FIND MORE UCBS
ALLDONE  CLOSE (JCLOUT,,JCLIN)          CLOSE FILES
         L       13,4(13)               RELOAD CALLERS SAVE AREA
         LM      14,12,12(13)           RELOAD CALLERS REGISTERS
         LA      15,0                   ZERO RETURN CODE
         BR      14                     GO BACK TO CALLER
PARMLIST DS    3F
         ORG   PARMLIST
PARMWA   DS    F
PARMDEVT DS    F
PARMUCB  DS    F
DEVCLASS DS    CL1
ADDRUCB  DS    F
         DS    0D
WORKAREA DS    CL100
DDCNT    DS    PL2
CNTWRK   DS    CL3
JCLSTMNT DS    CL80
         ORG   JCLSTMNT
JCLDD    DC    CL39'//DDXX  DD  DISP=SHR,UNIT=3380,VOL=SER='
JCLVOL   DS    CL6
JCLFILL  DC    CL35' '
JCLHOLD  DS    CL80
         LTORG
JCLIN    DCB   DDNAME=JCLIN,DSORG=PS,MACRF=GL,EODAD=ALLDONE
JCLOUT   DCB   DDNAME=JCLOUT,DSORG=PS,MACRF=PM,RECFM=F,                X
               BLKSIZE=80,LRECL=80
UCBWRK   DSECT
         IEFUCBOB
         CVT   DSECT=YES
         END

SRCHDASD SOURCE CODE

SRCHDASD CSECT
         STM   14,12,12(13)             HOUSEKEEPING
         LA    14,0(13)
         BAL   13,84(15)
         USING *,13
         DS    18F
         ST    14,4(13)
         ST    13,8(14)
         OPEN  (REPORT1,(OUTPUT),REPORT2,(OUTPUT))
         OPEN  (DEFCARDS,(OUTPUT),SCRCARDS,(OUTPUT))
         L     3,16                  CVT ADDR
         L     3,0(3)                TCB HEAD ADDR
         L     3,4(3)                TCB ACTIVE ADDR
         L     3,12(3)               TIOT ADDR
         LA    3,24(3)               TIOELNGH DD ENTRY LENGTH FIELD
         BAL   10,PRNTHDS1           GO PRINT HEADINGS1
         BAL   10,PRNTHDS2           GO PRINT HEADINGS2
         B     CHECKDD               CHECK WHICH DD THIS IS
NEXTDD   SR    0,0                   ZERO REG 0
         IC    0,0(3)                MOVE TIOELNGH TO REG 0
         AR    3,0                   ADD TIOELNGH TO REG 3
CHECKDD  CLI   0(3),X'00'            IS LENGTH FIELD ZERO?
         BE    EOJ                   GET OUT IF LAST DD
         CLC   =C'DD',4(3)           IS THIS A "DD" DD STMNT?
         BNE   NEXTDD                NO, GET ANOTHER
         MVC   SYSLIB+40(8),4(3)     USE DDNAME FROM TIOT
         RDJFCB SYSLIB               READ THE JFCB
         MVC   WTO+19(6),JFCB+X'76'  PUT VOLSER INTO WTO
WTO      WTO   'PROCESSING XXXXXX  ',ROUTCDE=(2,11) SHOW WHERE AT
         MVI   JFCB,X'04'            SET JFCB BYTE-1 TO X'04'
         MVC   JFCB+1(43),JFCB       PERPETUATE THROUGH DSN FIELD
         MVC   JFCB+44(8),=8X'40'    SET MEMBER NAME TO BLANKS
         XC    JFCB+52(27),JFCB+52   ZERO OUT MISC DATA-MNGMT FIELDS
         XC    JFCB+86(31),JFCB+86
         XC    JFCB+148(26),JFCB+148
         OI    JFCB+52,8             SET MISC DATA-MNGMT FIELDS
         OI    JFCB+66,2
         OI    JFCB+87,X'48'
         OPEN  SYSLIB,TYPE=J         OPEN WITH MODIFIED JFCB
READ     READ  DECB1,SF,SYSLIB,DSCB,'S'   START READ FOR VTOC
         CHECK DECB1                 WAIT FOR READ TO COMPLETE
         CLI   DSCB+44,C'1'          FORMAT 1 DSCB?
         BNE   READ                  NO, SO LOOP
         LOCATE CATLG                IS IT CATALOGUED?
         LTR   15,15                 CHECK RETURN CODE
         BNZ   NOTCAT                IF NOT, PRINT IT
         MVC   VOLSER1(6),JFCB+X'76' SAVE VOLSER BEING PROCESSED
         CLC   VOLSER1(6),VOLLST+6   IS IT CATALOGUED TO THIS PACK?
         BE    READ                  IF YES, CONTINUE
         LA    9,VOLLST+6            PRIME REG 9 IN CASE OF MULTIVOL
         CLC   VOLLST(2),=X'0001'    IS IT SINGLE VOLUME?
         BE    WRONGVOL              IF YES, GO PROCESS
MULTIVOL CLC   VOLSER1(6),0(9)       IS IT CATALOGUED TO THIS PACK?
         BE    READ                  IF YES, CONTINUE
         LA    9,12(9)               ADDRESS NEXT VOLUME
         CLC   0(6,9),=X'000000000000' IS THAT ALL THE VOLUMES?
         BE    WRONGVOL              IF YES, IT'S NOT CATALOGUED HERE
         B     MULTIVOL              GO CHECK THIS PACK
WRONGVOL MVC   CATVOL(6),VOLLST+6    SAVE CATALOGUED VOLSER
         MVC   DSN1(44),DSCB         SAVE DSN
         MVC   FLAG1(6),=C'VSAM->'   ASSUME VSAM
         TM    DSCB+83,X'08'         VSAM DATA-SET?
         BO    PUTSKIP1              IF YES, SKIP PUTS
         MVC   SCRDSN,DSN1           SAVE DSN FOR SCRATCH
         MVC   SCRVOL,VOLSER1        SAVE VOLSER FOR SCRATCH
         PUT   SCRCARDS,SCRCARD1     WRITE SCRATCH CARD
         PUT   SCRCARDS,SCRCARD2     WRITE SCRATCH CARD
         MVC   FLAG1(6),=C'      '   IT'S NOT VSAM
PUTSKIP1 CP    LINECNT1,=P'60'       TIME FOR HEADINGS?
         BL    SKIPHDS1              IF NOT, SKIP
         BAL   10,PRNTHDS1           GO PRINT HEADINGS
SKIPHDS1 PUT   REPORT1,LINE1         PRINT IT
         AP    LINECNT1,=P'1'        ADD 1 TO LINE COUNTER
         B     READ                  GO GET ANOTHER DSNAME
NOTCAT   CLC   =C'SYS1.VTOC',DSCB    IS THIS INDEXED VTOC?
         BE    READ                  IF YES, BYPASS
         MVC   VOLSER2(6),JFCB+X'76' SAVE VOLSER FOR PRINT
         MVC   FLAG2(6),=C'VSAM->'   ASSUME VSAM
         TM    DSCB+83,X'08'         VSAM DATA-SET?
         BO    PUTSKIP2              IF YES, SKIP PUTS
         MVC   DEFDSN(44),DSCB       SAVE DSN FOR DEFINE
         MVC   SCRDSN(44),DSCB       SAVE DSN FOR SCRATCH
         MVC   DEFVOL,VOLSER2        SAVE VOLSER FOR DEFINE
         MVC   SCRVOL,VOLSER2        SAVE VOLSER FOR DEFINE
         LA    1,DEFDSN+44           ADDRESS END OF DSNAME
BLNKLOOP BCTR  1,0                   SUBTRACT 1
         CLI   0(1),X'40'            IS IT BLANK YET?
         BE    BLNKLOOP              IF NOT, KEEP LOOKING
         MVC   1(2,1),=C'))'         FINISH UP DEFINE CARD
         PUT   DEFCARDS,DEFCARD1     WRITE DEFINE CARD
         PUT   DEFCARDS,DEFCARD2     WRITE DEFINE CARD
         PUT   SCRCARDS,SCRCARD1     WRITE SCRATCH CARD
         PUT   SCRCARDS,SCRCARD2     WRITE SCRATCH CARD
         MVC   FLAG2(6),=C'      '   IT'S NOT VSAM
PUTSKIP2 MVC   DSN2(44),DSCB         SAVE DSNAME FOR PRINT
         CP    LINECNT2,=P'60'       TIME FOR HEADINGS?
         BL    SKIPHDS2              IF NOT, SKIP
         BAL   10,PRNTHDS2           GO PRINT HEADINGS
SKIPHDS2 PUT   REPORT2,LINE2         PRINT IT
         AP    LINECNT2,=P'1'        ADD 1 TO LINE COUNTER
         B     READ                  GO GET ANOTHER DSNAME
PRNTHDS1 PUT   REPORT1,HEADLNE1      PRINT HEADINGS
         PUT   REPORT1,HEADLNE2
         PUT   REPORT1,HEADLNE3
         ZAP   LINECNT1,=P'3'        RESET LINE COUNTER
         BR    10
PRNTHDS2 PUT   REPORT2,HEADLNE4      PRINT HEADINGS
         PUT   REPORT2,HEADLNE5
         PUT   REPORT2,HEADLNE6
         ZAP   LINECNT2,=P'3'        RESET LINE COUNTER
         BR    10
EOF      CLOSE SYSLIB                CLOSE DOWN THIS PACK
         B     NEXTDD                GO GET ANOTHER PACK
EOJ      CLOSE (REPORT1,,REPORT2,,DEFCARDS,,SCRCARDS) CLOSE FILES
         L     13,4(13)              RELOAD CALLERS SAVE AREA
         LM    14,12,12(13)          RELOAD CALLERS REGISTERS
         LA    15,0                  ZERO RETURN CODE
         BR    14                    GO BACK TO CALLER
DEFCARD1 DC    CL80' '
         ORG   DEFCARD1
         DC    CL13' DEF NONVSAM('
         DC    CL5' VOL('
DEFVOL   DS    CL6
         DC    CL14') DEVT(3380) -'
         ORG
DEFCARD2 DC    CL80' '
         ORG   DEFCARD2
         DC    CL7'  NAME('
DEFDSN   DS    CL44
         ORG
SCRCARD1 DC    CL80' '
         ORG   SCRCARD1
         DC    CL18' SCRATCH VOL=3380='
SCRVOL   DS    CL6
         DC    CL47','
         DC    CL1'-'
         ORG
SCRCARD2 DC    CL80' '
         ORG   SCRCARD2
         DC    CL15' '
         DC    CL7'DSNAME='
SCRDSN   DS    CL44
         ORG
HEADLNE1 DC    CL80'1 FOLLOWING DATASETS ARE NOT CATALOGUED PROPERLY'
HEADLNE2 DC    CL80' ACTUAL VOLSER    CATALOG VOLSER     DATASET NAME'
HEADLNE3 DC    CL80' -------------    --------------     ------------'
HEADLNE4 DC    CL80'1 FOLLOWING DATASETS ARE NOT CATALOGUED'
HEADLNE5 DC    CL80'     VOLSER         DATASET NAME'
HEADLNE6 DC    CL80'     ------         ------------'
LINE1    DC    CL80' '
VOLSER1  EQU   LINE1+4
CATVOL   EQU   VOLSER1+18
FLAG1    EQU   CATVOL+8
DSN1     EQU   FLAG1+7
LINE2    DC    CL80' '
VOLSER2  EQU   LINE2+5
FLAG2    EQU   VOLSER2+8
DSN2     EQU   FLAG2+7
LINECNT1 DS    PL2
LINECNT2 DS    PL2
VOLCNT   DS    PL2
DSCB     DS    CL144
CATLG    CAMLST NAME,DSCB,,VOLLST
VOLLST   DS    0D,265C
REPORT1  DCB   DDNAME=REPORT1,DSORG=PS,MACRF=PM,                       X
               BLKSIZE=80,RECFM=FBA,LRECL=80
REPORT2  DCB   DDNAME=REPORT2,DSORG=PS,MACRF=PM,                       X
               BLKSIZE=80,RECFM=FBA,LRECL=80
DEFCARDS DCB   DDNAME=DEFCARDS,DSORG=PS,MACRF=PM,                      X
               BLKSIZE=3120,RECFM=FB,LRECL=80
SCRCARDS DCB   DDNAME=SCRCARDS,DSORG=PS,MACRF=PM,                      X
               BLKSIZE=3120,RECFM=FB,LRECL=80
SYSLIB   DCB   DDNAME=DDXX,DSORG=PS,MACRF=R,RECFM=F,BLKSIZE=96,        X
               EXLST=EXLST,KEYLEN=44,EODAD=EOF
EXLST    DC    0F'0',X'87',AL3(JFCB)
JFCB     DS    CL176
         LTORG
         END


SAMPLE JCL

//jobname1  JOB  (),'UNCAT DSNS JOB1',MSGCLASS=x,NOTIFY=yourid
//STEP1     EXEC PGM=FINDDASD
//JCLOUT    DD   SYSOUT=(A,INTRDR)
//JCLIN     DD   DATA,DLM=ZZ
//jobname2  JOB  (),'UNCAT DSNS JOB2',MSGCLASS=x,NOTIFY=yourid
//STEP1     EXEC PGM=SRCHDASD
-INSERT
//REPORT1   DD   SYSOUT=*
//REPORT2   DD   SYSOUT=*
//DEFCARDS  DD   DSN=DEFCARDS.DATA,DISP=(,CATLG,DELETE),
//          DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB),
//          UNIT=SYSWK,SPACE=(CYL,(5,1))
//SCRCARDS  DD   DSN=SCRCARDS.DATA,DISP=(,CATLG,DELETE),
//          DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB),
//          UNIT=SYSWK,SPACE=(CYL,(5,1))
ZZ


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                               c Xephon 1991

