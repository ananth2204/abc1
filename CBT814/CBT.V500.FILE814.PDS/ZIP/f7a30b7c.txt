Unconditional DFDSS restore (continued)

This month we conclude our look at one installation's solution
to a problem with DFDSS and loose VSAM entries in user
catalogs by publishing the remaining routines which fixed the
problem.


EXTDFDSS

The actual work is done in the program EXTDFDSS, which
supplies ADRDSSU with two exit routines: exit 1 and exit 21.

Exit 1

Exit 1 is called for each SYSIN record. It scans the SYSIN
data for keywords which cannot be supported in combination
with the special functions, like RENAME, RESTORE, COPY
etc. If it finds such a keyword it stops ADRDSSU processing
with a message in the SYSPRINT data. It inserts the proper
RESTORE or COPY command itself so they should not be in
the SYSIN datasteam.

Exit 21

Exit 21 is called just before the dataset at hand is about to be
moved to the destination DASD volume. The dataset name is
supplied to the exit point before any ADRDSSU rename
processing has occurred. It is this, which forced me to allow
only a first-level qualifier rename (otherwise I would need to
rebuild the full rename logic of ADRDSSU). After applying
my rename process to the dataset it is fed to program
IFFIDCAM, which processes an 80-byte maximum IDCAMS
record through an internal IDCAMS call. As you can see in the
code, this program may be called twice: first to perform a
DELETE dsn SCRATCH and, if this fails, to issue a DELETE
dsn NOSCRATCH. No matter what the outcome of the second
delete, ADRDSSU is then allowed to do its restore (or copy)
and it is assumed it will succeed.

EXTDFDSS source code

*** DFDSS EXIT ROUTINES
*   FUNCTION: PROVIDES 2 VALID EXIT ROUTINES FOR DFDSS
*             1. READING SYSIN: EIOPTION 1 EXIT
*                - INSERT COPY OR RESTORE COMMAND RETRIEVED FROM COMM
*                  AREA SETUP IN IFFDFDSS
*                - FIND IMPROPER DFDSS KEYWORDS, IF SO ==> ERROR
*             2. DATASET VERIFICATION EIOPTION 21
*                - CONSTRUCT DATASET WITH PFX VLUE (IF ANY)
*                - CALL DATASET IDCAMS DELETE FUNCTION
*    INPUT :  R1  POINTS TO PARM BLOCK: ADREID0 SEE MANUAL SC26-4389
*                 DFDSS REFERENCE
*    NOTE  : THIS ROUTINE IS CALLED FROM WITHIN ADRDSSU NOT BY THE
*            PROCEDURE IFFDFDSS ALTHOUGH IFFDFDSS ACTIVATES THE
***          ROUTINE
EXTDFDSS CSECT
EXTDFDSS AMODE 31
EXTDFDSS RMODE 24
*  EXTERNALS
         EXTRN PARSE
         EXTRN IFFIDCAM
*  CONSTANT EQUATES
RCOMMNT  EQU  B'00000001'
FSTRING  EQU  B'00000010'
*   RETURN CODES
RC00     EQU   00                   ALL SUCCESSFUL
RC04     EQU   04
RC08     EQU   08
BEGIN    SAVE  (14,12),,EXTDFDSS_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING EXTDFDSS,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVERTN+4         SAVE R13 IN PROG SAVERTN AREA
         LA    R14,SAVERTN
         ST    R14,8(R13)            STORE SAVERTN ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
*    R1 POINTS TO ADDRESS OF DFDSS PARAMETER BLOCK: ADREIB0
         L     R10,0(,R1)            R10 = PTR TO ADREIB0
         USING ADREIB,R10            SET UP ADDRESSABILITY
         LH    R3,EIOPTION           GET DFDSS REQUESTED EXIT POINT
         LA    R4,MXEXITNO           R4 = MAXIMUM EXPECTED EXIT NO
         CLR   R3,R4                 PREVENT OUT OF RANGE
         BH    ERREXITN              GO TO ERROR ROUTINE
INRANGE  SLL   R3,2                  MULTIPLY BY 4
         LA    R15,VECTABLE          POINT TO VECTOR TABLE
         L     R15,0(R3,R15)         GET ROUTINE ADDRESS
         LR    R1,R10                R1 = PTR TO ADREIB0, INPUT
         BASR  R14,R15               GO THERE
         LR    R11,R15               SAVE RC IN REG R11
         B     RETXTR                LET'S RETURN
*    ALL DONE, LET'S GET OUT
RETXTR   DS    0H
         L     R13,SAVERTN+4
         RETURN (14,12)       RETURN TO CALLER WITH ALL REG RESTORED
*     ERROR EXIT POINTS FOR EXTDFSS MAIN PGM
ERREXITN DS    0H
         WTO   'IFFD41A EXTDFDSS, EXIT NUMBER OUT OF RANGE, SEE REASON X
               CODE OF ABEND',ROUTCDE=(1,9,11)
         ABEND 1000,REASON=(3),DUMP   ABEND THIS GUY.
         DROP  R10
*  DATA AREAS     CONSTANTS:
*   EXIT VECTOR TABLE:
VECTABLE DS    0F                    FULL WORD BOUNDARY
         DC    A(SKIPPROC)           EXIT POINT 0
         DC    A(SYSIPROC)           EXIT POINT 1
         DC    A(SKIPPROC)           EXIT POINT 2
         DC    A(SKIPPROC)           EXIT POINT 3
         DC    A(SKIPPROC)           EXIT POINT 4
         DC    A(SKIPPROC)           EXIT POINT 5
         DC    A(SKIPPROC)           EXIT POINT 6
         DC    A(SKIPPROC)           EXIT POINT 7
         DC    A(SKIPPROC)           EXIT POINT 8
         DC    A(SKIPPROC)           EXIT POINT 9
         DC    A(SKIPPROC)           EXIT POINT 10
         DC    A(SKIPPROC)           EXIT POINT 11
         DC    A(SKIPPROC)           EXIT POINT 12
         DC    A(SKIPPROC)           EXIT POINT 13
         DC    A(SKIPPROC)           EXIT POINT 14
         DC    A(SKIPPROC)           EXIT POINT 15
         DC    A(SKIPPROC)           EXIT POINT 16
         DC    A(SKIPPROC)           EXIT POINT 17
         DC    A(SKIPPROC)           EXIT POINT 18
         DC    A(SKIPPROC)           EXIT POINT 19
         DC    A(SKIPPROC)           EXIT POINT 20
         DC    A(DSNVPROC)           EXIT POINT 21
         DC    A(SKIPPROC)           EXIT POINT 22
         DC    A(SKIPPROC)           EXIT POINT 23
MXEXITNO EQU   ((*-VECTABLE)/4)-1    MAXIMUM EXIT NUMBER
SAVERTN  DS    18F
*** EXIT POINT ROUTINES
* 1. SKIPRPOC
* FUNCTION:  JUST RETURN TO DFDSS    INPUT   :  R1 PTR TO ADREIB
* DO NOT CALL ANY SERVICES IN THIS CODE OR YOU WILL GET STACK FAILURES
SKIPPROC DS    0H
         USING ADREIB,R1             SET UP ADDRESSABILITY INTO DFDSS
         LA    R11,RC00              SET RETURN CODE
         STH   R11,EIRETCOD          SAVE IN DFDSS PARM BLOCK
         DROP  R1
         BR    R14                   AND RETURN
* 2. SYSIRPOC
* FUNCTION:  PROCESS DFDSS SYSIN RECORDS   INPUT   :  R1 PTR TO ADREIB
SYSIPROC SAVE  (14,12),,SYSIPROC_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING SYSIPROC,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVESYSI+4        SAVE R13 IN PROG AREA
         LA    R14,SAVESYSI
         ST    R14,8(R13)            STORE ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         LR    R10,R1                SET UP R10 TO POINT INT ADREIB
         USING ADREIB,R10            SET UP ADDRESSABILITY INTO DFDSS
         ICM   R2,B'1111',EIRECPTR   GET RECORD POINTER
         ICM   R3,B'1111',EIRECLEN   GET RECORD LENGTH
         ICM   R9,B'1111',EIUSEPTR   GET ADDRESS OF USER AREA
         LTR   R3,R3                 IS LENGTH ZERO ?
         LA    R11,RC00              SET RETURN CODE
         BZ    SYSIQUIT              YES THEN QUIT
*   IF REC1FLAG = 0 THEN INSERT RESTORE RECORD FROM USER COMM AREA
         L     R1,0(,R9)             GET REC1FLAG
         LTR   R1,R1                 IF ZERO THEN IT IS THE FIRST REC.
         BNZ   CHKRECRD              NO, THEN CHECK RECORDS
FIRSTREC LA    R1,1(,R1)             SET REC1FLAG
         ST    R1,0(,R9)
*   INSERT RECORD FROM USER COMM AREA
         L     R1,12(,R9)            GET ADDRESS OF RECORD
         LH    R2,0(,R1)             R2 IS LENGTH
         LA    R1,2(,R1)             R1 POINT TO RECORD
         STCM  R1,B'1111',EIRECPTR   TELL DFDSS ABOUT NEW RECORD
         STCM  R2,B'1111',EIRECLEN   TELL DFDSS ABOUT NEW REC LENGTH
         LA    R11,RC08              SET RETURN CODE, ACTIVATE INSERT
         B     SYSIQUIT              AND LEAVE
*  CHECK THAT OTHER RECORDS DO NOT USE IMPROPER KEYWORDS LIKE
*  PRIMARY: COM(PRESS) , CONVERT , COP(Y) , COPYD(UMP) , DEF(RAG) ,
*  DUM(P) , PR(INT) , REL(EASE), REST(ORE), PAR(ALLEL)
*  SECONDARY: REN(AME) , RENAMEU(NCONDITIONAL) , RENUNC
CHKRECRD DS    0H                    R2 POINT TO SYSIN REC, R3 = LENGTH
         MVI   COMMAND,C' '          INIT COMMAND WITH BLANK
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         LA    R3,1(,R3)             FOR PARSING CMD IS 1 BYTE LONGER
         STH   R3,COMMLGTH           FILL IN LENGTH
         BCTR  R3,0                  CORRECT R3
         BCTR  R3,0                  DECREMENT FOR EX
         EX    R3,MVCCMD             EXECUTE
         LA    R1,RCOMMNT+FSTRING    SET FUNCTION FOR PARSE
         ST    R1,PARSEINP+8         REMOVE AND SCAN FOR STRING
         LA    R4,PARSELST           R4 IS PTR INTO PARSE LST
SCANKEYW ST    R4,PARSEINP+4         R4, POINT TO PARSING STRING
         LH    R5,0(,R4)             R5 = LENGTH OF PARSING STRING
         LTR   R5,R5                 IF ZERO THEN READY
         BZ    COMMACC               AND ACCEPT SYSIN RECORD
         LA    R1,PARSEINP           R1 = INPUT FOR PARSE
         L     R15,=A(PARSE)         PARSE ROUTINE
         BASR  R14,R15                AND CALL THIS ROUTINE
         LTR   R15,R15               CHECK IF FOUND
         BZ    ERRKEYW               YES, THEN ERROR
         C     R15,=A(RC04)          IF ERROR = 0 THEN OTHER STRANGE
         BNE   ERRPARSE               ERROR FROM PARSE
         LA    R1,FSTRING            SET FUNCTION FOR PARSE
         ST    R1,PARSEINP+8         ONLY SCAN FOR STRING
         AR    R4,R5
         LA    R4,2(,R4)             R4 POINTS TO NEXT PARSE STRING
         B     SCANKEYW              LOOP BACK
COMMACC  LA    R11,RC00              SET ERETIRNO CODE
         B     SYSIQUIT
SYSIQUIT STH   R11,EIRETCOD          SAVE IN DFDSS PARM BLOCK
         L     R13,SAVESYSI+4        RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R0,R12,20(R13)        RESTORE REGISTERS
         BR    R14                   AND RETURN
* ERROR EXIT POINTS
ERRKEYW  L     R1,4(,R9)             GET WTO FLAG
         LTR   R1,R1                 IF FLAG ZEROR THEN INSERT WTO
         BZ    INSWTO
         XR    R1,R1                 RESET WTO FLAG
         ST    R1,4(,R9)
         ICM   R2,B'1111',EIRECPTR   GET RECORD POINTER
         ICM   R3,B'1111',EIRECLEN   GET RECORD LENGTH
         MVI   COMMAND,C' '          INIT COMMAND WITH BLANK
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         MVC   COMMAND(L'ARROW),ARROW
         BCTR  R3,0                  FOR EX INSTR
         EX    R3,MVCARROW           MOV SYSIN DATA AFTER ARROW
         EX    R3,MVCSYSIN           REPLACE SYSIN, LENGTH UNCHANGED
         LA    R11,RC04              TELL DFDSS ABOUT REPLACE
         B     SYSIQUIT              AND LEAVE
INSWTO   LA    R1,1(,R1)             SET WTO FLAG
         ST    R1,4(,R9)
         L     R1,8(,R9)             GET ADDRESS OF WTO MSG
         LH    R2,0(,R1)             R2 IS LENGTH
         LA    R1,2(,R1)             R1 POINT TO RECORD
         STCM  R1,B'1111',EIRECPTR   TELL DFDSS ABOUT WTO MSG
         STCM  R2,B'1111',EIRECLEN   TELL DFDSS ABOUT NEW REC LENGTH
         LA    R11,RC08              SET RETURN CODE, ACTIVATE INSERT
         B     SYSIQUIT              AND LEAVE
*  PARSING ERROR, RC WAS NOT 0 OR 4 FROM PARSE
ERRPARSE LR    R3,R15               RC FROM PARSE IN R3
         WTO   'IFFD42A EXTDFDSS, UNEXPECTED RC FROM PARSE, SEE REASON X
               CODE OF ABEND',ROUTCDE=(1,9,11)
         ABEND 1001,REASON=(3),DUMP   ABEND THIS GUY.
         DROP  R10
SAVESYSI DS    18F
ARROW    DC    C'====> '
*   PRIMARY: COM(PRESS) , CONVERT , COP(Y) , COPYD(UMP) , DEF(RAG) ,
*   DUM(P) , PR(INT) , REL(EASE), REST(ORE), PAR(ALLEL)
*   SECONDARY: REN(AME) , RENAMEU(NCONDITIONAL) , RENUNC
*   NOTE: AS DATASETNAMES MAY ALSO CONTAIN PART OF A KEYWORD
*   ALL TYPES OF POSSIBLE OCCURRENCES ARE CHECKED AS LONG AS THE
*   LENGTH DOES NOT EXCEED 8 CHARACTER (=MAX LENGTH DSN QUALIFIER)
PARSEINP DC    A(COMMLGTH)           PARSE PARMETER BLOCK
         DC    A(0)                  TO BE FILLED IN
         DC    A(3)                  REMOVE COMMENT AND FIND STRING
PARSELST DS    0H
COM1     DC    AL2(COM2-COM1-2),C' COM '
COM2     DC    AL2(COM3-COM2-2),C' COMP '
COM3     DC    AL2(COM4-COM3-2),C' COMPR '
COM4     DC    AL2(COM5-COM4-2),C' COMPRE '
COM5     DC    AL2(COM6-COM5-2),C' COMPRES '
COM6     DC    AL2(CONVERT-COM6-2),C' COMPRESS '
CONVERT  DC    AL2(COP1-CONVERT-2),C' CONVERT '
COP1     DC    AL2(COP2-COP1-2),C' COP '
COP2     DC    AL2(COPYD1-COP2-2),C' COPY '
COPYD1   DC    AL2(COPYD2-COPYD1-2),C' COPYD '
COPYD2   DC    AL2(COPYD3-COPYD2-2),C' COPYDU '
COPYD3   DC    AL2(COPYD4-COPYD3-2),C' COPYDUM '
COPYD4   DC    AL2(COPYD5-COPYD4-2),C' COPYDUMP '
COPYD5   DC    AL2(DEF1-COPYD5-2),C' CPYD '
DEF1     DC    AL2(DEF2-DEF1-2),C' DEF '
DEF2     DC    AL2(DEF3-DEF2-2),C' DEFR '
DEF3     DC    AL2(DEF4-DEF3-2),C' DEFRA '
DEF4     DC    AL2(DUM1-DEF4-2),C' DEFRAG '
DUM1     DC    AL2(DUM2-DUM1-2),C' DUM '
DUM2     DC    AL2(PR1-DUM2-2),C' DUMP '
PR1      DC    AL2(PR2-PR1-2),C' PR '
PR2      DC    AL2(PR3-PR2-2),C' PRI '
PR3      DC    AL2(PR4-PR3-2),C' PRIN '
PR4      DC    AL2(PR5-PR4-2),C' PRINT '
PR5      DC    AL2(REL1-PR5-2),C' PRT '
REL1     DC    AL2(REL2-REL1-2),C' REL '
REL2     DC    AL2(REL3-REL2-2),C' RELE '
REL3     DC    AL2(REL4-REL3-2),C' RELEA '
REL4     DC    AL2(REL5-REL4-2),C' RELEAS '
REL5     DC    AL2(REST1-REL5-2),C' RELEASE '
REST1    DC    AL2(REST2-REST1-2),C' REST '
REST2    DC    AL2(REST3-REST2-2),C' RESTO '
REST3    DC    AL2(REST4-REST3-2),C' RESTOR '
REST4    DC    AL2(PAR1-REST4-2),C' RESTORE '
PAR1     DC    AL2(PAR2-PAR1-2),C' PAR '
PAR2     DC    AL2(PAR3-PAR2-2),C' PARA '
PAR3     DC    AL2(PAR4-PAR3-2),C' PARAL '
PAR4     DC    AL2(PAR5-PAR4-2),C' PARALL '
PAR5     DC    AL2(PAR6-PAR5-2),C' PARALLE '
PAR6     DC    AL2(REN1-PAR6-2),C' PARALLEL '
REN1     DC    AL2(REN2-REN1-2),C' REN('
REN2     DC    AL2(REN3-REN2-2),C' REN '
REN3     DC    AL2(REN4-REN3-2),C' RENA('
REN4     DC    AL2(REN5-REN4-2),C' RENA '
REN5     DC    AL2(REN6-REN5-2),C' RENAM('
REN6     DC    AL2(REN7-REN6-2),C' RENAM '
REN7     DC    AL2(REN8-REN7-2),C' RENAME('
REN8     DC    AL2(RENAMEU1-REN8-2),C' RENAME '
RENAMEU1 DC    AL2(RENAMEU2-RENAMEU1-2),C' RENAMEU('
RENAMEU2 DC    AL2(RENAMEU3-RENAMEU2-2),C' RENAMEU '
RENAMEU3 DC    AL2(RENAMEU4-RENAMEU3-2),C' RENAMEUN('
RENAMEU4 DC    AL2(RENAMEU5-RENAMEU4-2),C' RENAMEUN '
RENAMEU5 DC    AL2(RENUNC1-RENAMEU5-2),C' RENAMEUNC'
RENUNC1  DC    AL2(RENUNC2-RENUNC1-2),C' RENUNC('
RENUNC2  DC    AL2(ENDLST-RENUNC2-2),C' RENUNC '
ENDLST   DC    AL2(0)
         DS    0F                    ALIGN FULL WORD
COMMLGTH DS    AL2                   COMMAND BUFFER LENGTH
COMMAND  DS    CL256                 COMMAND BUFFER
* EXECUTE INSTRUNCTIONS
* MVCCMD: MAKE SURE THAT FIRST CHARACTER IS BLANK
*         THAT'S WHY COMMAND+1 IS IN THIS INSTRUCTION
*         THEREFORE THE SYSIN STRING WILL ALWAYS START WITH
*         AT LEAST ONE BLANK SO THAT THE PARSING FOR KEYWORD WILL WORK
MVCCMD   MVC   COMMAND+1(0),0(R2)      MOVE INSTR FROM EX
MVCARROW MVC   COMMAND+L'ARROW(0),0(R2)
MVCSYSIN MVC   0(0,R2),COMMAND
* 3. DSNVPROC
* FUNCTION: PROCESS DATASET CURRENTLY AT HAND  INPUT: R1 PTR TO ADREIB
DSNVPROC SAVE  (14,12),,DSNVPROC_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING DSNVPROC,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVEDSNV+4        SAVE R13 IN PROG AREA
         LA    R14,SAVEDSNV
         ST    R14,8(R13)            STORE ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         LA    R11,RC00              SET RETURN CODE
         LR    R10,R1
         USING ADREIB,R10            SET UP ADDRESSABILITY TO DFDSS
         ICM   R9,B'1111',EIUSEPTR   GET ADDRESS OF USER AREA
         ICM   R1,B'1111',EIRECPTR   GET ADDRESS OF EIREC21 DATA AREA
         USING EIREC21,R1            SET UP ADDRESSABILITY INTO EIREC21
         MVC   DSN1(L'DSN1),BLANK    PRIME DSN1 FLD
         MVC   PFX1(L'PFX1),BLANK    PRIME PFX1 FLD
         MVC   DSN1(L'EI21DSN),EI21DSN  GET DATASET NAME
         L     R8,16(,R9)            R8 = ADDRESS OF PFX (IF ANY)
         LTR   R8,R8                 IF ZERO THEN NO RENAME FUNCTION
         BNZ   RENAME
         MVC   DSNSCR(L'EI21DSN),EI21DSN  FILL IN  DATASET NAME
         MVC   DSNNSCR(L'EI21DSN),EI21DSN  FILL IN  DATASET NAME
         DROP  R1
         B     IDC
RENAME   DS    0H
*  1 DETERMINE REAL LENGTH OF PFX (EXL SPACES)
         MVC   PFX1(8),0(R8)         DETERMINE REAL LENGTH PFX
         LA    R1,PPFX               R1 = INPUT FOR PARSE
         L     R15,=A(PARSE)         PARSE ROUTINE
         BASR  R14,R15                AND CALL THIS ROUTINE
         LTR   R15,R15
         BNZ   ERRPFX
         LA    R2,PFX1
         SR    R0,R2                 R0=LENGTH PFX
         LR    R8,R0                 SAVE IN R8
*  2 DETERMINE REAL LENGTH OF DSN (EXL SPACES)
         LA    R1,PDSN1              R1 = INPUT FOR PARSE
         L     R15,=A(PARSE)         PARSE ROUTINE
         BASR  R14,R15                AND CALL THIS ROUTINE
         LTR   R15,R15
         BNZ   ERRDSN1
         LA    R2,DSN1
         SR    R0,R2                 R0=LENGTH DSN
         LR    R7,R0                 SAVE IN R7
*  3 DETERMINE REAL LENGTH OF 1ST QUALIFIER
         LA    R1,PDSN2              R1 = INPUT FOR PARSE
         L     R15,=A(PARSE)         PARSE ROUTINE
         BASR  R14,R15                AND CALL THIS ROUTINE
         LTR   R15,R15
         BZ    QUAL                   NOT FOUND THEN 1 QUALIFIER DSN
NOQUAL   DS    0H                     SINGLE QUALIFIER DSN
         MVC   DSNSCR(L'DSNSCR),BLANK  PRIME DSNSCR FLD
         MVC   DSNSCR(L'PFX1),PFX1     PRIME DSNSCR FLD
         MVC   DSNNSCR(L'DSNNSCR),DSNSCR AND COPY DSNNSCR FLD TOO
         B     IDC                   AND TRY TO DELETE ENTRY
QUAL     LA    R2,DSN1
         LR    R5,R0                 SAVE START OF '.' IN R5
         SR    R0,R2                 R0=LENGTH 1ST QUALIFIER
         SR    R7,R0                 R7 = LENGTH OF DSN EXCL 1ST QUAL.
         MVC   DSNSCR(L'DSNSCR),BLANK  PRIME DSNSCR FLD
         MVC   DSNSCR(L'PFX1),PFX1     PRIME DSNSCR FLD
         LA    R2,DSNSCR
         AR    R2,R8                 R2 POINT AFTER PFX
         BCTR  R7,0                  FOR EX INSTR.
         LTR   R7,R7                 CHECK IF ZERO, SHOULD NOT OCCUR
         BZ    ERRMVC
         EX    R7,MVCREMDS           MOVE REST OF DATASET
         MVC   DSNNSCR(L'DSNNSCR),DSNSCR AND COPY DSNNSCR FLD TOO
*  EXECUTE IDCAMS NOW
*  FIRST TRY TO DELETE CATALOG AND VTOC ENTRY, IF NOT SUCCESSFUL
*  DELETE ONLY THE ENTRY
IDC      LA    R1,SCR@               R1 = INPUT FOR IFFIDCAM
         L     R15,=A(IFFIDCAM)      CALL IDCAMS ROUTINE
         BASR  R14,R15                AND GO
         LTR   R15,R15
         BZ    DSNVQUIT              OK?
         LA    R1,NSCR@              R1 = INPUT FOR IFFIDCAM
         L     R15,=A(IFFIDCAM)      CALL IDCAMS ROUTINE
         BASR  R14,R15                AND GO
         LTR   R15,R15
         BZ    DSNVQUIT              OK?
DSNVQUIT STH   R11,EIRETCOD          SAVE IN DFDSS PARM BLOCK
         L     R13,SAVEDSNV+4        RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R0,R12,20(R13)        RESTORE REGISTERS
         BR    R14                   AND RETURN
* ERROR EXIT POINTS
ERRPFX   DS    0H
ERRDSN1  DS    0H
ERRMVC   DS    0H
         WTO   'IFFD43A EXTDFDSS, ERROR DURING DATASET CONSTRUCT',     X
               ROUTCDE=(1,9,11)
         ABEND 1002,DUMP             ABEND THIS GUY.
         DROP  R10
* EX INSTRUCTIONS
MVCREMDS MVC   0(0,R2),0(R5)
SAVEDSNV DS    18F
PDSN1    DC    A(DSN)
         DC    A(BLC)
         DC    A(2)
PDSN2    DC    A(DSN)
         DC    A(DOT)
         DC    A(2)
PPFX     DC    A(PFX)
         DC    A(BLC)
         DC    A(2)
BLC      DC    AL2(1),C' '
DOT      DC    AL2(1),C'.'
DSN      DC    AL2(L'DSN1)
DSN1     DC    CL45' '
PFX      DC    AL2(L'PFX1)
PFX1     DC    CL9' '
BLANK    DC    CL80' '
SCR@     DC    A(SCR)
NSCR@    DC    A(NSCR)
SCR      DC    AL2(LSCR)
         DC    C'  DEL '
DSNSCR   DS    CL45
         DC    C'  SCR'
LSCR     EQU   *-SCR-2
NSCR     DC    AL2(LNSCR)
         DC    C'  DEL '
DSNNSCR  DS    CL45
         DC    C'  NSCR'
LNSCR    EQU   *-NSCR-2
*   DSECTS
         ADREID0                     MACRO TO EIDB BLOCK
         ADRUFO                      MACRO TO UFO BLOCK
         END


SUBROUTINES

Two subroutines are also supplied with the code:

1      IFFIDCAM - this program can also be used as a stand-
      alone program. It accepts an 80-byte maximum PARM
      card, to be passed to IDCAMS; this eliminates the need for
      SYSIN data (useful in JES procedures).

2      PARSE - this program is used to remove any comment
      string (/*..*/) and/or scan through the record for a
      keyword. It is called in IFFDFDSS and EXTDFDSS.

IFFIDCAM source code

* DESCRIPTION: THIS ROUTINE PASSES THE INPUT PARM CARD TO IDCAMS
* INPUT (REGISTERS) =
*  R1       =  ADDRESS TO A PARM FIELD
*                     .---------.     .----.-------------------.
*              R1 --> | ADDRESS | --> | L  |  80 BYTE COMMAND  |
*                     .---------.     .----.-------------------.
IFFIDCAM CSECT                     CSECT NAME DECLARED
IFFIDCAM AMODE 31
IFFIDCAM RMODE 24
*   RETURN CODES
RC00     EQU   00                   ALL SUCCESSFUL
RC04     EQU   04
RC128    EQU   128
BEGIN    SAVE  (14,12),,IFFIDCAM_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING IFFIDCAM,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVEMAIN+4        SAVE R13 IN PROG SAVEMAIN AREA
         LA    R14,SAVEMAIN
         ST    R14,8(R13)            STORE SAVEMAIN ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         L     R2,0(,R1)             GET PARM ADDRESS
         LH    R3,0(,R2)             GET PARM LENGTH
         LA    R2,2(,R2)             POINT R2 AT START OF COMMAND
         LTR   R3,R3                 IF LENGTH=0 THEN ERROR
         BZ    ERRPLNG
         C     R3,MAXPLNG            COMMAND > 80
         BH    ERRPLNG               YES, THEN ERROR
         MVI   COMMAND,C' '          INIT COMMAND WITH BLANK
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         BCTR  R3,0                  DECREMENT FOR EX
         EX    R3,MVCCMD             EXECUTE
         OC    COMMAND(L'COMMAND),BLANKS  MAKE UPPERCASE
         LINK  EP=IDCAMS,                                              X
               PARAM=(OPTION,DDNAME,PAGE,IOLIST),                      X
               VL=1
         LR R11,R15                  SAVE RETURN CODE IN R11
RETMAIN  L     R13,SAVEMAIN+4        RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R0,R12,20(R13)        RESTORE REGISTERS
         BR    R14                   RETURN TO CALLER
*  EXECUTE INSTRUCTIONS
MVCCMD   MVC   COMMAND(0),0(R2)      MOVE INSTR FROM EX
*     ERROR EXIT POINTS
ERRPLNG  WTO   'IFF500A IFFIDCAM, BAD/MISSING INPUT PARM, COMMAND',    X
               ROUTCDE=(1,9,11)
         LA    R11,RC128             SET RETURN CODE
         B     RETMAIN               AND GET OUT
*** USER I/O ROUTINE
*   FUNCTION: PROVIDES QSAM OPEN/GET/CLOSE EQUIVALENT FUNCTIONS
*             HOWEVER INSTEAD OF ACCESSING A REAL DATASET IT
*             USES THE BUFFER SUPPLIED BY THE IFFIDCAM FIELD PARM
*             TO BE PASSED TO IDCAMS.
*    INPUT :  R1  POINTS TO PARM BLOCK, SEE MANUAL SC26-4562
*                 AMS FOR INTEGRATED CATALOG FACILITY
*    OUTPUT:  RETURN CODE IN R15:
*             00:  FUNCTION GET/OPEN/CLOSE OK
*             04:  GET EOF DETECTED.
*             WHEN GET FUNCTION REQUESTED THE INPUT PARMLIST IS
*             UPDATED WITH ADDRESS OF BUFFER AND LENGTH.
*    NOTE  : THIS ROUTINE IS CALLED FROM WITHIN IDCAMS NOT BY THE
***          PROCEDURE ABOVE.
*  INTERNAL EQUATES
OPEN     EQU    X'00'                QSAM OPEN FLAG INDICATOR
CLOSE    EQU    X'04'                QSAM CLOSE FLAG INDICATOR
GET      EQU    X'08'                QSAM GET FLAG INDICATOR
PUT      EQU    X'0C'                QSAM PUT FLAG INDICATOR
EOFIND   EQU    01                   END OF FILE FLAG INDICATOR
IDCIORTN SAVE  (14,12),,IDCIORTN_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING IDCIORTN,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVERTN+4         SAVE R13 IN PROG SAVERTN AREA
         LA    R14,SAVERTN
         ST    R14,8(R13)            STORE SAVERTN ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         L     R3,4(,R1)             R3 = PTR TO IOFLAGS
         TM    0(R3),GET             IS IT GET ?
         BNO   OPENCLOS              NO THEN CLOSE/OPEN
         L     R4,EOFFLAG            CHECK IF WE DID A GET
         LTR   R4,R4                 IF ZERO THEN PERFORM GET
         BNZ   EOF                   ELSE RETURN EOF
         LA    R4,EOFIND             SET EOFFLAG, TO PREVENT NEXT
         ST    R4,EOFFLAG              GET
         LA    R4,COMMAND            R4, = PTR TO COMMAND RECORD
         L     R6,8(,R1)             R6 POINTS TO IOINFO
         ST    R4,0(,R6)             STORE RECORD PTR
         LA    R4,L'COMMAND
         ST    R4,4(,R6)             STORE CARD LENGTH
         LA    R11,RC00              SET RETURN CODE
         B     RETINR                AND RETURN
EOF      LA    R11,RC04              SET RETURN CODE
         B     RETINR                AND RETURN
OPENCLOS XR    R4,R4                 RESET EOFFLAG, SEE NEXT GET
         ST    R4,EOFFLAG             WILL PROCEED
         LA    R11,RC00              SET RETURN CODE
         B     RETINR                AND RETURN
RETINR   L     R13,SAVERTN+4         RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R0,R12,20(R13)        RESTORE REGISTERS
         BR    R14                   RETURN TO CALLER
*  DATA AREAS
SAVERTN  DS    18F
EOFFLAG  DS    1F                    END OF FILE FLAG
*  DATA AREA FOR MAIN ROUTINE
         LTORG
SAVEMAIN DS    18F                   SAVE AREA FOR MAIN PGM
COMMAND  DS    CL80                  COMMAND BUFFER
MAXPLNG  DC    A(L'COMMAND)
BLANKS   DC    CL(L'COMMAND)' '
*  ARGUMENT LIST FOR LINK
OPTION   DC    H'0'                  NO DIAGNOSTIC OR PRINT CHAIN OPTION
DDNAME   DC    H'0'                  DEFAULT SYSIN AND SYSPRINT ASSUMED
PAGE     DC    H'0'                  DEFAULT PAGE NUMBER FOR SYSOUT
IOLIST   DC    F'1'                  INDICATES # OF SETS
         DC    A(DDCARD)             PTR TO DDCARD
         DC    A(IDCIORTN)           PTR TO OUR I/O ROUTINE
         DC    F'0'                  PTR USER DATA
DDCARD   DC    CL10'DDSYSIN'
         END

PARSE source code

* DESCRIPTION: THIS ROUTINE IS DESIGNED TO RUN AS A SUBROUTINE OF
*              ANOTHER PROGRAM THAT REQUIRES PARSING FUNCTIONS
*              DEPENDING UPON THE INPUT IT MAY:
*              1. REMOVE ALL COMMENTS ENCLOSED BETWEEN /*..*/
*              2. FIND THE LOCATION OF AN INPUT STRING
*                 IN THE INPUT RECORD
* INPUT (REGISTERS) =
*  R1       =  ADDRESS TO A PARM FIELD
*                     .---------.     .--------.-------------------.
*              R1 --> | ADDRESS | --> | LENGTH |<= 256 BYTE RECORD |
*                     .---------.     .--------.-------------------.
*                     | ADDRESS | --> | LENGTH |<= 256 BYTE STRING |
*                     .-------.-.     .--------.-------------------.
*                     | ADDRESS |
*                     .-------.-.
*                              \......FUNCTION BYTE
* FUNCTION BYTE
*   0000000
*   ||||||\..... 1 = RETURN RECORD WITH /*..*/ REMOVED
*   |||||\.......1 = FIND STRING, IF FOUND: R0=START R1=END IN RECORD
PARSE CSECT                        CSECT NAME DECLARED
PARSE AMODE 31
PARSE RMODE 24
*  CONSTANT EQUATES
INVPTR   EQU  X'00'                INVALID RETURN POINTER VALUE
RCOMMNT  EQU  B'00000001'
FSTRING  EQU  B'00000010'
*   RETURN CODES
RC00     EQU   00                   ALL SUCCESSFUL
RC04     EQU   04                   STRING NOT FOUND
RC16     EQU   16                   FUNCTION BYTE ERROR
RC20     EQU   20                   LENGTH ERROR
BEGIN    SAVE  (14,12),,PARSE_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING PARSE,R12             SET UP BASE ADDRESSABILITY
         ST    R13,SAVEPARS+4        SAVE R13 IN PROG SAVEPARS AREA
         LA    R14,SAVEPARS
         ST    R14,8(R13)            STORE SAVEPARS ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         ST    R1,INPUT              SAVE INPUT PTR
         L     R3,0(,R1)             R3 POINT TO RECORD LENGTH
         LH    R4,0(,R3)             R4 = LENGTH RECORD
         LA    R3,2(,R3)             R3 POINTS TO START OF RECORD
         L     R5,4(,R1)             R5 POINTS TO STRING LENGTH
         LH    R6,0(,R5)             R6 = LENGTH STRING
         LA    R5,2(,R5)             R5 POINTS TO START OF STRING
         L     R7,8(,R1)             R7 IS FUNCTION BYTE
         TM    11(R1),RCOMMNT+FSTRING ANY FUNCTION BIT SET ?
         BZ    ERRFUNC               NO THEN ERROR
*  CHECK IF LENGTH RECORD OR LENGTH STRING EQUAL ZERO
         LTR   R4,R4                 TEST LENGTH RECORD
         BZ    ERRLNGTH              IF ZERO THEN ERROR
         C     R4,=A(L'OUTREC)       TEST LENGTH RECORD > 256
         BH    ERRLNGTH              YES THEN ERROR
         TM    11(R1),RCOMMNT        REMOVE COMMENT FROM STRING ?
         BNO   SKIPCOMM              SKIP REMOVE COMMENT
*  REMOVE ANY COMMENT STRING STARTING WITH /* AND ENDING WITH */
*  IF RECORD ENDS WITH /*.... IT WILL ALSO BE REMOVED
         MVI   INREC,C' '            INIT INREC WITH BLANK
         MVC   INREC+1(L'INREC-1),INREC
         BCTR  R4,0                  FOR EX INSTRUCTION
         EX    R4,MVCINREC           COPY RECORD INTO INREC
         LA    R4,1(,R4)             CORRECT R4 BACK
         LA    R3,INREC              WORK FURTHER WITH INREC
         MVI   OUTREC,C' '           INIT OUTREC WITH BLANK
         MVC   OUTREC+1(L'OUTREC-1),OUTREC
         LR    R5,R4                 R5 IS REMAINING BYTES IN REC
         LA    R7,OUTREC
SSSTR    CLC   0(L'CSSTR,R3),CSSTR   SEARCH FOR /*
         BE    SEISTR                BRANCH IF FOUND, SEARCH FOR */
         MVC   0(1,R7),0(R3)         NOT FOUND THEN COPY
         LA    R3,1(,R3)             ADVANCE POINTER
         LA    R7,1(,R7)             ADVANCE POINTER
         BCT   R5,SSSTR              LOOP BACK IF MORE
         B     ENDCSTR               NO MORE, THEN READY
SEISTR   LA    R3,L'CESTR(,R3)       ADVANCE POINTER BY TWO
         S     R5,=A(L'CESTR)        AND DECREMENT COUNTER BY LENGTH
         BNP   ENDCSTR               TERM WHEN <= 0
SESTR    CLC   0(L'CESTR,R3),CESTR   SEARCH FOR */
         BE    SSISTR                BRANCH IF FOUND
         LA    R3,1(,R3)             ADVANCE POINTER
         BCT   R5,SESTR              LOOP BACK IF MORE
         B     ENDCSTR               NO MORE, THEN READY
SSISTR   LA    R3,L'CESTR(,R3)       ADVANCE POINTER BY TWO
         S     R5,=A(L'CESTR)        AND DECREMENT COUNTER BY LENGTH
         BP    SSSTR                 LOOK FOR MORE /*...*/ STRINGS
*                                    TERM WHEN <= 0
ENDCSTR  L     R1,INPUT              GET INPUT PTR
         L     R3,0(,R1)             R3 POINT TO RECORD LENGTH
         LH    R4,0(,R3)             R4 = LENGTH RECORD
         LA    R3,2(,R3)             R3 POINTS TO START OF RECORD
         L     R5,4(,R1)             R5 POINTS TO STRING LENGTH
         LH    R6,0(,R5)             R6 = LENGTH STRING
         LA    R5,2(,R5)             R5 POINTS TO START OF STRING
         BCTR  R4,0                  STRING BACK TO INPUT DEC FOR EX
         EX    R4,MVCREC             MOVE CLEANED RECORD BACK
         LA    R4,1(,R4)             CORRECT R4 BACK
SKIPCOMM TM    11(R1),FSTRING        SEARCH FOR STRING ?
         BO    SRCHSTR               START SEARCHING FOR STRING
         LA    R0,INVPTR             SET RETURN PTRS TO INVALID
         LA    R1,INVPTR             SET RETURN PTRS TO INVALID
         LA    R11,RC00              SET RETURN CODE TO OK
         B     RETPARS               AND RETURN
SRCHSTR  LTR   R6,R6                 TEST LENGTH STRING
         BZ    ERRLNGTH              IF ZERO THEN ERROR
         C     R6,=A(L'OUTREC)       TEST LENGTH RECORD > 256
         BH    ERRLNGTH              YES THEN ERROR
         SR    R4,R6                 R4 = LENGTH RECORD - LENGTH STRING
         BM    ERRLNGTH              IF R4 < 0 THEN ERROR
         BCTR  R6,0                  DECR LENGTH FOR EX INSTR
STRMATCH EX    R6,CLCSTR             SEARCH FOR STRING
         BE    STRFOUND              BRANCH IF FOUND
         LTR   R4,R4                 CHECK FOR ZERO
         BZ    STRNFND               ZERO AND STRING NOT FOUND
         LA    R3,1(,R3)             ADVANCE POINTER
         BCT   R4,STRMATCH           LOOP BACK IF MORE
STRNFND  LA    R0,INVPTR             SET R0 AND R1 POINTERS
         LA    R1,INVPTR
         LA    R11,RC04
         B     RETPARS               AND RETURN (RC=04)
STRFOUND LA    R6,1(,R6)             CORRECT LENGTH BECAUSE OF BCTR
         LR    R0,R3                 R3 POINTS TO START OF STR IN REC
         LR    R1,R3
         AR    R1,R6                 R1 POINTS TO AFTER STR IN REC
         LA    R11,RC00
RETPARS  L     R13,SAVEPARS+4        RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R2,R12,28(R13)        RESTORE REGISTERS, EXCEPT R0/R1
         BR    R14                   RETURN TO CALLER
*    ERROR EXIT POINTS
ERRFUNC  LA    R0,INVPTR             SET RETURN PTRS TO INVALID
         LA    R1,INVPTR             SET RETURN PTRS TO INVALID
         LA    R11,RC16
         B     RETPARS
ERRLNGTH LA    R0,INVPTR             SET RETURN PTRS TO INVALID
         LA    R1,INVPTR             SET RETURN PTRS TO INVALID
         LA    R11,RC20
         B     RETPARS
*  EX INSTRUCTIONS
MVCINREC MVC   INREC(0),0(R3)
MVCREC   MVC   0(0,R3),OUTREC
CLCSTR   CLC   0(0,R5),0(R3)
         LTORG
CSSTR    DC    C'/*'
CESTR    DC    C'*/'
SAVEPARS DS    18F                   SAVE AREA FOR MAIN PGM
INPUT    DS    1F
INREC    DS    CL256                 KEEP INREC AND SENTINAL NEXT
SENTINAL DC    CL(L'CSSTR)' '        TO EACH OTHER
         DS    1F
OUTREC   DS    CL256
         END

Assembler/link-edit notes

1      IFFDFDSS and PARSE must be assembled and linked into
      a single load module (entry point IFFDFDSS),
      AMODE=31, RMODE=24, AC=1, and reside in an APF-
      authorized dataset.

2      EXTDFDSS, PARSE, and IFFIDCAM must be assembled
      and linked into a single load module (entry point
      EXTDFDSS), AMODE=31, RMODE=24, AC=1, and
      reside in an APF-authorized library accessible by
      IFFDFDSS either through a STEPLIB or LINKLIB.

3      Don't forget to include SYS1.SAMPLIB during the
      assembly of EXTDFDSS to resolve the ADREIDO and
      ADRUFO macros (they are not in the normal macro libraries).


General notes

Environment

The exit is tested under MVS/XA 2.2.3, DFP 2.4, and DFDSS
2.5. One must have DFDSS level set PTFs UN00982,
UN00996, UY62588, UY66682, and UY66685 in place to
make the exits work.


Literature

o      SC26-4389 DFDSS Reference
o      SC26-4562 AMS for Integrated Catalog Facility.

Karel Bastiaansen
MVS Systems Programmer
IFF Nederland BV (The Netherlands)                  c Xephon 1993

