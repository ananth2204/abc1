Deleting NONVSAM datasets
INTRODUCTION
This article describes a job stream and Assembler program to locate and delete
NONVSAM datasets for which the following is true:
1    The NONVSAM dataset is not catalogued (eg it was created with
DISP=(NEW,KEEP)).
2    The NONVSAM dataset is catalogued on a different volume (eg it was created,
although it already existed in the catalog).
ASSEMBLER PROGRAM DESCRIPTION
The Assembler program input files are:
     DDNAME VTOC: DCB=(LRECL=121,RECFM=FB,DSORG=PS)
This file is the output from the IEHLIST utility.
     DDNAME EXCLUDE: DCB=(LRECL=80,RECFM=FB,DSORG=PS)
This file contains fully or partially qualified dataset names that must be
excluded from the search.  Comment cards are denoted by a '*' in column 1, for
example:
     * this is an example
     * following DSN's will be excluded from scratch:
     *     All DNS's starting with "SYS1."
     *     All JES2 generated temp. DSN's starting with "SYS88"
     SYS1.
     SYS88
The Assembler program output is as follows:
     DDNAME SYSPRINT: DCB=(RECFM=FB,DSORG=PS)
This output dataset contains SCRATCH statements ready to be used by the IEHPROGM
utility.
The Assembler program reads a record from the file with the DDNAME VTOC and
checks to ensure that:
¥    The record is not an IEHLIST header record
¥    The DSN in the record is a NONVSAM dataset
¥    The DSN does not (partially) match one of the names in the EXCLUDE file
¥    The DSN is not catalogued at all or it is catalogued on a different volume.
If all statements are true a SCRATCH record is added to the delete list (DDNAME
SYSPRINT).
CLEANDSK CSECT
         STM   R14,R12,12(R13)    * STANDARD OS INTERFACE
         BALR  R12,0              *
         USING BASE,R12           *
BASE     ST    R13,SAVE+4         *
         LA    R13,SAVE           *
         OPEN  (VTOCLST,(INPUT))  * OPEN VTOC LISTING
         OPEN  (PRINTLST,(OUTPUT)) * OPEN SYSPRINT
READVTOC GET   VTOCLST,VTOCDATA   * GET ONE RECORD FROM VTOC LST
         CLC   VTOCFIL,=C'PARTITIONED'   * IS THIS A PO DATASET
         BE    CHECKDSN           * YES, CHECK IS CATALOGUED
         CLC   VTOCFIL,=C'SEQUENTIAL '    * IS THIS A PS DATASET
         BE    CHECKDSN           * YES, CHECK IS CATALOGUED
         CLC   VTOCFIL,=C'NOT DEFINED'    * IS THIS AN UNDEFINED DS
         BE    CHECKDSN           * YES, CHECK IS CATALOGUED
         CLC   VTOCFIL,=C'DIRECT ACC '    * IS THIS A DA DATASET
         BE    CHECKDSN           * YES, CHECK IS CATALOGUED
         B     READVTOC           * ALL OTHER TYPES, SKIP THIS RECORD
*     IF (FIRST CHARACTER IN EXCL LIST = *) THEN
*        SKIP CARD
CHECKDSN OPEN  (EXCLLST,(INPUT))  * EXCLUDE LIST
READEXCL GET   EXCLLST,EXCLREC    * READ A RECORD
         CLI   EXCLREC,C'*'       * IS THIS A COMMENT CARD
         BE    READEXCL           * YES GET NEXT RECORD
*     IF (DSN IN EXCL LIST MATCHES DSN IN VTOCLIST) THEN
*        SKIP FURTHER TESTING
         LA    R3,EXCLREC         * GET START
         LA    R4,EXCLLEN         * MAX LENGTH TO SCAN
RECOMPR  CLI   0(R3),C' '         * IS THIS A SPACE
         BNE   STARTDSN           * NO IT IS THE START OF THE DSN
         LA    R3,1(,R3)          * INCREMENT R3
         BCT   R4,RECOMPR         * COMPARE NEXT CHAR., IF NOT LAST
         B     READEXCL           * EMPTY RECORD, READ NEXT
*     LEADING CHARACTERS ARE SKIPPED NOW REAL CHECK OF DSN
STARTDSN LA    R5,VTOCDSN         * GET START OF VTOC DSN
         LA    R6,DSNLEN          * MAX DATASET NAME LENGTH
COMPDSN  CLC   0(1,R3),0(R5)      * COMPARE EXCLREC(R3),VTOCDSN(R5)
         BNE   CONTIN             * POSSIBLE END OF EXCL DSN
*                                 * OR NO MATCH AT ALL
         CLI   0(R3),C' '         * MATCH EXCL DSN EXACTLY ON VTOC DSN
         BE    MATCHFND           * YES, OKE MATCH IS FOUND
         LA    R5,1(,R5)          * INCREMENT R5
         LA    R3,1(,R3)          * INCREMENT R3
         BCT   R6,COMPDSN         * MAXIMUM DSN LENGTH EXCEEDED
         B     ERROR01            * YES , STOP
         BCT   R4,COMPDSN         * STILL MORE CHARACTERS IN EXCL CARD
         B     MATCHFND           * NO  , THEN WE HAVE A MATCH ASWELL
CONTIN   CLI   0(R3),C' '         * IS THIS A SPACE AGAIN
         BNE   READEXCL           * NO MATCH FOUND, CHECK NEXT CARD
*     ALL CHARACTER OF EXCL DSN MATCH (PART OF) VTOC DSN.
MATCHFND CLOSE EXCLLST            * CLOSE EXCL LIST
         B     READVTOC           * SKIP FURTHER CHECKING.
*     ALL RECORDS SEARCHED
EODEXCL  CLOSE EXCLLST            * CLOSE EXCL LIST
*                                 * NOW CHECK IT IS IN THE CATALOG
*     IF (VTOCDSN NOT IN CATALOG) OR
*        (VTOCVOL ^= VOLSER OF DATASET ACCORDING TO CATALOG) THEN
*         PRINT VTOCVOL AND VTOCDSN
CHECKCAT MVC   DSN,VTOCDSN        * MOVE DSN FROM VTOCLST INTO DSN
         LOCATE CATLOC            * CHECK IF IT IS CATALOGUED
         LTR   R15,R15            * CHECK RETURN CODE FROM LOCATE
         BNZ   NOTINCAT           * NOT FOUND IN CATLOG PRINT DSN
         CLC   CATAREA+6(6),VTOCVOL * IS VOLSER OKE
         BNE   NOTINCAT           * DSN IS IN CAT HOWEVER ON A
*                                 * DIFFERENT VOLUME
         B     READVTOC           * DATASET IS IN CAT, CONTINUE
*     PRINT THAT DATASET NAME AND ITS VOLSER
NOTINCAT MVI   PRTDATA,C' '               * CLEAR SYSPRINT DATA RECORD
         MVC   PRTDATA+1(PRTLEN-1),PRTDATA
         MVC   PRTDATA(SCR1LEN),PRTSCR1   * SCRATCH MESSAGE 1
         MVC   PRTDATA+SCR1LEN(DSNLEN),VTOCDSN    * DATASET NAME
*   INSERT COMMA AFTER DSN
         LA    R3,PRTDATA+SCR1LEN         * GET START
         LA    R4,DSNLEN+1                * MAX LENGTH TO SCAN
NEXTCH   CLI   0(R3),C' '                 * IS THIS A SPACE
         BE    COMMA                      * END OF DSN FOUND ?
         LA    R3,1(,R3)                  * NO, INCREMENT R3
         BCT   R4,NEXTCH                  * COMPARE NEXT CHAR.
         B     ERROR01                    * MAX DSN LENGTH EXCEEDED
COMMA    MVI   0(R3),C','                 * INSERT COMMA
         MVC   PRTDATA+71(1),=C'X'        * CONTINUATION MARK
         PUT   PRINTLST,PRTDATA           * MOVE TO OUTPUT
         MVI   PRTDATA,C' '               * CLEAR SYSPRINT DATA RECORD
         MVC   PRTDATA+1(PRTLEN-1),PRTDATA
         MVC   PRTDATA(SCR2LEN),PRTSCR2   * SCRATCH MESSAGE 2
         MVC   PRTDATA+SCR2LEN(VOLLEN),VTOCVOL    * VOLSER NAME
         PUT   PRINTLST,PRTDATA           * MOVE TO OUTPUT
         B     READVTOC
*  ALL DONE RETURN
EODVTOC  CLOSE VTOCLST            * CLOSE VTOC LIST ALL RECORDS READ
         CLOSE PRINTLST           * CLOSE OUTPUT
         L     R13,SAVE+4         * FETCH LAST SAVE AREA
         RETURN (14,12),RC=0      * RESTORE REGISTERS
*   ERROR ROUTINES
ERROR01  CLOSE VTOCLST            * CLOSE VTOC LIST ALL RECORDS READ
         CLOSE EXCLLST            * CLOSE EXCL LIST
         MVI   PRTDATA,C' '       * CLEAR SYSPRINT DATA RECORD
         MVC   PRTDATA+1(PRTLEN-1),PRTDATA
         MVC   PRTDATA(40),=C'DSN LENGTH IN EXCL. LIST > 44 CHARACTERS'
         PUT   PRINTLST,PRTDATA   * MOVE TO OUTPUT
         MVC   PRTDATA,EXCLREC
         PUT   PRINTLST,PRTDATA   * MOVE TO OUTPUT
         CLOSE PRINTLST           * CLOSE OUTPUT
         L     R13,SAVE+4         * FETCH LAST SAVE AREA
         RETURN (14,12),RC=16     * RESTORE REGISTERS
*   DATA STORAGE DEFINITIONS
SAVE     DS    18F
VTOCLST  DCB  DSORG=PS,DDNAME=VTOC,MACRF=GM,EODAD=EODVTOC
STVTOC   EQU  *
VTOCDATA DS   0CL121         * VTOC LISTING INPUT DATA FIELD
VTOCPRT  DS   CL1            * PRINT CONTROL CHARACTER
VTOCDSN  DS   CL44           * FULLY QUALIFIED DSN
VTOCRB1  DS   CL20           * NOT USED DATA (CREATE PURGE)
VTOCFIL  DS   CL11           * DATASET TYPE (VSAM/PARTITIONED)
VTOCRB2  DS   CL13           * RUBBISH TOO
STVVOL   EQU  *
VTOCVOL  DS   CL6            * VOLUME SERIAL NAME
VOLLEN   EQU  *-STVVOL
VTOCRB3  DS   CL26           * RUBBISH TOO
VTOCLNG  EQU  *-STVTOC
EXCLLST  DCB  DSORG=PS,DDNAME=EXCLUDE,MACRF=GM,EODAD=EODEXCL
STEXCL   EQU  *
EXCLREC  DS   CL80           * 80 BYTE RECORD
EXCLLEN  EQU  *-STEXCL
CATLOC   CAMLST NAME,DSN,,CATAREA  * FIND CATALOG ENTRY FOR DSN
         DS   0D                   * ALIGN ON DOUBLE WORD BOUNDARY
CATAREA  DS   CL265                * CATALOG WORK AREA
STDSN    EQU  *
DSN      DS   CL44                 * DATASET NAME ENTRY
DSNLEN   EQU  *-STDSN
PRINTLST DCB  DSORG=PS,DDNAME=SYSPRINT,MACRF=PM
STPRT    EQU  *
PRTDATA  DS   CL80           * OUTPUT RECORD
PRTLEN   EQU  *-STPRT
STSCR1   EQU  *
PRTSCR1  DC   C'  SCRATCH DSNAME='  * SCRATCH MSG 1
SCR1LEN  EQU  *-STSCR1              * LENGTH OF MSG
STSCR2   EQU  *
PRTSCR2  DC   C'               VOL=3380='        * SCRATCH MSG 2
SCR2LEN  EQU  *-STSCR2              * LENGTH OF MSG
         END  CLEANDSK
SAMPLE JOB STREAM
//JOBCARD  JOB
//*
//STEP1    EXEC PGM=IEHLIST
//VOL1     DD UNIT=3380,VOL=SER=vvvvvv,DISP=SHR
//SYSPRINT DD DSN=&&VTOC,DISP=(NEW,PASS),
//            UNIT=SYSDA,SPACE(TRK,(1,1)),
//            DCB=(LRECL=121,RECFM=FB,BLKSIZE=1210)
//SYSIN    DD *
    LISTVTOC VOL=3380=vvvvvv
/*
//*
//STEP2    EXEC PGM=CLEANDSK
//STEPLIB  DD DSN=STEPLIB.DSN,DISP=SHR
//VTOC     DD DSN=&&VTOC,DISP=OLD
//EXCLUDE  DD DSN=EXCLUDE.LIST,DISP=OLD
//SYSPRINT DD DSN=RESULT.LIST,DISP=(NEW,CATLG),
//            UNIT=SYSDA,SPACE(TRK,(1,1)),
//            DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120)
//*
//STEP3    EXEC PGM=IEHPROGM
//vvvvvv   DD UNIT=3380,VOL=SER=vvvvvv,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DSN=RESULT.LIST,
//            DISP=SHR
FINAL REMARKS
1    As MVS catalogues the new datasets at the end of job or job step, the above
job stream must not be executed while on-line systems (eg TSO) or other batch
work is active.
2    If datasets are secured through a security package, the above job must be
authorised to delete any dataset.

K Bastiaansen
MVS Systems Programmer
IFF Nederland BV (The Netherlands) © Xephon 1988






















































