Macro-driven data formatting


#FMT MACRO

         MACRO
&LABEL   #FMT  &MF=DATA,&ROUTCDE=,&DESC=
         GBLA  &FIRST                  FIRST TIME SWITCH
         GBLA  &MFL                    LIST FORM GENERATED SWITCH
         GBLA  &RLEN                   LENGTH FIELD RETURNED FROM #FMT1
         GBLC  &EXIT                   EXIT SWITCH SET FROM #FMT1
         GBLC  &R(3)                   FIELDS RETURNED FROM #FMT1
         LCLA  &AM                     PREFIX FOR LABEL GENERATION
         LCLA  &CNTR,&J                LOOP COUNTER/ROUT-DESC INDEX
         LCLA  &I,&L1,&L2              SYSLIST INDEX/LEN1/LEN2
         LCLA  &F1,&F2,&F3             OFFSET1/OFFSET2/OFFSET3
         LCLA  &OFFSETA                ARITHMETIC INSTRUCTION OFFSET
         LCLA  &OFFSW                  OFFSET PROCESSING SWITCH
         LCLB  &B(16)                  BIT FLAGS FOR ROUT-DESC CODES
         LCLC  &CM                     SUFFIX FOR LABEL GENERATION
         LCLC  &OFFSETC                CHARACTER VERSION OF &OFFSETA
         LCLC  &REST                   REST OF &X FOR INNER MACRO
         LCLC  &SPNUM,&SPTYP           SPACES NUMBER/TYPE
         LCLC  &T1                     SYSLIST(I) CONSTANT TYPE
         LCLC  &X                      SYSLIST(I) SUBSTITUTE
.**********************************************************************
         AIF   ('&MF' EQ 'LIST' OR '&MF' EQ 'DATA' OR                  X
               '&MF' EQ 'TPUT' OR '&MF' EQ 'WTO').MFOK MF VALID
         MNOTE 8,'&MF IS AN INVALID MF= VALUE' ELSE MF VALUE INVALID
         MEXIT                         MACRO EXIT
.MFOK    AIF   ('&MF' EQ 'LIST').MFL   CHECK IF MF=LIST NOT DONE YET
         AIF   (&FIRST EQ 1).SKIP1ST   IF INITIALIZATION ALREADY DONE
         MVC   ##TRTAB,=C' 0123456789ABCDEF' INIT TRANS TABLE ONLY ONCE
&FIRST   SETA  1                       TURN ON FIRST TIME SWITCH
.SKIP1ST AIF   ('&LABEL' EQ '').NOLAB  WAS LABEL ASKED FOR
&LABEL   DS    0H                      MACRO EXPANSION REFERENCE LABEL
.NOLAB   ANOP                          NO LABEL REQUESTED
&F1      SETA  0                       SET OFFSET TO 0
&CM      SETC  '&SYSNDX'               SET LABEL SUFFIX
.LSTLOOP ANOP                          HERE IF MORE SUBPARMS IN SYSLIST
&OFFSW   SETA  0                       TURN OFF OFFSET-REG SWITCH
&I       SETA  &I+1                    SET SYSLIST INDEX (INITIAL=1)
&X       SETC  '&SYSLIST(&I)'          USE &X TO REFER TO &SYSLIST(&I)
&T1      SETC  'U'                     TURN OFF TYPE SWITCH(TO UNKNOWN)
         AIF   (T'&X EQ 'U').DOCHECK   IS SYSLIST(I) TYPE UNDEFINED
&T1      SETC  T'&X                    GET SYSLIST(I) TYPE
&L1      SETA  L'&X                    GET SYSLIST(I) LENGTH
.DOCHECK AIF   (&I GT 1).SKIPCLR       IF NOT SYSLIST(1)-FIRST TIME
         MVI   ##MSGTXT,X'40'            INIT 1ST BYTE OF MSG EACH PASS
         MVC   ##MSGTXT+1(L'##MSGTXT-1),##MSGTXT    PROPAGATE BYTE THRU
.**********************************************************************
.SKIPCLR AIF   ('&X' EQ '').NULLVAL                          NULL VALUE
         AIF   ('&X'(1,1) EQ '''' AND '&X'(K'&X,1) EQ '''').LITERAL LIT
         AIF   ('&X'(1,1) EQ '(' AND '&X'(K'&X,1) EQ ')').REGISTR   REG
         AIF   ('&X'(1,1) GE '0' AND '&X'(1,1) LE '9' AND              X
               '&X'(K'&X,1) EQ ')').OFFREG                   OFFSET-REG
         AIF   ('&X'(1,1) GE 'A' AND '&X'(1,1) LE 'Z' AND              X
               '&X'(K'&X,1) EQ ')').OFFREG             LABEL OFFSET-REG
         AIF   ('&X'(1,1) GE '0' AND '&X'(1,1) LE '9' AND              X
               '&X'(K'&X,1) EQ 'X' OR '&X'(K'&X,1) EQ 'C').SPACES SPACE
.CHKTYPE AIF   ('&T1' EQ 'C').CHRACTR                         CHARACTER
         AIF   ('&T1' EQ 'H').HALFWRD                          HALFWORD
         AIF   ('&T1' EQ 'F').FULLWRD                          FULLWORD
         AIF   ('&T1' EQ 'P').PACKDEC                    PACKED DECIMAL
         AIF   ('&T1' EQ 'Z').ZONEDEC                     ZONED DECIMAL
         AIF   ('&T1' EQ 'A').ADCON                               ADCON
         AIF   ('&T1' EQ 'B').BINARY                             BINARY
         AIF   ('&T1' EQ 'X').HEXADEC                       HEXADECIMAL
         AIF   ('&T1' EQ '#').DUMP                                 DUMP
         MNOTE 8,'&X IS AN UNRECOGNIZABLE TYPE "&T1" AND/OR AN UNDEFINEX
               D LABEL'
         MEXIT                         MACRO EXIT
.**********************************************************************
.LITERAL ANOP                          LITERAL CONSTANT
&L1      SETA  K'&X-2                  GET OPERAND LEN. MINUS QUOTES
         AIF   (&L1 GE 1 AND &L1 LE 125).LITLOK IS LENGTH OK
         MNOTE 8,'&L1 IS INVALID LENGTH FOR A LITERAL-RANGE IS 1-125'
         MEXIT                         MACRO EXIT
.LITLOK  AIF   (&L1 GT 1).LITMVC       IF GT 1 BYTE LITERAL, USE MVC
         MVI   ##MSGTXT+&F1.,C&X                    MOVE LITERAL TO MSG
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.LITMVC  ANOP                          LENGTH IS WITHIN RANGE
         MVC   ##MSGTXT+&F1.(&L1),=C&X              MOVE LITERAL TO MSG
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.CHRACTR ANOP                          CHARACTER
         AIF   (&L1 GE 1 AND &L1 LE 125).CHARLOK IS LENGTH OK
         MNOTE 8,'&L1 IS INVALID LENGTH FOR TYPE &R(3)-RANGE IS 1-125'
         MEXIT                         MACRO EXIT
.CHARLOK ANOP                          LENGTH IS WITHIN RANGE
         MVC   ##MSGTXT+&F1.(&L1),&X                  MOVE CHARS TO MSG
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.HALFWRD ANOP                          HALFWORD
         LH    1,&X                         LOAD HALFWORD INTO REGISTER
         CVD   1,##DWORD                             CONVERT TO DECIMAL
         AGO   .FMTHFP                 GO PROCESS NUMBER
.**********************************************************************
.FULLWRD ANOP                          FULLWORD
         L     1,&X                         LOAD FULLWORD INTO REGISTER
         CVD   1,##DWORD                             CONVERT TO DECIMAL
         AGO   .FMTHFP                 GO PROCESS NUMBER
.**********************************************************************
.PACKDEC ANOP                          PACKED DECIMAL
         ZAP   ##DWORD,&X                       ZAP VALUE INTO WORKAREA
         AGO   .FMTHFP                 GO PROCESS NUMBER
.**********************************************************************
.ZONEDEC ANOP                          ZONED DECIMAL
         AIF   (&L1 GE 1 AND &L1 LE 125).ZDECLOK IS LENGTH OK
         MNOTE 8,'&L1 IS INVALID LENGTH FOR TYPE &R(3)-RANGE IS 1-125'
         MEXIT                         MACRO EXIT
.ZDECLOK ANOP                          LENGTH IS WITHIN RANGE
         MVC   ##MSGTXT+&F1.(&L1),&X                  MOVE CHARS TO MSG
         OI    ##MSGTXT+&F1+&L1-1,X'F0'        MAKE CHARACTER PRINTABLE
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.OFFREG  ANOP                          OFFSET(LENGTH,REG,TYPE)  OR
.*                                     OFFSET(LENGTH,LABEL,TYPE)
&L1      SETA  K'&X                    GET SYSLIST(I) LABEL LENGTH
&L2      SETA  1                       ASSUME OFFSET FIELD = 1 BYTE
         AIF   ('&X'(2,1) EQ '(').OFFSET1 1-BYTE OFFSET
&L2      SETA  2                       ASSUME OFFSET FIELD = 2 BYTES
         AIF   ('&X'(3,1) EQ '(').OFFSET1 2-BYTE OFFSET
&L2      SETA  3                       ASSUME OFFSET FIELD = 3 BYTES
         AIF   ('&X'(4,1) EQ '(').OFFSET1 3-BYTE OFFSET
&L2      SETA  4                       ASSUME OFFSET FIELD = 4 BYTES
         AIF   ('&X'(5,1) EQ '(').OFFSET1 4-BYTE OFFSET
         MNOTE 8,'CANNOT DECIPHER POSSIBLE OFFSET(LENGTH,REGISTER) SPECX
               IFICATION'
         MEXIT                         MACRO EXIT
.OFFSET1 ANOP                          GOT # OF CHARACTERS FOR OFFSET
&OFFSETC SETC  '&X'(1,&L2)             GET SPECIFIED OFFSET IN CHAR
         AIF   (T'&OFFSETC EQ 'N').OFFNUM IS OFFSET NUMERIC
         MNOTE 8,'&OFFSETC IS NOT A NUMERIC OFFSET VALUE'
         MEXIT                         MACRO EXIT
.OFFNUM  ANOP                          OFFSET IS NUMERIC
&OFFSETA SETA  &OFFSETC                GET SPECIFIED OFFSET IN NUM
.CKOFFVL AIF   (&OFFSETA GE 0 AND &OFFSETA LE 4095).OFF2
         MNOTE 8,'&OFFSETA IS INVALID OFFSET-RANGE IS 0-4095'
         MEXIT                         MACRO EXIT
.OFF2    ANOP                          OFFSET WITHIN RANGE
&REST    SETC  '&X'(&L2+1,&L1-&L2)     ISOLATE REST FOR INNER MACRO
         #FMT1  &REST                  INVOKE INNER PARSING MACRO
         AIF   ('&EXIT' NE 'Y').SETLEN DID #FMT1 SET EXIT FLAG
         MEXIT                         MACRO EXIT
.SETLEN  ANOP                          EXIT FLAG NOT SET
&L1      SETA  &RLEN                   SET LENGTH OF &R(1)
&T1      SETC  '&R(3)'                 SET TYPE OF CONVERSION
&X       SETC  '&OFFSETC.(&R(2))'      MAKE IT OFFSET(RX)
&OFFSW   SETA  1                       TURN ON OFFSET SWITCH (OFF,REG)
         AGO   .CHKTYPE                GO CHECK TYPE OF CONVERSION
.**********************************************************************
.SPACES  ANOP                          SPACE LITERAL
&SPNUM   SETC  '&X'(1,K'&X-1) SYSLIST(I) LEN FIELD
&SPTYP   SETC  T'&SPNUM                GET SYSLIST(I) TYPE
         AIF   ('&SPTYP' NE 'N').LSPERR1 CHECK TYPE IS NUMERIC
&L1      SETA  &SPNUM                  GET SYSLIST(I) LENGTH
         AIF   (&L1 GT 125).LSPERR2    GREATER THAN MAX SIZE
         MVI   ##MSGTXT+&F1,X'40'              MOVE 1 BLANK BYTE & SKIP
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.LSPERR0 MNOTE 8,'UNKNOWN OPERAND ERROR &X'
         MEXIT                         MACRO EXIT
.LSPERR1 MNOTE 8,'NON-NUMERIC NUMBER OF BLANKS &X'
         MEXIT                         MACRO EXIT
.LSPERR2 MNOTE 8,'EXCESSIVE OPERAND LENGTH &X'
         MEXIT                         MACRO EXIT
.**********************************************************************
.ADCON   ANOP                          ADCON
.BINARY  ANOP                          BINARY
.HEXADEC ANOP                          HEXADECIMAL
         AIF   (&L1 GE 1 AND &L1 LE 56).ABHLOK IS LENGTH OK
         MNOTE 8,'&L1 IS INVALID LENGTH FOR TYPE &R(3)-RANGE IS 1-56'
         MEXIT                         MACRO EXIT
.ABHLOK  ANOP                          LENGTH IS WITHIN RANGE
&F2      SETA  0                       INITIALIZE OFFSET2 (&F2)
&F3      SETA  &F1                     INITIALIZE OFFSET3 (&F3)
&L2      SETA  &L1                     INITIALIZE LENGTH2 (&L2)
.ABHLOOP AIF   (&L2 LE 4).ABH4BYT      IF SYSLIST(I) LE 4 BYTES
         AIF   (&OFFSW EQ 1).ABHOFF1   IF OFFSET-REG PROCESSING
         UNPK  ##MSGTXT+&F3(9),&X+&F2(5)                    UNPACK DATA
         AGO   .ABHOFF2                SKIP OFFSET-REG UNPACK
.ABHOFF1 ANOP                          DO OFFSET-REG UNPACK
         UNPK  ##MSGTXT+&F3.(9),&OFFSETC+&F2.(5,&R(2))      UNPACK DATA
.ABHOFF2 ANOP                          SKIP OFFSET-REG UNPACK
&F2      SETA  &F2+4                   INCREMENT OFFSET2 (&F2)
&F3      SETA  &F3+8                   INCREMENT OFFSET3 (&F3)
&L2      SETA  &L2-4                   DECREMENT LENGTH2 (&L2)
         AGO   .ABHLOOP                LOOP TO UNPACK NEXT BYTES
.**********************************************************************
.DUMP    ANOP                          DUMP
         AIF   (&L1 GE 1 AND &L1 LE 62).ABHLOK2 IS LENGTH OK
         MNOTE 8,'&L1 IS INVALID LENGTH FOR TYPE &R(3)-RANGE IS 1-62'
         MEXIT                         MACRO EXIT
.ABHLOK2 ANOP                          LENGTH IS WITHIN RANGE
&F2      SETA  0                       INITIALIZE OFFSET2 (&F2)
&F3      SETA  &F1                     INITIALIZE OFFSET3 (&F3)
&L2      SETA  &L1                     INITIALIZE LENGTH2 (&L2)
.ABHLP2  AIF   (&L2 LE 4).ABH4BY2      IF SYSLIST(I) LE 4 BYTES
         AIF   (&OFFSW EQ 1).ABHOFF3   IF OFFSET-REG PROCESSING
         UNPK  ##MSGTXT+&F3(9),&X+&F2(5)                    UNPACK DATA
         MVI   ##MSGTXT+&F3+8,X'EF'         FIX LAST BYTE FOR TRANSLATE
         AGO   .ABHOFF4                SKIP OFFSET-REG UNPACK
.ABHOFF3 ANOP                          DO OFFSET-REG UNPACK
         UNPK  ##MSGTXT+&F3.(9),&OFFSETC+&F2.(5,&R(2))      UNPACK DATA
         MVI   ##MSGTXT+&F3+8,X'EF'         FIX LAST BYTE FOR TRANSLATE
.ABHOFF4 ANOP                          SKIP OFFSET-REG UNPACK
&F2      SETA  &F2+4                   INCREMENT OFFSET2 (&F2)
&F3      SETA  &F3+9                   INCREMENT OFFSET3 (&F3)
&L2      SETA  &L2-4                   DECREMENT LENGTH2 (&L2)
         AGO   .ABHLP2                 LOOP TO UNPACK NEXT BYTES
.**********************************************************************
.ABH4BY2 ANOP                          PROCESS 4 OR LESS BYTES
         AIF   (&OFFSW EQ 1).ABHOFF5   IF OFFSET-REG PROCESSING
         UNPK  ##MSGTXT+&F3.(2*&L2+1),&X+&F2.(&L2+1)        UNPACK DATA
         AGO   .ABHOFF6                SKIP OFFSET-REG UNPACK
.ABHOFF5 ANOP                          DO OFFSET-REG UNPACK
         UNPK  ##MSGTXT+&F3.(2*&L2.+1),&OFFSETC.+&F2.(&L2.+1,&R(2))
.ABHOFF6 ANOP                          SKIP OFFSET-REG UNPACK
&L1      SETA  2*&L1                   SET LENGTH=2*LENGTH
&L1      SETA  &L1+(&L1-1)/8           SET LENGTH=2*L+(2*L-1)/8
         TR    ##MSGTXT+&F1.(&L1),##TRTAB-239            TRANSLATE DATA
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.REGISTR ANOP                          REGISTER
         ST    &X,##DWORD                      STORE REG. INTO WORKAREA
         UNPK  ##MSGTXT+&F1.(9),##DWORD(5)         UNPACK FROM WORKAREA
&L1      SETA  4                       SET TRANSLATE LENGTH
         AGO   .ABHTRAN                GO DO TRANSLATE
.**********************************************************************
.ABH4BYT ANOP                          PROCESS 4 OR LESS BYTES
         AIF   (&OFFSW EQ 1).ABHOFF7   SKIP OFFSET-REG UNPACK
         UNPK  ##MSGTXT+&F3.(2*&L2+1),&X+&F2.(&L2+1)        UNPACK DATA
         AGO   .ABHOFF8                SKIP OFFSET-REG UNPACK
.ABHOFF7 ANOP                          DO OFFSET-REG UNPACK
         UNPK  ##MSGTXT+&F3.(2*&L2+1),&OFFSETC+&F2.(&L2+1,&R(2)) UNPACK
.ABHOFF8 ANOP                          SKIP OFFSET-REG UNPACK
.ABHTRAN ANOP                          TRANSLATE
&L1      SETA  2*&L1                   SET LENGTH=2*LENGTH
         TR    ##MSGTXT+&F1.(&L1),##TRTAB-239            TRANSLATE DATA
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.FMTHFP  ANOP                          FORMAT HALFWORD/FULLWORD/PACKED
&AM      SETA  &AM+1                   INCREMENT LABEL PREFIX
         CLC   ##DWORD(3),=XL3'00'            IS NUMBER UNDER 1 BILLION
         BNE   #M&CM&AM                               NO, SHOW OVERFLOW
         MVC   ##MSGTXT+&F1.(12),=X'402020206B2020206B202120'   MOVE IT
         LA    1,##MSGTXT+&F1.+11         LOAD A(DEFAULT SIGNIF. DIGIT)
         EDMK  ##MSGTXT+&F1.(12),##DWORD+3                      EDIT IT
         BNM   #M&CM&AM+L'#M&CM&AM          IF NOT NEGATIVE, SKIP MINUS
         BCTR  1,0                             ELSE, DECREMENT REGISTER
         MVI   0(1),C'-'                       AND PUT MINUS SIGN IN IT
         B     #M&CM&AM+L'#M&CM&AM                        SKIP OVERFLOW
#M&CM&AM MVC   ##MSGTXT+&F1.(12),=C' ***********'         SHOW OVERFLOW
&L1      SETA  12                      SET LENGTH=12 (OVERFLOW)
         AGO   .NEXTPRM                GO PROCESS NEXT SYSLIST SUBPARM
.**********************************************************************
.NEXTPRM ANOP                          PROCESS NEXT SYSLIST SUBPARM
&F1      SETA  &F1+&L1                 BUMP OFFSET BY CURRENT LENGTH
         AIF   (&F1 LE 125).NULLVAL    IF OFFSET LE MAX MSG LENGTH
         MNOTE 8,'EXCESSIVE MESSAGE LENGTH=&F1'
         MEXIT                         MACRO EXIT
.**********************************************************************
.NULLVAL AIF   (&I LT N'&SYSLIST).LSTLOOP IF MORE SUBPARMS IN SYSLIST
         AIF   ('&MF' EQ 'TPUT').GENTPUT IF MF=TPUT
         AIF   ('&MF' EQ 'WTO').GENWTO IF MF=WTO
.**********************************************************************
.GENFMT  ANOP                          ELSE, ASSUME MF=FMT
         MVC   ##MSGLEN,=AL2(&F1)                      STORE MSG LENGTH
         MEXIT                         MACRO EXIT
.**********************************************************************
.GENTPUT ANOP                          MF=TPUT
         LA    1,##MSGTXT                        LOAD A(MSG TO DISPLAY)
         L     0,=AL2(0,&F1)                            LOAD MSG LENGTH
         SVC   93                                            ISSUE TPUT
         MEXIT                         MACRO EXIT
.**********************************************************************
.GENWTO  ANOP                          MF=WTO
         MVC   ##MSGLEN,=AL2(&F1+4)                    STORE MSG LENGTH
         MVC   ##MCSFLG,=X'8000'                   HARD CODED MCS FLAGS
&CNTR    SETA  0                       INITIALIZE DESC CODE BIT FLAGS
&B(1)    SETB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 INIT DESC CODE BIT FLAGS
.DESCLOP ANOP                          LOOP THROUGH DESC CODES
&CNTR    SETA  &CNTR+1                 INCREMENT LOOP COUNTER
         AIF   (&CNTR GT N'&DESC).DESCEND IF NO MORE DESC CODES
&J       SETA  &DESC(&CNTR)            GET DESC CODE(SUBVALUE)
&B(&J)   SERTB 1                       SET DESC CODE BIT
         AGO   .DESCLOP                GO LOOP THROUGH DESC CODES
.DESCEND ANOP                          END OF DESC CODE LOOP
         MVC   ##MSGTXT+&F1.(2),=B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&X
               B(8)&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'  DC
.**********************************************************************
&CNTR    SETA  0                       INITIALIZE ROUT CODE BIT FLAGS
&B(1)    SETB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 INIT ROUT CODE BIT FLAGS
.ROUTLOP ANOP                          LOOP THROUGH ROUTE CODES
&CNTR    SETA  &CNTR+1                 INCREMENT LOOP COUNTER
         AIF   (&CNTR GT N'&ROUTCDE).ROUTEND IF NO MORE ROUTE CODES
&J       SETA  &ROUTCDE(&CNTR)         GET ROUTE CODE(SUBVALUE)
&B(&J)   SETB   1                      SET ROUTE CODE BIT
         AGO   .ROUTLOP                GO LOOP THROUGH ROUTE CODES
.ROUTEND ANOP                          END OF ROUTE CODE LOOP
&F1      SETA  &F1+2        ACCOUNT FOR DESCRIPTOR CODES
         MVC   ##MSGTXT+&F1.(2),=B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&X
               B(8)&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'  RC
         LA    1,##MSGLEN                             LOAD A(WTO PLIST)
         SVC   35                                             ISSUE WTO
         MEXIT                         MACRO EXIT
.**********************************************************************
.MFL     ANOP                          MF=LIST REQUESTED
         AIF   (N'&SYSLIST EQ 0).MFLPREV MF=LIST AND SYSLIST N.G
         MNOTE 8,'MF=LIST MUTUALLY EXCLUSIVE WITH SYSLIST OPTION'
         MEXIT                         MACRO EXIT
.MFLPREV AIF   (&MFL NE 1).BLDAREA WORK AREA ALREADY BUILT
         MNOTE *,'MF=LIST WAS ALREADY USED-THIS INVOCATION IGNORED'
         AGO   .MEND                   GO SKIP WORK AREA BUILD
.BLDAREA ANOP                          WORK AREA NOT BUILT YET
&MFL     SETA  1                       INITIALIZE &MFL FLAG
##DWORD  DS    D                       CVD WORK AREA
##TRTAB  DS    CL17                    TRANSLATE TABLE
##MSGLEN DS    H                       LENGTH OF MSG
##MCSFLG DS    XL2                     MCS FLAGS
##MSGTXT DS    CL125                   MESSAGE TEXT
##MSGRDC DS    XL4                     ROUTE/DESCRIPTOR CODES
.MEND    MEND                          MACRO END


#FMT1 MACRO

         MACRO
         #FMT1 &REST
         GBLA  &RLEN                   GLOBAL VAR. FOR LEN(&R(1))
         GBLC  &R(3)                   GLOBAL ARRAY FOR 3 VALUES
         GBLC  &EXIT                   GLOBAL EXIT SWITCH
         AIF   (N'&REST EQ 3).NUMOPOK  IF WE HAVE 3 SUBLIST ENTRIES
&NREST   SETA  N'&REST                 SET NUMBER OF SUBPARMS
         MNOTE 8,'&REST CONTAINS &NREST POSITIONAL SUBPARAMETERS - 3 ARX
               E REQUIRED'
         AGO   .EXITERR                GO EXIT WITH ERROR
.NUMOPOK ANOP                          3 SUBLIST ENTRIES FOUND
&R(1)    SETC  '&REST(1)'              SET LENGTH VALUE
&R(2)    SETC  '&REST(2)'              SET REGISTER VALUE
&R(3)    SETC  '&REST(3)'              SET TYPE VALUE
&RLEN    SETA  0                       SET &RLEN FOR &L1 IN #FMT
         AIF   (T'&R(1) NE 'N').R1ERR  IF NOT NUMERIC
&RLEN    SETA  &R(1)                   SET &RLEN FOR &L1 IN #FMT
         AIF   (T'&R(2) EQ 'N').CHKR3  IF NUMERIC, THEN DONE
         AIF   (D'&R(2)).CHKR3         IF DEFINED, THEN DONE (SYMBOL)
         MNOTE 8,'&R(2) IS NOT A VALID NUMERIC REGISTER VALUE OR NOT A X
               DEFINED SYMBOL IN &REST'
         AGO   .EXITERR                GO EXIT WITH ERROR
.CHKR3   AIF   ('&R(3)' EQ 'A' OR '&R(3)' EQ 'B' OR '&R(3)' EQ 'C' OR  X
               '&R(3)' EQ 'F' OR '&R(3)' EQ 'H' OR '&R(3)' EQ 'P' OR   X
               '&R(3)' EQ 'X' OR '&R(3)' EQ 'X' OR '&R(3)' EQ 'Z' OR   X
               '&R(3)' EQ '#').MEND    CHECK FOR VALID TYPE
         MNOTE 8,'&R(3) IS NOT A VALID ASSEMBLER TYPE ATTRIBUTE VALUE IX
               N OPERAND &REST'
         AGO   .EXITERR                GO EXIT WITH ERROR
.R1ERR   MNOTE 8,'&R(1) IS NOT A VALID NUMERIC LENGTH VALUE IN OPERAND X
               &REST'
         AGO   .EXITERR                GO EXIT WITH ERROR
.EXITERR ANOP                          EXIT WITH ERROR
&EXIT    SETC  'Y'                     TURN ON EXIT SWITCH
         MEXIT                         MACRO EXIT
.MEND    MEND


SAMPLE PROGRAM

ENVIRON2 AMODE 31
         IHAPSA
CVTDSECT CVT   DSECT=YES,LIST=NO
         IHAASCB
         IHALDA
ENVIRON2 CSECT                    ESTABLISH CSECT
         SAVE  (14,12),,ENVIRON2-&SYSDATE
         YREGS
         LR    R12,R15            LOAD R12 W/EPA ADDRESS
         USING ENVIRON2,R12       ESTABLISH ADDRESSABLITY TO CSECT
         LA    R8,SAVEAREA        LOAD ADDR OF MY S/A
         ST    R8,8(,R13)         ST MY S/A ADDR IN CALLER'S S/A
         ST    R13,4(,R8)         ST CALLER'S S/A ADDR IN MY S/A
         LR    R13,R8             LOAD ADDR OF MY S/A IN R13
         L     R2,PSAAOLD-PSA     LOAD A(MY ASCB)
         L     R2,ASCBLDA-ASCB(,R2) LOAD A(LOCAL DATA AREA)
         USING LDA,R2
         SR    R0,R0
         ICM   R1,15,LDASIZA
         BZ    XSIZA
         D     R0,=F'1024'
XSIZA    ST    R1,#SIZA
         SR    R0,R0
         ICM   R1,15,LDAESIZA
         BZ    XESIZA
         D     R0,=F'1024'
XESIZA   ST    R1,#ESIZA
         SR    R0,R0
         ICM   R1,15,LDASIZS
         BZ    XSIZS
         D     R0,=F'1024'
XSIZS    ST    R1,#SIZS
         SR    R0,R0
         ICM   R1,15,LDAESIZS
         BZ    XESIZS
         D     R0,=F'1024'
XESIZS   ST    R1,#ESIZS
         SR    R0,R0
         ICM   R1,15,LDASIZR
         BZ    XSIZR
         D     R0,=F'1024'
XSIZR    ST    R1,#SIZR
         SR    R0,R0
         ICM   R1,15,LDAREGRQ
         BZ    XREGRQ
         D     R0,=F'1024'
XREGRQ   ST    R1,#REGRQ
         SR    R0,R0
         ICM   R1,15,LDALIMIT
         BZ    XLIMIT
         D     R0,=F'1024'
XLIMIT   ST    R1,#LIMIT
         SR    R0,R0
         ICM   R1,15,LDAVVRG
         BZ    XVVRG
         D     R0,=F'1024'
XVVRG    ST    R1,#VVRG
         SR    R0,R0
         ICM   R1,15,LDAELIM
         BZ    XELIM
         D     R0,=F'1024'
XELIM    ST    R1,#ELIM
         SR    R0,R0
         ICM   R1,15,LDAEVVRG
         BZ    XEVVRG
         D     R0,=F'1024'
XEVVRG   ST    R1,#EVVRG
         SR    R0,R0
         ICM   R1,15,LDALOAL
         BZ    XLOAL
         D     R0,=F'1024'
XLOAL    ST    R1,#LOAL
         SR    R0,R0
         ICM   R1,15,LDAHIAL
         BZ    XHIAL
         D     R0,=F'1024'
XHIAL    ST    R1,#HIAL
         SR    R0,R0
         ICM   R1,15,LDAELOAL
         BZ    XELOAL
         D     R0,=F'1024'
XELOAL   ST    R1,#ELOAL
         SR    R0,R0
         ICM   R1,15,LDAEHIAL
         BZ    XEHIAL
         D     R0,=F'1024'
XEHIAL   ST    R1,#EHIAL
         SR    R0,R0
         ICM   R1,15,LDASMFL
         BZ    XSMFL
         D     R0,=F'1024'
XSMFL    ST    R1,#SMFL
         SR    R0,R0
         ICM   R1,15,LDASMFR
         BZ    XSMFR
         D     R0,=F'1024'
XSMFR    ST    R1,#SMFR
         SR    R0,R0
         ICM   R1,15,LDASMFEL
         BZ    XSMFEL
         D     R0,=F'1024'
XSMFEL   ST    R1,#SMFEL
         SR    R0,R0
         ICM   R1,15,LDASMFER
         BZ    XSMFER
         D     R0,=F'1024'
XSMFER   ST    R1,#SMFER
         #FMT  'LDA001I  SIZA=',#SIZA,',ESIZA=',#ESIZA,                X
               ',SIZS=',#SIZS,',ESIZS=',#ESIZS,                        X
               ',SIZR=',#SIZR,MF=WTO,ROUTCDE=11
         #FMT  'LDA002I  SIZA=',LDASIZA,',ESIZA=',LDAESIZA,            X
               ',SIZS=',LDASIZS,',ESIZS=',LDAESIZS,                    X
               ',SIZR=',LDASIZR,MF=WTO,ROUTCDE=11
         #FMT  'LDA003I ESIZR=',#ESIZR,',REGRQ=',#REGRQ,               X
               ',LIMIT=',#LIMIT,',VVRG=',#VVRG,                        X
               ',ELIM=',#ELIM,',EVVRG=',#EVVRG,MF=WTO,ROUTCDE=11
         #FMT  'LDA004I ESIZR=',LDAESIZR,',REGRQ=',LDAREGRQ,           X
               ',LIMIT=',LDALIMIT,'    ,VVRG=',LDAVVRG,                X
               '    ,ELIM=',LDAELIM,'    ,EVVRG=',LDAEVVRG,            X
               MF=WTO,ROUTCDE=11
         #FMT  'LDA005I  LOAL=',#LOAL,',HIAL=',#HIAL,                  X
               ',ELOAL=',#ELOAL,',EHIAL=',#EHIAL,MF=WTO,ROUTCDE=11
         #FMT  'LDA006I  LOAL=',LDALOAL,',HIAL=',LDAHIAL,              X
               ',ELOAL=',LDAELOAL,',EHIAL=',LDAEHIAL,MF=WTO,ROUTCDE=11
         #FMT  'LDA007I  SMFL=',#SMFL,',SMFR=',#SMFR,                  X
               ',SMFEL=',#SMFEL,',SMFER=',#SMFER,MF=WTO,ROUTCDE=11
         #FMT  'LDA008I  SMFL=',LDASMFL,',SMFR=',LDASMFR,              X
               ',SMFEL=',LDASMFEL,',SMFER=',LDASMFER,MF=WTO,ROUTCDE=11
         L     R13,SAVEAREA+4     RELOAD R13 W/ADDR OF CALLERS S/A
         RETURN (14,12),RC=0      RETURN TO OS WITH RETCODE=0
         LTORG ,
SAVEAREA DC    18F'0'
#SIZA    DC    F'0'
#ESIZA   DC    F'0'
#SIZS    DC    F'0'
#ESIZS   DC    F'0'
#SIZR    DC    F'0'
#ESIZR   DC    F'0'
#REGRQ   DC    F'0'
#LIMIT   DC    F'0'
#VVRG    DC    F'0'
#ELIM    DC    F'0'
#EVVRG   DC    F'0'
#LOAL    DC    F'0'
#HIAL    DC    F'0'
#ELOAL   DC    F'0'
#EHIAL   DC    F'0'
#SMFL    DC    F'0'
#SMFR    DC    F'0'
#SMFEL   DC    F'0'
#SMFER   DC    F'0'
         #FMT  MF=LIST
         END


             c Xephon 1996

