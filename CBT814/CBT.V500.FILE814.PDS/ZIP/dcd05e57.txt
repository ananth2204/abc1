TSO and VLF experiences

The Virtual Lookaside Facility (VLF) is a feature of MVS/ESA
that allows objects to be kept in virtual storage so that I/O can
be reduced for repetitive retrieval operations.  Support is
provided at the Assembler macro level for user-written
applications to interface with VLF.  Existing IBM software
such as LLA and TSO includes provision for VLF usage.

TSO supports the use of VLF to cache CLISTs and REXXs;
however, to use this feature properly some understanding of
how VLF works for PDS member objects is required.  To
begin with, define the CLIST library names that are to be
cached in the SYS1.PARMLIB member COFVLF00 - these
are associated with the VLF object class of IKJEXEC.

VLF is not transparent to the application (in this case TSO).
The application code must be written to interface with VLF and
to pass objects both to and from the VLF address space.  VLF
does not itself read these libraries, it merely acts as a
repository.  Since VLF requires opened datasets, there are no
security implications.

The EXEC processor will interact with VLF to load the CLIST.
It first opens the SYSPROC concatenation and then requests
VLF identification for this DDNAME.  VLF identifies which
libraries are currently allocated to this DDNAME and assigns a
token.  Subsequently before issuing a BLDL to locate a
CLIST, the EXEC processor will check whether VLF has the
required CLIST in its cache.

VLF will search its current cache and if it has the CLIST it will
make it available to the EXEC processor, providing the dataset
that it originated from is allocated to the DDNAME.  It will
also tell EXEC whether or not it can guarantee that no
alternative version of the CLIST might exist higher up in the
user's search sequence.

EXEC may still have to issue a BLDL to determine which
dataset the CLIST is located in.  If it is the same as the dataset
that VLF had indicated, the cached version is used.  If it is not
the same, the CLIST is loaded from disk in the normal way as
would happen if no VLF version was found in the cache or if
VLF was not active.

If the EXEC processor has to read the CLIST from disk then it
passes it to VLF for future use.  VLF will accept it only for the
libraries that it is caching.  A subsequent request for this
CLIST by any user could then be satisfied from the cache.
VLF will manage the cache on a 'least recently used' basis
within its defined storage limit.

VLF works most effectively when the VLF cached libraries are
at the front of the SYSPROC concatenation.  This is because if
any non-VLF libraries are before the VLF libraries, EXEC will
be forced to issue a BLDL for every CLIST to ensure that it
does not exist in the non-VLF libraries before it can safely use
the VLF cached version.

REXXs will also be cached if invoked though the CLIST
search sequence, but they will not be cached if invoked via the
SYSEXEC DDNAME.  This important point is not
documented by IBM.  The same applies to any alternative
EXEC DDNAMEs defined with the ALTLIB command.  Only
implicit commands are cached - explicit EXEC commands are
not cached.

When objects are in the VLF address space they are
automatically invalidated by VLF if their original PDS member
is updated in its library.  However this applies to the current
system only and if a library on a shared disk is updated from
another system then the VLFNOTE command should be used
to force cache invalidation.


CONCLUSIONS

VLF appears to be extremely well designed and is certainly
worth implementing for TSO CLISTs as response time is much
improved by the reduction of I/O.  Hopefully IBM will extend
support for VLF to other TSO components such as ISPF panels
in due course.

Follow these guidelines to optimize the use of CLIST VLF:

1      Define libraries for VLF caching and the VLF storage
      limit.  The best libraries for VLF are stable system-wide
      ones.  A cache size of between 1024 and 2048 pages is
      about right.

2      Ensure SYSPROC concatenations specify the VLF libraries
      ahead of any non-VLF libraries.  This avoids BLDLs,
      allowing completely I/O free loading of cached members.

3      Avoid use of SYSEXEC and explicit EXEC commands, as
      currently these invocations do not pass through the TSO
      VLF code.

4      Use VLFNOTE if updating VLF libraries from another
      system; this is a nuisance but writing an ISPF interface will help.

5      Statistics are available from VLF only by dumping the
      VLF address space and using IPCS.  However the presence
      of members in the cache can be detected by coding VLF
      exits or writing an Assembler program that issues the VLF
      macros in a similar way to the EXEC processor.

                                                c Xephon 1991

