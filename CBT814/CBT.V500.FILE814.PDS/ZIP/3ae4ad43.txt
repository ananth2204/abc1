Debugging TSO log-on procedures

Many fundamental errors that users report with ISPF will come
down to a problem with dataset concatenation and/or duplicate
members. Even though a TSO administrator may suspect this
from the outset, the task of isolating the offending dataset or
member can be laborious and time-consuming, involving the
movement in and out of many dataset lists. The following macro,
SCANJCL, is an attempt to automate this task. While editing a
TSO log-on procedure (or any JCL), issue:

      SCANJCL member {ddname}

and the macro will search all the datasets it finds, and report if the
specified member is found within. It will also report on any
datasets in the JCL that do not exist. The search can be limited to
a single DDNAME or a range of lines.

The SCANJCL Edit Macro

/* Rexx */
ADDRESS  ISREDIT
"MACRO (MEMBER DDNAME DUMMY) NOPROCESS"
retcode =rc
/* Exit if called from TSO rather than Edit. */
SELECT
WHEN retcode >= 20 THEN
   DO
   msg = ' '
   zmsg000l = 'SCANJCL is an EDIT MACRO; Do not invoke via TSO'
   CALL QUIT
   END
OTHERWISE NOP
END
xx = SYSVAR("syspref")                           /* If profile prefix*/
IF xx ^= '' THEN                                 /* is on then save  */
   DO                                            /* it and switch it */
   pref = xx                                     /* off.  It will be */
   ADDRESS TSO "PROF NOPRE"                      /* reset on leaving */
   END                                           /* the dialog       */
/* Exit if the member we're editing is not JCL. */
"FIND '//'  1 2"
SELECT
WHEN rc > 0  THEN
   DO
   noslash = 'YES'
   CALL FINISH
   CALL QUIT
   END
OTHERWISE NOP
END
/* Initialize msgs and variables. */
"RESET SPECIAL"
msg = '';dsnerror = ''
dsnfound = ''; memfound = ''; ddfound = '';
locate  = '';
SELECT
WHEN member = "?" THEN
   DO
   /* Show Help panel if ? specified as parm. */
   ADDRESS ISPEXEC "CONTROL DISPLAY SAVE"
   ADDRESS ISPEXEC "SELECT PGM(ISPTUTOR) PARM(SCANJCLH)"
   ADDRESS ISPEXEC "CONTROL DISPLAY RESTORE"
   CALL QUIT
   END
WHEN member = '' THEN
   DO
   /* No member specified?..Set msg and Exit. */
   msg = SCAN000
   CALL QUIT
   END
WHEN  LENGTH(member) > 8 THEN
   DO
   /* member name too long?..Set msg and Exit. */
   msg = SCAN003
   CALL QUIT
   END
WHEN LENGTH(ddname) > 8   THEN
   DO
   /* DDname too long?..Set msg and Exit. */
   msg = SCAN005
   CALL QUIT
   END
OTHERWISE NOP
END
/* Parse DDname....... */
UPPER member
UPPER ddname
ddend = LENGTH(ddname)
ddend = ddend+1
ddname = ddname||"        "
ddname = SUBSTR(ddname,1,ddend)
/* Search limited by ** ** line commands? */
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
"PROCESS RANGE *"
retcode = rc
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
/* ...If so, set line numbers to search. */
SELECT
WHEN retcode = 0  THEN
  DO
  panel = SCANJCL3
  "(FIRST) = LINENUM .ZFRANGE"
  "(LAST)  = LINENUM .ZLRANGE"
  locate = first
  END
WHEN retcode = 4 THEN
  DO
  panel = SCANJCL
  "(FIRST) = LINENUM .ZFRANGE"
  "(LAST)  = LINENUM .ZLRANGE"
  END
WHEN retcode = 16  THEN
  DO
  /* Bad line commands entered..must be **.*/
  zmsg000l = "Enter *, **-**, or *99 etc. to specify range."
  ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
  "RESET COMMAND"
  CALL QUIT
  END
OTHERWISE NOP
END
/* Set different display panel if search limited to a DDNAME.*/
SELECT
WHEN ddname ^= ' ' THEN panel = SCANJCL2
OTHERWISE NOP
END
/* Display "Searching....." in a pop-up window.*/
ADDRESS ISPEXEC "ADDPOP COLUMN(20) ROW(18)"
ADDRESS ISPEXEC "CONTROL DISPLAY LOCK"
ADDRESS ISPEXEC "DISPLAY PANEL("panel")"
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "REMPOP ALL"
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
/* Start the search....*/
DO  lptr = first TO last  BY 1
"(RECORD)  = LINE"    lptr
"(XSTATUS) = XSTATUS" lptr
/* If this line is excluded, or if it is a comment, then skip it. */
/* Or, if DDNAME search is being done, and a non-blank       */
/* char is found in col 3(ie new ddname),then end the search.*/
SELECT
WHEN POS('*',record) = 3                           THEN ITERATE lptr
WHEN ddfound = YES &  SUBSTR(record,3,1)  ^= ' '   THEN LEAVE   lptr
WHEN xstatus = "X"                                 THEN ITERATE lptr
OTHERWISE nop
END
/* DDNAME search specified?...Then check column 3 for a match.*/
/* When we find it, set the &ddfound variable to yes.         */
SELECT
WHEN  ddname  = ''  THEN NOP
WHEN  ddname ^= ''  & ddfound ^= YES & SUBSTR(record,3,ddend) ^= DDNAME THEN ITE
WHEN  ddname ^= ''  & ,
      ddfound^= 'YES' & ,
      POS(' DD ',record)  ^= 0 & ,
      SUBSTR(record,3,ddend)   = ddname  THEN ddfound = 'YES'
OTHERWISE nop
END
/* Are we on a line with a "DSN=..." or a "DSNAME=..." ?*/
/* If so, set pos1 variable to the starting column......*/
/* otherwise go back and get the next line.             */
SELECT
WHEN POS('DSNAME=',record) ^=0 THEN
         pos1 =  POS('DSNAME=',record) + 7
WHEN POS('DSN=',record) ^=0 THEN
         pos1 =  POS('DSN=',record) + 4
OTHERWISE ITERATE lptr
END
/* Find the next space (end of statement) or comma (end of keyword).*/
record   = SUBSTR(record,pos1,72)
pos2a    = POS(',',record)
pos2b    = POS(' ',record)
/* Which is nearer, the space or the comma ? */
/* ...The end of the DSNAME will be the nearer of the two..*/
SELECT
WHEN pos2a = 0       THEN  lendsn=pos2b-1
OTHERWISE  lendsn = MIN(pos2a,pos2b)-1
END
/* Get the DSNAME out of the record using the start and end  */
/* positions we just worked out......                        */
dsn = SUBSTR(record,1,lendsn)
/* Chop off member name if specified..eg HLQ.XYZ(MYMEM)....  */
/* Or, if it is a temporary dsn(eg &TEMP), then skip it and  */
/* get the next line.                                        */
SELECT
WHEN  POS('(',dsn) ^= 0  THEN dsn = SUBSTR(dsn,1,POS('(',dsn)-1)
WHEN  POS('&',dsn) ^= 0  THEN ITERATE lptr
OTHERWISE nop
END
/* We now have a line that contains a "dsn=..."               */
/* .....and we have isolated the DSNAME.                      */
dsnfound = YES
/* add the name of the member to be searched for to our DSNAME.*/
dsnmem = dsn||"("||member||")"
x = MSG(OFF)
/* First, issue SYSDSN to check the dataset exists....         */
z  = SYSDSN(dsn)
/* Now, issue SYSDSN to see if the search member is in the dataset. */
zz = SYSDSN(dsnmem)
SELECT
WHEN  z  ^= "OK" THEN
      DO
      /* If the DSN does not exist then set a msg to that effect.    */
      'LINE_AFTER &lptr  = MSGLINE "&dsn - &z" '
      END
WHEN  zz = "OK"  THEN
      DO
      /* If the Member has been found, set a msg to that effect.    */
      memfound = YES
      IF locate = ' ' THEN locate = lptr
      'LINE_AFTER  &lptr = MSGLINE  "&member FOUND IN &dsn." '
      END
OTHERWISE nop
END
/* Go back and get the next line........                            */
END
FINISH:
/* In this subroutine, we set the relevant message before Exiting...*/
SELECT
WHEN noslash = 'YES'                          THEN msg = 'SCAN010' /*NO JCL STAT
WHEN ddname ^= ''         & ddfound  ^= 'YES' THEN msg = 'SCAN006' /*DDNAME NOT
WHEN ddname ^= ''         & dsnfound ^= 'YES' THEN msg = 'SCAN007' /*DSN= NOT FO
WHEN ddname  = ''         & dsnfound ^= 'YES' THEN msg = 'SCAN002' /*DSN= NOT FO
WHEN ddname ^= ''         & memfound ^= 'YES' THEN msg = 'SCAN008' /*MEM NOT FOU
WHEN ddname  = ''         & memfound ^= 'YES' THEN msg = 'SCAN001' /*MEM NOT FOU
WHEN                        memfound  = 'YES' THEN "LOCATE &locate" /*---MEMBER
OTHERWISE NOP
END
QUIT:
IF pref ^= 'PREF' THEN                           /* RESTORE PROFILE  PREFIX */
  DO
  ADDRESS TSO "PROF PREFIX("pref")"
  END
IF msg = '' THEN msg = ISPZ000
ADDRESS ISPEXEC "SETMSG MSG("msg")"
EXIT
RETURN

THE SCANJCLH PANEL

)ATTR DEFAULT(%+_)
)BODY EXPAND(\\)
%TUTORIAL \-\ SCANJCL \-\ TUTORIAL
%SELECTION ==> _ZCMD                                                          +
                    ---------------------------------------
                   |          Edit Macro SCANJCL           |
                    ---------------------------------------

+     This is the SCANJCL edit macro. it will search any dataset it finds in
+     your jcl for a given member. the syntax is: %"SCANJCL member".

+     Optionally, you can limit the search to a particular ddname.
+     The syntax for this is% "SCANJCL member ddname".

+     You can further limit the scope of the search by using
+     the %*+ line command; To specify a block of data:
+     Enter %*+ or %** **+ or %*99+.
)PROC
 &ZCONT = SCANJCLH
)END

THE SCANJCL PANEL

)BODY  WINDOW(20,4)
+
+ Searching JCL....
+
+ (Hit List Follows)
)END

THE SCANJCL2 PANEL

)BODY  WINDOW(20,4)
+
+ Searching &ddname
+
+ (Hit List Follows)
)END

THE SCANJCL3 PANEL

)BODY  WINDOW(27,5)
+
+ Searching%line &FIRST
+        to%line &LAST
+
+ (Hit List Follows)
)END

THE SCAN00 MESSAGES

SCAN000 'Member not specified' .TYPE=ACTION  .WINDOW=NORESP  .HELP=SCANJCLH
'Type in: "SCANJCL ?" for a short tutorial.'
SCAN001 '- Member not found -' .TYPE=ACTION  .WINDOW=NORESP  .HELP=SCANJCLH
'The search ended without finding the member in any dataset.'
SCAN002 ' No DSNs Found '      .TYPE=ACTION  .WINDOW=NORESP  .HELP=SCANJCLH
'The search ended without finding any DSN= statements.'
SCAN003 'Member too long'     .TYPE=ACTION  .WINDOW=NORESP   .HELP=SCANJCLH
'Member name must be 1 to 8 characters in length'
SCAN004 'DSNs under &ddname OK'  .TYPE=ACTION  .WINDOW=NORESP .HELP=SCANJCLH
'All the datasets under &ddname were found to be catalogued.'
SCAN005 'DDNAME too long'   .TYPE=ACTION  .WINDOW=NORESP     .HELP=SCANJCLH
'DDNAME must be 1 to 8 characters in length'
SCAN006 '- DDNAME not found -' .TYPE=ACTION  .WINDOW=NORESP  .HELP=SCANJCLH
'DDNAME could not be found within the specified search range'
SCAN007 'No DSNs under &ddname'  .TYPE=ACTION  .WINDOW=NORESP .HELP=SCANJCLH
'The DDNAME &ddname has no DSN=  jcl statements.'
SCAN008 'Not found under &ddname' .TYPE=ACTION  .WINDOW=NORESP .HELP=SCANJCLH
'The member was not found under DDNAME &ddname.'
SCAN009 'All Datasets OK' .TYPE=ACTION  .WINDOW=NORESP       .HELP=SCANJCLH
'All the datasets in the specified range were found to be catalogued.'

THE SCAN01 MESSAGES

SCAN010 'This isn't JCL'       .TYPE=ACTION  .WINDOW=NORESP  .HELP=SCANJCLH
'No // JCL statements found.'


Steven Leek
British Gas Southern Eastern (UK)                                             c Xephon 1994

