Showing money amounts in words

Some years ago I put together a subprogram for translating a 
numeric monetary figure into an amount in words.  The algorithm 
used by the subprogram is fairly straightforward.  Necessary 
parameters are documented in the comments preceding the source 
code.  The code will translate any numeric amount less than ten 
million.  However, for largish figures the calling program will 
have to allow for the possibility that the corresponding text may 
not be printable as a single line on a cheque.  In such a case the 
calling program can interrogate count fields returned by the 
subprogram to decide how best to split the text into two lines.  
The following table shows the maximum values that may be 
returned in the count fields for a given number of significant digits 
in the numeric amount.  A cheque printing application that never 
deals with a figure larger than $99,999.99 will never have to 
accommodate text longer than 64 characters.

		             Maximum values in count fields
		(A)	(B)	(C)
9-digit amount	92	50	41
8-digit amount	78	36	41
7-digit amount	64	22	41
6-digit amount 	56	14	41
5-digit amount	41	00	41

The subprogram may, of course, be adapted to produce text in a 
language other than English.  However, the exercise would very 
likely involve more than a simple translation of the units and tens 
tables (UTABLE and TTABLE in the source program) and other 
assorted literals.  A number like 71, which gets translated as 
SEVENTY-ONE, would in German, for instance, come out as 
EINUNDSIEBZIG, literally 'one-and-seventy', indicating not only 
some change to the code but also a change in the sequence of 
execution.

CHECKAMT CSECT
         USING CHECKAMT,R15
*  'CHECKAMT' is a subprogram that can be used to translate a numeric
*  monetary figure to the equivalent amount in words.
*  The calling program is required to furnish 'CHECKAMT' with 4
*  parameters that could have the names Ñ
*     1. NUMRCAMT  9-byte numeric field, zoned decimal, giving the
*                  DOLLAR amount, the low order 2 digits being assumed
*                  to be CENT figures.
*     2. ALPHAAMT  92-byte field, in which 'CHECKAMT' is to place the
*                  amount-in-words, right justified, unused high-order
*                  positions being padded with asterisks.
*     3. CNTFLDS   6-byte group item, made up of 3 subfields, each
*                  2-byte binary, in which 'CHECKAMT' will place the
*                  following count values Ñ
*                       A.  Total length of the actual text at ALPHAAMT
*                           (Not including any leading asterisks).
*                       B.  Length of the left part of the text, being
*                           the alphabetic representation of the high-
*                           order 4 digits in NUMRCAMT. If the hi-order
*                           4 digits are 0's, this count will be 0.
*                       C.  The length of the right part of the text at
*                           ALPHAAMT, being the alphabetic represent'n
*                           of the low-order 5 digits.
*                  Whenever the 2nd count field has a non-zero value,
*                  the 1st count field will always add up to 1 more
*                  than the sum of the 2nd and 3rd count fields
*                  (because of the space separating the 2 text parts).
*     4. ERRCODE   1-byte numeric fld, unsigned, used by the subprogram
*                  to return indicators to the Calling program.
*                  Possible values at ERRCODE Ñ
*                           0   Translation OK
*                           4   NUMRCAMT had non-numeric data
*  Ex 1:
*      Input in NUMRCAMT = 70100
*     Output in ALPHAAMT = ************SEVEN HUNDRED ONE & .00 DOLLARS
*    Output Count Values = 31, 00, and 31
*  Ex 2:
*      Input in NUMRCAMT = 1683
*     Output in ALPHAAMT = **********************SIXTEEN * .83 DOLLARS
*    Output Count Values = 21, 00, and 21
*  Ex 3:
*      Input in NUMRCAMT = 302135
*     Output in ALPHAAMT = ****THREE THOUSAND TWENTY-ONE & .35 DOLLARS
*    Output Count Values = 39, 14, and 24
         LCLC  &IDNAME                    For this CSECTs ID tag
         LCLC  &DATE6,&TIME4              For Date & Time of Assembly
&DATE6   SETC  '&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
&TIME4   SETC  '&SYSTIME'(1,2).'&SYSTIME'(4,2)
&IDNAME  SETC  'CHECKAMT/&DATE6/&TIME4'   Put together std. ID
BEGIN    SAVE  (14,12),,&IDNAME
*        This subprogram is self contained (issuing no system macros)
*        Hence OK to leave R13 pointing to Calling program's Save Area
         LM    R2,R5,0(R1)         Get pointers to supplied parameters
         USING NUMRCAMT,R2         R2 points to NUMRCAMT
         USING ALPHAAMT,R3           R3 to fld for amt-in-words
         USING CNTFLDS,R4          R4 points to various count flds
         USING ERRCODE,R5            R5 to the ERRCODE field
         LR    R6,R3               Point R6 to 1st byte at ALPHAAMT
         MVI   0(R6),C' '
         MVC   1(L'ALPHAAMT-1,R6),0(R6)       Clear with spaces
         XR    R7,R7                          Clear COUNT register, and
         XR    R8,R8                            reg for MOVE's L-code
         MVC   WORK9,NUMRCAMT      Set if NUMRCAMT has good data
NUMCHECK EQU   *
         TM    WORK9+8,X'30'       Last byte may be signed
         BNZ   *+8                 Skip if it looks unsigned
         OI    WORK9+8,X'30'       Make last digits zone bits F, if C
         LA    R9,WORK9
         LA    R10,L'NUMRCAMT
NUMC1    CLI   0(R9),X'F0'         Ensure each byte is in
         BL    NUMCERR               the C'0' thru C'9' range
         CLI   0(R9),X'F9'
         BH    NUMCERR
         LA    R9,1(R9)
         BCT   R10,NUMC1
         B     NOWBEGIN            Input looks OK, let's begin
NUMCERR  MVI   ERRCODE,C'4'        Flag input error,
         B     ERREXT4               and exit
NOWBEGIN EQU   *                       NUMRCAMT has numeric data
         CLC   WORK9(7),ZEROS7         Is Dollar amount zeros?
         BNE   MDGT                    Not all zeros, go take a look
         MVC   ALPHAAMT(4),LITERALZ    All 7 dollar digits are 0S
         XC    CNTFLD1,CNTFLD1         Set CNTFLD1 to zero
         LA    R7,5                    Enter COUNT value for "ZERO "
         AR    R6,R7                   Advance pointer
         B     CENTDGTS                Now go check Cent digits
MDGT     CLI   NUMRCAMT,C'0'       Check million-dollar digit
         BE    MDGTEX              If zero, skip this part
         MVC   WORK1,NUMRCAMT      Hi-order digit: x,___,___.
         MVC   LITERAL7,LITERALM   Unit of counting is "MILLION"
         BAL   R12,RTNDGT1         How many MILLIONS?
         MVC   LITERAL7,LITERALC   Reset LITERAL7 to "HUNDRED"
MDGTEX   EQU   *
LDGTS3   EQU   *                   Examine leading 3-digit combination
         CLC   NUMRCAMT+1(3),ZEROS3
         BNE   LDGTS3A             Go translate non-zero figure
         LTR   R7,R7               Was a MILLION-digit encountered?
         BZ    LDGTS3EX            If not, keep going
         BCTR  R7,0                Space before C-digits not required
         B     LDGTS3EX            Go check hundreds(C-digits)
LDGTS3A  EQU   *                   Have non-zero K-digits
         MVC   WORK3,NUMRCAMT+1    _,XXX,___.__
         BAL   R12,RTNDGTS3
         MVC   0(8,R6),LITERALK    Move in 'THOUSAND'
         LA    R6,9(R6)            Point to nxt avlbl posn in ALPHAAMT
         LA    R7,8(R7)            Increment count value
LDGTS3EX EQU   *
         STCM  R7,B'0011',CNTFLD1  Length of Part-I of ALPHAAMT text
         XR    R7,R7
TDGTS3   DS    0H                  Examine lo-order 3-digit combinat'n
         CLC   NUMRCAMT+4(3),ZEROS3
         BE    TDGTS3EX            Exit, if trailing digits = '000'
         MVC   WORK3,NUMRCAMT+4    _,___,xxx.__
         BAL   R12,RTNDGTS3
TDGTS3EX EQU   *                   All dollar-digits processed
CENTDGTS EQU   *                   Now, let's look at Cents
         MVC   CENTSIN,NUMRCAMT+7
         OI    CENTSIN+1,X'F0'
         MVC   0(13,R6),CENTSTXT   '& .25 DOLLARS'
         LA    R7,13(R7)           Increment COUNT register
         STCM  R7,B'0011',CNTFLD2  Length of Part-II of ALPHAAMT text
         XR    R9,R9
         ICM   R9,B'0011',CNTFLD1  Length of Part-I of text
         LTR   R9,R9
         BZ    SETCOUNT                No PART-I text at ALPHAAMT
         LA    R9,1(R9)                Allow for Space separator
         AR    R7,R9
SETCOUNT EQU   *
         STCM  R7,B'0011',CNTFLDT  Length of full text at ALPHAAMT
*  The last task done in this subprogram is the right justification of
*  the text at ALPHAAMT.  At this point the 92-byte field has the text
*  starting from left with trailing blanks, if any, to the right.
*  The actual length of the text, CNTFLDT, is presently in R7.
*  In the code that follows R8 thru R12 are all freely used as
*  work registers.
*  Unused ALPHAAMT positions on the left are padded with ASTERISKS.
         LA    R9,L'ALPHAAMT
         CR    R7,R9
         BNL   TXTALGND            No right-justification req'd
ALGNTXT  EQU   *
         SR    R9,R7               R9 now has a count of leading *S
         LA    R12,ALPHAAMT+91     1st receiving location
         LA    R11,ALPHAAMT(R7)
         BCTR  R11,0               1st sending location
ALGLOOP  EQU   *
         IC    R8,0(R11)           Shift bytes
         STC   R8,0(R12)             in ALPHAAMT
         BCTR  R11,0
         BCTR  R12,0               Move pointers leftwards
         BCT   R7,ALGLOOP
         LA    R12,ALPHAAMT        Place *s in unused hi-order bytes
PADLOOP  EQU   *
         MVI   0(R12),C'*'
         LA    R12,1(R12)
         BCT   R9,PADLOOP
TXTALGND EQU   *
PROGEXIT MVI   ERRCODE,C'0'        Set ERRCODE field to 0
         MVI   RCVALUE+1,X'00'     Set RETURN-CODE to 0
*        R13 still points to Calling program's Save Area
PROGXIT4 EQU   *
         LH    R15,RCVALUE
         RETURN (2,12),RC=(15)
ERREXT4  MVI   RCVALUE+1,X'04'
         B     PROGXIT4
         TITLE '****    P E R F O R M E D    R O U T I N E S    ****'
RTNDGTS3 EQU   *
*                                  Assume 321 at WORK3
         CLI   WORK1,C'0'
         BE    SKIPC
         ST    R12,R12SAVE         Save return address
         BAL   R12,RTNDGT1         Get 'THREE HUNDRED '
         L     R12,R12SAVE         Reload return address
SKIPC    EQU   *
         CLC   WORK2(2),ZEROS3     Are low-order 2 digits 0S
         BE    EXITRTN3            If yes, EXIT
         PACK  WORKD,WORK2
         CVB   R9,WORKD
         CH    R9,H19
         BH    SRCHTBLT
SRCHTBLU EQU   *
         BCTR  R9,0                Develop Index value
         MH    R9,H10                for accessing UTABLE
         LA    R10,UTABLE(R9)      Point R10 to entry in UTABLE
         B     MOVEWORD
SRCHTBLT EQU   *
         PACK  WORKD,WORK2A        '2' IN 321
         CVB   R9,WORKD
         SH    R9,H02              Compute
         MH    R9,H08                Indexing value
         LA    R10,TTABLE(R9)      Point R10 to entry in TTABLE
         CLI   WORK2B,C'0'         Check Unit digit
         BZ    MOVEWORD
         IC    R8,0(R10)           Get L-code for the MVC instruction
         EX    R8,MOVE#TXT         Get 'TWENTY'
         AR    R6,R8               R8 has length-code of Word moved
         MVI   1(R6),C'-'          '-' in TWENTY-ONE
         LA    R6,2(R6)            Point R6 to next available position
         AR    R7,R8               Increment
         AH    R7,H02                COUNT register
         PACK  WORKD,WORK2B        '1' IN 321
         CVB   R9,WORKD
         BCTR  R9,0                Compute Indexing
         MH    R9,H10                value for UTABLE
         LA    R10,UTABLE(R9)      Point R10 to entry in UTABLE
MOVEWORD EQU   *
         IC    R8,0(R10)           Remember L-code is length minus 1
         EX    R8,MOVE#TXT
         AH    R8,H02              get length of text + trailing space
         AR    R6,R8               Point R6 to nxt avlbl posn
         AR    R7,R8               Increment COUNT register
EXITRTN3 BR    R12          ***  Exit from RTNDGTS3  ***
MOVE#TXT MVC   0(*-*,R6),1(R10)    For moving text snippets from tabls
RTNDGT1  EQU   *
         PACK  WORKD,WORK1
         CVB   R9,WORKD
         BCTR  R9,0                Compute index
         MH    R9,H10                value for UTABLE
         LA    R10,UTABLE(R9)
         IC    R8,0(R10)           Pick up 1-byte L-code
         EX    R8,MOVE#TXT           and move the text
         AH    R8,H02
         AR    R6,R8
         AR    R7,R8
         MVC   0(7,R6),LITERAL7       'MILLION' or 'HUNDRED'
         AH    R6,H08
         AH    R7,H08
         BR    R12          ***  Exit point from RTNDGT1  ***
UTABLE   EQU   *                   Unit Table
         DC    X'02',CL9'ONE'      1-byte L-code,
         DC    X'02',CL9'TWO'        followed by up to
         DC    X'04',CL9'THREE'        9 bytes of text
         DC    X'03',CL9'FOUR'
         DC    X'03',CL9'FIVE'
         DC    X'02',CL9'SIX'
         DC    X'04',CL9'SEVEN'
         DC    X'04',CL9'EIGHT'
         DC    X'03',CL9'NINE'
         DC    X'02',CL9'TEN'
         DC    X'05',CL9'ELEVEN'
         DC    X'05',CL9'TWELVE'
         DC    X'07',CL9'THIRTEEN'
         DC    X'07',CL9'FOURTEEN'
         DC    X'06',CL9'FIFTEEN'
         DC    X'06',CL9'SIXTEEN'
         DC    X'08',CL9'SEVENTEEN' "SEVENTEEN" is 9 bytes long
         DC    X'07',CL9'EIGHTEEN'
         DC    X'07',CL9'NINETEEN'
TTABLE   EQU   *                   Tens Table
         DC    X'05',CL7'TWENTY'
         DC    X'05',CL7'THIRTY'
         DC    X'04',CL7'FORTY'
         DC    X'04',CL7'FIFTY'
         DC    X'04',CL7'SIXTY'
         DC    X'06',CL7'SEVENTY'  "SEVENTY" is 7 bytes long
         DC    X'05',CL7'EIGHTY'
         DC    X'05',CL7'NINETY'
CENTSTXT DS    0CL13               "& .xx DOLLARS"
         DC    XL3'50404B'         "& ."
CENTSIN  DS    CL2
         DC    CL8' DOLLARS'
LITERAL7 DC    CL7'HUNDRED'        Field of variable content
LITERALC DC    CL7'HUNDRED'
LITERALM DC    CL7'MILLION'
LITERALK DC    CL8'THOUSAND'
LITERALZ DC    CL4'ZERO'
ZEROS7   DS    0CL7
ZEROS3   DC    CL3'000'
         DC    CL4'0000'
WORKD    DS    D
R12SAVE  DS    F
         ORG   WORKD
WORK9    DS    CL9
         ORG   ,
RCVALUE  DC    H'00'
H02      DC    H'02'
H08      DC    H'08'
H10      DC    H'10'
H19      DC    H'19'
WORK3    DS    0CL3
WORK1    DS    CL1
WORK2    DS    0CL2
WORK2A   DS    CL1
WORK2B   DS    CL1
DUMMY1   DSECT ,      Mapping of parameters supplied by the Calling prog
NUMRCAMT DS    CL9                      PIC S9(7)V99.
ALPHAAMT DS    CL92                     PIC X(92).
CNTFLDS  DS    0CL6
CNTFLDT  DS    XL2                      PIC S99  COMP.
CNTFLD1  DS    XL2                      PIC S99  COMP.
CNTFLD2  DS    XL2                      PIC S99  COMP.
ERRCODE  DS    CL1                      PIC 9.
         END


B S Oberoi
Manager Technical Services
Allendale Insurance (USA)	© Xephon 1989

