Linear datasets

There have been brief references to Linear Datasets, supporting the Data in
Virtual (DIV) facility, available at the end of 1987 in MVS/XA 2.2 with DFP 2.3.
It introduces some new terms into the data processing vocabulary, as if we did
not have enough already!

A Linear Dataset (LDS) is a series of 4K VSAM Control Intervals (CIs) that
contain a DIV object.  These CIs can only be processed by Control Interval
processing (see VSAM Advanced Programming GC26-3819, among others).  There is no
Control Interval Definition Field (CIDF), nor any Record Definition Fields
(RDFs), just 4K of data.  In fact there is no specific reason why it is
classified as a VSAM file, which must lead to some speculation.  The
implementation of LDS in MVS/XA does not even require the user to know about CI
processing, since a series of operands for the DIV macro (no HLL support has
been announced) causes all the necessary data transfer to take place
transparently.  There follows a description of the logical sequence of events in
processing a Linear Data Set, which should serve to give a brief overview of how
Data in Virtual is implemented.

The application program will first issue a DIV IDENTIFY - the equivalent of
allocation, involving JCL statements describing the LDS.  Multiple DIV IDENTIFY
macros enable you to reference a number of LDSs or the same LDS a number of
times.

Next, the program will issue DIV ACCESS, the equivalent of OPEN, at which point
RACF authorisation will be invoked if appropriate.  At this point, you indicate
to the system that the object is for update or read-only.  Upon completion of
DIV ACCESS, the current size of the object (in bytes) is returned.

You must then acquire the amount of virtual storage that is necessary to contain
the data that you wish to process.  It may be equal to, less than, or greater
than the size of the object.  The storage thus acquired is then specified to the
DIV MAP macro, which relates a section of the object (all or part) to the
virtual storage.  The selected data will not, however, be read into storage at
the time that the macro is executed, but to all intents and purposes the
application may treat it as if it were.  Subsequent reference to the data (using
a storage address directly) must assume that all the relevant data is
contiguously mapped into the specified storage area.  The first reference to any
byte in a 4K segment will cause a page fault and the 'page' is read into storage
from the LDS.  The application then continues executing, using any of the data
in that 4K page.  The first reference to any other 'page' will also cause a page
fault, which will be resolved in a like manner.  Once in storage, the 4K 'pages'
are handled by page and auxiliary storage management in the manner that you
would expect, thus:

¥    The frequently referenced pages remain in real storage

¥    Less frequently used pages are migrated to Expanded Page Storage (if
available)
¥    Low activity pages are moved to DASD storage only if they have been
modified, otherwise they are thrown away, being re-collected from the LDS if
required subsequently.

As processing continues, the file, or a subset, will be effectively managed by
the paging subsystem and hence the spectre of locality of reference will
doubtless emerge.  This becomes more important if you actually perform updates
to your data and wish them to be written back to the LDS.  Execution of DIV SAVE
causes all updated pages to be written back to the LDS (including any extensions
added to the end).  Note that this is the only means whereby updates are
achieved.  Note also that only changed pages are re-written - unmodified pages
are left.

Conversely, you may wish to negate the changes that you have performed and thus
leave the object intact.  Execution of DIV RESET causes all changes from the

last save to be reversed in the main storage image of the object.  A subsequent
DIV SAVE is of no use.

At the end of processing by your application, you simply reverse the IDENTIFY,
ACCESS and MAP functions using DIV UNMAP, FREEMAIN, DIV UNACCESS and DIV
UNIDENTIFY in the relevant manner.

The opportunities for Data in Virtual are ripe for exploitation, but, as with
nearly everything connected with VSAM (however tenuous this link), there are a
number of potential pitfalls of which you should be aware:

¥    A large object with a wide locality of reference is not really suitable.

¥    Small objects (5MB or less) or large objects with a narrow locality of
reference are highly suited.

¥    A low write-to-read ratio is desirable (unless you use RESET rather than
SAVE).

¥    All I/O that is performed on your behalf has implicit WAITs -rendering Data
in Virtual inappropriate for a CICS region (unless dedicated using MRO).

¥    You cannot convert a VSAM dataset (KSDS, ESDS, RRDS) to an LDS and expect
to access it without making program changes

¥    It must be defined as SHR(1 3)

¥    Anybody can DEFINE an LDS using AMS, and unfettered usage could have a
severe impact upon your system.

Despite the above, I believe that there are a number of areas where an LDS could
be a distinct advantage, although I suspect that they will occur in new
applications rather than be 'shoehorned' into existing applications to replace
current techniques.  However, in this latter category, the MANTIS SETPRAY and
RACF profiles may be very suitable candidates.



Mike Kerford-Byrnes
Independent Consultant (UK)   © Mike Kerford-Byrnes 1987


























