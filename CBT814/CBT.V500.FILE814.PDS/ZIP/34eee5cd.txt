Condition code checking in JCL

When writing complex JCL, it is sometimes difficult to execute
a final 'notify' or 'write to operator' step when a preceding step
has failed.  If a step fails, it is sometimes desirable to run later
steps instead of bypassing them.  An example of this is a job in
which each step EXPORTs a catalog for back-up purposes.  If
one EXPORT step fails, it is still necessary to execute the other
steps.  Then it may be desirable to execute a notify step to
notify programmers or operators that a step has failed.  It is not
sufficient to code COND=(0,EQ) on the last step of a job.  If
one step of the job completes with a condition code of zero
then this test is satisfied and the final step is not executed even
if another step has failed.

The program WBMAXCC has been written to solve this
problem.  WBMAXCC returns in the condition code the
maximum condition code of the previous steps in the job.  If a
previous step abended, the condition code is set to 999.
WBMAXCC may be coded to execute as the second to last step
of a job.  It is then easy to code JCL for a final step which will
check the condition code from the WBMAXCC step and notify
the appropriate people.

EXAMPLE

An example of the use this programs is shown below.  Only
JOB and EXEC cards are shown.  The final step should be
replaced by a locally written notify step.

//CATEXPRT JOB (0470,SP53),SYSTEM,CLASS=H,MSGCLASS=X,NOTIFY=CHD
//EXPORT1  EXEC PGM=IDCAMS
//EXPORT2  EXEC PGM=IDCAMS
//EXPORT3  EXEC PGM=IDCAMS
//* GET THE MAXIMUM CC FOR THE JOB
//MAXCC EXEC PGM=WBMAXCC,COND=EVEN
//* NOTIFY THE MVS GROUP
//NOTIFY  EXEC PGM=WBSEND,COND=((4,GE,MAXCC),EVEN),
//        PARM='***** JOB CATEXPRT HAS FAILED *****'

WBMAXCC SOURCE CODE

The program has been tested on an MVS/XA 2.2 system.  It
needs to be run APF authorised.

         MACRO
&LABEL   ASM   &TYPE=
&LABEL   CSECT
         USING *,R15
         B     *+34
         DC    AL1(29),CL8'&LABEL'     IDENTIFIER
         DC    C' AT &SYSTIME ON &SYSDATE'
         STM   R14,R12,12(R13)         SAVE REGISTERS IN CALLERS SA
         LR    R12,R13                 SAVE CALLERS SA ADDRESS
         CNOP  0,4
         LA    R13,*+24                POINT OUR R13 TO OUR SA
         ST    R13,8(,R12)             STORE OUR SA ADDRESS IN CALLERS
         ST    R12,4(,R13)             STORE CALLERS SA ADDRESS IN OURS
         LA    R12,4095(,R13)          PREPARING TO SET UP 2ND BASE REG
         LA    R12,1(,R12)             COMPLETE SETTING UP 2ND BASE
         B     *+102                   BRANCH OVER OUR SAVE AREA
         USING *,13,12                 SET UP ADDRESSABILITY
XASMSAVE DC    18F'0'                  OUR SAVE AREA
SWB000   DC    F'0'                    FOR COND. CODE PASSING IF NEEDED
SWBEXIT1 L     R15,SWB000              SET UP COND. CODE IN R15
SWBEXIT2 L     R13,4(,R13)             RE-ESTABLISH CALLERS SA ADDRESS
         LM    R0,R12,20(R13)          RESTORE R0 - R12
         L     R14,12(,R13)            RESTORE ALL IMPORTANT R14
         MVI   12(R13),255             SET 'I'VE BEEN HERE' FLAG
         BR    R14                     RETURN TO CALLER
WB000    EQU   SWB000-XASMSAVE,4       EQUATES FOR MULTIPLE CSECTS
WBEXIT1  EQU   SWBEXIT1-XASMSAVE,4
WBEXIT2  EQU   SWBEXIT2-XASMSAVE,4
RWBASE   EQU   13                      BASE REG IS R13 FOR RETURN
         MEND
         TITLE 'WBMAXCC - SET CC TO MAX CC OF PREVIOUS STEPS'
* DESCRIPTION: THIS PROGRAM SETS A CONDITION CODE ACCORDING   *
*              TO THE MAXIMUM CONDITION CODE OF THE PREVIOUS  *
*              STEPS. IF A PREVIOUS STEP ABENDED, THE MAXIMUM *
*              CONDITION CODE IS SET TO 999.                  *
WBMAXCC  AMODE 24
WBMAXCC  RMODE 24
WBMAXCC  ASM
* GET ACTIVE JSCB                                         *
         L      R2,540                 PSATOLD
         N      R2,MASK                ZERO TOP BYTE
         USING  TCB,R2                 ADDRESS TCB
         L      R2,TCBJSCB
         USING  IEZJSCB,R2             ADDRESS ACTIVE JSCB
         L      R2,JSCBACT
         MVC    SAVESVA(3),JSCSCTP     SAVE CURRENT SCT SVA
* SET UP FOR IEFQMREQ, THE MOVE MODE SWA MANAGER         *
         USING  ZB506,R9               ADDRESS EPA
         LA     R9,EPA
         USING  IOPARAMS,R10           ADDRESS QMPA
         LA     R10,QMPA
* SET UP THE QMPA
         MVI    QMPOP,X'04'            READ
         MVI    QMSTA,X'80'            4 BYTE EPA ADDR
         MVI    QMPCL,X'01'            COUNT
         LA     R4,EPA                 GET EPA ADDRESS
         ST     R4,QMPACLX             STORE IN QMPA
* GET JCT FROM JSCB SO WE CAN FOLLOW SCT CHAIN           *
* SET UP THE EPA
         MVC    SWROWVA(3),JSCBJCTA    MOVE SVA FOR JCT
         LA     R4,JCT                 LOAD SVA FOR JCT
         ST     R4,SWBUFPTR            STORE IN EPA
         MODESET MODE=SUP              ENTER SUPERVISOR STATE
         LA     R1,IOPARAMS            POINT TO QMPA
         LR     R5,R13                 SAVE R13 (WHICH IS OUR BASE)
         LA     R13,SAVEAREA
         IEFQMREQ                      INVOKE THE MOVE SWA MANAGER
         LR     R13,R5                 RESTORE R13 (WHICH IS OUR BASE)
         LR     R6,R15                 SAVE R15
         MODESET MODE=PROB             RETURN TO PROBLEM STATE
         LTR    R6,R6                  SUCCESSFUL COMPLETION FROM SWA?
         BZ     NEXT1                  YES
         ABEND  101,DUMP
NEXT1    DS     0H
* GET THE PREVIOUS SCT'S                                   *
*     - GET FIRST SCT FROM JCT                             *
*     - THEN GET EACH SCT UNTIL THE CURRENT ONE IS REACHED *
* SET UP THE EPA
         USING  INJMJCT,R2           ADDRESS JCT
         LA     R2,JCT
         CLC    SAVESVA(3),JCTSDKAD  IS THIS STEP THE ONLY STEP?
         BE     FINISH               YES
         MVC    SWROWVA(3),JCTSDKAD  MOVE SVA FOR FIRST SCT
         DROP   R2
         LA     R4,SCT               ADDRESS SCT
         ST     R4,SWBUFPTR
LOOP     DS     0H
         MODESET MODE=SUP              ENTER SUPERVISOR STATE
         LA     R1,IOPARAMS POINT TO QMPA
         LR     R5,R13                 SAVE R13 (WHICH IS OUR BASE)
         LA     R13,SAVEAREA
         IEFQMREQ
         LR     R13,R5                 RESTORE R13 (WHICH IS OUR BASE)
         LR     R6,R15                 SAVE R15
         MODESET MODE=PROB             RETURN TO PROBLEM STATE
         LTR    R6,R6                  SUCCESSFUL COMPLETION FROM SWA?
         BZ     NEXT2                  YES
         ABEND  102,DUMP
NEXT2    DS     0H
* CALCULATE MAX CC                                       *
         USING  INSMSCT,R2             ADDRESS SCT
         LA     R2,SCT
         TM     SCT+160,X'04'          TEST IF THIS STEP ABENDED
         BNO    CC                     NO
         MVC    MAXCC+2(2),NINES       MOVE NINES IF STEP ABENDED
         B      FINISH                 EXIT
CC       CLC    MAXCC+2(2),SCTSEXEC    HIGHER THAN PREVIOUS MAX CC?
         BH     HIGH                   NO
         MVC    MAXCC+2(2),SCTSEXEC    MOVE NEW MAXIMUM CC
HIGH     DS     0H
         CLC    SAVESVA(3),SCTANSCT    BACK TO CURRENT SCT?
         BE     FINISH                 YES
         MVC    SWROWVA(3),SCTANSCT    GET SVA OF NEXT SCT
         B      LOOP                   INVOKE SWA MANAGER AGAIN
         DROP   R2
FINISH   L      R15,MAXCC              SET MAXCC IN CONDCODE
         B      SWBEXIT2               RETURN TO CALLER
QMPA     DS     9F
EPA      DS     2F
SCT      DS     44F
JCT      DS     90F
SAVEAREA DS     20F
JSCB     DS     1F
MASK     DC     X'00FFFFFF'
MAXCC    DS     1F
NINES    DC     H'999'
SAVESVA  DC     C'   '                 SAVE SVA FOR CURRENT SCT
         IEFQMNGR
         IEFZB506
         CVT DSECT=YES
         IEFJESCT
         IEFAJCTB
         IEFASCTB
         IEZJSCB
         IKJTCB
         END


Colin Helmstedt
Senior Systems Programmer
Water Board (Australia)                              © Water Board 1990

