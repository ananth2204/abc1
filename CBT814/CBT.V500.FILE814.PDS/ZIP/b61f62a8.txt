A job execution tracking facility

I have developed two programs that can be used to keep track
of job execution in any system.  In our shop, every production
job of one application system has the following step at the
beginning:

//STEP01  EXEC PGM=PCAS002,PARM=S
//CASJLOG DD   DSN=PAYROLL.PROD.JOBLOG,DISP=(MOD,KEEP,KEEP)
//SYSOUT  DD   SYSOUT=*

and has the following step at the end:

//STEP99  EXEC PGM=PCAS002,PARM=E
//CASJLOG DD   DSN=PAYROLL.PROD.JOBLOG,DISP=(MOD,KEEP,KEEP)
//SYSOUT  DD   SYSOUT=*

Therefore, a record of the execution of every job is recorded in
the JOBLOG dataset, which, in this case, is
PAYROLL.PROD.JOBLOG.  To illustrate this utility, suppose
job JAR01 has the first and last step as shown above.  When
this job executes, four lines will be added to the JOBLOG
dataset.  These four lines may look like these:

JOB  951 JAR01    EXECUTION STARTING ON 91/05/07  TIME: 11:03:44
PROGRAMMER NAME: SMITH-EX9335          MSGCLASS: Q  JOB CLASS: 0
JOB  951 JAR01    EXECUTION ENDING ON   91/05/07  TIME: 11:03:46
PROGRAMMER NAME: SMITH-EX9335          MSGCLASS: Q  JOB CLASS: 0

Every time PCAS002 is executed, it writes two records in the
JOBLOG dataset.  The following information is recorded in
these two records:

o      Job number
o      Job name from the job card
o      Whether running with PARM=S or with PARM=E
o      Date and time of execution
o      Programmer name from the job card
o      MSGCLASS from the job card
o      Job class from the job card.

The information recorded in the JOBLOG dataset will help the
system analysts responsible for the system in tracing the
execution of jobs.  Also, if a production job abended and was
restarted from a step in the middle, the information in
JOBLOG dataset will indicate this.


PCAS001 SOURCE CODE

* MACLIBS: SYS1.MACLIB, SYS1.HASPSRC, SYS1.AMODGEN AND SYS1.MACLIB
* ASSEMBLE AND LINK-EDIT THIS ROUTINE AS A REGULAR ASSEMBLER ROUTINE.
* THIS ROUTINE IS A MULTI-PURPOSE ROUTINE.
* HERE IS AN EXAMPLE OF CALLING THIS ROUTINE IN A COBOL PROGRAM WITH
* FUNCTION CODE OF ZERO:
*   CALL 'PCAS001' USING FUNC-NUM INFO-AREA
* WHERE FUNC-NAME IS DEFINED IN W-S AS A FULL-WORD, AS FOLLOWS:
*   01  FUNC-NAME      PIC S9(8) COMP.
* AND INFO-AREA IS DEFINED IN W-S AS IN THIS EXAMPLE:
*   01  INFO-AREA      PIC X(80).
* 1. NO NEED TO HAVE 'COPY REGDEF' BECAUSE REGISTER EQUATES ARE
*    CONTAINED IN MACRO $HASPEQU.
PCAS001  CSECT
         USING PCAS001,R15      PROVIDE TEMPORARY ADDRESSABILITY
         SAVE  (14,12),T,'PCAS001 &SYSDATE &SYSTIME'
         LA    R12,SAVEAREA     LOAD R12 WITH ADDRESS OF MY SAVE AREA
         ST    R13,4(R12)       STORE ADDRESS OF CALLER'S SAVE AREA
*                               IN MY SAVE AREA
         ST    R12,8(R13)       STORE ADDRESS OF MY SAVE AREA IN
*                               CALLER'S SAVE AREA
         LR    R13,R12          LOAD R13 WITH ADDRESS OF MY SAVE AREA
         LR    R12,R15          LOAD R12 WITH ADDRESS OF THIS PROGRAM
         DROP  R15              DROP TEMPORARY ADDRESSABILITY
         USING PCAS001,R12      PROVIDE PERMANENT ADDRESSABILITY
REALWORK EQU   *
         L     R9,0(R1)         POINT R9 TO FUNCTION CODE (FIRST PARM)
         CLC   0(4,R9),=F'0'    IS FUNCTION CODE CODE = ZERO?
         BE    FUNC00
* TESTING FOR OTHER FUNCTION CODES GOES HERE. IF FUNCTION CODE IS
* INVALID, EXIT TO CALLER WITH RETURN CODE OF 4.
         LA    R15,4            SET RETURN CODE TO 4
         B     EXIT
FUNC00   EQU   *
         L     R10,4(R1)        POINT R10 TO RESULT-AREA (SECOND PARM)
         L     R2,CVTPTR        POINT TO CVT
         USING CVT,R2           PROVIDE CVT ADDRESSABILITY
         L     R1,CVTTCBP       POINT TO TCB/ASCB WORD(S)
         L     R3,4(R1)         POINT TO OUR TCB
         USING TCB,R3           PROVIDE TCB ADDRESSABILITY
         L     R4,TCBJSCB       POINT TO OUR JSCB
         USING IEZJSCB,R4       PROVIDE JSCB ADDRESSABILITY
         L     R5,JSCBSSIB      POINT TO SSIB
         USING SSIB,R5          PROVIDE SSIB ADDRESSABILITY
         L     R6,SSIBSUSE      POINT TO SJB
         USING SJB,R6           PROVIDE SJB ADDRESSABILITY
* FOLLOWING TWO STATEMENTS WILL ALSO GIVE YOU JOB NUMBER (JOBNNNNN) AND
* JOB NAME, BUT WE HAVE OPTED TO OBTAIN THESE TWO FIELDS FROM THE JCT.
*****    MVC   0(8,R10),SJBJOBID  SET JOB NUMBER (JOBNNNNN)
*****    MVC   8(8,R10),SJBJOBNM  SET JOB NAME (FROM JOB CARD)
         L     R7,SJBJCT        POINT TO JES JCT
         USING JCT,R7           PROVIDE JES JCT ADDRESSABILITY
         MVC   0(8,R10),JCTJOBID    SET JOB NUMBER (JOBNNNNN)
         MVC   8(8,R10),JCTNAME     SET JOB NAME (FROM JOB CARD)
         MVC   16(20,R10),JCTPNAME  SET PROGRAMMER NAME (FROM JOB CARD)
         MVC   36(1,R10),JCTMCLAS   SET MSGCLASS FROM JOB CARD
         MVC   37(1,R10),JCTJCLAS   SET JOB CLASS FROM JOB CARD
         SR    R15,R15          SET RETURN CODE TO ZERO.
EXIT     EQU   *
         L     R13,4(R13)       POINT TO PREVIOUS SAVE AREA
         RETURN (14,12),T,RC=(15) TERMINATE THE TASK
         LTORG
SAVEAREA DC    9D'0'
         CVT   DSECT=YES,LIST=NO
         IKJTCB DSECT=YES,LIST=NO
         IEZJSCB
         IEFJSSIB
         IHAASCB DSECT=YES,LIST=NO
         IHAASXB DSECT=YES
         IFGRPL DSECT=YES,AM=VSAM
         $HASPEQU
         $TQE
         $SJB
         $BUFFER
         $JCT
         END


PCAS002 SOURCE CODE

 IDENTIFICATION DIVISION.
 PROGRAM-ID          PCAS002.
* THIS PROGRAM IS THE JOB START/END SYSTEM LOG RECORDING PROGRAM.
* IT SHOULD BE EXECUTED IN THE FIRST STEP (WITH PARM=S) AND IN THE
* LAST STEP (WITH PARM=E) IN EVERY PRODUCTION JOB OF ANY
* APPLICATION SYSTEM SUCH PAYROLL, BILLING, ETC.
 ENVIRONMENT DIVISION.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
     SELECT CAS-JOBLOG-FILE
       ASSIGN TO UT-S-CASJLOG.
 DATA DIVISION.
 FILE SECTION.
 FD  CAS-JOBLOG-FILE
     LABEL RECORD IS STANDARD
     BLOCK CONTAINS 0 RECORDS.
 01  CAS-JOBLOG-REC            PIC X(120).
 WORKING-STORAGE SECTION.
 01  DASHES                  PIC X(120) VALUE ALL '='.
 01  WS-DATE-1.
     05 D1-MM                PIC X(2).
     05 FILLER               PIC X(1).
     05 D1-DD                PIC X(2).
     05 FILLER               PIC X(1).
     05 D1-YY                PIC X(2).
 01  FUNCTION-CODE           PIC S9(8) COMP VALUE ZERO.
 01  WS-DATE-2.
     05 D2-YY                PIC X(2).
     05 FILLER               PIC X(1) VALUE '/'.
     05 D2-MM                PIC X(2).
     05 FILLER               PIC X(1) VALUE '/'.
     05 D2-DD                PIC X(2).
 01  RESULT-AREA.
     05 JCT-JOB-ID           PIC X(8).
     05 JCT-JOB-NAME         PIC X(8).
     05 JCT-PROGRAMMER-NAME  PIC X(20).
     05 JCT-MSGCLASS         PIC X.
     05 JCT-JOBCLASS         PIC X.
     05 FILLER               PIC X(42).
 01  START-LINE-1.
     05 START-JOB-ID         PIC X(08).
     05 FILLER               PIC X VALUE SPACE.
     05 START-JOB-NAME       PIC X(08).
     05 FILLER               PIC X(10) VALUE ' EXECUTION'.
     05 FILLER               PIC X(13) VALUE ' STARTING ON '.
     05 START-DATE           PIC X(8).
     05 FILLER               PIC X(2)  VALUE SPACES.
     05 FILLER               PIC X(06) VALUE 'TIME: '.
     05 START-TIME           PIC 99B99B99.
 01  START-LINE-2.
     05 FILLER               PIC X(17) VALUE 'PROGRAMMER NAME: '.
     05 START-PROGRAMMER-NAME PIC X(20) VALUE SPACES.
     05 FILLER               PIC X(02) VALUE  SPACES.
     05 FILLER               PIC X(10) VALUE 'MSGCLASS: '.
     05 START-MSGCLASS       PIC X VALUE SPACE.
     05 FILLER               PIC X(02) VALUE  SPACES.
     05 FILLER               PIC X(11) VALUE 'JOB CLASS: '.
     05 START-JOBCLASS       PIC X VALUE SPACES.
 01  END-LINE-1.
     05 END-JOB-ID           PIC X(08) VALUE SPACES.
     05 FILLER               PIC X VALUE SPACE.
     05 END-JOB-NAME         PIC X(08) VALUE SPACES.
     05 FILLER               PIC X(10) VALUE ' EXECUTION'.
     05 FILLER               PIC X(13) VALUE ' ENDING ON   '.
     05 END-DATE             PIC X(8) VALUE SPACE.
     05 FILLER               PIC X(2)  VALUE SPACES.
     05 FILLER               PIC X(06) VALUE 'TIME: '.
     05 END-TIME             PIC 99B99B99.
 01  END-LINE-2.
     05 FILLER               PIC X(17) VALUE 'PROGRAMMER NAME: '.
     05 END-PROGRAMMER-NAME  PIC X(20) VALUE  SPACES.
     05 FILLER               PIC X(02) VALUE  SPACES.
     05 FILLER               PIC X(10) VALUE 'MSGCLASS: '.
     05 END-MSGCLASS         PIC X VALUE SPACES.
     05 FILLER               PIC X(02) VALUE  SPACES.
     05 FILLER               PIC X(11) VALUE 'JOB CLASS: '.
     05 END-JOBCLASS         PIC X VALUE SPACES.
 LINKAGE SECTION.
 01  LS-PARM.
     05 FILLER         PIC X(02).
     05 LS-RUN-TYPE    PIC X(01).
        88 JOB-START   VALUE 'S'.
        88 JOB-END     VALUE 'E'.
 PROCEDURE DIVISION USING LS-PARM.
     IF JOB-START OR JOB-END
       NEXT SENTENCE
     ELSE
       DISPLAY DASHES
       DISPLAY 'LS-RUN-TYPE PASSED TO PCAS002 MUST BE <S> FOR '
       DISPLAY 'JOB START AND <E> FOR JOB END. THIS RULE HAS NOT'
       DISPLAY 'BEEN FOLLOWED. HENCE EXECUTION OF PCAS002 HAS '
       DISPLAY 'BEEN TERMINATED. PLEASE CORRECT THIS ERROR AND '
       DISPLAY 'RERUN THE JOB.'
       DISPLAY DASHES
       STOP RUN.
     OPEN OUTPUT CAS-JOBLOG-FILE.
     IF JOB-START
       PERFORM START-RTN
     ELSE
       PERFORM END-RTN.
     CLOSE CAS-JOBLOG-FILE.
     STOP RUN.
 START-RTN.
     CALL 'PCAS001' USING FUNCTION-CODE  RESULT-AREA.
     MOVE JCT-JOB-ID          TO START-JOB-ID.
     MOVE JCT-JOB-NAME        TO START-JOB-NAME.
     MOVE JCT-PROGRAMMER-NAME TO START-PROGRAMMER-NAME.
     MOVE JCT-MSGCLASS        TO START-MSGCLASS.
     MOVE JCT-JOBCLASS        TO START-JOBCLASS.
     MOVE CURRENT-DATE TO WS-DATE-1.
     MOVE D1-YY TO D2-YY.
     MOVE D1-MM TO D2-MM.
     MOVE D1-DD TO D2-DD.
     MOVE WS-DATE-2 TO START-DATE.
     MOVE TIME-OF-DAY TO START-TIME.
     EXAMINE START-TIME REPLACING ALL SPACE BY ':'.
     WRITE CAS-JOBLOG-REC FROM START-LINE-1.
     WRITE CAS-JOBLOG-REC FROM START-LINE-2.
 END-RTN.
     CALL 'PCAS001' USING FUNCTION-CODE  RESULT-AREA.
     MOVE JCT-JOB-ID          TO END-JOB-ID.
     MOVE JCT-JOB-NAME        TO END-JOB-NAME.
     MOVE JCT-PROGRAMMER-NAME TO END-PROGRAMMER-NAME.
     MOVE JCT-MSGCLASS        TO END-MSGCLASS.
     MOVE JCT-JOBCLASS        TO END-JOBCLASS.
     MOVE CURRENT-DATE TO WS-DATE-1.
     MOVE D1-YY TO D2-YY.
     MOVE D1-MM TO D2-MM.
     MOVE D1-DD TO D2-DD.
     MOVE WS-DATE-2 TO END-DATE.
     MOVE TIME-OF-DAY TO END-TIME.
     EXAMINE END-TIME REPLACING ALL SPACE BY ':'.
     WRITE CAS-JOBLOG-REC FROM END-LINE-1.
     WRITE CAS-JOBLOG-REC FROM END-LINE-2.


JCL TO EXECUTE PCAS002

//JOBNAME   JOB (645110,07,99,99),'NIRMAL-X6695',MSGCLASS=Q,CLASS=0,
//   NOTIFY=TSOUSER
/*JOBPARM P=PROC33
//JOBLIB  DD   DISP=SHR,DSN=SYS3.LOADLIB
//* TEST PCAS002
//STEP01  EXEC PGM=PCAS002,PARM=S
//CASJLOG DD   DSN=PAYROLL.PROD.JOBLOG,DISP=(MOD,KEEP,KEEP)
//SYSOUT  DD   SYSOUT=*
//STEP01  EXEC PGM=PCAS002,PARM=E
//CASJLOG DD   DSN=PAYROLL.PROD.JOBLOG,DISP=(MOD,KEEP,KEEP)
//SYSOUT  DD   SYSOUT=*


Barry K Nirmal
SCECO East (Saudi Arabia)                   c Barry Nirmal 1991

