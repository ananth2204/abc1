Using name/token services

For years, if you had some information that you wanted to create
and allow other address spaces (or even other tasks) to find, there
were few good ways to do it. By far the most common was to
create an additional entry on the Subsystem Communication
Vector Table (SSCT) chain. This could be done either on the fly
(very carefully) or by using an entry in
SYS1.PARMLIB(IEFSSNxx) that would cause MVS to create
one for you automatically. The technique was that all the SSCTs
were chained together from CVTJESCT. This meant that any task
or address space could search for an SSCT with the pre-
determined subsystem name of ABCD, for example, and then find
a pointer to the desired data area. This worked fine but had the
effect of  extending the SSCT chain unnecessarily for the sole
purpose of having a way of finding one's data again.

Finally, in MVS/ESA 4.2.2 a new callable service called
name/token service was introduced. This service allows you to
give MVS a 16-byte token and a 16-byte name by which you
wish to reference the name/token pair. This allows you to
accomplish what we described in the previous paragraph but with
a lot less effort.

The names that you use should follow the following guidelines so
you don't conflict with names used by IBM products.

o      Don't use names starting with A through I

o      Don't use names starting with X'00'.

The names that you use must also be unique within a level. For
example, you may have a system-level name and a task-level
name which are the same but you can't have two system-level
names which are the same.

The name/token service allows you to establish name/token pairs
at various scopes: namely, system-wide, address-space wide, and
task. The only scope which requires you to be APF-authorized is
the system-wide one: the other scopes can be established by any
program. Since these are callable services, a COBOL program
could also use these services.

The three callable services are IEANTCR (create a pair),
IEANTDL (delete a pair), and IEANTRT (retrieve a pair). The
modules reside in SYS1.CSSLIB unless your installation has
chosen to put them somewhere else. This library contains most of
the MVS Callable System Services. When you call one of the
services you have a choice to make as to how you wish to call it.
You can either do a static call to the service and link edit the
service module with your program or you can call it dynamically
using LINK or LOAD. If  you choose the latter you should
ensure that SYS1.CSSLIB is in your system LINKLIST (member
LNKLSTxx in SYS1.PARMLIB). If you are using MVS/ESA 4.3
or later you do not need to check this because SYS1.CSSLIB will
be automatically in the LINKLIST after SYS1.LINKLIB and
SYS1.MIGLIB.

So, how do I use it? Well, it's actually quite simple. Let's take the
simple non-authorized case first. Suppose your main task is going
to allocate a data area which the daughter tasks need access to.
Your main task would then do the following:

o      Call IEANTCR with the name DATA TABLE and a 16-
      byte area containing the address of the data area in the first
      four bytes and specify also that an address-space level pair is
      desired. The rest of the 16-byte area would be empty.

o      Check return codes to make sure the pair was created.

When one of the daughter tasks needs to find the data area, it can
do the following:

o      Call IEANTRT with the name DATA TABLE and a 16-
      byte area to hold the retrieved data associated with this name.

o      Check return codes to verify that it has been retrieved
      successfully.

Once processing is completed for the address space and the
subtasks have ended, the main task can call the IEANTDL service
to delete the pair. This describes the basic process of using the
name/token services.

Advanced Options

Beyond the basic level of the name/token services, there are some
advanced options for APF-authorized programs.

First of all, the establishment of system-wide pairs is restricted to
authorized programs. This is because name/token pairs use
common storage and the unrestricted use of them would not be
desirable just as normal programs are not allowed to allocate
common storage today. The use of system-wide pairs is useful
mainly for started tasks which provide services to other address
spaces. A started task which offers services to other users
frequently needs somewhere to keep things like PC numbers,
pointers to processing routines in common storage, data structures
needed by the user address space, etc. A name/token pair allows
the started task to set this all up at start-up time and then the code
running in the user address space can retrieve the pair when
necessary to find the information which the started task set up.

Secondly, system-wide pairs can be established with the option of
persistence. Persistence means the name/token pair remains intact
after the address space or task that established it has ended.
Normally, a pair would only live until the establisher ends (either
normally or abnormally). However, in some situations, it is
desirable to have the pair remain after the establisher has ended.
There are a couple of circumstances that I can think of where this
is useful. One would be if a frequently used data area was loaded
into common storage and then referred to by many different users.
A nice way to do this would be to run a job which created the
data area in a system-oriented subpool and then created a system-
level persistent name/token pair. Since the pair is persistent and
the data area is in a subpool which will remain allocated after the
job ends, the job can end and the data can be used by various
users during the life of the IPL. If the system is IPLed, the job
would have to be run again to recreate the environment. Another
situation could be an abnormal termination. A started task may
load some processing routines into common storage and use
name/token services to provide those addresses to users. The
started task may wish to keep the pair active even if the started
task abnormally terminates for some reason. If the pair is not
persistent, then, when the started task abends and goes away, the
pair would also go away and users would start to get failures
because the pair would be gone.

Programming tips

1      You must run in AMODE 31 to call these services.

2      You must be in supervisor state or system key 0-7 to create
      system-level pairs.

3      IEANTASM is a macro in SYS1.MACLIB which defines
      symbolic names for the constants and return codes to make
      your program more readable.

Examples

In the following two programs NAMEC creates a system-level
persistent pair and NAMEG retrieves the system-level pair
created by NAMEC and creates and retrieves a task level pair.

NAMEC

NAMEC CSECT
NAMEC AMODE 31
NAMEC RMODE ANY
         SAVE  (14,12),,'NAMEC &SYSDATE &SYSTIME'
         LR    12,15
         USING NAMEC,12
         STORAGE OBTAIN,LENGTH=WORKL
         LR    11,1
         USING WORK,11
         ST    13,SAVEAREA+4
         LA    1,SAVEAREA
         ST    1,8(,13)
         LR    13,1
* Load name/token create service                                      *
         LOAD  EP=IEANTCR
         ST    0,XNTCRE
* Create 16-byte name and 16-byte token                               *
         MVC   XNAME(16),=CL16'LITTLE_TOKEN'
         MVC   XTOKEN(16),=CL16'12345TOKEN54321'
* Get into supervisor state to create system-level pair               *
         MODESET MODE=SUP
* Create a persistent system-level name/token pair                    *
         L     15,XNTCRE
         CALL  (15),                                                   X
               (=A(IEANT_SYSTEM_LEVEL),                                X
               XNAME,                                                  X
               XTOKEN,                                                 X
               =A(IEANT_PERSIST),                                      X
               XRC),                                                   X
               MF=(E,XCALL)
         LTR   15,15
         BZ    *+6
         DC    H'0'
* Back to problem state and delete the IEANTCR module from storage    *
TOKEN_RECORDED DS 0H
         MODESET MODE=PROB
         DELETE EP=IEANTCR
RETURN   DS    0H
         L     13,SAVEAREA+4
         STORAGE RELEASE,LENGTH=WORKL,ADDR=(11)
         RETURN  (14,12),RC=0
         LTORG
WORK     DSECT
SAVEAREA DS    18F
XNTCRE   DS    A
XRC      DS    A
XNAME    DS    CL16
XTOKEN   DS    CL16
XCALL    DS    20A
WORKL    EQU   *-WORK
         IEANTASM
         END

NAMEG

NAMEG CSECT
NAMEG AMODE 31
NAMEG RMODE ANY
* Program to create task-level token and retrieve it.                 *
* Program also retrieves system-level token created by NAMEC program. *
* This program must be run under TSO                                  *
         SAVE  (14,12),,'NAMEG &SYSDATE &SYSTIME'
         LR    12,15
         USING NAMEG,12
         LR  10,1
         USING CPPL,10
         STORAGE OBTAIN,LENGTH=WORKL
         LR    11,1
         USING WORK,11
         ST    13,SAVEAREA+4
         LA    1,SAVEAREA
         ST    1,8(,13)
         LR    13,1
* Load the create, delete, and retrieve routines                      *
         LOAD  EP=IEANTDL
         ST    0,XNTDEL
         LOAD  EP=IEANTRT
         ST    0,XNTRET
         LOAD  EP=IEANTCR
         ST    0,XNTCRE
* Retrieve system-level token created by NAMEC.                       *
* Note that no special authorization is required to retrieve a        *
* system-level token.  Only the creation/deletion of a system-level   *
* pair has special authorization requirements.                        *
* This allows a started task to create a data area which will be      *
* available to all users regardless of authorization.                 *
         MVC   XNAME(16),=CL16'LITTLE_TOKEN'
         MVC   XTOKEN(16),=CL16' '
         L     15,XNTRET
         CALL  (15),                                                   X
               (=A(IEANT_SYSTEM_LEVEL),                                X
               XNAME,                                                  X
               XTOKEN,                                                 X
               XRC),                                                   X
               MF=(E,XCALL)
         LTR   15,15
         BZ    TOKEN_GOTTEN
         DC    H'0'
TOKEN_GOTTEN DS 0H
* Print out value of token                                            *
         MVC   LINE(4),=X'00140000'
         MVC   LINE+4(16),XTOKEN
         L 2,CPPLUPT
         L 3,CPPLECT
         PUTLINE OUTPUT=(LINE,,,DATA),PARM=PUTLIST,MF=(E,IOPLADS),     X
               ECT=(3),UPT=(2),TERMPUT=(ASIS)
* Create 16-byte name and 16-byte token                               *
         MVC   XNAME(16),=CL16'TASK TOKEN'
         MVC   XTOKEN(16),=CL16'TASK LEVEL TOKEN'
* Create a task-level name/token pair                                 *
         L     15,XNTCRE
         CALL  (15),                                                   X
               (=A(IEANT_TASK_LEVEL),                                  X
               XNAME,                                                  X
               XTOKEN,                                                 X
               =A(IEANT_NOPERSIST),                                    X
               XRC),                                                   X
               MF=(E,XCALL)
         LTR   15,15
         BZ    TOKEN_CREATED
         DC    H'0'
TOKEN_CREATED DS 0H
* Retrieve task-level name/token pair                                 *
         MVC   XNAME(16),=CL16'TASK TOKEN'
         MVC   XTOKEN(16),=CL16' '
         L     15,XNTRET
         CALL  (15),                                                   X
               (=A(IEANT_TASK_LEVEL),                                  X
               XNAME,                                                  X
               XTOKEN,                                                 X
               XRC),                                                   X
               MF=(E,XCALL)
         LTR   15,15
         BZ    TOKEN_GOTTEN2
         DC    H'0'
TOKEN_GOTTEN2 DS 0H
* Print out value of token                                            *
         MVC   LINE(4),=X'00140000'
         MVC   LINE+4(16),XTOKEN
         L 2,CPPLUPT
         L 3,CPPLECT
         PUTLINE OUTPUT=(LINE,,,DATA),PARM=PUTLIST,MF=(E,IOPLADS),     X
               ECT=(3),UPT=(2),TERMPUT=(ASIS)
* Clean up task-level pair                                            *
         MVC   XNAME(16),=CL16'TASK TOKEN'
         L     15,XNTDEL
         CALL  (15),                                                   X
               (=A(IEANT_TASK_LEVEL),                                  X
               XNAME,                                                  X
               XRC),                                                   X
               MF=(E,XCALL)
         LTR   15,15
         BZ    TOKEN_DELETED
         DC    H'0'
TOKEN_DELETED DS 0H
         DELETE EP=IEANTRT
         DELETE EP=IEANTCR
         DELETE EP=IEANTDL
RETURN   DS    0H
         L     13,SAVEAREA+4
         STORAGE RELEASE,LENGTH=WORKL,ADDR=(11)
         RETURN  (14,12),RC=0
         LTORG
WORK     DSECT
SAVEAREA DS    18F
XNTRET   DS    A
XNTCRE   DS    A
XNTDEL   DS    A
XRC      DS    A
XNAME    DS    CL16
XTOKEN   DS    CL16
XCALL    DS    20A
LINE     DS    CL20
PUTLIST  PUTLINE MF=L
IOPLADS  DS 4F
WORKL    EQU   *-WORK
         IEANTASM
         IKJCPPL
         END


Dan Little
Royal Bank (Canada)                                                                     c Xephon 1994

