Validating job account codes against RACF
Recently, we installed CA-JARS for accounting purposes.  This made it necessary
to find a way to enforce the use of account codes in job cards and to validate
them.  On the whole this seems to be done by searching a table of valid account
codes (as for example proposed in MVS Update, issue 5, February 1987).  However,
this leaves the possibility open of using any valid account code, which is not
what we want.  In this implementation of JES2 exit 3, we use RACF to check the
user’s authority for an account code.  This makes the system both stringent and
easy to maintain.
A class, @ACCOUNT, has been defined in RACF for this purpose (both in the RACF
Router Table, ICHRFR01, and the RACF Class Descriptor Table, ICHRRCDE).  If a
user (or his group) has read access defined in his profile, a job with this
account code passes the check, otherwise it is cancelled.  Checking is done for
all jobs entering the system via an internal reader, except for started tasks
and TSO users.
In the control blocks of JES2 we can find the propagated user-id of the
submitter.  For RACHECK, we create our own Accessor Environment Element (ACEE)
control block, in which we fill in only the fields needed for RACHECK.  The
OPERATIONS attribute of a user is not acknowledged.
We perform a lot of checks that should normally be unnecessary, thus minimising
the risk of abends.
I would advise that ACCTFLD=OPTIONAL rather than ACCTFLD=REQUIRED is set on the
JOBDEF statement in JES2PARMS, as the latter option imposes unnecessary
restrictions and rules on the format of the account data (eg account codes are
limited to four characters, specification of more account information is
obligatory).
The exit routine has been tested with MVS/SP, JES2 1.3.6, and RACF 1.7.0, in an
environment without NJE.
         TITLE 'HASPXT3 JES2 EXIT 3 - ACCOUNT INFO VALIDATION'
***      JES2 EXIT 3 - JOB Statement Accounting Field Scan.         ***
* In this exit, the account code given in the JOB card is checked     *
* against the RACF database. If the user hasn't READ access on the    *
* profile <acct-code> in RACF class &ACCOUNT, the job is cancelled.   *
* For STC and TSU jobs, the exit returns immediately without any      *
* checking.                                                           *
* Lib.  : SYS1.LINKLIB(HASPXT3)                                       *
* Lit.  : SPL: JES2 User Modifications and Macros, LC23-0067-3        *
* Parms : As described in quoted manual, see also 'Rags at entry'     *
*         below.                                                      *
* Registers at entry :                                                *
*         R0  - Accounting field length (zero if no account info)     *
*         R1  - Parmlist pointer:                                     *
*               Word1 (+0) points to accounting field (JCTWORK in JCT)*
*               Word2 (+4) points to exit flag byte (RDWFLAGX in PCE) *
*               Word3 (+8) points to JCTXWRK in JCT                   *
*         R10 - Address of JCT                                        *
*         R11 - Address of HCT                                        *
*         R13 - Address of the HASPRDR PCE                            *
*         R14 - Return address                                        *
*         R15 - Entry address                                         *
* Register use:                                                       *
*         R2  - Account code length - 1 (when calculation ready)      *
*         R3  - Account code address                                  *
*         R4  - DCT address                                           *
*         R5  - Work register                                         *
*         R6  - RACF userid address                                   *
*         R7  - Address getmained storage                             *
*         R8  - Increment in loops                                    *
*         R9  - Compare value in loops                                *
*         R10 - JCT address                                           *
*         R11 - HCT address                                           *
*         R12 - Base register                                         *
*         R13 - PCE address                                           *
*         R14 - Return address                                        *
*         R15 - Return code                                           *
* Macros used:                                                        *
*         CVT      - Communications Vector Table         SYS1.MACLIB  *
*         FREEMAIN - Free Virtual Storage                SYS1.MACLIB  *
*         GETMAIN  - Get Virtual Storage                 SYS1.MACLIB  *
*         IHAACEE  - Accessor Environment Element DSECT  SYS1.MACLIB  *
*         RACHECK  - Check RACF Authorization            SYS1.MACLIB  *
*         RPL      - Request Parameter List              SYS1.MACLIB  *
*         $BUFFER  - JES2 Buffer DSECT                   SYS1.HASPSRC *
*         $DCT     - JES2 Device Control Table DSECT     SYS1.HASPSRC *
*         $ENTRY   - JES2 Prov. Entry to Proc. or Func.  SYS1.HASPSRC *
*         $HASPEQU - JES2 Equates       .                SYS1.HASPSRC *
*         $HASPGBL - JES2 Globals                        SYS1.HASPSRC *
*         $HCT     - JES2 Communications Table DSECT     SYS1.HASPSRC *
*         $JCT     - JES2 Job Control Table DSECT        SYS1.HASPSRC *
*         $MIT     - JES2 Module Information Table DSECT SYS1.HASPSRC *
*         $MITETBL - JES2 MIT Entry Table DSECT          SYS1.HASPSRC *
*         $MODEND  - JES2 Generate End of Module         SYS1.HASPSRC *
*         $MODMAP  - JES2 Module Map                     SYS1.HASPSRC *
*         $MODULE  - JES2 Provide MIT                    SYS1.HASPSRC *
*         $MSG     - JES2 Prepare message for $WTO       SYS1.HASPSRC *
*         $NHD     - JES2 Network Job Header Record DSCT SYS1.HASPSRC *
*         $PCE     - JES2 Processor Control Element DSCT SYS1.HASPSRC *
*         $RDRWORK - JES2 Input Service PCE Workarea DST SYS1.HASPSRC *
*         $RETURN  - JES2 Restore regs, return           SYS1.HASPSRC *
*         $SAVE    - JES2 Save Registers                 SYS1.HASPSRC *
*         $WTO     - JES2 WTO                            SYS1.HASPSRC *
* Link-edit attributes:                                               *
*         RENT (module is reenterable in MVS sense)                   *
* Installation:                                                       *
*         - Install module in LINKLIB with SMP USERMOD                *
*         - Use following JES2 initialization statement:              *
*           EXIT003 ROUTINE=HA$PXT3 (associate module with exit)      *
*           LOAD=HASPXT3            (load this module at initial.)    *
*           JOBDEF ACCTFLD=REQUIRED/OPTIONAL                          *
* Disabling/enabling:                                                 *
*          Module can be enabled/disabled by operator commands        *
*          $T EXIT3,ENABLE                                            *
*          $T EXIT3,DISABLE                                           *
* Environment:                                                        *
*         JES2 main task                                              *
* Key/State:                                                          *
*         Key 1, supervisor state                                     *
* Return codes:                                                       *
*         0  - Account code validated, continue                       *
*         12 - Account code missing or invalid,reject job.            *
***            (Also when userid or RACF group not found).          ***
         COPY  $HASPGBL            COPY HASP GLOBALS
HASPXT3  $MODULE NOTICE=(SP136),                                       C
               CVT,                GENERATE MVS DSECT                  C
               ACEE,               GENERATE MVS DSECT                  C
               RPL,                GENERATE MVS DSECT                  C
               $BUFFER,            GENERATE HASP BUFFER DSECT          C
               $DCT,               GENERATE HASP DCT DSECT             C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $HCT,               GENERATE HASP HCT DSECT             C
               $JCT,               GENERATE HASP JCT DSECT             C
               $MIT,               GENERATE HASP MIT DSECT             C
               $MITETBL,           GENERATE HASP MITEBL DSECT          C
               $MODMAP,            GENERATE HASP MODMAP DSECT          C
               $NHD,               GENERATE HASP NHD DSECT             C
               $PCE,               GENERATE HASP PCE DSECT             C
               $RDRWORK            GENERATE HASP RDRWORK DSECT
HA$PXT3  $ENTRY BASE=R12           PROVIDE PROCESSOR ENTRY POINT
         $SAVE                     SAVE REGISTERS
         LR    R12,R15             BASE REGISTER
         LR    R2,R0               SAVE LENGTH ACCT
         L     R3,0(R1)            ACCOUNTING FIELD POINTER IN R3
         USING JCT,R10             PROVIDE JCT ADDRESSABILITY
         L     R4,PCEDCT           LOAD ADDRESS DCT
         USING DCT,R4              PROVIDE DCT ADDRESSABILITY
* CHECK WHETHER THIS IS A JOB
         CLI   JCTJOBID,C'J'       IS THIS A JOB?
         BNE   EXIT0               NO, DON'T DO ANYTHING
* CHECK FOR INTERNAL READER
         CLI   DCTDEVTP,DCTINR     INTERNAL READER?
         BNE   EXIT0               NO, DON'T DO ANYTHING
* ACCOUNT CODE PRESENT?
         LTR   R2,R2               TEST ACCT CODE LENGTH
         BZ    FAIL0               LENGTH ZERO, THEN FAIL JOB
* GET ACCOUNT CODE
GETACCT  BCTR  R2,0                LENGTH-1 IN R2
         CLI   0(R3),C'('          FIRST CHAR. IS PARENTHESIS?
         BNE   GETID               NO, FIRST CHAR BELONGS TO ACCT CODE
         LA    R3,1(R3)            YES, SKIP FIRST CHAR ...
         BCTR  R2,0
         BCTR  R2,0                ...AND ADJUST LENGTH-1
* FIND LENGTH OF ACCOUNT CODE WHEN MORE ACCT FIELDS
         LA    R8,1(0)             INCREMENT
         LR    R9,R3               END VALUE FOR SCAN IS START ADDR...
         AR    R9,R2               ... PLUS LENGTH-1
         LR    R2,R3               LOOP VARIABLE, INIT AT ACCT ADDR
FINDCOM  CLI   0(R2),C','          COMMA?
         BE    ENDSCAN             YES, END OF ACCT CODE FOUND
         BXLE  R2,R8,FINDCOM       REPEAT UNTIL END OF ACCT INFO
ENDSCAN  SR    R2,R3               SUBTRACT BEGIN VALUE TO GET LENGTH
         LTR   R2,R2               LENGTH ZERO?
         BZ    FAIL0               YES, FAIL JOB
         BCTR  R2,0                LENGTH-1 IN R2
* GET SUBMITTER'S ID
GETID    LA    R5,JCTNJHDR         PROVIDE ADDRESSABILITY FOR NJH
         CLC   NJH2SUSR-NJH(8,R5),EMPTY USERID FIELD EMPTY?
         BE    FAIL0               YES, FAIL JOB
         LA    R6,NJH2SUSR-NJH(R5) LOAD ADDRESS SUBMITTER'S USERID
* GET STORAGE FOR RACHECK PARMS
GET1     GETMAIN R,LV=WORKLEN,RELATED=(FREE1A/B,'FOR RACF CHECK')
         LR    R7,R1               STORE ADDRESS GETMAINED STORAGE
         USING WORK,R7             PROVIDE WORKAREA ADDRESSABILITY
* BLANK OUT WORKAREA
         MVI   WORK,X'00'          ZERO FIRST BYTE OF WORKAREA
         MVC   WORK+1(WORKLEN-1),WORK PROPAGATE X'00' THROUGH ENT. AREA
* MOVE USERID IN EMPTY ACEE
USERID   PUSH  USING               STORE USING FOR WORKAREA
         USING ACEE,R7             PROVIDE WORKAREA ADDRESSABILITY
         MVC   ACEEUSRI(8),0(R6)   MOVE USERID IN ACEE
* FIND LENGTH OF USERID AND MOVE IT IN ACEE
         LA    R5,ACEEUSRI         LOOP VARIABLE, USERID ADDRESS
         LA    R9,ACEEUSRI+7       END OF LOOP AT END OF FIELD
         LA    R8,1(0)             INCREMENT
UIDLOOP  CLI   0(R5),C' '          SPACE?
         BE    UIDLENF             YES, STOP SCAN
         BXLE  R5,R8,UIDLOOP       NEXT CHARACTER, IF NOT END OF FIELD
UIDLENF  LA    R9,ACEEUSRI         LOAD POINTER TO FIRST CHARACTER
         SR    R5,R9               SUBTRACT POINTER PAST LAST CHAR
         STC   R5,ACEEUSRL         STORE LENGTH IN ACEE
* SUBMITTER'S RACF GROUP PRESENT?
         CLC   8(8,R6),EMPTY       SUBMITTER'S RACF GROUP EMPTY?
         BE    FAIL                YES, FAIL JOB (SHOULD NEVER HAPPEN)
* MOVE RACF GROUP IN ACEE
GROUP    MVC   ACEEGRPN(8),8(R6)   MOVE RACF GROUP IN ACEE
* FIND LENGTH OF GROUP AND MOVE IT IN ACEE
         LA    R5,ACEEGRPN         LOOP VARIABLE, RACF GROUP ADDRESS
         LA    R9,ACEEGRPN+7       END OF LOOP AT END OF FIELD
         LA    R8,1(0)             INCREMENT
GRPLOOP  CLI   0(R5),C' '          SPACE?
         BE    GRPLENF             YES, STOP SCAN
         BXLE  R5,R8,GRPLOOP       NEXT CHARACTER, IF NOT END OF FIELD
GRPLENF  LA    R9,ACEEGRPN         LOAD POINTER TO FIRST CHARACTER
         SR    R5,R9               SUBTRACT POINTER PAST LAST CHAR
         STC   R5,ACEEGRP          STORE LENGTH IN ACEE
* SET ACEE FLAGS
FLAGS    OI    ACEEFLG1,ACEERACF   MARK USER AS RACF DEFINED
         POP   USING               RESTORE ADDRESSABILITY WORKAREA
* CHECK AUTHORITY FOR ACCOUNT CODE
         EX    R2,MOVENT           MOVE ACCT CODE TO ENTITY FIELD
         MVC   WRACHECK(WRACLEN),LRACHECK MOVE PARMLIST INTO WORKAREA
         RACHECK ACEE=(7),ENTITY=ENTITY,MF=(E,WRACHECK)
         LTR   R15,R15             IS USER AUTH. FOR ACCT CODE?
         BNZ   FAIL                NO, FAIL JOB AND RETURN
* NORMAL EXIT (JOB IS OK, CONTINUE NORMAL PROCESSING)
EXIT     EQU   *
FREE1A   FREEMAIN R,LV=WORKLEN,A=(7),RELATED=(GET1,'RACF PARMLIST')
EXIT0    $RETURN RC=0
* FAIL (MISSING OR INVALID ACCOUNT CODE, REJECT JOB)
FAIL     EQU   *
FREE1B   FREEMAIN R,LV=WORKLEN,A=(7),RELATED=(GET1,'RACF PARMLIST')
FAIL0    MVC   JCTXWRK,FMSG1       MOVE MSG TEXT IN JCTXWRK
         OI    RDWFLAGX,RDWXXSEM   INDICATE INSTALLATION ERROR MESSAGE
         $WTO  FMSG2,L'FMSG2,JOB=YES,ROUTE=$LOG+$MAIN,CLASS=$ACTION,   C
               PRI=$HI             SEND MESSAGE
         $RETURN RC=12             RETURN AND CANCEL JOB
* INSTRUCTIONS FOR EXECUTE.
MOVENT   MVC   ENTITY(0),0(R3)     MOVE ACCT INFO TO ENTITY FIELD
* CONSTANTS ETC
EMPTY    DC    XL8'00'             FOR TESTING FIELD CONTENTS
FMSG1    DC    CL80'***** HASPXT3 - JOB REJECTED, NO VALID ACCOUNT CODEC
                FOUND *****' MSG FOR JCL DATASET
FMSG2    $MSG  900,'HASPXT3 - JOB REJECTED, NO VALID ACCOUNT CODE FOUNDC
               '
LRACHECK RACHECK CLASS='@ACCOUNT',APPL='HASPXT3',MF=L RACHECK PARMLIST
         LTORG
         $MODEND                   END OF JES2 MODULE
* GETMAINED WORKAREA
WORK     DSECT
WACEE    DS     XL144              ACEE IS MAPPED HERE
ENTITY   DS     XL40               RACHECK ENTITY
WRACHECK RACHECK MF=L              DUMMY RACHECK PARMLIST
WRACLEN  EQU   *-WRACHECK          RACHECK PARMLIST LENGTH
WORKLEN  EQU   *-WORK
         END   HASPXT3


Menno Tjoelker
Systems Programmer  © St Automatiseringscentrum De Veur 1988
St Automatiseringscentrum De Veur (The Netherlands)















