REXX environment inquiry external function

REXX provides the capability to write external functions which
may supply a REXX EXEC with information not readily
available.  These functions may be written in programming
languages or REXX itself.  One of the REXX built-in
functions, called SUBCOM, returns a value showing if an
environment is available given the environment name as an
argument.  For example, the expression:

      IF SUBCOM(ISPEXEC) = 0

would test if the ISPF environment is valid (0) or not (1).
However, REXX does not provide a method for easily
determining which environments are in existence; rather, one
must know the environment names beforehand in order to
check for their existence.  I thought it would be a nice idea to
find out what environments were in effect rather than guessing
what they were, so I wrote SUBCOMS, a small Assembler
REXX external function that returns the names of all currently
available environments.

The program is written for 31-bit mode since the control blocks
accessed reside above the 16-megabyte line in MVS/ESA.  The
program chains through the REXX subcommand table
retrieving the names of all valid environments.

As it turns out, any particular environment name may appear
more than once in the chain, although I do not know why.  To
handle this, the program checks to see if it has already found
the environment name previously.  If so, it is skipped;
otherwise its name is added to the string returned by the
SUBCOMS function.  The names are returned as a single
string, with each name delimited by a blank.  Names are not
padded with blanks for 8 bytes, as is the typical MVS standard.
This way, the string returned can be searched for blank
delimiters.  The program could also easily be modified to
supply the environment names as 8-byte blank padded values if
desired.  To verify the operation of the SUBCOMS external
function, a REXX EXEC can be coded as follows:

x=SUBCOMS()
say "The valid environments are" x


SUBCOMS SOURCE CODE

SUBCOMS  CSECT
SUBCOMS  AMODE 31
SUBCOMS  RMODE ANY
         REGS  , Register equates generation macro
         SAVE  (14,12),,SUBCOMS-&SYSDATE
         LR    R12,R15                 LOAD BASE REGISTER
         USING SUBCOMS,R12             ESTABLISH ADDRESSABILITY
         LR    R10,R0                  LOAD A(ENVIRONMENT BLOCK)
         USING ENVBLOCK,R10            ESTABLISH ADDRESSABILITY
         CLC   ENVBLOCK_ID,ENVBID      IS IT AN ENVIRONMENT BLOCK
         BNE   RETURN2                 NO, THEN RETURN
         LR    R11,R1                  LOAD A(EXT. FUNCTION PLIST)
         USING EFPL,R11                ESTABLISH ADDRESSABILITY
         GETMAIN RU,LV=WORKLEN         GETMAIN WORKAREA
         ST    R13,4(,R1)              ST A(CALLERS S/A) IN MY S/A
         ST    R1,8(,R13)              ST A(MY S/A) IN CALLERS S/A
         LR    R13,R1                  LOAD A(MY S/A)
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
         L     R10,ENVBLOCK_PARMBLOCK  LOAD A(PARM BLOCK)
         DROP  R10                     DROP ADDRESSABILITY
         USING PARMBLOCK,R10           ESTABLISH ADDRESSABILITY
         CLC   PARMBLOCK_ID,PARMBID    IS IT A VALID PARMBLOCK
         BNE   RETURN3                 NO, THEN RETURN
         L     R10,PARMBLOCK_SUBCOMTB  LOAD A(SUBCOM TABLE)
         DROP  R10                     DROP ADDRESSABILITY
         USING SUBCOMTB_HEADER,R10     ESTABLISH ADDRESSABILITY
         CLC   SUBCOMTB_FFFF,SUBCMTID  IS IT A VALID SUBCOM TABLE
         BNE   RETURN3                 NO, THEN RETURN
         L     R9,SUBCOMTB_FIRST       LOAD A(1ST SUBCOMTB ENTRY)
         USING SUBCOMTB_ENTRY,R9       ESTABLISH ADDRESSABILITY
         L     R8,SUBCOMTB_USED        LOAD OUTER LOOP COUNTER
         L     R7,SUBCOMTB_LENGTH      LOAD LENGTH(SUBCOMTB ENTRY)
         L     R6,EFPLEVAL             LOAD A(A(EVAL BLOCK))
         L     R6,0(,R6)               LOAD A(EVAL BLOCK)
         USING EVALBLOCK,R6            ESTABLISH ADDRESSABILITY
         LA    R5,EVALBLOCK_EVDATA     LOAD A(EVALBLOCK_DATA)
         LR    R0,R5                   SAVE A(DATA)
         LTR   R8,R8                   WERE THERE ANY SUBCOM ENTRIES
         BNP   RETURN                  NO, THEN RETURN
         L     R3,EVALBLOCK_EVSIZE     ELSE, LOAD SIZE(EVALBLK IN DBLW)
         S     R3,=A(((EVALBLOCK_EVDATA-EVALBLOCK)+7)/8)
* SUBTRACT NUMBER OF DOUBLEWORDS OF EVALBLOCK HEADER PORTION
         SLL   R3,3                    MULTIPLY BY 8 = NUMBER OF BYTES
         LA    R3,0(R5,R3)             LOAD A(END OF DATA)
LOOPOUTR L     R1,SUBCOMTB_FIRST       LOAD A(1ST SUBCOMTB ENTRY)
CHECKPTR CR    R1,R9                   ARE WE POINTING AT SAME PLACE
         BE    PREPINNR                YES, SKIP COMPARE
         CLC   SUBCOMTB_NAME,SUBCOMTB_NAME-SUBCOMTB_ENTRY(R1)
* ARE THE NAMES THE SAME
         BE    BUMPPTR                 YES, GO BUMP TO NEXT ENTRY
         ALR   R1,R7                   ELSE, ADD LENGTH TO BASE
         B     CHECKPTR                GO CHECK THEM AGAIN
PREPINNR LA    R2,8                    LOAD INNER LOOP COUNTER
         LA    R4,SUBCOMTB_FIRST-SUBCOMTB_HEADER(,R9) L A(SUBCOM_FIRST)
LOOPINNR MVC   0(1,R5),0(R4)           MOVE 1 BYTE OF ENTRY
         LA    R5,1(,R5)               BUMP TO NEXT BYTE
         CR    R5,R3                   ARE WE PAST END
         BNL   RETURN                  YES, DONE
         CLI   0(R4),C' '              ELSE, IS BYTE BLANK
         BE    BUMPPTR                 YES, DONE WITH THIS ENTRY
         LA    R4,1(,R4)               BUMP TO NEXT BYTE
         BCT   R2,LOOPINNR             LOOP ON NUMBER OF BYTES
         LA    R4,BLANKS               DONE, POINT TO AREA AGAIN
         B     LOOPINNR                LOOP TO DO NEXT ENTRY
BUMPPTR  ALR   R9,R7                   ADD LENGTH TO CURRENT ENTRY
         BCT   R8,LOOPOUTR             LOOP ON # OF SUBCOM ENTRIES
         BCTR  R5,R0                   DECREMENT LENGTH
RETURN   SLR   R5,R0                   SUBTRACT ORIGINAL ADDRESS
         ST    R5,EVALBLOCK_EVLEN      SAVE NEW LENGTH IN EVALBLOCK
RETURN3  LR    R1,R13                  LOAD R1 W/A(AREA TO FREEMAIN)
         L     R13,4(,R13)             LOAD A(CALLERS S/A)
         FREEMAIN RU,LV=WORKLEN,A=(1)  FREEMAIN WORKAREA
RETURN2  RETURN (14,12),RC=0           RETURN TO CALLER
ENVBID   DC    C'ENVBLOCK'
PARMBID  DC    C'IRXPARMS'
SUBCMTID DC    X'FFFFFFFFFFFFFFFF'
BLANKS   DC    C'        '
         LTORG
WORKAREA DSECT
SAVEAREA DS    18F                     OS SAVE AREA
WORKLEN  EQU   *-WORKAREA
         IHAPSA
         IHAASCB
         IHAASXB
         IKJEFLWA
         IKJECT
         IRXENVB
         IRXPARMB
         IRXSUBCT
         IRXEFPL
         IRXEVALB
         END


                                                      c Xephon 1992

