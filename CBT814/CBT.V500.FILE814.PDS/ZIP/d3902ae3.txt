Tracking CPU utilization (continued)

This month we conclude our look at tracking CPU utilization
by publishing the remaining source code for RMF70SUM.


RMF70SUM SOURCE CODE (CONTINUED)

@FILTER  DS    0H              ----  Filter Out Records of No Interest
         SR    R9,R9                   Initialize C(R9) to 0
         ICM   R1,B'1111',SMF70PRS     Offset to RMF product section
         LA    R8,SMF70HDR(R1)         Point R8 to start of section
@FILTER1 EQU   *
         CLI   SMF70INT,X'55'          Interval at least 55 minutes?
         BL    @FILTER9                No, don't want this record
         CP    SMF70DAT,BEGN#JDT       Ensure this month's record
         BL    @FILTER9
         CP    SMF70DAT,END#JDT
         BH    @FILTER9
         CP    SMF70IST,=PL4'85500'    Start time of approx. 9 AM?
         BL    @FILTER9                If earlier than that drop it
         CP    SMF70IST,=PL4'150500'   If start time later than
         BH    @FILTER9                  approx 3 PM, drop it
         CP    SMF70IST,=PL4'100500'   Start time earlier than 10:05?
         BL    @FILTER4                yes, we can use it
         CP    SMF70IST,=PL4'135500'   Start time later than 13:55?
         BNH   @FILTER9                If not, we can't use it
@FILTER4 EQU   *
         CP    SVD#SMFD,SMF70DAT       Is the date same as last rec's?
         BE    @FILTER5                If yes, skip call to SMF@DAY
         MVC   SVD#SMFD,SMF70DAT
         MVC   SM#DATE,SMF70DAT        Interval's start date
         BAL   R2,SMF@DAY              Go check day of the week
@FILTER5 EQU   *
         CLI   SM#DAY,C'S'             "SATURDAY" or "SUNDAY"?
         BE    @FILTER9                If yes, skip this record
         BAL   R15,$HOLIDY             Check if the day was a holiday
         TM    SM#SWBYT,HOLIDAY        Holiday?
         BZ    @FILTER8                No, continue
         B     @FILTER9                Exit
@FILTER8 EQU   *
         LA    R9,1                    Record has data for our report
         CP    SVD#SM2D,SMF70DAT       Has this date been counted?
         BE    @FILTER9                If yes, continue
         MVC   SVD#SM2D,SMF70DAT
         LH    R4,SUM#DAYS             Increment count of
         LA    R4,1(R4)                  working days in the month
         STH   R4,SUM#DAYS
@FILTER9 EQU   *
         BR    R11
SMF@DAY  DS    0H              ----  Get Day of Week for an SMF Date
*  This subroutine can be used to obtain the day of the week for a
*  given SMF date.
*  Subroutine expects the SMF date, expressed as X'00YYDDDF', to be in
*  a field called SM#DATE, and places the computed day in a 9-byte
*  field called SM#DAY.  (Typical value returned would be 'SUNDAY',
*  'MONDAY', 'TUESDAY', etc.).
*  If the 2-digit year value at SM#DATE is less than 26, this routine
*  assumes the input date to be a 21st century date.
*  NOTE:  Contents of R0 & R1 are not saved across this code
         STM   R2,R5,SM#SVD4R            SAVE R2 THRU R5
         UNPK  SM#WRK5,SM#DATE           X'00YYDDDF' TO C'YYDDD'
         PACK  SM#DBLW,SM#WRK5(2)
         CVB   R1,SM#DBLW                YY VALUE NOW IN R1
         CH    R1,=H'25'                 If 'YY' < 26, assume it
         BH    *+8                         is a 21st century date
         LA    R1,100(R1)
         BCTR  R1,0                      Compute (YY-1)
         LR    R3,R1                     Save (YY-1) also in R3
         SR    R0,R0
         LA    R2,4
         DR    R0,R2                     Compute (YY-1)/4
*   C(R1) now equals number of Leap years since 1901
         MH    R3,=H'365'                Days since 01-01-1901
         AR    R3,R1                     Adjst for intervening leap yrs
         PACK  SM#DBLW,SM#WRK5+2(3)      Current Julian date (DDD)
         CVB   R1,SM#DBLW
         BCTR  R1,0                      Elapsed days since 01-01
         AR    R3,R1
*   R3 now has number of days since 01-01-1901, which was a TUESDAY
         XR    R2,R2
         LA    R1,7
         DR    R2,R1                     Numbr of even weeks in R3
         MH    R2,=H'09'                 Each table entry is 9 bytes
         LA    R3,SM#DWKTB(R2)           Point DAY name in the table
         MVC   SM#DAY,0(R3)
SMF@DAY9 EQU   *
         LM    R2,R5,SM#SVD4R            Restore R2 thru R5
         BR    R2
SM#WRKA  DS    0D         ***  Work Area for SMF Date/Time Routines  **
SM#DBLW  DS    D
SM#SVD4R DS    4F                 For saving work registers
SM#LPMSK DC    F'03'              Only 2 Low-order bits are ON
SM#TIME  DC    XL4'00'            TOD in 1/100 secs from TIME macro
SM#DATE  DC    XL4'00'            4-byte packed fld with X'00YYDDDF'
SM#WRK5  DS    CL5
SM#DAYTB DC    H'0,31,60,91,121,152,182,213,244,274,305,335,366'
SM#DWKTB DC    CL9'TUESDAY',CL9'WEDNESDAY',CL9'THURSDAY'
         DC    CL9'FRIDAY',CL9'SATURDAY',CL9'SUNDAY',CL9'MONDAY'
SM#HMS   DC    CL6'141037'
SM#DMY   DC    CL6'160588'
SM#DAY   DS    CL9
SM#SWBYT DC    X'00'              ***  INDICATOR BITS  ***
SM#LEAP# EQU   X'80'              Leap year indicator
HOLIDAY  EQU   X'40'              If on, the day is a Holiday
PRINTING EQU   X'20'              If on, Printing is in progress
DT#MDY   DS    CL6'031990'        Calendar date like 19-MAR-1990
DT#JUL   DS    CL3'078'             and corresponding Julian date
$HOLIDY  DS    0H              ----  Check date for a holiday
*  This routine checks to see if the SMF70 record being examined
*  belongs to a day that was a holiday.  Besides looking at the date
*  value in SMF70DAT in the RMF product section of the SMF type 70
*  record, this routine also expects the corresponding "YY" and "MM"
*  values in W#YYMMDD, a 6-byte work field.
*  In order to set the bit HOLIDAY in SM#SWBYT, to indicate whether
*  or not the date in question is a holiday, the routine works with a
*  hard coded table of holiday dates in ASCENDING order.
         ST    R15,SVDR15B               Save return address
         NI    SM#SWBYT,255-HOLIDAY      Set off Holiday indicator
         ZAP   SM#WRK5,SMF70DAT          Julian date on SMF record
         SP    SM#WRK5,BEGN#JDT          Subtract 1st day of the month
         AP    SM#WRK5,=P'1'             Get 2-digit "DD" value
         UNPK  W#YYMMDD+4(2),SM#WRK5+3(2)
         OI    W#YYMMDD+5,X'F0'
         LA    R2,H#TABLE                Table of Holiday dates
         LA    R3,H#COUNT                Count of table entries
$HOLIDY2 EQU   *
         CLC   W#YYMMDD,0(R2)
         BH    $HOLIDY3                  Try next table entry
         BL    $HOLIDY9                  Exit, we won't find a match
         OI    SM#SWBYT,HOLIDAY          Indicate Holiday date
         B     $HOLIDY9
$HOLIDY3 EQU   *
         LA    R2,6(R2)                  Point to next entry
         BCT   R3,$HOLIDY2
$HOLIDY9 EQU   *
         L     R15,SVDR15B
         BR    R15
W#YYMMDD DS    CL6'901121'        <===  Input date in "YYMMDD" format
H#TABLE  EQU   *       All entries in YYMMDD format, in ascending order
         DC    C'890101',C'890102'        New Year
         DC    C'890220',C'890529'        Presidents Day, Memorial Day
         DC    C'890703',C'890704'        Independence Day
         DC    C'890814',C'890904'        VJ Day, Labor Day
         DC    C'891009',C'891111'        Columbus Day, Veterans Day
         DC    C'891123',C'891124'        Thanksgiving
         DC    C'891225'                  Christmas
         DC    C'900101'                  New Year
         DC    C'900219',C'900528'        Presidents Day, Memorial Day
         DC    C'900704'                  Independence Day
         DC    C'900813',C'900903'        VJ Day, Labor Day
         DC    C'901008',C'901112'        Columbus Day, Veterans Day
         DC    C'901122',C'901122',C'901124'   Thanksgiving
         DC    C'901225'                  Christmas
H#COUNT  EQU   (*-H#TABLE)/6      Count of 6-byte entries in the Table
@PUTOUT  DS    0H              ----  Print data off selected RMF record
         LH    R4,SUM#RECS             Increment count of
         LA    R4,1(R4)                  SMF70 records used for
         STH   R4,SUM#RECS                 this report
         CP    LINECNT,=P'58'          Sheet has room for this line?
         BNH   @PUTOUT2                Yes, continue
         BAL   R15,#SHTFTG             Put footing text on full page
         MVC   C#SYSID,SMF70SID        System ID for the header text
         BAL   R15,$PUTHDR             Header lines on the new page
         ZAP   SVD#PDT,=P'0'           New sheet must begin with date
@PUTOUT2 EQU   *
         CP    SVD#PDT,SMF70DAT        Same date as last print line?
         BE    @PUTOUT3                Yes, don't repeat the date
         MVC   SVD#PDT,SMF70DAT
         MVC   P#MNTH3,C#MNTHID
         ZAP   SM#WRK5,SMF70DAT        Julian date at interval start
         SP    SM#WRK5,BEGN#JDT        Subtract 1st day of the month
         AP    SM#WRK5,=P'1'           Get 2-digit "DD" value
         UNPK  P#DTE2(2),SM#WRK5+3(2)  Need only 2 low-order digits
         OI    P#DTE2+1,X'F0'
         MVC   P#DAY3,SM#DAY           @FILTER had reckoned day name
         MVI   PRTCNTRL,C'0'           Skip 1 line for new date
@PUTOUT3 EQU   *
         CP    SMF70IST,=PL4'090500'   Start time of about 9 AM?
         BH    *+14                    If not, skip to next compare
         MVC   P#TIME,C#TMERG1
         B     @PUTOUT4
         CP    SMF70IST,=PL4'100500'   Start time of about 10 AM?
         BH    *+14
         MVC   P#TIME,C#TMERG2
         B     @PUTOUT4
         CP    SMF70IST,=PL4'140500'   Start time of about 2 PM?
         BH    *+14
         MVC   P#TIME,C#TMERG3
         B     @PUTOUT4
         CP    SMF70IST,=PL4'150500'   Start time of approx 3 PM?
         BH    @PUTOUT9                I give up, leave the line blank]
         MVC   P#TIME,C#TMERG4
@PUTOUT4 EQU   *
         ICM   R1,B'1111',SMF70CPS     Offset to CPU data section
         LA    R7,SMF70HDR(R1)         Point R7 to start of section
         MVO   W#PKD2,SMF70INT(1)      "mm" digits of interval time
         ZAP   SM#DBLW,W#PKD2
         MP    SM#DBLW,=P'60000'       Convert to milliseconds
         AP    SM#DBLW,SMF70INT+1(3)   Get interval in millisecs
         CVB   R1,SM#DBLW                and save in a work field
         ST    R1,W#INTMSC           Duration of Monitor interval ("I")
         MVC   SM#DBLW,SMF70WAT          Get CPU wait time ("WT")
         LM    R2,R3,SM#DBLW             64-bit time value in R2 & R3
         SRDL  R2,12                     shift out 12 rightmost bits
*  R2,R3 now have the CPU wait time in microseconds
         SLDA  R2,7                      Microsecs value times 128
         D     R2,W#INTMSC               Interval duration in millisecs
*  If CPU Wait ratio,i.e. WT/I, is 0.28083 (for a CPU Wait percentage
*  of 28.083%) then the present value in R3 is 128*(280v83), where "v"
*  is the assumed decimal point.
         MH    R3,=H'100'                C(R3) = " 128*28083 "
         SR    R2,R2           Original mulitplication of WT by 128 was
         LA    R1,128            to retain 2 extra low order digits
         DR    R2,R1                     C(R3) = " 28083 "
         L     R2,=F'100000'             Busy Pct = 100 - Wait Pct
         SR    R2,R3                     C(R2) = " 71917 "
         L     R4,SUM#CPU                A running total
         AR    R4,R2                       of CPU busy pct.
         ST    R4,SUM#CPU
         AH    R2,=H'05'                 C(R2) = " 71922 "
         CVD   R2,SM#DBLW             CPU busy pct, to 3 decimal places
         MVO   SM#DBLW(4),SM#DBLW+4(4)   Drop low-order digit
         OI    SM#DBLW+2,X'0F'           07 19 2F  in first 3 bytes
         MVC   P#CPUBTP,=XL7'402021204B2020'
         ED    P#CPUBTP,SM#DBLW          Show CPU Busy Pct as 71.92%
*  Required:  Percentage of time queue length was zero.
*  Method:    Divide count in SMF70R00 by monitor 1 duration in secs,
*             (since CYCLE time is 1 sec), then multiply result by 100.
*  However:   We have interval duration in millisecs, and want the
*             the result of arithmetic good to 2 decimal places, before
*             we round it to 1 decimal place.
         ICM   R1,B'1111',SMF70ASS     Offset to ASID data section
         LA    R6,SMF70HDR(R1)         Point R6 to start of section
         L     R3,SMF70R00             Times ready count was zero
         M     R2,=F'10000000'         100*1000*100
         D     R2,W#INTMSC             Divisor is in milliseconds
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#Q00PCT,EDTPTRN3
         ED    P#Q00PCT,SM#DBLW        Pct of time ready queue was zero
         L     R3,SMF70R01             Times ready count was 1 +
         A     R3,SMF70R02                               was 2 +
         A     R3,SMF70R03                               was 3
         M     R2,=F'10000000'         100*1000*100
         D     R2,W#INTMSC
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#Q13PCT,EDTPTRN3
         ED    P#Q13PCT,SM#DBLW        Pct of time que length was 1-3
         L     R3,SMF70R04             Times ready count was 4 +
         A     R3,SMF70R05                               was 5 +
         A     R3,SMF70R06                               was 6
         LTR   R3,R3
         BZ    @PUTOUT5                Don't bother showing a zero
         M     R2,=F'10000000'
         D     R2,W#INTMSC             Interval in milliseconds
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#Q46PCT,EDTPTRN3
         ED    P#Q46PCT,SM#DBLW        Pct of time que length was 4-6
@PUTOUT5 EQU   *
         L     R3,SMF70R07             Times ready count was 7 +
         A     R3,SMF70R08                               was 8 +
         A     R3,SMF70R09                               was 9
         LTR   R3,R3
         BZ    @PUTOUT6                Don't bother showing a zero
         M     R2,=F'10000000'
         D     R2,W#INTMSC             Interval in milliseconds
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#Q79PCT,EDTPTRN3
         ED    P#Q79PCT,SM#DBLW        Pct of time que length was 7-9
@PUTOUT6 EQU   *
         L     R3,SMF70R10             Times ready count was 10 +
         A     R3,SMF70R11                               was 11 +
         A     R3,SMF70R12                               was 12 +
         A     R3,SMF70R13                               was 13 +
         A     R3,SMF70R14                               was 14 +
         A     R3,SMF70R15             Times ready count was > 14
         LTR   R3,R3
         BZ    @PUTOUT7                Don't bother showing a zero
         M     R2,=F'10000000'
         D     R2,W#INTMSC             Interval in milliseconds
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#Q10PCT,EDTPTRN3
         ED    P#Q10PCT,SM#DBLW        Pct of time queue > 14
@PUTOUT7 EQU   *
         L     R3,SMF70RTT             Ready total value over interval
         M     R2,=F'100000'           1000*100  (We're not calculating
         D     R2,W#INTMSC             a percentage value this time)
         L     R4,SUM#QLEN             A running total
         AR    R4,R3                     of average queue
         ST    R4,SUM#QLEN                 length
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   P#AVGQL,EDTPTRN3
         ED    P#AVGQL,SM#DBLW         Avg queue length over interval
         BAL   R15,#PRTLNE             NOW go print the line
@PUTOUT9 EQU   *
         BR    R11
#PRTLNE  DS    0H              ----  Print one text line
         ST    R15,SVDR15C
         AP    LINECNT,=P'1'
         CLI   PRTCNTRL,C' '
         BE    #PRTLNE8
         AP    LINECNT,=P'1'
         CLI   PRTCNTRL,C'0'
         BE    #PRTLNE8
         AP    LINECNT,=P'1'
         CLI   PRTCNTRL,C'-'
         BE    #PRTLNE8
*  If PRTCNTRL is not SPACE, '0', OR '-', it's '1' or 'C'
         ZAP   LINECNT,=P'1'            Reset line count to 1
#PRTLNE8 EQU   *
         PUT   PRNTFILE,PRNTREC
         MVI   PRNTREC,C' '             Reinitialize print line area
         MVC   PRNTREC+1(132),PRNTREC     with spaces
#PRTLNE9 EQU   *
         L     R15,SVDR15C
         BR    R15
$PUTHDR  DS    0H              ----  Print Header Lines on the Sheet
         ST    R15,SVDR15B              Save return address
$PUTHDR1 EQU   *
         MVI   PRTCNTRL,C'1'
         BAL   R15,#PRTLNE
         MVI   PRTCNTRL,C'0'
         MVC   P#HDR1,C#HDR1
         BAL   R15,#PRTLNE
         MVI   PRTCNTRL,C'0'
         MVC   PRNTDATA(L'C#HDR2A),C#HDR2A
         MVC   PRNTDATA+111(L'C#HDR2B),C#HDR2B
         BAL   R15,#PRTLNE
         MVI   PRTCNTRL,C'0'
         MVC   PRNTDATA+56(L'C#HDR3),C#HDR3
         BAL   R15,#PRTLNE
         MVC   PRNTDATA(L'C#HDR4),C#HDR4
         BAL   R15,#PRTLNE
         MVC   PRNTDATA(L'C#HDR5),C#HDR5
         BAL   R15,#PRTLNE
         MVI   PRTCNTRL,C'-'
         OI    SM#SWBYT,PRINTING         Printing is now in progress
$PUTHDR9 EQU   *
         L     R15,SVDR15B
         BR    R15
#SHTFTG  DS    0H              ----  Print Sheet Footing
         ST    R15,SVDR15B              Save Return Address
         TM    SM#SWBYT,PRINTING        Has anything been printed yet?
         BZ    #SHTFTG9                 If not, footing not needed
         AP    PAGECNT,=P'1'
         BAL   R15,#PRTLNE              Skip a line
         MVC   PG#PRNTD,EDTPTRN2        Fill in page number in
         ED    PG#PRNTD,PAGECNT           the footing text
         MVC   PRNTDATA(L'FNOTETXT),FNOTETXT
         MVC   P#PGENUM,PAGE#TXT
         MVI   PRTCNTRL,C'C'            "Skip to channel 12"
         BAL   R15,#PRTLNE
#SHTFTG9 EQU   *
         L     R15,SVDR15B
         BR    R15
C#WKDYS  DC    CL34'Number of Working Days Summarized:'
C#CPUPCT DC    CL43'Average Prime Time CPU Usage for the Month:'
C#AVGQLN DC    CL30'Average Length of Ready Queue:'
C#INERR  DC    CL47'ERROR:  No Input Records Met Selection Criteria'
@SUMMRY  DS    0H              ----  End Report with Summary Figures
         CP    LINECNT,=P'50'          Room for summary lines
         BL    @SUMMRY2                If yes, continue
         CP    PAGECNT,=P'0'           Did we print any data yet?
         BNH   *+8                     No, print header lines
         BAL   R15,#SHTFTG             Put footing text on full page
         BAL   R15,$PUTHDR             Header lines on the new page
@SUMMRY2 EQU   *
         MVI   PRNTREC,C'-'
         BAL   R15,#PRTLNE             Skip 3 lines
         MVI   PRNTREC,C'-'
         NC    SUM#RECS,SUM#RECS       Did we use any input records
         BZ    @SUMMRY5                If not, display message
         MVC   PRNTDATA+60(L'C#WKDYS),C#WKDYS
         LH    R4,SUM#DAYS             Count of working days
         CVD   R4,SM#DBLW
         MVC   PRNTDATA+60+L'C#WKDYS(L'EDTPTRN2),EDTPTRN2
         ED    PRNTDATA+60+L'C#WKDYS(L'EDTPTRN2),SM#DBLW+6
         BAL   R15,#PRTLNE
         MVI   PRNTREC,C'-'
         MVC   PRNTDATA+51(L'C#CPUPCT),C#CPUPCT
         SR    R2,R2
         L     R3,SUM#CPU                Compute avg CPU busy pct
         LH    R1,SUM#RECS                 for the month
         DR    R2,R1
         AH    R3,=H'05'                 Round off the low order digit
         CVD   R3,SM#DBLW             CPU busy pct, to 3 decimal places
         MVO   SM#DBLW(4),SM#DBLW+4(4)   Drop low-order digit
         OI    SM#DBLW+2,X'0F'           0X XX dF  in first 3 bytes
         MVC   PRNTDATA+51+L'C#CPUPCT(7),=XL7'402021204B2020'
         ED    PRNTDATA+51+L'C#CPUPCT(7),SM#DBLW
         MVI   PRNTDATA+51+L'C#CPUPCT+7,C'%'
         BAL   R15,#PRTLNE
         MVI   PRNTREC,C'0'
         SR    R2,R2
         L     R3,SUM#QLEN
         LH    R1,SUM#RECS
         DR    R2,R1
         AH    R3,=H'05'               Round by adding 5 to quotient
         CVD   R3,SM#DBLW
         MVO   SM#DBLW(4),SM#DBLW+5(3) Drop low-order digit
         OI    SM#DBLW+2,X'0F'         oX XX dF  in first 3 bytes
         MVC   PRNTDATA+64+L'C#AVGQLN-1(L'EDTPTRN3),EDTPTRN3
         ED    PRNTDATA+64+L'C#AVGQLN-1(L'EDTPTRN3),SM#DBLW
         MVC   PRNTDATA+64(L'C#AVGQLN),C#AVGQLN
         BAL   R15,#PRTLNE
         B     @SUMMRY9
@SUMMRY5 EQU   *
         MVC   PRNTDATA+52(L'C#INERR),C#INERR
         MVI   RTRNCDE+1,X'08'         Set a Return Code of 8
@SUMMRY9 EQU   *
         BAL   R15,#SHTFTG             Put footing text on full page
         BR    R11
SMF#FILE DCB   DSORG=PS,MACRF=(GL),      Read records in LOCATE mode   X
               BFTEK=A,                  Get a buffer for logical      X
               DDNAME=SMFDATA,             record interface            X
               EODAD=FILE#END
PRNTFILE DCB   DSORG=PS,MACRF=(PM),      Write lines in MOVE mode      X
               RECFM=FBA,                Use ANSI for print control    X
               LRECL=133,BLKSIZE=1330,                                 X
               DDNAME=PRNTOUT
SUM#DAYS DC    H'0'          Count of working days processed
SUM#RECS DC    H'0'          Count of SMF70 records shown on report
SUM#CPU  DC    F'0'          Cumulative CPU busy pct values
SUM#QLEN DC    F'0'             and avg queue length values
W#INTMSC DS    F             Interval duration in milliseconds
SVDR15B  DS    F             Register save fld for 2nd level routines
SVDR15C  DS    F                               for 3rd level routines
EDTPTRN2 DC    XL4'40202120'         ddd
EDTPTRN3 DC    XL7'40202021204B20'  dddd.d
PAGECNT  DC    PL2'0'
LINECNT  DC    PL2'99'       Hi value to force header on sheet 1
W#PKD2   DC    PL2'0'              2-byte signed packed work field
PRNTREC  DS    0CL133
PRTCNTRL DS    CL1                 Byte for ANSI control character
PRNTDATA DS    0CL132              Text line
         DS    CL49' '
P#HDR1   DS    CL34'Monthly Summary of Processor Usage'
         ORG   PRNTDATA
P#TXTLNE EQU   *
P#MNTH3  DS    CL3'MAR',CL1            3-letter month name
P#DTE2   DS    CL2'01',CL4             2-digit date
P#DAY3   DS    CL3'THU',CL5            3-letter day of the week
P#TIME   DS    CL13' 9:00 - 10:00',CL7
P#CPUBTP DS    CL7' 057.9',CL10        CPU Busy Time Percentage (BTP)
P#Q00PCT DS    CL7' 020.5',CL3         Pct of time queue length was 0
P#Q13PCT DS    CL7' 045.5',CL10        Pct of time length was 1-3
P#Q46PCT DS    CL7' 020.5',CL3         Queue length 4-6 percentage
P#Q79PCT DS    CL7' 010.3',CL3
P#Q10PCT DS    CL7' 003.2',CL6
P#AVGQL  DS    CL7' 003.21'
         ORG   PRNTDATA+122   <===  For Page No. field
P#PGENUM DS    CL8'Page   1',CL2
*                             Literals for Use in Printing Header Lines
C#HDR1   DC    CL34'Monthly Summary of Processor Usage'
C#HDR2A  DS    0CL22
         DC    CL8'Month:  '
C#MNTHID DC    CL14' '           Can accomodate:  "September 1989"
C#HDR2B  DS    0CL16
         DC    CL12'System ID:  '
C#SYSID  DC    CL4' '
C#HDR3   DS    0CL71
         DC    CL46'!--------    Queue Length Distribution (%)    '
         DC    CL25'--------!       Avg Queue'
C#HDR4   DS    0CL124
         DC    CL45'Date      Day     Time               CPU Busy'
         DC    CL44' (%)            0       1-3              4-6'
         DC    CL35'       7-9       10+         Length'
C#HDR5   DS    0CL126
         DC    CL45'------    ---     -------------      --------'
         DC    CL44'----         ----      ----             ----'
         DC    CL37'      ----      ----         --------'
C#TMERG1 DC    CL13' 9:00 - 10:00'
C#TMERG2 DC    CL13'10:00 - 11:00'
C#TMERG3 DC    CL13'14:00 - 15:00'
C#TMERG4 DC    CL13'15:00 - 16:00'
FNOTETXT DS    0CL20             Report ID for the bottom of each sheet
         DC    CL9'RMF70SUM/'      Report/Program ID
FN#MDY   DS    CL6'040390'         Date of printing
         DC    CL1'/'
FN#HHMM  DS    CL4'1421'           Time of printing
PAGE#TXT DS    0CL8       Page-Number text for bottom right hand corner
         DC    CL4'Page'
PG#PRNTD DS    CL4'ZZZ9'
RTRNCDE  DC    H'00'               Return code value
         LTORG
PARMERR1 DS    0H
         WTO   '***  Program Requires a 4-Digit MMYY Value in PARM',   X
               ROUTCDE=(2,11),DESC=7
         MVI   RTRNCDE+1,X'0C'        Set a Return Code of 12
         B     EOJPOINT
         A@REGS               /*   MACRO with register EQUATES  */
RMFRECS  DSECT
         ERBSMFR 70             /*  Map record type 70  */
         END


B S Oberoi
Manager Technical Services
Allendale Insurance (USA)                                    c Xephon 1990

