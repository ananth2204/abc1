MVS consoles under TSO

Sometimes we would like to know exactly what the operator
can see on the MVS console. The SDSF LOG command gives
us a very good idea of what is going on in the computer room
but it doesn't show everything. For example, what messages
are highlighted? Are there any tape mounts pending? Can the
operator see them? These were some of the reasons that led us
to write the following program, which runs under TSO/E.

The console buffer is in a control block called TDCM in the
Communications Task address space (CONSOLE). To get
there we follow the path described below (this is not the only
route).

o      CVT+X'64' points to the UCM (UCM base).

o      UCM+X'48' points to the first UCM entry (there is one
      UCM entry for each console defined in the system).

o      UCME+X'1C' points to RDCM. RDCM is a control block
      in the Communications Task address space, so to go there
      we have to use cross memory services or to schedule an
      SRB. Using cross memory services is easier.

o      RDCM+X'00' points to the TDCM (DCM).

o      TDCM+X'30' points to the screen image buffer.

Now we can bring the buffer to our TSO address space, add
some 3270 data stream characters, such as WCC, and display it
using TSO services. Remember that the SBA and Start Field
characters are already in the console screen image buffer.

Prior to executing the program you should:

1      Link-edit the program in an APF LINKLIST library so you
      can execute it as a TSO command

2      Remember to put it in the IKJTSOnn member of
      SYS1.PARMLIB to authorize the program and to restart
      the TSO address space.

         TITLE 'CNSL - MVS CONSOLE UNDER TSO. AN EXAMPLE.'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* FUNCTION: SHOW THE MASTER CONSOLE SCREEN AS IT APPEARS TO THE
*           OPERATOR.
*           RUNS UNDER TSO.
*           PF KEYS FUNCTIONS:
*           PF01 - HELP
*           PF02 - REFRESH SCREEN EACH 5 SECONDS
*           PF03 - END
*           PF07 - GO TO THE PREVIOUS MCS CONSOLE
*           PF08 - GO TO THE NEXT MCS CONSOLE
*           PF12 - SHOW LAST COMMANDS ISSUED
*           PF13 - HELP
*           PF14 - REFRESH SCREEN EACH 5 SECONDS
*           PF15 - END
*           PF19 - GO TO THE PREVIOUS MCS CONSOLE
*           PF20 - GO TO THE NEXT MCS CONSOLE
*           PF24 - SHOW LAST COMMANDS ISSUED
* AC=1 AMODE 31 RMODE 24
* OBS: IT WOULD BE A GOOD IDEA IF YOU CHANGE THE GETMAINS TO CPOLL
*      AND LOAD THE ROUTINE IN CSA USING THE MACRO LOAD WITH
*      THE GLOBAL=(YES,P) OPTION.
*      NOTE THAT THIS IS JUST AN EXERCISE TO USE SOME CROSS MEMORY
*      INSTRUCTIONS AND SEARCH SOME INTERESTING CONTROL BLOCKS.
*      IT IS WORKING WELL ON MVS/XA 2.2.0 AND I DON'T SEE WHY IT
*      WOULDN'T WORK ON OTHER RELEASES.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CNSL     AMODE 31
CNSL     RMODE 24
CNSL     CSECT                         LINKAGE CONVENTIONS
         SAVE  (14,12)
         LR    R12,R15
         USING CNSL,R12
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(R13)
         LR    R13,R15
         STSIZE SIZE=80,LINE=24        SET TERMINAL SIZE
         LTR   R15,R15
         BZ    GOAHEAD
         TPUT  ERRMSG01,L'ERRMSG01     ISSUE ERROR MESSAGE
         B     ENDALL
GOAHEAD  DS    OH
*        GET AUTHORIZATION TO USE CROSS MEMORY SERVICES
         MODESET MODE=SUP              GET IN SUPERVISOR STATE
         EPAR  R1                      GET ASID
         STH   R1,PASID                SAVE IT
         LA    R1,1                    AUTHORIZATION INDEX
         AXSET AX=(R1)                 TOTAL
         MODESET MODE=PROB             GET IN PROBLEM STATE
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE ON
         STLINENO LINE=1,MODE=ON       CLEAR SCREEN
         MVC   CNSLID,=F'1'            INIT BY CN01
OTHCNSL  DS    0H
*        SEARCH CONTROL BLOCK TO GET RDCM ADDRESS
         L     R1,CVTPTR               POINT TO CVT
         L     R1,CVTCUCB-CVT(R1)      POINT TO UCM BASE
         LH    R2,UCMCTID-UCM(R1)      COMM TASK ASID
         STH   R2,CONASID              SAVE IT
         L     R4,UCMVEZ-UCM(R1)       SIZE OF A UCME
         L     R5,UCMVEL-UCM(R1)       LAST UCME
         L     R1,UCMVEA-UCM(R1)       FIRST UCME
         LR    R8,R5                   CALCULATE
         SLR   R8,R1                        HOW MANY
         SRDL  R8,32                          CONSOLES WE HAVE
         DR    R8,R4
         LA    R9,1(R9)
         ST    R9,CNSLO                SAVE IT
LOOPUCME DS    0H
         L     R2,UCMFEXTP-UCMLIST(R1) UCME FIXED EXTENSION
         CLC   CNSLID,UCMEFCN-UCMEFEXT(R2) IS THE ONE I WANT ?
         BE    FOUNDIT                 YES..
         AR    R1,R4                   NEXT ONE
         CR    R1,R5                   OVER ?
         BNH   LOOPUCME                NO ?
         STLINENO LINE=1               CLEAR SCREEN
         STFSMODE OFF                  LEAVE FULL SCREEN MODE
         TPUT  ERRMSG03,L'ERRMSG03     ISSUE ERROR MESSAGE
         B     ENDALL
FOUNDIT  DS    0H
         MVC   IDENT+14(09),=CL09'ALTERNATE'
         TM    UCMDISP1-UCMLIST(R1),UCMDISPA MASTER CONSOLE ?
         BNO   NOTMSTR                 NO
         MVC   IDENT+14(09),=CL09'MASTER  '
NOTMSTR  DS    0H
         ICM   R3,15,UCMXB-UCMLIST(R1) RDCM ADDRESS
         BNZ   RDCMOK                  OK
         TM    FLAG,X'01'
         BZ    BACK
         XC    FLAG,FLAG
         L     R1,CNSLID               CALCULATE
         LA    R1,1(R1)                     NEXT
         C     R1,CNSLO
         BNH   CNSLOK10
         LA    R1,1
CNSLOK10 DS    0H
         ST    R1,CNSLID
         B     OTHCNSL
BACK     DS    0H
         L     R1,CNSLID               CALCULATE
         BCTR  R1,0                         PREVIOUS
         LTR   R1,R1
         BNZ   CNSLOK20
         L     R1,CNSLO
CNSLOK20 DS    0H
         ST    R1,CNSLID
         B     OTHCNSL
RDCMOK   DS    0H
*        LOAD CSARTN IN CSA
         GETMAIN RU,LV=RTNLEN,SP=241   OBTAIN WORKAREA IN CSA
         ST    R1,RTNADDR              SAVE IT ADDRESS
         L     R4,RTNADDR              POINT TO GETMAINED AREA
         LA    R5,RTNLEN               LOAD ITS LENGTH
         LA    R6,CSARTN               POINT TO THE ROUTINE
         LA    R7,RTNLEN               LOAD ITS LENGTH
         MVCL  R4,R6                   MOVE IT TO CSA
         LA    R1,PLIST                PARMLIST ADDRESS
         L     R15,RTNADDR
         O     R15,=X'80000000'        SET AMODE 31
         BASSM R14,R15                 GO THERE
         L     R3,RTNADDR              FREEMAIN CSA AREA
         FREEMAIN RU,LV=RTNLEN,A=(3),SP=241
*        GET AREA ON PRIVATE STORAGE TO MOVE THE CONSOLE BUFFER
         LM    R4,R5,SCRNADD           FIRST LINE
         SLR   R5,R4                   BUFFER SIZE IN R5
         ST    R5,SCREENSZ             SAVE SCREEN SIZE
         LA    R0,L'SETCUR+IDENTL(R5)  NEW LENGTH
         ST    R0,BUFFLEN              SAVE IT TO FREEMAIN
         GETMAIN RU,LV=(0)             OBTAIN WORKAREA
         ST    R1,BUFFADD              SAVE ITS ADDRESS
         MVC   0(L'SETCUR,R1),SETCUR   MOVE RA+SBA+SF+IC+RA
         L     R1,CSNLID               CONVERT
         CVD   R1,DOUBLE
         UNPK  IDENT+11(2),DOUBLE             CONSOLE ID
         OI    IDENT+11+1,X'F0'
         L     R1,BUFFADD              LOAD SCREEN ADDRESS
         LA    R1,L'SETCUR(R1)
         A     R1,SCREENSZ
         MVC   0(IDENTL,R1),IDENTB     MOVE CONSOLE IDENTIFICATION
MOVEBUFF DS    0H
         TIME  DEC                     TIME OF DAY
         SRL   R0,4                    NO CENTS
         O     R0,=X'0000000F'         PUT A SIGN
         ST    R0,FULL                 SAVE IT
         MVC   IDENT+39(L'PATERN),PATERN MOVE PATTERN
         ED    IDENT+39(L'PATERN),FULL EDIT
         L     R1,BUFFADD              LOAD SCREEN ADDRESS
         LA    R1,L'SETCUR(R1)
         A     R1,SCREENSZ
         MVC   0(IDENTL,R1),IDENTB     MOVE CONSOLE IDENTIFICATION
         XR    R2,R2                   KEY ZERO
         L     R3,BUFFADD              327X BUFFER ADDRESS
         LA    R3,L'SETCUR(R3)         BUMP WCC+SBA+SF+IC
         L     R4,SCRNADD              CONSOLE FIRST LINE
         SH    R4,=H'6'                BACK 6 BYTES (327X DATA STREAM)
         L     R5,SCREENSZ             SCREEN SIZE
         MODESET MODE=SUP              GET IN SUP MODE
         LH    R1,CONASID              COMM TASK ASID
         SSAR  R1                      CHANGE SECONDARY MODE
* R2-> CONSOLE BUFFER STORAGE KEY
* R3-> MY BUFFER
* R4-> CONSOLE BUFFER
* R5-> LENGTH TO BE MOVED
MOVE     MVCP  0(R5,R3),0(R4),R2       MOVE CONSOLE BUFFER
         BZ    DONE
         AL    R3,=F'256'              NEXT 256
         AL    R4,=F'256'              NEXT 256
         SL    R5,=F'256'              MINUS 256
         B     MOVE
DONE     DS    0H
         LH    R1,PASID                MY ASID
         SSAR  R1                      CHANGE TO PRIMARY MODE
         MODESET MODE=PROB             GET IN PROB MODE
         L     R4,BUFFLEN              SCREEN LENGTH
         L     R3,BUFFADD              SCREEN ADDRESS
         TPUT  (3),(4),FULLSCR         SHOW IT
         LA    R1,10                   RESET OLD COMMAND POINTER
         STH   R1,OLDCMDP
GETAREA  DS    0H
         CLC   UPDTME,=F'0'            ZERO ?
         BE    NOREFR                  YES.
         TGET  AREA,L'AREA,ASIS,NOWAIT DON'T WAIT FOR INPUT
         LTR   R15,R15
         BZ    ENTRY
         STIMER WAIT,BINTVL=UPDTME     WAIT
         B     MOVEBUFF
NOREFR   DS    0H
         TGET  AREA,L'AREA,ASIS        WAIT INPUT
ENTRY    DS    0H
         CLI   AREA,X'7D'              PF2   ?
         BE    CONTINUE                YES
         CLI   AREA,X'F1'              PF1   ?
         BE    HELP                    YES
         CLI   AREA,X'C1'              PF13  ?
         BE    HELP                    YES
         CLI   AREA,X'F2'              PF2   ?
         BE    AUTOUPD                 YES
         CLI   AREA,X'C2'              PF2   ?
         BE    AUTOUPD                 YES
         CLI   AREA,X'F3'              PF3   ?
         BE    RETURN                  YES
         CLI   AREA,X'C3'              PF15  ?
         BE    RETURN                  YES
         CLI   AREA,X'7C'              PF12  ?
         BE    REDISPL                 YES
         CLI   AREA,X'4C'              PF24  ?
         BE    REDISPL                 YES
         CLI   AREA,X'F8'              PF08  ?
         BE    NEXTCNID                YES
         CLI   AREA,X'C8'              PF20  ?
         BE    NEXTCNID                YES
         CLI   AREA,X'F7'              PF07  ?
         BE    PREVCNID                YES
         CLI   AREA,X'C7'              PF19  ?
         BE    PREVCNID                YES
         B     CONTINUE
AUTOUPD  DS    0H
         CLC   UPDTME,=F'0'            ZERO  ?
         BNE   UPDTE
         MVC   UPDTME,=F'500'
         MVC   IDENT+36(3),=CL3'ON '
         B     MOVEBUFF
UPDTE    DS    0H
         XC    UPDTME,UPDTME
         MVC   IDENT+36(3),=CL3'OFF'
         B     MOVEBUFF
NEXTCNID DS    OH
         MVI   FLAG,X'01'
         L     R1,CNSLID               CALCULATE
         LA    R1,1(R1)                     NEXT
         C     R1,CNSLO
         BNH   CNSLOK1
         LA    R1,1
CNSLOK1  DS    0H
         ST    R1,CNSLID
         L     R0,BUFFLEN
         L     R3,BUFFADD
         FREEMAIN RU,LV=(0),A=(3)      FREEMAIN SCREEN AREA
         B     OTHCNSL
PREVCNID DS    0H
         L     R1,CNSLID               CALCULATE
         BCTR  R1,0                         PREVIOUS
         LTR   R1,R1
         BNZ   CNSLOK2
         L     R1,CNSLO
CNSLOK2  DS    0H
         ST    R1,CNSLID
         L     R0,BUFFLEN
         L     R3,BUFFADD
         FREEMAIN RU,LV=(0),A=(3)      FREEMAIN SCREEN AREA
         B     OTHCNSL
REDISPL  DS    0H
         LH    R1,OLDCMDP              SUBTRACT
         BCTR  R1,0                       1 TO POINTER
         STH   R1,OLDCMDP
         LA    R4,L'OLDCMDB(0,0)       LENGTH OF ONE ENTRY
         MH    R4,OLDCMDP              DISPLACEMENT
         LA    R5,OLDCMDB              BUFFER ADDRESS
         AR    R5,R4                   POINT TO THE RIGHT ENTRY
         MVC   OLDCMD,0(R5)            MOVE IT
         LTR   R1,R1                   ZERO ?
         BNZ   STOREIT                 NO
         LA    R1,10                   RESET
STOREIT  DS    0H
         STH   R1,OLDCMDP
         CLC   OLDCMD,BLANK            FREE ENTRY
         BNE   SHOWIT                  NO. SHOW IT
         CH    R1,=H'10'               WRAPPED ?
         BNE   REDISPL                 LOOK FOR A NON-EMPTY ONE
         B     GETAREA
SHOWIT   DS    0H
         TPUT  REPEAT,REPLEN,FULLSCR   SHOW LAST COMMAND
         B     GETAREA                 READ IT
HELP     DS    0H
         TPUT  HELPB,HELPL,FULLSCR     SHOW HELP
         B     GETAREA                 READ IT
CONTINUE DS    0H
         CH    R1,=H'6'                TYPED ANYTHING ?
         BNH   NOCMD                   NO
         OC    AREA+6(AREALEN-6),BLANK UPPER CASE INPUT
         CLC   AREA+6(AREALEN-6),BLANK NULL COMMAND ?
         BE    NOCMD                   YES
         MVI   COMMAND,X'40'           CLEAR COMMAND AREA
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         MVC   COMMAND,AREA+6          MOVE TO COMMAND AREA
         LA    R4,OLDCMDB+L'OLDCMDB    NEXT BOX
         LA    R5,OLDCMDL-L'OLDCMDB(0,0) SIZE
         LA    R6,OLDCMDB              OLD COMMAND BUFFER ADDRESS
         LA    R7,OLDCMDL-L'OLDCMDB(0,0) SIZE
         MVCL  R6,R4                   SHIFT BUFFER
         MVC   OLDCMDB+(9*L'OLDCMDB),AREA+6    SAVE LAST COMMAND
         MVC   WTOMSG+4(74),COMMAND
         WTO   MF=(E,WTOMSG),CONSID=CNSLID     WRITE TO OPERATOR
         MODESET KEY=ZERO
         L     R0,CNSLID
         MGCR  CMD
         MODESET KEY=NZERO
NOCMD    DS    0H
         MVI   AREA,X'40'              CLEAN COMMAND AREA
         MVC   AREA+1(AREALEN-1),AREA
         B     MOVEBUFF                RESHOW
RETURN   DS    0H
         STLINENO LINE=1               CLEAR SCREEN
         STFSMODE OFF                  LEAVE FULL SCREEN MODE
         L     R0,BUFFLEN
         L     R3,BUFFADD
         FREEMAIN RU,LV=(0),A=(3)      FREEMAIN SCREEN AREA
ENDALL   DS    0H
         L     R13,SAVEAREA+4          RESTORE CALLER REG 13
         LM    14,12,12(R13)           RESTORE REGS
         XR    R15,R15
         BSM   0,R14
*        CONSTANTS
ERRMSG01 DC    C'CNSL001E - STSIZE MACRO ERROR'
ERRMSG03 DC    C'CNSL003E - INVALID CONSOLE ID'
WTOMSG   WTO   'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
               XXXXXXXXXXXXXXXXXXX',                                   X
               CONSID=,MF=L
SAVEAREA DS    18F
CMD      DC    AL2(L'COMMAND+4)
         DC    AL2(*-*)
COMMAND  DC    CL(AREALEN-6)' '
REPEAT   DC    X'C3115A50401DC113'     327X DATA STREAM
OLDCMD   DC    CL(AREALEN-6)' '
         DC    X'3C5C6F00'             REPEAT TO ADDRESS
REPLEN   EQU   *-REPEAT
OLDCMDP  DS    H                       POINTER TO OLD COMMAND BUFFER
OLDCMDB  DC    10CL(AREALEN-6)' '      OLD COMMAND BUFFER
OLDCMDL  EQU   *-OLDCMDB
SETCUR   DC    X'C33C5A4F00115A50401DC1133C5C6F00'
PATERN   DC    X'402120207A20207A2020'
IDENTB   DC    X'115CF01DE840'          327X DATA STREAM
IDENT    DC    C'CONSOLE ID=XX XXXXXXXXX AUTO UPDATE OFF  HH:MM:SS'
         DC    X'3C5D7F00'             REPEAT TO ADDRESS
IDENTL   EQU   *-IDENTB
HELPB    DC    X'C3115CF01DE840'         327X DATA STREAM
         DC    C'1/13-HELP 2/14-AUTOUPDATE ON/OFF 3/15-END 7/19-PREV 8/X
               20-NEXT 12/24-RETRIEVE'
HELPL    EQU   *-HELPB
BLANK    DC    CL(AREALEN-6)' '
AREA     DC    CL80' '
AREALEN  EQU   *-AREA
FLAG     DS    X
DOUBLE   DS    D
FULL     DS    D
UPDTME   DC    F'0'
CNSLID   DS    F
RTNADDR  DS    F
BUFFADD  DS    F
BUFFLEN  DS    F
SCREENSZ DS    F
CNSLO    DS    F
PLIST    DC    A(PARAM)
PARAM    DS    0F
TDCMADD  DS    F
SCRNADD  DS    F
LENGADD  DS    F
PASID    DS    H
CONASID  DS    H
         LTORG
*-------------------------------------------------------------------
* ROUTINE TO RUN IN CSA.
* ISSUE CROSS MEMORY INTRUCTIONS TO SEE AREAS IN THE COMMAND TASK
* ADDRESS SPACE.
* OBS: THIS ROUTINE COULD BE LOADED IN CSA WITH THE MACRO LOAD.
*-------------------------------------------------------------------
CSARTN   DS    0H
         SAVE  (14,12)                 SAVE CALLER'S REGISTER
         LR    R12,R15                 ESTABLISH ADDRESSING
         USING CSARTN,R12
         L     R7,0(R1)                PLIST ADDR
         GETMAIN RU,LV=WORKLEN         GET WORKAREA
         LR    R8,R1                   ESTABLISH ADDRESSING
         USING WORKAREA,R8
         LA    R15,SAVE                LINKAGE
         ST    R15,8(R13)                     CONVENTIONS
         ST    R13,SAVE+4
         LR    R13,R15
         SET SECONDARY ADDRESS SPACE
         MODESET MODE=SUP              GET IN SUPERVISOR MODE
         LH    R1,CONASID-PARAM(R7)    COMM TASK ASID
         SSAR  R1                      SET SECONDARY AS
         SAC   X'100'                  SWITCH ADDRESS SPACE CONTROL
         IPK                           SAVE PSW KEY
         IVSK  R15,R3                  GET STORAGE KEY FROM ADDRESS
         SPKA  0(R15)                  INSERT IT IN PSW
         L     R3,0(R3)                GET WHAT I WANT
         L     R4,48(R3)               SCREEN IMAGE BUFFER
         L     R5,64(R3)               LAST LINE ADDRESS
         SPKA  0(R2)                   RETURN TO MY PSW KEY
         SAC   X'000'                  SWITCH ADDRESS SPACE CONTROL
         LH    R1,PASID-PARAM(R7)      MY ASID
         SSAR  R1                      GO THERE
         MODESET MODE=PROB             GET IN PROB MODE
         ST    R3,TDCMADD-PARAM(R7)    SAVE TDCM ADDRESS
         ST    R4,SCRNADD-PARAM(R7)    SAVE SCREEN IMAGE BUFFER ADDRESS
         ST    R5,LENGADD-PARAM(R7)    SAVE LAST LINE ADDRESS
         L     R13,SAVE+4              RESTORE CALLER REG 13
         FREEMAIN RU,LV=WORKLEN,A=(8)  FREEMAIN WORKAREA
         DROP  R8
         LM    14,12,12(R13)           RESTORE REGS
         XR    R15,R15
         BSM   0,R14
RTNLEN   EQU   *-CSARTN
*----------------------------------------------------------------------
* DUMMY SECTIONS
*----------------------------------------------------------------------
WORKAREA DSECT
SAVE     DS    18F
WORKLEN  EQU   *-WORKAREA
         CVT   DSECT=YES
         IEECUCM
         REGEQU
         END


Francisco Bonilha Dal Fabbro
Senior Systems Programmer
Banco Cidade (Brazil)                                     c Xephon 1993

