A JES2 archiving facility

OVERVIEW

In today's data processing environment there is a constant
desire to automate and increase efficiency wherever possible.
One area of operations where an opportunity exists to achieve
such optimization is in the processing of JES2 listings (job
logs).  Many companies, upon converting to MVS from VSE,
find themselves storing mountains of JES2 listings.  This is
largely because of the high value placed upon the archiving of
JES listings in the MVS production environment.

The disposition of datasets, the resulting condition codes of
batch jobs, CICS shutdown statistics, and completion times are
all examples of data that is referenced repeatedly and needs to
be retained.  As a result, most companies store the hard copy
of JES listings and cyclically purge the oldest versions.  It soon
becomes clear that this is a poor way to manage JES data and
other options need to be explored.  This article presents one
solution.  It is called JAF, which stands for JES2 Archival
Facility.  It was developed solely to manage JES2 job logs and
other SYSOUT data that needs to be accessible on-line.

JAF runs as a started task that wakes up every ten minutes and
extracts any output located in the targeted output class (class J
in the code provided) and places it in the JAF database for that
day.  A separate database is maintained for each day of the
week and is purged after seven days.  JAF manages totally the
creation and deletion of the databases on a daily basis.

In the code provided, this process occurs at 8.00 am, for this is
when our daily production batch cycle is normally complete.
Once archived, the listings can be reviewed by issuing a TSO
CLIST which submits a batch job to print the listing.  Because
of the indexing provided by JAF, this batch job is completed in
seconds and then, by using SDSF (or any other JES2 viewing
facility), the user has immediate on-line access to the listing.
In addition, at the end of the month, JAF archives the end of
month database, automatically replacing the previous month's
database.


TECHNICAL DESCRIPTION AND DEPENDENCIES

JAF consists of an STC module (JAFPP), which performs the
archiving; a batch retrieval module (JAFRU); and a TSO
CLIST to invoke the retrieval module.  JAF uses the JES2
functional subsystem, as external writers do, to gain access to
the JES listings.  It has been placed into production in an MVS
2.1.7/JES2 2.1.5 environment and there are no known release
dependencies.  I would suggest, however, that because of
potential changes to the CVT, IEFJESCT, and IEFJSSOB
macros, the JAF STC module is re-assembled before execution
in a new release.

The daily databases consist of a separate index and data file.
The data file is direct access with variable blocked records.
Each listing is placed in a separate physical block.  By
maintaining a track residual space counter, each track is fully
utilized.  The index is a sequential, fixed block file that is read
totally into memory (with just four I/Os for 2000 daily listings)
when listings are to be retrieved.  This results in very quick
access.  We placed the databases on our paging packs because
of their infrequent access, thus not incurring any additional
DASD cost.  We experienced no noticeable degradation by that
placement and found it was a perfect use of the 'dead' DASD
space found on paging volumes (this experience is based upon
a well filled 3090-600S with well over 100 JAF users).  JAF
performs data compression by eliminating duplicate characters.
Our space requirements consisted of roughly 100 cylinders for
2000 daily jobs.


INSTALLATION, USE, AND TAILORING

To install JAF, simply assemble the following code and place it
in a LINKLIST load library.  The module JAFPP needs to be
linked with AC=1 and placed in an APF-authorized library.
The JCL to execute the extraction STC (JAFPP) requires only
the execution of JAFPP - all the required datasets are allocated
as needed.  The JCL to execute the retrieval job is created in
the CLIST JAF and should be modified to meet your own
installation's standards.  By default, the CLIST will create a
job name prefixed with the user's TSO user-id and suffixed
with a 'Z'.  The use of the CLIST is self-explanatory, once
invoked.  It simply asks for the job name of the listing required
and the day of the week on which it was executed.  JAF will
retrieve all listings under that job name for that day.  Some
changes to the source code that might be considered desirable
include altering the wake-up interval, the DASD device type,
and the JES class to be used.

Batch JCL is provided to allocate initially the data and index
portions of the databases.  Each daily database needs to be
initially allocated.  Thereafter, JAF will delete and re-allocate
the databases using the existing space definitions.  The
procedure to perform the month-end copy, which is executed
automatically, is also shown.  Each of these job streams will
obviously need to be tailored to your environment.


JAFPP SOURCE CODE

    TITLE 'JAFPP - JES2 JOB LOG ARCHIVING FACILITY PRIMARY PROCESSOR'
JAFPP    CSECT
* SETS A STIMER AND AWAKENS EVERY TEN MINUTES. IT THEN DETERMINES IF A
* NEW JES2 JOB LOG ARCHIVE DATA SET SHOULD BE ALLOCATED FOR A NEW
* PRODUCTION DAY. IF A NEW PRODUCTION DAY HAS BEEN INDICATED, JAF
* ALLOCATES THE NEW DAYS ARCHIVE DATASET WITH A DISP OF OLD, OTHERWISE
* THE SAME DAY'S IS ALLOCATED WITH MOD. JAF THEN CHECKS TO SEE IF ANY
* NEW JOB LOGS HAVE BEEN PLACED IN THE JES2 QUEUE FOR PROCESSING. IF
* THERE ARE ANY PRESENT, IT THEN EXTRACTS THEM AND PLACES THEM IN THE
* PERTINENT JOB LOG ARCHIVE DATASET. IT ALSO RECORDS THE TTR OF EACH
* PLACED JOB LOG IN THE INDEX DATASET FOR THAT DAY FOR LATER RETRIEVAL.
* NOTE: IT IS CRITICAL THAT THE DATA AND INDEX DATASETS RESIDE ON THE
* SAME VOLUME.
ENTRYPT  DS    0H
         ENTRY ENTRYPT
         STM   R14,R12,12(R13)     -SAVE CALLERS REGISTERS
         LR    R12,R15             -CREATE BASE REG
         LA    R8,2048(R12)        -ESTABLISH SECOND BASE
         LA    R8,2048(R8)         -
         USING JAFPP,R12           -ESTABLISH ADDRESSABILITY
         USING JAFPP+4096,R8       -ESTABLISH ADDRESSABILITY 2ND BASE
         B     BYPHEAD             -BRANCH AROUND HEADER
         DC    C'JAFPP-2.03'
BYPHEAD  DS    0H
         ST    R13,SAVEAREA+4      -SAVE CALLERS SAVEAREA ADDRESS
         LA    R15,SAVEAREA        -OBTAIN OUR SAVEAREA ADDRESS
         ST    R15,8(0,R13)        -AND SAVE IT IN CALLERS SAVEAREA
         LA    R13,SAVEAREA        -RE-OBTAIN OUR SAVEAREA ADDRESS
         EXTRACT COMMLPTR,FIELDS=COMM GET ADDR OF ECB AND CIB PTRS
         L     R2,COMMLPTR         -GET COMMAND LIST ADDRESS
         USING COMMADDR,R2         -ESTABLISH ADDRESSABILITY
         LM    R9,R10,COMMADDR     -GET COMMAND ECB AND CIB POINTERS
         ST    R9,CMDECBPT         -STORE ECB POINTER IN ECBLIST
         QEDIT ORIGIN=COMMCIB,BLOCK=(R10) FREE CIB
         QEDIT ORIGIN=COMMCIB,CIBCTR=1    INDICATE 1 CIB TO BE CHAINED
         OPEN  (SNAPOUT,(OUTPUT))
INTLOOP  DS    0H                  -INTERVAL TIMER LOOP
         WTO   'JAFPP001: JAF INTERVAL PROCESSING COMMENCING',         X
               ROUTCDE=2,DESC=4
         MVI   FLAGS,X'00'         -SET PROCESSING FLAGS TO DEFAULTS
         MVI   STIMRECB,X'00'      -CLEAR TIMER ECB
         TIME
         ST    R0,TIME             -SAVE TIME
         ST    R1,DATE             -SAVE DATE
         BAL   R11,WEEKDAY#        -CALCULATE DAY OF WEEK
         MVC   PCKYEAR(1),YR       -MOVE YEAR TO PACKED FIELD
         MVI   PCKYEAR+1,X'0F'     -SET LOW DIGIT OF YEARPCK TO 0
         STC   R10,ARCDAY          -SAVE DAY CACLULATED DAY OF WEEK
         MVI   ARCDAYSG,X'0F'      -SET LOW DIGIT OF ARCDAY TO 0
         CLI   DAY,X'01'          Q-FIRST DAY OF MONTH
         BNE   NOTEOM             N-LAST NIGHT WAS NOT EOM PROCESSING
         CLI   TIME,X'07'         Q-LESS THAN 8 AM
         BNH   NOTEOM             Y-DO NOT PROCESS EOM FILES YET
         BAL   R11,COPYEOM        Y-COPY (IF NOT ALREADY DONE) EOM FILE
NOTEOM   DS    0H                  -
         CLI   TIME,X'07'         Q-LESS THAN 8 AM
         BH    PASS8              N-
         SP    PCKDAY,=P'1'       Y-SUBTRACT 1 - USE YESTERDAYS CR DATE
         SP    ARCDAYPK,=P'1'      -SUBTRACT 1 - USE YESTERDAYS DATASET
         BAL   R11,CHKDAY0         -CHECK TO SEE IF DAY HAS REACHED 0
         C     R10,=F'2'          Q-MONDAY BEFORE 8 AM
         BNE   PASS8              N-
         MVI   ARCDAY,X'07'        -SET ARCHIVE DAY TO SATURDAY
         SP    PCKDAY,=P'1'       Y-SUBTRACT 1 - USE 2 DAYS PASS
         BAL   R11,CHKDAY0         -CHECK TO SEE IF DAY HAS REACHED 0
PASS8    DS    0H                  -CHECK FOR SUNDAY
         C     R10,=F'1'          Q-SUNDAY
         BNE   CHKCRDTE           N-CHECK ARCHIVE CREATION DATE
         MVI   ARCDAY,X'07'        -SET ARCHIVE DAY TO SATURDAY
         CLI   TIME,X'07'         Q-PASS 8 AM
         BNH   CHKCRDTE           N-NOT SUNDAY PASS 8 AM
         SP    PCKDAY,=P'1'       Y-SUBTRACT 1 - USE 2 DAYS PASS
         BAL   R11,CHKDAY0         -CHECK TO SEE IF DAY HAS REACHED 0
CHKCRDTE DS    0H                  -CHECK CREATION DATE OF ARCHIVE DS
         SLR   R9,R9               -CLEAR REG 9
         IC    R9,PCKYEAR          -INSERT PACKED YEAR
         SLA   R9,4                -SHIFT TO MAKE ROOM FOR SIGN
         O     R9,=X'0000000F'     -CREATE SIGN
         ST    R9,DUBLWORD+4       -SAVE DECIMAL YEAR
         CVB   R9,DUBLWORD         -CONVERT TO A BINARY VALUE
         STC   R9,CRYEAR           -STORE ADJUSTED YEAR
         MVC   DUBLWORD+6(2),PCKDAY -MOVE DECIMAL DAY
         CVB   R9,DUBLWORD         -CONVERT TO A BINARY VALUE
         ST    R9,FULLWORD         -STORE ADJUSTED DAY
         MVC   CRDAY(2),FULLWORD+2 -MOVE ADJUSTED DAY
         IC    R9,ARCDAY           -INSERT ADJUSTED ARCHIVE DAY
         S     R9,=F'1'            -BACKUP A DAY FOR NDS NUMBERING
         O     R9,=X'000000F0'     -CREATE A ZONE OF 'F'
         STC   R9,ARCHIVE#        -STORE ARCHIVE DATASET NUMBER
         STC   R9,ARCIX#          -STORE ARCHIVE DATASET NUMBER
         BAL   R11,RETDSCB         -RETRIEVE PROPER DSCB
         CLC   CRDATE,DSCBCRDT    Q-ARE CREATION DAYS EQUAL
         BE    JUSTALLO           Y-ALLOCATE SAME DAYS DATA SET
         BAL   R11,DELETE          -DELETE LAST WEEKS DATA SET
         OI    FLAGS,NEWDAYDS     N-FLAG TO ALLOCATE WITH OLD
JUSTALLO DS    0H                  -
         BAL   R11,ALLOCOPN        -ALLOCATE AND OPEN ARCHIVE DATA SET
         BAL   R11,ARCHIVE         -SELECT AND ARCHIVE JOB LOGS
         TM    FLAGS,TERMJAF      Q-TERMINATE JAF
         BO    TERMEXIT           Y-
         BAL   R11,DEALLOC         -DE-ALLOCATE DATA AND INDEX
         MVC   WAITIME+2(2),=C'10' -INITIALIZE WAITIME TO TEN MINUTES
         STIMER REAL,POSTTIME,DINTVL=WAITIME
         MODESET MF=(E,SUPMODE)    -ENTER SUP STATE
         WAIT  1,ECBLIST=ECBLIST,LONG=YES
         L     R2,CMDECBPT         -RETRIEVE ADDRESS OF COMMAND ECB
         TM    0(R2),X'40'        Q-OPERATOR ENTER COMMAND
         MVI   0(R2),X'00'         -CLEAR COMMAND ECB FOR FUTURE
         BO    ENDLOOP            Y-RESET KEY AND TERMINATE
         MODESET MF=(E,PROBMODE)   -RETURN TO PROBLEM STATE
         B     INTLOOP             -CONTINUE LOOPING
ENDLOOP  DS    0H
         MODESET MF=(E,PROBMODE)   -RETURN TO PROBLEM STATE
         TTIMER CANCEL            Y-CANCEL REMAINDER OF TIMER INTERVAL
         L     R2,COMMLPTR         GET COMMAND LIST ADDRESS
         L     R3,COMMCIB          GET CIB POINTER
         QEDIT ORIGIN=COMMCIB,BLOCK=(R3) FREE CIB
         QEDIT ORIGIN=COMMCIB,CIBCTR=1   INDICATE 1 CIB TO BE CHAINED
         WTO   'JAFPP100: JAF IS TERMINATING NORMALLY',                X
               ROUTCDE=2,DESC=4
         L     R13,SAVEAREA+4      -RELOAD R13
         RETURN (14,12),RC=0
TERMEXIT DS    0H
         SNAP  DCB=SNAPOUT,ID=1,PDATA=REGS,STORAGE=(ENTRYPT,ENDPT)
         BAL   R11,DEALLOC         -DE-ALLOCATE DATA AND INDEX
         WTO   'JAFPP200: JAF IS ABNORMALLY TERMINATING',              X
               ROUTCDE=2,DESC=4
         ABEND 999,DUMP
         L     R13,SAVEAREA+4      -RELOAD R13
         RETURN (14,12),RC=0
CHKDAY0  DS    0H                  -CHECK TO SEE IF THE DAY IS 0
         CP    PCKDAY,=P'0'       Q-IS DAY DOWN TO 0
         BH    EXITDAY0           N-EXIT THIS ROUTINE
         AP    PCKDAY,=P'365'     Y-ADD 365 TO POINT TO END OF LST YR
         SP    PCKYEAR,=P'1'       -SUBTRACT 1 FROM YEAR
         CP    PCKYEAR,=P'0'      Q-YEAR 0
         BH    YEAROK             N-
         AP    PCKYEAR,=P'99'     Y-SET TO PRIOR CENTURY
YEAROK   DS    0H                  -YEAR IS NOT 0 - NOW CHECK FOR LEAP
         XR    R6,R6               -CLEAR REG 6
         ST    R6,DBLWORD          -CLEAR TOP OF DOUBLEWORD
         MVC   YR,PCKYEAR          -REPLACE YR WITH NEW ADJUSTED YR
         L     R1,DATE             -RELOAD DATE
         ST    R1,DBLWORD+4        -SAVE PACKED DATA IN WORK AREA
         CVB   R7,DBLWORD          -CONVERT TO BINAR-CONVERT TO BINARY
         D     R6,F1000            -R6 = DAY / R7 = YEAR
         ST    R7,YEAR             -SAVE YEAR
         LTR   R7,R7               -IS YEAR = 00
         BNZ   *+8                 -NO - USE YEAR VALUE
         L     R7,CENTURY          -YES - USE CENTURY
         N     R7,F3               -MOD 4
         ZAP   LEAPINC,=P'0'      Y-SET LEAP YEAR TO 0 - DEFAULT
         C     R7,=F'1'           Q-LAST YEAR A LEAP YEAR
         BH    NOLSLEEP           N-
         ZAP   LEAPINC,=P'1'      Y-SET LEAP YEAR INCREMENT
NOLSLEEP DS    0H
         AP    PCKDAY,LEAPINC      -ADD THE LEAP YEAR INCREMENT
EXITDAY0 DS    0H                  -YEAR IS NOT 0
         BR    R11
*  THE FOLLOWING BLOCK OF CODE IS COMPLIMENTS OF WILLIAM WURZBACH;
*  SYSTEMS PROGRAMMER, UNIVERSITY OF WISCONSIN WHICH WAS EXTRACTED
*  FROM THE MAY, 1987 ISSUE OF MVS UPDATE
WEEKDAY# DS    0H                  -CALCULATE DAY OF WEEK
         XR    R6,R6               -CLEAR REG 6
         ST    R6,DBLWORD          -CLEAR TOP OF DOUBLEWORD
         L     R1,DATE             -RELOAD DATE
         ST    R1,DBLWORD+4        -SAVE PACKED DATA IN WORK AREA
         CVB   R7,DBLWORD          -CONVERT TO BINAR-CONVERT TO BINARY
         D     R6,F1000            -R6 = DAY / R7 = YEAR
         ST    R7,YEAR             -SAVE YEAR
         LTR   R7,R7               -IS YEAR = 00
         BNZ   *+8                 -NO - USE YEAR VALUE
         L     R7,CENTURY          -YES - USE CENTURY
         N     R7,F3               -MOD 4
         IC    R7,JULADD(R7)       -ADJUST IF LEAP YEAR
         STC   R7,JULTAB+5         -SAVE IN TABLE
         LA    R7,JULTAB-4         -PREPARE FOR LOOP
JULOOP   DS    0H                  -CONVERT TO MONTH AND DAY FORMAT
         LA    R7,4(R7)            -POINT TO NEXT MONTH
         SH    R6,0(R7)            -SUBTRACT DAYS FOR THIS MONTH
         BP    JULOOP              -LOOP WHILE > 0
         AH    R6,0(R7)            -ADD DAYS BACK
         STC   R6,DAY              -SAVE DAY
CALCDAY  DS    0H                  -CALCULATE DAY OF WEEK
         LH    R7,2(R7)            -R6 = DAY, R7 = MTH
         L     R4,YEAR             -R4 = YEAR
         L     R9,CENTURY          -R9 = CENTURY
         C     R7,F11              -JAN OR FEB
         BL    *+18                -NO
         LTR   R4,R4               -YES - YEAR = 00
         BNZ   *+10                -NO KEEP AS IS
         LA    R4,100(R4)          -YES - RESET TO 99
         BCTR  R9,0                -ADJUST CENTURY FOR JAN/FEB
         BCTR  R4,0                -ADJUST YEAR FOR JAN/FEB
         LR    R10,R6
         XR    R6,R6
         M     R6,F13
         BCTR  R7,0
         XR    R6,R6
         D     R6,F5               -+ (13M - 1)/51
         AR    R10,R7
         AR    R10,R4              - + YEAR
         SRA   R4,2
         AR    R10,R4              - + Y/4
         SLA   R9,1
         SR    R10,R9              - - 2C
         SRA   R9,3
         AR    R10,R9               + C/4
         LTR   R10,R10
         BNM   MOD7SUB
MOD7ADD  A     R10,F7              -MODULO 7
         BM    MOD7ADD
MOD7SUB  S     R10,F7
         BNM   MOD7SUB
         A     R10,F7
         LA    R10,1(R10)          -SHIFT TO 1 BASED
         BR    R11
COPYEOM  DS    0H                  -CHECK TO SEE IF EOM FILE HAS BEEN
* COPIED AND IF NOT ISSUE MVS COMMAND TO START A STC TO COPY EOM FILES
         LOCATE LOCEOM
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    LOCEOMOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP020: UNABLE TO LOCATE EOM DSCB',                  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
LOCEOMOK DS    0H                  -LOCATE OK
         MVC   EOMVOL,LOCVOL       -INDICATE VOLUME OF DSCB
         OBTAIN LOCDSCB2
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    OBTEOMOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP021: UNABLE TO OBTAIN EOM DSCB',                  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
OBTEOMOK DS    0H                  -LOCATE OK
         SLR   R9,R9               -CLEAR REG 9
         IC    R9,PCKYEAR          -INSERT PACKED YEAR
         SLA   R9,4                -SHIFT TO MAKE ROOM FOR SIGN
         O     R9,=X'0000000F'     -CREATE SIGN
         ST    R9,DUBLWORD+4       -SAVE DECIMAL YEAR
         CVB   R9,DUBLWORD         -CONVERT TO A BINARY VALUE
         STC   R9,CRYEAR           -STORE ADJUSTED YEAR
         MVC   DUBLWORD+6(2),PCKDAY -MOVE DECIMAL DAY
         CVB   R9,DUBLWORD         -CONVERT TO A BINARY VALUE
         ST    R9,FULLWORD         -STORE ADJUSTED DAY
         MVC   CRDAY(2),FULLWORD+2 -MOVE ADJUSTED DAY
         CLC   DSCBCRDT,CRDATE    Q-HAVE EOM FILES BEEN COPIED
         BE    EOMDONE            Y-
         MVI   CMDARCH,C'5'        -SET DAY TO FRIDAY AS DEFAULT
         CLI   ARCDAY,X'01'       Q-SUNDAY
         BE    ISSUECMD           Y-USE DEFAULT DAY
         CLI   ARCDAY,X'02'       Q-MONDAY
         BE    ISSUECMD           Y-USE DEFAULT DAY
         IC    R9,ARCDAY           -INSERT ADJUSTED ARCHIVE DAY
         S     R9,=F'2'            -BACKUP A DAY FOR NDS NUMBERING
         O     R9,=X'000000F0'     -CREATE A ZONE OF 'F'
         STC   R9,CMDARCH          -STORE ARCHIVE DATASET NUMBER
ISSUECMD DS    0H                  -
         ST    R14,LINKSAVE        -SAVE RETURN REG
         MODESET MF=(E,SUPMODE)    -ENTER SUP STATE
         XR    R0,R0               -CLEAR REG 0
         LA    R1,COMMLIST         -POINT TO START COMMAND
         SVC   34                  -ISUUE COMMAND SVC
         ST    R15,RETCODE         -SAVE RET CODE FOR DEBUG
         MODESET MF=(E,PROBMODE)   -RETURN TO PROBLEM STATE
         L     R14,LINKSAVE        -RESTORE LINK REG
EOMDONE  DS    0H                  -
         BR    R11                 -RETURN TO MAINLINE
RETDSCB  DS    0H                  -RETRIEVE DSCB FOR ARCHIVE DATA SET
         LOCATE LOCARC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    LOCATEOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP002: UNABLE TO LOCATE ARCHIVE DSCB',              X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
LOCATEOK DS    0H                  -LOCATE OK
         MVC   ARCVOL,LOCVOL       -INDICATE VOLUME OF DSCB
         MVC   TXTVOL,LOCVOL       -INDICATE VOLUME OF DSCB
         OBTAIN LOCDSCB
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    OBTAINOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP003: UNABLE TO OBTAIN ARCHIVE DSCB',              X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
OBTAINOK DS    0H                  -LOCATE OK
         BR    R11
DELETE   DS    0H                  -DELETE AND REALLOCATE DATASET
         MVI   DYNVERB,X'01'       -REQUEST ALLOCATION
         MVC   TXTDSN,ARCDADSN     -COPY DSN
         MVC   TXTBLKAL,DATBLKSZ   -MOVE ALLOCATION BLOCKSIZE
         MVC   TXTPRIM,DATPRIM     -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTSECON,DATSECON   -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTBLKSZ,DATBLKSZ+1 -MOVE BLOCKSIZE
         MVC   TXTLRECL,DATLRECL   -MOVE LOGICAL RECORD LENGTH
         MVC   TXTDSORG,=X'4000'   -MOVE IN DSORG FOR PS
         MVI   TXTNDSP,X'04'       -SET NORMAL DISP TO DELETE
         MVI   TXTCDSP,X'04'       -SET COND DISP TO DELETE
         MVI   TXTSTAT,X'01'       -SET STATUS TO OLD
         LA    R1,DYNTXTAL         -RETRIEVE ALLOC TEXT PTRS TO DELETE
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    ALCDATOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP013: UNABLE TO ALLOCATE DATA DATASET TO DELETE',  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
ALCDATOK DS    0H                  -LOCATE OK
         MVI   DYNVERB,X'02'       -REQUEST DE-ALLOCATION
         LA    R1,DYNTXTDL         -RETRIEVE ALLOC TEXT PTRS TO DELETE
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    DELDATOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP014: UNABLE TO DE-ALLOC DATA DATASET TO DELETE',  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
DELDATOK DS    0H                  -LOCATE OK
         MVI   DYNVERB,X'01'       -REQUEST ALLOCATION
         MVC   TXTDSN,ARCIXDSN     -COPY DSN
         MVC   TXTBLKAL,IDXBLKSZ   -MOVE ALLOCATION BLOCKSIZE
         MVC   TXTPRIM,IDXPRIM     -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTSECON,IDXSECON   -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTBLKSZ,IDXBLKSZ+1 -MOVE BLOCKSIZE
         MVC   TXTLRECL,IDXLRECL   -MOVE LOGICAL RECORD LENGTH
         MVC   TXTDSORG,=X'4000'   -MOVE IN DSORG FOR PS
         MVI   TXTNDSP,X'04'       -SET NORMAL DISP TO DELETE
         MVI   TXTCDSP,X'04'       -SET COND DISP TO DELETE
         MVI   TXTSTAT,X'01'       -SET STATUS TO OLD
         LA    R1,DYNTXTAL         -RETRIEVE ALLOC TEXT PTRS TO DELETE
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    ALCIDXOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP015: UNABLE TO ALLOCATE DATA DATASET TO DELETE',  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
ALCIDXOK DS    0H                  -LOCATE OK
         MVI   DYNVERB,X'02'       -REQUEST DE-ALLOCATION
         LA    R1,DYNTXTDL         -RETRIEVE ALLOC TEXT PTRS TO DELETE
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    DELIDXOK            -
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP016: UNABLE TO DE-ALLOC DATA DATASET TO DELETE',  X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
DELIDXOK DS    0H                  -LOCATE OK
         BR    R11
ALLOCOPN DS    0H                  -ALLOCATE AND OPEN ARCHIVE DATA SET
         MVI   DYNVERB,X'01'       -REQUEST ALLOCATION
         MVC   TXTDSN,ARCDADSN     -COPY DSN
         MVC   TXTBLKAL,DATBLKSZ   -MOVE ALLOCATION BLOCKSIZE
         MVC   TXTPRIM,DATPRIM     -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTSECON,DATSECON   -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTBLKSZ,DATBLKSZ+1 -MOVE BLOCKSIZE
         MVC   TXTLRECL,DATLRECL   -MOVE LOGICAL RECORD LENGTH
         MVC   TXTDSORG,=X'4000'   -MOVE IN DSORG FOR PS
         MVI   TXTNDSP,X'08'       -SET NORMAL DISP TO KEEP
         MVI   TXTCDSP,X'08'       -SET COND DISP TO KEEP
         MVI   TXTSTAT,X'02'       -SET STATUS TO MOD
         TM    FLAGS,NEWDAYDS     Q-FIRST TIME USED FOR THIS WEEK
         BZ    SAMEDAY            N-
         MVI   TXTSTAT,X'04'       -SET STATUS TO NEW
SAMEDAY  DS    0H                  -
         LA    R1,DYNTXTAL         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -LOCATE SUCCESSFULL
         BZ    ALLOCDOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP004: UNABLE TO ALLOCATE ARCHIVE DATA DATASET',    X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
ALLOCDOK DS    0H                  -ALLOC  OK
         LA    R3,ARCDADCB         -RETRIEVE ADDRESS OF DATA DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         MVC   DCBDDNAM,ARCDDNAM   -MOVE DDNAME AS SET BY SVC 99 TO DCB
         OPEN  (ARCDADCB,(OUTPUT))
         TM    DCBOFLGS,X'10'     Q-OPEN SUCCESSFULL
         BO    OPENDAOK            -
         WTO   'JAFPP005: UNABLE TO OPEN ARCHIVE DATA DATASET',        X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
OPENDAOK DS    0H                  -OPEN OK - NOW ALLOCATE INDEX
         LA    R4,1                -SET RECORD LENGTH TO 0
         L     R5,BUF1ADDR         -SET DUMMY DATA ADDRESS
         MVI   0(R5),X'00'
         WRITE ARCHDECB,SF,ARCDADCB,(R5),(R4),MF=E
         CHECK ARCHDECB
         MVC   BLOCKSIZ,=F'0'      -INITIALIZE CURRENT BLOCK LENGTH
         CLC   DCBTRBAL,=X'0000'  Q-SPACE ON THIS TRACK POSITIVE
         BH    DCBTRBOK           Y-
         MVC   DCBTRBAL,=X'0000'  N-SET TO 0
DCBTRBOK DS    0H                  -
         MVC   TRACKBAL+2(2),DCBTRBAL -UPDATE TRACK SPACE REMAINING
         MVC   FULLWORD,DCBFDAD+4  -MOVE LAST 4 BYTES OF DASD ADDR
         L     R4,FULLWORD         -RETRIEVE FULL DISK ADDRESS
         LA    R4,1(R4)            -INCREMENT RECORD
         STC   R4,RECNUMBR
         DROP  R3
         BAL   R10,TRKCALC         -CALCULATE MAX RECORD SIZE
USEDEFLT DS    0H                  -
         L     R3,BUF1ADDR         -RETRIEVE ADDRESS OF DATA FILE REC
         ST    R3,BLOCKPTR         -AND INITIALIZE THE BLOCK POINTER
         MVC   TXTDSORG,=X'4000'   -MOVE IN DSORG FOR PS
         MVC   TXTDSN,ARCIXDSN     -COPY DSN
         MVC   TXTBLKAL,IDXBLKSZ   -MOVE ALLOCATION BLOCKSIZE
         MVC   TXTPRIM,IDXPRIM     -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTSECON,IDXSECON   -MOVE ALLOCATION PRIMARY SPACE
         MVC   TXTBLKSZ,IDXBLKSZ+1 -MOVE BLOCKSIZE
         MVC   TXTLRECL,IDXLRECL   -MOVE LOGICAL RECORD LENGTH
         LA    R1,DYNTXTAL         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -ALLOC SUCCESSFULL
         BZ    ALLOCIOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP006: UNABLE TO ALLOCATE ARCHIVE INDEX DATASET',   X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
ALLOCIOK DS    0H                  -ALLOC  OK
         LA    R3,ARCIXDCB         -RETRIEVE ADDRESS OF INDEX DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         MVC   DCBDDNAM,ARCDDNAM   -MOVE DDNAME AS SET BY SVC 99 TO DCB
         OPEN  (ARCIXDCB,(OUTPUT))
         TM    DCBOFLGS,X'10'     Q-OPEN SUCCESSFULL
         BO    OPENIXOK            -
         WTO   'JAFPP007: UNABLE TO OPEN ARCHIVE INDEX DATASET',       X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -TERMINATE JAF
         B     TERMEXIT            -EXIT
OPENIXOK DS    0H                  -LOCATE OK
         DROP  R3
         BR    R11
ARCHIVE  DS    0H                  -INITIATE ARCHIVE PROCESS
         LA    R9,SSAREA           -GET ADDRESS OF IEFSSREQ PARM AREA
         USING SSOB,R9             -ESTABLISH ADDRESSABILITY
         L     R3,BUF1ADDR         -POINT TO BEGINNING OF DATA RECORD
         ST    R3,BLOCKPTR         -INITIALIZE BLOCK PTR FOR THIS JOB
RETRDS   DS    0H                  -RETRIEVE A DATA SET FROM JES
         MVI   SSSOFLG2,X'00'      -TURNOFF TERMINATION FLAG
         MVI   SSSODSN,X'00'       -INDICATE INITIAL ENTRY FOR IEFSSREQ
         MODESET MF=(E,SUPMODE)    -ENTER SUP STATE
         L     R15,CVTPTR(0,0)     -ADDRESS CVT
         USING CVTMAP,R15          -SET UP ADDRESSABILITY
         MVC   TRKCONV,CVTPRLTV    -EXTRACT TRACK CONVERSION ROUTINE
         DROP  R15
         LA    R1,SSPARM           -LOAD ADDRESS OF SSOB
         IEFSSREQ                  -ISSUE SUBSYSTEM REQUEST
         ST    R15,RETCODE         -SAVE IEFSSREQ RETURN CODE
         MODESET MF=(E,PROBMODE)   -RETURN TO PROBLEM STATE
         L     R15,RETCODE         -GET IEFSSREQ RETURN CODE
         LTR   R15,R15            Q-SUBSYSTEM REQUEST SUCCESSFUL
         BNZ   TERMARCH            -NO. TERMINATE WRITER
         CLC   SSOBRETN,=F'0'     Q-DATA SET RETRIEVED FROM JES
         BE    PROCJES            Y-PROCESS
         CLC   SSOBRETN,=F'4'     Q-NO MORE DATA SETS
         BE    EXITARCH           Y-
         B     TERMARCH           N-MUST BE A FSS ERROR
PROCJES  DS    0H                  -SET INITIAL BRANCH ADDR FOR PANEXIT
         CLI   SSSODSN,X'00'      Q-DATA SET RETRIEVED (DOUBLE CHECK)
         BNE   DSNAMEOK           Y-
         WTO   'JAFPP019: BAD DATA SET NAME RETURNED FROM FSS',        X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -INDICATE TERM OF JAF REQUIRED
         B     TERMARCH            -EXIT
DSNAMEOK DS    0H                  -
         MVI   DYNVERB,X'01'       -REQUEST ALLOCATION
         MVC   TXTFSDSN,SSSODSN    -COPY DSN
         LA    R1,DYNTXTSA         -RETRIEVE ALLOC TEXT PTRS TO ALLOC
         ST    R1,DYNTXTPT         -SAVE IN REQUEST BLOCK
         LA    R1,DYNPTR           -POINT REG 1 TO ADDR OF SVC 99
         DYNALLOC
         LTR   R15,R15             -ALLOC SUCCESSFULL
         BZ    ALCFSSOK
         ST    R15,RETCODE         -SAVE REG 15
         WTO   'JAFPP011: UNABLE TO ALLOCATE FSS DATASET',             X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -INDICATE TERM OF JAF REQUIRED
         B     TERMARCH            -EXIT
ALCFSSOK DS    0H                  -DE-ALLOC  OK
         LA    R6,12               -SET DEFAULT OFFSET INTO PROC. TABLE
         CLC   SSSODSN+14(5),PSODS -IS THIS A PSO DATA SET
         BNE   RETPROC            N-BYPASS SETTING DATA SET FLAG
         CLI   SSSODSN+21,C'2'    Q-VALID PSO DATA SET
         BL    RETPROC            N-BYPASS SETTING FLAG
         CLI   SSSODSN+21,C'4'    Q-AGAIN
         BH    RETPROC            N-
         SR    R5,R5               -CLEAR REG 5
         IC    R5,SSSODSN+21       -RETRIEVE PSO NUMBER (EBCDIC)
         LA    R1,242              -CONVERT PSO NUMBER TO BINARY
         SR    R5,R1               -CHANGE SCALE: 0=LOG, 1=JCL, 2=MSG
         STC   R5,DSTYPE           -SAVE CURRENT DATA SET TYPE
         LR    R6,R5               -COMPUTE OFFSET INTO DATA SET
         SLL   R6,2                -  PROCESSING BRANCH TABLE
RETPROC  DS    0H                  -RETRIEVE DATA SET PROC. ADDRESS
         L     R7,DSPRCAD(R6)      -RETRIEVE BRANCH ADDRESS
         LA    R3,FSSINDCB         -RETRIEVE ADDRESS OF DATA DCB
         USING IHADCB,R3           -ESTABLISH ADDR. OF DCB DSECT
         MVC   DCBDDNAM,FSSDDNAM   -MOVE DDNAME AS SET BY SVC 99 TO DCB
         OPEN  (FSSINDCB,(INPUT))  -OPEN INPUT DATA SET
         TM    DCBOFLGS,X'10'     Q-OPEN SUCCESSFULL
         BO    OPNFSSOK            -
         DROP  R3
         WTO   'JAFPP012: UNABLE TO OPEN FSS INPUT DATASET',           X
               ROUTCDE=2,DESC=4
         OI    FLAGS,TERMJAF       -INDICATE TERM OF JAF REQUIRED
         B     TERMARCH            -EXIT
OPNFSSOK DS    0H                  -OPEN OF FSS DATA SET OK
         CLC   PREVJOB,SSSOJOBI   Q-CONTINUING WITH SAME JOB
         BE    PROCJOB            Y-PROCESS
         TM    FLAGS,JOBPROC      Q-FIRST JOB
         BZ    FIRSTJOB           Y-
         L     R3,BLOCKPTR         -NEW JOB - RETRIEVE CURR BLK PTR
         MVC   0(1,R3),ENDOFJOB    -SET END OF JOB INDICATOR IN BLK
         L     R3,BLOCKSIZ         -RETRIEVE CURRENT BLOCK SIZE
         LA    R3,1(R3)            -INCREMENT
         ST    R3,BLOCKSIZ         -SAVE FOR WRITEBUF
         BAL   R10,WRITEBUF        -WRITE OUT LAST BUFFER (IF FILLED)

The remaining source code for JAFPP will appear in next month's issue of MVS Update.

Steven Zeh
Lead Systems Programmer
Fleet/Norstar Services (USA)                                          c Xephon 1990

