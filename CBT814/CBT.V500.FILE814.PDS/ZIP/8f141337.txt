Exploiting the extended CSA
The basic idea behind this article is to provide a means of getting very fast
access to a relatively large amount of data.  The necessary speed is not
provided by any known external storage medium, so it seems obvious to turn to
storage directly addressable from a program.
Before the introduction of XA this was not a very realistic solution, as you
were limited to a theoretical maximum of 16Mb of storage - theoretical because
usually very little of this is left for your use when the systems are up and
running.  With XA this number was increased dramatically and the solution
described in this article became realistic.
Apart from describing how to implement the feature, the article includes an
example of the practical use in connection with extra features added to the CICS
TCT.
THE SOLUTION
The object is that an infinite number of data areas or tables must be accessible
from any application running in any address space on a specific machine.  It
would therefore be a good idea to look for a common point of reference, and for
this purpose we can use the user field in the Common Vector  Table (CVT).  With
this as our basis, we can GETMAIN a storage area in which we can save the
addresses of the different data areas and tables and store the address of this
table in the CVT user field.
Figure 1 shows how the areas are linked together.  The area pointed to by the
CVT USER (displacement 204 in the system CVT) consists of an array of 4-byte
fields whose contents are as follows: the name of the MVS system, the type of
machine, and a number of pairs containing a pointer to a storage area and the
length of that area.
The building of the extended CVT (LECCVT) is partly done at the time of IPL by
adding a step to the IPL job which performs a GETMAIN of storage for the LECCVT
in subpool 241 and stores the address in the CVT user field at displacement
XÔCCÕ.
Any programmer who might need to make use of this feature will be assigned a
specific pair of fields in the LECCVT table.  Having each user of the table fill
in the length of his area in the table gives us a means of doing a general
FREEMAIN, in case this should be necessary.
The first two fields, containing the name of the MVS system and the type of
machine, is information  for which we find much use at our site, where we have
more than one MVS system.
The building and maintenance of the user tables , for example the table used in
CICS, is carried out by the programmers responsible for that specific
application.  I should mention the importance of remembering to use the ANY
parameter on the location keyword of the GETMAIN macro, otherwise you will
quickly run out of storage.
AN APPLICATION
The background for the application of this feature at our site, in connection
with CICS, lies in our use of a series of special features we have added to the
TCT.  We have added extra keywords to the TCT macros.  At assembly time the
values of these keywords are stored in the TCT Extension.  We have a GROUP
keyword which can be used to identify groups of terminals to which to send a
specific message and it was necessary for us to be able to identify special
types and features of terminals etc.  With CICS 1.7 we were no longer able to
maintain this solution for obvious technical reasons and we had to think of a
way around the problem.
This is how the thing is put together:
1    A batch job generates a sequential file in which each record contains
information related to one terminal.  This job sorts the file in ascending order
by terminal-id.  This is essential to the binary search method, which is used
when accessing the table.  The source code for this program is not included in
this article.
2    A job step in the IPL job GETMAINs storage in the ECSA and loads the data
from the sequential file into storage.  The program, P9954552, performs some
checking and the reading of the file.  The actual manipulation of the LECCVT is
carried out by program LECTXFTA.
3    The access module, LECTXFTA, performs all manipulation of the table
depending on the PARM value transferred to it.
4    A CICS transaction and program updates single entries in the table.  The
program listing is not included.
5    A CICS exit program links the data in the table to the specific terminal-
id.  This is done by calling LECTXFTA with the terminal-id as search argument.
The address returned is then stored in the TCT user area.  The listing for this
program is not included in this article.
PROGRAM P9954552
During IPL this module manages the GETMAIN of storage for the CICS-related table
and updates the pair of fields in the LECCVT.  It carries out a lot of testing
and communication with module LECTXFTA in order to ensure that everything is all
right so the IPL will not be delayed.
This program performs (at the moment) about 20 000 calls to program LECTXFTA.
During the early stages of testing of this program, communication with LECTXFTA
was carried out this way:
         LINK    EP=LECTXFTA
The clock time for the step then was about 10 minutes.  We then changed the code
to look like this:
At entry to P9954552:
           LOAD    EP=LECTXFTA
           ST      R0,SAVER0               save EP address

with the code for the 20 000 calls like this:
           L       R15,SAVER0              load EP address
           CALL    (15)                    call LECTXFTA
This reduced the clock time from 10 minutes to 6 seconds because JOBLIBs and
STEPLIBs are no longer searched when a call is performed with the EP as
argument.  This might be useful to remember if you are looking for a real time-
saver.
P9954552 CSECT
         USING *,R11               BASEREG
         SAVE  (14,12),,P9954552_&SYSDATE_&SYSTIME
         LR    R11,R15             LOAD BASEREG 11
         LR    R14,R13             SAVE ADDR PREVIOUS SAVEAREA
         LA    R13,SAVEAREA        CURRENT SAVEAREA
         ST    R13,8(R14)          LINK PREVIOUS TO CURRENT
         ST    R14,SAVEAREA+4      LINK CURRENT  TO PREVIOUS
         B     START               PAST SAVEAREA
SAVEAREA DS    9D
         DC    CL4'WCVT'
WCVT     DS    CL24
SAVER0   DS    F
WTOREPLY DC    CL2'  '
WTOECB   DC    F'0'
WTOSVAR  DC    CL2'OK'
START    DS    0H
*** LOCATE LECCVT I CSA ***
         L     R9,16               CVTADR
         CLC   =CL3'MVS',204(R9)         ADDR IN CVTUSER ?
         BNE   LECCVT1
         WTO   'P9954552 - -MCS- FOUND IN CVT-USER ==>     '
         WTO   'P9954552 - LECCVT NOT INITALISED AT IPL.   '
         B     WTOERR
LECCVT1  CLC   =XL4'00000000',204(R9)    ADDR I CVTUSER ?
         BNE   LECCVTOK
         WTO   'P9954552 - ADDR. OF LECCVT NOT FOUND IN CVT'
         B     WTOERR
LECCVTOK LOAD  EP=LECTXFTA
         ST    R0,SAVER0                 SAVE THE EP. ADDRESS
         L     R5,204(R9)                LOAD THE ADDRESS OF LECCVT
         MVC   WCVT(24),0(R5)            SAVE CVT FOR DEBUGGING
         CLC   =CL4'MVSA',0(R5)
         BNE   MVSC
         WTO   'P9954552 - CICS TXF-TABLE BEING INITIALISED FOR MVSA'
         B     MVSOK
MVSC     WTO   'P9954552 - CICS TXF-TABLE BEING INITIALISED FOR MVSC'
MVSOK    CLC   16(4,R5),=X'00000000'
         BE    INIT
         WTO   'P9954552 - CICS TXF-TABLE ALREADY INITIALISED'
         WTO   'P9954552 - OLD AREA WILL BE FREEMAINED'
*** FREEMAIN STORAGE FOR TXF-TABLE ***
         MVI   TXFSRC,X'00'             RETURN CODE ZERO
         MVI   TXFSFUNC,X'05'           FREEMAIN
         L     R3,16(R5)                ADDRESS OF TABLE (HEADER)
         ST    R3,TXFSENTA              --
         LA    R0,TXFSVCPA              ADDRESS OF PARMLIST
         L     R15,SAVER0               LOAD EP. ADDRESS
         CALL  (15)                     CALL EP=LECTXFTA
         CLI   TXFSRC,X'01'             STORAGE NOT GETMAINED ?
         BNE   FREE210
         WTO   'P9954552 - STORAGE NOT GETMAINED => NO FREEMAIN'
         B     WTOERR
FREE210  CLI   TXFSRC,X'02'             ERROR RETURN FROM FREEMAIN ?
         BNE   FREE220
         WTO   'P9954552 - ERROR RETURN FROM FREEMAIN'
         B     WTOERR
FREE220  CLI   TXFSRC,X'03'             ERROR IN PARM ? (WRONG ADDR)
         BNE   INIT
         WTO   'P9954552 - ERROR IN PARM'
         B     WTOERR
*** PREPARE FOR GETMAIN ***
INIT     OPEN  (SYSI,INPUT)
         GET   SYSI,INPREC
         CLC   INPTERM,=X'00000000'
         BNE   INIT100
         CLC   INPTEXT(22),=C'*** TXFSFLD HEADER ***'
         BNE   INIT100
         B     INIT200
INIT100  WTO   'P9954552 - FIRST INP.REC NOT HEADER'
         B     WTOERR
*** GETMAIN STORAGE FOR TXF-TABLE ***
INIT200  MVI   TXFSRC,X'00'             RETURN CODE ZERO
         MVI   TXFSFUNC,X'01'           GETMAIN
         LA    R3,INPREC                ADDRESS OF DATA TO PARM
         ST    R3,TXFSENTA              --
         LA    R0,TXFSVCPA              ADDRESS OF PARMLIST
         L     R15,SAVER0               LOAD EP. ADDRESS
         CALL  (15)                     CALL CP=LECTXFTA
         CLI   TXFSRC,X'01'             STORAGE ALREADY GETMAINED ?
         BNE   INIT210
         WTO   'P9954552 - STORAGE ALREADY GETMAINED'
         B     WTOERR
INIT210  CLI   TXFSRC,X'02'             INSUFFICIENT STORAGE ?
         BNE   INIT220
         WTO   'P9954552 - INSUFFICIENT STORAGE'
         B     WTOERR
INIT220  CLI   TXFSRC,X'03'             ERROR IN PARM ?
         BNE   INIT230
         WTO   'P9954552 - ERROR IN PARM'
         B     WTOERR
*** BUILD TABLE ***
INIT230  WTO   'P9954552 - INITIALISATION OF TABLE STARTED'
         L     R4,16(R5)                INITALISE POINTER
INIT500  MVI   TXFSRC,X'00'             RETURN CODE ZERO
         MVI   TXFSFUNC,X'02'           STORE RECORD
         LA    R3,INPREC                ADDRESS OF DATA TO PARM
         ST    R3,TXFSDATA              --
         ST    R4,TXFSENTA              ADDR. IN TXF-TABLE
         LA    R0,TXFSVCPA              ADDRESS OF PARMLIST
         L     R15,SAVER0               LOAD EP. ADDRESS
         CALL  (15)                     CALL EP=LECTXFTA
         CLI   TXFSRC,X'00'             OK ?
         BE    INIT900
         WTO   'P9954552 - ADDR. OUTSIDE TABLE'
         B     WTOERR
INIT900  CLC   INPTERM,=X'FFFFFFFF'     END OF TABLE ?
         BE    INIT950
         GET   SYSI,INPREC
         A     R4,=F'40'                POINT FORWARD IN TABLE
         B     INIT500
INIT950  WTO   'P9954552 - INITIALISATION OF TABLE ENDED'
         CLOSE SYSI
         B     RETURN
*** SEARCH FOR TERMINAL - TEST ONLY ***
SRCTEST  MVI   TXFSRC,X'00'             RETURN CODE ZERO
         MVI   TXFSFUNC,X'04'           SEARCH
         MVC   TXFSTERM,=X'B800'        SEARCH ARGUMENT
         LA    R0,TXFSVCPA              ADDRESS OF PARMLIST
         L     R15,SAVER0               LOAD EP. ADDRESS
         CALL  (15)
         CLI   TXFSRC,X'00'             OK ?
         BE    SRCOK
         WTO   'P9954552 - ENTRY NOT FOUND'
SRCOK    B     RETURN
WTOERR   WTOR  'FEJL INIT CICS TXF-TABLE - TILKALD TPVAGT - SVAR OK',  X
               WTOREPLY,2,WTOECB,ROUTCDE=(9)
         WAIT  ECB=WTOECB
         MVI   WTOECB,X'00'
         CLC   WTOREPLY,WTOSVAR
         BNE   WTOERR
SYSADSY  ABEND 998,DUMP
SYSI     DCB   BLKSIZE=9440,                                           X
               DDNAME=DD1,                                             X
               DEVD=DA,                                                X
               DSORG=PS,                                               X
               LRECL=40,                                               X
               MACRF=GM,                                               X
               RECFM=FB,                                               X
               SYNAD=SYNADSY
RETURN   CLOSE SYSI
         L     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)
         LTORG
         DS    0D           ALIGN TO D-WORD BOUNDARY
INPREC   DS    0CL40
INPTERM  DS    CL4
INPDISP  DS    CL4
INPENUM  DS    CL4
INPELGD  DS    CL2
INPTEXT  DS    CL26
         COPY  LECCVT
         COPY  TXFSVCPA     PARMLIST FOR CALL
         COPY  B9954TCX     MAPS TABLE ENTRY
         END   P9954552
This article will be concluded next month when we shall be looking at the
program LECTXTFA, and the two copy books, TXFSVCP and LECCVT.

Poul Erik Olesen
Systems Programmer
LEC (Denmark)  © Xephon 1988











