New dynamic APF list

Background

Since the early days of MVS, the APF list has been available to
identify a list of authorized libraries. Modules stored in such
libraries are allowed to issue privileged instructions such as
MODESET (to switch to supervisor state, key zero, etc).

The standard APF list has always been static. If a new authorized
library is to be added to the system, the member IEAAPFxx in
SYS1.PARMLIB has to be updated and the MVS system will
need to be IPLed to pick up the change. Needless to say, this
method of updating IEAAPFxx is not acceptable for systems that
need to run 24 hours a day. For this reason, a number of third-
party software vendors have all developed special commands to
allow users to update the APF list dynamically without an IPL.
The logic for these commands is quite simple: GETMAIN and
build a new APF list in CSA (using the same format as the
existing APF list), and then replace the CVT field, CVTAUTHL,
with the address of the new APF list. In fact, almost anyone can
write an authorized program to do exactly the same thing.

Although the solution provided by most vendors and home-grown
programs allows an installation to update the APF list
dynamically, it does not, however, provide any means to check
and record updates made to the in-memory APF list. From the
operating systems point of view, it is also not very desirable to
have users updating the CVT field, CVTAUTHL.

Solution from IBM

With MVS/ESA Version 4.3, IBM has finally announced the
ability to update the APF list dynamically. However, in order to
perform the add/delete function, the APF list has to be converted
to a dynamic format first. This can be done by setting up a new
SYS1.PARMLIB member, PROGxx, as follows:

      APF FORMAT(DYNAMIC)

Libraries can then be dynamically added or deleted by invoking
other PROGxx members. For example, the following will add a
library (SYS1.TEMP.LOAD1) and delete a library
(SYS1.PERM.LOAD1) from the APF list:

      APF ADD DSNAME(SYS1.TEMP.LOAD1) VOLUME(MVS001)
      APF DELETE DSNAME(SYS1.PERM.LOAD1) VOLUME(MVSIPL)

The VOLUME field can also specify either '******' (if the library
is on the current SYSRES) or '*MCAT*' (if the library is on the
DASD volume where the master catalog resides).

A new keyword, SMS, can be specified in place of VOLUME to
indicate the library is SMS-managed.

Like most other SYS1.PARMLIB members, the PROGxx
members can be specified at IPL time or dynamically activated by
using the operator SET command.

The dynamic APF list can be, if necessary, converted back to the
old static format by using a PROGxx member such as:

      APF FORMAT(STATIC)

However, all dynamically added libraries will be dropped during
the process of converting back to the static format. (They will be
added again automatically if the APF list is subsequently switched
back to the dynamic format.)

Another operator command, SETPROG, is also available and
does not require updates to SYS1.PARMLIB. It has the following
general format:

      SETPROG  FORMAT=DYNAMIC|STATIC,
               ADD|DELETE,
               DSNAME=,
               VOLUME=,
               SMS

There is, however, an important migration consideration. Once
converted to the new dynamic format, the CVT field,
CVTAUTHL, no longer contains the address of the APF list (it is
stored with an undocumented token value). Instead, the new
dynamic APF list is moved away into a separate address space
and any program that tries to modify/list the APF list using
CVTAUTHL as an anchor will abend with an 0C4. Luckily a
new macro, CSVAPF, is available to modify or list the new APF
list. Anyone contemplating using the new dynamic APF list
should first contact their vendors to obtain the appropriate fixes.
The new macro CSVAPF provides many different request types.
The following is a summary:

o      CSVAPF REQUEST=LIST - request a copy of the APF
list.

o      CSVAPF REQUEST=QUERY - query if a library is in the
APF list.

o      CSVAPF REQUEST=QUERYFORMAT - query the
current APF list format.

o      CSVAPF REQUEST=ADD - add to the APF list.

o      CSVAPF REQUEST=DELETE - delete from the APF list.

o      CSVAPF REQUEST=DYNFORMAT - convert APF list
from static to dynamic.

The APF format (static or dynamic) is described by a one-byte
value stored in a new extended CVT (CVTECVT) and is retrieved
by the QUERYFORMAT request type. All other request types
will result in a cross memory program call to a new APF service
routine.

The LIST, QUERY, and QUERYFORMAT request types require
no special authorization. For ADD, DELETE, or DYNFORMAT,
either APF authorization or supervisor mode and/or key zero is
needed.

The following program, PWLCSAPF, is written to demonstrate
how to invoke the various CSVAPF request types.

The program will first determine if the operating system is at the
proper level to support the CSVAPF macro. If the CSVAPF
facility is not available (ie pre-MVS/ESA 4.3), it will branch to
display the APF list using CVTAUTHL as an anchor; otherwise it
will issue a CSVAPF REQUEST=QUERYFORMAT to
determine the APF list format. If the APF list is STATIC, it will
then issue a REQUEST=DYNFORMAT to convert the APF list
to DYNAMIC; otherwise, (or after converting the APF list to
DYNAMIC), it will issue a REQUEST=ADD and then a
REQUEST=DELETE to test the ADD/DELETE functions. The
APF list is displayed after each REQUEST by calling the
NEWAPF routine, which will issue a REQUEST=LIST to obtain
a copy of the DYNAMIC APF LIST.

The new APF service routine also provides an external security
interface (to RACF or compatible products). This will allow an
installation to restrict and audit the use of the new APF service.
Once activated, only authorized users are allowed to enter the
operator commands (SET PROG=xx or SETPROG) or use the
CSVAPF macro to dynamically modify the APF list.

To switch the APF list from static to dynamic, a user must have
the update access to the RACF FACILITY class entity:

      CSVAPF.MVS.SETPROG.FORMAT.DYNAMIC

To make add/delete requests, a user must have the update access
to the RACF FACILITY class entity, like this:

      CSVAPF.libname

where libname is the name of library to be added/deleted.

By moving the address of the APF list away from CVTAUTHL,
there is no further need for anyone to modify this field, eliminating
another possibility for accidentally destroying CVTAUTHL
and/or CVT itself. In fact, it is conceivable that more and more
sensitive MVS control blocks and data structures will be relocated
in the future in a similar way to provide external security checking
and improve system integrity.

Source listing for program PWLCSAPF

PWLCSAPF PWLINIT
PWLCSAPF AMODE 31
PWLCSAPF RMODE 24
         TITLE 'DYNAMIC APF LIBRARY LIST'
         USING APFENTRY,R9
         LA    R9,RECORD
         OPEN  (LIST1,(OUTPUT))
         L     R1,X'10'             CVT
         USING CVT,R1
         TM    CVTDCB,CVTOSEXT      CVTOSLVL PRESENT?
         BNO   OLDLIST              NO. USE OLD FORMAT.
         TM    CVTOSLV1,CVTDYAPF    DYNAMIC APF FACILITY?
         BNO   OLDLIST              NO. USE OLD FORMAT.
         DROP  R1
* TEST NEW APF FORMAT - DYNAMIC OR STATIC?
CSAPF002 DS    0H
         CSVAPF REQUEST=QUERYFORMAT,FORMAT=APFORMAT
         BAS   R14,R15R0
         CLI   APFORMAT,CSVAPFFORMATDYNAMIC
         BNE   CSAPF004           NEW APF IS STATIC. CHANGE TO DYNAMIC
* NEW APF IS DYNAMIC. TRY ADDING A NEW APF LIBRARY.
         CSVAPF REQUEST=ADD,DSNAME=DSN,VOLUME=VOL,VOLTYPE=ANY
*                                   R15 = RETURN CODE,R0 = REASON CODE
         BAS   R14,R15R0
         MVC   RECORD(L'MSG3),MSG3
         BAS   R6,LISTIT
         BAS   R14,NEWAPF           LIST APF
* TRY DELETING THE NEW APF LIBRARY.
         CSVAPF REQUEST=DELETE,DSNAME=DSN,VOLUME=VOL,VOLTYPE=ANY
         BAS   R14,R15R0
         MVC   RECORD(L'MSG4),MSG4
         BAS   R6,LISTIT
         BAS   R14,NEWAPF
         CLOSE (LIST1)
         B     EXIT
CSAPF004 DS    0H
* NEW APF IS STATIC. CHANGE TO DYNAMIC.
         CSVAPF REQUEST=DYNFORMAT  CHANGE TO DYNAMIC FORMAT
         BAS   R14,R15R0
         CH    R15,=H'4'
         BH    ERREXIT1
         MVC   RECORD(L'MSG5),MSG5
         BAS   R6,LISTIT
         B     CSAPF002            NOW TRY ADD AND DELETE
* DISPLAY NEW APF LIST
NEWAPF   DS    0H
         STM   R0,R15,SAVE1
         L     R2,=F'8192'
         ST    R2,APFLEN
CSAPF010 DS 0H
         GETMAIN RC,LV=(2),SP=1,LOC=ANY
         ST    R1,APFLIST@
         LR    R3,R1              R3=ADDR OF ANSWER AREA
         LA    R2,APFLEN          R2=ADDR OF LENGTH
         CSVAPF REQUEST=LIST,ANSAREA=(3),ANSLEN=(2)
         BAS   R14,R15R0
         L     R11,APFLIST@
         USING APFHDR,R11
         CLI   APFORMAT,CSVAPFFORMATDYNAMIC
         BE    CSAPF012           APF IS DYNAMIC
         MVC   RECORD(L'MSG1),MSG1
         MVC   RECORD+L'MSG1(L'MSG1B),MSG1B
         BAS   R6,LISTIT
         LA    R10,255            R10 = MAX STATIC RECORDS
         B     CSAPF020
CSAPF012 DS    0H
         MVC   RECORD(L'MSG1),MSG1
         MVC   RECORD+L'MSG1(L'MSG1A),MSG1A
         BAS   R6,LISTIT
         ICM   R1,15,APFH#REM     RECORDS LOST?
         BZ    CSAPF014           NONE.
         L     R2,APFHTLEN        LENGTH REQUIRED
         B     CSAPF010           TRY AGAIN
CSAPF014 DS    0H
         L     R10,APFH#REC       R10 = MAX DYNAMIC RECORDS
CSAPF020 DS    0H
         LA    R1,APFHDR_LEN      HEADER LENGTH
         AR    R11,R1             SKIP TO FIRST APFE
         DROP  R11
         USING APFE,R11
CSAPF022 DS    0H
         LH    R3,APFELEN         LENGTH OF APFE RECORD
         CLI   APFEDSNAME,0
         BE    NEWAPF99
         CLI   APFEDSNAME,C' '
         BE    NEWAPF99
         SLR   R2,R2
         ICM   R2,1,APFEDSLEN     LENGTH OF DSNAME
         BCTR  R2,0               ADJUST FOR MOVE
         EX    R2,MOVEDSN
         MVC   VOLSER,APFEVOLUME
         MVC   APFEM1,=C'LIBRARY NAME='
         MVC   APFEM2,=C'  VOLSER = '
         BAS   R6,LISTIT
         AR    R11,R3             NEXT APFE
         BCT   R10,CSAPF022
         B     NEWAPF99
NEWAPF99 DS    0H
         L     R2,APFLEN
         L     R3,APFLIST@
         FREEMAIN RC,A=(3),LV=(2),SP=1
         LM    R0,R15,SAVE1
         BR    R14
MOVEDSN  MVC   LIBRARY(0),APFEDSNAME
OLDLIST  DS    0H
* PROCESS OLD APF LIST ANCHORED OFF CVTAUTHL
         MVC   RECORD(L'MSG2),MSG2
         BAS   R6,LISTIT
         L     R3,CVTPTR          R3 -> CVT
         USING CVT,R3
         L     R4,CVTAUTHL        R4 -> APF LIST
         DROP  R3
         SLR   R8,R8
         ICM   R8,3,0(R4)         R8 = TOTAL # OF ENTRIES
         BZ    ERREXIT1           NO APF LIST!
         LA    R4,2(,R4)          SKIP NUMBER OF ENTRIES
OLDAPF10 DS    0H
         SLR   R6,R6
         ICM   R6,1,0(R4)         LENGTH OF EACH ENTRY
         MVC   VOLSER,1(R4)
         LR    R5,R4              SAVE FOR MOVE
         LA    R4,1(,R4)          SKIP ONE FOR THE LENGTH BYTE
         AR    R4,R6              R4 -> NEXT ENTRY
         SH    R6,=H'7'           6 (VOLSER) + 1 (MOVE)
         EX    R6,OMOVEDSN
         MVC   APFEM1,=C'LIBRARY NAME='
         MVC   APFEM2,=C'  VOLSER = '
         BAS   R6,LISTIT
         BCT   R8,OLDAPF10
         CLOSE (LIST1)
         B     EXIT
OMOVEDSN MVC   LIBRARY(0),7(R5)
LISTIT   DS    0H
         $AM24
         PUT   LIST1,RECORD
         $AM31
         MVI   RECORD,C' '
         MVC   RECORD+1(79),RECORD
         BR    R6
R15R0    DS    0H
         USING R15R0F,R2
         LA    R2,RECORD
         STM   R0,R15,SAVE2
         MVC   R15R0F1,=C'R15 = '
         ST    R15,WORD1
         $#SNAP R15R0F2,WORD1,TRTAB-240
         MVC   R15R0F3,=C'R0 = '
         ST    R0,WORD1
         $#SNAP R15R0F4,WORD1,TRTAB-240
         BAS   R6,LISTIT
         LM    R0,R15,SAVE2
         DROP  R2
         BR    R14
ERREXIT1 DS    0H
         MVI   RC,8
         B     EXIT
* CONSTANTS, DATA AREAS
MSG1     DC    C'PWLCSAPF1I - APF LIST IS '
MSG1A    DC    C'DYNAMIC  '
MSG1B    DC    C'STATIC   '
MSG2     DC    C'PWLCSAPF2I - APF LIST FORMAT IS OLD'
MSG3     DC    C'PWLCSAPF3I - LIBRARY ADDED TO DYNAMIC APF LIST'
MSG4     DC    C'PWLCSAPF4I - LIBRARY DELETED FROM DYNAMIC APF LIST'
MSG5     DC    C'PWLCSAPF5I - NEW APF LIST CHANGED TO DYNAMIC'
LIST1    DCB   DSORG=PS,MACRF=PM,DDNAME=LIST1
APFLIST@ DS    F                  ADDR OF APFLIST
APFLEN   DS    F                  LENGTH OF APFLIST
APFORMAT DS    XL1                FORMAT OF APFLIST
RECORD   DC    CL80' '
SAVE1    DS    18F
SAVE2    DS    18F
DSN      DC    CL44'SYS1.TEMP.LOAD1'
VOL      DC    C'MVST04'
WORD1    DS    F
TRTAB    DC    C'0123456789ABCDEF'
         ORG   RECORD+80
* DSECTS
         CSVAPFAA ,
* LAYOUT OF RETURN CODE AND REASON CODE
R15R0F   DSECT
R15R0F1  DC    C'R15 = '
R15R0F2  DS    2F
         DS    F
R15R0F3  DC    C'R0 = '
R15R0F4  DS    2F
* LAYOUT OF APF LIST ENTRY
APFENTRY DSECT
APFEM1   DC    C'LIBRARY NAME = '
LIBRARY  DC    CL44' '
APFEM2   DC    C'  VOLSER = '
VOLSER   DC    CL6' '
         CVT   DSECT=YES
         END   PWLCSAPF

Source listing for macro PWLINIT

         MACRO
&L       PWLINIT
.* INIT MACRO FOR NON-RENT CODE
&L       CSECT ,
INIT_A&SYSNDX DS 0H
R0       EQU   0
R1       EQU   1
       etc
R15      EQU   15
         USING *,R15                    TEMPORARY
         B     INIT_B&SYSNDX
         DC    AL4(INIT_B&SYSNDX-INIT_A&SYSNDX-8)
         DC    CL23'&L   &SYSDATE &SYSTIME'
INIT_B&SYSNDX DS 0H
         STM   R14,R12,12(R13)
         LR    R1,R13                   WORK REGISTER
         CNOP  0,4
         BAL   R13,*+4+72               SET UP R13
         DC    18F'0'                   SAVE AREA
         LA    R13,0(,R13)              IN CASE 31-BIT
         ST    R1,4(,R13)               SAVE LAST IN THIS
         ST    R13,8(,R1)               SAVE THIS IN LAST
         USING *-84,R13
         B     INIT_C&SYSNDX
         DROP  R15
EXIT     DS    0H
         LA    R15,0                    STORE RETURN CODE
RC       EQU   *-1,1                    RETURN CODE
         L     R14,4(,R13)              PREV SAVE AREA
         STM   R0,R1,20(R14)            SAVE R0,R1 IN PREV SAVE AREA
         L     R13,4(,R13)              RESTORE REG 13
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)
*        BR    R14
         BSM   R0,R14
INITMODE DC    H'0'
INIT_C&SYSNDX MVI RC,0                  ENSURE RETURN CODE = 0
         L     R1,4(,R13)
         LM    R14,R2,12(R1)            RESTORE LINKAGE REGS
         AGO   .MEND
.MEND    ANOP
         MEND

Source listing for macro $#SNAP

         MACRO
         $#SNAP &TO,&FROM,&TRTAB
         UNPK  &TO.(9),&FROM.(5)
         MVI   &TO+8,X'40'
         TR    &TO.(8),&TRTAB
.EXIT    MEXIT
         MEND

Source listing for macro $AM31

         MACRO
         $AM31
.* SET TO 31-BIT ADDRESSING
         L     R14,16
         TM    X'74'(R14),X'80'       MVS/XA?
         BZ    AM31A&SYSNDX
         LA    R14,AM31A&SYSNDX
         O     R14,AM31B&SYSNDX       INDICATE 31-BIT ADDRESSING
         BSM   0,R14      CHANGE TO AMODE=31 & BRANCH TO AM31A&SYSNDX
         DS    0F
AM31B&SYSNDX  DC    X'80000000'
AM31A&SYSNDX  DS    0H
         MEND

Source listing for macro $AM24

         MACRO
         $AM24
.* SET TO 24-BIT ADDRESSING
         L     R14,16
         LA    R14,0(R14)
         TM    X'74'(R14),X'80'       MVS/XA?
         BZ    AM24A&SYSNDX
         LA    R14,AM24A&SYSNDX
         BSM   0,R14                  RESET AMODE & BR TO AM24A&SYSNDX
AM24A&SYSNDX  DS  0H
         MEND

JCL to execute PWLCSAPF

//STC EXEC PGM=PWLCSAPF
//STEPLIB DD DSN=your.authorized.library,DISP=SHR
//LIST1 DD SYSOUT=*,LRECL=80,BLKSIZE=23200,RECFM=FB


Peter W K Lee
Software Analyst (Canada)                                                       c Xephon 1994

