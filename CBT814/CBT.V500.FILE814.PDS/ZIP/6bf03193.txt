IEAVTSEL post dump exit routine

After reading the article Automatic SDUMP archiving in the
March 1993 issue I thought I might present another way one
could automatically submit a job to take care of a SYS1.DUMP
dataset becoming full.

Rather than using MPF, we use the post dump exit routine,
IEAVTSEL, documented in the Installation Exits manual. This
module gets invoked for SDUMPs and SYSMDUMPs.
IEAVTSEL contains a list of modules that get control
sequentially. These modules reside in a LNKLST library. You
may, if you choose, have your routine obtain control even if
the dump is suppressed by DAE.

Using IEAVTSEL you have access to a great deal of
information. This information includes dump title, address of a
copy of the SWDA which can be mapped with the SDWA
macro, and the DUMPDS name.

The process we use is as follows:

1      The dump is captured and IEAVTSEL is invoked.

2      DUMPSRV looks at the program name list in module
      IEAVTSEL and each listed module is then invoked in turn
      (modules are processed sequentially).

3      The invoked program(s) completes the process.

To incorporate the steps above into production, do the
following.

Update module IEAVTSEL with the name of the routine or
routines that you wish to have invoked after a dump is
captured. The documentation in the Installation Exits manual is
excellent for this part. In general they give you two choices to
update the list with. I chose AMASPZAP using the following
cards:

       NAME IEAVTSEL
       VER 0000 4040,4040,4040,4040,0000,0000  ( verify it is blank )
       REP 0000 C4E4,D4D7,C4E2,4040,0000,0000 ( REP with routine name
       *        D U  M P  D S                   DUMPDS  - Note : if
                                                I had turned the high
                                                order bit on in the
                                                3rd word, this routine
                                                would execute even if
                                                dump suppressed by DAE )

If you wanted to add a second routine, your 'ver' and 'rep'
would occur at 000C. Once again, refer to the manual for this
step as the documentation is excellent.

The routine DUMPDS, which is now zapped into module
IEAVTSEL, will start a procedure for those dumps that have
filled a SYS1.DUMPnn dataset. This includes SDUMPs and
SYSMDUMPs. We don't concern ourselves with message-ids
(eg for a SYSMDUMP the message would be 'IEA993I
SYSMDUMP TAKEN to SYS1.DUMPnn' as opposed to the
IEA911E message for SDUMPs). What we know is that, for
whatever reason, a SYS1.DUMP dataset has filled and we
would like it dumped/cleared as soon as possible.

The following code is the source for DUMPDS. This code was
linked RENT, REUSE, and AC(0). The program must be in
SYS1.LINKLIB or a library which is specified in
SYS1.PARMLIB(LNKLSTnn). We also register this as a
USERMOD in SMP/E for documentation purposes. For more
information on programming environment, etc, refer once
again to the manual.

*---     START
DUMPDS CSECT
DUMPDS AMODE 31
DUMPDS RMODE ANY
*---     STANDARD ENTRY LINKAGE                             *
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTER
         LR    R12,R15               LOAD ENTRY ADDRESS
         USING DUMPDS,R12            BASE REGISTER
         LR    R2,R1                 SAVE R1 ADDRESS
         GETMAIN R,LV=SAVEL+STARTL,LOC=BELOW,SP=230 GET STORAGE
         ST    R1,8(R13)             STORE FORWARD
         ST    R13,4(R1)             STORE BACKWARD
         L     R13,8(R13)            LOAD CURRENT
*---     PROCESS PARAMETER LIST                             *
PROCESS  DS    0H                    LABEL PROCESS
         L     R11,0(0,R2)           ADDRESS OF PARMLIST
         USING SDEPL,R11             MAP PARM VIA IHASDEPL MACRO
         L     R10,SDEPLHD           LOAD HEADER RECORD POINTER
         DROP  R11                   DROP R11
         USING PRDINPUT,R10          MAP HEADER RECORD
         AH    R10,PRDSDMPO          BUMP ADDRESS TO SDUMP COMMON
*                                    ( USED FOR BOTH SYSM AND SDUMP )
         DROP  R10                   DROP R10
         USING PRDSDSM,R10           MAP SDUMP COMMON PORTION OF RECORD
*                                    ( USED FOR BOTH SYSM AND SDUMP )
         CLC   PRDDSNAM(9),=C'SYS1.DUMP' SYS1.DUMP DATASETS?
         BNE   END_MAIN              NO, RETURN TO CALLER
*---     SET UP TO ISSUE START COMMAND                      *
ISSUECMD DS    0H                    LABEL ISSUECMD
         LA    R1,SAVEL(R13)         ADDRESS COMMAND STORAGE
         MVC   0(STARTL,R1),START    MOVE COMMAND IN
         MVC   STARTL-NUMBERL(NUMBERL,R1),PRDDSNAM+9 MOVE DUMPDS #
*                                    TO COMMAND LINE
         SR    R0,R0                 INIT R0
         SVC   34                    ISSUE START
*---     RETURN TO CALLER                                   *
END_MAIN DS    0H                    LABEL END_MAIN
         L     R13,4(R13)            RELOAD BACKWARD
         L     R1,8(R13)             RELOAD R1 FOR FREE
         FREEMAIN R,LV=SAVEL+STARTL,A=(R1),SP=230 FREE WORK AREA
         LM    R14,R12,12(R13)       RESTORE REGISTERS
         SR    R15,R15               0 RC
         BR    R14                   RETURN TO CALLER
*---     PARMLIST FOR THE START                             *
START    DS    0F                    LABEL START
         DC    X'00'                 NO TOKEN PRESENT
         DC    AL1(STARTL)           LENGTH INDICATOR
         DC    X'0000'               NO START OR SECURITY TOKEN
         DC    C'S SVCDUMP,NUMBER=##' THE COMMAND
STARTEND EQU   *                     CURRENT ADDRESS
STARTL   EQU   STARTEND-START        LENGTH OF PARAMETER
*---     MORE EQUATES                                       *
SAVEL    EQU   18*4
NUMBERL  EQU   2
*---     MAPPING  MACROS                                    *
         IHASDEPL
         AMDDATA
*---     E N D  O  F  P R O G                               *
         END   DUMPDS                END PROGRAM

This is the procedure that gets started:

//SVCDUMP  PROC NUMBER=,SYSTEM=ABC
//STEP1    EXEC PGM=ARCDMP
//STEPLIB  DD DSN=SYS2.LOAD,DISP=SHR
//DUMPIN   DD DSN=SYS1.DUMP&NUMBER,DISP=SHR
//DUMPOUT  DD DSN=SYS2.ATBSVC.&SYSTEM.DMP(+1),DISP=(,CATLG,DELETE),
//         UNIT=TAPE,DCB=(SYS1.MODEL,RECFM=FB,BLKSIZE=4160,LRECL=4160)
//SVCXREF  DD DSN=SYS2.ATBSVC.&SYSTEM..XREF,DISP=(MOD,KEEP,KEEP)
//*

The ARCDMP program does a few things. It will write records
out to the file defined by DUMPOUT. It then writes out a
record to the SVCXREF dataset. The SVCXREF record
contains the output dataset name, the date/time the SVCDUMP
procedure ran, and the dump title. The '(+1)' on the output
dataset is resolved by issuing a RDJFCB macro. The time and
date determined via the TIME macro and the title is contained
in the header record from the dump itself.

When we want to view the archived dumps we execute a panel
that loads the XREF file into a table which is displayed to the
user. The user can then download the files to disk if required or
delete old or redundant dumps (this is done with skeleton
libraries).

After the dump dataset has been dumped and the XREF record
built, the dump dataset can be cleared. Here again you can use
the RDJFCB. Issue the RDJFCB for the DUMPIN dataset and
issue the command to clear the dataset. In order to do this the
program is AC(1) and in an APF-authorized library
(MODESET issued). The following are just the pieces of the
ARCDMP source that have to do with issuing the clear
command.

If you didn't want to use the RDJFCB you could also just pass
this program a parameter of the number of the dataset (ie
PARM=&number). Since we use the RDJFCB to resolve the
GDG number for the DUMPOUT dataset we also used it to
determine the DUMPIN dataset name.

         Process begins
*---      PROCESS JFCB                                               **
JFCBPROC  DS      0H                             LABEL JFCBPROC
          LA      11,JFCBDATA                    ADDRESS JFCB DATA AREA
          USING   JFCBMAP,11                     MAP JFCBDATA
          RDJFCB  DUMPIN                         READ CONTROL BLOCK IN
          MVC     CLEAR+17(2),JFCBDSNM+9 MOVE IN DUMP DD #
          .
*---      SET UP AND ISSUE CLEAR COMMAND                             **
ISSUECMD  DS     0H                              LABEL ISSUECMD
          MODESET KEY=ZERO,MODE=SUP              SETUP TO ISSUE COMMAND
          LA     1,CLEAR                         ADDRESS PARMLIST
          SR     0,0                             INIT REG 0
          SVC    34                              ISSUE START
          MODESET KEY=NZERO,MODE=PROB            RESET BACK
          .
*---     PARMLIST FOR THE CLEAR                             *
CLEAR    DS    0F                    LABEL CLEAR
         DC    X'00'                 NO TOKEN PRESENT
         DC    AL1(CLEARL)           LENGTH INDICATOR
         DC    X'0000'               NO CLEAR OR SECURITY TOKEN
         DC    C'DD CLEAR,DSN=XX'    THIS IS THE CLEAR COMMAND
CLEAREND EQU   *                     CURRENT ADDRESS
CLEARL   EQU   CLEAREND-CLEAR        LENGTH OF PARAMETER
*---      PARMLIST FOR JFCB                                          **
JFCBSVC   DS      0H                             LABEL XREFJFCB
          DC      X'07'                          ALLOW ACCESS TO JFCB
          DC      AL3(JFCBDATA)                  ADDR L 3
          DC      X'80'                          END PARM LIST
*---      I/O                                                        **
DUMPIN    DCB     DSORG=PS,MACRF=GM,DDNAME=DUMPIN,EXLST=JFCBSVC,       X
               EODAD=UPDXREF
*---      SYMBOLS DEFINED                                            **
          .
JFCBDATA  DS      CL176                          176 BYTES DEFINED
          .
*---      DSECTS                                                     **
JFCBMAP   DSECT                                  DSECT LABEL
          IEFJFCBN                               MACRO TO MAP JFCBDATA
*---      END OF PROGRAM                                             **
          END     ARCDMP

In order to put the updated module IEAVTSEL into
production, you should IPL the system to re-cycle the
DUMPSRV address space. You can actually issue a 'C
DUMPSRV' and the task will restart itself thus recycling the
address space. I have done this on occasions and everything
has restarted fine; however, I don't know that this is the
recommended approach to re-cycling the address space, so an
IPL may be the better route to travel.

To put the module listed on the IEAVTSEL module list into
production, link the module to SYS1.LINKLST or a
LINKLSTnn-defined library and issue:

      F LLA,UPDATE=LL

or

      F LLA,REFRESH


Scott Gaw
System Support Analyst
Alberta Treasury Branches (Canada)                        c Scott Gaw 1993

