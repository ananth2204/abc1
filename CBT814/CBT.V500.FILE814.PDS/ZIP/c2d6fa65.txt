LLA refresh from TSO

We use the LINKLIST Look-Aside (LLA) facility at our installation to optimise
access to members in the LINKLIST libraries, and have found it to perform very
well.  However, you need to tell LLA if you update any programs on the LINKLIST,
or copy in new ones, as it maintains tables of where all the modules are, and
these need to be updated to pick up any changes to the libraries.

When developing programs which need to go on the LINKLIST, I found it rather
cumbersome having either to 'phone up the operators to get LLA refreshed, or if
I entered the command myself, wondering when the refresh had completed, as it
can take 20-30 seconds if you have a long LINKLIST concatenation.  So I wrote
the following two programs to make life easier.  One is a TSO command, the other
is a system WTO exit.

At our installation, we have our own control block linked in to the nucleus,
pointed to by CVTUSER, which is used by our SMF exits for common data areas, and
there are some spare fields in this control block which I use here.  You will
have to modify the code to work at your own installation, but this shouldn't be
difficult.  You need 8 bytes to store the caller's user-id, plus a full word
flag.  You could, for example, GETMAIN the required storage in CSA and plug the
address into the CVTUSER field.  This could be done by a task at IPL, or by the
first invocation of the REFLLA command.  This storage is needed somewhere in
common so that the REFLLA command can store the user-id of the caller so that
the system WTO exit can later pick it up and send the NOTIFY.

This is what the two programs do:

¥    The REFLLA command gets the caller's user-id, and checks the flag to see if
a refresh is already in progress.  If there is one, it tells the caller who
requested the refresh, and then ends.

¥    If there is no refresh in progress, the command stores the caller's user-id
in the control block, sets the flag on, and issues the 'F LLA,REFRESH' command
via MGCR.

¥    The REFLLA command then ends, notifying any bad return code from MGCR.

¥    The WTO exit WXREFLLA is triggered by message CSV210I.  Firstly, it checks
the text of the message to see if it is a 'REFRESH COMPLETE' message.

¥    If it is, the flag in the control block is tested to see if the request
originated from a TSO user.

¥    If it did, then the flag is turned off, and the user is sent a message, via
TPUT, stating that the refresh has completed.

We use PCF at our installation to control command access, and we have written
some modifications to PCF to allow us to protect certain TSO commands via RACF,
which gives more flexibility than the normal PCF access levels.  We use this
mechanism to restrict access to this command to a few systems programmers and
systems engineers.  You will need to use some other mechanism, or build some
security into the program, to prevent unauthorised use of this command.

In addition to placing the command and the exit on the LINKLIST, you will need
the following entry in the MPFLSTnn member in SYS1.PARMLIB:

CSV210I,SUP(NO),USEREXIT(WXREFLLA)

This simple command has proved very useful at our installation, and is used
frequently.


REFLLA SOURCE CODE

         PUNCH ' SETCODE AC(1) ' MUST RUN AUTHORISED
REFLLA   CSECT ,
*---------------------------------------------------------------------*
* -REFLLA- TSO COMMAND PROCESSOR TO ALLOW TSO USERS TO REFRESH LLA    *
*          AFTER UPDATING THE LINKLIST.                               *
*         *THIS PROGRAM MUST BE RUN AS A CP*                          *
*         *THIS PROGRAM MUST BE RUN AUTHORISED*                       *
*---------------------------------------------------------------------*
         USING *,R15
         STM   R14,R12,12(R13)    SAVE CALLERS REGISTERS
         LR    R14,R13
         BAL   R13,CHAINIT
         USING *,R13              BASE REGISTER
         DROP  R15
         DC    19F'0'             SAVE AREA
*---------------------------------------------------------------------*
CHAINIT  ST    R13,8(,R14)        CHAIN..
         ST    R14,4(,R13)        ..SAVE AREAS
         L     R14,12(,R14)       RESTORE REG ON ENTRY
*---------------------------------------------------------------------*
         L     R15,0(,R1)
         CLC   =C'REFLLA',4(R15)  INVOKED AS COMMAND ?
         BE    CMDOK              (YES)-CARRY ON
         LA    R10,20             ELSE BOMB OUT RC=20
         B     EXIT
CMDOK    TESTAUTH FCTN=1          ARE WE RUNNING AUTHORISED ?
         LTR   R15,R15
         BZ    AUTHOK
         TPUT  PGMNAUTH,L'PGMNAUTH
         LA    R10,16
         B     EXIT
AUTHOK   STAX  DEFER=YES          IGNORE ATTENTIONS FOR NOW..
         L     R2,CVTPTR
         L     R2,CVTLLCB-CVT(,R2) LLCB
         LA    R3,MODE31
         O     R3,=X'80000000'
         BSM   R0,R3              SET TO 31 BIT
         USING LLCB,R2
MODE31   IC    R4,LLCBFLGS        GET FLAG BYTE FROM LLCB
         LA    R3,MODE24
         BSM   R0,R3              SET BACK TO 24 BIT
         DROP  R2
MODE24   N     R4,=X'00000080'    IS LLA ACTIVE ?
         BZ    LLAINACT           (NO )-FORGET IT
* ------ LLA IS OK, NOW CHECK IN USERCVT IF REFRESH IS GOING
         L     R1,CVTPTR
         L     R1,0(R1)
         L     R1,4(R1)
         L     R1,12(R1)
         MVC   USERID(8),0(R1)    GET CALLERS USERID
         MODESET MODE=SUP,KEY=ZERO
         L     R2,CVTPTR
*---------------------------------------------------------------------*
* WE HAVE OUR OWN USERCVT CONTROL BLOCK IN THE NUCLEUS, THE ADDRESS   *
* OF WHICH IS STORED IN CVTUSER. YOU WILL NEED TO UPDATE THIS BIT OF  *
* CODE TO SUIT YOUR OWN INSTALLATION. YOU NEED 12 BYTES, TO STORE THE *
* CALLERS USERID AND A FLAG TO SHOW THE REFRESH IS IN PROGRESS.       *
*---------------------------------------------------------------------*
         L     R2,CVTUSER-CVT(R2) USER CVT
         LA    R4,1
         SLR   R3,R3
         CS    R3,R4,16(R2)       WAS FLAG WORD ZERO ?
         BE    CSOK               (YES)-SAVE CALLERS USERID
*---------------------------------------------------------------------*
* FLAG WORD WAS NOT ZERO, SO REFRESH IS IN PROGRESS. SHOW WHO FOR...  *
*---------------------------------------------------------------------*
         MODESET MODE=PROB,KEY=NZERO BACK TO NORMAL
         MVC   REFWHO(4),=C'you.' DEFAULT TO US
         CLC   20(8,R2),USERID    WAS IT US ?
         BE    PUTMSG
         MVC   REFWHO(8),20(R2)
         MVI   REFWHO+8,C'.'
PUTMSG   TPUT  REFGOING,REFMLENG
         CLC   20(8,R2),USERID    WAS IT US ?
         BE    REFRACTV           (YES)-DON'T BOTHER WITH "RETRY" MSG
         TPUT  RETRYMSG,L'RETRYMSG
REFRACTV LA    R10,4              RETURN CODE
         B     ENDPROG
CSOK     MVC   20(8,R2),USERID    SAVE IN USERCVT
*---------------------------------------------------------------------*
* CALLERS USERID IS NOW STORED IN USERCVT READY FOR A WTO EXIT TO     *
* INFORM THE USER WHEN THE REFRESH COMPLETES. NOW ISSUE REFRESH       *
*---------------------------------------------------------------------*
         SLR   R0,R0
         MGCR  REFRESH            ISSUE COMMAND
         LR    R10,R15            SAVE RETURN CODE
         MODESET MODE=PROB,KEY=NZERO BACK TO NORMAL
         LTR   R10,R10
         BNZ   BADRC
         TPUT  REFREQ,L'REFREQ    "REFRESH REQUESTED"
         B     ENDPROG
BADRC    CVD   R10,DW
         ED    RETCODE(4),DW+6
         TPUT  BADRCMSG,BADRCLEN
         B     ENDPROG
LLAINACT TPUT  INACTMSG,L'INACTMSG
         LA    R10,8
ENDPROG  STAX  DEFER=NO
EXIT     LR    R15,R10            RETURN CODE
         L     R13,4(,R13)
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         OI    15(R13),X'01'      RETURN INDICATOR
         BR    R14                RETURN TO CALLER
USERID   DC    CL8' '
DW       DC    D'0'
*---------------------------------------------------------------------*
* MESSAGES                                                            *
*---------------------------------------------------------------------*
PGMNAUTH DC    C'PROGRAM NOT RUNNING AUTHORISED'
REFGOING DC    C'LLA REFRESH IS IN PROGRESS, REQUESTED BY '
REFWHO   DC    CL9' '
REFMLENG EQU   *-REFGOING
RETRYMSG DC    C'PLEASE RETRY IN A FEW MOMENTS IF THIS REFRESH DOES NOTX
                PICK UP YOUR CHANGE.'
REFREQ   DC    C'LLA REFRESH REQUESTED'
BADRCMSG DC    C'NON-ZERO RETURN CODE FROM REFRESH, R15='
RETCODE  DC    X'40202120'
BADRCLEN EQU   *-BADRCMSG
INACTMSG DC    C'LLA IS NOT ACTIVE'
REFRESH  DS    0H
         DC    X'80'
         DC    AL1(CMDLEN)
         DC    X'0000'
         DC    C'F LLA,REFRESH'
CMDLEN   EQU   *-REFRESH
         CVT   DSECT=YES
         IHALLCB ,
         END

SYSTEM WTO EXIT

*---------------------------------------------------------------------*
*  -NAME-        : WXREFLLA                                           *
*  -PURPOSE-     : NOTIFY USERID STORED IN USERCVT BY REFLLA COMMAND  *
*                : THAT LLA REFRESH HAS COMPLETED                     *
*  -RESIDES-     : LINKLIST                                           *
*---------------------------------------------------------------------*
WXREFLLA CSECT
WXREFLLA AMODE 31
WXREFLLA RMODE ANY
         USING *,R15
         B     WXCODE             BRANCH AROUND EYECATCHER
         DC    C'WTO EXIT WXREFLLA &SYSDATE'
WXCODE   STM   R14,R12,12(R13)    SAVE REGS
         BALR  R12,0
         USING *,R12
         L     R3,0(R1)           ADDRESS OF CTXT
         USING CTXT,R3            GET ADDRESSABLE ON IT
         L     R4,CTXTTXPJ        GET ADDRESS OF TEXT LINE
         USING CTXTATTR,R4
         GETMAIN RU,LV=AREALEN,LOC=BELOW,SP=230
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1             CHAIN SAVE AREAS...
         USING AREA,R13
         CLC   CTXTTMSG+25(4),REFRESH IS IT A REFRESH MSG ?
         BNE   EXIT               (NO )-FORGET IT
         L     R5,CVTPTR          CVT
*---------------------------------------------------------------------*
* WE HAVE OUR OWN USERCVT CONTROL BLOCK IN THE NUCLEUS, THE ADDRESS   *
* OF WHICH IS STORED IN CVTUSER. YOU WILL NEED TO UPDATE THIS BIT OF  *
* CODE TO SUIT YOUR OWN INSTALLATION. YOU NEED 12 BYTES, TO STORE THE *
* CALLERS USERID AND A FLAG TO SHOW THE REFRESH IS IN PROGRESS.       *
*---------------------------------------------------------------------*
         L     R5,CVTUSER-CVT(R5) USERCVT
         MVC   USERID(8),20(R5)   SAVE USERID, IF ANY
         LA    R6,1
         SLR   R7,R7
         CS    R6,R7,16(R5)       ZEROISE FLAG IN USERCVT
         BL    EXIT               IF ALREADY ZERO, DONT TPUT
         MVC   REFRMSG,REFDONE    COPY MSG BELOW 16M LINE
         TPUT  REFRMSG,L'REFRMSG,,NOWAIT,,,HIGHP,USERIDL=USERID
EXIT     LR    R10,R13            DECHAIN...
         L     R13,4(R13)
         FREEMAIN RU,LV=AREALEN,A=(10),SP=230
         LM    R14,R12,12(R13)    RESTORE REGS AND..
         BR    R14                RETURN TO CALLER
REFDONE  DC    CL80'STH901I LLA REFRESH IS NOW COMPLETE'
REFRESH  DC    CL4'REFR'
AREA     DSECT
         DS    18F                SAVE AREA
USERID   DS    CL8
REFRMSG  DS    CL80
AREALEN  EQU   *-AREA
         IEZVX100 ,
         CVT   DSECT=YES
         END


David Pritchard
MVS/XA Systems Programmer
Lucas Computing Services (UK) © Lucas Computing Services 1987






