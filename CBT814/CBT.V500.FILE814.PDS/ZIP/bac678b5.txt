Dynamically altering RACF attributes

In our shop we have the policy that, even though the systems
programmers install and maintain RACF, they do not have
either the 'operations' or 'special' RACF attributes. These
attributes are reserved for storage managers and RACF
administrators. We, the systems programmers, are considered
to be ordinary users, with access to all relevant data through
standard RACF PERMITs and CONNECTs.

In reality however, every once in a while, systems
programmers need the 'operations' or 'special' attributes. This
usually occurs on a dark night when a RACF administrator is
needed to solve a problem and you can't find him or her
anywhere. What did you do the night you discovered that JES2
Version 4 needed a RACF user to access its own spool and
checkpoint datasets? Or what if you are the only one available
who can circumvent a DFP problem with a production
database, but you do not have access to the dataset. Another
interesting situation is if all your 'special' users get revoked.
That has happened in a number of installations and causes
considerable trouble.

We have a program called TEMPAUTH to gain the RACF
attributes 'special' and 'operations'. It can be supplied with the
parameters OPERATIONS, NOOPERATIONS, SPECIAL,
and NOSPECIAL (only one at a time), and imitates the effects
of the ALTUSER RACF command. But, while the ALTUSER
command alters data in the RACF database, this program does
it in the in-storage ACEE that you are currently running under.
So you don't have to log off/log on, and the attributes are not
saved at log-off.

The RACFAUTH program itself does not log anything, but
whatever you do is logged in SMF (if you use the RACF
general options SAUDIT and OPERAUDIT), and is shown in
RACF report writer reports. So there is really no reason why
you shouldn't have a tool like this.

Please remember the limitations of the OPERATIONS
attribute. You can't access a resource that you already have
access to through the access list with a higher access level than
already PERMITed, and security classification checking or
security label checking can deny access. In these situations you
can always use the SPECIAL function and temporarily change
the access list etc.

The use of RACFAUTH is restricted to the users who have
read access to a RACF profile in the FACILITY general
resource class called RACFAUTH.OPERATIONS (with
parameters OPERATIONS and NOOPERATIONS), and
RACFAUTH.SPECIAL (with parameters SPECIAL and
NOSPECIAL). To leave you with an extra way out of trouble
in case all your special users and the users with access to this
program get revoked, the program can easily be altered to a
revolver version that doesn't need parameters supplied the TSO
way, and doesn't check RACF for access to execute, but just
reverses the special bit in the ACEE of the user executing it.
This program should of course not be generally available, but
could be kept in source code only, so a user with access to an
authorized library could install it. Or you could prepare some
definitions in PARMLIB to IPL with this program active and
authorized.

If you submit a batch job, the attributes gained by this program
are not propagated, since the batch job builds its RACF ACEE
from the RACF base. But you can still use this utility in a
batch job by including a TSO step that calls this program. The
attributes will last for the total lifetime of the job. It is done
like this:

// jobcard
//STEP1   EXEC PGM=IKJEFT01,PARM='RACFAUTH OPERATIONS'
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//*

The program needs to be linked with AC=1 into an authorized
library and to be specified in SYS1.PARMLIB(IKJTSO00) as
both AUTHCMD and AUTHTSF. The program has been used
on RACF 1.9 and MVS 4.1, but I can't see why it should not
work on previous releases.


JCL to assemble and link RACFAUTH

// jobcard
//ASSEM  EXEC PGM=IEV90,
//            PARM=(OBJECT,NODECK)
//SYSLIB   DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSLIN   DD DSN=&&LOADSET,DISP=(,PASS),SPACE=(CYL,(5,1)),UNIT=SYSDA,
//            DCB=BLKSIZE=80
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DSN=source library           <== YOUR SOURCE LIBRARY
//*
//LINK   EXEC PGM=IEWL,
//       PARM='AC=1'
//SYSLMOD  DD DSN=loadlib library          <== YOUR LOADLIB LIBRARY
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//         DD *
    NAME   RACFAUTH(R)
/*


RACFAUTH program

* DYNAMIC SPECIAL/OPERATIONS PROGRAM
* INVOCATION :                    NEEDS ACCESS TO FACILITY PROFILE :
*   TSO RACFAUTH SPECIAL          RACFAUTH.SPECIAL
*   TSO RACFAUTH NOSPECIAL        RACFAUTH.SPECIAL
*   TSO RACFAUTH OPERATIONS       RACFAUTH.OPERATIONS
*   TSO RACFAUTH NOOPERATIONS     RACFAUTH.OPERATIONS
&ID      SETC  'RACFAUTH'              SET CSECT NAME
&IDLEN   SETA  K'&ID
&ID      CSECT
&ID      AMODE 31
&ID      RMODE 24
         SAVE  (14,12),,RACFAUTH-&SYSDATE-&SYSTIME-SMIT
         BALR  12,0                    STANDARD LINKAGE
         USING *,12
         LA    11,SAVE
         ST    13,4(11)
         ST    11,8(13)
         LR    13,11
         L     R2,0(R1)                GET PARM ADDR
         LH    R3,0(R2)                GET PARM LENGTH
         CH    R3,=AL2(5+&IDLEN)       TEST FOR ZERO PARM
         BNH   WRGPARM                 IF ZERO, IGNORE
         AH    R2,=AL2(5+&IDLEN)       POINT TO BEGINNING OF SUPP. PARM
         SH    R3,=AL2(5+&IDLEN)       SUBTRACT HEADER TO GET PARM LEN
         LA    R8,0                    R8 = INDEX INTO PARAMETER
PARMLOOP EQU   *                       SCAN FOR FIRST NON-BLANK CHAR.
         LA    R9,0(R2,R8)             LOAD ADDR. OF CHAR. IN PARM
         CLI   0(R9),C' '              IS IT BLANK?
         BNE   FIRSTNB                 IF NOT BRANCH TO FIRSTNB
         LA    R8,1(R8)                GET NEXT CHARACTER
         CR    R8,R3                   END OF PARM ?
         BH    WRGPARM                 YES, WRITE ERROR
         B     PARMLOOP                NO, GET NEXT CHARACTER
FIRSTNB  EQU   *                       FIRST NONBLANK CHAR. FOUND
         SR    R3,R8                   SUBTRACT NO OF BLANKS IN PARM
         BCTR  R3,0                    SUBTRACT 1 FROM LENGTH
         EX    R3,MOVECHR              MOVE IN PARAMETER
         OC    PARM,=CL12' '           TRANSLATE PARM TO UPPERCASE
         L     R1,PSAAOLD-PSA(0)       R1 POINTS AT ASCB
         USING ASCB,R1
         L     R1,ASCBASXB             R1 POINTS AT ASXB
         USING ASXB,R1
         L     R2,ASXBSENV             R2 POINTS AT ACEE
         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE
         LA    R5,PARMTABL             LOAD START OF PARMTABLE
         LA    R3,PARMEND              LOAD END OF PARMTABLE
LOOP     EQU   *
         CLC   0(12,R5),PARM           COMPARE ENTRY IN PARMTABLE WITH
         BE    PARMOK                  SUPPLIED PARM, BRANCH EQ PARMOK
         A     R5,=F'56'               SKIP TO NEXT PARMTABLE ENTRY
         CR    R5,R3                   HAVE WE REACHED THE END
         BNE   LOOP                    IF NOT LOOP AGAIN
         B     WRGPARM                 ELSE WRITE ERROR
PARMOK   EQU   *                       PARAMETER WAS OK
         L     R4,52(R5)               LOAD ADDRESS OF BRANCH LABEL
         LA    R5,12(R5)               LOAD ADDRESS OF PROFILE TO CHECK
         RACROUTE REQUEST=AUTH,WORKA=RACFWORK,LOG=ASIS,                X
               ENTITY=((R5)),CLASS='FACILITY',ATTR=READ
         LTR   R11,R15                 CHECK RACF RETURN CODE
         BNZ   NOTAUTH                 IF NOT AUTH. BRANCH TO ERROR
         MODESET KEY=ZERO              GET READY TO CHANGE BIT IN ACEE
         BR    R4                      BRANCH TO LABEL SPEC. IN TABLE
SPEC     EQU   *
         OI    ACEEFLG1,ACEESPEC       SET SPECIAL ON
         B     NZERO
NOSPEC   EQU   *
         NI    ACEEFLG1,255-ACEESPEC   SET SPECIAL OFF
         B     NZERO
OPER     EQU   *
         OI    ACEEFLG1,ACEEOPER       SET OPERATIONS  ON
         B     NZERO
NOOPER   EQU   *
         NI    ACEEFLG1,255-ACEEOPER   SET OPERATIONS  OFF
         B     NZERO
NZERO    EQU   *
         MODESET KEY=NZERO             RETURN TO USER KEY
EXIT     EQU   *
         L     R13,SAVE+4              RETURN
         LR    R15,R11                 SET RETURN CODE FROM RACHECK
         RETURN (14,12),RC=(15)
NOTAUTH  EQU   *
         TPUT  =CL39'YOU ARE NOT AUTHORIZED TO THIS FUNCTION',39
         B     EXIT
WRGPARM  EQU   *
         TPUT  =CL68'WRONG PARAMETER, SHOULD BE SPECIAL/NOSPECIAL/OPERAX
               TIONS/NOOPERATIONS',68
         LA    R11,16                  SET RETURN CODE
         B     EXIT
SAVE     DC    18F'0'                  SAVE AREA
PARM     DC    CL12' '                 PARAMETER SUPPLIED TO PROGRAM
PARMTABL DS    0F                      PARAMETER TABLE
         DC    CL12'SPECIAL'           EACH ENTRY CONSISTS OF 56 BYTES:
         DC    CL40'RACFAUTH.SPECIAL'  A 12 BYTE FIELD THAT HAS TO
         DC    A(SPEC)                   MATCH THE PARAMETER SPECIFIED
         DC    CL12'NOSPECIAL'         A 40 BYTE FIELD CONTAINING THE
         DC    CL40'RACFAUTH.SPECIAL'    RACF PROFILE TO CHECK
         DC    A(NOSPEC)               A 4 BYTE ADDRESS OF THE LABEL
         DC    CL12'OPERATIONS'          TO BRANCH TO IN ORDER TO
         DC    CL40'RACFAUTH.OPERATIONS' CARRY OUT THE FUNCTION
         DC    A(OPER)                   REQUESTED
         DC    CL12'NOOPERATIONS'
         DC    CL40'RACFAUTH.OPERATIONS'
         DC    A(NOOPER)
PARMEND  EQU   *                       END OF PARAMETER TABLE
MOVECHR  MVC   PARM(0),0(R9)           EX INSTRUCTION TO MOVE PARMS
RACFWORK DS    128F                    WORKAREA FOR RACROUTE
         LTORG
         IHAASCB
         IHAASXB
         IHAPSA
         IHAACEE
         END


Flemming Smit
Systems Programmer
Nykredit (Denmark)                                                c Xephon 1992

