Using formulae to calculate dates

 /*REXX****************************************************************/
 /* DATE020....: Date Conversion Function                             */
 /*-------------------------------------------------------------------*/
 /* CALL FORMAT: DATE020  F - date = DATE020(date)                    */
 /* PARAMETERS.: DATE     I - Julian day of year or Gregorian date    */
 /* RETURNS....: DATE     O - Julian day of year or Gregorian date    */
 /*-------------------------------------------------------------------*/
 /* FUNCTION...: Converts any 'Gregorian date' into 'Julian day of    */
 /*              year' and vice versa. Conversion depends on format   */
 /*              of passed argument (ie date).                        */
 /*              YYYYMMDD -> YYYYDDD  or  YYYYDDD -> YYYYMMDD         */
 /*-------------------------------------------------------------------*/
 /* COMMENTS...: Pass a string with 8 or 9 bytes.                     */
 /*-------------------------------------------------------------------*/
 /*********************************************************************/
 x = MSG("OFF")
 parse source opsys . exec_name .
 /*********************************************************************/
 /* get argument - the date                                           */
 /*********************************************************************/
 arg datum
 /*********************************************************************/
 /* validate the passed date                                          */
 /*********************************************************************/
 if verify(datum,"0123456789") > 0
 then do
      say "DATE020 - invalid date >"datum"<"
      say "=======   (valid date is composed of digits 0 to 9)"
      return 0
 end
 if length(datum) ^= 7 & length(datum) ^= 8
 then do
      say "DATE020 - invalid date >"datum"<"
      say "=======   (valid forms are YYYYMMDD or YYYYDDD only)"
      return 0
 end
 /********************************************************************/
 /* passed date is in Gregorian date form                            */
 /********************************************************************/
 if length(datum) = 8
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      parse var datum yy 5 mm 7 dd
      if mm < 1 | mm > 12 | dd < 1 | dd > 31
      then do
           say "DATE020 - ivalid date >"datum"<"
           say "=======   (MM=1..12 and DD=1..31)"
           return 0
      end
      /***************************************************************/
      /* algorithm by J D Robertson                                  */
      /***************************************************************/
      a  = yy // 4
      b  = yy // 100
      c =  yy // 400
      d = (mm+10) % 13
      e = 3055 * (mm+2) % 100
      f = dd + e -2*d - 91
      /***************************************************************/
      /* adjust result and pass back to calling routine              */
      /***************************************************************/
      n = f + (1 - (a+3)%4 + (b+99)%100 - (c+399)%400) * d
      n = right(n,3,'0')
      return yy||n
 end
 /********************************************************************/
 /* passed date is in 'Julian day of year' form                      */
 /********************************************************************/
 if length(datum) = 7
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      parse var datum yy 5 ddd
      if (yy//4 = 0 & yy//100 ^= 0) | yy//400 = 0
      then if ddd < 1 | ddd > 366
           then do
                say "DATE020 - invalid date >"datum"<"
                say "=======   (DDD=1..366)"
                return 0
           end
           else nop;
      else if ddd < 1 | ddd > 365
           then do
                say "DATE020 - invalid date >"datum"<"
                say "=======   (DDD=1..365)"
                return 0
           end
           else nop;
      /***************************************************************/
      /* algorithm by R A Stone                                      */
      /***************************************************************/
      if yy//4 = 0
      then a = 1
      else a = 0
      if ddd>59
      then h = 1
      else h = 0
      if a+h > 0
      then b = 2-a
      else b = 0
      c = ddd+b+91
      m = c * 100 % 3055
      t = c - 3055*m % 100
      m = m - 2
      /***************************************************************/
      /* adjust result and pass back to calling routine              */
      /***************************************************************/
      t = right(t,2,'0')
      m = right(m,2,'0')
      return yy||m||t
 end
 return 0
 /*REXX****************************************************************/
 /* DATE021....: Date Conversion Function                             */
 /*-------------------------------------------------------------------*/
 /* CALL FORMAT: DATE021  F - date = DATE021(date)                    */
 /* PARAMETERS.: DATE     I - Julian date or Gregorian date           */
 /* RETURNS....: DATE     O - Julian date or Gregorian date           */
 /*-------------------------------------------------------------------*/
 /* FUNCTION...: Converts any date (Gregorian date or Julian day)     */
 /*              into the Julian date.                                */
 /*              YYYYMMDD -> DDDDDDD  or  DDDDDDD -> YYYYMMDD         */
 /*-------------------------------------------------------------------*/
 /* COMMENTS...: The real Julian date is the number of days since     */
 /*              January 1st 4713 BC. This date is the beginning of   */
 /*              the Egyptian calendar.                               */
 /*              Using the Julian date is the most suitable way to    */
 /*              calculate the difference between two dates.          */
 /*              Example:  2448623 = DATE021(19920101)                */
 /*-------------------------------------------------------------------*/
 /*********************************************************************/
 x = MSG("OFF")
 parse source opsys . exec_name .
 /*********************************************************************/
 /* get argument - the date                                           */
 /*********************************************************************/
 arg datum
 /*********************************************************************/
 /* validate the passed date                                          */
 /*********************************************************************/
 if verify(datum,"0123456789") > 0
 then do
      say "DATE021 - invalid date >"datum"<"
      say "=======   (valid date is composed of digits 0 to 9)"
      return 0
 end
 if length(datum) ^= 7 & length(datum) ^= 8
 then do
      say "DATE021 - invalid date >"datum"<"
      say "=======   (valid forms are YYYYMMDD or DDDDDDD only)"
      return 0
 end
 /********************************************************************/
 /* passed date is in Gregorian form                                 */
 /********************************************************************/
 if length(datum) = 8
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      parse var datum yy 5 mm 7 dd
      if mm < 1 | mm > 12 | dd < 1 | dd > 31
      then do
           say "DATE021 - invlaid date >"datum"<"
           say "=======   (MM=1..12 and DD=1..31)"
           return 0
      end
      /***************************************************************/
      /* algorithm by H F Fliegel and T C van Flandern (1968)        */
      /***************************************************************/
      k  = (mm-14)%12
      l  = yy + k + 4800
      jd = dd - 32075 + 1461*l%4 + 367*(mm-2-12*k)%12 -3*((l+100)%100)%4
      return jd
 end
 /********************************************************************/
 /* passed date is in Julian date form                               */
 /********************************************************************/
 if length(datum) = 7
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      jd = datum
      if jd < 2000000
      then do
           say "DATE021 - invalid date >"datum"<"
           say "=======   (min. DDDDDDD = 18. Sept. 763 = 2000000)"
           return 0
      end
      /***************************************************************/
      /* algorithm by H F Fliegel and T C van Flandern (1968)        */
      /***************************************************************/
      l = jd + 68569
      n = 4 * l % 146097
      l = l - ( (146097*n+3) % 4 )
      j = (4000*(l+1) % 1461001)
      l = l+31-j * 1461 % 4
      m = 80*l % 2447
      t = l-(2447*m % 80)
      l = m % 11
      m = m+2-12*l
      j = j + 100*(n-49)+l
      /***************************************************************/
      /* adjust result and pass back to calling routine              */
      /***************************************************************/
      j = right(j,4,"0")
      m = right(m,2,"0")
      t = right(t,2,"0")
      return j||m||t
 end
 return 0

 /*REXX****************************************************************/
 /* DATE022....: Date Conversion Function DAY-OF-WEEK                 */
 /*-------------------------------------------------------------------*/
 /* CALL FORAMT: DATE022  F - day-of-week = DATE022(date)             */
 /* CALLS......: DATE020  E - Converts Gregorian date or Julian d.o.y.*/
 /* PARAMETERS.: DATE     I - 'Julian day of year' or Gregorian date  */
 /* RETURNS....: WTNAME   O - name of day of week                     */
 /*-------------------------------------------------------------------*/
 /* FUNCTION...: Converts any date of the Gregorian or Julian calendar*/
 /*              into the name of the day of week.                    */
 /*              YYYYMMDD / YYYYDDD -> day-of-week (Sunday, Monday,..)*/
 /*-------------------------------------------------------------------*/
 /*********************************************************************/
 x = MSG("OFF")
 parse source opsys . exec_name .
 /*********************************************************************/
 /* get argument - the date                                           */
 /*********************************************************************/
 arg datum
 /*********************************************************************/
 /* validate the passed date                                          */
 /*********************************************************************/
 if verify(datum,"0123456789") > 0
 then do
      say "DATE022 - invalid Datum >"datum"<"
      say "=======   (valid date is composed of digits 0 to 9)"
      return ""
 end
 if length(datum) ^= 7 & length(datum) ^= 8
 then do
      say "DATE022 - invalid date >"datum"<"
      say "=======   (valid forms are YYYYMMDD or YYYYDDD only)"
      return ""
 end
 /********************************************************************/
 /* passed date is in Julian date form                               */
 /********************************************************************/
 if length(datum) = 7
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      parse var datum yy 5 ddd
      if (yy//4 = 0 & yy//100 ^= 0) | yy//400 = 0
      then if ddd < 1 | ddd > 366
           then do
                say "DATE022 - invalid >"datum"<"
                say "=======   (DDD=1..366)"
                return ""
           end
           else nop;
      else if ddd < 1 | ddd > 365
           then do
                say "DATE022 - invalid date >"datum"<"
                say "=======   (DDD=1..365)"
                return ""
           end
           else nop;
      /***************************************************************/
      /* convert Julian date into Gregorian date                     */
      /***************************************************************/
      datum = DATE020(datum)
 end
 /********************************************************************/
 /* passed date is in Gregorian date form                            */
 /********************************************************************/
 if length(datum) = 8
 then do
      /***************************************************************/
      /* split date into components                                  */
      /***************************************************************/
      parse var datum yy 5 mm 7 dd
      if mm < 1 | mm > 12 | dd < 1 | dd > 31
      then do
           say "DATE022 - invalid date >"datum"<"
           say "=======   (MM=1..12 and DD=1..31)"
           return ""
      end
      /***************************************************************/
      /* (modified) algorithm by C Zeller (1887)                     */
      /***************************************************************/
      if mm <= 2
      then do
           mm = mm + 12
           yy = yy - 1
      end
      c  = yy % 100
      yy = yy // 100
      wt = (dd + 13*(mm+1) % 5 + yy + yy%4 + c%4 - 2*c ) // 7
      if wt <= 0 then wt = wt + 7
      wt = wt * 1
      wtn = word("Sunday Monday Tuesday Wednesday Thursday Friday Saturday",wt)
      return wtn
 end
 return ""

 /*REXX****************************************************************/
 /* DATE023....: Movable Holidays for the years 1900 to 2099          */
 /*-------------------------------------------------------------------*/
 /* CALL FORMAT: DATE023  F - date = DATE023(year,holiday)            */
 /* CALLS......: DATE020  E - date conversion function                */
 /* PARAMETERS.: YEAR     I - Julian day of year or Gregorian date    */
 /*              FT       I - R - Monday bf. Lent O - Easter          */
 /*                           K - Good Friday     C - Ascension       */
 /*                           P - Whitsunday      F - Corpus Christi  */
 /* RETURNS....: DATE     O - Gregorian date of Christian holiday     */
 /*-------------------------------------------------------------------*/
 /* FUNCTION...: Base for calculating the movable holidays is Easter  */
 /*              Sunday. All other holidays orientate to this day.    */
 /*              Leap year: YY mod 4 = 0 and YY mod 100 <> 0  or      */
 /*                         YY mod 400 = 0                            */
 /*-------------------------------------------------------------------*/
 /*********************************************************************/
 x = MSG("OFF")
 parse source opsys . exec_name .
 /*********************************************************************/
 /* get arguments - the year and the holiday                          */
 /*********************************************************************/
 arg yy,ft
 /*********************************************************************/
 /* validate passed year and holiday                                  */
 /*********************************************************************/
 if verify(yy,"0123456789") > 0
 then do
      say "DATE023 - invalid year >"yy"<"
      say "=======   (valid year is composed of digits 0 to 9)"
      return 0
 end
 if length(yy) ^= 4
 then do
      say "DATE023 - invalid year >"yy"<"
      say "=======   (len(YYYY) = 4)"
      return 0
 end
 if yy < 1900 | yy > 2099
 then do
      say "DATE023 - invalid year >"yy"<"
      say "=======   (YYYY=1900..2099)"
      return 0
 end
 if length(ft) ^= 1
 then do
      say "DATE023 - invalid holiday query >"ft"<"
      say "=======   (valid is R/K/O/C/P/F)"
      return 0
 end
 if verify(ft,"RKOCPF") > 0
 then do
      say "DATE023 - invalid holiday query >"ft"<"
      say "=======   (valid is R/K/O/C/P/F)"
      return 0
 end
 /********************************************************************/
 /* method by T O'Beirne (1965), determination of Easter Sunday      */
 /********************************************************************/
 n = yy -1900
 a = n // 19
 b = (7*a+1) % 19
 m = (11*a+4-b) // 29
 q = n % 4
 w = (n+q+31-m) // 7
 p = 25-m-w
 if (yy//4 = 0 & yy//100 ^= 0) | yy//400 = 0
 then oso = p + 91                    /* leap year, 91th day of year */
 else oso = p + 90                    /* leap year, 90th day of year */
 /********************************************************************/
 /* determine the date of a movable Christian holiday                */
 /********************************************************************/
 select
   when ft = "R" then return DATE020(YY||right(oso-38,3,'0'))
   when ft = "K" then return DATE020(YY||right(oso- 2,3,'0'))
   when ft = "O" then return DATE020(YY||right(oso   ,3,'0'))
   when ft = "C" then return DATE020(YY||right(oso+39,3,'0'))
   when ft = "P" then return DATE020(YY||right(oso+49,3,'0'))
   when ft = "F" then return DATE020(YY||right(oso+60,3,'0'))
 end
 return 0

Gernot Ruban
Database Systems Consultant
EDV-Beratung Gernot Ruban (Germany)                   c Gernot Ruban 1995

