Using the MVS data compression routine

MVS/ESA has a built-in data compression algorithm which uses
the Run Length Limited (RLL) technique to compress or expand
a data buffer. The macro CSRCESRV can be called from any
Assembler program to achieve this. The purpose of compressing
the data is to reduce the DASD space required.

This feature only came to my attention by accident. To
demonstrate how to use it, I have coded a general purpose
compress and expand program. This can process a normal
sequential dataset and create a compressed copy of it or vice versa
assuming varying length records.

The degree of compression depends principally on the number of
repeated characters (typically blanks) in the data and can vary
from no effect (or indeed a slight increase) to a reduction of 70%
or more in size.

In the example shown, if the 'compressed' record is longer than
the origina, I copy the original unchanged so that the maximum
record length of the dataset does not change.

The use of a flag in the Record Descriptor Word to flag a
compressed record is entirely optional and probably against some
IBM rule but it allowed me to avoid increasing the record length
when a record was not compressible and already at the maximum
LRECL for the dataset.

The CSRCESRV macro must execute in 31-bit mode and, since
QSAM I/O needs to be 24-bit, I have switched addressing mode
as required with a macro called ZAMODE which executes the
BSM instruction.

Careful use of this service should result in significant reduction of
DASD space for storing log files and similar data. Existing
systems software may have an exit point prior to writing records
that this macro could be used in to reduce the size of the records.

JCL to invoke ZCOMPRES in batch

//*
//COMP     EXEC PGM=ZCOMPRES,PARM=COMPRESS
//SYSUT1   DD DSN=TEST.FILE1,DISP=SHR
//SYSUT2   DD DSN=TEST.FILE2,DISP=SHR
/*
//EXP     EXEC PGM=ZCOMPRES,PARM=EXPAND
//SYSUT1   DD DSN=TEST.FILE2,DISP=SHR
//SYSUT2   DD DSN=TEST.FILE3,DISP=SHR
/*

Source of program ZCOMPRES

         TITLE 'ZCOMPRES - COMPRESS OR EXPAND FILE'
*****************************************************************
* ZCOMPRES
* THIS PROGRAM READS SYSUT1 AND WRITES SYSUT2 TO EITHER COMPRESS
* OR EXPAND THE DATA ACCORDING TO THE PROGRAM PARAMETER. THE MVS
* COMPRESS SERVICE CSRCESRV IS CALLED TO DO THIS.
* 6 BYTE+ OS FORMAT PARM OF 'COMPRE' OR 'EXPAND' REQUIRED.
* INPUT AND OUTPUT FILES ARE VARYING LENGTH RECORDS MAX 255
* (THIS IS A PROGRAM CONSTRAINT NOT DUE TO THE CSRCESRV MACRO.)
* NOT RENT, AC=0, A24, R24.
*****************************************************************
ZCOMPRES CSECT
ZCOMPRES AMODE 24
ZCOMPRES RMODE 24
         STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    R12,R15                  ADDRESSABILITY
         USING ZCOMPRES,R12             BASE REGS
         LR    R7,R1                    PARM REG
         GETMAIN R,LV=WORKLEN           GETMAIN DYNAMIC AREA
         LR    R10,R1                   R10 -> DYNAMIC AREA
         USING WORKAREA,R10             ADDRESS DYNAMIC AREA
         ST    R13,SAVEAREA+4           SAVE CALLER'S SAVEAREA ADDRESS
         ST    R10,8(R13)               SAVE SAVEAREA ADDRESS
         LR    R13,R10                  SAVE AREA PTR
* PARM RETRIEVAL IN STANDARD OS FORMAT
         MVC   ERETC,=F'8'              RETURN CODE
         L     R8,0(R7)                 PARM ADDRESS
         LH    R9,0(R8)                 LEN OF OS TYPE PARM
         CH    R9,=H'6'                 ANY PARM < 6
         BL    EXIT                     NO
         CLC   2(6,R8),=CL6'COMPRE'     IS IT COMPRESS?
         BE    PCOMP                    YES
         CLC   2(6,R8),=CL6'EXPAND'     IS IT EXPAND?
         BE    PEXP                     YES
         B     EXIT                     BAD PARM
PCOMP    EQU   *
         MVI   OPT,C'C'                 COMPRESS SET
         B     PREPARE                  GO
PEXP     EQU   *
         MVI   OPT,C'E'                 EXPAND SET
         B     PREPARE                  GO
* PREPARE COMPRESS/EXPAND SERVICE BUFFER
PREPARE  EQU   *
         ZAMODE 31
         MVC   ERETC,=F'12'             RETURN CODE
         LA    R0,1                     USE RLL
         CSRCESRV SERVICE=QUERY
         LTR  R15,R15                   TEST RC
         BNZ  EXIT
         MVC  WRKADDR,=F'0'             CLEAR
         ST   R0,WRKLEN                 SAVE LEN
         LTR  R0,R0                     TEST LEN
         BZ   SKIP1
         GETMAIN RU,LV=(0)              GET STORAGE
         LTR  R15,R15                   TEST RC
         BNZ  EXIT
         ST   R1,WRKADDR                SAVE BUFFER ADDRESS
SKIP1    EQU  *
         ZAMODE 24
* OPEN INPUT, OUTPUT AND PROCESS RECORDS UNTIL EOF.
         OPEN  (DCB1,INPUT)             OPEN FILE AS INPUT
         OPEN  (DCB2,OUTPUT)            OPEN FILE AS OUTPUT
READ     EQU   *
         GET   DCB1                     READ A RECORD
         MVC   OUTREC(4),0(R1)          MOVE RDW ACROSS
         LH    R2,0(R1)                 LOAD REC LEN (INC 4 FOR RDW)
         SH    R2,=H'4'                 NOW REC LEN
         ST    R2,RECLEN                SAVE
         BCTR  R2,0                     LESS ONE
         LA    R3,4(R1)                 LOAD REC ADDRESS
         EX    R2,MOVEREC1              COPY RECORD
         B     PROCESS                  PROCESS
MOVEREC1 MVC   RECORD(0),0(R3)          COPY RECORD
PROCESS  EQU   *
         CLI   OPT,C'E'                 EXPAND?
         BE    EXPAND                   YES
         B     COMPRESS                 COMPRESS
EXPAND   EQU   *
         LA    R6,RDWSPR                ADDR FLAG BYTES
         TM    1(R6),BIT0               COMPRESS BIT SET?
         BNO   WRITE                    NO WRITE IT UNCHANGED
         ZAMODE 31
         L     R1,WRKADDR               ADDR WORK AREA
         LA    R2,RECORD                ADDR RECORD
         L     R3,RECLEN                RECORD LEN
         LA    R4,OUTAREA               ADDR OUTPUT AREA
         LA    R5,255                   LEN OUTPUT AREA
         MVC   ERETC,=F'16'             RETURN CODE
         CSRCESRV SERVICE=EXPAND        EXPAND RECORD
         LTR   R15,R15                  TEST RC
         BNZ   EXIT
         LA    R6,255                   ORIGINAL LENGTH OF OUTPUT
         SR    R6,R5                    MINUS UNUSED
         LA    R7,4(R6)                 ADD 4
         STH   R7,RDWLEN                SAVE AS RDW LENGTH
         BCTR  R6,0                     LESS ONE
         EX    R6,MOVEREC2              COPY NEW RECORD
         LA    R6,RDWSPR                ADDR FLAG BYTES
         NI    1(R6),255-BIT0           CLEAR COMPRESS BIT
         ZAMODE 24
         B     WRITE                    WRITE IT
MOVEREC2 MVC   RECORD(0),OUTAREA        COPY NEW RECORD
COMPRESS EQU   *
         LA    R6,RDWSPR                ADDR FLAG BYTES
         TM    1(R6),BIT0               COMPRESS BIT SET?
         BO    WRITE                    YES WRITE IT UNCHANGED
         ZAMODE 31
         L     R1,WRKADDR               ADDR WORK AREA
         LA    R2,RECORD                ADDR RECORD
         L     R3,RECLEN                RECORD LEN
         LA    R4,OUTAREA               ADDR OUTPUT AREA
         LA    R5,255                   LEN OUTPUT AREA
         MVC   ERETC,=F'20'             RETURN CODE
         CSRCESRV SERVICE=COMPRESS      EXPAND RECORD
         LTR   R15,R15                  TEST RC
         BNZ   EXIT
         LA    R6,255                   ORIGINAL LENGTH OF OUTPUT
         SR    R6,R5                    MINUS UNUSED
         C     R6,RECLEN                COMPARE NEW TO OLD LEN
         BH    ENDCOMP                  GREATER THAN BEFORE
         LA    R7,4(R6)                 ADD 4
         STH   R7,RDWLEN                SAVE AS RDW LENGTH
         BCTR  R6,0                     LESS ONE
         EX    R6,MOVEREC2              COPY NEW RECORD
         LA    R6,RDWSPR                ADDR FLAG BYTES
         OI    1(R6),BIT0               SET COMPRESS BIT
ENDCOMP  EQU   *
         ZAMODE 24
         B     WRITE                    WRITE IT
MOVEREC3 MVC   RECORD(0),OUTAREA        COPY NEW RECORD
WRITE    EQU   *
         PUT   DCB2,OUTREC              PUT IT
         B     READ                     READ NEXT RECORD
EOF      EQU   *
         CLOSE (DCB1)                   CLOSE INPUT
         CLOSE (DCB2)                   CLOSE OUTPUT
         FREEPOOL DCB1                  FREEPOOL
         FREEPOOL DCB2                  FREEPOOL
         ZAMODE 31
         L     R0,WRKLEN                LOAD LEN
         LTR   R0,R0                    TEST
         BZ    SKIP2                    SKIP
         L     R1,WRKADDR               LOAD BUFFER ADDRESS
         FREEMAIN RU,LV=(0),A=(1)       FREEMAIN DYNAMIC AREA
SKIP2    EQU   *
         ZAMODE 24
         MVC   ERETC,=F'0'
* LEAVE PROGRAM
EXIT     EQU   *
         L     R3,ERETC                 RETURN CODE
         L     R13,SAVEAREA+4           RESTORE R13
         FREEMAIN R,LV=WORKLEN,A=(10)   FREE WORK AREA
         LR    R15,R3                   RC
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)           RESTORE R0 TO R12
         BR    R14                      RETURN
* STATIC STORAGE
DCB1     DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=EOF
DCB2     DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM)
* UNINITIALIZED STORAGE (GETMAINED)
WORKAREA DSECT                          GETMAINED STORAGE AREA
SAVEAREA DS    18F                      SAVE AREA
WRKADDR  DS    F                        SERVICE ADDR
WRKLEN   DS    F                        SERVICE LEN
ERETC    DS    F                        RC
RECLEN   DS    F                        LEN
OPT      DS    C                        OPTION
OUTAREA  DS    CL255                    OUTPUT FROM CSRCESRV
OUTREC   DS    0F                       OUTPUT RECORD
RDWLEN   DS    H                        KEEP
RDWSPR   DS    H                        THIS
RECORD   DS    CL255                    TOGETHER
WORKLEN  EQU   *-WORKAREA
         YREGS
         IEZBITS
         END   ZCOMPRES

Source of ZAMODE macro

         MACRO
&NAME    ZAMODE &MODE
.*---------------------------------------------------------------------
.*       CHANGE ADDRESS MODE
.*       ZAMODE 24                      SET ADDR MODE TO 24 BIT
.*       ZAMODE 31                      SET ADDR MODE TO 31 BIT
.*---------------------------------------------------------------------
         LCLA  &X
&X       SETA  &SYSNDX
&NAME    DS    0H
         AIF   ('&MODE' EQ '24').A24
         AIF   ('&MODE' EQ '31').A31
         MNOTE 8,'INVALID MODE, MUST BE 24 OR 31'
         MEXIT
.A24     ANOP
*----------------------------------------------------------------------
*        SET AMODE=24
*----------------------------------------------------------------------
         ICM   R1,15,=A(MZZZ&X)
         BSM   R0,R1              SET AMODE=24
         AGO   .DONE
.A31     ANOP
*----------------------------------------------------------------------
*        SET AMODE=31
*----------------------------------------------------------------------
         ICM   R1,15,=A(MZZZ&X+X'80000000')
         BSM   R0,R1              SET AMODE=31
.DONE    ANOP
MZZZ&X   DS    0H
.*---------------------------------------------------------------------
         MEND


                                                                           c Xephon 1994

