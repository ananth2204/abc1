Non-swap revisited

We recently needed to make our production IDMS database
and SQL host server address spaces non-swappable. We did
not wish to use the Program Properties Table to do this, since
our development and verification environments execute the
same programs and we wished them to remain swappable.

The solution was to expand on the dynamic non-swappable
routine presented in the December 1988 Issue of MVS Update
to produce a program that makes an address space non-
swappable and then transfers control to the program of your
choice. We decided to call the program NSWAP. NSWAP can
be executed with the following JCL:

//NONSWAP  EXEC PGM=NSWAP,PARM='progname,progparms'
//SYSPRINT DD  SYSOUT=*
//DD1      DD  DSN=......

where progname is the name of the program to which you wish
to transfer control and progparms represents any parameters
you wish to have passed to progname. NSWAP will strip off
the program name and first comma before passing the
parameters. All DDNAMEs required for the proper execution
of progname must be included. The NSWAP routine must be
link-edited with AC(1) and placed in an authorized library.

Please note that the dynamic non-swappable routine article
suggests changing bit settings in the ASCB and OUCB control
blocks to make an address space non-swappable. We could not
get NSWAP to work reliably using this method. There were
some programs that, when loaded via NSWAP, would cause
the address space to become swappable again. This was
resolved by using the SYSEVENT macro with the
TRANSWAP operand. It is a far simpler and more reliable way
of making your own address space non-swappable. It is
documented in the MVS System Macros and Facilities manual.

NSWAP    CSECT
NSWAP    AMODE 31
NSWAP    RMODE 24
         B     34(,15)           PUT EYECATCHER IN MODULE
         DC    CL8'NSWAP'        CSECT ID
         DC    CL8'NSWAP'        ENTRY LABEL
         DC    CL8'01/01/92'     ASSEMBLY DATE
         DC    CL6'11.39'        ASSEMBLY TIME
         STM   14,12,12(13)      SAVE REGISTERS
         LR    R12,15            ESTABLISH LOCAL ADDRESSABILITY
         USING NSWAP,R12
         LA    1,SAVE            LINK SAVE AREAS
         ST    1,8(13)
         ST    13,4(1)
         L     1,24(13)          RESTORE R1 (JUST CLOBBERED)
         LA    13,SAVE           POINT R13 TO NEW SAVE AREA
         ST    R1,PARMLSTA       SAVE PARAMETER LIST ADDRESS
         MODESET KEY=ZERO        MAKE US NON_SWAPPABLE
         SR    R1,R1
         SYSEVENT TRANSWAP
         MODESET KEY=NZERO
         L     R1,PARMLSTA       RESTORE R1
         L     R4,0(,R1)         GET PARM ADDRESS
         LA    R0,ADDRLEN        STORE PARM ADDR IN GETMAINED AREA
         GETMAIN RU,LV=(R0)
         LR    R3,R1
         ST    R4,0(,R3)
         LH    R5,0(,R4)         R5 = LEN OF PARM
         SR    R1,R1
         EX    R5,FNDCOMMA       FIND FIRST COMMA
         BZ    NOTFOUND
FOUND    LR    R6,R1             R6 = LOC OF FIRST COMMA
         LA    R2,2(,R4)         R2 = LOC OF PARM START
         SR    R6,R2             R6 = LENGTH OF PROG NAME PARM
         C     R6,=F'8'          IF LEN PROG NAME > 8 ==> INVALID
         BH    ERROR
         S     R6,=F'1'          IBM THE LENGTH FOR EX MOVE
         EX    R6,MOVEPRG
         SR    R5,R6             GET LENGTH OF REMAINING PARMS
         S     R5,=F'2'          REMOVE COMMA LEN AND EFFECTS OF
*                                PREVIOUS IBMING THE LENGTH
         C     R5,=F'0'
         BH    STORLEN
         NC    0(2,R4),=X'0000'  STORE REMAINING PARM LEN = 0
STORLEN  STH   R5,0(,R4)         OR STORE ACTUAL PARM LEN
         S     R5,=F'1'          IBM THE LENGTH OF REMAINING PARM
         EX    R5,MOVEPARM       MOVE IT TO START OF PARM
         B     XCTLCALL
NOTFOUND C     R5,=F'8'          IF PROG NAME > 8 ==> INVALID NAME
         BH    ERROR
         NC    0(2,R4),=X'0000'  NO COMMA ==> NO OTHER PARMS
         S     R5,=F'1'          IBM THE PROGRAM NAME LEN
         EX    R5,MOVEPRG
XCTLCALL L     R13,4(R13)        SET UP TO TRANSFER CONTROL
         L     R14,12(R13)
         XCTL  (2,12),EPLOC=PROGNAME,PARAM=((R4)),MF=(E,(R3))
ERROR    EQU   *
         WTO   'NSWAP  - INVALID PARAMETER SPECIFIED',ROUTCDE=(11)
         L     13,4(13)          UNLINK TO PREVIOUS SAVE AREA
         LM    14,12,12(13)      RESTORE THE REGISTERS
         LA    15,8(0,0)         LOAD RETURN CODE
         BR    14                RETURN
         DS    0D
SAVE     DC    18F'0'
         DS    0D
PARMLSTA DS    A
PROGNAME DC    CL8' '
         DS    0D
FNDCOMMA TRT   2(0,R4),COMMATAB
         DS    0D
MOVEPRG  MVC   PROGNAME(0),2(R4)
         DS    0D
MOVEPARM MVC   2(0,R4),1(R1)
ADDRLEN  EQU   8
COMMATAB DS    0D
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000001100000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         CVT  DSECT=YES
         END


Chris Krusch and Kevin Rutherford
MVS Systems Programmers
University of British Columbia (Canada)                  c Xephon 1992

