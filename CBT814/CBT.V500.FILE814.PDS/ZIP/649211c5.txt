Incorporating SYSIN data in a procedure (again)

The program SUYLINK, described by John Gray in MVS
Update Issue 16 (January 1988), does not appeal to me for the
same reasons cited by A Allen in MVS Update Issue 19 (April
1988).  I have seen similar programs described before:  in the
16 June 1980 Issue of Computerworld, an article by Warner
Mach, entitled IBM Utilities Controlled by JCL Alone,
described an Assembler program to create utility SYSIN cards
from the program's PARM.  The article inspired me to write a
version of my own, in COBOL, because that was all I knew at
the time.  Whether you code your utility program in
Assembler, COBOL, or whatever, is a matter of what you are
comfortable with.  COBOL is fine if you don't know
Assembler.

I used my COBOL program for years, at two different
companies, until I came to my present job.  When I described
it to a senior member of the technical support staff here, he
showed me a way that is limited to a single card output, but
requires no new program at all.  It uses an existing program,
the IBM Assembler (any version).  It requires only a two-card
SYSIN member to be kept in a PARMLIB somewhere.  The
two cards are:

      PUNCH '&SYSPARM'
      END

When the two cards are kept, for instance, in
SYS1.PARMLIB(TWOCARDS), the JCL looks like:

//ASMBLR   EXEC PGM=ASMBLR,PARM='DECK,NOLOAD,SYSPARM(...)'
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DSN=SYS1.PARMLIB(TWOCARDS),DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,1)
//SYSPUNCH DD  DSN=&&OUTPUT,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)

The variable data (entered at the ellipsis) is passed in through
SYSPARM and appears on SYSPUNCH.  Ordinarily,
SYSPRINT can be dummied.  The trade-off for not writing
code is having more JCL.

This only emphasizes to me the old saying, that anybody who
says there are two sides to any question suffers from a lack of
imagination.


Leslie J  Somos
Systems Programmer
Centerior Energy Corporation (USA)                        c Xephon 1991

