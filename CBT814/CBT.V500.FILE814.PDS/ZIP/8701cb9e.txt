Stacking ISPF screens

How often, when working under ISPF, do you need an extra
screen but you still want to keep your current screens?
Sometimes you can make do with invoking a CLIST or two
from your command line, but often you want to compress a
file, edit another dataset, or something else not readily
available in a CLIST.

I have written a small program, STAK, to stack another level
of ISPF over the current ISPF screen.  It can be invoked from
both logical screens concurrently, and screens can be stacked to
multiple levels.

When invoked, STAK will display the Primary Option Menu
or, if a valid Primary Option Menu option is passed as a
parameter, will jump directly to that option.  Once invoked,
you can jump anywhere within ISPF until you exit from the
Primary Option Menu.  The invoking lower-level screen is then
re-displayed.

In order to keep track of the number of levels you are stacked
to, profile pool variables STAKLVLI and STAKLVL2
(relating to logical screens 1 and 2) are
incremented/decremented and stored on entry/exit to the
program.  These variables may be displayed on any screen by
setting a variable in the )INIT section of a panel, and defining
it in the )BODY section, for example:

    )INIT                              )BODY
      &STAKVAR = STAKLVL&ZSCREEN        STACK LEVEL - |&STAKVAR

Care should be taken to reset these variables on each entry to
ISPF as the values they contain may be invalid if the session
abended or timed out.

STAK

         TITLE 'STACK ISPF ON CURRENT PANEL'
STAK     CSECT
         STM   R14,R12,12(R13)    SAVE REGISTERS
         LR    R12,R15            SET BASE ADDRESS
         USING STAK,R12           USE R12
         LA    R15,SAVEAREA       POINT TO SAVEAREA
         ST    R15,8(,R13)        CHAIN SAVEAREAS
         ST    R13,4(,R15)
         LR    R13,R15            POINT R13 TO MY SAVEAREA
*  PROCESS PARAMETERS
         L     R1,0(R1)           GET PARMLIST
         SR    R2,R2
         SR    R3,R3
         ICM   R2,B'0011',2(R1)   GET LENGTH OF COMMAND
         ICM   R3,B'0011',0(R1)   GET LENGTH OF INPUT
         LA    R1,4(R1,R2)        GET SCAN CHARACTERS
         SR    R3,R2              INPUT MINUS COMMAND LENGTH
         SH    R3,=H'4'           GET RID OF 2 HALFWORDS
         BZ    AA005              BYPASS - MOVE
         LR    R2,R3              PUT LENGTH IN REG2
         BCTR  R2,0               SUBTRACT ONE FOR EXECUTE INSTRUCTION
         CLI   0(R1),C'='         IS IT =
         BNE   AA000              NO - MOVE PARAM
         LA    R1,1(R1)           BUMP A BYTE
         BCTR  R2,0               SUBTRACT ONE FOR EXECUTE INSTRUCTION
AA000    DS    0H
         EX    R2,MVC1            MOVE PARAM TO WORK AREA
AA005    DS    0H
         LOAD  EP=ISPLINK         LOAD ISPLINK
         ST    R0,SFISPLNK        SAVE ADDRESS
         L     R15,SFISPLNK       LOAD ISPLINK ADDRESS
         CALL  (15),(CCVDEF,CPSCREEN,SPSCREEN,CCCHAR,CF1),VL
         L     R15,SFISPLNK       LOAD ISPLINK ADDRESS
         CALL  (15),(CCVGET,CPSCREEN,CCSHAR),VL
         L     R15,SFISPLNK       LOAD ISPLINK ADDRESS
         CALL  (15),(CCVDEF,CPSTAKLV,SPSTAKLV,CCCHAR,CF5),VL
         ZAP   KPWORK,=P'1'       SET FOR INCREMENT
         BAL   R7,SA000           SET STAK LEVEL
         L     R15,SFISPLNK       LOAD ISPLINK ADDRESS
         CALL  (15),(CCSEL,CF45,CCPANEL),VL
         ZAP   KPWORK,=P'-1'      SET FOR DECREMENT
         BAL   R7,SA000           SET STAK LEVEL
         L     R13,SAVEAREA+4     RESTORE CALLERS R13
         RETURN (14,12)           RETURN
SA000    DS    0H
         L     R15,SFISPLNK       ISPLINK ADDRESS
         CALL  (15),(CCVGET,CPSTAKLV,CCPROF),VL
         LA    R2,5               SET LOOP COUNT
         LA    R3,SPSTAKLV        POINT TO INPUT
         LA    R4,SPSTAKWK        POINT TO OUTPUT
         LA    R5,0               SET DEFAULT
         CLC   SPSTAKLV,=CL5' '   IS IT BLANK
         BE    SA030              YES - BYPASS MOVE
SA010    DS    0H
         CLI   0(R3),C' '         IS BYTE BLANK
         BE    SA020              YES - PACK
         MVC   0(1,R4),0(R3)      MOVE BYTE
         LA    R4,1(R4)           BUMP
         LA    R5,1(R5)           BUMP
SA020    DS    0H
         LA    R3,1(R3)           INCREMENT
         BCT   R2,SA010           LOOP
         BCTR  R5,0               DECREMENT FOR EXECUTE
SA030    DS    0H
         EX    R5,EXPACK          PACK LEVEL
         AP    KPLVL,KPWORK       CHANGE LEVEL
         OI    KPLVL+2,X'0F'      FORCE SIGN
         MVC   SPSTAKED,=XL6'402020202120'  MOVE EDIT PATTERN
         ED    SPSTAKED,KPLVL     UNPACK LEVEL
         L     R15,SFISPLNK       LOAD ISPLINK ADDRESS
         CALL  (15),(CCVPUT,CPSTAKLV,CCPROF),VL
         BR    R7                 RETURN
*  EXECUTED STATEMENTS
MVC1     OC    CCOPT+4(0),0(R1)       MOVE PARM
EXPACK   PACK  KPLVL,SPSTAKWK(0)      PACK LEVEL
*  PROGRAM STORAGE AREAS
SAVEAREA DS    9D
SFISPLNK DC    A(0)
CCCHAR   DC    CL8'CHAR'
CCPROF   DC    CL8'PROFILE'
CCSEL    DC    CL8'SELECT'
CCSHAR   DC    CL8'SHARED'
CCVDEF   DC    CL8'VDEFINE'
CCVGET   DC    CL8'VGET'
CCVPUT   DC    CL8'VPUT'
CCPANEL  DC    CL30'PANEL(ISR@PRIM) NEWAPPL(ISR)'
CCOPT    DC    CL15'OPT(         )'
CF1      DC    F'1'
CF5      DC    F'5'
CF45     DC    F'45'
CPSCREEN DC    CL9'(ZSCREEN)'
CPSTAKLV DC    CL10'(STAKLVL )'
SPSCREEN EQU   CPSTAKLV+8,1
KPLVL    DC    PL3'0'
KPWORK   DC    PL1'0'
SPSTAKED DS    0CL6
         DS    CL1
SPSTAKLV DC    CL5' '
SPSTAKWK DC    CL5'0'
         END   ,


Chris Wegener
Principal Systems Programmer
Commonwealth Bank (Australia) © Commonwealth Bank 1990

