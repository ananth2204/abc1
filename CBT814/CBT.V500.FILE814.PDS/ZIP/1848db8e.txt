Using MLPA to test changed modules

If modules contained in the PLPA are to be changed, you must
know whether they are working correctly and whether your
system to be IPLed will still come up. Out of several ways of
achieving this, the method presented here seems to be the
easiest one.

Let us first specify some notation. The whole Link Pack Area
is shown in Figure 1. A detailed description is in the
Initialization and Tuning and Component Diagnosis and Logic:
Contents Supervision manuals.

Member SYS1.PARMLIB(IEAFIXxx) specifies those modules
of SYS1.SVCLIB, the LPALST concatenation (see below),
and the LNKLST concatenation (see the Initialization and
Tuning manual) which build the FLPA.

Member SYS1.PARMLIB(LPALSTxx) specifies the actual
LPALST concatenation, consisting of the APF-authorized and
MASTERCAT-catalogued datasets which are concatenated to
SYS1.LPALIB, in order to build the PLPA.

Member SYS1.PARMLIB(IEALPAxx) specifies those modules
of SYS1.SVCLIB, the LPALST concatenation (see above),
and the LNKLST concatenation (see the Initialization and
Tuning manual), which build the MLPA.

The way to use the MLPA can be presented in an algorithmic
way, thus:

1      Assemble and link-edit the module to be changed into
      SYS1.SVCLIB or a concatenation (ie the LNKLST or
      LPALST concatenations) that does not already contain it.
      Preferably,  link-edit the module into a library which is not
      newly created during system generation/installation.

2      Specify a member SYS1.PARMLIB(IEALPAyy) which is
      identical to the actual one except it has SYS1.SVCLIB
      added or contains the concatenation (according to step 1)
      and the name of the module to be changed.

3      IPL with CLPA and specify MLPA=yy (where yy is the
      suffix of the IEALPA member specified in step 2).

4      If the IPL fails, just re-IPL with CLPA.

5      If the IPL has been successful and the module works as it
      should, move that module from MLPA to PLPA (ie from
      SYS1.SVCLIB or the concatenation used in step 1 into the
      LPALST concatenation), remove member IEALPAyy, and
      IPL once again with CLPA.

The advantage of the algorithm presented above is that you can
never fail and be unable to recover. In particular, you avoid
things like stand-alone restore.

One thing must be pointed out. The algorithm only works if the
module to be changed was originally part of the PLPA. If it
was part of the FLPA we cannot proceed in the given way
since, as shown in Figure 1, the FLPA is searched first. So if
you want to use the above algorithm, remove the module from
the FLPA, insert it into the PLPA, proceed in the given way,
and, if the tests are successful, move the new module from the
MLPA into the FLPA and delete the old one from the PLPA.


Hans-Paul Drumm
Systems Engineer
Comparex Informationssysteme GmbH (Germany)      c Xephon 1992

