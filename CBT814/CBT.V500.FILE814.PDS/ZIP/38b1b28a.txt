Exploiting the JES2 $SCAN facility
For years JES2 systems programmers have been modifying JES2 source code and
writing JES2 exits to meet the needs of their installations.  Whenever
flexibility in this user-written code is required, some form of user-unique
input must be scanned and parsed.  This unique input may be contained in the
JES2 parameter list, a JES2 command, or JES2 control statement.  Whatever the
source of the input, odds are that some systems programmer had to write a
parsing routine to extract the vital information from the supplied text.  These
user-written parsing routines are either time-consuming to write or offer little
flexibility in input format.  But there is a way to achieve maximum format
flexibility with minimal coding and hence increase systems programmer
productivity.
In the more recent releases of JES2 (1.3.3 and above) the parsing routines that
JES2 uses have become accessible to the user.  Now user-defined parameters can
be scanned and processed by the same routines that process the JES2-defined
parameters.  The facility that JES2 uses is called $SCAN.  The grammar of user-
defined parameters can be defined to the $SCAN facility in the same way that
JES2-defined parameters are.  $SCAN can be used to scan any text string, enforce
syntax rules, and provide data movement and conversion services.  Most commonly,
installations make use of the $SCAN facility to:
¥    Add or modify keywords on existing JES2 initialisation statements.
¥    Create new initialisation statements.
¥    Provide scanning services for input text received by routines called by the
$EXIT facility (JES2 commands/JES2 control cards).
The $SCAN facility is utilised by making use of five macro instructions supplied
with JES2.  This article covers the two primary macros, $SCAN and $SCANTAB.  A
full description of the $SCAN facility is provided in the JES2 User
Modifications and Macros manual.  The intention of this article is to
demonstrate the ease of use of the $SCAN facility and to provide detailed
examples of its use.  The examples shown are from a JES2 2.1.5 environment.
SCAN TABLES
The syntax of parameters and the processing requirements for the user-supplied
keyword values are all defined to the $SCAN facility by means of scan tables.
The $SCANTAB macro is used to generate a scan table.  A scan table is created by
using three or more $SCANTAB macros.  The start of a user scan table is
indicated by using the $SCANTAB macro and an operand of TABLE=USER.  All of the
$SCANTAB macros that define parameters then follow.  To indicate the end of a
scan table, the $SCANTAB macro is used with a single operand of TABLE=END.
As mentioned earlier, JES2 initialisation parameters are processed using $SCAN.
The scan tables for the JES2-defined initialisation parameters are contained in
the member HASPSTAB (HASPTABS for pre-2.1.5) of SYS1.HASPSRC.  Addressability to
the scan tables in HASPSTAB is maintained via address constants contained in the
Master Control Table (MCT).  These scan table address constants are actually
address pairs.  Each address pair is made up of the address of a user scan table
and that of the JES2-supplied scan table.  The names of the user scan tables are
defined as weak external symbols so that they do not have to exist.  As the
address of a user scan table is the first in the address pair, user-defined
scans are performed before JES2-defined scans.  These user-defined scans can
therefore add or re-define existing JES2 initialisation parameters.
ADDING A NEW KEYWORD TO AN EXISTING JES2 PARAMETER
Assume that several JES2 exits have been written that provide special processing
for printers.  However, only a select few of the printers are to undergo the
special processing.  The problem is to identify the special printers to the
exits.  The printer-ids could be hard-coded in the exits but this approach
provides little flexibility if changes have to be made.  By utilising Exit 19
(Initialisation Statement Exit), the printers could be identified in the JES2
initialisation parameter list.  The exit would have to process the user
specification and then delete it so JES2 would not flag it as invalid.  This
approach, however, requires the writing of another exit program and coding of a
routine to scan the user-unique definitions.
For maximum input format flexibility in minimum programming time, the $SCAN
facility could be used to add a new keyword of SPECIAL to the PRINTERnn
statement.  The SPECIAL keyword could have valid values of ÔYESÕ or ÔNOÕ.  The
special printers could then be identified by using this new keyword on the
printer definition in the JES2 parameter list as follows:
PRINTER1     CL=ABC,
             DRAIN,
             WS=(W,R,Q,PRM,LIM/F,UCS,FCB,P),
             SPECIAL=YES,
             ROUTECDE=LOCAL
In order for the exits to identify the special printers, the $SCAN facility
could be instructed to modify the DCTUSER1 field of the Device Control Table
(DCT) for the printer.
To define the additional keyword, a user scan table is used.  The address pair
for the PRINTERnn statement is located at label MCTPRTTP in the MCT.  The
address pair contains two V-type address constants, one for USERPRTT and the
other for HASPPRTT.  The user scan table would therefore be labelled USERPRTT
and would define the new keyword for the PRINTERnn statement.  USERTABS is the
user CSECT that is used to contain the user scan tables just as JES2-defined
scan tables are contained in HASPSTAB.  The scan table, labelled USERPRTT, would
therefore be placed in USERTABS and USERTABS would be link-edited into HASJES20
to provide addressability.
Coding example 1 shows the USERPRTT scan table in the USERTABS CSECT for the new
SPECIAL operand of the PRINTERnn parameter statement.  The definition of the
keyword and action to be taken are defined by the second $SCANTAB macro.  The
new keyword, SPECIAL, is defined by specifying NAME=SPECIAL.  The data
conversion that is to be taken for the supplied values (YES or NO) is defined
with the CONV operand.  In this case CONV=FLAG indicates that the keyword value
represents a bit setting as defined by the VALUE operand.  When CONV=FLAG is
specified, VALUE must contain a list of parameters that are grouped in threes.
In the coding example, ÔYES,80,FFÕ is one group and ÔNO,0,FF-80Õ is the other.
Each group contains a valid keyword value, an ÔORÕ value, and an ÔANDÕ value.
If the keyword value is present, the ÔORÕ value is ORed with the field and the
ÔANDÕ value is ANDed with the field.  $SCANÕs support of both OR and AND
operations allow bit flags to be manipulated.  The target field, DCTUSER1, is
identified by the FIELD operand.  In order to address the DCTUSER1 field, $SCAN
must be given the name of the control block (DSECT) that contains the field.
The DSECT operand serves this purpose.  In this example, the DCTUSER1 field
would be affected as follows:
   IF SPECIAL=YES then  OI  DCTUSER1,X'80'   set flag on
                        NI  DCTUSER1,X'FF'   set no flags off

   IF SPECIAL=NO  then  OI  DCTUSER1,X'00'   set no flags on
                        NI  DCTUSER1,X'7F'   set flag off
One $SCANTAB macro (excluding the start and end $SCANTAB macros) provides total
parsing services for the new SPECIAL keyword and nothing else is required.  By
simply assembling and linking USERTABS into HASJES20, JES2 will do the rest.
Note that not a single line of executable code had to be written to support the
new keyword.  The special processing exits mentioned in the example would simply
check the value of the DCTUSER1 field to determine the value specified for
ÔSPECIALÕ.
CODING EXAMPLE 1
* THIS MODULE DEMONSTRATES THE USE OF THE $SCANTAB MACRO TO ADD AN
* ADDITIONAL KEYWORD TO AN EXISTING JES2 PARAMETER.
         COPY $HASPGBL
USERTABS $MODULE NOTICE=SP215, etc   etc                               X
USERTABS CSECT
* - THIS CSECT IS ASSEMBLED AND LINK-EDITED INTO MODULE HASJES20
* - ADD 'SPECIAL=' KEYWORD TO PRINTERNN PARAMETER STATEMENT
* - EXIT CODE CAN CHECK FOR 'SPECIAL=YES' BY USING:
*        TM   DCTUSER1,X'80'          WAS SPECIAL=YES SPECIFIED ?
USERPRTT $SCANTAB TABLE=USER          START OF SCAN TABLE
         $SCANTAB NAME=SPECIAL,CONV=FLAG,CB=PARENT,DSECT=DCT,          X
               FIELD=DCTUSER1,                                         X
               VALUE=(YES,80,FF,NO,0,FF-80)
         $SCANTAB TABLE=END          END OF SCAN TABLE
         $MODEND
         END
CREATING AN INSTALLATION-DEFINED JES2 PARAMETER
The USERPRTT scan table defined for the keyword ÔSPECIALÕ is actually a
secondary table.  The primary scan table for the PRINTERnn parameter is found at
label PRINTR in HASPSTAB.  This primary scan table points to the address pair at
label MCTPRTTP in the MCT to address the secondary scan tables.  The secondary
scan tables, USERPRTT (defined in USERTABS) and HASPPRTT (defined in HASPSTAB),
describe the valid keywords for the parameter defined by the primary table.  In
order to create an entirely new parameter, both primary and secondary scan
tables must be defined.  This technique is detailed next.
At label MCTMPSTP in the MCT is an address pair that contains V-type address
constants for symbols USERMPST and HASPMPST.  These two symbols are the names of
the Main Parameter Statement primary scan tables.  USERMPST is used to address a
user primary scan table.  By using this new primary scan table with associated
user secondary tables, a new initialisation parameter can be created.
Addressability between the user primary and secondary scan tables is achieved
via a user-defined address pair.  The user-defined address pair must be placed
in HASJES20 addressable storage so the User Control Table (UCT) CSECT, USERCT,
is used.  For example purposes, the parameter will be defined as:
     NEWPARM KEY1=x,KEY2=yyy
where x is a single character and yyy is any number between 1 and 100.
In coding example 2, the $SCANTAB macros required to define the new parameter
are shown.  The primary scan table, USERMPST, defines the parameter as NEWPARM.
CONV=SUBSCAN indicates that secondary scan tables exist that describe the
keywords of the parameter.  The address of the secondary scan table is obtained
from the address pair at label NEWPARMA in the UCT and the SCANTAB operand in
the primary scan table provides this information.
In the secondary scan tables, the keywords KEY1 and KEY2 are defined and a field
in the UCT is defined as the target for each incoming value.  The value for KEY1
is defined as being an alphanumeric character (CONV=CHARAN) of length one
(RANGE=(1,1)).  The value of KEY2 is defined as being numerical (CONV=NUM)
within a range of 1 to 100 (RANGE=(1,100)).  CONV=NUM also performs conversion
so that the numerical value is stored in binary.  Note that when CONV=CHAR is
used, RANGE indicates the number of characters that can be specified but when
CONV=NUM is used, RANGE specifies the valid numerical range.  As defined by the
scan tables, the value specifed for KEY1 will be moved into field UCTWORK1.  The
value specified for KEY2 will be converted to binary and stored in field
UCTWORK2.  The DSECT UCT identifies the DSECT that is required to address the
UCTWORK1 and UCTWORK2 fields.  This DSECT would be created by the installation
and maps the fields in USERCT (UCT).
In some cases data movement and conversion requirements may exceed the
capabilities of $SCAN.  Realising this, IBM has implemented the $SCAN facility
with a means of invoking optional ÔpreÕ and ÔpostÕ $SCAN routines.  In this
example, a post $SCAN routine is used to move the scanned values into a table in
the UCT.  The entry point of the post routine is identified in the primary scan
table with the PSTSCAN operand.  The post routine, POSTSCAN, is contained in
USERTABS and simply takes the values that were placed in the UCTWORK1 and
UCTWORK2 fields by $SCAN and moves them into a table area.  If the pre $SCAN
routine is to be used, the PRESCAN operand of the $SCANTAB macro is used.  Pre-
scan routines receive control just after $SCAN has recognised the defined
keyword.  Post-scan routines receive control after scanning is complete.
CODING EXAMPLE 2
* THIS MODULE DEMONSTRATES THE USE OF THE $SCANTAB MACRO TO ADD A
* NEW INITIALISATION PARAMETER
         COPY $HASPGBL
USERTABS $MODULE NOTICE=SP215, etc  etc                                X
USERTABS CSECT
* - THIS CSECT IS ASSEMBLED AND LINK-EDITED INTO MODULE HASJES20
* - CREATE A NEW PARAMETER STATEMENT OF 'NEWPARM'
* - VALID SYNTAX IS 'NEWPARM KEY1=X,KEY2=YYY' WHERE X IS ANY
*   CHARACTER AND YYY IS A NUMBER BETWEEN 1 AND 100
USERMPST $SCANTAB TABLE=USER           START OF SCAN TABLE
         $SCANTAB NAME=NEWPARM,CB=UCT,CONV=SUBSCAN,                    X
               SCANTAB=(NEWPARMA,UCT),PSTSCAN=POSTSCAN
         $SCANTAB TABLE=END            END OF SCAN TABLE
NEWPARMT $SCANTAB TABLE=USER           START OF SCAN TABLE
         $SCANTAB NAME=KEY1,CB=UCT,DSECT=UCT,FIELD=(UCTWORK1,1),       X
               RANGE=(1,1),CONV=CHARAN
         $SCANTAB NAME=KEY2,CB=UCT,DSECT=UCT,FIELD=(UCTWORK2,1),       X
               RANGE=(1,100),CONV=NUM
         $SCANTAB TABLE=END            END OF SCAN TABLE
POSTSCAN $ENTRY CSECT=YES
         $SAVE
         LR    R8,R15             SETUP ADDRESSABILITY
         L     R2,$UCT            GET UCT POINTER
         USING UCT,R2   ----> CREATE A DSECT FOR THE LAYOUT OF USERCT
         CLI   UCTWORK1,C' '      KEY1 SPECIFIED ?
         BE    RSTRET4            NO...THEN PARM ERROR
         CLI   UCTWORK2,X'00'     KEY2 SPECIFIED ?
         BE    RSTRET4            NO...THEN PARM ERROR
         L     R5,NEXTPARM        GET PARM TABLE OFFSET
         C     R5,=F'20'          AT MAX ?
         BH    RET4               YES...THEN PARM ERROR
         LA    R4,PARMTAB(R5)     ADDRESS PARM TABLE ENTRY
         MVC   0(1,R4),UCTWORK1   MOVE IN KEY1 VALUE
         MVC   1(1,R4),UCTWORK2   MOVE IN KEY2 VALUE
         A     R5,=F'2'           ADDRESS NEXT AVAILABLE
         ST    R5,NEXTPARM        AND SAVE INDEX
RET0     SLR   R15,R15            SET RETURN CODE
         B     RETURN             .   AND RETURN
RET4     L     R15,=F'4'          SET RETURN CODE
RETURN   MVI   UCTWORK1,C' '      CLEAR FOR NEXT TIME
         MVI   UCTWORK2,X'00'     CLEAR FOR NEXT TIME
         $RETURN RC=(R15)
         LTORG
         $MODEND
         END
USERCT   CSECT
* - THIS CSECT IS ASSEMBLED AND LINK-EDITED INTO MODULE HASJES20
         DS    0D
NEWPARMA DC    V(NEWPARMT),A(0)    NEWPARM USER/HASP SCAN TABLE ADDR
PARMTAB  DC    10CL2               ROOM FOR 10 NEWPARM VALUES
NEXTPARM DC    F'0'                POINTER TO NEXT AVAILABLE PARMTAB
UCTWORK1 DC    C' '                TARGET FIELD FOR $SCAN
UCTWORK2 DC    X'00'               TARGET FIELD FOR $SCAN
         END
SCANNING OTHER INPUT TEXT
Up until now the CB keyword on the $SCANTAB macro (used in both previous
examples) has not been mentioned.  This operand identifies one of the
ÔprimitiveÕ control blocks that are known to the $SCAN facility.  The $SCAN
facility knows only of the HCT, DCT, active PCE, and the UCT control blocks.
The target fields in both previous examples were in one of the ÔprimitiveÕ
control blocks.  If keyword values are to be moved into a control block other
than the ones just listed, the target control block must be addressable via one
of the ÔprimitiveÕ control blocks.  This next example shows one technique in
which a Ônon-primitiveÕ control block can be addressed and used by $SCAN.
In the previous examples, parameters contained in the JES2 parameter list were
being scanned and only $SCANTAB macros were required.  This was because JES2
initiated the scan when an initialisation parameter was read and the $SCAN
processing used the address pairs to access the scan tables.  To scan other
input, the scan must be initiated by user-written code.  To initiate a scan the
$SCAN macro is used.  The $SCAN macro is provided with the address and length of
the text to be scanned along with the address of the address pair that
references the associated scan tables.
The input being scanned in coding example 3 is a JES2 control card (invented for
demonstration purposes) that is presented to JES2 Exit 4 (JCL and JES2 Control
Statement Scan Exit).  This example could have just as easily been the scanning
of a JES2 command presented to Exit 5 (Command Pre-processor Exit).  This
example attempts to demonstrate the amount of syntax flexibility that can be
defined using $SCAN.  The control card that will be scanned has the following
basic format:
/*CONTROL NAME=(name1,name2,name3,name4),USE=yyy
where up to four names may be specified in a list and yyy may be specified as
ALL or ANY.  The scan tables will be defined so as to allow the following
variations in format:
¥    LIST may be specified in place of NAME
¥    USE may also be specified as U or US.
Once the user exit has addressed and identified the control card, its text is
ready to be scanned.  In this example, the text that immediately follows
/*CONTROL is scanned using $SCAN.  To initiate the scan the $SCAN macro is used.
The macro is supplied with the address of the address pair for the primary scan
table (TABLES= TABADDR), the address of the text (PARM=(R7)), and the length of
the text (PARMLEN=63).  The address pair, at label TABADDR, addresses the user
scan table PRIMTAB.
The first keyword defined in the PRIMTAB scan table is USE.  The MINLEN
specification defines the minimum character length of the keyword that is
required.  The USE abbreviations of U and US were defined by specifying MINLEN=1
(only the first character is required).
As with SPECIAL in coding example 1, the values for USE are flag settings.  In
this case, however, the target field (JCTUSER9 of the JCT) is not contained in a
ÔprimitiveÕ control block.  As the JCT is not a $SCAN ÔprimitiveÕ control block,
addressability must be provided.  To do this, $SCAN must be instructed how to
obtain the address of the Ônon-primitiveÕ control block.  In the coding example,
the address of the JCT was placed in the PCEUSER0 field of the PCE just prior to
issuing the $SCAN macro.  As a result, the address of the Ônon-primitiveÕ JCT
control block is contained in the ÔprimitiveÕ PCE control block.  The scan table
instructs the $SCAN facility to load the address of the JCT from field PCEUSER0
in the PCE.  The instructions for indirect addressing are given in the form
CBIND=(PCEUSER0,PCE,L) where L indicates the load operation.  Many levels of
operation may be specified, in threes, for the CBIND operand.  Besides load (L);
load address, add, and subtract operations can be requested.  Note that the CB
operand identifies the ÔprimitiveÕ control block, but the DSECT operand is for
the Ônon-primitiveÕ control block that contains the target field.
Next in the PRIMTAB scan table, the alternative keyword LIST is defined.  The
$SCANTAB macro simply indicates that LIST is an alias (CONV=ALIAS) and the
SCANTAB operand provides the address of the scan table entry that defines the
NAME keyword.  Hence, NAME or LIST may be used interchangeably on the control
card.
The values that may be specified for NAME are in the form of a list or vector
with a maximum of four elements.  In order to scan the vector, an additional
level of scanning is required.  To do this, the $SCANTAB macro that defines the
NAME keyword specifies CONV=VECTOR.  To address the next level of scan tables,
the SCANTAB operand identifies the address of an address pair and the control
block in which the pair resides.  The address pair must be addressable to $SCAN
via one of $SCANÕs ÔprimitiveÕ control blocks and therefore is placed in the
UCT.  Likewise, the secondary scan table is placed in USERTABS to provide the
$SCAN facility with addressability.
The secondary scan table, NAMESCAN, specifies the maximum number of items in the
list as four with VCOUNT=4.  Each name is defined as containing alphanumeric
characters (CONV=CHARAN) with a length from one to eight (RANGE=(1-8)).  FIELD=
(JCTUSER0,8) specifies that each name will be placed in the next available eight
bytes of storage starting at field JCTUSER0.  The NAMESCAN scan table uses the
same technique to address the JCT as described for the USE keyword.
The complete scanning of the /*CONTROL card text is initiated by the single
$SCAN macro.  The success of the scanning is indicated by the return code placed
in register 15 by $SCAN services (see JES2 User Modifications and Macros manual
for a list of return codes).  The exit can examine the return code and the
target fields to determine what information was supplied and then take the
appropriate action.
CODING EXAMPLE 3
* THIS PROGRAM DEMONSTRATES THE USE OF THE $SCAN AND $SCANTAB MACROS
* TO PARSE A JES2 CONTROL CARD.  THIS PROGRAM IS INCOMPLETE AND IS
* FOR DEMONSTRATION PURPOSES ONLY.
*** J E S 2   E X I T    4 ***
         COPY  $HASPGBL           COPY HASPGBL PARAMETERS
JESEXIT4 $MODULE NOTICE=SP215, etc  etc                                X
EXIT4    $ENTRY CSECT=YES
         USING  PCE,R13
         $SAVE
         LR    R8,R15             SETUP ADDRESSABILITY
         LTR   R0,R0              JES2 CONTROL CARD ?
         BNZ   RETURN0            NO...RETURN
         LR    R6,R1              SAVE PARM
         USING JCT,R10
         LTR   R10,R10            JCT SETUP ?
         BZ    RETURN12           NO...CANCEL JOB
         L     R7,0(,R6)          ADDRESS JES2 CONTROL STATEMENT
         CLC   0(9,R7),=C'/*CONTROL' IS IT A /*CONTROL CARD ?
         BNE   RETURN0            NO...JUST RETURN
* VALID FORMATS OF THE /*CONTROL STATEMENT:
* /*CONTROL NAME=XXXX,USE=YYY
* /*CONTROL NAME=(XXXX, ... ,XXXX),USE=YYY
*   OR
* /*CONTROL LIST=XXXX,USE=YYY
* /*CONTROL LIST=(XXXX, ... ,XXXX),USE=YYY
* 'USE=' MAY SPECIFY A VALUE OF 'ANY' OR 'ALL'
*  A MAXIMUM OF FOUR (4), EIGHT (8) CHARACTER NAMES MAY BE SPECIFIED
         LA    R7,9(,R7)          SKIP OVER /*CONTROL
         ST    R10,PCEUSER0       PUT JCT ADDRESS IN PCE FIELD PCEUSER0
         MVC   JCTUSER0(32),=32C' ' CLEAR $SCAN NAME= TARGET FIELD
         MVI   JCTUSER8,X'00'     CLEAR $SCAN USE= TARGET FIELD
         $SCAN SCAN=SET,TABLES=TABADDR,PARM=(R7),PARMLEN=63
         LTR   R15,R15            SCAN COMPLETE OK ?
         BNZ   INVALID            NO...THEN SOME PROBLEM
* PROCESS VALUES IN JCTUSER FIELDS HERE
* THE FOUR (MAX.) NAME VALUES WILL BE CONTAINED IN THE 32 BYTES OF
* STORAGE ADDRESSED BY JCTUSER0.  IF 'USE=ALL' WAS SPECIFIED, THE FIRST
* BYTE OF JCTUSER8 WILL BE X'80'
         CLC   JCTUSER0(8),=CL8' '  WAS ANY NAME SPECIFIED ?
         BE                         NO...
***********************************************************************
TABADDR  DC    A(PRIMTAB),A(0)   USER/HASP TABLE PAIR
PRIMTAB  $SCANTAB TABLE=USER      START OF SCAN TABLE
         $SCANTAB NAME=USE,CONV=FLAG,CB=PCE,DSECT=JCT,MINLEN=1,        X
               FIELD=JCTUSER9,CBIND=(PCEUSER0,PCE,L),                  X
               VALUE=(ALL,80,FF,ANY,0,FF-80)
         $SCANTAB NAME=LIST,CONV=ALIAS,SCANTAB=NICKNAME
NICKNAME $SCANTAB NAME=NAME,CONV=VECTOR,SCANTAB=(CNTLA,UCT)
         $SCANTAB TABLE=END       END OF SCAN TABLE
         $MODEND ,
         END
*** C S E C T   U S E R T A B S ***
         COPY $HASPGBL
USERTABS $MODULE NOTICE=SP215, etc  etc                                X
USERTABS CSECT
* - THIS CSECT IS ASSEMBLED AND LINK-EDITED INTO MODULE HASJES20
NAMESCAN $SCANTAB TABLE=USER      START OF SCAN TABLE
         $SCANTAB NAME=NAME,CB=PCE,DSECT=JCT,CBIND=(PCEUSER0,PCE,L),   X
                CONV=(CHARAN),RANGE=(1,8),VCOUNT=4,                    X
                FIELD=(JCTUSER0,8)
         $SCANTAB TABLE=END       END OF SCAN TABLE
         $MODEND
         END
*** C S E C T   U S E R C T ***
USERCT   CSECT
* - THIS CSECT IS ASSEMBLED AND LINK-EDITED INTO MODULE HASJES20
         DS    0D
CNTLA    DC    V(NAMESCAN),A(0) CONTROL CARD USER/HASP SCAN TABLE ADDR
         END
SUMMARY
These three examples should have provided some insight into the power of the
$SCAN facility.  The ease of use, the extended syntax flexibility, and the data
movement and conversion features all combine to make the $SCAN facility very
attractive.  As IBM supplies JES2 source code, the hundreds of scan tables
defined in JES2, can be used as examples on how to code $SCANTAB macros for even
the most complex parameters.
The $SCAN facility lets JES2 systems programmers increase their productivity by
removing the burden of writing parsing routines.  Quite simply, if youÕre not

taking advantage of JES2Õs $SCAN facility, youÕre spending too much time,
writing too much code.

Scott Dimond
MVS Systems Programmer (Canada)    © Xephon 1988





























































