Year 2000 testing

THE OPERATOR INTERFACE ROUTINE

         TITLE 'MOD2000 - INITIALIZATION'
* The purpose of this module is to front-end SVC 11 in order to provide
* a means of convincing a running program that the date is other than
* the one which is held by the system, while at the same time allowing
* other address spaces to continue unaffected by the modification.
* The module also provides an operator interface to permit dynamic
* modification of the date being used and to allow the addition and
* removal of address spaces being monitored.
* In order to use this code the module must be linked AC(1) and placed
* in an authorized library. It is also recommended that the module is
* marked non cancellable in the PPT and run with TIME=1440 so that SVC11
* cannot be permanently relocated because of an accidental cancel or
* because of an S522 abend.
* Should this be forgotten and SVC 11 gets 'lost' then execute TSO
* command MOD2000R as this should reset SVC 11 safely.
* AVAILABLE COMMANDS:-
* ADD=jobname .... include the following jobname in date alterations
* DEL=jobname .... remove the following jobname from date alterations.
* TIME=yyyyddd ... numeric date (note validation is performed).
* TERM ........... remove SVC11 front end and terminate this program.
MOD2000  AMODE 31
MOD2000  CSECT
         BAKR  14,0
SVCTIME  EQU   11
SVCFREE  EQU   240
* Locate  SVC TABLE and point register 8 to it.
         LR    R12,R15
         USING MOD2000,12
         LA    R1,0                  * POINT TO PSA
         USING PSA,R1                * MAP PSA
         L     R1,FLCCVT             * POINT TO CVT
         USING CVT,R1                * MAP CVT
         L     R1,CVTABEND           * POINT TO SCVT
         USING SCVTSECT,R1           * MAP SCVT
         L     R8,SCVTSVCT           * POINT TO SVC TABLE
* Now load in the SVC front end routine
* Note that the module is loaded into fixed CSA storage.
* In order to do this, enter supervisor state before issuing the load
         TITLE 'LOAD CSA CODE'
         MODESET MODE=SUP,KEY=ZERO   * GET INTO SUPERVISOR STATE
         LOAD EP=MOD20001,GLOBAL=(YES,F),EOM=YES,LOADPT=LOADPT
         LR    R2,R0       R2 CONTAINS ADDRESS OF NEW SVC.
         LA    R3,(SVCTIME*8)(,R8)   * POINT TO SVC 11 POSITION IN TABLE
         L     R4,0(R3)              * GET R11 ADDRESS
         MVC   SVC11(8),0(R3)        * SAVE CONTENTS OF SVC TABLE ENTRY
* Now ENQ around the svctable update to ensure integrity
         LA    R8,MAJENQ             *
         LA    R9,MINENQ             * FORCE SERIALIZATION
         ENQ   ((8),(9),E,8,SYSTEM)
* Now replace the time SVC with the new routine and transfer the old
* time SVC to an unused entry
         SVCUPDTE SVCFREE,REPLACE,TYPE=4,EP=(4) * RELOCATE 11
         SVCUPDTE SVCTIME,REPLACE,TYPE=4,EP=(2) * PLACE NEW 11
         LA    R8,MAJENQ
         LA    R9,MINENQ             * FORCE SERIALIZATION
         DEQ   ((8),(9),8,SYSTEM)    * DEQUEUE ROUTINE
* Inform operator that the system is activated.
         WTO   'TIME UPDATED '
* Now provide the operator interface. This takes the simple form of
* leaving an outstanding message on the console which can be replied to.
ISSCOM   DS    0H
         MVC   REPLY,BLANKS          * ENSURE REPLY FIELD CLEAR
         XC    REPECB,REPECB
         WTOR  'ENTER COMMAND',REPLY,20,REPECB
         WAIT  ECB=REPECB
REPROUT  DS    0H
* Address the jobtable with register 5.
* Address the time filed with register 7.
* Keep the available table size in register 6.
* Note that at the load point of mod20001 there are two addresses.
* The first is the address of the time field in the SVC11 routine
* while the second is the address of the jobtable in the SVC11 routine.
* Note that the size of the table should be matched to the value in R6
* but it is not essential. In case of mismatch the end of table marker
* in MOD20001 (ie 8 %s) will be detected and storage protection
* is thus provided.
         LA    R6,6                  * EQUIVALENT TO SVC ENTRY
         L     R5,LOADPT
         L     R7,0(R5)              * ADDRESS TIME FIELD
         LA    R5,4(,R5)             * BUT 5 UP BY 4
         L     R5,0(R5)              * GET ADDRESS OF JOBTAB
         OC    REPLY,BLANKS          * ENSURE COMMAND BLANK FILLED
         CLC   REPLY(4),TERM         * WAS TERMINATE ENTERED
         BE    ENDPROG
         CLC   REPLY(4),ADDCOM       * WAS IT AN ADD COMMAND?
         BE    DOADD                 *
         CLC   REPLY(4),DELCOM       * WAS IT A DELETE?
         BE    DODEL                 *
         CLC   REPLY(5),TIMECOM      * IS IT NEW TIME?
         BE    DOTIME                *
         WTO   'UNKNOWN COMMAND PLEASE TRY AGAIN' * ISSUE MESSAGE.
         B     ISSCOM
* Having reached here a new address space is to be included.
* Ensure that space in the table exists and then add it.
DOADD    DS    0H
         CLC   0(8,R5),BLANKS        * IS THE ENTRY USED?
         BE    DOADD1                * NO SO PLACE NEW PROGRAM NAME
         LA    R5,8(,R5)             * INCREMENT TABLE SEARCH
         BCT   R6,DOADD              * KEEP LOOKING
DOADD1   DS    0H
         CLC   0(8,R5),PERCENT       * IS IT TABLE END?
         BNE   DOADD2                * NO ITS A SPARE ENTRY
         WTO   'FULL JOB TABLE, ISSUE DELETE FIRST'
         B     ISSCOM
DOADD2   DS    0H
         MVC   0(8,R5),REPLY+4       * PLACE NAME IN
         B     ISSCOM
DODEL    DS    0H
         CLC   0(8,R5),REPLY+4       * PROGRAM FOUND?
         BE    DODEL1                * YES SO REMOVE
         LA    R5,8(,R5)
         BCT   R6,DODEL
         WTO   'PROGRAM NOT IN TABLE'
         B     ISSCOM
DODEL1   DS    0H
         CLC   0(8,R5),PERCENT       * MAKE SURE NOT MESSING WITH
         BNE   DODEL2                * TABLE END
         WTO   'MUST NOT DELETE TABLE END MARKER'
         B     ISSCOM
DODEL2   DS    0H
         MVC   0(8,R5),BLANKS
         B     ISSCOM
DOTIME   DS    0H
* Need to be sure the date is valid. To do this we move the zones
* of the input time into a low values area. If it ends up as character
* zeroes, then it must be numeric (ie can't type in x'FA' to x'FF').
* We then pack the date and check that it is in the range 1900001 to
* 2000366. Note that no attempt is made to validate for leap years
* as this loophole can prove useful.
         MVC   CHARTIME,REPLY+5     * STORE TIME FOR PACKING.
         XC    NUMFIELD,NUMFIELD    * ZERO NUMFIELD
         MVZ   NUMFIELD,CHARTIME    * CHECK FOR HIGH NIBBLE F
         CLC   NUMFIELD,ZEROS       * IF NOT ZERO THEN VALUE INCORRECT
         BNE   NOTADATE
         PACK  PDATE,CHARTIME       *
         CLI   PDATE,X'20'          * SUPPORT 2000 DATES
         BH    NOTADATE
         CLI   PDATE,X'19'          * SUPPORT 1900 DATES
         BL    NOTADATE
         CP    PDATE+2(2),=PL2'000' * CHECK FOR ZERO DATE
         BE    NOTADATE
         CP    PDATE+2(2),=PL2'366' * AND UP TO DAY 366
         BH    NOTADATE
         CLI   REPLY+5,C'2'         * YEAR 2000 REQUIRED?
         BNE   OLDTIME              * NO SO SET 0 CENTURY
         MVI   PDATE,X'01'          * SET CENTURY INDICATOR
         B     UPDTIME
OLDTIME  DS    0H
         MVI   PDATE,X'00'          *
UPDTIME  DS    0H
         MVC   0(4,R7),PDATE        * TRANSFER DATE TO SVC ROUTINE
         B     ISSCOM
NOTADATE DS    0H
         WTO   'INVALID DATE SUPPLIED'
         B     ISSCOM
* TERM has been entered. Drop the SVC front-end and end this program
ENDPROG  DS    0H
         LA    R8,MAJENQ            *
         LA    R9,MINENQ            * FORCE SERIALIZATION
         ENQ   ((8),(9),E,8,SYSTEM) *
         L     R5,SVC11             * RESET R5 READY FOR SVC 11 RESET
         SVCUPDTE SVCTIME,REPLACE,TYPE=4,EP=(5)
         LA    R8,MAJENQ
         LA    R9,MINENQ            * FORCE SERIALIZATION
         DEQ   ((8),(9),8,SYSTEM)   * DEQUEUE ROUTINE
         PR                         * RETURN TO CALLER
SVC11    DC    D'0'                 * SVC 11 ADDRESS
REPECB   DC    F'0'
REPLY    DS    CL20
MAJENQ   DC    CL8'SYSZSVC'
MINENQ   DC    CL8'TABLE'
LOADPT   DS    F
CHARTIME DS    CL7
NUMFIELD DS    XL7
PDATE    DS    PL4
PERCENT  DC    8C'%'
BLANKS   DC    CL20' '
ZEROS    DC    10C'0'
TERM     DC    C'TERM'
ADDCOM   DC    C'ADD='
DELCOM   DC    C'DEL='
TIMECOM  DC    C'TIME='
         LTORG
         IHAPSA
         CVT    DSECT=YES
         IHASCVT
         END

THE SVC ROUTINE

* This module provides the front-end for SVC 11.
* For address spaces logged in its jobtable the date returned to the
* address space is as specified in NEWTIME below.
* At load time the default time is set to 3/3/1998 and no address spaces
* are being monitored.
MOD20001 AMODE 31
TIMEPT   DC    AL4(NEWTIME)         * DO NOT MOVE THESE CONSTANTS
JOBTABLE DC    AL4(JOBTAB)          * MOD2000 USES THESE TO MODIFY STORAGE
MOD20001 CSECT
* ON ENTRY TO AN SVC R6 POINTS TO MODULE START
* AND R4 POINTS TO THE CURRENT TCB
         USING *,6
         USING TCB,4
* REMEMBER TO ENSURE THAT SVC 240 IS THE SVC BEING USED FOR TIME
* RELOCATION
         SVC   240                  * SHOULD BE OK FOR TIME
         L     5,TCBTIO             * GET ADDRESS OF TIOT AND THEREFORE
*                                   * ADDRESS OF JOBNAME
         LA    10,JOBTAB            * ADDRESS JOBTABLE
         LA    11,TABSIZE           * CREATE A COUNTER
JOBCHK   DS    0H
         CLC   0(8,5),0(10)         * CHECK FOR JOB
         BE    TIMEALT
         LA    10,8(,10)            * NEXT ENTRY
         BCT   11,JOBCHK
         B     GOOUT
TIMEALT  DS    0H
         L     1,NEWTIME
GOOUT    DS    0H
         SVC   03                   * use the exit SVC for cleanup
         LTORG
         DS    0D
NEWTIME  DC    X'0098034F'
JOBTAB   DS    0F
TABSIZE  EQU   6
         DC    CL(TABSIZE*8)' '
         DC    C'%%%%%%%%'          * END OF TABLE MARKER
         IKJTCB
         END

THE TSO COMMAND FOR RESETTING SVC 11 IN AN
EMERGENCY

         TITLE 'MOD2000R - INITIALIZATION'
MOD2000R AMODE 31
MOD2000R CSECT
         BAKR  14,0
* LOCATE SVC TABLE AND POINT
         LR    R12,R15
         USING MOD2000R,12
         LA    R1,0                 * POINT TO PSA
         USING PSA,R1               * MAP PSA
         L     R1,FLCCVT            * POINT TO CVT
         USING CVT,R1               * MAP CVT
         L     R1,CVTABEND          * POINT TO SCVT
         USING SCVTSECT,R1          * MAP SCVT
         L     R8,SCVTSVCT          * POINT TO SVC TABLE
         SVC   235                  * GET INTO AUTHORIZED STATE
* note - use your own authorization SVC here
         MODESET MODE=SUP,KEY=ZERO  * GET INTO SUPERVISOR STATE
         LA    R3,(240*8)(,R8)      * POINT TO SVC 240 POSITION IN TABLE
         L     R4,0(R3)             * GET R11 ADDRESS
         LA    R8,MAJENQ            *
         LA    R9,MINENQ            * FORCE SERIALIZATION
         ENQ   ((8),(9),E,8,SYSTEM) *
         SVCUPDTE 11,REPLACE,TYPE=4,EP=(4) * RELOCATE 11
         DEQ   ((8),(9),8,SYSTEM)   * DEQUEUE ROUTINE
* note - use own de-authorization here to avoid subsequent S306 abends.
         SVC 236                    * GET BACK TO NORMAL STATE
         TPUT MESS,30               * ISSUE MESSAGE TO USER
         PR                         * AND RETURN TO CALLER
MESS     DC    CL30'SVC RESET'
MAJENQ   DC    CL8'SYSZSVC'
MINENQ   DC    CL8'TABLE'
         LTORG
         IHAPSA
         CVT    DSECT=YES
         IHASCVT
         END


                                                                              c Xephon 1995

