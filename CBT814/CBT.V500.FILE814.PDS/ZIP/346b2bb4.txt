Using ALTLIB and LIBDEF for ISPF
applications

The problem

Many MVS sites make extensive use of ISPF/PDF and have
many  applications running under ISPF. Most utilities have ISPF
interfaces these days. This is convenient for the user but can lead
to maintenance difficulties. TSO log-on procedures can rapidly
become overrun with ISPF datasets or you can have datasets with
panels etc for more than one application: very awkward when it
comes to updating that application.

Testing new releases of software can also be awkward. If one has
access to the log-on procedures it is possible to change the
libraries around to your heart's content, but access to procedure
libraries represents a security risk and is tightly controlled at most
sites.

It has always been possible to free the various ISPF datasets and
re-allocate alternative ones, but this is not terribly convenient and
cannot be used for the SYSPROC concatenation - ALTLIB and
LIBDEF to the rescue.

ALTLIB

This is a TSO instruction which can be used to add a CLIST or
REXX library dynamically. It may go on the normal
SYSPROC/SYSEXEC concatenation or, more usefully, as an
application library which will be searched for any CLIST or
EXEC before the normal concatenation. That is, it may be
allocated for the duration of a specific ISPF application and, once
that application is finished, it is released, returning to the normal
search order. Multiple datasets may be allocated, if desired.

LIBDEF

LIBDEF is an ISPF command, executed via ISPEXEC. This is
similar in principle to ALTLIB but is used for ISPxLIB datasets.
Allocated datasets may be specifically freed - also with the
LIBDEF command - or can be allocated for the duration of an
application. They are searched ahead of the normal concatenation,
not instead of it, so basic facilities remain available.

Invoking applications

Using LIBDEF and ALTLIB it is possible to cut log-on
procedures to the bone. When someone wants to invoke an
application they simply execute a CLIST. This will allocate all of
the datasets necessary to the application and then invoke the
program (or whatever). If you want to test a new version, it is a
simple matter to change the initial CLIST to allocate a different set
of libraries. It is even possible to have different users running
different versions of software, especially useful when rolling out a
new version.

ISPLLIB

LIBDEF can be used for the ISPLLIB, but this requires
additional consideration. The ISPLLIB acts as a task library and
so a normal LOAD, for example, will search it before the
STEPLIB, JOBLIB, or LINKLIST. However, if that task
ATTACHes another, the subtask will not use the ISPLLIB. This
is not often a problem but you should be aware of it. Also, there is
a performance overhead when using any task library whenever
you want to get at a program which is somewhere else, as the task
library must be searched first. However, the usual reason for using
LIBDEFs for ISPLLIB is when testing new software to avoid
having to update procedure libraries - so performance is probably
not a primary consideration.

Example

A menu panel could include an option such as:

      A,'CMD(APPLLIBS) NEWAPPL(ABCD)'

executing a CLIST:

PROC 0
 IF &SYSUID = USER1 THEN GOTO VERSION2
VERSION1: +
 ISPEXEC SELECT PANEL(APPLMENU)
 EXIT
VERSION2: +
 ISPEXEC LIBDEF ISPLLIB DATASET ID('LOADV2')
 ISPEXEC LIBDEF ISPPLIB DATASET ID(TEST.PLIB,'PLIBV2'
 ALTLIB ACT APPLICATION(CLIST) DATASET('CLIBV2')
 ISPEXEC SELECT PANEL(APPLMENU)

CONCLUSION

It is now the standard at my site to use LIBDEF and ALTLIB for
all ISPF applications. Some third-party software comes with
examples using this. I have written my own CLISTs for several
popular products, including FILE-AID (later releases provide
suitable CLISTs in the installation materials) and DB2I. It doesn't
solve every problem, but is has certainly made life a lot simpler.

Simon Green
Systems Programmer (UK)                                         c Xephon 1994

