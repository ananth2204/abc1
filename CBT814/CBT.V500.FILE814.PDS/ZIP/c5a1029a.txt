Record-oriented REXX - creating records

Problem addressed

Last month we looked at the RXRECORD subcommand used to
create a COBOL-like record definition. The PUTREC function
uses this record definition to create such records (stem variables)
using data from the corresponding field variables. The records can
be subsequently written to a file using the EXECIO command or
processed in some other way.

The related function, GETREC, decomposes a record into its
constituent variables. This will be the subject of a future article.

Solution

PUTREC reads the record definition created by RXRECORD.
The recname parameter in the PUTREC function call specifies
the name of the stem variable that contains the record definition
(eg recname.0.i, where i denotes the field number) and the records
to be created (eg recname.j, where j denotes the record number).
The recname.0 variable must be set to contain the number of
records to be created. The varname entries in the record
definition specify the names of the corresponding stem variables
that supply the data to be set into the record, unless the definition
contains the VALUE clause, in which case the specified value is
used. A default value (0 for numeric fields, blank for alphanumeric
fields) is used for fields that have no corresponding data value.

PUTREC sets an ESPIE exit to trap potential program exceptions
caused by incorrect data (for example, non-numeric data in a
numeric field). The PUTREC function returns -4 as function value
if a program exception is signalled.

Figure 1 illustrates the processing performed. The matrix (record
1, record 2, etc) represents the data values used to create the
record.












Invocation
The function is invoked like this:

      functionvalue = PUTREC(recname)

where functionvalue is a numeric value indicating the processing
status. These values are:

0      OK (successful processing).

-1      Record name missing.

-2      recname.0 missing.

-3      recname.0 zero.

-4      Data error (caused 0C4, 0C7).

-5      RFD table overflow (too many record field descriptors). The
      NRFD program constant (currently 100) contains the
      maximum number of record field descriptors (RFDs). This
      constant (EQU) can be increased if necessary.

recname is the name of the stem variable that contains the record
descriptor (created by RXRECORD), which is to contain the
created records. recname.0 must have been set to contain the
number of records to be created. The records are named
recname.1, recname.2, etc.

The individual record field descriptors are stored as stem variables
(ie recname.0.i, where i is a value between 1 and the number of
fields in the record.

data values

The record field descriptors have the (Assembler) format:

LINE     DSECT
LVL      DS    CL2,C                             level
VARNAME  DS    CL32,C                            field name
PICT     DS    CL1,C          field type (numeric or alphanumeric)
#PICT9   EQU   1
#PICTS   EQU   2
#PICTX   EQU   4
LEN      DS    CL5,C    field length in record (no of digits/bytes)
TYPE     DS    CL1,C    stored field type
#BINARY  EQU   C'1'          BINARY, COMP, COMPUTATIONAL
#PACKED  EQU   C'2'          PACKED-DECIMAL, COMP-3, COMPUTATIONAL-3
#DISPLAY EQU   C'3'          DISPLAY
VALLEN   DS    CL3,C         length of default value
VAL      DS    CL160         default value

VARNAME in the record descriptor specifies the stem name of
the corresponding variable (eg the VARNAME alpha specifies
that the stem variables alpha.1, alpha.2, etc supply the column data
values for record 1, record 2, etc).

PICT specifies the field type (ie numeric or alphanumeric).
Numeric fields are stored right-justified, and may be prefixed by a
minus sign (eg -123). Alphanumeric fields are stored left-justified.

TYPE specifies the record field type. The input data for binary
fields is truncated to 15 digits. The input data for packed-decimal
fields is truncated to 31 digits.

LEN specifies the record field length.

Sample invocation

The sample code creates the record definition R1, which contains
ten fields.

ADDRESS RXRECORD "01 R1.",
 "02 ALPHA PIC S9(4) BINARY.",
 "02 BETA  PIC X(8) DISPLAY.",
 "02 GAMMA PIC S9(5) PACKED-DECIMAL.",
 "02 DELTA PIC 9(5).",
 "02       PIC X(1) VALUE '''.",
 "02 OMEGA PIC S9(9) PACKED-DECIMAL.",
 "02       PIC X(1) VALUE '''.",
 "02 PHI   PIC S9(5) BINARY VALUE 77777.",
 "02       PIC S9(3) COMP-3 VALUE 11.",
 "02 PSI   PIC S9(5) COMPUTATIONAL-3 VALUE 22."
IF RC <> 0 THEN DO
  SAY "RECORD error:" rc
  EXIT
END
/* initialize REXX variables */
ALPHA.1 = 123
BETA.1 = 123
GAMMA.1 = -98765
DELTA.1 = 98765
OMEGA.1 = 9876
PHI.1 = 9876
ALPHA.2 = 12356
BETA.2 = "SSAASSSA"
GAMMA.2 = 0
DELTA.2 = 987
OMEGA.2 = 4444
PSI.2 = 333
R1.0 = 2 /* no of records */
fc = PUTREC(R1)
IF fc <> 0 THEN DO
  SAY "PUTREC error:" rc
  EXIT
END
/* allocate output file */
ADDRESS TSO "ALLOC F(DD) DA(TEST.DATA) SHR REUS"
/* write records */
"EXECIO * DISKW DD (STEM R1."
SAY "ok" /* display confirmation message */

Program code

Programs that use REXX services must be written in 31-bit
addressing mode.

PUTREC   TITLE 'REXX PUTREC Function'
* Register usage:
*   R5   LC(recname)
*   R6   A(SHVBLK)
*   R7   A(common area)
*   R8   A(External Entry Points Vector)
*   R9   A(ENVBLOCK)
*   R10  A(output record)
*   R11  A(record descriptor)
*   R12  base register
PUTREC   CSECT
PUTREC   AMODE 31
PUTREC   RMODE ANY
         BAKR  R14,0              save return address
         BALR  R12,0
         USING *,R12
         LR    R3,R1
         USING EFPL,R3
         L     R2,EFPLEVAL        PTR(Evaluation Block)
* allocate dynamic area
         STORAGE OBTAIN,LENGTH=$PUTREC_L,ADDR=(R7),SP=1
         USING $PUTREC,R7
* allocate record field descriptor area
         STORAGE OBTAIN,LENGTH=NRFD*LINEL,ADDR=ARFD,SP=1
         LA    R13,SA
* initialize variables
         L     R0,0(R2)           A(Evaluation Block)
         ST    R0,AEVALBLK
         ZAP   RECNO,=P'0'
* set ESPIE (Addressing+Data)
         ESPIE SET,EXCP0CX,(5,7)
         B     CONTINUE
EXCP0CX  DS    0H
         BALR  R15,0
         USING *,R15
         MVC   ERRCODE,=CL2'-4'   data error
         B     ERROR
         DROP  R15
CONTINUE LOAD  EP=IRXEXCOM
         ST    R0,AIRXEXCOM
         L     R10,EFPLARG        A(parsed Argument List)
         USING ARGTABLE_ENTRY,R10
         MVC   ERRCODE,=CL2'-1'   preset ReturnCode (=error)
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get record name
         LM    R4,R5,0(R10)
* R4: A(record name), R5: L(record name)
         LTR   R5,R5
         BM    ERROR              record name missing
         BZ    ERROR              null record name
         CH    R5,=AL2(L'RECNAME)
         BH    ERROR              record name too long
         BCTR  R5,0               LC(recname)
         MVC   RECNAME(0),0(R4)
         EX    R5,*-6
         LA    R1,RECNAME+1(R5)
         MVI   0(R1),C'.'
         LA    R5,1(R5)
         MVC   FLDNAME,RECNAME
         LA    R1,FLDNAME+1(R5)
         MVC   0(2,R1),=C'0.'
         L     R11,ARFD           record field descriptors
         USING LINE,R11
* get no of records (recname0)
         MVC   VN,RECNAME
         LA    R1,VN+1(R5)
         MVC   0(2,R1),=C'0 '
         BAL   R14,GETVAR
*  R3: A(variable), R4: L(variable)
         MVC   ERRCODE,=CL2'-2'   preset ReturnCode
         LTR   R4,R4
         BZ    ERROR              <recname0> missing
         BCTR  R4,0               LC(recname0)
         EX    R4,EXPACK          <D>: no of records
         MVC   ERRCODE,=CL2'-3'   preset ReturnCode
         ZAP   NREC,D
         BZ    ERROR              <recname0> = 0
         L     R0,=A(NRFD)        maximum no of entries
         CVD   R0,MAXRFD
         ZAP   FLDNO,=P'0'        field number
* store record field descriptors
NEXTRFLD DS    0H                 rec.(i+1).j
         AP    FLDNO,=P'1'        i=i+1
         MVC   EDWK,=X'40202020202040'
         EDMK  EDWK,FLDNO         R1: A(first digit)
         LA    R15,FLDNAME+3(R5)
         MVC   0(7,R15),0(R1)
         MVC   VN,FLDNAME
         BAL   R14,GETVAR
* R3: A(variable), R4: L(variable)
         LTR   R4,R4
         BZ    NEWREC
         MVC   ERRCODE,=CL2'-5'   RFD table overflow
         CP    FLDNO,MAXRFD
         BH    ERROR              error
         MVC   0(LINEL,R11),0(R3)
         LA    R11,LINEL(R11)
         B     NEXTRFLD           get next record field descriptor
NEXTFLD  DS    0H
* rec.(i+1).j
* |   |     |
* |   |     +--- <INDEX>
* |   +--------- <RECNO>
* +------------- <VARNAME>
         LA    R11,LINEL(R11)
         AP    INDEX,=P'1'        i=i+1
         CP    INDEX,FLDNO
         BL    GETFLD             get field (data)
* write record
         LR    R4,R10             current end address
         LA    R3,REC
         SR    R4,R3              length
         LA    R1,RECNAME+1(R5)
         MVC   0(7,R1),1(R2)      current record number
         MVC   VN,RECNAME
         BAL   R14,SETVAR
         B     NEWREC             last field in record
GETFLD   DS    0H                 get next field
         PACK  D,VALLEN
         CVB   R4,D               value (literal) length
         LA    R3,VAL             A(literal)
         MVC   VN,VARNAME
         CLC   =C'FILLER ',VN
         BE    GETFLD1            FILLER
         BAL   R14,GETVNL         R0: L(name)
         LR    R1,R0
         LA    R1,VN(R1)
         MVC   0(7,R1),0(R2)      record no
         BAL   R14,GETVAR
* R3: A(data), R4: L(data)
         LTR   R4,R4
         BNZ   GETFLD1
* get default value (if present)
         PACK  D,VALLEN
         CVB   R4,D               value (literal) length
         LA    R3,VAL             A(literal)
* perform conversion
GETFLD1  IC    R15,TYPE
         N     R15,=X'0000000F'
         SLL   R15,2              *4
         L     R15,BRTAB-4(R15)   load address of conversion routine
         BALR  R14,R15            invoke conversion routine
* R3: A(converted data), R4: L(converted data), R10: A(record entry)
         BCTR  R4,0
         MVC   0(0,R10),0(R3)
         EX    R4,*-6
         LA    R10,1(R4,R10)
         B     NEXTFLD
BRTAB    DC    A(CVTBIN)
         DC    A(CVTPACK)
         DC    A(CVTDISPL)
NEWREC   DS    0H                 rec.(j+1)
         ZAP   INDEX,=P'0'        zeroize field no
         AP    RECNO,=P'1'        j=j+1
         CP    RECNO,NREC
         BH    EOF                last record
         MVC   EDRECNO,=X'40202020202040'
         EDMK  EDRECNO,RECNO      R1: A(first digit)
         BCTR  R1,0
         MVI   0(R1),C'.'
         LR    R2,R1
         LA    R10,REC
         L     R11,ARFD           A(record field descriptors)
         S     R11,=A(LINEL)
         B     NEXTFLD
EOF      LA    R15,L'FC0          L(data)
         LA    R1,FC0             A(data)
EOJ      L     R2,AEVALBLK        A(EVALBLOCK)
         USING EVALBLOCK,R2
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0
         MVC   EVALBLOCK_EVDATA(0),0(R1)
         EX    R15,*-6
         STORAGE RELEASE,LENGTH=$PUTREC_L,ADDR=(R7),SP=1
         PR    ,                  terminate program
ERROR    LA    R15,2              L(data)
         LA    R1,ERRCODE         A(data)
         B     EOJ
         LTORG
         TITLE 'Subroutines'
CVTBIN   ST    R14,RSA            convert BINARY (COMP) field
* R3: A(data), R4: L(data)
         ZAP   D,=P'0'            initialize
         SH    R4,=H'1'           LC(data)
         BM    CVTBIN1            no data
         BAL   R14,NORM           normalize
         EX    R4,EXPACK
         MP    D,SIGN
CVTBIN1  CVB   R0,D
         LA    R1,EXSTH
         LA    R4,2               length
         CLC   LEN,=C'00005'
         BL    *+12
         LA    R1,EXST
         LA    R4,4               length
         EX    R0,0(R1)
         LA    R3,WORD
         L     R14,RSA
         BR    R14
NORM     DS    0H                 normalize
         ZAP   SIGN,=P'+1'        default sign
         TM    PICT,#PICTS
         BZR   R14                default: +
         CLI   0(R3),C'-'
         BNE   NORM0
         ZAP   SIGN,=P'-1'        negate
         B     NORM1
NORM0    CLI   0(R3),C'+'
         BNE   NORM2
NORM1    LA    R3,1(R3)           bump past sign
         SH    R4,=H'1'           correct LC
NORM2    BR    R14
CVTDISPL DS    0H                 convert DISPLAY field
* R3: A(data), R4: L(data)
         PACK  D,LEN
         CVB   R15,D              target length
         CLI   PICT,#PICT9        test picture type
         BO    CVTDISP1           9 - right-justify
* else X - left-justify
         LR    R14,R10
         LR    R0,R3              source address
         LR    R1,R4              source length
         O     R1,=X'40000000'    set pad character
         MVCL  R14,R0             move data
         LR    R10,R14            updated address pointer
         B     NEXTFLD
CVTDISP1 LR    R1,R4              source length
         BCTR  R1,0               LC(data)
         EX    R1,EXPACK2A
         UNPK  CL16,PL16
         LA    R3,CL16+L'CL16     end of field +1
         SR    R3,R15             start of result field
         LR    R4,R15             result length
         BR    R14
CVTPACK  ST    R14,RSA            convert PACKED-DECIMAL (COMP-3) field
* R3: A(data), R4: L(data)
         PACK  D,LEN
         CVB   R15,D              target length
         LA    R15,2(R15)         bump
         SRL   R15,1              byte size
         LR    R0,R15             save
         SH    R15,=H'1'          LC(target)
         SLL   R15,4
         ZAP   PL16,=P'0'         initialize
         SH    R4,=H'1'           LC(data)
         BM    CVTPACK1           no data
         BAL   R14,NORM           normalize
         OR    R4,R15
         EX    R4,EXPACK2
         SRL   R4,4               set LC into low-order
         LA    R1,PL16(R4)
         MVN   0(1,R1),SIGN
CVTPACK1 LA    R3,PL16
         LR    R4,R0              true length
         L     R14,RSA
         BR    R14
EXPACK   PACK  D,0(0,R3)
EXPACK2  PACK  PL16(0),0(0,R3)
EXPACK2A PACK  PL16,0(0,R3)
EXST     ST    R0,WORD
EXSTH    STH   R0,HALF
SETVAR   ST    R14,RSA            set REXX variable
* input:
*  <VN>: variable name
*  R3: A(variable data)
*  R4: L(variable data)
         BAL   R14,GETVNL         get L(VN) -> R0
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVSTORE   set store-flag
         ST    R3,SHVVALA         A(data)
         ST    R4,SHVVALL         L(data)
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL,MF=(E,CALL4)
         L     R14,RSA
         BR    R14                return
GETVAR   ST    R14,RSA            get REXX variable
* input:
*  <VN>: variable name
* output:
*  R3: A(variable)
*  R4: L(variable)
         BAL   R14,GETVNL         get L(VN)
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVFETCH   Fetch
         LA    R3,VAR
         ST    R3,SHVVALA         A(buffer)
         LA    R4,LVAR
         ST    R4,SHVBUFL         L(buffer)
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL,MF=(E,CALL4)
         L     R4,SHVVALL         L(data)
         L     R14,RSA            load return address
         TM    SHVRET,SHVNEWV     new variable?
         BZR   R14                :no, return
         SR    R4,R4              else zeroize length
         BR    R14                return
GETVNL   DS    0H                 determine actual length of name
* input: <VN> - name
* output: R0: L(name), normalised
         LA    R1,L'VN
         SR    R0,R0              counter
         LA    R15,VN
GETVNL1  CLI   0(R15),C' '        search for first blank
         BER   R14                end found
         AH    R0,=H'1'           increment counter
         LA    R15,1(R15)         bump address
         BCT   R1,GETVNL1
         BR    R14
         TITLE 'Constants'
IRX_IRXEXCOM DC CL8'IRXEXCOM'
FC0      DC    C'0'
         TITLE 'Data areas (variables)'
$PUTREC  DSECT
RSA      DS    A
SA       DS    18F
FRC      DS    F                  function return code
CALL4    CALL  ,(0,0,0,0),MF=L
ERRCODE  DS    H
AEVALBLK DS    A                  A(EVALBLOCK)
AIRXEXCOM DS   A
RECNAME  DS    CL32,CL7
FLDNAME  DS    CL32,CL7           recname0.
VN       DS    CL40
FLDNO    DS    PL3
INDEX    DS    PL3
RECNO    DS    PL3
EDWK     DS    CL7
EDRECNO  DS    CL7
SIGN     DS    PL1
PL16     DS    PL16
CL16     DS    CL16
D        DS    0D,PL8
         ORG   D
WORD     DS    F
         ORG   D
HALF     DS    H
         ORG
NRFD     EQU   100                max no of record field descriptors
MAXRFD   DS    PL8
ARFD     DS    A                  A(record field descriptor table)
NREC     DS    PL8                no of records
IRX_SHVBLOCK DS (SHVBLEN)X'0'
LVAR     EQU   257
VAR      DS    CL(LVAR)
LREC     EQU   32767
REC      DS    CL(LREC)
$PUTREC_L EQU *-$PUTREC
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         IRXSHVB
LINE     DSECT
LVL      DS    CL2,C
VARNAME  DS    CL32,C
PICT     DS    CL1,C
#PICT9   EQU   1
#PICTS   EQU   2
#PICTX   EQU   4
LEN      DS    CL5,C
TYPE     DS    CL1,C
#BINARY  EQU   C'1'
#PACKED  EQU   C'2'
#DISPLAY EQU   C'3'
VALLEN   DS    CL3,C
VAL      DS    CL160
LINEL    EQU   *-LINE             length
         END


Anthony Rudd
Technical Consultant (Germany)                                c A S Rudd 1994

