REXX access to Dialog Manager variables

ADDRESS ISPEXEC
"VGET (ALPHA) PROFILE"
"VGET (BETA) SHARED"
CALL RXVGET('ALPHA','BETA')

CALL RXVPUT('ALPHA','BETA')
ADDRESS ISPEXEC
"VPUT (ALPHA) PROFILE"
"VPUT (BETA) SHARED"

rc = RXVGET(varname,...)

RXVGET program code

         TITLE 'REXX (ISPEXEC) VGET'
RXVGET   CSECT
RXVGET   AMODE 31
RXVGET   RMODE ANY
         BAKR  R14,0                 save regs
         BASSM R12,0                 set base register
         USING *,R12
         LA    R13,SA                set internal save area
         MVC   4(4,R13),=C'F1SA'
         USING EFPL,R1
         L     R11,EFPLEVAL          PTR(Evaluation Block)
         L     R11,0(R11)            A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG           PTR(Argument List)
         USING ARGTABLE_ENTRY,R10
         LR    R9,R0                 A(Environment Block)
         USING ENVBLOCK,R9
         L     R9,ENVBLOCK_IRXEXTE
         USING IRXEXTE,R9
         LOAD  EP=ISPLINK
         ST    R0,AISPLINK
         LA    R7,IRX_SHVBLOCK
         USING SHVBLOCK,R7           A(SHVBLOCK)
NEXTPARM LM    R3,R4,ARGTABLE_ARGSTRING_PTR
* R3: A(argument); R4: L(argument)
         LTR   R4,R4
         BM    LASTPARM
         LA    R0,L'VN               maximum varname length
         CR    R4,R0
         BNH   LENOK
         LR    R4,R0                 set maximum length
         MVC   RC,=H'4'              set maximum return code
LENOK    MVC   VN,VN-1               blank <VN>
         SH    R4,=H'1'              LC(argument)
         EX    R4,EXMOVE1            move argument to <VN>
         LA    R4,1(R4)              true length
         ST    R4,SHVNAML            L(variable name)
         L     R15,AISPLINK
         CALL  (15),(VCOPY,VN,VL,VA,LOCATE),VL
         LA    R2,12
         LTR   R15,R15
         BNZ   EXIT                  VCOPY error
* set data into REXX variable
         MVI   SHVCODE,SHVSTORE      store
         MVC   SHVNAMA,=A(VN)        A(variable name)
         MVC   SHVVALA,VA            A(variable data)
         MVC   SHVVALL,VL            L(variable data)
         L     R15,IRXEXCOM
         CALL  (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         LA    R2,16
         LTR   R15,R15
         BNZ   EXIT                  error
         LA    R10,ARGTABLE_NEXT-ARGTABLE_ENTRY(R10)
         B     NEXTPARM
LASTPARM LH    R2,RC                 end of processing
EXIT     CVD   R2,D                  set function return value
         MVC   WK,=X'402020202120'
         LA    R1,WKE
         EDMK  WK,D+5
         LA    R15,WK+L'WK
         SR    R15,R1                L(result)
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0                 LC(result)
         EX    R15,EXMOVE2
         LA    R15,0                 normal function return
         PR    ,                     program end
EXMOVE1  MVC   VN(0),0(R3)
EXMOVE2  MVC   EVALBLOCK_EVDATA(0),0(R1)
IRX_IRXEXCOM DC C'IRXEXCOM'
         DS    0A                    align
IRX_SHVBLOCK DC (SHVBLEN)X'0'
RC       DC    H'0'
SA       DS    18F
D        DS    0D,PL8
WK       DS    CL6
WKE      EQU   *-1
AISPLINK DS    A
         DC    C' '
VN       DS    CL8
VL       DS    F
VA       DS    A
VCOPY    DC    CL8'VCOPY'
LOCATE   DC    C'LOCATE'
         IRXEFPL
         IRXENVB
         IRXEXTE
         IRXSHVB
         IRXEVALB
         IRXARGTB
         END

RXVPUT calling sequence

rc = RXVPUT(varname,...)

Sample invocation

ADDRESS ISPEXEC
alpha = 'BETA'
gamma = 1234
CALL RXVPUT('ALPHA','GAMMA')
"DISPLAY PANEL(PAN0)"
CALL RXVGET('DELTA')

RXVPUT program code

         TITLE 'REXX (ISPEXEC) VPUT'
RXVPUT   CSECT
RXVPUT   AMODE 31
RXVPUT   RMODE ANY
         BAKR  R14,0                 save regs
         BASSM R12,0                 set base register
         USING *,R12
         LA    R13,SA                set internal save area
         MVC   4(4,R13),=C'F1SA'
         USING EFPL,R1
         L     R11,EFPLEVAL          PTR(Evaluation Block)
         L     R11,0(R11)            A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG           PTR(Argument List)
         USING ARGTABLE_ENTRY,R10
         LR    R9,R0                 A(Environment Block)
         USING ENVBLOCK,R9
         L     R9,ENVBLOCK_IRXEXTE
         USING IRXEXTE,R9
         LOAD  EP=ISPLINK
         ST    R0,AISPLINK
         LA    R7,IRX_SHVBLOCK
         USING SHVBLOCK,R7           A(SHVBLOCK)
NEXTPARM LM    R3,R4,ARGTABLE_ARGSTRING_PTR
* R3: A(argument); R4: L(argument)
         LTR   R4,R4
         BM    LASTPARM
         LA    R0,L'VN               maximum varname length
         CR    R4,R0
         BNH   LENOK
         LR    R4,R0                 set maximum length
         MVC   RC,=H'4'              set maximum return code
LENOK    MVC   VN,VN-1               blank <VN>
         SH    R4,=H'1'              LC(argument)
         EX    R4,EXMOVE1            move argument to <VN>
         LA    R4,1(R4)              true length
         ST    R4,SHVNAML            L(variable name)
* get REXX variable
         MVI   SHVCODE,SHVFETCH      fetch
         MVC   SHVNAMA,=A(VN)        A(variable name)
         MVC   SHVVALA,ABUF          A(buffer)
         MVC   SHVBUFL,LBUF          L(buffer)
         L     R15,IRXEXCOM
         CALL  (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         LA    R2,16
         LTR   R15,R15
         BNZ   EXIT                  error
         MVC   VL,SHVVALL            L(returned variable data)
         L     R15,AISPLINK
         CALL  (15),(VREPLACE,VN,VL,BUF),VL
         LA    R2,12
         LTR   R15,R15
         BNZ   EXIT                  VREPLACE error
         LA    R10,ARGTABLE_NEXT-ARGTABLE_ENTRY(R10)
         B     NEXTPARM
LASTPARM LH    R2,RC                 end of processing
EXIT     CVD   R2,D                  set function return value
         MVC   WK,=X'402020202120'
         LA    R1,WKE
         EDMK  WK,D+5
         LA    R15,WK+L'WK
         SR    R15,R1                L(result)
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0                 LC(result)
         EX    R15,EXMOVE2
         LA    R15,0                 normal function return
         PR    ,                     program end
EXMOVE1  MVC   VN(0),0(R3)
EXMOVE2  MVC   EVALBLOCK_EVDATA(0),0(R1)
IRX_IRXEXCOM DC C'IRXEXCOM'
         DS    0A                    align
IRX_SHVBLOCK DC (SHVBLEN)X'0'
RC       DC    H'0'
SA       DS    18F
D        DS    0D,PL8
WK       DS    CL6
WKE      EQU   *-1
AISPLINK DS    A
         DC    C' '
VN       DS    CL8
VL       DS    F
VREPLACE DC    CL8'VREPLACE'
         LTORG
ABUF     DC    A(BUF)
LBUF     DC    A(L'BUF)
BUF      DS    CL4096
         IRXEFPL
         IRXENVB
         IRXEXTE
         IRXSHVB
         IRXEVALB
         IRXARGTB
         END


A S Rudd
Technical Consultant (Germany)                                      c A S Rudd 1995

