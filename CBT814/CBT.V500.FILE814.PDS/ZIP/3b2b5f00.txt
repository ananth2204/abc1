Extracting DFRMM warning messages

INTRODUCTION

During the implementation of DFRMM, two PARMLIB options
are available which an installation will find extremely valuable.
These options are used to specify whether DFRMM is running in
warning mode or record mode.

Warning mode

When DFRMM is executing in warning mode, it will validate
tape volumes as they are used. If it discovers any errors, it will
issue warning messages without rejecting tapes.

Record mode

When DFRMM is executing in record mode, it will record
information about tape volumes used, dataset names, and
information about volume owners. It does not validate or reject
volumes in this mode.

The problem

During the period when DFRMM is operating in warning or
record mode, a number of messages may be issued warning of
potential tape problems. This article describes a facility whereby
the DFRMM messages that have been issued to the SYSLOG can
be retrieved and displayed under ISPF/PDF. This will allow
potential problems to be identified and corrective action to be
taken. I have also found this facility to be of use even when
DFRMM is executing in full protect mode.

The first REXX EXEC, RMMSSUB, will submit a job to execute
the program, RMMSCAN. This Assembler-level program will
read the DDNAME SYSLOG as input and extract from this
dataset all DFRMM messages. DFRMM messages are prefixed
EDGxxxxx. This dataset would normally contain the previous
day's SYSLOG. All the DFRMM messages that are found are
then output to the DDNAME SYSLOGO.

The second REXX EXEC, RMMSLOG, will then format the
DFRMM message dataset and display the messages using
ISPF/PDF edit.

The two EXECs can be installed and invoked from the supplied
DFRMM user panel, EDGP@LCL. This panel is selected from
the main DFRMM panel, EDG@PRIM. The Assembler program,
RMMSCAN, requires no special attributes and can be installed in
a user LINKLIST library or accessed through a STEPLIB DD.

RMMSCAN SOURCE CODE

RMMSCAN  TITLE 'SCAN SYSLOG FOR DFRMM MESSAGES'
         MACRO
         BALS  &REG,&BRTO
         BAL   &REG,&BRTO
         DC    S(*+2)
         MEND
RMMSCAN  CSECT
*---     MODULE NAME.   RMMSCAN.                                   ---*
*        REMARKS.       THIS PROGRAM WILL SCAN THE SYSLOG LOOKING     *
*                       FOR DFRMM MESSAGES WHICH ARE PREFIXED         *
*---                    EDGXXXXX.                                  ---*
NEXTSA   EQU   8                       POINTER TO PREVIOUS SAVEAREA
STOP     EQU   C'.'                    FULL STOP
SIGNF    EQU   X'F0'                   POSITIVE SIGN
ZERO     EQU   X'00'                   ZERO
SPACE    EQU   C' '                    SPACE
TOP      EQU   C'1'                    TOP OF PAGE
SKIP2    EQU   C'0'                    SKIP TWO LINES
         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS
*                                      IN THE LINKAGE STACK
         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER
         USING RMMSCAN,R12             INFORM THE ASSEMBLER
         LAE   R13,SAVEAREA            @ THE SAVEAREA
         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA
*                                      TO INDICATE STATUS SAVED ON
*                                      THE LINKAGE STACK.
OPEN     EQU   *
         OPEN (SYSLOG,(INPUT),SYSLOGO,(OUTPUT)) OPEN
         LA    R9,SYSLOG               SYSLOG DCB
         USING IHADCB,R9               INFORM THE ASSEMBLER
         TM    DCBOFLGS,X'10'          OPEN OK?
         BZ    OPNERR1                 NO-
         LA    R9,SYSLOGO              SYSLOGO DCB
         USING IHADCB,R9               INFORM THE ASSEMBLER
         TM    DCBOFLGS,X'10'          OPEN OK?
         BZ    OPNERR2                 NO-
RDSYSIN  EQU   *
         GET   SYSLOG,ISYSLOG          READ FROM SYSLOG
RMMMESS  EQU   *
         CLC   EDGMESS,=CL3'EDG'       DFRMM MESSAGE?
         BNE   RDSYSIN                 NO-
         CLI   EDGRTYP,C'M'            MULTIPLE LINE MESSAGE?
         BNE   SLINE                   NO-
MLINE    EQU   *
         BALS  R2,PRTEDG               PRINT IT
         GET   SYSLOG,ISYSLOG          READ FROM SYSLOG
         CLI   EDGRTYP,C'D'            DATA LINE OF MULTIPLE LINE?
         BE    MLINE                   YES- LET'S PRINT IT
         CLI   EDGRTYP,C'E'            END LINE OF MULTIPLE LINE?
         BNE   RMMMESS                 NO-
         BALS  R2,PRTEDG               PRINT IT
         B     RDSYSIN                 KEEP LOOKING
SLINE    EQU   *
         BALS  R2,PRTEDG               PRINT IT
         GET   SYSLOG,ISYSLOG          READ FROM SYSLOG
         CLI   EDGRTYP,C'S'            SINGLE LINE CONTINUATION?
         BNE   RMMMESS                 NO-
         B     SLINE                   YES- LET'S PRINT IT
PRTEDG   EQU   *
         MVC   PRTEDGEX+2(2),0(R2)     EXIT ADDRESS
         CP    LINECNT,=P'66'          NEW PAGE?
         BNH   PRTRMM                  NO-
         BALS  R2,PRTHEAD1             PRINT HEADING
PRTRMM   EQU   *
         MVI   PSKIP,SPACE             SKIP CHARACTER
         PUT   SYSLOGO,ISYSLOG         PRINT IT
         AP    LINECNT,=P'1'           INCR PAGE COUNT
PRTEDGEX B     0                       EXIT
PRTHEAD1 EQU   *
         MVC   PRTHDEXT+2(2),0(R2)     EXIT ADDRESS
         BALS  R2,CLEAR                CLEAR THE PRINT LINE
         MVC   PHEAD1,LIT1             LITERAL
         MVI   PSKIP,TOP               TOP OF PAGE
         PUT   SYSLOGO,PL              PRINT IT
         BALS  R2,CLEAR                CLEAR THE PRINT LINE
         ZAP   LINECNT,=P'1'           NEW PAGE?
PRTHDEXT B     0                       RETURN TO CALLER
CLEAR    EQU   *
         MVC   CLEAREXT+2(2),0(R2)     EXIT ADDRESS
         MVI   PSKIP,SPACE             CLEAR THE
         MVC   PLINE+L'PSKIP(L'PLINE-L'PSKIP),PSKIP  PRINTLINE
CLEAREXT B     0                       EXIT ADDRESS
OPNERR1  EQU   *
         ABEND 001,DUMP
OPNERR2  EQU   *
         ABEND 002,DUMP
SYSLEOF  EQU   *
         CLOSE (SYSLOG,,SYSLOGO)       CLOSE THE FILES
RETURN   EQU   *
         LAE   R1,0(R13,0)             ADDRESS TO FREE
*        SLR   R15,R15                 SET RC TO ZERO
         PR                            RESTORE CALLER'S ARS
*                                      GPRS 2-14 AND RETURN
*                                      TO CALLER
         LTORG
SAVEAREA DC    18F'0'                  REGISTER SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            PREVIOUS SAVEAREA
DW       DC    D'0'                    WORKAREA
SYSINRCS DS    AL4                     NO OF SYSIN RECORDS READ
INPBUFF@ DS    AL4                     SYSIN BUFFER @
IBUFLEN  DS    AL4                     BUFFER LENGTH
ISYSLOG  DS    CL137                   SYSLOG
EDGWLL   EQU   ISYSLOG,2               RDW LL
EDGTOP   EQU   ISYSLOG+4,1             SKIP TO TOP OF PAGE
EDGRTYP  EQU   ISYSLOG+5,1             RECORD TYPE
EDGMESS  EQU   ISYSLOG+61,3            EDG MESSAGE
PAGECNT  DC    PL2'0'                  PAGECOUNT
LINECNT  DC    PL2'67'                 LINECOUNT
PL       DC    AL2(137),AL2(0)         PRINT LINE
PLINE    DS    CL133                   PRINT LINE
PSKIP    EQU   PLINE,1                 SKIP CHARACTER
PHEAD1   EQU   PLINE+57,20             HEADING
EDPAT1   DC    XL7'4021204B202020'
LIT1     DC    CL20'DFRMM MESSAGE REPORT'
SYSLOGO  DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=SYSLOGO
SYSLOG   DCB   DSORG=PS,DEVD=DA,MACRF=(GM),DDNAME=SYSLOG,EODAD=SYSLEOF
         DCBD  DSORG=(QS),DEVD=DA
         END   RMMSCAN

RMMSLOG REXX EXEC

/**rexx****************************************************************/
/*   Procedure to display DFRMM messages that have been extracted    */
/*   from the syslog.                                                */
/*********************************************************************/
/*trace r*/
save_prompt = prompt("off")
ADDRESS "TSO" "ALLOC FI(INPSYSL) DA('DFRMM.SYSLOG') REUS SHR"
if (rc ^= 0) then do
   say '*** Error in allocating INPSYSL. RC =' rc '***'
   exit(rc)
end
DSNOK=  SYSDSN('RMM.SYSLOG')
if dsnok ^= 'OK' then
   ADDRESS "TSO" "ALLOC FI(RMMSLOG) DA('"SYSVAR(SYSUID)".RMM.SYSLOG')
   NEW LIKE('DFRMM.SYSLOG') RECFM(F B) LRECL(133) BLKSIZE(22610)"
else
   ADDRESS "TSO" "ALLOC FI(RMMSLOG) DA('"SYSVAR(SYSUID)".RMM.SYSLOG')
   OLD"
if (rc ^= 0) then do
   say '*** Error in allocating RMMSLOG. RC =' rc '***'
   exit(rc)
end
slog1half.0= 1
slog2half.0= 1
"execio * diskr inpsysl (stem rmmslog. finis"
do i = 1 to rmmslog.0
   if substr(rmmslog.i,3,30) ^= '                              ' then do
      slog1half.1= substr(rmmslog.i,21,26)
      "execio 1 diskw rmmslog (stem slog1half."
   end
   slog2half.1= substr(rmmslog.i,58,75)
   slog2half.1= strip(slog2half.1,trailing,' ')
   "execio 1 diskw rmmslog (stem slog2half."
end
"execio 0 diskw rmmslog (finis"
ADDRESS "TSO" "FREE FI(INPSYSL)"
ADDRESS "TSO" "FREE FI(RMMSLOG)"
ADDRESS "TSO" "ISPEXEC EDIT DATASET('"SYSVAR(SYSUID)".RMM.SYSLOG')"
exit(0)

RMMSSUB REXX EXEC

/**rexx***************************************************************/
/*   Procedure to extract the DFRMM messages from the syslog.        */
/*********************************************************************/
/*trace r*/
save_prompt = prompt("off")
DSNOK=  SYSDSN('RMM.SCANJCL')
if dsnok ^= 'OK' then
   ADDRESS "TSO" "ALLOC FI(RMMSJCL) DA('"SYSVAR(SYSUID)".RMM.SCANJCL')
   NEW RECFM(F B) LRECL(80) BLKSIZE(22480)"
ELSE
   ADDRESS "TSO" "ALLOC FI(RMMSJCL) DA('"SYSVAR(SYSUID)".RMM.SCANJCL')
   OLD"
if (rc ^= 0) then do
   say '*** Error in allocating RMMSJCL. RC =' rc '***'
   exit(rc)
end
jclstem.0= 9
jclstem.1= '//'SYSVAR(SYSUID)'A JOB 99999999,''TSO RP'','
jclstem.2= '//     MSGLEVEL=(1,1),CLASS=S,MSGCLASS=X'
jclstem.3= '//SCAN     EXEC PGM=RMMSCAN'
jclstem.4= '//SYSPRINT DD SYSOUT=*'
jclstem.5= '//SYSUDUMP DD SYSOUT=*'
jclstem.6= '//*CHANGE THE FOLLOWING DATASET NAME IF REQUIRED'
jclstem.7= '//SYSLOG   DD DSN=DAY.SYSLOG(0),DISP=SHR'
jclstem.8= '//SYSLOGO  DD DSN=DFRMM.SYSLOG,DISP=OLD'
jclstem.9= '//'
"execio 9 diskw rmmsjcl (stem jclstem."
"execio 0 diskw rmmsjcl (finis"
ADDRESS "TSO" "FREE FI(RMMSJCL)"
ADDRESS "TSO" "ISPEXEC EDIT DATASET('"SYSVAR(SYSUID)".RMM.SCANJCL')"
ADDRESS "TSO" "SUBMIT  ('"SYSVAR(SYSUID)".RMM.SCANJCL')"
exit(0)


R F Perretta
Systems Programmer (UK                                       c Xephon 1994

