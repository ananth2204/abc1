Monitoring SVC table updates


LDMINST1 - THE Installation program

* LINKED ATTRIBUTES : AC 1
LDMINST1 AMODE 31
LDMINST1 RMODE ANY
LDMINST1 CSECT
         DS    0H
         B     BEGIN-LDMINST1(,15)
         DC    C'LDMINST1: '
         DC    C'&SYSDATE &SYSTIME, '
         DC    C'C. REID ISO PSV HSM, '
         DC    C'STANDARD LIFE ASS. CO.'
         DS    0H
BEGIN    STM   14,12,12(13)            SAVE CALLER'S REGS
         LR    12,15                   ADDRESSABILITY
         USING LDMINST1,12             ESTABLISH ADDRESSABILITY
         USING WORKAREA,11             ESTABLISH ADDRESSABILITY
START    DS    0H
         LA    2,WORK_AREA_LENGTH
         STORAGE OBTAIN,LENGTH=(2)     GETMAIN SOME WORKING STORAGE
         LR    11,1                    ADDRESSABILITY
         ST    11,GETMAIN_ADDRESS      SAVE WORKING STORAGE POINTER
         LA    14,SAVEAREA             WHERE'S MY SAVEAREA
         ST    14,8(13)                SET
         ST    13,SAVEAREA+4
         LA    13,SAVEAREA
         MVC   DSS_EYE,=CL8'LDMINST1'  SET EYE IN GETMAINED AREA
ADDRESSABILITY EQU *
         USING PSA,0
         USING CVTMAP,1
         USING NUCMAP,2
GET_ADDRESSABILITY EQU *
         L     1,FLCCVT
         L     2,CVTNUCMP
         L     3,NUCMAP_LOC
         ST    2,NUC_START
         ST    3,NUC_END
         LA    2,NUCMAP_LENGTH(,2)     POINT TO START OF MODULES
         DROP  0,1
LOOKUP_TABLE EQU *
         CLC   NUCMAP_NAME,SVCUPDTE_MODULE
         BE    ENTRY_FOUND
         LA    2,NUCMAP_LENGTH(,2)
         C     2,NUC_END
         BH    ENDIT
         B     LOOKUP_TABLE
ENTRY_FOUND EQU *
         ST    2,NUCMAP_SVCUPDTE
         MVC   WTO_POINT+0(WTO_00),WTO_ZZ
         MVC   LOAD(LOAD_LENGTH),LOAD_LIST
DISPLAY_OLD_INFO EQU *
         MVC   MODULE_NAME,SVCUPDTE_MODULE
         NUCLKUP BYNAME,NAME=SVCUPDTE_MODULE,ADDR=(3)
         LR    5,1
         ST    3,WORKS
         ST    5,SVCUPDTE_MODULE_LENGTH
         ST    3,SVCUPDTE_MODULE_ADDR
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_ADDRESS+0(L'PROGRAM_ADDRESS),WORK_VAR+0
         ST    5,WORKS
         MVI   WORKS,X'00'
         LA    15,CONVERT
         BALR  14,15
         MP    DOUBLE_WORD,=P'8'
         MVC   WORKS+0(4),WORD_1+0
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_LENGTH+0(L'PROGRAM_LENGTH-1),WORK_VAR+0
         WTO   ,ROUTCDE=11,MF=(E,WTO_POINT)
LOAD_NEW_PROGRAM EQU *
         MVC   MODULE_NAME,MOD_NAME
         LA    4,MODULE_NAME              POINT TO PARM SAVE AREA
         LOAD  EPLOC=(4),ERRET=LOAD_FAIL,GLOBAL=(YES,P),EOM=YES,       X
               SF=(E,LOAD)
         LR    3,0
         ST    3,MY_MODULE_LOCATION
         LR    5,1
         ST    5,MY_MODULE_LOCATION_LENGTH
         ST    3,WORKS
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_ADDRESS+0(L'PROGRAM_ADDRESS),WORK_VAR+0
         ST    5,WORKS
         MVI   WORKS,X'00'
         LA    15,CONVERT
         BALR  14,15
         MP    DOUBLE_WORD,=P'8'
         MVC   WORKS+0(4),WORD_1+0
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_LENGTH+0(L'PROGRAM_LENGTH-1),WORK_VAR+0
         WTO   ,ROUTCDE=11,MF=(E,WTO_POINT)
UPDATE_NUCLEUS EQU *
         MODESET KEY=ZERO,MODE=SUP
         LA    3,NUCMAP_LENGTH
         STORAGE OBTAIN,LENGTH=(3)
         LR    4,1
         ST    4,NEW_NUCMAP
         MVC   0(NUCMAP_LENGTH,4),NUCMAP
         MVC   8(4,4),MY_MODULE_LOCATION
         MVC   12(4,4),MY_MODULE_LOCATION_LENGTH
         L     5,MY_MODULE_LOCATION
         A     5,=F'4'                 POINT INTO MODULE
         LRA   4,NUCMAP_LOC
         DROP  2
         LRA   2,0(0,5)
         LA    3,4
         LA    5,4
         DATOFF INDMVCL0
         L     2,NUCMAP_SVCUPDTE
         LRA   2,0(0,2)
         LA    3,NUCMAP_LENGTH
         L     4,NEW_NUCMAP
         LRA   4,0(0,4)
         LA    5,NUCMAP_LENGTH
         DATOFF INDMVCL0
DISPLAY_NEW_INFO EQU *
         MVC   MODULE_NAME,SVCUPDTE_MODULE
         NUCLKUP BYNAME,NAME=SVCUPDTE_MODULE,ADDR=(3)
         LR    5,1
         ST    3,WORKS
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_ADDRESS+0(L'PROGRAM_ADDRESS),WORK_VAR+0
         ST    5,WORKS
         MVI   WORKS,X'00'
         LA    15,CONVERT
         BALR  14,15
         MP    DOUBLE_WORD,=P'8'
         MVC   WORKS+0(4),WORD_1+0
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_LENGTH+0(L'PROGRAM_LENGTH-1),WORK_VAR+0
         WTO   ,ROUTCDE=11,MF=(E,WTO_POINT)
WTOR     EQU   *
         MVC   WTOR_POINT+0(WTOR_00),WTOR_ZZ
         XC    ECB,ECB                 CLEAR OUT
         XC    REPLY,REPLY             VARIABLES
         LA    2,REPLY
         LA    3,ECB
         SR    0,0
         WTOR  MF=(E,WTOR_POINT),TEXT=(MESSAGE,(2),ONE,(3))
         XC    TECB,TECB
         LA    2,ECB
         ST    2,ECB_LST
         LA    2,TECB
         ST    2,TECB_LST
         OI    TECB_LST,X'80'
         LA    2,ECBLIST
         WAIT  ECBLIST=(2)
CLEANUP_ROUTINE EQU *
         USING NUCMAP,2
         L     2,NUCMAP_SVCUPDTE
         L     4,NEW_NUCMAP
         MVC   0(NUCMAP_LENGTH,4),NUCMAP
         MVC   8(4,4),SVCUPDTE_MODULE_ADDR
         MVC   12(4,4),SVCUPDTE_MODULE_LENGTH
         LRA   2,0(0,2)
         LA    3,NUCMAP_LENGTH
         L     4,NEW_NUCMAP
         LRA   4,0(0,4)
         LA    5,NUCMAP_LENGTH
         DATOFF INDMVCL0
DISPLAY_RESTORE_INFO EQU *
         DROP  2
         MVC   MODULE_NAME,SVCUPDTE_MODULE
         NUCLKUP BYNAME,NAME=SVCUPDTE_MODULE,ADDR=(3)
         LR    5,1
         ST    3,WORKS
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_ADDRESS+0(L'PROGRAM_ADDRESS),WORK_VAR+0
         ST    5,WORKS
         MVI   WORKS,X'00'
         LA    15,CONVERT
         BALR  14,15
         MP    DOUBLE_WORD,=P'8'
         MVC   WORKS+0(4),WORD_1+0
         LA    15,CONVERT1
         BALR  14,15
         MVC   PROGRAM_LENGTH+0(L'PROGRAM_LENGTH-1),WORK_VAR+0
         WTO   ,ROUTCDE=11,MF=(E,WTO_POINT)
FREE_UP_NUCMAP EQU *
         LA    2,NUCMAP_LENGTH
         L     3,NEW_NUCMAP
         STORAGE RELEASE,LENGTH=(2),ADDR=(3)
         MODESET KEY=NZERO,MODE=PROB
ENDIT    DS    0H                       TIDY UP THE MESS!!
         L     13,SAVEAREA+4
         LA    2,WORK_AREA_LENGTH
         L     3,GETMAIN_ADDRESS
         STORAGE RELEASE,LENGTH=(2),ADDR=(3)
         LM    14,12,12(13)             RESTORE GPRS
         SR    15,15                    SET RETURN CODE
         BR    14                       GO HOME....
CONVERT  EQU   *
         L     8,WORKS
         CVD   8,DOUBLE_WORD
         UNPK  WORK_VAR(9),WORD_1(5)
         OI    WORK_VAR+L'WORK_VAR-1,ZONEIT
         MVI   WORK_VAR+L'WORK_VAR-1,SPACE
         XC    WORKS,WORKS
         BR    14
CONVERT1 EQU   *
         UNPK  WORK_VAR(9),WORKS(5)     UNPACK
         MVZ   WORK_VAR,=XL8'00'        ZONE IT
         TR    WORK_VAR,TABLE           TRANSLATE TO CHAR VALUES
         XC    WORKS,WORKS
         BR    14
LOAD_FAIL EQU   *
         ABEND 997,DUMP
TABLE    DC    C'0123456789ABCDEF'
SPACE    EQU   C' '
ZONEIT   EQU   C'0'
LOAD_LIST EQU *
         LOAD  EPLOC=0,ERRET=LOAD_FAIL,GLOBAL=(YES,P),EOM=YES,         X
               SF=L
LOAD_LENGTH EQU *-LOAD_LIST
WTO_ZZ   EQU   *
         WTO   'YYYYYYYY LOADED AT ADDRESS XXXXXXXX LENGTH XXXXXXX.',  X
               MF=L
WTO_00   EQU   *-WTO_ZZ
DUMMY    DS    F
WTOR_ZZ  EQU   *
         WTOR  TEXT=(MESSAGE,DUMMY,ONE,DUMMY),MF=L
WTOR_00  EQU   *-WTOR_ZZ
MESSAGE  DC    AL2(L'MESSAGE_TEXT)
MESSAGE_TEXT DC C'SVCUPDTE, REPLY TO WTOR TO STOP ADDRESS SPACE.'
ONE      EQU   1
MOD_NAME DC    CL8'LDMSVCUP'
SVCUPDTE_MODULE DC CL8'IEAVESTU'
         LTORG
WORKAREA DSECT
SAVEAREA DS    18F
GETMAIN_ADDRESS DS    F
NEW_NUCMAP DS  F
SVCUPDTE_MODULE_LENGTH DS F
SVCUPDTE_MODULE_ADDR DS F
DSS_EYE  DS    CL8                     EYECATCHER IN GETMAINED AREA
NUC_START DS   F
NUC_END  DS    F
MY_MODULE_LOCATION DS F
MY_MODULE_LOCATION_LENGTH DS F
NUCMAP_SVCUPDTE DS F
LOAD     DS    CL(LOAD_LENGTH)
         DS    0F
WORKS    DS    CL4,C
WORK_VAR DS    CL8,C
DOUBLE_WORD DS 0D
WORD_2   DS    F
WORD_1   DS    F,F
WTOR_POINT DS  CL(WTOR_00)
WTO_POINT DS   CL(WTO_00)
         ORG   WTO_POINT+4
MODULE_NAME DS CL8
         ORG   WTO_POINT+31
PROGRAM_ADDRESS DS CL8
         ORG   WTO_POINT+47
PROGRAM_LENGTH DS CL8
         ORG   ,
ECBLIST  DS    0F
ECB_LST  DS    F
TECB_LST DS    F
ECB      DS    A
TECB     DS    A
REPLY    DS    C
WORK_AREA_LENGTH EQU *-WORKAREA
NUCMAP   DSECT
NUCMAP_NAME DS CL8
NUCMAP_LOC  DS F
NUCMAP_FLAGS DS X
NUCMAP_MOD_LENGTH DS XL3
NUCMAP_LENGTH EQU *-NUCMAP
         IHAPSA                        PSA
         CVT DSECT=YES                 CVT
         END


LDMSVCUP - THE Front end program

* LINK-EDIT ATTRIBUTES : AC 1, REENT AND REUS
LDMSVCUP AMODE 31
LDMSVCUP RMODE ANY
LDMSVCUP CSECT
         DS    0H
         B     BEGIN-LDMSVCUP(,15)
IEAVESTU DC    F'0'
         DC    C'LDMSVCUP : &SYSDATE &SYSTIME, '
         DC    C'AUTHOR C. REID ESQ. '
         DC    C'ISO PSV HSM '
         DC    C'STANDARD LIFE ASS. CO.'
         DS    0H
BEGIN    STM   14,12,12(13)            SAVE CALLER'S REGS
         LR    10,1                    SAVE PARM POINTER
         LR    12,15                   ADDRESSABILITY
         USING LDMSVCUP,12             ESTABLISH ADDRESSABILITY
         USING WORKAREA,11             ESTABLISH ADDRESSABILITY
         LA    2,WORK_AREA_LENGTH      GET LENGTH OF WORKAREA
         STORAGE OBTAIN,LENGTH=(2)     GETMAIN SOME STORAGE
         LR    11,1                    ADDRESSABILITY
         ST    1,GETMAIN_SAVEAREA_ADDRESS  SAVE WORKAREA POINTER
         LA    14,SAVEAREA             WHERE'S MY SAVEAREA
         ST    14,8(13)                SET FWD CHAIN PTR
         ST    13,SAVEAREA+4           SET BKW CHAIN PTR
         LA    13,SAVEAREA             POINT TO MY SAVEAREA
ADDRESSABILITY EQU *
         USING PSA,0
         USING CVTMAP,2
         USING SMCABASE,3
         USING ASCB,4
         USING SMF_USER,5              ADDRESSABILITY, SMF DSECT
SMF_STUFF EQU  *
         LA    2,SMFRECLN              LENGTH OF GETMAIN
         STORAGE OBTAIN,LENGTH=(2),LOC=(BELOW,ANY)
         LR    5,1                     SAVE ADDR OF GETMAIN
         ST    5,SMF_AREA              STORE GETMAIN ADDRESS
         STH   2,SMFRDW                SET RECORD DESCRIPTOR WORD
         MVI   SMFSID,X'0E'            SMF SYSTEM ID
         MVI   SMFRTYPE,SMFRECNO       SET SMF RECORD
WORK_TIM EQU   *
         TIME  BIN                     WHAT'S THE DATE + TIME ?
         STCM  0,15,SMFTIME            SAVE TIME
         STCM  1,15,SMFDATE            SAVE DATE
BUILD_SMF_RECORD EQU *
         L     2,FLCCVT                ADDRESSABILITY, CVT
         L     3,CVTSMCA               ADDRESSABILITY, SMCA
         L     4,PSAAOLD               ADDRESSABILITY, ASCB
         MVC   SMFSYSID+0(4),SMCASID   SAVE SMF ID
         DROP  0,2,3                   NO LONGER NEED ADDRESSABILITY
         MVC   SMF_RECORD,0(10)        SAVE SMF ID
CHECK_FOR_ASCB EQU *
         XC    SMFJOBN,SMFJOBN         CLEAR JOBNAME
         CLC   =F'0',ASCBJBNS          DO WE HAVE A JOBNAME?
         BE    CHECK_FOR_INIT_ASCB     NO, LOOK FOR INITIATED JOB
         L     7,ASCBJBNS              GET JOBNAME POINTER
         MVC   SMFJOBN,0(7)            SAVE JOBNAME
         B     WORK_ASID               JUMP TO ASID WORKOUT
CHECK_FOR_INIT_ASCB EQU *
         CLC   =F'0',ASCBJBNI          DO WE HAVE A JOBNAME?
         BE    WORK_ASID               NO, OH WELL
         L     7,ASCBJBNI              GET JOBNAME POINTER
         MVC   SMFJOBN,0(7)            SAVE JOBNAME
WORK_ASID EQU  *
         XC    WORKS,WORKS             CLEAR WORKS AREA
         MVC   WORKS+2,ASCBASID        MOVE ASID INTO WORK VARIABLE
         LA    15,CONVERT1             GET ROUTINE POINTER
         BALR  14,15                   JUMP TO CONVERT ROUTINE
         MVC   SMFASID+0(L'SMFASID),WORK_VAR+4  SAVE ASID CHAR VALUE
GET_SOME_INFO_ON_JOBNAME EQU *
         DROP  4                       NO LONGER NEED ADDRESSABILITY
         XC    JOBINFO,JOBINFO         CLEAR WORKAREA
         MVC   LINK_DYN,LINK_LIST_FORM CREATE EXECUTABLE LINK
         MVC   JOBNAME,SMFJOBN         SET UP JOB NAME FOR SEARCH
         MVC   JOBNAME_LEN,=X'0008'    LENGTH OF JOBNAME
         MVC   JOBINFO_LEN,=X'00FF'    LENGTH OF WORKAREA
         LA    3,JOBNAME_LEN           SET UP PARMS FOR CALL
         LA    4,JOBINFO_LEN
         LINK  EP=LDMASCBC,PARAM=((3),(4)),SF=(E,LINK_DYN)
         LTR   15,15                   CHECK RETURN CODE
         BNZ   WRITESMF                BAD RC, JUST CUT SMF RECORD
         USING USER_RECORD,4           ESTABLISH ADDRESSABILITY
         LA    4,2(4)                  ADDRESSABILITY
         MVC   SMFJOBID,ASCB_JOBID     JOB ID
         MVC   SMFJOBTY,ASCB_JOBTY     JOB TYPE
         MVC   SMFJOBNM,ASCB_JOBNM     JOB NUMBER
         MVC   SMFUSID,ASCB_USID       ASSOCIATED USERID
WRITESMF EQU   *
         SMFWTM SMF_USER               WRITE RECORD TO SMF
FREE_SMF EQU   *
         L     3,SMF_AREA              RESTORE GETMAIN ADDRESS
         LA    2,SMFRECLN              LENGTH OF AREA
         STORAGE RELEASE,LENGTH=(2),ADDR=(3) FREEMAIN
         DROP  5                       DROP ADDRESSABILITY
ENDIT    DS    0H                      CLEAN UP THE MESS
         L     13,SAVEAREA+4           GET CALLER'S SAVEAREA
         LA    2,WORK_AREA_LENGTH      LENGTH OF MY WORK AREA
         L     3,GETMAIN_SAVEAREA_ADDRESS  POINTER TO MY WORKAREA
         STORAGE RELEASE,LENGTH=(2),ADDR=(3)  FREEMAIN
         L     15,IEAVESTU             GET POINTER TO IBM CODE
         LM    0,12,20(13)             RESTORE GPRS
         L     14,12(13)               RESTORE GPRS
         BR    15                      GOTO TO IBM CODE
CONVERT1 EQU   *
         UNPK  WORK_VAR(9),WORKS(5)    UNPACK
         MVZ   WORK_VAR,=XL8'00'       ZONE IT
         TR    WORK_VAR,TABLE          TRANSLATE TO CHAR VALUES
         XC    WORKS,WORKS             CLEAR OUT WORKS VAR
         BR    14                      RETURN TO MAIN CODE
SMFRECNO EQU   223                     <== SMF RECORD NUMBER
TABLE    DC    C'0123456789ABCDEF'     USED FOR CONVERSION ROUTINE
LINK_LIST_FORM EQU *                   LIST FOR LINK STATEMENT
         LINK  ,SF=L
LINK_LIST_FORM_LEN EQU *-LINK_LIST_FORM
* MY WORKAREA
WORKAREA DSECT
SAVEAREA DS    18F
GETMAIN_SAVEAREA_ADDRESS DS F
SMF_AREA DS    F
WORKS    DS    CL4,C
WORK_VAR DS    CL8,C
LINK_DYN DS    CL(LINK_LIST_FORM_LEN)
JOBNAME_LEN DS XL2
JOBNAME  DS    CL8
JOBINFO_LEN DS XL2
JOBINFO  DS    CL255
WORK_AREA_LENGTH EQU *-WORKAREA
* FORMAT OF SMF RECORD
SMF_USER DSECT                         SMF USER RECORD
SMFRDW   DS    XL4                     RECORD DESCRIPTOR WORD
SMFSID   DS    XL1                     SYSTEM INDICATOR
SMFRTYPE DS    XL1                     RECORD TYPE
SMFTIME  DS    XL4                     TIME
SMFDATE  DS    PL4                     DATE
SMFSYSID DS    CL4                     SYSTEM ID
SMFJOBN  DS    CL8                     JOB NAME
SMFASID  DS    CL4                     ASID
SMFJOBID DS    CL8                     JOB ID
SMFJOBTY DS    CL3                     JOB TYPE
SMFJOBNM DS    CL5                     JOB NUMBER
SMFUSID  DS    CL8                     ASSOCIATED USERID
SMF_RECORD DS  CL20                    IEAVESTU PARM DATA
SMFRECLN EQU   *-SMF_USER
* MAPS INFORMATION PASSED BACK BY LDMASCBC
USER_RECORD DSECT
SMF_ID   DS    CL4,C
ASCB_ID  DS    CL4,C
ASCB_NAME DS   CL8,C
ASCB_CLS  DS   CL8,C
ASCB_JOBID DS  CL8,C
ASCB_JOBTY DS  CL3
ASCB_JOBNM DS  CL5,C
ASCB_USID  DS  CL8,C
         CVT DSECT=YES
         IHAPSA
         IEESMCA
         IHAASCB
         END


LDMASCBC - JME extract routine

* LINK-EDIT ATTRIBUTES : AC 1, REENT AND REUS
LDMASCBC CSECT
LDMASCBC AMODE 31
LDMASCBC RMODE ANY
         DS    0H
         B     BEGIN-LDMASCBC(,15)
         DC    C'LDMASCBC: '
         DC    C'&SYSDATE &SYSTIME, '
         DC    C'C. REID ISO PSV HSM, '
         DC    C'STANDARD LIFE ASS. CO.'
         DS    0H
BEGIN    STM   14,12,12(13)            SAVE CALLER'S REGS
         LR    12,15                   SAVE ENTRY ADDRESS
         L     10,0(1)                 FIRST PARM POINTER
         L     9,4(1)                  SECOND PARM POINTER
         USING LDMASCBC,12             ESTABLISH ADDRESSABILITY
         USING WORKAREA,11             ESTABLISH ADDRESSABILITY
START    DS    0H
         LA    2,WORK_AREA_LENGTH
         STORAGE OBTAIN,LENGTH=(2)
         LR    11,1
         ST    11,GETMAIN_ADDRESS
         LA    14,SAVEAREA
         ST    14,8(13)
         ST    13,SAVEAREA+4
         LA    13,SAVEAREA
         MVC   DSS_EYE,=CL8'LDMASCBC'  SET EYE IN GETMAINED AREA
PARM_ROUTINE EQU *
         ST    9,CALL_WORK_AREA_ADDRESS
         SR    9,9
         LA    15,16                   INIT RETURN CODE
         LRA   9,0(,10)
         BNZ   ENDIT
         LH    9,0(10)                 GET PARM LENGTH
         CH    9,=H'0'                 IS THERE A PARM?
         BE    ENDIT                   NO, WELL END IT ALL
SAVE_PARM EQU  *
         MVC   USER_PARM+0(1),=C' '
         MVC   USER_PARM+1(L'USER_PARM-1),USER_PARM
         BCTR  9,0                     ADJUST LENGTH FOR MOVE
         LA    4,USER_PARM             POINT TO PARM SAVE AREA
         EX    9,MOVE_PARM             SAVE PARM
ADDRESSABILITY EQU *
         USING PSA,0
         USING CVTMAP,1
         USING ASVT,2
         USING ASCB,3
         USING SMCABASE,4
         USING CSCB_DSECT,8
         USING ASSB,9
         USING IAZJSAB,10
POINTY_POINT EQU *
         L     1,FLCCVT
         L     2,CVTASVT
         L     4,CVTSMCA
         MVC   SYS_ID,SMCASID          SAVE SMF ID
         DROP  1,4                     NO LONGER NEED ADDRESSABILITY
FIND_THE_ASCB  EQU   *
         L     4,ASVTMAXU
         LA    5,ASVTFRST
ASCB_LOOP EQU  *
         TM    0(5),ASVTAVAI
         BO    NEXT_ASCB_ENTRY
         L     3,0(5)
CHECK_FOR_ASCB EQU *
         CLC   =F'0',ASCBJBNS
         BE    CHECK_FOR_INIT_ASCB
         L     7,ASCBJBNS
         CLC   0(8,7),USER_PARM
         BE    SAVE_ASCB_NAME
CHECK_FOR_INIT_ASCB EQU *
         CLC   =F'0',ASCBJBNI
         BE    NEXT_ASCB_ENTRY
         L     7,ASCBJBNI
         CLC   0(8,7),USER_PARM
         BNE   NEXT_ASCB_ENTRY
SAVE_ASCB_NAME EQU *
         L     8,ASCBCSCB              POINT TO CSCB
         L     9,ASCBASSB              POINT TO ASSB
         MVC   USER_RECORD+0(1),=C' '  CLEAR USER RECORD
         MVC   USER_RECORD+1(L'USER_RECORD-1),USER_RECORD
         XC    WORKS,WORKS             MAKE ASID CHARACTER
         MVC   WORKS+2(2),ASCBASID
         LA    15,CONVERT1
         BALR  14,15
         MVC   ASCB_ID+0(4),WORK_VAR+4
SAVE_VALUES EQU *
         MVC   SMF_ID,SYS_ID
         MVC   ASCB_NAME,0(7)
         MVC   ASCB_CLS,CHCLS
         MVC   WORKS+3(1),CHTRKID
         LA    15,CONVERT1
         BALR  14,15
         MVC   ASCB_TYPE+0(8),WORK_VAR+0
POINT_TO_JSAB EQU *
         L     9,ASCBASSB              POINT TO ASSB
         L     10,ASSBJSAB
         C     10,=F'0'
         BE    GOOD_CALL
         LA    6,ASCB_JOBID
JES_INFO EQU   *
         MVC   0(8,6),JSABJBNM
         MVC   9(8,6),JSABJBID
         MVC   18(8,6),JSABUSID
         L     10,JSABNEXT
         C     10,=F'0'
         BE    GOOD_CALL
         LA    6,28(6)
         B     JES_INFO
GOOD_CALL EQU *
         LA    15,0
         L     9,CALL_WORK_AREA_ADDRESS
         MVC   2(255,9),USER_RECORD
         B     ENDIT
NEXT_ASCB_ENTRY EQU *
         LA    5,4(5)
         BCT   4,ASCB_LOOP
         LA    15,12
ENDIT    DS    0H                      TIDY UP THE MESS!!
         L     13,SAVEAREA+4
         LA    2,WORK_AREA_LENGTH
         L     3,GETMAIN_ADDRESS
         STORAGE RELEASE,LENGTH=(2),ADDR=(3)
         ST    15,16(13)               SET RETURN CODE
         LM    14,12,12(13)            RESTORE GPRS
         BR    14                      GO HOME....
MOVE_PARM MVC  0(0,4),2(10)
CONVERT1 EQU   *
         UNPK  WORK_VAR(9),WORKS(5)    UNPACK
         MVZ   WORK_VAR,=XL8'00'       ZONE IT
         TR    WORK_VAR,TABLE          TRANSLATE TO CHAR VALUES
         XC    WORKS,WORKS
         BR    14
TABLE    DC    C'0123456789ABCDEF'     TRANSLATE TABLE
         LTORG
WORKAREA DSECT
SAVEAREA DS    18F
GETMAIN_ADDRESS DS    F
CALL_WORK_AREA_ADDRESS DS F
DSS_EYE  DS    CL8                     EYECATCHER IN GETMAINED AREA
SYS_ID   DS    CL4
USER_PARM DS   CL8
WORKS    DS    CL4,C
WORK_VAR DS    CL8,C
ASCB_TYPE DS   CL8,C                   MOVED FROM USER RECORD
USER_RECORD DS CL255
         ORG   USER_RECORD
SMF_ID   DS    CL4,C
ASCB_ID  DS    CL4,C
ASCB_NAME DS   CL8,C
ASCB_CLS  DS   CL8,C
ASCB_JOBID DS  CL8,C
ASCB_JOBNM DS  CL8,C
ASCB_USID  DS  CL8,C
PADDING  DS    CL(L'USER_RECORD-(*-USER_RECORD))
         ORG   ,
WORK_AREA_LENGTH EQU *-WORKAREA
         IHAPSA                        PSA
         IEESMCA                       SMCA
         CVT DSECT=YES                 CVT
         IHAASVT
         IHAASCB
         IHAASSB
         IAZJSAB
CSCB_DSECT DSECT
         IEECHAIN                      CSCB
         END


SAS Code to read SMF records

//DMCSRTZ JOB (,ISO-PSV),'PSV-MAINT/CR',CLASS=V,MSGCLASS=Y,PRTY=9,
//        NOTIFY=SL452A
/*JOBPARM S=SYSC
//STEP01   EXEC ASV6
//LIBRARY  DD DISP=SHR,DSN=AS.PRODV6.FORMAT      SAS FORMAT
//SASLIB   DD DISP=SHR,DSN=AS.PROD.FORMAT        SAS FORMAT
//SASLOG   DD SYSOUT=X                           SAS LOG FILE
//SASLIST  DD SYSOUT=X
//*ASLIST  DD SYSOUT=(A,L,STD),DEST=R18,HOLD=YES PRINT OUTPUT
//SMF      DD DISP=SHR,DSN=BD.SL452A.SMFDUMP     SMF INPUT FILE
//SOURCLIB DD DISP=SHR,DSN=DM.SL452A.SAS         USER SOURCLIB
//         DD DISP=SHR,DSN=MV.MNMXGZPX.SOURCLIB  SUPPLIED SOURCLIB
//SYSIN    DD *
OPTIONS MACROGEN ;
%INCLUDE SOURCLIB(VMACSMF,VMAC223,IMACKEEP);
DATA
_VAR223
_SMF
_CDE223
;
RUN;
*;
PROC PRINT DATA=TYPE223 SPLIT = '*' U;
VAR SMFTIME SYSTEM JOBNAME JOBASID JOBID JOBTYP JOBNUM USERID
    SVC_NO FUNCTION SVC_EP SVC_EPNM SVC_TYPE SVC_LOCK SVC_ATTR ;
*;


MACRO SOURCE

MACRO _VAR223
TYPE223
         (
          KEEP=
                   SMFTIME
                   SYSTEM
                   JOBNAME
                   JOBASID
                   JOBID
                   JOBTYP
                   JOBNUM
                   USERID
                   FUNCTION
                   SVC_VER
                   SVC_FUNC
                   SVC_NO
                   SVC_EP
                   SVC_TYPE
                   SVC_ATTR
                   SVC_LOCK
                   SVC_EPNM
         )
%
MACRO _CDE223
IF ID=223 ;
  INPUT @15+OFFSMF JOBNAME   $8.
                   JOBASID   $4.
                   JOBID     $8.
                   JOBTYP    $3.
                   JOBNUM    $5.
                   USERID    $8.
                   SVC_VER   PIB1.
                   SVC_FUNC  PIB1.
                   SVC_FLAG  PIB1.
                   SVC_NO    PIB1.
                   SVC_EP    PIB4.
                   SVC_TYPE  PIB1.
                   SVC_ATTR  PIB1.
                   SVC_LOCK  PIB1.
                   SVC_RES1  PIB1.
                   SVC_EPNM  $8.
       ;
FORMAT
   SVC_EP    HEX8.
   SVC_TYPE
   SVC_ATTR
   SVC_LOCK  HEX2.
;
LABEL
   JOBNAME  = 'JOBNAME'
   JOBASID  = 'ADDRESS*SPACE ID'
   FUNCTION = 'SVCUPDTE*FUNCTION'
   JOBID    = 'JOB*IDENTIFIER'
   JOBTYP   = 'JOB*TYPE'
   JOBNUM   = 'JOB*NUMBER'
   USERID   = 'ASSOCIATED*USERID'
   SVC_VER  = 'SVCUPDTE*VERSION ID'
   SVC_FUNC = 'SVCUPDTE*FUNCTION*CODE'
   SVC_FLAG = 'SVC*NUMBER*SUPPLIED'
   SVC_NO   = 'SVC*NUMBER'
   SVC_EP   = 'SVC*ENTRY POINT'
   SVC_TYPE = 'SVC*TYPE'
   SVC_ATTR = 'SVC*ATTRIBUTES'
   SVC_LOCK = 'SVC*LOCKS'
   SVC_RES1 = 'SVCUPDTE*RESERVED'
   SVC_EPNM = 'SVC*EP NAME'
;
SELECT;
  WHEN (SVC_FUNC = 1)    FUNCTION = 'REPLACE';
  WHEN (SVC_FUNC = 2)    FUNCTION = 'DELETE ';
  WHEN (SVC_FUNC = 3)    FUNCTION = 'EXTRACT';
  OTHERWISE              FUNCTION = 'UNKNOWN';
END;
*;
OUTPUT TYPE223;
%


Calum Reid
Standard Life Assurance Company (UK)              c Xephon 1996

