Parsing the internal text of the MVS converter

The following routine consists of three code segments used to
parse internal text created by the MVS converter.  This has
been useful to me in the JES2 exit 6 which is the JES JCL scan
exit.  It may also be useful in SMF IEFUJV exits as well as
any JES3 equivalent of JES2 exit 6.  Given an internal text
string, the open code calls macro ITXT which uses subroutine
ITXTSUB to parse internal text and return translated values.


OPEN CODE USING ITXT MACRO

         .
         .
         .
         L     R9,4(,R1)           LOAD ADDRESS OF INTERNAL TEXT
         ST    R9,TEXTLOC          SAVE FOR LATER
         USING TEXT,R9             ESTABLISH ADDRESSABILITY
         TM    STRINDCS,JOBSTR     IS THIS A JOBCARD IMAGE?
         BZ    RETURN              NO, THEN GO RETURN TO CALLER
         LR    R3,R1               SAVE R1
         ST    R9,TEXTLOC          SAVE POINTER TO INTERNAL TEXT.
         ITXT  0,2,TEXT=(R9)       FIND ACCOUNT NUMBER (SPECIAL CASE)
         LTR   R15,R15             ACCOUNT NUMBER PRESENT?
         BZ    ACCTF0              YES, GO CHECK LENGTH.
         B     MSG01               ELSE, GO PUT MSG AND EXIT
ACCTF0   CH    R0,=H'11'           IS ACCOUNT NUM 11 CHARACTERS?
         BE    ACCTF1              YES, GO VALIDATE IT
         .
         .
         .
         L     R1,TEXTLOC          POINT TO INTERNAL TEXT IMAGE.
         ITXT  TIMEJK,1,BINARY=YES GET FIRST TIME PARAMETER.
         LTR   R15,R15             IS FIRST TIME PARM PRESENT?
         BNZ   TIME2               NO, GO CHECK FOR SECOND TIME PARM
         LR    R3,R1               CONVERT MINUTES (1ST PARM) ...
         MH    R3,=H'60'           ... TO SECONDS.
TIME2    L     R1,TEXTLOC          POINT TO INTERNAL TEXT IMAGE.
         ITXT  TIMEJK,2,BINARY=YES GET SECOND TIME PARAMETER.
         LTR   R15,R15             IS SECOND TIME PARM PRESENT?
         BNZ   TIMEO               NO,  GO CHECK TIME= VS. TABLE
         AR    R3,R1               ADD SPECIFIED SECONDS
TIMEO    EQU   *                   IS TIME= ACCEPTABLE BY STANDARDS?
         .
         .
         .
         COPY  ITXTSUB             INTERNAL TEXT SUBRTN. COPY CODE
WORKAREA DSECT
SAVEAREA DS    18F
TEXTLOC  DS    A                   POINTER TO INTERNAL TEXT IMAGE


MACRO DEFINITION OF ITXT

         MACRO
&NAME    ITXT  &KEY,&POS,&SUB,&BINARY=NO,&TEXT=
.*                (SEE COMMENTS AT END)
         LCLA  &POSA,&SUBA
         LCLC  &TR
         AIF   ('&KEY' NE '').KEYOK
         MNOTE 8,'FIRST PARAMETER, KEY, MUST BE SPECIFIED.'
         MEXIT
.KEYOK   ANOP
&NAME    SR    R0,R0                         CLEAR PARM REGISTER.
         ICM   R0,B'1000',=AL1(&KEY)         LOAD KEY FOR PARM SOUGHT.
         AIF   ('&POS' EQ '').NOPOS
&POSA    SETA  &POS-1
         AIF   (&POSA LT 1).NOPOS
         ICM   R0,B'0100',=AL1(&POSA)        LOAD # OF PARM SOUGHT.
.NOPOS   AIF   ('&SUB' EQ '').NOSUB
&SUBA    SETA  &SUB-1
         AIF   (&SUBA LT 1).NOSUB
         ICM   R0,B'0010',=AL1(&SUBA)        LOAD # OF SUBPARM SOUGHT.
.NOSUB   AIF   (('&BINARY' EQ 'YES') OR ('&BINARY' EQ 'NO')).BINOK
         MNOTE 8,'BINARY MUST BE YES OR NO'
         MEXIT
.BINOK   AIF   ('&BINARY' EQ 'NO').LTEXT
         ICM   R0,B'0001',=X'80'             TURN ON BINARY FLAG.
.LTEXT   AIF   ('&TEXT' EQ '').CALL
         AIF   ('&TEXT'(1,1) NE '(').LADDR
&TR      SETC  '&TEXT'(2,K'&TEXT-2)
         LR    R1,&TR                        POINT TO INTERNAL TEXT.
         AGO   .CALL
.LADDR   LA    R1,&TEXT                      POINT TO INTERNAL TEXT.
.CALL    LA    R15,ITXTSUB                   POINT TO TEXT PARSER.
         BALR  R14,R15                       CALL TEXT PARSER.
         MEND
.**********************************************************************
.*       ITXT MACRO - CALLS ITXTSUB COPYCODE SUBROUTINE TO PARSE      *
.*            JCL INTERNAL TEXT.  SEE COPY-CODE SUBROUTINE            *
.*            ITXTSUB FOR DOCUMENTATION.  NOTE THAT IN THIS MACRO     *
.*            "POS" AND "SUB" ARE 1-BASED, AND IN THE SUBROUTINE      *
.*            ARE 0-BASED.  IN OTHER WORDS, IF YOU MAKE POS = 2,      *
.*            1 WILL BE PASSED TO THE SUBROUTINE, AND IT IN TURN      *
.*            WILL FIND THE SECOND POSITIONAL PARAMETER.              *
.*       PARAMETERS:                                                  *
.*            KEY - KEYWORD NUMBER.  SEE MACRO IEFVKEYS, EXCEPT       *
.*                  THAT IF KEY=0, ROUTINE WILL PARSE LEADING         *
.*                  POSITIONAL PARAMETERS.                            *
.*            POS - NUMBER OF POSITIONAL PARAMETER.  DEFAULT: 1.      *
.*            SUB - NUMBER OF POSITIONAL SUBPARAMETER.  DEFAULT:      *
.*                  1; IGNORED IF NO SUBPARAMETERS.                   *
.*            BINARY - YES OR NO.  IF YES, RETURNS NUMERIC PARM       *
.*                  AS BINARY FULLWORD IN REGISTER 1.                 *
.*            TEXT - POINTER TO TEXT STRING.  REGISTER NOTATION       *
.*                  ALLOWED.  IF PARAMETER OMITTED, THE ASSUMPTION    *
.*                  IS THAT TEXT IS POINTED TO BY REGISTER 1.         *
.**********************************************************************


ITXTSUB SUBROUTINE

*** ITXTSUB - SUBROUTINE TO PARSE OS INTERNAL TEXT.  THE ROUTINE    ***
*       IS PASSED A SPECIAL KEY OR THE LABEL OF A KEYWORD FROM THE    *
*       IEFVKEYS MACRO.  IT RETURNS THE VALUE OF THE PARAMETER.       *
*       THIS SUBROUTINE IS MACLIB RESIDENT.  TO USE,                  *
***      COPY  ITXTSUB                                              ***
*       INPUTS: R0, BYTE 0: CONVERTER/INTERPRETER KEY CORRESPOND-     *
*                           ING TO THE KEYWORD SOUGHT.  USE MACRO     *
*                           IEFVKEYS FOR KEY EQUATES.  A SPECIAL      *
*                           PSEUDO-KEY OF X'00' IS USED TO TELL       *
*                           ITXTSUB TO RETURN LEADING POSITIONAL      *
*                           PARAMETERS (JOBNAME, ACCOUNT INFO,        *
*                           PROGRAMMER NAME, DDNAME, STEPNAME,        *
*                           ETC.)                                     *
*               R0, BYTE 1: ZERO ORIGIN NUMBER OF PARAMETER,          *
*                           (FOR EXAMPLE, IF USER SPECIFIES           *
*                           TIME=(11,99), THE "11" IS PARAMETER       *
*                           0 AND THE "99" IS PARAMETER 1).           *
*               R0, BYTE 2: ZERO ORIGIN NUMBER OF SUB PARAMETER       *
*                           (RARE; FOR EXAMPLE, THE ROOM NUMBER,      *
*                           IS SUB PARAMETER 1 OF THE SECOND          *
*                           POSITIONAL JOB CARD PARAMETER).           *
*               R0, BYTE 3: FLAGS:                                    *
*                           X'80' - RETURN VALUE OF PARM IN R1 AS     *
*                                   BINARY FULLWORD.                  *
*               R1:         POINTER TO INTERNAL TEXT STRING.          *
*      OUTPUTS: R1: BINARY VALUE IF BINARY FLAG SET UPON INPUT,       *
*                   OR POINTER TO PARAMETER TEXT.                     *
*               R0: IF BINARY FLAG NOT SET UPON INPUT, LENGTH OF      *
*                   PARAMETER TEXT.                                   *
*              R15: CONDITION CODE AS FOLLOWS:                        *
*                   00: RESULT RETURNED WITHOUT ERROR.                *
*                   04: PARAMETER SOUGHT IS NULL.                     *
*                   08: KEYWORD DOES NOT EXIST OR FEWER POSITIONAL    *
*                       PARAMETERS EXIST THAN PARAMETER SOUGHT.       *
*                   12: INVALID NUMERIC FIELD.  BINARY OPTION         *
*                       CANCELLED (TEXT RETURNED AS NORMAL).          *
*                   16: INVALID INTERNAL TEXT STRING.                 *
*   NOTE THAT THIS ROUTINE USES THE CALLER'S SAVE AREA, BUT DOES      *
*   NOT PROVIDE ONE OF ITS OWN AS IT CALLS NO OTHER ROUTINES.         *
*        SYSLIB: 'SYS1.AMODGEN'                                       *
*        MACROS REQUIRED: IEFTXTFT, IEFVKEYS                          *
*   REGISTER USAGE:  R2: LENGTH OF TEXT STRING.                       *
*                    R4: TEXT KEY TO SEARCH FOR.                      *
*                   R11: ADDRESS OF X'FE' AT END OF TEXT STRING.      *
         DROP  R1
         USING TEXT,R1             ESTABLISH ADDRESSABILITY
ITXTSUB  STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R4,R0               COPY PARM REGISTER.
         LH    R2,STRLTH           LOAD LEN(ENTIRE TEXT STRING)
         LA    R11,STRLTH(R2)      POINT PAST LAST CHARACTER.
         BCTR  R11,*-*             BUMP BACK TO LAST CHARACTER.
         CLI   0(R11),ENDK         NORMAL END OF INTERNAL TEXT?
         BNE   ITXTEX16            B IF NOT.  EXIT WITH CC 16.
         TM    STRINDCS,JOBSTR     JOB CARD INTERNAL TEXT?
         BZ    ITXTCE              B IF NOT.  CHECK FOR EXEC CARD.
         CLI   STRJKEY,JOBK        IS THIS REALLY A JOB CARD?
         BNE   ITXTEX16            B IF NOT.  EXIT WITH CC 16.
         LA    R1,STRJKEY+1        POINT TO TRUE TEXT START.
         B     ITXT0               CONTINUE.
ITXTCE   TM    STRINDCS,EXECSTR+PROCSTR  EXEC/PROC INTERNAL TEXT?
         BZ    ITXTCDD             B IF NOT.  CHECK FOR DD CARD.
         CLI   STREKEY,EXECK       IS THIS AN EXEC OR PROC CARD?
         BNE   ITXTEX16            B IF NOT.  EXIT WITH CC 16.
         LA    R1,STREKEY+1        POINT TO TRUE TEXT START.
         B     ITXT0               CONTINUE.
ITXTCDD  TM    STRINDCS,DDSTR      DD CARD INTERNAL TEXT?
         BZ    ITXTEX16            B IF NOT.  EXIT WITH CC 16.
         CLI   STREKEY,DDK         IS THIS REALLY A DD CARD?
         BNE   ITXTEX16            B IF NOT.  EXIT WITH CC 16.
         LA    R1,STREKEY+1        POINT TO TRUE TEXT START.
         DROP  R1                  DROP ADDRESSABILITY
*       AT THIS POINT, R1 POINTS PAST THE FUNCTION KEY TO THE         *
*       BEGINNING OF THE TEXT STRING ITSELF, AT THE "NUMBER OF        *
*       POSITIONAL PARAMETERS" POINT.                                 *
ITXT0    SRDL  R4,24               MOVE KEY PARM TO LOW ORDER BYTE.
         LTR   R4,R4               CALLER WANT NON-KEYWORD POS. ...
*                                  ... PARAMETER (SPECIAL KEY OF 00)?
         BZ    ITXTKF0             B IF YES.  CONTINUE AT KEY-FOUND.
         BAL   R10,ITXTSK          SKIP MAIN POSITIONAL PARMS.
ITXT1    CR    R1,R11              ARE WE STILL WITHIN TEXT STRING?
         BNL   ITXTEX08            B IF NOT.  KEY NOT FOUND.
         EX    R4,ITXTCK           IS THIS THE KEYWORD SOUGHT?
*      ( CLI   0(R1),*-*           )
         LA    R1,1(,R1)           PT. TO LEN. OF KEYWORD POS. VALUE.
         BE    ITXTKF0             B IF YES.  FOUND KEY.
         BAL   R10,ITXTSK          SKIP KEYWORD POSITIONAL VALUE.
         B     ITXT1               LOOP, SEARCHING FOR KEY.
*       AT THIS POINT, KEYWORD IS FOUND.                              *
ITXTKF0  SR    R4,R4               CLEAR PARM REGISTER.
         SLDL  R4,8                MOVE PARAMETER POSITION NUM TO R4.
         SR    R14,R14             SET PARM POSITION COUNTER TO ZERO.
         SR    R0,R0               LOAD NUMBER ...
         ICM   R0,B'0001',0(R1)    ... OF POSITIONAL PARAMETERS.
         BZ    ITXTEX04            B IF NO PARAMETERS.  EXIT W/CC=4.
         LA    R1,1(,R1)           BUMP TEXT CURSOR TO 1ST LENGTH.
ITXTKF1  CR    R4,R14              IS THIS THE POSITIONAL SOUGHT?
         BE    ITXTPF0             B IF YES.
         TM    0(R1),X'80'         DOES THIS PARM HAVE SUB PARMS?
         BZ    ITXTKF3             B IF NOT.  SKIP THE PARM.
         IC    R10,0(,R1)          LOAD COUNT OF SUB PARMS.
         N     R10,=A(X'0000007F') TURN OFF SUB PARM FLAG.
         LA    R1,1(,R1)           BUMP CURSOR TO LENGTH FIELD.
ITXTKF2  SR    R15,R15             LOAD LENGTH ...
         IC    R15,0(,R1)          ... OF SUB PARM.
         LA    R1,1(R15,R1)        POINT TO NEXT SUB PARM LENGTH.
         BCT   R10,ITXTKF2         BUMP TO NEXT SUB PARM.
         B     ITXTKF4             CONTINUE.
ITXTKF3  SR    R15,R15             CLEAR INSERT REGISTER.
         IC    R15,0(,R1)          LOAD LENGTH OF PARM TO BE SKIPPED.
         LA    R1,1(R15,R1)        SKIP TO NEXT PARM.
ITXTKF4  LA    R14,1(,R14)         BUMP CURRENT PARM NUMBER.
         BCT   R0,ITXTKF1          LOOP TO CHECK NEXT POS. PARM.
         B     ITXTEX08            EXIT WITH CC 8 IF NO MORE POS.
*       AT THIS POINT, PROPER POSITIONAL PARM FOUND.                  *
ITXTPF0  SR    R4,R4               CLEAR PARM REGISTER.
         SLDL  R4,8                MOVE SUBPARM. POSITION NUM TO R4.
         TM    0(R1),X'80'         ANY SUBPARAMETERS PRESENT?
         BO    ITXTPF1             B IF YES.
         LTR   R4,R4               IS SUBPARM. 0 SOUGHT?
         BZ    ITXTSF0             B IF YES.  SIMULATE SUBPARM FOUND.
         B     ITXTEX08            B IF NOT.  EXIT W/ CC=8.
ITXTPF1  SR    R14,R14             SET SUBPARM COUNT TO 0.
         IC    R10,0(,R1)          LOAD NUMBER OF SUBPARMS. PRESENT.
         N     R10,=A(X'0000007F') REMOVE SUBPARAMETER FLAG.
         LA    R1,1(,R1)           BUMP CURSOR.
ITXTPF2  CR    R4,R14              IS THIS THE SOUGHT SUBPARAMETER?
         BE    ITXTSF0             B IF YES.  SUBPARM FOUND.
         LA    R14,1(,R14)         BUMP CURRENT SUBPARAMETER COUNT.
         SR    R15,R15             LOAD LENGTH ...
         IC    R15,0(,R1)          ... OF THIS SUBPARAMETER.
         LA    R1,1(R15,R1)        BUMP CURSOR PAST THIS SUBPARM.
         BCT   R10,ITXTPF2         CHECK NEXT SUBPARAMETER.
         B     ITXTEX08            EXIT W/CC=8 IF NO MORE SUBPARMS.
*       HERE IF SUBPARAMETER OR ONLY PARAMETER VALUE FOUND.           *
ITXTSF0  SR    R14,R14             CLEAR LENGTH REGISTER.
         ICM   R14,B'0001',0(R1)   LOAD LENGTH OF SUBPARM.
         BZ    ITXTEX04            EXIT W/CC=4 IF NULL PARM.
         LR    R0,R14              COPY LENGTH TO RETURN REGISTER.
         LA    R1,1(,R1)           POINT TO PARM ITSELF.
         SRL   R5,24               MOVE INPUT FLAGS TO LOW ...
*                                  ... ORDER BYTE OF REGISTER.
         EX    R5,ITXTTFB          WAS BINARY FLAG SPECIFIED?
*      ( TM    =X'80',*-*          )
         BZ    ITXTEX00            EXIT IF NOT WITH CC = 00.
         CH    R14,=H'15'          PARM OVER 15 CHARACTERS?
         BH    ITXTEX12            EXIT WITH CC=12 IF YES.
         BCTR  R14,*-*             DECREMENT LENGTH FOR SS INSTS.
         LR    R15,R1              PRESERVE PARM PTR. FROM TRT INST.
         EX    R14,ITXTNTRT        CHECK IF PARM ALL NUMERIC.
*      ( TRT   0(*-*,R15),ITXT#TAB )
         LR    R1,R15              RESTORE PARM POINTER.
         BNZ   ITXTEX12            IF NOT NUMERIC, EXIT W/CC=12.
         EX    R14,ITXTPACK        PACK THE PARM (USING CALLER'S ...
*                                  ... SAVE AREA, R0-R1).
*      ( PACK  X'14'(8,R13),0(*-*,R1)  )
         CVB   R1,X'14'(,R13)      CONVERT PARM TO BINARY.
         B     ITXTEX00            EXIT W/CC=00.
*       EXIT FROM ITXT WITH APPROPRIATE CONDITION CODE.               *
ITXTEX16 LA    R15,16              SET CC = 16.
         B     ITXTEXIT            CONTINUE.
ITXTEX12 LA    R15,12              SET CC = 12.
         LM    R2,R12,28(R13)      RELOAD CALLER'S REGISTERS.
         L     R14,12(,R13)        RELOAD CALLER'S RETURN ADDRESS.
         BR    R14                 RETURN TO CALLER.
ITXTEX08 LA    R15,8               SET CC = 8.
         B     ITXTEXIT            CONTINUE.
ITXTEX04 LA    R15,4               SET CC = 4.
         B     ITXTEXIT            CONTINUE.
ITXTEX00 SR    R15,R15             SET CC = 0.
         LM    R2,R12,28(R13)      RELOAD CALLER'S REGISTERS.
         L     R14,12(,R13)        RELOAD CALLER'S RETURN ADDRESS.
         BR    R14                 RETURN TO CALLER.
ITXTEXIT LM    R0,R12,20(R13)      RELOAD CALLER'S REGISTERS.
         L     R14,12(,R13)        RELOAD CALLER'S RETURN ADDRESS.
         BR    R14                 RETURN TO CALLER.
*       ITXTSK INTERNAL SUBROUTINE: SKIPS OVER POSITIONAL             *
*       PARAMETERS (NO STANDARD LINKAGE; BAL USING R10).              *
ITXTSK   SR    R0,R0               CLEAR INSERT REGISTER FOR COUNT.
         SR    R15,R15             CLEAR INSERT REGISTER FOR LENGTTH.
         IC    R0,0(,R1)           LOAD NUMBER OF POSITIONAL PARMS.
         LA    R1,1(,R1)           BUMP CURSOR TO LENGTH FIELD.
*        (ITXTLPL0 LOOP SKIPS OVER POSITIONAL PARMS).
ITXTLPL0 TM    0(R1),X'80'         SUB PARAMETERS?
         BZ    ITXTLPL2            B IF NOT.  SKIP TO NEXT PARM.
         IC    R14,0(,R1)          LOAD NUMBER OF SUBPARAMETERS.
         N     R14,=A(X'0000007F') REMOVE SUBPARAMETER FLAG.
         LA    R1,1(,R1)           BUMP TO FIRST LENGTH FIELD.
*        (ITXTLPL1 LOOP SKIPS OVER POSITIONAL SUBPARAMETERS).
ITXTLPL1 SR    R15,R15             CLEAR INSERT REGISTER.
         IC    R15,0(,R1)          LOAD LENGTH OF SUBPARAMETER.
         LA    R1,1(R15,R1)        POINT TO NEXT SUBPARAMETER.
         BCT   R14,ITXTLPL1        LOOP IF MORE SUBPARAMETERS.
         B     ITXTPL3             CONTINUE.
*        (END OF ITXTLPL1)
ITXTLPL2 IC    R15,0(,R1)          LOAD LENGTH OF POSITIONAL PARM.
         LA    R1,1(R15,R1)        POINT TO NEXT POSITIONAL PARM.
ITXTPL3  BCT   R0,ITXTLPL0         LOOP IF MORE POSITIONAL PARMS.
*        (END OF ITXTLPL0)
         BR    R10                 RETURN TO CALLER IN ITXT.
ITXTCK   CLI   0(R1),*-*           *** EXECUTED ***
ITXTTFB  TM    =X'80',*-*          *** EXECUTED ***
ITXTPACK PACK  X'14'(8,R13),0(*-*,R1) *** EXECUTED ***
ITXTNTRT TRT   0(*-*,R15),ITXT#TAB *** EXECUTED ***
ITXT#TAB DC    256X'FF'            NUMERIC CHARACTER FILTERING ...
*                                  ... TRANSLATE-AND-TEST TABLE.
         ORG   ITXT#TAB+C'0'
         DC    10X'00'             (ZERO ENTRIES FOR NUMERIC DIGITS).
         ORG   ,
*       END OF COPY-CODE SUBROUTINE ITXTSUB.                          *


                                                      c Reserved 1991

