CSA allocation monitor

CSA usage has been a major concern at many of the
installations where I have worked, as I am sure it is at most
sites. If your installation happens to be one of those that
doesn't have endless financial resources to purchase a product
that produces a comprehensive report of CSA usage, or if you
do not have the time to write your own monitor, the following
piece of code may help you in monitoring CSA usage.

The information is extracted from the CSA subpool table
pointed to by the Global Data Area (GDA) at location X'88',
label name GDASPT (see Figure 1).  Figure 2 shows an
example of the output produced by this routine.

         TITLE 'CSAALLOC - REPORT ON CSA ALLOCATION'
*---------------------------------------------------------------*
* THIS PROGRAM ANALYSES CSA SUBPOOL CONTROL BLOCKS AND PRODUCES *
* A REPORT ON CSA USAGE ON XA AND ESA SYSTEMS.                  *
* THE JCL TO EXECUTE THIS PROGRAM IS AS FOLLOWS:                *
*   //STEP01 EXEC PGM=CSAALLOC                                  *
*   //OUTDD  DD SYSOUT=*                                        *
*---------------------------------------------------------------*
CSAALLOC CSECT
CSAALLOC AMODE  31
CSAALLOC RMODE  24
* S T A N D A R D   H O U S E K E E P I N G
         STM    R14,R12,12(R13)   SAVE REGS (EXTERNAL SAVE AREA)
         LR     R12,R15           ENTRY POINT OF THIS PGM
         USING  CSAALLOC,R12      ESTABLISH ADDRESSABILITY
         ST     R13,REGSAVE+4     SAVE EXTERNAL SAVE AREA ->
         LA     R5,REGSAVE        ADDRESS OF MY SAVE AREA
         ST     R5,8(R13)         CHAIN SAVE AREAS
         LR     R13,R5            R13 NOW -> TO MY SAVE AREA
* O P E N   O U T D D   D A T A S E T *
         OPEN   (OUTDD,(OUTPUT))
* A D D R E S S A B I L I T Y   T O   G D A *
         L      R3,CVTPTR         POINTER TO CVT
         USING  CVTMAP,R3         ADDRESSABILITY TO CVT
         L      R10,CVTGDA        ADDRESS OF GDA
         USING  GDA,R10           ADDRESSABILITY TO GDA
* W R I T E   H E A D E R   R E C O R D *
         MVC    OUTREC(80),SPHEAD MOVE HEADER TO OUTPUT REC
         BAL    R4,WRITEREC       GO WRITE RECORD TO OUTDD
* C A L C   S U B P O O L   A L L O C A T I O N   B Y   K E Y *
         L      R6,GDASPT         GET POINTER TO SUBPOOL TABLE
         LA     R6,4(,R6)         POINT PAST CHARS "SPT"
         ST     R6,SAVESPT        SAVE ADDRESS OF SPT
NEXTKEY  DS     0H
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP227 VB,BB)
         MVC    SP#227#1(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP227 VB,BA)
         MVC    SP#227#2(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP227 VA,BA)
         MVC    SP#227#3(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,368(,R6)          POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP228 VB,BB)
         MVC    SP#228#1(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP228 VB,BA)
         MVC    SP#228#2(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP228 VA,BA)
         MVC    SP#228#3(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,368(,R6)          POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP231 VB,BB)
         MVC    SP#231#1(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP231 VB,BA)
         MVC    SP#231#2(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP231 VA,BA)
         MVC    SP#231#3(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,368(,R6)          POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP241 VB,BB)
         MVC    SP#241#1(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP241 VB,BA)
         MVC    SP#241#2(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         LA     R6,8(,R6)            POINT TO NEXT SPT DQE ANCHOR
         BAL    R4,DQEANLZ           ANALYSE THIS DQE(SP241 VA,BA)
         MVC    SP#241#3(8),DQESIZE  GET SIZE THIS DQE DESCRIBES
         MVC    OUTREC(80),SPALOC#1  MOVE RECORD TO OUTPUT
         BAL    R4,WRITEREC          GO WRITE IT TO OUTFILE
         MVC    OUTREC(80),SPALOC#2  MOVE RECORD TO OUTPUT
         BAL    R4,WRITEREC          GO WRITE IT TO OUTFILE
         MVC    OUTREC(80),SPALOC#3  MOVE RECORD TO OUTPUT
         BAL    R4,WRITEREC          GO WRITE IT TO OUTFILE
         AP     KEYCOUNT(2),=PL1'1'    INC KEY COUNT BY ONE
         OI     KEYCOUNT+1,X'0F'       CORRECT SIGN
         CLC    KEYCOUNT(2),=XL2'016F' ALL KEYS DONE?
         BE     RETURN                 YES..TIME TO END
         UNPK   UNPKFLD(3),KEYCOUNT(2) NO..UNPK THIS KEY NUMBER
         MVC    KEYNUM(2),UNPKFLD+1    MOVE KEY NUMBER TO RECORD
         L      R6,SAVESPT             RESTORE SPT POINTER
         LA     R6,24(,R6)             POINT TO NEXT KEYS ENTRY
         ST     R6,SAVESPT             SAVE SPT POINTER
         B      NEXTKEY                DQE ANALYSE FOR THIS KEY
* R E T U R N   T O   C A L L E R *
RETURN   DS     0H
         CLOSE  OUTDD              CLOSE OUTDD FILE
         L      R13,REGSAVE+4      RESTORE ORIGINAL R13
         LM     R14,R12,12(R13)    RESTORE ORIGINAL REG CONTENTS
         SR     R15,R15            PLUG RETURN CODE
         BR     R14                BYE FOR NOW
* D Q E   A N A L Y S E   S U B R O U T I N E *
DQEANLZ  DS     0H
         ST     R4,SAVE4           SAVE CALLERS RETURN ADDRESS
         L      R7,0(R6)           GET POINTER TO FIRST DQE
         L      R8,4(R6)           GET POINTER TO LAST DQE
         SR     R5,R5              CLEAR TOTAL SPACE COUNTER
NEXTDQE  DS     0H
         CL     R7,8(R7)           DQEFFQE -> BACK TO DQE
         BE     ISSPACE            YES..THEN SPACE IS PRESENT
         L      R10,8(R7)          NO..GET ADRS OF FQE INTO R10
         CL     R7,16,(R10)        DOES THIS FQE -> TO DQE
         BNE    NOSPACE            NO SPACE = 0
ISSPACE  EQU    *
         AL     R5,20(R7)          NO..ADD SIZE TO TOTAL
NOSPACE  EQU    *
         CR     R8,R7              IS THIS THE LAST DQE?
         BE     DQETOT             YES..CONVERT TOT SIZE TO EBCDIC
         L      R7,0(R7)           NO..GET ADRS OF NEXT DQE
         B      NEXTDQE            GO DO THIS ONE
DQETOT   DS     0H
         BAL    R4,XLATE                  GO CONVERT TO EBCDIC
         CLC    EBCDIC(8),=CL8'00000000'  SIZE=0 ?
         BNE    SIZENOT0                  NO..WRITE OUT SIZE
         MVC    DQESIZE(8),=CL8'........' YES.. MOVE IN ........
         B      GOBACK                    BACK TO MAIN ROUTINE
SIZENOT0 DS     0H
         MVC    DQESIZE(8),EBCDIC         GET EBCDIC REPRESENTATION
GOBACK   DS     0H
         L      R4,SAVE4                  RESTORE RETURN ADDRESS
         BR     R4                        RETURN TO MAIN ROUTINE
SAVE4    DS     F
DQESIZE  DS     CL8
* S W I T C H   T O   A M O D E   =   2 4   S U B R O U T I N E *
SET24    DS     0H
         STM    R4,R5,SAVE45           SAVE CALLERS R4 AND R5
         LA     R5,ADRS24              READY R5 WITH BRANCH ADDRESS
         BASSM  R4,R5                  BRANCH. AMODE IS SET TO 24
ADRS24   DS     0H
         LM     R4,R5,SAVE45           RESTORE CALLERS REGS
         BR     R4                     BACK TO CALLER
* S W I T C H   T O   A M O D E   =   3 1   S U B R O U T I N E *
SET31    DS     0H
         STM    R4,R5,SAVE45           SAVE CALLERS R4 AND R5
         LA     R5,ADRS31              READY R5 WITH BRANCH ADDRESS
         ST     R5,FWD                 STORE BRANCH ADDRESS
         OI     FWD,X'80'              HIGH ORDER BIT ON
         L      R5,FWD                 BRANCH ADRS BACK INTO R5
         BASSM  R4,R5                  BRANCH. AMODE IN NOW 31 BIT
ADRS31   DS     0H
         LM     R4,R5,SAVE45           RESTORE CALLERS REGISTERS
         BR     R4                     BACK TO CALLER
SAVE45   DS     2F
* W R I T E   R E C O R D   T O   O U T D D   R O U T I N E *
WRITEREC DS     0H
         ST     R4,SAVE4W               SAVE CALLERS R4
         BAL    R4,SET24                GO GET INTO AMODE=24
         PUT    OUTFILE,OUTDD           WRITE RECORD TO OUTDD
         BAL    R4,SET31                GO GET INTO AMODE=31
         L      SAVE4W                  RESTORE CALLERS R4
         BR     R4                      RETURN TO CALLER
SAVE4W   DS     F
* C O N V E R T   T O   D E C I M A L *
         CVD    R5,DWD                  CONVERT TO DECIMAL
         OI     DWD+7,X'0F'             CORRECT SIGN
         MVC    EDIT(12),EDITMASK       EXTRACT EDIT MASK VALUE
         EDMK   EDIT(12),DWD+2          EDIT
         MVC    DECVAL(12),0(R1)        EXTRACT EDITED RESULT
         BR     R4                      RETURN TO CALLER
DECVAL   DS     CL12
EDIT     DC     XL12'402020202020202020202020'
         DC     CL4' '
EDITMASK DC     XL12'402020202020202020202020'
* H E X   T O   E B C D I C   C O N V E R S I O N *
XLATE    DS     0H
         STM    R4,R8,XLATESAV          JUST IN CASE SAVE REGS
         LA     R8,EBCDIC               -> TO EBCDIC RESULT FLD
         ST     R5,HEXVAL               EXTRACT HEX VALUE
         LA     R6,HEXVAL               -> TO START OF HEX VALUE
         XR     R4,R4                   CLEAR HEX CHAR COUNT
         XR     R7,R7                   CLEAR
XLATE1   DS     0H
         IC     R7,0(R6)                GET HEX CHARACTER
         SRL    R7,4                    LOSE 2ND HALF OF HEX CHAR
         STCM   R7,1,0(R8)              SAVE 1ST HALF HEX CHAR
         NI     0(R6),X'0F'             LOSE 1ST HALF OF HEX CHAR
         MVC    1(1,R8),0(R6)           SAVE 2ND HALF OF HEX CHAR
         LA     R4,1(,R4)               INC HEX CHAR COUNT
         CL     R4,=F'4'                ALL HEX CHARS READY FOR TR?
         BE     TRANS                   YES..DO TRANSLATE
         LA     R8,2(,R8)               NO..READY FOR NEXT HEX CHAR
         LA     R6,1(,R6)               POINT TO NEXT HEX CHAR
         B      XLATE1                  GET NEXT HEX CHAR READY
TRANS    DS     0H
         LA     R8,EBCDIC               -> TO MANIPULATED HEX CHARS
         TR     0(8,R8),TRANSTAB        TRANSLATE TO EBCDIC
         LM     R4,R8,XLATESAV          RESTORE REGS
         BR     R4                      RETURN TO CALLER
HEXVAL   DS     F
EBCDIC   DS     CL8
TRANSTAB DC     CL16'1234567890ABCDEF'
XLATESAV DS     5F
         LTORG
OUTDD    DCB    DDNAME=OUTDD,DSORG=PS,RECFM=FB,MACRF=(PM)
FWD      DS     F
DWD      DS     D
KEYCOUNT DC     PL2'0'
UNPKFLD  DS     CL3
SAVESPT  DS     F
SP227TOT DC     F'00'
SP228TOT DC     F'00'
SP231TOT DC     F'00'
SP241TOT DC     F'00'
FINAL    DS     0CL80
TOTTOT   DS     CL8
         DC     CL72' '
OUTREC   DS     CL80
SPHEAD   DS     0CL80
         DC     CL13' '
         DC     CL6'SP 227'
         DC     CL5' '
         DC     CL6'SP 228'
         DC     CL5' '
         DC     CL6'SP 231'
         DC     CL5' '
         DC     CL6'SP 241'
         DC     CL28' '
SPALOC#1 DS     0CL80
         DC     CL3'KEY'
KEYNUM   DC     CL2'00'
         DC     CL1' '
SP#LOC#1 DC     CL5'VB,BB'
         DC     CL1' '
SP#227#1 DS     CL8
         DC     CL3' '
SP#228#1 DS     CL8
         DC     CL3' '
SP#231#1 DS     CL8
         DC     CL3' '
SP#241#1 DS     CL8
         DC     CL27' '
SPALOC#2 DS     0CL80
         DC     CL6' '
SP#LOC#2 DC     CL5'VB,BA'
         DC     CL1' '
SP#227#2 DS     CL8
         DC     CL3' '
SP#228#2 DS     CL8
         DC     CL3' '
SP#231#2 DS     CL8
         DC     CL3' '
SP#241#2 DS     CL8
         DC     CL27' '
SPALOC#3 DS     0CL80
         DC     CL6' '
SP#LOC#3 DC     CL5'VA,BA'
         DC     CL1' '
SP#227#3 DS     CL8
         DC     CL3' '
SP#228#3 DS     CL8
         DC     CL3' '
SP#231#3 DS     CL8
         DC     CL3' '
SP#241#3 DS     CL8
         DC     CL27' '
REGSAVE  DS     18F
         IHAGDA
         CVT DSECT=YES
         END    CSAALLOC


Dieter Applelhans
Consultant Systems Programmer
Sysdisc Ltd (UK)                                                   c Xephon 1991

