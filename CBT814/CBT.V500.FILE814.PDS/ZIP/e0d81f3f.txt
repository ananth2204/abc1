Automating DFDSS defragmentation processing

During the course of implementing DFSMS, I found a need to
make DFDSS defragmentation processing more dynamic and
responsive to system changes. Prior to DFSMS, jobs had been
set up to defragment pre-selected volumes at pre-selected
intervals. As DFSMS was implemented, volume serial numbers
were converted to new standard names. This forced frequent
changes to the defragmentation jobs to stay current with the
new volume serial numbers. At the same time, I was concerned
that defragmentation jobs were not always running against the
correct packs at the proper intervals. Under DFSMS, DASD
fragmentation tended to be difficult to predict as pools were
consolidated and opened up to a broader range of allocations.
Previously, we had separated test, production, TSO, database,
etc, so the individual pools were more predictable. To
overcome this, I wrote a program to determine dynamically
which volumes were candidates for defragmentation and in turn
invoke DFDSS to perform the defragmentation. By running
this program regularly, volumes needing defragmentation are
detected and processed in a changing environment as
appropriate.

The Assembler program, called DYNDFRAG, is written to
interface with IDCAMS DCOLLECT to retrieve current
volume information. In turn, this information is used to
construct calls to DFDSS defragmentation using desired
selection criteria. Information retrieved from DCOLLECT to
use in the selection process includes volume serial number,
fragmentation index, number of extents, and largest extent.
The program is instructed on what to do via the PARM
keyword on the EXEC statement. Parameters used to determine
what to defragment include VL to select volumes, SG to select
storage groups, FX to select on fragmentation index, NX to
select on number of extents, and LX to select based on largest
extent. In addition to these selection criteria, the program
allows for EXCLUDE, BY, MAXMOVE, PASSDELAY, and
WAIT requests to be passed on to DFDSS once appropriate
volumes are selected.

By default, the program considers all volumes as candidates for
defragmentation, then condenses the list from there. The VL
and SG parameters can be used to refine the list of volumes
from which DCOLLECT retrieves data. An asterisk (*) mask is
available to indicate all remaining characters. For example, a
parameter of 'VL=S9*' will select all volumes having 'S9' as
the first two characters. SG=SG3390 would select all volumes
in the DFSMS SG3390 storage group. By specifying the
XVOL parameter in conjunction with input to the EXCLVOLS
DD, volumes can be excluded individually. After DCOLLECT
returns with data for the requested volumes, the FX, NX, and
LX parameters are applied to restrict the list further. If FX or
NX are coded and a volume has a smaller fragmentation index
or number of extents, it will not be defragmented.
Defragmentation is also bypassed if LX is coded and a volume
has a larger extent. For example, if NX=050 is coded and a
volume has 45 free extents, it is bypassed. If any of the
selection criteria are coded together, any one match will fail the
volume. If no FX, NX, or LX parameters are coded, the
program will use a default of FX=300 which generally achieves
acceptable results. Once the volume list is selected and passed
on to DFDSS, individual dataset relocation can be controlled
using input to the DFDSS EXCLUDE and BY DDs if so desired.

Two options are available to assist in refining the process prior
to live runs. The SIM keyword is used to inform DYNDFRAG
to display only the input that would have been passed to
DFDSS. The content of these statements can then be examined
prior to an actual run. The NORUN keyword is used by
DYNDFRAG to call DFDSS in 'NORUN' mode. In this mode,
only fragmentation statistics are produced for selected volumes.
During a live or NORUN execution of the program, a message
is displayed to indicate the volume currently being processed.
If a non-zero return code is returned from DFDSS, a message
is displayed indicating SYSPRINT should be examined. The
SYSPRINT output is exactly as received from DFDSS. When
reviewing the SYSPRINT, treat it as you would any normal
DFDSS DEFRAG execution.

I have found this program to be an excellent complement to my
DFSMS environment. Since it was installed, our storage
administrator rarely needs to be concerned with
defragmentation analysis. When preparing to use
DYNDFRAG, remember to link it authorized. This is required
because of the calls to IDCAMS and DFDSS. Sample JCL to
execute DYNDFRAG along with further comments on the
available keywords follows. The JCL includes examples for
coding most of the parameters.


SAMPLE JCL

//*
//*  Parm values: SIM; When specified no defrag takes place, only the
//*                    simulated input to DFDSS is displayed.
//*               NORUN; When specified, DFDSS is called in 'norun' mode.
//*               VL=; Volume(s) eligible for defrag.  Mask * can be used to
//*                    indicate all remaining characters. If neither SG nor VL
//*                    are coded, the default is all (*).
//*               SG=; Storage group eligible for defrag, no default.
//*               FX=; Fragmentation index, volumes with a smaller index will
//*                    not be defragged.  Three digits with leading zeros.  If
//*                    FX, NX, or LX are not coded the default is 300.
//*               NX=; Number of extents, volumes with a smaller number of
//*                    extents will not be defragged.  Three digits with leading
//*                    zeros, no default.
//*               LX=; Largest extent, volumes with an extent larger than that
//*                    coded will not be defragged.  Six digits with leading
//*                    zeros in kilobytes, no default.
//*               XVOL; Volumes contained in the EXCLVOLS DD are not defragged.
//*                     EXCLVOLS format is one record per volume left justified.
//*               XDSN; Datasets contained in the EXCLDSNS DD are not relocated.
//*               BY; Informs DFDSS there are filtering criteria contained in
//*                   the FILTERBY DD. Only datasets passing these criteria will
//*                   be relocated.
//*               WT=; Wait time, passed on to DFDSS in the WAIT keyword.
//*               MX=; Maxmove, passed on to DFDSS in the MAXMOVE keyword.
//*               PD=; Passdelay, passed on to DFDSS in the PASSDELAY keyword.
//*      Notes: 1) Acceptable values for XDSN, BY, WT, MX, and PD are as defined
//*                by the applicable DFDSS keyword.  MX and PD must be coded
//*                with left and right parenthesis.
//*             2) When no parms are specified the program runs in live mode,
//*                selecting all volumes with a fragmentation index > 300.
//*
//STEP1    EXEC PGM=DYNDFRAG,PARM=(SIM,'FX=350','NX=060','LX=200000',
//       'VL=S9*',XVOL,BY,XDSN,'WT=(10,10)','MX=(999,2)','PD=500')
//FILTERBY DD   *
 (DSORG EQ (SAM,PDS,PDSE,VSAM))
//EXCLDSNS DD   *
 SYS2.DONT.TOUCH.DSNAME
//EXCLVOLS DD   *
S921D3
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   UNIT=VIO,SPACE=(CYL,(10,1))
//DCOLLECT DD   UNIT=VIO,SPACE=(CYL,(10,1)),
//       DCB=(LRECL=264,RECFM=VB,DSORG=PS)
//DISPLAY  DD   SYSOUT=*


SAMPLE OUTPUT

 * SIMULATION ONLY **
 DEFRAG DYNAM(S921D1) MAXMOVE(999,2)     BY(DDN(FILTERBY)) -
 EXCLUDE(DDN(EXCLDSNS)) WAIT(10,10)  PASSDELAY(500 )
 DEFRAG DYNAM(S921D8) MAXMOVE(999,2)     BY(DDN(FILTERBY)) -
 EXCLUDE(DDN(EXCLDSNS)) WAIT(10,10)  PASSDELAY(500 )


DYNDFRAG PROGRAM

DYNDFRAG  CSECT
          STM   R14,R12,12(R13)         HOUSEKEEPING
          BALR  R12,0
          USING *,R12
          LA    R4,REGSAVE
          ST    R4,8(R13)
          ST    R13,4(R4)
          LR    R13,R4
          L     R4,0(R1)                GET PARM LENGTH ADDRESS
          LH    R5,0(R4)                LENGTH OF PARM DATA
          LTR   R5,R5                   IS IT ZERO?
          BZ    DYNDFR55                YES, NO PARM
          LA    R5,2(R5,R4)             END OF PARM DATA
          LA    R4,1(,R4)               POSITION FOR COMPARE
DYNDFR02  LA    R4,1(,R4)               POSITION FOR COMPARE
          CLC   0(3,R4),=C'SG='         STORAGE GROUP?
          BE    DYNDFR07                YES, SAVE IT
          CLC   0(3,R4),=C'VL='         VOLUME?
          BE    DYNDFR10                YES, SAVE IT
          CLC   0(3,R4),=C'SIM'         SIMULATE?
          BE    DYNFGR25                YES, SET FLAG
          CLC   0(5,R4),=C'NORUN'       NORUN?
          BE    DYNDFR27                YES, SET FLAG
          CLC   0(3,R4),=C'FX='         FRAGMENTATION INDEX?
          BE    DYNDFR33                YES, SAVE IT
          CLC   0(3,R4),=C'NX='         NUMBER OF EXTENTS?
          BE    DYNDFR35                YES, SAVE IT
          CLC   0(3,R4),=C'LX='         LARGEST EXTENT?
          BE    DYNDFR37                YES, SAVE IT
          CLC   0(3,R4),=C'MX='         MAXMOVE?
          BE    DYNDFR17                YES, SAVE IT
          CLC   0(3,R4),=C'PD='         PASSDELAY?
          BE    DYNDFR12                YES, SAVE IT
          CLC   0(3,R4),=C'WT='         WAIT TIME?
          BE    DYNFGR19                YES, SAVE IT
          CLC   0(4,R4),=C'XDSN'        EXCLUDE DATASETS?
          BE    DYNDFR29                YES, SET IT UP
          CLC   0(4,R4),=C'XVOL'        EXCLUDE VOLUMES?
          BE    DYNDFR45                YES, PROCESS THEM
          CLC   0(2,R4),=C'BY'          FILTERING CRITERIA?
          BE    DYNDFR32                YES, SET IT UP
DYNDFR05  WTO   '* BAD PARM DATA *'
          ABEND 997
DYNDFR07  LA    R6,DCOLSTO2             POINT TO DCOLLECT STORGRP
          MVI   PRIMEFLG,C'1'           INDICATE THERE WAS A STORGRP
          MVC   DCOLSTO1,=C' STOG('     PRIME DCOLLECT
          MVI   DCOLSTO3,C')'
          LA    R4,3(R4)                POINT TO STORGRP CHARACTER
          B     DYNDFR15                GO MOVE IT
DYNDFR10  LA    R6,DCOLVOL2             POINT TO DCOLLECT VOLUME
          MVI   PRIMEFLG,C'1'           INDICATE THERE WAS A VOLUME
          MVC   DCOLVOL1,=C' VOL('      PRIME DCOLLECT
          MVI   DCOLVOL3,C')'
          LA    R4,3(R4)                POINT TO VOLUME CHARACTER
          B     DYNDFR15                GO MOVE IT
DYNDFR12  LA    R6,FRAGDLY2             POINT TO DEFRAG PASSDELAY
          MVI   FRAGCONT,C'-'           CONTINUE DEFRAG INPUT
          MVC   FRAGDLY1,=C'PASSDELAY(' PRIME PASSDELAY
          MVC   FRAGDLY3,=C')'
          LA    R4,3(R4)                POINT TO PASSDELAY CHARACTER
DYNDFR15  MVC   0(1,R6),0(R4)           MOVE CHARACTER
          LA    R4,1(R4)                NEXT CHARACTER
          CR    R4,R5                   AT END OF PARMS?
          BE    DYNDFR55                IF YES, GO PROCESS
          CLI   0(R4),C','              IS IT A COMMA?
          BE    DYNDFR02                IF YES, WHAT'S NEXT?
          LA    R6,1(R6)                NEXT POSITION IN RECORD
          B     DYNDFR15                GO MOVE IT
DYNDFR17  LA    R6,FRAGMOV2             POINT TO DFDSS MAXMOVE
          MVC   FRAGMOV1,=C'MAXMOVE'    PRIME MAXMOVE
          LA    R4,3(R4)                POINT TO MAXMOVE CHARACTER
          B     DYNFGR21                GO MOVE IT
DYNFGR19  LA    R6,FRAGWAT2             POINT TO DFDSS WAIT
          MVI   FRAGCONT,C'-'           CONTINUE DEFRAG INPUT
          MVC   FRAGWAT1,=C'WAIT'       PRIME WAIT
          LA    R4,3(R4)                POINT TO WAIT TIME CHARACTER
DYNFGR21  MVC   0(1,R6),0(R4)           MOVE CHARACTER
          LA    R4,1(R4)                NEXT CHARACTER
          CR    R4,R5                   AT END OF PARMS?
          BE    DYNDFR55                IF YES, GO PROCESS
          LA    R6,1(R6)                NEXT POSITION IN RECORD
          CLI   0(R4),C')'              RIGHT PAREN?
          BE    DYNFGR23                IF YES, GO MOVE AND BUMP
          B     DYNFGR21                GO MOVE IT
DYNFGR23  MVC   0(1,R6),0(R4)           MOVE CHARACTER
          LA    R4,1(R4)                NEXT CHARACTER
          CR    R4,R5                   AT END OF PARMS?
          BE    DYNDFR55                IF YES, GO PROCESS
          CLI   0(R4),C','              BETTER BE A COMMA
          BNE   DYNDFR05                IF NOT, BAD PARMS
          B     DYNDFR02                GO SEE WHAT'S NEXT?
DYNFGR25  MVI   SIMFLG,C'1'             INDICATE SIMULATION
          B     DYNDFR39                GO CHECK FOR END
DYNDFR27  MVI   NORUNFLG,C'1'           INDICATE NORUN
          LA    R4,5(R4)                SKIP OVER NORUN
          B     DYNDFR42                GO CHECK FOR END
DYNDFR29  MVI   FRAGCONT,C'-'           CONTINUE DEFRAG INPUT
          MVC   FRAGEXDS,=C'EXCLUDE(DDN(EXCLDSNS))' PRIME EXCLUDE
          LA    R4,4(R4)                SKIP OVER XDSN
          B     DYNDFR42                GO CHECK FOR END
DYNDFR32  MVC   FRAGBY,=C'BY(DDN(FILTERBY))'   PRIME BY
          LA    R4,2(R4)                SKIP OVER BY
          B     DYNDFR42                GO CHECK FOR END
DYNDFR33  LA    R4,3(R4)                POINT TO FRAG INDEX
          MVC   FXPARM(3),0(R4)         MOVE FRAG INDEX
          B     DYNDFR39
DYNDFR35  LA    R4,3(R4)                POINT TO NUMBER EXTENTS
          MVC   NXPARM(3),0(R4)         MOVE NUMBER EXTENTS
          B     DYNDFR39
DYNDFR37  LA    R4,3(R4)                POINT TO LARGEST EXTENT
          MVC   LXPARM(6),0(R4)         MOVE LARGEST EXTENT
          LA    R4,6(R4)                SKIP OVER LX VALUE
          B     DYNDFR42
DYNDFR39  LA    R4,3(R4)                JUMP PAST VALUE
DYNDFR42  CR    R4,R5                   AT END OF PARMS?
          BE    DYNDFR55                IF YES, GO PROCESS
          B     DYNDFR02                GO CHECK NEXT PARM
DYNDFR45  OPEN  EXCLVOLS                PREPARE TO READ XVOLS
          LA    R6,EXVOLTBL             ADDRESS XVOL SAVE TABLE
DYNDFR48  GET   EXCLVOLS                READ A VOLUME
          MVC   0(6,R6),0(R1)           SAVE IT
          LA    R6,6(R6)                BUMP TO NEXT TABLE ENTRY
          CLC   0(2,R6),=C'XX'          AT END OF TABLE
          BE    DYNDFR53                IF YES, ARE THERE MORE?
          B     DYNDFR48                GET NEXT ONE
DYNDFR51  CLOSE EXCLVOLS                CLEANUP XVOLS
          LA    R4,4(R4)                SKIP OVER XVOL
          B     DYNDFR42                GO CHECK FOR END
DYNDFR53  GET   EXCLVOLS                WAS THAT THE LAST ONE?
          WTO   '*  MAXIMUM OF 10 EXCLUDED VOLUMES, EXPAND TABLE *'
          ABEND   995
DYNDFR55  CLI   PRIMEFLG,C'1'           WAS THERE A STORGRP OR VOLUME?
          BE    DYNDFR57                IF YES, CONTINUE ON
          MVC   DCOLVOL1,=C' VOL('      IF NO, NEED TO PRIME DCOLLECT
          MVC   DCOLVOL2,=C'*     '        FOR ALL
          MVI   DCOLVOL3,C')'                 VOLUMES
DYNDFR57  OPEN  (SYSIN,(OUTPUT))        GET READY FOR DCOLLECT
          PUT   SYSIN,DCOLCARD          PUT DCOLLECT OUT TO IDCAMS
          CLOSE SYSIN                   CLOSE SYSIN SO IDCAMS CAN READ
          LA    R1,0                    PREPARE FOR IDCAMS LINK
          LINK  EP=IDCAMS               CALL IDCAMS TO DO DCOLLECT
          LTR   R15,R15                 ZERO RC FROM IDCAMS DCOLLECT?
          BZ    DYNDFR60                IF YES, CONTINUE ON
          WTO   '*  NON ZERO RC FROM DCOLLECT, REVIEW SYSPRINT *'
          ABEND   998
DYNDFR60  OPEN  DCOLLECT                PREPARE TO READ DCOLLECT DATA
          CLI   SIMFLG,C'1'             ARE WE SIMULATING?
          BE    DYNDFR63                IF YES, OPEN DISPLAY
          B     DYNDFR65                IF NO, IGNORE DISPLAY
DYNDFR63  OPEN  (DISPLAY,(OUTPUT))
          PUT   DISPLAY,SIMLINE          INDICATE SIMULATE RUN ONLY
DYNDFR65  GET   DCOLLECT                 READ DATA FROM DCOLLECT
          LA    R9,4(R1)                 POINT TO RECORD
          USING IDCDOUT,R9               ADDRESS DCOLLECT RECORD
          CLI   DCURCTYP,C'V'            VOLUME RECORD?
          BNE   DYNDFR65                 IF NO, DONT WANT IT
          LA    R6,EXVOLTBL              PREPARE TO CHECK FOR XVOLS
DYNDFR68  CLI   0(R6),C' '               VALID ENTRY?
          BE    DYNDFR70                 IF NO, THERE WERE NONE
          CLC   0(6,R6),DCVVOLSR         MATCH ON EXCLUDE VOLSER?
          BE    DYNDFR65                 IF YES, DONT WANT IT
          LA    R6,6(R6)                 BUMP TO NEXT ENTRY
          CLC   0(2,R6),=C'XX'           END OF TABLE?
          BE    DYNDFR70                 IF YES, CONTINUE ON
          B     DYNDFR68                 GO CHECK NEXT ENTRY
DYNDFR70  PACK  DBLWORK2,LXPARM          PACK LX PARM
          CP    DBLWORK2,ZERO            WAS THERE AN LX PARM?
          BE    DYNDFR72                 IF NOT, SKIP CHECK
          MVI   XXFLG,C'1'               INDICATE LX CODED
          L     R4,DCVLGEXT              LOAD LARGEST EXTENT
          CVD   R4,DBLWORK1              CONVERT TO DECIMAL
          CP    DBLWORK2,DBLWORK1        COMPARE PARM WITH ACTUAL
          BL    DYNDFR65                 IF LESS, BYPASS VOLUME
DYNDFR72  PACK  DBLWORK2,NXPARM          PACK NX PARM
          CP    DBLWORK2,ZERO            WAS THERE AN NX PARM?
          BE    DYNDFR74                 IF NOT, SKIP CHECK
          MVI   XXFLG,C'1'               INDICATE NX CODED
          L     R4,DCVFREXT              LOAD NUMBER OF EXTENTS
          CVD   R4,DBLWORK1              CONVERT TO DECIMAL
          CP    DBLWORK1,DBLWORK2        COMPARE ACTUAL WITH PARM
          BL    DYNDFR65                 IF LESS, BYPASS VOLUME
DYNDFR74  PACK  DBLWORK2,FXPARM          PACK FX PARM
          CP    DBLWORK2,ZERO            WAS THERE AN FX PARM?
          BNE   DYNDFR77                 IF YES, GO CHECK IT
          CLI   XXFLG,C'1'               WAS THERE ANOTHER XPARM?
          BE    DYNDFR80                 IF YES, VOLUME SELECTED
          MVC   FXPARM,FXDEFLT           NOTHING CODED, USE DEFAULT
          B     DYNDFR74                 GO PREPARE FOR CHECK
DYNDFR77  L     R4,DCVFRAGI              LOAD THE FRAG INDEX VALUE
          CVD   R4,DBLWORK1              CONVERT TO DECIMAL
          CP    DBLWORK1,DBLWORK2        COMPARE ACTUAL WITH PARM
          BL    DYNDFR65                 IF LESS, BYPASS VOLUME
DYNDFR80  MVC   FRAGVOL(6),DCVVOLSR      PRIME THE VOLUME FOR DFDSS
          CLI   SIMFLG,C'1'              IS THIS A SIMULATION?
          BE    DYNDFR90                 YES, DON'T CALL DFDSS
          OPEN  (SYSIN,(OUTPUT))         PREPARE TO WRITE DFDSS INPUT
          PUT   SYSIN,FRAGCRD1           PUT RECORD1 OUT TO DFDSS
          CLI   FRAGCONT,C'-'            EXPECTING SECOND RECORD?
          BNE   DYNDFR83                 IF NO, SKIP IT
          PUT   SYSIN,FRAGCRD2           PUT RECORD 2 OUT TO DFDSS
DYNDFR83  CLI   NORUNFLG,C'1'            IS THIS A NORUN?
          BE    DYNDFR85                 IF YES, CONTINUE ON
          MVC   OPTPTR,ZEROADDR          INDICATE NO PARMS PRESENT
DYNDFR85  MVC   WTOIP+22(6),DCVVOLSR     PUT VOLUME IN PROCESSING MSG
          MVC   WTONZ+21(6),DCVVOLSR     PUT VOLUME IN NON ZERO MSG
          WTO   MF=(E,WTOIP)             DISPLAY PROCESSING MSG
          CLOSE SYSIN                    CLOSE SO DFDSS CAN READ
          LINK  EP=ADRDSSU,PARAM=(OPTPTR),VL=1   CALL DFDSS
          LTR   R15,R15                  WAS DEFRAG RC ZERO?
          BZ    DYNDFR65                 IF YES, CONTINUE ON
          WTO   MF=(E,WTONZ)             DISPLAY NON ZERO MSG
          B     DYNDFR65                 GO PROCESS NEXT VOLUME
DYNDFR90  PUT   DISPLAY,FRAGCRD1         DISPLAY FIRST RECORD
          CLI   FRAGCONT,C'-'            EXPECTING SECOND RECORD?
          BNE   DYNDFR65                 IF NO, CONTINUE ON
          PUT   DISPLAY,FRAGCRD2         DISPLAY SECOND RECORD
          B     DYNDFR65                 CONTINUE ON
DYNDFR95  CLOSE DCOLLECT                 CLEAN UP
          L     R13,REGSAVE+4            RESTORE REGISTERS
          ST    R15,16(R13)                      AND
          LM    R14,R12,12(R13)                     GO
          BR    R14                                    HOME
          LTORG
WTOIP     WTO   'DEFRAG FOR VOLUME XXXXXX IN PROGRESS',MF=L
WTONZ     WTO   '* NON ZERO RC IN XXXXXX DEFRAG, REVIEW SYSPRINT *',   X
               MF=L
REGSAVE   DS    18F                       REGISTER SAVE AREA
          CNOP  2,4
OPTPTR    DC    AL2(OPTLEN)               PARM TO PASS DFDSS
OPTION    DC    C'TYPRUN=NORUN'
OPTLEN    EQU   *-OPTION
DBLWORK1  DS    D                         ACTUAL VALUE WORK AREA
DBLWORK2  DS    D                         PARM VALUE WORK AREA
FXDEFLT   DC    CL3'300'                  DEFAULT FX PARM
FXPARM    DC    CL3'000'                  FX PARM, CONDITIONAL DEFAULT
NXPARM    DC    CL3'000'                  NX PARM, NO DEFAULT
LXPARM    DC    CL6'000000'               LX PARM, NO DEFAULT
PRIMEFLG  DC    C' '                      DCOLLECT VOLUME PRIME FLAG
NORUNFLG  DC    C' '                      NORUN FLAG
SIMFLG    DC    C' '                      SIMULATION FLAG
XXFLG     DC    C' '                      NX OR LX CODED FLAG
ZEROADDR  DC    X'0000'                   USED IF NORUN NOT SPECIFIED
ZERO      DC    X'0C'                     USED TO CHECK FOR PARM
EXVOLTBL  DC    CL60' '                   VOLUME EXCLUDE TABLE
          DC    C'XX'                     INDICATES END OF TABLE
SIMLINE   DC    CL80'** SIMULATION ONLY **' SIMULATION MESSAGE
DCOLCARD  DC    CL80' '                   IDCAMS DCOLLECT RECORD
          ORG   DCOLCARD
          DC    C' DCOLLECT'
          DC    C' OFILE(DCOLLECT)'
DCOLVOL1  DC    CL5' '
DCOLVOL2  DC    CL6' '
DCOLVOL3  DC    C' '
DCOLSTO1  DC    CL6' '
DCOLSTO2  DC    CL8' '
DCOLSTO3  DC    C' '
          DC    C' NODATAINFO'
          ORG
FRAGCRD1  DC    CL80' '                   DFDSS DEFRAG RECORD 1
          ORG   FRAGCRD1
          DC    C' DEFRAG'
          DC    C' DYNAM('
FRAGVOL   DS    CL6' '
          DC    C')'
          DC    C' '
FRAGMOV1  DC    CL7' '
FRAGMOV2  DC    CL11' '
          DC    C' '
FRAGBY    DC    CL17' '
          DC    C' '
FRAGCONT  DC    C' '
          ORG
FRAGCRD2  DC    CL80' '                   DFDSS DEFRAG RECORD 2
          ORG   FRAGCRD2
          DC    C' '
FRAGEXDS  DC    CL22' '
          DC    C' '
FRAGWAT1  DC    CL4' '
FRAGWAT2  DC    CL8' '
          DC    C' '
FRAGDLY1  DC    CL10' '
FRAGDLY2  DC    CL4' '
FRAGDLY3  DC    C' '
          ORG
EXCLVOLS  DCB   DDNAME=EXCLVOLS,DSORG=PS,MACRF=GL,EODAD=DYNDFR51
DISPLAY   DCB   DDNAME=DISPLAY,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=80
DCOLLECT  DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=DYNDFR95
SYSIN     DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,       X
               BLKSIZE=80
          IDCDOUT
          END


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                        c Xephon 1992

