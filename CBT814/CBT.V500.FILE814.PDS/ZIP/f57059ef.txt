Copying PDS members to a sequential dataset

While ISPF/PDF provides many useful utilities and functions, it
does not provide a convenient way to select, copy, and
'concatenate' PDS members to a sequential dataset. Provided
here is a REXX EXEC utility to provide this missing function.
The POTOPS utility (named from the DSORG conversion 'PO-
to-PS') uses three calling parameters to process an input PDS and
create an output sequential dataset, and, optionally, selects ranges
of members using a mask argument. The REXX EXEC is invoked
as follows:

      POTOPS input.pds.dsname output.work.dsname mask

where input.pds.dsname and output.work.dsname are partially-
qualified (ie without the TSO user prefix) or fully-qualified (ie
enclosed in single apostrophes) MVS dataset names, while mask
is a 1-8 character alphameric field, which can use the usual '%'
and '*' wild-card characters, matching single or multiple
character positions, respectively.

Each member name of dataset input.pds.dsname is scanned to
determine if it matches the characters as supplied in mask up to
the length of mask. The output.work.dsname will be a sequential

dataset sharing the same DCB characteristics (except
DSORG=PS) as the input.pds.dsname. If different DCB
characteristics are desired, output.work.dsname may be pre-
allocated. Each matching member name is then selected and
copied to output.work.dsname. To select all members, mask
should be specified as a single asterisk. A report showing the
selected member names and total members processed is also
created (see Figure 1). Basic syntax and validity checking is
provided.

An external REXX function, SCAN, is employed by POTOPS to
match the member name to the mask string. This straightforward
function can be re-employed by the careful reader to satisfy a
wide range of other string-matching applications.

POTOPS makes use of ISPF, ISPF/PDF, and TSO/E facilities and
functions and can be run in either foreground or batch
environments.  When executed in batch, the ISPSTART
command syntax is required to establish an ISPF environment
before calls are made to ISPEXEC.

-------------------------  TSO COMMAND PROCESSOR  ----------------------------

 ENTER TSO COMMAND, CLIST, OR REXX EXEC BELOW:

 ===> %potops test.library work a%x*




 POTOPS copies library members to a sequential dataset.

 Run on: 16 Dec 1993 16:14:37

 Source library: MSGJP.TEST.LIBRARY
 Mask: A%X*
 Output work data set: MSGJP.WORK

 Selected members follow:

 A1X875LQ
 A3X088
 A4X19BL
 A5X050
 A5X060
 A5X070
 A5X100

 Total candidate members: 14
 Total selected members: 7

 Processing completed successfully.
 ***

Figure 1: Sample POTOPS output (foreground execution)

Using ISPSTART allows the REXX EXEC to be executed from
the PARM of program IKJEFT01 (instead of from SYSTSIN).
This is most useful when REXX arguments are to be passed from
JCL PROC substitutional parameters (avoiding the limitation of
being coded as SYSTSIN DD * control cards - this method is
illustrated in the REXX documentation provided by IBM and
would seem a limitation when compared to CLIST batch
invocation).

The POTOPS and SCAN REXX EXECs can serve as a model
for other more ingenious application-specific functions, such as
documentation printing or as utility input (both of which we
employ). We have run POTOPS in an MVS/XA, TSO/E 2.1,
ISPF 3.3 system. It should work equally well in MVS/ESA and
later releases of TSO and ISPF.

Of note is DOC APAR OY32468 which pertains to the LISTDSI
function. It describes an error in TSO/E Version 2 REXX
Reference (SC28-1883-1), citing an incorrect example in the
manual. The usage of LISTDSI in POTOPS is correct and may
save the reader a lot of frustration if it is copied (instead of looking
to and attempting to debug IBM's incorrect example).

The POTOPS REXX EXEC

/* REXX                                                                       */
/* POTOPS - MAINLINE PROGRAM                                                  */
/* THIS REXX EXEC MATCHES A SELECTED RANGE OF PDS MEMBERS AND COPIES EACH     */
/* TO A SEQUENTIAL OUTPUT DATASET WITH DISP=MOD                               */
/* SYNTAX:                                                                    */
/* POTOPS 'input.pds.dsname' 'output.seq.dsname' mask                         */
TRACE OFF
TITLEDATE = DATE()
TITLETIME = TIME()
SAY "POTOPS copies library members to a sequential dataset."
SAY "Run on: "TITLEDATE" "TITLETIME
SAY
PARAMETERS:
  ARG FILEDSN WORKDSN MEMSTART .
  IF LENGTH(FILEDSN) < 2 THEN SIGNAL ERROR_PARMS
  IF LENGTH(FILEDSN) > 46 THEN SIGNAL ERROR_PARMS
  IF SUBSTR(FILEDSN,1,1) = "'" & SUBSTR(FILEDSN,LENGTH(FILEDSN),1) = "'" THEN
    DO
      FILEDSN = SUBSTR(FILEDSN,2,LENGTH(FILEDSN)-2)
    END
  ELSE
    DO
      FILEDSN = SYSVAR(SYSUID)||"."||FILEDSN
    END
  IF LENGTH(WORKDSN) < 2 THEN SIGNAL ERROR_PARMS
  IF LENGTH(WORKDSN) > 46 THEN SIGNAL ERROR_PARMS
  IF SUBSTR(WORKDSN,1,1) = "'" & SUBSTR(WORKDSN,LENGTH(WORKDSN),1) = "'" THEN
    DO
      WORKDSN = SUBSTR(WORKDSN,2,LENGTH(WORKDSN)-2)
    END
  ELSE
    DO
      WORKDSN = SYSVAR(SYSUID)||"."||WORKDSN
    END
  IF LENGTH(MEMSTART) = 0 THEN SIGNAL ERROR_PARMS
  IF LENGTH(MEMSTART) > 8 THEN SIGNAL ERROR_PARMS
SOURCEFILE:
  RCODE = LISTDSI(''''FILEDSN'''' DIRECTORY)
  IF RCODE > 4 THEN SIGNAL ERROR_FILEDSN
  IF SUBSTR(SYSDSORG,1,2) ^= "PO" THEN SIGNAL ERROR_FILEDSN
  IF SUBSTR(SYSRECFM,1,1) ^= "F" & SUBSTR(SYSRECFM,1,1) ^= "V" ,
    THEN SIGNAL ERROR_FILEDSN
  MEMTOTAL = SYSMEMBERS
  ADDRESS ISPEXEC "LMINIT DATAID(FILEID) DATASET('"FILEDSN"') ENQ(SHR)"
  IF RC ^= 0 THEN SIGNAL ERROR_FILEDSN
  ADDRESS ISPEXEC "LMOPEN DATAID("FILEID") OPTION(INPUT)"
  IF RC ^= 0 THEN SIGNAL ERROR_FILEDSN
WORKFILE:
  IF SUBSTR(SYSDSN(''''WORKDSN''''),1,2) ^= "OK" THEN
    DO
      PARSE VAR SYSRECFM X1 2 X2 3 X3
      "ALLOC FILE(WORKOUT) OUTPUT MOD CATALOG ",
        "SPACE("SYSPRIMARY SYSSECONDS") RELEASE ",
        "DSNAME('"WORKDSN"') BLOCK("SYSBLKSIZE") UNIT(WORK) ",
        "DSORG(PS) RECFM("X1" "X2" "X3") ",
        "LRECL("SYSLRECL") BLKSIZE("SYSBLKSIZE")"
      IF RC ^= 0 THEN SIGNAL ERROR_WORKDSN
    END
  ELSE
    DO
      "ALLOC DDNAME(WORKOUT) OUTPUT MOD KEEP ",
        "DSNAME('"WORKDSN"')"
      IF RC ^= 0 THEN SIGNAL ERROR_WORKDSN
    END
  ADDRESS ISPEXEC "LMINIT DATAID(WORKID) DATASET('"WORKDSN"') ENQ(MOD)"
  IF RC ^= 0 THEN SIGNAL ERROR_WORKDSN
  ADDRESS ISPEXEC "LMOPEN DATAID("WORKID") OPTION(OUTPUT)"
  IF RC ^= 0 THEN SIGNAL ERROR_WORKDSN
MAINLINE:
  SAY "Source library: "FILEDSN
  SAY "Mask: "MEMSTART
  SAY "Output work dataset: "WORKDSN
  SAY
  SAY "Selected members follow:"
  SAY
  MEMCOUNT = 0
  FILEEOF = 0
  MEMBEOF = 0
  ADDRESS ISPEXEC "LMMLIST DATAID("FILEID") MEMBER(MEMBER)"
  IF RC ^= 0 THEN FILEEOF = 1
  DO WHILE FILEEOF = 0
    SCANRC = SCAN(MEMBER,MEMSTART,8)
    IF SCANRC = 1 THEN
      DO
        ADDRESS ISPEXEC "LMMFIND DATAID("FILEID") MEMBER("MEMBER")"
        IF RC = 0 THEN
          DO
            MEMCOUNT = MEMCOUNT + 1
            SAY MEMBER
          END
        ELSE
          DO
            MEMBEOF = 1
          END
        DO WHILE MEMBEOF = 0
          ADDRESS ISPEXEC "LMGET DATAID("FILEID") DATALOC(POINTER)",
                          "DATALEN(PTRLEN) MODE(LOCATE) MAXLEN(80)"
          RCODE = RC
          SELECT
            WHEN RCODE = 8 THEN MEMBEOF = 1
            WHEN RCODE = 0 THEN ADDRESS ISPEXEC "LMPUT",
              "DATAID("WORKID") MODE(MOVE)",
              "DATALOC(POINTER) DATALEN("PTRLEN")"
            OTHERWISE SIGNAL ERROR_FILEDSN
          END
        END
      END
    ADDRESS ISPEXEC "LMMLIST DATAID("FILEID") MEMBER(MEMBER)"
    IF RC ^= 0 THEN FILEEOF = RC
    MEMBEOF = 0
  END
GOODBYE:
  SAY
  SAY "Total candidate members: "MEMTOTAL
  SAY "Total selected members: "MEMCOUNT
  SAY
  ADDRESS ISPEXEC "LMMLIST DATAID("FILEID") OPTION(FREE)"
  ADDRESS ISPEXEC "LMCLOSE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMCLOSE DATAID("WORKID")"
  ADDRESS ISPEXEC "LMFREE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMFREE DATAID("WORKID")"
  "FREE F(WORKOUT)"
  ZISPFRC = 0
  ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
  SAY "Processing completed successfully."
EXIT 0
ERROR_PARMS:
  SAY "Invalid parameter list passed to POTOPS REXX program! "
  SAY "The correct syntax is as follows:"
  SAY
  SAY "POTOPS filedsn workdsn mask"
  SAY
  SAY "filedsn = input dataset, partially (user-id prefix will be appended) "
  SAY "          or fully (enclosed in single quotes) qualified."
  SAY "workdsn = output dataset name partially or fully qualified."
  SAY "mask    = 0-8 character alphanumeric string matched to member names in"
  SAY "          filedsn library.  % matches any single character, * matches "
  SAY "          multiple characters."
  ZISPFRC = 16
  ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
EXIT 16
ERROR_FILEDSN:
  SAY "An error has occurred attempting to allocate dataset "FILEDSN"."
  SAY FILEDSN" must be a catalogued PDS containing ",
    "members with fixed or variable length records."
  IF SUBSTR(SYSMSGLVL1,1,1) = "I" | SUBSTR(SYSMSGLVL2,1,1) = "I" THEN
    DO
      SAY "LISTDSI SYSREASON = "SYSREASON"."
      SAY SYSMSGLVL1
      SAY SYSMSGLVL2
    END
  SAY FILEDSN SYSDSN(''''FILEDSN'''')
  ADDRESS ISPEXEC "LMMLIST DATAID("FILEID") OPTION(FREE)"
  ADDRESS ISPEXEC "LMCLOSE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMCLOSE DATAID("WORKID")"
  ADDRESS ISPEXEC "LMFREE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMFREE DATAID("WORKID")"
  "FREE F(WORKOUT)"
  ZISPFRC = 16
  ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
EXIT 16
ERROR_WORKDSN:
  SAY "An error has occurred attempting to allocate dataset "WORKDSN"."
  SAY WORKDSN" must either be a preallocated catalogued sequential dataset"
  SAY "of fixed or variable length records or"
  SAY WORKDSN" will be dynamically allocated and catalogued as a sequential"
  SAY "dataset modeled after the characteristics of "FILEDSN"."
  RCODE = LISTDSI(''''WORKDSN'''')
  SAY "LISTDSI return code = "RCODE".  SYSREASON = "SYSREASON"."
  IF SUBSTR(SYSMSGLVL1,1,1) = "I" | SUBSTR(SYSMSGLVL2,1,1) = "I" THEN
    DO
      SAY SYSMSGLVL1
      SAY SYSMSGLVL2
    END
  SAY WORKDSN SYSDSN(''''WORKDSN'''')
  ADDRESS ISPEXEC "LMMLIST DATAID("FILEID") OPTION(FREE)"
  ADDRESS ISPEXEC "LMCLOSE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMCLOSE DATAID("WORKID")"
  ADDRESS ISPEXEC "LMFREE DATAID("FILEID")"
  ADDRESS ISPEXEC "LMFREE DATAID("WORKID")"
  "FREE F(WORKOUT)"
  ZISPFRC = 16
  ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
EXIT 16

The SCAN REXX EXEC external function

/* REXX                                                                       */
/* SCAN - EXTERNAL FUNCTION                                                   */
/* FUNCTION:  COMPARE A MASK AGAINST A CHARACTER STRING.                      */
/* CALLING PARAMETERS:                                                        */
/*   rcode = SCAN(string mask maxlength)                                      */
/*     rcode     = return code from function (see return codes below)         */
/*     string    = string value to be compared to mask                        */
/*     mask      = character mask, may contain % or * (% matches a single     */
/*                 character position of any value, * matches all remaining   */
/*                 characters to the right current position                   */
/*     maxlength = longest string to be compared                              */
/* RETURN CODES                                                               */
/*   00  = string did not match mask (for length maxlength)                   */
/*   01  = string matches mask (for length maxlength)                         */
/*   16  = error condition (for length maxlength)                             */
TRACE OFF
ARG STRING,MASK,MAXLENGTH
PARAMETERS:
  IF LENGTH(STRING) < 1 THEN SIGNAL ERROR_ARGUMENTS
  IF MAXLENGTH > 255 | MAXLENGTH < LENGTH(STRING) THEN SIGNAL ERROR_ARGUMENTS
  FLAG  = 0
  INCR = 1
  DO WHILE INCR <= LENGTH(MASK)
    IF SUBSTR(MASK,INCR,1) = "*" THEN FLAG = FLAG + 1
    INCR = INCR + 1
  END
  IF FLAG > 1 THEN SIGNAL ERROR_ARGUMENTS
MAINLINE:
  FLAG  = 0
  INCR = 1
  DO WHILE INCR < 9
    IF LENGTH(MASK) < INCR THEN MASK = MASK||"%"
    IF SUBSTR(MASK,INCR,1) = "*" THEN ,
      MASK = SUBSTR(MASK,1,INCR-1)||"%"||SUBSTR(MASK,INCR+1,LENGTH(MASK)-INCR)
    IF LENGTH(MASK) < INCR THEN MASK = MASK||"%"
    IF SUBSTR(STRING,INCR,1) = SUBSTR(MASK,INCR,1) | ,
      SUBSTR(MASK,INCR,1) = "%" THEN FLAG = FLAG + 1
    INCR = INCR + 1
  END
  IF FLAG = 8 THEN ,
    RETURN 1
  ELSE ,
    RETURN 0
ERROR_ARGUMENTS:
  SAY "SCAN error!  Invalid calling parameters!  Valid syntax is shown below:"
  SAY
  SAY "Calling parameters as passed to SCAN:"
  SAY "  SCAN STRING="STRING
  SAY "  SCAN MASK="MASK
  SAY "  SCAN MAXLENGTH="MAXLENGTH
  SAY
  SAY "rcode = SCAN(string mask maxlength)"
  SAY "  rcode     = return code from scan (0=no match, 1=match, 16=error)"
  SAY "  string    = string value to be compared to mask"
  SAY "  mask      = character mask, may contain multiple % or single *"
  SAY "  maxlength = length of longest string to be compared"
  ZISPFRC = 16
  ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
RETURN 16

Sample MVS Batch JCL Utilizing ISPSTART

//MSGJP01 JOB  (SYS,TECH),G.PERKINS,...
//STEP001 EXEC PGM=IKJEFT01,DYNAMNBR=5,
//             PARM='ISPSTART CMD(%POTOPS TEST.LIBRARY ''MSGJP.WORK'' A%X*)'
//ISPPLIB  DD  DSN=ISP.V3R3M0.ISPPENU,DISP=SHR
//         DD  DSN=ISR.V3R3M0.ISRPENU,DISP=SHR
//ISPSLIB  DD  DSN=ISP.V3R3M0.ISPSLIB,DISP=SHR
//         DD  DSN=ISR.V3R3M0.ISRSENU,DISP=SHR
//ISPTLIB  DD  DSN=ISP.V3R3M0.ISPTENU,DISP=SHR
//         DD  DSN=ISR.V3R3M0.ISRTLIB,DISP=SHR
//ISPMLIB  DD  DSN=ISP.V3R3M0.ISPMENU,DISP=SHR
//         DD  DSN=ISR.V3R3M0.ISRMENU,DISP=SHR
//SYSPROC  DD  DSN=ISR.V3R3M0.ISRCLIB,DISP=SHR
//         DD  DSN=YOUR.SITE.CLISTS,DISP=SHR
//SYSEXEC  DD  DSN=ISR.V3R3M0.ISRCLIB,DISP=SHR
//         DD  DSN=YOUR.SITE.REXX.EXECS,DISP=SHR
//ISPPROF  DD  UNIT=TEMP,DSN=&&ISPPROF,DISP=(NEW,DELETE),
//             SPACE=(3120,(4,2,5),RLSE),
//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)
//ISPLOG   DD  SYSOUT=*,
//             DCB=(BLKSIZE=129,LRECL=125,RECFM=VA,DSORG=PS)
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
/*


George Perkins
Manager, IBM Systems
Meriter Health Services Inc (USA)                                             c Xephon 1994

