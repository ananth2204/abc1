Reading output from the JES2 spool

Sample JCL to run BZWTR

//BZWTR    EXEC  PGM=BZWTRA1,
//         PARM='(BkupDst1,XKPR8A),(BkupDst2,XKPR8A)'
//STEPLIB  DD    DSN=authorized.loadlib,DISP=SHR
//MODEL    DD    DSN=BZWTR.BZWTR,DISP=OLD,
//         VOL=SER=anyvol,UNIT=3380,SPACE=(CYL,(10,5,20)),
//         DCB=(RECFM=VBA,LRECL=137,BLKSIZE=23476)
//SYSUDUMP DD    SYSOUT=4
//

Sample JCL to direct output to multiple
DESTinations

//jobname  JOB   ....
/*OUTPUT   3030  DEST=(LOCAL,BkupDst2),FCB=3030,FORMS=3030
/*OUTPUT   4040  DEST=(LOCAL,BkupDst2),FCB=4040,FORMS=4040
/*OUTPUT   STD   DEST=(LOCAL,BkupDst2)
//*
//stepname EXEC  ....
//anyname  DD    SYSOUT=(c,,3030)
//another  DD    SYSOUT=(w,,4040)

BZWTR PROGRAM SOURCE

 TITLE 'BZWTR, READ OUTPUT FROM "JES2-SPOOL" QUEUE'
**LINK   SETCODE AC(1)
         MACRO ,
         $ASMDATE ,
         B     4+8+8+8(,R15)
         DC    CL8'&SYSECT'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         MEND  ,
         MACRO
         PREQU &P
&P.SPC0  EQU   X'01'               WRITE LINE WITHOUT SPACEING,
&P.SPC1A EQU   X'09'               WRITE LINE THEN SPACE 1 LINE,
&P.SPC1I EQU   X'0B'               SPACE 1 LINE, NO LINE WRITTEN,
&P.SPC2A EQU   X'11'               WRITE LINE THEN SPACE 2 LINES,
&P.SPC2I EQU   X'13'               SPACE 2 LINES, NO LINE WRITTEN,
&P.SPC3A EQU   X'19'               WRITE LINE THEN SPACE 3 LINES,
&P.SPC3I EQU   X'1B'               SPACE 3 LINES, NO LINE WRITTEN,
&P.SKP1A EQU   X'89'               WRITE LINE THEN SKIP TO CHANNEL 1,
&P.SKP1I EQU   X'8B'               SKIP TO CHANNEL 1, NO LINE WRITTEN,
&P.SKP2A EQU   X'91'               WRITE LINE THEN SKIP TO CHANNEL 2,
&P.SKP2I EQU   X'93'               SKIP TO CHANNEL 2, NO LINE WRITTEN,
&P.SKP3A EQU   X'99'               WRITE LINE THEN SKIP TO CHANNEL 3,
&P.SKP3I EQU   X'9B'               SKIP TO CHANNEL 3, NO LINE WRITTEN,
&P.SKP4A EQU   X'A1'               WRITE LINE THEN SKIP TO CHANNEL 4,
&P.SKP4I EQU   X'A3'               SKIP TO CHANNEL 4, NO LINE WRITTEN,
&P.SKP5A EQU   X'A9'               WRITE LINE THEN SKIP TO CHANNEL 5,
&P.SKP5I EQU   X'AB'               SKIP TO CHANNEL 5, NO LINE WRITTEN,
&P.SKP6A EQU   X'B1'               WRITE LINE THEN SKIP TO CHANNEL 6,
&P.SKP6I EQU   X'B3'               SKIP TO CHANNEL 6, NO LINE WRITTEN,
&P.SKP7A EQU   X'B9'               WRITE LINE THEN SKIP TO CHANNEL 7,
&P.SKP7I EQU   X'BB'               SKIP TO CHANNEL 7, NO LINE WRITTEN,
&P.SKP8A EQU   X'C1'               WRITE LINE THEN SKIP TO CHANNEL 8,
&P.SKP8I EQU   X'C3'               SKIP TO CHANNEL 8, NO LINE WRITTEN,
&P.SKP9A EQU   X'C9'               WRITE LINE THEN SKIP TO CHANNEL 9,
&P.SKP9I EQU   X'CB'               SKIP TO CHANNEL 9, NO LINE WRITTEN,
&P.SKPAA EQU   X'D1'               WRITE LINE THEN SKIP TO CHANNEL A,
&P.SKPAI EQU   X'D3'               SKIP TO CHANNEL A, NO LINE WRITTEN,
&P.SKPBA EQU   X'D9'               WRITE LINE THEN SKIP TO CHANNEL B,
&P.SKPBI EQU   X'DB'               SKIP TO CHANNEL B, NO LINE WRITTEN,
&P.SKPCA EQU   X'E1'               WRITE LINE THEN SKIP TO CHANNEL C,
&P.SKPCI EQU   X'E3'               SKIP TO CHANNEL C, NO LINE WRITTEN.
         MEND  ,
         MACRO ,
         $B    &CC,&MSG
         B&CC  VERR&SYSNDX
&SYSECT.L LOCTR
VERR&SYSNDX WTO 'BZWTR:'&MSG'',ROUTCDE=11
         B     *+1                 ISSUE ERROR MESSAGE AND ABEND
&SYSECT  LOCTR
         MEND  ,
DSECT    DSECT ,
        IEFSSOBH ,
SSOBEXT  DSECT ,
SSOBGN   EQU   SSOBEXT
        IEFSSSO SOEXT=YES
        IHAARL DESCR=NO
        IEFZB4D2 ,
        IEFZB4D0 ,
        IKJEFFDF DFDSECT=YES,DFDSEC2=YES
        DCBD  DSORG=PS,DEVD=DA
COM      DSECT ,
        IEZCOM ,
CIB      DSECT ,
        IEZCIB ,
BZWTR    CSECT ,
        $ASMDATE ,
         STM   R14,R12,12(R13)
         LR    R12,R15             FIRST BASE
         LA    R11,2048(,R12)      SECOND BASE
         LA    R11,2048(,R11)      SECOND BASE
         LR    R9,R1               SAVE OS_PARM POINTER
         USING BZWTR,R12,R11
         L     R3,=A(WORKLEN)
        GETMAIN R,LV=(R3)
         LA    R1,0(,R1)
         LR    R2,R1
         SLR   R15,R15
         MVCL  R2,R14
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING WORKAREA,R13
         MVC   WORKCONS+000(256),REALCONS+000   MOVE "DCB", ETC.
         MVC   WORKCONS+256(L'WORKCONS-256),REALCONS+256
         MVC   PARMSTRT,0(R9)      SAVE START OF "OS_PARM"
         L     R15,PSATOLD-PSA     "TCB"
         L     R15,TCBJSTCB-TCB(,R15) "JOB-STEP-TCB"
         L     R15,TCBTIO-TCB(,R15) "TIOT"
         MVC   LPXJOBNM,TIOCNJOB-TIOT1(R15) SAVE "JOBNAME"
         LA    R9,DSTCLSEN         -> DEST/CLASS CHAIN
         USING PRT,R9              ADDRESS "PRT" IN "R9"
         MVC   PRTDCBS,RPRTDCBS    SET UP MODEL DCB
         LA    R15,LPXJFCB         POINT AT "JFCB"
         ST    R15,LPXEXLST        AND SAVE INTO "EXLST"
         MVI   LPXEXLST,7+X'80'    SET "JFCB" POINTER
         LA    R15,LPXEXLST        POINT AT "EXLST"
         STCM  R15,B'0111',(DCBEXLSA-IHADCB)+PRTDCB
         MVC   (DCBDDNAM-IHADCB)+PRTDCB,=CL8'MODEL'
        RDJFCB (PRTDCB,),MF=(E,OPNPARM) GET "MODEL_DD" INFO
         LTR   R15,R15             IS "MODEL_DD" FOUND?
        $B     NZ,'"MODEL   " Model DD Statement missing'
         MVC   FTXDSNX,(JFCBDSNM-INFMJFCB)+LPXJFCB "DSN" PREFIX
         MVC   FTXVOLX,(JFCBVOLS-INFMJFCB)+LPXJFCB "DSN" PREFIX
         MVC   FTXALTYP(2+2+2),=Y(DALCYL,0,0) ASSUME "CYL" ALLOC
         TM    (JFCBCTRI-INFMJFCB)+LPXJFCB,X'80' TRK/CYL ALLOC?
         BZ    SPISAVG             NO, THEN "AVERAGE BLOCK LEN"
         TM    (JFCBCTRI-INFMJFCB)+LPXJFCB,X'40' TRK/CYL ALLOC?
         BNZ   SPISCYL             "CYL", THEN HAS BEEN SET
         MVI   FTXALTYP+1,DALTRK   "TRK" ALLOCATION
         B     SPISCYL
SPISAVG  EQU   *
         MVC   FTXALTYP(2+2+2),=Y(DALBLKLN,1,3)
         MVC   FTXALTYPX,(JFCBDRLH-INFMJFCB)+LPXJFCB "AVBL"
SPISCYL  EQU   *
         MVC   FTXPRMX,(JFCBPQTY-INFMJFCB)+LPXJFCB "PRIME"
         MVC   FTXSECX,(JFCBSQTY-INFMJFCB)+LPXJFCB "SECOND"
         MVC   FTXDIRX,(JFCBDQTY-INFMJFCB)+LPXJFCB "DIR"
         MVC   FTXRFMX,(JFCRECFM-INFMJFCB)+LPXJFCB "RECFM"
         MVC   FTXLRLX,(JFCLRECL-INFMJFCB)+LPXJFCB "LRECL"
         MVC   FTXBLKX,(JFCBLKSI-INFMJFCB)+LPXJFCB "BLKSIZE"
         LA    R1,ALCS99RB         POINT AT REQUEST BLOCK
         ST    R1,PTRS99RB         AND SAVE IN POINTER
         OI    PTRS99RB,X'80'      SET END-OF-LIST POINTER
         XC    ALCS99RB,ALCS99RB   CLEAR REQUEST BLOCK
         LA    R1,TEXTPTRS         POINT AT TEXT UNIT PTR LIST
         ST    R1,ALCS99RB+8       AND SAVE ADDRESS
         MVI   ALCS99RB,20         SET LENGTH
         XC    LPXSTOW,LPXSTOW
        TIME   DEC
         STM   R0,R1,LPXTIME /LPXDATEP SAVE TIME AND DATE
         LA    R5,FTXDSNX          POINT AT "PREFIX"
         BAL   R14,PUTDSNDT        FIND END AND PUT '.'
         ZAP   LPXDOUBL,LPXDATEP+2(2) "JJJS"
         SLR   R0,R0
         SLR   R15,R15
         CVB   R1,LPXDOUBL         DDD TO BINARY
DYLP0020 EQU   *
         SR    R1,R0               SUBTRACT DAYS IN PREVIOUS MONTH
         LA    R15,1(,R15)         MOVE ON TO NEXT MONTH
         IC    R0,MONTHTAB-1(R15)  LOAD DAYS IN THIS NEXT MONTH
         LTR   R0,R0               IF ZERO THEN FEB
         BNZ   DYLP0060            ELSE LOOP BACK
         LA    R0,28               SET NOT LEAP YEAR
         TM    LPXDATEP+1,X'01'    NOW TEST FOR LEAP YEAR
         BNZ   DYLP0060
         TM    LPXDATEP+1,X'12'
         BM    DYLP0060            NO, BRANCH
         LA    R0,29               LEAP YEAR, FEB HAS 29 DAYS
DYLP0060 EQU   *
         CR    R0,R1               STILL MORE DAYS THAN IN MONTH ?
         BL    DYLP0020            YES, LOOP BACK
         MVI   0(R5),C'D'
         UNPK  1(2+1,R5),LPXDATEP+1(1+1) "YEAR"
         CVD   R15,LPXDOUBL        MONTH TO DECIMAL
         UNPK  1+2(2,R5),LPXDOUBL+6(2) "MONTH"
         OI    1+2+2-1(R5),C'0'
         CVD   R1,LPXDOUBL         DAY IN MONTH TO DECIMAL
         UNPK  1+2+2(2,R5),LPXDOUBL+6(2) "DAY"
         OI    1+2+2+2-1(R5),C'0'
         MVI   1+2+2+2(R5),C'.'
         LA    R5,1+2+2+2+1(,R5)   STEP OVER "DYYMMDD"
         ST    R5,DSNPDST          SAVE -> "DEST_IN_DSNAME"
         L     R4,PARMSTRT         GET INPUT "OS_PARM"
         LH    R5,0(,R4)           LENGTH OF INPUT PARM
         LA    R4,2(,R4)           START OF PARM
         LA    R9,DSTCLSEN         -> DEST/CLASS CHAIN
         USING PRT,R9              ADDRESS "PRT" IN "R9"
PRMLOOP  EQU   *                   MAIN PARM SCAN LOOP
         XC    PRT(PRTENTL),PRT    CLEAR AREA
         MVC   PRTDEST,=CL8' '     CLEAR AREA
         MVC   PRTCLASS,=CL8' '    CLEAR AREA
         MVC   PRTDCBS,RPRTDCBS    SET UP MODEL DCB
         CLI   0(R4),C'('          START OF "DEST"?
        $B     NE,'Invalid PARM - no ''('''
         LA    R4,1(,R4)             STEP OVER "("
         BCT   R5,*+4+4                AND REDUCE LENGTH
         B     NOPRMLFT            *** NO PARM LEFT
         LR    R2,R4               SAVE START OF "DEST"
PRMDSTLP EQU   *
         CLI   0(R4),C','          END OF "DEST"?
         BE    PRMGDEST            YES, THEN PROCESS
         LA    R4,1(,R4)           NO, KEEP LOOKING
         BCT   R5,PRMDSTLP
        $B     ,'Invalid PARM - no comma'
PRMGDEST EQU   *
         LR    R3,R4               -> COMMA
         SR    R3,R2               LENGTH OF "DEST"
        $B     NP,'"DEST" not specified'
         CH    R3,=Y(8)            CHECK "DEST" NOT TOO LONG
        $B     H,'"DEST" too long'
         BCTR  R3,0
         EX    R3,*+4
         MVC   PRTDEST(*-*),0(R2)  SAVE "DEST"
         LA    R4,1(,R4)           STEP OVER ","
         BCT   R5,*+4+4            AND REDUCE LENGTH
         B     NOPRMLFT            *** NO PARM LEFT
         LR    R2,R4               SAVE START OF "DEST"
PRMCLSLP EQU   *
         CLI   0(R4),C')'          END OF "CLASS"?
         BE    PRMGCLAS            YES, THEN PROCESS
         LA    R4,1(,R4)           NO, KEEP LOOKING
         BCT   R5,PRMCLSLP
        $B     ,'Invalid PARM - No '')'''
PRMGCLAS EQU   *
         LR    R3,R4               -> ")"
         SR    R3,R2               LENGTH OF "CLASS"
        $B     NP,'"CLASS" not specified'
         CH    R3,=Y(8)            CHECK "CLASS" NOT TOO LONG
        $B     H,'"CLASS" too long'
         BCTR  R3,0
         EX    R3,*+4
         MVC   PRTCLASS(*-*),0(R2) SAVE "CLASS"
         STM   R4,R5,PARMSAVE      SAVE PARM FOR A MO
         MVI   FTXDDNX,C'@'
         MVC   FTXDDNX+1(L'FTXDDNX-1),PRTDEST "DEST" NAME
         LA    R15,LPXEXLST        POINT AT "EXLST"
         STCM  R15,B'0111',(DCBEXLSA-IHADCB)+PRTDCB
         MVC   (DCBDDNAM-IHADCB)+PRTDCB,FTXDDNX
         L     R5,DSNPDST          SAVE -> "DEST_IN_DSNAME"
         MVC   0(L'PRTDEST,R5),PRTDEST "DEST" NAME
         MVI   L'PRTDEST(R5),C' '  CLEAR AFTER "DEST" NAME
         BAL   R14,PUTDSNDT        FIND END AND PUT '.'
         LA    R4,FTXDSNX          POINT AT START OF "DSNAME"
         BCTR  R5,0                BACK OFF '.' AT END
         SR    R5,R4               END-START = LENGTH
         STH   R5,FTXDSNX-2        AND SAVE INTO "TEXT_UNIT"
         STH   R5,PRTDSNL
         BCTR  R5,0                LEN-1 FOR "EX"
         EX    R5,*+4              MVC   PRTDSNAM(*-*),FTXDSNX
         MVC   PRTDSNAM(*-*),FTXDSNX
        RDJFCB (PRTDCB,),MF=(E,OPNPARM) GET "DSNAME"
         LTR   R15,R15             IS "DDNAME" ALREADY DONE
         BNZ   NOTALLOC            NO, THEN NEEDS "DYNALLOC"
DSNCLC   CLC   (JFCBDSNM-INFMJFCB)+LPXJFCB,PRTDSNAM SAME "DSNAME"?
         EX    R5,DSNCLC           CLC   (JFCBDSNM-+LPXJFCB,PRTDSNAM
         BE    NOTALLOC            YES, THEN JUST "OS-OPEN"
         MVI   ALCS99RB+1,S99VRBUN SET "UN-ALLOCATE" REQUEST
         LA    R14,FTXDDN          "DDNAME" TEXT UNIT
         O     R14,=X'80000000'    SET END-OF-LIST MARKER
         ST    R14,TEXTPTRS        SAVE IN TEXT-POINTER LIST
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15           TEST RETURN CODE FROM "DYNALLOC"
         BNZ   DYNALCER *** R15 ^= 0 AFTER SVC 99
NOTALLOC EQU   *
ALOCSHR  EQU   *
         MVI   ALCS99RB+1,S99VRBAL SET ALLOCATE REQUEST
         LA    R14,FTXDDN          "DDNAME" TEXT-UNIT
         LA    R15,FTXDSN          "DSNAME" TEXT-UNIT
         SLR   R0,R0               NO "FREE=CLOSE" TEXT UNIT
         LA    R1,FTXSTAT          "STATUS" TEXT UNIT
         LA    R2,FTXDISP          "DISPOSITION" TEXT UNIT
         O     R2,=X'80000000'     SET END-OF-LIST MARKER
         STM   R14,R2,TEXTPTRS     SAVE IN TEXT-POINTER LIST
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15           TEST RETURN CODE FROM "DYNALLOC"
         BZ    ALLOCOK             WE HAVE DATA-SET NOW
*** ALLOCATION FAILED, PERHAPS "DSN" DON'T EXIST IN WHICH CASE
*** WE SHOULD CREATE A NEW ONE.
         LA    R14,FTXNSTA         "DISP=(NEW,..."
         LA    R15,FTXNDSP                    CATLG)"
         LA    R0,FTXALTYP         "SPACE=(???,...........)"
         LA    R1,FTXPRM                       (??,??,???))
         LA    R2,FTXSEC                       (??,??,???))
         LA    R3,FTXDIR                       (??,??,???))
         STM   R14,R3,TEXTPTRS+(3*4) SAVE IN TEXT-POINTER LIST
         LA    R14,FTXRFM          "RECFM"
         LA    R15,FTXLRL          "LRECL"
         LA    R0,FTXBLK           "BLKSIZE"
         LA    R1,FTXVOL           "VOLUME"
         O     R1,=X'80000000'     SET END-OF-LIST MARKER
         STM   R14,R1,TEXTPTRS+(9*4) SAVE IN TEXT-POINTER LIST
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15             TEST RETURN CODE FROM "DYNALLOC"
         BNZ   DYNALCER *** R15 ^= 0 AFTER SVC 99'
         MVI   ALCS99RB+1,S99VRBUN SET "UN-ALLOCATE" REQUEST
         LA    R14,FTXDDN          "DDNAME" TEXT UNIT
         O     R14,=X'80000000'    SET END-OF-LIST MARKER
         ST    R14,TEXTPTRS        SAVE IN TEXT-POINTER LIST
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15             TEST RETURN CODE FROM "DYNALLOC"
         BZ    ALOCSHR             NOW RE-ALLOC AS "SHR"
DYNALCER EQU   *                   R5->TEXT
         STM   R14,R1,DYNERRGS     SAVE REGISTERS FOR DEBUG
         MVC   WTOBFR(RT3S99ML),RT3S99M BASIC MESSAGE
         UNPK  (RT3S99ME-RT3S99M)+WTOBFR(L'RT3S99ME+1),(S99ERROR-S99RB)*
               +ALCS99RB(L'S99ERROR+1)
         UNPK   (RT3S99MI-RT3S99M)+WTOBFR(L'RT3S99MI+1),(S99INFO-S99RB)*
               +ALCS99RB(L'S99INFO+1)
      TR (RT3S99ME-RT3S99M)+WTOBFR(L'RT3S99ME+1+L'RT3S99MI),HEXTAB-C'0'
         MVI   ((RT3S99ME+L'RT3S99ME)-RT3S99M)+WTOBFR,C','
         MVI   ((RT3S99MI+L'RT3S99MI)-RT3S99M)+WTOBFR,C''''
        WTO    MF=(E,WTOBFR)       INFORM OPERATOR OF FAILURE
         LA    R1,ALCS99RB                         ->"S99_RB"
         ST    R1,(DFS99RBP-DFDSECTD)+DFBLOCK      ->"S99_RB"
         LA    R1,DYNERRGS+4                       ->"R15"
         ST    R1,(DFRCP-DFDSECTD)+DFBLOCK         ->"R15"
         LA    R1,=X'80,32'
         ST    R1,(DFIDP-DFDSECTD)+DFBLOCK         ->FLAGS
         SLR   R0,R0
         ST    R0,(DFJEFF02-DFDSECTD)+DFBLOCK      NO "IKJEFF02"
         ST    R0,(DFCPPLP-DFDSECTD)+DFBLOCK       NO "CPPL"
         ST    R0,(DFBUFP-DFDSECTD)+DFBLOCK        NO "BUF"
         LA    R1,DFBLOCK                          ->"S99_RB"
        LINK   EP=IKJEFF18         EXTRACT ERROR MESSAGE
         B     *+1 *** DYNALER *** R15 ^= 0 After SVC 99'
PUTDSNDT EQU   *                   R5->TEXT
         LA    R5,1(,R5)           STEP OVER PREVIOUS CHAR
         TM    0(R5),X'BF'         BLANK OR NULL?
         BNZ   PUTDSNDT            NO, THEN LOOP BACK
         MVI   0(R5),C'.'          PUT SEPARATOR '.'
         LA    R5,1(,R5)           STEP OVER '.'
         BR    R14                 AND RETURN
ALLOCOK  EQU   *
        OPEN   (PRTDCB,OUTPUT),MF=(E,OPNPARM) OPEN "ACB"
         LTR   R15,R15             ANY ERRORS?
        $B     NZ,'DCB OPEN error'
         LH    R3,(DCBBLKSI-IHADCB)+PRTDCB   BLOCKSIZE FROM "DCB"
         STH   R3,PRTBLKSI         SAVE BLOCKSIZE
         LA    R3,16(,R3)          ALLOW EXTRA BIT
        GETMAIN RU,LV=(R3),SP=250
         LA    R4,0(,R1)
         STM   R3,R4,PRTOUTLN /PRTOUTST SAVE LENGTH/START
         LM    R4,R5,PARMSAVE      RE-LOAD PARM REGS
         LA    R4,1(,R4)           STEP OVER ")"
         BCT   R5,*+4+4            REDUCE LENGTH AFTER ")"
           B     PRMALLDN          NO MORE PARM LEFT
         LA    R0,PRTENTL          LENGTH TO OBTAIN
        GETMAIN R,LV=(0)           GET EXTRA AREA
         LA    R1,0(,R1)
         ST    R1,PRTPNEXT         CHAIN
         LR    R9,R1               -> NEW PRT ENTRY
         CLI   0(R4),C','          MORE TO COME?
        $B     NE,'Invalid PARM - NO ","'
         LA    R4,1(,R4)           STEP OVER ","
         BCT   R5,PRMLOOP          AND REDUCE LENGTH
NOPRMLFT EQU   *
        $B     ,'Invalid PARM - none left'
PRMALLDN EQU   *
         MVC   LPXDOUBL(EXTRACTL),EXTRACT MODEL "EXTRACT"
        EXTRACT LPXPCOMM,MF=(E,LPXDOUBL)
         L     R2,LPXPCOMM         "COMM" FIELDS POINTER
         L     R3,COMECBPT-COM(,R2) GET "ECB" ADDRESS
         LA    R0,COMCIBPT-COM(,R2) POINT AT HEAD-OF-CHAIN
        QEDIT  ORIGIN=(0),CIBCTR=0 DIS-ALLOW ANY MORE "MODIFY"S
         LTR   R15,R15             "QEDIT" OKAY?
        $B     NZ,'"QEDIT" Invalid Return Code'
         L     R4,COMCIBPT-COM(,R2) GET FIRST "CIB" ADDRESS
MTCIBLP  EQU   *
         LTR   R3,R4               ANY "CIB"S PRESENT?
         BNP   MTCIBCHN              NO, THEN CARRY ON
         CLI   CIBVERB-CIB(R3),CIBSTOP "STOP"?
         BE    ISSTOP                YES, THEN CLOSE DOWN
         LA    R0,COMCIBPT-COM(,R2) POINT AT HEAD-OF-CHAIN
         L     R4,CIBNEXT-CIB(,R3) POINT AT NEXT "CIB" IN CHAIN
        QEDIT  ORIGIN=(0),BLOCK=(R3)
         LTR   R15,R15             "QEDIT" OKAY?
        $B     NZ,'"QEDIT" Invalid Return Code'
         B     MTCIBLP             LOOP BACK FOR NEXT
MTCIBCHN EQU   *
        MODESET MODE=SUP
         B     MAINLOOP
STIMWAIT EQU   *
         LA    R0,STIMECB
         ST    R0,ECBLIST
         XC    STIMECB,STIMECB
         L     R2,LPXPCOMM
         L     R3,COMECBPT-COM(,R2) GET "ECB" ADDRESS
         ST    R3,ECBLIST+4        SAVE "COMM-ECB" ADDRESS
         OI    ECBLIST+4,X'80'
         TM    0(R3),X'40'         HAS "ECB" BEEN "POST"ED?
         BNZ   MAINLOOP            YES, THEN PROCESS IT
        STIMERM SET,BINTVL==FE2'10.00',WAIT=NO,EXIT=STIMEXIT,          *
               PARM=ECBLIST,ID=STIMID,MF=(E,STIMST)
        WAIT   1,ECBLIST=ECBLIST
         TM    STIMECB,X'40'       HAS "ECB" BEEN "POST"ED?
         BNZ   NOTTIMER            YES, THEN NO "STIMERM CANCEL"
        STIMERM CANCEL,ID=STIMID,MF=(E,STIMCN)
NOTTIMER EQU   *
MAINLOOP EQU   *
         L     R2,LPXPCOMM
         L     R3,COMCIBPT-COM(,R2) GET FIRST "CIB" ADDRESS
         LTR   R3,R3               ANY "CIB"S PRESENT?
         BNP   NOCIBCHN            NO, THEN CARRY ON
         USING CIB,R3              ADDRESS "CIB"
         CLI   CIBVERB,CIBSTOP     "STOP"?
         BE    ISSTOP              YES, THEN CLOSE DOWN
NOCIBCHN EQU   *
         LA    R1,MYSSOB
         ST    R1,PSSOB
         OI    PSSOB,X'80'
         XC    MYSSOB,MYSSOB
         MVC   (SSOBID-SSOB)+MYSSOB,=CL4'SSOB'
         MVC   (SSOBLEN-SSOB)+MYSSOB,=Y(SSOBHSIZ)
         MVC   (SSOBFUNC-SSOB)+MYSSOB,=Y(SSOBSOUT)
         LA    R15,MYSSSO
         ST    R15,(SSOBINDV-SSOB)+MYSSOB
         XC    MYSSSO,MYSSSO
         MVC   (SSSOLEN-SSSOBGN)+MYSSSO,=Y(SSSOSIZE)
         OI    (SSSOFLG1-SSSOBGN)+MYSSSO,SSSODST
         OI    (SSSOFLG2-SSSOBGN)+MYSSSO,SSSOPSEE
         LA    R9,DSTCLSEN         -> DEST/CLASS STACK
         B     CHKJESXX            START BALL ROLLING
         USING PRT,R9              ADDRESS "PRT" IN "R9"
CHKJESLP EQU   *
         L     R9,PRTPNEXT         STEP TO NEXT ENTRY
         LTR   R9,R9               END OF STACK?
         BNP   STIMWAIT            YES, THEN WAIT A WHILE
CHKJESXX EQU   *
         NI    (SSSOFLG1-SSSOBGN)+MYSSSO,255-SSSOSCLS
         MVC   (SSSOCLSL-SSSOBGN)+MYSSSO,=CL8' ' RESET "CLASS"
         MVC   (SSSODEST-SSSOBGN)+MYSSSO,PRTDEST "DEST" SEL
         CLI   PRTCLASS,C'*'       ALL CLASSES WANTED?
         BE    *+4+6+4             YES, THEN LEAVE
           MVC   (SSSOCLSL-SSSOBGN)+MYSSSO,PRTCLASS "CLASS" SEL
           OI    (SSSOFLG1-SSSOBGN)+MYSSSO,SSSOSCLS
         LA    R1,PSSOB
        IEFSSREQ ,
         LTR   R15,R15
        $B     NZ,'"IEFSSREQ" error, "R15"<>0'
         CLC   (SSOBRETN-SSOB)+MYSSOB,=A(4) "IEFSSREQ" OKAY?
        $B     H,'"IEFSSREQ" error, "SSOBRETN">4'
         BE    CHKJESLP            YES, BUT NOTHING THERE
         LA    R1,ALCS99RB         POINT AT REQUEST BLOCK
         ST    R1,PTRS99RB         AND SAVE IN POINTER
         OI    PTRS99RB,X'80'      SET END-OF-LIST POINTER
         XC    ALCS99RB,ALCS99RB   CLEAR REQUEST BLOCK
         LA    R1,TEXTPTRS         POINT AT TEXT UNIT PTR LIST
         ST    R1,ALCS99RB+(S99TXTPP-S99RB) AND SAVE ADDRESS
         MVI   ALCS99RB+(S99RBLN-S99RB),(S99RBEND-S99RB) SET LENGT
         MVI   ALCS99RB+(S99VERB-S99RB),S99VRBAL SET "ALLOCATE" REQ
         LA    R14,JTXRDDN         "DDNAME" TEXT UNIT
         LA    R15,JTXDSN          "DSNAME" TEXT-UNIT
         LA    R0,JTXSUBS          "SUBSYS=JES2" TEXT UNIT
         LA    R1,JTXDISP          "DISP=(,DELETE)" TEXT UNIT
         SLR   R2,R2
         O     R2,=X'80000000'     SET END-OF-LIST MARKER
         STM   R14,R2,TEXTPTRS     SAVE IN TEXT-POINTER LIST
         MVC   JTXDSNX,(SSSODSN-SSSOBGN)+MYSSSO
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15           TEST RETURN CODE FROM "DYNALLOC"
         BNZ   DYNALCER *** R15 ^= 0 After SVC 99'
         MVC   WTOBFR(DBWTO3L),DBWTO3 COPY MODEL MESSAGE
         MVC DBWTO3JN+WTOBFR,(SSSOJOBN-SSSOBGN)+MYSSSO "JOBNAME"
         MVC DBWTO3JI+WTOBFR,(SSSOJOBI-SSSOBGN)+MYSSSO "JOBID"
         MVC DBWTO3CL+WTOBFR,(SSSOCLAS-SSSOBGN)+MYSSSO "CLASS"
         MVC DBWTO3DS+WTOBFR,(SSSODEST-SSSOBGN)+MYSSSO "DEST"
         MVC DBWTO3WT+WTOBFR,(SSSOPGMN-SSSOBGN)+MYSSSO "WRITER"
         MVC DBWTO3FM+WTOBFR,(SSSOFORM-SSSOBGN)+MYSSSO "FORM"
         MVC DBWTO3DN+WTOBFR,(SSSODSN-SSSOBGN)+MYSSSO  "DSNAME"
         MVC DBWTO3DI+WTOBFR,(SSSODSID-SSSOBGN)+MYSSSO "DSID"
        WTO    MF=(E,WTOBFR)       AND ISSUE MESSAGE
         MVC   JESDCBS,RJESDCBS    SET UP MODEL DCB
         MVC   (DCBDDNAM-IHADCB)+JESDCB,JTXRDDNX
        OPEN   (JESDCB,INPUT),MF=(E,OPNPARM) OPEN "JES_DCB"
         LTR   R15,R15             ANY ERRORS?
        $B     NZ,'JES_DCB OPEN error'
         OI    LPXSW,FIRSTSW       SET FIRST DONE
         NI    LPXSW,255-LPX1FLNE  RESET FLAGS
         L     R1,PRTOUTST         START OF OUTPUT BUFFER
         LA    R15,4(,R1)          START OF FIRST RECORD
         ST    R15,PRTOUTNX        CURRENT OUTPUT BUFFER POSITION
         XC    0(20,R1),0(R1)      CLEAR FRONT OF OUTPUT BUFFER
         LH    R15,PRTBLKSI        ->LAST BYTE OF OUTPUT BUFFER
         AR    R15,R1              ->LAST BYTE OF OUTPUT BUFFER
         ST    R15,PRTOUTEN        SAVE END OUTPUT BUFFER
         MVC   LPXFORM,(SSSOFORM-SSSOBGN)+MYSSSO SAVE "FORM"
         XC    LPXSTOW,LPXSTOW
        TIME   DEC
         STM   R0,R1,LPXTIME /LPXDATEP SAVE TIME AND DATE
         MVI   ORIGNAM+0,C'A'      AND SET SUFFIX
         MVI   ORIGNAM+7,C'A'      AND SET PREFIX
         XC    LPXMEMCT,LPXMEMCT   RESET DUP-MEMBER COUNTER
         UNPK  LPXDOUBL(6+1),LPXTIME(3+1) GIVE ME "HHMMSS"
         MVC   ORIGNAM+1(6),LPXDOUBL      GIVE ME "HHMMSS"
         MVC   STOWNAM,ORIGNAM     SET AS DEFAULT "MEMBER" NAME
         MVC   STOWC(1+1),=AL1(SPFENTRY,X'01')
         O     R1,=XL4'F'          SIGN MUST BE 'F'!
         STCM  R1,B'1111',STOWDT1  SAVE DATE FOR "STOW"
         STCM  R1,B'1111',STOWDT2  SAVE DATE FOR "STOW"
         STCM  R0,B'1100',STOWTMH  SAVE X'HHMM' FOR "STOW"
         MVC   STOWID+7(L'STOWID-7),=CL8' '
         MVC   STOWID(7),((SSSOJOBN+1)-SSSOBGN)+MYSSSO "JOBNAME"
         L     R4,PRTOUTST         START OF OUTPUT BUFFER
         LA    R4,4(,R4)           START OF FIRST RECORD
         USING INITMSG,R4          ADDRESS "INITMSG" IN "R4"
         XC    INITMSG(INITMSGL),INITMSG
         MVI   INMRDW+2-1,INITMSGL LENGTH OF "INIT" MESSAGE
         MVI   INMCC,X'FF'         SPECIAL "CC"
         MVC   INMTYPE,=C'INIT'
         MVC   INMJOBN,(SSSOJOBN-SSSOBGN)+MYSSSO "JOBNAME"
         MVC   INMJOBID,(SSSOJOBI-SSSOBGN)+MYSSSO "JOBID"
         MVC   INMCLAS,(SSSOCLAS-SSSOBGN)+MYSSSO "CLASS"
         MVC   INMPGMN,(SSSOPGMN-SSSOBGN)+MYSSSO "WRITER"
         MVC   INMDSN,(SSSODSN-SSSOBGN)+MYSSSO "DSNAME"
         MVC   INMDSID,(SSSODSID-SSSOBGN)+MYSSSO "CLASS"
         MVC   INMDEST,PRTDEST     "DEST" NAME
         MVC   INMFORM,(SSSOFORM-SSSOBGN)+MYSSSO "FORM"
         DROP  R4                  DIS-OWN "INITMSG" IN "R4"
         LA    R4,INITMSGL(,R4)    STEP OVER INITMSG
         ST    R4,PRTOUTNX         CURRENT OUTPUT BUFFER POSITION
         BAL   R10,GETJES          GOT AND GET "JES_RECORD"
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECCM "MACH_CC"?
         BZ    RECDGOTR            NO, THEN BRANCH
         LTR   R5,R5               ANY TEXT?
         BP    RECDGOTR            YES, THEN PRINT IT
         LR    R15,R6              COPY "MACH_CC"
         N     R15,=A(255-X'02')   REMOVE "IMMED" BIT
         CLM   R15,B'0001',=AL1(@PRSKP1A) "SKIP TO CHAN 1"?
         BE    RECDLOOP            YES, THEN IGNORE IT
         B     RECDGOTR            NO, THEN PROCESS IT
GETJES   EQU   *
        GET    JESDCB              GET RECORD POINTER
         LA    R4,0(,R1)           COPY RECORD TO SAFE PLACE
         LH    R5,(DCBLRECL-IHADCB)+JESDCB AND GET RECORD LENGTH
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECV "RECFM=V"?
         BZ    GJESNVAR            NO, THEN BRANCH
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECF "RECFM=V"?
         BNZ   GJESNVAR            NO, THEN BRANCH
         LH    R5,0(,R4)           GET RECORD LENGTH
         LA    R4,4(,R4)           START OF RECORD PROPER
         SH    R5,=Y(4)
         BNM   *+4+2
         SLR   R5,R5               FORCE NO TEXT PRESENT
GJESNVAR EQU   *
         LA    R5,0(R5,R4)         -> AFTER END OF TEXT
         BCTR  R5,0
         TM    0(R5),X'BF'         LAST CHARACTER?
         BZ    *-4-2               NO, THEN LOOP BACK
         LA    R5,1(,R5)           STEP OVER LAST CHAR
         SR    R5,R4               LENGTH OF ORIG_TEXT
         BP    *+4+2
         SLR   R5,R5               FORCE NO TEXT PRESENT
         LA    R6,C' '             DEFAULT = SPACE_1
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECCM+DCBRECCA
         BZR   R10   GETJES        NO, THEN RETURN
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECCA "ASA_CC"?
         BZ    GJESNASA            NO, THEN BRANCH
         LTR   R5,R5               DID WE LOSE "CC"?
         BNPR  R10   GETJES        YES, THEN ASSUME ' '
         IC    R6,0(,R4)           GET "ASA_CC" FROM RECORD
         LA    R4,1(,R4)           STEP OVER IT
         BCTR  R5,0                AND REDUCE LENGTH
         BR    R10   GETJES
GJESNASA EQU   *                   "MACH_CC"
         TM    0(R4),X'02'         "IMMED" SET = NO TEXT?
         BZ    *+4+4               NO, THEN CARRY ON
         LA    R5,1                YES, FORCE ONLY "CC" PRESENT
         IC    R6,0(,R4)           GET "MACH_CC" FROM RECORD
         LA    R4,1(,R4)           STEP OVER IT
         BCTR  R5,0                AND REDUCE LENGTH
         BR    R10   GETJES
RECDLOOP EQU   *
         BAL   R10,GETJES          GOT AND GET "JES_RECORD"
RECDGOTR EQU   *   R4->DATA, R5= LENGTH, R6=MACH/ASA CC
         TM    LPXSW,LPX1FLNE      HAVE WE NAME ALREADY?
         BNZ   PRINNFLN            YES, THEN BRANCH
         CH    R5,=Y(L'HDRPRE+8)   ENOUGH SPACE FOR NAME?
         BL    PRINNFLN            NO, THEN BRANCH
         CLC   HDRPRE,0(R4)        IS THIS "NAME_LINE"?
         BNE   PRINNFLN            NO, THEN BRANCH
*** AFTER "HDRPRE" SHOULD = "FFFFSSSS" TO BE USED AS THE MEMBER NAME
         TRT   L'HDRPRE(8,R4),VALCHTAB CHECK VALID "FFFFSSSS"
         BNZ   PRINNFLN            NOT VALID, IGNORE IT
         MVC   STOWNAM,L'HDRPRE(R4)  COPY "FFFFSSSS"
         OI    LPXSW,LPX1FLNE      SET "NAME_LINE" FOUND
PRINNFLN EQU   *
         TM    (DCBRECFM-IHADCB)+JESDCB,DCBRECCM "MACH_CC"?
         BZ    PRN08000            NO, THEN BRANCH
         LTR   R5,R5               LENGTH OF ORIG_TEXT
         BP    *+4+4
           O     R6,=A(@IMMED)     FORCE NO TEXT PRESENT
         STM   R4,R6,LPXRECTX      SAVE TEXT_START/TEXT_LEN/CC
         STC   R6,LPXTMPCC         SAVE "THIS_CC" FOR A SEC
         TM    LPXTMPCC,@IMMED     IMMEDIATE COMMAND?
         BNO   PRN06040            NO, THEN PROCESS "PREV_CC"
         TM    LPXOLDCC,@SKIP      IF "PREV_CC" IS "SKIP"
         BNZ   PRN06040            THEN PROCESS "PREV_CC"
         TM    LPXTMPCC,@SKIP      IS "THIS_CC" A "SKIP"?
         BO    PRN06140            YES, IGNORE PREV SPACE
         STC   R6,LPXOLDCC         SAVE "THIS_CC" AS "PREV_CC"
         SRL   R6,3                GET RID OF CONTROL BITS
         LA    R0,B'00000111'
         NR    R6,R0
         AH    R6,LPXOLDCNT        ADD IN LAST SPACE
         STH   R6,LPXOLDCNT
         B     PRN06180            AND IGNORE THIS LINE
PRN06040 EQU   *
         LH    R3,LPXOLDCNT
         TM    LPXOLDCC,@SKIP      SKIP COMMAND?
         BO    PRN06080            YES,
PRN06060 EQU   *
         CH    R3,=Y(3)            SPACE >= MAX ALLOWED?
         BNH   PRN06100            NO, THEN PROCESS AS REQUIRED
         SLR   R4,R4               INDICATE NO TEXT
         SLR   R5,R5               INDICATE NO TEXT
         LA    R6,C'-'             SPACE THREE LINES
         BAL   R10,PUTRECRD        SPACE THREE LINES
         SH    R3,=Y(3)
         B     PRN06060
PRN06080 EQU   *
         IC    R6,SKPTAB(R3)
         B     PRN06120
PRN06100 EQU   *
         IC    R6,SPCTAB(R3)       GET CONTROL CHAR
PRN06120 EQU   *
         LM    R4,R5,LPXRECTX      RE-LOAD TEXT_START/TEXT_LEN
         BAL   R10,PUTRECRD        PUT RECORD
         LM    R4,R6,LPXRECTX      RE-LOAD "MACH_CC"
PRN06140 EQU   *
         STC   R6,LPXOLDCC         SAVE OLD CONTROL CHAR ASIS
         SRL   R6,3                GET RID OF CONTROL BITS
         LA    R0,B'00000111'
         NR    R6,R0
         STH   R6,LPXOLDCNT
PRN06180 EQU   *
         B     RECDLOOP            NOW LOOP BACK FOR NEXT
PRN08000 EQU   *
         BAL   R10,PUTRECRD        SPACE THREE LINES
         B     RECDLOOP            NOW LOOP BACK FOR NEXT
PUTRECRD EQU   *       R4->TEXT,R5=TEXT_LEN,R6=CC,R10=RET
         L     R14,PRTOUTNX        NEXT POSITION TO WRITE
         LA    R0,4+1(R5,R14)      POINT AFTER END
         CL    R0,PRTOUTEN         ENOUGH ROOM IN THIS BUFFER?
         BNH   PRNBFNFL            YES, THEN SHOVE IT IN
*** BUFFER IS FULL SO "OS-WRITE" IT OUT
PUTBUFFR EQU   *                   R4->RECORD,R5=LEN,R10=RET
         L     R2,PRTOUTST         START OF BUFFER
         L     R14,PRTOUTNX        NEXT POSITION TO WRITE
         SR    R14,R2              END-START=LENGTH
         STH   R14,0(,R2)          SET INTO "BDW"
         STH   R14,(DCBBLKSI-IHADCB)+PRTDCB AND INTO "DCB"
        WRITE  LPXWRITE,SF,PRTDCB,(R2),MF=E ISSUE "OS-WRITE"
        CHECK  LPXWRITE            AND WAIT FOR COMPLETION
         LA    R14,4(,R2)          RE-START AT FIRST RECORD POS
         XC    0(20,R2),0(R2)      CLEAR FRONT BIT
         LTR   R5,R5               WAS THIS A BUFFER FLUSH?
         BMR   R10  PUTRECRD/BUFFR YES, THEN RETURN
PRNBFNFL EQU   *
         LA    R15,1               INCREMENT
         AH    R15,STOWRC1         NUMBER OF RECORDS
         STH   R15,STOWRC1         NUMBER OF RECORDS
         STH   R15,STOWRC2         NUMBER OF RECORDS
         LA    R15,4+1(,R5)        TOTAL RECORD LENGTH
         XC    0(4,R14),0(R14)     CLEAR "RDW"
         STH   R15,0(,R14)         SAVE INTO "RDW"
         STC   R6,4(,R14)          SAVE "CC" AFTER "RDW"
         LA    R14,4+1(,R14)       START OF TEXT DESTINATION
         LR    R15,R5              COPY LENGTH
         MVCL  R14,R4              MOVE RECORD TO OUTPUT BUFFER
         ST    R14,PRTOUTNX        AND SAVE NEXT POS TO WRITE
         BR    R10  PUTRECRD/BUFFR AND RETURN
*****************************************************************
*  FLUSH THE BUFFER                                             *
*****************************************************************
EODAD    EQU   *
         L     R14,PRTOUTST
         LA    R14,4(,R14)         -> FIRST RECORD
         CL    R14,PRTOUTNX        IS BUFFER EMPTY?
         BNL   NOFLUSH             YES, THEN NOTHING TO FLUSH
         SLR   R5,R5               INDICATE ONLY FLUSH WANTED
         BCTR  R5,0                INDICATE ONLY FLUSH WANTED
         BAL   R10,PUTBUFFR        FLUSH BUFFER
NOFLUSH  EQU   *
RESTOW   EQU   *
        STOW   PRTDCB,LPXSTOW,A    NOTE WHERE MEMBER STARTS
         LTR   R15,R15             "OS-STOW" OKAY
         BZ    STOWOK
         CH    R15,=Y(4)           DUPLICATE MEMBER?
        $B     NE,'"OS-STOW" error'
         LA    R15,1               UP DUP-MEMBER COUNTER
         AH    R15,LPXMEMCT        UP DUP-MEMBER COUNTER
         STH   R15,LPXMEMCT        UP DUP-MEMBER COUNTER
         SLR   R14,R14
         D     R14,=A(L'LETRTAB)   SPLIT INTO TWO
         IC    R0,LETRTAB(R14)     TRANSLATE TO LETTER
         STC   R0,ORIGNAM+7        AND SAVE INTO MEMBER NAME
         IC    R0,LETRTAB(R15)     TRANSLATE TO LETTER
         STC   R0,ORIGNAM+0        AND SAVE INTO MEMBER NAME
         MVC   STOWNAM,ORIGNAM     SET AS "MEMBER" NAME
         B     RESTOW              NOW TRY "OS-STOW" AGAIN
STOWOK   EQU   *
         MVC   WTOBFR(DBWTO4L),DBWTO4 COPY MODEL MESSAGE
         MVC   DBWTO4DN+WTOBFR,PRTDSNAM "DSNAME"
         LA    R14,DBWTO4DN+WTOBFR
         AH    R14,PRTDSNL
         MVI   0(R14),C'('
         MVC   1(8,R14),STOWNAM    "MEMBER"
         MVC   1+8(2,R14),=C')"'
        WTO    MF=(E,WTOBFR)       AND ISSUE MESSAGE
        CLOSE  (JESDCB,),MF=(E,OPNPARM) "OS_CLOSE" "JES_DCB"
         SLR   R15,R15
         ICM   R15,B'0110',(DCBBUFCA-IHADCB)+PRTDCB
         BZ    NOFRJSPL            NO BUFFER-POOL TO FREE
        FREEPOOL JESDCB            "OS_FREEPOOL" DCB-BUFFERS
NOFRJSPL EQU   *
         MVC   JTXUDDNX,JTXRDDNX
         MVI   ALCS99RB+(S99VERB-S99RB),S99VRBUN SET "UN-ALLOCATE" REQ
         LA    R14,JTXUDDN         "DDNAME" TEXT UNIT
         LA    R15,JTXUODSP        "DISP=(,DELETE)"
         O     R15,=X'80000000'    SET END-OF-LIST MARKER
         STM   R14,R15,TEXTPTRS    SAVE IN TEXT-POINTER LIST
         LA    R1,PTRS99RB
        DYNALLOC ,                 GO TO DYNAMIC ALLOCATION
         LTR   R15,R15             TEST RETURN CODE FROM "DYNALLOC"
         BNZ   DYNALCER            *** R15 ^= 0 After SVC 99'
         B     MAINLOOP            AND PROCESS NEXT JOB
*****************************************************************
*  CLOSE OUT PROCESSING                                         *
*****************************************************************
ISSTOP   EQU   *
        STIMERM CANCEL,ID=STIMID,MF=(E,STIMCN)
         LA    R9,DSTCLSEN         -> DEST/CLASS STACK
         B     CLSPRTXX            START BALL ROLLING
         USING PRT,R9              ADDRESS "PRT" IN "R9"
CLSPRTLP EQU   *
         L     R9,PRTPNEXT         STEP TO NEXT ENTRY
         LTR   R9,R9               END OF STACK?
         BNP   CLSPRTZZ            YES, THEN WAIT A WHILE
CLSPRTXX EQU   *
        CLOSE  (PRTDCB,),MF=(E,OPNPARM) "OS_CLOSE" DCB
         SLR   R15,R15
         ICM   R15,B'0110',(DCBBUFCA-IHADCB)+PRTDCB
         BZ    NOFROUPL            NO BUFFER-POOL TO FREE
        FREEPOOL PRTDCB            "OS_FREEPOOL" DCB-BUFFERS
NOFROUPL EQU   *
         B     CLSPRTLP
CLSPRTZZ EQU   *
         LM    R0,R1,PRTOUTLN /PRTOUTST GET BUFFER LENGTH/START
         LTR   R1,R1
         BNP   CLOSNBFR            NO, THEN NOWT TO FREE
        FREEMAIN RU,LV=(0),SP=250,A=(R1)
CLOSNBFR EQU   *
         LR    R1,R13
         L     R13,4(,R13)         OLD SAVE AREA
         L     R0,=A(WORKLEN)
        FREEMAIN RU,LV=(0),A=(R1)
        RETURN (14,12),RC=0        AND RETURN
STIMEXIT DC    0H'0'
         STM   R14,R12,12(R13)     SAVE REGS
         L     R2,4(,R1)           GET "STIMECB" ADDRESS
        POST   (R2),0              WAKEY WAKEY
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
*****************************************************************
*  CONSTANTS AND MESSAGES                                       *
*****************************************************************
         LTORG ,
HDRPRE   DC    C'*****++++'        PREFIX INFRONT OF "NAME_LINE"
VALCHTAB DC    0D'0'
         DC    (C'A'-(*-VALCHTAB))X'FF',(C'I'-C'A'+1)X'00'
         DC    (C'J'-(*-VALCHTAB))X'FF',(C'R'-C'J'+1)X'00'
         DC    (C'S'-(*-VALCHTAB))X'FF',(C'Z'-C'S'+1)X'00'
         DC    (C'0'-(*-VALCHTAB))X'FF',(C'9'-C'0'+1)X'00'
         DC    (X'FF'-(*-VALCHTAB))X'FF'
EXTRACT  EXTRACT *-*,'S',FIELDS=COMM,MF=L
EXTRACTL EQU   *-EXTRACT
RJESDCBS DC    0D'0'
RJESDCB  DCB   DSORG=PS,MACRF=GL,DDNAME=XXX,EODAD=EODAD,               *
               EXLST=LPXEXLST-WORKAREA
RJESDCBL EQU   *-RJESDCBS
RPRTDCBS DC    0D'0'
RPRTDCB  DCB   DSORG=PO,MACRF=W,DDNAME=XXX,EXLST=LPXEXLST-WORKAREA,    *
               RECFM=VBA
RPRTDCBL EQU   *-RPRTDCBS
REALCONS DC    0D'0'
ROPNPARM OPEN  (*-*,OUTPUT),MF=L
         WRITE RLPXWRIT,SF,PRTDCB-PRT,MF=L
RJTXSUBS DC    Y(DALSSREQ,0) 1,4),CL4'JES2' "SUBSYS=JES2"
RJTXDISP DC    Y(DALNDISP,1,1),X'04'     "DISP=(,DELETE)"
RJTXRDDN DC    Y(DALRTDDN,1,L'RJTXRDDNX) RETURN "DDNAME" TEXT UNIT
RJTXRDDNX DC   CL8' '              "DDNAME" PROPER
RJTXUDDN DC    Y(DALDDNAM,1,L'RJTXRDDNX) "DDNAME" TEXT UNIT
RJTXUDDNX DC   CL8' '              "DDNAME" PROPER
RJTXUODSP DC   Y(DUNOVDSP,1,1),X'04'     "DISP=(,DELETE)"
RJTXDSN  DC    Y(DALDSNAM,1,L'RJTXDSNX) "DSNAME" TEXT UNIT PREFIX
RJTXDSNX DC    CL44' '                   "DSNAME" PROPER
RFTXSTAT DC    Y(DALSTATS,1,1),X'08' "DISP=SHR
RFTXDISP DC    Y(DALNDISP,1,1),X'08'          ,KEEP"
RFTXCLOS DC    Y(DALCLOSE,0)       "FREE=CLOSE"
RFTXDDN  DC    Y(DALDDNAM,1,L'RFTXDDNX) "DDNAME" TEXT UNIT
RFTXDDNX DC    CL8'@DDNAME'        "DDNAME" PROPER
RFTXDSN  DC    Y(DALDSNAM,1,L'RFTXDSNX) "DSNAME" TEXT UNIT PREFIX
RFTXDSNX DC    CL44'MMMMMMMM.DYYMMDD.PPPPPPPP',CL8' ' "DSNAME"
RFTXNSTA DC    Y(DALSTATS,1,1),X'04' "DISP=NEW
RFTXNDSP DC    Y(DALNDISP,1,1),X'02'          ,CATLG"
RFTXALTYP DC   Y(DALCYL,0,0),AL3(0) SPACE=(CYL,...........)"
RFTXPRM  DC    Y(DALPRIME,1,3),AL3(0)
RFTXSEC  DC    Y(DALSECND,1,3),AL3(0)
RFTXDIR  DC    Y(DALDIR,1,3),AL3(0)
RFTXRFM  DC    Y(DALRECFM,1,1),AL1(0)
RFTXLRL  DC    Y(DALLRECL,1,2),Y(0)
RFTXBLK  DC    Y(DALBLKSZ,1,2),Y(0)
RFTXVOL  DC    Y(DALVLSER,1,6),CL6'VOLUME'
RSTIMST STIMERM SET,MF=L
RSTIMSTL EQU   *-RSTIMST
RSTIMCN STIMERM CANCEL,MF=L
RSTIMCNL EQU   *-RSTIMCN
REALCONE DC    0D'0'
@IMMED   EQU   B'00000010'
@SKIP    EQU   B'10000000'
SPCTAB   DC    C'+ 0-'
SKPTAB   DC    C' 123456789ABC   '
MONTHTAB DC    AL1(31,0,31,30,31,30,31,31,30,31,30,255)
HEXTAB   DC    C'0123456789ABCDEF'
LETRTAB  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
RT3S99M  WTO   'BZWTR: Dynamic Allocation "SVC 99" error code X''eeee,i*
               iii''!',                                                *
               ROUTCDE=2,MF=L
RT3S99ML EQU   *-RT3S99M           LENGTH OF MODEL "WTO"
RT3S99ME EQU   RT3S99M+4+48,4,C'C' "ERROR-CODE" OFFSET
RT3S99MI EQU   RT3S99M+4+53,4,C'C' "INFORMATION-CODE" OFFSET
DBWTO3  WTO    'BZWTR: Selecting jjjjjjjj(iiiiiiii) c/dddddddd/wwwwwwww*
               /FFFF/12345678901234567890123456789012345678901234/?????*
               ???',ROUTCDE=11,MF=L
DBWTO3L  EQU   *-DBWTO3
DBWTO3JN EQU   4+17,08,C'C'        JOBNAME FROM "JES"
DBWTO3JI EQU   4+26,08,C'C'        JOBID FROM "JES"
DBWTO3CL EQU   4+36,01,C'C'        CLASS FROM "JES"
DBWTO3DS EQU   4+38,08,C'C'        DEST FROM "JES"
DBWTO3WT EQU   4+47,08,C'C'        WRITER NAME FROM "JES"
DBWTO3FM EQU   4+56,04,C'C'        FORM FROM "JES"
DBWTO3DN EQU   4+61,44,C'C'        DATASET NAME FROM "JES"
DBWTO3DI EQU   4+106,08,C'C'       DATASET ID FROM "JES"
DBWTO4  WTO    'BZWTR: saved as "                                      *
                                ',ROUTCDE=11,MF=L
DBWTO4L  EQU   *-DBWTO4
DBWTO4DN EQU   4+17,44,C'C'        DATASET NAME
$$JFCB   DSECT ,
        IEFJFCBN ,
         ORG   ,
$$JFCBLN EQU   *-$$JFCB
PRT      DSECT ,
PRTPNEXT DC    A(0)                -> NEXT "PRT" OR "0"
PRTDEST  DC    CL8' '
PRTCLASS DC    CL8' '
PRTDSNL  DC    Y(0)
PRTDSNAM DC    CL44' '
PRTDCBS  DC    XL(RPRTDCBL)'00'    "OUTPUT_PDS_DCB"
PRTDCB   EQU   PRTDCBS+(RPRTDCB-RPRTDCBS)
PRTOUTLN DC    A(0)                GETMAIN LENGTHOF OUTPUT BUFFER
PRTOUTST DC    A(0)                START OF OUTPUT BUFFER
PRTOUTEN DC    A(0)                ->AFTER END OF OUTPUT BUFFER
PRTOUTNX DC    A(0)                ->NEXT AVAILABLE OUTPUT POS
PRTBLKSI DC    Y(0)                BLOCK-SIZE OF FILE
PRTENTL  EQU   *-PRT               LENGTH OF AREA
WORKAREA DSECT ,
OSSAVE   DC    18F'0'
         DC    0D'0'
MYSSOB   DC    XL(SSOBHSIZ)'00'
         DC    0D'0'
MYSSSO   DC    XL(SSSOSIZE)'00'
PSSOB    DC    A(0)
WORKCONX DC    ((REALCONE-REALCONS)/8)D'0'
WORKCONS EQU   WORKCONX,REALCONE-REALCONS
OPNPARM  EQU   (ROPNPARM-REALCONS)+WORKCONX
LPXWRITE EQU   (RLPXWRIT-REALCONS)+WORKCONX
JTXSUBS  EQU   (RJTXSUBS-REALCONS)+WORKCONS
JTXDISP  EQU   (RJTXDISP-REALCONS)+WORKCONS
JTXRDDN  EQU   (RJTXRDDN-REALCONS)+WORKCONS
JTXRDDNX EQU   (RJTXRDDNX-REALCONS)+WORKCONS
JTXUDDN  EQU   (RJTXUDDN-REALCONS)+WORKCONS
JTXUDDNX EQU   (RJTXUDDNX-REALCONS)+WORKCONS
JTXUODSP EQU   (RJTXUODSP-REALCONS)+WORKCONS
JTXDSN   EQU   (RJTXDSN-REALCONS)+WORKCONS
JTXDSNX  EQU   (RJTXDSNX-REALCONS)+WORKCONS
FTXSTAT  EQU   (RFTXSTAT-REALCONS)+WORKCONS
FTXDISP  EQU   (RFTXDISP-REALCONS)+WORKCONS
FTXCLOS  EQU   (RFTXCLOS-REALCONS)+WORKCONS
FTXDDN   EQU   (RFTXDDN-REALCONS)+WORKCONS
FTXDDNX  EQU   (RFTXDDNX-REALCONS)+WORKCONS
FTXDSN   EQU   (RFTXDSN-REALCONS)+WORKCONS
FTXDSNX  EQU   (RFTXDSNX-REALCONS)+WORKCONS
FTXNSTA  EQU   (RFTXNSTA-REALCONS)+WORKCONS
FTXNDSP  EQU   (RFTXNDSP-REALCONS)+WORKCONS
FTXALTYP EQU   (RFTXALTYP-REALCONS)+WORKCONS
FTXALTYPX EQU (S99TUPAR-S99TUNIT)+(RFTXALTYP-REALCONS)+WORKCONS,3
FTXPRM   EQU   (RFTXPRM-REALCONS)+WORKCONS
FTXPRMX  EQU   (S99TUPAR-S99TUNIT)+(RFTXPRM-REALCONS)+WORKCONS,3
FTXSEC   EQU   (RFTXSEC-REALCONS)+WORKCONS
FTXSECX  EQU   (S99TUPAR-S99TUNIT)+(RFTXSEC-REALCONS)+WORKCONS,3
FTXDIR   EQU   (RFTXDIR-REALCONS)+WORKCONS
FTXDIRX  EQU   (S99TUPAR-S99TUNIT)+(RFTXDIR-REALCONS)+WORKCONS,3
FTXRFM   EQU   (RFTXRFM-REALCONS)+WORKCONS
FTXRFMX  EQU   (S99TUPAR-S99TUNIT)+(RFTXRFM-REALCONS)+WORKCONS,1
FTXLRL   EQU   (RFTXLRL-REALCONS)+WORKCONS
FTXLRLX  EQU   (S99TUPAR-S99TUNIT)+(RFTXLRL-REALCONS)+WORKCONS,2
FTXBLK   EQU   (RFTXBLK-REALCONS)+WORKCONS
FTXBLKX  EQU   (S99TUPAR-S99TUNIT)+(RFTXBLK-REALCONS)+WORKCONS,2
FTXVOL   EQU   (RFTXVOL-REALCONS)+WORKCONS
FTXVOLX  EQU   (S99TUPAR-S99TUNIT)+(RFTXVOL-REALCONS)+WORKCONS,6
STIMST   EQU   (RSTIMST-REALCONS)+WORKCONS
STIMCN   EQU   (RSTIMCN-REALCONS)+WORKCONS
JESDCBS  DC    XL(RJESDCBL)'00'    "JES_DCB"
JESDCB   EQU   JESDCBS+(RJESDCB-RJESDCBS)
DSTCLSEN DC    XL(PRTENTL)'00'     FIRST ENTRY
LPXSW    DC    X'00'
FIRSTSW  EQU   B'01000000'
LPX1FLNE EQU   B'00010000'         "NAME" LINE FOUND
LPXOLDCC DC    X'00'
LPXOLDCNT DC   H'0'
LPXTMPCC DC    X'00'
         DC    XL3'00'             *** SPARE ***
LPXJOBNM DC    CL8'JOBNAME'        MY JOBNAME (EG "TSPRINT")
LPXFORM  DC    CL4'FORM'
LPXTIME  DC    A(0)
LPXDATEP DC    A(0)
LPXEXLST DC    A(0)
LPXDEBUG DC    A(0)
LPXPCOMM DC    A(0)
ECBLIST  DC    2A(0)
STIMECB  DC    A(0)
STIMID   DC    A(0)
DSNPDST  DC    A(0)                ->"DEST" WITHIN "DSNAME"
PARMSTRT DC    A(0)                ->START OF "OS_PARM"
PARMSAVE DC    A(0)                ->NEXT/LENLEFT OF "OS_PARM"
LPXDOUBL DC    4D'0'
LPXRECTX DC    A(0)                ORIG_TEXT START
LPXRECLN DC    A(0)                ORIG_TEXT LENGTH
LPXRECCC DC    A(0)                ORIG_TEXT "MACH_CC"
LPXMEMCT DC    Y(0)                DUP-MEMBER COUNT
         DC    0D'0'  "OS-STOW" DIRECTORY ENTRY FOR "ISPF" STATS
ORIGNAM  DC    CL8'AAHHMMSS'
STOWNAM  DC    CL8'AAHHMMSS'
STOWTTR  DC    XL3'00'
STOWC    DC    AL1(SPFENTRY)       SIZE OF DATA
STOWVER  DC    X'01000000'
STOWDT1  DC    PL4'0'              1ST DATE FIELD
STOWDT2  DC    PL4'0'              LAST DATE FIELD
STOWTMH  DC    X'00'               HOUR OF LAST UPDATE
STOWTMM  DC    X'00'               MIN  OF LAST UPDATE
STOWRC1  DC    YL2(0)              INITIAL RECORD COUNT
STOWRC2  DC    YL2(0)              CURRENT RECORD COUNT
STOWMOD  DC    XL2'0'
STOWID   DC    CL10'DIRSTAT'       SPACE FOR ID AREA
LPXSTOW  EQU   STOWNAM,*-STOWNAM
SPFENTRY EQU   (((L'LPXSTOW-(STOWDT1-LPXSTOW))+1)/2)+2
         DC    0D'0'
ALCS99RB DC    XL(S99RBEND-S99RB)'00' SVC 99 REQUEST BLOCK
PTRS99RB DC    A(ALCS99RB)         -> ALCS99RB
TEXTPTRS DC    15A(0)              SVC 99 TEXT UNIT POINTER LIST
DYNERRGS DC    4A(0)               R14,R15,R0,R1 AFTER "DYN_ALC"
DFBLOCK  DC    (DFLEN)X'00'        "DFDSECT" FOR "IKJEFF18"
WTOBFR   DC    XL256'00'           WTO BUFFER
LPXJFCB  DC    XL($$JFCBLN)'00'    "JFCB"
WORKLEN  EQU   *-WORKAREA
INITMSG  DSECT ,
INMRDW   DC    Y(*-*,0)
INMCC    DC    X'FF'
INMTYPE  DC    CL4' '
INMORIG  DC    CL4' '
INMMCC   DC    X'00'
INMJOBN  DC    CL8' '              JOBNAME BEING PROCESSED
INMJOBID DC    CL8' '              JOBID   BEING PROCESSED
INMPGMN  DC    CL8' '              "WRITER"
INMDSN   DC    CL44' '             "DSNAME"
INMDSID  DC    CL8' '              "DSID"
INMDEST  DC    CL8' '              "DEST"
INMCLAS  DC    CL1' '              "CLASS"
INMFORM  DC    CL4' '              FORM CURRENTLY ON PRINTER
INMUCS   DC    CL4' '              UCS CURRENTLY IN USE ON PRINTE
INITMSGL EQU   *-INITMSG           LENGTH OF "INIT" MESSAGE
BZWTR    CSECT ,
        CVT    DSECT=YES,LIST=NO
        IKJTCB SYS=AOS2,DSECT=YES,LIST=YES
        IEFTIOT1 ,
        IEFJESCT ,
        IHAPSA ,
        PREQU  @PR
        REGEQU ,
         END   BZWTR


Martin Hamilton
Technical Consultant
Thomson Tour Operations Ltd (UK)           c Thomson Tour Operations 1995

