OS/2-TSO interconnection

Problem addressed

There is an ever increasing acceptance that the two major IBM
platforms, mainframe and PC, are complementary. Although there
are many standard packages (programs) that cater for data
transmission between the two platforms (with varying degrees of
efficiency), the use of a PC to directly invoke a mainframe
procedure (command) is less well supported  IBM's Enhanced
Conductivity Facilities (ECF) product is often an 'overkill'. Even
though the basic routines used by ECF (currently EHLLAPI and
LU2, later APPC and LU 6.2) are not difficult to use, their use has
often been neglected, possibly because a number of different
disciplines are needed - C, EHLLAPI, procedure language
(REXX), etc, on the PC, command procedures (REXX) on the
mainframe. The TSOEXEC program described here is a
generalized procedure language function that can be incorporated
in an OS/2 procedure (cmd) to invoke a mainframe procedure
(command) and return the results as a REXX variable.

Introduction to EHLLAPI

EHLLAPI is a group of routines that enable a PC program to
simulate mainframe (TSO) interactions. The fundamental
EHLLAPI entity is the presentation space, which corresponds to
the TSO display - the presentation space contains the information
that normally would be displayed. There are functions to simulate
keyed input and to query the keyed input. There are also
EHLLAPI functions to directly send a file between the PC and
the mainframe and vice versa. The TSOEXEC function makes use
of a number of these EHLLAPI functions (the EHLLAPI
Programming Reference manual contains further information -
for example, error return codes).

Solution

Although the solution presented here uses OS/2 facilities (REXX,
Communication Manager, etc), the general methodology also
applies to MS-DOS systems (MS-DOS does not have a standard
REXX processor, although third-party REXX implementations
are available).

In OS/2, REXX functions are written as Dynamic Link Library
(DLL) modules and must be registered before they can be used.
A REXX function, once registered, can be used by all OS/2
partitions (similarly, a deregistration applies to all OS/2 partitions).
The DLL (REXX function) is stored in a library with the specified
entry point name. These three pieces of information (library name,
function name, entry point name) are supplied to the registration -
the LIBPATH entry in the CONFIG.SYS file must contain this
library name.

The standard RXFUNCADD function can be used to register a
REXX user-function. RXFUNCADD has three parameters:

o      The function name (as invoked)

o      The library name

o      The entry point name.

The complementary function RXFUNCDROP can be used to
deregister a user function. RXFUNCDROP has a single
parameter, the function name.

The program described in this article requires the following
REXX routines from the OS/2 Toolkit: RxVar function,
SHVBLOCK definition, RXSTRING definition, etc. The only
REXX control blocks actually required by the TSOEXEC
program are the arguments (parameters) passed to the function on
entry; these parameters are RXSTRINGs - the following hand-
coded definitions can be used:

typedef struct RXSTRING
{
  int strlength;
  char *strptr;
};

typedef RXSTRING *PRXSTRING;

The use of RxVar (and SHVBLOCK) to set the RC variable is
not strictly essential.

Invocation (OS/2)

The program (REXX function) is invoked from a REXX EXEC
like this:

      x = tsoexec(hostcmdname [parameter][,hostdsname])

hostcmdname  - Name of the host command (and any parameters
the command requires)

parameter - (Optional) parameters to be passed to hostcmdname.

hostdsname - Name of the host dataset that contains the file to be
transferred (RECFM V, F), optional. If hostdsname is omitted, no
data will be transferred (except for the host command return
code).

Processing

The program performs the following functions:

1      Executes hostcmdname command (in TSO READY or SPF
6 mode).

2      Searches presentation space for EOP nn (nn = completion
code).

3      The temporary PC file is created.

4      The hostdsname file is transferred to the PC (the file is
converted to ASCII and transferred in stream format, ie without
end-of-record delimiters).

5      The file content is returned as function result.

6      The temporary PC file is deleted.

7      REXX variable RC is set to nn (-1 if no EOP in the host
presentation space).

Steps 3 through 6 are only performed when a hostdsname
parameter has been specified.

The TSO user must be logged on and either in TSO READY or
SPF 6 mode, depending on whether ISPF services are required.
Note that other EHLLAPI services can be used to activate ISPF
dialogues.

Function return codes

0      Processing completed successfully.

4      Host communication error.

8      Host file too large - too much data is to be transferred. The
sample program allows a maximum of 65,335 bytes (#define
BLKSIZE 65,335).

12      Invalid number of invocation parameters (terminal).

The mainframe procedure can return a completion code to the PC
by displaying the message EOP nnn . The numeric completion
code, nnn, is set into the standard REXX variable RC (-1, if no
EOP nnn message is present).

Error messages are written to the log file (TSOEXEC.LOG in the
current directory). The log file contains error entries with the
format:

      trace func frc n func frc

where n is the trace-point number - the parameter passed with
display_frc(n); func is the latest EHLLAPI function (for negative
frc, this function is not significant); and frc is the current function
return code.

Example

The OS/2 EXEC (PROC1) invokes the TSO/ISPF EXEC
GETMNAME that sets the member names of the specified
partition dataset (first parameter) into a pre-allocated sequential
dataset (second dataset). The contents of this sequential dataset are
to be transferred to the OS/2 system, where the member names are
to be displayed. PROC1 could be extended to use these member
names to transfer the individual members from the mainframe to
the PC (by using the standard RECEIVE command).

Sample exec (PROC1)

/* rexx - PROC1 */
frc = RXFUNCADD('TSOEXEC','URX','TSOEXEC'); /* register TSOEXEC function */
IF frc <> 0 THEN SAY "RXFUNCADD error:" frc;
x = TSOEXEC("%GETMNAME 'test.load' 'user.spf.data'","'user.spf.data'");
IF RC = 0
  THEN SAY "x:" x;
  ELSE SAY "TSOEXEC RC:" RC;

Sample invoked EXEC (TSO)

/* REXX - write member list of "libname" to "dsname" */
PARSE arg libname dsname
ADDRESS ISPEXEC
"LMINIT DATAID(div) DATASET("libname")"
IF RC = 0
  THEN DO;
    "LMOPEN DATAID("div") OPTION(INPUT)"
    memlist = '';
    DO WHILE RC < 8;
      "LMMLIST DATAID("div") MEMBER(MNAME) STATS(NO)"
      memlist = memlist mname;
    END;
    v.1 = memlist;
    ADDRESS TSO;
    "alloc f(dd) da("dsname") shr reus"
    "execio * diskw dd (stem v."
  END;
  ELSE SAY "Open error: "libname;
SAY "EOP "RC; /* set command completion code */

Program code

The short session name is assumed to be 'A' (marked short
session name) - the appropriate literal must be altered if this is not
the case.

#define BLKSIZE 65335 /* maximum block size */

#define INCL_DOS
#define INCL_RXSHV /* SHVBLOCK definition */

#include <os2.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <e:\toolkt13\c\include\rexxsaa.h>

extern void far pascal HLLAPI(int far *,
                              char far *,
                              int far *,
                              int far *);

char logname[] = "tsoexec.log";
FILE *logfile;
unsigned short sel; /* selector */
unsigned long pbuf; /* pointer, converted selector */

int host_rc;
int prc; /* program return code */
int frc, crc; /* function, host command return code */

char buffer[512];

char datastring[4000]; /* EHLLAPI data string */
int func; /* EHLLAPI function number */
int datalen; /* data string length */

/* function prototypes */
void deinitialize(void);
void display_frc(int);
void send_enter(void);
void send_pfk(char *str);
int host(void);
int transfer_file(void);
int setresult(void);
int setvar(void);
void funct_end(void);

void move_rxstring(char *target, RXSTRING source, int len);

/* debugging functions */
void log_open(void);

SHVBLOCK shvblk;
PSHVBLOCK pshvblk = &shvblk;

char vn[256];
char vl[256];

char hostcmdname[256];
char hostdsname[256];
char pcname[L_tmpnam] = "";

FILE *fp;
fpos_t filesize = 0;

/* function prototype */
SHORT APIENTRY tsoexec(
  PSZ       function_name,
  SHORT     argc, /* argument count */
  RXSTRING  argv[], /* function arguments */
  PSZ       queue_name,
  PRXSTRING retval); /* return value */

SHORT APIENTRY tsoexec(
  PSZ       function_name,
  SHORT     argc, /* argument count */
  RXSTRING  argv[], /* function arguments */
  PSZ       queue_name,
  PRXSTRING retval) /* return value */
{
  /* mainline processing */
  int i;

  atexit(funct_end); /* function end processing */

  switch (argc) /* test number of invocation arguments */
  {
    case 2: /* hostdsname */
     move_rxstring(hostdsname,argv[1],sizeof(hostdsname));
    case 1: /* hostcmdname */
     move_rxstring(hostcmdname,argv[0],sizeof(hostcmdname));
     break;
    default: /* invalid number of arguments */
      log_open();
      fprintf(logfile,"parameter error\n");
      fprintf(logfile,"argc %d\n",argc);
      for (i = 0; i < argc; i++)
      {
        move_rxstring(buffer,argv[i],sizeof(buffer));
        fprintf(logfile,"argv%d %s\n",i,buffer);
      }
      exit(12); /* invalid number of invocation arguments */
  }

  /* get object data */
  host_rc = host(); /* process host procedure */
  deinitialize(); /* close host session */
  prc = 0;
  if (host_rc == 0)
  {
    retval -> strlength = 1;
    strcpy(retval -> strptr,""); /* null result */
    if (argc == 2) /* host file */
    {
      frc = transfer_file();
      if (frc == 0)
      {
        frc = setresult();
        display_frc(1);
        if (fp != 0)
          fclose(fp);
        if (frc != 0)
          prc = 8; /* setresult error - file too large */
        else
        {
          /* set function return value */
          retval -> strlength = filesize;
          retval -> strptr = (void *)pbuf;
        }
      }
    }
    /* set REXX <RC> variable */
    strcpy(vn,"RC");
    sprintf(vl,"%d",crc); /* format as character */
    frc = setvar(); /* set REXX shared variable */
  }
  else prc = 4; /* nok */
  funct_end(); /* function end processing */
  return prc; /* function end */
}

void deinitialize()
{
  send_enter();
  /* disconnect */
  func = 2;
  HLLAPI(&func,datastring,&datalen,&frc);
  display_frc(2);
}

int host() /* invoke host command */
{
  /* connect PS */
  func = 1;
  datastring[0]='A';
  datalen = 1;
  HLLAPI(&func,datastring,&datalen,&frc);
  display_frc(3);
  if (frc != 0) return -1;

  /* send clear string */
  memset(buffer,' ',80);
  strcat(buffer,"\0");
  send_pfk(buffer);
  send_enter();
  if (frc != 0) return -1;

  /* send command */
  strcpy(buffer,hostcmdname);
  strcat(buffer,"\0"); /* variable data */
  send_pfk(buffer);
  send_enter();
  if (frc != 0) return -1;

  /* search for sync-string */
  crc = -1; /* preinitialize, in case no EOP present */
  func = 6;
  strcpy(datastring,"EOP ");
  datalen = strlen(datastring);
  frc = 1; /* start position */
  HLLAPI(&func,datastring,&datalen,&frc);
  if (frc == 0)
  {
    /* get string */
    /* datalen = position */
    func = 8;
    frc = datalen;
    datalen = sizeof(datastring);
    HLLAPI(&func,datastring,&datalen,&frc);
    if (frc == 0)
      sscanf(datastring,"EOP %d ",&crc); /* convert completion code */
  }
  return 0;
}

int transfer_file() /* transfer file from host */
{
  if (tmpnam(pcname) == NULL) /* allocate temporary pcfile */
    return -1; /* allocation error */
  /* set session parameters, timeout after 30 seconds  */
  func = 9;
  strcpy(datastring,"QUIET,TIMEOUT=1");
  datalen = strlen(datastring);
  HLLAPI(&func,datastring,&datalen,&frc);
  display_frc(4);

  /* transfer result file */
  func = 91;
  strcpy(datastring,pcname);
  strcat(datastring," ");
  strcat(datastring,hostdsname);
  strcat(datastring," ASCII ");
  datalen = strlen(datastring);
  frc = 0; /* drive identifier */
  HLLAPI(&func,datastring,&datalen,&frc);
  if (frc == 3) return 0; /* ok */
  display_frc(5);
  return -2;
}

void display_frc(int n) /* parameter is trace point */
{
  if (frc == 0) return; /* ok */
  log_open();
  fprintf(logfile,"trace func frc %d %d %d\n",n, func, frc);
}

void send_enter()
{
  send_pfk("@E");
}

void send_pfk(char *str) /* send enter (PFK) */
{
  func = 3;
  strcpy(datastring,str);
  datalen = strlen(datastring);
  HLLAPI(&func,datastring,&datalen,&frc);
  display_frc(6);

  /* wait */
  func = 4;
  HLLAPI(&func,datastring,&datalen,&frc);
  display_frc(7);
}

void log_open() /* open log file */
{
  if (logfile == NULL)
    logfile = fopen(logname,"w");
}

void funct_end() /* function end processing */
{
  if (pcname != "") /* delete temporary file */
  {
    frc = remove(pcname);
    display_frc(8);
  }
  if (logfile == NULL) return;
  fclose(logfile);
}

int setresult() /* set contents of intermediate file into string variable */
{
  int rc;
  fp = fopen(pcname,"rb");
  if (fp == NULL)
    return -1;
  rc = fseek(fp,0,SEEK_END); /* position at end-of-file */

  if (rc != 0)
    return -2;
  rc = fgetpos(fp,&filesize); /* get file size */
  if (rc != 0)
    return -3;
  /* allocate file buffer */
  if (filesize == 0)
    return -4; /* file empty */
  if (filesize > BLKSIZE)
    return -5;
  rc = DosAllocSeg((USHORT)filesize,&sel,0);
  if (rc != 0)
    return -5;
  pbuf = (unsigned long)sel<<16; /* convert selector to true address */
  /* read file */
  rewind(fp); /* position at start of file */
  rc = fread((void *)pbuf,(int)filesize,1,fp);
  if (rc != 1)
    return -6;
  return 0;
}

void move_rxstring(char *target, RXSTRING source, int len)
/* move RXSTRING to string variable, bounded by <target> length */
{
  int n;
  memset(target,0x00,len); /* clear target */
  n = ((len-1) > source.strlength-1) ? source.strlength : len-1;
  memcpy(target,source.strptr,n);
}

int setvar() /* set REXX variable, <VN> = name, <VL> = data */
{
  shvblk.shvnext = NULL;
  shvblk.shvcode = RXSHV_SET;
  shvblk.shvnamelen = (long) strlen(vn);
  shvblk.shvvaluelen = (long) strlen(vl);
  shvblk.shvname.strptr = vn;
  shvblk.shvname.strlength = (long) strlen(vn);
  shvblk.shvvalue.strptr = vl;
  shvblk.shvvalue.strlength = (long) strlen(vl);
  return RxVar(pshvblk);

Program creation

The following sample compilation and link statements apply to
MS-C 6.0:

cl /Alfu /G2 /c /Fotsoexec.obj tsoexec.c
link tsoexec.obj,userdll\urx.dll,,os2+rexx+llibcdll,tsoexec.def

Compilation

Certain compilation options are mandatory for REXX functions.

/Alfu      Large memory model, user caller's stack segment, set up
own data segment, be entered by a far call, Pascal calling
conventions.

/G2      286 instruction set

/c      The cl command is only to perform a compilation (the link is
performed separately to avoid over-complicating the parameters).

Link

'userdll\urx.dll' is the name of the directory and DLL module and
'os2+rexx+llibcdll' are the names of the libraries containing the
required standard functions.

The names above may be changed to suit the user's requirements.

To link a DLL, a definition file (here tsoexec.def) is required. The
definition file specifies information pertaining to the DLL entry,
for example:

LIBRARY URX INITINSTANCE
DESCRIPTION 'TSOEXEC function'
STUB 'OS2STUB.EXE'
STACKSIZE 20000
PROTMODE
CODE MOVEABLE
DATA MOVEABLE MULTIPLE
IMPORTS
   ACS3EHAP.HLLAPI
EXPORTS TSOEXEC

Path information must be specified for the STUB entry. The
IMPORTS entry specifies that the HLLAPI function in the
ACS3EHAP module is accessed as DLL. Similarly, TSOEXEC
is to be made available as a DLL function.

Execution

The chosen directory name (here userdll) must be specified in the
LIBPATH entry of the CONFIG.SYS file. Similarly, the DLL-
name (here urx) is the library name used in the function
registration.

Anthony Rudd
Technical Consultant (Germany)                                                c A S Rudd 1994

