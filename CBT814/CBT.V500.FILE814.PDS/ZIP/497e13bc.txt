Dumping all REXX variables under TSO

I have frequently found the need to dump out various REXX
variables when debugging a REXX EXEC. The typical way is to
issue a SAY statement displaying the variable. This gets tiresome
when you have a lot of variables or when variable names are
different in each EXEC. To fix this, I wrote a small program which
will dump out each defined REXX variable when it is called from
a REXX environment. The program calls the IREXCOM service
to return each variable and its value, and issues a TPUT macro to
put out the variable name and value. To make the output readable,
I have restricted both the length of the variable name and its value
to a maximum of 38 bytes so the output will fit on a single 80-
byte terminal line display. To handle the situation where a variable
and/or its value is greater than 38 bytes, the program will end the
variable and/or its value with 3 periods (...) to indicate that some
truncation occurred. To find the full values in these instances, the
user must resort to the SAY statement, or the program can be
modified to display longer values. For quick debugging, however,
the REXXDUMP function is extremely easy and informative with
an absolute minimum of work involved to use it.

The sample EXEC below shows the use of the REXXDUMP user
function. This sample EXEC also sets up various REXX
SIGNAL conditions to further aid debugging. I use this skeleton
(the SIGNAL statements and the labels they branch to) in all my
EXECs to display various error-related information.

Following the EXEC is some sample output. It is interesting to
note, when calling the IREXCOM service, that the variables
returned are not necessarily in the same order in which they were
defined. This is in evidence on the PARSE VERSION statement:
when the variables are displayed, they are not in the order in
which they occur in the statement. I have no explanation for this
and have even found that, when running the same EXEC multiple
times, REXXDUMP may show the variables in a different order
each time (so don't be surprised or think it is a bug with the
REXXDUMP code).

Sample REXX Exec For Debugging

/* REXX */
signal on failure  name general
signal on error    name general
signal on halt     name general
signal on novalue  name general
signal on syntax   name general
parse version w.1 w.2 w.3 w.4 w.5
x='abcdefghijklmnopqrstuvwxyz0123456789]@#$%^&*()_+abcdefghijklmnopq'
y='abcdefghijklmnopqrstuvwxyz012345678989'
xabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz12='1'
eabcdefghijklmnopqrstuvwxyz01234567890='x'
yabcdefghijklmnopqrstuvwxyz01234567890='1'
qabcdefghijklmnopqrstuvwxyz012345678989012=1234567890123456789012345||,
678901234567890123456789
rabcdefghijklmnopqrstuvwxyz01234567890=1234567890123456789012345]],
678901234567890123456789
say 'parse version(w1-5)  =' w.1 w.2 w.3 w.4 w.5
parse source w.6
say 'parse source(w.6)     =' w.6
say '*** *** *** *** *** Rexxdump output *** *** *** *** ***'
"REXXDUMP"
exit
GENERAL:
 SAY "msg0 trapped condition="CONDITION("C")
 if condition("C") = "FAILURE" | ,
    condition("C") = "SYNTAX"  | ,
    condition("C") = "ERROR" then ,
 do
    SAY "msg1 RC="RC
    SAY "msg2 CMD FAILED-CODE="D2X(ABS(RC))
    SAY "msg3 ERROR MSG FROM REXX IS "ERRORTEXT(abs(RC))
    IF RC = -3 THEN SAY "msg3 CMD NOT FOUND"
 end
 SAY "msg4 ERROR ON LINE "SIGL
 SAY "msg5 LINE W/ERROR="SOURCELINE(SIGL)
 SAY "msg6 condition desc="CONDITION("D")
 SAY "msg6 instruction causing condition="CONDITION("I")
 SAY "msg6 condition trap status="CONDITION("S")
exit

Sample Output From Above Exec

parse version(w.1-w.5)  = REXX370 3.46 31 May 1988
parse source(w.6)     = TSO COMMAND Z2 SYSEXEC ? ? TSO ISPF ?
*** *** *** *** *** Rexxdump output *** *** *** *** ***
Y = abcdefghijklmnopqrstuvwxyz012345678989
X = abcdefghijklmnopqrstuvwxyz012345678...
RABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 = 12345678901234567890123456789012345...
EABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 = x
QABCDEFGHIJKLMNOPQRSTUVWXYZ01234567... = 12345678901234567890123456789012345...
XABCDEFGHIJKLMNOPQRSTUVWXYZ01234567... = 1
YABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 = 1
W.1 = REXX370
W.3 = 31
W.2 = 3.46
W.6 = TSO COMMAND Z2 SYSEXEC ? ? TSO ISPF ?
W.5 = 1988
W.4 = May

REXXDUMP SOURCE CODE

         TITLE 'REXXDUMP - DUMP ALL REXX VARIABLES'
REXXDUMP CSECT
         YREGS
         SAVE  (14,12),,REXXDUMP-&SYSDATE
         LR    R12,R15
         USING REXXDUMP,R12
         LA    R15,SAVE
         ST    R13,SAVE+4
         ST    R15,8(,R13)
         LR    R13,R15
         ST    R0,EVBLOCK
         LA    R6,SHRBUF
         USING SHVBLOCK,R6
BEGIN    MVI   SHVCODE,SHVNEXTV        WANT A FETCH-NEXT
         LA    R1,VARNAME              LOAD A(VARIABLE NAME)
         ST    R1,SHVNAMA              SAVE A(VARIABLE NAME)
         MVC   VARNAME,BLANKS          CLEAR NAME FIELD
         MVC   OUTBUF,BLANKS           CLEAR OUTPUT BUFFER
         MVC   VARVAL,BLANKS           CLEAR VALUE FIELD
         XC    SWITCH,SWITCH           CLEAR SWITCH
         LA    R1,NAMELEN              LOAD LENGTH(VARIABLE NAME)
         ST    R1,SHVUSER              SAVE LENGTH(VARIABLE NAME)
         LA    R1,VARVAL               LOAD VALUE(VARIABLE NAME)
         ST    R1,SHVVALA              SAVE VALUE(VARIABLE NAME)
         LA    R1,VALLEN               LOAD LENGTH(VARIABLE VALUE)
         ST    R1,SHVBUFL              SAVE LENGTH(VARIABLE VALUE)
         LA    R1,EXCOMPL              LOAD A(PLIST)
         L     R0,EVBLOCK              LOAD A(EVALBLOCK)
         LINK  EP=IRXEXCOM             LINK TO IRXEXCOM
         LTR   R15,R15                 CHECK RETURN CODE
         BM    EXIT                    EXIT IF < 0
         CLI   SHVRET,SHVLVAR          END OF THE LINE
         BE    EXIT2                   YES,  OUT OF HERE
         CLI   SHVRET,SHVBADF          INVALID FUNCTION CODE
         BE    NOTREXX                 YES, NOT IN REXX
         L     R9,SHVNAML              GET LENGTH OF NAME
         C     R9,=A(NAMELEN)          IS IT TOO LONG
         BNH   NAMEOK                  NO, CONTINUE
         LA    R9,NAMELEN              TRUNCATE IT
         OI    SWITCH,NAMTRUNC         TURN ON SWITCH
NAMEOK   BCTR  R9,0                    MINUS ONE FOR EXECUTE
         EX    R9,MVCNAME              MOVE TO OUTBUF
         LA    R9,1(R9)                RESTORE LENGTH
         TM    SWITCH,NAMTRUNC         WAS NAME TOO LONG
         BZ    NAMEOK2                 NO, SKIP TRUNCATE TRAILER
         MVC   OUTBUF+35(3),TRAILER    ELSE, PUT OUT TRUNCATE FLAG
NAMEOK2  LA    R8,OUTBUF(R9)           POINT PAST NAME
         MVC   0(L'EQSIGN,R8),EQSIGN   PUT IN EQUAL SIGN
         LA    R9,L'EQSIGN(R9)         ACCOUNT FOR EQUAL SIGN IN LENGTH
         LA    R8,L'EQSIGN(R8)         POINT PAST EQUAL SIGN
         L     R7,SHVVALL              PICK UP VALUE LENGTH
         C     R7,=A(VALLEN)           IS IT TOO LONG
         BNH   VALOK                   NO, CONTINUE
         LA    R7,VALLEN-3             TRUNCATE IT
         OI    SWITCH,VALTRUNC         TURN ON SWITCH
VALOK    AR    R9,R7                   ADD TO TOTAL LENGTH
         BCTR  R7,0                    BUMP FOR EXECUTE
         LTR   R7,R7                   IS IT AN EMPTY VARIABLE
         BM    VALEND                  YES, SKIP MOVE
         EX    R7,MVCVAL               MOVE VALUE TO OUTBUF
         TM    SWITCH,VALTRUNC         WAS VALUE TOO LONG
         BZ    VALEND                  NO, SKIP
         MVC   35(3,R8),TRAILER        ELSE, PUT OUT TRUNCATE FLAG
VALEND   TPUT  OUTBUF,L'OUTBUF         DUMP VARIABLE/VALUE
         B     BEGIN                   START OVER AGAIN
NOTREXX  LR    R2,R15                  SAVE ERROR CODE
         TPUT  MSG1,L'MSG1             GIVE A MESSAGES
         LR    R15,R2                  RESTORE ERROR CODE FOR EXIT
         B     EXIT
EXIT2    SR    R15,R15
EXIT     L     R13,SAVE+4              RESTORE REGS
         RETURN (14,12),RC=(15)
MVCNAME  MVC   OUTBUF(0),VARNAME       EXECUTED INSTRUCTION
MVCVAL   MVC   0(0,R8),VARVAL          EXECUTED INSTRUCTION
         TITLE 'REXXDUMP - DATA SECTION'
SAVE     DC    18F'0'                  STANDARD SAVE AREA
EVBLOCK  DC    A(0)                    A(EVALBLOCK)
EXCOMID  DC    CL8'IRXEXCOM'
SHRBUF   DC    XL32'0'                 SHARED VARIABLE PLIST AREA
MSG1     DC    C'REXXDUMP MUST BE CALLED FROM A REXX PROGRAM'
BLANKS   DC    CL80' '
VARNAME  DC    CL38' '                 REXX VARIABLE NAME GOES HERE
NAMELEN  EQU   *-VARNAME               LENGTH OF VARIABLE NAME
VARVAL   DC    CL38' '                 VARIABLE VALUE GOES HERE
VALLEN   EQU   *-VARVAL                LENGTH OF VARIABLE VALUE
OUTBUF   DC    CL80' '                 OUTPUT LINE
EQSIGN   DC    C' = '                  EQUAL SIGN
TRAILER  DC    C'...'                  TRUNCATION TRAILER
SWITCH   DC    X'00'                   SWITCHES
NAMTRUNC EQU   X'80'                   NAME TRUNCATION
VALTRUNC EQU   X'40'                   LENGTH TRUNCATION
EXCOMPL  DC    A(EXCOMID)              A(EYECATCHER)-PARM 1--------|
         DC    A(0)                    PARM2                       |
         DC    A(0)                    PARM3                       |
         DC    A(SHRBUF+X'80000000')   A(SHVBLOCK)-PARM 4----------|
         IRXSHVB
         IRXEXTE
         IRXENVB
         END


                                                                                                                c Xephon 1994

