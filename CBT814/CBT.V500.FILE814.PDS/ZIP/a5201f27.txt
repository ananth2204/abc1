Customizing your TSO/E and ISPF environment

      TSO command_name

      CONCAT  ddname  dataset_name  BEFORE|AFTER [COND]

      CONCAT  SYSPROC 'userid.CLIST' AFTER COND

      CONCAT  ISPTLIB 'userid.ISPF.PROFILE' BEFORE

The source code for CONCAT

/*   CLIST      CONCAT                                       */
/*   DESC       General purpose concatenation CLIST          */
     PROC 2 DDNAME DSN BEFORE AFTER COND DEBUG
/*   Set up debugging options                                */
     CONTROL NOFLUSH NOLIST NOMSG
     IF &DEBUG = DEBUG THEN CONTROL LIST MSG CONLIST SYMLIST
/*   Validate options one of BEFORE or AFTER specified       */
     IF &BEFORE = &STR( ) AND &AFTER = &STR( ) THEN GOTO HELP
     IF &DDNAME = STEPLIB THEN DO
           WRITE DDNAME STEPLIB IS NOT ALLOWED, CONCAT NOT DONE
           EXIT CODE(4)
           END
     IF &DDNAME = STEPCAT THEN DO
           WRITE DDNAME STEPCAT IS NOT ALLOWED, CONCAT NOT DONE
           EXIT CODE(4)
           END
/*   If conditional concat not reqd then skip, else          */
/*         If dsn not in quotes prefix TSO PROFILE PREFIX    */
/*         If dsn in quotes then strip quotes                */
     IF &COND NE COND THEN GOTO SKIP
/*   If dsn in quotes, strip quotes                          */
     IF &SUBSTR(1,&STR(&DSN)) = &STR(') THEN DO
           SET &L = &LENGTH(&STR(&DSN))
           SET &TESTDSN = &SUBSTR(2:&L-1,&STR(&DSN))
           GOTO SKIP
           END
/*   DSN not in quotes. Check PROFILE PREFIX                 */
     IF &SYSPREF = &STR( ) THEN DO
           SET &TESTDSN = &STR(&DSN)
           GOTO SKIP
           END
/*   PROFILE PREFIX set so concat inforn of DSN              */
     SET &TESTDSN = &STR(&SYSPREF..&DSN)
/*   Get current allocations and search for DDNAME           */
SKIP: +
     SET &SYSOUTTRAP = 9999
     LISTALC STATUS
     SET &SYSOUTTRAP = 0
     SET &L = 1
     SET &LINES = &SYSOUTLINE
     DO WHILE &L <= &LINES
           SET &LINE = &&SYSOUTLINE&L
           IF &SUBSTR(1,&LINE) EQ &STR( ) THEN DO            /* one space */
                 SET &DD = &SUBSTR(3:10,&LINE          )     /* 10 spaces */
                 SET &DD = &DD
                 IF &DD = &DDNAME THEN GOTO EXISTS
                 END
           SET &L = &L + 1
           END
     WRITE DD &DDNAME NOT ALLOCATED, ALLOCATING &DSN TO &DDNAME
     ALLOCATE F(&DDNAME) DSN(&DSN) SHR
     SET &RC = &LASTCC
     IF &RC NE 0 THEN DO
           WRITE ALLOCATION FOR &DSN FAILED, RC=&RC
           EXIT CODE(4)
           END
     EXIT CODE(0)
/*   Extract datasets currently allocated to DDNAME    */
EXISTS: +
     SET &I = 0
DDLOOP: +
     SET &L = &L - 1                                /* previous line      */
     SET &I = &I + 1                                /* next index         */
     SET &SAVEDSN&I = &&SYSOUTLINE &L               /* save DSN           */
     SET &L = &L + 3                                /* next DD line       */
     IF &L GT &SYSOUTLINE THE GOTO ALLOC            /* if done, go alloc  */
     SET &LINE = &&SYSOUTLINE&L                     /* get DDLINE data    */
     SET &LINEDD = &SUBSTR(3:10,&LINE          )    /* 10 spaces *        */
     SET &LINEDD = &LINEDD                          /* extract any DD     */
     IF &LINEDD = &STR( ) THEN GOTO DDLOOP          /* If one space       */
/*   Build dataset list from saved current allocations    */
ALLOC: +
     SET &II = 1
     DO WHILE &II LE &I
           SET &DSNAME = &&SAVEDSN&II
           IF &COND = &STR(COND) THEN DO
                 IF &STR(&DSNAME_ = &STR(&TESTDSN) THEN DO
                      EXIT CODE(0)     /* Quit if Already Allocated */
                      END
                 END
           SET &DSNAME = &STR('&DSNAME')
           SET &DSLIST = &STR(&DSLIST   &DSNAME)
           SET &II = &II + 1
           END
     IF &BEFORE = &STR(BEFORE) THEN DO
           FREE F(&DDNAME)
           ALLOC F(&DDNAME) DA(&DSN &DSLIST) SHR
           SET &RC = &LASTCC
           IF &RC NE 0 THEN DO
                 WRITE ALLOCATION FAILED
                 WRITE RESTORING OLD ALLOCATION
                 ALLOC F(&DDNAME) DA(&DSLIST) SHR REUSE
                 EXIT CODE(4)
                 END
           EXIT CODE(0)
           END
     IF &AFTER = &STR(AFTER) THEN DO
           FREE F(&DDNAME)
           ALLOC F(&DDNAME) DA(&DSLIST &DSN) SHR
           SET &RC = &LASTCC
           IF &RC NE 0 THEN DO
                 WRITE ALLOCATION FAILED
                 WRITE RESTORING OLD ALLOCATION
                 ALLOC F(&DDNAME) DA(&DSLIST) SHR REUSE
                 EXIT CODE(4)
                 END
           EXIT CODE(0)
           END
HELP: +
     WRITE FORMAT OF COMMAND IS :
     WRITE
     WRITE CONCAT DDNAME DSN BEFORE | AFTER COND
     WRITE
     WRITE DDNAME  IS THE DDNAME TO CONCATENATE DSN TO. IF NOT
     WRITE ALREADY ALLOCATED THEN IT WILL BE ALLOCATED
     WRITE
     WRITE DSN IS THE DATASET NAMTE TO CONCATENATE/ALLOCATE TO
     WRITE DDNAME
     WRITE
     WRITE BEFORE SPECIFIES THAT THE DATASET SHOULD BE CONCATENATED
     WRITE INFRONT OF ANY EXISTING DATASETS ALLOCATED TO THE DDNAME
     WRITE
     WRITE AFTER SPECIFIES THAT THE DATASET SHOULD BE CONCATENATED
     WRITE AFTER OF ANY EXISTING DATASETS ALLOCATED TO THE DDNAME
     WRITE
     WRITE COND SPECIFIES THAT THE DSN WILL NOT BE CONCATENATED
     WRITE IF ALREADY ALLOCATED TO THE DDNAME.
     WRITE
     EXIT CODE(4)

      TSO  ECNTL

      TSO ECNTL member name

      TSO ECNTL generic member name

The source code for ECNTL

/* REXX */
/*    REXX       : ECNTL                                          */
/*    DESC       : EDIT JCL LIBRARY, WITH OR WITHOUT MBR NAME     */
ARG MBR
"ISPEXEC CONTROL ERRORS RETURN "
IF MRB = '' THEN
      "ISPEXEC EDIT DATASET('&SYSUID..JCL.CNTL')"
ELSE
      "ISPEXEC EDIT DATASET('&SYSUID..JCL.CNTL("MBR")'"
IF RC > 4 THEN
      SAY "BAD RETURN CODE FROM EDIT"

The source code for BCNTL

/* REXX */
/*    REXX       : BCNTL                                          */
/*    DESC       : BROWSE JCL LIBRARY, WITH OR WITHOUT MBR NAME   */
ARG MBR
"ISPEXEC CONTROL ERRORS RETURN "
IF MRB = '' THEN
      "ISPEXEC BROWSE DATASET('&SYSUID..JJCL.CNTL')"
ELSE
      "ISPEXEC BROWSE DATASET('&SYSUID..JCL.CNTL("MBR")'"
IF RC > 4 THEN
      SAY "BAD RETURN CODE FROM BROWSE"

      TSO  JOB  COMPILE

The source code for JOB

/*    CLIST       : JOB                                  */
/*    DESC        : SUBMIT MBR FROM JCL LIBRARY          */
      PROC 0 MBR DEBUG
      CONTROL MSG NOLIST
      IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST
      SUBMIT '&SYSUID..JCL.CNTL(&MBR)'
      EXIT CODE(0)

      LISTALC STATUS

SYS1.CMDPROC
 SYSPROC   KEEP  KEEP
USER.CMDPROC
           KEEP  KEEP
SYS1.V2R3M0.ISPPLIB
 ISPPLIB   KEEP KEEP
USER.ISPPLIB
           KEEP  KEEP
SYS009.ISPF.PROFILE
 ISPPROF   KEEP KEEP

      CONCAT  ISPTLIB  'SYS009.ISPF.PROFILE'  BEFORE

/*    CLIST       : CMDS                                      */
/*    DESC        : UPDATE ISPF COMMAND TABLE                 */
      PROC 0 DEBUG
      CONTROL NOMSG NOLIST
      IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST
/*    RENAME CMDS TABLE AND INVOKE DIALOGE.                   */
/*    ON RETURN RENAME BACK TO PROPER NAME                    */
      RENAME 'ISPF profile dataset(ISPCMDS)' +
              'ISPF profile dataset(XXXCMDS)'
      ISPEXEC SELECT PGM(ISPUCM) PARM(XXX)
      RENAME 'ISPF profile dataset(XXXCMDS)' +
              'ISPF profile dataset(ISPCMDS)'
/*    MSG TO TELL USER TO RESTART ISPF                        */
      WRITE QUIT ISPF AND RESTART TO ACTIVATE TABLE CHANGES
      EXIT CODE(0)

/*    CLIST       : CMDS                                      */
/*    DESC        : UPDATE ISPF COMMAND TABLE                 */
      PROC 0 DEBUG
      CONTROL NOMSG NOLIST
      IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST
/*    FREE The CURRENT ALLOCATION.                            */
/*    ALLOCATED TO YOUR profile DATASET                       */
      FREE F(ISPTABL)
      ALLOC F(ISPTABL) DA(ISPF profile dataset) SHR
/*    RENAME CMDS TABLE AND INVOKE DIALOGE.                   */
/*    ON RETURN RENAME BACK TO PROPER NAME                    */
      RENAME 'ISPF profile dataset(ISPCMDS)' +
              'ISPF profile dataset(XXXCMDS)'
      ISPEXEC SELECT PGM(ISPUCM) PARM(XXX)
      RENAME 'ISPF profile dataset(XXXCMDS)' +
              'ISPF profile dataset(ISPCMDS)'
/*    REALLOCATED TO YOUR ORIGINAL ISPF profile dataset.      */
      FREE F(ISPTABLE)
      ALLOC F(ISPTABLE) DA(your normal allocation) SHR
/*    MSG TO TELL USER TO RESTART ISPF                        */
      WRITE QUIT ISPF AND RESTART TO ACTIVATE TABLE CHANGES
      EXIT CODE(0)

TSO   0    SELECT CMD(&ZPARM)
                  INVOKE A TSO COMMAND

      ISPEXEC SELECT CMD(%ECOBOL &ZPARM)

      PANELID ON

PDF   0     SELECT PANEL(ISR@PRIM) NEWAPPL(ISP)
                   NESTED ISPF SESSION

/* REXX */
ARG WHAT
INTERPRET SAY WHAT

SAY   0     SELECT CMD(%SAY &ZPARM)
                   SAY WHATEVER IS ENTERED

The source code for TSOR

/* REXX */
/*    EXEC  : TSOR                                           */
/*    Desc  : Issue TSO commands and display the output on   */
/*            a browsable screen.                            */
ARG CMD
/* Tell ISPF to ignore any errors and give me control back   */
"ISPEXEC CONTROL ERRORS RETURN"
/* See notes in text re this LIBDEF statements               */
"ISPEXEC LIBDEF ISPPLIB DATASET ID(dataset name)"
/* Clean up any previous table and create new temp table     */
"ISPEXEC TBCLOSE "TSOOUT"
"ISPEXEC TBCREATE TSOOUT NAMES(DATALN) NOWRITE"
ISPRC = RC
IF ISPRC <> 0 THEN DO
     MSG = "TBCREATE gave return code " isprc
     SIGNAL ERRMSG
     END
/* if no initial command, set prompt, else go do it now      */
IF CMD = '' THEN DO
      ZEDSMSG = "Enter a TSO COMMAND"
      ZEDLMSG = "Enter a command in the COMMAND ===> area"
      "ISPEXEC VPUT (ZEDSMSG,ZEDLMSG) SHARED"
      "ISPEXEC SETMSG MSG(ISRZ000)"
      END
ELSE DO
      CMDI = CMD
      SIGNAL DOCMD
      END
PANEL:
/* Display any data in the output table                      */
"ISPEXEC TBSKIP TSOOUT ROW(1)"
"ISPEXEC TBDISPL TSOOUT PANEL(@TSOR)"
ISPRC = RC
/* if an error, clean up and end                             */
IF ISPRC > 8 THEN DO
     MSG = "TBDISPL gave return code " ISPRC
     SIGNAL ERRMSG
     END
/* if user wants to end (PF3/15) then do so                  */
IF ISPRC > 1 THEN DO
     "ISPEXEC TBCLOSE TSOOUT"
     "ISPEXEC LIBDEF ISPPLIB"
     RETURN 0
     END
/* get any input command. if none then just repeat last output  */
"ISPEXEC VGET CMDI SHARED"
IF CMDI = '' THEN SIGNAL PANEL
/* Delete old output table, and create a new one             */
"ISPEXEC TBCLOSE "TSOOUT"
"ISPEXEC TBCREATE TSOOUT NAMES(DATALN) NOWRITE"
ISPRC = RC
IF ISPRC <> 0 THEN DO
     MSG = "TBCREATE gave return code " isprc
     SIGNAL ERRMSG
     END
DOCMD:
/* Save command and clear screen command input area          */
CMDX = CMDI
CMDI = ''
"ISPEXEC VPUT CMDI SHARED"
/* Display the command as entered in top two lines of output */
DATALN = CMDX
"ISPEXEC VPUT DATALN SHARED"
"ISPEXEC TBADD TSOOUT"
DATALN = ' '
"ISPEXEC VPUT DATALN SHARED"
"ISPEXEC TBADD TSOOUT"
/* Turn on trap, execute the command then reset trap         */
STATUS = OUTTRAP(L,99999)
CMDX
CMDRC = RC
STATUS = OUTTRAP(OFF)
/* if bad command, then say so                               */
IF CMDRC = -3 THEN DO
     ZEDSMSG = "Invalid command"
     ZEDLMSG = "The command was not a valid tso command"
     "ISPEXEC VPUT (ZEDSMSG,ZEDLMSG) SHARED"
     SIGNAL PANEL
     END
/* If no output then say so                                  */
N = L0
IF N = 0 THEN DO
     ZEDSMSG = "No output"
     ZEDLMSG = "The command produced no trappable output"
     "ISPEXEC VPUT (ZEDSMSG,ZEDLMSG) SHARED"
     SIGNAL PANEL
     END
/* Get each line of output and write to output table         */
/* Lines longer than 79 chars are wrapped onto multiple lines */
DO I = 1 TO N
     A = L||I
     B = A
     INTERPRET "LINE = " B
     LL = LENGTH(LINE)
     IF LL > 79 THEN DO WHILE LL > 79
           DATALN = SUBSTR(LINE,1,79)
           "ISPEXEC VPUT DATALN SHARED"
           "ISPEXEC TBADD TSOOUT"
           LINE = SUBSTR(LINE,80)
           LL = LENGTH(LINE)
           END
     DATALN = LINE
     "ISPEXEC VPUT DATALN SHARED"
     "ISPEXEC TBADD TSOOUT"
     END
SIGNAL PANEL
ERRMSG:
/* Error message routine, display msg and clean up           */
SAY MSG
"ISPEXEC LIBDEF ISPPLIB"
"ISPEXEC TBCLOSE TSOOUT"
RETURN 4

The @TSOR panel

)ATTR
$ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF)
)BODY EXPAND(//)
%?-/ TSO COMMAND PROCESSOR /-/
%COMMAND ===>_CMDI                         %SCROLL ===>_ZAMT+

+/-/

)MODEL
$DATALN
)PROC
VPUT CMDI SHARED
)END

      TSO TSOR LISTCAT

TSOR   0     SELECT CMD(%TSOR &ZPARM) NEWAPPL(TSOR)
                    REPLACEMENT TSO COMMAND

Source code for VSLISTC

/*  CLIST   : VSLISTC                                          */
/*  DESC    : Issue LISTCAT against dataset in ISPF 3.4        */
/*            list and browse the output                       */
PROC 1 DSN DEBUG
CONTROL NOFLUSH NOMSG
IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST
/* Allocate output dataset                                     */
FREE F(LISTC)
DELETE '&SYSUID..VSLISTC'
ALLOC F(LISTC) DA('&SYSUID..VSLISTC') NEW CATALOG +
      SPACE(1 1) CYLINDERS UNIT(SYSDA)            +
      BLKSIZE(135) RECFM(V B)
/* Build title line from dataset name and write to             */
/* output file, then realloc as DISP=MOD so we LISTCAT         */
/* output does not overwrite it                                */
OPENFILE VSLISTC OUTPUT
SET &VSLISTC = &STR( )
PUTFILE VSLISTC
SET &L = &LENGTH(&STR(&DSN))
SET &TITLE = &SUBSTR(2:&l-1,&STR(&DSN))
SET &VSLISTC = &STR( VSLISTC : &TITLE)
PUTFILE VSLISTC
SET &VSLISTC = &STR( )
PUTFILE VSLISTC
CLOSFILE VSLISTC
FREE F(VSLISTC)
ALLOC F(VSLISTC) DA('&SYSUID..VSLISTC') MOD KEEP
/* LISTCAT dataset. Send output to file                        */
LISTCAT ENTRIES(&DSN) ALL OUTFILE(VSLISTC)
/* Browse the output file using ISPF browse                    */
ISPEXEC BROWSE DATASET('&SYSUID..VSLISTC')
/* Clean up and end                                            */
FREE F(VSLISTC)
DELETE '&SYSUID..VSLISTC')
EXIT CODE(0)


David E Ellis (UK)                                                              c Xephon 1995

