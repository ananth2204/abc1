Controlling batch CPU usage

At first glance, the title of this article might seem superfluous
for an MVS system.  After all, one of the fundamental features
of the operating system is its ability to pick on selected victims
to protect the resources everyone has to use.

In our shop, we have the usual preferred interactive tasks and a
fairly heavy batch mix consisting of development work and
user SAS reporting jobs.  We have also reached the point
where our CPU is being heavily loaded and the turn-around
times for all tasks in the system are lengthening.

The approach my management has taken to this problem is to
place the SAS reporting work at the bottom of the priority
chain.  Since asking the end users to place a 'PERFORM=n'
keyword on their job card in order to slow their work down is
unrealistic, we have developed a monitor, CPUSCAN, which
examines the state of the system periodically.  If the CPU busy
rate is above a certain threshold, CPUSCAN resets selected
batch jobs into our system's cold batch performance group.
This keeps our development work moving along at the usual
speed and protects the CPU from becoming saturated in
general.  Since this is contrary to the normal management of a
batch system after prime shift, we stop the monitor in the
evening.

In order to use this monitor, you must set three parameters at
the start of the source code: CPULIMIT, WAITTIME, and
COLDBTCH.  CPULIMIT is the threshold at which jobs will
start getting reset.  WAITTIME is the interval (in seconds)
between checks of the CPU busy rate.  COLDBTCH is the
number of the cold batch performance group for your system.
This must be between 0 and 9, otherwise you will have to
change some of the code to accommodate a two-digit number.

You must also specify the jobs you want reset at the end of the
source code.  They can be generic names or generic letters
imbedded within the name at particular positions.  In the case
of user jobs at my site, they are all in the form '...U....'.

The effect of being reset will not show in a job's job log.  A
short message will show up on your system's console,
however.

Use of this program has allowed us to maintain interactive
service levels and to bias the remaining service preferentially
towards development batch work, without any JCL changes.

An additional feature of this program is that it illustrates the
use of the EXTRACT and QEDIT macros needed to allow for
operator communication with a problem program (via the
MODIFY and STOP commands).  The MGCR macro is also
used to issue system commands - this macro must be issued in
supervisor state, key zero.

Bibliography

o      MVS/XA SPL: System Macros and Facilities, Volumes 1
      and 2 describe the EXTRACT, QEDIT, and MGCR macros.

o      MVS/XA Debugging Handbook, Volumes 1 to 6 describe
      the data areas used to find the CPU busy rate.


JCL TO ASSEMBLE AND LINK CPUSCAN

//JOBCARD JOB ...
//*
//*  CPUSCAN REQUIRES ASSEMBLER H
//*
//ASM EXEC PGM=IEV90,COND=(0,LT),PARM='LIST,OBJECT,NODECK,XREF,LOAD'
//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//       DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN DD DSN=YOUR.SOURCE.LIBRARY(CPUSCAN),DISP=SHR
//SYSLIN DD DSN=&&OBJ,DISP=(,PASS),UNIT=SYSDA,
// DCB=(RECFM=FB,BLKSIZE=960,LRECL=80),SPACE=(CYL,(1,1))
//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT2 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(5,5))
//SYSUDUMP DD SYSOUT=*
//*
//*  SYSLMOD MUST BE AN APF-AUTHORIZED LIBRARY
//*
//LINK EXEC PGM=IEWL,COND=(0,LT),PARM='XREF,LET,AMODE(31),AC(1)'
//SYSPRINT DD SYSOUT=*
//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSLMOD DD DISP=SHR,DSN=YOUR.APF.LIBRARY
//SYSLIN DD DSN=&&OBJ,DISP=(OLD,DELETE)
//       DD *
 NAME  CPUSCAN(R)
/*
//


EXECUTION JCL

The following JCL, placed into one of your JES2 PROCLIBs,
will allow you to execute CPUSCAN using the command 'S
CPUSCAN' (you may also have to set up security for the
PROC).  Use the command 'P CPUSCAN' to stop it at any
time.

//CPUSCAN   PROC
//SCAN      EXEC PGM=CPUSCAN,COND=(0,LT)
//STEPLIB   DD   DSN=YOUR.APF.LIBRARY,DISP=SHR
//SYSPRINT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*


SOURCE CODE FOR CPUSCAN

*  CPUSCAN: THIS PROGRAM WILL PERIODICALLY AWAKEN TO CHECK THE CPU
*           BUSY RATE.  IF IT IS ABOVE THE CPULIMIT THRESHOLD
*           (SPECIFIED AT ASSEMBLY TIME) THEN ALL JOBS SPECIFIED
*           WILL BE RESET TO THE COLD BATCH PERFORMANCE GROUP
*           (ALSO SPECIFIED AT ASSEMBLY TIME).
*  THIS PROGRAM MUST BE LINKED "AC=1" AND MUST RUN OUT OF AN AUTHORIZED
*  LIBRARY.  USE AT YOUR OWN RISK!  NO WARRANTY IS PROVIDED WITH THIS
*  CODE, AND THE AUTHOR AND THE UNIVERSITY OF VIRGINIA SHALL NOT BE
*  HELD LIABLE FOR ITS USE (OR MISUSE) IN ANY ENVIRONMENT.
*  SET THE FOLLOWING THREE VARIABLES AS APPROPRIATE FOR YOUR
*  ENVIRONMENT:
CPULIMIT EQU   85  <<=== SET THIS TO THE % BUSY RATE AT WHICH SELECTED
*                        JOBS WILL START GETTING RESET TO COLD BATCH
COLDBTCH EQU   4   <<=== SET THIS TO THE COLD BATCH PERFORMANCE GROUP
*                        FOR YOUR SYSTEM (MUST BE BETWEEN 0 AND 9)
WAITTIME EQU   5   <<=== SET THIS TO THE NUMBER OF SECONDS YOU WANT TO
*                        SLEEP BETWEEN CHECKS ON THE CPU BUSY RATE
*  THEN GO TO THE END OF THIS CODE AND SPECIFY THE JOBS WHICH ARE
*  TO BE RESET WHEN THE CPU GETS ABOVE THE THRESHOLD.
CPUSCAN  CSECT
         STM   R14,R12,12(R13)        SAVE REGISTERS AND ESTABLISH
         USING CPUSCAN,R12               ADDRESSABILITY
         LR    R12,R15
         LA    R11,SAVEAREA
         ST    R11,8(R13)
         ST    R13,4(R11)
         LR    R13,R11
         LA    R3,WAITTIM2            FORMAT EQUATE PARAMETERS
         ST    R3,WAIT5S
         LA    R3,CPULIMIT
         ST    R3,CPULIM
         LA    R3,COLDBTCH
         A     R3,=F'240'
         STC   R3,COLDB
         L     R3,CVTPTR              GET CVT POINTER
         USING CVT,R3
         L     R4,604(R3)             GET RMCT PTR
         L     R4,4(R4)               GET CCT PTR
         L     R5,CVTMSER             GET BASEA POINTER
         USING BASE,R5
         L     R6,BACHN               GET CSCB CHAIN POINTER
         USING CHAIN,R6
         L     R7,CVTASVT             GET ASVT POINTER
         USING ASVT,R7
         LA    R7,ASVTFRST-ASVT(R7)   POINT TO FIRST ENTRY FOR ASCBS
OPERCOMM LA    R9,COMFLD              SET UP OPER COMMUNICATION AREA
         EXTRACT (9),FIELDS=COMM
         L     R9,COMFLD
         USING COMLIST,R9
         L     R10,COMCIBPT
         USING CIBNEXT,R10
         CLI   CIBVERB,CIBSTART             REMOVE START VERB
         BNE   SETMOD
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)
         LTR   R15,R15
         BZ    SETMOD
         WTO   'CPUSCAN START CIB STILL ON CHAIN',ROUTCDE=11,DESC=11
*                                           SET UP 1 COMM INT BLOCK
SETMOD   QEDIT ORIGIN=COMCIBPT,CIBCTR=1
         L     R11,COMECBPT
         ST    R11,LISTECBS
*  MAIN LOOP: WAIT FOR OPERATOR "P" COMMAND OR FOR TIMER TO POP
WAITLOOP STIMER REAL,TIMEEXIT,BINTVL=WAIT5S
WAITCIB  WAIT  1,ECBLIST=LISTECBS
         CLC   WAITECB(4),=F'0'             WAS THERE AN OPERATOR CMD?
         BE    CHECKCMD                     IF SO, CHECK IT
         XC    WAITECB,WAITECB              ELSE, CLEAR TIMER ECB
         B     CHECKCPU                     AND CHECK THE CPU
*  CHECK THE COMMAND: IGNORE MODIFY ("F"), SHUTDOWN ON STOP ("P")
CHECKCMD L     R10,COMCIBPT
         CLI   CIBVERB,CIBMODFY             TEST FOR MODIFY COMMAND
         BNE   TESTSTOP
*                                           FREE MODIFY AND GO WAIT
FREECIB  QEDIT ORIGIN=COMCIBPT,BLOCK=(10)
         B     WAITCIB
TESTSTOP CLI   CIBVERB,CIBSTOP              IF STOP, FREE BLOCK
         BNE   ERROR                        IF NOT, DENOTE ERROR
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)
*                                           CANCEL OUTSTANDING TIMER
CNCLTIME TTIMER CANCEL
         L     R1,NUMRESET                  LIST NUMBER RESET IN LOG
         CVD   R1,DECIMAL
         UNPK  WTOMSG+8(4),DECIMAL+4(4)
         OI    WTOMSG+11,X'F0'
WTOMSG   WTO   'XXXX JOBS WERE RESET BY CPUSCAN',ROUTCDE=11
EXIT     L     R13,4(R13)                   RESTORE REGISTERS
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         SR    R15,R15                      SET RETURN CODE
         BR    R14                          RETURN
ERROR    WTO   'CPUSCAN CIBVERB NOT MODIFY OR STOP',ROUTCDE=11,DESC=11
         B     CNCLTIME
CHECKCPU EQU   *
         LH    R15,102(R4)            GET CPU BUSY RATE
         C     R15,CPULIM             CHECK IF AT THRESHOLD
         BL    WAITLOOP               BRANCH IF UNDER
RESETJOB LH    R8,CHASID              GET ASID
         MH    R8,=H'4'               MULTIPLY BY ASCB PTR LENGTH
         AR    R8,R7                  ADD STARTING PT FOR ALL ASCB PTRS
         L     R8,0(R8)               GET ASCB ADDRESS
         USING ASCB,R8
         L     R1,ASCBJBNI            GET POINTER TO JOBNAME
         LTR   R1,R1                  TEST PTR FOR VALIDITY
         BZ    NOTAJOB                BRANCH IF THIS IS NOT A JOB
         MVC   NAME(8),CHKEY          MOVE JOBNAME
         CLC   NAME(8),=CL8'INIT    ' IS THIS AN INITIATOR?
         BE    NOTAJOB                   BRANCH IF SO
*                                     SCAN THE JOBTABLE FOR THIS JOB
         LA    R1,JOBTABLE            POINT AT JOB TABLE
         LA    R15,JOBTABLN           GET NUMBER OF JOBTABLE ENTRIES
NAMEINIT LA    R14,8                  SET LENGTH OF JOBNAME
         LA    R2,NAME                POINT AT JOBNAME
TABLECHK CLI   0(R1),C'.'             CHECK CHAR IN TABLE ENTRY
         BNE   CHARCHK                IF NOT PERIOD, COMP W/ NAME CHAR
NEXTCHAR LA    R1,1(R1)               ELSE, POINT AT NEXT TABLE CHAR
         LA    R2,1(R2)                          AND NEXT NAME CHAR
         BCT   R14,TABLECHK           AND CHECK NEXT TABLE CHAR
         B     AJOB                   JOB NAME CHECKS OUT--GO RESET IT
CHARCHK  CLC   0(1,R1),0(R2)          ARE CORRESPONDING TABLE AND JOB
         BE    NEXTCHAR                  CHARS THE SAME?  B IF SO
         AR    R1,R14                 ELSE CHECK NEXT TABLE ENTRY
         BCT   R15,NAMEINIT
         B     NOTAJOB                GO TO NEXT JOB WHEN ENTIRE TABLE
*                                                    HAS BEEN CHECKED
AJOB     L     R15,ASCBOUCB           IF ALREADY IN COLD BATCH,
         LH    R15,180(R15)              IGNORE
         LA    R1,COLDBTCH
         CR    R1,R15
         BE    NOTAJOB
*                                     ELSE RESET TO COLD BATCH
AJOB2    L     R1,NUMRESET
         LA    R1,1(R1)
         ST    R1,NUMRESET            INC RESET COUNT
         MVC   CLENGTH(2),=H'24'      SET COMMAND LENGTH
         MVC   CNULL(2),=H'0'
         MVC   CCOMMAND(20),=CL20' '  BLANK OUT COMMAND AREA
         MVC   CCOMMAND(2),=CL2'E '   RESET COMMAND ("E")
         MVC   CCOMMAND+2(8),NAME     MOVE NAME
         LA    R1,CCOMMAND+2          POINT AT JOB NAME
         LA    R2,8                   COUNT FOR MAX OF 8 CHARS
NAMELOOP CLI   0(R1),C' '             BLANK CHAR?
         BE    FINISHC                IF SO, FINISH THE CMD
         CLI   0(R1),X'00'            ZEROS CHAR?
         BE    FINISHC                IF SO, FINISH THE CMD
         LA    R1,1(R1)               ELSE PT AT NEXT CHAR
         BCT   R2,NAMELOOP                    KEEP LOOPING TILL DONE
FINISHC  MVC   0(9,R1),=CL9',PERFORM='        COMPLETE COMMAND
         MVC   9(1,R1),COLDB
*                                             (OVERLAY ANY BLNKS OR 0S)
         MODESET KEY=ZERO,MODE=SUP
         SR    R0,R0                          ISSUE COMMAND
         MGCR  COMMAND
         MODESET KEY=NZERO,MODE=PROB
NOTAJOB  MVC   FWORD(4),CHPTR                 GET NEXT CSCB PTR
         L     R6,FWORD
         LTR   R6,R6                          TEST FOR 0
         BZ    ENDOFCHN                       BRANCH IF 0
         USING CHAIN,R6
         B     RESETJOB                       GO TEST NEXT CSCB
*  AT END OF CSCB CHAIN, RESTORE CSCB, ASVT PTRS AND WAIT 5 SECS
ENDOFCHN L     R6,BACHN               GET CSCB CHAIN POINTER
         USING CHAIN,R6
         L     R7,CVTASVT             GET ASVT POINTER
         USING ASVT,R7
         LA    R7,ASVTFRST-ASVT(R7)   POINT TO FIRST ENTRY FOR ASCBS
         B     WAITLOOP               WAIT UNTIL THE TIMER POPS
*  MVC FOR EX INSTR
MOVENAME MVC   CCOMMAND+2(0),NAME
*  STIMER EXIT
TIMEEXIT DS    0H
         LR    R12,R15
         USING TIMEEXIT,R12
         LR    R8,R14
         POST  WAITECB
         BR    R8
*  DATA AREAS
WAITTIM2 EQU   100*WAITTIME
COLDB    DS    CL1                    COLD BATCH PERFORMANCE GROUP
WAIT5S   DS    F                      WAIT THE SPECIFIED NUMBER OF SECS
CPULIM   DS    F                      CPULIMIT THRESHOLD
DECIMAL  DS    D
NUMRESET DC    F'0'                   COUNTER OF RESET JOBS
COMFLD   DS    F                      COMFLD AREA FOR OPERATOR COMM
LISTECBS DS    A                      LIST OF ECB ADDRESSES
         DC    X'80',AL3(WAITECB)
WAITECB  DC    F'0'
COMMAND  DS    0H                     RESET COMMAND AREA FOR MGCR
CLENGTH  DS    H
CNULL    DS    H
CCOMMAND DS    CL20
NAME     DS    D                      JOBNAME HOLDER
SAVEAREA DS    18F
FWORD    DS    F                      FULL WORD PROPERLY ALIGNED
JOBTABLE EQU   *
*  THE JOBTABLE DEFINES THE JOBS WHICH ARE RESET WHEN THE CPU GOES
*  PAST THE SPECIFIED THRESHOLD.
*  A MATCH WILL CAUSE THE JOB TO BE RESET.  NOTE THAT
*  PERIODS ACT AS WILD CHARACTERS--CHARACTERS AT THIS POSITION
*  IN A JOB'S NAME WILL NOT BE CHECKED.
*  NOTE!!  IF YOU PLACE AN ENTRY WITH ALL PERIODS IN THIS TABLE,
*  EVERY JOB IN YOUR SYSTEM WILL GET RESET TO COLD BATCH.
         DC    CL8'...U....'   RESET ALL JOBS W/"U" IN 4TH COL
         DC    CL8'Z11.....'   RESET ALL JOBS STARTING W/"Z11"
         DC    CL8'Z21.....'   RESET ALL JOBS STARTING W/"Z21"
         DC    CL8'L61J402.'   RESET ALL JOBS STARTING W/"L61J402"
         DC    CL8'Q.......'   RESET ALL JOBS STARTING W/"Q"
JOBTABLN EQU   (*-JOBTABLE)/8
         LTORG
*  DSECTS
         CVT   DSECT=YES
         DSECT
         IEZCOM
         DSECT
         IEZCIB
         IEEBASEA
         IEECHAIN
         IHAASVT
         IHAASCB
         END


David R Saunders
Computer Systems Senior Engineer
University of Virginia (USA)                        c Xephon 1991

