Dynamically updating the ISPF command table


So how to do it?

/* member name ISPCOMND is defaulted by ISPCMDU */
x=ispcmdu("da(sys1.common.table)")        /* global modifications */
d = "'"sysvar(sysuid)".ispf.ispprof'"     /* where to find locals */
if sysdsn(d) = "OK" then x=ispcmdu("da("d")")   /*local ? */


EXAMPLE

/* these are part of my very own ISPF command additions */
/sv/0/alias save/short form of save/
/br/0/select cmd(*dsbrowse &zparm)/direct browse/
/ed/0/select cmd(*dsedit &zparm)/direct edit/


Program listing for ISPCMDU

/* ------------------------------------------------------ rexx */
/* add commands to ispf in-storage command table               */
/* parms:   DA(dsname(member))   member is optional, default   */
/*                               is 'ispcomnd'.                */
/*                               if not specified, then        */
/*          QUIET                dont show confirmation.       */
/*          ID(id)               set 'desc' field to id.       */
/* ----------------------------------------------------------- */
 address command
 arg pm
 parse var pm "DA("pmda")" .
 address ispexec "control errors return"
 address isredit "MACRO NOPROCESS"
 Select
   when rc = 0 then call edit_load /* edit macro */
   when pmda = "" then call Dsn_Load pmda
   otherwise       call Dsn_Load sysvar('sysuid')".ISPF.ISPPROF"
 end
 address ispexec
 added=0
 updated=0
 deleted=0
 do i=1 to r.0
   c = translate(r.i)
   if word(c,1) = "/*" then iterate
   if c = ""           then iterate
   dlm=substr(c,1,1)
   parse var c (dlm) verb (dlm) trunc,
               (dlm) act  (dlm) desc (dlm) .
   upper verb act
   if dlm = '-' then call tbldel
   else call tblupd
 end
 if wordpos('QUIET',pm) = 0 then,
   call xmsg "added("added") updated("updated") deleted("deleted")"
 return
tblupd:
 if locate(verb) = 0 then do
   call updvars
   'tbput ispcmds'
   updated=updated+1
   return
 end
 /* verb not found, add it */
 'tbtop ispcmds'
 call updvars
 'tbadd ispcmds'
 added=added+1
 return
tbldel:
 if locate(verb) > 0 then return
 'tbdelete ispcmds'
 deleted=deleted+1
 return
updvars:
 zctverb=verb
 zcttrunc=trunc
 zctact=act
 parse var pm "ID("id")" .
 if desc = "" then desc = "*"id"*"
 zctdesc=desc
 return
locate:
 "tbtop    ispcmds"
 arg zctverb
 "tbscan   ispcmds arglist(zctverb)"
 return rc
xmsg:
 parse arg xmsgtext
 call ispmsg "<ISPCMDU>" xmsgtext
 return
Edit_Load:   /* load data to stem from edit session */
 do i=1 to 9999
   address isredit '(1) = line' i
   if rc > 0 then leave
   r.i = strip(1,t)
 end
 r.0=i-1
 return
Dsn_Load:   /* load from library */
 arg d m
 d = strip(d,"b","'")
 if m = "" then m = "ISPCOMND"
 d = "'"d"("m") '"
 address tso
 if sysdsn(d) = "OK" then do
   call xmsg "*could not find input:" d
   exit
 end
 "alloc dd(zcmdui) da("d") shr reuse"
 rc1 = rc
 if rc1 = 0 then 'execio * diskr zcmdui (stem r. finis'
 rc2 = rc
 'free dd(zcmdui)'
 if rc1+rc2 > 0 then do
   call xmsg "*readin failed alloc("rc1") read("rc2")"
   exit
 end
 drop rc1 rc2
 return


Program listing for ISPCMDL

/* list commands in ispf in-storage command table         REXX */
 address command
 address ispexec
 'vget (ztempf zenvir)'
 'tbtop ispcmds'
 i=1
 r.i=left("Verb",8,".") left("Len",3,"."),
     left("Action",50,".") left("Desc",15".")
 do forever
   'tbskip ispcmds'
   if rc > 0 then leave
   i=i+1
   r.i=left(zctverb,8) left(zcttrunc,3),
       left(zctact,50) left(zctdesc,15)
 end
 address tso
 "alloc dd(zcmd1) da('"ztempf"') shr reuse"
 if rc > 0 then do
   call ispmsg "*failure to allocate" ztempf
   exit
 end
 do n=1 to i; queue r.n; end
 "execio" queued() "diskw zcmd1 (finis"
 "free  dd(zcmd1)"
 arg opt  /* any options ?? */
 if substr(word(zenvir,2),1,1) >= 4 then do
   address ispexec "view dataset('"ztempf"')"
   exit
 end
 if opt = "E" | opt = "EDIT" then,
   address ispexec "edit dataset('"ztempf"')"
 else,
   address ispexec "browse dataset('"ztempf"')"
 return


Willy Jensen
Software Specialist
Hitachi Data Systems (Denmark)              c Xephon 1996

