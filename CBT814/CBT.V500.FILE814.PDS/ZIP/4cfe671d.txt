Recovery of deleted members from a PDS
A Partitioned Dataset (PDS) is a dataset that consists of a directory area at
the beginning followed by a series of sequentially organised members.  Each
member has a unique eight-character name which is stored in the directory,
together with the relative address (TTR) of the first block of the member, and a
small amount of (optional) user data.
The directory is physically a series of 256-byte blocks terminated by an end-of-
file record and is normally accessed and updated by the FIND, BLDL, and STOW
macros.  Within the directory the entries are maintained in ascending order of
the binary values of the member names.  Each block is preceded by a key whose
value is the member name of the last entry in the block.
The format of the data part of the PDS is defined when it is allocated and may
be any that would be used for a normal sequential dataset.  In fact, when
processing an individual member it is indistinguishable from a normal sequential
dataset.  Within the PDS, each member is terminated by an end-of-file record.
When a new member is added to a PDS, it is written after the last existing
member, and a new directory entry is made via the STOW macro.  If the member is
replacing one that already existed (ie a directory entry with the same name
exists), then the TTR field in the old directory entry is updated to point to
the start of the new version.  Thus, the old version becomes inaccessible by
normal means, but it is still physically present in the dataset (unless the
dataset is then compressed, of course).  A similar situation occurs when a
member is deleted - the directory entry is removed but the member itself is
still present but inaccessible in the dataset.  As PDSs are commmonly used as
source code libraries and as it is easy to replace or delete a member by
mistake, possibly losing many hours of work, a method of recovering ‘dead’
members has been developed.
If we consider a PDS at a more basic level we find that dead members can in fact
be accessed.  By treating the entire dataset as merely a sequential dataset with
embedded end-of-file records, it is possible to copy the entire contents
(excluding the directory, which is of no interest here) into a normal sequential
dataset, which may then be edited to recover the lost member.  The following
outline procedure describes how this may be done.
1    Find the TTRZ of the first data record after the end of the directory.  One
way to do this is to open the PDS as a RECFM=F,LRECL=256,BLKSIZE=256 sequential
dataset, and, using READ macros, read the directory until the end-of-file
condition is indicated.
2    Close and re-open the PDS, this time with the RECFM, LRECL, and BLKSIZE
values appropriate to the data area.  Open an output sequential dataset with the
same parameters.
3    Issue a POINT macro using the TTRZ of the previous end-of-file record, to
request positioning to the following record, which will be the first block of
the first (next) member (which may be alive or dead as far as the directory is
concerned, but here this concept is irrelevant).
4    Using READ and WRITE macros, copy the member to the output dataset until
the end-of-file record is reached.  Note that for RECFM=FB datasets, the last
data block before the end-of-file record will probably be short, so it is
advisable to always update the DCBBLKSI field in the output DCB before each
WRITE.  For RECFM=VB datasets this condition is taken care of automatically.  At
this point it is a good idea to write some sort of marker line to the output
dataset to indicate the end of the member.
5    Test the TTRZ of the end-of-file record against that of the last record in
the dataset.  This may be obtained from the DS1LSTAR field of the format-1 DSCB
of the PDS.  If they are different, go back to step 3 and copy the next member
to the output dataset.
6    If the end-of-file record is the last record in the PDS, close the input
and output datasets and terminate the program.
The resulting output dataset will be a single sequential dataset with the same
format as an individual member, maybe containing end-of-member markers, that may
be edited to recover the replaced/deleted data.  The original PDS is left
untouched and may now be compressed without worry.

Dr Peter Wright
Tessella (Abingdon) Ltd (UK)  © Xephon 1988


