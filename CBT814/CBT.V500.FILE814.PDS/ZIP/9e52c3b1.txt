Dynamic graphic display of critical resources

The following application produces an 'animated' two-
dimensional graph reporting in real-time two system indicators
of MVS performance: UIC and CPU busy. I was interested in
looking at the possibility of creating an animated display using
GDDM so I began to experiment with basic GDDM calls.

I started with the sample programs shipped with GDDM, in
particular the program ADMUSC1. Once I understood how to
animate my video 3192 graphic with a GDDM program I
looked for a serious application.

Today, there a lot of monitors that can display information
about the system with an automatic update mechanism. The
ones I know of produce coloured bars in reverse video. My
application is a high-resolution graph that resembles an
electrocardiogram of MVS.

The application is composed of three programs, a TSO CLIST,
and an ISPF panel. The CLIST and the panel prompt the user
for parameters, a COBOL program performs the graphic
functions, an Assembler program collects values from MVS
control blocks, and another Assembler routine performs the
STIMER functions.

The graphs are line-type graphs: a thin red line represents the
percentage CPU busy time and a thick yellow line is the UIC
count. Scales are from 0 to 100 for CPU busy and 255 to 0 for
UIC so that the higher the red line the higher the CPU usage
and the higher the yellow line the higher the utilization of
central storage.

The start time of the graph is displayed under the x axis line on
the left and the termination time of the graph is inserted on the
right. If used from TSO on a video terminal, the application
displays the graph with automatic update by the interval
specified. You can, if you want, have every completed graph
printed on a graphic printer.

If executed in batch (as a job or a started task) you will have
every completed graph printed on the printer. Perhaps it is
better to have it non-swappable in batch if running with a short
interval time.

For example, I monitor two or three hours of work without
having to collect records from SMF/RMF, elaborate them, and
produce the graphs. With this application I have the graphs
immediately. Try to use it in your computer room!  It is a great
effect and impresses the management.

The parameter string passed to the main program is in this
form:

o      Video? (one character - Y or N)

o      Print every completed graph (one character - Y or N)

o      Time interval between scans (in seconds) - 2 characters

o      Number of passes (ie graphs) - 2 characters

o      VTAM LUNAME of printer - maximum of 8 characters.

Processing can be interrupted by pressing the attention key
under TSO or cancelling the batch job. I apologise for not
implementing and testing an operator interface for a more
elegant solution, but I am very busy on other work. The
program executes in the problem state and has been tested
under MVS/ESA 3.1.1 and GDDM 2.1.1.

I can verify that setting ADMDEFS with
PROCOPT=FASTUPD for a primary device (ie CRT) is no
good with my application because the screen is refreshed
completely at every update and you lose the 'cartoon' effect.
My CRT is a 3192 graphic and the printer is a 4224.


SAMPLE BATCH EXECUTION

//job00001 JOB (aswd),CLASS=a,MSGCLASS=1
//* parameters : n --> not video
//*            : y --> print every completed graph
//*            :03 --> interval between scan
//*            :10 --> number of graphs
//*            :lu01pr01 --> luname vtam of printer
//GRAPH    EXEC PGM=IKJEFT01,DYNAMNBR=10
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSIN    DD  SYSOUT=*
//SYSOUT   DD  SYSOUT=*
//INP      DD  DUMMY
//ADMPRNTQ DD  DSN=GDDM.ADMPRINT.REQUEST.QUEUE,DISP=SHR
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN DD *
CALL 'TECH.SUPP.LOADLIB(PLOTTER)' 'NY0310LU01PR01'
//*


EXAMPLE OF INVOCATION BY TSO CLIST

PROC 0
/* clist to invoke gddm-uic-cpu graphical display */
SET &BL =
 ALLOC FI(ADMPRNTQ) DA('GDDM.ADMPRINT.REQUEST.QUEUE') SHR REUSE
DISPL: +
 ISPEXEC DISPLAY PANEL(GDDMCPUP)
 IF &LASTCC = 8 THEN EXIT
 IF &PR = &BL THEN SET &PR = XXXXXXXX
 CALL 'TECH.SUPP.LOADLIB(PLOTTER)' 'Y&P&SE&PA&PR'
GOTO DISPL


COBOL MAIN PROGRAM

       IDENTIFICATION DIVISION.
       PROGRAM-ID.  PLOTTER.
       REMARKS.
      ************************************************************
      *      PROGRAM TO GENERATE A DYNAMIC GRAPH DISPLAYING      *
      *      CPU USE AND UIC COUNT FOR MVS                       *
      ************************************************************.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.
       OBJECT-COMPUTER.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
      *        UN-NAMED SEGMENT NUMBER
       77  UNNAMED-SEGMENT  PIC S9(8) COMP VALUE +0.
      *        VALUES FOR COLOUR ATTRIBUTE
       77  BLUE             PIC S9(8) COMP VALUE +1.
       77  RED              PIC S9(8) COMP VALUE +2.
       77  PINK             PIC S9(8) COMP VALUE +3.
       77  GREEN            PIC S9(8) COMP VALUE +4.
       77  CYAN             PIC S9(8) COMP VALUE +5.
       77  YELLOW           PIC S9(8) COMP VALUE +6.
       77  NEUTRAL          PIC S9(8) COMP VALUE +7.
       77  NORM             PIC S9(8) COMP VALUE +1.
       77  LARG             PIC S9(8) COMP VALUE +2.
      *        VALUES FOR TIME
       77  TEMPO            PIC S99     VALUE 03.
       77  TEMPOL           PIC S99     VALUE 10.
      *        CHARACTER ATTRIBUTE VALUES
       77  MEDIUM-PRECISION PIC S9(8) COMP VALUE +2.
       77  LOW-PRECISION    PIC S9(8) COMP VALUE +1.
       77  CHARACTERS-DOWN  PIC S9(8) COMP VALUE +2.
       77  CHARACTERS-ALONG PIC S9(8) COMP VALUE +1.
      *        PARAMETERS TO THE SCREEN READ OPERATION
       77  ATTENTION-TYPE   PIC S9(8) COMP.
       77  ATTENTION-MOD    PIC S9(8) COMP.
       77  FIELD-COUNT      PIC S9(8) COMP.
      *        INDICES
       77  LINE-POS                   COMP-1.
       77  LABEL-NUM        PIC S9(8) COMP.
       77  PASSES-N         PIC 99    VALUE ZERO.
      *        DEVICE INFORMATIONS
       01  DEVID            PIC S9(8) COMP VALUE +19.
       01  FAMILY           PIC S9(8) COMP VALUE +2.
       01  TOKE             PIC X(8)  VALUE '*'.
       01  ZEROO            PIC S9(8) COMP VALUE +10.
       01  PROLISTA.
           05  AAAAAAA1     PIC S9(8) COMP VALUE +4.
           05  AAAAAAA2     PIC S9(8) COMP VALUE +8.
           05  AAAAAAA3     PIC S9(8) COMP VALUE +0.
           05  AAAAAAA4     PIC S9(8) COMP VALUE +1.
           05  AAAAAAA5     PIC S9(8) COMP VALUE +10.
           05  AAAAAAA6     PIC S9(8) COMP VALUE +3.
           05  AAAAAAA7     PIC S9(8) COMP VALUE +0.
           05  AAAAAAA8     PIC S9(8) COMP VALUE +0.
           05  AAAAAAA9     PIC S9(8) COMP VALUE +80.
           05  AAAAAA10     PIC S9(8) COMP VALUE +0.
      *        VARIOUS FLAGS
       01  MODO1            PIC S9(8) COMP VALUE +1.
       01  UNOO             PIC S9(8) COMP VALUE +1.
       01  NOME             PIC X(8)  VALUE 'LU01PR01'.
       01  FACTOR           COMP-1 VALUE 0.050E0.
       01  VALORX.
         02   VALORE        PIC S9(7) COMP-3.
         02   VALOR1        PIC S9(7) COMP-3.
       01   VALORE-C        COMP-1.
       01   VALORE-C-1      COMP-1.
       01   COUNTX          PIC 999 VALUE 0.
      *        PICTURE ATTRIBUTES
       01  PICTURE-AREA.
         02  PIC-ROW        PIC S9(8) COMP VALUE +1.
         02  PIC-COL        PIC S9(8) COMP VALUE +1.
         02  PIC-WIDTH      PIC S9(8) COMP VALUE +80.
         02  PIC-DEPTH      PIC S9(8) COMP VALUE +22.
      *        ALPHANUMERIC FIELD POSITIONS AND SIZES.
       01  ALPHA-FIELDS.
         02 FIELD-1.
           03  FLD1-ID      PIC S9(8) COMP VALUE +1.
           03  FLD1-ROW     PIC S9(8) COMP VALUE +24.
           03  FLD1-COL     PIC S9(8) COMP VALUE +1.
           03  FLD1-WIDTH   PIC S9(8) COMP VALUE +42.
           03  FLD1-DEPTH   PIC S9(8) COMP VALUE +1.
           03  FLD1-TYPE    PIC S9(8) COMP VALUE +2.
           03  FLD1-SPACES  PIC X(42) VALUE SPACES.
           03  FLD1-CONTENT PIC X(42)
           VALUE     '         PF3 TO EXIT - ENTER TO CONTINUE'
           03  FLD1-CONTENW PIC X(42)
           VALUE     '         WAITING 10 SECONDS.....        '
      *        WORLD COORDINATE SPACE IN WHICH PICTURE
      *        IS TO BE DRAWN.
       01  GRAPHIC-COORDINATES.
         02  LOW-X          COMP-1 VALUE -3.0E0.
         02  HIGH-X         COMP-1 VALUE +21.0E0.
         02  LOW-Y          COMP-1 VALUE -3.0E0.
         02  HIGH-Y         COMP-1 VALUE +21.0E0.
      *        EXTREMES OF GRID IN WORLD COORDINATE UNITS
       01  GRID-AREA.
         02  GRID-LEFT      COMP-1 VALUE  0.0E0.
         02  GRID-RIGHT     COMP-1 VALUE 19.0E0.
         02  GRID-BOTTOM    COMP-1 VALUE  0.0E0.
         02  GRID-TOP       COMP-1 VALUE 20.0E0.
      *        POSITIONS FOR LABEL ANNOTATION
       01  ANNOT-POS.
         02  ANNOT-HOR-X    COMP-1 VALUE -1.0E0.
         02  ANNOT-HOR-X-U  COMP-1 VALUE 19.1E0.
         02  ANNOT-HOR-Y    COMP-1.
         02  ANNOT-VERT-X   COMP-1.
         02  ANNOT-VERT-Y   COMP-1 VALUE  0.0E0.
      *     STEPH NUMBERS IN INTEGER FORM
       01  STEPX            COMP-1.
       01  OLD-STEPX        COMP-1.
       01  STEPHS.
           02  STEPH        COMP-1 OCCURS 12 TIMES.
       01  UNO              COMP-1 VALUE  1.0E0.
       01  UNOX             COMP-1 VALUE 0.050E0.
      *      STEPH LABELS FOR X AXIS
       01  STEPH-LABELS.
           02  STEPH-LABEL  PIC X(4) OCCURS 12 TIMES.
      *      LABELS FOR THE Y AXIS
       01  YLABELS.
           02  YLABEL       PIC X(3) OCCURS 20 TIMES.
       01  YLABELS-U.
           02  YLABEL-U     PIC X(3) OCCURS 20 TIMES.
      *        Y TITLE TEXT AND POSITION
       01  YTITLE.
         02  YTITLE-TEXT    PIC X(12) VALUE 'CPU BUSY %  '.
         02  YTITLE-LENGTH  PIC S9(8) COMP   VALUE +12.
         02  YTITLE-START-X COMP-1 VALUE -2.0E0.
         02  YTITLE-START-Y COMP-1 VALUE 12.0E0.
         02  YLABEL-LEN     PIC S9(8) COMP VALUE +3.
       01  YTITLE-U
         02  YTITLE-TEXT-U    PIC X(09) VALUE 'UIC COUNT'.
         02  YTITLE-LENGTH-U  PIC S9(8) COMP   VALUE +9.
         02  YTITLE-START-X-U COMP-1 VALUE 20.2E0.
         02  YTITLE-START-Y-U COMP-1 VALUE 12.0E0.
         02  YLABEL-LEN-U     PIC S9(8) COMP VALUE +3.
      *        X TITLE TEXT AND POSITION
       01  TIME-TEMP.
             05 HHT           PIC XX.
             05 MMT           PIC XX.
             05 SST           PIC XX.
       01  XTITLE.
         02  XTITLE-TEXT.
             05 HHT           PIC XX.
             05 FILLER        PIC X    VALUE ':'
             05 MMT           PIC XX.
             05 FILLER        PIC X    VALUE ':'
             05 SST           PIC XX.
         02  XTITLE-LENGTH    PIC S9(8) COMP VALUE +8.
         02  XTITLE-START-X   COMP-1 VALUE  0.0E0.
         02  XTITLE-START-Y   COMP-1 VALUE -2.0E0.
         02  XLABEL-LEN       PIC S9(8) COMP VALUE +10.
      *        PRINTER NAME AND PRINT SIZE
       01  PRINT-INFO.
         02  PRINTER-NAME     PIC X(8)  VALUE 'LCO1P0C7'.
         02  PRINT-WIDTH      PIC S9(8) COMP VALUE +80.
         02  PRINT-DEPTH      PIC S9(8) COMP VALUE +48.
         02  PRINT-KEEP       PIC S9(8) COMP VALUE +1.
      *        PARAMETERS FOR PRINT COPY
      *             - FIRST WORD ZERO,
      *             - SECOND WORD SPECIFIES HEADER REQUIRED
      *             - THIRD WORD SPECIFIES NUMBER OF COPIES
       01  COPY-PARAMETERS.
           02  NUMBER-OF-COPY-PARMS PIC S9(8) COMP VALUE +3.
           02  COPY-PARMS.
               03  COPY-TYPE      PIC S9(8) COMP VALUE +0.
               03  COPY-HEADER    PIC S9(8) COMP VALUE +0.
               03  COPY-NUMBER-OF PIC S9(8) COMP VALUE +1.
      *        NAME OF FILE TO BE USED TO SAVE THE PICTURE
       LINKAGE SECTION.
       01    PARS.
             05    LLL          PIC XX.
             05    CRT          PIC X.
             05    PRTALL       PIC X.
             05    DELAY        PIC 99.
             05    PASSES       PIC 99.
             05    PRINTE       PIC X(8).
       PROCEDURE DIVISION USING PARS.
      *    INITIALIZE GDDM    *
           CALL 'FSINN'.
      *    DEFINE ALPHANUMERIC FIELD    *
           CALL 'ASDFLD' USING FLD1-ID,
                               FLD1-ROW,
                               FLD1-COL,
                               FLD1-DEPTH,
                               FLD1-WIDTH,
                               FLD1-TYPE.
      *    SAVE PRINTER FROM PARAMETERS    *
           MOVE  PRINTE TO NOME.
           MOVE  PRINTE TO PRINTER-NAME.
           MOVE  DELAY TO TEMPO.
           IF TEMPO LESS THAN 3 THEN MOVE 03 TO TEMPO.
           IF    CRT     = 'Y' THEN
                                    GO TO NOBATCH.
      *    IF NOT UNDER TSO OPEN PRINTER AS PRIMARY DEVICE     *
               CALL 'DSOPEN' USING DEVID,
                                   FAMILY,
                                   TOKE,
                                   ZEROO,
                                   PROLISTA,
                                   UNOO,
                                   NOME.
               CALL 'DSUSE' USING MODO1,
                                  DEVID.
       NOBATCH.
               CALL 'GSFLD' USING PIC-ROW,
                                  PIC-COL,
                                  PIC-DEPTH,
                                  PIC-WIDTH.
               CALL 'GSWIN' USING LOW-X,
                                  HIGH-X,
                                  LOW-Y,
                                  HIGH-Y.
       REINIT.
           MOVE ZERO TO XTITLE-START-X.
           PERFORM DATA-INIT.
           PERFORM Y-AXIS.
           PERFORM X-AXIS.
           MOVE 0 TO LABEL-NUM.
           CALL 'GSMOVE' USING UNO  , UNO.
           MOVE ZERO TO STEPX OLD-STEPX.
           MOVE ZERO TO       VALORE-C VALORE-C-1.
           PERFORM PLOT-DATA VARYING COUNTX FROM 1 BY 1 UNTIL
           COUNTX = 380.
           ACCEPT TIME-TEMP   FROM TIME.
           MOVE CORRESPONDING TIME-TEMP TO XTITLE-TEXT.
           CALL 'GSCM' USING LOW-PRECISION.
           CALL 'GSCD' USING CHARACTERS-ALONG.
           CALL 'GSCOL' USING NEUTRAL.
           MOVE 16.5 TO XTITLE-START-X.
           CALL 'GSCHAR' USING XTITLE-START-X,
                               XTITLE-START-Y,
                               XTITLE-LENGTH,
                               XTITLE-TEXT.
      *    IF UNDER TSO SOUND ALARM,       *
      *    PUT MESSAGE "WAITING...",       *
      *    AND WAIT A BIT BEFORE REINIT... *
             IF CRT = 'Y' THEN
                          CALL  'FSALRM'
                          CALL 'ASCPUT' USING FLD1-ID,
                                              FLD1-WIDTH,
                                              FLD1-CONTENW.
               CALL  'FSFRCE'.
               CALL 'ASCPUT' USING FLD1-ID,
                                   FLD1-WIDTH,
                                   FLD1-SPACES.
      *    IF PRINT REQUESTED THEN ,       *
      *    PERFORM GSCOPY TO PRINTER       *
      *    ELSE REINIT IF PASSES NOT       *
      *    EXHAUSTED....                   *
             IF PRTALL NOT =  'Y' THEN GO TO END-PRINT.
             CALL 'FSOPEN' USING PRINTER-NAME,
                                 NUMBER-OF-COPY-PARMS,
                                 COPY-PARMS.
             CALL 'GSCOPY' USING PRINT-DEPTH,
                                 PRINT-WIDTH.
             CALL 'FSCLS' USING PRINT-KEEP.
       END-PRINT.
      *    WAIT ONLY IF WE ARE WORKING     *
      *    AT VIDEO.....                   *
            IF CRT = 'Y' THEN
            CALL  'PLOTTE2' USING TEMPOL.
       FINE.
             IF PASSES NOT EQUAL ZERO THEN
                  COMPUTE PASSES-N = PASSES-N + 1
                  IF PASSES-N NOT EQUAL PASSES
                        THEN CALL 'GSCLR'
                        GO TO REINIT.
      *    IF WE ARE WORKING AT VIDEO       *
      *    PROMPT USER FOR CONTINUE OR EXIT *
            IF CRT = 'Y' THEN
            CALL 'ASCPUT' USING FLD1-ID,
                                FLD1-WIDTH,
                                FLD1-CONTENT
            CALL 'ASREAD' USING ATTENTION-TYPE,
                                ATTENTION-MOD,
                                FIELD-COUNT.
            CALL 'GSCLR'.
      *    IF PF3 PRESSED THEN EXIT...      *
            IF ATTENTION-MOD  = 3 THEN GOBACK.
            MOVE 0 TO PASSES-N.
            CALL 'ASCPUT' USING FLD1-ID,
                                FLD1-WIDTH,
                                FLD1-SPACES.
            GO TO REINIT.
           GOBACK.
       DATA-INIT.
      *    INIT LABELS FOR THE Y DATA.      *
           MOVE     '   ' TO YLABEL (1).
           MOVE     ' 10' TO YLABEL (2).
           MOVE     '   ' TO YLABEL (3).
           MOVE     ' 20' TO YLABEL (4).
           MOVE     '   ' TO YLABEL (5).
           MOVE     ' 30' TO YLABEL (6).
           MOVE     '   ' TO YLABEL (7).
           MOVE     ' 40' TO YLABEL (8).
           MOVE     '   ' TO YLABEL (9).
           MOVE     ' 50' TO YLABEL (10).
           MOVE     '   ' TO YLABEL (11).
           MOVE     ' 60' TO YLABEL (12).
           MOVE     '   ' TO YLABEL (13).
           MOVE     ' 70' TO YLABEL (14).
           MOVE     '   ' TO YLABEL (15).
           MOVE     ' 80' TO YLABEL (16).
           MOVE     '   ' TO YLABEL (17).
           MOVE     ' 90' TO YLABEL (18).
           MOVE     '   ' TO YLABEL (19).
           MOVE     '100' TO YLABEL (20).
           MOVE     '255' TO YLABEL-U (1).
           MOVE     '   ' TO YLABEL-U (2).
           MOVE     '   ' TO YLABEL-U (3).
           MOVE     '   ' TO YLABEL-U (4).
           MOVE     '   ' TO YLABEL-U (5).
           MOVE     '   ' TO YLABEL-U (6).
           MOVE     '   ' TO YLABEL-U (7).
           MOVE     '   ' TO YLABEL-U (8).
           MOVE     '   ' TO YLABEL-U (9).
           MOVE     '   ' TO YLABEL-U (10).
           MOVE     '   ' TO YLABEL-U (11).
           MOVE     '   ' TO YLABEL-U (12).
           MOVE     '   ' TO YLABEL-U (13).
           MOVE     '   ' TO YLABEL-U (14).
           MOVE     '   ' TO YLABEL-U (15).
           MOVE     '   ' TO YLABEL-U (16).
           MOVE     '   ' TO YLABEL-U (17).
           MOVE     '   ' TO YLABEL-U (18).
           MOVE     '   ' TO YLABEL-U (19).
           MOVE     '  0' TO YLABEL-U (20).
        Y-AXIS.
      *   DRAWS THE Y AXIS                               *
             CALL 'GSCOL' USING RED.
             CALL 'GSSEG' USING UNNAMED-SEGMENT.
             CALL 'GSCOL' USING RED.
             CALL 'GSCM' USING LOW-PRECISION.
             CALL 'GSCD' USING CHARACTERS-DOWN.
             CALL 'GSCHAR' USING YTITLE-START-X,
                                 YTITLE-START-Y,
                                 YTITLE-LENGTH,
                                 YTITLE-TEXT.
             CALL 'GSCOL' USING YELLOW.
             CALL 'GSCHAR' USING YTITLE-START-X-U,
                                 YTITLE-START-Y-U,
                                 YTITLE-LENGTH-U,
                                 YTITLE-TEXT-U.
             CALL 'GSCOL' USING GREEN.
             PERFORM RULE-HOR VARYING LINE-POS FROM GRID-BOTTOM
                       BY 2
                       UNTIL LINE-POS GREATER THAN GRID-TOP.
             CALL 'GSCOL' USING NEUTRAL.
             CALL 'GSCM'  USING MEDIUM-PRECISION.
             CALL 'GSCD'  USING CHARACTERS-ALONG.
             PERFORM ANNOT-HOR VARYING LINE-POS FROM GRID-BOTTOM
                       BY 1
                       UNTIL LINE-POS GREATER THAN GRID-TOP.
        RULE-HOR.
      *  DRAWS A HORIZONTAL GRID LINE *
           CALL 'GSMOVE' USING GRID-LEFT,
                               LINE-POS.
           CALL 'GSLINE' USING GRID-RIGHT,
                               LINE-POS.
        ANNOT-HOR.
      *  ANNOTATES A HORIZONTAL GRID LINE.  *
           SUBTRACT 0.75 FROM LINE-POS GIVING ANNOT-HOR-Y.
           MOVE     LINE-POS TO LABEL-NUM.
           CALL 'GSCHAR' USING ANNOT-HOR-X,
                               ANNOT-HOR-Y,
                               YLABEL-LEN,
                               YLABEL (LABEL-NUM).
           CALL 'GSCHAR' USING ANNOT-HOR-X-U,
                               ANNOT-HOR-Y,
                               YLABEL-LEN-U,
                               YLABEL-U (LABEL-NUM).
        X-AXIS.
      *   DRAWS THE X AXIS GRID                         *
             ACCEPT TIME-TEMP   FROM TIME.
             MOVE CORRESPONDING TIME-TEMP TO XTITLE-TEXT.
             CALL 'GSCM' USING LOW-PRECISION.
             CALL 'GSCD' USING CHARACTERS-ALONG.
             CALL 'GSCHAR' USING XTITLE-START-X,
                                 XTITLE-START-Y,
                                 XTITLE-LENGTH,
                                 XTITLE-TEXT.
             CALL 'GSCOL' USING BLUE.
             PERFORM RULE-VERT.
             CALL 'GSCOL' USING NEUTRAL.
             CALL 'GSCM'  USING MEDIUM-PRECISION.
        RULE-VERT.
      *  DRAWS THE VERTICAL LINES    *
             CALL 'GSMOVE' USING GRID-LEFT,
                                 GRID-BOTTOM.
             CALL 'GSLINE' USING GRID-LEFT,
                                 GRID-TOP.
             CALL 'GSMOVE' USING GRID-RIGHT,
                                 GRID-BOTTOM.
             CALL 'GSLINE' USING GRID-RIGHT,
                                 GRID-TOP.
        PLOT-DATA.
      *   DRAW THE GRAPH ON THE CONSTRUCTED GRID IN RED AND YELLOW. *
      *   NOW repositioning to old coordinates for cpu...           *
            CALL 'GSMOVE' USING STEPX ,
                               VALORE-C.
            CALL 'PLOTTE1' USING VALORX.
            MOVE  VALORE TO VALORE-C.
            COMPUTE VALORE-C = ( VALORE-C * 20 ) / 100.
            CALL 'GSCOL' USING RED.
            ADD   1 TO LABEL-NUM.
            MOVE  STEPX TO OLD-STEPX.
            COMPUTE STEPX             = ((FACTOR * LABEL-NUM))
            CALL 'GSLW' USING NORM.
      *   draw line to new value for cpu.................           *
            CALL 'GSLINE' USING  STEPX            ,
                                 VALORE-C.
      *   NOW repositioning to old coordinates for uic...           *
            CALL 'GSMOVE' USING OLD-STEPX ,
                                VALORE-C-1.
            MOVE  VALOR1 TO VALORE-C-1.
            COMPUTE VALORE-C-1 = ( 255 - VALORE-C-1 ).
            COMPUTE VALORE-C-1 = ( VALORE-C-1 * 20 ) / 255.
            CALL 'GSCOL' USING YELLOW.
            CALL 'GSLW' USING LARG.
      *   draw line to new value for uic.................           *
            CALL 'GSLINE' USING  STEPX            ,
                                VALORE-C-1.
            IF CRT = 'Y' THEN CALL  'FSFRCE'.
      *   NOW wait a bit before next refresh                        *
            CALL  'PLOTTE2' USING TEMPO.


STIMER PROGRAM

*        THIS PROGRAM IS CALLED FROM THE PROGRAM PLOTTER
*        IT PERFORMS STIMER FUNCTIONS
PLOTTE2  CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         L     R6,0(R1)
         USING PLOTTE2,R12
         ST    R13,SAVE+4
         LA    R13,SAVE
         MVC   TIMEREQ(2),0(R6)
         PACK  DBLPACK,TIMEREQ
         CVB   R5,DBLPACK
         MH    R5,=H'100'
         ST    R5,BINTVL
         STIMER WAIT,BINTVL=BINTVL
ENDOFPGM L     R13,4(R13)
         RETURN (14,12),T,RC=0
DBLPACK  DS   D
BINTVL   DS   F
TIMEREQ  DC   CL2' '
SAVE     DS   18F
         END


CPU AND UIC COUNT EXTRACTION PROGRAM

*        THIS PROGRAM IS CALLED FROM THE PROGRAM PLOTTER
*        IT RETRIEVES THE AVERAGE CPU UTILIZATION AND UIC COUNT
*        FROM MVS CONTROL BLOCKS
*        Based on program SRMSHOW by Thierry Falissard
*        published in MVS Update in February 1990
         CVT   DSECT=YES
PLOTTE1  CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         L     R6,0(R1)
         USING PLOTTE1,R12
         ST    R13,SAVE+4
         LA    R13,SAVE
         L     R1,AMODE31A
         BSM   0,R1
AMODE31A DC    A(AMODE31B+X'80000000')
AMODE31B DS    0H
         L     R2,CVTPTR
         USING CVT,R2
         L     R2,CVTOPCTP
         MVC   CATCH,RMCT
         CLC   RMCT,0(R2)
         BNE   NOTFOUND
         L     R4,228(R2)
         MVC   CATCH,RCT
         CLC   RCT,0(R4)
         BNE   NOTFOUND
         MVC   UIC(2),54(R4)
         LH    R1,56(R4)
         SRL   R1,4
         STH   R1,CPU
         CVD   R1,WRKD
         MVC   0(4,R6),WRKD+4
         LH    R1,UIC
         CVD   R1,WRKD
         MVC   4(4,R6),WRKD+4
         LA    R1,AMODE24
         BSM   0,R1
AMODE24  DS    0H
ENDOFPGM L      R13,4(R13)
         RETURN (14,12),T,RC=0
NOTFOUND DS     0H
         MVC    ERRMSG+24(4),CATCH
         TPUT   ERRMSG,80
         ABEND  0001,DUMP
ERRMSG   DC     CL80'** ERROR RETRIEVING --> XXXX IN CORE   **'
CATCH    DC     C'    '
RMCT     DC     C'RMCT'
RCT      DC     C'RCT '
UIC      DS     H
CPU      DS     H
SAVE     DS     18F     MY SAVE AREA
WRKD     DS     D
         LTORG
         END


ISPF PANEL

)ATTR
      + TYPE(TEXT) INTENS(LOW) CAPS(ON) SKIP(ON)
      % TYPE(TEXT) INTENS(HIGH) CAPS(ON) SKIP(ON)
      _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) PAD(_)
      # TYPE(OUTPUT) INTENS(HIGH) CAPS(ON)
)BODY
+                                                               #ZUSER
+                                                               #ZDATE
+                                                               #ZTIME
%                   Gddm cpu/uic graphic display
+
+
+  Set run options and then press enter to execute.
+
+  Press the attention key to terminated graphs.
+
+  Print every completed graph ?.........._p+ (y/n)
+
+  Interval in seconds ?.................._se+(03/99)
+
+  Number of passes ?....................._pa+(00/99) (00 = infinite)
+
+  Printer name ?........................._pr      +(8 chars max)
+
+                            press %pf3+ to terminate now
+
)INIT
  .CURSOR = P
      &p = N
      &se = 03
      &pa = 01
)PROC
   VER (&P,NONBLANK)
   VER (&P,LIST,Y,N)
    VER (&SE,RANGE,03,99)
    VER (&pa,RANGE,00,99)
)END


Franco Masone
Systems Programmer (Italy)                              c Xephon 1992

