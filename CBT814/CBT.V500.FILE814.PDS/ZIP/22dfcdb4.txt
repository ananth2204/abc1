An automatic dataset contention resolver

The article Dataset contention revisited (MVS Update, Issue
66) reminded me of a function I wrote to handle this problem
automatically. The function has been successfully installed and
used at several MVS/ESA JES2 Version 3 installations. The
programs are written using standard interfaces, macros, and
control blocks, so I believe they should work on other MVS
versions too.

The function (called WAITING) will provide help in avoiding
delays in batch job processing depending on jobs waiting for
datasets. It will handle the situation where batch jobs are
waiting for a dataset which another batch job or TSO user
holds. With this function activated, the situation will be acted
upon immediately and automatically. The action taken depends
on whether the task holding the dataset is a batch job or a TSO
user. If the task holding the dataset is a batch job, the waiting
job will be cancelled, re-queued for execution in hold status,
and released as soon as the dataset it was waiting on is no
longer in use. If the task holding the dataset is a TSO user, a
message will be sent to the TSO user, saying that a batch job
needs a dataset which the TSO user has allocated.

The WAITING function consists of the following four
components:

1      SYS1.PARMLIB(MPFLSTxx) - this member has to be
      updated to start program ZWAITMSG for message
      IEF863I. The line to do that could look like this:

      IEF863I,SUP(NO),AUTO(NO),RETAIN(YES),USEREXIT(ZWAITMSG)

2      Program ZWAITMSG - this is a program that is started
      automatically when message IEF863I is detected, if the
      above PARMLIB change is made. The program
      ZWAITMSG checks that it has been entered for the right
      message and that it has been issued from a batch job. The
      program picks up the job name and the JES2 job number of
      the job which has issued the message, and the dataset name
      causing the dataset conflict is also picked up. ZWAITMSG
      then issues a START command for procedure WAITING
      with the symbolic variable P, which contains the job name,
      JES2 job number, and dataset name, which was collected
      previously.

3      Started task procedure WAITING - this is a procedure that
      is started automatically by program ZWAITMSG when
      message IEF863I is detected, if the above PARMLIB
      change is made and the program ZWAITMSG is installed.
      The procedure ZWAITMSG executes program
      ZWAITING.

4      Program ZWAITING - this program picks up the PARM
      value from the start command variable P. The PARM
      value contains the job name and JES2 job number of the
      job which has been tagged 'WAITING FOR DATASET'.
      Also the dataset name of the dataset causing the conflict is
      found in the PARM value. The program checks that the
      dataset conflict still exists. If the conflict is still present
      then a check is made that there is only one task owning the
      dataset. If the task holding the resource is a TSO user then
      a message is sent to that TSO user stating that he or she
      holds a dataset that someone needs. If the task owning the
      resource is a batch job, then ZWAITING checks that the
      owner has the same job name that was passed in the start
      command and checks with JES2 that the job has the same
      JES2 job-id that was passed from the PARM value and is
      still executing. If not, the program ends, otherwise it issues
      JES2 commands to cancel and re-queue the job for
      execution in HOLD status, waits 60 seconds, then checks
      with JES2 if the waiting job is still in the input hold queue.
      (This case can occur if someone submits a job that gets a
      dataset conflict, is put in hold by ZWAITING, and is then
      cancelled from the input hold queue by the operator.) If the
      job is found in the input hold queue then a check is made
      whether the dataset causing the conflict is still in use, if not
      then the waiting job is released and the ZWAITING
      program ends. If the dataset is still in use then the
      processing is repeated after the 60 seconds wait.


Installation STEPS

1      Assemble and link ZWAITMSG to an APF-authorized
      LINKLIST library. The linkage editor attribute RENT
      should be used. The F LLA,REFRESH command must be
      used to let MVS recognize this program without an IPL.

2      Assemble and link ZWAITING to an APF-authorized
      library. This program can be accessed by STEPLIB in the
      WAITING procedure.

3      Update the SYS1.PARMLIB member MPFLST as
      described above.

4      Add the procedure WAITING to your started task
      procedure library.


Activation/Deactivation

After updating the PARMLIB member it can be activated by
the T MPF=xx command. The WAITING function is easily
brought in or out of action by having two MPFLSTxx members
in PARMLIB: one member with the ZWAITMSG program
defined for message IEF863I and the other member without
this program. Then one could dynamically activate or
deactivate the WAITING function by the command 'T
MPF=xx', where xx is the suffix of the member one would
bring into use.


SOURCE CODE FOR ZWAITMSG

         TITLE 'ZWAITMSG - WTO EXIT '
* NAME - ZWAITMSG - WTO EXIT TO START PROCEDURE WAITING WHEN A JOB *
*   IS WAITING FOR A DATASET.                                      *
*   WE GET CONTROL UPON ISSUANCE OF THE IEF863I WTO.  WE ISSUE     *
*   A START COMMAND FOR PROCEDURE "WAITING". WHICH WILL EXAMINE    *
*   THE SITUATION AND PERFORM THE REQUIRED ACTIONS.                *
* NOTE - WE MUST BE IN AN APF-AUTHORIZED LINKLIST LIBRARY.         *
* TO USE -                                                         *
*   SPECIFY IN AN MPFLSTXX MEMBER OF PARMLIB:                      *
*     IEF863I,SUP(NO),USEREXIT(ZWAITMSG)                           *
         LCLC  &CSECT
&CSECT   SETC  'ZWAITMSG'
&CSECT   CSECT ,
&CSECT   AMODE 31
&CSECT   RMODE ANY
BLE      OPSYN BNH
BHE      OPSYN BNL
*        I N I T I A L I Z E                                       *
* SETUP SAVEAREA AND SAVE CALLER'S REGS                            *
         SAVE  (14,12),,&CSECT-&SYSDATE-&SYSTIME
         LR    R12,R15            ESTABLISH BASE.
         USING &CSECT,R12         TELL ASSEMBLER.
*        M A I N L I N E   P R O C E S S I N G                     *
         L     R11,0(,R1)         R11 = A(CTXT)   (PARMLIST)
         USING CTXT,R11           TELL ASSEMBLER.
         CLC   =C'CTXT',CTXTACRN  IS IT CTXT ?
         BNE   QUIKEXIT           NO - LEAVE
         ICM   R6,15,CTXTTXPJ     R6 = A(CTXTATTR)
         BZ    QUIKEXIT           LEAVE IF POINTER NOT FOUND
         USING CTXTATTR,R6        TELL ASSEMBLER.
         CLC   =C'IEF863I DSN = ',CTXTTMSG ENSURE MESSAGE IS IEF863I...
         BNE   QUIKEXIT
         GETMAIN RU,LV=DYNLEN,SP=230,LOC=BELOW MUST BE BELOW FOR SVC34.
         LR    R2,R13             SAVE AREA
         LR    R13,R1             SAVE AREA
         USING DYNAMIC,R13        TELL ASSEMBLER.
         LA    R0,DYNAMIC         ZERO -
         LA    R1,DYNLEN            DYNAMIC -
         LR    R14,R0                 STORAGE -
         SLR   R15,R15                  ....
         MVCL  R0,R14             DO IT.
         ST    R2,4(,R13)         BACK CHAIN SAVEAREA
         ST    R13,8(,R2)         FORWARD CHAIN SAVEAREA
         MVC   CMDAREA(CMDLEN),CMDL COMMAND LIST TO WORKAREA
         L     R2,16              GET CVT POINTER
         L     R2,0(,R2)          GET TCBWORDS
         L     R2,4(,R2)          POINT TO TCB
         USING TCB,R2             MAKE TCB ADRESSABLE
         L     R3,TCBJSCB         GET ADDRESS OF JSCB
         USING IEZJSCB,R3         MAKE JSCB ADDRESSABLE
         L     R3,JSCBACT         GET ADDRESS OF ACTIVE JSCB
         ICM   R4,15,JSCBSSIB     GET ADDRESS OF LIFE-OF-JOB SSIB
         BZ    RETURN             SKIP IF NO LIFE-OF-JOB SSIB FOUND
         USING SSIB,R4            MAKE SSIB ADDRESSABLE
         CLI   SSIBJBID,C'J'      ARE WE A BATCH JOB ?
         BNE   RETURN             SKIP - IF STC OR TSU
         MVC   CMDAREA+25(8),SSIBJBID JOB IDENTIFIER TO COMMAND
         L     R5,JSCBJCT         GET JCT POINTER
         USING INJMJCT,R5         MAKE JCT ADDRESSABLE
         LA    R5,16(R5)          POINT OVER PREFIX
         MVC   CMDAREA+17(8),JCTJNAME JOBNAME TO COMMAND
         DROP  R2,R3,R4,R5
         LH    R10,CTXTTLEN       GET TEXT LENGTH
         LA    R9,CTXTTMSG        POINT TO START OF TEXT
         LA    R4,CTXTTMSG+14     POINT TO START OF DSN IN TEXT
         LR    R2,R4              SAME IN R2
         LA    R3,0(R9,R10)       POINT TO END OF TEXT
DSNLOOP  CR    R2,R3              END OF TEXT ?
         BHE   DSNLOOPE           YES - LEAVE LOOP
         CLI   0(R2),C' '         END OF DSN FOUND ?
         BE    DSNLOOPE           YES - LEAVE LOOP
         LA    R2,1(R2)           POINT TO NEXT CHAR IN DSN
         B     DSNLOOP            LOOP UNTIL END OF DSN
DSNLOOPE DS    0H                 END OF DSN FOUND
         SR    R2,R4              COMPUTE LENGTH OF DSN
         BNP   RETURN             RETURN IF LENGTH NOT > 0
         CH    R2,=H'44'          LENGTH > 44 ?
         BH    RETURN             RETURN IF LENGTH NOT > 0
         BCTR  R2,0               LENGTH - 1 FOR EXECUTE
         EX    R2,DSNMVC          MOVE DSN TO WORKAREA
         LA    R4,CMDAREA+33(R2)  POINT TO END OF DSNAME
         MVI   1(R4),C''''        SET APOSTROPHE AFTER DSNAME
         SR    R0,R0              CLEAR
         LA    R1,CMDAREA         POINT TO THE COMMAND
         SVC   34                 ISSUE THE COMMAND
*        R E T U R N                                               *
RETURN   LR    R1,R13              PREPARE
         L     R13,4(,R13)         FOR FREEMAIN.
         FREEMAIN RU,LV=DYNLEN,A=(1),SP=230
QUIKEXIT DS    0H
         RETURN (14,12),RC=0       RETURN WITH RC = 0
*        S T A T I C   A R E A                                     *
DSNMVC   MVC   CMDAREA+33(*-*),0(R4) *** EXECUTED ***
CMDL     DS    0F
         DC    AL2(CMDLEN,0)                    +0
CMD      DC    C'S WAITING,P='''                +4
         DC    CL8' '              JOB NAME    +17
         DC    CL8' '              JOB ID      +25
         DC    CL46' '             DSNAME      +33
CMDLEN   EQU   *-CMDL
         LTORG *
         DROP  R6,R11,R13
*        D Y N A M I C   A R E A S                                 *
DYNAMIC  DSECT
SAVE     DS    18F
CMDAREA  DS    0F,XL(CMDLEN)
DYNLEN   EQU   *-DYNAMIC           LENGTH OF WORKAREA.
         IEZVX100
         IKJTCB
         IEZJSCB
         IEFAJCTB
         IEFJSSIB
         END   &CSECT


SOURCE CODE FOR ZWAITING

ZWAITING CSECT ,
         STM   R14,R12,12(R13)            SAVE REGISTERS
         LR    R12,R15                    LOAD ENTRY ADDRESS
         USING ZWAITING,R12               ESTABLISH ADDRESSABILITY
         L     R3,0(R1)                   LOAD PARM ADDRESS
         LH    R5,0(R3)                   GET PARM LEN
         CH    R5,=H'17'                  LEN > 17 ?
         BL    ERRPARM                    NO - ERROR
         GETMAIN RC,LV=WORKLEN,SP=0       GET WORK AREA
         LTR   R15,R15                    GETMAIN SUCCESSFUL?
         BNZ   ERRGETM                    NO - ERROR
         LR    R2,R13                     OLD SAVE AREA ADDRESS
         LR    R13,R1                     GET ADDRESS TO GETMAINED AREA
         USING WORKA,R13                  ESTABLISH ADDRESSABILITY
         LA    R0,WORKA                   ZERO -
         LA    R1,WORKLEN                   DYNAMIC -
         LR    R14,R0                         STORAGE -
         SLR   R15,R15                          ....
         MVCL  R0,R14                     DO IT.
         ST    R2,4(,R13)                 BACK CHAIN SAVEAREA
         ST    R13,8(,R2)                 FORWARD CHAIN SAVEAREA
         XR    R10,R10                    ASSUME RC ZERO
         BCTR  R5,0                       PARMLEN - 1 FOR EXECUTE
         EX    R5,PARMMVC                 SAVE JOBNAME,JES2ID & DSN
         SH    R5,=H'15'                  COMPUTE LENGTH OF DSNAME
         MVC   GQSCAN(GQSCANL),XGQSCAN    MOVE GQSCANLIST
         LA    R2,WRKRIB                  R2 = A(1ST RIB)
         LA    R4,WPDSNAME                POINT TO DSNAME
         USING RIB,R2
         GQSCAN RESNAME=(SYSDSN,(R4),(R5),SPECIFIC,8), FIND ALL -      *
               AREA=((R2),WRKRIBL),       WAITED ON DSN RESOURCE.      *
               MF=(E,GQSCAN)
         LTR   R15,R15                    GQSCAN OK ?
         BNZ   ERRGQSCA                   NO - ERROR
         LR    R6,R1                      R1 = NUMBR OF RIBS RETURNED
         ST    R0,WRIBLNS                 SAVE RETURNED R0 VALUES
         CLC   H1,RIBNTO+2                NBR OF TSKS OWNING RES = 1 ?
         BNE   RETURN1                    NO - FORGET IT
         LR    R3,R2                      RIB ADDRESS TO R3
         AH    R3,WRIBFLEN                ADD FIXED RIB LENTH
         AH    R3,RIBVLEN                 ADD VARIABLE LENGTH
         USING RIBE,R3                    ESTABLISH ADDRESSABILITY
         L     R0,RIBNRIBE                LOOP COUNTER = NBR OF RIBS
RIBELOOP TM    RIBESFLG,RIBESTAT          FLAG = OWNER ?
         BO    RIBEOWNR                   YES - GO PICK UP OWNER INFO
         CLC   WPJOBNAM,RIBEJBNM          WAITER JOBNAME=PARM JOBNAME ?
         BNE   RIBELOPE                   NO - SEARCH MORE
         MVC   WWAITING,RIBEJBNM          MOVE JOBNAME OF REQUESTOR
         MVC   WWAITIAS,RIBEASID          MOVE ASID OF REQUESTOR
         MVC   WWAITFLG,RIBERFLG          MOVE FLAGS OF REQUESTOR
         B     RIBELOPE                   SEARCH FURTHER
RIBEOWNR MVC   WOWNER,RIBEJBNM            MOVE JOBNAME OF REQUESTOR
         MVC   WOWNERAS,RIBEASID          MOVE ASID OF REQUESTOR
         MVC   WOWNEFLG,RIBERFLG          MOVE FLAGS OF REQUESTOR
RIBELOPE AH    R3,WRIBELEN                ADD RIBE LENGTH
         BCT   R0,RIBELOOP                REPEAT
         CLI   WWAITING,0                 WAITING JOBNAME MATCH FOUND ?
         BE    RETURN2                    NO - LEAVE
         L     R15,CVTPTR                 LOAD POINTER TO CVT
         USING CVTMAP,R15                 ESTABLISH CVT ADDRESSABILITY
         L     R7,CVTASVT                 LOAD ASVT POINTER
         DROP  R15                        DROP CVT ADDRESSABILITY
         LA    R15,ASVTENTY-ASVT(R7)      R15 = ADDR OF 1ST ASVT ENTRY
         LH    R1,WOWNERAS                R0 = OWNING ASID
         BCTR  R1,0                       ASID STARTS FROM 1
         SLL   R1,2                       FIND OWNING ASVT ENTRY
         ALR   R15,R1                     R2 = A(OWNING ASVT ENTRY)
         TM    0(R15),X'80'               SEE IF ASID IS AVAILABLE
         BO    RETURN3                    NO - FORGET IT
         L     R8,0(R15)                  LOAD ASCB ADDRESS
         USING ASCB,R8                    ESTABLISH ASCB ADDRESSAB.
         CLC   =C'ASCB',ASCBASCB          IS CONTROL BLOCK VALID ?
         BNE   RETURN4                    NO - FORGET IT
         ICM   R14,15,ASCBJBNI            JOBNAME POINTER = JOB ?
         BZ    TSOWNER                    NO - GO AND CHECK IF TSO/STC
         DROP  R8                         SKIP ASCB
* CHECK THAT THE WAITING JOB IS THE SAME JES2 JOBID AS GOTTEN FROM PARM
         LA    R8,WSSOB                   POINT TO SSOB
         USING SSOB,R8                    MAKE SSOB ADDRESSABLE
         ST    R8,WSSOBPTR                SAVE SSOB PTR
         OI    WSSOBPTR,X'80'             TURN ON HIGH ORDER BIT
         MVC   SSOBID,=C'SSOB'            SET IDENTIFIER
         MVC   SSOBLEN,=AL2(SSOBHSIZ)     SET SSOB HEADER LENGTH
         MVC   SSOBFUNC,=AL2(SSOBSTAT)    SET FUNCTION ID = JOB STATUS
         MVC   SSCSLEN,=AL2(SSCSIZE)      SET CANCEL/STATUS EXT. LEN.
         MVC   SSCSDIMP,H16               SET ARRAY SIZE FOR 1 ENTRY
         MVC   SSCSJOBN,WWAITING          WAITING JOB NAME TO SSOB
         MVC   SSCSJOBI,WPJOBIDN          WAITING JOB JES2ID TO SSOB
         LA    R1,SSCSBGN                 POINT TO CANCEL/STATUS EXT.
         ST    R1,SSOBINDV                AND SAVE IN SSOB LIST
         BAL   R11,SSREQSUB               GET JES2 STATUS OF WAITER
* CHECK IF WAITING JOB IS EXECUTING
         TM    SSCSFLG1,SSCSJACT          IS JOB EXECUTING ?
         BZ    RETURN7                    NO - DONE
         MVC   WCMD(CMDL1),CMD1           COMMAND LIST TO WORKAREA
* NEXT MVCS ASSUMES 5 DIGITS JOBNUMBERS ARE USED
         MVC   WCMD+7(5),SSCSJOBI+3       WAITER'S JOBNUMBR TO COMMAND
         MVC   WCMD+15(5),SSCSJOBI+3      WAITER'S JOBNUMBR TO COMMAND
         MVC   WCMD+23(5),SSCSJOBI+3      WAITER'S JOBNUMBR TO COMMAND
         BAL   R11,CMDSUB                 ISSUE COMMAND
         MVC   WENQ(ENQL),ENQ             MOVE ENQ LIST
ENQTEST  TM    WOWNEFLG,RIBETYPE          HAS OWNER SHARED REQUEST
         BO    ENQSHARE                   YES - ISSUE SHARED REQUEST
         ENQ   (,WPDSNAME,,(R5)),MF=(E,WENQ) ENQ EXCLUSIVE
         B     ENQCHECK                   GO AND CHECK ENQ RC
ENQSHARE ENQ   (,WPDSNAME,S,(R5)),MF=(E,WENQ) ENQ SHARED
ENQCHECK LTR   R15,R15                    RESOURCE AVAILABLE ?
         BZ    RELEASE                    YES - RELEASE JOB
         CLI   3(R15),4                   RESOURCE UNAVAILABLE ?
         BNE   ERRENQ                     NO - UNEXPECTED ERROR IN ENQ
         STIMER WAIT,BINTVL=WAITTIME      WAIT 60 SECONDS
         BAL   R11,SSREQSUB               GET JES2 STATUS OF WAITER
* CHECK IF WAITING JOB IS (STILL) WAITING EXECUTION IN HOLD
         TM    SSCSFLG1,SSCSEXCQ+SSCSHOLD WAITING EXECUTION/IN HOLD ?
         BO    ENQTEST                    YES - CHK IF DATASET IN USE
         B     RETURN8                    NOT FOUND - DONE
RELEASE  MVC   WCMD(CMDL2),CMD2           COMMAND LIST TO WORKAREA
* NEXT MVC ASSUMES 5 DIGITS JOBNUMBERS ARE USED
         MVC   WCMD+7(5),SSCSJOBI+3       WAITER'S JOBNUMBR TO COMMAND
         BAL   R11,CMDSUB                 ISSUE RELEASE CMD
         B     RETURN9                    DONE
         USING ASCB,R8                    ESTABLISH ASCB ADDRESSAB.
TSOWNER  ICM   R14,15,ASCBJBNS            JOBNAME POINTER= STC/TSO ?
         BZ    RETURN5                    NO - FORGET IT
         ICM   R0,15,ASCBTSB              IS OWNER A TSO SESSION ?
         BZ    RETURN6                    NO - FORGET IT OWNER IS STC
         DROP  R8                         SKIP ASCB
         MVC   WMSG(TSOMSGL),TSOMSG       MOVE TPUT MESSAGE
         MVC   WMSG+15(8),WWAITING        MOVE JOBNAME OF WAITER
         BCTR  R5,0                       DSN LENGTH - 1 FOR EXECUTE
         EX    R5,DSNMVC                  DSNAME TO TPUT MESSAGE
         LH    R4,WOWNERAS                GET OWNER ASID
         LA    R0,L'WMSG+1(R5)            LENGTH OF MESSAGE TO R0
         MVC   TPUT(TPUTL),XTPUT          MOVE TPUT LIST
         TPUT  WMSG,(0),ASID=(4),MF=(E,TPUT) WRITE MESSAGE
         LTR   R15,R15                    TPUT OK ?
         BNZ   ERRTPUT                    NO - ERROR IN TPUT
         B     RETURN                     DONE
*        TERMINATE PROGRAM and SET RETURN CODE depending on reason
RETURN1  LA    R10,1                      NBR OF TSKS OWNING RES NE 1
         B     RETURN                     TERMINATE PROGRAM
RETURN2  LA    R10,2                      WAITING JOB NOT FOUND
         B     RETURN                     TERMINATE PROGRAM
RETURN3  LA    R10,3                      ASID NOT FOUND
         B     RETURN                     TERMINATE PROGRAM
RETURN4  LA    R10,4                      ASCB CONTROL BLOCK NOT VALID
         B     RETURN                     TERMINATE PROGRAM
RETURN5  LA    R10,5                      NO VALID ASCBJBNI/S POINTER
         B     RETURN                     TERMINATE PROGRAM
RETURN6  LA    R10,6                      DATASET OWNER IS A STC
         B     RETURN                     TERMINATE PROGRAM
RETURN7  LA    R10,7                      WAITING JOB NOT EXECUTING
         B     RETURN                     TERMINATE PROGRAM
RETURN8  LA    R10,8                      WAITING JOB NOT IN HOLDQ
         B     RETURN                     TERMINATE PROGRAM
RETURN9  LA    R10,9                      WAITING JOB RELEASED
         B     RETURN                     TERMINATE PROGRAM
RETURN10 LA    R10,10                     SSOBRETN = JOB NOT FOUND
         B     RETURN                     TERMINATE PROGRAM
RETURN11 LA    R10,11                     SSOB ARRAY SIZE NE 16
         B     RETURN                     TERMINATE PROGRAM
RETURN12 LA    R10,12                     UNEXPECTED RC FROM GQSCAN
*        TERMINATE PROGRAM
RETURN   LR    R1,R13                     GET WORK AREA ADRESS
         L     R13,4(R13)                 PREVIOUS SAVE AREA
         FREEMAIN RU,LV=WORKLEN,A=(1),SP=0
QUICKRET LR    R15,R10                    LOAD RETURN CODE
         RETURN  (14,12),RC=(15)          RELOAD REGISTERS AND RETURN
SSREQSUB DS    0H                         GET JES2 STATUS FOR JOB
         USING SSOB,R8                    MAKE SSOB ADDRESSABLE
         MODESET KEY=ZERO,MODE=SUP        CHANGE TO KEY ZERO & SUP MOD
         LA    R1,WSSOBPTR                GET SSOB ADDRESS
         IEFSSREQ
         LR    R10,R15                    SAVE SUBSYS RETURN CODE
         MODESET KEY=NZERO,MODE=PROB      CHANGE BACK
         LTR   R10,R10                    SUBSYS REQUEST OK ?
         BNZ   ERRSSREQ                   ERROR IF NOT
         ICM   R0,15,SSOBRETN             SUBSYS RETURN CODE = 0
         BZ    SSREQOK                    YES - JOB STATUS RETRIEVED
         CH    R0,H4                      JOB NOT FOUND ?
         BE    RETURN10                   YES - NOTHING TO DO
         B     ERRSSREQ                   ERROR IF SSOBRETN > 4
SSREQOK  CLC   H16,SSCSDIMR               ARRAY SIZE USED = 16 ?
         BNE   RETURN11                   NO - SKIP
         BR    R11                        RETURN TO CALLER
CMDSUB   DS    0H
         MODESET KEY=ZERO                 CHANGE TO KEY ZERO
         SLR   R0,R0                      CLEAR
         LA    R1,WCMD                    POINT TO COMMAND
         SVC   34                         ISSUE COMMAND SVC
         MODESET KEY=NZERO                BACK TO USERKEY
         BR    R11                        RETURN TO CALLER
ERRPARM  DS    0H                         ERROR IN PARM VALUE
         LA    R10,16                     SET RETURN CODE
         WTO   'ERROR IN PARMVALUE',ROUTCDE=11
         B     QUICKRET                   QUICK RETURN
ERRGETM  DS    0H                         ERROR IN GETMAIN REQUEST
         LR    R10,R15                    GET RETURN CODE
         WTO   'ERROR IN GETMAIN',ROUTCDE=11
         B     QUICKRET                   QUICK RETURN
ERRTPUT  DS    0H                         ERROR IN TPUT REQUEST
         LR    R10,R15                    SAVE RC
         WTO   'ERROR IN TPUT',ROUTCDE=11
         B     RETURN                     RETURN
ERRGQSCA DS    0H                         ERROR FROM GQSCAN SERVICE
         LR    R10,R15                    SAVE RC
         CH    R15,=H'4'                  NO RESOURCES MATCHED
         BE    RETURN12                   THEN - RETURN
         WTO   'ERROR IN GOSCAN',ROUTCDE=11
         B     RETURN                     RETURN
ERRSSREQ DS    0H                         ERROR FROM IEFSSREQ
         USING SSOB,R8                    MAKE SSOB ADDRESSABLE
         MVC   WWTOSSRE(WTOSSLEN),WTOSSREQ WTO LIST TO WORKAREA
         CVD   R10,WORK                   CONVERT RC TO DECIMAL
         UNPK  WWTOSSRE+26(3),WORK+6(2)   UNPACK
         OI    WWTOSSRE+28,X'F0'          DE SIGN
         L     R15,SSOBRETN               GET FUNCTION RELATED RET.CODE
         CVD   R15,WORK                   CONVERT TO DECIMAL
         UNPK  WWTOSSRE+39(3),WORK+6(2)   UNPACK
         OI    WWTOSSRE+41,X'F0'          DE SIGN
         WTO   MF=(E,WWTOSSRE)            ISSUE WTO
         B     RETURN                     RETURN
ERRENQ   DS    0H                         ERROR IN ENQ
         XR    R10,R10                    CLEAR R10 BEFORE IC
         IC    R10,3(R15)                 LOAD ENQ RETURN CODE
         WTO   'ERROR IN ENQ',ROUTCDE=11  ISSUE ERROR MESSAGE
         B     RETURN                     RETURN
PARMMVC  MVC   WPJOBNAM(0),2(R3)          *** EXECUTED ***
DSNMVC   MVC   WMSGDSN(0),WPDSNAME        *** EXECUTED ***
SYSDSN   DC    CL8'SYSDSN  '
XGQSCAN  GQSCAN SCOPE=ALL,WAITCNT=1,MF=L
GQSCANL  EQU   *-XGQSCAN
XTPUT    TPUT  ,,,ASID=0,MF=L
TPUTL    EQU   *-XTPUT
TSOMSG   DC    C'ZWAITING - JOB XXXXXXXX WAITING FOR DATASET '
TSOMSGL  EQU   *-TSOMSG
F44      DC    F'44'
H1       DC    H'1'
H4       DC    H'4'
H16      DC    H'16'
DSN      DC    C'DSN = '                  'DSN =' IN MESSAGE TEXT ?
* CHANGE IF COMMAND DELIMITER OTHER THAN '$' IS USED AT YOUR INSTALLATION
CMD1     DC    AL2(CMDL1,0)               SVC 34 LIST
         DC    C'$HJNNNNN;EJNNNNN;CJNNNNN ' COMMAND TEXT + ENDING SPACE
CMDL1    EQU   *-CMD1
CMD2     DC    AL2(CMDL2,0)               SVC 34 LIST
         DC    C'$AJNNNNN',C' '           COMMAND TEXT + ENDING SPACE
CMDL2    EQU   *-CMD2
WTOSSREQ WTO   'ERROR IN IEFSSREQ R15=XXX SSOBRETN=XXX',ROUTCDE=11,MF=L
WTOSSLEN EQU   *-WTOSSREQ
ENQ      ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L
ENQL     EQU   *-ENQ
WAITTIME DC    F'6000'                    60 SEC WAITTIME
WORKA    DSECT ,
SAVEAREA DS    18F
WPJOBNAM DS    CL8                        JOB NAME FROM PARM
WPJOBIDN DS    CL8                        JES2 JOBID FROM PARM
WPDSNAME DS    CL44                       DSNAME FROM PARM
WRIBLNS  DS    0F                         GQSCAN RETURNED R0 VALUE
WRIBFLEN DS    H                          LENGTH RIB
WRIBELEN DS    H                          LENGTH RIBE
WOWNER   DS    CL8                        JOBNAME OF OWNER
WOWNERAS DS    CL2                        ADDRESS SPACE ID OF OWNER
WOWNEFLG DS    C                          FLAGS PERTAINING TO OWNER
WWAITING DS    CL8                        JOBNAME OF WAITER
WWAITIAS DS    CL2                        ADDRESS SPACE ID OF WAITER
WWAITFLG DS    C                          FLAGS PERTAINING TO WAITER
GQSCAN   DS    CL(GQSCANL)
TPUT     DS    CL(TPUTL)
* KEEP WMSG AND WMSGDSN TOGETHER FOR TPUT
WMSG     DS    CL(TSOMSGL)
WMSGDSN  DS    CL44
WSSOBPTR DS    A                          POINTER TO WSSOB
WSSOB    DS    CL(SSOBLEN2)               SSOB + SSOB EXTENSION
         DS    CL16                       SSOB ARRAY, MUST FOLLOW WSSOB
WORK     DS    D                          DOUBLE WORD WORK AREA
WCMD     DS    CL(CMDL1)
WWTOSSRE DS    CL(WTOSSLEN)
WENQ     DS    CL(ENQL)
WRKRIB   DS    CL1000
WRKRIBL  EQU   *-WRKRIB
WORKLEN  EQU   *-WORKA
         ISGRIB
         IEFJSSOB CS,CONTIG=YES
         IHAASCB DSECT=YES
         CVT     DSECT=YES,LIST=NO
         IEFJESCT TYPE=DSECT,MNTBL=YES
         IHAASVT DSECT=YES
         END


STARTED TASK PROCEDURE WAITING

//WAITING PROC
//WAITING EXEC PGM=ZWAITING,
// PARM='&P'
//STEPLIB  DD  DISP=SHR,DSN=your.APF.load.library.name
//SYSUDUMP DD  SYSOUT=*


Lars-Gunnar Johansson
Technical Consultant
SA Data AB (Sweden)                                                c Xephon 1993

