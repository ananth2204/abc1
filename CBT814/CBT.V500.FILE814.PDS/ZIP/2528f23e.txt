How to extend REXX with your own functions

Since IBM introduced REXX for MVS, the language has
become a popular programming tool. People who are familiar
with PL/I switch easily to REXX as these two languages have
many common features  and many parts of REXX are even
more flexible than the PL/I equivalents. But there are also
some things missing from REXX. For example there is no
square root function.

By taking this very simple example you will see how easy it is
to extend REXX by creating your own functions written in any
language, even in PL/I. For performance reasons you should
consider migrating at a later date to Assembler routines.

All the programs in this article have been tested under TSO/E
Version 2 and MVS/XA: they should work correctly under
other versions too.

A simple version of a square root function written in PL/I could
be:

 /********************************************************************/
 /*   SQRT FUNCTION FOR REXX WRITTEN IN PL/I                         */
 /********************************************************************/
*PROCESS SYSTEM(MVS);
 ZRXSQRT: PROC(P1,P2,P3,P4,P5,P6) OPTIONS(MAIN,REENTRANT) REORDER;
   DCL (P1,P2,P3,P4,P5,P6)  PTR;
   DCL LENGTH               BUILTIN;
   DCL PLIRETC              BUILTIN;
   DCL SQRT                 BUILTIN;
   DCL SYSPRINT             FILE PRINT;
   DCL (I,IMAX)             BIN(31)FIXED INIT(0);
   DCL IN_PARM              CHAR(999)VAR INIT('');
   DCL OUT_PARM             CHAR(999)VAR INIT('');
   ON CONVERSION  GOTO ERROR;
   ON ERROR       GOTO ERROR;
   IMAX = GET_NUMB;
   PUT SKIP LIST('IN:');
   DO I=1 TO IMAX;
     IN_PARM = GET_PARM(I);
     PUT SKIP LIST(LENGTH(IN_PARM),IN_PARM);
     END;
   IF IMAX^=1  THEN DO;
     CALL PLIRETC(12);
     RETURN;
     END;
   OUT_PARM = SQRT(GET_PARM(1));
   CALL PUT_DATA(OUT_PARM);
   PUT SKIP LIST('OUT:');
   PUT SKIP LIST(LENGTH(OUT_PARM),OUT_PARM);
   CALL PLIRETC(0);
   RETURN;
 ERROR:
   CALL PLIRETC(12);
   RETURN;
 /*******************************************************/
   GET_NUMB: PROC RETURNS(BIN(31)FIXED);
     DCL RET               BIN(31)FIXED;
     DCL 1 ARGLIST BASED(ADDR(P5)),
           2 ENTRY(999),
             3 AP            PTR,
             3 AL            BIN(31)FIXED;
     DCL ADDR              BUILTIN;
     DO RET=1 BY 1;
       IF AL(RET)=-1  THEN LEAVE;
       END;
     RET = RET - 1;
     RETURN(RET);
     END GET_NUMB;
 /*******************************************************/
   GET_PARM: PROC(IND) RETURNS(CHAR(999)VAR);
     DCL IND               BIN(31)FIXED;
     DCL 1 ARGLIST BASED(ADDR(P5)),
           2 ENTRY(999),
             3 AP            PTR,
             3 AL            BIN(31)FIXED;
     DCL I                 BIN(31)FIXED;
     DCL RET               CHAR(999)VAR;
     DCL IN_DATA           CHAR(999) BASED;
     DCL (ADDR,SUBSTR)     BUILTIN;
     DO I=1 TO IND;
       IF AL(I)=-1  THEN LEAVE;
       END;
     IF I<=IND  THEN RET = '';
     ELSE RET = SUBSTR(AP(IND)->IN_DATA,1,AL(IND));
     RETURN(RET);
     END GET_PARM;
 /*******************************************************/
   PUT_DATA: PROC(VAL);
     DCL VAL               CHAR(*)VAR;
     DCL 1 EVALBLOCK BASED(P6),
           2 PAD1          BIN(31)FIXED,
           2 SIZE          BIN(31)FIXED,
           2 LENG          BIN(31)FIXED,
           2 PAD2          BIN(31)FIXED,
           2 DATA          CHAR(999);
     DCL (LENGTH,SUBSTR)   BUILTIN;
     LENG = LENGTH(VAL);
     IF LENG>SIZE*8-16  THEN LENG = SIZE*8-16;
     SUBSTR(DATA,1,LENG) = SUBSTR(VAL,1,LENG);
     END PUT_DATA;
 /*******************************************************/
   END ZRXSQRT;
 /********************************************************************/
 /*   END OF SQRT FUNCTION FOR REXX                                  */
 /********************************************************************/


Notes

1      By using this PROCESS option and the six pointer
      parameters, you will get the right values into your function.

2      You will get some detail information about your
      parameters from the statements written to file SYSPRINT.

3      The result will be returned to REXX in PL/I format, which
      is different from, but compatible with, the REXX format.


General Possibilities

There are two ways of calling a function from REXX:

1      By calling a function, which must return a value replacing
      the function call.

2      By calling a procedure, which may return a result that is
      placed into the variable RESULT.

A few things you can do within your own function are:

o      You can read the input values which are presented to you
      in character format.

o      You have to set a proper return code - either zero or
      something else. A non-zero value will issue a standard
      error message.

o      You can optionally return a value as a result which should
      be in character format too.

Some things you cannot do include:

o      Setting specific return code values to force specific actions.

o      Issuing your own error message (except by using your own
      I/O routine).


Activation

There is more than one way to activate this function for your
REXX program. I would recommend the following method,
which I consider to be the easiest.

IBM has defined an empty set of local functions in a CSECT
called IRXFLOC. If you create your own version of IRXFLOC
and assemble and link-edit it into a STEPLIB or LINKLIB, it
will define your own functions to REXX. The definition looks
like this:

*/********************************************************************/
*/*   CSECT IRXFLOC TO DEFINE LOCAL USER FUNCTIONS                   */
*/********************************************************************/
IRXFLOC  CSECT
         DC    CL8'IRXFPACK'
         DC    FL4'24'             LENGTH OF THIS HEADER
         DC    FL4'4'           <- NUMBER OF FUNCTION ENTRIES BELOW
         DC    FL4'0'
         DC    FL4'32'             LENGTH OF FUNCTION ENTRY
F01      DC    CL8'SQRT    '    <- NAME OF REXX FUNCTION
         DC    FL4'0'
         DC    FL4'0'
         DC    CL8'ZRXSQRT '    <- NAME OF FUNCTION LMOD
         DC    CL8'        '
F02      DC    CL8'WTO     '
         DC    FL4'0'
         DC    FL4'0'
         DC    CL8'ZRXWTO  '
         DC    CL8'        '
F03      DC    CL8'WTOR    '
         DC    FL4'0'
         DC    FL4'0'
         DC    CL8'ZRXWTOR '
         DC    CL8'        '
F04      DC    CL8'DELAY   '
         DC    FL4'0'
         DC    FL4'0'
         DC    CL8'ZRXDELA '
         DC    CL8'        '
         END IRXFLOC

Remarks

1      In the header you have to define the number of function
      entries that follow.

2      Four functions are defined, each with the same name
      within REXX and with the name of the corresponding load module.


Further Examples

When you create a whole set of functions you can extract the
basic functions to some common coding like this:

 /********************************************************************/
 /*   MEMBER REXXFUNC TO BE INCLUDED BY OTHER SOURCE MODULES         */
 /********************************************************************/
   PROC(P1,P2,P3,P4,P5,P6) OPTIONS(MAIN,NOEXECOPS,REENTRANT) REORDER;
   DCL (P1,P2,P3,P4,P5,P6)  PTR;
 /*******************************************************/
   REXX_NUMBER:   PROC      RETURNS(BIN(31)FIXED);
     DCL NUM               BIN(31)FIXED;
     DCL 1 ARGLIST BASED(ADDR(P5)),
           2 ENTRY(999),
             3 AP            PTR,
             3 AL            BIN(31)FIXED;
     DCL ADDR              BUILTIN;
     DO NUM=1 BY 1;
       IF AL(NUM)=-1  THEN LEAVE;
       END;
     NUM = NUM - 1;
     RETURN(NUM);
     END REXX_NUMBER;
 /*******************************************************/
   REXX_ARGUMENT: PROC(IND) RETURNS(CHAR(999)VAR);
     DCL IND               BIN(31)FIXED;
     DCL VAL               CHAR(999)VAR;
     DCL 1 ARGLIST BASED(ADDR(P5)),
           2 ENTRY(999),
             3 AP            PTR,
             3 AL            BIN(31)FIXED;
     DCL NUM               BIN(31)FIXED;
     DCL IN_DATA           CHAR(999) BASED;
     DCL (ADDR,SUBSTR)     BUILTIN;
     DO NUM=1 BY 1;
       IF AL(NUM)=-1  THEN LEAVE;
       END;
     NUM = NUM - 1;
     IF IND>NUM  THEN VAL = '';
     ELSE VAL = SUBSTR(AP(IND)->IN_DATA,1,AL(IND));
     RETURN(VAL);
     END REXX_ARGUMENT;
 /*******************************************************/
   REXX_RESULT: PROC(VAL);
     DCL VAL               CHAR(*)VAR;
     DCL 1 EVALBLOCK BASED(P6),
           2 PAD1          BIN(31)FIXED,
           2 SIZE          BIN(31)FIXED,
           2 LENG          BIN(31)FIXED,
           2 PAD2          BIN(31)FIXED,
           2 DATA          CHAR(999);
     DCL (LENGTH,SUBSTR)   BUILTIN;
     LENG = LENGTH(VAL);
     IF LENG>SIZE*8-16  THEN LENG = SIZE*8-16;
     SUBSTR(DATA,1,LENG) = SUBSTR(VAL,1,LENG);
     END REXX_RESULT;
 /********************************************************************/
 /*   END OF MEMBER REXXFUNC                                         */
 /********************************************************************/


Remarks

1      This coding defines three internal functions called
      REXX_NUMBER (returning the number of arguments),
      REXX_ARGUMENT (returning the specified argument
      value), and REXX_RESULT (defining the result value for REXX).

2      If it is too long, the resulting value is truncated to the
      maximum acceptable value.

Compile the following three PL/I modules and link-edit them
for further use by REXX.


ZRXWTO module

 /********************************************************************/
 /*   MODULE ZRXWTO                                                  */
 /********************************************************************/
*PROCESS SYSTEM(MVS);
 ZRXWTO:
 %INCLUDE REXXFUNC;
   DCL LENGTH               BUILTIN;
   DCL PLIRETC              BUILTIN;
   DCL (I,IMAX)             BIN(31)FIXED INIT(0);
   DCL IN_PARM              CHAR(999)VAR INIT('');
   DCL OUT_PARM             CHAR(999)VAR INIT('');
   IMAX = REXX_NUMBER;
   IF IMAX^=1  THEN DO;
     CALL PLIRETC(12);
     RETURN;
     END;
   DISPLAY(REXX_ARGUMENT(1));
   CALL PLIRETC(0);
   RETURN;
   END ZRXWTO;
 /********************************************************************/
 /*   END OF MODULE ZRXWTO                                           */
 /********************************************************************/


ZRXWTOR module

 /********************************************************************/
 /*   MODULE ZRXWTOR                                                 */
 /********************************************************************/
*PROCESS SYSTEM(MVS);
 ZRXWTOR:
 %INCLUDE REXXFUNC;
   DCL LENGTH               BUILTIN;
   DCL PLIRETC              BUILTIN;
   DCL (I,IMAX)             BIN(31)FIXED INIT(0);
   DCL IN_PARM              CHAR(999)VAR INIT('');
   DCL OUT_PARM             CHAR( 72)VAR INIT('');
   IMAX = REXX_NUMBER;
   IF IMAX^=1  THEN DO;
     CALL PLIRETC(12);
     RETURN;
     END;
   DISPLAY(REXX_ARGUMENT(1)) REPLY(OUT_PARM);
   CALL REXX_RESULT(OUT_PARM);
   CALL PLIRETC(0);
   RETURN;
   END ZRXWTOR;
 /********************************************************************/
 /*   END OF MODULE ZRXWTOR                                          */
 /********************************************************************/


ZRXDELA module

 /********************************************************************/
 /*   MODULE ZRXDELA                                                 */
 /********************************************************************/
*PROCESS SYSTEM(MVS);
 ZRXDELA:
 %INCLUDE REXXFUNC;
   DCL LENGTH               BUILTIN;
   DCL PLIRETC              BUILTIN;
   DCL (I,IMAX)             BIN(31)FIXED INIT(0);
   DCL IN_PARM              CHAR(999)VAR INIT('');
   DCL OUT_PARM             CHAR(999)VAR INIT('');
   ON CONVERSION  GOTO ERROR;
   IMAX = REXX_NUMBER;
   IF IMAX^=1  THEN DO;
     CALL PLIRETC(12);
     RETURN;
     END;
   I = REXX_ARGUMENT(1);
   DELAY(I*1000);
 NORMAL:
   CALL PLIRETC(0);
   RETURN;
 ERROR:
   CALL PLIRETC(12);
   RETURN;
   END ZRXDELA;
 /********************************************************************/
 /*   END OF MODULE ZRXDELA                                          */
 /********************************************************************/


Using the Functions

Finally, your LINKLIB or STEPLIB should contain the
following load modules: IRXFLOC, ZRXSQRT, ZRXWTO,
ZRXWTOR, and ZRXDELA. You may call these functions
from REXX like this:

   A = 2
   B = SQRT(A) + 0
   SAY A B
   T = "TEXT TO DISPLAY"
   CALL WTO T
   T = "TEXT TO DISPLAY, ENTER ANSWER"
   CALL WTOR T
   SAY RESULT
   A = 3
   SAY TIME()
   CALL DELAY A
   SAY TIME()

Remarks

1      Adding 0 to SQRT(A) forces conversion of the result to
      REXX format.

2      The WTOR input from the operator is returned into the
      variable RESULT.

3      By calling DELAY, the REXX is delayed by 3 seconds.

Manfred Heinrich
Zurich Insurance (Germany)                              c Xephon 1992

