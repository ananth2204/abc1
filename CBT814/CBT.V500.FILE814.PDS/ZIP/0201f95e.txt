Automating SMP/E HOLDDATA processing

A common problem at many MVS sites is APPLYing
maintenance via SMP/E that has been held for any number of
reasons. This HOLDDATA has become much more common in
recent years with the advent of automated operations and its
associated dependency on messages and their exact format. When
APPLYing PTFs, any ++HOLD statements will typically be
BYPASSed until the complete PREREQ chain has been
established and an APPLY CHECK has run successfully. Once
this has been done, the MVS systems programmer is left with the
unenviable task of manually investigating all the HOLDDATA
that has been BYPASSed, in the hope that nothing important will
be missed.

The following application automates this process. It consists of a
REXX EXEC, two ISPF panels, and an ISPF edit macro written
in REXX. When the first panel is displayed, the user selects a job
that contains the successful APPLY CHECK. The REXX then
uses the TSO OUTPUT command to write the job output to a
temporary file. This temporary file is then passed to edit, where the
edit macro, PRTHOLD, reads the job output and fetches the
HOLDDATA from the SMPPTS dataset. This is written to
another temporary file, and the user is taken in to 'browse' on this
dataset.

The PRINTHLD Rexx Exec

/* REXX */
XX = SYSVAR("SYSPREF")                           /* IF PROFILE PREFIX        */
IF XX ^= '' THEN                                 /* IS ON THEN SAVE          */
   DO                                            /* IT AND SWITCH IT         */
   PREF = XX                                     /* OFF.  IT WILL BE         */
   "PROF NOPREF"                                 /* RESET ON LEAVING         */
   END                                           /* THE DIALOG.              */
LISTDSN = USERID()||'.PRINTHLD.LIST'
ARG JOBNAM
SELECT
WHEN JOBNAM = ''  THEN
   DO
   ADDRESS ISPEXEC 'VGET (JOBNAM)'
   END
OTHERWISE NOP
END
/* CREATE AN ISPF TABLE TO HOLD THE LIST OF JOBS */
DO I=1
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "TBEND OUTTABLE"
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
ADDRESS ISPEXEC "TBCREATE OUTTABLE NAMES(JOBNAME JOBNUM STATUS) REPLACE"
/* ISSUE THE TSO STATUS COMMAND FOR THE RELEVANT JOBNAME. */
DROP SYSOUTLINE.
ZMSG000L  = ""
Z = OUTTRAP(SYSOUTLINE.)
ADDRESS TSO     "STATUS " JOBNAM
Z = OUTTRAP(OFF)
/* LOOP THRU THE LINES OF OUTPUT TO FIND JOBS THAT ARE ON */
/* THE OUTPUT QUEUE. ADD A ROW TO THE ISPF TABLE FOR EACH */
/* JOB FOUND. IF NO JOBS FOUND, THEN SET THE ISPF MESSAGE */
/* TO BE THE SAME AS THE MESSAGE FROM THE TSO COMMAND.    */
SELECT
WHEN POS('FOUND',SYSOUTLINE.1) = 0 THEN
  DO
    DO X =1 TO SYSOUTLINE.0
    PARSE VALUE SYSOUTLINE.X  WITH 5 JOBNAME '(' JOBNUM ')' STATUS
    ADDRESS ISPEXEC "TBADD OUTTABLE"
    END
  DROP SYSOUTLINE.
  END
OTHERWISE CALL SETMSG
END
/* ADD A POP-UP WINDOW, DISPLAY THE ISPF TABLE ON THE     */
/* PANEL 'PRINTHLD. THE USER MUST SELECT A JOB WITH THE   */
/* LINE COMMAND 'S'.                                      */
IF CRP = 'CRP' THEN CSSR = 1  ELSE  CSRR = CRP
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
CALL REMPOP
ADDRESS ISPEXEC "ADDPOP COLUMN(8) ROW(2)"
ZWINTTL = "SELECT JOB" JOBNAM
ZTDMARK = " "
ZTDMSG  = "ISRZ000"
ADDRESS ISPEXEC "TBTOP OUTTABLE"
ADDRESS ISPEXEC "TBDISPL OUTTABLE PANEL(PRINTHLD) AUTOSEL(NO) CURSOR(L) ",
                "CSRROW("CSSR") POSITION(CRP)"
/* IF THE USER HITS PF4 THEN RESTORE ANY PREFIX AND EXIT. */
IF RC >  4 THEN DO
  ADDRESS ISPEXEC "TBEND OUTTABLE"
  IF PREF ^= 'PREF' THEN                          /* RESTORE PROFILE         */
  ADDRESS TSO "PROF PREFIX("PREF")"               /* PREFIX                  */
  EXIT                                            /*                         */
  END
CALL REMPOP
ADDRESS ISPEXEC 'VPUT (JOBNAM)'
/* USE THE TSO OUTPUT COMMAND TO WRITE THE JOB OUTPUT TO  */
/* A TEMPORARY DATASET. THEN GO INTO EDIT ON THE TEMP     */
/* DATASET AND INVOKE THE EDIT MACRO 'PRTHOLD'            */
SELECT
WHEN L = S THEN
  DO
  DROP SYSOUTLINE.
  Z = OUTTRAP(SYSOUTLINE.)
  ADDRESS TSO "OUTPUT " JOBNAME"("JOBNUM") PRINT('"LISTDSN"') BEGIN KEEP HOLD"
  Z = OUTTRAP(OFF)
      SELECT
      WHEN SYSOUTLINE.0 = 0 THEN
      DO
      ADDRESS ISPEXEC "EDIT DATASET('"LISTDSN"') MACRO(PRTHOLT) "
      END
      OTHERWISE NOP
      END
  END
OTHERWISE NOP
END
SELECT
WHEN L = "" THEN
  CALL SETMSG_NULL
OTHERWISE
  CALL SETMSG
END
ITERATE I
/**************************************/
REMPOP:
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "REMPOP ALL"
ADDRESS ISPEXEC  "CONTROL ERRORS CANCEL"
RETURN
/****************************************/
SETMSG:
SELECT
WHEN SYSOUTLINE.0 = "SYSOUTLINE.0" THEN
  LAST = 0
OTHERWISE LAST = SYSOUTLINE.0
END
DO I = 1 TO LAST
ZMSG000L =  ZMSG000L SYSOUTLINE.I
END
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
RETURN
/****************************************/
SETMSG_NULL:
ZMSG000L =  ""
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
RETURN

The PRTHOLD Edit Macro

/* Rexx */
ADDRESS  ISREDIT
"MACRO"
xx = SYSVAR("syspref")                           /* If profile prefix*/
IF xx ^= '' THEN                                 /* is on then save  */
   DO                                            /* it and switch it */
   pref = xx                                     /* off.  It will be */
   ADDRESS TSO "PROF NOPRE"                      /* reset on leaving */
   END                                           /* the dialog       */
total = 0
CALL ALLOC_LISTDSN_ROUTINE
CALL FIND_PTS_ROUTINE
CALL OPEN_PTS_ROUTINE
"CURSOR = 1"
DO FOREVER
"SEEK 'GIM42001W'"
IF rc ^= 0 THEN
   DO
   LEAVE
   END
"(lptr) = CURSOR"
"(record) = LINE" lptr
x =  POS('SYSMOD ',record)
x =  x + 7
ptf = SUBSTR(record,x,7)
CALL GET_HOLDDATA_ROUTINE
total = total + 1
END
CALL FREE_PTS_ROUTINE
CALL PRINT_STACK_ROUTINE
CALL END_MSG
CALL QUIT 0
EXIT
/*********************************************************************/
/ That was the last bit of code to get control by just falling thru. */
/ The rest is all called subroutines.                                */
/*********************************************************************/
FIND_PTS_ROUTINE:
"LOCATE 1"
"SEEK 'FILE ALLOCATION RE'"
IF rc ^= 0 THEN
   DO
   zmsg000l = "Unable to ascertain SMPPTS dataset."
   ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
   CALL QUIT 12
   END
"SEEK 'SMPPTS' 1 8"
"(lptr) = CURSOR"
"(ptsrec) = LINE" lptr
x = WORDPOS(PERM,ptsrec)
smppts= WORD(ptsrec,x+1)
QUEUE "SMPPTS dataset is " smppts " ."
QUEUE " "
"LOCATE 1"
RETURN
/*********************************************************************/
OPEN_PTS_ROUTINE:
x = MSG(OFF)
ADDRESS TSO "FREE  FI(INDD)"
x = MSG(ON)
ADDRESS TSO "ALLOC FI(INDD) DA("smppts") SHR"
IF rc ^= 0 THEN
   DO
   zmsg000l = "Unable to allocate"  smppts". Dataset in use."
   ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
   ADDRESS TSO "DELSTACK"
   CALL QUIT 12
   END
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "LMCLOSE DATAID("xyz")"
ADDRESS ISPEXEC "LMFREE DATAID("xyz")"
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
ADDRESS ISPEXEC "LMINIT DATAID("XYZ") DDNAME(INDD) ENQ(SHR)"
ADDRESS ISPEXEC "LMOPEN DATAID("XYZ") OPTION(INPUT)"
RETURN
/*********************************************************************/
GET_HOLDDATA_ROUTINE:
CALL PANEL_ROUTINE
ADDRESS ISPEXEC "LMMFIND DATAID("XYZ") MEMBER("ptf")"
holddata_start = NO
holddata_end   = NO
DO i = 1
ADDRESS ISPEXEC "LMGET DATAID("XYZ") MODE(INVAR) MAXLEN(80)",
          "DATALOC(PTFREC) DATALEN(LEN)"
IF rc  ^= 0 THEN LEAVE
SELECT
WHEN  ( POS('++ HOLD',ptfrec) = 1 |   POS('++HOLD',ptfrec) = 1)  THEN
   DO
   holddata_start = YES
   END
WHEN  ( POS('++',ptfrec) = 1 &,
       (POS('++ HOLD',ptfrec) ^=  1 | POS('++HOLD',ptfrec) ^=  1)  &,
        holddata_start = YES ) THEN
   DO
   holddata_end = YES
   END
OTHERWISE NOP
END
SELECT
WHEN holddata_end   = YES THEN
    DO
    LEAVE i
    END
WHEN holddata_start = YES THEN
    DO
    QUEUE ptfrec
    END
OTHERWISE NOP
END
END
QUEUE ' '
RETURN
/*********************************************************************/
PRINT_STACK_ROUTINE:
ADDRESS TSO "EXECIO" QUEUED() "DISKW SYSUT2 (FINIS "
ADDRESS ISPEXEC "BROWSE DATASET("listdsn")"    /* BROWSE OUTPUT........... */
CALL  PRTPROG listdsn                          /* CALL PRINT PROGRAM.......*/
RETURN                                         /*                          */
/*********************************************************************/
ALLOC_LISTDSN_ROUTINE:
listdsn = userid().PRTHOLD.LIST
z = LISTDSI(listdsn NODIRECTORY RECALL)        /* CHECK IF LISTDSN EXISTS. */
ADDRESS ISPEXEC "CONTROL DISPLAY REFRESH"      /*                          */
SELECT                                         /*                          */
WHEN sysreason = 0    THEN                     /* IF YES...ALLOC AS SHR..  */
   DO
   ADDRESS TSO "ALLOC FI(SYSUT2) DA('"||listdsn||"')" SHR "REUSE"
   END
WHEN sysreason ^= 0  THEN                      /* IF NO...ALLOC AS NEW     */
   DO
   ADDRESS TSO "ALLOC FI(SYSUT2) DA('"||listdsn||"') RECFM(F,B)",
   "LRECL(80) BLKSIZE(23200) SPACE(50,10) TRACK REUSE"
   END
OTHERWISE NOP                                  /*                          */
END                                            /*                          */
RETURN
/*********************************************************************/
END_MSG:
zmsg000l = total " PTFs processed."
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
RETURN
/*********************************************************************/
QUIT:
ARG rcode
IF rcode = '' THEN rcode = 0
EXIT (rcode)
RETURN
/*****************************************************************************/
PANEL_ROUTINE:
ADDRESS ISPEXEC "ADDPOP COLUMN(20) ROW(18)"
ADDRESS ISPEXEC "CONTROL DISPLAY LOCK"
ADDRESS ISPEXEC "DISPLAY PANEL("PRTHOLD")"
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "REMPOP ALL"
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
RETURN
/*****************************************************************************/
FREE_PTS_ROUTINE:
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "LMCLOSE DATAID("xyz")"
ADDRESS ISPEXEC "LMFREE DATAID("xyz")"
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
x = MSG(OFF)
ADDRESS TSO "FREE  FI(INDD)"
x = MSG(ON)
RETURN
/*****************************************************************************/
PRTPROG:
/******************************************************************/
/*  OBTAIN VARIABLES AND INVOKE PRINT PROGRAM                     */
/******************************************************************/
ARG listdsn list
IF list = 'LIST' THEN TRACE I
  fpcla = 'A'                           /* SYSOUT CLASS */
  fppid = 'RMT29'                       /* PRINTER ID   */
  zflid = listdsn                      /* DSNAME OF SYSPRINT */
  zfprint = 'ISRFPPRT'                 /* PANEL NAME  */
ADDRESS ISPEXEC " VGET (FJB1,FJB2,FJB3,FJB4,FPCLA,FPPID) PROFILE  "
/******************************************************************/
/*     ASSIGN VARIABLES TO STANDARD NAMES                         */
/******************************************************************/
   zjb1 = fjb1                        /*job card 1   */
   zjb2 = fjb2                        /*job card 2   */
   zjb3 = fjb3                       /*job card 3   */
   zjb4 = fjb4                       /*job card 4   */
   zcla = fpcla                      /*sysout class */
   zpid = fppid                      /*local printer*/
ADDRESS iSPEXEC " VPUT (ZJB1,ZJB2,ZJB3,ZJB4,ZCLA,ZPID,ZFPRINT,ZFLID) SHARED "
x = MSG(OFF)
ADDRESS TSO "FREE DA('"listdsn"')"         /* FREE Listdsn    */
x = MSG(ON)
ADDRESS ISPEXEC "SELECT PGM(ISRFPT)"       /* INVOKE PRINT PGM*/
/******************************************************************/
/*     REASSIGN FROM STANDARD NAMES TO VARIABLES                  */
/******************************************************************/
ADDRESS ISPEXEC "VGET (ZJB1,ZJB2,ZJB3,ZJB4,ZCLA,ZPID) SHARED"
   fjb1 = zjb1     /*job card 1   */
   fjb2 = zjb2     /*job card 2   */
   fjb3 = zjb3     /*job card 3   */
   fjb4 = zjb4     /*job card 4   */
   fpcla =zcla    /*sysout class */
   fppid =zpid    /*local printer*/
ADDRESS ISPEXEC " VPUT (FJB1,FJB2,FJB3,FJB4,FPCLA,FPPID) PROFILE "
RETURN

The PRTHOLD panel

)BODY  WINDOW(50,4)
+
+ Smppts dataset is &SMPPTS
+
+ Processing holddata for &PTF
)END

The PRINTHLD panel

)ATTR
 | TYPE(INPUT) INTENS(HIGH) JUST(LEFT) CAPS(ON) PAD(' ')
 @ TYPE(OUTPUT) INTENS(LOW) JUST(LEFT) CAPS(OFF) PADC(' ') COLOR(WHITE)
)BODY WINDOW(60,15)
+
+COMMAND ===>_ZCMD                      +SCROLL ===>_AMT +
+
+JOBNAME ===>_JOBNAM  +
+
+    JOBNAME     JOBNUM        STATUS
+---------------------------------------------------------
)MODEL
|L   @JOBNAME      @JOBNUM       @STATUS                 +
)INIT
  &L = ' '
  &ZCMD = ' '
)PROC
  VER (&JOBNAM,NB,NAME)
  VER (&L,LIST,S)
)END


Steven Leek
Systems Programmer
British Gas South Eastern (UK)    c Xephon 1994

