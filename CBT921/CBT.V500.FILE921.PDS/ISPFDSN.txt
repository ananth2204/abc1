*---------------------------------------------------------------------*
*                         ISPFDSN                                     *
*---------------------------------------------------------------------*
*                                                                     *
* DESC     : PERFORMS DYNAMIC ISPF DATASET ALLOCATION                 *
*                                                                     *
* FUNCTION : ISPFDSN REFERS SYS1.$ISPFDSN.&SID($ISPFDSN) TO PERFORM   *
*            DATASET ALLOCATION. ISPFDSN DOES NOT ALLOCATE THE        *
*            DATASET IF IT ENCOUNTERS ANY ONE OF THE FOLLOWING        *
*            CONDITION                                                *
*                                                                     *
*            1) THE DATASET IS NOT CATALOGUED                         *
*            2) IF THE DATASET IS CATALOGUED BUT THE VOLUME IS        *
*               OFFLINE                                               *
*            3) THE USER HAS NO RACF READ AUTHORITY TO THE DATASET    *
*            4) IF BYPHSM OPTION IS SPECIFIED, MIGRATED DATASET IS    *
*               IGNORED                                               *
*            5) IF THE DATASET IS ALREADY ALLOCATED UNDER THE SAME    *
*               DDNAME                                                *
*            6) THE DATASET IS EXCLUSIVE OWN BY ANOTHER TASK          *
*                                                                     *
*  ADVANTAGE:                                                         *
*            1) IT IS FASTER THAN USING REXX TO ALLOCATE DATASET      *
*            2) AVOID S913                                            *
*            3) AVOID DSNAME TYPO CAUSE TSO LOGON FAILURE             *
*            4) AVOID TSO LOGON FAILURE IF YOU FORGET TO CATALOGUE    *
*               THE DATASET UNDER SYSPLEX ENVIRONMENT                 *
*            5) IT IS EASY TO MANAGE AS THE DATASET ALLOCATION IS BY  *
*               MEANS OF SOFTWARE PRODUCT. (IE CHANGE ONE ISPFDSN     *
*               MEMBER IN GLOBAL ISPFDSN PARMLIB AFFECTS ALL THE      *
*               TSO LOGON POCEDURES)                                  *
*                                                                     *
* PARMS :     GROUP(XXXXX)  - PROCESS AS IF XXXXX IS USED AS THE RACF *
*                             GROUP. THE DEFAULT GROUP IS THE USER'S  *
*                             RACF GROUP.                             *
*             LIST          - REPORT ON ANY ALLOCATIONS THAT FAIL     *
*                             AND MIGRATED DATA SET BYPASSED.         *
*             TRACE         - GENERATE TRACE MESSAGES                 *
*             BYPHSM        - BYPASS ALLOCATION OF HSM MIGRATION      *
*                             DATASET IN CASE OF HSM IS INACTIVE      *
*             LOGONPRC      - USE TSO LOGON PROC NAME AS THE MEMBER   *
*                             NAME OF SYS1.$ISPFDSN.PROCLIB(&SYSPROC) *
*             DSN(XXXX)     - DATA SET NAME FOR TSO LOGON PROCEDURE   *
*             MEMBER(XXXX)  - MEMBER NAME FOR PROC PROCESSING         *
*             PREFIX(SYS1)  - THE PREFIX OF ISPFDSN. DEFAULT IS SYS1  *
*             USER(XXXX)    - SUFFIX OF YOUR OWN PERSONNEL ISPFDSN.   *
*                             WHEN IT IS SPECIFIED, ISPFDSN ALLOCATES *
*                             DATASET IN &PREFIX.ISPFDSN.XXXX(ISPFDSN)*
*             GRPB4GLB      - ALLOCATE GROUP ISPFDSN DATASETS BEFORE  *
*                             GLOBAL ISPFDSN DATASETS                 *
*             NORACF        - BYPASS RACHECK PROCESSING JUST IN CASE  *
*                             THE RACF DATA BASE IS EXCLUSIVE ENQUED  *
*                             BY SOME TASKS.                          *
*                                                                     *
* EXAMPLE FOR STATEMENTS IN ALLOCATION SPECIFICATION:                 *
* COLS ===>   1234567890123456789012345678901234567890...             *
*             EXCLUDE=DB2                                             *
*             INCLUDE=FILEMGR                                         *
*             PROC=SYS1.PROCLIB,MEMBER=$SYSTEAM                       *
*             //SYSPROC  DD DISP=SHR,DSN=&SYSUID.PF.CLIST             *
*             //ISPPLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPPLIB         *
*             //SYSUDUMP DD SYSOUT=X                                  *
*                                                                     *
* ABENDS:     U100  -  RETURN CODE FROM DYNALLOC THAT THIS PGM        *
*                      CANNOT HANDLE. RERUN USING TRACE TO OBTAIN     *
*                      THE RETURN CODES FROM DYNALLOC, AND THE        *
*                      ERROR MESSAGES.                                *
*                                                                     *
*                                                                     *
* TABLES:     MBRTABLE : 50 ENTRIES (50*8)                            *
*             DDNTABLE : 50 ENTRIES (50*8)                            *
*             DSNTABLE :300 ENTRIES (30*52)                           *
*                                                                     *
* REGS :                                                              *
*                R12 - PROGRAM BASE REGISTER FOR THE FOLLOWING ROUTINE*
*                      PROCESS_PDS, PUTLINE                           *
*                R11 - DATA REGISTER                                  *
*                R10 - NOT IN USED                                    *
*                R9  - NOT IN USED                                    *
*                R8  - R0  - ROUTINE DEPENDANT                        *
*                                                                     *
* MODS :                                               MM/DD/YY       *
* @A1    V1R0M1 - ADD BYPHSM OPTION TO BYPASS ALLOCATION OF HSM       *
*                 MIGRATION                            05/23/92  AC   *
* @A2    V1R0M2 - FIX PREFIX PROBLEM                   05/25/92  MM   *
* @A3    V1R0M3 - CHANGE DATA SET NAME CONVENTION      05/26/92  MM   *
* @A4    V1R0M4 - FIX BYPHSM PROBLEM                   05/27/92  MM   *
* @A5    V1R0M5 - SUPPORT PDS MEMBER                   05/29/92  AC   *
* @A6    V1R0M6 - FIX SYSOUT,DUMMY,TERM STARTING       08/27/92  AC   *
*                 AT COLUMN 2                                         *
* @A7    V1R0M7 - CHANGE SYNTAX OF NON-KEYWORD LINES   09/01/92  MM   *
* @A8    V1R0M8 - ENHANCE PROGRAM TO USE IKJPARSE FOR  11/30/92  MM   *
*                 PARSING AND ADD NEW PARAMETERS                      *
*                 DSN(XXX) & MEMBER(XXX)                              *
* @A9    V1R0M9 - ENHANCE PROGRAM ACCEPT THE SYMBOL    02/17/1993 MM  *
*                 '/*' AS END OF FILE MARKER                          *
* @B1    V2R0M1 - MVS VERSION 4                        06/24/1994 AC  *
*                 ADD KEYWORD NORACF                                  *
* @B2    V2R0M2 - REPLACE LM AND STM BY BAKR AND PR    09/03/2012 AC  *
*                 . ISSUE SWAREQ TO SUPPORT SWA=ABOVE                 *
*                 . SUPPORT VARIABLE &SYSUID.&SID.ISPPROF             *
* @B3    V2R0M3 - CHANGE THE SYNTAX OF DDNAME SIMILAR   02/01/2014 AC *
*                 TO ZOS JCL                                          *
*                 . MOVE MESSAGES TO CSECT ISPFMSGS                   *
*                 . USE R11 AS DATA REGISTER                          *
*                 . SET DEFAULT OPTION TO ALLOCATE FILES IN GLOBAL    *
*                   THEN RACF GROUP                                   *
*                 . ADD KEYWORD GRPB4GLB                              *
* @B4    V2R0M4 - REPLACE SWAREQ BY INTERNAL DSNTABLE   09/01/2014 AC *
*                   AS SWAREQ REQUIRE APF AUTHORISED                  *
*                 . ADD KEYWORD LOGONPRC                              *
*                 . REPLACE TRT BY SRST INSTRUCTION                   *
*---------------------------------------------------------------------*
         EJECT
ISPFDSN  CSECT
         J     MAIN000                 BRANCH AROUND EYECATCHER
         DC    C'ISPFDSN V2R0M4  &SYSDATE &SYSTIME'                @B4C
*---------------------------------------------------------------------*
*                     MAINLINE                                        *
*---------------------------------------------------------------------*
MAIN000  DS    0H
         BAKR  R14,0              SAVE REGISTERS INTO LINKAGE STACK
         LARL  R11,WORKSTOR
         USING WORKSTOR,R11            R11 IS DATA REGISTER
         ST    R1,CPPLADDR             SAVE CPPL ADDR
         BRAS  R14,INIT_RTN            INITIALIZATION AND PARM CHECKING
         LTR   R15,R15                 RC = 0 ?
         JNZ   EXIT4                   TERMINATE IF RC NOT 0
         TM    DSNFLAG,DSNLIST         WAS LIST PARM SPECIFIED ?
         JZ    MAIN010                 NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,4(,R8)               MSG01 (4*1)
         BRAS  R14,PUTLINE             DISPLAY MSG01
MAIN010  L     R15,VISPQRY             TEST FOR                    @B3A
         BALR  R14,R15                   ISPF ENVIRONMENT          @A7A
         LTR   R15,R15                     IS ACTIVE OR NOT        @A7A
         JNZ   MAIN020                 IF RC > 0 ISPF IS INACTIVE  @A7A
         L     R8,ISPFMSGS             MESSAGE CSECT               @A7A
         L     R8,124(,R8)             EMSG31 (4*31)               @A7A
         BRAS  R14,PUTLINE             OUTPUT WARNING MESSAGE      @A7A
MAIN020  DS    0H                                                  @A7A
         BALR  R12,0                                               @B3A
         USING *,R12                                               @B3A
         L     R4,WORKSIZE             GET STORAGE 19362 BYTES FOR @B4A
         GETMAIN R,LV=(R4)             RACF AND INTERNAL TABLES    @B4C
         ST    R1,RACFWORK             SAVE ADDRESS OF WORK AREA   @A1A
         AHI   R1,512                                              @B3A
         ST    R1,DDNTABLE             ADDRESS OF DDNTABLE TABLE   @B3A
         AHI   R1,400                  50 * 8                      @B3A
         ST    R1,MBRTABLE             ADDRESS OF MBRTABLE TABLE   @B3A
         AHI   R1,450                  50 * 9                      @B3A
         ST    R1,DSNTABLE             ADDRESS OF DSNTABLE TABLE   @B4A
         ST    R1,DSNTCURR             CURRENT ADDRESS OF DSNTABLE @B4A
         MVC   0(52,R1),BLANKS         INIT 1ST RNETY TO BLANKS    @B4A
         AHI   R1,16200                300 * 52                    @B4A
         ST    R1,DSNT_END             END OF DSNTABLE TABLE       @B4A
         L     R4,IOBUFSZ              GET STORAGE 32768 BYTES     @B3A
         GETMAIN R,LV=(R4)               FOR INPUT BUFFER          @B3A
         ST    R1,BUFFADDR             SAVE ADDR OF I/O BUFFER
         DROP  R12
         TM    DSNFLAG,DSNDSNM+DSNLGPRC   DSN OR LOGONPRC OPTION   @B4A
         JZ    MAIN030                 NO, BRANCH                  @B4C
         BRAS  R14,PROC_ISPFDSN        PROCESS TYPE-IN PROC        @B4C
         J     MAIN050                                             @B4C
MAIN030  BRAS  R14,PROFILE_ISPFDSN     PROCESS &USER.ISPF.ISPPROF  @B3A
         TM    DSNFLAG,DSNGB4GL                                    @B3A
         JO    MAIN040                                             @B3A
         BRAS  R14,GLOBAL_ISPFDSN    PROCESS SYS1.$ISPFDSN.&SID    @B3A
         OI    DSNFLAG2,DSNPASS1     TURN ON GLOBAL ISPFDSN PASS1  @B4A
MAIN040  BRAS  R14,RACFGRP_ISPFDSN   PROCESS SYS1.$ISPFDSN.&RACFGRP@B3A
         LH    R8,MBRCT                                            @B4A
         LTR   R8,R8                                               @B4A
         JNZ   MAIN045                                             @B4A
         TM    DSNFLAG2,DSNPASS1     ISPFDSN PASS1?                @B4A
         JO    MAIN050                                             @B4A
MAIN045  DS    0H                                                  @B3A
         BRAS  R14,GLOBAL_ISPFDSN    GET GLOBAL MEMBERS NOT IN &RACFGRP
MAIN050  DS    0H                                                  @B3A
         TM    DSNFLAG,DSNLIST         WAS LIST PARM SPECIFIED ?
         JZ    MAIN070                 SKIP LIST MESSAGE IF LIST IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,8(,R8)               MSG02 (4 * 2)
         BRAS  R14,PUTLINE             DISPLAY ISPFDSN COMPLETE
MAIN070  L     R3,RACFWORK             GET ADDR OF FREEMAIN        @A1A
         L     R4,WORKSIZE             SIZE OF FREEMAIN            @B4A
         FREEMAIN R,LV=(R4),A=(R3)     RELEASE WORK AREA           @B4C
         L     R3,BUFFADDR             GET ADDR OF FREEMAIN        @B3A
         L     R4,IOBUFSZ              SIZE OF FREEMAIN            @B3A
         FREEMAIN R,LV=(R4),A=(R3)     RELEASE I/O WORK AREA       @B3A
         SR    R15,R15                 SET RC TO 0
         PR                            RETURN TO TSO
EXIT4    DS    0H                                                  @B4A
         PR                            RETURN TO TSO               @B4A
         EJECT
*---------------------------------------------------------------------*
*                      INITIALIZATION                                 *
*---------------------------------------------------------------------*
INIT_RTN DS    0H
         BAKR  R14,0                   SAVE CALLERS REGS
*---------------------------------------------------------------------*
*        GET MY SYSUID AND RACF GROUP NAME FROM ACCE                  *
*---------------------------------------------------------------------*
         USING PSA,0                         MAP PSA
         L     R2,PSAAOLD                    GET MY ASCB ADDR
         L     R2,ASCBASXB-ASCB(R2)          GET ASXB ADDR
         L     R2,ASXBSENV-ASXB(R2)          GET ACEE ADDR
         MVC   SYSUID(7),ACEEUSRI-ACEE(R2)   GET SYSUID FROM ACEE
         MVC   RACFGRP,ACEEGRPN-ACEE(R2)     GET GROUP FROM ACEE
         LA    R0,C' '                 SET BLANK AS SEARCH STRING  @B4A
         LA    R5,SYSUID                     STARTING SEARCH PTR   @B4A
         LA    R6,SYSUID+7                   ENDING SEARCH PTR     @B4A
SRST1    SRST  R6,R5                                               @B4A
         JC    1,SRST1                 SEARCH UNTIL SPACE IS FOUND @B4A
         SR    R6,R5                         LENGHT OF SYSUID      @B4A
         STH   R6,SYSUIDL                    SAVE LENGTH OF SYSUID @B4A
*---------------------------------------------------------------------*
*        GET CURRENT PREFIX FROM TSO UPT                              *
*---------------------------------------------------------------------*
         L     R2,CPPLADDR                 GET MY CPPL ADDR
         MVC   UPTADDR,CPPLUPT-CPPL(R2)    SAVE UPT ADDR FOR LATER
         MVC   ECTADDR,CPPLECT-CPPL(R2)    SAVE ECT ADDR FOR LATER
         L     R2,CPPLUPT-CPPL(R2)         GET UPT ADDR
         L     R2,PSATOLD                  LOCATE CURRENT TCB      @B4A
         L     R2,TCBTIO-TCB(R2)           LOCATE TIOT  CURRENT TCB@B4A
         MVC   ALOC_MEM,8(R2)              GET TSO PROCEDURE NAME  @B4A
*---------------------------------------------------------------------*
*        PROCESS AND PARSE INPUT PARAMETER                            *
*---------------------------------------------------------------------*
         L     R2,CPPLADDR             GET CPPL ADDR
         MVC   CMDCBUF,CPPLCBUF-CPPL(R2)   COPY ADDRESS OF COMMAND BUF
         BALR  R12,0                                               @B4A
         USING *,R12                                               @B4A
         LA    R1,CMDPPL               PROVIDE LIST FOR PARSE      @A8A
         LINK  EP=IKJPARS              PARSE COMMAND               @A8A
         DROP  R12
         LTR   R15,R15                 PARSE OK ?                  @A8A
         JNZ   INIT_RTN_EXIT           NO, EXIT PROGRAM            @A8A
*---------------------------------------------------------------------*
*        PARSE INPUT PARAMETERS                                       *
*---------------------------------------------------------------------*
         L     R4,CMDANSR              GET POINTER TO ANSWER AREA  @A8A
         USING IKJPARMD,R4             PROVIDE ADDRESSABILITY      @A8A
         LH    R3,IKBYPHSM             GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   BYPHSM ENTERED ?            @A8A
         JZ    INIT2250                                            @A8A
         OI    DSNFLAG,DSNBPHSM        SET BYPASS HSM FLAG         @A8A
INIT2250 DS    0H                                                  @A8A
         LH    R3,IKGR4SYS             GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   BYPHSM ENTERED ?            @A8A
         JZ    INIT2300                                            @A8A
         OI    DSNFLAG,DSNGB4GL        SET ALLOC GROUP B4 GLOBAL   @A8A
INIT2300 DS    0H                                                  @A8A
         LH    R3,IKLIST               GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   LIST ENTERED ?              @A8A
         JZ    INIT2350                                            @A8A
         OI    DSNFLAG,DSNLIST         SET LIST FLAG               @A8A
INIT2350 DS    0H                                                  @A8A
         L     R1,IKSIPREX             ADDRESS ISPFDSN PREFIX      @B3A
         LH    R2,IKSIPREX+4           LENGTH OF ISPFDSN PREFIX    @B3A
         LTR   R2,R2                                               @B3A
         JZ    INIT2370                                            @B3A
         STH   R2,PREFIXL              SAVE LENGTH OF PREFIX       @B4A
         BCTR  R2,0                    SUBTRACT 1 FOR MOVE         @A8A
         EX    R2,MVCPREFX             COPY PREFIX                 @A8A
INIT2370 DS    0H                                                  @A8A
         L     R1,IKSIUSER             ADDRESS OF USER SUFFIX      @B3A
         LH    R2,IKSIUSER+4           LENGTH OF USER SUFFIX       @B3A
         LTR   R2,R2                                               @B3A
         JZ    INIT2400                                            @B3A
         BCTR  R2,0                    SUBTRACT 1 FOR MOVE         @B3A
         EX    R2,MVCUSUFF             COPY USER'S ISPFDSN SUFFIX  @B3A
         OI    DSNFLAG,DSNUSER         SET DSNUSER FLAG            @B3A
INIT2400 DS    0H                                                  @A8A
         LH    R3,IKTRACE              GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   DSNTRACE ENTERED ?          @A8A
         JZ    INIT2500                                            @A8A
         OI    DSNFLAG,DSNTRACE        SET DSNTRACE FLAG           @A8A
INIT2500 DS    0H                                                  @B1A
         LH    R3,IKNRACF              GET KEYWORD INFORMATION     @B1A
         LTR   R3,R3                   NORACF ENTERED ?            @B1A
         JZ    INIT2550                                            @B1A
         OI    DSNFLAG,DSNNRACF        SET NORACF FLAG             @B1A
INIT2550 DS    0H                                                  @B4A
         LH    R3,IKLOGPRC             GET KEYWORD LOGONPRC        @B4A
         LTR   R3,R3                   LOGONPRC ENTERED ?          @B4A
         JZ    INIT2600                                            @B4A
         OI    DSNFLAG,DSNLGPRC        SET LOGON PROC FLAG         @B4A
         J     INIT2800                MUTALLY EXCLUSIVE WITH DSN  @B4A
INIT2600 DS    0H                                                  @A8A
         LH    R3,IKDSN                GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   DSN ENTERED ?               @A8A
         JZ    INIT2800                                            @A8A
         L     R1,IKSIADSN             GET ADDRESS OF DATA SET NAME@A8A
         LH    R2,IKSIADSN+4           GET LENGTH OF DATA SET NAME @A8A
         BCTR  R2,0                    SUBTRACT 1                  @A8A
         EX    R2,MVCPROC              COPY PROC DSNAME            @A8A
INIT2700 DS    0H                                                  @A8A
         LH    R3,IKMEMBER             GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   MEMBER ENTERED ?            @A8A
         JZ    INIT2750                BRANCH IF NO MEMBER NAME    @A8A
         L     R1,IKSIAMEM             GET ADDRESS OF DATA SET NAME@A8A
         LH    R2,IKSIAMEM+4           GET LENGTH OF DATA SET NAME @A8A
         BCTR  R2,0                    SUBTRACT 1                  @A8A
         EX    R2,MVCPROCM             COPY DSN MEMBER             @A8A
         OI    DSNFLAG,DSNDSNM         TURN ON DSN OPTION          @B3A
         J     INIT2800                                            @A8A
INIT2750 L     R8,ISPFMSGS             MESSAGE CSECT               @B3A
         L     R8,60(,R8)              EMSG15 (4*15)               @B3A
         BRAS  R14,PUTLINE             DISPLAY NO MEMBER           @B3A
INIT2800 DS    0H                                                  @A8A
         LH    R3,IKGROUP              GET KEYWORD INFORMATION     @A8A
         LTR   R3,R3                   PRE ENTERED ?               @A8A
         JZ    INIT2900                                            @A8A
         L     R1,IKSIGRP              GET ADDRESS OF GROUP NAME   @A8A
         LH    R2,IKSIGRP+4            GET LENGTH OF GROUP NAME    @A8A
         BCTR  R2,0                    SUBTRACT 1                  @A8A
         EX    R2,MVCGROUP             COPY INPUT GROUP NAME       @A8A
INIT2900 DS    0H
         DROP  R4                                                  @A8A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    INIT_RTN_EXIT           NO.  BRANCH
         L     R8,ISPFMSGS                                         @B3C
         L     R8,164(,R8)             AMSG41  (4*41)              @B3C
         BRAS  R14,PUTLINE             DISPLAY TRACE ACTIVE        @B3C
         L     R8,ISPFMSGS                                         @B3C
         L     R8,168(,R8)             AMSG42  (4*42)              @B3C
         MVC   26(8,R8),RACFGRP        GET RACFGRP
         BRAS  R14,PUTLINE             DISPLAY RACF GROUP          @B3C
         TM    DSNFLAG,DSNLIST         WAS LIST PARM SPECIFIED ?
         JZ    INIT_RTN_EXIT           NO.  BRANCH
         L     R8,ISPFMSGS                                         @B3C
         L     R8,172(,R8)             MSG43  (4*43)               @B3C
         BRAS  R14,PUTLINE             DISPLAY LIST OPTION         @B3C
INIT_RTN_EXIT  DS  0H
         PR                            RETURN TO CALLER
         EJECT                                                     @A8A
*---------------------------------------------------------------------*
*        PROCESS THE &SYSUID.ISPF.ISPPROF($ISPFDSN) OR                *
*                    &SYSUID.ISPF.&USER($ISPFDSN)                     *
*---------------------------------------------------------------------*
PROFILE_ISPFDSN  DS  0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B3A
         MVC   ALOC_DSN(52),BLANKS     INIT TO BLANKS              @B3A
         MVC   ALOC_DSN(8),SYSUID      COPY USERID                 @B3A
         LA    R1,ALOC_DSN             STARTING POSITION           @B4C
         AH    R1,SYSUIDL                                          @B4C
         MVC   0(L'ISPPROF,R1),ISPPROF   COPY .ISPF.ISPPROF        @B3A
         TM    DSNFLAG,DSNUSER         USER SUFFIX SPECIFIED ?     @B3A
         JNO   PROF_CHK_DSN            BRANCH IF NO SUFFIX         @B3A
         MVC   0(10,R1),CISPFDOT       COPY .$ISPFDSN.             @B4C
         MVC   10(8,R1),USERSUFF       COPY USERSUFF               @B4C
PROF_CHK_DSN   DS  0H
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,CHECK_DSNAME        RACHECK AND LOCATE FILE
         LTR   R15,R15                 RC = 0 ?
         JNZ   PROFILE_EXIT0           NO. BRANCH
         MVC   IUSE_DSN,ALOC_DSN       SET NAME OF PDS BEING PROCESSED
         MVC   ALOC_DDN,CTEMPPDS       SET DDNAME TO TEMPPDS       @B3A
         MVC   IUSE_DDN,ALOC_DDN       SET DDNAME IN USE
         LA    R0,ALOC_DDN             GET ADDR OF DDNAME
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        DYNALLOC USER ISPFDSN PDS
         LTR   R15,R15                 RC = 0 ?
         JZ    PROF_OPENPARM           BRANCH IF RC = 0
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PROFILE_EXIT0           SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS             LOAD MESSAGE TABLE          @B3C
         L     R8,176(,R8)             AMSG44  (4*44)              @B3C
         BRAS  R14,PUTLINE             USER ISPFDSN ALLOCATE FAILS @B3A
         J     PROFILE_EXIT0           DELETE MEMBER FROM TABLE
PROF_OPENPARM  DS   0H
         LA    R1,$ISPFDSN             GET ADDR OF $ISPFDSN
         MVC   IUSE_MBR,$ISPFDSN       SET MEMBER TO PROCESS
         LA    R0,TEMPDD               GET ADDR OF DCB
         LA    R2,ALLOCPH              ADDR OF
         BRAS  R14,PROCESS_PDS         GET 1ST RECORD OF $ISPFDSN
         LTR   R15,R15                 MEMBER FOUND ?
         JZ    PROF_GETREC             YES. BRANCH
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PROF_CLOSE_FILE         SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,56(,R8)              EMSG14 (4*14)  MEMBER NOT FIND
         MVC   28(8,R8),$ISPFDSN       PUT MEMBER NAME IN MSG
         MVC   46(8,R8),IUSE_DDN       PUT DDNAME IN MSG
         MVC   61(44,R8),IUSE_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MSG14
         J     PROF_CLOSE_FILE         BRANCH
PROF_GETREC    DS  0H
         BRAS  R14,ISPFDSN_PARMLIB     PROCESS PARMLIB RECORD
         CHI   R15,8                   TERMINATE CURRENT MEMBER ?  @A9A
         JE    PROFILE_EXIT            YES. BRANCH                 @B4C
         LA    R0,TEMPDD               GET ADDR OF DCB
         SR    R1,R1                   INDICATE GET NEXT RECORD
         LA    R2,ALLOCPH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET NEXT RECORD
         LTR   R15,R15                 END OF MEMBER ?
         JZ    PROF_GETREC             NO . LOOP THRU MEMBER
PROF_CLOSE_FILE  DS  0H
         BRAS  R14,CLOSE_TEMPPDS       DEALLOC USER ISPFDSN
PROFILE_EXIT0  DS    0H
         SR    R15,R15                 SET OK RETURN CODE
PROFILE_EXIT   DS    0H
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*        PROCESS &PREFIX.$ISPFDSN.&RACFGRP($ISPFDSN)                  *
*---------------------------------------------------------------------*
RACFGRP_ISPFDSN  DS  0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         LA    R2,ALOC_DSN             GET ADDR OF AREA FOR TEST DSN
         MVC   ALOC_DSN(52),BLANKS     INIT TO BLANKS              @B2A
         MVC   ALOC_DSN(8),PREFIX      COPY PREFIX                 @B2C
         LA    R1,ALOC_DSN             STARTING POSITION           @B3C
         AH    R1,PREFIXL              ADD PREFIX LENGTH           @B3C
         MVC   0(10,R1),CISPFDOT       COPY .$ISPFDSN.             @B4A
         AHI   R1,10                   POINT TO END OF &RACFGRP    @B3C
         MVC   0(8,R1),RACFGRP         COPY &RACFGRP               @B3C
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,CHECK_DSNAME        RACHECK AND LOCATE FILE
         LTR   R15,R15                 RC = 0 ?
         JNZ   RACFGRP_ISPFDSN_EXIT    NO. BRANCH
         MVC   IUSE_DSN,ALOC_DSN       SET NAME OF PDS BEING PROCESSED
         MVC   ALOC_DDN,CTEMPPDS       SET DDNAME TO TEMPDD        @B3A
         MVC   IUSE_DDN,ALOC_DDN       SET DDNAME IN USE
         LA    R0,ALOC_DDN             GET ADDR OF DDNAME
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        ALLOCATE GROUP ISFPDSN
         LTR   R15,R15                 RC = 0 ?
         JZ    GRP_INDEX_MEM           BRANCH IF RC = 0
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    RACFGRP_ISPFDSN_EXIT    SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS
         L     R8,176(,R8)             AMSG44  (4*44)
         MVC   11(5,R8),CGROUP                                     @B4A
         BRAS  R14,PUTLINE             GROUP ISPFDSN ALLOCATION FAILS
         J     RACFGRP_ISPFDSN_EXIT    BRANCH
GRP_INDEX_MEM  DS  0H
         LA    R1,$ISPFDSN             GET ADDR OF $ISPFDSN        @B3A
         SR    R5,R5                   START FROM FIRST MEMBER
         J     GRP_READ_MEM                                        @B4A
GRP_NEXT_MEM   DS  0H
         LA    R0,8                    SET GET NEXT MEMBER CODE
         LR    R1,R5                   GET CURRENT MEMBER ADDR
         BRAS  R14,PROCESS_MEMBER      GET NEXT MEMBER
         LTR   R15,R15                 ANY MEMBERS LEFT ?
         JNZ   GRP_CLOSE_FILE          BRANCH IF NO MEMBER LEFT
         LR    R5,R1                   SAVE MEMBER PLACEHOLDER
GRP_READ_MEM   DS  0H
         MVC   IUSE_MBR,0(R1)          SET MEMBER TO PROCESS
         LA    R0,TEMPDD               GET ADDR OF TEMPDD DCB
         LA    R2,ALLOCPH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET 1ST RECORD
         LTR   R15,R15                 MEMBER FOUND ?
         JZ    GRP_MEMDONE             YES. BRANCH
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    GRP_NEXT_MEM            SKIP TRACE MSG IF TRACE IS OFF
         CLI   IUSE_MBR,X'00'          BLANK MEMBER ?
         JE    GRP_CLOSE_FILE          YES. EXIT
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,56(,R8)              EMSG14 (4*14)
         MVC   28(8,R8),IUSE_MBR       PUT MEMBER NAME IN MSG
         MVC   46(8,R8),IUSE_DDN       PUT DDNAME IN MSG
         MVC   61(44,R8),IUSE_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MEMBER NOT FOUND
         J     GRP_NEXT_MEM            BRANCH
GRP_MEMDONE    DS   0H
         LTR   R5,R5                                               @B4A
         JZ    GRP_GETREC                                          @B4A
         MVI   8(R5),C'Y'              DELETE MEMBER FROM TABLE
GRP_GETREC     DS   0H
         BRAS  R14,ISPFDSN_PARMLIB     PROCESS THIS RECORD
         CHI   R15,8                   TERMINATE CURRENT MEMBER ?  @A9A
         JE    GRP_NEXT_MEM            YES. BRANCH                 @A9A
         LA    R0,TEMPDD               GET ADDR OF DCB TEMPDD
         SR    R1,R1                   INDICATE GET NEXT RECORD
         LA    R2,ALLOCPH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET NEXT RECORD
         LTR   R15,R15                 END OF MEMBER ?
         JZ    GRP_GETREC              NO . LOOP THRU MEMBER
         J     GRP_NEXT_MEM            YES. BRANCH
*
GRP_CLOSE_FILE DS  0H
         BRAS  R14,CLOSE_TEMPPDS       DEALLOC TEMP PDS
*
RACFGRP_ISPFDSN_EXIT DS 0H
         LA    R0,4                    SET DELETE MEMBER NAME
         LA    R1,RACFGRP              GET ADDR OF RACFGRP
         BRAS  R14,PROCESS_MEMBER      DELETE RACFGRP FROM MEMBER TABLE
         SR    R15,R15                 SET OK RETURN CODE
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*        PROCESS &PREFIX.$ISPFDSN.&SID                                *
*---------------------------------------------------------------------*
GLOBAL_ISPFDSN DS 0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         MVC   ALOC_DSN(52),BLANKS     INITIALIZE                  @B2A
         MVC   ALOC_DSN(8),PREFIX      PREFIX                      @B4A
         LA    R1,ALOC_DSN             STASRTING POSITION          @B4C
         AH    R1,PREFIXL                                          @B4C
         MVC   0(10,R1),CISPFDOT       COPY .$ISPFDSN.             @B4C
         L     R15,16                  CVT                         @B4A
         MVC   10(4,R1),CVTSNAME-CVT(R15)  GET SMFID (SYSID)       @B4A
         MVC   ALOC_DDN,CTEMPPDS       SET DDNAME FOR TEMPDD       @B3A
         MVC   IUSE_DDN,ALOC_DDN       SET DDNAME IN USE
         LA    R0,ALOC_DDN             GET ADDR OF DDNAME
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        DYNALLOC PREFIX.ISPFDSN.&SID
         LTR   R15,R15                 RC = 0 ?
         JZ    GLB_1STMEM              YES. SKIP TRACE MESSAGE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,176(,R8)             AMSG44 (4*44)
         MVC   4(6,R8),CGLOBAL                                     @B4A
         BRAS  R14,PUTLINE             GLOBAL ISPFDSN DATASET NOT FOUND
         J     GLOBAL_ISPFDSN_EXIT     BRANCH
GLB_1STMEM     DS   0H
         SR    R5,R5                   START FROM FIRST MEMBER
         LA    R1,$ISPFDSN             PROCESS MEMBER $ISPFDSN     @B3A
         TM    DSNFLAG2,DSNPASS1       FIRST TIME EXECUTE ?        @B4A
         JNO   GLB_PROCPDS             BRANCH IF FIRST TIME        @B4C
*
GLB_NEXTMEM    DS  0H
         LA    R0,8                    SET GET MBR FLAG
         LR    R1,R5                   GET CURRENT MEMBER ADDR
         BRAS  R14,PROCESS_MEMBER      GET A MEMBER
         LTR   R15,R15                 ANY MEMBERS LEFT ?
         JNZ   GLB_CLOSE_FILE          NO. BRANCH
         LR    R5,R1                   SAVE MEMBER PLACEHOLDER
GLB_PROCPDS    DS  0H
         MVC   IUSE_MBR,0(R1)          SAVE NAME OF MEMBER
         MVC   IUSE_DSN,ALOC_DSN       SET NAME OF PDS BEING PROCESSED
         LA    R0,TEMPDD               GET ADDR OF DCB
         LA    R2,ALLOCPH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET 1ST REC
         LTR   R15,R15                 MEMBER FOUND ?
         JZ    GLB_MEM_DONE            BRANCH IF YES
         CLI   IUSE_MBR,X'00'               ??
         JE    GLB_CLOSE_FILE          YES. EXIT
         CLC   IUSE_MBR,$ISPFDSN       MEMBER = $ISPFDSN ?         @B4A
         JNE   GLB_NEXTMEM             YES. BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,76(,R8)              MSG19 (4*19)
         MVI   4(R8),C'G'              ROUTINE FOOTPRINT
         MVC   23(44,R8),IUSE_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY PROCESSING DSN = XXX
         J     GLB_CLOSE_FILE          BRANCH
GLB_MEM_DONE   DS   0H
         LTR   R5,R5                                               @B4A
         JZ    GLB_GET_REC                                         @B4A
         MVI   8(R5),C'Y'              DELETE MEMBER FROM TABLE
         LH    R8,MBRCT                                            @B4A
         AHI   R8,-1                                               @B4A
         STH   R8,MBRCT                                            @B4A
GLB_GET_REC    DS   0H
         BRAS  R14,ISPFDSN_PARMLIB     PROCESS THIS RECORD
         CHI   R15,8                   TERMINATE CURRENT MEMBER ?  @A9A
         JE    GLB_NEXTMEM             YES. BRANCH                 @A9A
         LA    R0,TEMPDD               GET ADDR OF TEMPDD DCB
         SR    R1,R1                   SET GET NEXT RECORD
         LA    R2,ALLOCPH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET NEXT RECORD
         LTR   R15,R15                 END OF MEMBER ?
         JZ    GLB_GET_REC             NO . READ NEXT RECORD
         J     GLB_NEXTMEM             READ NEXT MEMBER
*
GLB_CLOSE_FILE DS 0H
         BRAS  R14,CLOSE_TEMPPDS       DEALLOC TEMPPDS
GLOBAL_ISPFDSN_EXIT DS 0H
         SR    R15,R15                 SET RC TO 0
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*        LOGONPRC AND DSN PROCESSING                                  *
*---------------------------------------------------------------------*
PROC_ISPFDSN   DS  0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B4A
         TM    DSNFLAG,DSNDSNM         DSN KEYWORD ?               @B4A
         JO    PROC_CHK_DSN                                        @B4A
         MVC   ALOC_DSN(44),BLANKS     INIT TO BLANKS              @B4A
         MVC   ALOC_DSN(8),PREFIX      COPY PREFIX                 @B4A
         LA    R1,ALOC_DSN             STARTING POSITION           @B4A
         AH    R1,PREFIXL              ADD PREFIX LENGTH           @B4A
         MVC   0(17,R1),CISPFDOT       COPY .$ISPFDSN.PROCLIB      @B4A
PROC_CHK_DSN   DS  0H
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,CHECK_DSNAME        RACHECK AND LOCATE FILE
         LTR   R15,R15                 RC = 0 ?
         JNZ   PROC_ISPFDSN_EXIT       NO. EXIT
         LA    R0,CTEMPPDS             R0 = ADDR OF DDNAME
         LA    R1,ALOC_DSN             R1 = ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        DYNALLOC ISPFDSN PROCLIB
         LTR   R15,R15                 RC = 0 ?
         JZ    PROC_OPENPARM           YES . BRANCH
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PROC_ISPFDSN_EXIT       EXIT IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,104(,R8)             EMSG26 (4*26)
         MVC   59(44,R8),ALOC_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG26
         J     PROC_ISPFDSN_EXIT       BRANCH
PROC_OPENPARM  DS  0H
         MVC   IUSE_DSN,ALOC_DSN       SET NAME OF PDS BEING PROCESSED
         MVC   IUSE_MBR,ALOC_MEM       SET MBR NAME BEING PROCESSED
         LA    R0,TEMPDD               DCB ADDR OF TEMPDD
         LA    R1,ALOC_MEM             POINT TO MEMBER TO PROCESS
         LA    R2,ADDR_PH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET 1ST RECORD
         LTR   R15,R15                 MEMBER FOUND ?
         JZ    PROC_GETREC             YES. BRANCH
         TM    DSNFLAG,DSNTRACE        DSNTRACE FLAG ON ?
         JZ    PROC_CLOSE_FILE         NO. SKIP TRACE MESSAGE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R1,56(,R8)              EMSG14 (4*14)
         MVC   28(8,R8),ALOC_MEM       PUT MEMBER NAME IN MSG
         MVC   46(8,R8),ALOC_DDN       PUT DDNAME IN MSG           @B3A
         MVC   61(44,R8),ALOC_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG14
         J     PROC_CLOSE_FILE         BRANCH
PROC_GETREC    DS  0H
         BRAS  R14,ISPFDSN_PARMLIB     PROCESS THIS RECORD
         LA    R0,TEMPDD               DCB ADDR OF TEMPDD
         SR    R1,R1                   INDICATE GET NEXT RECORD
         LA    R2,ADDR_PH              ADDR OF PLACEHOLDER
         BRAS  R14,PROCESS_PDS         GET NEXT RECORD
         LTR   R15,R15                 END OF MEMBER ?
         JZ    PROC_GETREC             READ NEXT RECORD
PROC_CLOSE_FILE   DS  0H
         BRAS  R14,CLOSE_TEMPPDS       UN-ALLOC PROC PDS
PROC_ISPFDSN_EXIT DS  0H
         PR                            RETURN
*---------------------------------------------------------------------*
*               PROCESS ISPFDSN RECORDS                               *
*---------------------------------------------------------------------*
* INPUT  R1 -> INPUT RECORD                                           *
*---------------------------------------------------------------------*
* OUTPUT R15 = 0 - ALL OK                                             *
*            = 8 - TERMINATE PROCESSING OF CURRENT MEMBER             *
*---------------------------------------------------------------------*
ISPFDSN_PARMLIB DS 0H
         BAKR  R14,0                                               @B2A
         SR    R15,R15                 ASSUME OK RETURN CODE
         LR    R2,R1                   GET ADDR OF INPUT RECORD
         LR    R5,R1                   GET ADDR OF INPUT RECORD    @B3A
*---------------------------------------------------------------------*
*              PROCESS END OF MEMBER CARD                             *
*---------------------------------------------------------------------*
         CLC   JCLCOMT+1(2),0(R2)      /*  END OF MEMBER CARD ?    @B3A
         JNE   PARM1000                                            @A9A
         LA    R15,8                   SET TERMINATE RET CODE      @A9A
         PR                            EXIT                        @E4C
*---------------------------------------------------------------------*
*              IGNORE COMMENT CARDS AND BLANK RECORD                  *
*---------------------------------------------------------------------*
PARM1000 DS    0H                                                  @A9A
         CLC   JCLCOMT,0(R2)           //*  COMMENT RECORD ?       @B3C
         JE    PARMEXIT                YES. BRANCH
         CLC   JCLCOMT+1(2),0(R2)      /*   COMMENT RECORD ?       @B3C
         JE    PARMEXIT                YES. BRANCH
         CLI   0(R2),C'*'              *    COMMENT RECORD ?       @B3C
         JE    PARMEXIT                YES. BRANCH
         CLC   BLANKS,0(R2)            BLANK RECORD ?
         JE    PARMEXIT                YES. IGNORE IT
*---------------------------------------------------------------------*
*        PROCESS DDNAME                                               *
*---------------------------------------------------------------------*
         DS    0H
         CLC   JCLCOMT(2),0(R2)        // KEYWORD ?                @B3A
         JNE   PARM_CHK_KEYWORD        NO. BRANCH                  @B3A
         LA    R1,2(,R2)               YES. POINT TO DDNAME        @B3A
*---------------------------------------------------------------------*
* OUTPUT  IF DDNAME INVALID THEN SET FLAG DSNDDNF IN DSNFLAG. THIS    *
*         WILL IGNORE ALL THE DSNAMES UNDER THE INVALID DDNAME.       *
*         EXAMPLE : STEPLIB IS INVALID DDNAME AND ALL THE DSNAMES     *
*                   UNDER STEPLIB ARE IGNORED.                        *
*         COPY DDNAME TO CURR_DDN FOR VALID DDNAME.                   *
*---------------------------------------------------------------------*
         CLC   CSTEPLIB,0(R1)          IS DDNAME STEPLIB ?         @B3C
         JE    PARM_INV_DDN            YES. BRANCH
         CLC   CJOBLIB,0(R1)           IS DDNAME JOBLIB ?          @B3C
         JE    PARM_INV_DDN            YES. BRANCH
         CLC   CSTEPCAT,0(R1)          IS DDNAME STEPCAT ?         @B3C
         JE    PARM_INV_DDN            YES. BRANCH
         CLC   CJOBCAT,0(R1)           IS DDNAME JOBCAT ?          @B3C
         JE    PARM_INV_DDN            YES. BRANCH
         CLI   0(R1),C' '                                          @B3A
         JE    PARM_PROCDD                                         @B3A
         LA    R0,C' '                 SET SPACE AS SEARCH STRING  @B3A
         LA    R15,8(R1)               ENDING POSITION             @B3A
SRST0    SRST  R15,R1                  SEARCH A SPACE              @B3A
         JC    1,SRST0                 LOOP UNTIL A SPACE IS FOUND @B3A
         JC    2,PARM_CHK_DDN8         BRANCH IF NOT FOUND         @B3A
         J     PARM_CHK_DDN                                        @B4A
PARM_CHK_DDN8  DS  0H                                              @B4A
         CLI   8(R1),C' '              DDNAME LONGER THAN 8        @B4A
         JNE   PARM_INV_DDN2           BRANCH IF YES               @B4A
PARM_CHK_DDN   DS  0H                                              @B4A
         SR    R15,R1                  GET LENGTH OF DDNAME        @B4A
*        BCTR  R15,0                ??
         MVC   CURR_DDN,BLANKS         INIT TO BLANKS              @B4A
         EX    R15,MVCDDN              CURR_DDN,0(R1)              @B4A
         NI    DSNFLAG2,255-DSNDDNF    RESET FLUSH FLAG
         J     PARM_PROCDD             PROCESS DSNAME              @B3A
*
PARM_INV_DDN   DS  0H
         OI    DSNFLAG2,DSNDDNF        ON FLUSH ALLOCS FLAG
         MVC   CURR_DDN,BLANKS                                     @B4A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PARMEXIT                SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,64(,R8)              EMSG16 (4*16)
         MVC   14(8,R8),0(R1)          PUT DDNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG16
         J     PARMEXIT                SKIP TRACE MSG IF TRACE IS OFF
PARM_INV_DDN2  DS  0H                                              @B4A
         OI    DSNFLAG2,DSNDDNF        ON FLUSH ALLOCS FLAG        @B4A
         MVC   CURR_DDN,BLANKS         INITIALIZE TO BLANKS        @B4A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?             @B4A
         JZ    PARMEXIT                SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,216(,R8)             EMSG54 (4*54)               @B4A
         BRAS  R14,PUTLINE             DISPLAY EMSG54              @B4A
         J     PARMEXIT                                            @B4A
*
*---------------------------------------------------------------------*
*              PROCESS INCLUDE KEYWORDS                               *
*---------------------------------------------------------------------*
PARM_CHK_KEYWORD  DS  0H
         LA    R1,8(0,R2)              ASSUME INCLUDE KEYWORD
         CLC   CINCLUDE,0(R2)          INCLUDE= KEYWORD ?          @B3A
         JNE   PARM_EXCLUDE            NO. BRANCH                  @B4C
         CLC   $ISPFDSN,0(R1)          MEMBER = $ISPFDSN ?         @B4A
         JE    PARM_RSVMEM             BRANCH IF EQUAL             @B4A
         CLI   0(R1),C' '                                          @B4A
         JE    PARM_INVMEM             BRANCH IF EQUAL             @B4A
         SR    R0,R0                   SET ADD INDICATOR
         BRAS  R14,PROCESS_MEMBER      ADD MEMBER TO MEMBER TABLE
         CHI   R15,4                   IS MEMBER ALREADY EXIST?
         JNE   PARM2300                NO. BRANCH
         TM    DSNFLAG,DSNTRACE        TRACE OPTION SPECIFIED?
         JZ    PARM2300                NO SKIP TRACE MSG
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,68(,R8)              EMSG17 (4*17)
         MVC   14(8,R8),0(R1)          YES. PUT MBR NAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG17
PARM2300 DS    0H
         CHI   R15,20                  DUPLICATE ENTRY
         JNE   PARMEXIT                BRANCH IF RC IS NOT 20
         TM    DSNFLAG,DSNTRACE        TRACE OPTION SPECIFIED?
         JZ    PARM2400                NO SKIP TRACE MSG
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,16(,R8)              EMSG04 (4*4)
         MVC   20(8,R8),0(R1)          YES. PUT MBR NAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG04
PARM2400 DS    0H
         CHI   R15,16                  IS TABLE FULL ?
         JNE   PARMEXIT                YES. BRANCH
         L     R8,100(,R8)             EMSG25 (4*25)
         MVC   56(8,R8),0(R1)          YES. PUT MBR NAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY REACH 50 MEMBERS
         J     PARMEXIT                NO. BRANCH
*---------------------------------------------------------------------*
*              PROCESS EXCLUDE KEYWORD                                *
*---------------------------------------------------------------------*
*      ADDS MEMBER NAME TO MEMBER TABLE THEN MARKS IT DELETED.        *
*      THIS WILL PREVENT IT BEING ADDED OR PROCESSED LATER.           *
*---------------------------------------------------------------------*
PARM_EXCLUDE   DS  0H
         CLC   CEXCLUDE,0(R2)          EXCLUDE= KEYWORD ?          @B3A
         JNE   PARMEXIT                NO. BRANCH                  @B3C
         CLC   $ISPFDSN,0(R1)          MEMBER = $ISPFDSN ?         @B4A
         JE    PARM_RSVMEM             BRANCH IF EQUAL             @B4A
         CLI   0(R1),C' '              MEMBER = BLANK  ?           @B4A
         JE    PARM_INVMEM             BRANCH IF EQUAL             @B4A
         SR    R0,R0                   SET ADD MEMBER
         BRAS  R14,PROCESS_MEMBER      ADD MEMBER INTO TABLE
         LA    R1,8(0,R2)              POINT TO MEMBER NAME
         LA    R0,4                    DELETE MEMBER
         BRAS  R14,PROCESS_MEMBER      DELETE MEMBER FROM TABLE
         J     PARMEXIT                BRANCH
PARM_INVMEM    DS  0H                                              @B4A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?             @B4A
         JZ    PARMEXIT                SKIP TRACE IF TRACE IS OFF  @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,200(,R8)             AMSG50 (4*50)               @B4A
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG50       @B4A
         J     PARMEXIT                BRANCH
PARM_RSVMEM    DS  0H                                              @B4A
         TM    DSNFLAG,DSNTRACE+DSNLIST     TRACE OR LIST OPTION   @B4A
         JZ    PARMEXIT                SKIP TRACE MSG IF TRACE OFF @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,20(,R8)              MSG05 (4*49)                @B4A
         BRAS  R14,PUTLINE         DISPLAY $ISPFDSN IS PROHIBITED  @B4A
         J     PARMEXIT                BRANCH
*---------------------------------------------------------------------*
*        PROCESS DD  DSNAME/SYSOUT/TERM/DUMMY                         *
*---------------------------------------------------------------------*
PARM_PROCDD    DS  0H                                              @B4A
         TM    DSNFLAG2,DSNDDNF    ARE WE FLUSHING TILL NEXT DDNAME
         JO    PARMEXIT                YES. BRANCH
         LR    R1,R5                   R1 = INPUT RECORD           @B3A
         BRAS  R14,PROCESS_DD_STMT     PROCESS DSNAME RECORD
PARMEXIT DS    0H
         SR    R15,R15                 SET RC = 0
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*                  PARTITIONED DATASET PROCESSING                     *
*---------------------------------------------------------------------*
* INPUT  R0 =  DCB ADDR                                               *
*        R1 -> MEMBER NAME TO LOCATE                                  *
*           =  0 - GET NEXT RECORD OF CURRENT MEMBER                  *
*        R2 -> PLACE HOLDER CONTROL BLOCK                             *
*---------------------------------------------------------------------*
* OUTPUT R15 = 4   MEMBER NOT FOUND OR EOF ON MEMBER                  *
*            = 0   MEMBER FOUND AND R1 POINTS TO NEXT RECORD          *
*---------------------------------------------------------------------*
PROCESS_PDS DS 0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         BALR  R12,0                   ESTABLISH ADDRESSIBILITY    @B3A
         USING *,R12
         USING PH,R2                   MAP PLACE HOLDER
         LR    R3,R1                   SAVE ADDR OF MEMBER NAME
         LR    R7,R0                   GET ADDR OF PDS DCB
         USING IHADCB,R7               MAP PDS DCB
         TM    DCBOFLGS,DCBOFOPN       IS THE PDS OPEN ?
         JO    PDS0100                 YES. BRANCH
*--------------------------------------------------------------------*
*              LOCATE THE DESIRED MEMBER                             *
*--------------------------------------------------------------------*
         OPEN  ((R7),INPUT)            OPEN THE TEMP DATASET
PDS0100  DS    0H
         LTR   R3,R3                   LOCATE MEMBER ?
         JZ    PDS_GET_RECORD          BRANCH IF ZERO
         FIND  (R7),(R3),D             LOCATE MEMBER
         LTR   15,15                   MEMBER EXIST ?
         JNZ   PROCESS_PDS_EXIT4       NO. BRANCH
         MVC   CURRMEM,0(R3)           SAVE NAME OF MBR BEING PROCESSED
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PDS0300                 NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,196(,R8)             MSG49 (4*49) PROCESS MEMBER
         MVC   22(8,R8),0(R3)          PUT MEMBER NAME IN MSG
         MVC   37(44,R8),ALOC_DSN      PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG49
PDS0300  DS    0H
         LH    R4,DCBBLKSI             GET BLKSIZE OF PDS
         XC    NEXTREC,NEXTREC         FORCE READ OF BLOCK
*--------------------------------------------------------------------*
*              GET NEXT RECORD FROM CURRENT PDS MEMBER               *
*--------------------------------------------------------------------*
PDS_GET_RECORD DS 0H
         L     R4,NEXTREC              GET ADDR OF NEXT RECORD
         LTR   R4,R4                   DO WE NEED NEXT BLOCK ?
         JNZ   PDS_REC_DISPLAY         NO . BRANCH
         L     R4,BUFFADDR             LOAD BUFFER ADDRESS
         READ  DECB,SF,(R7),(R4),'S'   READ A BLOCK INTO BUFFER
         CHECK DECB
*--------------------------------------------------------------------*
*          DETERMINE THE SIZE OF THE BLOCK THAT HAS BEEN READ        *
*--------------------------------------------------------------------*
         LH    R5,DCBBLKSI             GET BLKSIZE OF PDS
         LARL  R6,DECB+16              GET ADDR OF DECB
         L     R6,0(R6)                GET IOB ADDR
         SH    R5,14(,R6)              CALC SIZE OF BLOCK READ
         ST    R5,REMAINS              SAVE COUNT OF BYTES IN BLOCK
*--------------------------------------------------------------------*
*        DISPLAY ISPFDSN RECORD                                      *
*--------------------------------------------------------------------*
PDS_REC_DISPLAY  DS   0H
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PDS_DEBLOCK_REC         NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,152(,R8)             MSG38 (4*38)
         MVC   14(72,R8),0(R4)         COPY INPUT REC TO MSG38
         BRAS  R14,PUTLINE     DISPLAY A RECORD FROM ISPFDSN PARMLIB
PDS_DEBLOCK_REC  DS    0H
         LR    R1,R4                   POINT R1 AT RECORD
         AHI   R4,80                   POINT TO NEXT RECORD IN BLOCK
         ST    R4,NEXTREC              SAVE ADDR OF NEXT RECORD
         L     R5,REMAINS              GET COUNT OF BYTES LEFT IN BLK
         AHI   R5,-80                  CALC # OF BYTES LEFT IN BLOCK
         ST    R5,REMAINS              SAVE NEW BYTE COUNT
         JNZ   PROCESS_PDS_EXIT        BRANCH IF BYES LEFT
         XC    NEXTREC,NEXTREC         END OF BLOCK. FORCE READ
         J     PROCESS_PDS_EXIT        BRANCH NO MORE BYES LEFT
*
*--------------------------------------------------------------------*
*        END OF MEMBER                                               *
*--------------------------------------------------------------------*
PDS_EOFM DS    0H
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    PROCESS_PDS_EXIT4       BRANCH IF OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,148(,R8)             EMSG37 (4*37)
         MVC   18(8,R8),CURRMEM        PUT MEMBER NAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MSG EMSG37 EOF MEMBER
PROCESS_PDS_EXIT4  DS  0H
         LA    R15,4                   SET NON ZERO RETCODE
         PR                            RETURN TO CALLER
PROCESS_PDS_EXIT   DS  0H
         SR    R15,R15                 SET 0 RETURN CODE
         PR                            RETURN TO CALLER            @B2A
         DROP  R2
         DROP  R7
         EJECT
*---------------------------------------------------------------------*
*  R1 ->  INPUT RECORD                                                *
*              PROCESS DSNAME/SYSOUT/TERM/DUMMY                       *
*---------------------------------------------------------------------*
*        PROCESS SYSOUT                                               *
*---------------------------------------------------------------------*
PROCESS_DD_STMT  DS  0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         LR    R3,R1                   GET START OF RECORD ADDR
         CLC   CPROC,10(R3)            PROC ?                      @B3A
         JE    PDD_DSN_EXIT            EXIT IF PROC STATEMENT      @B3A
         CLC   CEXEC,10(R3)            EXEC ?                      @B3A
         JE    PDD_DSN_EXIT            EXIT IF EXEC STATEMENT      @B3A
         LA    R12,5(R3)               START OF SEARCH STRING      @B4A
         LA    R15,71(R3)              END OF SEARCH STRING        @B4A
PDD_FIND_DD    DS    0H                                            @B4A
         CLC   DDJCL,0(R12)            ' DD ' ?                    @B4A
         JE    PDD_ESYSOUT             BRANCH IF EQUAL             @B4A
         AHI   R12,1                   NEXT POSTION                @B4A
         CR    R12,R15                                             @B4A
         JH    PDD_DSN_EXIT                                        @B4A
         J     PDD_FIND_DD                                         @B4A
PDD_ESYSOUT    DS    0H                                            @B4A
         LA    R12,3(,R12)             SAVE POSITION OF DDNAME     @B4A
         LR    R3,R12                  SAVE POSITION OF DDNAME     @B4A
PDD_FSYSOUT    DS    0H                                            @B4A
         CLC   CSYSOUT,0(R12)          ' SYSOUT=' ?                @B3A
         JE    PDD_SYSOUT              BRANCH IF YES               @B4A
         AHI   R12,1                                               @B4A
         CR    R12,R15                 END OF RECORD?              @B4A
         JH    PDD_TERM                BRANCH IF YES               @B4A
         J     PDD_FSYSOUT             NO. BRANCH
PDD_SYSOUT     DS    0H                                            @B4A
         LA    R1,1(,R12)              GET ADDR OF SYSOUT STMT     @B4C
         CLI   7(R1),C'*'              SYSOUT=* ??                 @B4A
         JE    PDD_SYSOUT_ER1          BRANCH IF YES               @B4A
         CLC   CTERM+1(7),9(R1)        TERM=TS                     @B4A
         JE    PDD_SYSOUT_ER2          BRANCH IF YES               @B4A
         BRAS  R14,ALLOC_SYSOUT        PROCESS SYSOUT ALLOCATIONS
         J     PDD_DSN_EXIT            BRANCH
PDD_SYSOUT_ER1 DS    0H                                            @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,208(,R8)             EMSG52 (4*52)               @B4A
         BRAS  R14,PUTLINE             DISPLAY INVALID SYSOUT CLASS@B4A
         J     PDD_DSN_EXIT            BRANCH                      @B4A
PDD_SYSOUT_ER2 DS    0H                                            @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,220(,R8)             EMSG55 (4*55)               @B4A
         BRAS  R14,PUTLINE             DISPLAY INVALID SYSOUT CLASS@B4A
         J     PDD_DSN_EXIT            BRANCH                      @B4A
*---------------------------------------------------------------------*
*              PROCESS TERMINAL ALLOCATIONS                           *
*---------------------------------------------------------------------*
PDD_TERM DS    0H
         LR    R12,R3                  RESTORE R12                 @B3A
PDD_FIND_TERM  DS    0H
         CLC   CTERM,0(R12)            ' TERM=TS,SYSOUT='          @B3A
*                                        1234567890123456
         JE    PDD_TERM_ALOC           BRANCH IF YES               @B4A
         AHI   R12,1                                               @B4A
         CR    R12,R15                 END OF RECORD ?             @B4A
         JH    PDD_DMY                 BRANCH IF YES               @B4A
         J     PDD_FIND_TERM
*---------------------------------------------------------------------*
*        PROCESS DD TERM                                              *
*---------------------------------------------------------------------*
PDD_TERM_ALOC  DS  0H
         MVC   TERM_DDNAME,CURR_DDN    PUT DDNAME IN DYNALLOC      @B4C
         CLC   CSYSOUT+1(7),9(R12)     'SYSOUT='                   @B4A
         MVI   TERM_SYSO,C'X'          ASSUME CLASS X              @B4A
         JNE   PDD_TERM_RETRY                                      @B4A
         CLI   16(R12),C'*'                                        @B4A
         JE    PDD_TERM_RETRY                                      @B4A
         MVC   TERM_SYSO,16(R12)       GET SYSOUT                  @B4A
PDD_TERM_RETRY DS  0H
         LA    R1,TERM_RBP             GET ADDR OF ALLOC PARM LIST
         DYNALLOC                      DYNALLOC THE TERMINAL
         LTR   R15,R15                 RC = 0 ?
         JZ    PDD_TERM_EXIT           YES. BRANCH
         L     R12,RACFWORK
         ST    R15,0(,12)              SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',TERM_ERCD    GET ERROR CODE FROM RB
         ST    R1,4(,12)               SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R1
         ICM   R2,B'0011',TERM_INFO    GET INFO CODE FROM RB
         ST    R2,8(,12)               SAVE RB INFO CODE
         XC    12(4,R12),12(R12)       NO DSNAME
         LA    R4,TERM_DDNAME          GET ADDR OF FAILING DDNANE
         ST    R4,16(,R12)             SAVE ADDR OF FAILING DDNANE
         LA    R5,CDYNALLO             DYNALLOC                    @B3C
         ST    R5,20(,R12)             SAVE DYNALLOC FUNCTION CODE @B3C
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         CLC   X0410,TERM_ERCD         DDNAME IN USE ?             @B3A
         JNE   PDD_TERM_EXIT8          NO.  BRANCH
         LA    R1,TERM_DDNAME          YES. GET DDNAME TO DEALLOC
         BRAS  R14,UN_ALLOCATE         DEALLOC DDNAME
         LTR   R15,R15                 DEALLOC OK ?
         JZ    PDD_TERM_RETRY          YES. RETRY ALLOC
PDD_TERM_EXIT8 DS  0H
         LA    R15,8                   SET DYNALLOC FAILED CODE
         J     PDD_DSN_EXIT
PDD_TERM_EXIT  DS  0H
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?            @B3A
         JZ    PDD_DSN_EXIT            SKIP TRACE IF TRACE IS OFF @B3A
         L     R8,ISPFMSGS             MESSAGE CSECT              @B3A
         L     R8,184(,R8)             MSG46 (4*46)               @B3A
         MVC   29(8,R8),TERM_DDNAME    PUT DDNAME IN MSG          @B3A
         BRAS  R14,PUTLINE             DISPLAY PROCESSING TERM
         XR    R15,R15
         J     PDD_DSN_EXIT            BRANCH
*---------------------------------------------------------------------*
*        PROCESS DD DUMMY KEYWORD                                     *
*---------------------------------------------------------------------*
PDD_DMY  DS    0H
         LR    R12,R3                  RESTORE R12                 @B3A
PDD_DMY_FIND   DS   0H
         CLC   CDUMMY,0(R12)           DD DUMMY KEYWORD ?          @B3A
         JE    PDD_DMY_DDN                                         @B4A
         AHI   R12,1                                               @B4A
         CR    R12,R15                                             @B4A
         JH    PDD_DSN                                             @B4A
         J     PDD_DMY_FIND
PDD_DMY_DDN    DS   0H
         MVC   DMY_TXT_DDN,CURR_DDN    PUT DDNAME IN DYNALLOC
PDD_DMY_RETRY  DS   0H
         LA    R1,DMY_RBP              GET ADDR OF ALLOC PARM LIST
         DYNALLOC                      DYNALLOC TO DUMMY
         LTR   R15,R15                 DYNALLOC OK ?
         JZ    PDD_DMY_EXIT            YES. BRANCH
         L     R12,RACFWORK
         ST    R15,0(,R12)             SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',DMY_ERCD     GET ERROR CODE FROM RB
         ST    R1,4(,R12)              SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R2
         ICM   R2,B'0011',DMY_INFO     GET INFO CODE FROM RB
         ST    R2,8(,R12)              SAVE RB INFO CODE
         XC    12(4,R12),12(R12)       NO DSNAME
         LA    R4,DMY_TXT_DDN          GET ADDR OF FAILING DDNANE
         ST    R4,16(,R12)             SAVE ADDR OF FAILING DDNANE
         LA    R5,CDYNALLO             DYNALLOC                    @B3C
         ST    R5,20(,R12)             SAVE DYNALLOC FUNCTION CODE @B3C
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         CLC   X0410,DMY_ERCD          DDNAME IN USE ?             @B3C
         JNE   PDD_DMY_ERROR           NO.  BRANCH
         LA    R1,DMY_TXT_DDN          YES. GET DDNAME TO DEALLOC
         BRAS  R14,UN_ALLOCATE         DEALLOC DDNAME
         LTR   R15,R15                 DEALLOC OK ?
         JZ    PDD_DMY_RETRY           YES. RETRY ALLOC
PDD_DMY_ERROR  DS  0H
         LA    R15,8                   SET DYNALLOC FAILED CODE
PDD_DMY_EXIT   DS  0H
         J     PDD_DSN_EXIT            BRANCH
*---------------------------------------------------------------------*
*        PROCESS DD DSN KEYWORD                                       *
*---------------------------------------------------------------------*
*  R1 -> INPUT RECORD                                                 *
*---------------------------------------------------------------------*
PDD_DSN  DS    0H
         LR    R12,R3                  RESTORE R12                 @B3A
         NI    DSNFLAG2,255-DSN1DSN    TURN OFF DSN B4 DISP        @B4A
PDD_DSN_DISP   DS   0H
         CLC   CDISP,0(R12)            ' DISP=' ?                  @B3A
         JE    PDD_DSN_DISPS                                       @B4A
         CLC   CDSNE+1(4),0(R12)       'DSN='  ?                   @B4A
         JE    PDD_DSN_DSN1                                        @B4A
         AHI   R12,1                                               @B4A
         CR    R12,R15                                             @B4A
         JH    PDD_DSN_EXIT            NO DISPOSITION              @B4A
         J     PDD_DSN_DISP
PDD_DSN_DISPS  DS  0H
         LA    R8,6(R12)                                           @B4A
         BRAS  R14,DISPOSTN            PROCESS DISP KEYWORD        @B4A
         LTR   R15,R15                 RC = 0                      @B4A
         JNZ   PDD_DSN_EXIT                                        @B4A
         CLC   CDSNE,9(R12)            ',DSN=' ?                   @B3A
         JE    PDD_DSN_DSN2            BRANCH IF YES               @A7A
PDD_DSN_ERROR  DS  0H                                              @A7A
         L     R8,ISPFMSGS             MESSAGE CSECT               @A7A
         L     R8,36(,R8)              EMSG09   (4*9)              @B3A
         MVC   19(60,R8),0(R1)  ?      COPY 1ST 60 BYTES ??        @A7A
         BRAS  R14,PUTLINE             DISPLAY SYNATX ERROR        @A7A
         J     PDD_DSN_EXIT                                        @A7A
PDD_DSN_DSN1   DS   0H                                             @B4A
         LA    R3,4(,R12)              LOCATE DATA SET NAME        @B4A
         OI    DSNFLAG2,DSN1DSN        TURN ON DSN B4 DISP         @B4A
         J     PDD_DSN_TMP                                         @B4A
PDD_DSN_DSN2   DS   0H                                             @B4C
         LA    R3,14(,R12)             LOCATE DATA SET NAME        @B3A
PDD_DSN_TMP    DS   0H                                             @B4A
         LA    R2,TEMP_DSN             GET ADDR OF DSNAME SAVE AREA
         MVC   TEMP_DSN(52),BLANKS     INITIALIASE TO BLANK        @A5C
         TM    DSNFLAG2,DSN1DSN        DSN B4 DISP ?               @B4A
         JO    PDD_DSN_DSNL            YES, GET LENGTH OF DSNAME   @B4A
         CLI   0(R3),C'&&'             & SYMBOLIC USED IN DSNAME ?
         JE    PDD_DSN_GETDS2          NO.  BRANCH
PDD_DSN_DSNL   DS   0H                                             @B4A
         LA    R0,C','                 SET , AS THE SEARCH CHAR    @B4A
         LA    R12,45(R3)              ENDING POSITION             @B4A
SRST2    SRST  R12,R3                  FIND A COMMA                @B4A
         JC    1,SRST2                 LOOP UNTIL COMMA IS FOUND   @B4A
         JC    2,PDD_DSN_GETDS0        BRANCH IF COMMA NOT FOUND   @B4A
         TM    DSNFLAG2,DSN1DSN                                    @B4A
         JNO   PDD_DSN_EXIT                                        @B4A
         CLC   CDISP+1(5),1(R12)       'DISP='                     @B4A
         JNE   PDD_DSN_EXIT                                        @B4A
         CLI   9(R12),C','                                         @B4A
         JE    PDD_DSN_EXIT                                        @B4A
         MVI   0(R12),C' '                                         @B4A
         LA    R8,6(R12)               POINT TO DISP               @B4A
         BRAS  R14,DISPOSTN            PROCESS DISP KEYWORD        @B4A
         LTR   R15,R15                 RC = 0                      @B4A
         JNZ   PDD_DSN_EXIT            BRANCH IF RC NOT ZER0       @B4A
         CLI   0(R3),C'&&'             & SYMBOLIC USED IN DSNAME ?
         JE    PDD_DSN_GETDS2          NO.  BRANCH
PDD_DSN_GETDS0 DS    0H                                            @B4A
         LA    R0,C'('                 SET ( AS THE SEARCH CHAR    @B4A
         LA    R12,45(R3)              ENDING POSITION             @B4A
SRST3    SRST  R12,R3                  FIND A BLANK                @B4A
         JC    1,SRST3                 LOOP UNTIL A ( IS FOUND     @B4A
         JC    2,PDD_DSN_GETDS1        BRANCH IF ( NOT FIND        @B4A
         LA    R0,C')'                 SET ( AS THE SEARCH CHAR    @B4A
         AHI   R12,1                                               @B4A
         CLI   0(R12),C')'             EMPTY MEMBER ?              @B4A
         JE    PDD_DSN_INVMEM          BRANCH IF YES               @B4A
         TM    0(R12),X'F0'            GDG 0 ?                     @B4A
         JO    PDD_DSN_INVMEM          BRANCH IF YES               @B4A
         CLI   0(R12),C'-'             '-' ?                       @B4A
         JE    PDD_DSN_INVMEM          BRANCH IF YES               @B4A
         LA    R15,8(R12)              ENDING POSITION             @B4A
SRST4    SRST  R15,R12                 FIND A )                    @B4A
         JC    1,SRST4                 LOOP UNTIL A ) IS FOUND     @B4A
         JC    2,PDD_DSN_INVMEM        ) NOT FOUND                 @B4A
         SR    R15,R12                 LENGTH OF MEMBER            @B4A
         CHI   R15,9                   MEMBER NAME > 8             @B4A
         JH    PDD_DSN_INVMEM          BRANCH IF YES               @B4A
         AHI   R15,-1                  MINUS 1 FOR EX MOVE         @B4A
         EX    R15,MVCMEMBR            TEMP_MEM(0),0(R12)          @B4A
         LA    R0,C'('                 SET ( AS THE SEARCH CHAR    @B4A
         J     PDD_DSN_GETDSM                                      @B4A
PDD_DSN_GETDS1 DS    0H                                            @B4A
         LA    R0,C' '                 SET   AS THE SEARCH CHAR    @B4A
PDD_DSN_GETDSM DS    0H                                            @B4A
         LA    R12,45(R3)              DSNAME ENDING POSITION      @B4A
SRST5    SRST  R12,R3                  FIND A BLANK OR (           @B4A
         JC    1,SRST5                 LOOP UNTIL IT IS FOUND      @B4A
         JC    2,PDD_DSN_INVDSN        BRANCH IF NOT FOUND         @B4A
         SR    R12,R3                  GET DSNAME LENGTH           @B4A
         AHI   R12,-1                  MINUS 1 FOR EXECUTE MOVE    @B4A
         EX    R12,MVCDSN              TEMP_DSN(0),0(R3)           @B4A
         LA    R0,C'&&'                SET & AS THE SEARCH STRING  @B4A
         LA    R15,TEMP_DSN+1                                      @B4A
         LA    R12,42(R15)                                         @B4A
SRST7    SRST  R12,R15                                             @B4A
         JC    1,SRST7                 LOOP UNTIL CHAR & IS FOUND  @B4A
         JC    2,PDD_DSN_DSNCHK                                    @B4A
         CLC   CSID(5),0(R12)          &SID ?                      @B4A
         JNE   PDD_DSN_INVSM2          BRANCH IF NOT &SID          @B4A
         L     R15,16                  CVT                         @B4A
         MVC   0(4,R12),CVTSNAME-CVT(R15)   GET &SID               @B4A
         J     PDD_DSN_DSNCHK                                      @B4A
PDD_DSN_GETDS2 DS    0H                &SYSUID.XXXXX.XXXX          @B4A
         CLC   CSYSUID,1(R3)           SYSUID ?                    @B4A
         JNE   PDD_DSN_INVSM1          BRANCH IF NOT &SYSUID       @B4A
         LA    R2,TEMP_DSN                                         @B4A
         MVC   0(8,R2),SYSUID          GET SYSUID                  @B4A
         AH    R2,SYSUIDL              POINTS TO 2ND LEVEL QUALI   @B4A
         MVI   0(R2),C'.'                                          @B4A
         AHI   R2,1                                                @B4A
         AHI   R3,8                                                @B4A
         CLC   CSID(5),0(R3)           &SID ?                      @B4A
         JNE   PDD_DSN_GETDS3                                      @B4A
*---------------------------------------------------------------------*
*        RESOLVE SYMBOLIC &SID                                        *
*---------------------------------------------------------------------*
         L     R15,16                  CVT
         MVC   0(4,R2),CVTSNAME-CVT(R15)   GET SMFID
         AHI   R2,4
         AHI   R3,4
PDD_DSN_GETDS3 DS    0H                                            @B4A
         LA    R0,C' '                 SET BLANK AS SEARCH STRING  @B4A
         LA    R12,37(R3)              ENDING POSITION             @B4A
SRST8    SRST  R12,R3                  SEARCH A BLANK              @B4A
         JC    1,SRST8                 LOOP UNTIL A BLANK IS FOUND @B4A
         SR    R12,R3                  GET REMAINING LENGTH        @B4A
         AHI   R12,-1                  MINUS 1 FOR MOVE            @B4A
         EX    R12,MVCLEFT             MOVE REMAINING DSNAME       @B4A
PDD_DSN_DSNCHK DS  0H
         LA    R1,TEMP_DSN             GET ADDR OF DSNAME
         BRAS  R14,CHECK_DSNAME        RACHECK DATASET ?
         LTR   R15,R15                 ACCESS OK ?
         JNZ   PDD_DSN_EXIT            NO.  BRANCH
*DD_DSN_ALLOC  DS  0H                  ALLOCATE THE DATASET        @A5A
         LA    R0,TEMP_DSN             GET ADDR OF DSNAME
         LA    R1,CURR_DDN             GET DDNAME FOR ALLOC
         BRAS  R14,ALLOCATE_DSN        ALLOC OR CONCAT
PDD_DSN_EXIT   DS  0H
         SR    R15,R15                 SET RC TO 0
         PR                                                        @B2A
PDD_DSN_INVSM1 DS    0H                INVALID SYMBOLIC            @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,72(,R8)              EMSG18 (4*18)
         BRAS  R14,PUTLINE             DISPLAY INVALID SYMBOLIC
         J     PDD_DSN_EXIT4           TERMINATE THIS MEMBER
PDD_DSN_INVSM2 DS    0H                INVALID SYMBOLIC            @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,212(,R8)             EMSG53 (4*53)
         BRAS  R14,PUTLINE             DISPLAY INVALID SYMBOLIC
         J     PDD_DSN_EXIT4           TERMINATE THIS MEMBER
PDD_DSN_INVMEM DS  0H                                              @B4A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?             @B4A
         JZ    PDD_DSN_SKPTM1          SKIP TRACE IF TRACE IS OFF  @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,200(,R8)             AMSG50 (4*50)               @B4A
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG50       @B4A
PDD_DSN_SKPTM1 DS  0H                                              @B4A
         J     PDD_DSN_EXIT4           SET RC TO 4                 @B4A
PDD_DSN_INVDSN DS  0H                                              @B4A
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?             @B4A
         JZ    PDD_DSN_EXIT4           SKIP TRACE IF TRACE IS OFF  @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,204(,R8)             AMSG50 (4*51)               @B4A
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG51       @B4A
PDD_DSN_EXIT4  DS  0H                                              @B4A
         LA    R15,4                   SET RC TO 4                 @B4A
         PR                                                        @B4A
         EJECT
*---------------------------------------------------------------------*
*        PROCESS DISPOSTION                                           *
*---------------------------------------------------------------------*
*       INPUT   R8  = ADDR OF DISP                                    *
*       OUTPUT  R15 = 0     DISP=SHR/MOD/OLD                          *
*               R15 = 4     DISP=NEW                                  *
*               R15 = 8     INVALID DISPOSITION                       *
*---------------------------------------------------------------------*
DISPOSTN DS    0H
         BAKR  R14,0                                               @B4A
         CLC   CSHR,0(R8)              DISP=SHR ?                  @B3A
         JNE   DISP_OLD                BRANCH IF NOT EQUAL         @A7A
         MVI   ALC_TXT3+6,X'08'        SET TEXT UNIT TO DISP=SHR   @A7A
         J     DISPOST0                                            @B4A
DISP_OLD DS    0H                                                  @A7A
         CLC   COLD,0(R8)              DISP=OLD ?                  @B3A
         JNE   DISP_MOD                BRANCH IF NOT EQUAL         @A7A
         MVI   ALC_TXT3+6,X'01'        SET TEXT UNIT TO DISP=OLD   @A7A
         J     DISPOST0                                            @B4A
DISP_MOD DS    0H                                                  @B4A
         CLC   CMOD,0(R8)              DISP=MOD ?                  @B4A
         JNE   DISP_NEW                BRANCH IF NOT EQUAL         @B4A
         MVC   ALC_TXT3+6,X'02'        SET TEXT UNIT TO DISP=MOD   @B4A
         J     DISPOST0                                            @B4A
DISP_NEW DS    0H                                                  @A7A
         CLC   CNEW,0(R8)              DISP=NEW ?                  @B3A
         JE    DISPOST4                IGNORE THIS RECORD          @A7A
         L     R8,ISPFMSGS             MESSAGE CSECT               @A7A
         L     R8,40(,R8)              EMSG10   (4*10)             @A7A
         MVC   19(60,R8),0(R1)                                     @A7A
         BRAS  R14,PUTLINE             INVALID DISPOSITION         @A7A
         LA    R15,8                                               @B4A
         PR                                                        @B4A
DISPOST4 DS    0H                                                  @B4A
         LA    R15,4                                               @B4A
         PR                                                        @B4A
DISPOST0 DS    0H                                                  @B4A
         SR    R15,R15                                             @B4A
         PR                                                        @B4A
*---------------------------------------------------------------------*
*                 ALLOCATE (AND CONCATENATE)                          *
*---------------------------------------------------------------------*
*       INPUT   R0 ->  DSNAME                                         *
*               R1 ->  DDNAME                                         *
*---------------------------------------------------------------------*
ALLOCATE_DSN   DS  0H
         BAKR  R14,0                                              @B2A
         LR    R2,R0                   SAVE DSNAME ADDR
         LR    R3,R1                   SAVE DDNAME ADDR
         L     R4,DDNTABLE             CHECK IF ALREADY ALLOC'ED   @B3C
         LA    R5,50                   NO. OF TABLE ELEMENTS       @B3C
ADSN_SEARCH_DD DS  0H
         CLC   0(8,R3),0(R4)           DDNAME ALLOCATED ?
         JE    ADSN_CONCAT             YES. BRANCH TO CONCAT
         CLI   0(R4),X'00'             END OF DDNAME TABLE ?       @B3C
         JE    ADSN_ALC                YES. BRANCH TO ALLOCATE
         LA    R4,8(0,R4)              POINT TO NEXT ENTRY
         BRCT  R5,ADSN_SEARCH_DD       LOOP THRU DDNAME TABLE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,92(,R8)              EMSG23 (4*23)
         BRAS  R14,PUTLINE             50 DDNAMES ARE ALLOCATED
         J     ALLOCATE_DSN_EXIT       EXIT
ADSN_ALC DS    0H                      PRIMARY ALLOCATION
         MVC   ALOC_DDN,0(R3)          DDNAME FOR ALLOCATION
         MVC   ALOC_DSN(52),0(R2)      DSNAME FOR ALLOCATION       @A5C
         LA    R0,ALOC_DDN             GET ADDR OF DDNAME
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        DYNALLOC DATASET
         LTR   R15,R15                 RC = 0 ?
         JNZ   ADSN_ERROR              NO. BRANCH
         MVC   0(8,R4),0(R3)           PUT DDNAME IN TABLE
         PR                            RETURN
ADSN_ERROR     DS  0H                  ERROR HANDLING ROUTINE
         CHI   R0,X'0210'              DATASET IN USE ?            @B3C
         JNE   ADSN_NOT0210            NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,96(,R8)              EMSG24 (4*24)
         MVC   26(8,R8),0(R3)          PUT DDNAME IN MSG
         MVC   31(44,R8),0(R2)         PUT DSNAME IN MSG
         J     ALLOCATE_DSN_EXIT       DISPLAY MSG AND RETURN
ADSN_NOT0210   DS 0H                   UNKNOWN DYNALLOC ERROR
         CHI   R0,X'1708'              LOCATE ERROR ?              @B3C
         JNE   ADSN_NOT1708            NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,80(,R8)              EMSG30 (4*20)
         MVC   37(44,R8),0(R2)         PUT DSNAME IN MSG
         TM    DSNFLAG,DSNLIST+DSNTRACE    LIST OR TRACE ACTIVE ?
         JNZ   ALLOCATE_DSN_EXIT       YES. DISPAY MSG AND RETURN
         PR
ADSN_NOT1708   DS 0H                   CHECK DYNALLOC ERROR CODE
         CHI   R0,X'0410'              DDNAME IN USE . SKIP IT     @B3C
         JNE   ADSN_NOT0410            NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,180(,R8)             EMSG45 (4*45)
         MVC   6(8,R8),0(R3)           PUT DDNAME IN MSG
         TM    DSNFLAG,DSNLIST+DSNTRACE    LIST OR TRACE ACTIVE ?
         JNZ   ALLOCATE_DSN_EXIT       YES. DISPLAY MSG AND RETURN
         PR                            RETURN
ADSN_NOT0410   DS 0H                   CHECK DYNALLOC ERROR CODE
         CHI   R0,X'0420'              DATASET OPEN. SKIP IT       @B3C
         JNE   ADSN_NOT0420            NO.  BRANCH                 @A7C
         PR                            RETURN
ADSN_NOT0420   DS 0H                   CHECK DYNALLOC ERROR CODE   @A7A
         CHI   R0,X'035C'              INVALID PARM. SKIP IT       @B3A
         JNE   ADSN_UNKNOWN_ERROR      NO.  BRANCH                 @A7A
         CLI   0(R3),X'00'             BLANK DDNAME ?              @A7A
         JNE   ADSN_INV_PARM           NO.  BRANCH                 @A7A
         L     R8,ISPFMSGS             MESSAGE CSECT               @A7A
         L     R8,132(,R8)             EMSG33 (4*33) BLANK DDNAME  @A7A
         MVC   26(9,R8),0(R3)          PUT DDNAME IN MSG           @A7A
         MVC   31(44,R8),0(R2)         PUT DSNAME IN MSG           @A7A
         J     ALLOCATE_DSN_EXIT
ADSN_INV_PARM  DS  0H                                              @A7A
         TM    DSNFLAG,DSNTRACE                                    @B4A
         JO    ALLOCATE_DSN_EXIT                                   @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4C
         L     R8,128(,R8)             EMSG32 (4*32) INVALID PARM  @B4C
         MVC   26(8,R8),0(R3)          PUT DDNAME IN MSG           @B4C
         MVC   41(44,R8),0(R2)         PUT DSNAME IN MSG           @B4C
         J     ALLOCATE_DSN_EXIT
ADSN_UNKNOWN_ERROR   DS   0H           UNKNOWN DYNAMIC ALLOCATION ERROR
         LR    R7,R0                   SAVE DYNALLOC ERROR CODE
         LR    R5,R1                   SAVE DYNALLOC INFO CODE
         LR    R6,R15                  SAVE DYNALLOC RET CODE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,48(,R8)              EMSG12 (4*12)
         MVC   4(8,R8),CALLOCAT        ALLOCATE FUNCTION NAME      @B3A
         MVC   29(8,R8),0(R3)          PUT DDNAME IN EMSG12
         MVC   42(44,R8),0(R2)         PUT DSNAME IN EMSG12
         BRAS  R14,PUTLINE             DISPLAY
         LR    R0,R6                   GET RETURN CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,52(,R8)              EMSG13 (4*13)
         MVC   10(4,R8),OUTSTRNG       PUT RET CODE IN EMSG13
         LR    R0,R7                   GET ERROR CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         ST    R0,28(R8)               PUT ERROR CODE IN EMSG13
         LR    R0,R5                   GET INFO CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         ST    R0,48(R8)               PUT INFO CODE IN MSG
         BRAS  R14,PUTLINE             DISPLAY ERROR MESSAGE EMSG13
         ABEND 100,DUMP                USER ABEND 100
*
ADSN_CONCAT    DS   0H                 CONCAT TO EXISTING DDNAME
         LA    R1,CISPTABL             ASSUME ERROR                @B3A
         CLC   CISPTABL,0(R3)          IS DDNAME=ISPTABL ?         @B3A
         JE    ADSN_CONCAT_ERROR       YES. BRANCH
         LA    R1,ISPPROF              ASSUME ERROR
         CLC   ISPPROF,0(R3)           IS DDNAME=ISPPROF ?
         JE    ADSN_CONCAT_ERROR       YES. BRANCH
         LA    R1,CURR_DDN             LOAD DDNAME ADDRESS         @B4A
         L     R3,DSNTABLE             LOAD ADDRESS OF DSNTABLE    @B4A
ADSN_DUP_CHK   DS   0H                 CHECK DUPLICATE DSNAME      @B4A
         CLI   8(R3),X'40'             END OF DSNTABLE ?           @B4A
         JE    ADSN_DUP_CHK_EXIT       BRANCH IF YES               @B4A
         CLC   0(8,R1),0(R3)           DDNAME FIND ??              @B4A
         JNE   ADSN_DUP_CHK_NEXT       NOT MATCH TRY NEXT ENTRY    @B4A
         CLC   0(44,R2),8(R3)          DSNAME FIND ??              @B4A
         JE    ADSN_CONCAT_ERROR       BRANCH IF DSNAME MATCH      @B4A
ADSN_DUP_CHK_NEXT   DS  0H             LOCATE NEXT DSNTABLE ENTRY  @B4A
         AHI   R3,52                   NEXT DSNTABLE ENTRY         @B4A
         J     ADSN_DUP_CHK            END LOOP THRU ALL DSNAME    @B4A
ADSN_DUP_CHK_EXIT   DS  0H                                         @B4A
         MVC   ALOC_DDN,$ISPFDSN       DDNAME FOR ALLOCATION
         MVC   ALOC_DSN,0(R2)          DSNAME FOR ALLOCATION
         LA    R0,ALOC_DDN             GET ADDR OF DDNAME
         LA    R1,ALOC_DSN             GET ADDR OF DSNAME
         BRAS  R14,DYN_ALLOCATE        DYNALLOC CONCAT
         LTR   R15,R15                 RC = 0 ?
         JNZ   ADSN_CONCAT_ERROR       BRANCH IF RC IS NOT 0
         MVC   CON_DDN,0(R3)           PUT DDN IN PARM LIST
         LA    R1,CON_RBP              GET ADDR OF ALLOC PARM LIST
         DYNALLOC                      CONCAT
         LTR   R15,R15                 RC = 0 ?
         JZ    ADSN_CONCAT_OK          YES. BRANCH
         L     R12,RACFWORK
         ST    R15,0(,R12)             SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',CON_ERCD     GET ERROR CODE FROM RB
         ST    R1,4(,R12)              SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R1
         ICM   R2,B'0011',CON_INFO     GET INFO CODE FROM RB
         ST    R2,8(,R12)              SAVE RB INFO CODE
         XC    12(4,R12),12(R12)       NO DSNAME
         LA    R5,CCONCAT              CONCAT FUNCTION             @B3C
         ST    R4,16(,R12)             SAVE ADDR OF DDNAME         @B3C
         ST    R5,20(,R12)             FUNCTION IN ERROR           @B3C
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         SR    R0,R0                   CLEAR R0
         ICM   R0,B'0011',CON_ERCD     GET ERROR CODE FROM RB
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',CON_INFO     GET INFO CODE FROM RB
         LA    R15,4                   SET RC = 4
         PR                                                       @B2A
*
ADSN_CONCAT_OK DS   0H
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    ADSN_SKIPTRC2           SKIP TRACE IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,32(,R8)              AMSG08 (4*8)
         MVC   23(8,R8),0(R4)          PUT DDNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG08
ADSN_SKIPTRC2  DS   0H
         SR    R15,R15                 SET OK RETURN CODE
         PR                            RETURN
ADSN_CONCAT_ERROR  DS  0H
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,44(,R8)              MSG11 (4*11)
         MVC   13(8,R8),0(R3)          PUT DDNAME IN MSG           @B2A
         MVC   57(44,R8),0(R2)         PUT DSN IN MSG              @B4C
ALLOCATE_DSN_EXIT  DS  0H
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG11
         PR                            RETURN                      @B2A
         EJECT
*---------------------------------------------------------------------*
*              PROCESS SYSOUT STATEMENTS                              *
*---------------------------------------------------------------------*
*        INPUT  R1 -> SYSOUT                                          *
*---------------------------------------------------------------------*
*        OUTPUT R15 = 0  DYNALLOC OK                                  *
*                   = 8  DYNALLOC FAILED                              *
*---------------------------------------------------------------------*
ALLOC_SYSOUT DS 0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
*
         MVC   SO_DDN,CURR_DDN         PUT DDNAME IN DYNALLOC
         AHI   R1,7                    GET ADDR OF SYSOUT CLASS    @B3C
         MVC   SO_CLASS,0(R1)          PUT SYSOUT CLASS IN DYNALLOC
         AHI   R1,2                    POINT TO DEST (IF PRESENT)  @A7C
         CLC   CDEST,0(R1)             DEST( KEYWORD HERE ?        @B3C
         JNE   SOUT1200                NO.  BRANCH
*                                      YES. EXTRACT DEST
         MVC   SO_TXTS3,ASO_TXT3       ACTIVATE DEST TEXT UNIT     @B3C
         MVC   SO_DEST,BLANKS          CLEAR DEST FIELD
         LA    R3,8                    MAX 8 CHARS FOR DEST
         LA    R4,SO_DEST              TARGET
         LA    R5,5(0,R2)              SOURCE
SOUT1000 DS    0H
         CLI   0(R5),C')'              END OF DEST ?
         JE    SOUT1200                YES. BRANCH
         MVC   0(1,R4),0(R5)           EXTRACT A DEST CHAR
         AHI   R4,1                    INCREMENT TARGET
         AHI   R5,1                    INCREMENT SOURCE
         BRCT  R3,SOUT1000             LOOP FOR 8 CHARS
SOUT1200 DS    0H
         LA    R1,SO_RBP               SYSOUT REQUEST BLOCK
         DYNALLOC
         LTR   R15,R15                 DYNALOLOC OK ?
         JZ    SOUT1600                YES. BRANCH
         L     R12,RACFWORK
         ST    R15,0(,R12)             SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',SO_ERCD      GET ERROR CODE FROM RB
         ST    R1,4(,R12)              SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R1
         ICM   R2,B'0011',SO_INFO      GET INFO CODE FROM RB
         ST    R2,8(,R12)              SAVE RB INFO CODE
*        SR    R3,R3                   NO DSNAME
         XC    12(4,R12),12(R12)       NO DSNAME
         LA    R4,SO_DDN               GET ADDR OF FAILING DDNANE
         ST    R4,16(,R12)             SAVE ADDR OF FAILING DDNAME
         LA    R5,CDYNALLO             DYNALLOC                    @B3C
         ST    R5,20(,R12)             SAVE DYNALLOC FUNCTION CODE
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         CLC   X0410,SO_ERCD           DDNAME IN USE ?             @B3C
         JNE   SOUT1400                NO.  BRANCH
         LA    R1,SO_DDN               YES. GET DDNAME TO DEALLOC
         BRAS  R14,UN_ALLOCATE         DEALLOC DDNAME
         LTR   R15,R15                 DEALLOC OK ?
         JZ    SOUT1200                YES. RETRY ALLOC
*
SOUT1400 DS    0H
         LA    R15,8                   SET DYNALLOC FAILED CODE
         PR
*
SOUT1600 DS    0H
         XC    SO_TXTS3,SO_TXTS3       RESET DE-ACTIVATE DEST TEXT UNIT
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?             @B3A
         JZ    ALLOC_SYSOUT_EXIT       SKIP TRACE IF TRACE IS OFF  @B3A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B3A
         L     R8,188(,R8)             MSG47 (4*47)                @B3A
         MVC   31(8,R8),SO_DDN         PUT DDNAME IN MSG           @B3A
         BRAS  R14,PUTLINE             DISPLAY PROCESSING SYSOUT   @B3A
         XR    R15,R15                                             @B3A
ALLOC_SYSOUT_EXIT DS 0H
         PR                            RETURN TO CALLER            @B2A
*
         EJECT
*---------------------------------------------------------------------*
*              DYNAMICALLY ALLOCATE A DATASET                         *
*---------------------------------------------------------------------*
*              INPUT   R0 -> DDNAME FOR ALLOCATE                      *
*                      R1 -> DSNAME AND MEMBER FOR ALLOCATE           *
*---------------------------------------------------------------------*
*              OUTPUT  R15 = 00   ALLOCATE OK                         *
*                          = 04   ALLOCATE FAILED                     *
*                      R0  = DYNALLOC ERROR CODE                      *
*                      R1  = DYNALLOC INFO CODE                       *
*---------------------------------------------------------------------*
DYN_ALLOCATE   DS   0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         LR    R2,R0                   GET ADDR OF DDNAME
         MVC   ALC_DDNAME,0(R2)        PUT DDNAME IN ALLOC PARM LIST
         MVC   ALC_DSNAME,0(R1)        PUT DSN IN ALLOC PARM LIST
         MVC   ALC_MEMBER,44(R1)       PUT MEM IN ALLOC PARM LIST  @A5A
         MVI   ALC_TXTS+12,X'80'       INDICATE PDS MEM ALLOCATION @A5A
         MVI   ALC_TXTS+8,X'00'        CLEAR DSN ALLOCATION        @A5A
         CLI   ALC_MEMBER,C' '         MEMBER SPECIFIED            @A5A
         JNE   ALLC2000                BRANCH IF DSN ALLOCATION    @A5A
         MVI   ALC_TXTS+8,X'80'        INDICATE DSN ALLOCATION ONLY@A5A
         MVI   ALC_TXTS+12,X'00'       CLEAR PDS MEM ALLOCATION    @A5A
ALLC2000 DS    0H
         LA    R1,ALC_RBP              ADDR OF ALLOCATION RB
         DYNALLOC
         LTR   R15,R15                 DYNALOLOC OK ?
         JZ    ALLC4000                BRANCH IF RC = 0
         L     R12,RACFWORK
         ST    R15,0(,R12)             SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',ALC_ERCD     GET ERROR CODE FROM RB
         ST    R1,4(,R12)              SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R1
         ICM   R2,B'0011',ALC_INFO     GET INFO CODE FROM RB
         ST    R2,8(,R12)              SAVE RB INFO CODE
         LA    R3,ALC_DSNAME           GET ADDR OF FAILING DSNANE
         ST    R3,12(,R12)             SAVE ADDR OF FAILING DSNANE
         LA    R4,ALC_DDNAME           GET ADDR OF FAILING DDNANE
         ST    R4,16(,R12)             SAVE ADDR OF FAILING DDNANE
         LA    R5,CDYNALLO             DYNALLOC                   @B3C
         ST    R5,20(,R12)             SAVE DYNALLOC FUNC CODE    @B3C
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         CLC   X0410,ALC_ERCD          DDNAME IN USE ?            @B3C
         JNE   ALLC6000                NO.  BRANCH
         LA    R1,ALC_DDNAME           YES. GET DDNAME TO DEALLOC
         BRAS  R14,UN_ALLOCATE         DEALLOC DDNAME
         LTR   R15,R15                 DEALLOC OK ?
         JZ    ALLC2000                YES. RETRY ALLOC
         OI    DSNFLAG2,DSNDDNF        FLUSH ALLOCS FOR THIS DDNAME
         TM    DSNFLAG,DSNTRACE+DSNLIST   LIST OR TRACE ACTIVE ?
         JZ    ALLC3000                NO . SKIP MSGS
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,24(,R8)              MSG06 (4*6)
         MVC   46(8,R8),ALC_DDNAME     PUT DDNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MSG06
ALLC3000 DS    0H
         SR    R0,R0                   CLEAR R0
         ICM   R0,B'0011',UA_ERCD      GET ERROR CODE FROM RB
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',UA_INFO      GET INFO CODE FROM RB
         LA    R15,4                   SET DYNALLOC ERROR RET CODE
         PR                            RETURN TO CALLER            @B2A
*
ALLC4000 DS    0H
         CLI   CURR_DDN,C' '                                       @B4A
         JE    ALLC4500                                            @B4A
         L     R8,DSNTCURR             CURRENT ADDRESS OF DSNTABLE @B4A
         MVC   0(L'ALC_DDNAME,R8),CURR_DDN                         @B4A
         MVC   8(L'ALC_DSNAME,R8),ALC_DSNAME                       @B4A
         AHI   R8,52                   POINT TO NEXT ENTRY         @B4A
         C     R8,DSNT_END             END OF DSNTABLE ?           @B4A
         JH    ALLC5000                YES, DENIED THE REQUEST     @B4A
         ST    R8,DSNTCURR             SAVE CURRENT ADDRESS        @B4A
         MVC   0(52,R8),BLANKS         INIT NEXT ENTRY TO BLANKS   @B4A
ALLC4500 DS    0H
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    ALLC9000                NO. SKIP TRACE MESSAGE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,28(,R8)              MSG07 (4*7)
         MVC   20(L'ALC_DDNAME,R8),ALC_DDNAME   PUT DDNAME IN MSG  @B4C
         MVC   35(L'ALC_DSNAME,R8),ALC_DSNAME   PUT DSNAME IN MSG  @B4C
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG07
         J     ALLC9000                BRANCH
*
ALLC5000 DS    0H                                                  @B4A
         L     R8,ISPFMSGS             MESSAGE CSECT               @B4A
         L     R8,192(,R8)             MSG48 (4*48)                @B4A
         BRAS  R14,PUTLINE             DISPLAY MESSAGE MSG48       @B4A
         LA    R15,4                   SET DYNALLOC ERROR RET CODE @B4A
         PR                            RETURN TO CALLER            @B4A

ALLC6000 DS    0H
         SR    R0,R0                   CLEAR R1
         ICM   R0,B'0011',ALC_ERCD     GET ERROR CODE FROM RB
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',ALC_INFO     GET INFO CODE FROM RB
         LA    R15,4                   SET DYNALLOC ERROR RET CODE
         PR                            RETURN TO CALLER            @B2A
*
ALLC9000 DS    0H
         SR    R15,R15                 SET OK RETURN CODE
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*              CLOSE TEMPDD                                           *
*---------------------------------------------------------------------*
* INPUT        R1 -> DDNAME TO CLOSE AND UN-ALLOCATE                  *
*---------------------------------------------------------------------*
CLOSE_TEMPPDS  DS    0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B4A
         BALR  R12,0                                               @B4A
         USING *,R12
         CLOSE TEMPDD                  CLOSE TEMPDD                @B4A
         DROP  R12
         LA    R1,CTEMPPDS             SET DDNAME TO TEMPDD        @B4A
         J     DYN_UN_MAIN                                         @B4A
*---------------------------------------------------------------------*
*              DYNAMIC UN-ALLOCATE DDN                                *
*---------------------------------------------------------------------*
* INPUT        R1 -> DDNAME TO DEALLOC                                *
*---------------------------------------------------------------------*
* OUTPUT       R15  = 0     UNALLOC OK                                *
*                   = 4     UNALLOC FAILED                            *
*---------------------------------------------------------------------*
UN_ALLOCATE    DS   0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
DYN_UN_MAIN    DS   0H
         LR    R2,R1                   LOAD DDNAME PTR
         TM    DSNFLAG,DSNTRACE        TRACE FLAG ON ?
         JZ    DYN_UN_SKIPTM1          SKIP TRACE MSG IF TRACE IS OFF
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,156(,R8)             MSG39 (4*39)
         MVC   26(8,R8),0(R2)          PUT DDNAME IN MSG
         BRAS  R14,PUTLINE             ISSUE DEALLOC MESSAGE
DYN_UN_SKIPTM1 DS   0H
         MVC   UA_DDNAME,0(R2)         PUT DDNAME IN DYNALLOC LIST
         LA    R1,UA_RBP               GET ADDR OF RB POINTER
         DYNALLOC                      UN-ALLOCATE THE DDNAME
         LTR   R15,R15                 RC = 0 ?
         JZ    UN_ALLOCATE_EXIT        YES. BRANCH
         L     R12,RACFWORK
         ST    R15,0(,R12)             SAVE DYNALLOC ERROR CODE
         SR    R1,R1                   CLEAR R1
         ICM   R1,B'0011',UA_ERCD      GET ERROR CODE FROM RB
         ST    R1,4(,R12)              SAVE RB ERROR CODE
         SR    R2,R2                   CLEAR R2
         ICM   R2,B'0011',UA_INFO      GET INFO CODE FROM RB
         ST    R2,8(,R12)              SAVE RB INFO CODE
*        SR    R3,R3                   DONT KNOW FAILING DSNAME
         XC    12(4,R12),12(R12)       NO DSNAME
         LA    R4,UA_DDNAME            GET ADDR OF FAILING DDNANE
         ST    R4,16(,R12)             SAVE ADDR OF FAILING DDNAME
         LA    R5,CDEALLOC             FUNCTION NAME IN ERROR      @B3A
         ST    R5,20(,R12)             SAVE DYNALLOC ERROR CODE
         BRAS  R14,DYN_ERROR_MSG       FORMAT DYNAMIC ERROR MESSAGE
         LA    R15,4                   SET RC =04
UN_ALLOCATE_EXIT DS 0H
         PR                            RETURN
         EJECT
*---------------------------------------------------------------------*
*              FROMAT DYNAMIC ALLOCATION ERROR CODE                   *
*---------------------------------------------------------------------*
*     INPUT   R12 = ADDRESS OF PARAMETER                              *
*               0 = DYNALLOC RETURN CODE  (R15 FROM DYNALLOC)         *
*               4 = DYNALLOC ERROR  CODE                              *
*               8 = DYNALLOC REASON CODE                              *
*              12 = DSNAME ADDRESS                                    *
*              16 = DDNAME ADDRESS                                    *
*              20 = FUNCTION IN ERROR                                 *
*---------------------------------------------------------------------*
DYN_ERROR_MSG  DS    0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         TM    DSNFLAG,DSNTRACE        DSNTRACE OR LIST ACTIVE ?
         JZ    DYNE9000                NO.  BRANCH
         LM    R0,R5,0(R12)
         CHI   R0,8                    RC = 8 ?
         JE    DYNE5000                YES. BRANCH
         CHI   R0,12                   RC = 12 ?
         JE    DYNE1000                YES. BRANCH
*                                      RC = 4
*        BRAS  R14,DYNE0200            DISPLAY ERROR MSGS
*---------------------------------------------------------------------*
*       FORMAT AND DISPLAY DYNAMIC ALLOCATION ERROR MSGS              *
*---------------------------------------------------------------------*
         MVC   FAILDSN,12(R12)         SAVE ADDR OF DSN            @B3C
         MVC   FAILDDN,16(R12)         SAVE ADDR OF DDN            @B3C
         LR    R3,R1                   GET DYNALLOC ERROR CODE
         SRL   R3,8                    GET 2ND BYTE
         CHI   R3,23                   LOCATE ERROR ?
         JNE   DYNE0500                NO . UNKNOWN ERROR
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,160(,R8)             EMSG40 (4*40)
         BRAS  R14,PUTLINE             DISPALY DATASET LOCATE ERROR
DYNE0500 DS    0H
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,48(,R8)              EMSG12 (4*12)
         MVC   4(8,R8),0(R5)           PUT FUNCTION NAME IN MSG
         L     R5,FAILDDN              GET ADDR OF FAILING DDNAME
         MVC   29(8,R8),0(R5)          PUT DDNAME IN MSG
         MVC   43(44,R8),BLANKS        CLEAR DSNAME IN MSG
         ICM   R5,B'1111',FAILDSN      GET ADDR OF FAILING DDNAME
         JZ    DYNE0600                BRANCH
         MVC   43(44,R8),0(R5)         PUT DSNAME IN MSG
DYNE0600 DS    0H
         BRAS  R14,PUTLINE             DISPLAY EMSG12
         L     R0,0(,R12)              GET RETURN CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,52(,R8)              EMSG13 (4*13)
         MVC   10(4,R8),OUTSTRNG       RETURN CODE IN MSG
         L     R0,4(,R12)              GET RB ERROR CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         ST    R0,29(R8)               PUT ERROR CODE IN MSG
         L     R0,8(,R12)              GET RB INFO CODE
         BRAS  R14,HEX2CHAR            CONVERT HEX TO CHAR
         ST    R0,48(R8)               PUT INFO CODE IN MSG
         BRAS  R14,PUTLINE             DISPLAY EMSG13
*              R15 = XXXX  ERROR CODE = XXXX REASON CODE = XXXX
         L     R8,ISPFMSGS             GET ADDR OF MSG00
         L     R8,0(,R8)               MSG00
         BRAS  R14,PUTLINE             DISPLAY MSG MSG00
         J     DYNE9000                BRANCH
DYNE1000 DS    0H
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,48(,R8)              EMSG12 (4*12)
         MVC   4(8,R8),0(R5)           PUT FUNCTION IN MSG
         MVC   29(8,R8),0(R4)          PUT DDNAME IN MSG
         MVC   43(44,R8),0(R3)         PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             DISPLAY MSG12
*        LR    R0,R1                   GET ERROR CODE
         L     R0,4(R12)               GET ERROR CODE
         BRAS  R14,HEX2CHAR            CONVERT TO CHARACTER
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,52(,R8)              EMSG13 (4*13)
         MVC   10(4,R8),C0012          PUT RET CODE IN MSG
         ST    R0,28(R8)               PUT ERROR CODE IN MSG
         LR    R0,R2                   GET INFO CODE
         BRAS  R14,HEX2CHAR            CONVERT TO CHARACTER
         ST    R0,48(R8)               PUT INFO CODE IN MSG
         BRAS  R14,PUTLINE             WRITE MESSAGE EMSG13
*        L     R8,ISPFMSGS             MESSAGE CSECT
*        L     R8,12(,R8)              MSG03 (4*3)
*        L     R15,FAILDSN                                        @B4A
*        MVC   44(33,R8),0(R15)        GET DSNAME                 @B4A
*        BRAS  R14,PUTLINE             DISPLAY MSG MSG03
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,136(,R8)             EMSG34 (4*34)
         BRAS  R14,PUTLINE     DISPLAY DYNAMIC ALLOCATION PARM ERROR
         J     DYNE9000                BRANCH
DYNE5000 DS    0H
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,140(,R8)             EMSG35 (4*35)
         BRAS  R14,PUTLINE     DISPLAY RETURN CODE 08 FROM DYNALLOC
DYNE9000 DS    0H
         SR    R15,R15                 RC = 0
         PR                            RETURN TO CALLER            @B2A
         EJECT
*---------------------------------------------------------------------*
*         VERIFY A DATASET EXISTS AND USER HAS READ ACCESS TO IT      *
*---------------------------------------------------------------------*
*       INPUT   R1 -> DSNAME                                          *
*---------------------------------------------------------------------*
*       OUTPUT  R15 =  0 = DATASET EXISTS AND CAN BE READ             *
*               R15 =  4 = DATASET NOT CATALOGED                      *
*               R15 =  8 = DATASET NOT ON VOLUME                      *
*               R15 = 12 = NO READ ACCESS TO DATASET                  *
*---------------------------------------------------------------------*
CHECK_DSNAME DS 0H
         BAKR  R14,0                   SAVE REGISTERS             @B2A
         LR    R2,R1                   SAVE DSNAME POINTER
         L     R3,RACFWORK                                         @A1A
*---------------------------------------------------------------------*
*              CHECK FOR READ AUTHORITY TO DATASET                    *
*---------------------------------------------------------------------*
         TM    DSNFLAG,DSNNRACF        NO RACF CHECK ??            @B1A
         JO    CHKD0100                                            @B1A
         TM    DSNFLAG,DSNTRACE        TRACE OPTION ??
         JZ    CHKD0050                NO. SKIP TRACE MESSAGE
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,76(,R8)              MSG19 (4*19)
         MVI   4(R8),C'R'              SET ROUTINE INDICATOR
         MVC   23(44,R8),0(R2)         PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             WRITE MESSAGE AID022I
CHKD0050 DS    0H
         BALR  R12,0                                               @B3A
         USING *,R12                                               @B3A
         RACROUTE REQUEST=AUTH,ENTITY=((R2)),MF=(E,RACHECK),           X
               WORKA=(3),RELEASE=1.9                               @A1A
         LTR   R15,R15                 DO WE HAVE READ AUTH ?
         JZ    CHKD0100                YES. BRANCH
         DROP  R12
         LA    R15,12                  NO.  SET NOT AUTH RET CODE
         TM    DSNFLAG,DSNLIST+DSNTRACE     LIST OR TRACE OPTION ??
         JZ    CHECK_DSNAME_EXIT       NO. BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,88(,R8)              EMSG22 (4*22)
         MVC   59(44,R8),0(R2)         YES. PUT DSNAME IN MSG
         BRAS  R14,PUTLINE             WRITE MESSAGE AID022I
         LA    R15,12                  SET NOT AUTH RET CODE
         PR                            RETURN
*
CHKD0100 DS    0H
         ST    R2,DSCAMLST+4           PUT DSNAME PTR IN CAMLST
         LOCATE DSCAMLST               ISSUE LOCATE
         LTR   R15,R15                 IS IT CATALOGUED ?
         JNZ   CHKD0200                NO.  BRANCH
         MVC   VOLUME,LOCAREA+6        YES. EXTRACT VOLSER
         CLC   CARCIVE,VOLUME          IS IT ARCHIVED ? (DMS)      @A3A
         JE    CHECK_DSNAME_EXIT       BRANCH IF ARCHIVED BY DMS
         CLC   CMIGRAT,VOLUME          IS IT ARCHIVED ? (HSM)      @B3A
         JE    CHKD0300                BRANCH IF MIGRATED BY HSM   @A4A
         ST    R2,OBCAMLST+4           PUT DSNAME PTR IN CAMLST
         OBTAIN OBCAMLST               NO . CHECK VTOC ?
         LTR   R15,R15                 IS DSN ON VOLUME ?
         JZ    CHECK_DSNAME_EXIT       YES. BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,84(,R8)              EMSG21 (4*21)
         MVC   42(44,R8),0(R2)         PUT DSN IN MSG
         MVC   93(6,R8),VOLUME         PUT VOLSER IN MSG
         BRAS  R14,PUTLINE             DISPLAY DATASET NOT IN VOLUME
         LA    R15,8                   SET RETURN CODE
         PR                            RETURN
*
CHKD0200 DS    0H                      DATASET NO CATALOGUED
         LA    R15,4                   SET DATASET NOT CATLGED RET CODE
         TM    DSNFLAG,DSNLIST+DSNTRACE     LIST OR TRACE OPTION ?
         JZ    CHECK_DSNAME_EXIT       NO.  BRANCH
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,80(,R8)              EMSG20 (4*20)
         MVC   38(44,R8),0(R2)         YES. PUT DSN IN MSG
         BRAS  R14,PUTLINE             DISPLAY DATASET NOT IN CATALOG
         LA    R15,4                   SET RC TO 4
         PR                            RETURN
*
CHKD0300 DS    0H
         TM    DSNFLAG,DSNBPHSM        BYPASS HSM ??              @A1A
         JZ    CHKD0500                BRANCH IF NOBYPASS         @A4A
         TM    DSNFLAG,DSNTRACE+DSNLIST    LIST OR TRACE ACTIVE ? @A4A
         JZ    CHKD0400                NO. BRANCH                 @A4A
         L     R8,ISPFMSGS             MESSAGE CSECT
         L     R8,120(,R8)             EMSG30 (4*30)
         MVC   39(44,R8),0(R2)         YES. PUT DSN IN MSG        @A4A
         BRAS  R14,PUTLINE             DISPLAY EMSG30             @A4A
CHKD0400 LA    R15,16                  BYPASS HSM DATA SET        @A1A
         PR                            RETURN                     @A4A
CHKD0500 SR    R15,R15                                            @A4A
CHECK_DSNAME_EXIT DS  0H                                          @A4A
         PR
         EJECT
*---------------------------------------------------------------------*
*                  PROCESS MEMBER ROUTINE                             *
*---------------------------------------------------------------------*
*        INPUT     R0 =  0 = ADD MEMBER NAME TO TABLE                 *
*                        4 = DELETE MEMBER NAME FROM TABLE            *
*                        8 = GET NEXT ENTRY OFF TABLE                 *
*                       12 = UNCONDITIONAL ADD                        *
*                  R1 ->  MEMBER NAME                                 *
*---------------------------------------------------------------------*
*        OUTPUT    R1 ->  MEMBER NAME                       (GET)     *
*                  R15  = 0    ALL OK                                 *
*                  R15  = 4    MEMBER NAME DONE/EXCLUDE     (ADD)     *
*                  R15  = 8    MEMBER NAME NOT IN TABLE     (DELETE)  *
*                  R15  = 12   TABLE IS EMPTY               (GET)     *
*                  R15  = 16   TABLE IS FULL                (ADD)     *
*                  R15  = 20   MEMBER NAME EXIST            (ADD)     *
*---------------------------------------------------------------------*
PROCESS_MEMBER DS 0H
         BAKR  R14,0                   SAVE REGISTERS              @B2A
         LR    R2,R0                   SAVE FUNCTION TYPE
         LR    R3,R1                   SAVE MEMBER NAME ADDR
         L     R4,MBRTABLE             GET ADDR OF MEMBER TABLE    @B3C
         LA    R5,50                   GET NUMBER OF ENTRIES
         XR    R6,R6                   INIT FREE SLOT POINTER
         CHI   R2,8                    GET REQUEST ?
         JE    PMEM_GET_MEMBER         YES. BRANCH
PMEM_NEXT_MEMBER1  DS   0H
         CLC   0(8,R3),0(R4)           IS ENTRY IN TABLE ?
         JE    PMEM2000                YES. BRANCH
         CLI   0(R4),X'00'             END OF MEMBER TABLE ?
         JE    PMEM4000                YES. BRANCH
         AHI   R4,9                    POINT TO NEXT ENTRY
         BRCT  R5,PMEM_NEXT_MEMBER1    LOOP THRU THE MEMBER TABLE
*                                      END OF TABLE
         J     PMEM4000                MEMBER NOT IN TABLE
PMEM2000 DS    0H                      MEMBER IS IN TABLE
         LA    R15,4                   ASSUME ADD REQUEST
         CLI   8(R4),C'N'              NOT PROCESSED ?             @B3A
         JNE   PMEM2500                BRANCH IF NOT PROCESSED     @B3A
         LA    R15,20                  RESET RC TO 20              @B3A
PMEM2500 DS    0H                      MEMBER IS IN TABLE
         LTR   R2,R2                   IS THIS AN ADD REQUEST ?
         JZ    PROCESS_MEMBER_EXIT     BRANCH IF YES
         CHI   R2,12                   IS IT UNCOND ADD ?
         JNE   PMEM3000                NO.  BRANCH FOR DELETE
         MVI   8(R4),C'N'              YES. RESET USED INDICATOR
         SR    R15,R15                 SET RC = 0
         PR                            RETURN
PMEM3000 DS    0H                      DELETE MEMBER FROM TABLE
         MVI   8(R4),C'Y'              SET MEMBER ALREADY PROCESSED
         LH    R8,MBRCT                                            @B4A
         AHI   R8,-1                                               @B4A
         STH   R8,MBRCT                                            @B4A
         SR    R15,R15                 SET RC = 0
         PR                            RETURN
PMEM4000 DS    0H                      MEMBER NOT IN TABLE
         LA    R15,8                   ASSUME MEMBER NOT FOUND
         CHI   R2,4                    DELETE REQUEST ?
         JE    PROCESS_MEMBER_EXIT     YES. BRANCH
         LTR   R5,R5                   END OF TABLE ?
         JNZ   PMEM_ADD_MEMBER         NO.  BRANCH
         LA    R15,16                  SET RC 0 (TABLE IS FULL)
         PR                            RETURN
PMEM_ADD_MEMBER      DS  0H
         MVC   0(8,R4),0(R3)           ADD MEMBER TO TABLE
         MVI   8(R4),C'N'              SET MEMBER NOT PROCESSED FLAG
         LH    R8,MBRCT                                            @B4A
         AHI   R8,1                                                @B4A
         STH   R8,MBRCT                                            @B4A
         SR    R15,R15                 SET RC = 0
         PR                            RETURN
PMEM_GET_MEMBER      DS  0H            GET NEXT ENTRY OFF TABLE
         LTR   R3,R3                   GET 1ST ENTRY OFF STACK ?
         JZ    PMEM_CHK_MEMBER         YES. BRANCH
         LR    R4,R3                   NO. START FROM THIS MEMBER
         AHI   R4,9                    POINT TO NEXT ENTRY
PMEM_CHK_MEMBER      DS  0H            GET ENTRY OFF TABLE
         CLI   0(R4),C' '              END OF MEMBER TABLE ?
         JE    PMEM_EMPTY_TABLE        BRANCH IF YES
         CLI   8(R4),C'Y'              MEMBER DONE/EXCLUDE ?
         JE    PMEM_NEXT_MEMBER2       YES. SKIP IT
         LR    R1,R4                   ADDR OF MEMBER ENTRY
         SR    R15,R15                 SET RC = 0
         PR                            RETURN
PMEM_NEXT_MEMBER2    DS  0H
         AHI   R4,9                    POINT TO NEXT MEMBER ENTRY
         BRCT  R5,PMEM_CHK_MEMBER      PROCESS NEXT MEMBER
PMEM_EMPTY_TABLE     DS  0H
         LA    R15,12                  SET RC = 12 (TABLE EMPTY)
PROCESS_MEMBER_EXIT  DS  0H                                        @B2A
         PR                            RETURN                      @B2A
*---------------------------------------------------------------------*
*                PUTLINE ROUTINE                                      *
*---------------------------------------------------------------------*
*                INPUT - R8 -> MSG TO DISPLAY                         *
*---------------------------------------------------------------------*
PUTLINE  DS    0H
         BAKR  R14,0                   SAVE CALLERS REGS           @B2A
         BALR  R12,0                   ESTABLISH ADDRESSIBILITY    @B3A
         USING *,R12
         L     R5,UPTADDR              GET UPT ADDR
         L     R4,ECTADDR              GET ECT ADDR
         XC    ECB,ECB                 CLEAR THE ECB
         XC    IOPLADS,IOPLADS         CLEAR PUTLINE WORK AREA
         PUTLINE PARM=PUTBLOCK,                                        X
               UPT=(R5),               UPT ADDR                        X
               ECT=(R4),               ECT ADDR                        X
               ECB=ECB,                ECB ADDR                        X
               OUTPUT=((R8),TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)
         PR                            RETURN TO CALLER            @B2A
         DROP  R12
         EJECT
*---------------------------------------------------------------------*
*             CONVERT HEX STRING TO CHARACTER                         *
*---------------------------------------------------------------------*
*            INPUT  R0 = 2 BYTE BINARY                                *
*           OUTPUT  R0 = 4 CHARACTER STRING                           *
*---------------------------------------------------------------------*
HEX2CHAR DS    0H
         BAKR  R14,0                   RESTORE CALLERS REGS        @B2A
         STH   R0,INSTRING             GET STRING TO CONVERT
         LA    R2,INSTRING             GET ADDR OF INPUT STRING
         LA    R3,OUTSTRNG             GET ADDR OF OUTPUT STRING
         LA    R4,HEX_TBL              GET ADDR OF HEX CHAR TABLE
         LA    R7,2                    PROCESS 2 BYTES
         SR    R5,R5                   CLEAR R5
HEXLOOP  DS    0H
         IC    R5,0(0,R2)              GET AN INPUT BYTE
         SRL   R5,4                    GET 1ST NIBBLE ONLY
         LA    R6,0(R5,R4)             GET ADDR OF HEX DIGIT
         MVC   0(1,R3),0(R6)           EXTRACT HEX DIGIT
         IC    R5,0(0,R2)              GET AN INPUT BYTE
         SLL   R5,28                   REMOVE 1ST NIBBLE
         SRL   R5,28                   GET 2ND NIBBLE
         LA    R6,0(R5,R4)             GET ADDR OF HEX DIGIT
         MVC   1(1,R3),0(R6)           EXTRACT HEX DIGIT
         AHI   R2,1                    POINT TO NEXT INPUT CHAR
         AHI   R3,2                    POINT TO NEXT OUTPUT CHAR
         BRCT  R7,HEXLOOP              LOOP THRU STRING
         L     R0,OUTSTRNG             LOAD THE RESULT
         SR    R15,R15                 SET OK RETURN CODE
         PR                            RETURN TO CALLER            @B2A
         EJECT
*
WORKSTOR DC    C'DATA AREA OF ISPFDSN =>'
SYSUID   DC    CL8' '                  TSO USER ID
RACFGRP  DC    CL8' '                  RACF CONNECT GROUP          @A1A
*---------------------------------------------------------------------*
*        DYNAMIC ALLOCATION REQUEST BLOCKS                            *
*---------------------------------------------------------------------*
         DS    0F
ALC_RBP  DC    X'80',AL3(ALC_RB)
*
ALC_RB   DS    0F
         DC    AL1(20),X'01'                DSNAME ALLOCATION VERB CODE
         DC    H'0'                         ALLOCATION FLAGS1
ALC_ERCD DC    H'0'                         ERROR CODE
ALC_INFO DC    H'0'                         INFORMATION CODE
         DC    A(ALC_TXTS)                  TEXT UNIT POINTER
         DC    F'0'                         REQUEST BLOCK EXTENSION
         DC    F'0'                         ALLOCATION FLAGS2
*
ALC_TXTS DC    A(ALC_TXT1)
         DC    A(ALC_TXT2)
         DC    A(ALC_TXT3)                                         @A5C
         DC    A(ALC_TXT4)                                         @A5A
*
ALC_TXT1    DS  0F                      DDNAME TEXT UNIT
            DC  XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH
ALC_DDNAME  DS  CL8                     DDNAME
*
ALC_TXT2    DS  0F                      DSNAME TEXT UNIT
            DC  XL2'02',XL2'01',AL2(44) KEY,#,LENGTH
ALC_DSNAME  DS  CL44                    DSNAME
*
ALC_TXT3    DS  0F                      DISP TEXT UNIT
            DC  XL2'04',XL2'01',XL2'01',X'08'   KEY,#,LENGTH,DISP=SHR
ALC_TXT4    DS  0F                      MEMBER TEXT UNIT           @A5A
            DC  XL2'03',XL2'01',XL2'08'                            @A5A
ALC_MEMBER  DC  CL8' '                  MEMBER                     @A5A
*
         EJECT
*---------------------------------------------------------------------*
*              DUMMY ALLOCATION REQUEST BLOCK                         *
*---------------------------------------------------------------------*
         DS    0F
DMY_RBP  DC    X'80',AL3(DMY_RB)
*
DMY_RB   DS    0F
         DC    AL1(20),X'01'           DSNAME ALLOCATION VERB CODE
         DC    H'0'                    ALLOCATION FLAGS1
DMY_ERCD DC    H'0'
DMY_INFO DC    H'0'
         DC    A(DMY_TXTS)             TEXT UNIT POINTER
         DC    F'0'                    REQUEST BLOCK EXTENSION
         DC    F'0'                    ALLOCATION FLAGS2
*
DMY_TXTS DC    A(DMY_TXT1)
         DC    A(DMY_TXT2)
         DC    X'80',AL3(DMY_TXT3)     LAST TEXT UNIT
*
DMY_TXT1 DS    0F                      DDNAME TEXT UNIT
         DC    XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH
DMY_TXT_DDN DS CL8                     DDNAME
*
DMY_TXT2 DS    0F                      DUMMY TEXT UNIT
         DC    XL2'24',XL2'00'         KEY,#
*
DMY_TXT3 DS    0F                      PERM ALLOC TEXT UNIT
         DC    XL2'52',XL2'00'         KEY,#
         EJECT
*---------------------------------------------------------------------*
*              SYSOUT ALLOCATION REQUEST BLOCK                        *
*---------------------------------------------------------------------*
         DS    0F
SO_RBP   DC    X'80',AL3(SO_RB)
*
SO_RB    DS    0F
         DC    AL1(20),X'01'           DSNAME ALLOCATION VERB CODE
         DC    H'0'                    ALLOCATION FLAG1
SO_ERCD  DC    H'0'
SO_INFO  DC    H'0'
         DC    A(SO_TXTS)              TEXT POINTER
         DC    F'0'
         DC    F'0'                    ALLOCATION FLAG2
*
SO_TXTS  DC    A(SO_TXT1)
         DC    A(SO_TXT2)
SO_TXTS3 DC    A(0)
         DC    X'80',AL3(SO_TXT4)      LAST TEXT UNIT
*
SO_TXT1  DS    0F                      DDNAME TEXT UNIT
         DC    XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH
SO_DDN   DS    CL8                     DDNAME
*
SO_TXT2  DS    0F                      SYSOUT TEXT UNIT
         DC    XL2'18',XL2'01',AL2(01) KEY,#,LENGTH
SO_CLASS DS    C                       SYSOUT CLASS
*
SO_TXT3  DS    0F                      DEST TEXT UNIT
         DC    XL2'58',XL2'01',XL2'08' KEY,#,LENGTH
SO_DEST  DS    CL8                     DEST
*
SO_TXT4  DS    0F                      PERM ALLOC TEXT UNIT
         DC    XL2'52',XL2'00'         KEY,#
         EJECT
ASO_TXT3 DC    A(SO_TXT3)                                          @B3A
*---------------------------------------------------------------------*
*              TERMINAL ALLOCATION REQUEST BLOCK                      *
*---------------------------------------------------------------------*
          DS   0F
TERM_RBP  DC   X'80',AL3(TERM_RB)
*
TERM_RB   DS   0F
          DC   AL1(20),X'01'           DSNAME ALLOCATION VERB CODE
          DC   H'0'                    ALLOCATION FLAGS1
TERM_ERCD DC   H'0'
TERM_INFO DC   H'0'
          DC   A(TERM_TXTS)            TEXT POINTER
          DC   F'0'
          DC   F'0'                    ALLOCATION FLAGS2
*
TERM_TXTS DC   A(TERM_TXT1)            DDNAME
          DC   A(TERM_TXT2)
          DC   A(TERM_TXT3)                                        @B4A
          DC   X'80',AL3(TERM_TXT4)    PERM ALLOCATION TEXT UNIT
*
TERM_TXT1 DS   0F                      DDNAME TEXT UNIT
          DC   XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH
TERM_DDNAME    DS  CL8                 DDNAME
*
TERM_TXT2 DS   0F                      DUMMY TEXT UNIT
          DC   XL2'28',XL2'00'         KEY,#
*
TERM_TXT3 DS   0F                      DUMMY TEXT UNIT             @B4A
          DC   XL2'18',AL2(1,1)      SYSOUT CLASS KEY, NUM, PARMLEN@B4A
TERM_SYSO DC   CL1'X'                SYSOUT CLASS FIELD            @B4A
*
TERM_TXT4 DS   0F                      PERM ALLOCATION TEXT UNIT
          DC   XL2'52',XL2'00'         KEY,#
          EJECT
*---------------------------------------------------------------------*
*              DYNAMIC UN-ALLOCATE REQUEST BLOCK                      *
*---------------------------------------------------------------------*
          DS   0F
UA_RBP    DC   X'80',AL3(UA_RB)
*
UA_RB     DS   0F
          DC   AL1(20),X'02'           UN-ALLOCATION VERB
          DC   H'0'                    DE-ALLOCATION FLAGS1
UA_ERCD   DC   H'0'
UA_INFO   DC   H'0'
          DC   A(UA_TXTS)              TEXT POINTER
          DC   F'0'                    REQUEST BLOCK EXTENSION
          DC   F'0'                    DE-ALLOCATION FLAGS2
*
UA_TXTS   DC   A(UA_TXT1)
          DC   X'80',AL3(UA_TXT2)
*
UA_TXT1   DS   0F                      DDNAME TEXT UNIT
          DC   XL2'07',XL2'00'         KEY,#
UA_TXT2   DS   0F                      DDNAME TEXT UNIT
          DC   XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH
UA_DDNAME DS   CL8                     DDNAME
*
         EJECT
*---------------------------------------------------------------------*
*              CONCATENATE REQUEST BLOCK                              *
*---------------------------------------------------------------------*
         DS    0F
CON_RBP  DC    X'80',AL3(CON_RB)
*
CON_RB   DS    0F
         DC    AL1(20),X'03'           CONCATENATE VERB
         DC    H'0'                    CONCATENATE FLAGS1
CON_ERCD DC    H'0'
CON_INFO DC    H'0'
         DC    A(CON_TXTS)             TEXT POINTER
         DC    F'0'
         DC    F'0'                    CONCATENATE FLAGS2
*
CON_TXTS DC    A(CON_TXT1)
         DC    X'80',AL3(CON_TXT2)     LAST TEXT UNIT
*
CON_TXT1 DS    0F                      DDNAME TEXT UNIT
         DC    XL2'01',XL2'02'         KEY,#
         DC    AL2(8)
CON_DDN  DS    CL8
         DC    AL2(8),CL8'$ISPFDSN'
*
CON_TXT2 DS    0F                      PERM CONCAT ATTR
         DC    XL2'04',XL2'00'         KEY,#,
*
*---------------------------------------------------------------------*
*                   EXECUTE MOVE INSTRUCTION                          *
*---------------------------------------------------------------------*
MVCGROUP MVC   RACFGRP(0),0(R1)                                    @A8A
MVCPREFX MVC   PREFIX(0),0(R1)                                     @B3C
MVCUSUFF MVC   USERSUFF(0),0(R1)                                   @B3A
MVCPROC  MVC   ALOC_DSN(0),0(R1)                                   @B3C
MVCPROCM MVC   ALOC_MEM(0),0(R1)                                   @A8A
MVCMEMBR MVC   TEMP_MEM(0),0(R12)                                  @A8A
MVCDSN   MVC   TEMP_DSN(0),0(R3)                                   @A8A
MVCDDN   MVC   CURR_DDN(0),0(R1)                                   @B4A
MVCLEFT  MVC   0(0,R2),0(R3)                                       @B4A
*
*---------------------------------------------------------------------*
*                   PROGRAM VARIABLES                                 *
*---------------------------------------------------------------------*
DSNFLAG  DC    X'00'                   INPUT OPTION FLAG
DSNLIST  EQU   X'80'                   LIST
DSNTRACE EQU   X'40'                   TRACE
DSNDSNM  EQU   X'20'                   PROC                        @B3A
DSNLGPRC EQU   X'10'                   LOGON PROCEDURE NAME        @B3A
DSNUSER  EQU   X'08'                   USER ISPFDSN SUFFIX         @B3A
DSNGB4GL EQU   X'04'                   ALLOC GROUP THEN GLOBAL     @B3A
DSNBPHSM EQU   X'02'                   BYPASS MIGRATED DATA SET    @A1A
DSNNRACF EQU   X'01'                   NO RACHECK                  @B1A
DSNFLAG2 DC    X'00'                   FLAG2                       @B4A
DSNDDNF EQU    X'80'             FLUSH ALLOC FOR CURRENT DDNAME    @B3A
DSNPASS1 EQU   X'40'                   GLOBAL ISPFDSN PASS 1 COMP  @B4A
DSN1DSN  EQU   X'20'                   DSN BEFORE DISP             @B4A
*DEBUG1  EQU   X'01'                   USED FOR DEBUG              @B3A
*
BUFFADDR DS    A                       ADDR OF I/O BUFFER
RACFWORK DS    A                       ADDRESS POINTER FOR RACF    @A1A
DDNTABLE DS    A                       50 X 8 DDNAME TABLE         @B3A
MBRTABLE DS    A                       50 X 9 MEMBER NAME TABLE    @B3A
DSNTABLE DS    A                       300 X 60 (DD + DSN + MEM)   @B4A
DSNTCURR DS    A                       ADDRESS OF CURRENT DSNTABLE @B4A
DSNT_END DS    A                       END OF DSNTABLE             @B4A
X0410    DC    X'0410'                                             @B3A
DDJCL    DC    C' DD '                                             @B3A
CEXEC    DC    C' EXEC '                                           @B3A
CPROC    DC    C' PROC '                                           @B3A
JCLCOMT  DC    C'//*'                                              @B3A
CISPFDOT DC    C'.'                                                @B4A
$ISPFDSN DC    C'$ISPFDSN'                                         @B3A
         DC    C'.PROCLIB'                                         @B4A
USERSUFF DC    CL8' '                  ISPFDSN USER SUFFIX         @B3A
CSTEPLIB DC    C'STEPLIB '                                         @B3A
CJOBLIB  DC    C'JOBLIB '                                          @B3A
CSTEPCAT DC    C'STEPCAT '                                         @B3A
CJOBCAT  DC    C'JOBLIB '                                          @B3A
CISPTABL DC    C'ISPTABL'                                          @B3A
CDEALLOC DC    C'DEALLOC'                                          @B3A
CRMM     DC    C'RMM '                                             @B3A
CINCLUDE DC    C'INCLUDE='                                         @B3A
CEXCLUDE DC    C'EXCLUDE='                                         @B3A
CTERM    DC    C' TERM=TS'                                         @B3A
CDUMMY   DC    C' DUMMY'                                           @B3A
CSYSOUT  DC    C' SYSOUT='                                         @B3A
CDEST    DC    C'DEST('                                            @B3A
CCONCAT  DC    C'CONCAT  '                                         @B3A
*CMEMBER DC    C',MEMBER='                                         @B3A
CDISP    DC    C' DISP='                                           @B3A
CGLOBAL  DC    C'GLOBAL'                                           @B3A
CARCIVE  DC    C'ARCIVE'                                           @B3A
CMIGRAT  DC    C'MIGRAT'                                           @B3A
CSHR     DC    C'SHR'                                              @B3A
COLD     DC    C'OLD'                                              @B3A
CNEW     DC    C'NEW'                                              @B3A
CMOD     DC    C'MOD'                                              @B3A
CDSNE    DC    C',DSN='                                            @B3A
CGROUP   DC    C'GROUP'                                            @B4A
*USERID  DC    C'USERID'                                           @B3A
CSYSUID  DC    C'SYSUID'                                           @B3A
SYSUIDL  DC    H'7'                                                @B3A
PREFIXL  DC    H'4'                    LENGTH OF PREFIX
PREFIX   DC    CL8'SYS1'               ISPFDSN PREFIX
CDYNALLO DC    C'DYNALLOC'                                         @B3A
CALLOCAT DC    C'ALLOCATE'                                         @B3A
CTEMPPDS DC    C'TEMPPDS '                                         @B3A
C0012    DC    C'0012'                                             @B2A
ECB      DS    F                       REQUIRED FOR PUTLINE MACRO
IOPLADS  DS    4F                      REQUIRED FOR PUTLINE MACRO
CMDANSR  DC    F'0'                    PARSE ANSWER AREA POINTER
CMDPPL   DS    0F                      PARSE COMMAND PPL:
UPTADDR  DS    A                         ADDR OF USERS UPT
ECTADDR  DS    A                         ADDR OF USERS ECT
CMDECB   DC    A(ECB)                    ECB POINTER
CMDPCL   DC    A(IKJPCL)                 ADDRESS OF IKJPARM
CMDANS   DC    A(CMDANSR)                PLACE TO PUT ANSWER
CMDCBUF  DC    F'0'                    POINTER TO COMMAND BUFFER
CPPLADDR DS    A                       ADDR OF CPPL
FAILDDN  DS    A                       ADDR FAILING DYNALLOC DDNAME
FAILDSN  DS    A                       ADDR FAILING DYNALLOC DSNAME
CURR_DDN DC    CL8' '                  CURRENT DDNAME
ALOC_DDN DC    CL8' '                  DDNAME FOR DYNALLOC
ALOC_DSN DC    CL44' '                 DSNAME FOR DYNALLOC
ALOC_MEM DC    CL8' '                  MEMBER FOR DYNALLOC         @A5A
IUSE_DSN DC    CL44' '                 DSN BEING PROCESSED
IUSE_MBR DC    CL8' '                  MEMBER NAME BEING PROCESSED
IUSE_DDN DC    CL8' '                  DDNAME BEING PROCESSED
TEMP_DSN DC    CL44' '                 DSN WORK AREA
TEMP_MEM DC    CL8' '                  MEMBER WORK AREA            @A5A
HEX_TBL  DC    C'0123456789ABCDEF'     HEX TO CHAR CONVERSION TABLE
BLANKS   DC    60C' '                  BLANKS
LOCAREA  DS    265C                    CAMLST WORK AREA
OUTSTRNG DC    CL4' '                  OUTPUT FROM HEX HEX2CHAR ROUTINE
INSTRING DS    H                       INPUT TO HEX HEX2CHAR ROUTINE
VOLUME   DC    CL6' '
ADDR_PH  DS    (PHL)C                  PROCPDS PLACE HOLDER
ALLOCPH  DS    (PHL)C                  TEMP LIB PLACE HOLDER
WORKSIZE DC    F'16962'                                            @B4A
IOBUFSZ  DC    F'32768'                                            @B3A
STMTEND  DC    H'0'                    ENDING POSITION OF STATEMENT@A8A
MBRCT    DC    H'0'                    NUMBER OF UNPROCESSED MEMBER@B4A
*---------------------------------------------------------------------*
*                   MACRO LIST FORMS                                  *
*---------------------------------------------------------------------*
RACHECK  RACROUTE REQUEST=AUTH,ENTITY=(0),CLASS='DATASET',RACFIND=NO,  X
               VOLSER=VOLUME,MSGSUPP=YES,                              X
               RELEASE=1.9,MF=L                                    @A1A
DSCAMLST CAMLST NAME,0,,LOCAREA
OBCAMLST CAMLST SEARCH,0,VOLUME,LOCAREA
PUTBLOCK PUTLINE MF=L
*--------------------------------------------------------------------*
*                   INPUT DATASET DCB                                *
*--------------------------------------------------------------------*
TEMPDD   DCB   DSORG=PO,MACRF=R,EODAD=PDS_EOFM,DDNAME=TEMPPDS
         EJECT
*ROFILE  DC    C'SYSUID.'
CSID     DC    X'50'                        &
         DC    C'SID.'
ISPPROF  DC    C'.ISPF.ISPPROF'
         DC    XL2'00'                      END OF MSG LIST
*
ISPFMSGS DC    V(ISPFMSGS)
VISPQRY  DC    V(ISPQRY)                                           @B3A
         EJECT
*---------------------------------------------------------------------*
*                      IKJPARSE                                       *
*---------------------------------------------------------------------*
IKJPCL   IKJPARM                                                   @A8A
IKPREFX  IKJKEYWD                                                  @B1A
         IKJNAME   'PREFIX',SUBFLD=IKSPREFX                        @B1A
IKGROUP  IKJKEYWD                                                  @A8A
         IKJNAME   'GROUP',SUBFLD=IKSGROUP                         @A8A
IKUSER   IKJKEYWD                                                  @B3A
         IKJNAME   'USER',SUBFLD=IKSUSER                           @B3A
IKLIST   IKJKEYWD                                                  @B3A
         IKJNAME   'LIST'                                          @A8A
IKTRACE  IKJKEYWD                                                  @A8A
         IKJNAME   'TRACE'                                         @A8A
IKBYPHSM IKJKEYWD                                                  @A8A
         IKJNAME   'BYPHSM'                                        @A8A
IKLOGPRC IKJKEYWD                                                  @A8A
         IKJNAME   'LOGONPRC'                                      @B3A
IKGR4SYS IKJKEYWD                                                  @A8A
         IKJNAME   'GRPB4GLB'                                      @B3A
IKNRACF  IKJKEYWD                                                  @B1A
         IKJNAME   'NORACF'                                        @B1A
IKDSN    IKJKEYWD                                                  @A8A
         IKJNAME   'DSN',SUBFLD=IKSADSN                            @A8A
IKMEMBER IKJKEYWD                                                  @A8A
         IKJNAME   'MEMBER',SUBFLD=IKSMEMBR                        @A8A
IKSADSN  IKJSUBF                                                   @A8A
IKSIADSN IKJIDENT  'DSNAME',FIRST=ALPHA,OTHER=ANY,                     C
               PROMPT='DSNAME',MAXLNTH=44                          @A8A
IKSMEMBR IKJSUBF                                                   @A8A
IKSIAMEM IKJIDENT  'MEMBER',FIRST=ALPHA,OTHER=ALPHANUM,                C
               PROMPT='PROC MEMBER',MAXLNTH=8                      @A8A
IKSGROUP IKJSUBF                                                   @A8A
IKSIGRP  IKJIDENT  'GROUP',FIRST=ALPHA,OTHER=ALPHANUM,                 C
               PROMPT='RACF GROUP NAME',MAXLNTH=8                  @A8A
IKSPREFX IKJSUBF                                                   @B3A
IKSIPREX IKJIDENT  'PREFIX',FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8   @B3A
IKSUSER  IKJSUBF                                                   @B3A
IKSIUSER IKJIDENT  'USER',FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,        C
               PROMPT='SUFFIX OF YOUR PRIVATE ISPFDSN'             @B3A
         IKJENDP                                                   @A8A
         EJECT
*
*---------------------------------------------------------------------*
*              DSECTS                                                 *
*---------------------------------------------------------------------*
PH       DSECT
CURRMEM  DS    CL8                 PDS MEMBER NAME
NEXTREC  DS    F                   ADDR OF NEXT RECORD IN BLOCK
REMAINS  DS    F                   # OF BYTES LEFT IN CURRENT BLOCK
PHL      EQU   *-PH                LENGTH OF THIS BLOCK
         EJECT
*---------------------------------------------------------------------*
*              DSECTS                                                 *
*---------------------------------------------------------------------*
         CVT  DSECT=YES,LIST=NO
         IKJTCB DSECT=YES,LIST=NO
         DCBD DSORG=PS
         IKJCPPL
         IHAASCB
         IHAASXB
         IHAACEE
         IHAPSA
         IKJUPT
         YREGS
         END
