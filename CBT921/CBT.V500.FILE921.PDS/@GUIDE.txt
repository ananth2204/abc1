ISPFDSN is a TSO command processor to allocate ISPF datasets
dynamically in native TSO.

TSO logon procedures allocates the ISPF datasets require to execute ISPF.
If the ISPF datasets do not exist, you cannot logon TSO due to JCL error.

Function : ISPFDSN refers SYS1.$ISPFDSN.&SID($ISPFDSN) to perform
           dataset allocation. ISPFDSN does not allocate the dataset
           if any one of the following condition occurs:

           1) The dataset is not catalogued
           2) The dataset is catalogued but the volume is offline
           3) The user has no RACF read authority to the dataset
           4) If BYPHSM option is specified, migrated dataset is
              ignored
           5) If the dataset is already allocated under the same
              DDNAME
           6) The dataset is exclusive own by another task

Advantage:
           1) It is faster than using REXX to allocate ISPF datasets
           2) ISPFDSN does not allocate the dataset if the user does
              not have read access right. ISPFDSN avoids S913.
              Sensitive software product have RACF access protection
              are defined in GLOBAL ISPFDSN parameter and only users
              with read access to those product can access the
              software product. It is no need to maintain a unique
              TSO logon procedure to allocate those sensitive software
              product ISPF datasets.
           3) Avoid TSO logon procedure JCL errors as ISPFDSN ignores
              non-exist datasets.
           4) Avoid TSO logon failure if you catalogue the dataset in
              one LPAR and forget to catalog the dataset at another
              LPAR.
           5) It is easy to implement as the synatx of ISPFDSN parameter
              is same as MVS JCL. Make minor modification to your TSO
              logon procedures and logon clist. New ISPFDSN users can
              invoke ISPFDSN to access their TSO logon procedures to
              allocate files.

              Command : ISPFDSN LOGONPRC
              ISPFDSN allocates files from TSO logon procedure
              in SYS1.$ISPFDSN.PROCLIB(tsoproc)
           6) TSO advanced users allocates ISPF dataset from ISPFDSN
              parameters

              Command : ISPFDSN
              ISPFDSN allocates ISPF dataset in the following order
              &SYSUID.ISPF.ISPPOF($ISPFDSN) or        <-- Optional
                      &SYSUID.$ISPFDSN.user($ISPFDSN) <-- Compulsory
              prefix.$ISPFDSN.&sid($ISPFDSN)
              prefix.$ISPFDSN.racfgrp($ISPFDSN) or    <-- Optional
                      prefix.$ISPFDSN.group($ISPFDSN)

              It is easy to manage as the dataset allocation is by
              means of software product. (ie change one ISPFDSN
              member in global ISPFDSN parmlib affects all the TSO
              logon pocedures if you convert all the TSO logon
              procedures to ISPFDSN)
           7) TSO advanced users can allocates their own private
              datasets in &SYSUID.ISPF.ISPPROF($ISPFDSN). It is no
              need to invoke CBTTAPE CONCAT to perform their private
              ISPF datasets.

PARMS :     GROUP(xxxxx)  - Process as if xxxxx is used as the RACF
                            group. xxxxx can be an application project
                            name or RACF group. The default group is
                            the user's default RACF group.
            LIST          - Report on any allocations that fail and
                            migrated data set bypassed.
            TRACE         - Generate trace messages for problem
                            determination.
            BYPHSM        - Bypass allocation of HSM migration dataset
                            in case of HSM is inactive
            LOGONPRC      - Use tso logon proc name as the member name
                            of SYS1.$ISPFDSN.PROCLIB(&sysproc)
                            (note: if LOGONPRC is specified, ISPFDSN
                             does not access global ISPFDSN parmlib
                             to allocate files)
            DSN(xxxx)     - Data set name of TSO logon procedure
                            (Note: Keyword DSN is mutally exclusive
                             LOGONPRC. When LOGOBPRC is specified,
                             DSN and MEMBER are ignored)
            MEMBER(xxxx)  - Member name of TSO logon procedure
                            (Note: works only if DSN keyword is
                             specified).
            PREFIX(SYS1)  - The prefix of ISPFDSN parmlib. Default is
                            SYS1.
            USER(xxxx)    - Suffix of your own personnel ISPFDSN.
                            when it is specified, ISPFDSN allocates
                            dataset in &SYSUID.$ISPFDSN.xxxx($ISPFDSN)
                            Default personnel ISPFDSN parmlib member
                            is &SYSUID.ISPF.ISPPROF($ISPFDSN).
            GRPB4GLB      - Allocate group ISPFDSN datasets before
                            global ISPFDSN datasets
                            (Note: DEFAULT is global ISPFDSN datasets
                                   before group ISPFDSN datasets)
            NORACF        - Bypass RACHECK processing just in case
                            the RACF data base is exclusive enqued
                            by some tasks.


ISPFDSN can be executed with or without ISPFDSN parmlib. New users
is recommended to implement ISPFDSN as suggested in the section of new
users if their TSO logon procedure does not have unsupported ddname
and the DD statements only contain DISP and DSN keyword. For detail
refers the syntax of ISPFDSN parmlib. If your TSO logon procedure has
STEPLIB or JOBLIB, you have to keep STEPLIB and JOBLIB in your TSO
procedure.

After you are familar with ISPFDSN, refer the section advanced user
to convert your TSO logon procedures to ISPFDSN parameter which will
simplify the maintenance of TSO logon procedures.

Assemble ISPFDSN and copy the load module into any linklist libraries.
Issue MVS Command 'F LLA,REFRESH' to refresh the MVS linklist.

Section (New users)
1. Copy your TSO logon procedures to prefix.$ISPFDSN.PROCLIB. Amend
   your original logon procedure using the following template
   where dddd is the PDS of your logon procedure and ppppppp is the
   logon clist name.

//IKJACCNT PROC
//IKJACCNT EXEC PGM=IKJEFT01,DYNAMNBR=600,
//         PARM='EX ''dddd(ppppppp)'''
//*
   Amend CLIST ppppppp and add the following statement
   ISPFDSN LOGONPRC

A standard TSO logon procedure, allocate user ISPF profile. If it does
not exist, allocate a new ISPF profile.  Invoke 'ISPFDSN LOGONPRC' and
then invoke ISPF.

Refer the following rules to modify your TSO logon procedres.

 1) The following ddnames cannot be concatenated
    DDNAME=STEPLIB,JOBLIB,STEPCAT,JOBCAT,ISPTABL,ISPPROF
    ISPPROF and ISPTABL are supposed to be allocated by TSO              921
    logon clist.

 2) The following ddnames cannot be allocated as they are
    restricted by SVC99.
    DDNAME=STEPLIB,JOBLIB,STEPCAT,JOBCAT

 3) DISP=NEW is not supported                                            921
                                                                         921
 4) GDG allocation is not supported                                      921
                                                                         921
 5) It only supports DISP=SHR,DSN=XXXX in one line                       921
    Note : DSN=XXXX,DISP=SHR are not supported
           UNIT and VOL=SER=XXXXXX are not supported
                                                                         921
Advanced User
1. Assume you are running sysplex and you want to each system has its
   own global ISPFDSN parmlib.

   Determine the first level quali1er of global ISPFDSN parmlib. The
   default is SYS1.

   ALLOCATE SYS1.$ISPFDSN.&SID where $SID is the system ID

   If you want SYS2 as the first qualifer of global ISPFDSN parmlib,
   then ALLOCATE SYS2.$ISPFDSN.&SID where $SID is the system ID

2. If you only want to maintain a global ISPFDSN library for all the
   LPARs within one sysplex. Define SYS1.$ISPFDSN.GLOBAL and define
   SYS1.$ISPFDN.&SID as alias of the SYS1.$ISPFDSN.GLOBAL

3. Review all your TSO logon procedure to determine which ISPF datasets
   are used by the all TSO logon procedures. The rule of thumb allocates
   as little as possible. Create ISPFDSN parameter calls SYSTEM in
   your global ISPFDSN library.
   Note : Refer sample member SYSTEM

4. You can create a software product as a member within global ISPFDSN
   library but it is not recommended. The software product like IPCS,
   SMPE, RMF, HCD and etc can be invoked dynamically by means of
   LIBDEF. Refer sample CLIST @SMPE, it checks whether SMPE datasets
   are allocated. If they are not allocated, use LIBDEF to attach the
   SMPE ISPF dataset.

  EXAMPLE : 1) ISPFDSN DSN(SYS1.PROCLIB) MEMBER(IKJPROC)
               REFERS SYS1.PROCLIB(IKJPROC) TO PERFORM DATASETS
               ALLOCATION.
            2) ISPFDSN LOGONPRC
               ALLOCATE ISPF DATASETS IN
               SYS1.$ISPFDSN.PROCLIB(&SYSPROC)
               EG. IF YOUR LOGON PROCEDURE IS IKJPROC, THEN ISPFDSN
               REFERS SYS1.$ISPFDSN.PROCLIB(IKJPROC) TO PERFORM
               DATASETS ALLOCATION.
            3) ISPFDSN
               ALLOCATION SEQUENCE
               &SYSUID.ISPF.ISPPROF($ISPFDSN)
               SYS1.$ISPFDSN.&SID($ISPFDSN)  <-- It includes SYSTEM
                                                 and INHOUSE
               SYS1.$ISPFDSN.&SID(SYSTEM)
               SYS1.$ISPFDSN.&SID(INHOUSE)
               SYS1.$ISPFDSN.&RACFGRP($ISPFDSN) <-- It includes DB2
                                                  and MQ
               SYS1.$ISPFDSN.&SID(DB2)
               SYS1.$ISPFDSN.&SID(MQ)
            4) ISPFDSN PREFIX(SYS2)
               ALLOCATION SEQUENCE
               &SYSUID.ISPF.ISPPROF($ISPFDSN)
               SYS2.$ISPFDSN.&SID($ISPFDSN)  <-- includes SYSTEM and
                                                 INHOUSE
               SYS2.$ISPFDSN.&SID(SYSTEM)
               SYS2.$ISPFDSN.&SID(INHOUSE)
               SYS2.$ISPFDSN.&RACFGRP($ISPFDSN) <-- includes DB2 and
                                                  MQ
               SYS2.$ISPFDSN.&SID(DB2)
               SYS2.$ISPFDSN.&SID(MQ)
            5) ISPFDSN GROUP(XXXX)
               ALLOCATION SEQUENCE
               &SYSUID.ISPF.ISPPROF($ISPFDSN)
               SYS1.$ISPFDSN.&SID($ISPFDSN)  <-- includes SYSTEM and
                                                 INHOUSE
               SYS1.$ISPFDSN.&SID(SYSTEM)
               SYS1.$ISPFDSN.&SID(INHOUSE)
               SYS1.$ISPFDSN.XXXX($ISPFDSN) <-- includes DB2 and MQ
               SYS1.$ISPFDSN.&SID(DB2)
               SYS1.$ISPFDSN.&SID(MQ)
            6) ISPFDSN GRPB4GLB
               ALLOCATION SEQUENCE
               &SYSUID.ISPF.ISPPROF($ISPFDSN)
               SYS1.$ISPFDSN.&RACFGRP($ISPFDSN) <-- includes DB2 and
                                                    MQ
               SYS1.$ISPFDSN.&SID($ISPFDSN)  <-- includes SYSTEM and
                                                    INHOUSE
               SYS1.$ISPFDSN.&SID(DB2)
               SYS1.$ISPFDSN.&SID(MQ)
               SYS1.$ISPFDSN.&SID(SYSTEM)
               SYS1.$ISPFDSN.&SID(INHOUSE)
            7) ISPFDSN USER(MYISPF)
               ALLOCATION SEQUENCE
               &SYSUID.$ISPFDSN.MYISPF($ISPFDSN) <-- include SMPE
                                                 <-- exclude DB2
               SYS1.$ISPFDSN.&SID($ISPFDSN)      <-- include SYSTEM &
                                                     INHOUSE
               SYS1.$ISPFDSN.&SID(SMPE)
               SYS1.$ISPFDSN.&SID(SYSTEM)
               SYS1.$ISPFDSN.&SID(INHOUSE)
               SYS1.$ISPFDSN.&RACFGRP($ISPFDSN)  <-- include DB2 & MQ
               SYS1.$ISPFDSN.&SID(MQ)

  2) THE FOLLOWING DDNAMES CANNOT BE CONCATENATED
      DDNAME=STEPLIB,JOBLIB,STEPCAT,JOBCAT,ISPTABL,ISPPROF

  3) THE FOLLOWING DDNAMES CANNOT BE ALLOCATED
      DDNAME=STEPLIB,JOBLIB,STEPCAT,JOBCAT

  4) SUPPORT VARIABLE &SYSUID IN DATASET FIRST LEVEL QUALIFIER.
     SUPPORT VARIABLE &SID IN DATASET SECOND LEVEL QUALIFIER.

   EXAMPLE:
   SYS1.$ISPFDSN.&SID($ISPFDSN) <---  GLOBAL ISPFDSN PARMLIB
   INCLUDE=SYSTEM
   INCLUDE=INHOUSE

SYS1.$ISPFDSN.&SID(SYSTEM)
//SYSHELP  DD DISP=SHR,DSN=SYS1.HELP
//SYSLBC   DD DISP=SHR,DSN=SYS1.BRODCAST
//SYSPROC  DD DISP=SHR,DSN=SYS1.SISPCLIB
//SYSEXEC  DD DISP=SHR,DSN=SYS1.SISPEXEC
//         DD DISP=SHR,DSN=SYS1.SBPXEXEC
//ISPPLIB  DD DISP=SHR,DSN=SYS1.SISPPENU
//         DD DISP=SHR,DSN=SYS1.SISFPLIB
//         DD DISP=SHR,DSN=SYS1.SBPXPENU
//ISPMLIB  DD DISP=SHR,DSN=SYS1.SISPMENU
//         DD DISP=SHR,DSN=SYS1.SISFMLIB
//         DD DISP=SHR,DSN=SYS1.SBPXMENU
//ISPSLIB  DD DISP=SHR,DSN=SYS1.SISPSENU
//         DD DISP=SHR,DSN=SYS1.SISPSENU
//         DD DISP=SHR,DSN=SYS1.SISPSLIB
//         DD DISP=SHR,DSN=SYS1.SISFSLIB
//ISPTLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPPROF
//         DD DISP=SHR,DSN=SYS1.SISPTENU
//         DD DISP=SHR,DSN=SYS1.SISFTLIB
//         DD DISP=SHR,DSN=SYS1.SBPXTENU
//ISPTABL  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPPROF

Example: The default RACF group for storage support team is SYSSTOR
  SYS1.$ISPFDSN.SYSSTOR($ISPFDSN)   <--- STORAGE SUPPORT ISPFDSN PARMLIB
//ISPPLIB  DD DISP=SHR,DSN=SYS1.DFQPLIB
//ISPMLIB  DD DISP=SHR,DSN=SYS1.DFQMLIB
//ISPTLIB  DD DISP=SHR,DSN=SYS1.DFQTLIB

Example: User's personnel ISPFDSN parameter
  &SYSUID.ISPF.ISPPROF($ISPFDSN)
//SYSPROC  DD DISP=SHR,DSN=&SYSUID.CLIST
//ISPLLIB  DD DISP=SHR,DSN=&SYSUID.LOADLIB
//ISPPLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPPLIB
//ISPMLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPMLIB
//ISPSLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPSLIB
//ISPTLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPTLIB

SYNTAX OF ISPFDSN PARAMETER FILE
COLS ===>   12345678901234567890123456789012345678901234567890
            //SYSPROC  DD DISP=SHR,DSN=&SYSUID.CLIST
            //ISPPLIB  DD DISP=SHR,DSN=&SYSUID.ISPF.ISPPLIB
            //SYSUDUMP DD SYSOUT=X
            EXCLUDE=DB2
            INCLUDE=FILEMGR

Syntax rules of ISPFDSN parameter
1. INCLUDE=xxxxxxxx
   Include member xxxxxxxx in &prefix.$ISPFDSN.&sid(xxxxxxxx) or
                              &prefix.$ISPFDSN.&group(xxxxxxxx)
   (Note : INCLUDE= xxxxxxxx is invalid and member name longer 8 is
           truncated to 8)
   INCLUDE only allows one member per line.
   INCLUDE=MEM1,MEM2   <--  invalid
   INCLUDE=MEM1 MEM2   <--  invalid

2. EXCLUDE=xxxxxxxx
   Ignore the member xxxxxxxx from &prefix.$ISPFDSN.&sid(xxxxxxxx).
   For example you do not use DB2 in TSO and the global allocation
   ISPFDSN parameter include DB2. Use EXCLUDE=DB2 control statement
   to ignore the DB2 datasets allocation
   (Note : EXCLUDE= xxxxxxxx is invalid and member name longer than
           8 is truncated to 8)

3. DD statment does not support multiple lines (ie only 1 line)
   //SYSPROC  DD DISP=SHR,DSN=&SYSUID.CLIST  <--- Supported
   //SYSEXEC  DD DSN=&SYSUID.CLIST,DISP=SHR  <--- May work and still
                                                  under testing
   //SYSPROC  DD DISP=SHR,                   <--- Not Supported
   //            DSN=&SYSUID.CLIST

   (Note : DD has a lot of sub keywords, ISPFDSN only supports
    keyword DISP and DSN).
4. DD statment only support DISP and DSN keyword
   The following statement is not supported and it may be supported
   later.
   //SYSPROC  DD  DISP=SHR,DSN=USER.CLIST,UNIT=3390,VOL=SER=ZASYS1

5. Only support DISP=SHR/OLD/MOD and DISP=NEW is not supported

6. DSN supports PDS, PDSE and Sequential file. GDG is not supported.
   PDS/PDSE member is supported.
   //REPORT   DD  DISP=SHR,DSN=MY.REPORT(ABCD)   <--- valid

7. SYSOUT is supported

   //REPORT   DD  SYSOUT=*                   <--- invalid
   //REPORT   DD  SYSOUT=A                   <--- valid
   //REPORT   DD  SYSOUT=A,DEST=(nodename)   <--- valid

8. TERM
   //IPCSPRNT DD  TERM=TS                    <--- valid
                                                  set SYSOUT=X
   //IPCSPRNT DD  TERM=TS,SYSOUT=A           <--- valid
   //IPCSPRNT DD  TERM=TS,SYSOUT=*           <--- change SYSOUT=X
   //IPCSPRNT DD  SYSOUT=A,TERM=TS           <--- invalid

9. Variables
   A) &SYSUID is the TSO userid and it is only supported at the first
      level qualifier.
      &SYSUID.ISPF.ISPPROF  <--- valid
      SYS1.&SYSUID.XXX      <--- invalid
      SYS1.XXXX.&SYSUID     <--- invalid
   B) &SID is the LPAR name and it is only supported at the second
      level qualifier.
      SYS1.&SID.XXXX        <--- valid
      SYS1.XXXX.$SID        <--- invalid

Implementation Tips
1) Use LIBDEF to invoke infrequently used software product
2) For performance reason, the number of permanent ISPF datasets
   should be less than 100.
3) Ownership of ISPFDSN parameter file
   A) MVS support is the owner of global ISPFDSN dataset
   B) MVS support is also the owner of team ISPFDSN dataset. If users
      can update their team ISPFDSN parameter, don't allocate
      software product ISPFDSN parameter file in team ISPFDSN library
      because ISPFDSN will allocate files in team ISFDDSN library. If
      the member does not exist, it accesses global ISPFDSN library.
      Use unique ISPFDSN member to avoid error because duplicate name
      may cause unforseeable problem during MVS system upgrade. For
      example if you create ISPFDSN member DB2 in your team ISPFDSN
      parmlib and team $ISPFDSN has INCLUDE=DB2. ISPFDSN will access
      DB2 in your team ISPFDSN library to perform dataset allocation
      and do not access the DB2 of the global ISPFDSN parmlib library.
      During system upgrade, the DB2 ISPFDSN parmlib in global ISPFDSN
      library is updated but you are still using an not up-to-date
      version of DB2 in your team ISPFDSN library.
