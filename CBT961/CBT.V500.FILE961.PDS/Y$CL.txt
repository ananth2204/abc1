/* REXX exec to compare two lines                                     */
/*** trace ?r *****************************************************    *
*               (C) Copyright Robert AH Prins, 2010-2016               *
************************************************************************
*  ------------------------------------------------------------------  *
* | Date       | By   | Remarks                                      | *
* |------------+------+----------------------------------------------| *
* |            |      |                                              | *
* |------------+------+----------------------------------------------| *
* | 2017-06-20 | YCD  | Long line processing                         | *
* |------------+------+----------------------------------------------| *
* | 2016-02-16 | RAHP | Add label processing                         | *
* |------------+------+----------------------------------------------| *
* | 2011-01-07 | RAHP | Improve compare dif setting                  | *
* |------------+------+----------------------------------------------| *
* | 2010-09-22 | RAHP | Initial version                              | *
* |------------+------+----------------------------------------------| *
************************************************************************
* Y$CL is a REXX exec to compare two lines. It can be used in two      *
* ways:                                                                *
*                                                                      *
* - to compare two adjacent lines, place the cursor on the first of    *
*   the two and enter "Y$CL", or                                       *
* - mark the two lines to be compared with the labels ".EF" and ".EL"  *
*   and enter "Y$CL"                                                   *
************************************************************************
* Send questions, suggestions and/or bug reports to:                   *
*                                                                      *
* robert§prino.org / robert.ah.prins§gmail.com                         *
*                                                                      *
* Robert AH Prins                                                      *
* Taboralaan 46                                                        *
* 8400 Oostende                                                        *
* Belgium                                                              *
************************************************************************
* This program is free software: you can redistribute it and/or        *
* modify it under the terms of the GNU General Public License as       *
* published by the Free Software Foundation, either version 3 of       *
* the License, or (at your option) any later version.                  *
*                                                                      *
* This program is distributed in the hope that it will be useful,      *
* but WITHOUT ANY WARRANTY; without even the implied warranty of       *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
* GNU General Public License for more details.                         *
*                                                                      *
* You should have received a copy of the GNU General Public License    *
* along with this program. If not, see <http://www.gnu.org/licenses/>  *
***********************************************************************/
parse source source
parse value source with . . moi .

"isredit macro"
"ispexec control errors return"

"isredit (EF) = linenum .EF"
"isredit (EL) = linenum .EL"

if ef <> 0 & el <> 0 then
  do
    "isredit x .EF .EL all"
    "isredit hide x"
    "isredit l .EF"
    "isredit l .EL"

    "isredit (L1) = line .EF"
    "isredit (L2) = line .EL"

    zc = min(ef, el)
    n  = el - ef
    "isredit l" zc
  end
else
  do
    "isredit (ZL) = linenum .zl"
    "isredit (ZC) = linenum .zcsr"

    "isredit (L1) = line .zcsr"

    if zc <> zl then
      n =  1
    else
      n = -1

    "isredit (L2) = line" zc + n
  end

l1=strip(l1,"T")
l2=strip(l2,"T")

x   = left(' ', 256, '|')
dif = translate((bitxor(l1, l2)), x, xrange())

if dif = '' then
  dif = 'Lines ¬¬'zc + 0'¬¬ and vv'zc + n'vv are identical'
else
  do
    p = pos('||', dif)

    do while p > 0
      nb  = pos(' ', dif' ', p + 1)

      dif = left(dif, p - 1)'<'copies('-',nb - p - 2)'>' ||,
            substr(dif, nb)

      p   = pos('||', dif, nb)
    end
  end

if n > 0 then
  "isredit line_after"  zc "= infoline (DIF)"
else
  "isredit line_before" zc "= infoline (DIF)"
