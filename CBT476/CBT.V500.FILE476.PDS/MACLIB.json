{"INMR01": {"INMLRECL": 80, "INMFNODE": "CSDLMVS", "INMFUID": "SEB1525", "INMTNODE": "MVS", "INMTUID": "CSDL", "INMFTIME": "20000926092830000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "PROGLIB.ZILCBT.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"PROGLIB.ZILCBT.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "000269", "DS1SCEXT": "b'\\x80\\x18\\x10'", "DS1SCALO": "b'P\\x00\\x002'", "DS1LSTAR": "b'\\x00\\x04\\x08'", "DS1TRBAL": "b'\\xb9\\xce'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x04\\x10\\x00\\x04\\xa9-p'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x04\\x10\\x00\\x04\\xa9-p'", "b'X\\xf3V\\xc0\\x00\\x00\\x00Z\\x00\\x0b\\x00[\\x00\\x00\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#AATM": {"ttr": 13, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x01\\x006\\x001\\x006\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:01:00", "lines": 54, "newlines": 49, "modlines": 54, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #AATM &PNAME\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES AN IN-LINE SYMBOL.                            *\n.*                                                                    *\n.* EXAMPLE:  #AATM 'FOO'                                              *\n.*                                                                    *\n.* NOTE: USE OF THIS MACRO REQUIRES USE OF ZILSINT.                   *\n.*       SEE \"OPEN\" FOR AN EXAMPLE OF HOW TO CODE THIS.               *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &I,&L,&N,&Z\n         LCLC  &KNAME\n&KNAME   SETC  '&PNAME'            . PRINT NAME INCLUDING PASSED QUOTES\n&N       SETA  K'&KNAME-2          . LENGTH OF CHARACTERS INSIDE QUOTES\n&KNAME   SETC  '&KNAME'(2,&N)      . PRINT NAME WITH QUOTES REMOVED\n&I       SETA  1                   . INDEX THROUGH PRINT NAME\n&L       SETA  0                   . COMPUTED LENGTH OF PRINT NAME\n.LOOP    ANOP\n         AIF   (&I GT &N).LEND\n         AIF   (&I EQ &N).NOTQA\n         AIF   ('&KNAME'(&I,2) EQ '''''').P2\n         AIF   ('&KNAME'(&I,2) EQ '&&').P2\n.NOTQA   ANOP\n&L       SETA  &L+1\n&I       SETA  &I+1\n         AGO   .LOOP\n.P2      ANOP\n&L       SETA  &L+1\n&I       SETA  &I+2\n         AGO   .LOOP\n.LEND    ANOP\n&Z       SETA  4-(&L-((&L/4)*4))\n&NAME    DS    0A                  ALIGN SYMBOL TO FULLWORD\n         DC    YL1(##SYMBOL)       SYMBOL TYPE INDICATOR\n         DC    XL7'00'             RESERVED AREA FOR ZILSINT USE\n         DC    YL1(##STRING)       PRINT NAME TYPE INDICATOR\n         DC    AL3(&L)             PRINT NAME LENGTH\n         AIF   (&L EQ 0).NULL\n         DC    C'&KNAME'\n         AIF   (&Z EQ 4).NOFILL\n         DC    XL&Z'00'            FILL OUT TO FULLWORD BOUNDARY\n.NOFILL  ANOP\n         AGO   .MEND\n.NULL    ANOP\n         DC    XL4'00'             NULL PRINT NAME\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#BAS": {"ttr": 15, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x88\\x01_\\x00\\x89\\x16O\\x13\\x01\\x00\\x10\\x00\\n\\x00\\x10\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-01-15T00:00:00", "modifydate": "1989-06-13T13:01:00", "lines": 16, "newlines": 10, "modlines": 16, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #BAS  &R1,&A2\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &ZILXA\n         #ZSYS\n         AIF   (&ZILXA).BAS\n&NAME    BAL   &R1,&A2\n         AGO   .MEND\n.BAS     ANOP\n&NAME    BAS   &R1,&A2\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#BASR": {"ttr": 17, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x88\\x01_\\x00\\x89\\x16O\\x13\\x02\\x00\\x10\\x00\\n\\x00\\x0f\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-01-15T00:00:00", "modifydate": "1989-06-13T13:02:00", "lines": 16, "newlines": 10, "modlines": 15, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #BASR &R1,&R2\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &ZILXA\n         #ZSYS\n         AIF   (&ZILXA).BASR\n&NAME    BALR  &R1,&R2\n         AGO   .MEND\n.BASR    ANOP\n&NAME    BASR  &R1,&R2\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#EATM": {"ttr": 19, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x02\\x00\\x0f\\x00\\x0c\\x00\\r\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:02:00", "lines": 15, "newlines": 12, "modlines": 13, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #EATM &VALUE\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES A SINGLE PRECISION FLOATING POINT ATOM.       *\n.*                                                                    *\n.**********************************************************************\n&NAME    DS    0A\n         DC    YL1(##FLONUM),AL3(0),E'&VALUE'\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ERR": {"ttr": 21, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x862/\\x00\\x89\\x16O\\x13\\x02\\x00\\xcc\\x00\\xa6\\x00\\xca\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1986-11-18T00:00:00", "modifydate": "1989-06-13T13:02:00", "lines": 204, "newlines": 166, "modlines": 202, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #ERR  &SIGNAL=,&PREFIX=YES\n.*\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES A CALL TO ZILERR TO WRITE MESSAGES TO THE     *\n.* STANDARD OUTPUT FILE.                                              *\n.*                                                                    *\n.* THIS USES REGISTERS 0, 1, AND 15, AND REQUIRES 13 TO POINT TO      *\n.* THE COMMON AREA.                                                   *\n.*                                                                    *\n.* THE FIRST OPERAND IS THE SEVERITY LEVEL OF THE MESSAGE:            *\n.*                                                                    *\n.*   0 = INFORMATIONAL                                                *\n.*   1 = WARNING                                                      *\n.*   2 = ERROR                                                        *\n.*   3 = SEVERE                                                       *\n.*   4 = FATAL                                                        *\n.*   * = ALWAYS PRINT REGARDLESS OF SEVERITY/MSGLEVEL                 *\n.*                                                                    *\n.*    0 -      INFORMATIONAL: SUPPRESSED BY MSGLEVEL 1, 2 OR 3        *\n.*    1 -      WARNING:       SUPPRESSED BY MSGLEVEL 2 OR 3           *\n.*    2 -      ERROR:         SUPPRESSED BY MSGLEVEL 3                *\n.*    3 -      SEVERE:        NOT SUPPRESSED                          *\n.*    4 -      DISASTROUS:    NOT SUPPRESSED                          *\n.*    * -      UNCONDITIONAL: NOT SUPPRESSED                          *\n.*                                                                    *\n.* NOTE THAT 2, 3 AND 4 ALSO CAUSE AN ERROR TO BE SIGNALLED.          *\n.*                                                                    *\n.* THE REMAINDER OF THE OPERANDS ARE POSITIONALS WHICH DESCRIBE       *\n.* PORTIONS OF THE MESSAGE TO BE PRINTED.  THESE CAN BE:              *\n.*                                                                    *\n.* 'MESSAGE' - A CONSTANT STRING TO BE PRINTED AS IS.                 *\n.* REG#      - THE FIXNUM CONTENTS OF A REGISTER.                     *\n.* (REG#)    - THE OBJECT POINTED TO BY REGISTER #.                   *\n.* N(#11)    - THE OBJECT POINTED TO BY STACK LOCATION AT N OFF #11.  *\n.*                                                                    *\n.* \"REG\" MUST BE A REGISTER BETWEEN 2 AND 14.                         *\n.*                                                                    *\n.* EXAMPLES:                                                          *\n.*                                                                    *\n.*       #ERR  2,'BAD ARGUMENT',4(#11)                                *\n.*       #ERR  2,'THIS FUNCTION REQUIRES',#3,'ARGUMENTS'              *\n.*       #ERR  2,'INVALID TYPE FOR',#4                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &N,&I,&J,&L\n         LCLB  &SGNLERP,&NOPREFP,&SEVTSTP\n         LCLC  &SEV,&S,&X,&AROUND,&STR(100),&SL1(100),&SL2(100)\n&J       SETA  0\n&N       SETA  N'&SYSLIST\n&I       SETA  1\n&AROUND  SETC  'PAR&SYSNDX'\n         AIF   (&N LT 1).ERR1\n&SEV     SETC  '&SYSLIST(1)'\n         AIF   (K'&SEV GT 1).DEF2\n         AIF   ('&SEV' EQ '0').SEV0\n         AIF   ('&SEV' EQ '1').SEV1\n         AIF   ('&SEV' EQ '2').SEV2\n         AIF   ('&SEV' EQ '3').SEV3\n         AIF   ('&SEV' EQ '4').SEV4\n         AIF   ('&SEV' EQ '*').SEVA\n         AGO   .ERR2\n.SEV0    ANOP\n&S       SETC  '00'\n&SGNLERP SETB  0\n&SEVTSTP SETB  1\n         AGO   .GO\n.SEV1    ANOP\n&S       SETC  '01'\n&SGNLERP SETB  0\n&SEVTSTP SETB  1\n         AGO   .GO\n.SEV2    ANOP\n&S       SETC  '02'\n&SGNLERP SETB  1\n&SEVTSTP SETB  1\n         AGO   .GO\n.SEV3    ANOP\n&S       SETC  '03'\n&SGNLERP SETB  1\n&SEVTSTP SETB  1\n         AGO   .GO\n.SEV4    ANOP\n&S       SETC  '04'\n&SGNLERP SETB  1\n&SEVTSTP SETB  1\n         AGO   .GO\n.SEVA    ANOP\n&S       SETC  'FF'\n&SGNLERP SETB  0\n&SEVTSTP SETB  0\n         AGO   .GO\n.DEF2    ANOP\n&S       SETC  '02'\n&SGNLERP SETB  1\n&SEVTSTP SETB  1\n&I       SETA  0\n         AGO   .GO\n.GO      ANOP\n         AIF   ('&SIGNAL' EQ 'YES').SETZON\n         AIF   ('&SIGNAL' EQ 'NO').SETZOFF\n         AIF   ('&SIGNAL' NE '').ERR3\n         AIF   (&SGNLERP).SETZON\n         AGO   .SETZOFF\n.SETZON  ANOP\n&SGNLERP SETB  1\n         AGO   .CKPREF\n.SETZOFF ANOP\n&SGNLERP SETB  0\n.CKPREF  ANOP\n         AIF   ('&PREFIX' EQ '').PREFON\n         AIF   ('&PREFIX' EQ 'YES').PREFON\n         AIF   ('&PREFIX' EQ 'NO').PREFOFF\n         AGO   .ERR4\n.PREFON  ANOP\n&NOPREFP SETB  0\n         AGO   .DOIT\n.PREFOFF ANOP\n&NOPREFP SETB  1\n.DOIT    ANOP\n         AIF   (&SGNLERP OR (NOT &SEVTSTP)).NOBYP\n&NAME    CLI   ZLCMSLVL,X'&S'       IF MSGLEVEL EXCEEDS SEVERITY CODE\n         BH    &AROUND              THEN DON'T DISPLAY MESSAGE\n         XR    #1,#1                INDICATE CALL TO PRINT MESSAGE\n         AGO   .AFTBYP\n.NOBYP   ANOP\n&NAME    XR    #1,#1                INDICATE CALL TO PRINT MESSAGE\n.AFTBYP  ANOP\n         L     #15,ZLCERR           GET ADDRESS OF ZILERR\n         BALR  #0,#15               BRANCH TO ZILERR\n         DC    BL1'&SGNLERP.&NOPREFP.000000',X'&S'  FLAGS/SEVERITY\n.*\n.* LOOP THROUGH REMAINING POSITIONALS TO GENERATE ARGUMENTS\n.*\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &N).FIN\n&X       SETC  '&SYSLIST(&I)'\n&L       SETA  K'&X\n         AIF   (&L LT 3).NOTSTR\n         AIF   ('&X'(1,1) EQ '''').STRING\n         AIF   ('&X'(1,2) EQ 'X''').STRING\n.NOTSTR  AIF   ('&X'(1,1) EQ '(').REG\n         DC    S(&X)               PARAMETER\n         AGO   .LOOP\n.REG     ANOP\n         DC    S(0&X)              PARAMETER\n         AGO   .LOOP\n.STRING  ANOP\n&J       SETA  &J+1\n&STR(&J) SETC  '&X'\n&SL1(&J) SETC  '#P&SYSNDX.L&J'\n&SL2(&J) SETC  '#P&SYSNDX.E&J'\n         DC    S(&SL1(&J))         PARAMETER\n         AGO   .LOOP\n.FIN     ANOP\n         DC    Y(X'0FFF')          END OF PARAMETER LIST\n.*\n         AIF   (&J EQ 0).SLEND\n         AIF   (&SGNLERP).NOAR1\n         B     &AROUND             BRANCH AROUND STRINGS\n.NOAR1   ANOP\n.*\n.* LOOP THROUGH LITERAL STRINGS.\n.*\n&I       SETA  0\n.SLOOP   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &J).SLEND\n         DS    0H\n         ORG   *+1                 ALIGN TO BE NOT ON HALFWORD BOUNDARY\n&SL1(&I) DC    YL1(##STRING),AL3(&SL2(&I)-*-3)\n         AIF   ('&STR(&I)'(1,1) EQ '''').DCC\n         DC    &STR(&I)\n         AGO   .AFTDCC\n.DCC     ANOP\n         DC    C&STR(&I)\n.AFTDCC  ANOP\n&SL2(&I) EQU   *\n         AGO   .SLOOP\n.SLEND   ANOP\n         AIF   (&SEVTSTP AND (NOT &SGNLERP)).USEAR\n         AIF   (&J EQ 0).NOAR2\n         AIF   (&SGNLERP).NOAR2\n.USEAR   ANOP\n&AROUND  DS    0H\n.NOAR2   ANOP\n         MEXIT\n.ERR1    MNOTE 12,'MISSING ARGS ON #ERR MACRO'\n         MEXIT\n.ERR2    MNOTE 12,'INVALID SEVERITY ARG TO #ERR MACRO - &SEV'\n         MEXIT\n.ERR3    MNOTE 12,'INVALID VALUE FOR SIGNAL KEYWORD, MUST BE YES OR NO'\n         MEXIT\n.ERR4    MNOTE 12,'INVALID VALUE FOR PREFIX KEYWORD, MUST BE YES OR NO'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#GETC": {"ttr": 25, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x03\\x00\\x11\\x00\\x11\\x00\\x0f\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 17, "newlines": 17, "modlines": 15, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #GETC\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES CALLS TO ZILGETC.                             *\n.*                                                                    *\n.* NOTE THE NON-STANDARD INTERFACE.                                   *\n.*                                                                    *\n.**********************************************************************\n&NAME    L     #2,ZLCGETC               GET ADDRESS OF ZILGETC\n         #BASR #14,#2                   CALL ZILGETC TO GET A CHARACTER\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#GETMAIN": {"ttr": 27, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x88\\x01_\\x00\\x89\\x16O\\x13\\x03\\x00\\x1d\\x00\\n\\x00\\x1b\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1988-01-15T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 29, "newlines": 10, "modlines": 27, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #GETMAIN &R,&LV=,&LOC=\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &ZILXA\n         #ZSYS\n         AIF   (N'&LV EQ 1).LV1\n         AIF   (N'&LV EQ 2).LV2\n         MNOTE 12,'Invalid #GETMAIN LV parameter: &LV'\n         MEXIT\n.LV1     ANOP\n         AIF   (&ZILXA).XA1\n&NAME    GETMAIN &R,LV=&LV\n         AGO   .MEND\n.XA1     ANOP\n&NAME    GETMAIN &R,LV=&LV,LOC=&LOC\n         AGO   .MEND\n.LV2     ANOP\n         AIF   (&ZILXA).XA2\n&NAME    GETMAIN &R,LV=(&LV(1),&LV(2))\n         AGO   .MEND\n.XA2     ANOP\n&NAME    GETMAIN &R,LV=(&LV(1),&LV(2)),LOC=&LOC\n         AGO   .MEND\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#GLOBALS": {"ttr": 29, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x01?\\x00\\x89\\x16O\\x13\\x03\\x00\\r\\x00\\x01\\x00\\r\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-01-13T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 13, "newlines": 1, "modlines": 13, "user": "SEB1525"}, "text": "**********************************************************************\n*                                                                    *\n* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n*                     All rights reserved.                           *\n*                                                                    *\n**********************************************************************\n*\n* This text is from copy member #GLOBALS, defining global SETB symbols.\n*\n         GBLB  &ZILMVS,&ZIL370,&ZILXA,&ZILVF,&ZILCMS,&ZILTSO,&ZILVPS\n*\n* End of copy member #GLOBALS.\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#IATM": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x03\\x00\\x0f\\x00\\x0c\\x00\\r\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 15, "newlines": 12, "modlines": 13, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #IATM &VALUE\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES A FIXNUM ATOM.                                *\n.*                                                                    *\n.**********************************************************************\n&NAME    DS    0A\n         DC    YL1(##FIXNUM),AL3(0),F'&VALUE'\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#IFIL": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x03\\x00\\x13\\x00\\x10\\x00\\x11\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 19, "newlines": 16, "modlines": 17, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #IFIL &ARGNO\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO SETS THE INPUT FILE SPEC FOR READ-TYPE FUNCTIONS.       *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &OFF\n&OFF     SETA  4*(&ARGNO-1)\n         L     #1,&OFF.(,#11)      GET FILE SPEC ARGUMENT\n         L     #15,ZLCFGETI        GET ADDRESS OF INPUT FILE LOCATOR\n         #BASR #14,#15             CALL FILE LOCATOR (SETS #7)\n         USING ZLFILBLK,#7\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#MKAT": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x03\\x00B\\x00/\\x00@\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 66, "newlines": 47, "modlines": 64, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #MKAT &TYPE\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO BUILDS AN ATOM FROM A NUMERIC VALUE CONTAINED IN        *\n.* REGISTER 2.  REGISTERS 1, 2, 14, AND 15 ARE USED WHEN CONS IS      *\n.* INVOKED TO BUILD THE ATOM.  THE RESULTING ATOM IS RETURNED         *\n.* IN REGISTER 15.                                                    *\n.*                                                                    *\n.* ON ENTRY, REG 2 MUST CONTAIN THE VALUE; REG 0 MUST CONTAIN THE     *\n.* CURRENT TOP-OF-STACK ADDRESS.                                      *\n.*                                                                    *\n.* VALID CALLS:                                                       *\n.*                                                                    *\n.*       #MKAT  FIXED       REG 2 CONTAINS FIXNUM VALUE               *\n.*                                                                    *\n.*       #MKAT  FLOAT       REG 2 CONTAINS FLONUM VALUE               *\n.*                                                                    *\n.*       #MKAT  ALPHA       REG 2 CONTAINS POINTER TO PNAME STRING    *\n.*                          (HIGH-ORDER BYTE MUST BE CLEAN).          *\n.*                          NOTE: THIS CREATES AN UNINTERNED SYMBOL!  *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&TYPE' EQ 'ALPHA').MKALF\n         AIF   ('&TYPE' EQ 'FIXED').MKFIX\n         AIF   ('&TYPE' EQ 'FLOAT').MKFLO\n         MNOTE 12,'#MKAT TYPE MUST BE FIXED, FLOAT OR ALPHA'\n         MEXIT\n.*\n.* OLD FIXNUM CODE, BEFORE FIXNUM TABLE WAS CREATED\n.*\n.*KFIX  ANOP\n.*YM     LA    #1,##FIXNUM            SET ATOM TYPE\n.*       L     #15,ZLCCONS            GET ADDRESS OF CONS ROUTINE\n.*       SLL   #1,24                  SHIFT TYPE TO HIGH ORDER BYTE\n.*       AGO   .CONS\n.*\n.* ACTIVATED BECAUSE THE FIXNUM TABLE EXISTS.\n.* THIS ASSUMES THAT (1) THERE IS A TABLE OF CONSTANT FIXNUMS\n.* SITUATED PAST THE ATOM T, AND THEREFORE ADDRESSABLE BY #8, AND\n.* (2) THE ATOM T IS EITHER 8, 16, OR 24 BYTES LONG.\n.*\n.MKFIX  ANOP\n&SYM     L     #15,ZLCCONS            GET ADDRESS OF CONS ROUTINE\n         L     #1,#SFT                LOAD FIXNUM TYPE FROM FIXTBL\n         AGO   .CONS\n.MKFLO   ANOP\n&SYM     LA    #1,##FLONUM            SET ATOM TYPE\n         L     #15,ZLCCONS            GET ADDRESS OF CONS ROUTINE\n         SLL   #1,24                  SHIFT TYPE TO HIGH ORDER BYTE\n         AGO   .CONS\n.MKALF   ANOP\n&SYM     LA    #1,##SYMBOL            SET ATOM TYPE\n         L     #15,ZLCCONS            GET ADDRESS OF CONS ROUTINE\n         SLL   #1,24                  SHIFT TYPE TO HIGH ORDER BYTE\n         OR    #1,#2                  SET PRINT NAME POINTER\n         LR    #2,#10                 SET PROPERTY LIST TO NIL\n.CONS    ANOP\n.******* L     #15,ZLCCONS            (INTERLEAVED FOR PIPELINING)\n         #BASR #14,#15                CALL CONS TO BUILD ATOM\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#OFIL": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x03\\x00\\x13\\x00\\x10\\x00\\x11\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 19, "newlines": 16, "modlines": 17, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #OFIL &ARGNO\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO SETS THE OUTPUT FILE SPEC FOR PRINT-TYPE FUNCTIONS.     *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &OFF\n&OFF     SETA  4*(&ARGNO-1)\n         L     #1,&OFF.(,#11)      GET FILE SPEC ARGUMENT\n         L     #15,ZLCFGETO        GET ADDRESS OF OUTPUT FILE LOCATOR\n         #BASR #14,#15             CALL FILE LOCATOR (SETS #7)\n         USING ZLFILBLK,#7\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#RTBL": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x855\\x7f\\x00\\x89\\x16O\\x13\\x03\\x00,\\x00*\\x00,\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1985-12-23T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 44, "newlines": 42, "modlines": 44, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #RTBL\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*\n.* SUPPORT FOR \"$$\" LISP 1.5 SYNTAX REMOVED.\n.*\n.**********************************************************************\n         AIF   ('&NAME' NE '').OK\n         MNOTE 12,'READ TABLE NAME REQUIRED'\n         MEXIT\n.OK      ANOP\n*\n* THE READ TABLE\n*\n&NAME    DC    256YL1(00)          READ TABLE\n         ORG   &NAME+C'('\n         DC    YL1(##LEFTP)        LEFT PARENTHESIS\n         ORG   &NAME+C')'\n         DC    YL1(##RIGHTP)       RIGHT PARENTHESIS\n         ORG   &NAME+C' '\n         DC    YL1(##BLANK)        BLANK\n         ORG   &NAME+C'.'\n         DC    YL1(##PERIOD)       PERIOD\n         ORG   &NAME+C'\u00a2'\n         DC    YL1(##CONT)         CENT SIGN\n         ORG   &NAME+C';'\n         DC    YL1(##SEMI)         SEMICOLON\n         ORG   &NAME+C'\\' X'E0'\n         DC    YL1(##ESCAPE)       BACKSLASH\n         ORG   &NAME+C'|' X'4F'\n         DC    YL1(##BAR)          VERTICAL BAR\n         ORG   &NAME+C'\"'\n         DC    YL1(##DQUOTE)       DOUBLE QUOTE MARK\n.******* ORG   &NAME+C':'\n.******* DC    YL1(##COLON)        PACKAGE DELIMITER\n.******* ORG   &NAME+C'/'\n.******* DC    YL1(##SLASH)        RATIONAL NUMBER MARKER\n         ORG   ,                   END OF TABLE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SATM": {"ttr": 267, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x862/\\x00\\x89\\x16O\\x13\\x03\\x002\\x00/\\x000\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-11-18T00:00:00", "modifydate": "1989-06-13T13:03:00", "lines": 50, "newlines": 47, "modlines": 48, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #SATM &TEXT\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES AN IN-LINE STRING.                            *\n.*                                                                    *\n.* EXAMPLE:  #SATM 'DON''T TREAD ON ME!'                              *\n.*                                                                    *\n.* NOTE: STRINGS ARE NOT AUTOMATICALLY ALIGNED BY THIS MACRO.         *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &I,&L,&N,&Z\n         LCLC  &KTEXT\n&KTEXT   SETC  '&TEXT'             . STRING TEXT INCLUDING QUOTES\n&N       SETA  K'&KTEXT-2          . LENGTH OF CHARACTERS INSIDE QUOTES\n&KTEXT   SETC  '&KTEXT'(2,&N)      . STRING TEXT WITH QUOTES REMOVED\n&I       SETA  1                   . INDEX THROUGH STRING TEXT\n&L       SETA  0                   . COMPUTED LENGTH OF STRING TEXT\n.LOOP    ANOP\n         AIF   (&I GT &N).LEND\n         AIF   (&I EQ &N).NOTQA\n         AIF   ('&KTEXT'(&I,2) EQ '''''').P2\n         AIF   ('&KTEXT'(&I,2) EQ '&&').P2\n.NOTQA   ANOP\n&L       SETA  &L+1\n&I       SETA  &I+1\n         AGO   .LOOP\n.P2      ANOP\n&L       SETA  &L+1\n&I       SETA  &I+2\n         AGO   .LOOP\n.LEND    ANOP\n&Z       SETA  4-(&L-((&L/4)*4))\n&NAME    DC    YL1(##STRING)       STRING TEXT TYPE INDICATOR\n         DC    AL3(&L)             STRING TEXT LENGTH\n         AIF   (&L EQ 0).NULL\n         DC    C'&KTEXT'\n         AIF   (&Z EQ 4).NOFILL\n         DC    XL&Z'00'            FILL OUT TO FULLWORD BOUNDARY\n.NOFILL  ANOP\n         AGO   .MEND\n.NULL    ANOP\n         DC    XL4'00'             NULL STRING TEXT\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#TPUT": {"ttr": 269, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x853\\x9f\\x00\\x89\\x16O\\x13\\x04\\x00k\\x00Z\\x00k\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 107, "newlines": 90, "modlines": 107, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #TPUT ,\n.*\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES A CALL TO TPUT TO WRITE TERMINAL MESSAGES.    *\n.*                                                                    *\n.* THIS USES REGISTERS 0, 1, 14, AND 15, AND REQUIRES 13 TO POINT TO  *\n.* THE COMMON AREA.                                                   *\n.*                                                                    *\n.* FROM 1 TO 4 OPERANDS MAY BE CODED:                                 *\n.*                                                                    *\n.*   (1) THE SEVERITY LEVEL OF THE MESSAGE (0 THROUGH 4) - OPTIONAL   *\n.*   (2) THE ADDRESS OF THE MESSAGE TEXT - REQUIRED                   *\n.*   (3) THE LENGTH OF THE MESSAGE TEXT - OPTIONAL                    *\n.*   (4) \"ASIS\" - OPTIONAL                                            *\n.*                                                                    *\n.*  THE ADDRESS MAY BE CODED AS (1), MEANING IT IS ALREADY IN REG 1   *\n.*  (IN WHICH CASE THE LENGTH MUST BE CODED AS WELL).                 *\n.*  THE LENGTH MAY BE CODED AS (0), MEANING IT IS ALREADY IN REG 0.   *\n.*                                                                    *\n.*  IF THE SEVERITY LEVEL IS OMITTED, THE MESSAGE IS ALWAYS SENT.     *\n.*  IF THE LENGTH IS OMITTED, IT IS DERIVED FROM THE MESSAGE TEXT,    *\n.*  WHICH MUST BE A CHARACTER DC IN THAT CASE.                        *\n.*                                                                    *\n.*  SEVERITY LEVELS ARE SENSITIVE TO THE ZIL (MSGLEVEL) SETTING:      *\n.*                                                                    *\n.*    0 -      INFORMATIONAL: SUPPRESSED BY MSGLEVEL 1, 2 OR 3        *\n.*    1 -      WARNING:       SUPPRESSED BY MSGLEVEL 2 OR 3           *\n.*    2 -      ERROR:         SUPPRESSED BY MSGLEVEL 3                *\n.*    3 -      SEVERE:        NOT SUPPRESSED                          *\n.*    4 -      DISASTROUS:    NOT SUPPRESSED                          *\n.*    * -      UNCONDITIONAL: NOT SUPPRESSED                          *\n.*                                                                    *\n.* EXAMPLES:                                                          *\n.*                                                                    *\n.*       #TPUT MSG1                                                   *\n.*       #TPUT 2,MSG1                                                 *\n.*       #TPUT 2,MSG1,10                                              *\n.*       #TPUT 2,MSG1,10,ASIS                                         *\n.* MSG1  DC    C'A MESSAGE.'                                          *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLC  &SEV,&MSG,&LEN,&LBL,&QUO,&ASIS\n&LBL     SETC  'ZLCT&SYSNDX'\n&QUO     SETC  ''''\n         AIF   (N'&SYSLIST EQ 1).SET1\n         AIF   (N'&SYSLIST EQ 2).SET2\n         AIF   (N'&SYSLIST EQ 3).SET3\n         AIF   (N'&SYSLIST EQ 4).SET4\n         MNOTE 12,'TOO MANY ARGUMENTS ON #TPUT MACRO'\n         MEXIT\n.SET1    ANOP\n&SEV     SETC  ''\n&MSG     SETC  '&SYSLIST(1)'\n&LEN     SETC  'L&QUO&MSG'\n         AGO   .SET\n.SET2    ANOP\n&SEV     SETC  '&SYSLIST(1)'\n&MSG     SETC  '&SYSLIST(2)'\n&LEN     SETC  'L&QUO&MSG'\n         AGO   .SET\n.SET3    ANOP\n&SEV     SETC  '&SYSLIST(1)'\n&MSG     SETC  '&SYSLIST(2)'\n&LEN     SETC  '&SYSLIST(3)'\n         AGO   .SET\n.SET4    ANOP\n&SEV     SETC  '&SYSLIST(1)'\n&MSG     SETC  '&SYSLIST(2)'\n&LEN     SETC  '&SYSLIST(3)'\n&ASIS    SETC  '&SYSLIST(4)'\n.SET     ANOP\n         AIF   ('&SEV' EQ '0' OR '&SEV' EQ '1' OR '&SEV' EQ '2' OR '&SEX\n               V' EQ '3' OR '&SEV' EQ '4' OR '&SEV' EQ '*' OR '&SEV' EQX\n                '').SEVOK\n         MNOTE 12,'INVALID #TPUT FIRST OPERAND - &SEV'\n         MEXIT\n.SEVOK   ANOP\n&NAME    DS    0H\n         AIF   ('&SEV' EQ '' OR '&SEV' EQ '*').NOSEV\n         CLI   ZLCMSLVL,&SEV          IF MSGLEVEL EXCEEDS SEVERITY CODE\n         BH    &LBL                   THEN DON'T DISPLAY MESSAGE\n.NOSEV   ANOP\n         AIF   ('&MSG' EQ '(1)').NOMSG\n         LA    1,&MSG                 GET ADDRESS OF MESSAGE\n.NOMSG   ANOP\n         AIF   ('&LEN' EQ '(0)').NOLEN\n         LA    0,&LEN                 GET LENGTH OF MESSAGE\n.NOLEN   ANOP\n         AIF   ('&ASIS' EQ 'ASIS').ASIS\n         AIF   ('&ASIS' EQ '').NOASIS\n         MNOTE 12,'INVALID OPERAND 4 - \"ASIS\" IS THE ONLY VALID VALUE'\n         MEXIT\n.ASIS    ANOP\n         LCR   0,0                    INDICATE ASIS SPECIFIED\n.NOASIS  ANOP\n         L     15,ZLCTPUT             GET ADDRESS OF TPUT PROCESSOR\n         #BASR 14,15                  CALL ZILTPUT\n&LBL     DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZBEG": {"ttr": 272, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x04\\x00\\xf8\\x00\\xcb\\x00\\xf7\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 248, "newlines": 203, "modlines": 247, "user": "SEB1525"}, "text": "         MACRO\n&SYMB    #ZBEG &NAME='NIL',&MAIN=YES,&TYPE=FUNCTION,                   X\n               &GOTO=ZLBSTART,&PTRS=,                                  X\n               &PDSIZE=0,&CSSIZE=0,&VSSIZE=0,&ACSIZE=0,                X\n               &ATOMS=NIL,&SUBRS=NIL,&LISTS=NIL,                       X\n               &MINARGS=1,&MAXARGS=0,&RESTARG=NIL,                     X\n               &LEXPR=NIL,                                             X\n               &AMODE=24,&RMODE=24\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* SUPPORT CODE FOR ALL COMPILED ZIL MAINLINE PROGRAMS.  THIS IS THE  *\n.* FIRST CODE IN THE CONTROL SECTION.  REGISTER 14 CONTAINS THE       *\n.* RETURN ADDRESS ON ENTRY.  REGISTER 15 POINTS TO BEGINNING OF CODE. *\n.*                                                                    *\n.* MEANING OF THE \"MAIN\" AND \"TYPE\" PARAMETERS:                       *\n.*                                                                    *\n.* A TOPLEVEL PROGRAM HAS TYPE=PROGRAM.  ITS MAIN PROCEDURE IS NAMED  *\n.* ZILMAIN AND HAS MAIN=YES.                                          *\n.*                                                                    *\n.* A FUNCTION (WHICH CAN BE BROUGHT IN VIA LINKEDIT)                  *\n.* HAS TYPE=FUNCTION.  ITS EPONYMOUS DEFINITION HAS MAIN=YES.         *\n.*                                                                    *\n.* ANY FUNCTIONS INTERNAL TO THE MAIN CODE HAVE MAIN=NO.              *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* NOTE:  DEFAULT IS MINARGS=1 AND MAXARGS=0, SO THAT ANY FUNCTION    *\n.*        THAT OMITS THESE OPERANDS WILL GET AN ERROR IF EXECUTED.    *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &ZSVARGS\n         GBLB  &MAINP,&PROGP,&ZILTHRU\n         GBLB  &ZILMVS,&ZIL370,&ZILXA,&ZILVF,&ZILCMS,&ZILTSO,&ZILVPS\n         GBLC  &ZILAR,&ZILARH\n         LCLB  &SBIT,&PBIT,&RBIT,&LBIT\n         LCLC  &ATOMSS,&ATOMSE,&LISTSS,&LISTSE\n         LCLC  &BITS1,&BITS2\n&ZILAR   SETC  'ZILA&SYSNDX'\n&ZILARH  SETC  'ZILB&SYSNDX'\n&MAINP   SETB  0\n&PROGP   SETB  0\n         AIF   ('&TYPE'(1,1) NE 'P').NOTPROG\n&PROGP   SETB  1\n.NOTPROG ANOP\n         AIF   ('&MAIN'(1,1) NE 'Y').NOTMAIN\n&MAINP   SETB  1\n.NOTMAIN ANOP\n.*\n.* SET MODULE HEADER BITS\n.*\n&SBIT    SETB  ('&SUBRS' NE 'NIL')\n&PBIT    SETB  (&PROGP)\n&RBIT    SETB  ('&RESTARG' NE 'NIL')\n&LBIT    SETB  ('&LEXPR' NE 'NIL')\n&BITS1   SETC  '&SBIT.&PBIT.000000'\n&BITS2   SETC  '&RBIT.&LBIT.000000'\n.*\n.* SET GLOBAL # OF ARGS TO DEFAULTLY SAVE ON STACK PER #ZSAV MACRO\n.*\n&ZSVARGS SETA  &MAXARGS\n         AIF   (NOT &RBIT).NZSVINC\n&ZSVARGS SETA  &MAXARGS+1\n.NZSVINC ANOP\n.*\n.* GENERATE MAPPING MACROS ONCE ONLY\n.*\n         AIF   (&ZILTHRU).ZILBYP\n&ZILTHRU SETB  1\n         #ZSYS ,                   DEFINE TARGET OPERATING SYSTEM\n         #ZEQU ,                   DEFINE ALL EQUATES\n         #ZCOM ,                   MAP THE COMMON AREA\n         #ZSFT ,                   DEFINE SMALL FIXNUM TABLE\n.ZILBYP  AIF   (NOT &MAINP OR NOT &PROGP).L1\n.*\n.* ONLY IF MAINP AND PROGP\n.*\nZILMAIN  CSECT\n         AIF   (NOT &ZILXA).NOMODES\nZILMAIN  AMODE &AMODE\nZILMAIN  RMODE &RMODE\n.NOMODES ANOP\n         AGO   .L2\n.L1      ANOP\n.*\n.* ALL OTHER CASES\n.*\n         AIF   (NOT &MAINP).NOCS1\n.*\n.* ONLY IF MAINP\n.*\n&SYMB    CSECT\n         AGO   .AFTCS1\n.NOCS1   ANOP\n.*\n.* ONLY IF NOT MAINP\n.*\n&SYMB    DS    0D\n.AFTCS1  ANOP\n.L2      ANOP\n.*\n.* ALL TOGETHER NOW\n.*\n         B     &ZILARH-*(,15)      BRANCH AROUND IDENTIFIER\n         DC    YL1(&ZILAR-*-1)\n         DC    C&NAME\n         DC    C' &SYSDATE &SYSTIME '\n&ZILAR   EQU   *                   END OF IDENTIFIER\n         AIF   (NOT &MAINP OR NOT &PROGP).L3\n.*\n.* ONLY IF MAINP AND PROGP\n.*\n         DS    0A                   FIELDS USED BY LOADER, INTERPRETER\n         DC    B'&BITS1'            SUBR/PROGRAM INDICATORS\n         DC    B'&BITS2'            RESTARG/LEXPR INDICATORS\n         DC    YL1(&MINARGS)        MINIMUM # OF ARGUMENTS FOR FUNCTION\n         DC    YL1(&MAXARGS)        MAXIMUM # OF ARGUMENTS FOR FUNCTION\n&ZILARH  DS    0H                  START OF CODE\n         STM   14,12,12(13)        SAVE REGISTERS\n         LR    12,15               ESTABLISH BASE REGISTER\n         USING ZILMAIN,12\n         LA    1,ZLBSAVE           GET LENGTH OF SAVE AREA\n         ST    13,4(,1)            CHAIN SAVE AREAS\n         ST    1,8(,13)\n         LR    13,1\n         L     1,ZLBSTPTR          PASS EXECUTABLE CSECT CODE TO INIT.\n         LINK  SF=(E,ZLBINIT)      LINK TO INITIALIZATION MODULE\n         STM   14,12,12(13)        SAVE REGS IN OUR OWN SAVE AREA\n         L     13,8(,13)           SET REG 13 TO POINT TO COMMON AREA\n         USING ZLCOMMON,13         ESTABLISH ADDRESSABILITY TO COMMON\n         LR    1,11                POINT TO INITIAL STACK LOCATION\n         L     15,ZLBSTPTR         ADDRESS COMPILED CODE\n         BALR  14,15               CALL COMPILED CODE\n         L     2,ZLCRETCD          LOAD RETURN CODE\n         L     13,4(,13)           SET REG 13 TO POINT TO OUR AREA\n         ST    2,28(,13)           STORE REG 2 (RET CODE) IN SAVE AREA\n         LM    14,12,12(13)        RESTORE REGS IN OUR OWN SAVE AREA\n         DROP  13\nZLBRET   DS    0H\n         LINK  SF=(E,ZLBTERM)      LINK TO TERMINATION MODULE\n         L     13,4(,13)           RESTORE HIGHER SAVEAREA\n         ST    2,16(,13)           STORE RETURN CODE IN SAVE AREA\n         LM    14,12,12(13)        RESTORE REGISTERS WITH RETURN CODE\n         BR    14                  RETURN TO SYSTEM\n         SPACE 2\nZLBSAVE  DS    18A                 TOP LEVEL SAVE AREA\nZLBSTPTR DC    A(&SYMB)            ADDRESS OF START OF EXECUTABLE CODE\nZLBINIT  LINK  SF=L,EP=ZILINIT     LINK TO INITIALIZATION MODULE\nZLBTERM  LINK  SF=L,EP=ZILTERM     LINK TO TERMINATION MODULE\n         SPACE 1\n         DROP  12\n.L3      ANOP\n.*\n.* THIS IS FOR EVERYBODY\n.*\n         EJECT\n         AIF   (NOT &MAINP OR NOT &PROGP).NOCS2\n.*\n.* ONLY IF MAINP AND PROGP\n.*\n&SYMB    CSECT\n.NOCS2   ANOP\n.*\n.* ALL TOGETHER AGAIN\n.*\n         SPACE 2\n         USING &SYMB,15\n         USING ZLCOMMON,13\n         USING #SFTD,8\n         AIF   (NOT &MAINP OR NOT &PROGP).L4\n.*\n.* ONLY IF MAINP AND PROGP\n.*\n         B     &GOTO               BRANCH AROUND ADDRESSES\n.L4      ANOP\n         AIF   (&MAINP AND &PROGP).L5\n.*\n.* ONLY IF NOT (MAINP AND PROGP)\n.*\n         DS    0A                   FIELDS USED BY LOADER, INTERPRETER\n         DC    B'&BITS1'            SUBR/PROGRAM INDICATORS\n         DC    B'&BITS2'            RESTARG/LEXPR INDICATORS\n         DC    YL1(&MINARGS)        MINIMUM # OF ARGUMENTS FOR FUNCTION\n         DC    YL1(&MAXARGS)        MAXIMUM # OF ARGUMENTS FOR FUNCTION\n.L5      ANOP\n         AIF   (&PROGP).L6\n.*\n.* ONLY IF NOT PROGP\n.*\n         AIF   (NOT &SBIT).NOSUBRS\n         DC    A(&SUBRS.S,&SUBRS.E) ADDRESS OF EXTERNAL SUBROUTINES\n.NOSUBRS ANOP\n.L6      ANOP\n         AIF   ('&ATOMS+&LISTS' EQ 'NIL+NIL' AND NOT &PROGP).LA\n         AIF   (NOT &MAINP AND '&PTRS' EQ 'NIL').LA\n.*\n.* ONLY IF MAINP OR WE HAVE PTRS\n.*\n&ATOMSS  SETC  '0'\n&ATOMSE  SETC  '0'\n&LISTSS  SETC  '0'\n&LISTSE  SETC  '0'\n         AIF   ('&ATOMS' EQ 'NIL').NOATOMS\n&ATOMSS  SETC  '&ATOMS.S'\n&ATOMSE  SETC  '&ATOMS.E'\n.NOATOMS AIF   ('&LISTS' EQ 'NIL').NOLISTS\n&LISTSS  SETC  '&LISTS.S'\n&LISTSE  SETC  '&LISTS.E'\n.NOLISTS ANOP\n         AIF   (NOT &MAINP OR NOT &PROGP).L6A\n.*\n.* ONLY IF MAINP AND PROGP\n.*\n&ATOMSS  SETC  'ZILATOMS'\n&ATOMSE  SETC  'ZILATOME'\n&LISTSS  SETC  'ZILLISTS'\n&LISTSE  SETC  'ZILLISTE'\n.L6A     ANOP\n.* THE FOLLOWING FIELDS MUST MATCH THE DECLARATION IN MACRO #ZHDR.\n&PTRS    DS    0A                   POINTERS USED BY INITIALIZATION\n         DC    A(&ATOMSS,&ATOMSE)   ADDRESSES OF INLINE SYMBOLS\n         DC    A(&LISTSS,&LISTSE)   ADDRESSES OF INLINE LISTS\n         AIF   (NOT &MAINP OR NOT &PROGP).LA\n.*\n.* ONLY IF MAINP AND PROGP\n.*\n         DC    A(ZILOPTS)          ADDRESS OF OPTIONS LIST\n         DC    V(ZILMODS)          ADDRESS OF ZIL MODULES TABLE\nZILOPTS  DS    0A\nZILPDSIZ DC    A(&PDSIZE)          PUSH DOWN LIST SIZE\nZILCSSIZ DC    A(&CSSIZE)          SIZE OF CONS SPACE\nZILVSSIZ DC    A(&VSSIZE)          SIZE OF VECTOR/STRING SPACE\nZILACSIZ DC    A(&ACSIZE)          SIZE OF ACTIVE CONS SPACE\nZILOPTE  EQU   *                   END OF OPTIONS LIST\n&GOTO    DS    0H                  CODE STARTS HERE\n         AGO   .LEND\n.LA      ANOP\n         AIF   (&MAINP AND &PROGP).LEND\n.*\n.* FOR ALL EXCEPT MAINP-AND-PROGP\n.*\n&ZILARH  DS    0H                  START OF CODE\n.LEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZCOM": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01F\\x00\\x00\\x00\\x854\\x0f\\x00\\x893_\\tT\\x01g\\x00\\xab\\x01e\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.70", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-12-01T09:54:00", "lines": 359, "newlines": 171, "modlines": 357, "user": "SEB1525"}, "text": "         MACRO\n         #ZCOM\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* THIS MACRO MAPS THE COMMON AREA USED BY ALL ZIL ROUTINES.  IT IS    *\n* POINTED TO BY REGISTER 13 (NOTE THE SAVE AREA AT THE TOP) AND HAS   *\n* POINTERS TO VARIOUS FIELDS INCLUDING GARBAGE COLLECTION FIELDS.     *\n*                                                                     *\n***********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.* Change activity:                                                   *\n.*                                                                    *\n.* 06/01/88 - Added ZLCVALS field for address of ZILVALS.  See #ZSUB. *\n.* 11/08/88 - Added fields to support enhanced reader interface.      *\n.* 12/01/89 - Added EBCDIC/ASCII collating flag for Macsyma.          *\n.*                                                                    *\n.**********************************************************************\n.*\n         SPACE\nZLCOMMON DSECT ,                   COMMON AREA MAPPING\n         SPACE 1\nZLCSAVE  DS    9D                  OS SAVE AREA\nZLCSAVE2 DS    9D                  OS SAVE AREA\nZLCDBL   DS    D                   WA FOR MISCELLANEOUS CONVERSIONS\nZLCWORK  EQU   ZLCDBL,4,C'F'       WA FOR MISCELLANEOUS CONVERSIONS\nZLC24ADR DS    A                   ADDRESS OF 24-BIT STORAGE AREA\nZLC24SIZ DS    A                   LENGTH OF 24-BIT STORAGE AREA\nZLC31ADR DS    A                   ADDRESS OF 31-BIT STORAGE AREA\nZLC31SIZ DS    A                   LENGTH OF 31-BIT STORAGE AREA\nZLCCSADR DS    A                   ADDRESS OF CONS SPACE\nZLCCMADR DS    A                   ADDRESS OF COMMON AREA\nZLCPDADR DS    A                   ADDRESS OF PUSH DOWN STACK\nZLCCSSIZ DS    A                   SIZE OF CONS SPACE\nZLCCMSIZ DS    A                   SIZE OF COMMON AREA\nZLCPDSIZ DS    A                   SIZE OF PUSH DOWN STACK\nZLCOSSIZ DS    A                   SIZE TO RETURN TO SYSTEM\nZLCNFREE DS    A                   COUNT OF FREE LIST CELLS\n         SPACE\nZLCVSADR DS    A                   ADDRESS OF VECTOR/STRING SPACE\nZLCVSLEN DS    A                   LENGTH OF VECTOR/STRING SPACE\nZLCVSNXT DS    A                   NEXT AVAILABLE VECTOR/STRING SLOT\nZLCVSOTH DS    A                   ADDRESS OF OTHER HALF OF VS SPACE\n         SPACE\nZLCPSSIZ DS    A                   SIZE OF PRINT STACK\nZLCPSADR DS    A                   ADDRESS OF PRINT STACK\nZLCPSEND DS    A                   ADDRESS OF END OF PRINT STACK\n         SPACE 1\nZLCWA    DS    A                   ADDRESS OF ZIL WORK AREA\nZLCWALEN DS    F                   LENGTH OF ZIL WORK AREA\nZLCDWA   DS    A                   ADDRESS OF ZILADMP WORK AREA\nZLCDWALN DS    F                   LENGTH OF ZILADMP WORK AREA\nZLCTWA   DS    A                   ADDRESS OF PRINC/REFORMAT WORK AREA\nZLCTWALN DS    F                   LENGTH OF PRINC/REFORMAT WORK AREA\n         SPACE 1\nZLCIFBAD DS    A                   ADDRESS OF INPUT FILE BLOCK CHAIN\nZLCOFBAD DS    A                   ADDRESS OF OUTPUT FILE BLOCK CHAIN\nZLCSTDIN DS    A                   ADDRESS OF FILE BLOCK FOR STD INPUT\nZLCSTDOU DS    A                   ADDRESS OF FILE BLOCK FOR STD OUTPUT\nZLCIFTRM DS    A                   ADDR OF TERMINAL INPUT FILE BLOCK\nZLCOFTRM DS    A                   ADDR OF TERMINAL OUTPUT FILE BLOCK\nZLCDRIBL DS    A                   ADDRESS OF DCB FOR DRIBBLE FILE\n         SPACE 1\nZLCRETCD DS    A                   RETURN CODE TO PASS BACK TO SYSTEM\nZLCHDADR DS    A                   ADDRESS OF MAIN PROGRAM HEADER\nZLCOPADR DS    A                   ADDRESS OF OPTIONS LIST\n         SPACE\nZLCGCFLG DS    X                   GARBAGE COLLECTION FLAGS\nZLCGCDNE EQU   B'10000000'          1 = GARBAGE COLLECTION WAS DONE\nZLCGCINT EQU   B'01000000'          1 = ZILINIT CALLING CONS\nZLCGCBLD EQU   B'00100000'          1 = ZILABLD CALLING CONS\nZLCGCMSG EQU   B'00010000'          1 = SHOW GC MESSAGES\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZLCRMCHR DS    C                   CURRENT READER MACRO CHARACTER\nZLCFBLEN DS    H                   LENGTH OF A FILE BLOCK\n         SPACE\nZLCRMCHN DS    A                   ADDRESS OF THE READER MACRO CHAIN\nZLCRDTBL DS    A                   ADDRESS OF THE READ TABLE\nZLCGSCNT DS    A                   GENSYM COUNTER\nZLCGSPRE DS    A                   GENSYM PREFIX\nZLCGCEND DS    A                   END-OF-FREE-LIST POINTER\nZLCCONS  DS    A                   ADDRESS OF ROUTINE CONS\nZLCPDSO  DS    A                   ADDRESS OF STACK OVERFLOW ROUTINE\nZLCCALPO L     2,*-*               CODE TO INVOKE STACK OVERFLOW RTE\n         BR    2                    WHEN RECURSION LIMIT EXCEEDED\nZLCCALPL EQU   *-ZLCCALPO          LENGTH OF ABOVE CODE\nZLCLDFLG DS    X                   FLAGS USED BY LOADER and others\nZLCLDGAD EQU   B'10000000'          1 = GOT ADDRESS OF MODULE CODE\nZLCLDGNM EQU   B'01000000'          1 = GOT NAME OF MODULE TO BE LOADED\nZLCLDASC EQU   B'00100000'          1 = Use ASCII collating sequence\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZLCPFLGS DS    X                   FLAGS USED BY PRINTER\nZLCPSLSH EQU   B'10000000'          1 = SLASHIFY\nZLCPRINT EQU   B'01000000'          1 = ZIL PRINT ROUTINE IN PROCESS\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZLCSUBS  DS    A                   ADDRESS OF SUBROUTINE MODULE\nZLCFGETI DS    A                   ADDRESS OF ROUTINE ZILFGETI\nZLCFGETO DS    A                   ADDRESS OF ROUTINE ZILFGETO\nZLCERR   DS    A                   ADDRESS OF ROUTINE ZILERR\nZLCTHROW DS    A                   ADDRESS OF ROUTINE ZILTHROW\nZLCCATCH DS    A                   ADDRESS OF THE CURRENT CATCH FRAME\nZLCABEND DS    H                   USER ABEND CODE SET BY ZILERR\nZLCERFLG DS    X                   FLAGS USED BY ERROR PROCESSING\nZLCERSET EQU   B'10000000'          1 = USER ABEND CODE SET\nZLCERTRC EQU   B'01000000'          1 = STACK TRACING ACTIVE\nZLCERDBG EQU   B'00100000'          1 = DEBUG MODE ACTIVE\nZLCERCFA EQU   B'00010000'          1 = CONDITIONAL FILE ACCESS\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZLCPMASK DS    X                   PROGRAM MASK\nZLCFILNO DS    H                   USED BY OPEN TO GENERATE FILE NAMES\nZLCMSLVL DS    X                   MESSAGE LEVEL\nZLCDFLGS DS    X                   FLAGS USED FOR ZILADMP\nZLCDCOPY EQU   B'10000000'         1 = ALWAYS COPY DATA INTO WORKAREA\nZLCDSLSH EQU   B'01000000'         1 = SLASHIFY\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\n         SPACE 1\nZLCRMNIL DS    2A                  THE OBJECT \"RMNIL\" USED BY (RMNIL)\nZLCUNBND DS    2A                  OBJ REPRESENTING UNBOUND VARIABLES\nZLCRANDK DS    A                   SEED KEY FOR RANDOM FUNCTION\n         SPACE 1\n* ADDRESSES OF STANDARD VARIABLES...\n         SPACE 1\nZLCT     DS    A                   ADDRESS OF THE ATOM T\nZLCNIL   DS    A                   ADDRESS OF THE ATOM NIL\nZLCOBLST DS    A                   ADDRESS OF THE OBJECT LIST\n*\n* NOTE: THE FOLLOWING TWO FIELDS REPLACE THE OLD ZIL \"ZLCALIST\".\n*       THE S-ALIST IS FOR VARIABLES DECLARED \"SPECIAL\" AND\n*       PROVIDES DYNAMIC SCOPING.  THE F-ALIST IS FOR NONLOCAL\n*       LEXICAL VARIABLES AND PROVIDES LEXICAL AND PSEUDOLEXICAL\n*       SCOPING (SINCE THEY ARE CAPTURED BY CLOSURES).\n*\nZLCSALST DS    A                   ADDRESS OF THE SPECIAL \"ALIST\"\nZLCFALST DS    A                   ADDRESS OF THE LEXICAL \"ALIST\"\n*\n* FIELDS USED BY (PROSPECTIVE) INTERRUPT HANDLERS\n*\nZLCISAVE DS    4A                  SAVEAREA FOR REGS 8-11 IF NEEDED\n         ORG   ZLCISAVE\nZLCISV08 DS    A\nZLCISV09 DS    A\nZLCISV10 DS    A\nZLCISV11 DS    A\n         ORG   ,\n         SPACE 1\nZLCIFLGS DS    X                   FLAGS FOR USE BY INTERRUPT HANDLERS\nZLCISVD  EQU   B'10000000'         1 = REGS 8-11 SAVED IN ZLCISAVE\nZLCISYS  EQU   B'01000000'         1 = SYSTEM CODE RUNNING IN SAME RB\nZLCISMC  EQU   B'00100000'         1 = CANNOT BE SAFELY INTERRUPTED\nZLCIATTN EQU   B'00010000'         1 = ATTENTION INTERRUPT IN PROGRESS\nZLCIOVER EQU   B'00001000'         1 = INSTRUCTION OVERLAY IN PROGRESS\n*        EQU   B'00000100'         RESERVED\n*        EQU   B'00000010'         RESERVED\n*        EQU   B'00000001'         RESERVED\nZLCEFLGS DS    X                   INTERRUPT HANDLER FLAGS\nZLCESTAE EQU   B'10000000'         1 = ESTAE ACTIVE FOR ABENDS\nZLCESTAX EQU   B'01000000'         1 = STAX ACTIVE FOR ATTENTIONS\nZLCETERM EQU   B'00100000'         1 = ZIL TERMINATION IN PROGRESS\n*        EQU   B'00010000'         RESERVED\n*        EQU   B'00001000'         RESERVED\n*        EQU   B'00000100'         RESERVED\n*        EQU   B'00000010'         RESERVED\n*        EQU   B'00000001'         RESERVED\n         SPACE 1\nZLCTPUT  DS    A     A(ZILTPUT)    ADDRESS OF TERMINAL OUTPUT ROUTINE\nZLCBIG   DS    A     A(ZILBIG)     ADDRESS OF BIGNUM SPACE ALLOCATOR\nZLCINTN  DS    A     A(ZILINTN)    ADDRESS OF SYMBOL INTERNING ROUTINE\nZLCABLD  DS    A     A(ZILABLD)    ADDRESS OF ATOM BUILDING ROUTINE\nZLCADMP  DS    A     A(ZILADMP)    ADDRESS OF ATOM DUMPING ROUTINE\nZLCVSS   DS    A     A(ZILVSS)     VECTOR/STRING SPACE ALLOCATOR\nZLCGETC  DS    A     A(ZILGETC)    ADDRESS OF CHARACTER INPUT ROUTINE\nZLCPRIN  DS    A     A(ZILPRIN)    ADDRESS OF PRINT ROUTINE\nZLCTERP  DS    A     A(ZILTERP)    ADDRESS OF TERPRI ROUTINE\nZLCKERR  DS    A     A(ZILKERR)    ADDRESS OF KEYWORD ERROR HANDLER\nZLCCVBF  DS    A     A(ZILCVBF)    ADDRESS OF BIGNUM-TO-FLOAT CONVERTER\n*\n* FIELDS USED BY FORTRAN INTERFACE\n*\nZLCFINT  DS    A     A(ZILFINT)    ADDRESS OF FORTRAN INTERFACE ROUTINE\nZLCFTCBA DS    A                   ADDRESS OF FTCB (FORTRAN CNTL BLK)\n*\n* THE FOLLOWING FIELDS ARE USED BY ATTENTION HANDLING.\n*\nZLCZILRB DS    A                   ADDRESS OF RB ZIL IS RUNNING UNDER\nZLCINSTA DS    A                   ADDRESS OF OVERLAID INSTRUCTION\nZLCINSTR DS    H                   SAVED INSTRUCTION AT ATTENTION\n*\nZLCLB    DS    X                   CHARACTER TO USE FOR LEFT BRACKET\nZLCRB    DS    X                   CHARACTER TO USE FOR RIGHT BRACKET\nZLCECB   DS    A                   ECB USED WHEN ATTACHING SUBTASKS\n*\n* FIELDS USED BY ZILINTN (SYMBOL INTERNING)\n*\nZLCOBHSH DS    A                   ADDRESS OF OBLIST HASH ARRAY\nZLCOBDIM DS    A                   TOTAL NUMBER OF SLOTS IN OBHASH\nZLCOBCNT DS    F                   NUMBER OF SLOTS TO GO IN OBHASH\n*\nZLCTRMTR DS    A                   ADDRESS OF TERMINAL OUTPUT TRANS TBL\nZLCSFTBL DS    A                   ADDRESS OF SMALL FIXNUM TABLE\nZLCSFTLO DS    F                   LOWEST SMALL FIXNUM VALUE\nZLCSFTHI DS    F                   HIGHEST SMALL FIXNUM VALUE\n*\n* FIELDS USED BY COMPILED CODE INTERFACES, ETC.\n*\nZLCSINT  DS    A                   ADDRESS OF ZILSINT SUBROUTINE\nZLCSBND  DS    A                   ADDRESS OF ZILSBND SUBROUTINE\nZLCFBND  DS    A                   ADDRESS OF ZILFBND SUBROUTINE\n*\n* FIELDS USED TO MAINTAIN THE \"MASTER VECTOR\" OF INLINE COMPILED CODE\n* OBJECT POINTERS (POINTERS TO ZIL COMPILED CODE HEADERS)\n*\nZLCICPA  DS    A                   ADDRESS OF MASTER VECTOR\nZLCICPL  DS    A                   LENGTH OF MASTER VECTOR\nZLCICPU  DS    A                   PORTION OF MASTER VECTOR IN USE\n*\n* FIELDS USED BY GARBAGE COLLECTOR\n*\nZLCGCTIM DS    F                   TOTAL GC TIME SO FAR\nZLCGCBVA DS    A                   ADDRESS OF GC BIT VECTOR\nZLCGCBVL DS    A                   LENGTH OF GC BIT VECTOR\nZLCGCACP DS    A                   POINTER TO BOTTOM OF ACTIVE CONS SP\nZLCGCACD DS    F                   NUMBER OF CELLS IN ACTIVE CONS SPACE\nZLCGCACF DS    F                   NUMBER OF FREE CELLS IN ACTIVE CONS\n*\n* AREA USED TO INITIALIZE NEW SYMBOLS\n*\nZLCNSYM  DS    0A                  NEW SYMBOL TEMPLATE\n         DS    CL24                (FILLED IN BY ZILINIT)\n.*-------DS----CL(##SYMLEN)--------(FILLED IN BY ZILINIT)\n.*\n.* TO AVOID DEPENDENCIES ON #ZEQU, WE HARDCODE THE MAX LENGTH OF A\n.* SYMBOL ABOVE.  IF ##SYMLEN IS EVER REDEFINED, THIS MUST BE CHANGED.\n.*\n*\n* FIELDS USED BY ZILSINT TO COMMUNICATE WITH GC\n*\nZLCSIN1  DS    A                   START OF OBJECT POINTERS TO COLLECT\nZLCSIN2  DS    A                   END OF OBJECT POINTERS TO COLLECT\n*\n* FIELDS USED TO LOCATE ZIL MODULES\n*\nZLCMODS  DS    A                   ADDRESS OF ZIL MODULES TABLE\nZLCCPRT  DS    A                   ADDRESS OF CURRENT ZIL PRINTER\n*\n* FIELDS USED BY DOUBLE PRECISION FLOATING POINT SUPPORT\n*\nZLCMDF   DS    A     A(ZILMDF)     ADDRESS OF DOUBLE-FLOAT CONSER\n*\n* More fields...\n*\nZLCVALS  DS    A     A(ZILVALS)    Address of multiple-values returner\nZLCCRDR  DS    A                   Address of current ZIL reader\n.*\n.**********************************************************************\n.*\n.* END OF COMMON AREA FIELDS DEFINED SO FAR.  ADDITIONAL FIELDS MAY BE\n.* ADDED AT THE END FOR FUTURE REVISIONS.\n.*\n.**********************************************************************\n*\n* THE FOLLOWING EQUATE IS USED ONLY BY ZILINIT.  ALL OTHER ROUTINES\n* MUST REFER TO THE CURRENT COMMON AREA LENGTH AS STORED IN ZLCCMSIZ.\n*\nZLCCOMLN EQU   *-ZLCOMMON          LENGTH OF COMMON AREA\n         EJECT\nZLFILBLK DSECT     ,               FILE BLOCK MAPPING\n         SPACE\n***********************************************************************\n*                                                                     *\n* A FILE BLOCK IS CONSTRUCTED AND STORAGE DYNAMICALLY OBTAINED FOR    *\n* EACH FILE OPENED BY THE OPEN FUNCTION, OR IMPLICITLY BY A FILE I/O  *\n* REQUEST.  FILE BLOCKS ARE ALWAYS ALLOCATED FOR THE STANDARD INPUT   *\n* AND OUTPUT, AS WELL AS THE TERMINAL IF APPLICABLE.                  *\n*                                                                     *\n***********************************************************************\n         SPACE\nZLFCHAIN DS    A(0)                CHAIN POINTER TO NEXT FILE BLOCK\nZLFPDDN  DS    CL8                 FILE NAME (8 CHARS)\nZLFATOM  DS    A                   FILE ATOM (POINTER)\nZLFTFPTR DS    A                   POINTER TO TRUE TERMINAL FILE BLOCK\n         ORG   ZLFTFPTR\nZLFDCB   DS    CL96                DATA CONTROL BLOCK\nZLFCARD  DS    A                   ADDRESS OF CURRENT RECORD\nZLFCHAR  DS    A                   ADDRESS OF CURRENT CHARACTER\n*                                    GT 0 ==> VALID CHARACTER EXISTS\n*                                    EQ 0 ==> PHYSICAL END OF FILE\n*                                    LT 0 ==> LOGICAL END OF FILE\nZLFEND   DS    A                   ADDRESS OF END OF CURRENT RECORD\nZLFREC1  DS    A                   ADDRESS OF FIRST LOGICAL RECORD READ\nZLFLRECL DS    H                   LOGICAL RECORD LENGTH\nZLFFLAG  DS    XL2                 TWO BYTES OF FLAG BITS\nZLFFLAG1 EQU   ZLFFLAG+0           FLAGS\nZLFINPUT EQU   B'10000000'          1 = THIS IS AN INPUT FILE\nZLFSYSIN EQU   B'01000000'          1 = THIS IS THE STANDARD SYSIN FILE\nZLFSYSPR EQU   B'00100000'          1 = THIS IS THE STD SYSPRINT FILE\nZLFSTART EQU   B'00010000'          1 = FILE HAS BEEN READ\nZLFGOT1  EQU   B'00001000'          1 = A REAL CHAR FOUND ON READ\nZLFTERM  EQU   B'00000100'          1 = THIS FILE ALLOCATED TO TERMINAL\nZLFEOF   EQU   B'00000010'          1 = END OF FILE ENCOUNTERED\nZLFNEWLN EQU   B'00000001'          1 = NEWLINE CONDITION ENCOUNTERED\nZLFFLAG2 EQU   ZLFFLAG+1           MORE FLAGS\nZLFOPEN  EQU   B'10000000'          1 = FILE OPENED SUCCESSFULLY\nZLFRECV  EQU   B'01000000'          1 = VARIABLE-LENGTH RECORD FORMAT\nZLFNUM   EQU   B'00100000'          1 = FILE IS LINE NUMBERED\nZLFTGT12 EQU   B'00010000'          1 = LAST TGET RETURN CODE WAS 12\nZLFTABS  EQU   B'00001000'          1 = EXPAND TABS AND NEWLINES\nZLFETIO  EQU   B'00000100'          1 = ECHO EVEN IF TERMINAL IN & OUT\nZLFRECU  EQU   B'00000010'          1 = UNDEFINED-LENGTH RECORD FORMAT\n*        EQU   B'00000001'          RESERVED\n         SPACE 1\nZLFLINE  DS    CL81                I/O AREA\n         DS    XL1                 RESERVED\nZLFECCNT DS    H                   ECHO REFERENCE COUNT (OUTPUT ONLY)\nZLFECHO  DS    A                   ADDRESS OF ECHO FILE (INPUT ONLY)\n*        New fields added 11/23/88 to support UNTYI-style operations\nZLFUNRCH DS    XL1                 Unread character of file\nZLFLSTCH DS    XL1                 Last read character of file\nZLFUNRST DS    XL1                 Status of unread character\nZLFLSTST DS    XL1                 Status of last character\n*                                  Equates for above 2 fields\nZLFSTINV EQU   0                    not valid\nZLFSTVLD EQU   1                    true character\nZLFSTEOL EQU   2                    newline\nZLFSTEOF EQU   3                    eof\n*\n* THE FOLLOWING EQUATE IS USED ONLY BY ZILINIT.  ALL OTHER ROUTINES\n* MUST REFER TO THE CURRENT FILE BLOCK LENGTH AS STORED IN ZLCFBLEN.\n*\nZLFBLEN  EQU   *-ZLFILBLK          LENGTH OF A FILE BLOCK\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZEQU": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x04\\x00\\x97\\x00N\\x00\\x95\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 151, "newlines": 78, "modlines": 149, "user": "SEB1525"}, "text": "         MACRO\n         #ZEQU\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*                        BASIC ZIL EQUATES                           *\n.*                                                                    *\n.**********************************************************************\n         EJECT\n*\n* GENERAL REGISTER EQUATES\n*\n#0       EQU   0                   STACK OVERFLOW CHECKING, GENERAL USE\n#1       EQU   1                   GENERAL USE\n#2       EQU   2                   GENERAL USE\n#3       EQU   3                   GENERAL USE\n#4       EQU   4                   GENERAL USE\n#5       EQU   5                   GENERAL USE\n#6       EQU   6                   GENERAL USE\n#7       EQU   7                   USUALLY USED FOR FILE POINTERS\n#8       EQU   8                   CONTAINS THE ATOM T\n#9       EQU   9                   POINTER TO CURRENT FREE CONS CELL\n#10      EQU   10                  CONTAINS THE ATOM NIL\n#11      EQU   11                  CURRENT PUSH DOWN STACK POINTER\n#12      EQU   12                  USUAL BASE REGISTER\n#13      EQU   13                  POINTER TO ZIL COMMON AREA\n#14      EQU   14                  OS RETURN REGISTER\n#15      EQU   15                  OS ENTRY REGISTER\n*\n* FLOATING-POINT REGISTER EQUATES\n*\n#F0      EQU   0                   SHORT, LONG, EXTENDED\n#F2      EQU   2                   SHORT, LONG\n#F4      EQU   4                   SHORT, LONG, EXTENDED\n#F6      EQU   6                   SHORT, LONG\n*\n* VECTOR FACILITY REGISTER EQUATES\n*\n#V0      EQU   0                   GENERAL USE\n#V1      EQU   1                   GENERAL USE\n#V2      EQU   2                   GENERAL USE\n#V3      EQU   3                   GENERAL USE\n#V4      EQU   4                   GENERAL USE\n#V5      EQU   5                   GENERAL USE\n#V6      EQU   6                   GENERAL USE\n#V7      EQU   7                   GENERAL USE\n#V8      EQU   8                   GENERAL USE\n#V9      EQU   9                   GENERAL USE\n#V10     EQU   10                  GENERAL USE\n#V11     EQU   11                  GENERAL USE\n#V12     EQU   12                  GENERAL USE\n#V13     EQU   13                  GENERAL USE\n#V14     EQU   14                  GENERAL USE\n#V15     EQU   15                  GENERAL USE\n*\n* VECTOR FACILITY COMPARE MNEMONICS\n*\n#VH      EQU   2                   SET BIT ON HIGH\n#VL      EQU   4                   SET BIT ON LOW\n#VE      EQU   8                   SET BIT ON EQUAL\n#VNH     EQU  13                   SET BIT ON NOT HIGH\n#VNL     EQU  11                   SET BIT ON NOT LOW\n#VNE     EQU   7                   SET BIT ON NOT EQUAL\n*\n* EQUATES INSIDE OBJECTS\n*\n##CAR    EQU   0                   CAR CELL OF A CONS\n##CDR    EQU   4                   CDR CELL OF A CONS\n##TYPE   EQU   0                   OBJECT TYPE INDICATORS\n##VECDAT EQU   4                   OFFSET OF DATA PORTION OF VSS OBJECT\n*\n* EQUATES INSIDE SYMBOLS\n*\n* NOTE THAT ##PVALUE MUST BE SAME AS ##CDR SO THAT (CDR NIL) WORKS!\n* (SORRY, WE CAN'T COME UP WITH A HACK TO MAKE (CAR NIL) WORK.)\n*\n##PVALUE EQU   4                   OFFSET OF POINTER TO VALUE CELL\n##PNAME  EQU   8                   OFFSET OF POINTER TO PRINT NAME\n##PLIST  EQU   12                  OFFSET OF POINTER TO PROPERTY LIST\n##PFUNC  EQU   16                  OFFSET OF POINTER TO FUNCTION CELL\n##PPKG   EQU   20                  OFFSET OF POINTER TO PACKAGE CELL\n*\n##SYMLEN EQU   24                  MAXIMUM LENGTH OF A SYMBOL\n*\n* USED WHEN INTERNING SYMBOLS FROM COMPILED CODE\n* EQUATES FOR FORWARDING AND HASHING INDICATORS\n*\n         SPACE 1\n##FWWD1  EQU   0                   LOCATION OF FIRST WORD\n##FWWD2  EQU   4                   LOCATION OF SECOND WORD\n##FWBYTE EQU   3                   LOW-ORDER BYTE OF FIRST WORD\n##FWBIT  EQU   X'01'               1 = SYMBOL INTERNED AND FORWARDED\n##FWHASH EQU   X'02'               1 = HASH CODE PRESENT\n##FWGSYM EQU   X'04'               1 = DON'T INTERN THIS SYMBOL\n*\n* EQUATES FOR TYPE BITS, CHECKED VIA \"TM\"\n*\n##ATOM   EQU   B'10000000'         1 = ATOM, 0 = CONS\n##FIXED  EQU   B'01000000'         1 = INTEGER (IF ATOMIC)\n##FLOAT  EQU   B'00100000'         1 = FLOAT (IF ATOMIC)\n##CCO    EQU   B'00010000'         1 = COMPILED CODE OBJECT (IF ATOMIC)\n##VSS    EQU   B'00001000'         1 = OBJECT IN VECTOR/STRING SPACE\n##VEC    EQU   B'00000100'         1 = VECTOR (IF ATOMIC AND IN VSS)\n##CLOS   EQU   B'00000010'         1 = CLOSURE (FUNARG OR COMPILED OBJ)\n##USER   EQU   B'00000001'         1 = USER TYPE (DEFINED BY DEFSTRUCT)\n*\n* COMBINATIONS\n*\n##INT    EQU   ##ATOM+##FIXED      ONES = INTEGER (FIXNUM OR BIGNUM)\n##NUMBER EQU   ##FIXED+##FLOAT     NOT ZEROES = NUMERIC\n##FLONUM EQU   ##ATOM+##FLOAT      ONES = FLONUM (SINGLE OR DOUBLE)\n##CODE   EQU   ##ATOM+##CCO        ONES = COMPILED CODE OBJECT\n*\n* EQUATES FOR TYPES, CHECKED VIA \"CLI\"\n*\n##SYMBOL EQU   ##ATOM                        SYMBOL\n##FIXNUM EQU   ##ATOM+##FIXED                FIXNUM (NOT BIG)\n##SFLOAT EQU   ##ATOM+##FLOAT                SINGLE-FLOAT (SHORT)\n##DFLOAT EQU   ##ATOM+##FLOAT+##VSS          DOUBLE=FLOAT\n##FUNARG EQU   ##ATOM+##VSS+##VEC+##CLOS     FUNARG (LEXICAL CLOSURE)\n##SUBR   EQU   ##ATOM+##CCO                  SUBR\n##CLOSUR EQU   ##ATOM+##CCO+##CLOS           CLOSURE\n##STRING EQU   ##ATOM+##VSS                  STRING\n##VECTOR EQU   ##ATOM+##VSS+##VEC            VECTOR\n##BIGNUM EQU   ##ATOM+##VSS+##FIXED          BIGNUM\n##STRUCT EQU   ##ATOM+##VSS+##VEC+##USER     STRUCTURE\n*\n* EQUATES USED IN THE READ TABLE\n*\n* (NOTE: A CHARACTER USED AS A READER MACRO HAS THE HIGH ORDER BIT\n*        SET ON IN THE READTABLE, BUT THE REST OF ITS SYNTAX BITS\n*        REMAIN UNCHANGED.  IN THAT WAY IT CAN BE RESTORED TO ITS\n*        NORMAL SYNTAX IF DESIRED.)\n*\n##NORMAL EQU   0                   NORMAL CHARACTER\n##BLANK  EQU   4                   WHITESPACE\n##LEFTP  EQU   8                   LEFT PARENTHESIS\n##RIGHTP EQU   12                  RIGHT PARENTHESIS\n##SEMI   EQU   16                  COMMENT DELIMITER\n##PERIOD EQU   20                  DOTTED PAIR MARKER\n##CONT   EQU   24                  CONTINUATION MARKER\n##ESCAPE EQU   28                  SINGLE ESCAPE\n##BAR    EQU   32                  DOUBLE ESCAPE\n##DQUOTE EQU   36                  STRING DELIMITER\n##COLON  EQU   40                  PACKAGE DELIMITER\n##SLASH  EQU   44                  RATIONAL NUMBER MARKER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZERR": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x04\\x00&\\x00\\x1a\\x00$\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 38, "newlines": 26, "modlines": 36, "user": "SEB1525"}, "text": "         MACRO\n&NAME    #ZERR &MSG\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO GENERATES CALLS TO ZILERR. THE PARAMETER MUST BE A      *\n.* CHARACTER STRING MESSAGE SUITABLE FOR DISPLAY VIA A TPUT MACRO     *\n.* INSTRUCTION, WHOSE ASSEMBLER-DEFINED LENGTH IS VALID, E.G.         *\n.*                                                                    *\n.*         #ZERR ZIL0000                                              *\n.*       ...                                                          *\n.* ZIL0000 DC  C'ZIL0000 YOU FOULED UP.'                              *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* NOTE: IN GENERAL, YOU SHOULD USE THE #ERR MACRO INSTEAD OF #ZERR.  *\n.* #ERR ALLOWS YOU TO INCLUDE VARIABLE INFORMATION, INCLUDING LISP    *\n.* OBJECTS, IN THE MESSAGE, AND ALSO DIRECTS IT TO STANDARD OUTPUT    *\n.* INSTEAD OF THE TERMINAL/CONSOLE.                                   *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* NOTE: AT SOME POINT IT WOULD BE DESIRABLE TO MODIFY THIS MACRO TO  *\n.* INSURE THAT REGISTER 12 POINTED TO THE BEGINNING OF THE MODULE.    *\n.* TO DO THIS, A GLOBAL SET SYMBOL IN #ZBEG OR #ZSAV WOULD BE USEFUL. *\n.*                                                                    *\n.* BUT WHO CARES?  #ERR IS MORE IMPORTANT THAN #ZERR ANYHOW.          *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    #1,&MSG             GET ADDRESS OF MESSAGE\n         LA    #0,L'&MSG           GET LENGTH OF MESSAGE\n         L     #15,ZLCERR          GET ADDRESS OF ZLCERR ROUTINE\n         BR    #15                 GO TO ERROR PROCESSING ROUTINE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZHDR": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x04\\x00#\\x00\\x1f\\x00!\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 35, "newlines": 31, "modlines": 33, "user": "SEB1525"}, "text": "         MACRO\n         #ZHDR\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO MAPS THE MODULE HEADER GENERATED IN COMPILED ZIL TOP-   *\n.* LEVEL PROGRAMS.  THIS INFORMATION IS USED BY ZILINIT TO ALLOCATE   *\n.* STORAGE FOR ZIL PROCESSING AND TO FIX UP AND INTERN THE OBJECTS    *\n.* DEFINED IN THE CODE.                                               *\n.*                                                                    *\n.* KEEP THIS INFO COORDINATED WITH THE #ZBEG MACRO AT ALL TIMES!!!    *\n.*                                                                    *\n.**********************************************************************\nZLHEADER DSECT ,                   MAP FIRST BYTES OF PROCEDURE\n*\n* POINTERS TO EXTERNAL ENTITIES PROCESSED BY ZILINIT\n*\nZLHATOMA DS    A                   ADDRESS OF ATOMS LIST\nZLHATOME DS    A                   ADDRESS OF END OF ATOMS LIST\nZLHLISTA DS    A                   ADDRESS OF LISTS\nZLHLISTE DS    A                   ADDRESS OF END OF LISTS\nZLHOPTA  DS    A                   ADDRESS OF OPTIONS LIST\nZLHMODS  DS    A                   ADDRESS OF ZILMODS\n         SPACE\nZLHOPTS  DSECT ,                   OPTIONS LIST (ADDRESSED BY ZLHOPTA)\nZLHPDSIZ DS    A                   DEFAULT SIZE OF PUSH DOWN LIST\nZLHCSSIZ DS    A                   DEFAULT SIZE OF CONS SPACE\nZLHVSSIZ DS    A                   DEFAULT SIZE OF VECTOR/STRING SPACE\nZLHACSIZ DS    A                   DEFAULT SIZE OF ACTIVE CONS SPACE\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZIF": {"ttr": 770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x86\\x17\\x1f\\x00\\x89\\x16O\\x13\\x04\\x00/\\x00\\r\\x00/\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1986-06-20T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 47, "newlines": 13, "modlines": 47, "user": "SEB1525"}, "text": "         MACRO\n         #ZIF\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   FORTRAN INTERFACE CONTROL BLOCK, ALLOCATED AND FREED BY ZILFINT   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nZIF      DSECT ,\n         SPACE 1\nZIFSA    DS    9D                  SAVE AREA FOR USE BY FORTRAN INTERF\n         DS    A                   RESERVED\nZIFDCBA  DS    A                   ADDRESS OF ZILFLIB DCB\nZIFDCB   DCB   DDNAME=ZILFLIB,MACRF=R,DSORG=PO  ZILFLIB DCB\nZIFDCBL  EQU   *-ZIFDCB\nZIFNAME  DS    CL8                 SUBROUTINE NAME\n         SPACE 1\nZIF@SQRT DS    A                   ADDRESS OF SUBROUTINE SQRT\nZIF@LOG  DS    A                   ADDRESS OF SUBROUTINE LOG\nZIF@EXP  DS    A                   ADDRESS OF SUBROUTINE EXP\nZIF@SIN  DS    A                   ADDRESS OF SUBROUTINE SIN\nZIF@COS  DS    A                   ADDRESS OF SUBROUTINE COS\nZIF@TAN  DS    A                   ADDRESS OF SUBROUTINE TAN\nZIF@ASIN DS    A                   ADDRESS OF SUBROUTINE ASIN\nZIF@ACOS DS    A                   ADDRESS OF SUBROUTINE ACOS\nZIF@ATAN DS    A                   ADDRESS OF SUBROUTINE ATAN\n         SPACE 1\nZIF@DSQR DS    A                   ADDRESS OF SUBROUTINE DSQRT\nZIF@DLOG DS    A                   ADDRESS OF SUBROUTINE DLOG\nZIF@DEXP DS    A                   ADDRESS OF SUBROUTINE DEXP\nZIF@DSIN DS    A                   ADDRESS OF SUBROUTINE DSIN\nZIF@DCOS DS    A                   ADDRESS OF SUBROUTINE DCOS\nZIF@DTAN DS    A                   ADDRESS OF SUBROUTINE DTAN\nZIF@DASI DS    A                   ADDRESS OF SUBROUTINE DASIN\nZIF@DACO DS    A                   ADDRESS OF SUBROUTINE DACOS\nZIF@DATA DS    A                   ADDRESS OF SUBROUTINE DATAN\n         SPACE 1\nZIFLEN   EQU   *-ZIF               LENGTH OF THIS CONTROL BLOCK\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZIFL": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x86\\x17\\x7f\\x00\\x89\\x16O\\x13\\x04\\x00\\x17\\x00\\t\\x00\\x15\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1986-06-26T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 23, "newlines": 9, "modlines": 21, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #ZIFL &FUN\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &RFN\n         AIF   (K'&FUN GT 4).TOOLONG\n&RFN     SETC  '&FUN'\n         AGO   .AFTLONG\n.TOOLONG ANOP\n&RFN     SETC  '&FUN'(1,4)\n.AFTLONG ANOP\n&SYM     ICM   #15,15,ZLCFTCBA     GET FORTRAN INTERFACE CONTROL BLOCK\n         BNZ   ZFG&SYSNDX          IF IT'S NOT THERE, THEN...\n         L     #15,ZLCFINT         GET ADDRESS OF ZILFINT\n         LA    #1,ZIF@&RFN-ZIF     INDICATE LOAD REQUEST\n         #BASR #14,#15             CALL ZILFINT TO RESOLVE FORTRAN SUBS\nZFG&SYSNDX DS  0H\n         L     #15,ZIF@&RFN-ZIF(#15) GET ADDRESS OF FORTRAN SUBROUTINE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZINT": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x04\\x003\\x003\\x002\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:04:00", "lines": 51, "newlines": 51, "modlines": 50, "user": "SEB1525"}, "text": "         MACRO\n         #ZINT\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO MAPS THE MODULE HEADER GENERATED IN COMPILED AND        *\n.* ASSEMBLED ZIL FUNCTIONS.  THIS IS USED BY ZILLOAD DURING FUNCTION  *\n.* LOADING, AND BY ZILXSUB WHEN CONTROL IS PASSED INTERPRETIVELY TO   *\n.* COMPILED CODE.                                                     *\n.*                                                                    *\n.* NOTE: THE POINTERS TO ATOMS AND LISTS ARE LOCATED AT THE END OF    *\n.*       THIS SECTION, BUT ARE NOT MAPPED HERE.  THE LOCATION OF      *\n.*       THOSE FIELDS MAY VARY DEPENDING ON THE LENGTH OF THE DATA    *\n.*       THAT IS MAPPED HERE, WHICH MAY CHANGE IN FUTURE REVISIONS.   *\n.*                                                                    *\n.* KEEP THIS INFO COORDINATED WITH THE #ZBEG MACRO AT ALL TIMES!!!    *\n.*                                                                    *\n.**********************************************************************\nZINT     DSECT ,                   MAP FIRST BYTES OF PROCEDURE\n*\n* POINTERS TO EXTERNAL ENTITIES PROCESSED BY INTERPRETER & LOADER\n*\nZINFLAGS DS    0A                  FIELDS USED BY INTERPRETER\nZINFLAG1 DS    XL1                 FLAGS USED BY INTERPRETER\nZINGSUBR EQU   B'10000000'          1 = SUBRS ARE PRESENT\nZINGPROG EQU   B'01000000'          1 = THIS IS PROGRAM, NOT FUNCTION\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZINFLAG2 DS    XL1                 FLAGS USED BY CODE EXECUTOR\nZINGREST EQU   B'10000000'          1 = A &REST ARG IS EXPECTED\nZINGLEXP EQU   B'01000000'          1 = THIS IS A LEXPR\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\nZINMINAR DS    YL1                 MINIMUM # OF ARGUMENTS FOR FUNCTION\nZINMAXAR DS    YL1                 MAXIMUM # OF ARGUMENTS FOR FUNCTION\nZINSUBRA DS    A                   ADDRESS OF SUBRS LIST\nZINSUBRE DS    A                   ADDRESS OF END OF SUBRS LIST\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZMOD": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x87\\x18\\x7f\\x00\\x89\\x16O\\x13\\x05\\x00\\x1d\\x00\\x12\\x00\\x1b\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1987-07-06T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 29, "newlines": 18, "modlines": 27, "user": "SEB1525"}, "text": "         MACRO\n         #ZMOD\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* This macro maps the header area of the ZILMODS module.             *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* Change activity:                                                   *\n.*                                                                    *\n.* 11/08/88 - Added support for enhanced ZIL reader.                  *\n.*                                                                    *\n.**********************************************************************\nZMOD     DSECT\nZMODSTB  DS    A                   Address of start of table\nZMODETB  DS    A                   Address of end of table\n*\n* Pointers into the table to locate commonly needed modules follow.\n*\nZ@ZEVINI DS    A                   Pointer to address of ZEVINIT\nZ@ZDPRIN DS    A                   Pointer to address of ZDPRINT\nZ@ZDREAD DS    A                   Pointer to address of ZDREAD\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZMODES": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x87\\x06\\x9f\\x00\\x89\\x16O\\x13\\x05\\x006\\x003\\x004\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1987-03-10T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 54, "newlines": 51, "modlines": 52, "user": "SEB1525"}, "text": "         MACRO\n         #ZMODES\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*                  ZIL OPEN/CLOSE FILE MODE EQUATES                  *\n.*                                                                    *\n.**********************************************************************\n*\n* GENERAL REGISTER EQUATES\n*\n##MODEB0 EQU   0                   OFFSET OF FILE MODE BYTE 0\n*        EQU   B'10000000'          RESERVED\n*        EQU   B'01000000'          RESERVED\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\n##MODEB1 EQU   1                   OFFSET OF FILE MODE BYTE 1\n*        EQU   B'10000000'          RESERVED\n*        EQU   B'01000000'          RESERVED\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\n##MODEB2 EQU   2                   OFFSET OF FILE MODE BYTE 2\n*        EQU   B'10000000'          RESERVED\n*        EQU   B'01000000'          RESERVED\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*        EQU   B'00000100'          RESERVED\n*        EQU   B'00000010'          RESERVED\n*        EQU   B'00000001'          RESERVED\n##MODEB3 EQU   3                   OFFSET OF FILE MODE BYTE 3\n*        EQU   B'10000000'          RESERVED\n*        EQU   B'01000000'          RESERVED\n*        EQU   B'00100000'          RESERVED\n*        EQU   B'00010000'          RESERVED\n*        EQU   B'00001000'          RESERVED\n*\n##PROBE  EQU   B'00000100'         1 = PROBE\n##APPEND EQU   B'00000010'         1 = APPEND\n##OUTPUT EQU   B'00000001'         1 = OUTPUT, 0 = INPUT\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZPDS": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x05\\x00 \\x00\\x1d\\x00\\x1e\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 32, "newlines": 29, "modlines": 30, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #ZPDS &SIZE\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO RESERVES STACK SPACE.                                   *\n.*                                                                    *\n.* THE OPERAND IS THE NUMBER OF BYTES (NOT WORDS) OF MAXIMUM          *\n.* PUSH DOWN STACK SPACE REQUIRED IN THE FUNCTION.                    *\n.* AT THE LEAST THIS WILL BE THE NUMBER OF ARGS PASSED TIMES 4 PLUS   *\n.* 12 (TO SAVE 3 REGISTERS ON ENTRY), BUT THE CODE MAY USE MORE,      *\n.* ESPECIALLY IF IT CALLS OTHER ROUTINES.                             *\n.*                                                                    *\n.* AN OPERAND SPECIFICATION OF (0) MEANS THAT A POINTER TO THE        *\n.* MAXIMUM STACK SLOT IS ALREADY IN REGISTER 0.  OTHERWISE THIS       *\n.* ROUTINE WILL PLACE THAT POINTER VALUE IN REGISTER 0.               *\n.*                                                                    *\n.* THE BRANCH VIA REG 13 CAUSES ANOTHER BRANCH TO THE TRUE INTERFACE  *\n.* TO THE ERROR HANDLER, A CALL TO ZILPDSO, WHICH WILL DISPLAY A      *\n.* \"PUSH DOWN STACK OVERFLOW\" MESSAGE AND SIGNAL AN ERROR.            *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&SIZE' EQ '(0)').SZINREG\n         LA    #0,&SIZE.(,1)       GET MAXIMUM STACK SIZE REQUIRED\n.SZINREG ANOP\n         CR    #0,#8               IF END OF PUSH DOWN LIST EXCEEDED\n         BNLR  #13                 THEN INVOKE STACK OVERFLOW ROUTINE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZRET": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x05\\x00\\x14\\x00\\x11\\x00\\x12\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 20, "newlines": 17, "modlines": 18, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #ZRET\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO LOADS REGISTERS FROM THE STACK AND RETURNS (SEE #ZSAV). *\n.*                                                                    *\n.* NON-RECURSIVE FUNCTIONS MAY NOT NEED TO DO THIS (SEE CONS).        *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &ZSVOF1,&ZSVOF2\n&SYM     LR    1,11                RESTORE STACK POINTER\n         LM    11,12,&ZSVOF1.(1)   RESTORE BASE REGISTER\n         L     14,&ZSVOF2.(,1)     RESTORE RETURN REGISTER\n         BR    14                  RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZSAV": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x004\\x00\\x854\\x0f\\x01\\x00\\x10O\\x11\\x15\\x00,\\x00\\x1c\\x00+\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "2000-04-13T11:15:34", "lines": 44, "newlines": 28, "modlines": 43, "user": "SEB1525"}, "text": "         MACRO\n&SYM     #ZSAV &ARGS=\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO SAVES REGISTERS ON THE STACK.  SEE #ZRET.               *\n.* THE NUMBER OF ARGUMENTS MUST BE SPECIFIED CORRECTLY.               *\n.*                                                                    *\n.* REGISTER 12 IS MADE TO BE THE BASE REGISTER, AND REGISTER 11 IS    *\n.* MADE THE NEW CURRENT STACK POINTER; ARGUMENTS MAY BE LOADED FROM   *\n.* 0, 4, ETC. OFF REGISTER 11.                                        *\n.*                                                                    *\n.* NON-RECURSIVE FUNCTIONS MAY NOT NEED TO USE THIS (SEE CONS).       *\n.* IN THAT CASE REGISTER 15 IS THE BASE REGISTER AND THE CURRENT      *\n.* STACK POINTER IS REGISTER 1.                                       *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* 04/13/2000 Changed to support HLASM.                               *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &ZSVOF1,&ZSVOF2,&ZSVARGS\n         LCLA  &ZARGS\n         AIF   ('&ARGS' EQ '').NOARGS\n&ZARGS   SETA  &ARGS\n         AIF   (&ZSVARGS EQ &ZARGS).ARGSOK\n         MNOTE 4,'#ZSAV ARGS VALUE DOES NOT AGREE WITH #ZBEG ARG SPEC'\n         AGO   .ARGSOK\n.NOARGS  ANOP\n&ZARGS   SETA  &ZSVARGS\n.ARGSOK  ANOP\n&ZSVOF1  SETA  4*&ZARGS\n&ZSVOF2  SETA  &ZSVOF1+8\n&SYM     ST    14,&ZSVOF2.(,1)     SAVE RETURN REGISTER\n         STM   11,12,&ZSVOF1.(1)   SAVE BASE AND STACK REGISTERS\n         LR    12,15               SET UP BASE REGISTER\n         DROP  15\n         USING &SYSECT,12\n         LR    11,1                SET UP STACK POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZSFT": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x00\\x00\\x87\\t\\x8f\\x00\\x89\\x16O\\x13\\x05\\x008\\x00\\x04\\x008\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1987-04-08T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 56, "newlines": 4, "modlines": 56, "user": "SEB1525"}, "text": "         MACRO\n         #ZSFT\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* This macro defines the small fixnum table as a DSECT offset from   *\n.* register 8 (which doubles as the address of T).                    *\n.*                                                                    *\n.* Specify \"USING #SFTD,#8\", or use the #ZUSING macro.                *\n.*                                                                    *\n.**********************************************************************\n         SPACE 1\n*\n* SMALL FIXNUM TABLE DSECT\n*\n#SFTD    DSECT ,                   Areas pointed to by the \"T\" register\n         SPACE 1\n         DS    CL(##SYMLEN)        Reserved for the symbol T\n#SFTPFX  DS    D                   Fixnum -1 (not truly part of table)\n#SFT     DS    256D                The small fixnum table\n#SFTEND  EQU   *                   End of the small fixnum table\n         SPACE 1\n.*\n.* Some commonly used fixnum objects and values are equated here.\n.*\n#SFTM1   EQU   #SFT-1*8            Fixnum -1\n#SFT0    EQU   #SFT+0*8            Fixnum 0\n#SFT1    EQU   #SFT+1*8            Fixnum 1\n#SFT255  EQU   #SFT+255*8          Fixnum 255\n         SPACE 1\n#SFTCR   EQU   #SFT+X'0D'*8        Fixnum #\\CR\n#SFTNL   EQU   #SFT+X'15'*8        Fixnum #\\NL\n#SFTSP   EQU   #SFT+X'40'*8        Fixnum #\\SP\n         SPACE 1\n#SFWM1   EQU   #SFT-1*8+4          Fullword -1\n#SFW0    EQU   #SFT+0*8+4          Fullword 0\n#SFW1    EQU   #SFT+1*8+4          Fullword 1\n#SFW2    EQU   #SFT+2*8+4          Fullword 2\n#SFW3    EQU   #SFT+3*8+4          Fullword 3\n#SFW4    EQU   #SFT+4*8+4          Fullword 4\n#SFW255  EQU   #SFT+255*8+4        Fullword 255\n         SPACE 1\n#SFWCR   EQU   #SFTCR+4            Fullword #\\CR\n#SFWNL   EQU   #SFTNL+4            Fullword #\\NL\n#SFWSP   EQU   #SFTSP+4            Fullword #\\SP\n         SPACE 1\n#SHWM1   EQU   #SFT-1*8+6          Halfword -1\n#SHW0    EQU   #SFT+0*8+6          Halfword 0\n#SHW1    EQU   #SFT+1*8+6          Halfword 1\n#SHW255  EQU   #SFT+255*8+6        Halfword 255\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZSUB": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x05\\x00I\\x00\\x1f\\x00G\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 73, "newlines": 31, "modlines": 71, "user": "SEB1525"}, "text": "         MACRO\n         #ZSUB\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* THIS MACRO IS USED BY ZILSUBS AND ZILINIT TO DEFINE THE TABLE OF   *\n.* EXTERNAL SUBROUTINES WHOSE ADDRESSES ARE STORED IN THE ZIL COMMON  *\n.* AREA.  IF THE CALLING SOURCE PROGRAM IS ZILSUBS, THIS MACRO        *\n.* GENERATES THE ACTUAL VCONS; ELSE IT JUST MAPS THEM OUT.            *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.* Change activity:                                                   *\n.*                                                                    *\n.* 06/01/88 - Added ZILVALS routine.                                  *\n.*                                                                    *\n.**********************************************************************\nZSASUBS  DS    0A\n         AIF   ('&SYSECT' EQ 'ZILSUBS').SUBS\nZSACONS  DS    A                   CONS PLUS GARBAGE COLLECTOR\nZSAFGETI DS    A                   INPUT FILE BLOCK ACCESSOR\nZSAFGETO DS    A                   OUTPUT FILE BLOCK ACCESSOR\nZSAPDSO  DS    A                   STACK OVERFLOW ERROR ROUTINE\nZSAERR   DS    A                   GENERAL ERROR ROUTINE\nZSATHROW DS    A                   THROW ROUTINE\nZSATPUT  DS    A                   TPUT ROUTINE\nZSABIG   DS    A                   BIGNUM ALLOCATION ROUTINE\nZSAINTN  DS    A                   SYMBOL INTERNMENT ROUTINE\nZSAABLD  DS    A                   ATOM BUILDING ROUTINE\nZSAADMP  DS    A                   ATOM DUMPING ROUTINE\nZSAVSS   DS    A                   VECTOR/STRING SPACE ALLOCATOR\nZSAGETC  DS    A                   CHARACTER INPUT ROUTINE\nZSAPRIN  DS    A                   PRINT ROUTINE\nZSATERP  DS    A                   TERPRI ROUTINE\nZSAFINT  DS    A                   FORTRAN INTERFACE ROUTINE\nZSAKERR  DS    A                   &KEY KEYWORD ERROR HANDLING ROUTINE\nZSACVBF  DS    A                   BIGNUM-TO-FLOAT CONVERSION ROUTINE\nZSASINT  DS    A                   COMPILED OBJECT INITIALIZING ROUTINE\nZSASBND  DS    A                   SPECIAL VARIABLE BINDING ROUTINE\nZSAFBND  DS    A                   LEXICAL VARIABLE BINDING ROUTINE\nZSAMDF   DS    A                   DOUBLE FLOAT BUILDING ROUTINE\nZSAVALS  DS    A                   Multiple value returning routine\n         MEXIT\n.SUBS    ANOP\nZSACONS  DC    V(ZILCONS)          CONS PLUS GARBAGE COLLECTOR\nZSAFGETI DC    V(ZILFGETI)         INPUT FILE BLOCK ACCESSOR\nZSAFGETO DC    V(ZILFGETO)         OUTPUT FILE BLOCK ACCESSOR\nZSAPDSO  DC    V(ZILPDSO)          STACK OVERFLOW ERROR ROUTINE\nZSAERR   DC    V(ZILERR)           GENERAL ERROR ROUTINE\nZSATHROW DC    V(ZILTHROW)         THROW ROUTINE\nZSATPUT  DC    V(ZILTPUT)          TPUT ROUTINE\nZSABIG   DC    V(ZILBIG)           BIGNUM ALLOCATION ROUTINE\nZSAINTN  DC    V(ZILINTN)          SYMBOL INTERNMENT ROUTINE\nZSAABLD  DC    V(ZILABLD)          ATOM BUILDING ROUTINE\nZSAADMP  DC    V(ZILADMP)          ATOM DUMPING ROUTINE\nZSAVSS   DC    V(ZILVSS)           VECTOR/STRING SPACE ALLOCATOR\nZSAGETC  DC    V(ZILGETC)          CHARACTER INPUT ROUTINE\nZSAPRIN  DC    V(ZILPRIN)          PRINT ROUTINE\nZSATERP  DC    V(ZILTERP)          TERPRI ROUTINE\nZSAFINT  DC    V(ZILFINT)          FORTRAN INTERFACE ROUTINE\nZSAKERR  DC    V(ZILKERR)          &KEY KEYWORD ERROR HANDLING ROUTINE\nZSACVBF  DC    V(ZILCVBF)          BIGNUM-TO-FLOAT CONVERSION ROUTINE\nZSASINT  DC    V(ZILSINT)          COMPILED OBJECT INITIALIZING ROUTINE\nZSASBND  DC    V(ZILSBND)          SPECIAL VARIABLE BINDING ROUTINE\nZSAFBND  DC    V(ZILFBND)          LEXICAL VARIABLE BINDING ROUTINE\nZSAMDF   DC    V(ZILMDF)           DOUBLE FLOAT BUILDING ROUTINE\nZSAVALS  DC    V(ZILVALS)          Multiple value returning routine\n         END\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ZSYS": {"ttr": 790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00$\\x00\\x88\\x01?\\x01\\x00#_\\x15Y\\x00i\\x00[\\x00g\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1988-01-13T00:00:00", "modifydate": "2000-08-22T15:59:24", "lines": 105, "newlines": 91, "modlines": 103, "user": "SEB1525"}, "text": "         MACRO\n         #ZSYS\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*  This macro establishes the global system specifications for       *\n.*  assembling ZIL code.  It interrogates the value of the SYSPARM    *\n.*  parameter and determines the operating system for which code is   *\n.*  being assembled.  Failure to provide a suitable SYSPARM value     *\n.*  will result in the failure of the assembly.                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLC  &ZPARM\n         GBLB  &ZSYSMAC\n         GBLB  &ZILMVS,&ZIL370,&ZILXA,&ZILVF,&ZILCMS,&ZILTSO,&ZILVPS\n         GBLC  &SYSSPLV              The MVS/XA \"SPLEVEL\" global\n.*\n         AIF   (&ZSYSMAC).MEND       Exit if #ZSYS already in assembly\n&ZSYSMAC SETB  1\n&SYSSPLV SETC  '1'                   Default SPLEVEL\n&ZPARM   SETC  '&SYSPARM'\n.*\n         AIF   ('&ZPARM' EQ '').DEFAULT\n         AIF   ('&ZPARM' EQ 'VECTOR').VF\n         AIF   ('&ZPARM' EQ 'VF').VF\n         AIF   ('&ZPARM' EQ '370').S370\n         AIF   ('&ZPARM' EQ 'MVS').S370\n         AIF   ('&ZPARM' EQ 'XA').XA\n         AIF   ('&ZPARM' EQ 'VM').CMS\n         AIF   ('&ZPARM' EQ 'VMXA').VMXA\n         AIF   ('&ZPARM' EQ 'CMS').CMS\n         AIF   ('&ZPARM' EQ 'VPS').VPS\n         AGO   .BADPARM\n.DEFAULT ANOP  ,                   No SYSPARM specified\n         MNOTE 0,'No SYSPARM value specified, assuming MVS/XA with VF.'\n         AGO   .VF\n.VF      ANOP  ,                   MVS/XA with vector facility\n&ZILMVS  SETB  1\n&ZILTSO  SETB  1\n&ZIL370  SETB  0\n&ZILXA   SETB  1\n&ZILVF   SETB  1\n&ZILCMS  SETB  0\n&ZILVPS  SETB  0\n         AGO   .DONE\n.S370    ANOP  ,                   MVS/370\n&ZILMVS  SETB  1\n&ZILTSO  SETB  1\n&ZIL370  SETB  1\n&ZILXA   SETB  0\n&ZILVF   SETB  0\n&ZILCMS  SETB  0\n&ZILVPS  SETB  0\n         AGO   .DONE\n.XA      ANOP  ,                   MVS/XA, no vector facility\n.*       MNOTE 0,'Warning, SYSPARM(XA) means no vector facility.'\n&ZILMVS  SETB  1\n&ZILTSO  SETB  1\n&ZIL370  SETB  0\n&ZILXA   SETB  1\n&ZILVF   SETB  0\n&ZILCMS  SETB  0\n&ZILVPS  SETB  0\n         AGO   .DONE\n.VMXA    ANOP  ,                   VM/XA\n&ZILMVS  SETB  0\n&ZILTSO  SETB  0\n&ZIL370  SETB  0\n&ZILXA   SETB  1\n&ZILVF   SETB  0\n&ZILCMS  SETB  1\n&ZILVPS  SETB  0\n         AGO   .DONE\n.CMS     ANOP  ,                   VM/CMS\n&ZILMVS  SETB  0\n&ZILTSO  SETB  0\n&ZIL370  SETB  1\n&ZILXA   SETB  0\n&ZILVF   SETB  0\n&ZILCMS  SETB  1\n&ZILVPS  SETB  0\n         AGO   .DONE\n.VPS     ANOP  ,                   VPS\n&ZILMVS  SETB  1                   MVS is simulated by VPS\n&ZILTSO  SETB  0                   but TSO, generally, is not\n&ZIL370  SETB  1\n&ZILXA   SETB  0\n.*ILVF   SETB  1                   VPS has the vector facility at BU\n&ZILVF   SETB  0                   but we're not going to use it now\n&ZILCMS  SETB  0\n&ZILVPS  SETB  1\n         AGO   .DONE\n.BADPARM ANOP\n         MNOTE 16,'Unknown SYSPARM value specified: &SYSPARM'\n         MEXIT\n.DONE    ANOP\n         AIF   (NOT &ZILXA).NOSPLVL\n&SYSSPLV SETC  '2'                 SPLEVEL SET=2\n.NOSPLVL ANOP\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ZUSING": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x87\\t\\x8f\\x00\\x89\\x16O\\x13\\x05\\x00\\x0b\\x00\\x08\\x00\\t\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1987-04-08T00:00:00", "modifydate": "1989-06-13T13:05:00", "lines": 11, "newlines": 8, "modlines": 9, "user": "SEB1525"}, "text": "         MACRO\n         #ZUSING ,\n.**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n.**********************************************************************\n         USING ZLCOMMON,#13\n         USING #SFTD,#8\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FIX2FLO": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x854\\x0f\\x00\\x89\\x16O\\x13\\x06\\x00\\x1b\\x00\\x18\\x00\\x1b\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1989-06-13T13:06:00", "lines": 27, "newlines": 24, "modlines": 27, "user": "SEB1525"}, "text": "**********************************************************************\n*                                                                    *\n* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n*                     All rights reserved.                           *\n*                                                                    *\n**********************************************************************\nFIX2FLO  DS    0H                  FIXED TO FLOAT CONVERSION SUBROUTINE\n*\n* COPIED FROM COPY MEMBER \"FIX2FLO\"\n*\n* SUBROUTINE TO CONVERT FIXED TO FLOAT.\n* ON ENTRY GR0 CONTAINS THE VALUE OF THE INTEGER TO BE CONVERTED.\n* ON RETURN FPR0 CONTAINS THE CONVERTED VALUE.\n* GR14 IS THE RETURN ADDRESS.  THIS ROUTINE MUST NOT ALTER GR15.\n*\n         SPACE 3\n         LTR   #1,#0               GET FIXNUM VALUE\n         LA    #0,X'4E'            PREPARE CHARACTERISTIC\n         BNM   FX2FLNN             IF VALUE IS NEGATIVE, THEN...\n         LPR   #1,#1                USE ABSOLUTE VALUE\n         LA    #0,X'CE'             SET SIGN IN CHARACTERISTIC\nFX2FLNN  DS    0H\n         SLL   #0,24               GET CHARACTERISTIC INTO POSITION\n         SDR   0,0                 MAKE A NORMALIZED ZERO\n         STM   #0,#1,ZLCDBL+0      STORE CHARACTERISTIC AND MANTISSA\n         AD    0,ZLCDBL            ADD UNNORMALIZED FLONUM, NORMALIZING\n         BR    #14                 RETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "Z": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x89\\x16O\\x00\\x89\\x16O\\x13\\x01\\x00\\x05\\x00\\x05\\x00\\x00\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1989-06-13T00:00:00", "modifydate": "1989-06-13T13:01:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "SEB1525"}, "text": ".**********************************************************************\n.*                                                                    *\n.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *\n.*                     All rights reserved.                           *\n.*                                                                    *\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT476/CBT.V500.FILE476.PDS/MACLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT476/CBT.V500.FILE476.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}