{"INMR01": {"INMLRECL": 80, "INMFNODE": "CSDLMVS", "INMFUID": "SEB1525", "INMTNODE": "MVS", "INMTUID": "CSDL", "INMFTIME": "20000926092814000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "PROGLIB.ZILCBT.HELP", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"PROGLIB.ZILCBT.HELP": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "000269", "DS1SCEXT": "b'\\x80\\x18\\x10'", "DS1SCALO": "b'P\\x00\\x002'", "DS1LSTAR": "b'\\x00\\x01\\x11'", "DS1TRBAL": "b'\\x0c\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x04\\x10\\x00\\x04\\xa9-p'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x04\\x10\\x00\\x04\\xa9-p'", "b'X\\xf3y\\xd0\\x00\\x00\\x00\\x85\\x00\\x06\\x00\\x85\\x00\\x0e\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"LISP": {"ttr": 34, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00S\\x01\\x00\\x11\\x0f\\x01\\x00$\\x1f\\x16(\\x00=\\x005\\x00\\x16\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-04-19T00:00:00", "modifydate": "2000-08-28T16:28:53", "lines": 61, "newlines": 53, "modlines": 22, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST invokes the ZIL interpreter.  ZIL, an implementation of\n   the LISP language developed at Draper Laboratory for the MVS\n   operating system, allows you to execute both interpreted and\n   compiled LISP functions.\n\n   Notes:\n\n   A full screen ISPF-based interface to ZIL is available if you\n   execute the XZIL CLIST, either from READY mode or from within ISPF.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n   In addition, the (HELP) function invoked from within the ZIL\n   interpreter displays information from the above data set.\n\n)X Syntax -\n\n   LISP    INITFILE ('init file dsname') / NOINITFILE\n           SUBRLIB  ('load library list')\n           ACSIZE   ('size of active cons space')\n           CSSIZE   ('size of total cons space')\n           PDSIZE   ('size of control stack')\n           VSSIZE   ('size of vector/string space')\n           DRIBBLE\n           NEW\n           OLD\n\n   Required - none (all operands are optional)\n\n   Note:  The defaults for ACSIZE, CSSIZE, PDSIZE and VSSIZE are the\n          ZIL system defaults for these parameters, which may be found\n          in member $PARM of 'PROGLIB.ZIL.TEXT'.\n\n)O Operands -\n\n)I LISPOPTS\n\n))INITFILE ('source dsname')\n\n  Optional, must be a sequential source data set or PDS member.\n  Specify the name of a data set that contains your INIT file\n  (which may contain your own function and macro definitions).\n\n  If you omit this parameter, no INIT file is used.\n\n))NOINITFILE\n\n  If you specify NOINITFILE, no INIT file is used.\n\n))SUBRLIB ('load library name')\n\n  A load library with NO member name specified.  Specify the name of a\n  library that contains your compiled LISP functions (you would specify\n  this library as the LOAD parameter to LISPCOMP when compiling).\n\n  If you omit SUBRLIB, you do not get any compiled functions other than\n  the standard ZIL system functions, which are always present.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISPCOMP": {"ttr": 36, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x003\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x16&\\x01\\x17\\x01\\x17\\x00\\x00\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T16:26:33", "lines": 279, "newlines": 279, "modlines": 0, "user": "SEB1525"}, "text": ")F Function -\n\n   The LISPCOMP CLIST invokes the ZIL LISP compiler. Unlike other\n   compiler CLISTs you may be familiar with, LISPCOMP creates a LOAD\n   module, suitable for loading into an interactive ZIL LISP session or\n   linkediting into a ZIL LISP program.\n\n   Three kinds of source code entities can be compiled:  FUNCTIONs,\n   MODULEs, and PROGRAMs.  You must specify which type of entity you\n   are compiling; the default is MODULE.  For more information about\n   ZIL compilation, see member $COMPILE of the ZIL documentation\n   library 'PROGLIB.ZIL.TEXT'.\n\n   LISPCOMP calls the ZIL compiler to create assembler source code,\n   calls the assembler to assemble the code into an object module,\n   and then calls the linkage editor to create a load module (NCAL\n   unless PROGRAM was specified).  The data sets created to hold\n   intermediate output from these processors, as well as listing output\n   from these processors, are given \"temporary\" names by default.\n\n)X Syntax -\n\n   LISPCOMP 'dataset-name'  (of type \".LISP\")\n            FUNCTION / PROGRAM / MODULE\n            NAME('name')\n            LOAD(--.LOAD) / NOLOAD\n            PRINT(--.ZILLIST/*) / NOPRINT/ NOPRINT\n            ASM(--.ASM) / NOASM\n            MACROS('macro file list')\n            SUBRLIB('load library list')\n            ACSIZE('size')\n            CSSIZE('size')\n            PDSIZE('size')\n            VSSIZE('size')\n            DEBUG / NODEBUG\n            TRANSDEBUG / NOTRANSDEBUG\n            NEW\n            OLD\n\n   Required:  dataset-name.\n   Defaults:  (assuming dataset-name is \"defaultds.LISP\")\n              LOAD(defaultds.LOAD)\n              MODULE\n              NAME     defaults to member name of \"dataset-name\"\n                       or member name of LOAD\n              PRINT(*)\n              ASM(ZIL.$ZILTEMP.ASM)\n              MACROS   defaults to null\n              SUBRLIB  defaults to null\n              ACSIZE   defaults to null\n              CSSIZE   defaults to null\n              PDSIZE   defaults to null\n              VSSIZE   defaults to null\n              NODEBUG\n              NOTRANSDEBUG\n\n   Examples:  LISPCOMP ZIL(FACT) FUNCTION\n              compiles your ZIL.LISP(FACT) as a FUNCTION into your\n              ZIL.LOAD(FACT).\n\n              LISPCOMP 'ABC1234.THEIR.LISP(STUFF)' +\n                       LOAD(MY(ZSTUFF))\n              compiles 'ABC1234.THEIR.LISP(STUFF)' as a MODULE into\n              your_userid.MY.LOAD(ZSTUFF).\n\n   Alias:     none.\n\n   Notes: If NOASM is specified, NOLOAD is assumed.\n\n          If neither dataset-name nor LOAD has a member name\n          specified, NAME is required.\n\n          The assembler listing goes to prefix.ZIL.$ZILTEMP.ASMLIST,\n          and the object module goes to prefix.ZIL.$ZILTEMP.OBJ.\n\n   Note:  The defaults for ACSIZE, CSSIZE, PDSIZE and VSSIZE are the\n          ZIL system defaults for these parameters, which may be found\n          in member $PARM of 'PROGLIB.ZIL.TEXT'.\n\n)O Operands -\n\n)P dataset-name\n\n  The source dataset name must have the final qualifier of \".LISP\".\n  When omitted, this qualifier is assumed.  Specify either a fully\n  qualified name in single quotes or just the \"midsection\" of the name\n  without quotes; your TSO prefix will then be assumed.  Both the\n  \".LISP\" and \".LOAD\" datasets must currently exist on disk.\n\n  When the input is from a partitioned dataset, the dataset name\n  provided must contain the name (in parentheses, within any quoting)\n  of the member to be processed.\n\n))FUNCTION\n\n  Specifies that the LISP source program is to be compiled as a\n  \"function\".\n\n  When you compile a FUNCTION, you create a load module representing a\n  single LISP function, which may be brought into a ZIL session via the\n  autoload process automatically, or linkedited with a ZIL program.\n  The input source must contain a definition for a function with the\n  specified name.\n\n))MODULE\n\n  Specifies that the LISP source program is to be compiled as a\n  \"module\".  This is the default when neither FUNCTION, MODULE, nor\n  PROGRAM is specified.\n\n  When you compile a MODULE, you create a load module which, when\n  executed (by specifying its name as a function of no arguments),\n  causes all the code to be loaded into the ZIL system in compiled\n  format, including function definitions.  The input source must not\n  contain any definition for a function with the same name as the\n  module specified.\n\n))PROGRAM\n\n  Specifies that the LISP source program is to be compiled as a\n  \"program\".  When this is specified, external references are\n  resolved in the linkedit from the system ZIL library, as well\n  as any SUBRLIB libraries that may have been specified.\n\n  When you compile a PROGRAM, you create a load module which can be\n  executed as a program at the operating system level (e.g. in JCL on\n  the // EXEC statement, or under TSO via CALL or a similar command),\n  provided that the ZIL system library, 'PROGLIB.ZIL.LOAD',\n  is present as a STEPLIB or equivalent.  The ZIL interpreter and\n  compiler are examples of ZIL PROGRAMs.  The input source must not\n  contain any function definition with the same name as the program\n  specified in the input source.\n\n  Note:  It is NOT recommended that you create ZIL PROGRAMs, since\n         you will not benefit from any maintenance to ZIL system\n         functions, and you may even end up with incompatible code.\n\n))NAME('name')\n\n  Specifies the name of the function, module or program that is\n  being compiled, as far as the compiler is concerned.  This\n  name should be identical to the name of the load module being\n  created, but need not match the source member name (if any).\n\n  If NAME is omitted, it defaults as follows:\n\n  (1) If a member name was specified on the LOAD parameter,\n      that name is used.\n\n  (2) If a member name was specified on the positional dataset-name,\n      that name is used.\n\n  (3) If neither of the above is the case (which means that the\n      input dataset is sequential), LISPCOMP issues an error message\n      and terminates.  You are required to specify the NAME operand\n      in that case.\n\n))PRINT()\n\n  By default, output from the ZIL LISP compiler is directed to the\n  terminal.  If you wish, you may specify a dataset name as the value\n  of the PRINT operand.  If the name is not fully qualified, a default\n  qualifier of \".ZILLIST\" will be appended to it; if you wish to\n  specify a fully-qualified name, you must enclose it in TRIPLE\n  apostrophes.\n\n  NOPRINT overrides PRINT.\n\n  PRINT does not affect output from the assembler or linkage editor.\n  The assembler listing always goes to prefix.ZIL.$ZILTEMP.ASMLIST,\n  and the object module always goes to prefix.ZIL.$ZILTEMP.OBJ.\n\n))NOPRINT\n\n  NOPRINT may be specified (without a value) to suppress all\n  listing output from the ZIL compiler.\n\n  NOPRINT does not affect output from the assembler or linkage editor.\n\n))LOAD()\n\n  The load module produced will be stored in the dataset named by\n  this parameter, unless NOLOAD has been specified.  If LOAD is not\n  specified, the default name will be that of the input dataset with\n  \".LISP\" replaced by \".LOAD\".\n\n  The LOAD dataset must be an EXISTING load module PDS.  If no member\n  name is specified, then either the value of the NAME operand (if\n  specified) or the member name specified on the positional\n  'dataset-name' operand will be used.  If none of these is present, an\n  error message is issued and processing is terminated.\n\n))NOLOAD\n\n  NOLOAD may be specified (without a value) to suppress the assembly\n  and linkedit of the output of the ZIL compiler, so that no load\n  module is produced.  The assembler source code output of the compiler\n  is still generated, however, unless NOASM is specified.\n\n))ASM()\n\n  The ZIL LISP compiler produces as output a file of assembler language\n  source code, which is then fed to the assembler.  By default, this\n  dataset is named 'prefix.ZIL.$ZILTEMP.ASM'.  You may override this\n  name via the ASM parameter.\n\n  If the name is not fully qualified, a default qualifier of \".ASM\"\n  will be appended to it; if you wish to specify a fully-qualified\n  name, you must enclose it in TRIPLE apostrophes.  The dataset may be\n  sequential or partitioned; if it is partitioned, you must specify a\n  member name.\n\n  NOASM overrides ASM.\n\n))NOASM\n\n  You may specify NOASM (without a value) to suppress the generation\n  of the assembler source file by the ZIL compiler.  In this case,\n  assembly and linkedit are bypassed (as for NOLOAD).\n\n))MACROS('macro file list')\n\n  A list of datasets containing LISP source code (e.g. macro\n  definitions) to be loaded into the ZIL compiler.  These are\n  sequential datasets or PDS members, and must all have the same DCB\n  attributes (the preferred format is RECFM=VB, LRECL=255).  This\n  operand defaults to null, but must be specified with triple quotes if\n  used.  Examples:\n\n    MACROS('''ABC1234.A.LISP(FOO)''')\n    MACROS('''ABC1234.A.LISP(FOO)'' ''DEF5678.Z.LISP(BAR)''')\n    MACROS('FOO1.LISP FOO2.LISP')                  ... userid prefixed\n\n))SUBRLIB('load library list')\n\n  A list of load module libraries to use when compiling (and also to\n  resolve external references at linkedit time when compiling a\n  PROGRAM).  The libraries are assumed to contain compiled ZIL code.\n  This operand defaults to null, but must be specified with triple\n  quotes if used.  Examples:\n\n    SUBRLIB('''ABC1234.A.LOAD''')                   ... one library\n    SUBRLIB('''ABC1234.A.LOAD'' ''DEF5678.Z.LOAD'') ... two libraries\n    SUBRLIB('MY.LOAD MY.OTHER.LOAD')                ... userid prefixed\n\n))DEBUG\n\n    Specifies that the ZIL compiler run in \"debug mode\".  The assembler\n    code produced by the compiler will be the same, but a great deal of\n    internal information will be dumped to the compilation listing.\n    It is recommended that PRINT(datasetname) be specified when using\n    this option.  The default is NODEBUG.\n\n))NODEBUG\n\n    Specifies that the ZIL compiler run in its normal mode, without\n    \"debug mode\" specified.  This is the default.\n\n))TRANSDEBUG\n\n    Specifies that you wish to see the output of the source\n    transformation phase of the ZIL compiler.  This output is always\n    directed to the terminal.\n\n    The default is NOTRANSDEBUG.  Note that the ZIL compiler always\n    invokes source transformations, regardless of whether you specify\n    TRANSDEBUG or NOTRANSDEBUG.\n\n))NOTRANSDEBUG\n\n    Specifies that you do not care to see the output of the ZIL\n    compiler's source transformation phase.  This is the default.\n    Note that the ZIL compiler always invokes source transformations,\n    regardless of whether you specify TRANSDEBUG or NOTRANSDEBUG.\n\n ======================================================================\n\n)I LISPOPTS\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISPOPTS": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x00#\\x1f\\x01\\x00#\\x1f\\x10(\\x00?\\x00?\\x00\\x00\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-18T00:00:00", "modifydate": "2000-08-18T10:28:06", "lines": 63, "newlines": 63, "modlines": 0, "user": "SEB1525"}, "text": "\n))DRIBBLE\n\n  If DRIBBLE is specified, all terminal input and output of the LISP\n  session is recorded on the held SYSOUT class.  You may then browse\n  this output on the JES spool, requeue it for printing, or copy it\n  into a data set (e.g. from SDSF).\n\n  Note: DRIBBLE is available only for interactive sessions.  For\n        example, you cannot specify DRIBBLE when running the ZIL\n        compiler.\n\n))NEW\n\n  If NEW is specified, an alternate version (test release) of the ZIL\n  system is invoked.  Do not specify both OLD and NEW.\n\n))OLD\n\n  If OLD is specified, a backup version (prior release) of the ZIL\n  system is invoked.  Do not specify both OLD and NEW.\n\n))ACSIZE\n\n  The size of the ZIL CONS space (\"free list\") to be considered active\n  initially.  This value may be specified as an integer or a value in\n  the format nnnK or nnnM.  If this is omitted, the ZIL system's\n  default value is used.\n\n  This value controls how much of the total CONS space (as specified\n  by CSSIZE) is in use, until it is determined (by the ZIL garbage\n  collector) that more space is needed, at which time the ACSIZE\n  value is doubled, provided that it does not exceed the CSSIZE value.\n\n))CSSIZE\n\n  The size of the ZIL CONS space (\"free list\") to be allocated at\n  initialization time.  This value may be specified as an integer or\n  a value in the format nnnK or nnnM.  If this is omitted, the ZIL\n  system's default value is used.\n\n  This value represents the TOTAL allocation, not to be confused with\n  the initial ACTIVE size of the space - see ACSIZE.\n\n))PDSIZE\n\n  The size of the ZIL control stack to be allocated at initialization.\n  This value may be specified as an integer or a value in the format\n  nnnK or nnnM.  If this is omitted, the ZIL system's default value is\n  used.\n\n))VSSIZE\n\n  The size of ZIL vector/string space (the space used to build vectors,\n  strings, structures, and other non-list objects) to be allocated at\n  initialization time.  This value may be specified as an integer or a\n  value in the format nnnK or nnnM.  If this is omitted, the ZIL\n  system's default value is used.\n\n  Note that this space is allocated in duplicate, due to the copying\n  garbage collection scheme used for this space in ZIL.  Thus in\n  actuality twice the specified value is required.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XZIFILE": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00I\\x00\\x843\\x8f\\x01\\x00#\\x1f\\x101\\x00@\\x00>\\x00\\x08\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-12-03T00:00:00", "modifydate": "2000-08-18T10:31:49", "lines": 64, "newlines": 62, "modlines": 8, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST allocates a ZIL input file (ZIL is an implementation\n   of the LISP language developed at Draper Laboratory for the MVS\n   operating system).\n\n   Input files are referenced within ZIL by file names, which are\n   atoms whose print names are 4 characters long or less.\n   These correspond to MVS ddnames which are 8 characters long or\n   less, which are generated by prefixing the ZIL file name with\n   \"ZILI\".  For example:\n\n    (READ 'FOO)  will read an S-expression from the input file\n                 allocated to ddname ZILIFOO.\n\n   The XZIFREE CLIST will free a file allocated by this CLIST.\n\n   Notes:\n\n   For information on how ZIL files work, see member $FILE of the\n   documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n)X Syntax -\n\n   XZIFILE 'filename'\n           'datasetname'\n           DISPOSITION(SHR/OLD)\n           REUSE\n\n   Required - 'filename' and 'datasetname'\n\n   Defaults:  DISPOSITION(SHR)\n\n)O Operands -\n\n)P'filename'\n\n  Must be a valid ZIL file name of from 1 to 4 characters, and not\n  NIL or T.  The characters \"ZILI\" will be appended to the beginning\n  of this file name to make the MVS ddname.\n\n  If the ddname is already allocated, this CLIST will fail unless\n  the REUSE keyword is specified.\n\n)P'datasetname'\n\n  The name of a data set to be associated with the specified\n  file name.  The data set must be an existing on-line data set.\n\n))DISPOSITION(SHR/OLD)\n\n  Specifies whether the data set should be allocated shared\n  (SHR, the default) or exclusive (OLD).\n\n))REUSE\n\n  You must specify REUSE if the ddname may be already allocated\n  and you want to free and reallocate it.  If you do not specify\n  this parameter, the CLIST will fail if the ddname is already in use\n  under your TSO session.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XZIFREE": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00A\\x00\\x843\\x8f\\x01\\x00#\\x1f\\x102\\x00&\\x00&\\x00\\x06\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-12-03T00:00:00", "modifydate": "2000-08-18T10:32:41", "lines": 38, "newlines": 38, "modlines": 6, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST frees a ZIL input file (ZIL is an implementation\n   of the LISP language developed at Draper Laboratory for the MVS\n   operating system).\n\n   Input files are referenced within ZIL by file names, which are\n   atoms whose print names are 4 characters long or less.\n   These correspond to MVS ddnames which are 8 characters long or\n   less, which are generated by prefixing the ZIL file name with\n   \"ZILI\".  For example:\n\n    (READ 'FOO)  will read an S-expression from the input file\n                 allocated to ddname ZILIFOO.\n\n   Notes:\n\n   For information on how ZIL files work, see member $FILE of the\n   documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n)X Syntax -\n\n   XZIFREE 'filename'\n\n   Required - 'filename'\n\n\n)O Operands -\n\n)P'filename'\n\n  Must be a valid ZIL file name of from 1 to 4 characters, and not\n  NIL or T.  The characters \"ZILI\" will be appended to the beginning\n  of this file name to make the MVS ddname.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XZIL": {"ttr": 267, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x00\\x843\\x8f\\x01\\x00#\\x1f\\x107\\x00\\x1f\\x00 \\x00\\x10\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-12-03T00:00:00", "modifydate": "2000-08-18T10:37:33", "lines": 31, "newlines": 32, "modlines": 16, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST invokes the full screen interface to ZIL, an\n   implementation of the LISP language developed at Draper Laboratory\n   for the MVS operating system.\n\n   Under this option, which executes as an ISPF dialog, you may run the\n   ZIL interpreter or edit, compile and run LISP functions or programs,\n   under the interpreter (for functions) or by themselves (for\n   programs).  Compilations may be run in foreground or batch, and\n   functions may be linkedited into compiled load modules.\n\n   You may enter XZIL from READY mode or from within ISPF.\n\n   A complete tutorial is available from the ZIL primary option menu,\n   which is displayed upon entry.  If you have never used ISPF, XZIL\n   will initialize your ISPF profile environment for you.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n)X Syntax -\n\n   XZIL\n\n\n)O Operands -\n\n   None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XZOFILE": {"ttr": 269, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x14\\x00\\x843\\x8f\\x01\\x00#\\x1f\\x104\\x00d\\x00d\\x00\\x1f\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1984-12-03T00:00:00", "modifydate": "2000-08-18T10:34:14", "lines": 100, "newlines": 100, "modlines": 31, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST allocates a ZIL output file (ZIL is an implementation\n   of the LISP language developed at Draper Laboratory for the MVS\n   operating system).\n\n   Output files are referenced within ZIL by file names, which are\n   atoms whose print names are 4 characters long or less.\n   These correspond to MVS ddnames which are 8 characters long or\n   less, which are generated by prefixing the ZIL file name with\n   \"ZILO\".  For example:\n\n   (PRINT 'HI 'FOO)  will print the atom \"HI\" on the output file\n                     allocated to ddname ZILOFOO.\n\n   The XZOFREE CLIST will free a file allocated by this CLIST.\n\n   Notes:\n\n   When the dataset is created as NEW, it is assigned the\n   following DCB attributes:\n\n    RECFM=FB, LRECL=80,BLKSIZE=800\n\n   For information on how ZIL files work, see member $FILE of the\n   documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n)X Syntax -\n\n   XZOFILE 'filename'\n           'datasetname'\n           REUSE\n           RELEASE\n           NEW/OLD/MOD\n\n   Required - 'filename' and 'datasetname'\n\n   Defaults:  If the specified dataset already exists, OLD;\n              otherwise NEW.\n\n)O Operands -\n\n)P'filename'\n\n  Must be a valid ZIL file name of from 1 to 4 characters, and not\n  NIL or T.  The characters \"ZILO\" will be appended to the beginning\n  of this file name to make the MVS ddname.\n\n  If the ddname is already allocated, this CLIST will fail unless\n  the REUSE keyword is specified.\n\n  The dataset will be opened for output the first time it is referenced\n  by the ZIL interpreter or other program;  if it is not referenced, it\n  will remain unchanged.\n\n)P'datasetname'\n\n  The name of a data set to be associated with the specified file name.\n  The data set may be an existing on-line data set, in which case the\n  disposition defaults to OLD, or it may not yet exist, in which case\n  it is created with a default disposition of NEW.\n\n))RELEASE\n\n  Specifies whether unused space should be released to the operating\n  system when the dataset is closed, i.e. when the ZIL interpreter or\n  other program terminates.  The default is not to release unused\n  space.\n\n))REUSE\n\n  You must specify REUSE if the ddname may be already allocated and you\n  want to free and reallocate it.  If you do not specify this\n  parameter, the CLIST will fail if the ddname is already in use under\n  your TSO session.\n\n))NEW\n\n  Specifies that the dataset does not currently exist and is to be\n  created with a disposition of NEW.  If the dataset already exists,\n  the CLIST will fail.\n\n))OLD\n\n  Specifies that the dataset already exists and is to be allocated with\n  a disposition of OLD (shared use is not permitted by this CLIST).\n  If the dataset does not exist or is not on-line, the CLIST will fail.\n\n))MOD\n\n  If the dataset already exists, this specifies that it is to be\n  allocated with a disposition of MOD, i.e. data is to be written at\n  the end of the data set instead of having the current data\n  overwritten.\n\n  If the dataset does not already exist, this is equivalent to NEW.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XZOFREE": {"ttr": 272, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00I\\x00\\x843\\x8f\\x01\\x00#\\x1f\\x104\\x00&\\x00&\\x00\\x06\\xe2\\xc5\\xc2\\xf1\\xf5\\xf2\\xf5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-12-03T00:00:00", "modifydate": "2000-08-18T10:34:49", "lines": 38, "newlines": 38, "modlines": 6, "user": "SEB1525"}, "text": ")F Function -\n\n   This CLIST frees a ZIL output file (ZIL is an implementation\n   of the LISP language developed at Draper Laboratory for the MVS\n   operating system).\n\n   Output files are referenced within ZIL by file names, which are\n   atoms whose print names are 4 characters long or less.\n   These correspond to MVS ddnames which are 8 characters long or\n   less, which are generated by prefixing the ZIL file name with\n   \"ZILO\".  For example:\n\n    (PRINT 'HI 'FOO)  will print the atom \"HI\" on the output file\n                 allocated to ddname ZILOFOO.\n\n   Notes:\n\n   For information on how ZIL files work, see member $FILE of the\n   documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n   For information on how to use ZIL, you may browse or print out the\n   on-line documentation contained in 'PROGLIB.ZIL.TEXT'.\n\n)X Syntax -\n\n   XZOFREE 'filename'\n\n   Required - 'filename'\n\n\n)O Operands -\n\n)P'filename'\n\n  Must be a valid ZIL file name of from 1 to 4 characters, and not\n  NIL or T.  The characters \"ZILO\" will be appended to the beginning\n  of this file name to make the MVS ddname.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT476/CBT.V500.FILE476.PDS/HELP.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT476/CBT.V500.FILE476.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}