000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. COMBSORT.
000300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
000400*  AUTHOR. JAY MOSELEY.                                         *
000500*  DATE-WRITTEN. FEBRUARY, 2001.                                *
000600*  FUNCTION. THIS IS AN IMPLEMENTATION OF THE COMB SORT         *
000700*            ALGORITHM.  THE COMBSORT IS AN EXTENDED BUBBLESORT *
000800*            WHICH IS VERY FAST, IS EASILY IMPLEMENTED, AND     *
000900*            INCURS LITTLE MEMORY OVERHEAD.                     *
001000*                                                               *
001100*  MODIFIED JANUARY, 2002 TO COMPILE UNDER THE MVT COMPILER.    *
001200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
001300
001400 ENVIRONMENT DIVISION.
001500 INPUT-OUTPUT SECTION.
001600 FILE-CONTROL.
001700
001800     SELECT TEST-DATA
001900         ASSIGN TO UR-2540R-S-SYSIN.
002000
002100 DATA DIVISION.
002200 FILE SECTION.
002300
002400 FD  TEST-DATA
002500     LABEL RECORDS ARE OMITTED
002600     DATA RECORD IS TEST-RECORD.
002700 01  TEST-RECORD.
002800     02  FILLER                  PIC X(13).
002900     02  TR-SEQUENCE             PIC 9(05).
003000     02  FILLER                  PIC X(02).
003100     02  TR-KEYFIELD             PIC X(10).
003200     02  FILLER                  PIC X(50).
003300
003400 WORKING-STORAGE SECTION.
003500
003600 01  END-OF-DATA-INDICATOR       PIC X(01)   VALUE 'N'.
003700     88  END-OF-DATA                         VALUE 'Y'.
003800
003900 01  EDIT-NUMBER                 PIC ZZ,ZZ9.
004000
004100 01  EDIT-TIME                   PIC Z9B99B99B99.
004200 01  FILLER                      REDEFINES EDIT-TIME.
004300     02  FILLER                  PIC X(2).
004400     02  ET-COLON1               PIC X(1).
004500     02  FILLER                  PIC X(2).
004600     02  ET-COLON2               PIC X(1).
004700     02  FILLER                  PIC X(2).
004800     02  ET-PERIOD               PIC X(1).
004900     02  FILLER                  PIC X(2).
005000
005100* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
005200* THE FOLLOWING DATA ITEMS ARE USED DURING THE SORT PROCESS.    *
005300* SORT-GAP, AS DEFINED, WILL HANDLE A TABLE OF 99,999 ITMES.    *
005400* SORT-I, SORT-J ARE USED AS SUBSCRIPTS.                        *
005500* SORT-SIZE IS THE NUMBER OF ELEMENTS TO BE SORTED.             *
005600* SORT-SWAP IS A HOLDING FIELD FOR EXCHANGING ITEMS AND MUST    *
005700* BE AS LARGE AS A SINGLE ELEMENT OF THE TABLE BEING SORTED.    *
005800* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
005900 01  SORT-WORK.
006000     02  SORT-GAP                PIC 9(5)V99.
006100     02  FILLER                  REDEFINES SORT-GAP.
006200         03  SORT-GAP-INTEGER    PIC 9(5).
006300         03  FILLER              PIC 99.
006400
006500     02  SORT-I                  PIC S9(8)   COMP.
006600     02  SORT-J                  PIC S9(8)   COMP.
006700     02  SORT-SIZE               PIC S9(8)   COMP.
006800     02  SORT-SWAP               PIC X(13).
006900
007000     02  SORT-CHANGED            PIC X(01).
007100         88  SORT-CHANGED-ORDER              VALUE 'Y'.
007200         88  SORT-UNCHANGED-ORDER            VALUE 'N'.
007300
007400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
007500* THE FOLLOWING TABLE CONTAINS THE ELEMENTS TO BE SORTED.       *
007600* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
007700 01  SAMPLE-DATA.
007800     02  SAMPLE-ELEMENT          OCCURS 10000 TIMES.
007900         03  SAMPLE-KEY          PIC X(10).
008000         03  SAMPLE-SEQUENCE     PIC S9(5)   COMP-3.
008100
008200 PROCEDURE DIVISION.
008300
008400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
008500* THE ELEMENTS TO BE SORTED ARE LOADED FROM A TEXT FILE.        *
008600* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
008700 0000-LOAD-DATA.
008800
008900     OPEN INPUT TEST-DATA.
009000
009100     MOVE +0 TO SORT-SIZE.
009200
009300     PERFORM 1000-READ-AND-LOAD
009400         UNTIL END-OF-DATA.
009500*    END-PERFORM.
009600
009700     CLOSE TEST-DATA.
009800
009900     MOVE SORT-SIZE TO EDIT-NUMBER.
010000     DISPLAY 'LOADED '
010100             EDIT-NUMBER
010200             ' RECORDS.'
010300     DISPLAY ' '.
010400     MOVE TIME-OF-DAY TO EDIT-TIME.
010500     MOVE ':' TO ET-COLON1, ET-COLON2.
010600     MOVE '.' TO ET-PERIOD.
010700     DISPLAY 'SORT BEGINNING AT '
010800             EDIT-TIME.
010900
011000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
011100* THE COMB SORT ALGORITHM.                                      *
011200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
011300 0000-SORT-DATA.
011400
011500     MOVE SORT-SIZE TO SORT-GAP.
011600
011700     PERFORM 2000-SORT-TABLE
011800         UNTIL SORT-UNCHANGED-ORDER
011900           AND SORT-GAP EQUAL 1.00.
012000*    END-PERFORM.
012100
012200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
012300* DISPLAY SORTED ELEMENTS.                                      *
012400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
012500 0000-DISPLAY-DATA.
012600     MOVE TIME-OF-DAY TO EDIT-TIME.
012700     MOVE ':' TO ET-COLON1, ET-COLON2.
012800     MOVE '.' TO ET-PERIOD.
012900     DISPLAY 'SORT COMPLETED AT '
013000             EDIT-TIME.
013100     DISPLAY ' '.
013200
013300     PERFORM 3000-DISPLAY-ELEMENT
013400         VARYING SORT-I
013500             FROM +1 BY +1
013600         UNTIL SORT-I GREATER THAN SORT-SIZE.
013700*    END-PERFORM.
013800
013900     STOP RUN.
014000* - - - - - - - - - - - - - - - - - - - - -> PROGRAM EXIT POINT <
014100
014200 1000-READ-AND-LOAD.
014300
014400     READ TEST-DATA
014500         AT END
014600             MOVE 'Y' TO END-OF-DATA-INDICATOR.
014700*    END-READ.
014800
014900     IF NOT END-OF-DATA
015000         ADD +1 TO SORT-SIZE
015100         MOVE TR-KEYFIELD TO SAMPLE-KEY (SORT-SIZE)
015200         MOVE TR-SEQUENCE TO SAMPLE-SEQUENCE (SORT-SIZE).
015300*    END-IF.
015400
015500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <
015600
015700 2000-SORT-TABLE.
015800     MOVE 'N' TO SORT-CHANGED.
015900
016000     COMPUTE SORT-GAP = SORT-GAP / 1.3.
016100     IF SORT-GAP-INTEGER EQUAL 0
016200         MOVE 1.00 TO SORT-GAP
016300     ELSE
016400         IF SORT-GAP-INTEGER EQUAL 9 OR 10
016500             MOVE 11.00 TO SORT-GAP.
016600*        END-IF
016700*    END-IF.
016800
016900     PERFORM 2100-SORT-ITERATE
017000         VARYING SORT-I
017100             FROM +1 BY +1
017200         UNTIL SORT-I GREATER THAN (SORT-SIZE - SORT-GAP-INTEGER).
017300*    END-PERFORM.
017400
017500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <
017600
017700 2100-SORT-ITERATE.
017800
017900     COMPUTE SORT-J = SORT-I + SORT-GAP-INTEGER.
018000
018100     IF SAMPLE-KEY (SORT-I) GREATER THAN
018200        SAMPLE-KEY (SORT-J)
018300         MOVE SAMPLE-ELEMENT (SORT-J) TO SORT-SWAP
018400         MOVE SAMPLE-ELEMENT (SORT-I) TO
018500              SAMPLE-ELEMENT (SORT-J)
018600         MOVE SORT-SWAP TO SAMPLE-ELEMENT (SORT-I)
018700         MOVE 'Y' TO SORT-CHANGED.
018800*    END-IF.
018900
019000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <
019100
019200 3000-DISPLAY-ELEMENT.
019300
019400     MOVE SAMPLE-SEQUENCE (SORT-I) TO EDIT-NUMBER.
019500     DISPLAY 'TEST RECORD #'
019600             EDIT-NUMBER
019700             '   '
019800             SAMPLE-KEY (SORT-I).
019900
020000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <
020100
020200*END PROGRAM COMBSORT.
