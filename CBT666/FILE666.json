{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012550000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE666.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE666.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x07'", "DS1TRBAL": "b'Z\\xd8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xba\\x00\\x00\\x04\\xba\\x00\\x03\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\x10\\x11\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T10:11:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  666\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE666\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 845 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/17/04    10:11:36    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$COMBSRT": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x000\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\x10\\x03\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T10:03:30", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "Comb Sort\n\n    (COBOL)  The comb sort algorithm is an extended bubble sort\n    that outperforms the basic bubble sort and is very simple to\n    implement.  This program reads in 10,000 records from SYSIN,\n    sorts them, and prints the sort time and sorted records on\n    SYSOUT.  Under Hercules the times I saw were around 5/100ths\n    of a second to sort the 10,000 randomly generated test\n    records.  The COBOL source is in member COMBSORT.  (A slightly\n    cleaner implementation with inline perform statements is also\n    included as member COMBSRTC, but of course it will not compile\n    with the MVT compiler).\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$RANDOM": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x16\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\tY\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T09:59:16", "lines": 21, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "Pseudo-Random Number Generator\n\n    (Assembler)  I recently decided to try consolidating some\n    programs I use to generate test data into a single run unit.\n    The first hurdle was finding a suitable random number\n    generator that I could implement under MVS 3.8.\n    Unfortunately, the COBOL compiler we have available to us\n    lacks those handy intrinsic functions, including RANDOM.  I\n    also found that there are not many solutions available in\n    Assembler or COBOL.  And those few I found (well, actually\n    only a couple and they were very old) failed to built very\n    random sets of numbers.  I came up with a subroutine, written\n    in Assembler, based on the Linear Congruential method\n    (described in Knuth, Sedgewick, and in many places on the\n    'net).  It isn't cryptographic quality, but will do for\n    simulation and ad hoc sets of test numbers.  I also wrote a\n    COBOL program to do some analysis on the generated number\n    sets.  The jobstream contained in member RANDOM will run the\n    analysis program and illustrates how to link the Assembler\n    routine to your own programs.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE666": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\x10\\x11\\x00/\\x00/\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T10:11:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "CBT-465"}, "text": "//***FILE 666 is from Jay Moseley and contains his random number    *   FILE 666\n//*           generator for generating test data, and his           *   FILE 666\n//*           implementation of the COMBSORT extended bubble sort   *   FILE 666\n//*           algorithm.                                            *   FILE 666\n//*                                                                 *   FILE 666\n//*           email:     jay@jaymoseley.com                         *   FILE 666\n//*           web site:  www.jaymoseley.com                         *   FILE 666\n//*                                                                 *   FILE 666\n//*     Pseudo-Random Number Generator                              *   FILE 666\n//*                                                                 *   FILE 666\n//*         (Assembler)  I recently decided to try                  *   FILE 666\n//*         consolidating some programs I use to generate test      *   FILE 666\n//*         data into a single run unit.  The first hurdle was      *   FILE 666\n//*         finding a suitable random number generator that I       *   FILE 666\n//*         could implement under MVS 3.8.  Unfortunately, the      *   FILE 666\n//*         COBOL compiler we have available to us lacks those      *   FILE 666\n//*         handy intrinsic functions, including RANDOM.  I         *   FILE 666\n//*         also found that there are not many solutions            *   FILE 666\n//*         available in Assembler or COBOL.  And those few I       *   FILE 666\n//*         found (well, actually only a couple and they were       *   FILE 666\n//*         very old) failed to built very random sets of           *   FILE 666\n//*         numbers.  I came up with a subroutine, written in       *   FILE 666\n//*         Assembler, based on the Linear Congruential method      *   FILE 666\n//*         (described in Knuth, Sedgewick, and in many places      *   FILE 666\n//*         on the 'net).  It isn't cryptographic quality, but      *   FILE 666\n//*         will do for simulation and ad hoc sets of test          *   FILE 666\n//*         numbers.  I also wrote a COBOL program to do some       *   FILE 666\n//*         analysis on the generated number sets.  The             *   FILE 666\n//*         jobstream contained in member RANDOM will run the       *   FILE 666\n//*         analysis program and illustrates how to link the        *   FILE 666\n//*         Assembler routine to your own programs.                 *   FILE 666\n//*                                                                 *   FILE 666\n//*     Comb Sort                                                   *   FILE 666\n//*                                                                 *   FILE 666\n//*         (COBOL)  The comb sort algorithm is an extended         *   FILE 666\n//*         bubble sort that outperforms the basic bubble sort      *   FILE 666\n//*         and is very simple to implement.  This program          *   FILE 666\n//*         reads in 10,000 records from SYSIN, sorts them, and     *   FILE 666\n//*         prints the sort time and sorted records on SYSOUT.      *   FILE 666\n//*         Under Hercules the times I saw were around 5/100ths     *   FILE 666\n//*         of a second to sort the 10,000 randomly generated       *   FILE 666\n//*         test records.  The COBOL source is in member            *   FILE 666\n//*         COMBSORT.  (A slightly cleaner implementation with      *   FILE 666\n//*         inline perform statements is also included as           *   FILE 666\n//*         member COMBSRTC, but of course it will not compile      *   FILE 666\n//*         with the MVT compiler).                                 *   FILE 666\n//*                                                                 *   FILE 666\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMBSORT": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\tS\\x00\\xca\\x00\\xca\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T09:53:00", "lines": 202, "newlines": 202, "modlines": 0, "user": "MOSELEY"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. COMBSORT.\n000300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n000400*  AUTHOR. JAY MOSELEY.                                         *\n000500*  DATE-WRITTEN. FEBRUARY, 2001.                                *\n000600*  FUNCTION. THIS IS AN IMPLEMENTATION OF THE COMB SORT         *\n000700*            ALGORITHM.  THE COMBSORT IS AN EXTENDED BUBBLESORT *\n000800*            WHICH IS VERY FAST, IS EASILY IMPLEMENTED, AND     *\n000900*            INCURS LITTLE MEMORY OVERHEAD.                     *\n001000*                                                               *\n001100*  MODIFIED JANUARY, 2002 TO COMPILE UNDER THE MVT COMPILER.    *\n001200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n001300\n001400 ENVIRONMENT DIVISION.\n001500 INPUT-OUTPUT SECTION.\n001600 FILE-CONTROL.\n001700\n001800     SELECT TEST-DATA\n001900         ASSIGN TO UR-2540R-S-SYSIN.\n002000\n002100 DATA DIVISION.\n002200 FILE SECTION.\n002300\n002400 FD  TEST-DATA\n002500     LABEL RECORDS ARE OMITTED\n002600     DATA RECORD IS TEST-RECORD.\n002700 01  TEST-RECORD.\n002800     02  FILLER                  PIC X(13).\n002900     02  TR-SEQUENCE             PIC 9(05).\n003000     02  FILLER                  PIC X(02).\n003100     02  TR-KEYFIELD             PIC X(10).\n003200     02  FILLER                  PIC X(50).\n003300\n003400 WORKING-STORAGE SECTION.\n003500\n003600 01  END-OF-DATA-INDICATOR       PIC X(01)   VALUE 'N'.\n003700     88  END-OF-DATA                         VALUE 'Y'.\n003800\n003900 01  EDIT-NUMBER                 PIC ZZ,ZZ9.\n004000\n004100 01  EDIT-TIME                   PIC Z9B99B99B99.\n004200 01  FILLER                      REDEFINES EDIT-TIME.\n004300     02  FILLER                  PIC X(2).\n004400     02  ET-COLON1               PIC X(1).\n004500     02  FILLER                  PIC X(2).\n004600     02  ET-COLON2               PIC X(1).\n004700     02  FILLER                  PIC X(2).\n004800     02  ET-PERIOD               PIC X(1).\n004900     02  FILLER                  PIC X(2).\n005000\n005100* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n005200* THE FOLLOWING DATA ITEMS ARE USED DURING THE SORT PROCESS.    *\n005300* SORT-GAP, AS DEFINED, WILL HANDLE A TABLE OF 99,999 ITMES.    *\n005400* SORT-I, SORT-J ARE USED AS SUBSCRIPTS.                        *\n005500* SORT-SIZE IS THE NUMBER OF ELEMENTS TO BE SORTED.             *\n005600* SORT-SWAP IS A HOLDING FIELD FOR EXCHANGING ITEMS AND MUST    *\n005700* BE AS LARGE AS A SINGLE ELEMENT OF THE TABLE BEING SORTED.    *\n005800* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n005900 01  SORT-WORK.\n006000     02  SORT-GAP                PIC 9(5)V99.\n006100     02  FILLER                  REDEFINES SORT-GAP.\n006200         03  SORT-GAP-INTEGER    PIC 9(5).\n006300         03  FILLER              PIC 99.\n006400\n006500     02  SORT-I                  PIC S9(8)   COMP.\n006600     02  SORT-J                  PIC S9(8)   COMP.\n006700     02  SORT-SIZE               PIC S9(8)   COMP.\n006800     02  SORT-SWAP               PIC X(13).\n006900\n007000     02  SORT-CHANGED            PIC X(01).\n007100         88  SORT-CHANGED-ORDER              VALUE 'Y'.\n007200         88  SORT-UNCHANGED-ORDER            VALUE 'N'.\n007300\n007400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n007500* THE FOLLOWING TABLE CONTAINS THE ELEMENTS TO BE SORTED.       *\n007600* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n007700 01  SAMPLE-DATA.\n007800     02  SAMPLE-ELEMENT          OCCURS 10000 TIMES.\n007900         03  SAMPLE-KEY          PIC X(10).\n008000         03  SAMPLE-SEQUENCE     PIC S9(5)   COMP-3.\n008100\n008200 PROCEDURE DIVISION.\n008300\n008400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n008500* THE ELEMENTS TO BE SORTED ARE LOADED FROM A TEXT FILE.        *\n008600* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n008700 0000-LOAD-DATA.\n008800\n008900     OPEN INPUT TEST-DATA.\n009000\n009100     MOVE +0 TO SORT-SIZE.\n009200\n009300     PERFORM 1000-READ-AND-LOAD\n009400         UNTIL END-OF-DATA.\n009500*    END-PERFORM.\n009600\n009700     CLOSE TEST-DATA.\n009800\n009900     MOVE SORT-SIZE TO EDIT-NUMBER.\n010000     DISPLAY 'LOADED '\n010100             EDIT-NUMBER\n010200             ' RECORDS.'\n010300     DISPLAY ' '.\n010400     MOVE TIME-OF-DAY TO EDIT-TIME.\n010500     MOVE ':' TO ET-COLON1, ET-COLON2.\n010600     MOVE '.' TO ET-PERIOD.\n010700     DISPLAY 'SORT BEGINNING AT '\n010800             EDIT-TIME.\n010900\n011000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n011100* THE COMB SORT ALGORITHM.                                      *\n011200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n011300 0000-SORT-DATA.\n011400\n011500     MOVE SORT-SIZE TO SORT-GAP.\n011600\n011700     PERFORM 2000-SORT-TABLE\n011800         UNTIL SORT-UNCHANGED-ORDER\n011900           AND SORT-GAP EQUAL 1.00.\n012000*    END-PERFORM.\n012100\n012200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n012300* DISPLAY SORTED ELEMENTS.                                      *\n012400* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n012500 0000-DISPLAY-DATA.\n012600     MOVE TIME-OF-DAY TO EDIT-TIME.\n012700     MOVE ':' TO ET-COLON1, ET-COLON2.\n012800     MOVE '.' TO ET-PERIOD.\n012900     DISPLAY 'SORT COMPLETED AT '\n013000             EDIT-TIME.\n013100     DISPLAY ' '.\n013200\n013300     PERFORM 3000-DISPLAY-ELEMENT\n013400         VARYING SORT-I\n013500             FROM +1 BY +1\n013600         UNTIL SORT-I GREATER THAN SORT-SIZE.\n013700*    END-PERFORM.\n013800\n013900     STOP RUN.\n014000* - - - - - - - - - - - - - - - - - - - - -> PROGRAM EXIT POINT <\n014100\n014200 1000-READ-AND-LOAD.\n014300\n014400     READ TEST-DATA\n014500         AT END\n014600             MOVE 'Y' TO END-OF-DATA-INDICATOR.\n014700*    END-READ.\n014800\n014900     IF NOT END-OF-DATA\n015000         ADD +1 TO SORT-SIZE\n015100         MOVE TR-KEYFIELD TO SAMPLE-KEY (SORT-SIZE)\n015200         MOVE TR-SEQUENCE TO SAMPLE-SEQUENCE (SORT-SIZE).\n015300*    END-IF.\n015400\n015500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n015600\n015700 2000-SORT-TABLE.\n015800     MOVE 'N' TO SORT-CHANGED.\n015900\n016000     COMPUTE SORT-GAP = SORT-GAP / 1.3.\n016100     IF SORT-GAP-INTEGER EQUAL 0\n016200         MOVE 1.00 TO SORT-GAP\n016300     ELSE\n016400         IF SORT-GAP-INTEGER EQUAL 9 OR 10\n016500             MOVE 11.00 TO SORT-GAP.\n016600*        END-IF\n016700*    END-IF.\n016800\n016900     PERFORM 2100-SORT-ITERATE\n017000         VARYING SORT-I\n017100             FROM +1 BY +1\n017200         UNTIL SORT-I GREATER THAN (SORT-SIZE - SORT-GAP-INTEGER).\n017300*    END-PERFORM.\n017400\n017500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n017600\n017700 2100-SORT-ITERATE.\n017800\n017900     COMPUTE SORT-J = SORT-I + SORT-GAP-INTEGER.\n018000\n018100     IF SAMPLE-KEY (SORT-I) GREATER THAN\n018200        SAMPLE-KEY (SORT-J)\n018300         MOVE SAMPLE-ELEMENT (SORT-J) TO SORT-SWAP\n018400         MOVE SAMPLE-ELEMENT (SORT-I) TO\n018500              SAMPLE-ELEMENT (SORT-J)\n018600         MOVE SORT-SWAP TO SAMPLE-ELEMENT (SORT-I)\n018700         MOVE 'Y' TO SORT-CHANGED.\n018800*    END-IF.\n018900\n019000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n019100\n019200 3000-DISPLAY-ELEMENT.\n019300\n019400     MOVE SAMPLE-SEQUENCE (SORT-I) TO EDIT-NUMBER.\n019500     DISPLAY 'TEST RECORD #'\n019600             EDIT-NUMBER\n019700             '   '\n019800             SAMPLE-KEY (SORT-I).\n019900\n020000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n020100\n020200*END PROGRAM COMBSORT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMBSRTC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\tS\\x00\\xaf\\x00\\xaf\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T09:53:00", "lines": 175, "newlines": 175, "modlines": 0, "user": "MOSELEY"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. COMBSORT.\n000300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n000400*  AUTHOR. JAY MOSELEY.                                         *\n000500*  DATE-WRITTEN. FEBRUARY, 2001.                                *\n000600*  FUNCTION. THIS IS AN IMPLEMENTATION OF THE COMB SORT         *\n000700*            ALGORITHM.  THE COMBSORT IS AN EXTENDED BUBBLESORT *\n000800*            WHICH IS VERY FAST, IS EASILY IMPLEMENTED, AND     *\n000900*            INCURS LITTLE MEMORY OVERHEAD.                     *\n001000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n001100\n001200 ENVIRONMENT DIVISION.\n001300\n001400     SELECT TEST-DATA\n001500         ASSIGN TO \"SORTDATA.TXT\"\n001600         ORGANIZATION IS LINE SEQUENTIAL.\n001700\n001800 DATA DIVISION.\n001900\n002000 FD  TEST-DATA\n002100     DATA RECORD IS TEST-RECORD.\n002200 01  TEST-RECORD.\n002300     02  FILLER                  PIC X(13).\n002400     02  TR-SEQUENCE             PIC 9(04).\n002500     02  FILLER                  PIC X(03).\n002600     02  TR-KEYFIELD             PIC X(10).\n002700\n002800 WORKING-STORAGE SECTION.\n002900\n003000 01  END-OF-DATA-INDICATOR       PIC X(01)   VALUE 'N'.\n003100     88  END-OF-DATA                         VALUE 'Y'.\n003200\n003300 01  CURRENT-DATE-AND-TIME.\n003400     02  FILLER                  PIC X(08).\n003500     02  CURRENT-TIME            PIC 9(06).\n003600     02  FILLER                  PIC X(05).\n003700\n003800 01  EDIT-NUMBER                 PIC Z,ZZ9.\n003900\n004000 01  EDIT-TIME                   PIC Z9/99/99.99.\n004100\n004200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n004300* THE FOLLOWING DATA ITEMS ARE USED DURING THE SORT PROCESS.    *\n004400* SORT-GAP, AS DEFINED, WILL HANDLE A TABLE OF 9,999 ITMES.     *\n004500* SORT-I, SORT-J ARE USED AS SUBSCRIPTS.                        *\n004600* SORT-SIZE IS THE NUMBER OF ELEMENTS TO BE SORTED.             *\n004700* SORT-SWAP IS A HOLDING FIELD FOR EXCHANGING ITEMS AND MUST    *\n004800* BE AS LARGE AS A SINGLE ELEMENT OF THE TABLE BEING SORTED.    *\n004900* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n005000 01  SORT-WORK.\n005100     02  SORT-GAP                PIC 9(4)V99.\n005200     02  FILLER                  REDEFINES SORT-GAP.\n005300         03  SORT-GAP-INTEGER    PIC 9(4).\n005400         03  FILLER              PIC 99.\n005500\n005600     02  SORT-I                  PIC S9(4)   BINARY.\n005700     02  SORT-J                  PIC S9(4)   BINARY.\n005800     02  SORT-SIZE               PIC S9(4)   BINARY.\n005900     02  SORT-SWAP               PIC X(14).\n006000\n006100     02  SORT-CHANGED            PIC X(01).\n006200         88  SORT-CHANGED-ORDER              VALUE 'Y'.\n006300         88  SORT-UNCHANGED-ORDER            VALUE 'N'.\n006400\n006500* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n006600* THE FOLLOWING TABLE CONTAINS THE ELEMENTS TO BE SORTED.       *\n006700* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n006800 01  SAMPLE-DATA.\n006900     02  SAMPLE-ELEMENT          OCCURS 1500 TIMES.\n007000         03  SAMPLE-KEY          PIC X(10).\n007100         03  SAMPLE-SEQUENCE     PIC 9(04).\n007200\n007300 PROCEDURE DIVISION.\n007400\n007500* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n007600* THE ELEMENTS TO BE SORTED ARE LOADED FROM A TEXT FILE.        *\n007700* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n007800 0000-LOAD-DATA.\n007900\n008000     OPEN INPUT TEST-DATA.\n008100\n008200     MOVE +0 TO SORT-SIZE.\n008300\n008400     PERFORM UNTIL END-OF-DATA\n008500\n008600         READ TEST-DATA\n008700             AT END\n008800                 SET END-OF-DATA TO TRUE\n008900             NOT AT END\n009000                 ADD +1 TO SORT-SIZE\n009100                 MOVE TR-KEYFIELD TO SAMPLE-KEY (SORT-SIZE)\n009200                 MOVE TR-SEQUENCE TO SAMPLE-SEQUENCE (SORT-SIZE)\n009300         END-READ\n009400\n009500     END-PERFORM.\n009600\n009700     CLOSE TEST-DATA.\n009800\n009900     MOVE SORT-SIZE TO EDIT-NUMBER.\n010000     DISPLAY 'LOADED '\n010100             EDIT-NUMBER\n010200             ' RECORDS.'\n010300     DISPLAY ' '.\n010400     MOVE FUNCTION CURRENT-DATE TO CURRENT-DATE-AND-TIME.\n010500     MOVE CURRENT-TIME TO EDIT-TIME.\n010600     INSPECT EDIT-TIME CONVERTING '/' TO ':'.\n010700     DISPLAY 'SORT BEGINNING AT '\n010800             EDIT-TIME.\n010900\n011000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n011100* THE COMB SORT ALGORITHM.                                      *\n011200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n011300 0000-SORT-DATA.\n011400\n011500     MOVE SORT-SIZE TO SORT-GAP.\n011600\n011700     PERFORM UNTIL SORT-UNCHANGED-ORDER AND SORT-GAP EQUAL 1.00\n011800\n011900         SET SORT-UNCHANGED-ORDER TO TRUE\n012000\n012100         COMPUTE SORT-GAP = SORT-GAP / 1.3\n012200         EVALUATE SORT-GAP-INTEGER\n012300             WHEN 0\n012400                 MOVE 1.00 TO SORT-GAP\n012500             WHEN 9\n012600             WHEN 10\n012700                 MOVE 11.00 TO SORT-GAP\n012800         END-EVALUATE\n012900\n013000         PERFORM VARYING SORT-I\n013100                 FROM +1 BY +1\n013200                 UNTIL SORT-I GREATER THAN\n013300                       (SORT-SIZE - SORT-GAP-INTEGER)\n013400\n013500             COMPUTE SORT-J = SORT-I + SORT-GAP-INTEGER\n013600\n013700             IF SAMPLE-KEY (SORT-I) GREATER THAN\n013800                SAMPLE-KEY (SORT-J)\n013900                 MOVE SAMPLE-ELEMENT (SORT-J) TO SORT-SWAP\n014000                 MOVE SAMPLE-ELEMENT (SORT-I) TO\n014100                      SAMPLE-ELEMENT (SORT-J)\n014200                 MOVE SORT-SWAP TO SAMPLE-ELEMENT (SORT-I)\n014300                 SET SORT-CHANGED-ORDER TO TRUE\n014400             END-IF\n014500\n014600         END-PERFORM\n014700\n014800     END-PERFORM.\n014900\n015000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n015100* DISPLAY SORTED ELEMENTS.                                      *\n015200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n015300 0000-DISPLAY-DATA.\n015400     MOVE FUNCTION CURRENT-DATE TO CURRENT-DATE-AND-TIME.\n015500     MOVE CURRENT-TIME TO EDIT-TIME.\n015600     INSPECT EDIT-TIME CONVERTING '/' TO ':'.\n015700     DISPLAY 'SORT COMPLETED AT '\n015800             EDIT-TIME.\n015900     DISPLAY ' '.\n016000\n016100     PERFORM VARYING SORT-I\n016200             FROM +1 BY +1\n016300             UNTIL SORT-I GREATER THAN SORT-SIZE\n016400\n016500         DISPLAY 'Test Record #'\n016600                 SAMPLE-SEQUENCE (SORT-I)\n016700                 '   '\n016800                 SAMPLE-KEY (SORT-I)\n016900\n017000     END-PERFORM.\n017100\n017200     STOP RUN.\n017300* - - - - - - - - - - - - - - - - - - - - -> PROGRAM EXIT POINT <\n017400\n017500 END PROGRAM COMBSORT.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RANDOM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x8f\\x01\\x04\\x04\\x8f\\tS\\x01w\\x01w\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-17T00:00:00", "modifydate": "2004-02-17T09:53:00", "lines": 375, "newlines": 375, "modlines": 0, "user": "MOSELEY"}, "text": "//RANDOMF  JOB 'ANALYZE RANDOMF',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)\n//ASM     EXEC ASMFCL,PARM.ASM='LIST,LOAD,NODECK'\n//ASM.SYSIN DD *\n         PRINT ON,GEN,DATA\n         TITLE 'RANDOMF: PSEUDO-RANDOM NUMBER GENERATOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n* GENERATES A PSEUDO-RANDOM NUMBER FOR RETURN TO A COBOL CALLING      *\n* PROGRAM IN A COMPUTATIONAL-1 (FLOATING POINT) VARIABLE.             *\n*                                                                     *\n* THE \"SEED\" VALUE IS STORED IN A LOCAL VARIABLE BETWEEN CALLS, SO    *\n* THIS IS NOT RE-ENTRANT CODE. IF RE-ENTRANT CODE IS REQUIRED, IT     *\n* WOULD BE A TRIVIAL MODIFICATION TO MOVE THE SEED INTO THE CALLER'S  *\n* STORAGE.                                                            *\n*                                                                     *\n* THE NUMBERS GENERATED ARE SUFFICIENTLY RANDOM FOR SIMULATION AND    *\n* TESTING.                                                            *\n*                                                                     *\n* THIS CODE IS PLACED IN THE PUBLIC DOMAIN AND MAY BE FREELY USED     *\n* AND INCORPORATED INTO DERIVED WORKS SO LONG AS ATTRIBUTION TO THE   *\n* ORIGINAL AUTHORSHIP REMAINS IN ANY DISTRIBUTED COPIES OF THE ALC    *\n* SOURCE.                                                             *\n*                                                                     *\n* WRITTEN JANUARY, 2002 BY JAY MOSELEY, CCP                           *\n* HTTP://WWW.JAYMOSELEY.COM/HERCULES/                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         LCLC  &SYSECT\n&SYSECT  SETC  'RANDOMF'\n*\n&SYSECT  CSECT\n*\n@IDENT01 B     @IDENT04(R15)       BRANCH AROUND IDENT CONSTANTS\n         DC    AL1(@IDENT03-@IDENT02)\n@IDENT02 DC    C'&SYSECT '\n         DC    C'&SYSDATE &SYSTIME - '\n         DC    C'PSEUDO-RANDOM NUMBER GENERATOR'\n@IDENT03 DS    0H\n@IDENT04 EQU   *-@IDENT01\n*\n         SAVE  (14,12)             SAVE CALLER'S REGISTERS\n*\n         BALR  R12,0               ESTABLISH MY BASE\n         USING *,R12\n*\n*---------------------------------------------------------------------*\n* I DO NOT ESTABLISH A LOCAL REGISTER SAVE AREA SINCE I CALL NO       *\n* SUBORDINATE PROGRAMS!                                               *\n*---------------------------------------------------------------------*\n*\n         L     R11,0(,R1)          ADDRESS PARAMETER\n         USING $PARMS,R11\n*\n*---------------------------------------------------------------------*\n* THE SEED VALUE IS STORED IN LOCAL STORAGE. ON THE INITAL CALL, IT   *\n* HAS THE ASSEMBLER ASSIGNED VALUE OF ZERO, SO ON THE INITIAL CALL    *\n* THE SEED VALUE IS ESTABLISHED USING THE SYSTEM TIMER.               *\n*---------------------------------------------------------------------*\n         L     R5,SEED             LOAD SEED VALUE\n         LTR   R5,R5               TEST FOR FIRST TIME\n         BNZ   NEXTPICK            CONTINUE IF SEED ESTABLISHED\n*\n*---------------------------------------------------------------------*\n* ONLY THE HUNDREDTHS PORTION OF THE TIMER IS CONSIDERED. IN THE      *\n* EVENT THAT THE VALUE IS EXACTLY ZERO, THE SEED IS SET TO THE PRIME  *\n* NUMBER 34513. OTHERWISE, THE SEED VALUE IS COMPUTED BY MULTIPLYING  *\n* THE TIMER VALUE BY THE PRIME NUMBER 13831.                          *\n*---------------------------------------------------------------------*\n         TIME  DEC                 RETRIEVE SYSTEM TIME\n         LR    R5,R0               MOVE TIME PORTION TO R5\n         N     R5,=F'255'          CLEAR ALL BUT HUNDREDTHS/SECOND\n         LTR   R5,R5               IS IT ZERO?\n         BNZ   SEEDM                 NO, FACTOR\n         LA    R5,=F'34513'        DEFAULT PRIME SEED\n         B     NEXTPICK\n*\nSEEDM    M     R4,=F'13831'        PRIME FACTOR\n*\nNEXTPICK DS    0H\n*---------------------------------------------------------------------*\n* COMPUTE NEXT RANDOM NUMBER BASED ON SEED VALUE.                     *\n*---------------------------------------------------------------------*\n*\n         M     R4,A                MULTIPLY SEED BY CONSTANT\n         D     R4,M                DIVIDE BY MODULUS\n         ST    R4,SEED             STORE SEED FOR NEXT ITERATION\n*\n         SRL   R4,7                ADJUST FOR REAL RESULT\n         A     R4,C                ADD CONSTANT\n         ST    4,$NUMBER           STORE IN CALLER'S VARIABLE\n*\nGOBACK   DS    0H\n         RETURN (14,12),RC=0\n*\nSEED     DC    F'0'                SEED VALUE, 0 CAUSES INITIALIZATION\nA        DC    F'16807'            MULTIPLIER\nM        DC    F'2147483647'       MODULUS\nC        DC    F'1073741824'       INCREMENT\n*\n$PARMS   DSECT\n*---------------------------------------------------------------------*\n* THIS DSECT DEFINES THE VARIABLE TO RECEIVE THE RETURNED VALUE.      *\n*---------------------------------------------------------------------*\n$NUMBER  DS    E                   COMPUTATIONAL-1 VARIABLE\n*\n         YREGS\n*\n         END\n/*\n//LKED.SYSLMOD DD DSN=&RANDOM\n//LKED.SYSIN DD *\n  NAME RANDOMF\n/*\n//COB     EXEC COBUCLG,PARM.COB='LIST,OBJECT,NODECK,DMAP,PMAP'\n//COB.SYSIN DD *\n000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. ANALYZE.\n000300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n000400*  AUTHOR. JAY MOSELEY.                                         *\n000500*  DATE-WRITTEN. JANUARY, 2002.                                 *\n000600*  FUNCTION. TEST THE DISTRIBUTION OF THE OUTPUT OF THE         *\n000700*            PSEUDO-RANDOM NUMBER GENERATOR:  RANDOMF.          *\n000800* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n000900\n001000 ENVIRONMENT DIVISION.\n001100 INPUT-OUTPUT SECTION.\n001200 FILE-CONTROL.\n001300\n001400     SELECT REPORT-FILE\n001500         ASSIGN TO UR-1403-S-REPORT.\n001600\n001700 DATA DIVISION.\n001800 FILE SECTION.\n001900\n002000 FD  REPORT-FILE\n002100     LABEL RECORDS ARE OMITTED\n002200     REPORT IS ANALYSIS.\n002300\n002400 WORKING-STORAGE SECTION.\n002500\n002600 01  WORK-VARIABLES.\n002700     02  WV-ITERATION            PIC S9(3)   COMP-3.\n002800\n002900     02  WV-RANDOM                           COMP-1.\n003000\n003100     02  WV-SAMPLE               PIC S9(3)V9(4).\n003200     02  FILLER                  REDEFINES WV-SAMPLE.\n003300         03  WV-SAMPLE-INT       PIC S9(3).\n003400         03  FILLER              PIC S9(4).\n003500\n003600     02  WV-MIN                  PIC S9(3)   COMP-3.\n003700     02  WV-MAX                  PIC S9(3)   COMP-3.\n003800     02  WV-MEAN                             COMP-1.\n003900     02  WV-R-SQ                             COMP-1.\n004000     02  WV-VARIANCE                         COMP-1.\n004100     02  WV-STDDEV                           COMP-1.\n004200     02  WV-CHISQR                           COMP-1.\n004300     02  WV-ALERT                PIC X(5).\n004400\n004500     02  SAMPLE-R                OCCURS 100 TIMES\n004600                                 INDEXED BY SAMPLE-IX\n004700                                 PIC S9(3)   COMP-3.\n004800\n004900\n005000 REPORT SECTION.\n005100 RD  ANALYSIS\n005200     PAGE LIMIT IS 60 LINES\n005300     FIRST DETAIL 3\n005400     LAST DETAIL 55.\n005500\n005600 01  REPORT-HEADING              TYPE IS REPORT HEADING.\n005700     02  LINE 1.\n005800         03  COLUMN 01           PIC X(48)   VALUE\n005900         'TESTING PSEUDO-RANDOM NUMBER GENERATOR:  RANDOMF'.\n006000\n006100     02  LINE PLUS 2.\n006200         03  COLUMN 01           PIC X(51)   VALUE\n006300         'THE FOLLOWING SEQUENCE WILL BE PERFORMED 100 TIMES:'.\n006400\n006500     02  LINE PLUS 1.\n006600         03  COLUMN 06           PIC X(44)   VALUE\n006700         'FOR A SAMPLE SET OF 1,100 GENERATED NUMBERS '.\n006800         03  COLUMN 50           PIC X(15)   VALUE\n006900         'IN THE RANGE OF'.\n007000\n007100     02  LINE PLUS 1.\n007200         03  COLUMN 06           PIC X(44)   VALUE\n007300         '001 THROUGH 100, THE ARITHMETIC MEAN, THE ST'.\n007400         03  COLUMN 50           PIC X(17)   VALUE\n007500         'ANDARD DEVIATION,'.\n007600\n007700     02  LINE PLUS 1.\n007800         03  COLUMN 06           PIC X(44)   VALUE\n007900         'AND CHI-SQUARE WILL BE COMPUTED FOR THE SET.'.\n008000\n008100     02  LINE PLUS 2.\n008200         03  COLUMN 01           PIC X(44)   VALUE\n008300         'IF THE CHI-SQUARE STATISTIC IS CLOSE TO THE '.\n008400         03  COLUMN 45           PIC X(44)   VALUE\n008500         'MAXIMUM VALUE OF A SAMPLE (100), THEN THE   '.\n008600\n008700     02  LINE PLUS 1.\n008800         03  COLUMN 01           PIC X(44)   VALUE\n008900         'NUMBERS ARE RANDOM; IF IT IS TOO FAR AWAY, T'.\n009000         03  COLUMN 45           PIC X(44)   VALUE\n009100         'HEN THEY ARE NOT.  FOR A SIMPLE TEST, THE   '.\n009200\n009300     02  LINE PLUS 1.\n009400         03  COLUMN 01           PIC X(44)   VALUE\n009500         'STATISTIC SHOULD BE 2 * SQUARE ROOT(100) OF '.\n009600         03  COLUMN 45           PIC X(44)   VALUE\n009700         '100, (IN THE RANGE 80 THROUGH 120).         '.\n009800\n009900 01  PAGE-HEADING                TYPE IS PAGE HEADING.\n010000     02  LINE 1.\n010100         03  COLUMN 55           PIC X(08)   VALUE\n010200             'STANDARD'.\n010300\n010400     02  LINE 2.\n010500         03  COLUMN 01           PIC X(09)   VALUE\n010600             'ITERATION'.\n010700         03  COLUMN 12           PIC X(07)   VALUE\n010800             'MINIMUM'.\n010900         03  COLUMN 21           PIC X(07)   VALUE\n011000             'MAXIMUM'.\n011100         03  COLUMN 35           PIC X(04)   VALUE\n011200             'MEAN'.\n011300         03  COLUMN 43           PIC X(08)   VALUE\n011400             'VARIANCE'.\n011500         03  COLUMN 54           PIC X(09)   VALUE\n011600             'DEVIATION'.\n011700         03  COLUMN 65           PIC X(10)   VALUE\n011800             'CHI-SQUARE'.\n011900\n012000 01  SET-DETAILS                 TYPE IS DETAIL.\n012100     02  LINE PLUS 1.\n012200         03  COLUMN 7            PIC ZZ9     SOURCE\n012300             WV-ITERATION.\n012400         03  COLUMN 16           PIC ZZ9     SOURCE WV-MIN.\n012500         03  COLUMN 25           PIC ZZ9     SOURCE WV-MAX.\n012600         03  COLUMN 34           PIC ZZ9.9   SOURCE WV-MEAN.\n012700         03  COLUMN 45           PIC ZZ9.99  SOURCE WV-VARIANCE.\n012800         03  COLUMN 57           PIC ZZ9.99  SOURCE WV-STDDEV.\n012900         03  COLUMN 69           PIC ZZ9.99  SOURCE WV-CHISQR.\n013000         03  COLUMN 76           PIC X(5)    SOURCE WV-ALERT.\n013100\n013200 PROCEDURE DIVISION.\n013300\n013400 0000-CONTROL.\n013500\n013600     OPEN OUTPUT REPORT-FILE.\n013700     INITIATE ANALYSIS.\n013800\n013900     PERFORM 1000-TEST-SET\n014000         VARYING WV-ITERATION\n014100             FROM +1 BY +1\n014200         UNTIL WV-ITERATION GREATER THAN +100.\n014300*    END-PERFORM.\n014400\n014500     TERMINATE ANALYSIS.\n014600     CLOSE REPORT-FILE.\n014700\n014800     STOP RUN.\n014900* - - - - - - - - - - - - - - - - - - - - -> PROGRAM EXIT POINT <\n015000\n015100 1000-TEST-SET.\n015200\n015300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n015400* CLEAR ARRAY TO SUM FREQUENCY.                                 *\n015500* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n015600     PERFORM 1100-CLEAR-SET\n015700         VARYING SAMPLE-IX\n015800             FROM +1 BY +1\n015900         UNTIL SAMPLE-IX GREATER THAN +100.\n016000*    END-PERFORM.\n016100\n016200     MOVE +101 TO WV-MIN.\n016300     MOVE +0 TO WV-MAX.\n016400     MOVE +0 TO WV-MEAN.\n016500     MOVE +0 TO WV-R-SQ.\n016600     MOVE +0 TO WV-CHISQR.\n016700\n016800* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n016900* POPULATE SAMPLE SET.                                          *\n017000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n017100     PERFORM 1200-FILL-SET\n017200         1100 TIMES.\n017300*    END-PERFORM.\n017400\n017500* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n017600* COMPLETE MEAN COMPUTATION.                                    *\n017700* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n017800     COMPUTE WV-MEAN = WV-MEAN / 1100.\n017900\n018000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n018100* COMPLETE VARIANCE COMPUTATION.                                *\n018200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n018300     COMPUTE WV-VARIANCE = (WV-R-SQ / 1100) - (WV-MEAN ** 2).\n018400\n018500* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n018600* COMPUTE STANDARD DEVIATION.                                   *\n018700* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n018800     COMPUTE WV-STDDEV = WV-VARIANCE ** .5.\n018900\n019000* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n019100* COMPUTE SUM OF SQUARES OF FREQENCY OF OBSERVATIONS.           *\n019200* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n019300     PERFORM 1300-COMPUTE-SQUARES\n019400         VARYING SAMPLE-IX\n019500             FROM +1 BY +1\n019600         UNTIL SAMPLE-IX GREATER THAN +100.\n019700*    END-PERFORM.\n019800\n019900* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n020000* COMPLETE CHI-SQUARE COMPUTATION.                              *\n020100* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n020200     COMPUTE WV-CHISQR = (100 * (WV-CHISQR / 1100)) - 1100.\n020300\n020400     IF WV-CHISQR LESS THAN 80.0\n020500     OR WV-CHISQR GREATER THAN 120.0\n020600         MOVE '<****' TO WV-ALERT\n020700     ELSE\n020800         MOVE SPACES TO WV-ALERT.\n020900*    END-IF.\n021000\n021100* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n021200* PRINT REPORT LINE.                                            *\n021300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n021400     GENERATE SET-DETAILS.\n021500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n021600\n021700 1100-CLEAR-SET.\n021800\n021900     MOVE +0 TO SAMPLE-R (SAMPLE-IX).\n022000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n022100\n022200 1200-FILL-SET.\n022300\n022400     CALL 'RANDOMF' USING WV-RANDOM.\n022500\n022600* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n022700* CONFORM RETURN VALUE INTO INTEGER 1:100.                      *\n022800* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n022900     COMPUTE WV-SAMPLE = (100 * WV-RANDOM) + 1.\n023000\n023100     SET SAMPLE-IX TO WV-SAMPLE-INT.\n023200     ADD +1 TO SAMPLE-R (SAMPLE-IX).\n023300\n023400     ADD WV-SAMPLE-INT TO WV-MEAN.\n023500\n023600     IF WV-SAMPLE-INT LESS THAN WV-MIN\n023700         MOVE WV-SAMPLE-INT TO WV-MIN.\n023800*    END-IF.\n023900\n024000     IF WV-SAMPLE-INT GREATER THAN WV-MAX\n024100         MOVE WV-SAMPLE-INT TO WV-MAX.\n024200*    END-IF.\n024300\n024400     COMPUTE WV-R-SQ = WV-R-SQ + (WV-SAMPLE-INT ** 2).\n024500* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n024600\n024700 1300-COMPUTE-SQUARES.\n024800\n024900     COMPUTE WV-CHISQR = WV-CHISQR + (SAMPLE-R (SAMPLE-IX) ** 2).\n025000* - - - - - - - - - - - - - - - - - - - - -> PERFORM EXIT POINT <\n025100\n025200*END PROGRAM ANALYZE.\n/*\n//LKED.SYSLIB DD\n//         DD DSN=&RANDOM,DISP=(OLD,DELETE)\n//GO.SYSOUT DD SYSOUT=*\n//GO.SYSUDUMP DD SYSOUT=*\n//GO.REPORT DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT666/FILE666.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT666", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}