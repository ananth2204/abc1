{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011503000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE201.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE201.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x02'", "DS1TRBAL": "b'\\xd1\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x8a\\x00\\x03\\x01\\x8a\\x00\\n\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$COVER": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x932/\\x00\\x932?\\x08\\x15\\x00:\\x005\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-19T08:15:00", "lines": 58, "newlines": 53, "modlines": 0, "user": "SYS001"}, "text": "        This package adds CLIST variables that contain system\n        information.  Once these variables have been added to\n        your system, you can inquire on them with CLISTS and\n        utilize or display the system information.\n\n        CBT Submission\n\n        From:  Bruce Hull    M/S CV-34\n               Boeing Computer Services\n               7990 Boeing Ct.\n               Vienna, VA 22182-3999\n               (703) 847-1187\n               NaSPA: HullBruR\n\n        Submission:  MVS TSO/E module IKJCT44B - TSO/E Installation-Written\n                     Built-In Function\n\n        File IKJCT44B.ULD is a downloaded copy of an IEBCOPY unload of the\n        complete source PDS.  The rest of the files on the floppy are each\n        of the individual members of the same PDS.  I'm not sure what format\n        is needed for inclusion on the CBT tape, so I'm sending it both ways.\n\n        The attached floppy disk contains the source and object modules for\n        IKJCT44B.  The functions performed by this module are described below\n        and in $DOC.TXT.\n\n        Module IKJCT44B provides the following CLIST variables:\n\n         &SYSXACCT        Contains the account number used to LOGON to\n                          TSO.\n         &SYSXCPUH        Contains the number of CPU seconds used during\n                          session in form secondshh.\n         &SYSXCPUTYPE     Contains the machine type of the CPU this TSO\n                          session is executing on.\n         &SYSXDFP         Contains the level of the DFP product installed\n                          on the system in form vrrm.\n         &SYSXIPLAT       Contains the date and time of the last IPL of\n                          the operating system.\n         &SYSXLU          Contains the LU name (terminal ID) of the\n                          terminal being used or null.\n         &SYSXMVS         Contains the name and SMP function ID of the\n                          the MVS operating system being used.\n         &SYSXRES         Contains the volume serial number of the\n                          system residence volume (SYSRES).\n         &SYSXSERIAL      Contains the machine serial number of the CPU\n                          this TSO session is executing on.\n         &SYSXSMFID       Contains the SMF ID of the MVS operating system\n                          this TSO session executing on.\n\n        Members of the PDS:\n\n          ASM        JCL used to assemble the Object deck OBJCT44B\n          IKJCT44B   Asm deck of IKJCT44B.\n          OBJCT44B   Object deck of IKJCT44B.\n          SESSION    A CLIST used to demonstrate use of the new variables.\n          SYSTEM     A CLIST used to demonstrate use of the new variables.\n          TS40084    A SMP/E USERMOD used to apply MOD IKJCT44B.\n          VARIABLE   A short description of all CLIST variables.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x932/\\x00\\x932/\\x17F\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-18T17:46:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYS001"}, "text": "Module IKJCT44B - TSO/E Installation-Written Built-In Function\n\nProvides the following CLIST variables:\n\n &SYSXACCT        Contains the account number used to LOGON to\n                  TSO.\n &SYSXCPUH        Contains the number of CPU seconds used during\n                  session in form secondshh.\n &SYSXCPUTYPE     Contains the machine type of the CPU this TSO\n                  session is executing on.\n &SYSXDFP         Contains the level of the DFP product installed\n                  on the system in form vrrm.\n &SYSXIPLAT       Contains the date and time of the last IPL of\n                  the operating system.\n &SYSXLU          Contains the LU name (terminal ID) of the\n                  terminal being used or null.\n &SYSXMVS         Contains the name and SMP function ID of the\n                  the MVS operating system being used.\n &SYSXRES         Contains the volume serial number of the\n                  system residence volume (SYSRES).\n &SYSXSERIAL      Contains the machine serial number of the CPU\n                  this TSO session is executing on.\n &SYSXSMFID       Contains the SMF ID of the MVS operating system\n                  this TSO session executing on.\n\nMembers:\n\n  ASM        JCL used to assemble the Object deck OBJCT44B\n  IKJCT44B   Asm deck of IKJCT44B.\n  OBJCT44B   Object deck of IKJCT44B.\n  SESSION    A CLIST used to demonstrate use of the new variables.\n  SYSTEM     A CLIST used to demonstrate use of the new variables.\n  TS40084    A USERMOD used to apply MOD IKJCT44B.\n  VARIABLE   A short description of all CLIST variables.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMJCL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x932/\\x00\\x932/\\x17F\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-18T17:46:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "SYS001"}, "text": "//SYS001   JOB (ACCOUNT),'HULL CV-34',MSGCLASS=D\n//A OUTPUT JESDS=ALL,DEFAULT=YES,CHARS=GT20,PAGEDEF=M132C1,FORMS=42\n//SEP    EXEC  PGM=SEPARATE,PARM='IKJCT44B,ASMGCL,,TS40084,4'\n//SYSPRINT DD  SYSOUT=(A)\n//IKJCT44B EXEC PGM=IEV90,REGION=200K,PARM=('TERM,SYSPARM(TS40084)',\n//             'RENT,XREF(SHORT),ESD,NORLD,OBJECT')\n//SYSLIB   DD  DSN=SYS001.CBT.ASM,DISP=SHR,\n//             DCB=(LRECL=80,BLKSIZE=19040,RECFM=FB)\n//*        DD  DSN=SMPE.IPL1AA.SMPMTS,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DSN=SYS001.CBT.ASM(IKJCT44B),DISP=SHR\n//SYSLIN   DD  DSN=SYS001.CBT.ASM(OBJCT44B),DISP=SHR\n//SYSPRINT DD  SYSOUT=(A)\n//SYSPUNCH DD  DUMMY\n//SYSTERM  DD  SYSOUT=(D)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJCT44B": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x932/\\x00\\x932?\\x07T\\x04\\xb0\\x04\\xb0\\x00\\x11\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-19T07:54:00", "lines": 1200, "newlines": 1200, "modlines": 17, "user": "SYS001"}, "text": "IKJCT44B TITLE 'TSO/E INSTALLATION-WRITTEN BUILT-IN FUNCTION EXIT'\nIKJCT44B CSECT ,\nIKJCT44B AMODE 31                    EXIT'S ADDRESSING MODE\nIKJCT44B RMODE ANY                   EXIT'S RESIDENCY  MODE\n         TITLE 'TSO/E PROLOGUE'\n***********************************************************************\n*                                                                     *\n* MODULE NAME - IKJCT44B                                              *\n*                                                                     *\n* CSECT  NAME - IKJCT44B                                              *\n*                                                                     *\n* DESCRIPTIVE NAME - TSO/E INSTALLATION-WRITTEN BUILT-IN FUNCTION     *\n*                                                                     *\n* FUNCTION -                                                          *\n*                                                                     *\n*  THE PARTICULAR FUNCTION OF THIS ROUTINE IS TO EVALUATE THE PASSED  *\n*  STANDARD PARAMETER LIST TO SEE IF THIS REQUEST IS FOR A VALID      *\n*  BCS-WRITTEN BUILT-IN FUNCTION.  IF SO, RETURN THE REQUESTED        *\n*  INFORMATION WITH A RETURN CODE OF 0.  OTHERWISE RETURN WITH A      *\n*  RETURN CODE OF 8.                                                  *\n*                                                                     *\n*  *******************                                                *\n*  ***             ***                                                *\n*  ***    NOTE     ***                                                *\n*  ***             ***                                                *\n*  *******************                                                *\n*                                                                     *\n*      FOR A DESCRIPTION OF THE:                                      *\n*                                                                     *\n*      PARAMETER ENTRY                                                *\n*      PARAMKEY                                                       *\n*      PARAMLEN                                                       *\n*      PARAMDAT                                                       *\n*                                                                     *\n*      PLEASE REFER TO INPUT SECTION OF THIS PROLOGUE.                *\n*                                                                     *\n*  *******************                                                *\n*  ***             ***                                                *\n*  *** END OF NOTE ***                                                *\n*  ***             ***                                                *\n*  *******************                                                *\n*                                                                     *\n* OPERATION - IKJCT44B PERFORMS THE FOLLOWING FUNCTION:               *\n*                                                                     *\n*    1 - ESTABLISHES SAVE AREA TO CALLING PROGRAM                     *\n*    2 - SAVES PARAMETER POINTER (R1)                                 *\n*    3 - DOES A GETMAIN FOR PROGRAM'S SAVE AREA                       *\n*    4 - CHAINS THE CALLER'S SAVE AREA AND THIS SAVE AREA             *\n*    5 - DOES A GETMAIN FOR PROGRAM'S WORK AREA                       *\n*    6 - IDENTIFIES THE FUNCTION NAME POINTED TO BY ENTRY 10          *\n*    7 - IF THE NAME IS IDENTIFIED, PLACES REQUESTED INFO IN          *\n*        DATA AREA OF ENTRY 12                                        *\n*    8 - DOES A FREEMAIN OF DYNAMIC STORAGE                           *\n*    9 - DOES A FREEMAIN OF DYNAMIC SAVE AREA                         *\n*   10 - LOADS REGISTER 14 WITH RETURN ADDRESS                        *\n*   11 - SETS THE RETURN CODE IN REGISTER 15                          *\n*   12 - LOADS REGISTERS R0 - R12 WITH CALLER'S ENTRY CONTENTS        *\n*   13 - RETURNS TO CALLER                                            *\n*                                                                     *\n         EJECT\n*                                                                     *\n* RECOVERY OPERATION -                                                *\n*                                                                     *\n*          MUST BE ESTABLISHED BY INVOKER OF IKJCT44B                 *\n*                                                                     *\n* NOTES                                                               *\n*                                                                     *\n*                                                                     *\n* DEPENDENCIES - MAY ONLY BE ASSEMBLED WITH ASSEMBLER H               *\n*                                                                     *\n* RESTRICTIONS - THIS TSO/E INSTALLATION EXIT IS VALID FOR THE TSO/E  *\n*                RELEASE 4 AND ABOVE PRODUCTS.                        *\n*                                                                     *\n*                PLEASE REFER TO THE TSO/E CUSTOMIZATION MANUAL       *\n*                FOR INFORMATION REGARDING THESE TSO/E INSTALLATION   *\n*                EXITS.                                               *\n*                                                                     *\n* ERROR MESSAGES - NONE                                               *\n*                                                                     *\n* ABEND CODES - NONE                                                  *\n*                                                                     *\n* ERROR CONDITIONS - NONE                                             *\n*                                                                     *\n* LINKAGES: BRANCHED TO VIA BALR OR LINKED TO                         *\n*                                                                     *\n* MODULE(S) CALLED: NONE                                              *\n*                                                                     *\n* ENTRY POINT - IKJCT44B                                              *\n*                                                                     *\n* EXIT CONDITIONS                                                     *\n*                                                                     *\n*        EXIT IS ACCOMPLISHED VIA BSM                                 *\n*                                                                     *\n* REFERENCES                                                          *\n*                                                                     *\n*        ROUTINES   - NONE                                            *\n*                                                                     *\n*        DATA AREAS - NONE                                            *\n*                                                                     *\n*    CONTROL BLOCKS - NONE                                            *\n*                                                                     *\n*        TABLES     - NONE                                            *\n*                                                                     *\n* GLOBALS:                                                            *\n*                                                                     *\n*       NONE                                                          *\n*                                                                     *\n* MACRO USAGE: SAVE,                                                  *\n*              GETMAIN,                                               *\n*              FREEMAIN                                               *\n*                                                                     *\n         EJECT\n*                                                                     *\n* MODULE ATTRIBUTES - REENTRANT,                                      *\n*                     REFRESHABLE,                                    *\n*                     REUSEABLE,                                      *\n*                     AMODE(ANY),                                     *\n*                     RMODE(31),                                      *\n*                     MAY BE LINKED AC=1                              *\n*                                                                     *\n* INPUT - ON ENTRY TO IKJCT44B R1 MUST POINT TO A VARIABLE LENGTH     *\n*         PARAMETER LIST THAT DESCRIBES A PARAMETER ENTRY LIST.       *\n*                                                                     *\n*         THE HIGH ORDER BIT IN THE LAST PARAMETER                    *\n*         OF THE PARAMETER LIST MUST BE ON                            *\n*         X'80000000' TO INDICATE THE END OF THE LIST.                *\n*                                                                     *\n         EJECT\n*                                                                     *\n*             PARAMETER ENTRY                                         *\n*                                                                     *\n*             FIELD  FIELD   FIELD                                    *\n*                                                                     *\n*     P       P      P       P                                        *\n*     A       A      A       A                                        *\n*     R       R E    R E L   R E                                      *\n*     A       A N K  A N E   A N D                                    *\n*     M       M T E  M T N   M T A                                    *\n*     E L     E R Y  E R G   E R T                                    *\n*     T I     T Y    T Y T   T Y A                                    *\n*     E S     E      E   H   E                                        *\n*  R1 R T     R      R       R                                        *\n*   |                                                                 *\n*   V         +0    +4       +8                                       *\n* +--------+  +-----+--------+----------+                             *\n* | PARM1  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+                             *\n* | PARM2  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM3  |->| 002 | UPTLEN | UPT PTR  |->| UPT                    | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM4  |->| 002 | ECTLEN | ECT PTR  |->| ECT                    | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM5  |->| 002 | PSCBLEN| PSCB PTR |->| PSCB                   | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM6  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+                             *\n* | PARM7  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+                             *\n* | PARM8  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+                             *\n* | PARM9  |->| 000 | 000004 | 00000000 |                             *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM10 |->| 002 | NAMELNG| NAME PTR |->| FUNCTION NAME          | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM11 |->| 002 | ARGLEN | ARG PTR  |->| ARGUMENT               | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* | PARM12 |->| 002 | 000100 | RSLT PTR |->|                        | *\n* +--------+  +-----+--------+----------+  +------------------------+ *\n* |8PARM13 |->| 000 | 000004 | 00000000 |    ALTERNATE BUFFER         *\n* +A-------+  +-----+--------+----------+                             *\n*  |                                                                  *\n*  8 INDICATES END OF PARAMETER LIST                                  *\n*                                                                     *\n         EJECT\n*                                                                     *\n* OUTPUT -                                                            *\n*                                                                     *\n*  THE OUTPUT OF THIS TSO/E BUILT-IN FUNCTION EXIT IS:                *\n*                                                                     *\n*  FOR SUCCESSFULLY EVALUATED FUNCTIONS, THE REQUESTED INFORMATION    *\n*  RETURNED IN PARMETER ENTRY 12.                                     *\n*                                                                     *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n*      INTRODUCED IN TSO/E HTE1402                                    *\n*                                                                     *\n***********************************************************************\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n* REGISTER EQUATES FOLLOW                                             *\n*                                                                     *\n***********************************************************************\n*     REGISTER EQUATES AND USAGE                                      *\n*                                                                     *\n         SPACE 3\nR0       EQU   0                     UNPREDICTABLE\nR1       EQU   1                     ON ENTRY R1 POINTS TO THE\n*                                    PARAMETER LIST. AT OTHER TIMES\n*                                    THE VALUE OF R1 IS UNPREDICTABLE\nR2       EQU   2                     UNPREDICTABLE\nR3       EQU   3                     UNPREDICTABLE\nR4       EQU   4                     UNPREDICTABLE\nR5       EQU   5                     UNPREDICTABLE\nR6       EQU   6                     UNPREDICTABLE\nR7       EQU   7                     UNPREDICTABLE\nR8       EQU   8                     UNPREDICTABLE\nR9       EQU   9                     UNPREDICTABLE\nR10      EQU   10                    OUTPUT BUFFER\nR11      EQU   11                    DATA AREA BASE REGISTER\nR12      EQU   12                    CODE AREA BASE REGISTER\nR13      EQU   13                    SAVE AREA BASE REGISTER\nR14      EQU   14                    RETURN ADDRESS\nR15      EQU   15                    RETURN CODE\n         TITLE 'ENTRY CODE'\n***********************************************************************\n* IKJCT44B ENTRY CODE                                                 *\n*                                                                     *\n* DESCRIPTIVE NAME - STANDARD ENTRY LINKAGE CODE ROUTINE              *\n*                                                                     *\n* FUNCTION - ESTABLISHES STANDARD LINKAGE BETWEEN PROGRAMS            *\n*                                                                     *\n* OPERATION -                                                         *\n*                                                                     *\n*    1).  PERFORMS STANDARD LINKAGE BETWEEN INVOKER OF EXIT AND       *\n*         EXIT.                                                       *\n*    2).  OBTAINS A DYNAMIC SAVE AREA FOR THE EXIT AND                *\n*         ESTABLISHES THIS AS THE SAVE AREA FOR THE EXIT              *\n*    3).  OBTAINS EXIT'S DYNAMIC WORK AREA STORAGE AND                *\n*         ESTABLISHES THIS AS THE WORK AREA FOR THE EXIT              *\n*                                                                     *\n***********************************************************************\nIKJCT44B CSECT\n         ENTRY IKJCT44B\n         SAVE  (14,12),,IKJCT44B___TSO/E_INSTALLATION-WRITTEN_BUILT-IN_X\n               FUNCTION_EXIT_ROUTINE___&SYSDATE.__&SYSTIME\n*\n         LR    R12,R15               LOAD R12 TO CONTAIN THE\n*                                    ENTRY POINT ADDRESS OF IKJCT44B\n*\n         USING IKJCT44B,R12          ESTABLISH R12 TO BE THE\n*                                    PROGRAM'S BASE CODE REGISTER\n*\n         LR    R2,R1                 SAVE THE ADDRESS OF THE PARAMETER\n*                                    LIST\n*\n         GETMAIN RU,LV=SAVAREAL,LOC=(BELOW,ANY)\n*                                    OBTAIN A DYNAMIC SAVE AREA\n*                                    FOR IKJCT44B AND MAKE SURE\n*                                    THE SAVE AREA IS BELOW 16\n*                                    MEGABYTES IN VIRTRUAL STORAGE\n*\n         ST    R13,4(,R1)            SAVE THE ADDRESS OF THE INVOKER'S\n*                                    SAVE AREA INTO IKJCT44B'S DYNAMIC\n*                                    SAVE AREA\n*\n         ST    R1,8(,R13)            SAVE THE ADDRESS OF IKJCT44B'S\n*                                    SAVE AREA INTO THE INVOKER'S\n*                                    SAVE AREA\n*\n         LR    R13,R1                LOAD THE ADDRESS OF IKJCT44B'S\n*                                    DYNAMIC SAVE AREA INTO R13\n*                                    FOR POSSIBLE NEXT CALLER'S USE\n*\n         USING SAVEAREA,R13          ESTABLISH ADDRESSABILITY TO\n*                                    IKJCT44B'S SAVE AREA SO THAT THE\n*                                    LABELS WITHIN THE SAVE AREA\n*                                    CAN BE USED IF NEEDED\n*\n         GETMAIN RU,LV=LWORKA,LOC=(BELOW,ANY),SP=1\n*                                    OBTAIN THE DYNAMIC WORK AREA\n*                                    FOR IKJCT44B IN SUBPOOL 1 AND\n*                                    MAKE SURE IT IS BELOW 16\n*                                    MEGABYTES IN VIRTRUAL STORAGE\n*\n         LR    R11,R1                LOAD THE ADDRESS OF THE DYNAMIC\n*                                    WORK AREA INTO R11 FOR IKJCT44B'S\n*                                    USE\n*\n         USING WORKA,R11             AND ESTABLISH ADDRESSABILITY\n         USING PSA,0\n*                                    TO THE DYNAMIC WORK AREA SO THAT\n*                                    THE LABELS WITHIN THE WORK AREA\n*                                    CAN BE ADDRESSED\n*\n         ST    R1,GM_PTR             SAVE THE ADDRESS OF IKJCT44B'S\n*                                    DYNAMIC SAVE AREA FOR LATER USE\n*\n         ST    R2,EPLISTPT           SAVE THE ADDRESS OF THE PARAMETER\n*                                    LIST THAT THE INVOKER OF IKJCT44B\n*                                    PASSED IN FOR LATER USE\n*\n         MVC   WRKAREID,WKARIDCT     PUT INTO THE FIRST 8 POSITIONS OF\n*                                    THE IKJCT44B'S DYNAMIC WORK AREA\n*                                    THE CHARACTERS \"WORKAREA\" SO THAT\n*                                    IT CAN BE EASILY FOUND IN A DUMP\n*\n         LA    R1,8                  INITIALIZE THE RETURN CODE\n*                                    TO UNSUCCESSFUL EVALUATION.\n*\n         ST    R1,RETCODE            INITIALIZE THE RETURN CODE.\n         TITLE 'MAIN LINE CODE'\n***********************************************************************\n*                                                                     *\n* MAIN LINE CODE                                                      *\n*                                                                     *\n* DESCRIPTIVE NAME - CALL PROCESS_EXIT_PARAMETERS TO PROCESS ALL OF   *\n*                    THE PARAMETERS PASSED TO THIS ROUTINE IN         *\n*                    REGISTER 1.                                      *\n*                                                                     *\n*                                                                     *\n* FUNCTION - STARTS THE PARAMETER ENTRY PROCESSING PROCESS            *\n*                                                                     *\n* OPERATION -                                                         *\n*                                                                     *\n*                                                                     *\n*    1).  CALL PROCESS_EXIT_PARAMETERS                                *\n*    2).  WHEN CONTROL IS RETURNED CONTROL FALLS INTO THE TERMINATION *\n*         SUBROUTINE                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         BAL   R14,PROCESS_EXIT_PARAMETERS\n         TITLE 'TERMINATION CODE'\n***********************************************************************\n*                                                                     *\n* TERMINATION CODE....                                                *\n*                                                                     *\n* DESCRIPTIVE NAME - CLEANUP AND TERMINATION CODE                     *\n*                                                                     *\n* FUNCTION - RELEASES DYNAMIC STORAGE TO SYSTEM AND RETURNS TO        *\n*            CALLER                                                   *\n*                                                                     *\n* OPERATION -                                                         *\n*                                                                     *\n*                                                                     *\n*    1).  LOADS UP REGISTER 5 WITH THE RETURN CODE                    *\n*    2).  FREES THE DYNAMIC STORAGE WORK AREA                         *\n*    3).  RELOADS THE ADDRESS OF THE CALLER'S SAVE AREA               *\n*    4).  FREES THE DYNAMIC STORAGE SAVE AREA                         *\n*    5).  RELOADS REGISTER 14 WITH THE RETURN ADDRESS                 *\n*    6).  RELOADS REGISTER 15 WITH THE RETURN CODE                    *\n*    7).  RELOADS REGISTERS 0 - 12 WITH ORIGINAL CONTENTS             *\n*    8).  RETURNS TO CALLER VIA BSM                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         L     R5,RETCODE            LOAD R5 TO CONTAIN THE RETURN\n*                                    CODE THAT IKJCT44B WILL RETURN\n*                                    TO THE INVOKER.\n*\n         L     R1,GM_PTR             LOAD R1 TO CONTAIN THE ADDRESS\n*                                    OF IKJCT44B'S DYNAMIC WORK AREA\n*\n         FREEMAIN RU,LV=LWORKA,A=(1),SP=1\n*                                    ISSUE FREEMAIN TO RELEASE\n*                                    IKJCT44B'S DYNAMIC WORK AREA\n*                                    STORAGE BACK TO THE SYSTEM\n*\n         LR    R1,R13                LOAD R1 TO CONTAIN THE ADDRESS\n*                                    OF IKJCT44B'S DYNAMIC SAVE AREA\n*\n         L     R13,4(,R13)           LOAD R13 TO CONTAIN THE ADDRESS\n*                                    OF THE INVOKER'S SAVE AREA THAT\n*                                    WAS PASSED TO IKJCT44B ON ENTRY\n*\n         FREEMAIN RU,LV=SAVAREAL,A=(1)\n*                                    ISSUE FREEMAIN TO RELEASE\n*                                    IKJCT44B'S DYNAMIC SAVE AREA\n*                                    STORAGE BACK TO THE SYSTEM\n*\n         L     R14,12(,R13)          LOAD R14 WITH THE ADDRESS OF THE\n*                                    NEXT INSTRUCTION THAT THE INVOKER\n*                                    WOULD HAVE EXECUTED IF IKJCT44B\n*                                    HAD NOT BEEN INVOKED\n*\n         LR    R15,R5                LOAD R15 TO CONTAIN THE RETURN\n*                                    CODE IKJCT44B WILL PRESENT BACK\n*                                    TO THE INVOKER.\n*\n         LM    R0,R12,20(R13)        RESTORE THE INVOKER'S REGISTERS\n*                                    BEFORE IKJCT44B RETURNS TO\n*                                    THE INVOKER\n*\n         BSM   0,14                  RETURN TO THE INVOKER OF IKJCT44B\n*                                    AND RESET THE CALLER'S EXECUTION\n*                                    AND ADDRESSING MODE AS INVOKER\n*                                    CONTROL IS RESTORED\n*\n         TITLE 'PROCESS_EXIT_PARAMETERS SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* PROCESS_EXIT_PARAMETERS                                             *\n*                                                                     *\n* DESCRIPTIVE NAME - PROCESS INSTALLATION EXIT PARAMETERS             *\n*                                                                     *\n* FUNCTION -  PROCESSING EXIT PARAMETER 10 TO DETERMINE IF            *\n*             THIS IS A SUPPORTED BUILT-IN FUNCTION.                  *\n*                                                                     *\n* OPERATION -                                                         *\n*                                                                     *\n*    1).  SAVES ALL OF THE CALLER'S REGISTERS IN A LOCAL SAVE AREA    *\n*         SO THAT ANY REGISTER CAN BE EASILY USED.                    *\n*    2).  GET THE ADDRESS OF PARAMETER ENTRY 10.                      *\n*    3).  CALLS PROCESS_PARAMETER_ENTRY                               *\n*    4).  RELOADS THE CALLER'S REGISTERS                              *\n*    5).  RETURNS TO CALLER                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPROCESS_EXIT_PARAMETERS DS 0H\n         STM   R0,R15,SAVAREA1       SAVE ALL REGISTERS THE CALLER\n*                                    OF THIS SUBROUTINE PRESENTED\n*                                    SO THAT ANY REGISTER\n*                                    CAN EASILY BE USED\n*\n         L     R1,EPLISTPT           GET THE ADDRESS OF THE PARAMETER\n*                                    LIST THAT THE INVOKER PASSED INTO\n*                                    IKJCT44B\n*\n         LA    R2,36(,R1)            ADD THE DISPLACEMENT OF\n*                                    PARAMETER 10 TO PROCESS THE\n*                                    PARAMETER LIST ADDRESS\n*\n         L     R2,0(,R2)             LOAD R1 TO POINT DIRECTLY TO\n*                                    THE NAME PARAMETER\n*\n         ST    R2,PARMPNT1           SAVE THE ADDRESS OF WHERE THE NAME\n*                                    PARAMETER IS AT FOR LATER USE\n*\n         LA    R2,44(,R1)            ADD THE DISPLACEMENT OF\n*                                    PARAMETER 10 TO PROCESS THE\n*                                    PARAMETER LIST ADDRESS\n*\n         L     R2,0(,R2)             LOAD R1 TO POINT DIRECTLY TO\n*                                    THE NAME PARAMETER\n*\n         ST    R2,PARMPNT2           SAVE THE ADDRESS OF WHERE THE NAME\n*                                    PARAMETER IS AT FOR LATER USE\n*\n         BAL   R14,PROCESS_PARAMETER_ENTRY CALL THE SUBROUTINE\n*                                    PROCESS_PARAMETER_ENTRY TO\n*                                    DETERMINE IF THIS PARAMETER IS A\n*                                    VALID BCS-WRITTEN CLIST VARIABLE\n*\n         LM    R0,R15,SAVAREA1       RESTORE ALL OF THE CALLER'S\n*                                    REGISTERS TO THEIR ORIGINAL\n*                                    VALUE\n*\n         BR    R14                   RETURN TO CALLER\n         TITLE 'PROCESS_PARAMETER_ENTRY SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* PROCESS_PARAMETER_ENTRY                                             *\n*                                                                     *\n* DESCRIPTIVE NAME - PROCESS THE PARAMETER ENTRY THAT IS POINTED      *\n*                    TO FROM THE PARAMETER LIST.                      *\n*                                                                     *\n* FUNCTION -  SUBROUTINE DRIVER                                       *\n*                                                                     *\n* OPERATION -                                                         *\n*                                                                     *\n*    1). SAVES ALL OF THE CALLER'S REGISTERS IN A LOCAL SAVE AREA     *\n*    6). RELOADS THE CALLER'S REGISTERS                               *\n*    7). RETURNS TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPROCESS_PARAMETER_ENTRY DS 0H\n         STM   R0,R15,SAVAREA2       SAVE ALL REGISTERS THE CALLER\n*                                    OF THIS SUBROUTINE PRESENTED\n*                                    SO THAT ANY REGISTER\n*                                    CAN EASILY BE USED\n*\n         L     R8,PARMPNT1           LOAD R8 TO CONTAIN THE ADDRESS OF\n*                                    THE PARAMETER ENTRY\n*\n         USING PARAMENT,R8           ESTABLISH ADDRESSABILITY TO\n*                                    THE PARAMETER ENTRY DSECT SO\n*                                    IKJCT44B CAN REFERENCE THE LABELS\n*                                    WITHIN THE PARAMETER ENTRY DSECT\n*\n         L     R3,PARAMLEN           LOAD R3 TO CONTAIN THE LENGTH OF\n*                                    THE VARIABLE NAME\n*\n         L     R4,PARAMDAT           LOAD R4 TO CONTAIN THE ADDRESS OF\n*                                    THE VARIABLE NAME\n*\n         LA    R5,VARTABLE           LOAD R5 TO CONTAIN THE ADDRESS OF\n*                                    THE VARIABLE TABLE\n*\n         LA    R7,VARTABEN           LOAD R7 TO CONTAIN THE ADDRESS\n*                                    AFTER THE LAST TABLE ENTRY\n*\n         USING VARDSECT,R5           ESTABLISH ADDRESSABILITY TO\n*                                    THE VARIABLE TABLE\n*\nLOOPIT   DS    0H                    CONTINUE CHECKING\n*\n         CH    R3,VARLEN             IS THE LENGTH CORRECT?\n*\n         BLR   R14                   NOT IN THE TABLE\n         BNE   BUMPIT                TRY ANOTHER TIME\n*\n         LR    R6,R3                 PREPARE FOR COMPARE\n*\n         BCTR  R6,0                  DECREMENT LENGTH\n*\n         EX    R6,NAMECOMP           AND CHECK THE NAME\n*\n         BLR   R14                   NOT IN THE TABLE\n         BNE   BUMPIT                NOT THE CORRECT NAME\n*\n         XC    RETCODE,RETCODE       ASSUME SUCCESSFUL EVALUATION\n*\n         L     R15,VARADDR           ADDRESS OF THE EVALUATOR\n*\n         L     R8,PARMPNT2           LOAD R8 TO CONTAIN THE ADDRESS OF\n*                                    THE RESULT ENTRY\n*\n         BR    R15                   AND EVALUATE THE VARIABLE\n*\nBUMPIT   DS    0H                    CHECK FOR MORE\n*\n         LA    R5,VARTABLN(,R5)      BUMP THE ADDRESS\n*\n         CR    R5,R7                 STILL IN THE TABLE\n*\n         BL    LOOPIT                YES\n*\n         BR    R14                   RETURN TO CALLER\n         TITLE 'EVALUATE SYSXLU - LU NAME'\n***********************************************************************\n*                                                                     *\n* SYSXLU FUNCTION                                                     *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE TERMINAL ID (AS DEFINED           *\n*      TO RACF)                                                       *\n*                                                                     *\n* INPUT:                                                              *\n*      ACEE                                                           *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nSYSXLU   DS    0H\n         STM   R14,R12,12(R13)\n         L     R3,ASCBPTR              ASCB ADDRESS\n         USING ASCB,R3                 ASCB ADDRESS\n         L     R3,ASCBASXB             ASXB ADDRESS\n         DROP  R3                      ASCB ADDRESS\n         L     R5,PARMPNT2             THE ADDRESS FOR THE RESULT\n         USING PARAMENT,R5             ESTABLISH ADDRESSABILITY TO\n         L     R15,PARAMDAT            THE ADDRESS FOR THE RESULT\n         MVI   RESULT(R15),C' '        BLANK\n         SR    R4,R4                   ZERO\n         USING ASXB,R3                 ASXB ADDRESS\n         ICM   R3,15,ASXBSENV          ACEE ADDRESS\n         DROP  R3                      ASXB ADDRESS\n         BZ    ENDSYSLU                NONE\n         USING ACEE,R3\n         CLI   ACEETRID,C' '           TERMINAL ID ?\n         BNH   ENDSYSLU                NONE\n         MVC   RESULT(8,R15),ACEETRID  TERMINAL ID\n         LA    R4,8\n         LA    R3,RESULT+7             INIT\nSYSLULOP CLI   0(R3),C' '              BLANK\n         BNE   ENDSYSLU                NO\n         BCTR  R3,0                    DECREMENT\n         BCT   R4,SYSLULOP             AGAIN\n         SR    R4,R4                   NOTHING\nENDSYSLU ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         POP   USING\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXMVS - INSTALLED MVS LEVEL'\n***********************************************************************\n*                                                                     *\n* SYSXMVS FUNCTION                                                    *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTIME RETURNS THE MVS RELEASE NUMBER                    *\n*                                                                     *\n* INPUT:                                                              *\n*      CVT                                                            *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSYSXMVS  DS    0D\n         PUSH  USING\n         STM   R14,R12,12(R13)\n         L     R6,FLCCVT               10\n         L     R15,PARAMDAT\n         USING RELEASE,R15             ESTABLISH ADDRESSABILITY TO\n         MVC   RELEASE,RELEASEC\n*        MVC   RELNAME,=C'OS/VS1'\n         TM    CVTDCB(R6),CVT4MS1       Q. VS1\n         BZ    NOTXA                    YES.\n         MVI   RELNAME+5,C'2'           NO. VS2\n         TM    CVTDCB(R6),CVTMVSE+CVTOSEXT Q. MVS/ESA\n         BNO   NOTESA                   NO.\n         MVC   RELNAME(8),=C'MVS/ESA '  YES.\n         SH    R6,H256                  CVT PREFIX\n         MVC   RELSYSL+1,XCVTSYSL(R6)   MOVE SYSTEM ID\n         LA    R4,24\n         CLI   XCVTUSRL(R6),C' '        IS USER SYS ID PRESENT\n         BE    TRTIT                     NO\n         LA    R4,42\n         MVC   RELUSRL+1,XCVTUSRL(R6)   MOVE USER SYS ID\n         B     TRTIT                     NO\nNOTESA   EQU   *\n         TM    CVTDCB(R6),CVTMVSE       Q. MVS/XA\n         BZ    NOTXA                    NO.\n         MVC   RELNAME,=C'MVS/XA'       YES.\nNOTXA    EQU   *\n         SH    R6,H256                 CVT PREFIX\n         MVC   RELSYSL,XCVTSYSL(R6)    MOVE SYSTEM ID\n         LA    R4,23\n         CLI   XCVTUSRL(R6),C' '       IS USER SYS ID PRESENT\n         BE    TRTIT                     NO\n         LA    R4,41\n         MVC   RELUSRL,XCVTUSRL(R6)    MOVE USER SYS ID\nTRTIT    TR    RELUSRL(35),MNTTRTAB    REMOVE UNPRINTABLES\n         POP   USING\n         ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXDFP - INSTALLED DFP LEVEL'\n***********************************************************************\n*                                                                     *\n* SYSXDFP FUNCTION                                                    *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTIME RETURNS THE DFP RELEASE NUMBER                    *\n*                                                                     *\n* INPUT:                                                              *\n*      CVT                                                            *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSYSXDFP  DS    0D\n         PUSH  USING\n         STM   R14,R12,12(R13)\n         LA    R4,0                    LENGTH OF ZERO\n         L     R6,FLCCVT               10\n         L     R15,PARAMDAT\n         USING DFPAREA,R15             ESTABLISH ADDRESSABILITY\n         L     R2,CVTABEND(,R6)        SECONDARY CVT\n         CLI   132(R2),X'00'           KNOWN DFP RELEASE\n         BE    NODFP                    NO\n         L     R2,CVTDFA(,R6)          DFP ID TABLE ADDRESS\n         MVC   DFPAREA,=X'21F02020'    MASK\n         ED    DFPAREA,2(R2)           RELEASE LEVEL\n         LA    R4,4                    LENGTH\n         POP   USING\nNODFP    ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXRES - MVS SYSTEM RESIDENCE VOLUME'\n***********************************************************************\n*                                                                     *\n* SYSXRES FUNCTION                                                    *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE VOLUME SERIAL NUMBER              *\n*      OF THE SYSRES VOLUME.                                          *\n*                                                                     *\n* INPUT:                                                              *\n*      CVT                                                            *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSYSXRES  DS    0D\n         STM   R14,R12,12(R13)\n         L     R6,FLCCVT               10\n         L     R6,CVTSYSAD(,R6)        30\n         L     R15,PARAMDAT\n         MVC   RESULT(6,R15),UCBVOLI(R6) MOVE SYSRES VOLSER\n         LA    R4,6\n         ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXSERIAL - CPU SERIAL NUMBER'\n***********************************************************************\n*                                                                     *\n* SYSXSERIAL FUNCTION                                                 *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE CPU SERIAL NUMBER.                *\n*                                                                     *\n* INPUT:                                                              *\n*      PCCA                                                           *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\nSYSXSER  DS    0H\n         STM   R14,R12,12(R13)\n         L     R3,PSAPCCAV\n         L     R15,PARAMDAT\n         MVC   RESULT(6,R15),PCCACPSE(R3) SERIAL NUMBER\n         LA    R4,6\n         ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXSMFID - SMF ID'\n***********************************************************************\n*                                                                     *\n* SYSXSMFID FUNCTION                                                  *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE SMF ID OF THE SYSTEM.             *\n*                                                                     *\n* INPUT:                                                              *\n*      SMCA                                                           *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\nSYSXSMF  DS    0H\n         STM   R14,R12,12(R13)\n         L     R6,FLCCVT                10\n         L     R1,CVTSMCA(,R6)          C4\n         L     R15,PARAMDAT\n         MVC   RESULT(4,R15),SMCASID(R1) MOVE SMF-ID\n         LA    R4,4\n         ST    R4,PARAMLEN             SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXIPLAT - IPL DATE AND TIME'\n***********************************************************************\n*                                                                     *\n* SYSXIPLAT FUNCTION                                                  *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE TIME AND DATE OF THE LAST         *\n*      IPL OF THE SYSTEM.                                             *\n*      FORM: 19YY.DDD HH:MM:SS                                        *\n*                                                                     *\n* INPUT:                                                              *\n*      SMCA                                                           *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\nSYSXIPL  DS    0H\n         STM   R14,R12,12(R13)\n         L     R6,FLCCVT                10\n         L     R7,CVTSMCA(,R6)          C4\n         L     R15,PARAMDAT\n         USING WORKARE2,R15\n         MVC   TBIPL,IPLMASK\n         MVC   TBIPLDTE,DATEMASK\n         ED    TBIPLDTE,SMCAIDTE+1(R7)\n         MVC   TBIPL(2),IPLMASK        19XX\n         CLI   TBIPL+2,C'7'            YEAR '70\n         BNL   *+10                     NO\n         MVC   TBIPL(2),IPLMASK+2      20XX\n         L     R1,SMCAITME(,R7)         IPL TIME\n         SR    R0,R0\n         D     R0,SECONDS\n         CVD   R1,DWORK\n         UNPK  TBIPLTME(2),DWORK\n         OI    TBIPLTME+1,C'0'\n         SRDL  R0,32\n         D     R0,MINUTES\n         CVD   R1,DWORK\n         UNPK  TBIPLTME+3(2),DWORK\n         OI    TBIPLTME+4,C'0'\n         SRDL  R0,32\n         D     R0,HOURS\n         CVD   R1,DWORK\n         UNPK  TBIPLTME+6(2),DWORK\n         OI    TBIPLTME+7,C'0'\n         LA    R4,L'TBIPL\n         DROP  R15\n         ST    R4,PARAMLEN             SET LENGTH OF DATA\n         LM    R14,R12,12(R13)\n         BR    R14                     RETURN TO CALLER\n         TITLE 'EVALUATE SYSXACCT - ACCOUNT NUMBER'\n***********************************************************************\n*                                                                     *\n* SYSXACCT FUNCTION                                                   *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE LOGON ACCOUNT NUMBER.             *\n*                                                                     *\n* INPUT:                                                              *\n*      JCT                                                            *\n*      ACT                                                            *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nSYSXACCT DS    0H\n         STM   R14,R12,12(R13)\n         L     R3,TCBPTR                R3--> CURRENT TCB\n         USING TCB,R3\n         L     R3,TCBJSCB               JSCB\n         USING IEZJSCB,R3\n         L     R3,JSCBJCT               OS JCT (NOT JES2)\n         USING JCT-X'10',R3\n         ICM   R3,7,JCTACTAD            ACT\n         USING ACTDSKAD-X'10',R3\n         SLR   R5,R5                    CLEAR\n         SLR   R4,R4                    CLEAR FIELD LENGTH\n         ST    R4,PARAMLEN              INIT LENGTH OF COUNT\n         ICM   R5,1,ACTJNFLD            # OF ACCOUNTING FIELDS\n         BZ    NOACCT                    NONE, TREAT AS ZERO LENGTH\n         LA    R3,ACTJNFLD+L'ACTJNFLD   POINT TO FIRST FIELD\n         DROP  R3                       DONE WITH ACT B/R\n         IC    R4,0(R3)                 L' FIRST FIELD\n         LA    R3,1(R3,R4)              BUMP TO SECOND FIELD\n         BCT   R5,GET#2                 CHECK FOR LAST\n         B     NOACCT                   LAST, TREAT AS ZERO LENGTH\nGET#2    ICM   R4,1,0(R3)               GET LENGTH\n         BZ    NOACCT                   ZERO, BAIL OUT\n         LA    R3,1(,R3)                BUMP PAST LENGTH BYTE\n*\nMOVEACCT L     R1,PARAMDAT              TARGET\n         ST    R4,PARAMLEN              SET LENGTH OF COUNT\n         BCTR  R4,0                     ADJUST COUNT\n         EX    R4,RSM0ACCT              AND MOVE ACCT NO\nNOACCT   LM    R14,R12,12(R13)\n         BR    R14                      RETURN TO CALLER\nRSM0ACCT MVC   RESULT(0,R1),0(R3)\n         POP   USING\n         TITLE 'EVALUATE SYSXCPUH - CPU TIME IN HUNDRETHS'\n***********************************************************************\n*                                                                     *\n* SYSXCPUH BUILT IN FUNCTION                                          *\n*                                                                     *\n* FUNCTION:                                                           *\n*       THIS ROUTINE WILL RETURN THE AMOUNT OF CPU TIME USED          *\n*       DURING THE TSO SESSION:                                       *\n*         SYSXCPUH RETURNS SSSTH                                      *\n*                                                                     *\n* INPUT:                                                              *\n*      ASCB - ASCBEJST                                                *\n*                                                                     *\n* OUTPUT:                                                             *\n*      INSRTDA SET                                                    *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\nSYSXCPUH DS    0H\n         STM   R14,R12,12(R13)                                     0159\n*   LM(R2,R3,ASCBEJST);             /* GET CPU TIME FROM ASCB         *\n         L     R7,ASCBPTR                                          0162\n         USING ASCB,R7                 ASCB ADDRESS\n         LM    R2,R3,ASCBEJST                                      0162\n         DROP  R7                      ASCB ADDRESS\n*   SRDL(R2,22);                    /* SHIFT TO GET MICRO SEC         *\n         SRDL  R2,22                                               0163\n*   R6 = R3;                        /* SAVE RESULT                    *\n         LR    R6,R3                                               0164\n*   RESPECIFY                                                      0165\n*    (R2,                                                          0165\n*     R3) UNRSTD;                   /*                                *\n*   R6 = R6 / F10;                  /* ADJUST TO .00 SEC              *\n         LR    R2,R6                                               0166\n         SRDA  R2,32                                               0166\n         LA    R7,10                                               0166\n         DR    R2,R7                                               0166\n         LR    R6,R3                                               0166\n*   CVD(R6,WORKAREA);               /* CONVERT RESULT                 *\n         CVD   R6,WORKAREA                                         0167\n*   CPUAREA = CPUMASK;              /* MOVE IN EDIT MSK XXXXX         *\n         L     R15,PARAMDAT\n         USING WORKARE2,R15\n         MVC   CPUAREA(8),CPUHMASK\n*   R1 = ADDR(CPUPREC);             /* SET UP REG FOR PRECISION       *\n         LA    R1,CPUPREC\n         LR    R2,R1\n*   EDMK(CPUAREA,WORK2);            /* EDIT CPU TIME                  *\n         EDMK  CPUAREA(8),WORK2\n*   /*                                                                *\n*   /* LENGTH MUST BE SET FIRST BECAUSE THE LENGTH CALCULATION        *\n*   /* REQUIRES THE ORIGINAL 'RESULT' ADDRESS                         *\n*   /*                                                                *\n*   VARLEN = ADDR(CPUAREA(LENGTH(CPUAREA))) - R1 + F1; /* LENGTH IS\n*                                      THE LAST BYTE OF THE RESULT\n*                                      MINUS THE ADDR OF THE DATA\n*                                      PLUS 1                         *\n         DROP  R15\n         SLR   R2,R1                                               0172\n         LA    R2,1(,R2)                                           0172\n         ST    R2,PARAMLEN                                         0172\n         EX    R2,RESUTALN                                         0172\n         LM    R14,R12,12(R13)                                     0175\n         BR    R14                   RETURN TO CALLER\n         TITLE 'EVALUATE SYSXCPUTYPE - CPU TYPE'\n***********************************************************************\n*                                                                     *\n* SYSXCPUTYPE FUNCTION                                                *\n*                                                                     *\n* FUNCTION:                                                           *\n*      THIS ROUTINE WILL RETURN THE CPU TYPE.                         *\n*                                                                     *\n* INPUT:                                                              *\n*      PCCA                                                           *\n*                                                                     *\n* OUTPUT:                                                             *\n*      RESULT SET                                                     *\n*      VARLEN SET TO LENGTH                                           *\n*                                                                     *\n***********************************************************************\nSYSXCPUT STM   R14,R12,12(R13)\n         L     R3,PSAPCCAV\n         L     R15,PARAMDAT\n         MVC   RESULT(4,R15),PCCACPTY(R3) CPU TYPE\n         LA    R4,4\n         ST    R4,PARAMLEN              SET LENGTH OF COUNT\n         LM    R14,R12,12(R13)\n         BR    R14                   RETURN TO CALLER\n         TITLE 'EXECUTED INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n* EXECUTED INSTRUCTIONS.                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nNAMECOMP CLC   0(0,R4),VARNAME       IS THIS THE NAME\nRESUTALN MVC   0(0,R15),0(R1)        ALIGN THE RESULT\n*\n         DROP  R8                    NO LONGER USE PARAMETER ENTRY\n*                                    DSECT DESCRIPTION\n*\n         DROP  R5                    NO LONGER USE VARIABLE TABLE\n*                                    DSECT DESCRIPTION\n         TITLE 'STATIC VARIABLES'\n***********************************************************************\n*                                                                     *\n* DECLARES OF ALL CONSTANTS USED BY THIS MODULE FOLLOW                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSECONDS  DC    A(60*60*100)\nMINUTES  DC    A(60*100)\nHOURS    DC    A(100)\nH256     DC    H'256'\nWKARIDCT DC    C'WORKAREA'\nCPUHMASK DC    X'4020202020202120'\nDATEMASK DC    X'F020204B202020'\nIPLMASK  DC    C'1920.DDD HH:MM:SS'\nRELEASEC DC    CL41'OS/VS1 '\n         DS    0D\nMNTTRTAB DC    256C' '\n         ORG   MNTTRTAB+C'\u00a2'\n         DC    7AL1(*-MNTTRTAB)        \u00a2.<(+|&\n         ORG   MNTTRTAB+C'!'\n         DC    8AL1(*-MNTTRTAB)        !$*);\u00ac-/\n         ORG   MNTTRTAB+C'|'\n         DC    5AL1(*-MNTTRTAB)        \u00a6,%_>?\n         ORG   MNTTRTAB+C':'\n         DC    6AL1(*-MNTTRTAB)        :#@'=\"\n         ORG   MNTTRTAB+C'a'\n         DC    9AL1(*-MNTTRTAB)        abcdefghi\n         ORG   MNTTRTAB+C'j'\n         DC    9AL1(*-MNTTRTAB)        jklmnopqr\n         ORG   MNTTRTAB+C's'\n         DC    8AL1(*-MNTTRTAB)        stuvwxyz\n         ORG   MNTTRTAB+C'A'\n         DC    9AL1(*-MNTTRTAB)        ABCDEFGHI\n         ORG   MNTTRTAB+C'J'\n         DC    9AL1(*-MNTTRTAB)        JKLMNOPQR\n         ORG   MNTTRTAB+C'S'\n         DC    8AL1(*-MNTTRTAB)        STUVWXYZ\n         ORG   MNTTRTAB+C'0'\n         DC    10AL1(*-MNTTRTAB)       0123456789\n         TITLE 'FUNCTION VARIABLES'\n***********************************************************************\n*                                                                     *\n* TABLE OF THE SUPPORTED VARIABLES                                    *\n*                                                                     *\n* THIS TABLE IS ARRANGED IN LENGTH ORDER AND SORTED ALPHABETICALLY    *\n* WITHIN THE SAME LENGTH.                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         DS    0D                    DOUBLE WORD ALIGNMENT\n         SPACE 1\nVARTABLE DC    Y(L'NLU)\nNLU      DC    C'SYSXLU'\n         ORG   NLU+14\n         DC    A(SYSXLU)\n         SPACE 1\n         DC    Y(L'NDFP)\nNDFP     DC    C'SYSXDFP'\n         ORG   NDFP+14\n         DC    A(SYSXDFP)\n         SPACE 1\n         DC    Y(L'NMVS)\nNMVS     DC    C'SYSXMVS'\n         ORG   NMVS+14\n         DC    A(SYSXMVS)\n         SPACE 1\n         DC    Y(L'NRES)\nNRES     DC    C'SYSXRES'\n         ORG   NRES+14\n         DC    A(SYSXRES)\n         SPACE 1\n         DC    Y(L'NACCT)\nNACCT    DC    C'SYSXACCT'\n         ORG   NACCT+14\n         DC    A(SYSXACCT)\n         SPACE 1\n         DC    Y(L'NCPUH)\nNCPUH    DC    C'SYSXCPUH'\n         ORG   NCPUH+14\n         DC    A(SYSXCPUH)\n         SPACE 1\n         DC    Y(L'SIPL)\nSIPL     DC    C'SYSXIPLAT'\n         ORG   SIPL+14\n         DC    A(SYSXIPL)\n         SPACE 1\n         DC    Y(L'NSMF)\nNSMF     DC    C'SYSXSMFID'\n         ORG   NSMF+14\n         DC    A(SYSXSMF)\n         SPACE 1\n         DC    Y(L'NSER)\nNSER     DC    C'SYSXSERIAL'\n         ORG   NSER+14\n         DC    A(SYSXSER)\n         SPACE 1\n         DC    Y(L'NCPUTY)\nNCPUTY   DC    C'SYSXCPUTYPE'\n         ORG   NCPUTY+14\n         DC    A(SYSXCPUT)\n         SPACE 1\nVARTABEN EQU   *\n         SPACE 2\nVARDSECT DSECT\nVARLEN   DS    Y\nVARNAME  DS    CL14\n         ORG   VARNAME+14\nVARADDR  DS    A\nVARTABLN EQU   *-VARLEN\nIKJCT44B CSECT ,\n         TITLE 'DYNAMIC SAVE AREA'\n***********************************************************************\n*\n* IKJCT44B'S DYNAMIC SAVE AREA                                        *\n*\n***********************************************************************\n*\n         SPACE 3\nSAVEAREA DSECT\nSAVAREA0 DS    0CL72                 STANDARD SAVE AREA\n         DS    F                     UNUSED\nB_PTR    DS    F                     BACKWARD SAVE AREA POINTER\nF_PTR    DS    F                     FORWARD SAVE AREA POINTER\nREG14    DS    F                     CONTENTS OF REGISTER 14\nREG15    DS    F                     CONTENTS OF REGISTER 15\nREG0     DS    F                     CONTENTS OF REGISTER 0\nREG1     DS    F                     CONTENTS OF REGISTER 1\nREG2     DS    F                     CONTENTS OF REGISTER 2\nREG3     DS    F                     CONTENTS OF REGISTER 3\nREG4     DS    F                     CONTENTS OF REGISTER 4\nREG5     DS    F                     CONTENTS OF REGISTER 5\nREG6     DS    F                     CONTENTS OF REGISTER 6\nREG7     DS    F                     CONTENTS OF REGISTER 7\nREG8     DS    F                     CONTENTS OF REGISTER 8\nREG9     DS    F                     CONTENTS OF REGISTER 9\nREG10    DS    F                     CONTENTS OF REGISTER 10\nREG11    DS    F                     CONTENTS OF REGISTER 11\nREG12    DS    F                     CONTENTS OF REGISTER 12\nSAVAREAL EQU   *-SAVEAREA\n         TITLE 'DYNAMIC WORK AREA'\n***********************************************************************\n* DECLARES OF ALL DYNAMIC VARIABLES USED BY THIS MODULE FOLLOW        *\n***********************************************************************\n*\n         SPACE 3\nWORKA    DSECT\nWRKAREID DS    CL8                   WORKAREA ID\nSAVAREA1 DS    18F                   SAVE AREA 1\nSAVAREA2 DS    18F                   SAVE AREA 2\n         SPACE 1\nGM_PTR   DS    F                     ADDRESS OF GETMAIN\nPARMPNT1 DS    F                     ADDRESS OF THE PARAMETER ENTRY\nPARMPNT2 DS    F                     ADDRESS OF THE PARAMETER ENTRY\nEPLISTPT DS    F                     ADDRESS OF THE PARAMETER LIST\n*                                    THAT WAS PASSED INTO IKJCT44B\n         SPACE 1\nRETCODE  DS    F                     THE RETURN CODE HOLDER\n         DS    0D\nDWORK    DS    0D\nWORKAREA DS    CL16                  WORK AREA FOR HEXCONV\n         ORG   WORKAREA\nWORK1    DS    CL4\nWORK2    DS    CL4\n         ORG   ,\n         DS    0D                    ALIGN ON A DOUBLE WORD\nLWORKA   EQU   *-WORKA               LENGTH OF THIS WORK AREA\n         TITLE 'PARAMETER ENTRY DSECT MAPPING'\nPARAMENT DSECT                       DESCRIBE THE PARAMETER ENTRY\n         DS    0F                    ALIGN ON A FULL WORD\nPARAMKEY DS    F                      THE KEY FIELD\nPARAMLEN DS    F                      THE LENGTH OF THE DATA\nPARAMDAT DS    A                      THE PTR TO DATA\nWORKARE2 DSECT\nRESULT   EQU   0,256,C'C'\n         SPACE 1\n         ORG   WORKARE2\nCPUAREA  DS    CL8\n         ORG   CPUAREA+7\nCPUPREC  DS    C\n         SPACE 1\n         ORG   WORKARE2\nDFPAREA  DS    CL4\n         SPACE 1\n         ORG   WORKARE2\nRELEASE  DS    0CL41\nRELNAME  DC    C'OS/VS1'\n         DC    C' '\nRELSYSL  DC    CL16' '\n         DC    C'  '\nRELUSRL  DC    CL16' '\n         DC    C'  '\n         SPACE 1\n         ORG   WORKARE2\nTBIPL    DS    0C'19YY.DDD,HH:MM:SS',C\nTBIPLDTE DS    C' YY.DDD',C','\nTBIPLTME DS    C'HH:MM:SS',C\n         SPACE 1\n         ORG   ,\n         TITLE 'VARIOUS DSECTS'\nIKJCT44B CSECT\n         LTORG\n         PRINT NOGEN\n         IHAACEE ,\n         IHAASCB ,\n         IHAASXB ,\n         IEZJSCB ,\n         IHAPSA ,\nASCBPTR  EQU   PSAAOLD,4,C'A'\nTCBPTR   EQU   PSATNEW,4,C'A'\nSMCA     EQU   0,352,C'C'\nSMCASID  EQU   SMCA+16,4,C'A'          SYSTEM IDENTIFICATION\nSMCAITME EQU   SMCA+336,4,C'A'         IPL TIME (BINARY)\nSMCAIDTE EQU   SMCA+340,4,C'A'         IPL DATE (YYDDDF)\nCVTFIX   EQU   0,256,C'C'\nCVTMAP   EQU   0,1264,C'C'\nCVTSYSAD EQU   CVTMAP+48,4,C'A'\nCVTDCB   EQU   CVTMAP+116,1,C'B'\nCVTMVSE  EQU   B'10000000'             S/370/XA\nCVT4MS1  EQU   B'00010000'             MVT OS/VS2\nCVTOSEXT EQU   B'00001000'             CVTOSLVL IS PRESENT\nCVT6DAT  EQU   B'00000010'             DAT OS/VS1 OS/VS2\nCVT8AOS2 EQU   B'00010010'             MVS OS/VS2\nCVTTVT   EQU   CVTMAP+156,4,C'A'\nCVTSMCA  EQU   CVTMAP+196,4,C'C'\nCVTABEND EQU   CVTMAP+200,4,C'A'       ADDR OF SCVT FOR ABEND\nXCVTSYSL EQU   CVTFIX+216,16,C'C'\nXCVTUSRL EQU   CVTFIX+232,16,C'C'\nCVTHSM   EQU   CVTMAP+988,4,C'A'\nCVTRAC   EQU   CVTMAP+992,4,C'A'\nCVTDFA   EQU   CVTMAP+1216,4,C'A'      DFP ID TABLE ADDR\nUCBOB    EQU   0,32,C'C'\nUCBVOLI  EQU   UCBOB+28,6,C'C'\nPCCA     EQU   0,584,C'C'\nPCCACPID EQU   PCCA+4,12,C'C'           CPU ID\nPCCACPSE EQU   PCCA+6,6,C'C'            CPU SERIAL\nPCCACPTY EQU   PCCA+12,4,C'C'           CPU TYPE\nJCT      DSECT\n         IEFAJCTB ,                 MVS JOB CONTROL TABLE\n         IKJTCB ,\nIKJCT44B CSECT\n         DS    0D\n         END   IKJCT44B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OBJCT44B": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x932?\\x00\\x932?\\x08\\x01\\x006\\x006\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-11-19T00:00:00", "modifydate": "1993-11-19T08:01:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "SYS001"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SESSION": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x932/\\x00\\x932/\\x17F\\x003\\x003\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-18T17:46:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "SYS001"}, "text": "CONTROL ASIS END(XIT)\nSET JD=&SUBSTR(4:6,&SYSJDATE.)\nSET B = &STR(\nIF &SYSISPF = ACTIVE THEN DO\n  SET L1 = &SUBSTR(1:76,&STR(&SYSDATE..&JD &SYSSTIME &B))\n  SET L2 = &SUBSTR(1:76,&STR(IPL &SYSXIPLAT &B))\nXIT\nELSE DO\n  WRITE &SYSDATE..&JD &SYSSTIME\n  IF &STR(&SYSXIPLAT) NE &STR() THEN +\n    WRITE IPL &SYSXIPLAT\nXIT\nSET DV=&SUBSTR(1:1,&SYSXDFP.3030)\nSET DR=&SUBSTR(2:3,&SYSXDFP.3030)\nSET DM=&SUBSTR(4:4,&SYSXDFP.3030)\nSET DR=&DR\nSET RV=&SUBSTR(1:1,&SYSLRACF.)\nSET RR=&SUBSTR(2:3,&SYSLRACF.)\nSET RM=&SUBSTR(4:4,&SYSLRACF.)\nSET RR=&RR\nSET TV=&SUBSTR(1:1,&SYSTSOE.)\nSET TR=&SUBSTR(2:3,&SYSTSOE.)\nSET TM=&SUBSTR(4:4,&SYSTSOE.)\nSET TR=&TR\nIF &LENGTH(&SYSHSM) > 0 THEN DO\nSET HV=&SUBSTR(1:1,&SYSHSM.down).\nSET HR=&SUBSTR(2:3,&SYSHSM.down)\nSET HM=.&SUBSTR(4:4,&SYSHSM.down)\nSET HR=&HR\nXIT\nELSE SET HV = DOWN\nIF &SYSISPF = ACTIVE THEN DO\n  SET L3 = &SUBSTR(1:76,&STR(&SYSXMVS DFP &DV..&DR..&DM. &B))\n  SET L4 = &SUBSTR(1:76,&STR(RACF &RV..&RR..&RM.  +\n                        TSO/E &TV..&TR..&TM.  +\n                        HSM &HV.&HR.&HM &B))\n  SET L5 = &SUBSTR(1:76,&STR(CPU/Serial &SYSXCPUTYPE.&STR(/)&SYSXSERIAL  SMFID +\n                             &SYSXSMFID &B))\n  SET L6 = Residence Volume &SYSXRES\n  SET ZEDLMSG = &STR(&L1 &L2 &L3 &L4 &L5 &L6)\n  SET ZEDSMSG =\n  ISPEXEC SETMSG MSG(ISRZ000)\nXIT\nELSE DO\nWRITE &SYSXMVS DFP &DV..&DR..&DM.\nWRITE RACF &RV..&RR..&RM.  +\n      TSO/E &TV..&TR..&TM.  +\n      HSM &HV.&HR.&HM\nWRITE CPU/Serial &SYSXCPUTYPE.&STR(/)&SYSXSERIAL  SMFID &SYSXSMFID\nWRITE Residence Volume &SYSXRES\nXIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSTEM": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x932/\\x00\\x932/\\x17F\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-18T17:46:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SYS001"}, "text": "CONTROL ASIS\nIF &SYSISPF = ACTIVE THEN DO\n SET B = &STR(\n SET L1 = &SUBSTR(1:76,&STR(Userid &SYSUID  Prefix &SYSPREF &B))\n SET L2 = &SUBSTR(1:76,&STR(Environmnent &SYSENV.GROUND  Terminal ID +\n                            &SYSXLU &B))\n SET L3 = &SUBSTR(1:76,&STR(PROCedure Name &SYSPROC  ACCount &SYSXACCT &B))\n SET L4 = &SUBSTR(1:76,&STR(Full-Screen Terminal &SYSWTERM +\n                            char by &SYSLTERM lines. &B))\n   SET ZEDLMSG = &STR(&L1 &L2 &L3 &L4)\n   SET ZEDSMSG =\n   ISPEXEC SETMSG MSG(ISRZ000)\nEND\nELSE DO\n WRITE Userid &SYSUID  Prefix &SYSPREF\n WRITENR Environmnent &SYSENV.GROUND\n IF &SYSENV = FORE THEN +\n  WRITE &STR(  )Terminal ID &SYSXLU\n ELSE +\n  WRITE\n WRITE PROCedure Name &SYSPROC ACCount &SYSXACCT\n IF &SYSLTERM > 0 THEN +\n   WRITE Full-Screen Terminal &SYSWTERM char by &SYSLTERM lines.\n  ELSE +\n   WRITE Line-Mode Terminal &SYSWTERM characters wide.\nEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TS40084": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x932/\\x00\\x932?\\x07U\\x05\\x1b\\x05\\x1b\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-19T07:55:00", "lines": 1307, "newlines": 1307, "modlines": 0, "user": "SYS001"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "VARIABLE": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x932/\\x00\\x932?\\x08\\x19\\x00\\xff\\x01\\x00\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-11-18T00:00:00", "modifydate": "1993-11-19T08:19:00", "lines": 255, "newlines": 256, "modlines": 0, "user": "SYS001"}, "text": "The CLIST variables and built-in functions of TSO/E are summarized\nbelow:  New installation-written functions are indicated with an\nasterisk (*).\n\nBuilt-in Functions\n\n NAME             PURPOSE\n\n &DATATYPE        Determines the type of data and will be set to either\n                      NUM or CHAR\n &EVAL            Evaluates an arithmetic expression\n &LENGTH          Determines the length of an expression\n &NRSTR           Defines a non-rescannable character string\n &STR             Defines a character string\n &SUBSTR          Defines a character substring\n &SYSCAPS         Used to translate a string to uppercase characters\n &SYSCLENGTH      Determines the length of a DBCS string\n &SYSCSUBSTR      Defines a DBCS character substring\n &SYSDSN          Indicates if the specified data set or specified\n                     member of PDS exists.  The various indicators\n                     are:  OK; DATASET NOT FOUND; VOLUME NOT ON\n                     SYSTEM; MEMBER NOT FOUND; and MEMBER SPECIFIED,\n                     BUT DATASET IS NOT PARTITIONED\n &SYSINDEX        Locates one character string within another\n &SYSLC           Used to translate a string to lowercase characters\n &SYSNSUB         Limits the level of symbolic substitution to be\n                     done in a given expression\n &SYSONEBYTE      Converts a string from DBCS to EBCDIC\n &SYSTWOBYTE      Converts a string from EBCDIC to DBCS\n\nControl Variables\n\n NAME             PURPOSE\n\n &LASTCC          Contains the last return code\n &MAXCC           Contains the highest return code issued during\n                      execution of this CLIST\n &SYSABNCD        Contains the ABEND code produced by the object\n                      command of the TSOEXEC command\n &SYSABNRC        Contains the ABEND reason code produced by the\n                      object command of the TSOEXEC command\n &SYSASIS         Alternate function of CONTROL NO/CAPS or ASIS.\n                      (eg: ON or OFF)\n &SYSCMDRC        Contains the return code produced by the object\n                      command of the TSOEXEC command\n &SYSCONLIST      Alternate function of CONTROL NO/CONLIST.\n                      (eg: ON or OFF)\n &SYSCPU          Contains the number of CPU seconds used during\n                      session in form seconds.hh (eg: 11.71)\n &SYSDATE         Contains the current date in form mm/dd/yy\n                      (eg: 04/19/85)\n &SYSDLM          Specifies the sequential position of the\n                      character string used in the TERMIN statement\n &SYSDVAL         Contains whatever follows the termination delimiter\n                      in the line input with the TERMIN statement\n &SYSENV          Contains FORE or BACK to indicate if CLIST is\n                      executing in foreground or background\n &SYSFLUSH        Alternate function of CONTROL NO/FLUSH.\n                      (eg: ON or OFF)\n &SYSHSM          Contains HSM version and release level in form\n                      vrrm (ver rel mod) or ACTIVE or null.\n                      (eg:  2060)\n &SYSICMD         Contains the name by which the current CLIST was\n                      implicitly invoked\n &SYSISPF         Contains either ACTIVE or NOT ACTIVE to indicate if\n                      ISPF services are available\n &SYSJDATE        Contains the current Julian date in form yy.ddd\n                      (eg: 85.109)\n &SYSLIST         Alternate function of CONTROL NO/LIST.\n                      (eg: ON or OFF)\n &SYSLTERM        Contains the number of lines available on the 3270\n                      screen (eg: 32)\n &SYSLRACF        Contains RACF version and release level in form\n                      vrrm (ver rel mod) or null.  (eg: 1070)\n &SYSMSG          Alternate function of CONTROL NO/MSG.\n                      (eg: ON or OFF)\n &SYSNEST         Contains YES or NO to indicate whether or not the\n                      current CLIST is nested\n &SYSOUTLINE      Contains the number of lines of command output saved\n                      in &SYSOUTLINEnn variables\n &SYSOUTLINEnn    Contains lines of command output\n &SYSOUTTRAP      Contains the maximum number of command output lines\n                      to be saved in &SYSOUTLINEnn and indicated\n                      in &SYSOUTLINE\n &SYSPCMD         Contains the name of the MAINSTREAM-TSO command most\n                      recently executed by the CLIST\n &SYSPREF         Contains the current data set name prefix, which is\n                      appended to all data set names that are not\n                      fully qualified\n &SYSPROC         Contains the logon procedure name for the user of the\n                      current CLIST\n &SYSPROMPT       Alternate function of CONTROL NO/PROMPT.\n                      (eg: ON or OFF)\n &SYSRACF         Contains either AVAILABLE or NOT AVAILABLE to\n                      indicate if the services of RACF are available\n                      at this time\n &SYSSCAN         Contains the value limiting the number of times the\n                      symbolic substitution routine may scan\n                      each line\n &SYSSCMD         Contains the name of the MAINSTREAM-TSO subcommand\n                      most recently executed by the CLIST\n &SYSSDATE        Contains the current sortable date in form yy/mm/dd\n                      (eg: 85/04/19)\n &SYSSRV          Contains the number of system service units used\n                      during this session (eg: 217396)\n &SYSSTIME        Contains the current short time of day in form hh:mm\n                      (eg: 10:01)\n &SYSSYMLIST      Alternate function of CONTROL NO/SYMLIST.\n                      (eg: ON or OFF)\n &SYSTIME         Contains the current time of day in form\n                      hh:mm:ss (eg: 10:01:21)\n &SYSTSOE         Contains TSO/E version and release level in form\n                      vrrm (ver rel mod) or ACTIVE or null.\n                      (eg:  2031)\n &SYSUID          Contains the userid associated with the current\n                      terminal session (eg: USE123)\n &SYSWTERM        Contains the width of the terminal (screen) (eg: 80)\n &SYSXACCT *      Contains the account number used to LOGON to TSO\n                      (eg: 1000010000)\n &SYSXCPUH *      Contains the number of CPU seconds used during\n                      session in form secondshh (eg: 1171)\n &SYSXCPUTYPE *   Contains the machine type of the CPU your TSO session\n                      is executing on (eg: 5990)\n &SYSXDFP *       Returns the DFP release number (eg: 03030)\n &SYSXIPLAT *     Returns the date and time of the last IPL of the\n                      system (eg: IPL 1993.304 05:55:34)\n &SYSXLU *        Contains the LU name (terminal ID) of the terminal\n                      being used or null.  (eg: TD980434)\n &SYSXMVS *       Returns the MVS release number and FMID.\n                      (eg: MVS/ESA SP4.2.2 JBB4422)\n &SYSXRES *       Returns the volume serial number of the system\n                      resident volume (eg: IPL1AA)\n &SYSXSERIAL *    Contains the machine serial number of the CPU your\n                      TSO session is executing on (eg: 122767)\n &SYSXSMFID *     Contains the SMF ID of the CPU your TSO session is\n                      executing on (eg: TSO1)\n\nThe variables &SYSXACCT, &SYSXCPUH, &SYSXCPUTYPE, &SYSXDFP,\n&SYSXIPLAT, &SYSXLU, &SYSXMVS, &SYSXRES, &SYSXSERIAL, &SYSXSERIAL,\nand &SYSXSMFID are installation-written and not necessarily available\nfrom other TSO vendors or services.\n\nThe LISTDSI statement provides information about a data set's\nallocation and protection and, if the data set is partitioned, its\ndirectory.\n\nFormat:\n\n                 data-set-name   VOLUME(serial) | PREALLOC\n label: LISTDSI\n                 file-name FILE\n\n                 NODIRECTORY | DIRECTORY\n\nThe information returned is contained in the following variables:\n\n NAME             PURPOSE\n\n &LASTCC          LISTDSI return code (0=normal completion, 4=some\n                      info not available, 16=severe error)\n\n &SYSREASON       LISTDSI reason code (0=normal completion + others)\n\n &SYSMSGLVL1      First level message if error occurred\n\n &SYSMSGLVL2      Second level message if error occurred\n\n &SYSDSNAME       Data set name (eg: USE123.PDS.DATA)\n\n &SYSVOLUME       Volume serial number (eg: TSO805)\n\n &SYSUNIT         Device unit of the volume (eg: 3380)\n\n &SYSDSORG        Data set organization (eg: PO)\n\n &SYSRECFM        Record format (eg: FB)\n\n &SYSLRECL        Logical record length (eg: 80)\n\n &SYSBLKSIZE      Block size\n\n &SYSKEYLEN       Key length (eg: 0)\n\n &SYSALLOC        Allocation, in space units (eg: 15)\n\n &SYSUSED         Allocation used, in space units (eg: 10)\n\n &SYSPRIMARY      Primary allocation in space units (eg: 15)\n\n &SYSSECONDS      Secondary allocation in space units (eg: 5)\n\n &SYSUNITS        Space units (eg: TRACK)\n\n &SYSEXTENTS      Number of extents (eg: 1)\n\n &SYSCREATE       Creation date (eg: 1985/102)\n\n &SYSREFDATE      Last reference date (eg: 1986/348)\n\n &SYSEXDATE       Expiration date (eg: 0)\n\n &SYSPASSWORD     Password indication (eg: NONE)\n\n &SYSRACFA        RACF indication (eg: DISCRETE)\n\n &SYSUPDATED      Change indicator (since last backup) (eg: YES)\n\n &SYSTRKSCYL      Tracks per cylinder for unit (eg: 15)\n\n &SYSBLKSTRK      Blocks per track for unit (eg: 13)\n\n &SYSADIRBLK      Director blocks allocated for PDS (eg: 5)\n\n &SYSUDIRBLK      Directory blocks used (eg: 2)\n\n &SYSMEMBERS      Number of members in PDS (eg: 10)\n\nThe following example illustrates the use of the variables\n&SYSOUTLINE, &SYSOUTTRAP, &SYSNSUB, and &SYSINDEX:\n\nIn this example, the output from the STATUS command will be trapped\nand then listed, excluding the TSU status line.  The example is\ncommented to explain the operation.\n\n CONTROL ASIS END(XIT)        /* ASIS allows for mixed case data\n SET &SYSOUTTRAP = 200        /* Trap up to 200 lines of output\n STATUS                       /* Issue the STATUS command\n SET &T = &SYSOUTLINE         /* Save number of trapped lines\n SET &SYSOUTTRAP = 0          /* Trap no more lines of output\n SET &I = 0\n SET &CTR = 0\n WRITE\n DO WHILE &I < &T             /* Loop till all trapped lines examined\n   SET &I = &I + 1            /* Next line\n   SET &X = &SYSNSUB(2,&&SYSOUTLINE&I) /* Put trapped data in a variable\n   SET &A = &SYSINDEX(JOB,&X) /* Look for \"JOB\"\n   IF &A = 1 OR &A = 11 THEN +\n     DO\n       SET &A = &SYSINDEX(TSU,&X,11+&A) /* Look for \"TSU\"\n         IF &A = 0 THEN       /* not found */ +\n           DO\n             WRITE &X\n             SET &CTR = &CTR + 1\n           XIT\n     XIT\n    ELSE                      /* Can't find JOB anyplace */ +\n     DO\n       WRITE &X\n       SET &CTR = &CTR + 1\n     XIT\n XIT\n IF &CTR = 0 THEN +\n  WRITE You have no JOBs in the system.\n WRITE\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT201/FILE201.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT201", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}