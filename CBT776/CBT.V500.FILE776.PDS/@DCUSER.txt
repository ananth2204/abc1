#ifndef __DCUSER
#define __DCUSER /* Prevent multiple includes */
/*+--------------------------------------------------------------------<bod>+*/
/*!sys:           llq: h                                                    !*/
/*!ver: 5.3.17    (c): eho                                                  !*/
/*!-------------------------------------------------------------------------!*/
/*!desc: common user functions                                              !*/
/*              sysprint()                                                  !*/
/*              zzopen()                                                    !*/
/*              zzgoptv()                                                   !*/
/*              zzgoptk()                                                   !*/
/*              zza2e()                                                     !*/
/*              zze2a()                                                     !*/
/*              zzsprintf()                                                 !*/
/*              zzc2d()                                                     !*/
/*              zzbcd2i()                                                   !*/
/*              zzispfdate()                                                !*/
/*              zzstrupr()                                                  !*/
/*              zzmemmem()                                                  !*/
/*              zzmemrmem()                                                 !*/
/*!-------------------------------------------------------------------------!*/
/*!run: X86 MVS MVS38 MVS43                                                 !*/
/*!-------------------------------------------------------------------------!*/
/*!e1226   16/12/28     5.3.17 zzgoptv with = and del                       !*/
/*!e1226   16/09/17     5.3.16 zzgoptv with = and del                       !*/
/*!e1226   16/08/18     5.3.14 all defined MVS                              !*/
/*!e1226   16/08/03     5.02 zzbcd2i zzispdate                              !*/
/*!e1226   16/07/20     5.01 sysprint() with *NO option                     !*/
/*!e1226   16/07/20     5.01 zzc2d                                          !*/
/*!e1226   16/07/20     5.01 zzsprintf                                      !*/
/*+--------------------------------------------------------------------<eod>+*/

/**0000***********************************************************************/
/* common defs & structs                                                     */
/* - derived from hercules dasdblks.h                                        */
/**0000***********************************************************************/
typedef unsigned char  BYTE;
typedef unsigned char  HWORDÝ2¨;
typedef unsigned char  FWORDÝ4¨;

struct COPYR1 {                         /* IEBCOPY header record 1   */
        BYTE    uldfmt;                 /* Unload format             */
        BYTE    hdridÝ3¨;               /* Header identifier         */
        HWORD   ds1dsorg;               /* Dataset organization      */
        HWORD   ds1blkl;                /* Block size                */
        HWORD   ds1lrecl;               /* Logical record length     */
        BYTE    ds1recfm;               /* Record format             */
        BYTE    ds1keyl;                /* Key length                */
        BYTE    ds1optcd;               /* Option codes              */
        BYTE    ds1smsfg;               /* SMS indicators            */
        HWORD   uldblksz;               /* Block size of container   */
                                        /* Start of DEVTYPE fields   */
        FWORD   ucbtype;                /* Original device type      */
        FWORD   maxblksz;               /* Maximum block size        */
        HWORD   cyls;                   /* Number of cylinders       */
        HWORD   heads;                  /* Number of tracks/cylinder */
        HWORD   tracklen;               /* Track length              */
        HWORD   overhead;               /* Block overhead            */
        BYTE    keyovhead;              /* Keyed block overhead      */
        BYTE    devflags;               /* Flags                     */
        HWORD   tolerance;              /* Tolerance factor          */
                                        /* End of DEVTYPE fields     */
        HWORD   hdrcount;               /* Number of header records
                                           (if zero, then 2 headers) */
        BYTE    resv1;                  /* Reserved                  */
        BYTE    ds1refdÝ3¨;             /* Last reference date       */
        BYTE    ds1scextÝ3¨;            /* Secondary space extension */
        BYTE    ds1scaloÝ4¨;            /* Secondary allocation      */
        BYTE    ds1lstarÝ3¨;            /* Last track used TTR       */
        HWORD   ds1trbal;               /* Last track balance        */
        HWORD   resv2;                  /* Reserved                  */
};
/**0010***********************************************************************/
/* sysprint()                                                                */
/* write out message.                                                        */
/*  - *NO.. as 1st arg suppresses prefix procname                            */
/*  - always adds a lineend                                                  */
/*  - LINUX:                                                                 */
/*     user responsibility to provide a sufficient buffer                    */
/* - MVSxx                                                                   */
/*     max length is 255 incl. optional prefix. cut the end                  */
/*     EPUTL (CBT-Tape). Writes to DD SYSPRINT. (trappable)                  */
/* - global: __ZZPROC                                                        */
/*---------------------------------------------------------------------------*/
void sysprint(char *msg, ...) {

  char tbufÝ256¨ = "";
  int  tl;
  char *p;

  if (!memcmp(msg,"*NO",3)) {
    va_list args;
    va_start (args, msg);
    p = va_arg (args, char *);

    #if defined(MVS) || defined(MVS38) || defined(MVS43)
    vsnprintf(tbuf,255,p,args);
    tl = strlen(tbuf);
    EPUTL(tbuf,tl);
    #else
    vfprintf(stderr,p,args);
    fprintf(stderr,"\n");
    #endif

    va_end (args);
  }
  else {
    va_list args;
    va_start (args, msg);

    #if defined(MVS) || defined(MVS38) || defined(MVS43)
    sprintf(tbuf,"%-8.8s: ",__ZZPROC);
    vsnprintf(tbuf+10,255-10,msg,args);
    tl = strlen(tbuf);
    EPUTL(tbuf,tl);
    #else
    fprintf(stderr,"%-8.8s: ",__ZZPROC);
    vfprintf (stderr,msg, args);
    fprintf(stderr,"\n");
    #endif

    va_end (args);
  }

  return;
}
/**0020***********************************************************************/
/* zzopen:                                                                   */
/*---------------------------------------------------------------------------*/
FILE * zzopen(char *name,char *fopt, ...) {

  FILE *fh;
  char bufÝ256¨;
  char tbufÝ256¨;
  char dsnÝ60¨;
  char ddnÝ9¨;

  va_list args;
  va_start (args,fopt);
  vsprintf (buf,fopt,args);
  va_end (args);

  #if defined(MVS) || defined(MVS38) || defined(MVS43)
  if (!memcmp(buf+strlen(buf)-2,"DD",2)) sprintf(dsn,"//DDN:%s",name);
  else                                   sprintf(dsn,"//DSN:%s",name);

  fh = fopen(dsn,buf);
  //  printf("zzopen: (%d) (%s) (%s)\n",fh,dsn,buf);
  //  __get_tmpddn(name,ddn);
  #else
                                  // additional options don't bother '
  fh = fopen(name,buf);
  //  printf(">> %d %s %s\n",fh,name,buf);
  #endif

  return fh;
}
/**0030***********************************************************************/
/* zzgoptv()                                                                 */
/* get opt value                                                             */
/* rc=0 not found                                                            */
/* rc=1     found                                                            */
/*   -- delimÝ0¨ is start                                                    */
/*   -- delimÝ1¨ is end   (optional)                                         */
/* format: mem=member1                                                       */
/*         mem='member1 member2'       !! bash gcc getopt hk                 */
/*---------------------------------------------------------------------------*/
int zzgoptv(char *key,char *dlm,char *src,char *tgt,int tl) {

  int i,j,of,ln;
  char b;
  char wbufÝ255¨;
  char kbufÝ255¨;

  of = strlen(key);
  ln = strlen(src);

  strncpy(wbuf,src,255-1);
  for (i=0;i<ln;i++) wbufÝi¨ = toupper(wbufÝi¨);
  strncpy(kbuf,key,255-2);

  kbufÝof¨   = dlmÝ0¨;
  kbufÝof+1¨ = 0x0;
  if (memcmp(kbuf,wbuf,of)) return 0;
/*
  j = 0; b = 0;
  for (i=of+0;i < ln; i++) {
    if (j >= tl) break;
    if      (srcÝi¨ == dlmÝ0¨)          { b++; tgtÝj¨ = srcÝi¨; j++; }
    else if (srcÝi¨ == dlmÝ1¨ && b > 0) { b--; tgtÝj¨ = srcÝi¨; j++; }
    else if (srcÝi¨ == dlmÝ1¨ && b ==0) break;
    else                                {      tgtÝj¨ = srcÝi¨; j++; }
  }
*/
  j = 0; b = 0;
  for (i=of+0;i < ln; i++) {
    tgtÝj¨ = srcÝi¨; j++;
  }


  fprintf(stderr,"SRC:%s* DLM:%s* OF:%d KEY:%s* VAL:%s*\n",src,dlm,of,key,tgt);

  return 1;
}
/**0040***********************************************************************/
/* zzgoptk()                                                                 */
/* get opt keyonly                                                           */
/* rc=0 not found                                                            */
/* rc=1     found                                                            */
/*---------------------------------------------------------------------------*/
int zzgoptk(char *key,char *src) {

  int i,j,of,ln;
  char b;
  char wbufÝ255¨;

  of = strlen(key);
  ln = strlen(src);
  if (of != ln) return 0;

  strncpy(wbuf,src,255);

  for (i=0;i<ln;i++) wbufÝi¨ = toupper(wbufÝi¨);
  if (memcmp(key,wbuf,of)) return 0;

  return 1;
}
/*****************************************************************************/
/* DCSTRUCM                                                                  */
/*   compare string upper (insensitive)                                      */
/*****************************************************************************/
static int dcstrucm (const char *str1, const char *str2) {

  int k,l1,l2;

  l1 = strlen(str1);
  l2 = strlen(str2);
  if (l1 != l2) return 1;

  for (k = 0; k < l1; k++) {
    if ((str1Ýk¨ | 32) != (str2Ýk¨ | 32))
    break;
  }
  if (k != l1) return 1;

  return 0;
}
/*****************************************************************************/
/* DCTOKEN                                                                   */
/*   1: string                                                               */
/*   2: value                                                                */
/*   3: search                                                               */
/*   rc: 0   key not found (value is UNDETERMINED !!)                        */
/*   rc: > 0 key found. rc is TOKEN NUMBER                                   */
/*****************************************************************************/
int dctoken(char *in,char *out,char *kmatch) {

  int kno = 0;
  int prc = 0;
  int i;
  int ix;
  int k;
  unsigned char   cc;
  unsigned char   cd;
  unsigned char   cx;                       // control bracket pairs inside
  unsigned char   aa   = 'O';
  unsigned char   nn   = 'K';
  //                                        /* this is stable for asc & ebc */
  #if defined X86
  unsigned char   ddÝ¨ = {0x22,0x28,0x27,0x0};  // "('   /* ' */
  #endif
  #if defined MVS
  unsigned char   ddÝ¨ = {0x7F,0x4D,0x7D,0x0};  // "('   /* ' */
  #endif

  ix = strlen(in);
  k  = 0;
  cd = ' ';

  for (i = 0; i <= ix; i++) {
    cc = inÝi¨;
    if (i == ix) cc = ' ';   // force last key/value decision
    /******************************************************************/
    /* OUTSIDE                                                        */
    /******************************************************************/
    if (aa == 'O') {
                        /* delim string start. is a value             */
      if (strchr(dd,cc)) {
        aa = 'I';
        if (cc == '(') cd = ')';
        else           cd = cc;
        nn = 'V';
        cx = 0;
      }
                        /* spc outside. nothing happens               */
      else if (cc == ' ') {
      }
                        /* equal outside means next is a VALUE        */
      else if (cc == '=') {
        nn = 'V';
        cx = 0;
      }
                        /* spc delimited string starts. Maybe V or K  */
      else {
        if (nn == 'K' && prc) {
          if (!dcstrucm(kmatch,out)) outÝ0¨ = 0x0;   // delete old str if kyonly
  //      printf("DCTOKEN: %d I<%s> O<%s> M<%s>\n",prc,in,out,kmatch);
          return prc;
        }
        aa = 'I';
        cd = ' ';
        //                                  /* this is a key                */
        outÝk¨   = cc;
        outÝk+1¨ = 0x0;
        k++;
      }
    }
    /******************************************************************/
    /* INSIDE                                                         */
    /******************************************************************/
    else {
                        /* spacedelim string. spc stops and next is V */
      if (cd == ' ' && strchr(dd,cc)) {
        k = 0;
        /* do closing for cd & cd_space */
        if (nn == 'K') kno++;
        if (nn == 'K' && !dcstrucm(kmatch,out)) prc = kno;

                               /* now a new delim string              */
        aa = 'I';
        if (cc == '(') cd = ')';
        else           cd = cc;
        nn = 'V';
        cx = 0;
      }
                        /* spacedelim string. = stops and next is V   */
      else if (cd == ' ' && cc == '=') {
        aa = 'O';
        k  = 0;
        cd = ' ';
        /* do closing for cd & cd_space */
        if (nn == 'K') kno++;
        if (nn == 'K' && !dcstrucm(kmatch,out)) prc = kno;

        nn = 'V';
        cx = 0;
      }
      //                /* Brackets inside String UP                  */
      else if (cc == '(') {
        cx++;
        outÝk¨   = cc;
        outÝk+1¨ = 0x0;
        k++;
      }
      //                /* Brackets inside string DOWN (CLOSE)        */
      else if (cc == ')' && cx > 0 ) {
        cx--;
        outÝk¨   = cc;
        outÝk+1¨ = 0x0;
        k++;
      }
                        /* delimited string. delim stops. nxt MUST KEY*/
      else if (cc == cd) {
        aa = 'O';
        k  = 0;
        cd = ' ';
        /* do closing for cd & cd_space */
        if (nn == 'K') kno++;
        if (nn == 'K' && !dcstrucm(kmatch,out)) prc = kno;

        nn = 'K';
      }
                        /* inside string. go on                       */
      else {
        if (nn == 'K' && prc) {
          if (!dcstrucm(kmatch,out)) outÝ0¨ = 0x0;   // delete old str if kyonly
  //      printf("DCTOKEN: %d I<%s> O<%s> M<%s>\n",prc,in,out,kmatch);
          return prc;
        }
        outÝk¨   = cc;
        outÝk+1¨ = 0x0;
        k++;
      }
    }
  }

  if (!dcstrucm(kmatch,out)) outÝ0¨ = 0x0;   // delete old str if kyonly
//printf("DCTOKEN: %d I<%s> O<%s> M<%s>\n",prc,in,out,kmatch);
  return (prc);
}
/*****************************************************************************/
/* DCPRMKYO                                                                  */
/*   parameter keyonly                                                       */
/*   arg 1: parm to search on                                                */
/*   arg 2: default                                                          */
/*   arg 3: alternate                                                        */
/*   prc: 0 not found                                                        */
/*   prc: 1 last fit for primary   (superseeds alternate                     */
/*   prc: 2 last fit for alternate (superseeds default)                      */
/*****************************************************************************/
int dcprmkyo(char *p,char *key1,char *key2) {

  int prc = 0;
  int r1,r2;
  char outÝ200¨;

  r1 = dctoken(p,out,key1);
  r2 = dctoken(p,out,key2);

  if (r1 > r2   )        prc = 1;
  else if (r2 > r1   )   prc = 2;
  else                   prc = 0;

return(prc);
}
/*****************************************************************************/
/* DCPRMKVL                                                                   /
/*   parameter value for key                                                  /
/*   arg 1: parm to search on                                                 /
/*   arg 2: key                                                               /
/*   arg 3: default value                                                     /
/*   arg 4: output                                                            /
/*   prc: 0 not found                                                         /
/*   prc: other: found value for key                                          /
/*****************************************************************************/
int dcprmkvl(char *p,char *key,char *def,char *val) {

  int prc = 0;
  int rc;
  char outÝ200¨;

  rc = dctoken(p,out,key);


  if (rc == 0 ) {
    strcpy(val,def);
    prc = 0;
  }
  else {
    strcpy(val,out);
    prc = rc;
  }

return(prc);
}
/**0050***********************************************************************/
/* zza2e                                                                     */
/*  convert string to ebcdic                                                 */
/*---------------------------------------------------------------------------*/
void zza2e(void *in,int l) {

  char *p;
  int i;
  unsigned char oc,nc;

  static unsigned char ta2e Ý¨ = {
                                             /*    ¨+0 +1 +2 +3 +4 +5 +6 +7 */
    0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F, /* 00 ¨                        */
    0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F, /* 00 ¨                        */
    0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26, /* 10 ¨                        */
    0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F, /* 18 ¨                        */
    0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D, /* 20 ¨SP                      */
    0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61, /* 28 ¨                        */
    0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7, /* 30 ¨ 0  1  2  3  4  5  6  7 */
    0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F, /* 38 ¨ 8  9                   */
    0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7, /* 40 ¨    A  B  C  D  E  F  G */
    0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6, /* 48 ¨ H  I  J  K  L  M  N  O */
    0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6, /* 50 ¨ P  Q  R  S  T  U  V  W */
    0xE7,0xE8,0xE9,0xAD,0xE0,0xBD,0x9A,0x6D, /* 58 ¨ X  Y  Z                */
    0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87, /* 60 ¨    a  b  c  d  e  f  g */
    0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96, /* 68 ¨ h  i  j  k  l  m  n  o */
    0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6, /* 70 ¨ p  q  r  s  t  u  v  w */
    0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0x5F,0x07, /* 78 ¨ x  y  z                */
    0x20,0x21,0x22,0x23,0x24,0x15,0x06,0x17, /* 80 ¨                        */
    0x28,0x29,0x2A,0x2B,0x2C,0x09,0x0A,0x1B, /* 88 ¨                        */
    0x30,0x31,0x1A,0x33,0x34,0x35,0x36,0x08, /* 90 ¨                        */
    0x38,0x39,0x3A,0x3B,0x04,0x14,0x3E,0xE1, /* 98 ¨                        */
    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48, /* a0 ¨                        */
    0x49,0x51,0x52,0x53,0x54,0x55,0x56,0x57, /* a8 ¨                        */
    0x58,0x59,0x62,0x63,0x64,0x65,0x66,0x67, /* b0 ¨                        */
    0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75, /* b8 ¨                        */
    0x76,0x77,0x78,0x80,0x8A,0x8B,0x8C,0x8D, /* c0 ¨                        */
    0x8E,0x8F,0x90,0x6A,0x9B,0x9C,0x9D,0x9E, /* c8 ¨                        */
    0x9F,0xA0,0xAA,0xAB,0xAC,0x4A,0xAE,0xAF, /* d0 ¨                        */
    0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7, /* d8 ¨                        */
    0xB8,0xB9,0xBA,0xBB,0xBC,0xA1,0xBE,0xBF, /* e0 ¨                        */
    0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xDA,0xDB, /* e8 ¨                        */
    0xDC,0xDD,0xDE,0xDF,0xEA,0xEB,0xEC,0xED, /* f0 ¨                        */
    0xEE,0xEF,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF, /* f8 ¨                        */
  };

  for (i = 0;i<l;i++) {
    p = &((char *)in)Ýi¨;
    oc = *p;
    nc = ta2eÝoc¨;
    ((unsigned char *)in)Ýi¨ = nc;
  }

  return;
}
/**0060***********************************************************************/
/* zze2a:                                                                    */
/*  convert string to ascii                                                  */
/*---------------------------------------------------------------------------*/
void zze2a(void *in,int l) {

  char *p;
  int i;
  unsigned char oc,nc;

  int te2aÝ256¨= {
                                             /*    ¨+0 +1 +2 +3 +4 +5 +6 +7 */
    0x00,0x01,0x02,0x03,0x9C,0x09,0x86,0x7F, /* 00 ¨                        */
    0x97,0x8D,0x8E,0x0B,0x0C,0x0D,0x0E,0x0F, /* 00 ¨                        */
    0x10,0x11,0x12,0x13,0x9D,0x85,0x08,0x87, /* 10 ¨                        */
    0x18,0x19,0x92,0x8F,0x1C,0x1D,0x1E,0x1F, /* 18 ¨                        */
    0x80,0x81,0x82,0x83,0x84,0x0A,0x17,0x1B, /* 20 ¨                        */
    0x88,0x89,0x8A,0x8B,0x8C,0x05,0x06,0x07, /* 28 ¨                        */
    0x90,0x91,0x16,0x93,0x94,0x95,0x96,0x04, /* 30 ¨                        */
    0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x1A, /* 38 ¨                        */
    0x20,0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6, /* 40 ¨SP                      */
    0xA7,0xA8,0xD5,0x2E,0x3C,0x28,0x2B,0x7C, /* 48 ¨                        */
    0x26,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, /* 50 ¨                        */
    0xB0,0xB1,0x21,0x24,0x2A,0x29,0x3B,0x7E, /* 58 ¨                        */
    0x2D,0x2F,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7, /* 60 ¨                        */
    0xB8,0xB9,0xCB,0x2C,0x25,0x5F,0x3E,0x3F, /* 68 ¨                        */
    0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,0xC0,0xC1, /* 70 ¨                        */
    0xC2,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22, /* 78 ¨                        */
    0xC3,0x61,0x62,0x63,0x64,0x65,0x66,0x67, /* 80 ¨    a  b  c  d  e  f  g */
    0x68,0x69,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9, /* 88 ¨ h  i                   */
    0xCA,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70, /* 90 ¨    j  k  l  m  n  o  p */
    0x71,0x72,0x5E,0xCC,0xCD,0xCE,0xCF,0xD0, /* 98 ¨ q  r                   */
    0xD1,0xE5,0x73,0x74,0x75,0x76,0x77,0x78, /* a0 ¨       s  t  u  v  w  x */
    0x79,0x7A,0xD2,0xD3,0xD4,0x5B,0xD6,0xD7, /* a8 ¨ y  z                   */
    0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, /* b0 ¨                        */
    0xE0,0xE1,0xE2,0xE3,0xE4,0x5D,0xE6,0xE7, /* b8 ¨                        */
    0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47, /* c0 ¨    A  B  C  D  E  F  G */
    0x48,0x49,0xE8,0xE9,0xEA,0xEB,0xEC,0xED, /* c8 ¨ H  I                   */
    0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50, /* d0 ¨    J  K  L  M  N  O  P */
    0x51,0x52,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3, /* d8 ¨ Q  R                   */
    0x5C,0x9F,0x53,0x54,0x55,0x56,0x57,0x58, /* e0 ¨       S  T  U  V  W  X */
    0x59,0x5A,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9, /* e8 ¨ Y  Z                   */
    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37, /* f0 ¨ 0  1  2  3  4  5  6  7 */
    0x38,0x39,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF, /* f8 ¨ 8  9                   */
  };

  for (i = 0;i<l;i++) {
    p = &((char *)in)Ýi¨;
    oc = *p;
    nc = te2aÝoc¨;
    ((unsigned char *)in)Ýi¨ = nc;
  }

  return;
}
/**0070***********************************************************************/
/* zzsprintf()                                                               */
/*   combined strcat & sprintf                                               */
/*---------------------------------------------------------------------------*/
void zzsprintf(char *pbuf,char *msg, ...) {

  int i;
  char *p;

  va_list args;
  va_start (args, msg);
  i = strlen(pbuf);
  p = pbuf+i;

  vsprintf (p,msg, args);
  va_end (args);

  return;
}
/**0080***********************************************************************/
/* zzc2d()                                                                   */
/* - convert character bytes to integer (decimal)                            */
/*---------------------------------------------------------------------------*/
int zzc2d(unsigned char *p, int len) {

  int            bin =0, i;
  unsigned char  one;

  for (i=0; i<len;i++) {
    one = * (unsigned char *) p;
    bin = (bin * 256) + (int) one;
    p++;
  }

  return bin;
}
/**0090***********************************************************************/
/* zzbcd2i()                                                                 */
/* - BCD convert packed decimal bytes to integer                             */
/* - 12345C -> int 12345                                                     */
/*---------------------------------------------------------------------------*/
int zzbcd2i(unsigned char *pd,int len) {

  int i,j, n1;
  unsigned int num;

  j=1;
  num = 0;
  for (i=len-1;i>=0;i--) {
    n1 = (i%2) ? pdÝi/2¨ % 16 : pdÝi/2¨ / 16;
    num += n1*j;
    j *= 10;
  }
  return num;
}
/**0100***********************************************************************/
/* zzispfdate()                                                              */
/*   0X YY DD DF --> YYYYMMDD                                                */
/*   mmdd                                                                    */
/*---------------------------------------------------------------------------*/
int zzispfdate(int yyyy,int ddd) {

  int i,j,k,rc = 0;
  int mmÝ12¨ = {31,29,31,30,31,30,31,31,30,31,30,31};

  if (yyyy%4)       mmÝ1¨ = 28;
  if (!(yyyy%400))  mmÝ1¨ = 28;

  j = 0;
  for (i=0;j+mmÝi¨< ddd;i++) {
    j = j + mmÝi¨;
  }

  i = i + 1;
  j = ddd -j;

  return i*100+j;
}
/**0110***********************************************************************/
/* zzstrupr()                                                                */
/*   local strupr                                                            */
/*****************************************************************************/
void zzstrupr(char *str) {

  int i;

  for (i=0;strÝi¨ != 0x0;i++) strÝi¨ = toupper(strÝi¨);

  return;
}
/**0120***********************************************************************/
/* zzmemmem()                                                                */
/*   search byte array                                                       */
/*   hitchhiked from GNU                                                     */
/*****************************************************************************/
void *zzmemmem (const void *hs, size_t hs_len,const void *nee,size_t nee_len) {

  const char *begin;
  const char *const last_possible = (const char *) hs + hs_len - nee_len;

  if (nee_len == 0)
    /* The first occurrence of the empty string is deemed to occur at
       the beginning of the string.  */
    return (void *) hs;

  /* Sanity check, otherwise the loop might search through the whole
     memory.  */
  if (hs_len < nee_len)
    return NULL;

  for (begin = (const char *) hs; begin <= last_possible; ++begin)
    if (beginÝ0¨ == ((const char *) nee)Ý0¨ &&
   !memcmp ((const void *) &beginÝ1¨,
       (const void *) ((const char *) nee + 1),
       nee_len - 1))
      return (void *) begin;

  return NULL;
}
/**0130***********************************************************************/
/* zzmemrmem()                                                               */
/*   search byte array LAST OCCURENCE                                        */
/*****************************************************************************/
int zzmemrmem (const void *hs, size_t hs_len,const void *nee,size_t nee_len) {

  int j = 0;
  const unsigned char *pp;

  while (1) {
    pp = zzmemmem(hs,hs_len,nee,nee_len);
    if (!pp) break;
    hs_len = hs_len - (pp-(const unsigned char *)hs) -1;
    j = pp - (const unsigned char *)hs;
    pp++;
  }

 return j;
}
#endif
/**eoc ***********************************************************************/
