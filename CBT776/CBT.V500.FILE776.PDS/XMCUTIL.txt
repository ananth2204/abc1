/*+---------------------------------------------------------------------<bod>+*/
/*!sys: SINM      llq: SOURCE                                                !*/
/*!ver: 0.1.18    (c): E1226                                                 !*/
/*!--------------------------------------------------------------------------!*/
/*!desc: XMC decode different File Formats                                   !*/
/*!--------------------------------------------------------------------------!*/
/*!arg: see below                                                            !*/
/*!run: TSO / X86                                                            !*/
/*!--------------------------------------------------------------------------!*/
/*!E1226   28/12/16     0.1.18 RECFM=V    reworked                           !*/
/*!E1226   28/12/16     0.1.17 RECFM=F    reworked IGWFAHR EATTR both out    !*/
/*!E1226   23/12/16     0.1.16 RECFM=F    reworked                           !*/
/*!E1226   20/12/16     0.1.15 RECFM=U    reworked                           !*/
/*!E1226   20/10/16     0.1.14 IGWFAHR                                       !*/
/*!E1226   03/10/16     0.1.13 RECFM=U                                       !*/
/*!E1226   03/10/16     0.1.13 RECFM=F                                       !*/
/*!E1226   03/10/16     0.1.13 EATTR                                         !*/
/*!E1226   03/10/16     0.1.11 parm processing complete                      !*/
/*!E1226   02/10/16     0.1.10 parm processing complete                      !*/
/*!E1226   02/10/16     new mod creation                                     !*/
/*+---------------------------------------------------------------------<eod>+*/
// #define X86
// #define LINUX
   #define MVS
   #define MVS43

#define __ZZPROC "xmcutil"
#define __ZZVER "0.1.18"

#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#if defined X86
#include "@dcuser.h"   /* mine */
#endif
#if defined MVS
#include "@dcuser"     /* mine */
#endif

#define __BUILD __ZZPROC" (c) eho 2016 Version "__ZZVER"  Build " \
        __DATE__" "__TIME__
//                                     /* build a POSIX comaptible parm env  */
//                                     /* parm keys are always upper case    */
//                                     /* parm values remain sensitive       */
#define PARMKEYU
#if defined X86
#define GPP    "--"
#define GDM    "??" //
#define GEQ    "="  // keyvalue =
#define GWBL 4096
#define G1   512
#endif
#if defined MVS
#define GPP    ""
#define GDM    "()" //
#define GEQ    ""   // keyvalue = not applicable
#define GWBL 4096
#define G1   60
#endif
//
char ggdsni ÝG1+1¨= "";          // XMI File
char ggdsno ÝG1+1¨= "";          // Output DSN for Extract
//
int  ggnomsg      = 0;           // no msg
int  ggcode       = 0;           // ascii / ebcdic conv
int  ggunblock    = 0;           // strip trailing ascii spaces
int  ggpad        = 0;           // add spaces to end of line
int  ggrep        = 0;           // replace output flag
unsigned char ggrecfm = 'F';     // recfm
int  gglrecl      = 80;          // lrecl
//************
//                               /* Macro Ascii Convert                      */
#if defined X86
#define ZZXE2A(a,b) zze2a(a,b)
#else
#define ZZXE2A(a,b)
#endif
//
/*****************************************************************************/
/* F U N C T I O N S  COMMON                                                 */
/**0110***********************************************************************/
/* xxopen()                                                                  */
/*   open a file                                                             */
/*****************************************************************************/
FILE * xxopen(char *fname,char *fopts) {

  FILE *fh;
  unsigned char optsÝ30¨;

  #if defined X86
  fh = 0; fh = zzopen(fname,fopts);
  #else
  zzstrupr(fname);
  fh = NULL;

//printf("** fname: (%s) (%s) **\n",fname,fopts);

  if      (!memcmp(fname,"DD:",3)) {
    sprintf(opts,"%s,DD",fopts);
    fh = zzopen(fname+3,opts);
//  printf("xxopen: (%d) (%s) (%s) **\n",fh,fname,opts);
  }
  else if (!memcmp(fname,"//DDN:",6)) {
    sprintf(opts,"%s,DD",fopts);
    fh = zzopen(fname+6,opts);
//  printf("xxopen: (%d) (%s) (%s) **\n",fh,fname,opts);
  }
  else fh = zzopen(fname,fopts);
  #endif

  return fh;
}
/**0120***********************************************************************/
/* xxstrip()                                                                 */
/*   strip quotes                                                            */
/*****************************************************************************/
 int  xxstrip(char *buf, char *quote) {
  int i,j,l;
  j = 0;
  l = strlen(buf);
  for (i=0;i<l;i++) {
    if (bufÝi¨ != quoteÝ0¨) {bufÝj¨ = bufÝi¨; j++;}
    else bufÝj¨ = 0x00;
  }
  return strlen(buf);
}
/**0200***********************************************************************/
/* do_msg()                                                                  */
/* - common message formatting and suppression                               */
/*****************************************************************************/
int do_msg(int rc,char *msg, ...) {

  char tbufÝ256¨ = "";

  va_list args;
  if (ggnomsg) return (rc);
  va_start (args, msg);

  vsnprintf(tbuf+0,256-0,msg,args);
  sysprint("*NO",tbuf);

  va_end (args);
  return (rc);
}
/**0210***********************************************************************/
/* do_copen()                                                                */
/* - conditional open                                                        */
/*****************************************************************************/
FILE * do_copen(char *fname) {

  static FILE *fo;

  int i,j,k,m,rc=0,prc=0;char *prn="do_copen";      /* commons               */

  if (!fnameÝ0¨) goto EE;               /* no filename procided              */
  /***************************************************************************/
  if (!ggrep) {
    fo = xxopen(ggdsno,"rb");
    if (fo) {
      prc=do_msg(8,"XMU0302E Replace not specified for %s.",ggdsno);
      fclose(fo);
      fo = NULL;
      goto EE;
    } // >> else no open file
  }

  // ***************                /* here we can open safe write   */
  fo = xxopen(ggdsno,"wb");
  if (!fo) {
    prc=do_msg(8,"XMU0303E Open Failed Output %s.",ggdsno);
    fo = NULL;
    goto EE;
  }
  /***************************************************************************/
  EE:
  return (fo);
}
/**0220***********************************************************************/
/* do_blocks()                                                               */
/* - work with file contents                                                 */
/*****************************************************************************/
int do_blocks() {

  int i,j,k,m,n,q,rc=0,prc=0;char *prn="do_blocks"; /* commons               */

  FILE *fi = NULL;                                  /*                       */
  FILE *fo = NULL;                                  /*                       */
  FILE *fhi;
  FILE *fho;

  #define BS   32760                                /* BS*3 > MBUF !!        */
  #define MBUF 400                                  /* MBUF GT IGWL          */
  int bsz = 0, mbuf= 0, bszx =0;

  char *sbuf = NULL;
  char *pbuf = NULL;
  char sin = 0;                                     /* flag sysin read       */

  char igwÝ¨ = {0xC9,0xC7,0xE6,0xC6,0xC1,0xC8,0xD9,0x40,0x00,0x00,0x00,0x2C};
  #define IGWL 12
  char *sp = 0; char *pp;
  int fl, sl, wl;                                   /* file length, eapos    */
  unsigned char c;
  int bi,bo,bx;
  int bb, br;
  /***************************************************************************/
  //                                  /* Normalize Buffers to lrecl          */
  bsz  = (BS / gglrecl) * gglrecl;
  mbuf = (MBUF / gglrecl) * gglrecl; if (mbuf < MBUF) mbuf = mbuf + gglrecl;
  bszx = bsz + mbuf;

  sbuf=malloc(bszx);
  if (!sbuf) {prc=do_msg(12,"XMU0200S Malloc Error %s.",prn);goto EE;}
  pbuf=malloc(bszx);
  if (!pbuf) {prc=do_msg(12,"XMU0200S Malloc Error %s.",prn);goto EE;}

  if (ggdsniÝ0¨ == '-' && ggdsniÝ1¨ == 0x00) sin = 1;


  if (!sin) {
    fi = xxopen(ggdsni,"rb");
    if (!fi) {prc=do_msg(8,"XMU0301E Open Failed Input (%s).",ggdsni);goto EE;}
    fhi = fi;
  }
  else fhi = stdin;
  /***************************************************************************/
  //                                  /* open & determine output direction   */
  fo = do_copen(ggdsno);
  if (ggdsnoÝ0¨ && !fo) {prc = 8; goto EE; }
  //                                  /* if fo is now NULL we assume stdout  */
  //                                  /* no implicit correct to 1. we must   */
  //                                  /* assure TSO DD SYSPRINT              */
  if (!fo) prc=do_msg(0,"XMU0004I Output Destination is stdout.");
  else     prc=do_msg(0,"XMU0005I Output File is %s.",ggdsno);
  //                                  /* assure TSO DD SYSPRINT              */
  if (!fo) fho = stdout;
  else     fho = fo;
  /***************************************************************************/
  //                                  /* RECFM=U (we do it for raw)          */
  if (ggrecfm == 'U') {
    bi = gglrecl;
    if (bsz < bi) bi = bsz;
    bo = 0;

    while (1) {
      rc = fread(pbuf,1,bsz,fhi);
      if (!rc) break;

      for (i=0;i<rc;i=i+bi) {
        if (rc-i < bi) bi = rc - i;
        m = fwrite(pbuf+i,1,bi,fho);
        bo = bo + m;
      }
    }
    bx = bo;
  }
  /***************************************************************************/
  //                                  /* RECFM=F                             */
  if (ggrecfm == 'F') {
    bi = gglrecl;
    bo = 0;
    bx = 0;

    while (1) {
      rc = fread(pbuf,1,bsz,fhi);
      if (!rc) break;

      for (i=0;i<rc;i=i+bi) {
        if (rc-i < bi) bi = rc - i;

        if (ggcode) zze2a(pbuf+i,bi);

        q = bi;
        if (ggunblock) {
                                               /* we are ascii here          */
          for (j=bi-1;j>=0;j--) if ((pbuf+i)Ýj¨ != 0x20) break;
          j++;
          q = j;
        }

        m  = fwrite(pbuf+i,1,q,fho);
        bx = bx + m;

        if (ggunblock) {fwrite("\n",1,1,fho); bx++;}
        bo = bo + bi;
      }
    }
  }
  /***************************************************************************/
  //                                  /* RECFM=V                             */
  if (ggrecfm == 'V') {
    bi = gglrecl;
    bo = 0;
    bx = 0;

    while (1) {
      rc = fread(pbuf,1,4,fhi); if (!rc) break;
      bb = zzc2d(pbuf,2);
//    sysprint("Block %d",bb);
      if (!bb) break;
      rc = fread(pbuf,1,bb-4,fhi); if (!rc) break;
      bo = bo+rc+4;

      i = 0;
      while (i < bb-4) {
        br = zzc2d(pbuf+i,2);
//      sysprint("Record %d",br);
        if (ggcode) zze2a(pbuf+i+4,br-4);
        if (!ggpad) {
          rc = fwrite(pbuf+i+4,1,br-4,fho);
          bx = bx + rc;

          if (ggunblock) {fwrite("\n",1,1,fho); bx++;}
        }
        else {
          memset(sbuf,' ',gglrecl);
          memcpy(sbuf,pbuf+i+4,br-4);
          rc = fwrite(sbuf,1,gglrecl,fho);
          bx = bx + rc;
        }
        i = i + br;
      }
    }
  }
  /***************************************************************************/
  prc=do_msg(0,"XMU0006I Wrote %d Bytes (unblocked %d).",bo,bx);
  /***************************************************************************/
  EE:
  if (sbuf)   free(sbuf);
  if (fi)     fclose(fi);
  if (fo)     fclose(fo);
  return (prc);
}
/**0910***********************************************************************/
/* showopts()                                                                */
/* write out options                                                         */
/*****************************************************************************/
 void showopts() {

  do_msg(0,"XMU0001I Options specified:");
  do_msg(0,"+  P1         : %s",ggdsni);
  do_msg(0,"+  NOMSG      : %d",ggnomsg);
  do_msg(0,"+  ASCII      : %d",ggcode);
  do_msg(0,"+  REPLACE    : %d",ggrep);
  do_msg(0,"+  LRECL      : %d",gglrecl);
  do_msg(0,"+  UNBLOCK    : %d",ggunblock);
  do_msg(0,"+  PAD          %d",ggpad);
  do_msg(0,"+  RECFM      : %c",ggrecfm);
  do_msg(0,"+  ODS        : %s",ggdsno);

  return;
}
/**0920***********************************************************************/
/* showhelp()                                                                */
/* write out help                                                            */
/*****************************************************************************/
void showhelp() {

  int i;
  char *pÝ¨ = {
   "XMCUTIL pos1 < opts >                                                   "
  ,"                                                                        "
  ,"  where opts are:                                                       "
  ,"       pos1:         a single unloaded member or dataset expanded with  "
  ,"                     XMCLIST.                                           "
  ,"                 -   hyphen for stdin                                   "
  ,"                                                                        "
  ,"       opts:         optional parameters.                               "
  ,"                                                                        "
  ,"         --nomsg     Suppress messages                                  "
  ,"         --ascii     Convert to ASCII                                   "
  ,"         --unblock   strip trailing spaces of record (add CRLF)         "
  ,"         --vpad      pad trailing spaces to the record (RECFM(V) only)  "
  ,"         --replace   Clopper output                                     "
  ,"         --lrecl=    Input LRECL. Default 80                            "
  ,"         --recfm=    Input RECFM. Default U                             "
  ,"         --ods=      Named Output File. Default is stdout               "
  ,"                                                                        "
  ,"  for TSO --key(value) should be KEY(VALUE)                             "
  ,"                                                                        "
  ,__BUILD
  ,0x0
  };

  for (i=0;pÝi¨ != 0x0; i++) sysprint("*NO","%s",pÝi¨);

  return;
}
/*****************************************************************************/
/* M A I N                                                                   */
/*   - retrieve all blocks from a dataset. combine segments to a complete    */
/*   - control flow of blocks                                                */
/*   xmcutil mem.bin --lrecl=80 --recfm=f --ascii --unblock                  */
/*---------------------------------------------------------------------------*/
/* G:  gginfile   string                                                     */
/* G:  ggnomsg    switch                                                     */
/* G:  ggcode     switch                                                     */
/* G:  ggeattr    switch                                                     */
/* G:  ggunblock  switch                                                     */
/* G:  gglrecl    int                                                        */
/* G:  ggrecfm    char                                                       */
/* G:  ggeattr    switch                                                     */
/*****************************************************************************/
int  main(int argc, char ** argv) {

  int rc,prc = 0;
  int i,j,k,m;
  char abufÝ255¨ = "";
  char lbufÝ60¨;

  #define CBL 1025

  char *cbuf,*obuf;
  /***************************************************************************/
  cbuf=malloc(CBL); if (!cbuf) {rc=200;goto EE;}
  obuf=malloc(CBL); if (!obuf) {rc=200;goto EE;}

  //**************************************************************************/
  //*                                  /* Validation                         */
  //                                   /* (2) HELP & VERSION                 */
  cbufÝ0¨ = 0x0;
  for (i=1;i<argc;i++) {
    if ( (strlen(cbuf) + strlen(argvÝi¨)) +1 > CBL) break;
    strcat(cbuf,argvÝi¨); strcat(cbuf," ");
  }
  #if defined MVS
  zzstrupr(cbuf);
  #endif
  rc = dcprmkyo(cbuf,GPP"HELP",GPP"NOHELP");
  if (rc == 1) {showhelp(); prc = 0     ; goto EE;}
  rc = dcprmkyo(cbuf,GPP"VERSION",GPP"NOVERSION");
  if (rc == 1) {prc = do_msg(0,__BUILD); goto EE;}
  //***************************************************************************
  //                                   /* (1) positional arg first           */
  if (argc > 1) strncpy(ggdsni,argvÝ1¨,G1);
  //                                   /* all other are optional and handled */
  //                                   /* in a cmdstring                     */
  //                                   /* (3) KEY ONLY PARMS                 */
  rc = dcprmkyo(cbuf,GPP"MSG"    ,GPP"NOMSG");      if (rc == 2) ggnomsg = 1;
  rc = dcprmkyo(cbuf,GPP"ASCII"  ,GPP"EBCDIC");     if (rc == 1) ggcode  = 1;
  rc = dcprmkyo(cbuf,GPP"UNBLOCK",GPP"BLOCK");      if (rc == 1) ggunblock= 1;
  rc = dcprmkyo(cbuf,GPP"PAD"    ,GPP"NOPAD");      if (rc == 1) ggpad    = 1;
  rc = dcprmkyo(cbuf,GPP"REPLACE",GPP"NOREPLACE" ); if (rc == 1) ggrep   = 1;
  //                                   /* (4) KEY VALUE PARMS                */
  rc = dcprmkvl(cbuf,GPP"LRECL","80",obuf);
  if (rc) {
    gglrecl= atoi(obuf);
    if (gglrecl < 80)    gglrecl = 80;
    if (gglrecl > 32760) gglrecl = 32760;
  }

  rc = dcprmkvl(cbuf,GPP"RECFM","F",obuf);
  if (rc) {
    ggrecfm = toupper(obufÝ0¨);
    if (ggrecfm != 'V' && ggrecfm != 'F' && ggrecfm != 'U' ) ggrecfm = 'F';
  }

 if (ggrecfm != 'V' && ggpad ) {
   prc=do_msg(0,"XMU0008W PAD w/o RECFM(V) makes mo sense.");
   ggpad = 0;
 }
 // if (ggrecfm == 'U') gglrecl = 0;

  rc = dcprmkvl(cbuf,GPP"ODS","",obuf);       if (rc) strncpy(ggdsno,obuf,G1);
  rc = dcprmkvl(cbuf,GPP"ODIR","",obuf);      if (rc) strncpy(ggdsno,obuf,G1);
  rc = dcprmkvl(cbuf,GPP"OUTDATASET","",obuf);if (rc) strncpy(ggdsno,obuf,G1);

  #if defined MVS
  strupr(ggdsni);     xxstrip(ggdsni,"'");//'
  strupr(ggdsno);     xxstrip(ggdsno,"'");//'
  #endif
  //**************************************************************************/
  //*                                  /* Validation                         */

  if (!ggnomsg) showopts();
  //                                  /* Always Alloc for TTR                */
  rc = do_blocks();
  prc = rc;
  /***************************************************************************/
  EE:
  if (obuf) free(obuf);
  if (cbuf) free(cbuf);
  prc=do_msg(prc,"Returncode (%d).",prc);
  return (prc);

}
/* eoc ***********************************************************************/
