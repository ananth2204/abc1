         Macro
.*-
.* $LA - build LA instruction (inner macro)
.*
.* Returns length in a global variable, length either defined by the
.* 2rd operand, or computed from the 2nd operand.
.* Syntax:
.*   $la  r1,label      -> la    r1,label
.*   $la  r1,,label     -> la    r1,label
.*   $la  r1,number     -> lgfi  r1,nnn
.*   $la  r1,4(,r3)     -> la    r1,4(,r3)                -> length=0
.*   $la  r1,(r2)       -> lr    r1,r2                    -> length=0
.*   $la  r1,'kilroy'   -> la    r1,=c'kilroy'
.*   $la  r1,0          -> slr   r1,r1                    -> length=0
.*   $la  r1,x.label    -> lx    r1,label  (x: B, F or H) -> length=0
.* The length is returned in global variable $lalen, the type in
.* global variable $latype.
.*
.* updates
.* 2017-14-03  numeric value now different from label
.* 2018-06-16  2rd operand is now alternate src, not global length
.*-
&mlbl    $la   &reg,&psrc,&pasrc,&pasrc2,&glen=,&src2=
         lcla  &n,&l
         lclc  &s,&c,&r,&srct,&srcl,&src
         gbla  &$lalen
         gblc  &$lalitlenc
&$lalitlenc setc ''
         gblc  &$latype
&$lalen  seta  0
.* select source
         aif   (k'&psrc   gt 0).setsrc1
         aif   (k'&pasrc  gt 0).setsrc2
         aif   (k'&pasrc2 gt 0).setsrc3
         aif   (k'&src2   gt 0).setsrc4
         mnote  8,'** $LA mising source'
.setsrc1 anop
&src     setc  '&psrc'
         ago   .setsrcn
.setsrc2 anop
&src     setc  '&pasrc'
         ago   .setsrcn
.setsrc3 anop
&src     setc  '&pasrc2'
         ago   .setsrcn
.setsrc4 anop
&src     setc  '&src2'
.setsrcn anop
.*
&s       setc  Upper('&src')
         aif   ('&s   '(1,3) eq 'L''''').litlen
&srct    setc  t'&src
&srcl    setc  Lower('&src')
.* mnote *,'type &srct'
.*-
.* what kind of 1st operand do we have?
.*-
         aif   (k'&src gt 0).cp1
         mnote 8,'src operand missing'
         mexit
.cp1     aif   ('&src '(2,1) eq '.').load
         aif   ('&src' eq '0').clr          clear register
         aif   ('&src'(1,1) eq '(').reg     register
         aif   ('&src'(1,1) eq '''').txt    text
         aif   ('&srct' eq 'N').num        number
         ago   .lbl
.*- src is 0, means clear reg
.clr     anop  ,
&$latype setc  'CLR'
&mlbl    slr   &reg,&reg
         mexit
.*- src is a number
.num     anop  ,
&$latype setc  'NUM'
&mlbl    lgfi  &reg,&src
&$lalen  seta  &src
         mexit
.*- src is a label or address
.lbl     anop  ,                           label
&$latype setc  'LBL'
&mlbl    la    &reg,&src
&c       setc  t'&src
         aif   ('&c' ne 'A').setl0
&n       seta  l'&src
&$lalen  seta  &n
         mexit
.*- src is a register
.reg     anop  ,                           register
&$latype setc  'REG'
&n       seta  (k'&src)-2
&s       setc  '&src'(2,&n)
&mlbl    lr    &reg,&s
&$lalen  seta  1                            default
         mexit
.*- src is text
.txt     anop  ,
&$latype setc  'TXT'
&s       setc  '=c&src'
&mlbl    la    &reg,&s
&n       seta  (k'&src)-2
&$lalen  seta  &n
&$lalitlenc setc  '&n'
         mexit
.*- load from storage
.load    anop  ,
.* mnote *,'load'
&c       setc  Upper('&srcl'(1,1))
&n       seta  (k'&src)-2
&s       setc  '&src'(3,&n)
&$latype setc  'LFS'
&$lalen  seta  0
         aif   ('&c' eq 'F' or '&c' eq 'A').loadf
         aif   ('&c' eq 'H').loadh
         aif   ('&c' eq 'B').loadb
         mnote 8,*** invalid load parm &c'
         mexit
.loadf   anop  ,
&mlbl    l     &reg,&s                     load from fullword
         mexit
.loadh   anop  ,
&mlbl    lh    &reg,&s                     load from halfword
         mexit
.loadb   anop  ,
&mlbl    sr    &reg,&reg
         ic    &reg,&s                     load from byte
         mexit
*-
.litlen  anop
&n       seta  (k'&src)-4
&$lalen  seta  &n
         la    &reg,&n                     length of literal
         mexit
*-
.setl0   anop
&$lalen  seta  0
.x       Mend
