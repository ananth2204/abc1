         Macro
.*
.* Setup module start - basereg, working storage etc.
.*
.* base=(reg1Ý,reg2Ý,reg3¨¨)      setup up to 3 baseregs
.* work=(length,label,reg)        acquire dynamic storage
.* work24=(length,label,reg)      acquire dynamic 24-bit storage
.* sa=label | *Ýn¨                save area label or inline
.* prolog=address                 address of prolog subroutine
.* epilog=address                 address of epilog subroutine
.* endÝ,rc=value¨                 return via epilog
.* returnÝ,rc=value¨              return via epilog
.*
.* Changelog
.* 2018-10-27  rc value for end can be syslist(2) i.e #module end,123
.* 2018-11-26  4th parm of work/work24 can be set to 'C' => clear stg
.*
.*
&mlbl    #MODULE &p1,&amode=31,&rmode=ANY,&text=,&rc=,&date=E,         c
               &base=r12,&sa=,&work=,&work24=,&sp=*future*,            c
               &prolog=,&epilog=,&xprolog=,&xepilog=
.*-
         gblb  &#modequ
         gbla  &iezbits
         gblc  &#modname,&#modrmod,&#modamod
         lcla  &n,&m
         lclc  &s,&l,&base1,&base2,&base3,&d,&d1,&d2,&d3
         lclc  &worksz,&workrg,&worklb,&workloc,&workclr
&l        setc  '#M&sysndx'
          aif   (k'&p1 eq 0).nop1
&s        setc  Upper('&p1')
          aif   ('&s' eq 'END' or '&s' eq 'RETURN'                     c
               or '&s' eq 'EXIT').end
          mnote 8,'*** Invalid p1'
          mexit
.nop1     anop
          aif   (k'&mlbl gt 0).lblok
          mnote 8,'*** Missing label'
          mexit
.lblok    anop
&#modname setc  '&mlbl'
&#modamod setc  '&amode'
&#modrmod setc  '&rmode'
&base1    setc  '&base(1)'
&base2    setc  '&base(3)'
&base3    setc  '&base(4)'
&worksz   setc  '&work(1)&work24(1)'
&worklb   setc  '&work(2)&work24(2)'
&workrg   setc  '&work(3)&work24(3)'
&workclr  setc  Upper('&work(4)&work24(4)')
&workloc  setc  '&amode'
          aif   (n'&work24 eq 0).worklocn
&workloc  setc  '24'
.worklocn anop
.*-
.* Equate regs and bits
.*-
         push  print
         print off
&n       seta  0
         aif   (&#modequ).equregn  bits allready set
&#modequ setb  1
.equreg  anop
r&n      equ   &n
&n       seta  &n+1
         aif   (&n le 16).equreg
.equregn anop
         aif   (&iezbits ne 0).equbitn  bits allready set
         IEZBITS
.equbitn anop
         pop   print
*-
* Module start
*-
&mlbl    amode &amode
&mlbl    rmode &rmode
&mlbl    Csect
         bakr  14,0
         sam&amode
*setup base register(s)
         lr    &base1,r15
         using &mlbl,&base1
         aif   (n'&base eq 1).basen
         lr    &base(2),&base(1)
         alfi  &base(2),4096
         using &mlbl.+4096,&base(2)
         aif   (n'&base eq 2).basen
         lr    &base(3),&base(2)
         alfi  &base(3),4096
         using &mlbl.+8192,&base(3)
.basen   anop
         j     &l.idn
&d       setc  '&sysdate'
&d1      setc  '&d'(1,2)
&d2      setc  '&d'(4,2)
&d3      setc  '&d'(7,2)
         aif   ('&date' eq 'E').datee
         ago   .daten
.datee   anop
&d       setc  '20&d3-&d1-&d2'
.daten   anop
         aif   (k'&text eq 0).id
&n       seta  k'&text
&s       setc  '&text'(2,&n-2)
&mlbl._id dc    c'&mlbl &d &systime &s'
         ago   .idl
.id      anop
&mlbl._id dc    c'&mlbl &d &systime'
.idl     anop
&mlbl._idl equ   *-&mlbl._id
&l.idn   ds    0a
.*-
.* get working storage
.*-
         aif   ('&worksz' eq '').workn
         mnote *,'obtain storage, length=&worksz,loc=&workloc'
         Storage OBTAIN,length=&worksz,loc=&workloc
         aif   (k'&workrg eq 0).workn
         lr    &workrg,r1
.* clear storage
         aif   ('&workclr' ne 'C').clrstrn
         lr    r0,r1                   target
         lgfi  r1,&worksz              target length
         la    r14,=al1(0)             source
         la    r15,1                   source length
         mvcl  r0,r14                  clear storage
.clrstrn anop
.*
         aif   (k'&worklb eq 0).workn
         using &worklb,&workrg
.workn   anop
.*-
.* setup save area
.*-
         aif   (k'&sa eq 0).saven
*setup save area
         aif   ('&sa '(1,1) eq '*').saveint
         la    r13,&sa
         ago  .saven
.saveint cnop  0,4
&s       setc  '1'
&n       seta  k'&sa
         aif   (&n eq 1).savein2
&s       setc  '&sa'(2,&n-1)
.savein2 bas   r13,*+(&s*72)+4         address internal save area
         ds    (&s*18)a                internal save area
.saven   anop
.*-
.* setup prolog
.*-
         aif   (k'&prolog ne 0).prologl
         aif   (k'&xprolog ne 0).prologv
         ago   .prologn
.prologl larl  r15,&prolog             prolog address
         ago   .prologc
.prologv l     r15,=v(&xprolog)        prolog address
.prologc basr  r14,r15                 call prolog
.prologn anop
         j     &l.X
.*-
.* setup termination
.*-
* module termination
&mlbl._X cnop  0,4
.*-
.* setup epilog
.*-
         aif   (k'&epilog eq 0 and k'&xepilog eq 0).epilogn
         lr    r2,r15                  copy rc
         aif   (k'&epilog ne 0).epilogl
         aif   (k'&epilog ne 0).epilogl
         aif   (k'&xepilog ne 0).epilogv
         ago   .epilogn
.epilogl larl  r15,&epilog             epilog address
         ago   .epilogc
.epilogv l     r15,=v(&xepilog)        epilog address
.epilogc basr  r14,r15                 call epilog
.epilogn anop
         aif   ('&worksz' eq '').xworkn
         mnote *,'release storage, length=&worksz,addr=&workrg'
         lr    r2,r15
         Storage RELEASE,length=&worksz,addr=(&workrg)
         lr    r15,r2
.xworkn  pr    ,
* end of termination
&l.X     ereg  0,1                     reload regs 0 and 1
*-
* End of module start
*-
         Mexit
.*-
.* return
.*-
.end     anop
&s       setc  '&syslist(2)'
&mlbl    $la   r15,&rc,&s,0
         j     &#modname._X
         Mend
