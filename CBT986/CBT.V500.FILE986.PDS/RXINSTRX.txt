/* ------------------------------------------------------------ REXX

 name  : RXINSTRX
 desc  : Allow a REXX program to be supplied instream, instead of
         having to be a pds member.
 parms :
 input : Libref REXX contains the REXX program.
 sample JCL
  //GO       EXEC PGM=IKJEFT1B,PARM=RXINSTRX
  //SYSEXEC  DD  DISP=SHR,DSN=your.exec.lib
  //         DD  DISP=SHR,DSN=rxinstrm.exec.lib
  //SYSTSPRT DD  SYSOUT=*
  //SYSTSIN  DD  DUMMY
  //REXX     DD  *
    say 'hello world'

 history:
 2019-01-04  rename to RXINSTRM->RXINSTRX so it can be shipped in the
             same lib as the procedure RXINSTRM.
 2016-10-16  add parm REXDD=ddname
 2014-03-30  major rewrite

 ------------------------------------------------------------------ */

 parse arg prm
 rxdd='REXX'
 if left(translate(prm),7)='REXXDD=' then do
   parse var prm . '=' rxdd prm
 end
 Address TSO

 /*-------------------------------------------------------------------
                            allocate temp pds
 --------------------------------------------------------------------*/
 tempname='zzz'right(time('s'),5,0)
 cc=bpxwdyn('alloc new rtddn(rxinddn) rtdsn(rxindsn)',
             'da(&&rxinstrm('rxinname')',
             'lrecl(80) recfm(f,b) blksize(0)',
             'tracks space(8,8) dir(8) dsorg(po) unit(vio)')
 if cc<>0 then call close 8  "Alloc temppds failed" cc

 /*-------------------------------------------------------------------
                write inline REXX to temp pds and run it
 --------------------------------------------------------------------*/
 "Execio * diskr" rxdd "(stem data. finis)"
 if rc<>0 then call close 8  "Read data failed" rc
 if pos('REXX',translate(data.1))=0 then,      /* add REXX if not     */
   data.1=left(strip(data.1,'t'),72)'/*rexx*/' /* already there       */
 parse value 1+data.0 1+data.0 ' Exit 0' with n data.0 data.n
 "execio" data.0 "diskw" rxinddn "(stem data. finis)"   /* save */
 if rc<>0 then call close 8  "write temp failed" rc

 "ex '"rxindsn"("rxinname")' '"prm"'"
 if datatype(rc)='NUM' then if rc<>0 then call close rc
 call close 0

 /*-------------------------------------------------------------------
                                terminate
 --------------------------------------------------------------------*/
Close:
 cc=BpxWdyn("free dd("rxinddn")")
 parse arg _rc _msg
 if _msg<>'' then say _msg
 _rc=word(_rc 0,1)
 Exit _rc
