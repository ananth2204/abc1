z/OS COBOL Adaptation of the regex.h (EBCDIC) from the IBM Run-Time C Library
-----------------------------------------------------------------------------
Copyright Â© 2015 Ze'ev Atlas
Version 8.35.1519, Februry 2015

Preamble. License
-----------------
The software described herein is an Adaptation of the regex.h from the IBM
Run-Time C Library to COBOL COPYBOOKS for use in EBCDIC oriented COBOL on z/OS.
It is distributed under the same BSD license under my name.  This license
covers each and every file in this package, including this document.

-------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

    * Neither the name of Ze'ev Atlas nor the names of any contributors may be
	used to endorse or promote products derived from this software without
	specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------

0. Documentation and what's new
-------------------------------
Notes for Version 1:
1. Please note the structure from the demo program.
       01 RM1-match.
          05 FILLER OCCURS 4.
        copy regmtche replacing ==:PREFIX:== BY ==RM1==.
   The need for integral boundary of a fullword is mandatory and is enforced
   within the structure by the use of SYNCHRONIZED keyword.  If you fail to
   adjust for it as prescribed, your program may fail.
2. There are two versions of the demo program.  REGEXDEM is a bona-fide z/OS
   COBOL that compiles and run with Enterprise COBOL 5.1 without any issue.  It
   is meant for 32 bit compile (which is the default in z/OS).  REGEXDEA would
   run with much older versions of Enterprise COBOL and with Open COBOL 1.1.
   See note below about Open COBOL and GNU COBOL issues.
3. There appears to be an issue with the call sequence in the Open/GNU compiler
   , it looks like that passing a 64 bit number 'by value' does not work
   correctly.  That means that you may not get substring offsets correctly, so
   for now, only the match/no match functionality is available.  The GNU COBOL
   team is aware of the issue and will look into it.
4. The demo program was extended to demonstrate using regcomp options.  The
   program tries to match small and capital letters without ignoring the case,
   causing the expected no match result.  Than it repeats the exercise while
   ignoring the case for the desired results:
0000000364
match
0000000000
0000000015
a Simple string
0000000002
0000000008
Simple

NOT IGNORING CASE
no match

IGNORING CASE
match
0000000000
0000000015
a Simple string
0000000002
0000000008
Simple

5. Due to popular demand, I've added a few copybooks and renamed others.  There
   are now two versions of the regex copybook, three versions of the regext
   copybook and two versions of the regmtch copybook.  Here is a full list and
   an explanation about the usage:
   5.1. z/OS EBCDIC usage.
      regexe.cpy is the IBM EBCDIC oriented adaptation of the first part of the
	  regex.h file.  It is to be used with the IBM run-time library functions,
	  whether EBCDIC or ASCII.
	  regexte.cpy is the IBM EBCDIC oriented adaptation of the regex_t
	  structure.
	  regmtche.cpy is the IBM EBCDIC oriented adaptation of the regmatch_t
	  structure.
   5.2. z/OS ASCII usage.
      I assume that this usage would be rather rare, but I developed the
	  components anyway.
      regexe.cpy is used as above.
      regextai.cpy is the IBM ASCII oriented adaptation of the regex_t
	  structure.
      regmtcha.cpy is used as below (see explanation below.)
   5.3. GNU usage.
      regexa.cpy is the GNU oriented adaptation of the first part of the
	  regex.h file.  It is to be used with the GNU library functions.
	  regexta.cpy is the GNU oriented adaptation of the regex_t structure.
	  regmtcha.cpy is the GNU POSIX oriented adaptation of the regmatch_t
	  structure.
   I know that it is somewhat confusing, but this was the only way to
   accommodate different and convoluted implementation of the POSIX standard.
5. An additional copybook regsyntx.cpy is added for those who may want use the
   GNU optional syntax options (really semantic options.)  This copybook is not
   really necessary and is heavily GNU sourced so I publish it like the
   original under the LGPL license.  It is not available in the XMI file.
6. I've added a copybook named dumpmem.cpy. that contains a program to dump
   memory.  It is used in the demo program as a nested program but could be
   compiled independently and used as a general callable program.

This document attempts to explain z/OS COBOL Adaptation of the regex.h (EBCDIC)
from the IBM Run-Time C Library.

02/20/2015: First release.

1. Rationale
------------
The purpose of this little package is to help standardize the communication
between z/OS COBOL and the C run-Time Regular Expression matching functionality
that is commonly available on z/OS systems.  After porting the PCRE library to
native classic z/OS I've got many reactions, ranging from the non-serious
"Nobody ever requested such functionality" to the deeply serious "Management
would never allow usage of Open Source".  These two arguments are troubling
because they are symptoms of the stagnant culture that I was trying to change
to begin with.  Those who hold the first view, are usually people who would
resist any change, but for the latter issue there is a built in solution.

This package is the answer for that last argument.  Regular Expression matching
functionality, POSIX style, is available in the C Run-Time library that is
available and used by all.  The standard JCL for COBOL compile, link and go
refers to that library as well.

Interfacing that library is done by including C header files in the C source
code which would be useless in COBOL.  Hence this adaptation of the regex.h to
COBOL COPYBOOKS.

Now, I am not the first one and not the only COBOL programmer who've used this
functionality.  I've found on the internet and got advise from people who use
this functionality on regular basis and in production environments.  What most
of them seem to do is to use the match/no-match aspect (i.e. does the string
that I am checking match the pattern or not.)  But they tend not to use the
capture aspect (i.e. ..., and by the way, if it matches, give me the substring
that does.)  My demo program shows how to use that functionality as well.

2. The Adaptation
-----------------
My intended audience are people who code in COBOL on the z/OS platform and that
means that the character set is EBCDIC and that currently the COBOL version
(including 5.1) is 32 bit implementation.  Viewing IBMers' remarks on the
IBM-MAIN forum indicates that this won't change in the next few years.  Based
on these facts, I've examined the regex.h header file and adapted it into COBOL
COPYBOOKS.  I strictly adapted the EBCDIC oriented variation of the structures,
and I strictly looked at long type as if it was a 32 bit entity.

There is one caveat though: a strict look at the regex.h header file reveals
that one of the structures uses two pairs of long and short variables (i.e. one
fullword, followed by a halfword, followed by another fullword and another
halfword.  The real structure that is returned by the library function seems to
by two pairs of two fullwords.  I compensated for that in the copybook.

3. Usage
--------
For proper usage, please consult with the IBM publication: "z/OS XL C/C++
Runtime Library Reference" which is freely available on the internet.  Please
refer to the documentation about these functions:
regcomp() ? Compile regular expression
regerror() ? Return error message
regexec() ? Execute compiled regular expression
regfree() ? Free memory for regular expression

Some of those functions may accept options via a fullword cflags which should
be left as zero until you become proficient in regular expressions usage.  The
most useful flag is REG-ICASE that instruct the function to be case
insensitive.  If using more than one flag add them once to a PIC S9(9) COMP
variable after moving zero to that variable:
           MOVE ZERO TO MY-CFLAGS
           ADD REG-ICASE TO MY-CFLAGS
		   ... and now use MY-CFLAGS.
When calling the function, use the returning clause to REG-ERROR-CODE that is:
available in the REGEX COPYBOOK.
           CALL ... RETURNING REG-ERROR-CODE
so you can take advantage of the 88 level names associated with that variable.

The enclosed sample program REGEXDEM shows the appropriate usage of all those
functions and the three COPYBOOKS.  It matches a simple pattern with one simple
capturing group and shows how to extract the captured string.

The output of this program is:

0000000364
match
0000000000
0000000015
a simple string
0000000002
0000000008
simple

I originally dumped the regex_t element using my DUMPMEM function (not included
her) with this sample image:

00 00 00 01 19 9A 15 48 00 00 00 01 00 00 00 00 |..... . ........
00 00 00 0F 00 00 00 FF 19 9A 15 48 19 9A 15 49 |......... . . .
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................
19 9A 15 56 19 9A 15 53 00 00 00 00 00 00 00 00 |. . . . ........
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................
00 00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................
01 01 01 01 01 01 01 01 00 00 00 01             |............

I also dumped the regmatch_t array:

00 00 00 00 00 00 00 00 00 00 00 0F 00 00 00 00 |................
00 00 00 02 00 00 00 00 00 00 00 08 00 00 00 00 |................

4. In this distribution
-----------------------
standard_zOS_COBOL_REGEX_COPY(v0).txt -this document file.
regex.cpy - contains the static variables of regex.h.
regext.cpy - represents the regex_t structure.  Using the REPLACING clause is
   mandatory and allow creating multiple instances of the structure.
regmtch.cpy - represents the regmatch_t structure.  Note that I started that
   structure in level 10, so the user must supply some level (e.g. 05) above it
   in order to allow for OCCURS clause.  Using the REPLACING clause is
   mandatory and allow creating multiple instances of the structure.
REGEXDEM.cob - is the demo program.
LICENSE.txt - BSD license document.

All files but this one (the documentation) are ready as input for IEBUPDTE.
Upload them to the mainframe and add them as input to something like:

// SET PARMHLQ=HLQ  <=== Your high level qualifier
// SET PARMMLQ=MLQ  <=== Your middle level qualifier
// SET PARMLLQ=LLQ  <=== Your low level qualifier
// SET IFILE=input file name
//UPDTE EXEC PGM=IEBUPDTE
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR
//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR
//SYSIN    DD  DSN=&IFILE,DISP=SHR

where HLQ.MLQ.LLQ is your COPYBOOK library.
Since the files are in ASCII, they should be uploaded to the mainframe while
translating ASCII to EBCDIC.  Loading ASCII text into an EBCDIC environment
could be challenging.  In many cases you do not have any control on the
codepage, no use of FTP or other issues.  I for example, had to use the
venerable IND$FILE with whatever defaults set by the System Programmer to whom
I had no access.  If you have access to FTP, you could try using something
like:
Sbdataconn=(ibm-1047,iso8859-1)
or
Sbdataconn=(ibm-037,iso8859-1)
where the ibm-xxxx denotes your specific IBM codepage.

5. A Few Words About Regular Expressions and Capturing
------------------------------------------------------
I have no intention to give here a full or even partial guide to Regular
Expressions.  The internet is full of such guides, some of them are better than
anything I could ever come with.  Here is a list of three sites I've found,
using Google, that seem to be good enough for beginners:
http://www.zytrax.com/tech/web/regex.htm
two lines URL:
http://www.smashingmagazine.com/2009/06/01/essential-guide-to-regular-
expressions-tools-tutorials-and-resources/
http://www.georgehernandez.com/h/xComputers/Programming/RegularExpressions.asp

I would also not discuss too much the differences between the Perl style
Regular Expressions that are provided by my port of the PCRE library and the
POSIX standard.  You may read about it in the URL below:
http://eli.thegreenplace.net/2012/11/14/some-notes-on-posix-regular-expressions

The main difference as far as I am concerned manifests itself when you are
using the capture feature of Regular Expression.  Perl style tends to return
the first instance of a match and POSIX would return the longest match.  Since
IBM z/OS is now POSIX compliant, their functions use that standard and this is
what we are stuck with.

In order to find and capture IP address (in the old IPv4 standard) one may use
something like (this is a very simplified example - an accurate one would look
much more intimidating to the novice):
\b(?:Ã0-9Â¨{1,3}\.){3}Ã0-9Â¨{1,3}\b
If you apply this pattern to a text line like:
05 TEST-FOR-IP PIC X(80) VALUE
      'My internal IP address is 192.168.1.110, the external one is a secret'.
offset 012345678901234567890123456789012345678901234567890123456789012345678
the regexec function will tell you that you have a match al-right, but in order
to actually capture the IP address you need to change the pattern slightly and
add parentheses around the group that you want to capture:
\b((?:Ã0-9Â¨{1,3}\.){3}Ã0-9Â¨{1,3})\b
If you tell regexec that you are interested in two subexpressions in the third
parameter and supply an array of two REGMATCH-T structures, you would get as a
result this array (offset starts from zero):

00000000  \                <=== zero - offset of start of string TEST-FOR-IP
xxxxxxxx  |                <=== unimportant
          > first array element
00000048  |                <=== 72 - offset of end of string TEST-FOR-IP
xxxxxxxx  /                <=== unimportant
---------
0000001A  \                <=== 26 - offset of start of IP within TEST-FOR-IP
xxxxxxxx  |                <=== unimportant
          > second array element
00000026  |                <=== 38 - offset of end of IP within TEST-FOR-IP
xxxxxxxx  /                <=== unimportant

Note that the first element in the array always points to the whole input
string.  The second element corresponds to the first capturing parentheses and
so on.

Using the COBOL code below would display the captured IP address (assuming that
you have prefixed the regmatch-t names with RM1-)
display TEST-FOR-IP (RM1-rm-so(2) + 1:RM1-rm-eo(2) - RM1-rm-so(2)).
