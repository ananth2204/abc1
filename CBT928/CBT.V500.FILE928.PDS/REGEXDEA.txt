      ****************************************************************
      * This file is a demonstration program of using the IBM, POXIX *
      * compliant, runtime library implementation of Regular         *
      * Expressions pattern matching functions in COBOL.  I would try*
      * to demonstrate the usage of the various copybooks that where *
      * created from breaking the regex.h and how to capture a       *
      * matched substring in the match structure.                    *
      * Adaptation of a COBOL program was written by Frank Swarbrick *
      * Note: leading underscores in a name are marked with U        *
      *       other underscores converted to dashes                  *
      * This file works GNUCOBOL 1.1 and on z/OS, just remember to   *
      * change the copybook combination for the appropriate env.     *
      * In GNUCobol 2.x one may uncomment the directives, restore    *
      * the 'usage long binary' and z constants and work with ASCII. *
      ****************************************************************
      *
      * Copyright (c) 2015 Ze'ev Atlas
      * Please refer to the LICENSE document to see all other
      * applicable copyrights.
      *
      *---------------------------------------------------------------
      *Redistribution and use in source and binary forms, with or
      *without modification, are permitted provided that the following
      *conditions are met:

      * 1. Redistributions of source code must retain the above
      * copyright notice, this list of conditions and the following
      * disclaimer.

      * 2. Redistributions in binary form must reproduce the above
      * copyright notice, this list of conditions and the following
      * disclaimer in the documentation and/or other materials
      * provided with the distribution.

      * 3. Neither the name of Ze'ev Atlas nor the names of other
      * contributors may be used to endorse or promote
      * products derived from this software without specific prior
      * written permission.

      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      *CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      * Note about this implementation
      * The original IBM go to a long distance to create either
      * separate regext and regmatch structures, one for ASCII and one
      * for EBCDIC, or default to one of them.  I went only for the
      * separate option and created two versions for completenesee.
      * Since this implementation is geared towards EBCDIC, one should
      * probably always use the EBCDIC version (file and structure
      * name end with 'e'.  There is a default value that is not used
      * anyway but is defaulted to the EBCDIC anyway.
      ****************************************************************
      ****process nodynam pgmname(mixed)
      *    process codepage(1047)
       identification division.
       program-id.  'REGEXDEA'.
       data division.
       working-storage section.
      * This brings in all constants.
      *>>IF EBCDIC IS DEFINED
         copy regexe.
      *>>ELSE
      *  copy regexa.
      *>>END-IF
      * RE1-regex-t-e is the regex_t structure.  Using the replacing
      * clause allow for multiple instances.
      *>>IF EBCDIC IS DEFINED
        copy regexte replacing ==:PREFIX:== BY ==RE1==.
      *>>ELSE
      * copy regexta replacing ==:PREFIX:== BY ==RE1==.
      *>>END-IF
      * The below construct is puzzling for me.  Theoretically
      * regmatc-t-e should have worked, but the result is clearly
      * regmatch-t-a.  Moreover, it looks like the first element
      * of the first element of that construct behaves as if it was
      * int (32 bits) while the rest of the elements behave as if
      * they were long (64 bits).  I created the convoluted construct
      * below to overcome this issue, but I certainly need to
      * investigate it!
       01 RM1-match.
      * RM1-regmatch-t is the regmatch_t structure.  Using the
      * replacing clause allow for multiple instances.
          05 FILLER OCCURS 4.
      * Please, always put the 05 level first after the 01 level to
      * ensure correct integral boundary and that the 01 level name
      * is the name of the whole array.  If you choose to use a
      * different structure, please remember that the copybook starts
      * with level 10 and that it must be on integral boundary of
      * a fullword.
      *>>IF EBCDIC IS DEFINED
        copy regmtche replacing ==:PREFIX:== BY ==RM1==.
      *>>ELSE
      * copy regmtcha replacing ==:PREFIX:== BY ==RM1==.
      *>>END-IF

       01  msgbuf              display   pic x(100).

       01 my-string            PIC X(255).
       01 my-pattern           PIC X(255).
       01 my-ptr               usage pointer.
       01 my-len               PIC s9(9) comp-5.
       01 my-opt               PIC s9(9) comp-5.
      *01 two usage binary-long value 2.
       01 two                  pic s9(9) comp-5 value 2.
       01 two64                pic s9(18) comp-5 value 2.
      *01 azero usage binary-long value 0.
       01 azero                pic s9(9) comp-5 value 0.
      *01 thirty-two usage binary-long value 32.
      *01 sixty-four usage binary-long value 64.
       01 sixty-four           pic s9(9) comp-5 value 64.

       procedure division.
           string 'a Simple string' delimited by size
                  x'00' delimited by size
                  into my-string
           string '.*(Simple).*' delimited by size
                  x'00' delimited by size
                  into my-pattern
           end-string
           move LENGTH OF RE1-regex-t to my-len
           call 'regcomp' using RE1-regex-t
      *                         content z'.*(Simple).*'
                                by reference my-pattern
                                value REG-EXTENDED
                returning REG-ERROR-CODE
           display 'my-len= ' my-len
           display 'dump RE1-regex-t'
           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL
           if REG-ERROR-CODE is not equal to zero
               display 'Could not compile regex'
               display REG-ERROR-CODE
               stop run
           end-if
           call 'regexec' using RE1-regex-t
                                my-string
      *                         value two64
                                value two
                                by reference RM1-match
                                value azero
                returning REG-ERROR-CODE
           display 'dump RM1-match'
           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL
           perform check-reti

           call 'regfree' using RE1-regex-t
      * Now coompile with small letters and don't ignore case
           display ' '
           display 'NOT IGNORING CASE'
           move zero to my-opt
           add REG-EXTENDED to my-opt
      * Pattern with lower case, string with upper case
           string '.*(simple).*' delimited by size
                  x'00' delimited by size
                  into my-pattern
           end-string
           call 'regcomp' using RE1-regex-t
      *                         content z'.*(simple).*'
                                by reference my-pattern
                                value my-opt
                returning REG-ERROR-CODE
           display 'dump RE1-regex-t'
           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL
           if REG-ERROR-CODE is not equal to zero
               display 'Could not compile regex'
               display REG-ERROR-CODE
               stop run
           end-if
           call 'regexec' using RE1-regex-t
                                my-string
                                value two
                                by reference RM1-match
                                value 0
                returning REG-ERROR-CODE
           display 'dump RM1-match'
           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL
           perform check-reti

           call 'regfree' using RE1-regex-t
      * Now coompile with small letters and ignore case
           display ' '
           display 'IGNORING CASE'
           move zero to my-opt
           add REG-EXTENDED to my-opt
           add REG-ICASE    to my-opt
      * Pattern with lower case, string with upper case
           call 'regcomp' using RE1-regex-t
      *                         content z'.*(simple).*'
                                by reference my-pattern
                                value my-opt
                returning REG-ERROR-CODE
           display 'dump RE1-regex-t = '
           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL
           if REG-ERROR-CODE is not equal to zero
               display 'Could not compile regex'
               display REG-ERROR-CODE
               stop run
           end-if
           call 'regexec' using RE1-regex-t
                                my-string
                                value two
                                by reference RM1-match
                                value 0
                returning REG-ERROR-CODE
           display 'dump RM1-match'
           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL
           perform check-reti

           call 'regfree' using RE1-regex-t
           goback.

       check-reti.
           evaluate REG-ERROR-CODE
           when zero
               display 'match'
               display 'RM1-rm-so(1)= ' RM1-rm-so(1)
      *        display RM1-rm-ss(1)
               display 'RM1-rm-eo(1)= ' RM1-rm-eo(1)
      *        display RM1-rm-es(1)
               display my-string (RM1-rm-so(1) + 1:
                       RM1-rm-eo(1) - RM1-rm-so(1))
               display 'RM1-rm-so(2)= ' RM1-rm-so(2)
      *        display RM1-rm-ss(2)
               display 'RM1-rm-eo(2)= ' RM1-rm-eo(2)
      *        display RM1-rm-es(2)
               display my-string (RM1-rm-so(2) + 1:
                       RM1-rm-eo(2) - RM1-rm-so(2))
           when 1
               display 'no match'
           when other
      *        move length of msgbuf to lmsgbuf
               call 'regerror' using RE1-regex-t
                                     msgbuf
                                     value length of msgbuf
                    returning REG-ERROR-CODE
               display 'Regex match failed: '
               display REG-ERROR-CODE
               display msgbuf
               stop run
           end-evaluate
           .
           copy dumpmem.
       end program 'REGEXDEA'.

