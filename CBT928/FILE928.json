{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013458000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE928.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE928.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x04'", "DS1TRBAL": "b'\\xc3^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\tZ\\x00\\x05\\tZ\\x00\\n\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x006\\x01\\x15\\to\\x01\\x15\\to\\x00&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-04-06T00:00:00", "modifydate": "2015-04-06T00:26:36", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  928\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE928\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,780 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/06/15    00:26:35    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00C\\x01\\x15\\x05?\\x01\\x15\\x05? A\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2015-02-22T00:00:00", "modifydate": "2015-02-22T20:41:43", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Standard z/OS COBOL copybooks for regex.h\nFrom:     Ze'ev Atlas <zatlas1@yahoo.com>\nDate:     2/22/2015 2:16 PM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHi Sam\nThis little package is an adaptation of the regex.h header file\nto COBOL copybooks.  By using these copybooks and the standard\nIBM C Run-time library (that is available in all z/OS machines as\nfar as I can tell), one may do pattern matching using Regular\nExpression from COBOL.  I am not the first or only person who\nuses this capability.  My contribution is by providing standard\ncopybooks and explaining how to use the 'Capture' capability in\naddition to the common 'Match' capability.\n\nOne has now a common interface to these functions:\nregcomp()   Compile regular expression\nregerror()  Return error message\nregexec()   Execute compiled regular expression\nregfree()   Free memory for regular expression\n\nZe'ev Atlas\n\nAttachments:\nstandard_zOS_COBOL_REGEX_COPY(v0).zip    14.9 KB\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE928": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00&\\x01\\x15\\to\\x01\\x15\\to\\x00&\\x00$\\x00$\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-04-06T00:00:00", "modifydate": "2015-04-06T00:26:26", "lines": 36, "newlines": 36, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 928 is from Ze'ev Atlas and contains some code which      *   FILE 928\n//*           is an adaptation of the regex.h header file to        *   FILE 928\n//*           COBOL copybooks.  This is V1 of the package.          *   FILE 928\n//*                                                                 *   FILE 928\n//*       This is V1 of the package, correcting some issues and     *   FILE 928\n//*       replacing the initial V0.                                 *   FILE 928\n//*                                                                 *   FILE 928\n//*       Please examine the REGEXDEM program to see how it         *   FILE 928\n//*       works.                                                    *   FILE 928\n//*                                                                 *   FILE 928\n//*       Please examine REGEXDOC for documentation.                *   FILE 928\n//*                                                                 *   FILE 928\n//*       Thank you                                                 *   FILE 928\n//*       Ze'ev Atlas                                               *   FILE 928\n//*                                                                 *   FILE 928\n//*       Short description:                                        *   FILE 928\n//*                                                                 *   FILE 928\n//*       This little package is an adaptation of the regex.h       *   FILE 928\n//*       header file to COBOL copybooks.  By using these           *   FILE 928\n//*       copybooks and the standard IBM C Run-time library (that   *   FILE 928\n//*       is available in all z/OS machines as far as I can         *   FILE 928\n//*       tell), one may do pattern matching using Regular          *   FILE 928\n//*       Expression from COBOL.  I am not the first or only        *   FILE 928\n//*       person who uses this capability.  My contribution is by   *   FILE 928\n//*       providing standard copybooks and explaining how to use    *   FILE 928\n//*       the 'Capture' capability in addition to the common        *   FILE 928\n//*       'Match' capability.                                       *   FILE 928\n//*                                                                 *   FILE 928\n//*       One has now a common interface to these functions:        *   FILE 928\n//*       regcomp()   Compile regular expression                    *   FILE 928\n//*       regerror()  Return error message                          *   FILE 928\n//*       regexec()   Execute compiled regular expression           *   FILE 928\n//*       regfree()   Free memory for regular expression            *   FILE 928\n//*                                                                 *   FILE 928\n//*           email:  zatlas1@yahoo.com                             *   FILE 928\n//*                                                                 *   FILE 928\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DUMPMEM": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00x\\x00x\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is a copybook, intended as a nested program to     *\n      * display a memory dump of up to 4k bytes.  It could be        *\n      * compiled independently and called a normal subroutine as well*\n      * Calling the dumpmem routine:                                 *\n      * call 'dumpmem' using string-variable length end-call         *\n      * Where                                                        *\n      * whatever is some number and length is how many bytes you want*\n      * to display                                                   *\n      * 01 string-variable      pic x(whatever).                     *\n      * 01 length               pic s9(9) comp-5.                    *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n       identification division.\n       PROGRAM-ID.  'DUMPMEM'.\n      * limited to display 4k bytes\n       data division.\n       working-storage section.\n       01 i          pic s9(9) comp-5.\n       01 j          pic s9(9) comp-5.\n       01 k          pic s9(9) comp-5.\n       01 l          pic s9(9) comp-5.\n       01 xj         pic s9(9) comp-5.\n       01 low-printable  pic s9(4) comp-5 value 31.\n       01 endianess      pic s9(4) comp-5 value 1.\n       01 len-max    pic s9(9) comp-5 value 4096.\n       01 x          pic x(4).\n       01 xi         redefines x pic s9(9) comp-5.\n       01 hextab     pic x(16) value '0123456789ABCDEF'.\n       01 buff       pic x(66).\n       01 ASCII-EBCDIC    pic x value '1'.\n          88 it-is-ebcdic value x'f1'.\n       linkage section.\n       01 datax      pic x(4096).\n       01 len        pic s9(9) comp-5.\n       procedure division using datax len.\n      * a crude way to decide ascii/ebcdic and endianess\n           if it-is-ebcdic\n              move 63 to low-printable\n              move 4 to endianess\n           end-if\n           move 4096 to len-max\n           if len > len-max\n              display 'limiting dump to 4k'\n      *       move 4096 to len-max\n           else\n              move len to len-max\n           end-if\n           move spaces to buff\n           move 1 to j\n           move 49 to k\n           move '|' to buff(k:1)\n           add 1 to k\n           perform varying i from 1 by 1 until i > len-max\n              move low-values to x\n              move datax (i:1) to x(endianess:1)\n      * a crude way to prevent displaying control characters\n              if xi > low-printable and xi < 255\n                 move datax (i:1) to buff(k:1)\n              else\n                 move '.' to buff(k:1)\n              end-if\n              divide xi by 16 giving xj\n              add 1 to xj giving l\n              move hextab(l:1) to buff(j:1)\n              add 1 to j\n              multiply xj by 16 giving xj\n              subtract xj from xi giving xi\n              add 1 to xi giving l\n              move hextab (l:1) to buff (j:1)\n              add 2 to j\n              add 1 to k\n              if j > 47 or i + 1 > len-max\n                  display buff\n                  move spaces to buff\n                  move 1 to j\n                  move 49 to k\n                  move '|' to buff(k:1)\n                  add 1 to k\n              end-if\n           end-perform.\n       END PROGRAM 'DUMPMEM'.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LICENCE": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "ZATLAS"}, "text": " Copyright (c) 2015 Ze'ev Atlas\n---------------------------------------------------------------\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following  disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice,  this list of conditions and the following disclaimer in the\n documentation  and/or other materials  provided with the distribution.\n\n 3. Neither the name of Ze'ev Atlas nor the names of other contributors\n may be used to endorse or promote  products derived from this software\n without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nEnd\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXA": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00\\x98\\x00\\x98\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 152, "newlines": 152, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an implementation of regex.h as defined in IEEE *\n      * Std 1003.1, 2004 Edition to work with GNU COBOL.             *\n      * The intended use is for GNU COBOL interface for the GNU,     *\n      * POSIX compliant, runtime library implementation of Regular   *\n      * Expressions pattern matching functions.                      *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * in particular this copybook is an adaptation of the constants*\n      * and global variable portion of that header.                  *\n      ****************************************************************\n      *         !!! WARNING !!!                                      *\n      * Warning: This copybook will not work with any IBM            *\n      * implemetation because of an inherent difference between IBM  *\n      * and GNU implementation regarding the cflags and eflags , some*\n      * error codes and other constants                              *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n       01  REGEX-NUMERIC-CONSTANTS.\n      * size_t is unsigned PIC 9(9) COMP-5.\n      * wchar_t is unsigned PIC 9(4) COMP-5.\n      * uchar_t is PIC X.\n      * __off_t is S9(9) COMP-5 file offset\n      * Type for byte offsets within the string.\n      * regoff_t is S9(9) COMP-5.\n\n      * regcomp() cflags\n           05 REG-EXTENDED-X       PIC X(4) VALUE x'00000001'.\n           05 REG-EXTENDED REDEFINES REG-EXTENDED-X  PIC S9(9) COMP-5.\n      * Use Extended RE syntax rules\n           05 REG-ICASE-X          PIC X(4) VALUE x'00000002'.\n           05 REG-ICASE REDEFINES REG-ICASE-X        PIC S9(9) COMP-5.\n      * Ignore case in match\n           05 REG-NEWLINE-X        PIC X(4) VALUE x'00000004'.\n           05 REG-NEWLINE REDEFINES REG-NEWLINE-X    PIC S9(9) COMP-5.\n      * Convert <backslash><n> to <newline>\n           05 REG-NOSUB-X          PIC X(4) VALUE x'00000008'.\n           05 REG-NOSUB REDEFINES REG-NOSUB-X        PIC S9(9) COMP-5.\n\n      * regexec() eflags\n      * Important.  There seems to be a difference between the IBM and\n      * the GNU implementations.  IBM caters for the possibility of\n      * cflags and eflags use (overlap) the same fullword, so the\n      * eflags bits are in differnt possitions than those of cflags.\n      * This copybook is strictly for the NON-IBM version.\n           05 REG-NOTBOL-X         PIC X(4) VALUE x'00000001'.\n           05 REG-NOTBOL REDEFINES REG-NOTBOL-X      PIC S9(9) COMP-5.\n      * First character not start of line\n           05 REG-NOTEOL-X         PIC X(4) VALUE x'00000002'.\n           05 REG-NOTEOL REDEFINES REG-NOTEOL-X      PIC S9(9) COMP-5.\n      * Last character not end of line\n      * The below bit was added to cater for GNU users\n      * Use PMATCH.0. to delimit the start and end of the search in\n      * the buffer.  This bit is not defined in the IBM version.\n           05 REG-STARTEND-X         PIC X(4) VALUE x'00000004'.\n           05 REG-STARTEND REDEFINES REG-STARTEND-X PIC S9(9) COMP-5.\n\n      * Regular Expression error codes\n        05 REG-ERROR-CODE       PIC S9(9) COMP-5.\n              88 REG-NOERROR       VALUE 0.\n      * Success.\n              88 REG-NOMATCH       VALUE 1.\n      * RE pattern not found\n              88 REG-BADPAT        VALUE 2.\n      * Invalid Regular Expression\n              88 REG-ECOLLATE      VALUE 3.\n      * Invalid collating element\n              88 REG-ECTYPE        VALUE 4.\n      * Invalid character class\n              88 REG-EESCAPE       VALUE 5.\n      * Last character is \\\n              88 REG-ESUBREG       VALUE 6.\n      * Invalid number in \\digit\n              88 REG-EBRACK        VALUE 7.\n      * Unmatched left bracket.\n              88 REG-EPAREN        VALUE 8.\n      * \\( \\) or () imbalance\n              88 REG-EBRACE        VALUE 9.\n      * \\{ \\} or { } imbalance\n              88 REG-BADBR         VALUE 10.\n      * Invalid \\{ \\} range exp\n              88 REG-ERANGE        VALUE 11.\n      * Invalid range exp endpoint\n              88 REG-ESPACE        VALUE 12.\n      * Out of memory\n              88 REG-BADRPT        VALUE 13.\n      * ?*+ not preceded by valid RE\n      * These error codes are for GNU compatibility and are defferent\n      * then the IBM implementation\n              88 REG-EEND          VALUE 14.\n      * Premature end.\n              88 REG-ESIZE         VALUE 15.\n      * Compiled pattern bigger than 2.16 bytes.\n              88 REG-ERPAREN       VALUE 16.\n      * Unmatched ) or \\); not returned from\n      * function not supported\n      * Another incompatibility with the IBM implementation\n              88 REG-ENOSYS        VALUE -1.\n\n      * POSIX function definitions\n      * int regcomp(regex_t *restrict preg, const char *restrict pattern,\n      *            int cflags);\n      * size_t regerror(int errcode, const regex_t *restrict preg,\n      *            char *restrict errbuf, size_t errbuf_size);\n      * int regexec(const regex_t *restrict preg, const char *restrict string,\n      *            size_t nmatch, regmatch_t pmatch.restrict., int eflags);\n      * void regfree(regex_t *preg);\n\n      * Maximum number of duplicates an interval can allow. (GNU)\n           05 RE-DUP-MAX-X                 PIC x(4)\n                                           VALUE X'00007FFF'.\n           05 RE-DUP-MAX REDEFINES RE-DUP-MAX-X PIC 9(9) COMP-5.\n      * Number of registers. (GNU)\n           05 RE_NREGS             PIC 9(9) COMP-5 VALUE 30.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXDEA": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00\\xfd\\x00\\xfd\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 253, "newlines": 253, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is a demonstration program of using the IBM, POXIX *\n      * compliant, runtime library implementation of Regular         *\n      * Expressions pattern matching functions in COBOL.  I would try*\n      * to demonstrate the usage of the various copybooks that where *\n      * created from breaking the regex.h and how to capture a       *\n      * matched substring in the match structure.                    *\n      * Adaptation of a COBOL program was written by Frank Swarbrick *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * This file works GNUCOBOL 1.1 and on z/OS, just remember to   *\n      * change the copybook combination for the appropriate env.     *\n      * In GNUCobol 2.x one may uncomment the directives, restore    *\n      * the 'usage long binary' and z constants and work with ASCII. *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      * Note about this implementation\n      * The original IBM go to a long distance to create either\n      * separate regext and regmatch structures, one for ASCII and one\n      * for EBCDIC, or default to one of them.  I went only for the\n      * separate option and created two versions for completenesee.\n      * Since this implementation is geared towards EBCDIC, one should\n      * probably always use the EBCDIC version (file and structure\n      * name end with 'e'.  There is a default value that is not used\n      * anyway but is defaulted to the EBCDIC anyway.\n      ****************************************************************\n      ****process nodynam pgmname(mixed)\n      *    process codepage(1047)\n       identification division.\n       program-id.  'REGEXDEA'.\n       data division.\n       working-storage section.\n      * This brings in all constants.\n      *>>IF EBCDIC IS DEFINED\n         copy regexe.\n      *>>ELSE\n      *  copy regexa.\n      *>>END-IF\n      * RE1-regex-t-e is the regex_t structure.  Using the replacing\n      * clause allow for multiple instances.\n      *>>IF EBCDIC IS DEFINED\n        copy regexte replacing ==:PREFIX:== BY ==RE1==.\n      *>>ELSE\n      * copy regexta replacing ==:PREFIX:== BY ==RE1==.\n      *>>END-IF\n      * The below construct is puzzling for me.  Theoretically\n      * regmatc-t-e should have worked, but the result is clearly\n      * regmatch-t-a.  Moreover, it looks like the first element\n      * of the first element of that construct behaves as if it was\n      * int (32 bits) while the rest of the elements behave as if\n      * they were long (64 bits).  I created the convoluted construct\n      * below to overcome this issue, but I certainly need to\n      * investigate it!\n       01 RM1-match.\n      * RM1-regmatch-t is the regmatch_t structure.  Using the\n      * replacing clause allow for multiple instances.\n          05 FILLER OCCURS 4.\n      * Please, always put the 05 level first after the 01 level to\n      * ensure correct integral boundary and that the 01 level name\n      * is the name of the whole array.  If you choose to use a\n      * different structure, please remember that the copybook starts\n      * with level 10 and that it must be on integral boundary of\n      * a fullword.\n      *>>IF EBCDIC IS DEFINED\n        copy regmtche replacing ==:PREFIX:== BY ==RM1==.\n      *>>ELSE\n      * copy regmtcha replacing ==:PREFIX:== BY ==RM1==.\n      *>>END-IF\n\n       01  msgbuf              display   pic x(100).\n\n       01 my-string            PIC X(255).\n       01 my-pattern           PIC X(255).\n       01 my-ptr               usage pointer.\n       01 my-len               PIC s9(9) comp-5.\n       01 my-opt               PIC s9(9) comp-5.\n      *01 two usage binary-long value 2.\n       01 two                  pic s9(9) comp-5 value 2.\n       01 two64                pic s9(18) comp-5 value 2.\n      *01 azero usage binary-long value 0.\n       01 azero                pic s9(9) comp-5 value 0.\n      *01 thirty-two usage binary-long value 32.\n      *01 sixty-four usage binary-long value 64.\n       01 sixty-four           pic s9(9) comp-5 value 64.\n\n       procedure division.\n           string 'a Simple string' delimited by size\n                  x'00' delimited by size\n                  into my-string\n           string '.*(Simple).*' delimited by size\n                  x'00' delimited by size\n                  into my-pattern\n           end-string\n           move LENGTH OF RE1-regex-t to my-len\n           call 'regcomp' using RE1-regex-t\n      *                         content z'.*(Simple).*'\n                                by reference my-pattern\n                                value REG-EXTENDED\n                returning REG-ERROR-CODE\n           display 'my-len= ' my-len\n           display 'dump RE1-regex-t'\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n      *                         value two64\n                                value two\n                                by reference RM1-match\n                                value azero\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n      * Now coompile with small letters and don't ignore case\n           display ' '\n           display 'NOT IGNORING CASE'\n           move zero to my-opt\n           add REG-EXTENDED to my-opt\n      * Pattern with lower case, string with upper case\n           string '.*(simple).*' delimited by size\n                  x'00' delimited by size\n                  into my-pattern\n           end-string\n           call 'regcomp' using RE1-regex-t\n      *                         content z'.*(simple).*'\n                                by reference my-pattern\n                                value my-opt\n                returning REG-ERROR-CODE\n           display 'dump RE1-regex-t'\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n                                value two\n                                by reference RM1-match\n                                value 0\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n      * Now coompile with small letters and ignore case\n           display ' '\n           display 'IGNORING CASE'\n           move zero to my-opt\n           add REG-EXTENDED to my-opt\n           add REG-ICASE    to my-opt\n      * Pattern with lower case, string with upper case\n           call 'regcomp' using RE1-regex-t\n      *                         content z'.*(simple).*'\n                                by reference my-pattern\n                                value my-opt\n                returning REG-ERROR-CODE\n           display 'dump RE1-regex-t = '\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n                                value two\n                                by reference RM1-match\n                                value 0\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n           goback.\n\n       check-reti.\n           evaluate REG-ERROR-CODE\n           when zero\n               display 'match'\n               display 'RM1-rm-so(1)= ' RM1-rm-so(1)\n      *        display RM1-rm-ss(1)\n               display 'RM1-rm-eo(1)= ' RM1-rm-eo(1)\n      *        display RM1-rm-es(1)\n               display my-string (RM1-rm-so(1) + 1:\n                       RM1-rm-eo(1) - RM1-rm-so(1))\n               display 'RM1-rm-so(2)= ' RM1-rm-so(2)\n      *        display RM1-rm-ss(2)\n               display 'RM1-rm-eo(2)= ' RM1-rm-eo(2)\n      *        display RM1-rm-es(2)\n               display my-string (RM1-rm-so(2) + 1:\n                       RM1-rm-eo(2) - RM1-rm-so(2))\n           when 1\n               display 'no match'\n           when other\n      *        move length of msgbuf to lmsgbuf\n               call 'regerror' using RE1-regex-t\n                                     msgbuf\n                                     value length of msgbuf\n                    returning REG-ERROR-CODE\n               display 'Regex match failed: '\n               display REG-ERROR-CODE\n               display msgbuf\n               stop run\n           end-evaluate\n           .\n           copy dumpmem.\n       end program 'REGEXDEA'.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXDEM": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x15\\x07\\x8f\\x01\\x15\\x07\\x8f\"3\\x00\\xdc\\x00\\xdc\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-19T00:00:00", "modifydate": "2015-03-19T22:33:49", "lines": 220, "newlines": 220, "modlines": 0, "user": "ZATLAS1"}, "text": "      ****************************************************************\n      * This file is a demonstration program of using the IBM, POXIX *\n      * compliant, runtime library implementation of Regular         *\n      * Expressions pattern matching functions in COBOL.  I would try*\n      * to demonstrate the usage of the various copybooks that where *\n      * created from breaking the regex.h and how to capture a       *\n      * matched substring in the match structure.                    *\n      * Adaptation of a COBOL program was written by Frank Swarbrick *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * This file is a z/Os, Entrprise COBOL compatible.  Tested with*\n      * COBOL 5.1                                                    *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      * Note about this implementation\n      * The original IBM go to a long distance to create either\n      * separate regext and regmatch structures, one for ASCII and one\n      * for EBCDIC, or default to one of them.  I went only for the\n      * separate option and created two versions for completenesee.\n      * Since this implementation is geared towards EBCDIC, one should\n      * probably always use the EBCDIC version (file and structure\n      * name end with 'e'.  There is a default value that is not used\n      * anyway but is defaulted to the EBCDIC anyway.\n      ****************************************************************\n      ****process nodynam pgmname(mixed)\n      *    process codepage(1047)\n       identification division.\n       program-id.  'REGEXDEM'.\n       data division.\n       working-storage section.\n      * This brings in all constants.\n        copy regexe.\n      * RE1-regex-t-e is the regex_t structure.  Using the replacing\n      * clause allow for multiple instances.\n        copy regexte replacing ==:PREFIX:== BY ==RE1==.\n      * The below construct is puzzling for me.  Theoretically\n      * regmatc-t-e should have worked, but the result is clearly\n      * regmatch-t-a.  Moreover, it looks like the first element\n      * of the first element of that construct behaves as if it was\n      * int (32 bits) while the rest of the elements behave as if\n      * they were long (64 bits).  I created the convoluted construct\n      * below to overcome this issue, but I certainly need to\n      * investigate it!\n       01 RM1-match.\n      * RM1-regmatch-t is the regmatch_t structure.  Using the\n      * replacing clause allow for multiple instances.\n          05 FILLER OCCURS 4.\n      * Please, always put the 05 level first after the 01 level to\n      * ensure correct integral boundary and that the 01 level name\n      * is the name of the whole array.  If you choose to use a\n      * different structure, please remember that the copybook starts\n      * with level 10 and that it must be on integral boundary of\n      * a fullword.\n        copy regmtche replacing ==:PREFIX:== BY ==RM1==.\n\n       01  msgbuf              display   pic x(100).\n\n       01 my-string            PIC X(255).\n       01 my-ptr               usage pointer.\n       01 my-len               PIC s9(9) comp-5.\n       01 my-opt               PIC s9(9) comp-5.\n       01 sixty-four           pic s9(9) comp-5 value 64.\n\n       procedure division.\n           string 'a Simple string' delimited by size\n                  x'00' delimited by size\n                  into my-string\n           end-string\n           move LENGTH OF RE1-regex-t to my-len\n           call 'regcomp' using RE1-regex-t\n                                content z'.*(Simple).*'\n                                value REG-EXTENDED\n                returning REG-ERROR-CODE\n           display 'my-len= ' my-len\n           display 'dump RE1-regex-t'\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n                                value 2\n                                by reference RM1-match\n                                value 0\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n      * Now coompile with small letters and don't ignore case\n           display ' '\n           display 'NOT IGNORING CASE'\n           move zero to my-opt\n           add REG-EXTENDED to my-opt\n      * Pattern with lower case, string with upper case\n           call 'regcomp' using RE1-regex-t\n                                content z'.*(simple).*'\n                                value my-opt\n                returning REG-ERROR-CODE\n           display 'dump RE1-regex-t'\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n                                value 2\n                                by reference RM1-match\n                                value 0\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n      * Now coompile with small letters and ignore case\n           display ' '\n           display 'IGNORING CASE'\n           move zero to my-opt\n           add REG-EXTENDED to my-opt\n           add REG-ICASE    to my-opt\n      * Pattern with lower case, string with upper case\n           call 'regcomp' using RE1-regex-t\n                                content z'.*(simple).*'\n                                value my-opt\n                returning REG-ERROR-CODE\n           display 'dump RE1-regex-t = '\n           CALL 'DUMPMEM' USING RE1-REGEX-T MY-LEN END-CALL\n           if REG-ERROR-CODE is not equal to zero\n               display 'Could not compile regex'\n               display REG-ERROR-CODE\n               stop run\n           end-if\n           call 'regexec' using RE1-regex-t\n                                my-string\n                                value 2\n                                by reference RM1-match\n                                value 0\n                returning REG-ERROR-CODE\n           display 'dump RM1-match'\n           CALL 'DUMPMEM' USING RM1-MATCH SIXTY-FOUR END-CALL\n           perform check-reti\n\n           call 'regfree' using RE1-regex-t\n           goback.\n\n       check-reti.\n           evaluate REG-ERROR-CODE\n           when zero\n               display 'match'\n               display 'RM1-rm-so(1)= ' RM1-rm-so(1)\n      *        display RM1-rm-ss(1)\n               display 'RM1-rm-eo(1)= ' RM1-rm-eo(1)\n      *        display RM1-rm-es(1)\n               display my-string (RM1-rm-so(1) + 1:\n                       RM1-rm-eo(1) - RM1-rm-so(1))\n               display 'RM1-rm-so(2)= ' RM1-rm-so(2)\n      *        display RM1-rm-ss(2)\n               display 'RM1-rm-eo(2)= ' RM1-rm-eo(2)\n      *        display RM1-rm-es(2)\n               display my-string (RM1-rm-so(2) + 1:\n                       RM1-rm-eo(2) - RM1-rm-so(2))\n           when 1\n               display 'no match'\n           when other\n      *        move length of msgbuf to lmsgbuf\n               call 'regerror' using RE1-regex-t\n                                     msgbuf\n                                     value length of msgbuf\n                    returning REG-ERROR-CODE\n               display 'Regex match failed: '\n               display REG-ERROR-CODE\n               display msgbuf\n               stop run\n           end-evaluate\n           .\n           copy dumpmem.\n       end program 'REGEXDEM'.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXDOC": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x01Q\\x01Q\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 337, "newlines": 337, "modlines": 0, "user": "ZATLAS"}, "text": "z/OS COBOL Adaptation of the regex.h (EBCDIC) from the IBM Run-Time C Library\n-----------------------------------------------------------------------------\nCopyright \u00a9 2015 Ze'ev Atlas\nVersion 8.35.1519, Februry 2015\n\nPreamble. License\n-----------------\nThe software described herein is an Adaptation of the regex.h from the IBM\nRun-Time C Library to COBOL COPYBOOKS for use in EBCDIC oriented COBOL on z/OS.\nIt is distributed under the same BSD license under my name.  This license\ncovers each and every file in this package, including this document.\n\n-------------------------------\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n    * Neither the name of Ze'ev Atlas nor the names of any contributors may be\n\tused to endorse or promote products derived from this software without\n\tspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n-----------------------------------------------------------------------------\n\n0. Documentation and what's new\n-------------------------------\nNotes for Version 1:\n1. Please note the structure from the demo program.\n       01 RM1-match.\n          05 FILLER OCCURS 4.\n        copy regmtche replacing ==:PREFIX:== BY ==RM1==.\n   The need for integral boundary of a fullword is mandatory and is enforced\n   within the structure by the use of SYNCHRONIZED keyword.  If you fail to\n   adjust for it as prescribed, your program may fail.\n2. There are two versions of the demo program.  REGEXDEM is a bona-fide z/OS\n   COBOL that compiles and run with Enterprise COBOL 5.1 without any issue.  It\n   is meant for 32 bit compile (which is the default in z/OS).  REGEXDEA would\n   run with much older versions of Enterprise COBOL and with Open COBOL 1.1.\n   See note below about Open COBOL and GNU COBOL issues.\n3. There appears to be an issue with the call sequence in the Open/GNU compiler\n   , it looks like that passing a 64 bit number 'by value' does not work\n   correctly.  That means that you may not get substring offsets correctly, so\n   for now, only the match/no match functionality is available.  The GNU COBOL\n   team is aware of the issue and will look into it.\n4. The demo program was extended to demonstrate using regcomp options.  The\n   program tries to match small and capital letters without ignoring the case,\n   causing the expected no match result.  Than it repeats the exercise while\n   ignoring the case for the desired results:\n0000000364\nmatch\n0000000000\n0000000015\na Simple string\n0000000002\n0000000008\nSimple\n\nNOT IGNORING CASE\nno match\n\nIGNORING CASE\nmatch\n0000000000\n0000000015\na Simple string\n0000000002\n0000000008\nSimple\n\n5. Due to popular demand, I've added a few copybooks and renamed others.  There\n   are now two versions of the regex copybook, three versions of the regext\n   copybook and two versions of the regmtch copybook.  Here is a full list and\n   an explanation about the usage:\n   5.1. z/OS EBCDIC usage.\n      regexe.cpy is the IBM EBCDIC oriented adaptation of the first part of the\n\t  regex.h file.  It is to be used with the IBM run-time library functions,\n\t  whether EBCDIC or ASCII.\n\t  regexte.cpy is the IBM EBCDIC oriented adaptation of the regex_t\n\t  structure.\n\t  regmtche.cpy is the IBM EBCDIC oriented adaptation of the regmatch_t\n\t  structure.\n   5.2. z/OS ASCII usage.\n      I assume that this usage would be rather rare, but I developed the\n\t  components anyway.\n      regexe.cpy is used as above.\n      regextai.cpy is the IBM ASCII oriented adaptation of the regex_t\n\t  structure.\n      regmtcha.cpy is used as below (see explanation below.)\n   5.3. GNU usage.\n      regexa.cpy is the GNU oriented adaptation of the first part of the\n\t  regex.h file.  It is to be used with the GNU library functions.\n\t  regexta.cpy is the GNU oriented adaptation of the regex_t structure.\n\t  regmtcha.cpy is the GNU POSIX oriented adaptation of the regmatch_t\n\t  structure.\n   I know that it is somewhat confusing, but this was the only way to\n   accommodate different and convoluted implementation of the POSIX standard.\n5. An additional copybook regsyntx.cpy is added for those who may want use the\n   GNU optional syntax options (really semantic options.)  This copybook is not\n   really necessary and is heavily GNU sourced so I publish it like the\n   original under the LGPL license.  It is not available in the XMI file.\n6. I've added a copybook named dumpmem.cpy. that contains a program to dump\n   memory.  It is used in the demo program as a nested program but could be\n   compiled independently and used as a general callable program.\n\nThis document attempts to explain z/OS COBOL Adaptation of the regex.h (EBCDIC)\nfrom the IBM Run-Time C Library.\n\n02/20/2015: First release.\n\n1. Rationale\n------------\nThe purpose of this little package is to help standardize the communication\nbetween z/OS COBOL and the C run-Time Regular Expression matching functionality\nthat is commonly available on z/OS systems.  After porting the PCRE library to\nnative classic z/OS I've got many reactions, ranging from the non-serious\n\"Nobody ever requested such functionality\" to the deeply serious \"Management\nwould never allow usage of Open Source\".  These two arguments are troubling\nbecause they are symptoms of the stagnant culture that I was trying to change\nto begin with.  Those who hold the first view, are usually people who would\nresist any change, but for the latter issue there is a built in solution.\n\nThis package is the answer for that last argument.  Regular Expression matching\nfunctionality, POSIX style, is available in the C Run-Time library that is\navailable and used by all.  The standard JCL for COBOL compile, link and go\nrefers to that library as well.\n\nInterfacing that library is done by including C header files in the C source\ncode which would be useless in COBOL.  Hence this adaptation of the regex.h to\nCOBOL COPYBOOKS.\n\nNow, I am not the first one and not the only COBOL programmer who've used this\nfunctionality.  I've found on the internet and got advise from people who use\nthis functionality on regular basis and in production environments.  What most\nof them seem to do is to use the match/no-match aspect (i.e. does the string\nthat I am checking match the pattern or not.)  But they tend not to use the\ncapture aspect (i.e. ..., and by the way, if it matches, give me the substring\nthat does.)  My demo program shows how to use that functionality as well.\n\n2. The Adaptation\n-----------------\nMy intended audience are people who code in COBOL on the z/OS platform and that\nmeans that the character set is EBCDIC and that currently the COBOL version\n(including 5.1) is 32 bit implementation.  Viewing IBMers' remarks on the\nIBM-MAIN forum indicates that this won't change in the next few years.  Based\non these facts, I've examined the regex.h header file and adapted it into COBOL\nCOPYBOOKS.  I strictly adapted the EBCDIC oriented variation of the structures,\nand I strictly looked at long type as if it was a 32 bit entity.\n\nThere is one caveat though: a strict look at the regex.h header file reveals\nthat one of the structures uses two pairs of long and short variables (i.e. one\nfullword, followed by a halfword, followed by another fullword and another\nhalfword.  The real structure that is returned by the library function seems to\nby two pairs of two fullwords.  I compensated for that in the copybook.\n\n3. Usage\n--------\nFor proper usage, please consult with the IBM publication: \"z/OS XL C/C++\nRuntime Library Reference\" which is freely available on the internet.  Please\nrefer to the documentation about these functions:\nregcomp() ? Compile regular expression\nregerror() ? Return error message\nregexec() ? Execute compiled regular expression\nregfree() ? Free memory for regular expression\n\nSome of those functions may accept options via a fullword cflags which should\nbe left as zero until you become proficient in regular expressions usage.  The\nmost useful flag is REG-ICASE that instruct the function to be case\ninsensitive.  If using more than one flag add them once to a PIC S9(9) COMP\nvariable after moving zero to that variable:\n           MOVE ZERO TO MY-CFLAGS\n           ADD REG-ICASE TO MY-CFLAGS\n\t\t   ... and now use MY-CFLAGS.\nWhen calling the function, use the returning clause to REG-ERROR-CODE that is:\navailable in the REGEX COPYBOOK.\n           CALL ... RETURNING REG-ERROR-CODE\nso you can take advantage of the 88 level names associated with that variable.\n\nThe enclosed sample program REGEXDEM shows the appropriate usage of all those\nfunctions and the three COPYBOOKS.  It matches a simple pattern with one simple\ncapturing group and shows how to extract the captured string.\n\nThe output of this program is:\n\n0000000364\nmatch\n0000000000\n0000000015\na simple string\n0000000002\n0000000008\nsimple\n\nI originally dumped the regex_t element using my DUMPMEM function (not included\nher) with this sample image:\n\n00 00 00 01 19 9A 15 48 00 00 00 01 00 00 00 00 |..... . ........\n00 00 00 0F 00 00 00 FF 19 9A 15 48 19 9A 15 49 |......... . . .\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................\n19 9A 15 56 19 9A 15 53 00 00 00 00 00 00 00 00 |. . . . ........\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................\n00 00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 |................\n01 01 01 01 01 01 01 01 00 00 00 01             |............\n\nI also dumped the regmatch_t array:\n\n00 00 00 00 00 00 00 00 00 00 00 0F 00 00 00 00 |................\n00 00 00 02 00 00 00 00 00 00 00 08 00 00 00 00 |................\n\n4. In this distribution\n-----------------------\nstandard_zOS_COBOL_REGEX_COPY(v0).txt -this document file.\nregex.cpy - contains the static variables of regex.h.\nregext.cpy - represents the regex_t structure.  Using the REPLACING clause is\n   mandatory and allow creating multiple instances of the structure.\nregmtch.cpy - represents the regmatch_t structure.  Note that I started that\n   structure in level 10, so the user must supply some level (e.g. 05) above it\n   in order to allow for OCCURS clause.  Using the REPLACING clause is\n   mandatory and allow creating multiple instances of the structure.\nREGEXDEM.cob - is the demo program.\nLICENSE.txt - BSD license document.\n\nAll files but this one (the documentation) are ready as input for IEBUPDTE.\nUpload them to the mainframe and add them as input to something like:\n\n// SET PARMHLQ=HLQ  <=== Your high level qualifier\n// SET PARMMLQ=MLQ  <=== Your middle level qualifier\n// SET PARMLLQ=LLQ  <=== Your low level qualifier\n// SET IFILE=input file name\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n\nwhere HLQ.MLQ.LLQ is your COPYBOOK library.\nSince the files are in ASCII, they should be uploaded to the mainframe while\ntranslating ASCII to EBCDIC.  Loading ASCII text into an EBCDIC environment\ncould be challenging.  In many cases you do not have any control on the\ncodepage, no use of FTP or other issues.  I for example, had to use the\nvenerable IND$FILE with whatever defaults set by the System Programmer to whom\nI had no access.  If you have access to FTP, you could try using something\nlike:\nSbdataconn=(ibm-1047,iso8859-1)\nor\nSbdataconn=(ibm-037,iso8859-1)\nwhere the ibm-xxxx denotes your specific IBM codepage.\n\n5. A Few Words About Regular Expressions and Capturing\n------------------------------------------------------\nI have no intention to give here a full or even partial guide to Regular\nExpressions.  The internet is full of such guides, some of them are better than\nanything I could ever come with.  Here is a list of three sites I've found,\nusing Google, that seem to be good enough for beginners:\nhttp://www.zytrax.com/tech/web/regex.htm\ntwo lines URL:\nhttp://www.smashingmagazine.com/2009/06/01/essential-guide-to-regular-\nexpressions-tools-tutorials-and-resources/\nhttp://www.georgehernandez.com/h/xComputers/Programming/RegularExpressions.asp\n\nI would also not discuss too much the differences between the Perl style\nRegular Expressions that are provided by my port of the PCRE library and the\nPOSIX standard.  You may read about it in the URL below:\nhttp://eli.thegreenplace.net/2012/11/14/some-notes-on-posix-regular-expressions\n\nThe main difference as far as I am concerned manifests itself when you are\nusing the capture feature of Regular Expression.  Perl style tends to return\nthe first instance of a match and POSIX would return the longest match.  Since\nIBM z/OS is now POSIX compliant, their functions use that standard and this is\nwhat we are stuck with.\n\nIn order to find and capture IP address (in the old IPv4 standard) one may use\nsomething like (this is a very simplified example - an accurate one would look\nmuch more intimidating to the novice):\n\\b(?:\u00dd0-9\u00a8{1,3}\\.){3}\u00dd0-9\u00a8{1,3}\\b\nIf you apply this pattern to a text line like:\n05 TEST-FOR-IP PIC X(80) VALUE\n      'My internal IP address is 192.168.1.110, the external one is a secret'.\noffset 012345678901234567890123456789012345678901234567890123456789012345678\nthe regexec function will tell you that you have a match al-right, but in order\nto actually capture the IP address you need to change the pattern slightly and\nadd parentheses around the group that you want to capture:\n\\b((?:\u00dd0-9\u00a8{1,3}\\.){3}\u00dd0-9\u00a8{1,3})\\b\nIf you tell regexec that you are interested in two subexpressions in the third\nparameter and supply an array of two REGMATCH-T structures, you would get as a\nresult this array (offset starts from zero):\n\n00000000  \\                <=== zero - offset of start of string TEST-FOR-IP\nxxxxxxxx  |                <=== unimportant\n          > first array element\n00000048  |                <=== 72 - offset of end of string TEST-FOR-IP\nxxxxxxxx  /                <=== unimportant\n---------\n0000001A  \\                <=== 26 - offset of start of IP within TEST-FOR-IP\nxxxxxxxx  |                <=== unimportant\n          > second array element\n00000026  |                <=== 38 - offset of end of IP within TEST-FOR-IP\nxxxxxxxx  /                <=== unimportant\n\nNote that the first element in the array always points to the whole input\nstring.  The second element corresponds to the first capturing parentheses and\nso on.\n\nUsing the COBOL code below would display the captured IP address (assuming that\nyou have prefixed the regmatch-t names with RM1-)\ndisplay TEST-FOR-IP (RM1-rm-so(2) + 1:RM1-rm-eo(2) - RM1-rm-so(2)).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXE": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00\\xac\\x00\\xac\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 172, "newlines": 172, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an addaption of the parts of IBM <regex.h>      *\n      * header file for COBOL interface                              *\n      * The intended use is for COBOL interface for the IBM, POSIX   *\n      * compliant, runtime library implementation of Regular       *\n      * Expressions pattern matching functions.                      *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * in particular this copybook is an adaptation of the constants*\n      * and global variable portion of that header.                  *\n      ****************************************************************\n      *         !!! WARNING !!!                                      *\n      * Warning: This copybook will not work with any GNU            *\n      * implemetation because of an inherent difference between IBM  *\n      * and GNU implementation regarding the cflags and eflags , some*\n      * error codes and other constants                               *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * Note about this implementation\n      * IBM goes to a long distance to create either separate regext\n      * and regmatch structures, one for ASCII and one for EBCDIC, or\n      * default to one of them.  I went only for the EBCDIC version\n      * (file name end with 'e'.)\n      * The ASCII version is incompatible with any IBM version and is\n      * geared towards GNU COBOL usage (which probably will work for\n      * Microd-Focus COBOL that in most cases shold work with what is\n      * available on Windows and Linux machines.)  An IBM for ASCII\n      * version would be developed if there is any (unforseeable)\n      * demand.\n      ****************************************************************\n\n       01  REGEX-NUMERIC-CONSTANTS.\n           05 UUUregex             PIC S9(9) COMP-5 VALUE 1.\n           05 UUEDC-LE-X           PIC X(4)\n                                   VALUE x'10000000'.\n           05 UUEDC-LE REDEFINES UUEDC-LE-X  PIC S9(9) COMP-5.\n      * size_t is unsigned PIC 9(9) COMP-5.\n      * I ignore the 64 bit possibility.\n      * wchar_t is unsigned PIC 9(4) COMP-5.\n      * I ignore the 64 bit possibility.\n      * _LC_colval_t -> ULC_colval_t is PIC 9(4) COMP-5.\n      * uchar_t is PIC X.\n      * mbstate_t is PIC S9(4) COMP-5.   /* multi-byte shift state */\n      * __off_t -> UUoff_t is S9(9) COMP-5 /* file offset */\n      * I ignore the 64 bit possibility.\n      * regoff_t is S9(9) COMP-5.\n           05 UUREG-SUBEXP-MAX     PIC S9(9) COMP-5 VALUE 9.\n      * Maximum # of subexpressions  */\n           05 UREG-SUBEXP-MAX-A    PIC S9(9) COMP-5 VALUE 23.\n      * Maximum # of subexpressions - Ascii  */\n           05 UREG-SUBEXP-MAX-E    PIC S9(9) COMP-5 VALUE 9.\n      * Maximum # of subexpressions - EBCDIC */\n           05 UREG-SUBEXP-MAX-AP1  PIC S9(9) COMP-5 VALUE 24.\n      * COBOL for depending on clause.  Must be\n      * UREG-SUBEXP-MAX-A + 1\n           05 UREG-SUBEXP-MAX-EP1  PIC S9(9) COMP-5 VALUE 10.\n      * COBOL for depending on clause.  Must be\n      * UREG-SUBEXP-MAX-E + 1\n\n      * regcomp() cflags */\n           05 REG-EXTENDED-X       PIC X(4) VALUE x'00000001'.\n           05 REG-EXTENDED REDEFINES REG-EXTENDED-X  PIC S9(9) COMP-5.\n      * Use Extended RE syntax rules */\n           05 REG-ICASE-X          PIC X(4) VALUE x'00000002'.\n           05 REG-ICASE REDEFINES REG-ICASE-X        PIC S9(9) COMP-5.\n      * Ignore case in match         */\n           05 REG-NEWLINE-X        PIC X(4) VALUE x'00000004'.\n           05 REG-NEWLINE REDEFINES REG-NEWLINE-X    PIC S9(9) COMP-5.\n      * Convert <backslash><n> to <newline> */\n           05 REG-NOSUB-X          PIC X(4) VALUE x'00000008'.\n           05 REG-NOSUB REDEFINES REG-NOSUB-X        PIC S9(9) COMP-5.\n\n      * regexec() eflags */\n      * Important.  There seems to be a difference between the IBM and\n      * the GNU implementations.  IBM caters for the possibility of\n      * cflags and eflags use (overlap) the same fullword, so the\n      * eflags bits are in differnt possitions than those of cflags.\n      * This copybook is strictly for the NON-IBM version.\n           05 REG-NOTBOL-X         PIC X(4) VALUE x'00000100'.\n           05 REG-NOTBOL REDEFINES REG-NOTBOL-X      PIC S9(9) COMP-5.\n      * First character not start of line   */\n           05 REG-NOTEOL-X         PIC X(4) VALUE x'00000200'.\n           05 REG-NOTEOL REDEFINES REG-NOTEOL-X      PIC S9(9) COMP-5.\n      * Last character not end of line      */\n\n      * Regular Expression error codes */\n        05 REG-ERROR-CODE       PIC S9(9) COMP-5.\n              88 REG-NOMATCH       VALUE 1.\n      * RE pattern not found           */\n              88 REG-BADPAT        VALUE 2.\n      * Invalid Regular Expression     */\n              88 REG-ECOLLATE      VALUE 3.\n      * Invalid collating element      */\n              88 REG-ECTYPE        VALUE 4.\n      * Invalid character class        */\n              88 REG-EESCAPE       VALUE 5.\n      * Last character is \\            */\n              88 REG-ESUBREG       VALUE 6.\n      * Invalid number in \\digit       */\n              88 REG-EBRACK        VALUE 7.\n      * imbalance                      */\n              88 REG-EPAREN        VALUE 8.\n      * \\( \\) or () imbalance          */\n              88 REG-EBRACE        VALUE 9.\n      * \\{ \\} or { } imbalance         */\n              88 REG-BADBR         VALUE 10.\n      * Invalid \\{ \\} range exp        */\n              88 REG-ERANGE        VALUE 11.\n      * Invalid range exp endpoint     */\n              88 REG-ESPACE        VALUE 12.\n      * Out of memory                  */\n              88 REG-BADRPT        VALUE 13.\n      * ?*+ not preceded by valid RE   */\n      * These error codes are for IBM compatibility and are defferent\n      * then the GNU implementation\n              88 REG-ECHAR         VALUE 14.\n      * invalid multibyte character    */\n              88 REG-EBOL          VALUE 15.\n      * .. anchor and not BOL           */\n              88 REG-EEOL          VALUE 16.\n      * $ anchor and not EOL           */\n              88 REG-ENOSYS-A      VALUE 17.\n      * function not supported */\n              88 REG-ENOSYS-E      VALUE 134.\n      * function not supported */\n              88 REG-ENOSYS        VALUE 134.\n      * function not supported */\n      * Note: default to the EBCDIC value since this is an EBCDIC\n      * oriented implementation\n\n      *int    regcomp(regex_t *restrict, const char *restrict, int);\n      *size_t regerror(int, const regex_t *restrict, char *restrict, size_t);\n      *int    regexec(const regex_t *restrict, const char *restrict, size_t,\n      *           regmatch_t.restrict., int);\n      *void   regfree(regex_t *);\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXTA": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00g\\x00g\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an implementation of regex.h as defined in IEEE *\n      * Std 1003.1, 2004 Edition to work with GNU COBOL.             *\n      * The intended use is for GNU COBOL interface for the GNU,     *\n      * POSIX compliant, runtime library implementation of Regular   *\n      * Expressions pattern matching functions.                      *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * in particular this copybook is an adaptation of the structure*\n      * for the regex_t portion of  of that header.                  *\n      ****************************************************************\n      *         !!! WARNING !!!                                      *\n      * Warning: This copybook will not work with any IBM            *\n      * implemetation because of an inherent difference between IBM  *\n      * and GNU implementation regarding the cflags and eflags , some*\n      * error codes and other constants                               *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * A data structure that represents a compiled pattern in the GNU\n      * implementation.  Set fields 'buffer', 'allocated', 'fastmap',\n      * 'translate', and 'no_sub' before compiling the pattern.\n      * After the pattern has been compiled, only the 're_nsub' field\n      * is available.  All other fields are for internal use.\n\n      * reg_syntax_t is PIC S9(9) COMP-5.\n\n       01  :PREFIX:-regex-t.\n           05 :PREFIX:-buffer               USAGE POINTER.\n      * Pointer to the compiled pattern.\n           05 :PREFIX:-allocated            PIC S9(18) COMP-5.\n      * Number of bytes to which 'buffer' points.\n           05 :PREFIX:-used                 PIC S9(18) COMP-5.\n      * Number of bytes actually used in `buffer'.\n           05 :PREFIX:-syntax               PIC S9(18) COMP-5.\n      * Syntax setting with which the pattern was compiled.\n           05 :PREFIX:-fastmap              USAGE POINTER.\n      * Pointer to a fastmap, if any, otherwise zero.  re_search\n      * uses the fastmap, if there is one, to skip over\n      * impossible starting points for matches.\n           05 :PREFIX:-translate            USAGE POINTER.\n      * translate table applied to all characters before comparing,\n      * or zero for no translation.  The translation is applied to\n      * pattern in compile time and to thw string in match time.\n           05 :PREFIX:-re-nsub               PIC 9(18) COMP-5.\n      * Number of subexpressions found by the compiler.\n           05 :PREFIX:-can-be-null           PIC x.\n      * Zero if pattern cannot match the empty string, one if could.\n      * used only in 're_search_2', to decide whether to use the\n      * fastmap.  Yet another GNU implementation peculiartity.\n           05 :PREFIX:-regs-allocated        PIC xx.\n      * Allocate space in the of regmatch_t structure for 'max\n      * (RE_NREGS, re_nsub + 1)' groups.\n           05 :PREFIX:-fastmap-accurate      PIC x.\n      * Set to zero when `regex_compile' compiles a pattern; set to\n      * one by `re_compile_fastmap' if it updates the fastmap.\n           05 :PREFIX:-no-sub                PIC x.\n      * When set, `re_match_2' does not return information about\n      * subexpressions.\n           05 :PREFIX:-not-bol               PIC x.\n      * When set, a beginning-of-line anchor doesn't match at the\n      * beginning of the string.\n           05 :PREFIX:-not-eol               PIC x.\n      * Similarly for an end-of-line anchor.\n           05 :PREFIX:-newline-anchor        PIC x.\n      * If true, an anchor at a newline matches.\n      *    05 FILLER                         PIC X.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXTAI": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00[\\x00[\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an addaption of the parts of IBM <regex.h>      *\n      * header file for COBOL interface                              *\n      * The intended use is for COBOL interface for the IBM, POSIX   *\n      * compliant, runtime library implementation of Regular         *\n      * Expressions pattern matching functions.                      *\n      * in particular this is an adaptation of the __regex_t_a       *\n      * structure                                                    *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * Note about this implementation\n      * IBM goes to a long distance to create either separate regext\n      * and regmatch structures, one for ASCII and one for EBCDIC, or\n      * default to one of them.  After developing the EBCDIC version\n      * and ASCII version for use with GNU, I've decided to develop\n      * an ASCII version for IBM as well.\n      * There is no need to develop a special IBM ASCII regmtch.cpy\n      * since it is the same as the existing regmtcha.cpy (being POZIX\n      * compliant.\n      ****************************************************************\n\n      * the REG_ENOSYS has to be 17 for function not supported\n      * use the REG_ENOSYS_A instead\n\n      * IBM implementation require that The size of regex_t must not\n      * change and must be exactly 336 bytes,\n       01  :PREFIX:-regex-t.\n\n      * regcomp() data saved for regexec()\n           05 :PREFIX:-nsub                 PIC 9(9) COMP-5.\n      * # of subexpressions in RE pattern    */\n           05 :PREFIX:-re-comp              USAGE POINTER.\n      * compiled RE; freed by regfree()\n           05 :PREFIX:-re-cflags            PIC S9(9) COMP-5.\n      * saved cflags for regexec()\n           05 :PREFIX:-re-erroff            PIC 9(9) COMP-5.\n      * RE pattern error offset\n           05 :PREFIX:-re-len               PIC 9(9) COMP-5.\n      * # wchar_t chars in compiled pattern\n           05 :PREFIX:-re-ucoll    PIC 9(4) COMP-5 OCCURS 2.\n      * min/max unique collating values\n           05 :PREFIX:-re-lsub              USAGE POINTER\n              OCCURS 1 TO 100 DEPENDING ON UREG-SUBEXP-MAX-AP1.\n      * start subexp\n           05 :PREFIX:-re-esub              USAGE POINTER\n              OCCURS 1 TO 100 DEPENDING ON UREG-SUBEXP-MAX-AP1.\n      * end subexp\n           05 :PREFIX:-re_map               USAGE POINTER.\n      * map of valid pattern characters\n           05 :PREFIX:-UUmaxsub            PIC S9(9) COMP-5.\n      * maximum number of subs in pattern.\n           05 :PREFIX:-UUunused     OCCURS 34 USAGE POINTER.\n      * Extra space if ever needed\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEXTE": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00U\\x00U\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an addaption of the parts of IBM <regex.h>      *\n      * header file for COBOL interface                              *\n      * The intended use is for COBOL interface for the IBM, POSIX   *\n      * compliant, runtime library implementation of Regular         *\n      * Expressions pattern matching functions.                      *\n      * in particular this is an adaptation of the __regex_t_e       *\n      * structure                                                    *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * Note about this implementation\n      * IBM goes to a long distance to create either separate regext\n      * and regmatch structures, one for ASCII and one for EBCDIC, or\n      * default to one of them.  I went only for the EBCDIC version\n      * (file name end with 'e'.)\n      * The ASCII version is incompatible with any IBM version and is\n      * geared towards GNU COBOL usage (which probably will work for\n      * Microd-Focus COBOL that in most cases shold work with what is\n      * available on Windows and Linux machines.)  An IBM for ASCII\n      * version would be developed if there is any (unforseeable)\n      * demand.\n      ****************************************************************\n       01  :PREFIX:-regex-t.\n      * regcomp() data saved for regexec()\n           05 :PREFIX:-nsub                 PIC 9(9) COMP-5.\n      * # of subexpressions in RE pattern\n           05 :PREFIX:-re-comp              USAGE POINTER.\n      * compiled RE; freed by regfree()\n           05 :PREFIX:-re-cflags            PIC S9(9) COMP-5.\n      * saved cflags for regexec()\n           05 :PREFIX:-re-erroff            PIC 9(9) COMP-5.\n      * RE pattern error offset\n           05 :PREFIX:-re-len               PIC 9(9) COMP-5.\n      * # wchar_t chars in compiled pattern\n           05 :PREFIX:-re-ucoll    PIC 9(4) COMP-5 OCCURS 2.\n      * min/max unique collating values\n           05 :PREFIX:-re-lsub              USAGE POINTER\n              OCCURS 1 TO 100 DEPENDING ON UREG-SUBEXP-MAX-EP1.\n      * start subexp\n           05 :PREFIX:-re-esub              USAGE POINTER\n              OCCURS 1 TO 100 DEPENDING ON UREG-SUBEXP-MAX-EP1.\n      * end subexp\n           05 :PREFIX:-re-map      PIC X OCCURS 256.\n      * maps valid pattern characters\n           05 :PREFIX:-re-shift             PIC S9(4) COMP-5.\n      * Saved shift state\n           05 :PREFIX:-re-dbcs              PIC S9(4) COMP-5.\n      * May start with DBCS character\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGMTCHA": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00E\\x00E\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an implementation of regex.h as defined in IEEE *\n      * Std 1003.1, 2004 Edition to work with GNU COBOL.             *\n      * The intended use is for GNU COBOL interface for the GNU,     *\n      * POSIX compliant, runtime library implementation of Regular   *\n      * Expressions pattern matching functions.                      *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * in particular this copybook is an adaptation of the structure*\n      * for the regmatch_t portion of  of that header.               *\n      ****************************************************************\n      *         !!! WARNING !!!                                      *\n      * Warning: This copybook will not work with any IBM            *\n      * implemetation because of an inherent difference between IBM  *\n      * and GNU implementation regarding the cflags and eflags , some*\n      * error codes and other constants                               *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * The GNU dudes did a lot of their own implementation.  For\n      * COBOL usage we'll keep it strictly POSIX compliant and\n      * ignore the GNU internals\n      ****************************************************************\n\n      * Type for byte offsets within the string.  Mandated by POSIX.\n      * regoff_t is S9(9) COMP-5.\n      * POSIX specification for registers.  POSIX uses an array of\n      * structures, and not a structure of arrays as the GNU does.\n       10  :PREFIX:-regmatch-t.\n           15 :PREFIX:-rm-so      PIC       S9(9) COMP-5 SYNCHRONIZED.\n      * offset of substring\n           15 :PREFIX:-rm-eo      PIC       S9(9) COMP-5 SYNCHRONIZED.\n      * offset of first char after substring\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGMTCHE": {"ttr": 1282, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x08?\\x01\\x15\\x08?\"6\\x00J\\x00J\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T22:36:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "ZATLAS"}, "text": "      ****************************************************************\n      * This file is an addaption of the parts of IBM <regex.h>      *\n      * header file for COBOL interface                              *\n      * The intended use is for COBOL interface for the IBM, POSIX   *\n      * compliant, runtime library implementation of Regular         *\n      * Expressions pattern matching functions.                      *\n      * Note: leading underscores in a name are marked with U        *\n      *       other underscores converted to dashes                  *\n      * in particular this is an adaptation of the __regmatch_t_e    *\n      * structure                                                    *\n      ****************************************************************\n      *\n      * Copyright (c) 2015 Ze'ev Atlas\n      * Please refer to the LICENSE document to see all other\n      * applicable copyrights.\n      *\n      *---------------------------------------------------------------\n      *Redistribution and use in source and binary forms, with or\n      *without modification, are permitted provided that the following\n      *conditions are met:\n\n      * 1. Redistributions of source code must retain the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer.\n\n      * 2. Redistributions in binary form must reproduce the above\n      * copyright notice, this list of conditions and the following\n      * disclaimer in the documentation and/or other materials\n      * provided with the distribution.\n\n      * 3. Neither the name of Ze'ev Atlas nor the names of other\n      * contributors may be used to endorse or promote\n      * products derived from this software without specific prior\n      * written permission.\n\n      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n      *CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      ****************************************************************\n      * Note about this implementation\n      * The original IBM go to a long distance to create either\n      * separate regext and regmatch structures, one for ASCII and one\n      * for EBCDIC, or default to one of them.  I went only for the\n      * separate option and created one version.  Since this\n      * implementation is geared towards EBCDIC one should probably\n      * always use the EBCDIC version anyway.\n      * There is a default value that is not used anyway but is\n      * defaulted to the EBCDIC.\n      ****************************************************************\n      * Note, starts on level 10, to allow level 05 with OCCURS\n      * substring locations - from regexec()\n       10  :PREFIX:-regmatch-t.\n           15 :PREFIX:-rm-so      PIC       S9(9) COMP-5 SYNCHRONIZED.\n      * offset of substring\n           15 :PREFIX:-rm-ss      PIC       s9(4) COMP-5.\n      * Shift state at start of substring\n      * The filler was added since despite the fact that the C\n      * calls for short rm-ss and rm-es (i.e. S9(4) COMP-5) allocates\n      * 4 bytes, either because short is not short after all or\n      * because of integral boundary.\n           15 :PREFIX:-rm-eo      PIC       S9(9) COMP-5 SYNCHRONIZED.\n      * offset of first char after substring\n           15 :PREFIX:-rm-es      PIC       S9(4) COMP-5.\n      * Shift state at end of substring\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT928/FILE928.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT928", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}