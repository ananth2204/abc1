{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013549000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1410864, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE949.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE949.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x17\\x08'", "DS1TRBAL": "b'<\\xf6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\xdf\\x00\\n\\t\\xe1\\x00\\x03\\x00\\x18'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x12\\x01 \\x18\\x7f\\x01 \\x18\\x7f\\x14\\x10\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-05T00:00:00", "modifydate": "2020-07-05T14:10:12", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  949\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE949\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 17 MEMBERS COUNTED; CUMULATIVE SIZE IS 13,327 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/05/20    14:10:12    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE949": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x06\\x01 \\x18\\x7f\\x01 \\x18\\x7f\\x14\\x10\\x00V\\x00V\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-05T00:00:00", "modifydate": "2020-07-05T14:10:06", "lines": 86, "newlines": 86, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 949 is an IEHMOVE substitute program called PDSUR, which  *   FILE 949\n//*           is more flexible than IEHMOVE, and is much easier to  *   FILE 949\n//*           use.  Written in 1973 by Gene Czarcinski, it was      *   FILE 949\n//*           recently updated for z/OS disks by a qualified        *   FILE 949\n//*           updater.                                              *   FILE 949\n//*                                                                 *   FILE 949\n//*           I am surprised that this program never made it to     *   FILE 949\n//*           the CBT Tape before.                                  *   FILE 949\n//*                                                                 *   FILE 949\n//*           Corrections were made by Peter Glanzmann, mostly      *   FILE 949\n//*           having to do with changing halfword arithmetic        *   FILE 949\n//*           to fullword arithmetic.  Older version is PDSUR00.    *   FILE 949\n//*                                                                 *   FILE 949\n//*           support email:   sbgolob@cbttape.org                  *   FILE 949\n//*                                                                 *   FILE 949\n//*                            Peter.Glanzmann@bedag.ch             *   FILE 949\n//*                                                                 *   FILE 949\n//*           A good use for this program is to restore IEHMOVE-    *   FILE 949\n//*           unloaded pds'es from old tapes.  But it is good       *   FILE 949\n//*           for unloading a pds into IEHMOVE-format quickly,      *   FILE 949\n//*           and it can be used as an alternative to XMIT          *   FILE 949\n//*           sequentializing of pds'es.  With this program,        *   FILE 949\n//*           sequential blocksizes can be any multiple of 80,      *   FILE 949\n//*           and they are not restricted to 800 as with IEHMOVE.   *   FILE 949\n//*                                                                 *   FILE 949\n//*           There is a bit more material included in this file:   *   FILE 949\n//*                                                                 *   FILE 949\n//*           PDSRUO   - The original PDSRU program before being    *   FILE 949\n//*                      updated for modern devices.                *   FILE 949\n//*                                                                 *   FILE 949\n//*           PDSUR@   - Documentation to explain the various       *   FILE 949\n//*           PDSURDOC   uses and applications of PDSUR.            *   FILE 949\n//*                                                                 *   FILE 949\n//*           PDSURU   - Version of PDSRU where the sequence        *   FILE 949\n//*                      numbering of the output dataset is         *   FILE 949\n//*                      disabled if your EXEC card has PARM=U.     *   FILE 949\n//*                      Resultant output dataset is incompatible   *   FILE 949\n//*                      with IEHMOVE, having all x'0000' in the    *   FILE 949\n//*                      sequence number field (columns 1 and 2),   *   FILE 949\n//*                      but in a case where the output dataset     *   FILE 949\n//*                      is part of a JCL data stream, then         *   FILE 949\n//*                      \"//\" and \"/*\"  (x'6161' or x'615C')        *   FILE 949\n//*                      as sequence numbers, will not terminate    *   FILE 949\n//*                      the data stream prematurely.               *   FILE 949\n//*                                                                 *   FILE 949\n//*           In addition: ----                                     *   FILE 949\n//*                                                                 *   FILE 949\n//*           I have added Gilbert Saint-flour's contribution to    *   FILE 949\n//*           this area, which is his program called SYSMOVE.       *   FILE 949\n//*           SYSMOVE goes only one way--from a pds to an IEHMOVE-  *   FILE 949\n//*           format sequential dataset.  You can use PDSUR to      *   FILE 949\n//*           restore a SYSMOVE-created sequential dataset, or      *   FILE 949\n//*           you can also use IEHMOVE to restore it.  Both work.   *   FILE 949\n//*                                                                 *   FILE 949\n//*           SYSMOVE  - Program to produce an IEHMOVE-format       *   FILE 949\n//*                      sequential file from a pds.  JCL for       *   FILE 949\n//*                      assembly and linkedit is included in       *   FILE 949\n//*                      this member.                               *   FILE 949\n//*                                                                 *   FILE 949\n//*           STRING   - Assembler macro necessary to assemble      *   FILE 949\n//*                      SYSMOVE.                                   *   FILE 949\n//*                                                                 *   FILE 949\n//*           SAMPLE JCL MEMBERS:  - - -  marked with id RUNJCL:    *   FILE 949\n//*                                                                 *   FILE 949\n//*           PDSURL01 - Reload an IEHMOVE-format file to a PDS     *   FILE 949\n//*                      using the PDSUR utility.                   *   FILE 949\n//*                                                                 *   FILE 949\n//*           PDSURN01 - Unload a PDS to an IEHMOVE-format file     *   FILE 949\n//*                      using the PDSUR utility.                   *   FILE 949\n//*                                                                 *   FILE 949\n//*           IEHMOV01 - Real IEHMOVE JCL to unload a PDS, to       *   FILE 949\n//*                      IEHMOVE format, with explanations.         *   FILE 949\n//*                                                                 *   FILE 949\n//*           IEHMOV02 - Real IEHMOVE JCL to reload a PDS from an   *   FILE 949\n//*                      IEHMOVE-format file created by IEHMOVE.    *   FILE 949\n//*                                                                 *   FILE 949\n//*           IEHMOV03 - Real IEHMOVE JCL to reload a PDS from an   *   FILE 949\n//*                      IEHMOVE-format file created by PDSUR.      *   FILE 949\n//*                                                                 *   FILE 949\n//*           (The formats of PDSUR-unloaded PDS'es and             *   FILE 949\n//*            IEHMOVE-unloaded PDS'es were not quite identical,    *   FILE 949\n//*            but after restoration with either utility, it        *   FILE 949\n//*            doesn't seem to matter, after a preliminary test.    *   FILE 949\n//*            You seem to restore the same output file in either   *   FILE 949\n//*            case.)                                               *   FILE 949\n//*                                                                 *   FILE 949\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEHMOV01": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00R\\x00\\x83\\x15\\x8f\\x01\\x16!o\\x00Y\\x00\\x1b\\x00!\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1983-06-07T00:00:00", "modifydate": "2016-08-03T00:59:52", "lines": 27, "newlines": 33, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBI  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --           * * *   REAL IEHMOVE JCL   * * *                -- *//\n//* --    JCL TO UNLOAD A PARTITIONED DATASET TO AN IEHMOVE      -- *//\n//* --         FORMAT SEQUENTIAL DATASET THAT IS FIT TO          -- *//\n//* --         BE DOWNLOADED TO A PC HARD DISK OR FLOPPY.        -- *//\n//* --------------------------------------------------------------- *//\n//MOVE    EXEC PGM=IEHMOVE,PARM='POWER=4'\n//SYSPRINT   DD  SYSOUT=*\n//*\n//DD1        DD  DISP=SHR,DSN=SBGOLOB.B.CNTL\n//*   DD1 IS \"FROM\" PDS AND CAN EVEN BE ON AN SMS-MANAGED VOLUME.\n//*\n//DD2        DD  DISP=SHR,DSN=SBGOLOB.IEHMOVE.B.CNTL\n//*   DD2 IS CATALOGED DATASET ON A NON-SMS-MANAGED VOLUME,\n//*    WHERE THE TARGET DATASET IS TO RESIDE.\n//*\n//SYSUT1     DD  DISP=SHR,DSN=SBGOLOB.XX.XX\n//*   SYSUT1 IS A CATALOGED DATASET WHICH DETERMINES A VOLUME\n//*    WHERE THE WORK DATASET RESIDES.\n//*\n//SYSIN      DD  *\n  COPY PDS=SBGOLOB.B.CNTL,UNLOAD,                                      X\n               TO=3390=WORKS3,RENAME=SBGOLOB.B.CNTL.IEHMOVE,CATLG\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEHMOV02": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x02\\x01\\x16!o\\x01\\x16!o\\x01\\x00\\x00\\x11\\x00\\x13\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2016-08-03T00:00:00", "modifydate": "2016-08-03T01:00:02", "lines": 17, "newlines": 19, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBR  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --           * * *   REAL IEHMOVE JCL   * * *                -- *//\n//* --    JCL TO RELOAD A PARTITIONED DATASET FROM AN IEHMOVE    -- *//\n//* --         FORMAT SEQUENTIAL DATASET - CREATED BY IEHMOVE.   -- *//\n//* --------------------------------------------------------------- *//\n//STEP1    EXEC PGM=IEHMOVE,PARM='POWER=4'\n//SYSPRINT DD  SYSOUT=A\n//SYSUT1   DD  UNIT=3390,VOLUME=SER=WORKS4,DISP=SHR   (WORK D.S. VOL)\n//DD1      DD  UNIT=3390,VOLUME=SER=Z25RES,DISP=SHR   (SYSRES VOLUME)\n//DD2      DD  UNIT=3390,VOLUME=SER=WORKS3,DISP=OLD   (TARG D.S. VOL)\n//SYSIN    DD  *\n  COPY PDS=SBGOLOB.B.CNTL.IEHMOVE,                                     X\n               TO=3390=WORKS3,RENAME=SBGOLOB.L.CNTL,CATLG\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEHMOV03": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x10\\x01\\x16!o\\x01\\x16!o\\x01\\x00\\x00\\x11\\x00\\x13\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2016-08-03T00:00:00", "modifydate": "2016-08-03T01:00:10", "lines": 17, "newlines": 19, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBR  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --           * * *   REAL IEHMOVE JCL   * * *                -- *//\n//* --    JCL TO RELOAD A PARTITIONED DATASET FROM AN IEHMOVE    -- *//\n//* --         FORMAT SEQUENTIAL DATASET - CREATED BY PDSUR.     -- *//\n//* --------------------------------------------------------------- *//\n//STEP1    EXEC PGM=IEHMOVE,PARM='POWER=4'\n//SYSPRINT DD  SYSOUT=A\n//SYSUT1   DD  UNIT=3390,VOLUME=SER=WORKS4,DISP=SHR   (WORK D.S. VOL)\n//DD1      DD  UNIT=3390,VOLUME=SER=Z25RES,DISP=SHR   (SYSRES VOLUME)\n//DD2      DD  UNIT=3390,VOLUME=SER=WORKS3,DISP=OLD   (TARG D.S. VOL)\n//SYSIN    DD  *\n  COPY PDS=SBGOLOB.IEHMOVE.B.CNTL,                                     X\n               TO=3390=WORKS3,RENAME=SBGOLOB.M.CNTL,CATLG\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSUR": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00F\\x01\\x18\\x04\\x0f\\x01 \\x18\\x7f\\x14\\x00\\x08V\\x08U\\x00\\x01\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2018-02-09T00:00:00", "modifydate": "2020-07-05T14:00:46", "lines": 2134, "newlines": 2133, "modlines": 1, "user": "UPDATED"}, "text": "         TITLE 'PDSUR - PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**                                                                  **\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**         WITH FIXES MADE IN 2016 FOR LARGE TRACKS, 2321, DIR EOF  **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n*        GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         CLI       WORK1+11,X'05'      IF UCBTYP+3 NOT 2321       .FIX.\n         BE        *+8                    THEN TURN OFF 2321 BIT  .FIX.\n         NI        WORK1+25,255-X'02'     (BIT ALSO TESTED LATER) .FIX.\n         TM        WORK1+25,X'02'      2321?\n         BO        DEV2321X            YES\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         BNO       INIT1CCA            NO\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         ST        R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         L         R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         XC        0(78,R14),0(R14) AVOID RANDOM PADDING AT END   .FIX.\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         ST        R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         L         R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        F'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSUR$": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00E\\x01\\x01\\x05\\x1f\\x01 \\x18\\x7f\\x14\\x05\\x00\\x1c\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2020-07-05T14:05:45", "lines": 28, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE949(PDSUR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB500949\n SETCODE AC(0)\n NAME    PDSUR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSUR@": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x03\\x01\\x16\\x00O\\x01\\x16\\x03?\\x03 \\x009\\x00\\n\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-01-04T00:00:00", "modifydate": "2016-02-02T03:20:03", "lines": 57, "newlines": 10, "modlines": 0, "user": "DOC"}, "text": "  The PDSUR program in member PDSUR is from the unloaded PDS in file 7\n  of the Goddard tape at cbttape.org under MVT Mods.\n  http://www.cbttape.org/histmods.htm\n\n  It has been modified to work on z/OS and MVS 3.8, with each\n  changed line marked with a comment \".FIX.\".\n\n  It can restore IEHMOVE-unloaded files from tapes, or from IEHMOVE\n  -unloaded files that have been copied from tape to disk.\n\n  It can also create IEHMOVE-unloaded files on disk or tape.\n\n  //* UNLOAD A MEMBER TO AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IN.PDS,DISP=SHR\n  //OUT      DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   UNLOAD FROMDD=IN,TODD=OUT,SELECT\n   MEMBER MEMBER1,MEMBER2\n  /*\n\n  //* UNLOAD A PDS TO AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IN.PDS,DISP=SHR\n  //OUT      DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   UNLOAD FROMDD=IN,TODD=OUT\n  /*\n\n  //* LIST MEMBER NAMES IN AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   LIST FROMDD=IN\n  /*\n\n  //* RELOAD AN IEHMOVE FILE TO A PDS\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //OUT      DD DSN=CBTUSER.NEW.PDS,DISP=SHR\n  //SYSIN    DD *\n   RELOAD FROMDD=IN,TODD=OUT\n  /*\n\n  Existing members will not be replaced unless REPLACE\n  or R is specifed\n\n   RELOAD FROMDD=IN,TODD=OUT,REPLACE\n   RELOAD FROMDD=IN,TODD=OUT,R\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSURDOC": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x006\\x00s\\x18O\\x01\\x18\\x12/\\x15\\x13\\x00\\xf5\\x00\\xe6\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1973-07-03T00:00:00", "modifydate": "2018-05-02T15:13:36", "lines": 245, "newlines": 230, "modlines": 0, "user": "SBGOLOB"}, "text": "PDSUR  ---  PARTITIONED DATA SET UNLOAD/RELOAD UTILITY PROGRAM\n\n       This documentation appears to be directly from Gene Czarcinski\n       and appears to date from 1973.  It is still mostly applicable\n       and relevant however.  Please use it.\n\nDEVELOPED BY --\n         EUGENE A. CZARCINSKI\n         NASA/GODDARD SPACE FLIGHT CENTER\n         GREENBELT, MARYLAND 20771\n\nPURPOSE --\n         'PDSUR' IS A DATA SET UTILITY PROGRAM DESIGNED TO CREATE\n         BACKUP COPIES OF PARTITIONED DATA SETS (UNLOAD) OR TO RESTORE\n         BACKUP COPIES TO DISK (RELOAD).  IT IS DESIGNED TO BE COMPA-\n         TIBLE WITH THE IBM SYSTEM UTILITY 'IEHMOVE'.  THAT IS, 'PDSUR'\n         USES THE SAME UNLOADED FORMAT AS 'IEHMOVE'.  THUS, PARTITIONED\n         DATA SET WHICH HAVE BEEN UNLOADED BY 'PDSUR' CAN BE RELOADED\n         BY 'IEHMOVE' (OR VISA VERSA).  'PDSUR HAS BEEN DESIGNED AS A\n         DATA SET UTILITY RATHER THAN A SYSTEM UTILITY AND THUS REQUIRES\n         THAT DISK DATA SETS BE ALLOCATED THROUGH JCL.\n\nHISTORY --\n         THE DEVELOPMENT OF 'PDSUR' WAS PROMPTED BY SOME OF THE OPER-\n         ATING INEFFICIENCIES AND PROBLEMS OF IBM'S 'IEHMOVE'.  'PDSUR'\n         UTILIZES MAIN STORAGE (CORE) FOR ALL TABLES AND WORKAREAS\n         RATHER THAN DISK AS 'IEHMOVE' DOES.  THUS, THE NUMBER OF I/O\n         OPERATIONS REQUIRED FOR UNLOADING IS LESS FOR 'PDSUR' AS COMP-\n         ARED TO 'IEHMOVE'.  FOR RELOADING, 'PDSUR' AND 'IEHMOVE'\n         REQUIRED ABOUT THE SAME I/O TIME.  HOWEVER, 'PDSUR' DOES\n         NOT NEED TO KNOW THE SPECIFIC VOLUME SERIAL NUMBER FOR RE-\n         LOADING AS 'IEHMOVE' DOES (IT CAN BE SPECIFIED THROUGH JCL OR\n         THE OPERATING SYSTEM CAN ASSIGN A SPECIFIC VOLUME).\n\nFEATURES AND INCOMPATABILITIES --\n         AS COMPARED TO 'IEHMOVE', 'PDSUR' HAS A NUMBER OF DIFFERENCES\n         IN ITS DESIGN AND OPERATION.  MAJOR FEATURES AND DIFFERENCES\n         ARE LISTED BELOW:\n            - 'PDSUR' USES MAIN (CORE) STORAGE FOR TABLES AND WORK AREAS\n            - THE DEFAULT BLKSIZE FOR UNLOAD I/O IS 800 (FOR LABELED\n              TAPE, UNLABELED TAPE OR SEQUENTIAL DISK)\n            - SPACE FOR DISK DATA SETS MUST BE ALLOCATED THROUGH JCL\n              ... PDSUR DOES NOT DYNAMICALLY ALLOCATE SPACE AS IEHMOVE\n              DOES\n            - 'PDSUR' ONLY HANDLES LOADING AND UNLOADING PATITIONED DATA\n              SETS\n            - 'PDSUR' WILL HANDLE UNLOADED DATA SET BLKSIZES LARGER THAN\n              800 BYTES FOR BOTH UNLOAD AND RELOAD (IEHMOVE WILL NOT)\n            - SINCE 'PDSUR' USES QSAM FOR UNLOADED-PDS I/O OPERATIONS,\n              'EROPT' CAN BE USED TO ACCEPT I/O ERRORS AND ATTEMPT\n              DATA RECOVERY FROM A DAMAGED TAPE.\n            - FOR ALL PRACTICAL PURPOSES, ALL I/O OPERATIONS PERFORMED\n              BY 'PDSUR' ARE DEVICE INDEPENDENT.  'PDSUR' ALLOWS THE\n              THE UNLOADED DATA SET TO RESIDE ON DISK, TAPE OR ANY OTHER\n              DEVICE SUPPORTING SEQUENTIAL ACCESS.\n            - 'PDSUR' ALLOWS SPECIFICATION (SELECTION OR EXCLUSION) OF\n              MEMBERS ON BOTH UNLOADING AND RELOADING.\n            - FOR FIXED LENGTH RECORDS ONLY (RECFM=F/FB), 'PDSUR'\n              ALLOWS REBLOCKING ON RELOAD.  THUS, A PDS WHICH WAS\n              DCB=(RECFM=F,LRECL=80,BLKSIZE=80) CAN BE RELOADED WITH\n              DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200).  THIS ALSO ALLOWS\n              RELOADING A PDS WHICH WAS ON A 2314 WITH BLKSIZE=7280 TO\n              BE RELOADED TO A 2321 WITH BLKSIZE=2000.\n            - FOR ALL RECFM EXCEPT F/FB, 'PDSUR' WILL TAKE THE LARGEST\n              OF: THE OLD BLKSIZE (TODD=), THE BLKSIZE SPECIFIED IN THE\n              JCL, OR THE BLKSIZE SPECIFIED IN THE UNLOADED (FROMDD=)\n              DATA SET.\n            - THE UNLOADED DATA SET MUST BE A SEQUENTIAL DATA SET.\n              IT MAY BE A MEMBER OF ANOTHER PDS (FOR WHAT PURPOSE I\n              HAVE NO IDEA).  THE UNLOADED DATA SET WILL NORMALLY BE\n              ON TAPE.\n\n              (Forty years later, we routinely include entire pds'es\n              as members of other pds'es using the XMIT-format, which\n              did not exist in 1973.  But IEHMOVE format will also do\n              quite nicely for this packaging purpose, especially\n              when we have the convenience of PDSUR to restore the pds\n              from the IEHMOVE-format pds member, and its blocksize\n              does not have to be 800.      (Sam Golob, Aug2016)\n\n            - A LIST FUNCTION HAS BEEN INCORPORATED TO LIST THE\n              CONTENTS (MEMBER NAMES) OF AN UNLOADED FILE.\n\nACCESS METHODS USED --\n         FOR SYSIN, SYSPRINT AND ALL UNLOADED DATA SET I/O: QSAM LOCATE\n         MODE FOR FIXED LENGTH RECORDS IS USED.\n         FOR ALL PDS I/O: BPAM IS USED.\n\n         FOR ALL FILE 'SYSIN' I/O, THE DEFAULT BLKSIZE USED IS 80.\n         FOR ALL FILE 'SYSPRINT' I/O, THE DEFAULT BLKSIZE IS 3509\n         (HALF TRACK BLOCKING FOR A 2314).\n\nCONTROL CARDS (ENTERED VIA THE 'SYSIN' FILE) --\n         - ALL CONTROL SPECIFICATION MUST BE CONTAINED ON THE FIRST\n           72 COLUMNS OF AN 80 BYTE CARD IMAGE (CONTINUATION CARDS ARE\n           NOT HANDLED).\n         - EACH CONTROL CARD MUST CONSIST OF TWO FIELDS: COMMAND AND\n           OPERAND.\n         - THE COMMAND FIELD MAY OR MAY NOT START IN COLUMN 1 OF THE\n           CARD (BLANKS MAY PROCEED THE COMMAND AND ARE IGNORED).\n         - ONE OR MORE BLANKS (MAX OF 16) MUST SEPARATE THE COMMAND\n           AND OPERAND FIELDS\n         - OPERANDS IN THE OPERAND FIELD MUST BE SEPARATED BY COMMAS.\n           OPERAND SCANNING IS TERMINATED BY A BLANK OR COLUMN 72.\n\nIN THE FOLLOWING, VALID ABREVIATIONS ARE GIVEN IN PARENTHESES FOLLOWING\nTHE SPECIFIED COMMAND OR OPERAND KEYWORD.\n\n**COMMAND          **FUNCTION\n\nUNLOAD (U)         SPECIFIES THAT AN UNLOAD (BACKUP CREATION) OPERATION\n                   IS TO BE PERFORMED\n\nRELOAD (R)         SPECIFIES THAT A RELOAD (BACKUP RESTORE) OPERATION\n                   IS TO BE PERFORMED.\nLIST   (L)         SPECIFIES THAT A LIST OPERATION IS TO BE PERFORMED\n                   (ONLY THE \"FROMDD\" OPERAND IS REQUIRED AND USED).\n\nMEMBER (M)         SPECIFIES MEMBER NAMES FOR THE SELECT OR EXCLUDE\n                   OPTION SPECIFIED ON THE PREVIOUS UNLOAD OR RELOAD\n                   CONTROL CARD.  MORE THAN ONE MEMBER CARD CAN FOLLOW\n                   AN UNLOAD/RELOAD CARD SO THAT MANY NAMES CAN BE\n                   SPECIFIED.  THE OPERAND FIELD MUST CONTAIN ONE OR\n                   MORE MEMBER NAMES SEPARATED BY COMMAS.\n\n**OPERAND KEYWORD  **FUNCTION\n\nFROMDD= (F=)       FOR UNLOAD: THIS SPECIFIES THE DDNAME FOR THE PDS.\n                   FOR RELOAD: THIS SPECIFIES THE DDNAME FOR THE TAPE.\n\nTODD= (T=)         FOR UNLOAD: THIS SPECIFIES THE DDNAME FOR THE TAPE.\n                   FOR RELOAD: THIS SPECIFIES THE DDNAME FOR THE PDS.\n\nREPLACE  (R)       FOR UNLOAD: IGNORED.\n                   FOR RELOAD: US THE 'REPLACE' OPTION WHEN 'STOW'ING\n                   DIRECTORY ENTRIES.  IF A MEMBER ANME EXISTS FOR A\n                   NAME OR ALIAS, IT IS REPLACED.\n\nLEAVE  (L)         AT THE END OF THE SPECIFIED OPERATION, THE \"TAPE\"\n                   FILE IS CLOSED WITH THE 'LEAVE' OPTION THUS LEAVING\n                   THE TAPE MOUNTED EVEN IF THE DISP=(OLD,KEEP) IS\n                   SPECIFIED...NORMALLY A TAPE IS UNLOADED IF KEEP IS\n                   SPECIFIED.\n\nSELECT (S)         FOR UNLOAD/RELOAD: PROCESS ONLY THOSE MEMBER OR ALIAS\n                   NAMES SPECIFIED ON FOLLOWING MEMBER CARDS\n\nEXCLUDE (E)        FOR UNLOAD/RELOAD: DO NOT PROCESS THE MEMBER OR ALIAS\n                   NAMES SPECIFIED ON FOLLOWING MEMBER CARDS.\n\n         (SELECT AND EXCLUDE ARE MUTUALLY EXCLUSE OPTIONS\n         AND PDSUR USES THE LAST ONE SPECIFIED)\n\n\nTYPICAL INSTREAM PROC --\n         THE FOLLOWING INSTREAM PROC IS SHOWN TO ILLUSTRATE THE BASIC\n         JCL REQUIRED TO RUN PDSUR:\n\n         //PDSUR PROC OUT=A,BLK=3509,REG=50K\n         //PDSUR EXEC PGM=PDSUR,REGION=&REG\n         //STEPLIB DD DISP=SHR,DSN= ... (POINT AT LIBRARY FOR PDSUR PGM)\n         //SYSPRINT DD SYSOUT=&OUT,DCB=BLKSIZE=&BLK\n         //SYSIN DD DCB=(BLKSIZE=800,BUFNO=1)\n         // PEND\n\n     THE ABOVE PROC IS USED IN THE EXAMPLES GIVEN BELOW.\n\n\nEXAMPLES --\n    - UNLOAD TWO PDS'S\n            // EXEC PDSUR\n            //SYSIN DD *\n            UNLOAD FROMDD=DISK,TODD=TAPE\n            U F=D2,T=T2\n            //DISK DD DISP=SHR,DSN=SYS1.PROCLIB\n            //D2 DD DISP=SHR,DSN=USER.LINKLIB\n            //TAPE DD DISP=(,KEEP),DSN=A,LABEL=1,UNIT=2400-4,\n            // VOL=SER=TAPE\n            //T2 DD DISP=(,KEEP),DSN=B,LABEL=2,VOL=REF=*.TAPE\n    - RELOAD A PDS\n            // EXEC PDSUR\n            //SYSIN DD *\n            RELOAD FROMDD=DD1,T=DD2,R\n            //DD1 DD DISP=OLD,DSN=M2.USRID.T\n            //DD2 DD DISP=OLD,DSN=M2.USRID.DISKLIB\n    - UNLOAD AND RELOAD IN SAME JOB STEP\n            // EXEC PDSUR\n            //SYSIN DD *\n            UNLOAD FROMDD=DD1,TODD=DD2\n            RELOAD FROMDD=DD3,TODD=DD1\n            //DD1 DD DISP=OLD,DSN=M2.USRID.LINKLIB\n            //DD2 DD DISP=(,KEEP),DSN=M2.USRID.BAKUP,LABEL=3,\n            // UNIT=2400-4,VOL=SER=TAPSER\n            //DD3 DD DISP=OLD,DSN=M2.USRID.OLDTAP,LABEL=10,\n            // UNIT=2400-4,VOL=SER=OLDTAP\n    - LIST SOME OLD UNLOADED PDS'S\n            // EXEC PDSUR\n            //SYSIN DD *\n            LIST FROMDD=DD1,LEAVE\n            LIST F=DD2,LEAVE\n            L FROMDD=DD3,L\n            //DD1 DD DISP=OLD,DSN=M2.USRID.F1,LABEL=1,UNIT=2400-4,\n            // VOL=SER=OLDPDS\n            //DD2 DD DISP=OLD,DSN=M2.USRID.F2,LABEL=5,VOL=REF=*.DD1\n            //DD3 DD DISP=OLD,DSN=M2.USRID.F3,LABEL=9,VOL=REF=*.DD1\n    - UNLOAD WITH SOME SELECTES AND EXCLUDES\n            // EXEC PDSUR\n            //SYSIN DD *\n            UNLOAD FROMDD=DD1,TODD=DD2,S\n            MEMBER PROG1,PROG2,PROG3,PROG4\n            UNLOAD FROMDD=DD1,TODD=DD3,E\n            MEMBER PROG1,PROG2,PROG3,PROG4,PROGX\n            //DD1 DD DISP=SHR,DSN=M2.USRID.LINKLIB\n            //DD2 DD DISP=(,KEEP),DSN=USRID.X1,LABEL=1,UNIT=2400-4,\n            // VOL=(PRIVATE,RETAIN,SER=SCRTCH)\n            //DD3 DD DISP=(,KEEP),DSN=USRID.X2,LABEL=2,VOL=REF=*.DD2\n    - RELOAD WITH SOME SELECTS AND EXCLUDES\n            // EXEC PDSUR\n            //SYSIN DD *\n                    RELOAD FROMDD=DD1,TODD=DD2,LEAVE,S\n                    MEMBER PROG1,PROG2\n                    RELOAD FROMDD=DD1,TODD=DD3,EXCLUDE\n                    MEMBER PROG3,PROG4\n                    MEMBER PROG5,PROGA\n            //DD1 DD DISP=OLD,DSN=M2.USRID.T,LABEL=5,UNIT=2400-4,\n            // VOL=SER=BKPTAP\n            //DD2 DD DISP=OLD,DSN=M2.USRID.LIB1\n            //DD3 DD DISP=OLD,DSN=M2.USRID.LIB2\n\n\n***  BUGS AND PROBLEMS  ***\n         PLEASE REPORT ALL BUGS AND/OR PROBLEMS DIRECTLY TO\n         YOUR LOCAL SYSTEM PROGAMMERS GROUP.\n\n         Gene unfortunately has passed away.  Please address\n          all questions or problems to:\n\n          Sam Golob, email: sbgolob@cbttape.org\n\n         BE SURE TO INCLUDE DUMPS (IF GENERATED) AS WELL AS A\n         SAMPLE DECK ILLUSTRATING THE PROBLEM.\n***NOTE*** NORMAL JCL OR OTHER OPERATING PROBLEMS ASSOCIATED WITH\n           OS/360 WILL NOT BE DEBUGGED.\n***NOTE*** LOCAL OR USER MODIFIED VERSIONS OF 'PDSUR' WILL NOT\n           BE DEBUGGED BY ME...GENE CZARCINSKI.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSURL01": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x04\\x01\\x16!?\\x01\\x16!o\\x02\\x04\\x00\\x0e\\x00\\t\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-07-31T00:00:00", "modifydate": "2016-08-03T02:04:04", "lines": 14, "newlines": 9, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ------------------------------------------------------- *//\n//*    RELOAD AN IEHMOVE FORMAT FILE TO A PDS USING PDSUR   *//\n//* ------------------------------------------------------- *//\n//STEP1    EXEC PGM=PDSUR\n//STEPLIB  DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//IN       DD DSN=SBGOLOB.IEHMOVE.B.CNTL,DISP=SHR     (SEQ)\n//OUT      DD DSN=SBGOLOB.TEST.B.CNTL,DISP=SHR        (PDS)\n//SYSIN    DD *\n RELOAD FROMDD=IN,TODD=OUT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSURN01": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00!\\x01\\x16!?\\x01\\x16!o\\x02\\x04\\x00\\x0f\\x00\\t\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2016-07-31T00:00:00", "modifydate": "2016-08-03T02:04:21", "lines": 15, "newlines": 9, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBN  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* UNLOAD A PDS TO AN IEHMOVE FILE\n//* ------------------------------------------------------- *//\n//*    UNLOAD A PDS TO AN IEHMOVE FORMAT FILE USING PDSUR   *//\n//* ------------------------------------------------------- *//\n//STEP1    EXEC PGM=PDSUR\n//STEPLIB  DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//IN       DD DSN=SBGOLOB.B.CNTL,DISP=SHR             (PDS)\n//OUT      DD DSN=SBGOLOB.IEHMOVE.B.CNTL,DISP=SHR     (SEQ)\n//SYSIN    DD *\n UNLOAD FROMDD=IN,TODD=OUT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSURO": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00s\\x18O\\x00s\\x18O\\x10\\x00\\x08J\\x08J\\x00\\x00\\xd6\\xd9\\xc9\\xc7\\xd5\\xc1\\xd3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1973-07-03T00:00:00", "modifydate": "1973-07-03T10:00:00", "lines": 2122, "newlines": 2122, "modlines": 0, "user": "ORIGNAL"}, "text": "UR TITLE '     PDSUR -- PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n         GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LR        R5,R1\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         TM        WORK1+25,X'02'      2321?\n         BO        DEV2321X            YES\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         BNO       INIT1CCA            NO\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        H'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSURU": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00P\\x00s\\x18O\\x01\\x16!/\\x10\\x17\\x08e\\x08P\\x00 \\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1973-07-03T00:00:00", "modifydate": "2016-07-30T10:17:50", "lines": 2149, "newlines": 2128, "modlines": 32, "user": "UPDATED"}, "text": "UR TITLE '     PDSUR -- PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**         WITH FIXES MADE IN 2016 FOR LARGE TRACKS, 2321, DIR EOF  **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**      11. IF PARM=U THEN THE SEQUENCE NUMBERING IN THE 1ST TWO    **\n**          BYTES IS DISABLED, TO AVOID \"/*\" AND \"//\". BUT THE      **\n**          RESULT IS NOT COMPATIBLE WITH IEHMOVE.                  **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         L         R14,0(,R1)          POINT TO PARM              .SEQ.\n         LH        R15,0(,R14)         GET LENGTH OF PARM         .SEQ.\n         LTR       R15,R15             IF PARM SPECIFIED          .SEQ.\n         BZ        PARMX                 THEN                     .SEQ.\n         CLI       2(R14),C'U'           IF PARM=U                .SEQ.\n         BNE       *+8                     THEN                   .SEQ.\n         MVI       OPTU,1                  SET OPTU FOR NO SEQ    .SEQ.\nPARMX    EQU       *                                              .SEQ.\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n         GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         CLI       WORK1+11,X'05'      IF UCBTYP+3 NOT 2321       .FIX.\n         BE        *+8                    THEN TURN OFF 2321 BIT  .FIX.\n         NI        WORK1+25,255-X'02'     (BIT ALSO TESTED LATER) .FIX.\n         TM        WORK1+25,X'02'      2321?\n         BO        DEV2321X            YES\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         BNO       INIT1CCA            NO\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         CLI       OPTU,0              IF PARM=U                  .SEQ.\n         BE        *+6                   THEN                     .SEQ.\n         SR        R15,R15               SEQUENCE ALWAYS ZERO     .SEQ.\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         CLI       OPTU,0              IF PARM=U                  .SEQ.\n         BNE       TAPEIN                 THEN IGNORE SEQ ERRORS  .SEQ.\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        H'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nOPTU     DC        X'00'                                          .SEQ.\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSUR00": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x05\\x00s\\x18O\\x01\\x16!/\\x10\\x18\\x08T\\x08P\\x00\\x0f\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1973-07-03T00:00:00", "modifydate": "2016-07-30T10:18:05", "lines": 2132, "newlines": 2128, "modlines": 15, "user": "UPDATED"}, "text": "UR TITLE '     PDSUR -- PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**         WITH FIXES MADE IN 2016 FOR LARGE TRACKS, 2321, DIR EOF  **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n         GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         CLI       WORK1+11,X'05'      IF UCBTYP+3 NOT 2321       .FIX.\n         BE        *+8                    THEN TURN OFF 2321 BIT  .FIX.\n         NI        WORK1+25,255-X'02'     (BIT ALSO TESTED LATER) .FIX.\n         TM        WORK1+25,X'02'      2321?\n         BO        DEV2321X            YES\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         BNO       INIT1CCA            NO\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        H'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSUR01": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\"\\x01\\x18\\x04\\x0f\\x01\\x18\\x04\\x0f\\x15\\x07\\x08U\\x08U\\x00\\x00\\xd7\\xc5\\xe3\\xc5\\xd9@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2018-02-09T00:00:00", "modifydate": "2018-02-09T15:07:22", "lines": 2133, "newlines": 2133, "modlines": 0, "user": "PETER"}, "text": "         TITLE 'PDSUR - PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**                                                                  **\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**         WITH FIXES MADE IN 2016 FOR LARGE TRACKS, 2321, DIR EOF  **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n*        GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         CLI       WORK1+11,X'05'      IF UCBTYP+3 NOT 2321       .FIX.\n         BE        *+8                    THEN TURN OFF 2321 BIT  .FIX.\n         NI        WORK1+25,255-X'02'     (BIT ALSO TESTED LATER) .FIX.\n         TM        WORK1+25,X'02'      2321?\n         BO        DEV2321X            YES\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         BNO       INIT1CCA            NO\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         ST        R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         L         R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         ST        R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         L         R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        F'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRING": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x12\\x00\\x01\\x00\\x89\\x00\\x9f\\x01\\x10\\t\\x7f\\x16R\\x05w\\x00\\x19\\x02\\xc6\\xc6\\xc9\\xd3\\xc5\\xf1\\xf8\\xf3@@@'", "ispf": {"version": "05.18", "flags": 0, "createdate": "1989-01-09T00:00:00", "modifydate": "2010-04-07T16:52:01", "lines": 1399, "newlines": 25, "modlines": 710, "user": "FILE183"}, "text": "*/GILBERTS JOB (ACCT#),STRING-MACRO,\n*/ NOTIFY=&SYSUID,\n*/ CLASS=A,MSGCLASS=H,COND=(0,NE)\n*/HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,\n*/*FLAG(PAGE0),NORXREF,NODXREF,                   HLASM R3\n*/ NOBATCH)\n***********************************************************************\n*                                                                     *\n*            COPYRIGHT (C) 1989-2010 GILBERT SAINT-FLOUR              *\n*                       ALL RIGHTS RESERVED                           *\n*                                                                     *\n* MACRO NAME = STRING                                                 *\n*                                                                     *\n* DESCRIPTIVE NAME = STRING Macro Instruction.                        *\n*                                                                     *\n* FUNCTION = Provide capabilities similar to PUT EDIT (of PL/I)       *\n*            or STRING (of COBOL) to assembler programs.              *\n*                                                                     *\n* STATUS = R518                                                       *\n*                                                                     *\n* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *\n*          http://gsf-soft.com/Freeware/STRING.shtml                  *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*     AMODE = ANY                                                     *\n*     RMODE = ANY                                                     *\n*     SCP   = OS/360, OS/VS, MVS/370, MVS/XA, MVS/ESA, OS/390 or z/OS *\n*     KEY   = ANY                                                     *\n*     MODE  = ANY                                                     *\n*     APF   = ANY                                                     *\n*                                                                     *\n* Processor = Assembler H, High-Level Assembler                       *\n*                                                                     *\n* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               *\n*                                                                     *\n* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              *\n*                                                                     *\n* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*200 Build STRING macro based on $PUNCH,$FIELD,@PRTPUN            1989*\n*300 @STRING always runs with AMODE31                             1992*\n*    Make slight modifications to the SCON2A routine                  *\n*    Length used in output field returned in R15                      *\n*    @JDATE routine integrated into @STRING CSECT                     *\n*301 FIX BUGS WITH (XYZ,,L8) AND INTO=((R1),(R2))                 1993*\n*302 GENERATE $DEBUG BOOT-STRAP IN FINAL_CALL INVOCATION              *\n*303 REPLACE @STRPAD WITH @STRBLANKS                              1994*\n*304 USE @00-@15 INSTEAD OF R0-R15 FOR REGISTER EQUATES               *\n*306 TAILOR @STRING CSECT TO PROGRAM'S REQUIREMENTS                   *\n*    LITERALS CAN BE CODED AS 'ABC' OR C'ABC' OR X'C1C2C3'            *\n*    USE L'PSATOLD AS IMPLICIT LENGTH FOR (PSATOLD-PSA,,X)            *\n*307 \"FINAL_CALL\" OPTION CHANGED TO \"GENERATE\"                        *\n*    ADD NOCSECT AND LOCTR OPTIONS TO \"GENERATE\" CALL                 *\n*308 USE L'RBCDE AS IMPLICIT LENGTH FOR (PRB.RBCDE,,X)                *\n*    PREVENT S0C4 WHEN ADDR IS BAD AND LENGTH IS ZERO                 *\n*400 Reorg the code to simplify feature selection                 1995*\n*    BLANKS no longer used or generated                               *\n*401 Generate @STRHEXT when ((REG),,X) only hex field                 *\n*502 @STRING Routine rewritten for MVS/ESA:                       1996*\n*    . Use linkage stack to store caller's registers                  *\n*    . Add support for AR Mode                                        *\n*    . @STRING now executes in caller's AMODE                         *\n*    . Rename previous version to STRINGXA                            *\n*503 Date Conversion to YYYY-MM-DD Format (ISO Standard)              *\n*    Improve Support for AR mode                                      *\n*504 Set &STRBLANKS to 10 when processing dates                   1997*\n*505 Allow for 128K-offset                                        1998*\n*506 Remove literal from BAL instruction for HLASM R3             1999*\n*507 Merge STRINGXA code, add AR_MODE option                      2000*\n*    Change syntax of GENERATE call                                   *\n*508 Compatibility with FLAG(PAGE0) in HLASM R3                       *\n*    Compatibility with pre-XA version of the SAVE macro              *\n*    Remove AMODE-based R2 cleanup in 370 mode                        *\n*509 Hex string can contain commas, e.g. X'12,3456,7890'          2001*\n*    Length of parm-list entries can vary between 2 and 6 bytes       *\n*    Short literals (up to 5 bytes) are generated in parm list        *\n*510 JDATE=90366 produces 90/13/01 instead of S0C7                2002*\n*511 Prevent ACTR error with long literals                        2003*\n*512 Packed fields no longer ignored when R0=0                        *\n*513 Local base not needed for (GENERATE,,LOCTR)                  2004*\n*514 '&&'(1,1) at .LIT11C                                         2005*\n*515 Negative Value: -12345678 (Tim Alpaerts)                     2007*\n*516 STRING may be present in multiple CSECTs in same assembly    2009*\n*    One of the CSECTs that use STRING may have no name               *\n*517 Fix addressability error in CSECT23/CSECT28 reported by IBM/AU   *\n*518 %TIME hh:mm:ss.hh instead of hh:mm:ss:hh                     2010*\n*    (%TIME,5) or (%TIME,8) or (%TIME,11) or (%TIME,12)               *\n*    Fix bug near GENL2D reported by IBM/AU                           *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    STRING &INTO=,&PRINT=NOGEN,&STRING_MACRO_VERSION=518\n         AIF   ('&PRINT' EQ 'NOGEN').NOGEN\n         PUSH  PRINT\n         PRINT GEN\n.NOGEN   GBLA  &$_LIT\n         GBLA  &$_CSECT_NO             Number of CSECTs\n         GBLB  &$_FEAT(16)             FEATURES\n.*                                       1 LITERALS\n.*                                       2 REGISTER (BIN)\n.*                                       3 REGISTER (HEX)\n.*                                       4 PACKED\n.*                                       5 JDATE\n.*                                       6 BINARY\n.*                                       7 HEX\n.*                                       8 NUMERIC\n.*                                       9 LEFT JUST (NUMERIC)\n.*                                       10 LEADING ZEROES\n.*                                       11 TRUNCATE (CHAR STRING)\n.*                                       12 %TIME\n         GBLC  &$_LITS(9999)           LITERALS\n         GBLC  &$_CSECT(99)            CSECTs\n         GBLC  &$_LITS_CSECT(9999)     CSECT OF LITERALS\n         LCLA  &I,&J,&L,&N,&FLAG,&LEN2,&STRBLANKS\n         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC,&NUMERIC\n         LCLC  &LABEL,&LQ,&STR,&TO1,&TO2,&P1S,&P2C,&P2L,&P3C,&P3L\n         LCLC  &LIT,&ALLFEAT,&OPT2,&OPT3\n         LCLC  &LOCTR1,&SYSECT2\n.* MNOTE *,'CSECT_NO=&$_CSECT_NO CSECT1=&$_CSECT(1) CSECT2=&$_CSECT(2) X\n               CSECT3=&$_CSECT(3) .'\n         AIF   (T'&INTO EQ 'O' AND N'&SYSLIST EQ 1                     X\n               AND '&SYSLIST(1,1)' EQ 'GENERATE').GENL\n&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS\n&LQ      SETC  'L'''                   LENGTH ATTRIBUTE\n&STR     SETC  '  R&STRING_MACRO_VERSION'\n.*MNOTE ' &$_CSECT_NO &$_CSECT(&$_CSECT_NO) .'\n&SYSECT2 SETC  '&SYSECT'\n         AIF   ('&SYSECT' NE '').CSECT21\n&SYSECT2 SETC  'NO_NAME'\n.CSECT21 ANOP\n         AIF   (&$_CSECT_NO GT 0).CSECT22\n&$_CSECT_NO SETA 1\n&$_CSECT(1) SETC '&SYSECT2'\n.CSECT22 ANOP\n&I       SETA  1\n.*loop\n.CSECT23 ANOP\n         AIF   ('&$_CSECT(&I)' EQ '&SYSECT2').CSECT27\n&I       SETA  1+&I\n         AIF   (&I LE &$_CSECT_NO).CSECT23\n.*endloop\n&$_CSECT_NO SETA &I\n&$_CSECT(&I) SETC '&SYSECT2'\n.*MNOTE ' &$_CSECT_NO &$_CSECT(&I) .'\n.CSECT27 ANOP                                         <=== New line\n         AIF   (&I EQ 1).CSECT28                      <=== New line\n.**      AIF   ('&SYSECT' EQ '&$_CSECT(&I)').CSECT28\n&STR     SETC  '_'.'&SYSECT2'          $STRING_CSECT2\n.CSECT28 ANOP\n&NAME    BAS   R14,$STRING&STR         CALL @STRING SUB-ROUTINE\n         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR\n         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR\n         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)\n         DC    AL2((&LABEL.P-*)/2)     OFFSET TO FIELD DESCRIPTORS\n&LOCTR1  SETC  '&SYSLOC'\n         AIF   ('&SYSLOC' NE '').LOCTR1X\n&LOCTR1  SETC  'LOCTR_'.'NO_NAME'\n&LOCTR1  LOCTR                         IN-LINE CODE IN FIRST CSECT\n.*MNOTE 1,'LOCTR1=&LOCTR1'\n.LOCTR1X ANOP\n         AIF   (D'$LITERAL).LOCTR2     NOT FIRST TIME, JUMP\n$LTORG   LOCTR                         ADDRESSABLE CONSTANTS\n$FARRTNE LOCTR                         FAR ROUTINES\n.LOCTR2  AIF   ('&SYSECT2' NE '&$_CSECT(1)').LOCTR3\n$LITERAL LOCTR                         NON-ADDRESSABLE CONSTANTS\n.LOCTR3  AIF   ('&SYSECT2' EQ '&$_CSECT(1)').LOCTR5\n&STR     SETC  '$LTORG_&$_CSECT(&I)'\n         AIF   (D'&STR).LOCTR4         NOT FIRST TIME, JUMP\n&STR     LOCTR                         ADDRESSABLE CONSTANTS\n&STR     SETC  '$FARRTNE_&$_CSECT(&I)'\n&STR     LOCTR                         FAR ROUTINES\n.LOCTR4  ANOP\n&STR     SETC  '$LITERAL_&$_CSECT(&I)'\n&STR     LOCTR                         NON-ADDRESSABLE CONSTANTS\n.LOCTR5  ANOP\n.*once   DS    0H\n&TO1     SETC  '&INTO(1)'\n&TO2     SETC  '&LQ&INTO'\n         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX\n         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)\n&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)\n.PUNTO3  ANOP\n&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)\n         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)\n&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1))\n.PUNTO8  ANOP\n&LABEL.P DC    S(&TO1,&TO2)\n.*--------------------------------------------------------------------*\n.*-------      FIELDS       ------------------------------------------*\n.*--------------------------------------------------------------------*\n&I       SETA  1\n.*LOOP\n.LOOP1   ANOP\n         ACTR  200                            SYSDEBUG/DIAG055\n         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS\n&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01\n.*--------------------------------------------------------------------*\n.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         *\n.*--------------------------------------------------------------------*\n&P1S     SETC  '&SYSLIST(&I,1)'\n&P2L     SETC  '0'                     INPUT LENGTH\n&P3L     SETC  '0'                     OUTPUT LENGTH\n         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES\n         AIF   ('&SYSLIST(&I,1)' EQ '%TIME').FLD190 %TIME\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)\n         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250\n&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)\n.FLD115  ANOP\n.*\n         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200\n.*\n.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)\n.*\n&L       SETA  1\n.*--LOOP\n.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133\n&L       SETA  &L+1\n         AIF   (&L LT K'&P1S).FLD131\n.*--ENDLOOP\n&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF\n         AGO   .FLD134\n.FLD133  ANOP\n&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE\n.FLD134  ANOP\n.*\n         AIF   (NOT D'&P2L).FLD140\n&P2C     SETC  T'&P2L\n.*MNOTE *,'&P1 &P2C'\n         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220\n         AIF   ('&P2C' EQ 'G').FLD210  FL2\n.FLD140  ANOP\n.*\n.*       EXTRACT PSATOLD FROM PSATOLD-PSA\n.*\n&L       SETA  1\n.*--LOOP\n.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143\n         AIF   ('&P2L'(&L,1) EQ '+').FLD143\n&L       SETA  &L+1\n         AIF   (&L LT K'&P2L).FLD141\n.*--ENDLOOP\n&P2L     SETC  '&LQ&P2L'               L'ABCDEF\n         AGO   .FLD300\n.FLD143  ANOP\n&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA\n         AGO   .FLD300\n.*\n.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800\n&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12\n         AIF   (&LAST).FLD186\n         DC    X'60',AL1(&P2L)         BLANKS\n         AGO   .LIT90\n.FLD186  DC    X'E0',AL1(&P2L),0S(0)   BLANKS\n         AGO   .LIT90\n.*\n.FLD190  AIF   (N'&SYSLIST(&I) GT 2).FLD992\n&P1S     SETC  '1(14)'                 %TIME\n&$_FEAT(12) SETB 1                     %TIME\n&P2L     SETC  '12'                    hh:mm:ss.hh\n         AIF   (N'&SYSLIST(&I) EQ 1).FLD1905\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD1904\n&P2L     SETC  '&SYSLIST(&I,2)'        5,8,11,12\n&L       SETA  &SYSLIST(&I,2)\n         AIF   (&L EQ 5 OR &L EQ 8 OR &L EQ 11 OR &L EQ 12).FLD1905\n.FLD1904 MNOTE 8,'Second sub-parameter is invalid: &SYSLIST(&I)'\n.FLD1905 ANOP\n.*MNOTE 1,'FLD1905 &SYSLIST(&I) &P1S &P2L '\n         AGO   .FLD800\n.*--------------------------------------------------------------------*\n.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    *\n.*--------------------------------------------------------------------*\n.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED\n&P2C     SETC  '&SYSLIST(&I,2)'\n         AGO   .FLD220\n.*T'&P1=G\n.FLD210  ANOP\n&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'\n&P2C     SETC  'FL&L'                  T'&P1 = 'G'\n.*\n.FLD220  ANOP\n&P2L     SETC  '0&P2C'                 (R2) LENGTH\n         AIF   ('&P2C'(1,1) EQ '(').FLD300\n&P2L     SETC  '&P2C'                  3(R2) LENGTH\n         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300\n&P2L     SETC  '0'\n&PACKED  SETB  ('&P2C' EQ 'P')\n         AIF   (&PACKED).FLD290\n&P2L     SETC  '1'\n         AIF   ('&P2C' EQ 'FL1').FLD240\n&P2L     SETC  '3'\n         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240\n&P2L     SETC  '7'\n         AIF   ('&P2C' EQ 'FL3').FLD240\n&P2L     SETC  '15'\n         AIF   ('&P2C' EQ 'F').FLD240\n&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD\n         AGO   .FLD300\n.*\n.FLD240  ANOP                          BINARY VARIABLE\n&BIN     SETB  1\n         AGO   .FLD300\n.*\n.FLD250  ANOP                          REGISTER CONTENT\n&REG     SETB  1\n         AGO   .FLD300\n.*\n.FLD290  ANOP                          PACKED\n&P2L     SETC  '1'\n.*--------------------------------------------------------------------*\n.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   *\n.*--------------------------------------------------------------------*\n.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800\n&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL\n&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE\n         AIF   (&HEX OR &TRUNC).FLD800\n.*\n&P3C     SETC  '&SYSLIST(&I,3)'\n&P3L     SETC  '248'\n         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308\n&P3L     SETC  '249'\n         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308\n&P3L     SETC  '250'\n         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308\n&P3L     SETC  '251'\n         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308\n&P3L     SETC  '252'\n         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308\n&P3L     SETC  '253'\n         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308\n&P3L     SETC  '0'\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310\n         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'\n         AGO   .FLD310\n.FLD308  ANOP\n&$_FEAT(5) SETB 1                      JDATE\n         AGO   .FLD800\n.*--LOOP\n.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) NE 'L').FLD311\n&LEFT    SETB  1\n         AGO   .FLD318\n.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312\n&ZERO    SETB  1\n         AGO   .FLD318\n.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993       nn in RnnB is not num\n         AIF   ('&P3C'(1,1) GT '9').FLD993       nn in RnnB is not num\n&P3L     SETC  '&P3L'.'&P3C'(1,1)\n.FLD318  ANOP\n.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'\n&P3C     SETC  '&P3C '(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER\n         AIF   (K'&P3C GT 0).FLD310\n.*--ENDLOOP\n         AIF   (&P3L GT 16).FLD993               nn in RnnB is too big\n.*--------------------------------------------------------------------*\n.FLD800  ANOP\n&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))\n&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))\n&LEFT    SETB  (&LEFT AND &NUMERIC)\n         AIF   (NOT &NUMERIC).FLD810\n         AIF   (&LEFT OR '&P3L' NE '0').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))\n         AIF   (&REG).FLD810\n&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'FL1').FLD810\n&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH\n.FLD810  ANOP\n&FLAG    SETA  &HEX*8+&BIN*4+&PACKED*2+&REG*1\n&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L\n&$_FEAT(2) SETB (&$_FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)\n&$_FEAT(3) SETB (&$_FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)\n&$_FEAT(4) SETB (&$_FEAT(4) OR &PACKED)               PACKED\n&$_FEAT(6) SETB (&$_FEAT(6) OR &BIN)                  BINARY\n&$_FEAT(7) SETB (&$_FEAT(7) OR (&HEX AND NOT &REG))   HEX\n&$_FEAT(8) SETB (&$_FEAT(8) OR &NUMERIC)              BIN,PACKED\n&$_FEAT(9) SETB (&$_FEAT(9) OR (&LEFT AND &NUMERIC))\n&$_FEAT(10) SETB (&$_FEAT(10) OR &ZERO)\n&$_FEAT(11) SETB (&$_FEAT(11) OR &TRUNC)\n&BIN     SETB  0                    RESET FLAGS\n&HEX     SETB  0                    RESET FLAGS\n&REG     SETB  0                    RESET FLAGS\n&PACKED  SETB  0                    RESET FLAGS\n&LEFT    SETB  0                    RESET FLAGS\n&ZERO    SETB  0                    RESET FLAGS\n&TRUNC   SETB  0                    RESET FLAGS\n         AIF   (&FLAG GE 10).FLD995\n         AIF   (&LAST).FLD816\n         DC    X'0&FLAG',AL1(&LEN2),SL2(&P1S,&P2L)\n         AGO   .LIT99\n.FLD816  DC    X'8&FLAG',AL1(&LEN2),SL2(&P1S,&P2L),0S(0)\n         AGO   .LIT99\n.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'\n         AGO   .LIT99\n.FLD992  MNOTE 12,'Too many sub-operands: &SYSLIST,(&I)'\n         AGO   .LIT99\n.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''\n         AGO   .LIT99\n.FLD995  MNOTE 8,'Invalid Combination of Attributes: &SYSLIST(&I)'\n         AGO   .LIT99\n.*--------------------------------------------------------------------*\n.*------------ LITERALS ----------------------------------------------*\n.*--------------------------------------------------------------------*\n.LIT00   ANOP\n&LIT     SETC  'C&SYSLIST(&I)'\n         AGO   .LIT09\n.LIT01   ANOP\n&LIT     SETC  '&SYSLIST(&I)'\n.LIT09   ANOP                              calculate length of literal\n&J       SETA  3\n&L       SETA  0\n         ACTR  K'&LIT+K'&LIT+100\n         AIF   ('&LIT'(1,1) EQ 'X').LIT11X\n.*--LOOP\n.LIT11C AIF ('&LIT'(&J,1) NE '''' AND '&LIT'(&J,1) NE '&&'(1,1)).LIT12C\n&J       SETA  &J+1\n.LIT12C  ANOP\n&J       SETA  &J+1\n&L       SETA  &L+1\n         AIF   (&J LT K'&LIT).LIT11C\n.*--ENDLOOP\n         AGO   .LIT15\n.*--LOOP\n.LIT11X  AIF   ('&LIT'(&J,1) EQ ',').LIT12X\n&L       SETA  &L+1\n.LIT12X  ANOP\n&J       SETA  &J+1\n         AIF   (&J LT K'&LIT).LIT11X\n.*--ENDLOOP\n&L       SETA  (&L+1)/2\n.LIT15   ANOP                               generate in-line literal\n         AIF   (&L GT 5).LIT40\n         AIF   (&LAST).LIT16\n         DC    X'4&L',&LIT\n         AGO   .LIT90\n.LIT16   DC    X'C&L',&LIT,0S(0)\n         AGO   .LIT90\n.LIT40   ANOP                                  check literal table\n         AIF   (&$_LIT EQ 0).LIT50\n&N       SETA  1\n         ACTR  &$_LIT*3+200\n         AIF   (&$_CSECT_NO GT 1).LIT42\n.*--loop\n.LIT41   AIF   ('&LIT' EQ '&$_LITS(&N)').LIT80       LOOP\n&N       SETA  &N+1                                  LOOP\n         AIF   (&N LE &$_LIT).LIT41                  LOOP\n.*--endloop\n         AGO   .LIT50\n.LIT42   ANOP\n.*--loop\n.LIT422  AIF   ('&$_LITS_CSECT(&N)' EQ '&SYSECT2' AND                  X\n               '&LIT' EQ '&$_LITS(&N)').LIT80 LOOP\n&N       SETA  &N+1                                  LOOP\n         AIF   (&N LE &$_LIT).LIT422                 LOOP\n.*--endloop\n.LIT50   ANOP\n&$_LIT   SETA  &$_LIT+1\n&$_LITS(&$_LIT) SETC '&LIT'\n&$_LITS_CSECT(&$_LIT) SETC '&SYSECT2'\n.LIT55   ANOP\n.*NOTE 0,' &$_LIT &$_LITS_CSECT(&$_LIT) &SYSECT'\n.*NOTE 0,'&$_CSECT_NO &$_CSECT(1) &$_CSECT(2) &$_CSECT(3) &$_CSECT(4)'\n.**            &$_LITS(9999)           LITERALS\n&N       SETA  &$_LIT\n.LIT80   ANOP                               generate remote literal\n&N       SETA  &N+1000\n         AIF   (&LAST).LIT86\n         DC    X'40',AL1(&L),AL2($LIT&N-*)\n         AGO   .LIT90\n.LIT86   DC    X'C0',AL1(&L),AL2($LIT&N-*),0S(0)\n.LIT90   ANOP\n&$_FEAT(1) SETB 1                      LITERAL\n.LIT99   ANOP\n.*--------------------------------------------------------------------*\n&I       SETA  1+&I                              LOOP\n         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP\n.*ENDLOOP\n&LOCTR1  LOCTR\n         AGO   .MEND\n.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'\n         AGO   .MEND\n.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'\n         AGO   .MEND\n.**********************************************************************\n.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           *\n.**********************************************************************\n.GENL    ANOP\n         AIF   (N'&SYSLIST(1) GT 3).GENL1R\n&OPT2    SETC  '&SYSLIST(1,2)'\n         AIF   ('&OPT2' NE '' AND '&OPT2' NE 'AR_MODE'                 X\n               AND '&OPT2' NE 'NO_CSECT').GENL1R\n&OPT3    SETC  '&SYSLIST(1,3)'\n         AIF   ('&OPT3' NE '' AND '&OPT3' NE 'LOCTR').GENL1R\n         AIF   ('&OPT2' EQ 'NO_CSECT' AND '&OPT3' EQ 'LOCTR').GENL1R\n         AGO   .GENL1D\n.GENL1R  MNOTE 12,'Invalid GENERATE options, default used'\n&OPT2    SETC  ''\n&OPT3    SETC  ''\n.GENL1D  ANOP\n&STRBLANKS SETA 2\n         AIF   (D'$LTORG).GENL1F             CSECT-ONLY\n&$_FEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1\n.GENL1F  ANOP\n&ALLFEAT SETC  '&$_FEAT(1)&$_FEAT(2)&$_FEAT(3)&$_FEAT(4)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(5)&$_FEAT(7)&$_FEAT(6)&$_FEAT(8)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(9)&$_FEAT(10)&$_FEAT(11)&$_FEAT(12)'\n&STR     SETC  '&STRING_MACRO_VERSION'\n         MNOTE *,'STRING R&STR - FEATURES GENERATED: &ALLFEAT'\n         AIF   (&$_LIT EQ 0).GENL3\n&STR     SETC  '*CSECT'\n.*LOOP\n.GENL2   ANOP                                LOOP\n&N       SETA  &N+1                          LOOP\n&I       SETA  &N+1000                       LOOP\n.*MNOTE *,'&$_LITS_CSECT(1) &$_LITS_CSECT(&N) &N &I'\n         AIF   ('&STR' EQ '&$_LITS_CSECT(&N)').GENL2L\n&STR     SETC  '&$_LITS_CSECT(&N)'           LOOP\n&LOCTR1  SETC  '$LITERAL'                    LOOP\n         AIF   ('&$_CSECT(1)' EQ '&$_LITS_CSECT(&N)').GENL2D\n&LOCTR1  SETC  '$LITERAL_&STR'               LOOP\n.GENL2D  ANOP                                LOOP\n&LOCTR1  LOCTR\n.GENL2L  ANOP                                LOOP\n$LIT&I   DC    &$_LITS(&N)\n         AIF   (&N LT &$_LIT).GENL2          LOOP\n.*ENDLOOP\n.GENL3   ANOP\n         AIF   ('&OPT2' EQ 'NO_CSECT').GENL8\n&ARMODE  SETB  ('&OPT2' EQ 'AR_MODE')\n.**********************************************************************\n.*                                                                    *\n.*       STRING SUB-ROUTINE                                           *\n.*                                                                    *\n.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         *\n.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&OPT3' EQ 'LOCTR').GENL4L\n@STRING  CSECT\n@STRING  RMODE ANY\n         AGO   .GENL4X\n.GENL4L  PUSH  USING                   GENERATE,LOCTR\n         DROP\n@STRING@ LOCTR\n@STRING  DS    0H                      ALIGNMENT\n.GENL4X  ANOP\n@00      EQU   0                       WORK REGISTER\n@01      EQU   1                       WORK REGISTER\n@02      EQU   2                       WORK REGISTER\n@03      EQU   3                       WORK REGISTER\n@04      EQU   4                       WORK REGISTER\n@05      EQU   5                       WORK REGISTER\n@06      EQU   6                       WORK REGISTER\n         AIF   (NOT &ARMODE).ARMODE1X\n@07      EQU   7                       WORK REGISTER\n@08      EQU   8                       WORK REGISTER\n@09      EQU   9                       WORK REGISTER\n@10      EQU   10                      WORK REGISTER\n@11      EQU   11                      WORK REGISTER\n@12      EQU   12                      WORK REGISTER\n.ARMODE1X ANOP\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         B     @STR003                 BRANCH AROUND EYE-CATCHER\n         AIF   (&ARMODE).ARMODE2Y\n         DC    C'@STRING/370 R&STRING_MACRO_VERSION &ALLFEAT',0H'0'\n@STR003  STM   @14,@06,12(@13)         Save caller's registers\n         SLR   @06,@06                 R6=0\n&LAE     SETC  'LA'\n         AGO   .ARMODE2X\n.ARMODE2Y ANOP\n         DC    C'@STRING/390 R&STRING_MACRO_VERSION &ALLFEAT',0H'0'\n@STR002  DC    H'2'\n@STR003  STM   @14,@12,12(@13)         SAVE REGS (DEBUGGING ONLY)\n.*+++    BSM   @14,0                   Set AMODE when invoked via BAL\n         AH    @14,@STR002-@STRING(@15,0) POINT PAST PARM-LIST OFFSET\n         BAKR  @14,0                   SAVE REGS AND RETURN ADDRESS\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         LAE   @06,0                   R6=0 AR6=0\n         CPYA  @14,@06                 AR14=0\n         CPYA  @15,@06                 AR15=0\n&LAE     SETC  'LAE'\n.ARMODE2X ANOP\n         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST 1/2 OFFSET\n         ALR   @06,@06                 PICK UP PARM-LIST OFFSET\n         ALR   @06,@14                 R6 NOW POINTS TO PARM LIST\n         USING @STRSCON,@06\n         &LAE  @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         &LAE  @04,0(,@02)             KEEP ADDRESS OF \"INTO\" FIELD\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         &LAE  @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         LR    @05,@02                 KEEP LENGTH OF \"INTO\" FIELD\n         CR    @05,@04                 END ADDRESS?\n         BL    @STR282                 NO, JUMP\n         SR    @05,@04                 CALCULATE LENGTH\n         AIF   (NOT &ARMODE).ARMODE5N\n@STR282  MSTA  @04                     SAVE R4,R5 ON LINKAGE STACK\n.*SLAC   DC    X'B247,0040'            SLAC assembler error\n         AGO   .ARMODE5X\n.ARMODE5N ANOP\n@STR282  ST    @04,8(,@13)             SAVE ADDRESS FOR LATER\n.ARMODE5X ANOP\n.**********************************************************************\n.*       MOVE FIELDS TO OUTPUT AREA                                   *\n.**********************************************************************\n         &LAE  @06,@STRNEXT            POINT TO 1ST FIELD DESC\n         USING @STRPARM,@06\n.*LOOP\n@STR310  EQU   *\n         AIF   (NOT &$_FEAT(1)).FEAT1A\n         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?\n         BO    @STR372                 YES, JUMP\n.FEAT1A  ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23A\n         TM    @STRFLAG,@STRREG        REGISTER?\n         BO    @STR323                 YES, JUMP\n.FEAT23A ANOP\n         AIF   (NOT &$_FEAT(12)).FEAT12A\n         CLI   @STRSCON,X'E0'          IS IT %TIME ?\n         BE    @STR378                 YES, JUMP\n.FEAT12A ANOP\n.*\n.*       IT'S A FIELD (SCON)\n.*\n         &LAE  @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         AIF   (&$_FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)\n         LTR   @03,@02                 KEEP/TEST LENGTH\n         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT\n         AGO   .FEAT9E2\n.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH\n         BP    @STR313                 LENGTH POSITIVE, JUMP\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK\n@STR313  EQU   *\n.FEAT9E2 ANOP\n         &LAE  @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         CR    @03,@02                 END ADDRESS?\n         BL    @STR314                 NO, JUMP\n         LA    @00,X'0080'             PSA ADDRESS\n         CLR   @02,@00                 PSA REFERENCE?\n         BL    @STR314                 YES, JUMP\n         SR    @03,@02                 CALCULATE LENGTH\n@STR314  EQU   *\n         AIF   (NOT &$_FEAT(6)).FEAT6A\n         TM    @STRFLAG,@STRBIN        BINARY FIELD?\n         BO    @STR328                 YES, JUMP\n.FEAT6A  ANOP\n         AIF   (NOT &$_FEAT(4)).FEAT4A\n         TM    @STRFLAG,@STRPACK       PACKED FIELD?\n         BO    @STR351                 YES, JUMP\n.FEAT4A  ANOP\n         AIF   (NOT &$_FEAT(7)).FEAT7A\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BO    @STR376                 YES, JUMP\n.FEAT7A  ANOP\n.*\n.*       TRUNCATE CHARACTER STRING\n.*\n         AIF   (NOT &$_FEAT(11)).FEAT11A\n         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN\n         BNE   @STR390                 NO STRING TRUNCATION, JUMP\n         &LAE  @01,0(@03,@02)          FIRST BYTE AFTER FIELD\n@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP\n         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP\n         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP\n         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP\n         B     @STR398                 BLANK FIELD, DO NOT EDIT\n         AGO   .FEAT11B\n.FEAT11A ANOP\n         AIF (&$_FEAT(2)+&$_FEAT(3)+&$_FEAT(4)+&$_FEAT(6) EQ 0).FEAT11B\n         B     @STR390                 EDIT\n.FEAT11B ANOP\n.*\n.*       REGISTER (R0-R13)\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23B\n         AIF   (NOT &ARMODE).ARMODE7N\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         CLI   @STRSCON+1,@06          IS THIS R7-R13?\n         BH    @STR323R                YES, JUMP\n         LR    @07,@01                 SAVE R1 (R)\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @00,@06                 RELOAD CALLER'S R0-R6\n         EX    @07,@STR323L            COPY R0-R6 VALUE\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         B     @STR323T\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323R EQU   *\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n         AGO   .ARMODE7X\n.ARMODE7N ANOP\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n         CLI   @STRSCON+1,@06+1        IS THIS R7-R13?\n         BNL   @STR323T                YES, JUMP\n         SLL   @01,2                   R1= 000000BB BASE * 4\n         L     @00,20(@01,@13)         PICK UP VALUE FOR R0-R6\n.ARMODE7X ANOP\n@STR323T EQU   *\n         AIF   (NOT &$_FEAT(3)).FEAT3R REG,HEX\n         AIF   (NOT &$_FEAT(2)).FEAT2H REG,BIN\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BNO   @STR330                 NO, EDIT FWD\n.FEAT2H  ANOP\n         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK\n         LA    @03,8                   OUTPUT LENGTH\n         B     @STR376X                EDIT IN HEX\n.FEAT3R  ANOP\n         AIF   (NOT &$_FEAT(6)).FEAT23B\n         B     @STR330                 EDIT R0\n.FEAT23B ANOP\n.*\n.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)\n.*\n         AIF   (NOT &$_FEAT(6)).FEAT6B\n@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**\n@STR328  SLR   @00,@00\n         EX    @03,@STR328M            LOAD THE BINARY VARIABLE\n.FEAT6B  ANOP\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(6)).FEAT6C\n@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL\n         AIF   (NOT &$_FEAT(4)).FEAT6C\n         B     @STR361                 EDIT DWD\n.FEAT6C  ANOP\n.*\n.*       PACKED FIELD\n.*\n         AIF   (NOT &$_FEAT(4)).FEAT4B\n@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD\n@STR351  &LAE  @03,0(,@02)             FIRST BYTE OF PACKED FIELD\n         BALR  @14,0\n         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?\n         LA    @03,1(,@03)              (NEXT BYTE)\n         BNOR  @14                     NO, LOOP MORE\n         SLR   @03,@02                 GET LENGTH OF PACKED FIELD\n         BCTR  @03,0\n         EX    @03,@STRZAP             EXECUTE ZAP\n         AIF   (NOT &$_FEAT(5)).FEAT4B\n         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?\n         BNL   @STR375                 YES, JUMP\n.FEAT4B  ANOP                          PACKED\n.*\n.*       EDIT @STRDWD (BIN, REG, PACKED)\n.*\n         AIF   (NOT &$_FEAT(8)).FEAT8B\n@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH\n         LA    @03,X'003F'             MASK FOR \"AND\"\n         NR    @03,@00                 OUTPUT LENGTH\n         MVC   @STRWK16(16),@STRMASK   EDIT MASK\n.*\n.*       LEFT-JUSTIFICATION (NUMERIC)\n.*\n         AIF   (NOT &$_FEAT(9)).FEAT9B\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR367                 NO, JUMP\n         &LAE  @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         BNM   @STR362                 skip if not a negative number\n         BCTR  @01,0                   R1 = significance start ptr -1\n         MVI   0(@01),C'-'             sink negative sign in front\n@STR362  &LAE  @02,0(,@01)             FIRST STRING POSITION\n         LTR   @03,@03                 CHECK OUTPUT LENGTH\n         BNZ   @STR363                 JUMP IF NOT ZERO\n.*       L0    (LEFT JUSTIFIED, NO PADDING)\n         &LAE  @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n.*       L1-L63 (LEFT JUSTIFIED, PADDING)\n@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR364                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         AIF   (NOT &ARMODE).ARMODE8N\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 LENGTH WITH PADDING\n         AGO   .ARMODE8X\n.ARMODE8N ANOP\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 LENGTH WITH PADDING\n.ARMODE8X ANOP\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR392                 MOVE FIELD TO OUTPUT LINE\n@STR367  EQU   *\n.FEAT9B  ANOP\n         AIF   (NOT &$_FEAT(10)).FEAT10B\n         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?\n         BNO   @STR368                 NO, JUMP\n         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'\n@STR368  EQU   *\n.FEAT10B ANOP\n         &LAE  @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         BNM   @STR369                 skip if not a negative number\n         BCTR  @01,0                   R1 = significance start ptr -1\n         MVI   0(@01),C'-'             sink negative sign in front\n@STR369  &LAE  @02,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @02,@03                 FIRST STRING POSITION\n.FEAT8B  ANOP\n.*\n.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)\n.*       Short Literal (low-order 4 bits of @STRFLAG contains length)\n.*       BLANKS  (@STRSCON=ZERO)\n.*\n         AIF   (NOT &$_FEAT(1)).FEAT1B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR372  LA    @01,7                   mask for NR\n         &LAE  @02,@STRLEN2            1st byte of short literal\n         IC    @03,@STRFLAG            pick up flags+length\n         NR    @03,@01                 R3 has length of short literal\n         BNZ   @STR390                 short literal, go move it\n         SLR   @02,@02                 Clear Address Register\n         IC    @03,@STRLEN2            GET LITERAL LENGTH\n         TM    @STRFLAG,@STRX40        string of spaces?\n         BO    @STR390                 yes, go move them\n         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET\n         LA    @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS\n.FEAT1B  ANOP\n.*\n.*       CONVERT JULIAN DATE TO YYMMDD\n.*\n         AIF   (NOT &$_FEAT(5)).FEAT5F\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR375  LA    @00,248                 MASK FOR 'SLR'\n         SLR   @01,@01\n         IC    @01,@STRLEN2            248-255\n         SLR   @01,@00                 000-007\n         LA    @00,12                  L'@STR375W\n         MR    @00,@00                 COMPUTE OFFSET\n         &LAE  @01,@STR375W(@01)       ENTRY IN \"TR\" MASK TABLE\n         SLR   @03,@03\n         IC    @03,0(,@01)             LENGTH OF DATE (6, 8 OR 10)\n         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT\n         BNZ   @STR375B                NO, JUMP                    @JDT\n@STR375Z &LAE  @02,@STRBLANKS          WORK AREA\n&STRBLANKS SETA 10                     WE NEED AT LEAST 10 BLANKS\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248\n         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249\n         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250\n         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251\n         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252\n         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253\n.*       DC    AL1(6,C' ',6,7,4,5,2,3,8,8,8,8)  DDMMYY       254\n.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255\n@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'\n         DC    P'999'                  Prevent S0C7 with 90366\n@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?\n         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)\n         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20\n         BE    @STR375C                CC=01, USE CC=20\n         CLI   @STRDWD+4+1,X'50'       YY<50?\n         BL    @STR375C                YES, USE CC=20\n         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19\n@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?\n         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER\n         &LAE  @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS)\n         TM    @STRDWD+4+1,X'01'       ODD YEARS\n         BO    @STR375N                  AREN'T LEAP YEARS\n         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992\n         BNM   @STR375L                MIXED IN 1982/1990\n.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD\n@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?\n         BNH   @STR375L                NO, JUMP\n         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD\n.*--LOOP WHILE DDD > 0\n@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH\n         LA    @02,2(,@02)             NEXT ENTRY IN \"MONTHS\" TABLE\n         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD\n         BP    @STR375L\n.*--ENDLOOP\n         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST \"SP\" INSTRUCTION\n         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??\n         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD\n         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD\n         MVC   @STRWK16+8(1),1(@01)    SEPARATOR\n         &LAE  @02,@STRWK16+9          WORK AREA\n         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK\n         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT\n.FEAT5F  ANOP                          JDATE\n.*\n.*       HEX STRING\n.*\n         AIF   (NOT &$_FEAT(7)).FEAT7B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK\n@STR376  LA    @00,8                   MAX LENGTH\n         CLR   @03,@00                 CHECK LENGTH\n         BNH   @STR376B                JUMP IF LE 8\n         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH\n@STR376B LR    @01,@03                 INPUT LENGTH\n         BCTR  @01,0\n         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE\n         ALR   @03,@03                 OUTPUT LENGTH\n         AGO   .FEAT37B\n.FEAT7B  ANOP\n         AIF   (NOT &$_FEAT(3)).FEAT37C\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n.FEAT37B ANOP\n@STR376X &LAE  @02,@STRWK16            WORK AREA\n         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'\n.FEAT37C ANOP\n.*\n.*       %TIME\n.*\n         AIF   (NOT &$_FEAT(12)).FEAT12B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STRTIME DC    X'4021207A20207A20204B20204000' 0X:XX:XX.XX\n@STR378  LR    @02,@15                 SAVE BASE REG\n         TIME  DEC                     GET HHMMSSHH\n         LR    @15,@02                 RESTORE BASE REG\n         ST    @00,@STRDWD             STORE HHMMSSHH\n         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK\n         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS.HH\n         &LAE  @02,@STRWK16+1          WORK AREA\n         LA    @03,12                  HH:MM:SS.HH+ SPACE\n ORG *-4\n         LH    @03,@STRFLEN            length is 5 8 11 12\n.FEAT12B ANOP\n.*MOVE\n@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR391                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         AIF   (NOT &ARMODE).ARMODE39N\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 PASS REMAINING LENGTH\n         AGO   .ARMODE39X\n.ARMODE39N ANOP\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 PASS REMAINING LENGTH\n.ARMODE39X ANOP\n         LTR   @02,@02                 BLANKS?\n         BNZ   @STR392                 NO, JUMP\n         SLR   @03,@03                 YES, ZERO LENGTH\n@STR392  ICM   @03,B'1000',@STRBLANKS  PAD WITH BLANKS\n         AIF   (NOT &ARMODE).ARMODE44N\n         MVCL  @08,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@08                 NEW POINTER IN OUTPUT LINE\n         AGO   .ARMODE44X\n.ARMODE44N ANOP\n         MVCL  @00,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@00                 NEW POINTER IN OUTPUT LINE\n.ARMODE44X ANOP\n@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR\n         BO    @STR399                 Done, exit\n         AIF   (NOT &$_FEAT(1)).FEAT1C\n         TM    @STRFLAG,@STRLIT+@STRX40 literal or spaces?\n         BM    @STR398L                Literal, not spaces\n         BZ    @STR398X                Neither literal nor spaces\n         LA    @06,@STRSCON            2-byte entry for blank spaces\n         B     @STR310                 PROCESS NEXT ENTRY\n@STR398L LA    @01,7                   mask for NR\n         IC    @03,@STRFLAG            pick up flags+length\n         NR    @03,@01                 R3 has length of short literal\n         BZ    @STR398T                not an in-line literal, jump\n         LA    @06,@STRLEN2(@03)       Skip VL parm for in-line literal\n         B     @STR310                 PROCESS NEXT ENTRY\n@STR398T LA    @06,@STRFLEN            4-byte parm for remote literal\n         B     @STR310                 PROCESS NEXT ENTRY\n.FEAT1C  ANOP\n@STR398X LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY\n         B     @STR310                 PROCESS NEXT ENTRY\n.*ENDLOOP\n.*\n.*       END-OF-LINE PROCESSING - PAD WITH BLANKS\n.*\n@STR399  SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n.***     DROP  @06,@13,@15\n         AIF   (&ARMODE).ARMODE52Y\n         LA    @14,2                   INCREMENT\n         AL    @14,12(,@13)            RETURN ADDRESS\n         LR    @15,@04                 CURRENT POINTER IN OUTPUT FIELD\n         SL    @15,8(,@13)             CALCULATE LENGTH USED\n         MVCL  @04,@00                 PAD WITH BLANKS\n         LM    @00,@06,20(@13)         RESTORE WORK REGISTERS\n         STM   @06+1,@13-1,48(@13)     MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         BR    @14                     RETURN TO CALLER\n         AGO   .ARMODE52X\n.ARMODE52Y ANOP\n         LA    @15,3                   MODIFIABLE AREA\n         ESTA  @14,@15                 R14 = START OF OUTPUT AREA\n         LR    @15,@04                 END OF OUTPUT AREA\n         SR    @15,@14                 R15 = LENGTH USED IN OUTPUT AREA\n         MVCL  @04,@00                 PAD WITH BLANKS\n         EREG  @00,@14                 RESTORE WORK REGISTERS\n         STM   @14,@12,12(@13)         MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         PR                            RETURN TO CALLER\n.ARMODE52X ANOP\n.*\n         AIF   (NOT (&$_FEAT(3) OR &$_FEAT(7))).FEAT37T\n@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION\n.FEAT37T ANOP\n         AIF   (NOT &$_FEAT(8)).FEAT8T\n@STRMASK DC    X'4020202020202020,2020202020202120'\n.FEAT8T  ANOP\n.**********************************************************************\n.*       Convert S-con to address                                     *\n.*             Input: GPR2 points to an S-CON in the remote parm list *\n.*             Output: GPR2 contains the address                      *\n.**********************************************************************\n@STRS2A  SLR   @00,@00\n         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD\n         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....\n         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)\n         AIF   (&ARMODE).ARMODE88Y\n         CLI   0(@02),@06*16+15        R7-R13?\n         BH    @STRS2A3                YES, JUMP\n.*BASE REG IS R0-R6\n         LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A2                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n@STRS2A2 SLL   @02,2                   R2= 000000BB BASE * 4\n         L     @02,20(@02,@13)         PICK UP BASE REG VALUE\n         LA    @02,0(@02,@01)          ADD BASE REG VALUE TO DISPL\n         BR    @14\n.*BASE REG IS R7-R13\n@STRS2A3 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EX    @02,@STRS2A4            ADD BASE REG VALUE TO DISPL\n         BR    @14\n@STRS2A4 LA    @02,0(*-*,@01)          ADD BASE REG VALUE TO DISPL\n         AGO   .ARMODE88X\n.ARMODE88Y ANOP                        AR_MODE=YES\n         SLL   @00,2                   MULT BY 4\n         CLI   0(@02),@06*16+15        R7-R13?\n         BH    @STRS2A6                YES, JUMP\n.*BASE REG IS R0-R6\n         LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A5                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n         EREG  @00,@00                 POP R0\n         LAE   @02,0                   R2=0 AR2=0\n         LR    @02,@00                 PASS R0 VALUE\n         LA    @02,0(,@02)             CLEAN UP\n         BR    @14                     GOBACK\n.*BASE REG IS R1-R6\n@STRS2A5 LR    @07,@00                 SAVE R0 (B*4)\n         LR    @08,@01                 SAVE R1 (DDD)\n         LR    @09,@03                 SAVE R3\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @01,@06                 RELOAD CALLER'S R1-R6\n         EX    0,@STRS2A7-4(@07)       ADD BASE REG VALUE TO DISPL\n         LR    @03,@09                 RESTORE R3\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         BR    @14                     GOBACK\n.*BASE REG IS R7-R13\n@STRS2A6 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    0,@STRS2A7-4(@02)       ADD BASE REG VALUE TO DISPL\n         BR    @14                     GOBACK\n@STRS2A7 LAE   @02,0(@08,@01)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@02)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@03)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@04)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@05)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@06)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@07)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@08)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@09)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@10)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@11)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@12)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@13)          ADD BASE REG VALUE TO DISPL\n.ARMODE88X ANOP\n         AIF   ('&OPT3' EQ 'LOCTR').GENL7L\n@STRBLANKS DC  CL((((*+&STRBLANKS+7-@STRING)/8)*8)-(*-@STRING))' '\n         AGO   .GENL7X\n.GENL7L  ANOP\n@STRBLANKS DC  CL&STRBLANKS.' '\n.GENL7X  ANOP\n@STRING_SIZE EQU *-@STRING             SIZE OF GENERATED CSECT\n         DROP  @06,@13,@15\n.**********************************************************************\n.*       WORK AREA (CALLER'S SAVE AREA)                               *\n.**********************************************************************\n@STRSAVE DSECT                         24-BYTE WORK AREA\n         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)\n@STRWK16 DS    F'7,8,9,10'             WORK AREA\n@STRDWD  DS    D'1112'                 WORK AREA\n@STRPARM DSECT\n@STRFLAG DS    B                   +0  FORMAT, FLAGS\n@STRLAST EQU   X'80'                     LAST ENTRY\n@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET\n@STRX40  EQU   X'20'                   String of Spaces\n.*             X'0F'                   CONVERSION REQUIRED\n.*                                     or length of short literal\n@STRHEX  EQU   X'08'                     HEXADECIMAL\n@STRBIN  EQU   X'04'                     BINARY\n@STRPACK EQU   X'02'                     PACKED\n@STRREG  EQU   X'01'                     REGISTER\n@STRLEN2 DS    B                   +1  FORMAT, OUTPUT LENGTH\n.*                                     or start of short literal\n@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION\n@STRZERO EQU   X'40'                     LEADING ZEROES\n.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.\n@STRSCON DS    S                   +2  FIELD ADDRESS\n@STRFLEN DS    S                   +4  FIELD LENGTH\n@STRNEXT EQU   *                   +6\n         AIF   (NOT D'$LTORG).MEND99   CSECT-ONLY\n         AIF   (D'$STRING).MEND99      CSECT-ONLY\n$LTORG   LOCTR\n         AIF   ('&OPT3' EQ 'LOCTR').GENL9L\n         CNOP  0,4\n$STRING  BALR  @15,0                   LOCAL BASE\n         L     @15,6(@15,0)            ROUTINE ADDRESS           00\n         BR    @15                     GO TO @STRING             04\n         AGO   .GENL9\n.GENL8   ANOP                          GENERATE,NOCSECT\n&$_LIT   SETA  0                       DO NOT GENERATE LITERALS TWICE\n&$_FEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1   GENERATE=FULL\n$LTORG   LOCTR\n         CNOP  0,4\n$STRING  BALR  R15,0                   LOCAL BASE\n         L     R15,6(R15,0)            ROUTINE ADDRESS           00\n         BR    R15                     GO TO @STRING             04\n.GENL9   ANOP\n         DC    V(@STRING)              ROUTINE ADDRESS           06\n.* MNOTE   1,'&$_CSECT_NO '\n         AIF   (&$_CSECT_NO EQ 1).MEND\n&I       SETA  2\n.*loop\n.GENL8K  ANOP\n.* MNOTE   1,'&$_CSECT(&I) '\n         AIF   ('&$_CSECT(&I)' EQ '').MEND\n&STR     SETC  '&$_CSECT(&I)'\n$LTORG_&STR LOCTR\n         CNOP  0,4\n$STRING_&STR BALR R15,0                LOCAL BASE\n         L     R15,6(R15,0)            ROUTINE ADDRESS           00\n         BR    R15                     GO TO @STRING             04\n         DC    V(@STRING)              ROUTINE ADDRESS           06\n&I       SETA  1+&I\n         AGO   .GENL8K\n.*endloop\n         AGO   .MEND\n.GENL9L  POP   USING                   GENERATE,LOCTR\n$STRING  BASR  R15,0                   Local Base\n         AH    R15,6(R15,0)            Add offset to @STRING routine\n         BR    R15                     Branch to @STRING\n         DC    Y(@STRING-$STRING-2)    Offset to @STRING Routine\n.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99\n         POP   PRINT\n.MEND99  MEND\n         EJECT\n**********************************************************************\n**********************************************************************\n********* MVS TEST PROGRAM FOR THE 'STRING' MACRO ********************\n**********************************************************************\n**********************************************************************\n**       STRING (GENERATE,AR_MODE)\n**       END\n         LCLA  &ASMH_HLASM\n         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X\n&SYSVER  SETC  'ASMH'\n&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)\n.ASMH1X  ANOP\nTESTPGM  START X'027000'\nTESTPGM  AMODE 24                      (PRE-SMS PUT)\n         BALR  R12,0\n         USING *,R12\n LOAD EP=SYSDEBUG,ERRET=DEBUG111\n LR R15,R0\n BASSM R14,R15\nDEBUG111 EQU *\n*STRING 1X,INTO=XXX\n*RC8     STRING ((R1),,R**B),((R1),,R22Z),((R1),,R16B),INTO=XXX\n         OPEN  (SYSPRINT,OUTPUT)\n         STRING 'Assembler is &SYSVER, DATE is &SYSDATC',INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING 'AMPERSAND=&& AND APOSTROPHE='' ',INTO=XXX\n         PUT   SYSPRINT,XXX\nRBPREFIX EQU   *\nRBINTCOD EQU   *+6,2,C'H'\n         L     R1,PSATOLD-PSA(0,0)     TCB\n         L     R1,0(,R1)               TCBRBP\n         L     R2,PSAAOLD-PSA(0,0)     ASCB\nR2ASCB   USING ASCB,R2\n         L     R8,=X'88888888'\n         STRING 'SVC',(RBINTCOD-RBPREFIX(R1),H,R3Z),                   X\n               1X,(WWWW,,T),' - ',     VV.MM OF SVC RTNE               X\n               ((R8),,X),1X,           COM-REG ADDR                    X\n               'ASID=',(R2ASCB.ASCBASID,,X),1X,                        X\n               PARM1,1X,               MAIN PGM NAME                   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n*\n         LA    R2,XXX\n         STRING 1X,INTO=((R2),8)\n         MACRO                                       JDATE MACRO\n        @JDATE &DATE                                 JDATE MACRO\n         LA    R1,=P'&DATE'                          JDATE MACRO\n*** STRING ((R1),P),2X,((R1),P),INTO=XXX\n         STRING ((R1),P,R5Z),                        JDATE MACRO       X\n               2X,((R1),P,YYMMDD),                   JDATE MACRO       X\n               2X,((R1),P,YY/MM/DD),                 JDATE MACRO       X\n               2X,((R1),P,DD/MM/YY),                 JDATE MACRO       X\n               2X,((R1),P,MM/DD/YY),                 JDATE MACRO       X\n               2X,((R1),P,YYYYMMDD),                 JDATE MACRO       X\n               2X,((R1),P,YYYY-MM-DD),               JDATE MACRO       X\n               INTO=XXX                              JDATE MACRO\n         PUT   SYSPRINT,XXX                          JDATE MACRO\n         MEND                                        JDATE MACRO\n        @JDATE 90058\n        @JDATE 91059\n        @JDATE 93060\n        @JDATE 94365\n        @JDATE 80058\n        @JDATE 84059\n        @JDATE 88060\n        @JDATE 92061\n        @JDATE 00366\n         LA    R2,1234\n         STRING 'CVTPTR=X''',(CVTPTR,4,X),'''',INTO=XXX,               X\n               ' 1234=',((R2),,R4Z)\n         PUT   SYSPRINT,XXX\n         L     R1,CVTPTR(0,0)\n         STRING 'CVTDATE=',(56(R1),P,YYMMDD),INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R0,1000\n         LA    R3,0033\n         STRING 'D1=/',D1,'/,WWWW=/',WWWW,'/',                         X\n               ((R3),,L),'/',((R3),,X),'/',((R0),,L),'/',              X\n               ((R3),,R9B),'/',INTO=XXX\n         LR    R4,R15                   LENGTH USED\n         PUT   SYSPRINT,XXX\n         STRING WWWW,                                                  X\n               (4(R13),4,X),'''',(4(R13),F),'''',                      X\n               (4(R13),F,L),'''',                                      X\n               (4(R13),F,L11),'''',                                    X\n               (4(R13),F,Z9),'''',                                     X\n               8X,'R4=',((R4),,L),      LENGTH USED                    X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING %TIME,D1,'B12345678B',5X,(CTR1,P),1X,PARM1,1X,PARM2,   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING (%TIME,5),'|',(%TIME,8),'|',(%TIME,11),'|',(%TIME,12), X\n               '|',INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R3,17\n         STRING INTO=XXX,'CCC1234A',(D1,(R3)),'.',(CTR1,P,R7Z)\n         PUT   SYSPRINT,XXX\n         STRING C'DDN2(',(D1,,T),')',X'40C1C2,C3C4',                   +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         AIF   ('&SYSVER' EQ 'ASMH').HLASM99\nPSABASE  USING PSA,R0\n         STRING 'PSATOLD=',(PSABASE.PSATOLD,,X),                       +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n.HLASM99 ANOP\n         BALR  R0,0\n         STRING 'R0=',((R0),,X),'   16(R0)=',(16(R0),4,X),INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING 'R0=',((R0),,X),'   CTR1=',(CTR1,P,R5B),INTO=XXX\n         PUT   SYSPRINT,XXX\n         SLR   R0,R0\n         STRING 'R0=',((R0),,X),'   CTR2=',(CTR2,P,L),'.',INTO=XXX\n         PUT   SYSPRINT,XXX\n*\n         CALL  TCSECT2              <- 2nd CSECT\n*\n         CALL  TCSECT3              <- 3rd CSECT\n*\nAMODE31  LA    R12,0(,R12)             BALR->BASR\n         L     R15,=A(*+X'80000006')   AMODE=31\n         BSM   0,R15                   AMODE=31\n         L     R1,=A(@STRING)          point at CSECT\n         CLC   =C'/390',11(R1)         (GENERATE,AR_MODE) ?\n         BNE   EXIT                    no, prevent S0E0\n         DSPSERV CREATE,                                               X\n               NAME==CL8'STRING00',    C'STRING00'                     X\n               BLOCKS=HDRBLKS,         SIZE IN PAGES                   X\n               STOKEN=DSPCSTKN,                                        X\n               ORIGIN=DSPCORG\n         ALESERV ADD,STOKEN=DSPCSTKN,ALET=DSPCALET\n         LAM   R8,R8,DSPCALET          POINT TO THE DATA SPACE\n         L     R8,DSPCORG              SPACE ORIGIN (0 OR 4096)\n         SAC   512                     MODE=AR\n LAM R14,R6,TESTPGM+40                 S0E0-28\n         STRING WWWW,'AR_MODE WORKED OK',INTO=(2048(R8),100)\n         LAM   R2,R2,DSPCALET          POINT TO THE DATA SPACE\n         LR    R2,R8                   SPACE ORIGIN (0 OR 4096)\n         STRING (2048+L'WWWW(R2),30,T),INTO=XXX\n         SAC   0                       MODE=AR OFF\n         PUT   SYSPRINT,XXX            AR_MODE WORKS OK\n*\nEXIT     SLR   R15,R15\n         SVC   3                       GOBACK\n*\n*        2ND CSECT\n*\nTCSECT2  CSECT\n         BAKR  R14,0\n         LR    R10,R15\n         USING TCSECT2,R10\n         STRING '----> TCSECT2 STRING <----  R516',INTO=XXX\n         PUT   SYSPRINT,XXX\n         L     R1,CVTPTR(0,0)\n         STRING 'CVTDATE=',(56(R1),4,X),',R8=',((R8),,L),INTO=XXX\n         PUT   SYSPRINT,XXX\n         PR\n         DROP\n*\n*        3RD CSECT with NO name\n*\n         CSECT                           no-name\n         ENTRY TCSECT3\nTCSECT3  BAKR  R14,0\n         LR    R12,R15\n         USING TCSECT3,R12\n         L     R10,PRT3ADDR\n         USING SYSPRINT,R10\n         STRING '----> TCSECT3 STRING <----  R517',INTO=XXX\n         PUT   SYSPRINT,XXX\n         L     R1,CVTPTR(0,0)\n         STRING 'CVTDATE=',(56(R1),4,X),',R9=',((R9),,L),INTO=XXX\n         PUT   SYSPRINT,XXX\n         PR\n         DS    0F\nPRT3ADDR DC    A(SYSPRINT)\n*\nTESTPGM  CSECT\nD1       DC    C'D1-----D1    '\nWWWW     DC    C'WWWW'\nCTR1     DC    P'1'\nCTR2     DC    P'-33'\nPARM1    DC    C'<-PARM1->'\nPARM2    DC    C'<-PARM2->'\nDSPCSTKN DS    XL8                  0  AS TOKEN\nDSPCALET DS    F                    8  ALET\nDSPCORG  DS    F                   12  ORIGIN\nHDRBLKS  DC    F'100'\nCVTPTR   EQU   0016,4,C'A'\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=121\nXXX      DS    CL121\n*\nXYZ      DSECT\n         STRING GENERATE\n**       STRING (GENERATE,NO_CSECT) -\\\n**       STRING (GENERATE,AR_MODE)  -/\n**       STRING (GENERATE,,LOCTR)\n**       STRING (GENERATE,AR_MODE,LOCTR)\n**       STRING (GENERATE,NO_CSECT,LOCTR)    invalid combination\n         YREGS\nPSA      DSECT\nPSATOLD  EQU   *+X'21C',4,C'A'\nPSAAOLD  EQU   *+X'224',4,C'A'\nASCB     DSECT\nASCBASID EQU   *+36,2,C'X'\n         END\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//GO      EXEC PGM=LOADER,PARM=PRINT,TIME=(,2)\n//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,DELETE)\n//SYSLOUT  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSDEBUG DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSMOVE": {"ttr": 5639, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//SBGOLOBM JOB (ACCT#),SYSMOVE,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(0,NE)\n//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n*PROCESS BATCH,USING(NOMAP,WARN(8))\n***********************************************************************\n*                                                                     *\n* MODULE NAME = SYSMOVE                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Unload a PDS in IEHMOVE format                   *\n*                                                                     *\n* FUNCTION = The SYSMOVE program unloads a PDS to a sequential        *\n*        data set in IEHMOVE format.  The resulting data set          *\n*        (which is DSORG=PS,RECFM=FB,LRECL=80) can be written to      *\n*        disk or tape, and later used as input to IEHMOVE to          *\n*        reload the original PDS.                                     *\n*                                                                     *\n* STATUS = R405                                                       *\n*                                                                     *\n* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *\n*                                                                     *\n* NOTES = SEE BELOW                                                   *\n*                                                                     *\n*    DEPENDENCIES = STRING Macro                                      *\n*                                                                     *\n*    AUTHORIZATION = NONE                                             *\n*                                                                     *\n*    RESTRICTIONS = NONE                                              *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            *\n*                                                                     *\n*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *\n*                IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 4K                                                 *\n*                                                                     *\n*    ATTRIBUTES = REUSABLE, RMODE 24, AMODE 24,                       *\n*                 PROBLEM STATE, KEY 8                                *\n*                                                                     *\n* OPERATION = See Below                                               *\n*                                                                     *\n*        Sample invocation JCL:                                       *\n*                                                                     *\n*            //UNLOAD EXEC PGM=SYSMOVE                                *\n*            //SYSPRINT DD SYSOUT=*                                   *\n*            //SYSUT1   DD DSN=INPUT.PDS,DISP=SHR                     *\n*            //SYSUT2   DD DSN=OUTPUT.FLAT,DISP=(,CATLG),             *\n*            // UNIT=SYSDA,SPACE=(TRK,(50,50),RLSE)                   *\n*                                                                     *\n*        Notes:                                                       *\n*                                                                     *\n*          1. SYSMOVE is fully compatible with SMS (which is not the  *\n*             case with IEHMOVE).                                     *\n*                                                                     *\n*          2. SYSMOVE imposes no restriction on the BLKSIZE of SYSUT2 *\n*             which can be any multiple of 80 you choose.  However,   *\n*             in order for IEHMOVE to reload it successfully, the     *\n*             BLKSIZE of the unloaded data set must be 800.           *\n*                                                                     *\n*          3. SYSMOVE does not support NOTE lists (as created by the  *\n*             linkage editor for load-modules in overlay format).     *\n*                                                                     *\n*          4. SYSMOVE can unload a full PDS or a single member.       *\n*             If you want to unload several PDS's and/or selected     *\n*             members, use the merge/selection capabilities of        *\n*             IEBCOPY to create a temporary PDS, then run SYSMOVE     *\n*             to unload it.                                           *\n*                                                                     *\n*          5. SYSMOVE is a convenient way to distribute a PDS         *\n*             via a network; see \"usage notes\", below.                *\n*                                                                     *\n*          6. SYSMOVE can be used recursively to distribute several   *\n*             PDSs as a single FB/80 file: unload each PDS with       *\n*             SYSMOVE into a temporary FB/80, unload the temporary    *\n*             PDS with SYSMOVE, and ship the resulting sequential     *\n*             data set.  The receiver can use IEBGENER to copy each   *\n*             member to a sequential data set and feed it to          *\n*             IEHMOVE to reload each of the initial PDSs.             *\n*                                                                     *\n*          7. unloaded PDS's in IEHMOVE format can be processed       *\n*             in CMS with the TAPEMAC and TAPPDS commands.            *\n*                                                                     *\n*                                                                     *\n* ABENDS:     U0013 OPEN Failed, probably because a DD is missing     *\n*                                                                     *\n* USAGE NOTES: See below                                              *\n*                                                                     *\n*    Using SYSMOVE to distribute a PDS on PC diskettes.               *\n*                                                                     *\n*        SYSMOVE provides a convenient way to distribute a PDS via    *\n*        PC diskette, using the following procedure:                  *\n*                                                                     *\n*          1. unload the PDS with SYSMOVE                             *\n*                                                                     *\n*          2. download the unloaded data set to a PC in EBCDIC        *\n*             using the \"RECEIVE\" command:                            *\n*                                                                     *\n*                 RECEIVE pc_file_name unloaded_data_set_name         *\n*                                                                     *\n*          3. pack the PC file with PKZIP (or equivalent)             *\n*                                                                     *\n*          4. copy the packed file to a diskette                      *\n*                                                                     *\n*          5. send the diskette out; whoever you send it to           *\n*             does not need SYSMOVE to process it.                    *\n*                                                                     *\n*       On the receiving MVS system, re-create the PDS as follows:    *\n*                                                                     *\n*          1. unpack the diskette file (if it's been packed)          *\n*                                                                     *\n*          2. upload the unpacked file in EBCDIC                      *\n*             using the \"SEND\" command:                               *\n*                                                                     *\n*                 SEND pc_file_name unloaded_data_set_name            *\n*                      recfm(fb) lrecl(80) blksize(800)               *\n*                                                                     *\n*          3. load the uploaded data set into a PDS                   *\n*             using IEHMOVE:                                          *\n*                                                                     *\n*             //RELOAD EXEC PGM=IEHMOVE,PARM='POWER=4',REGION=2M      *\n*             //SYSUT1 DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       *\n*             //DD1    DD DSN=GILBERT.UNLOAD,DISP=SHR   INPUT VOLUME  *\n*             //DD2    DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       *\n*             //SYSPRINT DD SYSOUT=*                                  *\n*                COPY      DSNAME=GILBERT.UNLOAD,                    X*\n*                          TO=3380=nonsms,                           X*\n*                          RENAME=GILBERT.MYPDS,                     X*\n*                          CATLG                                      *\n*                                                                     *\n*       NOTE:  You may NOT specify SMS-managed volumes for either     *\n*              SYSUT1 (work files) or the output volume (DD2 in       *\n*              this example).  IEHMOVE uses SVC 32 (REALLOC), not     *\n*              dynamic allocation, and SVC 32 does not support        *\n*              SMS-managed volumes.                                   *\n*                                                                     *\n*CHANGE ACTIVITY                                                      *\n*                                                                     *\n*401 Build DIRTABLE and process ALIAS entries like IEHMOVE:           *\n*        1. If an ALIAS has no corresponding member, turn off         *\n*           the ALIAS indicator in the directory entry                *\n*        2. Do not write the data pointed to by ALIAS entries,        *\n*           instead, write the directory entries immediately          *\n*           after the corresponding main member's data.               *\n*402 Print number of records and bytes written to SYSUT2              *\n*403 If a member name is specified on SYSUT1, unload only this member*\n*404 Change date format to yyyy-mm-dd                                 *\n*405 Zero last reference date in F1-DSCB                              *\n***********************************************************************\n&REL     SETC  '405'                   Current version/release\nSYSMOVE  CSECT\n         SAVE  (14,12),,'GSF Utilities - SYSMOVE R&REL'\n         LR    R12,R15\n         USING SYSMOVE,R12\n         GETMAIN R,LV=DYNAML           GET DYNAMIC STORAGE\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LA    R14,72(,R1)             CLEAR WORKING STORAGE\n         LA    R15,DYNAML-72           CLEAR WORKING STORAGE\n         SLR   R1,R1                   CLEAR WORKING STORAGE\n         MVCL  R14,R0                  CLEAR WORKING STORAGE\n         LM    R13,R1,8(R13)\n         USING DYNAM,R13\n         L     R2,0(,R1)               point to PARM field\n*\n         OPEN  MF=(E,OPENLIST)         OPEN DATA SETS\n         LTR   R15,R15                 OPEN OK?\n         BZ    TITLE1                  YES, JUMP\n         ABEND 13,REASON=(15)       <- OPEN failed\n***********************************************************************\n*                                                                     *\n*        Print the Title Line on SYSPRINT                             *\n*                                                                     *\n***********************************************************************\nTITLE1   TIME  DEC                     get time, date\n         STM   R0,R1,DWD               R0=HHMMSSHH,R1=00YYDDDF\n         LH    R3,0(,R2)               parm length\n         STRING '1GSF Utilities - SYSMOVE R&REL  ',                    X\n               (DWD+4,P,YYYY-MM-DD),2X,      YYYY-MM-DD                X\n               (DWD+0,1,X),':',(DWD+1,1,X),  HH:MM                     X\n               '  PARM=''',(2(R2),(R3)),'''',                          X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print title line\n*\n         LA    R0,JFCB1                JFCB IN DYNAMIC STORAGE\n         STCM  R0,B'0111',EXL1+1       UPDATE EXIT LIST\n         RDJFCB SYSUT2                 READ THE JFCB (SYSUT2)\n         MVC   JFCB2,JFCB1             save the SYSUT2 JFCB\n*\n         RDJFCB MF=(E,OPENDIRL)        READ THE JFCB (SYSUT1)\n*\n*        Save the member name specified on the SYSUT1 DD\n*\n         MVI   UT1MBR,FF               no member\n         TM    JFCBIND1,JFCPDS         member name specified on sysut1?\n         BNO   PASS1                   no, jump\n         NI    JFCBIND1,FF-JFCPDS      NO MEMBER\n         MVC   UT1MBR,JFCBELNM         SAVE MEMBER NAME\n***********************************************************************\n*                                                                     *\n*        READ THE DIRECTORY                                           *\n*                                                                     *\n*           1. READ SYSUT1 DIRECTORY                                  *\n*           2. COUNT DIRECTORY ENTRIES                                *\n*           3. COUNT DIRECTORY BLOCKS AFTER LOGICAL END OF DIRECTORY  *\n*                                                                     *\n***********************************************************************\nPASS1    OPEN  MF=(E,OPENDIRL),TYPE=J  OPEN DIRECTORY\n         USING PDS2,R6\n*LOOP\nPASS1A   BAL   R9,GETDIR            <- GET DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BE    PASS1F                  YES, EXIT\n         AL    R0,DIRTABLE             tally directory entry sizes\n         ST    R0,DIRTABLE             tally directory entry sizes\n         TM    PDS2INDC,PDS2ALIS       is this an alias?\n         BO    PASS1AL                 yes, jump\n         LA    R0,1                    COUNT MEMBERS\n         AL    R0,MEMBERS              COUNT MEMBERS\n         ST    R0,MEMBERS              COUNT MEMBERS\n         B     PASS1A\nPASS1AL  LA    R0,1                    COUNT ALIASES\n         AL    R0,ALIASES              COUNT ALIASES\n         ST    R0,ALIASES              COUNT ALIASES\n         B     PASS1A\n*ENDLOOP\n*LOOP\nPASS1F   GET   SYSUT1D              <- READ NEXT DIRECTORY BLOCK\n         LTR   R1,R1                   PHYSICAL END OF DIRECTORY?\n         BZ    PASS1EOD                YES, EXIT\n         LA    R0,1                    COUNT DIRECTORY BLOCKS\n         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS\n         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS\n         B     PASS1F\n*ENDLOOP\nPASS1EOD CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY\n***********************************************************************\n*                                                                     *\n*        WRITE HEADER RECORDS                                         *\n*                                                                     *\n*           1. read the JFCB and the F1-DSCB                          *\n*           2. calculate the data set size                            *\n*           3. write UNLOAD header records                            *\n*                                                                     *\n***********************************************************************\n         LA    R0,78                   LENGTH OF HEADER RECORD\n         LA    R1,HDR1REC              ADDR OF HEADER RECORD\n         BAL   R9,WRITE                WRITE FIRST RECORD\n         MVC   DS1DSNAM,JFCBDSNM       MOVE DSNAME\n         MVC   DS1DSSN,JFCBVOLS        MOVE VOLSER\n         OBTAIN CAML26                 READ F1-DSCB\n         DEVTYPE DCBDDNAM-IHADCB+SYSUT1D,DVAREA,DEVTAB\n*\n         MVC   UNLDDIR,DIRBLKS+2       NUMBER OF DIRECTORY BLOCKS\n         MVI   UNLDFLAG,X'40'          AVG BLK\n         SLR   R1,R1\n         ICM   R1,B'0011',DS1LSTAR     LAST TRACK USED\n         LA    R1,1(,R1)               NUMBER OF TRACKS USED\n         ST    R1,TRKSUSED             NUMBER OF TRACKS USED\n         SLR   R2,R2\n         ICM   R2,B'0011',DVATRKLN     TRACK LENGTH\n         MR    R0,R2                   TRACKS * TRKLN\n         STCM  R1,B'1111',UNLDSIZE     STORE RESULT\n*\n         XC    DS1REFD,DS1REFD         ZERO THE LAST REF DATE\n*\n         TM    DS1SCALO,X'80'          ALLOC IN CYLINDERS OR TRACKS?\n         BZ    HDR1DEVT                NO, SET SSIZ=0\n         SLR   R1,R1\n         ICM   R1,B'0111',DS1SCAL3     LOAD NO OF CYLS IN R1\n         TM    DS1SCALO,X'40'          AVERAGE LENGTH?\n         BZ    HDR1SQTY                NO, JUMP\n         MH    R1,DVATRK               MULTIPLY BY NO OF CYL PER TRK\nHDR1SQTY MR    R0,R2                   TRACKS * TRKLN\n         STCM  R1,B'1111',UNLDSSIZ     SECONDARY SPACE IN BYTES\n*\nHDR1DEVT MVC   UNLDDEVT,DVAUCBTY       UCB TYPE\n         LA    R0,HDR2LEN              LENGTH\n         LA    R1,HDR2REC              BACK END\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n***********************************************************************\n*                                                                     *\n*        Print Characteristics of SYSUT1 & SYSUT2                     *\n*                                                                     *\n*          INPUT PDS:                                                 *\n*            DSNAME=GILBERT.LOAD,VOL=3380=SYS157                      *\n*            RECFM=U,LRECL=0,BLKSIZE=32760                            *\n*            DIRECTORY_BLOCKS=11,MEMBERS=24,ALIASES=2                 *\n*            TRACKS_USED=22,EXTENTS_ALLOCATED=2                       *\n*                                                                     *\n*          OUTPUT SDS:                                                *\n*            DSNAME=GILBERT.UNLOAD,VOL=SER=STR319                     *\n*            RECFM=FB,LRECL=80,BLKSIZE=800                            *\n*            RECORDS=100,BYTES=8000                                   *\n*                                                                     *\n***********************************************************************\nPRT10    STRING '0INPUT PDS:',INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X\n               ',VOL=SER=',(JFCBVOLS,6),                               X\n               INTO=LINE\n         MVC   UNITNAME+8,DVAUCBTY     move device type\n         LINK  EP=IEFEB4UV,                                            X\n               PARAM=(UNITNAME,        work area                       X\n               =X'0100'),              function flags  \"7\"             X\n               MF=(E,DWD),VL=1\n         LTR   R15,R15                 OK?\n         BNZ   PRT13                   no, jump\n         LINK  EP=IEFEB4UV,                                            X\n               PARAM=(UNITNAME,        work area                       X\n               =X'2000'),              function flags  \"2\"             X\n               MF=(E,DWD),VL=1\n         LTR   R15,R15                 OK?\n         BNZ   PRT13                   no, jump\n         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X\n               ',VOL=',(UNITNAME,,T),'=',(JFCBVOLS,6),                 X\n               INTO=LINE\nPRT13    PUT   SYSPRINT,LINE           print message\n         LA    R1,RECFM                RECFM for SYSUT1\n         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'\n         STRING '   RECFM=',(RECFM,,T),                                X\n               ',LRECL=',(DS1LRECL,H,L),                               X\n               ',BLKSIZE=',(DS1BLKL,H,L),                              X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n         STRING '   Directory_blocks=',(DIRBLKS,F,L),                  X\n               ',Members=',(MEMBERS,F,L),                              X\n               ',Aliases=',(ALIASES,F,L),                              X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n         STRING '   Tracks_used=',(TRKSUSED,F,L),                      X\n               ',Extents_allocated=',(DS1NOEPV,FL1,L),                 X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n*\n         STRING '0OUTPUT SDS:',INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n         STRING '0  DSNAME=',(JFCBDSNM-INFMJFCB+JFCB2,,L),             X\n               ',VOL=SER=',(JFCBVOLS-INFMJFCB+JFCB2,,L),               X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n         LA    R1,RECFM                RECFM for SYSUT1\n         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'\n         STRING '   RECFM=FB,LRECL=80',                                X\n               ',BLKSIZE=',(DCBBLKSI-IHADCB+SYSUT2,H,L),               X\n               INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n***********************************************************************\n*                                                                     *\n*        BUILD TABLE OF DIRECTORY ENTRIES                             *\n*                                                                     *\n***********************************************************************\n         LA    R0,1                    Room for X'FF' at end of table\n         AL    R0,DIRTABLE             SIZE OF DIRECTORY ENTRIES\n         GETMAIN RU,LV=(0),BNDRY=PAGE  GET STORAGE FOR DIRECTRY ENTRIES\n         STM   R0,R1,DIRTABLE          len/addr of dir entries\n         LR    R4,R1                   point to start of table\n         OPEN  MF=(E,OPENDIRL)         re-open DIRECTORY\n         MVI   DIRENTRY,FF             FIRST TIME SWITCH FOR \"GETDIR\"\n*LOOP\nBLDTBL1  BAL   R9,GETDIR            <- GET DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BE    BLDTBL9                 YES, EXIT\n         CLI   UT1MBR,FF               select a member ?\n         BE    BLDTBL6                 no, jump\n         CLC   PDS2NAME,JFCBELNM       IS IT MY MEMBER?\n         BE    BLDTBL6                 yes, jump\nBLDTBL5  ALR   R6,R0                   ignore this mbr\n         B     BLDTBL1                 next directory entry\nBLDTBL6  LR    R5,R0                   size of dir entry\n         LR    R7,R0                   size of dir entry\n         MVCL  R4,R6                   move directory entry to table\n         B     BLDTBL1                 next directory entry\n*ENDLOOP\nBLDTBL9  MVI   0(R4),FF                mark end of table\n         CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY\n         FREEPOOL SYSUT1D              FREE BUFFERS\n         CL    R4,DIRTABLE+4           any member selected?\n         BE    EOJ                     no, exit\n***********************************************************************\n*                                                                     *\n*        Turn off ALIAS indicator in directory entries                *\n*        for which no main member is present.                         *\n*                                                                     *\n***********************************************************************\nUNALIAS  ICM   R0,B'1111',ALIASES      any ALIAS?\n         BZ    GETMBR                  no, exit\n         L     R6,DIRTABLE+4           first directory entry\n*LOOP\nUNALIAS1 TM    PDS2INDC,PDS2ALIS       is this an alias?\n         BNO   UNALIAS8                no, ignore it\n         L     R7,DIRTABLE+4           first directory entry\n         USING PDS2,R7\n*--loop\nUNALIAS2 TM    PDS2INDC,PDS2ALIS       is this an alias?\n         BO    UNALIAS3                yes, ignore it\n         CLC   PDS2TTRP,PDS2TTRP-PDS2(R6)   main mbr of my alias?\n         BE    UNALIAS8                yes, exit inner loop\nUNALIAS3 LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            SIZE OF USER DATA\n         ALR   R14,R14                 size of user data in bytes\n         LA    R7,PDS2USRD(R14)        NEXT DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BNE   UNALIAS2                NO, NEXT MEMBER\n*--endloop\n         DROP  R7                      was PDS2 (local only)\n         NI    PDS2INDC,FF-PDS2ALIS    turn off ALIAS indicator\n*\nUNALIAS8 LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            size of user data in half-words\n         ALR   R14,R14                 size of user data in bytes\n         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BNE   UNALIAS1                NO, NEXT MEMBER\n*ENDLOOP\n***********************************************************************\n*                                                                     *\n*        PROCESS DIRECTORY ENTRIES AND MEMBER DATA                    *\n*                                                                     *\n*          1.  READ DIRECTORY ENTRIES FROM \"DIRTABLE\"                 *\n*          2.  READ MEMBERS FROM DDN=SYSUT1 USING BPAM                *\n*          3.  PASS RECORDS TO \"WRITE\" ROUTINE                        *\n*          4.  Write ALIAS entry after corresponding main member      *\n*                                                                     *\n***********************************************************************\nGETMBR   GETBUF SYSUT1M,(R3)           GET ADDR OF A BUFFER\n         ST    R3,DECB1+12             UPDATE BUFFER ADDR IN DECB\n         L     R6,DIRTABLE+4           first directory entry\n*LOOP\nGETMBR1  LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            SIZE OF USER DATA\n         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY\n         TM    PDS2INDC,PDS2ALIS       is this an alias?\n         BO    GETMBR9                 yes, ignore it\n         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY\n         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY\n         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK\n         LA    R0,2+1+3                LENGTH,FLAGS,TTR\n         LA    R1,DWD                  002A,C8,00000A\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY\n         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n         MVC   TTRN(3),8(R6)           TTR\n         FIND  SYSUT1M,TTRN,C          POINT TO MEMBER\n*--LOOP\nGETMBR2  READ  DECB1,SF,SYSUT1M,*-*,'S'\n         CHECK DECB1\n         MVC   DWD(2),DCBLRECL-IHADCB+SYSUT1M\n         MVI   DWD+2,X'E0'             DATA RECORD\n         NOTE  SYSUT1M                 GET TTR\n         STCM  R1,B'1110',DWD+3        SAVE TTR\n         LA    R0,2+1+3                LENGTH,FLAGS,TTR\n         LA    R1,DWD                  TTR\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n         LH    R0,DCBLRECL-IHADCB+SYSUT1M\n         L     R1,DECB1+12             BUFFER ADDR IN DECB\n         BAL   R9,WRITE                WRITE DATA\n         B     GETMBR2                 NEXT BLOCK\n*--ENDLOOP\n*\n*        Write ALIAS directory entries corresponding to the member\n*        just written\n*\nGETMBR8  ICM   R0,B'1111',ALIASES      any ALIAS?\n         BZ    GETMBR9                 no, jump\n         L     R7,DIRTABLE+4           first directory entry\n         USING PDS2,R7\n*--LOOP\nGETMBR8B LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            SIZE OF USER DATA\n         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY\n         TM    PDS2INDC,PDS2ALIS       is this an alias?\n         BNO   GETMBR8N                no, ignore it\n         CLC   TTRN(3),PDS2TTRP        alias of member just written?\n         BNE   GETMBR8N                no, ignore it\n         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY\n         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY\n         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK\n         LA    R0,2+1+3                LENGTH,FLAGS,TTR\n         LA    R1,DWD                  002A,C8,00000A\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY\n         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY\n         BAL   R9,WRITE                WRITE RECORD SEGMENT\n         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY\nGETMBR8N ALR   R7,R0                   NEXT DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BNE   GETMBR8B                NO, NEXT MEMBER\n*--ENDLOOP\n         DROP  R7                      was PDS2 (local only)\n*\nGETMBR9  LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            size of user data in half-words\n         ALR   R14,R14                 size of user data in bytes\n         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY\n         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?\n         BNE   GETMBR1                 NO, NEXT MEMBER\n*ENDLOOP\n***********************************************************************\n*                                                                     *\n*        END OF DIRECTORY                                             *\n*                                                                     *\n*          1.  WRITE AN EOF RECORD                                    *\n*          2.  CLOSE THE FILES                                        *\n*          3.  CLEAN UP                                               *\n*          4.  GOBACK                                                 *\n*                                                                     *\n***********************************************************************\nEOJ      LA    R0,3                    L'TTR\n         LA    R1,=X'0000,01'          LENGTH=0\n         BAL   R9,WRITE                WRITE EOF RECORD\n         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH\n         SLR   R15,R15                 PADDING TO X'00'\n         MVCL  R4,R14                  PAD LAST RECORD\n*\nLASTMSG  LA    R1,80                   LRECL of SYSUT2 data set\n         M     R0,SEQNO                calculate number of bytes\n         STRING '   Records=',(SEQNO,F,L),',Bytes=',((R1),,L),INTO=LINE\n         PUT   SYSPRINT,LINE           print message\n*\nCLOSEALL CLOSE MF=(E,OPENLIST)         CLOSE ALL DATA SETS\n         FREEPOOL SYSUT1M              FREE BUFFERS\n         FREEPOOL SYSUT2               FREE BUFFERS\n         FREEPOOL SYSPRINT             FREE BUFFERS\n*\n         LM    R0,R1,DIRTABLE          len/addr of dir entries\n         FREEMAIN RU,LV=(0),A=(1)      free directory entry table\n*\nGOBACK   LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,LV=DYNAML,A=(1)    FREE DYNAMIC STORAGE\n         RETURN (14,12),RC=00          GOBACK\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Read Directory Blocks from SYSUT1D and un-block them         *\n*                                                                     *\n*        Returns:                                                     *\n*                                                                     *\n*          R0 Length of the directory entry                           *\n*          R6 Address of the directory entry (8X'FF' at EOF)          *\n*                                                                     *\n*---------------------------------------------------------------------*\nGETDIR   ICM   R6,B'1111',DIRENTRY     CURRENT DIRECTORY ENTRY\n         BP    GETDIR4                 NOT FIRST TIME, JUMP\n*LOOP\nGETDIR1  GET   SYSUT1D                 READ DIRECTORY BLOCK\n         LA    R0,1                    COUNT DIRECTORY BLOCKS\n         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS\n         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS\n         LA    R6,2(,R1)               FIRST ENTRY IN THIS BLOCK\n         B     GETDIR9                 EXIT\n*--LOOP\nGETDIR4  LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            SIZE OF USER DATA\n         LA    R14,12(R14,R14)         SIZE OF DIRECTORY ENTRY\n         L     R15,DCBRECAD-IHADCB+SYSUT1D  1ST BYTE OF CURR DIR BLK\n         AH    R15,0(,R15)             LENGTH OF CURR DIR BLK\n         BCTR  R15,0                   LIMIT FOR BXH\n         BXH   R6,R14,GETDIR1          SIZE\n*--ENDLOOP\nGETDIR9  ST    R6,DIRENTRY             SAVE ADDR OF CURR DIR ENTRY\n         LA    R14,PDS2LUSR            MASK\n         N     R14,PDS2TTRP            SIZE OF USER DATA\n         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY\n         BR    R9\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Write Records to SYSUT2 in IEHMOVE format                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nWRITE    LR    R2,R1                   ADDRESS\n         LR    R3,R0                   LENGTH\n         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH\n*LOOP\nWRITE1   LTR   R5,R5                   ANY SPACE LEFT IN PREVIOUS RCD?\n         BP    WRITE2                  YES, JUMP\n         PUT   SYSUT2                  NO, LOCATE ANOTHER\n         LA    R0,1                    BUMP SEQNO\n         AL    R0,SEQNO                BUMP SEQNO\n         ST    R0,SEQNO                BUMP SEQNO\n         STH   R0,0(,R1)               BUMP SEQNO\n         LA    R4,2(,R1)               ADDRESS\n         LA    R5,78                   LENGTH\nWRITE2   LR    R14,R4                  \"TO\" ADDR\n         LR    R15,R5                  \"TO\" ADDR\n         CLR   R15,R3                  INREC TOO BIG?\n         BL    WRITE3                  NO, JUMP\n         LR    R15,R3                  YES, TRUNCATE\nWRITE3   ALR   R4,R15                  BUMP ADDR\n         SLR   R5,R15                  DECREASE LENGTH\n         MVCL  R14,R2                  FILL IN RECORD\n         LTR   R3,R3                   INPUT RECORD ALL MOVED?\n         BP    WRITE1                  NOT YET, KEEP ON MOVING\n*ENDLOOP\n         STM   R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH\nWRITE99  BR    R9\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RECFM Edit Routine                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n#RECFM1  MVC   RECFM,BLANKS            INITIALIZE RECFM AREA\n         MVI   0(R1),C'U'\n         TM    DS1RECFM,DS1RECFU       RECFM=U?\n         BO    #RECFM2                 YES, JUMP\n         MVI   0(R1),C'F'\n         TM    DS1RECFM,DS1RECFF       RECFM=F?\n         BO    #RECFM2                 YES, JUMP\n         MVI   0(R1),C'V'\n#RECFM2  TM    DS1RECFM,DS1RECFB       RECFM=.B ?\n         BNO   #RECFM3                 NO, JUMP\n         MVI   1(R1),C'B'              .B\n         LA    R1,1(,R1)\n#RECFM3  TM    DS1RECFM,DS1RECFS       RECFM=..S ?\n         BNO   #RECFM4                 NO, JUMP\n         MVI   1(R1),C'S'              ..S\n         LA    R1,1(,R1)\n#RECFM4  TM    DS1RECFM,DS1RECFA       RECFM=...A ?\n         BNO   #RECFM5                 NO, JUMP\n         MVI   1(R1),C'A'              ...A\n#RECFM5  TM    DS1RECFM,DS1RECMC       RECFM=...M ?\n         BNO   #RECFM6                 NO, JUMP\n         MVI   1(R1),C'M'              ...M\n#RECFM6  TM    DS1RECFM,DS1RECFT       RECFM=...T ?\n         BNOR  R14                     NO, JUMP\n         MVI   1(R1),C'T'              ...T\n         BR    R14\n***********************************************************************\n*                                                                     *\n*        DATA AREAS                                                   *\n*                                                                     *\n***********************************************************************\nOPENLIST OPEN  (SYSUT1M,,SYSUT2,OUTPUT,SYSPRINT,OUTPUT),MF=L\nOPENDIRL OPEN  (SYSUT1D),MF=L\nSYSUT1D  DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,EODAD=ENDOFDIR,         X\n               EXLST=EXL1,RECFM=U,BLKSIZE=256\nEXL1     DC    A(X'87000000')          DCB EXIT LIST (SYSUT1)\nENDOFDIR SLR   R1,R1\n         BR    R14\nSYSUT1M  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=GETMBR8,           X\n               RECFM=U,BUFNO=1\nSYSUT2   DCB   DSORG=PS,MACRF=PL,DDNAME=SYSUT2,                        X\n               EXLST=EXL1,RECFM=FB,LRECL=80\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=121\nCAML26   CAMLST SEARCH,DS1DSNAM,DS1DSSN,DS1FMTID\nBLANKS   DC    CL(L'RECFM)' '\nFF       EQU   X'FF'\n*\n*        HEADER RECORDS (IEHMVSSX/IEHMVSXY)\n*\nHDR1REC  DC    H'75',X'0E'             HEADER RECORD\n         DC    C'THIS IS AN UNLOADED DATA SET PRODUCED BY',X'80'\n         DC    C'THE IBM UTILITY, SYSMOVE.'\n         DC    C'OMMBRLDWB'            WHATEVER\n*\nHDR2REC  DC    AL2(HDR2LEN-3)          L'DSCB1 + 57\n         DC    X'00'                   NO FLAGS\n         IECSDSL1 1                    F1-DSCB\nUNLDDIR  DS    XL2                     DIRECTORY QUANTITY\nUNLDFLAG DS    XL1                     UNLOAD CONTROL FLAG\nUNLDSIZE DS    XL4                     PRIM ALLOC OF DS (IN BYTES)\nUNLDSSIZ DS    XL4                     SEC ALLOCATION OF DS (IN BYTES)\nUNLDSPAR DS    XL42                    UNUSED SPARE BYTES\nUNLDDEVT DS    XL4                     FROM DEVICE TYPE\nHDR2LEN  EQU   *-HDR2REC\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DYNAMIC STORAGE AREA                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nDYNAM    DSECT\n         DS    18F                     SAVE AREA\nUT1MBR   DS    CL8                     SYSUT1 member\nDWD      DS    D\nUNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV\nDIRENTRY DS    A                       DIRECTORY ENTRY\nDIRBLKS  DS    F                       NUMBER OF DIRECTORY BLOCKS\nMEMBERS  DS    F                       NUMBER OF MEMBERS\nALIASES  DS    F                       NUMBER OF ALIASES\nDIRTABLE DS    F,A                     addr/size of dir entry table\nTRKSUSED DS    F                       NUMBER OF tracks used\nCURRENT  DS    A,F                     OUTPUT ADDR, LENGTH\nTTRN     DS    F                       TTRN OF FIRST/CURRENT BLOCK\nSEQNO    DS    F                       SYSUT2 RECORD SEQUENCE NUMBER\nRECFM    DS    C'VBSAMT'               Record Format\nLINE     DS    CL121                   print line\n         DS    0F                      ALIGN DVAREA\n         IHADVA DSECT=NO               DEVTYPE AREA\n         ORG   ,                       ALIGN DVAREA\nJFCB1    DS    0F                      First JFCB for SYSUT1\n         IEFJFCBN                      JFCB for SYSUT1\nJFCB2    DS    XL(*-JFCB1)             JFCB for SYSUT2\nDYNAML   EQU   *-DYNAM\n*\n         DCBD  DSORG=PS,DEVD=DA\n*@@      IHAPDS DSECT=YES,PDSBLDL=NO\nPDS2     DSECT\nPDS2NAME DS    CL8                     member name\nPDS2TTRP DS    XL3                     TTR\nPDS2INDC DS    X                       flags, length of user data\nPDS2ALIS EQU   X'80'                   ALIAS entry\nPDS2LUSR EQU   X'1F'                   len of user data in half-words\nPDS2USRD DS    0C                      start of user data\n         YREGS\n         STRING GENERATE               generate literals, routine\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FORMAT OF IEHMOVE UNLOAD RECORDS (IEHMVSRA)                  *\n*                                                                     *\n*    (FOR DOCUMENTATION ONLY, THIS DSECT IS NOT USED IN THE PROGRAM)  *\n*                                                                     *\n*---------------------------------------------------------------------*\nBUFFER   DSECT\n         DC    H'1'                    RECORD SEQUENCE NUMBER\nRECLEN   DC    H'75'                   RECORD LENGTH\nRECTYPE  DC    X'0E'                   RECORD TYPE\nRTYP_TTR   EQU X'80'                   3-BYTE TTR FOLLOWS\nRTYP_PDS   EQU X'40'                   INPUT DATA SET IS A PDS\nRTYP_DATA  EQU X'20'                   MEMBER DATA\nRTYP_NOTE  EQU X'10'                   NOTE LIST\nRTYP_DIR   EQU X'08'                   DIRECTORY ENTRY\nRTYP_DMY   EQU X'04'                   DUMMY RECORD\nRTYP_HDR   EQU X'02'                   HEADER RECORD\nRTYP_EOF   EQU X'01'                   EOF RECORD\nRECTTR   DS    XL3                     TTR OF THIS RECORD\nRECDATA  DS    XL(BUFFER+800-*)        DATA\n         END\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=CBT.CBT491.FILE183.PDS(STRING),DISP=SHR\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LKED    EXEC PGM=HEWL,PARM=REUS\n//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,DELETE)\n//SYSLMOD  DD DSN=SYS1.W$$.LINKLIB(SYSMOVE),DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT949/FILE949.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT949", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}