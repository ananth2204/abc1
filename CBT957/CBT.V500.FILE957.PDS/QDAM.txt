*24OCT72 RSL INHIBIT MERGE BACK OF DCB PARAMETERS                   RL1
QDAM     TITLE 'QUEUED DIRECTORY PROCESSOR W/UPDATE'
***********************************************************************
*
* FUNCTION/OPERATION- PROVIDES QUEUED ACCESS TO BPAM PARTITIONED
*        DIRECTORY ENTRIES FROM ONE OR MORE PARTITIONED LIBRARIES
*        CONCURRENTLY.  ENTRIES ARE RETURNED IN COLLATING SEQUENCE
*        LOWEST NUMBERED LIBRARY FIRST.  THE LOCATION OF THE
*        RECORDS MAY BE NOTED, AND RECORDS MAY BE UPDATED IN THE
*        FASHION OF THE OS "GET-LOCATE,PUT-UPDATE" DESCRIBED
*        IN DATA MGMT SERVICES SRL.
*INPUTS- THE BASIC INPUT TO THE QUEUED DIRECTORY ("QD") ROUTINES
*        IS THE DDNAME LIST:  FOR EACH CALL REG1 MUST POINT TO
*        THE FOLLOWING LIST
*              OPEN  0,MF=L        BYTE0 OPEN OPTIONS,1-3 MUST BE ZERO
*              DC    FL2'N' THE NUMBER OF DDNAMES THAT FOLLOW
*              DC    CL8'DDNAME1'
*              DC    CL8'DDNAME2'  ETC. AS NEEDED
*
*OUTPUTS- ARE DESCRIBED IN DETAIL UNDER THE VARIOUS CALLS.
*
*ENTRIES-  ARE VIA STANDARD CALL  EG  "CALL  QDOPEN""
*        QDOPEN   OPEN THE DIRECTORIES AND PREPARE TO READ
*        QDGET    GET ONE DE IN LOCATE MODE (REG1 PTS TO DATA)
*        QDPUTX   RETURN UPDATED DE (IN BUFFER) TO DIRECTORY.
*        QDNOTE   NOTE THE CCHHR OF THE DE RETURNED ON THE PREVIOUS
*                 GET. (REG1 POINTS TO ENTIRE COUNT FIELD)
*        QDXNOTE  NOTE THE CCHHR OF THE CURRENT RECORD IN
*                 EXTENT SPECIFIED BY REG0. (IF BIT0 OF REG1 IS ON
*                 THE CCHHR OF THE EOF RECORD IS RETURNED)
*        QDCLOSE  TERMINATE PROCESSING. MUST BE USED TO INSURE
*                 UPDATES ARE REWRITTEN.
*
*EXITS- ALWAYS TO THE CALLER ON REG14.
*
*EXTERNAL ROUTINES- OPEN, CLOSE, GETMAIN, FREEMAIN, FREEPOOL.
*
*ATTRIBUTES- REENTRANT, ENABLED, PROBLEM PROGRAM STATE.
*
*ERROR EXITS- NORMAL QSAM ERROR TERMINATIONS (AT THIS POINT).
*
***********************************************************************
         EJECT
         SPACE 1
* LOCAL MACRO DEFINITIONS FOR ENTRY AND EXIT
         SPACE 1
         MACRO
&NAME    ENTER
         ENTRY &NAME
&NAME    SAVE  (14,12)
         LR    R2,R1               SAVE DDLIST ADR
         AIF   ('&NAME' NE 'QDOPEN').RESTORE
         LR    R3,R15              PROGRAM BASE
         USING QDAM,R3 \           *---- 3
         USING CTLAREA,R13 \       *---- 13
         LH    R0,4(,R2)           NO. OF DD NAMES
         MH    R0,=Y(DCBLEN+4)    WORK ENTRY SIZE
         AH    R0,=Y(DCBLIST-CTLAREA) ROOT SPACE SIZE
         LR    R4,R0               SAVE
         GETMAIN R,LV=(0)          ALLOCATE STORAGE
         IC    R0,0(,R2)           PRESERVE USER OPEN OPTION        RL1
         ST    R1,0(,R2)           SAVE ADR IN CALLER'S PARM LIST
         STC   R0,0(,R2)           RESTORE OPEN OPTION              RL1
         ST    R4,0(,R1)           SAVE STORAGE SIZE
         AGO   .RES2
.RESTORE ANOP
         USING &NAME,R15           TEMPORARY BASE
         L     R3,BASE             RESTORE TRUE BASE
         DROP  R15
         L     R1,0(,R1)           LOCATE STORAGE AREA
.RES2    ANOP
         ST    R1,8(,R13)          SET FORWARD CHAIN
         ST    R13,4(,R1)          SET BACK LINK
         LR    R13,R1              LOCATE STORAGE AREA
         SPACE 1
         MEND
         SPACE 2
         MACRO
&NAME    EXIT
&NAME    L     R13,4(,R13)        BACK UP TO CALLERS SAVE AREA
         MVI   12(R13),255
         L     R14,12(,R13)
         LM    R2,R12,28(R13)
         BR    R14
         MEND
         PUNCH ' ALIAS QDOPEN' FOR AUTO-CALL DURING LINK-EDIT
         EJECT
QDAM     START 0
         SPACE 1
* QDOPEN - CONSTRUCT DCB'S AND WORKING STORAGE, OPEN DATA SETS
         SPACE 1
QDOPEN   ENTER
         MVC   NODCB,4(R2)         COPY NO. OF DCB'S
         LA    R5,DCBLIST          CONSTRUCT DCB LIST & DCB'S
         LH    R4,NODCB
         SLL   R4,2                SCALE TO OPEN LIST LENGTH
         LA    R4,7(R4,R5)  TO DOUBLE WORD
         N     R4,=F'-8'
         USING IHADCB,R4           *---- 4
         SPACE 1
         SR    R6,R6               EXTENT ID (0, 1, ...)
         LA    R7,6(,R2)           LOCATE 1ST DDNAME
         SPACE 1
QDORPT   DS    0H                  REPEAT FROM HERE FOR EACH DCB
         ST    R4,0(,R5)           SET DCB ADR IN OPEN LIST
         MVC   0(1,R5),OPTOPEN     COPY OPEN OPTIONS
         TM    0(R2),X'7F'         DID CALLER SUPPLY OPEN OPTION    RL1
         BZ    *+10                NO, USE INTERNAL (UPDAT,REREAD)  RL1
         MVC   0(1,R5),0(R2)       COPY USER'S REQUEST              RL1
         NI    0(R5),X'7F'         CLEAR END OF LIST BIT            RL1
         MVC   IHADCB(256),MODEL   COPY MODEL DCB, ETC.             RL1
         MVC   IHADCB+256(DCBLEN-256),MODEL+256                     RL1
         MVC   DCBDDNAM,0(R7)      COPY DDNAME
         L     R0,EXITLIST                                          RL1
         ALR   R0,R4               RELOCATE JFCB ADDRESS            RL1
         ST    R0,EXITLIST                                          RL1
         L     R0,DCBEXLST                                          RL1
         ALR   R0,R4               RELOCATE EXIT LIST ADR           RL1
         ST    R0,DCBEXLST                                          RL1
         STH   R6,EXTID            STORE EXTENT ID
         LA    R5,4(,R5)           NEXT ADR LIST ENTRY
         LA    R4,DCBLEN(,R4)     NEXT DCB AREA
         LA    R6,1(,R6)          NEXT EXTENT ID
         LA    R7,8(,R7)           NEXT DDNAME
         CH    R6,NODCB            ALL DONE
         BL    QDORPT             NO, DO NEXT ONE
         SPACE 1
         S     R5,=A(4)            BACK UP TO LAST LIST ENTRY
         OI    0(R5),X'80'         TERMINATE OPEN LIST
         SPACE 1                                                    RL1
         RDJFCB MF=(E,DCBLIST)     READ ALL THE JFCB'S              RL1
         SPACE 1                                                    RL1
         L     R4,DCBLIST          POINT TO 1ST DCB                 RL1
         LH    R5,NODCB            QTY OF DCB'S                     RL1
QDOJ     DS    0H                                                   RL1
         MVI   JFCBTSDM,JFCNWRIT+JFCNDCB INIBIT VARIOUS MERGES      RL1
         LA    R4,DCBLEN(,R4)      NEXT DCB                         RL1
         BCT   R5,QDOJ             CYCLE TO NEXT                    RL1
         OPEN  MF=(E,DCBLIST)      OPEN DATA SETS
         SPACE 1
         EXIT                      RETURN TO CALLER
         EJECT
         SPACE 1
* QDGET  - RETURN NEXT DIRECTORY ENTRY TO CALLER
         SPACE 1
QDGET    ENTER
         LA    R7,HEXEFF           PRESET NULL MATCH
         L     R4,DCBLIST          LOCATE FIRST DCB
         LH    R5,NODCB            LOCATE NO. TO CHECK
         SPACE 1
QDND     DS    0H                  REPEAT FROM HERE FOR EACH DCB
         L     R6,ENTRY            NEXT ENTRY
         C     R6,EOB              IS IT EOB
         BL    QDMATCH             NO, GO COMPARE TO PREVIOUS ENTRY
         SPACE 1
         TM    FLAGS,EOD           IS THE DCB AT EOD
         BO    QDUPD               YES, GET NEXT DCB
         SPACE 1
         TM    FLAGS,PUTX         SHOULD WE PUTX THIS BLOCK
         BZ    QDNX                NO, GET NEXT RECORD
         PUTX  (R4)                REWRITE BLOCK
         NI    FLAGS,255-PUTX      CLEAR REWRITE FLAG
         SPACE 1
QDNX     DS    0H
         GET   (R4)                LOCATE NEXT RECORD
         SPACE 1
         LA    R6,2(,R1)           FIRST DATA BYTE IN BLOCK
         ST    R6,ENTRY            UPDATE PTR
         SPACE 1
         AH    R1,0(,R1)           GET USED BYTES IN BLOCK
         ST    R1,EOB              STORE ADR OF LAST BYTE + 1
         SPACE 1
QDMATCH  DS    0H                  LOOK FOR LOWEST ENTRY
         CLC   0(8,R6),0(R7)       Q. IS CURRENT LOWER THAN PREVIOUS
         BNL   QDUPD               A. NO, LEAVE PREVIOUS ENTRY
         SPACE 1
         LR    R7,R6               A. YES REPLACE PREVIOUS ENTRY
         LR    R2,R4               WITH CURRENT ENTRY
         SPACE 1
QDUPD    DS    0H
         LA    R4,DCBLEN(,R4)    NEXT DCB
         BCT   R5,QDND             DON'T FALL THRU UNTIL DCB'S DONE
         SPACE 1
         CLI   0(R7),255           DID WE HAVE EOD ON ALL DCB'S
         BE    QDSETEOD            YES, RETURN EOD
         SPACE 1
         LR    R4,R2               RESTORE ADR OF DCB WITH LOWEST ENTRY
         ST    R4,LASTDCB          SAVE FOR NOTE, PUTX
         SPACE 1
         IC    R1,11(,R7)          LENGTH CODE FOR DE
         N     R1,=A(31)           CLEAR ALL BUT 5 BITS
         LA    R1,12(R1,R1)        LENGTH IN BYTES OF DE
         AR    R1,R7               LOCATE NEXT DE FOR NEXT ENTRY
         ST    R1,ENTRY            TO GET ROUTINE
         LH    R0,EXTID            RETURN EXTENT NO.
         LPR   R1,R7               RETURN ADR OF DE AND NONZERO CC
         SPACE 1
QDEXIT   EXIT
         SPACE 1
QDSETEOD DS    0H
         SR    R1,R1               CLEAR ADR AND  SET ZERO CC
         B     QDEXIT              AND RETURN
         SPACE 2
QDEOF    DS    0H                ENTERED FROM  EODAD ROUTINE
         OI    FLAGS,EOD           SET EOD FLAG
         B     QDUPD               GET NEXT DCB, THIS HAS NO MORE DATA
         SPACE 3
* QDPUTX  REWRITE CURRENT DE TO DATA SET DIRECTORY
         SPACE 1
QDPUTX   ENTER
         L     R4,LASTDCB          RESTORE ADR OF CURRENT DCB
         OI    FLAGS,PUTX          WASN'T THAT EASY, MOTHER
         SPACE 1
         EXIT
         SPACE 3
* QDNOTE  - NOTE THE COUNT FIELD (CCHHRKDD) OF CURRENT DE
         SPACE 1
QDNOTE   ENTER
         L     R4,LASTDCB  RESTORE ADR OF CURRENT DCB
QDNOTE1  DS    0H                  ENTRY FROM QDXNOTE
         L     R6,DCBIOBA          LOCATE CURRENT IOB
         SR    R1,R1
         IC    R1,DCBOFFSR         READ OFFSET
         AR    R6,R1               POINT TO READ CCW
         S     R6,=A(8)            POINT TO RCMT CCW
         CLI   0(R6),X'92'         IS IT REALLY (DEBUG)
         BE    *+6                 (DEBUG)
         DC    Y(0)                (DEBUG)
         L     R1,0(,R6)           LOCATE COUNT FIELD IN TURN
         SPACE 1
         EXIT
         SPACE 3
* QDXNOTE  PERFORM NOTE ON EXTENT SPECIFIED
         SPACE 1
QDXNOTE  ENTER
         MH    R0,=Y(DCBLEN)       TIMES DCB SCALE
         L     R4,DCBLIST          PLUS BASE, NOW PTS TO DESIRED DCB
         AR    R4,R0               PLUS OFFSET
         LTR   R2,R2               IS BIT0 ON (EOF REQUEST)
         BNM   QDNOTE1             NO, GO NOTE CURRENT RECORD
         SPACE 1
         TM    FLAGS,EOD           ARE WE ALREADY AT EOD
         BO    QDNOTE1             YES, GO NOTE IT
         SPACE 1
         TM    FLAGS,PUTX        IS THERE A PENDING PUTX
         BZ    QDGO
         PUTX  (R4)                REWRITE CURRENT BLOCK
         NI    FLAGS,255-PUTX      CLEAR STATUS
QDGO     DS    0H
         MVC   DCBEODAD+1(3),=AL3(QDNOTE1) UPDATE EOD AD
QDG1     GET   (R4)                GET UNTIL RECORDS EXHAUSTED
         B     QDG1                TUM TUM
         SPACE 5
* QDCLOSE  TERMINATE PROCESSING AND RELEASE STORAGE
         SPACE 1
QDCLOSE  ENTER
         L     R4,DCBLIST        PT TO FIRST DCB
         LH    R5,NODCB            NO. OF DCB'S
         SPACE 1
* CLEAR ALL PENDING PUTX'S
QDCX     DS    0H
         TM    FLAGS,PUTX          IS THERE A PUTX PENDING
         BZ    QDCXN               NO, GET NEXT ONE
         PUTX  (R4)                UPDATE BLOCK
         NI    FLAGS,255-PUTX      CLEAR STATUS
         SPACE 1
QDCXN    DS    0H
         LA    R4,DCBLEN(,R4)      NEXT DCB
         BCT   R5,QDCX             DON'T FALL THRU UNTIL ALL DCB'S DONE
         SPACE 1
         CLOSE MF=(E,DCBLIST)      CLOSE ALL DCB'S
         SPACE 1
         L     R4,DCBLIST         CLEAN UP AFTER OS
         LH    R5,NODCB
         SPACE 1
QDCFP    DS    0H
         FREEPOOL (R4)
         LA    R4,DCBLEN(,R4)
         BCT   R5,QDCFP            LOOP TILL DONE
         SPACE 1
         L     R0,SIZE             LOCATE STORAGE ALLOCATED
         LR    R1,R13              LOCATE STORAGE ADR
         L     R13,4(,R13)         BACK UP SAVE AREA'S
         SPACE 1
         FREEMAIN R,LV=(0),A=(1)
         XC    1(3,R2),1(R2)       CLEAR ADR IN DDNAME LIST TABLE   RL1
         RETURN (14,12)
         SPACE 2
         PRINT NOGEN
         LTORG
HEXEFF   DC    X'FFFFFFFFFFFFFFFF'
OPTOPEN  OPEN  0,MF=L                                               RL1
BASE     DC    A(QDAM)             MODULE BASE
         SPACE 2
MODEL    DCB   DDNAME=*,MACRF=(GL,PL),DSORG=PS,RECFM=F,                X
               EXLST=EXITLIST-IHADCB,                               RL1X
               BLKSIZE=256,OPTCD=C,BUFNO=6,EODAD=QDEOF
         DC    0A(0),X'87',AL3(JFCB-IHADCB),176X'0'                 RL1
         DC    A(0),A(0),H'0',X'0' ENTRY, EOB, EXTID,FLAGS
         SPACE 1
* CONTROL AREA
         SPACE 1
CTLAREA  DSECT
SIZE     DS    0F                 SIZE OF STORAGE
SAVE     DS    18F                 OS SAVE AREA
NODCB    DS    H                   NO. OF DCB'S
LASTDCB  DS    A                   ADR OF LATEST DCB
DCBLIST  DS    0D                  START OF DCB LIST
         EJECT
         PRINT GEN
         DCBD  DEVD=DA,DSORG=PS
EXITLIST DS    A                   ADDRESS OF JFCB                  RL1
JFCB     DS    0F                                                   RL1
         IEFJFCBN ,                                                 RL1
ENTRY    DS    A                   ADR OF CURRENT THIS DCB
EOB      DS    A                   ADR OF LAST BYTE + 1 THIS BLOCK
EXTID    DS    H                   EXTENT NO.
FLAGS    DS    X                   VARIOUS FLAGS
         SPACE 1
DCBLEN   EQU   (*-IHADCB+7)/8*8    ROUNDED UP SIZE
         SPACE 1
* DEFINITION OF FLAGS
PUTX     EQU   X'80'               PUTX REQUIRED THIS BLOCK
EOD      EQU   X'40'               EOD REACHED THIS DCB
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
