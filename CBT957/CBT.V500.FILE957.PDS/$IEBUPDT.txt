








                                 TECHNICAL MEMO 77


                   Title:     IEBUPDTX Users Guide, Version 1.04

                  Author:     IEBUPDTX   was   written   at   Cornell
                              University.  The preliminary version of
                              this document was  based  on  Cornell's
                              IEBUPDTX  Users  Guide,  and  edited by
                              Anne Ashley and Marge Mueller.  Version
                              1 is updated by S.  Hsia.

                    Date:     May 23, 1973 - Preliminary Version
                              November 20, 1975 - Version 1

                Abstract:     IEBUPDTX  is  a  utility  program   for
                              updating  symbolic  source data and may
                              be used  to  produce  a  deck  that  is
                              compatible with IEBUPDTE.

            Published by:     SLAC    Computing   Services   of   the
                              Stanford   Center    for    Information
                              Processing,   (SCSSCIP),   located   at
                              Stanford   Linear  Accelerator  Center,
                              (SLAC), Menlo Park, California.
1


                  T A B L E    O F   C O N T E N T S

 1.0  Introduction . . . . . . . . . . . . . . . . . . . . . . . .  1

      1.1  Files . . . . . . . . . . . . . . . . . . . . . . . . .  5
      1.2  IEBUPDTX Control Statements . . . . . . . . . . . . . .  6
      1.3  Command Syntax  . . . . . . . . . . . . . . . . . . . .  7

 2.0  Function Statements  . . . . . . . . . . . . . . . . . . . . 11

      2.1  ADD . . . . . . . . . . . . . . . . . . . . . . . . . . 11
      2.2  CHANGE  . . . . . . . . . . . . . . . . . . . . . . . . 13

 3.0  Detail Statements  . . . . . . . . . . . . . . . . . . . . . 15

      3.1  SEQUENCE  . . . . . . . . . . . . . . . . . . . . . . . 15
      3.2  NUMBER  . . . . . . . . . . . . . . . . . . . . . . . . 17
      3.3  DELETE  . . . . . . . . . . . . . . . . . . . . . . . . 18
      3.4  INSERT  . . . . . . . . . . . . . . . . . . . . . . . . 19
      3.5  REPLACE . . . . . . . . . . . . . . . . . . . . . . . . 21
      3.6  FIX . . . . . . . . . . . . . . . . . . . . . . . . . . 23
      3.7  SCAN  . . . . . . . . . . . . . . . . . . . . . . . . . 25
      3.8  NOTE  . . . . . . . . . . . . . . . . . . . . . . . . . 25
      3.9  ENDUP . . . . . . . . . . . . . . . . . . . . . . . . . 25

 4.0  Additional Detail Statements . . . . . . . . . . . . . . . . 26

      4.1  ALIAS . . . . . . . . . . . . . . . . . . . . . . . . . 26
      4.2  GANG  . . . . . . . . . . . . . . . . . . . . . . . . . 27
      4.3  COPY  . . . . . . . . . . . . . . . . . . . . . . . . . 27
      4.4  MACRO . . . . . . . . . . . . . . . . . . . . . . . . . 29

 5.0  Additional PDS Function Statements . . . . . . . . . . . . . 30

      5.1  LIST. . . . . . . . . . . . . . . . . . . . . . . . . . 30
      5.2  LOAD  . . . . . . . . . . . . . . . . . . . . . . . . . 30
      5.3  SCRATCH . . . . . . . . . . . . . . . . . . . . . . . . 31
      5.4  RENAME  . . . . . . . . . . . . . . . . . . . . . . . . 31

 6.0  Additional Updating Features . . . . . . . . . . . . . . . . 32

      6.1  Version (Chained) Libraries . . . . . . . . . . . . . . 32
           6.1.1 CURRENT . . . . . . . . . . . . . . . . . . . . . 34
           6.1.2 Specifying Version Numbers  . . . . . . . . . . . 36
      6.2  Recursive Updates . . . . . . . . . . . . . . . . . . . 38
      6.3  Chained Recursive Updates . . . . . . . . . . . . . . . 39
      6.4  WYLBUR Edit Format Data Sets  . . . . . . . . . . . . . 40
      6.5  Writing User Updating Exits (USER Command)  . . . . . . 41


 Appendix I   PARM Options . . . . . . . . . . . . . . . . . . . . 44
 Appendix II  Job Control Statements . . . . . . . . . . . . . . . 47
 Appendix III Commands and Maximum Number of Positional Operands . 49

1

 1.0  Introduction
+     ____________

 IEBUPDTX is  a  utility  program  designed  to  facilitate  updating
 symbolic  source  data  representing 80 column card images.  It will
 incorporate the source language modifications into either sequential
 or partitioned data sets.

 The program was written at the Cornell University Computation Center
 in September of  1971.   Robert  Lent  and  Richard  Cogger  set  up
 specifications  and  contributed  ideas.  Larry Brenner designed and
 implemented the program.  A design goal of IEBUPDTX was  to  produce
 an  updating  program  that  was  compatible  with  IBM's  IEBUPDTE.
 IEBUPDTX  may  be  used  to  produce  a deck that is compatible with
 IEBUPDTE,  but  IEBUPDTX  has  many  features  and  extensions   not
 available in IEBUPDTE.


 New Features of IEBUPDTX
+________________________


 Following is a summary of the major extensions.

 Many keyword operands may be specified as positional operands.  Many
 keywords required by  IEBUPDTE  are  made  optional  or  ignored  by
 IEBUPDTX.  Two examples are NEW=PO/PS; SEQ2, NEW1, INCR on NUMBER or
 DELETE   commands.   SEQFLD  is  ignored.   The  sequence  field  is
 permantly defined as columns 73-80.  A numeric digit must  be  found
 by  column  80,  unless there are no sequence numbers in the source.
 UPDATE=INPLACE is ignored in the present version but will be illegal
 in version 1.06.


 Chained Libraries

 IEBUPDTX allows the use of multiple versions of a PDS member by  the
 CURRENT  command  and  the VERSION option and the CHAIN PARM option.
 With this feature, several  versions  may  be  stored  and  run,  by
 specifying  version  numbers.  This is especially useful for testing
 updated members.

 Additionally, multiple versions of the chained library can  be  used
 as  successive  update  decks  when  the  CHAINUPD  parm  option  is
 specified.


 Recursive Updates

 More than one update deck may be run against an OLD  MASTER  in  one
 job  with  this feature.  Successive update decks are applied to the
 OLD MASTER produced by the preceding deck.  Thus it is not necessary
 to keep the updated old master source for successive updates.






                             TM77-     1
1

 WYLBUR Edit Format Data Sets

 WYLBUR format data sets (i.e.  RECFM=U, LRECL=BLKSIZE=3156 or  3520)
 may  be  used  as  input  or  output  to  IEBUPDTX without using any
 additional control cards.

 A new PARM option, INTEGER, if specified, indicates that WYLBUR line
 numbers and sequence numbers are synonymous.


 User of Library Source

 The COPY/MACRO commands allow data to be  entered  into  the  update
 program from a separate library, rather than from SYSIN only.


 GANG-Punching Id

 The GANG statement allows an identification code to be  inserted  as
 though  a  deck has been gang-punched.  Thus a series of updates may
 be easily distinguished from one another by their id codes.


 Modifying Statements at Intra-card level

 The FIX and SCAN statements allow a card image to be changed at  the
 character  level  by  specifying  a string and, optionally, a column
 range on the card.


 Numbering on ADD or CHANGE Card

 Numbering may be specified directly on the ADD or CHANGE card  using
 the keywords INCR and/or NEW1.


 Replace/Insert Cards

 The REPLACE or INSERT command may be used to indicate where  a  deck
 of  card  images  is  to go.  The deck following a Replace or Insert
 card contains no sequence number in cols 73-80.  While this  is  not
 different  in  function  from  IEBUPDTE  data statements, it is much
 easier to use.  For compatibility with IEBUPDTE, the data  statement
 with sequence number in columns 73-80 is permitted.


 Listing Controls

 Additional listing  controls  are  another  IEBUPDTX  feature.   New
 master  source  is  not  listed  unless  the ADD or CHANGE specifies
 LIST=ALL.  Old master cards renumbered as  a  result  of  an  insert
 operation  may optionally be listed, as may any deleted cards.  Also
 optional is the  listing  of  insertions  and  deletions  caused  by
 intermediate updates.



                             TM77-     2
1


 Program Error Control

 A PARM option allows user  specification  of  the  highest  severity
 error.  If any error occurs above the limit, execution will stop.


 PDS Handling Commands

 Several commands apply only to PDS members and provide  the  ability
 to  LIST  the  contents  of a PDS member, LOAD a set of update decks
 under the names on their CHANGE and ADD cards, RENAME or  SCRATCH  a
 member.


 PARM

 Program Control parameters may be specified by the PARM field in the
 EXEC statement  or  by  the  PARM  control  statement  described  in
 Appendix  I.   There  is  no choice between the PARM=NEW or PARM=OLD
 modes of operation.

 Following is a list of IBM IEBUPDTE commands and  their  equivalents
 in IEBUPDTX:

      IEBUPDTE                       IEBUPDTX
+     ________                       ________

      ADD                            ADD, REPL
      ALIAS                          ALIAS
      CHANGE                         CHANGE, REPRO
      data (seq in 73-80)            INSERT, REPLACE
      DELETE                         DELETE
      ENDUP                          ENDUP
      LABEL                            -
      NUMBER                         NUMBER/SEQUENCE
      REPL                           ADD, REPL
      REPRO                          CHANGE, REPRO

 New Commands
+____________

 A number of new commands are featured in IEBUPDTX, some representing
 extensions to functions available in IEBUPDTE, and some invoking new
 features.  A list of the new commands and their functions follows.

      COPY       allows data to be entered into SYSIN from a separate
                 library, instead of a deck.

      CURRENT    Designates a specified version number of  a  PDS  as
                 the   production   version;  a  feature  of  chained
                 libraried described in section 6.1.







                             TM77-     3
1
      FIX        Replaces the FIRST occurrence of a specified  string
                 on  each  of  one or more card images, so that it is
                 not necessary to code an entire card.

      GANG       Allows  a  gang-punched  id  code  to   identify   a
                 particular update card or deck.

      LIST       Lists the contents of a PDS member

      LOAD       Allows a set of update decks to be stored in  SYSUT2
                 under the names on their CHANGE and ADD cards.

      MACRO      Similiar to COPY in function; different restrictions

      NOTE       A comment card

      RENAME     Changes the name of a member of the new master PDS

      SCAN       Like FIX, but will  replace  ALL  occurrences  of  a
                 specified string.

      SCRATCH    Deletes a named member from the SYSUT2 (output) data
                 set.

      USER       Used to  branch  to  a  user  supplied  update  exit
                 routine.
































                             TM77-     4
1
 1.1  Files
+     _____

 The source data to be updated (that  is,  changed  in  any  way)  is
 called  the OLD MASTER.  The set of data cards describing the update
 to be made is called the CONTROL FILE.  The data formed as a  result
 of  the  actions  specified  in the control file form the NEW MASTER
 data set.  IEBUPDTX performs  updating  by  copying  data  from  old
 master  to  new  master as directed via the control file(s).  Source
 cards may be inserted, deleted, or edited.


               ______       _______       ______
              |      |     |       |     |      |
              |  old |  +  |control|  =  |  new |
              |master|     |  file |     |master|
              |______|     |_______|     |______|



 For purposes of this document, it will be assumed that  the  control
 file  is  presented to the update program through the file described
 by the SYSIN Data Definition statement (OS JCL DD  statement).   The
 old  master  data set, wherever required, must be provided under the
 DDNAME SYSUT1 and  the  new  master  data  set,  if  one  is  to  be
 generated,  must  be described by a DD statement with DDNAME SYSUT2.
 This is not the case if data set associations are being  dynamically
 controlled  by the INDD and OUTDD PARM options described in Appendix
 I.

               ______       _______       ______
              |      |     |       |     |      |
              |  old |  +  |control|  =  |  new |
              |master|     |  file |     |master|
              |______|     |_______|     |______|
               SYSUT1        SYSIN        SYSUT2


 The updating capabilities of IEBUPDTX apply to logically  sequential
 old  master  data  sets,  and the program will update from SYSUT1 to
 SYSUT2 if they are simple  sequential  files.   IEBUPDTX  will  also
 operate  correctly  if either or both of SYSUT1 and SYSUT2 are PDS's
 without requiring any change to the  control  statements  in  SYSIN,
 except  possibly  to  specify the member name.  If SYSUT1 and SYSUT2
 both point to the same PDS, IEBUPDTX will automatically replace  the
 old  master  with  the new master if the update is completed without
 errors.












                             TM77-     5
1
 1.2  IEBUPDTX Control Statements
+     ___________________________

 There are two general types of control statements in IEBUPDTX:

                  Function statements
                  Detail Statements

 Function statements are used to initiate an update and may  be  used
 alone  or  accompanied  by detail Statements.  Detail statements may
 not be used alone but must be used in conjunction  with  a  function
 statement,  usually  a CHANGE statement, for each data set.  In this
 document the detail statements are covered  in  two  sections,  with
 basic detail statements in Section 3 and extended detail  statements
 in  section  4.  Function statements are described in Sections 2 and
 5.  The two  function  statements  (ADD  and  CHANGE)  described  in
 Section 2 are basic statements which precede the detail statements.










































                             TM77-     6
1

 1.3  Command Syntax
+     ______________

 IEBUPDTX commands are  written  in  a  manner  similar  to  assembly
 language macro calls.  The general format is:

      ./namefield  operation  positional-operands,keyword-operands
 where
      ./  must be present in columns 1-2.

 namefield

          is not allowed unless the NAMES PARM  option  is  selected.
          The   NAMES  option  is  provided  for  compatibility  with
          IEBUPDTE, but is not the default.  This  implies  that  the
          name  field is generally not to be used.  Its omission need
          not be indicated by leaving a blank  before  the  operation
          field although leaving blanks is allowed.  PARM options are
          discussed in Appendix I.

 operation

          contains an IEBUPDTX control statement, either  a  function
          statement  (such as CHANGE), or a detail statement (such as
          INSERT).

 operands

          may contain both positional and keyword  operands.   As  in
          assembly language, any positionally specified operands must
          precede  any  and  all  keywords.   No  embedded blanks are
          allowed as the  first  blank  starts  the  comments  field.
          Required  operands  are  shown  in  this  manual  in  curly
          brackets (»º) while optional operands are shown  in  square
          brackets (Ý¨).  Each command is presented in  two  formats:
          the  first  format  shows  all  keyword  operands while the
          second format shows all allowable positional operands.   An
          operand that is a keyword only appears in both formats as a
          keyword operand.

     Positional Operands

          are  separated  by  commas  or   by   dashes   to   improve
          readability.    Omitted   positional   parameters  must  be
          designated by a comma.

          Unlike assembly language, many operands  may  be  specified
          either positionally or as keywords.  For compatibility with
          IEBUPDTE,   all  operands  may  be  specified  as  keywords
          although not all operands may be specified positionally.  A
          list  of  allowed  positional  operands  may  be  found  in
          Appendix III.






                             TM77-     7
1
     Keyword Operands

          follow any positional operands and are separated by commas.
          Dashes  may  not  be  used  as  separators.   All  IEBUPDTX
          operands may be specified as keywords.  No embedded  blanks
          are allowed as the first blank starts the comment field.

 Continuation
+____________

 Continuation statements are indicated by following the last  keyword
 by  a  comma.   A  statement ending with a comma followed by a blank
 indicates a continuation card.  No continuation character is checked
 for in column 72.  Splitting an operand at column 72 as in  assembly
 language  or  IEBUPDTE  is  not  allowed.   The  second  card of the
 continuation must contain the ./ in columns 1-2, and  the  continued
 data must begin by column 16.

 Comments may be placed following the operands by  leaving  a  blank.
 In addition, a NOTE card functions as a comments card.

 Miscellaneous
+_____________

 Line Numbers:  Line numbers may be  expressed  by  their  right-most
                digits.    For  example,  SEQ1=10  is  equivalent  to
                SEQ=00000010.  SEQ1=ALL is also allowed  to  indicate
                the  entire  file.   END  can  be  used in any range;
                100/END indicates line number 100 to  the  last line,
                inclusive.   The  short form 10K, 12K may be used for
                10000, 12000 etc.  throughout IEBUPDTX.  All  numeric
                parameters,  with  the  exception  of  ALL  and  END,
                specify  8  character (maximum) decimal numbers.  ALL
                may be used on the SEQUENCE and  NUMBER  commands  to
                specify the first to last cards, inclusive.

 Name:          The operand NAME=name is synonymous with MEMBER=name.
                The MEMBER= form does not necessarily  imply  a  PDS.
                It  may  be  used  for a library member name or for a
                sequential data set.

 Format:        IEBUPDTX updates  data  in  80  column  card  images.
                Throughout  this  manual,  the  terms "statement" and
                "card" are used interchangeably.


 Sequencing
+__________

 Sequence numbers are 8 character decimal numbers in  columns  73-80.
 Sequence  numbers  must  be present in the old master card images in
 order to do an update unless WYLBUR format  and  INTEGER  option  is
 used  (see  section 6.4).  The card images may be sequenced when the
 old master is built or as part of the  update  process.   There  are
 several ways of sequencing or resequencing source:  the SEQUENCE and
 NUMBER  statements  and  the  INCR  and  NEW1 operands on the ADD or
 CHANGE statement may be used to sequence an entire member;  the INCR


                             TM77-     8
1
 and NEW1 operands on the INSERT and REPLACE commands may be used  to
 resequence inserted or replaced portions of a deck.

 It is a good practice to select  a  relatively  large  increment  if
 frequent  updates  are expected.  This leaves "room" to insert cards
 without resequencing parts of the  old  master  each  time;  and  it
 allows  two  methods of inserting cards, both of which are described
 in the section on the INSERT command.


 Throughout this manual, the operands INCR  and  NEW1  are  used  for
 sequencing:

      INCR refers to the numbering increment used for sequencing  the
      cards.   The  default  is  1 or whatever is defined as the INCR
      PARM option.

      NEW1 sets  the  sequence  number  for  the  first  card  to  be
      sequenced  or  resequenced.   The  default  is  INCR  plus  the
      previous  sequence  number.   If  there is no previous sequence
      number, the default is INCR.

 The effect of sequencing varies with the command.  If  neither  INCR
 nor  NEW1  is  coded on ADD or CHANGE (or on SEQUENCE or NUMBER), no
 numbering is done.  If neither INCR nor NEW is coded on the  REPLACE
 or  INSERT  detail  statements, as much numbering as is necessary to
 accommodate inserted cards will be done.  The defaults used will  be
 one  for  both  cases (since INCR defaults to 1 and NEW1 defaults to
 INCR).  The following chart compares the effects  of  sequencing  by
 various commands.




























                             TM77-     9
1
 Command   INCR/default  NEW1/default    Comments
+_______   ____________  ____________    ________

 ADD          /1         /INCR           sequences an entire member.
                                         Either INCR or NEW1 must be
                                         specified or no numbering
                                         is done.

 CHANGE       /1         /INCR + previous   "             "
                         sequence number

 INSERT                  number to be    numbers inserted cards and
                         given to first  as much of the old master
                         inserted card./ as is necessary to
                         Seq1 + INCR     accommodate the cards
                         (Seq1 is the    inserted.
                         card in the old
                         master which
                         immediately precedes
                         the inserted data cards).

 NUMBER       /1         number to be    sequences an entire member.
                         assigned to     Either INCR or NEW1 must be
                         first card.     specified or no numbering
                         /INCR + previous    is done.
                         sequence number.

 REPLACE                 number to be    numbers replaced cards and
                         assigned to 1st as much of the old master
                         inserted card/  as is necessary to accommo-
                         Seq1 (Seq1 is   date any additional cards
                         the number of   inserted.
                         the first card
                         replaced)

 SEQUENCE                number to be    may be used to number part
                         assigned to     or all of a member.  At
                         first card      least one of INCR and NEW1
                         being numbered/ must be specified or no
                         INCR+ previous  numbering is done.
                         sequence number
                         or INCR.

















                             TM77-    10
1
 2.0  Function Statements
+     ___________________

 This section is concerned with two operations to be performed  on  a
 data  set  as  a  whole.   At  least  one function statement must be
 provided for each PDS member or  data  set  to  be  processed.   The
 detail  control  statements,  described  farther  on, cannot be used
 without a function statement, usually the CHANGE statement.

 To simplify the following discussion, assume that both the  new  and
 old  master  data  reside  in a PDS.  If either is a sequential data
 set,  the  update  will  operate  accordingly.   Abbreviations   and
 synonymous  commands,  if  any,  are  in  parentheses  following the
 command.


 2.1  ADD  (A, REPL)
+     ______________

 Before an update can be performed, the original source data must  be
 placed  in  the  old  master  PDS  as  a  unique member with the ADD
 command.  The alternative would be to input the original cards every
 time.  The data cards which are to comprise the  new  member  should
 follow the ADD command in SYSIN.  If all original source is provided
 by ADD commands, SYSUT1 need not be specified.

 A REPL statement may be used instead of ADD.  It is synonymous  with
 ADD.

      ./ ADD »NAME=nameºÝ,VERSION=version,SSI=ssi,INCR=incr,NEW1=new1
             SEQID=seqid,LIST=ALL¨

      ./ ADD »nameºÝ,,ssi,INCR=incr,NEW1=new,SEQID=seqid,LIST=ALL¨

 where

          NAME  is the unique name to be given  to  the  source data.
                MEMBER=NAME may be used instead of NAME=NAME  in  any
                command.  If SYSUT2 is sequential, name  is optional.
                However, it should still be coded to identify the old
                master data.  The use  of  name  as  the  SYSUT2  PDS
                member name is not the only way in which IEBUPDTX can
                use it.

       VERSION  is described in Section 6.0.

           SSI  a code of up to 8 hex digits, assumed by IEBUPDTX  to
                be right justified.  Specifies that the PDS directory
                includes  four bytes of ssi data.  Is SYSUT2 is not a
                PDS, ssi is ignored.  If SYSUT1 is a PDS with ssi  in
                its  directory,  it is retained for use in the SYSUT2
                directory.  Once ssi is  specified,  it  can  not  be
                removed  by  subsequent  CHANGE  cards, but it may be
                modified.  The default ssi is either the ssi provided
                by the  previous  update  level,  or  x'FF200000'  if
                necessary.




                             TM77-    11
1

 When the original old master source  data  is  being  built,  it  is
 usually  desirable  to  sequence  the cards.  If the member is to be
 updated later, the sequence numbers  must  be  present  on  the  old
 master  card  images.   Sequence  numbers are placed in card columns
 73-80  unless  the  INTEGER  option  is  used  (see  section   6.4).
 Sequencing  may  be performed by the INCR and NEW1 parameters on the
 ADD, CHANGE, INSERT, and REPLACE cards.  It may also be done by  the
 SEQUENCE   or  NUMBER  detail  statement  described  in  Section  3.
 Specifying either INCR or NEW1  on  the  ADD,  CHANGE,  SEQUENCE  or
 NUMBER  commands results in complete resequencing of the member.  If
 neither INCR nor NEW1 is specified, no sequencing is done.  This  is
 desirable  if  the  old  master  source is to be kept in WYLBUR edit
 format and will be updated using the  INTEGER  option  (see  section
 6.4).

          INCR  specifies the  numbering  increment  to  to  used  to
                sequence the cards in the new master.  The default is
                1.   If  INCR  is specified in the PARM options, then
                that value will be the default.

          NEW1  specifies sequence number to be used  for  the  first
                card.  In most commands the default value is INCR+the
                previous  sequence  number.  In this case since it is
                an ADD, there is no previous sequence, so the default
                for NEW1 is the value of INCR.

         SEQID  Sequence field identification creates  an  alphabetic
                code  to  be  placed  on  each card image starting in
                column 73.  The actual sequence number then begins in
                column 73+ length of SEQID.

                The SEQID field is handled automatically by IEBUPDTX.
                Only the first old master card in SYSUT1 is  examined
                for  a  SEQID.  If one is found, all old master cards
                from SYSUT1 have zeros placed over the SEQID for  the
                update   process.   When  any  card  is  subsequently
                written out to SYSUT2,  the  SEQID  is  automatically
                replaced starting in column 73.

                SEQID is not compatible with the INTEGER option  (see
                section 6.4).

      LIST=ALL  produces a listing  of  the  data  read  by  the  ADD
                function.













                             TM77-    12
1

 2.2  CHANGE  (C, CHNGE, REPRO)
+     _________________________


 To change (or update) the old  master,  the  CHANGE  card  is  used,
 followed  by  detail control commands which specify the update to be
 made.  The detail control statements are:  ALIAS, COPY, DELETE, FIX,
 GANG, INSERT, MACRO, NOTE, NUMBER, REPLACE,  SCAN,  SEQUENCE.   They
 are  fully  discussed  in  the  next section.  In the absence of any
 detail statements, the old master is copied unchanged into  the  new
 master  file.   Unless the INTEGER option is used (see section 6.4),
 the old master must be  sequenced  before  the  update  process,  or
 completely  resequenced  by  the  update itself.  Otherwise, the job
 fails and no upating will be done.   Complete  resequencing  may  be
 done  by  a  SEQUENCE  or  NUMBER  statement,  or  by the INCR, NEW1
 parameters on the ADD or CHANGE cards.

 The CHANGE command is written in  much  the  same  way  as  the  ADD
 command:   the  member  name (if provided) is used to locate the old
 master data in SYSUT1 (if a PDS) as well as to store the new  master
 data in SYSUT2 (if a PDS).

          ./ CHANGE ÝNAME=name,VERSION=version,SSI=ssi,INCR=incr,
                     NEW1=new1,SEQID=seqid,LIST=ALL,NEWNAME=newname¨

          ./ CHANGE Ýname,,ssi,INCR=incr,NEW1=new1¨

 where

          NAME  member to be changed

       VERSION  discussed in Section 6.0.

           SSI  a code of up to 8 hex digits, assumed by IEBUPDTX  to
                be  right  justified  and  used  to  modify  only the
                corresponding  ssi  digits  that  previously   exist.
                Specifies  that  the PDS directory include four bytes
                of ssi data.  If SYSUT2 is not a PDS, ssi is ignored.
                If SYSUT1 is a PDS with ssi in its directory,  it  is
                retained  for use in the SYSUT2 directory as modified
                by SSI specified here.

                Once ssi  is  specified,  it  cannot  be  removed  by
                subsequent CHANGE cards, but it may be modified.  The
                default  ssi  is  either  the  ssi  provided  by  the
                previous update level, or X'FF200000' if necessary.

          INCR  specifies the numbering sequence which will  be  used
                to  resequence  the  cards.  Using INCR on the CHANGE
                card specifies complete resequencing of a member.








                             TM77-    13
1
          NEW1  specifies the sequence number  to  be  used  for  the
                first  card.   The default value is INCR+the previous
                sequence number.  If there is  no  previous  sequence
                number  (such  as when a member is ADDed) the default
                is the value of INCR.


         SEQID  changes the alphabetic code placed on  each  card  by
                the ADD card, starting in  col  73.   The  actual se-
                quence number then begins in col 73+length of seqid.

                Some caution must be used  when  coding  seqid  on  a
                CHANGE   card.   The  length  of  the  seqid  may  be
                increased but should not be  made  so  long  that  it
                overlaps  any  non-zero digit of the sequence number.
                SEQID=0 may be coded to indicate that no sequence  id
                is  desired  for  the  new master.  This special case
                still allows the program to automatically remove  the
                SEQID from the SYSUT1 cards.  See discussion of seqid
                under the ADD command for more comments.

                SEQID is not compatible with the INTEGER option  (see
                section 6.4).


      LIST=ALL  invokes a listing of the new master source data as it
                is written to SYSUT2.  If LIST=ALL is not  specified,
                only  cards  which are changed from old master to new
                are listed.


       NEWNAME  specifies the name to be applied to the  new  master.
                This  is particularily helpful when SYSUT1 and SYSUT2
                are the same PDS.  NEWNAME= is valid only for  a  PDS
                and only in SYSIN.



 Example 1:

         ./ CHANGE HASPINIT,LIST=ALL

 signals that changes are to be made to  HASPINIT;  the  inserted  or
 modified  statements  are  to  be  numbered  in increments of 1, the
 default starting with the previous sequence number + 1.  If INCR  is
 coded  on the PARM field, the default increment would be that value.
 The new master source is to be listed.  SEQID will be  used  if  the
 old master had seqid.  If SEQID=0 had been coded, the seqid from the
 old master would not be used.  The same is true for ssi.









                             TM77-    14
1
 3.0  DETAIL STATEMENTS
+     _________________

 Detail statements are used to modify the operation  initiated  by  a
 ADD  or  CHANGE  command, by defining the nature of the update to be
 performed.  A  range  of  card  images  may  be  deleted,  inserted,
 replaced,  or  renumbered.   Changes  to  character  strings  may be
 performed on a range of card  images.   Detail  statements  must  be
 arranged  in  order  of increasing sequence numbers of records being
 updated.


 3.1  SEQUENCE (Q)
+     ____________

 SEQUENCing may be specified  with  this  SEQUENCE  command,  with  a
 NUMBER  command,  or  as  a parameter on the ADD, CHANGE, INSERT, or
 REPLACE commands.

 The first SEQUENCE card immediately follows the ADD or CHANGE  card,
 and precedes the actual data to be added.  The format of the command
 is:

           ./ SEQUENCE INCR=incr,NEW1=new1
 or
           ./ SEQUENCE incr,new1

 At least one of INCR or NEW1 must be  coded  or  no  renumbering  is
 done.

 where

          INCR  specifies the numbering increment which will be  used
                to sequence the cards.  If card x has sequence number
                x,  card   x+1  will  have  sequence  number  x+INCR.
                The default value of INCR is 1  unless  a   different
                value has been coded for INCR in the PARM statement.

          NEW1  sets the sequence number to be  used  for  the  first
                card.   The default is the value of INCR+the previous
                sequence number or the value of INCR if there  is  no
                previous sequence number.

 The  sequencing  may  be  dynamically  modified  by  placing   other
 ./ SEQUENCE  commands among the source cards.  Sequence numbers must
 be assigned in increasing order.   Erroneous  NEW1  values  will  be
 rejected.

 It is a good practice to choose a relatively large increment if  one
 expects  to do frequent updates.  This leaves "room" to insert cards
 without resequencing parts of the old master  each  time.   It  also
 allows  the  use  of  two  methods  of  inserting  cards.   See  the
 description of the INSERT command in Section 3.4.







                             TM77-    15
1
 IEBUPDTX provides the ability to define the  default  INCR  used  by
 SEQUENCE,  NUMBER,  INSERT,  and REPLACE detail control commands and
 the ADD  and  CHANGE  function  control  statements.   To  define  a
 default,  code INCR=incr as one of the PARM options, where incr is a
 decimal number greater than zero.  This will override  the  built-in
 default increment of one.  This and other PARM options are discussed
 in Appendix I of this manual.



















































                             TM77-    16
1
 3.2    NUMBER  (N,NUMBER)
+       __________________

 For compatibility with IEBUPDTE, the ./ NUMBER command may  also  be
 used to initially sequence a deck:

           ./ NUMBER  »SEQ1=seq1ºÝ,SEQ2=seq2,INCR=incr,NEW1=new1,
                      INSERT=YES¨
 or
           ./ NUMBER  »seq1ºÝ,seq2,incr,new1,INSERT=YES¨

 where

          SEQ1  specifies the first card to be renumbered.   ALL  may
                be used to specify an entire member.  When specifying
                ALL,  omit seq2 but mark its place with a comma if it
                is  not  the  last  operand.   For  example,   NUMBER
                ALL,,incr.

          SEQ2  specifies  the  last  card  in  the   range   to   be
                renumbered.

          INCR  same as in the sequence command.

          NEW1  same as in the sequence command.  Like  the  sequence
                command, at least one of INCR and NEW1 must be coded.

 For compatibility with IEBUPDTE, the NUMBER command may be  used  to
 insert  or  renumber  a  range of the old master.  That usage is not
 encouraged as it is better to leave  the  original  source  sequence
 numbers as a common base from which to work.




























                             TM77-    17
1
 3.3  DELETE  (D, DELET)
+     __________________

 The DELETE detail statement is used to delete one or more cards from
 the old master.  The cards deleted are simply not transcribed to the
 new  master  -  they  remain  intact  in  the  old  master   (unless
 SYSUT1=SYSUT2).

          ./ DELETE »SEQ1=seq1ºÝ,SEQ2=seq2¨
 or
          ./ DELETE »seq1ºÝ,seq2¨

 where

          SEQ1  specifies the beginning of the range of  card  images
                to be deleted.

          SEQ2  specifies the last card image to be deleted.  If SEQ2
                is omitted, or if SEQ2=SEQ1,  a  single  card  image,
                SEQ1,  is  deleted.   SEQ2=END  may  be  specified to
                delete from SEQ1 to the end of the deck.

 Example 1:

           ./ DELETE 200-280
 or
           ./ DELETE SEQ1=200,SEQ2=280

 cause all old master records with sequence numbers between  200  and
 280  to be deleted.  If records 200 and 280 do not actually exist in
 the old master, a warning message is produced.

 Example 2:

          ./ DELETE 200,200

 deletes the single card with sequence number of 200.






















                             TM77-    18
1
 3.4  INSERT (I)
+     __________

 To add new cards to the old master, the INSERT command is used.  The
 new cards being INSERTed will be assigned new  sequence  numbers  by
 IEBUPDTX,  and  must  not contain any punches in columns 73-80.  The
 cards are inserted after  some  existing  card  image  
in  the  old
 master, whose sequence number is provided on the INSERT command.

 The INSERT command must be immediately followed by the data cards to
 be inserted.  The insert command is terminated when either a certain
 ./ command or a card with any non-blank characters in columns  73-80
 is encountered.

 Inserted cards are listed whether or not LIST=ALL is  coded  on  the
 CHANGE card.  LIST=ALL causes all new master source to be listed.

 Method 1:

           ./ INSERT »SEQ1=seq1º,ÝINCR=incr,NEW1=new1¨

 or
           ./ INSERT »seq1ºÝ,incr,new1¨

 where

          SEQ1  indicates where to insert the new cards  in  the  old
                master.   SEQ1=0  may be used to insert a card at the
                beginning of a deck if there is no card 0.

          INCR  specifies the numbering increment.  INCR defaults  to
                1  unless  a  different value of INCR is coded in the
                PARM statement.

          NEW1  specifies the sequence number to  be  placed  on  the
                first inserted card.  NEW1 defaults to SEQ1+INCR.

 The SEQUENCE command may also be placed  within  the  records  being
 INSERTed to dynamically modify incr and new1.

 Example 1:

    ./ INSERT 600,10
         data cards

 inserts the data cards into the new master,  after  card  600.   The
 first  card  inserted is numbered 610 with subsequent cards numbered
 620, 630, etc.











                             TM77-    19
1
 Method 2:

 Single cards may be inserted without using  the  INSERT  command  by
 punching  the  sequence numbers they are to have directly in columns
 73-80.  For example, if the old master contains cards  numbered  10,
 20,  30,  etc.  a data card in the update deck with 00000025 punched
 in columns 73-80, will be inserted between cards 20 and  30  and  be
 numbered  25.   To  insert in this manner, it is imperative that the
 number to be placed in columns 73-80 does not already exist  in  the
 old  master  - if it does, the old master card is DELETEd before the
 new card is inserted.

 The INSERT command  must  be  used  whenever  the  number  of  cards
 inserted exceeds the "room" left for them in the old master.  If the
 old  master  is  sequenced in steps of 1, it is impossible to insert
 using the second method described.  However, the INSERT command  may
 always  be used, since it automatically renumbers as much of the old
 master as is necessary to accommodate the cards inserted.  Therefore
 it is a good idea to initially use a relatively large increment when
 creating old masters, to minimize the number of cards which need  to
 be renumbered by subsequent insertions.

 Example 2:

 If the old master looks like:

                OLD1                                         00000100
                OLD2                                         00000101
                OLD3                                         00000200

 and the update deck is the following:

 ./ CHANGE OLD
 ./ INSERT 100
                AA
                BB
                CC
                DD

 the result would be:

                OLD1                                         00000100
                AA                                           00000101
                BB                                           00000102
                CC                                           00000103
                DD                                           00000104
                OLD2                                         00000105
                OLD3                                         00000200

 where card OLD2 has been  renumbered  to  accommodate  the  inserted
 cards.








                             TM77-    20
1
 3.5  REPLACE  (R)
+     ____________


 Two possible ways to REPLACE one or more cards  in  the  old  master
 with  new  data cards have already been described.  One method is to
 use a combination DELETE and INSERT commands which  IEBUPDTX  allows
 in  either  order.   Another  way  is to punch the data on a card in
 columns 1-72 with the sequence number of the card to be replaced  in
 columns  73/80.  This way can be very time consuming.  The third way
 is to use the  REPLACE  command.   The  data  to  be  inserted  must
 immediately  follow  the REPLACE command in SYSIN and contain blanks
 in columns 73-80 (just as for the INSERT command).

          ./ REPLACE »SEQ1=seq1ºÝ,SEQ2=seq2,INCR=incr,NEW1=new1¨
 or
          ./ REPLACE »seq1ºÝ,seq2,incr,new1¨
 where

          SEQ1  specifies the first card to be replaced.

          SEQ2  specifies the last card in the range to be  replaced.
                If  omitted,  only  one  card is replaced (SEQ1).

          INCR  specifies the numbering increment  for  the  inserted
                card.   INCR  defaults  to 1 unless a value was coded
                for the INCR PARM option.

          NEW1  is the sequence number to  be  placed  on  the  first
                inserted card.  The default is SEQ1.


 Example 1:

            ./ REPLACE 200-280
      or    ./ REPLACE SEQ1=200,SEQ2=280
      or    ./ R 200,280

 first deletes from 200 to 280 inclusive, and then  inserts  the  new
 data with sequence numbers beginning at 200.

 The number of cards inserted need not  equal  the  number  of  cards
 deleted.

 Example 2:

            ./ REPLACE 200,INCR=5
      or    ./ REPLACE 200,,5
      or    ./ REPLACE 200,,5,200
      or    ./ REPLACE SEQ1=200,INCR=5,NEW1=200
      or    ./ REPLACE 200,200,5,NEW1=200








                             TM77-    21
1
 replaces card 200 with the one or more cards following  the  REPLACE
 card  in  SYSIN.  If INCR had not been specified as 5, it would have
 defaulted to 1, and where NEW1 was not specified,  it  defaulted  to
 200.






















































                             TM77-    22
1
 3.6  FIX  (F)
+     ________


 Often it is necessary to replace an entire card simply  because  one
 word  on  it  was  misspelled, such as an assembly language op-code.
 (Murphy's law requires that the card with the smallest such  mistake
 has  the  longest  and most complicated operand field).  Rather than
 REPLACE the entire card, the FIX command may be  used  to  change  a
 string located anywhere on a card or in specified columns.  FIX will
 change the first occurrence of the string in each line.  The columns
 (COL)  option  allows  parts  of  a  card  such as the length of the
 operand to be changed while allowing the comments to  start  in  the
 same column.

 The syntax of the FIX command is

          ./ FIX »SEQ1=seq1ºÝ,SEQ2=seq2,COL1=col1,COL2=col2¨
                 »#badstring#goodstring#º
 or
          ./ FIX »seq1ºÝ,seq2,col1,col2¨»#badstring#goodstring#º

 where

          SEQ1  specifies the first card  to be fixed.

          SEQ2  specifies the last card in the range to be fixed.

          COL1  specifies the first column to be searched in the  old
                master.   The  default value is 1.  COL1 must be less
                than  or  equal  to  COL2.   The  COL  options  allow
                definition of the subfield which is  to  be  searched
                for the string.

          COL2  specifies the last column which is  to  be  searched.
                The  default  is 71.  COL2 must be less than or equal
                to 72.

             #  represents any non-blank character not  a  member  of
                the good or bad string.


     badstring  represents any string from 1 to 32  characters  which
                is to be replaced. At least one blank must follow the
                range specification and precede the bad string.


    goodstring  represents any string from 0 to 32 characters.

 The FIX operation operates from columns 1-71  by  default,  so  that
 continuation  characters  in column 72 will not be affected.  If the
 "good" string is shorter than the "bad" string, the right end of the
 resulting record is padded with blanks.  If  the  "good"  string  is
 longer  than the "bad" string, information to the right of the "bad"
 string is shifted to the right.   If  any  information,  other  than
 blanks, is lost, a warning message is given.



                             TM77-    23
1


 Example 1:

           ./ FIX 2475 #LPR#LCR#

 directs the update program to search columns 1-71 of the old  master
 card  2475  for the FIRST OCCURRENCE of the string "LPR" and replace
 it with the string "LCR".

 In the above example, the range consists of single card.

 The 'bad' and 'good' strings  may  be  of  different  lengths.   The
 'good' string may even be null.  It may be necessary to specify more
 of  the string than just the part you want replaced if there is more
 than one occurrence of it in a line.  Only the first  occurrence  of
 the  specified  string  on  each  card in the range is affected.  To
 change every occurrence of a string, use the SCAN command.


 Example 2:

            ./ FIX 42,,10-15    /B/BE/
 or
            ./ FIX 42,COL1=10,COL2=15   /B/BE/

 changes an assembly language mnemonic from B to  BE  in  columns  10
 through  15  of  card 42.  The second comma in the first FIX command
 marks the omitted positional parameter seq2.

 It is slightly more efficient  to  specify  columns  when  they  are
 known,  as  this  minimizes  the  amount  of  searching  required by
 IEBUPDTX to locate the "bad" string.


 The FIX command is unusual in that it doesn't interfere  with  other
 update  commands.  That is, you may specify more than one FIX active
 on a given card, or you may have a FIX active on a  range  of  cards
 and  still make insertions and deletions within the range.  However,
 inserted cards will not be FIXed.


















                             TM77-    24
1
 3.7  SCAN  (S)
+     _________

 SCAN is like FIX but SCAN replaces every  occurrence  of  the  "bad"
 string in the same line, not just the first.  Thus, SCAN is somewhat
 less efficient than FIX.  The syntax is the same as for FIX.


 3.8  NOTE
+     ____

 Comments may be placed on update commands by placing  at  least  one
 blank  after  the  last operand and following it with a comment.  If
 you really have a lot to say, the NOTE detail command may be used:

           ./ NOTE comments


 NOTE may be used only within the range of a CHANGE OR ADD command.


 3.9  ENDUP
+     _____

 This  command  indicates  an  end  of  file  and  is  provided   for
 compatibility with IEBUPDTE.  It is optional in most cases, but must
 not  be  used  with  the  LOAD  function.  In that case, it would be
 executed and would terminate the update instead of being loaded into
 the library.

           ./ ENDUP






























                             TM77-    25
1
 4.0  ADDITIONAL DETAIL STATEMENTS
+     ____________________________

 The detail statements described in section  3  were  all  explicitly
 concerned  with  the  update process.  The detail commands presented
 here provide services which  do  not  affect  the  basic  update  in
 progress,  but  may  still  be  useful.  Like all detail statements,
 those described here must be used with CHANGE or ADD.


 4.1  ALIAS
+     _____

 The ALIAS command modifies  the  CHANGE  or  ADD  command  which  it
 follows  by  specifying an additional name by which the member being
 stored in SYSUT2 (PDS) may be  referenced.   The  ALIAS  command  is
 written as

          ./ ALIAS »NAME=nameº
 or
          ./ ALIAS »nameº

 where

          name  is the additional name of the member being
                placed in SYSUT2.


 At most one ALIAS may be used per  ADD/CHANGE,  and  may  be  placed
 anywhere  behind  the ADD/CHANGE which it modifies, preferably after
 the last detail card.





























                             TM77-    26
1
 4.2  GANG  (G)
+     _________

 The GANG command provides a gang-punching facility.  It  allows  you
 to   specify   an  identification  code  of  up  to  8  alphanumeric
 characters.  This code will be placed in  each  data  card  inserted
 into the new master by the update deck in SYSIN, or as a result of a
 SCAN/FIX  operation  effected by SYSIN.  Successive updates may have
 the same or different code.

          ./ GANG ÝCODE=code,COL=col¨
 or
          ./ GANG Ýcode,col¨

 where
          code  is  the  string  to  be  gang-punched.   If  code  is
                omitted, the previous GANG operation  is  terminated.
                It  is possible to code SSI, in which case the last 4
                digits of the SSI specified on the ADD/CHANGE card is
                used.


           col  is  the column in which the code is   to  begin.   If
                omitted,  the  code  is  placed  in (column 72 - code
                length) so that the ganged string ends in column 71.

 GANG is one of the few "./" control cards which does  not  terminate
 an INSERT operation, permitting the GANG to be altered at any time.

 Example 1:

          ./ GANG CODE=23GS2032

 will place the code 23GS2032 on  each  card  inserted  beginning  in
 column 64 (72-code length of 8 = 64).


 4.3  COPY
+     ____

 The COPY command provides the ability to enter data from a  separate
 library  into  SYSIN  (except  that COPYed data is not GANGed).  The
 data fetched as a result of a COPY command is  taken  from  the  PDS
 described  by the DDNAME operand.  The default DDNAME is SYSLIB, but
 the LIBDD PARM option  may  be  used  to  specify  another  default.
 Copied  data  is not checked for ./ in columns 1/2.  If such a "copy
 library" is not provided, IEBUPDTX will terminate with  return  code
 12.

 COPY is valid without restriction under ADD,  but  must  be  in  the
 range  of  an  active INSERT or REPLACE when used under CHANGE.  The
 COPY command, like GANG, does not terminate an active INSERT.   When
 under CHANGE, the sequence field 73-80 is automatically blanked.







                             TM77-    27
1

          ./ COPY »NAME=nameºÝ,VERSION=version,FROMSEQ=fromseq,
                  TOSEQ=toseq,DDNAME=ddname¨
 or
          ./ COPY »nameºÝ,,fromseq,toseq,DDNAME=ddname¨



 where

          name  specifies a member of SYSLIB which  is  to  logically
                replace the COPY command in SYSIN.

       version  described in Section 6.0.

       fromseq  specifies the first card to copy.  If   omitted   the
                COPY  begins  with  the  first  card  in  the member.
                FROMSEQ=0 may be  coded  to  explicitly  request  the
                default.

         toseq  specifies the last card in the range  to  be  copied.
                If  omitted,  the  COPY  ends  at  the last card.  If
                FROMSEQ was specified and TOSEQ is omitted, only  one
                card is copied.  TOSEQ=END may be coded to explicitly
                request the default.

        ddname  specifies the ddname of the copy library to be copied
                from.  The default is SYSLIB unless  the  LIBDD  PARM
                option  specifies  another  name.   The PDS may be in
                WYLBUR edit format but must have sequence numbers  in
                col 73-80 (see Section 6.4).


 "./" control statements which are copied are  treated  as  data.   A
 CHANGE  command may be used to copy from SYSUT1 to SYSUT2 and an ADD
 - COPY combination may be used  to  copy  from  any  SYS  ddname  to
 SYSUT2.

 Example 1:

             ./ C HASPINIT
             ./ R  100K
             ./ COPY HASPGEN

 The COPY statement will be logically replaced in SYSIN by the SYSLIB
 member named HASPGEN.  SYSIN will then look like:

             ./ C HASPINIT
             ./ R 100K
             (all records of HASPGEN here)








                             TM77-    28
1
 4.4  MACRO
+     _____

 The MACRO command is similar to COPY except  that  under  CHANGE  it
 need not follow an INSERT and the sequence field is not blanked out.
 The  copied  data  will  be  written to SYSUT2 at whatever point the
 update happens to be, and with whatever sequence information happens
 to be in the copied member.  Data copied in  this  manner  logically
 appears to have originated in SYSUT1 rather than in SYSIN.

 The MACRO command is restricted in that no range  may  be  specified
 (its range is always 0-END).  In addition, the DDNAME of the library
 cannot be overridden.

             ./ MACRO »NAME=nameº
 or
             ./ MACRO »nameº


 MACRO commands are ignored  if  not  in  the  primary  control  file
 (SYSIN).   Data  inserted  using  MACRO  is  not  listed  unless the
 LIST=ALL option was selected on the CHANGE/ADD command.  It is  also
 not included in the DECK option's output.

 Example 1:

             ./ C HASPINIT
             ./ MACRO  HASPGEN

 produces the same effect as the  example  in  the  COPY  command  if
 HASPINIT contains no statement with a line number less than 100K.




























                             TM77-    29
1
 5.0  ADDITIONAL PDS FUNCTION STATEMENTS
+     __________________________________

 The following commands are useful for PDS  maintenance  and  may  be
 used  only  for  PDS's.   They  are  function  statements and do not
 require an ADD or CHANGE card.


 5.1  LIST
+     ____

 It is often desirable to LIST the source data in a PDS member.  This
 could be done using the CHANGE command to update the desired member,
 with SYSUT2 directed to a printer and a null change-update deck,  or
 by  having  SYSUT2  be  the DUMMY data set, and specifying LIST=ALL.
 Unfortunately, this limits the listing capacity to SYSUT1, unless an
 ADD - COPY combination is used, and requires running a separate step
 to perform updates.  Alternatively, it requires using INDD and OUTDD
 parm options, with additional DD cards.

 The LIST command provides for listing the contents of a  PDS  member
 in a more natural and efficient manner, and is written as follows:

          ./ LIST »NAME=nameºÝ,DDNAME=ddname¨
 or
          ./ LIST »nameºÝ,DDNAME=ddname¨

 where

          name  is the  name of the PDS member to be listed.

        ddname  specifies another library  to  be  listed  from.   If
                listing  members  from  more  than one library, it is
                most efficient to group all  the  LIST  cards  for  a
                particular  library  together.   The  default name is
                SYSLIB unless the LIBDD PARM option specifies another
                name.


 5.2  LOAD
+     ____

 The LOAD command creates a library of update (CHANGE and ADD) decks.
 Each CHANGE or ADD deck following a ./ or LOAD card in SYSIN becomes
 a member of the PDS.  Each member is stored in SYSUT2 under the name
 given on its CHANGE or ADD card.  The ENDUP statement should not  be
 used  with  LOAD  because  it  is executed when encountered, and the
 update is terminated.

          ./ LOAD

 The update decks being stored  must  contain  only  detail  updating
 commands,  since a major command would be executed, not loaded.  The
 decks should not contain any ENDUP  cards.   The  update  decks  are
 further  restricted  in  that  their  CHANGE or ADD cards may not be
 continued.





                             TM77-    30
1
 5.3  SCRATCH (DROP)
+     ______________

 Occasionally, it may become necessary to completely remove a  member
 from  a  library  (PDS).   This  operation  may be done by using the
 SCRATCH command, which will delete the named member from the  SYSUT2
 data set.  This command is written as follows:

          ./ SCRATCH »NAME=nameº
 or
          ./ SCRATCH »nameº

 where

          name is the PDS member to be removed from the new master.


 5.4  RENAME
+     ______

 The RENAME command may be used to change the  name  of  an  existing
 SYSUT2 member.  it is written:

               ./ RENAME »NAME=name,NEWNAME=newnameº
 or
               ./ RENAME »name,newnameº

 where

         name   is the name of the new master PDS member to be
                changed.

      newname   specifies the name to be given to the new member in
                the new master PDS


























                             TM77-    31
1

 6.0  ADDITIONAL UPDATING FEATURES
+     ____________________________

 The features described below  were  deliberately  omitted  from  the
 discussion  in  section  2.   Knowledge  of  these  features  is not
 required to use IEBUPDTX properly - but is required to use  IEBUPDTX
 elegantly.


 6.1  VERSION (CHAINED) LIBRARIES
+     ___________________________

 Chained libraries allow multiple versions of a member to  be  stored
 in a PDS.  They are convenient for the following:

 (a)  When updating an old master, the new master can  be  placed  in
      the  same  PDS  as  a  new  version  of the same member via the
      CHAIN=id option.  After testing this new version,  the  CURRENT
      command  can  then  be  used  to  specify  it as the production
      version.  The older version need not  be  deleted  and  can  be
      re-specified  as  the  production  version  (using  CURRENT and
      VERSION=) if the new version should fail to perform correctly.

 (b)  Chained libraries can also be created to contain update  decks.
      By  using  the  CHAINUPD  parm option, chained members starting
      from  version  0  to  the  production   version   are   applied
      recursively to update the old master.

 See section 6.1.1 for example using a chained library as update.

 The   CHANGE   and   ADD   commands  described  in  Section  2  will
 automatically destroy an identically named member  in  SYSUT2.   The
 use  of VERSION on CHANGE or ADD commands avoids this possibility by
 automatically assigning a unique new name to the new master as it is
 stored in SYSUT2.  With CHAINing, the first version of the member is
 stored with the actual name found on  the  CHANGE  or  ADD  card  as
 VERSION  0 (zero).  It looks just like a member stored in any OS PDS
 - and hence any members which exist in a library  before  converting
 to  CHAINing  automatically  behave  like  version  0 members.  When
 storing a new member into SYSUT2 with CHAINing  specified,  however,
 it must be explicitly declared as VERSION=0.

 So far, nothing special has happened.  CHAINing is  not  implemented
 until  a  second  version  of  the member is stored in SYSUT2.  When
 CHAINing is implemented for a member, a member ID number is obtained
 from a special  directory  entry  in  SYSUT2  called  the  allocator
 (written  as  @LLOCATR) and assigned to the member.  All versions of
 this member will have this member ID  number  in  common.   The  PDS
 directory  entry  for  version  zero  of  the  member is expanded to
 include, among other things, this ID number, and is re-written along
 with another directory entry for version zero's  special  "internal"
 name back to SYSUT2's directory.







                             TM77-    32
1
 Now there are three directory entries for the two  versions  of  the
 member  -  one has the version zero internal name and points to (ie.
 contains the TTR  of)  the  original  member,  the  second  has  the
 internal  name  representing  version  one,  and  points  to the new
 member, and the third has the actual external  member  name  of  the
 member  (which  you put on the CHANGE card to refer to it) and still
 points to the version zero (original) member.


      The format of an internal name is

             _______________________________________
             | two byte\\ | three byte | three byte |
             | library id | member id\ | version no\|
+            ________________________________________



 Internal names may be used  directly  (with  due  caution)  in  most
 cases.   Doing  so  will  generally cause VERSION=NEXT operations to
 work incorrectly and possibly cause an old version to be  scratched.
 This   alternative   is  provided  to  facilitate  recovery  when  a
 production alias is inadvertently scratched.

 Since this third directory  entry  (called  the  "production  alias"
 because  it contains the real "production" name of the member) still
 points to version zero, any reference made by  any  OS  function  or
 program  to  the  CHAINed  member  name will continue to provide the
 source data in version zero.  Similarly, references made by IEBUPDTX
 as described in section 2  will  also  produce  only  version  zero.
 Hence  your  version  is  still invisible to the other users of your
 CHAINed library and will remain so until a new production version is
 designated with the CURRENT command.

 In order to test or use another version, COPY (or MACRO) the version
 desired, placing it within the new master  (temporary)  output,  and
 passing this to a compiler or whatever.

 If someone runs an update  of  the  member  specifying  version  one
 again, version one will be replaced.  To avoid this, the next member
 should be put in as version two (or as VERSION=NEXT).


















                             TM77-    33
1
 Example:

 The following will load different versions of a same member  into  a
 chained library:

 // EXEC PGM=IEBUPDTX,PARM='CHAIN=SH'
          .
          .
 ./ ADD MASTER,VERSION=0
          .
        data
          .
 ./ ADD MASTER,VERSION=1
          .
         data
          .
 ./ ADD MASTER,VERSION=2
          .
         data
          .




 6.1.1  CURRENT
+       _______

 As soon as a new version is debugged, the production  alias  may  be
 rewritten  to  point  to  it  instead  of  version zero by using the
 CURRENT function statement.

                    ./ CURRENT »NAME=name,VERSION=versionº
 or
                    ./ CURRENT »name,versionº

 where

           name     is the name of the member to be affected.

           version  is the version number to become the production
                    version.

 CURRENT will set the production alias to point to the version number
 specified.  This does not cause the previous "current" version to be
 lost, since it is still locatable by its internal name.  Hence,  the
 previous  (working)  version can always be retrieved in an emergency
 by using another CURRENT command.












                             TM77-    34
1

 Example:

 The following inserts version 8  as  the  production  version  in  a
 chained library of update decks (assuming that version 0 - 7 already
 exists):

 //  EXEC PGM=IEBUPDTX,PARM='CHAIN=UP'
          .
          .
 //SYSIN DD *
 ./ LOAD
 ./ CHANGE A
 ./ INSERT 100,10
          XX
          YY
 ./ CURRENT A,VERSION=8

 If the library is now used as an intermediate update with  CHAIN=UPD
 specified  (see section 6.3), all version members from 0 - 8 will be
 used as recursive updates.





































                             TM77-    35
1
 6.1.2  Specifying Version Numbers
+       __________________________

 Version numbers may be specified on most function statements and  in
 two  detail  statement  (COPY and MACRO).  The following chart lists
 the commands for which  VERSION=  is  valid.   Version  numbers  are
 specified as the second positional operand, or by using the VERSION=
 or  V=  keywords.   VERSION=NEXT may be specified on a CHANGE or ADD
 card to prevent accidental deletion of a version when  the  user  is
 not  certain  of  the  next version number.  The output listing will
 tell which version number should be used to  subsequently  reference
 the version created or attempted by that run.

 Version number may be designated in three ways:

      HASPINIT-2
      HASPINIT,2
      HASPINIT,VERSION=2

 are all identical in meaning.  All refer to version 2 of HASPINIT.

 VERSION specified on a CHANGE card applies only to  the  new  master
 member  name.  The production version will be updated.  ADD-COPY and
 recursive updates may be used to update an arbitrary version.

 To use version numbers on CHANGE/ADD commands, it  is  necessary  to
 inform  IEBUPDTX  that SYSUT2 is to be considered a CHAINed library.
 This is done via an EXEC PARM, "CHAIN=ID".  ID will be used  as  the
 two  byte library id for the library defined by SYSUT2 if it doesn't
 already have one.  It is a good idea to give each library  a  unique
 id  so  that  there  will  be  no  ambiguity  possible  if  they are
 concatenated later.  If the library already has an id (has been  run
 once  before  with  CHAIN=ID  specified) you may omit the id, coding
 simply "CHAIN".

 Example 1

      ./ CHANGE HASPINIT-3

 means update the current version of HASPINIT and store the result as
 version 3.

 Example 2

 To update version 2:

      //SYSIN DD *
      ./ CHANGE HASPINIT-3
      //OPDT1 DD *
      ./ ADD  HASPINIT
      ./ COPY HASPINIT-2,DDNAME=SYSUT1








                             TM77-    36
1
 Version numbers may be specified by the following commands:

                       With            Without
         COMMAND     CHAIN=             CHAIN=           VERSION=NEXT
                      PARM               PARM             (allowed in
                                                           command)
+____________________________________________________________________

         ADD         Required           Not valid           Yes
                     ALIAS not
                     allowed

         CHANGE      Required           Not valid           Yes
                     ALIAS not
                     allowed
                     NEWNAME
                     not allowed

         SCRATCH     Yes                Yes                 No

         CURRENT     Yes                Yes                 No

         LIST        Yes                Yes                 No

         COPY        Yes                Yes                 No

         MACRO       Yes                Yes                 No

 To SCRATCH any particular version of a member, after which it cannot
 be retrieved, simply use that version number on the SCRATCH command:

            ./ SCRATCH name,version

 It is  recommended  that  versions  of  a  member  be  scratched  in
 decreasing  order  of  version numbers.  IEBUPDTX keeps track of the
 next version number to be assigned, but the process  only  works  if
 the highest version is scratched first.  For example, if versions 3,
 4,  and  5  exist,  VERSION  NEXT  is  6; if version 5 is scratched,
 IEBUPDTX subtracts 1 from NEXT and NEXT will equal 5.  If,  however,
 version 4 is scratched, NEXT is not affected (and remains 6) because
 4 was not the highest version created.


















                             TM77-    37
1
 6.2  RECURSIVE UPDATES
+     _________________

 The use of two or more update decks at the same  time  to  update  a
 single  member  is  called  a  recursive  update.  Given an original
 source module and the update deck necessary to go from  level  0  to
 level  1  of  this  module, suppose that you want to update again to
 level 2.  If the level 1 source module is available, it may be used,
 but for large modules, it may not be practical  to  retain  complete
 source at every level.  Given such a situation, one can either:

    1) create level 1 (temporary) from level 0 and update to level 2

    2) update the level 1 update deck and update directly from level
       0 to level 2 (a very risky procedure¸

    3) use two update decks recursively

 A recursive update is a "nested" update and is defined for each  old
 master card image as:

             level 2 = update2(update1(level 0)).

 To perform such an update, input:

    o level 2 update deck (which updates level 1 to level 2)
      via the control file

    o level 1 update deck via an intermediate update file

 An intermediate control file is identified to IEBUPDTX by any DDNAME
 which does not begin  with  the  letters  SYS.   If  more  than  one
 intermediate  update  file is used, they are applied in the order of
 the DD JCL statements which identify  and  define  them.   SYSIN  is
 always  applied  last, irrespective of the placement of the SYSIN DD
 statement in the JCL.  It may be convenient to  consider  SYSUT1  as
 update level 0, which of course always comes first.

       ______       ______       ______       ______
      |      |     |inter-|     |      |     |      |
      | old  |     |mediat|     |contrl|     | new  |
      |master|  +  |update|  +  | file |  =  |master|
      |      |     | file1|     |      |     |      |
+      ______       ______       ______       ______
      SYSUT1         **          SYSIN        SYSUT2
      Level #0      Level #1     Level #2
                 update deck   update deck


 When using intermediate update files, the member name found  on  the
 CHANGE  card  in  SYSIN  is  used  to  locate the update decks which
 correspond to  the  same  member  in  the  intermediate  files.   An
 intermediate update file may be sequential or partitioned.  If it is
 sequential,  the  order  of  updates must follow the order of CHANGE
 cards in SYSIN; if it is partitioned, the update program can  locate
 intermediate   update   decks   automatically.    Using  partitioned
 intermediate update files is highly recommended for doing more  than



                             TM77-    38
1
 one update in a single job step.


 The SEQID option, described under CHANGE and ADD, will not  function
 well  with  some  sequential  intermediate  situations.   When using
 SEQID, INCR, or NEW1 on an intermediate CHANGE card,  provide  dummy
 CHANGE  cards as place holders for members not being updated at this
 level.  The name on the place-holder's CHANGE card  must  match  the
 omitted  intermediate  update.   It is permissible to omit an update
 for any SYSIN named update from an intermediate update library.   It
 is  also  permissible for an intermediate update deck to specify the
 ADD function, in which case the source data from that member will be
 used as the old master.

 The recursive updating technique is sometimes convenient even for  a
 single update per member, since all the update decks could be placed
 in  a  single  PDS (using the LOAD function) and the updates desired
 could be selected with simple CHANGE cards in  SYSIN.   It  is  also
 useful  for  updating  something  from  a library other than the old
 master file defined by  SYSUT1--(for  instance,  if  SYSUT1  has  an
 identically  named member which was not to be updated)--since an ADD
 - COPY combination may be used in an intermediate  file  to  provide
 old master source.

 Also note that only updating  commands  are  valid  in  intermediate
 update  decks.   The  LIST,  RENAME  , SCRATCH, CURRENT, PARM, LOAD,
 ALIAS, and MACRO commands are not  functional  unless  in  the  main
 control  file.  If SYSIN is omitted (not recommended), IEBUPDTX will
 use an intermediate file as the main control file provided that  the
 last such file defined is sequentially organized.


 6.3  CHAINED RECURSIVE UPDATES
+     _________________________


 If the CHAINUPD parm option is specified, IEBUPDTX will  check  each
 intermediate  member  update  fetched  from  a  PDS  to see if it is
 actually the production alias of a chain of updates.  If this is so,
 each update in the chain from version 0 through the production alias
 will automatically be applied.  If  NOCHAINUPD  had  been  specified
 (the  default),  only  the  production  alias update would have been
 applied.

 SEQID is a global option, and is not  handled  separately  for  each
 recursive  update deck.  Any SEQID specified by a lower level update
 is completely  overlaid  by  specifying  SEQID  in  a  higher  level
 update's CHANGE card.

 If you are using a sequential intermediate update deck whose  CHANGE
 card  specifies any of SEQID, INCR, or NEW1, and if the intermediate
 update will not be used immediately because the previously performed
 update didn't update the member named on its CHANGE card,  you  must
 provide  a  dummy CHANGE command to precede the delayed intermediate
 update as a place-holder.  (The name on  the  place-holder's  CHANGE
 card to match the omitted intermediate update).



                             TM77-    39
1
 6.4  WYLBUR EDIT FORMAT DATA SETS
+     ____________________________

 Any or all data sets used in IEBUPDTX may be in WYLBUR  edit  format
 (i.e.   RECFM=u,  LRECL=BLKSIZE=3156  or  3520).  IEBUPDTX unpresses
 input data set into 80 byte card images and vice  versa  for  output
 data sets.

 Additionally, a new parm option, INTEGER, can be specified if WYLBUR
 line numbers and sequence numbers are synonymous.   INTEGER  applies
 only  to SYSUT1 (old master) and SYSUT2 (new master) data sets since
 update decks usually do not contain sequence numbers.

 There are several restrictions if SYSUT2 is  in  WYLBUR  format  and
 INTEGER option is used:

 (a)  SEQID= on ADD or CHANGE cards may not be used.

 (b)  SYSUT1, the old master, may not have an old SEQID.

 (c)  If doing an initial  ADD  (i.e.   no  SYSUT1),  there  must  be
      sequence numbers in col 73/80.

 Advantages to using the INTEGER option are:

 (a)  minimizing the amount of space used -  4  bytes  is  saved  for
      every line in the data set;

 (b)  no longer has  to  put  sequence  numbers  in  col  73-80  when
      inserting new lines in the data set.

 Note that since WYLBUR numbers start at .001  and  sequence  numbers
 start  at 1, the latter will always be 1000 times the former.  Hence
 if the WYLBUR data set begins  numbering  at  1,  the  corresponding
 sequence number starts at 00001000.























                             TM77-    40
1
 6.5  WRITING USER UPDATING EXITS (USER COMMAND)
+     __________________________________________

 With IEBUPDTX it is possible to define your own update commands.  To
 do this, it is necessary to write a  USER  update  exit  routine  in
 assembly  language  as described below.  This program is loaded from
 the default STEPLIB or JOBLIB and branched to as  specified  by  the
 USER detail command.

       This command is written as follows:

             ./ USER »NAME=name,SEQ1=seq1ºÝ,SEQ2=seq2,CODE=code¨
 or
             ./ USER »name,seq1ºÝ,seq2,code¨

 where

          name specifies the entry point name of the load  module  to
                be used as the USER exit routine.

          seq1 specifies the sequence number of the first old  master
                record to be USER updated.

          seq2 specifies the sequence number of the last  old  master
                record  to  be  USER updated.  Seq2 may be omitted if
                only one record is to be updated.

          code is any  string  of  from  one  to  eight  alphanumeric
                characters  which  will be made available to the USER
                exit routine, right justified in a  doubleword.   The
                code default is eight blanks.

 For each old master card found in the range  defined  by  seq1-seq2,
 IEBUPDTX  will  branch  to the entry point name of the exit routine.
 The USER exit routine may delete, modify, insert, or leave unchanged
 at or before the current old  master  card.   This  choice  must  be
 communicated  to IEBUPDTX by setting the appropriate return codes in
 register R15, as follows:

       0    Do not modify the current old master card.

       4    Delete the current old master card.

       8    Replace the old master card with the specified data  (see
            below).

       12   Insert specified new data before the current  old  master
            record.   Branch  to this routine again with the same old
            master record.

       16   Stop this member update (severity 8)








                             TM77-    41
1
 The following registers are set at entry to the exit routine:

       13-15 Standard OS linkage conventions.

       1     pointer to 4 doublewords:

             Offset
+            ______

             hex 0:   The code value from the USER command.  Code  is
                      right  justified in its eight byte field, blank
                      if omitted on USER command.

             hex 8:   Work area:  First word set to zero for each new
                      USER command  (not  for  each  new  old  master
                      card).   Second  word  initially  zero  (at the
                      beginning  of  each  member  update)  but   not
                      changed  by IEBUPDTX after that.  The work area
                      must be  used  to  retain  information  between
                      successive  invocations of the exit routine, as
                      following an insert.  This is because the  same
                      routine  may  be  in  use  by  an  intermediate
                      update.

                      In general, the contents of seq1 and  seq2  are
                      unimportant.  Seq2 may be set equal to the seq1
                      value  to  inhibit any possible future calls to
                      the exit routine for the current USER  command,
                      except for the call which must follow an insert
                      request.   Do  not  set  seq1  and  seq2 in any
                      manner so as to prevent this.  (i.e., never set
                      seq2 less  than  the  sequence  number  of  the
                      current old master card.)

             hex 10:  seq1 from the USER command (EBCDIC with leading
                      zeros).

             hex 18:  seq2 from the USER command.

       2     The contents of R2 + 6 point to the current  old  master
             record.   (The  first  6  bytes  are  the identification
             bytes, as seen in the listings -- eg.  (01),  MAC  ,  or
             blanks).   Do  not  modify  any  of  the old master data
             directly.

       3     Register R3 points to 6 below a 72 byte area in which to
             place   replacement   or    insertion    data.     E.g.,
             MVC 6(72,R3),NEWREC\\\).

       4     Register R4 points to  PWA  (the  Print  Work  Area)  of
             IEBUPDTX,  and  may  be  useful  if  messages  are to be
             printed from the exit routine.  Note that such  messages
             must be printed using the XPRNTLIN macro only.  XPRNTLIN
             is a macro found in IEBUPDTX source.





                             TM77-    42
1
 The USER exit routine must be serially  re-usable,  with  no  memory
 (other than the work area provided by IEBUPDTX) between invocations.

 The following discussion may be helpful in using  the  USER  feature
 most efficiently:

 Whenever a branch to a user exit is required, IEBUPDTX compares  the
 entry  point  name  (saved  from  the USER command) against a global
 field which contains the name of the entry point  last  LOADed.   If
 the names match, IEBUPDTX branches directly to the exit routine.  If
 they  don't  match,  IEBUPDTX  must  first  issue  the  DELETE macro
 instruction for the previous routine, if  any,  and  then  the  LOAD
 macro  instruction for the new entry point name.  After the new exit
 routine is loaded, its name and address are saved globally.

 Hence it is most efficient to have a single USER  exit  routine  per
 update  whenever possible (one routine may perform several functions
 by testing the code  specified  on  the  USER  command),  and  least
 efficient  to  have several separate load modules invoked in a mixed
 sequence.

 If SCAN or FIX is active on the same card image  as  USER,  USER  is
 applied  last  (to allow the exit routine to detect, perhaps, if the
 identification field of the old master record is blank).   Only  one
 USER  command  can  apply  to  an old master record, unless one uses
 intermediate update files.

 A 'global' user exit may be specified via the parm field.   Such  an
 exit  routine  applies to each card about to be written into the new
 master, and may only ignore,  modify,  or  delete.   In  this  case,
 modifications  may  be applied (by the exit routine) directly to the
 input record, without moving it.  For compatibility, the global exit
 is called with R2 = R3.  Furthermore, only one global  exit  may  be
 active  at  a  time and no CODE may be passed.  An example of a user
 exit routine which may be employed either  locally  or  globally  is
 HERB.  HERB, which inserts a minus sign into assembly language macro
 model   statements   just   after  the  operand  field  (to  improve
 readability of assembly listings), is  supplied  with  the  IEBUPDTX
 distribution tape.



















                             TM77-    43
1
 APPENDIX I -- PARM OPTIONS

 The following options may be included in the PARM field of the  EXEC
 card  or  in  a  ./ PARM command placed after the CHANGE card.  When
 supplied from the  EXEC  PARM  field,  at  most  50  characters  are
 allowed.   ./ PARM commands may specify several options separated by
 commas, but may not be continued.  The PARM command may be used more
 than once  in  a  run,  but  only  with  function  statements.   For
 instance,

      ./ PARM  OUTDD=SYSUT3

 closes SYSUT2 and opens SYSUT3.

 The parm options are given below with their defaults shown:

 1.   INCR=1     Reset the default  increment  to  be  used  if  left
                 unspecified.  This default is used on detail control
                 functions  (such  as  INSERT).   It  is  not used on
                 function statements such as CHANGE  or  ADD,  unless
                 NEW1 is specified.

 2.   NOCHAIN
      CHAIN=id   Specifies that SYSUT2 is a CHAIN library,  and  thus
                 VERSION numbers become required on  CHANGE  and  ADD
                 control  cards unless doing a ./LOAD.  The "id" is a
                 two letter library identification code,  which  will
                 be used to create internal names for new versions of
                 members.   Once  the  allocator  (@LLOCATR) has been
                 stowed in the library's directory, the id cannot  be
                 changed.  If the id has been set previously, you may
                 code CHAIN rather than CHAIN=id.

 3.  COND=n      Sets the maximum  allowed  severity  error  message.
                 All  IEBUPDTX  error  messages  have associated with
                 them a  potential  step  return  code.   Default  is
                 eight, which allows both errors from which immediate
                 recovery  is  possible,  such as an insert operation
                 which doesn't provide any new data  to  insert.   It
                 also  allows errors which require termination of the
                 current member update, but allow the program  to  go
                 on  to the next update (in SYSIN).  COND=4 prohibits
                 these latter errors from recovery,  which  might  be
                 desired  when  SYSUT2  is sequential.  COND=0 forces
                 termination following any error or  warning  message
                 which is desirable when taking SNAP dumps after each
                 error.   COND=12  is not recommended.  It will allow
                 the program to possibly recover from such things  as
                 sequential SYSLIBs, but then again...









                             TM77-    44
1
 4.  (NO)LISTLEV Tells the program to list insertions (deletions,  if
                 applicable) caused by all intermediate update decks.
                 Default is to list only changes caused by SYSIN.

 5.  (NO)LISTDEL Causes all deleted records to be listed.  Default is
                 to list any deleted cards.  If LISTLEV is specified,
                 only cards deleted by SYSIN controls will be listed.
                 Old master  records  altered  by  FIX  or  SCAN  are
                 considered deleted records.

 6.  (NO)LISTRN  Causes any statements renumbered by aftermath  of  a
                 SYSIN insert operation to be listed.

 7.  (NO)GANG    Specifies that all cards inserted or added to SYSUT2
                 (or  new master) as a result of commands interpreted
                 within an update file are  to  have  the  last  four
                 characters  of the SSI placed in columns 68-71.  You
                 may temporarily specify a different  GANG  operation
                 within  a  member update via the GANG detail control
                 card.  Failure to provide SSI for the GANG operation
                 does not cause the update to fail unless COND=0.

 8.  (NO)DECK    Specifies  whether  or  not  an  IEBUPDTE compatible
                 update deck equivalent (except  for  sequencing)  to
                 the  following CHANGE operations is to be punched or
                 written to SYSPUNCH .  The update deck produced  may
                 be  a  sequential or partitioned data set (which may
                 be partitioned).  If the new master is based in  any
                 way on data provided by an ADD command, no DECK will
                 be produced for that member unless the ADD option is
                 also used.

 9.   ADD        When used with the DECK option, ADD will  result  in
                 an   IEBUPDTX  compatible  deck  being  punched  for
                 modules that were ADDed.  If the ADD parm option  is
                 omitted, decks for ADD modules will not be produced.

 10.  (NO)NAMES  Specifies that control statements have  name  fields
                 (and  thus  the  blank(s)  following  the  "./"  and
                 preceding  the  command  word are required).  If the
                 default (NONAMES) is used the blanks may be omitted,
                 but  if  the  name  field  is  used  NAMES  must  be
                 specified.

 11.  (NO)INSERT When INSERT is specified, columns 73-80 on  INSERTed
                 cards  are  treated  as  blank  no  matter what they
                 contain.   Otherwise,  they  are  checked  and,   if
                 non-blank, used as IEBUPDTE change data records.

 12.  (NO)TIMES  STOW a time stamp in the  SYSUT2  directory  of  all
                 CHANGED  or  ADDED  members  in  the form (4 bytes =
                 YYDDDHH+).






                             TM77-    45
1
 13.  OUTDD=SYSUT2 Specifies the DDNAME of the New Master  data  set.
                 It  may  be  changed any time between major function
                 commands.  Any ddname  beginning  with  SYS  may  be
                 used.

 14.  INDD=SYSUT1  Specifies the DDNAME of the old master file  name.
                 Same specification as for OUTDD name.
 15.  LIBDD=SYSLIB Specifies the default for DDNAME= on ./ COPY or ./
                 LIST commands, and the DDNAME of the library used by
                 ./ MACRO commands.

 16.  NOUSER
      USER=      Specifies  external  name  of  a  global  user  exit
                 routine, or cancels it.

 17.  (NO)CHAINUPD  Specifies whether or not chained members found as
                 intermediate updates in PDSs are to be applied as an
                 ordered  set  of  recursive updates (otherwise, only
                 the production version is used).

 18.  (NO)LISTING Specifies if listing of update commands and data is
                 to be provided (Default is LISTING).  NOLISTING will
                 also supress  the  listing  generated  by  the  LOAD
                 command.  This option overrides LIST=ALL.

 19.  DECKINCR=1  Specifies the value which is to be produced in  the
                 INCR=  field of NUMBER commands produced by the DECK
                 option.

 20.  WYLBUR     Allows the SYSIN control stream to have WYLBUR  line
                 numbers  in  columns  73-80.   IEBUPDTX  ignores the
                 WYLBUR line numbers for updating purposes but prints
                 them at the  left  of  the  command  in  the  output
                 listing.  Only card images from SYSIN are treated in
                 this way.

 21.  INTEGER    specifies that for input data sets  in  WYLBUR  edit
                 format, WYLBUR line numbers will be used as sequence
                 numbers; and vice versa  for  output  data  sets  in
                 WYLBUR edit format.


















                             TM77-    46
1

                 APPENDIX II  --  JOB CONTROL STATEMENTS


 1.     Job Card

 2.     EXEC PGM=IEBUPDTX - Additional information may  be  specified
        with  the  PARM  parameter  or with the ./ PARM command.  See
        Appendix I for PARM options.

 3.     SYSUT1 - Old  Master  data  set.   Required  only  if  CHANGE
        commands  actually  refer  to it for original source records.
        May be sequential or partitioned, with (a) optionally blocked
        80 byte fixed length records, or (b) WYLBUR edit format.

 4.     SYSUT2 -  New  Master  data  set.   This  file  is  generally
        required.   SYSUT2 may be sequential or partitioned, with (a)
        optionally blocked 80  byte  fixed  length  records,  or  (b)
        WYLBUR  edit  format.  If BLKSIZE is omitted program defaults
        it to 80.

 5.     SYSPRINT - Listing data set,  always  required.   If  omitted
        IEBUPDTX  terminates  with  return  code  16.   This  file is
        written with DCB=(RECFM=VBM).

 6.     SYSPUNCH - DECK data set.  Required only  if  the  PARM  DECK
        option is specified.  SYSPUNCH may have any of the attributes
        valid for SYSUT2.

 7.     SYSLIB - COPY library.  Required only if LIST, COPY, or MACRO
        commands reference it.  Must be a  PDS  with  80  byte  fixed
        length records (optionally blocked), or WYLBUR edit format.

 8.     SYSUBEND - SNAP data set.  If this  DDNAME  is  present,  the
        program will produce a SNAP dump with each error message.

 9.     INTERMEDIATE UPDATE FILES  An  intermediate  update  file  is
        provided  to  IEBUPDTX by using any DDNAME that doesn't begin
        with "SYS" to describe it.  These files may be sequential  or
        partitioned,  with  either optionally blocked 80 byte records
        or WYLBUR edit format.  The  intermediate  update  data  sets
        should  contain  valid  IEBUPDTX  update  decks which will be
        considered to apply logically between  SYSUT1  and  SYSIN  in
        TIOT  order.   In  such  cases,  SYSUT1  is  updated  by  the
        intermediate update, whose output becomes "old master" to the
        next update or SYSIN.

 10.    SYSIN - Master control file.  Generally required  to  provide
        the main source of control statements to the program, but may
        be  omitted  if  an intermediate update control file which is
        sequentially organized would have been immediately  following
        SYSIN  is  provided.   In that case, the intermediate file is
        used  as  SYSIN.   SYSIN  must  be  sequential,  with  either
        optionally blocked fixed length 80  byte  records  or  WYLBUR
        edit format.


                             TM77-    47
1

       Any non-SYS files are considered  to  be  intermediate  update
       files  except the obvious ones (STEPLIB, etc.).  Any other SYS
       DDNAME may be used for the DDNAME control on  COPY  operations
       or  the  OUTDD  and  INDD parm options.  To save core or time,
       BUFNO may be specified for any file via the DCB  parameter  on
       the  DD  card.   Note  that  chained scheduling is used on all
       non-print files.


















































                             TM77-    48
1
 APPENDIX III   COMMANDS AND MAXIMUM NUMBER OF POSITIONAL OPERANDS


  COMMAND   POSITIONAL AND KEYWORD OPERANDS     SYNONYMOUS COMMANDS
+________   __________ ___ _______ ________     __________ ________


  ADD       name,version,ssi,INCR=,NEW1=,SEQID=,LIST=ALL     A, REPL

  ALIAS     name

  CHANGE    name,version,ssi,INCR=,NEW1=,SEQID=,LIST=ALL,    C, CHNGE
            NEWNAME=                                          REPRO

  COPY      name,version,fromseq,toseq,DDNAME=

  CURRENT   name,version

  DELETE    seq1,seq2                                        D, DELET

  ENDUP

  FIX       seq1,seq2,col1,col2  /bad-string/good-string/    F

  GANG      code,col                                         G

  INSERT    seq1,incr,new1                                   I

  LIST      name,version,DDNAME=

  LOAD

  MACRO     name,version

  NOTE

  NUMBER    seq1,seq2,incr,new1Ý,INSERT=YES¨                 N, NUMBR

  PARM      See Appendix I

  RENAME    name,newname

  REPLACE   seq1,seq2,incr,new1                              R

  SCAN      seq1,seq2,col1,col2  /bad-string/good-string/    S

  SCRATCH   name,version                                     DROP

  SEQUENCE  incr,new1                                        Q

  USER      name,seq1,seq2,code








                             TM77-    49
1
                 POSITIONAL PARAMETERS


 The following operands may be used as  positional  operands  on  the
 commands as indicated.

          Ordinal           Control Statements
+         _______           __________________
 Operand  Position          Function          Detail
+_______  ________          ________          ______

 name     1st               ADD, CHANGE,      ALIAS, COPY,
                            CURRENT, LIST,    MACRO, USER
                            RENAME, SCRATCH

 version  2nd               CHANGE, CURRENT,  COPY, LIST,
                            SCRATCH           MACRO

 ssi      3rd               ADD, CHANGE

 incr     varies            Used as keyword   INSERT, NUMBER,
          according to      operand only on   REPLACE, SEQUENCE
          command           ADD, CHANGE

 new1     varies            Used as keyword   Same as incr
          according to      operand only on
          command but       ADD, CHANGE
          follows incr

 code     1st on GANG                         GANG, USER
          4th on USER

 seq1     2nd on USER                         DELETE, FIX,
          1st on others                       INSERT, NUMBER,
                                              REPLACE, SCAN, USER

 seq2     3rd on USER                         DELETE, FIX,
          2nd on others                       NUMBER, REPLACE,
                                              SCAN, USER

 col      2nd                                 GANG

 col1     3rd                                 FIX, SCAN

 col2     4th                                 FIX, SCAN

 fromseq  3rd                                 COPY

 toseq    4th,                                COPY
          follows fromseq










                             TM77-    50
1

                 KEYWORD OPERANDS


 The following operands may be used as keyword operands only.

 Keyword Operand     Commands
+_______________     ________

 DDNAME=ddname       COPY, LIST

 INSERT=YES          NUMBER

 LIST=ALL            ADD, CHANGE

 NEWNAME             CHANGE

 SEQID               ADD, CHANGE









































                             TM77-    51


