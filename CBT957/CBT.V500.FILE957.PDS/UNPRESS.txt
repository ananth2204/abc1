UNPRESS  TITLE 'UNPRESS ROUTINE FOR IEBUPDTX'
* ON ENTERING THIS SUBROUTINE:
*
*        R1 PTS TO THE ADDRESS OF PASSED PARAMETER 'INTEGER',
*           A FLAG THAT IS SET WHENEVER THE INTEGER PARM IS SPECIFIED
*        R3 PTS TO BUFFER AREA IF IT A NEW BUFFER
*        R9 PTS TO LOCAL DATA AREA
*
*
*        BEGIN CSECT=UNPRESS
*
UNPRESS  START 0
*
INTEGER  EQU   X'01'               NOTE DEPENDENCE ON IEBUPDTX DEF'N
         WYBLKSIZ
BSOFF    EQU   62                  DCBBLKSI OFFSET IN DCB
         EXTRN PWA
*
         REGEQU ,                                                82060
*
         USING UNPRESS,R15
         SAVE  (14,12),,PRESS-&SYSDATE
         LR    R12,R13             HOLD SAVE AREA ADDR
         ST    R13,UNPRESAV+4      SAVE BACK CHAIN
         CNOP  0,4
         BAL   R13,UNPRESAV+76
UNPRESAV DC    18F'0'              LOCAL SAVE AREA
*
         ST    R13,8(,R12)         STORE DOWNWARD CHAIN
         DROP  R15
         USING UNPRESAV,R13        LOCAL BASE
*
*
* INITIALIZATION
*
         USING BUFDSECT,R3
         USING LOCAL,R9            R9 POINTS TO DATA AREA
         L     R4,CURREC           GET CURRENT RECORD PTR
         ICM   R7,15,MAXREC        GET END OF BUFFER ADDR        82060
         BZ    NEWBUF        BRANCH IF VERY FIRST BUFFER         82060
         CR    R7,R4               END OF PREVIOUS BUFFER?
         BH    NEXTLINE            NO
*
* IF AT BEGINNING OF BUFFER, CHECK FOR VALID WYLBUR FORMAT
*
NEWBUF   LA    R4,BUFDATA          GET ADDR OF START OF DATA
         LH    R0,0(,R4)           GET LEN OF ENTIRE BUFFER
         LTR   R0,R0               LENGTH POSITIVE??
         BNP   ERR1                NO,ERROR
         L     R5,BUFDSECT+16      IOB PTR
         LH    R2,BSOFF+LEVDCB     GET DCBBLKSI
         SH    R2,14(,R5)          GET LEN OF BLOCK READ
         CH    R2,0(,R4)           COMPARE LEN READ TO BLOCK LEN
         BNL   EDITCHEK            NOT LOW, CONTINUE TO CHECK
*
* CHECK IF OF LOAD MODULE FORMAT
*
         CLC   0(2,R4),=X'2000'    SEE IF CESD RECORD
         BE    ERR1                YES,ERROR
         CLC   0(2,R4),=X'4000'    SEE IF SYM RECORD
         BE    ERR1                YES, ERROR
         CH    R0,BSOFF+LEVDCB     LEN READ>BUFFER SIZE?
         BH    ERR1                YES, ERROR
*
* KEEP CHECKING FOR VALID WYLBUR FORMAT
*
EDITCHEK CH    R0,=Y(WYBLKSIZ)     BLOCK LEN  > MAX ALLOWED?
         BH    ERR1                YES, ERROR
         ST    R0,TOTALCNT         SAVE TOTAL BYTE COUNT
         AR    R0,R4               GET ADDR OF END OF
         ST    R0,MAXREC             BUFFER
         LA    R4,2(,R4)           R4 -> LINE NUMBER
         ST    R4,CURREC           CURREC PTS TO LINE #
         LR    R5,R4
         LA    R2,2                R2 - CNT OF BYTES IN BLOCK
         DROP  R3
         B     SUMUP
*
* STEP THROUGH ENTIRE BUFFER CHECKING FOR VALID WYLBUR LINE
*  NUMBERS (MONOTONICALLY INCREASING), VALID CONTROL BYTES AND
*  BUFFER LENGTH
*
SEQCHECK CLC   0(4,R7),0(R5)       COMPARE WITH PREV SEQ#
         BNL   ERR2                BR IF NEW NOT> OLD
SUMUP    LR    R7,R5               R7 PTS TO OLD SEQ#
         SR    R3,R3               CLEAR R3 FOR INSERT
         IC    R3,4(,R5)           PICK UP PREST COUNT
         CH    R3,=H'86'           > 86?
         BH    ERR1                YES, ERROR
         LA    R2,5(R2,R3)         BUMP REC CNT BY PREST CNT
         LA    R5,5(R5,R3)         BUMP PTR PAST THIS LINE
         C     R2,TOTALCNT         CUM SUM > TOTAL BYTE CNT?
         BH    ERR1                YES, ERROR
         BL    SEQCHECK            GO DO NEXT LINE
*
* UNPRESS ONE LINE
*
NEXTLINE LA    R1,CTLBUF           R1 PT TO OUTPUT BUFFER
         MVI   0(R1),C' '          MOVE 1 BLANK TO OUTPUT BUF
         MVC   1(79,R1),0(R1)      BLANK OUT REST
TEXT     SR    R7,R7               ZERO FOR OUTPUT CNT
         SR    R3,R3               CLR R3 FOR INSERT
         IC    R3,4(,R4)           PICK UP PREST LINE CNT
         LA    R4,5(,R4)           R4 PTS AT PREST CONTROL BYTE
         LTR   R8,R3               IS COUNT ZERO?
         BNP   LINENO              YES, GO DO SEQ. NO.
*
MORE     IC    R3,0(,R4)           GET CONTROL BYTE COUNT
         LA    R4,1(,R4)           BUMP PREST TEXT POINTER
         LA    R2,15               LOAD MASK
         NR    R2,R3               GET NON-BLANK CNT IN R2
         SRL   R3,4                BLANK CNT IN R3
         LA    R7,0(R7,R3)         ADD BLANK CNT TO OUTPUT CNT
         LA    R1,0(R1,R3)         MOVE OUTPUT PTR OVER BLANKS
         LTR   R2,R2               ANY NON-BLANKS?
         BNP   CHECK               NO
         SR    R8,R2               DECR INPUT CNT BY NON-BOANK
         BCTR  R2,0                REDUCE CNT BY 1
         EX    R2,MOVER            MOVE IN NON-BLANKS
         LA    R7,1(R7,R2)         INCR OUTPUT COUNT
         LA    R1,1(R1,R2)         MOVE OUTPUT PTR OVER NON-BLANK
         LA    R4,1(R4,R2)         MOVE INPUT PTR OVER NON-BLANK
CHECK    BCTR  R8,0                END OF LINE?
         LTR   R8,R8
         BP    MORE                NO
         BM    ERR2                ERROR
*
* INSERT SEQUENCE # FOR SYSUT1 IF INTEGER FLAG IS ON
*
LINENO   CLC   LEVNAME,=CL8'SYSUT1' CHK IF UNPRESSING SYSUT1
         BE    LINENO2             YES,
         CLC   LEVNAME,=CL8'SYSLIB'  ELSE, CHK IF SYSLIB
         BNE   LINEEND             NO, BRANCH
LINENO2  L     R3,4(,R13)          GET CALLER'S SAVE AREA
         L     R8,24(,R3)          RESTORE R1 WHEN ENTERING UNPRESS
         L     R8,0(,R8)           GET V(INTEGER) PASSED FROM CALL
         TM    0(R8),INTEGER       TEST INTEGER FLAG
         BNZ   LINEEND             BR IF INTEGER FLAG ON         82060
         CLC   CTLBUF+72(8),=CL8' ' CHK IF SEQ # ALREADY IN COL 73
         BNE   ERR3
         L     R3,CURREC           CURREC PT TO LINE
         MVC   TEMPLINE,0(R3)      SAVE FOR LOAD INSTR
         L     R3,TEMPLINE
         CVD   R3,TEMPNUMB         CONVERT TO DEC
         UNPK  SEQ(9),TEMPNUMB+3(5)  UNPACK
         OI    SEQNO+7,X'F0'       PUT F ZONE IN LAST BYTE
         MVC   CTLBUF+72(8),SEQNO  MOVE SEQ# TO COL 73/80
LINEEND  ST    R4,CURREC           SAVE PTR FOR NEXT RECORD
         B     STOP                EXIT
*
* INSTRUCTION FOR EX
*
MOVER    MVC   0(*-*,1),0(R4)
*
* PRINT OUT ERROR MSG AND ABEND
*
ERR1     LA    R2,MSG1             LOAD R2 FOR PRINT SUBROUTINE
         B     OUTMSG
ERR2     LA    R2,MSG2             LOAD R2 FOR PRINT SUBROUTINE
         B     OUTMSG
ERR3     LA    R2,MSG3
OUTMSG   L     R3,ADPWA
         MVC   3(8,R2),LEVNAME  IDENTIFY BAD DATASET             82060
         XPRNTLIN  (3),TEXT=(2),LENGTH=80
         XPRCLOSE   (3)
         ABEND 3
*
* EXIT
*
STOP     DS    0H
         L     R13,4(,R13)
         RETURN  (14,12),RC=0
*
TEMPLINE DS    1F                  TEMP AREA FOR WYLBUR LINE#
TOTALCNT DS    1F                  TOTAL LEN OF BUFFER
ADPWA    DC    A(PWA)              DCB ADDR
TEMPNUMB DS    1D                  TEMP AREA FOR CVD
SEQ      DS    0CL9
         DS    CL1                 EXTRA BYTE
SEQNO    DS    CL8                 SEQUENCE #
*
* ERROR MESSAGES
*
MSG1     DC    CL80'** DDNAMECT - INVALID BLOCK LENGTH FOR WYLBUR EDIT F
               ORMAT **'                                         82060
MSG2     DC    CL80'** DDNAMECT - INVALID EDIT FORMAT OR SEQUENCE NUMBER
               S **'                                             82060
MSG3     DC    CL80'** DDNAMECT - INTEGER=NO PARM SPECIFIED, BUT SEQUEN*
               CE NUMBERS FOUND IN COL 73/80 **'                 82060
*
         BUFDSECT
BUFIOBPT EQU   BUFDECB+16          IOB PTR OFFSET IN BUFDECB
*
         LOCAL TYPE=DSECT
*
         END   UNPRESS
